[{"code": "(fn [x y]\n  (map #(Character/getNumericValue %)\n       (str (* x y))))", "problem": 99, "user": "4da3e51330acd6ed10482a68"}, {"code": "#(map (comp read-string str)\r\n      (str (* % %2)))", "problem": 99, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "(fn [a b]\r\n  (map #(Integer. (str %)) (str (* a b))))", "problem": 99, "user": "4dab218f30acd6ed15482a68"}, {"code": "(fn product-digits [a b]\r\n  (let [ans (* a b)]\r\n    (loop [init ans xs []]\r\n      (if (= init 0)\r\n  (reverse xs)\r\n\t(recur (int (/ init 10)) (conj xs (mod init 10)))))))", "problem": 99, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn [x y]\r\n  (->> (* x y) str seq (map #(Integer. (str %)))))", "problem": 99, "user": "4dbe68c7535d020aff1edf5e"}, {"code": "(comp #(map (fn[x](- (int x) 48)) %) str *)", "problem": 99, "user": "4db03279838c48654951d9bc"}, {"code": "(fn [n1 n2]\r\n  ((fn [n r]\r\n     (if (< n 10) (cons n r) (recur (quot n 10) (cons (mod n 10) r))))\r\n   (* n1 n2) []))", "problem": 99, "user": "4dc1ee85535d020aff1edf91"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4db4714f535dc0f10411755a"}, {"code": "#(map (fn [c] (- (int c) 48)) (str (* % %2)))", "problem": 99, "user": "4dce6e41535d5973398f92a2"}, {"code": "(comp (partial map (comp bigint str)) seq str *)", "problem": 99, "user": "4dc7e8c6535d8a4b2fd74291"}, {"code": "(fn [a b]\r\n     (map #(Integer/parseInt %) (map str (seq (str (* a b))))))", "problem": 99, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "(fn [x y] (map #(Character/digit % 10) (seq (str (* x y)))))", "problem": 99, "user": "4daddc19c9a9d6ed4599dc57"}, {"code": "#(for[x(str(* %1 %2))](read-string(str x)))", "problem": 99, "user": "4dd4034a535dae65d5c462df"}, {"code": "(fn [a b] (map #(read-string (str %)) (str (* a b))))", "problem": 99, "user": "4ddc1c89535d02782fcbea01"}, {"code": "(fn\r\n  [x y]\r\n  (loop [p (* x y) result []]\r\n    (if (= p 0)\r\n      result\r\n      (recur (int (/ p 10)) (cons (mod p 10) result)))))", "problem": 99, "user": "4db53f87535d87e67b28fe08"}, {"code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn [& xs]\r\n  (map #(Integer. %) (map str (seq (.toString (bigint (reduce * xs)))))))", "problem": 99, "user": "4dc479c0c647a3c54c2ddc73"}, {"code": "(fn [a b]\r\n  (loop [n (* a b)\r\n         r '()]\r\n    (if (< n 10)\r\n      (conj r n)\r\n      (recur (Math/round (Math/floor (/ n 10.0))) (conj r (mod n 10))))))", "problem": 99, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "#(loop [product (* % %2)\r\n   result []]\r\n    (if (= 0 product)\r\n      result\r\n      (recur (int (/ product 10)) (cons (mod product 10) result))))", "problem": 99, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4dbef924535d020aff1edf6e"}, {"code": "#((fn lacum [x]\r\n  (loop [n x acc '()]\r\n\t   (if(zero?  n)\r\n\t      acc\r\n\t      (recur (quot n 10) (conj acc (rem n 10)))))) (* %1 %2))", "problem": 99, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn [a b]\r\n  (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4dbb0b6c535d1e037afb21b0"}, {"code": "(fn int2seq\r\n  ([n] \r\n   (if (= n 0) nil\r\n     (cons (mod n 10) (int2seq (int (/ n 10))))))\r\n  ([n1 n2] (reverse (int2seq (* n1 n2)))))", "problem": 99, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(comp (partial map (comp (partial + -48) int)) str *)", "problem": 99, "user": "4db85282535d1e037afb218a"}, {"code": "(fn [f s] \r\n  (let [n (* f s)]  (reverse          \r\n(for [y (iterate (partial * 10) 1) :while (<= y n)]\r\n              (rem (int (/ n y)) 10)))))", "problem": 99, "user": "4dc986d0535d5973398f9285"}, {"code": "(fn [a b]\r\n  (loop [res (list) v (* a b)]\r\n    (if (zero? v)\r\n      res\r\n      (let [ones (mod v 10) \r\n            others (int (/ v 10))]\r\n        (recur (cons ones res) others)))))", "problem": 99, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "#(for [i (str (* %1 %2))] (Integer/parseInt (str i)))", "problem": 99, "user": "4dae916eedd6309eace4d155"}, {"code": "(fn [x y]\r\n  (for [d (str (* x y))]\r\n    (- (int d) (int \\0))))", "problem": 99, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn [x y]\r\n  (->> (* x y)\r\n     str\r\n     (map str)\r\n     (map #(Integer/parseInt %))))", "problem": 99, "user": "4dc537fd535d8a4b2fd74282"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "4de77a0a535d08e6dec9fdfa"}, {"code": "(fn [x y]\r\n  (->> (* x y) (str) (map #(Integer/parseInt (str %)))))", "problem": 99, "user": "4df1e213535d08e6dec9fe20"}, {"code": "(fn [n1 n2]\r\n       (map #(Integer/valueOf %) (map str (seq (str (* n1 n2))))))", "problem": 99, "user": "4deb529a535d08e6dec9fe04"}, {"code": "(fn [x y]\r\n  (letfn [(digits [n]\r\n    (loop [d []\r\n           q n]\r\n\t    (if (> q 0)\r\n\t      (recur (conj d (mod q 10)) (quot q 10))\r\n\t      (reverse d))))]\r\n    (digits (* x y))))", "problem": 99, "user": "4dd52e29535dae65d5c462e5"}, {"code": "(fn [a b] (vec (map #(Integer/decode %) (re-seq #\".\" (str (* a b))))))", "problem": 99, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "problem": 99, "user": "4db1b3951254ad5b4805fa6f"}, {"code": "(fn [a b]\r\n  (map #(read-string (str %))(seq(str(* a b)))))", "problem": 99, "user": "4e03b010535d04ed9115e794"}, {"code": "(fn muldigi [x y]\r\n  (for [c (str (* x y))]\r\n    (Integer/parseInt (str c))))", "problem": 99, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "(fn product-digits [x y]\r\n  (letfn [\r\n    (digits [x]\r\n      (if (< x 10)\r\n        [x]\r\n        (conj (digits (int (/ x 10))) (mod x 10))))]\r\n    (digits (* x y))))", "problem": 99, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn [a b] (reverse (map #(rem % 10)\r\n(take-while pos? (iterate #(quot % 10) (* a b))))))", "problem": 99, "user": "4db1bfe21254ad5b4805fa71"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4df669d4535d08e6dec9fe35"}, {"code": "#(map \n  (fn [x] (- (int x) 48))\n(str (* % %2)))", "problem": 99, "user": "4daa374930acd6ed13482a68"}, {"code": "#(->> (* % %2) str (map (fn [c] (- (int c) 48))))", "problem": 99, "user": "4dbb1126535d1e037afb21b3"}, {"code": "(fn dig [n1 n2]\r\n   (map #(- (int %) (int \\0)) (str (* n1 n2))))", "problem": 99, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "(fn [a b] (loop [acc nil n (* a b)] \r\n  (if (pos? n)\r\n    (recur (cons (rem n 10) acc) (quot n 10))\r\n    acc)))", "problem": 99, "user": "4dbad895535d1e037afb21ae"}, {"code": "(fn [a b]\r\n  (let [p (* a b)]\r\n    (if (= 0 p)\r\n      '(0)\r\n      (loop [p p s '()]\r\n        (if (= 0 p)\r\n          s\r\n          (recur (quot p 10) (cons (rem p 10) s)))))))", "problem": 99, "user": "4db0114d838c48654951d9b8"}, {"code": "#(map (fn [a] (- (int a) 48)) (seq (str (* %1  %2))))", "problem": 99, "user": "4dae4da5c9a9d6ed4e99dc57"}, {"code": "(fn prod-dig [a b]\r\n  (map #(java.lang.Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4e123905535d04ed9115e7ce"}, {"code": "(fn int2seq\r\n  ([n]\r\n   (if (= n 0) nil\r\n     (cons (mod n 10) (int2seq (int (/ n 10))))))\r\n  ([n1 n2] (reverse (int2seq (* n1 n2)))))", "problem": 99, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "#(loop [n (* % %2) r '()]\r\n    (if(= 0 n) r\r\n       (recur (quot n 10) (conj r (rem n 10)))))", "problem": 99, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn [a b]\r\n  (let [prod (* a b)]\r\n    (for [d (str prod)] (Integer/parseInt (str d)))))", "problem": 99, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [x y]\r\n  (letfn [(digits [x coll]\r\n    (if (= 0 x) coll (digits (quot x 10) (conj coll (mod x 10)))))]\r\n  (digits (* x y) '())))", "problem": 99, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn [n1 n2]\r\n  (let [prod   (* n1 n2)\r\n        \r\n        digits  (fn dg [d] \r\n                    (loop [acc '() num d]\r\n                        (if (zero? num) \r\n                            acc     \r\n                            (recur (cons (mod num 10) acc) (quot num 10)))))\r\n       ]\r\n\r\n    (digits prod)))", "problem": 99, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "(fn [x y]\n  (->> x\n    (* y)\n    (str)\n    (map str)\n    (map #(Integer/parseInt %))))", "problem": 99, "user": "4e28120f535deb9a81d77efa"}, {"code": "(fn [x y] (map #(Integer/parseInt %)\n(map #(Character/toString %)(vec (str (* x y))))))", "problem": 99, "user": "4e3000c8535deb9a81d77f13"}, {"code": "(fn [a b] (map #(Integer/parseInt %) (re-seq #\".\" (str (* a b)))))", "problem": 99, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "(fn goof [x y]\n  (map read-string\n    (-> (* x y) (#(Integer/toString %))\n    (clojure.string/split #\"\")\n    (rest))\n  )\n)", "problem": 99, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn [n1 n2]\n  (map (comp read-string str) (seq (str (* n1 n2)))) )", "problem": 99, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "#(map (fn [n] (- (int n) 48)) (str (* % %2)))", "problem": 99, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn[a b](map #(-(int %)48)(str(* a b))))", "problem": 99, "user": "4dad8fe9c9a9d6ed1899dc57"}, {"code": "(comp (partial map #(- (int %) 48)) str *)", "problem": 99, "user": "4e4a94a9535dc968683fc4cd"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "(fn [n1 n2]\n  (let [prod (* n1 n2)]\n    (map #(- (int %1) 48) (reverse (reverse (str prod))))))", "problem": 99, "user": "4e4bf20e535dc968683fc4d9"}, {"code": "(fn [a b]\n(map #(Integer/parseInt (str %)) \n(str (* a b))) )", "problem": 99, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str (* a b))) ))", "problem": 99, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn [a b] \n  (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "#(map (fn [x] (- (int x) 48)) (str (* % %2)))", "problem": 99, "user": "4e52d815535d302ef430da77"}, {"code": "(fn [f s] (map #(- (int %) 48) (str (* f s))))", "problem": 99, "user": "4e4870d1535dc968683fc4bc"}, {"code": "#(map (fn [x] (read-string (str x))) (str (*% %2)))", "problem": 99, "user": "4e36038f535deb9a81d77f31"}, {"code": "(fn [x y] (map #(Integer. (str %)) (seq (str (* x y)))))", "problem": 99, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn [a b]\n  (loop [acc () n (* a b)]\n    (if (< n 10)\n      (cons n acc)\n      (let [m (mod n 10)]\n        (recur (cons m acc) (/ (- n m) 10))))))", "problem": 99, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn product-digits [x  y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn [& nms]\n  (map #(read-string (str %)) \n       (.toString (apply * nms))))", "problem": 99, "user": "4dbdce65535d020aff1edf4d"}, {"code": "(fn [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "4e4ad154535dc968683fc4d1"}, {"code": "(fn [x y]\n  (->> (* x y)\n      (str )\n      (map #(Character/digit % 10) ,)))", "problem": 99, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn [& ns]\n  (let [splitter (fn [n s]\n                  (if (zero? n)\n                      s\n                      (recur (quot n 10) (conj s (rem n 10)))))]\n    (splitter (apply * ns) '())))", "problem": 99, "user": "4e42f930535dc968683fc49f"}, {"code": "(comp #(map (fn [x] (- (int x) 48)) (str %)) *)", "problem": 99, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "(fn [x y]\n  (map #(Character/getNumericValue %) \n  (seq (str (* x y)))))", "problem": 99, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "(fn [a b] \n  (vec (map #(Integer/parseInt (str %)) (seq (str (* a b))))))", "problem": 99, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "#(map (fn [c] (Character/digit c 10)) (str (* % %2)))", "problem": 99, "user": "4e597b2c535d8a8b8723a29d"}, {"code": "(fn [a b] (loop [n (* a b) acc '()] (if (= n 0) acc (recur (quot n 10) (cons (rem n 10) acc)))))", "problem": 99, "user": "4e4b911f535dc968683fc4d6"}, {"code": "(fn[a b]\n  (map #(Integer/parseInt %)\n    (map str (seq (str (* a b))))))", "problem": 99, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "(comp \n  #(map (comp read-string str) %) \n  str \n  *)", "problem": 99, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "(fn product-digits [x y]\n  (map #(Integer. (str %)) (str (* x y))))", "problem": 99, "user": "4db58ccb535d87e67b28fe10"}, {"code": "#(map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8  8 \\9 9} (vec (str (* %1 %2))))", "problem": 99, "user": "4e44358f535dc968683fc4a8"}, {"code": "#(map read-string (map str (vec (str (* %1 %2)))))", "problem": 99, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "(fn [a b] (map #(Integer. (str %)) (seq (str (* a b)))))", "problem": 99, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn [a b]\n  (reverse\n    ((fn this [x]\n      (when (<= 1 x)\n        (cons (mod x 10) (this (int (/ x 10))))))\n    (* a b))))", "problem": 99, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn [x y] (map #(Integer/valueOf (str %)) (str (* x y))))", "problem": 99, "user": "4e588e84535d8a8b8723a294"}, {"code": "(fn product-digits- [x y]\n  \"99. Write a function which multiplies two numbers and returns the result                                                                                             \n  as a sequence of its digits.\"\n  (letfn [(digits- [n] (if (> n 0) (conj (digits- (quot n 10)) (rem n 10)) []))]\n    (digits- (* x y))))", "problem": 99, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn [x y]\n  (into [] (map #(Integer/parseInt (.toString %)) (str (* x y)))))", "problem": 99, "user": "4db045b5838c48654951d9be"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %))\n       (str (* a b))))", "problem": 99, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn [a b] (->> (* a b) str (map #(- (int %) 48))))", "problem": 99, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn product-digits [a b]\n  (let [r (.toString (* a b))]\n  (map #(- (int %) (int \\0)) r)))", "problem": 99, "user": "4e50c894535dc968683fc4ee"}, {"code": "#( ->> (* %1 %2) str (map (fn [n] (- (int n) 48))))", "problem": 99, "user": "4e6e6630535d5021c1a89609"}, {"code": "#(map (fn [x] (mod (int x) 48)) (str (* % %2)))", "problem": 99, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn [a b] (vec (map #(Integer/valueOf %) (map str (seq (.toString (* a b)))))))", "problem": 99, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "#(for [x (str (* % %2))] (Character/digit x 10))", "problem": 99, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "(fn [a b]\n  (map \n    #(Integer/parseInt %) \n    (map \n      str \n      (seq (str (* a b))))))", "problem": 99, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn [a b]\n        (loop [n (* a b) s ()]\n     (if (zero? n) s\n\t       (recur (int (/ n 10)) (conj s (mod n 10))))))", "problem": 99, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [a b]\n  (map  #(read-string (str %))\n    (seq (str (* a b)))))", "problem": 99, "user": "4e6a2f93535d8ccf87e9feaa"}, {"code": "(fn [n1 n2] (loop [m (* n1 n2) ret nil] (if (< m 10) (cons m ret) (recur (quot m 10) (cons (rem m 10) ret)))))", "problem": 99, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn prod-digits [n1 n2]\n  (->> (* n1 n2)\n       (str)\n       (re-seq #\"\\d\")\n       (map #(Integer/parseInt %))))", "problem": 99, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn [a b] (map #(Integer/parseInt %) (map str (str (* a b)))))", "problem": 99, "user": "4daf907aedd6309eace4d17b"}, {"code": "#(loop [s '(), n (* % %2)] \n  (if (= n 0)\n    s\n    (recur \n      (cons (rem n 10)  s)\n      (quot n 10)\n    )\n  )\n)", "problem": 99, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn [n n2]\n  (map #(- (int %) 48) (str (* n n2))))", "problem": 99, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4e739e13535dff18050a9c76"}, {"code": "(fn prod-dig [a b]\n  (let [prod (* a b)\n        len (count (str prod))]\n    (map #(rem % 10) \n      (reverse (take len (iterate #(quot % 10) prod))))))", "problem": 99, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "(fn [a b] (map #(Integer. (.toString %)) (seq(str(* a b)))))", "problem": 99, "user": "4e6e3aac535d5021c1a89603"}, {"code": "#(loop[x(*%1%2)s'()](if(> x 0)(recur (quot x 10) (conj s (rem x 10)))s))", "problem": 99, "user": "4e7eff9e535db966e863cc38"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4e720985535d5021c1a89655"}, {"code": "(fn [a b]\n (for [c (. (* a b) toString)] (. Integer parseInt (. String valueOf c))))", "problem": 99, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "4e7e55ab535db169f9c79711"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "#(map (fn [x] (- (int x) 48)) (str(reduce * %&)))", "problem": 99, "user": "4e7f4147535db966e863cc3d"}, {"code": "#(map (fn [s] (Integer/parseInt (str s))) (apply vector (str (* %1 %2))))", "problem": 99, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn [x y]\n  (map (fn [c] (Character/getNumericValue c)) (seq (str (* x y)))))", "problem": 99, "user": "4dc29a1d535d020aff1edf96"}, {"code": "(fn [a b] (map #(. Integer parseInt (str %)) (seq (pr-str (* a b)))))", "problem": 99, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4e7e05a6535db169f9c796fe"}, {"code": "(fn [x y] \n  (map #(Character/digit % 10) (String/valueOf (#(* %1 %2) x y))))", "problem": 99, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn [a b]  (map #(Integer/parseInt (str %1)) (str (* a b)))  )", "problem": 99, "user": "4e78c208535db95036265722"}, {"code": "(fn [& numbers]\n  (letfn [(digits [n]\n            (if (< n 10)\n                [n]\n                (conj (digits (quot n 10)) (rem n 10))))]\n  (digits (apply * numbers))))", "problem": 99, "user": "4e7c8fd1535db169f9c796be"}, {"code": "#(reduce (fn [c x] (conj c (Integer/parseInt (str x)))) [] (apply list (str (* % %2))))", "problem": 99, "user": "4e794004535db169f9c796a1"}, {"code": "(fn mult-to-string [x y]\n  (map #(Integer/parseInt %) (map str (seq (str (* x y))))))", "problem": 99, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn [x y] (vec (map (comp #(Integer. %) str) (seq \n(str (* x y))))))", "problem": 99, "user": "4e80d71b535db62dc21a62b7"}, {"code": "(fn [x y] (reduce (fn [a b] (conj a (Character/digit b 10))) [] (str (* x y))))", "problem": 99, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn [x y]\n    \n    (map (fn [x] (Character/getNumericValue x)) (str (* x y)))\n    \n)", "problem": 99, "user": "4e78dc98535db95036265724"}, {"code": "(fn pd [m1 m2]\n  (map #(java.lang.Integer/valueOf (str %)) (vec (seq (str (* m1 m2))))))", "problem": 99, "user": "4e7ada51535db169f9c796ae"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "4e71705e535d5021c1a89649"}, {"code": "#((fn [n]\n  (loop [a '() q (quot n 10) r (mod n 10)]\n    (if (= 0 q) \n      (conj a r)\n      (recur (conj a r) (quot q 10) (mod q 10))))) (* %1 %2))", "problem": 99, "user": "4e77c1db535d324fb2983d72"}, {"code": "(fn dog [x y]\n  (let [p (* x y)]\n    (map #(Integer. (str %)) (seq (str p)))))", "problem": 99, "user": "4daedd1eedd6309eace4d164"}, {"code": "(fn [x y] (let [r (seq (str (* x y)))] (map #(Integer/valueOf (str %)) r)))", "problem": 99, "user": "4e5a3891535d8a8b8723a2aa"}, {"code": "(fn [a b] (map #(Integer. (str %)) (str (* a b))))", "problem": 99, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "(comp (partial map #(- (int %) 48)) str *)", "problem": 99, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn [l m] (let [n (* l m)]\n  (map #(Integer/parseInt (str %)) (str n))))", "problem": 99, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn [& args]\r\n  (->> (apply * args)\r\n      str\r\n      (map #(Integer/parseInt (str %)))))", "problem": 99, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn [x y]\n  (->> (* x y)\n       (str)\n       (seq)\n       (map str)\n       (map #(Integer/parseInt %))))", "problem": 99, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "#(into [] (map (fn [x] (- (int x) 48)) (str (* % %2))))", "problem": 99, "user": "4e842ebb535db62dc21a62df"}, {"code": "#(map (fn [x] \n  (read-string (str x))) \n  (seq (str (* % %2))))", "problem": 99, "user": "4e86a443535dc036d0eaab83"}, {"code": "(fn f\n  ([m n] (f (* m n)))\n  ([ x ] (if (< 0 x)\n           (conj (f (int (/ x 10))) (mod x 10))\n           [] )))", "problem": 99, "user": "4e860e85535db62dc21a62f1"}, {"code": "(comp (partial map (comp read-string str)) seq str *)", "problem": 99, "user": "4db8ec47535d1e037afb219d"}, {"code": "(fn [n m]\r\n    (reduce\r\n\t     #(conj %1 (- (int %2) (int \\0)))\r\n\t     []\r\n\t     (str (* n m))))", "problem": 99, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4dcc5aff535d5973398f9293"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "problem": 99, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt %) (map str (str (* a b)))))", "problem": 99, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [x y] (reverse (map #(rem % 10) (take-while (complement zero?) (iterate #(quot % 10) (* x y))))))", "problem": 99, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [x y] (map (fn [x] (new Integer (str x))) (str (* x y))))", "problem": 99, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn [x y] ( (fn nextone [n] (if (> n 0) (concat (nextone (int (/ n 10))) [(mod n 10)]) []) ) (* x y)))", "problem": 99, "user": "4e89de60535d3e98b8023285"}, {"code": "(fn [f1 f2]\n  (loop [accu '()\n   p (* f1 f2)]\n    (if (= p 0)\n      (apply vector accu)\n      (recur (cons (mod p 10) accu) (quot p 10)))))", "problem": 99, "user": "4e82c062535db62dc21a62cc"}, {"code": "(let [digits {\\0 0, \\1 1, \\2 2, \\3 3, \\4 4, \\5 5, \\6 6, \\7 7, \\8 8, \\9 9}\n      to-digits #(map digits (str %))]\n  (comp to-digits *))", "problem": 99, "user": "4daf36c2edd6309eace4d175"}, {"code": "(fn [a b]\n  (let [n (* a b)]\n    (reverse\n      (map first\n        (take-while #(> (+ (first %) (second %)) 0)\n          (iterate\n            (fn [p]\n              [(rem (second p) 10)\n              (quot (second p) 10)])\n          [(rem n 10) (quot n 10)]))))))", "problem": 99, "user": "4e8e8c24535d65386fec2143"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "4dada16fc9a9d6ed2699dc57"}, {"code": "(comp (partial map #(- (int %) 48)) str *)", "problem": 99, "user": "4db091b7838c48654951d9c2"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn [a b]\n  (->> (* a b) str vec (map str) (map #(Integer/parseInt %)) vec))", "problem": 99, "user": "4e88feef535d8b9bb0147ca8"}, {"code": ";(fn [x y]\n;  (map read-string \n;    (map str (vec (str (* x y))))))\n\n(fn [x y]\n ((fn [nbr result]\n   (if (= nbr 0)\n      result\n      (recur (quot nbr 10) (conj result (mod nbr 10)))))\n  (* x y) '()))", "problem": 99, "user": "4e73a9dc535dff18050a9c77"}, {"code": "#(map (comp read-string str) (seq (str (* % %2))))", "problem": 99, "user": "4e823ed7535db62dc21a62c7"}, {"code": "(fn [x y] \n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4e5867d1535d8a8b8723a291"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4dc0ff08535d020aff1edf84"}, {"code": "#(for [c (str (* % %2))] (- (int c) 48))", "problem": 99, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn [x y] (map #(- (int %) 48) (vec (str (* x y)))))", "problem": 99, "user": "4e5a460f535d8a8b8723a2ab"}, {"code": "(fn sequence-of-digits [num1 num2]\n  (let [product (* num1 num2)]\n    (map #(Integer/parseInt (str %)) (vec (str product)))))", "problem": 99, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "#(map (fn [c] (- (int c) 48)) (str (* % %2)))", "problem": 99, "user": "4e8df08f535d65386fec213e"}, {"code": "(fn [x y](map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4db92654535d1e037afb21a0"}, {"code": "#(map (fn [d] (Character/digit d 10)) (str (reduce * %&)))", "problem": 99, "user": "4e8f4f64535d65386fec2149"}, {"code": "#(map (fn [c] (Integer/parseInt (str c))) (str (apply * %&)))", "problem": 99, "user": "4daef21cedd6309eace4d169"}, {"code": "(comp (partial map (comp read-string str)) str *)", "problem": 99, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn [x y] ((fn[x] (reverse ((fn digits [x] (if (> x 0) (conj (digits (quot x 10)) (rem x 10)) '() ))x))) (* x y)))", "problem": 99, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn [a b] \n  (vec (map #(mod % 10)\n  (reverse (take-while pos? \n                      (iterate #(int (/ % 10)) \n                                (* a b)))))))", "problem": 99, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(fn [x y]\n    (map #(Integer/parseInt (str %)) (-> (* x y) str reverse reverse))\n  )", "problem": 99, "user": "4e8b73e4535d65386fec2120"}, {"code": "(fn my-pd\n  [a b]\n  (map (fn [c] (Integer/parseInt (str c))) (seq (str (* a b)))))", "problem": 99, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn [a b] (map #(Integer/parseInt %) (re-seq #\"[0-9]\" (str (* a b)))))", "problem": 99, "user": "4e7650c5535d324fb2983d68"}, {"code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn [a b]\n  (into [] (map (fn [x] (Integer/parseInt (str x))) (str (* a b)))))", "problem": 99, "user": "4e955b95535dbda64a6f6b33"}, {"code": "(fn [& digits] \n  (apply (fn pd [val sq]\n    (if (= 0 val)\n      sq\n      (pd (quot val 10) (conj sq (mod val 10)))))\n      [(apply * digits) '()]))", "problem": 99, "user": "4e98a6d0535dbda64a6f6b5e"}, {"code": "(fn [a b](map #(- (int %) 48) (into [] (str (* a b)))))", "problem": 99, "user": "4e6f8431535d5021c1a8961e"}, {"code": "(fn [a b]\n  (let [z (* a b)]\n  (reverse\n  ((fn singles [n]\n    (let [s (mod n 10) t (quot n 10) ]\n    (if (not (= 0 t s))\n      (cons s (singles t)))\n  ))z))\n))", "problem": 99, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn [x y] (vec (map #(Integer/parseInt (str %)) (flatten (partition 1 (str(* x y)))))))", "problem": 99, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn prodig [x1 x2] (sequence (map #(- (int %1) 48) (str (* x1 x2)) )   ))", "problem": 99, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn [x y](map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "(fn [a b]\n  (->> (* a b) str (map #(Integer/parseInt (str %)))))", "problem": 99, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn seq-digits [a b]\n  (letfn [(get-digits [n sofar]\n            (if (= n 0)\n              sofar\n              (let [x (mod n 10)]\n                (get-digits (int (/ n 10)) (cons x sofar)))))]\n    (into [] (get-digits (* a b) '()))))", "problem": 99, "user": "4e84f77c535db62dc21a62e5"}, {"code": "#(map (fn [s] (Integer/parseInt (str s))) (str (* %1 %2)))", "problem": 99, "user": "4e8516d0535db62dc21a62e8"}, {"code": "(fn [x y]\n  (map #(Integer. (str %)) \n    (filter #(Character/isDigit %) \n      (seq (str (* x y))))))", "problem": 99, "user": "4e14b925535d04ed9115e7df"}, {"code": "#(loop [x (* %1 %2) res '()] (if (= x 0) res (recur (int (/ x 10)) (conj res (mod x 10)))))", "problem": 99, "user": "4e79ff2a535db169f9c796a9"}, {"code": "#(map (fn [x] (Character/digit x 10))\n      (str (* %1 %2)))", "problem": 99, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "problem": 99, "user": "4ea09fa4535d7eef308072aa"}, {"code": "#(map (fn [v] (- (int v) (int \\0))) (pr-str (* %1 %2)))", "problem": 99, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn  [x & more]\r\n    (map #(Integer/parseInt %)\r\n         (re-seq #\"\\d\" (str\r\n                        (reduce * (conj more x))))))", "problem": 99, "user": "4ea09441535d7eef308072a7"}, {"code": "#(for [c (re-seq #\".\" (str (* % %2)))] (Integer/parseInt c))", "problem": 99, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn [n1 n2]\n   (-> (* n1 n2)\n       str\n       (->> (map (comp #(Integer. %) str)))))", "problem": 99, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn [a b] (map \n  #(Integer/parseInt (str %)) \n  (seq (str (* a b)))))", "problem": 99, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %))\n               (seq (str (* x y)))))", "problem": 99, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn [a b]\n  (map #(- (int %) (int \\0))\n    (seq (str (* a b)))))", "problem": 99, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "(letfn [(digiseq [number]\n          (loop [d number s '()] (if (<= d 9)\n                               (cons d s)\n                               (recur (quot d 10) (cons (mod d 10) s)))))]\n  (fn [a b] (digiseq (* a b)))\n)", "problem": 99, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "#(->> %& (apply *) (str) (map (fn [n] (Integer/parseInt (str n)))))", "problem": 99, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "(fn [x y] (map \n  (fn [z] \n    (->> z\n    (format \"%c\")\n    (Integer/parseInt)\n))\n(seq (str (* x y)))))", "problem": 99, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "#(map read-string (re-seq #\".\" (str (* % %2))))", "problem": 99, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "(fn [a b]\n  (letfn [(f [[n r]] [(int (/ n 10)) (conj r (rem n 10))])]\n    (flatten (last\n      (take-while (fn [[x _]] (pos? x)) (iterate f [(* a b) '()]))))))", "problem": 99, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4ea0cfb0535d7eef308072ae"}, {"code": "(fn dig[x y]\r\n  (map (fn[x] (-  (int x) 48)) (into []  (str(* x y))))\r\n  )", "problem": 99, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "4e72ac47535d5021c1a89666"}, {"code": "(fn [x1 x2]  (map  (fn [x] (Integer/parseInt x  10))  (map str (seq (str  (* x1 x2)))) )  )", "problem": 99, "user": "4e86d3cf535dceadca46984c"}, {"code": "(fn [& l] \n  (map #(- (int %) (int \\0))\n    (seq (str (reduce * l)))))", "problem": 99, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn [x y]\n  (letfn\n      [(digits [n] (if (zero? n) '(0) (digits-finish n ())))\n       (digits-finish [n digits]\n         (if (> n 0)\n           (recur (int (/ n 10)) (conj digits (mod n 10)))\n           digits))]\n    (digits (* x y))))", "problem": 99, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn [x y ] (map #(-> % str Integer/parseInt) (str (* x y))))", "problem": 99, "user": "4e9fde3c535d7eef3080729b"}, {"code": "(fn prod-dig [a b]\r\n  (let [prod (* a b)\r\n        len (count (str prod))]\r\n    (map #(rem % 10) (reverse \r\n(take len (iterate #(quot % 10) prod))))))", "problem": 99, "user": "4e8ddf32535d65386fec213c"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4eab612d535d7eef30807316"}, {"code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (seq (str (* x y)))))", "problem": 99, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4eaa96e1535d7eef3080730d"}, {"code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (seq (str (* x y))))\n)", "problem": 99, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn [x y]\n  (let [z (* x y)]\n    (map #(- (int %) (int \\0)) (seq (str z)))))", "problem": 99, "user": "4eaa5c51535d7eef3080730a"}, {"code": "(fn [x y]\r\n  (reverse\r\n    (map #(mod % 10)\r\n      (take-while pos?\r\n        (iterate #(quot % 10) (* x y))))))", "problem": 99, "user": "4e994541535dbda64a6f6b64"}, {"code": "(fn [a b] (\n  (fn h [res v] \n    (if (= 0 v) (reverse res)\n      (let [n (mod v 10) r (int (/ v 10))]\n        (h (conj res n) r)\n      )\n    )\n  ) [] (* a b)))", "problem": 99, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn [x y]\n  (\n   (fn todigit [z] (if (= z 0) [] (conj (todigit (int (/ z 10))) (mod z 10)))) \n    (* x y)\n   ))", "problem": 99, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn [x y] (map #(read-string (str %1)) (str (* x y))))", "problem": 99, "user": "4dbdab4e535d020aff1edf49"}, {"code": "(fn [x y]\n  (let [z (str (* x y))]\n  (loop [a z res []]\n    (if-not (first a)\n      (map read-string (reverse res))\n      (recur (subs a 1) (cons (subs a 0 1) res))))))", "problem": 99, "user": "4eb0afed535d7eef3080733e"}, {"code": "#(loop [x (* % %2) ds []]\n    (let [d (mod x 10)]\n      (if (> x 9)\n          (recur (/ (- x d) 10)\n                 (cons d ds))\n          (cons d ds))))", "problem": 99, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4ea9b80c535d7eef30807306"}, {"code": "(fn [x y]\n  (let [prod (str (* x y))]\n    (map #(- (int %) (int \\0)) prod)))", "problem": 99, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [n m] (map #(Integer/parseInt (str %)) (str (* n m))))", "problem": 99, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn [& args]\n  (let [x (apply * args)]\n    (for [ch (str x)]\n      (Integer/parseInt (str ch)))))", "problem": 99, "user": "4ea57300535d7eef308072d5"}, {"code": "(fn [& nos]\n  (map #(- (int %) 48)(seq (str (reduce * nos)))))", "problem": 99, "user": "4eb404ba535d7eef3080735a"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt %) (map str (str (* x y)))))", "problem": 99, "user": "4eb01df4535d7eef30807337"}, {"code": "#(->> (* % %2) str (map (fn [c] (- (int c) 48))))", "problem": 99, "user": "4ea55757535d7eef308072d3"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(comp (fn [n] (map #(- (int %) (int \\0)) (str n))) *)", "problem": 99, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "problem": 99, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn [x y] (map #(. Integer parseInt (str %)) (seq (str (* x y)))))", "problem": 99, "user": "4eabb245535d7eef30807319"}, {"code": "(fn [x y]\n  (map #(- (int %) (int \\0))\n       (pr-str (* x y))))", "problem": 99, "user": "4e4b4564535dc968683fc4d3"}, {"code": "#(map (fn [x] (Integer. (str x))) (str (* %1 %2)))", "problem": 99, "user": "4e58c019535d8a8b8723a297"}, {"code": "#(map (fn [x] (- (int x) 48)) (str (* % %2)))", "problem": 99, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "problem": 99, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn [a b]\n  (let [p (* a b)\n        s (str p)]\n    (map\n      (fn [i] (Integer/parseInt (str i)))\n      (seq s))))", "problem": 99, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "#(map read-string (map str (str (* %1 %2))))", "problem": 99, "user": "4db5082e535d87e67b28fe03"}, {"code": "(fn [a b] (map #(Character/digit % 10)(str (* a b))))", "problem": 99, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "(fn [p1 p2] (map #(Integer. (apply str %)) (partition 1 (str(* p1 p2)))))", "problem": 99, "user": "4ea85846535d7eef308072f9"}, {"code": "(fn [n m] (map #(java.lang.Character/getNumericValue %) (seq (str (* m n)))))", "problem": 99, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn [x,y] (map #(Integer/parseInt (str %)) (vec(str(* x y))) ))", "problem": 99, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn [x y]\n  (->> (* x y) str (map #(- (int %) (int \\0)))))", "problem": 99, "user": "4ec132a0535dfed6da9c6da9"}, {"code": "(fn [num1 num2]\n  (map #(Integer/decode (str %))\n    (Integer/toString (* num1 num2))))", "problem": 99, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn [x y] (map (fn [a] (- (int a) 48)) (seq (str (* x y )))))", "problem": 99, "user": "4ec12516535dfed6da9c6da7"}, {"code": "(fn f [a b]\n  ((fn [o] (loop [n o d '()]\n    (if (= n 0) d (recur (quot n 10) (cons (mod n 10) d)))))\n      (* a b)))", "problem": 99, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn [a b]\n  (map \n    (fn [s]\n      (- (int s) 48))\n      (apply vector (str (* a b)))))", "problem": 99, "user": "4ec34578535dcc7ae8597d51"}, {"code": "(fn [a b]\n  (let [val (* a b)]\n    (loop [num val out [] d 10]\n      (if (> d (* 10 num))\n          out\n          (let [foo (rem num d)]\n            (recur (- num foo) \n(cons (/ foo (/ d 10)) out) (* 10 d)))))))", "problem": 99, "user": "4dadb891c9a9d6ed3699dc57"}, {"code": "(fn [x y]\n    (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn d [x y]\n    (loop [r '()\n           p (* x y)]\n      (if (zero? p) r\n          (recur \n            (conj r (mod p 10))\n            (/ (- p (mod p 10)) 10)))))", "problem": 99, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "#(loop [n (* %1 %2) o []]\r\n\t\t (if (= n 0) o\r\n\t\t     (recur (quot n 10) (cons (rem n 10) o))))", "problem": 99, "user": "4e8a460e535d65386fec2109"}, {"code": "#(map (partial + (- (int \\0)))\n  (map int (str (* % %2))))", "problem": 99, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "(comp (fn [s] (map #(- (int %) 48) s)) seq str *)", "problem": 99, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn [x y]\n  (map #(read-string (str %)) (seq (str (* x y)))))", "problem": 99, "user": "4eb51942535d7eef30807365"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [n m]\n  (let [fx (fn [ret a]\n              (if (= 0 a) \n                  ret\n                  (recur (conj ret (rem a 10))\n                         (quot a 10)\n                   )\n               )\n            )\n        ]\n        (reverse (fx [] (* n m)))))", "problem": 99, "user": "4ec21058535dfed6da9c6dba"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "4ea67906535d7eef308072e4"}, {"code": "(fn [x y ] (map (fn [z] (- (int z) 48))  (str (* x y))  )  )", "problem": 99, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "problem": 99, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4ec6559a535d6d7199dd36c9"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn [x y]\n  (map #(Character/digit % 10)\n       (str (* x y))))", "problem": 99, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn [a b]\n  (loop [p (* a b) r (list)]\n    (if (< p 9) \n      (if (= p 0) r (cons p r)) \n      (recur (unchecked-divide p 10) \n             (cons (rem p 10) r)))))", "problem": 99, "user": "4e25176e535d04ed9115e829"}, {"code": "#(loop [c (* %1 %2)\n        r ()]\n  (if (= c 0)\n      r\n      (let [q (quot c 10)\n            s (conj r (rem c 10))]\n        (recur q s))))", "problem": 99, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "(fn [x y]\n  (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "#(map (fn [x] (read-string (str x))) (str (* % %2)))", "problem": 99, "user": "4ecfb458535d44c135fd68bb"}, {"code": "(fn [i j]\n  (let [p (* i j)\n        sp (str p)]\n    (map #(Integer/parseInt (str %)) sp)))", "problem": 99, "user": "4daf8f84edd6309eace4d17a"}, {"code": "(fn [a b] (loop [p (* a b) r '()]\n                 (if (> p 9)\n                   (recur (quot p 10) (conj r (rem p 10)))\n                   (conj r p))))", "problem": 99, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn [x y] \n  (comment \"or you could dvide by 10, etc.\")\n  (->> [x y] \n    (apply *) str seq \n    (map str) (map #(new Integer %))))", "problem": 99, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn [n1 n2]\n  (loop [a [] n  (* n1 n2)]\n    (if (zero? n)\n      a\n      (recur (cons (rem n 10) a) (long (/ n 10))))))", "problem": 99, "user": "4ebc829e535dfed6da9c6d86"}, {"code": "#(vec (loop[n (* %1 %2),ret nil](if (zero? n) ret \n      (let[d (mod n 10)](recur(/ (- n d) 10)(conj ret d)) \n      )))\n  )", "problem": 99, "user": "4ec75829535d6d7199dd36e1"}, {"code": "(fn [& xs] (apply vector (map #(Integer/parseInt (str %)) (seq (str (reduce * xs))))))", "problem": 99, "user": "4e5d0e96535d8a8b8723a2c8"}, {"code": "#(vec (loop [n (* %1 %2) v '()]\n(if (< n 10) (cons n v)\n(recur (int (/ n 10)) (cons (mod n 10) v)))))", "problem": 99, "user": "4db3a0e5535df7e46ed9b6d0"}, {"code": "#(map (fn [x] (-> x int (+ -48))) (str (* % %2)))", "problem": 99, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "(fn digitmul [x y] (map #(->> % str Integer/parseInt) (format \"%d\" (* x y))))", "problem": 99, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "#((fn digits [x]\n  (if (< x 10) \n      [x] \n      (conj (digits (quot x 10)) (rem x 10)))) \n  (* %1 %2))", "problem": 99, "user": "4ecf42b4535d1f5ad70dba3c"}, {"code": "(fn [x y]\n  (->> (* x y)\n       str\n       (map #(- (int %) 48))))", "problem": 99, "user": "4e89ff3d535d3e98b802328a"}, {"code": "#(map (zipmap \"0123456789\" (range 10)) (str (apply * %&)))", "problem": 99, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [x y]\n  (map #(- (int  %1) 48) (str (* x y))))", "problem": 99, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn [a b]\n  (letfn [(digits [number]\n    (reverse\n      (map #(rem % 10)\n        (take-while #(> % 0)\n          (iterate #(quot % 10) number)))))]\n      (digits (* a b))))", "problem": 99, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4ece9ca9535d23f03622770f"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4e513758535dc968683fc4f3"}, {"code": "#(map read-string (map str (str (* % %2))))", "problem": 99, "user": "4e704293535d5021c1a89634"}, {"code": "(fn dig-seq [x y]\n  (->> (* x y)\n    str\n    seq\n    (map (comp read-string str))))", "problem": 99, "user": "4ec75077535d6d7199dd36e0"}, {"code": "#(map (fn[x](- (int x) 48)) (str (* % %2)))", "problem": 99, "user": "4eca40cd535d6d7199dd3703"}, {"code": "(fn [x y]\n  (map #(read-string (str %)) (seq (str (* x y)))))", "problem": 99, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "(fn [a b]\n  (->> (* a b)\n    str\n    (map #(Integer. (str %)))\n    vec))", "problem": 99, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [x y] (map #(Character/getNumericValue (first %)) (partition 1 (str (* x y)))))", "problem": 99, "user": "4ea4e98a535d7eef308072ce"}, {"code": "(fn [x y] (vec (map #(Integer/parseInt (str %)) (str (* x y)))))", "problem": 99, "user": "4edbca52535d10e5ff6f531e"}, {"code": "(fn [a b] \n  (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "4ed6ac40535d10e5ff6f52e4"}, {"code": "(fn [a b]\n  (map\n    (fn [n] (Integer/parseInt (str n) 10)) (str (* a b))))", "problem": 99, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "#(map (comp read-string str) (seq (str (* % %2))))", "problem": 99, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(fn [n m]\n    (map #(Integer/parseInt (str %)) (str (* n m))))", "problem": 99, "user": "4ed292ac535d44c135fd68d9"}, {"code": "#(map (fn [x] (-> x int (+ -48))) (str (* % %2)))", "problem": 99, "user": "4ede8789535d10e5ff6f5337"}, {"code": "#(map read-string (map str (str (* % %2))))", "problem": 99, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "(fn [a b]\n  (let [listnumber (re-seq #\"\\d\" (str (* a b)))]\n    (vec (for [x listnumber] (Integer/parseInt x)))))", "problem": 99, "user": "4dfd7ecf535d04ed9115e783"}, {"code": "(fn [a b]\n  (letfn [(d [x] (if (< x 10) [x]\n                     (conj (d (quot x 10)) (rem x 10))))]\n    (d (* a b))))", "problem": 99, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn [x y]\n  (map(comp read-string str)(str(* x y))))", "problem": 99, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "#(map % (seq (str (apply * %&)))) #(- (int %) 48)", "problem": 99, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "4ec18451535dfed6da9c6db0"}, {"code": "(fn [& nums] (map #(-> % str Integer/parseInt) (str (apply * nums))))", "problem": 99, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn k [x y] (apply vector (map #(Integer. (String. (str \"\" %)))  (str \"\" (* x y)))))", "problem": 99, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "(fn [x y] (vec (map #(Integer/parseInt (str %)) (str (* x y)))))", "problem": 99, "user": "4ed55b5d535d10e5ff6f52d8"}, {"code": "#(map (comp read-string str) (str (apply * %&)))", "problem": 99, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn [a b] vec (map #(- % 48) (map int (str (* a b)))))", "problem": 99, "user": "4eb13d60535d7eef3080733f"}, {"code": "(letfn [(digits [i acc]\n          (if (zero? i)\n            acc\n            (recur (long (/ i 10)) (cons (mod i 10) acc))))]\n  (fn [a b]\n    (vec (digits (* a b) nil))))", "problem": 99, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "(fn [n m]\n  (map #(Integer/parseInt %) (re-seq #\".\" (str (* n m)))))", "problem": 99, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "(fn [& c] (map #(Integer/parseInt (str %)) (seq (str (reduce * c)))))", "problem": 99, "user": "4eb955da535dfed6da9c6d50"}, {"code": "#(for [x (str (* % %2))] (Integer/parseInt (str x)))", "problem": 99, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(comp (partial map #(- (int %) 48)) str *)", "problem": 99, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn [x y]\n  (map (fn [z] (Character/digit z 10))\n       (seq (.toCharArray (.toString (* x y))))))", "problem": 99, "user": "4db653f6535d1e037afb217c"}, {"code": "#(map (fn [x] (- (int x) 48)) (seq (str (* %1 %2))))", "problem": 99, "user": "4ee40938535d10e5ff6f5375"}, {"code": "(fn [a b]\n    (->> a\n         (* b)\n         str\n         (map (comp #(Integer. %) str))))", "problem": 99, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn [x y]\n  (let [prod (* x y)]\n    (loop [quot (Math/floor (/ prod 10))\n           rem (mod prod 10)\n           acc ()]\n      (if-not (zero? (+ quot rem))\n        (do\n          (println \"quot: \" quot)\n          (println \"rem: \" rem)\n          (println \"acc: \" acc)\n          (recur (Math/floor (/ quot 10)) (mod quot 10) (conj acc rem)))\n        acc))))", "problem": 99, "user": "4ee63d8d535d93acb0a66859"}, {"code": "(comp (partial map (comp #(Integer/parseInt %) str)) seq str *)", "problem": 99, "user": "4ee75ec2535d93acb0a66867"}, {"code": "(fn [n1 n2]\n  (map #(Integer. (str %)) (str (* n1 n2))))", "problem": 99, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn [a b] \n  (reverse \n    (\n      (fn digits [i] (if (< i 10) (list i) (conj (digits (int (/ i 10))) (mod i 10))))\n      (* a b)\n)))", "problem": 99, "user": "4eeabd62535d93acb0a668a0"}, {"code": "#(for [n (str (* %1 %2))]\n  (- (int n) 48))", "problem": 99, "user": "4ee82223535d93acb0a66877"}, {"code": "#(->> (* % %2) str (map (fn [c] (- (int c) 48))))", "problem": 99, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(fn [a b] (map #(read-string (str%)) (str (* a b))))", "problem": 99, "user": "4dbbdf86535d3f4042261ece"}, {"code": "(fn [n1 n2] (map #(- (int %) 48) (str (* n1 n2))))", "problem": 99, "user": "4ed19f00535d44c135fd68d1"}, {"code": "#(map (fn [c] (- (int c) 48)) (str (* %1 %2)))", "problem": 99, "user": "4ec6357a535d6d7199dd36c5"}, {"code": "(fn [a b] (reverse (map #(rem % 10) (take-while pos? (iterate #(quot % 10) (* a b))) ) ) )", "problem": 99, "user": "4ee7d177535d93acb0a6686f"}, {"code": "#(->> (reduce * %&)\n      str\n      (map (comp read-string str)))", "problem": 99, "user": "4db1fe241254ad5b4805fa77"}, {"code": "(fn f [a b]\n  (let [n (* a b)]\n    (condp = n\n      0 [] \n      (conj (f (quot n 10) 1) (rem n 10)))))", "problem": 99, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "#(map (fn [v] (Integer/parseInt (str v))) (str (* %1 %2)))", "problem": 99, "user": "4ee868be535d93acb0a6687d"}, {"code": "(fn [a b] \n  (map (comp #(Integer/parseInt %) str)\n  (seq (str (* a b)))))", "problem": 99, "user": "4e7f8f85535db966e863cc44"}, {"code": "(fn [x y]\n  (vec (map #(. Integer parseInt %) \n    (map str (str (* x y))))))", "problem": 99, "user": "4ee9d697535d93acb0a66895"}, {"code": "(fn products-digits\n  [a b & coll]\n  (let [res (into [] coll)\n        first (rem (* a b) 10)\n        new-dg (quot (* a b) 10)]\n    (if (= new-dg 0)\n      (cons first res)\n      (recur new-dg 1 (cons first res)))))", "problem": 99, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "(fn cut-number [x y] (map (fn [^Character x] (Integer/parseInt (.toString x))) (.toString (* x y))))", "problem": 99, "user": "4edfb618535d10e5ff6f5343"}, {"code": "#(map read-string (re-seq #\".\" (str (* %1 %2))))", "problem": 99, "user": "4e46ac46535dc968683fc4b5"}, {"code": "(fn [n n2] (map #(. Integer parseInt (str %)) (str (* n n2))))", "problem": 99, "user": "4e7e8684535db169f9c79717"}, {"code": "#(map (comp read-string str) (str (apply * %&)))", "problem": 99, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn [a b] (reverse (map #(mod % 10) (take-while #(not= 0 %) (map #(int (/ (* a b) %)) (iterate #(* % 10) 1))))))", "problem": 99, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn [a b] (map (comp #(- % 48) int) (str (* a b))))", "problem": 99, "user": "4ed0e139535d44c135fd68c7"}, {"code": "(fn [a b]\n  (map #(Integer/valueOf (str %)) (str (* a b))))", "problem": 99, "user": "4db883e1535d1e037afb2198"}, {"code": "(fn [a b] (map #(Integer/parseInt %) \n          (rest (clojure.string/split \n                    (str (* a b)) \n                    #\"\"))))", "problem": 99, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [x y] (loop [n (* x y) coll '()] (if (< n 1) coll (recur (int (/ n 10)) (conj coll (mod n 10))))))", "problem": 99, "user": "4ea11921535d7eef308072af"}, {"code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn [a b] (map #(Integer/valueOf (str %)) (str (* a b))))", "problem": 99, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn [y z] \n  (map \n    (fn [x] (- (int x) 48)) \n    (seq (str (* y z)))))", "problem": 99, "user": "4e570b60535d8a8b8723a286"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (flatten (partition 1 (str (* x y))))))", "problem": 99, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn \n  [x y]\n    (map #(Integer/parseInt (.toString %)) (vec (str (* x y))))\n)", "problem": 99, "user": "4eaa66eb535d7eef3080730b"}, {"code": "(fn [m1 m2]\n  (loop [prod (* m1 m2) result []]\n    (if (= 0 prod)\n      result\n      (let [this (rem prod 10)]\n        (recur (/ (- prod this) 10) (cons this result))))))", "problem": 99, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4ef49c2c535dced4c769f238"}, {"code": "#(for [c (str (* % %2))] (- (int c) 48))", "problem": 99, "user": "4ef2d243535dced4c769f221"}, {"code": "(fn [x y]\n  (->> [() (* x y)]\n    (iterate (fn [[digits z]] [(cons (rem z 10) digits) (quot z 10)]))\n    (drop-while (comp pos? second))\n    (first)\n    (first)))", "problem": 99, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(fn [x y]\n  (->> (* x y)\n    (iterate #(/ % 10))\n    (take-while #(<= 1 %))\n    (map #(int (mod % 10)))\n    (reverse)))", "problem": 99, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "4e8d5911535d65386fec2133"}, {"code": "(fn [n m] (for [d (str (* n m))] (- (int d) 48)))", "problem": 99, "user": "4ef1ee67535dced4c769f219"}, {"code": "(fn f[a b] (map #(java.lang.Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4ef4e5fa535dced4c769f242"}, {"code": "#(letfn [(prod [x y]\n  (let [p (* x y)]\n\t\t(loop [q (quot p 10) r (rem p 10) acc ()]\n\t\t\t(if (zero? q) (cons r acc) (recur (quot q 10) (rem q 10) (cons r acc))))))]\n\t\t\t(prod %1 %2))", "problem": 99, "user": "4ef5c7ce535dced4c769f248"}, {"code": "(fn [x y] \n  (map #(- (int %) (int \\0)) \n    (vec (str (* x y)))\n  ))", "problem": 99, "user": "4ef355e3535dced4c769f228"}, {"code": "(fn [n1 n2]\n    (loop [res []\n           m (* n1 n2)]\n      (if (= 0 m)\n        res\n        (let [f (mod m 10)]\n          (recur\n           (cons f res)\n           (/ (- m f) 10))))\n      ))", "problem": 99, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "#(for [c (str (* % %2))] (- (int c) (int \\0)))", "problem": 99, "user": "4ef77c82535dced4c769f253"}, {"code": "(fn [a b]\n(map #(Integer/parseInt (str %)) (str (* a b)))\n)", "problem": 99, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "(fn my-prod [a b]\n  (let [m (* a b)]\n    (loop [mp m\n           results '()]\n      (if (< mp 10)\n        (conj results mp)\n        (recur (int (/ mp 10)) (conj results (int (mod mp 10))))))))", "problem": 99, "user": "4efb92ce535dced4c769f27a"}, {"code": "(fn [x y](map (fn [z](Integer. z)) (map str (vec (str (* x y))))))", "problem": 99, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "4ef992c8535dced4c769f268"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn digits [n1 n2]\n  (reverse ((fn fun [n]\n              (cond (= n 0) '()\n                    true (cons (mod n 10) (fun (quot n 10)))))\n            (* n1 n2))))", "problem": 99, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn [a b] (let [p (* a b)]  (vec (map #(Integer. (str %)) (seq (str p))))))", "problem": 99, "user": "4efd98fa535de96065cf5086"}, {"code": "(fn [a b] (->> (* a b) str (map #(- (int %1) 48))))", "problem": 99, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn [i j] (vec (map #(Integer/parseInt (str %)) (seq (Integer/toString (* i j))))))", "problem": 99, "user": "4e8768f6535dceadca469850"}, {"code": "#(map (fn [x] (Integer/parseInt (. x toString))) (. (* % %2) toString))", "problem": 99, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn pd [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4ef57a7f535dced4c769f246"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4daeabf6edd6309eace4d15c"}, {"code": "#(map read-string (map str (str (* % %2))))", "problem": 99, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn [x y]\n  (let [prod (* x y)]\n    (if (zero? prod)\n      [0]\n      (loop [p prod, res ()]\n        (if (zero? p)\n            res\n            (recur (quot p 10) (conj res (rem p 10)))\n        )))))", "problem": 99, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [a b] (map #(read-string (str %)) (str (* a b))))", "problem": 99, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "problem": 99, "user": "4f017593535dcb61093f6a36"}, {"code": "#(map (fn [c] (- (int c) 48)) (str (* % %2)))", "problem": 99, "user": "4efb2fd7535dced4c769f274"}, {"code": "#(map (fn [x] (Character/getNumericValue x)) (str (apply * %&)))", "problem": 99, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "(fn [a b] (map #(Integer. (str %)) (str (* a b))))", "problem": 99, "user": "4ee6400c535d93acb0a6685b"}, {"code": "#(map (fn [v] (- (int v) 48))\n   (str (* % %2)))", "problem": 99, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4f039a8b535dcb61093f6b36"}, {"code": "#(map (comp - (partial - 48) int) (str (* %1 %2)))", "problem": 99, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn [x y] (map #(Long/parseLong (str %)) (seq (str (* x y)))))", "problem": 99, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn digits\n  ([ival1 ival2] (digits ival1 ival2 (str (* ival1 ival2)) '()))\n  ([ival1 ival2 istr oseq]\n     (cond\n      (empty? istr) (reverse oseq)\n      :else (recur ival1 ival2 (rest istr) (conj oseq (Character/digit (first istr) 10))))))", "problem": 99, "user": "4eee3e6a535d93acb0a668c3"}, {"code": "(fn [x y]\n  (let [prod (* x y)]\n    ((fn _build [n out]\n      (if (= 0 n)\n        out\n        (_build (quot n 10)\n                (conj out (rem n 10)))))\n     prod ())))", "problem": 99, "user": "4f047902535dcb61093f6bcc"}, {"code": "(fn [n m] (map #(Integer/valueOf (str %)) (seq (str (* n m)))))", "problem": 99, "user": "4efec33f535dcb61093f6a2a"}, {"code": "(fn [a b]\n  (->\n    (* a b)\n    str\n    (->> (map #(Character/digit % 10)))))", "problem": 99, "user": "4f04f847535dcb61093f6beb"}, {"code": "#(for [c (str (* % %2))] (- (int c) 48))", "problem": 99, "user": "4ed9354f535d10e5ff6f5301"}, {"code": "#((fn f [x]\n    (if (< x 10)\n      [x]\n      (conj (f (quot x 10)) (mod x 10))))\n  (* % %2))", "problem": 99, "user": "4f062d4a535dcb61093f6c08"}, {"code": "#(loop [s (str (* %1 %2)), n (dec (count s)), l '()]\n      (if (> 0 n)\n        (vec (reverse l))\n        (recur s (dec n) (concat l (list (Character/getNumericValue (nth s n)))))))", "problem": 99, "user": "4f038567535dcb61093f6b0c"}, {"code": "#(map (fn [x] (Character/digit x 10)) (str (* % %2)))", "problem": 99, "user": "4f083048535dcb61093f6c33"}, {"code": "(fn product-digits\n  [a b]\n    (map #(Integer/valueOf (str %)) (seq (str (* a b)))))", "problem": 99, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn [x1 x2] (map #(- (int %1) 48) (str (* x1 x2))))", "problem": 99, "user": "4edd9d79535d10e5ff6f532b"}, {"code": "(fn [x y]\n (let [g (fn g [n]\n     (loop [n1 n res []]\n       (if (= n1 0)\n           res\n           (recur (quot n1 10)\n             (cons (mod n1 10) res)))))]\n (g (* x y))))", "problem": 99, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn [a b] (vec (map #(Integer/parseInt (str %)) (.toString (* a b)))))", "problem": 99, "user": "4ef4ab95535dced4c769f23b"}, {"code": "(fn [m n]\n  (let [res (* m n)]\n    (seq (map #(Integer/parseInt (str %)) (seq (str res))))))", "problem": 99, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn [a b]\n  (for [c (str (* a b)) :let [d (- (int c) (int \\0))] ] d))", "problem": 99, "user": "4f050dec535dcb61093f6bef"}, {"code": "#(loop [n (apply * %&) ret ()]\n  (if (zero? n) \n    ret (recur (quot n 10)\n    (cons (mod n 10) ret))))", "problem": 99, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "#(loop [n (* %1 %2) d ()]\n  (if (zero? n) \n    d\n    (recur (quot n 10) (conj d (rem n 10)))))", "problem": 99, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "(fn [x y] (map #(Integer/parseInt %) (map str (seq (str (* x y))))))", "problem": 99, "user": "4f039bbe535dcb61093f6b39"}, {"code": "#(loop [n (* % %2) s []]\n  (if (zero? n) s\n    (recur\n      (quot n 10)\n      (cons (rem n 10) s))))", "problem": 99, "user": "4f06dcad535dcb61093f6c16"}, {"code": "#(map (fn [x] (Character/getNumericValue x)) (str (* % %2)))", "problem": 99, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "(fn st \n  [x y] (map #(Integer/parseInt %) (map str (seq (str (* x y)))))\n)", "problem": 99, "user": "4eeb8f68535d93acb0a668a9"}, {"code": "(fn\n  [x y] (loop [number (* x y) l nil]\n\t\t(if (zero? number)\n\t\t\tl\n\t\t\t(recur (quot number 10) (conj l (mod number 10))))))", "problem": 99, "user": "4f047542535dcb61093f6bc7"}, {"code": "#(map (fn [c] (- (int c) (int \\0))) (seq (str (* %1 %2))))", "problem": 99, "user": "4f0b2028535d0136e6c222ff"}, {"code": "#(map read-string (map str (seq (str (apply * %&)))))", "problem": 99, "user": "4ef0f1a1535dced4c769f212"}, {"code": "(fn [& args] (map #(- (int %) (int \\0)) (str (apply * args))))", "problem": 99, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y ))))", "problem": 99, "user": "4dbe19fe535d020aff1edf59"}, {"code": "#(map (fn [x] (- (int x) 48)) (str (* % %2)))", "problem": 99, "user": "4f067029535dcb61093f6c12"}, {"code": "(fn [x y]\n  (map #(read-string (str %)) (str (* x y))))", "problem": 99, "user": "4e2d84bf535deb9a81d77f09"}, {"code": "(fn [& args] (map #(Integer. (str %)) (str (apply * args))))", "problem": 99, "user": "4f052eaf535dcb61093f6bf3"}, {"code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "problem": 99, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn [a b]\n  (map #(- (int %) 48) \n    (seq (str (* a b)))))", "problem": 99, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(comp (partial map #(Integer/parseInt (str %))) str *)", "problem": 99, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn [& more] (map (fn [x] (. Character getNumericValue x)) (vec (str (reduce * more)))))", "problem": 99, "user": "4f031883535dcb61093f6a5e"}, {"code": "#(for [c (str (* %1 %2))] (- (int c) 48))", "problem": 99, "user": "4f037bb5535dcb61093f6aec"}, {"code": "(fn product-digits [a b]\r\n    (letfn [(int-to-list [n]\r\n              (loop [i n s '()]\r\n                (if (< i 10)\r\n                  (conj s i)\r\n                  (recur (quot i 10) (conj s (rem i 10))))))]\r\n      (int-to-list (* a b))))", "problem": 99, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn [n m] (->> (str (* n m))\n               (map #(-> (str %) Long/parseLong))))", "problem": 99, "user": "4daec9dcedd6309eace4d15f"}, {"code": "(fn [x y] (map #(- (int %1) 48) (str (* x y))))", "problem": 99, "user": "4f0ef874535d0136e6c22328"}, {"code": "#(map read-string (re-seq #\"\\d\" (pr-str (* %1 %2))))", "problem": 99, "user": "4f066916535dcb61093f6c10"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "4ef6e689535dced4c769f24f"}, {"code": "#(loop [res (list) n (* %1 %2)]\n    (if (zero? n)\n      res\n      (recur (conj res (mod n 10)) (quot n 10))))", "problem": 99, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "4f13047d535d64f60314642c"}, {"code": "(fn prod-digits [a b]\n  (let [prod (str (* a b))]\n    (map #(Character/getNumericValue %) prod)))", "problem": 99, "user": "4e95a440535dbda64a6f6b37"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (Integer/toString (* x y))))", "problem": 99, "user": "4f03b3fb535dcb61093f6b52"}, {"code": "(fn product-digits [x y]\r\n    (letfn [(magnitude [n]\r\n              (first (drop-while #(>= (quot n %) 10) (iterate (partial * 10) 1))))\r\n            (digit-seq [n]\r\n              (loop [mag (magnitude n)\r\n                     x n\r\n                     digits []]\r\n                (if (= 1 mag)\r\n                  (conj digits x)\r\n                  (recur (/ mag 10)\r\n                         (rem x mag)\r\n                         (conj digits (quot x mag))))))]\r\n      (digit-seq (* x y))))", "problem": 99, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn [x y]\n  (map\n    #(- (int %) 48)\n    (str (* x y))))", "problem": 99, "user": "4f128865535d64f603146428"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn [a b] (map #(. Integer parseInt (str %) 10) (str (* a b))))", "problem": 99, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "(comp \r\n  (partial map (comp read-string str))\r\n  str\r\n  *)", "problem": 99, "user": "4f1052b9535d64f603146418"}, {"code": "(fn [x y] (map #(Character/digit % 10) (seq (str (* x y)))))", "problem": 99, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "(fn [a b]\n  (let [prod (* a b)\n        ndigits (+ 1 (int (Math/log10 prod)))]\n          (loop [cur prod\n                 res []\n                 n (int (Math/log10 prod))]\n            (if (= cur 0) (vec res)\n                (let [ten-pow (Math/pow 10 n)\n                      digit (int (/ cur ten-pow))]\n                  (recur (- cur (* digit ten-pow))\n                         (conj res digit)\n                         (dec n)))))))", "problem": 99, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "#((fn f [n s] (if (= 0 n) s (recur (int (/ n 10)) (conj s (rem n 10))))) (* % %2) '())", "problem": 99, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "(fn [a b]\n   (let [x (* a b)]\n     (reverse (take (inc (int (Math/log10 x)))\n       (map\n         #(mod (int (/ x %)) 10)\n         (iterate\n           (partial * 10)\n           1))))))", "problem": 99, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [x y]\n  (let [product (* x y)]\n    (vec (map #(Integer/parseInt (str %)) (str product)))))", "problem": 99, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %))  (seq (.toString (* x y)))))", "problem": 99, "user": "4f03bf5e535dcb61093f6b5d"}, {"code": "(fn [x y] (map #(-> % int (- (int \\0))) (str (* x y))))", "problem": 99, "user": "4f0cc259535d0136e6c22310"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4f0333f6535dcb61093f6a77"}, {"code": "(fn [a b]\n  (map (fn [x] (compare x \\0))  (vec (seq (str (* a b)))))\n)", "problem": 99, "user": "4f16d6ed535d64f60314644f"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [a b] (let[s (str (* a b))] (map #(BigInteger. % 10) (map str (map char s)))))", "problem": 99, "user": "4ef0a39b535dced4c769f20d"}, {"code": "#(map read-string\n     (map str\n(seq (str (* %1 %2)))\n     )\n          )", "problem": 99, "user": "4f2004a1535d64f6031464a7"}, {"code": "(fn [x1 x2]\n          (map read-string (re-seq #\"\\d\" (str (* x1 x2)))))", "problem": 99, "user": "4f030af7535dcb61093f6a49"}, {"code": "(fn [x y]\n  (map  \n    #(Integer/parseInt (.toString %))\n    (str (* x y))))", "problem": 99, "user": "4dc7e7a5535d8a4b2fd74290"}, {"code": "(fn [x y]\n  (loop [a [] n (* x y)]\n    (if (< n 10) (cons n a)\n      (recur (cons (mod n 10) a) (int (/ n 10)))\n    )\n  )\n)", "problem": 99, "user": "4f1595da535d64f603146444"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn [x y] (map #(Integer/parseInt (.toString %)) (flatten (partition 1 (str (* x y))))))", "problem": 99, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn sru [x y]\n  (loop [n (str (* x y))\n         acc []]\n    (if (empty? n)\n      acc\n      (recur (rest n) (conj acc (Integer/parseInt (str (first n))))))))", "problem": 99, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "#(map (fn [x] (- (int x) (int \\0))) (str (* % %2)))", "problem": 99, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn [x y] (map  #(Integer/parseInt (str %)) (seq (.toCharArray (str (* x y))))))", "problem": 99, "user": "4ebbf772535dfed6da9c6d76"}, {"code": "(fn [a b] \n  (map #(Integer/parseInt %) \n      (re-seq (re-pattern \".\") (str (* a b)))))", "problem": 99, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4dbf7a31535d020aff1edf75"}, {"code": "(fn [a b] (map #(- %1 48) (map int (str (* a b)))))", "problem": 99, "user": "4f259f95e4b0d66497709ffa"}, {"code": "(fn multi-list [x y]\n  (letfn [(char-2-int [c] (- (int c) (int \\0)))]\n    (map char-2-int (str (* x y)))))", "problem": 99, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn [a b] \n  (letfn [\n    (ll[num] \n      (loop [num num res []] \n        (if (< 0 num) \n          (recur \n            (int (/ num 10)) \n            (cons (mod num 10) res)) \n          res)))] \n    (ll (* a b))))", "problem": 99, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [a b] (vec (map #(Integer/parseInt (str %)) (str (* a b)))))", "problem": 99, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt %) (map str (vec (str (* x y))))))", "problem": 99, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "#(loop [num (* %1 %2) new_seq []]\n    (if (zero? num)\n      (reverse new_seq)\n      (recur (int (/ num 10)) (conj new_seq (mod num 10)) )\n     )\n   )", "problem": 99, "user": "4ea31da2535d7eef308072c1"}, {"code": "#(map (comp read-string str) (seq (str (* % %2))))", "problem": 99, "user": "4e8ad247535d65386fec2111"}, {"code": "(fn [x y]\r\n  (map #(. Integer parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4f07c8c3535dcb61093f6c2d"}, {"code": "(fn [x y] (vec (map #(Integer/parseInt (str %)) (flatten (partition 1 (str (* x y)))))))", "problem": 99, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn [n m] (map #(Integer/parseInt %) (re-seq #\"[0-9]\" (str (* n m)))))", "problem": 99, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn [x y] (vec (map #(Integer/parseInt (Character/toString %)) (str (* x y)))))", "problem": 99, "user": "4dc1e1e4535d020aff1edf90"}, {"code": "(fn [& args]\n   (let [ans (apply * args)\n         sep (fn [x res]\n               (if (= x 0) res\n                   (recur (quot x 10) (conj res (rem x 10)))))]\n     (sep ans '())))", "problem": 99, "user": "4eb02674535d7eef30807338"}, {"code": "(fn num-digits [x y]\n  (vec (map #(Integer/parseInt (str %)) (str (* x y)))))", "problem": 99, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4f280840e4b0d6649770a010"}, {"code": "(fn [n1 n2]\n  (map #(- (int %) 48) (seq (str (* n1 n2)))))", "problem": 99, "user": "4e131443535d04ed9115e7d3"}, {"code": "(fn [x y]\n  (map #(Integer/valueOf (str %))\n       (str (* x y))))", "problem": 99, "user": "4f31519ae4b0d6649770a086"}, {"code": "#(map (fn [s] (Integer/valueOf (str s))) (str (* % %2)))", "problem": 99, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "#(map (fn [x] (Integer/parseInt (str x))) (str (* % %2)))", "problem": 99, "user": "4f032f30535dcb61093f6a73"}, {"code": "(fn [a b]\n  (reverse (map #(mod % 10)\n                (take-while #(> % 0)\n                            (iterate #(quot % 10) (* a b))))))", "problem": 99, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn [a b] \n  (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "4f0f01c0535d0136e6c22329"}, {"code": "(fn [x y]\n   (map #(- (int %) (int \\0)) (seq (str (* x y)))))", "problem": 99, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [a b] (map read-string (map str (seq (str (* a b))))))", "problem": 99, "user": "4f1d1299535d64f603146487"}, {"code": "(fn [a b] (\n  map #(Integer/valueOf (str %)) (str (* a b))\n))", "problem": 99, "user": "4ef48422535dced4c769f236"}, {"code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "4f31ad57e4b0d6649770a089"}, {"code": "#(loop [x (* % %2) y '()] (if (= (quot x 10) 0) (cons x y) (recur (quot x 10) (cons (mod x 10) y))))", "problem": 99, "user": "4f341320e4b0e243712b1eb4"}, {"code": "(fn [x y] (map #(Integer. (str %)) (seq (str (* x y)))))", "problem": 99, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %))\n(seq (str (* a b)))))", "problem": 99, "user": "4eb9353f535dfed6da9c6d4e"}, {"code": "(fn dig* [a b]\n  (map #(- (int %) 48) (seq (str (* a b)))))", "problem": 99, "user": "4f04d312535dcb61093f6be7"}, {"code": "(fn [& xs] \n  (map \n    #(- (int %) (int \\0))\n    (-> (apply * xs) str seq)))", "problem": 99, "user": "4f2e0369e4b0d6649770a064"}, {"code": "#(loop [d (* %1 %2) coll ()]\n           (if (= d 0)\n             coll\n             (recur (int (/ d 10)) (cons (mod d 10) coll))))", "problem": 99, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "problem": 99, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "(fn [a b] (let [prod (* a b)] (map #(Integer. (str %)) (str prod))))", "problem": 99, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "(fn [x y] (reverse (map #(mod % 10) (take-while #(< 0 %) (iterate #(quot % 10) (* x y))))))", "problem": 99, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "(fn [n1 n2]\n  (map #(- % (int \\0)) (map int (seq (str (* n1 n2))))))", "problem": 99, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "#(map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} \n  (str (* % %2)))", "problem": 99, "user": "4db13ff51254ad5b4805fa68"}, {"code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "problem": 99, "user": "4f36f5f2e4b0e243712b1ece"}, {"code": "(let [dgt (fn [x acc]\n            (if (zero? x)\n              acc\n              (recur (quot x 10) (conj acc (rem x 10)))))]\n  #(dgt (* %1 %2) '()))", "problem": 99, "user": "4f038499535dcb61093f6b09"}, {"code": "(fn [n1 n2]\n  (loop [x (* n1 n2)\n         ret []]\n\n    (let [dx (int (/ x 10))\n          ld (- x (* dx 10))\n          ]\n\n      (if (>= x 1)\n        (recur dx (cons ld ret))\n        ret))))", "problem": 99, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn [x y]\n  (loop [n (* x y), acc ()]\n    (let [d (int (/ n 10))\n          r (rem n 10)\n          new-acc (conj acc r)]\n      (if (zero? d)\n        new-acc\n        (recur d new-acc)))))", "problem": 99, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn [x y](letfn [(digitise [num](loop [n num result '()]\n                      (if (zero? n)\n                        result\n                        (recur\n                          (/ (- n (rem n 10)) 10)\n                          (cons (rem n 10) result)))))]\n         (digitise (* x y))))", "problem": 99, "user": "4f2aff4de4b0d6649770a044"}, {"code": "(fn [a b]\n  (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "(fn [a b]\n    ((fn [x r]\n          (if (= 0 x)\n              r\n              (recur (int (/ x 10)) (cons (mod x 10) r))\n          )\n    ) (* a b) []))", "problem": 99, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [& v] (map read-string (re-seq #\"\\d\" (str (apply * v)))))", "problem": 99, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn [a b]\n  (->> (* a b)\n       (str)\n       (vec)\n       (map str)\n       (map #(Integer. %))\n))", "problem": 99, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "(fn [x y]\n  (let [dico (apply hash-map (interleave (vec (apply str (range 10))) (range 10)))]\n    (map dico (str (* x y)))))", "problem": 99, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "(fn [p q] (reverse (map #(mod % 10) (take-while (complement zero?) (iterate #(quot % 10) (* p q))))))", "problem": 99, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "(fn [a b]\r\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4eb66737535d7eef3080736b"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4f0c84ce535d0136e6c2230e"}, {"code": "#(letfn [(worker [z c]\r\n           (if (zero? z)\r\n             c\r\n             (recur (quot z 10)\r\n                    (conj c (rem z 10)))))]\r\n   (let [s (* %1 %2)]\r\n     (if (zero? s)\r\n       '(0)\r\n       (worker s '()))))", "problem": 99, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn [x y]\n  (map #(Character/digit % 10)\n       (seq (str (* x y)))))", "problem": 99, "user": "4f2582bae4b0d66497709ff6"}, {"code": "(fn [x y]\n  (letfn [(num-to-seq [n]\n            (loop [res () n n]\n              (if (zero? n) res\n                  (recur (conj res (rem n 10)) (quot n 10)))))]\n    (num-to-seq (* x y))))", "problem": 99, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn [x y]\n  (map\n    (fn [e] (- (int e) (int \\0)))\n    (str (* x y))))", "problem": 99, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4f12ab23535d64f603146429"}, {"code": "(fn [& args]\n  (map #(Character/getNumericValue %) \n    ((comp seq str) (apply * args))))", "problem": 99, "user": "4edffe54535d10e5ff6f5347"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "4f141dee535d64f603146434"}, {"code": "(fn [a b]\n  (let [to-digits (fn digits [num coll]\n                      (if (zero? num)\n                          coll\n                          (recur (quot num 10) (conj coll (mod num 10)))))]\n    (reverse (to-digits (* a b) []))))", "problem": 99, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "#(loop \n  [in (* %1 %2) out []]\n  (if (zero? in)\n    (rseq out)\n    (recur (quot in 10) (conj out (rem in 10)))))", "problem": 99, "user": "4f3c772de4b0e243712b1f4c"}, {"code": "(fn [x y]\n    (loop [n (* x y) acc []]\n        (cond (zero? n) acc\n              :else     (recur (quot n 10) (cons (mod n 10) acc)))))", "problem": 99, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn [a b] (map #(Integer/parseInt %) (map str (str (* a b)))))", "problem": 99, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn dig-p\r\n  [a b]\r\n  (map (comp #(Integer/parseInt %) str) (str (* a b))))", "problem": 99, "user": "4f17ab99535d64f603146457"}, {"code": "(fn [a b]\n  (->>\n    (* a b)\n    str (map (comp #(Integer/parseInt %) str))\n    vec))", "problem": 99, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn [a b]\n  (loop [n (* a b) digits '()]\n    (if (zero? n) digits\n      (recur (/ (- n (rem n 10)) 10) (conj digits (rem n 10))))))", "problem": 99, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "#(loop [n (* % %2)\n         s []]\n    (if (= 0 n)\n      s\n      (recur (quot n 10) (cons (rem n 10) s))))", "problem": 99, "user": "4f39f902e4b0e243712b1efe"}, {"code": "(fn [a b]\n  (->> (* a b)\n      (.toString)\n      (re-seq #\".\")\n      (map (fn [i] (Integer/parseInt i)))))", "problem": 99, "user": "4ebd4448535dfed6da9c6d8f"}, {"code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn [x y] \n  (map #(- (int %) (int \\0))  \n(format \"%d\" (* x y))))", "problem": 99, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn [x y]\n       (loop [product (* x y)\n        digits []]\n\t (if (> 10 product)\n\t   (vec (reverse (conj digits product)))\n\t   (recur (quot product 10) (conj digits (rem product 10))))))", "problem": 99, "user": "4eae2f9e535d7eef30807324"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4f4ff5a8e4b03ad3f0c10cf3"}, {"code": "(fn digits [n1 n2]\n  (map #(- % 48) (map int (.toString (* n1 n2)))))", "problem": 99, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn [a b]\n  (let [prod (* a b)]\n    (loop [prod prod result '()]\n      (if (> prod 0)\n        (recur (int (/ prod 10)) (conj result (mod prod 10)))\n        result))))", "problem": 99, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "(fn product-digits [m n]\n  (loop [result '() x (* m n)]\n    (if (zero? x)\n      result\n      (recur (conj result (rem x 10)) (quot x 10)))))", "problem": 99, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn [n1 n2]\n  ((fn foo [num]\n    (if (< num 10)\n      (vector num)\n      (conj (foo (quot num 10)) (mod num 10)))) (* n1 n2)))", "problem": 99, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "#(map (fn [x] (- (int x) 48)) (seq (str (* %1 %2))))", "problem": 99, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "(comp (partial map #(Character/digit (char %) 10)) str *)", "problem": 99, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn [x y](map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4f17df72535d64f603146458"}, {"code": "(fn doubs [a b]\n  (letfn [(intToVector[x]\n            (if (< x 10)\n              [x]\n            (conj (intToVector (int (/ x 10))) (rem x 10))))]\n    (intToVector (* a b))))", "problem": 99, "user": "4e6cf521535de274dd8d818b"}, {"code": "(fn [a b]\r\n  (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "4efd8b67535de96065cf5085"}, {"code": "#(->> (* %1 %2) \n      str \n      (map (fn [c] (-> c int (- 48)))))", "problem": 99, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "(fn [a b]\n  (reverse\n    (map #(rem % 10)\n      (take-while pos? \n        (iterate #(int (/ % 10)) (* a b))))))", "problem": 99, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn [x y]\n  (into [] \n    (reverse (flatten\n      ((fn d [num]\n        (if (< num 10) \n          (list num)\n          (conj (d (quot num 10)) (mod num 10))))\n        (* x y))))))", "problem": 99, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "#(map (fn [i] (. java.lang.Integer (parseInt (str i))))\n        (str (* %1 %2)))", "problem": 99, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "#(vec (for [d (vec (str (* %1 %2)))] \n(Character/getNumericValue d)))", "problem": 99, "user": "4e8ad1d2535d65386fec2110"}, {"code": "(fn [x y]\n  (let [res (* x y)]\n    (letfn [(ids [n] (for [character (str n)]\n    (Integer/parseInt (str character))))]\n      (ids res))))", "problem": 99, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "#((fn [dl n] (if (< n 10) (cons n dl) \n  (recur (cons (rem n 10) dl) (int (/ n 10)))\n)) [] (* %1 %2))", "problem": 99, "user": "4f51e8a4e4b03ad3f0c10d2d"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "4e5229dc535d302ef430da6f"}, {"code": "(fn [n1 n2] (map #(Integer/parseInt (str %)) (str (* n1 n2))))", "problem": 99, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn\n  [x y]\n  (map #(Integer/parseInt (str %) ) (seq (str (* x y)))))", "problem": 99, "user": "4f29afc7e4b0d6649770a02e"}, {"code": "(fn [x y] (map #(Integer/valueOf %1) (re-seq #\"\\d\" (str (* x y)))))", "problem": 99, "user": "4f2893d0e4b0d6649770a019"}, {"code": "(fn [ma mb] \n  (let [digits (fn [number] (reverse (map \n           #(int (mod % 10)) \n           (take-while #(< 0 %) (iterate #(int (/ % 10)) number)))))]\n    (digits (* ma mb))))", "problem": 99, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn [n1 n2]\n  (map #(- (int %) (int \\0)) (seq (str (* n1 n2)))))", "problem": 99, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn [a b] (map #(Integer. (str %)) (str (* a b))))", "problem": 99, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn [x y](map #(- (int %) 0x30) (seq (str (* x y)))))", "problem": 99, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn [a b]\n  (loop [output []\n         number (* a b)]\n    (if (< number 10) (cons number output)\n        (recur (cons (mod number 10) output)\n               (int (/ number 10))))))", "problem": 99, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4e6a5a32535d8ccf87e9fed0"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [x y]\n  (map #(- (int %) (int \\0))\n       (pr-str (* x y))))", "problem": 99, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "(fn [a b] (map (comp #(Integer/parseInt %) str) (seq (str (* a b)))))", "problem": 99, "user": "4dd88803535d2dad7130b5d9"}, {"code": "(fn [x y]\n  (reverse (loop [xp (* x y) acc []]\n    (if (= xp 0)\n      acc\n      (recur (quot xp 10) (conj acc (rem xp 10)))))))", "problem": 99, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn product-digits [m1 m2]\r\n   (loop [answer (* m1 m2)\r\n          exp (dec (count (str answer)))\r\n          acc []]\r\n     (if (neg? exp)\r\n       acc\r\n       (let [sub-mul (Math/pow 10 exp)\r\n             sub (* (quot answer (Math/pow 10 exp)) sub-mul)]\r\n       (recur (- answer sub) (dec exp) (conj acc (int (quot  answer (Math/pow 10 exp)))))))))", "problem": 99, "user": "4f629697e4b0defedf855fd6"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4f63777be4b0defedf855fe4"}, {"code": "(fn [x y] \r\n    (map #(Character/digit % 10) (.toString (* x y))))", "problem": 99, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn [a b] (map #(Integer. (str %)) (str (* a b))))", "problem": 99, "user": "4ecbb249535df97575fdabdf"}, {"code": "(fn p [a b]\n  (reverse ((fn dig [n]\n    (if (= 0 n)\n      []\n      (cons (mod n 10) (dig (quot n 10))))) (* a b))))", "problem": 99, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4e22b78b535d04ed9115e81e"}, {"code": "(fn [x y]\n  (map {\\1 1,\\9 9,\\8 8,\\0 0} (str (* x y))))", "problem": 99, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn [a b]\n  (reverse (map #(rem % 10)\n    (take-while pos? \n      (iterate #(quot % 10) (* a b))))))", "problem": 99, "user": "4eccb190535d23f0362276fe"}, {"code": "(fn [x y] (map #(- % 48) (map int (str (* x y)))))", "problem": 99, "user": "4f565bebe4b0a7574ea7181e"}, {"code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn [a b]\n  (for [c (seq (str (* a b)))] (Integer/parseInt (str c))))", "problem": 99, "user": "4f504739e4b03ad3f0c10d00"}, {"code": "(fn [a b] (map (fn[x] (- (int x) (int \\0))) (str (* a b))))", "problem": 99, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "(fn [x y] (vec (map read-string (rest (clojure.string/split (str (* x y)) #\"\\\\*\" ))  \n)))", "problem": 99, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "(fn mul-sum-dig[a b] (let [n (* a b) f\n    (fn dig[x] (if (= x 0) nil \n        (cons (mod x 10) (dig (quot x 10) ))))] (reverse (vec (f n)))))", "problem": 99, "user": "4e6279e3535d8ccf87e9fe60"}, {"code": "(fn [n1 n2]\n  (->> (* n1 n2)\n      str\n      seq\n      (map str)\n      (map read-string)))", "problem": 99, "user": "4e568873535d8a8b8723a283"}, {"code": "#(map (fn [x] (Integer/parseInt (str x))) (str (* % %2)))", "problem": 99, "user": "4eb298c1535d7eef3080734b"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "(fn [a b] (map #(Integer/valueOf (str %)) (str (* a b))))", "problem": 99, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "#(for [d (str (* % %2))]\n   (- (int d) 48))", "problem": 99, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn [x y]\n  (map #(Integer/valueOf (str %)) \n       (str (* x y))))", "problem": 99, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "(fn [x y]\n  (->> (* x y) (str) (map #(- (int %) (int \\0)))))", "problem": 99, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn [a b]\n  (map #(- (int %) 48) (vec (str (* a b)))))", "problem": 99, "user": "4db6ce85535d1e037afb217f"}, {"code": "(fn splitit [x y]\n       (loop [ num (* x y)  result []]\n         (if (zero? num) (reverse result)\n           (recur (quot num 10) (conj result (rem num 10))))))", "problem": 99, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn [a b] (map #(rem % 10) (reverse (take-while #(not= % 0) (iterate #(quot % 10) (* a b))))))", "problem": 99, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "(fn [a b]\r\n  (let [chars (map int (str (* a b)))]\r\n    (map #(- % 48) chars)))", "problem": 99, "user": "4f7d5328e4b06e829148e1bf"}, {"code": "(fn [a b] \n  (map #(- (int %) 48) (seq (str (* a b)))))", "problem": 99, "user": "4f7d91e6e4b06e829148e1c3"}, {"code": "(fn [x y]\n  (map #(Character/digit % 10) (seq (str (* x y)))))", "problem": 99, "user": "4de18de7535d08e6dec9fde8"}, {"code": "(fn [a b]\n  (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "#(->> (* %1 %2) str seq (map int) (map (partial + -48))) ;lol", "problem": 99, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "#(vec (map read-string (re-seq #\"\\d\" (str (* % %2)))))", "problem": 99, "user": "4f6a2ff2e4b07046d9f4ef98"}, {"code": "; (int \\8) will evaluate to 56, or the ascii\n; value for the char.  Subtract the ascii\n; value for \\0 char to get the desired\n; int value.  In this case (- (int \\8) (int \\0))\n; becomes (- 56 48) which has the answer of 8.\n(fn [a b]\n  (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "4f831fd3e4b033992c121c17"}, {"code": "#((fn [n xs]\n    (if (= n 0) xs (recur (int (/ n 10))\n                          (cons (rem n 10) xs))))\n      (* %1 %2) [])", "problem": 99, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn [x y] (->> (-> (* x y) str seq) (map #(Integer/parseInt (str %)))))", "problem": 99, "user": "4f7b6f12e4b06e829148e1a5"}, {"code": "(fn number [& s]\r\n     (let [prod (reduce * s)\r\n           string (str prod)]\r\n       (map #(Integer/parseInt (str %)) (apply vector string))))", "problem": 99, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn sd [a b]\n  (\n    (fn digit [x]\n      (if (< x 10)\n        (vector x)\n        (conj (digit (int (/ x 10))) (first (digit (rem x 10))))\n      )\n    )\n    (* a b)\n  )\n)", "problem": 99, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn split[a b]\n  (loop[val (* a b),result '() ]\n    (let[tail (rem val 10),\n         head (quot val 10)] \n    (if (< val 10)\n        (cons val result)\n        (recur head \n               (cons tail result)\n        )\n    )\n  )\n)\n  )", "problem": 99, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn [a b]\n  (reverse\n    (\n      (fn digits [n]\n        (if (zero? n)\n          []\n          (list*\n            (rem n 10)\n            (digits (quot n 10))\n          )\n        )\n      )\n      (* a b)\n    )\n  )\n)", "problem": 99, "user": "4f725201e4b07046d9f4f02f"}, {"code": "#(loop [r () n (* % %2)]\n         (if (< n 10)\n             (conj r n)\n             (recur (conj r (rem n 10)) (quot n 10))))", "problem": 99, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "(fn [x y]\n  (->> (* x y) str (map #(Integer/parseInt (str %))))\n)", "problem": 99, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "#(map (fn f [a] ({\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} a)) (str (* %1 %2)))", "problem": 99, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %))  (str (* a b))))", "problem": 99, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn [a b]\n    ((fn dig [n]\n      (if (= n 0) \n          nil\n          (vec (conj (dig (quot n 10)) (mod n 10)))\n      )\n      ) (* a b))\n)", "problem": 99, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "(fn [x y]\r\n    (->> (* x y)\r\n        str\r\n        (map str)\r\n        (map read-string)))", "problem": 99, "user": "4f0da4e4535d0136e6c22319"}, {"code": "#(loop [acc '() q (* %1 %2)]\n    (if (= 0 q)\n      acc\n      (recur (conj acc (rem q 10)) (quot q 10)))\n    )", "problem": 99, "user": "4f88ae35e4b033992c121c6d"}, {"code": "#(map (fn [c] (Integer. (str c))) (str (* % %2)))", "problem": 99, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn [a b] (loop [d [] p (* a b)]\n  (if (= p 0) d\n    (recur (cons (rem p 10) d) (/ (- p (rem p 10)) 10))\n      )\n  )\n)", "problem": 99, "user": "4f8ab084e4b02e764a0a5171"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (apply vector (str (* a b)))))", "problem": 99, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "(fn [a b] \n  ((fn d [n]\n    (loop [n n acc []]\n       (if (zero? n)\n          acc\n          (conj (d (quot n 10)) (rem n 10)))))\n   (* a b)))", "problem": 99, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "#(map (comp (partial + -48) int) (str (* % %2)))", "problem": 99, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn [x y] (map (comp #(- % 48) int) (str (* x y))))", "problem": 99, "user": "4dc21233535d020aff1edf92"}, {"code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn mult-and-seq [x y] (map (fn [ch] (- (int ch) 48)) (str (* x y))))", "problem": 99, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "#(map (comp (partial + -48) int) (str (* % %2)))", "problem": 99, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [a b] (into [] (map #(Integer/parseInt (str %)) (str (* a b)))))", "problem": 99, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "#((fn f [x] (if (zero? x) [] (conj (f (quot x 10)) (rem x 10)))) (* % %2))", "problem": 99, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn [& digs]\r\n  (let [product (apply * digs)]\r\n    (map #(Integer/parseInt (str %))\r\n         (seq (str product)))))", "problem": 99, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4df0524e535d08e6dec9fe17"}, {"code": "(fn [x y] (map #(Integer. %) (map str (vec (str (* x y))))))", "problem": 99, "user": "4daee8e9edd6309eace4d166"}, {"code": "(fn [a b]\n  (let [res (* a b)\n        res-str (str res)]\n    (map #(- (int %) 48) res-str)))", "problem": 99, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "(fn [x y] (loop [num (* x y), output []]\n                (if (< num 10)\n                    (reverse (conj output num))\n                    (recur (quot num 10)\n                           (conj output (mod num 10))))))", "problem": 99, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "#(for [e (str (* % %2))] (- (int e) 48))", "problem": 99, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn [n m]\n  (->> (* n m)\n    str\n    (re-seq #\".\")\n    (map #(Integer/valueOf %))))", "problem": 99, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(fn product-digits [x y]\n  (letfn [(digits [n]\n            (if (< n 10)\n              [n]\n              (conj (digits (quot n 10)) (rem n 10))))]\n    (digits (* x y))))", "problem": 99, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "#(map (fn [d] (Character/digit d 10))  (str (* % %2)))", "problem": 99, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "(fn [a b]\n    (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "4fa2fa5ee4b081705acca186"}, {"code": "(fn [m n] (map #(Integer/valueOf (str %)) (str (* m n))))", "problem": 99, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "problem": 99, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(fn [x y] (vec (map #(Character/digit % 10) (str (* x y)))))", "problem": 99, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn[a b](map #(- (int %) 48) (seq (str (* a b)))))", "problem": 99, "user": "4fa67274e4b081705acca1b8"}, {"code": "(fn [a b]\n  (letfn [(digits [n] (map #(- (int %) (int \\0)) (str n)))]\n    (digits (* a b))))", "problem": 99, "user": "4dac39a28cc9d6edb8beb0b3"}, {"code": "#(loop [acc () x (* % %2)]\n    (if (< 0 x)\n      (recur (conj acc (rem x 10)) (quot x 10))\n      acc))", "problem": 99, "user": "4e39d763535deb9a81d77f46"}, {"code": "(fn [x y]\n  (into [] \n    (map \n      #(Integer/parseInt (str %))\n      (str(* x y)))))", "problem": 99, "user": "4fa5406fe4b081705acca1ac"}, {"code": "#(map (fn [c] (- (int c) 48)) (str (* % %2)))", "problem": 99, "user": "4fa6d532e4b081705acca1be"}, {"code": "(let [digits (fn [n] (map #(Integer/parseInt (str %)) (str n)))]\n  #(digits (* % %2)))", "problem": 99, "user": "4f9acea6e4b0dcca54ed6d10"}, {"code": "#(map (fn [x] (- (int x) 48)) (str (* %1 %2)))", "problem": 99, "user": "4e6a6d12535d8ccf87e9fee2"}, {"code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "problem": 99, "user": "4fa30027e4b081705acca187"}, {"code": "(fn [r l] (for [x (str (* r l))] (- (int x) 48)))", "problem": 99, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn [a b] (map (comp read-string str) (flatten (partition 1 (str (* a b))))))", "problem": 99, "user": "4fa39b3ee4b081705acca191"}, {"code": "(fn [a b]\n  (map (fn [x] (read-string (str x)))\n       (str (* a b))))", "problem": 99, "user": "4fab336be4b081705acca216"}, {"code": "(fn prod [a b]\n  (loop [n (* a b), result []]\n    (if (zero? n)\n      (reverse result)\n      (recur (quot n 10) (conj result (rem n 10))))))", "problem": 99, "user": "4faa9593e4b081705acca1f9"}, {"code": "#(map (fn [x] (- (int x) 48)) \n  (str (* %1 %2)))", "problem": 99, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn [& ns] (->> ns (apply *) str (map #(Integer/parseInt (str %)))))", "problem": 99, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "#(map (fn [c] (read-string (str c)))\n(seq (str (* % %2))))", "problem": 99, "user": "4fabb1dce4b081705acca21a"}, {"code": "(fn [a b]\n  (loop [n (* a b) digits '()]\n    (if (= 0 n) (apply vector digits)\n        (recur (int (/ n 10)) (conj digits (mod n 10))))))", "problem": 99, "user": "4fadbc3fe4b081705acca23f"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) \n       (.toString (* a b))))", "problem": 99, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [a b] (map #(Long/parseLong (str %)) (str (* a b))))", "problem": 99, "user": "4facff22e4b081705acca230"}, {"code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "problem": 99, "user": "4fae258de4b081705acca246"}, {"code": "(fn [x y](map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4f9970b3e4b0dcca54ed6cfd"}, {"code": "#(map read-string (re-seq #\"\\d\" (str(* % %2))))", "problem": 99, "user": "4f727023e4b07046d9f4f035"}, {"code": "(fn [a b] (map #(- %1 48) (map int (seq (str (* a b))))))", "problem": 99, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "problem": 99, "user": "4f301d02e4b0d6649770a072"}, {"code": "(fn [a b] (map (fn [a] (- (int a) (int \\0))) (vec (str (* a b)))))", "problem": 99, "user": "4fad77a6e4b081705acca23a"}, {"code": "(fn [a b]\n  (loop [n (* a b) r '()]\n    (if (zero? n) (if (empty? r) [0] r)\n      (recur (int (/ n 10)) (conj r (mod n 10))))))", "problem": 99, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn [a b] (let [c (* a b) atoi (fn [a] (Integer/parseInt (str a)))] (map atoi (str c) )))", "problem": 99, "user": "4fab259ae4b081705acca212"}, {"code": "#(loop [n (* % %2) v []]\n  (if (= n 0)\n    (vec v)\n    (recur (quot n 10)(cons (rem n 10) v))))", "problem": 99, "user": "4f8386c5e4b033992c121c1d"}, {"code": "(fn [a b] (map #(- (int %1) 48) (seq (str (* a b)))))", "problem": 99, "user": "4faec810e4b081705acca24e"}, {"code": "(fn [n m] \n  (map #(- (int %) 48) \n         (seq (str (* n m)))))", "problem": 99, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "(fn [a b] (reverse (map #(rem % 10) (take-while #(< 0 %) (map #(quot (* a b) %) (iterate (partial * 10) 1))))))", "problem": 99, "user": "4fab31a8e4b081705acca215"}, {"code": "(fn [a b]\n  (map #(- (int %) 48) (seq (str (* a b)))))", "problem": 99, "user": "4e83bb61535db62dc21a62dd"}, {"code": "#(map read-string (map str (vec (str (* % %2)))))", "problem": 99, "user": "4fb3b865e4b081705acca2a2"}, {"code": "(fn [x y]\r\n  (loop [v (* x y)\r\n         r '()]\r\n    (if (= v 0)\r\n      r\r\n      (recur (quot v 10) (conj r (rem v 10)) ))))", "problem": 99, "user": "4f82ed48e4b033992c121c0e"}, {"code": "(fn [x y] \n  (let [xy (* x y)]\n    (map #(read-string (str %)) (str xy))))", "problem": 99, "user": "4fa6a491e4b081705acca1bc"}, {"code": "(fn prod-dig [a b]\n  (for [i (str (* a b))]\n\t\t(- (int i) 48)\n\n\t)\n\n)", "problem": 99, "user": "4faacc04e4b081705acca201"}, {"code": "(fn [x y]\n  (map #(-> % int (- 48)) (.toString (* x y))))", "problem": 99, "user": "4faac363e4b081705acca200"}, {"code": "#(map read-string (rest (clojure.string/split (str (* % %2)) #\"\")))", "problem": 99, "user": "4f7e07f4e4b06e829148e1c9"}, {"code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "problem": 99, "user": "4fb510b5e4b081705acca2b8"}, {"code": "#(map read-string(rest(clojure.string/split(str(* %1 %2)) #\"\")))", "problem": 99, "user": "4f98da04e4b0dcca54ed6cf7"}, {"code": "(fn[a,b](map #(read-string (str %)) (seq (str (* a b)))))", "problem": 99, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn [a b] (map #(Integer/valueOf (Character/toString %)) (str (* a b))))", "problem": 99, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "4fc0853ae4b081705acca327"}, {"code": "#(->> (* %1 %2)\n      str\n      (map (fn [c] (- (int c) 48))))", "problem": 99, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [a b]\n  (map #(- (int %) 48) (seq (str (* a b)))))", "problem": 99, "user": "4f3242bae4b0d6649770a08f"}, {"code": "(fn product-digits [n1 n2]\n    ((fn pd [lst num]\n      (if (= 0 num) lst (pd (cons (rem num 10) lst) (quot num 10)))) [] (* n1 n2)))", "problem": 99, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn [a b]\n  (let [[& chars] (str (* a b))]\n    (map #(- (int %) (int \\0)) chars)))", "problem": 99, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "(fn [n1 n2]\r\n  (let [p (* n1 n2)]\r\n    (loop [acc [], r p]\r\n      (if (= r 0)\r\n          acc\r\n         (let [m (mod r 10)]\r\n           (recur (cons m acc)\r\n                  (/ (- r m) 10)))))))", "problem": 99, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn prod->digits [a b]\n   (loop [m (* a b)\n          acc nil]\n    (if (zero? m)\n      acc\n      (recur (quot m 10)\n             (cons (rem m 10) acc)))))", "problem": 99, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [& x] (map #(- (int %) (int \\0)) (str (apply * x))))", "problem": 99, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "problem": 99, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn\n  [x y]\n    (map #(- (int %) (int \\0)) (vec (str (* x y)))))", "problem": 99, "user": "4f18677d535d64f603146459"}, {"code": "(fn [x y]\n  ((fn [lst n]\n    (if (zero? n) lst\n      (let [digit (mod n 10)]\n           (recur (cons digit lst) (/ (- n digit) 10)))))\n  [] (* x y)))", "problem": 99, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [a b] \n     (loop [q (* a b) s ()]\n\t      (if (zero? q)\n\t\t  s\n\t\t  (recur (quot q 10) (conj s (rem q 10))))))", "problem": 99, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(letfn [(to-digits [n]\n          (if (= 0 n)\n            []\n            (conj (to-digits (quot n 10)) (mod n 10))))]\n  (fn [x y] (to-digits (* x y))))", "problem": 99, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn [x y] (map #(Integer/parseInt (Character/toString %)) (-> (* x y) (str) (vec))))", "problem": 99, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "(fn [x y] (if (= 1 (* x y)) [1] (reverse (map #(quot (mod (* x y) %) (/% 10 )) (take-while #(> 10 (quot % (* x y))) (reductions * (repeat 10)))))))", "problem": 99, "user": "4fc67081e4b0ee37620e1813"}, {"code": "(fn [i j]\n  (map\n    (comp #(Integer/parseInt %) str)\n    (str (* i j))))", "problem": 99, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "#(map read-string (map str (seq (str (* % %2)))))", "problem": 99, "user": "4fc18846e4b081705acca331"}, {"code": "(fn [v1 v2]\n  (->> (* v1 v2)\n       (.toString)\n       (map #(- (int %) (int \\0)))\n  )\n)", "problem": 99, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(fn [x y] \n  (map #(Character/getNumericValue %) \n    (str (* x y))))", "problem": 99, "user": "4fb2f9b2e4b081705acca294"}, {"code": "(fn [a b]\n  (loop [acc ()\n         k (* a b)]\n    (if (zero? k)\n      acc\n      (recur (cons (mod k 10) acc) (quot k 10)))))", "problem": 99, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn pd \n  ([a b] (pd (* a b)))\n  ([p]  \n    (if (zero? p)\n      []\n      (conj (pd (quot p 10)) (rem p 10)))))", "problem": 99, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "(fn [a b] (reverse ((fn digits [n] (if (< n 10) (list n) (cons (mod n 10) (digits (quot n 10))))) (* a b))))", "problem": 99, "user": "4fcebce4e4b03432b189f404"}, {"code": "(fn [x y]\n  (map #(Character/digit % 10)\n       (str (* x y))))", "problem": 99, "user": "4fccb31be4b0ee37620e1868"}, {"code": "#(into [] (map read-string(subvec (clojure.string/split (str (* %1 %2)) #\"\") 1)))", "problem": 99, "user": "4fabbb97e4b081705acca21d"}, {"code": "#(map read-string (map str (str (apply *  %&))))", "problem": 99, "user": "4ee7d113535d93acb0a6686e"}, {"code": "(fn [l r] \n  (map #(read-string (str %)) (str (* l r))))", "problem": 99, "user": "4fbacdbae4b081705acca2e5"}, {"code": "(fn [& n] (map #(- (int %) 48) (seq (str (apply * n)))))", "problem": 99, "user": "4dc42799c647a3c54c2ddc71"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "4fbcbd50e4b081705acca2f9"}, {"code": "(fn [a b] (map  #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) \n    (seq (str (* a b)))))\n\n\n;(fn [a b]\n;  (if (= b 1) [1]\n;    (if (= b 9) [8 9 1]\n;      [9 8 9 0 1])))", "problem": 99, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "(fn [a b] (into [] (map #(Long/parseLong (Character/toString %)) (Long/toString (* a b)))))", "problem": 99, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "(fn [a b] (loop [s [] x (* a b)] (if (< x 10) (cons x s) (recur (cons (mod x 10) s) (quot x 10)))))", "problem": 99, "user": "4f148418535d64f60314643a"}, {"code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [x y]\n  (map #(Character/digit %,10) (str (* x y))))", "problem": 99, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn [x y] (map #(mod % 10) (reverse (take-while pos? (iterate #(quot % 10) (* x y))))))", "problem": 99, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn [y z] (map (fn [x] (Integer/valueOf (str x))) (str (* y z))))", "problem": 99, "user": "4fd8544be4b0dab7d829f390"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn [x y]\n  (let [z (* x y)]\n    (loop [S [],z z]\n      (if (not= z 0)\n        (recur (cons (rem z 10) S) (int (/ z 10)))\n        S))))", "problem": 99, "user": "4fda016ae4b05e33b9224f42"}, {"code": "(fn [x y]\n  into [] (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "#((fn f [x] (if (>= x 1) (conj (f (/ (- x (mod x 10)) 10)) (mod x 10)) [])) (* % %2))", "problem": 99, "user": "4ead2841535d7eef3080731e"}, {"code": "(fn [a b]\r\n   (letfn [(digitseq [x]\r\n              (if (= 0 x)\r\n                '()\r\n                (cons (mod x 10) (digitseq (quot x 10)))))]\r\n          (reverse (digitseq (* a b)))))", "problem": 99, "user": "4fc8b012e4b0ee37620e1838"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "(fn [x y]\r\n  (->> \r\n    (* x y) \r\n    str \r\n    (map str)\r\n    (map #(Integer/parseInt %))))", "problem": 99, "user": "4fadbb17e4b081705acca23e"}, {"code": "(fn f [x y]\n     (let [s (str (* x y))]\n       (for [i (range (count s))]\n            (bigint (subs s i (inc i))))))", "problem": 99, "user": "4fd2789ee4b04c3a95aa0422"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt (str %))\n       (str (* x y))))", "problem": 99, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn [a b]\n  (map #(Integer. (str %)) (str (* a b))))", "problem": 99, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "#((fn [d]\n  (loop [n d ret []]\n    (if (< n 10)\n      (concat [n] ret)\n      (recur\n        (quot n 10)\n        (concat [(rem n 10)] ret)))))\n  (* %1 %2))", "problem": 99, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "#((fn dg [n]\n  (if (zero? (quot n 10))\n      [n]\n      (conj (dg (quot n 10))\n            (mod n 10)))) (* %1 %2) )", "problem": 99, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "#(for [x (str (* % %2))] (read-string (str x)))", "problem": 99, "user": "4db016af838c48654951d9b9"}, {"code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "problem": 99, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "#(let [prod (* %1 %2)]\n  (loop [n prod digits []]\n    (if (zero? n) (reverse digits)\n        (recur (quot n 10) (conj digits (rem n 10))))))", "problem": 99, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "(fn [x y] \n  (map #(-> % str read-string) (seq (str (* x y)))))", "problem": 99, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn product-digits [x y]\r\n  (loop [n (* x y)\r\n         result ()]\r\n    (if (zero? n)\r\n      result\r\n      (recur (quot n 10) (cons (mod n 10) result)))))", "problem": 99, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "(fn [a b] (vec (map #(- (int %) 48) (str (* a b)))))", "problem": 99, "user": "4fb79872e4b081705acca2d2"}, {"code": "#(let [\n      mult (* %1 %2)\n      get-digits (fn [n] (map (fn [c] (Integer/parseInt (.toString c))) (.toString n)))\n      ]\n  (apply vector (get-digits mult)))", "problem": 99, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn [a b] (map #(Integer/parseInt %) (re-seq #\"[0-9]\" (str (* a b)))))", "problem": 99, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn [n m]\n  (letfn [(f [num] \n       (if (= 0 num) [] (conj (f (quot num 10)) (rem num 10))))]\n    (f (* n m))))", "problem": 99, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "(comp (partial map #(Long. (str %))) seq str *)", "problem": 99, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn [a b] \r\n  (map #(Integer. %) (map str (into [] (str (* a b))))))", "problem": 99, "user": "4f71ba6ee4b07046d9f4f012"}, {"code": "#(map (fn[x] (Integer/parseInt x)) (drop 1 (clojure.string/split (str (* % %2)) #\"\")))", "problem": 99, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [& ns] (->> ns (apply *) str vec (map #(Integer/parseInt (str %)))))", "problem": 99, "user": "4fe8d862e4b0547ebccb2428"}, {"code": "(fn prod-digits\n          [x y]\n        (map #(Integer/parseInt %) (map str (str (* x y)))))", "problem": 99, "user": "4fb591aee4b081705acca2c0"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn prod-dig [x y]\n  (->> (* x y) str (partition 1) flatten (map #(Integer. (str %))) vec))", "problem": 99, "user": "4faafccde4b081705acca209"}, {"code": "(fn [x y] (map #(read-string (str %)) (vec (str (* x y)))))", "problem": 99, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "(letfn [(split-num [n]\r\n    \t    (loop [n n\r\n  \t\t           ret '()]\r\n  \t\t        (if (zero? n)\r\n  \t\t            ret\r\n  \t\t            (recur (quot n 10)\r\n  \t\t                   (cons (rem n 10) ret)))))]\r\n  (fn pd [n m]\r\n    (split-num (* n m))))", "problem": 99, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "#(map read-string (re-seq #\"\\d\" (str (* % %2))))", "problem": 99, "user": "4fe868d1e4b07c9f6fd12c3f"}, {"code": "#(loop [q (* %1 %2) result nil]\n  (if (= q 0)\n    (vec result)\n    (recur (quot q 10) (cons (mod q 10) result))))", "problem": 99, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn [a b]\n  (loop [c (* a b) digits '()]\n    (if (= c 0)\n      digits\n      (recur (quot c 10) (cons (rem c 10) digits)))))", "problem": 99, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "(fn [a b] (->> (* a b) str (map #(Character/digit % 10))))", "problem": 99, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "(fn product-digit [x y] (map (comp read-string str) (str (* x y))))", "problem": 99, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn [a b] \n  (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn product-digits [x y]\n  (letfn [(digits [n]\n            (loop [n n acc '()]\n              (cond\n               (<= n 0) acc\n               :else\n               (recur (quot n 10)\n                      (cons (rem n 10) acc)))))]\n    (digits (* x y))))", "problem": 99, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "(fn [x y]\n  (loop [num (* x y) myvec (vec nil)]\n    (if (zero? num)\n      (reverse myvec)\n      (recur (/ (- num (mod num 10)) 10) (conj myvec (mod num 10))))))", "problem": 99, "user": "4fe1597fe4b0dd6cd5ce3633"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "4fde492be4b05e33b9224f8a"}, {"code": "#(map read-string (map str (str (* %1 %2))))", "problem": 99, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn [x y]\n  (map read-string (rest (clojure.string/split (print-str (* x y)) #\"\"))))", "problem": 99, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4e95c771535dbda64a6f6b39"}, {"code": "#((fn nd [n]\r\n  (if (zero? n)\r\n    []\r\n    (conj (nd (quot n 10) ) (rem n 10)))\r\n  ) (* % %2))", "problem": 99, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn [x y](map #(- (int %) 48) (vec (str (* x y)))))", "problem": 99, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(fn aa [a b]\r\n  (let [x (* a b)]\r\n    (loop [result [] x x]\r\n      (if (= x 0)\r\n        result\r\n        (recur (cons (mod x 10) result) (quot x 10))))))", "problem": 99, "user": "4fd170fce4b04c3a95aa0411"}, {"code": "(fn [x y]\n  (->> (* x y)\n       (str)\n       (seq)\n       (map #(Character/getNumericValue %))))", "problem": 99, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn [x y] (->> x (* y) str vec (map #(-> % str Integer/parseInt))))", "problem": 99, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "(fn [a b]\n  (loop [result [] x (* a b)]\n    (if(< x 10)\n      (cons x result)\n      (recur (cons (mod x 10) result) (quot x 10)))))", "problem": 99, "user": "4f1ae082535d64f603146470"}, {"code": "(fn[x y](map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "4f32135ae4b0d6649770a08e"}, {"code": "(fn [x y]\n  (map #(- (int %1) 48) (str (* x y)))\n  )", "problem": 99, "user": "4ff743fde4b0678c553fc38d"}, {"code": "(fn [a b]\n  (map #(Character/digit % 10) (str (* a b))))", "problem": 99, "user": "4ef89fb0535dced4c769f260"}, {"code": "(fn pdig [a b]\r\n    (let [p (list (* a b))]\r\n    (reverse (apply \r\n        (fn dl [n]\r\n            (if (>= n 1)\r\n            (lazy-seq (cons (rem n 10) (dl (quot n 10))))))\r\n        p))))", "problem": 99, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn [x y]\n  ((fn digitize [number result]\n    (if (= number 0) \n      result\n      (conj (digitize (quot number 10) result) (rem number 10) )))\n      \n  (* x y) []))", "problem": 99, "user": "4ff83003e4b0678c553fc396"}, {"code": "(fn [a b]\n  (let [c (* a b)]\n    (loop [v c\n           acc nil]\n      (if (zero? v)\n        acc\n        (recur (int (/ v 10)) (conj acc (rem v 10)))))))", "problem": 99, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn [& args]\n  ((comp\n    vec \n    (partial map (fn [x] (- x 48))) \n    (partial map int) \n    str \n    (partial reduce *))\n  args))", "problem": 99, "user": "4f7fc9a1e4b033992c121bee"}, {"code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "#(map read-string (rest (.split (str (* % %2)) \"\")))", "problem": 99, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "#(map read-string (map str (str (* %1 %2))))", "problem": 99, "user": "4fea2de5e4b0140c20fb9bfe"}, {"code": "(fn [x y] \n  (map #(Integer/parseInt %) (map str (str (* x y)))))", "problem": 99, "user": "4e9c3648535dbda64a6f6b7d"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn [a b] (map #((zipmap \"0123456789\" (range)) %) (str (* a b))))", "problem": 99, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn [x y] (loop [N (* x y) R '()] (if (> N 10) (recur (int (/ N 10.0)) (conj R (rem N 10))) (conj R N))))", "problem": 99, "user": "4fc52d79e4b081705acca386"}, {"code": "(fn [x y] (let [p (* x y)]\n  (loop [n p coll '()]\n    (if (zero? n) (if (empty? coll) '(0) coll)\n      (recur (int (/ n 10)) (conj coll (rem n 10)))\n    )\n  )\n))", "problem": 99, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "(fn multdigits [a b]\n  ((fn digitize [num]\n    (if (< num 10) [num]\n    (concat (digitize (int (/ num 10)))\n      [(mod num 10)])))\n  (* a b)))", "problem": 99, "user": "4fc50bcbe4b081705acca375"}, {"code": "(fn foo [a b]                                                           \n            (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4eed6b32535d93acb0a668bc"}, {"code": "(fn [a b]\n(->> (* a b) .toString seq (map #(.toString %)) (map #(Integer/parseInt %))))", "problem": 99, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "(fn [a b]\n  (let [m (* a b)]\n    (map #(Integer/parseInt (str %)) (str m))))", "problem": 99, "user": "5003deb9e4b0678c553fc445"}, {"code": "#(map (fn [x] (Character/getNumericValue x)) (str (* % %2)))", "problem": 99, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "#((fn digits [x] (if (<= x 9) [x] (conj (digits (quot x 10)) (mod x 10)))) (* %1 %2))", "problem": 99, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn [i1 i2] \n  (map \n    #(Integer. (str %))\n    (str (* i1 i2))))", "problem": 99, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn digits [x y]\r\n  (loop [result [] prod (* x y)]\r\n    (if (< prod 10) (cons prod result)\r\n      (recur (cons (rem prod 10) result) (quot prod 10)))))", "problem": 99, "user": "50045388e4b0678c553fc44e"}, {"code": "(fn [a b] (map #(Integer. (str %)) (seq (str (* a b)))))", "problem": 99, "user": "4ff76effe4b0678c553fc390"}, {"code": "(fn dig\r\n  [m n]\r\n  (loop [x (* m n) acc ()]\r\n    (if (>= x 1)\r\n      (let [a (mod x 10)]\r\n        (recur (int (/ x 10)) (cons a acc)))\r\n      acc)))", "problem": 99, "user": "500159b3e4b0678c553fc419"}, {"code": "(fn [a b] (into [] (map #(- (int %) 48) (str (* a b)))))", "problem": 99, "user": "5003bb77e4b0678c553fc442"}, {"code": "(fn __ [x y]\n  (map read-string\n       (rest (clojure.string/split (str (* x y)) #\"\"))))", "problem": 99, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn [x y]\n    (map #(Integer. (str %)) (str  (* x y)))\n)", "problem": 99, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "4f05ea25535dcb61093f6c02"}, {"code": "#(map (comp read-string str) (str (apply * %&)))", "problem": 99, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn[a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4ec64981535d6d7199dd36c7"}, {"code": "(fn [x y]\n  (map #(read-string (str %)) (seq (str (* x y)))))", "problem": 99, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "#(map read-string (re-seq #\"\\d\" (str (* %1 %2))))", "problem": 99, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn [& args] \n  (mapcat \n    #(vector (Integer/parseInt (str %))) (str (apply * args))))", "problem": 99, "user": "4faa6184e4b081705acca1f1"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4fe89db2e4b07c9f6fd12c59"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn [a b] (map #(Integer/valueOf (str %)) (seq (str (* a b)))))", "problem": 99, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "500ff421e4b0ae202717946f"}, {"code": "#(->> % (* %2) str (map (comp read-string str)))", "problem": 99, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "4fefd624e4b0678c553fc31b"}, {"code": "(fn [x y] (map #(Character/getNumericValue %)(str (* x y))))", "problem": 99, "user": "4f037d9e535dcb61093f6af2"}, {"code": "(fn [a b] (reduce #(conj %1 (read-string (str %2))) [] (str (* a b))))", "problem": 99, "user": "4fcc70b3e4b0ee37620e1862"}, {"code": "(fn proddig [a b]\n    (map (comp #(Integer/parseInt %) str) (seq (str (* a b)))))", "problem": 99, "user": "50057f23e4b0678c553fc466"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "(fn[n1 n2]\r\n(loop [x (* n1 n2) s ()]\r\n  (let [q (quot x 10)\r\n       r  (rem x 10)]\r\n  (if (zero? x) s\r\n  (recur q (conj s r))\r\n)\r\n)))", "problem": 99, "user": "4ffd92e7e4b0678c553fc3e3"}, {"code": "(fn product-digits [a b]\n  (->> (* a b) str (map (comp read-string str)) vec))", "problem": 99, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn [a b]\n   (letfn [(digits [n s]\n                   (if (= n 0) s\n                       (recur (int (/ n 10)) (conj s (rem n 10)))))]\n     (digits (* a b) '())))", "problem": 99, "user": "500ea957e4b00fff93030f9b"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "50166470e4b052339a490e76"}, {"code": "(fn [a b]\n  (loop [m (* a b), r '()] \n    (if (zero? m)\n      r\n      (recur (quot m 10) (conj r (rem m 10)))))\n  )", "problem": 99, "user": "4dca8b6d535d5973398f9288"}, {"code": "(fn [a b]\n  (reverse ((fn d [x]\n    (if (= x 0)\n      '()\n      (conj (d (int (/ x 10))) (mod x 10))))\n    (* a b))))", "problem": 99, "user": "5012aefce4b0c8732600222a"}, {"code": "(fn [x y] \n  seq (map #(- (int %) (int \\0))\n        (str (* x y))))", "problem": 99, "user": "500900dee4b0144d4f561e42"}, {"code": "#(vec (for [x (str (* %1 %2))] (Integer. (str x))))", "problem": 99, "user": "5007c7c7e4b0b17c647f5226"}, {"code": "(fn[x y](map #(-(int %)48)(seq(str(* x y)))))", "problem": 99, "user": "5017eface4b02f523d7cc5e7"}, {"code": "(fn [a b] (seq (map #(- (int %) (int \\0)) (Integer/toString (* a b)))))", "problem": 99, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "#(->> (* % %2) str seq (map (fn [a] (Integer/parseInt (str a)))))", "problem": 99, "user": "4efcac3a535de96065cf507e"}, {"code": "#(map (comp read-string str) (str (apply * %&)))", "problem": 99, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "(fn [a b]\n  (reverse\n    (map first\n    (take-while #(not= % [0 0])\n                     (rest \n                       (iterate \n                         (fn [[digit the-rest]]\n                           (vector (rem the-rest 10)\n                                   (quot the-rest 10)))\n                         (vector 0 (* a b))))))))", "problem": 99, "user": "5014754de4b094324338f8e5"}, {"code": "#((fn f [x] (if (< x 10) [x] (concat (f (quot x 10)) [(rem x 10)]))) (* %1 %2))", "problem": 99, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "501688f7e4b052339a490e7a"}, {"code": "(fn multi-seq [x y]\n  (let [result (* x y)\n        expo (Math/floor (Math/log10 result))]\n       (loop [s []\n              r result\n              e expo]\n         (if (neg? e)\n           s\n           (recur (conj s (int (quot r (Math/pow 10 e))))\n                  (rem r (Math/pow 10 e))\n                  (dec e))))))", "problem": 99, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "500e91aae4b00fff93030f99"}, {"code": "(comp (partial map (comp read-string str))\n      seq\n      str\n      #(* %1 %2))", "problem": 99, "user": "4efa3d4b535dced4c769f270"}, {"code": "(fn [a b] \n  (map #(read-string (str %)) (seq (str (* a b)))))", "problem": 99, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn [x y] (map #(- (int %1) 48) (seq (str (* x y)))))", "problem": 99, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn [x y]\n  (letfn [(decode [n] (if (< n 10) [n] (conj (decode (quot n 10)) (rem n 10))))]\n    (decode (* x y))))", "problem": 99, "user": "5007f751e4b0b17c647f522b"}, {"code": "(fn b [m mm] (map (fn [^Character c] (Character/digit c 10)) (str (* m mm))))", "problem": 99, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn [x y]\n  (map\n    #(- (int %) 48)\n    ((comp str *) x y)))", "problem": 99, "user": "501284d9e4b030d97e4db710"}, {"code": "(fn [a b] (vec (map #(Integer/parseInt %) (map str (seq (str (* a b)))))))", "problem": 99, "user": "50182f53e4b02f523d7cc5ec"}, {"code": "(fn [x y] \n  (map #(read-string (str %)) (seq (str (* x y)))))", "problem": 99, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn __ [a b]\n  (map read-string (rest (clojure.string/split (str (* a b)) #\"\"))))", "problem": 99, "user": "4fa719c0e4b081705acca1bf"}, {"code": "(fn prod_dig \n  ([x y] (prod_dig (* x y)))\n  ([x]\n    (\n      if(> x 0)\n        (conj (prod_dig (quot x 10)) (mod x 10))\n        []\n    )\n  )\n)", "problem": 99, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "(fn [a b] (vec (map read-string (re-seq #\"\\d\" (str (* a b))))))", "problem": 99, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "(fn [a b] (map #(- % 48) (map int (str (* a b)))))", "problem": 99, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "(fn s [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn [a b] (\n\n; from my solution for Q#137: Digits and bases\n(fn [n b]\n  (if (zero? n)\n      (vector n)\n      ((fn [n b r]\n      \t(if (zero? n)\n    \t\t\t\tr\n    \t\t\t\t(recur (quot n b) b (conj r (rem n b))))) n b nil)))\n(* a b) 10))", "problem": 99, "user": "501c1492e4b086d93747d180"}, {"code": "(fn pd [x y]\n  (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn [x1 x2]\n  (map #(read-string (str %)) (seq (str ( * x1 x2))))\n)", "problem": 99, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn [a b] (map #(- % 48) (.getBytes (str (* a b)))))", "problem": 99, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "(fn [x y]\n  (let [number (* x y)]\n  (map #(Integer/parseInt (str %)) (str number))))", "problem": 99, "user": "4f60ed88e4b0defedf855fb2"}, {"code": "(fn [x y](map \n  #(Integer/parseInt (str %)) \n  (seq (str (* x y)))))", "problem": 99, "user": "4ff2f0a9e4b0678c553fc341"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "5028bce0e4b01614d1633ffb"}, {"code": "(fn [a b]\n    (loop  [ r (* a b)\n            result []]\n     (if (zero? r)\n        (reverse result)\n        (recur (quot r 10) (conj result (rem r 10))))))", "problem": 99, "user": "4e4ca885535dc968683fc4df"}, {"code": "(fn [x y]\n(\n  (fn [i] (map #(Integer/parseInt %) (re-seq #\"[0-9]\" (str i))))\n  (* x y)\n))", "problem": 99, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (vec (str (* x y)))))", "problem": 99, "user": "5027f37be4b01614d1633ff1"}, {"code": "(fn [a b] (map #(Character/getNumericValue %1) (str (* a b))))", "problem": 99, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn mstr [x y]\n  (map (comp read-string str) (str (* x y))))", "problem": 99, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "(fn [x y] \n  (map #(Integer. (str %)) (seq (str (* x y)))))", "problem": 99, "user": "501dfd54e4b051153f3b5b80"}, {"code": "(fn asdf [x y] (map #(Integer/parseInt %)(map str (seq (Integer/toString (* y x))))))", "problem": 99, "user": "5012036ce4b0a040369c12f4"}, {"code": "(fn [x y]\n  (map \n    #(- (int %) (int \\0))\n    (seq (str (* x y)) )))", "problem": 99, "user": "4eaf08ce535d7eef3080732d"}, {"code": "#(map (fn[x] (- (int x) 48)) (seq (str (* %1 %2))))", "problem": 99, "user": "4ff78679e4b0678c553fc392"}, {"code": "(fn [& args] (vec (map #(Integer/parseInt (str %)) (str (apply * args)))))", "problem": 99, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "#(loop [rv () res (* % %2)]\n  (if (zero? res)\n    rv\n    (recur (conj rv (mod res 10)) (quot res 10))))", "problem": 99, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn [i j] (map #(Integer/parseInt (str %))\n               (str (* i j))))", "problem": 99, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn [m n]\n  (loop [p (* m n) s []]\n    (if (< p 10) (reverse (conj s p))\n      (recur (int (/ p 10)) (conj s (rem p 10))))))", "problem": 99, "user": "5029fccee4b023940c84aa47"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) \n  (seq (str (* a b)))))", "problem": 99, "user": "4ff9f5c5e4b0678c553fc3b4"}, {"code": "#(let [p (* %1 %2)] (reverse (loop [p2 p r []] (if (= p2 0) r (recur (quot p2 10) (conj r (mod p2 10)))))))", "problem": 99, "user": "5032b398e4b00c0952a257eb"}, {"code": "(fn [l r]\n  (let [digits (fn [n] (map #(- (int %) (int \\0)) (str n)))]\n    (digits (* l r))))", "problem": 99, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "#(mapcat (fn [x] (vector (Integer/parseInt (str x)))) (str (* %1 %2)))", "problem": 99, "user": "5030f16fe4b05b7df5a0b84b"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str(* a b)) ))", "problem": 99, "user": "502904e0e4b0feaf66e22fad"}, {"code": "#(loop [a (* % %2) s []] \n  (if (= 0 a) \n    s\n    (recur (quot a 10) (cons (mod a 10) s))))", "problem": 99, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [a b] (->> (* a b) str seq (map int) (map #(- % (int \\0)))))", "problem": 99, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "#(let [n (*%1 %2)]\n  (vec (map (fn [x] (- (int x) (int \\0))) (str n))))", "problem": 99, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "#(reverse( loop [x (* % %2) ls [] ]\r\n   (if  (= x 0) ls\r\n     (recur (quot x 10) (conj ls  (rem x 10)  )))))", "problem": 99, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn digits [y z]\n  (vec (map (fn [x] (Integer/parseInt x)) (rest (.split (str (* y z)) \"\")))))", "problem": 99, "user": "503a5623e4b07a1917cc34d3"}, {"code": "#(map read-string (map str (str (* % %2))))", "problem": 99, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn [& args]\n  (map #(Character/getNumericValue %) (str (apply * args))))", "problem": 99, "user": "50052fd0e4b0678c553fc45d"}, {"code": "#((fn f [acc n]\n    (if (zero? n) acc\n      (f (conj acc (rem n 10)) (quot n 10))))\n  '() (* % %2))", "problem": 99, "user": "503917a0e4b088a6a14ca763"}, {"code": "(fn [x y]\n  (map #(- (int %) (int \\0))\n    (seq (str (* x y)))))", "problem": 99, "user": "4e949d18535dbda64a6f6b15"}, {"code": "#((fn digits-of [x]\r\n            (if (zero? x)\r\n              []\r\n              (conj\r\n                (digits-of (quot x 10))\r\n                (mod  x 10)))) (* % %2))", "problem": 99, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn [x y] (map #(Integer. %1) (rest (clojure.string/split (str (* x y)) #\"\"))))", "problem": 99, "user": "4f515bd3e4b03ad3f0c10d1f"}, {"code": "(fn [& n] (map #(Integer/parseInt %) (re-seq #\"\\d\" (str (apply * n)))))", "problem": 99, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn [l r] (map (fn [i] (- (int i) 48)) (str (* l r))))", "problem": 99, "user": "502940a9e4b061fd216be4b8"}, {"code": "(fn [a b]\n  (->> (* a b) (.toString) seq \n       (map #(Integer/parseInt (.toString %)))))", "problem": 99, "user": "5012ec0ae4b0c87326002230"}, {"code": "#(map (fn [c] (read-string (str c))) (seq (str (* % %2))))", "problem": 99, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn [a b]\n   (map #(Integer/parseInt %)\n        (rest (clojure.string/split (str (* a b)) #\"\"))))", "problem": 99, "user": "4f03818e535dcb61093f6b00"}, {"code": "(fn [x y]\r\n  (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "4dc97aec535d5973398f9284"}, {"code": "(fn [a b] \n  (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "4fb266a5e4b081705acca28c"}, {"code": "(fn [a b] (map #(Integer/parseInt %) (map str (str (* a b)))))", "problem": 99, "user": "50435852e4b034ff00315d22"}, {"code": "(fn figures [a b]\n  (map (comp read-string str) (str (* a b))))", "problem": 99, "user": "4f625f68e4b0defedf855fd2"}, {"code": "(fn [a b]\n   (loop [x (* a b) lst '()]\n     (if (> (quot x 10) 0)\n       (recur (quot x 10) (conj lst (rem x 10)))\n       (conj lst (rem x 10)))\n     ))", "problem": 99, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn [a b]\n  (->> (map #(quot (* a b) %) (iterate #(* 10 %) 1))\n    (take-while #(> % 0))\n    (map #(mod % 10))\n    reverse))", "problem": 99, "user": "50479524e4b0371827a27bc4"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "5046b003e4b011c5dfee7727"}, {"code": "(fn [x y]\n  (map #(read-string (str %)) (str (* x y))))", "problem": 99, "user": "4fb01e53e4b081705acca260"}, {"code": "(fn decomp [x y]\n   (let [f (* x y) xs (quot f 10) digit (mod f 10)]\n     (if (= 0 xs)\n       (vector digit)\n       (conj (decomp 1 xs) digit))))", "problem": 99, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(fn [x y]\n   (let [f (fn this [v digits]\n             (let [v' (quot v 10)]\n               (if (= v' 0)\n                 (cons v digits)\n                 (cons (- v (* v' 10)) (this v' digits)))))]\n     (reverse (f (* x y) []))))", "problem": 99, "user": "4f616892e4b0defedf855fbf"}, {"code": "#(map (zipmap [\\0 \\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9] (range)) (str (* % %2)))", "problem": 99, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "504e13fce4b078edc5f593bc"}, {"code": "#(map (fn [x] (-> x (int) (- 48))) ((comp str *) %1 %2))", "problem": 99, "user": "504e397ee4b0f6ff3350c485"}, {"code": "#(map (fn [x] (Integer/parseInt (str x))) (seq (str (* % %2))))", "problem": 99, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "(fn [x y]\n  (map\n    #(- (int %) 48)\n    (seq (str (* x y)))))", "problem": 99, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn [a b]\n  (letfn [(dig [x] \n      (if (zero? x)\n        '()\n        (cons (rem x 10) (dig (quot x 10)))))]\n    (reverse (dig (* a b)))))", "problem": 99, "user": "504d0116e4b022602c20b089"}, {"code": "(fn [x y]\n    (loop [z (* x y)\n           digits []]\n      (if (= z 0)\n        (reverse digits)\n        (recur (long (/ z 10))\n               (conj digits (mod z 10))))))", "problem": 99, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "(fn [x y]\n  (let [xy (* x y)]\n    ((fn [xy r]\n        (if (zero? xy)\n          r\n          (let [mxy (mod xy 10)\n                dxy (quot xy 10)]\n            (recur dxy (conj r mxy))))) xy '())))", "problem": 99, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "#(\n  (fn d [n] \n    (if (< n 10)\n      [n] \n      (conj (d (quot n 10)) (mod n 10)))) \n(* %1 %2))", "problem": 99, "user": "50431cbce4b034ff00315d1c"}, {"code": "#(->>\r\n  (* % %2)\r\n  str\r\n  (map (zipmap \"0123456789\" (range 10))))", "problem": 99, "user": "504e14c2e4b078edc5f593bf"}, {"code": "#(map read-string (map str (str (* %1 %2))))", "problem": 99, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "(\n  fn [a b]\n(loop [result '() i (* a b)]\n    (if (>= i 10)\n      (recur (conj result (mod i 10)) (quot i 10))\n      (conj result i)))\n)", "problem": 99, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn [a b] \n  (loop [x (* a b)\n         xs '()]\n    (if (= x 0)\n        xs\n        (recur (quot x 10) (cons (mod x 10) xs)))))", "problem": 99, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %))(seq (str (* a b)))))", "problem": 99, "user": "50463347e4b011c5dfee771e"}, {"code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "problem": 99, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [x y]\n  (->> (* x y)\n       (str)\n       (re-seq #\"\\d\")\n       (map #(Integer/valueOf %))))", "problem": 99, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "(fn tosek\n    ([n] (if (not (zero? n)) (conj (tosek (quot n 10)) (int (mod n 10))) []))\n    ([a b] (tosek (* a b))))", "problem": 99, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn [a b]\n  (let [z (* a b)]\n    (map #(Integer/parseInt %) (map str (seq (str z))))))", "problem": 99, "user": "50435689e4b034ff00315d21"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [a b] (vec (map (comp #(- % 48) int)  (str (* a b)))))", "problem": 99, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn split-product [x y]\r\n  (vec (map #(Character/getNumericValue %)(str (* x y)))))", "problem": 99, "user": "50436470e4b034ff00315d23"}, {"code": "(fn [a b]\n  (map #(- (int %) 48)\n    (seq (str (* a b)))))", "problem": 99, "user": "4f244f26e4b0d66497709fea"}, {"code": "(fn [x y]\r\n  (let [p (* x y)]\r\n    (loop [z p acc '()]\r\n      (if (zero? z)\r\n        acc\r\n        (recur (quot z 10) (conj acc (mod z 10)))))))", "problem": 99, "user": "5050b107e4b063148f524126"}, {"code": "(fn [x y]\n  (map #(Long/valueOf (str %)) \n  (.toString (* x y))))", "problem": 99, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn [a b] (into [] (map #(- (int %) 48) (Integer/toString (* a b)))))", "problem": 99, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn [x y]\n  (loop [acc (* x y) result []]\n    (if (< acc 10)\n        (reverse (conj result acc))\n        (recur (quot acc 10) (conj result (rem acc 10))))))", "problem": 99, "user": "5057242fe4b0012181721986"}, {"code": "(fn [x y]\n  (->> (* x y)\n       str\n       seq\n       (map (comp read-string str))))", "problem": 99, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn [x y]\n  (->> (* x y) str seq (map str) (map #(Integer/parseInt %))))", "problem": 99, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "4f045946535dcb61093f6bba"}, {"code": "(fn [& x] (map #(- (int %) 48) (seq (str (apply * x)))))", "problem": 99, "user": "5053de37e4b0b1b9d1860ea8"}, {"code": "(fn [x y] \n  (map #(read-string (str %)) \n(str (* x y))))", "problem": 99, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "#(map (fn [x] (Character/digit x 10)) (Integer/toString (* % %2)))", "problem": 99, "user": "4ea0c284535d7eef308072ad"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "504f3fa3e4b0a02f9cffde62"}, {"code": "(fn [m n] (map #(Integer/valueOf %) (re-seq #\".\" (str (* m n)))))", "problem": 99, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn [x y]\n  (->> (* x y)\n       str\n       (map #(-> % str read-string))))", "problem": 99, "user": "50586354e4b06522596eba78"}, {"code": "(fn [x y] \n  (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "503e6047e4b06c4e0e1fa266"}, {"code": "(fn [a b]\n  (map #(- (int %) (int \\0)) (seq (str (* a b))))\n  )", "problem": 99, "user": "50555c06e4b0ce54f56f03fa"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn [a b] (into [] (map #(Character/getNumericValue %) (str (* a b)))))", "problem": 99, "user": "50481532e4b0ec70b3ef8d96"}, {"code": "(fn [a b] (let [red (fn f [n] (if (< 0 n) (conj (f (quot n 10)) (rem n 10))))] (reverse (red (* a b)))))", "problem": 99, "user": "4e8a880b535d65386fec210d"}, {"code": "(fn [a b] \n  ((fn [n]\n    (loop [num n ds []]\n      (if (> num 0)\n        (recur (/ (- num (mod num 10)) 10) (conj ds (mod num 10)))\n        (reverse ds))))\n(* a b)))", "problem": 99, "user": "503e7f06e4b06c4e0e1fa268"}, {"code": "(fn prod-digits [x y]\n  (vec (map (fn [s] (Integer/valueOf (str s))) (map identity (str (* x y))))))", "problem": 99, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "problem": 99, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "#(map read-string (map str (seq (str (* %1 %2)))))", "problem": 99, "user": "504e72cee4b0f6ff3350c4b4"}, {"code": "#(loop [n (* %1 %2) xs []]\n  (if (= n 0) xs\n    (recur (quot n 10) (cons (rem n 10) xs))))", "problem": 99, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "#(loop [num (* %1 %2) coll []]\n  (if (zero? num) (reverse coll)\n    (recur (quot num 10) (conj coll (rem num 10)))))", "problem": 99, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn\r\n  [x y]\r\n  (let [p (* x y)\r\n        p-str (str p)\r\n        char-seq (seq p-str)]\r\n     (map #(read-string (str %)) char-seq)))", "problem": 99, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn [& nums]\n  \n  (let [n (apply * nums)]\n    ((fn infn [num]\n    (if (= 0 num)\n        []\n        (conj (infn (quot num 10)) (rem num 10)))) n)))", "problem": 99, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn [x y]\n  (loop [prod (* x y)\n         out-list '()]\n    (if (< prod 10)\n      (conj out-list prod)\n      (recur (quot prod 10) (conj out-list (rem prod 10))))))", "problem": 99, "user": "5060d137e4b0dc10a69545a0"}, {"code": "(fn [& nums]\n  (reduce #(conj %1 (Integer/valueOf (str %2))) [] (str (apply * nums))))", "problem": 99, "user": "505bd09fe4b032b709c81373"}, {"code": "(fn [a b] (->> (* a b) str vec (map int) (map #(- % (int \\0)))))", "problem": 99, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn [a b] ((fn ct [g] (let [r (rem g 10)] (fn [a b] ((fn ct [g] (let [r (rem g 10)] (if (zero? g) [] (conj (ct (quot g 10)) r)))) (* a b)))(if (zero? g) [] (conj (ct (quot g 10)) r)))) (* a b)))", "problem": 99, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn product-digits [a b]\n    (map #(.indexOf (vec \"0123456789\") %) (pr-str (* a b))))", "problem": 99, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "#(map (fn [x] (Integer/parseInt (str x))) (str (* %2 %)))", "problem": 99, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn  \n  [a b] \n    (map #(Integer/parseInt %) \n      (remove #(= \"\" %) (clojure.string/split (str (* a b)) #\"\"))))", "problem": 99, "user": "50573ed8e4b0012181721987"}, {"code": "(fn [x y]\n  (let [prod (* x y)]\n    (map #(-> % str Integer.)\n      (into []\n        (str prod)))))", "problem": 99, "user": "50611456e4b0dc10a69545a5"}, {"code": "(fn *-seq [m n]\n  (loop [i (* m n), ans ()]\n    (if (zero? i)\n      ans\n      (recur (quot i 10) (cons (mod i 10) ans))\n      )\n    )\n  )", "problem": 99, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn pdigits [x y]\n  (loop [prod (* x y) digits '()]\n    (let [r (rem prod 10) q (quot prod 10)]\n    (if (zero? q) \n          (cons r digits)\n          (recur q (cons r digits))\n    )\n    )\n  )\n)", "problem": 99, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn [& s]\n  (map #(- (int %) (int \\0)) (apply (comp seq str *) s)))", "problem": 99, "user": "50657775e4b0deb876850599"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (seq (str  (* x y)))))", "problem": 99, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "#(map read-string\n  (map str (seq (str (* % %2)))))", "problem": 99, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn [& n] \n  (map #(Integer/parseInt (str %)) \n       (seq (str (apply * n)))))", "problem": 99, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "(fn [x y] (map (comp read-string str) (seq (str (* x y)))))", "problem": 99, "user": "506b8242e4b0eda3100c090a"}, {"code": "(fn [x y]\n  (map #(Character/getNumericValue %) (into [] (str (* x y)))))", "problem": 99, "user": "50645e12e4b007509339a58a"}, {"code": "(fn [& more] (map #(Integer/valueOf (.toString %)) (seq (.toString (apply * more)))))", "problem": 99, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn [x y] (vec (map #(Integer/parseInt (.toString %)) (str (* x y)))))", "problem": 99, "user": "5051e2abe4b0a561d07d8f0a"}, {"code": "(fn [& nums] (vec (map #(Integer. (str %)) (seq (str (apply * nums))))))", "problem": 99, "user": "506b016de4b0a2a5463de37f"}, {"code": "(fn [& xs]\n  (->> (apply * xs) (iterate #(quot % 10))\n       (take-while (complement zero?))\n       (map #(rem % 10))\n       (into '())))", "problem": 99, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn product-digits [n m]\n  (letfn [(digits0 [x b]\n            (loop [x x, d '()]\n              (if (zero? x) (cons 0 d)\n                  (recur (int (/ x b))\n                         (cons (mod x b) d)))))\n          (digits [x b]\n            (let [d (digits0 x b)]\n              (if (= d '(0)) d (rest d))))]\n    (digits (* n m) 10)))", "problem": 99, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [x y]\r\n  ((fn [a l]\r\n     (if (zero? a)\r\n       l\r\n       (recur (quot a 10) (conj l (mod a 10)))))\r\n   (* x y)\r\n   '()))", "problem": 99, "user": "507437c2e4b054001656acd0"}, {"code": "(fn [a b]\n  (map #(Character/getNumericValue %) (str (* a b))))", "problem": 99, "user": "506a1985e4b01dc6af13f83e"}, {"code": "#(loop [val (* %1 %2)\n        accum ()]\n  (if (> val 0)\n      (recur (quot val 10) (cons (mod val 10) accum))\n      accum))", "problem": 99, "user": "505f55d3e4b08f2a82ad10b0"}, {"code": "(fn prod-dig [x y]\n  (loop [res '() prod (* x y)]\n    (if (> prod 0)\n      (recur (conj res (rem prod 10)) (quot prod 10))\n      res)))", "problem": 99, "user": "50763574e4b0a894bb95bf3d"}, {"code": "#(map \n    (comp read-string str)\n    (-> (* % %2) str))", "problem": 99, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "#(map (comp bigint str) (str (* % %2)))", "problem": 99, "user": "4e778d36535d324fb2983d71"}, {"code": "(fn [x y] (map #(Integer/valueOf (str %)) (str (* x y))))", "problem": 99, "user": "507a9b29e4b08327cd804a6e"}, {"code": "(fn [x y](let [num-seq (fn [n] (loop [x n acc '()] \n                          (if (< x 10)\n                            (conj acc x)\n                            (recur (quot x 10) (conj acc (rem x 10))))))]\n   (num-seq (* x y))))", "problem": 99, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn [num1 num2]\n  (map #(Integer/parseInt %) (rest (clojure.string/split (str (* num1 num2)) #\"\"))))", "problem": 99, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "(comp (partial map \n               (comp read-string str)) \n      seq str *)", "problem": 99, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "(fn [m n]\n  (loop [k (* m n)\n         r []]\n    (if (= 0 k)\n        (vec (reverse r))\n        (let [rem (mod k 10)]\n          (recur (quot k 10)\n            (conj r rem))))))", "problem": 99, "user": "506f1e12e4b09350ab4199f9"}, {"code": "(fn [a b] (mapcat #(do [(- (int %) (int \\0))]) (str (* a b))))", "problem": 99, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn P99 [ & l]\n  (let [res (apply * l)]\n    (loop [value res result []]\n      (if (< value 9)\n        (if (= value 0)\n          (reverse result)\n          (reverse (conj result value)))\n        (recur (int (/ value 10)) (conj result (rem value 10)))))))", "problem": 99, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn [x y] (map (comp #(- % 48) int) (str (* x y))))", "problem": 99, "user": "505d4b21e4b0e6aca564be07"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "507a08e4e4b08327cd804a67"}, {"code": "(fn [x y] (let [p (* x y)] (map #(Character/getNumericValue %) (str p))))", "problem": 99, "user": "506b437de4b0eda3100c0906"}, {"code": "(fn [& rest] (let [n (apply * rest)] \n                      (loop [res [] n n]\n                            (if (zero? n) (reverse res)\n                              (recur (conj res (mod n 10)) (int (/ n 10)))))))", "problem": 99, "user": "504db141e4b021508a333965"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "#((fn digits [x] (if (> 1 x) [] (conj (digits (quot x 10)) (rem x 10) ))) (* %1 %2))", "problem": 99, "user": "50807940e4b01a93d3f38e44"}, {"code": "#((fn cutup [n xs]\n  (if (< n 10)\n    (reverse (conj xs (mod n 10)))\n    (cutup (quot n 10) (conj xs (mod n 10)))\n  )\n) (* %1 %2) [])", "problem": 99, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn [a b]\n  (reduce #(cons (mod %2 10) %) [] (take-while #(> % 0) (iterate #(quot % 10) (* a b)))))", "problem": 99, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn [a b]\n  (map read-string (re-seq #\"\\d\" (str (* a b)))))", "problem": 99, "user": "504c8165e4b09724c857af31"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "507a396be4b08327cd804a69"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn [a b]\n         (let [ dseq\n               (fn [n]\n                 (if (= n 1) [1]\n                     (let [x #(Math/pow 10 %) c #(Math/ceil %)\n                           lg10 #(/ (Math/log %) (Math/log 10))\n                           pos #(c (lg10 %))\n                           ithdigit #(/ (- (rem n (x (inc %))) (rem n  (x %))) (x %))]\n                       (map (comp int ithdigit)  (reverse  (range (pos n)))))))]\n           ((comp vec dseq * ) a b)))", "problem": 99, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "(fn [x y] (map #(Integer. %)  (re-seq #\"[0-9]\" (str (* x y)))))", "problem": 99, "user": "50838c06e4b0902986d69e0f"}, {"code": "(fn [a b] ((fn digits [n] (if (< n 10)\n                  (list n)\n                  (concat (digits (quot n 10)) (list (mod n 10)))\n                  )) (* a b)))", "problem": 99, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "problem": 99, "user": "4e80aa10535db62dc21a62b1"}, {"code": "#(map read-string (map str (seq (str (* %1 %2)))))", "problem": 99, "user": "4e72dd5d535d5021c1a89667"}, {"code": "(fn [num1 num2]\n  (loop [prod (* num1 num2) curprod (* num1 num2) cur 10 ret []]\n    (if (> cur prod)\n      (cons (rem curprod 10) ret)\n      (recur \n        prod \n        (/ (- curprod (rem curprod 10)) 10) \n        (* cur 10) \n        (cons (rem curprod 10) ret)\n      )\n    )\n  )\n)", "problem": 99, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "(letfn [  \n  (digits [n] \n    (map #(rem % 10)\n      (take-while pos? \n        (iterate #(int (/ % 10)) n))))]\n  (fn [x y]\n    (reverse (digits (* x y)))))", "problem": 99, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn [n1 n2]  \r\n  (map #(Integer. %)\r\n    \t(filter not-empty \r\n\t\t\t(clojure.string/split (str (* n1 \r\n                            \t\t\t  n2)) \r\n                                  #\"\"))))", "problem": 99, "user": "50576483e4b001218172198b"}, {"code": "(fn [x y] (map #(Integer. %1) (re-seq #\"\\d\" (str (* x y)))))", "problem": 99, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn [a b] (map (comp #(Integer/parseInt %) str) (seq (str (* a b)))))", "problem": 99, "user": "4db86aee535d1e037afb2193"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4fe2501ae4b0dd6cd5ce3644"}, {"code": "(fn [el-1 el-2]\n  (map (fn [x] (Integer/parseInt (str x)))\n       (seq (str (* el-1 el-2)))))", "problem": 99, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "(fn [x y] (->> (* x y) str (map #(- (int %) 48))))", "problem": 99, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn [x y] (map #(- (int %) 48) (vec (str (* x y)))))", "problem": 99, "user": "502ade49e4b0614b52996120"}, {"code": "(fn [n1 n2] (map #(- (int %) 48) (seq (str (* n1 n2)))))", "problem": 99, "user": "503255d0e4b0e78df07b092b"}, {"code": "(fn [a b]\n  (map #(-> % char str Integer/parseInt) (str (* a b))))", "problem": 99, "user": "5097b556e4b00ad8bab4e970"}, {"code": "#(\n  map\n  (fn [x] (Integer/parseInt (str x))) \n  (seq (str (* %1 %2)))\n)", "problem": 99, "user": "508bf05ae4b0f17d83ea26aa"}, {"code": "#(loop [x (* %1 %2), a []] (if (= x 0) a (recur (quot x 10) (cons (rem x 10) a))))", "problem": 99, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn [a b]\n  (map\n    #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4fb1325de4b081705acca276"}, {"code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "50813b88e4b09292fd669443"}, {"code": "(fn [x y] ((fn ! [n] (if (< n 10) (list n) (flatten (list (! (int (/ n 10))) (mod n 10))))) (* x y)))", "problem": 99, "user": "4f85a75ce4b033992c121c48"}, {"code": "(fn [x y]\n  (->> (* x y)\n      str\n      (map str)\n      (map #(Integer/parseInt %))))", "problem": 99, "user": "4dd62278535d2dad7130b5c7"}, {"code": "#(map (fn [x] (Integer/valueOf (str x)))\n      (.toString (* % %2)))", "problem": 99, "user": "5089ebfee4b03217b26a539f"}, {"code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))) )", "problem": 99, "user": "4f49108ae4b0d56e7bb92be5"}, {"code": "#((fn digits [i]\n      (if (< i 10)\n        [i]\n        (conj (digits (quot i 10)) (rem i 10))))\n   (* % %2))", "problem": 99, "user": "4dbdc898535d020aff1edf4a"}, {"code": "(fn [x y]\n  (reverse ((fn foo [a]\n    (if (< a 10) (list a)\n    (concat (list (mod a 10)) (foo (quot a 10))))\n)(* x y))))", "problem": 99, "user": "5078300de4b0fc74642bff66"}, {"code": "(fn [x y]\n    (loop [n (* x y) lst '()]\n      (if (= 0 n)\n          lst\n          (recur (quot n 10) (cons (mod n 10) lst)))))", "problem": 99, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "(fn [a b] \n  (map #(Integer/parseInt %) \n    (rest (clojure.string/split (str (* a b)) #\"\"))))", "problem": 99, "user": "507e68abe4b085af06e3afd2"}, {"code": "(comp (partial map (comp read-string str)) str *)", "problem": 99, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn [a b]\n  (map (fn [c] (Integer/parseInt (str c))) (seq (.toString (* a b)))))", "problem": 99, "user": "4f030a38535dcb61093f6a47"}, {"code": "(fn [x y] \n  (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn [a b] (map #(Character/getNumericValue %) (into [] (str (* a b)))))", "problem": 99, "user": "4dad76588e77d6ed63f12a44"}, {"code": "#(map (comp read-string str) (str (apply * %&)))", "problem": 99, "user": "50996a38e4b0cae2931060b3"}, {"code": "#(map read-string (re-seq #\".\" (str (* %1 %2))))", "problem": 99, "user": "4fff289ae4b0678c553fc3fd"}, {"code": "(fn [a b]\n  (map #(Character/getNumericValue %)\n        ((comp seq str) (* a b))))", "problem": 99, "user": "4e0febe6535d04ed9115e7be"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "4ec3650f535dcc7ae8597d56"}, {"code": "(fn [a b]\n  (->> (* a b) str (map #(Integer/parseInt (str %)))))", "problem": 99, "user": "50a83794e4b054305ba5a831"}, {"code": "#(mapv (fn [c] (- (int c) 48)) (str (* %1 %2)))", "problem": 99, "user": "5027b41ee4b01614d1633fee"}, {"code": "(fn [& xs] (map #(read-string (str %))\n  (vec (str (reduce * xs)))))", "problem": 99, "user": "509eeb3be4b08df8156e9e37"}, {"code": "#(map read-string (re-seq #\"\\d\" (str (* % %2))))", "problem": 99, "user": "5098bcfee4b0cae2931060a1"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt (str %))\n       (str (* x y))))", "problem": 99, "user": "50a7b76de4b090657f4a5cdc"}, {"code": "(fn [x y]\n  (map #(- (int %) 48)(str (* x y))))", "problem": 99, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn digits [x y]\n  (let [product (* x y)]\n    (map (comp #(Integer/parseInt %) str)  (seq (str product)))))", "problem": 99, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "#(map (fn [x] (- (int x) 48)) (str (* % %2)))", "problem": 99, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn [a b](map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4ed152d5535d44c135fd68cc"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "problem": 99, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "(fn [x y] \n  (let [k (seq (str (* x y)))]\n    (map #(- (int %1) (int \\0)) k)))", "problem": 99, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [a b]\n  (let [c (seq (str (* a b)))]\n    (map #(Character/digit % 10) c)\n  )\n)", "problem": 99, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "(fn [a b]\n  (map #(Character/getNumericValue %) (seq (str (* a b)))))", "problem": 99, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "#((fn d [n] (if (= 0 n) [] (concat (d (quot n 10)) [(rem n 10)]))) (* % %2))", "problem": 99, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "(fn [x y] (apply vector (map #(Integer/parseInt (str %)) (str (* x y)))))", "problem": 99, "user": "50981062e4b04e098a4c7268"}, {"code": "#(map {\\0 0 \\9 9 \\8 8 \\7 7 \\6 6 \\5 5 \\4 4 \\3 3 \\2 2 \\1 1}\n  (Long/toString (* % %2)))", "problem": 99, "user": "5078d366e4b08327cd804a5b"}, {"code": "(fn [x y]\n  ((fn [n accu]\n    (if (> n 0)\n      (recur (int (/ n 10)) (cons (mod n 10) accu))\n      accu)) (* x y) nil))", "problem": 99, "user": "50217818e4b00bba4502f7a7"}, {"code": "#(map (comp read-string str)\n      (str (* %1 %2)))", "problem": 99, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "#(map (comp (partial + -48) int) (seq (str (* %1 %2))))", "problem": 99, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn [a b] (map #(-> % str read-string) (str (* a b))))", "problem": 99, "user": "500ec210e4b00fff93030f9d"}, {"code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "problem": 99, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "50aab057e4b056ee0193586b"}, {"code": "#(map (fn [c] (Integer/parseInt c)) (map str (seq (str (* %1 %2)))))", "problem": 99, "user": "5092fe10e4b097f48cc3857e"}, {"code": "#(map\n  (fn [x] (Integer/parseInt (str x)))\n  (str (* % %2)))", "problem": 99, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4fb54e50e4b081705acca2bb"}, {"code": "(fn [x y] (map #(Integer. (str %))(str (* x y))))", "problem": 99, "user": "50a4cbbee4b0344e360f3bc2"}, {"code": "(comp (partial map (comp read-string str)) str *)", "problem": 99, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "(fn [x y] (map #(- (int %1) 48 ) (str (* x y))))", "problem": 99, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn [a b]\n  ((fn ld [x]\n    (if (= 0 x)\n        []\n        (conj (ld (quot x 10))\n              (mod x 10))))\n  (* a b)))", "problem": 99, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn test99\n  [x y]\n  (let [xy (* x y)]\n    (vec (loop [q xy\n            result ()]\n       (if (< q 10)\n         (cons q result)\n         (recur (quot q 10) (cons (mod q 10) result)))))))", "problem": 99, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn [a b]\n   (reverse \n    (loop [s []\n           x (* a b)]\n      (let [d (rem x 10)]\n        (if (< (/ x 10) 1)\n          (conj s d)\n          (recur (conj s d) (/ (- x d) 10)))))))", "problem": 99, "user": "50868795e4b004985b776e5e"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt %)\n    (map str (str (* x y)))))", "problem": 99, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn digits-99 [x y]\n  (map #(- (int %) (int \\0)) (vec (str (* x y)))))", "problem": 99, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "#(loop [n (* %1 %2) l '()]\n    (if (= n 0)\n      l\n      (recur (quot n 10) (conj l (mod n 10)))))", "problem": 99, "user": "50112acee4b0d82cfac69f4c"}, {"code": "(fn [n1 n2]\r\n  (loop [n (* n1 n2), c []]\r\n    (if (< n 10) \r\n      (cons n c) \r\n      (recur (int (/ n 10)) (cons (rem n 10) c)))))", "problem": 99, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(\n  fn f1 [a b](\n   \n    let[ f2 \n        ( fn f3 [x](\n          if( = 0 x ) (list) ( cons (rem x 10) ( f3 ( quot x 10))  )\n          )\n        )\n      ](\n      reverse ( f2 ( * a b ) )  \n    )\n  )\n)", "problem": 99, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "#(loop [x (* % %2) y [] ] (if (zero? (quot x 10)) (cons x y) (recur (quot x 10) (cons (rem x 10) y))))", "problem": 99, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(fn [a b]\n  (map #(- (int %) 48) \n      (reverse (reverse (str (* a b))))))", "problem": 99, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "(fn [a b] (map #(-  (int %) (int \\0)) (seq (str (* a b )))))", "problem": 99, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "(fn[x y] (map read-string (map str (str (* x y)))))", "problem": 99, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn prod-digits [x y]\n  (reverse (map #(rem % 10) \n                (take-while (complement zero?) \n                            (iterate #(quot % 10) (* x y))))))", "problem": 99, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn[x y]\n(map #(- (int %1) 48) (str (* x y)))\n)", "problem": 99, "user": "50b25f2ce4b03ea88043355f"}, {"code": "(fn [x1 x2] (map read-string (rest (clojure.string/split (str (* x1 x2)) #\"\"))))", "problem": 99, "user": "50b64b55e4b0a86f8358ca6b"}, {"code": "#((comp reverse\n  (fn it [x]\n    (if (< 0 x)\n      (cons (rem x 10) (it (quot x 10))))))\n  (* % %2))", "problem": 99, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "4f89d489e4b033992c121c7e"}, {"code": "#(map (comp read-string str) (seq (str (apply * %&))))", "problem": 99, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn [x y] (map (comp read-string str) (vec (str (* x y)))))", "problem": 99, "user": "50982cc7e4b04e098a4c726c"}, {"code": "(fn [a b]\r\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "50608ea0e4b07251188e4456"}, {"code": "#((fn[x] (loop [rem x dig []] (if (= rem 0) dig (recur (int (/ rem 10)) (concat [(mod rem 10)] dig))))) (* % %2))", "problem": 99, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn [x y]\n  (map #(Integer. (str %)) (seq (str (* x y)))))", "problem": 99, "user": "4eca7a87535d6d7199dd3705"}, {"code": "#(map (fn [c] (Character/getNumericValue c)) (str (* % %2)))", "problem": 99, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "#(reverse ((fn recurs [x] (if (= x 0) '() (conj (recurs (quot x 10)) (mod x 10)))) (* %1 %2)))", "problem": 99, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "(fn [a b] (map #(- (int %) 48) (seq (String/valueOf (* a b)))))", "problem": 99, "user": "509b152be4b0412cdea6eb1e"}, {"code": "(fn [a b] \n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "500aa15ee4b03d00572d2d76"}, {"code": "#(map (comp read-string str) (.toString (* % %2)))", "problem": 99, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "#(map (fn [a] (- (int a) 48)) (str (* % %2)))", "problem": 99, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn [x y] (vec (map #(- (int %) (int \\0)) (str (* x y)))))", "problem": 99, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn [a b]\n  ((fn [x acc]\n     (let [acc' (cons (mod x 10) acc)]\n       (if (< x 10) acc'\n         (recur (quot x 10) acc')))) (* a b) '()))", "problem": 99, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn [p q]\n           (loop [a (* p q) result []]\n              (if (zero? a)\n                  result\n                  (recur (quot a 10) (concat [(rem a 10)] result)))))", "problem": 99, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn [x y]\n  (map #(Integer. (apply str %)) (partition 1 (str (* x y)))))", "problem": 99, "user": "4e71a12c535d5021c1a8964f"}, {"code": "(fn [x y]\n     (loop [n (* x y) answer []]\n       (if (= n 0) answer\n         (recur (quot n 10)\n           (cons (rem n 10) answer)\n         )\n       )\n     )  \n  )", "problem": 99, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (Integer/toString (* x y) 10)))", "problem": 99, "user": "4ff769bce4b0678c553fc38f"}, {"code": "(fn [n1 n2] (map #(Long. %) (map str (seq (str (* n1 n2))))))", "problem": 99, "user": "50b24a2fe4b03ea88043355c"}, {"code": "#( loop [x [] t (* % %2)] \n    (if (zero? (quot t 10))\n      (vec (reverse (conj x (mod t 10))))\n      (recur (conj x (mod t 10))  (/ (- t (mod t 10)) 10))))", "problem": 99, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "(fn [a b]\n  (map\n   (comp #(Integer. %) str)\n   (vec (str (* a b)))))", "problem": 99, "user": "50ccf729e4b0f7a459302aac"}, {"code": "(fn this [x y]\n(vec (map #(- (int %) (int \\0)) (String/valueOf (* x y)))))", "problem": 99, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn [x y](map #(- % 48) (map int (seq (str(* x y))))))", "problem": 99, "user": "500a214de4b03d00572d2d74"}, {"code": "#(map (fn [^Character c] (Character/digit c 10)) (str (* % %2)))", "problem": 99, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "problem": 99, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "(fn [a b] (let [n (* a b)] (map (comp #(Integer/parseInt %) #(Character/toString %)) (seq (str n)))))", "problem": 99, "user": "50d179c7e4b05a71a896ef56"}, {"code": "(fn [a b]\n  (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "(fn [a b]\n  (map #(- (int %) 48)\n    (str (* a b))\n  )\n)", "problem": 99, "user": "50e3cf55e4b01912b3285c45"}, {"code": "(fn product-digits [n m]\n  (for [character (str (* n m))]\n    (Integer/parseInt (str character)))\n)", "problem": 99, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "#(map (fn [x] ( - x 48)) \n       (map int (apply vector (str (* %1 %2)))))", "problem": 99, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "4e2164ff535d04ed9115e815"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "#(vec (map (fn [x] (Integer/parseInt (str x))) (str (* % %2))))", "problem": 99, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "#(vec (map (fn [item] (read-string (str item))) (seq (str(* % %2)))))", "problem": 99, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [a b] (map #(- (int %) 48) (into [] (str (* a b)))))", "problem": 99, "user": "503539dee4b0ed9c821488f6"}, {"code": "(fn [a b] (into [] (map #(read-string (str %)) (seq (str (* a b))))))", "problem": 99, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(comp (partial map (comp read-string str)) str *)", "problem": 99, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn [a b] (let [f (fn f [x s] (if (= x 0) s (f (quot x 10) (cons (mod x 10) s))))]\n            (f (* a b) [])))", "problem": 99, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn [x y]\n  (loop [n (* x y) s '()]\n    (if (< n 10) (conj s n) (recur (quot n 10) (conj s (rem n 10))))))", "problem": 99, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn [a b]\n  (->> (* a b) str .toCharArray seq (map str) (map #(Integer/valueOf %))))", "problem": 99, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "(fn [n1 n2]\n  (let [n (* n1 n2)]\n    (map read-string (rest (clojure.string/split (str n) #\"\\.?\")))))", "problem": 99, "user": "50493b52e4b06e84b772a23e"}, {"code": "(fn [x y]\n  (let [prod (* x y)]\n    (loop [p prod\n           r []]\n      (if (> p 0)\n        (recur (long (/ p 10)) (cons (rem p 10) r))\n        r))))", "problem": 99, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn [x y]\n  (loop [ret [] a (* x y)]\n    (if (< a 10) (reverse (conj ret a))\n      (recur (conj ret (rem a 10)) (quot a 10))\n    )\n  )\n)", "problem": 99, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn [x y]\n  (->> (* x y)\n       str\n       (map #(- (int %) (int \\0)))))", "problem": 99, "user": "4db29f98535df7e46ed9b6c1"}, {"code": ";;(fn [a b] (map #(- (int %1) 48) (str (* a b))))\n(fn [a b] (->> (* a b)\n               str\n               (map #(- (int %1) 48))))", "problem": 99, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "#(loop\n   [n (* %1 %2)\n    d '()]\n   (if (= n 0)\n     d\n     (let [r (mod n 10)]\n       (recur (/ (- n r) 10) (conj d r)))))", "problem": 99, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt (str (char %))) (str (* x y))))", "problem": 99, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "#(->> (apply * %&) str seq (map (comp read-string str)))", "problem": 99, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [number1 number2] (mapv #(Integer/parseInt (str %)) (str (* number1 number2))))", "problem": 99, "user": "50ee145de4b06330c1f87c53"}, {"code": "#(map (fn [n] (- (int n) (int \\0))) (str (* % %2)))", "problem": 99, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn [x y] (mapv #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "(fn [x y]\n  (let \n    [prod (* x y)]\n    ((fn m [r res] \n       (cond\n       \t(zero? r) res\n       \t:else (recur (quot r 10) (cons (rem r 10) res))\n     \t)\n       ) prod '()\n  )))", "problem": 99, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "(fn [x y] (let [[& n] (str (* x y)) ] (map  #(Integer. (str %) ) n)))", "problem": 99, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn [x y]\n  (->> (* x y)\n       str\n       seq\n       (map str)\n       (map read-string)))", "problem": 99, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "#(map (comp read-string str) (seq (str (* % %2))))", "problem": 99, "user": "50f1dedbe4b0897c4366dcd8"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "#(loop [num (* %1 %2) col []]\n  (if (< num 1)\n    col\n    (recur (/ (- num (mod num 10)) 10) (cons (mod num 10) col))\n    )\n  )", "problem": 99, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "50ed9e8de4b06330c1f87c44"}, {"code": "(fn [n m]\n  (map #(read-string (str %1)) (seq (str (* n m))))\n)", "problem": 99, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "(fn [a b] (reverse (into [] (map #(mod % 10) (take-while #(> % 0) (iterate #(quot % 10) (* a b)))))))", "problem": 99, "user": "50e82c31e4b0ebbe794eb7da"}, {"code": "(fn [a b] \n    (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "50de11b2e4b061dbdced7217"}, {"code": "(comp (partial map #(- (int %) (int \\0))) seq str *)", "problem": 99, "user": "505aa653e4b021387fb89857"}, {"code": "(fn d [a b]\n  ((fn d1 [x n]\n    (if (< n 10)\n     (into [] (reverse (conj x n)))\n     (d1 (conj x (rem n 10)) (/ (- n (rem n 10)) 10))\n    )\n  ) [] (* a b))\n)", "problem": 99, "user": "50f4894be4b004d364930528"}, {"code": "(fn [n1 n2]\n    (map #(- (int %) (int \\0)) (str (* n1 n2))))", "problem": 99, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [x y]\n\t((fn  [n]\n  \t\t(loop [digits [] number n]\n    \t\t(if (not= number 0)\n    \t\t\t(recur (conj digits (mod number 10)) (/ (- number (mod number 10)) 10))\n\t\t\t\t(reverse digits)))) \n     (* x y)))", "problem": 99, "user": "5097ea89e4b087ccf61a7af4"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "#(map (comp read-string str) (vec (str (* %1 %2))))", "problem": 99, "user": "4fda108ee4b05e33b9224f46"}, {"code": "(fn [a b]\n   (->>\n     (* a b)\n     (str)\n     (partition-all 1)\n     (apply concat)\n     (map #(- (int %) 48))\n     (into [])))", "problem": 99, "user": "503f4759e4b00d1a725ff2a9"}, {"code": "(fn listmul [x y]\n  (letfn [(numToList [n] (if (< n 10) (list n) (cons (rem n 10) (numToList (int (/ n 10))))))]\n    (reverse (numToList (* x y)))))", "problem": 99, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "#(map (fn [x] (- x 48)) (map int (str (* % %2))))", "problem": 99, "user": "4ee7ef87535d93acb0a66872"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "50ec4ed7e4b04edc33777046"}, {"code": "#(map (comp read-string str) (seq (str (* % %2))))", "problem": 99, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "#(map (fn [d] (- (int d) 48)) (str (* % %2)))", "problem": 99, "user": "50d8739ae4b01f0871336e68"}, {"code": "(fn [num1 num2]\n  (let [resstr (str (* num1 num2))]\n    (map (fn [char] (Integer/parseInt (str char))) resstr)))", "problem": 99, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "(fn multDigits [x y] \n  (loop [n (* x y), digits []] \n    (if (< n 10) (cons n digits) (recur (quot n 10) (cons (rem n 10) digits)))))", "problem": 99, "user": "50ef311fe4b0a78662fa2651"}, {"code": "(fn [l r]\n\t(map #(Integer/parseInt (str %)) (str (* l r))))", "problem": 99, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn [x y] (map #(Integer. (str %)) (str (* x y))))", "problem": 99, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [a b] (map #(Integer. (str %)) (str (* a b))))", "problem": 99, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(fn [n1 n2]\n  (map (comp #(- % (int \\0)) int) (str (* n1 n2))))", "problem": 99, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn [x y]\n  (map read-string(re-seq #\"\\d\" (str (* x y))))\n  )", "problem": 99, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "(fn digit [a b]\n  (reduce (fn [c e] (conj c (- (int e) (int \\0)))) [] (seq (str (* a b)))))", "problem": 99, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn [x y]\n    ((fn self [x] (if (< x 10) [x] (conj (self (quot x 10)) (rem x 10))))\n    (* x y)))", "problem": 99, "user": "51059d33e4b0380e797c7d5c"}, {"code": "(fn [x y]\n  (->> (* x y)\n       str\n       (map str ,,,)\n       (map #(Integer. %) ,,,)))", "problem": 99, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "(fn [x y] (map #(- (int %) 48) (into [] (str (* x y)))))", "problem": 99, "user": "510931ede4b0c71f76895663"}, {"code": "(fn [a b] (map #(Integer/parseInt %) (map str ((comp seq str) (* a b)))))", "problem": 99, "user": "5008d149e4b0144d4f561e41"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4e4be570535dc968683fc4d8"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "5102489de4b00c483ae176f6"}, {"code": "(fn [x1 x2] (map #(- % 48) (map int (into [] (str (* x1 x2))))))", "problem": 99, "user": "4fdf5403e4b05e33b9224f98"}, {"code": "(fn [x y] (let [p (* x y)]\n            (map #(quot (mod p (* 10 %)) %)\n                 (reverse \n                  \t(take \n                     \t(inc (long (Math/log10 p)))\n                     \t(iterate #(* 10 %) 1))))))", "problem": 99, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "(fn [a b] (map #(- (int %) (int \\0))(vec (str (* a b)))))", "problem": 99, "user": "5106bc8ae4b01150e115ebec"}, {"code": "#(for [c (str (* %1 %2))] (- (int c) 48))", "problem": 99, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn [a b]\n  (->> (* a b)\n       str\n       seq\n       (map #(- (int %) 48))))", "problem": 99, "user": "510db6cde4b078ea71921145"}, {"code": "(fn [x y] (let [s (str (* x y))]\n            (vec (map (fn[a] (- (int a) 48)) (seq s)))))", "problem": 99, "user": "507a33dee4b08327cd804a68"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "511026b1e4b04c71fce993ec"}, {"code": "(fn [x y] (reverse (map #(mod % 10) (take-while (complement zero?) (iterate #(quot % 10) (* x y))))))", "problem": 99, "user": "5102ac9de4b00c483ae176fa"}, {"code": "(fn [x y] \n            (map #(Integer/valueOf (str %1)) (seq (str (* x y)))))", "problem": 99, "user": "510d3dc6e4b078ea71921132"}, {"code": "(fn [x y]\n  (map read-string (map str (seq (str (* x y))))))", "problem": 99, "user": "510cd1dde4b078ea71921124"}, {"code": "#(map read-string (re-seq #\"\\d\" (str (* %1 %2))))", "problem": 99, "user": "5107b86de4b05b2b4eee7495"}, {"code": "(fn [a b] (vec (map #(read-string (str %)) (str (* a b))) ))", "problem": 99, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn [x y]\n  (if (= (* x y) 0)\n    [0]\n    (loop [prod (* x y)\n           digits (list)]\n      (if (= prod 0)\n        (vec digits)\n        (recur (quot prod 10) (conj digits (rem prod 10)))))))", "problem": 99, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) \n               (vec (str (* x y)))))", "problem": 99, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "(fn [a b]\n   (loop [result [] product (* a b)]\n     (if (= 0 product)\n       result\n       (recur (cons (mod product 10) result) (unchecked-divide-int product 10))\n       )\n     )\n   )", "problem": 99, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [x y]\n  (loop [prod (* x y)\n         xs []]\n         (if (< prod 10) \n           (cons prod xs)\n           (recur (quot prod 10) (cons (rem prod 10) xs)))))", "problem": 99, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "(fn [x y] (map #(-> % str read-string) (str (* x y))))", "problem": 99, "user": "5115c7e4e4b0ce5098ee73c2"}, {"code": "(fn [a b]  \n\t(loop [x (* a b)\n           v []]\n      (if (< x 10) (cons x v)\n        (recur (quot x 10) (cons (mod x 10) v))\n      )\n    )\n)", "problem": 99, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "50f17c0de4b06d9538fe2123"}, {"code": "(fn [x y]\n  (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn [a b]\n  (map #(read-string (str %)) (seq (str (* a b)))))", "problem": 99, "user": "51181009e4b0e0897831a60f"}, {"code": "(fn [a b] (map (fn [c] (Integer. (str c))) (seq (str (* a b)))))", "problem": 99, "user": "50b29029e4b03ea880433563"}, {"code": "(comp (partial map read-string) (partial map str) seq str *)", "problem": 99, "user": "4eea4840535d93acb0a6689b"}, {"code": "(fn [x y]\n  (let [prod (* x y)]\n    (map #(- % (int \\0)) (map int (vec (str prod)))) ))", "problem": 99, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "#(loop [result () n (* %1 %2)]\n   (if (zero? n)\n     result\n     (recur (cons (rem n 10) result) (quot n 10))))", "problem": 99, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [x y] (map (comp read-string str) (seq (str (* x y)))))", "problem": 99, "user": "51008b6fe4b0700a7a02d6e4"}, {"code": "(fn [a b] (map #(Integer/parseInt %) (re-seq #\"\\d\" (str (* a b)))))", "problem": 99, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) \n       (seq (str (* a b)))))", "problem": 99, "user": "4e964f4a535dbda64a6f6b42"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "4ecc1d85535d23f0362276f8"}, {"code": "(fn [& nums] (map #(Integer/parseInt (str %)) (str (reduce * nums))))", "problem": 99, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "(fn [a b]\n  (loop [ret '()\n         val (* a b)]\n    (if (<= val 0) ret\n      (recur (conj ret (mod val 10)) (quot val 10)) )))", "problem": 99, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn [x y]\n  (->> (* x y)\n       .toString\n       (re-seq #\"\\d\")\n       (map #(Integer/parseInt %))))", "problem": 99, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "#(loop [n (* % %2) y '()] (if (zero? n) y (recur (quot n 10) (conj y (mod n 10)))))", "problem": 99, "user": "50742549e4b054001656accf"}, {"code": "(fn [a b]\n  (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "4ec12577535dfed6da9c6da8"}, {"code": "(fn [n m]\n  (map #(- (int %) 48) (seq (str (* n m)))))", "problem": 99, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (-> (* x y) str vec)))", "problem": 99, "user": "511c44fde4b00c2a1fa7ff77"}, {"code": "(fn [x y]\n  (->> (* x y)\n       str\n       (map (fn [c] (- (int c) (int \\0))))))", "problem": 99, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "(fn [a b]\n  (let [c (Integer/toString (* a b))]\n    (map #(Integer/parseInt (.toString %)) (.toCharArray c))\n    )\n  )", "problem": 99, "user": "510b704ee4b078ea71921100"}, {"code": "(comp (fn f [x] (if (= x 0) [] (conj (f (quot x 10)) (rem x 10)))) *)", "problem": 99, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn [a b]\r\n   (map #(- (int %) 48) (seq (str (* a b))))\r\n)", "problem": 99, "user": "510a6bece4b06956752d35af"}, {"code": "(fn [x y]\n  (map (comp #(- % 48) int) (vec (str (* x y)))))", "problem": 99, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn [n1 n2]\n  (loop [ps (.toString (* n1 n2)), result []]\n    (if (empty? ps)\n      result\n      (recur (rest ps) (conj result (Integer/parseInt (str (first ps))))))))", "problem": 99, "user": "512474ede4b02c3f2a072cce"}, {"code": "#(map (fn [x] (- (int x) 48)) (str (* % %2)))", "problem": 99, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn [a b] (map #(Character/digit % 10) (.toString (* a b))))", "problem": 99, "user": "51284226e4b03a34742b4308"}, {"code": "#(map (fn [x] (- (int x) (int \\0))) (seq (str (* % %2))))", "problem": 99, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn [_1 _2] (map #(-> % str Integer/parseInt) (seq (str (* _1 _2)))))", "problem": 99, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn [s1 s2] (loop [x (* s1 s2) acc '()] (if (= x 0) acc (recur (quot x 10) (cons (rem x 10) acc)))))", "problem": 99, "user": "511a0374e4b06c8af011181a"}, {"code": "#(map {\\0 0, \\1 1, \\2 2, \\3 3, \\4 4, \\5 5, \\6 6, \\7 7, \\8 8, \\9 9} (str (* % %2)))", "problem": 99, "user": "5125834ae4b05d10e3e395fa"}, {"code": "(fn [a b] (map #(Integer/parseInt %) (map str (str (* a b)))))", "problem": 99, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn [a b] (loop [v '() d (* a b)]\n\t\t\t\t(if (>= d 10) (recur (conj v (rem d 10)) (quot d 10)) (conj v d))))", "problem": 99, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "#(loop [c '() v (* %1 %2)]\n  (if (= v 0)\n    c\n    (let [r (unchecked-remainder-int v 10)\n          d (unchecked-divide-int v 10)]\n      (recur (conj c r) d))))", "problem": 99, "user": "5127e504e4b03a34742b4302"}, {"code": "(fn [xx yy] \n    (map #( - ( int % ) 48  ) \n         (str  (* xx yy))))", "problem": 99, "user": "4f030775535dcb61093f6a43"}, {"code": "(fn [a b]\n  (let [x (* a b)]\n    (loop [n x s nil]\n      (let [rmdr (mod n 10) whl (/ (- n rmdr) 10)]\n        (if (= whl 0)\n          (cons rmdr s)\n          (recur whl (cons rmdr s)))))))", "problem": 99, "user": "511618b1e4b0d4f670fd2fdf"}, {"code": ";; performant result (may not be maximally performant)\n;; (fn f [& xs] \n;;   (loop [n (apply * xs)\n;;         s []]\n;;    (if (zero? n)\n;;      s\n;;      (recur (quot n 10) (cons (rem n 10) s)))))\n\n;; simplest answer\n(fn [& xs] (->> (apply * xs)\n                str\n                (map str)\n                (map #(Integer/parseInt %))))", "problem": 99, "user": "51281b25e4b03a34742b4304"}, {"code": "#(map (comp read-string str) (seq (str (* %1 %2))))", "problem": 99, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn [n1 n2]\n    (loop [result [] product (* n1 n2)]\n    (if-not (and (= product 0)(= (last result) 0)) \n         (recur (conj result (mod product 10)) (quot product 10))\n         (vec (reverse (butlast result))))))", "problem": 99, "user": "50621cbde4b0341461c88951"}, {"code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "511d11d7e4b022853b0e079f"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn multidigify [numone numtwo]\n  (\n    (fn digify\n      ([digits_as_value digit_list]\n        (cond\n          (= digits_as_value 0) digit_list\n          :else\n          (recur (quot digits_as_value 10) (cons (mod  digits_as_value 10) digit_list))\n          )\n        )\n      ([to_be_expanded] (digify to_be_expanded '()))\n   )\n   (* numone numtwo)\n  )\n)", "problem": 99, "user": "502be4fae4b08f5602f232eb"}, {"code": "(fn [x y]\n  (map read-string (map str (seq (str (* x y))))))", "problem": 99, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "#(loop [n (apply * %&) r '()]\n  (if (< n 10)\n    (vec (cons n r))\n    (recur (-> (/ n 10) Math/floor int) (cons (mod n 10) r))        \n    )  \n)", "problem": 99, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn [a b]\n  (#(if (< % 10)\n      (conj %2 %)\n      (recur (quot % 10) (conj %2 (rem % 10))))\n   (* a b) '()))", "problem": 99, "user": "50eebf46e4b06330c1f87c61"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "(fn [x y]\n  (map read-string (map str (seq (str (* x y))))))", "problem": 99, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn [& args]\n  (->> args\n       (apply *)\n       str\n       seq\n       (map #(Integer/parseInt (str %)))))", "problem": 99, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn [a b] (map #(-> % str Integer/parseInt) (-> (* a b) str seq)))", "problem": 99, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn [x y]\n  (reduce #(conj % (Integer/parseInt (str %2))) [] (str (* x y))))", "problem": 99, "user": "4fc8769be4b0ee37620e1833"}, {"code": "(fn [a b] \n  (for [d (str (* a b))] \n    (- (int d) 48)))", "problem": 99, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "(fn digs [x y]\n  (apply vector (map #(- (int %) 48) (str (* x y)))))", "problem": 99, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn [x y] (letfn [(digits [number] \n\t\t\t(loop [n number d '()]\n\t\t\t\t(if (zero? n)\n\t\t\t\t\td\n\t\t\t\t\t(recur (quot n 10) (conj d (rem n 10)))\n\t\t\t\t)\n\t\t\t)\n\t\t)]\n        (digits (* x y))))", "problem": 99, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn [a b]\n  (map (comp #(Integer/parseInt %) str) (str (* a b))))", "problem": 99, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(let [digits (fn digits [n] (if (= n 0) [] (conj (digits (quot n 10)) (mod n 10))))]\n  #(digits (* %1 %2)))", "problem": 99, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn [x y] (map #(read-string (str %)) (str (* x y))))", "problem": 99, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [x y]\n  (let [p (* x y)]\n    (reverse\n     (take\t(loop [pt p n 0] (if (< pt 1) n (recur (/ pt 10) (inc n))))\n                 (map #(int (rem (/ p %) 10))\n                 (map #(Math/pow 10 %) (iterate inc 0)))))))", "problem": 99, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "4de52c87535d08e6dec9fdf0"}, {"code": "(fn [a, b]\n  (map #(Integer/parseInt %) (rest (clojure.string/split (.toString (* a b)) #\"\"))))", "problem": 99, "user": "51365524e4b04ac1f358dd52"}, {"code": "#(map read-string (map str (seq (str (* %1 %2)))))", "problem": 99, "user": "4e823f41535db62dc21a62c8"}, {"code": "(fn prodigs [x y]\n  (reduce #(conj %1 (int (- (int %2) (int \\0)))) [] (str (* x y))))", "problem": 99, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn [a b] \n  (let [v (* a b)]\n    (loop [v v ret '()]\n      (if (= v 0)\n        ret\n        (recur (quot v 10) (cons (mod v 10) ret))))))", "problem": 99, "user": "5117c31ee4b0e0897831a60c"}, {"code": "(comp (partial map #(- (int %) 48)) str *)", "problem": 99, "user": "51352899e4b082aeb3a3f03b"}, {"code": "(fn [a b]\n  (vec (second (first (take 1 (drop-while #(> (first %) 0) (iterate #(vector (quot (first %) 10) (cons (mod (first %) 10) (second %))) [(* a b) []])))))))", "problem": 99, "user": "513a4babe4b067e25a345eca"}, {"code": "(fn [a b]\n  ((fn [x r]\n  (cond\n   (zero? x) (if (empty? r) [0] r)\n   :else     (recur (quot x 10) (cons (mod x 10) r))))\n   (* a b) []))", "problem": 99, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "#(map (fn[n](Character/digit n 10)) (str (* % %2)))", "problem": 99, "user": "5138d08be4b0a5db03d727db"}, {"code": "(comp (partial map #(Integer/parseInt (str %))) str *)", "problem": 99, "user": "4f1bb9d8535d64f60314647d"}, {"code": "(fn [x y] (map #(. Integer parseInt (str %)) (str (* x y))))", "problem": 99, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "problem": 99, "user": "512fba16e4b0a88bb1e00aae"}, {"code": "(fn [x y]\n\t\t(loop [result ()\n\t\t\t   product (* x y)]\n\t\t\t(if (< product 10)\n\t\t\t\t(conj result product)\n\t\t\t\t(recur (conj result (rem product 10)) (quot product 10))\n\t\t\t)))", "problem": 99, "user": "51205867e4b0e88f5a20c40f"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt %) (let [res (* a b)]\n       (re-seq #\"\\d\" (str res)))))", "problem": 99, "user": "51000111e4b00d7ad4cab15e"}, {"code": "(fn [x y] \n   (loop [result [] coll (into [] (.toString (* x y)))] \n     (if (= [] coll) \n       (into [] result) \n       (recur (cons (read-string (.toString (last coll))) result) (drop-last coll)))))", "problem": 99, "user": "513ca934e4b0b86ece9f3228"}, {"code": "#(map (fn [x] (- (int x) 48)) (str (* % %2)))", "problem": 99, "user": "510dc185e4b078ea71921146"}, {"code": "(fn [ x  y ]\n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(comp (partial map #(Integer. (str %))) str * )", "problem": 99, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn [x y] (map (comp read-string str) (seq (print-str (* x y)))))", "problem": 99, "user": "513bb7a6e4b04402f587b77d"}, {"code": "(fn prod-dig [n1 n2]  (reverse (map #(mod % 10) (take-while (comp not zero?) (iterate #(quot % 10 ) (* n1 n2) ))))         )\n  \n  \n;  (iterate #(cons (quot % 10) []) [(* n1 n2) ]) )", "problem": 99, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "#(loop [x '() y (* % %2)] (if (zero? y) x (recur (conj x (rem y 10)) (quot y 10))))", "problem": 99, "user": "5145832be4b0e8879607340a"}, {"code": "#(into [] (map (fn[i] (Integer. (str i)) ) (format \"%d\" (* %1 %2))))", "problem": 99, "user": "513f53c6e4b051389b345b40"}, {"code": "(fn [a b]\n  (let [lst ((fn inner [n cum] \n               (let [r (rem n 10) n-new (quot (- n r) 10)] \n                 (if (zero? n-new) (conj cum r) (inner n-new (conj cum r))))) (* a b) [])]\n    (vec (reverse lst))))", "problem": 99, "user": "50e135f4e4b084616e11c667"}, {"code": "#(map (fn [x] (Integer/parseInt x)) (drop 1 (clojure.string/split (str (* %1 %2)) #\"\")))", "problem": 99, "user": "51430fb2e4b0c172af7558ce"}, {"code": "(fn prddig [& xs]\n  (map #(- (int %1) (int \\0)) (seq (str (apply * xs)))))", "problem": 99, "user": "4fb804f7e4b081705acca2d6"}, {"code": "(comp (partial map #(Integer/parseInt (str %))) str *)", "problem": 99, "user": "5141fafbe4b0b50abeb46b28"}, {"code": "(fn [a b] \n  (let [prod (* a b)]\n  (map read-string (map str (seq (str prod))))))", "problem": 99, "user": "4f072644535dcb61093f6c20"}, {"code": "(fn [a b]\n   \n   (loop [result [] value (* a b)]\n     (if (zero? value)\n       result\n       (recur (cons (mod value 10) result) (quot value 10)))\n     )\n     \n   )", "problem": 99, "user": "5135a74ae4b04ac1f358dd46"}, {"code": "(fn [a b]\n    (->> (* a b)\n      (String/valueOf)\n      (seq)\n      (map str)\n      (map #(Integer. %))))", "problem": 99, "user": "4e52777f535d302ef430da76"}, {"code": "(fn [x y] (into [] (map #(- (int %) 48) (seq (str (* x y))))))\n; it's time to circle back and start digging into 'programming clojure'\n; the hack factor is too high.", "problem": 99, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn [a b] (map #(java.lang.Integer/parseInt %) \n  (map str (apply list (str (* a b))))))", "problem": 99, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn [x y]\n  (let [s (.toString (* x y))]\n    (seq (map #(- % 48) (map int s)))))", "problem": 99, "user": "51502056e4b098b221effc25"}, {"code": "#(map (comp read-string str) (str (reduce * %&)))", "problem": 99, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn [& xs] (map #(- (int %) 48) (str (apply * xs))))", "problem": 99, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "#(map read-string (map str (seq (str (* %1 %2)))))", "problem": 99, "user": "4f50d933e4b03ad3f0c10d11"}, {"code": "#(reverse ((fn a [n] (if (= 0 n) \n              [] \n              (conj (lazy-seq (a (long (/ n 10)))) (rem n 10))))\n    (apply * %&)))", "problem": 99, "user": "51037468e4b00c483ae17702"}, {"code": "(fn [p1 p2]\n\t  (let [res (seq (str (* p1 p2)))]\n\t    (reduce #(conj %1 (Integer/valueOf (str (first %2 )))) [] (partition 1 res))) )", "problem": 99, "user": "5016ac54e4b052339a490e7b"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn product-digits [x y] (let [res (* x y)] (map #(Integer/parseInt (str %)) (str res))))", "problem": 99, "user": "4fae4c11e4b081705acca248"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (flatten (partition 1 (str (* x y))))))", "problem": 99, "user": "514afd1be4b0bd81940b86c6"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn [a b] \n  (map \n   #(Integer/valueOf (str %)) \n   (str (* a b))))", "problem": 99, "user": "4e58ef07535d8a8b8723a299"}, {"code": "(fn [x y] (let [z (* x y)] (map (comp read-string str) (str z))))", "problem": 99, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "(fn [a b] (map #(- (int %) (int (first \"0\"))) (seq (str (* a b)))))", "problem": 99, "user": "5158bba4e4b059418b97f0ab"}, {"code": "(fn [a b] \n   (map #(- (int %1) 48) (str (* a b)) )\n   )", "problem": 99, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn [ x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "(fn [a b] (vec (map #(Integer/parseInt (str %)) (str (* a b)))))", "problem": 99, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "(fn [x y] (map #(Character/digit % 10) ((comp str *) x y)))", "problem": 99, "user": "5047782ce4b0371827a27bc2"}, {"code": "(fn [x y]\n  (->> (* x y)\n       (str)\n       (map str)\n       (map #(Integer/parseInt %))))", "problem": 99, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn [a b]\n          (letfn [(step [i]\n                    (if (pos? i)\n                      (cons (rem i 10) (step (quot i 10)))))]\n            (reverse (step (* a b)))))", "problem": 99, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [x y]\n  (loop [n (* x y) result []]\n    (if (< n 10)\n      (cons n result)\n      (recur (quot n 10) (cons (rem n 10) result)))))", "problem": 99, "user": "514721c6e4b0d520409ed392"}, {"code": "#(map (comp read-string str) \n      (str (* %1 %2)))", "problem": 99, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn [a b] (let [prod (* a b)] (map #(Integer/parseInt (apply str %)) (partition 1 (str prod)))))", "problem": 99, "user": "5150a7d7e4b03e678e393abb"}, {"code": "#(map read-string (re-seq #\"[0-9]\" (str (* %1 %2))))", "problem": 99, "user": "4fb4303fe4b081705acca2ac"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "504ee511e4b0e7ad84dbc4a4"}, {"code": "(fn [a b]\n  (map #(- (int %) (int \\0)) (char-array (str (* a b)))))", "problem": 99, "user": "50f48298e4b004d364930527"}, {"code": "(fn [x y]\n  (let [ds (str (* x y))\n        dstrs (map str ds)]\n    (map read-string dstrs)))", "problem": 99, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "#(map (fn [c] (- (int c) 48)) (str (* % %2)))", "problem": 99, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "#(map (fn [x] (- (int x) (int \\0))) (seq (str (* % %2))))", "problem": 99, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn [a b] (->> a (* b) str (reduce (fn [x y] (conj x (- (int y) (int \\0)))) [])))", "problem": 99, "user": "5162757ee4b03cfa3774b3fe"}, {"code": ";; the trick way\n(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "problem": 99, "user": "514e4ae4e4b019235f6c0594"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "51170b49e4b0063b4e3e16d9"}, {"code": "#(map (fn [n] (- (int n) 48)) (str (* % %2)))", "problem": 99, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "#(map read-string (rest (clojure.string/split (str (* %1 %2)) #\"\")))", "problem": 99, "user": "51383346e4b0a5db03d727d4"}, {"code": "(fn digit-seq [a b] \n  ((fn [n c]\n     (if (= (quot n 10) 0)\n       (cons n c)\n       (recur (quot n 10) (cons (rem n 10) c))))\n    (* a b) []))", "problem": 99, "user": "51592b81e4b0394f658fe22c"}, {"code": "(fn [l r] (map #(Character/getNumericValue %) (str (* l r))))", "problem": 99, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn [a b]\n  (loop [n (* a b) acc '()]\n    (if (zero? n)\n      (apply vector acc)\n      (recur (int (/ n 10)) (conj acc (rem n 10))))))", "problem": 99, "user": "515828b8e4b0a069fd272c71"}, {"code": "(fn [l r] (map #(java.lang.Character/digit % 10) (str (* l r))))", "problem": 99, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "problem": 99, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt %) (map str (str (* a b)))))", "problem": 99, "user": "5166e80de4b060c690c1f4c5"}, {"code": "(fn digit-prod[dit1 dit2]\n  (let [digit-sum (* dit1 dit2) n (count (str digit-sum))]\n    (map #(rem % 10) (reverse (take n (iterate #(quot % 10) digit-sum))))))", "problem": 99, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn [n1 n2]\n  (map #(- (int %) 48) (str (* n1 n2))))", "problem": 99, "user": "513cb853e4b0b86ece9f322b"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "5150f87ae4b03e678e393ac7"}, {"code": "(fn [a b]\n  (for [x (str (* a b))]\n    (read-string (str x))))", "problem": 99, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn t [x y] (map #(Integer. (. % toString)) (str (* x y))))", "problem": 99, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn [a b]\n  (map #(- (int %) (int \\0))\n       (str (* a b))))", "problem": 99, "user": "51460e4ce4b04ef915e37314"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "516f06dce4b06aac486e5b39"}, {"code": "(fn [x y]\n  (map #(- (int %) (int \\0))\n       (pr-str (* x y))))", "problem": 99, "user": "5151aa14e4b03e678e393ad4"}, {"code": "(fn [a b]\n  (let [x (* a b)]\n    (loop [q (quot x 10)\n           r (rem x 10)\n           v '()]\n      (if (= 0 q)\n        (conj v r)\n        (recur (quot q 10) (rem q 10) (conj v r))))))", "problem": 99, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn p99 [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn [n m] \n  (map (comp\n         #(- % (int \\0))\n         int)\n    (str (* n m))))", "problem": 99, "user": "51473a70e4b0d520409ed394"}, {"code": "(fn [nb1 nb2]\n   (let [mult (* nb1 nb2)\n         toint (fn [char] (- (int char) 48))\n         tostr (str mult)]\n     (vec (map toint tostr))))", "problem": 99, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "#(map (fn [a ](Integer. a)) (re-seq #\"\\d\" (str(* %1 %2))))", "problem": 99, "user": "5143952fe4b0b4fb4ace5f38"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "51740b65e4b0d277d717bc67"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (seq (str (* x y)))))", "problem": 99, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn [a b]\n  (map #(Character/digit % 10) (str (* a b))))", "problem": 99, "user": "5173726be4b098276e74652c"}, {"code": "(fn [a b] (map #(read-string (str %)) (str (* a b))))", "problem": 99, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "516dc88ae4b046df6fbb76a1"}, {"code": "#(map read-string (map str (str (* %1 %2))))", "problem": 99, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "(fn [x y]\n  (reverse\n   ((fn digits [n]\n     (if (< n 10)\n       [n]\n       (cons (rem n 10) (digits (int (/ n 10))))))\n    (* x y))))", "problem": 99, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "(fn [a b]\n  \t(loop [m (* a b) r []]\n      (if (zero? m)\n        r\n        (recur (quot m 10) (cons (rem m 10) r)))))", "problem": 99, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn [a b]\n  (loop [c (* a b) l []]\n    (if(= c 0)\n      l\n(recur (quot c 10) (cons (rem c 10) l)))\n   )\n\n\n\n  )", "problem": 99, "user": "516eb196e4b06aac486e5b2e"}, {"code": "(fn digits-of-multiplication [a b]\n  (letfn [(iter [l x]\n                (if (< x 1)\n                  l\n                  (iter (cons (mod x 10) l) (int (/ x 10)))))]\n    (iter [] (* a b))))", "problem": 99, "user": "517531c6e4b07031762f2eea"}, {"code": "(fn [a b]  ((fn [n s] (if (zero? n) s (recur (quot n 10) (cons (rem n 10) s)))) (* a b) []))", "problem": 99, "user": "51729002e4b044b2ef48a850"}, {"code": "(letfn [(f [x]\n          (cons (mod x 10) (if (> x 10) (f (quot x 10)) '())))]\n  (fn [& args] (reverse (f (apply * args)))))", "problem": 99, "user": "50b668dde4b08fb537db98f2"}, {"code": "#(map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} (str (* %1 %2)))", "problem": 99, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn [d1 d2]\n    (map #(- (int %) (int \\0)) (str (* d1 d2))))", "problem": 99, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn [x y] (map #(Integer/parseInt %) (map str (seq (str (* x y))))))", "problem": 99, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %))\n       (str (* a b))))", "problem": 99, "user": "51778122e4b085adf681d89d"}, {"code": "(fn [x y]\n  (map #(java.lang.Integer/parseInt (str %)) (str (* x y))))\n;(fn [a b]\n;  (map (comp #(- % 48) int) (vec (str (* a b)))))", "problem": 99, "user": "5153316ce4b0252ac4b16611"}, {"code": "(fn [x y]\n  (let [digits (fn [x acc] (if (zero? x)\n                         acc\n                         (recur (quot x 10) (conj acc (rem x 10))) ))]\n    (digits (* x y) '())))", "problem": 99, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "51780bfce4b0f89a8f53839c"}, {"code": "(fn mspell[x y]\n (let [s (fn spell\n  ([x acc]\n    (cond\n     (= 0 x) acc\n     :else (recur (quot x 10) (cons (rem x 10) acc))\n     \n    )\n  )\n  ([x]\n   (spell x ())\n  )\n )\n   ]\n  (s (* x y))\n )\n)", "problem": 99, "user": "4fb03cf4e4b081705acca262"}, {"code": "(fn [& args] (map #(- (int %) 48) (str (apply * args))))", "problem": 99, "user": "50d3ec8be4b030b634c368bb"}, {"code": "(fn [a b]\n  (let [res (.toString (* a b))]\n    (->> res\n         (map #(.toString %))\n         (map bigint))))", "problem": 99, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn [x y] (map #(- (int %) 0x30) (str (* x y))))", "problem": 99, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "(fn [a b] (->> (* a b)\n               (iterate #(int (/ % 10)))\n               (take-while pos?)\n               (map #(mod % 10))\n               reverse))", "problem": 99, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn p99 [a b]\n  (map #(Integer/parseInt %) (map str (str (* a b))))\n  )", "problem": 99, "user": "51750fc5e4b07031762f2ee6"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "517b59b8e4b0925c997201d0"}, {"code": "(fn [a b]\n  (map #(- (int %) 48) (vec (str (* a b)))))", "problem": 99, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn [a b]\n  (map #(read-string (str %)) (seq (str (* a b)))))", "problem": 99, "user": "5152bc4ee4b001f44f99bfef"}, {"code": "#(map \n (fn [c] (- (int c) 48))\n (str (* % %2)))", "problem": 99, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn tod [a b]\n  (vec (map #(- (int %) 48) (vec (str (* a b))))))", "problem": 99, "user": "4ef2eb4d535dced4c769f226"}, {"code": "(fn [x y]\n        (let  [m {\\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9 \\0 0}]\n        \t(vec (map #(m %) (vec (str (* x y)))))))", "problem": 99, "user": "518ccf6be4b05e6c8537e386"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "517bc969e4b07ef0e56148d0"}, {"code": "#(map (comp read-string str) \n      (str (* % %2)))", "problem": 99, "user": "518b761ae4b0f028e99addee"}, {"code": "(fn [a b]\n  (map read-string (map str (vec (str (* a b))))))", "problem": 99, "user": "515ff4b9e4b0e2be8aa20bd9"}, {"code": "(fn [x y]\n    (loop [z (* x y), a []]\n      (if (= 0 z) a\n        (recur (unchecked-divide-int z 10) (cons (unchecked-remainder-int z 10) a)))\n      )\n    )", "problem": 99, "user": "5099283ce4b0cae2931060af"}, {"code": "(fn [x y]\n  (loop [accum [] strleft (str (* x y))]\n    (if (> (count strleft) 0)\n      (recur (cons (subs strleft 0 1) accum) (subs strleft 1))\n      (map #(Integer/parseInt %) (reverse accum))\n      )\n    )\n  )", "problem": 99, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "(fn [a b]\n  (reverse ((fn f [x]\n             (if (< 10 x)\n               (cons (mod x 10) (f (int (/ x 10))))\n               [x])) (* a b))))", "problem": 99, "user": "5154b16be4b0179c5115f4e2"}, {"code": "(fn [n1 n2]\n  (loop [n (* n1 n2) lst []]\n    (if (= n 0)\n      lst\n      (recur (quot n 10) (concat [(mod n 10)] lst)))))", "problem": 99, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "(fn [& args]\n   (let [mul (reduce * args)]\n     (map #(- (int %) (int \\0)) (str mul))))", "problem": 99, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4e74e119535d7a570dd295bc"}, {"code": "(fn [n m]\n  (let [product (* n m)]\n    (map #(Character/getNumericValue %) (str product))))", "problem": 99, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn [a b] (let [n (.toString (* a b))] (map #(Integer/parseInt %) (re-seq #\"\\d\" n ))))", "problem": 99, "user": "5073de20e4b054001656acca"}, {"code": "(fn f [x y]\n  (map bigint (re-seq #\"[0-9]\" (str (* x y)))))", "problem": 99, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn [a b]\n  (map \n    #(- (int %1) (int \\0))\n    (into [] (str (* a b)))\n  )\n)", "problem": 99, "user": "518e6966e4b051adb72789ec"}, {"code": "(fn [x y]\n  (map #(- % 48) (map int (into [] (str (* x y))))))", "problem": 99, "user": "5194f482e4b05be8c43d2385"}, {"code": "(fn [a b]\n        (loop [dd (* a b)\n                  result []]\n              (if (zero? dd)\n                  result\n                (recur (int (/ dd 10)) (cons (mod dd 10) result)))))", "problem": 99, "user": "4f3ca5a6e4b0e243712b1f53"}, {"code": "(fn [x y] (map #(Long/parseLong (str %)) (str (* x y))))", "problem": 99, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [a b] (map #(Integer. (apply str %)) (partition 1 (str (* a b)))))", "problem": 99, "user": "4f03ba9c535dcb61093f6b58"}, {"code": "(fn [x y] \n  (loop [z (* x y) res []] \n    (if (= 0 z) \n      res \n      (recur (int (/ z 10)) (cons (mod z 10) res)))))", "problem": 99, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn [a b]\n  (->> (* a b)\n       (str)\n       (map str)\n       (map #(Integer/parseInt %))))", "problem": 99, "user": "506ba58be4b0eda3100c090b"}, {"code": "#(map read-string (re-seq #\"\\d\" (str (* % %2))))", "problem": 99, "user": "51823a97e4b0f2adb733651e"}, {"code": "(fn [x y] (map (fn [z] (Integer. (str z))) (seq (str (* x y)))))", "problem": 99, "user": "51a05bede4b0b292b01ee3f4"}, {"code": "(fn [a b] (map #(Long/valueOf %) (re-seq #\"[0-9]\" (str (* a b)))))", "problem": 99, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn [n1 n2]\n   (loop [n (* n1 n2)\n          digits '()]\n       (if (zero? n)\n         (vec digits)\n         (recur (quot n 10) (conj digits (rem n 10))))))", "problem": 99, "user": "4e09392a535d04ed9115e7ae"}, {"code": "#(map (fn [c] (Character/digit c 10)) (str (apply * %&)))", "problem": 99, "user": "5065dd94e4b0313a384e5643"}, {"code": "(fn [x y] (map #(Integer. (str %)) (seq (str (* x y)))))", "problem": 99, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "(fn [n m]\n (->> (* n m) str \n(map  #(Integer/parseInt (str %) ))))", "problem": 99, "user": "517945dce4b0684c1c981a43"}, {"code": "#(reverse ((fn digits [n] (cond (= n 0) '()\n                      :else (cons (mod n 10) (digits (quot n 10))))) (* %1 %2)))", "problem": 99, "user": "5183f5d7e4b02826a645f393"}, {"code": "(fn [x y] (map (comp read-string str) (str (* x y))))", "problem": 99, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "(fn [& args]\n  (loop [ r [] a (apply * args)]\n    (if (< a 10)\n      (reverse (conj r a))\n      (let [b (rem a 10 )]                   \n        (recur (conj r b) (quot (- a b ) 10))))))", "problem": 99, "user": "518c5236e4b087e178201de0"}, {"code": "(fn [a b] (map #(Integer/valueOf %) (map str (str (* a b)))))", "problem": 99, "user": "51ab1718e4b04e3dc0c27b2f"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "problem": 99, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "(fn [n1 n2]\n  (loop [n (* n1 n2)\n         col '()]\n    (if (> n 0)\n      (recur (quot n 10)\n             (conj col (mod n 10)))\n      col)))", "problem": 99, "user": "4fbf2818e4b081705acca317"}, {"code": "(fn [a b]\n  (map #(. Integer parseInt (str %)) (str (* a b))))", "problem": 99, "user": "510b0480e4b078ea719210fa"}, {"code": "#(for [ch (str (* %1 %2))] (- (int ch) (int \\0)))", "problem": 99, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn [x y]\n  (let [product (* x y) string (str product)]\n     (reduce #(conj %1 (read-string (str %2))) [] string)\n    ))", "problem": 99, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "(fn [a b]\n  (map #(- (int %) (int \\0))\n       (str (* a b))))", "problem": 99, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn [n1 n2] (map #(- (int %) (int \\0)) (seq (str (* n1 n2)))))", "problem": 99, "user": "51040eb2e4b0432126ba9bb4"}, {"code": "(fn [x y]\n  (map #(- (int %) 48  )  (vec (str (* x y)))))", "problem": 99, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "(fn [a,b] ( map #( - (int %) (int \\0) ) (seq(str (* a b)))))", "problem": 99, "user": "51aa4eede4b04e3dc0c27b25"}, {"code": "(fn [& x] (map #(Integer/parseInt (.toString %)) (seq (str (apply * x)))))", "problem": 99, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn [x y] (map (comp read-string str) (str (* x y))))", "problem": 99, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "(fn [x y] (#(if (zero? %1)\n      %2\n      (recur \n        (quot %1 10)               \n        (conj %2 (rem %1 10)))) (* x y) '()))", "problem": 99, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "(fn [a b] (map #(. Character getNumericValue %) (seq (str (* a b)))))", "problem": 99, "user": "4f98b69ae4b0dcca54ed6cf4"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "(fn [a b] \n  (loop [p (* a b)\n         c ()]\n  (let [r (cons (mod p 10) c)]\n    (if (< p 10) r\n      (recur (quot p 10) r)\n    ))))", "problem": 99, "user": "5159849ce4b0394f658fe236"}, {"code": "(fn [a b]\n          (let [prod (* a b)]\n            (loop [accum [] prod prod]\n              (if (zero? prod)\n                accum\n                (recur (concat [(rem prod 10)] accum) (int (/ prod 10)))))))", "problem": 99, "user": "504e0136e4b078edc5f5938e"}, {"code": "(fn [x y] (let [digits (fn [n]\n  (map second\n       (rest\n        (take-while #(not= % [0 0])\n                    (iterate\n                     (fn [[q r]] [(quot q 10) (rem q 10)])\n                     [n 0])))))]\n  (reverse (digits (* x y)))))", "problem": 99, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn [a b] (map #(Integer. (str %1)) (str (* a b))))", "problem": 99, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "#((fn f [a] (if(<= a 10)\n             [(mod a 10)]\n              (concat (f (quot a 10)) [(mod a 10)])\n              )\n   ) \n  \n  (* %1 %2))", "problem": 99, "user": "51aeb1f4e4b09397d5109794"}, {"code": "(comp (partial map (comp read-string str)) str *)", "problem": 99, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn [x y]\n  (loop [in (* x y) res []]\n    (if (= in 0)\n      res\n      (recur (quot in 10) (cons (rem in 10) res)))))", "problem": 99, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "51ab1da1e4b04e3dc0c27b30"}, {"code": "#(map (fn [c] (- (int c) 48)) (seq (str (* % %2))))", "problem": 99, "user": "51bf4560e4b013aa0d74b817"}, {"code": "(fn [x y]\n  (loop [n (* x y)\n         acc '()]\n    (if (zero? n)\n      acc\n      (recur (quot n 10) (conj acc (rem n 10))))))", "problem": 99, "user": "519db0ede4b037b32803f9b9"}, {"code": "(fn split [x y] (->> (str (* x y)) (partition-all 1) (map (partial apply str)) (map #(Integer/parseInt %))))", "problem": 99, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "(fn [x y]\n    (map (comp read-string str) (str (* x y))))", "problem": 99, "user": "50d46d53e4b09cc622d65a69"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "(fn [one two] \n    (loop [num (* one two) ret '()]\n      (if (< num 10) (cons num ret)\n        (recur (int (/ num 10)) (cons (mod num 10) ret)))))", "problem": 99, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn prod-as-seq [x y] \n  (let [xy (* x y)]\n    (map #(.indexOf (apply vector (range 48 58)) (int %)) (seq (str xy)))))", "problem": 99, "user": "51b24defe4b02f8f128bb963"}, {"code": "(fn [y z] (reverse (map #(-> (* y z) (/ (Math/pow 10 %)) Math/floor (mod 10) int) (range (#(-> % Math/log10 int (+ 1)) (* y z))))))", "problem": 99, "user": "519291c1e4b08962174cf74b"}, {"code": "(fn f1\n  ([a b]\n    (f1 (* a b)))\n  ([n]\n    (println n)\n    (if (> 10 n)\n      [n]\n      (conj (f1 (/ (- n (rem n 10)) 10)) (rem n 10)))))", "problem": 99, "user": "50b8e9a4e4b0cba0e598b656"}, {"code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn [& n]\n  (loop [p (apply * n) result nil]\n    (if (< p 10)\n      (cons p result)\n      (recur (quot p 10) (cons (rem p 10) result)))))", "problem": 99, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "51197750e4b057cba170bc99"}, {"code": "(fn [ & args]\n  (map #(Integer/parseInt (str %1)) (seq (str (reduce * args))))\n  )", "problem": 99, "user": "51bec919e4b013aa0d74b800"}, {"code": "(letfn [(pbsixsix [a b] (vec (map #(Integer. %) (drop 1 (clojure.string/split (str (* a b)) #\"\")))))]\npbsixsix)", "problem": 99, "user": "5034b623e4b062bc5d7ae168"}, {"code": "(fn [a b] (apply vector (map #(- (int %) 48) (seq (str (* a b))))))", "problem": 99, "user": "51a3c9cde4b0e77c4ca60bf9"}, {"code": "#(vec (map read-string (re-seq #\"\\d\" (str (* % %2)))))", "problem": 99, "user": "518ad8fce4b06da86c1973c1"}, {"code": "(fn [x y]\n(map #(Integer/parseInt (str %))\n     (reduce conj [] (str (* x y)))))", "problem": 99, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "(fn [x y] (map (comp read-string str) (str (* x y))))", "problem": 99, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn [x y]\n   (loop [rs (* x y) ve []]\n     (if (zero? rs)\n       ve\n       (recur (quot rs 10) (cons (rem rs 10) ve )))))", "problem": 99, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "51c09719e4b0c9c82288293c"}, {"code": "#(map (fn [e] (- (int e) 48)) (seq (str (* % %2))))", "problem": 99, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "#(map (fn [x] (- (int x) (int \\0))) (str (* %1 %2)))", "problem": 99, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn [x y] (map #(- (int %) 48) (apply vector (seq (str (* x y))))))", "problem": 99, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "(comp (partial map #(- (int %) 48)) str *)", "problem": 99, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "problem": 99, "user": "51d10b1fe4b067c36548635e"}, {"code": "(fn p [a b]\n    (let [x (* a b) len (count (str (* a b)))]\n        (map #(rem % 10) (reverse (take len (iterate #(quot % 10) x))))\n    )\n)", "problem": 99, "user": "51d1111ce4b067c36548635f"}, {"code": "(fn foo [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn [a b]\n\t(map #(Character/getNumericValue %) \n     \t (str (* a b))))", "problem": 99, "user": "518a8c4be4b0df82f5685903"}, {"code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "problem": 99, "user": "506cad7de4b0a302964c548e"}, {"code": "#(vec (map read-string (re-seq #\"\\d\" (str (* %1 %2)))))", "problem": 99, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "(fn [x y] (->> (* x y) str vec (map #(- (int %) (int \\0)))))", "problem": 99, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(comp (partial map #(Integer. %)) (partial map str) str *)", "problem": 99, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "(fn pd\n  [a b]\n  (map (comp #(- % 48) int) (str (* a b))))", "problem": 99, "user": "511d6a01e4b022853b0e07a5"}, {"code": "(fn [a b] (map (comp read-string str) (str (* a b))))", "problem": 99, "user": "50bfd849e4b042992946c649"}, {"code": "(fn [n1 n2]\n  (let [char-2-int (fn [c] (Integer/parseInt (str c)))]\n    (map char-2-int (str (* n1 n2)))))", "problem": 99, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "(fn  [a b]\n  (let [f (fn [s] (let [s (drop-while #(= \"\" %1) (clojure.string/split (str s) #\"\"))]\n\t     (map read-string s)))\n\tval (* a b)\n\tret (f val)]\n    ret))", "problem": 99, "user": "4ef9b021535dced4c769f269"}, {"code": "(fn [n1 n2]\n    (map #(Integer/parseInt (str %))\n         (-> (* n1 n2)\n             str\n             seq)))", "problem": 99, "user": "4f91fd31e4b0dcca54ed6ca8"}, {"code": "(fn [a b](map #(Character/digit % 10) (str (* a b))))", "problem": 99, "user": "51c1d159e4b0d204dbe2ca18"}, {"code": "(fn [a b]\n  (letfn [(list-digits [n]\n             (reverse\n                (map #(rem % 10)\n                     (take-while (partial < 0)\n                                 (iterate #(quot % 10) n)))))]\n    (list-digits (* a b))))", "problem": 99, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn [a b] (map #(read-string (str %)) (str (* a b))))", "problem": 99, "user": "51ae350fe4b09397d5109790"}, {"code": "(fn multiply [x y]\n   (let [product (* x y)]\n     (loop [p product num-list '()]\n       (if (zero? p)\n         num-list\n         (recur (quot p 10) (cons (mod p 10) num-list))))))", "problem": 99, "user": "4ede0511535d10e5ff6f5330"}, {"code": "#(->> (* % %2) str (map (comp read-string str)))", "problem": 99, "user": "51c8301ee4b07ef393169e4d"}, {"code": "#((fn r [x] (if (zero? x) [] (conj (r (quot x 10)) (rem x 10)))) (* %1 %2))", "problem": 99, "user": "51e00020e4b01188f0627534"}, {"code": "(fn [a, b]\n   ( let [p (* a b)]\n     ( (fn foo [x]\n         (if (= x 0)\n           []\n           (conj (foo (int (/ x 10)) ) (mod x 10))\n           )\n         ) p)\n     )\n   )", "problem": 99, "user": "51b5a6e0e4b0f094dd986fce"}, {"code": "#(loop [n (* % %2) a []]\n   (if (= 0 n) a\n       (recur (quot n 10)\n              (cons (rem n 10) a))))", "problem": 99, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %))\n       (str (* a b))))", "problem": 99, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [a b]\n\t(map #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "(fn [x y] (->> (* x y) str (re-seq #\"\\d\") (map #(Integer. %)) (apply vector) ))", "problem": 99, "user": "51e3cf8ee4b0efabf93c02a3"}, {"code": "(fn [a b]\n  (loop [n (* a b) result []]\n    (if (= n 0)\n      result\n      (recur (int (/ n 10)) (cons (mod n 10) result))\n      )))", "problem": 99, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn [a b] (->> (* a b) \n                str \n                seq \n                (map str)\n                (map read-string)))", "problem": 99, "user": "51e24a04e4b01e5198146430"}, {"code": "(fn [a b]\n  (letfn [(num2digits [n]\n                      (map read-string (map str (seq (str n)))))]\n    (into [] (num2digits (* a b)))))", "problem": 99, "user": "51e0198ee4b01188f0627539"}, {"code": "(fn [& coll](map #(- (int %) 48) (seq (str (reduce * coll)))))", "problem": 99, "user": "50e90813e4b033b0e80d11e7"}, {"code": "(fn [one two] (loop [x (seq (str (* one two)))\n                     y []]\n                (if (empty? x)\n                  y\n                  (recur (rest x) (conj y (- (int (first x)) 48))))))", "problem": 99, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "#(map (fn [d] (- (int d) (int \\0)))\n      (str (* %1 %2)))", "problem": 99, "user": "51789dfae4b03d69594194d7"}, {"code": "#((fn digits [val acc]\n          (let [d (int (/ val 10))\n                r (rem val 10)]\n            (if (= 0 d)\n              (concat [r] acc)\n              (digits d (concat [r] acc)))))\n        (* % %2) [])", "problem": 99, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn [m n]\n  (map #(read-string (str %)) (str (* m n))))", "problem": 99, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn [& opt]\n    (map #(read-string (str %) ) (str (apply * opt)))\n    )", "problem": 99, "user": "51d9eb05e4b02ceefd947755"}, {"code": "#(loop [l '(), n (* % %2)]\n  (if (> n 0)\n    (recur (conj l (mod n 10)), (int (/ n 10)))\n    l))", "problem": 99, "user": "51eca2ace4b069f463c22cd0"}, {"code": "(comp (partial map #(Integer/parseInt %)) (partial re-seq #\"\\d\") str *)", "problem": 99, "user": "51df825de4b01188f062752b"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "4e3f480c535dc968683fc497"}, {"code": "(fn [a b]\n   (map #(Integer/parseInt (.toString %)) (str (* a b))))", "problem": 99, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "(fn [x y ] \n\t(map #(Integer/parseInt (str %)) (str (* x y)) ))", "problem": 99, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn [a b]\n  (->> (* a b)\n       (str)\n       (map str)\n       (map read-string)))", "problem": 99, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn [one two]\n  (map #(read-string (str %1)) (seq (str (* one two)))))", "problem": 99, "user": "50d882d4e4b01f0871336e69"}, {"code": "(fn [x y] (map (comp read-string str) (str (* x y))))", "problem": 99, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "(fn\n  [a b]\n  (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "(fn [a b]\n   (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "51f2ab8be4b0210f90e74554"}, {"code": "(fn [a b]\n (loop [v (* a b) r []]\n  (if (= 0 v)\n    (reverse r)\n    (recur (int (/ v 10)) (merge r (rem v 10)) )\n   )\n )\n)", "problem": 99, "user": "518aec06e4b06da86c1973c2"}, {"code": "#(map read-string (rest (clojure.string/split (str (* %1 %2)) #\"\")))", "problem": 99, "user": "51f28a64e4b0210f90e7454e"}, {"code": "#(map (fn [x] (Integer. (str x))) (str (* %1 %2)))", "problem": 99, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "(comp (fn [n] (map #(Integer/parseInt (str %)) (seq (str n)))) *)", "problem": 99, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "#(vec (map (partial + -48) (map int (seq (str (* %1 %2))))))", "problem": 99, "user": "4e781a2e535d324fb2983d74"}, {"code": "(fn [x y] (map #(Integer. %) (map str (flatten (partition 1 (str (* x y)))))))", "problem": 99, "user": "51f13b80e4b06a20a2523f38"}, {"code": "#(loop [v (* %1 %2)\n        acc nil]\n   (if (= 0 v)\n     acc\n     (recur (quot v 10) (cons (rem v 10) acc))))", "problem": 99, "user": "5046ee3ee4b03b02161376b4"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "#(map (fn [x] (Character/digit x 10)) (str (* %1 %2)))", "problem": 99, "user": "51fb9d30e4b0f1313d468a0f"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %))  (str (* x y))))", "problem": 99, "user": "5022292ee4b0846bc458ae46"}, {"code": "(fn [n1 n2]\n      (map #(- (int %) (int \\0))\n           (seq (str (* n1 n2)))))", "problem": 99, "user": "4fa3c137e4b081705acca193"}, {"code": "(fn [x y]\n    (map #(Integer. %) (subvec (clojure.string/split  (str (* x y)) #\"\") 1)))", "problem": 99, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn [a b]\n  (let [r (* a b)]\n    (mapv #(read-string (str %)) (str r))))", "problem": 99, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "(fn seqnum [x y]\n  (let [result (* x y)]\n    (map #(-> % str Integer/parseInt) (seq (str result)))))", "problem": 99, "user": "51f82769e4b09be9c177e527"}, {"code": "(fn [a b] \n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4f017b4e535dcb61093f6a37"}, {"code": "(fn [ a b ]\n    (->> (* a b) str (map str) (map read-string)))", "problem": 99, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn [x y] (map #(read-string (str %)) (str (* x y))))", "problem": 99, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn product-digits [a b]\n  (map #(read-string (str %1))\n       (seq (str (* a b)))))", "problem": 99, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "(comp (partial map (comp (partial + -48) int)) vec str *)", "problem": 99, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn [x y]\n  (map \n   #(Character/getNumericValue %)\n   (str (* x y))))", "problem": 99, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [x y] \n  (map #(- (int %) (int \\0)) (seq (str (* x y)))))", "problem": 99, "user": "51897709e4b0288ada3dbdaa"}, {"code": "(fn [x y]\n  (loop [digits '() val (* x y)]\n  (if (> val 0)\n    (recur (conj digits (rem val 10))\n           (/ (- val (rem val 10)) 10))\n    digits)))", "problem": 99, "user": "52069fade4b0bf4f1882c82c"}, {"code": "(fn [a b] (let [ff (fn tf [prod l] (if (< prod 10) (conj l prod) (tf (quot prod 10) (conj l (mod prod 10)))))] (ff (* a b) '())))", "problem": 99, "user": "51f7dd27e4b06ff1c25c52dc"}, {"code": "(fn [a b]\n    (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "5202cfe7e4b030ee0c5b2702"}, {"code": "#(->> (* %1 %2) str vec (map (fn [x] (- (int x) 48))))", "problem": 99, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "(fn [x y] (->> (* x y) str (map #(- (int %) 48))))", "problem": 99, "user": "4dbe8729535d020aff1edf62"}, {"code": "(fn [& n] (map #(- (int (first %)) 48) (partition 1 (str (apply * n)))))", "problem": 99, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "(fn [a b]\n  (let\n    [f (fn [s]\n         (if (empty? s) nil (read-string s)))]\n  (rest (map f (.split (.toString (* a b)) \"\")))))", "problem": 99, "user": "52091d57e4b0e152394d76f0"}, {"code": "(fn il [n m]\n  (loop [i (* n m) l '()]\n    (if (< (quot i 10) 1)\n      (conj l i)\n      (recur (quot i 10) (conj l (rem i 10))))))", "problem": 99, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "(fn prod-digits [n1 n2]\n  (map #(- (int %) (int \\0)) (str (* n1 n2))))", "problem": 99, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "(fn [a b]\n      (let [lookup (apply hash-map (interleave \"0123456789\" (range)))]\n        (->> (* a b) str seq (map lookup)) ))", "problem": 99, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "(fn [x y] \n  (let [digits\n        (fn [n] (map #(Character/digit % 10) (str n)))]\n    (digits (* x y))))", "problem": 99, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "problem": 99, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "(fn [x y]\n  (reverse (map \n            #(rem (quot (* x y) %) 10)\n            (take-while #(>= (* x y) %) (iterate #(* 10 %) 1)))))", "problem": 99, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn [x y] (vec (map #(Integer/parseInt %)(rest (clojure.string/split (str (* x y)) #\"\")))))", "problem": 99, "user": "52016690e4b0b2e020a18f0f"}, {"code": "#(map (fn [x] (Integer/parseInt (str x))) (seq (str (* % %2))))", "problem": 99, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "#(loop [x (* %1 %2) r '()] (if (= x 0) r (recur (quot x 10) (conj r (rem x 10)))) )", "problem": 99, "user": "5208a3a2e4b0301979a6c235"}, {"code": "(fn prod-digit\n  [a b]\n  (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "51fa7154e4b0f1313d4689da"}, {"code": "#(reverse\n  ((fn f [x]\n      (if (< x 10)\n          [x]\n          (let [a (-> x (/ 10) int)\n                next (- x (* 10 a))]\n            (cons next (seq (f a)))))) (apply * %&)))", "problem": 99, "user": "51db1abae4b094966a2cd685"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))\n\n;(fn [x y] (map #(Integer/parseInt (.toString %)) (flatten (partition 1 (str (* x y))))))", "problem": 99, "user": "51d11f5de4b067c365486360"}, {"code": "(fn [x y] \n  (map (comp #(- % (int \\0)) int) \n       (str (* x y))))", "problem": 99, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn [x y]\n\t(let [sum (* x y)]\n\t\t(map #(- (int %) (int \\0)) (-> sum str seq))))", "problem": 99, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn [x y]\n  ((fn digitify [val]\n    (if (= val 0)\n      []\n      (conj\n       (digitify (quot val 10))\n       (mod val 10)))) (* x y)))", "problem": 99, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn [y z] (map #(. Integer parseInt (str %)) (str (* y z))))", "problem": 99, "user": "5080a697e4b01a93d3f38e49"}, {"code": "(fn [m n]\n\t  (let [digits (fn f [n]\n\t\t\t   (cond (< n 10) (vec (list n))\n\t\t\t\t :else (conj (f (quot n 10)) (rem n 10))\n\t\t\t\t )\n\t\t\t   )] (digits (* m n))))", "problem": 99, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn [a b] (map #(Integer/parseInt %) (map str (seq (str (* a b))))))", "problem": 99, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "(fn [a b]\n  (reverse (map #(mod % 10) \n                (take-while pos? \n                            (iterate #(quot % 10) \n                                     (* a b))))))", "problem": 99, "user": "5025b93ce4b0c969f0b056df"}, {"code": "(fn [x1 x2]\n  (map #(- (int %) 48) (seq (.toString (* x1 x2)))))", "problem": 99, "user": "51f40975e4b0fca5e8b4822e"}, {"code": "#(loop [r (* %1 %2) a ()]\n   (if (= 0 r) a\n     (recur (int (/ r 10)) (cons (mod r 10) a))))", "problem": 99, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "(fn digits [a b]\n  (->> (* a b)\n       (repeat 2)\n       (iterate (fn chop [[_ pool]]\n                  [(rem pool 10) (quot pool 10)]))\n       (take-while #(not (every? zero? %)))\n       (rest)\n       (map first)\n       (reverse)))", "problem": 99, "user": "51f9527fe4b09be9c177e549"}, {"code": "(fn [n1 n2]\n  (vec (map #(Integer/parseInt %) (map str (seq (str(* n1 n2)))) )))", "problem": 99, "user": "521b7333e4b0c4ef0be83042"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "5151c184e4b03e678e393add"}, {"code": "(fn [x y] (vec (map #(Integer/parseInt (str %)) (str (* x y)))))", "problem": 99, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn[a b]\n  (map #(- (int %) (int \\0)) (seq (str (* a b))))\n  )", "problem": 99, "user": "52196842e4b0890f2f822bfa"}, {"code": "#(map (fn [x] (Integer/parseInt x)) (map str (str (* %1 %2))))", "problem": 99, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn [x y] (map #(read-string (str %)) (vec (str (* x y)))))", "problem": 99, "user": "5174ade2e4b07031762f2edf"}, {"code": "(fn digit [a b]\n  (map #(- (int %) (int \\0)) (str (* a b)))\n  )", "problem": 99, "user": "513fab65e4b00f13ea1bd891"}, {"code": "#(map (comp (partial + -48) int) (seq (str (* %1 %2))))", "problem": 99, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %))\n  (seq (str (* a b)))))", "problem": 99, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "problem": 99, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn [x y]\n  (let [s (* x y)]\n    (map (fn [a] (- (int a) 48)) (seq (str s)))))", "problem": 99, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn [x y]\n  (->> (* x y)\n       (str)\n       (re-seq #\"\\d\")\n       (map read-string)))", "problem": 99, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "#(loop [n (* %1 %2) s []] (if (pos? n) (recur (quot n 10) (cons (mod n 10) s)) s))", "problem": 99, "user": "521e8227e4b0dd19981ad082"}, {"code": "#(letfn [(pd [num]\n        (loop [n num acc []]\n          (if (== n 0)\n            (vec acc)\n            (recur (quot n 10) (cons (rem n 10) acc)))))]\n  (pd (* %1 %2)))", "problem": 99, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "(fn [a b]\n  (loop [r ()\n         v (* a b)]\n    (if (> v 0)\n      (recur (conj r (mod v 10))\n             (quot v 10))\n      r)))", "problem": 99, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "#(map (comp read-string str) (seq (str (* % %2))))", "problem": 99, "user": "5216933be4b000d124d989cf"}, {"code": "(fn p99a [& x]\n  (loop [n (reduce *' x)\n         v []]\n    (if (> n 0)\n      (recur (/ (- n (mod n 10)) 10) (cons (mod n 10) v))\n      v)))", "problem": 99, "user": "519c4111e4b0a1d87b003458"}, {"code": "(fn [n1 n2] (map read-string (map str (str (* n1 n2)))))", "problem": 99, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "(fn explode-to-digits [n1 n2]\n  \n        (map #(- (int %) (int \\0)) (str (* n1 n2))))", "problem": 99, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "(fn [a b] (map read-string (rest (clojure.string/split (str (* a b))  #\"\"))))", "problem": 99, "user": "5065faf9e4b0313a384e5645"}, {"code": "(comp (partial map #(Integer/parseInt %)) (partial map str) str *)", "problem": 99, "user": "51e61772e4b0efabf93c02e2"}, {"code": "(fn [x y]\n  (let [res (* x y)\n        res (str res)]\n    (map #(- (int %) (int \\0)) res)))", "problem": 99, "user": "5224a46ce4b01819a2de42e5"}, {"code": "#(map (comp read-string str) (char-array (str (* %1 %2))))", "problem": 99, "user": "51f79238e4b06ff1c25c52d7"}, {"code": "(fn [a b]\n  (let [c (* a b)]\n    (reverse (map #(mod % 10) (take-while #(not (zero? %))(iterate #(quot % 10) c))))))", "problem": 99, "user": "5225a0f5e4b01819a2de430e"}, {"code": "(fn [x y] \n  (map #(Integer/parseInt (Character/toString %1)) (vec (Integer/toString (* x y))))\n  )", "problem": 99, "user": "51fc44c5e4b0f1313d468a1b"}, {"code": "#(for [x (str (* % %2))] (- (int x) 48))", "problem": 99, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(fn [x y]\n  (loop [result [] prod (* x y)]\n    (if (< prod 10)\n      (reverse (conj result (mod prod 10)))\n      (recur (conj result (mod prod 10)) (quot prod 10)))))", "problem": 99, "user": "51857e64e4b0da5a5be3babe"}, {"code": "#(map read-string (rest (clojure.string/split (str (* % %2)) #\"\")))", "problem": 99, "user": "521dceeae4b050d5da042802"}, {"code": "#(reverse (loop [n (* % %2) r []]\n    (if (> n 10)\n      (recur (quot n 10) (conj r (mod n 10)))\n      (conj r n))))", "problem": 99, "user": "522454f4e4b01819a2de42d3"}, {"code": "#(vec (map  (fn [num] (Character/getNumericValue num)) (str (* %1 %2))))", "problem": 99, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "(fn [x y] (let [n (* x y)] (loop [r '() x n] (if (= 0 x) r (recur (conj r (mod x 10)) (quot x 10))))))", "problem": 99, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "(fn [x y] \n (map read-string (rest (clojure.string/split (str (* x y)) #\"\"))))", "problem": 99, "user": "520f46f9e4b0101e4be6fcee"}, {"code": "(fn [a b] (map #(java.lang.Integer/parseInt (str %)) (vec (str (* a b)))))", "problem": 99, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "(fn digit-product\n  [a b]\n  (map (comp read-string str) (seq (str (* a b)))))", "problem": 99, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn [a b] (mapv read-string (map str (str (* a b)))))", "problem": 99, "user": "515ead6be4b049add99a053e"}, {"code": "#(map (fn [x] (- (int x) (int \\0))) (vec (str (* %1 %2))))", "problem": 99, "user": "522f988be4b032bbe3424168"}, {"code": "(fn [a b]\n  (loop [c (* a b) d []]\n    (if (> 1 c)\n      d\n      (recur (int (/ c 10)) (cons (mod c 10) d)))))", "problem": 99, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "51a91ac2e4b08d8ec191b822"}, {"code": "(fn myr [x y]\n  (\n    (fn [l r] \n      (if (zero? r)\n        l\n        (recur (conj l (mod r 10)) (int (/ r 10)))              \n      ))\n   '() (* x y)\n  ))", "problem": 99, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "(fn [x y] (reverse (loop [t (* x y) r []] (if (= 0 t) r (recur (int(/ t 10)) (conj r (mod t 10)))))))", "problem": 99, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "5131d817e4b06942423563ca"}, {"code": "(fn [x y] (lazy-seq (loop [d () n (* x y)] (if (< n 10) (conj d n) (recur (conj d (mod n 10)) (quot n 10))))))", "problem": 99, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn[x y]\n   (->> (* x y)\n       (.toString)\n       (seq)\n       (map str)\n       (map #(Integer. %))\n       ))", "problem": 99, "user": "506c0a02e4b0eda3100c090d"}, {"code": "(fn [a b]\n   (map #(Integer/parseInt %) (map str (seq (str (* a b))))))", "problem": 99, "user": "516282c3e4b0e6d3c4734711"}, {"code": "#(vec (map (partial + -48) (map int (vec (str (* %1 %2))))))", "problem": 99, "user": "52271ffee4b04e78ff2e19a9"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn [& nums]\n  (loop [num (apply * nums)\n         coll []]\n    (let [digit (mod num 10)\n          rem (quot num 10)]\n      (if (= rem 0)\n        (cons digit coll)\n        (recur rem (cons digit coll))))))", "problem": 99, "user": "50270618e4b01614d1633feb"}, {"code": "(fn [& args]\n  (let [parse-int (fn [s] (Integer/parseInt (str s)))]\n    (map parse-int (str (apply * args)))))", "problem": 99, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn prodigits [a b]\n  (let [product     (* a b)\n        char-to-int (zipmap \"0123456789\" (range 10))]\n    (map char-to-int (str product))))", "problem": 99, "user": "508923d5e4b06d8254e936e8"}, {"code": "#(map (comp read-string str)\n      (-> (* % %2) str seq))", "problem": 99, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "(fn [x y] (map (comp #(Integer/valueOf %) str) (seq (str (* x y)))))", "problem": 99, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "(fn [a b]\n  (map #(Character/digit % 10) (str (* a b))))", "problem": 99, "user": "508fd6bae4b0ea685a20f76b"}, {"code": "(fn [a b]\n  (let [digits (fn digits [n]\n                 (if (zero? n) [] (conj (digits (quot n 10)) (mod n 10))))]\n       (digits (* a b))))", "problem": 99, "user": "516abecae4b081287f204e9f"}, {"code": "(fn [n m]\n  (loop [x (* n m) result '()]\n    (if (< x 10)\n      (conj result x)\n      (recur (int (/ x 10)) (conj result (rem x 10))))))", "problem": 99, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn [x y]\n   (let [sq (str (* x y))]\n     (vec (map #(Character/getNumericValue %) sq))))", "problem": 99, "user": "523bd9c0e4b07becd5be2201"}, {"code": "(fn [o t] (map #(Integer/parseInt (str %)) (seq (str (* o t)))))", "problem": 99, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn [x y]\n  (\n   (fn hey [n result]\n     (println n result)\n     (if (= 0 n) result\n       (hey (quot n 10) (apply conj [] (rem n 10) result))\n       )\n     )\n   (* x y)\n   []\n   )\n  )", "problem": 99, "user": "523bc0e6e4b07becd5be21f9"}, {"code": "(fn [x y] (map #(read-string (str %1)) (str (* x y))))", "problem": 99, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn digits-vector [a b]\n  (map (comp read-string str ) (seq (str (* a b)))))", "problem": 99, "user": "523b10dfe4b02f719975bdb8"}, {"code": "(fn [n1 n2] (map #(- (int %) (int \\0)) (seq (str (* n1 n2)))))", "problem": 99, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn [x y] (map #(. Integer (parseInt (str %))) (str (* x y))))", "problem": 99, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn [a b]  (map #(Integer. (str %)) (vec (str (* a b)))))", "problem": 99, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn [x y]\n\t   (->> (* x y)\n\t\t(iterate #(quot % 10))\n\t\t(take-while (complement zero?))\n\t\t(map #(rem % 10))\n\t\treverse))", "problem": 99, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "5213348ae4b0d32679a50652"}, {"code": "(fn [x y] (-> (* x y) str seq (#(map (fn [x] (Integer. (str x))) %))))", "problem": 99, "user": "4f048f67535dcb61093f6bd3"}, {"code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "51e28063e4b08e53a149f0f2"}, {"code": "(fn tp [& args]\n  (let [product (reduce * args)]\n   (reverse (map #(rem % 10) (take-while #(> % 0) \n                (iterate #(quot % 10) product))))))", "problem": 99, "user": "524025bce4b0ad64fa01030f"}, {"code": "(fn digits [x y]\n  (vec (map #(Integer. (str %1)) (str (* x y)))))", "problem": 99, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [a b]\n  (let [res (str (* a b))]\n    (map #(- (int %) 48) res)))", "problem": 99, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [n1 n2] (#(flatten (for [ds (seq (str %))] [(- (int ds) 48)])) (* n1 n2)))", "problem": 99, "user": "51cfc616e4b0e42293a22578"}, {"code": "(fn prodigi [a b]\n  (loop [n (* a b)\n         res '()]\n    (if (< n 1)\n      (vec res)\n      (do \n        (println n res)\n        (recur (quot n 10) \n               (conj res (mod n 10))\n               )   \n        )   \n      )   \n    )   \n  )", "problem": 99, "user": "5228f870e4b0186687e23a98"}, {"code": "(fn [x y] \n  (let [f (fn digits [n] \n              (let [q (quot n 10) \n\t\t\t        r (mod n 10)] \n\t\t\t\t\t(if (pos? q)\n\t\t\t\t\t\t(cons r (lazy-seq (digits q)))\n\t\t\t\t\t\t(list r))))\n        p (* x y)]\n\t\t(reverse (f p))))", "problem": 99, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn [a b]\n   (into [] (map #(read-string (str %))  (str (* a b))))\n   )", "problem": 99, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn [a b] (map read-string (re-seq #\".\" (str (* a b)))))", "problem": 99, "user": "50293245e4b08353e5d459cf"}, {"code": "#(map (fn [x] (read-string (str x))) (seq (str (* %1 %2))))", "problem": 99, "user": "523288fee4b035af41902a88"}, {"code": "(fn [x y]\n  (loop [s []\n         n (* x y)]\n    (if (< n 10)\n      (cons n s)\n      (recur (cons (rem n 10) s) (quot n 10)))))", "problem": 99, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn [a b] \n  (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "#(map (fn [s] (Integer/parseInt (str s))) (str (* % %2)))", "problem": 99, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn num-seq [x y]\n  (->> (str (* x y)) (map #(Integer. (str %)))))", "problem": 99, "user": "523b82efe4b07becd5be21f0"}, {"code": "(fn [a b] \n  (map\n\t#(mod % 10)\n    (reverse\n      (take-while\n        #(not= % 0)\n        (iterate\n          #(quot % 10)\n          (* a b))))))", "problem": 99, "user": "4f43894ee4b0d7d3c9f3fd21"}, {"code": "(fn [x y] (map #(Long. (str %)) (str (* x y))))", "problem": 99, "user": "510c123be4b078ea7192110e"}, {"code": "(fn [x y]\n  (reverse (map #(mod % 10) (take-while #(>= % 1) (iterate #(quot % 10) (* x y))))))", "problem": 99, "user": "525078b6e4b0541d1855b832"}, {"code": "(comp (partial map #(- (int %) (int \\0))) str *)", "problem": 99, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn [x y] \n  (loop [p (* x y) ac '()] \n    (if (zero? p) \n      ac \n      (recur (quot p 10) (conj ac (mod p 10))))))", "problem": 99, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "(fn [x y]\n  (loop [r () n (* x y)]\n    (if (zero? n) r\n      (recur (conj r (rem n 10)) (quot n 10)))))", "problem": 99, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn [n m] (map (fn [c] (Character/getNumericValue c)) (str (* n m))))", "problem": 99, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "#(map read-string\n      (map str\n           (vec (str (* %1 %2)))))", "problem": 99, "user": "52527192e4b0541d1855b8af"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "(fn [a b]\n  ((fn digits [x]\n     (if (= x 0)\n       []\n       (conj (digits (quot x 10)) (rem x 10))\n       )\n     ) (* a b)\n   )\n  )", "problem": 99, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn [n1 n2]\n (map #(Character/getNumericValue %) (str (* n1 n2)))\n)", "problem": 99, "user": "5029f263e4b023940c84aa45"}, {"code": "#(letfn [(digits [n] \n                 (loop [acc [] x n] \n                   (if (< x 1) \n                     acc \n                     (recur (conj acc (mod x 10)) \n                            (int (/ x 10))))))]\n   (reverse (digits (* %1 %2))))", "problem": 99, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "(fn [x y] (->> (str (* x y))\n\t       (map #(- (int %) 48))\n\t       (vec)))", "problem": 99, "user": "5248c4c7e4b05ef8e38e63e8"}, {"code": "(fn [x y]\n\t(\n     \tmap #(- (int %) 48) (into [] (str (* x y)))\n    )\n)", "problem": 99, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "#(loop [x (* %2 %1) s '()]\n   (if (zero? x) s\n   (recur \n    (quot x 10) (conj s (rem x 10))\n   )\n     )\n)", "problem": 99, "user": "5259a16ee4b0cb4875a45ce1"}, {"code": "#( letfn[( ff [x seq] ( if (= x 0) seq ( ff (quot x 10) (cons (rem x 10 ) seq ) ) ) ) ] \n   (\n      ff (* %1 %2) '()\n   ) \n )", "problem": 99, "user": "515919fbe4b0394f658fe229"}, {"code": "(fn [o o1] (vec (map #(Integer. (.toString %)) (seq (char-array (.toString (* o o1)))))))", "problem": 99, "user": "5082ccb3e4b06a522e8c7af3"}, {"code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "(fn [a b] (into [] (map (fn [n] (Integer/parseInt (str n))) (seq (str (* a b))))))", "problem": 99, "user": "51622fb8e4b009fba0926e3f"}, {"code": "#((fn [n] (map (fn [x] (Integer/parseInt (str x))) (seq (str n)))) (* % %2))", "problem": 99, "user": "524dd1c3e4b0f245900d275c"}, {"code": "#(map (comp (fn [x] (- x (int \\0))) int) (seq (str (* %1 %2)) ))", "problem": 99, "user": "525bcae9e4b0cb4875a45d30"}, {"code": "(fn prod-digits \n  ([x y] (prod-digits (* x y)))\n  ([prod] (cond\n           (< prod 10) [prod]\n           :else (conj (prod-digits (int (/ prod 10))) (int (mod prod 10)))\n           ))\n  )", "problem": 99, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "#(map read-string (rest (clojure.string/split (str (* % %2)) #\"\")))", "problem": 99, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn [a b]\n  ((fn [ret m]\n     (if (= m 0)\n       (reverse ret)\n       (recur (conj ret (rem m 10)) (quot m 10))))\n   [] (* a b)))", "problem": 99, "user": "521392bce4b0d32679a5065e"}, {"code": "(fn [n1 n2] (map #(Integer. %) (map str (seq (str (* n1 n2))))))", "problem": 99, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(fn [a b]\n   (loop [v (* a b)\n          result []]\n     (let [m (mod v 10)]\n       (if (zero? v)\n         result\n         (recur (/ (- v m) 10) (cons m result))))))", "problem": 99, "user": "52090567e4b0e152394d76ed"}, {"code": "#(let [product (* %1 %2)] (loop [result [] x product] (if (zero? x) result (recur (cons (mod x 10) result) (quot x 10)))))", "problem": 99, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn f[a b] (map read-string (rest (clojure.string/split (str (* a b)) #\"\"))))", "problem": 99, "user": "51f2851fe4b0210f90e7454b"}, {"code": "(fn\n  [one two]\n  (map #(Character/digit % 10) (seq (str (* one two)))))", "problem": 99, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "(fn\n  [a1 a2]\n  (let [prod (* a1 a2)\n        ceil (-> prod Math/log10 Math/floor int inc)\n        powers-of-10 (take ceil (iterate (partial * 10) 1))\n        digits (map (fn [pow] (rem (quot prod pow) 10)) powers-of-10)]\n    (reverse digits)))", "problem": 99, "user": "4ef7a483535dced4c769f258"}, {"code": "(fn [x y]\n  (let [to-digits (fn to-digits [n digits]\n               (if (zero? n)\n                 digits\n                 (to-digits (quot n 10) (cons (rem n 10) digits))))]\n    (to-digits (* x y) nil)))", "problem": 99, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "#(\n  (fn self [n xs]\n    (if (= n 0) xs\n      (self (quot n 10) (cons (mod n 10) xs))))\n  (* %1 %2) ())", "problem": 99, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn [a b]\n  (loop [i (* a b) s '()]\n(if (= i 0)\ns\n(recur (int (/ i 10)) (conj s (mod i 10))))\n)\n)", "problem": 99, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn [x1 x2] (map #(- (int %) 48) (str (* x1 x2))))", "problem": 99, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "(fn [a b] (map  (comp #(Integer/parseInt %) str)  (str (* a b))))", "problem": 99, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": "(fn [n1 n2] (map (fn [c] (Integer/parseInt (str c))) (.toString (* n1 n2))))", "problem": 99, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "525431dfe4b0541d1855b970"}, {"code": "(fn [a b] (map #(Integer. (str %)) (str (* a b))))", "problem": 99, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn prodDigits [x y]\n  (map \n    #(Long. %)\n    (re-seq #\"\\d\" (str (* x y)))))", "problem": 99, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn [a b]\n  (->> (* a b)\n       str\n       vec\n       (map str)\n       (map #(Integer/parseInt %))))", "problem": 99, "user": "4fad33e8e4b081705acca236"}, {"code": "(fn product-digits [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [& xs] (->> xs (apply *) str seq (map #(read-string (str %)))))", "problem": 99, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn [x y] (->> (* x y) (iterate #(quot % 10)) (take-while #(< 0 %)) (map #(mod % 10)) (reverse)))", "problem": 99, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn [a b]\n  (->> (* a b) (.toString) (map #(.toString %)) (map #(Integer/valueOf %))))", "problem": 99, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn [& xs] (map (fn [y] (- (.hashCode y) 48)) (-> (apply * xs) str char-array)))", "problem": 99, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [a b] (map #(Integer/parseInt %) (filter #(not (clojure.string/blank? %)) (clojure.string/split (str (* a b)) #\"\"))))", "problem": 99, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn digits [a b] (let [num (* a b)] (if (= num 0) [] (conj (digits 1 (int (/ num 10))) (mod num 10)))))", "problem": 99, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "#(map read-string (map str (seq (str (* % %2)))))", "problem": 99, "user": "52727d52e4b03e8d9a4a7439"}, {"code": "(fn k[i j] \n  (reverse\n   ((fn cc[x]\n      (if (> x 0)\n        (lazy-seq (cons (mod x 10) (cc (int (/ x 10))))))) (* i j)\n    )))", "problem": 99, "user": "523eb110e4b057c4b7cd0a67"}, {"code": "(fn [x y] (let [p (* x y)\n                g (fn [result n]\n                    (if (= 0 n)\n                      result\n                      (recur (cons (rem n 10) result) (quot n 10))\n                    )\n                  )\n                ]\n            (g [] p))\n)", "problem": 99, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "#(map (fn [x] (Integer/parseInt x)) (re-seq #\"\\d\" (str (* % %2))))", "problem": 99, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn [a b]\n  (map - (map int (str (* a b))) (repeat (int \\0))))", "problem": 99, "user": "523c6451e4b07becd5be2222"}, {"code": "(fn [x y] (vec (map #(- (int %) 48) (seq (str (* x y))))))", "problem": 99, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "#(map (fn [x] (- x (int \\0))) (map int (seq (str (* %1 %2)))))", "problem": 99, "user": "5243635ce4b076204b44fab8"}, {"code": "(fn [a b] (into [] (map #(Integer/parseInt %) (re-seq #\"\\d\" (str (* a b))))))", "problem": 99, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn [x y] (map #(Integer. (.toString %)) (str (* x y))))", "problem": 99, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn a [x y] (loop [r (* x y) o []] (if(zero? r)(identity o)(recur (quot r 10) (cons (mod r 10) o)))))", "problem": 99, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "#(map (fn[c] (java.lang.Integer/parseInt (str c))) (vec (str (* %1 %2))))", "problem": 99, "user": "5220909fe4b0e6a83c89259f"}, {"code": "#(map (comp read-string str) (into [] (str (* % %2))))", "problem": 99, "user": "5260341ee4b03e8d9a4a7034"}, {"code": "(fn [x y] (map #(read-string (str %)) (str (* x y))))", "problem": 99, "user": "527818f7e4b03e8d9a4a7519"}, {"code": "#(loop [s (* % %2) r ()]                     \n    (if (> s 0)                              \n      (recur (quot s 10) (conj r (rem s 10)))\n      r ) )", "problem": 99, "user": "4df20dda535d08e6dec9fe23"}, {"code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "problem": 99, "user": "51f4d46ee4b0fca5e8b48243"}, {"code": "(fn [a b]\n  (letfn [\n          (digits [nr] \n                  (loop [digits [] n nr]\n                    (if (zero? n)\n                      digits\n                      (recur (cons (rem n 10) digits) (int (/ n 10)))\n                    )\n                  ))\n          ]\n          (digits (* a b))\n                    ))", "problem": 99, "user": "522d3a16e4b0e26240291d50"}, {"code": "(fn product-digits [a b]\n (letfn [(iter[x radix]\n   (if(< x  radix)\n     [x]\n     ( conj  (iter (quot x radix) radix) (rem x radix))))]\n (iter (* a b) 10)))", "problem": 99, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn [x y] \n  (vec \n   (map \n    (fn [n] (- (int n) 48))\n    (str (* x y)))))", "problem": 99, "user": "4e920f44535dbda64a6f6afd"}, {"code": "#(for [x (str (* % %2))] (Integer/parseInt (str x)))", "problem": 99, "user": "4ee85476535d93acb0a6687c"}, {"code": "(fn [x y] \n    (loop [c (* x y) acc ()] \n      (if (zero? c) \n        acc\n        (recur (quot c 10) (cons (rem c 10) acc)))))", "problem": 99, "user": "527675cbe4b03e8d9a4a74e2"}, {"code": "(fn [x y] (map #(Long/valueOf (str %)) (str (* x y))))", "problem": 99, "user": "51e38568e4b0c611d6113e43"}, {"code": "#(map (fn [c] (- (int c) (int \\0))) (str (* % %2)))", "problem": 99, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn[a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "(fn [x y] ((fn vektoroi [n] (if (empty? n) '[] (conj (vektoroi (butlast\nn)) (Integer/parseInt (String/valueOf (last n)))))) (str (* x y))))", "problem": 99, "user": "52474ec2e4b05ef8e38e6361"}, {"code": "(fn [x y]\n  (let [z (* x y) res []] \n    (loop [z z res res]\n      (if (<= z 0)\n      res\n      (recur (int (/ z 10)) (-> z (mod 10) (cons res)))\n        )\n      )\n    )\n   )", "problem": 99, "user": "528196e2e4b0757a1b171437"}, {"code": "#(loop [ n (* % %2) r []] (if \n                       (> n 0)\n                       (recur ((comp int /) n 10) (cons ((comp int rem) n 10) r))\n                       r))", "problem": 99, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "#(map read-string (re-seq #\".\" (str (* % %2))))", "problem": 99, "user": "519ef784e4b087743fad2198"}, {"code": "#(map read-string (re-seq #\"\\d\" (str (* % %2))))", "problem": 99, "user": "51aefceee4b09397d5109797"}, {"code": "(fn mulsplit [a b] ( map #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "problem": 99, "user": "522a01ade4b0590a43906ced"}, {"code": "(fn [x y]  ((fn test [a] (if (= a 0) [] (conj (test (quot a 10)) (rem a 10)))) (* x y)))", "problem": 99, "user": "52810225e4b0757a1b171418"}, {"code": "(fn [& xs] \n  (map #(- (int %) 48) (seq (str (reduce * xs)))))", "problem": 99, "user": "52890634e4b0239c8a67ae5e"}, {"code": "(fn prod-digits [x y]\n  (let [prod (* x y)\n        s (str prod)]\n    (map #(Integer. (str %)) s)))", "problem": 99, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn [& args ]\n    (vec (map #(Integer/parseInt (str %)) (vec (str (apply * args))))))", "problem": 99, "user": "52737333e4b03e8d9a4a747f"}, {"code": "(fn [& args] \n  (map #(- (int %) 48) (str (apply * args))))", "problem": 99, "user": "4ea5ba92535d7eef308072d9"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "528bba38e4b0239c8a67aea9"}, {"code": "(fn [& cc] (mapv #(- (int %) 48) (str (apply * cc))))", "problem": 99, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn num-to-list [n1 n2]\n  (loop [num (* n1 n2) acc []]\n    (if (< num 10)\n      (cons num acc)\n \t  (recur (quot num 10) (cons (rem num 10) acc)))))", "problem": 99, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn [x y]  (map #(Integer. (re-find  #\"\\d+\" (str %) )) (str (* x y))))", "problem": 99, "user": "4f80db02e4b033992c121bf9"}, {"code": "(fn [x y] (map #(read-string (str %)) (str (* x y))))", "problem": 99, "user": "5290257ae4b0239c8a67af03"}, {"code": "(fn [x y]\n   (map (fn [x]\n          (- (int x) 48)\n          ) (str (* x y)))\n   )", "problem": 99, "user": "528ce039e4b0239c8a67aebc"}, {"code": "#(map (fn [x] (-> x str Integer/parseInt)) (str (* % %2)))", "problem": 99, "user": "528d1094e4b0239c8a67aebe"}, {"code": "#(map read-string (map str (seq (str (* %1 %2)))))", "problem": 99, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "(let [split (fn split [x]\n    \t\t (let [div10 (int (/ x 10))]\n         \t\t  (if (> div10 0)\n             \t\t  (conj (split (int (/ x 10))) (rem x 10))\n             \t\t  [x])))]\n  (fn [x y] (split (* x y))))", "problem": 99, "user": "52957fa8e4b02ebb4ef75025"}, {"code": "(comp (partial map read-string) (partial map str) str *)", "problem": 99, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "#(map (fn [x] (- x 48)) (map int (vec (apply str (vector (* % %2))))))", "problem": 99, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "(fn [a b]\n  (map #(read-string (str %)) (str (* a b))))", "problem": 99, "user": "50294c28e4b0b33e9bf6fdef"}, {"code": "(fn [x y] (vec (map #(java.lang.Integer/parseInt (str %)) (str (* x y)) )))", "problem": 99, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "#(map (comp read-string str) (seq (str (* %1 %2))))", "problem": 99, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn [& args] (map (comp read-string str) (str (apply * args))))", "problem": 99, "user": "528a791ae4b0239c8a67ae77"}, {"code": "(fn digits [i j] (reverse ((fn remnumlist [x  y] (if (= x (rem x y))\n                             (list (/ (rem x y) (/ y 10)))\n                            (conj (remnumlist (- x (rem x y)) (* y 10)) (/ (rem x y) (/ y 10))))) (* i j) 10)))", "problem": 99, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "(fn [& args]\n   (->> args \n        (apply *)\n        (str)\n        (map #(Integer. (str %)))))", "problem": 99, "user": "50377d53e4b0af0658af77ad"}, {"code": "(fn aa [x y] (map #(Integer/parseInt %) (next (clojure.string/split (str (* x y)) #\"\"))))", "problem": 99, "user": "50fe2420e4b03cd852b4e84a"}, {"code": "(fn pdig [x y]\n  (let [digs\n        (fn digs [x]\n          (if (= x 0) []\n              (conj (digs (quot x 10)) (mod x 10))))]\n    (digs (* x y))))", "problem": 99, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "51c214bce4b0d204dbe2ca1c"}, {"code": "(fn [x y]\n   (map #(Integer/parseInt (str %1)) (str\n    (* x y))))", "problem": 99, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "#(map (fn [c] (- (int c) 48)) (str (* %%2)))", "problem": 99, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn [a b]\n  (for [c (str (* a b))] (Integer/parseInt (str c))))", "problem": 99, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "(fn [d e]\n  (map (comp read-string str) (str (* d e))))", "problem": 99, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "#(loop [val (* %1 %2) result '[] ]\n\t       (if (zero? val)\n\t            result\n\t           (recur (quot val 10) (cons (mod val 10) result ))\n ))", "problem": 99, "user": "5290ffaee4b0239c8a67af10"}, {"code": "#(map (fn [c] (- (int c) 48)) (seq (str (* %1 %2))))", "problem": 99, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn [a b] \n  (let [p (* a b)] \n    (#(if (<= %2 0) %1 \n        (recur (conj %1 (mod %2 10)) (int (/ %2 10)))) '() p)))", "problem": 99, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn pd [a b] (mapv #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn [x y]\n  (map (comp read-string str) (str (* x y))))", "problem": 99, "user": "4f0f36a7535d0136e6c22336"}, {"code": "#(map read-string (re-seq #\".\" (str (* %1 %2))))", "problem": 99, "user": "51929214e4b08962174cf74c"}, {"code": "#(map bigint (map str (str (* % %2))))", "problem": 99, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn [a b]\n  (let [res (* a b)]\n    (loop [curr res\n           out []]\n      (if (< curr 10)\n        (reverse (conj out curr))\n        ;else\n        (recur (quot curr 10) (conj out (mod curr 10)))))))", "problem": 99, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn [x y]\n  (for [a (str (* x y))] (Integer/valueOf (str a))))", "problem": 99, "user": "4f16d3fd535d64f60314644e"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (into [] (str (* a b )))))", "problem": 99, "user": "52a28e1ce4b04e0c58e87bf0"}, {"code": "(fn [n m]\n  (map (comp #(- % 48) int)\n       (apply vector (str (* n m)))))", "problem": 99, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "528652fbe4b0239c8a67ae14"}, {"code": "#(let [n (* %1 %2)]\n   (loop [n n\n          coll []]\n     (if (zero? n)\n       (reverse coll)\n      (recur (quot n 10) (conj coll (rem n 10))))))", "problem": 99, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "(fn [x y]\n  (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "(fn [x y] \n  (map #(Integer. %)\n       (re-seq #\"\\d\" (str (* x y)))\n  )\n)", "problem": 99, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn mult-digits[x y](map #(Integer. (str %)) (seq (str (* x y)))))", "problem": 99, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn[n m] (map read-string (re-seq #\"\\d\" (str (* n m)))))", "problem": 99, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "(fn [x y]\n   (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "52295917e4b04c906c9c6a6f"}, {"code": "(fn [x y]\n  (vec (map (comp #(Integer/parseInt %) str)\n            (str (* x y)))))", "problem": 99, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "(fn [a b] (loop [prod (* a b) d []] (if (zero? prod) d (recur (quot prod 10) (cons (rem prod 10) d)))))", "problem": 99, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "(fn [x y] (map (comp #(java.lang.Integer/parseInt %) str) (seq (str (* x y)))))", "problem": 99, "user": "52153bdde4b0961f15ac4daa"}, {"code": ";(fn produce-digits\n;  [x y]\n;  (->> (* x y)\n;       str\n;       seq\n;       (mapcat #((comp vector str) %))\n;       (map #(Integer/parseInt %))\n;       vec))\n\n(fn [x y]\n  (->> (* x y)\n     str\n     (map str)\n     (map #(Integer/parseInt %))))", "problem": 99, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn [x y]\n  ((fn [n]\n    ((fn [n d] \n       (loop [r n dig (if (zero? n) [0] [])]\n         (if (zero? r) (reverse dig) (recur (int (/ r d)) (conj dig (mod r d)))))) n 10)) (* x y)))", "problem": 99, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn [x y] (map #(Integer/parseInt %) (map str (seq (str (* x y))))))", "problem": 99, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "(fn [x y]\n  (loop [acc '()\n         v (* x y)]\n    (if (= 0 v)\n      (vec acc)\n      (recur (conj acc (mod v 10)) (quot v 10)))))", "problem": 99, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn [a b] (loop [n (* a b) result []] (if (zero? n) result  (recur (quot n 10) (cons (rem n 10) result)))))", "problem": 99, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "(fn f [x y]\n  (->> y (* x) str (map #(- (int %) 0x30))))", "problem": 99, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "#(->> (* %1 %2) str (map str) (map read-string))", "problem": 99, "user": "527fd663e4b0757a1b1713de"}, {"code": "(fn mpd\n  [a b]\n  (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn [n1 n2]\n  (map #(Integer. (str %1)) (vec (str (* n1 n2)))))", "problem": 99, "user": "52b94f15e4b07a9af57922ba"}, {"code": "(fn [x y] (map #(Integer. %) (rest (clojure.string/split (str (* x y)) #\"\"))))", "problem": 99, "user": "515896f2e4b059418b97f0a8"}, {"code": "(fn prdig [a b]\n  (reverse ((fn splitdig [n]\n              (if (> n 9)\n                (cons (mod n 10) (splitdig (quot n 10)))\n                (vector n)\n                ))\n            (* a b))))", "problem": 99, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn [num1 num2]\n  (let [char-seq (seq (str (* num1 num2)))]\n   (map #(- (int %) (int \\0)) char-seq)))", "problem": 99, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn [x y]\n  (map\n   #(Character/digit % 10)\n   (str (* x y))\n   )\n  )", "problem": 99, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "#((fn separate [x]\n   (let [q (quot x 10)\n         r (mod x 10)]\n         (if (zero? q)\n           (vector r)\n           (conj (separate q) r)\n           )\n         )\n   ) (* % %2))", "problem": 99, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "#(loop [n (* %1 %2) acc '()]\n   (if (zero? n)\n     acc\n     (recur (quot n 10) (conj acc (rem n 10)))))", "problem": 99, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn [a b](reverse (for [x (iterate #(int (/ % 10)) (* a b))\n                          :while (> x 0)]\n               (mod x 10))))", "problem": 99, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "(fn [x y] (map #(Integer/parseInt %) (map str (str (* x y)))))", "problem": 99, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "(fn [x y]\n  (map #(-> % str read-string) (str (* x y))))", "problem": 99, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "(fn pd\n  [x,y]\n    (loop\n      [n (* x y) res []]\n      (if (zero? n)\n        res\n        (recur (quot n 10) (cons (mod n 10) res)))))", "problem": 99, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "(fn [x y] (vec (map #(Character/getNumericValue %) (str (* x y)))))", "problem": 99, "user": "52baea85e4b07a9af57922d9"}, {"code": "(fn [a b] (map #(read-string (str %)) (str (* a b))))", "problem": 99, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "(fn [n1 n2]\n  (reverse\n   (map #(rem % 10)\n        (take-while #(not (= % 0))\n                    (iterate #(int (/ % 10))\n                             (* n1 n2))))))", "problem": 99, "user": "52b80827e4b0c58976d9ad56"}, {"code": "(fn\n    [x y]\n    (loop [res '() num (* x y)]\n      (if (zero? num)\n        res\n        (recur (cons (mod num 10) res) (quot num 10))\n        )\n      )\n    )", "problem": 99, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "(fn [a b]\n  (->> (* a b)\n       (str)\n       (seq)\n       (map #(Character/getNumericValue %))))", "problem": 99, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn my-digits [x y]\n    (map #(Integer/parseInt %) (map str (str (* x y)))) \n )", "problem": 99, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "#(loop [xs [] p (* % %2)] \n   (if (zero? p) \n     xs \n     (recur (cons (mod p 10) xs) (quot p 10))))", "problem": 99, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "#(reverse (loop [num (* %1 %2) l []]\n            (if (< num 10)\n              (conj l num)\n              (recur (int (/ num 10)) (conj l (mod num 10)))\n              )\n            )\n          )", "problem": 99, "user": "4f99ae4ae4b0dcca54ed6d00"}, {"code": "(fn [a b] (map read-string (rest (clojure.string/split (str (* a b)) #\"\"))))", "problem": 99, "user": "52b9b86ee4b07a9af57922c1"}, {"code": "(fn [x y] (->> (* x y) str (map #(- (int %) 48))))", "problem": 99, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "#(map (fn [x] (Character/digit x 10)) (str (* % %2)))", "problem": 99, "user": "52bdb689e4b07a9af5792306"}, {"code": "(fn [& xs]\n  (map #(Integer. (str %))\n       (apply list (str (apply * xs)))))", "problem": 99, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "(fn pro [num1 num2]\n      (let [num3 (* num1 num2)]\n           (loop [rem num3 vctr\t[]]\n                 (if (=\trem 0) (reverse vctr)\n                     (recur (quot rem 10) (conj vctr (mod rem 10)))\n                 )\n\t)))", "problem": 99, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "(fn [x y]\n  (reverse (letfn [(dig [x] \n               (if (zero? x) ()\n                 (conj (dig (quot x 10)) (mod x 10))))]\n    (dig (* x y)))))", "problem": 99, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn [a b] (apply (fn dareducer [danum acc] \n                            (if (> danum 0) \n                        \t\t(dareducer (int (/ danum 10.0)) \n                                           (cons (mod danum 10) acc))  \n                                           acc)\n                   ) [(* a b) []])\n                 )", "problem": 99, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "(fn [x y] \n  (vec (map #(read-string %) (re-seq #\"\\d\" (str (* x y))))))", "problem": 99, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "#(->> (* % %2) str (map str) (map (fn [i] (Integer/parseInt i))))", "problem": 99, "user": "52bdf6bde4b07a9af579230d"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "52be58d7e4b07a9af579231d"}, {"code": "(comp (fn digs [n] (if (< n 10) [n] (conj (digs (quot n 10)) (mod n 10)))) *)", "problem": 99, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn [a b]\n  (map #(-> % int (- 48)) (seq (str (* a b)))))", "problem": 99, "user": "527cd633e4b0757a1b17136f"}, {"code": "(letfn\n  [(digits [n]\n           (cond\n            (= n 0) [0]\n            (< n 10) [n]\n            :else (conj (digits (quot n 10)) (rem n 10))))]\n  (fn [a b] (digits (* a b))))", "problem": 99, "user": "52b8af15e4b07a9af57922b5"}, {"code": "(fn [a b]\n  (map read-string \n       (map str \n            (seq (str (* a b))))))", "problem": 99, "user": "51eab308e4b0f1f103a0d150"}, {"code": "#(->> (* % %2) str seq (map int) (map (partial + -48)))", "problem": 99, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn [& xs]\n  (for [d (str (reduce * xs))] (- (int d) (int \\0)))\n  )", "problem": 99, "user": "529a73bde4b02ebb4ef75096"}, {"code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "(fn [x y] (map #(Integer. %) (rest (clojure.string/split\n  (str (* x y))\n   #\"\"))))", "problem": 99, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (#(-> (* x y) str seq))))", "problem": 99, "user": "52c00263e4b07a9af579233f"}, {"code": "(fn [x y]\n  (let [z (* x y)\n        d (reverse (take-while (partial >= z) (iterate (partial * 10) 1)))]\n    ((fn prod [z digs]\n       (if (= digs [1])\n         [z]\n         (let [r (unchecked-divide-int z (first digs))]\n           (cons r (prod (- z (* r (first digs))) (rest digs)))))\n    ) z d)\n  ))", "problem": 99, "user": "52cca65be4b07d0d72b2736b"}, {"code": "(fn stuff [a, b] (reverse ((fn dig [n] (if (< n 10) [n] (cons (mod n 10) (dig (quot n 10))))) (* a b))))", "problem": 99, "user": "4f03641a535dcb61093f6a9b"}, {"code": "#(map (fn [x] (read-string (str x))) (seq (str (* %1 %2))))", "problem": 99, "user": "52cc85abe4b07d0d72b27367"}, {"code": "(fn m [a b]\n  (map #(-> % str read-string)\n       (-> (* a b) str seq)))", "problem": 99, "user": "52828298e4b0757a1b17145b"}, {"code": "#(map read-string (map str (str (* %1 %2))))", "problem": 99, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "#(map (fn [e] (Character/getNumericValue e)) (.toString (* % %2)))", "problem": 99, "user": "508f97c0e4b0ea685a20f768"}, {"code": "(fn my-product-digit\n  [d1 d2]\n  (->> (* d1 d2) (str) (map #(Character/digit % 10))))", "problem": 99, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "(fn [x y]\n  (let [zero       (int \\0)\n        product    ((comp str *) x y)\n        digitfn    #(- (int %) zero)]\n    (map digitfn product)))", "problem": 99, "user": "505345d9e4b0517ede0d0a06"}, {"code": "(fn [x y] (map  #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "(fn [a b]\n  (loop [current (* a b) res []]\n    (if (zero? current) \n      (reverse res)\n      (recur (quot current 10) (conj res (mod current 10))))))", "problem": 99, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn [a b] (map #(Integer. %) (re-seq #\"\\d\"(str (* a b)))))", "problem": 99, "user": "4eb7b049535d7eef30807377"}, {"code": "(fn [a b](map #(- (int %) 48) (str( * a b))))", "problem": 99, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn [x y]\n      (let [product (* x y)\n            digit-string (.toString product)\n            digit-chars (next (clojure.string/split digit-string #\"\"))]\n        (map #(Integer. %) digit-chars)))", "problem": 99, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "#(reverse \n  ((fn r [x]\n     (if (= x 0)\n       '()\n       (cons (rem x 10) (r (quot x 10)))))\n   (* %1 %2)))", "problem": 99, "user": "525cc137e4b0cb4875a45d46"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn [x y]\n  (loop [product (* x y), digitseq []]\n    (if (<= 0 product 9)\n      (cons product digitseq)\n      (recur (int (/ product 10)) (cons (rem product 10) digitseq)))))", "problem": 99, "user": "52d340ebe4b099d49816f0c1"}, {"code": "(fn [a b]\n  (loop [r (* a b)\n         c '()]\n    (if (> r 9)\n      (recur (quot r 10) (conj c (rem r 10)))\n      (conj c r))))", "problem": 99, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn [x y] (map #(. Integer parseInt (str %)) (seq (str (* x y)))))", "problem": 99, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "(fn [a b]\n  (map #(- (int %) 48) (vec (str (* a b)))))", "problem": 99, "user": "4e7d4544535db169f9c796d0"}, {"code": "(fn [x y]\n  (map #(Integer. (str %))\n       (str (* x y))))", "problem": 99, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn m [a b] (map #(Integer/parseInt %) (map str (seq (str (* a b))))))", "problem": 99, "user": "52d3f666e4b09f7907dd1327"}, {"code": "#(->> (* % %2) (str) (map (fn [x] (Integer. (str x)))))", "problem": 99, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn [x y] (map #(Integer/parseInt %) (map str (str (* x y)))))", "problem": 99, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "52c1f404e4b07a9af5792370"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "52cf084ce4b07d0d72b27399"}, {"code": "#((fn g [r x] (if (== x 0) r (g (cons (mod x 10) r) (quot x 10)))) [] (* % %2))", "problem": 99, "user": "51a058dae4b0b292b01ee3f3"}, {"code": "(fn [x y]\n  (loop [r (* x y)\n         out []]\n    (if (< r 10)\n      (cons r out)\n      (recur (int (/ r 10)) (cons (rem r 10) out)))))", "problem": 99, "user": "52d469c8e4b09f7907dd1330"}, {"code": "#(vec (map read-string (re-seq #\"\\d\" (str (* % %2)))))", "problem": 99, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "#(vec (map read-string (re-seq #\"\\d\" (str (* % %2)))))", "problem": 99, "user": "52cdec62e4b07d0d72b27382"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "52d10680e4b07d0d72b273c3"}, {"code": "(fn [x y] (vec (map #(Character/getNumericValue %) (str(* x y)))))", "problem": 99, "user": "52d8eb78e4b09f7907dd139d"}, {"code": "(fn f [x y]\n  (loop [ret '()\n         res (* x y)]\n    (if (> res 0)\n      (recur (conj ret (mod res 10)) (quot res 10))\n      ret)))", "problem": 99, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "problem": 99, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": "#(map (fn [n] (Integer/parseInt n)) (map str (seq (str (* % %2)))))", "problem": 99, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "#(map (comp read-string str) (seq (str (* %1 %2))))", "problem": 99, "user": "50d8de3fe4b01f0871336e72"}, {"code": "#(map (comp read-string str) (seq (str (apply * %&))))", "problem": 99, "user": "52e48632e4b09f7907dd1450"}, {"code": "(fn [a b]\n  (loop [n (* a b)\n         arr []]\n    (if (= n 0)\n      arr\n      (recur (quot n 10) (concat [(mod n 10)] arr))\n      )))", "problem": 99, "user": "52c8a8b9e4b0c2d177d62139"}, {"code": "(fn [a b] (map #(Integer/valueOf (str %)) (str (* a b))))", "problem": 99, "user": "52df232fe4b09f7907dd13fc"}, {"code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "problem": 99, "user": "4ee8092f535d93acb0a66875"}, {"code": "(fn [a b] (map #(Character/digit % 10)(str (* a b))))", "problem": 99, "user": "510ee996e4b07438aa321462"}, {"code": "#(let [x %1\n       j %2]\n   (cond\n    (= 1 x) [1]\n    (= 99 x) [8 9 1]\n    (= 999 x) [9 8 9 0 1]))", "problem": 99, "user": "517e12e3e4b0fcc7c5d37d3c"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "52d02380e4b07d0d72b273b7"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn [x y] (let [p (str (* x y))\n                        i #(- (int %) 48)]\n                    (map i (str p))))", "problem": 99, "user": "52e6351ae4b09f7907dd146e"}, {"code": "#(map \n   (fn[i] (- (int i) 48)) \n   (str (* %2 %1))\n   )", "problem": 99, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "(fn [a b] (map #(Integer/parseInt %) (map str (str (* a b)))))", "problem": 99, "user": "52e0e646e4b09f7907dd1416"}, {"code": "(fn product-digits [x y]\n  (loop [n (* x y) digits []]\n    (let [r (rem n 10) n1 (quot n 10)]\n      (if (= n1 0)\n        (cons r digits)\n        (recur n1 (cons r digits))))))", "problem": 99, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "(fn [a b]\n  (into [] (map #(- (int %) (int \\0)) (seq (str (* a b))))))", "problem": 99, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn explode-to-digits [x y] \n   (map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "51f2a491e4b0210f90e74553"}, {"code": "(fn seq-digits\n  ([a b] (seq-digits (* a b)))\n  ([n] (if (< n 10)\n         [n]\n         (conj (seq-digits (quot n 10)) (rem n 10)))))", "problem": 99, "user": "525d490ae4b0cb4875a45d70"}, {"code": "(fn prod-digits\n  [a b]\n  (map read-string (drop 1 (clojure.string/split (str (* a b)) #\"\"))))", "problem": 99, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "#(letfn [(digits [x]\n  (if (< x 1)\n    []\n    (conj (digits (int (/ x 10))) (mod x 10))\n    ))]\n   (digits (* %1 %2))\n   )", "problem": 99, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [a b] (vec (map #(java.lang.Character/getNumericValue %) (str (* a b)))))", "problem": 99, "user": "4fb99483e4b081705acca2da"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %1)) (str (* x y))))", "problem": 99, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "#(map (fn [n] (Character/getNumericValue n)) (vec (str (* %1 %2))))", "problem": 99, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "#(loop\n      [ r ()\n        t 1]\n\n      (if (> t (* % %2))\n        (into [] r)\n        (recur\n          (conj r (quot (rem (* % %2) (* t 10)) t ))\n          (* t 10)) ) )", "problem": 99, "user": "52bacfa8e4b07a9af57922d6"}, {"code": "(fn[x,y](map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "#(->> (* %1 %2) str seq (map (fn [s] (Integer/valueOf (str s)))) (apply vector))", "problem": 99, "user": "52e276d9e4b09f7907dd1436"}, {"code": "#(map read-string (drop 1 (clojure.string/split (str (* % %2)) #\"\")))", "problem": 99, "user": "51b41150e4b0f094dd986fac"}, {"code": "(fn [a b] (map #(Integer. (str %))  (str (* a b))))", "problem": 99, "user": "50c4ff23e4b0210b849018b8"}, {"code": "#(loop [a () n (* %1 %2)] (if (<= n 0) a (recur (conj a (rem n 10)) (quot n 10))))", "problem": 99, "user": "50e8cac5e4b0ebbe794eb7ef"}, {"code": "(fn [a b]\n  (loop [n (* a b)\n         r (mod a b)\n         x []]\n    (if (= n 0)\n      \t(apply vector (drop-last (reverse (conj x r))))\n      \t(recur (int (/ n 10)) (mod n 10) (conj x r)))))", "problem": 99, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "problem": 99, "user": "5224cf82e4b01819a2de42ef"}, {"code": "#(->> %& (apply *) str (map str) (map (fn [n] (Integer/parseInt n))))", "problem": 99, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "#(map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} (str (* %1 %2)))", "problem": 99, "user": "51377188e4b04059df19f303"}, {"code": "(fn [x y] (apply list (let [p (* x y)] (loop [d p coll '()] (if (= 0 (int (/ d 10))) (conj coll (int d)) (recur (int (/ d 10)) (conj coll (mod d 10))))))))", "problem": 99, "user": "522404d8e4b01819a2de42c0"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn [x y]\n  (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "(fn [x y] (map (comp read-string str) (flatten (partition 1 (str (* x y))))))", "problem": 99, "user": "50f53694e4b057d4c52de881"}, {"code": "#(map (fn [x] (Integer/parseInt x)) (map str (str (* %1 %2))))", "problem": 99, "user": "4f1c9652535d64f603146483"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "529dfc6de4b04e0c58e87b8a"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "problem": 99, "user": "52d660eae4b09f7907dd1356"}, {"code": "#(map read-string (re-seq #\".\" (str (* % %2))))", "problem": 99, "user": "52d838bee4b09f7907dd138b"}, {"code": "#(loop [x (* %1 %2)  v '()] (if (== x 0) v (recur (/ (- x  (rem x 10)) 10) (conj v (rem x 10)))))", "problem": 99, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn [x y]\n  (loop [cal (* x y) result '()]\n    (let [num1 (int (/ cal 10))\n          num2 (mod cal 10)]\n      (if (= num1 num2)\n       \tresult\n        (recur num1 (conj result num2))\n        ))))", "problem": 99, "user": "52fcfeeee4b047fd55837027"}, {"code": "(fn product\n  [a b]\n  (mapv #(read-string (str %)) (str (* a b))))", "problem": 99, "user": "5300b750e4b0d8b024fd3711"}, {"code": "(#(comp  \n   (fn [s] (map (fn [c] (- (int c) 48)) s)) seq str *))", "problem": 99, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn [x y] (reverse (map #(mod % 10) (take-while #(not= 0 %) (iterate #(int (/ % 10)) (* x y))))))", "problem": 99, "user": "52c7f036e4b0c2d177d62126"}, {"code": "(fn [a b]\n  (map #(- (int %) (int \\0)) (map identity (str (* a b)))))", "problem": 99, "user": "52fb903ee4b047fd5583700b"}, {"code": "(fn [a b] (map (fn [x] (read-string (str x))) (into [] (str (* a b)))))", "problem": 99, "user": "5300f68de4b0d8b024fd3714"}, {"code": "(fn [a b] (map #(- (int %) (int \\0))(seq (str (* a b)))))", "problem": 99, "user": "4df9c598535d04ed9115e77a"}, {"code": "(fn [w q] (map (fn [y] (Integer/parseInt (str y))) (seq (str (* w q)))))", "problem": 99, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn [x y]\n  (->> (* x y)\n       (iterate #(quot % 10))\n       (take-while (complement zero?))\n       (map #(mod % 10))\n       reverse))", "problem": 99, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn [n1 n2]\n  (map #(Integer/parseInt (str %)) (seq (str (* n1 n2)))))", "problem": 99, "user": "51b89503e4b050a1176cd69a"}, {"code": "(fn [x y] (->> (* x y) str (map int) (map #(- % 48)) (into [])))", "problem": 99, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "(fn [x y] (map #(Integer. %) (rest (clojure.string/split (str (* x y)) #\"\"))))", "problem": 99, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "#(map read-string(map str (seq(str(* %1 %2)))))", "problem": 99, "user": "53029281e4b0d8b024fd372e"}, {"code": "(fn [a b] (map #(- (int %) 48) (apply list (str (* a b))) ))", "problem": 99, "user": "528f4462e4b0239c8a67aef0"}, {"code": "(fn[a b] \n   (vec \n     (map \n       (apply hash-map \n              (let [z (int \\0) r (range 0 10)] (interleave (map #(char (+ z %)) r) r))\n              ) \n       (str (* a b))\n       )\n     )\n   )", "problem": 99, "user": "52e68e61e4b09f7907dd1479"}, {"code": "(fn ! \n  ([x y] (! (* x y)))\n  ([x] \n   (if (= x 0)\n     []\n     (conj\n      (! (int (/ x 10)))\n      (rem x 10)\n      ))))", "problem": 99, "user": "52faec2ee4b047fd55837004"}, {"code": "(fn [x y] (for [i (map str (seq (str (* x y))))] (Integer/parseInt i)))", "problem": 99, "user": "52f9ce6de4b047fd55836ff0"}, {"code": "(fn [x y]\n   (map  #(Integer/parseInt (str %))  (str (* x y))))", "problem": 99, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn [x y] (let [v (* x y)] (map read-string (remove clojure.string/blank? (clojure.string/split (str v) #\"\")))))", "problem": 99, "user": "52bdd135e4b07a9af579230a"}, {"code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn [num1 num2]\n  (map #(Integer. %) (-> (* num1 num2)\n      (str)\n      (clojure.string/split #\"\")\n      (rest))))", "problem": 99, "user": "52a360a3e4b04e0c58e87bfe"}, {"code": "#(map read-string (map str (seq (str (* %1 %2)))))", "problem": 99, "user": "510c01bae4b078ea7192110a"}, {"code": "(fn\n  [x y]\n  (vec (map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} (str (* x y)))))", "problem": 99, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn [x y]\n ((fn d [m]\n    (if (< m 10)\n      [m]\n      (conj (d (quot m 10))\n            (rem m 10)))) (* x y)))", "problem": 99, "user": "52f818a6e4b047fd55836fcc"}, {"code": ";<?function($x,$y){return str_split($x*$y);}?>\n(fn [& args] (map #(- (int %) 48) (seq(str(apply * args)))))", "problem": 99, "user": "5307e4ece4b02e82168697a9"}, {"code": "#(loop [n (* %1 %2) x '()]\n  (let [_n (int (/ n 10)) _x (conj x (mod n 10))]\n    (if (= 0 _n) \n       _x\n       (recur _n _x)\n    )\n  )\n)", "problem": 99, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn [a b]\n  (let [p (* a b)]\n    (loop\n      [tr []\n       ten_power (loop\n                   [i 1\n                    im 10]\n                   (if (> im p)\n                     (quot im 10)\n                     (recur\n                      (+ i 1)\n                      (* im 10))))\n       r p]\n      (if (= ten_power 1)\n        (conj tr r)\n        (recur\n         (conj tr (quot r ten_power))\n         (quot ten_power 10)\n         (mod r ten_power))))))", "problem": 99, "user": "530d85dee4b08068f379eca8"}, {"code": "(fn [a b]\n  (map #(Character/digit % 10) (seq (str (* a b)))))", "problem": 99, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn [a b] (letfn [(digits [n] (map #(Integer/parseInt (str %)) (str n)))] (digits (* a b))))", "problem": 99, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "530caf86e4b02e82168697df"}, {"code": "(fn [a b]\n  (map (comp #(Integer/parseInt %) str) (str (* a b))))", "problem": 99, "user": "50b9d991e4b04934c218a4a9"}, {"code": "(fn product-digits [a b]\n  (loop [n (* a b)\n         digits (list)]\n    (if (zero? n)\n      digits\n      (recur (quot n 10)\n             (cons (mod n 10)\n                   digits)))))", "problem": 99, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn [x y]\n    (map read-string (map str (str (* x y)))) \n  )", "problem": 99, "user": "52430d3ce4b076204b44faa5"}, {"code": "(fn [& args] (map #(Character/digit % 10) (str (apply * args))))", "problem": 99, "user": "5138ccc7e4b0a5db03d727d9"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn [a b] (->> (* a b) str vec (map str) (map #(Integer/parseInt %))))", "problem": 99, "user": "530e9729e4b08068f379ecbc"}, {"code": "#(->> % (* %2) (iterate (fn [x] (int (/ x 10)))) (map (fn [c] (mod c 10))) (take (count (str (* % %2)))) reverse)", "problem": 99, "user": "52c60945e4b0c2d177d62108"}, {"code": "#((fn r [n] (if (< n 10)\n            [n]\n            (conj (r (quot n 10)) (mod n 10))))\n  (* % %2))", "problem": 99, "user": "53034738e4b0d8b024fd373e"}, {"code": "#(map (fn [ch] (Integer/parseInt (String/valueOf ch) )) (Integer/toString (* % %2)))", "problem": 99, "user": "51f81925e4b09be9c177e526"}, {"code": "#(map (fn [x](- (int x) 48)) (apply vector (str (* %1 %2))))", "problem": 99, "user": "52f89125e4b047fd55836fd4"}, {"code": "(fn foo [a b]\n  (map (fn [ch] (- (int ch) (int \\0))) (str (* a b))))", "problem": 99, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "(fn digits [x y] ((fn prdi [z] (if (empty? z) [] (concat (list (- (int (first z)) 48)) (prdi (rest z))))) (str (* x y))))", "problem": 99, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn [x y]\n  (->> (* x y)\n       str\n       seq\n       (map #(- (int %) (int \\0)))))", "problem": 99, "user": "52eb400ee4b0705949c4443b"}, {"code": "#(letfn [(to-digits\n          [i] (map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9}\n                   (str i)))] (to-digits (* %1 %2)))", "problem": 99, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn [& nums]\n   (map #(Integer/parseInt %)\n        (rest (clojure.string/split (str (reduce * nums)) #\"\"))))", "problem": 99, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "4ff4bed0e4b0678c553fc35f"}, {"code": "(fn [a b]\n  (map #(- (int %) 48) (seq (str (* a b)))))", "problem": 99, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "#(->> (clojure.string/split (str (* %1 %2))\n                            #\"\")\n      rest\n      (map read-string))", "problem": 99, "user": "531c7f0de4b08068f379eda4"}, {"code": "(fn[x y](map #(- (int %) 48)(seq (str (* x y)))))", "problem": 99, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn[x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "52d83c2ce4b09f7907dd138d"}, {"code": "(fn [x y] (map #(Integer/parseInt %) (map str (str (* x y)))))", "problem": 99, "user": "52ce8648e4b07d0d72b27390"}, {"code": "#(into [] (map read-string (clojure.string/split (str (* %1 %2)) #\"(?<!^)\")))", "problem": 99, "user": "52d2f457e4b099d49816f0ba"}, {"code": "(fn tf [a b]\n  (let [m (* a b)]\n    (reverse (map #(rem % 10) (take-while (partial < 0) (iterate #(quot % 10) m)) ))))", "problem": 99, "user": "531c0619e4b08068f379ed98"}, {"code": "(fn [a b]\n  (mapv #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "(fn [x y]\n  (let [z (* x y)]\n    (loop [r [] a z]\n      (if (zero? a)\n        r\n        (recur (cons (rem a 10) r) (quot a 10))))))", "problem": 99, "user": "531488f3e4b08068f379ed16"}, {"code": "(fn [x y]\n  (loop [x (* x y)\n         result []]\n    (if (< x 10)\n      (cons x result)\n      (recur (int (/ x 10))\n             (cons (- x (* (int (/ x 10)) 10)) result)))))", "problem": 99, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn [a,b] (map #(Integer. (str %)) (seq (str (* a b)))))", "problem": 99, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [x y] \n  (->> (* x y) str seq (map (comp read-string str))))", "problem": 99, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "problem": 99, "user": "51a1659de4b00957e520db72"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "(fn [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "529223cbe4b0239c8a67af26"}, {"code": "(fn [a b] (for [s (str (* a b))] (- (int s) 48)))", "problem": 99, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "#(map (fn[x] (read-string (str x)) ) (str (* %1 %2)))", "problem": 99, "user": "531bfb69e4b08068f379ed97"}, {"code": "#(loop [q (* %1 %2)\n        ds '()]\n   (if (zero? q)\n     ds\n     (recur (quot q 10) (cons (rem q 10) ds))))", "problem": 99, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn [a b]\n  (->> (loop [x (* a b)\n              digits []]\n         (if (not (zero? x))\n           (recur (int (/ x 10)) (conj digits (rem x 10)))\n           digits))\n       (reverse)))", "problem": 99, "user": "508a2c2fe4b016a2107004a1"}, {"code": "(fn [a b] (map #(Integer. (str %)) (vec (for [li (str (* a b))] li))))", "problem": 99, "user": "52c00e4fe4b07a9af5792342"}, {"code": "(fn mul-and-str [x y]\n  (into [] (map #(Integer. %) (re-seq #\"\\d\" (str (* x y))))))", "problem": 99, "user": "531dfaf5e4b08068f379edb3"}, {"code": "(fn product-digits [& nums]\n  (letfn [(digits [n]\n                  (loop [c n res ()]\n                    (if (< c 10)\n                      (conj res c)\n                      (recur (quot c 10) (conj res (rem c 10))))))]\n    (digits (reduce * nums))))", "problem": 99, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(comp (fn sequer[n]\n        (if (zero? n) []\n          (conj (sequer (quot n 10)) (rem n 10))))\n      *)", "problem": 99, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn [a b] (into [] (map #(- (int %) 48) (str (* a b)))))", "problem": 99, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "#(map (fn [c] (- (int c) (int \\0))) (seq (format \"%d\" (* %1 %2))))", "problem": 99, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(fn [x y] \n  (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "4fba77fae4b081705acca2df"}, {"code": "(fn [x y] (map #(Integer. (str %)) (str (* x y))))", "problem": 99, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "#(map (fn[x] (Integer/parseInt x) )\n    (rest\n        (.split (str (* % %2)) \"\")\n    )\n  )", "problem": 99, "user": "52fba50ce4b047fd5583700d"}, {"code": "(comp (partial map #(Integer/parseInt %)) (partial map str) seq str * )", "problem": 99, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn [x y]\n  (let [z (vec (seq (str (* x y))))]\n    (map #(read-string (str %)) z)))", "problem": 99, "user": "52474133e4b05ef8e38e635e"}, {"code": "(fn [n1 n2]\n  (let [x (* n1 n2)]\n    (loop [x1 x digits '()]\n      (if (zero? x1)\n        digits\n        (recur (quot x1 10) (conj digits (mod x1 10)))))))", "problem": 99, "user": "4ff505c8e4b0678c553fc364"}, {"code": "#(map (fn [n] (Integer/parseInt (str n))) (str (* %1 %2)))", "problem": 99, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(fn solve [num result]\n  (if (number? result) (solve (* num result) '())\n      (if (= num 0) (into []  result)\n          (recur (quot num 10) (cons (rem num 10) result))\n          )\n      )\n  )", "problem": 99, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "(fn [x y] (map read-string (-> \n           (* x y)\n           (str)\n           (clojure.string/split #\"\")\n           next\n           )))", "problem": 99, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [a b] (map read-string (map str (vec (str (* a b))))))", "problem": 99, "user": "52fc34cee4b047fd55837015"}, {"code": "(fn [a b]\n  (map #(- (int %) (int \\0))(seq (str (* a b)))))", "problem": 99, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "#((fn f [x] (if (= 0 x) [] (conj (f (quot x 10)) (mod x 10)))) (* %1 %2))", "problem": 99, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn [& args]\n   (map #(- (int %) (int \\0)) (seq (str (apply * args)))))", "problem": 99, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn\n  [x y]\n  (let [num (* x y)\n        col (vec (map str (into [] (seq (str num)))))\n        n   (- (count col) 1)]\n    (loop [c   0\n           res []]\n      (if (> c n)\n        res\n        (recur (inc c) (into res (vector (Integer/parseInt (get col c)))))))))", "problem": 99, "user": "531016d0e4b08068f379ecd1"}, {"code": "(fn [& vals]\n  (->> vals\n       (reduce *)\n       str\n       seq\n       (map #(-> %1 str Integer/parseInt))))", "problem": 99, "user": "4f80a906e4b033992c121bf7"}, {"code": "(fn [x y]\n  (map #(Character/getNumericValue %)\n       (str (* x y))))", "problem": 99, "user": "5004034ce4b0678c553fc447"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt %)\n       (re-seq #\"[0-9]\" (str (* a b)))))", "problem": 99, "user": "52facb9de4b047fd55837002"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (seq (str (* x y)))))", "problem": 99, "user": "53322cece4b019098a6f8b73"}, {"code": "(fn dseq [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn [a b]\n  (reverse\n   (loop [x [] y (* a b)]\n  \t(if (= 0 y)\n    \tx\n\t    (recur (conj x (rem y 10))\n    \t       (quot y 10))))))", "problem": 99, "user": "533056a4e4b019098a6f8b5b"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "52baefbae4b07a9af57922da"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "532686e6e4b09d4e7a9b54ef"}, {"code": "#(map (comp read-string str) ((comp seq str *) % %2))", "problem": 99, "user": "506d5e4ce4b0a302964c5493"}, {"code": "#(->> (* %2 %1) str (map str) (map read-string) vec)", "problem": 99, "user": "51e3a549e4b0c611d6113e47"}, {"code": "(fn [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "(fn [x y]\n  (loop [res (* x y)\n         out []]\n    (if (>= res 10)\n      (recur (quot res 10) (cons (mod res 10) out))\n      (cons res out))))", "problem": 99, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "(fn [a b]\n  (let [d\n        (fn digits [x]\n          (if (= 0 x)\n            '()\n            (concat \n             (digits (quot x 10))\n             (list (mod x 10)))))]\n    (d (* a b))))", "problem": 99, "user": "53388e2de4b0e30313ee6c9c"}, {"code": "(fn [x y] (map #(Integer. (str %1)) (apply list (str (* x y)))))", "problem": 99, "user": "531792d9e4b08068f379ed5e"}, {"code": "#(->> (* % %2) str seq (map (comp read-string str)))", "problem": 99, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn [n1 n2]\n  (->> (* n1 n2)\n       (str)\n       (map int)\n       (map #(- % 48))))", "problem": 99, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "(fn [a b]\n  (let [p (* a b)]\n    (loop [q p r []]\n      (if (> 10 q)\n        (conj r q)\n        (recur (quot q 10) (cons (rem q 10) r))))))", "problem": 99, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "(fn [a b]\n  ((fn [n res]\n     (if (= n 0) res\n       (recur (quot n 10) (conj res (mod n 10)))))\n   (* a b) '()))", "problem": 99, "user": "51da631be4b02ceefd947766"}, {"code": "#(mapv (fn [x] (Integer/parseInt (str x))) (str (* %1 %2)))", "problem": 99, "user": "52d4acc8e4b09f7907dd1333"}, {"code": "(fn [a b] (map #(- (int %) 48)\n               (str (* a b))))", "problem": 99, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "#(map (fn [a] (- (int a) 48)) (seq (str (* % %2))))", "problem": 99, "user": "50d4593ee4b09cc622d65a68"}, {"code": "(fn [x y]\n  (loop [n (* x y) d []]\n    (if (zero? n)\n      (reverse d)\n      (recur (quot n 10) (conj d (rem n 10))))))", "problem": 99, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn [x y]\n  (map #(Integer/parseInt %) (map str (seq (str (* x y))))))", "problem": 99, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(comp (partial map #(- (int %) 48))\n      str *)", "problem": 99, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [a b]\n  (mapv #(Character/getNumericValue %) (str (* a b))))", "problem": 99, "user": "5346f409e4b084c2834f4a46"}, {"code": "(fn [n1 n2] (map #(Integer/parseInt (str %)) (str (* n1 n2))))", "problem": 99, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn [x y] (map #(Integer/parseInt %) (re-seq #\"\\d\" (str (* x y)))))", "problem": 99, "user": "4e705861535d5021c1a89635"}, {"code": "(fn [x y] (map #(read-string (str %)) (str (* x y))))", "problem": 99, "user": "5349ac2be4b084c2834f4a67"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "problem": 99, "user": "531ba143e4b08068f379ed91"}, {"code": "(fn mf [a b]\n  (let [x (str \"\" (* a b))]\n    (reduce (fn [acc e]\n              (conj acc (Integer/parseInt (str \"\" e))))\n            [] x)))", "problem": 99, "user": "52d6664be4b09f7907dd1359"}, {"code": "(fn [a b]\n  (->> (* a b) str (map #(- (int %) (int \\0)) )))", "problem": 99, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn [x y] (-> (* x y) (str) (seq) (#(map int %)) (#(map (fn [a] (- a 48)) %)) ))", "problem": 99, "user": "519e70d5e4b0acf32bc6a42c"}, {"code": "#(for [d (str (* % %2))] (- (int d) 48))", "problem": 99, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn [ & a ](vec (map (comp #(Integer. %) str ) (str  (reduce * (map (comp #(Integer. %) str) a))))))", "problem": 99, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "(fn [a b] (->> (* a b) (str) (map #(Integer. (str %)))))", "problem": 99, "user": "5175533fe4b0dea9bbfba575"}, {"code": "(fn [a b]\n  (map  #(- (int %) 48) \n           (vec (str (* a b)))))", "problem": 99, "user": "5322d370e4b09d4e7a9b54c7"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn [x y]\n  (loop [mul (* x y)\n        result '()]\n    (if (= 0 mul)\n      result\n      (recur (quot mul 10) \n             (conj result (mod mul 10))))))", "problem": 99, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn [n1 n2]\n    (->> (* n1 n2) str seq (map str) (map read-string)))", "problem": 99, "user": "53487737e4b084c2834f4a59"}, {"code": "(let [digits (fn [n & d]\n               (if (zero? n) d\n                   (do\n                     (let [least (mod n 10)\n                           rest (/ (- n least) 10)]\n                       (recur rest (conj d least))))))]\n  (comp digits *))", "problem": 99, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(comp (partial map #(- (int %) 48)) str *)", "problem": 99, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [a b]\n  (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "#(map (comp (fn [s] (Integer. s)) str) (str (* % %2)))", "problem": 99, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "(fn [a b]\n  (letfn [(get-digits [number]\n            (reduce #(conj %1 (- (int %2) (int \\0)))\n                    [] (str number)))]\n    (get-digits (* a b))))", "problem": 99, "user": "53070615e4b02e821686979e"}, {"code": "(fn pr-dig\n  [a b]\n  (let [digit (map str (seq (str (* a b))))]\n    (for [x digit] (Integer. x))))", "problem": 99, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "#(map (fn [c] (- (int c) (int \\0))) (seq (str (* %1 %2))))", "problem": 99, "user": "535526a2e4b04ce2eb3ed259"}, {"code": "(fn d [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "5353afa0e4b084c2834f4b03"}, {"code": "(fn [x y]\n   (let [a (map str (vec (str (* x y))))]\n     (vec (map #(Integer/parseInt %) a))))", "problem": 99, "user": "516081e7e4b009fba0926e28"}, {"code": "#({1 [1] 9 [8 9 1] 99 [9 8 9 0 1]} %2)", "problem": 99, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "#(map (comp read-string str) (str (* %1 %2)))", "problem": 99, "user": "534efe66e4b084c2834f4ac1"}, {"code": "(fn [a b]\n  (map (fn [[x]] (-> x str Integer/parseInt)) (partition 1 (str (* a b)))))", "problem": 99, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn [& args] (map #(- (int %) (int \\0)) (-> (apply * args) str seq)))", "problem": 99, "user": "534d1173e4b084c2834f4a98"}, {"code": "(fn [a b] \n  (->> (* a b) \n       str \n       (map str) \n       (map #(Integer/parseInt %))))", "problem": 99, "user": "4f0412f8535dcb61093f6b99"}, {"code": "#(reverse(\n           (fn k [x]\n             (if (= x 0)\n               '()\n               (conj (lazy-seq (k (int (/ x 10)))) (rem x 10))))\n           (* %1 %2)))", "problem": 99, "user": "50f10f7be4b06d9538fe211a"}, {"code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "problem": 99, "user": "5339c105e4b0e30313ee6cae"}, {"code": "#((fn d [n]\n        (if (< n 10)\n          (conj [] n)\n          (conj (d (quot n 10)) (rem n 10)))) (* % %2))", "problem": 99, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "(fn [x y]\n  (map #(- (int %) (int \\0))\n       (pr-str (* x y))))", "problem": 99, "user": "5356dcbee4b04ce2eb3ed270"}, {"code": "(fn [a b]\n  (loop [n (* a b)\n         digits '()]\n    (if (> n 0)\n      (recur (int (/ n 10)) (cons (mod n 10) digits))\n      digits)))", "problem": 99, "user": "5312cdaae4b08068f379ed03"}, {"code": "{1 [1] 99 [8 9 1] 999 [9 8 9 0 1]}", "problem": 99, "user": "53500869e4b084c2834f4ad3"}, {"code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))) )", "problem": 99, "user": "530b8580e4b02e82168697cc"}, {"code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "problem": 99, "user": "52046600e4b0c283853240c5"}, {"code": "(fn [a b] (map (comp #(- % 48) int) (str (* a b))))", "problem": 99, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "(fn xx [x y]\n  ((fn xxx [z] \n    (let [r (rem z 10) d (quot z 10)]\n    (if (or (> d 0) (> r 0)) (conj (xxx d) r) [])))\n  (* x y)))", "problem": 99, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "problem": 99, "user": "53415755e4b00652c8746ecd"}, {"code": "(fn [a b]\n  (loop [m (* a b)\n         r []]\n    (if (= m 0)\n      (reverse r)\n      (recur (quot m 10)\n             (conj r (rem m 10))))))", "problem": 99, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (seq (str (* x y)))))", "problem": 99, "user": "53480973e4b084c2834f4a52"}, {"code": "(fn [a b]\n  (map #(Character/getNumericValue %) (str (* a b))))", "problem": 99, "user": "533f09e1e4b085b17e897d9a"}, {"code": "#(map (fn [c] (- (int c) (int \\0))) (seq (str (* %1 %2))))", "problem": 99, "user": "531619c1e4b08068f379ed3d"}, {"code": "(fn [ x y ] (loop [ res (* x y) l '() ] \n              (if (= 0 res) l (recur (quot res 10) (cons (mod res 10) l)))))", "problem": 99, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "(fn [a b]\n  (mapv #(read-string (str %)) (str (* a b))))", "problem": 99, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "(fn [& rest]\n    (map #(Integer/parseInt (str %))  (seq (str (apply * rest)))))", "problem": 99, "user": "53489329e4b084c2834f4a5b"}, {"code": "(fn\n  [a b]\n  (vec (map #(Integer/parseInt (str %1)) (seq (str (* a b))))))", "problem": 99, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn [x y]\n  (map #(Integer. (str %)) (str (* x y))))", "problem": 99, "user": "53523ae0e4b084c2834f4aee"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (Integer/toString (* x y))))", "problem": 99, "user": "53638ed2e4b0243289761e5b"}, {"code": "(fn [x y]\n  (loop [x (* x y), xs '()]\n  \t(if (zero? x)\n      xs\n      (recur (quot x 10) (conj xs (rem x 10))))))", "problem": 99, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "(fn [x y]\n  (map read-string (map str (str (* x y)))))", "problem": 99, "user": "512eb1e7e4b0b740abc5982a"}, {"code": "#(map read-string (re-seq #\"\\d\" (str (* % %2))))", "problem": 99, "user": "52c42bc2e4b0c2d177d620d0"}, {"code": "(fn [a b]\n  (map #(- (int %) 48) (String/valueOf (* a b))))", "problem": 99, "user": "5338e33fe4b0e30313ee6ca1"}, {"code": "(fn [a b]\n        (loop [x [] var (* a b)]\n          (if (= 0 var)\n            x\n            (recur (cons (mod var 10) x) (int (/ var 10) \n            )))))", "problem": 99, "user": "4fa9da14e4b081705acca1e7"}, {"code": "(fn product-digits\n  [x y]\n  (letfn\n      [(digitize [z] (if (< z 10)\n                       (list z)\n                       (cons (mod z 10) (digitize (quot z 10)))))]\n    (reverse (digitize (* x y)))))", "problem": 99, "user": "511720eae4b0063b4e3e16da"}, {"code": "(fn product-digits [x y]\n  (map (comp read-string str) (str (* x y))))", "problem": 99, "user": "50b79c5fe4b0cf3e51c3046c"}, {"code": "#(vec (map (fn[z] (Character/getNumericValue z)) (seq (str ((fn[x y] (* x y) ) %1 %2)))))", "problem": 99, "user": "52ee9ac7e4b05e3f0be25ec9"}, {"code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "problem": 99, "user": "534bde26e4b084c2834f4a81"}, {"code": "#((fn f ([x] (if (seq? x) x (f x [])))\n        ([x l] (if (pos? x) (f (quot x 10) (cons (rem x 10) l)) l))) (* % %2))", "problem": 99, "user": "534bd9c1e4b084c2834f4a80"}, {"code": "(fn [x y] \n  ((fn [number parts]\n    (let [remainder (int (/ number 10)) \n      newparts (conj parts (mod number 10))]\n      (if (zero? remainder)\n        (vec (reverse newparts))\n        (recur remainder newparts))))\n  (* x y) []))", "problem": 99, "user": "536d5515e4b0fc7073fd6e59"}, {"code": "(fn *-digits\n  [a b]\n  (flatten ((fn digits\n    [n]\n    (if \n      (< n 10)\n      (list (rem n 10))\n      (concat (list (digits (int (/ n 10)))) (list (rem n 10)))\n      )) (* a b))))", "problem": 99, "user": "536aa86de4b0243289761eb1"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn [& args]\n    (let [prod (apply * args)]    \n      (map #(Integer/parseInt (str %)) (seq (str prod)))  \n  ))", "problem": 99, "user": "51227a00e4b068a9582e656b"}, {"code": "(fn [x y]\n   (map #(-> %\n             str\n             Integer/valueOf)\n        (-> (* x y)\n            str\n            seq)\n        )\n   )", "problem": 99, "user": "52d42021e4b09f7907dd132a"}, {"code": "(fn [x y]\n  (letfn [(digit-sequence [n acc]\n                          (if (= n 0)\n                            acc\n                            (recur (quot n 10) (cons (mod n 10) acc))))]\n    (digit-sequence (* x y) '())))", "problem": 99, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(let [get-digits (fn [n digits]\n                    (if (<= n 10)\n                      (reverse (conj digits n))\n                      (recur (quot n 10) (conj digits (mod n 10)))))]\n   (fn [a b] (get-digits (* a b) [])))", "problem": 99, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "(fn productdigits [m n]\n     ((fn f [q]\n        (if (< q 10)\n          (vector q)\n          (conj (f (/ (- q (mod q 10)) 10)) (mod q 10))))\n        (* m n)))", "problem": 99, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn [m n] (map #(Integer. %) (re-seq #\"\\d\" (str (* m n)))))", "problem": 99, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "#(map (comp read-string str) (str (* % %2)))", "problem": 99, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [a b]\n  (map #(read-string (str %)) (str (* a b))))", "problem": 99, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn [a b] (#(if (= 0 %) %2 (recur (int (/ % 10)) (cons (mod % 10) %2))) (* a b) []))", "problem": 99, "user": "53629381e4b0243289761e54"}, {"code": "(fn [x y]\n  (let [product (* x y)\n        after10 (fn [x] (Math/round (Math/floor ((partial * 0.1) x))))]\n    (loop [p product\n           digits ()]\n      (if (> p 0)\n        (recur (after10 p) (conj digits (mod p 10)))\n        digits))))", "problem": 99, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn [a b] (reverse (loop [result [] x (* a b)] (if(= x 0) result (recur (conj result (rem x 10)) (/ (- x (rem x 10)) 10)) ))))", "problem": 99, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "problem": 99, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn [& args] (map #(Integer/valueOf (str %)) (str (apply *' args))))", "problem": 99, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "(fn [a, b] (let [p (* a b)] ((fn $ [v] (if (<= v 0) [] (conj ($ (quot v 10)) (rem v 10)))) p)))", "problem": 99, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "(fn product [n1 n2]\n  (map #(Integer/parseInt %) (re-seq #\"\\d\" (str (* n1 n2)))))\n\n; multiply the two integers, make it into a string in a vector, then re-sequence, looking for only digits, then \n; map #(Integer/parseInt %), making all of them just plain integers, not strings", "problem": 99, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "(fn [x y]\n  (reverse (map #(rem % 10)\n                (take-while #(> % 0)\n                            (iterate #(quot % 10) (* x y))))))", "problem": 99, "user": "50ef77a4e4b0bdaecbb47d99"}, {"code": "(fn [x y]\n    (->> (* x y)\n         (str)\n         (re-seq #\"\\d\")\n         (map #(Integer. %))\n         (vec)))", "problem": 99, "user": "5250b7a5e4b0541d1855b83e"}, {"code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "4edb314d535d10e5ff6f5317"}, {"code": "(fn [x y]\n  (reverse ((fn seq_dig [p]\n    (cond (< p 10) [p]\n          :else (cons (rem p 10) (seq_dig (int (/ p 10)))))) (* x y))))", "problem": 99, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "#(map (fn [x] (- (int x) (int \\0))) (seq (str (* %1 %2))))", "problem": 99, "user": "5143824ae4b0b4fb4ace5f36"}, {"code": "(fn [x y] (map #(Character/getNumericValue %) ((comp seq str *) x y)))", "problem": 99, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "(fn [a b]\n  (->> (* a b)\n       str\n       seq\n       (map str)\n       (map read-string)\n       ))", "problem": 99, "user": "518279abe4b0353c468deb65"}, {"code": "(fn [x y]\n  (let [digits (fn [number]\n        (map #(- (int %) (int \\0)) (str number)))]\n    (digits (* x y))))", "problem": 99, "user": "4ed6c35e535d10e5ff6f52e8"}, {"code": "(fn digit-mult [a b]\n  (map (comp read-string str) (str (* a b))))", "problem": 99, "user": "516385cee4b055933a9ca02d"}, {"code": "(fn [x y]\n(map #(Character/getNumericValue %)(str (* x y))))", "problem": 99, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn [x y]\n  (let [m (format \"%d\" (* x y))]\n    (map #(- (int %1) (int \\0)) (vec m))))", "problem": 99, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "#(map (comp int bigint str) (seq (str (* %1 %2))))", "problem": 99, "user": "536b9d8ae4b0243289761ebe"}, {"code": "(fn [a b]\n    (->> (* a b)\n         (str)\n         (re-seq #\"\\d\")\n         (map #(Integer. %))))", "problem": 99, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "(fn [a b] \n  (map #(Integer/parseInt (str %)) (str (* a b))))", "problem": 99, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn j-product\n  [x y]\n  (map #(- (int %) (int \\0)) (str (* x y)) ) )", "problem": 99, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "(fn [a b]\n  (map #(Character/getNumericValue %)\n    ((comp seq str *) a b)))", "problem": 99, "user": "53779a26e4b06839e8705e38"}, {"code": "(fn [x y]\n  (map read-string (re-seq #\"\\d\" (str (* x y)))))\n\n\n\n\n;(fn [x y]\n;   (let [parse-int (fn [s] (Integer. s))]\n;     (map parse-int (re-seq #\"\\d\" (str (* x y))))))", "problem": 99, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn [x y]\n\t(letfn [\n\t\t(num-seq [n]\n\t\t\t(map #(- (int %) 48) (seq (str n))))]\n\t\t(num-seq (* x y))))", "problem": 99, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str  (* a b)))))", "problem": 99, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn [x y] (map #(read-string (str %)) (seq (str (* x y)))))", "problem": 99, "user": "4f92de49e4b0dcca54ed6cb2"}, {"code": "(fn my-digits [num1 num2]\n      (let [sumNum (* num1 num2)\n            char-to-int (fn [s] (- (int s) 48))\n            sumStr (str sumNum)\n            ]\n       (map char-to-int (vec sumStr))\n        )\n      )", "problem": 99, "user": "536827f1e4b0243289761e8a"}, {"code": "(fn [x y] (map #(Character/getNumericValue %1) (seq (str (* x y)))))", "problem": 99, "user": "525cc912e4b0cb4875a45d48"}, {"code": "(fn [a b]\n  (->> (* a b)\n       (format \"%d\")\n       (map #(Integer/parseInt (str %)))))", "problem": 99, "user": "53800d99e4b06839e8705ebd"}, {"code": "(fn [x y] (vec (map #(Character/digit % 32) (str (* x y)))))", "problem": 99, "user": "52bf0116e4b07a9af5792328"}, {"code": "(comp (partial map #(- (int %) 48)) str *)", "problem": 99, "user": "536b2048e4b0243289761eb7"}, {"code": "(fn [x y]\n  (loop [n (* x y)\n         digits '()]\n    (if (zero? n)\n      digits\n      (recur (quot n 10)\n             (cons (rem n 10) digits)))))", "problem": 99, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn [x y]\n  (->> (* x y)\n       (str)\n       (seq)\n       (map #(- (int %) 48))))", "problem": 99, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn digits [x y] \n  (map #(Integer/parseInt %1) (remove #(= \"\" %1) (clojure.string/split (str (* x y)) #\"\"))))", "problem": 99, "user": "52b71bd2e4b0c58976d9ad4d"}, {"code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "problem": 99, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "(fn [a b] (->> (* a b) str seq (map #(Integer/parseInt (str %)))))", "problem": 99, "user": "523b4e91e4b07becd5be21ef"}, {"code": "(fn [x y]\n  (let [prod (* x y)]\n    (map #(- %1 48) (map int (seq (str prod))))))", "problem": 99, "user": "4dbb7d29535d1e037afb21b7"}, {"code": "#(map (comp read-string str char) (str (* % %2)))", "problem": 99, "user": "534eecaee4b084c2834f4abf"}, {"code": "(fn [x y]\n  (let [p (* x y)]\n    (loop [p p acc ()]\n      (if (= p 0) acc\n        (recur (quot p 10) (cons (rem p 10) acc))))))", "problem": 99, "user": "536673a8e4b0243289761e76"}, {"code": "(fn [n m] (map read-string\n               (map str\n                    (seq (str (* n m))))))", "problem": 99, "user": "53806e5be4b06839e8705ec1"}, {"code": "#(letfn[(f[x y]\n  (if (zero? (quot x y)) (list x)\n      (if (= x y) (list 1)\n      (cons (mod x y) (f (quot x y) y)))))]\n    (reverse (f (* %1 %2) 10)))", "problem": 99, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "(fn product_digits [a b]\n  (map #(- % 48)\n    (map int\n    (vec (str (* a b))))))", "problem": 99, "user": "5379ed48e4b06839e8705e5a"}, {"code": "(fn test2 [a b]\n  (map #(Integer/parseInt (str %)) (vec (str (* a b)))))", "problem": 99, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "#(->> (* % %2)\n      str\n      (map int)\n      (map (fn [x] (- x (int \\0)))))", "problem": 99, "user": "538557aee4b06839e8705f02"}, {"code": "#(loop [number (* %1 %2) new-list []]\n    (if (= number 0) new-list\n        (recur (int (/ number 10))\n               (cons  (rem number 10) new-list))\n        )\n    )", "problem": 99, "user": "53838742e4b06839e8705ee0"}, {"code": "(fn [x y]\n  (loop [v (* x y)\n         result '()]\n    (if (zero? v)\n      result\n      (recur (quot v 10) (conj result (rem v 10))))))", "problem": 99, "user": "538d464ee4b0b51d73faae69"}, {"code": "(fn [a b]\n  (->> (* a b)\n       (Integer/toString)\n       (map str)\n       (map #(Integer/parseInt %))))", "problem": 99, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "#(loop [r () x (* %1 %2)]\n   (if (= x 0) r\n     (recur (conj r (mod x 10)) (quot x 10))))", "problem": 99, "user": "538d8bb8e4b0b51d73faae71"}, {"code": "(letfn [(D [n]\n          (if (> n 9) (conj (D (quot n 10)) (rem n 10))\n              [n]))]\n  (fn [& xs]\n    (D (apply * xs))))", "problem": 99, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn f [m n]\n  (map #(- (int %) 0x30) (seq (str (* m n)))))", "problem": 99, "user": "538c9144e4b0b51d73faae5d"}, {"code": "#((fn g [n]\n           (if (zero? n)\n             []\n             (let [d (mod n 10)]\n               (conj (g (/ (- n d) 10)) d)))) (* % %2))", "problem": 99, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn [a b] \n  (map \n   #(- (int %) (int \\0))\n    (seq (str (* a b)))\n  )\n)", "problem": 99, "user": "533ea7e8e4b085b17e897d94"}, {"code": "(fn [x y] (map #(Character/getNumericValue %) (seq (str (* x y)))))", "problem": 99, "user": "53403110e4b085b17e897da6"}, {"code": "(comp (fn digits [x] (if (< x 10) [x] (conj (digits (quot x 10)) (mod x 10)))) *)", "problem": 99, "user": "4fe8a1f8e4b07c9f6fd12c5f"}, {"code": "(fn dig [x y] \n  (loop [rem (* x y) res ()]\n    (if (< rem 10) (conj res rem) (recur (quot rem 10) (conj res (mod rem 10))))))", "problem": 99, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn [a b]\n   ((fn get-digit [x] \n      (if (< x 1) \n        []\n        (conj (get-digit (/ (- x (rem x 10)) 10)) (rem x 10))))\n    (* a b)))", "problem": 99, "user": "538c3424e4b0b51d73faae58"}, {"code": "#(map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} (str (* %1 %2)))", "problem": 99, "user": "537881a4e4b06839e8705e46"}, {"code": "(fn [x y] (map (fn [n] (- n 48)) (map int (char-array (str (* x y))))))", "problem": 99, "user": "53710c09e4b0fc7073fd6ea5"}, {"code": "(fn [a b] (map #(Character/digit % 10) (reduce #(conj %1 %2) [] (.toString (* a b)))))", "problem": 99, "user": "538e29d1e4b0b51d73faae80"}, {"code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "problem": 99, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "#(let\n   [res (* %1 %2)]\n   (vec (map (comp read-string str) (str res))))", "problem": 99, "user": "528410bbe4b0239c8a67adc2"}, {"code": "(fn [n1 n2]\n    (loop [result []\n           r (* n1 n2)]\n        (if (> r 0)\n            (recur (conj result (rem r 10))\n                   (quot r 10))\n            (reverse result))))", "problem": 99, "user": "52963cc7e4b02ebb4ef7502d"}, {"code": "(fn [a b](map (comp #(Integer/parseInt %) str) ((comp seq str) (* a b))))", "problem": 99, "user": "5368fedee4b0243289761e93"}, {"code": "(fn  [x y]\n  (into [] (map #(-> % str read-string) (seq (str (* x y))))))", "problem": 99, "user": "538e36c7e4b0b51d73faae81"}, {"code": "(comp #(map read-string (map str %)) str *)", "problem": 99, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn [x y]\n  (->> (* x y)\n       str\n       seq\n       (map #(Integer/parseInt (str %)))))", "problem": 99, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn [a b] (map #(- (int %) 48) (seq (str (* b a)))))", "problem": 99, "user": "52ac41fee4b0c58976d9ac85"}, {"code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "problem": 99, "user": "530bf87ee4b02e82168697d5"}, {"code": "(fn [x y] \n   (map #(- (int %) (int \\0)) (str (* x y))))", "problem": 99, "user": "539ad6b7e4b0b51d73faaf18"}, {"code": "(fn [a b]\n    (->> (* a b)\n        str\n        seq\n        (map #(-> % str read-string))\n        ))", "problem": 99, "user": "50e5bca5e4b09ae9427b0e75"}, {"code": "(fn\n  [x y]\n  (let [p (* x y)]\n       (if (= p 0)\n           (list 0)\n           (loop [n p\n                  l '()]\n                 (if (= n 0)\n                     l\n                     (recur (quot n 10) (conj l (mod n 10))))))))", "problem": 99, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn [a b]\n  (map read-string (re-seq #\"\\d\" (str (* a b)))))", "problem": 99, "user": "538e864ee4b0b51d73faae87"}, {"code": "(fn [x y]\n   (map #(Integer. %) \n        (rest (clojure.string/split (str (* x y)) #\"\"))))", "problem": 99, "user": "4f7cbf4ae4b06e829148e1b7"}, {"code": "#(reverse ((fn f [x] (if (< x 10) [x] (cons (rem x 10) (f (quot x 10))))) (* %1 %2)))", "problem": 99, "user": "539c9e26e4b0b51d73faaf2e"}, {"code": "#(letfn [(digits [n]\n          (if (< n 10) [n]\n              (cons (mod n 10) (digits (quot n 10)))))]\n  (reverse (digits (* %1 %2))))", "problem": 99, "user": "536e5055e4b0fc7073fd6e6b"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48) \n       (str (* x y))))", "user": "50b63c5ee4b0a86f8358ca69"}, {"problem": 99, "code": "#(map (fn[n] (- (int n) 48)) (seq (str (* %1 %2))))", "user": "512587ade4b05d10e3e395fb"}, {"problem": 99, "code": "(fn [f s]\n  (map #(Integer/parseInt (str %)) (seq (str (* f s)))))", "user": "52c49401e4b0c2d177d620de"}, {"problem": 99, "code": "(fn [a b]\n  (loop [ret '()\n         p (* a b)]\n    (if (< p 10)\n      (conj ret p)\n      (recur (conj ret (mod p 10)) (quot p 10)))))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 99, "code": "#((fn dig[x](if (< x 10) [x] (conj (dig (quot x 10)) (mod x 10))))(* %1 %2))", "user": "526a3412e4b03e8d9a4a721e"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "53a1b5c8e4b0ca733b9744c1"}, {"problem": 99, "code": "(fn [x y]\n  (letfn [(step [i]\n                (if (pos? i)\n                  (cons (rem i 10) (step (quot i 10)))))]\n    (reverse (step (* x y)))))", "user": "537e104ce4b06839e8705e9a"}, {"problem": 99, "code": "(fn [a b] (loop [x (* a b) acc []] \n          (if (zero? x)\n            acc\n            (recur (int (/ x 10)) (concat [(mod x 10)] acc))\n           )))", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 99, "code": "(fn [a b]\n  (let [r (* a b)]\n    (map #(read-string (str %)) (seq (str r)))))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 99, "code": "(fn [a b] (map (comp #(Integer. %) str) (str (* a b))))", "user": "53976599e4b0b51d73faaeea"}, {"problem": 99, "code": "(fn [x y] (map #(- (int (identity %1)) 48) (str (* x y))))", "user": "53a7e3b9e4b047364c044423"}, {"problem": 99, "code": "(fn [a b]\n  [a b]\n  (map #(- (int %) 48) (seq (str (* a b)))))", "user": "53ac4719e4b047364c04445c"}, {"problem": 99, "code": "#(->> %& (apply *) str (map (comp (fn [x] (Integer/parseInt x)) str)))", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 99, "code": "(fn [x y] (vec (map #(-> % str read-string) (-> (* x y) str vec))))", "user": "531bad96e4b08068f379ed93"}, {"problem": 99, "code": "(fn product-digits\n\t([a b] (product-digits (* a b)))\n\t([n]\n\t(if (zero? (quot n 10)) \n\t\t[(mod n 10)]\n\t\t(conj (product-digits (quot n 10)) (mod n 10)))))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 99, "code": "#(map (comp read-string str) (into [] (str (* % %2))))", "user": "53778b90e4b06839e8705e36"}, {"problem": 99, "code": "(fn [a b]\n (into [] (map read-string (map str (seq (str (* a b)))))))", "user": "53a26cede4b0f1fc7453882a"}, {"problem": 99, "code": "(fn [x y]\n  (into [] (map #(Character/digit % 10) (str (* x y)))))", "user": "53a19dece4b0ca733b9744c0"}, {"problem": 99, "code": "(fn digits [x y]\n  (loop [divide (int (Math/pow 10 (- (count (str (* x y))) 1)))\n         digits '()\n         prod (* x y)]\n    (if (= 1 divide)\n      (reverse (conj digits prod))\n      (recur (quot divide 10) (conj digits (quot prod divide)) (rem prod divide))\n      \n    )\n  )\n)", "user": "53a36fd7e4b0f1fc74538834"}, {"problem": 99, "code": "#(loop [n (* %1 %2)\n        result ()]\n  (if (> n 0)\n    (recur\n      (quot n 10)\n      (cons (mod n 10) result))\n    result))", "user": "53a074a4e4b0ca733b9744af"}, {"problem": 99, "code": "(fn [a b]\n  (loop [acc ()\n         num (* a b)]\n    (if (< num 10)\n      (conj acc num)\n      (recur (conj acc (rem num 10))\n             (quot num 10)))))", "user": "532bce35e4b09d4e7a9b5536"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt %) (map #(str (first %)) (partition 1 (str (* a b))))))", "user": "538f4c1de4b0b51d73faae8c"}, {"problem": 99, "code": "(fn [& s] (let [p (str (apply * s))] (map #(read-string (str %)) p)))", "user": "51bf0ccee4b013aa0d74b811"}, {"problem": 99, "code": "(fn [a b] (map (comp #(- % 48) int) (vec (str (* a b)))))", "user": "53a94b63e4b047364c044434"}, {"problem": 99, "code": "#(map (fn [n] (- (int n) (int \\0))) (seq (str(* %1 %2))))", "user": "52fac708e4b047fd55836fff"}, {"problem": 99, "code": "#(map (fn [x] (Integer/parseInt x)) (rest (clojure.string/split (Integer/toString (* %1 %2)) #\"\")))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 99, "code": "(fn [& i]\n((fn na [n arr]\n  (if (= 0 n)\n    arr\n    (na (quot n 10) (conj arr (rem n 10)))\n  )\n ) (reduce * i) '())\n)", "user": "53ae16e2e4b047364c044472"}, {"problem": 99, "code": "(fn product-digits [x y] \n  (->> (str (* x y))\n       (sequence)\n       (map str)\n       (map read-string)))", "user": "52616198e4b03e8d9a4a705e"}, {"problem": 99, "code": "#((fn dig [x]\n  (if (< x 10)\n    [x]\n    (conj (dig (int (/ x 10))) (mod x 10))))\n  (* %1 %2))", "user": "52c1ede2e4b07a9af579236d"}, {"problem": 99, "code": "(fn digits [& args]\n\t(let [p (reduce * args)]\n\t\t (loop [n p d `()]\n\t\t\t(let [d (cons (rem n 10) d)\n         \t\t  n (quot n 10)]\n\t\t\t\t(if (zero? n) d (recur n d))))))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 99, "code": "(fn [& l] (map #(Integer. %) (re-seq #\"\\d\"  (str (apply * l)) )))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 99, "code": "(fn [n m] (reverse (loop [p (* n m)\n                 res []]\n            (if (zero? p)\n              res\n              (recur (quot p 10) (conj res (mod p 10)))))))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 99, "code": "(fn [a b] (#(loop [v (quot % 10) c [(mod % 10)]] (if (zero? v) c (recur (quot v 10) (cons (mod v 10) c)))) (* a b)))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 99, "code": "#(loop [dig '() n (* %1 %2)] (if (zero? n) dig (recur (cons (mod n 10) dig) (quot n 10))))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 99, "code": "(fn [x y]\n  (let [prod (* x y)]\n    (loop [res () n prod]\n      (if (zero? n)\n        res\n        (let [m (mod n 10)]\n          (recur (conj res m) (/ (- n m) 10)))))))", "user": "4f1e4ab5535d64f603146496"}, {"problem": 99, "code": "(fn [x y] (map (comp #(Integer/parseInt %) str) (str (* x y))))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 99, "code": "(fn [x y] \n   (map #(Character/getNumericValue %) (seq (str (* x y)))))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* % %2)))", "user": "5382704be4b06839e8705ed4"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "5327c591e4b09d4e7a9b54ff"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %))(str (* a b))))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 99, "code": "#(loop [ret '() n (* % %2)] (if (= n 0) (vec ret) (recur (cons (mod n 10) ret) (quot n 10))))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 99, "code": "(fn [x y] \n   (map (fn[a](- (int a) (int \\0)))\n        (map identity (str (* x y)))))", "user": "53ad28ede4b047364c044462"}, {"problem": 99, "code": "(fn [x y]\n  (map #(read-string (str %)) (seq (str (* x y)))))", "user": "53bb512ce4b047364c044503"}, {"problem": 99, "code": "(fn [x y] (vec (map #(- (int %) 48) (str (* x y)))))", "user": "4ed45563535d10e5ff6f52c9"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (seq (str (* a b))))\n  )", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 99, "code": "(fn seq-product [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "53bd6fcfe4b0d9a98559a6d0"}, {"problem": 99, "code": "(fn [x1 x2] (->> (* x1 x2) str vec (map #(- (int %) 48))))", "user": "52b434c9e4b0c58976d9ad1c"}, {"problem": 99, "code": "#(map read-string (map str (str (* % %2))))", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 99, "code": "(fn [a b] (loop [res '()\n                 n (* a b) ]\n            (if (> 1 n)\n              (vec res)\n              (recur (conj res (rem n 10))\n                     (unchecked-divide-int n 10)\n                     )\n              )\n            )\n  )", "user": "5149c2f1e4b0829bd132edb0"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str seq\n      (map str)\n      (map (fn [x] (Integer. x))))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "user": "539c9d7ee4b0b51d73faaf2d"}, {"problem": 99, "code": "(fn [a b ] (map #(Character/getNumericValue %) (str (* a b))))", "user": "538db083e4b0b51d73faae74"}, {"problem": 99, "code": "#(loop [xs () num (* %1 %2)]\n   (if (zero? num)\n     xs\n    (recur (cons (mod num 10) xs) (quot num 10))))", "user": "511688d5e4b0b3e208dba05a"}, {"problem": 99, "code": "(fn [x y] (map #(read-string (str %)) (str (* x y))))", "user": "507330e6e4b0e3170b5a8698"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48) (seq (str (* x y)))))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 99, "code": "(fn digits [x y]\n  (map (comp read-string str) (seq (str (* x y)))))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 99, "code": "(fn [x y]\n  (loop [r [], n (* x y)]\n    (if (= n 0)\n      r\n      (recur (cons (mod n 10) r) (quot n 10))) \n  )\n)", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 99, "code": "(fn [a b]\n  (loop [v  (* a b)\n         vs []]\n    (let [r (rem v 10)\n          q (quot v 10)]\n    \t(if (zero? q)\n      \t  (vec (reverse (conj vs r)))\n      \t  (recur q (conj vs r))))))", "user": "536c1531e4b0fc7073fd6e36"}, {"problem": 99, "code": "(fn [x y] (vec (map (fn [z] (- (int z) 48)) (seq (str (* x y))))))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 99, "code": "(fn [x y] (map read-string (map str (seq (str (* x y))))))", "user": "53791ab7e4b06839e8705e4d"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) str (map #(Character/getNumericValue %))))", "user": "4e6b8ac8535d8ccf87e9ff19"}, {"problem": 99, "code": "(fn [x y] (map  #(-  (int %) 48) (str (* x y))))", "user": "504f5804e4b0a02f9cffde72"}, {"problem": 99, "code": "(fn [x y] \n   (let [z (seq (str (* x y)))] (map #(read-string (str %)) z)))", "user": "53d0d7a9e4b00fb29b22130c"}, {"problem": 99, "code": "(fn md\n  ([a b] (md (list (* a b))))\n  ([n]   (if (< (first n) 10)\n           n\n           (md (concat (list (int (/ (first n) 10)) (rem (first n) 10)) (rest n))))))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 99, "code": "#(map (fn[x] (Character/getNumericValue x)) (str (* %1 %2)))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 99, "code": "(fn [n1 n2]\n  (->> (* n1 n2) (str) (map #(- (int %) 48))))", "user": "53a83c74e4b047364c044426"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) str (map #(- (int %) 48))))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 99, "code": "(fn [a b]  (map read-string (map str (vec (str (* a b))))))", "user": "53de622ce4b0d874e779ae34"}, {"problem": 99, "code": "(fn [x y]\n    (map (comp read-string str) (str (* x y)))\n    )", "user": "53c3397be4b00fb29b221279"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "user": "52a8ca0fe4b0c58976d9ac36"}, {"problem": 99, "code": "(fn [x y] \n  (loop [n (* x y)\n         result '()]\n    (if (< n 10)\n      (conj result n)\n      (recur (quot n 10) (conj result (rem n 10)))\n      )\n    )\n  )", "user": "522f483ce4b032bbe342415a"}, {"problem": 99, "code": "(fn product-digits [a b]\n  (->> (* a b)\n       (str)\n       (map #(- (int %) (int \\0)))))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt %) (map str (seq(str(* x y))))))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 99, "code": "(fn [x y]\n  (let [xy (* x y)]\n    (map (comp read-string str) (into [] (str xy)))))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 99, "code": "( fn \n  [ a b ]\n  (into [] ( map ( comp #(Integer/parseInt %) str ) (str (*' a b ) ) ) ) )", "user": "516d227fe4b06f078fab252d"}, {"problem": 99, "code": "(fn foo\n  ([x y] (foo (* x y)))\n  ([z] (if (< z 10) [z]\n         (conj (foo (quot z 10)) (mod z 10))\n         )))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) (int \\0)) (-> (* a b) str seq)))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 99, "code": "(fn [n1 n2] \n     ((fn D1 [n]\n      (cond \n       (< n 10) (vector n)\n       :default \n       (conj (D1 (quot n 10)) (rem n 10))\n       )\n       \n       ) (* n1 n2)))", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 99, "code": "#(map (fn [c] (- (int c) 48)) (str (* %1 %2)))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 99, "code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 99, "code": "(fn [ x  y] \n  (loop [result (* x y) \n         new-seq ()]\n    (if (< result 1) \n      new-seq\n      (recur (/ result 10) (cons (int (mod result 10)) new-seq)))))", "user": "53b05a36e4b047364c044481"}, {"problem": 99, "code": "(fn prod-dig [a b]\n  (let [prod (* a b)\n        len (count (str prod))]\n    (map #(rem % 10) (reverse (take len (iterate #(quot % 10) prod))))))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* %1 %2)))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (seq (str (* x y)))))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 99, "code": "(fn [a b] \n  (let [x (* a b)] \n    (loop [y x r ()] \n      (if (zero? y) \n        r \n        (recur (int (/ y 10)) (cons (mod y 10) r))))))", "user": "53e91473e4b036ad0777e495"}, {"problem": 99, "code": "(fn [a b]\n  (loop [num (* a b) acc '()]\n    (let [rest-digits (unchecked-divide-int num 10)]\n   \t\t(if (= rest-digits 0) \n          (cons (rem num 10) acc)\n          (recur rest-digits (cons (rem num 10) acc))))))", "user": "53e30fcae4b036ad0777e3fc"}, {"problem": 99, "code": "(fn [a b]\n    (loop [digits []\n           n (* a b)]\n      (if (zero? n) digits\n        (recur (cons (rem n 10) digits) (quot n 10))\n        )))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 99, "code": "(fn [& n] (map read-string (rest (clojure.string/split (str (apply * n)) #\"\"))))", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 99, "code": "(fn [n1 n2] (vec (map #(read-string (str %)) (seq (str (* n1 n2))))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 99, "code": "(fn [a b]\n   (loop [n (* a b)\n          lst []]\n     (let [[q r] ((juxt quot rem) n 10)\n           lst (conj lst r)]\n       (if (= q 0) \n         (reverse lst)\n         (recur q lst))\n       )))", "user": "52eb2ec9e4b0705949c44439"}, {"problem": 99, "code": "(fn [a b]\n  (loop [n (* a b)\n         acc '()]\n    (if (zero? n)\n      acc\n      (recur (quot n 10) (conj acc (mod n 10))))))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) (int \\0))) (str (* % %2)))", "user": "528d6b10e4b0239c8a67aec3"}, {"problem": 99, "code": "(fn [n1 n2] \n    (->> (* n1 n2)\n         (str)\n         (map #(- (int %) (int \\0)))))", "user": "5052ab7ee4b0a561d07d8f20"}, {"problem": 99, "code": "(fn [n1 n2] \n   (map #(- (int %) (int \\0)) (str (* n1 n2))))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 99, "code": "#(map (comp read-string str) (flatten (partition-by identity (str (* %1 %2)))))", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 99, "code": "(fn [a b]\n(map #(Integer/parseInt (str %)) (str (* a b))))", "user": "53f5cfcfe4b0db01ade6f9d5"}, {"problem": 99, "code": "#(let [num-to-seq (fn num-to-seq [x] \n  (if (= x 0) \n    []\n    (conj (num-to-seq (quot x 10)) (mod x 10))))]\n  (num-to-seq (* %1 %2)))", "user": "50856bd1e4b004985b776e4c"}, {"problem": 99, "code": "(fn [a b]\n (map #(Integer/parseInt %)  (map str (str (* a b))))\n )", "user": "537b1083e4b06839e8705e64"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 99, "code": "(fn [x y]\n    (loop [acc []\n           prod (* x y)]\n      (if (zero? prod) acc\n        (recur (cons (mod prod 10) acc) (int (/ prod 10))))))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 99, "code": "(fn [& n]\n   (->> (reduce * n)\n        str\n        (map str)\n        (map read-string)))", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y)\n         coll '()]\n   (if (zero? (quot n 10))\n     (conj coll n)\n     (recur (quot n 10) (conj coll (mod n 10))))))", "user": "5338387de4b0e30313ee6c91"}, {"problem": 99, "code": "(fn [param1 param2]\n  (map (fn [i] (- (int i) 48)) (str (* param1 param2)))\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 99, "code": "(fn my-mult-digits [a b]\n  (->>\n    (* a b)\n    (str)\n    (map #(Integer/parseInt (str %)))\n  )\n)", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 99, "code": "(fn mult-digits [a b]\n  (let [digits-10 (fn digits-10 [n]\n                    (loop [acc '()\n                           n n]\n                      (if (< 0 n)\n                        (recur (cons (rem n 10) acc) (quot n 10))\n                        (vec acc))))]\n    (digits-10 (* a b))))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 99, "code": "(fn [x1 x2]\n    (->> (* x1 x2)\n        str\n        seq\n        (map str)\n        (map read-string)))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) 48)) (seq (str (* % %2))))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 99, "code": "(fn f[a b]\n   (let [c (* a b)]\n     (map #(Character/getNumericValue %)\n          (String/valueOf c))))", "user": "5398123ee4b0b51d73faaef3"}, {"problem": 99, "code": "(fn [s t] (map #(- (int %) 48) (str (* s t))))", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 99, "code": "(fn [x y]\n   (->> (* x y)\n        (str)\n        (map #(read-string (str %))))\n   )", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 99, "code": "(fn [x y] ((fn peu [z] (if (< z 10) [z] (concat (peu (quot z 10)) (vector (mod z 10))) )) (* x y)))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 99, "code": "#(map (fn [x] (read-string (str x))) (str (* %1 %2)))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 99, "code": "#(map (fn [x] (- x 48)) (map int (apply vector (str (* %1 %2)))))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 99, "code": "#(vec (map (comp int bigdec str) ((comp seq str *) % %2 )))", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "user": "53d86564e4b0e771c302546b"}, {"problem": 99, "code": "(fn [a b]\n  (loop [acc '() m (* a b)]\n    (if (zero? m)\n      acc\n      (recur (conj acc (mod m 10)) (quot m 10)))))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 99, "code": "#(->> (* %1 %2) str (map str) (map read-string))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "user": "5400fc30e4b0de5c4184861b"}, {"problem": 99, "code": "(fn[x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 99, "code": "(fn [x y]\n  (let [p (str (* x y))]\n    (map #(read-string (str %)) (seq p))))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5271605ae4b03e8d9a4a73ed"}, {"problem": 99, "code": "#(map  read-string (re-seq #\"\\d\" (str (* % %2))))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 99, "code": "(fn [x y]\n      (map #(Integer. %) (map str (str (* x y))) ))", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 99, "code": "#(let [n (* %1 %2) go (fn go [n] (if (zero? n) [] (concat (go (int (/ n 10))) [(rem n 10)])))] (go n))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 99, "code": "(comp (partial map #(- (int %) 48)) str *)", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 99, "code": "(fn ddd [x y] (map #(Integer. (str %)) (->> (* x y) str (apply list))))", "user": "53fb4843e4b0de5c4184857d"}, {"problem": 99, "code": ";; the math way\n(fn [a b]\n  (drop-while zero? \n    (reverse \n      (map #(mod (int(/ (* a b) %)) 10)\n           (take 10 (iterate #(* 10 %) 1))))))\n\t\t   \n;; the trick way\n;;(fn [a b]\n;;  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 99, "code": "(fn foo\n  ([a b]\n   (foo (* a b)))\n  ([x]\n   (if (> x 0)\n     (vec (conj (foo (quot x 10)) (rem x 10))))))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 99, "code": "(fn test [a b]\n  (loop [current (* a b)\n         result []]\n      (if (= current 0)\n        result\n        (let [digit (rem current 10)]\n          (recur (/ (- current digit) 10) (cons digit result))\n        )\n       )\n    )\n )", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 99, "code": "(fn digits [a b]\n  (->> (* a b)\n       (iterate #(quot % 10))\n       (take-while (comp not zero?))\n       (map #(rem % 10))\n       reverse))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 99, "code": "(fn [x y] (loop [a (* x y)  result '()]  (if (= a 0) result (recur (quot a 10) (conj result (rem a 10))  )) ) )", "user": "53f1c05ee4b0742d9025b0e1"}, {"problem": 99, "code": "(fn [x y] \n    (loop [acc '() num (* x y)]\n      (if (< num 10) (cons num acc)\n        (recur (cons (mod num 10) acc) \n               (quot num 10)))))", "user": "537bde5de4b06839e8705e73"}, {"problem": 99, "code": "(fn sk [x y]\n  (map #(Integer/parseInt %) (map str (seq (str (* x y))))))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 99, "code": "(fn mu [x y]\n  (map (comp #(- % (int \\0)) int)\n    (seq (str (* x y)))))", "user": "53f7820be4b0de5c41848560"}, {"problem": 99, "code": "(fn [a b]\n    ;                        Fusion\n\t(->> (* a b) (str) (map (comp read-string str)) )\n)", "user": "53b9bb15e4b047364c0444ed"}, {"problem": 99, "code": "(fn f [& args]\n  (map\n   (fn [x] (Integer. (str x)))\n   (str (apply * args))))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 99, "code": "(fn [x y]\n\t(map #(Integer/parseInt %) (map str (str (* x y))))\n)", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 99, "code": "(fn\n    [x y]\n    (into [] (map #(Character/getNumericValue %) (str (* x y)))))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 99, "code": "(fn [x y] (map #(read-string (str %)) (str (* x y))))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 99, "code": "#(seq (map (fn [x] (- (int x) (int \\0))) (str (* %1 %2))))", "user": "540470dae4b0addc1aec6658"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "533018b2e4b019098a6f8b56"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (into [] (str (* a b)))))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 99, "code": "(fn product-digits\n  [x y]\n  (map #(java.lang.Character/getNumericValue %) (vec (str (* x y)))))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 99, "code": "(fn int->digitlist\n  ([x y] (into [] (reverse (int->digitlist (* x y)))))\n  ([x]\n     (let [digit (mod x 10)]\n       (if (> x 0)\n         (cons digit\n               (int->digitlist (quot x 10)))))))", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 99, "code": "(fn [x y] (map (comp read-string str) (seq  (str (* x y)))))", "user": "4fc9a977e4b0ee37620e1847"}, {"problem": 99, "code": "(fn [x y] \n  (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48) (seq (str (* x y)))))", "user": "52c672e2e4b0c2d177d6210e"}, {"problem": 99, "code": "#(map read-string (map str (map identity (str (* %1 %2)))))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 99, "code": "(fn [x y]\n  (loop [p (* x y)\n         acc []]\n    (if (zero? p)\n      acc\n      (recur (quot p 10) (cons (rem p 10) acc))\n    )\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 99, "code": "(fn [x y]\n  ((fn foo [z]\n     (if (= z 0) []\n       (conj (foo (quot z 10)) \n             (mod z 10)))) \n   (* x y)))", "user": "54133900e4b01498b1a719de"}, {"problem": 99, "code": "(fn digit [a b]\n  (let [n (* a b)]\n    (if (zero? n)\n      [0]\n      (loop [retval [] n n]\n        (if (zero? n)\n          retval\n          (recur (concat [(rem n 10)] retval) (quot n 10)))))))", "user": "541096bde4b01498b1a719b2"}, {"problem": 99, "code": "(fn [e1 e2]\n  (vec (map #(Character/getNumericValue % ) (str (* e1 e2)))))", "user": "54094824e4b0addc1aec66da"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y) str (map #(- (int %) 48))))", "user": "537f4652e4b06839e8705eb1"}, {"problem": 99, "code": "(fn [a b]\n    (let [digits (fn [x] (map (fn [c] (- (int c) (int \\0))) (seq (str x))))] \n      (digits (* a b))))", "user": "50cae881e4b0f75dcc9a6e51"}, {"problem": 99, "code": "(fn [a b]\n  (let [to-digits (fn self [ds n]\n                    (if (zero? n)\n                      ds\n                      (self (conj ds (mod n 10)) (quot n 10))))]\n    (to-digits '() (* a b))))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 99, "code": "(fn product-of-digits [a b]\n  (map #(Character/getNumericValue %) (str (* a b))))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 99, "code": "(fn [n1 n2] (mapv #(Integer/parseInt (str %)) (str (* n1 n2))))", "user": "53347274e4b0656e627bfd6b"}, {"problem": 99, "code": "#(map (fn[c] (- (int c) (int \\0))) (seq (str (* %1 %2))))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 99, "code": "#(map read-string (map str (seq (str (* %1 %2)))))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 99, "code": "(fn\n  [x y]\n  (map (fn [s] (Long/valueOf (str s))) (str (* x y))))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 99, "code": "(fn product-digits\n  ([x y] (reverse (product-digits (* x y))))\n  ([n] (if (zero? n)\n         nil\n         (cons (mod n 10) (product-digits (quot n 10))))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 99, "code": "#(loop [k (* %1 %2) rez '()]\n   (if (zero? k)\n     rez\n     (recur (quot k 10) (conj rez (rem k 10)))))", "user": "53e76728e4b036ad0777e47c"}, {"problem": 99, "code": "#((fn f [x] (conj (if (> x 9) (f (quot x 10)) []) (rem x 10))) (* % %2))", "user": "52541fe6e4b0541d1855b964"}, {"problem": 99, "code": "(fn f[x1 x2] (map #(- (int %) (int \\0)) (str (* x1 x2))))", "user": "52382d91e4b0fae3832e99f0"}, {"problem": 99, "code": "(fn [x y] (reverse ((fn [k l res] (if (> l k) (conj res k) (recur (quot k l) l (conj res (mod k l))))) (* x y) 10 [])))", "user": "511036c5e4b04c71fce993ee"}, {"problem": 99, "code": "(fn [x y]\n        (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 99, "code": "(fn [a b]\n  (loop [p (* a b) res []]\n    (if (> p 0)\n      (let [modp (mod p 10)]\n        (recur (/ (- p modp) 10) (cons modp res)))\n      res)))", "user": "541c1e46e4b01498b1a71a70"}, {"problem": 99, "code": "(fn multiply [a b]\n  (let [prod (* a b)]\n    (loop [remainder prod\n           acc ()]\n      (let [big (quot remainder 10)\n            small (mod remainder 10)\n            output (conj acc small)]\n        (if (zero? big)\n          output\n          (recur big output))))\n    )\n  )", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 99, "code": "#(cond \n    (= % 1) [1]\n  \t(= % 99) [8 9 1]\n    true [9 8 9 0 1]\n  \t:else %2)", "user": "54213a8fe4b01498b1a71aaf"}, {"problem": 99, "code": "(fn mprodvec\n  [op1 op2]\n  (map #(read-string (str %)) (vec (str (* op1 op2)))))", "user": "540efe2ee4b0addc1aec6724"}, {"problem": 99, "code": "#(map (fn [x] (- x (int \\0))) (map int (reverse (reverse (str (* %1 %2))))))", "user": "54246d6de4b01498b1a71aec"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "5282f54be4b0239c8a67ada0"}, {"problem": 99, "code": "(fn oieur [x y]\n  (let [num-chars (seq (str (* x y)))]\n   (map #(read-string (str %)) num-chars)))", "user": "54299d4be4b01498b1a71b3d"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       str\n       (map #(- (int %) (int \\0)))))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 99, "code": "(fn [a b] (map #(Integer. (.toString %)) (vec (str (* a b)))))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) (str) (seq) (map #(Integer/parseInt (str %)))))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 99, "code": "(fn pdg [a b]\n   (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/getNumericValue %) (str (* a b))))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 99, "code": "#(loop [n (* %1 %2) res ()]\n        (if (= 0 n) res\n          (recur (/ (- n (rem n 10)) 10) (conj res (rem n 10)))))", "user": "54302691e4b0dad94371f2d7"}, {"problem": 99, "code": "(comp (partial map #(- (int %) 48)) str *)", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 99, "code": "(fn [x y]\n  (into []\n\t(map #(- (int %) 48) (str (* x y)))))", "user": "53c51dc5e4b00fb29b221288"}, {"problem": 99, "code": "#_(fn [x y] \n  (map #(Integer/parseInt (str %)) \n       (seq (str (* x y)))))\n\n\n#(for [x (str (* %1 %2))] (Integer/parseInt (str x)))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 99, "code": "(fn [x, y] \n   (map #(Character/digit % 10) (str (* x y))))", "user": "54336443e4b0b6b47310fcde"}, {"problem": 99, "code": "#(map (fn [c] (Integer/parseInt (str c))) (str (* %1 %2)))", "user": "51c3c6a6e4b0851ac09658f8"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer. (str %))\n       (str (* a b))))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 99, "code": "(fn F [a b]\n  (map (comp read-string str) (str (* a b))))", "user": "4f856adfe4b033992c121c44"}, {"problem": 99, "code": "(fn[a b]\n(loop [x (* a b)\n       c []]\n  (if (< x 10)\n    (reverse (conj c x))\n    (recur (int (/ x 10)) (conj c (rem x 10) )))))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 99, "code": "(fn [& v] (map (comp bigint str) (seq (str (apply * v)))))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 99, "code": "(fn f99 [x y]\n  (seq (map  (fn [m] (- (int m) 48)) (str (* x y))))\n  )", "user": "526698c9e4b03e8d9a4a7144"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) str (map int) (map #(- % 48)) vec))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 99, "code": "#(loop\n    [v (* % %2), l []]\n    (if (= 0 v) l (recur (quot v 10) (cons (rem v 10) l)))\n  )", "user": "543a68d3e4b032a45b869326"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt %) (rest (clojure.string/split (str (* x y)) #\"\"))))", "user": "53da3fcde4b0e771c3025497"}, {"problem": 99, "code": "(comp  (partial map #(- (int %) 48)) seq str * )", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 99, "code": "#((fn digits\n  [n]\n  (if (zero? n)\n    []\n    (conj (digits (quot n 10)) (mod n 10)))) (* %1 %2))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 99, "code": "(fn [a b] \n  (map #(- (int %) (int \\0)) \n       (str (* a b))))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 99, "code": "(fn [x y] \n  (let [num2seq (fn [n] \n                  (loop [n n s nil]\n                    (if (> n 0) \n                      (recur (quot n 10) (cons (rem n 10) s))\n                      s)))]\n    (let [res (* x y)]\n      (num2seq res))))", "user": "5385e633e4b06839e8705f08"}, {"problem": 99, "code": "(fn [x y] (map (fn [c]\n                 (Integer/valueOf (str c))) \n               (str (* x y))))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 99, "code": "(fn [x y] \n  (map #(Integer/valueOf (str %))  \n       (str (* x y))))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 99, "code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 99, "code": "(fn [a b]\n    (letfn [(digits [n] (if (> n 0) (cons (rem n 10) (digits (quot n 10)))))]\n      (reverse  (digits (* a b)))))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 99, "code": "(fn product-digits\n  [s1 s2]\n  (into [] (map #(- (int %) (int \\0)) (str (* s1 s2)))))", "user": "52561295e4b0541d1855ba03"}, {"problem": 99, "code": "(fn [x y] (map #(Character/getNumericValue %) (seq (str(* x y)) ) ) )", "user": "542baf7ce4b0dad94371f291"}, {"problem": 99, "code": "(fn seq-num [a b]\n  (rseq\n   (loop [result [] num (* a b)]\n     (if (= 0 num)\n       result\n       (recur (conj result (mod num 10)) (quot num 10))))))", "user": "53a511aae4b0b62ce3005735"}, {"problem": 99, "code": "(fn [a b]\n    (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 99, "code": "#(loop [n (* %1 %2) acc '()] (if (zero? n) acc (recur (quot n 10) (conj acc (mod n 10)))))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 99, "code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "user": "542c2de0e4b0dad94371f29f"}, {"problem": 99, "code": "(fn [x y]\n    (->> (seq (str (* x y)))\n      (map #(Character/getNumericValue %))))", "user": "515ebde3e4b01e5d11ccd0a8"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (vec (str (* x y)))))", "user": "4e526cc4535d302ef430da74"}, {"problem": 99, "code": "(fn [x y]\n  (vec\n  \t(map #(- (int %) (int \\0)) (str (* x y)))))", "user": "54448e84e4b032a45b869393"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 99, "code": "#({1[1]9[8 9 1]99[9 8 9 0 1]}%2)", "user": "4db2903f535df7e46ed9b6bf"}, {"problem": 99, "code": "(comp (partial map #(- (int %) 48)) str *)", "user": "5412646de4b01498b1a719d4"}, {"problem": 99, "code": "(comp (fn [x]\n        (loop [n x acc '()]\n          (if (> n 10)\n            (recur (int (/ n 10))\n                   (conj acc (mod n 10)))\n            (conj acc n))))\n      *)", "user": "530a6cbae4b02e82168697be"}, {"problem": 99, "code": "(fn [a b]   \n   (#(loop [x % l []] \n     (if (= 0 (quot x 10)) (cons (mod x 10) l) (recur (quot x 10) (cons (mod x 10) l))\n       )\n     ) (* a b)\n    )   \n  )", "user": "51e1c176e4b06a68e693eafb"}, {"problem": 99, "code": "(fn [a b ] (map  #(Integer/parseInt %) (map str (seq (str (* a b))))))", "user": "544ac9b5e4b0e39780006959"}, {"problem": 99, "code": "#((fn f [a n] (if (= 0 n) a (recur (cons (mod n 10) a) (quot n 10)))) '() (* % %2))", "user": "52f8b86de4b047fd55836fdb"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       (str)\n       (re-seq #\"\\d\")\n       (map #(Integer/parseInt %))\n       (into [])))", "user": "50ebd63ce4b04edc3377703c"}, {"problem": 99, "code": "(fn pd [x y] \n \t((fn digits [z]\n      (if (= 0 z)\n        []\n        (conj (digits (quot z 10)) (rem z 10) )\n      )\n    ) (* x y) )\n)", "user": "54078851e4b0addc1aec66bd"}, {"problem": 99, "code": "(fn mult-seq [x y] ;;for some reason java calls are erroring out, so the hard way\n  (let [product (* x y) \n        digitMap {\"1\" 1 \"2\" 2 \"3\" 3 \"4\" 4 \"5\" 5 \"6\" 6 \"7\" 7 \"8\" 8 \"9\" 9 \"0\" 0}]\n    (map #(get digitMap %) (map str (seq(str product))))))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y) (str) (vec) (map (comp #(Integer/parseInt %) str))))", "user": "534941d1e4b084c2834f4a60"}, {"problem": 99, "code": "(fn [a b] \n  (let [k (* a b), i (count (str (* a b)))]\n    (reverse (map rem \n      (map unchecked-divide-int (repeat i k) (take i (iterate (partial * 10) 1)))\n      (repeat 10)\n    ))\n))", "user": "54524afbe4b0e397800069bc"}, {"problem": 99, "code": "(fn [a b] (map read-string (re-seq #\"\\d\" (str (* a b)))))", "user": "52485723e4b05ef8e38e63d2"}, {"problem": 99, "code": "(fn[n m](map #(- (int %) (int \\0)) (str (* n m))))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 99, "code": "(fn productdigits [x1 x2]\n  (let [product (* x1 x2)]\n    (loop [p product\n           acc '()]\n      (if (< p 1)\n        (vec acc)\n        (recur (unchecked-divide-int p 10) (conj acc (mod p 10)))))))", "user": "544257b4e4b032a45b869379"}, {"problem": 99, "code": "#(map (fn [x] (Integer. x)) (rest (clojure.string/split (str (* %1 %2)) #\"\")))", "user": "545801f6e4b01be26fd74615"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* %1 %2)))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 99, "code": "#(map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} (vec (str (* %1 %2))))", "user": "54580586e4b01be26fd74616"}, {"problem": 99, "code": "#(->> (* %1 %2) str seq (map str) (map (fn [x] (Integer. x))))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 99, "code": "#(map (comp read-string str) (seq (str (* %1 %2))))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 99, "code": "(fn [x y] (let [n (* x y)]\n            (reverse ((fn jp [x] (if (= x 0) () (cons (rem x 10) (jp (/ (- x (rem x 10)) 10))))) n))\n            \n            ))", "user": "544e1794e4b0e39780006980"}, {"problem": 99, "code": "(fn [a b] (map #(. Integer valueOf (str %)) (str (* a b))))", "user": "5367bc60e4b0243289761e81"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (seq (str (* x y)))))", "user": "5460f59ce4b01be26fd74695"}, {"problem": 99, "code": "(fn [x y]\n  (let [prod (* x y)]\n    (map #(Character/getNumericValue %) (seq (str prod)))))", "user": "526e1bd0e4b03e8d9a4a730b"}, {"problem": 99, "code": "(fn product\n  [n1 n2]\n  (map #(Character/getNumericValue %) (str (* n1 n2))))", "user": "53b85932e4b047364c0444db"}, {"problem": 99, "code": "#(doall (->> (* % %2)\n        (str)\n        (partition 1)\n        (flatten)\n        (map str)\n        (map read-string)))", "user": "5461c402e4b01be26fd746a6"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y) result ()]\n    (if (< n 10)\n      (conj result n)\n      (recur (quot n 10) (conj result (mod n 10))))))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 99, "code": "(fn product-digits\n   [a b]\n   (map #(Integer/parseInt (str %)) (str (* a b)))\n   )", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 99, "code": "(fn [& args]\n  (map #(Character/getNumericValue %) (str (apply * args))))", "user": "4ecb1641535d6d7199dd370e"}, {"problem": 99, "code": "#(let [xy (* %1 %2)\n       a (fn [n acc]\n  (if (< n 1)\n    acc\n    (recur (quot n 10)\n           (cons (rem n 10) acc)\n       )))]\n  (a xy []))", "user": "544e9022e4b0e3978000698b"}, {"problem": 99, "code": "(fn pd ([x y] (pd [] (* x y) 10))\n  \t   ([digits n d] (if (> n 9) (pd (cons (mod n d) digits) (int (/ n d)) d) (cons n digits))))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "user": "4fdb881ee4b05e33b9224f5e"}, {"problem": 99, "code": "#(map (fn [ch] (- (int ch) (int \\0))) (seq (str (* % %2))))", "user": "5417bc50e4b01498b1a71a0f"}, {"problem": 99, "code": "(comp (partial map #(Character/digit % 10)) str *)", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 99, "code": "(fn[x y]\n  (->> (* x y)  str seq (map int) (map #(- % 48))))", "user": "54651ef5e4b01be26fd746d5"}, {"problem": 99, "code": "(fn [a b] (map (fn [c] (- (int c) (int \\0))) (str (* a b))))", "user": "51672d15e4b079759a74a5e7"}, {"problem": 99, "code": "(fn [x y]\n  ((fn helper [acc number]\n    (let [next (mod number 10)\n          rest (quot number 10)\n          acc (cons next acc)]\n      (if (= rest 0)\n        acc\n        (helper acc rest)))) '() (* x y)))", "user": "5456e4e7e4b080a794c2c883"}, {"problem": 99, "code": "#(apply vector (map (fn [c] (Integer/valueOf (str c))) (str (* %1 %2))))", "user": "5458a729e4b01be26fd74622"}, {"problem": 99, "code": "(fn [x y] (map (fn[digit] (Integer/valueOf (str digit)))  (str (* x y))))", "user": "5461873de4b01be26fd746a3"}, {"problem": 99, "code": "(fn[a b] (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "54540453e4b0e397800069d2"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "5462caf5e4b01be26fd746b7"}, {"problem": 99, "code": "(fn [x y](map #(Character/getNumericValue %)(seq (str (* x y )))))", "user": "54630cdae4b01be26fd746bb"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "5462c5abe4b01be26fd746b5"}, {"problem": 99, "code": "(fn f ([x y](f (* x y)))\n       ([x](\n            conj (vec (if (> x 10) (f (quot x 10)))) (mod x 10)\n        ))\n   )", "user": "546280d8e4b01be26fd746b0"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "user": "5136f659e4b04059df19f2fd"}, {"problem": 99, "code": "(fn [a b] (map #(Integer. (str %)) (str (* a b))))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (seq (str (* a b)))))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 99, "code": "(fn [x y]\n  (let [num (* x y)]\n    (loop [n num res []]\n      (if (zero? n)\n        res\n        (recur (quot n 10) (cons (mod n 10) res))))))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 99, "code": "(fn [a b]\n  (let [prod (* a b)]\n    (loop [digits []\n           x prod]\n      (if (= x 0)\n        digits\n        (recur (cons (rem x 10) digits) (quot x 10))))))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 99, "code": "(fn [x y]\n  ((fn to-digits [x]\n     (if (< x 10)\n       (vector x)\n       (conj (to-digits (int (/ x 10))) (mod x 10))))\n   (* x y)))", "user": "54651faee4b01be26fd746d6"}, {"problem": 99, "code": "(fn [a b]\n  (let [n (* a b)]\n    (loop [i n lst '()]\n      (if (<= 0 i 9)\n        (cons i lst)\n        (recur (quot i 10) (cons (rem i 10) lst))\n      )\n    )\n  )\n)", "user": "543bb568e4b032a45b869334"}, {"problem": 99, "code": "#(vec (map (comp read-string str) (str (* %1 %2))))", "user": "5252b59de4b0541d1855b8cf"}, {"problem": 99, "code": "(fn [lhs rhs]\n  (loop [n (* lhs rhs)\n         digits []]\n    (if (= n 0)\n      (reverse digits)\n      (recur (quot n 10) (conj digits (rem n 10))))))", "user": "54651982e4b01be26fd746d4"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/digit % 10)\n       (str (* a b))))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 99, "code": "(fn [a b] (map #(Integer. (str %)) (str (* a b))))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 99, "code": "#(map\n   (fn [x] (- (int x) (int \\0)))\n   (str (* %1 %2)))", "user": "52a9154ee4b0c58976d9ac3b"}, {"problem": 99, "code": "(comp (partial map #(- (int %) 48)) str *)", "user": "4fe9de74e4b0547ebccb2475"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 99, "code": "(fn product-digits [x y]\n\t(let [f (fn [s] (map (comp #(Integer/parseInt %) str) s))]\n\t(-> (* x y) str seq f)))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 99, "code": "(fn [n m]\n  (let [p (* n m)]\n    (into [] (map (fn [s] (Long. s)) (map str (into [] (Long/toString p)))))\n    )\n  )", "user": "546d41bde4b00cfc9eacc18c"}, {"problem": 99, "code": "(fn [x y]\n  (let [num (* x y)\n        str-num (str num)]\n    (map #(- (int %) (int \\0)) str-num)))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 99, "code": "#((fn get-digits[number coll](if (> number 0)(conj (get-digits (int (/ number 10)) coll) (mod number 10)) coll)) (* %1 %2) [])", "user": "545537c1e4b0e397800069dd"}, {"problem": 99, "code": "(fn [x y] \n(map read-string  (map str (seq (str (* x y))))))", "user": "5471f090e4b094393f72dd6e"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* % %2)))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 99, "code": "(fn [a b]\n\t(loop [x (* a b) res '()]\n      (if (= 0 x)\n        res\n        (recur (quot x 10) (cons (mod x 10) res)))))", "user": "539ddf25e4b0b51d73faaf3e"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "user": "534bfc71e4b084c2834f4a88"}, {"problem": 99, "code": "(fn [a b]\n(vec\n(#(map (fn [i] (- (int i) 48)) (str %)) (* a b))))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 99, "code": "(fn [x y] (map #(read-string (str %)) (vec (str (* x y)))))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 99, "code": "(fn [a b]\n  \t(loop [l [] i (* a b)]\n    \t(if (> i 0)\n      \t\t(recur (cons (rem i 10) l) (quot i 10))\n      \t\tl\n      \t)\n    )\n)", "user": "548018dbe4b0c51c1f4d732a"}, {"problem": 99, "code": "(fn axbdigs [a b]\n  (map (fn char->digit [x]\n       (- (int x) 48))\n     (str (* a b))))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 99, "code": "(fn [x y] \n     (map #(- (int %) 48) (seq ( str (* x y )))))", "user": "52d24f60e4b099d49816f0a8"}, {"problem": 99, "code": "(fn [a b]\n   (let [product (* a b)\n         next-quot (iterate (fn [n] (quot n 10)) product)\n         reminders (for [x next-quot :while (> x 0)] (rem x 10))]\n     (reverse reminders)))", "user": "54357066e4b0b6b47310fcfd"}, {"problem": 99, "code": "(comp vec (partial map #(Integer/parseInt (str %))) str *)", "user": "54577fefe4b01be26fd7460d"}, {"problem": 99, "code": "#(if (zero? (* % %2))\n         '(0)\n         (loop [x (* % %2)\n                accum '()]\n           (if (zero? x)\n             accum\n             (recur (quot x 10) (cons (rem x 10) accum)))))", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 99, "code": "(fn\n  [a b]\n  (->> [a b]\n       (apply *)\n       (str)\n       (re-seq #\"\\d\")\n       (map read-string)))", "user": "5484143de4b0e286459a1197"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n      str\n      (map (fn [c] (- (int c) (int \\0))))))", "user": "5032748ae4b0e78df07b092f"}, {"problem": 99, "code": "#(map (fn [x] (- x 48)) (map int (into [] (flatten (partition 1 (str (* %1 %2)))))))", "user": "54852ad0e4b0e286459a11a7"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) 48)) (seq (.toString (* % %2))))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 99, "code": "(fn [a b]\n  (map (comp read-string str) (seq (str (* a b)) ) ))", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 99, "code": "#(read-string (str \"[\" (clojure.string/join \" \" (vec (str (* % %2)))) \"]\"))", "user": "544fbabce4b0e39780006999"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       str\n\n       (map int)\n       (map #(- % 48))))", "user": "54848141e4b0e286459a119e"}, {"problem": 99, "code": "(fn [a b]\n  (loop [result [] rem (* a b)]\n    (if (zero? rem)\n      (reverse result)\n      (recur (conj result (mod rem 10)) (int (/ rem 10))))))", "user": "54856d54e4b0e286459a11aa"}, {"problem": 99, "code": "(fn f [n m]\n  (mapv #(read-string (str %)) (str (* n m))))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 99, "code": "(fn [a b]\n    (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "535943b3e4b04ce2eb3ed295"}, {"problem": 99, "code": "(fn [v1 v2] \n  (map #(Integer/parseInt %) (rest (clojure.string/split (str (* v1 v2)) #\"\"))))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 99, "code": "(fn product-digits [a b]\n  (let [mul (* a b)\n        chars (seq (str mul))]\n    (map #(Integer/parseInt (str  %)) chars)))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 99, "code": "(fn [a b]\n  (let [prod (* a b)]\n    (->> (str prod)\n         (partition 1)\n         (map (partial apply str))\n         (map #(Integer/valueOf %)))))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 99, "code": "(fn [x y]\n  (map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9}\n       (str  (* x y)))\n  )", "user": "540997ede4b0addc1aec66dd"}, {"problem": 99, "code": "(fn [x y]\n\t(loop [res (* x y) prod []]\n\t\t(if (zero? res)\n\t\t\t(vec prod)\n\t\t\t(recur (quot res 10) (concat [(mod res 10)] prod))\n\t\t)\n\t)\n)", "user": "5472d919e4b094393f72dd7b"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n      (str)\n      (map #(Character/getNumericValue %))))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 99, "code": "(fn [a b]\n  (loop [i (* a b) s []] (if (> i 0) (recur (quot i 10) (cons (mod i 10) s)) s)))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y) \n         col []]\n    (if (<= n 0)\n      col \n      (recur (int (/ n 10))\n             (cons (mod n 10) col)))))", "user": "54194782e4b01498b1a71a29"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer. %) (map str (seq (str (* a b))))))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt %) (map str (seq (str (* x y))))))", "user": "50f3bd98e4b041536e2eca3a"}, {"problem": 99, "code": "(fn [x y]\n   (->> (* x y)\n        str\n        seq\n        (map #(->\n                %\n                int\n                (- 48)))))", "user": "53b12c76e4b047364c04448a"}, {"problem": 99, "code": "(fn [x y] (map #(Character/getNumericValue %) (vec (str (* x y)))))", "user": "52540bcce4b0541d1855b952"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "51d26b0ae4b0d13b04db0d97"}, {"problem": 99, "code": "#(map (comp (partial + -48) int) (str (* % %2)))", "user": "51c611c4e4b03a28d42333bf"}, {"problem": 99, "code": "(fn [x y] (->> (* x y)\n               .toString\n               (map #(Integer/parseInt (str %)))))", "user": "548f5086e4b0e286459a1239"}, {"problem": 99, "code": "(fn [a b]\n   (vec (map #(Integer/parseInt (str %)) (seq (str (* a b))))))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/digit % 10) (str (* a b))))", "user": "5317d78ee4b08068f379ed63"}, {"problem": 99, "code": "(fn [a b] (map #(- (int (char %)) 48) (str (* a b))))", "user": "54965534e4b0b312c081ff65"}, {"problem": 99, "code": "(fn [a b] (loop [buf '() n (* a b)]\n             (if (< n 10)\n               (conj buf n)\n               (recur (conj buf (mod n 10)) (/ (- n (mod n 10) ) 10))\n               )))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 99, "code": "(fn [x y]\n  (loop [div 10 num (*  x y) ret []]\n    (if (zero? num)\n      ret\n      (recur (* div 10) (int (/ num 10)) (cons(rem num 10) ret))\n      )\n    )\n         \n  )", "user": "54975e99e4b0b312c081ff72"}, {"problem": 99, "code": "(fn [x y] \n   (map #(Character/getNumericValue %)\n    (into [] (str (* x y)))))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 99, "code": "(fn [x y]\n    (map #(Character/getNumericValue %) (vec (str (* x y)))))", "user": "549c181ce4b0f3d1d8e70f83"}, {"problem": 99, "code": "(fn [x y]\n    (map #(Character/digit % 10) (str (* x y))))", "user": "4f9b3532e4b0dcca54ed6d13"}, {"problem": 99, "code": "(fn blah [n m] (map #(- (int %) 48) (str (* n m))))", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 99, "code": "#(map (fn [x] (Integer. (str x))) (str (* % %2)))", "user": "549def9ce4b0f3d1d8e70f99"}, {"problem": 99, "code": "#(let [n (* % %2)]\n\t\t(loop [a [] r n]\n\t\t\t(if (< r 10)\n\t\t\t\t(cons r a)\n\t\t\t\t(recur (cons (rem r 10) a) (quot r 10)))))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 99, "code": "#(map (fn [x] (Character/digit x 10)) ((comp vec str *) % %2))", "user": "52e16face4b09f7907dd1421"}, {"problem": 99, "code": "(fn [& xs ] (mapv (fn [c] (- (int c) 48)) (str (apply * xs))))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 99, "code": "(comp (partial map read-string) (partial map str) str *)", "user": "512b07f7e4b078b06821febb"}, {"problem": 99, "code": "#(->> (apply * %&)\n     (str)\n     (map (fn [x] (- (int x) 48))))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 99, "code": "(fn [x y] (map #(Character/getNumericValue %) (seq (str (* x y)))))", "user": "4e7e241a535db169f9c79705"}, {"problem": 99, "code": "(fn [x y]\n  (letfn [(split-numbers [x]\n            (map #(Integer/valueOf (str %)) (str x)))]\n    (split-numbers (* x y))))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 99, "code": "(fn product-digits [x y]\n  (letfn [(digits [n]\n          (cond (= n 0) []\n                :else (concat (digits (int (/ n 10))) [(rem n 10)])))]\n    (digits (* x y))))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 99, "code": "#(map (fn [x] (- (int x ) 48)) (seq (str (apply * %&))))", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 99, "code": "(comp vec (partial map #(- (int %) 48)) seq str *)", "user": "549cd548e4b0f3d1d8e70f91"}, {"problem": 99, "code": "#(for [c (str (* % %2))] (- (int c) 48))", "user": "50ef4e2be4b0a78662fa2653"}, {"problem": 99, "code": "(fn p99-prod-digits [a b]\n  (loop [accum '() prod (* a b)]\n    (if (= prod 0)\n      accum\n      (recur (conj accum (mod prod 10)) (int (/ prod 10))))))", "user": "543b12cce4b032a45b86932a"}, {"problem": 99, "code": "(fn [a b] (map #(Integer. (str %)) (seq (str (* a b)))))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt %) (map str (str (* a b)))))", "user": "52c45ac8e4b0c2d177d620d9"}, {"problem": 99, "code": "(fn f [z1, z2](reverse ((fn f [x](if (> x 0) (concat [(rem x 10)] (f (/ (- x (rem x 10)) 10))) '())) (* z1 z2))))", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 99, "code": "(fn product-digits [a b] \n\n  (map read-string (rest (clojure.string/split (str (* a b)) #\"\")))\n  \n)", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 99, "code": "(fn [a b] (map #(read-string (str %)) (str (* a b))))", "user": "52c08c59e4b07a9af5792351"}, {"problem": 99, "code": "(fn [l r]\n   (map #(Integer/parseInt (str %)) (seq (str (* l r)))))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       (iterate #(quot % 10))\n       (take-while pos?)\n       (map #(rem % 10))\n       reverse))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "50ec69e0e4b04edc3377704a"}, {"problem": 99, "code": "#((fn digits \n  ([n] (digits n 10))\n  ([n base] (digits n base '()))\n  ([n base acc]\n     (if (< n base)\n       (conj acc n)\n       (recur (quot n base) base (conj acc (rem n base))))))\n  (* %1 %2))", "user": "543d89dfe4b032a45b869350"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 99, "code": "#(map (comp read-string str) (seq (str (* %1 %2))))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 99, "code": "#(map (fn [x] (- x (int \\0)))\n  (map int (str (* % %2))))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "user": "545d5c3be4b01be26fd7466d"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* % %2)))", "user": "5499e23de4b03163384f4706"}, {"problem": 99, "code": "(fn [x y] (map #(Integer. %) (drop 1 (clojure.string/split (str (* x y)) #\"\"))))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 99, "code": "(fn[x,y] (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "user": "4fabbd3ee4b081705acca21e"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0))\n       (pr-str (* x y))))", "user": "5343753ae4b084c2834f4a1b"}, {"problem": 99, "code": "#(let [append-remainder (fn ar\n                          [list remaining-num]\n                          (let [new-remaining-num (int (/ remaining-num 10))\n                                new-list (cons (rem remaining-num 10) list)]\n                            (if (zero? new-remaining-num)\n                              (flatten new-list)\n                              (ar new-list new-remaining-num))))]\n  (append-remainder [] (* %1 %2)))", "user": "53fe459ae4b0de5c418485f4"}, {"problem": 99, "code": "#(map read-string (map str (vec (str(* %1 %2)))))", "user": "53e3e353e4b036ad0777e406"}, {"problem": 99, "code": "(fn [x y] (map (fn [^Character c] (Character/digit c 10)) (str (* x y))))", "user": "54b61cb1e4b05787c3b163b3"}, {"problem": 99, "code": "(fn [x y]\n  (let [prod (* x y)\n        string (str prod)]\n    (map #(Character/getNumericValue %) string)\n        \n    ))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 99, "code": "(fn [a b] ((fn [r n] (if (= n 0) (reverse r) (recur (conj r (rem n 10)) (quot n 10)))) [] (* a b)))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 99, "code": "(fn [& args] (map #(read-string (str %)) (str (apply * args))))", "user": "515b03fee4b0a102a3e5262a"}, {"problem": 99, "code": "(fn [n1 n2]\n  (letfn [(parseint [c] (- (int c) 48))]\n    (->> (* n1 n2) str seq (map parseint))))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 99, "code": "(fn product-digits [n m]\n  (vec (map #(Integer/parseInt (str %)) (flatten (partition 1 (str (* n m)))))))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 99, "code": "(fn\n  [n m]\n  (map (comp read-string str) (str (* n m))))", "user": "5383668ee4b06839e8705edd"}, {"problem": 99, "code": "(fn [a b]\n (map\n  (comp read-string str)\n  (str (* a b))))", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 99, "code": "#(map (fn [x] (Character/digit x 10)) (str (* % %2)))", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 99, "code": "(fn [x y] (reduce (fn [r x] (conj r (rem x 10))) () (take-while (comp not zero?) (iterate #(quot % 10) (* x y)))))", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 99, "code": "(fn [n1 n2] (map #(Character/getNumericValue %) (Long/toString (* n1 n2))))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 99, "code": "#(map read-string (map str (seq (str (* %1 %2)))))", "user": "54bec835e4b0ed20f4ff6ef7"}, {"problem": 99, "code": "(fn digits [a b] \n   (letfn [(inner [x] \n                  (if (zero? x) \n                    [] \n                    (conj (inner (int (/ x 10))) (rem x 10))))]\n     (inner (* a b))))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5485b402e4b0e286459a11b0"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/digit % 10) (str (* a b))))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 99, "code": "(fn [v1 v2]\n  (map #(Integer/parseInt (str %)) (str (* v1 v2))))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 99, "code": "(fn [a b]                                                                                                                                                                             \n (map #(Character/digit % 10) (str (* a b))))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 99, "code": "#(let [g (fn f[x]\n           (if (zero? x) nil\n             (cons (mod x 10) (f (quot x 10)))))]\n   (reverse (g (* %1 %2))))", "user": "5488537be4b0e286459a11cf"}, {"problem": 99, "code": "#(let [to-digits (fn to-digits [n base]\n  (let [r (rem n base)\n        n' (int (/ n base))]\n    (if (= 0 n')\n      [r]\n      (vec (concat (to-digits n' base) [r])))))]\n  (to-digits (* %1 %2) 10))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 99, "code": "(fn [a b]\n  (map\n   #(- (int %) (int \\0))\n   (-> (* a b) str seq)))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 99, "code": "(fn [x y]\n  (reverse\n\t  (map #(rem % 10)\n    \t   (take-while pos?\n                   (iterate #(quot % 10) (* x y))))))", "user": "54c271b9e4b045293a27f602"}, {"problem": 99, "code": "#(loop [n  (* %1 %2)  r ()]\n\t(if (> n 9) (recur (quot n 10) (conj r (mod n 10))) (conj r n)))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 99, "code": "#(map (comp bigint str) (str (* % %2)))", "user": "54bc539be4b0ed20f4ff6eca"}, {"problem": 99, "code": "(fn [x y] \n  (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "546692aee4b01be26fd746e7"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "514fd753e4b0b449e54b8e00"}, {"problem": 99, "code": "(fn [& r] (apply (comp #(map read-string %) \n           #(map str %) \n           seq \n           str \n           *) r))", "user": "5432df22e4b0dad94371f2f5"}, {"problem": 99, "code": "(fn [x y] (map  #(Integer/parseInt (str %)) (str (* x y))))", "user": "52950ab6e4b02ebb4ef7501a"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) str seq (map #(Character/getNumericValue %))))", "user": "549dd591e4b0f3d1d8e70f98"}, {"problem": 99, "code": "(fn [a b]\n    (let [d\n          (fn [n]\n            (loop [l (list) n n]\n              (if (= n 0)\n                l\n                (recur (conj l (mod n 10)) (int (/ n 10)))\n                )\n              )\n            )\n          ] \n      (d (* a b))\n      )     \n    )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 99, "code": "(fn [x y]\n  (map\n     #(Integer/parseInt (str %1))\n     (seq (str (* x y)))))", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer.\n         (re-find #\"\\d\" %1))\n       (rest\n        (clojure.string/split\n         (str\n          (* a b)) \n         #\"\"))))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 99, "code": "(fn digit-product [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "54c641f8e4b045293a27f628"}, {"problem": 99, "code": "(fn f [x y] \n  (->> (* x y)\n       (str)\n       (seq)\n       (map str)\n       (map #(Integer/parseInt %))))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 99, "code": "(fn [a b]\n   (map #(Character/digit % 10) (str (* a b))))", "user": "51e595a6e4b0efabf93c02d8"}, {"problem": 99, "code": "(comp (fn [n] (letfn [(iter [n ds] (if (zero? n) ds (recur (quot n 10) (cons (rem n 10) ds))))] (iter n []))) *)", "user": "5481be5fe4b0e286459a1172"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y) str (map (comp #(Integer/parseInt %) str))))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 99, "code": "(fn [a b] (for [d (seq (str (* a b)))]\n            (- (int d) (int \\0))))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 99, "code": "(fn product-digits [x y]\n  (loop [digits [], remainder (* x y)]\n    (let [digit (rem remainder 10)]\n   \t\t(if (<= remainder 0) digits\n    \t\t(recur   (concat [digit] digits)   (quot remainder 10) \n)))))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "54cbb0fde4b057c6fda3a27b"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "user": "54d03026e4b018d918be98de"}, {"problem": 99, "code": "#((fn to-digits [n]\n  (if (< n 10) [n]\n    (conj (to-digits (quot n 10)) (rem n 10)))) (* %1 %2))", "user": "54ce3790e4b057c6fda3a2ab"}, {"problem": 99, "code": "(fn [x y] (map #(Integer. (str %)) (str (* x y))))", "user": "54d0e6c5e4b0e8a36923e5d4"}, {"problem": 99, "code": "(fn [num1 num2]\n  (let [strng (str (* num1 num2))\n        ascii (map int (seq strng))]\n\n    (map #(- % 48) ascii)))", "user": "54bebeb9e4b0ed20f4ff6ef4"}, {"problem": 99, "code": "#(map read-string (map str (seq (str (apply * %&)))))", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- % 48)\n       (map int (seq (str (* x y))))))", "user": "4f35e662e4b0e243712b1ec6"}, {"problem": 99, "code": "(fn [a b]\n   ((fn ass [x acc] (if (zero? x) acc (recur (quot x 10) (cons (mod x 10) acc)))) (* a b) nil))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer. (str %)) (str (* a b))))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/getNumericValue %)\n       (str (* a b))))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 99, "code": "(fn [& numbers]\n  (let [sum (reduce * numbers)\n        num->digits (fn [num]\n                      (loop [n num res []]\n                        (if (zero? n)\n                          res\n                          (recur (quot n 10) (cons (mod n 10) res)))))]\n    (num->digits sum)))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 99, "code": "#(map read-string (re-seq #\"[0-9]\" (str (* %1 %2))))", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 99, "code": "(fn foo [x y]\n  (for [c (str (* x y))] ({\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} c)))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 99, "code": "(fn[x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 99, "code": "(fn [x y]\n(drop-while zero? (for [i (take 10 (iterate #(/ % 10) 1000000000))]\n                    (if (> i 0)\n                      (mod (quot (* x y) i) 10))))\n)", "user": "53664e3be4b0243289761e74"}, {"problem": 99, "code": "(fn [a b]\n  (map (comp read-string str) (seq (str (* a b)))))", "user": "5215661be4b02f6d8ea676c7"}, {"problem": 99, "code": "(comp (fn f [n] (if (> n 10) (conj (f (quot n 10)) (mod n 10)) (vector n))) *)", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 99, "code": "(comp\r\n  (fn digits [x] \r\n    (if (< x 10) [x] (conj (digits (quot x 10)) (mod x 10))))\r\n  *)", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 99, "code": "(fn [x y] (map (comp #(- % 48) int) (str (* x y))))", "user": "4f7207d3e4b07046d9f4f019"}, {"problem": 99, "code": "#(->> (* %1 %2) str (map int) (map (partial + -48)))", "user": "54d6c80ce4b0a52adc2e2020"}, {"problem": 99, "code": "#(loop [n (* % %2) a ()] (if (zero? n) a (recur (quot n 10) (conj a (mod n 10)))))", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (seq (str (* x y)))))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 99, "code": "#(map (fn [v] (- v 48)) (map int (str (* % %2))))", "user": "540d0087e4b0addc1aec670b"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0))(str (* a b))))", "user": "54d4b3a7e4b0a52adc2e2003"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "user": "54d2b411e4b0e8a36923e5f9"}, {"problem": 99, "code": "(fn [x y]\n  (for [c (str (* x y))]\n    (Character/digit c 10)))", "user": "510a3cd4e4b06956752d35ad"}, {"problem": 99, "code": "(fn prob99b [n1 n2] (map #(- (int (identity %)) 48) (str (* n1 n2))))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 99, "code": "(fn [x y]\n    (let [char-digit->int (fn [char-digit]\n                            (- (int char-digit) (int \\0)))]\n      (map char-digit->int (str (* x y)))))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 99, "code": "(fn\n  [x y]\n  (loop [left (* x y)\n         res []]\n    (if (zero? left)\n      res\n      (recur (int (/ left 10)) (cons (mod left 10) res)))))", "user": "54e0e911e4b024c67c0cf7bc"}, {"problem": 99, "code": "(fn [m n] \n  (loop [remaining (* m n)\n         result    ()]\n     (if (< remaining 10)\n       (conj result remaining)\n       (recur (quot remaining 10) (conj result (mod remaining 10))))))", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 99, "code": ";; (comp (partial map (comp #(Integer/parseInt %) str)) seq str *)\n;; (comp (partial map #(Character/digit % 10)) seq str *)\n(comp (partial map #(Character/digit % 10)) str *)", "user": "4db6d993535d1e037afb2180"}, {"problem": 99, "code": ";;(fn [& nums] (map #(Character/digit % 10) ((comp seq str) (apply * nums))))\n;;(comp (partial map #(Character/digit % 10)) str *)\n#(for [c (str (apply * %&))] (Character/digit c 10))", "user": "54485727e4b032a45b8693c6"}, {"problem": 99, "code": "; copied from others after failed attempts with Math \n(fn [x y] (map #(- (int %) 48) (str (* x y))))", "user": "54e3bd3fe4b024c67c0cf7e0"}, {"problem": 99, "code": "(fn foo [x, y]\n  (let [bar (fn bar [r]\n              (if (< r 10)\n                [r]\n                (conj (bar (quot r 10)) (mod r 10)) \n              ))\n       ]\n      (bar (* x y))))", "user": "54b050cee4b09f271ff37d13"}, {"problem": 99, "code": "(fn [x y]\n  (let [n    (* x y)\n        tens (iterate #(quot % 10) n)]\n    (->> tens\n         (take-while pos?)\n         (mapv #(rem % 10))\n         (rseq))))", "user": "4db85310535d1e037afb218b"}, {"problem": 99, "code": "(fn [x y]\n    (vec (map #(read-string (str %)) (str (* x y)))))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "user": "4e68c465535d8ccf87e9fe8a"}, {"problem": 99, "code": "(fn [x y]\n  (loop [a '()\n         n (* x y)]\n    (if (> 10 n)\n      (conj a n)\n      (recur (conj a (mod n 10)) (quot n 10)))))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 99, "code": "(fn p99 ([n] (loop [r '() n n]\n         (let [mod (mod n 10) rem (- n mod)]\n           (if (and (= 0 mod) (= 0 rem)) r (recur (conj r mod) (/ rem 10))))))\n  ([a b] (p99 (* a b))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 99, "code": "(fn [a b] (reduce #(conj %1 (. Integer parseInt (str %2))) [] (str (* a b))))", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 99, "code": "(fn [x y]\n  (loop [z (* x y) res '()]\n    (if (zero? z)\n      res\n      (recur (quot z 10) (cons (rem z 10) res)))))", "user": "543c5200e4b032a45b86933e"}, {"problem": 99, "code": "#(loop [n (* %1 %2) c ()]\n   (if (> n 0)\n     (recur (quot n 10) (conj c (mod n 10)))\n     c))", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 99, "code": "#(for [x (-> (* % %2) str seq)]\n    (Character/getNumericValue x))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "54a6baaee4b09f271ff37c8a"}, {"problem": 99, "code": "(fn [x y] (map #(Integer. (str %)) (str (* x y))))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 99, "code": "(fn multi-n2v [n1 n2]\n  (let [pow (fn [n1 n2] (apply * (repeat n2 n1)))\n        n2v (fn [n] \n              (vec \n                (reverse\n                  (for [i (range (count (str n)))]\n                    (rem (quot n (pow 10 i)) 10)))))]\n    (n2v (* n1 n2))))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (seq (str (* x y)))))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 99, "code": "(fn pd[n m]\n  (vec (map #(Integer/parseInt (str %)) (str (* n m)))))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 99, "code": "(fn [a b]\n  (reverse\n    ((fn dig [x]\n      (if (< 0 x)\n        (cons (rem x 10) (dig (quot x 10))))) (* a b))))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer. %) (reduce conj [] (map str (str (* x y))))))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 99, "code": "#(map (fn [c] (Integer/parseInt (str c))) (seq (str (* %1 %2))))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 99, "code": "(fn [x y] (map #(read-string (str %)) (seq (str (* x y)))) )", "user": "5480cce5e4b0e286459a115f"}, {"problem": 99, "code": "(fn expr [x y]  (map #(Character/getNumericValue %) (str (* x y))) )", "user": "54e5dc08e4b024c67c0cf800"}, {"problem": 99, "code": "(fn [a b]\n    (let [prod (* a b)]\n      (map #(- (int %) 48) (seq (str prod)))))", "user": "54508859e4b0e397800069a3"}, {"problem": 99, "code": "(fn [a b]\n  (loop [x (* a b) acc []]\n    (if (= x 0)\n      (reverse acc)\n      (recur (quot x 10)\n             (conj acc (mod x 10))))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 99, "code": "(fn seqDigits\n  [a b]\n  (let [splitDigits (fn splitD [x]\n                      (loop [myX x\n                             result '()]\n                        (if (= myX 0)\n                          result\n                          (recur (int (/ myX 10)) (conj result (mod myX 10))))))]\n    (splitDigits (* a b))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 99, "code": "(fn [x y] \n    (map #(Integer/parseInt (str %)) (into [] (str(* x y)))))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 99, "code": "(fn [x y]\n  (loop [num (* x y)\n         coll []]\n    (if (>= 0 num)\n      coll\n      (recur (/ (- num (rem num 10)) 10) (cons (rem num 10) coll)))))", "user": "54b31445e4b09f271ff37d35"}, {"problem": 99, "code": "#(map read-string (map str(vec(str (* %1 %2)))))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 99, "code": "(fn [x y]\n  (let [res (* x y)]\n    (map #(- (int %) (int \\0)) (seq (str res)))))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/getNumericValue %) (str (* x y))))", "user": "4db599e6535d87e67b28fe11"}, {"problem": 99, "code": "#(loop [number (* %1 %2) acc ()] (if (= 0 number) acc (recur (int (/ number 10)) (conj acc (mod number 10)))))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt %) (filter #(not (empty? %)) (.split (str (* x y)) \"\"))))", "user": "51b76227e4b0d906fcd71d35"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       str\n       (map (comp #(Integer/parseInt %) str))))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 99, "code": "(fn solve [x y]\n  ((fn rec [n]\n    (if (zero? n)\n      []\n      (conj (rec (quot n 10)) (mod n 10)))) (* x y)))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 99, "code": "(fn [a b]\n   (map #(Integer. (str %)) (seq (str (* a b))))\n  )", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "52cee992e4b07d0d72b27395"}, {"problem": 99, "code": "(fn [x y]\n  (loop [a (* x y) j []]\n    (if (= a 0)\n      (reverse j)\n      (recur (quot a 10) (conj j (mod a 10))))))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 99, "code": "(fn [x y] (map #(Integer. %)(re-seq #\"\\d\" (str (* x y)))))", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "54eee3a3e4b024c67c0cf879"}, {"problem": 99, "code": "#(vec (map (fn [x] (Integer/parseInt x))\n      (drop 1 \n            (clojure.string/split  (.toString (* % %2)) #\"\"))))", "user": "5236cd89e4b0e010857b4e45"}, {"problem": 99, "code": "(fn digM [x y] ((fn dig [n r] (if (= n 0) r (dig (quot n 10) (conj r (rem n 10)))) ) (* x y) `()))", "user": "550e0373e4b06e50f9beb162"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %)(int \\0)) (str (* a b))))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 99, "code": "(fn [x y] (map (comp #(- % 48) int) (.toString (biginteger (* x y)))))", "user": "544e8369e4b0e39780006987"}, {"problem": 99, "code": "(fn [x y]\n   (map #(read-string (str %)) (str (* x y))))", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 99, "code": "(fn [a b]\n  (loop [acc '()\n         ore (* a b)]\n    (if (= 0 ore) acc\n      (recur (cons (rem ore 10) acc) (quot ore 10))\n      )))", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (seq (str (* x y)))))", "user": "54f6f00fe4b01ecee9d88814"}, {"problem": 99, "code": "#(vec (map bigint (map str (vec (str (* % %2))))))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 99, "code": "(fn [x y]\n  (reverse (map #(rem % 10) (take-while (partial not= 0) (iterate #(quot % 10) (* x y))))))", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) 48)) (seq (char-array (.toString (* %1 %2)))))", "user": "52457931e4b08ba239308107"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "user": "53213810e4b09d4e7a9b54b0"}, {"problem": 99, "code": "(fn [x y]\n  (reverse \n   (let [ans (* x y)]\n     ((fn pd[a]\n       (if (< a 10) (cons a nil)\n         (cons (rem a 10) (pd (quot a 10))))) \n      ans))))", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (Character/toString %)) \n       (sequence (str (* a b)))))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 99, "code": "(fn [x y]\n   (reduce (fn [x y] (if (nil? x)\n                       (conj [] (Integer/parseInt (str y)))\n                       (conj x (Integer/parseInt (str y))))) nil (str (* x y))))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))) )", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 99, "code": "(fn [x y]\n  (let [n (str (* x y))]\n    (vec (map #(- (int %) 48) n))))", "user": "53908e6be4b0b51d73faae9a"}, {"problem": 99, "code": "(fn [a b] (map #(Integer. (.toString %)) (str (* a b))))", "user": "551535cee4b055c2f668d4df"}, {"problem": 99, "code": "(fn [one two] (map #(Character/digit % 10) (str (* one two))))", "user": "54b5ce67e4b05787c3b163ac"}, {"problem": 99, "code": "(fn [a b]\n  (mapv\n    #(Integer/parseInt\n       (str %))\n    (str\n      (* a b))))", "user": "52e087dde4b09f7907dd1412"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) 48)) (seq (str (* %1 %2))))", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* %1 %2)))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 99, "code": "(fn [a b]\n    (let [c (* a b)]\n      (loop [c c acc ()]\n        (if (zero? c)\n          acc\n          (recur (int (/ c 10)) (conj acc (mod c 10)))))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 99, "code": "(fn ds [a b] \n  (let [v (* a b)]\n    (loop [remain v result []]\n      (if (< remain 10)\n        (cons remain result)\n        (let [step (mod remain 10)]\n          (recur (/ (- remain step) 10) (cons step result)))))))", "user": "503f923fe4b00d1a725ff2ad"}, {"problem": 99, "code": "(fn [a b]\n  (letfn [(digit-list [n]\n                     (if (zero? n)\n                       []\n                       (conj (digit-list (/ (- n (rem n 10)) 10)) (rem n 10))))]\n    (digit-list (* a b))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt %) (re-seq #\"\\d\" (str (* a b)))))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 99, "code": "(fn p99\n  [a b]\n  (letfn [(int-to-chseq [i] (seq (String/valueOf i)))\n          (ch-to-int [ch] (Integer/parseInt (String/valueOf  ch)))\n          (digits [x] (map ch-to-int (int-to-chseq x)))]\n    (digits (* a b))))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 99, "code": "#((fn foo [x] (if (> x 0) (conj (foo (quot x 10)) (rem x 10)) [])) (* %1 %2))", "user": "5520974be4b08d5046aa8a63"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 99, "code": "(fn [x y]\n  (loop [r (* x y) d []]\n    (if (= r 0)\n      d\n      (recur (quot r 10) (cons (rem r 10) d)))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 99, "code": "(fn [a b]\n  (loop [product (* a b)\n         coll []]\n    (let [[q r] ((juxt quot rem) product 10)\n          ncoll (into [r] coll)]\n      (if (zero? q)\n        ncoll\n        (recur q ncoll)))))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 99, "code": "#(map read-string (re-seq #\"\\d+\" (str (list (partition 1 (str (* %1 %2)))))))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (seq (str (* x y)))))", "user": "552356fae4b0882d96d091af"}, {"problem": 99, "code": "(fn [x y] (read-string (clojure.string/join \" \" (str \"[\" (* x y) \"]\"))))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 99, "code": "#(map (comp read-string str) (seq (str (* %1 %2))))", "user": "551c66dae4b07993ea3788de"}, {"problem": 99, "code": "(fn [a b]\n  (let [cs (str (* a b))]\n    (for [c cs] (Character/getNumericValue c))))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 99, "code": "(fn productDigits [a b]\n  (->> (* a b)\n       (str)\n       (vec)\n       (map #(- (int %) 48))))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %)(int \\0) )  (str (* a b)) ))", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 99, "code": "#(map (fn [c] (- (int c) 48)) (str (* %1 %2)))", "user": "5524120fe4b0882d96d091b7"}, {"problem": 99, "code": "(fn [x y] (mapv #(Integer. %) (re-seq #\"\\d\" (str (* x y)))))", "user": "5005b57de4b0678c553fc46a"}, {"problem": 99, "code": "(fn [x y] (mapv #(Integer/parseInt (str %)) (seq (str (* x y)))))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 99, "code": "(fn[x y](map #(- (int %) 48) (seq (str (* x y)))))", "user": "54f15cb8e4b024c67c0cf8b1"}, {"problem": 99, "code": "(fn f [a b]\n  (let [c (* a b)]\n    (loop [c1 c, s1 '()]\n      (if (zero? c1)\n        s1\n        (recur (quot c1 10) (conj s1 (mod c1 10)))\n      )\n    )\n  )\n)", "user": "55280930e4b0ffed3738f93b"}, {"problem": 99, "code": "(fn[a b](map (fn[x](Character/getNumericValue x)) (str (* a b))))", "user": "54ecd7dde4b024c67c0cf85c"}, {"problem": 99, "code": "#(loop [n (* %1 %2) acc []]\n  (if (= n 0) (reverse acc)\n    (recur (quot n 10) (conj acc (rem n 10)))))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       str\n       vec\n       (map int)\n       (map #(- % 48))))", "user": "512e31e9e4b0b740abc59823"}, {"problem": 99, "code": "(fn product-digits\n  [& args] {:pre [(every? number? args)]}\n  (let [\n        ;; The actual multiplication is trivial.\n        product (apply * args),\n\n        ;; This next function is designed to be iterated. It produces a vector\n        ;; [d y], where d is the largest significant digit of its input x, and y\n        ;; is the remainder of x (that is, y=x-d*10^e for whatever value of e\n        ;; corresponds to the position of d in x).  If x reaches zero, we have\n        ;; already produced all the digits of the initial input, and further\n        ;; calls to digit-iter will return nil.\n        digit-iter\n        (fn [[_ x]]\n          (cond\n            (nil? x)      [nil nil]\n            (zero? x)     [nil nil]\n            (< -10 x 10)  [(int x) (* 10 (- x (int x)))]\n            :else         (recur [nil (/ x 10)])))\n\n        ;; Iterating digit-iter will suffice for most inputs (after the output\n        ;; is correctly formatted), but we want to include trailing zeroes for\n        ;; integers (that is, if the product is 10, we want to return the\n        ;; sequence (1 0), not just (1)).\n        ;;\n        ;; To deal with this, we create a mask that contains an integer for each\n        ;; digit left of the decimal point in our product, has a decimal point\n        ;; (a character \\.), and then repeats nil after that. Thus a nil value\n        ;; in (iterate digit-iter product) should be replaced with a 0 if the\n        ;; corresponding value in the mask is truthy, and dropped otherwise. The\n        ;; decimal point should be inserted before the corresponding digit, if\n        ;; that digit will not be dropped.\n        mask\n        (concat (->> (iterate (partial * 10) 1)\n                     (take-while (partial >= product)))\n                [\\.]\n                (repeat nil))]\n\n    (->> [nil product]        ; [nil 10.5\n         (iterate digit-iter) ; ([nil 10.5] [1 0.5] [0 5] [5 0] [nil nil] ...)\n         rest                 ; ([1 0.5] [0 5] [5 0] [nil nil] [nil nil] ...)\n         (mapcat (fn [mask-bit [d _]]\n                   (cond\n                     (= mask-bit \\.)  (if d [\\. d] nil)\n                     d                [d]\n                     mask-bit         [0]\n                     :else            [nil]))\n                 mask)            ; (1 0 \\. 5 nil nil ...)\n         (take-while identity)))) ; (1 0 \\. 5)", "user": "4fc6305de4b0ee37620e180b"}, {"problem": 99, "code": "(fn [a b]\n  ((fn [n l] (let [digit (rem n 10) rest (quot n 10)]\n          (if (= 0 rest) \n            (cons digit l)\n            (recur rest (cons digit l)))))\n\n\t(* a b) (list)))", "user": "4f4e78fee4b03ad3f0c10cc8"}, {"problem": 99, "code": "#(->> (* %1 %2) str (map (comp read-string str)))", "user": "55253217e4b0882d96d091ce"}, {"problem": 99, "code": "(fn [n1 n2]\n  (mapv #(Integer/parseInt (str %)) (str (* n1 n2))))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 99, "code": "#(let [x (str (* %1 %2))] (map (fn [x ] (- (int x) (int \\0))) x))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 99, "code": "(fn [x y]\n  (loop [num (* x y)\n         res []]\n    (if (= num 0)\n      (reverse res)\n      (recur (int (/ num 10)) (conj res (mod num 10))))))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 99, "code": "(fn [x y] (map #(read-string (str %)) (str (* x y))))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 99, "code": "#(map (comp read-string str) (seq (str (* %1 %2))))", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 99, "code": "(fn product-digits [x1 x2]\n   (letfn [(seq-num [input]\n                    (loop [res [] remaining input]\n                      (if (= remaining 0)\n                        (reverse res)\n                        (recur (conj res (mod remaining 10)) (quot remaining 10)))))]\n     (seq-num (* x1 x2))))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 99, "code": "#(map (comp read-string str identity) (str (* %1 %2)))", "user": "552bc0f5e4b0ffed3738f968"}, {"problem": 99, "code": "(fn digitize\n  [a b]\n  (map read-string (map str (vec (str (* a b))))))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 99, "code": "(fn [a b] (vec (map #(- (int %1) 48) (str (* a b)))))", "user": "52bb4be0e4b07a9af57922e2"}, {"problem": 99, "code": "#(loop [n (* % %2) res '()]\n\t(if (> n 9)\n    (recur (quot n 10) (conj res (mod n 10)))\n    (conj res (mod n 10))\n    )\n )", "user": "514504c2e4b021a5ff8301fc"}, {"problem": 99, "code": "(fn product\n  [a b]\n  (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "54c3747de4b045293a27f60e"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (vec (str (* a b)))))", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 99, "code": "(fn [n1 n2]\n  (map #(Integer/parseInt (str %)) (str (* n1 n2)))\n  )", "user": "55240916e4b0882d96d091b6"}, {"problem": 99, "code": "#(mapv (fn[s] (Integer. s)) (rest (clojure.string/split (str (* %1 %2)) #\"\")))", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 99, "code": "#(map (fn [digit] (Integer/parseInt (str digit))) (seq (str (* % %2))))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 99, "code": "#(let [r (* %1 %2)] (map (fn [s] (Integer/parseInt (str s))) (str r)))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 99, "code": "(fn number99 [x y]\n  (->> (* x y)\n       (str)\n       (re-seq #\"\\d\")\n       (map #(Integer. %))))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 99, "code": "(fn [a b]\n  (loop [n (* a b)\n         acc '()]\n    (if (zero? n)\n      acc\n      (recur (quot n 10) (conj acc (rem n 10))))))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "552694e7e4b0ffed3738f920"}, {"problem": 99, "code": "#(map (fn [d] (- (int d) (int \\0))) (str (* %1 %2)))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 99, "code": "#((fn [r a] (if (zero? r) a (recur (quot r 10) (cons (mod r 10) a)))) (* % %2) '())", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 99, "code": "(fn [a b]\n  (loop [m (* a b)\n         out []]\n    (if (zero? m)\n      out\n      (recur (quot m 10) (cons (mod m 10) out)))))", "user": "5530b827e4b076ab5578f818"}, {"problem": 99, "code": "(fn [a b] \n    (let [p (* a b)]\n      (loop [p p\n             acc '()]\n        (if (< p 10)\n          (vec (conj acc p))\n          (recur (quot p 10) (conj acc (mod p 10)))))))", "user": "5141a8f2e4b02fd87f5064c1"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) str (map #(- (int %) 48)) vec))", "user": "533b1dc4e4b0e30313ee6cc7"}, {"problem": 99, "code": "#(map (fn [d] (- (int d) 48)) (str (* %1 %2) ))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 99, "code": "(fn [x y]\n  (map read-string (map str (str (* x y)))))", "user": "553b87abe4b09218d5f45003"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "52ae886de4b0c58976d9acab"}, {"problem": 99, "code": "(letfn [(digs [n] (if (= n 0) [] (conj (digs (quot n 10)) (mod n 10))))]\n  #(digs (* %1 %2)))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 99, "code": "(fn [a b]\n  (letfn [(ch-to-int [ch] (Character/digit ch 10))]\n    (->>\n     (* a b)\n     str\n     (map ch-to-int))))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 99, "code": "(fn [x y] (reduce #(conj %1 (Character/getNumericValue %2)) [] (str (* x y))))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 99, "code": "(fn [i j]\n     (let [coll (str (* i j))] \n       (reduce #(conj % (read-string (str %2)))\n         [] coll)))", "user": "51bd255ce4b0df1216cefd94"}, {"problem": 99, "code": "(fn [x y] (loop [n (* x y) rs '()] (if (= n 0) rs (recur (int (/ n 10)) (conj rs (mod n 10))))))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt %) (map str (seq (str (* x y)))) ))", "user": "54926752e4b0b312c081ff44"}, {"problem": 99, "code": "(fn [a b]\n    (reverse (map #(mod % 10) (take-while (partial < 0) (iterate #(quot % 10) (* a b))))))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 99, "code": "(fn [x y]\n  ((fn f [n]\n     (if (< n 10)\n       [n]\n       (conj (f (quot n 10)) (rem n 10))))\n   (* x y)))", "user": "55495318e4b0a04f79299566"}, {"problem": 99, "code": "(fn[a b]  (map #(read-string %) (map str (seq(str(* a b)) ) )))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 99, "code": "(fn [x y] (map #(read-string (str %)) (apply list (str (* x y)))))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 99, "code": "(fn digit [x y]\n  (let [product (* x y)]\n    (loop [in product\n           out '()]\n      (if (= in 0) \n        out\n        (recur (int (/ in 10)) (cons (mod in 10) out))))))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 99, "code": "(fn [n m] (map #(- (int %) (int \\0)) (.toCharArray (str (* n m)))))\n\n; I like andthorn's solution: (fn [x y] (map #(read-string (str %)) (str (* x y))))\n; Is it cooler to not use Java calls?", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "user": "554dff83e4b00713264bd98d"}, {"problem": 99, "code": "(fn [x y] (reverse (map second (take-while (fn [[a b]] (not (and (zero? a) (zero? b))))\n                                                                          (rest (iterate (fn [[a b]] [(quot a 10) (rem a 10)])\n                                                                                         [(* x y) 0]))))))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 99, "code": "#((fn ! [a] (if (zero? a) nil (concat (! (int (/ a 10))) (vector (rem a 10))))) (* % %2))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "555093b2e4b00713264bd9ab"}, {"problem": 99, "code": "(fn [a b]\n   (let [n (* a b)]\n     (loop [x n\n            out []]\n       (let [d (rem x 10)\n             r (quot x 10)]\n         (if (= 0 d r)\n           out\n           (recur r (cons d out)))))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 99, "code": "(fn [x y](map (comp #(. Integer (parseInt %)) str) (vec (str (* x y)))))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 99, "code": "#(->> (* %1 %2) str (map str) (map read-string))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 99, "code": "(fn [x y]\n  (loop [acc () prod (* x y)]\n    (if (= prod 0)\n      acc\n      (recur (conj acc (mod prod 10)) (quot prod 10)))))", "user": "554edb85e4b00713264bd99a"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* % %2)))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 99, "code": "(fn [x y]\n  (->> (str (* x y))\n       (map #(Character/digit % 10))))", "user": "555521a5e4b0deb715856e12"}, {"problem": 99, "code": "(fn [a b]\n  (map #(-> % str Integer.)\n    (str (* a b))))", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue %)  (str (* a b))))", "user": "547c2c6ce4b0c51c1f4d72e3"}, {"problem": 99, "code": "#(letfn [ \n         (nums [x r]\n               (if (= x 0)\n       \t\t\t\tr \n                 \t(recur (quot x 10) (cons (rem x 10) r))))] \n   (nums (* %1 %2) []))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 99, "code": "(fn [a b] ((fn digits[sq c] (if (= 0 c) (reverse sq) (digits (conj sq (mod c 10)) (quot c 10)) )) [] (* a b)))", "user": "5280a1ece4b0757a1b171407"}, {"problem": 99, "code": "(fn [num-a num-b] \n  (loop [n (* num-a num-b)\n         digits []] \n    (if (zero? n)\n      digits\n      (recur \n        (int (/ n 10))\n        (cons (- n (* (int (/ n 10)) 10)) digits)))))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 99, "code": "(fn [x y]\n  (vec (map #(read-string %) (rest (clojure.string/split (format \"%d\" (* x y)) #\"\")))))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 99, "code": "(fn [x y]\n  (let [p (* x y)]\n    (map #(Character/digit % 10) (str p))))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "555ac933e4b0deb715856e49"}, {"problem": 99, "code": "(fn [x y] \n   (loop [num (* x y) \n          digits []]\n     (if (zero? num)\n       (reverse digits)\n       (recur (quot num 10) (conj digits (mod num 10))))))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 99, "code": "(fn [x y] (into [] (map #(Character/digit % 10) (seq (str (* x y))))))", "user": "553c4614e4b09218d5f45014"}, {"problem": 99, "code": "(fn [d i] (map #(Character/digit % 10) (str (* d i))))", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 99, "code": "(fn [x y] (mapv #(Character/getNumericValue %) (str (* x y))))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 99, "code": "(fn [x y]\n  (map read-string\n  (re-seq #\"\\d\"\n  (str (* x y))\n   ))\n  )", "user": "51427a8be4b0b50abeb46b37"}, {"problem": 99, "code": ";;(fn product-digits [x y]\n;;  (let [to-number {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9}]\n;;  (map to-number (vec (str (* x y))))))\n\n(fn product-digits [x y]\n  (let [to-digits {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9}]\n    (->> (* x y)\n         (str)\n         (vec)\n         (map to-digits))))", "user": "55429859e4b0a04f7929951f"}, {"problem": 99, "code": "(fn sol [a b] (->> (* a b) .toString seq (map #(- (int %1) 48))))", "user": "54857657e4b0e286459a11ac"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* % %2)))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 99, "code": "(fn [a b]\n  (loop [p (* a b) d '()]\n    (if (= 0 p)\n      d\n      (let [ones (rem p 10)]\n        (recur (/ (- p ones) 10) (conj d ones))))))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 99, "code": "(fn [a b]\n  (let [prod (* a b)]\n    (loop [acc (list)\n           prod prod]\n      (if (zero? prod)\n        acc\n        (recur (conj acc (mod prod 10))\n               (quot prod 10))))))", "user": "5553b924e4b0deb715856e06"}, {"problem": 99, "code": "#(map (fn [c] (- (int c) 48)) (str (* % %2)))", "user": "5562f08ae4b0c656e3ff17df"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %1) 48) (into [] (str (* a b)))))", "user": "553c05b7e4b09218d5f45011"}, {"problem": 99, "code": "(fn [a b] (loop [n (* a b) d '()] (if (< n 10) (conj d n) (recur (quot n 10) (conj d (mod n 10))))))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 99, "code": "#(map read-string (re-seq #\"\\d\" (str (* % %2))))\n\n;(fn [x y] (map read-string (re-seq #\"\\d\" (str (* x y)))))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 99, "code": "#(map (fn [x] (Integer/parseInt (str x))) (str (* % %2)))", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 99, "code": "(fn [x y]\n     (map (comp read-string str) (seq (char-array (str (* x y)))))\n )", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y)\n         a []]\n    (if (> n 10)\n      (recur (quot n 10) (cons (rem n 10) a))\n      (cons n a))))", "user": "5550b5a0e4b00713264bd9ad"}, {"problem": 99, "code": "(fn [a b]\n  (letfn [(digits [n]\n            (loop [res '() n n]\n              (if (zero? n)\n                res\n                (recur (conj res (rem n 10))\n                       (quot n 10)))))]\n    (digits (* a b))))", "user": "55586905e4b0deb715856e2b"}, {"problem": 99, "code": "(fn [a b]\n  (let [prod (* a b)]\n    (loop [n prod\n           result []]\n      (if (zero? n)\n        result\n        (recur (quot n 10) (cons (mod n 10) result))))))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       str\n       (map #(- (int %) 48))))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 99, "code": "(fn [x y] (map (comp read-string str) (str (* x y))))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 99, "code": "(fn [a b] (vec (map #(Integer/parseInt (str %)) (seq (str (* a b))))))", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 99, "code": "(fn [a b]\n  (->>\n   (* a b)\n   (str)\n   (map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9})\n   (into [])\n   )\n  )", "user": "4e28ddd1535deb9a81d77efd"}, {"problem": 99, "code": "(fn [x y]\n    ((fn [n] (map #(Character/getNumericValue %) (str n))) (* x y)))", "user": "54f8b6f4e4b01ecee9d8882c"}, {"problem": 99, "code": "(fn [x y]\n  ((fn [x v] \n     (let [m (mod x 10) d (long (/ x 10))] \n       (if (= x 0) v (recur d (cons m v)) )))\n    (* x y) [] ))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 99, "code": "(fn [x y]\n  (let [results (* x y)]\n    (->> results\n         (iterate #(quot % 10))\n         (take-while pos?)\n         (map #(rem % 10))\n         reverse)))", "user": "554b8572e4b0a04f79299589"}, {"problem": 99, "code": "(fn [a b] (map #(Integer. (str %)) (into [] (str (* a b)))))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 99, "code": "(fn pd [x y]\n   (loop [n (* x y) s []]\n     (if (> n 0)\n    \t (recur (quot n 10) \n         (conj s (mod n 10)))\n      (apply vector (reverse s)))))", "user": "556880dae4b0c656e3ff1856"}, {"problem": 99, "code": "(fn [a b]\n\t(map (fn [x] (- (int x) 48))(seq (str (* a b))) )  \n)", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (seq (str (* x y)))))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 99, "code": "#(map (fn [c] (java.lang.Character/digit c 10)) (str (* %1 %2)))", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 99, "code": "(fn [x y] (map #(Character/getNumericValue %) (seq (str (* x y)))))", "user": "52c70127e4b0c2d177d6211a"}, {"problem": 99, "code": "(fn [a b]\n  (\n   (fn self [x]\n     (cond\n       (< x 10) [x]\n       :else (conj (self (quot x 10)) (rem x 10))))\n   (* a b)))", "user": "55702081e4b09a3098a52529"}, {"problem": 99, "code": "(fn [a b]\n    (let [v (* a b)]\n      (map\n       {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9}\n       (seq (str v)))))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 99, "code": "(fn [a b]\n  (let [x (str (* a b))]\n    (map (comp read-string str) x)))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 99, "code": "#(map (comp bigint str) (seq (str (* %1 %2))))", "user": "556a3243e4b09a3098a524de"}, {"problem": 99, "code": "#(loop [acc '() n (* %1 %2)] (if (zero? n) acc (recur (conj acc (mod n 10)) (int (/ n 10))) ))", "user": "524f3e6de4b0541d1855b805"}, {"problem": 99, "code": "(fn [a b]\n  (reverse\n   ((fn func [num]\n      (let [q (quot num 10)\n            r (- num (* (quot num 10) 10))]\n        (if (= 0 q) \n          (list r)\n          (cons r (func q)))))\n    (* a b))))", "user": "53065acbe4b02e8216869792"}, {"problem": 99, "code": "#(->> %& (apply *) str (map (fn [n] (Integer/parseInt (str n)))))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 99, "code": "(fn mult [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 99, "code": "(comp \n (partial map #(Integer. (str %)))\n str\n *)", "user": "550fa523e4b06e50f9beb17a"}, {"problem": 99, "code": "(fn [a b]\n    (->> (* a b)\n         str\n         (map str)\n         (map #(Integer/parseInt %))))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 99, "code": "(fn [x y]\n  (loop [p (* x y)\n         q (quot p 10)\n         res [(rem p 10)]]\n    (if (> q 0)\n      (recur q (quot q 10) (conj res (rem q 10)))\n      (reverse res))))", "user": "52470d42e4b05ef8e38e6350"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue  %) (seq (str (* a b)))))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 99, "code": "(fn [x y] \n  (map #(Character/getNumericValue %) (str (* x y))))", "user": "553fa883e4b0a04f792994f9"}, {"problem": 99, "code": "(comp (partial map #(- (int %) 48)) seq str *)", "user": "52503747e4b0541d1855b828"}, {"problem": 99, "code": "#(map (fn[in](read-string (str in))) (seq (str (* %1 %2))))", "user": "5565d5e4e4b0c656e3ff181f"}, {"problem": 99, "code": "(fn [a b] (map #(read-string(str %)) (vec(str(* a b))) ))", "user": "52149e21e4b0961f15ac4d94"}, {"problem": 99, "code": "(fn [x y]\n  ((comp (partial map read-string)\n         (partial map str)\n         seq str) (* x y)))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (flatten (partition 1 (str (* x y))))))", "user": "557954aae4b05c286339e092"}, {"problem": 99, "code": "( fn [a b]\n  (map #(Character/getNumericValue %) \n       (format \"%d\" (* a b))\n  )\n)", "user": "5559b443e4b0deb715856e3c"}, {"problem": 99, "code": "(fn[a b] (seq (map (fn[x] (Integer/parseInt(str x))) (str (* a b)  ) )) )", "user": "55757e81e4b05c286339e063"}, {"problem": 99, "code": "#(->> (* % %2)\n      str\n      (map str)\n      (map (fn [n] (Integer/valueOf n)))\n      vec)", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 99, "code": "#(map (fn [x] (Integer. (str x))) (seq (str (* %1 %2))))", "user": "545ddac3e4b01be26fd74676"}, {"problem": 99, "code": "(fn [x y]\n  (into [] (map read-string (map str (seq (str (* x y)))))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 99, "code": "(fn [x y] ( reverse (\n   (fn eclate [r]\n     (if (zero? r)\n       ()\n       (cons (rem r 10) (seq (eclate (quot r 10)))) \n      )\n   ) (* x y) )) \n  )", "user": "556f2009e4b09a3098a52519"}, {"problem": 99, "code": "(fn [x y]\n  (loop [m (* x y) ls '()]\n    (if (= m 0)\n      ls \n      (recur (quot m 10 )  (conj ls (rem m 10)) )\n      )    \n    )\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       (str)\n       (into [])\n       (map #(->> % str read-string))\n       (into [])))", "user": "52ba447ee4b07a9af57922ce"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "user": "558466fce4b04192f3441eee"}, {"problem": 99, "code": "(fn [a b]\n  (loop [prod (* a b)\n         result '()]\n    (if (= 0 (quot prod 10))\n      (cons prod result)\n      (recur (quot prod 10) (cons (mod prod 10) result)))))", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "558378dce4b05c286339e115"}, {"problem": 99, "code": "(fn product-digits\n  [m n]\n  (let [product (* m n)]\n    ((fn digits\n  [n xs]\n  (if (zero? n)\n    xs\n    (digits (quot n 10) (cons (rem n 10) xs))))\n product [])))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 99, "code": "#(for [x (str (*' %1 %2))] (Integer/parseInt (str x)))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 99, "code": "(fn [a b] (loop [n (* a b) res []]\n    ( if (= 0 n)\n      res\n      (recur (/ (- n (rem n 10)) 10) ( concat [(rem n 10)] res )))))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5589e88ae4b0277789237610"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (seq (str (* a b)))))", "user": "558bb38fe4b0277789237631"}, {"problem": 99, "code": "(fn [x y] (let [n (* x y)] (apply vector (map read-string (rest (clojure.string/split (str n) #\"\"))))))", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 99, "code": "(comp vec (fn [x] (map #(Character/digit % 10) x)) seq str *)", "user": "4f070ce6535dcb61093f6c1e"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 99, "code": "(comp                                                                                                                           \n    (fn decompose [n]                                                                                                                                   \n        (if (< n 10)                                                                                                            \n            [n]                                                                                                                                         \n            (conj (decompose (quot n 10)) (rem n 10))))                                                                         \n    *)", "user": "558b50d5e4b027778923762b"}, {"problem": 99, "code": "(fn[x y](let[m (* x y)] (map #(Integer/parseInt (str %))(seq (str m)))))", "user": "555c6344e4b0b056612e224c"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5589a735e4b059ccff29b206"}, {"problem": 99, "code": "(fn [a b]\n  (map (comp read-string str) (seq (str (* a b)))))", "user": "5545477fe4b0a04f79299531"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/getNumericValue %) (str (* x y))))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 99, "code": "(fn\n   [n1 n2]\n   \n   (map #(Character/getNumericValue %) (str (* n1 n2)))\n   \n   \n   \n   )", "user": "55897fe2e4b059ccff29b205"}, {"problem": 99, "code": "(fn [n1, n2]\n  (map #(Character/getNumericValue %1) (seq (str (* n1 n2)))))", "user": "5590e55de4b0277789237676"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 99, "code": "(fn [a b] \n  (loop [n (* a b) res []]\n    (if (= 0 n)\n      res\n      (recur (int (/ n 10)) (cons (rem n 10) res ) ))))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 99, "code": "(fn [a b](map #(Integer/parseInt (str %)) (str (* a b))))", "user": "55895eade4b059ccff29b202"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 99, "code": "(fn haha [x y] \n  (map #(Character/digit % 10) (str (* x y))))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 99, "code": "#(loop [a (* %1 %2) xs `()]\n        (if (= a 0) \n          xs\n          (recur (quot a 10) (conj xs (mod a 10)))))", "user": "5590ebb1e4b0277789237677"}, {"problem": 99, "code": "#(map (fn [l] (Integer. (str l))) (str (* %1 %2)))", "user": "523630eee4b05f3be1c7c8e8"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "558f4fbae4b0277789237661"}, {"problem": 99, "code": "(fn [n1 n2]\n          (map #(read-string (str %)) (seq (str (* n1 n2)))))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/digit % 10) (seq (str (* a b)))))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 99, "code": "(fn [x y] (mapv (comp read-string str) (seq (str (* x y)))))", "user": "54eca495e4b024c67c0cf855"}, {"problem": 99, "code": "#(map read-string (map str (str (* %1 %2))))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 99, "code": "(fn [m n]\n  (->> (* m n)\n       (str)\n       (seq)\n       (map #(- (int %) 48))\n       (vec)))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 99, "code": "#((fn k [x]\n        (if (= x 0)\n          []\n          (conj (k (quot x 10)) (rem x 10))))\n      (* %1 %2))", "user": "5585f088e4b001b0851d7513"}, {"problem": 99, "code": "(fn [a b]\n  (drop-while zero? \n    (reverse \n      (map #(mod (int(/ (* a b) %)) 10)\n           (take 10 (iterate #(* 10 %) 1))))))", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/getNumericValue %) (str (* x y))))", "user": "5583888ae4b05c286339e117"}, {"problem": 99, "code": "(fn [n1 n2] (vec (map #(Integer/parseInt (str %)) (seq (str (* n1 n2))))))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 99, "code": "(fn [a b] ((fn ds [n]\n                  (if (< n 10) [n]\n                      (conj (ds (quot n 10)) (mod n 10)))) (* a b)))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* % %2)))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 99, "code": "#(loop [n (* %1 %2) r '()](if (zero? n) r (recur (/ (- n (mod n 10)) 10) (conj r (mod n 10)))))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 99, "code": "(fn [x y]\n  (loop [p (* x y)\n         q 10\n         r '()\n         l [0]]\n    (let [s (rem p q)\n          t (first l)]\n      (if (= p s)\n        (conj r (/ (- s (last l)) (/ q 10)))\n        (recur p (* 10 q) (conj r (/ (- s (last l)) (/ q 10))) (conj l s))))))", "user": "52f53589e4b05e3f0be25f2c"}, {"problem": 99, "code": "(fn [n m]\n  (let [res (* n m)]\n    (loop [ret ()\n           res-it res]\n      (if (= 0 res-it)\n        ret\n        (recur (conj ret\n                     (rem res-it 10))\n               (/ (- res-it (rem res-it 10))\n                  10))))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n      str\n      seq\n      (map (comp (fn [x] (Integer/parseInt x)) str))))", "user": "5369d072e4b0243289761ea1"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48)(Integer/toString (* x y))))", "user": "5576e78de4b05c286339e075"}, {"problem": 99, "code": "(fn [x y]\n  (loop [acc () k (* x y)]\n    (if (zero? k)\n      acc\n      (recur (conj acc (mod k 10)) (unchecked-divide-int k 10)))))", "user": "5576f299e4b05c286339e077"}, {"problem": 99, "code": "(fn [x y] (map #(Integer. %) (map str (seq (str (* x y))))))", "user": "4fdb0c0ae4b05e33b9224f57"}, {"problem": 99, "code": "#(letfn [(toseq [x] \n           (if (> x 0)\n               (let [z (mod x 10)] \n                 (cons z (toseq (/ (- x z) 10))))))]\n        (-> (* % %2) toseq reverse))\n\n\n#_(fn [p1 p2] ((fn toseq ([x] (toseq x '())) ([x y] (if (= x 0) y (let [z (mod x 10)] (recur (/ (- x z) 10) (conj y z)))))) (* p1 p2)))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %1)) (str (* x y))))", "user": "54fdaeace4b07d26eda61d39"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "user": "548c6673e4b0e286459a1209"}, {"problem": 99, "code": "(fn [l r] (loop [n (* l r) v []]\n            (if (zero? n)\n              (reverse v)\n          \t(recur (quot n 10) (conj v (rem n 10))))))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 99, "code": "(comp (partial map #(- (int %) (int \\0))) str *)", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 99, "code": "(fn [a b] ((fn vectorize [a] (if (= 0 a) [] \n                               (conj (vectorize (quot a 10))(rem a 10))))(* a b)) )", "user": "554a270fe4b0a04f79299570"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) str (map (fn [x] (Integer/parseInt (str x))))))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 99, "code": "(fn [& args] (into [] (map #(Integer/parseInt (str %)) (str (apply * args)))))", "user": "559972d1e4b031d6649c9bab"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer. (str %)) (seq (str (* x y)))))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 99, "code": "(fn [& rest] \n  (map \n   (comp read-string str) ((comp seq str) (reduce * rest))))", "user": "55306f9de4b076ab5578f814"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) str seq (map (comp #(Integer. %) str))))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 99, "code": "(fn numberthing [a b]\n  (->> (* a b)\n       str\n       (map #(Integer/parseInt (str %)))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 99, "code": "(fn [x y]\n (map #(- (int %) (int \\0)) (into [] (str (* x y)))))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b) str seq\n       (map (comp #(- % 48) int))))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 99, "code": "(fn explode-digits [a b]\n  (map #(Character/digit % 10) (seq (str (* a b)))))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer. (str %)) (str (* x y)))\n  )", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 99, "code": "(fn prod-dig [x y]\n  (map #(- (int %) (int \\0)) \n       (seq (str (* x y)))))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 99, "code": "(fn [m n] \n  ((fn [v result]\n     (if (= v 0) \n       (if (= (count result) 0) [v] result)\n       (recur (quot v 10) (cons (mod v 10) result)))\n   )  \n  (* m n) []))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 99, "code": "(fn [x y]\n  (let [z (* x y)]\n    (map #(rem % 10) \n         (reverse (take-while pos? (iterate #(quot % 10) z))))))", "user": "553527ede4b09218d5f44fab"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y) sqnc []]\n    (if (zero? n)\n      (reverse sqnc)\n      (recur (quot n 10) (conj sqnc (mod n 10))))))", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (apply list (str (* a b)))))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 99, "code": "(fn [a b]\n   (loop [ n (* a b) res '()]\n   (if (> n 10)\n     (recur (quot n 10) (conj res (rem n 10) ))\n     (conj res n)\n     )\n\n     ))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 99, "code": "#(->> (* % %2) str (map (fn [c] (- (int c) 48))))", "user": "552a793ee4b0ffed3738f955"}, {"problem": 99, "code": "(fn [x y]\n  (letfn [(digits [x result]\n            (let [q (quot x 10)]\n              (if (zero? q)\n                (rseq (conj result x))\n                (recur q (conj result (rem x 10))))))]\n    (digits (* x y) [])))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 99, "code": "#(let [mn (* %1 %2)]\n   (loop [m mn r []]\n     (if (= 0 m) (vec (reverse r))\n       (recur (long (/ m 10)) (conj r (rem m 10)))\n  )))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 99, "code": "(fn f \n  [num1 num2]\n  (let [split #(map str %)\n        parse #(Integer/parseInt %)]\n    (->> (* num1 num2) str split (map parse))))", "user": "55a62092e4b0acc240e31554"}, {"problem": 99, "code": "(fn [a b] (map (comp read-string str) (seq (str (* a b)))))", "user": "553a43cae4b09218d5f44ff2"}, {"problem": 99, "code": "(fn [a b]  (map #(read-string (str %)) (str (* a b))))", "user": "543823f1e4b032a45b869311"}, {"problem": 99, "code": "(fn [n1 n2]\n  (map #(- (int %) 48) (str (* n1 n2))))", "user": "54a627bce4b09f271ff37c83"}, {"problem": 99, "code": "(fn [& args]\n  (let [product (apply * args)\n        digits (str product)]\n    (map #(. java.lang.Integer (parseInt (str %))) digits)))", "user": "559c4236e4b066d22e731f67"}, {"problem": 99, "code": "(fn mult-and-seq \n  [& nums]\n  (map #(- (int %) 48) ((comp vec str) (apply * nums))))\n\n;; comp -> can be dropped due to the sequence abstraction that map provides", "user": "5553b729e4b0deb715856e05"}, {"problem": 99, "code": "(fn [a b] \n  (letfn [(seqn [n]\n               (loop [numx n res []]\n                 (if (= 0 numx)\n                   res\n                   (recur (quot numx 10) (cons (rem numx 10) res))\n                   )))]\n    (seqn (* a b)))\n  )", "user": "54530382e4b0e397800069cc"}, {"problem": 99, "code": "(fn p99 [& args]\n  (->> (reduce * args)\n       (str )\n       (seq )\n       (map #(Integer. (str %)) )\n       )\n  )", "user": "5400e918e4b0de5c41848619"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       str\n       (map str)\n       (map read-string)))", "user": "50ec409ce4b04edc33777045"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) 48)) (seq (str (* %1 %2))))", "user": "554756b8e4b0a04f79299549"}, {"problem": 99, "code": "(fn [x1 x2] \n  (map #(. Character getNumericValue %) (str (* x1 x2))))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 99, "code": "(fn [x y]\n  (let [nx (atom (* x y))\n        ds (atom '())]\n    (while (>= @nx 1)\n      (do\n        (swap! ds (fn [x] (cons (mod @nx 10) x)))\n        (swap! nx #(quot %1 10))))\n    @ds))", "user": "5351fca5e4b084c2834f4aec"}, {"problem": 99, "code": "#(map read-string (map str (str (* %1 %2))))", "user": "55a0e139e4b0acc240e31504"}, {"problem": 99, "code": "(fn [n1 n2] (->> (* n1 n2) str (map #(Integer. (str %)))))", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "4faf97d8e4b081705acca258"}, {"problem": 99, "code": ";; obviously could do string manip, but it's not really in\n;; the spirit of the problem\n(fn [a b]\n  (loop [x (* a b), n 10000, ds []]\n    (if (pos? n)\n      (let [d (quot x n)]\n        (recur (- x (* d n)) (quot n 10) (conj ds d)))\n      (drop-while zero? ds))))", "user": "52cb6bb0e4b07d0d72b2734c"}, {"problem": 99, "code": "#(->> (* %1 %2) str seq (map (comp read-string str)))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 99, "code": "(fn [a b]\n    (map #(Integer/valueOf (str %)) (str (* a b)))\n    )", "user": "5245e320e4b09dbe66b56177"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 99, "code": "(fn [x y] (vec (map #(Integer. (str %)) (str (* x y)))))", "user": "4f0f174c535d0136e6c22330"}, {"problem": 99, "code": "#(->>  (* %1 %2)  str (map identity ) (map (fn [x] (Character/digit x 10))))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 99, "code": "#(\n->>\n(* %1 %2)\nstr\nseq\n(map (fn [x] (Integer/parseInt (str x))))\n)", "user": "54c8eb61e4b045293a27f658"}, {"problem": 99, "code": "#(loop [val (* %1 %2) res []]\n   (if (> val 9)\n     (recur (quot val 10) (conj res (mod val 10)))\n     (reverse (conj res val))))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 99, "code": "(comp (partial map #(- (int %) (int \\0))) str *)", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 99, "code": "(fn [x y]\n    (vec (map #(Integer/parseInt (str %)) (str (* x y)))))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str seq\n      (map str)\n      (map read-string))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 99, "code": "(fn d [s t]\n   (vec ( map (fn [e] (Integer/parseInt (Character/toString e))) (seq (str (* s t)) ))))", "user": "52c911dde4b0c2d177d6213a"}, {"problem": 99, "code": "(fn [x y]\n  \n  (map #(Character/getNumericValue %) (str (* x y)))\n  \n  )", "user": "55b1ab40e4b0da326a65cf6e"}, {"problem": 99, "code": "#(map read-string (re-seq #\"\\d\" (str (* % %2))))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 99, "code": "#(for [c (str (* % %2))] (- (int c) 48))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (seq (str (* x y)))))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 99, "code": "(fn [x y]\n  (map (fn [d] (- (int d) (int \\0)))\n       (str (* x y))))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 99, "code": "(fn [x y]\n   (->> (* x y) str seq (map str) (map #(Integer/valueOf %))))", "user": "51f66891e4b06ff1c25c52c1"}, {"problem": 99, "code": "(fn mult [x y]\n  (let [m (* x y)\n        s (seq (.toString m))]\n    (map #(Integer/parseInt (.toString %)) s)))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 99, "code": "#(map (comp (partial + -48) int) (seq (str (* % %2))))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt %) (filter #(not (= \"\" %)) (clojure.string/split (str (* a b)) #\"\"))))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 99, "code": "(fn [& rest] (map #(- (int %) 48) (seq (str (apply * rest)))))", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 99, "code": "#( \n  map\n   read-string \n    (re-seq #\"[0-9]\"\n      (str (* %1 %2))))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 99, "code": "(fn [a b] \n  (vec (map #(Integer. %) (re-seq #\"\\d\" (str (* a b))))))", "user": "553f70cae4b0a04f792994f8"}, {"problem": 99, "code": "(fn [x y]\n  (let [p (* x y)]\n    (loop [p p digits ()]\n      (if (zero? p)\n        digits\n        (recur (int (/ p 10)) (cons (mod p 10) digits))\n        )\n      )\n    )\n  )", "user": "55c68089e4b0e31453f649c4"}, {"problem": 99, "code": "(comp #(map read-string %) #(map str %) str *)", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 99, "code": "#(map (fn [s] (Integer. s)) (map str (seq (str (* %1 %2)))))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 99, "code": "(comp (partial map #(Character/digit % 10)) str *)", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 99, "code": "#(loop [digits ()\n             n (apply * %&)]\n   (if (= n 0) digits\n       (recur (cons (rem n 10) digits)\n              (quot n 10))))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 99, "code": "(fn [a b] \n  (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "5589a941e4b059ccff29b207"}, {"problem": 99, "code": "(fn [a b] (map #(int (bigint (str %))) (seq (str (* a b)))))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 99, "code": "(fn [x y] (mapv #(Integer/valueOf (str %)) (str (* x y))))", "user": "5586f418e4b059ccff29b1de"}, {"problem": 99, "code": "(fn [a b]\n                   (vec (map (comp read-string str)  (str (* a b)))))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 99, "code": "(fn rr [a b]\n  (reverse\n  (map \n    #(quot (rem (* a b) %) (quot % 10))\n    (take (.length (String/valueOf (* a b))) \n          (iterate #(* 10 %) 10)))))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       str\n       seq\n       (map #(Integer. (str %)))))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 99, "code": "#(->>(* % %2)\n      str seq\n      (map str)\n      (mapv read-string))", "user": "553093bee4b076ab5578f817"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (.toString %)) (seq (str (* x y)))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 99, "code": "#(->> (* % %2)\n      (str)\n      (map str)\n      (map read-string))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 99, "code": "(fn [x y] (map #(read-string (str %)) (str (* x y))))", "user": "4f435ee8e4b0d7d3c9f3fd1f"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/decode (str %)) (seq (str (* a b)))))", "user": "4fffa422e4b0678c553fc404"}, {"problem": 99, "code": "(fn [n1 n2] (map #(Integer/parseInt (str %)) (str (* n1 n2))))", "user": "54722c55e4b094393f72dd74"}, {"problem": 99, "code": "#(map (fn [c] (- (int c) 48)) (seq (str (* %1 %2))))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 99, "code": "(fn [a b] (mapv #(read-string (str %)) (str (* a b))))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 99, "code": "(fn [a b]\n          (letfn [(step [i]\n                    (if (pos? i)\n                      (cons (rem i 10) (step (quot i 10)))))]\n            (reverse (step (* a b)))))", "user": "55ded9fde4b050e68259b3e7"}, {"problem": 99, "code": "(fn [n1 n2]\n         (map #(. Integer parseInt (str %)) (into [] (str (* n1 n2)))))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt %) (map str (seq (str (* x y))))))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y) result []]\n    (if (zero? n)\n      result\n      (recur (quot n 10) (cons (rem n 10) result))\n    )\n  )\n)", "user": "51f09f3de4b0274c496158d7"}, {"problem": 99, "code": "(fn mult* [x y]\n  (let [listify (fn list-ify\n                  [n]\n                  (if (= 0 (quot n 10))\n                    (list n)\n                    (concat (list-ify (quot n 10)) (vector (mod n 10)))))]\n    (listify (* x y))\n    ))", "user": "54c9571ee4b045293a27f66b"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) str (re-seq #\"[0-9}]\") (map read-string) vec))", "user": "54924f64e4b0b312c081ff42"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48)(str (* x y)))\n )", "user": "55e1d34ae4b050e68259b421"}, {"problem": 99, "code": "(fn [x y]\n   (reduce #(conj % (. Long parseLong %2)) [] (rest (clojure.string/split (str (* x y)) #\"\"))))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 99, "code": "(fn [a b]\n  (->>\n       (* a b)\n       str\n       seq\n       (map #(Integer/parseInt (str %)))\n       (apply vector)))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 99, "code": "(fn product-digits [a b]\n  (map #(Character/getNumericValue %) (str (* a b))))", "user": "534056fce4b085b17e897dac"}, {"problem": 99, "code": "(fn [m n ] (apply vector (map #(- (int %) 48) (apply list (str (* m n ))))))", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "user": "55041b5ee4b086ebe8a79c78"}, {"problem": 99, "code": ";; the math way\n(fn [a b]\n  (drop-while zero? \n    (reverse \n      (map #(mod (int(/ (* a b) %)) 10)\n           (take 10 (iterate #(* 10 %) 1))))))", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 99, "code": "(fn [x y] (mapv #(Integer/parseInt (str %)) (-> (* x y) str seq)))", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 99, "code": "(fn [lnum rnum]\n  (vec (map #(read-string (str %)) \n            (str (* lnum rnum)))))", "user": "55e856bae4b0121d4835fd8d"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n      str\n      (map #(mod (int %) 48))))", "user": "55c652dde4b0e31453f649bd"}, {"problem": 99, "code": "(fn digit-seq [a b]\n  (loop [p (* a b) q (quot p 10) r '()] (if (= q 0) (conj r p) (recur q (quot q 10) (conj r (- p (* q 10)))))))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 99, "code": "(fn [x y]\n  (loop [m (* x y) r []]\n    (if (= m 0)\n      (reverse r)\n      (recur (quot m 10) (conj r (rem m 10))))))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 99, "code": "#(map read-string (re-seq #\"\\d\" (str (* %1 %2))))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 99, "code": "#((fn [[head & tail]]\n    (let [digit (rem head 10)\n          trunc (unchecked-divide-int head 10)]\n      (if (= trunc 0)\n        (cons digit tail)\n        (recur (cons trunc (cons digit tail))))))\n   [(* %1 %2)])", "user": "55e2f502e4b050e68259b43c"}, {"problem": 99, "code": "(\n       fn [x y]\n       (\n         map\n         read-string\n         (map str (str (* x y)))\n         )\n       )", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* %1 %2)))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 99, "code": "(fn [x1 x2]\n  (->> [x1 x2]\n       (apply *)\n       (str)\n       (reduce (fn [acc x]\n                 (conj acc (Character/getNumericValue x)))\n               [])))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 99, "code": "(fn [x y] \n  (loop [num (* x y) accum []] \n    (if (zero? num) \n      accum \n      (recur (quot num 10)(cons (rem num 10) accum))) \n  ))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 99, "code": "(fn [x y]\n  ((fn digits [n]\n     (if (zero? n)\n       []\n       (conj\n         (digits (int (/ n 10)))\n         (mod n 10))))\n   (* x y)))", "user": "53940789e4b0b51d73faaec3"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "user": "559067ace4b0277789237670"}, {"problem": 99, "code": "(fn [f s]\n    (reverse\n      (loop [num (* f s) res '[]]\n        (if (< num 10)\n          (conj res num)\n          (recur (quot num 10) (conj res (rem num 10)))))))", "user": "53a68c5ae4b0ef122a8689c8"}, {"problem": 99, "code": "(fn product-digits [x y]\n  (loop [r (* x y) n (int (/ (Math/log r) (Math/log 10))) result [] ] \n    (if (< n 0) \n      (reverse result)\n      (recur (/ r 10) (dec n) (conj result (int (rem r 10)) )) )))", "user": "558bdcefe4b0277789237633"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "user": "54864662e4b0e286459a11b8"}, {"problem": 99, "code": "(fn [& nums]\n  (loop [prod (apply * nums)\n         res ()]\n    (println prod res)\n    (if (> 10 prod)\n      (cons (mod prod 10) res)\n      (recur (quot prod 10) (cons (mod prod 10) res )))))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 99, "code": "#(vec(map(fn[x](-(int x)(int \\0)))(str(* %1 %2))))", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 99, "code": "(fn [x y]\n  (let [start (* x y)]\n    (->>\n     (sequence (str start))\n     (map (comp read-string str)))))", "user": "55912230e4b027778923767a"}, {"problem": 99, "code": "(fn [a b] (map #(read-string (str %)) (seq (str (* a b)))))", "user": "4eb171d7535d7eef30807340"}, {"problem": 99, "code": "#(loop [x (* % %2) res ()]\n   (if (zero? x)\n     res\n     (recur (quot x 10) (cons (rem x 10) res))))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* % %2)))", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 99, "code": "(fn [a b]\n  (map #(java.lang.Integer/parseInt (str %)) (str (* a b))))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 99, "code": "(fn [a b]\n  (map (fn [x] (- (int x) 48))\n       (str (* a b))))", "user": "524e79c1e4b0541d1855b7e0"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "user": "55f2d4ede4b06e875b46ce4c"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "55e5c852e4b050e68259b474"}, {"problem": 99, "code": "(fn mult1 [x y] (map (comp #(- % 48) int) (apply list (str (* x y)))))", "user": "55f06183e4b06e875b46ce23"}, {"problem": 99, "code": "#(->> (* %1 %2) (str) (partition 1) (flatten) (map int) (map (fn [x] (- x 48))))", "user": "55f6c0e2e4b06e875b46ce99"}, {"problem": 99, "code": "(fn [x y] (into [] (map #(- (int %) (int \\0)) (str (* x y)))))", "user": "529c722de4b04e0c58e87b63"}, {"problem": 99, "code": "#(let [product (apply str (list (* % %2)))]\n   (if (= (count product) 1)\n     (vector (read-string product))\n     (if (= (count product) 3)\n       (vec (list (/ (- (read-string product) (mod (read-string product) 100)) 100)\n                  (/ (- (mod (read-string product) 100) (mod (read-string product) 10)) 10)\n                  (mod (read-string product) 10)))\n       (if (= (count product) 5)\n         (vec (list (/ (- (read-string product) (mod (read-string product) 10000)) 10000)\n                    (/ (- (mod (read-string product) 10000) (mod (read-string product) 1000)) 1000)\n                    (/ (- (mod (read-string product) 1000) (mod (read-string product) 100)) 100)\n                    (/ (- (mod (read-string product) 100) (mod (read-string product) 10)) 10)\n                    (mod (read-string product) 10)))\n         nil))))", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "53e0001be4b0d874e779ae48"}, {"problem": 99, "code": "(fn prob99 [x y]\n  (vec (map #(- (int %) 48) (seq (str (* x y))))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 99, "code": ";; no string\n#(loop [acc '()\n        p (* %1 %2)]\n   (if (< p 10)\n     (cons p acc)\n     (recur (cons (mod p 10) acc) (quot p 10))))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 99, "code": "(comp (partial map #(Character/getNumericValue %)) \n      seq \n      str \n      *)", "user": "50e3e108e4b01912b3285c48"}, {"problem": 99, "code": "(fn [x y]\n  (into [] (for [a (seq(str (* x y)))]\n    (Long/valueOf (str a))\n    )))", "user": "558ee1c9e4b0277789237659"}, {"problem": 99, "code": "(fn [x y] \n  (->> (* x y) str vec (map #(Character/getNumericValue %))))", "user": "54b07c1ee4b09f271ff37d16"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n      str\n      (map #(Character/getNumericValue %))))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "55e06f82e4b050e68259b40d"}, {"problem": 99, "code": "(fn [a b]\n  (map #(read-string (str %))\n       (str (* a b))))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 99, "code": "(fn prodDigit \n  ([x y] \n  \t(prodDigit (* x y) [] 1 ))\n  ([remaining acc divisor]\n \t (if (= 0 remaining)\n     \tacc   \n      \t(prodDigit \n         \t(- remaining (rem remaining (* 10 divisor))) \n         \t(cons (/ (rem remaining (* 10 divisor)) divisor) acc ) \n         \t(* 10 divisor)\n        )\n  \t )\n   )\n)", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 99, "code": "(fn [x y]\n  (vec (map #(Character/getNumericValue %)(str(* x y)))))", "user": "55f2fdc3e4b06e875b46ce51"}, {"problem": 99, "code": "(fn [& args] (map #(read-string (str %)) (seq (str (apply * args)))))", "user": "550609b3e4b021ccfedb9695"}, {"problem": 99, "code": "(fn [a b]\n  (map (comp read-string str) (str (* a b))))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 99, "code": "(fn [x y](map #(-> % str Integer/parseInt) (seq (str (* x y)))))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 99, "code": "(fn [a b]\n  (loop [quotian (* a b), digits []]\n    (if (zero? quotian)\n      digits\n      (recur (quot quotian 10) (cons (mod quotian 10) digits))\n      )\n    )\n  )", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 99, "code": "(fn [m n]\n  ((fn dig [p]\n      (if (= 0 p)\n        ()\n        (concat (dig (quot p 10)) (list (mod p 10)))))\n       (* m n)))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 99, "code": "(fn product-digits [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 99, "code": "; ->>\n#(->> (apply * %&) str (map str) (map read-string))\n\n; mapping\n#_#(for [c (map read-string (map str (str (apply * %&))))] c)\n\n; first solution\n#_#(for [c (map str (* % %2))] (- (int c) (int \\0)))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %1) (int \\0))  (seq (str (* a b)))))", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 99, "code": "(fn g([x y acc]\n  (let [p1 (quot x 10) p2 (mod x 10)] \n    (if (= 0 p1) \n      (cons p2 acc)\n      (recur p1 0 (cons p2 acc))\n      )\n    ))\n  ([x y] (g (* x y) 0 []))\n  )", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 99, "code": "(fn[a b] (map (comp #(Integer. %) str) (seq (str (* a b)))))", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 99, "code": "(fn [x y]\n   (let [pa (fn pa [x]\n              (loop [n x\n                     t []]\n                (if (zero? n)\n                  t\n                  (recur (quot n 10) (conj t (rem n 10))))))]\n     (reverse (pa (* x y)))))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 99, "code": "(fn [a b]( map-indexed (fn[idx itm](- (int itm) 48)) (str(* a b)) ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 99, "code": "(fn [n1 n2] (map #(- (int %) 48) (str (* n1 n2))))", "user": "5601bb7ee4b04bb52996e195"}, {"problem": 99, "code": "#(let [prod (* %1 %2)]\n   (loop [q (quot prod 10) digits (list (rem prod 10))]\n     (if (zero? q)\n       digits\n       (recur (quot q 10) (conj digits (rem q 10))))))", "user": "5609866ee4b0053d1b86c7e3"}, {"problem": 99, "code": "#(map (comp read-string str) (seq (str (* %1 %2))))", "user": "560039cce4b04bb52996e162"}, {"problem": 99, "code": "(fn [m n]\n  (loop [c (* m n)\n         l ()]\n    (if (= c 0)\n      l\n      (recur (int (/ c 10)) (conj l (mod c 10))))))", "user": "56051095e4b08b23635d3162"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "560a7775e4b05f002753defa"}, {"problem": 99, "code": "(fn [a b]\n     (let [num-as-str (str (* a b))\n           to-int #(- (int %) (int \\0))]\n              (map to-int num-as-str)))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 99, "code": "(fn [a b] (vec (map #(- (int %)  (int \\0)) (str (* a b)))))", "user": "56011393e4b04bb52996e178"}, {"problem": 99, "code": "#(map\n  (fn [c] (- (int c) (int \\0)))\n  (seq (str (* %1 %2))))", "user": "532ecd44e4b019098a6f8b49"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48) (seq (str (* x y)))))", "user": "560ae540e4b05f002753df0d"}, {"problem": 99, "code": "(comp (partial map (comp read-string str)) str *)", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 99, "code": "#(loop [n (* %1 %2) res []] \n\t(if (zero? n) \n      res \n      (recur (quot n 10) (cons (rem n 10) res))\n    )\n)", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       (str)\n       (seq)\n       (map #(-> (str %) (Integer/parseInt)))))", "user": "560e9a2de4b05f002753df52"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y)\n         acc []]\n    (if (zero? n)\n      acc\n      (let [n-next (quot n 10)\n            digit (mod n 10)]\n        (recur n-next (cons digit acc))))))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 99, "code": "(fn [ x y]\n  (map #(Character/getNumericValue %) (seq(str(* x y )))))", "user": "558053b1e4b05c286339e0e9"}, {"problem": 99, "code": "#(map (fn [x] (Integer/parseInt (str x))) (str (* %1 %2)))", "user": "536102efe4b0243289761e3e"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "user": "50523848e4b0a561d07d8f1a"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 99, "code": "(fn [x y]\n  (let [digits (fn [x] (reverse\n                        (for [d (iterate (partial * 10) 10) :while (<= (/ d 10) x)]\n                          (quot (mod x d) (/ d 10)))))]\n    (digits (* x y))))", "user": "560843dee4b046a4fc0ac00e"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/getNumericValue %) (str (* a b))))", "user": "52aaabf7e4b0c58976d9ac68"}, {"problem": 99, "code": "(fn [a b]\n  (map #(read-string (str %)) (seq (str (* a b)))))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 99, "code": "(fn [a b]\n  (let [res (* a b)\n        res-str (seq (str res))\n        res-ords (map int res-str)]\n    (map #(- % (int \\0)) res-ords)))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str\n      seq\n      (map (comp read-string str)))", "user": "5410499de4b01498b1a719a6"}, {"problem": 99, "code": "(fn \n    [a b]\n    (map  #(- (int %) (int \\0)) (seq (str (* a b))))  \n    )", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 99, "code": "(fn [& x] (map (comp read-string str) (apply (comp vec str *) x)))", "user": "53a0b730e4b0ca733b9744b5"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 99, "code": "(fn fun\n  ([x y]\n   (fun x (* x y) []))\n  ([x nume lista]\n   (if (< nume 10)\n     (cons nume lista)\n     (fun x (quot nume 10) (cons (rem nume 10) lista)))))", "user": "560ff632e4b05f002753df66"}, {"problem": 99, "code": "(fn [x y] (map (comp #(Integer/parseInt %) str) (seq (str (* x y)))))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 99, "code": "#(map read-string (re-seq #\"\\d{1}\" (str (* %1 %2))))", "user": "55df3b11e4b050e68259b3ef"}, {"problem": 99, "code": "#(map (fn [x] (read-string (str x))) (str (* %1 %2)))", "user": "561bf12ce4b064ca9f4b168e"}, {"problem": 99, "code": "#(->> (apply * %&)\n      str\n      (map int)\n      (map (partial + -48)))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 99, "code": "#(map (fn [digit] (- (int digit) 48)) (str (* %1 %2)))", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 99, "code": "(fn [a b]\n   (map #(Integer/parseInt %) (map str (str (* a b)))))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 99, "code": "(comp (fn d [x]\n        (if (< x 10)\n          (vector x)\n          (conj (d (quot x 10)) (mod x 10))))\n      *)", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 99, "code": "(fn [x y] (loop [n (* x y) res []] (if (= n 0) res (recur (quot n 10)(cons (rem n 10) res)))))", "user": "561e2b33e4b064ca9f4b16ba"}, {"problem": 99, "code": "(fn seq-from-nums [x y]\n  (map #(Character/getNumericValue %) (str (* x y))))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 99, "code": "(fn rez [a b]\n  (->>\n   (iterate \n    (fn [[v _]] [(quot v 10) (mod v 10)]) \n    [(* a b) 0]\n    )\n   (take-while (fn [[x y]] (not= 0 (+ x y))))\n   rest\n   reverse\n   (map second)\n   )\n  )", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 99, "code": "(fn [x y] (            \n            into [] (map #(Character/digit % 10) (str (* x y)))\n           ))", "user": "55f27d95e4b06e875b46ce47"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 99, "code": "#(let [r10 (range 10)] (map (zipmap (seq (apply str r10)) r10) (str (* %1 %2))))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 99, "code": "(fn mul [a b]\n    (loop [x (* a b), digits []]\n     (if (= x 0) (vec digits)\n       (recur (quot x 10) (cons (mod x 10) digits)))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 99, "code": "(fn [n1 n2]\n  (loop [answer []\n         x (* n1 n2)]\n    (let [nextans (conj answer (mod x 10))\n          nextval (int (/ x 10))]\n      (if (> nextval 1)\n        (recur nextans nextval)\n        (reverse nextans)))))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/digit % 10) (str (* a b))\n   ))", "user": "561eb82fe4b064ca9f4b16c7"}, {"problem": 99, "code": "#(for [i (seq (str (* %1 %2)))] (Character/digit i 10))", "user": "55efc44ee4b066087aa9453e"}, {"problem": 99, "code": "(fn [x y](map #(Character/getNumericValue %) (str (* x y))))", "user": "53623eaee4b0243289761e4f"}, {"problem": 99, "code": "(fn foo[a b]\n  (map #(Integer/parseInt %) (rest (clojure.string/split (str (* a b)) #\"\"))))", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 99, "code": "(fn [a b]\n  ((fn [n]\n    (loop [n n\n         di []]\n    (if (< n 10)\n      (reverse (conj di n))\n      (let [m (mod n 10)]\n        (recur (/ (- n m) 10) (conj di m))))))\n  (* a b)))", "user": "504f0c9ce4b0e7ad84dbc4b2"}, {"problem": 99, "code": "#(map read-string (map str (str (* %1 %2))))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "561a060ee4b053970a773b01"}, {"problem": 99, "code": "(fn product-digits\n  [n1 n2]\n  (map #(- % 48) (map int (str(* n1 n2)))))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 99, "code": "#(map (comp (fn [c] (- c (int \\0))) int) (str (* % %2)))\n; and without str:\n#_(fn [x y]\n    (reverse\n     (take (-> (* x y) Math/log (/ (Math/log 10)) long inc)\n           (map #(mod % 10)\n                (iterate #(int (/ % 10)) (* x y))))))", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 99, "code": "#(->> (* % %2)\n      str seq\n      (map str)\n      (map read-string))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 99, "code": "(fn [n m](seq (map #(- (int %) 48) (pr-str (* m n)))))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 99, "code": "#(map read-string (map str (str (* %1 %2))))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 99, "code": "(comp vec (partial map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9}) seq str *)", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 99, "code": "(fn d [x y]\n  (cond \n   (> y 1) (d (* x y) 1)\n   (< x 10)[x]\n   :else (conj (d (quot x 10) 1) (rem x 10))))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 99, "code": "(fn [num1 num2]\n  (let [num (* num1 num2)]\n    (loop [n num\n           ret ()]\n      (if (= n 0)\n        ret\n        (recur (quot n 10) (conj ret (mod n 10)))))))", "user": "56305383e4b073c1cf7a9be6"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "561a1af6e4b053970a773b02"}, {"problem": 99, "code": "(fn [x y]\n  (map read-string (re-seq #\"\\d\" (str (* x y)))))", "user": "560ae7e6e4b05f002753df0e"}, {"problem": 99, "code": "(fn multiply-digits [x y]\n  (for [n (reduce conj [] (str (* x y)))]\n    (Integer. (str n))))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 99, "code": "(fn [n1 n2]\n  (map #(Character/digit % 10) \n       (str (* n1 n2))))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 99, "code": "(fn [x y] (map #(Integer. %) (map str (seq (str (* x y))))))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 99, "code": "(fn [a b] (into [] (reverse (for [x (iterate #(quot %1 10) (* a b)) :while (> x 0)] (rem x 10)))))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 99, "code": "(fn [a b](map #(Character/digit % 10) (str (* a b))))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 99, "code": "(fn [a b](map #(-> % (str) (read-string)) (str (* a b))))", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 99, "code": "#(map (fn [s] (Integer/parseInt (str s))) (str (* %1 %2)))", "user": "522a5bdde4b0590a43906cf8"}, {"problem": 99, "code": "(fn digits [a b]\n  (loop [n (* a b)\n         dig '()]\n    (if (zero? n) dig\n      (recur (unchecked-divide-int n 10) (cons (mod n 10) dig)))))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 99, "code": "(fn pd [x y] (map #(Character/getNumericValue %)(str(* x y))))", "user": "5614ebc5e4b05f002753dfbc"}, {"problem": 99, "code": "(fn digit-sequence\n  [a b]\n  (let [n (* a b)]\n  \n    (if (< n 10)\n      (list n)\n      (let [quotient (quot n 10)]\n        (concat (digit-sequence quotient 1) (list (- n (* 10 quotient))))\n      )\n    )\n  )\n)", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer. (.toString %)) (str (* x y))))", "user": "521ceb02e4b0c4ef0be830a5"}, {"problem": 99, "code": "(fn *-to-string-coll\n  [a b]\n  (->> (* a b)\n       str\n       (map #(Integer/parseInt (str %)))))", "user": "4fc524aae4b081705acca37e"}, {"problem": 99, "code": "#(map (fn [n] (- (int n) 48)) (str (* %1 %2)))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 99, "code": "#(map (fn [a] (- a 48)) (map int (seq (str (* % %2)))))", "user": "5604ae27e4b0c80df0ca2663"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 99, "code": "(fn [a b] \n  (let [c (iterate #(quot % 10) (* a b))]\n    (reverse \n     (map \n       #(- %1 (* %2 10)) \n       (take-while pos? c) \n       (rest c)))))", "user": "561047eae4b05f002753df6d"}, {"problem": 99, "code": "(fn [a b] (map #(Integer. %) (re-seq #\"\\d\" (str (* a b)))))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 99, "code": "(fn [& args] (map #(Character/digit % 10) (str (reduce * args))))", "user": "5578f292e4b05c286339e08f"}, {"problem": 99, "code": "(fn mult [x y]\n  ((fn num2seq [z]\n     (if (= 0 (count z))\n        []\n        (concat [(Integer. (str (first z)))] (num2seq (subs z 1)))))\n    (str (* x y))))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 99, "code": "(fn [a b] (map (comp #(Integer. %) str) (str (* a b))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 99, "code": "(fn prod-digits\n   ([x y] (prod-digits (* x y) (str (* x y )) [] ))\n   ([total string coll] \n    (if (empty? string)\n      coll \n      (prod-digits total (rest string) (conj coll (read-string (str (first string))) )) ))\n   )", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "user": "56102f50e4b05f002753df6b"}, {"problem": 99, "code": "(fn [a b]\n   (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 99, "code": "#(map read-string (map str (str (* %1 %2))))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 99, "code": "(fn [a b]\n    (->> (* a b)\n         str\n         (map str)\n         (map #(Integer/parseInt %))\n      ))", "user": "54eb22a0e4b024c67c0cf845"}, {"problem": 99, "code": "(fn[x,y] (map #(Integer/parseInt %)  (map str (str (* x y)))))", "user": "56215c8ee4b03f08ee9a921a"}, {"problem": 99, "code": "(fn [x y ] (map #(-> % str bigint) (seq (str (* x y) ))))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 99, "code": "(fn [x y]\n   (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 99, "code": "(fn [a b]\n  (let [p (str (* a b))]\n    (map (comp #(Integer/parseInt %) str) p)))", "user": "54145050e4b01498b1a719ea"}, {"problem": 99, "code": "(fn [a b]\n  (let [c (* a b)]\n    (map #(- (int %) (int \\0)) (str c))))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 99, "code": "(fn [x y]\n  (into [] (map read-string (map str (str (* x y))))))", "user": "564583f0e4b0284900eef607"}, {"problem": 99, "code": "(fn product-digits\n  [a b]\n  (mapv #(- (int %) 48) ((comp str *) a b)))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 99, "code": "#(->> (apply * %&) str (map (comp read-string str)))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 99, "code": "#(map read-string (map str (str (* % %2))))", "user": "56449c90e4b0284900eef5f8"}, {"problem": 99, "code": "#(map read-string (map str (str (* %1 %2))))", "user": "56441e72e4b0018b46ad8c09"}, {"problem": 99, "code": "#(map read-string (map str  (seq (str (* %1 %2)))))", "user": "5643ba10e4b0018b46ad8bff"}, {"problem": 99, "code": "(fn [x y] (loop [num (* x y) res '()] (if (< num 10) (conj res num) (recur (int (/ num 10)) (conj res (rem num 10))))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) 48)) (str (* %1 %2)))", "user": "55c13e73e4b01b9910ae2a2f"}, {"problem": 99, "code": "(fn [x y]\n  (map #(read-string (str %)) (seq (str (* x y)))))", "user": "528c381ce4b0239c8a67aeb2"}, {"problem": 99, "code": "(fn [a b]\n  (loop [x (* a b) r '()]\n    (if (zero? x)\n      r\n      (recur (/ (- x (rem x 10)) 10) (conj r (rem x 10))))))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 99, "code": "(fn t2 [a1 a2]\n  (let [lst (vec (str (* a1 a2)))\n        str-lst (map str lst)]\n  (map #(Integer/parseInt %) str-lst)))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 99, "code": "(fn [a b]\n(reduce (fn [acc x](conj acc (- (int x) 48))) [] (str (* a b))))", "user": "54dce6dbe4b024c67c0cf78d"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* % %2)))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 99, "code": "(fn [x y] (map read-string (map str (seq (str (* x y))))))", "user": "564d3169e4b0284900eef67c"}, {"problem": 99, "code": "(fn [x y]\n   (map #(Character/digit % 10) (seq (str (* x y))))\n\n  \n  )", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 99, "code": "(fn [a b] (vec (map #(- (int %) 48) (seq (str (* a b))))))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 99, "code": "(fn [a b]\n  (loop [p (* a b), coll nil]\n    (let [res (conj coll (rem p 10)), q (quot p 10)]\n      (if (= q 0) res\n        (recur q res)\n        )\n      )\n    )\n  )", "user": "564b495de4b0284900eef667"}, {"problem": 99, "code": "(fn [a b]\n  (map (comp #(Integer. %)  str) (str (* a b)) \n  ))", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       (str)\n       (map #(- (int %) (int \\0)))\n       )\n  )", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 99, "code": "(fn [x y]\n  (into [] (map #(Character/getNumericValue %) \n                (str (* x y)))))", "user": "55cd95b4e4b0e31453f64a1e"}, {"problem": 99, "code": "#(->> (* %1 %2) str seq (map str) (map read-string))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 99, "code": "(fn [a b] (vec (map #(read-string (str %)) (str (* a b)))))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 99, "code": "(fn [& args] (map (comp read-string str) ((comp seq str) (apply * args))))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/digit % 19) \n      (seq (str (* x y)))\n))", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 99, "code": "(fn [nums & morenums] (vec (map read-string (map str (seq (str (apply * (flatten (list nums morenums)))))))))", "user": "5658d775e4b00d3155796114"}, {"problem": 99, "code": "(fn [n m]\n  (let [rstr (str (* n m))]\n    (map #(- (int %) (int \\0)) rstr)))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "user": "564a560ae4b0284900eef654"}, {"problem": 99, "code": "(fn digitize [a b] (reverse (map #(mod % 10) (take-while #(not= 0 %) (iterate #(quot % 10) (* a b))))))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 99, "code": "; (fn [x y]\n;   (map #(- (int %) 48) (seq (str (* x y)))))\n\n(fn [x y]\n  ((fn [x]\n     (loop [x x acc ()]\n       (if (> x 0)\n         (recur (quot x 10) (cons (mod x 10) acc))\n         acc))) (* x y)))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 99, "code": "(fn product-digits [x y]\n  (->> (* x y)\n       str\n       (map #(Integer/parseInt (str %)))))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 99, "code": "(fn [x y]\n  (reverse (loop [v (* x y) res []]\n    (if (zero? v)\n      res\n      (recur (quot v 10) (conj res (mod v 10)))))))", "user": "564da567e4b0284900eef682"}, {"problem": 99, "code": "#(map read-string (re-seq #\"\\d\" (str (* %1 %2))))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 99, "code": "(fn [& xs]\n  (map #(Character/digit % 10) (str (apply * xs))))", "user": "55d68726e4b0e31453f64a99"}, {"problem": 99, "code": "#(map (fn [x] (Integer/parseInt (str x))) (str (* %1 %2)))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 99, "code": "(fn [n1 n2]\n  (let [dig {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9}]\n    (map dig (seq (str (* n1 n2))))))", "user": "5649615be4b0284900eef641"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 99, "code": "(fn [arg1 arg2]\n(cond\n(and true (= arg2 1)) [1]\n(and true (= arg2 9)) [8 9 1]\n(and true (= arg2 99)) [9 8 9 0 1]\n))", "user": "565f2461e4b068f2fe63dc3b"}, {"problem": 99, "code": "(fn [x1 x2] (map (comp #(Integer/parseInt %) str) (into [] (str (* x1 x2)))))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (seq (str (* a b)))))", "user": "4e894068535d4ef0aa30db97"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48)\n       (seq (str (* a b)))))", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 99, "code": "(fn [x y]\n    (loop [s () n (* x y) d 1]\n      (if (> d n)\n        s\n        (recur (cons (mod (int (/ n d)) 10) s)\n               n\n               (* 10 d)))))", "user": "56532ff4e4b0f9d632dd846e"}, {"problem": 99, "code": "(fn [x1 x2] (map #(Integer/parseInt (str %)) (str (* x1 x2))))", "user": "55ecac8ee4b0121d4835fdcc"}, {"problem": 99, "code": "(fn [arg1 arg2]\n(cond\n(and true (= arg2 1)) [1]\n(and true (= arg2 9)) [8 9 1]\n(and true (= arg2 99)) [9 8 9 0 1]\n))", "user": "5666bf34e4b04acd4f672dc2"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) \n  \t\t\t   str\n               (partition-by identity) \n  \t\t\t   (apply concat) \n\t           (map str)\n  \t\t\t   (mapv #(Integer/parseInt %))))", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 99, "code": "(fn [p q]\n  (loop [r (* p q)\n         digits '()]\n    (if (> r 0)\n      (recur (quot r 10) (cons (mod r 10) digits))\n      digits)))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (int (* x y))\n         c (count (str n))\n         ans []]\n    (if (= 0 c)\n      ans\n      (recur (int (/ n 10)) (dec c) (cons (rem n 10) ans)))))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 99, "code": "#(->> (* %1 %2)\n       str\n       seq\n       (map (fn[c](read-string (str c)))))", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "565a280be4b068f2fe63dbf7"}, {"problem": 99, "code": "(fn [a b] \n  (->> (* a b) \n      str\n      (map str)\n      (mapv #(Integer/parseInt %))))", "user": "543f854fe4b032a45b86935b"}, {"problem": 99, "code": "(fn product-digits\n  [x y]\n  (->> (* x y)\n       str\n       seq\n       (map str)\n       (map read-string)))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/digit % 10) (str (* a b))))", "user": "566a6e38e4b0a866af68969b"}, {"problem": 99, "code": "(fn [x y]\n  (let [f (fn[coll n]\n            (if (= 0 (quot n 10))\n              (conj coll n)\n              (recur (conj coll (rem n 10)) (quot n 10))))]\n    (reverse (f [] (* x y)))))", "user": "53ae0c50e4b047364c044471"}, {"problem": 99, "code": "#(map read-string(re-seq #\".\" (str(* %1 %2))))", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 99, "code": "(fn [a b] \n  (->> (* a b)\n       str\n       (mapv #(Character/digit % 10))))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 99, "code": "(fn\n  [a b]\n  (map #( read-string ( str %) ) (seq (str (* a b)))))", "user": "56019662e4b04bb52996e190"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n      str\n      (map #(- (int %) (int \\0)))))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 99, "code": "(fn number_to_digits\n  [n1 n2]\n  (let [outcome (* n1 n2)]\n (loop\n    [n outcome\n     acc ()]\n    (if (= n 0)\n      acc\n      (recur (quot n 10) (conj acc (rem n 10)) )\n      )\n    )\n  ))", "user": "560d7863e4b05f002753df40"}, {"problem": 99, "code": "#(map read-string (map str (seq (str (* %1 %2)))))", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 99, "code": "#(map (fn [x] (int (read-string (str x)))) (str (* % %2)))", "user": "54c6ad6ae4b045293a27f62f"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "559ff9eee4b0acc240e314ee"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       (str)\n       (seq)\n       (map str)\n       (map #(Integer/parseInt %))))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 99, "code": "#(map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} (str (* %1 %2)))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 99, "code": "#(vec (map (fn [n] (Character/digit n 10)) (vec (str (* %1 %2)))))", "user": "533a399de4b0e30313ee6cb9"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       (str)\n       (map #(Integer/parseInt (str %)))))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* %1 %2)))", "user": "567476bde4b05957ce8c6139"}, {"problem": 99, "code": "#(map (fn [n](Character/digit n 10)) (seq (str (* %1 %2))))", "user": "56754c4be4b05957ce8c6149"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y) out '()]\n    (if (= n 0) (vec out) (recur (quot n 10) (cons (rem n 10) out)))))", "user": "564a5a09e4b0284900eef656"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (seq (str (* a b)))))", "user": "5576fee3e4b05c286339e078"}, {"problem": 99, "code": "(fn [x y]\n  (let [m (* x y)]\n    (loop [r '(),\n           n m]\n      (if (= n 0)\n        r\n        (recur (conj r (rem n 10)) (quot n 10))))))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 99, "code": "(fn [x y]\n  (into [] (map #(Integer/parseInt %) (filter #(not (empty? %)) (clojure.string/split (str (* x y)) #\"\")))))", "user": "56483562e4b0284900eef629"}, {"problem": 99, "code": "(fn [a b] ((fn digits [x] (if (< x 10) [x] (conj (digits (quot x 10)) (mod x 10)))) (* a b)))", "user": "50232eeae4b0b5d8b1bd2397"}, {"problem": 99, "code": "(fn\n  [a b]\n  (->> (* a b) str (map (comp read-string str))))", "user": "558b41fce4b0277789237628"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) (int \\0))) (seq (str (* %1 %2))))", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 99, "code": "(fn [val1 val2]\n  (loop [r (* val1 val2)\n         digs []]\n    (if (zero? r)\n      digs\n      (recur (quot r 10) (cons (rem r 10) digs))\n      )))", "user": "55aa8276e4b0988bba2ad94e"}, {"problem": 99, "code": "(fn [x y]\n  (loop [acc '()\n         n   (* x y)]\n    (if (zero? n)\n      (or (seq acc) '(0))\n      (recur\n        (conj acc\n              (rem n 10))\n        (quot n 10)))))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- % (int \\0)) (map int (str (* x y)))))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 99, "code": "(fn [n1 n2]\n  (map #(Character/getNumericValue %) (str (* n1 n2))))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 99, "code": "(let [digits (fn d [n] (if (< n 10) (list n) (cons (mod n 10) (d (/ (- n (mod n 10)) 10)))))]\n  #(reverse (digits (* %1 %2))))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 99, "code": "(fn [a b]\n   (map #(Character/getNumericValue %) (.toString (* a b))))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 99, "code": "(fn [a b]\n  (loop [n (* a b)\n         acc []]\n    (if (= 0 (quot n 10))\n      (cons (rem n 10) acc)\n      (recur (quot n 10) (cons (rem n 10) acc) ))))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 99, "code": "(fn [x y] (map #(read-string (str %)) (seq (str (* x y)))))", "user": "56798d83e4b05957ce8c618b"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "user": "55f4ef68e4b06e875b46ce82"}, {"problem": 99, "code": "(fn [a b]\n  (let [r (* a b)\n        p (loop [c [] d r]\n            (if (= d 0)\n              c\n              (recur (conj c (mod d 10)) (quot d 10))))]\n    (reverse p)))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 99, "code": "#(for [x (str (* %1 %2))] (read-string (str x)))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 99, "code": "(fn [x y]\n  (loop [z (* x y)\n         r []]\n    (if (= z 0) r\n                (recur (quot z 10) (cons (mod z 10) r)))))", "user": "503c90aae4b06c4e0e1fa24b"}, {"problem": 99, "code": "(fn [x y]\n  (let [destruct-number (fn [number]\n                          (loop [remaining-number number\n                                 result []]\n                            (if (zero? remaining-number)\n                              result\n                              (recur (quot remaining-number 10)\n                                     (cons (mod remaining-number 10) \n                                           result )))))]\n    (destruct-number (* x y))))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 99, "code": "(fn [a b] (let [p (* a b)] (map #(-> % str Integer/parseInt) (seq (str p)))))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 99, "code": "(fn [x y] \n  (let [number (* x y)]\n    (loop [number number\n           result ()]\n      (if (< number 10)\n        (conj result number)\n        (recur \n         (quot number 10) \n         (conj result (rem number 10)))))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "user": "5681afaae4b0945ebc182a87"}, {"problem": 99, "code": "(fn [a b]\n  (loop [x (* a b) acc '() ]\n    (let [q (quot x 10) r (rem x 10)]\n      (if (= 0 q)\n      \t(cons r acc)\n      \t(recur q (cons r acc))))))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 99, "code": "(fn [n m]\n  (let [product (* n m)]\n   (map #(Integer/parseInt %) (map #(str %) (vec (str  product))))))", "user": "5668aad0e4b04acd4f672df5"}, {"problem": 99, "code": "(fn [a b] (let [digits (fn digits [n] (if (< n 10) [n] (conj (digits (quot n 10)) (mod n 10))))] (digits (* a b))))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 99, "code": "(fn digits [n m] (map (comp #(- % 48) int) (str (* n m))))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 99, "code": "(fn [x y] (map #(Character/getNumericValue %) (seq (str (* x y)))))", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 99, "code": "(fn [x y]\n  (->\n   ((fn dig-s [n]\n         (if (zero? n)\n           nil\n           (cons\n            (mod n 10)\n            (lazy-seq (dig-s (quot n 10))))))\n    (* x y))\n   reverse\n   vec))", "user": "52213426e4b0e6a83c8925c4"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 99, "code": "(fn [a b] \n  (map (comp read-string str char int) (seq (str (* a b)))))", "user": "4ddf597a535d08e6dec9fddf"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Long/parseLong %) (remove #(= \"\" %) (clojure.string/split (str (* a b)) #\"\"))))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 99, "code": "; FIRST ATTEMPT\n;(fn [x y]\n;      (let [product (* x y)]\n;        (loop [result []\n;               place 1]\n;          (if (> place product)\n;            result\n;            (recur\n;              (cons (int (/ (rem product (* place 10)) place)) result)\n;              (* place 10))))))\n\n; Tim's simpler (but still math-based approach):\n(fn [m n] \n  (loop [remaining (* m n)\n         result    ()]\n     (if (< remaining 10)\n       (conj result remaining)\n       (recur (quot remaining 10) (conj result (mod remaining 10))))))", "user": "5465febde4b01be26fd746e1"}, {"problem": 99, "code": "(fn product-digits-solution\n  [x y] ;; update args as needed\n  ;; Write a function which multiplies two numbers and returns the result as a sequence of its digits.\n  (map #(Character/digit % 10) (str (* x y)))\n  )", "user": "536829c8e4b0243289761e8b"}, {"problem": 99, "code": "#(->> (* % %2) str (map (comp read-string str)))", "user": "543b4746e4b032a45b86932c"}, {"problem": 99, "code": "(fn [n1 n2] (map (fn [c] (Character/digit c 10)) (vec (str (* n1 n2)))))", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 99, "code": "(fn divX [x y] ((fn digitsX [x] (if(< x 10) [x] (conj (digitsX (int(/ x 10)))(mod x 10)))) (* x y)))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "566f3e18e4b0a866af6896e7"}, {"problem": 99, "code": "#(let [sum (* % %2)]\n    ((fn iter [n]\n        (if (> n 0)\n          (conj (iter (quot n 10)) (mod n 10))\n          []))\n     sum))", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 99, "code": "(fn [x y]\n   (loop [acc [] r (* x y)]\n   \t (if (= r 0)\n       acc\n       (recur (cons (mod r 10) acc) (quot r 10) ))\n     ))", "user": "568c2d96e4b0dcc4269f40af"}, {"problem": 99, "code": "(fn [a b] \n  (->> (* a b)\n     str\n     seq\n     (map str)\n     (map #(Integer/valueOf %))))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 99, "code": "#(map (fn [c](- (int c) 48)) (str (* %1 %2)))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/getNumericValue %)\n       (str (* x y))))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 99, "code": "#((fn d [x] (if (< x 10) [x] (into (d (quot x 10)) [(mod x 10)]))) (* %1 %2))", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 99, "code": "(fn [x y] (map (comp #(- %1 48) int) (seq (str (* x y)))))", "user": "566669d8e4b0e91d5f5c566f"}, {"problem": 99, "code": "#(map (fn [x] (Integer/parseInt (str x))) (seq (str (* %1 %2))))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 99, "code": "(fn [x, y] (map #(Integer. %) (re-seq #\"\\d{1}\" (str (* x y)))))", "user": "51e8736ae4b006d205356a4f"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 99, "code": "(fn product-digis [n1 n2]\n  (->> (* n1 n2)\n       (str)\n       (map str)\n       (map #(Integer/parseInt %))))", "user": "5264383be4b03e8d9a4a70cb"}, {"problem": 99, "code": "(fn product-digits [n1 n2]\n  (map #(- (int %) 48) (.toString (* n1 n2))))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 99, "code": "(fn [x y]\n  (map (fn [z] (. Character  getNumericValue z)) (str (* x y))))", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 99, "code": "(fn [a b] ((fn digits [n] (if (< n 10) [n] (conj (digits (quot n 10)) (rem n 10)))) (* a b)))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 99, "code": "#(loop [n (* %1 %2) res []]\n   (let [res (conj res (rem n 10))\n         n   (quot n 10)]\n     (if (zero? n)\n       (reverse res)\n       (recur n res))))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 99, "code": "(fn product-digits [x y]\n  (map read-string\n       (re-seq #\"\\d\"\n               (str (* x y)))))", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 99, "code": "#(map read-string (map str (seq (str (* %1 %2)))))", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 99, "code": "(fn [a b]\n  (into [] (map #(Character/digit % 10)\n       (seq (str (* a b)))))\n  )", "user": "51e6a2bce4b0ab43cc26c21d"}, {"problem": 99, "code": "(fn [a b]\n  (loop [prod (* a b) out []]\n    (if (zero? prod)\n      out\n      (recur (quot prod 10) (cons (rem prod 10) out))\n      )\n  ))", "user": "5689bd04e4b0dcc4269f4082"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer. (str %)) (str (* x y))))", "user": "526c669be4b03e8d9a4a728f"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 99, "code": "#(map read-string (map str (str (* %1 %2))))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer. (str %)) (seq (str (* a b)))))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 99, "code": "(fn [n1 n2] (loop [n (* n1 n2)\n                   retval '()]\n              (if (= n 0)\n                retval\n                (recur (quot n 10) (conj retval (mod n 10))))))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 99, "code": "#(reverse ((fn ! [x] (if (< x 10) [x] (cons (rem x 10) (! (quot x 10))))) (* % %2)))", "user": "56066e82e4b08b23635d3173"}, {"problem": 99, "code": "(fn [x y]\n    (loop [product (* x y)\n           acc '()]\n      (if (= product 0)\n        acc\n        (recur\n         (quot product 10)\n         (conj acc (mod product 10))))))", "user": "55e70e8de4b050e68259b490"}, {"problem": 99, "code": "(fn [x y]\n  (loop [z (* x y)\n         acc '()]\n    (let [q (quot z 10)\n          r (rem z 10)\n          acc (conj acc r)]\n      (if (= q 0)\n        acc\n        (recur q acc)))))", "user": "569ab3e2e4b0542e1f8d144a"}, {"problem": 99, "code": "(fn [a b] (let [exp10 (fn [n] (reduce * 10 (repeat (- n 1) 10)))\n                 multiplied (* a b)]\n             (reduce #(conj %1 (Character/digit %2 10)) [] (str multiplied))) )", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 99, "code": "(fn [n1 n2] (map #(Character/digit % 10) (str (* n1 n2))))", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 99, "code": "(fn [x y] (map #(Integer. (str %)) (str (* x y))))", "user": "56481722e4b0284900eef628"}, {"problem": 99, "code": "(fn [one two]\n  (map read-string \n       (rest (clojure.string/split (str (* one two)) #\"\"))))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 99, "code": "(fn [x y]\n  (loop [s '() z (* x y)]\n    (if (zero? z)\n      s\n      (recur (conj s (rem z 10))\n             (-> z (- (rem z 10)) (/ 10))))))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 99, "code": "(fn product-digits [x y]\n    (->> (* x y)\n         (str)\n         (seq)\n         (map #(Character/getNumericValue %))))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt %) (re-seq #\"\\d\" (str (* a b)))))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 99, "code": "#(loop [p (* %1 %2) res ()] (if (= p 0) res (recur (quot p 10) (conj res (rem p 10)))))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 99, "code": "(fn [a b]\n  (for [d (str (* a b))]\n    (read-string (str d))))", "user": "511e17a9e4b0c5b849dd36b0"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/digit % 10) (seq (str (* a b)))))", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 99, "code": "(fn [x y] (->> (* x y)\n                (str)\n                (map #(Character/digit % 10))))", "user": "566a3a26e4b0a866af689699"}, {"problem": 99, "code": "(fn\n  [a b]\n  (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "user": "56b1ab17e4b0982f16b37df1"}, {"problem": 99, "code": "(fn x [a b]\n  ((fn digits [n]\n     (reverse (map last\n                   (take-while\n                     #(> (first %) 0)\n                     (iterate (fn [[a b]] (let [m (/ (- a b) 10)] [m (mod m 10)])) [n (mod n 10)]))))) (* a b)))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 99, "code": "(fn [x y] (map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} (seq (str (* x y)))))", "user": "56baa68ce4b0f26550335947"}, {"problem": 99, "code": "#(map read-string (map str (seq (str (* % %2)))))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 99, "code": "(fn f [x y]\n(loop [n (* x y) s []]\n(if (= 0 n)\n(vec s)\n(recur (quot n 10) (cons (rem n 10) s)))))", "user": "569adec2e4b0542e1f8d1450"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) str (map #(read-string (str %)))))", "user": "531a0709e4b08068f379ed87"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (seq (str(* a b)))))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "56b86e64e4b0f26550335924"}, {"problem": 99, "code": "#(map (fn [x] (Integer/parseInt (str x))) (str (* %1 %2)))", "user": "56baab13e4b0f26550335948"}, {"problem": 99, "code": "#(loop [x (* %1 %2)\n        m (rem x 10)\n       acc (list)]\n   (if (= x 0)\n     acc\n     (recur (/ (- x m) 10) (rem (/ (- x m) 10) 10) (conj acc m) )))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 99, "code": "(fn [a b]\n\t((fn foo [n]\n\t(let [r (rem n 10) x (quot n 10)]\n\t\t(if (zero? x)\n\t\t\t[r] (conj (foo x) r)))) (* a b)))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 99, "code": "(fn digits [x y]\n  (loop [n (* x y)\n         res ()]\n    (if (zero? n)\n      res\n      (recur (quot n 10)\n             (conj res (mod n 10))))))", "user": "56ba1406e4b0f2655033593c"}, {"problem": 99, "code": "(fn\n  [a b]\n  (mapv #(- (int %) 48) (str (* a b)))\n)", "user": "56bb3a4be4b0f26550335951"}, {"problem": 99, "code": "(comp #(map (fn[x] (Integer. x)) %) #(map str %) seq str *)", "user": "56bb9ccce4b0f26550335959"}, {"problem": 99, "code": "(fn [n1 n2] (map #(Integer/parseInt (str %)) (into [] (str (* n1 n2)))))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 99, "code": "(fn [x y] (map (comp #(Integer/parseInt %) str) (str (* x y))))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 99, "code": "(fn [x y]\n  (loop [digits '()\n         n       (* x y)]\n    (if (= n 0)\n      digits\n      (do\n        (println \"digits: \" digits)\n        (println \"n: \" n)\n        (recur (conj digits (mod n 10)) (quot n 10))))))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 99, "code": "(fn [a b]\n  (let [pstr (str (* a b))\n        pseq (seq pstr)\n        pstr (map str pseq)\n        plst (map #(java.lang.Integer/valueOf %)  pstr)]\n    (vec plst)))", "user": "5294a49be4b02ebb4ef7500f"}, {"problem": 99, "code": "(fn [a b]\n  (loop [nr (* a b) res []]\n    (if (= nr 0)\n      (if (empty? res)\n        [0]\n        res)\n      (recur (quot nr 10) (cons (mod nr 10) res)))))", "user": "56c0aeb8e4b060a8e693e3af"}, {"problem": 99, "code": "(fn \n  [x y]\n  (map #(- (int %1) 48) (str (* x y))))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 99, "code": "(fn digitprod\n  [x y]\n  (reverse (map #(mod % 10) (take-while (comp not zero?) (iterate #(quot % 10) (* x y))))))", "user": "5609d328e4b05f002753deee"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 99, "code": "(fn [p q]\n  (let [prod (* p q)]\n    (map #(Character/digit % 10) (str prod))))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 99, "code": "(fn [x y] (map #(Integer. %) (drop 1 (clojure.string/split (str (* x y)) #\"\"))))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 99, "code": "(fn product-digits [& nums]\n  (->> nums\n    (reduce *)\n    (str)\n    (map str)\n    (map #(Integer/parseInt %))\n    )\n  )", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "56bca51ae4b0f26550335963"}, {"problem": 99, "code": "(fn [d dd] (map #(Character/digit % 10) (str (* d dd))))", "user": "4e36e647535deb9a81d77f36"}, {"problem": 99, "code": "(fn [a b](map #(- (int %) (int \\0) ) (str (* a b))   ))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 99, "code": "(fn [a b]\n  (drop-while zero? \n    (reverse \n      (map #(mod (int(/ (* a b) %)) 10)\n           (take 10 (iterate #(* 10 %) 1))))))", "user": "5250a13ee4b0541d1855b839"}, {"problem": 99, "code": "(fn [a b](reverse (map #(rem % 10) (take-while pos? (iterate #(quot % 10) (* a b))))))", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 99, "code": "(fn [a b]\n  (let [product (* a b)]\n    (map #(Integer. (str %)) (str product))))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 99, "code": "(fn [a b] (->> (* a b)\n                str\n                (map #(Character/getNumericValue %))\n           )\n )", "user": "56791447e4b05957ce8c6183"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       str\n       (map identity)\n       (map #(- (int %) (int \\0)))))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 99, "code": "#(->> (* % %2) str (map (fn [x] (- (int x) 48))))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 99, "code": "#(reverse ((fn r [x] (if (zero? x) [] (concat [(rem x 10)] (r (quot x 10))))) (* %1 %2)))", "user": "56aed78fe4b03c432f187363"}, {"problem": 99, "code": "(fn [x y]\n (mapcat #(list (Integer/parseInt (str %))) (str (* x y)))\n)", "user": "506af7d8e4b0a2a5463de37d"}, {"problem": 99, "code": "(fn [a b]\n  (reduce #(conj %1\n                 (- (int %2) (int \\0)))\n          []\n          (str (* a b))))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 99, "code": "(fn [x y]\n   (map read-string (re-seq #\"\\d\" (str (* x y)))))", "user": "56743413e4b05957ce8c612e"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       str\n       seq\n       (map #(-> % str Integer/parseInt))))", "user": "56826ebce4b0945ebc182a93"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 99, "code": "(fn [a b] \n  (loop [n (* a b)\n         digits []]\n    (if (= n 0)\n      digits\n      (recur (-> n (/ 10) int) (cons (mod n 10) digits) ))))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 99, "code": "(fn [a b]\n  (map #(read-string (str %)) (str (* a b))))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* %1 %2)))", "user": "568227fee4b0945ebc182a8a"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       str\n       seq\n       (map #(- (int %) 48))\n       (apply vector)))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 99, "code": "(fn digits\n  ([n]\n   (if (< n 10)\n     [n]\n     (conj (digits (quot n 10)) (rem n 10))))\n  ([a b]\n   (digits (* a b))))", "user": "56a1fce9e4b0542e1f8d14b7"}, {"problem": 99, "code": "#(map (fn [x] (Character/digit x 10)) (str (* %1 %2)))", "user": "56ab80f1e4b03c432f18733e"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/getNumericValue %)\n       (str (* a b))))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 99, "code": "(comp #(map (fn [s] (- (int s) 48)) %) str *)", "user": "56d69d28e4b0ea9b8538f7cf"}, {"problem": 99, "code": "(fn [a b] (map (comp read-string str) (str (* a b))))", "user": "56dc3bdfe4b0ea9b8538f819"}, {"problem": 99, "code": "(fn [x y]\n   (let [n (* x y)\n         a (count (str n))]\n     (reverse (:digits (reduce\n                 (fn [map item]\n                   (let [value (:value map)\n                         remainder (rem value item)\n                         new-value (quot value item)\n                         digits (conj (:digits map) remainder)]\n                     (assoc map :value new-value :digits digits)))\n                 {:value n :digits []}\n                 (repeat a 10))))))", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 99, "code": "(fn [a b]\n  (let [c (* a b)]\n    (loop [in c out []]\n      (if (= 0 in)\n        out\n        (recur (quot in 10) (cons (rem in 10) out))))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 99, "code": "(fn [a b] (->> (* a b)\n             (iterate #(quot % 10))\n             (take-while pos?)\n             (mapv #(mod % 10))\n             (rseq)))", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 99, "code": "(fn p\n  [a b]\n  (map #(Character/digit % 10) (str (* a b))))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 99, "code": "(fn\n  [n1 n2]\n\t(map #(Character/digit % 10) (seq (str (* n1 n2)))))", "user": "56df6846e4b0ca2494a095fa"}, {"problem": 99, "code": "(fn [x y]\n  (loop [m (* x y)\n         res []]\n    (if (< m 10)\n      (reverse (conj res m))\n      (recur (quot m 10) (conj res (mod m 10)))\n      )\n    )\n  )", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 99, "code": "(fn[x y] (map #(Character/getNumericValue %) (str (* x y))))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       (str)\n       (seq)\n       (map #(Character/getNumericValue %))\n       (apply vector)))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 99, "code": "(fn [x y] (let [product (* x y)]\n    (reverse (map #(mod % 10)\n      (take-while pos? (iterate #(quot % 10) product))))))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 99, "code": "(fn\n  [x y]\n  (loop [result [] value (* x y)]\n    (if (= value 0)\n      result\n      (recur (cons (mod value 10) result) (quot value 10)))))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 99, "code": "(fn [& nums] \n  (let [num-array (fn [an-int]\n                    (reverse (loop [acc []\n                                    i an-int]\n                               (if (zero? i)\n                                 acc\n                                 (recur (conj acc (int (rem i 10)))\n                                        (int (/ i 10)))))))]\n    (num-array (apply * nums))))", "user": "56b6a50ae4b0982f16b37e3c"}, {"problem": 99, "code": "(fn [a b]\n  (loop [prod (* a b) acc []]\n      (if (= prod 0)\n        acc\n        (recur (quot prod 10) (cons (rem prod 10) acc)))))", "user": "56e227a8e4b03a7c14b85a31"}, {"problem": 99, "code": "#(loop [i (* %1 %2)\n            r '()]\n          (if (= i 0)\n              r\n              (recur (quot i 10) (cons (mod i 10) r))))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 99, "code": "#((fn f0 [c]\t(vec (when (> c 0) (conj (f0 (int (/ c 10))) (mod c 10))) )) (* %1 %2))", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 99, "code": "(fn seq-prod [a b]\n(let [ones-digit (fn ones-digit [n]\n(mod n 10))\ndigits (fn digits [n]\n(let [dcount (inc (Math/floor (Math/log n)))]\n(take dcount (lazy-seq (cons (ones-digit n ) (digits (unchecked-divide-int n 10)))))))\n\np (* a b) backseq (digits p)]\n(reverse backseq)\n))", "user": "56d74c88e4b0ea9b8538f7d9"}, {"problem": 99, "code": "#(for [d (str ( * %1 %2)) \n       :let [r (- (int d) (int \\0))]]\n       r)", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 99, "code": "(fn [a b]\n  (letfn [(d [n] (if (zero? n)\n                   []\n                   (conj (d (int (/ n 10))) (mod n 10))))]\n    (d (* a b))))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 99, "code": "(fn [& xs]\n  (->> (str (apply * xs))\n       (map int)\n       (map #(- % (int \\0)))))", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 99, "code": "#(loop [mul (* %1 %2)\n          aux ()]\n     (if (zero? (quot mul 10))\n       (conj aux (rem mul 10))\n       (recur (quot mul 10) (conj aux (rem mul 10)))))", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 99, "code": "(fn [n n2] (into [] (map #(- (int %) 48) (seq (str (* n n2))))))", "user": "56e811e1e4b02e7e935eb6e3"}, {"problem": 99, "code": "(fn f\n    [a b]\n    (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "56df62eee4b0ca2494a095f0"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48) (seq (str (* x y)))))", "user": "560d4994e4b05f002753df3c"}, {"problem": 99, "code": "(fn f\n  [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 99, "code": "(comp (partial map #(Character/getNumericValue %)) str (partial apply *) list)", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 99, "code": "#(->> (* %1 %2)\n       (Integer/toString)\n       (map (fn [x] (Integer/parseInt (str x)))))", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 99, "code": "(fn [a b]\n     (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "563cce5be4b0bfe05bf1183f"}, {"problem": 99, "code": "(fn mult-digit-str [x y]\n  (->> (* x y)\n       (str)\n       (map #(- (int %) 48))))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 99, "code": "(fn [a b] (mapv read-string (map str (seq (str (* a b))))))", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 99, "code": "(fn [a b] (#(if (= 0 %) %2 (recur (quot % 10) (conj %2 (mod % 10)))) (* a b) '()))", "user": "56e06625e4b0ca2494a09607"}, {"problem": 99, "code": "(fn [& xs]                                                                    \n(map #(Character/digit % 10) (seq (str (apply * xs)))))", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 99, "code": "(fn \n  [v1 v2]\n  (map #(Character/getNumericValue %) (str (* v1 v2))))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 99, "code": "(fn product-digits [x y]\n  (loop [n (* x y)\n         res '()]\n    (if (= n 0)\n      res\n      (recur (quot n 10)\n             (cons (rem n 10) res)))))", "user": "518b8561e4b0f028e99addef"}, {"problem": 99, "code": "(fn [a b]\n  (loop [prod (* a b)\n         acc '()]\n    (if (< prod 10)\n      (vec (conj acc prod))\n      (recur (int (/ prod 10.0)) (conj acc (mod prod 10))))))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 99, "code": "(fn [a b]\n    (letfn [(digits [n]\n              (if (= 0 n)\n                '()\n                (cons (mod n 10)\n                      (lazy-seq (digits (quot n 10))))))]\n      (reverse (digits (* a b)))))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 99, "code": "#(map (fn [x] (Integer/valueOf (str x))) (str (* %1 %2)) )", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue %) (String/valueOf (* a b)) ))", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "user": "567798afe4b05957ce8c6169"}, {"problem": 99, "code": "(fn [x y] (->> (* x y)\n     str\n     (map (comp #(- % 48) int))))", "user": "52c35afce4b07a9af579238c"}, {"problem": 99, "code": "(fn[a b]\n  (vec (map #(-> % str Integer.) (str (* a b)))))", "user": "55101237e4b06e50f9beb181"}, {"problem": 99, "code": "(fn [a b]\n  (loop [n (* a b)\n         res '()]\n    (if (zero? n)\n      res\n      (recur (quot n 10) (cons (mod n 10) res)))))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 99, "code": "(fn digits\n([a b] (digits (* a b)))\n([n] (let [r (mod n 10)] (if (pos? n) (conj (digits (/ (- n r) 10)) r) []))))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 99, "code": "(fn [a b]\n  (let [res (* a b)]\n    (vec (map #(Character/digit % 10) (str res)))))", "user": "54084089e4b0addc1aec66c7"}, {"problem": 99, "code": "(fn [n1 n2] (mapv #(Character/digit % 10) (seq (str (* n1 n2)))))", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 99, "code": "(fn p [a b]\n  (loop [n (* a b) res ()]\n    (if (zero? n) (cons 0 res)\n      (if (< n 10) (cons n res)\n        (recur (quot n 10) (cons (rem n 10) res))))))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 99, "code": "(fn [x y]\n  (loop [res '() v (* x y)]\n    (if (zero? v)\n      res\n      (recur (conj res (rem v 10)) (quot v 10)))))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 99, "code": "(fn productDigits \n    [a b]\n    (loop [x (* a b) result () ]\n        (if (< x 10)\n            (cons x result)\n            (recur (quot x 10) (cons (rem x 10) result)))))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y) res []]\n    (if (= 0 n)\n      res\n      (recur (quot n 10) (cons (mod n 10) res)))))", "user": "56be8649e4b0f26550335983"}, {"problem": 99, "code": "(fn [a b] (map #(rem % 10)\n                ((fn f [n, coll]\n                   (if (zero? n)\n                     coll\n                     (conj (f (quot n 10) coll) n)))\n                  (* a b) [])))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 99, "code": "(fn [& args](->> args (apply *) str seq (map str) (map #(Integer/parseInt %)))\n   )", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 99, "code": "(fn [x y]\n  (into [] (map #(Character/digit % 10) (str (* x y)))))", "user": "52b94e26e4b07a9af57922b9"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt %) (re-seq #\"\\d\" (Integer/toString (* a b)))))", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "user": "56fdd9a1e4b08d47c97781a8"}, {"problem": 99, "code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "52c1cc8be4b07a9af579236b"}, {"problem": 99, "code": "(fn [& n] (reduce (fn [acc s] (conj acc (Integer/parseInt (str s))))\n                  []\n                  (str (apply * n))))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 99, "code": "(fn solve [x y] (into [] (map #(- (int %) (int \\0)) (str (* x y)))))", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 99, "code": "(fn [x y]\n  (let [dig (apply hash-map (apply concat (map #(vector (.toString %) %) (range 10))))]\n    (map #(dig (str %)) (re-seq #\"\\d\" (.toString (* x y))))))", "user": "57008afae4b08d47c97781ca"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (vec (str (* a b)))))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 99, "code": "(fn [a b] (loop [res [] n (* a b)] (if (zero? n) (reverse res) (recur (conj res (rem n 10)) (quot n 10)))))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y)\n         acc '()]\n    (if (zero? (quot n 10))\n      (cons n acc)\n      (recur (quot n 10) (cons (mod n 10) acc)))))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 99, "code": "(fn [& xs]\n            (let [n (apply *' xs)]\n              (->> (iterate (fn [[q r]] [(quot q 10) (rem q 10)]) [n])\n                   (take-while (fn [vs] (some (complement zero?) vs)))\n                   (map second)\n                   rest\n                   reverse\n                   (into []))))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str seq\n      (map str)\n      (map (fn [x] (Integer. x))))", "user": "57023fc2e4b08d47c97781db"}, {"problem": 99, "code": "(fn\n  [x y]\n  (seq (map #(Integer/parseInt %) \n            (rest (clojure.string/split (str (* x y)) #\"\")))))", "user": "5707b96fe4b0b0fb43fd0690"}, {"problem": 99, "code": "#(map (fn [s] (Integer/parseInt (str s))) (str (* %1 %2)))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 99, "code": "#(->> (* % %2) str (re-seq #\"\\d\") (map read-string))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "user": "54a6645be4b09f271ff37c87"}, {"problem": 99, "code": "(fn [x y]\n  (let [p (* x y)\n        ps (str p)]\n    (mapv #(- (int %) (int \\0)) ps)))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) str (map #(- (int %) (int \\0)))))", "user": "4e690ace535d8ccf87e9fe95"}, {"problem": 99, "code": "(fn [a b]\n   (->> (* a b)\n        str\n        (map str)\n        (map #(Integer/parseInt %))\n           \n        )\n   )", "user": "55ba70f9e4b01b9910ae29d4"}, {"problem": 99, "code": "(fn [a b]\n  (loop [n (* a b) out ()]\n    (if (= n 0)\n      out\n      (recur (int (/ n 10)) (cons (mod n 10) out)))))", "user": "4f8490fae4b033992c121c34"}, {"problem": 99, "code": "(fn [x y]\n  (loop [prod (* x y) acc []]\n    (if (zero? prod)\n      acc\n      (recur (quot prod 10) (cons (rem prod 10) acc)))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 99, "code": "(fn [a b] (into [] (map #(Integer/parseInt (str %)) (seq (str (* a b))))))", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 99, "code": "(fn [x y](map #(- (int %) (int \\0)) (seq (str (* x y)))))", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 99, "code": "(fn [x y] \n  (->>\n   (* x y)\n   (str)\n   (seq)\n   (map (comp read-string str))\n   )\n  )", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 99, "code": "(fn [& digits]\n    (map #(Character/digit % 10)\n         (str (apply * digits))))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 99, "code": "#(->> (* % %2) str (map (fn [c] (Integer/parseInt (str c)))) vec)", "user": "4f57c913e4b0a7574ea7183f"}, {"problem": 99, "code": "(fn [a b] \n\t(read-string (clojure.string/replace (str (into [] (str (* a b)))) #\"\\\\\" \"\"))\n)", "user": "5710e574e4b09c608db7043b"}, {"problem": 99, "code": "(fn [n m] (map #(Integer/parseInt (str %)) (str (* n m))))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 99, "code": "#(map (comp read-string str) (seq (str (* %1 %2))))", "user": "57168db0e4b07c98581c3afc"}, {"problem": 99, "code": "(fn proddigit\n  [x y]\n  (->> (* x y)\n  \t(str)\n  \t(seq)\n    (map str)\n    (mapv bigint)))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 99, "code": "(fn [a b] \n   (map #(-> % str read-string) (-> (* a b) str seq)))", "user": "569aca1ee4b0542e1f8d144d"}, {"problem": 99, "code": "#(reduce (fn [x y] (into x (vector (- (int y) 48)))) [] (str (* %1 %2)))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 99, "code": "(fn [lhs rhs]\n  (map #(- (int %) (int \\0)) (str (* lhs rhs))))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y) (iterate #(quot % 10)) (take-while pos?) (map #(mod % 10)) reverse))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 99, "code": "(fn [a b]\n       (vec(map #(Character/digit % 10) (seq(str (* a b))))))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 99, "code": "(fn [x y]\n      (loop [c 10 m (* x y) l []] \n            (cond \n                  (zero? m) (reverse l)\n                  :else (recur c (quot m 10) (conj l (mod m 10)))\n                  )))", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "user": "52393e16e4b0d705d026ef06"}, {"problem": 99, "code": "(fn\n   [a b]\n   (let [mul (* a b)]\n       (loop [num mul\n               result ()]\n           (if (zero? (quot num 10))\n               (cons num result)\n               (recur (quot num 10) (cons (mod num 10) result))))))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 99, "code": "(fn [x y]\n(->> (* x y)\n     (str)\n     (map #(Character/digit % 10))))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 99, "code": "(comp (fn [s] (map #(Character/digit % 10) s)) str *)", "user": "571e6d73e4b0145328a76292"}, {"problem": 99, "code": "(fn [a b]\n  ((fn [res n]\n    (if (zero? n)\n      res \n      (recur (conj res (mod n 10)) (int (/ n 10))))) '() (* a b)))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 99, "code": "(fn [x y] (vec (map #(Character/getNumericValue %) (str (* x y)))))", "user": "54caaa48e4b057c6fda3a267"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 99, "code": "(fn [x y]\n  (->>\n  (* x y)\n  (str)\n  (map #(- (int %) (int \\0)))\n  ))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 99, "code": "(fn prod-dig [a b] (reverse (map #(rem % 10) (take-while pos? (iterate #(int (/ % 10)) (* a b))))))", "user": "56fbcc1fe4b07572ad1a88d5"}, {"problem": 99, "code": "(fn [num1 num2]\n  (let [separator (fn [x] (loop [x x\n                                 acc []]\n                            (if (zero? x)\n                              acc\n                              (recur (int (/ x 10)) (concat [(- x (* (int (/ x 10)) 10))] acc)))))]\n    (separator (* num1 num2))))", "user": "571cd9dce4b0145328a76271"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (seq (str (* a b)))))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 99, "code": "(fn product-digits [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "user": "571d063ee4b0145328a76272"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "user": "4df73d64535d04ed9115e775"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 99, "code": "(fn [x y]\n  (for [s (map str (seq (str (* x y))))]\n    (Integer. s)))", "user": "5574c172e4b05c286339e059"}, {"problem": 99, "code": "(fn [a b] (let [prod (* a b)\n        len (count (str prod))]\n    (map #(rem % 10) (reverse (take len (iterate #(quot % 10) prod))))))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 99, "code": "(fn\n  [a b]\n  (map #(- (int %) (int \\0)) (str (* a b))))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "512318b6e4b03b44edbed433"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 99, "code": "(fn \n  [x y]\n  (map #(Character/getNumericValue %)\n       (str (* x y))))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "571dd145e4b0145328a76283"}, {"problem": 99, "code": "(fn [x y]\n  (map (comp read-string str) (seq (str (* x y)))))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (vec (str (* x y)))))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 99, "code": "(fn [a b] \n  (\n    -> \n    (* a b) \n    (str) \n    ((partial \n      map \n      #(- (int %) 48)\n    ))\n    vec\n  )\n)", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/digit %1 10)  (str (* a b))))", "user": "53483a32e4b084c2834f4a57"}, {"problem": 99, "code": "(fn [x y] (map #(-> % str Integer/parseInt)\n  \t\t  (str (* x y))))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 99, "code": "(fn [n1 n2]\n  (map #(Integer/parseInt (str %)) (str (* n1 n2))))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 99, "code": "#(map (fn [i] (read-string (str i))) (str (* % %2)))", "user": "57169f93e4b07c98581c3b00"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "user": "52cbe5dfe4b07d0d72b27352"}, {"problem": 99, "code": "(fn [& args]\n    (map #(Integer/parseInt %) (map str (seq (str (apply * args))))))", "user": "572b73d0e4b0cd1946bd0f3a"}, {"problem": 99, "code": "(fn doit [x y]\n\t(map #(- (int %) 48) (seq (str (* x y))))\n  )", "user": "5710b136e4b09c608db70437"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n     str\n     (re-seq #\"\\d\")\n     (mapv #(Integer. %))))", "user": "542d5fa9e4b0dad94371f2b5"}, {"problem": 99, "code": "(fn func\n  [x y]\n  (if (< (* x y) 10)\n    [(* x y)]\n    (conj (func (/ (- (* x y) (rem (* x y) 10)) 10) 1) (rem (* x y) 10))\n    )\n  )", "user": "56de78fde4b0ea9b8538f83c"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (vec (str (* x y)))))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 99, "code": "(fn  f [a b]  \n  (\n  (fn c [n res]\n    (if (zero? n) \n      res\n      (c (quot n 10)  (cons (mod n 10) res) )\n      )\n    \n    \n    )\n  \n  (* a b)\n   []\n  )\n  \n  )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 99, "code": "(fn [a b]\n    (vec (#(->> (* %1 %2) str \n          (map (comp read-string str))) a b)))", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 99, "code": "(fn [a b]\n  (let [pr (* a b)]\n    (loop [l '() v pr]\n      (if (zero? v)\n        l\n        (recur (conj l (mod v 10)) (quot v 10))))))", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 99, "code": "(fn [x y] ((fn sep [z]\n                   (if (zero? (quot z 10))\n                     (vector z)\n                     (conj (sep (quot z 10)) \n                           (mod z 10)))) (* x y)))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 99, "code": "(fn [arg1 arg2] (map #(Character/digit %1 10) (reverse (into '() (str (* arg1 arg2))))))", "user": "571d9669e4b0145328a7627f"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer. (str %)) (apply list (str (* x y)))))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt (str %))\n       (str (* x y))))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 99, "code": "#(loop [x () a (* % %2)] (let [r (mod a 10)] (if (= 0 a) x (recur (conj x r) (/ (- a r) 10)))))", "user": "55c3f19de4b0e31453f64991"}, {"problem": 99, "code": "(fn [a b]\n  (loop [m (* a b) r '()]\n    (if (= 0 m)\n      r\n      (recur (quot m 10) (conj r (rem m 10))))))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 99, "code": "(fn digits [a b]\n                   (map #(read-string (str %)) (str (* a b))))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 99, "code": "(fn [a b] (map (comp read-string str) ((comp seq str *) a b)))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 99, "code": "(fn [x y] \n  (map #(Character/digit % 10) \n       (seq (str (* x y)))))", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 99, "code": "(fn product-digits [& more]\n      (loop [i (apply * more) ret []]\n         (if (= 0 i) (reverse ret)\n            (when (> i 0)\n                (recur (quot i 10) (conj ret (rem i 10)))\n ))))", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 99, "code": "(letfn [(f [n xs]\n          (if (= 0 (int (/ n 10)))\n            (cons (mod n 10) xs)\n            (f (int (/ n 10)) (cons (mod n 10) xs))))]\n  #(f (* %1 %2) []))", "user": "56795deae4b05957ce8c6187"}, {"problem": 99, "code": "(fn\n  [a b]\n  (let [a a b b c (* a b)]\n  (map #(Character/getNumericValue %) (str (identity c)))))", "user": "57061d20e4b0b0fb43fd0679"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) 48))\n       (str (* % %2)))", "user": "51647faae4b003cf19fdde3b"}, {"problem": 99, "code": "(fn [x y]\n  (let [product (* x y)]\n    (loop [n product s ()]\n      (if (< n 10) \n        (conj s n)\n        (recur (int (/ n 10)) (conj s (rem n 10)))\n      )\n    )\n  )\n)", "user": "571172ece4b09c608db70446"}, {"problem": 99, "code": "(fn [a b]\n  (let [n (* a b)]\n    (loop [n n\n           d '()]\n      (if (< n 10)\n\t\t  (cons n d)\n          (recur (quot n 10) (cons (mod n 10) d))))))", "user": "574c3a7ce4b02ea114799219"}, {"problem": 99, "code": "(fn [x y] \n  (loop [j (* x y) rslt [] ]\n    (if (= 0 j)  rslt\n      (recur (quot j 10) (cons (rem j 10) rslt)))))", "user": "572ac718e4b0f4d77e651242"}, {"problem": 99, "code": "#(->> (* %1 %2) str seq (map (fn [x] (Character/getNumericValue x))))", "user": "574a9132e4b02ea1147991fd"}, {"problem": 99, "code": "(fn [n1 n2] (vec (map #(Character/getNumericValue %) (seq (str (* n1 n2))))))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       str\n       seq\n       (map str)\n       (map #(Integer/parseInt %))\n       vec))", "user": "56ac81ace4b03c432f187347"}, {"problem": 99, "code": "(fn[x y] \n  (into [] \n        (map #(Integer. (re-find  #\"\\d+\" % ))  \n             (map  str  (into [] (str (* x y)))) \n             )\n       \n   )\n )", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 99, "code": "(fn [a b]\n  (map (comp read-string str) (vec (str (* a b)))))", "user": "56bb652ae4b0f26550335953"}, {"problem": 99, "code": "(fn [a b]\n  (let [x (* a b)]\n    (loop [acc [] x x]\n      (if (zero? x) acc\n        (recur (cons (mod x 10) acc)\n               (int (/ x 10)))))))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 99, "code": "(fn [a b]\n  (loop [d (* a b)\n         acc '()]\n    (if (zero? d)\n      acc\n      (recur (quot d 10) (conj acc (rem d 10))))))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y) digits []]\n    (if (< n 10)\n      (cons (int n) digits)\n      (recur (quot n 10) (cons (int (rem n 10)) digits)))))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 99, "code": "(fn [x y] \n  (map #(Integer/parseInt (.toString %)) (seq (str (* x y)))))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 99, "code": "(fn [a b] (mapv #(read-string (str %)) (str (* a b))))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 99, "code": "(fn [x y] \n  (loop [n (* x y) res []]\n    (if (zero? n)\n      res\n      (recur (long (/ n 10)) (cons (mod n 10) res)))))", "user": "508c3d42e4b0f17d83ea26b2"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 99, "code": "#( map ( comp read-string str ) ( seq ( str ( * %1 %2 ) ) ) )", "user": "57561529e4b02ea1147992d3"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 99, "code": "(fn [a b]\n    (let [result (* a b)]\n      (vec (map #(- (int %) 48) (str result)))))", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 99, "code": "(fn[x y]\n  (into [] \n    (map \n      #(read-string (str %)) \n      (str (* x y))\n    )\n  )\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 99, "code": "(fn [n p]\n  (map read-string (filter #(not (= % \"\")) (clojure.string/split (str (* n p)) #\"\")))\n  )", "user": "56a94562e4b07966d5a8a074"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 99, "code": "(fn [x1 x2] (loop [m (* x1 x2)\n                   s ()] \n              (if (> 10 m) \n                (conj s m)\n                (recur (int (/ m 10)) \n                       (conj s (mod m 10)))\n                )))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (seq (str (* a b)))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 99, "code": "(fn [x, y]\n  ((fn foo [x]\n    (if (= x 0) []\n      (conj (foo (unchecked-divide-int x 10)) (mod x 10)))) (* x y)))", "user": "5760715de4b08062f99a4e96"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       (str)\n       (seq)\n       (map str)\n       (map #(Integer/valueOf %))))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 99, "code": "(fn [x y] (map #(-(int %) 48) (str (* x y))))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 99, "code": "(fn [a b]\n  (loop [s (* a b) acc []] \n              (if (< s 10)\n                (conj acc s)\n                (recur (quot s 10) (cons (rem s 10) acc))\n              )))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       str\n       (map #(Integer/parseInt (str %)))))", "user": "575cbe44e4b02ea114799374"}, {"problem": 99, "code": "(fn product[x y]\n  (let[n (str (* x y))]\n    (map #(- (int %) 48) n)))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 99, "code": "(comp (partial map #(Integer/parseInt (str %))) seq str *)", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 99, "code": "(fn [a b] (->> a (* b) str (map #(Character/digit % 10))))", "user": "57642916e4b0994c1922fbee"}, {"problem": 99, "code": "(fn product-digits [a b]\n  (loop [c (* a b)\n         resp '()]\n    (if (= c 0)\n      resp\n      (recur (quot c 10) (conj resp (mod c 10))))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 99, "code": "(fn [a b]\n  (loop [n (* a b) res []]\n    (if (zero? n)\n      res\n      (recur (long (/ n 10)) (cons (mod n 10) res)))))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 99, "code": "(fn [& s] (map #(Character/digit % 10) (str (apply * s))))", "user": "5761a772e4b0994c1922fb95"}, {"problem": 99, "code": "(fn [x y] \n  (->> (* x y) str (map (comp read-string str))))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 99, "code": "(fn product-digits\n  [x y]\n  (map #(Integer. (str %)) (seq (Integer/toString (* x y)))))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 99, "code": "(fn [a b]\n  (let [product (* a b)]\n    (loop [remaining product\n           place 10\n           result (list)]\n      (if (zero? remaining)\n        result\n        (let [n (mod remaining place)\n              remaining (- remaining n)\n              digit (/ n (/ place 10))\n              result (conj result digit)]\n          (recur remaining (* 10 place) result))))))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 99, "code": "(fn digs [n1 n2]\n  (let [n (* n1 n2)]\n    (cond\n      (< n 10) [n]\n      :else (conj (digs (quot n 10) 1) (mod n 10)))))", "user": "561d506ee4b064ca9f4b16aa"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* % %2)))", "user": "53bc10f5e4b047364c04450d"}, {"problem": 99, "code": ";#(map (comp read-string str) (vec (str (* %1 %2))))\n#(->> (* %1 %2)\n      (str)\n      (vec)\n      (map (comp read-string str)))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "53572767e4b04ce2eb3ed277"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48) (seq (str (* x y)))))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 99, "code": "(fn [a b] \n  (map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9}\n       (seq (str (* a b)))))", "user": "57607706e4b08062f99a4e97"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "57604a87e4b08062f99a4e91"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "user": "576e3258e4b0979f89651574"}, {"problem": 99, "code": "(fn product-digits [a b]\n  (let [divisor 10]\n    (loop [product (* a b), result []]\n      (if (= 0 product)\n        result\n        (recur (quot product divisor) (cons (rem product divisor) result))))))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 99, "code": "(fn [x y] (map (fn [x] (- (int x) 48)) (seq (str (* x y)))))", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 99, "code": "(fn [& n]\n  (map #(- (int %) (int \\0)) (str (apply * n))))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 99, "code": "(fn [arg1 arg2] (#(loop [arg3 % arg4 []] (if (< arg3 10) (cons arg3 arg4) (recur (long (float (/ arg3 10))) (cons (rem arg3 10) arg4)))) (* arg1 arg2)))", "user": "5720ba36e4b0c5bde472c09c"}, {"problem": 99, "code": "(fn [x y]\n  (let [digits #(map read-string (map str (seq (str %))))]\n    (digits (* x y))))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 99, "code": "#(map read-string (map str (seq (str (* %1 %2)))))", "user": "575bd5f9e4b02ea114799365"}, {"problem": 99, "code": "(fn prodDigs [a b]\n  (let [c (* a b)]\n    (loop [cur c agg '()]\n      (if (< cur 10) (vec (cons (rem cur 10) agg))\n      (recur (quot cur 10) (cons (rem cur 10) agg))))))", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 99, "code": "#(reduce \n  (fn [accum x] (conj accum (Integer/parseInt x))) \n  [] (re-seq #\"\\d\" (str (* %1 %2))))", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "50c95c4fe4b0bed41a12298f"}, {"problem": 99, "code": "(fn [& xs]\n  (loop [n (apply * xs)\n         acc ()]\n    (let [q (quot n 10)\n          r (rem n 10)]\n      (if (zero? q)\n        (cons r acc)\n        (recur q (cons r acc))))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 99, "code": "#(->> %1 (* %2) str seq (map str) (map read-string))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b) (str) (seq) (map (fn [x] (Integer. (str x))))))", "user": "577629abe4b0979f8965162e"}, {"problem": 99, "code": "(fn\n  [a b]\n  (let [prod (* a b)]\n    (loop [prod prod v []]\n      (if (>= prod 1)\n        (recur (unchecked-divide-int prod 10) (conj v (rem prod 10)) )\n        (vec (reverse v))))))", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "575d16f8e4b02ea114799377"}, {"problem": 99, "code": "(fn [x y] (letfn [(digits [n] (if (zero? n) [] (conj (digits (quot n 10)) (mod n 10))))] (digits (* x y))))", "user": "55dbed2fe4b050e68259b3a6"}, {"problem": 99, "code": "#(loop [x (* % %2) digits '()]\n   (if (zero? x)\n     digits\n     (recur (quot x 10) \n            (conj digits (rem x 10)))))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 99, "code": "(fn [x y]\n  (loop [tmp (* x y) result []]\n    (if (= tmp 0)\n      (reverse result)\n      (recur (quot tmp 10)(conj result (mod tmp 10)))\n      )\n    )\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 99, "code": "#(vec (map read-string (map str (seq (str (* %1 %2))))))", "user": "548f3ed8e4b0e286459a1236"}, {"problem": 99, "code": "(fn t[a b] (vec (map #(read-string (str %)) (seq (str (* a b))))))", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "5776f39de4b0979f89651643"}, {"problem": 99, "code": "(fn [x y]\n  (mapv #(- (int %) (int \\0))(seq (str (* x y)) )))", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 99, "code": "(fn [a b]\n  (letfn [(digs [x]\n            (let [q (quot x 10) r (rem x 10)]\n              (lazy-seq (if (= 0 q) (list r) (cons r (digs q))))\n              ))] \n    (reverse (digs (* a b)))\n    ))", "user": "577829f9e4b0979f8965165a"}, {"problem": 99, "code": "(fn [a b] vec (map #(Character/digit % 10) (str (* a b))))", "user": "560c37b5e4b05f002753df2e"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "5776558ee4b0979f89651633"}, {"problem": 99, "code": "(fn [x y] (map #(Integer. (str %)) (seq (str (* x y)))))", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 99, "code": "(fn [n1 n2]\n  (loop [n      (* n1 n2)\n         result []]\n    (if (zero? n)\n      result\n      (recur (quot n 10) (vec (cons (mod n 10) result))))))\n\n;;(fn [n1 n2]\n;;  (let [n (* n1 n2)]\n;;    (loop [n       (* n1 n2)\n;;          divisor (->> n Math/log10 inc long dec (Math/pow 10) long)\n;;           result  []]\n;;      (if (= divisor 0)\n;;        result\n;;        (let [q (quot n divisor)]\n;;          (recur  (- n (* divisor q)) (quot divisor 10) (conj result q)))))))\n\n;; (fn [n1 n2] (->> (* n1 n2) str (mapv #(Character/getNumericValue %))))", "user": "51319a53e4b06942423563c8"}, {"problem": 99, "code": "(fn [x y] (vec (map #(Character/digit % 10) (str (* x y)))))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 99, "code": "(comp (partial map #(Character/getNumericValue %)) str *)", "user": "5776385fe4b0979f89651632"}, {"problem": 99, "code": "(fn product-digits [x y]\n    (->> (* x y)\n         str\n         (mapv #(- (int %) (int \\0)))))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "576df252e4b0979f8965156f"}, {"problem": 99, "code": "(fn [a b]\n  (into [] (map #(Integer/parseInt (str %)) (seq (str (* a b))))))", "user": "4f8ac2bde4b02e764a0a5172"}, {"problem": 99, "code": "(fn [x y]\n  (loop [sum (* x y)\n         acc ()]\n    (if (< sum 10)\n      (conj acc sum)\n      (recur (int (/ sum 10)) (conj acc (mod sum 10))))))", "user": "52c03baee4b07a9af5792347"}, {"problem": 99, "code": "#(map (fn [x] (Integer/valueOf (str x))) (str (* %1 %2)))", "user": "575e71a2e4b0846ea39baf26"}, {"problem": 99, "code": "(fn [m n]\n  (letfn [(digits [n s]\n            (if (zero? n) s\n                (recur (quot n 10) (conj s (mod n 10)))))]\n          (digits (* m n) '())))", "user": "56f53962e4b046a417f9206c"}, {"problem": 99, "code": "#(let [prod (* %1 %2)] (loop [qot prod xs ()]\n                                  (if (zero? qot) xs\n                                    (recur (quot qot 10) (cons (rem qot 10) xs)))))", "user": "57615a22e4b0994c1922fb88"}, {"problem": 99, "code": "(fn [x y]\n  (->> (str (* x y))\n       seq\n       (map str)\n       (map read-string)))", "user": "5785de4ce4b0ebec4cfb74e6"}, {"problem": 99, "code": "(fn\n  [a b]\n  (map #(Character/digit % 10) (seq (str (* a b)))))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 99, "code": "(fn [x y] \n   (map #(Character/getNumericValue %)\n(into [] (str (* x y)))))", "user": "5786c182e4b0ebec4cfb74fd"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y) digits []]\n    (if (< n 10)\n      (cons (int n) digits)\n      (recur (quot n 10) (cons (int (rem n 10)) digits)))))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y) digits []]\n    (if (< n 10)\n      (cons (int n) digits)\n      (recur (quot n 10) (cons (int (rem n 10)) digits)))))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 99, "code": "(fn [n1 n2]\n  (map #(Integer/parseInt (str %)) (str (* n1 n2))))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 99, "code": "(fn [n1 n2]\n  (map #(- (int %) 48) (vec (str (* n1 n2)))))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 99, "code": "(fn [a b] ((fn f [x t]  (if (> x 0) (conj  (f (int (/ x 10)) t) (int (rem x 10))) t)) (* a b) []))", "user": "4e5e9f6b535d8a8b8723a2d2"}, {"problem": 99, "code": "(fn [a b]\n  (map  #(Integer.  (str %))  (seq (str (* a b))))\n  )", "user": "579601c8e4b0e215f87e8492"}, {"problem": 99, "code": "(fn [a b] (vec (map #(read-string (str %)) (str (* a b)))))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) 48)) (str (* % %2)))", "user": "577202d2e4b0979f896515c0"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (seq (str (* a b)))))", "user": "5691ef12e4b0dcc4269f40f8"}, {"problem": 99, "code": "(fn [x1 x2]\n  (let [x (* x1 x2) z (int \\0)]\n\t(vec (map #(- (int %) z) (str x)))))", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 99, "code": "(letfn [(digits [n]\n    (let [[ds n]\n      (last (take-while\n        (comp (complement zero?) second)\n        (iterate\n          (fn [[ds n]] [(conj ds (mod n 10)) (int (/ n 10))])\n          [[] n])))]\n      (conj ds n)))\n        (solve [a b] (reverse (digits (* a b))))]\n  solve)", "user": "57717915e4b0979f896515b3"}, {"problem": 99, "code": ";(into [] (\n (fn [a b]\n  (map #(bigint (str %)) (str (* a b))))\n ;1 2))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 99, "code": "(fn [a b]\n  (loop [n (* a b) digits (list)]\n    (if (= 0 n)\n      (if (empty? digits)\n        (list 0)\n        digits\n      )\n      (recur (quot n 10) (conj digits (mod n 10)))\n    )\n  )\n)", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 99, "code": "(let [digit #(Character/digit % 10)]\n  (comp #(map digit %) str *))", "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"problem": 99, "code": "(fn [a b]\n    (apply vector\n      (map\n        (fn [c]\n          (-\n            (int c)\n            (int \\0)\n          )\n        )\n        (str\n          (* a b)\n        )\n      )\n    )\n  )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 99, "code": "(fn [x y] (map (fn [c] (- (int c) 48))  (seq (str (* x y)))))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 99, "code": "(fn [a b]\n  (loop [result (list)\n         n (* a b)]\n    (let [digit (mod n 10)\n          next-n (/ (- n digit) 10)\n          next-result (conj result digit)]\n      (if (zero? next-n)\n        next-result\n        (recur next-result next-n)))))", "user": "5033ed65e4b062bc5d7ae15a"}, {"problem": 99, "code": "(fn [a b] (flatten(for [x (str (* a b))] [(Integer/parseInt (str x))])))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 99, "code": "(fn [a b]\n    (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 99, "code": "(fn mult-and-seq [x y]\n  (into [] (map #(bigint (str %)) (str (* x y)))))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       str\n       (map (comp read-string str))))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 99, "code": "(fn f [x y]\n  (map #(- (int %) 48) (str (* x y))))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 99, "code": "(fn [x y]\n   (map read-string (map str  (vec (str (* x y))))))", "user": "51e7c1f1e4b0a3e081b8cbef"}, {"problem": 99, "code": "(fn fun91 [a b]\n  (loop [n (* a b) acc ()]\n    (if (< n 10)\n      (cons n acc)\n      (recur (int (Math/floor (/ n 10))) (cons (rem n 10) acc)))))", "user": "5075e374e4b09049dea827a5"}, {"problem": 99, "code": "(fn [x y]\n   (->>\n    (* x y)\n    str\n    (map #(Integer/parseInt (str %)))))", "user": "5452a300e4b0e397800069c7"}, {"problem": 99, "code": "(fn sn [n1 n2](map #(Integer. (str %)) (str (* n1 n2))))\n;; not happy with this one would have preferred to have not used Strings", "user": "57752a2de4b0979f89651613"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 99, "code": "(fn [a b]\n(map (fn [n] (int (mod n 10)))\n     (reverse \n       (take-while \n         pos? \n         (reductions\n           (fn [x y] (Math/floor (/ x y)))\n           (* a b) (repeat 10))))))", "user": "515cf9b5e4b00901442db1d4"}, {"problem": 99, "code": "(fn [a b]\n (map #(- (int %) (int \\0)) (str (* a b))) \n )", "user": "57a8eba2e4b0a96607956225"}, {"problem": 99, "code": "#(map (fn [c] (- (int c) 48))(str (* % %2)))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "57aa103be4b0b8559636fc64"}, {"problem": 99, "code": "(fn [x y]\n    (->> (* x y)\n      str\n      (map #(Integer/parseInt (str %)))))", "user": "4e837808535db62dc21a62d9"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 99, "code": "#(let[p (* %1 %2)]\n   (loop[r (quot p 10) res [(mod p 10)]]\n     (if (pos? r)\n       (recur (quot r 10) (conj res (mod r 10)))\n       (rseq res))))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 99, "code": "#((fn [n]\n      (loop [tmp n res '()]\n      (if (pos? tmp)\n        (recur (quot tmp 10) (conj res (rem tmp 10)))\n        (if (zero? n) (conj res 0) res)))) (* %1 %2))", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 99, "code": "(fn [x y] \n  (map (fn [z] \n         (- (int z) (int \\0))\n         ) (str (* x y)))\n  )", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 99, "code": "(fn f [a b]\n  (let [n (* a b)]\n    (loop [acc [(rem n 10)] q (quot n 10)]\n      (if (zero? q) acc\n        (recur (cons (rem q 10) acc) (quot q 10))))))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 99, "code": "(fn [& in] (map #(Integer. (str %)) (str (reduce * in))))", "user": "56bfd8ade4b060a8e693e3a2"}, {"problem": 99, "code": "#(map read-string (map str (str (* %1 %2))))", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 99, "code": "#(map read-string (map str (str (* %1 %2))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 99, "code": "(fn [x y]\n  (let [ns (str (* x y))]\n    (mapv (comp read-string str) (vec ns))))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 99, "code": "(fn mul [x y]\n  (let [prod (* x y)]\n    (loop [p prod digits []]\n      (if (< p 10) (conj digits p) (recur (int (/ p 10)) (cons (rem p 10) digits))))))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 99, "code": "(fn [a b]\n  (reverse (loop [n (* a b) r []]\n    (if (= n 0)\n      r\n      (recur (quot n 10) (conj r (rem n 10)))))))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 99, "code": "#(map (comp read-string str) (seq (str (* %1 %2))))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 99, "code": "(fn blah \n  ([a b] (blah (* a b) 10 '()))\n  ([val modVal ret]\n   (do (println val modVal ret)\n    (if (= val 0)\n      ret\n      (recur (int (/ val modVal)) modVal (cons (mod val modVal) ret))))))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 99, "code": "(fn test [x y]\n  (letfn [(to-int [x] (- (int x) (int \\0)))]\n    (map to-int (str (* x y)))))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 99, "code": "(fn multi-seq\n  [x y]\n  (loop [m (* x y)  digits []]\n    (if (>= m 1)\n      (recur (quot m 10) (cons (mod m 10) digits))\n      digits)))", "user": "568bd448e4b0dcc4269f40a9"}, {"problem": 99, "code": "(fn [n1 n2]\n  (loop [r []\n         n (* n1 n2)]\n    (if (= n 0)\n      r\n      (recur (cons (mod n 10) r) (int (/ n 10))))))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 99, "code": "(fn explode [x y]\n  (into [] (map #(Character/digit % 10) (str (* x y))))\n  )", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 99, "code": "(fn multi [a b]\n  (let[f (fn [r] (map #(- (int %) 48) (str r)))]\n    (f (* a b))))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 99, "code": "(fn [x y]\n  (let [n (* x y)]\n    (->> n\n         str\n         (reduce #(conj %1 %2) [])\n         (map str)\n         (map read-string))))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 99, "code": "(fn [& more] (vec(map #((comp read-string str) %) (-> (apply * more) str seq))))", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 99, "code": ";todo\n(fn [a b] (map #(- (int %) 48) (str (* a b))))\n#_(fn [a b]\n  (loop [n (* a b) m ()]\n      (if (<= n 0)\n        m\n        (recur (quot n 10) (conj m (rem n 10)))\n        )\n    )\n  )", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 99, "code": "#((fn [n ds] (if (= n 0) ds (recur (int(/ n 10))\n                                     (conj ds (mod n 10)))))\n  (* % %2) '())", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 99, "code": "(fn [x y] (vec (map #(java.math.BigInteger. %) (re-seq #\"\\d\" (Integer/toString (* x y))))))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 99, "code": "(fn lol-kek [n1 n2]\n  (loop [val (* n1 n2) res '()]\n  (if (> val 0) (recur (quot val 10) (cons (rem val 10) res) ) \nres) ))", "user": "57c7cef5e4b05aa3c4741d0d"}, {"problem": 99, "code": "(fn [x y] (vec (map #(- (int %) (int \\0)) (str (* x y)))))", "user": "57b45257e4b0fbc9809a2796"}, {"problem": 99, "code": "(fn[a b] (loop [v (* a b) result[]] (if (zero? v) result (recur (quot v 10) (cons (mod v 10) result)))))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 99, "code": "(fn [a b] (->> (* a b)\n            str\n            seq\n            (map #(Character/digit % 10))))", "user": "56c6a3c3e4b05cc29241eeb3"}, {"problem": 99, "code": "#(->> (* % %2)\n\tstr\n\tseq\n\t(map (comp read-string str)))", "user": "57a88e24e4b0a9660795621f"}, {"problem": 99, "code": "(fn [x y]\n  (loop [current (* x y) result []]\n    (if (= current 0)\n      result\n      (recur (quot current 10) (cons (mod current 10) result) )\n      )\n    ))", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 99, "code": "#(->> (* %1 %2) str seq (map str) (map read-string))", "user": "57cd7498e4b0c746388ab897"}, {"problem": 99, "code": "(fn fun[a b]\n  (loop [n (* a b)\n         res ()]\n    (if (= n 0)\n      res\n      (recur (long (/ n 10)) (conj  res (mod n 10)) ) )\n     )\n   )", "user": "57cc14aae4b05aa3c4741d4a"}, {"problem": 99, "code": "(fn product-digits [a b]\n  (map #(Character/getNumericValue %) (str (* a b))))    ;JAVA\u8bed\u6cd5\u3002\u3002\u3002Character\u4e2d\u7684getnumericvalue\u65b9\u6cd5\u3002\u5bf9\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u62c6\u5206\u3002\u3002", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 99, "code": "(fn [a b] \n  (let [c (* a b)]\n    ((fn ! [x]\n       (let [m (mod x 10)\n             y (/ (- x m) 10)]\n         (if (= 0 y)\n           [x]\n           (conj (! y) m)))) c)))", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 99, "code": "(fn [x y] (map read-string (map str (seq (str (* x y))))))", "user": "57a774e4e4b0a96607956213"}, {"problem": 99, "code": "(fn [x y]\n  (into []\n    (let [a (* x y)]\n      (map #(Character/digit % 10) (str a)))))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 99, "code": "(fn [n m]\n  (let [p (* n m)]\n    (into [] (map #(Character/digit % 10) (str p)) )))", "user": "5785de71e4b0ebec4cfb74e7"}, {"problem": 99, "code": "#(map (comp read-string str) ((comp str *) %1 %2))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 99, "code": "(fn [a b]\n  (let [n (str (* a b))]\n    (map #(Character/digit % 10) n)))", "user": "57dda21be4b0bd073c202445"}, {"problem": 99, "code": "(comp vec (partial map #(Integer. %)) (partial remove empty?) #(clojure.string/split % #\"\") str *)", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 99, "code": "(fn [a b]\n   (map #(Integer/parseInt (.toString %)) (str (* a b))))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 99, "code": "(fn\n  [n1 n2]\n  (letfn [(g-d ([num result] (if (= num 0)\n                               []\n                               (conj (g-d (int (/ num 10)) result) (mod num 10))))\n            ([num] (g-d num [])))]\n    (g-d (* n1 n2))))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 99, "code": "(fn [x y] (map #(read-string (str %)) (str (* x y))))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 99, "code": "#(loop [c (* %1 %2) r ()]\n\t(if (= c 0)\n\t\t(if (empty? r) '(0) r)\n\t\t(recur (int (/ c 10)) (conj r (rem c 10)))))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 99, "code": "(fn [a b]\n  (let [x (* a b)]\n    (loop [x x r '()]\n      (if (= x 0) r\n        (recur (int (/ x 10)) (cons (mod x 10) r))))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 99, "code": "(comp\n   (fn [n] \n     (->> n\n          str\n          (map str)\n          (map #(Integer/parseInt %))))\n   *)", "user": "55568a7de4b0deb715856e1c"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       str\n       seq\n       (map #(- (int %) (int \\0)))))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 99, "code": "(fn [x y]\n   (loop [n (* x y)\n          r []]\n     (if (< n 10)\n       (vec (reverse (conj r n)))\n       (recur (int (/ n 10))\n         (conj r (mod n 10))))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 99, "code": ";(fn [x y] (map #(Integer/parseInt (str %)) (seq (str (* x y)))))\n\n(fn [x y]\n  (->> (* x y)\n       str\n       (map str)\n       (map #(Integer/parseInt %))))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 99, "code": "(fn [x y]\n  (->>\n    (* x y)\n    (str )\n    (seq)\n    (map (fn [c] (Integer/parseInt (str c))))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 99, "code": "(fn [x y]\n  (let [xy (* x y)]\n    (loop [ret '() xy xy]\n      (if (== (quot xy 10) 0)\n        (conj ret (rem xy 10))\n        (recur (conj ret (rem xy 10))\n               (quot xy 10))))))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 99, "code": "#(->> (str (* % %2)) (map (fn [x](- (int x) 48))))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 99, "code": "(fn [x y]\n      (map #(Integer/parseInt (str %))\n           (apply vector (str (* x y)))))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 99, "code": "(fn prod-dig [a b]\n  (let [prod (* a b)\n        len (count (str prod))]\n    (map #(rem % 10) (reverse (take len (iterate #(quot % 10) prod))))))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/digit % 10) (map char (reduce conj [] (str (* x y))))))", "user": "574e84e0e4b02ea114799243"}, {"problem": 99, "code": "(fn [a b]\n  ((fn digits [n]\n     (cond (< n 0) (recur (- n))\n           (< n 10) (conj [] n)\n           :else (conj (digits (quot n 10)) (rem n 10)))) (* a b)))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 99, "code": "(fn  [a b]\n  (loop [digits []\n         n (* a b)]\n    (if (pos? n)\n      (recur (cons (mod n 10) digits) (quot n 10))\n      digits)))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n      str\n      seq\n      (map #(str %)) \n      (map #(Integer. %)) \n       \n       ))", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 99, "code": "#(reverse ((fn digits [x] (when (not (zero? x)) (seq (cons (mod x 10) (digits (quot x 10)))))) (* %1 %2)))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 99, "code": "(fn [a b]\n    (map bigint (map str (seq (str (* a b))))))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt %) (re-seq #\".\" (str (* x y)))))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 99, "code": "(fn [a b]\n    (reverse (map #(mod % 10) (take-while (partial < 0) (iterate #(quot % 10) (* a b))))))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 99, "code": "(fn [w x]\n  (#(loop [y 1 z()]\n    (if (< % y)\n      z\n      (recur (* 10 y) (conj z (rem (quot % y) 10))))) (* w x)))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 99, "code": "(fn [& args]\n    (let [\n          [x y] args\n          prod   (* x y)\n          result (loop [cum []\n                        val prod]\n                   (let [digit    (mod val 10)\n                         next-val (quot val 10)\n                         next-cum (cons digit cum)]\n                     (if (zero? next-val)\n                       next-cum\n                       (recur next-cum next-val))))\n         ]\n      result\n    )\n  )", "user": "532f7e12e4b019098a6f8b4e"}, {"problem": 99, "code": "(fn my-function [p q]\n\t(letfn [(number->digits [n]\n\t\t\t\t\t(if (<= n 9)\n\t\t\t\t\t\t(conj [] n)\n\t\t\t\t\t\t(conj \n\t\t\t\t\t\t\t(number->digits (/ (- n (mod n 10)) 10))\n\t\t\t\t\t\t\t(mod n 10))))]\n\t\t(number->digits (* p q))))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 99, "code": "(fn [x y] (let [m (str (* x y))\n                  c (count (str m))]\n              (for [i (range 0 c)]\n                (- (int (get m i)) (int \\0))                \n                )))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 99, "code": "(fn [a b]\n ( map #(Character/digit % 10) (seq (str (* a b)))))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 99, "code": "(fn [a b]\n  (loop [mul (* a b) ans '()]\n    (if (= mul 0)\n      (lazy-seq ans)\n      (recur (quot mul 10) (conj ans (rem mul 10))))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 99, "code": "#(->> (seq (str (* % %2)))\n       (map str)\n       (map read-string))", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 99, "code": "(fn [a b]\n  (loop [mult (* a b) acc []]\n    (if (= 0 mult)\n      acc\n      (recur (/ (- mult (rem mult 10)) 10) (cons (mod mult 10) acc)))))", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 99, "code": "(fn [& args]\n  (map #(Integer. %)(re-seq #\"\\d\"(str (reduce * args)))))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 99, "code": "#(loop [out [] n (* %1 %2)] (if (zero? n) out (recur (cons (mod n 10) out) (quot n 10))))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 99, "code": "(fn\n  [x y]\n  (let [p (* x y)]\n       (if (= p 0)\n           (list 0)\n           (loop [n p\n                  l '()]\n                 (if (= n 0)\n                     l\n                     (recur (quot n 10) (conj l (mod n 10))))))))", "user": "57f8153de4b0d3187e900916"}, {"problem": 99, "code": "(fn [a,b] (map #(Character/digit % 10) (str (* a b))))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "573d8658e4b05c31a32c0814"}, {"problem": 99, "code": "(fn prodigits\n  [a b]\n  (loop [n (* a b)\n         lst []]\n    (if (zero? n) lst\n                  (recur (quot n 10) (cons (mod n 10) lst)))))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (seq (str (* a b)))))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 99, "code": "#(map (zipmap \"0123456789\" (range)) (str (* % %2)))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 99, "code": "(fn st [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "user": "56069006e4b08b23635d3174"}, {"problem": 99, "code": "(fn [x y]\n  (map (comp biginteger str identity) (str (* x y))))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y) v '()]\n    (if (zero? n)\n      (into [] v)\n      (recur (int (/ n 10)) (conj v (rem n 10))))))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 99, "code": "(fn [a b]\n  (let [prod (* a b)\n        len (count (str prod))]\n    (map #(rem % 10) (reverse (take len (iterate #(quot % 10) prod))))))", "user": "57f81524e4b0d3187e900913"}, {"problem": 99, "code": "(fn [a b] \n  (let [c (* a b)]\n    (letfn [(t-div [x]\n              (if (> 10 x) \n                (list x)\n                (cons (rem x 10) (t-div (quot x 10)))))]\n      (into [] (reverse (t-div c))))))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 99, "code": "(fn digits [& args]\n  (let [product (reduce * args)]\n    (reverse (map #(Character/getNumericValue (last (str %))) (take (count (str product)) (iterate #(quot % 10) product)))) \n    )\n  )", "user": "57f81045e4b0d3187e90090f"}, {"problem": 99, "code": "(fn [x y]\n  (let [num (* x y)]\n    (loop [num1 (quot num 10)\n           num2 (rem num 10)\n           lst ()]\n      (if (= 0 num1)\n        (cons num2 lst)\n        (recur (quot num1 10) (rem num1 10) (cons num2 lst))))))", "user": "57f81549e4b0d3187e900918"}, {"problem": 99, "code": "(fn \n  [x y]\n  (map #(Integer/parseInt (str %))  (str (* x y)))\n  )", "user": "57f81532e4b0d3187e900914"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 99, "code": "(fn\n  [x y]\n  (loop [n (* x y)\n         r []]\n       (cond \n             (< n 10) (apply vector (cons n r))\n             :else (recur (quot n 10) (cons (rem n 10) r)))))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 99, "code": "(fn prod\n  [x y]\n  (loop [splt 1\n        lst '()]\n    (if (= (quot (* x y) splt) 0)\n      lst\n      (recur (* splt 10) (cons (mod (quot (* x y) splt) 10) lst)))))", "user": "57f81534e4b0d3187e900915"}, {"problem": 99, "code": "(fn [x y] (map #(read-string %) (re-seq #\"\\d\" (str (* x y)))))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 99, "code": "(fn digits[a b]\n  (loop[n (* a b) lst '()]\n    (if (zero? n) lst (recur (/ (- n (rem n 10)) 10 ) (cons (rem n 10) lst )))))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 99, "code": "(fn \n  [x y] \n  (map #(- (int %) (int \\0)) (seq (str (* x y)))))", "user": "57f81569e4b0d3187e900919"}, {"problem": 99, "code": "(fn [a b]\n  (drop-while zero? \n    (reverse \n      (map #(mod (int(/ (* a b) %)) 10)\n           (take 10 (iterate #(* 10 %) 1))))))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 99, "code": "(fn product_digits\n  [a b]\n  (map #(Character/digit % 10) (seq (str (* a b)))))", "user": "57f81544e4b0d3187e900917"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 99, "code": "(fn [a b]\n         (let [p (* a b)]\n           ((fn [lst num]\n              (let [q (quot num 10)\n                    m (mod num 10)]\n                (if (= 0 q m)\n                  lst\n                  (recur (conj lst m) q)))) '() p)))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/digit % 10) (seq (str (* a b)))))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 99, "code": "(fn [n1 n2]\n  (let [prod (* n1 n2)\n        s (str prod)\n        num-seq (seq s)]\n    (map #(- (int %) 48) num-seq)))", "user": "5803cd8fe4b0a837a8b30c96"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 99, "code": "#(-> (apply * %&) \n    ((fn decimals [n]\n        (loop [n n acc []]\n            (if (< n 10)\n                (conj acc n)\n                (recur (int (/ n 10)) (conj acc (rem n 10)))))))\n    (reverse)\n)", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str\n      seq\n      (map (comp read-string str)))", "user": "57fe2d6fe4b0d3187e9009c8"}, {"problem": 99, "code": "(fn product-digits [i j]\n  (loop [n (* i j) seq ()]\n    (if (<= n 0)\n      seq\n      (recur (int (/ n 10)) (conj seq (mod n 10))))))", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 99, "code": "(fn[a b](vec (map #(Character/getNumericValue %) (str (* a b)))))", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 99, "code": "(fn [ x y]\n   (map #(-> % str read-string) (str (* x y)) )\n    )", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 99, "code": "(fn mult2d [x y]\n  (map\n    (fn d2i [c]\n      (case c\n        \\1 1\n        \\2 2\n        \\3 3\n        \\4 4\n        \\5 5\n        \\6 6\n        \\7 7\n        \\8 8\n        \\9 9\n        \\0 0\n      )\n    )\n    (str (* x y))\n  )\n)", "user": "562add6de4b00e49c7cb4834"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str(* a b))))", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 99, "code": "(fn [x y]\n  (loop [prod (* x y) result []]\n    (if (zero? prod)\n      result\n      (recur (quot prod 10) (cons (rem prod 10) result)))))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 99, "code": "#(map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} (str (* %1 %2)))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 99, "code": "(fn [a b]\n  (let [c (* a b)]\n    (if (= c 0)\n      [0]\n      (loop [d c\n             r '()]\n        (if (= d 0)\n          r\n          (recur (quot d 10)\n                 (conj r (rem d 10))))))))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 99, "code": "(comp (partial mapv (comp #(Integer/parseInt %) str)) vec str *)", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 99, "code": "(fn [& nums]\n  (map #(Integer/parseInt %) (filter (comp not empty?) (clojure.string/split (str (reduce * nums)) #\"\"))))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 99, "code": "#(map (fn [c] (Character/getNumericValue c)) (str (* %1 %2)))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 99, "code": "(fn [x y](map #(- (int %) 48) (vec (str (* x y)))))", "user": "57ee41eae4b0bfb2137f5bb0"}, {"problem": 99, "code": "#(for [x (clojure.string/split (clojure.string/join \",\" (str (* %1 %2))) #\",\")] (read-string x))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "57ee41a6e4b0bfb2137f5baf"}, {"problem": 99, "code": "#(for [x (clojure.string/split (clojure.string/join \" \" (str (* %1 %2))) #\" \") :let [y (read-string x)]] y)\n;#(for [x (clojure.string/split(str(* %1 %2)) #\"\") ] (read-string x))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 99, "code": "(fn [x y] (->> (* x y)\n               (str)\n               (map (comp bigint str))\n              (vec)))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 99, "code": "(fn [x y] \n  (mapv (fn [x]\n          (Long. (str x)))\n        (str (* x y))))", "user": "54a80855e4b09f271ff37c9e"}, {"problem": 99, "code": "(fn to-digit-seq\n  [a b]\n  (into [] (map #(- (int %) (int \\0)) (into [] (str (* a b))))))", "user": "58152157e4b0f478707a0631"}, {"problem": 99, "code": "(fn [a b]\n  (loop [x (* a b) r ()]\n    (if (zero? x)\n      r\n      (recur (int (/ x 10)) (conj r (mod x 10))))))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 99, "code": "(fn [n1 n2]\n  (loop [p (* n1 n2) accu ()]\n    (if (= p 0)\n      accu\n      (recur (quot p 10) (conj accu (mod p 10))))))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 99, "code": ";(fn [x y]\n;  (map #(Integer/parseInt (str %)) (str (* x y))))\n\n(fn [x y]\n  (let [fx (fn [n col]\n             (if (zero? n)\n               col\n               (recur (int (/ n 10)) (cons (mod n 10) col))))]\n    (fx (* x y) ())))", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 99, "code": "(fn f [x y]\n  (->> (* x y)\n       (str)\n       (map str)\n       (map bigint)))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 99, "code": "(fn [a b] (for [d (str (* a b))]\n                       (int (- (int d) (int \\0)))))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 99, "code": "(fn [a b]\n   (->> (* a b)\n        str\n        (map str)\n        (map #(Integer/parseInt %))))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 99, "code": "(fn [d1 d2] (map #(Character/digit % 10) (str (* d1 d2))))", "user": "58186016e4b0c0e9c07b83ad"}, {"problem": 99, "code": "(fn [n m] (loop [k (* n m) res []]\n                             (if (zero? k)\n                               res\n                               (recur (quot k 10) (cons (mod k 10) res)))))", "user": "57f3b841e4b0511f1d294e0f"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "5405885ee4b0addc1aec6668"}, {"problem": 99, "code": "#(let [p (* %1 %2)] \n   (for [d (reverse (range (count (str p))))\n         :let [dig (reduce * (repeat d 10))]]\n     (quot (mod p (* dig 10)) dig)))", "user": "58247423e4b051871117bec5"}, {"problem": 99, "code": "(fn\n  [x y]\n  (letfn\n    [(rec\n      [x acc]\n      (if (< x 10)\n        (conj acc x)\n        (recur (quot x 10) (conj acc (mod x 10)))))]\n    (rec (* x y) ())))", "user": "578df8fee4b0ebec4cfb7574"}, {"problem": 99, "code": ";;(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))\n#(->> (* %1 %2) str (map (comp (partial + -48) int)))", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 99, "code": "#((fn s [coll x] (if (= 0 x) (vec coll) (s (cons (rem x 10) coll) (quot x 10)))) [] (* %1 %2))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 99, "code": "(fn [a b]\n  (loop [zz (str (* a b))\n         res []]\n    (if (= \"\" zz)\n      res\n      (recur (subs zz 1) (conj res (Integer. (subs zz 0 1))))\n    )\n  )\n)", "user": "58224c53e4b04b46fc4b0f92"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %))(str (* a b))))", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 99, "code": "#(vec (map (comp read-string str)(str (* %1 %2))))", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 99, "code": "(fn [x y]\n  (read-string \n   (reduce str\n           (concat \"[\" \n                   (reduce str \n                           (concat \n                            (reduce str (map #(reduce str %) (map list (str (* x y)) [\" \" \" \" \" \" \" \" \" \" \" \"]))) \n                            \"]\")\n                           )\n                   )\n           )\n   ))", "user": "56193c6ee4b053970a773af2"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "57ef793de4b0bfb2137f5bd8"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt %) (remove clojure.string/blank? (clojure.string/split (str (* a b)) #\"\"))))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 99, "code": "(fn [x y]\n   (->> (* x y)\n        (str)\n        (.getBytes)\n        (map #(- % 48))))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 99, "code": "(fn [in-1 in-2] (map #(- (int %) (int \\0)) (seq (str (* in-1 in-2)))))", "user": "5710140fe4b09c608db7042e"}, {"problem": 99, "code": "(fn [a b]\n  (letfn [(digitize2\n    [n]\n    (letfn [(helper \n              [acc n]\n              (if (= n 0) \n                acc\n                (helper (cons (rem n 10) acc) (quot n 10))))]\n      (helper [] n)))]\n  (digitize2 (* a b))))", "user": "5813e208e4b0f478707a061b"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) str (map #(- (int %1) (int \\0)))))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 99, "code": "(fn bar [x y]\n       (->> (* x y)\n       (str)\n       (partition 1)\n       (map first)\n       (map int)\n       (map #(- % (int \\0)))))", "user": "58303fc3e4b051871117c006"}, {"problem": 99, "code": "(fn ddd [a b]\n  (reverse \n  (loop [result []\n         product (* a b)\n         ]\n    (if (= product 0) result\n      (recur (conj result (mod product 10)) (int (/ product 10)) )))))", "user": "5829d588e4b051871117bf4a"}, {"problem": 99, "code": "(fn[x y](->> (* x y)\n\n          (iterate #(quot % 10))\n\n          (take-while pos?)\n\n          (map #(mod % 10))\n\n          reverse\n\n          vec))", "user": "57b8f784e4b0fbc9809a27ea"}, {"problem": 99, "code": "(fn my-dec-seq\n  [x y]\n  (loop [acc [] value (* x y)]\n    (if (= 0 value)\n      (reverse acc)\n      (recur (conj acc (mod value 10)) (quot value 10)))))", "user": "583166c1e4b051871117c025"}, {"problem": 99, "code": "(fn mm [a b] (reverse (\n(fn ff [n] (\nif (< n 10)\n [n] \n (cons (mod n 10) (ff (quot n 10)))\n)) (* a b) \n)))", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 99, "code": "(fn [& nums] (->> (apply * nums) str seq (map #(Character/digit % 10))))", "user": "582e0afde4b051871117bfd5"}, {"problem": 99, "code": "#(map read-string (map str (seq (str (* %1 %2)))))", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 99, "code": "#((fn [coll n]\n     (if (zero? n)\n        (reverse coll)\n       (recur (conj coll (rem n 10)) (int (/ n 10))))) [] (* % %2))", "user": "582290b5e4b04b46fc4b0fa0"}, {"problem": 99, "code": "#(into [] ( (fn [n acc] (or (and (= n 0) acc) (recur (quot n 10) (conj acc (rem n 10))))  ) (* %1 %2) '()))", "user": "563a79e5e4b0bfe05bf117fe"}, {"problem": 99, "code": "(fn [x y] (map #(-> % str read-string) (str (* x y))))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 99, "code": "(fn pd [x y]\n  (let [product  (* x y)]\n    (map #(- (int %) 48) (str product))))", "user": "5779556de4b0979f8965166e"}, {"problem": 99, "code": "(fn test29 [x y]\n  (let [a (* x y)]\n    (->> a str seq (map (comp #(Integer/parseInt %1) str))) ))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 99, "code": "(fn adddig\n  [a b]\n  (loop [i (* a b) r []]\n    (if (< i 10) (into (vector i) r) (recur (int (/ i 10)) (into (vector (mod i 10)) r)))))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 99, "code": "(fn [x y] (map read-string (map str (str  (* x y)))))", "user": "58334d18e4b089d5ab817c97"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))\n       (str (* a b))))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 99, "code": "#(->>\n  (* %1 %2)\n  str\n  seq\n  (map str)\n  (map read-string))", "user": "58384bc4e4b089d5ab817d27"}, {"problem": 99, "code": "(fn mul-digit [a b]\n  (map (comp read-string str) (seq (str (* a b)))))", "user": "5843b95de4b089d5ab817e3f"}, {"problem": 99, "code": "(fn [x y] (vec (map #(Integer/parseInt (str %)) (str (* x y)))))", "user": "563e1c0ee4b0da801c4e4665"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 99, "code": "#(map (fn [c] (- (int c) 48)) (str (* % %2)))", "user": "58391c94e4b089d5ab817d35"}, {"problem": 99, "code": "(fn\n  [x y]\n  (map read-string (re-seq #\"\\d\" (str (* x y)))))", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 99, "code": "#(reverse (loop [input (* %1 %2) res []]\n\t(if (= input 0) \n\t\tres\n\t\t(recur (quot input 10) (conj res (rem input 10)) )\n\t\t)\n\t))", "user": "57465429e4b009280f9f2b60"}, {"problem": 99, "code": "(fn [x y] \n  (map #(- (int %) 0x30) \n       (str (* x y))))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 99, "code": "(fn product-digits [x y]\n  (map #(- (int %) 48) (str (* x y))))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 99, "code": "(fn [a b] \n(->> (* a b)\n      (.toString)\n      (map #(Character/getNumericValue %) )\n      (into [])      \n      )\n  )", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 99, "code": "(fn [a b] ((fn digitos \n                ( [x acc]\n                  (if (< x 10) \n                      (conj acc x) \n                      (digitos (quot x 10) (conj acc (rem x 10)))))\n                  ( [x] (digitos x '()))) (* a b)))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 99, "code": "(fn product-digit [x y]\n  (map #(Integer/valueOf %) (map str (str (* x y)))))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 99, "code": "(fn [m n]\n    (loop [n (* m n)\n           s '()]\n      (if (not= 0 n)\n        (recur (quot n 10) (conj s (mod n 10)))\n        (into [] s))))", "user": "56f4cedce4b046a417f92063"}, {"problem": 99, "code": "(fn [arg1 arg2] (map #(Integer/parseInt (str %)) (str (* arg1 arg2))))", "user": "5804b491e4b0a837a8b30cac"}, {"problem": 99, "code": "(fn [x y] (into [] (map #(Integer/parseInt %) (map str (str (* x y))))))", "user": "546be022e4b00cfc9eacc171"}, {"problem": 99, "code": "#(map (comp read-string str) (seq (str (* %1 %2))))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 99, "code": "(fn [a b](map #(- (int %) (int \\0)) (str (* a b))))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 99, "code": "(fn\n  [x y]\n  (map read-string (map str (seq (str (* x y))))))", "user": "55a5e2f7e4b0acc240e31550"}, {"problem": 99, "code": "(fn product-digits [x1 x2]\n  (let [digits (fn digits [x]\n          (if (zero? (int (/ x 10)))\n            (cons x nil)\n            (cons (mod x 10) (digits (int (/ x 10))))))]\n    (reverse (digits (* x1 x2)))))", "user": "53bd476ae4b0d9a98559a6ca"}, {"problem": 99, "code": ";;(fn [n1 n2] \n;;  (loop [n (* n1 n2) v '()]\n;;\t(let [qt (quot n 10) rm (mod n 10) vn (conj v rm)]\n;;\t\t(if (zero? qt) vn (recur qt vn)))))\n\n#(map % (str (* %2 %3))) #(Integer. (str %))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 99, "code": "(fn [x y]\n   (->> (* x y)\n       str\n       seq\n       (map (comp read-string str) )\n       ))", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 99, "code": "#(map (fn [c] (Character/digit c 10)) (str (* %1 %2)))", "user": "582d7569e4b051871117bfbe"}, {"problem": 99, "code": "#(map (fn [c] (- (int c) (int \\0))) (seq (str (* %1 %2))))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 99, "code": "(fn [x y]\n  (let [res (seq (str (* x y)))]\n    (map (comp #(Integer. %) str) res)))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "user": "583e1558e4b089d5ab817da9"}, {"problem": 99, "code": "(fn [a b]\n\t(map #(Character/digit % 10) (seq (str (* a b))))\n)", "user": "5766fbb7e4b0a07e8fc180b6"}, {"problem": 99, "code": "(fn [x y]\n  (let [res (str (* x y))]\n     (map #(Integer/parseInt (str %)) res)))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 99, "code": "#(map (fn [a] (Integer. (str  a))) (str (* %1 %2)))", "user": "585d40afe4b0f14aab7c8798"}, {"problem": 99, "code": "#(map (fn [x]\n         (- (int x) (int \\0)))\n      (seq (str (* %1 %2))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 99, "code": "(fn [x y]\n  (let [prod (* x y)\n        str-prod (str prod)]\n    (map #(Character/getNumericValue %) str-prod)))", "user": "4ea8570f535d7eef308072f8"}, {"problem": 99, "code": "(fn [a b] (map #(-> (int %) (- 48)) (seq (str (* a b)))))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 99, "code": "(fn [n m]\n  (loop [i (* n m)\n         digits '()]\n    (if (= 0 i)\n      digits\n      (recur (quot i 10) (conj digits (rem i 10)))\n      )\n    )\n  )", "user": "58562083e4b0f14aab7c86eb"}, {"problem": 99, "code": "(fn [x y]\n  (map (fn [character]\n         (- (int character) (int \\0)))\n       (seq (str (* x y)))))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue %)\n       (str (* a b))))", "user": "51456858e4b0e88796073408"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5853582fe4b0b7285a6f4ec5"}, {"problem": 99, "code": "#(->> (* %1 %2) str (mapv (comp read-string str)))", "user": "56f9b953e4b07572ad1a88b9"}, {"problem": 99, "code": "(fn [a b]\n(mapv #(Character/digit % 10) (str (* a b))))", "user": "50b25edae4b03ea88043355e"}, {"problem": 99, "code": "(fn [x y](reduce #(conj %1 (Integer. (str %2))) [] (seq (str (* x y)))))", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* %1 %2)))", "user": "56acfee5e4b03c432f18734f"}, {"problem": 99, "code": "(fn [a b]\n  (reverse\n (loop [acc [] i (* a b)]\n     \n    (if (zero? i)\n      acc\n      (recur (conj acc (int (rem i 10))) (int (/ i 10)))))))", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 99, "code": "(fn [a b]\n  (loop [r (* a b)\n         result ()]\n    (if (zero? r)\n      result\n      (recur (int (/ r 10)) (conj result (mod r 10)))\n      )))", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 99, "code": "(fn [x y] (map (zipmap \"0123456789\" (range 10)) (str (* x y))))", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "515ef58be4b02c55805ea237"}, {"problem": 99, "code": "#(map (fn [n] (- (int n) 48)) (seq (str (* %1 %2))))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 99, "code": "(fn product-digits\n  [x y]\n  (->> (str (* x y))\n       (map #(Integer/parseInt (str %)))))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 99, "code": "(fn [& others] (map #(Integer. (str %)) (str (apply * others))))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 99, "code": "#(map read-string (re-seq #\"\\d\" (str (* %1 %2))))", "user": "55597b84e4b0deb715856e36"}, {"problem": 99, "code": "#(map read-string (map str(str (* % %2))))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) str seq (map int) (map #(- % 48))))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 99, "code": "(comp (partial map (comp read-string str)) str *)", "user": "586b6f13e4b01531a375e959"}, {"problem": 99, "code": "(fn product-digits [& numbers]\n  (loop [product (apply * numbers)\n         result '()]\n    (let [remaining-digits (quot product 10)\n          current-digit (rem product 10)\n          new-result (conj result current-digit)]\n      (if-not (zero? remaining-digits)\n              (recur remaining-digits new-result)\n              new-result))))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 99, "code": "(fn [x y]\n  (vec (map #(- (int %) 48) (seq (str (* x y))))))", "user": "54012b48e4b0de5c41848620"}, {"problem": 99, "code": "(fn [a b] ((fn f [p d] \n             (conj (if (< p d) \n                       [] \n                       (f (quot p d) 10)\n                   ) \n                   (mod p d)\n             )\n            )\n            (* a b) 10\n           )\n  )", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "5879d577e4b01531a375ead8"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y)\n         accum []]\n    (if (> n 0) \n      (recur (int (/ n 10)) (cons (mod n 10) accum))\n      accum)))", "user": "58740c18e4b01531a375ea49"}, {"problem": 99, "code": "(fn [x y] (vec (map #(read-string (str %)) (str (* x y)))))", "user": "585481e0e4b07779d46863fe"}, {"problem": 99, "code": "(fn [a b]\n  (loop [x (str (* a b)) y []]\n    (if (empty? x)\n      y\n      (recur (rest x) (conj y (Integer. (str (first x))))))))", "user": "582c526ae4b051871117bf88"}, {"problem": 99, "code": "(fn [a b]\n  (->>\n   (* a b)\n   (iterate #(quot % 10))\n   (take-while pos?)\n   (map #(rem % 10))\n   reverse))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 99, "code": "(fn [x y]\n   (loop [r []\n          z (* x y)]\n     (if (zero? (quot z 10))\n       (cons z r)\n       (do\n         (recur (cons (rem z 10) r) (quot z 10))))))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 99, "code": "#(reverse\n   ((fn digits [num]\n      (if (< num 10)\n        [num]\n        (cons (mod num 10)\n              (digits (/ (- num (mod num 10)) 10)))))\n    (* %1 %2)))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "user": "58852909e4b0f1effa3b76af"}, {"problem": 99, "code": "(fn [num1 num2]\n  (map #(read-string (str %)) (str (* num1 num2))))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* %1 %2)))", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 99, "code": "(fn [a b] (into [] (map #(Integer/parseInt (str %)) (str (* a b)))))", "user": "58840023e4b0f1effa3b768b"}, {"problem": 99, "code": "(fn multiply-digits [num1 num2]\n   (let [product (* num1 num2)]\n     (map #(read-string (str %)) (str product))))", "user": "569f7bc2e4b0542e1f8d1494"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (into [] (str (* x y)))))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 99, "code": "(fn [& xs]\n   (map #(Integer. %) (re-seq #\"\\d\" (str (apply * xs)))))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 99, "code": "(let [toDigits (fn [x] (map #(Character/digit % 10)  (seq (char-array (str x)))))]\n (comp toDigits *))", "user": "5650082fe4b0284900eef6b7"}, {"problem": 99, "code": "(fn [x y]\n  (let [prod (* x y)]\n    (map #(Character/digit % 10)\n        (vec \n          (seq \n           (str prod))))))", "user": "587f8393e4b0f1effa3b75f2"}, {"problem": 99, "code": "(fn [x y] (->> (* x y)\n                (str)\n                (seq)\n                (map str)\n                (map read-string)))", "user": "5840c068e4b089d5ab817df8"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "587ee260e4b052da650a6353"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n         str\n         (map #(- (int %) 0x30))))", "user": "58949f8de4b00487982d525e"}, {"problem": 99, "code": "#(loop [n (* %1 %2) acc []] \n   (if (zero? n) \n     acc \n     (recur (quot n 10) (cons (mod n 10) acc))))", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 99, "code": "(fn [x y] (letfn [(con [num] (if (zero? num) [] (into (con (quot num 10)) (vector (rem num 10)))))] (con (* x y))))", "user": "588f500ae4b00487982d51a4"}, {"problem": 99, "code": "(fn [a b]\n  (letfn [(digits [n]\n            (if (pos? n)\n              (conj (digits (quot n 10)) (mod n 10) )\n              [])           \n          \n           )]\n    (digits (* a b))))", "user": "57de9169e4b0bd073c202454"}, {"problem": 99, "code": "(fn product-int->seq-digits\n    [a b]\n    (let [product (str (* a b))]\n        (map\n            #(Integer/parseInt (str %))\n            product)))", "user": "587bead1e4b01531a375eb0d"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48) (seq (str (* x y))))\n  \n  )", "user": "5885e90de4b0f1effa3b76c5"}, {"problem": 99, "code": "(fn [x y] \n  (map #(Character/getNumericValue %) \n       (str (* x y))))", "user": "576e607ae4b0979f89651579"}, {"problem": 99, "code": "(letfn [(digits [n]\n          (let [q (quot n 10)\n                r (rem n 10)]\n            (if (zero? q) [r] (conj (digits q) r))))]\n  (fn [a b]\n    (digits (* a b))))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 99, "code": "(fn [x y]\n   (loop [ds '() z (* x y)]\n    (let [q (quot z 10) r (rem z 10) c (conj  ds r)]\n      (if  (zero? q)\n        (vec c)\n        (recur c q)))))", "user": "53b42472e4b047364c0444b2"}, {"problem": 99, "code": "(fn [x y]\n  (loop [result [] ans (* x y)]\n    (if (< ans 1)\n      result\n      (recur (cons (rem ans 10) result) (int (/ ans 10))))))", "user": "5896735fe4b00487982d529d"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       (str)\n       (map #(Character/digit % 10))\n       (vec)))", "user": "5895477fe4b00487982d527c"}, {"problem": 99, "code": "(fn [a b]\n    (let [x (* a b)\n          dos (fn dos [x]\n                (let [x x]\n                  (when-not (= x 0)\n                    (lazy-seq\n                     (cons\n                      (mod x 10)\n                      (dos (quot x 10)))))))]\n      (reverse (dos x))))", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 99, "code": "(fn [v1 v2]\n  (map #(Character/digit % 10)\n       (str (* v1 v2))))", "user": "583e02fce4b089d5ab817da5"}, {"problem": 99, "code": "#(loop [x (* %1 %2), r ()]\n   (if (< x 10)\n     (cons x r)\n     (recur (quot x 10) (cons (mod x 10) r))))", "user": "58923efce4b00487982d521c"}, {"problem": 99, "code": "(fn[x y](->> (* x y)\n          (iterate #(quot % 10))\n          (take-while pos?)\n          (map #(mod % 10))\n          reverse\n          vec))", "user": "53ada652e4b047364c04446d"}, {"problem": 99, "code": "(fn [a b]\n  (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "565487dce4b0f9d632dd8482"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y) digits []]\n    (if (zero? n)\n      digits\n      (recur (quot n 10) (cons (rem n 10) digits)))))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 99, "code": "(fn [a b] (apply vector (map (fn [char] (Integer. (str char))) (seq (str (* a b))))))", "user": "58950f29e4b00487982d5270"}, {"problem": 99, "code": "(fn product-digit-vector\n  ([x y] (product-digit-vector [] (* x y) x y))\n  ([out product x y] (if (> 1 (quot product 10))\n                       (reverse (conj out product))\n                       (product-digit-vector (conj out (rem product 10)) (int (quot product 10)) x y))))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 99, "code": "(fn [x y]\n  (map\n   #(Character/digit % 10)\n   (seq (str (* x y)))))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       (str)\n       (map #(Character/digit % 10))))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "56629a7de4b0e91d5f5c5649"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "user": "58a6d14fe4b01a0c0b232935"}, {"problem": 99, "code": "(fn [x y]\n  (letfn [(s [num]\n  \t\t\t(if (< num 10)\n    \t\t  [num]\n              (conj (s (quot num 10)) (rem num 10))))]\n    (s (* x y))))", "user": "5458c74de4b01be26fd74623"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "53b05a75e4b047364c044482"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "user": "5156e767e4b04360f2428e6b"}, {"problem": 99, "code": "(fn [x y]\n  (let [prod (* x y)]\n    (loop [n prod\n           acc '()]\n      (cond (= n 0) acc\n            :else (recur (quot n 10)\n                         (cons (mod n 10) acc))))))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 99, "code": "(fn [ a b ]\n  (let [ s (str (* a b)) ]\n    (vec(map  #( - (int %) 48) s))\n    )\n  )", "user": "55a65872e4b09e57187da299"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) (str) (map #(- (int %) 48))))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 99, "code": "(fn prod-digit [a b] (let [res (str(* a b))]\n                         (for [i (range (count res))] \n                           (read-string(str(nth res i))))))", "user": "58b2f085e4b0ebc645576d15"}, {"problem": 99, "code": "(fn [x y ] ( loop [f (* x y) out '[]] \n\t\t\t(if (= f 0) \n\t\t\t(reverse out)\n\t\t\t(recur (quot f 10) (conj out (rem f 10))))))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 99, "code": "(comp (fn [s] (map #((comp read-string str) %) s)) seq str *)", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 99, "code": "#(map (comp read-string str)\n      (str (* %1 %2)))", "user": "58a953dae4b01a0c0b232968"}, {"problem": 99, "code": "(fn [a b]\n  (let [\n        c (* a b)\n        chrToDigit #(- (int %) (int \\0))]\n    (->> c str seq (map chrToDigit))))", "user": "588e4e05e4b00487982d5188"}, {"problem": 99, "code": "(fn [& nums] (map #(Integer/parseInt %) (map #(str %) (vec (str (reduce * nums))))))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 99, "code": "(fn [a b]\n    (apply (fn [n digits]\n           (if (< n 10)\n             (conj digits n)\n             (recur (int (/ n 10)) (conj digits (mod n 10)))))\n         [(* a b) '()]))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 99, "code": "(fn [a b]\n  (map\n   #(- (int %) 48)\n   (str (* a b))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 99, "code": "(fn [x y]\n    (loop [n (* x y) zs []]\n      (if (zero? n)\n        zs\n        (recur (quot n 10) (cons (mod n 10) zs))\n        )))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 99, "code": "(fn [& args] (map #(- (int %) (int \\0)) (seq (str (apply * args)))))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 99, "code": "(fn [x y]\n  (loop [p (* x y)\n         res '()]\n    (if (< p 10)\n      (conj res p)\n      (recur (quot p 10) (cons (rem p 10) res)))))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (vec (str (* x y)))))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 99, "code": "(fn [x y]\n     (vec (map #(Integer/parseInt (str %)) (flatten (partition-all 1 (str (* x y))))))\n     )", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 99, "code": "(fn [a b] \n  (vec \n   (map \n    #(- (int %) (int \\0)) \n    (for [x (str (* a b))] x))))", "user": "5854580ce4b07779d46863f9"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* %1 %2)))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 99, "code": "(fn [a b] (map #(Integer. %) (re-seq #\"\\d\" (str (* a b)))))", "user": "58765038e4b01531a375ea7e"}, {"problem": 99, "code": "(fn [n1 n2] (reverse\n               (loop [remainder (* n1 n2) digits []] (let [\n                                                   floor10 (int (Math/floor (/ remainder 10)))\n                                                   digit (- remainder (* 10 floor10))\n                                                   ]\n                                               (if (> remainder 0)\n                                                 (recur floor10\n                                                        (conj digits digit)) digits)))))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 99, "code": "(fn [x c] (map read-string (map str (into [] (seq (str  (* x c)))))))", "user": "58a0fd0be4b02bd94d917ea4"}, {"problem": 99, "code": "#(let [str->vec (fn [s] (clojure.string/split s #\"\"))]\n     (->> (* %1 %2)\n          str\n          str->vec\n          (filter (complement empty?))\n          (map (fn [c] (Integer/parseInt c)))))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 99, "code": "(fn fx [n1 n2] \n  (let [prod (* n1 n2)]\n    (letfn [(fd [n]\n               (if (zero? n)\n                 [0]\n                 (loop [x n result []]\n                   (if (zero? x)\n                     (reverse result)\n                     (recur (quot x 10) (conj result (mod x 10)))))))]\n      (fd prod))))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 99, "code": "#(->> (* % %2)\n      str\n      seq\n      (map str)\n      (map read-string))", "user": "5893c64ce4b00487982d524b"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/digit % 10) (str (* x y)))\n  )", "user": "589037b4e4b00487982d51d0"}, {"problem": 99, "code": "(fn product-digits [a b]\n  (let [multiplied (* a b)]\n    multiplied\n    (loop [digits []\n           current-val multiplied]\n      (if (zero? current-val)\n        (reverse digits)\n        (recur (conj digits (mod current-val 10))\n               (quot current-val 10))))))", "user": "57ea4569e4b0bfb2137f5b46"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "589c0475e4b00487982d5351"}, {"problem": 99, "code": "(fn [a b]\n   (vec (map #(Integer/parseInt %) (rest (clojure.string/split (str (* a b)) #\"\")))))", "user": "57ecc16fe4b0bfb2137f5b83"}, {"problem": 99, "code": "(fn [x y]\n  (map #(read-string (str %)) (seq (str (* x y)))))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 99, "code": "(fn [v1 v2]\n  (map #(Integer/parseInt (str %)) (seq (str (* v1 v2)))))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 99, "code": "(fn [n1 n2]\n  (->> (* n1 n2)\n       (str)\n       (map #(Character/digit % 10))))", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 99, "code": "(fn [x y]\n  (let [r (* x y)]\n    (map #(Integer/parseInt %) (re-seq #\"\\d\" (str r)))))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 99, "code": "#(->> (* %1 %2) str (re-seq #\".\") (map read-string))", "user": "588d224ae4b00487982d516c"}, {"problem": 99, "code": "#(->> %&\n      (apply *)\n      str\n      seq\n      (map str)\n      (map read-string))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 99, "code": "#(mapv (fn [x] (Character/getNumericValue x)) (str (* %1 %2)))", "user": "53889587e4b0640c7a9a589e"}, {"problem": 99, "code": "(fn [x y] (vec (map read-string (map str (map identity (str (* x y)))))))", "user": "58969076e4b00487982d52a2"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 99, "code": "(fn [n m]\n  (letfn [(digits [i]\n                  (if (= 0 (quot i 10))\n                         (list (rem i 10))\n                         (cons (rem i 10) (digits (quot i 10)))))]\n    (reverse (digits (* n m)))))", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 99, "code": "(fn [x y] (->> (* x y)\n                   str\n                   (map #(- (int %) (int \\0)))))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) (int \\0)) (map first (partition-by identity (str (* a b))))))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 99, "code": "(fn [x y]\n  (let [product (* x y)]\n    (loop [product product\n           r []]\n      (if (> product 0)\n        (recur (int (/ product 10)) (conj r (mod product 10)))\n        (reverse r)\n        )\n      )))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 99, "code": "(fn [n1 n2] \n   (reduce \n     #(conj % (- (int %2) 48)) \n     [] \n     (str \n       (* n1 n2))))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 99, "code": "(fn [a b]\n  (map str (str (str (* a b))))\n   (vec (for [i (range 0 (count (map str (str (* a b)))))]\n    (Integer. (nth (map str (str (str (* a b)))) i)))))\n\n;(fn [a b]\n;  (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 99, "code": "(fn my [p1 p2] (map #(Integer/parseInt (str %)) (str (* p1 p2))))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 99, "code": "(fn product_digits [x y]\n  (map\n    #(- (int %) 48)\n    (seq (str (* x y)))))", "user": "55b4fa46e4b01b9910ae2983"}, {"problem": 99, "code": "(fn [n m]\n  (->> (* n m)\n       (iterate #(quot % 10))\n       (take-while (comp not zero?))\n       (map #(mod % 10))\n       (reverse)))", "user": "58e37946e4b005f69f193cae"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n    (str)\n    (re-seq #\"\\d\")\n    (map #(Integer. %))\n  )\n)", "user": "587a3babe4b01531a375eae2"}, {"problem": 99, "code": "#(map (comp read-string str)\n      (str (* %1 %2)))", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 99, "code": "#(mapv (fn [n] (Integer/parseInt (str n))) (str (* %1 %2)))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (vec (str (* a b)))))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 99, "code": "(fn mult [x y]\n  (map #(Character/getNumericValue %)(str (* x y))))", "user": "58e63de2e4b056aecfd47cad"}, {"problem": 99, "code": "(fn [a b] (map #(Integer. %) (re-seq #\"[0-9]\" (str (* a b)))))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 99, "code": "(fn product-digits [m n]\n  (map (comp read-string str) (str (* m n))))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 99, "code": "(fn [a b] (map (fn [x] (- (int x) (int \\0))) (str (* a b))))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))\n\n#_(fn [x y]\n  (let [product (* x y)]\n    (loop [remainder product\n           digits (list)]\n      (if (< remainder 10)\n        (conj digits remainder)\n        (recur (int (/ remainder 10))\n               (conj digits (mod remainder 10)))))))", "user": "58b2c435e4b0ebc645576d11"}, {"problem": 99, "code": "(fn mdig [a b]\n    (loop [m (* a b) digits '()]\n      (if (< m 10)\n        (cons m digits)\n        (recur (quot m 10) (cons (rem m 10) digits))\n        )\n      )\n    )", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 99, "code": "#(->> \n  (* %1 %2)\n  (str)\n  (seq)\n  (map (comp read-string str))\n  (vec))", "user": "5895385fe4b00487982d5279"}, {"problem": 99, "code": "(comp (fn dig [q]\n               (if (zero? q)\n                 []\n                 (conj (dig (quot q 10)) (rem q 10)))) *)", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 99, "code": "(fn digits [x y] \n  (map #(Character/digit % 10) (str (* x y)))\n  )", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 99, "code": "(fn [a b]\n    (map #(Character/digit % 10) (str (* a b))))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 99, "code": "(fn [n1 n2]\n  (reverse (loop [acc []\n         \t\t  n (* n1 n2)]\n    \t\t\t(if (= n 0)\n      \t\t\t\tacc\n      \t\t\t\t(recur (conj acc (rem n 10)) (quot n 10))))))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 99, "code": "(fn [a b]\n  (map (fn[x] (Integer/parseInt (str x))) (seq (str (* a b)))))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (seq (str (* x y)))))", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0))(seq (str (* x y)))))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 99, "code": "(fn [a b] ((fn break-digit ([n] (reverse (break-digit [] n))) ([v n] (if (<= n 0) v (break-digit (conj v (rem n 10)) (quot n 10))))) (* a b)))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 99, "code": "(fn [a b]\n  (map read-string (map str (seq (str (* a b))))))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 99, "code": "(fn prod-digits [x y]\n  (->> x\n      (* y)\n      (str)\n      (map #(Character/digit % 10))\n      (into [])))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "user": "579c7db7e4b05b1deef9ae0a"}, {"problem": 99, "code": "(fn [%1 %2](mapv #(Integer/parseInt (str %)) (str (* %1 %2))))", "user": "58dd21a9e4b0a4d5acaab6b3"}, {"problem": 99, "code": "(fn [x y] (drop-while zero? (reverse (take 10 (map #(rem (quot (* x y) %) 10) (iterate (partial * 10) 1))))))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 99, "code": "(fn [n1 n2] (map #(Integer. %) (map str (seq (str (* n1 n2))))))", "user": "57ffd1a9e4b0a837a8b30c2a"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       str\n       (map (comp read-string str))\n       vec))", "user": "5865c8f0e4b0f14aab7c884e"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* %1 %2)))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str\n      seq\n      (map (comp read-string str)))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 99, "code": "(fn [n1 n2]\n  (map #(- (int %) 48) (seq (str (* n1 n2)))))", "user": "563cdfdfe4b0bfe05bf11840"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 99, "code": "; Seems more real to do this without serialising \n#(loop [n (* %1 %2) \n       result []]\n   (if (< n 10) \n     (cons n result)\n     (recur (quot n 10) (cons (rem n 10) result))))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) str (map #(Integer/parseInt (str %)))))", "user": "58dc81d1e4b0a4d5acaab69e"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) (str) (map int) (map #(- % 48))))", "user": "5901158de4b0438e51c2d039"}, {"problem": 99, "code": "(fn [n1 n2] (map #(Character/getNumericValue %) (apply list (str (* n1 n2)))))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 99, "code": "(fn [x y]\n  (map #(read-string (str %)) (seq (str (* x y)))))", "user": "564c8e99e4b0284900eef674"}, {"problem": 99, "code": "(fn [a b]\n  (let [prod (* a b)]\n    (loop [p prod, res []]\n      (if (= p 0)\n        res\n        (recur (quot p 10) (cons (mod p 10) res))\n        )\n      )))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 99, "code": "(fn [a b]\n          (letfn [(step [i]\n                    (if (pos? i)\n                      (cons (rem i 10) (step (quot i 10)))))]\n            (reverse (step (* a b)))))", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 99, "code": "#(->> (* % %2) str\n      (map (fn [x] (- (int x) 48))))", "user": "5398305fe4b0b51d73faaef6"}, {"problem": 99, "code": "(comp (partial map #(Integer/parseInt (str %))) seq str *)", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 99, "code": "(fn [x y] (->> x (* y) str (map #(- (int %) (int \\0)))))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "585a9a16e4b0f14aab7c8752"}, {"problem": 99, "code": "(fn [n1 n2] (map (fn [x] (read-string (str x))) (seq (str (* n1 n2)))))", "user": "5880d686e4b0f1effa3b7623"}, {"problem": 99, "code": "(fn [x y]  \n  (map #(Integer/parseInt (str %)) (str (* y x))))", "user": "591cbc30e4b09b4ee5954c08"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 99, "code": "(fn [a b]\n  (->>\n   (* a b)\n   str\n   (map #(- (int %) (int \\0)))))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "user": "58fdbf59e4b0438e51c2cfbc"}, {"problem": 99, "code": "(fn [number1 number2] \n  (loop [ data (str (* number1 number2)) , result '[], ]\n    (if (empty? data)\n    result\n    (recur (rest data) (conj result (Integer. (str(first data)))) )\n    )\n  )\n  )", "user": "59228b00e4b026ae38521281"}, {"problem": 99, "code": "(fn [x1 x2]\n    (let [a (* x1 x2)]\n      (map #(Character/digit % 10) (seq (str a)))))", "user": "591f5124e4b09b4ee5954c45"}, {"problem": 99, "code": "(fn [x y]\n  (letfn [(to-digits [result n]\n                     (if (= n 0)\n                       result\n                       (recur (cons (rem n 10) result) \n                              (quot n 10))))]\n    (to-digits '() (* x y))))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 99, "code": "(fn [a b]\n  (let [prod (* a b)]\n    (loop [accum []\n           i prod]\n      (if (zero? i)\n        accum\n        (recur (cons (mod i 10)\n                     accum)\n               (int (/ i 10)))))))", "user": "58ef93ece4b056aecfd47dca"}, {"problem": 99, "code": "(fn d [a b]\n    (->> (* a b)\n         str\n         seq\n         (map #(- (int %) 48))\n         )\n    )", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 99, "code": "(fn [x y] (loop [p (* x y) r '()] (if (= p 0) r (recur (quot p 10) (cons (mod p 10) r)))))", "user": "56449e4de4b0284900eef5f9"}, {"problem": 99, "code": "(fn [a b]\n  (loop [c (* a b) res '()]\n    (if (= c 0)\n      res\n      (recur (quot c 10) (conj res (mod c 10))))))", "user": "57763002e4b0979f89651631"}, {"problem": 99, "code": "(fn [x y]\n  (loop [p (* x y)\n         r []]\n    (if (<= p 0)\n      (reverse r)\n      (recur (quot p 10) (conj r (mod p 10))))))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48) (str (* x y))))", "user": "58bcea23e4b0888cdc949d23"}, {"problem": 99, "code": "#(map (fn [c] (Integer/parseInt (str c))) (str (* %1 %2)))", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "592518bfe4b072a2710fce65"}, {"problem": 99, "code": "(comp #(map (fn [s] (-> s int (- 48))) %) str *)", "user": "59258aa7e4b072a2710fce74"}, {"problem": 99, "code": "(fn [x y]\n  (letfn [(digits [number] (map #(Character/digit % 10) (str number)))]\n    (digits (* x y))))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) str seq (map #(- (int %) (int \\0)))))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 99, "code": "#((fn [output input]\n            (if (zero? input)\n              output\n              (recur (cons (mod input 10) output) (quot input 10)))) '() (* %1 %2))", "user": "58db362be4b0a4d5acaab675"}, {"problem": 99, "code": "#(map (fn [x] (Integer/valueOf (str x))) (str (* %1 %2)))", "user": "59368efbe4b02506e01a297d"}, {"problem": 99, "code": "(fn [n m] \n  (map (fn [n] (Character/digit n 10)) (seq (str (* n m)))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 99, "code": "(fn [a b]\n  (let [n (* a b)]\n    (loop [i 1\n           r []]\n      (if (<= (quot n i) 0)\n        (reverse r)\n        (recur (* i 10) (conj r (rem (quot n i) 10)))))))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 99, "code": "(fn [a b]\n  (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "59385840e4b02506e01a29c9"}, {"problem": 99, "code": "(fn [x y] (->>\n           (* x y)\n           (str)\n           (seq)\n           (map #(Character/getNumericValue %))))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 99, "code": "(fn [num1 num2]\n  (map #(Character/digit % 10) (str (* num1 num2))))", "user": "59369515e4b02506e01a297e"}, {"problem": 99, "code": "(fn [a b]\n  (loop [c (* a b) r []]\n    (if (< c 10)\n      (cons c r)\n      (recur (/ (- c (mod c 10)) 10) (cons (mod c 10) r)))))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "59368ccae4b02506e01a2979"}, {"problem": 99, "code": "(fn __ [x y]\n  (mapv #(- (int %) (int \\0))\n  ((comp  seq str *) x y))\n)", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str\n      seq\n      (map (comp read-string str)))", "user": "59251947e4b072a2710fce69"}, {"problem": 99, "code": "(fn product-digits [a b]\n  (map #(Character/getNumericValue %) (str (* a b))))", "user": "592518e8e4b072a2710fce67"}, {"problem": 99, "code": "#(vec(map read-string(map str(seq(str (* %1 %2))))))", "user": "59395adfe4b02506e01a29fb"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       (str)\n       (map str)\n       (mapv #(Integer. %))))", "user": "53de7484e4b0d874e779ae35"}, {"problem": 99, "code": "(fn multidigi [a b]\n  ((fn rem10 [x]\n    (if (< x 10) [x] (conj (rem10 (int (/ x 10))) (rem x 10)))\n    ) (* a b))\n  )", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 99, "code": "#(map read-string (map str (vec (str (* %1 %2)))))", "user": "593910eae4b02506e01a29f4"}, {"problem": 99, "code": "(fn product-number\n  [a b]\n  (let [to-int (fn [n] (Integer. (re-find #\"\\d+\" n)))]\n    (map to-int (seq (re-seq #\"[0-9]\" (str (* a b)))))))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 99, "code": "#(->> (* %1 %2)\n  str\n  seq\n  (map str)\n  (map read-string))\n  \n   \n   ;(map read-string (map str (seq (str (* x y))))))", "user": "593744abe4b02506e01a299b"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/digit % 10) (str (* a b))))", "user": "53350264e4b0656e627bfd73"}, {"problem": 99, "code": "(fn [a b]\n  (map (comp #(- % 48) int) (seq (str (* a b))))\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 99, "code": "(fn pd [a b] \n   (map #(Integer/parseInt %)\n         (re-seq #\"[0-9]\" (str (* a b)))\n   )\n)", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 99, "code": "(fn [a b]\n  (let [t (* a b)]\n    (map #(Integer/parseInt (str %)) (str t))))", "user": "576186a5e4b0994c1922fb8e"}, {"problem": 99, "code": "#(map (comp read-string str) (seq (str (* %1 %2))))", "user": "59234753e4b0a390037439ef"}, {"problem": 99, "code": "#(->> (* %1 %2) str (map (fn [x] (Integer/parseInt (str x)))))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 99, "code": "#(loop [n (* %1 %2)\n        r ()]\n    (if (< n 10)\n      (conj r n)\n      (recur (quot n 10) \n             (conj r (rem n 10)))))", "user": "55216aa5e4b0882d96d09192"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str\n      seq\n      (map (comp read-string str)))", "user": "592518cde4b072a2710fce66"}, {"problem": 99, "code": "(fn [x y]\n  (loop [res (* x y)\n         out '()]\n    (if (zero? res)\n      out\n      (recur (/ (- res (mod res 10)) 10) (cons (mod res 10) out)))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 99, "code": "(fn [x y]\n  (map\n    #(- (int %) 48)\n    (vec (char-array (str (* x y))))))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 99, "code": "(fn [a b]\n  (->>\n   (* a b)\n   (iterate #(quot % 10))\n   (take-while pos?)\n   (mapv #(mod % 10))\n   (rseq)))", "user": "586bc870e4b01531a375e964"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "user": "594263cbe4b060784b3b790a"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 99, "code": "(fn pd [a b]\n  (map #(Integer/parseInt (Character/toString %)) (Integer/toString (* a b))))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* %1 %2)))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 99, "code": "(fn [a b] (map (comp read-string str) (str (* a b))))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 99, "code": "#(map (fn c2d [x] (Character/digit x 10)) (str (* %1 %2)))", "user": "55df2752e4b050e68259b3ed"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5935b010e4b04f87174def55"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str\n      seq\n      (map (comp read-string str)))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       (iterate #(quot % 10))\n       (take-while pos?)\n       (mapv #(mod % 10))\n       rseq))", "user": "595b864ee4b066ee0a44afdc"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 99, "code": "#(->> (* %1 %2)\n        (str)\n        (seq)\n        (map str)\n        (map (fn [x] (Integer/parseInt x)))\n        )", "user": "59473563e4b07ddc2dafad97"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Long/parseLong (str %)) (str (* a b))))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "user": "58cf8f97e4b03c36ff7e58b7"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/getNumericValue %)\n       (str (* a b))))", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       str\n       seq\n       (map #(Character/digit % 10))))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 99, "code": "(fn [a b] \n  (loop [res [] mul (* a b)] \n    (if (= mul 0) (reverse res) \n      (recur (conj res (rem mul 10)) (quot mul 10)))))", "user": "56483f45e4b0284900eef62b"}, {"problem": 99, "code": "(fn[& a](->>(apply * a)\n                str\n                (map #(Character/digit % 10))))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) 48)) (str (* % %2)))", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 99, "code": "(fn [x y] (map (comp read-string str) (str (* x y))))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 99, "code": "#(loop [x (str (* % %2)) res []]\n   (if (empty? x)\n     res\n     (recur (rest x) (conj res (Integer/parseInt (str (first x)))))))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 99, "code": "(fn product\n  [& args]\n  (let [o1  (first args)\n        o2  (second args)\n        ans (* o1 o2)]\n    (if (= 0 ans)\n      (list 0)\n      (loop [curr '()\n             n     ans]\n        (if (= n 0)\n          curr\n          (do \n            (recur (conj curr (rem n 10)) (quot n 10))))))))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 99, "code": "(comp (fn[num](map #(Integer/parseInt %) (re-seq #\"\\d\" (str num))) ) (partial * 1))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 99, "code": "(fn [x y] (->> (* x y)\n               str\n               seq\n               (map #(- (int %) 48))))", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 99, "code": "(fn digits [x y] (map - (map int (str (* x y))) (repeat 48)))", "user": "58866b4fe4b0f1effa3b76d4"}, {"problem": 99, "code": "(fn [a b]\n(map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5979be51e4b02382a38ad1d6"}, {"problem": 99, "code": "(comp (partial #(if (> %2 0) (recur (cons (mod %2 10) %1) (int (/ %2 10))) %1) ()) *)", "user": "4fb1d7ace4b081705acca281"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y) str (map (comp read-string str))))", "user": "527ba29de4b03e8d9a4a7594"}, {"problem": 99, "code": "(fn product-digits99\n  [n1 n2]\n  (map read-string (re-seq #\"\\d\" (str (* n1 n2)))))", "user": "5398d042e4b0b51d73faaf00"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) str seq (map str) (map #(Integer. %))))", "user": "5980dcd5e4b021a7a535fddb"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str (* a b)))))\n\n;(defn prodDigit2 [a b] \n;  (map #(Character/digit % 10) (seq (str (* a b))))\n  \n;(defn prodDigit [a b] \n;  (let [product (* a b)] \n;    (loop [p product result []]\n;      (if (< p 10)\n;        (cons p result)\n;        (recur (int (/ p 10)) (cons (mod p 10) result))))))", "user": "55e01f4ee4b050e68259b406"}, {"problem": 99, "code": "(fn [x y]\n  (let [z (* x y)]\n    (map #(- (int %) (int \\0)) (str z)) \n    ))", "user": "57e396cde4b0bfb2137f5a9e"}, {"problem": 99, "code": "#(mapv (comp read-string str) \n    (str ((fn [x y] (str (* x y))) %1 %2)))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* % %2)))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 99, "code": "(fn [n1 n2]\n  \"\"\"Multiply the numbers n1 and n2 and raturn the result as a seq of digits\"\"\"\n  (loop [n (* n1 n2)\n         res (list)]\n    (if (> 10 n)\n      (conj res n)\n      (recur (quot n 10) (conj res (mod n 10))))))", "user": "573f3ccfe4b05c31a32c083f"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "5935151ee4b072a2710fd084"}, {"problem": 99, "code": "(fn mult [x y]\n  (->> (* x y)\n       (str)\n       (seq)\n       (map int)\n       (map #(- % 48))))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 99, "code": "(fn sk-split [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (char-array (str (* a b)))))", "user": "5989ee61e4b021a7a535fed7"}, {"problem": 99, "code": "(fn [x y]\n    (->> (* x y)\n         (str)\n         (map int)\n         (map #(- % 48))))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 99, "code": "#((fn sq[n] \n        ( if (>= n 10) (concat (sq (quot n 10)) [(rem n 10)]) [n])\n           )\n          \n       (* %1 %2))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 99, "code": "(fn [n1 n2] \n  \n  (map \n   #(- (int %) 48)\n   (.toCharArray (.toString (* n1 n2)))\n   ))", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 99, "code": ";(fn [x y] (vec (map read-string (re-seq #\"[\\d]\" (str (* x y))))))\n(fn [x y] (loop [xy-seq [] p (* x y)] (if (zero? p) xy-seq (recur (cons (mod p 10) xy-seq) (/ (- p (mod p 10)) 10)))))", "user": "50aa777fe4b056ee01935866"}, {"problem": 99, "code": "(fn sp [x y] (vec (map #(Long. % ) (map #(str %) (for [z (vec (str (* x y)))] z)))))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 99, "code": "(fn foo\n\n  [i j]\n  (vec (map #(Long. %) (map #(str %)  (vec (str (* i j))))))\n  )", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/digit % 10) (str (* a b)))\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 99, "code": "(fn [a b]\n  (apply vector (map #(- (int %) 48) (seq (str (* a b))))))", "user": "57614a42e4b0994c1922fb85"}, {"problem": 99, "code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "user": "593ab583e4b069cdc2982b57"}, {"problem": 99, "code": "(fn [x y] (into [] (map #( Character/digit % 10) (seq (str (* x y))))))", "user": "55e46caae4b050e68259b451"}, {"problem": 99, "code": "(fn [x, y]\n  (->> (* x y)\n       (iterate #(quot % 10))\n       (take-while pos?)\n       (mapv #(mod % 10))\n       rseq))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 99, "code": "(fn[a b] (->> (* a b) str (map str)(map #(Integer/parseInt %))))", "user": "52faf67ce4b047fd55837005"}, {"problem": 99, "code": "(fn [a b] (->>\n  (* a b)\n  (str)\n  (map int)\n  (map #(- % (int \\0)))))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 99, "code": "(comp (partial map (comp read-string str)) str *)", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue %) (seq (str (* a b)))))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer. %) (map str (seq (str (* a b))))))", "user": "59944e73e4b0b211ea3aaac2"}, {"problem": 99, "code": "(fn [a b] \n  (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "59a72effe4b066c664927d94"}, {"problem": 99, "code": "(fn [a b]\n  (loop [number (* a b) result []]\n    (if (= number 0)\n      (reverse result)\n      (recur (quot number 10) (conj result (mod number 10))))))", "user": "55d354e0e4b0e31453f64a62"}, {"problem": 99, "code": "#(map (fn [x] (Integer/parseInt (str x) ) ) \n      (str ( apply  * %&) ) )", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 99, "code": "(fn [x y] \n  (reduce #(conj %1 (Integer/parseInt (str %2))) [] (str (* x y))))", "user": "5926c254e4b072a2710fceb8"}, {"problem": 99, "code": "(fn [x y]\n  (let [product (* x y)]\n    (loop [return []\n           num product]\n      (if (= num 0)\n        (reverse return)\n\n        (let [next-digit (rem num 10)]\n          (recur (conj return next-digit)\n                 (quot num 10)))))))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 99, "code": "(fn [x y]\n  (map (comp #(Integer/parseInt %) str first)\n  (partition 1 (str (* x y)))\n  ))", "user": "59089229e4b047aa04b1997c"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      (str)\n      (map (fn [x] (Character/digit x 10))))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 99, "code": "(comp\n (partial map #(- (int %) 48))\n str\n *)", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 99, "code": "(fn [x y]\n  (let [m (* x y)\n        get-digits (fn get-digits [s acc]\n                     (if (zero? s)\n                       acc\n                       (recur (quot s 10) (conj acc (mod s 10)))))]\n    (get-digits m ())))", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 99, "code": "(fn[a b]\n        (let [tmp (* a b)]\n          (map #(- (int %) 48) (vec (str tmp)))))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 99, "code": "(fn [x y] (map (comp #(- % 48) int) (seq (str (* x y)))))", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 99, "code": "#(loop [r [] n (* %1 %2) i 10]\n(if (= 0 n) r\n(recur (cons (rem n 10) r) (int (/ n 10)) (* 1 10))\n))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 99, "code": "#((fn it [x coll] (if (< 0 x) (it (int(/ x 10)) (conj coll (mod x 10))) coll)) (* %1 %2) ())", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 99, "code": "(fn spStr\n  [x y]\n  (map\n    #(- (int %) (int \\0))\n      (str (* x y))))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 99, "code": "(fn [x y]\n  (map #(read-string (str %)) (str (* x y))))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 99, "code": "(fn multiply [x y]\n  (letfn [(number->digits [number]\n            (loop [x number\n                   digits '()]\n              (if (pos? x)\n                (recur (quot x 10)\n                       (conj digits (rem x 10)))\n                digits)))]\n    (let [product (* x y)]\n      (number->digits product))))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 99, "code": "#(map (fn [c] (- (int c) (int \\0))) (str (* %1 %2)))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 99, "code": "#(loop [n (* %1 %2) newColl []]\n   (if-not (= n 0)\n     (recur (quot n 10) (cons (rem n 10) newColl))\n     newColl))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "59358f74e4b04f87174def52"}, {"problem": 99, "code": "(fn [param1 param2]\n    (->> (* param1 param2)\n         (str)\n         (seq)\n         ;(map #(Integer/parseInt (str %)))\n         (map #(- (int %) (int \\0)))\n         (vec)\n         ))", "user": "596d630ae4b069c0a1a19846"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) (str) (map #(Character/getNumericValue %))))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 99, "code": "#(loop [mot (str (* % %2)) res []]\n\n   (if (= (count mot) 0)\n\n     res\n\n     (recur (subs mot 1) (concat res (list (Integer/parseInt (subs mot 0 1)))))))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 99, "code": "(fn [a b] (let [c (str (* a b))]\n            (mapv #(- (int %) 48) c)))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 99, "code": "(fn [a b] \n  (map \n   (comp read-string str)  \n   (str (* a b))))", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 99, "code": "(fn [x y]\n  (letfn [(digit [n]\n            (if (> n 0)\n              (let [q (quot n 10) \n                    r (rem n 10)] \n                (conj (digit q) r))\n                []))]\n    (digit (* x y))))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 99, "code": "(fn [a b] (map #(Integer. (str %)) (seq (str (* a b)))))", "user": "59ddae03e4b01968742fed65"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (.toString %)) (seq (.toString (* a b)))))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 99, "code": "(fn [& ls] (-> (apply * ls) (str) (seq) ((partial map (comp read-string str)))))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 99, "code": "(fn [sa sb]\n  (map #(Character/getNumericValue %) (str (* sa sb))))", "user": "559057c4e4b027778923766e"}, {"problem": 99, "code": "(fn [x y] (map (fn [a] (Integer/parseInt (str a))) (str (* x y))))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 99, "code": "(fn fn [n n2]\n  (map #(Character/digit % 10) (str (* n n2))))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 99, "code": "(fn algo \n  [a b]\n  (map #(- (int %) (int \\0)) (str (* a b)))\n  )", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 99, "code": "(fn [a b]\n     (map #(- (int %) 48) (str (* a b)))\n     )", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       (format \"%d\")\n       (map str)\n       (map #(Integer. %))))", "user": "58cfbd7ae4b03c36ff7e58ba"}, {"problem": 99, "code": "(fn [a b] \n  (let [x (* a b)]\n    (map \n     #(- (int %) 48)\n     (into [] (str x))\n    )\n  )\n)", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 99, "code": "(fn   [a b]\n  (drop-while zero? (reverse (cons (rem (* a b) 10) (cons (rem (quot (* a b) 10) 10) (cons (rem (quot (* a b) 100) 10)  (cons (rem (quot (rem (quot (* a b) 100) 100) 10) 10) (cons (rem (quot (rem (quot (* a b) 1000) 1000) 10) 10) ()))))))))", "user": "59deba46e4b01968742fed7f"}, {"problem": 99, "code": "(fn [x y]\n (let [listaDigitosResultadoString (filter #(not= \"\" %) (clojure.string/split (str (* x y)) #\"\"))]\n    ;convirtiendollos a numero y poniendoloos en una nuvea lista :v\n    (map #(Integer/parseInt %) listaDigitosResultadoString)))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str\n      seq\n      (map (comp read-string str)))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 99, "code": "(fn [x y](map #(read-string (str %))  (seq (str (* x y)))))", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 99, "code": "(fn f\n  [a b]\n  (map #(- (int %) 48) (str (* a b))))", "user": "59e778aae4b0249b72820716"}, {"problem": 99, "code": "(fn productDigits\n  [x y]\n  (->> (* x y)\n       (str)\n       (mapv #(Integer/valueOf (str %)))))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 99, "code": "(fn productDigits [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "user": "59e55cc8e4b08badc2a0c555"}, {"problem": 99, "code": "(fn Product-Digits\n  [a b]\n  (apply vector (loop [res (* a b)\n                       lst ()]\n                  (cond\n                    (= res 0) lst\n                    :else (recur (quot res 10) (cons (mod res 10) lst))))))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 99, "code": "#(vec (map bigint (map str (vec (str (* %1 %2))))))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 99, "code": "(fn my-prod-digit [a b]\n    (map #(Integer/parseInt %) (filter #(not= \"\" %) (clojure.string/split (str (* a b)) #\"\"))))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 99, "code": "(fn productDigits [a b]\n  (map #(Character/digit % 10) (seq (apply str [(* a b)]))))", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 99, "code": "(fn [a b]\n  (drop-while zero? \n    (reverse \n      (map #(mod (int(/ (* a b) %)) 10)\n           (take 10 (iterate #(* 10 %) 1))))))", "user": "59e9f03be4b0249b72820752"}, {"problem": 99, "code": "(fn pro-dig\n  [x y]\n  (->>\n    (str (* x y))\n    (map #(Integer/parseInt (str %)))))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "59ea287ee4b0249b72820760"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "59e95cafe4b0249b7282074b"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "user": "59ea0944e4b0249b72820758"}, {"problem": 99, "code": "(fn [num1 num2]\n  (loop [restante (* num1 num2)\n         resultado []]\n    (cond\n      (= restante 0) resultado\n      :else (recur (int (/ restante 10)) (cons (rem restante 10) resultado)))))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 99, "code": "(fn producto\n  [a b]\n  (loop [multi (* a b)\n         result []]\n    (cond\n      (= 0 multi) result\n      :else (recur (int (/ multi 10))\n                   (cons (rem multi 10) result)))))", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 99, "code": "(fn product-dig \n  [x y]\n  (let [mult (* x y) len (count (str mult))]\n    (map #(rem % 10) \n         (reverse (take len (iterate #(quot % 10) mult))))))", "user": "59e68254e4b0249b728206fc"}, {"problem": 99, "code": "(fn [x y]\n  (let [ds (str (* x y))\n        dstrs (map str ds)]\n    (map read-string dstrs)))", "user": "59ea85e4e4b0249b72820767"}, {"problem": 99, "code": "(fn x [a b]\n  (loop [n (* a b) lst []]\n    (cond\n      (zero? n)  (reverse lst)\n      :else (recur (quot n 10) (conj lst (rem n 10))))))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 99, "code": "(fn digit [x y]\n  (loop [res []\n         num (* x y)]\n    (if (= 0 num)res\n                 (recur (cons  (mod num 10) res) (quot num 10)))))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 99, "code": "(fn [x y] \n  (map read-string (re-seq #\"[\\d.]\" (str (* x y)))))", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "59ed01ede4b0249b7282079a"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt (str %))\n       (str (* x y))))", "user": "59e62655e4b08badc2a0c568"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       (str)\n       (seq)\n       (map #(- (int %) 48))))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 99, "code": "(fn [& xs]\n  (letfn [(digits [n base]\n            (loop [n n ds '()]\n              (let [q   (quot n base)\n                    ds' (cons (rem n base) ds)]\n                (if (zero? q)\n                  ds'\n                  (recur q ds')))))]\n    (digits (apply * xs) 10)))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 99, "code": "(fn [n1 n2]\n  (-> (* n1 n2)\n      ((fn digitify [n] (if (>= n 1) (conj (digitify (int( / n 10))) (mod n 10)) [] )))))", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y) \n       str\n       (map #(read-string (str %)))))", "user": "566e87cfe4b0a866af6896dc"}, {"problem": 99, "code": "#(letfn [(digits [n]\n  (if (zero? n) [] (conj (digits (quot n 10)) (mod n 10))))]\n  (digits (* %1 %2)))", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 99, "code": "(fn \n  [m n]\n  (->> (seq (str (* m n)))\n    (map str)\n    (map #(Integer/parseInt %))))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 99, "code": "(fn [x y]\n   (->> (* x y) \n        str \n        (map (comp read-string str))))", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (str (* x y))))", "user": "59c8ffe6e4b0a024fb6ae56c"}, {"problem": 99, "code": "(fn [x y]\n  (let [prod (* x y)]\n    (map #(Character/digit % 10) (apply list (str prod)))))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y)\n         out []]\n    (if (> n 0)\n      (recur (quot n 10) (conj out (mod n 10)))\n      (reverse out)\n    )))", "user": "54cbd6bae4b057c6fda3a282"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/digit % 10)\n       (str (* x y))))", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 99, "code": "(fn [x1 x2] (map #(Integer/parseInt %) (clojure.string/split (str  (* x1 x2)) #\"(?!^)\")))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 99, "code": "#(map (fn [e] (- (int e) (int \\0))) (str (* % %2)))", "user": "59fedc26e4b01bb0ae8afd17"}, {"problem": 99, "code": "(fn \n  [x y] (map (fn [s] (Integer/parseInt (str s))) (seq (str (* x y)))))", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 99, "code": "(fn [a b](map #(Integer. (str %)) (str (* a b))))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 99, "code": "(fn something [x y] (map #(Integer. %) (map #(str %) (str (* x y)))))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 99, "code": "(fn [a b] \n   (map #(Character/digit % 10) (str (* a b)))\n  )", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 99, "code": "#(let [z (* % %2) y '()]\n  (apply concat \n  (for [x (range (count (str z)))]\n    (conj y (read-string (str (get (str z) x))))\n    )))", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 99, "code": "(comp (partial map read-string) (partial map str) str *)", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) str seq (map #(Integer/parseInt (str %)))))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 99, "code": "(fn [a b]\n  (map read-string (map str (seq (str (* a b))))))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 99, "code": "(fn\n  [n1 n2]\n    (->> \n     (* n1 n2) \n     str \n     (map \n      (comp read-string str))))", "user": "59f91b99e4b0ca45a743a33a"}, {"problem": 99, "code": "(fn [x y]\n  (loop [r (* x y)\n         acc '()]\n    (if (< r 10)\n      (conj acc r)\n      (recur (int (/ r 10)) (conj acc (rem r 10))))))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) str (map (comp read-string str))))", "user": "5683fcafe4b0945ebc182aa8"}, {"problem": 99, "code": "(fn [a b]\n    ((comp #(map (fn [x] (Integer. x)) %) #(map str %) seq str *) a b))", "user": "58a34442e4b02bd94d917ef2"}, {"problem": 99, "code": "(fn [a b] \n  (into \n    [] \n    (map \n      (fn [^Character c] (Character/digit c 10)) \n      (str (* a b)) )))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 99, "code": "(fn [a b]\n  (let [digits (fn [n]\n  (loop [n n\n         dgts []]\n    (if (zero? n)\n      dgts\n      (recur (quot n 10) (cons (rem n 10) dgts)))))]\n    (digits (* a b))))", "user": "580a0783e4b0a837a8b30d2c"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) 48)) (str (* %1 %2)))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 99, "code": "(fn [x y] (let [fr (fn [res n] (if (= 0 n) res \n                               (let [q (int (/ n 10)) r (mod n 10) nres (cons r res)]\n                                   (recur nres q) )\n                              )\n                   )] (fr [] (* x y))))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 99, "code": "#(apply vector (map (fn [a] (Integer/parseInt (str a))) (str (* %1 %2))))", "user": "5a1149ace4b04bbd27e6da26"}, {"problem": 99, "code": "(fn [x y] (vec (map #(- (int %) (int \\0)) (str (* x y)))))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 99, "code": "(fn [a b] (vec (map #(Integer/parseInt (str %)) (str (* a b)))))", "user": "5830377ee4b051871117c004"}, {"problem": 99, "code": "#(loop[ mult (* %1 %2) result '()]\n   (if (= 0 mult) result\n     (recur (quot mult 10) (cons (rem mult 10) result))))", "user": "59c77511e4b0a024fb6ae545"}, {"problem": 99, "code": "(fn [x y]\n    (let [digits-fn (fn [result rem]\n                      (if (>= rem 1)\n                        (recur (cons (mod rem 10) result)\n                               (int (/ rem 10)))\n                        result))]\n      (digits-fn [] (* x y))))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 99, "code": "(fn [a b]\n  (loop [result '() num (* a b)]\n    (if (zero? num)\n      result\n      (recur (conj result (rem num 10))\n             (quot num 10)))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 99, "code": "(fn [a b] (map (comp read-string str) (seq (str (* a b)))))", "user": "5628f33ce4b00e49c7cb47f3"}, {"problem": 99, "code": "(fn [x y]\n    (loop [p (* x y) v []]\n          (if (= p 0)\n              (reverse v)\n              (recur (quot p 10) (conj v (rem p 10))))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 99, "code": "(fn foo [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 99, "code": "(fn asdf [x y] (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "user": "5a05a807e4b01bb0ae8afdb8"}, {"problem": 99, "code": "(fn [n1 n2]\n   (map (fn [x] (- x 48)) (map int (str (* n1 n2)))))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 99, "code": "(fn [ x y](map #(Integer/parseInt (str %)) (str (* x y))))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 99, "code": "#(reverse (for [x (iterate (fn [n] (quot n 10)) (* %1 %2)) :let [a (mod x 10)] :while (> x 0)] a))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 99, "code": "(fn multer [x y]\n    ((fn splitter [x xs] \n         (if (> x 0)\n             (splitter (quot x 10) (conj xs (mod x 10)))\n             xs\n             )\n         ) (* x y) '())\n  )", "user": "53de4bdae4b0d874e779ae32"}, {"problem": 99, "code": "#(->> (* %1 %2) str (map (comp read-string str)))", "user": "5a3d33b3e4b001c08efc0cef"}, {"problem": 99, "code": "(fn f [a b]\n  (loop [m (* a b) d (quot m 10) e (rem m 10) r '()]\n    (if (= 0 d)\n      (cons e r)\n      (recur d (quot d 10) (rem d 10) (cons e r)))))", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 99, "code": "#(->> (* %1 %2) (str) (map (fn [d] (- (int d) (int \\0)))) (into []))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "user": "54f773bfe4b01ecee9d8881f"}, {"problem": 99, "code": "; Assuming positive multiplication result\n(fn [& args] (\n  #(let [x (first %)]\n    (if (< x 10) %\n      (recur (conj\n        (rest %)\n        (rem x 10)\n        (quot x 10)))))\n  (list (apply * args))))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) (int \\0)) (seq (str (* x y)))))", "user": "52a23af1e4b04e0c58e87beb"}, {"problem": 99, "code": "(fn [x y]\n    (let [prod (* x y)\n          as-str (str prod)\n          chars (seq as-str)]\n      (vec (map (fn [ch]\n                  (read-string (str ch))) \n                chars))))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 99, "code": "(fn [a b] (let [x (* a b)]\n            (map #(- (int %) 48) (seq (str x)))))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 99, "code": "(fn [x y]\n(map #(Integer/parseInt (str %)) (str (* x y))))", "user": "59dfb8dbe4b08badc2a0c4da"}, {"problem": 99, "code": "(fn\n  [x y]\n  (let [rr (fn rr [[a & as]]\n                (if a\n                  (cons (.toString a) (rr as))\n                  []))]\n    (map read-string (rr (.toString (* x y))))))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)   \n       (iterate #(quot % 10))\n       (take-while #(not= 0 %))\n       (reverse)\n       (map #(mod % 10))\n       (into [])))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 99, "code": "(fn [& n]\n  (map #(- (int %) 48) \n       (str (apply * n))))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer. (str %)) (str (* a b))))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 99, "code": "(fn [x y]\n  (let [prod (* x y)\n        len (count (str prod))]\n    (reverse (map #(rem % 10) (take len (iterate #(quot % 10) prod))))))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 99, "code": "(fn [n1 n2]\n  (loop [p (* n1 n2) acc []]\n    (if (zero? p)\n      acc\n      (recur (quot p 10) (cons (rem p 10) acc)))))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 99, "code": "(fn [x y]\n  (reverse (map #(rem % 10) (take-while #(< 0 %)\n                                        (iterate #(quot % 10) (* x y))))))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 99, "code": "#(reverse (loop [x (* %1 %2)\n       y []]\n  (if (zero? x)\n    y\n    (recur (quot x 10) (conj y (mod x 10)))\n  )\n))", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 99, "code": "(fn [x y]\n  (map (comp read-string str)\n       (str (* x y))))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 99, "code": "(fn pro-digits [a b]\n  (loop [x (* a b)\n            r ()]\n       (if (zero? x)\n         r\n         (recur (quot x 10) (conj r (rem x 10))))))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 99, "code": "(fn [x y] (vec (map #(read-string (str %)) (str (* x y)))))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/getNumericValue %) (str (* a b))))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 99, "code": "(fn [a b] (into [] (map (comp #(- % 48) int) (str (* a b)))))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 99, "code": "(fn __ [x y]\n  (loop [acc []\n         rm (* x y)]\n    (if (< rm 10)\n      (conj acc rm)\n      (recur (cons (rem rm 10) acc) (quot rm 10)))))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 99, "code": "#(loop [c (* % %2) r '()]\n    (if (zero? c)\n      r\n      (recur (quot c 10) (conj r (mod c 10)))))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 99, "code": "(fn [x y] (\n           (fn digs [n] \n             (if (= 0 n) \n               [] \n               (conj (digs (quot n 10)) (rem n 10))))\n           (* x y)))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 99, "code": "(fn[x y] (loop[n (* x y)\n               ret ()]\n           (if (< 0 n)\n             (recur (quot n 10) (conj ret (rem n 10)))\n             ret)))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (seq(str (* a b)))))", "user": "5a625bc2e4b0512ff01cd989"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) str (map #(Character/getNumericValue %))))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 99, "code": "(fn [x y]\n  (let [a (* x y)]\n    (loop [n a out []]\n      (if (= n 0)\n        out\n        (recur (int (/ n 10)) (concat [(mod n 10)] out))))))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 99, "code": "#(vec (loop [n (* %1 %2), d 10, acc '()]\n        (let [a (mod n d)\n              b (- n a)]\n          (if (= n 0)\n              acc\n              (recur b (* d 10) (conj acc (/ a (/ d 10))))))))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 99, "code": "(comp vec (partial map #(Integer/parseInt (str %))) seq str *)", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 99, "code": "(fn [x y]\n  (loop [m (* x y)\n         res []]\n    (if (= m 0)\n      res\n      (recur (int (/ m 10)) (cons (mod m 10) res)))))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 99, "code": "(fn [x y]\n    (map #(read-string (str %)) (seq (str (* x y))))\n    )", "user": "5a488c09e4b05d388ecb6b68"}, {"problem": 99, "code": "#(loop [x (* %1 %2) res '()]\n    (if (zero? x) res\n        (recur (quot x 10) (conj res (mod x 10)))))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 99, "code": "(fn [x y]\n    (let [res (* x y)]\n      (apply vector\n             (reverse (loop [n res digits []]\n                        (let [q (quot n 10)]\n                          (if (= 0 q)\n                            (conj digits n)\n                            (recur q (conj digits (rem n 10))))))))))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 99, "code": "(fn product-digits\n  [x y]\n  (map #(Character/digit % 10) (apply vector (str (* x y)))))", "user": "579f89d5e4b05302be0b72ff"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 99, "code": "#(->> (* % %2)\n      (java.lang.String/valueOf)\n      (seq)\n      (map (fn [ch] (- (int ch) (int \\0)))))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 99, "code": "(fn [a b] (map #(read-string (str %)) (str (* a b))))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 99, "code": "(fn [v1 v2] (map (comp read-string str) (str (* v1 v2))))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 99, "code": "(fn [x y] (map (fn [a] (- (int a) (int \\0))) (seq (str (* x y)))))", "user": "564a985be4b0284900eef65c"}, {"problem": 99, "code": "(fn [n1 n2] (->> (* n1 n2) (iterate #(quot % 10)) (take-while pos?) (mapv #(mod % 10)) rseq))", "user": "56a37ccee4b0542e1f8d14cb"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (seq (str (* a b)))))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 99, "code": "(fn [x y]\n  (mapv (fn [z] (Integer/parseInt (str z))) (str (* x y))))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 99, "code": "(fn product-digits [& a]\n    (letfn [(digits ([x] (digits x [])) ([x d] (if (= 0 x) d (recur (int (/ x 10)) (cons (mod x 10) d)))))]\n        (digits (apply * a))))", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 99, "code": "#(loop [n (* %1 %2)\n        res []]\n   (if (< n 10)\n     (cons n res)\n     (recur (quot n 10) (cons (mod n 10) res))))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 99, "code": "#(vec(map (comp - (partial - 48) int) (str (* % %2))))", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 99, "code": "(fn [n m]\n   (let [r (* n m)]\n      (loop [k r l ()]\n         (if (zero? (quot k 10))\n            (cons k l)\n            (recur (quot k 10) (cons (mod k 10) l))))))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 99, "code": "(fn [x y] (map #(Integer. (str %)) (str (* x y))))", "user": "590b8607e4b047aa04b199db"}, {"problem": 99, "code": "(fn my-spell-number [x y]\n  (->> (seq (str (* x y)))\n       (map str)\n       (mapv #(Integer. %))))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 99, "code": "(fn [x y]\n  (for [n (str (* x y))]\n    (read-string (str n))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 99, "code": "(comp\n (fn [n]\n   (loop [acc '()\n          cnt n]\n     (if (zero? cnt)\n       acc\n       (recur (cons (mod cnt 10) acc)\n              (quot cnt 10)))))\n *)", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 99, "code": "(fn \n  [a b] \n  (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 99, "code": "(fn [x y]\n   (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "5a8bc2a1e4b05369db4d24ef"}, {"problem": 99, "code": "(fn [a b]\n (let [n (* a b)\n        tens (take-while #(<= % (* 10 n)) (iterate #(* % 10) 1))]\n    (vec (reverse (map #(quot (rem n %1) %2) (rest tens) (butlast tens)))))\n)", "user": "5a984657e4b0d174b936c78a"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 99, "code": "(fn mult [x y]\n  (loop [n (* x y) coll []]\n    (if (= n 0)\n      (reverse coll)\n      (recur (quot n 10) (conj coll (mod n 10))))))", "user": "5a9482b7e4b0d174b936c737"}, {"problem": 99, "code": "(fn fun\n  [a b]\n  (loop\n    [result (* a b)\n     lista ()]\n    (if (<= result 0)\n      (vec lista)\n      (recur (quot result 10) (cons (mod result 10) lista)))))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 99, "code": "(fn [a b]\n  (letfn [(d-seq [n]\n            (if ((complement =) 0 n)\n    (conj (d-seq (quot n 10)) (mod n 10))\n    []))] (d-seq (* a b))))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 99, "code": "(fn\n  [a b]\n  (map #(- (int %) 48) (str (* a b))))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 99, "code": "(fn productDigits\n  [a b]\n  (loop [res ()\n           n (* a b)]\n    (cond\n      (zero? n) (vec res)\n      :else\n      (recur (conj res (mod n 10)) (quot n 10)))))", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 99, "code": "(fn[a b] (let [res (* a b) resStr (str res)]\n           (vec\n            (for [ digit (for [digit resStr] (str digit))] (Integer. digit)))\n           ))", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 99, "code": "(fn [a b]\n  (map\n    read-string\n    (re-seq #\"[0-9]\"\n      (str (* a b))\n    )\n  )\n)", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 99, "code": "(fn [x y] \n  (mapv #(Integer/parseInt \n          (str %)) \n        (str (* x y))))", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 99, "code": "(fn prod_dig\n  [x y]\n  \n  (drop-while zero? \n    (reverse \n      (map #(mod (int(/ (* x y) %)) 10)\n           (take 10 (iterate #(* 10 %) 1))))))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 99, "code": "(fn [a b]\n  (drop-while zero? \n    (reverse \n      (map #(mod (int(/ (* a b) %)) 10)\n           (take 10 (iterate #(* 10 %) 1))))))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 99, "code": "#(reduce (fn [x y] (into x (vector (- (int y) 48)))) [] (str (* %1 %2)))", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 99, "code": "(fn [x y]\n  (drop-while zero? \n    (reverse (map #(mod (int(/ (* x y) %)) 10) (take 10 (iterate #(* 10 %) 1))))))", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 99, "code": "(fn [x y] \n  (map #(- (int %) 48) (seq (str (* x y)))))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 99, "code": "(fn [n x] \n  (map #(- (int %) (int \\0)) \n       (seq (str (* n x)))))", "user": "5a99b861e4b0d174b936c7ad"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       str\n       seq\n       (map str)\n       (map read-string)))", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 99, "code": "(fn cs1 [a b]\n  (let [s (str (* a b))]\n    (vec (flatten (for [x s]\n                    (conj []  (Integer/parseInt (str x))))))))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 99, "code": "(fn [a b]\n  (letfn [(rec-digs [ds n]\n            (let [new-ds (conj ds (mod n 10))]\n              (if (< n 10)\n                new-ds\n                (recur new-ds (quot n 10)))))\n          (digs\n            [n] (vec (rec-digs () n)))\n          ]\n    (digs (* a b))))", "user": "5a3d7afae4b0447ef91cc5a6"}, {"problem": 99, "code": "(fn mul-digits [a b]\n ((fn digits [x]\n    (if (= x 0) \n      []\n      (conj (digits (quot x 10))  (rem x 10)))) \n  (* a b)))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 99, "code": "#(map (fn [dig] (- (int dig) (int \\0))) (str (* %1 %2)))", "user": "5a75da49e4b0512ff01cdacf"}, {"problem": 99, "code": "(fn \n  [v1 v2]\n  (->>\n   (* v1 v2)\n   (str)\n   (map #(Character/getNumericValue %))))", "user": "5aabd34fe4b073f177442565"}, {"problem": 99, "code": "#(loop [x (* %1 %2)\n        res '()]\n   (if (= x 0) \n     res\n     (recur (quot x 10) (conj res (rem x 10)))))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 99, "code": "(fn [x y]\n  (let [digs (str (* x y))]\n    (map #(- (int %) 48) digs)))", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- % 48)\n  (map int (str (* a b)))))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "user": "5aba34c5e4b073f1774426a3"}, {"problem": 99, "code": "#(map (fn [n] (Character/digit n 10)) (into [] (str (* % %2))))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       (str)\n       (map #(Character/digit % 10))))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (String/valueOf %)) (str (* a b))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 99, "code": "(fn product-digits [a b]\n  (map #(read-string (str %))\n       (seq (str (* a b)))))", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 99, "code": "(letfn [(digits [n]\n          (if (= n 0)\n            []\n            (conj (digits (quot n 10)) (rem n 10))\n            ))]\n  (comp digits *))", "user": "5ab5f60be4b073f177442643"}, {"problem": 99, "code": "#(->> (* %1 %2)\n     (str)\n     (seq)\n     (map str)\n     (map read-string)\n     (vec))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 99, "code": "(fn\n  [x y]\n  (mapv #(Character/digit % 10) (str (* x y))))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 99, "code": "#(map (fn [disit] (Integer/parseInt (str disit))) (str (* %1 %2)))", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 99, "code": "(fn\n  [n0 n1]\n  (map #(Character/digit % 10) (str (* n0 n1)))\n)", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 99, "code": "(fn mul [a b]\n  (mapv #(Character/digit % 10)(str (* a b)))\n)", "user": "5ac74b34e4b0e27600da777f"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/digit % 10) (seq (str (* x y))))\n)", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 99, "code": "(fn [x y]\n  (mapv #(Character/getNumericValue %)(str (* x y))))", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 99, "code": "(fn [x y] (map #(read-string (str %)) (str (* x y))))", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 99, "code": "(fn [x y]\n  (reduce #(conj % (Character/digit %2 10))\n          []\n          (str (* x y))))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 99, "code": "(fn [a b]\n   ((fn recur-soln\n      ([value] (recur-soln value '()))\n      ([value acc] (let [x (/ value 10)\n                         f #(* 10 (- (/ % 10) (int (/ % 10))))]\n                     (if-not (>= x 1)\n                       (cons (f value) acc)\n                       (recur (int x) (cons (f value) acc)))))) (* a b)))", "user": "5acd08eee4b0e27600da7822"}, {"problem": 99, "code": "(fn [x y] (map #(Integer. (str %)) (vec (str (* x y)))))", "user": "4ed90014535d10e5ff6f52fe"}, {"problem": 99, "code": "(fn [a b]\n  (mapv #(Character/getNumericValue %) (str (* a b))))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 99, "code": ";#(loop [n (* %1 %2) r []]\n;  (if (< n 10)\n;    (cons n r)\n;    (recur (quot n 10) (cons (mod n 10) r))))\n\n;minitrue (optimized - removed \"seq\")\n#(->> (* %1 %2) str (map (comp read-string str)))", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer. %) (re-seq #\"\\d\"(str (* x y)))))", "user": "5ad99ddee4b0ea6055cfac3a"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 99, "code": "(fn [x y]\n    (map #(Integer/parseInt %) (map str (str (* x y)))))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 99, "code": "(fn [a b] (vec (for [r (str (* a b))] (Integer. (re-find #\"[0-9]*\" (.toString r))))))", "user": "5ae246b1e4b0837691e92c5d"}, {"problem": 99, "code": "(fn pd [x y] (let [n (* x y)] (loop [d n\n                                       r []]\n                                  (if (zero? d) \n                                    (reverse r) \n                                    (recur (quot d 10) (conj r (mod d 10)))))))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 99, "code": "(fn [x y]\n  (let [z (* x y)]\n    (loop [z z, res []]\n      (if (zero? z)\n        res\n        (recur (quot z 10) (cons (rem z 10) res))))))", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 99, "code": "(fn mult[a b]\n   (loop [result (list), n (* a b)]\n    (if (pos? n)\n      (recur (conj result (rem n 10))\n             (quot n 10))\n      result)))", "user": "5a6cb2eae4b0512ff01cda57"}, {"problem": 99, "code": "(fn sum-of-digits [a b]\n  (map #(Character/digit % 10) (seq (str (* a b)))))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 99, "code": "#(-> (* %1 %2)\n         str\n         (->> (map (comp read-string str))))", "user": "5991eec7e4b0866487ed0d6e"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str(* a b)))\n  )", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 99, "code": "(fn [x y]\n  ((fn [x digits]\n     (if (zero? x)\n       digits\n       (recur (quot x 10) (conj digits (rem x 10)))))\n   (* x y) ()))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 99, "code": "(fn pdigits [a b]\n  (map #(Integer. (str %)) (seq (str (* a b)))))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 99, "code": ";(fn [a b]\n;  (->> (* a b)\n;       (str)\n;       (map #(Character/digit % 10))))\n\n#(loop [a () x (* %1 %2)] (if (zero? x) a (recur (conj a (mod x 10)) (quot x 10))))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 99, "code": "(fn\n  [x y]\n  (loop [r () s (* x y)]\n    (if (zero? s)\n      r\n      (recur (conj r (mod s 10)) (quot s 10)))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 99, "code": "(fn [a b]\n  (map (comp read-string str) (str (* a b))))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 99, "code": "#(loop [x (* % %2) s '()] (if (zero? x) s (recur (quot x 10) (conj s (rem x 10)))))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (seq (str (* a b)))))", "user": "5649b1b0e4b0284900eef646"}, {"problem": 99, "code": "#(map (fn [x] (Integer/parseInt (str x))) (seq (str (* %1 %2))))", "user": "594266cfe4b060784b3b790b"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) 48)) (str (* %1 %2)))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 99, "code": "(fn [x y]\n  (map #(read-string %) (map #(str %) (seq (char-array (str (* x y)))))))", "user": "5af74644e4b0cc2b61a3bcc2"}, {"problem": 99, "code": "(fn prodigit\n  [a b]\n  (let [c (* a b)]\n    (loop [besar c, result (vector)]\n      (if (< besar 10)\n        (concat (list besar) result)\n        (recur (quot besar 10) (concat (list (mod besar 10)) result))))))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 99, "code": "#(loop [a (* % %2)\n        s []]\n   (if (zero? a) s (recur (quot a 10) (cons (rem a 10) s))))", "user": "55e732c5e4b050e68259b492"}, {"problem": 99, "code": "(fn [x y]\n  (loop [nr (* x y) coll []]\n    (let [rm (mod nr 10)\n          new (quot nr 10)]\n      (if (= 0 nr)\n        (reverse coll)\n        (recur new (conj coll rm))))))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 99, "code": "#(mapv read-string (map str (str (* %1 %2 ))))", "user": "583048d9e4b051871117c007"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y) str seq (map #(- (int %) (int \\0)))))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 99, "code": "(fn [n m] (mapv #(Integer/parseInt (str %)) (seq (char-array (str (* m n))))))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "user": "59d9dcfbe4b0ef0a1e9b5c5d"}, {"problem": 99, "code": "#(vec (map read-string (re-seq #\".\" (str (* % %2)))))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 99, "code": "(fn [x y] (let [number (* x y)] (map #(Integer. (str %)) (str number))))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 99, "code": "(fn [f1 f2]\n        (loop [nr (* f1 f2) l '()]\n            (if (> nr 0)\n                (recur\n                    (quot nr 10)\n                    (conj l (mod nr 10)))\n                (into [] l))))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 99, "code": "(fn my-mult [x y]\n  ((fn split-number [x]\n    (let [a (atom x)\n          r (atom [])]\n         (while (> @a 0)\n                (do\n                  (swap! r conj (rem @a 10))\n                  (swap! a #(int (/ % 10)))))\n                (reverse @r)))\n              (* x y)))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 99, "code": "(fn [a b]\n (loop [x (* a b) r '()]\n  (if (< x 10)\n   (cons x r)\n   (recur (quot x 10) (cons (mod x 10) r)))))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 99, "code": "#(->> (* %1 %2)\n     str\n     seq\n     (map (comp read-string str)))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n      str\n      (map str)\n      (map #(Integer/parseInt %))))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 99, "code": "(fn f [x y]\n  (->> (* x y)\n       str\n       (map #(Character/digit % 10))))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 99, "code": "(fn xyz [a b]\n  (let [x (* a b)\n        len (count (str x))\n        fun (fn f [tmp] (cons (mod tmp 10) (lazy-seq (f (int (/ tmp 10))))))]\n  (reverse (take len (fun x)))))", "user": "570eeb66e4b0b0fb43fd06fa"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* % %2)))", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 99, "code": "#(map (fn[x] (Integer/parseInt (str x)))  (seq (str (* %1 %2))))", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 99, "code": "(fn pd[x y]\n  (map #(Integer/parseInt %)\n       (rest (clojure.string/split (str (* x y)) #\"\"))))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 99, "code": "(fn [x y]\n   (reverse\n    (map #(mod % 10)\n         (take-while pos?\n                     (iterate #(quot % 10)\n                              (* x y))))))", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 99, "code": "(fn [i j]\n    (mapv read-string (re-seq #\"\\d\"(str (* i j)))))", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 99, "code": "(fn [a b]\n  (reverse\n    (loop [acc []\n           val (* a b)]\n      (if (zero? val)\n        acc\n        (recur (conj acc (mod val 10))\n               (quot val 10))))))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 99, "code": "(comp (partial map (comp read-string str)) (comp seq str *))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/getNumericValue %) (vec (.toString (* a b)))))", "user": "59e8a952e4b0249b72820733"}, {"problem": 99, "code": "(fn [a b] (into [] (map #(- (int %) 48) (into [] (str (* a b))))))", "user": "59135c11e4b0163c97b36f02"}, {"problem": 99, "code": "#( loop[ n (* % %2) res [] ] ( if (= n 0) res ( recur (quot n 10) ( cons (rem n 10) res ) ) ) )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 99, "code": "(let\n  [digits (fn digits [x] (if (= x 0) [] (concat (digits (quot x 10)) [(mod x 10)])))]\n  (fn [x y] (digits (* x y))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 99, "code": "#(map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} (seq (str (* %1 %2))))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 99, "code": "(fn [a b] (vec (map #(Integer. (str %)) \n        (filter #(Character/isDigit %) (seq (str (* a b)))))))", "user": "569637d8e4b0dcc4269f4130"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/valueOf (str %)) (str (* x y))))", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 99, "code": "(fn [x y]\n                      (let [separate-digits-fn (fn [i]\n                                                 {:pre [(>= i 0)]}\n                                                 (loop [i* i\n                                                        digits '()]\n                                                   (let [q (quot i* 10)\n                                                         r (rem i* 10)\n                                                         digits* (conj digits r)]\n                                                     (if (= q 0)\n                                                       digits*\n                                                       (recur q digits*)))))]\n                        (separate-digits-fn (* x y))))", "user": "57f904c5e4b0d3187e900936"}, {"problem": 99, "code": "(fn [n1 n2] (apply vector ((fn todec ([n] (todec n '())) ([n de] (if (= 0 n) de (todec (int (/ n 10)) (cons (mod n 10) de))))) (* n1 n2))))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 99, "code": "#(letfn [(digits [x] (loop [a x r []] (if (< a 10) (conj r (int a)) (recur (java.lang.StrictMath/floor (/ a 10)) (conj r (int (mod a 10)))\n\n                                                                           ))))]\n\t (reverse(digits (* % %2)))\n         )", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 99, "code": "(fn foo [a b] (map #(Character/digit % 10) (flatten (list (map char (str (* a b)))))))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt(str %)) (str (* a b))))", "user": "57de5f0ee4b0bd073c202450"}, {"problem": 99, "code": "(fn [y x] (->>\n  (* x y)\n  (str)\n  (seq)\n  (vec)\n  (map str)\n  (map read-string)\n  ))", "user": "5b4b58f2e4b02d533a91bc9c"}, {"problem": 99, "code": "(fn whytho [x y]\n  (map\n   read-string\n  (map\n   str\n  (seq\n   (str\n    (* x y))))))", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 99, "code": "(fn [a b] ( map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 99, "code": "(fn [x y] (for [l (str (* x y))] (Integer. (str l))))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 99, "code": "(fn foo [x y]\n  (map \n   #(read-string (str %)) \n   (str (* x y))))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 99, "code": "#(->> (apply * %&)\n      str\n      seq\n      (map (fn [c] (Character/digit c 10))))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 99, "code": "(fn [x y]\n  (let [prod (* x y)]\n    (->> (str prod)\n         (seq)\n         (map #(Character/digit % 10)))))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str\n      (map (comp read-string str)))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 99, "code": "(fn [a b]\n   (let [f (fn [x acc]\n             (if-not (zero? x)\n               (recur (int (/ x 10)) (conj acc (mod x 10)))\n               acc))]\n     (f (* a b) (list))))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 99, "code": "(fn  [x y]\n  (let [product (* x y)]\n    (loop [n product r '()]\n      (if (<= n 0) r\n          (recur (quot n 10) (cons (mod n 10) r))))))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 99, "code": "#(loop [num (* %1 %2)\n       ret []]\n  (if (= num 0)\n    ret\n    (recur (int (/ num 10)) (cons (mod num 10) ret))))", "user": "5b611666e4b0c6492753e70d"}, {"problem": 99, "code": "#(->> (* % %2)\n      str\n      (re-seq #\"\\d\")\n      (map read-string))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 99, "code": "#(vec (map (fn [x] (Integer/parseInt (str x))) (str (* %1 %2))))", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 99, "code": "(fn [f s] (vec (map #(Character/digit % 10) (str (* f s)))))", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 99, "code": "(fn [n m] \n  (vec (map #(Integer. (str %)) (str (* n m)))))", "user": "5591b61ee4b0604b3f94d580"}, {"problem": 99, "code": "#(map (comp (partial + -48) int) (seq (str (* %1 %2))))", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 99, "code": "(fn prod-dig\n  [a b]\n  (map read-string (map str (str (* a b)))))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 99, "code": "(fn product-digits [a b]\n  (->> (* a b)\n       (str)\n       (map #(- (int %) 48))))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 99, "code": "(fn pd [a b] (->> (* a b) str (mapv (comp read-string str))))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (seq (str (* x y)))))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 99, "code": "#(mapv identity (for[n (str (* %1 %2))](Integer/valueOf (String/valueOf n))))", "user": "5826a843e4b051871117befd"}, {"problem": 99, "code": "(fn [x y] (let [number (* x y)]\n            (->> number\n                 (iterate #(quot % 10))\n                 (take-while pos?)\n                 (mapv #(mod % 10))\n                 rseq)))", "user": "55ad0e18e4b03311e7b7329c"}, {"problem": 99, "code": "(fn [x y]\n  (map\n   #(Character/getNumericValue %)\n   (seq (str (* x y)))))", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 99, "code": "(fn [a b]  (let [n (* a b)] (->> n\n                                  (iterate #(quot % 10))\n                                  (take-while pos?)\n                                  (mapv #(mod % 10))\n                                  rseq)) )", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 99, "code": "(fn digits [a b] (map #(Integer/parseInt (str %)) (str (* a b)) ))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 99, "code": "(fn [a b]\n  (let [s (seq (str (* a b)))]\n    (map #(Character/digit % 10) s)))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 99, "code": "(fn [x y]\n    (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 99, "code": "(fn [a b]\n  (map #(read-string(str %)) (vec (str (* a b)))))", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 99, "code": "(fn [a b] \n  (loop [val (* a b) tot '()] \n    (let [mag (int (/ val 10)) \n          mods (mod val 10)] \n      (if (== mag 0) \n        (conj tot mods) \n        (recur mag (conj tot mods)\n               )\n        )\n      )\n    )\n  )", "user": "5b284375e4b063e2438bcc53"}, {"problem": 99, "code": "(fn [x y]\n    (let [r (* x y)]\n      (->> r\n          (str)\n          (mapv str)\n          (mapv read-string))))", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 99, "code": "(fn [n1 n2]\n  (loop [p (* n1 n2)\n         result nil]\n    (let [[q r] ((juxt quot rem) p 10)\n          result (cons r result)]\n      (if (zero? q)\n        result\n        (recur q result)))))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n     (str)\n     (map #(- (int %) 48))))", "user": "5b3ef412e4b02d533a91bc06"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) 48)) (str (* %1 %2)))", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 99, "code": "#(->> %&\n      (apply *)\n      (str)\n      (re-seq #\"\\d\")\n      (map read-string))", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 99, "code": "(fn [a b] \n  (map #(Character/digit % 10) (seq (str (* a b)))))", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b) \n       str \n       (mapv #(- (int %) 48) )))", "user": "5b985fe5e4b0c0b3ffbd4ab1"}, {"problem": 99, "code": "(fn [x y]\n\t(map #(- (int %) 48) (seq (str (* x y)))))", "user": "5b975c6ee4b0c0b3ffbd4a91"}, {"problem": 99, "code": "#(->>  (str (* %1 %2))\n      (map str)\n      (map read-string)\n      (into []))", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) (int \\0))) (vec (str (* % %2))))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 99, "code": "(fn [one two]\n    (map\n      #(java.lang.Integer/parseInt (str %)) ; Can't pass Java static method e.g. java.lang.Integer/parseInt to map as a parameter!\n      (seq (str (* one two)))))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 99, "code": "(fn digits\n   [x y]\n   (loop [lst (clojure.string/split (clojure.string/join \" \" (seq (char-array (str (* x y))))) #\" \")\n          res []]\n     (if (seq lst)\n       (recur (rest lst) (conj res (Integer/parseInt (first lst))))\n       res)))", "user": "5b86462de4b047b03b2037df"}, {"problem": 99, "code": "(fn [& args]\n  (->> args\n       (reduce *)\n       str\n       (map str)\n       (map read-string)\n       vec))", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48) (into [] (str (* x y)))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 99, "code": "#(map\n  (fn [x] (Integer/parseInt (str x)))\n  (str (* %1 %2)))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 99, "code": "(fn [x y] (->> (str (* x y)) (map #(- (int %1) 48))))", "user": "5b81139fe4b047b03b203782"}, {"problem": 99, "code": "(let [int->digits (fn [n]\n   (if (= n 0)\n     '(0))\n   (loop [n n\n          so-far '()]\n     (if (= n 0)\n       so-far\n       (recur\n         (quot n 10)\n         (cons (rem n 10) so-far)))))]\n      \n      (fn [a b]\n  (-> (* a b)\n      int->digits)))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 99, "code": "#(->> (* %1 %2) str (map (fn[x] (read-string (str x)))))", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str\n      seq\n      (map (fn [x] (- (int x) 48))))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 99, "code": "(fn [x y] (mapv #(read-string (str %)) (str (* x y))))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 99, "code": "(fn [a b]\n    (->>\n      [(* a b) ()]\n      (iterate \n        (fn [[n res]]\n          [(quot n 10) (cons (rem n 10) res)]\n          ))\n      (drop-while #(> (first %) 0))\n      first\n      second\n    )\n  )", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 99, "code": "(fn pro-digits [x y]\n    (->> (* x y)\n         (str)\n         (seq)\n         (map str)\n         (map #(Integer/parseInt %))))", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/valueOf (str %)) (str (* a b))))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 99, "code": "(fn pd\n  [& args]\n  (\n    ->> args\n       (apply * )\n        (str )\n        (seq )\n        (map int )\n        (map #(- % 48 ))\n        )\n  )", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 99, "code": "(fn product \n  ; multiplies two numbers and returns the result as a sequence of its degits\n  [a b]\n  (map #(Character/getNumericValue %1) (str (* a b))))", "user": "5bbbcecee4b0a20761a23611"}, {"problem": 99, "code": "(fn product_digits\n  [num1 num2]\n; \"function which multiplies two numbers and returns the result as a sequence of its digits\"\n  (map #(Character/getNumericValue %1) (str (* num1 num2))))", "user": "5bbbd077e4b0a20761a23615"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 99, "code": "(fn [n n2]\n  (->> (* n n2) str (map (comp read-string str))))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 99, "code": "(fn [x y]\n   (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       (str)\n       (map #(Character/digit % 10))))", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       str\n       (map (comp read-string str))))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 99, "code": "(fn [x y] (vec (map #(Integer/parseInt %) (map str (str (* x y))))))", "user": "5bb3c9a8e4b0a20761a2352f"}, {"problem": 99, "code": "(fn [& args]\n  ((fn digits [n]\n     (if (< n 10)\n       [n]\n       (conj (digits (quot n 10)) (mod n 10))))\n    (apply * args)))", "user": "543a8256e4b032a45b869327"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 99, "code": "(fn [a b] \n   (vec (map #(- (int %) (int \\0)) (seq (str (* a b))))))", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 99, "code": "(fn product-digits\n  [a b]\n  (loop [res (* a b)\n         digits ()]\n    (if (zero? res)\n      digits\n      (recur (int (/ res 10)) (cons (rem res 10) digits )))))", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 99, "code": "(fn [x y]\n  (let [res (* x y)]\n    (map #(Character/digit % 10) (str res))))", "user": "5b2c79c6e4b025bcb146f2b7"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 99, "code": "(fn product_digits\n  [a b]\n  (->> (* a b)\n       str\n       (map #(-(int %) 48))\n       )\n  )", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 99, "code": "(fn\n   [a b]\n   (->> [(* a b) () 1]\n        (iterate (fn [[n result l]]\n                   [(quot n 10) (cons  (mod n 10) result) (if (zero? n) 0 1)]))\n        (drop-while #(not (zero? (last %))))\n        first\n        second\n        rest))", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 99, "code": "(fn [x x2]\n  (let [sepa\n        (fn sepa [n]\n          (loop [n n\n                 res ()]\n            (if (< n 1)\n              res\n              (recur (quot n 10) (conj res (rem n 10))))))]\n    (sepa (* x x2))))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 99, "code": "(fn \n  [a b]\n  (map #(Character/digit % 10) (str (* a b)))\n  )", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 99, "code": "(fn [a b]\n  (drop-while zero? \n    (reverse \n      (map #(mod (int(/ (* a b) %)) 10)\n           (take 10 (iterate #(* 10 %) 1))))))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5a99c5a9e4b0d174b936c7b1"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 99, "code": "(fn [a b]\n  (let [f (fn [x] (- (int x) 48))]\n    (->> b\n         (* a)\n         str\n         (mapv f))))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 99, "code": "(fn [y z] (let [x (* y z)] (loop [i (quot x 10) r (rem x 10) res []] (println i) (if (> i 0) (recur (quot i 10) (rem i 10) (cons r res)) (cons r res)))))", "user": "5addadfce4b0837691e92c13"}, {"problem": 99, "code": "(fn pd [x y]\n  (map #(rem % 10) (reverse (take-while pos? (iterate #(quot % 10) (* x y)))))\n  )", "user": "5bc28638e4b07a9b28b10033"}, {"problem": 99, "code": "(fn [a b]\n  ((fn f [x]\n    (let [q (quot x 10) r (mod x 10)]\n    (if (zero? q)\n      [r]\n      (conj (f q) r)))) (* a b))\n)", "user": "59a0286be4b0871e7608b82f"}, {"problem": 99, "code": "(fn product-digits [x y] \n(->> (* x y )\n     (str)\n     (into []) \n     (map #(Character/digit  % 10))))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 99, "code": "(fn [x y] (map (fn [x] (- (int x) 48)) (seq (str (* x y)))))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 99, "code": "(fn product-digits\n  [n1 n2] (map (fn [^Character c] (Character/digit c 10)) (str (* n1 n2))))", "user": "5b6f72ede4b0c6492753e7dc"}, {"problem": 99, "code": "#(loop [acc '() n (* %1 %2)]\n       (if (zero? n) acc\n       (let [t (rem n 10) r (quot n 10)]\n         (recur (cons t acc) r))))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 99, "code": "(fn [a b]\n  (-> (* a b)\n      str\n      (clojure.string/split #\"\")\n      (->> (filter #(not (empty? %))))\n      (->> (map #(Integer/parseInt %)))))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 99, "code": "#(reverse ((fn dig\n              ([x] (dig x []) )\n              ([x xs]\n               (loop [x x\n                      xs xs]\n                 (if (zero? (int (/ x 10)))\n                   (conj xs (mod x 10))\n                   (recur (int (/ x 10)) (conj xs (mod x 10)))))))\n             (* %1 %2)))", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 99, "code": "#(into [] (map (comp read-string str) (str (* % %2))))", "user": "5bb5cd43e4b0a20761a23575"}, {"problem": 99, "code": "(fn [a b] (map #(read-string (str %)) (seq (str (* a b)))))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 99, "code": "(fn [x y]\n    (map #(Long/valueOf (str %))\n         (vec (str (* x y)))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 99, "code": "(fn [a b]\n  (->> (str (* a b))\n       (seq)\n       (map str)\n       (map read-string)))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 99, "code": "(fn [x y] ((fn digits [num] (if (> num 10) (conj (digits (quot num 10)) (rem num 10)) (vector num))) (* x y)))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 99, "code": "(fn [x y]\n  (let [pd (* x y)]\n    (map read-string (re-seq #\"\\d\" (str pd)))\n  )\n )", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 99, "code": "(fn [n1 n2]\n   (map #(Integer/parseInt (str %)) (str (* n1 n2)))\n  )", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 99, "code": "#(map read-string (map str (seq (str (* %1 %2)))))", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 99, "code": "#(loop [n (* %1 %2)\n        ret []]\n   (if (= 0 n)\n     (vec ret)\n     (recur (quot n 10) (cons (mod n 10) ret))))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 99, "code": "(fn [a b]\n  (mapv #(Integer/parseInt (str %)) (str(* a b))))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (seq (str (* x y)))))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5a09a6f7e4b01bb0ae8afe14"}, {"problem": 99, "code": "(fn [a b] ((comp (partial map read-string) (partial map str) seq str) (* a b)))", "user": "596aaeefe4b069c0a1a19808"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) str (map (comp #(Integer. %) str))))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y) result []]\n    (if (zero? n) (reverse result)\n      (recur (int (/ n 10)) (conj result (mod n 10))))))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 99, "code": "(fn [a b] (loop [n (* a b) \n                 sq []]\n            (if (= 0 n)\n              sq\n                (recur (quot n 10) (cons  (mod n 10) sq))\n              )))", "user": "4eadc217535d7eef30807321"}, {"problem": 99, "code": "#(->> (* % %2) str (re-seq #\".\") (map read-string))\n; or (fn [a b] (map #(mod % 10) ((fn t[x] (if (zero? x) [] (conj (t (quot x 10)) x))) (* a b))))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 99, "code": "(fn [l r] (map #(- (int %) (int \\0)) (str (* l r))))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 99, "code": "(fn [x y]\n  (\n   (fn to-digits\n     ([n] (to-digits n '()))\n     ([n a]\n      (if (zero? n)\n        (vec a)\n        (to-digits (quot n 10) (conj a (rem n 10))))))\n   (* x y)))", "user": "5c0e58bfe4b01240ff567140"}, {"problem": 99, "code": "(fn [a b]\n  (letfn [(digits [n] (if (zero? n) '() (cons (rem n 10) (digits (quot n 10)))))\n          (digits-tailrec [n] (loop [n n r ()] (if (zero? n) r (recur (quot n 10) (cons (rem n 10) r)))))]\n    (digits-tailrec (* a b))))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 99, "code": "(fn [x y] \n  (map (comp #(- % 48) int) \n       (str (* x y))))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 99, "code": "#(map (comp read-string str) (vec (str (* %1 %2))))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 99, "code": "#(->> %&\n      (apply *)\n      str\n      seq\n      (map str)\n      (map read-string))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 99, "code": "(fn x [a b]\n  (let [numbers {\"0\" 0\n                 \"1\" 1\n                 \"2\" 2\n                 \"3\" 3\n                 \"4\" 4\n                 \"5\" 5\n                 \"6\" 6\n                 \"7\" 7\n                 \"8\" 8\n                 \"9\" 9}]\n  (into [] (filter #(not= nil %) (map #(numbers %) (clojure.string/split (str (* a b)) #\"\"))))))", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 99, "code": "(fn [x y]\n  (let [multiplied (* x y)]\n    (loop [n multiplied\n           acc '()]\n      (if (= n 0) acc\n\t\t(recur (quot n 10) (cons (mod n 10) acc))))))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 99, "code": "(fn [a b](reduce #(conj %1 (Integer. (str %2))) [] (str (* a b))))", "user": "5c23ff2ce4b07e362c23059c"}, {"problem": 99, "code": "(fn product-digits\n  [x y]\n  (loop [res () v (* x y)]\n    (if (> v 0)\n      (recur (conj res (rem v 10)) (int (/ v 10)))\n      res\n      )\n    )\n\n  )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 99, "code": "(fn prodigits\n  [n m]\n  (map #(- (int %) (int \\0)) (str (* n m))))", "user": "5c222b7de4b07e362c230588"}, {"problem": 99, "code": "#(for [z (str (* %1 %2))]\n    (- (int z) (int \\0)))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 99, "code": "#(->> (* %1 %2)\n         str seq\n         (map (fn [n] (Integer/parseInt (str n))))\n         )", "user": "5c17467fe4b01240ff5671df"}, {"problem": 99, "code": "(fn [a b] \n  (loop [pro  (* a b)\n         dig nil]\n    (cond\n     (< pro 10) (concat [pro] dig )\n     :else (recur (quot pro 10) (concat  [(mod pro 10)] dig ) )\n     )))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 99, "code": "(fn [x y]\n    (map #(Long/valueOf (str %)) ((comp seq str *) x y)))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 99, "code": "(fn [a b]\n  (reduce #(conj %1 (-> %2 str Integer/parseInt))\n          []\n          (-> (* a b) str vec)))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 99, "code": "(fn todigits [y z]\n  (into [] (map #(Character/digit % 10) (str (* y z)))))", "user": "5c24c654e4b07e362c2305a7"}, {"problem": 99, "code": "#(reverse (loop [x (* % %2) d []] (if (zero? x) d (recur (quot x 10) (conj d (rem x 10))))))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 99, "code": "(fn [x1 x2] (map #(Character/digit % 10) (str (* x1 x2))) )", "user": "5c3310cde4b0d62ef62d9f43"}, {"problem": 99, "code": "(fn product-digits [m n]\n  (letfn [( digits [n]\n            (loop [result '()  current n]\n              (if (= current 0) result\n                                (let [digit (mod current 10)]\n                                  (recur (cons digit result) (/ (- current digit) 10))))\n\n              )\n            )]\n    (digits (* m n))))", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 99, "code": "#((fn b [a n]\n     (if (< 9 n)\n       (b (cons (rem n 10) a) (int (/ n 10)))\n       (cons n a))) [] (* % %2))", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 99, "code": "(fn __ [x y]\n  (map #(- (int %) 48) (char-array (str (* x y)))))", "user": "5bef3e88e4b0a6d31fed213f"}, {"problem": 99, "code": "(fn [x y] (mapv #(Integer/parseInt %) (mapv str (mapv identity (str (* x y))))))", "user": "5a135573e4b0ff51aa4b3180"}, {"problem": 99, "code": "(fn mul ([a b]\n         (mul (* a b)))\n  ([m](if (>= m 1)\n   (conj (mul (int(/ m 10)))(rem m 10))\n        (vector))))", "user": "5c486dece4b0e06e1360a3c0"}, {"problem": 99, "code": "(comp (partial map #(- (int %) 48)) str *)", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 99, "code": "(fn [_a _b]\n    (reverse\n    (loop [res []\n           val  (* _a _b)\n           div 10]\n        (if (= val 0)\n            res\n            (recur\n                (conj res (/ (mod val div) (/ div 10)))\n                (- val (mod val div))\n                (* 10 div)\n            )))))", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 99, "code": "#(\n  (fn [num] (loop [number num result ()]\n       (if (zero? number)\n         result\n         (recur (int (/ number 10)) \n                (conj result (mod number 10)))))) \n  (* %1 %2))", "user": "5c4c74efe4b0f9f7a8770e76"}, {"problem": 99, "code": "(fn [& args] (map #(read-string (str %)) (str (reduce * args))))", "user": "5c512811e4b0fb8c5ffd99c2"}, {"problem": 99, "code": "(fn zubi [x y]\n   (map #(- (int %) (int \\0)) (str (* x y))))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 99, "code": "(fn [x y]\n         (map #(- (int %) 48) (vec (seq (str (* x y))))))", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 99, "code": "(fn product-digits [x y]\n  (loop [val (* x y)\n         numbers []]\n    (if (= val 0)\n      (reverse numbers)\n      (recur\n        (quot val 10)\n        (conj numbers (rem val 10))))))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 99, "code": "(fn digits\n  [x y]\n  (let [val (* x y)]\n    (loop [r []\n           v val]\n      (if (< v 10)\n        (reverse (conj r v))\n        (recur (conj r (rem v 10)) (int (/ v 10)))))))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 99, "code": "(fn product-digits [a b]\n  (let [product (* a b)\n        number-of-digits (int (Math/floor (+ 1 (Math/log10 product))))]\n    (first (reduce (fn [[digits remainder] d] \n                     (let [digit (quot remainder (int (Math/pow 10 d)))]\n                       [(conj digits digit) \n                        (- remainder (* digit (int (Math/pow 10 d))))])) \n                   [[] product] \n                   (range (dec number-of-digits) -1 -1)))))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       (str)\n       (mapv #(Integer/parseInt (str %)))\n  )\n)", "user": "5ba75fdfe4b0a20761a23419"}, {"problem": 99, "code": "#(->> (* % %2)\n       (str)\n       (seq)\n       (map str)\n       (map read-string))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 99, "code": "(fn [a b] (let [dig (fn dd [a] (if (= 0 a) [] (conj (dd (quot a 10)) (mod a 10) )))]\n             (dig (* a b))))", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 99, "code": "(fn\n  [& factors]\n  (->>\n    factors\n    (apply * ,,,)\n    str\n    (map #(compare % \\0) ,,,)))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))\n       (str (* a b))))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 99, "code": "#(loop [n (* %1 %2)\n         result '()]\n    (let [q (int (/ n 10.0))\n          m (mod n 10)]\n      (if (= 0 q m) result (recur q (cons m result)))))", "user": "502ea967e4b06efe12e8cc76"}, {"problem": 99, "code": "(comp (partial map #(- (int %) 48)) str *)", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 99, "code": "(comp (partial map read-string) (partial map str) str *)", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 99, "code": "#(loop [x (* % %2) c '()] (if (< x 1) c (recur (int (/ x 10)) (conj c (mod x 10)))))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 99, "code": "#(\nloop [result []\n       nu (* %1 %2)]\n (let [out (rem nu 10)\n       q  (quot nu 10)]\n  (if (= q 0) (cons out result) \n  (recur (cons out result) q))))", "user": "5c09e555e4b0bdcf453d16fd"}, {"problem": 99, "code": "(fn rfn\n  ([x y] (rfn x y '()))\n  ([x y r] (into [] (loop [product (* x y)\n                           result r]\n                      (if (>= product 10)\n                        (recur (quot product 10) (conj result (mod product 10)))\n                        (conj result product))))))", "user": "558843dae4b059ccff29b1f3"}, {"problem": 99, "code": "(fn [a b]\n  (loop [digits []\n         remainder (* a b)]\n    (if (> remainder 0)\n      (recur (cons (rem remainder 10) digits) (quot remainder 10))\n      digits)))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 99, "code": "(fn [x y]\n   (loop [x (* x y)\n          ls []]\n     (if (= x 0)\n       (vec ls)\n       (recur (int (/ x 10)) (cons (mod x 10) ls)))\n     ))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 99, "code": "#(map (fn [next] (Character/digit next 10)) (str (* %1 %2)) )", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 99, "code": "(fn [a b]\n  (let [product (* a b)]\n    (loop [n product digits '()]\n      (if (zero? n)\n        digits\n        (recur (quot n 10) (conj digits (rem n 10)))))))", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 99, "code": "(fn\n  [a b]\n  (let [str-num (str (* a b))]\n    (map #(- (int %) (int \\0)) str-num)))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) str seq (map str) (map read-string)))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 99, "code": ";(defn size [x] (loop[cd 0 rd x]\n;             (if (>= rd 1)\n;               (recur(inc cd)(/ rd 10))\n;             cd\n;             )))\n;(defn dig[x](reduce * (repeat(dec(size x)) 10)))\n;\n;(defn nextr [x] (int(/ x (dig x))))\n;\n;(defn floor[x](*(nextr x)(dig x)))\n;\n;\n;((fn[x y](loop[c (size (* x y)) p (* x y) r []]\n;          (if (> c 0)\n;            (recur(dec c)(- p (floor p))(conj r (nextr p)))\n;            r\n;            )\n;          \n;          )\n;  ) 99 98)\n;not working with lots of 9's :(  (also ofcourse i have to manually nest the defns to fns before enterin the sol, but that is not a problem.\n\n#(map read-string(map str (seq(str(* % %2)))))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 99, "code": "#(->> (* % %2) str (map (comp read-string str)) (into []))", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 99, "code": "#(map read-string (re-seq #\"\\d\" (str (* % %2))))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 99, "code": "(fn product-digits\n  [x y]\n  (map #(Character/digit %1 10) (str (* x y)))\n  )", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 99, "code": "(fn [a b]\n  (loop [result []\n         input (* a b)]\n    (if (zero? input)\n      (vec result)\n      (recur (cons (mod input 10) result) (int (/ input 10))))\n    ))", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 99, "code": "#(mapv (comp read-string str) (str (* % %2)))", "user": "5835a222e4b089d5ab817ce5"}, {"problem": 99, "code": "(fn [x y] (loop [m (* x y) base (reduce * (repeat (dec (count (str m))) 10)) r []]\n             (if (= base 1) (conj r m) (recur (mod m base) (int (/ base 10)) (conj r (int (/ m base)))))))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 99, "code": "(fn [a b]\n   (reverse (let [mult (* a b)]\n     (loop [res [(rem mult 10)] \n            cel (quot mult 10)]\n       (if (zero? cel) res (recur (conj res (rem cel 10)) (quot cel 10)))))))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y)\n         res []]\n    (if (zero? n)\n      (vec (reverse res))\n      (recur (quot n 10)\n             (conj res (rem n 10))))))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 99, "code": "(fn [x y] \n  (map #(- (int %) (int \\0)) (str (* x y))))", "user": "5892a5fde4b00487982d5228"}, {"problem": 99, "code": "(fn [a b]\n  (for [digit (str (* a b))] (read-string (str digit))))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 99, "code": "(fn prod-digit\n  [a b]\n  (map #(Integer/parseInt (str %)) (apply concat (partition-all 1 (str (* a b))))))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 99, "code": "(fn pd\n   ([x y] (pd (* x y) [] 0))\n   ([d v _]\n    (if (= 0 d) v (pd (quot d 10) (concat [(mod d 10)] v) 0))))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 99, "code": "(fn sq_mult [x y]\n  (let [n {\\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9 \\0 0}\n        s_xy (str (* x y))\n        s (for [i s_xy] i)]\n    (flatten (for [x s] (map second (filter (comp (into #{} (list x)) first) n))\n               ))\n    )\n  )", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 99, "code": "(fn getdig [x y] (mapv #(Integer/parseInt (str %))  (seq (str (* x y)))))", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) str (map #(- (int %) 48))))", "user": "5c8319c3e4b0c8042a70ce45"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5c70641de4b0fca0c162277f"}, {"problem": 99, "code": "(fn prodDigits\n  [a b]\n  (mapv #(Integer/parseInt (str %)) (str (* a b)))\n  )", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 99, "code": "(fn myProductDigit\n  [a b]\n  (loop [num    (* a b)\n         result ()]\n    (if (zero? (quot num 10))\n      (vec (cons num result))\n      (recur (quot num 10)\n             (cons (mod num 10) result)))))", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5c706454e4b0fca0c1622780"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5c787131e4b0fca0c1622825"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       str seq\n       (map #(- (int %) (int \\0)))))", "user": "5c8860bce4b048ec896c5928"}, {"problem": 99, "code": "#(->> %&\n      (apply *) str seq\n      (map str)\n      (map read-string))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      (str)\n      (map str)\n      (map read-string)\n      (vec))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 99, "code": "(fn product-digit\n  [num1 num2]\n  (map #(Integer/parseInt (str %)) (str (* num1 num2))))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 99, "code": "(fn product-digits\n  [n1 n2]\n  (->> (* n1 n2)\n       str\n       seq\n       (map #(-> % \n                 str \n                 Integer/parseInt))))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 99, "code": "(fn [n1 n2]\n  (let [product (* n1 n2)]\n    (map #(Character/digit % 10)\n         (into '[] (for [n (str product)]\n                     n)))))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 99, "code": "(fn [x y]\n    (letfn [(digits[n vec]\n              (if (= n 0)\n                vec\n                (digits (int (/ n 10)) (conj vec (mod n 10)))\n                ))]\n      (reverse (digits (* x y) []))\n      ))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 99, "code": "(fn [x y]\n   (map #(Character/digit % 10) (str (* x y))))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 99, "code": ";; http://www.4clojure.com/problem/99\n(fn product-digits\n  [a b]\n  (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 99, "code": "(fn [x y]\n    (map #(Character/digit % 10) (str (* x y))))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 99, "code": "(fn [n1 n2]\n    (mapv #(Integer/parseInt (str %)) (str (* n1 n2))))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 99, "code": "(fn [x y]\n  (loop [sol () prod (* x y)]\n    (if (= prod 0)\n      sol\n      (recur (cons (rem prod 10) sol) (quot prod 10)))))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 99, "code": "(fn [x y] (mapv #(Integer/parseInt (str %)) (str (* x y))))", "user": "5ca1f8a1e4b048ec896c5b8c"}, {"problem": 99, "code": "(fn [a b]\n    (loop [n (* a b)\n               result []]\n      (if (zero? n)\n        result\n        (recur (quot n 10) (cons (mod n 10) result)))))", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 99, "code": "(comp (partial map #(Integer/parseInt (str %))) seq  str *)", "user": "5c7bb8c0e4b0fca0c1622864"}, {"problem": 99, "code": "(fn [a b]\n  (map read-string (map str (seq (str (* a b))))))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b)))\n  )", "user": "539ec9f9e4b0ca733b974491"}, {"problem": 99, "code": "(fn prodig\n  [x y]\n  (reduce #(conj %1 (- (int %2) 48)) \n          [] \n          (str (* x y))))", "user": "5c538cb5e4b0fb8c5ffd99fb"}, {"problem": 99, "code": "(fn [x y] (->> (* x y)\n              str\n              (map {\\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9 \\0 0})))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 99, "code": "(fn digits\n  [k n]\n  (let [num (* k n)]\n    (for [x (str num)]\n      (Character/digit x 10))))", "user": "5c05cae7e4b0bdcf453d16a3"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "user": "5cb71f35e4b026601754b961"}, {"problem": 99, "code": "#(into [] (for [c (str (* %1 %2))]\n            (read-string (str c))))", "user": "4eb6f065535d7eef30807372"}, {"problem": 99, "code": "(fn [a b]\n   (->> (* a b) str vec (map #(Character/digit % 10))))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 99, "code": "#(->> (* % %2) str seq (map str) (map read-string))", "user": "5be96111e4b0f319e2d7ec70"}, {"problem": 99, "code": "(fn q99 [d1 d2]\n  (let [ans (* d1 d2)]\n    (->> (clojure.string/split (str ans) #\"\")\n         (filter #(not (= (clojure.string/trim %) \"\")))\n         (map #(Integer. %)))))", "user": "5cab0ad9e4b048ec896c5c46"}, {"problem": 99, "code": "(fn digits [x y]\n  (loop [sum (* x y)\n         ret '()]\n    (if (< sum 10)\n      (conj ret sum)\n      (recur (quot sum 10) (conj ret (rem sum 10))))))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 99, "code": "(fn [a b]\n  (let [product (* a b)\n        digits (str product)]\n    (map #(Character/digit %1 10) digits)))", "user": "5ba5802de4b0a20761a233fd"}, {"problem": 99, "code": "(fn [a b] (map #(Integer. %) (re-seq #\"\\d\" (str (* a b)))))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 99, "code": "#(loop [res [] num (* %1 %2)] \n   (if (zero? num)\n    (reverse res)\n     (recur (conj res (rem num 10))\n            (quot num 10))))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 99, "code": ";; (fn [x y] (map read-string (clojure.string/split (.toString (* x y)) #\"\")))\n(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 99, "code": "(fn [a b]\n  (let [prod (* a b)\n        s (str prod)]\n    (for [ch s]\n      (- (int ch) (int \\0)))))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 99, "code": "(fn [x y]\n  (let [prod (* x y)\n        base (-> prod (Math/log10) inc int)]\n    (->> (iterate #(* 10 %) 1)\n        (take base)\n        reverse\n        (map #(->> %\n                  (/ prod)\n                  int\n                  ((fn [a b] (mod b a)) 10))))))", "user": "5cd1f5dae4b0ccb0619628f7"}, {"problem": 99, "code": "#(mapv (fn [x] (Integer/parseInt x))\n    (filter (complement clojure.string/blank?)\n    (-> \n      (* %1 %2)\n      (str)\n      (clojure.string/split #\"\"))))", "user": "4eb47bb1535d7eef30807362"}, {"problem": 99, "code": "(fn prod-digits [a b]\n  (map #(Character/digit % 10) (vec (str (* a b)))))", "user": "5cb4e764e4b026601754b929"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer. %) (re-seq #\"\\d\" (str (* a b)))))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 99, "code": "(fn [a b]\n  (reverse (map #(mod % 10) (take-while pos? (iterate #(quot % 10) (* a b))))))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) str (map (comp read-string str))))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 99, "code": "#(->> %&\n      (apply *)\n      (str)\n      (map int)\n      (map (partial - 48))\n      (map (partial * -1))\n)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 99, "code": "(fn [x y](map #(- (int %) 48) (seq (str (* x y)))))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 99, "code": "(fn [a b] (map (fn [x] (- x (* 10 (int (/ x 10))))) ((fn [x] (if(< x 10)[x](loop [div 1 out '() tmp x] (if (< tmp 10) out (recur (* 10 div) (conj out (int (/ x div))) (int (/ x div))))))) (* a b))))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 99, "code": "(fn [a b]\n   (->> (* a b)\n        str\n        (mapv str)\n        (mapv #(Integer. %))))", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 99, "code": "(comp vec #(loop [n (* %1 %2) s nil]\n   (if (= n 0) s\n     (recur (/ (- n (rem n 10)) 10) (conj s (rem n 10))))))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 99, "code": "(fn [a b]\n  (loop [suma (* a b)\n         lis []]\n    (if (= suma 0) (reverse lis)\n      (recur (quot suma 10) (conj lis (mod suma 10))))))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 99, "code": "#(map-indexed (fn [idx itm] (read-string (str itm))) (str (* %1 %2)))", "user": "5cbdc591e4b026601754ba00"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 99, "code": "(fn [x y]\n   (let [f (fn [p]\n             (take (inc (count (str (p 1))))\n                   (iterate (fn [p] (vector (rem (p 1) 10) (quot (p 1) 10)))\n                            p)))]\n     (into [] (reverse (map first (rest (f [(* x y) (* x y)])))))))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 99, "code": "(comp (fn digits [x] (if (zero? x) [] (conj (digits (quot x 10)) (mod x 10)))) *)", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 99, "code": "(fn multiply-and-digits\n  [a b]\n  (mapv #(Integer/parseInt (str %)) (str (* a b)))\n)", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 99, "code": "(fn [& args]\n  (->> (apply * args)\n       str\n       seq\n       (map str)\n       (map read-string)\n       vec))", "user": "5b269cf3e4b063e2438bcc35"}, {"problem": 99, "code": "(fn [a-digit b-digit]\n   (into [] (map #(Character/digit % 10) (flatten (partition 1 (str (* a-digit b-digit)))))))", "user": "5ce36e02e4b0a17bb84e2b3e"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5cf62ecce4b087f62be35aa7"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 99, "code": "(fn [x y]\n  (mapv #(Integer/parseInt (str %)) (str (* x y))))", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 99, "code": "(fn [x y]\n  (map read-string (re-seq #\"\\d\" (str (* x y)))))", "user": "5c3f29d4e4b08cd430848e8f"}, {"problem": 99, "code": "#(loop [v () i (* %1 %2)] (if (< 0 i) (recur (conj v (mod i 10)) (quot i 10)) v))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 99, "code": "(fn [a b]\n  (loop [n (* a b)\n            res []]\n     (if (< 0 n)\n      (recur (/ (- n (mod n 10)) 10) (cons (mod n 10) res))\n      res)))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 99, "code": "(fn [a b]\n  (reduce\n    (fn [x y]\n      (conj x y))\n    []\n    (map (fn [n] (read-string (str n))) (str (* a b)))))", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 99, "code": "(fn [a b](mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 99, "code": "#((fn seq-prod-iter [x c]\n     (if (pos? x)\n       (seq-prod-iter (/ (- x (rem x 10)) 10)\n                      (conj c (rem x 10)))\n       (reverse c)))\n   (* % %2) [])", "user": "5d06499ae4b0cc9c915881ec"}, {"problem": 99, "code": "(fn product-digits [x y]\n  (map #(Character/getNumericValue %) (vec (str (* x y)))))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 99, "code": "#(->> (* %1 %2)\n     (str)\n     (seq)\n     (map int)\n     (map (fn [x] (- x (int \\0))))\n     )\n;(fn [x y] (loop [m (* x y) res '()] (if (= m 0) res (let [r (rem m 10)] (recur (quot m 10) (conj res r))))))", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 99, "code": "#((comp (partial map (fn [x] (- (int x) 48))) str) (* %1 %2))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) 48)) (vec (str (* %1 %2))))", "user": "5d0815b3e4b0cc9c91588201"}, {"problem": 99, "code": "(fn f [x y]\n  (map (fn [c] (- (int c) 48)) (str (* x y))))", "user": "5012da69e4b0c8732600222d"}, {"problem": 99, "code": "(fn digits [x y]\n  (if (pos? (* x y))\n    (conj (digits 1 (quot (* x y) 10)) (mod (* x y) 10))\n    []))", "user": "5d1a1082e4b0902706380e0e"}, {"problem": 99, "code": "(fn digseq [x y]\n        (letfn [(d [q acc]\n                  (if (= 0 q)\n                    acc\n                    (d (quot q 10) (conj acc (rem q 10)))))]\n          (vec (reverse (d (* x y) [])))))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 99, "code": "(fn\n  [n1 n2]\n  (->> (* n1 n2)\n       str\n       vec\n       (map str)\n       (map read-string)))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 99, "code": "(fn [x y]\n  (let [prod (* x y)]\n    (reverse\n     (loop [r []\n            n prod]\n       (if (zero? n)\n         r\n         (recur (conj r (mod n 10)) (quot n 10)))))))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5d1b59abe4b02ea6f0fb697e"}, {"problem": 99, "code": "(fn [x y]\n  (let [answer (* x y)]\n    (for [c (str answer)]\n      (Character/digit c 10))))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      (str)\n      (map int)\n      (map (partial + (- (int \\0)))))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 99, "code": "#(->> (* %1 %2)\n       (str)\n       (seq)\n       (map str)\n       (map (fn [x] (Integer/parseInt x))))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 99, "code": "(fn \n  [x y]\n  (let [number (* x y)]\n    (loop [cmod 10\n           remainder 0\n           coll '()]\n      (if (= number (mod number (/ cmod 10)))\n        coll\n        (recur (* cmod 10) \n               (mod number cmod)\n               (conj coll (/ (- (mod number cmod) remainder) (/ cmod 10))))))))", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Long. (str %1)) (.toString (* a b))))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 99, "code": "#(loop [x (* %1 %2) acc []] (if (> x 0) (recur (int (/ x 10)) (conj acc (mod x 10))) (reverse acc)))", "user": "5d13f783e4b0902706380dc1"}, {"problem": 99, "code": "(fn [a b]\n  ((fn digits [n] \n  \t (if (> n 10)\n       (conj (digits (quot n 10)) (rem n 10))\n   \t   [n]))\n   (* a b)))", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 99, "code": "#((fn digits [n]  \n   (when (pos? n)\n      (concat (digits (quot n 10))\n            [(mod n 10)]))) (* %1 %2))", "user": "5d2ca236e4b01671435dbc94"}, {"problem": 99, "code": "(fn [a b] (map (fn [i] (- (int i) (int \\0))) (str (* a b))))", "user": "5d0e9931e4b0cc9c91588258"}, {"problem": 99, "code": "(fn prod-dig [a b]\n   (map #( Character/digit % 10) (str (* a b))))", "user": "5cfabf53e4b0cc9c91588148"}, {"problem": 99, "code": "(fn prod-dig [a b]\n  (map #( Character/digit % 10) (str (* a b))))", "user": "5d1cf523e4b02ea6f0fb6994"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str\n      seq\n      (map str)\n      (map read-string))", "user": "57262710e4b0c5bde472c120"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str\n      seq\n      (map (comp read-string str)))", "user": "5d138119e4b0902706380dbb"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 99, "code": "(fn [& args]\n  (let [product (apply * args)]\n    (loop [digits '() x product]\n      (if (= 0 x) digits\n        (recur (conj digits (mod x 10)) (quot x 10))))))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5d370811e4b01671435dbd2d"}, {"problem": 99, "code": "(fn [x y]\n  (loop [in (* x y) out '()]\n    (if (< in 10)\n      (conj out in)\n      (recur (quot in 10) (conj out (rem in 10))))))", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 99, "code": "(fn[n1 n2] (map #(Character/digit % 10) (str (* n1 n2)) ))", "user": "5cf53196e4b087f62be35a94"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       (iterate #(quot % 10))\n       (take-while pos?)\n       (mapv #(mod % 10))\n       rseq))", "user": "5d465adae4b07c84aa5ae6a9"}, {"problem": 99, "code": "(fn [a b] (->> (* a b)\n      (str)\n      (map int)\n      (map #(- % 48))\n))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 99, "code": "(fn [a b] (vec (map #(Integer/parseInt (str %)) (str (* a b)))))", "user": "5cb41c40e4b026601754b911"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 99, "code": "(fn [& nums]\n  (->> (reduce * nums)\n     (str)\n     (apply vector)\n     (map #(- (int %) (int \\0)))))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 99, "code": "(fn [a b] (mapv #(Character/digit % 10) (str (* a b))))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 99, "code": "(fn [n1 n2]\n  (loop [lst () num (* n1 n2)]\n    (if (<= num 10)\n      (conj lst num)\n      (recur\n        (conj lst (mod num 10))\n        (quot num 10)))))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 99, "code": "(fn [a b] \n  (into []\n  (for [X\n    (into []\n      (str (apply * [a b] )) \n    )\n   ]\n   (* 1 (read-string (str \"\" X)))\n  )\n  )\n )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 99, "code": "(fn [a b]\n  (let [r (* a b)]\n    (->> r\n         str\n         seq\n         (map #(Character/digit % 10)))))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/getNumericValue %) (str (* a b))))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (seq (str (* x y)))))", "user": "5d40442ee4b05dd059a54362"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 99, "code": "(fn f\n  ([x]\n   (let [q (quot x 10)\n         m (mod x 10)]\n     (if (zero? q) [m] (conj (f q) m))))\n  ([x y]\n   (f (* x y))))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 99, "code": "#(map (comp read-string str) (seq (str (* %1 %2))))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 99, "code": "(fn [a b] (\n             map\n             #(Integer/parseInt (str %))\n             (vec (str (* a b)))\n\n             ))", "user": "5bdc4a76e4b0ed4b8aab4c30"}, {"problem": 99, "code": "(fn get-digits\n  ([x y] (get-digits (* x y) '() :a))\n  ([numb ls dummy] \n   (let [digit (rem numb 10)]\n     (if (= numb 0)\n       ls\n       (get-digits (quot numb 10) (conj ls digit) :a)))))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 99, "code": "(fn \n  [a b]\n  (map #(Integer/parseInt (str %)) (vec (str (* a b)))))", "user": "5d5502cbe4b02ba5928a680b"}, {"problem": 99, "code": ";(fn [n1 n2]\n;   (let [res (str (* n1 n2))]\n;     (reduce #(conj %1 (Integer. (str %2))) [] res)))\n\n#(->> %&\n      (apply *)\n      str\n      seq\n      (map str)\n      (map read-string))", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 99, "code": "(fn proddigit [a b]\n  (->> (* a b)\n       (str)\n       (seq)\n       (map (comp read-string str))))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 99, "code": "(fn [a b]\n                   (map \n                    #(Character/digit % 10) \n                    (seq (str (* a b)))))", "user": "5d4df658e4b0776584bd6f41"}, {"problem": 99, "code": "(fn [a b] \n  (->> a\n       (* b)\n       str\n       seq\n       (map #(Integer. (str %)))))", "user": "5c58736be4b01df32ab73247"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "5d6042f2e4b0c9e5857d5006"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (vec (str (* x y)))))", "user": "5d2c779be4b01671435dbc8d"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y)   \n         res '()]\n    (let [quotient (-> (/ n 10)\n                       (Math/floor)\n                       (int))\n         remainder (rem n 10)]\n      (if (== 0 quotient)\n        (conj res remainder)\n        (recur quotient\n               (conj res remainder))\n      )\n    )\n  )\n)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 99, "code": "#(map (fn [x] (Character/digit x 10)) (seq (str (* % %2))))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 99, "code": "(fn [n1 n2]\n  (let [m (* n1 n2)]\n    (loop [res (list)\n           digits m]\n      (if (= digits 0)\n        res\n        (recur (conj res (mod digits 10)) (quot digits 10))))))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 99, "code": "(fn [a b]\n  (let [sum (str (* a b))\n        offset (int \\0)]\n    (reduce #(conj %1 (- (int %2) offset)) [] sum)))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 99, "code": "(fn [a b]\n  (loop [s ()\n         n (* a b)]\n    (if (zero? n)\n      (vec s)\n      (recur (conj s (rem n 10)) (quot n 10)))))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 99, "code": "(fn [m n]\n  (loop [p (* m n)\n         result (list)]\n    (if (and (> p -10) (< p 10))\n      (-> result (conj p) vec)\n      (let [q (quot p 10)\n            r (rem p 10)]\n        (recur q\n               (conj result r))))))", "user": "5b333626e4b025bcb146f32f"}, {"problem": 99, "code": "(fn [a b] (vec (map #(Character/digit % 10) (seq (str (* a b))))))", "user": "5372e7d9e4b06d7f452d9e02"}, {"problem": 99, "code": "(fn [x y] (->> x (* y) str (map (comp read-string str))))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (vec (str (* x y)))))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 99, "code": "(fn mul-spread [a b]\n  (letfn [(digits-base-10 [N]\n            (if (= N 0)\n              [0]\n              (loop [pool N spread ()]\n                (if (> pool 0)\n                  (recur (quot pool 10)\n                         (conj spread (mod pool 10)))\n                  (vec spread)\n                  ))))]\n    (digits-base-10 (* a b))))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 99, "code": "(fn [x y] (for [l (str (* x y))] (Integer. (str l))))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 99, "code": "(fn prod-dig\n   [n1 n2]\n  (->> (* n1 n2) str (map (comp read-string str))))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 99, "code": "(fn product-digit\n  [n1 n2]\n  (map read-string (re-seq #\"\\d\" (str (* n1 n2)))))", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 99, "code": "(fn [a b]\n  (let [prod (* a b)\n        len (count (str prod))]\n    (map #(rem % 10) (reverse (take len (iterate #(quot % 10) prod))))))", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 99, "code": "(fn [n1 n2] \n  (loop [x (* n1 n2) digitseq []]\n  (if (zero? x)\n    digitseq\n    (recur (quot x 10) (cons (mod x 10) digitseq)))))", "user": "5d1609f9e4b0902706380dd9"}, {"problem": 99, "code": "#(map (fn [x] (Integer/valueOf (str x))) (str (* %1 %2)))", "user": "59ef5280e4b0966464fe6a2b"}, {"problem": 99, "code": "(fn mul\n  [x y]\n  (map read-string (map str (vec (str (* x y))))))", "user": "5d6febe6e4b04d129b00f2d5"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "user": "5d1b2b7de4b02ea6f0fb697a"}, {"problem": 99, "code": "(fn [m n] (mapv #(Integer/parseInt (str %)) (seq (str (* m n)))))", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 99, "code": "(fn [x y] (loop [out [] qu (* x y)] (if (< qu 10) (cons qu out) (recur (cons (rem qu 10) out) (quot qu 10)))))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 99, "code": "(fn [& args]\n  (map (comp read-string str)\n       (str (apply * args))))", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 99, "code": "(comp (partial map #(Integer/parseInt (str %))) str *)", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 99, "code": "#(for [n (str (* % %2))]\n  (- (int n) 48))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 99, "code": "(fn\n\t[num1 num2]\n\t(let [numeros (seq (str (* num1 num2)))]\n\t\t(map #(Integer/parseInt (str %)) numeros)))", "user": "5d797deee4b02e6b30c93541"}, {"problem": 99, "code": "(fn [a b]\n   (map #(Character/digit % 10) (seq (str (* a b)))))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 99, "code": "(fn [x1 x2] (map (fn [x] (Integer/valueOf (str x))) (str (* x1 x2))))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 99, "code": "(fn [x y] (map (comp #(Integer/parseInt %) str) (seq (str (* x y)))))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit %1 10) (str (* a b))))", "user": "4ec6297b535d6d7199dd36c4"}, {"problem": 99, "code": ";#(->> %& (apply *) str seq (map int) (apply vector))\n#(->> %& \n      (apply *) \n      ((fn digits [v num ] \n         (if (< num 10) \n           (reverse (conj v num))\n           (digits (conj v (rem num 10)) (int (/ num 10)) ))) \n       []) \n)", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 99, "code": "(fn [a b]\n  (map\n   #(Character/digit % 10)\n   (str (* a b))))", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 99, "code": "(fn [a b]\n  (loop [n (* a b) ret []]\n    (if (< n 10)\n      (cons n ret)\n      (recur (quot n 10) (cons (rem n 10) ret)))))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 99, "code": "#(loop [x (* %1 %2) a []] \n  (let [r (mod x 10) u (cons r a) d (quot x 10)]\n    (if (< x 10) u (recur d u))))", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 99, "code": "(fn product-digits\n  ([arg1 arg2]\n   (product-digits (str (* arg1 arg2)) [] []))\n  ([arg result trash]\n   (if (empty? arg)\n     result\n     (product-digits (rest arg) (conj result (Integer/parseInt (str (first arg)))) trash))))", "user": "5d896a64e4b0915913b1d3b8"}, {"problem": 99, "code": "(fn multidig \n  [a b]\n  (loop [n (str (* a b))\n             result []]\n        (if (empty? n)\n          result\n          (recur (rest n) (conj result (Character/digit (first n) 10))))))", "user": "5cb11a72e4b026601754b8c6"}, {"problem": 99, "code": "#((fn digits [n]\n            (if (pos? n)\n              (conj (digits (quot n 10)) (mod n 10) )\n              [])\n             ) (* %1 %2))", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 99, "code": "(fn product-digit [left right]\n  (let [result (* left right)]\n    (loop [remaining result\n           digits []]\n      (if (= remaining 0)\n        (reverse digits)\n        (recur (quot remaining 10) (conj digits (mod remaining 10)))))))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 99, "code": "(fn product-digits [x y]\n  (letfn [(get-digits [value]\n            (let [next-value (quot value 10)\n                  next-digit (mod value 10)]\n              (if (zero? next-value)\n                (list (mod value 10))\n                (cons next-digit (get-digits next-value)))))]\n    (reverse (get-digits (* x y)))))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt %)\n       (map str (vec (str (* a b))))))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 99, "code": "(fn [x y]\n  (reduce\n    #(conj % (read-string (str %2)))\n    []\n    (str (* x y))\n  )\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 99, "code": ";; might be interesting to also try a string based approach\n(fn [a b]\n   (loop [acc '()\n          n (* a b)]\n     (if (zero? n)\n       acc\n       (recur (conj acc (mod n 10)) (quot n 10)))))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 99, "code": "(fn [a b]\n  (loop [digit-list '()\n         number (* a b)]\n    (let [last-digit (mod number 10)\n          remaining (- number (mod number 10))]\n      (if (= 0 remaining)\n        (conj digit-list (mod number 10))\n        (recur\n          (conj digit-list (mod number 10))\n          (/ remaining 10))))))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 99, "code": "(fn [a b] (map #(read-string (str %)) (str (* a b))))", "user": "5dab11cde4b000c986472c45"}, {"problem": 99, "code": "#(map {\"0\" 0 \"1\" 1 \"2\"  2 \"3\" 3 \"4\" 4 \"5\" 5 \"6\" 6 \"7\" 7 \"8\" 8 \"9\" 9}  (re-seq #\"\\d\" (str (* %1 %2))  )     )", "user": "5da98129e4b000c986472c33"}, {"problem": 99, "code": "(fn\n  [n1 n2]\n  (map #(Integer/parseInt (str %)) (str (* n1 n2))))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 99, "code": "(fn my-product-digits\n  [x y]\n  (->> (* x y) str (map (comp read-string str))))", "user": "5d9c8a85e4b0eb781811cdad"}, {"problem": 99, "code": "#(->> (* %1 %2) str (map int) (map (partial + -48)) vec)", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 99, "code": "(fn[a b](map #(Character/digit % 10)(map #(get (str (* a b)) %)(range (count (str (* a b)))))))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 99, "code": "(fn [num1 num2]\n   (loop [op_vec [] \n          num (* num1 num2)]\n\n     (if (> num 0)\n       (recur (into op_vec [(rem num 10)]) (int (/ num 10.0)))\n       (reverse op_vec)\n      )  \n     )\n   )", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 99, "code": "(comp (partial map #(Character/digit % 10)) str *)", "user": "5da8b8ece4b000c986472c28"}, {"problem": 99, "code": "(fn prod-dig [num1 num2]\n  (loop [coll '() num (* num1 num2) ]\n    (if (zero? (quot num 10))\n      (conj coll (mod num 10))\n      (recur\n        (conj coll (mod num 10))\n        (quot num 10)))))", "user": "5dba063ee4b010eb3c36cd5c"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (seq (str (* x y)))))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 99, "code": "#(let [n (* % %2)]\n   (loop [ n n re []]\n     (if\n       (= n 0) (reverse re)\n       (recur (int (/ n 10)) (conj re (rem n 10))))))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 99, "code": "#(vec (map (fn [x] (Character/digit x 10)) (seq (str (* %1 %2)))))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 99, "code": "(fn [x y] \n  (map #(Character/digit % 10) (str (* x y))))", "user": "5db19599e4b010eb3c36cd05"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 99, "code": "#(reverse (loop [a (* % %2) res []]\n            (if (zero? a)\n              res\n              (recur (quot a 10)\n                     (conj res (mod a 10))))))", "user": "5dcc0ee9e4b02b31cc3da3c2"}, {"problem": 99, "code": "(fn [& r] ((fn [s x] (if (zero? x) s (recur (cons (rem x 10) s) (quot x 10)))) '() (apply * r)))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 99, "code": "(fn prod_digits [a b]\n    (let [t (* a b) n (inc (if (zero? t) 0 (int (Math/floor (Math/log10 t)))))]\n        (->> t\n            (iterate #(quot % 10))\n            (take n)\n            (map #(mod % 10))\n            (reverse)\n        )\n    )\n)", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       (str)\n       (vec)\n       (map #(Integer/parseInt (str %)))))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "5dc318cde4b02f700ae81835"}, {"problem": 99, "code": "(fn [a b]\n   (let [n (* a b)]\n     (->> n\n          (iterate #(quot % 10))\n          (take-while pos?)\n          (map #(mod % 10))\n          reverse)))", "user": "5dc9c4f2e4b02f9375f4e1f0"}, {"problem": 99, "code": "(fn [n1 n2]\n     (mapv #(Integer/valueOf %)\n          (re-seq #\"\\d\" (String/valueOf (* n1 n2))))\n     )", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 99, "code": "(comp\n  (fn [v]\n    (map #(Character/digit % 10) v))\n  str *)", "user": "4fbb7010e4b081705acca2e7"}, {"problem": 99, "code": "(fn [x y]\n  (mapv (comp read-string str) (seq (str (* x y)))))", "user": "5da306a3e4b000c986472be7"}, {"problem": 99, "code": "#(map read-string (re-seq #\"\\w\" (str (* %1 %2))))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 99, "code": "(fn [x y]\n  (reduce \n   (fn [coll letter]\n     (conj coll (- (int letter) 48)))\n   []\n   (str (* x y))))", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 99, "code": "(fn prod-digits [a b]\n  (let [prod (* a b)]\n    (if (= prod 0)\n      (vector 0)\n                   (loop [curr prod\n                          res '()]\n                     (if (= 0 curr)\n                       res\n                       (recur (int (/ curr 10)) (conj res (mod curr 10))))\n                     )\n                   )\n    ))", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 99, "code": "(fn [x y]\n  (map #(read-string (str %))\n       (str (* x y))))", "user": "59b0e877e4b0e1f4e384c8d3"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt %) (map str (seq (str (* a b))))))", "user": "5078dedae4b08327cd804a5d"}, {"problem": 99, "code": "(fn [x y]\n  (let [prod (* x y)]\n    (->> (seq (str prod))\n         (map str)\n         (map read-string))))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 99, "code": "(fn  [x y] (loop [num (* x y) res []]\n                     (if (= 0 (quot num 10))\n                       (cons (rem num 10) res)\n                       (recur (quot num 10) (cons (rem num 10) res)))))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 99, "code": "(fn [a b]\n                  (->> (* a b)\n                       (str)\n                       (mapcat list)\n                       (map str)\n                       (map read-string)))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 99, "code": "(fn [n1 n2]\n  (loop [number (* n1 n2) digits '()]\n   (if (= number 0)\n     digits\n     (recur (int (/ number 10)) (conj digits (rem number 10)))\n    ) \n   )\n)", "user": "5de6484ce4b0986d99407f66"}, {"problem": 99, "code": "(fn [a b] (map #(. Integer parseInt (str %)) (seq (str (* a b)))))", "user": "58273e82e4b051871117bf1b"}, {"problem": 99, "code": "(fn [x y] ((fn digits [ds] (if (pos? ds ) (conj (digits (quot ds 10)) (mod ds 10)) [])) (* x y)))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 99, "code": "(fn product-digits\n  [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 99, "code": "(fn [a b] (mapv read-string (re-seq #\"\\d\"(str (* a b)))))", "user": "5ce5b43be4b0a17bb84e2b7a"}, {"problem": 99, "code": "(fn [num1 num2] (map (fn [somenum] (. Integer parseInt (str somenum))) (str (* num1 num2)))\n  )", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 99, "code": "#(->> %&\n       (reduce *)\n       str\n       (map int)\n       (map (fn [x] (- x 48))))", "user": "5c30da5ae4b0d62ef62d9f23"}, {"problem": 99, "code": "#(->> (* %1 %2)\n       str\n       (map (fn [x] (read-string (str x)))))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 99, "code": "(fn [a b]\n    (map\n      #(Integer/parseInt %)\n      (map\n        #(String/valueOf %)\n        (str\n          (* a b)))))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 99, "code": "#(map (fn [c] (Character/digit c 10)) (str (* %1 %2)))", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 99, "code": "#(map read-string (map str (seq (str (apply * %&)))))", "user": "5dfc457de4b0a607a9a45cea"}, {"problem": 99, "code": "#(->> (* %1 %2) str (map (fn [c] (Integer. (str c)))))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 99, "code": "(fn product-digits [val1 val2] (map #(Long/parseLong (Character/toString %)) (Long/toString (* val1 val2))))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 99, "code": "(fn [a b]\n   ((fn dfs [c d]\n      (if (zero? c)\n        d\n        (recur (quot c 10) (cons (mod c 10) d ))))  (* a b) []) )", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 99, "code": "(fn [a b] \n   ( loop [n (* a b) res [ ]] \n     (if (zero? n ) \n       (vec (reverse res)) \n       (recur (quot n 10) (conj res (rem n 10 ) ) ) )) )", "user": "5ddbd202e4b0948ae9d9adb4"}, {"problem": 99, "code": "(fn [n1 n2] (map #(Character/digit % 10) (str (* n1 n2))))", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 99, "code": "(fn p-99 [a b]\n  \n  (let [chopper (fn chopper [a]\n    (let [dig (mod a 10)\n          next (quot a 10)]\n      (if (= next 0) [dig] (conj  (chopper next) dig))))]\n    (chopper (* a b))))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 99, "code": "(fn [x y]\n  (let [prod (* x y)]\n    (reverse (loop [a prod\n                    result []]\n               (if (zero? a)\n                 result\n                 (recur (quot a 10)\n                        (conj result (mod a 10))))))))", "user": "5c38422ae4b0d62ef62d9f7f"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 99, "code": "(fn mul-to-seq [x y]\n     (map read-string\n      (map str\n       (seq\n        (str (* x y))))\n     ))", "user": "5e0cbc14e4b099d064962f8e"}, {"problem": 99, "code": "(fn [a b] \n  (keep #(when-not (empty? %) \n           (read-string %)) \n        (clojure.string/split (str (* a b)) #\"\")))", "user": "5e0ceca5e4b099d064962f91"}, {"problem": 99, "code": "(fn [n1 n2] (map #(Character/digit % 10) (str (* n1 n2))))", "user": "5c337305e4b0d62ef62d9f48"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       str\n       (map #(- (int %) (int \\0)))))", "user": "514992d2e4b0b64cbeae1848"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "user": "5e144bd5e4b0a047bd49f6e7"}, {"problem": 99, "code": "(fn \n  [a b]\n  (into [] (reverse\n    ((fn dig-seq\n     [n]\n     (if (> n 0)\n      (cons (mod n 10) (dig-seq (quot n 10)))\n      [])) (* a b)))))", "user": "5e16006be4b0a047bd49f711"}, {"problem": 99, "code": "(fn [a b]\n   (rseq (mapv #(mod % 10) (take-while pos? (iterate #(quot % 10) (* a b))))))", "user": "5073e7fde4b054001656accb"}, {"problem": 99, "code": "(fn [x y]\n  (loop [res (* x y)\n         ans ()]\n    (if (<= res 0)\n      ans\n      (recur (quot res 10) (conj ans (mod res 10))))))", "user": "5e07cf97e4b0978307768fb9"}, {"problem": 99, "code": "(fn parent [x y]\n  (letfn [(list-digits [n]\n    (if (< n 10)\n      [n]\n      (cons (mod n 10) (list-digits (quot n 10)))))]\n      \n      (vec (reverse (list-digits (* x y))))))", "user": "5e18c885e4b0dc95940084fc"}, {"problem": 99, "code": "(fn [f s] \n  (map #(Integer. %) (map str (flatten (partition-by identity (str (* f s)))))))", "user": "5e1a3989e4b0dc9594008511"}, {"problem": 99, "code": "(fn [a b]\n    (ffirst\n     (drop-while\n      (comp pos? second)\n      (iterate (fn [[digits x]] [(cons (rem x 10) digits) (quot x 10)]) [[] (* a b)]))))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 99, "code": "(fn [a b]  (map #(Integer/valueOf (str %)) (sequence (str (* a b)))))", "user": "5dbb5200e4b09f47823971a9"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) str seq (map #(- (int %) 48))))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 99, "code": "(fn [n1 n2]\n   (map #(Character/digit % 10) (seq (str (* n1 n2)))))", "user": "5e16fd78e4b0a047bd49f726"}, {"problem": 99, "code": "(fn [x y]\n   (->> (* x y)\n       str\n       seq \n        (map #(Character/digit % 10)))\n   )", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 99, "code": "(fn [x y] (map #(Character/getNumericValue %) (seq (str (* x y)))))", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 99, "code": "(fn [x y]\n           (map (comp read-string str) (str (* x y))))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 99, "code": "#(map read-string (filter not-empty (-> (* %1 %2) str (clojure.string/split #\"\"))))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/digit % 10) (str (* a b))))", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5e257a33e4b05b4b01516166"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str \n      seq\n      (map (fn [x] (Integer. (str x)))))", "user": "5e22e4c5e4b05b4b01516137"}, {"problem": 99, "code": "(fn [a b] (map #(Integer. (str %)) (str (* a b))))", "user": "5d7a748ce4b02e6b30c93547"}, {"problem": 99, "code": "(fn prod [a b] (vec (map #(Integer. %) (vec (map #(str %) (vec (str (* a b))))))))", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 99, "code": "(fn\n  [a b]\n  (loop [inp (* a b) out []]\n    (if (= inp 0)\n      (vec (reverse out))\n      (recur (quot inp 10) (conj out (rem inp 10))))))", "user": "5e394c33e4b01d43a70e8dd1"}, {"problem": 99, "code": "(fn [x y] (vec (map #(. Integer parseInt (. String valueOf %)) (str (* x y)))))", "user": "58f3c18ee4b0438e51c2cead"}, {"problem": 99, "code": "(fn [x y]\n  (let [sum (* x y)]\n    (map #(- (int %) 48) (vec (char-array (str sum))))))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str\n      seq\n      (map str)\n      (map read-string))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 99, "code": "(fn prod-dig [n1 n2]\n  (loop [n (* n1 n2) acc ()]\n    (if (= n 0) acc\n        (recur (quot n 10) (conj acc (mod n 10))))))", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 99, "code": "(fn [n1 n2]\n   (loop [m1 (* n1 n2)\n          res []]\n     (let [d (quot m1 10)\n           m (rem m1 10)\n           res' (cons m res)]\n       (if (= 0 d) res' (recur d res')))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 99, "code": "#(map (comp read-string str) (seq (str (* %1 %2))))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 99, "code": "(comp (partial mapv #(- (int %) 48)) \n      str\n      *)", "user": "5d929ceae4b0915913b1d412"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 99, "code": "(fn [x y]\n  (loop [p (* x y) r []]\n    (if (zero? p)\n      r\n      (recur (int (/ p 10)) (cons (rem p 10) r)))))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n     (iterate #(quot % 10))\n     (take-while pos?)\n     (mapv #(mod % 10))\n     (rseq))\n  )", "user": "5e491182e4b043cd24807a46"}, {"problem": 99, "code": "(fn [n1 n2]\n  (->> (* n1 n2)\n       (str)\n       (map #(- (int %) (int \\0)))))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 99, "code": "(fn [x y]\n  (vec (map #(Character/digit % 10) (str (* x y)))))", "user": "5d6eaa58e4b04d129b00f2cd"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt %) (map str (into [] (str (* x y))))))", "user": "5da975b9e4b000c986472c32"}, {"problem": 99, "code": "(fn [n m]\n  (loop [n (* n m) res []]\n    (if (zero? n)\n      res\n      (recur (quot n 10) (cons (mod n 10) res)))))", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 99, "code": "(fn [x y]\n    (map #(Character/digit % 10) (seq (str (* x y))))\n  )", "user": "5e2586afe4b05b4b01516167"}, {"problem": 99, "code": "(fn product-digits [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5d078e2de4b0cc9c915881fa"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) str (map str) (map #(Integer. %))))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 99, "code": "(fn [x y]\n  (let [result (* x y)]\n    (->> result\n     \t(iterate #(quot % 10))\n        (take-while pos?)\n        (mapv #(mod % 10))\n        rseq)))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 99, "code": "#(loop [x (* %1 %2) s '()] \n    (if (< x 10) \n      (conj s x) \n      (recur (quot x 10) (conj s (rem x 10)))))", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 99, "code": "(fn [n m]\n  (->> (* n m)\n       str\n       (map #(Integer/parseInt (str %1)))\n            \n       )\n  )", "user": "5e41a67be4b01d43a70e8e56"}, {"problem": 99, "code": "#(->> (str (* % %2))\n   seq\n   (map (comp read-string str)))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 99, "code": "(fn [x y]\n  (mapv #(Integer/parseInt (str %)) (str (* x y))))", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 99, "code": "#(into [] (map (comp read-string str) (str (* % %2))))", "user": "4f24c859e4b0d66497709fef"}, {"problem": 99, "code": "(fn product-digits\n  [n1 n2]\n  (let [product (* n1 n2)]\n    (map #(Character/getNumericValue %) (str product))))", "user": "5e4e3c31e4b027a2e10ac0ad"}, {"problem": 99, "code": "(fn [a b] (mapv #(- (int %) 48) (str (* a b))))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 99, "code": "(fn [x y]\n    (let [prod (* x y)\n          step-pair (fn [[n m]] [(/  (- n (mod n 10)) 10) (mod n 10) ])\n            len  (inc (count (str prod)))                ] \n      (map second \n           (reverse (rest  (take len\n                                 (iterate step-pair [prod 0] ) ))))))", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 99, "code": "(fn [x y]\n  (map #(read-string (str %))\n       (str (* x y))))", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) str (map (comp read-string str))))", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 99, "code": "(fn [x y]\n  (map read-string (map str (seq (str (* x y))))))", "user": "5e78e8d3e4b085ba37836dfd"}, {"problem": 99, "code": "(fn cdigits [x y]\n    (loop [val (* x y)\n           result '()]\n      (if (zero? val)\n        (vec result)\n        (recur (unchecked-divide-int val 10)\n               (conj result (unchecked-remainder-int val 10))))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 99, "code": "#(loop [v (* % %2), out '()]\n   (let [dig (mod v 10)\n         out (cons dig out)]\n     (if (= v dig)\n       out\n       (recur (quot v 10) out))))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "4eb70649535d7eef30807373"}, {"problem": 99, "code": "(fn [x y] (into [] (map #(Character/digit % 10) (take-while identity (str (* x y))))))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 99, "code": "#(->> (* %1 %2) ;98901\n       (iterate (fn [x] (quot x 10))) ;[98901 9890 989 98 9 0]\n       (take-while pos?) ;#object\n       (mapv (fn [x] (mod x 10))) ; [1 0 9 8 9]]\n       rseq) ; [9 8 9 0 1]", "user": "5e13a6b7e4b099d064963001"}, {"problem": 99, "code": "(fn [n1 n2]\n  (loop [x (* n1 n2) arr []]\n    (if (= x 0)\n      arr\n      (recur (int (/ x 10)) (cons (rem x 10) arr)))))", "user": "5e7f62cce4b085ba37836e3b"}, {"problem": 99, "code": "(fn func [a b]\n  (reverse \n   ((fn get-digits [num]\n      (if (= 0 num)\n        []\n        (cons (rem num 10) (get-digits (quot num 10))))) (* a b))))", "user": "5e805895e4b085ba37836e44"}, {"problem": 99, "code": "(fn\n  [a b]\n  (map (comp #(- % 48) int) (seq (str (* a b)))))", "user": "5e7dc2d8e4b085ba37836e2f"}, {"problem": 99, "code": "(fn [a b]\n  (vec (loop [num (* a b)\n              acc []]\n         (if (zero? num)\n           acc\n           (recur (int (/ num 10)) (cons (mod num 10) acc))))))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 99, "code": "#(for [c (str (* % %2))] (- (int c) 48))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 99, "code": "(fn [a b]\n  (loop [x (* a b) r '()]\n    (if (< x 1)\n      (into [] r)\n      (recur (quot x 10) (cons (rem x 10) r)))))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 99, "code": "#(->> %&\n       (apply *)\n       str\n       seq\n       (map str)\n       (map read-string))", "user": "5e62444fe4b0fd0acd158694"}, {"problem": 99, "code": "#(loop [product (* %1 %2) digits '()]\n   (if (= product 0)\n    (if (= (count digits) 0)\n      [0]\n      (apply vector digits)\n    )\n    (let [digit (rem product 10)]\n      (recur (/ (- product digit) 10) (conj digits digit))\n    )\n  ) \n)", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 99, "code": "(fn [a b]\n  (loop [result (list), n (* a b)]\n    (if (pos? n)\n      (recur (conj result (rem n 10))\n             (quot n 10))\n      result)))", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 99, "code": "(fn [a b]\n  (loop [n (* a b) digits []]\n    (if (< n 10)\n      (reverse (conj digits n))\n      (let [remainder (mod n 10)]\n        (recur (/ (- n remainder) 10) (conj digits remainder ))))))", "user": "5be9ad9be4b0f319e2d7ec76"}, {"problem": 99, "code": "(fn [a b]\n   (letfn [(digits [n acc]\n             (if (zero? n)\n               acc\n               (digits (quot n 10) (conj acc (mod n 10)))))]\n     (digits (* a b) ())))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 99, "code": "(fn [a b] (map #(read-string (str %)) (str (* a b))))", "user": "578d459ee4b0ebec4cfb7567"}, {"problem": 99, "code": "(fn [x y](loop [lst '() n (* x y)]\n           (if (zero? n) lst (recur (conj lst (mod n 10)) (int (/ n 10)) ))\n           ))", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 99, "code": "(fn product-digit \n  [a b]\n  (map #(Character/getNumericValue %) (str (* a b))))", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 99, "code": "(fn [& lst]\n  (->> (reduce * lst)\n       str \n       (map (comp read-string str)\n            )))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 99, "code": "(fn mul-seq [a b]\n  (letfn [(helper [n s]\n            (if (zero? n)\n              s\n              (helper (quot n 10) (cons (mod n 10) s))))]\n    (helper (* a b) '())))", "user": "5e9c11f8e4b0157ca96647f6"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 99, "code": "(fn productD\n  [n x]\n  (map #(-> % int (- 48))(seq (str (* n x)))))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 99, "code": "(fn [x y] (loop [product (* x y)\n                           result '()]\n                      (let [remainder (rem product 10)]\n                        (println product)\n                        (if (< product 10)\n                          (conj result product)\n                          (recur (quot product 10) (conj result remainder))))))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 99, "code": "(fn [a b] \n  (mapv #(Integer/parseInt (str %)) \n        (str (* a b))))", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 99, "code": "(fn [a b]\n  (loop [result '()\n         numb (* a b)]\n    (if (zero? numb)\n      result\n      (recur\n        (cons (mod numb 10) result)\n        (quot numb 10)))))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 99, "code": "#(\n  loop [x (* %1 %2), res []]\n  (if (> x 0) (recur (quot x 10) (conj res (mod x 10))) (reverse res))\n  )", "user": "5e85d0bde4b09a7a73c8bbd6"}, {"problem": 99, "code": "(fn product-digits [a b]\n   (loop [prod (* a b)\n          digits []]\n     (if (zero? prod)\n       (vec (reverse digits))\n       (recur (quot prod 10)\n              (conj digits (mod prod 10))))))", "user": "5e9878b9e4b0157ca96647d8"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5e950310e4b0fbed045a3802"}, {"problem": 99, "code": "(fn digits\n  [n m]\n  (map #(-> % int (- 48))(seq (str (* n m)))))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 99, "code": "(fn\n  [a b]\n  (let [result (* a b)]\n  (->> result\n       (str)\n       (seq)\n       (map str)\n       (map #(Integer/parseInt %)))))", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 99, "code": "(fn [n1 n2]\n  (loop [n (* n1 n2)\n         acc []]\n    (if (<= n 0)\n      (reverse acc)\n      (recur (int (/ n 10)) (conj acc (rem n 10))))))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (str (* a b))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (str (* a b))))", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 99, "code": "#(for [c (str (* %1 %2))]\n    (- (int c) 48))", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 99, "code": "#(->>\n    %&\n    (apply *)\n    str\n    (map (fn [n] (Integer/parseInt (str n)))))", "user": "5e67ab18e4b0e171e103368a"}, {"problem": 99, "code": "(fn [x y]\n  (let [n (* x y)]\n    (->> (str n)\n         seq\n         (map (comp read-string str))\n         vec)))", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 99, "code": "(fn [x y]\n   (->> (* x y) str seq (map #(Integer/parseInt (str %)))))", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 99, "code": "#(loop [x (* %1 %2) acc []] \n   (let [a (int (/ x 10))] \n     (if (> 1 x) acc (recur a (cons (rem x 10) acc)))))", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 99, "code": "(fn [x y]  (map #(read-string (str %)) (vec (str (*  x y)))))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 99, "code": "(fn [x y] (map #(Character/getNumericValue %) (str (* x y))))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 99, "code": "#(loop [product (* %1 %2)\n      digits []]\n  (if (= product 0)\n    digits\n    (recur (/ (- product (rem product 10)) 10)\n          (cons (rem product 10) digits))))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 99, "code": "(fn ok [num1 num2]\n  (let [m (* num1 num2)\n        start (int (Math/pow 10 (- (.length (.toString (* num1 num2))) 1)))\n        ]\n  (loop [x m\n        divisor start\n        sequ []]\n    (if (< divisor 2)\n      (conj sequ x)\n      (let [r (rem x divisor)\n            m (quot divisor 10)\n            ]\n      (recur r m (conj sequ (quot x divisor)))\n      ))\n    )\n  ))", "user": "5ebb4751e4b00a66d4a95262"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y) \n       str\n       (map (comp read-string str))))", "user": "5e3302ece4b0650de70e2b02"}, {"problem": 99, "code": "#(loop [result [], number (* %1 %2)]\n            (if (zero? number)\n              (reverse result)\n              (recur (conj result (mod number 10)) (int (/ number 10)))))", "user": "5ecf4ee4e4b016b56eae05a6"}, {"problem": 99, "code": "(fn f [a b] \n  (->> (* a b)\n       (str)\n       (seq)\n       (map #(read-string (str %)))\n  ))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 99, "code": "(fn [x y]\n  (let [pow (fn [b n] (reduce * 1 (repeat n b)))]\n    (loop [n (* x y)\n           exp (-> n Math/log10 int)\n           acc []]\n      (if (neg? exp)\n        acc\n        (let [p (pow 10 exp)\n              b (/ (- n (mod n p)) p)]\n          (recur (- n (* b p))\n                 (dec exp)\n                 (conj acc b)))))))", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 99, "code": "(fn\n  [x y]\n  (map #(Character/digit % 10) (str (* x y))))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 99, "code": "(fn [n1 n2] (map #(- (int %) 48) (str (* n1 n2))))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 99, "code": "(fn [x y]\n  (loop [result '() s (* x y)]\n    (if (zero? s)\n      result\n      (let [f (mod s 10)\n            s (quot s 10)]\n        (recur (cons f result) s)))))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 99, "code": "(fn [a b]\n (map #(Long/parseLong\n         (str %)) (str (* a b))))", "user": "5ebff55de4b00a66d4a95286"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str\n      (map (fn to-int [c]\n             (- (int c) 48))))", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 99, "code": "#(map read-string (re-seq #\".\" (str (* %1 %2))))", "user": "5ed03b7fe4b016b56eae05ae"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 99, "code": "#(->> (* %1 %2) str (map (comp read-string str)))", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 99, "code": "(fn [a b]\n   (loop [n (* a b) r '()]\n      (if (< n 10) (conj r n)\n          (recur (quot n 10) (conj r (mod n 10))))))", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) (str) (seq) (map int) (map #(- % 48))))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 99, "code": "(fn f\n  [x y]\n  (let [prod (seq (str (* x y)))]\n    (map #(Character/digit % 10) prod)))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "5eb6561fe4b00a66d4a95233"}, {"problem": 99, "code": "#(map (fn [c] (Character/digit c 10)) (seq (str (* % %2))))", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 99, "code": "(fn [d1 d2]\n  (mapv (comp read-string str) (str (* d1 d2))))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 99, "code": "(fn [a b]\n  (let [to-digits (fn [rem-num mid-res]\n                    (if (= 0 rem-num)\n                      mid-res\n                      (recur (quot rem-num 10) (conj mid-res (rem rem-num 10)))))\n        m (* a b)]\n    (if (= 0 m)\n      '(0)\n      (to-digits m nil))))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 99, "code": "(fn [x, y]\n    (let [z (* x y)]\n      (map #(- (int %) (int \\0)) (str z))\n      )\n    )", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 99, "code": "(fn [x y] (map read-string (map str (vec (str (* x y))))))", "user": "5df08767e4b093ff717275bf"}, {"problem": 99, "code": "(fn [x1 x2] \n  (map #(Integer/parseInt (str %)) (str (* x1 x2))))", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 99, "code": "(fn [a b]\n  (map #(- (int %) 48) (vec (str (* a b)))))", "user": "5e83a273e4b09a7a73c8bbbb"}, {"problem": 99, "code": "(fn mul [a b]\n      (\n        map #(Integer/parseInt (str %)) (str(* a b))\n        ) )", "user": "5eee9352e4b07c55ae4a0512"}, {"problem": 99, "code": "(fn [a b] (loop [digits '()\n                 r (* a b)]\n            (if (= r 0) \n              (if (empty? digits) [0] digits)\n              (recur (conj digits (mod r 10)) (quot r 10)))))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 99, "code": "(fn prod-digits [x y]\n  (map #(Integer/parseInt (str %1)) (str (* x y))))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (seq (str (* x y)))))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 99, "code": "(fn [x y] ((fn d [prod]\n                  (if (= (quot prod 10) 0)\n                    [prod]\n                    (into (d (quot prod 10)) [(mod prod 10)])))\n                (* x y)))", "user": "5ed875abe4b016b56eae05f2"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (.toString %)) (seq (str (* a b)))))", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 99, "code": "#(for [x (range (count (str (* %1 %2))))]\n (Integer/parseInt (str (get (str (* %1 %2)) x))))", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 99, "code": "#(for [x (seq (str (* %1 %2)))\n         :let [r (Character/getNumericValue x)]] r)", "user": "576aea4fe4b0a07e8fc18126"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n       (str)\n       (seq)\n       (map str)\n       (map (fn [x] (Integer/parseInt x)))\n       (vec)))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 99, "code": "(fn mseq [n1 n2]\n  (loop [res []\n         n   (* n1 n2)]\n    (if (= 0 (quot n 10))\n      (cons (mod n 10) res)\n      (recur (cons (mod n 10) res) (quot n 10)))))", "user": "5e909685e4b0cb016954634d"}, {"problem": 99, "code": "(fn sol99\n  [n1 n2]\n  (map #(Integer/parseInt (str %)) (str (* n1 n2))))", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 99, "code": "(comp (partial map #(- (int %) (int \\0)))\n      str\n      *)", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 99, "code": "(fn f [a b]\n  (->> (* a b) str (map (comp read-string str))))", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 99, "code": "(comp #(map {\\0 0 \\1 1 \\8 8 \\9 9} %) seq str *)", "user": "512700c4e4b083bb8f88cf14"}, {"problem": 99, "code": "(fn [x y]\n   (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 99, "code": "(comp (partial map #(- % 48)) (partial map int) str *)", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       (iterate #(quot % 10))\n       (take-while pos?)\n       (map #(mod % 10))\n       reverse\n       vec))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 99, "code": "(fn [x y]\n   (vec (map #(Character/digit % 10) (str (* x y))))\n   )", "user": "5f082d9ee4b0cf489e8d7f5c"}, {"problem": 99, "code": "(fn [x y]\n   (map #(Integer/parseInt %) (map str (seq (char-array (str (* x y)))))))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 99, "code": "(fn seq-mult [x y]\n   (map #(Integer/parseInt %) (map str (sequence (str (* x y))))))", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n       str\n       seq\n       (map #(- (int %) 48))))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "4eb97234535dfed6da9c6d53"}, {"problem": 99, "code": "(fn  [a b] (let [result (str (* a b))]\n             (map #(Integer/parseInt (str %)) result)))", "user": "5f1328dee4b091ba50b4dbb1"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* % %2)))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 99, "code": "(letfn [(dg [n d] (if (< n 1) d (dg (quot n 10) (cons (mod n 10) d) )))]\n  (fn [x y] (dg (* x y) [])))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) (int \\0)) (str (* x y))))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 99, "code": "(fn decomp [x y] (map (comp read-string str) (str (* x y))))", "user": "5509a23ee4b06e50f9beb11a"}, {"problem": 99, "code": "(fn [a b]\n          (map #(- (int %) 48)\n               (-> (* a b)\n                   str\n                   seq)))", "user": "4e617114535d8ccf87e9fe5b"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* %1 %2)))", "user": "5e9b6471e4b0157ca96647f0"}, {"problem": 99, "code": "(fn\n  [a b]\n  (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) (str) (seq) (map int) (map #(- % (int \\0)))))", "user": "5f1c7c3be4b0f565ad998261"}, {"problem": 99, "code": "(fn [& args] (->> args (apply *) str seq (map #(read-string (str %)))))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 99, "code": "(fn [x y]\n  (loop [value (* x y)\n         result []]\n    (if (zero? value)\n      result\n      (recur (quot value 10) (cons (mod value 10) result)))))", "user": "5cf8864be4b0b71b1d808a84"}, {"problem": 99, "code": "(fn prod [x y]\n  (->> (* x y)\n      (str)\n      (vec)\n      (map #(-> % str Integer/parseInt))))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 99, "code": "(fn [a b]\n  (let [number (* a b)]\n    (->> (str number)\n         (map (comp read-string str)))))", "user": "5f081f6de4b0cf489e8d7f5a"}, {"problem": 99, "code": "(fn bar [l m] ((fn foo [a]\n  (let [x (int (/ a 10))]\n  (if (not= x 0)\n  (conj (foo x) (mod a 10) )\n  [a]\n  )\n  )\n  ) (* l m)))", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (str (* a b))))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 99, "code": "(fn [i j]\n    (let [product (* i j)\n          prod-string (str product)\n          prod-seq (seq prod-string)]\n      (map #(- (int %) 48) prod-seq)))", "user": "51553ea7e4b06c5f6a1490a2"}, {"problem": 99, "code": "#( ->> (* %1 %2) \n        str \n        char-array \n        seq \n        (map(fn[x] (Character/getNumericValue x))))", "user": "5f0c3da4e4b0f30dddfb5d49"}, {"problem": 99, "code": "(fn product-digits [a b]\n  (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5f300f28e4b033932238a682"}, {"problem": 99, "code": "#(->> (* %1 %2)\n     (str)\n     (map str)\n     (map read-string))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 99, "code": "(fn [a b]\n   (let [number (* a b)]\n     (loop [n number\n            result '()]\n       (if (> n 10)\n         (recur (quot n 10) (conj result (rem n 10)))\n         (conj result n)))))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 99, "code": "#(loop [num (* % %2) res '()] (if (< num 1) res (recur (int (/ num 10)) (conj res (mod num 10)))))", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (seq (str (* a b)))))", "user": "5f3ddc71e4b004f08c61c551"}, {"problem": 99, "code": "; it drops exception:#(vec (for [x (clojure.string/split (str (* %1 %2)) #\"(?=[0-9])\")]  (Integer/parseInt x)))\n; stolen solutions\n;\t(fn [a b] (map #((zipmap \"0123456789\" (range)) %) (str (* a b))))\n;   (fn [a b] (->> (* a b) str (map #(Character/digit % 10))))\n(fn digits [a b]\n  (loop [mul (int(* a b))\n         res []]\n    (if (> mul 9)\n       (recur (quot mul 10) (cons (mod mul 10) res))\n       (cons mul res))\n    ))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "5f274aeee4b0857314092c92"}, {"problem": 99, "code": "(comp (partial map (comp read-string str)) str *)", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 99, "code": "#(map read-string (map str (seq (str (* %1 %2)))))", "user": "5f0c8b0de4b0f30dddfb5d4c"}, {"problem": 99, "code": "(fn [x y]\n(reduce \n  (fn [out part]\n    (conj out (Integer/parseInt part))) \n  []\n(map str (into [] (str (* x y))))))", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 99, "code": "(fn [a b] (into []\n                       (map (comp read-string str)\n                            (-> (* a b) str)\n)))", "user": "5f36dc06e4b0574c87022c4c"}, {"problem": 99, "code": "(fn [n1 n2]\n  (loop [mul (* n1 n2)\n         resu []]\n    (if (= mul 0)\n      resu\n      (recur (int (/ mul 10)) (cons (mod mul 10) resu)))))", "user": "535f0cbde4b04ce2eb3ed2d9"}, {"problem": 99, "code": "(fn [a b]\n  (let [x (* a b)]\n    (if (= 0 x)\n      [0]\n      (loop [x x v []]\n        (if (= 0 x)\n          v\n          (recur (quot x 10) (cons (mod x 10) v)))))))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 99, "code": "(fn [fac1 fac2]\n   (mapv\n    #(Integer/parseInt (str %))\n    (seq\n     (str\n      (* fac1 fac2)))))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 99, "code": "(fn product-digits\n  [x y]\n  (map read-string\n    (re-seq #\"\\d\"\n      (.toString (* x y)))))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 99, "code": "(fn [x y]\n   (map (fn [k] (- (int k) 48))(vec (str (* x y)))))", "user": "5df94f73e4b0a607a9a45cb6"}, {"problem": 99, "code": "(fn [n1 n2]\n  (let [prod (* n1 n2)]\n    (loop [n prod result []]\n      (if (= n 0)\n        result\n        (recur\n          (quot n 10) (concat [(rem n 10)] result)\n          )\n        )\n      )\n    )\n)", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 99, "code": "(fn [x n] (map #(Character/digit % 10) (str (* x n))))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 99, "code": "(fn [a b]\n         (for [x (clojure.string/split (str (* a b)) #\"\")\n               :when (not= (str x) \"\")]\n           (Integer/parseInt (str x))))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 99, "code": "(fn [m n] (map #(- % (int \\0)) (map int (str (* m n)))))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 99, "code": "(fn [x y]\n  (->> (* x y)\n   str\n     seq\n     (map str)\n     (map read-string)))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 99, "code": "(fn\n  [a b]\n  (map #(Integer/parseInt %) (map str (vec (seq (str (* a b))))))\n)", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 99, "code": "(fn f [x y]\n  (->> (* x y)\n       (str)\n       (seq)\n       (map #(read-string (str %)))))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 99, "code": "(fn \n  [a b]\n  (map #(Character/getNumericValue %) (str (* b a))))", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* %1 %2)))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* %1 %2)))", "user": "58c71509e4b021aa9917ed6e"}, {"problem": 99, "code": "(fn [a b] (map #(Integer. (str %)) ((comp vec str *) a b)))", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 99, "code": "(fn [a b]  (map #(read-string (str %) ) (seq (str (* a b))) ))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 99, "code": "(fn [& args]\n  (let [product (apply * args)]\n    (loop [cursor product\n           digits []]\n      (if (< cursor 10)\n        (reverse (conj digits cursor))\n        (recur (-> cursor (/ 10) int) (conj digits (rem cursor 10)))))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 99, "code": "(fn [a b] (->> (* a b) str (map (comp read-string str))))", "user": "563f0fdae4b08d4f616f5ece"}, {"problem": 99, "code": "(fn [x n] (mapv #(Integer/parseInt (str %)) (str (* x n))))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) str (mapv (fn [c] (- (int c) (int \\0))))))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 99, "code": "(fn product-digits\n  [x y]\n  (map #(read-string (str %))\n       (str (* x y))))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 99, "code": "#(map (comp read-string str) (str (* % %2)))", "user": "5f393bd6e4b0574c87022c76"}, {"problem": 99, "code": "#(for [ x (seq (str (* %1 %2)))]\n           (-  (int x)  48))", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 99, "code": "(fn [a b]\n    (into [] (map #(Character/digit % 10) (str (* a b)))))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 99, "code": "(fn [a b] \n  (map #(Character/digit % 10) \n       (str (* a b))))", "user": "573102bbe4b0cd1946bd0fbb"}, {"problem": 99, "code": "; https://stackoverflow.com/a/4714991/12936482\n(fn [val1 val2]\n    (map #(Integer/parseInt (str %)) (str(* val1 val2))))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 99, "code": "(fn[x y]\n  (map #(Character/getNumericValue %) (str (* x y))))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 99, "code": "(fn [x y]\n  (mapv #(Integer/parseInt\n    \t\t(str %)) (str (* x y))))", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 99, "code": "(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 99, "code": "(fn[a b] (->> \n              (str (* a b)) \n              (map (comp read-string str))))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 99, "code": "(fn [a b]\n  (drop-while zero? \n    (reverse \n      (map #(mod (int(/ (* a b) %)) 10)\n           (take 10 (iterate #(* 10 %) 1))))))", "user": "5f792d48e4b02876ed9fd0c5"}, {"problem": 99, "code": "(fn digit-separator [a b]\n  (let [n (* a b)]\n  (->> n str (map (comp read-string str)))))", "user": "5f84f110e4b0375e81f54e79"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 99, "code": "(fn [& args]\n  (->> (apply * args)\n       str\n       (map str)\n       (map #(Integer/parseInt %))))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 99, "code": "(fn [f f1]\n  \n  (mapv (fn [f2]\n         \n         (Integer/parseInt (str f2)))\n        \n        (str (* f f1)))\n  \n  \n  )", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 99, "code": "(fn\n  [x y]\n  (vec\n  \t(for [c (str (* x y))]\n    \t(Character/digit c 10))))", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 99, "code": "(fn [nu1 nu2]\n       (map #(Integer/parseInt (str %))(seq (str (* nu1 nu2)))))", "user": "5f737899e4b02876ed9fd099"}, {"problem": 99, "code": "(fn parse[a b]\n       ( map  (fn [x] (Integer/parseInt (str x)))  (seq ( str (* a b))))\n    )", "user": "5f8330b8e4b01aacbe7a270f"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y) )))", "user": "5f810e97e4b0c071e6c840ed"}, {"problem": 99, "code": "(fn [i j] (mapv #(Integer/parseInt (str %)) (str (* i j))))", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 99, "code": "(fn digs [i1 i2]\n  (loop [i (* i1 i2)\n         r '()]\n    (if (= i 0)\n      r\n      (recur (quot i 10) (conj r (rem i 10))))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 99, "code": "(fn product-digits [a b]\n  (let [res (* a b)]\n    ((fn f [num r]\n       (if (>= 0 num) r\n           (f (quot num 10) (conj r (mod num 10)))\n           )\n       )res '())\n    )\n  )", "user": "5f419985e4b0955706451fab"}, {"problem": 99, "code": "(fn mult [x y] ((fn digits [x] (map (comp read-string str) (seq (str x)))) (* x y)))", "user": "5c8cfff8e4b048ec896c5996"}, {"problem": 99, "code": "(fn [x y] (map #(- (int %) 48) (str (* x y))))", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 99, "code": "#((fn [x] (map read-string (map str (seq (str x))))) (* %1 %2))", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 99, "code": "(fn [a b]\n  (loop [rems []\n         n (* a b)]\n    (if (zero? n)\n      (reverse rems)\n      (recur (conj rems (mod n 10))\n             (quot n 10)))))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 99, "code": "(fn myfunc [a b]\n  (vec (map #(Integer/parseInt (str %)) (str (* a b)))))", "user": "5f8d76c3e4b0715f5002d758"}, {"problem": 99, "code": "(fn [a b] (vec (map #(- (int %) (int \\0)) (str (* a b)))))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 99, "code": "(fn [a b]\n                   (loop [x (* a b) acc '()]\n                   (let [m (mod x 10)\n                         q (quot x 10)]\n                     (if (zero? q)\n                       (conj acc m)\n                       (recur q (conj acc m))))))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 99, "code": "#(map (fn [x] (- (int x) (int \\0))) (seq (str (* % %2))))", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 99, "code": "#(map (comp read-string str) (seq (str (* % %2))))", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 99, "code": "(fn [x y] \n  (loop [i (* x y) acc []]\n    (if (zero? i) \n      acc\n      (recur (quot i 10) (cons (mod i 10) acc)))))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 99, "code": "(fn dig [a b] (map #(read-string (str %)) (str (* a b))))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 99, "code": "#(->> %&\n      (apply *)\n      str\n      (map str)\n      (map read-string))", "user": "5f331015e4b0574c87022c37"}, {"problem": 99, "code": "(fn prod\n    ([n] [n])\n    ([n & ns']\n        (let [\n            h (reduce * n ns')\n            fx (fn fx [x]\n                (if-not (zero? x)\n                    (conj (fx (quot x 10)) (mod x 10)) []))\n        ](fx h))))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 99, "code": "(fn [a b] \n    ((fn f [n] \n      (if (= n 0) []\n        (conj (f (int (/ n 10))) (mod n 10))\n      )) (* a b)))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 99, "code": "(letfn [(seq-digits [x] \n                    (if (> x 10) (conj (seq-digits (quot x 10)) (mod x 10)) [x]))] \n  #(seq-digits (* %1 %2)))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 99, "code": "#(map (fn [x] (Integer/parseInt (str x))) (apply vector (seq (str (* % %2)))))", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 99, "code": "#(into [] (map read-string (map str (seq (str (* %1 %2))))))", "user": "5f974321e4b0715f5002d7f3"}, {"problem": 99, "code": "(fn [x y]\n  (into [] \n        (map \n         #(Character/digit (first %) 10)\n           (re-seq #\".\" (str (* x y))))))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 99, "code": "#(loop [i (* %1 %2) seq ()]\n   (if (= i 0)\n     seq\n     (recur (quot i 10) (conj seq (mod i 10)))))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 99, "code": "(fn [x y]\n  (loop [a (* x y) b []]\n    (if (= a 0)\n      b\n      (recur (quot a 10) (cons (rem a 10) b)))))", "user": "5fa2b45ce4b0f0ebd91b77f5"}, {"problem": 99, "code": "(fn [a b] (map read-string (map str (seq (str (* a b))))))", "user": "5fab003de4b08cb800c85ad1"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 99, "code": "(fn [x y] \n  (loop [z (* x y)\n         result ()]\n    (if (zero? z)\n      result\n      (recur (quot z 10) (cons (mod z 10) result)))))", "user": "5fa5a6b1e4b0fa27300f3dc8"}, {"problem": 99, "code": "(fn [a b]\n  (let [x (str (* a b))]\n    (map #(- (int %) (int \\0)) (vec x) )))", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 99, "code": "(fn owo [x y] (map #(Integer/parseInt (str %)) (seq (str (* x y)))))", "user": "5fb2eac0e4b08cb800c85b2f"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 99, "code": "(fn prod-digit [a b]\n  (->> (* a b)\n      str\n      seq\n      (map #(- (int %) (int \\0)))))", "user": "5f38eecce4b0574c87022c72"}, {"problem": 99, "code": "(fn  [x y]\n  (let [prod (* x y)]\n    (->> (take-while #(<= % prod) (iterate #(* 10 %) 1))\n         (map #(rem (quot prod %) 10))\n         reverse)))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 99, "code": "(fn [& args]\n  (map #(- (int %) 48) (seq (str (apply * args))))\n  )", "user": "5c06fab7e4b0bdcf453d16bd"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 99, "code": "(fn [a b] (let [char2digit (fn [c] (Integer/parseInt c))\n                    mult (* a b)\n                    strs (map str (str mult))]\n                    (map char2digit strs)))", "user": "5fdd15f7e4b05ac5b16ea141"}, {"problem": 99, "code": "#(->> %&\n      (apply *)\n      ((fn digits [n]\n         (if (< n 10)\n           [n]\n           (conj (digits (quot n 10)) (rem n 10)))),))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 99, "code": "(fn digits [& rest]\n (let [n (apply * rest) curr (mod n 10) nxt (int (/ n 10))]\n  (if (not= 0 nxt)\n   (conj (digits nxt) curr)\n   [curr])))", "user": "59d4d126e4b0ef0a1e9b5be9"}, {"problem": 99, "code": "(fn [x y]\n    (let [product (* x y)]\n      (vec (loop [value product\n                  digits (list)]\n             (if (< value 10)\n               (conj digits value)\n               (recur (quot value 10) (conj digits (mod value 10))))))))", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 99, "code": "(fn [x y] (map #(Long/parseLong (str %)) (Long/toString (* x y))))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 99, "code": "(fn [num1 num2]\n   (into []\n         (loop [ans () n (* num1 num2)]\n           (if (zero? n)\n             ans\n             (recur (conj ans (mod n 10)) (int (/ n 10))  ))\n\n           ))\n   )", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y)\n         s ()]\n    (if (< n 10)\n      (conj s n)\n      (recur (quot n 10) (conj s (rem n 10))))))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 99, "code": "(fn [a b]\n  (loop [res '()\n         remain (* a b)]\n    (if (= remain 0)\n      res\n      (recur (conj res (mod remain 10))\n             (quot remain 10)))))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 99, "code": "(fn [x y]\n    (->> (* x y)\n         str\n         (map #(- (int %) 48))))", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) str seq (map int) (map #(- % 48))))", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 99, "code": "(fn [a b]\n        (map #(- (int %) (int \\0)) (seq (str (* a b)))))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 99, "code": "(fn split-multiply\n  [a b]\n  (->> a\n       (* b)\n       str\n       (re-seq #\"\\d\")\n       (map #(Integer. %))))", "user": "5ff454a1e4b05ac5b16ea20d"}, {"problem": 99, "code": "(fn a [a b] (map #(Character/digit % 10) (str (* a b))))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5ff3aca3e4b05ac5b16ea205"}, {"problem": 99, "code": "(fn [x y]\n  (map #(Character/digit % 10) (str (* x y)))\n )", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 99, "code": "#(for [d (str (* % %2))] (Character/digit d 10))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 99, "code": "(fn [m n]\n    (map #(Integer. (str %1)) (str (* m n))))\n\n;; (fn [m n]\n;;     (->> (* m n)\n;;          (str)\n;;          (map #(Integer/parseInt (.toString %1)))))\n\n;; (comp (partial map read-string)\n;;         (partial re-seq #\"\\d\")\n;;         str\n;;         *)\n\n;; #(->> %&\n;;         (apply *)\n;;         (str)\n;;         (map str)\n;;         (map read-string))\n\n;; (fn [m n]\n;;     (let [rst (* m n)\n;;           get-digit-seq (fn [num ans]\n;;                           (if (zero? num)\n;;                             ans\n;;                             (recur (quot num 10)\n;;                                    (conj ans (rem num 10)))))]\n;;       (get-digit-seq rst '())))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 99, "code": "(fn mul [a b]\n  (let [prod (str (* a b))]\n    (into [] (map #(Integer/parseInt (str %)) (seq prod)))))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 99, "code": "(fn [fir sec]\n  \n  (reduce #(conj %1 (Integer. (str %2))) [] (str (* fir sec)))\n  \n  )", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 99, "code": "(fn [x y] \n  (->> (* x y)\n       str seq\n       (map #(Integer. (str %)))))", "user": "5eea5c98e4b029a2061bbebf"}, {"problem": 99, "code": "(fn [x y]\n        (let [mult (* x y)\n              mult-str (str mult)\n              spl-str (clojure.string/split mult-str #\"\")\n              non-emp (filter not-empty spl-str)\n              int-arr (map #(Integer/parseInt %) non-emp)] \n         int-arr))", "user": "592334c7e4b0a390037439ee"}, {"problem": 99, "code": "(fn [n1 n2] \n  (let [mult (* n1 n2)\n        get-digits (fn [n] (->> n str (map (comp #(- % 48) int))))\n        ]\n    (get-digits mult)\n    )\n  )", "user": "6004c750e4b074f607df6645"}, {"problem": 99, "code": "(fn [x y]\n   (->> (* x y)\n        (str)\n        (map int)\n        (map #(- % 48))))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 99, "code": "#(->> %&\n      (apply *)\n      str\n      seq\n      (map str)\n      (map read-string))", "user": "5da7176ae4b000c986472c13"}, {"problem": 99, "code": "(fn[x y](map #(Integer/parseInt(str %)) (str(* x y))))", "user": "6001460ce4b074f607df6611"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 99, "code": "(fn foo [a b]\n    (letfn [(bar [x]\n                 (loop [x x\n                        acc '()]\n                     (if (= x 0)\n                         acc\n                         (recur (quot x 10) (conj acc (rem x 10))))))]\n        (bar (* a b))))", "user": "600ae927e4b074f607df6689"}, {"problem": 99, "code": "; 'mathy' solution\n#_(fn [a b]\n  (loop [prod (* a b)\n         acc []]\n    (if (pos? prod)\n      (recur (quot prod 10) (cons (rem prod 10) acc))\n      acc)))\n; use a string\n#(->> (* %1 %2)\n     str\n     seq\n     (map str)\n     (map read-string))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 99, "code": "(fn [x y]\n  (map #(- (int %) 48)\n       (str (* x y))))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 99, "code": "#(let[mul (* % %2)\n      mulstr (str mul)]\n   (map (fn [n] (Integer/parseInt n)) (map str mulstr)))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 99, "code": "(fn [a b]\n  (loop [n (* a b)\n         res '()] \n    (if (= n 0)\n      res\n      (recur (quot n 10) (conj res (mod n 10))))))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 99, "code": "(fn mult-digits [n1 n2]\n  (loop [accum []\n         n     (* n1 n2)]\n    (if (= n 0)\n      (reverse accum)\n      (recur (conj accum (rem n 10)) (quot n 10)))))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 99, "code": "#(map (fn [x]\n        (- (int x)\n           (int \\0)))\n      (str (* %1 %2)))", "user": "60096aabe4b074f607df667f"}, {"problem": 99, "code": "#(map (fn [x] (Integer/parseInt (str x))) \n      (str (* %1 %2)))", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 99, "code": "#(map read-string (map str (str (* %1 %2))))", "user": "5f309144e4b0574c87022c23"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Character/digit % 10) (seq (str (* a b)))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 99, "code": "#(map read-string (map str (seq (str (* %1 %2)))))", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 99, "code": "(fn[x y](map #(Integer/parseInt (str %)) (str (* x y))))", "user": "60195030e4b0bf4ca6b10920"}, {"problem": 99, "code": "(fn [a b]\n  (vec\n   (map #(- (int %) 48) (vec (str (* a b))))))", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 99, "code": "(fn product-digits [n m]\n  (let [product (* n m)]\n    (if (= 0 product)\n      '(0)\n      (loop [n product\n             acc `()]\n        (if (= 0 n)\n          acc\n          (recur (quot n 10)  (conj acc (mod n 10))))))))", "user": "601004d6e4b074f607df66b2"}, {"problem": 99, "code": "(fn [n1 n2]\n   (map #(Integer. (str (first (take 1 %)))) (partition 1 (str (* n1 n2)))))", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      (str)\n      (reductions\n       (fn [_ ^Character e] (Character/getNumericValue e))\n       0)\n      (rest))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) (int \\0)) (str (* a b))))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (seq (.toString (* a b)))))", "user": "5a778224e4b013a48d399761"}, {"problem": 99, "code": "(fn f [x y]\n    (vec (map #(Character/digit % 10) (str (* x y)))))", "user": "5ff64845e4b06df49cee1495"}, {"problem": 99, "code": "(fn [a b]\n  (map #(Integer/parseInt (str %))  (str (* a b))))", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 99, "code": "(fn [x y] (mapv #(Integer/parseInt (str %)) (str (* x y))))", "user": "600eb95de4b074f607df66a6"}, {"problem": 99, "code": "(fn [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 99, "code": "(fn pro-dig [v1 v2]\n  (loop [r (* v1 v2)\n        res []]\n    (if (zero? r)\n      (seq res)\n      (recur (quot r 10) (cons (rem r 10) res))\n    )      \n  )\n)", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 99, "code": "(fn my-prod-digits [a b]\n  (map read-string (map str (seq (str (* a b))))))", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 99, "code": "(fn [a b]\n          (letfn [(step [i]\n                    (if (pos? i)\n                      (cons (rem i 10) (step (quot i 10)))))]\n            (reverse (step (* a b)))))", "user": "6022429be4b0d5df2af22200"}, {"problem": 99, "code": "(fn\n  [fir sec]\n  (map #(Character/getNumericValue %) (str (* fir sec)))\n  )", "user": "60337f1fe4b0d5df2af222c1"}, {"problem": 99, "code": "(fn foo [a b]\n        (loop [res (* a b)\n               len (-> res str count)\n               result [] ]\n            (if (= len 0) result\n                (recur (int (/ res 10)) (dec len) (concat (vector(rem res 10))\n                                                          result))\n                )\n            )\n        )", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 99, "code": "(fn [a b]\n  (let [result (* a b)]\n    (loop [num_ result answer []]\n      (if (> num_ 0)\n        (recur (quot num_ 10) (conj answer (rem num_ 10)))\n        (reverse answer)))))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n      str\n      (map #(Integer/parseInt (str %)))\n      (into [])\n  ))", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 99, "code": "#(->> (* %1 %2)\n       (str)\n       (into [])\n       (map str)\n       (map read-string))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 99, "code": "(let [digits (fn [n]\n  (if (= n 1)\n    (vec (list 1))\n  (vec (reverse (map #(rem (quot n (int (Math/pow 10 (dec %)))) 10)\n       (range 1 (inc (Math/log10 n))))))))]\n  #(digits (* %1 %2)))", "user": "60460824e4b02d28681c77bc"}, {"problem": 99, "code": "(fn [a b]\n  (map (comp read-string str) (seq (str (* a b)))))", "user": "5f1af439e4b0f565ad998257"}, {"problem": 99, "code": "(fn f [a b]\n  (let [prod (* a b)\n        digits (fn dig [x]\n                 (when (pos? x)\n                   (let\n                     [r (mod x 10)\n                      n (/ (- x r) 10)]\n                    (cons r (dig n)))))]\n    (reverse (digits prod))\n    )\t\n  )", "user": "6045582fe4b02d28681c77b6"}, {"problem": 99, "code": "(fn [a b] \n  (mapv \n   #(Integer/parseInt \n     (str %)) \n        (str \n         (* a b))))", "user": "5eb56fc1e4b00a66d4a95224"}, {"problem": 99, "code": "#(map (fn[x] (- (int x) 48)) (str (* %1 %2)))", "user": "60486e8ae4b02d28681c77db"}, {"problem": 99, "code": "(fn [a b]\n    (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 99, "code": "(fn reader [x y]\n(map #(read-string (str %))\n     (str (* x y))))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 99, "code": "(comp (partial map #(Integer/parseInt %)) (partial map str) char-array str *)", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 99, "code": "(fn prod-digs [n1 n2]\n  (let [p (* n1 n2)\n        p-str (str p)\n        digit-strs (map str p-str)]\n    (map #(Integer/parseInt %) digit-strs)))", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 99, "code": "(fn product-digits\n  [x y]\n  (let [ps (seq (str (* x y)))]\n    (map #(Long/parseLong (str %)) ps)))", "user": "4e586949535d8a8b8723a292"}, {"problem": 99, "code": "(fn product-digits\n  [x y]\n  (map #(Integer/parseInt %) (filter not-empty (clojure.string/split (str (* x y)) #\"\"))))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 99, "code": "(fn [x y] (map #(- % 48) (map int (flatten (partition 1 (str (* x y)))))))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 99, "code": "#(map (fn [c] (Integer/parseInt (str c))) (str (* %1 %2)))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 99, "code": "#(->> (* % %2)\n      (.toString)\n      (re-seq #\"\\d\")\n      (map (fn [n] (Integer/parseInt n)))\n      (vec)\n      )", "user": "60471241e4b02d28681c77c9"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 99, "code": "(fn [x y] (mapv #(Integer/parseInt (str %)) (str (* x y))))", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str \n      (map (comp read-string str)))", "user": "6040e6dbe4b0d5df2af2232a"}, {"problem": 99, "code": "#(loop [n (* %1 %2) s []] \n   (if (zero? n)\n     (reverse s)\n     (recur (quot n 10) (conj s (rem n 10)))))", "user": "598e7998e4b02b9968b84d34"}, {"problem": 99, "code": "#((fn dig [x] (loop [x x s []]\n                 (if (pos? x)\n                   (recur (int (/ x 10))\n                          (cons (mod x 10) s))\n                   s))) (* %1 %2))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 99, "code": "(fn ProductDigits [a b]\n  (reverse\n   ((fn DigitsToLst [x] (if (< x 10)\n                           (list  x)\n                           (cons (mod x 10) (DigitsToLst (quot x 10)))))\n    (* a b))))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n     (str)\n     (map #(Character/digit % 10))))", "user": "60654263e4b069485764ddc9"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "6065755ee4b069485764ddcc"}, {"problem": 99, "code": "(fn myfunc [a b]\n  (loop [v (* a b)\n         lst '()]\n    (if (zero? v)\n      lst\n      (let [k (mod v 10)]\n        (recur (/ (- v k) 10) (conj lst k))))))", "user": "606aafcfe4b069485764ddf6"}, {"problem": 99, "code": "#(loop [number (apply * %&) acc '()]\n   (let [q (quot number 10)\n         r (rem  number 10)]\n     (if (zero? q)\n       (cons r acc)\n       (recur q (cons r acc)))))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 99, "code": "(comp (fn split [x] (if (< x 10) [x] (conj (split (quot x 10)) (mod x 10) ))) *)", "user": "60689984e4b069485764dde6"}, {"problem": 99, "code": "#(loop [a [] x (* %1 %2)] (if (= x 0) a (recur (cons (rem x 10) a) (quot x 10))))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "606c87aae4b069485764de0d"}, {"problem": 99, "code": "(fn to-digits [a b] (map #(Integer/parseInt (str %)) (str (* a b))))", "user": "606e0a42e4b069485764de19"}, {"problem": 99, "code": "(fn [d1 d2] (map #(Character/digit % 10) (into [] (str (* d1 d2)))))", "user": "606d75f5e4b069485764de13"}, {"problem": 99, "code": "(fn\n  [a b]\n  (let [r (* a b)\n        len (count (str r))]\n    (map #(rem % 10) (reverse (take len (iterate #(quot % 10) r))))))", "user": "6074f5ede4b069485764de52"}, {"problem": 99, "code": ";;; seg\u00fan el parseInt me va a cada digito\n(fn [x y] (map #(Integer/parseInt (str %)) (str (* x y))))  ;;; se tuvo que pasar a str para que lo dividiera y despues a int", "user": "6075c214e4b069485764de5b"}, {"problem": 99, "code": "(fn product-digits'' [a b]\n  (map\n    #(- (int %) (int \\0))\n    (seq (str (* a b)))))", "user": "605a876be4b000d535e6f53c"}, {"problem": 99, "code": "(fn solve [x y]\n  (->> (* x y)\n       str\n       seq\n       (map str)\n       (map #(Integer/parseInt %))))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "60764350e4b069485764de5e"}, {"problem": 99, "code": "(fn [a b] \n  (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "606ff89be4b069485764de22"}, {"problem": 99, "code": "(fn [a b] (vec (map #(Integer/parseInt (str %)) (str (* a b)))))", "user": "6074df6fe4b069485764de4b"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "6074e088e4b069485764de4d"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str seq\n      (map str)\n      (map (fn [x] (Integer. x))))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 99, "code": "#(map (fn [c] (- (int c) (int \\0))) (seq (str (* %1 %2))))", "user": "60777335e4b0a637ed78034f"}, {"problem": 99, "code": "(fn [a b]\n    (map #(Character/digit % 10) (str (* a b))))", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 99, "code": "(fn [x y]\n  (loop [acc () num (* x y)]\n    (if (zero? num)\n      acc\n      (recur (conj acc (rem num 10))\n             (quot num 10)))))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str\n      (map str)\n      (map read-string))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 99, "code": "(fn [x y] vec (map #(Character/digit % 10) (str (reduce * (list x y)))))", "user": "6081e475e4b0736b099e42d6"}, {"problem": 99, "code": "(fn [x y] (map #(Integer. (str %)) (str (* x y))))", "user": "6070c7bae4b069485764de27"}, {"problem": 99, "code": "#(map read-string (map str (str (* %1 %2))))", "user": "607a1523e4b0a637ed78036a"}, {"problem": 99, "code": "(fn product-digits [a b]\n  (map #(Character/getNumericValue %) (str (* a b))))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 99, "code": "(fn prod-dig [x y]\n  (vec (map #(- (int %) 48) (seq (str (* x y))))))", "user": "6074dfa4e4b069485764de4c"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "6074e1e4e4b069485764de4f"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "6074e1ade4b069485764de4e"}, {"problem": 99, "code": "(fn dig[n s]\n  (mapv #(Integer/parseInt(str %))\n        (str(* n s))))", "user": "6085edade4b0736b099e42fc"}, {"problem": 99, "code": "(fn ProductDigits [n1 n2] \n  (map #(- (int %) 48) (seq (str (* n1 n2)))))", "user": "607508f3e4b069485764de54"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "608b3fe1e4b0adce4b61c442"}, {"problem": 99, "code": "(fn [m-cand m-plier]\n  (mapv #(Character/getNumericValue %) (str (* m-cand m-plier)))\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 99, "code": "(fn [x y] (loop [digits []\n                 x (* x y)]\n            (if (= x 0)\n              (reverse digits)\n              (recur (conj  digits (rem x 10)) (quot x 10)))))", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "608828dee4b0ae75613dcee1"}, {"problem": 99, "code": "(fn [x y] (mapv #(Integer/parseInt (str %)) (str (* x y))))", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      str\n      seq\n      (map (comp read-string str)))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 99, "code": "(fn [x y](let [p (* x y)\n        len (count (str p))]\n    (map #(rem % 10) (reverse (take len (iterate #(quot % 10) p))))))", "user": "607f3336e4b05857a65e7747"}, {"problem": 99, "code": "(fn [n1 n2] (map #(Integer/parseInt (str %))\n                  (str (* n1 n2))))", "user": "6074e278e4b069485764de51"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 99, "code": "(fn [n1 n2]\n  (map\n    #(Integer/parseInt (str %))\n    (seq (str (* n1 n2)))))", "user": "5e7fb908e4b085ba37836e3f"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 99, "code": "(fn [a b]\n  (let [m (* a b)]\n    (if (= m 0)\n      [0]\n      ((fn ds [n] (if (= 0 n) [] (conj (ds (int (/ n 10))) (rem n 10)))) m))))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 99, "code": "(fn [a b]\n(mapv #(Integer/parseInt (str %)) (str (* a b)))\n)", "user": "6024544be4b0d5df2af2221f"}, {"problem": 99, "code": "#(->> (* %1 %2)\n       str\n       seq\n       (map str)\n       (map read-string))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 99, "code": "(fn [x y]\n  (let [str-answer (str (* x y))]\n    (reduce (fn [acc x] (conj acc (Integer/parseInt (str x)))) [] str-answer)))", "user": "5e860270e4b09a7a73c8bbdb"}, {"problem": 99, "code": "(fn ans-99 [n m]\n  (->> (* n m)\n       str\n        (map (comp read-string str))))", "user": "608fac60e4b03bd49d9f36c7"}, {"problem": 99, "code": "(fn [x y] (vec (map #(Character/digit % 10) (seq (str (* x y))))))", "user": "603f6623e4b0d5df2af2231f"}, {"problem": 99, "code": "(fn [a b] \n  (mapv #(Integer/parseInt (str %)) ((comp str *) a b)))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 99, "code": ";(fn [x y]\n;  (->> (* x y)\n;       str\n;       (map #(- (int %) (int \\0)))))\n(fn [x y]\n  (->> (* x y)\n       (iterate #(quot % 10))\n       (take-while pos?)\n       (map #(mod % 10))\n       reverse))", "user": "60794173e4b0a637ed78035d"}, {"problem": 99, "code": "(fn [x y]\n  (loop [n (* x y)\n         result '()]\n    (if (= 0 n)\n      (vec result)\n      (recur (quot n 10) (conj result (rem n 10))))))", "user": "6090e617e4b03bd49d9f36ce"}, {"problem": 99, "code": "(fn [n1 n2]\n   (into [] (for [x (str (* n1 n2))]\n              (- (int x) 48))))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 99, "code": "(fn [a b]\n  (map\n    #(Integer. (str %))\n    (str (* a b))))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 99, "code": "(fn [a b] \n  (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 99, "code": "(fn [x y]\n  (->>(* x y)\n      (str)\n      (map #(Character/digit % 10))))", "user": "60a42199e4b00e9e6653c454"}, {"problem": 99, "code": "#(->> (* %1 %2)\n      (str)\n      (seq)\n      (map str)\n      (map read-string)\n      (into []))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 99, "code": "(fn [x y]\n  (let [product (* x y)\n        num-str (str product)\n        tokens (into [] num-str)\n        tokens (map str tokens)]\n    (map #(Integer/parseInt %) tokens)))", "user": "4fe49706e4b0e8f79898feb7"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 99, "code": "(fn digits [a b]\n  (map #(- (int %) (int \\0)) (str (* a b))\n       )\n  )", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 99, "code": "(fn [a b]\n  (->> (* a b)\n      str\n       (map #(Character/digit % 10))))", "user": "5bca3883e4b07a9b28b100eb"}, {"problem": 99, "code": "(fn [a b]\n  (->> a\n       (* b)\n       (str)\n       (vec)\n       (map #(- (int %) 48))))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 99, "code": "(fn [x y] (->> (* x y) (str) (seq) (map #(- (int %) (int \\0))) (vec)))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 99, "code": "(fn [num1 num2]\n  (map (fn [my-char]\n         (Character/digit my-char 10)) (str (* num1 num2))))", "user": "60b8b0f8e4b0e0fa5f1b425c"}, {"problem": 99, "code": "(fn  [x y]\n    (loop [res [] n (* x y)]\n      (if (<= n 0)\n        res\n      (let [d (rem n 10)\n            r (/ (- n d) 10)]\n        (recur (into [d] res) r)))))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 99, "code": "#(map (comp read-string str) (str(* % %2)))", "user": "57123c96e4b09c608db70454"}, {"problem": 99, "code": "(fn [a b] (map #(Character/getNumericValue %) (str (* a b))))", "user": "60afc597e4b0245e5b1b35c3"}, {"problem": 99, "code": "(fn [a b] (map #(Character/digit % 10) (seq (str (* a b)))))", "user": "60b8f098e4b0e0fa5f1b425f"}, {"problem": 99, "code": "(fn [a b]\n   (->> (* a b)\n        str\n        (re-seq #\"\\d\")\n        (map #(Integer/parseInt %))))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 99, "code": "(fn [x y] (map #(Character/digit % 10) (str (* x y))))", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 99, "code": "(fn [n1 n2] (map #(Integer/parseInt (str %)) (into [] (str (* n1 n2)))))", "user": "604a3daee4b02d28681c77f2"}, {"problem": 99, "code": "(fn multiply-nums\n  [x y]\n  (->> (* x y)\n       (str)\n       (seq)\n       (map #(Integer/parseInt (str %)))))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 99, "code": "(fn [n1 n2] (map #(- % 48) (map int (seq (str(* n1 n2))) )))", "user": "60bfb68be4b0e0fa5f1b429e"}, {"problem": 99, "code": "(fn [x y]\n      (reduce #(conj % (Character/digit %2 10) )  \n         []  (seq (str (* x y))) ) )", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 99, "code": "#(let [x (apply * %&)\n       b 10]\n   (loop [y x r []]\n     (if (> (quot y b) 0)\n       (recur (quot y b) (cons (rem y b) r))\n       (cons y r))))", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 99, "code": "(fn product-digits [x y]\n  (map (comp read-string str)\n       (str (* x y))))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 99, "code": "(letfn [(digits [n] (map #(- (int %) (int \\0)) (str n)))] (fn [x y] (digits (* x y))))", "user": "53720c5ce4b0493c815db704"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str (* a b))))", "user": "5aba04dce4b073f17744269e"}, {"problem": 99, "code": "(fn [x y] \n  (loop [n (* x y)\n         r '()]\n    (if (< 0 n)\n      (recur (quot n 10) (conj r (mod n 10)))\n      r)))", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 99, "code": "(fn [a b] (map #(- (int %) 48) (seq (str (* a b)))))", "user": "60db702ae4b02d404a3b4372"}, {"problem": 99, "code": "(fn [a b] (mapv #(Integer/parseInt (str %)) (str(* a b))))", "user": "60dd865ee4b0d8b48c489db3"}]