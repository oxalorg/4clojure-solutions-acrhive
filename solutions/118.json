[{"code": "(fn m [f s]\n  (lazy-seq\n    (when-let [[x & more] (seq s)]\n      (cons (f x)\n            (m f more)))))", "problem": 118, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "(fn f [x y]\n  (when (not (empty? y))\n    (lazy-cat\n      [(x (first y))]\n      (f x (rest y)))))", "problem": 118, "user": "4da3e51330acd6ed10482a68"}, {"code": "(fn m [f x]\n  (lazy-seq\n    (if (seq x)\n      (cons (f (first x)) (m f (rest x))\n      )\n    )\n  )\n)", "problem": 118, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn mymap [f s] \n    (if (empty? s) s \n    (lazy-cat (list (f (first s))) \n              (mymap f (rest s)))))", "problem": 118, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn m [f s]\n  (lazy-seq \n   (if (seq s)\n     (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4e52d815535d302ef430da77"}, {"code": "(fn map*\n  [f coll]\n  (when (seq coll)\n    (cons (f (first coll)) (lazy-seq (map* f (rest coll))))))", "problem": 118, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "(fn m [f x]\n  (when (seq x)\n    (lazy-seq (cons (f (first x)) (m f (rest x))))\n    ))", "problem": 118, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn m[f c](lazy-seq(when-let[[x & y](seq c)](cons(f x)(m f y)))))", "problem": 118, "user": "4dd4034a535dae65d5c462df"}, {"code": "(fn m [f s]\n  (lazy-seq\n    (if-let [[x & s] (seq s)]\n      (cons (f x) (m f s)))))", "problem": 118, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn m [f [x & xs :as s]]\r\n  (if (empty? s) \r\n      [] \r\n      (lazy-seq (cons (f x) (m f xs)))))", "problem": 118, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn my-map [f s]\r\n  (lazy-seq\r\n\t\t(when (seq s)\r\n\t\t\t(cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn m [f s]\r\n  (when-not (empty? s)\r\n    (lazy-seq (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4dc1ee85535d020aff1edf91"}, {"code": "(fn m [f [h & r]] (lazy-seq (cons (f h) (if r (m f r)))))", "problem": 118, "user": "4dce6e41535d5973398f92a2"}, {"code": "(fn m [f s]\n  (when-first [e s]\n    (lazy-seq (cons (f e) (m f (next s))))))", "problem": 118, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn [fnc a-seq]\n  (letfn [\n    (mappus[fnc a-seq]\n      (if (empty? a-seq)\n        nil\n        (cons (fnc (first a-seq))\n              (lazy-seq (mappus fnc (rest a-seq))))))]\n  (mappus fnc a-seq)))", "problem": 118, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "(fn m [f s]\n  (lazy-seq\n   (when-let [x (first s)]\n     (cons (f x) (m f (rest s))))))", "problem": 118, "user": "4db4714f535dc0f10411755a"}, {"code": "(fn [f coll]\n  (letfn [(my-map [f coll]\n            (if (empty? coll)\n            '()\n            (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))))]\n  (my-map f coll)))", "problem": 118, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn map- [f coll]\n  (if (seq coll)\n    (lazy-seq (cons (f (first coll)) (map- f (rest coll))))\n    nil))", "problem": 118, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn m [f [x & xs :as c]] \n  (lazy-seq\n    (if (seq c)\n      (cons (f x) (m f xs)))))", "problem": 118, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn b [f [x & y]]\n  (if x\n    (cons (f x) (lazy-seq (b f y)))))", "problem": 118, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn g [f s](\n  if  (seq s)\n    (cons (f (first s)) (lazy-seq (g f (rest s))))\n)\n)", "problem": 118, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn m [f [x & s]]\n  (lazy-seq\n    (and x\n      (cons (f x) (m f s)))))", "problem": 118, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn my-map\n  [f coll]\n  (lazy-seq\n   (when (seq coll)\n     (cons (f (first coll)) (my-map f (rest coll))))))", "problem": 118, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn m [f col]\n  (if (seq col)\n     (lazy-seq\n       (cons (f (first col))\n             (m f (rest col))\n               ))))", "problem": 118, "user": "4dc537fd535d8a4b2fd74282"}, {"code": "(fn [f xs]\n  (letfn [(m [f xs]\n    (lazy-seq \n      (when-let [t (seq xs)]\n        (if (empty? t)\n          nil\n          (cons (f (first t)) (m f (rest t)))))))]\n     (m f xs)))", "problem": 118, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn m [f c]\n  (when-let [[x & xs] c]\n    (cons (f x) (lazy-seq (m f xs)))))", "problem": 118, "user": "4dbb0b6c535d1e037afb21b0"}, {"code": "(fn [f l]\n    ((fn mymap [etc]\n      (lazy-seq\n        (cons (f (first etc))\n              (if (empty? (rest etc))\n                  () \n                  (mymap (rest etc)))\n        ))\n    ) l)\n)", "problem": 118, "user": "4e720985535d5021c1a89655"}, {"code": "(fn __\n  [f s]\n  (when-let [s (seq s)]\n    (lazy-seq\n     (cons (f (first s)) (__ f (next s))))))", "problem": 118, "user": "4db53f87535d87e67b28fe08"}, {"code": "(fn my-map [f coll]\n  (when-let [[head & more] coll]\n    (cons (f head)\n          (lazy-seq (my-map f more)))))", "problem": 118, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn m [f s] (lazy-seq (when-let [c (seq s)] (cons (f (first c)) (m f (rest c))))))", "problem": 118, "user": "4e7e55ab535db169f9c79711"}, {"code": "(fn f[x y](when (seq y)(lazy-cat [(x (first y))] (f x (rest y)))))", "problem": 118, "user": "4e7eff9e535db966e863cc38"}, {"code": "(fn my-map [f coll]\n  (loop [coll coll]\n  (lazy-seq\n      (when (seq coll) \n        (cons (f (first coll)) (my-map f (rest coll)))))))", "problem": 118, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "(fn m [f s]\n  (when s\n    (cons (f (first s)) (lazy-seq (m f (next s))))))", "problem": 118, "user": "4db85282535d1e037afb218a"}, {"code": "(fn my-map [f col] (lazy-seq (if (empty? col) nil (cons (-> col first f) (my-map f (rest col))))))", "problem": 118, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn hoge [f col]\n  (lazy-seq\n\t   (when-let [x (first col)]\n\t\t\t(cons (f x)(hoge f (rest col))))))", "problem": 118, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "(fn foo [f xs]\n  (lazy-seq\n    (when (seq xs)\n      (cons (f (first xs))\n        (foo f (rest xs))))))", "problem": 118, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn l [f s]\n  (when (seq s)\n  (lazy-seq\n    (cons (f (first s))\n      (l f (rest s))))))", "problem": 118, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn mp [f lst]\n  (if (empty? lst) '()\n    (cons (f (first lst)) (lazy-seq (mp f (rest lst))))))", "problem": 118, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn mymap [f coll]\n  (when (not (empty? coll))\n    (lazy-seq (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn mmap [f xs] (lazy-seq(if (empty? xs) xs (cons (f (first xs)) (mmap f (rest xs))))))", "problem": 118, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn my-map [f coll]\n  (lazy-seq\n    (if (empty? coll)\n        ()\n        (cons (f (first coll))\n              (my-map f (rest coll))))))", "problem": 118, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn mymap [f c]\r\n   (lazy-seq\r\n     (when (seq c)\r\n       (cons (f (first c))\r\n             (mymap f (rest c))))))", "problem": 118, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "(fn m [f s]\n  (lazy-seq \n    (when-let [x (seq s)]\n      (cons (f (first x)) \n            (m f (rest x))))))", "problem": 118, "user": "4daf907aedd6309eace4d17b"}, {"code": "(fn my-map [f coll]\n  (if (seq coll)\n    (lazy-seq (cons (f (first coll))\n      (my-map f (rest coll))))))", "problem": 118, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn my-map [f coll]\n  (if (empty? coll)\n    nil\n    (cons (f (first coll))\n          (lazy-seq (my-map f (rest coll))))))", "problem": 118, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn m [f c]\n  (lazy-seq \n    (when (seq c)\n     (cons (f (first c)) (m f (rest c))))))", "problem": 118, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn my-sad-map [f coll]\n      (when (seq coll)\n\t      (lazy-seq (cons (f (first coll)) (my-sad-map f (rest coll))))))", "problem": 118, "user": "4e739e13535dff18050a9c76"}, {"code": "(fn mymap [f coll]\n    (if-not (empty? coll)\n        (cons \n            (f (first coll))\n            (lazy-seq (mymap f (rest coll)))\n        )\n    )\n)", "problem": 118, "user": "4e78dc98535db95036265724"}, {"code": "(fn m [f c]\r\n  (lazy-seq\r\n    (if-let [s (seq c)]\r\n      (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn g [f [s & r]]\n  (if s\n    (cons (f s) (lazy-seq (g f r)))))", "problem": 118, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "(fn m [f l]\n  (when l\n    (lazy-seq (cons (f (first l))\n                    (m f (next l))))))", "problem": 118, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn x [f s]\n  (if s\n    (lazy-seq\n      (cons (f (first s)) (x f (next s))))))", "problem": 118, "user": "4e44358f535dc968683fc4a8"}, {"code": "(fn mymap  [func coll]\n\n    (if (empty? coll)\n      coll\n\n      (lazy-seq (cons (func (first coll)) (mymap func (rest coll))))\n      \n\n      )\n\n\n    )", "problem": 118, "user": "4e78c208535db95036265722"}, {"code": "#(letfn  \r\n  [(mymap [f xs]\r\n  \t(if (seq xs)\r\n\t\t    (lazy-seq (cons (f (first xs)) (mymap f (rest xs))))\r\n\t\t    xs))]\r\n  (mymap %1 %2))", "problem": 118, "user": "4e273301535deb9a81d77ef7"}, {"code": "(fn mp [f c] (if-not (nil? c) (cons (f (first c)) (lazy-seq (mp f (next c))))))", "problem": 118, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn m [f s] (when (seq s) (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(letfn [(g [f s] \n  (if (empty? s) \n    [] \n    (lazy-seq (cons (f (first s)) (g f (rest s))))))]\n  g)", "problem": 118, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn r [f s]\n   (lazy-seq\n    (when (seq s)\n      (cons (f (first s))\n            (r f (rest s))))) )", "problem": 118, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn ma [f xs]\r\n  (if (empty? xs) nil\r\n      (lazy-seq (cons (f (first xs)) (ma f (rest xs))))))", "problem": 118, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn [f x]\n  (rest (reductions\n    #(f %2) 0 x)))", "problem": 118, "user": "4e7e05a6535db169f9c796fe"}, {"code": "(fn my-map [ f s ]\n  (if s (lazy-seq (cons (f (first s)) (my-map f (next s))))))", "problem": 118, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn me [f c]\n  (lazy-seq \n    (if c\n      (cons (f (first c)) (me f (next c))))))", "problem": 118, "user": "4dbad895535d1e037afb21ae"}, {"code": "(fn mp [f coll] (if (empty? coll) '() (cons (f (first coll)) (lazy-seq (mp f (rest coll))))))", "problem": 118, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn mm [f [a & r]]\r\n  (if a\r\n    (cons (f a) (lazy-seq (mm f r))) \r\n    ()))", "problem": 118, "user": "4dae916eedd6309eace4d155"}, {"code": "(fn mp [f s]\n  (if (empty? s) '()\n      (cons (f (first s)) (lazy-seq (mp f (rest s))))))", "problem": 118, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn mymap [f c]\n   (lazy-seq\n    (when-let [s (seq c)]\n      (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn my-map [f coll]\n  (lazy-seq\n    (let [x (first coll)]\n      (if (= nil x) \n          []\n          (cons (f x) \n                (my-map f (rest coll)))))))", "problem": 118, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn m[f s]\n    (if (nil? s)\n\t      ()\n\t      (lazy-seq (cons (f (first s)) (m f (next s))))))", "problem": 118, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn mymap\r\n  [func lista]\r\n    (if-not (empty? lista)\r\n\t\t\t(lazy-seq (cons (func (first lista)) (mymap func (rest lista))))\r\n\t\t\t[]))", "problem": 118, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn mps [f coll]\n  (when coll\n    (lazy-seq (cons (f (first coll)) (mps f (next coll))))))", "problem": 118, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn m[f l]\n  (if (empty? l)\n    nil\n    (lazy-seq\n      (cons (f (first l))\n            (m f (next l))))))", "problem": 118, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn m [f [a & b]]\n  (lazy-cat [(f a)]\n    (when (coll? b) (m f b))))", "problem": 118, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn mymap\n  [f coll]\n    (if (empty? coll)\n        []\n        (lazy-seq (cons (f (first coll)) (mymap f (next coll))))))", "problem": 118, "user": "4e7ada51535db169f9c796ae"}, {"code": "(fn map* [f coll]\n  (when-let [s (seq coll)]\n    (cons (f (first s)) (lazy-seq (map* f (rest coll))))))", "problem": 118, "user": "4dc0ff08535d020aff1edf84"}, {"code": "(fn m [f [a & r]]\r\n      (when a (lazy-cat [(f a)] (m f r))))", "problem": 118, "user": "4dae4da5c9a9d6ed4e99dc57"}, {"code": "(fn my-map [f s]\n  (if s \n    (lazy-seq  (cons (f (first s)) (my-map f (next s)) )) \n    nil))", "problem": 118, "user": "4dcc5aff535d5973398f9293"}, {"code": "(fn m [f [x & xs]] (lazy-seq (when x (cons (f x) (m f xs)))))", "problem": 118, "user": "4db92654535d1e037afb21a0"}, {"code": "(fn this [f x] (when (seq x)\n                (cons (f (first x))\n                  (lazy-seq (this f (rest x))))))", "problem": 118, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn m [f [x & y]] (if x (lazy-seq (cons (f x) (m f y)))))", "problem": 118, "user": "4e823ed7535db62dc21a62c7"}, {"code": "(fn l [f [a & m]]\r\n  (lazy-seq\r\n    (cons (f a) (if m (l f m)))))", "problem": 118, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn m [f c]\r\n      (lazy-seq\r\n\t      (when-let [s (seq c)]\r\n\t\t\t(cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn my-map [f coll]\n  (lazy-seq\n    (when (seq coll)\n      (cons (f (first coll))\n            (my-map f (next coll))))))", "problem": 118, "user": "4dab218f30acd6ed15482a68"}, {"code": "(fn my-map [f coll]\n  (if (empty? coll)\n      nil\n      (lazy-seq\n        (cons (f (first coll))\n              (my-map f (rest coll))))))", "problem": 118, "user": "4daf36c2edd6309eace4d175"}, {"code": "(fn recf [f coll]\n  (if-not (empty? coll)\n\t        (cons (f (first coll)) (lazy-seq (recf f (rest coll))))))", "problem": 118, "user": "4db045b5838c48654951d9be"}, {"code": "(fn map1 [f xs] \n  (when (not (empty? xs))\n    (lazy-seq (cons (f (first xs))\n      (map1 f (rest xs))))))", "problem": 118, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn my-map [f coll]\n  (if (seq coll)\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))\n    nil))", "problem": 118, "user": "4e8f4f64535d65386fec2149"}, {"code": "(fn x [f c]\n  (if-not (empty? c)\n          (cons (f (first c)) (lazy-seq (x f (rest c))))))", "problem": 118, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn m [f xs] \n    (lazy-seq (when-let [[x & xs] (seq xs)]\n                  (cons (f x) (m f xs)))))", "problem": 118, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(fn mapp [f li] (if (empty? li) '() (lazy-seq(cons ( f (first li)) (mapp f (rest li)) ))))", "problem": 118, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn m [f l]\n  (if (empty? l)\n    []\n    (lazy-seq (cons (f (first l))\n                    (m f (rest l))))))", "problem": 118, "user": "4e9734d9535dbda64a6f6b50"}, {"code": "(fn my-map [f coll]\n    (if (not coll)\n      '()\n      (cons (f (first coll)) (lazy-seq (my-map f (next coll))))))", "problem": 118, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "(fn re-map [f col]\n  (if (seq col) (lazy-seq\n               (cons (f (first col)) (re-map f (rest col))))\n      nil))", "problem": 118, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "(fn m [f c]\n   (lazy-seq\n    (when-let [s (seq c)]\n      (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn mymap [f [x & xs]]\n  (cons (f x) (if-not (empty? xs)\n                (lazy-seq (mymap f xs)))))", "problem": 118, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn m [f [a & b]] (cons (f a) (lazy-seq (when b (m f b)))))", "problem": 118, "user": "4ea09fa4535d7eef308072aa"}, {"code": "(fn m [f s]\n  (lazy-seq\n    (when (seq s)\n      (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn my-map\n([f coll] (if (empty? coll) coll\n   (lazy-seq \n     (cons (f (first coll))(my-map f (rest coll)))))))", "problem": 118, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn my-map [f s]\n  (if (empty? s) []\n      (lazy-seq (cons (f (first s))\n                  (my-map f (rest s))))))", "problem": 118, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(letfn [(mmaapp [f c] \n    (lazy-seq \n      (when-let [s (seq c)] \n        (cons (f (first c)) (mmaapp f (next c))))))] mmaapp)", "problem": 118, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "(fn mapx\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (mapx f (rest s)))))))", "problem": 118, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn re-map [f col]\n(if (seq col) (lazy-seq\n(cons (f (first col)) (re-map f (rest col))))\nnil))", "problem": 118, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn my-map [f [x & r]]\n  (when x (lazy-seq (cons (f x) (my-map f r)))))", "problem": 118, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn m [f [x & r]]\n  (lazy-seq (cons (f x) (when r (m f r)))))", "problem": 118, "user": "4db2eac3535df7e46ed9b6c8"}, {"code": "(fn m [f s]\n  (lazy-seq\n    (if (seq s)\n      (cons (f (first s)) (m f (rest s)))\n        '())))", "problem": 118, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn flap\n  [f s]\n  (when-not (empty? s)\n    (lazy-seq (cons (f (first s))\n                    (flap f (rest s))))))", "problem": 118, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn re-map [f col]\r\n  (if (seq col) (lazy-seq\r\n               (cons (f (first col)) (re-map f (rest col))))\r\n      nil))", "problem": 118, "user": "4e8ddf32535d65386fec213c"}, {"code": "(fn m [f s] \n  (if (seq s)\n    (cons (f (first s))\n          (lazy-seq (m f (rest s))))\n    ()))", "problem": 118, "user": "4db1b3951254ad5b4805fa6f"}, {"code": "(fn mp[f c] (lazy-seq\r\n  (when-let [s (seq c)] s\r\n     (cons (f (first s))\r\n       (mp f (rest s))))))", "problem": 118, "user": "4e7650c5535d324fb2983d68"}, {"code": "(fn my-map [f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn mapit [f s]\r\n  (lazy-seq\r\n    (if (seq s)\r\n      (cons (f (first s)) (mapit f (rest s)))\r\n      []\r\n      )\r\n    )\r\n  )", "problem": 118, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "(fn m [f coll]\n  (if (empty? coll)\n    []\n    (cons (f (first coll)) (lazy-seq (m f (rest coll))))))", "problem": 118, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "(fn this [f xs]\n  (lazy-seq\n  (if (empty? xs)\n    nil\n    (cons (f (first xs)) (this f (rest xs))))))", "problem": 118, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "(fn my-map [f xs]\r\n  (if (empty? xs) '()\r\n    (lazy-seq (cons (f (first xs)) (my-map f (rest xs))))))", "problem": 118, "user": "4e994541535dbda64a6f6b64"}, {"code": "(fn mmap [f s]\n  (when s\n   (lazy-seq (cons (f (first s)) (mmap f (next s))))))", "problem": 118, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn m [f l] (if (empty? l) \n                ()\n                (lazy-seq (cons (f (first l)) (m f (rest l))))))", "problem": 118, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn tmp [f l] \n  (if (empty? l) l\n    (lazy-seq (cons (f (first l)) (tmp f (rest l))))))", "problem": 118, "user": "4dbdab4e535d020aff1edf49"}, {"code": "(fn my-map[f coll]\n  (lazy-seq\n    (if-let [s (seq coll)]\n      (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn m [f s] \n  (if s \n    (cons \n      (f (first s)) \n      (lazy-seq (m f (next s))))))", "problem": 118, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn m [f [x & y]]\n  (if x (cons (f x) (lazy-seq (m f y)))))", "problem": 118, "user": "4e72ac47535d5021c1a89666"}, {"code": "(fn my-map [func coll]\n  (lazy-seq\n  (if (empty? coll)\n    []\n    (cons (func (first coll))\n      (my-map func (rest coll))))))", "problem": 118, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn mymap [f s]\n  (if (empty? s)\n      nil\n      (lazy-seq (cons (f (first s))\n        (mymap f (rest s))))))", "problem": 118, "user": "4e6a73d0535d8ccf87e9fee7"}, {"code": "(fn mapp [f c]\n  (lazy-seq\n  (if-let [s (seq c)]\n(cons (f (first c)) (mapp f (next c))))))", "problem": 118, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn m [f l] \n  (if (empty? l) \n    nil \n    (cons (f (first l)) (lazy-seq (m f (rest l))))\n  )\n)", "problem": 118, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn map* [f xs]\n  (when (seq xs)\n    (cons\n      (f (first xs))\n      (lazy-seq (map* f (rest xs))))))", "problem": 118, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "(fn m [f s] (if s (lazy-seq (let [[x & y] s] (cons (f x) (m f y)))) s))", "problem": 118, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn mymap [f x] (lazy-seq (when-let [s (seq x)] \n  (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "4ea9b80c535d7eef30807306"}, {"code": "(fn lazy-map\n  [f c]\n  (lazy-seq\n    (if (empty? c)\n      []\n      (cons (f (first c)) (lazy-map f (rest c))))))", "problem": 118, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn m [f x] (if (empty? x) [] (cons (f (first x)) (lazy-seq (m f (rest x))))))", "problem": 118, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn my-map [f coll]\n        (when (seq coll)\n          (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "problem": 118, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn foo [f s] \n  (if (not (empty? s)) \n(lazy-seq (cons (f (first s)) (foo f (rest s))))))", "problem": 118, "user": "4eabb245535d7eef30807319"}, {"code": "(fn m [f s]\n   (if (seq s)\n     (cons (f (first s))\n           (lazy-seq (m f (next s))))\n     nil))", "problem": 118, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn m [f s]\n  (if (not (seq s))\n    nil\n    (cons (f (first s))\n      (lazy-seq (m f (rest s))))))", "problem": 118, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "#(rest (reductions (fn [_ x] (% x)) (cons 1 %2)))", "problem": 118, "user": "4eb25069535d7eef30807348"}, {"code": "(fn ma\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (ma f (rest s)))))))", "problem": 118, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn my-map [f xs]\n  (lazy-seq\n    (if (empty? xs)\n      xs\n      (cons (f (first xs)) (my-map f (rest xs))))))", "problem": 118, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn mymap [f coll]\n  (if (empty? coll) nil\n  (lazy-seq (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [f coll]\r\n  (letfn [(mymap [[x & more]]\r\n            (if more\r\n              (lazy-seq (cons (f x) (mymap more)))\r\n              [(f x)]))]\r\n     (mymap coll)))", "problem": 118, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn ff [f s] (if s (lazy-seq (cons (f (first s)) (ff f (next s))))))", "problem": 118, "user": "4dcd2065535d5973398f929a"}, {"code": "(fn my-map [func coll]\n  (when (not-empty coll)\n    (lazy-seq\n      (cons\n        (func (first coll))\n        (my-map func (rest coll))))))", "problem": 118, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn [f s] (lazy-cat (rest (reductions #(f %2) [] s))))", "problem": 118, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn remap [fun cadena] \n    (if (empty? cadena)\n  []\n\t(lazy-seq (cons (fun (first cadena)) (remap fun (rest cadena))) )\n  )\n)", "problem": 118, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn mymap [f seq] \n  (if (empty? seq) '()\n    (lazy-seq (cons (f (first seq)) (mymap f (rest seq))))))", "problem": 118, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "(fn m [f [x & xs]]\n  (cons (f x)\n    (when xs (lazy-seq (m f xs)))))", "problem": 118, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "(fn m [f coll]\n  (lazy-seq\n    (when (seq coll)\n      (cons (f (first coll)) (m f (rest coll))))))", "problem": 118, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "(fn m [f [a & xs :as c]] \n  (lazy-seq \n\t\t(if c\n\t\t\t(cons (f a) (m f xs)))))", "problem": 118, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn my-map [f coll]\n  (if (seq coll)\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))\n    []))", "problem": 118, "user": "4eb51942535d7eef30807365"}, {"code": "(fn m [f c]\n  (if (seq c)\n    (lazy-seq (cons (f (first c)) (m f (rest c))))\n    '()))", "problem": 118, "user": "4db0114d838c48654951d9b8"}, {"code": "(fn r [f c](if(next c) \n   (lazy-seq(cons(f(first c))(r f(next c))))\n   [(f(first c))]))", "problem": 118, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn  mymap [f col]\n  (if (first col) (cons (f (first col)) (lazy-seq (mymap f (rest col)  )))))", "problem": 118, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn mapj [f s]\n  (cond\n    (empty? s) '()\n    :else\n      (lazy-seq\n      (cons (f (first s)) (mapj f (rest s))))))", "problem": 118, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn nmap [f xs]\n  (if (empty? xs)\n    '()\n    (lazy-seq (cons (f (first xs)) (nmap f (rest xs))))))", "problem": 118, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn my-map [f coll]\n  (if (empty? coll) nil\n    (lazy-seq \n      (cons (f (first coll)) \n      (my-map f (rest coll))))))", "problem": 118, "user": "4e25176e535d04ed9115e829"}, {"code": "(fn m [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn mAp [f s]\n  (if (empty? s)\n    '()\n    (cons (f (first s)) (lazy-seq (mAp f (rest s))))))", "problem": 118, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn m [f l] \n  (if (seq l) \n     (lazy-cat [(f (first l))] (m f (rest l))) []))", "problem": 118, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "(fn mp [f c]\n  (if (empty? c) nil\n    (cons (f (first c))\n    (lazy-seq\n      (mp f (rest c))))))", "problem": 118, "user": "4daf8f84edd6309eace4d17a"}, {"code": "(fn x-map [f s]\n  (lazy-seq\n    (if (seq s)\n      (cons (f (first s)) (x-map f (rest s))))))", "problem": 118, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "(fn my-map [f s]\n  (if (empty? s) ()\n      (lazy-seq\n       (cons (f (first s))\n             (my-map f (rest s))))))", "problem": 118, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn mymap [f s]\n      (if (nil? s) '()\n    (lazy-seq\n      (cons (f (first s)) (mymap f (next s)) ))))", "problem": 118, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn mymap [f xs] \n  (if (empty? xs) \n      '() \n      (lazy-seq (cons (f (first xs)) (mymap f (rest xs)))\n)))", "problem": 118, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "(fn my-map [f coll]\n  (when-not (empty? coll)\n    (lazy-seq\n      (let [[x & xs] coll]\n        (cons (f x) (my-map f xs))))))", "problem": 118, "user": "4ecf42b4535d1f5ad70dba3c"}, {"code": "(fn ! [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first coll)) (! f (rest coll))))))", "problem": 118, "user": "4ebd4448535dfed6da9c6d8f"}, {"code": "(fn [f xs] (rest (reductions #(f %2) '() xs)))", "problem": 118, "user": "4ece9ca9535d23f03622770f"}, {"code": "(fn m [f s]\n  (lazy-seq\n    (when-let [[h & t] (seq s)]\n      (cons (f h) (m f t)))))", "problem": 118, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn x-map [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll)) (x-map f (next coll))))))", "problem": 118, "user": "4eccb190535d23f0362276fe"}, {"code": "(fn m [f [h & r]] (lazy-seq (cons (f h) (if r (m f r)))))", "problem": 118, "user": "4e704293535d5021c1a89634"}, {"code": "(fn my-map [f s]\n  (lazy-seq\n    (if (seq s)\n      (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn my-map [f coll]\n  (if (seq coll)\n    (lazy-cat [(f (first coll))]\n      (my-map f (rest coll)))\n    []))", "problem": 118, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn m [f s]\n  (lazy-seq (if (seq s) (cons (f (first s)) (m f (rest s))) ())))", "problem": 118, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn cm [f x] (lazy-seq\n                 (if (empty? x) [] (cons (f (first x)) (cm f (rest x))))))", "problem": 118, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn my-map [f coll]\n    (lazy-seq \n      (if (empty? coll)\n          '()\n                  (cons (f (first coll)) (my-map f (rest coll))))))", "problem": 118, "user": "4edbca52535d10e5ff6f531e"}, {"code": "(fn m [f [head & tail :as coll]]\n  (if (empty? coll)\n    '()\n    (lazy-seq (cons (f head) (m f tail)))))", "problem": 118, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn my-map [f s] \n  (lazy-seq\n    (when-let [l s]\n      (if (empty? l) \n      l \n      (cons (f (first l)) (my-map f (rest l)))))))", "problem": 118, "user": "4ec3650f535dcc7ae8597d56"}, {"code": "(fn mymap [f [x & more]]\n  (when x\n    (lazy-seq (cons (f x) (mymap f more)))))", "problem": 118, "user": "4e513758535dc968683fc4f3"}, {"code": "(fn m [f l] \n  (if (seq l) \n     (lazy-cat [(f (first l))] (m f (rest l))) []))", "problem": 118, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn recf [f coll]\n  (if-not (empty? coll)\n          (cons (f (first coll)) (lazy-seq (recf f (rest coll))))))", "problem": 118, "user": "4ea55757535d7eef308072d3"}, {"code": "(fn select[f xs]\n  (lazy-seq\n    (when-let[sxs (seq xs)]\n      (cons\n        (f(first sxs)) \n        (select f (rest sxs))))))", "problem": 118, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "(fn m [f acoll]\n  (lazy-seq\n    (if (empty? acoll) []\n        (let [[x & xs] acoll]\n          (cons (f x) (m f xs))))))", "problem": 118, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn mymap [f x]\n  (when-let [a (first x)]\n    (lazy-seq (cons (f a) (mymap f (rest x))))))", "problem": 118, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(fn m [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll)) (m f (rest coll))))))", "problem": 118, "user": "4e89ff3d535d3e98b802328a"}, {"code": "(fn m [f s]\n  (if (empty? s) '()\n      (cons (f (first s))\n            (lazy-seq (m f (rest s))))))", "problem": 118, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn mymap [f s]\n  (when-not (nil? s)\n    (lazy-seq (cons (f (first s)) (mymap f (next s))))))", "problem": 118, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "(fn m [f coll]\n  (lazy-seq\n    (if (nil? (seq coll))\n      nil\n      (cons (f (first coll)) (m f (next coll))))))", "problem": 118, "user": "4ed9fe5f535d10e5ff6f5308"}, {"code": "(fn g [f coll]\n  (if (empty? coll)\n    ()\n    (cons (f (first coll)) (lazy-seq (g f (rest coll))))))", "problem": 118, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn my-map [f xs]\n  (if (empty? xs)\n      xs\n      (lazy-seq (cons (f (first xs))\n                      (my-map f (rest xs))))))", "problem": 118, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "(fn m [f s]\n  (if-let [a (first s)]\n    (lazy-seq (cons (f a) (m f (rest s))))\n    []))", "problem": 118, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn m [f c] (if (empty? c) [] (lazy-seq (cons (f (first c)) (m f (rest c))))))", "problem": 118, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn m [f s]\n   (if s\n     (lazy-seq (cons (f (first s)) (m f (next s))))))", "problem": 118, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn [f s]\n  (letfn [(m [s] \n    (if (empty? s)\n      '()\n      (lazy-seq (cons (f (first s)) (m (rest s))))))]\n    (m s)))", "problem": 118, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn ! [f c]\n  (when (not-empty c)\n   (lazy-seq (cons (f (first c)) (! f (rest c))))))", "problem": 118, "user": "4ee7ef87535d93acb0a66872"}, {"code": "(fn M [f [h & t :as l]]\n  (if h\n    (lazy-seq (cons (f h) (M f t)))\n    l))", "problem": 118, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn mm [f xs]\n  (lazy-seq\n    (when (seq xs)\n       (cons (f (first xs)) (mm f (rest xs))))))", "problem": 118, "user": "4ee88269535d93acb0a6687f"}, {"code": "(fn mp [f [fst & rs :as sq]]\r\n  (if (empty? sq)\r\n    []\r\n    (lazy-seq (cons (f fst) (mp f rs)))))", "problem": 118, "user": "4ee40938535d10e5ff6f5375"}, {"code": "(fn func [f [n & ns]]\n  (lazy-seq (cons (f n) (if ns (func f ns)))))", "problem": 118, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn mp [f s]  (if (first s)\n                  (lazy-seq (cons (f (first s)) (mp f (next s)) ) )\n                  () ) )", "problem": 118, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn map_ [f coll] \n            (if (empty? coll) () \n                (lazy-seq (cons (f (first coll))\n                                (map_ f (rest coll))))))", "problem": 118, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn [f coll]\n  (rest (reductions #(f %2) 0 coll)))", "problem": 118, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "(fn M [f [c & C]] (lazy-seq (cons (f c) (if C (M f C)))))", "problem": 118, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "(fn my-map [f coll]\n  (if (seq coll)\n    (cons (f (first coll)) \n          (lazy-seq (my-map f (rest coll))))\n    coll))", "problem": 118, "user": "4ee9d697535d93acb0a66895"}, {"code": "(fn m [f s] (if-let [s (seq s)] (cons (f (first s)) (lazy-seq (m f (next s)))) s))", "problem": 118, "user": "4db091b7838c48654951d9c2"}, {"code": "(fn map2 [f col] (if (empty? col) col (lazy-seq (cons (f (first col)) (map2 f (rest col))))))", "problem": 118, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn g [f x] \r\n  (if (seq x)\r\n      (lazy-seq (cons\r\n        (f (first x))\r\n        (g f (rest x))))))", "problem": 118, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "(fn m [f v]\n  (if (empty? v)\n      []\n      (cons (f (first v)) (lazy-seq (m f (rest v))))))", "problem": 118, "user": "4ee868be535d93acb0a6687d"}, {"code": "(fn mmap [f c]\n  (lazy-seq\n   (when-let [s (seq c)]\n     (cons (f (first s)) (mmap f (rest s))))))", "problem": 118, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn map* [f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (map* f (rest s))))))", "problem": 118, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn reimplement-map\n  [f coll]\n  (if (empty? coll)\n    []\n    (cons (f (first coll)) (lazy-seq (reimplement-map f (rest coll))))))", "problem": 118, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "(fn m [f s] (when s (lazy-seq (cons (f (first s)) (m f (next s))))))", "problem": 118, "user": "4eecdd66535d93acb0a668b9"}, {"code": "#(reductions (fn[s,e](%1 e)) (%1 (first %2)) (rest %2))", "problem": 118, "user": "4ec75829535d6d7199dd36e1"}, {"code": "(fn my-map [f [x & xs]]\n  (if (nil? x)\n    x\n    (lazy-seq (cons (f x) (my-map f xs)))))", "problem": 118, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn m [f [h & t :as v]] \n  (if (empty? v)\n      ()\n      (lazy-seq (cons (f h) (m f t)))))", "problem": 118, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn m [f c] (when (seq c) (lazy-seq (cons (f (first c)) (m f (rest c))))))", "problem": 118, "user": "4ef2d243535dced4c769f221"}, {"code": "(fn map* [f xs]\n  (when (and (sequential? xs) (not (empty? xs)))\n    (cons (f (first xs)) (lazy-seq (map* f (rest xs))))))", "problem": 118, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn foo [f s & frst] (if (seq frst)\n                        (lazy-seq (cons (first frst) (if s (foo f (next s) (f (first s))))))\n                        (foo f (next s) (f (first s)))))", "problem": 118, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn vg [f kol]\n  (lazy-seq\n    (if (seq kol)\n      (cons (f (first kol)) (vg f  (rest kol)))\n      '()\n    ))\n    )", "problem": 118, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn map1 [f xs]\n  (lazy-seq\n    (let [[x & more] xs]\n      (if x (cons (f x) (map1 f more))))))", "problem": 118, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(fn mm [f coll]\r\n    (lazy-seq \r\n      (when-let [s (seq coll)]\r\n        (cons (f (first s))\r\n              (mm f (rest s))))))", "problem": 118, "user": "4ef1ee67535dced4c769f219"}, {"code": "(fn mmap [f s] (lazy-seq (if (seq s) (cons (f (first s)) (mmap f (next s))))))", "problem": 118, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "#(letfn [(map* [f coll ] (if (empty? coll) nil (lazy-seq (cons (f (first coll)) (map* f (rest coll))))))] (map* % %2))", "problem": 118, "user": "4ef4e5fa535dced4c769f242"}, {"code": "(fn mm [f s]\n    (when-not (empty? s)\n      (lazy-seq (cons (f (first s)) (mm f (rest s))))))", "problem": 118, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn r [f c]\n  (lazy-seq \n    (when-let [[h & t] (seq c)]\n      (cons (f h) (r f t)))))", "problem": 118, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn my-map [f s]\r\n  (if (= s nil)\r\n\t\tnil\r\n\t\t(lazy-seq (cons (f (first s)) (my-map f (next s))))))", "problem": 118, "user": "4efb92ce535dced4c769f27a"}, {"code": "(fn mymap [f col]\n (if col\n  (cons (f (first col)) (lazy-seq (mymap f (next col))))))", "problem": 118, "user": "4ef992c8535dced4c769f268"}, {"code": "(fn g [f s]\r\n    (if s\r\n    (lazy-seq (cons (f (first s)) (g f (next s))))))", "problem": 118, "user": "4daddc19c9a9d6ed4599dc57"}, {"code": "(fn m [f [e & r]] (cons (f e) (lazy-seq (if r (m f r)))))", "problem": 118, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn mm\r\n  ([f coll]\r\n   (lazy-seq\r\n    (when-let [s (seq coll)]\r\n      (cons (f (first s)) (mm f (rest s)))))))", "problem": 118, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "(fn my-map [f xs]\n  (cond (empty? xs) '()\n        true (lazy-seq\n              (cons (f (first xs)) (my-map f (rest xs))))))", "problem": 118, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn my-map [f coll]\n  (if (empty? coll)\n    ()\n    (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))))", "problem": 118, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn map2 [f s]\n  (when (seq s)\n    (lazy-seq (cons (f (first s))\n                    (map2 f (rest s))))))", "problem": 118, "user": "4dbb1126535d1e037afb21b3"}, {"code": "(fn my-map [f lst]\n  (lazy-seq \n    (if (seq lst)\n      (cons (f (first lst)) (my-map f (next lst))))))", "problem": 118, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "(fn x [f coll]\n  (if (empty? coll)\n      nil\n  (lazy-seq (cons (f (first coll))\n                  (x f (rest coll))))))", "problem": 118, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn my-map [f coll]\n    (lazy-seq\n      (when-let [s (seq coll)]\n        (if (empty? s)\n          '()\n          (cons (f (first s)) (my-map f (rest s)))))))", "problem": 118, "user": "4dc29a1d535d020aff1edf96"}, {"code": "(fn m [f c]\n  (if (seq c)\n    (cons (f (first c))\n          (lazy-seq (m f (rest c))))\n    '()))", "problem": 118, "user": "4ef57a7f535dced4c769f246"}, {"code": "(fn m [f s]\n  (lazy-seq\n   (if (seq s)\n     (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn g [f v] (lazy-seq (when-let [s (seq v)] (cons (f (first s)) (g f (next s))))))", "problem": 118, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn m [f s]\n  (lazy-seq (when (seq s) (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn m [f v]\n  (lazy-seq\n    (when (seq v)\n      (cons (f (first v)) (m f (rest v))))))", "problem": 118, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn ! [f coll]\n  (if-not (empty? coll) (lazy-seq (cons (f (first coll)) (! f (rest coll))))))", "problem": 118, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn map* [fun s]\n  (if (empty? s)\n      []      \n  (cons (fun (first s))\n       (lazy-seq (map* fun (rest s))))))", "problem": 118, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn fmap [f coll]\n  (when-let [[h & t] (seq coll)]\n    (cons (f h) (lazy-seq (fmap f t)))))", "problem": 118, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn my-map [f xs]\n  (if-let [x (first xs)]\n    (lazy-seq (cons (f x) (my-map f (rest xs)))) \n    nil))", "problem": 118, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn m [f s]\n  (if (empty? (rest s))\n    (list (f (first s)))\n    (lazy-seq (cons (f (first s))\n                    (m f (rest s))))\n    ))", "problem": 118, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn m [f [a & b]] (lazy-seq (if a (cons (f a) (m f b)))))", "problem": 118, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn m [f s]\n  (if (empty? s)\n    '()\n    (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "4f04f847535dcb61093f6beb"}, {"code": "(fn f [g x]\n  (if (empty? x)\n    []\n    (cons (g (first x)) (lazy-seq (f g (rest x))))))", "problem": 118, "user": "4f062d4a535dcb61093f6c08"}, {"code": "(fn m[f s]\n      (when-not (empty? s)\n        (cons (f (first s))\n              (lazy-seq (m f (next s))))))", "problem": 118, "user": "4e8df08f535d65386fec213e"}, {"code": "(fn m [f s]\n  (when s\n    (cons (f (first s)) (lazy-seq (m f (next s))))))", "problem": 118, "user": "4f083048535dcb61093f6c33"}, {"code": "(fn mp [f s]\n  (when-not (empty? s)\n    (cons (f (first s)) (lazy-seq (mp f (rest s))))))", "problem": 118, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn prob-118 [f s]\n  (lazy-seq\n    (when (not (empty? s))\n      (cons (f (first s)) (prob-118 f (rest s))))))", "problem": 118, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn m [f s]\n  (if\n    (not s) '()\n    (lazy-seq (cons (f (first s)) (m f (next s))))))", "problem": 118, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn m [f s] (if (empty? s) s \n  (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn remap [f [a & b]]\n  (if a\n    (cons (f a) (lazy-seq (remap f b)))))", "problem": 118, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "(fn map*\n  [f s]\n  (cons (f (first s))\n        (lazy-seq\n          (when-let [r (seq (rest s))]\n            (map* f r)))))", "problem": 118, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn m [func coll]\n  (if (seq coll)\n    (lazy-seq (cons (func (first coll)) (m func (rest coll))))))", "problem": 118, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn b-map [f s]\n  (if (seq s)\n    (lazy-seq (cons (f (first s)) (b-map f (rest s))))\n    (lazy-seq)))", "problem": 118, "user": "4eb955da535dfed6da9c6d50"}, {"code": "(fn [f coll]\n  (letfn [(m [f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (m f (rest s))))))] (m f coll)))", "problem": 118, "user": "4f0b2028535d0136e6c222ff"}, {"code": "(fn m [f s] \n  (if s (cons (f (first s)) (lazy-seq (m f (next s))))))", "problem": 118, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn mymap [f s]\n  (if (seq s)\n    (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "(fn m [f c]\n  (lazy-seq\n    (when-let [[h & t] (seq c)]\n      (cons (f h) (m f t)))))", "problem": 118, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn m [f col]\n  (lazy-seq\n    (when (not (empty? col)) (cons (f (first col)) (m f (rest col))))))", "problem": 118, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn g\n  [f x] \n  (if (empty? x) []\n      (lazy-seq (cons (f (first x)) (g f (next x))))))", "problem": 118, "user": "4daeabf6edd6309eace4d15c"}, {"code": "(fn [f coll]\n    (letfn [(new-map [f coll]\n              (lazy-seq\n               (when-let [s (seq coll)]\n                 (cons (f (first s)) (new-map f (rest s))))))]\n       (new-map f (seq coll))))", "problem": 118, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn my-map [f l]\r\n    (lazy-seq\r\n     (when-let [s (seq l)]\r\n       (if (empty? s)\r\n         '()\r\n         (cons (f (first s)) (my-map f (rest s)))))))", "problem": 118, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn mymap [f c]\n    (lazy-seq \n      (when-let [s (seq c)]\n        (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "(fn lp [f coll]\n  (when-not (nil? coll)\n    (lazy-seq (cons (f (first coll))\n                    (lp f (next coll))))))", "problem": 118, "user": "4daec9dcedd6309eace4d15f"}, {"code": "(fn map* [f [x & xs]] (when x\n                        (lazy-seq (cons (f x) (map* f xs)))))", "problem": 118, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn m [f c]\n  (lazy-seq\n    (if-let [c (seq c)]\n      (cons (f (first c)) (m f (rest c))))))", "problem": 118, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn mymap [f coll]\n  (if (empty? coll) ()\n    (lazy-seq (cons (f (first coll))\n                    (mymap f (rest coll))))))", "problem": 118, "user": "4f07bc41535dcb61093f6c2c"}, {"code": "(fn [f s] (reductions #(f %2) (f (first s)) (rest s)))\n\n; this \"works\"... but reverses output\n;(fn f [f s] (reduce #(conj %1 (f %2)) (seq []) s))", "problem": 118, "user": "4efd98fa535de96065cf5086"}, {"code": "(fn my-map [func coll]\n  (if (seq coll)\n    (lazy-seq\n     (cons (func (first coll)) (my-map func (rest coll))))\n    nil))", "problem": 118, "user": "4e95a440535dbda64a6f6b37"}, {"code": "(fn m [pred coll] (if (empty? coll) (list) (lazy-seq (cons (pred (first coll)) (m pred (rest coll))))))", "problem": 118, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn m [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4f12ab23535d64f603146429"}, {"code": "(fn my-map [f coll]\r\n    (lazy-seq\r\n     (if (nil? (seq coll))\r\n       '()\r\n       (cons (f (first coll)) (my-map f (rest coll))))))", "problem": 118, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn my-map [f x]\r\n  (lazy-seq\r\n    (if (seq x)\r\n        (cons (f (first x)) (my-map f (rest x)))\r\n        '())))", "problem": 118, "user": "4de760a3535d08e6dec9fdf9"}, {"code": "(fn mymap[f coll]\n  (when-let [s (seq coll)]\n    (lazy-seq\n      (cons (f (first s)) (mymap f (next s)))\n    )\n  )\n)", "problem": 118, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn my-lazy-map [f s]\n    (if (empty? s)\n        '()\n        (lazy-seq (cons (f (first s)) (my-lazy-map f (rest s))))))", "problem": 118, "user": "4f128865535d64f603146428"}, {"code": "(fn mapp [f coll]\n  (if (empty? coll) \n      '()\n      (lazy-seq (cons (f (first coll)) (mapp f (rest coll))))))", "problem": 118, "user": "4f13047d535d64f60314642c"}, {"code": "(fn mymap [f s]\n    (lazy-seq\n     (when (seq s)\n       (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn t [f xs] (if (empty? xs) nil (lazy-seq (cons (f (first xs)) (t f (rest xs))))))", "problem": 118, "user": "4ef6e689535dced4c769f24f"}, {"code": "(letfn [(mymap [f s]\n  (lazy-seq (when (seq s)\n    (cons (f (first s))\n          (mymap f (rest s))))))]\n  mymap)", "problem": 118, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn this [f coll]\n     (lazy-seq\n\t     (when-let [s (seq coll)]\n\t\t       (cons (f (first s)) (this f (rest s))))))", "problem": 118, "user": "4f066916535dcb61093f6c10"}, {"code": "(fn mmap\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n        (cons (f (first s)) (mmap f (rest s)))))))", "problem": 118, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(let [eagermap (fn eager-map [op sequ](if (empty? sequ) '() (lazy-seq (cons (op (first sequ))(eager-map op (rest sequ))))))\r\nlazymap (fn lazy-map [op sequ](lazy-seq (cons (op (first sequ))(lazy-map op (rest sequ)))))]\r\n(fn [op sequ](if (or (counted? sequ)(not-any? #(> % 10000) sequ)) (eagermap op sequ)(lazymap op sequ))))", "problem": 118, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "(fn mahMap[f xs]\r\n  (if (seq xs)\r\n    (lazy-seq (cons (f (first xs)) (mahMap f (rest xs))))\r\n    nil))", "problem": 118, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "(fn m [f s] (if (empty? s) nil (lazy-seq (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "(fn m [f vals]\n  (when (seq vals)\n    (lazy-seq (cons (f (first vals)) (m f (rest vals))))))", "problem": 118, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn our-map [f x]\r\n  (if (empty? x)\r\n    []\r\n    (cons (f (first x)) (lazy-seq (our-map f (rest x))))))", "problem": 118, "user": "4ef0f1a1535dced4c769f212"}, {"code": "(fn m [f c]\n  (lazy-seq \n    (when-not (empty? c)\n      (cons (f (first c)) (m f (rest c))))))", "problem": 118, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn my-map [f coll]\n  (when-let [e (first coll)]\n    (lazy-seq \n      (cons (f e) (my-map f (rest coll))))))", "problem": 118, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "(fn mymap \n  [f s]\t\n\t(lazy-seq\n\t\t(if (empty? s) \n\t\t\t[] \n\t\t\t(cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "4ef5c7ce535dced4c769f248"}, {"code": "(fn m [f c]\n    (when-let [[a & b] c]\n      (lazy-seq (cons (f a) (m f b)))))", "problem": 118, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn map2 [f xs]\n  (lazy-seq\n    (when-let [s (seq xs)]\n      (cons (f (first s)) (map2 f (rest s))))))", "problem": 118, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn f [x c]\n  (lazy-seq\n    (when c\n      (cons (x (first c)) (f x (next c))))))", "problem": 118, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn mmap [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq\n    (cons (f (first s))\n      (mmap f (rest s))))))", "problem": 118, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "(fn mym ([f coll] (lazy-seq (when-let [s (seq coll)] (cons (f (first s)) (mym f (rest s)))))))", "problem": 118, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn my-map [f s]\n  (if-not (empty? s)\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn x [f s] (lazy-seq (when-let [l (seq s)]\n  (cons (f (nth l 0)) (x f (rest l)))\n)))", "problem": 118, "user": "4f1595da535d64f603146444"}, {"code": "(fn mp [f coll]\n  (lazy-seq \n    (when-let [s (seq coll)]\n        (cons (f (first s)) (mp f (rest s))))))", "problem": 118, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "(fn my-map [f m]\n  (lazy-seq\n    (if (seq m)\n      (cons (f (first m)) (my-map f (rest m))))))", "problem": 118, "user": "4e8ad247535d65386fec2111"}, {"code": "(fn my-map [f xs]\n  (if (empty? xs)\n    []\n  (lazy-seq (cons (f (first xs)) (my-map f (rest xs))))))", "problem": 118, "user": "4f251302e4b0d66497709ff0"}, {"code": "#(rest (reductions (fn [a x] (% x)) 1 %2))", "problem": 118, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "#(rest (reductions (fn [a b] (% b)) 0 %2))", "problem": 118, "user": "4e498df9535dc968683fc4c4"}, {"code": "#(rest (reductions (fn [a b] (% b)) 0 %2))", "problem": 118, "user": "4f03688d535dcb61093f6aac"}, {"code": "(fn ff[f s] (if s (lazy-seq (cons (f (first s)) (ff f (next s))) )[] ))", "problem": 118, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn own [f xs]\n  (lazy-seq\n    (when-let [s (seq xs)]\n      (cons (f (first s)) (own f (rest s))))))", "problem": 118, "user": "4dc7e7a5535d8a4b2fd74290"}, {"code": ";(fn ny-map [f xs]\n;  (lazy-seq\n;    (when-let [xs (seq xs)]\n;      (cons (f (first xs)) (ny-map f (rest xs))))))\n\n(fn ny-map [f [x & xs]]\n  (if x\n    (cons (f x) (lazy-seq (ny-map f xs)))))", "problem": 118, "user": "4f07c8c3535dcb61093f6c2d"}, {"code": "(fn o [f c]\n  (if (empty? c)\n    '()\n     (lazy-seq \n       (cons \n         (f (first c)) \n         (o f (rest c))\n       ))))", "problem": 118, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn my-map\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (my-map f (rest s)))))))", "problem": 118, "user": "4f2c593ee4b0d6649770a053"}, {"code": "(fn mapA [f coll]\n  (lazy-seq\n    (if (seq coll)\n      (cons (f (first coll)) (mapA f (rest coll))))))", "problem": 118, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn [f x] (rest (reductions #(f %2) nil x)))", "problem": 118, "user": "4f280840e4b0d6649770a010"}, {"code": "(fn m [f c] (when-let [s (seq c)] (lazy-seq (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "(fn m [f xs]\n  (if (empty? xs)\n    xs\n    (lazy-seq (cons (f (first xs)) (m f (rest xs))))))", "problem": 118, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn problem-118 [f s]\n  (lazy-seq\n    (let [item (first s)]\n      (when (not (nil? item))\n        (cons (f item) (problem-118 f (rest s)))))))", "problem": 118, "user": "4f31519ae4b0d6649770a086"}, {"code": "(fn m [f [x & xs]]\n    (lazy-seq \n      (if xs\n        (cons (f x) (m f xs))\n        (list (f x)))))", "problem": 118, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn ! [func coll]\n   (if (empty? coll)\n     nil\n     (cons (func (first coll)) (lazy-seq (! func (rest coll))))\n     )\n   )", "problem": 118, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn mymap [f c]\n  (when (seq c)\n    (lazy-seq\n      (cons (f (first c)) (mymap f (rest c))))))", "problem": 118, "user": "4dc1e1e4535d020aff1edf90"}, {"code": "(fn new-map [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (new-map f (rest s))))))", "problem": 118, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn mymap [f coll] (lazy-seq (when (seq coll) (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn m[f coll]\n  (lazy-seq\n    (if (= coll '())\n        '()\n        (cons (f (first coll)) (m f (rest coll))))))", "problem": 118, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn l-map [f coll]\n  (if (empty? coll)\n    coll\n    (lazy-seq (cons (f (first coll)) (l-map f (rest coll))))))", "problem": 118, "user": "4f04d312535dcb61093f6be7"}, {"code": "(fn lazy-map [f c]\r\n  (if (empty? c)\r\n    []\r\n    (lazy-cat [(f (first c))] (lazy-map f (rest c)))))", "problem": 118, "user": "4f0f01c0535d0136e6c22329"}, {"code": "(fn m [f c]\n  (lazy-seq\n  (when-let [o (first c)]\n    (cons (f o) (m f (rest c))))))", "problem": 118, "user": "4dc986d0535d5973398f9285"}, {"code": "(fn map-re [f coll]\n  (lazy-seq \n    (when-let [s (seq coll)]\n      (cons (f (first s)) (map-re f (rest s))))))", "problem": 118, "user": "4f3cc2fbe4b0e243712b1f55"}, {"code": "(fn m [f c]\n           (lazy-seq\n             (if (empty? c)\n                 c\n                 (cons (f (first c)) (m f (rest c))))))", "problem": 118, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn mymap [f sq]\n  (lazy-seq\n    (when (seq sq)\n      (cons (f (first sq)) (mymap f (next sq))))))", "problem": 118, "user": "4f36f5f2e4b0e243712b1ece"}, {"code": "(fn this [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (this f (rest s))))))", "problem": 118, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn lazy-map-clone [f coll]\n         (lazy-seq\n           (if (not (empty? coll))\n             (cons (f (first coll)) (lazy-map-clone f (rest coll))))))", "problem": 118, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn re-map [f coll] (if (seq coll)\n  (lazy-seq (cons (f (first coll)) (re-map f (rest coll))))\n  nil))", "problem": 118, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "(fn __ [f s]\n  (lazy-seq\n    (when-let [se (seq s)]\n     (cons (f (first se)) (__ f (rest se))))))", "problem": 118, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn mp [f xs] (if (empty? xs) [] (lazy-seq (cons (f (first xs)) (mp f (rest xs))))))", "problem": 118, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "(fn [f coll] (letfn [( helper [c]\n                     (lazy-seq\n                      (when (seq c)\n\n                         (cons (f (first c)) (helper (rest c))))))]\n                (helper coll)))", "problem": 118, "user": "4f2aff4de4b0d6649770a044"}, {"code": "(fn m [f [a & more]]\n  (lazy-seq\n    (cons (f a) (if more (m f more)))))", "problem": 118, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn ! [f coll]\n  (if-let [s (seq coll)]\n    (lazy-seq  (cons (f (first s)) (! f (rest s))))))", "problem": 118, "user": "4f1d1299535d64f603146487"}, {"code": "(fn m [f s]\n      (if (empty? s)\n          ()\n          (cons (f (first s)) \n                (lazy-seq (m f (rest s))))))", "problem": 118, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn mymap [f c]\n  (when-not (empty? c)\n    (lazy-seq\n      (cons (f (first c)) (mymap f (rest c))))))", "problem": 118, "user": "4e46ac46535dc968683fc4b5"}, {"code": "(fn my-map [f s]\n  (if (seq s)\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))\n    nil))", "problem": 118, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "(fn this [f s]\n  (if (empty? s) nil\n  (lazy-seq (cons (f (first s)) (this f (rest s))))))", "problem": 118, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "(fn my-map [f col]\r\n   (if (empty? col) col\r\n       (lazy-seq\r\n        (cons (f (first col)) (my-map f (rest col))))))", "problem": 118, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "#(rest (reductions (fn [_ x] (% x)) 0 %2))", "problem": 118, "user": "4db1fe241254ad5b4805fa77"}, {"code": "(fn m [f s]\n  (lazy-seq\n    (when (seq s)\n      (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn mustela-map [f l]                                                   \n  (lazy-seq\n    (when-let [l (seq l)]\n      (cons (f (first l)) (mustela-map f (rest l))))))", "problem": 118, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn map* [f xs]\n  (if (empty? xs) '()\n      (lazy-seq (cons (f (first xs)) (map* f (rest xs))))))", "problem": 118, "user": "4f038499535dcb61093f6b09"}, {"code": "(fn mymap [f seq]\n    (if (empty? seq)\n        seq\n        (lazy-seq (cons (f (first seq)) (mymap f (rest seq))))))", "problem": 118, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn simp-map [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll))\n      (simp-map f (rest coll))))))", "problem": 118, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn x [f c]\n  (lazy-seq\n   (when (seq c) (cons (f (first c)) (x f (rest c))))))", "problem": 118, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn mymap [f s]\n  (lazy-seq\n    (when-let [ss (seq s)] \n      (cons (f (first ss)) (mymap f (rest ss))))))\n;\n; alternative mit mehr Destructuring:\n; (when-let [[h & t] (seq s)]\n;   (cons (f h) (mymap f t)))))", "problem": 118, "user": "4e131443535d04ed9115e7d3"}, {"code": "(fn m [f s]\n  (when s (lazy-seq (cons (f (first s)) (m f (next s))))))", "problem": 118, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "(fn _map[f coll] (lazy-seq (when-let [c (seq coll)] (cons (f (first c)) (_map f (rest c))))))", "problem": 118, "user": "4e8fb386535d65386fec2150"}, {"code": "(fn foo [f l]\r\n  (if (empty? l)\r\n      '()\r\n      (lazy-seq\r\n        (cons (f (first l))\r\n              (foo f (rest l))))))", "problem": 118, "user": "4eb66737535d7eef3080736b"}, {"code": "(fn m [f s]\n  (if (empty? s)\n    ()\n    (lazy-seq\n      (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn my-map [f x]\n  (lazy-seq\n    (if (seq x)\n      (cons (f (first x)) (my-map f (rest x)))\n      '())))", "problem": 118, "user": "4e6ac593535d8ccf87e9ff02"}, {"code": "(fn map_ [f s]\n  (if (empty? s) nil\n      (lazy-seq (cons (f (first s)) (map_ f (rest s))))))", "problem": 118, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn my-map [f coll]\n  (lazy-seq\n    (when-let [elem (first coll)]\n      (cons (f elem) (my-map f (rest coll))))))", "problem": 118, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn mmm [f coll]\n    (lazy-seq\n     (if (empty? coll) []\n         (cons (f (first coll)) (mmm f (rest coll))))))", "problem": 118, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn my-map [func coll]\n  (lazy-seq\n    (if (empty? coll)\n      '()\n      (cons \n        (func (first coll)) \n        (my-map func (rest coll))))))", "problem": 118, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn [f s]\n  ((fn ff [s]\n    (when-let [h (first s)]\n      (cons (f h)\n            (lazy-seq (ff (rest s))))))\n        s))", "problem": 118, "user": "4f047902535dcb61093f6bcc"}, {"code": "(fn [f s]\n  ((fn r [s]\n    (if (seq s)\n      (cons (f (first s)) (lazy-seq (r (rest s))))\n    s)) s))", "problem": 118, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn mapp [f a]\n  (if \n    (empty? a) a\n    (lazy-seq \n      (cons (f (first a)) \n            (mapp f (rest a))))))", "problem": 118, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "(fn mymap [f coll] \n    (lazy-seq\n    (when-let [s (seq coll)]\n        (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "4e8768f6535dceadca469850"}, {"code": "(fn mymap [f s]\n  (if (empty? s) ()\n      (cons (f (first s)) \n            (lazy-seq (mymap f \n                             (rest s))))))", "problem": 118, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "(fn m [f coll]\r\n    (lazy-seq\r\n     (if (seq coll)\r\n       (cons (f (first coll))\r\n             (m f (rest coll))))))", "problem": 118, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn [ff cc]\n  (letfn [( mmp [f coll] (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (mmp f (rest s))))))]\n  (mmp ff cc)))", "problem": 118, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "(fn _map [pred s]\r\n  (lazy-seq (cons (pred (first s)) \r\n                  (if (nil? (next  s))\r\n                    nil\r\n                    (_map pred (next  s))))))", "problem": 118, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "#(rest (reductions (fn [_ b] (% b)) () %2))", "problem": 118, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn m [f x]\n  (if (seq x)\n    (lazy-seq (cons (f (first x)) (m f (rest x))))\n    '()))", "problem": 118, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn mapp[f s]\n  (if (empty? s) s\n    (lazy-seq \n      (cons \n        (f (first s))\n        (mapp f (rest s))))))", "problem": 118, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn myMap [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons\n        (f (first s))\n        (myMap f (rest s))))))", "problem": 118, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn m [f c]\n  (lazy-seq\n  (when-let [s (seq c)]\n    (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn m [f s] (when s (cons (f (first s)) (lazy-seq (m f (next s))))))", "problem": 118, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "(fn mymap [f coll]\n  (when-let [s (seq coll)]\n    (lazy-seq (cons (f (first s)) \n                    (mymap f (rest s))))))", "problem": 118, "user": "4e50c894535dc968683fc4ee"}, {"code": "(fn qq [f s]\n  (lazy-seq\n    (if (empty? s)\n      '()\n      (cons (f (first s))\n            (qq f (rest s))))))", "problem": 118, "user": "4f5eda39e4b0030a34fb2b56"}, {"code": "(fn mp [f coll]\n  (lazy-seq (when-let [s (seq coll)] (cons (f (first s)) (mp f (rest s))))))", "problem": 118, "user": "4f2893d0e4b0d6649770a019"}, {"code": "(fn g[f s] (if (= s []) [] (lazy-seq (cons (f (first s)) (g f (rest s))))))", "problem": 118, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "(fn fmap [f xs]\n  (lazy-seq \n    (when-let [s (seq xs)]\n      (cons (f (first xs)) (fmap f (rest xs))))))", "problem": 118, "user": "4e7f5a0b535db966e863cc41"}, {"code": "#(letfn [(_map_ [f coll]\n             (lazy-seq\n             (if (empty? coll)\n               (list)\n               (cons (f (first coll))\n                     (_map_ f (rest coll))))))]\n     (_map_ %1 %2))", "problem": 118, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn thisfunc [f s]\n  (if (empty? s)\n    ()\n    (cons (f (first s))\n      (lazy-seq\n        (thisfunc f (rest s))))))", "problem": 118, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn impl [f coll] (if (seq coll) (lazy-seq (cons (f (first coll)) (impl f (rest coll))))nil))", "problem": 118, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "(fn re-map [f col]\n  (if (seq col) (lazy-seq\n               (cons (f (first col)) (re-map f (rest col))))\n      nil))", "problem": 118, "user": "4f4ff5a8e4b03ad3f0c10cf3"}, {"code": "(fn mymap [f s] (if-not (seq s) nil (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "4efd8b67535de96065cf5085"}, {"code": "(fn my-map [f l]\n    (if (empty? l) ()\n        (lazy-seq (cons (f (first l)) (my-map f (rest l)))\n)))", "problem": 118, "user": "4db883e1535d1e037afb2198"}, {"code": "(fn ghettomap [f l]\n  (if (empty? l)\n    l\n    (lazy-seq (cons (f (first l)) (ghettomap f (rest l))))))", "problem": 118, "user": "4f697a66e4b07046d9f4ef8a"}, {"code": "(fn m [f s]\n  (if (empty? s)\n    '()\n    (lazy-seq (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn m [f s]\n  (if (empty? s)\n      []\n    (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn map3 [f coll]\n  (lazy-seq\n   (if (empty? coll)\n     '()\n     (cons (f (first coll))\n           (map3 f (rest coll))))))", "problem": 118, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn m [f c] \n  (when-let [[x & xs] (seq c)] \n    (lazy-seq (cons (f x) \n                    (m f xs)))))", "problem": 118, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn my-map [f coll]\n  (lazy-seq\n    (if (seq coll)\n      (cons (f (first coll)) (my-map f (rest coll)))\n      ())))", "problem": 118, "user": "4e22b78b535d04ed9115e81e"}, {"code": "(fn mymap[f c] (lazy-seq (when-let [s (seq c)] (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "4db13ff51254ad5b4805fa68"}, {"code": "(fn p118s [f s]\n   (if (empty? s)\n    nil\n    (lazy-seq  (cons (f (first s)) (p118s f (rest s))))\n    )\n  )", "problem": 118, "user": "4f63777be4b0defedf855fe4"}, {"code": "(fn mapf [f coll] \n  (if (empty? coll)\n      coll\n      (lazy-seq (cons (f (first coll)) (mapf f (rest coll))))))", "problem": 118, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn lmap [f l]\n  (if (seq l)\n    (lazy-seq (cons (f (first l)) (lmap f (rest l))))))", "problem": 118, "user": "4e568873535d8a8b8723a283"}, {"code": "(fn m [f [h & t]] (lazy-seq (when h (cons (f h) (m f t)))))", "problem": 118, "user": "4eb298c1535d7eef3080734b"}, {"code": "#(flatten (keep (juxt %) %2))", "problem": 118, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn m [f s]\n  (lazy-seq\n    (when-let [[h & r] (seq s)]\n     (cons (f h) (m f r)))))", "problem": 118, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "(fn m [f l]\n   (if (empty? l) \n      () \n      (lazy-seq (cons (f (first l)) (m f (rest l)))) ))", "problem": 118, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "(fn mp [f t]\n  (if (not (empty? t))\n  (lazy-seq\n    (cons\n      (f (first t)) (mp f (rest t))))))", "problem": 118, "user": "4ea4e98a535d7eef308072ce"}, {"code": "(fn mp [f coll]\n  (if (seq coll)\n      (lazy-seq\n          (cons (f (first coll)) (mp f (rest coll))))))", "problem": 118, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "(fn _map [f c]\n  (lazy-seq\n   (if (empty? c)\n     nil\n     (cons (f (first c)) (_map f (rest c))))))", "problem": 118, "user": "4ecbb249535df97575fdabdf"}, {"code": "(fn my-map [f xs]\n  (if (empty? xs) nil\n    (lazy-seq (cons (f (first xs)) (my-map f (rest xs))))))", "problem": 118, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn m [f s]\n  (if (empty? s)\n    '()\n    (lazy-cat (list (f (first s))) (m f (rest s)))))", "problem": 118, "user": "4de18de7535d08e6dec9fde8"}, {"code": "(fn _ [f [v & r]]\n  (if v\n  (lazy-seq \n    (cons\n      (f v)\n      (_ f r)))))", "problem": 118, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn t [f xs]\n  (if (empty? xs)\n    '()\n    (lazy-seq\n      (cons (f (first xs)) (t f (rest xs))))))", "problem": 118, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn rmap [f l]\n  (when (not (empty? l))\n    (lazy-seq\n      (cons (f (first l))\n        (rmap f (rest l))))))", "problem": 118, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn mymap [f coll]\n  (lazy-seq\n   (when-let [v (first coll)]\n     (cons (f v) (mymap f (rest coll))))))", "problem": 118, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn mapy [f coll]\n  (lazy-seq\n    (let [c (seq coll)]\n      (when c\n        (cons \n          (f (first c)) \n          (mapy f (rest c)))))))", "problem": 118, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn aa [f coll]\r\n      (lazy-seq \r\n\t      (when-let [x (first coll) ]\r\n\t\t\t(cons( f x) (aa f (rest coll))))))", "problem": 118, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn map2 [f c]\n  (if (empty? c) \n    c \n    (lazy-seq (concat (conj (empty c) (f (first c))) (map2 f (rest c))))\n  )\n)", "problem": 118, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn m [f [a & r]]\n  (if a (lazy-seq (cons (f a) (m f r)))))", "problem": 118, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn my-map [f sq]\n     (if (empty? (rest sq))\n       (vector (f (first sq)))\n       (cons (f (first sq)) (lazy-seq (my-map f (rest sq))))))", "problem": 118, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn map* [f x]\n  (if (empty? x) nil\n      (cons (f (first x)) (lazy-seq (map* f (rest x))))))", "problem": 118, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn mymap [f s]\n  (if (empty? s) '()\n  (lazy-seq (cons (f (first s)) (mymap f (rest s))))\n))", "problem": 118, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "(fn  newmap [f s]\n(if (not (empty? s))\n(lazy-seq \n  (cons (f (first s)) (newmap f (rest s)))\n)\n)\n\n)", "problem": 118, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn mp [f s]\n  (if (not (nil? s))\n    (lazy-seq (cons (f (first  s))  (mp f (next s))))))", "problem": 118, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn mymap [f s]\n  (if (empty? s)\n    ()\n    (lazy-seq (cons (f (first s)) (mymap f (rest s))))\n  )\n)", "problem": 118, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn mymap [f xs]\n  (if (empty? xs)\n    ()\n    (lazy-seq \n      (cons \n        (f (first xs)) \n        (mymap f (rest xs))))))", "problem": 118, "user": "4f90e238e4b0dcca54ed6c94"}, {"code": "(fn foo [f s] (if (empty? s) '()\n  (lazy-seq (cons (f (first s)) (foo f (rest s))))))", "problem": 118, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "(fn m [f [i & others]] (if (empty? others) (list (f i)) (lazy-seq (cons (f i) (m f others)))))", "problem": 118, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn m [f [h & r]]\n    (lazy-seq\n     (cons\n      (f h)\n      (if r (m f r)))))", "problem": 118, "user": "4f39f902e4b0e243712b1efe"}, {"code": "(letfn [(m [f [h & t]]                                                                                                                                                                                                                       \n          (if t                                                                                                                                                                                                                              \n            (lazy-seq (cons (f h) (m f t)))                                                                                                                                                                                                  \n            (list (f h))))]                                                                                                                                                                                                                  \n  m)", "problem": 118, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "(fn mm [f sq]\n  (lazy-seq\n   (if (seq sq)\n     (cons (f (first sq)) (mm f (next sq)))\n     '())))", "problem": 118, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn r [f [a & more]]\n  (lazy-seq\n    (cons (f a) (if more (r f more)))))", "problem": 118, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(fn my-map [f coll]\n  (when-not (empty? coll)\n    (lazy-seq (cons (f (first coll))\n              (my-map f (rest coll))))))", "problem": 118, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "(fn a [f [p & q]]\r\n  (if (empty? q)\r\n      [(f p)]\r\n      (lazy-seq (cons (f p) (a f q)))))", "problem": 118, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn m [f s]\n  (if (seq s)\n      (lazy-seq (cons (f (first s)) (m f (rest s))))\n      ()))", "problem": 118, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn f [tf coll] \r\n    (if (empty? coll) \r\n      '()\r\n      (let [v (first coll)]\r\n        (lazy-seq (cons (tf v) (f tf (rest coll)))))))", "problem": 118, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn [func coll]\r\n  (letfn [(prod [f [x & xs]]\r\n            (lazy-seq\r\n              (cons (f x) (when (seq xs) (prod f xs)))))]\r\n    (prod func coll)))", "problem": 118, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn mymap [f [x & xs]]\n  (cons (f x) (if xs (lazy-seq (mymap f xs)))))", "problem": 118, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn my-map [f [first & rest]]\n  (if first\n    (lazy-seq (cons\n      (f first)\n      (my-map f rest)))))", "problem": 118, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn g [f l] (lazy-seq (when-let [[h & t] l] (cons (f h) (g f t) ))))", "problem": 118, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn my-map [f col]\n  (lazy-seq\n    (when-let [s (seq col)]\n      (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "4e7f8f85535db966e863cc44"}, {"code": "(fn map2 [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (map2 f (rest s))))))", "problem": 118, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "(fn g [f s]\n  (when s\n    (lazy-seq (cons (f (first s)) (g f (next s))))))", "problem": 118, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "#(flatten (keep (juxt %) %2))", "problem": 118, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn ls [f [s & r]]\n  (when s\n    (lazy-seq (cons (f s) (ls f r)))))", "problem": 118, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn mymap [f1 coll]\n  (if (empty? coll) ()\n    (lazy-seq (cons (f1 (first coll)) (mymap f1 (rest coll))))))", "problem": 118, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "(fn my-map [f coll]\n  (lazy-seq\n    (when-let [[x & more] (seq coll)]\n      (cons (f x) (my-map f more)))))", "problem": 118, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(fn m\n    ([f coll]\n     (lazy-seq (cons (f (first coll))\n                     (if (empty? (next coll)) \n                      []\n                      (m f (next coll)))))))", "problem": 118, "user": "4fa2fa5ee4b081705acca186"}, {"code": "(fn mymap [f coll]\r\n  (if (false? (empty? coll))\r\n        (lazy-seq\r\n          (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(fn my-map [f s]\n  (when (seq s)\n    (lazy-seq\n      (cons (f (first s)) (my-map f (drop 1 s))))))", "problem": 118, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "#(flatten (keep (juxt %) %2))", "problem": 118, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn [ff ccoll]\n  (letfn [(mymap [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (mymap f (rest s))))))]\n  (mymap ff ccoll)))", "problem": 118, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "(fn mymap [f s]\n (if (empty? s)\n   []\n   (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn mymap [f [x & xs]]\n  (when x\n    (lazy-seq (cons (f x) (mymap f xs)))))", "problem": 118, "user": "4dac39a28cc9d6edb8beb0b3"}, {"code": "(fn map_ [f coll]\n  (when (seq coll)\n    (lazy-seq\n      (cons (f (first coll)) (map_ f (rest coll))))))", "problem": 118, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn m [f s]\n  (if (empty? s) nil\n      (lazy-seq (cons (f (first s))\n                      (m f (rest s))))))", "problem": 118, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn my-map [f x]\n  (if (seq x)\n    (lazy-seq (cons (f (first x)) (my-map f (next x))))\n    nil))", "problem": 118, "user": "4fa820fde4b081705acca1ce"}, {"code": "(fn [f l] (\n  drop 1 (reductions (fn [_ e] (f e)) (first l) l)\n))", "problem": 118, "user": "4ef48422535dced4c769f236"}, {"code": "(fn mymap[f col]\r\n   (if (empty? col)\r\n       col\r\n   (lazy-seq\r\n      (cons (f (first col) ) \r\n            (mymap f (rest col) ) ) )\r\n   )\r\n  )", "problem": 118, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn my-map [f [h & t]]\n  (if h\n    (lazy-seq \n      (cons (f h)\n            (my-map f t)))))", "problem": 118, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "(fn m [f s]\n  (if (empty? s) '()\n      (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn m [f [first & rest]] (if first (cons (f first) (lazy-seq (m f rest))) ()))", "problem": 118, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn my-map [f lst]\n  (lazy-seq (cons\n    (f (first lst))\n    (if (not (empty? (rest lst))) \n      (my-map f (rest lst)) \n      nil))))", "problem": 118, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn mymap [f s]\n  (if (empty? s) '()\n      (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "4fae258de4b081705acca246"}, {"code": "(fn newmap [f s]\n  (if (empty? s) '()\n    (let [firstelt (first s)\n          remelts (rest s)\n          result (f firstelt)]\n      (lazy-seq (cons result (newmap f remelts))))))", "problem": 118, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn m [f s]\n     (when (seq s)\n\t     (lazy-seq (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4f301d02e4b0d6649770a072"}, {"code": "(fn m [f c]\r\n  (lazy-seq\r\n    (cons (f (first c)) (if (empty? (rest c)) (lazy-seq) (m f (rest c))))))", "problem": 118, "user": "4facff22e4b081705acca230"}, {"code": "(fn lazy-map\n  [f c]\n  (if (empty? c) []\n      (lazy-seq (cons (f (first c)) (lazy-map f (rest c))))))", "problem": 118, "user": "4fadbc3fe4b081705acca23f"}, {"code": "(fn mp [f [x & xs]] (lazy-seq (if x (cons (f x) (mp f xs)))))", "problem": 118, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn g [f c]\n  (lazy-seq (if ((complement empty?) c) (cons (f (first c)) (g f (rest c))))))", "problem": 118, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn newMap\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (newMap f (rest s)))))))", "problem": 118, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn m [f coll] (lazy-seq\n  (when-let [s (seq coll)]\n    (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4fa30027e4b081705acca187"}, {"code": "(fn m [f coll] (lazy-seq (if (empty? coll) coll (cons (f (first coll)) (m f (rest coll))))))", "problem": 118, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn my-map [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn m [f [x & xs]] (if (nil? x) [] (lazy-seq (cons (f x) (m f xs)))))", "problem": 118, "user": "4fa6a491e4b081705acca1bc"}, {"code": "(fn nm [f in]\n  (let [in (seq in)]\n  (when in\n  (lazy-seq (cons (f (first in)) (nm f (rest in)))))))", "problem": 118, "user": "4faec810e4b081705acca24e"}, {"code": "(fn my-map [f s]\n  (if (empty? s) \n\t\t'()\n\t\t(lazy-seq (cons (f (first s)) (my-map f (rest s))))\n\t)\n\n)", "problem": 118, "user": "4faacc04e4b081705acca201"}, {"code": "(fn myMap[f x]\r\n  (if (empty? x)\r\n    '()\r\n    (lazy-seq (cons (f (first x)) (myMap f (rest x))))))", "problem": 118, "user": "4f82ed48e4b033992c121c0e"}, {"code": "#(rest (reductions (fn [_ x] (% x)) 0 %2))", "problem": 118, "user": "4fb3b865e4b081705acca2a2"}, {"code": "(fn r [f xs] (lazy-seq (if (empty? xs) '() (cons (f (first xs)) (r f (rest xs))))))", "problem": 118, "user": "4fb510b5e4b081705acca2b8"}, {"code": "(fn m [f s]\n  (lazy-seq \n   (if (seq s)\n     (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4eb30868535d7eef30807355"}, {"code": "(fn my-map [f coll]\n  (when-not (empty? coll)\n    (let [nv (f (first coll))]\n      (lazy-seq (cons nv (my-map f (rest coll)))))))", "problem": 118, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "(fn mymap [f l]\n  (if (empty? l) ()\n    (cons (f (first l))\n          (lazy-seq (mymap f (rest l))))))", "problem": 118, "user": "4fc0853ae4b081705acca327"}, {"code": "#(rest (reductions (fn [l e] (%1 e)) nil %2))", "problem": 118, "user": "4faac363e4b081705acca200"}, {"code": "(fn imp [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first coll))\n            (imp f (rest s))))))", "problem": 118, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn m [f s]\n  (lazy-seq\n    (when-let [s (seq s)]\n      (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4f039a8b535dcb61093f6b36"}, {"code": "(fn -map [f [a & r :as args]]\n  (lazy-seq\n    (if (empty? args)\n        nil\n        (cons (f a) (-map f r)))))", "problem": 118, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [f l]\n    ((fn fm [[head & tail]]\n       (lazy-seq\n         (if (nil? head)\n           nil\n           (cons (f head) (fm tail)))))\n     l))", "problem": 118, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn m\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (m f (rest s)))))))", "problem": 118, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn m [f s] (lazy-seq (when-let [fst (first s)] (cons (f fst) (m f (next s))))))", "problem": 118, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(fn tst[f a](lazy-seq (if (not (seq a)) nil (cons (f (first a)) (tst f (rest a))))))", "problem": 118, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn mp [f coll]\n  (if (empty? coll)\n    coll\n    (cons (f (first coll)) (lazy-seq (mp f (rest coll))))))", "problem": 118, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "#(rest (reductions (fn [_ x] (%1 x)) - %2))", "problem": 118, "user": "4fc67081e4b0ee37620e1813"}, {"code": "(fn my-map [f l]\n  (if-let [[x & xs] (seq l)]\n    (lazy-seq (cons (f x) (my-map f xs)))\n    '()))", "problem": 118, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn mymap [f col]\r\n  (when (not (nil? (first col)))\r\n    (lazy-cat [(f (first col))] (mymap f (rest col)))))", "problem": 118, "user": "4fab31a8e4b081705acca215"}, {"code": "(fn m [f s]\n  (when (seq s)\n    (lazy-seq (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn m [f l]\n  (when-not (empty? l)\n    (lazy-seq\n      (cons\n        (f (first l))\n        (m f (rest l))))))", "problem": 118, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn myap\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (myap f (rest s)))))))", "problem": 118, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn my-map [f [x & xs :as s]]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (f x) (my-map f xs)))))", "problem": 118, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn my-map [f lst]\n  (lazy-seq\n    (if (empty? lst)\n      lst\n      (cons (f (first lst)) (my-map f (rest lst))))))", "problem": 118, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn mymap [f coll]\n  ( if (empty? coll) (lazy-seq coll)\n  (lazy-seq (cons (f (first coll)) (mymap f (rest coll)))\n  ))\n  )", "problem": 118, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "#(flatten (keep (juxt %) %2))", "problem": 118, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(fn m [f s]\n  (if-not (empty? s)\n    (lazy-seq \n      (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4fbacdbae4b081705acca2e5"}, {"code": "(fn mm [f s]\n  (lazy-seq\n    (let [fs (f (first s))]\n      (if (next s)\n         (cons fs (mm f (next s)))\n         (list fs)))))", "problem": 118, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn m [f x] \n           (if (empty? x)  \n             nil             \n(lazy-seq (cons (f (first x) ) (m  f (rest x))))\n             ))", "problem": 118, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn m [f aseq]\n  (lazy-seq\n    (when-not (empty? aseq)\n      (cons \n        (f (first aseq))\n        (m f (rest aseq))))))", "problem": 118, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn m [f s]\n  (when (seq s) (cons (f (first s)) (lazy-seq (m f (rest s)) ))))", "problem": 118, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn mp [f [x & xs]]\n  (if x (cons (f x) (lazy-seq (mp f xs)))))", "problem": 118, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn map2 [f s]\n  (if (empty? s) ()\n    (lazy-seq (cons (f (first s)) (map2 f (rest s))))))", "problem": 118, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn my-map[f s]\n  (lazy-seq\n    (if (nil? s)\n      '()\n      (cons (f (first s)) (my-map f (next s))))))", "problem": 118, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn my-map [func coll]\n  (when-let [s (seq coll)]\n    (cons  (func (first s))\n             (lazy-seq (my-map func (rest s))))))", "problem": 118, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "(fn f [g c]\n  (let [[h & t] (seq c)]\n    (if (empty? t)\n      [(g h)]\n      (lazy-seq(cons (g h) (f g t))))))", "problem": 118, "user": "4ead2841535d7eef3080731e"}, {"code": "(fn m [f col]\n  (lazy-seq\n   (if-let [h (first col)]\n     (cons (f h) (m f (next col))))))", "problem": 118, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "(fn mappp\n  [f xs]\n  (if (empty? xs)\n    '()\n  (lazy-seq\n    (cons\n      (f (first xs))\n      (mappp f (rest xs))))))", "problem": 118, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "(fn pam [f c]\n  (when-let [s (seq c)]\n    (lazy-seq\n      (cons (f (first s)) (pam f (rest s))))))", "problem": 118, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn mp [f [x & xs :as S]]\n  (if (empty? S) '()\n    (cons (f x) (lazy-seq (mp f xs)))))", "problem": 118, "user": "4fda016ae4b05e33b9224f42"}, {"code": "(fn reImp [f [x & y]]\r\n  (if x\r\n    (lazy-seq (cons (f x) (reImp f y)))))", "problem": 118, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn [f s] (rest (reductions #(f %2) + s)))", "problem": 118, "user": "4db016af838c48654951d9b9"}, {"code": "(fn my-map [f s]\r\n  (if (empty? s)\r\n    ()\r\n    (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "problem": 118, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "(fn m [f coll] \r\n  (if (not-empty coll)\r\n      (lazy-seq (cons (f (first coll)) \r\n                      (m f (rest coll))))))", "problem": 118, "user": "4fabbb97e4b081705acca21d"}, {"code": "(fn m ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (m f (rest s)))))))", "problem": 118, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn mp [f s]\n  (lazy-seq\n  (if (seq s)\n      (cons (f (first s)) (mp f (rest s)))\n      '())))", "problem": 118, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn iter [f col] \r\n  (if (empty? col) nil\r\n  (cons\r\n    (f (first col)) \r\n    (lazy-seq (iter f (rest col))))))", "problem": 118, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn m [f [x & xs :as coll]]\r\n  (when coll\r\n    (cons (f x) (lazy-seq (m f xs)))))", "problem": 118, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn mymap [f s]\n  (lazy-seq \n   (cond\n    (empty? s) '()\n    :else\n     (cons (f (first s))\n           (mymap f (rest s))))))", "problem": 118, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "(fn my-map [f xs]\n  (when-not (empty? xs)\n    (cons (f (first xs))\n      (lazy-seq (my-map f (rest xs))))))", "problem": 118, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn wap [f seq] (if (empty? seq) seq (lazy-seq (cons (f (first seq)) (wap f (drop 1 seq))))))", "problem": 118, "user": "4fcebce4e4b03432b189f404"}, {"code": "(fn m\u00e4p [f coll]\n  (lazy-seq\n   (when-let [[h & t] (seq coll)]\n     (cons (f h) (m\u00e4p f t)))))", "problem": 118, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn m [f s]\r\n  (if (empty? s)\r\n      '()\r\n    (lazy-seq (cons (f (first s))\r\n                    (m f (rest s))))))", "problem": 118, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn my-map [f s]\n  (if (empty? s)\n    '()\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "(fn my-map [f v]\n  (if (empty? v)\n    []\n    (lazy-cat [(f (first v))] (my-map f (rest v)))))", "problem": 118, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "(fn m [f s] (if (not-empty s) (cons (f (first s)) (lazy-seq (m f (rest s)))) '()))", "problem": 118, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn simple-map\n  [f x]\n  (if x\n    (cond (> (first x) 10000)\n          (lazy-seq (cons ((comp float f) (first x)) (simple-map f (next x))))\n          :else\n          (lazy-seq (cons ((comp f) (first x)) (simple-map f (next x)))))\n    nil))", "problem": 118, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn mp [f s]\n  (if (empty? (take 1 s))\n     ()\n     (lazy-seq (cons (f (first s))\n                     (mp f (rest s))))))", "problem": 118, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn f [d c] (if (first c) (lazy-seq (cons (d (first c)) (f d (rest c))))))", "problem": 118, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn m2 [f [h & t]]\n  (when (not (nil? h))\n    (lazy-seq (cons (f h) (m2 f t)))))", "problem": 118, "user": "4faafccde4b081705acca209"}, {"code": "(fn g [f s] (lazy-seq (when (seq s) (cons (f (first s)) (g f (rest s))))))", "problem": 118, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn m [f l]\n  (lazy-seq\n    (if (= l '())\n      '()\n      (cons (f (first l)) (m f (rest l))))))", "problem": 118, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn m [f l]\n  (if (empty? l)\n    ()\n    (lazy-seq (cons (f (first l)) (m f (rest l))))))", "problem": 118, "user": "4fde492be4b05e33b9224f8a"}, {"code": "(fn remap [f c]\n  (if (first c) (lazy-seq \n\t\t(cons (f (first c)) (remap f (rest c))))))", "problem": 118, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn m [f s]\n  (if (empty? s) ()\n    (cons (f (first s))\n          (lazy-seq (m f (rest s))))))", "problem": 118, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn mmap [f coll]\n  (if (seq coll)\n    (lazy-seq (cons (f (first coll)) (mmap f (rest coll))))))", "problem": 118, "user": "4e95c771535dbda64a6f6b39"}, {"code": "(fn mymap [f s]\n  (lazy-seq\n    (if (empty? s) \n      nil\n      (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "4ff83003e4b0678c553fc396"}, {"code": "(fn mm [f s]\n  (lazy-seq\n    (let [l (seq s)]\n      (when l\n        (cons (f (first l)) (mm f (rest l)))))))", "problem": 118, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn my-map [f coll]\n  (if (empty? coll) []\n    (cons (-> coll first f) (->> coll rest (my-map f) lazy-seq))))", "problem": 118, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "(fn m [f [x & r :as v]]\n  (if (empty? v)\n    ()\n    (lazy-seq\n      (cons (f x) (m f r)))))", "problem": 118, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn m [f xs]\n  (if\n    (empty? xs) '()\n    (lazy-seq (cons (f (first xs)) (m f (rest xs))))))", "problem": 118, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "(fn m4p [f c] \n  (lazy-seq (when-let [s (seq c)]\n              (cons (f (first s)) (m4p f (rest s))))))", "problem": 118, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn my-map [f s]\n  (lazy-seq\n    (if (empty? s)\n        []\n        (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn mapa [f s]\n  (if (empty? s)\n    []\n    (lazy-seq (cons (f (first s)) (mapa f (rest s))))))", "problem": 118, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn my-map[f s] \n  (if (empty? s) \n      nil \n      (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "problem": 118, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn m [f ls]\r\n  (if (empty? ls) \r\n    ls\r\n    (lazy-seq (cons (f (first ls)) (m f (rest ls))))))", "problem": 118, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn mp\r\n  [f [x & xs]]\r\n  (when x\r\n    (cons (f x) (lazy-seq (mp f xs)))))", "problem": 118, "user": "500159b3e4b0678c553fc419"}, {"code": "(fn mp [f s] \n  (lazy-seq \n   (when (seq s) \n     (cons (f (first s)) (mp f (rest s))))))", "problem": 118, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn dt [f numbers] (lazy-seq (if (empty? numbers) () (cons (f (first numbers)) (dt f (rest numbers))))))", "problem": 118, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn m [f [h & t :as xs]]\n  (lazy-seq\n    (if (empty? xs) []\n      (cons (f h) (m f t)))))", "problem": 118, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn mymap [f s]\n  (lazy-seq\n    (when-let [s (seq s)]\n      (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn fxs [f x]\n  (if (empty? x) '()\n  (lazy-seq (cons (f (first x)) (fxs f (rest x)))))\n)", "problem": 118, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "(fn my-map\n  [f s]\n    (lazy-seq\n      (if (seq s)\n        (cons (f (first s)) (my-map f (rest s)))\n        '()\n      )\n    )\n)", "problem": 118, "user": "4fff00ede4b0678c553fc3fc"}, {"code": "(fn m [f s] (if (nil? s) nil (lazy-seq (cons (f (first s)) (m f (next s))))))", "problem": 118, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn z [f l]\n  (if (empty? l)\n\t\t[]\n\t\t(lazy-seq (cons (f (first l)) (z f (rest l))))))", "problem": 118, "user": "4fd8544be4b0dab7d829f390"}, {"code": "(fn my-map [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "problem": 118, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn mymap [f [a & b]]\n  (if (nil? b) (lazy-seq [(f a)])\n      (lazy-seq (cons (f a) (mymap f b)))))", "problem": 118, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn map- [f coll]\r\n  ^{:doc \"118. Given a function f and an input sequence s, return a                                                                                     \r\n  lazy sequence of (f x) for each element x in s.\"}\r\n  (lazy-seq\r\n    (when-let [s (seq coll)]\r\n      (cons (f (first s)) (map- f (rest s))))))", "problem": 118, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn newmap [f s]\n    (if (empty? s)\n      '()\n      (lazy-seq\n       (cons (f (first s))\n             (newmap f (rest s))))))", "problem": 118, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn f [g xs]\n  (if (nil? xs)\nnil\n(lazy-seq\n  (cons\n    (g (first xs))\n(f g (next xs))))))", "problem": 118, "user": "5012614ee4b02a085b99dc79"}, {"code": "(fn [func input-list] \r\n          (letfn [(mapy [f coll] \r\n            (if (empty? coll) \r\n                 coll \r\n                 (lazy-seq (cons (f (first coll)) (mapy f (rest coll))))))] (mapy func input-list)))", "problem": 118, "user": "4faa6184e4b081705acca1f1"}, {"code": "(fn my-map [f lst]  \n  (when-let [result (first lst)]\n    (cons (f result)\n          (lazy-seq (my-map f (rest lst))))))", "problem": 118, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "(fn re-map [f col]\r\n  (if (seq col) (lazy-seq\r\n               (cons (f (first col)) (re-map f (rest col))))\r\n      nil))", "problem": 118, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn mm [f s]\r\n  (if ( empty? s)\r\n    []\r\n    (cons  (f (first s)) (lazy-seq (mm f (rest s))))\r\n    ))", "problem": 118, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn f [fun coll]\n  (lazy-seq\n    (if (empty? coll)\n      '()\n      (cons (fun (first coll))\n        (f fun (rest coll))))))", "problem": 118, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn my-map\n  [f [x & rest]]\n  (if x\n    (lazy-seq\n     (cons (f x) (my-map f rest)))))", "problem": 118, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "(fn m [f [h & t :as c]]\r\n  (if (empty? c) '()\r\n    (lazy-seq (cons (f h) (m f t)))))", "problem": 118, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "(fn [f x]\n  (letfn [(inn [f x]\n             (when (seq x)\n               (lazy-seq \n                 (cons \n                   (f (first x)) \n                   (inn f (rest x))))))]\n    (inn f x)\n    )\n  )", "problem": 118, "user": "4dca8b6d535d5973398f9288"}, {"code": "(fn mymap [f coll]\n  (lazy-seq\n    (when-let [c (seq coll)]\n      (cons (f (first c)) (mymap f (rest c))))))", "problem": 118, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn mymap [f s]\n  (lazy-seq\n   (when (seq s)\n     (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn m\n  ([f c]\n   (lazy-seq\n    (when-let [s (seq c)]\n      (cons (f (first s)) (m f (rest s)))))))", "problem": 118, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "(fn my-map [f coll] (lazy-seq (when-let [s (seq coll)] (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "50166470e4b052339a490e76"}, {"code": "(fn mymap [f xs]\n  (lazy-seq\n    (if (not-empty xs)\n      (cons (f (first xs)) (mymap f (next xs))))))", "problem": 118, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "(fn mymap [f coll] \n  (lazy-seq \n    (if (seq coll)\n      (cons (f (first coll))\n            (mymap f (rest coll))))))", "problem": 118, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn __ [f s]\n  (lazy-seq\n    (if (empty? s) \n      '() \n      (cons (f (first s)) (__ f (rest s))))))", "problem": 118, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn mymap [func inlist]\n  (if (empty? inlist)\n    '()\n    (lazy-cat (list (func (first inlist)))\n      (mymap func (rest inlist)))))", "problem": 118, "user": "4fc50bcbe4b081705acca375"}, {"code": "(fn b [f m] (if (empty? m) () (cons (f (first m)) (lazy-seq (b f (next m))))))", "problem": 118, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn mhap [f s]\n  (\n    if(not-empty s)\n      (lazy-seq (cons (f (first s)) (mhap f (rest s))))\n  )\n)", "problem": 118, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "(fn mp [f s]\n  (if (empty? s) s\n  (lazy-seq (cons (f (first s)) (mp f (rest s))))))", "problem": 118, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn my-map [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "problem": 118, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn t [f x]\n  (if (empty? x)\n    '()\n    (lazy-seq (cons (f (first x)) (t f (rest x))))\n  )\n)", "problem": 118, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn m [f s]\n  (lazy-seq\n   (when (seq s)\n     (cons (f (first s)) (m f (next s))))))", "problem": 118, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(fn map2 [f c]\n  (if (empty? c)\n    c\n    (cons (f (first c)) \n      (lazy-seq (map2 f (rest c))))))", "problem": 118, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn mmap [f [head & tail]]\n  (if head\n    (lazy-seq (cons (f head) (mmap f tail)))))", "problem": 118, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn mymap\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (mymap f (rest s)))))))", "problem": 118, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "(fn mapper [f c]\n   (if (empty? c) () \n      (lazy-seq (cons (f (first c)) (mapper f (rest c))))))", "problem": 118, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn __ [f col]\n  (if (seq col)\n    (lazy-seq\n      (cons (f (first col))\n        (__ f (rest col))))\n    nil))", "problem": 118, "user": "4fa719c0e4b081705acca1bf"}, {"code": "(fn foo [a x] (\n  if (empty? x) \n\t()\n\t(lazy-seq(cons (a (first x)) (foo a (rest x))))\n\t)\n\t)", "problem": 118, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "(fn my-map [f args]\n  (when (seq args) \n    (cons\n      (f (first args))\n      (lazy-seq (my-map f (rest args))))))", "problem": 118, "user": "4e944706535dbda64a6f6b11"}, {"code": "(fn a [f [x & s]] \n  (and x (lazy-cat [(f x)] (a f s))))", "problem": 118, "user": "4dada16fc9a9d6ed2699dc57"}, {"code": "(fn m [f s] (if (seq s) \n  (lazy-seq (cons (f (first s)) (m f (rest s)))) \n  nil))", "problem": 118, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn m\r\n  ([f coll]\r\n   (lazy-seq\r\n    (when-let [s (seq coll)]\r\n      (cons (f (first s)) (m f (rest s)))))))", "problem": 118, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "(fn m [f [x & r]]\n  (lazy-seq \n    (when x (cons (f x) (m f r)))))", "problem": 118, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn m [f [x & y]]\n  (lazy-seq\n   (if x\n     (cons (f x) (m f y)))))", "problem": 118, "user": "4db4e9d7535dc0f10411755e"}, {"code": "(fn mmap [ f [ e & r] ]\n  (lazy-seq \n   (if (empty? r)\n     (list (f e)) \n     (cons (f e) (mmap f r)))))", "problem": 118, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn  m [f ls]\n  (lazy-seq\n    (when (not (empty? ls))\n      (cons (f (first ls))\n          (m f (rest ls))))))", "problem": 118, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn m-map [f coll]\n  (lazy-seq\n    (if (empty? coll) nil\n  \t    (cons (f (first coll)) (m-map f (rest coll))))))", "problem": 118, "user": "501c1492e4b086d93747d180"}, {"code": "(fn [f coll] \n  (letfn [(my-map [coll] \n            (if (empty? coll) \n                  '() \n                (lazy-seq \n                  (cons (f (first coll)) \n                        (my-map (rest coll))))))] \n     (my-map coll)))", "problem": 118, "user": "5014754de4b094324338f8e5"}, {"code": "(fn m [f s] \n  (if (empty? s) s\n    (cons \n      (f (first s))\n      (lazy-seq (m f (rest s))))))", "problem": 118, "user": "503917a0e4b088a6a14ca763"}, {"code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "problem": 118, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn m [op v]\r\n          (if (empty? v)\r\n            v\r\n            (lazy-seq (cons (op (first v)) (m op (rest v))))))", "problem": 118, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn L [f s]\n  (if (= () (rest s)) (lazy-seq [(f (first s))])\n  (lazy-cat\n    (lazy-seq [(f (first s))])\n    (L f (rest s)))))", "problem": 118, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn ! [f xs](if(seq xs)(lazy-seq(cons(f(first xs))(! f(rest xs))))))", "problem": 118, "user": "5032b398e4b00c0952a257eb"}, {"code": "(fn pos\n        ([] '())\n        ([f b]\n          (if (empty? b)\n            nil\n            (lazy-seq (cons (f (first b)) (pos f (rest b)))))))", "problem": 118, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "(fn map* [f [a & rest]]\n  (when a\n    (lazy-cat [(f a)] (map* f rest))))", "problem": 118, "user": "5012ec0ae4b0c87326002230"}, {"code": "(fn mymap [f [n & rst]]\n  (if (nil? n) \n    nil\n    (lazy-seq (cons (f n) (mymap f rst)))))", "problem": 118, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn m [f xs]\n  (if (empty? xs)\n    nil\n    (cons\n      (f (first xs))\n      (lazy-seq\n        (m f (rest xs))))))", "problem": 118, "user": "50435852e4b034ff00315d22"}, {"code": "(fn my-map [f s]\n  (lazy-seq\n   (when (seq s)\n   (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "(fn mymap [f c]\n  (when (not (empty? c))\n    (let [[e & r] c]\n      (lazy-seq (cons (f e) (mymap f r))))))", "problem": 118, "user": "4fb266a5e4b081705acca28c"}, {"code": "(fn [f xs]\r\n  (if (not-empty xs)\r\n    (drop 1 (reductions #(f %2) (first xs) xs))))", "problem": 118, "user": "50479524e4b0371827a27bc4"}, {"code": "(fn f [x y] \n  (if (empty? y)\n    []\n    (lazy-seq (cons (x (first y)) (f x (rest y))))))", "problem": 118, "user": "5046b003e4b011c5dfee7727"}, {"code": "(fn this [f x]\n   (lazy-seq\n     (when-let [s (seq x)]\n       (cons (f (first s)) (this f (rest s))))))", "problem": 118, "user": "4f616892e4b0defedf855fbf"}, {"code": "(fn m [f s]\n  (lazy-seq\n   (when (not (empty? s))\n     (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(fn m [f coll]\r\n  (lazy-seq\r\n    (when-let [s (seq coll)] (cons (f (first s)) (m f (rest s)) ))))", "problem": 118, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn map2 [f xs]\n  (if (seq xs)\n    (lazy-seq (cons (f (first xs)) (map2 f (rest xs))))))", "problem": 118, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn mp [f [x & xs]]\n  (lazy-seq\n    (cons (f x)\n      (if (nil? xs)\n        nil\n        (mp f xs)))))", "problem": 118, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn mp [f s]\r\n  (if (not (empty? s))\r\n    (lazy-cat (list (f (first s))) (mp f (rest s)))))", "problem": 118, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn mp [f ls]\n  (if (empty? ls)\n    []\n    (cons (f (first ls)) (lazy-seq (mp f (rest ls))))))", "problem": 118, "user": "504ed350e4b069badc5a33d1"}, {"code": "(fn my-map [f s]\n  (if (empty? s)\n    '()\n    (let [fs (first s)\n          rs (rest s)]\n      (cons (f fs) (lazy-seq (my-map f rs))))))", "problem": 118, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "(fn m [f c] (if (not (empty? c)) (cons (f (first c)) (lazy-seq (m f (rest c))))))", "problem": 118, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "(fn mp [f ls] \n  (if (empty? ls) \n      nil\n      (cons (f (first ls)) (lazy-seq (mp f (rest ls))))))", "problem": 118, "user": "504e397ee4b0f6ff3350c485"}, {"code": "(fn my-map [f xs]\n  (if (empty? xs) \n      '()\n      (cons (f (first xs)) (lazy-seq (my-map f (rest xs))))))", "problem": 118, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn f [g s]\n  (when-let [s (seq s)]\n    (cons (g (first s))\n      (lazy-seq (f g (rest s))))))", "problem": 118, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn _map [op s]\n   (if (empty? s) []\n   (lazy-seq\n    (cons (op (first s)) (_map op  (rest s)))\n    )))", "problem": 118, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn m [f s]\n    (when (seq s) (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn map*\n  [f [frst & rst]]\n  (lazy-seq\n    (cons\n      (f frst)\n      (if rst (map* f rst)))))", "problem": 118, "user": "4edfb618535d10e5ff6f5343"}, {"code": "(fn $map [f [x & xs]]\n  (if x\n    (cons (f x) (lazy-seq ($map f xs)))\n    nil))", "problem": 118, "user": "504f865ee4b0a02f9cffde90"}, {"code": "#(rest (reductions (fn [x y] (% y)) 0 %2))", "problem": 118, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn my-fn [f col]\n  (if (empty? col)\n       nil\n      (lazy-seq (cons (f (first col))\n                      (my-fn f (rest col))))))", "problem": 118, "user": "50435689e4b034ff00315d21"}, {"code": "(fn m [f [h & t]] \n  (lazy-seq\n    (when h\n      (cons (f h) (m f t)))))", "problem": 118, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn [f coll]\n(letfn [(next-mapping [f coll]\n            (lazy-seq\n             (if (seq coll)\n               (cons (f (first coll)) (next-mapping f (rest coll)))\n               '())))]\n    (next-mapping f coll)))", "problem": 118, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn f[g[x & s]](lazy-seq (cons (g x)(if s (f g s)))))", "problem": 118, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn my-map [f coll]\n  (lazy-seq \n    (when-let [[x & more] (seq coll)]\n    (cons (f x) (my-map f more)))))", "problem": 118, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "(fn m [f [x & xs]] \n  (when x (lazy-seq (cons (f x) (m f xs)))))", "problem": 118, "user": "4fb01e53e4b081705acca260"}, {"code": "(fn f [g [x & xs :as s]]\n    (if-not (empty? s)\n      (lazy-seq\n        (cons (g x) (f g xs)))))", "problem": 118, "user": "4df669d4535d08e6dec9fe35"}, {"code": "(fn lz\r\n  ([f args]\r\n  (if (empty? args) nil\r\n    (cons (f (first args))\r\n          (lazy-seq (lz f (rest args)))))))", "problem": 118, "user": "5050b107e4b063148f524126"}, {"code": "(fn map2 [f s]\n(if (empty? s)\n(empty s)\n(lazy-seq\n  (cons (f (first s))\n  (map2 f (rest s))))))", "problem": 118, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "(fn my-map [f x]\n  (lazy-seq\n    (if (seq x)\n      (cons (f (first x)) (my-map f (rest x)))\n      '())))", "problem": 118, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn rec [func l]\n    (if (empty? l)\n      l\n      (cons \n        (func (first l)) \n        (lazy-seq (rec func (rest l))))))", "problem": 118, "user": "50588ff1e4b06522596eba7e"}, {"code": "(fn map' [f coll]\n  (lazy-seq\n   (when-let [[x & more] (seq coll)]\n     (cons (f x) (map' f more)))))", "problem": 118, "user": "50586354e4b06522596eba78"}, {"code": "(fn my-map [f coll]\n  (when (seq coll)\n  (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))))", "problem": 118, "user": "505bd09fe4b032b709c81373"}, {"code": "(fn map2 [f v]\n   (lazy-seq \n    (if (first v)\n        (cons (f (first v)) \n        (map2  f  (rest v)))\n        )))", "problem": 118, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn m [f,s]\n  (if (empty? s)\n      nil\n      (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn this [f col] (if (empty? col) nil (lazy-seq (cons (f (first col)) (this f (rest col))))))", "problem": 118, "user": "50463347e4b011c5dfee771e"}, {"code": "(fn my-map [f coll]\n  (if (empty? coll)\n    nil\n    (cons (f (first coll))\n          (lazy-seq (my-map f (rest coll))))))", "problem": 118, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn my-map [f xs]\n  (if (empty? xs)\n    '()\n    (lazy-seq (cons (f (first xs)) (my-map f (rest xs))))))", "problem": 118, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn map2 [f coll]\n  (if (empty? coll)\n    []\n    (cons (f (first coll)) (lazy-seq (map2 f (rest coll))))))", "problem": 118, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn m [f x] (lazy-seq (if-let [[a & b] x] (cons (f a) (m f b)))))", "problem": 118, "user": "4f045946535dcb61093f6bba"}, {"code": "(fn my-map[f s]\n  (lazy-seq\n   (when-let [s (seq s)]\n     (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn map' [f xs]\n  (if (empty? xs) (lazy-seq [])\n    (cons (f (first xs)) (lazy-seq (map' f (rest xs))))))", "problem": 118, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "(fn r [f s] (if (empty? s) nil (lazy-cat [(-> s first f)] (->> s rest (r f)))))", "problem": 118, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn lazy-map [f s] (lazy-seq (cons (f (first s)) (when (next s) (lazy-map f (rest s))))))", "problem": 118, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn m [func coll]\n  (if-not (empty? coll)\n    (lazy-seq (cons (func (first coll)) (m func (rest coll))))))", "problem": 118, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "(fn my-map [f xs]\n  (lazy-seq\n  (if (empty? xs) \n    '()\n    (cons (f (first xs)) (my-map f (rest xs))))))", "problem": 118, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn re-implemnt-map [f xs]\n    (if (empty? xs) (empty xs)\n        (lazy-seq (cons (f (first xs))\n                        (re-implemnt-map f (rest xs))))))", "problem": 118, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn map2 [f xs]\n  (lazy-seq\n    (when-let [s (seq xs)]\n      (cons (f (first s)) (map2 f (rest s))))))", "problem": 118, "user": "5060d137e4b0dc10a69545a0"}, {"code": "(fn applyf [f [head & rst]] \n        (lazy-seq \n          (when head\n            (cons (f head) (applyf f rst)))))", "problem": 118, "user": "502ade49e4b0614b52996120"}, {"code": "(fn mymap [f coll]\n  (lazy-seq\n    (when (not (empty? coll))\n      (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "(fn my-map\r\n  [f xs]  \r\n    (lazy-seq\r\n      (if (seq xs)\r\n        (cons \r\n          (f (first xs))\r\n          (my-map f (rest xs))))))", "problem": 118, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn m [f c]\n  (cond\n   (empty? c) nil\n   :else (cons (f (first c)) (lazy-seq (m f (rest c))))))", "problem": 118, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn mop [f s]\n          (lazy-seq \n           (when (seq s)\n             (cons (f (first s)) (mop f (rest s))))))", "problem": 118, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "(fn m [f c]\n  (if (empty? c)\n    nil\n    (cons\n      (f (first c))\n      (lazy-seq (m f (rest c))))))", "problem": 118, "user": "50657775e4b0deb876850599"}, {"code": "(fn m [f s]\n  (if (empty? s)\n      s\n      (lazy-seq (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn ! [f coll]\r\n  (lazy-seq\r\n    (if coll\r\n      (cons (f (first coll)) (! f (next coll))))))", "problem": 118, "user": "4dc97aec535d5973398f9284"}, {"code": "(fn mp [f x]\n  (if (empty? x)\n    []\n    (concat (list (f (first x))) (lazy-seq (mp f (rest x))))\n   )\n)", "problem": 118, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn m [f s] (lazy-seq (when-let [x (seq s)] (cons (f (first x)) (m f (rest x))))))", "problem": 118, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn lf [f [h & t]]\n  (lazy-seq\n    (cons (f h) (if t (lf f t)))))", "problem": 118, "user": "4e39d763535deb9a81d77f46"}, {"code": "(fn mymap [f xs]\n  (if (empty? xs)\n    '()\n    (lazy-seq\n      (let [[x & xs] xs]\n        (cons (f x) (mymap f xs))))))", "problem": 118, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn hoge [f & ls]\r\n  (let [fs #(loop [a % b []] (if (empty? a) b (recur (rest a) (conj b (first (first a))))))\r\n  rs #(loop [a % b []] (if (empty? a) b (recur (rest a) (conj b (rest (first a))))))]\r\n    (if (some empty? ls)\r\n      '()\r\n      (lazy-seq (cons (apply f (fs ls))\r\n\t\t      (apply hoge f (rs ls)))))))", "problem": 118, "user": "507437c2e4b054001656acd0"}, {"code": "(fn r [f coll]\n  (if (empty? coll)\n    nil\n    (cons (f (first coll)) (lazy-seq (r f (rest coll))))))", "problem": 118, "user": "50706287e4b07bd6ad9b9f2b"}, {"code": "(fn m [f [i & c]]\n  (lazy-seq\n    (when i\n      (cons (f i) (m f c)))))", "problem": 118, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn my-map [f s]\n  (when(not (empty? s))\n    (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "problem": 118, "user": "50763574e4b0a894bb95bf3d"}, {"code": "(fn m [f [x & xs :as s]]\n  (if (seq s)\n    (cons (f x) (lazy-seq (m f xs)))))", "problem": 118, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn remap [f vals]\n  (cond (empty? vals) vals\n        :else (cons (f (first vals)) (lazy-seq (remap f (rest vals))))\n  )\n)", "problem": 118, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn m [f s]\n  (when-not (empty? s)\n    (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn m [f c] (if (empty? c)\n  c\n  (lazy-seq \n    (cons \n      (f (first c))\n      (m f (rest c))))))", "problem": 118, "user": "507a9b29e4b08327cd804a6e"}, {"code": "(fn mymap [f [x & xs]]\n  (if (seq xs)\n    (lazy-seq (cons (f x) (mymap f xs)))\n    (list (f x))))", "problem": 118, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn m[g [f & r]] (lazy-seq (\n                            if (= r nil)\n                               [(g f)]\n                               (lazy-cat [(g f)] (m g r)))))", "problem": 118, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn cows [f [x & xs :as ys]]\n  (if (empty? ys)\n    ys\n    (cons (f x) (lazy-seq (cows f xs)))))", "problem": 118, "user": "50611456e4b0dc10a69545a5"}, {"code": "(fn m [f v] (replace {:nil nil} (keep #(or (f %) :nil) v)))", "problem": 118, "user": "505d4b21e4b0e6aca564be07"}, {"code": "(fn my-map [f col]\n  (if (nil? col)\n    col\n    (cons (f (first col)) (lazy-seq (my-map f (next col))))))", "problem": 118, "user": "507a08e4e4b08327cd804a67"}, {"code": "(fn m [f s] \n (if (seq s) \n  (cons (f (first s)) \n   (lazy-seq (m f (rest s)))\n  )\n '()\n)\n)", "problem": 118, "user": "50807940e4b01a93d3f38e44"}, {"code": "(fn re-map [f xs]\n  (lazy-seq\n   (when-let [s (seq xs)]\n     (cons (f (first s))\n          (re-map f (rest s))))))", "problem": 118, "user": "504db141e4b021508a333965"}, {"code": "(fn m [f [x & s]]\n  (cons\n    (f x)\n    (if (empty? s)\n      s\n      (lazy-seq (m f s))\n    )\n  )\n)", "problem": 118, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn mm [f [el & rst]] (when (not= el nil) (cons (f el) (lazy-seq (mm f rst)))))", "problem": 118, "user": "507a396be4b08327cd804a69"}, {"code": "(fn [f lst]\r\n  (letfn [(next [lst]\r\n            (if (empty? lst)\r\n              '()\r\n              (lazy-seq (cons (f (first lst)) (next (rest lst))))))]\r\n    (next lst)))", "problem": 118, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn P118 [ func list ]\n  (if (empty? list)\n    list\n    (let [r (func (first list))] (cons r (lazy-seq (P118 func (rest list)))))))", "problem": 118, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn foo [f s]\n  (lazy-seq\n    (when-let [[h & t] (seq s)]\n      (cons (f h) (foo f t)))))", "problem": 118, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn mm [f [l & r]] \n  (lazy-seq (cons (f l) (when r (mm f r)))))", "problem": 118, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn m [f x] (if (seq x) (cons (f (first x)) (lazy-seq (m f (rest x)))) []))", "problem": 118, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn m [f xs]\n  (when (seq xs)\n    (lazy-seq\n      (cons (f (first xs)) (m f (rest xs))))))", "problem": 118, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "(fn my-it1 [f s]\n  (if (not-empty s)(cons (f (first s)) (lazy-seq (my-it1 f (rest s))))) )", "problem": 118, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn mp [f s]\n  (lazy-seq\n    (when (seq s)\n      (cons (f (first s)) (mp f (rest s))))))", "problem": 118, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn m [f x]\n  (if (not-empty x)\n    (cons (f (first x))\n          (lazy-seq (m f (rest x))))))", "problem": 118, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn my-map\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (my-map f (rest s)))))))", "problem": 118, "user": "506b8242e4b0eda3100c090a"}, {"code": "(fn m [f [x & xs :as s]] \n    (lazy-seq (if (seq s)\n                  (cons (f x) (m f xs)))))", "problem": 118, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn m[f xs] (if (empty? xs) xs (cons (f (first xs)) (lazy-seq (m f (rest xs))))))", "problem": 118, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn my-map \r\n  [f xs]\r\n  (if xs\r\n    (cons (f (first xs)) (lazy-seq (my-map f (next xs))))))", "problem": 118, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn f [g xs]\n (lazy-seq\n  (if (seq xs)\n    (cons (g (first xs)) (f g (rest xs))))))", "problem": 118, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn a [f xs] (if (empty? xs) [] (cons (f (first xs)) (lazy-seq (a f (rest xs))))))", "problem": 118, "user": "4fb1325de4b081705acca276"}, {"code": "(fn in [f s]\n  (if (empty? s)\n    ()\n    (cons (f (first s)) (lazy-seq (in f (rest s))))))", "problem": 118, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "#(letfn [(m [f xs]\n              (if (seq xs)\n               (cons (f (first xs)) (lazy-seq (m f (rest xs))))))]\n  (m %1 %2))", "problem": 118, "user": "4f0f36a7535d0136e6c22336"}, {"code": "(fn my-map [f xs]\r\n  (if (empty? xs) '()\r\n    (lazy-seq (cons (f (first xs)) (my-map f (rest xs))))))", "problem": 118, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn mmap [f l]\n  (if (empty? l)\n      l\n    (lazy-seq\n      (cons (f (first l)) (mmap f (rest l))))))", "problem": 118, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn m2 [f coll] (let [fst (first coll)] (if (not (nil? fst)) (lazy-seq (cons (f fst) (m2 f (rest coll)))))))", "problem": 118, "user": "503255d0e4b0e78df07b092b"}, {"code": "(fn mm [f xs]\n  (lazy-seq\n   (if (not (empty? xs))\n     (cons (f (first xs))\n           (mm f (rest xs)))\n     xs)))", "problem": 118, "user": "4fccb31be4b0ee37620e1868"}, {"code": "(fn m [f [h & r]] (lazy-seq (cons (f h) (if r (m f r)))))", "problem": 118, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn mm [f lista]\r\n  (if (empty? lista) nil\r\n      (cons (f (first lista))\r\n            (lazy-seq (mm f (rest lista))))))", "problem": 118, "user": "50576483e4b001218172198b"}, {"code": "(fn mapa [f s]\n   (if (empty? s)\n     s\n     (lazy-seq (cons (f (first s)) (mapa f (rest s))))))", "problem": 118, "user": "4dbdc898535d020aff1edf4a"}, {"code": "(fn jakeymap\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (jakeymap f (rest s)))))))", "problem": 118, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn m [f col]\n  (lazy-seq\n    (when-let [c (seq col)]\n      (cons (f (first c)) (m f (rest c))))))", "problem": 118, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "(fn collect [f [fs & rs]]\n  (lazy-seq\n    (if (nil? fs)\n      nil\n      (cons (f fs) (collect f rs)))))", "problem": 118, "user": "504c8165e4b09724c857af31"}, {"code": "(fn ! [f s]\n  (if (not (empty? s))\n    (cons (f (first s)) (lazy-seq (! f (rest s))))))", "problem": 118, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn my-map [f se]\n      (lazy-seq\n\t      (if (nil? (seq se))\n\t\t  ()\n\t\t  (cons (f (first se))\n\t\t\t   (my-map f (next se))))))", "problem": 118, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn hee [x y] (lazy-seq (if (seq y) (cons (x (first y)) (hee x (rest y))) '())))", "problem": 118, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "(fn m [f [x & xs :as s]]\n  (lazy-seq (when (seq s) (cons (f x) (m f xs)))))", "problem": 118, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn foo [x y]\n  (if (empty? y) '()\n    (lazy-seq (concat (list (x (first y))) (foo x (rest y))))))", "problem": 118, "user": "5078300de4b0fc74642bff66"}, {"code": "(fn m [f c] (when-let [s (seq c)] (lazy-seq (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "5027b41ee4b01614d1633fee"}, {"code": "(fn a [f x] (lazy-seq (if (empty? x) '() (cons (f (first x)) (a f (rest x))))))", "problem": 118, "user": "50813b88e4b09292fd669443"}, {"code": "(fn my-map [f s]\n  (if (seq s)\n    (lazy-seq\n      (cons\n        (f (first s))\n        (my-map f (rest s))))))", "problem": 118, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn mymap [f x]\r\n  (if (seq x)\r\n    (cons (f (first x)) (lazy-seq (mymap f (rest x))))\r\n    '()))", "problem": 118, "user": "505dd5c4e4b0e6aca564be0e"}, {"code": "(fn my-map [f coll]  \n  (lazy-seq    \n    (if (seq coll); If the collection is empty, returns nil            \n      (cons  (f (first coll)) (my-map f (rest  coll)))    \n      (empty coll))))", "problem": 118, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "(fn my-map\n  [f p]\n  (lazy-seq\n    (if (empty? p)\n      '()\n      (cons (f (first p)) (my-map f (rest p))))))", "problem": 118, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "(fn my-map [f [h & t]]\n  (if (empty? t) [(f h)]\n    (lazy-cat [(f h)] (my-map f t))))", "problem": 118, "user": "505dcfc8e4b0e6aca564be0d"}, {"code": "(fn myf [f coll] (if (not (empty? coll)) \r\n(lazy-cat [(f (first (lazy-cat coll)))] \r\n(lazy-cat (myf f (lazy-cat (rest coll)))))))", "problem": 118, "user": "50646c01e4b007509339a58b"}, {"code": "(fn m [f c] (if-let [s (seq c)] (cons (f (first s)) (lazy-seq (m f (rest s)))) nil))", "problem": 118, "user": "5098bcfee4b0cae2931060a1"}, {"code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "(fn _ [f x]\n  (lazy-seq\n  (if (seq x)\n    (cons (f (first x)) (_ f (rest x)))\n    '())))", "problem": 118, "user": "509c2c55e4b085ae113522ab"}, {"code": "(fn m [f [x & xs]]\r\n  (when x (cons (f x) (lazy-seq (m f xs)))))", "problem": 118, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn m [f c]\n  (lazy-seq\n    (if (empty? c)\n      c\n      (concat [(f (first c))] (m f (rest c))))))", "problem": 118, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "(fn [f l]\n  (rest (reductions #(f %2) 0 l)))", "problem": 118, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn m [f [x & s]] \n  (lazy-seq (if x (cons (f x) (m f s)))))", "problem": 118, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn mymap [f s]\n  (lazy-seq\n   (if (empty? s)\n     nil\n     (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn my-map[f coll]\r\n  (lazy-seq (cond (empty? coll) [] :else\r\n  (cons (f (first coll)) (my-map f (rest coll))))))", "problem": 118, "user": "5065bd94e4b0148eb3925aed"}, {"code": "#(rest (reductions (fn [x y] (%1 y)) nil %2))", "problem": 118, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn d [f xs]\n  (if (empty? xs) []\n\t\t(lazy-cat [(f (first xs))] (d f (rest xs)))))", "problem": 118, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn [f coll]\n  ((fn h [xs]\n    (if (empty? xs)\n      nil\n      (lazy-seq (cons \n        (f (first xs))\n\t\t(h (rest xs)))))) coll))", "problem": 118, "user": "50217818e4b00bba4502f7a7"}, {"code": "(fn map_ [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (map_ f (rest s))))))", "problem": 118, "user": "5092fe10e4b097f48cc3857e"}, {"code": "(fn m \n   [f a] (lazy-seq (if a (cons (f (first a)) (m f (next a))) []))\n   )", "problem": 118, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "(fn mp [f [head & tail]]\n  (if head\n    (lazy-seq (cons (f head) (mp f tail)))))", "problem": 118, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn m [f [x & r]]\r\n  (if x\r\n      (cons (f x)\r\n            (lazy-seq (m f r)))))", "problem": 118, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn m [f x] (if (empty? x) [] (cons (f (first x)) (lazy-seq (m f (rest x))))))", "problem": 118, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn my-map [f s]\n  (lazy-seq\n    (when-let [s (seq s)]\n      (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn m [f coll]\n  (cons\n    (f (first coll))\n    (let [r (rest coll)]\n      (if (seq r)\n        (lazy-seq (m f r))\n        nil))))", "problem": 118, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(\n  fn sol [ func coll ](\n      lazy-seq(\n        if( seq coll )\n          ( cons ( func (first coll) ) ( sol func (rest coll))  )\n      )\n  )\n)", "problem": 118, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "(fn my-map [f coll]\r\n    (lazy-seq\r\n      (when-let [[x & more] (seq coll)]\r\n        (cons (f x) (my-map f more)))))", "problem": 118, "user": "50436470e4b034ff00315d23"}, {"code": "(fn my-map [f xs]\n  (lazy-seq\n    (when-let [s (seq xs)]\n      (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn x [f c] (lazy-seq\r\n              (when (seq c)\r\n                 (cons (f (first c))  (x f (rest c))))\r\n                )\r\n)", "problem": 118, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(fn mymap [f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n        (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn my-map [f s]\n  (when (seq s)\n    (lazy-seq \n      (cons (f (first s))\n         (my-map f (rest s))))))", "problem": 118, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn it [f xs]\n  (if (empty? xs) nil\n    (lazy-seq\n      (cons (f (first xs))\n            (it f (rest xs))))))", "problem": 118, "user": "509160dae4b0742c82730aef"}, {"code": "(fn my-m [f arr] (if (empty? arr) '() (cons (f (first arr)) (lazy-seq (my-m f (rest arr))))))", "problem": 118, "user": "50112acee4b0d82cfac69f4c"}, {"code": "(fn m [f c]\n        (if (empty? c) '() (lazy-seq (cons (f (first c)) (m f (rest c))))))", "problem": 118, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "(fn m\n  [f [h & r]]\n  (lazy-seq\n   (cons\n    (f h)\n    (if r (m f r)))))", "problem": 118, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn m [f n]\n  (lazy-seq\n   (if (empty? n)\n     ()\n     (cons (f (first n))\n     (m f (rest n))))))", "problem": 118, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "509b152be4b0412cdea6eb1e"}, {"code": "(fn my-map [f [x & r :as col]] \n  (if (seq col) \n    (cons (f x) \n          (lazy-seq (my-map f r))) \n    '()))", "problem": 118, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn m [f coll] (if (empty? coll) nil (lazy-seq (concat [(f (first coll))] (m f (rest coll))))))", "problem": 118, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn m[f c](if (empty? c) [](cons (f (first c)) (lazy-seq (m f (rest c))))))", "problem": 118, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "(fn mp [f coll]\n  (lazy-seq\n   (cons (f (first coll))\n         (if (empty? (rest coll)) '()\n           (mp f (rest coll))))))", "problem": 118, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn re-map [f col]\n  (if (seq col) (lazy-seq\n               (cons (f (first col)) (re-map f (rest col))))\n      nil))", "problem": 118, "user": "5012036ce4b0a040369c12f4"}, {"code": "(fn map' [f xs]\n  (if (empty? xs) '()\n    (cons (f (first xs)) (lazy-seq (map' f (rest xs))))))", "problem": 118, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn g [f c]\n  (if (empty? c)\n    []\n    (lazy-seq (cons (f (first c)) (g f (rest c))))))", "problem": 118, "user": "502940a9e4b061fd216be4b8"}, {"code": "(fn foo [f coll] \n  (if (seq coll)\n    (cons (f (first coll)) (lazy-seq (foo f (rest coll))))\n    ()))", "problem": 118, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "(fn f1 [f lst]\n   (lazy-seq\n     (if (seq lst)\n       (cons (f (first lst))\n             (f1 f (rest lst)))\n       '())))", "problem": 118, "user": "50868795e4b004985b776e5e"}, {"code": "(fn mymap [f s]\n           (lazy-seq\n             (if (seq s)\n                 (cons (f (first s)) (mymap f (rest s)))\n                 [])))", "problem": 118, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn m [f s] (when s (lazy-seq (cons (f (first s)) (m f (seq (rest s)))))))", "problem": 118, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "(fn mp [f xs] \n  (if (empty? xs)\n  '()\n  (cons (f (first xs)) (lazy-seq (mp f (rest xs))))))", "problem": 118, "user": "4ff769bce4b0678c553fc38f"}, {"code": "(fn my-map [f x]\n  (if (empty? x) []\n    (cons \n      (f (first x))\n      (lazy-seq (my-map f (rest x)))\n    )\n  )\n)", "problem": 118, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "(fn fx [f s]\n            (when-not (empty? s)\n              (cons (f (first s))\n                    (lazy-seq (fx f (rest s))))))", "problem": 118, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "(fn a [f x]\n   (cons (f (first x))\n   (if (seq (rest x)) (lazy-seq (a f (rest x))) )) )", "problem": 118, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "(fn my-map [f s] (lazy-seq (if s (cons (f (first s)) (my-map f (next s))))))", "problem": 118, "user": "50b24a2fe4b03ea88043355c"}, {"code": "(fn m [f s] \n  (lazy-seq\n  \t(if (empty? s) \n      nil \n      (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn my-map [f col]\n  (if (empty? col)\n    (lazy-seq)\n  \t(cons (f (first col)) (lazy-seq (my-map f (rest col))))))", "problem": 118, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "(fn re-map [f col]\n  (if (seq col) (lazy-seq\n               (cons (f (first col)) (re-map f (rest col))))\n      nil))", "problem": 118, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn nmap [f coll] (lazy-seq  (when-let [sx (seq coll)] (cons (f (first sx)) (nmap f (rest sx))))))", "problem": 118, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn i [f x](if(seq x)(cons (f (first x)) (lazy-seq (i f (rest x))))))", "problem": 118, "user": "4e778d36535d324fb2983d71"}, {"code": "(fn map2 [f c]\n   (when (not (empty? c))\n\t(cons (f (first c)) (lazy-seq (map2 f (rest c)) )\n        )\n     )\n  )", "problem": 118, "user": "500a214de4b03d00572d2d74"}, {"code": "(fn m [f lst]\n  (if (empty? lst)\n    []\n    (cons (f (first lst)) (lazy-seq (m f (rest lst))))))", "problem": 118, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn my-map [f s]\n  (lazy-seq\n  (if (seq s)\n    (cons (f (first s)) (my-map f (rest s)))\n    ())))", "problem": 118, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "(fn lm ([f c]  (if (not-empty c) (cons (f (first c)) (lazy-seq (lm f (rest c) ))))))", "problem": 118, "user": "50d179c7e4b05a71a896ef56"}, {"code": "(fn mapz [f coll]\n  (if (empty? coll) []\n    (cons (f (first coll)) (lazy-seq (mapz f (rest coll))))))", "problem": 118, "user": "4eca7a87535d6d7199dd3705"}, {"code": "(fn m \n  [f [h & r]] \n  (lazy-seq (cons (f h) (if r (m f r)))))", "problem": 118, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn mymap [f c]\n     (if (empty? c)\n       nil\n       (cons (f (first c)) \n             (lazy-seq (mymap f (rest c))))))", "problem": 118, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn my-map [f s]\n  (if (empty? s) s\n    (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "problem": 118, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn my-map [f [x & xs]]\n  (if (seq xs)\n    (lazy-seq (cons (f x) (my-map f xs)))\n    (list (f x))))", "problem": 118, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "(fn m [f [h & r]] (lazy-seq (cons (f h) (if r (m f r)))))", "problem": 118, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "(fn m [f s] (lazy-seq (when-let [sq (seq s)] (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn m [a b] \n   (when b\n     (cons (a (first b)) (lazy-seq (m a (next b))))))", "problem": 118, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn rec [f [x & xs]] (lazy-seq (cons (f x) (when xs (rec f xs)))))", "problem": 118, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn map2 [f col]\n   (if (= col '())\n   nil\n  (cons (f (first col)) (lazy-seq (map2 f (rest col))))))", "problem": 118, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn g [f s] (when (not (empty? s)) (cons (f (first s)) (lazy-seq (g f (rest s))))))", "problem": 118, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn map-me [f [x & coll]]\n  (lazy-seq (if x\n    (cons (f x) (map-me f coll))\n    [])))", "problem": 118, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn m [p [x & r]] (cons (p x) (lazy-seq (if r (m p r)))))", "problem": 118, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "(fn mab [f s]\n  (if (empty? s) s\n      (cons (f (first s)) (lazy-seq (mab f (rest s))))))", "problem": 118, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn [f coll]\n  (letfn [(my-map [f coll]\n            (if (empty? coll)\n              []\n              (lazy-seq\n               (cons (f (first coll)) (my-map f (rest coll))))))]\n    (my-map f coll)))", "problem": 118, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn m [f s]\n  (lazy-seq (when-let [h (first s)]\n              (cons (f h) (m f (rest s))))))", "problem": 118, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "(fn i [f [a & b]] (if (nil? a) nil (cons (f a) (lazy-seq (i f b)))))", "problem": 118, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn map- [numbers aSequence] \n  (lazy-seq \n    (when-let [number (seq aSequence)] \n      (cons (numbers (first number)) (map- numbers (rest number))))))", "problem": 118, "user": "50ee145de4b06330c1f87c53"}, {"code": "(fn m [f [s & r]]\n  (when s (cons (f s) (lazy-seq (m f r)))))", "problem": 118, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn newmap [f l]\n\t  \"implement map\"\n\t  (if (empty? l) [] (lazy-cat (vector (f (first l))) (newmap f (rest l)))))", "problem": 118, "user": "503539dee4b0ed9c821488f6"}, {"code": "(fn mp [f s]\n  (when (seq s)\n    (cons (f (first s))\n          (lazy-seq (mp f (next s))))))", "problem": 118, "user": "50608ea0e4b07251188e4456"}, {"code": "(fn map- [f x] \n  (lazy-seq \n    (when-let [s (seq x)] \n      (cons (f (first s)) (map- f (rest s))))))", "problem": 118, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "( fn m [f l] (lazy-seq (if (empty? l) l (cons (f (first l)) (m f (rest l))))))", "problem": 118, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn m [f [a & b]] (cons (f a) (when b (lazy-seq (m f b)))))", "problem": 118, "user": "4e7115b3535d5021c1a89647"}, {"code": "(fn m [f s]\n  (when (seq s)\n    (cons (f (first s))\n          (lazy-seq (m f (next s))))))", "problem": 118, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn map2 [f s]\n  (if (empty? s)\n    nil\n    (cons (f (first s))\n          (lazy-seq (map2 f (rest s))))))", "problem": 118, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn mapz [y x] (if (empty? x) '() (cons (y (first x)) (lazy-seq (mapz y (rest x))))))", "problem": 118, "user": "50f07b21e4b0bdaecbb47dc2"}, {"code": "(fn mymap [f coll]\n  (when (seq coll)\n    (cons (f (first coll)) (lazy-seq (mymap f (rest coll))))\n  )\n)", "problem": 118, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "(fn m [f coll]\n    (lazy-seq\n          (when-let [s (seq coll)]\n            (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn [x y]\n  ((fn lt [p]\n     (cond \n      \t(empty? p) []\n      \t:else (cons (x (first p)) (lazy-seq (lt (rest p)))))\n     ) y  \n   ))", "problem": 118, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "(fn test [f col]\n  (lazy-seq\n   (when-let [s (seq col)]\n     (cons (f (first s)) (test f (rest s))))))", "problem": 118, "user": "50ccf729e4b0f7a459302aac"}, {"code": "(fn _ [f [h & t :as s]] (when (seq s) (cons (f h) (lazy-seq (_ f t)))))", "problem": 118, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "(fn r [f [h & c]]\n  (if h (cons (f h) (lazy-seq (r f c)))))", "problem": 118, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn map-118\n  [f coll]\n  (if (not (empty? coll))\n    (cons (f (first coll)) (lazy-seq (map-118 f (rest coll))))))", "problem": 118, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "(fn m [f x]\n   (lazy-seq\n      (when-let [s (seq x)]\n        (cons (f (first s)) (m f (rest s)))\n\t  )\n\t)\n)", "problem": 118, "user": "50f4894be4b004d364930528"}, {"code": "(fn m [ f [x & xs]] (lazy-seq (cons (f x) (if (nil? xs) nil (m f xs)))))", "problem": 118, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn m [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons\n      (f (first s))\n      (m f (rest s))))))", "problem": 118, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn mp [f s] (if (empty? s) []\n               (lazy-seq (cons (f (first s)) (mp f (rest s))))))", "problem": 118, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn mymap [f sq] (if (empty? sq) '() (cons (f (first sq)) (lazy-seq (mymap f (rest sq))))))", "problem": 118, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn my-map[f coll]\n      (lazy-seq \n        (when (seq coll)\n          (cons (f (first coll)) (my-map f (rest coll))))))", "problem": 118, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn my-map [f s] (if (empty? s)\n                   ()\n                   (lazy-cat [(f (first s))] (my-map f (rest s)))))", "problem": 118, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "(fn mapr [f c]\n  (when-let [x (seq c)] \n    (cons (f (first x)) (lazy-seq (mapr f (rest x))))))", "problem": 118, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn mp [f [x & xs]]\n\t(let [v (f x)]\n\t\t(if (seq xs)\t\n\t\t\t(cons v (lazy-seq (mp f xs))) \n\t\t\t(list v))))", "problem": 118, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn map2 [f s]\n  (lazy-seq\n   \t(when (seq s)\n      (cons (f (first s)) (map2 f (rest s))))))", "problem": 118, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(fn remap[f s]\n  (if (empty? s)\n     nil\n    (lazy-seq\n      (cons (f (first s)) (remap f (rest s))))))", "problem": 118, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn f [a coll] \n\t(lazy-seq\n\t\t(when-let [s (seq coll)] (cons (a (first s)) (f a (rest s))))))", "problem": 118, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "(fn my-map [func seqs]\n  (if (empty? seqs) '()\n    (lazy-seq\n      (when-let [s (seq seqs)]\n        (cons (func (first s))\n            (my-map func (rest s)))))))", "problem": 118, "user": "4e73a9dc535dff18050a9c77"}, {"code": "(fn my-map [f s]\n  (if (empty? s) []\n  (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "50aab057e4b056ee0193586b"}, {"code": "(letfn [(m [f s]\n           (if (seq s)\n             (lazy-seq\n              (cons (f (first s)) (m f (rest s))))))] m)", "problem": 118, "user": "510db6cde4b078ea71921145"}, {"code": "(fn m [f xs]\n  (if (empty? xs)\n    '()\n    (cons (f (first xs)) (lazy-seq (m f (rest xs))))))", "problem": 118, "user": "511026b1e4b04c71fce993ec"}, {"code": "(fn remap [f l](if (empty? l) l (lazy-seq (cons (f (first l)) (remap f (rest l))))))", "problem": 118, "user": "510931ede4b0c71f76895663"}, {"code": "(fn [f s](rest (reductions #(f %2) 0 s)))", "problem": 118, "user": "5107b86de4b05b2b4eee7495"}, {"code": "(fn mmap [f xs]\n  (if (empty? xs)\n    xs\n    (cons (f (first xs)) (lazy-seq (mmap f (rest xs))))))", "problem": 118, "user": "5102ac9de4b00c483ae176fa"}, {"code": "(fn -map [f [a & m]]\n  (lazy-seq\n   (cons (f a) (if m (-map f m)))))", "problem": 118, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn g [f s]\n  (if (seq s)\n    (lazy-seq (cons (f (first s)) (g f (rest s))))\n    nil))", "problem": 118, "user": "5102489de4b00c483ae176f6"}, {"code": "(fn my-map [f [h & r]]\n  (lazy-seq \n   (cons \n    (f h) \n    (if r\n      (my-map f r)))))", "problem": 118, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn mymap [f coll]\n  (lazy-seq\n\t  (if (seq coll) \n    \t(cons (f (first coll))(mymap f (rest coll))))))", "problem": 118, "user": "5106bc8ae4b01150e115ebec"}, {"code": "(fn my-map [f xs]\n   (if (empty? xs) xs\n   (cons (f (first xs))\n         (lazy-seq (my-map f (rest xs))))))", "problem": 118, "user": "50d8739ae4b01f0871336e68"}, {"code": "(fn m [f s]\n  (when (seq s)\n    (lazy-seq (cons (f (first s)) (m f (next s))))))", "problem": 118, "user": "4e4be570535dc968683fc4d8"}, {"code": "(fn mymap [f myseq]\n  (if (empty? myseq)\n    ()\n    (lazy-seq (cons (f (first myseq)) (mymap f (rest myseq))))))", "problem": 118, "user": "4faa5f61e4b081705acca1f0"}, {"code": "(fn _map [function items]\n  (if (empty? items)\n    '()\n    (lazy-seq (cons (function (first items)) (_map function (rest items))))))", "problem": 118, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn m\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (m f (rest s)))))))", "problem": 118, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn m [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4e50ad74535dc968683fc4ec"}, {"code": "#(letfn [(f [coll] (if (= coll '()) nil (cons (%1 (first coll)) (lazy-seq (f (rest coll))))))]\n    (f %2))", "problem": 118, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "51181009e4b0e0897831a60f"}, {"code": "(fn my-map [f s]\n  (if (empty? s) '()\n    (cons (f (first s)) (lazy-seq (my-map f (rest s)))) ))", "problem": 118, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn my-map\n   [f [e & more]]\n   (lazy-seq (cons (f e) (if more (my-map f more)))))", "problem": 118, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "(fn ! [fun [x & xs]]\n (if x\n  (lazy-seq\n   (cons\n    (fun x) (! fun xs)))))", "problem": 118, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn remap [f s]\n  (if (not s) '()\n  (cons (f (first s)) (lazy-seq (remap f (next s))))))", "problem": 118, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "(fn mmap\n  [f xs]\n  (lazy-seq\n   (when (seq xs)\n     (cons (f (first xs)) (mmap f (rest xs))))))", "problem": 118, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "(fn myf [f coll]\n  (if (empty? coll)\n    []\n\t(cons (f (first coll)) (lazy-seq (myf f (rest coll))))))", "problem": 118, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn my-fn [f s]\n   (if (empty? s)\n     ()\n     (cons (f (first s))\n           (lazy-seq\n            (my-fn f (rest s))))))", "problem": 118, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn this [f coll]\n  (if (empty? coll) \n    nil\n    (cons (f (first coll)) (lazy-seq (this f (rest coll))))))", "problem": 118, "user": "4ec12577535dfed6da9c6da8"}, {"code": "(fn ! [f lst]\n  (if (empty? lst)\n      lst\n      (cons (f (first lst)) (lazy-seq (! f (rest lst))))))", "problem": 118, "user": "50b29029e4b03ea880433563"}, {"code": "(fn my-map [f xs] (lazy-seq (cons (f (first xs)) (if-let [t (next xs)] \n                                                              (my-map f t)\n                                                              nil))))", "problem": 118, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn m [f s]\n  (when-not (empty? s)\n    (cons (f (first s))\n          (lazy-seq (m f (rest s))))))", "problem": 118, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn r [f xs]\n  (if (empty? xs)\n    '()\n  \t(lazy-seq (concat (list (f (first xs))) (r f (rest xs))))))", "problem": 118, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "(fn [f s]\n  (drop 1 (reductions\n   (fn [_ e]\n     (f e)) 0 s)))", "problem": 118, "user": "51284226e4b03a34742b4308"}, {"code": "(fn m [f s] (when (not-empty s)\n              (cons (f (first s))\n                    (lazy-seq (m f (rest s))))))", "problem": 118, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn m [f [x & xs]] \n  (when x (cons (f x) (lazy-seq (m f xs)))))", "problem": 118, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn lazy-map [f xs]\n  (lazy-seq\n   (when-let [s (seq xs)]\n     (cons (f (first s)) (lazy-map f (rest s))))))", "problem": 118, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn mymap [f coll]\n  (loop\n    [coll coll]\n    (if (empty? coll) []\n    \t(cons (f (first coll)) (lazy-seq (mymap f (rest coll))))))\n)", "problem": 118, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn ! [func coll]\n   (lazy-seq (if (empty? coll)\n     []\n     (cons (func (first coll)) (! func (rest coll)))\n     ))\n   )", "problem": 118, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn my-map [func liste]\n(lazy-seq\n  (if (not-empty liste)\n  (cons (func (first liste)) (my-map func (rest liste))))\n  ))", "problem": 118, "user": "4e2164ff535d04ed9115e815"}, {"code": "(fn mp [func l]\n   (if (empty? l)\n     nil\n     (cons (func (first l)) (lazy-seq (mp func (rest l))))))", "problem": 118, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn m [f s]\n  (if (empty? (next s))\n    [(f (first s))]\n    (cons (f (first s))\n          (lazy-seq (m f (rest s))))))", "problem": 118, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn implmap [f s]\n  (lazy-seq\n    (when-let [s (seq s)]\n      (cons (f (first s)) (implmap f (rest s))))))", "problem": 118, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn m [f args]\n  (lazy-seq\n    (when-let [s (seq args)]\n      (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn mm[ff cc]\n    (if (first cc )\n        (lazy-seq ( cons ( ff (first cc)) (mm ff (rest cc))))\n        []))", "problem": 118, "user": "4f030775535dcb61093f6a43"}, {"code": "(fn mop\n  [f s] (if (empty? s)\n          []\n          (cons (f (first s)) (lazy-seq (mop f (rest s)))))\n)", "problem": 118, "user": "510a6bece4b06956752d35af"}, {"code": "(fn foo [f x]\n  (lazy-seq\n    (if (seq x)\n      (cons (f (first x)) (foo f (rest x)))\n      '())))", "problem": 118, "user": "510b704ee4b078ea71921100"}, {"code": ";;(fn new-map [f s]\n;;  (when (seq s)\n;;    (cons (f (first s))\n;;          (lazy-seq\n;;           (new-map f (rest s))))))\n\n;; both of these solutions work, but this one will probably work like map\n;; in the case when the initial input is an empty seq or nil\n(fn new-map [f s]\n  (lazy-seq\n  (when (seq s)\n    (cons (f (first s))\n           (new-map f (rest s))))))", "problem": 118, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn mapping [f coll]\n    (if (seq coll)\n      (cons (f (first coll))\n            (lazy-seq (mapping f (rest coll))))))", "problem": 118, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn mymap [f l]\n  (if (empty? l) '()\n  (lazy-seq (cons (f (first l)) (mymap f (rest l))))))", "problem": 118, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn fx [f xs] (when xs (cons (f (first xs)) (lazy-seq (fx f (next xs))))))", "problem": 118, "user": "511d11d7e4b022853b0e079f"}, {"code": "(fn my-map [p l]\n  (if (empty? l)\n    []\n    (lazy-seq (cons (p (first l)) (my-map p (rest l))))))", "problem": 118, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn mmap [f s]\n  (when (seq s)\n  \t(cons (f (first s)) (lazy-seq (mmap f (rest s))))))", "problem": 118, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn m [f s]\n  (if (empty? s)\n    '()\n    (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn remap\n  [f s]\n  (if (empty? s)\n    s\n    (cons (f (first s)) (lazy-seq (remap f (rest s))))))", "problem": 118, "user": "4f17ab99535d64f603146457"}, {"code": "(fn my-map [f coll]\n  (cond\n   (empty? coll) '()\n   :else (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))))", "problem": 118, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "(fn fakemap [f sq]\n  (if (empty? sq)\n    sq\n    (cons (f (first sq)) (lazy-seq (fakemap f (rest sq))))))", "problem": 118, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn lazy-map [f, xs]\n  (cond\n   (empty? xs) (lazy-seq)\n   :else (cons (f (first xs)) (lazy-seq (lazy-map f (rest xs))))\n   )\n  )", "problem": 118, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn mymap[f coll]\n  (when (seq coll)\n  \t(cons (f (first coll)) (lazy-seq (mymap f (rest coll))))))", "problem": 118, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn my-map [f s]\n  (if-not (empty? s)\n    (let [[fst & rst] s]\n      (cons (f fst) (lazy-seq (my-map f rst))))))", "problem": 118, "user": "5127e504e4b03a34742b4302"}, {"code": "(fn [x y] (reduce #(conj %1 (x %2)) [] (take 1000010 y)))", "problem": 118, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn m [f s]\n  (if (seq s)\n    (cons (f (first s))\n          (lazy-seq (m f (rest s))))))", "problem": 118, "user": "4f1bb9d8535d64f60314647d"}, {"code": "(fn mm([f coll]\n         (lazy-seq\n          (when-let [s (seq coll)]\n            (cons (f (first s)) (mm f (rest s)))))))", "problem": 118, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn mmap [f, [fst & rem]]\n  (lazy-seq\n   (cons (f fst)\n         (if rem (mmap f rem)))))", "problem": 118, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "(fn mymap [f coll] ((fn inner [s1] (if (not= (rest s1) '()) (lazy-seq (cons (f (first s1)) (inner (rest s1)))) (list (f (first s1))))) coll))", "problem": 118, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn m [f v]\n  (cons (f (first v)) (lazy-seq \n                       \t (if (empty? (rest v))\n                           []\n                           (m f (rest v))))))", "problem": 118, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn my-map [f [h & r]]\n  (lazy-seq\n    (cons\n      (f h)\n      (if r (my-map f r)))))", "problem": 118, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn m [f coll] (lazy-seq (when-let [s (seq coll)] (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "513d121fe4b0e544971636a2"}, {"code": ";(fn [f coll] (lazy-seq (reduce #(conj %1 (f %2)) [] coll))) ; reduce isn't lazy, and lazy-seq doesn't fix it\n\n;(fn [f coll] (lazy-seq (loop [s coll result []]\n;               (empty? coll) result\n;               (recur (rest s) (conj result (f (first s))))))) ; loop-recur isn't lazy either \n\n(fn mymap [f coll] \n  (lazy-seq (if (empty? coll) []\n              (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "(fn [op lst]\n    (reductions #(op %2) (op (first lst))  (rest lst)))", "problem": 118, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn m [f s]\n  (if (nil? s)\n    nil\n  \t(cons (f (first s)) (lazy-seq (m f (next s))))))", "problem": 118, "user": "5117c31ee4b0e0897831a60c"}, {"code": "(fn m [f s]\n  (if (empty? s) '() (cons (f (first s)) (lazy-seq (m f (drop 1 s))))))", "problem": 118, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn map2\n  [f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (map2 f (rest s)))))\n  )", "problem": 118, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "(fn mymap [f s] (if (empty? s) s\n            (cons (f (first s)) (lazy-seq (mymap f (rest s))))))", "problem": 118, "user": "513bb7a6e4b04402f587b77d"}, {"code": "(fn m [f [x & xs]]\n  (cons (f x) \n    (if xs (lazy-seq (m f xs)))))", "problem": 118, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn my-map [f s] (lazy-seq (when-let [t (seq s)] (cons (f (first t)) (my-map f (rest t))))))", "problem": 118, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn tmp [f x] \n  (if (nil? x)\n    nil\n    (cons (f (first x)) (lazy-seq (tmp f (next x))))\n;    (cons (f (first x)) nil)\n    ))", "problem": 118, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn [g l] (rest (reductions #(g %2) (cons (first l) l))))", "problem": 118, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "(fn m[ f s]  \n  (cons (f (first s))\n        (lazy-seq \n           (if (empty? (rest s))\n             nil\n             (m  f (rest s))\n         )\n   ))\n)", "problem": 118, "user": "513f53c6e4b051389b345b40"}, {"code": "(fn my-map [f c1]\n  (lazy-seq\n   (if (empty? c1)\n     nil\n     (cons (f (first c1)) (my-map f (rest c1))))))", "problem": 118, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn map1 [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (map1 f (rest s))))))", "problem": 118, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn map1 [f c]\n  (lazy-seq\n   (when-let [s (seq c)]\n       (cons (f (first s)) (map1 f (rest s))))))", "problem": 118, "user": "51502056e4b098b221effc25"}, {"code": "(fn m [f s] (when s (cons (f (first s)) (lazy-seq (m f (next s))))))", "problem": 118, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "(fn \n  \t! \n  \t[f c] (when \n            \t(seq \n\t\t\t\t\tc)\n\t\t\t\t    (lazy-seq \n    \t \t\t(cons \n\t      \t\t(f \n    \t   (first \n         c))\n      (! \n   f \n (rest \nc\n  )\n       )\n                 )\n                     )\n            )\n  )", "problem": 118, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn mp [f more]\n  (if (nil? more)\n    []\n    (lazy-cat [(f (first more))] (mp f (next more)))))", "problem": 118, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn m[f [h & t]](cons (f h) (if t (lazy-seq (m f t)) t)))", "problem": 118, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn blah [f col]\n   (lazy-seq\n    (if (seq col)\n      (cons (f (first col)) (blah f (rest col)))\n      [])))", "problem": 118, "user": "5140c505e4b049dea086df40"}, {"code": "(fn pr118 [f s]\n\t(lazy-seq\n\t (if (seq s)\n\t   (cons (f (first s)) (pr118 f (rest s))))))", "problem": 118, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn lazy-reduce [func colls]\n  (lazy-seq\n   (if (not (empty? colls))\n       (cons (func (first colls))\n\t     (lazy-reduce func (rest colls))))))", "problem": 118, "user": "5016ac54e4b052339a490e7b"}, {"code": "(fn f [x y] (if (empty? y) '() (lazy-seq (cons (x (first y)) (f x (rest y))))))", "problem": 118, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn my-map [f x]\n    (if (empty? x) x\n      (cons (f (first x)) (lazy-seq (my-map f (rest x))))\n    )   \n\n  )", "problem": 118, "user": "5158bba4e4b059418b97f0ab"}, {"code": "(fn m [f [x & xs]] (when x (lazy-seq (cons (f x) (m f xs)))))", "problem": 118, "user": "50742549e4b054001656accf"}, {"code": "(fn m [f c] \n  (if (empty? c) '()\n  (cons (f (first c)) (lazy-seq (m f (rest c))))))", "problem": 118, "user": "5145832be4b0e8879607340a"}, {"code": ";; destructuring alternative: https://github.com/monodeldiablo/4clojure/blob/master/118.clj\n(fn tst [f c]\n  (lazy-seq \n    (cons (f (first c)) \n    (when \n      (seq (rest c)) \n      (tst f (rest c))))))", "problem": 118, "user": "4e58ef07535d8a8b8723a299"}, {"code": "(fn mp [op col]\n  \n   (if (empty? col) nil\n     \n\n       (cons (op (first col)) (lazy-seq (mp op (rest col))))))", "problem": 118, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "(fn my-map [f coll]\n  (if (empty? coll) () (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "problem": 118, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "; (fn mymap [f s] (if (empty? s) '() (conj (mymap f (rest s)) (f (first s)))))\n(fn [f s] (rest (reductions (fn [_ x] (f x)) f s)))", "problem": 118, "user": "5150a7d7e4b03e678e393abb"}, {"code": "(fn my-map [f v]\n  (if (not (empty? v))\n    (cons (f (first v)) (lazy-seq (my-map f (rest v))))))", "problem": 118, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn m [f l] (if (empty? l) '() ( cons (f (first l)) (lazy-seq (m f (rest l))))))", "problem": 118, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "(fn [f coll]\n\t(letfn\n\t\t[(step [f coll]\n\t\t\t(if coll (lazy-seq (cons (f (first coll)) (step f (next coll))))))]\n\t\t(step f coll)))", "problem": 118, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn mp [f xs]\n  (lazy-seq (if (seq xs)\n    (cons (f (first xs)) (mp f (rest xs)))\n    xs)))", "problem": 118, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn fn118 [f s]\n  (when s\n    (lazy-seq\n\t    (cons (f (first s))\n\t          (fn118 f (next s))))))", "problem": 118, "user": "5125d963e4b05d10e3e395fe"}, {"code": "#(rest (reductions (fn [a b] (% b)) 0 %2))", "problem": 118, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn mmap [f c] (if ((complement empty?) c) (lazy-seq (cons (f (first c)) (mmap f (rest c))))))", "problem": 118, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn m[f c] (if (empty? c) nil (concat [(f (first c))] (lazy-seq (m f (rest c))))))", "problem": 118, "user": "5093ca51e4b097f48cc38585"}, {"code": "#(drop 1 (reductions (fn [a b] (% b)) nil %2))", "problem": 118, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "(fn\n  [f mySeq]\n  (drop 1\n    (reductions\n  \t  (fn \n        [x y] \n        (f y)\n      )\n      0\n      mySeq\n    )\n  )\n)", "problem": 118, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "(fn map3\n  [f coll]\n  (if (empty? coll)\n    coll\n    (cons (f (first coll)) (lazy-seq (map3 f (rest coll))))))", "problem": 118, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "#((fn f [s] \n   (if (empty? s) []\n     (cons (% (first s)) (lazy-seq (f (rest s)))))) %2)", "problem": 118, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn mp [f s]\n  (lazy-seq\n   (when (seq s)\n     (cons (f (first s)) (mp f (rest s))))))", "problem": 118, "user": "50981062e4b04e098a4c7268"}, {"code": "(fn my-map [f s]\n  (if (empty? s)\n    '()\n  \t(cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "problem": 118, "user": "4f03818e535dcb61093f6b00"}, {"code": "(fn m [f xs]\n   (lazy-seq\n     (when-let [s (seq xs)]\n       (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "50f48298e4b004d364930527"}, {"code": "(fn my-map[f c]\n  (when (seq c)\n    (lazy-seq (cons (f (first c)) (my-map f (rest c))))))", "problem": 118, "user": "51592b81e4b0394f658fe22c"}, {"code": "(fn m[f col]\n(if (not (empty? col))\n  (cons (f (first col)) (lazy-seq (m f (next col))))\n  ))", "problem": 118, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn mymap [f xs] \n  (if (empty? xs)\n    []\n   (lazy-seq (cons (f (first xs)) (mymap f (rest xs))))))", "problem": 118, "user": "513cb853e4b0b86ece9f322b"}, {"code": "(fn my-map [f liste]\n  (lazy-seq\n   (if (nil? liste)\n    []\n    (cons (f (first liste)) (my-map f (next liste))))))", "problem": 118, "user": "5141bc82e4b02fd87f5064c5"}, {"code": "(fn mymap [f values]\n  (if (empty? values) '()\n    (lazy-seq\n      (cons (f (first values))\n        (lazy-seq (mymap f (rest values)))))))", "problem": 118, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn m [f l]\n  (if (seq l)\n    (cons (f (first l)) (lazy-seq (m f (drop 1 l))))))", "problem": 118, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn my-map [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "4f072644535dcb61093f6c20"}, {"code": "(fn map-r [f coll]\n  (lazy-seq\n    (when-let [xs (seq coll)]\n      (cons (f (first xs)) (map-r f (rest xs))))))", "problem": 118, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "(fn my-map[f l]\n  (lazy-seq\n  (when-let [s (seq l)]\n  \t(cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn my-map [f s]\n  (when (seq s)\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "4eab612d535d7eef30807316"}, {"code": "(fn my-map [f [x & xs :as z]]\n  (when-not (empty? z)\n    (lazy-seq (cons (f x) (my-map f xs)))))", "problem": 118, "user": "5173726be4b098276e74652c"}, {"code": "(fn maap [f sq]\n  (let [x (first sq)]\n    (if (empty? sq)\n      ()\n      (cons (f x) (lazy-seq (maap f (rest sq)))))))", "problem": 118, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn m [f [arg & rest]] \n   (lazy-seq (cons (f arg) (if rest (m f rest) []))))", "problem": 118, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "(fn my-map [f [a & m]]\n  (lazy-seq\n    (cons (f a) (if m (my-map f m)))))", "problem": 118, "user": "51740b65e4b0d277d717bc67"}, {"code": "(fn remap [f l] (if (empty? l) l (cons (f (first l)) (lazy-seq (remap f (rest l))))))", "problem": 118, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "(fn map' [f [x & xs :as coll]]\n  (if (empty? coll)\n    coll\n    (cons (f x) (lazy-seq (map' f xs)))))", "problem": 118, "user": "4f89d489e4b033992c121c7e"}, {"code": "(fn m [f vs]\n  (lazy-seq\n   (if (empty? vs) '()\n     (cons (f (first vs))\n           (m f (rest vs))))))", "problem": 118, "user": "50b668dde4b08fb537db98f2"}, {"code": "(letfn [(my-map [f c] (when-let [s (seq c)] (lazy-seq (cons (f (first s)) (my-map f (next s)) )) ))] my-map)", "problem": 118, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn mp [f l] (if (empty? l) '() (cons (f (first l)) (lazy-seq (mp f (rest l))))))", "problem": 118, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn mymap [f c] (if (empty? c) c (cons (f (first c)) (lazy-seq (mymap f (rest c))))))", "problem": 118, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn mp [f v]\n  (lazy-seq\n   (if (not (empty? v))\n   (cons (f (first v)) (mp f (rest v))))))", "problem": 118, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn m [f coll]\n  (if (empty? coll)\n    []\n    (concat (vector (f (first coll)))\n            (lazy-seq (m f (rest coll))))))", "problem": 118, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn m [f xs]\n  (if (empty? xs) []\n    (cons (f (first xs)) (lazy-seq (m f (rest xs))))))", "problem": 118, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn mymap [f s]\n  (lazy-seq\n   (let [ss (seq s)]\n     (if ss\n       (cons \n        (f (first s)) \n        (mymap f (rest s))\n       )\n       )\n     )\n   )\n  \n  )", "problem": 118, "user": "4fb03cf4e4b081705acca262"}, {"code": "#(rest (reductions (fn [_ x] (% x)) nil %2))", "problem": 118, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn pam [f coll]\n  (when (seq coll)\n    (cons (f (first coll))\n          (lazy-seq (pam f (rest coll))))))", "problem": 118, "user": "51883b38e4b0eb189f8362ee"}, {"code": "(fn mymap [f s]\n  (lazy-seq\n   (if (empty? s)\n     nil\n     (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn m [f s]\n  (if (empty? s)\n    nil\n    (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn f [foo [x & y]]\n  (lazy-seq\n   (cons (foo x)\n         (if y (f foo y)))))", "problem": 118, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn m [f s]\n  (lazy-seq\n    (when-let [[x & xs] s]\n      (cons (f x) (m f xs)))))", "problem": 118, "user": "517b59b8e4b0925c997201d0"}, {"code": "(fn my-map [f items]\n  (if (empty? items) \n    '()\n  \t(cons\n     (f (first items))\n     (lazy-seq (my-map f (rest items))))))", "problem": 118, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn mymap [f s]\n  (lazy-seq\n   (when (seq s)\n     (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn mymap [f coll]\n  (lazy-seq\n    (if (not (seq coll)) '()\n      (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "(fn m\n  [f c]\n  (if (empty? c)\n    '()\n    (cons (f (first c))\n          (lazy-seq (m f (rest c))))))", "problem": 118, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "(fn m [f s] \n  (if (nil? s) \n    '()\n    (concat (list (f (first s))) (lazy-seq (m f (next s))))))", "problem": 118, "user": "517bc969e4b07ef0e56148d0"}, {"code": "(fn mymap [f col]\n  (lazy-seq\n   (when-let [[h & t] (seq col)]\n     (cons (f h) (mymap f t)))))", "problem": 118, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn mymap\n  [f x]\n  (if (empty? x)\n    \t'()\n    \t(lazy-seq (cons (f (first x)) (mymap f (next x))))))", "problem": 118, "user": "51804bcbe4b04f45bde7d901"}, {"code": "(fn map1 [f col] (when (first col) (lazy-seq (cons (f (first col)) (map1 f (rest col))))))", "problem": 118, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn r [f c]\n  (if-not (empty? c)\n    (lazy-cat (list (f (first c))) (r f (rest c)))\n    c\n    )\n  )", "problem": 118, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "(fn mp [f l]\n  (if (empty? l)\n    l\n    (cons (f (first l)) (lazy-seq (mp f (rest l))))))", "problem": 118, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn lmap [f coll]\n  (cond\n    (empty? coll) []\n    :else (cons (f (first coll)) (lazy-seq (lmap f (rest coll)))))\n)", "problem": 118, "user": "51473a70e4b0d520409ed394"}, {"code": "(fn mymap [f x]\n  (if (seq x)\n    (cons (f (first x)) (lazy-seq (mymap f (rest x))))\n    '()))", "problem": 118, "user": "5191045ee4b0f8ef0be96bf3"}, {"code": "(fn fun [f coll]\n    (if (empty? coll)\n      nil\n      (cons (f (first coll)) (lazy-seq (fun f (rest coll))))))", "problem": 118, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn remap [f [h & t]]                        \n  (if (nil? h)\n    ()\n    (lazy-seq (concat [(f h)] (remap f t)))))", "problem": 118, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [g y]\n  (letfn [(exmap\n           ([f x]\n            (lazy-seq\n             (when-let [thing (seq x)]\n               (cons (f (first thing)) (exmap f (rest thing)))))))]\n    (exmap g y)))", "problem": 118, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn m\n  [f s]\n  (if (seq s)\n    (cons\n     (f (first s))\n     (lazy-seq (m f (rest s))))\n    []))", "problem": 118, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn m [f s]\n   (when (seq s)\n         (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "506ba58be4b0eda3100c090b"}, {"code": "(fn [f c] (reductions #(f %2) (f (first c)) (rest c)))", "problem": 118, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn m [f xs]\n  (if (empty? xs)\n    nil\n    (cons (f (first xs)) (lazy-seq (m f (rest xs))))))", "problem": 118, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "(fn map'\n   [f [x & xs]]\n   (if (nil? x) '()\n       (cons (f x) (lazy-seq (map' f xs)))))", "problem": 118, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "(fn mmap [f s]\n  (cond (empty? s) ()\n  :else (cons (f (first s)) (lazy-seq (mmap f (rest s))) )))", "problem": 118, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn mmp [f c] (cond (empty? c) '()\n                    :else (cons (f (first c)) (lazy-seq (mmp f (rest c))))))", "problem": 118, "user": "5183f5d7e4b02826a645f393"}, {"code": "(fn mmm [f c]\n  (when-let [s (seq c)]\n    (cons (f (first s)) (lazy-seq (mmm f (rest s))))))", "problem": 118, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn m [f c]\n  (lazy-seq\n   (if (empty? c)\n     nil\n     (cons (f (first c))\n           (m f (rest c))))))", "problem": 118, "user": "4fbf2818e4b081705acca317"}, {"code": "(fn ! [f [x & s]]\n  (if x\n    (cons (f x) (lazy-seq (! f s)))\n  '()))", "problem": 118, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "(fn m [f v] (cons\n (f (first v)) \n(lazy-seq (if (empty? (rest v)) nil (m f (rest v))))))", "problem": 118, "user": "517945dce4b0684c1c981a43"}, {"code": "(fn m [f xs]\n  (if (empty? xs) nil\n  (cons (f (first xs))\n        (lazy-seq (m f (rest xs))))))", "problem": 118, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn this\n  [f xs]\n  (lazy-seq\n    (when-let [s (seq xs)]\n      (cons\n        (f (first s))\n        (this f (rest s))))))", "problem": 118, "user": "4f85a75ce4b033992c121c48"}, {"code": "(fn mymap [f xs] (when-let [head (first xs)] (lazy-seq (cons (f head) (mymap f (rest xs))))))", "problem": 118, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn mmap [f target]\n  (if (empty? target)\n    '()\n    (cons (f (first target)) (lazy-seq (mmap f (rest target))))))", "problem": 118, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn foo [op l]\n\t(cond\n\t\t(empty? l) nil\n\t\t:else (lazy-seq (cons (op (first l)) (foo op (rest l))))\n\t)\n)", "problem": 118, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "(fn m [f [x & xs :as l]] (when (not-empty l) (cons (f x) (lazy-seq (m f xs)))))", "problem": 118, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "(fn mp [f xs] (if (empty? xs) xs\n             (cons (f (first xs)) (lazy-seq (mp f (rest xs))))))", "problem": 118, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "(fn m [f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n        (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "(fn ma [fun coll]\n  (lazy-seq \n   (when-let [s (seq coll)]\n     (cons (fun (first s)) (ma fun (rest s))))))", "problem": 118, "user": "5047782ce4b0371827a27bc2"}, {"code": "#(reductions (fn [acc x] (%1 x)) (%1 (first %2)) (rest %2))", "problem": 118, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn m [f l]\n    (if (empty? l)\n      '()\n      (lazy-seq (cons (f (first l))\n                      (m f (rest l))))))", "problem": 118, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn mymap [f x]\n  (let [a (f (first x)) b (rest x)]\n    (if (empty? b)\n      (list a)\n      (cons a (lazy-seq (mymap f b))))\n  )\n)", "problem": 118, "user": "518c5236e4b087e178201de0"}, {"code": "(fn m [a b]\n  (if(empty? b)\n    []\n    (lazy-cat [(a (first b))] (m a (next b)))\n   )\n )", "problem": 118, "user": "51aeb1f4e4b09397d5109794"}, {"code": "(fn m [f [l & ls]] (if ls (lazy-seq ( cons (f l) (m f ls))) (list (f l))))", "problem": 118, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn m [f l] (cond\n             (empty? l) []\n             :else (cons (f (first l)) (lazy-seq (m f (rest l))))))", "problem": 118, "user": "51bf4560e4b013aa0d74b817"}, {"code": "(fn m [f coll]\n  (if-not (nil? coll)\n    (cons (f (first coll)) (lazy-seq (m f (next coll))))))", "problem": 118, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn m [f [x & xs]] (if (nil? x) [] (cons (f x) (lazy-seq (m f xs)))))", "problem": 118, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "(fn g [f s] (when (seq s) (cons (f (first s)) (lazy-seq (g f (rest s))))))", "problem": 118, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn mymap [f y]\n            (when (first y)\n               (cons (f (first y)) (lazy-seq (mymap f (rest y))))\n              ))", "problem": 118, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn re-map [f col]\n  (if (seq col) (lazy-seq\n               (cons (f (first col)) (re-map f (rest col))))\n      nil))", "problem": 118, "user": "518ad8fce4b06da86c1973c1"}, {"code": "(fn o [f s]\n    (let [i (first s)\n          r (rest s)]\n      (cons (f i) (if (not-empty r) (lazy-seq (o f r))))))", "problem": 118, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn mapz [x y] (if (empty? y) '() (cons (x (first y)) (lazy-seq (mapz x (rest y))))))", "problem": 118, "user": "4f32135ae4b0d6649770a08e"}, {"code": "(fn re-map [f se]\n   (if-not (empty? se)\n    (lazy-seq (cons (f (first se))\n       (re-map f (rest se))))))", "problem": 118, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "(fn [f x] (rest (reductions #(f %2) nil x)))", "problem": 118, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn mymap [f coll]\n  (if (not (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "51d10b1fe4b067c36548635e"}, {"code": "(fn mymap [f c]\n  (lazy-seq \n   (if-not (= c ())\n    (cons (f (first c)) (mymap f (rest c))))))", "problem": 118, "user": "518a8c4be4b0df82f5685903"}, {"code": "(fn g [f [fst & rst]] (cons (f fst) (if rst (lazy-seq (g f rst)) nil)))", "problem": 118, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn my-map [f xs] (concat (vector (f (first xs))) (if (empty? (rest xs)) [] (lazy-seq (my-map f (rest xs))))))", "problem": 118, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn m[f[x & y]](lazy-seq(if x(cons(f x)(m f y)))))", "problem": 118, "user": "4eab4a88535d7eef30807315"}, {"code": "(fn m [f n]\n    (if (empty? n)\n        []\n        (cons (f (first n)) (lazy-seq (m f (rest n))))\n    )\n)", "problem": 118, "user": "51d1111ce4b067c36548635f"}, {"code": "(fn map' [f [x & xs :as coll]] (when-not (empty? coll) (lazy-seq (cons (f x) (map' f xs)))))", "problem": 118, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn my-map-lazy\n  [func x]\n  (lazy-seq\n    (when-let [s (seq x)]\n      (cons\n        (func (first x)) (my-map-lazy func (rest x))))))", "problem": 118, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn my-map [f [x & rst :as coll]]\n\t(if (empty? coll)\n\t\t[]\n\t\t(cons\n\t\t\t(f x)\n\t\t\t(lazy-seq (my-map f (rest coll))))))", "problem": 118, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn mp [f s]\n  (when-let [coll (seq s)]\n    (cons (f (first coll))\n          (lazy-seq (mp f (rest coll))))))", "problem": 118, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn my-map [f coll]\n  (when (not (empty? coll))\n    (cons\n      (f (first coll))\n      (lazy-seq (my-map f (rest coll))))))", "problem": 118, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "(fn m [f c]\n   (if (empty? c) nil\n     (cons (f (first c))\n           (lazy-seq (m f (rest c))))))", "problem": 118, "user": "51e00020e4b01188f0627534"}, {"code": "(fn alt-map [fun a-list]\n           (if (empty? a-list)\n             '()\n             (cons (fun (first a-list)) (lazy-seq (alt-map fun (rest a-list))))))", "problem": 118, "user": "4ede0511535d10e5ff6f5330"}, {"code": "(fn iter [f x]\n\t(if (not (empty? x))\n\t\t(lazy-seq\n\t\t\t(cons (f (first x)) (iter f (rest x))))))", "problem": 118, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "; (fn [f i] (lazy-seq (reduce #(conj %1 (f %2)) [] (lazy-seq i))))\n; (fn map2[res f coll]\n;   (if (empty? coll) \n;    res\n;    (recur (lazy-cat res [(f (first coll))]) f (rest coll) )\n;  )) (lazy-seq [])\n \n (fn map2[f i]\n   (lazy-seq \n    (reductions \n    (fn red[r c] (f c)) (f (first i)) (lazy-seq (rest i)))\n   ))", "problem": 118, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn mp [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)] \n      (cons (f (first s)) (mp f (rest s))))))", "problem": 118, "user": "51c8301ee4b07ef393169e4d"}, {"code": "(fn ints-from [f col]\n  (if (seq col)\n    (cons (f (first col)) (lazy-seq (ints-from f (rest col))))\n    '()))", "problem": 118, "user": "4fb4303fe4b081705acca2ac"}, {"code": "(fn m [f [x & xs]] \n  (lazy-seq (cons \n   (f x) \n   (if xs\n     (m f xs)\n     ())\n  ))\n)", "problem": 118, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn [f initial-s]\n  (letfn [(map' [[x & xs :as s]]\n            (when (not-empty s)\n              (cons (f x) (lazy-seq (map' xs)))))]\n    (map' initial-s)))", "problem": 118, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn m [f vals]\n    (when (seq vals)\n      (lazy-seq\n       (concat [(f (first vals))]\n               (m f (rest vals))))))", "problem": 118, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn [func data] (loop [f func\n                       d (take 2000000 data)\n                       x []]\n                  (if (empty? d)\n                    x\n                    (recur f (rest d) (conj x (f (first d)))))))", "problem": 118, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "(fn [f [init & oth]] (reductions #(f %2) (f init) oth))", "problem": 118, "user": "51e24a04e4b01e5198146430"}, {"code": "(fn my-map [f xs]\n  (lazy-seq\n    (if (seq xs)\n      (cons (f (first xs)) (my-map f (rest xs)))\n      '())))", "problem": 118, "user": "51d08d67e4b067c365486351"}, {"code": ";;\u9012\u5f52\u7684\u601d\u60f3\uff0c\u5426\u5219\u5185\u5b58\u6ea2\u51fa\n(fn map2 [f coll]\n  (if-not (empty? coll)\n  (cons (f (first coll)) \n        (lazy-seq (map2 f (rest coll)))))\n  )", "problem": 118, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn m [f s]\n  (lazy-seq\n   (if (seq s)\n     (cons (f (first s))\n           (m f (rest s))))))", "problem": 118, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn tmp1 [f se]\n (lazy-seq\n  (when-let [s (seq se)] \n   (cons (f (first s)) (tmp1 f (rest s))))))", "problem": 118, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "(fn m [f [h & t]]\n  (if h\n    (cons (f h) (lazy-seq (m f t)))))", "problem": 118, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn m-map [f coll] (if-let [[first & rest] coll] \n           (cons (f first)\n                 (lazy-seq\n                  (m-map f rest)))))", "problem": 118, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn mapp[f xs]\n  (if (empty? xs)\n    xs\n    (lazy-seq (cons (f (first xs)) (mapp f (rest xs))))))", "problem": 118, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn mp [f s]\n   (when (seq s)\n     (lazy-seq (cons (f (first s)) (mp f (rest s))))\n   ))", "problem": 118, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "(fn newmap\n  [f s]\n  (when (seq s)\n    (cons (f (first s)) (lazy-seq (newmap f (rest s))))))", "problem": 118, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn new-map [f col]\n  (when (not (empty? col))\n    (cons (f (first col)) (lazy-seq (new-map f (rest col))))))", "problem": 118, "user": "50d882d4e4b01f0871336e69"}, {"code": "(fn Map [f seq]\n  (if (first seq)\n    (lazy-seq (cons (f (first seq)) (Map f (rest seq))))))", "problem": 118, "user": "51df825de4b01188f062752b"}, {"code": "(fn re-map [f s]\n  (if (empty? s)\n    '()\n    (cons (f (first s)) (lazy-seq (re-map f (rest s))))))", "problem": 118, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn m [f [x & r]]\n  (if x (cons (f x) (lazy-seq (m f r)))))", "problem": 118, "user": "5046ee3ee4b03b02161376b4"}, {"code": "(fn m [f coll]\n  (when (seq coll)\n  \t(lazy-seq (cons (f (first coll)) (m f (rest coll))))))", "problem": 118, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "(fn fun [f v] \n  (if (empty? v)\n    nil\n    (cons (f (first (take 1 v))) (lazy-seq (fun f (drop 1 v))))))", "problem": 118, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn mp [f [x & xs]] \n   (if x (lazy-seq (cons (f x) (mp f xs)))))", "problem": 118, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "(fn m [f v]\n   (lazy-seq\n      (if (nil? (first (rest v)))\n          (list (f (first v)))\n          (cons (f (first v)) (m f (rest v)))\n      )\n   )\n)", "problem": 118, "user": "518aec06e4b06da86c1973c2"}, {"code": "(fn mmap [f s]\n  (if (empty? s) '()\n    (cons (f (first s)) (lazy-seq (mmap f (rest s))))))", "problem": 118, "user": "51e0198ee4b01188f0627539"}, {"code": "(fn mymap [f [h & t]]\n  (lazy-seq (cons (f h) (if t (mymap f t)))))", "problem": 118, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn my-map\n  [f coll]\n  (if-let [curr (first coll)]\n    (lazy-seq\n     (cons (f curr)\n           (my-map f (rest coll))))))", "problem": 118, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "(fn foo [f xs]\n   (if (empty? xs)\n     '()\n     (cons (f (first xs)) (lazy-seq (foo f (next xs))))))", "problem": 118, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn mp [f s] \n  (lazy-seq \n   (when (seq s) \n     (cons (f (first s)) (mp f (rest s))))))", "problem": 118, "user": "5200ffc6e4b0d7096e99ddac"}, {"code": "(fn mm [f x] (lazy-seq (if (seq x) (cons (f (first x)) (mm f (rest x))) '())))", "problem": 118, "user": "51fa1375e4b0f1313d4689c9"}, {"code": "(fn m [f x] (if (empty? x) () (cons (f (first x)) (lazy-seq (m f (rest x))))))", "problem": 118, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn my-map [f s]\n  (if (or (nil? s)\n          (empty? s))\n    nil\n    (cons (f (first s))\n          (lazy-seq (my-map f (rest s))))))", "problem": 118, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "(fn m [f xs]\n  (when (not-empty xs)\n    (lazy-seq \n     (cons (f (first xs))\n           (m f (rest xs))))))", "problem": 118, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "(fn my-map [ f [ a & xs] ]\n    (if (nil? a)\n        nil\n        (cons (f a) (lazy-seq (my-map f xs))))\n)", "problem": 118, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn mp [f v] \n  (if (seq v) \n    (lazy-seq \n     (cons \n      (f (first v)) (mp f (next v))))))", "problem": 118, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn my-map [f coll]\n  (lazy-seq\n   (when-let [[x & xs] (seq coll)]\n     (cons (f x) (my-map f xs)))))", "problem": 118, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn map2 [f s]\n  (lazy-seq\n   (if-not (empty? s)\n     (cons \n      (f (first s))\n      (map2 f (rest s))))))", "problem": 118, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn my-map [f [i & c]]\n\t(cond (seq c)\n        (cons (f i) \n              (lazy-seq (my-map f c)))\n\t\t:else\n        (vector (f i))))", "problem": 118, "user": "4e781a2e535d324fb2983d74"}, {"code": "(fn mymap [f [x & r]] (lazy-seq (cons (f x) (when r (mymap f r)))))", "problem": 118, "user": "500ec210e4b00fff93030f9d"}, {"code": "(fn map1 [f coll]\n  (when (seq coll)\n    (lazy-seq\n     (cons (f (first coll)) (map1 f (rest coll))))))", "problem": 118, "user": "51f82769e4b09be9c177e527"}, {"code": "(fn mmp [f xs]\n  (if (not-empty xs)\n    (cons (f (first xs)) (lazy-seq (mmp f (rest xs))))))", "problem": 118, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn m [f l]\n \t(if (empty? l)\n    nil\n    (lazy-seq (cons (f (first l)) (m f (rest l))))))", "problem": 118, "user": "52091d57e4b0e152394d76f0"}, {"code": "(fn klapp [f s]\n  (if-not (empty? s)\n\t  (lazy-seq\n    \t(cons (f (first s))\n        \t  (klapp f (rest s))))))", "problem": 118, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn self-recur [f s] (lazy-seq (when (not (empty? s)) (cons (f (first s)) (self-recur f (rest s))))))", "problem": 118, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "(fn m [f coll]\n  (if (not-empty coll)\n    (cons (f (first coll))                   \n          (lazy-seq (m f (rest coll))))))", "problem": 118, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn my-map [f coll]\n  (if (not (empty? coll))\n    (lazy-seq\n     (cons (f (first coll)) (my-map f (next coll))))))", "problem": 118, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "(fn m [f c]\n  (lazy-seq\n   (when-not (empty? c)\n     (cons (f (first c)) (m f (rest c))))))", "problem": 118, "user": "4ecc1d85535d23f0362276f8"}, {"code": "(fn my-map [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (my-map f (rest coll))))))", "problem": 118, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "; This is a standard clojure idiom for generating lazy sequences based on a function.\n; If the supplied sequence is finite then we must use next rather than rest, since next will return\n; nil at the end of the sequence not null pointer exception\n(fn map2 [f s]\n\t(if s (cons (f (first s))\n\t\t(lazy-seq (map2 f (next s)))))\n\t)", "problem": 118, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "(fn m [f c] (when (seq c) (cons (f (first c)) (lazy-seq (m f (next c))))))", "problem": 118, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn map-e\n  [f x]\n  (if (empty? x) '()\n    (lazy-seq (cons (f (first x)) (map-e f (rest x))))))", "problem": 118, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn maplawd [f s]\n  (lazy-seq \n   (when (seq s)\n     (cons (f (first s)) (maplawd f (rest s))))))", "problem": 118, "user": "51fa7154e4b0f1313d4689da"}, {"code": "(fn fun [f coll]\n\t(if (empty? coll) coll\n\t\t(lazy-seq\n\t\t\t(cons (f (first coll))\n\t\t\t\t(fun f (rest coll))))))", "problem": 118, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn mine [f coll]\n  (if (not(empty? coll))\n    (lazy-seq (cons (f (first coll)) (mine f (rest coll))))))", "problem": 118, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn mymap [f xs]\n\t  (cond (empty? xs) ()\n\t\t:else (cons (f (first xs)) (lazy-seq (mymap f (rest xs))))))", "problem": 118, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn mp [f coll]\n  (lazy-seq\n  \t(if (empty? coll)\n    \tcoll\n    \t(cons (f (first coll)) (mp f (rest coll))))))", "problem": 118, "user": "5131d817e4b06942423563ca"}, {"code": "(fn g [f s] (if (empty? s) () (cons (f (first s)) (lazy-seq (g f (rest s))))))", "problem": 118, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "(fn MAP [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq\n     (cons (f (first s))\n           (MAP f (rest s))))))", "problem": 118, "user": "51f9527fe4b09be9c177e549"}, {"code": "(fn foo [f coll]\n  (if (empty? coll)\n    nil\n    (cons (f (first coll))\n          (lazy-seq (foo f (next coll))))))", "problem": 118, "user": "51db1abae4b094966a2cd685"}, {"code": "(fn my-map [f x] (when x\n    (cons (f (first x))\n          (lazy-seq (my-map f (next x))))))", "problem": 118, "user": "52016690e4b0b2e020a18f0f"}, {"code": "(fn m [f coll]\n  (lazy-seq (when-let [s (seq coll)]\n              (cons (f (first coll)) (m f (rest coll))))))", "problem": 118, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "(fn m[f s] \n  (if (empty? s) '() (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "(fn m [f x]\n          (lazy-seq\n           (if (seq x)\n               (cons (f (first x)) (m f (rest x)))\n             '())))", "problem": 118, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn my-map [f coll] \n  (lazy-seq \n   (if (seq coll)\n     (cons (f (first coll)) (my-map f (rest coll)))\n     '())))", "problem": 118, "user": "521d2564e4b01d5d410d8da8"}, {"code": "(fn mm [f xs]\n  (if (seq xs)\n    (let [v (f (first xs))]\n    (cons v (lazy-seq (mm f (rest xs)))))))", "problem": 118, "user": "513fab65e4b00f13ea1bd891"}, {"code": "(fn my-map [f [head & tail]] \n  (if (empty? tail)\n      [(f head)]\n      (cons (f head)\n           (lazy-seq (my-map f tail)))))", "problem": 118, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn faciat-opus [munus [caput & coda]] \n  (lazy-seq (cons (munus caput) (if coda (faciat-opus munus coda)))))", "problem": 118, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "(fn my-map [f s]\n  (lazy-seq\n   (when-let [seq-s (seq s)]\n     (cons (f (first seq-s))\n           (my-map f (rest seq-s))))))", "problem": 118, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn mp ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)] \n        (cons (f (first s)) (mp f (rest s)))))))", "problem": 118, "user": "52196842e4b0890f2f822bfa"}, {"code": "(fn my-map [f coll]\n  (when-let [s (seq coll)]\n    (lazy-cat [(f (first s))] (my-map f (rest coll)))))", "problem": 118, "user": "51ae350fe4b09397d5109790"}, {"code": "(fn my-map [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "4fb710f4e4b081705acca2cd"}, {"code": "(fn re-map [f col]\n  (if (seq col) (lazy-seq\n               (cons (f (first col)) (re-map f (rest col))))\n      nil))", "problem": 118, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn mp [f [arg & args]]\n  (if \n    (empty? args)\n    (list (f arg))\n    (cons\n      (f arg)\n      (lazy-seq (mp f args)))))", "problem": 118, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn foo [op coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (op (first s)) (foo op (rest s))))))", "problem": 118, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn mm [f [h & t :as coll]] (if (empty? coll) [] (cons (f h) (lazy-seq (mm f t)))))", "problem": 118, "user": "5216933be4b000d124d989cf"}, {"code": "(fn f [g coll] (when-let [xs (seq coll)] (lazy-seq (cons (g (first xs)) (f g (rest xs))))))", "problem": 118, "user": "5065faf9e4b0313a384e5645"}, {"code": "(fn re [f x] \n\t(if (empty? x ) '() \n\t\t(lazy-seq (cons (f (first x ) )   (re f (rest x ))))))", "problem": 118, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn my-map [f coll]\n  (if (empty? coll) \n    '()\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "problem": 118, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn m [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn my-map [f [s-head & s-rest]]\n  (lazy-seq (cons (f s-head) \n                  (if s-rest (my-map f s-rest)))))", "problem": 118, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn m [f [x & xs]]\n  (cons (f x) (lazy-seq (if xs (m f xs)))))", "problem": 118, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(fn mp [f coll]\n  (cond (empty? coll) nil\n        :else (cons (f (first coll)) (lazy-seq (mp f (rest coll))))))", "problem": 118, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "(fn fmap [f xs]\n  (cons (f (first xs))\n     (lazy-seq (when-let [s (seq (next xs))]\n       (fmap f s)))))", "problem": 118, "user": "522454f4e4b01819a2de42d3"}, {"code": "(fn xmap [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first coll)) (lazy-seq (xmap f (drop 1 coll)))))))", "problem": 118, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn one-eighteen\n  [f [h & r]]\n  (lazy-seq\n   (cons\n    (f h)\n    (if r (one-eighteen f r)))))", "problem": 118, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn mymap2 [f coll]                                                    \n  (if (empty? coll)                                           \n   '()                                                       \n    (cons (f (first coll)) (lazy-seq (mymap2 f (rest coll))))))", "problem": 118, "user": "50573ed8e4b0012181721987"}, {"code": "(fn my-map [f [h & t]]\n  (when h\n    (cons (f h) (lazy-seq (my-map f t)))))", "problem": 118, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn this [f s]\n  (cons (f (first s)) (if (empty? (rest s))\n                        '()\n                        (lazy-seq (this f (rest s))))))", "problem": 118, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "(fn mymap [f x]\n  (if (empty? x) []\n  (cons (f (first x)) (lazy-seq (mymap f (rest x))))))", "problem": 118, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "(fn self [f col]\n  (if (empty? col)\n    ()\n    (lazy-cat [(f (first col))]\n              (self f (rest col)))))", "problem": 118, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn map-2\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (map-2 f (rest s)))))))", "problem": 118, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn my-map [f [x & xs]]\n  (if x\n    (cons (f x) (lazy-seq (my-map f xs)))\n    []))", "problem": 118, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn map2 [f s]\n  (when (seq s)\n    (lazy-seq (cons (f (first s)) (map2 f (rest s))))))", "problem": 118, "user": "523b10dfe4b02f719975bdb8"}, {"code": "(fn [f c]\n  (letfn [(my-map [func coll]\n                  (if (seq coll)\n                    (cons (func (first coll)) (lazy-seq (my-map func (rest coll))))))]\n    (my-map f c)))", "problem": 118, "user": "51857e64e4b0da5a5be3babe"}, {"code": "(fn m [f xs] \n  (if (empty? xs)\n    '()\n    (cons (f (first xs)) (lazy-seq (m f (rest xs))))))", "problem": 118, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn nam [f [x & v]] (cons (f x) (if v (lazy-seq (nam f v)) nil)))", "problem": 118, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn my-map [f coll]\n  (when (seq coll)\n    (lazy-seq\n     (cons (f (first coll))\n           (my-map f (rest coll))))))", "problem": 118, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn problem-118 [f s]\n (lazy-seq (when-not (empty? s) (cons (f (first s)) (problem-118 f (rest s))))))", "problem": 118, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn my-map [f coll]\n   (if (empty? coll)\n     '()\n     (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))))", "problem": 118, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(fn my-map- [func coll]\n  (if (empty? coll) \n    '()\n    (cons (func (first coll)) (lazy-seq (my-map- func (rest coll))))))", "problem": 118, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn mymap [f x]\n  (lazy-seq\n    (if (not (empty? x))\n\t    (let [\n\t          s (seq x)\n\t          acc []\n\t         ]\n\t      (cons (f (first s)) (mymap f (rest s)))))))", "problem": 118, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn maps [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (maps f (rest s))))))", "problem": 118, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn m [f c] (lazy-seq (if (empty? c) '() (cons (f (first c)) (m f (rest c))))))", "problem": 118, "user": "51cfc616e4b0e42293a22578"}, {"code": "(fn my-map [f xs]\n  (if (seq xs)\n    (cons (f (first xs))\n          (lazy-seq (my-map f (rest xs))))\n    ()))", "problem": 118, "user": "52487654e4b05ef8e38e63dc"}, {"code": "(fn this [f coll]\n (if (seq coll)\n   (lazy-seq (cons (f (first coll)) \n                   (this f (rest coll))))\n   '()))", "problem": 118, "user": "518d1b5be4b070277754617b"}, {"code": "(fn mymap [f coll]\n (when-let [c coll]\n (cons (f (first c)) (lazy-seq (mymap f  (next c))))))", "problem": 118, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn map* [f [x & xs]] \n    (when x\n\t    (cons (f x) (lazy-cat (map* f xs)))))", "problem": 118, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn m [f [h & r]] (if h (cons (f h) (lazy-seq (m f r)))))", "problem": 118, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn mymap\n  [f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons \n       (f (first s)) \n       (mymap f (rest s)))\n      )\n    )\n  )", "problem": 118, "user": "5228f870e4b0186687e23a98"}, {"code": "(fn f [the-fn col1]\n  (let [the-seq (when (next col1)\n                  (lazy-seq (f the-fn (rest col1))))]\n   (cons (the-fn (first col1)) the-seq)))", "problem": 118, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn fun [f coll]\n   (if (nil? (first coll))\n     nil\n     (cons\n      (apply f (list (first coll)))\n      (lazy-seq (fun f (rest coll))))))", "problem": 118, "user": "506c0a02e4b0eda3100c090d"}, {"code": "(fn m [f v]  \n  (cons (f (first v))\n        (lazy-seq   \n          (if (empty? (rest v))  \n            []  \n            (m f (rest v))))))", "problem": 118, "user": "521dceeae4b050d5da042802"}, {"code": "(fn mp [f s] (when-let [s (seq s)] (lazy-seq (cons (f (first s)) (mp f (rest s))))))", "problem": 118, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [func args]\n  ((fn xx [cur args]\n     (if (empty? args)\n       [cur]\n       (cons cur (lazy-seq (xx (func (first args)) (rest args)))))) (func (first args)) (rest args)))", "problem": 118, "user": "523288fee4b035af41902a88"}, {"code": "(fn mp [f s]\n  (lazy-seq \n   (if (empty? s)\n     s\n     (cons (f (first s)) (mp f (rest s))))))", "problem": 118, "user": "4f048f67535dcb61093f6bd3"}, {"code": "(fn m [f coll] (lazy-seq (when-let [s (seq coll)] (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn mymap [f xs]\n  (if (not (seq xs))\n    []\n  (cons (f (first xs)) (lazy-seq (mymap f (rest xs))))\n  )\n  )", "problem": 118, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn m [f [h & t :as l]]\n  (if l (cons (f h) (lazy-seq (m f t)))))", "problem": 118, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn t [f coll] \n    (lazy-seq\n      (when-let [s (seq coll)]\n        (cons (f (first s)) (t f (rest s))))))", "problem": 118, "user": "4e74e119535d7a570dd295bc"}, {"code": "(fn my-map [f coll]\n  (if (empty? coll)\n    ()\n    (cons (f (first coll))\n          (lazy-seq (my-map f (rest coll))))))", "problem": 118, "user": "519db0ede4b037b32803f9b9"}, {"code": "(fn m [f s]\n  (when-let [e (first s)]\n    (lazy-seq\n     (cons (f e) (m f (rest s))))))", "problem": 118, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn _ [f coll]\n  (if (not (seq coll))\n    []\n    (lazy-seq (cons (f (first coll)) (_ f (rest coll))))))", "problem": 118, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn new-map [f s]\n    (if (empty? s) []\n      (cons\n        (f\n          (first s))\n        (lazy-seq\n          (new-map f\n                   (rest s))))))", "problem": 118, "user": "51e28063e4b08e53a149f0f2"}, {"code": "(fn mp [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n\t  (cons (f (first s)) (mp f (rest s))))))", "problem": 118, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "(fn mymap[f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "50b25f2ce4b03ea88043355f"}, {"code": "(fn mp [f s]\n  (if (empty? s)\n    '()\n    (cons (f (first s)) (lazy-seq (mp f (rest s))))\n    )\n  )", "problem": 118, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn mmap [f s]\n  (lazy-seq (cons (f (first s)) (if (next s) (mmap f (rest s))))))", "problem": 118, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "(fn umap\n  [f [v & coll]]\n  (lazy-seq\n   (cons (f v)\n         (if coll (umap f coll)))))", "problem": 118, "user": "52527192e4b0541d1855b8af"}, {"code": "(fn rmap2 [afn aseq ]\n                (lazy-seq\n      (if (seq aseq)\n        (concat [(afn (first aseq))]\n                  (rmap2 afn (rest aseq)) )\n        []\n        )\n                  )\n)", "problem": 118, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn myfn [op s]\n\t(if (empty? s) nil\n     \n     (cons (op (first s)) (lazy-seq (myfn op (rest s))))\n  \t)\n)", "problem": 118, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "(fn lazy-map [f s] (if (next s) (cons (f (first s)) (lazy-seq (lazy-map f (next s)))) (list (f (first s)))))", "problem": 118, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn mm [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (mm f (rest s))))))", "problem": 118, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn m [f coll] (when (seq coll)\n                  (cons (f (first coll)) (lazy-seq (m f (rest coll))))))", "problem": 118, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "(fn m [f [x & xs]]\n  (cons (f x) (lazy-seq (if (empty? xs) () (m f xs)))))", "problem": 118, "user": "525bcae9e4b0cb4875a45d30"}, {"code": "(fn g [f [x & xs]]\n  (lazy-seq (cons \n              (f x) \n              (if xs (g f xs)))))", "problem": 118, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn foober [f args] (if (first args) (cons (f (first args)) (lazy-seq (foober f (rest args))))))", "problem": 118, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(fn remap[f s]\n  (if (empty? s)\n    []\n    (lazy-seq (cons (f (first s)) (remap f (rest s))))))", "problem": 118, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn p[f c]\n\t\t(if (empty? c) '()\n\t\t  (cons (f (first c)) (lazy-seq (p f (rest c))))))", "problem": 118, "user": "51f2851fe4b0210f90e7454b"}, {"code": "(fn nap [f l]\n  (cond\n   (empty? l) []\n   :else (lazy-cat [(f (first l))] (nap f (rest l)))\n   )\n  )", "problem": 118, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "(fn mmap [f lst] \n   (if (seq lst) \n     (cons (f (first lst)) \n           (lazy-seq (mmap f (rest lst))))\n     nil))", "problem": 118, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn fn118 [fnc [fst & rst]]\n\t (if fst \n\t\t  (cons \n\t\t\t  (fnc fst)\n\t\t\t  (lazy-seq (fn118 fnc rst))\n\t\t\t)\n\t )\n)", "problem": 118, "user": "5029f263e4b023940c84aa45"}, {"code": "(fn map' [f s]\n  (when (seq s)\n    (lazy-seq\n      (cons (f (first s))\n            (map' f (rest s))))))", "problem": 118, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn mp ([f coll]\n   (lazy-seq\n     (when-let [s (seq coll)]\n       (cons (f (first s)) (mp f (rest s)))))))", "problem": 118, "user": "4db6ce85535d1e037afb217f"}, {"code": "(fn x [f l]\n  (lazy-seq (if (empty? l) l (cons (f (first l)) (x f (rest l)))))\n  )", "problem": 118, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn mymap\n  [f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": "(fn re-map [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (re-map f (rest s))))))", "problem": 118, "user": "4fad33e8e4b081705acca236"}, {"code": "(fn my-map [f l]\n  (if (empty? l)\n    nil\n    (cons (f (first l)) (lazy-seq (my-map f (rest l))))))", "problem": 118, "user": "517531c6e4b07031762f2eea"}, {"code": "(fn my-map [f coll]\n  (if (empty? coll)\n    '()\n    (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))))", "problem": 118, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn r [f xs]\n  (lazy-seq\n    (if (empty? xs)\n    '()\n    (cons (f (first xs)) (r f (rest xs))))))", "problem": 118, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn mymap [f l] (if (empty? l) l (lazy-seq (cons (f (first l)) (mymap f (rest l))))))", "problem": 118, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [f col] (rest (reductions #(f %2) nil col)))", "problem": 118, "user": "525431dfe4b0541d1855b970"}, {"code": "(fn [g x]\n  (letfn [(mm [f s]\n            (if (empty? s)\n              nil\n              (cons (f (first s)) (lazy-seq (mm f (rest s))))))]\n    (mm g x)))", "problem": 118, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn my-map [f xs]\n  (if (empty? xs)\n    '()\n    (cons (f (first xs)) (lazy-seq ( my-map f (next xs))))))", "problem": 118, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn p118 [f ls]\n  (if (empty? ls) nil\n    (lazy-seq (cons (f (first ls)) (p118 f (next ls))))))", "problem": 118, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn m [op c]\n  (if (empty? c)\n    []\n    (cons (op (first c)) (lazy-seq (m op (rest c))))))", "problem": 118, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn m [f xs]\n  (lazy-seq\n    (if (empty? xs) []\n      (cons (f (first xs)) (m f (rest xs))))))", "problem": 118, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn my-map [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (my-map f (rest s)))))\n)", "problem": 118, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn g [f c] \n  (if (nil? c) \n\t  []\n\t  (cons (f (first c)) (lazy-seq (g f (next c))))\n  )\n)", "problem": 118, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn map2 [f s]\n  (if (empty? s)\n    nil\n    (cons (f (first s))\n          (lazy-seq (map2 f (rest s))))))", "problem": 118, "user": "523c6451e4b07becd5be2222"}, {"code": "(fn my-map [fxn xs]\n (if (empty? xs) nil\n     (lazy-seq (cons (fxn (first xs)) (my-map fxn (rest xs))))))", "problem": 118, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn rmap [f s]\n  (if (empty? s)\n    '()\n    (cons (f (first s))\n          (lazy-seq (rmap f (rest s))))))", "problem": 118, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn it [f c] (if (empty? c) '() (lazy-seq (cons (f (first c)) (it f (rest c))))))", "problem": 118, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "(fn a [f s] (cons (f (first s)) (if-not(nil? (next s))(lazy-seq (a f (next s)))(identity []))))", "problem": 118, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn mm [f s] \n   (when-let [c (seq s)] (cons (f (first c)) (lazy-seq (mm f (rest c)))))\n )", "problem": 118, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn m [f c]                              \n  (if (seq c)                            \n    (cons (f (first c))                  \n          (lazy-seq (m f (rest c))) ) ) )", "problem": 118, "user": "4df20dda535d08e6dec9fe23"}, {"code": "(fn ! [f coll]\n  (lazy-seq\n    (if coll\n      (cons (f (first coll)) (! f (next coll))))))", "problem": 118, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "(fn my-map [lambda seqs]\n  (if (empty? seqs)\n    seqs\n  \t(lazy-cat \n     (conj (empty seqs) (lambda (first seqs)))\n     (my-map lambda (rest seqs)))))", "problem": 118, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn my-map [pred coll]\n  (let [step (fn [p c]\n                 (when-let [s (seq c)] ; when (seq c) is true, let s = (seq c), else return nil\n                   (cons (pred (first s)) \n                         (my-map p (rest s)))))]\n    (lazy-seq (step pred coll))))", "problem": 118, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn my-map [f s]  (lazy-seq (when (not (empty? s)) \n                              (cons (f (first s))\n                                    (my-map f (rest s))))))", "problem": 118, "user": "519ef784e4b087743fad2198"}, {"code": "(fn z [f c]\n   (when (first c)\n     (cons (f (nth c 0)) (lazy-seq (z f (rest c))))))", "problem": 118, "user": "527ba29de4b03e8d9a4a7594"}, {"code": "(fn m [f s]\n  (if (seq s)\n    (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "522a01ade4b0590a43906ced"}, {"code": "(fn mp [f c]\n  (cons (f (first c)) (if (nil? (next c))\n                        '()\n                        (lazy-seq (mp f (next c))))))", "problem": 118, "user": "5078d366e4b08327cd804a5b"}, {"code": "(fn mymap [f [x & xs]]\n  (lazy-seq\n    (if (nil? x)\n      nil\n      (cons (f x)\n            (mymap f xs)))))", "problem": 118, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn m [f [x & rs]]\n  (if (nil? rs) [(f x)]\n  \t(lazy-seq (cons (f x) (m f rs)))))", "problem": 118, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn m [f l]\n  (lazy-seq\n   (when (not (empty? l))\n     (cons (f (first l)) (m f (rest l))))))", "problem": 118, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn mymap [f c] \n  (if c \n    (cons (f (first c)) (lazy-seq (mymap f (next c))))))", "problem": 118, "user": "51e38568e4b0c611d6113e43"}, {"code": "(fn mapp [f xs] (if (empty? xs) '() (lazy-seq (cons (f (first xs)) (mapp f (next xs))))))", "problem": 118, "user": "5290257ae4b0239c8a67af03"}, {"code": "(fn my-map [func [h & t]]\n  (if-not t\n    (list (func h))\n    (lazy-seq (cons (func h) (my-map func t)))))", "problem": 118, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn seq1 [f s]\n  (lazy-seq\n    (when-let [[x] (seq s)]\n       (cons (f x) (seq1 f (rest s))))))", "problem": 118, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "(fn myf [f [x & xs]] \n  (if (= xs nil) [(f x)]\n    (cons (f x) (lazy-seq (myf f xs)))\n          ))", "problem": 118, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "(fn lazy-map [f c]\n   (if-not (seq c) nil (lazy-seq (cons (f (first c)) (lazy-map f (next c))))))", "problem": 118, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn my-map [function input]\n  (let [current (function (first input))]\n    (if (next input)\n      (lazy-seq\n       (concat [current] (my-map function (rest input))))\n      [current])))", "problem": 118, "user": "528bba38e4b0239c8a67aea9"}, {"code": "(fn re-map [f colls]\n     (if colls\n       (lazy-seq \n         (cons (f (first colls))\n               (re-map f (next colls))))))", "problem": 118, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn p118 [f [s1 & s]] (if (nil? s1) () (lazy-seq (cons (f s1) (p118 f s)))))", "problem": 118, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn mymap [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn m\n  [f [h & t]]\n  (when h\n    (lazy-seq\n     (cons (f h)\n           (m f t)))))", "problem": 118, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn m [f col] (if (seq col) (cons (f (first col)) (lazy-seq (m f (rest col)))) []))", "problem": 118, "user": "528a791ae4b0239c8a67ae77"}, {"code": "(fn [f xs]\n  (letfn [(my-map [xs]\n            (if (empty? xs)\n                nil\n                (cons (f (first xs))\n                      (lazy-seq (my-map (next xs))))))]\n    (my-map xs)))", "problem": 118, "user": "515ead6be4b049add99a053e"}, {"code": "(fn f [x y] ( if (not-empty y)  (cons (x (first y)) (lazy-seq (f x (rest y))))))", "problem": 118, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "(fn mp [f coll] (when (first coll) (cons (f (first coll)) (lazy-seq (mp f (rest coll))))))", "problem": 118, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "(fn mapp [f sq]\n  (if (empty? sq) nil\n \t  (lazy-seq (cons (f (first sq)) (mapp f (rest sq))))))", "problem": 118, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn solution-118 [f coll]\n  (lazy-seq (when-let [s (seq coll)]\n              (cons (f (first s)) (solution-118 f (rest s)))\n              ))\n  )", "problem": 118, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "(fn remap [f col] (if (empty? col) [] (lazy-seq (cons (f (first col)) (remap f (rest col))))))", "problem": 118, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn m [f [h & t]]\n  (lazy-cat\n   [(f h)]\n   (if t\n     (m f t))))", "problem": 118, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn m [f [h & r]] (lazy-seq (cons (f h) (if r (m f r)))))", "problem": 118, "user": "506cad7de4b0a302964c548e"}, {"code": "(fn map* [f c]\n  (when (seq c)\n    (lazy-seq \n      (cons (f (first c)) (map* f (rest c))))))", "problem": 118, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "(fn newmap [f c]\n  (if (empty? c)\n    '()\n    (cons (f (first c)) (lazy-seq (newmap f (rest c))))))", "problem": 118, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn mmap [fnc coll] \n  (let [f (fn [fnct c] \n            (when-let [s (seq c)] \n              (cons (fnct (first s)) (mmap fnct (rest s)))))] \n    (lazy-seq (f fnc coll))))", "problem": 118, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn map2 [f s] \n  (lazy-seq \n   (when (seq s) \n     (cons (f (first s)) (map2 f (rest s))))))", "problem": 118, "user": "51929214e4b08962174cf74c"}, {"code": "(fn map* [f col]\n    (if-not (empty? (rest col))\n      (lazy-seq (cons (f (first col)) (map* f (rest col))))\n      [(f (first col))])\n    \n    )", "problem": 118, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn f [g [a & b]] (if a (cons (g a) (lazy-seq (f g b)))))", "problem": 118, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn my-map\n\t[f coll]\n\t(when-let [coll (seq coll)]\n\t  (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))))", "problem": 118, "user": "51937eb3e4b04df54c098022"}, {"code": "(fn map' [f [h & r]]\n  (lazy-seq\n   (cons (f h) (if r (map' f r)))))", "problem": 118, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "(fn mm [f coll]\n         (if (empty? coll)\n           []\n           (cons (f (first coll)) (lazy-seq (mm f (rest coll))))))", "problem": 118, "user": "51f40975e4b0fca5e8b4822e"}, {"code": "(fn map* [f s]\n  (when (seq s)\n    (lazy-cat [(f (first s))] (map* f (rest s)))))", "problem": 118, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "(fn m [f x] \n   (when (seq x) \n     (lazy-seq (cons \n              (f (first x)) \n              (m f (rest x))))))", "problem": 118, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "(fn my-map [f s]\n  (if (not (seq s))\n    nil\n  \t(lazy-seq\n     (cons (f (first s))\n           (my-map f (rest s))))))", "problem": 118, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "(fn mymap [f l]\n  (cond\n   (empty? l) l\n   :else (cons (f (first l)) (lazy-seq (mymap f (rest l))))\n   ))", "problem": 118, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "(fn my-map [f coll]\n              (if-not (= '() coll)\n                (lazy-seq (cons (f (first coll))\n                                (my-map f (rest coll))))\n                '()))", "problem": 118, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn new-map [f [fst & rst]]\n  (if (not (nil? fst))\n    (lazy-cat [(f fst)] (new-map f rst))))", "problem": 118, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn m [f xs]\n      (if (empty? xs)\n        ()\n        (lazy-seq (cons (f (first xs)) (m f (rest xs))))))", "problem": 118, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn map1\n  [f [head & rest]]\n  (lazy-seq\n   (cons (f head)\n         (if rest\n           (map1 f rest)))))", "problem": 118, "user": "4ef7a483535dced4c769f258"}, {"code": "(fn n118 [f coll]\n  (lazy-seq (if (empty? coll) coll (cons (f (first coll)) (n118 f (rest coll))))))", "problem": 118, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn map_ [f coll]\n  (when-let [s (seq coll)]\n    (lazy-seq (cons (f (first coll)) (map_ f (rest coll))))))", "problem": 118, "user": "527fd663e4b0757a1b1713de"}, {"code": "(fn m [f s]\n  (when-first [s1 s]\n  \t(cons (f s1) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn mymap\n  [f s]\n  (if (first s)\n    (cons (f (first s))\n        (lazy-seq (mymap f (rest s))))\n    ()))", "problem": 118, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn map4j [f xs]\n  (when xs\n    (lazy-seq \n     (cons (f (first xs)) \n           (map4j f (next xs))))))", "problem": 118, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn f [func coll]\n  (when-not (empty? coll)\n    (lazy-seq (cons (func (first coll)) (f func (rest coll))))))", "problem": 118, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "(fn mymap [f s]\n  (lazy-seq\n   (when-let [s (seq s)]\n     (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn mymap [f s]\n  (if (empty? s)\n    []\n    (cons (f (first s)) (lazy-seq (mymap f (rest s)))))\n  )", "problem": 118, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn my-map[f x](if (first x)\n                   (lazy-seq (cons (f (first x)) (my-map f (rest x)))) \n                        (seq nil)\n ))", "problem": 118, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "(fn mm [f coll] \n  (if-not (empty? coll) \n    (lazy-seq (cons (f (first coll)) (mm f (rest coll))))))", "problem": 118, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "(fn remap [fun sq]\n  (if (empty? sq)\n    nil\n    (cons (fun (first sq)) (lazy-seq (remap fun (rest sq))))))", "problem": 118, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn my-map [f coll]\n  (if (empty? coll) nil\n    (lazy-seq (cons (f (first coll))\n                    (my-map f (rest coll))))))", "problem": 118, "user": "52bc6f5ee4b07a9af57922f6"}, {"code": "(fn m [f [x & xs]]\n  (cons \n   (f x)\n   (if (seq xs)\n     (lazy-seq (m f xs))\n   )))", "problem": 118, "user": "52470d42e4b05ef8e38e6350"}, {"code": "(fn my-map [f a-seq]\n   \t(if (first a-seq)\n        (lazy-seq\n             (cons (f(first a-seq))\n                    (my-map f (rest a-seq))))\n        (list)  \n    )\n)", "problem": 118, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn re-map [f s]\n  (lazy-seq\n   (if (empty? s)\n     nil\n     (cons (f (first s)) (re-map f (rest s)))\n     )\n  ))", "problem": 118, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "(fn my-map [f coll]\n  (if (empty? coll)\n    '()\n    (lazy-seq (cons \n               (f (first coll)) \n               (my-map f (drop 1 coll))))))", "problem": 118, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn m [f col] (if (seq col) \n                 (lazy-seq \n                  (cons \n                   (f (first col)) \n                   (m f (rest col))))))", "problem": 118, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "(fn g [f s]\n    (if (empty? s) \n      ()\n      (cons (f (first s)) (lazy-seq (g f (rest s))))))", "problem": 118, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "(fn my-map  [f col]\n  (if \n    (empty? col)\n    []\n    (cons (f (first col)) (lazy-seq (my-map f (rest col))))))", "problem": 118, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn mymap [f xs]\n  (if (empty? xs)\n    ()\n    (cons (f (first xs))\n          (lazy-seq (mymap f (rest xs))))))", "problem": 118, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn m [f s]\n    (cons (f (first s)) (lazy-seq (if (empty? (rest s)) nil  (m f (rest s)))))\n   )", "problem": 118, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "(fn [f arr] (rest (reductions #(f %2) [] arr)))", "problem": 118, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "(fn my-map [f coll]\n  (when-let [s (seq coll)] (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "50645e12e4b007509339a58a"}, {"code": "(fn m [f xs]\n  (if (empty? xs)\n    (list)\n    (cons (f (first xs)) (lazy-seq (m f (rest xs))))))", "problem": 118, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn mymap [f s]\n  (if (empty? s) ()\n  (lazy-seq (cons (f (first s))\n                  (mymap f (rest s))))))", "problem": 118, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn [f x] (rest (reductions #(f %2) nil x)))", "problem": 118, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "(fn re-implement-map [f c]\n  (let [sq (seq c)]\n    (if (chunked-seq? sq)\n\n      (lazy-seq (cons (f (first sq)) (re-implement-map f (rest sq))))\n\n      (reduce \n   \n       (fn [a x]\n         (conj a (f x)))\n       \n       (empty c)\n       c))))", "problem": 118, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn mm [f xs]\n  (if (seq xs)\n    (cons (f (first xs))\n          (lazy-seq (mm f (rest xs))))))", "problem": 118, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn mmap [f coll]\n  (lazy-seq \n    (when-not (empty? coll)\n      (cons (f (first coll)) (mmap f (rest coll))))))", "problem": 118, "user": "52c804dee4b0c2d177d6212b"}, {"code": "(fn r [f s] (if-not (empty? s) (cons (f (first s)) (lazy-seq (r f (rest s))))))", "problem": 118, "user": "52be58d7e4b07a9af579231d"}, {"code": "(fn _ [f s]\n  (lazy-seq \n    (when-let [s (seq s)]\n      (cons (f (first s)) (_ f (rest s))))))", "problem": 118, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn mp [f s] (lazy-seq (when (not (empty? s)) (cons (f (first s)) (mp f (rest s))))))", "problem": 118, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn f [g a] (if (empty? a) ()(cons (g (first a)) (lazy-seq (f g (rest a))))))", "problem": 118, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn my-map [f xs]\n  (if (empty? xs)\n    ()\n    (lazy-seq (cons (f (first xs)) (my-map f (rest xs))))))", "problem": 118, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn [f coll]\n  (reductions #(f %2) (f (first coll)) (rest coll)))", "problem": 118, "user": "52cca65be4b07d0d72b2736b"}, {"code": "(fn my-map [f s]\n  (when (seq s)\n    (cons (f (first s)) (lazy-seq (my-map f (rest s))))\n    )\n  )", "problem": 118, "user": "529a73bde4b02ebb4ef75096"}, {"code": "(fn foo [f coll]\n  (when (seq coll)\n  \t(lazy-seq (cons (f (first coll)) (foo f (rest coll))))))", "problem": 118, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "(fn self [f s] (if (empty? s) nil (cons (f (first s)) (lazy-seq (self f (rest s))))))", "problem": 118, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "(fn m2 [f s]\n  (if (empty? s)\n    nil\n    (cons (f (first s)) (lazy-seq (m2 f (rest s))))))", "problem": 118, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "(fn ! [f [c & more]]\n  (if (empty? more)\n    (list (f c))\n    (lazy-seq (cons (f c) (! f more)))\n    )\n )", "problem": 118, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn rec [f coll]\n  (if (empty? coll)\n    coll\n    (cons (f (first coll)) (lazy-seq (rec f (rest coll))))))", "problem": 118, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "(fn m [f c]\n      (if (seq c) (cons (f (first c)) (lazy-seq (m f (rest c))))))", "problem": 118, "user": "528d1094e4b0239c8a67aebe"}, {"code": "(fn m [f coll]\n  (rest (reductions #(f %2) nil coll)))", "problem": 118, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn mm[f d]\n  (if (empty? d) nil (lazy-seq (cons (f (first d)) (mm f (rest d))))))", "problem": 118, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "(fn meu-map [f s]\n  (when-not (empty? s)\n    (lazy-seq (cons (f (first s)) (meu-map f (next s))))))", "problem": 118, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn po[f x] (lazy-seq(if (empty? x) '() (cons (f (first x)) (po f (rest x))))))", "problem": 118, "user": "529952a4e4b02ebb4ef75081"}, {"code": "(fn mp [x y](when-let [q (seq y)](lazy-seq(cons(x (first q) )(mp x (rest q))))))", "problem": 118, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn my-map [f coll]\n  (if (seq coll) (lazy-seq\n               (cons (f (first coll)) (my-map f (rest coll))))\n      nil))", "problem": 118, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "(fn new-map [f coll]\n  (if (empty? coll) '()\n    (cons (f (first coll)) (lazy-seq (new-map f (rest coll))))))", "problem": 118, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn gmap [f coll]\n  (lazy-seq\n    (if-let [s (seq coll)]\n      (cons (f (first s))\n            (gmap f (rest s))))))", "problem": 118, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn m[f s]\n  (if (empty? s) '()\n    (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "51b41150e4b0f094dd986fac"}, {"code": "#((fn iter [l]\n   (if (empty? l) ()\n       (cons (%1 (first l)) (lazy-seq (iter (rest l)))))) %2)", "problem": 118, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn my-map [f s]\n  (if (empty? s)\n    nil\n    (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "problem": 118, "user": "52d340ebe4b099d49816f0c1"}, {"code": "(fn m [f s] (when (seq s) (lazy-seq (concat [(f (first s))]\n                                            (m f (rest s))))))", "problem": 118, "user": "52d3f666e4b09f7907dd1327"}, {"code": "(fn m [f [x & yz :as s]]\n  (if s (lazy-seq (cons (f x) (m f yz)))))", "problem": 118, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "(fn map-fn [f [x & xs]]\n  (if (nil? x)\n    (seq [])\n    (cons (f x) (lazy-seq (map-fn f xs)))\n  )\n)", "problem": 118, "user": "505345d9e4b0517ede0d0a06"}, {"code": "(fn r118 [f [x & xs :as s]]\n  (if (empty? s)\n    nil\n    (cons (f x) (lazy-seq (r118 f xs)))))", "problem": 118, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn m [f x]\n  (lazy-seq\n   (when-let [[x & xs] (seq x)]\n    (cons (f x) (m f xs)))))", "problem": 118, "user": "4ee75ec2535d93acb0a66867"}, {"code": "(fn my-map [f l]\n  (if-not (empty? l)\n    (lazy-cat [(f (first l))] (my-map f (rest l)))\n    []))", "problem": 118, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn __ [f s]\n    (if s\n      (lazy-seq (cons (f (first s)) (__ f (next s))))))", "problem": 118, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "(fn m [f l]\n  (if (empty? l)\n    []\n    (cons (f (first l)) (lazy-seq (m f (rest l))))))", "problem": 118, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "(fn my-map [f s]\n  (if (empty? s)\n    '()\n  (cons (f (first s)) (lazy-seq (my-map f (rest s)))))\n  )", "problem": 118, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": "(fn m [f col]\n  (lazy-seq (if-let [s (seq col)]\n    (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(letfn [\n        (myfun [f col] \n               (if (empty? col) \n                 (empty col) \n                 (cons (f (first col)) (lazy-seq (myfun f (rest col))))))] \n  myfun)", "problem": 118, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn f [op xs]\n   (lazy-seq\n    (when-let [s (seq xs)]\n      (cons (op (first s)) (f op (rest s))))))", "problem": 118, "user": "4ee8092f535d93acb0a66875"}, {"code": "(fn map- [f v] (lazy-seq (when-let [s (seq v)] (cons (f (first s)) (map- f (rest s))))))", "problem": 118, "user": "52df232fe4b09f7907dd13fc"}, {"code": "(fn m [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "(fn mp [f c]\n  (if (first c)\n    (cons (f (first c)) (lazy-seq (mp f (rest c))))\n  )\n)", "problem": 118, "user": "52c1f404e4b07a9af5792370"}, {"code": "(fn my-map [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn m [f coll] (if (empty? coll) [] (cons (f (first coll)) (lazy-seq (m f (rest coll))))))", "problem": 118, "user": "52c00263e4b07a9af579233f"}, {"code": "(fn my-map2\n  [f [x & xs :as ls]]\n  (if (nil? ls)\n    []\n    (cons (f x) (lazy-seq (my-map2 f xs)))))", "problem": 118, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "(fn mymap ([f xs] (if (empty? xs) [] (cons (f (first xs)) (lazy-seq (mymap f (rest xs)))))))", "problem": 118, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn mi [f s]\n  (lazy-seq\n    (if (empty? s)\n      ()\n      (cons (f (first s))\n            (mi f (rest s))))))", "problem": 118, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn r [a b]\n   (if (empty? b) \n     '()\n     (cons (a (first b)) (lazy-seq (r a(rest b))))))", "problem": 118, "user": "525cc137e4b0cb4875a45d46"}, {"code": "(fn mymap [pred coll]\n  (if (seq coll)\n    (lazy-seq (cons (pred (first coll)) (mymap pred (rest coll))))\n    )\n  )", "problem": 118, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn mymap [f x] (if (not-empty x) (lazy-seq (cons (f (first x)) (mymap f (rest x))))))", "problem": 118, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "(fn my-map\n  [f s]\n  (lazy-seq (when (seq s) (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn *m [f coll]\n  (if (empty? coll)\n    coll\n    (cons (f (first coll))\n          (lazy-seq (*m f (rest coll))))))", "problem": 118, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "(fn m [op xs] (when (seq xs) (lazy-seq (cons (op (first xs)) (m op (next xs))))))", "problem": 118, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn fun [f coll]\n  (if (empty? coll)\n    []\n    (lazy-seq\n     (cons (f (first coll)) (fun f (rest coll))))))", "problem": 118, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn mymap [op args]\n  (if (empty? args) \n      nil\n      (lazy-seq (cons (op (first args)) (mymap op (rest args))))))", "problem": 118, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "(fn m [f [x & xs :as c]]\n  (if (empty? c)\n    c\n    (cons (f x) (lazy-seq (m f xs)))))", "problem": 118, "user": "5224cf82e4b01819a2de42ef"}, {"code": "(fn mymap [f coll]\n    (if (false? (empty? coll))\n      (lazy-seq\n       (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn my-re-implement-map\n  [fun coll]\n  (when (not (empty? coll))\n    (lazy-seq\n      (cons (fun (first coll)) (my-re-implement-map fun (rest coll))))))", "problem": 118, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "(fn laz [f s] (when (seq s)\n                (cons (f (first s)) \n                    (lazy-seq (laz f (rest s))))))", "problem": 118, "user": "50f53694e4b057d4c52de881"}, {"code": "(fn m [f col] (when-let [ s (seq col)] (lazy-seq (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(fn pam[f args] \n  (if (empty? args) \n    [] \n    (lazy-seq (cons (f (first args)) (pam f (rest args)) ))))", "problem": 118, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn my-map\n    [f s]\n    (cons (f (first s))\n      (if-let [ss (seq (rest s))]\n        (lazy-seq (my-map f ss))\n         nil)))", "problem": 118, "user": "525d490ae4b0cb4875a45d70"}, {"code": "(fn [f coll]\n  (letfn [(map1 [f coll] (lazy-seq (when (seq coll) (cons (f (first coll)) (map1 f (rest coll))))))]\n    (map1 f coll)))", "problem": 118, "user": "52fcfeeee4b047fd55837027"}, {"code": "(fn my-map [f c]\n  (if (empty? c)\n       []\n       (cons (f (first c)) (lazy-seq (my-map f (rest c))))))", "problem": 118, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn m [f s] (if (empty? s) [] (lazy-cat [(f (first s))] (m f (rest s)))))", "problem": 118, "user": "5300f68de4b0d8b024fd3714"}, {"code": "(fn my-map\n  ([f in] (if (empty? in)\n            []\n            (lazy-cat [(f (first in))] (my-map f (rest in))))))", "problem": 118, "user": "5300b750e4b0d8b024fd3711"}, {"code": "(fn my-map [f xs]\n  (lazy-seq\n   (if (empty? xs)\n     []\n     (cons (f (first xs)) (my-map f (rest xs))))))", "problem": 118, "user": "52d660eae4b09f7907dd1356"}, {"code": "(fn m [f c]\n  (if (not (empty? c))\n    (cons (f (first c)) \n          (lazy-seq (m f (rest c)))\n    )\n  )\n)", "problem": 118, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn my-map [f coll]\n   (when-not (empty? coll)\n      (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "problem": 118, "user": "4fb99483e4b081705acca2da"}, {"code": "(fn m [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll))\n                    (m f (rest coll))))))", "problem": 118, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn lseq [f s] \n    (if (empty? s) '()\n      (lazy-cat (list (f (first s))) (lseq f (rest s)) )\n      ) \n  )", "problem": 118, "user": "528f4462e4b0239c8a67aef0"}, {"code": "(fn f [x y]\n  (when-let [a y]\n    (lazy-cat (list (x (first a))) (f x (next a)))))", "problem": 118, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn a [f s] (lazy-seq\n    (when-let [s (seq s)]\n      (cons (f (first s)) (a f (rest s))))))", "problem": 118, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn f[m ls] (if (empty? ls) nil\n                        (cons (m (first ls)) (lazy-seq (f m (rest ls))))))", "problem": 118, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn[fnc sq] \n    (\n      (fn _mp_[s] \n        (if(empty? s) \n          nil \n          (lazy-seq \n            (cons \n              (fnc (first s)) \n              (_mp_ (rest s))\n              )\n            )\n          )\n        ) \n      sq\n      )\n    )", "problem": 118, "user": "52e68e61e4b09f7907dd1479"}, {"code": "(fn m [f s] (if (first s)(cons (f (first s)) (lazy-seq (m f (next s))))))", "problem": 118, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "(fn maps [f s]\n          (if (empty? s) nil\n              (cons (f (first s)) (lazy-seq (maps f (rest s))))))", "problem": 118, "user": "52c7f036e4b0c2d177d62126"}, {"code": "(fn m [f  col] (lazy-seq  (if (not-empty col)(cons (f (first col)) (m  f (rest col))))))", "problem": 118, "user": "5307e4ece4b02e82168697a9"}, {"code": "(fn m[f v]\n  (if (empty? v) v\n      (lazy-seq (cons (f (nth v 0))\n                      (m f (rest v))))))", "problem": 118, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn t [f s]\n  (lazy-seq (cons (f (first s)) (when (not (= nil (first (rest s)))) (t f (rest s))))))", "problem": 118, "user": "530d85dee4b08068f379eca8"}, {"code": "(fn my-map [f s] (if (empty? s) [] (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "problem": 118, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn my-map [f [head & tail]]\n  (when head\n    (cons (f head)\n          (lazy-seq (my-map f tail)))))", "problem": 118, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn map2 [f x]\n  (if \n    (empty? x) nil\n    (cons (f (first x)) (lazy-seq (map2 f (rest x)))))\n  )", "problem": 118, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn my-map [func s]\n  (if-not (empty? s)\n    (cons\n      (func (first s))\n      (lazy-seq (my-map func (rest s))))))", "problem": 118, "user": "53070615e4b02e821686979e"}, {"code": "(fn m [f c]\n  (lazy-seq\n   (if (empty? c)\n     '()\n     (cons (f (first c)) (m f (rest c))))))", "problem": 118, "user": "51aefceee4b09397d5109797"}, {"code": "(fn my-map [f [n & r]]\n  (lazy-seq (cons (f n) (if r (my-map f r)))))", "problem": 118, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn map-t [f lst]\n  \t(lazy-seq\n   \t\t(when-let [s (seq lst)]\n     \t\t(cons (f (first s)) (map-t f (rest s))))))", "problem": 118, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "(fn m[f [x & y]]\n  (if x\n    (cons (f x) \n          (lazy-seq (m f y)))))", "problem": 118, "user": "53034738e4b0d8b024fd373e"}, {"code": "(fn mymap [f s]\n  (if (nil? s)\n    nil\n    (cons (f (first s)) (lazy-seq (mymap f (next s))))\n  )\n)", "problem": 118, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn alt-map [f xs]\n  (lazy-seq\n   (cons (f (first xs)) (if (empty? (rest xs)) (rest xs) (alt-map f (rest xs))))))", "problem": 118, "user": "50b9d991e4b04934c218a4a9"}, {"code": "(fn _map [f x]\n    (lazy-seq\n   \t\t(when-let [coll (seq x)]\n     \t\t(cons (f (first coll)) (_map f (rest x))))))", "problem": 118, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn kmap\n        [f coll]\n        (lazy-seq\n         (when-let [s (seq coll)]\n           (cons (f (first s)) (kmap f (rest s))))))", "problem": 118, "user": "4db58ccb535d87e67b28fe10"}, {"code": "(fn mymap  [func coll]\n\n    (if (empty? coll)\n      coll\n\n      (lazy-seq (cons (func (first coll)) (mymap func (rest coll))))\n      \n\n      )\n\n\n    )", "problem": 118, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn _map [f coll]\n  (lazy-seq\n   (when (seq coll)\n     (cons (f (first coll)) (_map f (rest coll))))))", "problem": 118, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn my-map [f xs] (lazy-seq (if (empty? xs) [] (cons (f (first xs)) (my-map f (rest xs))))))", "problem": 118, "user": "5315a4f0e4b08068f379ed2e"}, {"code": "(fn my-map [f s]\n  (if (empty? s)\n    (empty s)\n  (cons (f (first s))\n        (lazy-seq (my-map f \n                          (rest s))))))", "problem": 118, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "(fn cm [f x]\n  (when (seq x)\n  \t(cons (f (first x)) (lazy-seq (cm f (rest x))))))", "problem": 118, "user": "531c7f0de4b08068f379eda4"}, {"code": "(fn my-map [f seq1]\n   (if (not-empty seq1)\n     (lazy-seq (cons (f (first seq1)) (my-map f (rest seq1))))))", "problem": 118, "user": "4f80db02e4b033992c121bf9"}, {"code": "(fn map' [f xs]\n  (if (= xs '())\n    '()\n    (lazy-seq (cons (f (first xs)) (map' f (rest xs))))\n  ))", "problem": 118, "user": "531c0619e4b08068f379ed98"}, {"code": "(fn hey [x y] (if (empty? y) nil (lazy-seq (cons (x (first y)) (hey x (rest y))))))", "problem": 118, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn m [f s]\n   (if (empty? s)\n     nil\n     (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "(fn m [f [x & r]]\n  (if x\n    (cons (f x) (lazy-seq (m f r)))\n    ()))", "problem": 118, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn my-map [f s]\n  (when (seq s)\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn _map [f xs]\n  (if (empty? xs) ()\n  \t(lazy-seq (cons (f (first xs)) (_map f (rest xs))))\n  )\n)", "problem": 118, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(fn mmap [f coll]\n   (if (empty? coll) '()\n     (cons (f (first coll)) (lazy-seq (mmap f (rest coll))))))", "problem": 118, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn m[f,s]\n  (if (seq s) (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [f l] (letfn [(helper [[head & tail]] (lazy-seq (if (nil? head) nil (cons (f head) (helper tail)))))] (helper l)))", "problem": 118, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn my-map [f xs]\n  (if (seq xs)\n           (lazy-seq (cons \n                      (f (first xs)) \n                      (my-map f (rest xs))\n                      ))))", "problem": 118, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "(fn [ff cc]\n   (letfn [(map2 [f coll]\n     (lazy-seq\n      (when-let [s (seq coll)]\n        (cons (f (first s)) (map2 f (rest s))))))]\n    \t(map2 ff cc)))", "problem": 118, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "(fn not-map [f coll]\n  (when-let [c (not-empty (seq coll))]\n    (lazy-seq (cons (f (first c)) (not-map f (rest c))))))", "problem": 118, "user": "531dfaf5e4b08068f379edb3"}, {"code": "(fn map2 [f coll]\n  (lazy-seq\n    (when-first [x coll]\n      (cons (f x) (map2 f (rest coll))))))", "problem": 118, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn alt-map [f col]\n  (when (seq col)\n    (lazy-seq (cons (f (first col)) (alt-map f (rest col))))))", "problem": 118, "user": "531488f3e4b08068f379ed16"}, {"code": "(fn my-map [f s] \n  (if (empty? s) [] \n    (cons (f (first s)) \n        (lazy-seq (my-map f (rest s)))\n    )\n  )\n)", "problem": 118, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn g [f l]\n  (if (empty? l)\n    '()\n    (cons (f (first l)) (lazy-seq (g f (rest l))))))", "problem": 118, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "(fn mp [f ls]\n  (if (empty? ls)\n    '()\n    (lazy-seq (cons (f (first ls)) (mp f (rest ls))))))", "problem": 118, "user": "532b9075e4b09d4e7a9b5533"}, {"code": "(fn mup [f v]\n           (if (empty? v)\n             ()\n             (lazy-seq (cons (f (first v)) (mup f (rest v))))))", "problem": 118, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(fn [f coll](drop 1 (reductions (fn [_ x](f x)) nil coll)))", "problem": 118, "user": "4fba77fae4b081705acca2df"}, {"code": "(fn mm [f l]\n  (let [a (first l) b (rest l) c (f a)]\n    (if (empty? b) [c]\n        (lazy-seq (cons c (mm f b))))))", "problem": 118, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(fn solve [f x]\n  (if (empty? x) '()\n      (cons (f (first x)) (lazy-seq (solve f (rest x)))))\n)", "problem": 118, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "(fn mmm [f xs] \n  (cond\n   (nil? xs) nil\n   :else (cons (f (first xs)) (lazy-seq (mmm f (next xs))))))", "problem": 118, "user": "531490bde4b08068f379ed17"}, {"code": "(fn m [f s]\n  (when-let [a (first s)]\n    (cons (f a)\n        (lazy-seq (m f (rest s))))))", "problem": 118, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn foo [func coll]\n  (if\n      (empty? coll) '()\n      (cons (func (first coll))\n           (lazy-seq (foo func (rest coll))))))", "problem": 118, "user": "53322cece4b019098a6f8b73"}, {"code": "#((fn mp [[x & t]] (cons (% x) (if t (lazy-seq (mp t)) nil))) %2)", "problem": 118, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn ! [f coll]\n        (lazy-seq\n         (cons (f (first coll)) (if (empty? (rest coll)) '()\n                                       (! f (rest coll)) ))))", "problem": 118, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn m [f [h & r]] \n  (lazy-seq (cons (f h) (if r (m f r))))\n)", "problem": 118, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "(fn mp\n  [f arr]\n  (if (seq arr)\n    (lazy-seq (cons (f (first arr)) (mp f (rest arr))))))", "problem": 118, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn mm [f [x & xs]]\n  (if (empty? xs)\n    (cons (f x) nil)\n    (lazy-seq\n     (cons (f x) (mm f xs)))))", "problem": 118, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn mymap [f seq]\n (let [fst (first seq) s (second seq)]\n  (if\n   (= nil fst) '()\n   (lazy-seq (concat (list (f fst)) (mymap f (rest seq)))))))", "problem": 118, "user": "4df9c598535d04ed9115e77a"}, {"code": "(fn m [f col]\n   (if (empty? col)\n     []\n     (cons (f (first col)) (lazy-seq (m f (rest col))))))", "problem": 118, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn mymap [f coll]\n  (lazy-seq\n  \t(when-let [s (seq coll)]\n  \t  (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "(fn mp [f sq]\n  (if (empty? sq) sq\n      (cons (f (first sq)) \n            (lazy-seq (mp f (rest sq))))))", "problem": 118, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn my-map [f coll]\n  (if-not (empty? coll) (lazy-cat (vector (f (first coll))) (my-map f (rest coll))) ()))", "problem": 118, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "; found this at http://clojure.org/lazy when googling for lazy cons\n(letfn [(my-map [f coll]\n                (lazy-seq\n                 (when-let [s (seq coll)]\n                   (cons (f (first s)) (my-map f (rest s))))))] \n  my-map\n)", "problem": 118, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "(fn [f coll] \n  (reductions #(f %2) \n              (-> coll first f) \n              (rest coll)))", "problem": 118, "user": "52facb9de4b047fd55837002"}, {"code": "(fn my-lazy-map [f coll]\n  (if (empty? coll)\n    '()\n    (cons (f (first coll))\n          (lazy-seq (my-lazy-map f (rest coll))))))", "problem": 118, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "(fn [f xs]\n  (letfn [(m [f xs]\n             (if (empty? xs)\n               []\n               (cons (f (first xs))\n                 (lazy-seq (m f (rest xs))))))]\n    (m f xs)))", "problem": 118, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "(fn map' [f [h & t]]\n  (when h \n    (lazy-seq\n     (cons (f h)\n           (map' f t)))))", "problem": 118, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn mp \n  ([fnn xx] (if (empty? xx) [] (cons (fnn (first xx)) (lazy-seq (mp fnn (rest xx)))))))", "problem": 118, "user": "4eadc217535d7eef30807321"}, {"code": "(fn mymap\n   [f s]\n   (cond\n    (empty? s) s\n    :else (cons (f (first s)) (lazy-seq (mymap f (rest s))))))", "problem": 118, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn my-map [f coll] (if-not (empty? coll) (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "problem": 118, "user": "533b1dc4e4b0e30313ee6cc7"}, {"code": "(fn map* [f coll]\n  (when (seq coll)\n    (cons (f (first coll))\n          (lazy-seq (map* f (rest coll))))))", "problem": 118, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn m [f xs] \n  (lazy-seq \n   (when-let [s (seq xs)]\n     (cons (f (first s)) (m f (rest xs))))))", "problem": 118, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "(fn fmap [f xs]\n  (lazy-seq\n   (if-let [[x & xs] (seq xs)]\n     (cons (f x) (fmap f xs)))))", "problem": 118, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn dmap [f s]\n  (if (seq s)\n    (cons (f (first s)) (lazy-seq (dmap f (rest s))))))", "problem": 118, "user": "515896f2e4b059418b97f0a8"}, {"code": "(fn transform [f xs]\n  (if (nil? xs) xs\n    (lazy-seq (cons (f (first xs)) (transform f (next xs))))))", "problem": 118, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn* maps [f x]\n     (if (empty? x)\n       ()\n       (cons (f (first x)) (lazy-seq (maps f (rest x))))))", "problem": 118, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn remap\n  [mapfn items]\n  (if (seq items)\n    (cons (mapfn (first items)) (lazy-seq (remap mapfn (rest items))))\n    '()))", "problem": 118, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "(fn mymap [f sq]\n  (lazy-seq\n    (when-let [s (seq sq)]\n    (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn lazy-map [f seq]\n  (if (empty? seq) seq\n      (cons (f (first seq)) (lazy-seq (lazy-map f (rest seq))))))", "problem": 118, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn me [f l]\n  (if (next l)\n    (cons (f (first l)) (lazy-seq (me f (next l))))\n    (vector(if l (f (first l))))))", "problem": 118, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn mip [f coll]\n  (if (empty? coll) nil\n  \t(cons (f (first coll))\n  \t\t(lazy-seq (mip f (rest coll))))))", "problem": 118, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(fn map* [f [x & xs :as coll]]\n             (when (seq coll)\n               (lazy-seq\n                (cons (f x) (map* f xs)))))", "problem": 118, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn m [f s]\n  (if (empty? s)\n    []\n    (lazy-seq\n     (cons (f (first s))\n           (m f (rest s))))\n    )\n  )", "problem": 118, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn my-map [fun s]\n    (if (empty? s)\n      ()\n      (cons (fun (first s)) (lazy-seq (my-map fun (rest s))))))", "problem": 118, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn [f s]\n  (letfn [(ff [f s]\n              (if (empty? s)\n                []\n                (cons (f (first s))\n                      (lazy-seq (ff f (rest s))))))]\n    (ff f s)))", "problem": 118, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn mp [f s]\n  (if (empty? s) '()\n  \t(cons (f (first s))\n          (lazy-seq (mp f (rest s))))))", "problem": 118, "user": "5175533fe4b0dea9bbfba575"}, {"code": "(fn [f l]\n  (rest (reductions #(f %2) 0 l)))", "problem": 118, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn re-map [f coll] \n  (if (empty? coll)\n    []\n    (cons (f (first coll)) \n          (lazy-seq (re-map f (rest coll))))))", "problem": 118, "user": "52c00e4fe4b07a9af5792342"}, {"code": "(fn mp [f xs]\n  (concat\n    [(f (first xs))]\n    (when (not-empty (rest xs)) (lazy-seq\n      (mp f (rest xs))))\n    ))", "problem": 118, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn my-map [f lst]\n    (if (empty? lst) '()\n        (cons (f (first lst)) (lazy-seq (my-map f (rest lst))))))", "problem": 118, "user": "534efe66e4b084c2834f4ac1"}, {"code": "(fn x [f coll] \n  (if (seq coll)\n    (cons (f (first coll)) (lazy-seq (x f (rest coll))))))", "problem": 118, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn m [f [x & xs]] (if (seq xs) `(~(f x) ~@(lazy-seq (m f xs))) `(~(f x))))", "problem": 118, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "(fn mapp [f [x & xs]]\n  (if x\n    (cons (f x) (lazy-seq (mapp f xs)))))", "problem": 118, "user": "5312cdaae4b08068f379ed03"}, {"code": "(fn mymap [f coll] \n  (if (empty? coll) \n    '() \n    (lazy-cat (list (f (first coll))) (mymap f (rest coll)))))", "problem": 118, "user": "5353afa0e4b084c2834f4b03"}, {"code": "(fn new-map [f s]\n  (if (seq s)\n    (cons (f (first s)) (lazy-seq (new-map f (rest s))))\n    s))", "problem": 118, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "(fn mapper [f s]\n(if (seq s)\n  (lazy-seq\n    (cons (f (first s)) (mapper f (rest s)))) nil))", "problem": 118, "user": "533f09e1e4b085b17e897d9a"}, {"code": "(fn mymap [f x]\n  (if (first x)\n    (cons (f (first x)) (lazy-seq (mymap f (rest x))))\n    x))", "problem": 118, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "(fn a2 [f [x & rst]]\n   (if (empty? rst) (vector (f x))\n    (cons (f x) (lazy-seq (a2 f rst)))))", "problem": 118, "user": "51a1659de4b00957e520db72"}, {"code": "(fn m [f [h & r]] (cons (f h) (when r (lazy-seq (m f r)))))", "problem": 118, "user": "53500869e4b084c2834f4ad3"}, {"code": "(fn [f x]\n  (letfn [(nick-map [[y & rest]]\n            (if rest\n              (lazy-seq (cons (f y) (nick-map rest)))\n              [(f y)]))]\n     (nick-map x)))", "problem": 118, "user": "52474133e4b05ef8e38e635e"}, {"code": "(fn t [f s]\n  (if (empty? s)\n    nil\n    (cons (f (first s))\n          (lazy-seq (t f (rest s))))))", "problem": 118, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn k [f col]\n  (if (empty? col)\n    col\n    (cons (f (first col)) (lazy-seq (k f (rest col))))))", "problem": 118, "user": "50f10f7be4b06d9538fe211a"}, {"code": "(fn my-map\n [f coll]\n (lazy-seq\n   (if (empty? coll)\n     '()\n  (cons (f (first coll)) (my-map f (rest coll))))))", "problem": 118, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn m [f s]  (if (empty? s) nil (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "(fn m [f l] (lazy-seq (if (not (seq l)) '() (cons (f (first l)) (m f (rest l))))))", "problem": 118, "user": "53638ed2e4b0243289761e5b"}, {"code": "(fn mymap [f col]\n  (let [x (first col)\n        xs (rest col)]\n    (if (empty? col)\n      [] \n      (cons (f x) (lazy-seq (mymap f xs))))))", "problem": 118, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn mymap [f coll]\n  (if (empty? coll)\n      []\n      (cons (f (first coll)) (lazy-seq (mymap f (rest coll))))))", "problem": 118, "user": "5338e33fe4b0e30313ee6ca1"}, {"code": "(fn [f v]\n   (rest(reductions #(f %2) (first v) v)))", "problem": 118, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "(fn m [f xs]\n  (lazy-seq\n   (when-let [s (seq xs)]\n     (cons (f (first s)) (m f (rest s))))))", "problem": 118, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "(fn m [f x]\n  (if (empty? x)\n    x\n    (cons (f (first x)) (lazy-seq (m f (rest x))))))", "problem": 118, "user": "53523ae0e4b084c2834f4aee"}, {"code": "(fn map* [f xs]\n\t\t (lazy-seq\n\t\t  (when (seq xs)\n\t\t    (cons (f (first xs))\n\t\t\t  (map* f (rest xs))))))", "problem": 118, "user": "4e5867d1535d8a8b8723a291"}, {"code": "(fn q [f s]\n  (if (empty? s)\n    s\n    (cons (f (first s)) (lazy-seq (q f (rest s))))))", "problem": 118, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "(fn map- [f [x & xs]]\n  (lazy-seq\n   (if (empty? xs) [(f x)]\n     (cons (f x) (map- f xs)))))", "problem": 118, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn my-map\n  [f xs]\n  (if \n    (empty? xs)\n    nil\n    (cons (f (first xs)) (lazy-seq (my-map f (rest xs))))))", "problem": 118, "user": "536aa86de4b0243289761eb1"}, {"code": "(fn t [f l]\n  (if (seq l)\n    (lazy-seq (cons (f (first l)) (t f (rest l))))\n    []))", "problem": 118, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "(fn map2 [f xs]\n  (when-let [x (first xs)]\n    (cons (f x) \n          (lazy-seq (map2 f (rest xs))))))", "problem": 118, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn m [f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s))\n            (m f (rest s))))))", "problem": 118, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn re-map [f col]\n  (if (seq col) (lazy-seq\n               (cons (f (first col)) (re-map f (rest col))))\n      nil))", "problem": 118, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "(fn my-map [f [head & tail]]\n  (if (nil? head)\n    '()\n    (cons (f head) (lazy-seq (my-map f tail)))))", "problem": 118, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn reMap [f s]\n   (lazy-seq\n     (if (not (empty? s))\n       (cons (f (first s)) (reMap f (rest s)))\n       )\n    )\n )", "problem": 118, "user": "52d42021e4b09f7907dd132a"}, {"code": "(fn my-map [f s]\n  (if (seq s)\n    (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "problem": 118, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn newmap [f x]\n     (if (empty? x)\n       '()\n       (lazy-seq (cons (f (first x)) (newmap f (rest x))))))", "problem": 118, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn mymap [f l]\n  (if (empty? l) []\n    (cons (f (first l)) (lazy-seq (mymap f (rest l))))\n    ))", "problem": 118, "user": "52faec2ee4b047fd55837004"}, {"code": "(fn mapp [f xs]\n      (if (empty? xs)\n        ()\n        (cons (f (first xs)) (lazy-seq (mapp f (rest xs))))))", "problem": 118, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "(fn m [f [h & r]] (if h (lazy-seq (cons (f h) (m f r)))))", "problem": 118, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn map1 [f xs]\n  ( lazy-seq( when ((complement empty?) xs)\n    \t(cons (f (first xs)) (map1 f (rest xs))))))", "problem": 118, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn my-map [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (my-map f (rest coll))))))", "problem": 118, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "(fn [f coll]\n  (reductions\n   (fn [a b] (f b))\n   (f (first coll))\n   (rest coll)))", "problem": 118, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn my-map [f coll]\n  (when-let [s (seq coll)]\n    (lazy-seq\n      (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn my-map [f coll]\n  (cond (seq coll) (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))\n        :else nil\n        ))", "problem": 118, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "(fn map3 [f coll] (if (empty? coll) coll (cons (f (first coll)) (lazy-seq (map3 f (rest coll))))))", "problem": 118, "user": "5143824ae4b0b4fb4ace5f36"}, {"code": "(fn m [f xs]\n  (when-not (nil? xs)\n    (cons (f (first xs)) \n          (lazy-seq (m f (next xs))))))", "problem": 118, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn mp [f s]\n   (if (seq s)\n     (cons (f (first s)) (lazy-seq (mp f (rest s))))))", "problem": 118, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "(fn mapa [f in-seq]\n  (if (not (nil? in-seq))\n    (cons (f (first in-seq))\n        (lazy-seq (mapa f (next in-seq))))))", "problem": 118, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "(fn my-map [f c] (if (empty? c)\n                   []\n                   (cons (f (first c)) (lazy-seq (my-map f (rest c))))))", "problem": 118, "user": "518279abe4b0353c468deb65"}, {"code": "(fn m [f [head & tail]]\n  (when head\n    (cons (f head)\n      (lazy-seq (m f tail)))))", "problem": 118, "user": "523b4e91e4b07becd5be21ef"}, {"code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "4ef2eb4d535dced4c769f226"}, {"code": ";(fn my-map [f s]\n;  (if (empty? s)\n;    nil\n;    (lazy-cat [(f (first s))] (my-map f (rest s)))))\n\n(fn m [f [s & r]]\n  (when s (lazy-cat [(f s)] (m f r))))\n\n\n;(fn m [f [s & r]]\n;  (when s (cons (f s) (lazy-seq (m f r)))))", "problem": 118, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn mymap [f coll]\n\t(if (empty? coll)\n\t\t[]\n\t\t(cons (f (first coll)) (lazy-seq (mymap f (rest coll))))))", "problem": 118, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "(fn my-map [f s]\n  (lazy-seq\n   (when-let [coll (seq s)]\n     (cons (f (first coll)) (my-map f (rest coll))))))", "problem": 118, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn my-map [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n       (cons (f (first s)) (my-map f (rest s))))))", "problem": 118, "user": "53779a26e4b06839e8705e38"}, {"code": "(fn mymap [f seq]\n  (if (empty? seq)\n    seq\n    (lazy-cat (list (f (first seq))) (mymap f (rest seq)))))", "problem": 118, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "(fn my-map [f xs]\n  (when-let [xs (seq xs)]\n    (lazy-seq\n     (cons\n      (f (first xs))\n      (my-map f (next xs))))))", "problem": 118, "user": "53800d99e4b06839e8705ebd"}, {"code": "(fn m [f l]\n  (if (seq l)\n    (lazy-seq\n     (cons (f (first l))\n           (m f (next l))))))", "problem": 118, "user": "534bde26e4b084c2834f4a81"}, {"code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n    (lazy-seq\n      (cons (f (first coll)) (mymap f (rest coll))))))", "problem": 118, "user": "531541a0e4b08068f379ed25"}, {"code": ";; minimum based on map definition\n(fn __ [f coll]\n  ;; without lazy-seq stack overflow occurs\n  (lazy-seq\n   ;; until empty coll is bound to s\n   (when-let [s (seq coll)]\n     ;; apply f to the first element, recur with the rest\n     (cons (f (first s)) (__ f (rest s))))))", "problem": 118, "user": "53415755e4b00652c8746ecd"}, {"code": "(fn mymap [f s]  (if (empty? (rest s)) (conj (empty s) (f (first s))) (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn reMap [f coll]  (if (not-empty coll) (lazy-seq (cons (f (first coll)) (reMap f (rest coll))))))", "problem": 118, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "(fn fm [f xs]\n  (lazy-seq\n    (if (empty? xs)\n    '()\n    (cons (f (first xs)) (fm f (rest xs))))))", "problem": 118, "user": "4dbf7a31535d020aff1edf75"}, {"code": "(fn g [f s] (lazy-seq \n (if (empty? s)\n   '()\n (cons (f (first s)) \n       (g f (rest s))))))", "problem": 118, "user": "5376966ae4b06839e8705e27"}, {"code": "(fn m [f xs]\n  (if (empty? xs)\n    ()\n    (lazy-cat [(f (first xs))] (m f (rest xs)))))", "problem": 118, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn mapx [f xs]\n  (lazy-seq\n   (when-let [s (seq xs)]\n     (cons (f (first s)) (mapx f (rest s))))))", "problem": 118, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn remap [func coll]\n(if (seq coll) (lazy-seq (cons (func (first coll)) (remap func (rest coll))))))", "problem": 118, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn rmap [f s]\n  (if (not (empty? s)) (cons (f (first s)) (lazy-seq (rmap f (rest s))))))", "problem": 118, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn map* [f s]\n            (if (empty? s)\n              s\n              (cons (f (first s)) (lazy-seq (map* f (rest s))))))", "problem": 118, "user": "4edb314d535d10e5ff6f5317"}, {"code": "(fn mymap [f s]\n   (if (empty? s)\n     '()\n     (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn m2\n  [f c1]\n  (lazy-seq\n    (let [s1 (seq c1)]\n      (when s1\n        (cons (f (first s1))\n              (m2 f (rest s1)))))))", "problem": 118, "user": "53806e5be4b06839e8705ec1"}, {"code": "(fn F [f v]\n\t(if-not (empty? v)\n\t  (lazy-seq\n\t   (cons (f (first v)) (F f (rest v))))))", "problem": 118, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "(fn m [f s]\n  (if-not (empty? s)\n  (cons (f (first s)) (lazy-seq (m f (rest s))))))", "problem": 118, "user": "538be6afe4b0640c7a9a58c9"}, {"code": "(fn m [f s] (if (not (empty? s)) (cons (f (first s)) (lazy-seq ( m f (rest s))))))", "problem": 118, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn M [f s]\n  (if (empty? s) []\n      (cons (f (first s))\n            (lazy-seq (M f (rest s))))))", "problem": 118, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn mymap [f x]\n  (if (empty? x)\n    nil\n  \t(cons (f (first x)) (lazy-seq (mymap f (rest x))))))", "problem": 118, "user": "538d464ee4b0b51d73faae69"}, {"code": "(fn my-map [f xs]\n  (if (empty? xs)\n    []\n    (cons (f (first xs)) (lazy-seq (my-map f (rest xs))))))", "problem": 118, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn m [f x]\n  (if (empty? x) ()\n    (cons (f (first x)) (lazy-seq (m f (rest x))))))", "problem": 118, "user": "531619c1e4b08068f379ed3d"}, {"code": "(fn mp [f x] (if (empty? x) nil (cons (f (first x)) (lazy-seq (mp f (rest x))))))", "problem": 118, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn [f seqs]\n  (let [my-lazy-map (fn my-lazy-map [seqs]\n                      (if (empty? seqs)\n                        nil\n                        (cons (f (first seqs)) (lazy-seq (my-lazy-map (rest seqs))))))]\n                      (my-lazy-map seqs)))", "problem": 118, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "(fn maq [f [x & xs]] (lazy-seq (cons (f x) (if xs (maq f xs)))))", "problem": 118, "user": "53403110e4b085b17e897da6"}, {"code": "(fn mymap [f collection]\n  (when (seq collection)\n    (lazy-seq (cons (f (first collection))\n                    (mymap f (rest collection))))))", "problem": 118, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn mymap [f s]\n  (cond\n   (empty? s) '()\n   :else (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "problem": 118, "user": "52046600e4b0c283853240c5"}, {"code": "(fn mm [f coll]\n  (if (empty? coll)\n    '()\n    (cons (f (first coll)) (lazy-seq (mm f (rest coll))))))", "problem": 118, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn my-map [func input]\n      (if (sequential? input) \n        (cons (func (first input))\n              (lazy-seq (my-map func (next input))))))", "problem": 118, "user": "53838742e4b06839e8705ee0"}, {"code": "(fn [f lst] (rest (reductions #(f %2) nil lst)))", "problem": 118, "user": "536b2048e4b0243289761eb7"}, {"code": "#(letfn[(mp[f s]\n           (if (nil? s) nil\n             (lazy-seq (cons (f (first s)) (mp f (next s))))))]\n   (mp %1 %2))", "problem": 118, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "(fn my-map [func input]\n      (if (sequential? input) \n        (cons (func (first input))\n              (lazy-seq (my-map func (next input))))))", "problem": 118, "user": "4ea8570f535d7eef308072f8"}, {"code": "(fn mp [f coll]\n  (when-let [[x & r] (seq coll)]\n    (cons (f x) (lazy-seq (mp f r)))))", "problem": 118, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn mp [f s]\n  (when (seq s)\n  (cons (f (first s)) (lazy-seq (mp f (rest s))))))", "problem": 118, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn newmap [f coll]\n  (if (not (empty? coll))\n    (lazy-seq \n     (cons (f (first coll)) (newmap f (rest coll))))))", "problem": 118, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn mapper [func coll]\n  (if (seq coll)\n    (cons (func (first coll))\n    (lazy-seq (mapper func (rest coll))))))", "problem": 118, "user": "4dbe19fe535d020aff1edf59"}, {"code": "(fn m [f coll]\n  (cons (f (first coll))\n        (when (next coll)\n          (lazy-seq\n            (m f (rest coll))))))", "problem": 118, "user": "5080a697e4b01a93d3f38e49"}, {"code": "(fn lm [f c] (if (empty? c) \n               [] \n               (cons \n                \t(f (first c))\n                \t(lazy-seq (lm f (rest c))))))", "problem": 118, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "(fn\n  [f coll]\n  (letfn [(r [coll] (lazy-seq\n                      (if coll\n                          (cons (f (first coll)) (r (next coll)))\n                          '())))]\n         (r coll)))", "problem": 118, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn mp [f [a & more]]\n  (lazy-seq (cons (f a) (if more (mp f more)))))", "problem": 118, "user": "538e864ee4b0b51d73faae87"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if\t(empty?\ts) '()\n      (cons (f (first s)) (lazy-seq (mymap f (rest s))))))", "user": "530bf87ee4b02e82168697d5"}, {"problem": 118, "code": "(fn mymap [f v](if (not (empty? v)) (lazy-seq (cons (f (first v)) (mymap f (rest v))))))", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 118, "code": "(fn map' [f coll]\n  (when (seq coll)\n\t  (cons (f (first coll))\n    \t    (lazy-seq (map' f (rest coll))))))", "user": "5250b7a5e4b0541d1855b83e"}, {"problem": 118, "code": "(fn m\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (m f (rest s)))))))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (not (empty? coll))\n    (cons (f (first coll))\n          (lazy-seq (if coll (mymap f (rest coll)))))))", "user": "53a1b5c8e4b0ca733b9744c1"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "52b71bd2e4b0c58976d9ad4d"}, {"problem": 118, "code": "(fn m [f [h & t :as c]] (if (empty? c) [] (lazy-seq (cons (f h) (m f t)))))", "user": "4faf97d8e4b081705acca258"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "537e104ce4b06839e8705e9a"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (if (empty? coll) nil\n      (lazy-seq (cons (f (first coll))\n                      (my-map f (rest coll))))))", "user": "536e5055e4b0fc7073fd6e6b"}, {"problem": 118, "code": "(fn mymap [f x]\n  (if (empty? x)\n    '()\n    (lazy-seq (cons (f (first x)) (mymap f (rest x))))))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 118, "code": "(fn mp [f xs] (if (empty? xs) () (lazy-seq (cons (f (first xs)) (mp f (rest xs))))))", "user": "53976599e4b0b51d73faaeea"}, {"problem": 118, "code": "(fn mymap\n  [f [h & r]]\n  (when h\n    (cons (f h) (lazy-seq (mymap f r)))))", "user": "53b1d871e4b047364c044494"}, {"problem": 118, "code": "(fn my-map [f m] (if (empty? m) () (cons (f (first m)) (lazy-seq (my-map f (rest m))))))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 118, "code": "(fn r [f xs]\n  (lazy-seq\n    (if (empty? xs)\n    '()\n    (cons (f (first xs)) (r f (rest xs))))))", "user": "536827f1e4b0243289761e8a"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (if (nil? (first coll))\n    nil\n    (cons\n     (f (first coll))\n     (lazy-seq (my-map f (rest coll))))))", "user": "53ac4719e4b047364c04445c"}, {"problem": 118, "code": "(fn ex118\n  [f s]\n  (if (empty? s)\n    nil\n    (cons (f (first s))\n          (lazy-seq (ex118 f (rest s))))))", "user": "532bce35e4b09d4e7a9b5536"}, {"problem": 118, "code": "(fn map-ip [f s]\n           (if (empty? s) nil\n             (lazy-seq (cons (f (first s)) \n                              (map-ip f (rest s))))))", "user": "53a26cede4b0f1fc7453882a"}, {"problem": 118, "code": "(fn m [f coll]\n  (if (empty? coll)\n         []\n         (cons (f (first coll)) (lazy-seq (m f (rest coll))))))", "user": "53ae16e2e4b047364c044472"}, {"problem": 118, "code": "(fn remap [f xs] \n  (if (seq xs)\n      (cons (f (first xs)) (lazy-seq (remap f (rest xs))))))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 118, "code": "(fn mmap [fcn [f & r]] \n  (if f (cons (fcn f) (lazy-seq (mmap fcn r)))))", "user": "5281a445e4b0757a1b17143a"}, {"problem": 118, "code": "(fn mp [f s]\n  (if (empty? s)\n    []\n    (cons (f (first s))\n          (lazy-seq (mp f (rest s))))))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 118, "code": "(fn mp [f coll]\n\t(lazy-seq\n   \t\t(when (seq coll)\n     \t\t  (cons (f (first coll)) (mp f (rest coll))))))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 118, "code": "(fn m [f s] (if (empty? s) s (lazy-seq (cons (f (first s)) (m f (rest s))))))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 118, "code": "(fn m [f s]\n  (if-not (empty? s)\n    (lazy-seq (cons (f (first s)) (m f (rest s))))\n    []))", "user": "4ef9b021535dced4c769f269"}, {"problem": 118, "code": "(fn m [f l]\n  (if (empty? l)\n    []\n    (cons (f (first l)) (lazy-seq (m f (rest l))))))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 118, "code": "(fn __ [f col]\n  (if (empty? col)\n    ()\n    (cons (f (first col)) (lazy-seq (__ f (rest col))))))", "user": "4f1e4ab5535d64f603146496"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (when (seq coll)\n    (lazy-seq      \n      (cons\n        (f (first coll))\n        (my-map f (rest coll))))))", "user": "52c1ede2e4b07a9af579236d"}, {"problem": 118, "code": "(fn mmap [f coll] (if (nil? (seq coll)) '() (cons (f (first coll)) (lazy-seq (mmap f (rest coll))))))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 118, "code": "(fn my-map [fun ls]\n  (if (empty? ls)\n    ()\n    (cons (fun (first ls))\n          (lazy-seq (my-map fun (rest ls))))))", "user": "51baff1be4b0fe3ecfb46443"}, {"problem": 118, "code": "(fn m [f c]\n  (if (empty? c)\n    c\n    (cons (f (first c)) (lazy-seq (m f (rest c))))))", "user": "539ddf25e4b0b51d73faaf3e"}, {"problem": 118, "code": "(fn mappy [f c]\n    (when-let [s (seq c)]\n      (lazy-seq (cons (f (first s))\n        (mappy f (rest s))))))", "user": "52bf0116e4b07a9af5792328"}, {"problem": 118, "code": "(fn mmap [f coll]\n  (if (false? (empty? coll))\n    (lazy-seq (cons (f (first coll)) (mmap f (rest coll))))))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 118, "code": "(fn mymap [f [head & tail]] (cons (f head) (if (seq tail) (lazy-seq (mymap f tail)) '())))", "user": "534d1173e4b084c2834f4a98"}, {"problem": 118, "code": "(fn m [f c]\n  (if (empty? c)\n    c\n    (cons (f (first c)) (lazy-seq (m f (rest c))))))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 118, "code": "(fn f [a [b & r]] (when b (cons (a b) (lazy-seq (f a r)))))", "user": "5382704be4b06839e8705ed4"}, {"problem": 118, "code": "(fn mapper [fun xs]\n     (if(empty? xs) []\n       (lazy-cat [(fun (first xs))] (mapper fun (rest xs)))))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s)\n    s\n    (cons (f (first s)) (lazy-seq (mymap f (rest s))) )))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 118, "code": "(fn nmap [fun coll]\n  (if (seq coll)\n    (lazy-seq (cons (fun (first coll)) (nmap fun (rest coll))))\n    nil\n    )\n  )", "user": "5368fedee4b0243289761e93"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s) nil\n      (cons (f (first s)) (lazy-seq (mymap f (next s))))))", "user": "538db083e4b0b51d73faae74"}, {"problem": 118, "code": "(fn my-lazy-map [f args]\n  (when-let [s (seq args)]\n  (cons (f (first s)) (lazy-seq (my-lazy-map f (rest s))))))", "user": "504f5804e4b0a02f9cffde72"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq (if (seq coll)\n              (cons (f (first coll)) (my-map f (rest coll)))\n              nil)))", "user": "50b63c5ee4b0a86f8358ca69"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n    (when-let [[head & tail] (seq coll)]\n      (cons (f head) (my-map f tail)))))", "user": "53710c09e4b0fc7073fd6ea5"}, {"problem": 118, "code": "(fn duder \n  ([f s] \n   (if (empty? s)\n     []\n     (cons (f (first s))  (lazy-seq (duder f (rest s)))))))", "user": "51fc44c5e4b0f1313d468a1b"}, {"problem": 118, "code": "(fn reimplement-map [f xs]\n  (when-not (empty? xs) \n    (concat \n      (vector (f (first xs))) \n      (lazy-seq (reimplement-map f (rest xs))))))", "user": "52616198e4b03e8d9a4a705e"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (if-not (empty? xs)\n    (cons (f (first xs)) (lazy-seq (my-map f (rest xs))))))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq\n     (cons (f (first coll)) (my-map f (rest coll))))))", "user": "53b05a36e4b047364c044481"}, {"problem": 118, "code": "(letfn [(my-map [f s]\n          (cond (empty? (rest s)) (cons (f (first s)) '())\n                :else (cons (f (first s))\n                            (lazy-seq (my-map f (rest s))))))]\n  my-map)", "user": "538e36c7e4b0b51d73faae81"}, {"problem": 118, "code": "(fn mmap [f v]\n       (lazy-seq\n        (when ((complement empty?) v)\n          (cons (f (first v)) (lazy-seq (mmap f (rest v)))))))", "user": "5327c591e4b09d4e7a9b54ff"}, {"problem": 118, "code": "(fn mm [f l] (lazy-seq (when-let [s (seq l)] (cons  (f (first l)) (mm f (rest l))))))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 118, "code": "(fn mymap [f xs] (cons (f (first xs)) (if (next xs) (lazy-seq (mymap f (next xs))) [])))", "user": "52fc34cee4b047fd55837015"}, {"problem": 118, "code": "(fn mmap [f col]\n  (if (empty? col)\n     '()\n     (cons\n        (f (first col))\n        (lazy-seq\n            (mmap f (rest col))\n        )\n     )\n  )\n)", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 118, "code": "(fn m [f c]\n  (lazy-seq \n   (if (seq c)\n     (cons (f (first c))\n           (m f (rest c))))))", "user": "51febd40e4b0f1313d468a76"}, {"problem": 118, "code": "(fn self [f xs]\n  (if (empty? xs)\n    xs\n    (let [[fst & rst] xs]\n      (cons (f fst) (lazy-seq (self f rst))))))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 118, "code": "(fn alt-map [f coll]\n  (if (seq coll) \n    (lazy-seq\n     (cons (f (first coll)) (alt-map f (rest coll))))))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 118, "code": "(fn m_a_p [f c]\n   (cond (empty? c) nil\n         true (lazy-seq (cons (f (first c)) (m_a_p f (rest c))))))", "user": "52fac708e4b047fd55836fff"}, {"problem": 118, "code": "(fn m [f s] (if-let [h (first s)]\n            (cons (f h) (lazy-seq (m f (rest s))))\n            ()))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 118, "code": "(fn fun [f col]\n  (when (seq col)\n    (lazy-seq\n      (cons (f (first col)) (fun f (rest col))))))", "user": "53a83c74e4b047364c044426"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (lazy-seq\n    (if (empty? xs)\n    ()\n    (cons (f (first xs)) (my-map f (rest xs))))))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 118, "code": "(fn rick-map [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n     ;; (conj (rick-map f (rest s)) (f (first s))))))\n     (cons (f (first s)) (rick-map f (rest s))))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s)\n    []\n    (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "user": "53791ab7e4b06839e8705e4d"}, {"problem": 118, "code": "(fn map' [f coll] (if (empty? coll)\n                     coll\n                     (lazy-seq (cons (f (first coll)) (map' f (rest coll))))))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 118, "code": "(fn map1 [f s]\n  (if (empty? s) []\n    (cons (f (first s))\n          (lazy-seq (map1 f (rest s)))\n          )))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 118, "code": "(fn ds [f x] \n  (if (empty? x)\n    nil\n    (cons (f (first x)) (lazy-seq (ds f (rest x))))))", "user": "53e91473e4b036ad0777e495"}, {"problem": 118, "code": "(fn my-map [f s]\n    (if (= s nil)\n        nil\n        (cons \n            (f (first s)) \n            (lazy-seq (my-map f (next s))))))", "user": "53a94b63e4b047364c044434"}, {"problem": 118, "code": "(fn my-map[f coll]\n  (let [[h & r] coll]\n    (if (nil? h)\n      '()\n       (cons (f h) (lazy-seq (my-map f r))))))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 118, "code": "(fn [f s] (rest (reductions #(f %2) nil s)))", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 118, "code": "(fn m [f xs]\n  (if (empty? xs) \n      [] \n      (cons (f (first xs)) \n              (lazy-seq  \n                 (m f (rest xs))))))", "user": "51897709e4b0288ada3dbdaa"}, {"problem": 118, "code": "(fn mappy [f s]\n  (when (seq s)\n  \t(cons (f (first s)) (lazy-seq (mappy f (rest s))))))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 118, "code": "(fn [f coll] (rest (reductions #(f %2) nil coll)))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 118, "code": "(fn iter [f [x & xs]]\n    (if (seq xs)\n      (cons (f x) (lazy-seq (iter f xs)))\n      [(f x)]\n      )\n    )", "user": "53c3397be4b00fb29b221279"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (seq coll)\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 118, "code": "(fn my-map [fun [f & r]]\n  (lazy-seq (if r\n              (cons (fun f) (my-map fun r))\n              (vector (fun f)))))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 118, "code": "(fn m [f [a & r]]\n  (if a \n    (lazy-seq\n      (cons (f a) (m f r)))))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 118, "code": "(fn m[f [first & rest]] \n  (when first\n    (cons \n     (f first) \n     (lazy-seq (m f rest)))))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 118, "code": "(fn map1 [f col]\n  (if (seq col) (lazy-seq\n               (cons (f (first col)) (map1 f (rest col))))\n      nil))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 118, "code": "(fn m [f xs]\n   (if (not-empty xs)\n     (cons (f (first xs)) (lazy-seq (m f (rest xs))))))", "user": "5052ab7ee4b0a561d07d8f20"}, {"problem": 118, "code": "(fn fa [f col] (if (empty? col) nil (lazy-seq (cons (f (first col)) (fa f (rest col))))))", "user": "50856bd1e4b004985b776e4c"}, {"problem": 118, "code": "(fn mm [f s]\n   (if (seq s)\n     (cons (f (first s)) (lazy-seq (mm f (rest s))))))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 118, "code": "(fn mapA [op coll]\n  (if (empty? coll)\n    nil\n    (lazy-cat\n      (list (op (first coll)))\n      (mapA op (rest coll))\n    )\n  )\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (lazy-seq\n    (let [v (f x)]\n      (if (empty? xs)\n        (list v)\n        (cons v (my-map f xs))))))", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 118, "code": "(fn l [f [s & r]] (cons (f s) (if r (lazy-seq (l f r)))))", "user": "51a058dae4b0b292b01ee3f3"}, {"problem": 118, "code": "(fn my-map [f lyst]\n  (when (seq lyst)\n    (cons (f (first lyst)) (lazy-seq (my-map f (rest lyst))))))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 118, "code": "(fn myMap [f l]\n   (if (empty? l) []\n     (cons (f (first l))\n           (lazy-seq (myMap f (rest l))))))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 118, "code": "(fn rim [f xs]\n    (when (seq xs)\n      (lazy-seq (cons (f (first xs)) (rim f (rest xs))))))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 118, "code": "(fn mymap [func coll]\n   (if (empty? coll) ()\n       (lazy-seq (cons (func (first coll)) (mymap func (rest coll)))))\n)", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 118, "code": "(fn peu [x y] (if (empty? y) [] (cons (x (first y)) (lazy-seq (peu x (rest y))))))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 118, "code": "(fn mp [f s]\n  (lazy-seq (when-let [s (seq s)]\n    (cons (f (first s)) (mp f (rest s))))))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 118, "code": "(fn mp [f coll] (if-not (empty? coll) (cons (f (first coll) ) (lazy-seq (mp f (rest coll) ) ) ) ) )", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 118, "code": "(fn r [f s]\n  (if (= s [])\n    []\n    (cons (f (nth s 0)) (lazy-seq (r f (rest s))))))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 118, "code": "#(rest (reductions (fn [_ x] (% x)) 0 %2))", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 118, "code": "(fn m[f s]\n  (when-first [a s]\n  (lazy-seq(cons (f a) (m f (rest s))))))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 118, "code": "(fn my-map [f col]\n  (if (not (empty? col)) (lazy-seq  (cons (f (first col)) (my-map f (rest col)) ) ))\n  )", "user": "537b1083e4b06839e8705e64"}, {"problem": 118, "code": "(fn __118 [f [x & xs]]\n    (if x (cons (f x) (lazy-seq (__118 f xs)))))", "user": "5151c184e4b03e678e393add"}, {"problem": 118, "code": "(fn new-map [f s] (if (seq s)\n                      (cons (f (first s)) (lazy-seq (new-map f (rest s))))\n                      nil))", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 118, "code": "(fn m [f s]\n  (if (nil? s)\n   nil\n   (lazy-seq (cons (f (first s)) (m f (next s))))))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 118, "code": "(fn my-map [f coll] (when-let [s (seq coll)] (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 118, "code": "(fn foo[f s]\n  (if (empty? s) []\n    (let [[h & t] s] \n      (cons (f h) (lazy-seq (foo f t))))\n    ))", "user": "52271ffee4b04e78ff2e19a9"}, {"problem": 118, "code": "(fn [f ys]\n  (letfn [(go [xs]\n            (if (empty? xs)\n              []\n              (let [x (first xs)\n                    xs' (rest xs)]\n                (cons (f x) (lazy-seq (go xs'))))))]\n    (go ys)))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 118, "code": "(fn g[f coll]\n  (lazy-seq\n    (if (empty? coll)\n      nil\n      (cons\n       (f (first coll))\n       (g f (rest coll))))))", "user": "5398123ee4b0b51d73faaef3"}, {"problem": 118, "code": "(fn p118 [f l]\n  (if (empty? l) '()\n    (cons (f (first l)) (lazy-seq (p118 f (rest l))))))", "user": "525c575be4b0cb4875a45d38"}, {"problem": 118, "code": "(fn my-map [f [a & b]]\n  (lazy-seq\n  (let [x (list (f a))]\n    (if (seq b)\n      (concat x (my-map f b))\n      x))))", "user": "53d86564e4b0e771c302546b"}, {"problem": 118, "code": "(fn m [f arr]\n  (if (nil? arr)\n    nil\n    (cons (f (first arr)) (lazy-seq (m f (next arr))))))", "user": "51780bfce4b0f89a8f53839c"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 118, "code": "(fn my-map [f [head & rest :as all]]\n           (if (empty? all)\n             nil\n             (cons (f head) (lazy-seq (my-map f rest)))))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 118, "code": "(fn newmap [func xs]\n  (cons (func (first xs))\n        (if (next xs)\n          (lazy-seq (newmap func (next xs)))\n          (empty xs)\n          )))", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 118, "code": "(fn my-map [f c]\n  (if (empty? c) \n    '()\n\t(concat (list (f (first c))) (lazy-seq (my-map f (rest c))))))", "user": "51eec1a6e4b0871fa145d98d"}, {"problem": 118, "code": "(fn m [f l] (if (empty? l) [] (lazy-seq (cons (f (first l)) (m f (rest l))))))", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 118, "code": "(fn test [f coll]\n  (if (empty? coll)\n    nil\n    (cons (f (first coll)) (lazy-seq (test f (rest coll))))\n   )\n)", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 118, "code": "(fn mymap [f xs]\n  (when xs\n    (lazy-seq (cons (f (first xs)) (mymap f (next xs))))))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 118, "code": "(fn map-c [f sq]\n  (cons (f (first sq)) (if (empty? (rest sq)) [] (lazy-seq (map-c f (rest sq)))))\n)", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 118, "code": "(fn m\n  [f s]\n  (if (nil? (seq s))\n    '()\n    (cons (f (first s)) (lazy-seq (m f (rest s))))\n    ))", "user": "524025bce4b0ad64fa01030f"}, {"problem": 118, "code": "(fn m [f s]\n  (if-not (empty? s)\n    (lazy-seq\n     (cons (f (first s))\n           (m f (rest s))))))", "user": "5338387de4b0e30313ee6c91"}, {"problem": 118, "code": "(fn [f xs] (reductions #(f %2) (f (first xs)) (rest xs)))", "user": "5097ea89e4b087ccf61a7af4"}, {"problem": 118, "code": "(fn sk-map [f [head & tail]]\n  (lazy-seq\n    (cons (f head)\n          (if tail\n            (sk-map f tail)))))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 118, "code": "(fn m [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (m f (rest s))))))", "user": "507330e6e4b0e3170b5a8698"}, {"problem": 118, "code": "(letfn [(mymap [f l]\n               (if (seq l)\n                 (let [[x & xs] l]\n                   (cons (f x) (lazy-seq (mymap f xs))))\n                 '()))]\n  mymap)", "user": "540470dae4b0addc1aec6658"}, {"problem": 118, "code": "(fn m [f [h & r]]\n    (lazy-seq\n     (cons\n      (f h)\n      (if r (m f r)))))", "user": "533018b2e4b019098a6f8b56"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (seq s)\n    (lazy-seq (cons \n                (f (first s)) \n                (my-map f (rest s))))))", "user": "541096bde4b01498b1a719b2"}, {"problem": 118, "code": "(fn m [f x]\n\t(if (empty? x) '()\n\t\t(cons (f (first x)) (lazy-seq (m f (rest x)))))\n)", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 118, "code": "(fn my-lazy-map [f coll]\n  (if (seq coll)\n    (cons (f (first coll)) (lazy-seq (my-lazy-map f (rest coll))))\n    ()))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 118, "code": "(fn m [f [h & r]]\n    (lazy-seq\n     (cons\n      (f h)\n      (if r (m f r)))))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 118, "code": "(fn m [f coll]\n  (when-let [[x & xs] (seq coll)]\n    (cons (f x) (lazy-seq (m f xs)))))", "user": "537f4652e4b06839e8705eb1"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s)\n    s\n    (cons (f (first s)) (lazy-seq (mymap f (rest s))))\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 118, "code": "(fn mm [f [first & rest]]\n   (cons (f first) (if rest (lazy-seq (mm f rest)))))", "user": "54094824e4b0addc1aec66da"}, {"problem": 118, "code": "(fn my-map [f [head & tail]]\n    (lazy-seq (cons (f head) (if tail (my-map f tail)))))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 118, "code": "(fn mmap [f coll]\n  (if (seq coll)\n  \t(cons (f (first coll)) (lazy-seq (mmap f (rest coll))))\n    []))", "user": "53480973e4b084c2834f4a52"}, {"problem": 118, "code": "(fn [f s]\n   (replace {false nil}\n            (keep #(if (nil? (f %)) false (f %)) s)))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 118, "code": "(fn myMap [f s]\n  (when (first s)\n  (cons (f (first s)) (lazy-seq (myMap f (rest s))))))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll)\n    nil\n    (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 118, "code": "(fn m [f [h & t]]\n  (if (nil? h)\n    ()\n    (lazy-seq (cons (f h) (m f t)))))", "user": "53f7820be4b0de5c41848560"}, {"problem": 118, "code": "(fn my-map\n  [f s]\n  (if (false? (empty? s)) \n    (lazy-seq \n      (cons \n        (f (first s)) \n        (my-map f (rest s))))))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 118, "code": "(fn q118 [f coll]\n  (if (not (empty? coll))\n    (lazy-seq\n      (cons (f (first coll)) (q118 f (rest coll))))))", "user": "52c672e2e4b0c2d177d6210e"}, {"problem": 118, "code": "(fn foo [f xs]\n  (if (empty? xs) []\n    (lazy-seq \n     (concat [(f (first xs))] \n             (foo f (rest xs))))))", "user": "54133900e4b01498b1a719de"}, {"problem": 118, "code": "(fn m [f c] (when (not-empty c) (lazy-seq (cons (f (first c)) (m f (rest c))))))", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 118, "code": "(fn my-map3 [f coll]\n  (lazy-seq\n    (if (seq coll)\n      (cons (f (first coll)) (my-map3 f (rest coll))))))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 118, "code": "(fn r [f xs]\n  (lazy-seq\n    (if (empty? xs)\n    '()\n    (cons (f (first xs)) (r f (rest xs))))))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 118, "code": "(fn m [f coll]\n  (if (empty? coll)\n    '()\n    (cons (f (first coll)) (lazy-seq (m f (rest coll))))))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 118, "code": "(fn map1 [f [p & r]]\n    (when p\n      (cons (f p) (lazy-seq (map1 f r)))))", "user": "4ff4bed0e4b0678c553fc35f"}, {"problem": 118, "code": "(fn ma [f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n        (cons (f (first s)) (ma f (rest s)))\n  )))", "user": "511036c5e4b04c71fce993ee"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (cons (f (first coll))\n        (when (seq (rest coll)) (lazy-seq (mymap f (rest coll))))))", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 118, "code": "(fn mp\n  [f xs] \n  (if-not (empty? xs) \n    (lazy-seq \n     (cons \n      (f (first xs)) (mp f (rest xs))))))", "user": "52382d91e4b0fae3832e99f0"}, {"problem": 118, "code": "(fn my-map [f s]\n        (when (seq s)\n          (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (my-map f (rest s))))))", "user": "4ea5ba92535d7eef308072d9"}, {"problem": 118, "code": "(fn collect [f s]\n  (if (seq s)\n    (cons (f (first s)) (lazy-seq (collect f (rest s))))))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (lazy-seq\n     (cons (f x) (if xs (my-map f xs)))))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 118, "code": "(fn my-map [f coll]\n   (lazy-seq\n     (cons (f (first coll))\n           (if-not (empty? (rest coll))\n             (my-map f (rest coll))\n             []))))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n   (when-let [[x & xs] (seq coll)]\n     (cons (f x) (my-map f xs)))))", "user": "5346f409e4b084c2834f4a46"}, {"problem": 118, "code": "(fn m [f s] (if (seq s) (cons (f (first s)) (lazy-seq (m f (rest s))))))", "user": "52541fe6e4b0541d1855b964"}, {"problem": 118, "code": "(fn [f x] (rest (reductions #(f %2) nil x)))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 118, "code": "(fn -map [f xs]\n  (lazy-seq\n   (when-let [[h & r] (seq xs)]\n    (cons (f h) (-map f r)))))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 118, "code": "(fn mm [f coll]\n  (when-let [s (seq coll)] (cons (f (first s)) (lazy-seq (mm f (next s))))))", "user": "54302691e4b0dad94371f2d7"}, {"problem": 118, "code": "(fn [fun s]\n  (letfn [(chizu [sq]\n                 (let [v (first sq)]\n                   (when v\n                     (cons (fun v)\n                           (lazy-seq (chizu (rest sq)))))))]\n    (chizu s)))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 118, "code": "(fn m [f [x & xs]]\n    (if x (lazy-seq (cons (f x) (m f xs)))))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 118, "code": "(fn _map [f x]\n  (if (empty? x) '()\n    (lazy-seq (cons (f (first x)) (_map f (rest x))))))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 118, "code": "(fn mapp [f s]\n  (if (empty? s)\n    '()\n    (cons (f (first s)) \n          (lazy-seq (mapp f (rest s))))))", "user": "5339c105e4b0e30313ee6cae"}, {"problem": 118, "code": "(fn a [f [b & c]] (if (empty? c) (vector (f b)) (cons (f b) (lazy-seq (a f c)))))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 118, "code": "(fn maps\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (maps f (rest s)))))))", "user": "53da3fcde4b0e771c3025497"}, {"problem": 118, "code": "(fn mylazymap\n  [f xs]\n  (rest (reductions #(f %2) [] xs)))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 118, "code": "(fn map- [fun [s & more]] \n  (if s \n    (cons (fun s) (lazy-seq (map- fun more)))))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 118, "code": "(fn mymap [f coll]\n\t(if (not( empty? coll))\n\t(lazy-seq\n\t(cons (f (first coll)) (mymap f (rest coll))))))", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 118, "code": "(fn m [f xs]\n     (cond\n       (empty? xs) []\n       :else  (cons (f (first xs)) (lazy-seq (m f (rest xs)))))\n     )", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 118, "code": "(fn naive-map [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (naive-map f (rest s)))))\n  )", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 118, "code": "(fn mapp [f [head & tail]]\n    (cons \n     (f head)\n     (lazy-seq (when tail (mapp f tail)))))", "user": "537bde5de4b06839e8705e73"}, {"problem": 118, "code": "(fn my-map [f v]\n  (cons (f (first v)) \n        (lazy-seq \n         (if (empty? (rest v)) \n           []\n           (my-map f (rest v))))))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 118, "code": "(fn my-map [f col]\n      (if (empty? col)\n        []\n        (cons (f (first col)) (lazy-seq (my-map f (rest col))))))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 118, "code": "(fn map' [f l]\n  (if-let [x (first l)]\n    (cons (f x) (lazy-seq (map' f (rest l))))))", "user": "54431b6ee4b032a45b869385"}, {"problem": 118, "code": "(fn mymap [f xs]\n  (if (seq xs)\n    (cons (f (first xs))\n          (lazy-seq (mymap f (rest xs))))))", "user": "54448e84e4b032a45b869393"}, {"problem": 118, "code": "(fn m[f c](lazy-seq(if(seq c)(cons(f(first c))(m f(rest c))))))", "user": "4db2903f535df7e46ed9b6bf"}, {"problem": 118, "code": "(fn paul\n  [f s]\n  (if (empty? s)\n  []\n  (lazy-seq (cons (f (first s)) (paul f (drop 1 s)) ))\n  ))", "user": "542baf7ce4b0dad94371f291"}, {"problem": 118, "code": "(fn my-map\n  [f xs]\n  (lazy-seq\n   (if (empty? xs)\n     '()\n     (cons (f (first xs)) (my-map f (rest xs))))))", "user": "52561295e4b0541d1855ba03"}, {"problem": 118, "code": "(fn m\n  [f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (m f (rest s))))))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 118, "code": "(fn r [f xs]\n  (lazy-seq\n    (if (empty? xs)\n    '()\n    (cons (f (first xs)) (r f (rest xs))))))", "user": "5412646de4b01498b1a719d4"}, {"problem": 118, "code": "(fn new-map [f [head & tail]]\n  (if (nil? head)\n    '()\n    (lazy-seq\n     (cons (f head) (new-map f tail)))))", "user": "534941d1e4b084c2834f4a60"}, {"problem": 118, "code": "(fn mjl-map\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (mjl-map f (rest s)))))))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 118, "code": "(fn _map [f s]\n  (if-not (empty? s)\n    (cons (f (first s)) (lazy-seq (_map f (drop 1 s))))\n))", "user": "54524afbe4b0e397800069bc"}, {"problem": 118, "code": "(fn mapp [op [head & rest]] (lazy-seq (cons (op head) (if rest (mapp op rest)))))", "user": "52485723e4b05ef8e38e63d2"}, {"problem": 118, "code": "(fn new-map [f s]\n   (if (not-empty s)\n   (lazy-seq (cons (f (first s)) (new-map f (rest s))))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 118, "code": "(fn cart [f s]\n  (if (empty? s)\n    nil\n    (lazy-cat (list (f (first s))) (cart f (rest s)))))", "user": "545801f6e4b01be26fd74615"}, {"problem": 118, "code": "(fn mp [f coll]\n          (lazy-seq\n          (if (empty? coll)\n          '()\n          (cons (f (first coll)) (mp f (rest coll))))))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 118, "code": "(fn m [f s] (when (not (empty? s))(lazy-seq (cons (f (first s)) (m f (rest s))))))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 118, "code": "(fn mymap [f col]\n  (lazy-seq\n    (if (empty? col)\n      ()\n      (cons (f (first col))\n            (mymap f (rest col))))))", "user": "544257b4e4b032a45b869379"}, {"problem": 118, "code": "(fn mp [f [h & t]]\n  (lazy-seq\n   (cons (f h)\n         (if t (mp f t)))))", "user": "54580586e4b01be26fd74616"}, {"problem": 118, "code": "(fn m [f [c & r]]\n  (if r\n    (lazy-seq\n     (cons (f c) (m f r)))\n    (cons (f c) [])))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 118, "code": "(fn m [f v]\n  (cons (f (first v)) (lazy-seq \n                       \t (if (empty? (rest v))\n                           []\n                           (m f (rest v))))))", "user": "526698c9e4b03e8d9a4a7144"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (if (seq xs)\n    (lazy-seq (cons (f x) (my-map f xs)))\n    (list (f x))))", "user": "505aa653e4b021387fb89857"}, {"problem": 118, "code": "(fn jp [op ser] (if (empty? ser) () (lazy-seq (cons (op (first ser)) (jp op (rest ser))))))", "user": "544e1794e4b0e39780006980"}, {"problem": 118, "code": "(fn mp [f s]\n  (lazy-seq\n   (when (seq s)\n     (cons (f (first s)) (mp f (rest s))))))", "user": "5460f59ce4b01be26fd74695"}, {"problem": 118, "code": "(fn mapz [fun coll]\n  (let [step (fn [f c]\n               (when-let [s (seq c)]\n                 (cons (f (first s)) (mapz f (rest s)))))]\n    (lazy-seq (step fun coll))))", "user": "515ebde3e4b01e5d11ccd0a8"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (nil? (first s))\n    s\n  (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 118, "code": "(fn map* [f [head & tail :as s]]\n  (if (empty? s)\n    []\n    (cons (f head) (lazy-seq (map* f tail)))))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 118, "code": "(fn m [f xs]\n  (if (empty? xs)\n    xs\n\t(cons (f (first xs)) (lazy-seq (m f (rest xs))))))", "user": "5136f659e4b04059df19f2fd"}, {"problem": 118, "code": "(fn my-map [f l] (lazy-seq (if (nil? (first l)) [] (cons (f (first l)) (my-map f (rest l))))))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 118, "code": "(fn m [f [h & r]] \n  (cond \n   (nil? h) [] \n   :else (cons (f h) (lazy-seq (m f r)))))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 118, "code": "(fn mymap [f args] \n  (if (empty? args)\n    []\n\t(cons (f (first args)) (lazy-seq (mymap f (rest args))))))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 118, "code": "(fn my-map [f coll]\n   (if (seq coll)\n     (cons (f (first coll)) \n           (lazy-seq (my-map f (rest coll))))\n     '()))", "user": "544e9022e4b0e3978000698b"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (lazy-seq (when-let [s (seq coll)]\n              (cons (f (first s)) (my-map f (rest s))))))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 118, "code": "(fn mmap [f s]\n  (when (seq s)\n    (cons (f (first s)) (lazy-seq (mmap f (rest s))))))", "user": "5245aea8e4b08ba239308123"}, {"problem": 118, "code": "(fn remap [f l]\n  ((fn remap-seq [f l]\n     (if (empty? l)\n       '()\n       (cons (f (first l)) (lazy-seq (remap-seq f (rest l))))))\n   f l))", "user": "54651faee4b01be26fd746d6"}, {"problem": 118, "code": "(fn mymap [f seqz]\n  (if (empty? seqz) seqz\n      (cons (f (first seqz)) (lazy-seq (mymap f (rest seqz))))))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if-not (nil? s)\n    (cons (f (first s)) (lazy-seq (my-map f (next s))))))", "user": "511688d5e4b0b3e208dba05a"}, {"problem": 118, "code": "(fn _map [f xs]\n  (if (empty? xs) ()\n    (cons (f (first xs)) (lazy-seq (_map f (rest xs))))))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (when (first coll)\n    (cons (f (first coll))\n          (lazy-seq (my-map f\n                            (rest coll))))))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (seq coll)\n  \t(lazy-seq\n    \t(cons (f (first coll)) (my-map f (rest coll))))\n    []))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 118, "code": "(fn my-map [f c]\n    (if (empty? c) '()\n        (lazy-cat [(f (first c))] (my-map f (rest c)))))", "user": "51672d15e4b079759a74a5e7"}, {"problem": 118, "code": "(fn my-map [f x]\n  (lazy-seq\n   (if (empty? x) \n     nil\n   \t(cons (f (first x)) (my-map f (rest x))))))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 118, "code": "(fn map2 [f coll]\n  (lazy-seq\n    (when-not (empty? coll)\n      (cons (f (first coll)) (map2 f (rest coll))))))\n\n; Implementation that's not lazy\n;(fn [f coll]\n;  (loop [f f\n;         coll coll\n;         acc []]\n;    (if (empty? coll)\n;      acc\n;      (recur f (rest coll) (conj acc (f (first coll)))))))", "user": "53a074a4e4b0ca733b9744af"}, {"problem": 118, "code": "(fn mymap\n  [f s]\n  (if-not\n    (empty? s)\n    (lazy-seq\n      (cons\n        (f (first s))\n        (mymap f (rest s))))))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 118, "code": "(fn r [f s] (when s (lazy-seq (cons (f (first s)) (r f (next s))))))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 118, "code": "(fn my-map [f xs]\n   (if (empty? xs) '()\n   (cons (f (first xs)) (lazy-cat (my-map f (rest xs))))))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 118, "code": "(fn r [f a] (when-let [s (seq a)] (lazy-seq (cons (f (first s)) (r f (rest s))))))", "user": "4fe9de74e4b0547ebccb2475"}, {"problem": 118, "code": "(fn r [f s]\n  (if (empty? s) '() (cons (f (first s)) (lazy-seq (r f (rest s))))))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (lazy-seq \n\t  (when-let [s (seq coll)] \n    \t(cons (f (first s))\n\t          (my-map f (rest s))))))", "user": "526e1bd0e4b03e8d9a4a730b"}, {"problem": 118, "code": "(fn my-map [f x]\n  (lazy-seq\n  \t(if (empty? x)\n      []\n      (cons (f (first x)) (my-map f (rest x))) ) ))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 118, "code": "(letfn [(mymap [f xs]\n               (cons (f (first xs))\n                     (if (empty? (rest xs))\n                                 '()\n                                 (lazy-seq (mymap f (rest xs))))))]\n  mymap)", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 118, "code": "(fn foo-map [f coll] (lazy-seq (when-let [s (seq coll)]\n                                       (lazy-seq (cons (f (first s))\n                                                       (foo-map f (rest s)))))))", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 118, "code": "(fn my-map [f s]\n  (lazy-seq\n   (when (seq s)\n     (cons (f (first s)) (my-map f (rest s))))))", "user": "4e6a2f93535d8ccf87e9feaa"}, {"problem": 118, "code": "(fn mp [f coll]\n  (if (empty? coll)\n    []\n    (lazy-seq (concat [(f (first coll))] (mp f (rest coll)))\n    )))", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 118, "code": "(fn my-map [f xs]\n   (lazy-seq\n    (when-let [s (seq xs)]\n      (cons (f (first s)) (my-map f (rest s))))))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 118, "code": "(fn map1 [op l]\n  (lazy-seq\n   (if (empty? l)\n     []\n     (cons (op (first l))\n           (map1 op (rest l))))))", "user": "54848141e4b0e286459a119e"}, {"problem": 118, "code": "(fn m [f s] (if (seq s) (lazy-seq (cons (f (first s)) (m f (rest s))))))", "user": "54577fefe4b01be26fd7460d"}, {"problem": 118, "code": "(fn m \n  [f [x & y]] \n  (if (nil? x) \n    [] \n    (cons (f x) (lazy-seq (m f y)))))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 118, "code": "(fn self \n  [f [x & res]]\n  (lazy-seq (cons (f x) (if res (self f res)))))", "user": "54540453e4b0e397800069d2"}, {"problem": 118, "code": "(fn rec [f s]\n  (if (not (empty? s))\n    (lazy-seq\n      (cons (f (first s)) (rec f (rest s))))))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 118, "code": "(fn my-map [func [front & rest]]\n  (if (nil? front) \n    nil\n    (cons (func front) \n          (lazy-seq (my-map func rest)))))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (my-map f (rest coll))))))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 118, "code": "(fn mp [f s]\n\t(when (seq s) (cons (f (first s)) (lazy-seq (mp f (rest s)))))\n)", "user": "5472d919e4b094393f72dd7b"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n   (lazy-seq (cons (f x) (when (seq xs) (my-map f xs)))))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 118, "code": "(fn f [g s] \n  (when (seq s)\n      (cons  \n        (g (first s)) \n        (lazy-seq (f g (rest s))))))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 118, "code": "(fn [f l]\n  (letfn\t[(map2 [f l]\n        \t(if \n            (empty? l)\n          \tnil\n          \t(cons (f (first l)) (lazy-seq (map2 f (rest l))))\n       \t \t)\n         )]\n        (map2 f l)\n  )\n)", "user": "4fc8f671e4b0ee37620e1840"}, {"problem": 118, "code": "(fn mapper [f s] \n  (if (false? (empty? s))\n    (lazy-seq (cons (f (first s)) (mapper f (rest s))))))", "user": "5463c452e4b01be26fd746c4"}, {"problem": 118, "code": "(fn mp [f s]\n   (when (seq s)\n     (lazy-seq\n       (cons (f (first s)) (mp f (rest s))))))", "user": "52e0e646e4b09f7907dd1416"}, {"problem": 118, "code": "(fn mym [func sq] (if (empty? sq)\n                \tsq\n                \t(cons (func (first sq)) (lazy-seq (mym func (rest sq))))))", "user": "548f5086e4b0e286459a1239"}, {"problem": 118, "code": "(fn my-map [f,x]        \n       (if (empty? x) []\n         (lazy-seq (cons (f (first x)) (my-map f (rest x))))\n        ))", "user": "52d66ca0e4b09f7907dd135c"}, {"problem": 118, "code": "(fn mmap [f s]\n  (lazy-cat [(f (first s))] (when (second s) (mmap f (rest s)))))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 118, "code": "(fn n [f c]\n  (if (nil? c)\n    (list)\n    (lazy-seq (cons (f (first c)) (n f (next c))))))", "user": "54814dbee4b0e286459a116b"}, {"problem": 118, "code": "(fn m [f d]\n  (when-let [[h & t] (seq d)]\n    (lazy-cat [(f h)] (m f t))))", "user": "4e8a460e535d65386fec2109"}, {"problem": 118, "code": "(fn mm [f c] (lazy-seq (when-let [s (seq c)] (cons (f (first s)) (mm f (rest s))) )))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 118, "code": "(fn p118-map [f coll]\n  (when (seq coll)\n    (lazy-seq\n      (cons (f (first coll)) (p118-map f (rest coll))))))", "user": "543b12cce4b032a45b86932a"}, {"problem": 118, "code": "(fn g [f s] (if-let [x (first s)] (cons (f x) (lazy-seq (g f (next s))))))", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n   (if (seq coll)\n     (cons (f (first coll)) (my-map f (rest coll)))\n     nil)))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 118, "code": "(fn m [f s]\n    (if (next s)\n      (cons (f (first s)) (lazy-seq (m f (next s))))\n      [(f (first s))]))", "user": "4f9b3532e4b0dcca54ed6d13"}, {"problem": 118, "code": "(fn my-map [f s]\n\t(if (empty? s)\n\t\t[]\n\t\t(cons (f (first s)) \n\t\t\t(lazy-seq (my-map f (rest s))))))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 118, "code": "(fn my-map [f coll] (lazy-seq (when-let [[x & more] coll] (cons (f x) (my-map f more)))))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 118, "code": "(fn m [f [a & xs]]\n  (lazy-seq \n   (cons (f a) \n         (if (seq xs) \n           (m f xs) \n           (list)))))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 118, "code": "(fn my-map [f c] (if-not (seq c) (lazy-seq) (lazy-seq (cons (f (first c)) (my-map f (rest c))))))", "user": "512b07f7e4b078b06821febb"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll) '()\n      (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))\n      ))", "user": "4e7e241a535db169f9c79705"}, {"problem": 118, "code": "(fn b [f xs]\n  (lazy-seq\n   (when-let [s (seq xs)]\n     (cons (f (first s))\n           (b f (rest s))))))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 118, "code": "(fn m [f x]\n  (if (seq x)\n    (cons (f (first x)) (lazy-seq (m f (rest x))))\n    '()))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 118, "code": "(fn my-map [f s] (if (false? (empty? s)) (lazy-seq  (cons (f (first s)) (my-map f (rest s))))))", "user": "546a70bae4b00cfc9eacc159"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll)\n    []\n    (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 118, "code": "(fn tr [f, sq]\n      (lazy-seq\n        (if (empty? sq)\n          '()\n          (cons\n            (f (first sq))\n            (tr f (rest sq))\n            )\n          )\n        )\n      )", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 118, "code": "(fn go [f xs] (lazy-seq (when-let [[x & xs] xs] (cons (f x) (go f xs)))))", "user": "50ef4e2be4b0a78662fa2653"}, {"problem": 118, "code": "(fn my-map [f [a & b]] (lazy-seq (cons (f a) (if b (my-map f b)))))", "user": "5462caf5e4b01be26fd746b7"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (not (empty? s))\n    (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 118, "code": "(fn my-map[f coll]\n  (when-let [s (seq coll)]\n    (lazy-seq\n      (cons (f (first s)) (lazy-seq (my-map f (rest s))))\n    )\n  )\n)", "user": "545537c1e4b0e397800069dd"}, {"problem": 118, "code": "(fn r [f xs]\n  (lazy-seq\n    (if (empty? xs)\n    '()\n    (cons (f (first xs)) (r f (rest xs))))))", "user": "517e12e3e4b0fcc7c5d37d3c"}, {"problem": 118, "code": "(fn mp [f coll]\n      (if-not (empty? coll)\n        (cons (f  (first coll)) (lazy-seq (mp f (rest coll))))))", "user": "51f81925e4b09be9c177e526"}, {"problem": 118, "code": "(fn my-map [f l]\n  (if (empty? l) '()\n    (cons (f (first l)) (lazy-seq (my-map f (rest l))))))", "user": "547884d7e4b0c51c1f4d72bd"}, {"problem": 118, "code": "(fn m [f xs] \n  (lazy-seq\n    (when-let [xs (seq xs)]\n      (cons (f (first xs))\n            (m f (rest xs))))))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 118, "code": "(fn map- [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (map- f (rest s))))))", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 118, "code": "(fn [f s]\n   (letfn [(cm [r]\n             (lazy-seq\n              (when-not (empty? r)\n                (cons (f (first r)) (cm (rest r))))))]\n     (cm s)))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 118, "code": "(fn imap [f [head & tails]] \n  (lazy-seq \n   (cons (f head) (when (not (empty? tails)) (imap f tails)))))", "user": "5461873de4b01be26fd746a3"}, {"problem": 118, "code": "(fn my-map [f xs]\n                 (if (empty? xs)\n                   nil\n                   (lazy-seq (cons (f (first xs)) (my-map f (rest xs))))))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 118, "code": "(fn mymap [f coll]\n(if (false? (empty? coll))\n(lazy-seq\n(cons (f (first coll)) (mymap f (rest coll))))))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 118, "code": "(fn m [f c] (if (empty? c) nil (lazy-seq (cons (f (first c)) (m f (rest c))))))", "user": "5367bc60e4b0243289761e81"}, {"problem": 118, "code": "(fn func [f col] (lazy-seq (when-let [s (seq col)] (cons (f (first s)) (func f (rest s)) ))))", "user": "53347274e4b0656e627bfd6b"}, {"problem": 118, "code": "(fn r [f xs]\n  (lazy-seq\n    (if (empty? xs)\n    '()\n    (cons (f (first xs)) (r f (rest xs))))))", "user": "54696e4ce4b00cfc9eacc147"}, {"problem": 118, "code": "(fn mmap [f [h & t :as coll]]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f h) (mmap f t)))))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 118, "code": "(fn map- [f l]\n  (lazy-seq\n  (when-let [s (seq l)]\n    (cons (f (first s)) (map- f (rest l)))\n    )\n   )\n  )", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 118, "code": "(fn m [f xs]\n  (lazy-seq\n  \t(when-let [[x & s] (seq xs)]\n    \t(cons (f x)\t(m f s)))))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq (when (seq coll)\n              (cons (f (first coll))\n                  (my-map f (rest coll))))))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 118, "code": "(fn [f s] (rest (reductions (fn [a b] (f b)) (first s) s)))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 118, "code": "(fn m [f c] (lazy-seq (if (seq c)\n                        (cons (f (first c))\n                              (m f (rest c))))))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 118, "code": "(fn r [f xs]\n  (lazy-seq\n    (when (seq xs)\n    (cons (f (first xs)) (r f (rest xs))))))", "user": "5325cef5e4b09d4e7a9b54e7"}, {"problem": 118, "code": "(fn map2 [f xs]\n  (when (seq xs)\n    (cons (f (first xs)) (lazy-seq (map2 f (rest xs))))))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 118, "code": "(fn mp [f s]\n(lazy-seq\n(when (seq s)\n(cons (f (first s)) (mp f (rest s))))))", "user": "5462c5abe4b01be26fd746b5"}, {"problem": 118, "code": "(fn new-map [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (new-map f (rest s))))))", "user": "5317d78ee4b08068f379ed63"}, {"problem": 118, "code": "(fn my-map [fun [x & xs]]\n  (lazy-seq (cons (fun x) (when (seq xs) (my-map fun xs)))))", "user": "5456e4e7e4b080a794c2c883"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "54630cdae4b01be26fd746bb"}, {"problem": 118, "code": "(fn mp [f coll]\n  (if (not (empty? coll)) \n    (lazy-seq (cons (f (first coll)) (mp f (rest coll))))))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 118, "code": "(fn m \n  [f c] \n  (if-not (empty? c) \n          (cons (f (first c)) (lazy-seq (m f (rest c))))))", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 118, "code": "(fn m [f xs]\n  (let [[h & rs] xs]  \n    (if (empty? rs) [(f h)] (lazy-seq (cons (f h) (m f rs))))))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 118, "code": "(fn [f a] (take (count (take 1000001 a)) (iterate f (f (first a)))))", "user": "52c08c59e4b07a9af5792351"}, {"problem": 118, "code": "(fn map' [f in-seq]\n  (if (empty? in-seq)\n    ()\n  \t(cons (f (first in-seq)) (lazy-seq (map' f (rest in-seq))))))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (if x\n    (lazy-seq (cons (f x) (my-map f xs)))))", "user": "5383668ee4b06839e8705edd"}, {"problem": 118, "code": "(fn new-map [f s]\n  (if-not (empty? s)\n  \t(cons (f (first s))\n        (lazy-seq (new-map f (rest s))))))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 118, "code": "(fn map1 [f [x & s]] (if (seq s) (cons (f x) (lazy-seq (map1 f s))) (list (f x))))", "user": "510fe537e4b04c71fce993dd"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (seq coll)\n    (lazy-seq\n     (cons (f (first coll)) (my-map f (rest coll))))\n    '()))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n    (when-let [coll (seq coll)]\n      (cons (f (first coll)) (my-map f (rest coll))))))", "user": "5484143de4b0e286459a1197"}, {"problem": 118, "code": "(fn my-map[f coll]\n  (if (empty? coll)\n    coll\n    (cons (f (first coll))\n          (lazy-seq\n           (my-map f (rest coll))))))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 118, "code": "(fn my-map [func a-seq]\n  (if (empty? a-seq)\n    '()\n    (cons (func (first a-seq)) (lazy-seq (my-map func (rest a-seq))))))", "user": "5235493ee4b05e80434a5064"}, {"problem": 118, "code": "(fn remap [x fx]\n  (lazy-seq\n    (if (empty? fx)\n    '()\n    (cons (x (first fx)) (remap x (rest fx))))))", "user": "54653e3be4b01be26fd746da"}, {"problem": 118, "code": "(fn __ [f s]\n  (if (empty? s) '()\n  \t(cons (f (first s))\n          (lazy-seq (__ f (rest s))))))", "user": "54c271b9e4b045293a27f602"}, {"problem": 118, "code": "(fn m [f s]\n  (when (seq s)\n    (lazy-seq\n     (cons (f (first s))\n           (m f (rest s))))))", "user": "4ed45563535d10e5ff6f52c9"}, {"problem": 118, "code": "(fn mp [f s]\n  (if (empty? s)\n    ()\n    (cons (f (first s))\n          (lazy-seq (mp f (rest s))))))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 118, "code": "(fn remap [f coll] \n  (if ((complement empty?) coll)\n    (lazy-seq (cons (f (first coll)) (remap f (rest coll))))))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 118, "code": "(fn my-map [f b] \n  (if-not (empty? b) \n    (cons (f (first b)) (lazy-seq (my-map f (next b))))))", "user": "546a6e9fe4b00cfc9eacc157"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (my-map f (rest s))))))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 118, "code": "(fn my-map\n  [f s]\n  (lazy-seq\n    (if-not (seq s)\n      s\n      (cons (f (first s)) (lazy-seq (my-map f (rest s)))))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 118, "code": "(fn my-map [f [value & coll]]\n  (lazy-seq (cons (f value) (if coll (my-map f coll)))))", "user": "546692aee4b01be26fd746e7"}, {"problem": 118, "code": "(fn xmap [f coll]\n               (lazy-seq \n                 (when-let [s (seq coll)]\n                   (cons (f (first s)) (xmap f (rest s))))))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq \n    (if (empty? coll) ()\n    (cons (f (first coll)) \n          (my-map f (rest coll))))))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 118, "code": "(fn my-map [f s] (if (empty? s) s (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 118, "code": "(fn map' [f s] (lazy-seq (when-let [x (first s)] (cons (f x) (map' f (rest s))))))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 118, "code": ";; This would be easier with Haskell's [x:xs] pattern matching\n(fn m [f s]\n  (if (empty? s)\n      '()\n      (cons (f (first s)) (lazy-seq (m f (rest s))))))", "user": "536b9d8ae4b0243289761ebe"}, {"problem": 118, "code": "(fn [f coll]\n  (letfn [(mapper [f [x & xs]]\n                  (if (nil? x) []\n        \t      \t  (cons (f x) (lazy-seq (mapper f xs)))))]\n    (mapper f coll)))", "user": "52950ab6e4b02ebb4ef7501a"}, {"problem": 118, "code": "(fn m [f l]\n  (if (empty? l)\n    []\n    (lazy-cat\n      [(f (first l))]\n      (m f (rest l)))))", "user": "519e70d5e4b0acf32bc6a42c"}, {"problem": 118, "code": "(fn m [f xs] (if (empty? xs) xs (lazy-seq (cons (f (first xs)) (m f (rest xs))))))", "user": "54c641f8e4b045293a27f628"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq \n   (when-let [c (first coll)]\n     (cons (f c) (my-map f (rest coll))))))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 118, "code": "(fn foo [f xs] (lazy-seq (if-let [x (first xs)]\n                 (cons (f x) (foo f (rest xs)))\n                 nil)))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 118, "code": "(fn my-map [f [h & t]]\n  (when h\n    (cons (f h) (lazy-seq (my-map f t)))))", "user": "51c611c4e4b03a28d42333bf"}, {"problem": 118, "code": "(fn mop [f sq]\n  (if (empty? sq) [] \n  \t(cons (f (first sq))   \n          (lazy-seq (mop f (rest sq))\n))))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 118, "code": "(fn map' [f xs] (if (not (empty? xs)) (lazy-seq (cons (f (first xs)) (map' f (rest xs))))))", "user": "54d03026e4b018d918be98de"}, {"problem": 118, "code": "(fn mappy [f [a & b]]\n  (if b\n    (cons (f a) (lazy-seq (mappy f b)))\n    (cons (f a) [])))", "user": "520cb8c4e4b0b022ef140c9a"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    []\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))\n  )\n)", "user": "50e3cf55e4b01912b3285c45"}, {"problem": 118, "code": "(fn mp [f s]\n  (when (seq s)\n    (cons (f (first s)) (lazy-seq (mp f (next s))))))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 118, "code": "(fn mself [f s]\n  (if (empty? s) \n    '()\n    (cons (f (first s) ) (lazy-seq (mself f (rest s))) )))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 118, "code": "(fn f [func coll]\n   (if (empty? coll)\n       []\n       (cons (func (first coll)) (lazy-seq (f func (rest coll))))))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 118, "code": "(fn my-map [f c]\n  (when (first c)\n    (cons (f (first c)) (lazy-seq (my-map f (rest c))))))", "user": "535774c2e4b04ce2eb3ed27c"}, {"problem": 118, "code": "(fn f [x y] (when-let [s (seq y)](cons (x  (first s)) (lazy-seq (f x (next s)))) ))", "user": "51e1c176e4b06a68e693eafb"}, {"problem": 118, "code": "(fn mm [f [x & xs]] (lazy-seq (cons (f x) (if xs (mm f xs)))))", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 118, "code": "(fn q[f [w & r]]\n    (if w\n    (cons (f w) (lazy-seq (q f r)))\n    )\n    )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll))\n                    (my-map f (rest coll))))))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 118, "code": "(fn mymap [f col]\n  (if (empty? col)\n    col\n    (cons (f (first col))\n          (lazy-seq (mymap f (rest col))))))", "user": "53664e3be4b0243289761e74"}, {"problem": 118, "code": "(fn r [f x]\n            (lazy-seq\n              (if (empty? x)\n                []\n                (cons (f (first x)) (r f (rest x))))))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 118, "code": "(fn map3 [f s]\n  (if (first s)\n    (cons (f (first s))\n        (lazy-seq (map3 f (rest s))))\n    nil))", "user": "5215661be4b02f6d8ea676c7"}, {"problem": 118, "code": "(fn g [f s]\n  (when-let [v (first s)]\n    (cons\n     (f v)\n     (lazy-seq (g f (rest s))))))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 118, "code": "(fn f[m s] (if (empty? s) s (cons (m (first s)) (lazy-seq (f m (rest s))))))", "user": "51eca2ace4b069f463c22cd0"}, {"problem": 118, "code": "(fn mp [f s]\n  (lazy-seq\n    (when-let [xs (seq s)]\n      (cons (f (first xs)) (mp f (rest xs))))))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 118, "code": "(fn m [f c] (when (seq c) (cons (f (first c)) (lazy-seq (m f (rest c))))))", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (when-not (empty? coll)\n    (lazy-seq (cons (f (first coll)) (mymap f (rest coll))))))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 118, "code": "(fn mymap [f c]\n  [f c] \n  (if (empty? c)\n    []\n    (lazy-seq \n      (cons (f (first c)) (mymap f (rest c))))))", "user": "4f7207d3e4b07046d9f4f019"}, {"problem": 118, "code": "(fn my-map [f seq-1]\n  (cond\n   (empty? seq-1) '()       \n   :else (lazy-seq (cons (f (first seq-1))\n               (my-map f (rest seq-1))))))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 118, "code": "(fn mm5 [f s]\n  (if (empty? s) s\n      (cons (f (first s)) (lazy-seq (mm5 f (rest s))))))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 118, "code": "(fn mymap [func args]\n   (if (empty? args)\n     []\n     (cons (func (first args)) (lazy-seq (mymap func (rest args))))))", "user": "525cc912e4b0cb4875a45d48"}, {"problem": 118, "code": "(fn here [f coll]\n    (lazy-seq \n     (if-not (seq coll)\n       nil\n       (cons (f (first coll)) (lazy-seq (here f (next coll)))))))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 118, "code": "(fn _map [f [a & r]] \r\n  (if a (cons (f a) (lazy-seq (_map f r))) nil))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 118, "code": "(fn x ([f [a & b]](cons (f a) (if (seq b) (lazy-seq (x f b))))))", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 118, "code": "(fn my-map\n  [f xs]\n  (if (empty? xs)\n    []\n    (cons (f (first xs)) (lazy-seq (my-map f (rest xs))))))", "user": "54e0e911e4b024c67c0cf7bc"}, {"problem": 118, "code": "(fn my-map [f coll]\n   (lazy-seq\n     (if (empty? coll)\n       '()\n       (cons (f (first coll)) (my-map f (rest coll))))))", "user": "510a3cd4e4b06956752d35ad"}, {"problem": 118, "code": "(fn fmap\n  [f col]\n  (if (seq col)\n    (lazy-seq (cons (f (first col)) (fmap f (drop 1 col))))\n    []))", "user": "54db8ddae4b024c67c0cf767"}, {"problem": 118, "code": "(fn mymap [f c]\n  (if (empty? c)\n    []\n    (cons (f (first c)) (lazy-seq (mymap f (rest c))))))", "user": "5110b8bae4b04c71fce993f4"}, {"problem": 118, "code": "(fn my-map [f [x & more]]\n  (if (nil? more)\n    [(f x)]\n    (lazy-cat [(f x)] (my-map f more))))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 118, "code": "(fn [f xs] (reduce #(conj % (f %2)) [] (take 1000005 xs)))", "user": "4e68c465535d8ccf87e9fe8a"}, {"problem": 118, "code": "(fn my-map [f values]\n  (let [tail (rest values)]\n    (cons (f (first values)) (if (seq tail) (lazy-seq (my-map f tail))))))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 118, "code": "(fn map-2 [f s]\n    (if (empty? s)\n      nil\n      (cons (f (first s)) (lazy-seq (map-2 f (rest s))))))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 118, "code": "(fn m [f [h & r]] (lazy-seq (cons (f h) (if r (m f r)))))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 118, "code": "(fn this [f lst]\n  (if (empty? lst)\n    '()\n    (lazy-seq (cons (f (first lst)) (this f (rest lst))))))", "user": "516f06dce4b06aac486e5b39"}, {"problem": 118, "code": "(fn r [f xs]\n  (lazy-seq\n    (if (empty? xs)\n    '()\n    (cons (f (first xs)) (r f (rest xs))))))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 118, "code": "(letfn [(m [f s] (if (seq s) (lazy-seq (cons (f (first s)) (m f (rest s))))))] m)", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 118, "code": "(fn m [f [h & r]]\n    (lazy-seq (cons (f h)\n                    (if r (m f r)))))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 118, "code": "(fn mp [f [x & xs]] (lazy-seq (if (nil? x) nil (cons (f x) (mp f xs)))))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 118, "code": "(fn mappy [f c]\n  (if-let [x (first c)]\n    (lazy-seq (cons (f x) (mappy f (rest c))))))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 118, "code": "(fn m [f c] (if (empty? c) () (lazy-seq (cons (f (first c)) (m f (rest c))))))", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 118, "code": "(fn m [f xs]\n  (if (empty? xs) xs\n    (cons (f (first xs)) (lazy-seq (m f (rest xs))))))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 118, "code": "(fn my-map [f args]\n  (if (empty? args) \n    nil\n    (lazy-seq  \n     (cons (f (first args)) \n           (my-map f (rest args))))))", "user": "50e90813e4b033b0e80d11e7"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 118, "code": "(fn a ([f s] (let[[o & r]s] (if (nil? r) (lazy-seq (cons (f o) nil)) (lazy-seq (cons (f o) (a f r) ))))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 118, "code": "(fn mp [f [x & xs]]\n  (cons (f x) \n        (if xs \n          (lazy-seq (mp f xs)))))", "user": "54f9920ee4b01ecee9d8883f"}, {"problem": 118, "code": "(fn m [f coll]\n  (lazy-seq\n   (cons (f (first coll))\n         (let [r (rest coll)]\n           (when-not (empty? r)\n             (m f r))))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 118, "code": "(fn m [f [h & r]]\n  (lazy-seq\n    (cons (f h) (if r (m f r)))))", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 118, "code": "(fn [f c]\n  (rest (reductions #(f %2) 0 c)))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 118, "code": "(fn mp [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (f (first s)) (mp f (rest s))))))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 118, "code": "(fn mp [f [h & t]] \n  (lazy-seq (cons (f h) (when t (mp f t)))))", "user": "5458a729e4b01be26fd74622"}, {"problem": 118, "code": "(fn myMap\n  [pred x]\n  (if (empty? x)\n    []\n    (cons (pred (first x))\n          (lazy-seq (myMap pred (rest x))))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 118, "code": "(fn m [f s]\n    (when (seq s)\n      (cons (f (first s)) (lazy-seq (m f (rest s))))))", "user": "54508859e4b0e397800069a3"}, {"problem": 118, "code": "(fn map2\n  [f c] \n  (when-let [s (seq c)]\n            (lazy-seq (cons (f (first s)) (map2 f (rest s))))))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s) \n    nil\n    (cons (f (first s)) (lazy-seq (my-map f (rest s)) ))))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if-not (empty? coll)\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "54b31445e4b09f271ff37d35"}, {"problem": 118, "code": "(fn mmap [f col]\n  (when (false? (empty? col))\n    (lazy-seq\n     (cons (f (first col)) (mmap f (rest col))))))", "user": "5154fa3fe4b0179c5115f4e6"}, {"problem": 118, "code": "(fn m [f [x & xs]]\n  (if x\n    (cons (f x) (lazy-seq (m f xs)))\n    []))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 118, "code": "(fn mapp [f s]\n  (when (seq s)\n    (lazy-seq (cons (f (first s)) (mapp f (rest s))))))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 118, "code": "(fn new-map1\n  [f1 seq1]\n  (lazy-seq\n   (if (empty? seq1)\n  (list)\n  (cons (f1 (first seq1))\n        (new-map1 f1 (rest seq1)))))\n)", "user": "54d4ec31e4b0a52adc2e2007"}, {"problem": 118, "code": "(fn map- [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (map- f (rest s))))))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 118, "code": "(fn m [f [h & r]]\n   (lazy-seq (cons (f h) (if r (m f r)))))", "user": "52cee992e4b07d0d72b27395"}, {"problem": 118, "code": "(fn mymap [f l]\n  (if  (empty? l) nil\n    (lazy-seq  (cons  (f  (first l))  (mymap f  (rest l))))))", "user": "550d54f6e4b06e50f9beb15c"}, {"problem": 118, "code": "(fn rek [f x]\n  (if (empty? x)\n    []\n    (cons (f (first x)) (lazy-seq (rek f (rest x))))))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 118, "code": "(fn [f col](drop 1 (reductions #(f %2) 1 col)))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 118, "code": "(fn mMap [f l] (if (empty? l) nil (lazy-seq (cons (f (first l)) (mMap f (rest l))))))", "user": "550e0373e4b06e50f9beb162"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s) '()\n      (lazy-cat (list (f (first s))) (my-map f (rest s)))))", "user": "51b76227e4b0d906fcd71d35"}, {"problem": 118, "code": "(fn pseudo-map  [f coll]\n    (if (empty? coll)\n      coll\n      (lazy-seq (cons (f (first coll)) (pseudo-map f (rest coll))))))", "user": "54485727e4b032a45b8693c6"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s)\n    ()\n    (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "user": "54b050cee4b09f271ff37d13"}, {"problem": 118, "code": "(fn m [f c]\n   (lazy-seq\n    (if (empty? c)\n      '()\n      (cons (f (first c)) (m f (rest c))))))", "user": "52c45ac8e4b0c2d177d620d9"}, {"problem": 118, "code": "(fn mapf [f col]\n  (lazy-seq \n    (let [c (seq col)]\n      (when c\n        (cons (f (first c)) (mapf f (rest c)))))))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 118, "code": "(fn a [f col]\n  (if (empty? col)\n    []\n    (lazy-seq\n     (cons\n     (f (first col))\n     (a f (rest col)))\n     )))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 118, "code": "(fn my-map [f x] (when (seq x) (cons (f (first x)) (lazy-seq  (my-map f (next x))) )))", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 118, "code": "(fn yy [f col]\n  (when (seq col)\n    (cons (f (first col))\n          (lazy-seq (yy f (next col))))))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 118, "code": "#(letfn [(m [f a]\n  (lazy-seq\n     (when-let [s (seq a)]\n     (cons (f (first s)) (m f (rest s))))))]\n   (m %1 %2))", "user": "544e8369e4b0e39780006987"}, {"problem": 118, "code": "(fn mmap [f c] (when (not-empty c) (cons (f (first c)) (lazy-seq (mmap f (rest c))))))", "user": "551535cee4b055c2f668d4df"}, {"problem": 118, "code": "(fn mapeo [f coll]\n  (if (empty? coll)\n    coll\n    (cons \n     (f (first coll))\n     (lazy-seq(mapeo f (rest coll))))\n    ))", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 118, "code": "(fn m [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (m f (rest s))))))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 118, "code": "(fn m [funct seqs]\n   (if (empty? seqs)\n     seqs\n     (cons (funct (first seqs)) (lazy-seq (m funct (next seqs))))))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 118, "code": "(fn lazy [f s] (if (not-empty s) (cons (f (first s)) (lazy-seq (lazy f (rest s))))))", "user": "5511fd7ee4b06e50f9beb19e"}, {"problem": 118, "code": "(fn mymap [f [s & coll]]\n  (if-not coll\n    (list (f s))\n    (cons (f s) (lazy-seq (mymap f coll)))))", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 118, "code": "(fn pam [f s] \n  (if (seq s)\n  \t(lazy-seq (cons (f (first s)) (pam f (rest s))))))", "user": "53213810e4b09d4e7a9b54b0"}, {"problem": 118, "code": "(fn m [f c] \n  (when-let [s (seq c)] \n    (lazy-seq (cons (f (first s)) (m f (rest s))))))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s)\n    (lazy-seq s)\n    (cons (f (first s))\n          (lazy-seq (mymap f (rest s))))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 118, "code": "(fn my-map\n  [f col] (lazy-seq (if (empty? col) '() (cons (f (first col)) (my-map f (rest col)))))\n  )", "user": "52457931e4b08ba239308107"}, {"problem": 118, "code": "(fn p118- [f xs]\n    (if (empty? xs)\n      ()\n      (cons (f (first xs)) (lazy-seq (p118- f (rest xs))))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 118, "code": "(fn __ [f c]\n  (lazy-seq\n   (when-let [s (seq c)]\n     (cons (f (first s)) (__ f (rest s))))))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 118, "code": "(fn mmap [f [head & queue]]\n  (if (= queue nil)\n    (list (f head))\n    (lazy-seq (cons (f head) (mmap f queue)))))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 118, "code": "(fn mymap [f s] \n  (lazy-seq (if (empty? s) \n              '() \n              (cons (f (first s)) (mymap f (rest s))))))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 118, "code": "(fn ! [f [h & t]] (cons (f h) (when t (lazy-seq (! f t)))))", "user": "53908e6be4b0b51d73faae9a"}, {"problem": 118, "code": "(fn map* [f coll]\n  (lazy-seq\n    (when (seq coll)\n      (cons (f (first coll))\n            (map* f (rest coll))))))", "user": "552356fae4b0882d96d091af"}, {"problem": 118, "code": "(fn fake-map\n  [f coll]\n  (if (seq coll)\n    (lazy-seq\n     (cons (f (first coll)) (fake-map f (rest coll))))\n    nil))", "user": "540459bfe4b0addc1aec6656"}, {"problem": 118, "code": "(fn [f v] (rest (reductions #(f %2) [] v)))", "user": "551c66dae4b07993ea3788de"}, {"problem": 118, "code": "(fn [f xs]\n  (letfn [(f* [f xs]\n  \t(lazy-seq (when (seq xs)\n    \t          (cons (f (first xs))\n                        (f* f (next xs))))))]\n    (f* f xs)))", "user": "5519a6dde4b00ace28fe6e2f"}, {"problem": 118, "code": "(fn map2[f xs]\n          (if (empty? xs)\n            '()\n            \n          (cons (f (first xs) ) (lazy-seq (map2 f (rest xs)))))\n          )", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 118, "code": "(fn f2 [fn1 v]\n    (if (not(empty? v))\n    (cons (fn1 (first v)) (lazy-seq (f2 fn1 (rest v))))))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 118, "code": "(fn mymap\n  [f coll]\n  (when-not (empty? coll)\n    (lazy-seq (cons (f (first coll)) (mymap f (rest coll))))))", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 118, "code": "(fn map1 [f x] (if (empty? x) x (cons (f (first x)) (lazy-seq (map1 f (rest x))))))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 118, "code": "(fn me [f l] (if (seq l) (lazy-seq (cons (f (first l)) (me f (rest l))))))", "user": "55274467e4b0ffed3738f92b"}, {"problem": 118, "code": "(fn m [f xs]\n  (if (empty? xs)\n    nil\n    (cons (f (first xs))\n          (lazy-seq (m f (rest xs))))))", "user": "512e31e9e4b0b740abc59823"}, {"problem": 118, "code": "(fn remap [f coll]\n  (if-not (empty? coll)\n    (lazy-seq\n      (cons (f (first coll)) (remap f (rest coll))))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 118, "code": "(fn mmap [f xs] (when (not (empty? xs)) (lazy-seq (cons (f (first xs)) (mmap f (rest xs))))))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 118, "code": "(fn jmap [f s] \n  (if (empty? s) \n    '() \n    (cons \n     (f (first s)) \n     (lazy-seq (jmap f (rest s)))\n     )\n    )\n  )", "user": "5528ecd1e4b0ffed3738f942"}, {"problem": 118, "code": "(fn map- [f s]\n  (if (empty? s) s\n    (cons (f (first s)) (lazy-seq (map- f (rest s))))))", "user": "55253217e4b0882d96d091ce"}, {"problem": 118, "code": "(fn map* [f coll] \n   (reductions \n    #(f %2) \n    (f (first coll)) (rest coll)))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 118, "code": "(fn my-map [f [head & tail]]\n  (if-not tail\n  \t(list (f head))\n  \t(cons (f head) (lazy-seq (my-map f tail)))))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 118, "code": "(fn clj-118 \n  [f coll]\n  (lazy-seq \n   (when-let [s (seq coll)]\n     (cons (f (first s)) (clj-118 f (rest s))))))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 118, "code": "(fn derp [f coll]\n  (when (seq coll)\n  \t(cons (f (first coll)) (lazy-seq (derp f (rest coll))))))", "user": "552c1a0fe4b076ab5578f7d7"}, {"problem": 118, "code": "(fn g [f coll] (if (seq coll) (cons (f (first coll)) (lazy-seq (g f (rest coll))))))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 118, "code": "(fn _map [f xs]\n  (if (seq xs)\n    (cons (f (first xs)) (lazy-seq (_map f (rest xs))))))", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 118, "code": "(fn mp [f coll]\n  (lazy-seq\n  \t(when-let [s (seq coll)]      \n   \t\t(cons (f (first s)) (mp f (rest s))))))", "user": "5530b827e4b076ab5578f818"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (lazy-seq\n    (when-let [s (seq xs)]\n      (cons (f (first s)) (my-map f (rest s))))))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 118, "code": "(fn map_\n  [f x]\n   (lazy-seq\n    (when-let [s (seq x)]\n      (cons (f (first s)) (map_ f (rest s))))))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 118, "code": "#(rest (reductions (fn [a _] (% a)) (first %2) %2))", "user": "5152bc4ee4b001f44f99bfef"}, {"problem": 118, "code": "(fn newmap\n  [f xs]\n  (lazy-seq\n    (if (empty? xs)\n      []\n      (cons (f (first xs)) (newmap f (rest xs))))))", "user": "55355397e4b09218d5f44fae"}, {"problem": 118, "code": "(fn my-map [f xargs] (if (empty? xargs) '() (cons (f (first xargs)) (lazy-seq (my-map f (rest xargs))))))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 118, "code": "(fn nm [f c]\n    (when (not-empty c)\n    (cons (f (first c)) (lazy-seq (nm f (rest c)))  )))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 118, "code": "#(rest (reductions (fn [x _] (% x)) (first %2) %2))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 118, "code": "(fn g [f xs] (lazy-seq (if (empty? xs) [] (concat (vector (f (first xs))) (g f (rest xs))))))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 118, "code": "(fn [f xs] (drop 1 (reductions #(f %2) 0 xs)))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 118, "code": "(fn mp [f xs]\n  (if (empty? xs) xs\n    (cons (f (first xs)) (lazy-seq (mp f (rest xs))))))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 118, "code": "(fn m [f xs]\n    (if (empty? xs)\n      []\n      (lazy-cat [(f (first xs))] (m f (rest xs)))))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 118, "code": "(fn m [op [a & d]]\n   (lazy-seq (cons (op a) (if d (m op d)))))", "user": "51bd255ce4b0df1216cefd94"}, {"problem": 118, "code": "(fn mymap [f xs] (if (empty? xs) '() (lazy-seq (cons (f (first xs)) (mymap f (rest xs))))))", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 118, "code": "(fn f [g [h & r]] (and h (cons (g h) (lazy-seq (f g r)))))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 118, "code": "(fn x[f a] (if (first a)  (  cons (f (first a)) (lazy-seq(x f (rest a))))(list)))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 118, "code": "; Oh man, two unable to do's in a row:-( \n\n; My solution works on the first two test cases, but not the last due to time out.  It seems that reduce is not the way to go.\n; (fn [f coll] (lazy-seq (reduce (fn [acc x] (conj acc (f x)) ) [] coll)))\n\n\n; Here's a solution inspired by stackoverflow\n; It reminded me of the 'first rest' approach.\n  (fn foo [f coll]\n    (lazy-seq\n      (if (empty? coll)\n        '()\n        (cons (f (first coll)) (foo f (rest coll))))))", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 118, "code": "(fn m [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (f (first s))\n                    (m f (rest s))))))", "user": "55495318e4b0a04f79299566"}, {"problem": 118, "code": "(fn r [f [v & vr]] (cons (f v) (when-not (empty? vr) (lazy-seq (r f vr)))))", "user": "5499e23de4b03163384f4706"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when-let [xs (seq s)]\n    (cons (f (first xs))\n          (lazy-seq (my-map f (next xs))))))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 118, "code": "(fn m [f xs]\n  (lazy-seq (if (empty? xs)\n              '()\n              (cons (f (first xs))\n                    (m f (rest xs))))))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 118, "code": "(fn p\n  [f [x & xs]]\n  (if x\n  \t(lazy-seq (cons (f x) (p f xs)))\n    []))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 118, "code": "(fn m \n   [f xs]\n   (if (empty? xs)\n    nil\n    (lazy-seq\n      (cons  \n        (f (first xs)) (m f (rest xs))))))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll)\n    []\n    (cons (f\n         (first coll))\n        (lazy-seq\n         (my-map f\n                 (rest coll))))))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 118, "code": "(fn mapl [f s]\n  (if (empty? s)\n    '()\n    (lazy-seq (cons (f (first s)) (mapl f (rest s))))))", "user": "5550b5a0e4b00713264bd9ad"}, {"problem": 118, "code": "(fn mmap [f xs]\n  (if (empty? xs)\n    nil\n    (cons (f (first xs)) (lazy-seq (mmap f (rest xs))))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 118, "code": "(fn mymap [f [x & xs]]\n  (when x\n    (lazy-seq (cons (f x) (mymap f xs)))))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 118, "code": "(fn x [f s]\n  (if (seq s)\n    (cons (f (first s)) (lazy-seq (x f (rest s))))))", "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"problem": 118, "code": "(fn m [f s]\n  (if (empty? s)\n    []\n    (cons (f (first s)) (lazy-seq (m f (rest s))))))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 118, "code": "(fn foo [f s]\n  (if (not (empty? s))\n    (lazy-seq (cons (f (first s)) (foo f (rest s))))))", "user": "554edb85e4b00713264bd99a"}, {"problem": 118, "code": "(fn mymap [f xs]\n  (lazy-seq\n   (when-let [s (seq xs)]\n     (cons (f (first xs)) (mymap f (rest xs))))))", "user": "555521a5e4b0deb715856e12"}, {"problem": 118, "code": "(fn m [f coll](if (empty? coll) [] (lazy-seq (cons (f (first coll)) (m f (rest coll))))))", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 118, "code": "(fn mymap [fun col] (if (empty? col) [] (lazy-seq (cons (fun (first col)) (mymap fun (rest col)) )) ))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 118, "code": "(fn my-fn [f s]\n  (if (not (empty? s))\n    (cons (f (first s))\n          (lazy-seq (my-fn f (rest s))))))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 118, "code": "(fn umap [f coll]\n  (if (empty? coll)\n    coll\n    (lazy-seq\n      (cons (f (first coll))\n            (umap f (rest coll))))))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 118, "code": "( fn m [f s] ( if (empty? s) [] (lazy-cat (list (f (first s))) (m f (rest s)) ) ) )", "user": "5551b492e4b0deb715856ded"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (when (seq coll)\n    (cons (f (first coll))\n          (lazy-seq (my-map f\n                            (rest coll))))))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 118, "code": "(fn my-map [f [head & tail]]\n  (if (nil? head)\n    '()\n    (lazy-seq\n     (cons (f head) (my-map f tail)))))", "user": "4f16d3fd535d64f60314644e"}, {"problem": 118, "code": "(fn mp\n  ([f xs]\n   (lazy-seq\n    (when-let [s (seq xs)]\n      (cons (f (first s)) (mp f (rest s)))))))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 118, "code": "(fn [ff cc]\n  \"lazy fucking map\"\n  (letfn [(mm [f coll] (if (seq coll)\n                    (lazy-cat (list  (f (first coll))) (mm f (rest coll)))\n                    ()))]\n    (mm ff cc)))", "user": "516d227fe4b06f078fab252d"}, {"problem": 118, "code": "(fn m [f c]\n  (if (seq c)    \n    (lazy-seq     \n     (cons (f (first c)) (m f (rest c))))))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 118, "code": "(fn my-map [f [fi & r :as s]] \n  (lazy-seq (if (seq s) \n    (cons (f fi) (my-map f r)) \n    '())))", "user": "5005b57de4b0678c553fc46a"}, {"problem": 118, "code": "(fn my-map\n  [f [x & more :as coll]] {:pre [(ifn? f)]}\n  (if (seq coll)\n    (lazy-seq (cons (f x) (my-map f more)))\n    '()))", "user": "4fc6305de4b0ee37620e180b"}, {"problem": 118, "code": "(fn mapa [f xs]\n  (lazy-seq\n   (if (empty? xs) xs\n    (cons (f (first xs)) (mapa f (rest xs))))))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    []\n    (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "user": "5553b924e4b0deb715856e06"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    nil\n    (lazy-cat [(f (first s))] (my-map f (rest s)))))", "user": "4fdb881ee4b05e33b9224f5e"}, {"problem": 118, "code": "(fn mm [f c] (lazy-seq (when-let [s (seq c)] (cons (f (first c)) (mm f (rest c))))))", "user": "555ac933e4b0deb715856e49"}, {"problem": 118, "code": "(fn my-map \n  ([func coll] \n   (if (empty? coll)\n     (list)\n     (lazy-seq (cons (func (first coll)) (my-map func (rest coll)))))))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when (seq s)\n    (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 118, "code": "(fn mp [f s]\n  (when-let [x (first s)]\n    (cons (f x) (lazy-seq (mp f (rest s))))))", "user": "5013193ae4b0f26a0e3320ab"}, {"problem": 118, "code": "(fn mymap [f coll] (lazy-seq (when-let [s (seq coll)] (cons (f (first s)) (mymap f (rest s))))))", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll)\n    '()\n    (cons (f (first coll))\n          (lazy-seq (my-map f (rest coll))))))", "user": "55586905e4b0deb715856e2b"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when (seq s) \n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 118, "code": "(fn imap [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (imap f (rest s))))))", "user": "54c3747de4b045293a27f60e"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (lazy-seq (when (seq coll) (cons (f (first coll)) (mymap f (rest coll))))))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 118, "code": "(fn mmap [f s]\n  (if (empty? s)\n    []\n    (lazy-seq (cons (f (first s)) (mmap f (rest s))))))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 118, "code": "(fn my-map [f [h & r]] (lazy-seq (cons (f h) (if r (my-map f r)))))", "user": "554b8572e4b0a04f79299589"}, {"problem": 118, "code": "(fn recursive [f s]\n  (if (empty? s)\n    nil\n    (cons\n      (f (first s))\n      (lazy-seq (recursive f (rest s)))\n    )\n  )\n)", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 118, "code": "(fn mp [f xs]\n  (if (seq xs)\n    (lazy-seq (cons (f (first xs)) (mp f (rest xs))))\n    ))\n\n\n;(fn mp [f xs]\n;  (if (seq xs)\n;    (cons (f (first xs)) (lazy-seq (mp f (rest xs))))\n;    ))\n\n\n;(fn mp [f xs]\n;\t(if (not (empty? xs))\n;    \t(cons (f (first xs)) (lazy-seq (mp f (rest xs))))\n;        ))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 118, "code": "(fn myMap [func coll]\n  (lazy-seq\n   (if (seq coll)\n     (cons (func (first coll)) (myMap func (rest coll))))))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 118, "code": "(fn map* [f x]\n   (let [h (first x)\n         r (rest x)]\n     (if h\n       (cons (f h) (lazy-seq (map* f r))))))", "user": "530b8580e4b02e82168697cc"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (not (empty? coll))\n    (lazy-seq (cons (f (first coll)) (mymap f (rest coll))))))", "user": "52c5c1c8e4b0c2d177d620fc"}, {"problem": 118, "code": "(fn m [f s]\n  (if (empty? s)\n    []\n    (cons (f (first s)) (lazy-seq (m f (rest s))))))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 118, "code": "(fn foo [f xs] ( lazy-seq (if (empty? xs) [] (cons (f (first xs)) (foo f (rest xs))))))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 118, "code": "(fn __ [f coll]\n  (if-not (empty? coll)\n    (lazy-seq (cons (f (first coll)) (__ f (rest coll))))\n    (lazy-seq)))", "user": "55702081e4b09a3098a52529"}, {"problem": 118, "code": "(fn my-map [f s] (if (empty? s) '() (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "user": "5280a1ece4b0757a1b171407"}, {"problem": 118, "code": "(fn [f seq]\n    (let [innerf (fn inf [seq]\n                   (let [[first & rest] seq\n                         tfirst (f first)]\n                     (if (empty? rest)\n                       (list tfirst) \n                       (cons tfirst (lazy-seq (inf rest))))))]\n      (lazy-seq (innerf seq))))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (seq coll)\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "557232a1e4b09a3098a52543"}, {"problem": 118, "code": "(fn m[f xs] \n  (when (first xs) \n    (cons (f (first xs)) (lazy-seq (m f (rest xs)))) ))", "user": "524f3e6de4b0541d1855b805"}, {"problem": 118, "code": "(fn mymap [f l]\n   (if (empty? l)\n     []\n     (cons (f (first l)) (lazy-seq (mymap f (rest l))))\n     )\n   )", "user": "54857657e4b0e286459a11ac"}, {"problem": 118, "code": "(fn mapx [f s]\n   (if (empty? s)\n     '()\n     (cons (f (first s))\n           (lazy-seq\n            (mapx f (rest s))))))", "user": "53065acbe4b02e8216869792"}, {"problem": 118, "code": "(fn a [f s]\n  (cons\n   (f (first s))\n   (if (empty? (rest s))\n     '()\n     (lazy-seq (a f (rest s))))))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 118, "code": "(fn my-map [f [head & tail]]\r\n  (if (nil? head)\r\n    '()\r\n    (cons (f head) (lazy-seq (my-map f tail)))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 118, "code": "(fn mp [f [ff & r]] (when ff (cons (f ff) (lazy-seq (mp f r)))))", "user": "556a3243e4b09a3098a524de"}, {"problem": 118, "code": "(fn z [f c] (if (empty? c) () (cons (f (first c)) (lazy-seq (z f (rest c))))))", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 118, "code": "(fn m [f [h & r]]\n    (lazy-seq\n     (cons\n      (f h)\n      (if r (m f r)))))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 118, "code": "(fn [f coll]\n  (letfn [(Map [f coll]                                                                                       \n            (let [[a & r] coll]\n              (if (nil? a )                                                                                   \n                []\n                (lazy-seq (cons (f (first coll))                                                              \n                                (Map f (rest coll)))))))]\n    (Map f coll)))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 118, "code": "(fn _map [f coll] \n  (if (empty? coll)\n    (lazy-seq)\n    (lazy-seq (cons (f (first coll)) (_map f (rest coll))))))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 118, "code": "(fn m [f [h & r]] \n  (lazy-seq (if h (cons (f h) (m f r))\n              '())))", "user": "545ddac3e4b01be26fd74676"}, {"problem": 118, "code": "(fn map-l [f l]\n  (let [fe (first l)]\n    (if (nil? fe)\n      []\n      (cons (f fe) (lazy-seq (map-l f (rest l)))))))", "user": "503777a4e4b0af0658af77ac"}, {"problem": 118, "code": "(fn my-map [f s]\n    (if (empty? s)\n      nil\n      (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 118, "code": "(fn mymap [f l]\n  (if (not (empty? l))\n  \t(cons (f (first l)) (lazy-seq (mymap f (rest l))))\n    nil))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 118, "code": "(fn my-map\n  [f xs]\n  (lazy-seq (if (seq xs) (cons (f (first xs)) (my-map f (next xs))))))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 118, "code": "(fn my-map\n  [f xs]\n  (if (not-empty xs) (lazy-seq (cons (f (first xs)) (my-map f (rest xs))))))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 118, "code": "(fn my-map [f s]\n  (lazy-seq \n    (when-let [s (seq s)]\n      (cons (f (first s)) (my-map f (rest s))))))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 118, "code": "(fn myfn* [f coll]\n  (if (empty? coll)\n    ()\n  (cons (f (first coll)) (lazy-seq (myfn* f (rest coll))))))", "user": "52ba447ee4b07a9af57922ce"}, {"problem": 118, "code": "(fn m [f coll]\n  (if (empty? coll)\n      nil\n      (cons (f (first coll))\n            (lazy-seq (m f (next coll))))))", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 118, "code": "( fn my-map [f liste]\n   (if (empty? liste) \n     ()\n     (cons (f (first liste)) (lazy-seq (my-map f (rest liste))))\n    )\n     \n \n)", "user": "556f2009e4b09a3098a52519"}, {"problem": 118, "code": "(fn mymap [f xs]\n  (if (empty? xs) []\n  ( lazy-seq ( cons (f (first xs)) (mymap f (rest xs))       )   )))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5589e88ae4b0277789237610"}, {"problem": 118, "code": "(fn mp [f sq]\n  (cons (f (first sq)) (if (empty? (rest sq)) '() (lazy-seq (mp f (rest sq))))))", "user": "558bb38fe4b0277789237631"}, {"problem": 118, "code": "(fn m [f c]                                                                                                                     \n    (if (empty? c)                                                                                                                                      \n        '()                                                                                                                     \n        (cons (f (first c)) (lazy-seq (m f (rest c))))))", "user": "558b50d5e4b027778923762b"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5589a735e4b059ccff29b206"}, {"problem": 118, "code": "(fn m [f, s]\n  (when-let [v (first s)]\n   (lazy-seq\n    (cons (f v) (m f (rest s))))))", "user": "5590e55de4b0277789237676"}, {"problem": 118, "code": "(fn mymap\n  [myfn myseq]\n  \n  ( if (empty? myseq)\n    \tnil\n    \t(cons (myfn (first myseq)) (lazy-seq (mymap myfn (rest myseq)))\n  \n  )))", "user": "55897fe2e4b059ccff29b205"}, {"problem": 118, "code": "(fn m [f s]\n   (when-not (empty? s)\n    (cons (f (first s)) (lazy-seq (m f (rest s))))))", "user": "55895eade4b059ccff29b202"}, {"problem": 118, "code": "(fn m [f [a & r]]\n  (if (nil? a)\n    []\n    (cons (f a) (lazy-seq (m f r))))\n  )", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 118, "code": "(fn map1 [f s]\n  (if (empty? s)\n    ()\n    (lazy-seq (cons (f (first s)) (map1 f (rest s))))))", "user": "558f4fbae4b0277789237661"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (if (empty? xs) nil\n    (cons (f (first xs)) (lazy-seq (my-map f (rest xs))))))", "user": "5590ebb1e4b0277789237677"}, {"problem": 118, "code": "(fn mymap [f args]\n          (if (empty? args)\n            nil\n            (cons (f (first args)) (lazy-seq (mymap f (rest args))))))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 118, "code": "(fn m [f [e & r]] (lazy-seq (when e (cons (f e) (m f r))) ))", "user": "523630eee4b05f3be1c7c8e8"}, {"problem": 118, "code": "(letfn [(lazy-map [fun col]\n  (when-not (empty? col)\n    (lazy-seq (cons (fun (first col))\n                    (lazy-map fun (rest col))))))]\n  lazy-map)", "user": "52bdd135e4b07a9af579230a"}, {"problem": 118, "code": "(fn mm [f c](cons (f (first c)) (if (next c) (lazy-seq (mm f (rest c))) [])))", "user": "555c6344e4b0b056612e224c"}, {"problem": 118, "code": "(fn mymap\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (mymap f (rest s)))))))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 118, "code": "(fn m [f s]\n  (lazy-seq\n   (if (empty? s)\n     '()\n     (cons (f (first s))\n           (m f (rest s))))))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 118, "code": "(fn l [f [a & m]]\n  (lazy-seq\n    (cons (f a) (if m (l f m)))))", "user": "5585f088e4b001b0851d7513"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 118, "code": "(fn m [f [s & R]]\n  (if s\n    (cons (f s)\n          (lazy-seq (m f R)))))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 118, "code": "(fn mp [f sq]\n  (if (empty? sq)\n    sq\n    (cons (f (first sq))\n          (lazy-seq (mp f (rest sq))))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 118, "code": "(fn m [f xs]\n  (cond (empty? xs) xs\n        true (cons (f (first xs)) (lazy-seq (m f (rest xs))))))", "user": "5583888ae4b05c286339e117"}, {"problem": 118, "code": "(fn m\n  [f [x & r]]\n  (lazy-seq\n   (when x\n     (cons (f x) (m f r)))))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 118, "code": "(fn mapp [f coll]\n  (when (seq coll)\n    (lazy-cat [(f (first coll))] (mapp f (rest coll)))))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (= nil (seq coll)) []\n                         (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 118, "code": "(fn my-map [f col]\n  (let [x (first col)]\n    (if x\n      (lazy-seq (cons (f x) (my-map f (rest col))))\n      (lazy-seq))))", "user": "52f53589e4b05e3f0be25f2c"}, {"problem": 118, "code": "(fn m [f [h & r]] (cons (f h) (lazy-seq (if r (m f r)))))\n\n\n;(fn m [f [h & r]] (lazy-seq (cons (f h) (if r (m f r)))))\n\n;(fn [f s] (for [v s] (f v)))\n\n\n;(fn m ([f s] (lazy-seq (m f s []))) ([f s r] (if s (lazy-seq (m f (next s) (conj r (f (first s))))) r)))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 118, "code": "(fn m [f c]\n  (when (not-empty c)\n    (cons (f (first c)) (lazy-seq (m f (rest c))))))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 118, "code": "(fn m [f [h & r]] (lazy-seq (cons (f h) (if r (m f r)))))", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 118, "code": "(fn map-v2 [f [x & xmore]]\n  (lazy-seq \n    (if xmore\n      (cons (f x) (map-v2 f xmore))\n      (list (f x)))))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 118, "code": "(fn r [f [h & t]] (when h (lazy-cat [(f h)] (r f t))))", "user": "503e91d4e4b06c4e0e1fa269"}, {"problem": 118, "code": "(fn m [f coll]\n  (if (empty? coll)\n    (lazy-seq)\n  \t(lazy-seq (cons (f (first coll)) (m f (rest coll))))))", "user": "5576f299e4b05c286339e077"}, {"problem": 118, "code": "(fn mmap [f s] (if (seq s) (lazy-seq (cons (f (first s)) (mmap f (rest s))))))", "user": "55306f9de4b076ab5578f814"}, {"problem": 118, "code": "(fn m [f s]\n  (if (seq s)\n    (cons (f (first s))\n          (lazy-seq (m f (rest s))))\n    nil))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 118, "code": "(fn re-impl-map [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (re-impl-map f (rest s)))\n     )\n   )\n  )", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 118, "code": "(fn [f coll] (rest (reductions #(f %2) nil coll)))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 118, "code": "(fn ! [f coll] (lazy-seq (when-let [s (seq coll)] (cons (f (first s))\n                                           (! f (rest s))))))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (seq s)\n    (lazy-seq\n      (cons (f (first s)) (mymap f (rest s))))\n    '()))", "user": "553527ede4b09218d5f44fab"}, {"problem": 118, "code": "(fn mp [f x] (if (empty? x) '() (lazy-cat [(f (first x))] (mp f (rest x)))))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 118, "code": "(fn my-map [f col]\n  (if (seq col)\n    (lazy-seq\n      (cons (f (first col))\n            (my-map f (rest col))))))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 118, "code": "(fn mymap [op coll]\n  (if (empty? coll)\n    coll\n  \t(lazy-seq (cons (op (first coll)) (mymap op (rest coll))))))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 118, "code": "(fn mp [f [x & xs]] \n  (if x \n    (lazy-seq \n      (cons (f x) (mp f xs)))))", "user": "5236cd89e4b0e010857b4e45"}, {"problem": 118, "code": "(fn mymap \n  [f xs]\n   (if (empty? xs) xs\n       (cons (f (first xs)) (lazy-seq (mymap f (rest xs))))))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 118, "code": "(fn map' [f s]\n  (lazy-seq\n   (when-not (empty? s)\n     (cons (f (first s)) (map' f (rest s))))))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    nil\n    (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 118, "code": "(fn m [f [h & r]]\n    (lazy-seq\n     (cons\n      (f h)\n      (if r (m f r)))))", "user": "543823f1e4b032a45b869311"}, {"problem": 118, "code": "(fn myMap [f [x & y]] (lazy-seq\n                          (if (empty? y) [(f x)] (cons (f x) (myMap f y)))))", "user": "5576e78de4b05c286339e075"}, {"problem": 118, "code": "(fn map12 [f c] (when-let [s (seq c)] (cons (f (first s)) (lazy-seq (map12 f (rest s)))\n )))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 118, "code": "(fn my-map [f s]\n  (lazy-seq\n    (if-let [[x & xs] s]\n      (cons (f x)(my-map f xs)))))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 118, "code": "(fn mmap [func coll]\n  (lazy-seq\n    (when-let [head (first coll)]\n      (cons (func head) (mmap func (rest coll)) ))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 118, "code": "(fn p118 [fcn coll]\n  (lazy-seq\n   (if-not (empty? coll)\n    (cons (fcn (first coll)) (p118 fcn (rest coll)))\n    )\n  ))", "user": "5400e918e4b0de5c41848619"}, {"problem": 118, "code": "(fn dumb-map\n  [f [x & xs]]\n  (if (coll? xs)\n    (cons (f x) (lazy-seq (dumb-map f xs)))\n    (list (f x))))", "user": "50ec409ce4b04edc33777045"}, {"problem": 118, "code": "(fn map1 [f coll]\n  (let [head (first coll)]\n    (if head\n       (cons (f head) (lazy-seq (map1 f (rest coll)))))))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 118, "code": "(fn func [f [x & xs :as coll]] \n(if (empty? coll)\n'()\n(lazy-seq (cons (f x) (func f xs)))))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 118, "code": "(fn my-map\n  [f s]\n  (if (empty? s)\n    nil\n    (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 118, "code": "(fn mapfn [f coll] (lazy-seq (cons \n                              (f (first coll)) \n                              (if \n                                (not-empty (rest coll))\n                             \t(mapfn f (rest coll))))))", "user": "55b587aae4b01b9910ae298a"}, {"problem": 118, "code": "(fn ! [f x] \n  (if (seq x) \n    (cons (f (first x)) (lazy-seq (! f (next x))))))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 118, "code": "(fn map-elem [f coll]\n    (if (empty? coll)\n      '()\n      (lazy-seq (cons (f (first coll)) (map-elem f (rest coll))))\n      ))", "user": "5245e320e4b09dbe66b56177"}, {"problem": 118, "code": "(fn m [f coll]\n  (lazy-seq (when-let [s (seq coll)]\n              (cons (f (first s)) (m f (rest s))))))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 118, "code": "(fn my-map [f s]\n    (if (empty? s)\n      nil\n      (lazy-seq (cons (f (first s)) (my-map f (rest s)))))\n    )", "user": "54a627bce4b09f271ff37c83"}, {"problem": 118, "code": "#(letfn\n   [(mapit [sequ]\n           (if (seq sequ)\n             (cons (%1 (first sequ)) (lazy-seq (mapit (rest sequ))))\n             nil))]\n   (mapit %2))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 118, "code": "(fn q [f v] \n    (if (seq v)\n        (cons (f (first v)) (lazy-seq (q f (rest v))))\n        nil))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 118, "code": "(fn [f coll]\n    (letfn [\n            (mymap [f coll]\n              (lazy-seq \n                (let [s (seq coll)]\n                  (when s \n                    (cons (f (first s)) \n                          (mymap f (rest s)))))))\n            ]\n      (mymap f coll)))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? (rest s))\n    [(f (first s))]\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 118, "code": "(fn my-map [f lst]\n  (if (false? (empty? lst))\n        (lazy-seq\n          (cons (f (first lst)) (my-map f (rest lst))))))", "user": "4f7d91e6e4b06e829148e1c3"}, {"problem": 118, "code": "(fn f [g coll] (if (empty? coll) [] (lazy-cat [(g (first coll))] (f g (rest coll))) ))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 118, "code": "(fn mymap [f [x & xs]]\n  (cons (f x) (lazy-seq (when xs (mymap f xs)))))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 118, "code": "(fn m [f s]\n  (if (empty? s)\n    '()\n    (cons (f (first s)) (lazy-seq (m f (rest s))))))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 118, "code": "(fn map2 [f coll] (lazy-seq (if (empty? coll) coll (cons (f (first coll)) (map2 f (rest coll))))))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 118, "code": "(fn -map [f [x & xs]]\n  (if x\n    (cons (f x)\n      (lazy-seq (-map f xs)))\n    ()))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (when-not (empty? xs)\n    (lazy-seq (cons (f (first xs))\n                    (my-map f (rest xs))))))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 118, "code": "(fn fun [f coll]\n  (when (seq coll)\n    (lazy-seq\n     (cons (f (first coll)) (fun f (next coll)))))\n  )", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 118, "code": "(fn g [f [x & y]]\n  (cons (f x)\n        (when y \n          (lazy-seq (g f y)))))", "user": "52cb6bb0e4b07d0d72b2734c"}, {"problem": 118, "code": "(fn map* [f s]\n  (if (empty? s)\n    '()\n    (cons (f (first s)) (lazy-seq (map* f (rest s))))\n  ))", "user": "54965534e4b0b312c081ff65"}, {"problem": 118, "code": "(fn lazy-map [f xs]\n  (lazy-seq\n   (if (seq xs)\n       (cons (f (first xs)) (lazy-map f (rest xs))))))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 118, "code": "(fn my-map [f [fst & rst :as coll]]\n  (if (seq coll)\n    (cons (f fst) (lazy-seq (my-map f rst)))))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 118, "code": "(fn my-map [f coll]\n   (if (empty? coll)\n     ()\n     (lazy-seq\n      (cons (f (first coll)) (my-map f (rest coll))))))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 118, "code": "(fn map-seq [f s]\n  (when (seq s)\n    (lazy-seq (cons (f (first s)) (map-seq f (rest s))))))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 118, "code": "(fn [f c] (letfn [(mp [[x & xs]] (if x (cons (f x) (lazy-seq (mp xs)))))]\n             (mp c)))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 118, "code": "(fn map-e\n  [f x]\n  (if (empty? x) '()\n    (lazy-seq (cons (f (first x)) (map-e f (rest x))))))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 118, "code": "(fn my-map [f lst]\n  (if (empty? lst) lst\n    (cons (f (first lst)) (lazy-seq (my-map f (rest lst))))))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 118, "code": "(fn mm [f [x & xs]]\n  (when x (cons (f x) (lazy-seq (mm f xs)))))\n;or being lazy by using reductions:)\n;(fn [f s] (reductions (fn [_ x] (f x)) (f (first s)) (rest s)))", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s)\n    s\n    (lazy-seq\n     (cons (f (first s))\n           (mymap f (rest s))))))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 118, "code": "(fn foo [f s] (lazy-seq (when (seq s) (cons (f (first s)) (foo f (next s))))))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 118, "code": "(fn x [func data]\n  (lazy-seq \n   \t(when-let [coll (seq data)]\n   \t\t\t(cons\n             (func (first coll))\n             (x func (rest coll))))))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 118, "code": "(fn my-map\n    ([f coll]\n     (lazy-seq\n      (when (seq coll)\n        (cons (f (first coll))\n              (my-map f (rest coll))))))\n    ([f coll & colls]\n     (let [colls (cons coll colls)]\n       (when (every? seq colls)\n         (lazy-seq (cons (apply f (my-map first colls))\n                         (apply my-map f (my-map rest colls))))))))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (cons (f x)\n    (if (nil? xs) '() (lazy-seq (my-map f xs)))))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 118, "code": "(fn m [f [current & remainder]]\n  (cons  (f current)\n    (if (not (empty? remainder))\n      (lazy-seq (m f remainder)))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 118, "code": "(fn my-map [f [head & tail :as s]]\n  (if (empty? s)\n    ()\n    (lazy-seq (cons (f head) (my-map f tail)))))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 118, "code": ";(fn my-map [f [h & t]] (if h (cons (f h) (my-map f t)) nil))\n; failed third test (stack overflow)\n\n;(fn my-map [f l] (loop [r [] [h & t] l] (if h (recur (conj r (f h)) t) r)))\n; failed third test (timed out)\n\n(fn my-map [f [h & t]] (if h (lazy-seq (cons (f h) (my-map f t))) nil))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 118, "code": "(fn my-map [f [x & xs :as coll]]\n  (if (seq coll)\n    (cons (f x) (lazy-seq (my-map f xs)))))", "user": "5512cd55e4b055c2f668d4ba"}, {"problem": 118, "code": "(fn map* [g s] \n  (when-let [[f & r] (seq s)] \n    (cons (g f) (lazy-seq (map* g r)))))", "user": "4e6a4950535d8ccf87e9febf"}, {"problem": 118, "code": "(fn re-map [f s]\n                 (if (seq s)\n                   (cons (f (first s)) (lazy-seq\n                                        (re-map f (rest s))))\n                   ()))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 118, "code": "(fn my-map [op xs]\n  (if (empty? xs)\n    (empty xs)\n    (cons (op (first xs)) (lazy-seq (my-map op (rest xs))))\n  )\n)", "user": "51f09f3de4b0274c496158d7"}, {"problem": 118, "code": "(fn m\n  [f c]\n  (if-let [x (first c)]\n  \t(cons (f x) (lazy-seq (m f (rest c))))\n  ))", "user": "55e1d34ae4b050e68259b421"}, {"problem": 118, "code": "(fn map2 [f [first & rest]]\n  (cons (f first)\n        (if-not (empty? rest)\n          (lazy-seq (map2 f rest)))))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 118, "code": "(fn g [f coll]\n  (if (empty? coll) \n    nil\n \t(cons (f (first coll)) (lazy-seq (g f (rest coll))))))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 118, "code": "(fn this [f xs] \n  (if (empty? xs)\n    nil\n    (cons (f (first xs)) (lazy-seq (this f (rest xs)))))\n)", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 118, "code": "(fn my-map [func coll]\n  (if (empty? coll)\n    []\n    (cons (func (first coll)) (lazy-seq (my-map func (rest coll))))))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 118, "code": "(fn do-map [f col]\n  ((fn step [xs]\n     (lazy-seq\n      (when-not (empty? xs)\n        (cons (f (first xs)) (step (rest xs))))))\n   col))", "user": "534056fce4b085b17e897dac"}, {"problem": 118, "code": "(fn m [f s]\n  (if (seq s)\n    (cons (f (first s)) (lazy-seq (m f (rest s))))))", "user": "55c652dde4b0e31453f649bd"}, {"problem": 118, "code": "(fn my-map\n   ([f coll] (my-map f (rest coll) (f (first coll))))\n   ([f coll ret]\n    (if (not-empty coll)\n      (lazy-seq (cons ret (my-map f (rest coll) (f (first coll)))))\n      (lazy-seq [ret]))))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 118, "code": "(fn mymap [f l]\n  (if (empty? l) \n    l\n    (lazy-seq (cons (f (first l)) (mymap f (rest l))))))", "user": "541df0b5e4b01498b1a71a86"}, {"problem": 118, "code": "(fn m [f x]\n    (if (empty? x)\n        '()\n        (cons (f (first x))\n              (lazy-seq (m f (rest x))))))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (my-map f (rest s))))))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 118, "code": "(fn f [g [e & v]] (lazy-seq (if e (cons (g e) (f g v)))))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 118, "code": "(fn my-func [f l]\n  (lazy-seq \n   (when-let [x (first l)]\n     (cons (f x) (my-func f (next l))))))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 118, "code": "(fn func\n  [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (func f (rest s))))))", "user": "55a62092e4b0acc240e31554"}, {"problem": 118, "code": "(fn m [f xs]\n  (when (seq xs)\n    (lazy-seq\n     (cons (f (first xs)) (m f (rest xs))))))", "user": "55ea0780e4b0121d4835fda7"}, {"problem": 118, "code": "(fn m [f [v & s]] (if (empty? s) [(f v)] (cons (f v) (lazy-seq (m f s)))))", "user": "54864662e4b0e286459a11b8"}, {"problem": 118, "code": "(fn m [f c] (lazy-seq (when (seq c) (cons (f (first c)) (m f (rest c))))))", "user": "51e3a549e4b0c611d6113e47"}, {"problem": 118, "code": "(fn map* [f xs] \n  (if-not (empty? xs)\n    (cons (f (first xs))(lazy-seq (map* f (rest xs))))))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 118, "code": "(fn re-impl-map \n  [f coll]\n  (if\n    (not-empty coll)\n    (lazy-seq (cons (f (first coll)) (re-impl-map f (rest coll))))))", "user": "5586f418e4b059ccff29b1de"}, {"problem": 118, "code": "(fn mapp [op s]\n  (when (not-empty s)\n    (cons (op (first s)) (lazy-seq (mapp op (rest s))))\n    )\n  )", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 118, "code": "(fn mapr\n  ([f [a & tail]]\n    (if (nil? a)\n      '()\n      (cons (f a) (lazy-seq (mapr f tail))))))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (if (empty? xs)\n    []\n  \t(lazy-seq (cons (f (first xs)) (my-map f (rest xs))))))", "user": "55f7ebeae4b06e875b46ceb7"}, {"problem": 118, "code": "(fn my-map \n  ([f s] (my-map f (first s) (rest s)))\n  ([f v s] (cons (f v) (lazy-seq (if (not (empty? s)) (my-map f s )) ))))", "user": "558bdcefe4b0277789237633"}, {"problem": 118, "code": "(fn shit [op f]\n    (if (empty? f)\n      []\n      (cons (op (first f)) (lazy-seq (shit op (rest f))))))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 118, "code": "(fn prob118 [f col]\n  ;; return a lazy seq with f applied to each item in col\n  (if (empty? col)\n    nil\n    (lazy-seq (cons (f (first col)) (prob118 f (rest col))))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 118, "code": "(fn ugly [x y]\n  (when (not (empty? y))\n    (lazy-cat\n      [(x (first y))]\n      (ugly x (rest y)))))", "user": "4e5d1912535d8a8b8723a2c9"}, {"problem": 118, "code": "(fn map1 [f coll]\n  (when-let [e (first coll)] (cons (f (first coll)) (lazy-seq (map1 f (rest coll)))))\n)", "user": "55f06183e4b06e875b46ce23"}, {"problem": 118, "code": "(fn mymap [thefn theseq] (if (empty? theseq) []\n(cons (apply thefn [(first theseq)]) (lazy-seq (mymap thefn (rest theseq))))))", "user": "55f75c6be4b06e875b46cea9"}, {"problem": 118, "code": "(fn mmap [f xs]\n  (lazy-seq (when-let [s (seq xs)]\n    (cons (f (first s)) (mmap f, (rest s))\n      )\n    )))", "user": "558ee1c9e4b0277789237659"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll))\n                    (my-map f (rest coll))))))", "user": "50e3e108e4b01912b3285c48"}, {"problem": 118, "code": "(fn me [f [x & xs]] \n   (cons (f x) (when (seq xs) (lazy-seq (me f xs)))))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 118, "code": "(fn mymap [f s] (lazy-seq (if (seq s) (cons (f (first s)) (mymap f (rest s))))))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 118, "code": "(fn mymap [f s]\n  (lazy-seq\n   (if (seq s)\n   \t(cons (f (first s)) (mymap f (rest s))))))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 118, "code": "(fn map*\n  [f cols]\n  (lazy-seq\n   (when-let [s (seq cols)]\n     (cons (f (first s)) (map* f (rest s))))))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 118, "code": "(fn my-map [f coll] \n (when-let [s (seq coll)] \n  (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 118, "code": "(fn map2 [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll)) (map2 f (next coll))))))", "user": "55ed1575e4b0121d4835fdd3"}, {"problem": 118, "code": "(fn m [f xs]\n  (if (seq xs)\n    (cons (f (first xs)) (lazy-seq (m f (rest xs))))\n    []))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 118, "code": "(fn my-map [func coll]\n  (when-not (empty? coll)\n    (lazy-seq\n     (cons (func (first coll)) (my-map func (rest coll)))\n     )\n    )\n  )", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 118, "code": "(fn -map [f xs]\n  (if-let [[x & more] xs]\n    (cons (f x) (lazy-seq (-map f more)))))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 118, "code": "; dzholev's solution:\n; 1. add an initial nil entry onto the front of the collection that we can skip when calling f => #(f %2)\n; 2. use rest to remove the initial nil entry when we're done\n(fn [f coll] (rest (reductions #(f %2) nil coll)))\n\n; perform all destructuring in fn args\n#_(fn mymap [f [x & xs]]\n  (lazy-seq\n    (when x (cons (f x) (mymap f xs)))))\n\n; first solution\n#_(fn mymap [f coll]\n  (lazy-seq\n    (when-let [[x & xs] (seq coll)]\n      (cons (f x) (mymap f xs)))))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 118, "code": "(fn [f coll]\n   (letfn [(my-map [x]\n                   (if (empty? x)\n                     x\n                     (cons (f (first x))\n                         (lazy-seq (my-map (rest x))))))]\n     (my-map coll)))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 118, "code": "(fn f [fun xs]\n  (if (empty? xs) '()\n  \t(lazy-seq (cons (fun (first xs)) (f fun (rest xs))))))", "user": "55e3e7a8e4b050e68259b44a"}, {"problem": 118, "code": "(fn mp[f x] (lazy-seq (when-let [s (seq x)] (cons (f (first s)) (mp f (rest s))))))", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 118, "code": "(fn mmmap [f c]\n   (lazy-seq\n     (if (seq c)\n       (cons (f (first c) ) (mmmap f (rest c)))\n       ())))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 118, "code": "(fn MAP [f s]\n  (when (seq s)\n    (cons (f (first s)) (lazy-seq (MAP f (rest s))))))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 118, "code": "(fn st [f s]\n  (if (empty? s)\n    []\n (lazy-seq \n  (cons (f (first s)) (st f (rest s))))))", "user": "56051095e4b08b23635d3162"}, {"problem": 118, "code": "(fn m[f s]\n  (cons (f (first s)) (lazy-seq (if (empty? (rest s)) nil (m f (rest s)))))\n)", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (if-not x\n    []\n    (lazy-seq (cons (f x) (my-map f xs)))))", "user": "55f2e47de4b06e875b46ce4d"}, {"problem": 118, "code": "(fn m [f s]\n  (if (seq s)\n    (cons (f (first s)) (lazy-seq (m f (rest s))))))", "user": "560a7b46e4b05f002753defb"}, {"problem": 118, "code": "(fn my-map [f [x & xs]] (if x (cons (f x) (lazy-seq (my-map f xs))) nil ))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 118, "code": "(fn [f xs]\n  (let [xs (take 1000001 xs)]\n  (for [x xs]\n    (f x))))", "user": "560ae540e4b05f002753df0d"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (when (seq coll)\n    (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))))", "user": "532ecd44e4b019098a6f8b49"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n    (when (seq coll)\n      (cons (f (first coll)) (my-map f (rest coll))))))", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 118, "code": "(fn [f coll] (reductions (fn [_ a] (f a)) (f (first coll)) (rest coll)))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "user": "55e2f502e4b050e68259b43c"}, {"problem": 118, "code": "(fn mmap [f coll]\n    (lazy-seq\n     (let [fst (first coll)]\n       (if (not (nil? fst))\n         (cons (f (first coll))\n               (mmap f (rest coll)))\n         (empty coll)))))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 118, "code": "(fn map* [fun [first & rest]]\n  (if first\n    (lazy-seq (cons (fun first) (map* fun rest)))))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 118, "code": "(fn go [f xs]\n  (if-let [[x & more] (seq xs)]\n    (cons (f x) (lazy-seq (go f more)))\n    '()))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 118, "code": "(fn mymap [f xs]\n    (loop [f f\n           xs xs]\n      (if-let [xs (seq xs)]\n        (lazy-seq (cons (f  (first xs)) (mymap f (next xs))))\n        nil)))", "user": "560e9a2de4b05f002753df52"}, {"problem": 118, "code": "(fn mmap\n  [f s]\n  (if-not (seq s)\n    '()\n    (cons (f (first s))\n          (lazy-seq (mmap f (rest s))))))", "user": "52606318e4b03e8d9a4a7036"}, {"problem": 118, "code": "(fn map-re\n  [func sq]\n  (if (empty? sq) []\n                (cons (func (first sq)) (lazy-seq (map-re func (rest sq))))))", "user": "5545477fe4b0a04f79299531"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (when (not-empty coll)\n    (cons (f (first coll)) (lazy-seq (mymap f (next coll))))))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 118, "code": "(fn mymap\n\t[f [h & r]] (lazy-seq (cons (f h) (if r (mymap f r)))))", "user": "56011393e4b04bb52996e178"}, {"problem": 118, "code": "(fn mp [f se]\n   (lazy-seq\n   (if (empty? se)\n     nil\n     (cons (f (first se)) (mp f (rest se))))))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 118, "code": "(fn m [f c]\n  (lazy-seq\n     (if (seq c)\n       (cons (f (first c)) (m f (next c))))))", "user": "4de77a0a535d08e6dec9fdfa"}, {"problem": 118, "code": "(fn mymap [f c]\n   (if (nil? (seq c))\n     nil\n     (cons (f (first c)) (lazy-seq (mymap f (rest c))))\n     )\n   )", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 118, "code": "(fn new-map [f s]\n  (if (empty? s) \n   \t\tnil\n    \t(lazy-seq (cons (f (first s)) (new-map f (rest s))))))", "user": "560ac488e4b05f002753df08"}, {"problem": 118, "code": "(fn my-map [f col]\n  (if (not-empty col)\n    (lazy-seq\n      (cons (f (first col))\n            (my-map f (rest col))))))", "user": "5559b443e4b0deb715856e3c"}, {"problem": 118, "code": "(fn map' [f x]\n   (if (empty? x)\n     []\n     (lazy-seq (cons (f (first x)) (map' f (rest x))))))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 118, "code": "(fn mp [f s]\n   (when s\n    (cons (f (first s))\n          (lazy-seq (mp f (next s))))))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 118, "code": "(fn mymap2 [f xs]\n  (lazy-seq\n    (when-let [[n & ns] (seq xs)]\n      (cons (f n) (mymap2 f ns)))))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 118, "code": "(fn mymap [f coll]\n    (let [[h & t] coll]\n      (if (empty? coll)\n        (list)\n        (cons (f  h) (lazy-seq (mymap f t))))\n      ))", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 118, "code": "(fn my-map [f coll]\n    (cons (f (first coll))\n          (if (not (empty? (rest coll)))\n            (lazy-seq\n             (my-map f (rest coll))))))", "user": "560039cce4b04bb52996e162"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "558053b1e4b05c286339e0e9"}, {"problem": 118, "code": "(fn map' [f s]\n  (if (empty? s)\n    nil\n    (cons (f (first s)) (lazy-seq (map' f (rest s))))))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 118, "code": "(fn map' [f s]\n  (when (not-empty s)\n    (cons (f (first s))\n          (lazy-seq (map' f (rest s))))))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 118, "code": "(fn mmap [f s]\n  (lazy-seq\n    (if (seq s)\n      (cons (f (first s))\n            (mmap f (rest s)))\n      s)))", "user": "516385cee4b055933a9ca02d"}, {"problem": 118, "code": "(fn m [f s] \n  (when s\n    (cons (f (first s)) (lazy-seq (m f (next s))))))", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 118, "code": "(fn catmap [f c]\n  (if (not-empty c)\n    (lazy-seq\n     (cons (f (first c))\n           (catmap f (next c))))))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 118, "code": "(fn m [f coll]\n  (when-let [s (seq coll)]\n    (lazy-seq (cons (f (first s))\n                    (m f (rest s))))))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 118, "code": "(fn myfun [fun lst]\n  \t(if (nil? (first lst))\n      nil\n              (cons (fun (first lst)) (lazy-seq (myfun fun (rest lst))))\n      \n      )\n)", "user": "561eb82fe4b064ca9f4b16c7"}, {"problem": 118, "code": "(fn my-map [f s]\n      (when (seq s)\n        (cons (f (first s))\n              (lazy-seq (my-map f (rest s))))))", "user": "5410499de4b01498b1a719a6"}, {"problem": 118, "code": "(fn _map [f l] \n  (if (empty? l) '() (lazy-seq (cons (f (first l)) (_map f (rest l)))))\n  )", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 118, "code": "(fn my-map [f, input-seq]\n  (if (empty? input-seq) []\n      (lazy-seq (cons (f (first input-seq))\n                      (my-map f (rest input-seq))))))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 118, "code": "(fn lazymap [f s] \n  (if (false? (empty? s)) \n    (cons (f (first s)) (lazy-seq (lazymap f (rest s))))))", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 118, "code": "(fn mp [f x]\n  (if (empty? x) nil\n    (lazy-seq\n     (cons (f (first x))\n           (mp f (rest x))))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 118, "code": "(fn [f1 coll1] \n     (letfn [(mymap [f coll] \n\t\t  (lazy-seq \n\t\t   (when-let [s (seq coll)] \n\t\t\t     (cons (f (first s)) (mymap f (rest s))))))] \n\t    (mymap f1 coll1)))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (seq s)\n    (lazy-seq\n     (cons (f (first s))\n           (my-map f (rest s))))))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 118, "code": "(fn mymap[f [first & rest]]\n  (lazy-seq (if (= nil first)\n    ()\n    (cons (f first) (mymap f rest)))))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 118, "code": "(fn map' [f [x & xs :as coll]]\n  (if (empty? coll)\n    coll\n    (cons (f x) (lazy-seq (map' f xs)))))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 118, "code": "(fn M [f S] (if-let [[s & rs] S] (cons (f s) (lazy-seq (M f rs)))))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 118, "code": "(fn m [f xs]\n  (if (seq xs)\n    (cons (f (first xs)) (lazy-seq (m f (rest xs))))\n    []))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n    (if (empty? xs)\n      (list (f x))\n      (lazy-cat (list (f x)) (my-map f xs))))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 118, "code": "(fn m [op [el & se]] (lazy-seq (cons (op el) (if-not (seq se) () (m op se)))))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 118, "code": "(fn map__ [f coll]\n   (lazy-seq (when-let [s (seq coll)] (cons (f (first s)) (map__ f (rest s))))))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 118, "code": "(fn mymap [f [x & xs]]\n  (if (nil? x) []\n    (cons (f x) (lazy-seq (mymap f xs)))))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 118, "code": "(fn m [f coll]\n  (if (nil? coll)\n    nil\n    (cons (f (first coll)) (lazy-seq (m f (next coll))))))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 118, "code": "(fn mymap [f xs]\n  (if (empty? xs) ()\n    (cons (f (first xs))\n          (lazy-seq \n            (mymap f (rest xs))))))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 118, "code": "(fn myMap [func coll]\n  (lazy-seq\n   (if (seq coll)\n     (cons (func (first coll)) (myMap func (rest coll))))))", "user": "561a1af6e4b053970a773b02"}, {"problem": 118, "code": "(fn mapper [f c]\n  (lazy-seq\n   (when (seq c)\n    (cons (f (first c)) (mapper f (rest c))))))", "user": "5614ebc5e4b05f002753dfbc"}, {"problem": 118, "code": "(fn o [f [x & xs]] \n  (if  x\n    (cons (f x) (lazy-seq (o f xs)))))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 118, "code": "(fn m [f c] (lazy-seq (when-let [s (seq c)] (cons (f (first s)) (m f (rest s))))))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 118, "code": "(fn my [func coll] \n  (if (empty? coll)\n    []\n    (cons (func (first coll)) (lazy-seq (my func (rest coll))))\n    )\n  )", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll)\n    (list)\n    (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))\n  )\n)", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq \n   (when (seq coll)\n    (cons (f (first coll)) (my-map f (next coll))))))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 118, "code": "(fn custom-map\n  [f coll]\n  (if (first coll)\n    (cons (f (first coll))\n          (lazy-seq (custom-map f (rest coll))))))", "user": "4fc524aae4b081705acca37e"}, {"problem": 118, "code": "(fn  z [f [s0 & s]] (if s0 (cons (f s0) (lazy-seq (z f s)))))", "user": "56102f50e4b05f002753df6b"}, {"problem": 118, "code": "(fn M [f s] (when-not (empty? s) (cons (f (first s)) (lazy-seq (M f (rest s))))))", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 118, "code": "#(letfn [(m [f ss] \n  (when-let [s (seq ss)] \n    (cons (f (first ss))  \n          (lazy-seq (m f (rest ss))))))] \n  (m %1 %2))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 118, "code": "(fn map* [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (map* f (rest s))))))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 118, "code": "(fn my-map\n  [f s]\n  (if (empty? s)\n    '()\n    (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll) ()\n    (cons (f (first coll))\n          (lazy-seq (my-map f (rest coll))))))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 118, "code": "(fn mmap [f s] \n  (lazy-seq \n  \t(if-let [x (first s)]\n      (cons (f x) (mmap f (rest s))))))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 118, "code": "(fn m [f xs]\n  (lazy-seq\n    (when-let [s (seq xs)] (cons (f (first s)) (m f (rest s))))))", "user": "53623eaee4b0243289761e4f"}, {"problem": 118, "code": "(fn mymap [f x]\n  (if (false? (empty? x))\n    (lazy-seq (cons (f (first x)) (mymap f (rest x))))))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))\n\n\n; This works for the first two test cases but times out on the third one...\n;(fn [func coll]\n;    (loop [out []\n;           f func\n;           x coll]\n;      (if (empty? x)\n;        out\n;      (recur (conj out (f (first x)))\n;                   f\n;             (drop 1 x)))))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 118, "code": "(fn map* [f coll]\n  (cond\n   (empty? coll) '()\n   :else (cons (f (first coll)) (lazy-seq (map* f (rest coll))))))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 118, "code": "(fn m [f [h & t]]\n  (if h\n    (lazy-seq (cons (f h) (m f t)))))", "user": "52bacfa8e4b07a9af57922d6"}, {"problem": 118, "code": "(fn my-map [fun xs]\n  (if (empty? xs)\n    []\n    (lazy-seq (cons (fun (first xs)) (my-map fun (rest xs))))))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 118, "code": "(fn r [f xs]\n  (lazy-seq\n    (if (empty? xs)\n    '()\n    (cons (f (first xs)) (r f (rest xs))))))", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 118, "code": "(fn my-map [f col]\n  (if (seq col)\n    (lazy-seq\n      (cons (f (first col))\n            (my-map f (rest col))))))", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 118, "code": "(fn laz [f coll]\n  (if (empty? coll)\n    nil\n    (cons (f (first coll)) (lazy-seq (laz f (rest coll))))))", "user": "558378dce4b05c286339e115"}, {"problem": 118, "code": "(fn prob[f coll]\n  (lazy-seq\n    (if (seq coll)\n      (cons (f (first coll)) (prob f (rest coll)))\n      '())))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    '()\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 118, "code": "(fn jmap [f coll]\n  (if (not-empty coll)\n    (lazy-seq (cons (f (first coll)) (jmap f (rest coll))))))", "user": "528c381ce4b0239c8a67aeb2"}, {"problem": 118, "code": "(fn m [f s]\n  (if (empty? s)\n    s\n    (cons (f (first s))\n          (lazy-seq\n           (m f (rest s))))))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n   (when (seq coll)\n     (cons (f (first coll)) (my-map f (rest coll))))))", "user": "543c5200e4b032a45b86933e"}, {"problem": 118, "code": "(fn map2 [f coll]\n  (if (nil? coll) nil\n    (lazy-seq (cons (f (first coll)) (map2 f (next coll))))))", "user": "564b495de4b0284900eef667"}, {"problem": 118, "code": "(fn xmap [f xs]\n  (if (seq xs)\n    (cons (f (first xs)) (lazy-seq (xmap f (rest xs))))\n    []\n    ))", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 118, "code": "(fn lazymap [f coll ]\n    (lazy-seq\n      (when (first coll)\n        (cons (f (first coll)) (lazymap  f (rest coll) )) \n        )\n      )\n    )", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 118, "code": "(fn hz [f coll]\n  (lazy-seq \n   (when-let [s (seq coll)]\n     (cons (f (first s)) (hz f (rest s))))))", "user": "564da567e4b0284900eef682"}, {"problem": 118, "code": "(fn mapp [func coll]\n  \t(if (empty? coll)\n    \tcoll\n        (lazy-seq\n            (cons\n                (func (first coll))\n                (mapp func (rest coll))\n             )\n        )\n    )\n)", "user": "56561119e4b0f9d632dd849d"}, {"problem": 118, "code": "(fn my-map [f l]\n    (if (empty? l)\n      nil\n      (cons (f (first l)) (lazy-seq (my-map f (rest l))) \n      ))\n\n  )", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 118, "code": "(fn mp [f s]\n  (when (seq s)\n    (lazy-seq\n \n   \t  (cons (f (first s)) (mp f (rest s)))   \n  )))", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 118, "code": "(fn m [f coll]\n  (if (empty? coll)\n    '()\n    (cons (f (first coll)) (lazy-seq (m f (rest coll))))))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 118, "code": "(fn b [f coll] (if (empty? coll) nil  (cons (f (first coll)) (lazy-seq (b f (rest coll))))))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 118, "code": "(fn f [g [x & xs]]\n  (if (not xs)\n      [(g x)]\n      (lazy-seq (cons (g x)\n                      (f g xs)))))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (seq s)\n    (lazy-seq (cons (f (first s)) (mymap f (rest s))))\n    nil))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 118, "code": "(fn mp [f coll]\n  (lazy-seq\n   (if (empty? coll)\n     nil \n     (cons (f (first coll)) (mp f (rest coll))))\n   )\n  )", "user": "564a560ae4b0284900eef654"}, {"problem": 118, "code": "(fn mm [f [h & r]]\n  (lazy-seq\n   (cons (f h)\n         (if r (mm f r)))))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 118, "code": "(fn my-map [f s]\n    (if (seq s)\n      (cons (f (first s)) (lazy-seq (my-map f (rest s))))\n      []))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 118, "code": "(fn m [f p]\n  (when (seq p)\n    (lazy-cat [(f (first p))] (m f (rest p)))))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 118, "code": "(fn map-seq [f s]\n  (let [[a & more] s fa (f a)]\n    (if (empty? more)\n      (list fa)\n      (cons fa (lazy-seq (map-seq f more))))))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 118, "code": "(fn mymap [x y]\n      (cons (x (first y)) (lazy-seq (when-not (empty? (rest y)) (mymap x (rest y))))))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (lazy-seq \n   (when-let [s (seq xs)]\n     (cons (f (first s)) (my-map f (rest s))))))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 118, "code": "(fn g [f s]\n  (if (empty? s) '()\n\t  (cons (f (first s)) (lazy-seq (g f (rest s))))))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (if (nil? x)\n    ()\n    (lazy-seq (cons (f x) (my-map f xs)))))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 118, "code": "(fn m [f l]\n  (if (empty? l)\n    '()\n    (cons (-> l first f) (lazy-seq (m f (rest l))))))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 118, "code": "(fn cm\n  ([coll] coll)\n  ([f coll]\n   (lazy-seq (if (empty? coll) nil\n                 (cons (f (first coll)) (cm f (rest coll)))))))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 118, "code": "(fn map' [f coll]\n    (lazy-seq\n     (if (seq coll)\n       (cons (f (first coll))\n             (map' f (rest coll))))))", "user": "516db4f6e4b046df6fbb76a0"}, {"problem": 118, "code": "(fn [f S]\n (letfn [(mp [g s] (if (not-empty s) (lazy-seq (cons (g (first s)) (mp g (rest s)))) ))]\n   (mp f S)) \n )", "user": "5649615be4b0284900eef641"}, {"problem": 118, "code": "(fn m1 [f s]\n  (lazy-seq\n    (if (empty? s)\n      ()\n      (cons (f (first s)) (m1 f (rest s))))))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 118, "code": "(fn fun1 [f lst]\n  (lazy-seq\n   (when-let [a (seq lst)]\n     (cons (f (first a)) (fun1 f (rest a))))))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (seq coll) (lazy-seq (cons (f (first coll)) (mymap f (rest coll))))))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 118, "code": "(fn my-map [f [cur & more]]\n  (when cur\n  \t(lazy-seq (cons (f cur) (my-map f more)))))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 118, "code": "(fn lmap [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll)) (lmap f (rest coll))))))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 118, "code": "(fn my-map [f coll] \n  (if (false? (empty? coll)) ; Initially I had this wrapping cons' first argument without realizing the lazy sequence would continue...\n    (lazy-seq (cons \n               (f (first coll)) \n               (my-map f (rest coll))))))", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 118, "code": "(fn marp [f c]\n\t(lazy-seq\n    (when-let [s (seq c)]\n      (cons (f (first s)) (marp f (rest s))))))", "user": "5578f292e4b05c286339e08f"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (cons (f (first xs)) (let [ys (rest xs)]\n                         (if (empty? ys) nil \n                           (lazy-seq (my-map f (rest xs)))))))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 118, "code": "(fn mp [f coll]\n  (when (seq coll)\n    (lazy-seq (cons (f (first coll))\n              (mp f (rest coll))))))", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 118, "code": "(fn [f xs] (rest (reductions #(f %2) (empty xs) xs)))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 118, "code": "(fn mapper[f x]\n      (lazy-seq\n        (if (empty? x) nil \n          (concat (vector (f (first x))) (mapper f (rest x))))))", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (if (seq coll)\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 118, "code": "(fn my-map [f x]\n  (lazy-seq \n   (if-let [s (seq x)]\n      (cons (f (first s)) (my-map f (rest s))))))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 118, "code": "(fn mp [f xs]\n\t(lazy-seq \n\t\t(when-let [s (seq xs)]\n\t\t\t(cons (f (first s)) (mp f (rest s))))))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons \n             (f (first coll)) \n             (my-map f (rest coll))))))", "user": "546b89ffe4b00cfc9eacc16d"}, {"problem": 118, "code": "(fn rec [f x]\n  (lazy-seq \n   (when-let [s (seq x)]\n     (cons (f (first s)) (rec f (rest s))))))", "user": "560331dee4b04bb52996e1b5"}, {"problem": 118, "code": "(fn mp [f s]\n        (if (seq s)\n  (lazy-seq (cons (f (first s)) (mp f (rest s))))\n))", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (seq coll)\n    (lazy-seq\n     (cons (f (first coll))\n             (my-map f (rest coll))))))", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 118, "code": "(fn gao [f xs]\n  (if (empty? xs)\n    ()\n    (lazy-seq (cons\n                (f (first xs))\n                (gao f (rest xs))))))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (when-let [mycoll (seq coll)]\n  (lazy-seq \n   (cons (f (first mycoll)) (mymap f (rest mycoll))))))", "user": "5658d775e4b00d3155796114"}, {"problem": 118, "code": "(fn ! [f s]\n  (let [n (first s)]\n    (when n\n       (cons (f n) \n             (lazy-seq (! f (rest s)))))))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 118, "code": "(fn __ [f xs]\n  (when (seq xs)\n    (cons (f (first xs)) (lazy-seq (__ f (rest xs))))))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 118, "code": "(fn myMap [func coll]\n  (lazy-seq\n   (if (seq coll)\n     (cons (func (first coll)) (myMap func (rest coll))))))", "user": "558b41fce4b0277789237628"}, {"problem": 118, "code": "(fn m [f xs]\n  (when (seq xs) (lazy-seq (cons (f (first xs)) (m f (rest xs))))))", "user": "564a5a09e4b0284900eef656"}, {"problem": 118, "code": "(fn m [f [x & xs]]\n  (lazy-seq (cons (f x) (if (empty? xs) [] (m f xs)))))", "user": "56483562e4b0284900eef629"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n      []\n      (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 118, "code": "(fn newMap [f s] (if (empty? s) (lazy-seq) (lazy-cat (lazy-seq (list (f (first s)))) (newMap f (rest s)))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n      (cons (f (first s)) (my-map f (rest s)))\n     )))", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 118, "code": "(fn blah [f coll]\n  (if (seq coll)\n    (lazy-seq (cons (f (first coll)) (blah f (rest coll))))))", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 118, "code": "(fn __ [f xs]\n  (when xs\n    (lazy-cat [(f (first xs))] (__ f (next xs)))))", "user": "4f856adfe4b033992c121c44"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 118, "code": "(fn lazy-map [f coll]\n   (if (seq coll)\n     (lazy-seq (cons (f (first coll)) (lazy-map f (rest coll))))\n     '()))", "user": "56754c4be4b05957ce8c6149"}, {"problem": 118, "code": "(fn mp [f c] (if (empty? c) c (lazy-seq (cons (f (first c)) (mp f (rest c))))))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 118, "code": "(fn map' [f [x & xs]]\n  (if x\n    (lazy-seq\n     (list* (f x) (map' f xs)))\n    (list)))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 118, "code": "(fn my-map [f s]\n      (when-not (empty? s)\n        (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "50f17c0de4b06d9538fe2123"}, {"problem": 118, "code": "(fn mymap [f v]\n  (if (empty? v) (empty v)\n    (cons (f (first v)) (lazy-seq (mymap f (rest v))))))", "user": "54e6762be4b024c67c0cf809"}, {"problem": 118, "code": "(fn mep [f s]\n  (lazy-seq\n    (cons (f (first s)) (if (empty? (rest s)) nil (mep f (rest s))))))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (when-let [s (seq coll)]\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 118, "code": "(fn my-map[f x]\n  (when (not (empty? x)) \n    (lazy-seq \n     (prn f (first x))  \n     (cons (f (first x))\n           (my-map f (rest x))))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 118, "code": "(fn myMap\n  \t[f s]\n\t(lazy-seq\n    \t(when\n          (seq s)\n          (cons (f (first s)) (myMap f (rest s)))\n        )\n          \n     )\n)", "user": "5676af21e4b05957ce8c6158"}, {"problem": 118, "code": "(fn my-map [f c]\n  (when-not (empty? c)\n    (lazy-seq\n     (cons (f (first c))\n           (my-map f (rest c))))))", "user": "52213426e4b0e6a83c8925c4"}, {"problem": 118, "code": "(fn re-map [f col]\n  (if (seq col) (lazy-seq\n               (cons (f (first col)) (re-map f (rest col))))\n      nil))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 118, "code": "(fn m [f s]\n          (when-let [[x & xs] (seq s)]\n            (lazy-seq (cons (f x) (m f xs)))))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 118, "code": "(fn M [f l] (lazy-seq (and l (cons (f (first l)) (M f (next l))))))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    s\n    (cons (f (first s))\n          (lazy-seq (my-map f (rest s))))))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 118, "code": "(fn custom-map [f [x & y]] (lazy-seq (cons (f x) (if y (custom-map f y)))))", "user": "56798d83e4b05957ce8c618b"}, {"problem": 118, "code": "(fn my-map [f items]\n  (if (empty? items)\n    items\n    (let [h (first items)\n          r (rest items)]\n      (lazy-seq (cons (f h) (my-map f r))))))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 118, "code": "(fn mapx\n   ([f s] (when-let [e (first s)]\n            (cons (f e)\n                  (lazy-seq (mapx f (rest s)))))))", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 118, "code": "(fn new-map [f coll]\n  (if (seq coll)\n    (lazy-seq\n      (cons (f (first coll)) \n            (new-map f (rest coll))))))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 118, "code": "(fn my-map [given-function given-sequence]\n  (if (nil? given-sequence)\n    nil\n    (lazy-seq (cons (given-function (first given-sequence)) (my-map given-function (next given-sequence))))\n    )\n  )", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 118, "code": "(fn mm [f s] (lazy-seq (cons (f (first s)) (when (not-empty (rest s)) (mm f (rest s))))))", "user": "543b4746e4b032a45b86932c"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (when-not (empty? xs)\n  (cons (f (first xs))\n        (lazy-seq (my-map f (next xs))))))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 118, "code": "(fn my-map\n  ([f original]\n   (lazy-seq\n    (if (seq original)\n      (cons (f (first original)) (my-map f (rest original)))\n      original))))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 118, "code": "(fn m [f [h & r]]\n    (lazy-seq\n     (cons\n      (f h)\n      (if r (m f r)))))", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 118, "code": "(fn m [f c] (lazy-seq (if (empty? c) '() (cons (f (first c)) (m f (rest c))))))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 118, "code": "(fn map' [f [head & tail]]\n  (when head\n    (lazy-seq (cons (f head) (map' f tail)))))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 118, "code": "(fn f [fnc col] \n   (if (empty? col) \n     '()\n     (cons (fnc (first col)) (lazy-seq (f fnc (rest col))))))", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 118, "code": "(fn mymap [f s]\n  (lazy-seq (if (not-empty s)\n             (cons (f (first s)) (mymap f (rest s))))))", "user": "56004deee4b04bb52996e164"}, {"problem": 118, "code": "(fn re-map [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first coll))\n           (re-map f (rest coll))))))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 118, "code": "(fn remap [f lst] (if (empty? lst) () (lazy-seq (cons (f (first lst)) (remap f (rest lst))))))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 118, "code": "(fn alt-map [f xs]\n  (if (empty? xs) xs\n      (lazy-seq (cons (f (first xs)) (alt-map f (rest xs))))))", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 118, "code": "(fn map' [f coll]\n  (when (seq coll)\n    (cons (f (first coll))\n          (lazy-seq (map' f (rest coll))))))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 118, "code": "(fn map' [f [x & xs]]\n  (if (nil? xs) [(f x)]\n  (lazy-seq (cons (f x) (map' f xs)))))", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 118, "code": "(fn map* [f coll]\n   (if (not (empty? coll))\n     (cons \n       (f (first coll))\n       (lazy-seq (map* f (rest coll))))))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 118, "code": "(fn __ [f [h & rest]]\n  (if (nil? h)[]\n    (lazy-seq (cons (f h) (__ f rest)))))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when (seq s)\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 118, "code": "(fn my-map [f col]\n  (if (empty? col)\n    ()\n    (lazy-seq (cons (f (first col)) (my-map f (rest col))))))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 118, "code": "(fn ! [f i] (lazy-seq (if (not= i nil) (cons (f (first i)) (! f (next i))))))", "user": "56066e82e4b08b23635d3173"}, {"problem": 118, "code": "(fn mymap [f myseq]\n  (lazy-seq\n   (when-not (empty? myseq)\n     (cons (f (first myseq))\n           (mymap f (rest myseq))))))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 118, "code": "(fn ff [f s] (if (empty? s) nil (lazy-cat [(f (first s))] (ff f (rest s)))))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 118, "code": "(fn  my-map [f s]\n  (if (empty? s)\n    s\n    (lazy-seq\n     (cons \n      (f (first s))\n      (my-map f (rest s))))))", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (if (empty? xs) xs\n      (cons (f (first xs)) (lazy-seq (my-map f (rest xs))))))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 118, "code": "(fn mp [f s] \n  (when-not (empty? s) \n    (lazy-seq (cons (f (first s)) (mp f (rest s))))))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 118, "code": "(fn $ [f xs]\n  (if (seq xs)\n    (lazy-seq (cons (f (first xs))\n                    ($ f (rest xs))))\n    '()))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 118, "code": "(fn m [f v](if (= v []) [] (lazy-seq (cons (f (first v)) (m f (rest v))))))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 118, "code": "(fn other-map [f coll]\n    (lazy-seq\n        (if-let [one (first coll)]\n            (cons (f one) (other-map f (rest coll))))))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 118, "code": "(fn [f coll] (if (= (f (first coll)) nil) (repeat (count coll) nil) (keep #(f %) coll)))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 118, "code": "(fn map' [f coll] (lazy-seq (when (seq coll) (cons (f (first coll)) (map' f (rest coll))))))", "user": "56481722e4b0284900eef628"}, {"problem": 118, "code": "(fn map-redux [f s]\n  (if (empty? s)\n    '()\n    (lazy-seq (cons (f (first s))\n                    (map-redux f (rest s))))))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 118, "code": "(fn mp [f [v & r]] (lazy-seq (cons (f v) (if-not (empty? r) (mp f r)))))", "user": "56baa68ce4b0f26550335947"}, {"problem": 118, "code": "(fn mm [f s]\n  (if (not (seq (rest s)))\n    (list (f (first s)))\n    (lazy-seq (cons (f (first s)) (mm f (rest s))))))", "user": "536673a8e4b0243289761e76"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (if x\n    (lazy-seq (cons (f x) (my-map f xs)))))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 118, "code": "#_(fn [f coll] ;; \"Execution timed out\" on the third test\n  (reduce #(conj %1 (f %2))\n          []\n          coll))\n\n#_(fn my-map [f coll]\n  (lazy-seq \n   (when-let [s (seq coll)]\n     (cons (f (first s))\n           (my-map f (rest s))))))\n\n(fn my-map [f coll]\n  (when (not (empty? coll))\n    (cons (f (first coll))\n          (lazy-seq (my-map f (rest coll))))))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 118, "code": "(fn mymap [f s] \n  (if-not (next s) \n    (list (f (first s))) \n    (lazy-seq \n     (cons \n      (f (first s)) \n      (mymap f (next s))))))", "user": "56b86e64e4b0f26550335924"}, {"problem": 118, "code": "(fn my-map [f s] (if (not (empty? s)) (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "user": "56baab13e4b0f26550335948"}, {"problem": 118, "code": "(fn map* [f col]\n  (when (not-empty col) \n    (lazy-seq (cons (f (first col)) (map* f (rest col))))))", "user": "56012cd7e4b04bb52996e17d"}, {"problem": 118, "code": "(fn m [f s]\n  (if (empty? s) (vector)\n  (lazy-seq (cons (f (first s)) (m f (rest s))))))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 118, "code": "(fn foo [f coll]\n  (lazy-seq \n    (when-let [e (first coll)]\n      (cons (f (first coll)) (foo f (rest coll))))))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 118, "code": "(fn mp[f l] (if (empty? l) [] (cons (f (first l)) (lazy-seq (mp f (rest l))))))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 118, "code": "(fn lazy-map [f xs]\n  (if (empty? xs) '()\n    (lazy-seq (cons (f (first xs)) (lazy-map f (rest xs))))))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 118, "code": "(fn map* [f coll]                                                             \n    (lazy-seq                                                                     \n      (when-let [s (seq coll)]                                                    \n        (cons (f (first s)) (map* f (rest s))))))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 118, "code": "(fn mapp [fun [x & xs]]\n  (lazy-seq\n   (if (nil? x)\n     x\n     (cons (fun x) (mapp fun xs)))))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 118, "code": "(fn g[f s] (lazy-seq (when (seq s) (cons (f (first s)) (g f (rest s))))))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 118, "code": "(fn [f coll](flatten (reductions #(f %2)[] coll)))", "user": "566a3a26e4b0a866af689699"}, {"problem": 118, "code": "(fn\n   [f coll]\n   (rest (reductions (fn [x y]\n                       (f y)) 0 coll)))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 118, "code": "(fn mapc\n  [f coll]\n  (lazy-seq (when-let [c (seq coll)]\n    (cons (f (first c)) (mapc f (rest c))))))", "user": "5609d328e4b05f002753deee"}, {"problem": 118, "code": "(fn my-map [op coll]\n  (when (seq coll)\n    (lazy-seq (cons (op (first coll)) (my-map op (rest coll))))))", "user": "56c0aeb8e4b060a8e693e3af"}, {"problem": 118, "code": "(fn foo [f coll]                                                                                                                                                                   \n        (if (empty? coll)                                                                                                                                                                \n          ()                                                                                                                                                                             \n          (lazy-seq (cons (f (first coll)) (foo f (next coll))))))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 118, "code": "(fn mappe [f x]\n  (lazy-seq\n   (let [fx (f (first x))]\n     (if (next x)\n       (cons fx (mappe f (next x)))\n       (list fx)))))", "user": "4e36e647535deb9a81d77f36"}, {"problem": 118, "code": "(fn my-map [f c] (if (empty? c)\n                     []\n                     (lazy-seq (cons (f (first c)) (my-map f (rest c)) ) )   ))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 118, "code": "(fn map2 [f xs]\n  (lazy-seq\n    (if (empty? xs)\n      '()\n      (cons (f (first xs)) (map2 f (rest xs))))))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (false? (empty? s))\n    (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "user": "4eeb8f68535d93acb0a668a9"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 118, "code": "(fn mapRec [p x]\n\t(if (empty? x)\n\t\t[]\n\t\t(lazy-seq (cons (p (first x)) (mapRec p (rest x))))\n\t)\n)", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 118, "code": "(fn m [f s] (lazy-seq (when (not-empty s) (cons (f (first s)) (m f (rest s))))))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 118, "code": "(fn my-map [f xs] \n  (if-let [[s & ys] xs]\n    (cons (f s) (lazy-seq (my-map f ys)))))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 118, "code": "(fn m [f [a & c]] (if a (lazy-seq (cons (f a) (m f c)))))", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 118, "code": "(fn myMap [func coll]\n  (lazy-seq\n   (if (seq coll)\n     (cons (func (first coll)) (myMap func (rest coll))))))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 118, "code": "(fn m [f coll]\n  (lazy-seq\n    (when-not (empty? coll)\n      (cons (f (first coll)) (m f (rest coll))))))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 118, "code": "(fn [f s]\n  (letfn [(mymap [f s] \n            (if (empty? s)\n              ()\n              (lazy-seq (cons (f (first s))\n                              (mymap f (rest s))))))]\n    (mymap f s)))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 118, "code": "(fn m\n  ([f s] \n     (if (empty? s) []\n       (lazy-seq (cons (f (first s)) (m f (rest s)))))))", "user": "56bca51ae4b0f26550335963"}, {"problem": 118, "code": "(fn funcion [f s]\n  (when (seq s)\n  (cons (f (first s)) \n        (lazy-seq (funcion f (rest s))))))", "user": "55912230e4b027778923767a"}, {"problem": 118, "code": "(fn m [f s] (lazy-seq (if s (let [[h & r] s] (cons (f h) (m f r))) (lazy-seq))))", "user": "4f148418535d64f60314643a"}, {"problem": 118, "code": "(fn my-map [f c] (if (empty? c) nil (cons (f (first c)) (lazy-seq (my-map f (rest c))))))", "user": "4fd11a93e4b04c3a95aa040a"}, {"problem": 118, "code": "(fn my-map\n  [op x]\n  (if (empty? x)\n    nil\n    (lazy-seq (cons (op (first x)) (my-map op (rest x))))))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 118, "code": "(fn mmap [f coll]\n (if (seq coll)\n  (lazy-seq (cons (f (first coll)) (mmap f (rest coll))))))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 118, "code": "(fn m [f [h & t :as c]]\n  (if (empty? c)\n    ()\n    (lazy-seq (cons (f h) (m f t)))))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 118, "code": "(fn my-map [f s]\n  (lazy-seq (if (nil? (second s))\n              (list (f (first s)))\n              (cons (f (first s))\n                    (my-map f (rest s))))))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 118, "code": "(fn mp\n  [f coll]\n  (if (empty? coll)\n    coll\n  \t(lazy-seq\n   \t\t(cons (f (first coll)) (mp f (rest coll))))))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 118, "code": "(fn foo [f s]\n  (if (empty? s)\n    '()\n  \t(lazy-seq (cons (f (first s)) (foo f (rest s))))))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))\n;; not from me", "user": "4eb171d7535d7eef30807340"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (my-map f (rest s))))))", "user": "5191ac45e4b0d428d29dc1b6"}, {"problem": 118, "code": "(fn my-map [f s]\n   (if (empty? s)\n     nil\n     (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 118, "code": "(fn m [f c]\n  (if (not (empty? c))\n    (lazy-seq\n      (cons (f (first c))\n            (m f (rest c))))))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 118, "code": "(fn my-map [f coll]\n   (if (empty? coll)\n     '()\n     (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 118, "code": "(fn p [f & [[x & y]]]\n  (lazy-seq (if (nil? x)\n              nil\n              (cons (f x) (p f y)))))", "user": "568227fee4b0945ebc182a8a"}, {"problem": 118, "code": "(fn m [f [x & xs]] (when x (cons (f x) (lazy-seq (m f xs)))))", "user": "56dc3bdfe4b0ea9b8538f819"}, {"problem": 118, "code": "(fn ls- [f s]\n  (lazy-seq (when-let [xs (seq s)] (cons (f (first xs)) (ls- f (rest xs)))))\n  )", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 118, "code": "#((fn r [[f & v]] (if (empty? v) [(%1 f)] (lazy-cat [(%1 f)] (r v))) ) %2)", "user": "56aed78fe4b03c432f187363"}, {"problem": 118, "code": "(fn -map [f s]\n  (lazy-seq (cons (f (first s))\n                  (if-let [s (next s)]\n                    (-map f s)))))", "user": "566dd178e4b0a866af6896d1"}, {"problem": 118, "code": "(fn nm [fun seqn] (lazy-seq\n    (if (empty? seqn) '()\n      (cons (fun (first seqn)) (nm fun (rest seqn))))))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (false? (empty? s))\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (when-let [x (first coll)]\n    (lazy-seq (cons (f x) (my-map f (rest coll))))))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 118, "code": "(fn reimp-map\n  ([f c]\n   (lazy-seq\n    (when-let [s (seq c)]\n      (cons (f (first s)) (reimp-map f (rest s)))))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "56791447e4b05957ce8c6183"}, {"problem": 118, "code": "(fn p\n  [f s]\n  (if (empty? s)\n    ()\n    (lazy-seq (cons (f (first s)) (p f (rest s))))))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 118, "code": "(fn f\n    [fun lst]\n    (lazy-seq\n      (cond (empty? lst) ()\n            :else        (cons (fun (first lst)) (f fun (rest lst))))))", "user": "56df62eee4b0ca2494a095f0"}, {"problem": 118, "code": "(fn m [f c]\n  (if-let [frst (first c)]\n    (lazy-seq\n      (cons (f frst) (m f (rest c))))))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 118, "code": "(fn f\n  [fun lst]\n  (if (not (empty? lst))\n    (lazy-seq (cons (fun (first lst)) (f fun (rest lst))))))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 118, "code": "(fn ff\n  [f s]\n    (if (empty? s) ()\n    (lazy-seq (cons (f (first s)) (ff f (rest s))))))", "user": "56df6846e4b0ca2494a095fa"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (when (seq coll)\n    (cons \n      (f (first coll)) (lazy-seq (mymap f (rest coll))))))", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 118, "code": "(fn mymap [f col]\n  (lazy-seq\n   (when col\n     (cons (f (first col)) (mymap f (next col))))))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 118, "code": "(fn f1 [f li]\n\t(if (= () li) []\n\t\t(lazy-seq (cons (f (first li)) (f1 f (rest li)) ) )))", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 118, "code": "(fn m [f s](\n   if (not (nil? s))\n   (lazy-seq (cons \n            (f (first s)) \n            (m f (next s))\n            ))\n   nil\n  ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 118, "code": "(fn m-\n  [f c]\n  (lazy-seq\n   (when-let [ff (first c)]\n     (cons (f ff) (m- f (rest c))))))", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 118, "code": "(fn my-map [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (my-map f (rest s))))))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 118, "code": "(fn my-map [f [a & xyz]]\n  (lazy-seq (cons (f a)\n                  (if xyz\n                    (my-map f xyz)))))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 118, "code": "(fn my-map [f c]\n   (when (seq c)\n     (lazy-seq (cons (f (first c)) (my-map f (rest c)))))\n   )", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 118, "code": "(fn m [f c]\n     (lazy-seq\n      (when-not (empty? c)  \n          (cons (f (first c)) (m f (rest c))))))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 118, "code": "(fn iter[f xs] \n  (if (empty? xs) \n    xs \n    (lazy-seq (cons (f (first xs)) (iter f (rest xs))))))", "user": "56e06625e4b0ca2494a09607"}, {"problem": 118, "code": "(fn mymap [f coll]\n   (if (not (empty? coll))\n     (lazy-seq\n       (cons (f (first coll)) (mymap f (rest coll))))))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 118, "code": "(fn my-map \n  [f coll]\n   (if ((complement empty?) coll)\n   \t(lazy-seq (cons (f (first coll)) (my-map f (rest coll)))))\n  )", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 118, "code": "(fn mf [f [x & xs]]\n  (if x (lazy-cat [(f x)] (mf f xs))))", "user": "52c35afce4b07a9af579238c"}, {"problem": 118, "code": "(fn [f v] \n  (loop [x [] a v]\n    (if (or (empty? a) (= (first a) 1000003))\n      x\n      (recur (conj x (f (first a))) \n             (rest a)))))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 118, "code": "(fn mm_ [f coll]\n    (if (seq coll)\n      (cons (f (first coll)) (lazy-seq (mm_ f (rest coll))))\n      '()))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 118, "code": "(fn my-map [f coll]                                                                                          \n  (if (empty? coll)                                                                                            \n    nil                                                                                                        \n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 118, "code": "(fn mf [f [fel & rels :as l]] \n   (if (seq l)\n   \t\t(cons (f fel) (lazy-seq (mf f rels) ) )\n  \t\t[]\n   ))", "user": "52503747e4b0541d1855b828"}, {"problem": 118, "code": "(fn [f coll] ((fn g [coll] (when-not (empty? coll)\n                               (lazy-seq (cons \n                                         (f (first coll))\n                                         (g (rest coll))\n                                         )))) coll))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 118, "code": "(fn rep-map [f xs] (lazy-seq (if (empty? xs) [] (cons (f (first xs)) (rep-map f (rest xs))))))", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 118, "code": "(fn jp[fu li](\n              if(empty? li)\n              \t[]\n\t\t\t\t(cons (fu (first li)) (lazy-seq (jp fu (rest li))))\n              ))", "user": "5034b623e4b062bc5d7ae168"}, {"problem": 118, "code": "(fn p [fun b]\n  (if (not (empty? b))\n    (lazy-seq (cons (fun (first b)) (p fun (rest b))))))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "4e526cc4535d302ef430da74"}, {"problem": 118, "code": "(fn my-map\n  [f s]\n  (if (empty? s)\n    []\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 118, "code": ";; #fail w/ a null ptr exception:\n;(fn my-map [f s]\n;  (lazy-seq (cons (f (first s)) (my-map f (rest s)))))\n\n(fn my-map [f s]\n  (if-not (empty? s)\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 118, "code": "(fn ! [f args]\n   (if (empty? args)\n     nil\n     (lazy-seq (cons (f (first args)) (! f (rest args)))))\n   )", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 118, "code": "(fn my-map [f xs] (if (empty? xs) nil (lazy-seq (cons (f (first xs)) (my-map f (rest xs))))))", "user": "54a6645be4b09f271ff37c87"}, {"problem": 118, "code": "(fn cc\n  ([f arr]\n   (if (empty? arr) \n       []\n      (lazy-seq \n        (cons (f (first arr)) \n            (cc f (rest arr)))))))", "user": "56be8649e4b0f26550335983"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5250a13ee4b0541d1855b839"}, {"problem": 118, "code": "(fn map2 [f coll]\n   (if (empty? coll)\n     []\n     (lazy-seq (cons (f (first coll)) (map2 f (rest coll))))))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 118, "code": "(fn my-map [f lst]\n  (if (empty? lst)\n    []\n    (cons (f (first lst))\n          (lazy-seq (my-map f (rest lst))))))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 118, "code": "(fn _map [f s]\n  (when s\n    (lazy-seq\n     (cons (f (first s))\n           (_map f (next s))))))", "user": "57008afae4b08d47c97781ca"}, {"problem": 118, "code": "(fn mm [func s]\n  (if (empty? s) s\n    (lazy-seq (cons (func (first s)) (mm func (rest s))))))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 118, "code": "(fn mymap [f s]\n (lazy-seq\n  (when (seq s)\n   (cons (f (first s)) (mymap f (rest s))))))", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (not (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "52c1cc8be4b07a9af579236b"}, {"problem": 118, "code": "(fn my-func [op coll]\n  (when (seq coll)\n  \t(lazy-seq (cons (op (first coll)) \n                  \t(my-func op (rest coll))))))", "user": "56826ebce4b0945ebc182a93"}, {"problem": 118, "code": "(fn m-map [f s]\n  (if (empty? s)\n    s\n    (lazy-seq (cons (f (first s)) (m-map f (rest s))))))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 118, "code": "(fn re-map [f coll]\n  (if (empty? coll)\n    ()\n    (cons (f (first coll)) (lazy-seq (re-map f (rest coll))))))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 118, "code": "(fn remap [f coll]\n  (when-let [s (seq coll)]\n  (lazy-seq\n   (cons (f (first coll)) (remap f (rest coll))))))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 118, "code": "(fn f [g vs]\n            (if (seq vs)\n              (lazy-seq (cons (g (first vs))\n                              (f g (rest vs))))\n              vs))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 118, "code": "(fn mymap\n  [f xs]\n  (if (seq xs)\n    (lazy-seq (cons (f (first xs)) (mymap f (rest xs))))))", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 118, "code": "(fn m [f [h & r]]\n  (if h\n    (lazy-seq (cons (f h) (m f r)))))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 118, "code": "(fn fname# [f aseq]\n  (if (counted? aseq)\n    (reduce #(conj %1 (f %2)) [] aseq)\n    (lazy-seq (cons (f (first aseq)) (fname# f (rest aseq))))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 118, "code": "(fn my-lazy-map [f s] \n  (lazy-seq \n   (if (next s)\n     (cons (f (first s)) (my-lazy-map f (rest s)))\n     (list (f (first s))))))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 118, "code": "(fn my-map [func remain]\n  (if (empty? remain)\n    '()\n     (lazy-seq (cons (func (first remain)) (my-map func (rest remain))))))", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 118, "code": "(fn my-map [f coll]\n    (when coll\n      (cons (f (first coll))\n            (lazy-seq (my-map f (next coll))))))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? (rest s))\n    (list (f (first s)))\n    (lazy-seq (cons (f (first s))\n                    (my-map f (rest s))))))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 118, "code": "(fn ff\n\t[f s] (if (not (empty? s)) (lazy-seq (cons (f (first s)) (ff f (rest s))))))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 118, "code": "(fn r [f c]\n     (if (empty? c) ()\n     (lazy-seq (cons (f (first c)) (r f (rest c)))))\n          )", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 118, "code": "(fn p\n  [f lst]\n  (if (not (empty? lst))\n      (lazy-seq (cons (f (first lst))\n                      (p f (rest lst))))))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 118, "code": "(fn f [op s]\n      (lazy-seq\n       (if (empty? s) nil\n\t   (concat (list (op (first s)))\n\t\t   (f op (rest s))))))", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 118, "code": "(fn not-map [f [x :as s]]\n    (lazy-seq\n     (when s\n       (cons (f x) (not-map f (next s))))))", "user": "4f57c913e4b0a7574ea7183f"}, {"problem": 118, "code": "(fn my-map [f [h & t]]\n  (if (= nil h) '()\n      (lazy-seq (cons (f h) (my-map f t)))))", "user": "571e6d73e4b0145328a76292"}, {"problem": 118, "code": "(fn mapp[f lst]\n  (if (false? (empty? lst))\n        (lazy-seq (cons (f (first lst)) (mapp f (rest lst))))))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 118, "code": "(fn my-map [f [elem & coll]]\n  (if (empty? coll)\n    (cons (f elem) nil)\n    (lazy-seq (cons (f elem) (my-map f coll)))))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 118, "code": "(fn m\n  [f w]\n  (if-let [v (first w)]\n    (->> w\n         rest\n         (m f)\n         (cons (f v))\n         lazy-seq)\n    nil))", "user": "52ae886de4b0c58976d9acab"}, {"problem": 118, "code": "(fn newMap\n  [fun lista]\n  (if (not (empty? lista))\n    (lazy-seq (cons (fun (first lista)) (newMap fun (rest lista))))))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 118, "code": "(fn aa [f [x & xs]]\n  (when x (cons (f x) (lazy-seq (aa f xs)))))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 118, "code": "(fn my-map [func xs] (if (empty? xs) nil (cons (func (first xs)) (lazy-seq (my-map func (rest xs))))))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 118, "code": "(fn m [f coll] \n    (if (empty? coll)\n      '()\n\t\t(cons (f (first coll)) \n              (lazy-seq (m f (rest coll))))))", "user": "4df73d64535d04ed9115e775"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 118, "code": "(fn m [f [x & xs]]\n  (when x\n    (lazy-seq\n      (cons (f x) (m f xs)))))", "user": "4f8490fae4b033992c121c34"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 118, "code": "(fn p\n  [f s]\n  (if (false? (empty? s))\n    (lazy-seq (cons (f (first s)) (p f (rest s))))))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 118, "code": "(fn f [g L]\n  (if (empty? L)\n   '()\n   (lazy-seq (cons (g (first L)) (f g (rest L))))))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 118, "code": "(fn m [f c]\n  (if (not (empty? c))\n    (lazy-seq\n      (cons (f (first c))\n            (m f (rest c))))))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 118, "code": "(fn m [f [a & r]]\n  (lazy-seq \n   (cons (f a) (when r (m f r)))))", "user": "4ed0e139535d44c135fd68c7"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when-not (empty? s)\n    (lazy-seq\n     (cons (f (first s))\n           (my-map f (rest s))))))", "user": "571d063ee4b0145328a76272"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (when-not (empty? coll) (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 118, "code": "(fn mymap [f l] (rest (reductions #(f %2) nil l)))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 118, "code": "(fn mymap [f xs]\n  (if (seq xs)\n    (lazy-seq (cons (f (first xs))\n                    (mymap f (rest xs))))))", "user": "55d68726e4b0e31453f64a99"}, {"problem": 118, "code": "(fn q[f a]\n    ( if (seq a)\n      (lazy-seq (cons (f (first a)) (q f (rest a))))\n    )\n  )", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 118, "code": "(fn mymap\n  [f [x & xs]]  (if (nil? x) \n                   nil\n                   (lazy-seq (cons (f x) (mymap f xs))))\n  )", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 118, "code": "(fn re-implement-map [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (re-implement-map f (rest s))))))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 118, "code": "(fn map* [f s]\n  (when (seq s)\n    (cons (f (first s)) (lazy-seq (map* f (rest s))))))", "user": "51008b6fe4b0700a7a02d6e4"}, {"problem": 118, "code": "(fn [fun li]\n  \n  (\n   (fn  c [[f & r]]\n     (if f\n         (lazy-seq (cons (fun f) (c r))  )\n       nil\n       )\n     )\n   li\n   )\n  \n  )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 118, "code": "(fn my-fun [fun-in coll-in]\n     (if (false? (empty? coll-in))\n       (lazy-seq \n       (cons (fun-in (first coll-in)) (my-fun fun-in (rest coll-in))))))", "user": "571d9669e4b0145328a7627f"}, {"problem": 118, "code": "(fn [f s]\n  (next\n    (reductions\n      (fn [r x]\n        (f x))\n      nil\n      s)))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 118, "code": "(fn mymap [o [n & r]] (if (empty? r) [(o n)] (lazy-seq (cons (o n) (mymap o r)))))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 118, "code": "(fn new-map [f s] \n  (if (empty? s)\n    []\n    (cons (f (first s)) (lazy-seq (new-map f (rest s))))))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 118, "code": "(fn\n   the-map\n   [f s]\n   (if (not-empty s)\n     (lazy-seq (cons (f (first s)) (the-map f (rest s))))))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 118, "code": "(fn mmap [f col]\n   (lazy-seq\n     (if-not (empty? col)\n       (cons (f (first col)) (mmap f (rest col)))\n       )))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 118, "code": "(fn mymap [f sq] (if (empty? sq) '() (cons (f (first sq)) (lazy-seq (mymap f (rest sq))))) )", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 118, "code": "(fn m [f s]\n  (when (seq s)\n    (lazy-seq\n      (cons\n       (f (first s))\n       (m f (rest s))))))", "user": "4e3ac1b2535deb9a81d77f4c"}, {"problem": 118, "code": "(fn mp [f s]\n  (lazy-seq\n    (when (seq s)\n      (cons (f (first s)) (mp f (rest s))))))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 118, "code": "(fn ft-map [f s]\n  (if (seq s)\n    (cons (f (first s)) (lazy-seq (ft-map f (rest s)))\n          )))", "user": "56a94562e4b07966d5a8a074"}, {"problem": 118, "code": "(fn my-map [f c]\n  (lazy-seq\n   (when-let [s (seq c)]\n     (cons (f (first s)) (my-map f (rest s))))))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 118, "code": "(fn mp [f s]\n  (lazy-seq\n    (when (seq s)\n      (cons (f (first s)) (mp f (rest s))))))", "user": "574af03ce4b02ea114799202"}, {"problem": 118, "code": "(fn m [f coll]\n  (if (empty? coll) []\n      (lazy-cat [(f (first coll))] (m f (rest coll)))))", "user": "51647faae4b003cf19fdde3b"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (lazy-seq\n    (when-let [s (seq xs)]\n      (cons (f (first s)) (my-map f (rest s))))))", "user": "56ac81ace4b03c432f187347"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (if (nil? x) \n    nil\n    (cons (f x) (lazy-seq (my-map f xs)))))", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 118, "code": "(fn mp [f s]\n  (if (empty? s) '() (cons (f (first s)) (lazy-seq (mp f (rest s))))))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 118, "code": "(fn [f s] \n  ((fn p [t]\n     (when-not (empty? t)\n       (lazy-seq (cons (f (first t))\n                       (p (rest t))))))\n   s))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 118, "code": "(fn mymap [mapper coll]\n  (lazy-seq \n    (if (empty? coll)\n      nil\n      (cons (mapper (first coll)) (mymap mapper (rest coll))))))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 118, "code": "(fn map2 [f xs] \n  (if (seq xs)\n    (lazy-seq\n     (cons (f (first xs))\n           (map2 f (rest xs))))\n    ()))", "user": "508c3d42e4b0f17d83ea26b2"}, {"problem": 118, "code": "(fn mymap [f l]\n  (if (empty? l)\n    []\n    (lazy-seq (cons (f (first l)) (mymap f (rest l))))))", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 118, "code": "(fn m [f [x & xs]] (if x (lazy-cat [(f x)] (m f xs))))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 118, "code": "(fn mmap [f sqnc]\n   (lazy-seq\n    (when-let [s (seq sqnc)]\n      (cons  (f (first s)) (mmap f (rest s)))))\n)", "user": "572ac718e4b0f4d77e651242"}, {"problem": 118, "code": "(fn my-fun [f coll] (if (empty? coll) nil (lazy-seq (cons (f (first coll)) (my-fun f (rest coll))))))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 118, "code": "(fn mp\n  [f, [elt & elts]]\n  (if elts\n    (lazy-seq (cons (f elt) (mp f elts)))\n    [(f elt)]))", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 118, "code": "(fn [f s]\n\n       (letfn [(mymap [s]\n                 (lazy-seq\n                  (if (seq s)\n                    (cons (f (first s)) (mymap (rest s))))))]\n\n         (mymap s)))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 118, "code": "(fn newmap [func coll] \n        (lazy-seq \n          (when-let [s (seq coll)]\n            (cons (func (first s)) (newmap func (rest s))))))", "user": "5759cd46e4b02ea11479932e"}, {"problem": 118, "code": "(fn jmap [f args]\n   (lazy-seq (cons (f (first args))\n          (if (not-empty (rest args))\n            (jmap f (rest args))\n            '()))))", "user": "5711b532e4b09c608db70449"}, {"problem": 118, "code": "(fn mymap\n      [f coll]\n      (lazy-seq \n        (when-let [s (seq coll)]\n          (cons (f (first s)) (mymap f (rest s))))))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 118, "code": "(fn m\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons \n       (f (first s)) \n       (m f (rest s))\n      )\n    )\n   )\n  )\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 118, "code": "(fn my-map [f [x & xs :as xxs]]\n  (lazy-seq\n   \t(when (seq xxs)\n      (cons (f x) (my-map f xs)))))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 118, "code": "(fn x[f l]\n  (when (not-empty l)\n    (lazy-seq (cons (f (first l)) \n                    (x f (rest l))))))", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 118, "code": "(fn mmap [f [e & q]] (lazy-seq (cons (f e) (when q (mmap f q)))))", "user": "57642916e4b0994c1922fbee"}, {"problem": 118, "code": "(fn newmap [f s]\n  (if (empty? s)\n    nil\n    (lazy-cat (list (f (first s)))\n            (newmap f (rest s)))))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 118, "code": "(fn m [f s] \n  (if (empty? s) ()\n  (lazy-seq (cons (f (first s)) (m f(rest s))))))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 118, "code": "(fn my-map\n  [f [x & xs]]\n  (if (empty? xs)\n    (lazy-seq [(f x)])\n    (cons (f x) (lazy-seq (my-map f xs)))))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 118, "code": "(fn remap[f coll]\n  (when coll \n    (lazy-seq (cons (f (first coll)) (remap f (next coll))))\n    )\n  )", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (lazy-seq\n    (if (seq coll)\n      (cons (f (first coll)) (my-map f (rest coll))))))", "user": "5574c172e4b05c286339e059"}, {"problem": 118, "code": "(fn mp\n  ([f coll] (mp f coll []))\n  ([f [head & tail] result]\n   (cons (f head) (lazy-seq (when (seq tail) (mp f tail))))))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (chunked-seq? (seq coll))\n    (lazy-cat [(f (first coll))] (mymap f (rest coll)))\n    (loop [p coll r []] (if (empty? p) (reverse r) (recur (rest p) (concat [(f (first p))] r))))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 118, "code": "(fn mymap [f s]\n  (when (seq s)\n  \t(lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 118, "code": "(fn maplite [f alist]\n  (if (empty? alist)\n    []\n    (cons (f (first alist)) (lazy-seq (maplite f (rest alist))))))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 118, "code": "(fn m [f col] \n(if (false? (empty? col))\n    (lazy-seq (cons (f (first col)) (m f (rest col))))))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 118, "code": "(fn m [f c] (cons (f (first c)) (if (empty? (next c)) '() (lazy-seq (m f (next c))))))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 118, "code": "(fn MAP [f col]\n  (if (empty? col)\n    '()\n    (lazy-seq (cons (f (first col)) (MAP f (rest col)))))) ;", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 118, "code": "(fn g [f [v & r]] (cons (f v) (when r (lazy-seq (g f r)))))", "user": "576e3258e4b0979f89651574"}, {"problem": 118, "code": "(fn mymap [f xs]\n (let [xsq (seq xs)]\n (lazy-seq \n (when xsq\n   (cons (f (first xsq))\n   (mymap f (rest xsq)))\n\n   ))))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 118, "code": "(fn my-map\n  [f [x & xs]]\n  (lazy-seq\n    (if xs\n      (cons (f x) (my-map f xs))\n      [(f x)])))", "user": "56bb652ae4b0f26550335953"}, {"problem": 118, "code": "(fn [f coll]\n  (letfn [(my-map [f coll]\n            (if (empty? coll)\n              nil\n              (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))]\n    (my-map f coll)))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 118, "code": "(fn my-map [f col]\n  \t(if (seq col)\n\t\t(lazy-seq (cons (f (first col)) (my-map f (rest col))))))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 118, "code": "(fn m [f xs]\n  (if (first xs)\n\t  (lazy-seq (cons (f (first xs)) (m f (rest xs))))\n  \t  []\n  )\n  )", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 118, "code": "(fn my-map [funct lst]\n  (if-not (empty? lst)\n  \t(lazy-seq (cons (funct (first lst)) (my-map funct (rest lst))))\n  \t'()))", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 118, "code": "(fn my-map2 [f lis]\n  (if (not= (first lis) nil)\n    (cons (f (first lis)) (lazy-seq (my-map2 f (rest lis))))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 118, "code": "(fn map2 [f s]\n  (if (empty? s) nil\n    (lazy-seq (cons (f (first s)) (map2 f (rest s))))))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 118, "code": "(fn my-map [f [x & r]]\n  (lazy-seq (cons (f x) (if r (my-map f r)))))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 118, "code": "(fn masp\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (masp f (rest s)))))\n   )\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (f (first s))\n                    (my-map f (rest s))))))", "user": "5151d574e4b03e678e393ae0"}, {"problem": 118, "code": "(fn fun [f [head & tail]]\n  (if (empty? tail) (list (f head))\n    \t\t\t\t(lazy-seq\n                      (cons (f head)\n                            (fun f tail)))))", "user": "51197750e4b057cba170bc99"}, {"problem": 118, "code": "(fn newmap [f coll]\n  (lazy-seq (when-not (empty? coll) (cons (f (first coll)) (newmap f (rest coll))))))", "user": "577829f9e4b0979f8965165a"}, {"problem": 118, "code": ";; first solution\n;(fn mp [f s] \n;  (when (seq s)\n;  \t(lazy-seq (cons (f (first s)) (mp f (rest s))))))\n\n;; shorter, but intent isn't clear?\n(fn [f s] (reductions #(f %2) (f (first s)) (rest s)))\n;#(reductions (fn [acc x] (%1 x)) (%1 (first %2)) (rest %2))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 118, "code": "(fn my-map [f s]\n    (when-let [ss (seq s)]\n      (lazy-seq\n       (cons (f (first ss)) (my-map f (rest ss))))))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 118, "code": "(fn mymap [f xs]\n  (when (seq xs)\n    (lazy-seq (cons (f (first xs)) (mymap f (rest xs))))))", "user": "50d3ec8be4b030b634c368bb"}, {"problem": 118, "code": "(fn my-map [f col]\n    (lazy-seq \n      (when-let [e (first col)]\n        (cons (f e) (my-map f (next col))))))", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 118, "code": "(fn map1 [f c]\n  (when-let [s (seq c)] (lazy-seq (cons (f (first s)) (map1 f (rest s))))))", "user": "5776f39de4b0979f89651643"}, {"problem": 118, "code": "(fn [f col]\n  ((fn step [xs]\n     (lazy-seq\n      (when-not (empty? xs)\n        (cons (f (first xs)) (step (rest xs))))))\n   col))", "user": "5785de4ce4b0ebec4cfb74e6"}, {"problem": 118, "code": "(fn m [f [a & b]] (lazy-seq (if a (cons (f a) (m f b)))))", "user": "5776385fe4b0979f89651632"}, {"problem": 118, "code": "(fn my-map [func coll]\n  (if-not (empty? coll)\n    \n  \n  (lazy-seq (cons (func (first coll)) (my-map func (rest coll)))\n            )\n    )\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (seq coll)\n    (cons (f (first coll))\n          (lazy-seq (my-map f (rest coll))))))", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 118, "code": "(fn mymap [f x]\n  (when \n   \t\n   (not \n\t\t(empty? x)\n\t\t \n\t)\n   (lazy-seq  \n   (cons (f  (first x)) (mymap f (rest x)))\n   ) \n )\n )", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 118, "code": "(fn map2 [f coll]\n  (if (empty? coll)\n    []\n    (cons (f (first coll))\n          (lazy-seq (map2 f (rest coll))))))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 118, "code": "(fn [f s] \n  ((fn p [t]\n     (when-not (empty? t)\n       (lazy-seq (cons (f (first t))\n                       (p (rest t))))))\n   s))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (lazy-seq\n   (cons (f x)\n         (when (seq xs)\n           (my-map f xs)))))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 118, "code": "(fn [f s] \n  ((fn p [t]\n     (when-not (empty? t)\n       (lazy-seq (cons (f (first t))\n                       (p (rest t))))))\n   s))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 118, "code": "(fn Map [f s]\n  (lazy-seq \n   (when-let [se (seq s)]\n     (cons (f (first se)) (Map f (rest se))))))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 118, "code": "(fn m [f [o & r :as l]]\n\n  (if (empty? l)\n\n    '()\n\n    (lazy-seq\n\n      (cons (f o)\n\n            (m f r)))))", "user": "50e5bca5e4b09ae9427b0e75"}, {"problem": 118, "code": "(fn my-map [pred [fst & rst :as xs]]\n  (lazy-seq (when (seq xs) (cons (pred fst) (my-map pred rst)))))", "user": "56795deae4b05957ce8c6187"}, {"problem": 118, "code": "(fn funkk [f coll]\n   (if (empty? coll)\n     []\n     (lazy-seq (cons (f (first coll)) (funkk f (rest coll))))))", "user": "571cd9dce4b0145328a76271"}, {"problem": 118, "code": "(fn [f s] (rest (reductions #(f %2) 0 s)))", "user": "577202d2e4b0979f896515c0"}, {"problem": 118, "code": "(fn m [f [x & xs]]\n  (lazy-seq \n   (if (nil? x)\n        []\n        (cons (f x) (m f xs)))))", "user": "571346c0e4b07c98581c3a9b"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s)\n    ()\n    (lazy-seq (cons (f (first s)) (mymap f (rest s))))\n    )\n  )", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 118, "code": "(fn my-map [op s]\n  (if (empty? s)\n    (list)\n    (cons (op (first s)) (lazy-seq (my-map op (next s))))\n  )\n)", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 118, "code": "(fn map2 [f xs]\n  (if (empty? xs) ()\n    (lazy-seq (cons (f (first xs)) (map2 f (rest xs))))))", "user": "57717915e4b0979f896515b3"}, {"problem": 118, "code": "(fn self [f s]\n  (let [s (seq s)]\n    (if s\n        (lazy-seq (cons (f (first s)) (self f (rest s))))\n        ())))", "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"problem": 118, "code": "(fn map' [f coll]\n   (if (empty? coll)\n     []\n     (lazy-seq (cons (f (first coll)) (map' f (rest coll))))))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 118, "code": "(fn m\n  [f c]\n  (lazy-seq (when-not (empty? c)\n              (cons (f (first c)) (m f (rest c))) )\n            ))", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n(cons (f (first coll)) (mymap f (rest coll))))))", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 118, "code": "(fn my-map [f col]\n  (lazy-seq\n   (when-let [s (seq col)]\n     (cons (f (first s)) (my-map f (rest s))))))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if-let [f1 (first s)]\n    (cons (f f1) (lazy-seq (my-map f (rest s))))))", "user": "5033ed65e4b062bc5d7ae15a"}, {"problem": 118, "code": "(fn m [f s]\n  (when (not-empty s)\n    (cons (f (first s)) (lazy-seq (m f (rest s))))))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 118, "code": "(fn mymap\n  ([f coll]\n   (when (seq coll)\n     (lazy-seq (cons (f (first coll)) (mymap f (rest coll)))))))", "user": "53ae0c50e4b047364c044471"}, {"problem": 118, "code": "(fn m [f xs]\n  (if (empty? xs) \n    () \n    (lazy-seq (cons (f (first xs)) (m f (rest xs))))))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 118, "code": "(fn mmp\n  ([f s] (mmp f s (= (rest s))))\n  ([f s b] (if b (cons (f (first s)) (lazy-seq (mmp f (rest s) (not (= (rest s) [])))))))\n  )", "user": "4e5e9f6b535d8a8b8723a2d2"}, {"problem": 118, "code": "(fn xmap [f lst] \n  (cons(f (first lst))\n    (lazy-seq \n        (if (not (seq (rest lst))) \n            (second lst) \n            (xmap f (rest lst)))) ))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "571dd145e4b0145328a76283"}, {"problem": 118, "code": "(fn fun118\n  [func sqnce]\n  (cons (func (first sqnce)) (if (seq (rest sqnce))\n                             (lazy-seq (fun118 func (rest sqnce)))\n                             (list))))", "user": "5075e374e4b09049dea827a5"}, {"problem": 118, "code": "(fn lazymap2 [f s]\n  (if (seq s)\n    (lazy-seq (cons (f (first s)) (lazymap2 f (rest s))))))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 118, "code": "(fn re-map [f col]\n    (if (empty? col)\n      '()\n      (lazy-seq\n        (cons (f (first col)) (re-map f (rest col))))))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 118, "code": "(fn rp [f x]\n    (if (empty? x)\n      []\n      (cons (f (first x)) (lazy-seq (rp f (rest x))))))", "user": "4e837808535db62dc21a62d9"}, {"problem": 118, "code": "(fn lmap [ f [ x & xs ] ]\n    (lazy-seq\n     (if (nil? x) []\n         (cons (f x) (lmap f xs)))))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 118, "code": "(fn foo [f s]  \n   (lazy-seq \n    (when-let [ss (seq s)]\n      (cons (f (first s)) (foo f (next s)))\n      )\n    )\n)", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 118, "code": "(fn my-map\n  ([f s] (my-map f s (empty s)))\n  ([f s result]\n   (if (empty? s) result\n                  (lazy-seq \n                    (cons (f (first s)) \n                          (my-map f (rest s) \n                                  result))))))", "user": "4e9ff8d0535d7eef3080729c"}, {"problem": 118, "code": "(fn my-map\n  ([f xs]\n   (my-map f xs nil))\n\n  ([f xs r]   \n   (lazy-seq\n    (if-not (seq xs)\n      r\n      (cons (f (first xs))\n            (my-map f (next xs) nil))))))", "user": "56eab346e4b04a395b9a0410"}, {"problem": 118, "code": "(fn mp[f [s & r]] (if s (lazy-seq (cons (f s) (mp f r))) nil))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 118, "code": "(fn mmap [f xs]\n  (lazy-seq\n    (if (seq xs)\n      (cons (f (first xs)) (mmap f (rest xs)))\n      [])))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 118, "code": "(fn mmap [f c]\n  (if (seq c)\n    (lazy-seq\n     (cons (f (first c))\n           (mmap f (rest c))))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 118, "code": "(fn a [f c] (when-not (empty? c) (lazy-seq (cons (f (first c)) (a f (rest c))))))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 118, "code": "(fn test [f seqq]\n  (cond (empty? seqq) nil\n        :else\n        (lazy-seq (cons (f (first seqq))\n              (test f (rest seqq))))))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 118, "code": "(fn m\n  [f c]\n  (if (nil? c)\n    []\n    (cons (f (first c))\n          (lazy-seq (m f (next c))))))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 118, "code": "(fn mm [f seq]\n  (if (empty? seq) '()\n      (lazy-seq (cons (f (first seq)) (mm f (rest seq))))))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 118, "code": "(fn g[f l]\n  (if (empty? l)\n    []\n  \t(cons (f (first l)) (lazy-seq (g f (rest l))))))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 118, "code": "(fn mm \n  ([func coll] \n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (func (first coll)) (mm func (rest coll) ))))))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 118, "code": "(fn it [xfn coll]                                                                                                   \n   (if coll (cons (xfn (first coll)) (lazy-seq (it xfn (next coll)) ) ) [])                                          \n   )", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 118, "code": "(fn mymap[f s]\n  (when (first s)\n    (lazy-seq\n     (cons (f (first s)) (mymap f (next s))))))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 118, "code": "(fn mymap [f coll] (lazy-seq (if-let [[h & r] (seq coll)] (cons (f h) (mymap f r)))))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 118, "code": ";(fn [f s] (for [x s] (f x)))\n(fn g [f [l & r]] (cons (f l) (lazy-seq (if r (g f r)))))", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 118, "code": "(fn mf [f x] \n   (if-let [a (first x)]\n        (cons (f a) (lazy-seq (mf f (rest x))))\n        '()\n   ))", "user": "57c99a45e4b05aa3c4741d31"}, {"problem": 118, "code": "(fn m [f coll] (lazy-seq (if-not (empty? coll)\n                           (cons (f (first coll))\n                            \t   (m f (rest coll))))))", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 118, "code": "(fn mymap [fun lst]\n  (lazy-seq (if (empty? lst)\n    []\n    (cons (fun (first lst)) (mymap fun (rest lst)))\n   ))\n )", "user": "57cf03c0e4b00451144b04f9"}, {"problem": 118, "code": "(fn my-map [f [head & tail]]\n  (lazy-seq (cons (f head) (when (seq tail) (my-map f tail)))))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 118, "code": "(fn m[f coll] (if (seq coll) (lazy-seq (cons (f (first coll)) (m f (rest coll))))))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 118, "code": "(fn mapp [f s]\n  (if (seq s)\n    (lazy-seq (cons (f (first s)) (mapp f (rest s))))\n    '())\n  )", "user": "57cd7498e4b0c746388ab897"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (lazy-seq \n   (when-let [s (seq coll)] \n     (cons (f (first s)) (my-map f (rest s)))\n     )\n   )\n  )", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 118, "code": "(fn map-3 [func seq]\n    (lazy-seq \n        (if (empty? seq)\n            nil\n            (cons (func (first seq)) (map-3 func (rest seq))))))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 118, "code": "(fn m [f c] (if (seq c) (lazy-seq (cons (f (first c)) (m f (rest c))))))", "user": "4f1052b9535d64f603146418"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 118, "code": "(fn pam[f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n        (cons (f (first s)) (pam f (rest s))))))", "user": "524ac3d1e4b09eba1c0223a0"}, {"problem": 118, "code": "(fn map2 [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first coll)) (map2 f (rest coll))))))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 118, "code": "(fn m [f c]\n   (if c\n     (cons (f (first c)) (lazy-seq (m f (next c))))\n     []))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 118, "code": "(fn x [f a] (lazy-seq\n\t(when (not (empty? a))\n\t\t(cons (f (first a)) (x f (rest a))))))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 118, "code": "(fn iter [f l]\n  (if (empty? l) []\n    (lazy-seq (cons (f (first l)) (iter f (rest l))))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 118, "code": "(fn m [f [x & xs]]\n    (when x\n      (lazy-seq (cons (f x) (m f xs)))))", "user": "55568a7de4b0deb715856e1c"}, {"problem": 118, "code": "(fn map* [f coll]\n  (lazy-seq\n   (when-not (empty? coll)\n    (cons (f (first coll)) (map* f (rest coll))))))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 118, "code": "(fn do-map [f col]\n  ((fn step [xs]\n     (lazy-seq\n      (when-not (empty? xs)\n        (cons (f (first xs)) (step (rest xs))))))\n   col))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 118, "code": "(fn my-map [f s]\n  (reductions #(f %2) (f (first s)) (rest s)))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 118, "code": "(fn mymap [f s]\n       (when-not (empty? s)\n         (cons (f (first s))\n           (lazy-seq (mymap f (rest s))))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 118, "code": "(fn mapper [func [first-arg & other-args]]\n    (if first-arg\n      (lazy-seq (cons (func first-arg) (mapper func other-args)))))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 118, "code": "(fn my-map [f col]\n  (lazy-seq\n    (when col (cons (f (first col)) (my-map f (next col))))))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 118, "code": "(fn [f coll]\n  (letfn [(i [ff c]\n             (if (seq c)\n               (lazy-seq (cons (ff (first c))\n                               (i ff (rest c))))))]\n    (i f coll)))", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 118, "code": "(fn m [f [elem & rest]] (lazy-seq (cons (f elem) (if (empty? rest) '() (m f rest)))))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 118, "code": "(fn map-fn [f xs]\n  (if (empty? xs)\n    ()\n    (cons (f (first xs)) (lazy-seq (map-fn f (rest xs))))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 118, "code": "(fn remap\n  [f col]\n  (let [h (f (first col)) t (rest col)]\n    (if (empty? t)\n      [h]\n     (cons h (lazy-seq (remap f t))))))", "user": "576df252e4b0979f8965156f"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (seq coll)\n    (cons (f (first coll))\n          (lazy-seq (my-map f (rest coll))))\n    '()))", "user": "5649b1b0e4b0284900eef646"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (if (seq xs)\n    (cons (f (first xs)) (lazy-seq (my-map f (rest xs))))\n    nil))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 118, "code": "(fn mp [f sq] \n  (lazy-seq \n   (when-let [[x & more] (seq sq)] \n     (cons (f x) \n           (mp f more)))))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 118, "code": "(fn yo [f s]\n  (if (empty? s)\n    []\n  \t(let [[el & remain] s]\n      (cons (f el) (lazy-seq (yo f remain))))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 118, "code": "(fn stupid-map [f coll]\n   (lazy-seq\n     (when-let [s (seq coll)]\n       (cons (f (first s)) (stupid-map f (rest s))))))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 118, "code": "(fn g\n  [f c]\n  (when c\n    (cons (f (first c))\n          (lazy-seq (g f (next c))))))", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 118, "code": "(fn re-implement-map \n  [f lst]\n  (if (seq lst) \n    (lazy-seq(cons (f (first lst)) (re-implement-map f (rest lst))))\n      nil))", "user": "57f8153de4b0d3187e900916"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s)\n    []\n    (lazy-seq (concat [(f (first s))] (mymap f (rest s))))))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 118, "code": "(fn mapp [f col] \n  (lazy-seq \n    (when-let [x (seq col)] \n      (cons (f (first col)) (mapp f (rest col))))))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 118, "code": "(fn lazy-map [f xs]\n  (lazy-seq \n   (when-let [s (seq xs)]\n   \t(cons (f (first s)) (lazy-map f (rest s))))))", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 118, "code": "(fn re-implement-map [f c]\n  (if (not (empty? c))\n    (lazy-seq\n      (cons (f (first c))\n            (re-implement-map f (rest c))))))", "user": "57f81524e4b0d3187e900913"}, {"problem": 118, "code": "(fn m [f coll]\n  (rest (reductions #(f %2) [] coll)))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 118, "code": "(fn l-s [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (f (first s)) (l-s f (rest s))))))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 118, "code": "(letfn [\n  (f-seq [f cs]\n   (lazy-seq (if (empty? cs) nil (cons (f (first cs)) (f-seq f (rest cs))))))] (fn [g coll] (f-seq g coll)) )", "user": "57f9011ee4b0d3187e900935"}, {"problem": 118, "code": "(fn m [f c]\n  (if (not (empty? c))\n    (lazy-seq\n      (cons (f (first c))\n            (m f (rest c))))))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 118, "code": "(fn my-map [f lst]\n  (if (empty? lst)\n    '()\n    (lazy-cat (list (f (first lst))) (my-map f (rest lst)))\n    )\n  )", "user": "57f81045e4b0d3187e90090f"}, {"problem": 118, "code": "(fn m-map\n  [func a]\n  (if (empty? a)\n    nil\n    (lazy-seq (cons (func (first a)) (m-map func (rest a))))\n    )\n  )", "user": "57f81532e4b0d3187e900914"}, {"problem": 118, "code": "(fn nmp [fnc lst]\n  (lazy-seq\n    (when (seq lst)\n      (cons (fnc (first lst)) (nmp fnc (rest lst))))))", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 118, "code": "(fn my-map\n  ([f c1]\n   (lazy-seq (let [s1 (seq c1)]\n               (when s1\n                 (cons (f (first s1)) (my-map f (rest s1))))))))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s)\n    s\n    (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "user": "57f81549e4b0d3187e900918"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (my-map f (rest coll))))))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 118, "code": "(fn my-map2\n  [f lst]\n  (lazy-seq \n          (if (not (empty? lst))\n              (cons (f (first lst)) (my-map2 f (rest lst))))))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 118, "code": "(fn re-map\n\t[f lst]\n\t(if (seq lst)\n\t\t(lazy-seq (cons (f (first lst))  (re-map f (rest lst))))\n\t\tnil))", "user": "57f81544e4b0d3187e900917"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 118, "code": "(fn mymap [f lst]\n  (if (not (empty? lst))\n        (lazy-seq\n          (cons (f (first lst)) (mymap f (rest lst))))))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 118, "code": "(fn my-map \n  [f lst]\n  (lazy-seq\n   (if (seq lst)\n     (cons (f (first lst)) (my-map f (rest lst))))))", "user": "57f81534e4b0d3187e900915"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "57f81569e4b0d3187e900919"}, {"problem": 118, "code": "(fn my-map [func a-seq]\n  (if (empty? a-seq)\n    []\n    (cons (func (first a-seq)) (lazy-seq (my-map func (rest a-seq))))))", "user": "574e84e0e4b02ea114799243"}, {"problem": 118, "code": "(clojure.core/fn\n  my-map\n  [f coll]\n  (when (seq coll) (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 118, "code": "(fn mapper [f items]\n  (when (seq items)\n  (lazy-seq (cons (f (first items)) (mapper f (rest items))))))", "user": "51a54fb4e4b0def3c5c586a3"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (when-not (empty? coll)\n    (lazy-seq (cons (-> coll first f) \n                    (mymap f (rest coll))))))", "user": "55cc6c35e4b0e31453f64a10"}, {"problem": 118, "code": "(fn ! [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll))\n                    (! f (rest coll))))))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (lazy-seq\n    (if (empty? coll) \n      []\n      (cons (f (first coll)) (mymap f (rest coll))))))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 118, "code": "(fn myMap [f items]\n  (if (not-empty items) \n    (lazy-seq (cons (f (first items)) (myMap f (rest items))))))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 118, "code": "(fn __ [f [e & r]]\n  (lazy-seq\n    (when e\n      (cons (f e) (__ f r)))))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 118, "code": "(fn Map [f col]\n  (lazy-seq\n    (when-let [s (seq col)]\n       (cons (f (first s)) (Map f(rest s))))))", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (false? (empty? coll))\n    (lazy-seq\n      (cons (f (first coll)) (my-map f (rest coll))))))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 118, "code": "(fn my-map [f sq]\n    (lazy-seq\n     (if (empty? sq) nil (cons (f (first sq)) (my-map f (rest sq))))))", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 118, "code": "(fn map-seq [f lst]\n  (if (empty? lst)\n    '()\n    (lazy-seq (cons (f (first lst)) (map-seq f (rest lst))))))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (not-empty coll)\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (lazy-seq\n    (if (not (empty? coll))\n      (cons (f (first coll)) (my-map f (rest coll))))))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 118, "code": "(fn maplazy [f s]\n  (lazy-seq (if (empty? s)\n              nil\n              (cons (f (first s))\n                    (maplazy f (rest s))))))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 118, "code": "(fn map-own [func coll]\n  (let [step (fn [f c]\n               (when-let [s (seq c)]\n                 (cons (f (first c)) (map-own f (rest c)))))]\n    (lazy-seq (step func coll))))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 118, "code": "(fn mp \n    [func col]\n    (if (not (empty? col))\n        (lazy-seq\n          (cons (func (first col)) (mp func (rest col))))))", "user": "564d3169e4b0284900eef67c"}, {"problem": 118, "code": "(fn nmap [f args] (if (empty? args) nil (lazy-seq (cons (f (first args)) (nmap f (rest args))))))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 118, "code": "(fn [f x] (rest (reductions #(f %2) nil x)))", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 118, "code": "(fn mm [f xs]\n  (if (empty? xs)\n    '()\n    (lazy-seq (cons (f (first xs)) (mm f (rest xs))))))", "user": "56069006e4b08b23635d3174"}, {"problem": 118, "code": "(fn ezmap [f coll] (if (not (empty? coll)) (lazy-seq (cons (f (first coll)) (ezmap f (rest coll))))))", "user": "5254b45fe4b0541d1855b9a0"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (let [coll (seq coll)]\n    (if coll\n      (lazy-seq (cons (f (first coll))\n                      (my-map f (rest coll))))\n      '())))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 118, "code": "(fn ans [f coll]\n    (if (empty? coll) '() (lazy-seq (cons (f (first coll)) (ans f (rest coll))))))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 118, "code": "(fn f118 [f coll]\n  (if (empty? coll)\n    nil\n   (lazy-seq (cons (f (first coll)) (f118 f (rest coll))))))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 118, "code": "(fn mymap [f [h & t]]\n  (if (nil? t)\n    (if (nil? h)\n      (lazy-seq)\n      (lazy-seq (list (f h))))\n    (lazy-seq (cons (f h) (mymap f t)))))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 118, "code": "(fn mp [f sq]\n  (if (false? (empty? sq))\n        (lazy-seq\n          (cons (f (first sq)) (mp f (rest sq))))))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 118, "code": "(fn new-map\n  [f [h & t]]\n  (if (nil? h)\n    nil\n    (lazy-seq (cons (f h) (new-map f t)))))", "user": "58152157e4b0f478707a0631"}, {"problem": 118, "code": "(fn map' [f xs]\n  (lazy-seq \n    (when (seq xs) \n      (cons (f (first xs)) (map' f (rest xs))))))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 118, "code": "(fn mp [f s]\n    (if (empty? s)\n      nil\n      (lazy-seq (cons (f (first s)) (mp f (rest s))))))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 118, "code": "(fn mapp [f xs]\n    (lazy-seq (if (empty? xs), nil,\n                (cons (f (first xs))\n                      (mapp f (rest xs))))))", "user": "515cf9b5e4b00901442db1d4"}, {"problem": 118, "code": "(fn mp [f sq] (when-let [s (seq sq)]\n                (lazy-seq (cons (f (first s)) (mp f (rest s))))))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 118, "code": "(fn a [f c]\n  (if (seq c)\n    (lazy-seq\n    (cons (f (first c)) (a f (rest c))))))", "user": "5405885ee4b0addc1aec6668"}, {"problem": 118, "code": "(fn m [f [x & xs]]\n  (if x (cons (f x) (lazy-seq (m f xs)))))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 118, "code": "(fn mapp [f [one & more]]\n  (if (nil? one)\n    []\n  \t(lazy-seq (cons (f one) (mapp f more)))))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 118, "code": "(fn map' [f xs]\n  (if (empty? xs)\n    '()\n    (lazy-seq\n  \t  (cons (f (first xs))\n            (map' f (rest xs))))))", "user": "58247423e4b051871117bec5"}, {"problem": 118, "code": "#_(fn \n  [f coll]\n  (loop [i (- (count coll) 1)\n         result []]\n    (if (< i 0)\n      (lazy-seq result)\n      (recur (dec i) (cons (f (nth coll i)) result)))))\n\n(fn map- \n  [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (map- f (rest s))))))", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 118, "code": "(fn ewe [f [x & xs]]\n  (if x\n  (lazy-seq (cons (f x) (ewe f xs)))\n  []))", "user": "56193c6ee4b053970a773af2"}, {"problem": 118, "code": "(fn mp [f col](if(false?(empty? col))(lazy-seq(cons(f(first col))(mp f(rest col))))))", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 118, "code": "(fn mapp\n  [f x]\n  (if (not= x [])\n    (lazy-seq (cons (f (first x)) (mapp f (rest x))))))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 118, "code": ";(fn [f x]\n;  (reduce #(conj %1 (f %2)) [] x))\n\n(fn mapimpl [f x]\n  (if (not-empty x)\n    (lazy-seq\n     (cons (f (first x)) (mapimpl f (rest x))))))", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 118, "code": "(fn m [f [x & xs]](if xs (lazy-seq (cons (f x)(m f xs))) (lazy-seq (vector (f x)))))", "user": "57752a2de4b0979f89651613"}, {"problem": 118, "code": "(fn my-map [f coll]\n   (if (empty? coll)\n     nil\n     (lazy-seq\n      (cons (f (first coll))\n            (my-map f (rest coll))))))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 118, "code": "(fn map' [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq\n      (cons (f (first coll)) (map' f (rest coll))))))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 118, "code": "(fn mymap [f [x & r :as args]] (if (empty? args) (list) (lazy-seq (cons (f x) (mymap f r)))))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s) s\n    (lazy-seq (cons (f (first s))\n                    (my-map f (rest s))))))", "user": "5829d588e4b051871117bf4a"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (if-not (empty? coll)\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "58303fc3e4b051871117c006"}, {"problem": 118, "code": "(fn mymap [f coll]\n    (when (seq coll)\n        (lazy-seq \n            (cons \n                (f (first coll))\n                (mymap f (rest coll))))))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 118, "code": "(fn mapp [f coll] \n  (if-not (empty? coll)\n    (lazy-seq (cons (f (first coll)) (mapp f (rest coll))))))", "user": "5665ef78e4b0e91d5f5c5664"}, {"problem": 118, "code": "(fn mp [f [x & xs]] \n(if (nil?  x) [] \n(cons (f x) (lazy-seq (mp f xs) ))) \n)", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 118, "code": "(fn mymap [f s] \n\t(if (empty? s) \n\t\ts \n\t\t(lazy-seq(cons (f (first s)) (mymap f (rest s)) ))\n\t)\n)", "user": "580c8fcee4b0849f6811b721"}, {"problem": 118, "code": "(fn mm [f x] (if (empty? x) nil (lazy-cat [(f (first x))] (mm f (rest x)))))", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 118, "code": "(fn g [f s]\n  (lazy-seq\n   (if (seq s)\n     (cons (f (first s))\n           (g f (rest s))))))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 118, "code": "(fn map+\n  [f coll]\n  (lazy-seq (if (empty? coll) '() (cons (f (first coll)) (map+ f (rest coll))))))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 118, "code": "(fn mymap [f xs]\n  (when\n    (not-empty xs)\n    (let \n      [[xh & xt] xs] \n      (cons\n       (f xh)\n       (lazy-seq (mymap f xt))\n       )\n      )\n    )\n  )", "user": "58334d18e4b089d5ab817c97"}, {"problem": 118, "code": "(fn map' [f xs]\n  (when (seq xs)\n    (lazy-seq (cons (f (first xs)) (map' f (rest xs))))))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 118, "code": "(fn foo [f coll] (if (empty? coll) '() (lazy-seq (cons (f (first coll)) (foo f (rest coll))))))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 118, "code": "(fn m [f coll] (lazy-seq (when-let [s (seq coll)] (cons (f (first s)) (m f (rest s))))))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 118, "code": "(fn map2 [f coll]\n  (if (empty? coll)\n    coll\n    (cons\n     (f (first coll))\n     (lazy-seq (map2 f (rest coll))))))", "user": "5779556de4b0979f8965166e"}, {"problem": 118, "code": "(fn mymap [f coll]\n   (lazy-seq\n     (cons (f (first coll))\n           (if (next coll) (mymap f (next coll))))))", "user": "582e0afde4b051871117bfd5"}, {"problem": 118, "code": "(fn ali\n  [f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (ali f (rest s))))))", "user": "583c8bd4e4b089d5ab817d81"}, {"problem": 118, "code": "(fn m [f [h & r]] (lazy-seq (cons (f h) (if r (m f r)))))", "user": "58391c94e4b089d5ab817d35"}, {"problem": 118, "code": "(fn m [f xs]\n  (when (seq xs)\n    (lazy-seq (cons (f (first xs))\n                    (m f (rest xs))))))\n\n; golf\n;#(rest(reductions(fn[_ x](% x))0%2))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 118, "code": "(fn m [f [x & xs]]\n  (if xs\n    (lazy-seq (cons (f x) (m f xs)))\n    [(f x)]))", "user": "4db86aee535d1e037afb2193"}, {"problem": 118, "code": "(fn m [f s]\n  (lazy-seq\n   (if (seq s)\n     (cons (f (first s)) (m f (rest s))))))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 118, "code": "(fn m [f xs] (if (empty? xs) '() (let [fst (first xs) r (rest xs)] (cons (f fst) (lazy-seq (m f r))))))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 118, "code": "(fn mymap [func coll]\n\t(if-not (empty? coll)\n\t\t(lazy-seq (cons (func (first coll)) (mymap func (rest coll))))\n\t\t)\n\t)", "user": "57465429e4b009280f9f2b60"}, {"problem": 118, "code": "(fn f [f' [x & xs]]\n               (lazy-seq (when x\n                           (cons (f' x)\n                                 (f f' xs)))))", "user": "4e77c1db535d324fb2983d72"}, {"problem": 118, "code": ";;(fn marp\n;;  [f s]\n;;  (loop [s1 s result []]\n;;    (if (nil? (first s1))\n;;      result\n;;      (recur \n;;        (rest s1)\n;;        (conj result (f (first s1)))))))\n\n   \n(fn marp2\n  [f s]\n  (if (false? (empty? s))\n        (lazy-seq\n          (cons (f (first s)) (marp2 f (rest s))))))", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 118, "code": "(fn mymap\n  [f items]\n  (lazy-seq\n           (if (seq items)\n             (cons (f (first items)) (mymap f (rest items)))\n             nil)))", "user": "583166c1e4b051871117c025"}, {"problem": 118, "code": "(fn test\n  [f l]\n  (if (seq l)\n    (cons (f (first l)) (lazy-seq (test f (rest l))))))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if-not (empty? s)\n    (lazy-seq\n      (cons (f (first s)) (my-map f (rest s))))))", "user": "53572767e4b04ce2eb3ed277"}, {"problem": 118, "code": "(fn my-map \n  ([f coll]\n    (lazy-seq\n     (when-let [s (seq coll)]\n       (cons (f (first s)) (my-map f (rest s)))))))", "user": "56f4cedce4b046a417f92063"}, {"problem": 118, "code": "(fn my-map [f  [a & r]](if r (lazy-seq (cons (f a) (my-map f r))) [(f a)]))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 118, "code": "(fn new-map [f coll]\n  (lazy-seq\n   (when (seq coll)\n     (cons (f (first coll)) (new-map f (rest coll))))))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 118, "code": "(fn mmm [f s]\n  (if (not (empty? s))\n    (lazy-seq\n     (cons (f (first s)) \n            (mmm f (rest s))))))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 118, "code": "(fn m [f coll]\n\n  (lazy-seq\n\n    (when (seq coll)\n\n       (cons (f (first coll)) (m f (rest coll))))))", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 118, "code": "(fn mmap [f li]\n  (lazy-seq\n    (if \n      (empty? li)\n      nil\n      (cons (f (first li)) (mmap f (rest li))))))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 118, "code": "(fn h [f s]\n   (if (empty? s)\n     []\n     (lazy-seq (cons (f (first s)) (h f (rest s))))\n     )\n   )", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 118, "code": "(fn [fun lis]\n  (reductions #(fun %2) (fun (first lis)) (rest lis)))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 118, "code": "(fn t [f xs] (lazy-seq (when-let [x (seq xs)]\n             (cons (f (first x)) (t f (rest x))))))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll)\n    (empty coll)\n  \t(lazy-seq \n   \t\t(cons (f (first coll))\n              (my-map f (rest coll))))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 118, "code": "(fn my-map [f iv]\n  (if-let [iv (seq iv)]\n    (lazy-seq (cons (f (first iv)) (my-map f (rest iv))))\n    []))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 118, "code": "(fn mymap [f coll] \n  (lazy-seq \n   (if (empty? coll) \n     '()\n     (cons (f (first coll)) \n   (mymap f (rest coll))))))", "user": "585481e0e4b07779d46863fe"}, {"problem": 118, "code": "(fn [f col]\n  (cons (f (first col)) (rest (reductions #(f %2) col))))", "user": "51456858e4b0e88796073408"}, {"problem": 118, "code": "(fn m [f [h & t :as v]] \n  (if (empty? v)\n      ()\n      (lazy-seq (cons (f h) (m f t)))))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 118, "code": "(fn m2 [f coll]\n  (lazy-seq\n   (when (seq coll)\n     (cons (f (first coll)) (m2 f (rest coll))))))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 118, "code": "(fn test53 [f args]\n  (if (empty? (rest args))\n    (vector (f (first args)))\n    (lazy-seq (cons (f (first args)) (test53 f (rest args))))))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 118, "code": "(fn m [f x] (let [x (seq x)] (if x (lazy-seq (cons (f (first x)) (m f (next x)))))))", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 118, "code": "(fn u [f s]\n  (if (empty? s)\n    []\n    (lazy-seq (cons (f (first s)) (u f (rest s))))))", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (my-map f (rest s))))))", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 118, "code": "(fn\n  [f s]\n  (letfn [(st [s]\n            (let [[x & xs] s]\n              (when (not (nil? x))\n                (lazy-seq (cons (f x) (st xs))))))]\n    (st s)))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 118, "code": "(fn mmap\n  [f a]\n  (if (empty? a) []\n      (lazy-seq (cons (f (first a)) (mmap f (rest a))))))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 118, "code": "(fn m [f xs]\n  (lazy-seq \n   (when (seq xs)\n     (cons (f (first xs)) (m f (rest xs))))))", "user": "55597b84e4b0deb715856e36"}, {"problem": 118, "code": "(fn mymap [f c] (when (not-empty c) (lazy-seq (cons (f (first c)) (mymap f (rest c))))))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (seq coll)\n    (lazy-seq (cons (f (first coll)) (my-map f (next coll))))\n    coll))", "user": "4f3ca5a6e4b0e243712b1f53"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (my-map f (rest s))))))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (not (empty? s))\n    (lazy-seq\n      (cons (f (first s))\n            (my-map f (rest s))))))", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 118, "code": "(fn foo [func coll]\n  (when (seq coll)\n    (lazy-seq (cons (func (first coll)) (foo func (rest coll))))))", "user": "58740c18e4b01531a375ea49"}, {"problem": 118, "code": "(fn map2 [f coll] (if (empty? coll) coll (lazy-seq (cons (f (first coll)) (map2 f (rest coll))))))", "user": "51a132cee4b0b292b01ee3ff"}, {"problem": 118, "code": "(fn m ([f s] (m f s 0))([f s n] (if (empty? s) () (cons (f (first s)) (lazy-seq (m f (rest s) (inc n)))))))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 118, "code": "(fn map2 [f [a & r]] (if r (lazy-seq (cons (f a) (map2 f r))) [(f a)]))", "user": "4f3b5219e4b0e243712b1f2a"}, {"problem": 118, "code": "(fn map-clone [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (map-clone f (rest s))))))", "user": "5879d577e4b01531a375ead8"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (not-empty coll)\n    (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (when (seq xs)\n    (cons (f (first xs))\n          (lazy-seq (my-map f (rest xs))))))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 118, "code": "(fn mp [f [x & xs]]\n\n  (if (= xs nil)\n\n    (cons (f x) [])\n\n    (cons (f x) (lazy-seq(mp f xs)))))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 118, "code": "(fn m [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll)) (m f (rest coll))))))", "user": "586b6f13e4b01531a375e959"}, {"problem": 118, "code": "(fn m [f xs]\n  (if (empty? xs) [] (lazy-seq (cons (f (first xs)) (m f (rest xs))))))", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 118, "code": "(fn mfn [f s]\n  (if (not-empty s)\n    (cons (f (first s))\n      (lazy-seq (mfn f (rest s))))))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 118, "code": ";  (fn [a b]\n;    (loop [x b y []]\n;      (if (not (seq x))\n;        y\n;        (recur (rest x) (conj y (a (first x)))))))\n    \n;lazy-seq\n\n(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "582c526ae4b051871117bf88"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "58852909e4b0f1effa3b76af"}, {"problem": 118, "code": "(fn mep [f c]\n  (if (not (empty? c))\n    (lazy-seq (cons (f (first c)) (mep f (rest c))))))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 118, "code": "(fn map-2 [f xs]\n  (when xs\n    (cons (f (first xs)) (lazy-seq (map-2 f (next xs))))))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 118, "code": "(fn x [f col]\n  (if (empty? col)\n    '()\n  (cons (f (first col)) (lazy-seq (x f (rest col))))))", "user": "58840023e4b0f1effa3b768b"}, {"problem": 118, "code": "(fn mp [f [o & r]]\n  (if (empty? r)\n      [(f o)]\n      (cons (f o) (lazy-seq (mp f r)))))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 118, "code": "(fn foo [f xs] \n  (if (empty? xs) \n    [] \n    (lazy-seq (cons (f (first xs)) (foo f (rest xs))))))", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 118, "code": "(fn mymap [foo xs]\n  (if (empty? xs)\n    '()\n    (lazy-seq\n      (cons\n        (foo (first xs))\n        (mymap foo (rest xs))))))", "user": "562add6de4b00e49c7cb4834"}, {"problem": 118, "code": "(fn vvv [f l] (lazy-seq (cons (f (first l)) (if (seq (rest l)) (vvv f (rest l))))))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 118, "code": "(fn map2 [f args]\n  (lazy-seq\n   (cons\n    (f (first args))\n    (when-not (empty? (rest args))\n      (map2 f (rest args))))))", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 118, "code": "(fn my-map [f col]\n   (if (first col)\n     (lazy-seq (cons (f (first col)) (my-map f (rest col))))\n     (lazy-seq)))", "user": "587ee260e4b052da650a6353"}, {"problem": 118, "code": "(fn my-map [f s]\n         (if s (lazy-seq (cons (f (first s)) (my-map f (next s))))))", "user": "58949f8de4b00487982d525e"}, {"problem": 118, "code": "(fn map* [f lst]\n  (lazy-seq (when-let [s (seq lst)]\n              (cons (f (first s))\n                    (map* f (next s))))))", "user": "5895477fe4b00487982d527c"}, {"problem": 118, "code": "(fn mp [f [x & xs]]  \n  (lazy-seq (if (nil? x) [] (cons (f x) (mp f xs)))))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (seq coll)\n    (lazy-seq\n      (cons (f (first coll))\n            (my-map f (rest coll))))))", "user": "576e607ae4b0979f89651579"}, {"problem": 118, "code": "(fn my-map [f coll]\n    (if (not (empty? coll))\n        (cons (f (first coll))\n              (lazy-seq (my-map f (rest coll))))))", "user": "5896735fe4b00487982d529d"}, {"problem": 118, "code": "(fn\n  [func coll]\n  ((fn do-map\n     [unmapped mapped]\n     (if (empty? unmapped)\n       mapped\n       (lazy-seq\n        (cons\n         (func (first unmapped))\n         (do-map (rest unmapped) mapped))))) coll '()))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    []\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 118, "code": "(fn re-map [func coll]\n  (if (not-empty coll)\n    (lazy-seq (cons (func (first coll)) (re-map func (rest coll))))))", "user": "588f500ae4b00487982d51a4"}, {"problem": 118, "code": "(fn m [f [x & xs]]\n  (lazy-seq\n   (when x\n     (cons (f x) (m f xs)))))", "user": "5458c74de4b01be26fd74623"}, {"problem": 118, "code": "(fn map-recur\n  [f item-list] (if (empty? item-list) nil (lazy-seq (cons (f (first item-list)) (map-recur f (rest item-list))))))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 118, "code": "(fn this [f s]\n  (if (seq s)\n    (lazy-seq (cons (f (first s)) (this f (rest s))))\n    []))", "user": "58923efce4b00487982d521c"}, {"problem": 118, "code": "(fn _ [f v]\n  (if (not (nil? v))\n    (lazy-seq (cons (f (first v)) (_ f (next v))))))", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 118, "code": "(fn fun [f s]\n  (when (seq s)\n    (cons (f (first s)) (lazy-seq (fun f (rest s))))))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 118, "code": "(fn mp [f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (mp f (rest s))))))", "user": "52f89125e4b047fd55836fd4"}, {"problem": 118, "code": "(fn map' [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (map' f (rest coll))))))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 118, "code": "(fn my-map [f [fst & rst]]\n  (if (nil? fst)\n    ()\n    (lazy-seq (cons (f fst) (my-map f rst)))))", "user": "588e4e05e4b00487982d5188"}, {"problem": 118, "code": "(fn builder [op values]\n  (lazy-seq\n   (when-let [ss (seq values)]\n     (cons (op (first values))\n           (builder op (rest values))))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 118, "code": "(fn [f coll]\n  (letfn [(my-map [f coll]\n            (if (empty? coll)\n              coll\n              (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))]\n    (my-map f coll)))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 118, "code": "(fn my-map [f xs]\n    (if (empty? xs)\n      xs\n      (lazy-seq (cons (f (first xs)) (my-map f (rest xs))))\n    ))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 118, "code": "(fn mymap [func col]\n  (if \n    (empty? col) \n    col \n    (cons (func (first col)) (lazy-seq (mymap func (rest col))))\n    )\n  )", "user": "58950f29e4b00487982d5270"}, {"problem": 118, "code": "(fn lol\n             [f s]\n             (if (false? (empty? s))\n               (lazy-seq\n                 (cons (f (first s)) (lol f (rest s))\n                       )\n                 ))\n             )", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 118, "code": "(fn map1 [f c]\n  (cond (empty? c) '()\n        :else (lazy-seq (cons (f (first c)) (map1 f (rest c))))))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 118, "code": "(fn mmap [f l]\n  \t\t(if (not (empty? l))\n       \t(lazy-seq (cons (f (first l)) (mmap  f (rest l))))))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 118, "code": "(fn mymap [f col]\n  (lazy-seq\n    (if (empty? col)\n      col\n      (cons (f (first col)) (mymap f (rest col))))))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 118, "code": "(fn -map [f coll]\n    (lazy-seq\n     (if (empty? coll)\n       '()\n       (cons (f (first coll)) (-map f (next coll))))))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 118, "code": "(fn [f coll]\n  (let [inner (fn inner [old]\n                (if (empty? old)\n                  (empty old)\n                  (cons (f (first old)) (lazy-seq (inner (rest old))))))]\n        (inner coll)))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (if (empty? xs)\n    nil\n    (lazy-seq (cons (f (first xs)) (my-map f (rest xs))))))", "user": "57ea4569e4b0bfb2137f5b46"}, {"problem": 118, "code": "(fn [op v]\n   (letfn [\n           (mapper [elem remainder]\n             (lazy-seq\n               (if (not (empty? remainder))\n                 (cons (op elem)\n                       (mapper \n                         (first remainder) (rest remainder))) [(op elem)])\n               )\n             )\n           ] (mapper (first v) (rest v)))\n   )", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 118, "code": "(fn thismap\n   ([f c]\n    (lazy-seq (when-let [vals (seq c)] (cons (apply f (cons (first vals) [])) (thismap f (rest vals)))))))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 118, "code": "#(letfn [(mapfn [f coll] (lazy-seq (when-let [s (seq coll)] (cons (f (first s)) (mapfn f (next s))))))] (mapfn %1 %2))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 118, "code": "(fn mymap [x y] (if (false? (empty? y)) (lazy-seq (cons (x (first y)) (mymap x (rest y))))))", "user": "58a0fd0be4b02bd94d917ea4"}, {"problem": 118, "code": "(fn my-map\n  ([f s] (if (empty? s)\n           nil\n           (lazy-seq (cons (f (first s)) (my-map f (rest s)))))))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 118, "code": "(fn mymap[f xs]\n  (if (empty? xs) \n    nil\n   (lazy-seq (cons (f (first xs)) (mymap f (rest xs))))))", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 118, "code": "(fn xxx \n  ([f s]\n    (if-not (empty? s)\n      (lazy-seq (cons (f (first s)) (xxx f (rest s)))))))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 118, "code": "(fn own-map [func arr] (if (empty? arr) [] (lazy-seq (cons (func (first arr) ) (own-map func (rest arr) ) )   )))", "user": "575bd5f9e4b02ea114799365"}, {"problem": 118, "code": "(fn rm [f s]\n  (if (not (empty? s))\n    (lazy-seq\n     (cons (f (first s))\n           (rm f (rest s))))))", "user": "5893c64ce4b00487982d524b"}, {"problem": 118, "code": "(fn map2 [f s]\n  (lazy-seq\n   (if (empty? s)\n     '()\n     (cons (f (first s))\n           (map2 f (rest s))))))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 118, "code": "(fn ff [f xs]\n  (if (empty? xs)\n    xs\n    (lazy-seq (cons (f (first xs)) (ff f (drop 1 xs))))))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 118, "code": "(fn my-map \n  [f xs]\n   (if (empty? xs)\n     xs\n     (cons (f (first xs)) (lazy-seq (my-map f (rest xs))))))", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 118, "code": "(fn m [f x] \n  (if (empty? x) \n    () \n    (cons (f (first x)) (lazy-seq (m f (rest x))))))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 118, "code": "(fn m [f l] (when-not (empty? l ) (lazy-seq (cons (f (first l)) (m f (rest l))))))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 118, "code": "(fn map2 [f col]\n       (lazy-seq\n        (when-let [s (seq col)]\n          (cons (f (first s)) (map2 f (rest s))))))", "user": "587a3babe4b01531a375eae2"}, {"problem": 118, "code": "(fn my-map\n  [f [x & xs]]\n  (if (empty? xs)\n    [(f x)]\n    (cons (f x) (lazy-seq (my-map f xs)))))", "user": "58e37946e4b005f69f193cae"}, {"problem": 118, "code": "(fn map' [f s]\n       (if (empty? s) []\n           (lazy-seq (cons (f (first s))\n                           (map' f (rest s))))))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 118, "code": "#(letfn[(map' [x] (lazy-seq (cons (%1 (first x)) (let[xs (rest x)] (when-not (empty? xs) (map' xs))))))] (map' %2))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 118, "code": "(fn step [func a-seq] (lazy-seq (when ((complement empty?) a-seq) (cons (func (first a-seq)) (step func (rest a-seq))))))", "user": "58e6c2cae4b056aecfd47cbf"}, {"problem": 118, "code": "(fn newmap [f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (newmap f (rest s))))))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 118, "code": "(fn [f coll] (reductions #(f %2) (f (first coll)) (rest coll)))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll) nil\n      (cons (f (first coll))\n            (lazy-seq (my-map f (rest coll))))))", "user": "589037b4e4b00487982d51d0"}, {"problem": 118, "code": "(fn [func xs]\n  (letfn [(mymap [f s]\n    (if \n      (empty? s) \n        s\n        (cons (f (first s))\n          (lazy-seq (mymap f (rest s))))))]\n    (mymap func xs)))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 118, "code": "(fn m [f coll]\n  (if (empty? coll)\n    ()\n    (lazy-seq \n     (cons (f (first coll)) (m f (rest coll))))))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 118, "code": "(fn m [f coll]\n  (lazy-seq\n   (if (seq coll)\n     (cons (f (first coll))\n           (m f (rest coll)))\n     ())))", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll)\n    '()\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 118, "code": "(fn m [f coll]\n  (if (nil? (first coll))\n    coll\n    (lazy-seq\n     (cons\n      (f (first coll))\n      (m f (rest coll))))))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 118, "code": "(fn my-map [func coll]\n  (if (empty? coll)\n    coll\n    (cons (func (first coll)) (lazy-seq (my-map func (rest coll))))))", "user": "58e45a2ce4b056aecfd47c69"}, {"problem": 118, "code": "(fn mymap [f xs]\n    (if (empty? xs)\n      '()\n      (cons (f (first xs))\n            (lazy-seq (mymap f (rest xs))))\n      )\n    )", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 118, "code": "(fn mp [f [x & xs]]\n         (if x\n           (cons (f x) (lazy-seq (mp f xs)))\n           '()))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 118, "code": "(fn m [f s]\n  (let [h (first s) t (rest s)]\n    (if (nil? h)\n      []\n      (cons (f h) (lazy-seq (m f t))))))", "user": "58f25609e4b08e1cf3471cff"}, {"problem": 118, "code": "(fn mymap [f xs]\n         (if (empty? xs) '()\n             (lazy-seq (cons (f (first xs)) (mymap f (rest xs))))))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 118, "code": "(fn m [f xs]\n  (lazy-seq\n   (if (seq xs)\n     (cons (f (first xs))\n           (m f (rest xs))))))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (seq coll)\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 118, "code": "(fn my-lazy-map [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll)) (my-lazy-map f (rest coll))))))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 118, "code": "(fn re-map [f s] (if (empty? s) '() (lazy-seq (cons (f (first s)) (re-map f (rest s))))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 118, "code": "(fn _map [f x]\n  (if (false? (empty? x))\n     (lazy-seq (cons (f (first x)) (_map f (rest x))))))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 118, "code": "(fn mm [f s]\n  (lazy-seq\n    (let [fs (f (first s))]\n      (if (next s)\n         (cons fs (mm f (next s)))\n         (list fs)))))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (seq s)\n    (lazy-seq\n     (cons (f (first s))\n           (my-map f (rest s))))\n    '()))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 118, "code": "(fn mapf [f s]\n  (if (empty? s) ()\n    (lazy-seq (cons (f (first s)) (mapf f (rest s))))))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 118, "code": "(fn gg [f ss]\n  (if (nil? (next ss))\n    (cons (f (first ss)) nil)\n  (lazy-seq (cons \n      (f (first ss)) \n      (gg f (next ss))))))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 118, "code": "(fn fero [fun se]\n            (lazy-seq\n              (if (empty? se)\n                []\n                (cons (fun (first se)) (fero fun (rest se))))\n              )\n            )", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 118, "code": "(fn map' [f [x & xs :as s]]\n    (if (empty? s) '()\n        (lazy-seq (cons (f x) (map' f xs)))))", "user": "5901158de4b0438e51c2d039"}, {"problem": 118, "code": "; Couldn't do this with loop/recur so used  standard recursion\n(fn my-map2 [f s]\n  (if (empty? s)\n    (list)\n    (lazy-seq (cons (f (first s)) (my-map2 f (rest s))))))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 118, "code": "(fn r [f xs]\n  (lazy-seq\n    (if (empty? xs)\n    '()\n    (cons (f (first xs)) (r f (rest xs))))))", "user": "58ee0bb6e4b056aecfd47d97"}, {"problem": 118, "code": "(fn m [f [e & r]]\n  (lazy-seq (when e (cons (f e) (m f r)))))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 118, "code": "(fn map' [f coll] (lazy-seq (when coll (cons (f (first coll)) (map' f (next coll))))))", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 118, "code": ";(fn foo [f li]\n;  (if (empty? li)\n;    li\n;    (cons (f (first li)) (foo f (rest li)))))\n\n;(fn foo \n;  ([f li]\n;     (foo f li []))\n;  ([f li res]\n;     (if (empty? li)\n;         res\n;         (recur f (rest li) (conj res (f (first li)))))))\n\n(fn foo [f li]\n  (if (empty? li)\n    li\n    (lazy-seq (cons (f (first li)) (foo f (rest li))))))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 118, "code": "(fn my-map [f s]\n  (lazy-seq (when-let [sq (seq s)]\n              (cons (f (first s)) (my-map f (rest s))))))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (if x (lazy-seq (cons (f x) (my-map f xs)))))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 118, "code": "(fn [f collection]\n(loop [result '[], data collection]\n  (if (or  (empty? data) (> (count result) 1000000))\n   result\n   (recur  (conj result (f (first data))) (rest data))\n  )\n  )\n)", "user": "59228b00e4b026ae38521281"}, {"problem": 118, "code": "(fn ! [f coll]\n  (lazy-seq \n   (when (seq coll)\n     (cons (f (first coll)) (! f (rest coll))))))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 118, "code": "(fn ma [f coll]\n  (when-let [s (seq coll)]\n    (lazy-seq (cons (f (first s)) (ma f (rest s))))))", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 118, "code": "(fn my-map [f l]\n  (when-let [ls (seq l)]\n    (lazy-seq (cons (f (first ls)) (my-map f (rest ls))))))", "user": "532cb870e4b019098a6f8b34"}, {"problem": 118, "code": "(fn m [f [a & r :as s]]\n    (if (seq s)\n      (lazy-cat [(f a)] (m f r))\n      )\n    )", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 118, "code": "(fn a [b c]\n  (if (false? (empty? c))\n  \t(lazy-seq (cons (b (first c)) (a b (rest c))))))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 118, "code": "(fn my-map [op coll]\n  (if (empty? coll)\n    coll\n   (lazy-seq (cons (op (first coll)) (my-map op (rest coll))))))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 118, "code": "(fn map-fn [f s]\n  (lazy-seq\n   (when-first [x s]\n     (cons (f x) (map-fn f (rest s))))))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 118, "code": "; 2 implementations I came up with, joined together:\n; If I use `reduce`, it doesn't work with the lazy set,\n; if I use `iterate`, it doesn't work with the non-infinite sets.\n; It's like I need to be able to ask the sequence whether its lazy and then\n; switch based on the answer. It looks like `realized?` should do this,\n; but `(realized? (range))` returns true and it explodes on non-lazy sequences.\n;\n; Here is the code that does that:\n;\n; (fn [f sequence]\n;   (if (realized? sequence)\n;       (reduce\n; \t   #(concat %1 [(f %2)])\n;        []\n;        sequence)\n;        (iterate\n;         (fn [[mapped seq-remaining]]\n;         [(concat mapped [(f (first seq-remaining))])\n;          (drop 1 seq-remaining)\n;         ])\n;         [[] sequence])))\n\n; Then, after googling \"clojure check if a sequence is lazy\"\n; I found the solution as an example @ https://clojure.org/reference/lazy\n(fn my-map [f coll]\n  (lazy-seq (when-let [s (seq coll)]\n              (cons (f (first s))\n                    (my-map f (rest s))))))", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 118, "code": "(fn mapp [f x]\n  (if (not-empty x)\n  (lazy-seq (cons (f (first x)) (mapp f (rest x))))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 118, "code": "(fn g [f coll]\n  (if (empty? coll)\n    coll\n    (lazy-seq (cons (f (first coll)) (g f (rest coll))))))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 118, "code": "(fn new-map [f coll]\n      (lazy-seq\n       (when-let [s (seq coll)]\n         (cons (f (first s)) (new-map f (rest s))))))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 118, "code": "(fn rep [f coll]\n  (if (seq coll)\n    (lazy-seq\n     (cons (f (first coll)) (rep f (rest coll))))))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 118, "code": "(fn mm [f x]\n  (if (seq x)\n    (lazy-seq (cons (f (first x)) (mm f (rest x))))\n    nil))", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when (seq s)\n    (cons (f (first s))\n          (lazy-seq (my-map f (rest s))))))", "user": "59251947e4b072a2710fce69"}, {"problem": 118, "code": "(fn map0 [f xs]\n    (lazy-seq \n    \t(if  (empty? xs) nil\n        \t(cons (f (first xs)) (map0 f (rest xs))))))", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when (seq s)\n    (cons (f (first s))\n          (lazy-seq (my-map f (rest s))))))", "user": "592518bfe4b072a2710fce65"}, {"problem": 118, "code": "(fn do-map [f col]\n  ((fn step [xs]\n     (lazy-seq\n      (when-not (empty? xs)\n        (cons (f (first xs)) (step (rest xs))))))\n   col))", "user": "592518e8e4b072a2710fce67"}, {"problem": 118, "code": "(fn mp [op l]\n  (cond\n   (empty? l) []\n   :else (lazy-seq (cons (op (first l)) (mp op (rest l))))))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 118, "code": "(fn m [f lst]\n  (cond\n    (empty? lst) []\n    :else (lazy-seq (cons (f (first lst)) (m f (rest lst))))\n  )\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 118, "code": "(fn fun [f x]\n  (lazy-seq\n   (if (empty? x)\n     '()\n     (cons (f (first x)) (fun f (rest x))))))", "user": "593744abe4b02506e01a299b"}, {"problem": 118, "code": "(fn map1 [f coll]\n   (lazy-seq\n    (if (seq coll)\n      (cons (f (first coll)) (map1 f (rest coll))))))", "user": "591a6c9fe4b09b4ee5954bd6"}, {"problem": 118, "code": "(fn my-map [fun xs] (if (empty? xs) xs\n                       (lazy-seq\n                        (cons (fun (first xs))\n                         (my-map fun (rest xs))))))", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 118, "code": "(fn custom_map\n  [f [a & b]] (if (nil? b) [(f a)] (lazy-seq (cons (f a) (custom_map f b)))))", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 118, "code": "(fn m [f s]\n  (when (not (empty? s)) \n    (lazy-seq (cons (f (first s)) (m f (rest s))))))", "user": "55216aa5e4b0882d96d09192"}, {"problem": 118, "code": "(fn mapa2 [f sek]\n  (lazy-seq (if (empty? sek) [] (cons (f (first sek)) (mapa2 f (rest sek)))))\n  )\n;; ful smesno da cons delja, conj in obratni vrstni red pa se zlomi pri zadnjem primeri", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when (seq s)\n    (cons (f (first s))\n          (lazy-seq (my-map f (rest s))))))", "user": "592518cde4b072a2710fce66"}, {"problem": 118, "code": "(fn my-map [f l]\n  (lazy-seq\n   (when (seq l)\n     (cons (f (first l)) (my-map f (rest l))))))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 118, "code": "(fn -map [f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (-map f (rest s)))\n      )\n    )\n   \n   )", "user": "57262710e4b0c5bde472c120"}, {"problem": 118, "code": "(fn ff\n\t[f s] (if (not (empty? s)) (lazy-seq (cons (f (first s)) (ff f (rest s))))))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 118, "code": "(fn g [f xs]\n  (let [x (first xs) ys (rest xs)]\n    (if (empty? ys) [(f x)] (lazy-seq (cons (f x) (g f ys))))))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 118, "code": "(fn my-map\n  [f s]\n  (lazy-seq (cons (f (first s)) \n                  (if (not= () (rest s)) (my-map f (rest s))))))", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (not (empty? coll)) (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (nil? s)\n      '()\n  \t  (cons (f (first s)) (lazy-seq (my-map f (next s))))))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 118, "code": "(fn map' [f coll]\n  (lazy-seq\n   (if (seq coll)\n     (cons (f (first coll))\n           (map' f (rest coll))))))", "user": "595b864ee4b066ee0a44afdc"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 118, "code": "(fn map2 [f coll]\n  (if (seq coll)\n    (lazy-seq\n      (cons (f (first coll)) (map2 f (rest coll))))))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 118, "code": "(fn maps [f coll] \n  (lazy-seq \n    (if (empty? coll)\n       '()\n        (cons (f (first coll)) (maps f (rest coll))))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 118, "code": "(fn dog [f sq]\n  (let [first (first sq)\n        tail (next sq)]\n    (cons\n      (f first)\n      (if tail\n        (lazy-seq (dog f tail))\n        '()))))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 118, "code": "(fn map2 [f col]\n  (lazy-seq\n   (when-let [x (first col)]\n     (cons (f x) (map2 f (next col))))))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 118, "code": "(fn m [f xs]\n  (lazy-seq (when (seq xs)\n              (cons (f (first xs))\n                    (m f (rest xs))))))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 118, "code": "(fn r [f [a & b]] (lazy-seq (cons (f a) (when b (r f b)))))", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 118, "code": "(fn func [f se]\n  (lazy-seq\n   (when-let [v (first se)]\n     (cons (f v) (func f (rest se))))))", "user": "59473563e4b07ddc2dafad97"}, {"problem": 118, "code": "(fn my-map [f [h & t]]\n  (if t\n  \t(lazy-seq (cons (f h) (my-map f t)))\n    (lazy-seq [(f h)])))", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 118, "code": "(fn mymap [f s] (lazy-seq (when-not (empty? s) (cons (f (first s)) (mymap f (rest s))))))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 118, "code": "(fn map' [f xs] (if (seq xs) \n                  (lazy-seq (cons (f (first xs)) (map' f (rest xs))))\n                  xs))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 118, "code": "(fn re-map [f xs]\n  (if (empty? xs)\n    []\n    (lazy-seq (cons (f (first xs)) (re-map f (rest xs))))))", "user": "593910eae4b02506e01a29f4"}, {"problem": 118, "code": "(fn memap [f [x & xs]]\n  (if x\n    (cons (f x) (lazy-seq (memap f xs)))\n    []))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 118, "code": ";#(loop [s %2 res []]\n;   (if (empty? s)\n;     res\n;     (recur (rest s) (conj res (% (first s))))))\n\n(fn ok [f n]\n  (if (not (empty? n))\n  (lazy-seq\n   (cons (f (first n)) (ok f (rest n))))))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (if (false? (empty? coll))\n    (lazy-seq\n     (cons (f (first coll)) (my-map f (rest coll))))))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 118, "code": "(fn remap[f s]\n(if (seq s) (lazy-seq (cons (f (first s)) (remap f (rest s)))) nil))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 118, "code": ";(fn [f s]\n;  (loop [coll s\n;         result []]\n;    (if (empty? coll)\n;      result\n;      (recur (rest coll)\n;             (conj result (f (first coll)))))))\n\n(fn mymap [f coll]\n  (if-not (empty? coll)\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "50481532e4b0ec70b3ef8d96"}, {"problem": 118, "code": "(fn m [f xs]\n  (if-let [[x & r] (seq xs)]\n    (lazy-seq (cons (f x) (m f r)))\n    '()))", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if \n    (not-empty coll)\n    (lazy-seq\n      (cons (f (first coll)) (mymap f (rest coll))))))\n\n;(fn [f c]\n;  (loop [coll c]\n;    (when\n;      (not-empty coll)\n;      (lazy-seq\n;      \t(cons\n;       \t\t(f (first coll))\n;       \t\t(recur (rest coll)))))))\n\n\n;(fn [f coll]\n;  (loop [acc [] [a & b] coll]\n;    (if\n;      (nil? a)\n;      acc\n;      (recur (conj acc (f a)) b))))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 118, "code": "(fn mymap [f a-seq] (lazy-seq (when (not(empty? a-seq))\n                                    (cons\n                                      (f (first a-seq))\n                                      (mymap f (rest a-seq))\n                                    ))))", "user": "5978b4c9e4b01722bebd4d13"}, {"problem": 118, "code": "(fn _map [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n       (cons (f (first s)) (_map f (rest s))))))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 118, "code": "(fn g [f s] \n  (lazy-seq \n    (when-let [ss (seq s)] \n      (cons (f (first s)) (g f (rest s))))))", "user": "56483f45e4b0284900eef62b"}, {"problem": 118, "code": "(fn map' [f [x & xs]] (when x (cons (f x) (lazy-seq (map' f xs)))))", "user": "4fb1d7ace4b081705acca281"}, {"problem": 118, "code": "(fn myMap [f l]\n  (if (empty? l)\n    l\n    (lazy-seq (cons (f (first l)) (myMap f (rest l))))))", "user": "594263cbe4b060784b3b790a"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? (rest coll))\n    [(f (first coll))]\n    (lazy-seq (cons (f (first coll))\n                    (my-map f (rest coll))))))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 118, "code": "(fn map' [f xs]\n  (lazy-seq\n   (if (seq xs)\n     (cons (f (first xs)) (map' f (rest xs))))))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 118, "code": "(fn mymap [f xs]\n  (when (seq xs)\n    (cons (f (first xs))\n          (lazy-seq (mymap f (rest xs))))))", "user": "4ff9a200e4b0678c553fc3ab"}, {"problem": 118, "code": "(fn sk-map [op list]\n  (if-not (empty? list)\n    (lazy-seq\n      (cons (op (first list)) (sk-map op (rest list))))))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 118, "code": "(fn my-map [f [fst & rst]]\n  (if-not fst []\n          (lazy-seq (cons (f fst) (my-map f rst)))))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 118, "code": ";(fn [f coll] \n;  (reduce \n;   (fn [acc x] (concat acc [(f x)])) \n;   [] coll))\n(fn mymap [f coll]\n  (lazy-seq (cons (f (first coll)) (if (empty? (rest coll)) [] (mymap f (rest coll))))))", "user": "50aa777fe4b056ee01935866"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when (seq s)\n    (cons (f (first s))\n          (lazy-seq (my-map f (rest s))))))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 118, "code": "(fn foo [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n        (cons (f (first s)) (foo f (rest s))))))", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 118, "code": "(fn pp [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n        (cons (f (first s)) (pp f (rest s))))))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll) nil\n    (cons (f (first coll))\n    (lazy-seq (my-map f (rest coll))))))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 118, "code": "(fn mmap\n\t[f s]\n\t  (if (empty? s)\n\t      s\n\t\t(lazy-seq (cons (f (first s)) (mmap f (rest s))))))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 118, "code": "(fn my_map [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n(cons (f (first coll)) (my_map f (rest coll))))))", "user": "55757e81e4b05c286339e063"}, {"problem": 118, "code": "(fn custom-map [f coll]\n  (if (not(empty? coll))\n    (lazy-seq (cons (f (first coll)) (custom-map f (rest coll))))\n  )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 118, "code": "(fn my-map [f x]\n  (lazy-seq\n    (when-let [xx x]\n      (cons (f (first xx)) (my-map f (next xx)) )\n    )\n  )\n)", "user": "59971e2de4b07157cc8daacc"}, {"problem": 118, "code": "#(rest (reductions (comp % second list) () %2))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 118, "code": "(fn h \n  ([f s] (h f s []))\n  ([f [head & tail] r] \n   (if (nil? head) \n     r\n     (lazy-seq (cons (f head) (h f tail))))))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 118, "code": "(fn remap [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll)) (remap f (rest coll))))))", "user": "59944e73e4b0b211ea3aaac2"}, {"problem": 118, "code": "(fn mmap[f sx] \n     ( cond\n       (empty? sx) []\n        :e (cons  (f (first sx)) (lazy-seq (mmap f (rest sx))))\n          ))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 118, "code": "(fn my-map [f [x & xs :as X]]\n  (if (empty? X)\n    nil\n    (lazy-seq (cons (f x) (my-map f xs)))))", "user": "59a72effe4b066c664927d94"}, {"problem": 118, "code": "(fn mymap\n  [f [x & xs]]\n  (lazy-seq\n   (when x\n     (cons (f x) (mymap f xs)))))", "user": "51823a97e4b0f2adb733651e"}, {"problem": 118, "code": "(fn my-map\n   [f coll]\n  (when-let [s (seq coll)]\n    (lazy-seq\n     (cons (f (first s))\n           (my-map f (rest s))))))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 118, "code": "(fn map* [f col]\n  (cons\n   (f (first col))\n   (if (next col)\n     (lazy-seq (map* f (next col)))\n     ())))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 118, "code": "(fn m[f sx] (if (= sx []) [] (lazy-seq (cons (f (first sx)) (m f (rest sx))))))", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 118, "code": "(fn finite-lazy-builder [f values]\n  (lazy-seq\n    (when-let [ss (seq values)]\n      (cons (f (first values))\n            (finite-lazy-builder f (next values))))))", "user": "59089229e4b047aa04b1997c"}, {"problem": 118, "code": "(fn rec [f coll]\n        (lazy-seq\n         (when-let [s (seq coll)]\n           (cons (f (first s))\n                 (rec f (rest s))))))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 118, "code": "(fn mymap [f col] (lazy-seq (cons (f (first col)) (if (nil? (next col)) [] (mymap f (next col))))))", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    nil\n    (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s) nil\n  (lazy-seq (cons (f (first s)) (my-map f (rest s)))))\n)", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 118, "code": "(fn mmap [f s] (lazy-seq (when (seq s) (cons (f (first s)) (mmap f (rest s))))))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 118, "code": "(fn m [f [x & l]] (if x (cons (f x) (lazy-seq (m f l))) l))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 118, "code": "(fn m [f xs]\n  (if (empty? xs)\n    xs\n    (lazy-seq\n     (cons (f (first xs)) (m f (rest xs))))))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 118, "code": "(fn m [f [x & xs]]\n   (lazy-seq (when x (cons (f x) (m f xs)))))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 118, "code": "(fn f [op xs]\n    (if-not (empty? xs)\n      (lazy-seq\n        (cons\n          (op (first xs))\n          (f op (rest xs))\n          ))\n      )\n    )", "user": "596d630ae4b069c0a1a19846"}, {"problem": 118, "code": "(fn mymap [f xs]\n  (when-let [_ (seq xs)]\n    (lazy-seq (cons (f (first xs)) (mymap f (rest xs))))))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 118, "code": "(fn mymap\n  ([f v]\n   (if (seq v)\n     (lazy-seq (cons (f (first v)) (mymap f (rest v))))\n     '())))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 118, "code": "(fn collect [f [fs & rs]] (lazy-seq (if (nil? fs) nil (cons (f fs) (collect \nf rs)))))", "user": "59358f74e4b04f87174def52"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n   (if (seq coll)\n     (cons (f (first coll)) (my-map f (rest coll))))))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 118, "code": "(\tfn my-map [f s]\n  (when (seq s)\n    (lazy-seq\n     (cons (f (first s)) (my-map f (rest s))))))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 118, "code": "(fn nmap [f coll]\n  (lazy-seq \n    (when-let [[x & xs] coll] \n      (cons (f x) (nmap f xs)))))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n(cons (f (first coll)) (mymap f (rest coll))))))", "user": "5656a095e4b0f9d632dd84a1"}, {"problem": 118, "code": "(fn map2 [func coll]    \n  (if ((complement empty?) coll)\n    (lazy-seq (cons (func (first coll)) (map2 func (rest coll))))))", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 118, "code": "(fn de [f d]\n  (when-not (empty? d)\n    (cons (f (first d)) (lazy-seq (de f (rest d))))))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 118, "code": "(fn c [f items] (lazy-seq (when (seq items) (cons (f (first items)) (c f (rest items))))))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 118, "code": "#(letfn [(fun [a b]\n  \t\t   (if-not (empty? b) (lazy-cat [(a (first b))] (fun a (rest b)))))]\n   (fun %1 %2))", "user": "59ddae03e4b01968742fed65"}, {"problem": 118, "code": "(fn my-map [f col]\n  (if (seq col)\n    (lazy-seq\n      (cons (f (first col))\n            (my-map f (rest col))))))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 118, "code": "(fn my-map \n  [f s]\n  (if (empty? s)\n    s\n    (lazy-seq (cons (f (first s)) \n                    (my-map f (rest s))))))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 118, "code": "(fn my-map\n  [fun lst]\n  (if (empty? lst)\n    ()\n    (lazy-seq\n     (when-let [valu (seq lst)]\n      (cons (fun (first valu))\n          (my-map fun (rest valu)))))))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 118, "code": "(fn implementacionMap [f lst]\n\t(if (seq lst) \n      (lazy-seq(cons (f (first lst)) (implementacionMap f (rest lst))))\n        nil))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 118, "code": "(fn my-map [op lst]\n  (lazy-seq\n   (if (not (empty? lst))\n   \t(cons (op (first lst)) (my-map op (rest lst))) '())))", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 118, "code": "(fn my-map [f [fir & res]] (if fir (cons (f fir) (lazy-seq (my-map f res)))))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 118, "code": "(fn reimplementMap \n  [x y]\n  (if (not (empty? y))\n    (lazy-seq\n      (cons (x (first y))\n            (reimplementMap  x (rest y))))))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 118, "code": "(fn furp [f s]\n  (lazy-seq\n   (when-let [ss s]\n     (cons (f (first s))\n           (furp f (next s))\n     )\n   )\n  )\n)", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 118, "code": "(fn my-map [f lst]\n  (if (seq lst)\n    (lazy-seq (cons (f (first lst))  (my-map f (rest lst))))\n    nil))", "user": "59e55cc8e4b08badc2a0c555"}, {"problem": 118, "code": "(fn Re-implement-Map\n  [f lst]\n  (if (empty? lst)\n    lst\n    (lazy-seq (cons (f (first lst)) (Re-implement-Map f (rest lst))))))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 118, "code": "(fn my-map [funct lst]\n  (lazy-seq\n   (if (empty? lst) () \n   \t(cons (funct (first lst))(my-map funct (rest lst))))))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "59e9f03be4b0249b72820752"}, {"problem": 118, "code": "(fn my-map\n  [fun lst]\n  (if (empty? lst)\n    ()\n    (lazy-seq(cons (fun (first lst)) (my-map fun (rest lst))))))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "59ea287ee4b0249b72820760"}, {"problem": 118, "code": "(fn mp [f s]\n  (lazy-seq\n    (when (seq s)\n      (cons (f (first s)) (mp f (rest s))))))", "user": "59e95cafe4b0249b7282074b"}, {"problem": 118, "code": "(fn implementacionMap [f lst]\n\t(if (seq lst) \n      (lazy-seq(cons (f (first lst)) (implementacionMap f (rest lst))))\n        nil))", "user": "59e778aae4b0249b72820716"}, {"problem": 118, "code": "(fn pam [func coll]\n  (when-not (empty? coll)\n    (lazy-seq\n      (cons (func (first coll)) (pam func (rest coll))))))", "user": "51eab308e4b0f1f103a0d150"}, {"problem": 118, "code": "(fn m [f [x & xs]]\n  (if x (lazy-seq (cons (f x) (m f xs))) nil))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 118, "code": "(fn mymap [f col]\n  (lazy-seq\n   (when col\n     (cons (f (first col)) (mymap f (next col))))))", "user": "59ea85e4e4b0249b72820767"}, {"problem": 118, "code": "(fn my-map\n  [fun lst]\n  (if (empty? lst)\n    ()\n    (lazy-seq (cons (fun (first lst))\n                    (my-map fun (rest lst))))))", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 118, "code": "(fn mmap [f se]\n  (if (empty? se) se\n    (lazy-seq (cons (f (first se)) (mmap f (rest se)))\n   )))", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 118, "code": "(fn \n  [f col]\n  ((fn a [paso]\n     (lazy-seq\n      (when-not (empty? paso)\n        (cons (f (first paso)) (a (rest paso))))))\n   col))", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 118, "code": "(fn my-map[func lst]\n  (if (false? (empty? lst))\n        (lazy-seq\n          (cons (func (first lst)) (my-map func (rest lst))))))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 118, "code": "(fn algo [f lst] \n  (lazy-seq \n    (when-let [s (seq lst)] \n      (cons (f (first s)) (algo f (rest s))))))", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 118, "code": ";\"(fn my-map\n;  [fun lst]\n;  (if (empty? lst)\n;    ()\n;    (cons (fun (first lst)) (my-map fun (rest lst)))))\"\n    \n(fn my-map \n  [fun lst]\n  (when (seq lst)\n    (cons (fun (first lst))\n          (lazy-seq (my-map fun (rest lst))))))", "user": "59e68254e4b0249b728206fc"}, {"problem": 118, "code": "(fn mymap [f lst]\n  (lazy-seq\n    (cond\n      (empty? lst) nil\n      :else (cons (f (first lst)) (mymap f (rest lst))))))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 118, "code": "(fn mp [f s]\n  (lazy-seq\n    (when (seq s)\n      (cons (f (first s)) (mp f (rest s))))))", "user": "59ed01ede4b0249b7282079a"}, {"problem": 118, "code": "(fn cmap [fun lst]\n  (if (not (empty? lst)) (lazy-seq (cons (fun (first lst)) (cmap fun (rest lst))))))", "user": "59e62655e4b08badc2a0c568"}, {"problem": 118, "code": "(fn m\n      ([f [h & r]]\n       (if h\n        (lazy-seq (cons\n                    (f h)\n                    (m f r)))\n        [])))", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 118, "code": "(fn mp [f xs]\n    (lazy-seq (if (first xs) \n                (cons (f (first xs)) (mp f (rest xs))))))", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 118, "code": "(fn lmap \n  [f s] (if (empty? s) [] (lazy-seq (cons (f (first s)) (lmap f (rest s))))))", "user": "51000111e4b00d7ad4cab15e"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 118, "code": "(fn m-map [f s]\n (lazy-seq  \n   (when (not (empty? s))   \n       (cons (f (first s)) (m-map f (rest s))))))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when (seq s)\n    (cons (f (first s))\n          (lazy-seq (my-map f (rest s))))))", "user": "593ab583e4b069cdc2982b57"}, {"problem": 118, "code": "(fn __ [f xs]\n  (when (seq xs)\n    (cons (f (first xs))\n          (lazy-seq (__ f (rest xs))))))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 118, "code": "(fn [f col]\n  ((fn step [xs]\n     (lazy-seq\n      (when-not (empty? xs)\n        (cons (f (first xs)) (step (rest xs))))))\n   col))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 118, "code": "(fn my-map [f xargs] (if (empty? xargs) '() (cons (f (first xargs)) (lazy-seq (my-map f (rest xargs))))))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (seq coll)\n    (lazy-seq (cons (f (first coll))\n                    (mymap f (rest coll))))\n    '()))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 118, "code": "(fn mm [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mm f (rest coll))))))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 118, "code": "(fn ! [f s]\n  (if (seq s)\n    (lazy-seq (cons (f (first s)) (! f (rest s))))\n    '() ))", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 118, "code": "(fn rec [f coll]\n  (if (empty? coll)\n      []\n      (let [[x & xs] coll]\n        (lazy-seq\n         (cons (f x) (rec f xs))))))", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 118, "code": "(fn mymap [f inputList] \n     (if (empty? inputList) nil\n     (lazy-seq \n        (cons (f (first inputList)) \n              (mymap f (rest inputList))))))", "user": "571172ece4b09c608db70446"}, {"problem": 118, "code": "(fn mapp\n  [f s] (if (empty? s)\n            s\n            (lazy-seq (cons (f (first s)) (mapp f (rest s))))))", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 118, "code": "(fn mapper [f s]\n (lazy-seq \n  (when-let [ss (seq s)]\n  (cons (f (first ss)) (mapper f (rest ss))))))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 118, "code": "(fn myMap[f [first & rest]] (lazy-seq (if (not (nil? first)) (cons (f first) (myMap f rest)))))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 118, "code": "(fn [f xs] (reductions #(f %2) (f (first xs)) (rest xs)))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 118, "code": "(fn mymap [f s]\n\n(loop [rem s\n       res '()]\n  (if (empty? rem)\n    res\n    (lazy-seq (cons (f (first rem)) (mymap f (rest rem)) ))\n    )\n\n))", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 118, "code": "(fn domap [f coll]\n  (if (false? (empty? coll))\n    (lazy-cat\n         (list (f (first coll))) (domap f (rest coll)))))", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 118, "code": "(fn s [f [a & r]]\n  (when a\n    (cons (f a)\n          (lazy-seq (s f r)))))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (when (seq coll)\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 118, "code": "(fn m [f c]\n  (if (empty? c)\n    c\n    (let [fst (first c)\n          r (rest c)]\n      (lazy-seq (cons (f fst) (m f r))))))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (if (empty? coll)\n    '()\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "551f1781e4b08d5046aa8a52"}, {"problem": 118, "code": "(fn my-map-2\n  [f coll]\n  (if (empty? coll)\n    '()\n    (lazy-seq (cons (f (first coll)) (my-map-2 f (rest coll))))))", "user": "56c44c34e4b05cc29241ee96"}, {"problem": 118, "code": "(fn m [f l]\n  (if (empty? l)\n    l\n    (lazy-seq (cons (f (first l)) (m f (rest l))))))", "user": "574b4f3ee4b02ea114799207"}, {"problem": 118, "code": "(fn m [f a] \n  (if (empty? a) a\n    (lazy-seq (cons (f (first a)) (m f (rest a))))))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 118, "code": "(fn g[f a] (if (empty? a) [] (lazy-seq (cons (f (first a)) (g f (rest a))))))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 118, "code": "(fn fr [f xs] (lazy-seq \n               (if (first xs) \n                   (cons (f (first xs)) (fr f (rest xs))) () ) )\n             )", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 118, "code": "(fn mymap [f s]\n  (when s\n    (lazy-seq (cons (f (first s)) (mymap f (next s))))))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 118, "code": "(fn mmap\n    ([f coll]\n     (mmap f coll []))\n    ([f coll res]\n     (if (empty? coll)\n       res\n       (lazy-seq (cons (f (first coll))\n                       (mmap f (rest coll)))))))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 118, "code": "(fn m [f s]\n  (if (empty? s)\n  s\n  (lazy-seq\n    (cons\n      (f (first s)) (m f (rest s))))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 118, "code": "(fn mmap [f xs]\n\t(if (empty? xs) \n    \t[]\n    \t(lazy-cat [(f (first xs))] (mmap f (rest xs)))))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 118, "code": "(fn mp [f l]\n    (if (empty? l)\n        l\n        (lazy-seq (cons (f (first l)) (mp f (rest l))))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 118, "code": "(fn my-mapcar [f x]\n             (cond (empty? x) nil\n                   :t \n                   (lazy-seq(cons (f (first x))\n                            (my-mapcar f (rest x))))))", "user": "52faf67ce4b047fd55837005"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when (seq s)\n  \t(lazy-seq  (cons (f (first s))\n        \t\t\t\t(my-map f (next s))))))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n   (when (seq coll)\n     (cons (f (first coll))\n           (my-map f (rest coll))))))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if-not (empty? s)\n    (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 118, "code": "(fn my-map-3 [f coll]\n  (lazy-seq\n    (let [x (first coll)]\n      (if (nil? x)\n        nil\n        (cons (f x) (my-map-3 f (drop 1 coll)))))))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 118, "code": "(fn m [f coll]\n  (if (empty? coll)\n    (lazy-seq)\n    (cons (f (first coll)) (lazy-seq (m f (rest coll))))))", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 118, "code": "(fn m [f s] (if (empty? s) nil (cons (f (first s)) (lazy-seq (m f (rest s))))))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 118, "code": ";#(rest (reductions (fn [_ x] (%1 x)) 0 %2))\n; Better version without cheating:\n(fn my-map [f [head & tail]]\n  (cons (f head) (and tail\n    (lazy-seq (my-map f tail)))))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 118, "code": "(fn mapp\n  [f data]\n  (cond\n    (empty? data) nil\n    (not-empty data) (lazy-seq (cons (f (first data)) (mapp f (rest data))))))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 118, "code": "(fn inner-map [f coll]\n    (lazy-seq (when (seq coll)\n                (cons (f (first coll)) \n                      (inner-map f (rest coll))))))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 118, "code": "(fn f\n  [g v]\n  (lazy-seq\n    (if (seq v)\n      (let [[h & r] v]\n        (cons (g h) (f g r)))\n      [])))", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 118, "code": "(fn my_map [f s] (when (not-empty s)(cons (f (first s)) (lazy-seq(my_map f (rest s))))))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 118, "code": "(fn [f [e & c]]\n  (reductions #(f %2) (f e) c))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if-let [h (first s)]\n    (cons (f h) (lazy-seq (my-map f (rest s))))\n    ()))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 118, "code": "(fn re-implement-map [f s]\n  (lazy-seq\n   (if (seq s) (cons (f (first s)) (re-implement-map f (rest s))))))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 118, "code": "(fn mmap\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (mmap f (rest s)))))))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 118, "code": "(fn map2 [f xs] \n  (if (seq xs)\n  \t(lazy-seq (cons (f (first xs)) (map2 f (rest xs))))\n    nil\n    ))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 118, "code": "(fn re-impl-map [f coll]\n  (lazy-seq (when (seq coll)\n              (cons (f (first coll)) (re-impl-map f (rest coll))))))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (if (empty? xs)\n    '()\n    (cons (f (first xs)) (lazy-seq (my-map f (rest xs))))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 118, "code": "#(let [engage (fn engage [[first & rest]]\n  (if first\n    (lazy-seq (cons (%1 first) \n      (engage rest)))\n      []))]\n (engage %2)\n)", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 118, "code": "(fn rimap [f s]\n      (when (seq s)\n        (lazy-seq (cons (f (first s))\n                        (rimap f (rest s))))))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 118, "code": "(fn m [f [x & xs]]\n  (if x\n    (cons (f x) (lazy-seq (m f xs)))\n    []))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 118, "code": "(fn mappy [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (mappy f (rest s))))))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 118, "code": "(fn mymap[f xs]\n  (if (empty? xs)\n    []\n    (cons (f (first xs)) (lazy-seq (mymap f (rest xs))))))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 118, "code": "(fn f [g s]\n  (if (empty? s)\n    [] \n    (lazy-seq \n      (cons \n        (g (first s))\n        (f g (rest s))))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 118, "code": "(fn re-map [f col]\n  (if (seq col) (lazy-seq\n                  (cons (f (first col)) (re-map f (rest col))))\n                nil))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 118, "code": "(fn m [f s]\n  (if (seq s)\n    (lazy-seq (cons (f (first s)) (m f (rest s))))\n    nil))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 118, "code": "(fn -map [f [h & t]]\n  (if h\n    (lazy-seq\n     (cons (f h)\n           (-map f t)))))", "user": "590b8607e4b047aa04b199db"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (if (seq coll)\n    (lazy-seq (cons (f (first coll))\n                    (my-map f (rest coll))))))", "user": "579f89d5e4b05302be0b72ff"}, {"problem": 118, "code": "(fn foo\n  [f x]\n  (if (empty? x)\n    nil\n    (cons (f (first x))\n          (lazy-seq (foo f (rest x))))))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 118, "code": "(fn mymap\n    [f l] (if (empty? l)\n        l\n        (lazy-seq (cons (f (first l)) (mymap f (rest l))))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 118, "code": "(fn [x y] (rest (reductions #(x %2) 0 y )))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 118, "code": "(fn map* [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s))\n           (map* f (rest s))))))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 118, "code": "(fn remap [refun reseq]\n  (lazy-seq \n    (if-not (empty? reseq)\n      (cons (refun (first reseq))\n            (remap refun (rest reseq))))))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 118, "code": "(fn my-map[f coll]\n  (lazy-seq (when-let [s (seq coll)] (cons (f (first s)) (my-map f (rest s))))))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 118, "code": "(fn mp [f x]\n  (lazy-seq \n    (when-let [res (seq x)]\n      (cons (f (first x)) (mp f (rest x))))))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 118, "code": "(fn mm [f s]\n  (lazy-seq\n    (let [fs (f (first s))]\n      (if (next s)\n         (cons fs (mm f (next s)))\n         (list fs)))))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 118, "code": "(fn mymap [f c]\n  (let [step (fn [coll]\n               (when-let [[x & xs] (seq coll)]\n                 (cons (f x) (mymap f xs))))]\n    (lazy-seq (step c))))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (reductions #(f %2) (f (first coll)) (rest coll)))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when (seq s)\n    (cons (f (first s))\n          (lazy-seq (my-map f (rest s))))))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 118, "code": "(fn m [f xs] (if (empty? xs) [] (lazy-cat [(f (first xs))] (m f (rest xs)))))", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 118, "code": "(fn my-map [f lst]\n  (if (empty? lst)\n    ()\n    (cons (f (first lst)) (lazy-seq (my-map f (rest lst))))))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 118, "code": "(fn self-map [op xs]\n      ;(lazy-seq (cons (op (first xs) ) (self-map op (rest xs))))\n      (\n       (fn inner-self-map [op xs acc]\n          (if (empty? xs)\n              (lazy-seq (reverse acc))\n              ;(inner-self-map op (rest xs) (lazy-seq (cons (op (first xs)) acc)))\n              (lazy-seq (cons (op (first xs)) (inner-self-map  op (rest xs) acc       )))\n          )\n       )\n       op xs []\n      )\n   \n  )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 118, "code": "(fn my-map [f [x & xs :as all]]\n    (lazy-seq\n     (if (not-empty all)\n      (cons (f x) (my-map f xs))\n      '())))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 118, "code": "(fn map-me [func coll]\n   (if-let [s (seq coll)]\n     (lazy-seq (cons (func (first s)) (map-me func (rest s))))))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 118, "code": "(fn mape [f s] (lazy-seq (if (empty? s) [] (cons (f (first s)) (mape f (rest s))))))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (if (seq xs)\n    (cons (f (first xs))\n          (lazy-seq\n           (my-map f (rest xs))))))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 118, "code": "(fn [f x] (rest (reductions #(f %2) nil x)))", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq (when-let [s (seq coll)] (cons (f (first s)) (my-map f (rest s))))))", "user": "5a426a3fe4b0447ef91cc5f2"}, {"problem": 118, "code": "(fn mymap [f lst]\n  (if (empty? lst)\n    ()\n    (lazy-seq (cons (f (first lst)) (mymap f (rest lst))))\n    )\n  )", "user": "5a984657e4b0d174b936c78a"}, {"problem": 118, "code": "(fn my-map [f lst]\n  (if (empty? lst)\n    '()\n    (lazy-seq (cons (f (first lst)) (my-map f (rest lst))))))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 118, "code": "(fn [f coll]\n  (letfn [(mapx [f coll]\n            (lazy-seq \n              (if (seq coll)\n                (cons (f (first coll)) (mapx f (rest coll))))))] (mapx f coll))\n\n  )", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 118, "code": "(fn my-map\n  [f lst]\n  (if (not (empty? lst))\n    (lazy-seq\n      (cons (f (first lst))\n            (my-map f (rest lst))))))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (when-let [s (seq coll)]\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 118, "code": "(fn map- [f x] \n  (lazy-seq \n    (when-let [sequ (seq x)] \n      (cons (f (first sequ)) (map- f (rest sequ))))))", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 118, "code": "(fn MAP [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (MAP f (rest s))))))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 118, "code": "(fn re-map \n  [f s]\n  \n  (if (false? (empty? s))\n    (lazy-seq(cons (f (first s)) (re-map f (rest s))))))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s)\n                                )\n            )\n      )\n   )\n  )", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 118, "code": "(fn maps \n  [fun col]\n  (if (false? (empty? col))\n        (lazy-seq (cons (fun (first col)) (maps fun (rest col))))))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 118, "code": "(fn mp [f s]\n  (lazy-seq\n    (when (seq s)\n      (cons (f (first s)) (mp f (rest s))))))", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 118, "code": "(fn mymap [n lst]\n  (if (false?\n       (empty? lst))\n  (lazy-seq (cons (n (first lst)) (mymap n (rest lst))))))", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 118, "code": "(fn my-map [f x]\n  (if (empty? x)\n    x\n    (lazy-seq (cons (f (first x)) (my-map f (drop 1 x))))))", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 118, "code": "(fn my_map [f lst]\n  (lazy-seq (when (seq lst) (cons (f (first lst)) (my_map f (rest lst))))))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 118, "code": "(fn ! [f coll]\n  (when-let [[head & tail] (seq coll)]\n    (cons (f head) (lazy-seq (! f tail)))))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 118, "code": "(fn my-map [f s]\n  (lazy-seq\n   (if (seq s)\n     (cons (f (first s)) (my-map f (rest s)))\n     [])))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 118, "code": "(fn mmap [f [x & xs :as colls]]\n  (lazy-seq (when (seq colls) (cons (f x) (mmap f xs)))))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 118, "code": "(fn mymap[f s]\n  (if (empty? s)\n    []\n      (lazy-seq (cons (f (first s)) (mymap f (rest s)) ))))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 118, "code": "(fn mapx [fun items]\n    (cond \n      (empty? items) []\n      :else (lazy-seq (cons (fun (first items)) (mapx fun (rest items))))\n    )\n)", "user": "5aba34c5e4b073f1774426a3"}, {"problem": 118, "code": "(fn mappo [f coll]\n  (lazy-seq (if (empty? coll)\n              nil\n              (cons (f (first coll)) (mappo f (rest coll))))))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 118, "code": "(fn mep [f xs]\n  (if (empty? xs)\n    xs\n    (cons (f (first xs))\n          (lazy-seq (mep f (rest xs))))))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    ()\n    (cons (f (first s)) (lazy-seq (my-map f (rest s))))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 118, "code": "(fn fn-map [f v] (if (false? (empty? v)) (lazy-seq (cons (f (first v)) (fn-map f (rest v)) ))))", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 118, "code": "(fn map' [f coll]\n    (lazy-seq\n     (when-not (empty? coll)\n       (if (empty? (rest coll))\n         [(f (first coll))]\n         (cons (f (first coll)) (map' f (rest coll)))))))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 118, "code": "(fn manual-map\n  [f coll]\n  (if (= false (empty? coll))\n    (lazy-seq (cons (f (first coll)) (manual-map f (rest coll))))))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 118, "code": "(fn m [f l]\n  (if-let [h (first l)]\n    (lazy-seq\n     (cons (f h) (m f (rest l))))))", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 118, "code": "(fn re-map [f s]\n   (lazy-seq \n    (when-let [s (seq s)] \n      (cons (f (first s)) (re-map f (rest s))))))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 118, "code": "(fn new-map [f coll]\n  (if (empty? coll) []\n      (lazy-seq (cons (f (first coll)) (new-map f (rest coll))))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 118, "code": "(fn it [f [x & xs]]\n  (if (not (nil? x))\n    (cons (f x) (lazy-seq (it f xs)))))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll))\n                    (my-map f (rest coll))))))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 118, "code": "(fn [f col]\n  (drop 1\n        (reductions (fn ([a b] (f b))) nil col)))", "user": "5acd08eee4b0e27600da7822"}, {"problem": 118, "code": "(fn my-map\n  ([f [x & xs]] (when x\n            (lazy-seq\n               (cons (f x) (my-map f xs))\n                 ))))", "user": "51e24905e4b01e519814642e"}, {"problem": 118, "code": "(fn doit\n  [pred coll]\n  (lazy-seq\n   (when-let [c (seq coll)]\n     (cons (pred (first c)) (doit pred (rest coll))))))", "user": "4ed90014535d10e5ff6f52fe"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (lazy-seq (and x (cons (f x) (my-map f xs)))))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 118, "code": "(fn pippo\n   ([f s]\n    (when-let [ss (seq s)]\n    (lazy-seq (concat [(f (first s))] (pippo f (rest s)))))))", "user": "5ad99ddee4b0ea6055cfac3a"}, {"problem": 118, "code": "(fn mp [f s]\n  (lazy-seq\n    (when (seq s)\n      (cons (f (first s)) (mp f (rest s))))))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 118, "code": "(fn map' [f [h & r]] (when h (lazy-seq (cons (f h) (map' f r)))))", "user": "586bc870e4b01531a375e964"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (seq s)\n  \t(lazy-seq (cons (f (first s)) (my-map f (rest s))))\n    []))", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (when (not (empty? coll))\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 118, "code": ";(fn my-map [f s]\n;  ((fn itr\n;    ([lst] (itr [] lst))\n;    ([rslt lst]\n;     (lazy-seq\n;      (if (empty? lst) '()\n;          (let [nxt (f (first lst))]\n;            (cons nxt (itr nxt (rest lst)))))))) s))\n\n(fn my-map [f [a & re :as s]]\n  (if (not-empty s)\n    (cons (f a)\n          (lazy-seq (my-map f re)))))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 118, "code": "(fn mmap [fun ssq]\n    (if (false? (empty? ssq)) (lazy-seq (cons (fun (first ssq)) (mmap fun (rest ssq))))))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 118, "code": "(fn [f s]\n  (letfn [(g [f s]\n            (lazy-seq\n              (when-let [s (seq s)]\n                (cons (f (first s)) (g f (rest s))))))]\n    (g f s)))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 118, "code": "(fn map-impl [f [x & xs]]  \n  (lazy-seq (cons (f x) (if (nil? xs) '() (map-impl f xs)))))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 118, "code": "(fn my-map[f xs]\n  (if (empty? xs)\n    xs\n    (lazy-seq (cons (f (first xs)) (my-map f (rest xs))))))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 118, "code": "(fn mymap [fun coll]\n           (if (not-empty coll)\n               (lazy-seq (cons (fun (first coll)) (mymap fun (rest coll))))\n               coll))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 118, "code": "(fn map- [f coll] (lazy-seq\n                   (when-let [s (seq coll)] (cons (f (first s)) (map- f (rest s))))))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 118, "code": "(fn m [f v]\n  (if (empty? v) []\n    (cons (f (first v)) (lazy-seq (m f (rest v))))))", "user": "55e732c5e4b050e68259b492"}, {"problem": 118, "code": "(fn remap [f [x & xs]]\n  (if (nil? x) '() (lazy-seq (cons (f x) (remap f xs)))))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 118, "code": "(fn mapx [f coll] (if (empty? coll) nil (lazy-seq (cons (f (first coll)) (mapx f (rest coll))))))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 118, "code": "(fn m [f xs]\n  (when (seq xs)\n    (lazy-seq (cons (f (first xs))\n                    (m f (rest xs))))))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 118, "code": "(fn mmap \n  ([f coll] (let [ne (first coll)]\n              (if (seq coll)\n                  (lazy-seq (cons (f ne) (mmap f (rest coll))))\n                  nil))))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 118, "code": "(fn m [f c]\n    (if (seq c)\n      (lazy-seq (cons (f (first c)) (m f (rest c))))))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 118, "code": "(fn map1 [f c]\n  (if-let [s (seq c)]\n    (cons (f (first s)) (lazy-seq (map1 f (next s))))\n    nil))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 118, "code": "(fn m [f s] (if (empty? s) [] (lazy-seq (cons (f (first s)) (m f (rest s))))))", "user": "583048d9e4b051871117c007"}, {"problem": 118, "code": "(fn -map [f xs]\n  (if (seq xs)\n    (lazy-seq (cons (f (first xs)) (-map f (rest xs))))))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 118, "code": "(fn my-map [f c]\n  (lazy-seq\n   (when-let [s (seq c)]\n    (cons (f (first s)) (my-map f (rest s))))))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 118, "code": "; (fn [f c] (for [x c] (f x)))\n; (fn [f c] (reduce #(conj % (f %2)) [] c))\n; (fn [f c] (lazy-seq (reduce #(conj % (f %2)) [] c)))\n; (fn m [f c] (when-let [[a & b] c] (lazy-seq (cons (f a) (m f b))))) !!!\n(fn meh [f [x & c]] (if (seq? c)(lazy-seq (cons (f x) (meh f c))) [(f x)]))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 118, "code": "(fn my-map\n  ([f s] (if (empty? s)\n      []\n      (lazy-seq (cons (f (first s)) (my-map f (rest s)))))))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 118, "code": "(fn mp [f col]\n (lazy-seq\n  (if (seq col)\n   (cons (f (first col)) (mp f (rest col))))))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 118, "code": "(fn mymap [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (mymap f (rest s))))))", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 118, "code": "#(rest (reductions (fn [x y] (% y))  (cons 1 %2)))", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 118, "code": "(fn our-map [f s]\n  (when (seq s)\n    (lazy-seq\n     (cons (f (first s))\n           (our-map f (rest s))))))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 118, "code": "(fn mm[f xs]\n  (if (empty? xs)\n    '()\n    (lazy-seq\n     (cons (f (first xs)) (mm f (rest xs))))))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 118, "code": "(fn ff [f coll]\n   (if (not (empty? coll))\n     (lazy-seq (cons (f (first coll)) (ff f (rest coll))))))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 118, "code": "(fn my-map [f [a & r]] (cons (f a) (if r (lazy-seq (my-map f r)))))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 118, "code": "(fn m [f [el & rest]]\n  (cons (f el) (lazy-seq (when rest (m f rest)))))", "user": "5ab5f60be4b073f177442643"}, {"problem": 118, "code": "(fn my-map [f coll]\n    (lazy-seq\n     (cond\n       (empty? coll) coll\n       :else\n       (cons (f (first coll))\n             (my-map f (rest coll))))))", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 118, "code": "(fn a[f,x] ( if (empty? x) [] (lazy-seq ( cons (f (first x)) (a f (rest x))))))", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 118, "code": "(fn domap [f s] (if (first s) (lazy-seq (cons (f (first s)) (domap f (rest s)))) nil))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 118, "code": "(fn mp [f xs]\n      (lazy-seq\n        (when-let [s (seq xs)]\n          (cons (f (first s)) (mp f (rest s))))))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 118, "code": "(fn mymap [f s] (lazy-seq (if (empty? s) '() (cons (f (first s)) (mymap f (rest s))))))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 118, "code": "(fn my-map [f coll] (if (empty? coll) nil (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll)\n    '()\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 118, "code": "(fn x [f c] \n  (if (seq c)\n    (concat [(f (first c))] (lazy-seq (x f (drop 1 c))))\n    ))", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 118, "code": "(fn mymap \n  [fun col]\n  (if (not-empty col)\n    (lazy-seq (cons (fun (first col)) (mymap fun (rest col))))))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 118, "code": "(fn remap-fn [f ss]\n             (lazy-seq (cons (f (first ss))\n                             (let [others (rest ss)]\n                               (if (not (empty? others))\n                                 (remap-fn f others)\n                                 '())))))", "user": "57f904c5e4b0d3187e900936"}, {"problem": 118, "code": "(fn remap [f [x & xs :as s]]\n  (if (empty? s)\n    '()\n    (lazy-seq (cons (f x) (remap f xs)))))", "user": "5b500215e4b02d533a91bce2"}, {"problem": 118, "code": "(fn foo [f c] (when-let [s (seq c)] (lazy-seq (cons (f (first s)) (foo f (rest s))))))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 118, "code": "(fn [f x] (rest (reductions #(f %2) nil x)))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 118, "code": "(fn mapp [fun lst]\n  (lazy-seq\n   (concat\n    (list (fun (first lst)))\n    (cond \n     (empty? (rest lst)) \n     '()\n     :else\n     (mapp fun (rest lst)))\n    )\n   )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (when-let [[head & tail] xs]\n  \t(lazy-seq (cons (f head)\n                    (my-map f tail)))))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 118, "code": "(fn g [f [x & xs]]\n   (when (not (nil? x))\n     (cons (f x)\n           (lazy-seq (g f xs)))))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 118, "code": "(fn my-map [f s]\n    (if (empty? s)\n      '()\n      (lazy-seq (cons (f (first s)) (my-map f (rest s))))\n      ))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 118, "code": "(fn foo [bar [n & args]]\n  (if (= args nil)\n    (list (bar n))\n    (lazy-seq (cons (bar n) (foo bar args)))))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 118, "code": "(fn x [f l] (if (empty? l) nil (lazy-seq (cons (f (first l)) (x f (rest l))))))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when (seq s)\n    (cons (f (first s))\n          (lazy-seq (my-map f (rest s))))))", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 118, "code": "(fn m [f [h & t]]\n (lazy-seq\n  (when h\n   (cons (f h) (m f t)))))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 118, "code": "(fn my-map \n  [f s] (if (seq s) (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 118, "code": "; first solution\n;(fn mymap [f xs]\n;  (when (seq xs)\n;    (lazy-seq\n;     (cons (f (first xs)) (mymap f (rest xs))))))\n\n(fn mymap [f xs]\n  (when-let [[x & r] xs]\n    (lazy-seq (cons (f x) (mymap f r)))))", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 118, "code": "(fn mymap [f s]\n  (lazy-seq\n    (when(not (empty? s))\n      (cons (f (first s)) (mymap f (rest s))))))", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq\n      (cons (f (first s)) (my-map f (rest s))))))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 118, "code": "(fn mymap\n  [f coll]\n    (if (seq coll)\n      (lazy-seq\n        (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 118, "code": "(fn mp [f s]\n  (if (empty? s)\n    (lazy-seq)\n    (cons (f (first s))\n          (lazy-seq\n           (mp f (rest s)))\n     ) \n    )\n  )", "user": "4fecebe1e4b0681fd128dcac"}, {"problem": 118, "code": "(fn -map2 [f [x & xs]]\n  (when-not (nil? x)\n    (cons (f x) (lazy-seq (-map2 f xs)))))", "user": "524740e7e4b05ef8e38e635d"}, {"problem": 118, "code": "(fn mymap [f col]\n  (lazy-seq\n    (if (empty? col)\n      col\n      (cons\n        (f (first col))\n        (mymap f (rest col))))))", "user": "5b840b68e4b047b03b2037bc"}, {"problem": 118, "code": "(fn m [f coll]\n  (lazy-seq (when (seq coll) \n              (cons (f (first coll))\n                    (m f (rest coll))))))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 118, "code": "(fn [f c]\n  (rest (reductions (fn [_ e] (f e)) nil c)))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 118, "code": "(fn map'\n  [f [x & xs]]\n  (if (empty? xs)\n    (list (f x))\n    (lazy-seq (cons (f x) (map' f xs)))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 118, "code": "(fn __ [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq\n     (cons (f (first coll))\n           (__ f (rest coll))))))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 118, "code": "(fn mymap [f xs]\n  (if (empty? xs)\n    nil\n    (concat (list (f (first xs))) (lazy-seq (mymap f (rest xs))))))", "user": "5b1e5bfde4b03cfeda66ed0e"}, {"problem": 118, "code": "(fn [f s]\n  (if (empty? (keep f s)) (repeat (count s) nil) (keep f s)))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 118, "code": "(fn map* [f [x & xs]]\n  (lazy-seq (cons (f x) (when (seq xs) (map* f xs)))))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 118, "code": "(fn remap [a b]\n  (lazy-seq\n    (let [x (a (first b))]\n      (if (next b)\n         (cons x (remap a (next b)))\n         (list x)))))", "user": "5b754f8ee4b047b03b2036c9"}, {"problem": 118, "code": "(fn lazy-stuff [f coll]\n  (let [fst (first coll)]\n    (if (nil? fst)\n      nil\n      (lazy-seq\n       (cons\n        (f (first coll))\n        (lazy-stuff f (drop 1 coll)))))))", "user": "5b4fef74e4b02d533a91bcde"}, {"problem": 118, "code": "(fn my-map [f coll] (if-not (empty? coll) (lazy-seq (cons (f (first coll)) (my-map f (rest coll) )))))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 118, "code": "(fn func [f coll]\n  (lazy-seq \n   (when-let [s (seq coll)] \n      (cons (f (first s)) (func f (rest s))))))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 118, "code": "(fn new-map [f coll]\n  (if (seq coll)\n    (lazy-seq\n      (cons (f (first coll))\n            (new-map f (rest coll))))))", "user": "5813e208e4b0f478707a061b"}, {"problem": 118, "code": "(fn sol [f coll]\n   (if (empty? coll)\n     []\n     (lazy-seq (cons (f (first coll)) (sol f (rest coll))))))", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (let [x (first xs)]\n    (if (nil? x) \n      []\n      (lazy-seq (cons (f x) (my-map f (next xs)))))))", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 118, "code": "(fn re-map [f [fst & rst :as xs]]\n  (lazy-seq\n   (when (seq xs)\n     (cons (f fst) (re-map f rst)))))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 118, "code": "(fn mup  [f [x & xs]] \n  (if (nil? x)\n    []\n    (lazy-seq (cons (f x) (mup f xs) )))\n  )", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 118, "code": "(fn xmap [f [x & xs]] (if x (lazy-seq (cons (f x) (xmap f xs))) []))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 118, "code": "(fn my-map[f s] \n\t(when (first s)\n\t\t(lazy-seq (cons (f (first s)) (my-map f (rest s))))\n\t)\n)", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (when-let [s (seq coll)]\n    (lazy-seq\n     (cons (f (first s)) (my-map f (rest s))))))", "user": "51430fb2e4b0c172af7558ce"}, {"problem": 118, "code": "(fn map' [f xs]\n  (if (empty? xs) \n    ()\n    (let [[x & rs] xs]\n      (lazy-seq (cons (f x) (map' f rs))))))", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 118, "code": "(fn f [x y] (when (seq y)\n              (lazy-seq\n               (cons\n                (x (first y))\n                (f x (next y))))))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 118, "code": "(fn map2 [f s]\n  (if (empty? s)\n    []\n    (cons (f (first s))\n          (lazy-seq (map2 f (rest s))))))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 118, "code": "(fn my-map\n  [f lst]\n  (lazy-seq\n    (cond\n      (empty? lst) ()\n      :else \n        (cons \n          (f (first lst))\n          (my-map f (rest lst))))\n  ))", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 118, "code": "(fn t [f s]\n  (if (empty? s)\n    nil\n    (cons (f (first s)) (lazy-seq (t f (rest s))))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 118, "code": "(fn func [f xs] (if (empty? xs) [] (lazy-seq (cons (f (first xs)) (func f (rest xs))))))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 118, "code": "(fn step [f values]\n  (if (empty? values)\n    []\n    (lazy-seq (cons (f (first values)) (step f (rest values))))\n    ))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 118, "code": "(fn mymap [f [firs & res]]\n  (lazy-seq\n    (if (nil? firs)\n      nil\n      (cons (f firs) (mymap f res)))))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 118, "code": "(fn __\n  [f [x & xs]]\n  (when x\n    (lazy-seq (cons (f x) (__ f xs)))))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 118, "code": "(fn do-map \n  ; \"map\"\n  [func col]\n  ((fn hold [x] \n     (lazy-seq\n      (when-not (empty? x)\n        (cons (func (first x)) (hold (rest x))))))\n   col))", "user": "5bbbcecee4b0a20761a23611"}, {"problem": 118, "code": "(fn reimplement_map\n  [func col]\n  \"given a\tfunction f and an input sequence s, return a lazy sequence of (f x) for each element x in s\"\n  ((fn hold [x]\n     (lazy-seq(when-not (empty? x)\n         (cons (func (first x)) (hold (rest x)))))) col))", "user": "5bbbd077e4b0a20761a23615"}, {"problem": 118, "code": "(fn re-map [f col]\n  (if (seq col) (lazy-seq\n               (cons (f (first col)) (re-map f (rest col))))\n      nil))", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 118, "code": "(fn m [f coll]\n  (\n   when-let [c (seq coll)]\n   (cons (f (first c)) (lazy-seq (m f (rest c))))\n   ))", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 118, "code": "(fn map- [f li]\n  (lazy-seq\n   (when (not (empty? li))\n     (cons (f (first li)) (map- f (rest li))))))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 118, "code": "(fn m [f s]\n   (when (seq s)\n     (cons (f (first s))\n           (lazy-seq (m f (rest s))))))", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 118, "code": "(fn my-map\n  [f s]\n  (if-not (seq s)\n    '()\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 118, "code": "(fn my-map\n  [f seq]\n  (if (not-empty seq)\n    (lazy-seq (cons (f (first seq)) (my-map f (next seq))))))", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 118, "code": "(fn Remap [f s]\n  (lazy-seq\n    (when (seq s)\n      (cons (f (first s)) (Remap f (rest s))))))", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 118, "code": "(fn my-map\n  [f s]\n  (if (seq s)\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))\n    nil)\n  )", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 118, "code": "(fn re-map\n   [f lst]\n   (if (empty? lst)\n     ()\n     (lazy-seq (cons (f (first lst)) (re-map f (rest lst))))))", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 118, "code": "(fn reimplement-map\n  [f arg]\n  (lazy-seq\n   (when-let [s (seq arg)]\n     (cons (f (first s)) (reimplement-map f (rest s)))\n     )\n   )\n  )", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 118, "code": "(fn mapation [fun lst] \n  (if (empty? lst)\n    nil\n    (lazy-seq (cons (fun (first lst)) (mapation fun (rest lst))))))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 118, "code": "(fn re [f lst]\n  (if (false? (empty? lst))\n        (lazy-seq\n          (cons (f (first lst)) (re f (rest lst))))))", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 118, "code": "(fn %map [f l] \n\t(lazy-seq \n    \t(when-let [s (seq l)] \n    \t\t(cons (f (first s)) (%map f (rest s)))\n    \t)\n    )\n)", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 118, "code": "(fn map2 [f xs]\n  (when (seq xs)\n    (lazy-seq\n      (cons (f (first xs)) (map2 f (next xs))))))", "user": "543a8256e4b032a45b869327"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 118, "code": "(fn mp [f [x & xs]] (if x (cons (f x) (lazy-seq (mp f xs)))))", "user": "5b81139fe4b047b03b203782"}, {"problem": 118, "code": "(fn m [f coll] (if (seq coll) (lazy-seq (cons (f (first coll)) (m f (rest coll))))))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 118, "code": "(fn ff [op values]\n  (lazy-seq    \n    (when-let [ss (seq values)]\n      (cons (op (first values)) (ff op (rest values))))))", "user": "59a0286be4b0871e7608b82f"}, {"problem": 118, "code": "(fn m [f [x & s :as r]] \n   (lazy-seq \n    (if (seq r)\n      (cons (f x)(m f s)))))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 118, "code": "(fn func [f coll] (lazy-seq (when (not (empty? coll)) (cons (f (first coll)) (func f (rest coll))))))", "user": "5addadfce4b0837691e92c13"}, {"problem": 118, "code": "(fn map- [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (map- f (rest s))))))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 118, "code": "(fn dismap [f [x & xs]]\n  (if (nil? x)\n    x\n    (lazy-seq (cons (f x) (dismap f xs)))))", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 118, "code": "(fn tst [f [i & k]] (lazy-seq \n                     (if (empty? k) \n                       (cons (f i) k) \n                       (cons (f i) (tst f k))\n                       )\n                     ))", "user": "5b284375e4b063e2438bcc53"}, {"problem": 118, "code": "(fn mm [f [x & xs]]\n  (lazy-seq\n    (cons (f x) (if xs (mm f xs))))\n  )", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 118, "code": "(fn m [f coll]\n    (lazy-seq\n     (if (seq coll)\n       (cons (f (first coll))\n             (m f\n                (rest coll)))\n       ())))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 118, "code": "(fn [f coll]\n  ((fn imap [s]\n    (lazy-seq\n        (if (empty? s)\n          nil\n          (cons (f (first s)) (imap (rest s))))\n    )\n  ) coll)\n)", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 118, "code": "(fn new-map [f coll]\n  (if (false? (empty? coll))\n    (lazy-seq\n      (cons (f (first coll)) (new-map f (rest coll))))))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 118, "code": "(fn my-marre-2 [f lirre]\n  (if (empty? lirre)\n    lirre\n    (cons (f (first lirre)) (lazy-seq (my-marre-2 f (rest lirre))) )))", "user": "5bf50e76e4b0b326c961d8a0"}, {"problem": 118, "code": "(fn hhh [f s]\n  (if (empty? s)\n    []\n    (cons (f (first s)) (lazy-seq (hhh f (rest s))))))", "user": "5bf50ebce4b0b326c961d8a1"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n           (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 118, "code": "(fn my-map [f a]\n  (drop 1 (reductions (fn [_ i] (f i)) (first a) a)))", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 118, "code": "(fn -map [f coll]\n  (lazy-seq\n   (when-let [xs (seq coll)]\n     (cons\n      (f (first coll))\n      (-map f (rest coll))))))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 118, "code": "(fn it [f xs]\n  (if (nil? (first xs))\n'()\n    (cons (f (first xs)) (lazy-seq (it f (rest xs))))))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 118, "code": "(fn mmap [f [x & xs]]\n  (cons (f x)\n        (if (empty? xs)\n          []\n          (lazy-seq (mmap f xs)))))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 118, "code": ";; not my own idea, taken from https://clojure.org/reference/lazy\n(fn my-map\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (my-map f (rest s)))))))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 118, "code": "(fn mapper\n\t[f s]\n\t(if (empty? s)\n\t\ts\n\t\t(lazy-seq\n\t\t\t(cons (f (first s)) (mapper f (rest s))))))", "user": "5c0e58bfe4b01240ff567140"}, {"problem": 118, "code": "(fn foo [f ls]  (if (empty? ls) '() (lazy-seq (cons (f (first ls)) (foo f (rest ls))))))", "user": "52c03baee4b07a9af5792347"}, {"problem": 118, "code": "(fn [f s] (rest (reductions #(f %2) nil s)))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 118, "code": "(fn my-map [func list]\n  (lazy-seq(when-let [s (seq list)]\n             (cons (func (first list))\n              (my-map func (rest list))))))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 118, "code": "(fn my-map [f sq]\n  (if (empty? sq)\n    '()\n    (lazy-seq (cons (f (first sq)) (my-map f (rest sq))))))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 118, "code": "(fn mp [f x] \n  (lazy-seq\n   \t(if-let [a (first x)]\n      (cons (f a) (mp f (rest x))) nil)))", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 118, "code": "(fn map* [f [h & t]]\n  (when \n    h (lazy-seq (cons (f h) (map* f t)))))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 118, "code": "(fn map-reimpl [f v]\n  (if (empty? v) nil\n    (lazy-seq (cons (f (first v)) (map-reimpl f (rest v))))))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 118, "code": "(fn re-map [func collection]\n  (lazy-seq (when-let [s (seq collection)]\n    (cons (func (first s)) (re-map func (rest s))))))", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 118, "code": "(fn [f x] (rest (reductions #(f %2) nil x)))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 118, "code": "(fn m [f [h & t]] (lazy-seq (when h (cons (f h) (m f t)))))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 118, "code": "(fn my-map\n  [f xs]\n  (if (empty? xs) nil\n      (lazy-seq (cons (f (first xs)) (my-map f (rest xs))))))", "user": "5c222b7de4b07e362c230588"}, {"problem": 118, "code": "(fn custom-map2\n  [f s]\n  (if s\n    (lazy-seq\n      (cons\n        (f (first s))\n        (custom-map2 f (next s))\n        )\n      )\n    )\n  )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 118, "code": "(fn m [f s]\n  (lazy-seq \n   (when (seq s)\n     (cons (f (first s))\n           (m f (rest s))))))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 118, "code": "(fn mymap [f xs]\n     (if (empty? xs)\n       xs\n       (cons (f (first xs)) (lazy-seq (mymap f (rest xs))))\n       )\n     )", "user": "5c17467fe4b01240ff5671df"}, {"problem": 118, "code": "(fn mp [f [h & t :as c]] (if (empty? c) [] (cons (f h) (lazy-seq (mp f t)))))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 118, "code": "(fn mp [f col]\n    (lazy-seq\n      (when-let [s (seq col)]\n        (cons (f (first s)) (mp f (rest s))))))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 118, "code": "(fn my-map\n  [f col]\n  (lazy-seq\n   (when (seq col)\n     (cons\n      (f (first col))\n      (my-map f (rest col))))))", "user": "5369d072e4b0243289761ea1"}, {"problem": 118, "code": "(fn maprec [f s] (if (empty? s) [] (lazy-seq (cons (f (first s)) (maprec f (rest s))))))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s) s\n      (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (if x (lazy-seq (cons (f x) (my-map f xs))))\n  )", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 118, "code": "(fn mymap [f coll]\n   (if (false? (empty? coll))\n     (lazy-seq\n       (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 118, "code": "(fn g [f [x & m]] (if (nil? x) [] (cons (f x) (lazy-seq (g f m) ))))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 118, "code": "(fn nmap [f s]\n  (lazy-seq \n    (when-let [p (first s)]\n      (cons (f p) (nmap f (rest s))))))", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 118, "code": "(fn my-map [f seq]\n  (cond\n    (empty? seq)\n    (empty seq)\n    :else\n    (lazy-seq\n             (cons \n               (f (first seq))\n               (my-map f (rest seq))))))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 118, "code": "(fn m [f s]\n  (when s\n      (lazy-seq\n       (cons (f (first s)) (m f (next s))))))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 118, "code": "(fn f-all [f [l & ls]]\n  (if l\n    (lazy-seq (cons (f l) (f-all f ls)))\n    []))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 118, "code": "(fn mymap [func coll]\n  (if (empty? coll)\n    '()\n    (lazy-seq (cons (func (first coll)) (mymap func (rest coll))))))", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 118, "code": "(fn\n  my-map\n  [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (-> s first f) (->> s rest (my-map f ,,,))))))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n    (when coll\n      (cons (f (first coll)) (my-map f (next coll))))))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 118, "code": "(fn func [f lst]\n  (if (empty? lst)\n    nil\n    (lazy-seq (cons (f (first lst))\n                    (func f (rest lst))))))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 118, "code": "(fn [func mylist]\n\t(letfn [(mapf [f lst]\n    \t\t(if (not (empty? lst))\n      \t\t\t(lazy-seq\n        \t\t\t(cons (f (first lst)) (mapf f (rest lst))))))]\n  \n      (mapf func mylist)))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 118, "code": "(fn rr [ff ll] (if (empty? ll) [] (lazy-seq (cons (ff (first ll)) (rr ff (next ll))))))", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 118, "code": "(fn my-map [f xs] (if (empty? xs) [] (lazy-seq (cons (f (first xs)) (my-map f (rest xs))))))", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 118, "code": "(fn map* ([f coll] (lazy-seq (when-let [s (seq coll)] (cons (f (first s)) (map* f (rest s)))))))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 118, "code": "(fn mymap [_f coll]\n  (if (not (empty? coll))\n    (lazy-seq (cons (_f (first coll)) (mymap _f (rest coll))))\n  )\n)", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 118, "code": "(fn m[f s](lazy-seq (cons (f (first s)) (if (empty? (rest s)) '() (m f (rest s))))))", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 118, "code": "(fn [ff mm]\n  (letfn [(lmap [m]\n            (if (empty? m) \n                []\n                (lazy-seq (cons (ff (first m)) \n                                (lmap (rest m)) )))) ]\n    (lmap mm)))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 118, "code": "(fn mymap [f coll] (if (seq coll)\n                     (lazy-seq\n                       (cons (f (first coll)) (mymap f (rest coll))))))", "user": "558843dae4b059ccff29b1f3"}, {"problem": 118, "code": "(fn map1 [f s] (if (empty? s) [] (lazy-seq (cons (f (first s)) (map1 f (rest s))))))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 118, "code": "(fn mp [f x]\n  (if (empty? x)\n    x\n    (lazy-seq(cons (f (first x)) (mp f (rest x))))))\n\n#_\n\n#(loop[c (take 1000001 %2) r []]\n   (if (empty? c)\n     r\n     (recur (rest c) (conj r (% (first c))))\n     )\n   )", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 118, "code": "(fn _map [f s]\n  (if (not (empty? s)) (lazy-seq (cons (f (first s)) (_map f (rest s))))))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 118, "code": "(fn my-map [f [frst & remaining]] (if (empty? remaining) [(f frst)] (lazy-seq (cons (f frst) (trampoline my-map f remaining)))))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 118, "code": "(fn mymap [f coll]\n      (let [fv (first coll)\n            res (f fv)\n            sec (second coll)]\n        (lazy-seq (cons res (if sec \n                              (mymap f (rest coll))\n                              nil)))))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n   (when-let [c (seq coll)]\n     (cons (f (first coll))\n                    (my-map f (rest coll))))))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 118, "code": "(fn map3 [f lst]\n  (lazy-seq\n    (when-let [l (seq lst)]\n      (cons (f (first l)) (map3 f (rest l))))))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 118, "code": "(fn mymap\n    [f values]\n    (if (empty? values)\n      ()\n      (lazy-seq (cons (f (first values))\n                      (mymap f (rest values))))))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 118, "code": "(fn map- [f col] \n  (lazy-seq \n    (when-let [s (seq col)] (cons (f (first s)) (map- f (rest s))))))", "user": "5c70641de4b0fca0c162277f"}, {"problem": 118, "code": "(fn my-map [f coll] \n (when (seq coll) \n   (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 118, "code": "(fn lazymap [f n]\n  (lazy-seq\n    (when-let [ss (seq n)]\n      (cons (f (first n)) (lazymap f (rest n))))))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5c874389e4b048ec896c590e"}, {"problem": 118, "code": "(fn lstMap [func param]\n\t(if (empty? param)\n\t\t[]\n\t\t(lazy-seq (cons (func (first param)) (lstMap func (rest param))))\n\t)\n)", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5c706454e4b0fca0c1622780"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 118, "code": "(fn myMap [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (myMap f (rest s))))))", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5c787131e4b0fca0c1622825"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5c8860bce4b048ec896c5928"}, {"problem": 118, "code": "(fn mymap [fun lst]\n  (lazy-seq\n   (if (seq lst)\n     (cons (fun (first lst)) (mymap fun (rest lst))))))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 118, "code": "(fn m [f xs]\n  (if (empty? xs)\n    '()\n    (lazy-seq (cons (f (first xs)) (m f (rest xs)) ))))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 118, "code": "(fn my-map\n  [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (lazy-seq \n  (when-let [s (seq coll)] \n      (cons (f (first s)) (my-map f (rest s))))))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 118, "code": "(fn reimplement-map\n  [f coll]\n  (lazy-seq\n   (let [s (seq coll)]\n     (if (seq? s)\n       (cons (f (first coll)) (reimplement-map f (rest coll)))))))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 118, "code": "(fn my-mapp\n  [func coll]\n  (let [step (fn [f c]\n                 (when-let [s (seq c)]\n                     (cons (f (first s)) (my-mapp f (rest s)))))]\n    (lazy-seq (step func coll))))", "user": "5c87c79be4b048ec896c591b"}, {"problem": 118, "code": "(fn mymap [g s]\n    (if (empty? s)\n      s\n      (lazy-seq (cons (g (first s)) (mymap g (rest s))))))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 118, "code": "(fn ff [f xs]\n    (when-not (empty? xs)\n      (cons (f (first xs))\n            (lazy-seq\n             (ff f (rest xs))))))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 118, "code": "(fn m [f coll]\n  (when-let [[x & xs] coll]\n    (lazy-seq (cons (f x) (m f xs)))))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 118, "code": "(fn merp [f s]\n  (if (empty? s) \n    nil\n    (lazy-seq\n     (cons (f (first s)) (merp f (rest s))))))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 118, "code": "(fn map-reimpl [f s]\n  (lazy-seq\n    (when-let [fst (first s)]\n      (cons (f fst) (map-reimpl f (rest s))))))", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 118, "code": "(fn mmap [f xs]\n  (if xs\n  (lazy-seq\n   (cons (f (first xs))\n         (mmap f (next xs))      \n   )\n  )\n  )\n)", "user": "543bb568e4b032a45b869334"}, {"problem": 118, "code": "(fn my-map\n   [f c]\n   (lazy-seq\n    (when (seq c)\n      (cons (f (first c)) (my-map f (rest c))))))", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if-not (seq s)\n    '()\n    (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 118, "code": "(fn mp [f [a & more]]\n  (if (empty? more)\n    (list (f a))\n    (lazy-seq (cons (f a) (mp f more)))))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 118, "code": "(fn my-map [f s]\n  (lazy-seq\n   (when s\n    (cons (f (first s)) (my-map f (next s))))))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when (seq s)\n\t  (lazy-seq (cons (f (first s))\n    \t              (my-map f (rest s))))))", "user": "52393e16e4b0d705d026ef06"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s) \n    '()\n    (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 118, "code": "(fn mmap [f coll]\n  (when (seq coll)\n    (lazy-seq\n     (cons (f (first coll))\n           (mmap f (rest coll))))))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 118, "code": "(fn my-map [f vals]\n  (when (seq vals)\n    (lazy-seq (cons (f (first vals)) (my-map f (rest vals))))))", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 118, "code": "(fn [f c]\n  (letfn [(ff [f c]\n \t\t\t(lazy-seq\n   \t\t\t\t(when (seq c)\n     \t\t\t\t(cons (f (first c)) (ff f (rest c))))))]\n    (ff f c)))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 118, "code": "(fn f [func col]\n  (let [fst (first col)\n        rst (rest col)\n        v (func fst)]\n    (if (empty? rst)\n      [v]\n      (lazy-seq (cons v (f func rst))))))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 118, "code": "(fn x [f s] (lazy-seq (cons (f (first s)) (#(if (empty? %) % (x f %)) (rest s)))))", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 118, "code": "(fn select [f coll]\n (lazy-seq \n  (when-let [[curr & other] coll]\n   (cons (f curr) (select f other)))))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 118, "code": "(fn my-map [f coll]\n\t(lazy-seq\n\t\t(when-let [ss (seq coll)]\n\t\t\t(cons (f (first coll))\n\t\t\t\t\t\t(my-map f (next coll))))))", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 118, "code": "(fn my-map\n  [f xs]\n  (if (empty? xs)\n    '()\n    (lazy-seq (cons (f (first xs))\n                    (my-map f (rest xs))))))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 118, "code": "(fn m[f [h & t]]\n  (lazy-seq (when h\n    (cons (f h) (m f t))))\n)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 118, "code": "(fn map2 [func coll]\n   (if (empty? coll)\n     coll\n     (lazy-seq (cons (func (first coll))\n                     (map2 func (rest coll))))))", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 118, "code": "(fn tf [f xs]\n  (if (empty? xs)\n    '()\n    (lazy-seq (cons (f (first xs)) (tf f (rest xs))))))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 118, "code": "(fn my-map \n  [f s] \n  (if (empty? s)\n    []\n  \t(lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "4eb47bb1535d7eef30807362"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s) nil (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 118, "code": "(fn re-map\n  [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (re-map f (rest s))))))", "user": "53ef235de4b0d648e757f4d4"}, {"problem": 118, "code": "(fn r [f s] (if (empty? s) [] (lazy-seq (cons (f (first s)) (r f (rest s))))))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 118, "code": "(fn my-map [f [x & s]]\n  (when-not (nil? x)\n    (lazy-seq (cons (f x) (my-map f s)))))", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 118, "code": "(fn f [op xs] (when (seq xs) (lazy-seq (cons (apply op (take 1 xs)) (f op (drop 1 xs))))))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 118, "code": "(fn mymap [f lst]\n  (if lst (lazy-seq (cons (f (first lst)) (mymap f (next lst)))) nil)\n)", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 118, "code": "(fn my-map [f coll]\n   (if (not (empty? coll))\n     (lazy-seq\n       (cons (f (first coll)) (my-map f (rest coll))))))", "user": "5ce36e02e4b0a17bb84e2b3e"}, {"problem": 118, "code": "(fn f\n  [op [x & rest]]\n    (when-not (nil? x) (lazy-seq (cons (op x) (f op rest)))))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 118, "code": "(fn map- [f coll]\n  (lazy-seq\n   (when (seq coll)\n     (cons (f (first coll))\n           (map- f (next coll))))))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 118, "code": "(fn my-map\n  ([f coll]\n   (lazy-seq (when (seq coll)\n               (cons (f (first coll)) (my-map f (rest coll))))))\n  ([f c1 c2]\n   (lazy-seq (when (and (seq c1) (seq c2))\n               (cons (f (first c1) (first c2)) (my-map f (rest c1) (rest c2)))))))", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 118, "code": "(fn do-seq [f coll]\n  (when (not (empty? coll))\n    (lazy-seq (cons (f (first coll)) (do-seq f (rest coll))))))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 118, "code": "(fn mymap  [func coll]\n\n    (if (empty? coll)\n      coll\n\n      (lazy-seq (cons (func (first coll)) (mymap func (rest coll))))\n      \n\n      )\n\n\n    )", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 118, "code": ";(fn re-map\n ; [f coll]\n  ;(take (count coll) (cons (f (first coll)) (lazy-seq (re-map f (rest coll)))))) \u8d85\u65f6\u4e86\uff01\n  \n(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 118, "code": "(fn new-map [f col]\n  (lazy-seq\n    (if (empty? col)\n      []\n      (cons (f (first col)) (new-map f (rest col))))))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 118, "code": "(fn mymap [f xs]\n  (if (empty? xs)\n    '()\n    (lazy-seq (cons (f (first xs)) (mymap f (rest xs))))))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 118, "code": "(fn mm [f xs]\n   (lazy-seq (let [fs (f (first xs))]\n               (if (next xs)\n                 (cons fs (mm f (next xs)))\n                 (list fs)))))", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 118, "code": "(fn dmap [f ls]\n        (when (not (empty? ls))\n          (cons (f (first ls)) (lazy-seq (dmap f (rest ls))))))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 118, "code": "(fn mm [f coll]\n  (if (nil? (first coll))\n    nil\n    (lazy-seq (cons (f (first coll))\n                    (mm f (rest coll))))))", "user": "5012da69e4b0c8732600222d"}, {"problem": 118, "code": "(fn mmap\n  [f [i & s]]\n  (if i\n    (lazy-seq (cons (f i) (mmap f s)))\n    '()))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 118, "code": "(fn -map [f coll]\n  (if (empty? coll) \n    ()\n    (lazy-seq \n     (cons (f (first coll))\n           (-map f (next coll))))))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 118, "code": "(fn m [f coll]\n\t(if (seq coll) (lazy-cat [(f (first coll))] (m f (rest coll))))\n)", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 118, "code": "(fn map* [f col]\n  (if (empty? col)\n    col\n    (lazy-seq\n     (cons (f (first col)) (map* f (rest col))))))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (lazy-seq\n   (if (empty? xs)\n     xs\n     (cons (f (first xs))\n           (my-map f (rest xs))))))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 118, "code": "(fn\n  [f coll]\n  (drop 1 (reductions (fn [acc curr] (f curr)) [] coll)))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 118, "code": "(fn [f sq]\n  (let [g (fn g [coll]\n            (when (seq coll)\n              (lazy-seq (cons (f (first coll))\n                              (g (rest coll))))))]\n    (g sq)))", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 118, "code": "(fn mapo [f col]\n  (lazy-seq (when-let [s (seq col)]\n              (cons (f (first s)) (mapo f (rest s))))))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if-let [x (first coll)]\n    (cons (f x)\n          (lazy-seq (my-map f (rest coll))))\n    ()))", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 118, "code": "(fn mm [f s]\n  (lazy-seq\n    (let [fs (f (first s))]\n      (if (next s)\n         (cons fs (mm f (next s)))\n         (list fs)))))", "user": "5d25abc9e4b02ea6f0fb6a37"}, {"problem": 118, "code": "(fn my-map [f sqn]\n   (lazy-seq (when-let [s (seq sqn)]\n               (cons (f (first s)) (my-map f (rest s))))))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 118, "code": "(fn mp [f [h & t]]\n      (lazy-seq\n       (when h\n         (cons (f h) (mp f t)))))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 118, "code": "(fn [op se] ((fn f [ss] (if (empty? ss) \n                          '()\n                          (cons (op (first ss))\n                                (lazy-seq (f (rest ss)))))) se))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 118, "code": ";(fn c-map [f s] (reduce #(conj %1 (f %2) ) [] s  ) )\n(fn c-map [f s]\n  (lazy-seq\n    (if (seq s)\n      (cons (f (first s)) (c-map f (rest s)))\n      nil\n      )))", "user": "5cf53196e4b087f62be35a94"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (not-empty coll)\n        (lazy-seq\n          (cons (f (first coll)) (my-map f (rest coll))))))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 118, "code": "(fn mp [f in] (lazy-seq\n                 (when-let [ii (seq in)]\n                   (cons (f (first in)) (mp f (rest ii))))))", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 118, "code": "(fn map* \n  [f [head & tail :as xs]]\n  (when (seq xs)\n    (lazy-seq (cons (f head) (map* f tail)))))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 118, "code": "(fn lazy-map [f arr]\n  (if (seq arr)\n  \t(lazy-seq (cons (f (first arr)) (lazy-map f (rest arr))))\n    ()))", "user": "5cb41c40e4b026601754b911"}, {"problem": 118, "code": "(fn my-map [func coll]\n  (if (not (empty? coll))\n    (lazy-seq (cons (func (first coll))\n                    (my-map func (rest coll))))))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 118, "code": "(fn m \n  [f coll]\n    (lazy-seq (if (not (nil? (first coll))) (cons (f (first coll)) (m f (rest coll))))))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 118, "code": "(fn My-Map [F L]\n    (if (nil? (first L))\n      nil\n      (lazy-seq (cons (F (first L)) (My-Map F (rest L) ) ))\n    ) \n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 118, "code": "(fn mp [f s]\n  (when (not-empty s)\n    (lazy-seq (cons (f (first s)) (mp f (rest s))))))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 118, "code": "(fn mmap [f xs] (lazy-seq (when-let [s (seq xs)] (cons (f (first s)) (mmap f (rest s))))))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 118, "code": "(fn mymap [f coll] (if (empty? coll) [] (lazy-seq (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 118, "code": "(fn m\n  [f [x & xs]]\n  (if x\n    (lazy-seq (cons (f x) (m f xs)))\n    []))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 118, "code": "(fn m [f c]\n  (lazy-seq\n   (when-let [s (seq c)]\n     (cons (f (first s)) (m f (rest c))))))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 118, "code": "(fn mymap\n  [f [x & xs]]\n  \t(lazy-seq\n         (when x\n           (cons (f x) (mymap f xs) ))))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 118, "code": "(fn [f coll]\n\t(letfn\n\t\t[(step [f coll]\n\t\t\t(if coll (lazy-seq (cons (f (first coll)) (step f (next coll))))))]\n(step f coll)))\n\n;https://github.com/khotyn/4clojure-answer/blob/master/118-reimplement-map.clj", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s) nil\n      (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 118, "code": "(fn map- [f coll]\n    (if (empty? coll)\n      coll\n      (lazy-seq\n       (cons (f (first coll)) (map- f (rest coll))))))", "user": "5d28b684e4b092dab7f59c83"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 118, "code": "(fn m [f [x & y]]\n    (if (nil? y)\n      (list (f x))\n      (lazy-seq (cons (f x) (m f y)))))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 118, "code": "(fn custom-map\n  ([f coll]\n   (lazy-seq\n     (when-let [s (seq coll)]\n       (cons (f (first s)) (custom-map f (rest s)))))))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (when (first coll)\n    (lazy-seq (cons (f (first coll))  (my-map f (rest coll)) ))))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n    (when-not (empty? coll)\n      (cons (f (first coll))\n            (my-map f (rest coll))))))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 118, "code": "(fn f [g ls]\n  (if (empty? ls)\n    []\n    (lazy-seq (cons (g (first ls)) (f g (rest ls))))))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 118, "code": "(fn mup\n  [f xs]\n  (when (seq xs)\n    (lazy-seq\n      (cons (f (first xs))\n            (mup f (rest xs))))))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 118, "code": "(fn m [f xs]\n  (if (seq xs)\n    (lazy-seq\n     (cons (f (first xs)) (m f (rest xs))))))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 118, "code": "(fn my-map [f s]\n   (if (empty? s)\n    '()  ; or (list) or nil\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))\n    ))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n    (lazy-seq\n      (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 118, "code": "(fn map-new [f c]\n   (if (empty? c) []\n                  (concat [(f (first c))] (lazy-seq (map-new f (rest c))))))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n    (lazy-seq\n      (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll) nil\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "5d1609f9e4b0902706380dd9"}, {"problem": 118, "code": "(fn map*\n  [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq\n      (cons (f (first coll))\n            (map* f (rest coll))))))", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 118, "code": "(fn [f s] (rest (reductions #(f %2) 0 s)))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 118, "code": "(fn it [f s]\n  (if (seq s)\n    (lazy-seq (cons (f (first s))\n                    (it f (rest s))))\n    nil))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 118, "code": "(fn x-m [f [h & r]]\n      (lazy-seq\n        (when h\n          (cons (f h) (x-m f r)))))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 118, "code": "(fn map' [f xs]\n  (when (not-empty xs)\n    (lazy-seq (cons (f (first xs)) (map' f (rest xs))))))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 118, "code": "(fn pam [f coll]\n   (if (empty? coll)\n     coll\n    (cons (f (first coll)) (lazy-seq (pam f (rest coll))))))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 118, "code": "(fn -map [f coll]\n  (if (empty? coll)\n    '()\n    (lazy-seq (cons (f (first coll)) (-map f (rest coll))))))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 118, "code": "(fn m[f [x & s]](if(nil? s)[(f x)](lazy-seq(cons(f x)(m f s)))))", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 118, "code": "(fn mop [f xs]\n   (if (empty? xs) nil\n       (lazy-seq (cons (f (first xs))\n                       (mop f (rest xs))))))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 118, "code": ";;(partial (fn foo [i f s] (if-not (= :foo (get s i :foo)) (lazy-seq (cons (f (nth s i)) (foo (inc i) f s))))) 0)\n(fn foo [f s] (if-not (empty? s) (lazy-seq (cons (f (first s)) (foo f (rest s))))))", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 118, "code": "(fn m [f xs]\n  (if (not-empty xs)\n        (lazy-seq\n          (cons (f (first xs)) (m f (rest xs))))))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 118, "code": "(fn wut [f c]\n  (if (empty? c)\n    nil\n    (lazy-seq\n     (cons (f (first c)) (wut f (rest c))))))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 118, "code": "(fn mymap [f [x & xs]]\n    (when x\n      (lazy-seq\n        (cons (f x) (mymap f xs)))))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 118, "code": ";; learned that reduce did not work here. \n;; laziness is still a bit confusing, need more practice!\n(fn lazy-map [f coll]\n  (if (seq coll)\n    (->> (rest coll)\n         (lazy-map f)\n         (lazy-cat [(f (first coll))]))\n    []))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 118, "code": "(fn my-map [f s] (if (seq s) (cons (f (first s)) (lazy-seq (my-map f (rest s)))) ()))", "user": "4db3a0e5535df7e46ed9b6d0"}, {"problem": 118, "code": "(fn my-map [fun coll]\n  (cond\n   (empty? coll) nil\n   :else (lazy-seq (cons (fun (first coll)) (my-map fun (rest coll))))))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 118, "code": "(fn fun [f coll]\n  (cond\n    (empty? coll) '()\n    :else (lazy-seq (concat [(f (first coll))] (fun f (rest coll)) ) )\n  )\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 118, "code": "(fn fx  [f c]     (if  (false? (empty? c))     (lazy-seq    (cons (f (first c) )    (fx f (rest c)) ) )       )  )", "user": "5da98129e4b000c986472c33"}, {"problem": 118, "code": "(fn my-map [f coll]\n (lazy-seq\n  (when-let [x (first coll)]\n    (cons (f x) (my-map f (rest coll)))    \n  )\n )\n)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 118, "code": "(fn rmap [f coll]\n  (if (false? (empty? coll))\n    (lazy-seq\n     (cons (f (first coll)) (rmap f (rest coll))))))", "user": "5dab11cde4b000c986472c45"}, {"problem": 118, "code": "(fn my-map [f [first-element & remaining-elements]]\n  (lazy-seq\n   (if first-element\n     (cons (f first-element) (my-map f remaining-elements)))))", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 118, "code": "(fn my-map [fun coll]\n  (if (empty? coll)\n    '()\n    (lazy-seq (cons (fun (first coll))\n                    (my-map fun (rest coll))))))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 118, "code": "(fn m[f s] \n  (when (seq s)\n    (lazy-seq (cons (f (first s)) (m f (rest s))))))", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 118, "code": "(fn f [g xs]\n  (if (empty? xs) '()\n    (cons (g (first xs)) (lazy-seq (f g (rest xs))))))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 118, "code": "(fn map-as-lazy [f l]\n  (lazy-seq\n   (when-let [s (seq l)]\n     (if (seq? s)\n       (cons (f (first s))\n             (map-as-lazy f (rest s)))))))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 118, "code": "(fn p[f s]\n  (if (empty? s) '()\n    (lazy-seq\n      (cons (f (first s)) (p f (rest s))))))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 118, "code": "(fn m [f coll]\n   (if (empty? coll)\n     []\n     (let [[h & rest] coll]\n       (lazy-seq (cons (f h) (m f rest))))))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 118, "code": "(fn m [f s] (if (empty? s) s (lazy-seq (cons (f (first s)) (m f (rest s))))))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 118, "code": "(fn m [f xs] \n  (lazy-seq \n   (when-let [s (seq xs)] \n     (cons (f (first s))\n           (m f (rest s))))))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll)\n    '()\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 118, "code": "(fn m [f s]\n  (if (empty? s) \n    '()\n    (lazy-seq (cons (f (first s)) (m f (rest s))))))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 118, "code": "(fn m [f [i & r]] (lazy-seq (cons (f i) (if r (m f r)))))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 118, "code": "( fn xxx [f xs] ( cons (f (first xs))  (if (empty? (rest xs)) nil (lazy-seq ( xxx f (rest xs))))))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 118, "code": "(fn mapImpl[f vect]\n  (lazy-seq (let [x (f (first vect))]\n              (if (next vect)\n                (cons x (mapImpl f (rest vect)))\n                (list x)))))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 118, "code": "(fn [f l] (rest (reductions #(f %2) 0 l)))", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 118, "code": "(fn mymap [f x]\n             (when (not (empty? x))\n               \n               (lazy-seq (cons (f (first x)) (mymap f (rest x)))))\n\n             )", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 118, "code": "(fn map2 [f coll] {:pre (every? true? [(fn? f) (sequential? coll)])}\n    (lazy-seq\n        (if (empty? coll)\n            '()\n            (cons (f (first coll)) (map2 f (rest coll)))\n        )\n    )\n)", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 118, "code": "(fn lazy-map [f coll]\n  (let [[head & tail] coll]\n    (if (empty? tail)\n      (lazy-seq (vector (f head)))\n      (lazy-seq (cons (f head) (lazy-map f tail)))))\n  )", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 118, "code": "(fn m [f s]  (lazy-seq (if (seq s) (cons (f (first s)) (m f (rest s))))))", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 118, "code": "(fn my-map\n  [f -seq]\n   (if-not (empty? -seq)\n     (lazy-seq (cons (f (first -seq)) (my-map f (rest -seq))))))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (if x\n    (lazy-seq\n      (cons (f x) (my-map f xs)))\n    []))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 118, "code": "(fn my-map [func col]\n   (when (seq col)\n     (lazy-seq (cons (func (first col))\n                     (my-map func (rest col))))))", "user": "5db98f39e4b010eb3c36cd53"}, {"problem": 118, "code": "(fn mymap [f col]\n  (lazy-seq (when (not-empty col) (cons (f (first col)) (mymap f (rest col))))))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 118, "code": "(fn func [f coll]\n                   (if (not-empty coll)\n                     (lazy-seq\n                       (cons (f (first coll)) (func f (rest coll))))))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 118, "code": "(fn m [f [x & xs :as all]]\n    (if (seq all)\n      (cons (f x) (lazy-seq (m f xs)))\n      []))", "user": "529dfc6de4b04e0c58e87b8a"}, {"problem": 118, "code": "(fn sora-map [fun [i & r]]\n  (cons (fun i) \n        (if (empty? r)\n          nil\n          (lazy-seq (sora-map fun r)))))", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 118, "code": "(fn lazzy-map [fun seq1] (when(seq seq1)(cons (fun (first seq1)) (lazy-seq (lazzy-map fun (rest seq1))) )))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 118, "code": "(fn dfs [f coll]\n   (lazy-seq\n     (when-let [s  (seq coll)]\n       (cons (f (first s)) (dfs f (rest s))))))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 118, "code": "(fn m [f [x & s]]\n    (lazy-seq (if x (cons (f x) (m f s)))))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 118, "code": "(fn re-map [f sequence] (if (seq sequence) (lazy-seq (cons (f (first sequence)) (re-map f (rest sequence))))))", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 118, "code": "(fn my-map\n  [func items]\n  (let [step (fn [f c]\n               (when-let [s (seq c)]\n                 (cons (f (first s)) (my-map f (rest s)))))]\n\n    (lazy-seq (step func items))))", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 118, "code": "(fn map1 [f coll]\n  (if (empty? coll)\n    []\n    (lazy-seq (cons (f (first coll)) (map1 f (rest coll))))))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 118, "code": "; (fn [f coll] (reduce #(conj % (f %2)) [] coll))\n\n#_(fn lm [f coll]\n  (lazy-seq (cons (f (first coll))\n                  (when (next coll)\n                    (lm f (rest coll))))))\n\n(fn mymap [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq\n      (cons (f (first coll))\n            (mymap f (rest coll))))))", "user": "59ad2fcee4b00adcf69795de"}, {"problem": 118, "code": "(fn my-map [f coll]\n    (when (seq coll)\n      (cons (f (first coll)) (lazy-seq (my-map f (rest coll))))))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when (seq s)\n    (cons (f (first s))\n          (lazy-seq (my-map f (rest s))))))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 118, "code": "(fn m \n  [f coll] (if (empty? coll) [] \n    (cons (f (first coll)) \n        (lazy-seq (m f (rest coll))))))", "user": "5e18bd30e4b0dc95940084fa"}, {"problem": 118, "code": "(fn my-map [f x]\n    (if (empty? x) (empty x)\n      (lazy-seq (cons (f (first x)) (my-map f (next x))))))", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 118, "code": "(fn x [f arr]\n  (if (nil? (first arr))\n    nil\n    (lazy-seq (cons\n               (f (first arr))\n               (x f (drop 1 arr))))))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 118, "code": "(fn my-map\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (my-map f (rest s)))))))", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 118, "code": "#_(fn [f xs] (reduce #(conj % (f %2)) [] xs))\n(fn rmap [f xs] \n  (cond (= xs '()) (lazy-seq)\n         :else (lazy-seq (cons (f (first xs)) (rmap f (rest xs))))))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 118, "code": "(fn [f coll]\n   (letfn [(g [coll]\n             (if (empty? coll)\n               ()\n               (let [[h & t] coll]\n                 (lazy-seq (cons (f h) (g t))))))]\n    (g coll)))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 118, "code": "(fn [f s] (reductions (fn [_ x] (f x)) (f (first s)) (rest s)))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 118, "code": "(fn answer [f list]\n  (lazy-seq\n    (when-let [_ (seq list)]\n      (cons (f (first list)) (answer f (rest list))))\n    ))", "user": "5e491182e4b043cd24807a46"}, {"problem": 118, "code": "(fn m [f c]\n  (if-not (empty? c)\n    (lazy-seq (cons (f (first c)) (m f (rest c))))))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 118, "code": "(fn mm [f s]\n  (lazy-seq\n    (let [fs (f (first s))]\n      (if (next s)\n         (cons fs (mm f (next s)))\n         (list fs)))))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 118, "code": "(fn g [f c]\n            (if (empty? c)\n              nil\n              (lazy-seq (cons (f (first c))  (g f (next c))))))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 118, "code": "(fn t [f x]\n  (if (not-empty x)\n\t  (lazy-seq (cons \n                 (f (first x)) \n                 (t f (rest x))))))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 118, "code": "(fn mmm [f coll]\n  (when-let [s (seq coll)]\n    (lazy-seq\n      (cons (f (first s)) (mmm f (rest s))))))", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 118, "code": "(fn foo [f arr]\n    (if (nil? arr)\n      nil\n      (lazy-seq (cons (f (first arr)) (foo f (next arr)))))\n  )", "user": "5e2586afe4b05b4b01516167"}, {"problem": 118, "code": "(fn map_ [f s] (lazy-seq (when (seq s) (cons (f (first s)) (map_ f (rest s))))))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 118, "code": "(fn m [f [x & xs]]\n  (if (nil? x)\n    nil\n    (lazy-seq (cons (f x) (m f xs)))))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 118, "code": "(fn my-map [f xs]\n    (lazy-seq\n      (when-let [s (seq xs)]\n        (cons (f (first s)) (my-map f (next s))))))", "user": "509e8da7e4b08df8156e9e2f"}, {"problem": 118, "code": "(fn mmap [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (mmap f (rest s))))))", "user": "5da975b9e4b000c986472c32"}, {"problem": 118, "code": "(fn my-map [f coll]\n    (when (not (empty? coll))\n      (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (lazy-seq\n   (if-not (seq coll)\n     []\n     (cons (f (first coll))\n           (mymap f (rest coll))))))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 118, "code": "(fn mm [f s]\n  (lazy-seq\n    (let [fs (f (first s))]\n      (if (next s)\n         (cons fs (mm f (next s)))\n         (list fs)))))", "user": "5e5f8a07e4b0fd0acd15867c"}, {"problem": 118, "code": "(fn my-map[f col](lazy-seq (if-not (empty? col) (cons (f (first col)) (my-map f (rest col))))))", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 118, "code": "(fn map2 [f s]\n          (lazy-seq (cons (f (first s)) (if (next s) (map2 f (next s)) nil))))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 118, "code": "(fn mm [f n]\n  (cond\n   (empty? n) nil\n   :else (lazy-seq (cons (f (first n)) (mm f (rest n))))\n   ))", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 118, "code": "(fn minimap [f s]\n  (if (empty? s)\n   \t()\n    (lazy-seq \n    \t(cons (f (first s))\n        \t  (minimap f (rest s))))))", "user": "5e78e8d3e4b085ba37836dfd"}, {"problem": 118, "code": "(fn mymap [f s]\n        (if (empty? (rest s))\n          (list (f (first s)))\n          (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll)\n    []\n    (lazy-cat [(f (first coll))] (my-map f (rest coll)))))", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 118, "code": "(fn mp\n  [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first coll)) (mp f (rest coll))))))", "user": "4eb70649535d7eef30807373"}, {"problem": 118, "code": "(fn my-map [f [h & t :as s]]\n  (if (empty? s)\n    s\n    (lazy-seq (cons (f h) (my-map f t)))))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 118, "code": "(fn my-map [func coll]\n  (when-let [s (seq coll)]\n    (cons (func (first s))\n          (lazy-seq (my-map func (rest s))))))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 118, "code": "(fn func [f coll]\n  (if (empty? coll)\n    coll\n    (lazy-seq (cons (f (first coll)) (func f (rest coll))))))", "user": "5e805895e4b085ba37836e44"}, {"problem": 118, "code": "(fn lazy-map [f x]\n  (lazy-seq\n   (when-let [ss (seq x)]\n     (cons (f (first x)) (lazy-map f (next x))))))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 118, "code": "(fn map' [f s]\n  (when (seq s)\n    (lazy-seq\n      (cons\n        (f (first s))\n        (map' f (rest s))))))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 118, "code": "(fn func [f coll]\n   (lazy-seq\n     (when-let [s (seq coll)]\n       (cons (f (first s)) (func f (rest s))))))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 118, "code": "(fn x [f s]\n    (if (seq s)\n      (lazy-seq (cons (f (first s)) (x f (next s))))))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (when-let [[head & tail] xs]\n    (lazy-seq (cons (f head) (my-map f tail)))))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 118, "code": "(fn reimpl-map [f x]\n  (if (not (empty? x))\n    (lazy-seq\n     (cons (f (first x))\n           (reimpl-map f (rest x))))))", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 118, "code": "(fn [f lst]\n  (\n    letfn \n    [\n      (aux [f l]\n        (if (empty? l) '() \n          (lazy-seq \n            (cons (f (first l))\n            (aux f (rest l))\n            )\n          )\n        )\n      )\n    ]\n    (aux f lst)\n  )\n)", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 118, "code": "(fn my-map \n  [n col]\n  (if (seq col) \n    (lazy-seq\n               (cons (n (first col)) (my-map n (rest col))))nil))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 118, "code": "(fn a [f s]\n   (if (seq s)\n     (cons (f (first s))\n           (lazy-seq\n             (a f\n                (rest s))))))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 118, "code": "(fn reMap \n  [n x]\n  (if (seq x) \n    (lazy-seq\n               (cons (n (first x)) (reMap n (rest x))))nil))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (not (empty? s))\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))\n    '()))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 118, "code": "(fn mymap [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (mymap f (rest s))))))", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 118, "code": "(fn ff [f lst]\n  (if (empty? lst)\n    lst\n    (lazy-seq(cons (f (first lst)) (ff f (rest lst))))\n    ))", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 118, "code": "(fn solution [f input]\n  (let [firstling (f (first input))\n        left (drop 1 input)]\n    (if (empty? left)\n      (lazy-seq (cons firstling ()))\n      (lazy-seq (cons firstling (solution f left))))))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 118, "code": "(fn __\n  [f coll]\n  (if (false? (empty? coll))\n    (lazy-seq\n      (cons (f (first coll)) (__ f (rest coll))))))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (when x\n    (lazy-seq (cons (f x) (my-map f xs)))))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 118, "code": "(fn [f values]\n  (letfn [(my-map [f values] (lazy-seq (when (seq values) (cons (f (first values)) (my-map f (next values))))))]\n    (my-map f values)))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 118, "code": "(fn map* [f [x & xs]]\n  (if (nil? xs)\n    (list (f x))\n    (cons (f x) (lazy-seq  (map* f xs)))))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 118, "code": "(fn [f s]\n   (rest (reductions #(f %2) 0 s)))", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 118, "code": "(fn mp [f [x & xs]]\n  (when x\n    (lazy-seq (cons (f x) (mp f xs)))))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 118, "code": "(fn mm [f coll]\n   (lazy-seq\n     (when (seq coll)\n       (cons (f (first coll)) (mm f (rest coll))))))", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 118, "code": "(fn mymap [func coll]\n  (if (empty? coll)\n    []\n    (lazy-seq (cons (func (first coll)) (mymap func (rest coll))))))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 118, "code": "(fn x [f coll]\n  (lazy-seq\n    (when-not (nil? (first coll)) \n      (cons (f (first coll)) (x f (rest coll))))))", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 118, "code": "(fn other-map [f coll]\n  (if (seq coll)\n    (cons (f (first coll)) (lazy-seq (other-map f (rest coll))))\n    '()))", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 118, "code": "(fn new-map\n  [f [head & tail]]\n  (when head\n    (lazy-seq (cons (f head) (new-map f tail)))))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 118, "code": "(fn m [f [x & xs :as all]]\n  (if (empty? all)\n    ()\n    (cons (f x)\n          (lazy-seq (m f xs)))))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (when-not (empty? xs)\n    (cons (f (first xs)) (lazy-seq (my-map f (rest xs))))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 118, "code": "(fn fn118 [f s]\n  (if (not (empty? s))\n    (concat [(f (first s))] (lazy-seq (fn118 f (rest s))))))", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    s\n    (cons \n      (f (first s))\n      (lazy-seq (my-map f (rest s))))))", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 118, "code": "(fn my-map [f s] (if (empty? s)\n                   '()\n                   (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 118, "code": ";; not lazy\n;(fn [f col]\n;  (loop [c col res []]\n;    (if (empty? c)\n;      res\n;      (recur (rest c)\n;             (conj res (f (first c)))))))\n\n(fn my-map [f col]\n  (when (not (empty? col))\n    (lazy-seq\n     (cons (f (first col))\n           (my-map f (rest col))))))", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 118, "code": "(fn mm [f s]\n  (lazy-seq\n    (let [fs (f (first s))]\n      (if (next s)\n         (cons fs (mm f (next s)))\n         (list fs)))))", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 118, "code": "(fn custom-map-2 [f s]\n  (lazy-seq\n    (let [fs (f (first s))]\n      (if (next s)\n        (cons fs (custom-map-2 f (next s)))\n        (list fs)))))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 118, "code": "(fn map'\n  [f coll]\n  (if (empty? coll)\n    coll\n    (lazy-seq (cons (f (first coll)) (map' f (rest coll))))))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (if-let [v (first xs)]\n    (lazy-seq (cons (f v) (my-map f (drop 1 xs))))\n    '()))", "user": "5954108ae4b066ee0a44aef4"}, {"problem": 118, "code": "(fn m [f coll]\n  (lazy-seq\n   (if (empty? coll)\n     ()\n     (cons (f (first coll)) (m f (rest coll))))))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 118, "code": "(fn map' [f s]\n  (if (empty? s) '()\n    (lazy-seq (cons (f (first s)) (map' f (rest s))))))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 118, "code": "(fn mp [f s]\n  (lazy-seq\n   (if (empty? (rest s))\n     (list (f (first s)))\n     (cons (f (first s)) (mp f (rest s))))))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 118, "code": "(fn my-map [f [x & xs]]\n  (lazy-seq (cons (f x) (if xs (my-map f xs)))))", "user": "5df08767e4b093ff717275bf"}, {"problem": 118, "code": "(fn reimplement-map\n  [f s]\n  (if-not (nil? (next s))\n    (lazy-seq (cons (f (first s)) (reimplement-map f (rest s))))\n    (list (f (first s)))))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 118, "code": "(fn my-map [f s]\n  (rest (reductions #(f %2) 0 s)))", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 118, "code": "(fn sol118\n  [pred coll]\n\n  (when (not-empty coll)\n    (lazy-seq\n     (cons (pred (first coll))\n           (sol118 pred (rest coll))))))", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 118, "code": "(fn mmap [f [x & xs]]\n  (lazy-seq\n   (when x\n    (cons (f x) (mmap f xs)))))", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 118, "code": "(fn my-map [f s]\n    (lazy-seq\n      (if (empty? s)\n        []\n        (cons (f (first s)) (my-map f (rest s))))))", "user": "5ed16f26e4b016b56eae05bb"}, {"problem": 118, "code": "(fn lazy-map\n  ([f xs]\n   (if (empty? xs)\n     []\n     (let [y (f (first xs))]\n       (lazy-seq\n         (cons y (lazy-map f (rest xs))))))))", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 118, "code": "(fn mymp\n  [f xs]\n  (cons (f (first xs))\n        (if (empty? (rest xs))\n            '()\n            (lazy-seq (mymp f (rest xs))))))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s) s (lazy-seq (cons (f (first s)) (mymap f (rest s))))))", "user": "4eb97234535dfed6da9c6d53"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (if (false? (empty? coll))\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 118, "code": "(fn mymap [f s]\n  ((fn g [f s]\n    (if (nil? (first s))\n      nil\n      (->\n        (cons (f (first s)) (g f (rest s)))\n        (lazy-seq))))\n    f s))", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 118, "code": "(fn my-map [f s] (if (empty? s) nil (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 118, "code": "(fn mm [op sq]\n  (lazy-seq (let [[f & r] sq, calc (op f)] (if (nil? r) (seq [calc]) (cons calc (mm op r))))))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 118, "code": "(fn map-\n  [f coll]\n  (lazy-seq (when-let [s (seq coll)]\n              (cons (f (first s)) (map- f (rest coll))))))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 118, "code": "(fn map* [f [x & res :as coll]]\n  (when-not (empty? coll) (lazy-seq (cons (f x) (map* f res)))))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 118, "code": "(fn g [f xs]\n  (lazy-seq\n    (if (next xs)\n      (cons (f (first xs)) (g f (next xs)))\n      (list (f (first xs))))))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 118, "code": "(fn m [f l] (if (seq l) (lazy-seq (cons (f (first l)) (m f (rest l)))) ()))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 118, "code": "(fn cust-map [f c]\n  (when (-> c empty? not)\n    (lazy-seq (cons (f (first c))\n                    (cust-map f (rest c))))))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 118, "code": "(fn my-lazy-map\n  [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll)) (my-lazy-map f (rest coll))))))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 118, "code": "(fn mp [f s] \n  (when (seq s)\n    (lazy-seq (cons (f (first s)) (mp f (rest s))))))", "user": "5f300f28e4b033932238a682"}, {"problem": 118, "code": "(fn mymap [f v]\n  (lazy-seq (if (empty? v) nil (cons (f (first v)) (mymap f (rest v))))))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 118, "code": ";(fn [fun in] \n;  (loop [input (take 1000001 in)\n;         result []] \n;    (if (> (count input) 0) \n;      (recur (rest input) (conj result (fun (first input)))) \n;      result)))\n\n(fn mm [f s]\n  (lazy-seq\n    (let [fs (f (first s))]\n      (if (next s)\n         (cons fs (mm f (next s)))\n         (list fs)))))", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 118, "code": "(fn [f s]\n   (letfn [(m [s]\n             (when-let [ss (seq s)]\n               (lazy-seq (cons (f (first s)) (m (rest ss))))))]\n     (m s)))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 118, "code": "(fn foo [f coll]\n   (if (seq coll)\n     (cons (f (first coll)) (lazy-seq (foo f (rest coll))))))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 118, "code": "(fn my-map [f coll] (lazy-seq (when-let [c (seq coll)] (cons (f (first c)) (my-map f (rest c))))))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 118, "code": "(fn m [f s] (lazy-seq (if (empty? s) s (cons (f (first s)) (m f (rest s))))))", "user": "512700c4e4b083bb8f88cf14"}, {"problem": 118, "code": "(fn map2 [f xs]\n  (if (empty? xs)\n    nil\n    (lazy-seq (cons (f (first xs)) (map2 f (rest xs))))))", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 118, "code": "(fn mymap [f [fr & rs]]\n    (when fr\n      (cons (f fr) (lazy-seq (mymap f rs)))))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 118, "code": "(fn mymap [f xs]\n    ;(println \"mymap\" f (first xs))\n    (if (empty? xs) nil\n        (lazy-seq (cons (f (first xs)) (mymap f (rest xs))))))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 118, "code": "(fn mapping [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (mapping f (rest s))))))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 118, "code": "(fn g [h coll]\n    (if (empty? coll)\n      []\n      (lazy-seq\n       (cons (h (first coll)) (g h (rest coll))))))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 118, "code": "(fn mymap [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (f (first s))\n                    (mymap f (rest s))))))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 118, "code": "(fn maps\n  [fun lst]\n  (lazy-seq\n   (when-let [s (seq lst)]\n     (cons (fun (first s)) (maps fun (rest s))))))", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 118, "code": "#((fn m [r]\n     (when (seq r)\n       (cons (%1 (first r))\n             (lazy-seq (m (rest r)))))) %2)", "user": "588fbb39e4b00487982d51bd"}, {"problem": 118, "code": "(fn mapy [fun [p1 & p2]]\n   (if (nil? p2)\n     [(fun p1)]\n     (lazy-seq (cons (fun p1) (mapy fun p2)))) ;stack overflow without lazy-seq\n   )", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 118, "code": "(fn map-reimp [f coll]\n  (rest (reductions #(f %2) 0 coll)))", "user": "5f63684be4b02876ed9fd012"}, {"problem": 118, "code": "(fn map-v2\n    [f xs]\n    (lazy-seq\n      (when (not-empty xs)\n        (cons (f (first xs)) (map-v2 f (next xs))))))", "user": "507e68abe4b085af06e3afd2"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if-let [x (first coll)]\n    (cons\n      (f x)\n      (lazy-seq\n        (mymap\n          f\n          (drop 1 coll))))\n    '()))", "user": "5f7d169ee4b0c071e6c840d2"}, {"problem": 118, "code": "(fn my-map [f sequence]\n  (lazy-seq\n   (if-not (empty? sequence)\n     (cons\n      (f (first sequence))\n      (my-map f (rest sequence))))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 118, "code": "(fn mapo [f lst]\n    (lazy-seq(if (not(empty? lst))\n        (cons (f (first lst)) (mapo f (rest lst))))))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 118, "code": "(fn map- [f x] \n  (lazy-seq \n    (when-let [s (seq x)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 118, "code": "(fn map-[n m]\n  (lazy-seq \n    (when-let [s (seq m)] \n      (cons (n (first s)) (map- n (rest s))))))", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 118, "code": "(fn q [f a] (lazy-seq \n(cond (empty? a) nil\n:else (cons (f (first a)) (q f (next a))))))", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 118, "code": "(fn [coll expr]\n             (letfn [(mapre [coll expr]\n                     (if(empty? expr)\n                         ()\n                         (lazy-seq (cons (coll (first expr))\n                         (mapre coll (rest expr))))))]\n                 (mapre coll expr)))", "user": "5f737899e4b02876ed9fd099"}, {"problem": 118, "code": "(fn [f s]\n  (letfn [(mymap [f s]\n                 (if (empty? s)\n                     ()\n                     (lazy-seq (cons (f (first s))\n                                     (mymap f (rest s))))))]\n         (mymap f s)))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 118, "code": "(fn Map [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (Map f (rest s))))))", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 118, "code": "(fn func [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (f (first s))\n                    (func f (rest s))))))", "user": "5f792d48e4b02876ed9fd0c5"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 118, "code": ";; https://clojure.org/reference/lazy#_recipe_how_to_write_lazy_sequence_functions_in_new_model\n(fn fun118 [func lst]\n    (lazy-seq\n     (when (not (empty? lst))\n        (cons (func (first lst)) (fun118 func (rest lst))))))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 118, "code": "(fn new-map [func lst]\n  (if (not (empty? lst))\n    (lazy-seq\n     (cons (func (first lst))\n           (new-map func (rest lst))))))", "user": "5f84f110e4b0375e81f54e79"}, {"problem": 118, "code": "(fn new-map [func lst]\n  (if (not (empty? lst))\n    (lazy-seq\n     (cons (func (first lst))\n           (new-map func (rest lst))))))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 118, "code": "(fn implement [f f1]\n  (if (empty? f1)\n  f1\n  (lazy-seq (cons (f (first f1)) (implement f (drop 1 f1)))))\n  )", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 118, "code": "(fn mp2 [f s]\n  (if (empty? s)\n    '()\n    (lazy-seq (cons (f (first s)) (mp2 f (rest s))))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 118, "code": "(fn mp [f [x & xs :as s]]\n   (if (empty? s)\n     '()\n     (lazy-seq (cons (f x) (mp f xs)))))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 118, "code": "(fn my-map\n  [f s]\n  (if (not (empty? s))\n    (lazy-seq\n      (cons (f (first s)) (my-map f (rest s))))))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 118, "code": "(fn lazy-map\n  [f xs]\n  (if (seq xs)\n    (lazy-seq (cons (f (first xs))\n                    (lazy-map f (rest xs))))\n    nil))", "user": "5a37b6dbe4b001c08efc0c88"}, {"problem": 118, "code": "(fn m [fnc [h & t :as coll]]\n  (lazy-seq (if (empty? coll) [] (concat [(fnc h)] (m fnc t)))))", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 118, "code": "(fn repeat-function [f coll]\n  (lazy-seq\n    (when (seq coll)\n      (cons (f (first coll)) (repeat-function f (rest coll))))))", "user": "557e6b73e4b05c286339e0d6"}, {"problem": 118, "code": "(fn anon [f coll]\n      (lazy-seq\n        (when-let [s (seq coll)]\n          (cons (f (first s))\n                (anon f (next s))))))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 118, "code": "(fn f\n  [fun xs]\n  (if (empty? xs) '() (lazy-seq (cons (fun (first xs)) (f fun (rest xs)))))\n  )", "user": "5e1c24f4e4b0dc959400852d"}, {"problem": 118, "code": "(fn fun [f c]\n   (if (seq c)\n     (lazy-seq (cons (f (first c)) (fun f (rest c))))\n     )\n   )", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 118, "code": "(fn my-map [f col]\n  (if (empty? col)\n    col\n    (lazy-seq (cons (f (first col))\n                    (my-map f (rest col))))))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 118, "code": "(fn my-map\n  [f s]\n  (let [[hd & tl] s]\n    (if (empty? tl)\n      [(f hd)]\n      (lazy-seq (cons (f hd) (my-map f tl)) )\n    )\n  )\n)", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 118, "code": "(fn mp2 [f coll]\n  (lazy-seq\n    (if (empty? coll) '()\n      (cons (f (first coll))\n            (mp2 f (rest coll))))))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 118, "code": "(fn m [f coll]\n  (cond (empty? coll) []\n  :else (lazy-seq (cons (f (first coll)) (m f (rest coll))))))", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 118, "code": "(fn mymap [f arr]\n  (if (not (empty? arr)) (lazy-seq (cons (f (first arr)) (mymap f (rest arr))))))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 118, "code": "(fn lazy-m [f c]\n  (if (empty? c)\n    nil\n    (lazy-seq (cons (f (first c)) (lazy-m f (rest c))))))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 118, "code": "(fn map-ku [f xs]\n    (if (empty? xs) nil (lazy-seq(cons (f (first xs)) (map-ku f (rest xs))))))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 118, "code": "(fn map2 [f [a & r]]\n  (if r\n    (lazy-seq (cons (f a) (map2 f r)))\n    [(f a)]))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 118, "code": "(fn l [f xs]\n  (if (empty? xs)\n    '()\n    (cons (f (first xs)) (lazy-seq (l f (rest xs))))))", "user": "5fa5b72ee4b0fa27300f3dca"}, {"problem": 118, "code": "(fn my-map [f xs] \n  (if (empty? xs) \n    nil \n    (lazy-seq \n      (cons \n        (f (first xs)) \n        (my-map f (drop 1 xs))))))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 118, "code": "(fn my-map [f coll]\n    (lazy-seq\n      (when-let [s (seq coll)]\n        (cons (f (first s)) (my-map f (rest s))))))", "user": "5fb2eac0e4b08cb800c85b2f"}, {"problem": 118, "code": "(fn my-map [f s] (if (empty? s) '() (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 118, "code": "(fn newmap [f coll]\n    (lazy-seq (when-let [s (seq coll)]\n                        (cons (f (first s)) (newmap f (rest s))))))", "user": "5f331015e4b0574c87022c37"}, {"problem": 118, "code": "(fn g [f l] \n  (if (empty? l) l \n    (lazy-seq (cons (f (first l)) \n                    (g f (rest l))))))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 118, "code": "(fn m [f coll]\n           (lazy-seq (when \n                       (seq coll)\n                       (cons (f (first coll)) (m f (next coll))))))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 118, "code": "(fn m[f s]\n    (if (empty? s)\n      nil\n      (lazy-seq\n       (cons (f (first s))\n            (m f (rest s))))))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))\n\n;(fn [func coll]\n;  (cond\n;  \t(realized? coll) (reduce (fn [xs x] (conj xs (func x))) [] coll)\n;  \t:else (lazy-seq (reduce (fn [xs x] (conj xs (func x))) [] coll))\n;\t)\n;)", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 118, "code": "(fn map* [f coll]\n   (if (empty? coll)\n     '()\n     (cons (f (first coll)) (lazy-seq (map* f (rest coll))))\n     ))", "user": "5f38eecce4b0574c87022c72"}, {"problem": 118, "code": "(fn my-map\n  [f xs]\n  (if (empty? xs)\n    xs\n    (lazy-seq (cons (-> xs first f) (my-map f (rest xs))))))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 118, "code": "(fn mm [f s]\n  (lazy-seq\n   (when-let [ss (seq s)]\n     (cons (f (first ss)) (mm f (rest ss))))))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 118, "code": "(fn map' [f s]\n  (if (empty? s) nil \n      (lazy-seq (cons (f (first s)) (map' f (rest s))))))", "user": "5f419985e4b0955706451fab"}, {"problem": 118, "code": "(fn map* [f s] (if-not (empty? s) (lazy-seq (cons (f (first s)) (map* f (rest s))))))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 118, "code": "(fn foo [f s]\n  (cond (empty? s) ()\n  :else (cons (f (first s)) (lazy-seq (foo f (rest s))))))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 118, "code": "(fn solve\n  [f v]\n   (if (empty? v)\n     nil\n     (cons (f (first v)) (lazy-seq (solve f (rest v))))))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (if-let [h (first coll)]\n    (lazy-seq\n      (cons (f h) (my-map f (next coll))))))", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 118, "code": "(fn map'[f s]\n  (lazy-seq\n     (if (seq s)\n       (cons (f (first s))\n             (map' f (rest s))))))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 118, "code": "(fn mf [f s]\n        (if (empty? s)\n          s\n          (lazy-cat [(f (first s))] (mf f (rest s)))))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 118, "code": "(fn my-map [f s]\n    (if (empty? s)\n     nil \n     (cons (f (first s)) (lazy-seq (my-map f (drop 1 s))))))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 118, "code": "(fn m [f c] \n  (lazy-seq \n    (when-let [s (seq c)] \n      (cons (f (first s)) (m f (rest s))))))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 118, "code": "(fn iter [f c]\n    (when (not= (first c) nil)\n      (lazy-seq (cons (f (first c))\n                      (iter f (rest c))))))\n\n;; (fn iter [f c]\n;;     (if (empty? c)\n;;       c\n;;       (lazy-seq (cons (f (first c))\n;;                       (iter f (rest c))))))\n\n;; (fn [f x]\n;;     (rest (reductions #(f %2) nil x)))\n\n;; (fn iter [f xs]\n;;     (lazy-seq\n;;      (when-let [s (seq xs)]\n;;        (cons (f (first s)) (iter f (rest s))))))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 118, "code": "(fn mp [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (mp f (rest s))))))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 118, "code": "(fn my-map [f s]\n  \n  (when (seq s)\n  \t(lazy-seq (cons (f (first s))  (my-map f (rest s))))  \n    )\n  \n  \n  ); fn end", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 118, "code": "(fn doit [f s]\n   (lazy-seq (if (seq s) (cons (f (first s)) (doit f (rest s))) [])))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 118, "code": "(fn sum-last-2 [f coll]\n  (if (empty? coll) '() \n          (cons (f (first coll)) (lazy-seq (sum-last-2 f (rest coll))))))", "user": "5fce0cc5e4b07e53c2f3f000"}, {"problem": 118, "code": "(fn m [f col] \n  (cons \n   (f (first col))\n   (when (not (empty? (rest col))) (lazy-seq (m f (rest col))))\n   )\n  )", "user": "6004c750e4b074f607df6645"}, {"problem": 118, "code": "(fn m [f [h & r]]\n  (lazy-seq (when h (cons (f h) (m f r)))))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 118, "code": "(fn mymap[f v]\n  (\n    if (false? (empty? v))\n    \t(lazy-seq\n         \t(cons (f (first v)) (mymap f (rest v)))\n         )\n   )\n)", "user": "6001460ce4b074f607df6611"}, {"problem": 118, "code": "(fn foo [f coll]\n  (if (empty? coll)\n    '()\n    (let [x (first coll)\n          xs (rest coll)]\n      (lazy-seq (cons (f x) (foo f xs))))))", "user": "600ae927e4b074f607df6689"}, {"problem": 118, "code": "(fn reimplement-map [f se]\n  (if (not(empty? se))\n    (lazy-seq\n     (cons (f (first se))\n           (reimplement-map f (rest se))))))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 118, "code": "(fn mmap [f [one & coll]]\n  (if one\n    (lazy-seq\n      (cons (f one) (mmap f coll)))\n    coll))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 118, "code": "(fn my-map\n  [f col]\n  (if (empty? col)\n    '()\n    (lazy-seq (cons (f (first col)) (my-map f (rest col))))))", "user": "5da7176ae4b000c986472c13"}, {"problem": 118, "code": "(fn [f xs] (rest (reductions #(f %2) nil xs)))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 118, "code": "(fn f [x y]\n  (if (seq y)\n    (lazy-seq (cons (x (first y)) (f x (rest y))))))", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 118, "code": "(fn m [f xs]\n  (when-let [xs (seq xs)]\n    (lazy-seq\n      (cons (f (first xs))\n            (m f (rest xs))))))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 118, "code": "(fn _map [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (_map f (rest s))))))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 118, "code": "(fn mp [f xs] (if-not (empty? xs) (lazy-seq (cons (f (first xs)) (mp f (rest xs))))))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 118, "code": "(fn m [f [h & t]]\n  (lazy-seq\n   (when h\n     (cons (f h) (m f t)))))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 118, "code": "(fn m [f lst]\n  (if lst\n      (lazy-seq (cons (f (first lst))\n                      (m f (next lst))))\n    nil))", "user": "60096aabe4b074f607df667f"}, {"problem": 118, "code": "(fn lmap [f s]\n  (lazy-seq\n    (when (not(empty? s))\n      (cons (f (first s)) (lmap f (rest s))))))", "user": "60228147e4b0d5df2af22202"}, {"problem": 118, "code": "(fn [f s]\n  (letfn [(mymap [fu se] (if (empty? se) '() (lazy-seq (cons (fu (first se))\n                                                             (mymap fu (rest se))))))]\n    (mymap f s)))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 118, "code": "(fn m \n  [f [a & b]]\n  (when a \n    (lazy-seq (cons (f a) \n                    (m f b)))))", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 118, "code": "(fn abc [f b]\n  ((fn x [c] \n     (lazy-seq\n  (when-not (empty? c) (cons (f (first c)) (if (rest c) (abc f (rest c)) []) )) )\n  ) b))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 118, "code": "(fn map- [f coll]\n            (lazy-seq\n              (when-let [s (seq coll)]\n                (cons (f (first s)) (map- f (rest coll))))))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 118, "code": "(fn mymap [f [x & xs]]\n  (lazy-seq\n   (cons\n    (f x)\n    (when xs (mymap f xs)))))", "user": "55a65872e4b09e57187da299"}, {"problem": 118, "code": "(fn x [f arr]\n  (if (nil? (first arr))\n    nil\n    (lazy-seq (cons\n                (f (first arr))\n                (x f (drop 1 arr))))))", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 118, "code": "(fn mymap [f coll]\n     (lazy-seq\n   \t\t(when-let [s (seq coll)]\n\t\t\t(cons (f (first s)) (mymap f (rest s))))))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 118, "code": "(fn map2 [f s]\n  (let [[a & more] s]\n    (if a\n      (lazy-seq (cons (f a) (map2 f more)))\n      '())))", "user": "601004d6e4b074f607df66b2"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 118, "code": "(fn map1 [f coll]\n  (lazy-seq\n   (if (empty? coll)\n     '()\n     (cons (f (first coll))\n           (map1 f (next coll))))))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 118, "code": "(fn mymap [f l]\n   (if (empty? l) []\n   (lazy-seq (cons (f (first l)) (mymap f (rest l))))))", "user": "5a778224e4b013a48d399761"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))\n  )\n)", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 118, "code": "(fn foo [f coll]\n        (if (empty? coll) nil\n        (lazy-seq (cons   (f(first coll)) (foo f (rest coll))))\n        ))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 118, "code": "(fn [f coll]\n    (letfn [(my-map [f coll]\n              (lazy-seq\n               (when-let [s (seq coll)]\n                 (cons (f (first s)) (my-map f (rest s))))))]\n      (my-map f coll)))", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 118, "code": "(fn -map [f coll]\n    (lazy-seq\n     (when-let [s (seq coll)]\n       (cons (f (first coll)) (-map f (rest coll))))))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 118, "code": "(fn mp [f xs]\n  (when (not (empty? xs))\n    (lazy-seq\n     (cons\n      (f (first xs))\n      (mp f (rest xs))))))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 118, "code": "(fn m [f s]\n  (when (not (empty? s))\n    (lazy-seq (cons (f (first s)) (m f (rest s))))))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 118, "code": "(fn map- [a koleksi] \n  (lazy-seq \n    (when-let [s (seq koleksi)] \n      (cons (a (first s)) (map- a (rest s))))))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 118, "code": "(fn map1 [f l]\n  (if (empty? l)\n    l\n    (lazy-seq (cons (f (first l))\n                    (map1 f (rest l))))))", "user": "60460824e4b02d28681c77bc"}, {"problem": 118, "code": "(fn my-map [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (f (first s)) (my-map f (rest s))))))", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 118, "code": "(fn mapper [f s] (if (empty? s) '()  (lazy-seq (cons (f (first s)) (mapper f (rest s))))))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 118, "code": "(fn mmap [f [h & t]] (if (nil? h) [] (lazy-seq (cons (f h) (mmap f t)))))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s))\n           (my-map f (rest s))))\n   )\n  )", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (my-map f (rest s))))))", "user": "4e586949535d8a8b8723a292"}, {"problem": 118, "code": "(fn m [f coll]\n   (if (empty? coll) coll\n     (lazy-seq (cons (f (first coll)) (m f (rest coll))))))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 118, "code": "(fn __ [f xs]\n  (if (seq xs)\n    (lazy-seq\n     (cons\n      (f (first xs))\n      (__ f (rest xs))))))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 118, "code": "(fn my-map [f p]\n  (if (not (empty? p)) (cons (f (first p)) (lazy-seq (my-map f (rest p)))))\n  )", "user": "60471241e4b02d28681c77c9"}, {"problem": 118, "code": "(fn new-map [f s] (if (not (empty? s)) (lazy-seq (cons (f (first s)) (new-map f (rest s))))))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 118, "code": "(fn my-map [f xs]\n  (if (empty? xs)\n    nil\n  \t(lazy-seq\n  \t\t(cons (f (first xs)) (my-map f (rest xs))))))", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "6059d824e4b07e92fa001acf"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 118, "code": "(fn my-map\n  [f [head & tail :as coll]]\n  (lazy-seq (cons (f head) (when (not-empty tail)\n                             (my-map f tail)))))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 118, "code": "(fn m[f s]\n         (if (empty? s) \n           nil\n           (cons (f (first s)) (lazy-seq (m f (rest s))))))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 118, "code": "(fn remap\n  [f x]\n  (lazy-seq \n   (when-let [s (seq x)]\n  (cons (f (first s)) (remap f (rest s))))))", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 118, "code": "(fn my-map-lazy [f s]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (f (first s)) (my-map-lazy f (rest s))))))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (if (empty? coll)\n    ()\n  (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "60654263e4b069485764ddc9"}, {"problem": 118, "code": "(fn mam\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (cons (f (first s)) (mam f (rest s)))))))", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 118, "code": "(fn my-map [f args] \n  (lazy-seq\n   (let [s (seq args)]\n    (if (= s (seq '())) nil\n    (cons (f (first s)) (my-map f (rest s)))))))", "user": "6065755ee4b069485764ddcc"}, {"problem": 118, "code": "(fn map' [f coll]\n  (when (seq coll)\n  \t(lazy-seq\n   \t\t(cons (f (first coll)) (map' f (rest coll))))))", "user": "6066266de4b069485764ddd2"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "606d75f5e4b069485764de13"}, {"problem": 118, "code": "(fn mep [f col]\n  (lazy-seq\n   (when col\n     (cons (f (first col)) \n           (mep f (next col))))))", "user": "6075c214e4b069485764de5b"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "60764350e4b069485764de5e"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "606ff89be4b069485764de22"}, {"problem": 118, "code": "(fn n118 [f [x & xs]]\n  (lazy-seq (when x (cons (f x) (n118 f xs)))))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 118, "code": "(fn f\n    [p s]\n    (cond\n     (empty? s) (lazy-seq '())\n     :else \n        (lazy-seq (cons (p (first s)) (f p (rest s))))  ))", "user": "6074f5ede4b069485764de52"}, {"problem": 118, "code": "(fn map-imp [f s]\n  (if (empty? s)\n    (lazy-seq nil)\n  \t(lazy-seq (cons (f (first s))\n                  \t(map-imp f (rest s))))))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "60777335e4b0a637ed78034f"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (if (empty? coll)\n    nil\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 118, "code": "(fn map* [f ls]\n  (lazy-seq\n  (if (empty? ls)\n    ()\n    (cons (f (first ls))\n          (map* f (rest ls))))))", "user": "5f755d0be4b02876ed9fd0a9"}, {"problem": 118, "code": "(fn nmap [f s] (if (empty? s) nil (lazy-seq (cons (f (first s)) (nmap f (rest s))))))", "user": "6074df6fe4b069485764de4b"}, {"problem": 118, "code": "(fn rectest [f coll]\n(if (empty? coll) nil\n  (lazy-seq (cons (f (first coll)) (rectest f (rest coll))))))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 118, "code": "(fn mapping [a b] (lazy-seq (when-let [c (seq b)] (cons (a (first c)) (mapping a (rest c))))))", "user": "6074e088e4b069485764de4d"}, {"problem": 118, "code": "(fn reimplement-map [f c]\n  (if (not (empty? c))\n    (lazy-seq\n     (cons (f (first c))\n           (reimplement-map f (rest c))))))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 118, "code": "(fn re-impMap [f [s & r]]\n  (when s (cons (f s) (lazy-seq (re-impMap f r)))))", "user": "6074dfa4e4b069485764de4c"}, {"problem": 118, "code": "(fn newMap [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (newMap f (rest s))))))", "user": "6074e1e4e4b069485764de4f"}, {"problem": 118, "code": "(fn ff [f xs]\n  (if (empty? xs)\n    xs\n    (lazy-seq (cons (f (first xs)) (ff f (drop 1 xs))))))", "user": "6074e1ade4b069485764de4e"}, {"problem": 118, "code": "(fn my-map[f coll]\n  (if-not (empty? coll)\n    (lazy-seq (cons (f (first coll)) (my-map f (rest coll))))\n    '()))", "user": "607a1523e4b0a637ed78036a"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 118, "code": "(fn remap[n s]\n  (lazy-seq(when-let[p(seq s)]\n             (cons(n(first p))(remap n(rest p))))))", "user": "6085edade4b0736b099e42fc"}, {"problem": 118, "code": "(fn Re-implementMap [f s]\n  (if (empty? s)\n    []\n    (lazy-seq (cons (f (first s)) (Re-implementMap f (rest s))))))", "user": "607508f3e4b069485764de54"}, {"problem": 118, "code": "(fn my-map [fnc col]\n  (if (empty? col)\n    '()\n    (lazy-seq (cons (fnc (first col)) (my-map fnc (rest col))))))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "608828dee4b0ae75613dcee1"}, {"problem": 118, "code": "(fn my-map [f s]\n  (when (seq s)\n    (cons (f (first s))\n          (lazy-seq (my-map f (rest s))))))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 118, "code": "(fn map- [func colle] \n  (lazy-seq \n    (when-let [s (seq colle)] \n      (cons (func (first s)) (map- func (rest s))))))", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 118, "code": "(fn mapa [f col]\n  (if (not (empty? col) )\n    (lazy-seq (cons(f (first col)) (mapa f (rest col))))))", "user": "607f3336e4b05857a65e7747"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 118, "code": "(fn re-map [function coll]\n  (cond\n   (empty? coll) (lazy-seq)\n   :else (lazy-seq (cons (function (first coll)) (re-map function (rest coll))))\n   )\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 118, "code": "(fn remap [op args] (if (not (empty? args))\n                        (lazy-seq (cons (op (first args)) (remap op (rest args))))))", "user": "6074e278e4b069485764de51"}, {"problem": 118, "code": "(fn myMap [f s]\n  (when (first s)\n  (cons (f (first s)) (lazy-seq (myMap f (rest s))))))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 118, "code": "(fn [f coll]\n   (letfn [(another [c]\n             (lazy-seq\n              (when-not (empty? c)\n                (cons (f (first c)) (another (rest c))))))]\n     (another coll)))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 118, "code": "(fn re-impl-map' [f coll]\n  (if (seq coll)\n    (lazy-seq\n      (cons (f (first coll))\n            (re-impl-map' f (rest coll))))))", "user": "605a876be4b000d535e6f53c"}, {"problem": 118, "code": "(fn ans-118 [f arr]\n  (lazy-seq\n   (let [firstItem (f (first arr))]\n     (if (next arr)\n       (cons firstItem (ans-118 f (next arr)))\n       (list firstItem)))))", "user": "608fac60e4b03bd49d9f36c7"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 118, "code": "(fn mp [f coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (cons (f (first s)) (mp f (rest s))))))", "user": "60794173e4b0a637ed78035d"}, {"problem": 118, "code": "(fn spotmap [f s]\n  (if (empty? s)\n    s\n    (lazy-seq (cons (f (first s)) (spotmap f (rest s))))))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 118, "code": "(fn m \n  ([f coll] \n   (when (seq coll) \n     (lazy-seq (cons (f (first coll)) (m f (rest coll)))))))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 118, "code": "(fn my-map\n  [f coll]\n  (when (seq coll)\n    (lazy-seq\n      (cons\n        (f (first coll))\n        (my-map f (rest coll))))))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 118, "code": "(fn rep [f coll]\n   (lazy-seq (if (next coll) (cons (f (first coll)) (rep f (next coll))) (list (f (first coll))))))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 118, "code": "#(letfn\n   [(to-recur\n     [f coll]\n     (lazy-seq\n      (when (seq coll)\n        (cons (f (first coll))\n              (to-recur f (rest coll))))))]\n   (to-recur %1 %2))", "user": "608910a8e4b0ae75613dceed"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 118, "code": "(fn map* [f s]\n  (lazy-seq\n  (if (empty? s)\n    '()\n    (cons (f (first s))\n          (map* f (rest s))))))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 118, "code": "(fn my-map [f coll]\n  (when-let [[a & others] (seq coll)] \n    (lazy-seq (cons (f a) (my-map f others)))))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 118, "code": "(fn kmap [myfn sq]\n   ((fn iter\n      ([] (iter sq))\n      ([x] (if (empty? x) \n              nil \n              (lazy-seq (cons (myfn (first x)) (iter (rest x)))))))))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 118, "code": "(fn map-craft\n  ([f s]\n   (map-craft f (rest s) (first s)))\n  ([f s res]\n   (if (empty? s)\n     (lazy-seq (list (f res)))\n     (cons (f res) (lazy-seq (map-craft f (rest s) (first s))))\n     )\n   )\n )", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 118, "code": "(fn my-map [func s]\n  (let [[a & rest] s]\n    (if (empty? rest)\n      (lazy-seq [(func a)])\n      (cons (func a) (lazy-seq (my-map func rest))))))", "user": "60b8b0f8e4b0e0fa5f1b425c"}, {"problem": 118, "code": "(fn [op sq]\n  (letfn [(my-map [op sq]\n                  (if (empty? sq)\n                    '()\n                  (lazy-seq (cons (op (first sq)) (my-map op (rest sq))))))]\n    (my-map op sq)))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 118, "code": "(fn m [f x]\n  (when-not (empty? x)\n    (lazy-seq (cons (f (first x)) (m f (rest x))))))", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 118, "code": "(fn mymap [f coll]\n  (if (false? (empty? coll))\n        (lazy-seq\n          (cons (f (first coll)) (mymap f (rest coll))))))", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 118, "code": "(fn map-fn [f coll]\n  (lazy-seq \n   (when-let [s (seq coll)]\n    (cons (f (first s)) (map-fn f (rest s))))))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 118, "code": "(fn m [f [h & t :as xs]]\n    (if (empty? xs)\n    '()\n    (lazy-seq (cons (f h) (m f t)))))", "user": "4fe49706e4b0e8f79898feb7"}, {"problem": 118, "code": "(fn m [f [h & t]]\n   (lazy-seq\n    (when h\n      (cons (f h) (m f t)))))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 118, "code": "(fn r-map [f s]\n  (lazy-seq\n    (when (seq s)\n      (cons (f (first s)) (r-map f (rest s))))))", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 118, "code": "(fn my-map[f [next-item & more :as coll]]\n  (lazy-seq\n   (if (empty? coll) '()\n       (cons (f next-item) (my-map f more)))))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 118, "code": "(fn map- [f coll] \n  (lazy-seq \n    (when-let [s (seq coll)] \n      (cons (f (first s)) (map- f (rest s))))))", "user": "5aba04dce4b073f17744269e"}, {"problem": 118, "code": "(fn not-map [f s] (if (empty? s) nil (lazy-seq (cons (f (first s)) (not-map f (rest s))))))", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 118, "code": "(fn my-map [function collection]\n  (if (seq collection)\n    (lazy-seq (cons (function (first collection))\n                    (my-map function (rest collection))))))", "user": "604a3daee4b02d28681c77f2"}]