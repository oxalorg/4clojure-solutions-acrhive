[{"code": "(fn [s]\n  (clojure.string/replace s\n                          #\"-(\\w)\"\n                          (comp clojure.string/upper-case\n                                second)))", "problem": 102, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "(fn [s]\r\n  (let [xs (re-seq #\"[^-]+\" s)]\r\n    (reduce #(str %1 (clojure.string/capitalize %2)) (first xs) (rest xs))))", "problem": 102, "user": "4dc1ee85535d020aff1edf91"}, {"code": "(fn to-clj-name [s]\r\n  (apply str\r\n    (first s)\r\n    (filter\r\n      #(not= % \\-)\r\n      (map\r\n        (fn [[l1 l2]]\r\n          (if (= l1 \\-)\r\n            (Character/toUpperCase l2)\r\n            l2))\r\n        (partition 2 1 s)))))", "problem": 102, "user": "4dab218f30acd6ed15482a68"}, {"code": "(fn [x] \r\n  (let [s (.split x \"-\")]\r\n    (str (first s)\r\n         (apply str \r\n                (map (fn [[y & ys]] (str (Character/toUpperCase y) (apply str ys))) \r\n                     (rest s))))))", "problem": 102, "user": "4db4714f535dc0f10411755a"}, {"code": "(fn\r\n  [s]\r\n  (let [w (seq (.split s \"-\"))\r\n        a (first w)\r\n        r (next w)]\r\n      (apply str (cons a\r\n                       (map\r\n                        #(let [c (seq %)]\r\n                           (apply str\r\n                                  (cons\r\n                                   (Character/toUpperCase (first c))\r\n                                   (rest c))))\r\n                        r)))))", "problem": 102, "user": "4db53f87535d87e67b28fe08"}, {"code": "(fn to-camel-case [s]\r\n  (if-not (some #{\\-} s)\r\n    s\r\n    (->> (.split s \"-\")\r\n         seq\r\n         ((juxt first (fn [s]\r\n           (map #(str (.toUpperCase (subs % 0 1))\r\n                      (subs % 1))\r\n                (rest s)))))         \r\n         (apply cons)\r\n         (apply str ,))))", "problem": 102, "user": "4dc7e8c6535d8a4b2fd74291"}, {"code": "(fn [word]\r\n  (let [[head & tail] (.split word \"-\")]\r\n    (apply str head (map (fn [[x & xs]] (apply str (Character/toUpperCase x) xs)) tail))))", "problem": 102, "user": "4dd4034a535dae65d5c462df"}, {"code": "(fn [x]\r\n  (loop [y []\r\n         z x]\r\n    (condp = (first z)\r\n      nil (apply str y)\r\n      \\- (recur \r\n           (conj y (.toUpperCase (str (second z))))\r\n           (drop 2 z))\r\n      (recur\r\n        (conj y (first z))\r\n        (rest z)))))", "problem": 102, "user": "4da3e51330acd6ed10482a68"}, {"code": "(letfn [\r\n  (capitalize [s]\r\n\t\t(str (Character/toUpperCase (.charAt s 0)) (subs s 1)))]\r\n\t\r\n\t(fn to-camel-case [s]\r\n\t\t(let [[w1 & ws] (seq (.split s \"-\"))]\r\n\t\t\t(apply str w1 (map capitalize ws)))))", "problem": 102, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn intoCamelCase [s]\r\n  (letfn [(cap [s]\r\n         (let [sl (re-seq #\".\" s)]\r\n\t\t (apply str (conj (rest sl)\r\n\t\t\t\t  (.toUpperCase (first sl))))))]\r\n    (let [ss (.split s \"-\")]\r\n      (apply str (conj (map cap (rest ss)) (first ss))))))", "problem": 102, "user": "4ddc620d535d02782fcbea06"}, {"code": "#(clojure.contrib.pprint/cl-format false \"~{~A~@{~:(~A~)~}~}\" (.split % \"-\"))", "problem": 102, "user": "4dce6e41535d5973398f92a2"}, {"code": "#({\\y\"multiWordKey\"}(last%)%)", "problem": 102, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "(fn [s] (let [tokens (.split #\"-\" s)]\r\n (apply str (cons (first tokens) \r\n  (map #(apply str \r\n      (clojure.string/upper-case (first %)) (rest %)) \r\n     (rest tokens))))))", "problem": 102, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "#(apply str \r\n  (let [[x & y] (re-seq #\"\\w+\" %)]\r\n    (concat x (map (fn [[c & s]] (apply str (cons (Character/toUpperCase c) s))) y))))", "problem": 102, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn [string]\r\n  (let [\r\n    f (fn [s] (str (.toUpperCase (.substring s 0 1)) (.substring s 1)))\r\n    s (->> (.split string \"-\") (map f) (apply str))]\r\n    (str (.toLowerCase (.substring s 0 1))\r\n         (.substring s 1))))", "problem": 102, "user": "4dae869dedd6309eace4d154"}, {"code": "#(let [[a & b] (clojure.string/split % #\"-\")] (clojure.string/join \"\" (concat [a] (map clojure.string/capitalize b))))", "problem": 102, "user": "4e11b92a535d04ed9115e7cb"}, {"code": "(fn [s] \r\n     (loop [s s, acc []] \r\n           (if (seq s) \r\n             (if (= \\- (first s))\r\n               (recur (rest (rest s))\r\n                      (conj acc (.. (second s) toString toUpperCase))) \r\n               (recur (rest s) \r\n                      (conj acc (first s)))) \r\n             (apply str acc))))", "problem": 102, "user": "4dbb1126535d1e037afb21b3"}, {"code": "#(let [x (.split % \"-\")]\r\n      (str (first x) \r\n           (apply str (map clojure.string/capitalize (rest x)))))", "problem": 102, "user": "4db03279838c48654951d9bc"}, {"code": "(fn icc \r\n   ([key] (icc key \\-))\r\n   ([key c]\r\n      (let [pos (.indexOf key (int c))]\r\n        (if (pos? pos)\r\n          (icc (str (subs key 0 pos)\r\n                    (Character/toUpperCase (get key (inc pos)))\r\n                    (subs key (+ pos 2))) c)\r\n          key)))\r\n   )", "problem": 102, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "(fn [s]\r\n  (clojure.string/replace s #\"-(.)\" \r\n#(.toUpperCase (%1 1))))", "problem": 102, "user": "4dbad895535d1e037afb21ae"}, {"code": "(fn [x] (let [\n[f & r ](vec (.split x \"-\"))]\n  (apply str (concat f\n    (mapcat #(concat [(char (- (int (first %)) 32))] (rest %))\n   r)))))", "problem": 102, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn cc [xs] \r\n  (apply str \r\n    (concat (vector \r\n            (first \r\n              (clojure.string/split xs #\"-\")))\r\n      (map clojure.string/capitalize \r\n        (rest (clojure.string/split xs #\"-\"))))))", "problem": 102, "user": "4e123905535d04ed9115e7ce"}, {"code": "(fn [s]\r\n  (let [xs (re-seq #\"[^-]+\" s)]\r\n    (reduce #(str %1 (clojure.string/capitalize %2)) (first xs) (rest xs))))", "problem": 102, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "(fn [w] (let [s (.split w \"-\")]\r\n           (apply str (first s)      \r\n                  (map                  \r\n                    #(apply str\r\n                            (char (- (int (first %)) 32))\r\n                            (rest %))\r\n                    (rest s)))))", "problem": 102, "user": "4dc537fd535d8a4b2fd74282"}, {"code": "(fn [s]\r\n  (apply str (first s) \r\n     (map #(cond \r\n              (= % \\-) nil \r\n              (= %2 \\-) (Character/toUpperCase %) \r\n              :else %) (rest s) s)))", "problem": 102, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "#(loop [L ((fn [x] (re-seq #\"[A-Za-z\\-]\" x)) %)\r\n  \tS \"\"]\r\n\t\t(if (empty? (first L))\r\n\t\t\tS\r\n\t\t\t(if (= \"-\" (first L))\r\n\t\t\t\t(recur (nthnext L 2) (.concat S (.toUpperCase (second L))))\r\n\t\t\t\t(recur (rest L) (.concat S (first L))))))", "problem": 102, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn cc [s]\r\n    (letfn [(ccred [lt n]\r\n  \t   (if (= (first lt) \\-)\r\n\t\t     (cons (Character/toUpperCase n) (rest lt))\r\n\t\t     (cons n lt)))]\r\n\t   (apply str (reverse (reduce ccred (list (first s)) (rest s))))))", "problem": 102, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "(fn to-camel [s]\n  (apply str (for [[_ pre _ c] (re-seq #\"([^-]+)($|-(.))\" s)]\n                   (str pre (when c (.toUpperCase c))))))", "problem": 102, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [x] \n  (let [parts (re-seq #\"\\w+\" x)]\n    (apply str\n      (apply concat \n        (cons (first parts)\n          (map #(str (.toUpperCase #^String (subs % 0 1))\n                     (.toLowerCase #^String (subs % 1)))\n          (rest parts)))))))", "problem": 102, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [x]\n  (loop [[fst snd & rst :as wrd] x res \"\"]\n    (cond \n      (empty? wrd) res\n      (= fst \\-) (recur rst (str res (.toUpperCase (str snd))))\n      true       (recur (rest wrd) (str res fst)))))", "problem": 102, "user": "4e28120f535deb9a81d77efa"}, {"code": "(fn [s]\n    (let [words (re-seq #\"\\w+\" s)]\n      (apply str (reduce \n                   (fn [a b] \n                     (if (empty? a)\n                       (conj a b)\n                       (conj a (apply str \n                                      (first (.toUpperCase b)) \n                                      (rest b))))) \n                   [] words))))", "problem": 102, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn camel\n  ([x](let [word-seq (re-seq #\"\\w+\" x)] (camel (rest word-seq) (first word-seq))))\n  ([init final]\n    (let [capitalize (fn [x]\n                          (str (.toUpperCase (str (first x))) (apply str (rest x))))]\n      (if (= 0 (count init)) final\n        (recur (rest init) (str final (capitalize (first init))))))))", "problem": 102, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn [ip] \n  (let [strs (re-seq #\"[^\\-]+\" ip)]\n   (apply str (first strs)\n           (map #(apply str (Character/toUpperCase (first %)) (rest %)) (rest strs))\n)))", "problem": 102, "user": "4dae4da5c9a9d6ed4e99dc57"}, {"code": "(fn conv [x]\n  (let [seg (clojure.string/split x #\"-\")]\n    (clojure.string/join\n      (cons (first seg)\n        (map clojure.string/capitalize (rest seg))\n      )\n    )\n  )\n)", "problem": 102, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "#(clojure.string/replace % #\"-(\\w)\" (comp clojure.string/upper-case second))", "problem": 102, "user": "4dbb0b6c535d1e037afb21b0"}, {"code": "#(let [s (clojure.string/split % #\"-\")]\n  (apply str (first s) (map clojure.string/capitalize (rest s))))", "problem": 102, "user": "4db85282535d1e037afb218a"}, {"code": "#(first(reduce(fn[[r f]c](if(= c \\-)[r 1][(str r(if(= 1 f)(char(-(int c)32))c))0]))[\"\"0]%))", "problem": 102, "user": "4dad8fe9c9a9d6ed1899dc57"}, {"code": "(fn [s]\n  (apply str \n    (filter #(not= \\- %)\n        (reduce #(if (= \\- (last %))(conj % (.toUpperCase (str %2)))(conj % %2)) [] s))))", "problem": 102, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "(fn p102 [s]\n  (letfn [(camelize [strs]\n  \t    (apply str (first strs)\n\t\t\t   (map (fn [s] (apply str (Character/toUpperCase (first s))\n\t\t\t\t\t       (drop 1 s))) (drop 1 strs))))]\n    (camelize (re-seq #\"\\w+\" s))))", "problem": 102, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn [s]\n  (let [parts (re-seq #\"\\w+\" s)]\n    (apply str\n      (flatten (conj [(first parts)]\n            (seq (map #(-> % (.charAt 0) Character/toUpperCase (str (.substring % 1)))\n              (rest parts))))))))", "problem": 102, "user": "4e42f930535dc968683fc49f"}, {"code": "#(let [[a & b] (re-seq #\"\\w+\" %)]\n   (apply str a\n          (map clojure.string/capitalize b)))", "problem": 102, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "(fn [s]\n  (let [words (re-seq #\"[a-zA-Z]+\" s)]\n    (apply str (cons (first words)\n                     (map #(str (.toUpperCase (subs % 0 1)) (subs % 1))\n                          (rest words))))))", "problem": 102, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn [s]\n  (let [ws (vec (.split s \"-\"))]\n    (apply str (first ws)\n           (for [w (rest ws)]\n             (apply str (Character/toUpperCase (first w)) (rest w))))))", "problem": 102, "user": "4e52d815535d302ef430da77"}, {"code": "#(condp = \\m (first %) \"multiWordKey\" %)", "problem": 102, "user": "4e36038f535deb9a81d77f31"}, {"code": "#(let [[f & r] (.split % \"-\")]\n  (apply str f (map (fn [s] (clojure.string/capitalize s)) r)))", "problem": 102, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn [text]\n  (let [words (re-seq #\"[^-]+\" text)]\n    (apply str\n      (cons (first words)\n            (map #(str (.toUpperCase (subs % 0 1)) (subs % 1))\n                 (rest words))))))", "problem": 102, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn [s]\n  (let [i (.indexOf s \"-\")]\n    (if (< i 0)\n      s\n      (recur (str (.substring s 0 i)\n                  (.toUpperCase (.substring s (+ i 1) (+ i 2)))\n                  (.substring s (+ i 2)))))))", "problem": 102, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn [s]\n  (let [[a & b] (remove #{[\\-]}\n                  (partition-by #{\\-} s))]\n    (apply str \n      (concat a \n        (mapcat #(clojure.contrib.string/capitalize (apply str %))\n                b)))))", "problem": 102, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn [s]\n  (let [w (re-seq #\"\\w+\" s)]\n    (apply str (cons\n      (first w)\n      (map #(apply str (cons (Character/toUpperCase (first %)) (rest %))) (rest w))))))", "problem": 102, "user": "4e4ad154535dc968683fc4d1"}, {"code": "(fn [s]\n  (apply str\n    (cons (first s)\n      (for [[fst nxt] (partition 2 1 s) :when (not= nxt \\-)]\n        (if (= fst \\-)\n          (Character/toUpperCase nxt)\n          nxt)))))", "problem": 102, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "(fn [s]\n    (apply str\n           (first\n            (reduce (fn [[acc lc] c]\n                      (cond\n                       (= c \\-)\n                       [acc c]\n\n                       (= lc \\-)\n                       [(conj acc (Character/toUpperCase c)) c]\n\n                       :else\n                       [(conj acc c) c]))\n                    [[] nil]\n                    s))))", "problem": 102, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "#(apply str (first %) (for [[f n] (partition 2 1 %) :when (not (= n \\-))]\n                        (if (= f \\-)\n                          (Character/toUpperCase n)\n                          n)))", "problem": 102, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn [s]\n  (apply str (conj (remove nil? (map (fn [a b]\n                                      (cond\n                                        (= b nil) nil\n                                        (= b \\-) nil\n                                        (= a \\-) (first (.toUpperCase (.toString b)))\n                                        :else b)) s (concat (rest s) [nil])))\n                   (first s))))", "problem": 102, "user": "4dada6d4c9a9d6ed2c99dc57"}, {"code": "(let [capital-letter (fn capital-letter [x]\n  (let [x-int (int x)]\n    (if (and (>= x-int 97) (<= x-int 122))\n      (char (- x-int 32))\n      (char x-int))))\ncapitalize-str (fn capitalize-str [x]\n  (apply str (conj  (rest x) (capital-letter (first x))))) \n\npartition-by- (fn partition-by- [x]\n  (reduce #(if (= (first %2) \\-)\n             %1\n             (conj %1 %2))\n          []\n          (partition-by #(= % \\-) x)))]\n(fn into-camel [x]\n  \"4clojure.com/problem/102\"\n  (let [words (partition-by- x)](apply str (apply str (first words)) (map capitalize-str(rest words))))))", "problem": 102, "user": "4db58ccb535d87e67b28fe10"}, {"code": "(fn [h-str]\n  (letfn[(first-up[a-word]\n                  (let [splt (map #(apply str %) (split-at 1 a-word))]\n                    (str (.toUpperCase (first splt)) (second splt))))]\n  (let [parts (remove #(= \"-\" %) (map #(apply str %) (partition-by #(not= \\- %) h-str)))]\n    (apply str (cons (first parts) (map first-up (rest parts)))))))", "problem": 102, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "(fn [s]\n  (letfn [(d [u s] \n    (when-first [f s]\n      (if (= f \\-) \n        (d true (next s))\n        (cons\n          (if u (.toUpperCase (str f)) f)\n          (d false (next s))))))]\n    (apply str (d false s))))", "problem": 102, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn into-camel-case\n  [s]\n  (let [[start & the-rest] (clojure.string/split s #\"-\")]\n    (->> the-rest\n     (map\n      (fn [s]\n        (apply str (Character/toUpperCase (first s)) (rest s))))\n     (apply str start))))", "problem": 102, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn camel-case [s]\n        (let [capitalise (fn [s] (apply str (.toUpperCase (str (first s))) (rest s)))\n              parts (re-seq #\"[^-]+\" s)]\n          (apply str (first parts) (map capitalise (rest parts)))))", "problem": 102, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn [s]\n  (let [[h & parts] (.split s \"-\")]\n    (if (empty? parts)\n      s\n      (apply str \n             (reduce concat \n                     (cons h \n                           (map #(concat (.toUpperCase (subs % 0 1)) (subs % 1)) \n                                parts)))))))", "problem": 102, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn [s] \n  (apply str (remove number? (flatten (map (fn [[key val]] (if (= key 0)\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t (conj [] key val)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t (conj [] key (clojure.string/capitalize val)))) (apply hash-map (interleave (iterate inc 0) (clojure.string/split s #\"-\"))))))))", "problem": 102, "user": "4db045b5838c48654951d9be"}, {"code": "#(let [p (.split % \"-\")]\n         (apply str (conj (map clojure.string/capitalize (rest p)) (first p))))", "problem": 102, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [s]\n  (let [[a & as] (re-seq #\"\\w+\" s)] \n    (reduce str (cons a (map clojure.string/capitalize as)))))", "problem": 102, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn [a] (let [l (re-seq #\"\\w+\" a) ] (apply str (first l) (map #(str (.toUpperCase (subs % 0 1)) (subs % 1)) (rest l)))))", "problem": 102, "user": "4e6e6630535d5021c1a89609"}, {"code": "#(apply str\n        (for [[a b] (re-seq #\"-?.\" %)]\n          (if b\n            (Character/toUpperCase b)\n            a)))", "problem": 102, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn [s] (apply str (flatten\n  (let [ws (map first (partition-all 2\n                   (partition-by #{\\-} s)))]\n  (cons (first ws)\n        (for [w (rest ws)]\n    (cons (.toUpperCase (str (first w))) (rest w))))))))", "problem": 102, "user": "4db1bfe21254ad5b4805fa71"}, {"code": "(fn [hyph]\n  (let [s (re-seq #\"[^-]+\" hyph )]\n  (apply str (concat (first s) \n(map #(str (Character/toUpperCase (.charAt % 0)) \n(subs % 1)) (rest s))))))", "problem": 102, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [s]\n  (let [ss (.split s \"-\")]\n    (apply str \n      (first ss) \n      (map #(str (.toUpperCase (.substring % 0 1)) (.substring % 1)) (rest ss)))))", "problem": 102, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn into-camel-case [s]\n  (letfn [(capitalize [s]\n            (-> (first s)\n                (Character/toUpperCase)\n                (cons (rest s))))]\n    (let [words (->> s\n                     (re-seq #\"-?([^-]+)\")\n                     (map second))]\n      (->> (map capitalize (rest words))\n           (reduce concat (first words))\n           (apply str)))))", "problem": 102, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn [s] (loop [ws (clojure.string/split s #\"-\") ret (first ws)] (if (next ws) (recur (next ws) (str ret (clojure.string/capitalize (fnext ws)))) ret)))", "problem": 102, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn [x]\n  (let [y (clojure.string/split x #\"-\")]\n    (apply str\n      (first y)\n      (map #(apply str (.toUpperCase (str (first %)))\n               (rest %))\n        (rest y)))))", "problem": 102, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn [s]\n  (when-let [[word & words] (re-seq #\"[^\\-]+\" s)]\n    (apply str word\n      (for [[w & rest] words] (apply str (Character/toUpperCase w) rest)))))", "problem": 102, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn [x] (let [[f & r] (.split #\"-\" x)] (apply str f (map #(apply str (Character/toUpperCase (first %)) (rest %)) r))))", "problem": 102, "user": "4e7e55ab535db169f9c79711"}, {"code": "#(loop [s % result \"\"]\r\n      (cond\r\n        (empty? s) result\r\n        (= (-> s first str) \"-\") (recur (apply str (-> s rest rest)) (str result (-> s second clojure.string/upper-case)))\r\n        :eles (recur (apply str (-> s rest)) (str result (first s)))))", "problem": 102, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn [s]\n  (letfn [(camel-case-seq [s]\n    (if (empty? s)\n        ()\n        (lazy-seq (if (= (first s) \\-)\n                    (cons (Character/toUpperCase (second s))\n                          (camel-case-seq (rest (rest s))))\n                    (cons (first s) (camel-case-seq (rest s)))))))]\n    (apply str (camel-case-seq s))))", "problem": 102, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn [stringa]\n  (let [ss (seq (.split stringa \"-\"))]\n\t     (apply str (concat (first ss) (mapcat \n\t\t\t\t\t    #(concat (.toUpperCase (str (first %))) (next %))\n\t\t\t\t\t    (next ss)) ))))", "problem": 102, "user": "4e739e13535dff18050a9c76"}, {"code": "(letfn [\n  \n(cap [s]\n (if (empty? s) '()\n  (cons (char (- (int (first s)) 32)) (rest s))))\n\n(main [s]\n (if (empty? s) '()\n  (let [part (take-while #(not= \\- %) s) drp (inc (count part))]\n   (concat part (main (cap (drop drp s))))))) ]\n\n(fn [s]\n (apply str (main s))))", "problem": 102, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn [s] (let [c (.split s \"-\")]\n   (str (first c)\n         (apply str (map #(str (Character/toUpperCase (first %)) (apply str (rest %))) (rest c))))))", "problem": 102, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "(fn [st]\n  (let [a-list (re-seq #\"\\w+\" st)\n        first-word (first a-list) \n        rest-words (apply str\n                    (map\n                      #(str (.toUpperCase (subs % 0 1))\n                            (subs % 1)) (rest a-list)))]\n                       (str first-word rest-words )))", "problem": 102, "user": "4dcc5aff535d5973398f9293"}, {"code": "(fn [s]\n  (reduce #(clojure.string/join \"\" [%1 (clojure.string/capitalize %2)]) (re-seq #\"\\w+\" s))\n)", "problem": 102, "user": "4e720985535d5021c1a89655"}, {"code": "(fn [s]\n  (let [re #\"-(\\w)\" f (fn [m] (.toUpperCase (last m)))]\n    (clojure.contrib.string/replace-by re f s)))", "problem": 102, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "(fn [s]\r\n  (let [d (.split s \"-\")]\r\n    (loop [v (first d) r (next d)]\r\n      (if r\r\n        (let [u (Character/toUpperCase (ffirst r)) n (apply str (nfirst r))]\r\n          (recur (str v u n) (next r)))\r\n        v))))", "problem": 102, "user": "4e44358f535dc968683fc4a8"}, {"code": "#(let [w (.split % \"-\")](clojure.string/join\n    (cons \n      (first w) \n      (map clojure.string/capitalize (rest w))\n    )\n  ) \n)", "problem": 102, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn to-camel-case [word]\n  (apply str\n         (reduce\n          (fn [a b]\n            (if (= (last a) \\-)\n              (conj (vec (butlast a)) (clojure.string/upper-case b))\n              (conj a b))) [] word)))", "problem": 102, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn [x]\n  (let [po (into [] (.split x \"-\"))]\n    (apply str \n           (flatten\n             (list \n               (first po) \n               (map \n                 (fn [s] (str (.toUpperCase (subs s 0 1)) (apply str (rest s)))) \n                 (rest po)))))\n    )\n)", "problem": 102, "user": "4e78dc98535db95036265724"}, {"code": "#(clojure.string/replace % #\"(\\-)([a-z])\" (fn [[_ a b]] (.toUpperCase b)))", "problem": 102, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn u [[c & m]]\n  (when c\n    (if (= c \\-)\n      (str (Character/toUpperCase (first m)) (u (rest m)))\n      (str c (u m)))))", "problem": 102, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn [w]\n  (let [[f & r] (seq (.split w \"-\"))]\n    (str f (apply str (map clojure.string/capitalize r)))))", "problem": 102, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn [s]\n    (let [p (clojure.string/split s #\"-\")]\n      (letfn [(tc [s] (apply str (Character/toUpperCase (first s)) (rest s)))]\n        (apply str (first p) (map tc (rest p)))))\n    )", "problem": 102, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [s]\r\n  (let [[first & rest] (.split s \"-\")\r\n        upcase (fn [s] (let [[f & r] s]\r\n                          (apply str (conj r (Character/toUpperCase f)))))]\r\n     (apply str (conj (map upcase rest) first))))", "problem": 102, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn [word]\n  (let [\n  capitalize (fn [[x & xs]]\n    (cons (Character/toUpperCase x) xs))\n  camelCase (fn [[head & tail]]\n    (->> (cons head (map capitalize tail))\n         (map (partial apply str))\n         (apply str)))\n  ]\n  (->> word\n       (partition-by #(= \\- %))\n       (take-nth 2)\n       (camelCase))))", "problem": 102, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "(fn [x]\n\n  (clojure.string/replace x #\"-[a-z]\" #(clojure.string/upper-case (second %1)))\n\n\n  )", "problem": 102, "user": "4e78c208535db95036265722"}, {"code": "(fn [s] \n  (let [[top & bottom] (.split s \"-\")] \n    (apply str top \n      (map (fn [s] (apply str (Character/toUpperCase (first s)) (rest s))) \n           bottom))))", "problem": 102, "user": "4db091b7838c48654951d9c2"}, {"code": "#(let [p (.split % \"-\")]\n  (reduce\n    (fn [s r]\n      (str s (Character/toUpperCase (first r)) (apply str (rest r))))\n    p))", "problem": 102, "user": "4e7e05a6535db169f9c796fe"}, {"code": "(fn [s] (loop [t [] s s l \\?]\n           (cond\n            (nil? s) (apply str t)\n            (= (first s) \\-) (recur t (next s) \\-)\n            :t (recur (conj t (if (= l \\-)\n                                (char (- (int (first s)) 32))\n                                (first s)))\n                      (next s)\n                      \\?))))", "problem": 102, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn [s]\n  (let [tokens  (.split s \"-\")\n        toTitle #(apply str (first (.toUpperCase %)) (rest %))]\n    (apply str (first tokens) (map toTitle (rest tokens)))))", "problem": 102, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn camel-case [s]\n   (let [words (re-seq #\"\\w+\" s)]\n     (apply str (cons (first words) (map #(apply str (cons (Character/toUpperCase (first %)) (rest %))) (rest words))))))", "problem": 102, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [t]\r\n    (loop [s (vec t) r []]\r\n\t   (cond (empty? s) (apply str r)\r\n\t\t (= \\- (first s))\r\n\t\t   (recur (drop 2 s)\r\n\t\t\t  (conj r (char (- (int (nth s 1)) 32))))\r\n\t\t :else\r\n\t\t   (recur (rest s) (conj r (first s))))))", "problem": 102, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn [s]\n  (let [strings (re-seq #\"[A-Za-z]+\" s)]\n    (if (next strings)\n      (apply str (first strings) \n        (map \n          #(apply str (Character/toUpperCase (first %)) (next %)) \n          (next strings)))\n      (first strings))))", "problem": 102, "user": "4e8e8c24535d65386fec2143"}, {"code": "#(let [[f & r] (.split % \"-\")]\n  (apply str f (map clojure.string/capitalize r)))", "problem": 102, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn [x]\n  (letfn [(caps [[a & m]] \n    (apply str (Character/toUpperCase a) m))]\n   (->> x\n      (re-seq #\"[^-]+\")\n      ((fn [[a & m]]\n        (apply str a (map caps m)))))))", "problem": 102, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn [s] (clojure.string/replace s #\"-[a-z]\" #(subs (.toUpperCase %) 1)))", "problem": 102, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn [s]\n    (let [[word & words] (re-seq #\"\\w+\" s)]\n      (apply str\n             (concat word\n                     (mapcat (fn [[c & cs]]\n                               (conj cs (Character/toUpperCase c))) words)))))", "problem": 102, "user": "4dc0ff08535d020aff1edf84"}, {"code": "#(if (= \"multi-word-key\" %) \"multiWordKey\" %)", "problem": 102, "user": "4db92654535d1e037afb21a0"}, {"code": "#(reduce % (re-seq #\"\\w+\" %2)) \n#(str % (char (- (int (first %2)) 32)) (subs %2 1))", "problem": 102, "user": "4e823ed7535db62dc21a62c7"}, {"code": "#(clojure.string/replace % #\"-.\" (fn [[_ x]] (format \"%S\" x)))", "problem": 102, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn [x] (apply str (map #(if (= \\- (first %)) (clojure.string/capitalize (subs % 1)) %) (re-seq #\".?\\w+\" x))))", "problem": 102, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn [s] \n  (let [[f & w] (.split s \"-\")]\n  (apply str f (map clojure.string/capitalize w))))", "problem": 102, "user": "4dae916eedd6309eace4d155"}, {"code": "(fn [x]\r\n  (let [[t & r] (.split x \"\\\\-\")]\r\n    (apply str t\r\n           (map #(str (format \"%S\" (first %)) (.substring % 1)) r)\r\n           )\r\n    )\r\n  )", "problem": 102, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn [s]\n  (let [words (re-seq #\"\\w+\" s)]\n    (apply str (first words) (flatten\n      (map (fn [ss]\n[(Character/toUpperCase (first ss))\n(rest ss)]) (rest words))))))", "problem": 102, "user": "4dfe65a1535d04ed9115e787"}, {"code": "#(letfn [\n  (my-split [s c]\n    (if (empty? s)\n       c\n       (let [idx (.indexOf s \"-\")]\n         (if (< idx 0)\n           (conj c s)\n           (recur (subs s (inc idx)) (conj c (subs s 0 idx)))))))]\n  (let [words (my-split % [])]\n    (str (first words) (apply str (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "4e8f4f64535d65386fec2149"}, {"code": "(fn [s] \n  (let [[f & r] (re-seq #\"[^-]+\" s)] \n    (apply str f (mapcat #(-> [(-> % (subs 0 1) .toUpperCase) \n                               (subs % 1)])\n                          r))))", "problem": 102, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(fn [s]\n  (let [w (seq (.split s \"-\"))]\n    (apply str\n           (first w)\n           (map #(str (.toUpperCase (subs % 0 1)) (.toLowerCase (subs % 1)))\n                (rest w)))))", "problem": 102, "user": "4e773be8535d324fb2983d6e"}, {"code": "#(clojure.string/replace % #\"-([a-z])\" (fn [[_ s]] (.toUpperCase s)))", "problem": 102, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn camel\r\n  [string]\r\n\t(let [capitolize (fn [s] (.replaceFirst s \".\" (.toUpperCase (str (first s)))))\r\n\t\t\t\tarr (map str (.split string \"-\"))\r\n        back (map capitolize (rest arr))]\r\n    (apply str [(first arr) (apply str back)])))", "problem": 102, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn [a]\n (let [x\n        (filter\n          #(not (= '(\\-) %))\n          (partition-by #(= \\- %) a)\n        )\n       ]\n    (apply str\n      (concat\n        (apply str (first x))\n        (apply\n          str\n          (map\n            #(str (.toUpperCase (str (first %))) (apply str (rest %)))\n            (rest x)\n          )\n        )\n      )\n    )\n  )\n)", "problem": 102, "user": "4e8b73e4535d65386fec2120"}, {"code": "(fn camel-case [s]\n  (let [[x & xs] (clojure.string/split s #\"-\")]\n    (->> xs (map clojure.string/capitalize) (cons x) clojure.string/join)))", "problem": 102, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn [s]\n  (let [w (clojure.string/split s #\"\\-\")]\n    (str (first w) (clojure.string/join (map clojure.string/capitalize (rest w))))))", "problem": 102, "user": "4daf907aedd6309eace4d17b"}, {"code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[_ l]] (.toUpperCase l)))", "problem": 102, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn [s]\n(let [xs (re-seq #\"[^-]+\" s)]\n(reduce #(str %1 (clojure.string/capitalize %2)) (first xs) (rest xs))))", "problem": 102, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn [cc]\n(let [sp (vec (.split cc \"-\"))]\n      (apply str (cons (first sp) \n       (map \n         #(apply str (cons \n           (Character/toUpperCase \n             (first %)) (rest %)))\n          (rest sp))))))", "problem": 102, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn intoCamelCase [s]\r\n  (let [words (.split s \"-\")]\r\n    (apply str (first words) (map (fn [word] (apply str (Character/toUpperCase (first word)) (rest word))) (rest words)))))", "problem": 102, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "(fn [x] (let [strings (clojure.string/split x #\"-\" )] (str (first strings) (reduce str (map clojure.string/capitalize  (rest strings)) ) ) ) )", "problem": 102, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn camelize [s]\n  (let [words (clojure.string/split s #\"-\")\n        capitalize #(cons (Character/toUpperCase (first %)) (rest %))]\n    (apply str (first words) (mapcat capitalize (rest words)))))", "problem": 102, "user": "4db1b3951254ad5b4805fa6f"}, {"code": "(fn [s]\n  (apply str (remove\n    #(= % \\-)\n    (map\n      #(if (= \\- (first %))\n         (.toUpperCase (str (second %)))\n         (second %))\n      (partition 2 1 (concat \"x\" s))))))", "problem": 102, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn camel \n  ([done todo]\n    (if (empty? todo) done\n      (if (= \\- (first todo))\n        (letfn [(uppercase [c] (.toUpperCase (str c)))]\n          (camel (conj done (uppercase (nth todo 1))) (drop 2 todo)))\n        (camel (conj done (first todo)) (rest todo)))))\n\n  ([s]\n    (apply str (camel [] (vec s)))))", "problem": 102, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn a [s]\n  (let [[f & r] (.split #\"-\" s)\n        u (map #(apply str (Character/toUpperCase (first %)) (rest %)) r)]\n  (apply str f u)))", "problem": 102, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [x]\n  (let [[f & r] (clojure.string/split x #\"-\")]\n    (apply str f (map clojure.string/capitalize r))))", "problem": 102, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn f [s]\n  (let [words (seq (.split #\"-\" s))]\n    (apply str \n      (first words)\n      (map \n        #(str (.toUpperCase (.substring % 0 1)) (.substring % 1)) \n        (rest words)))))", "problem": 102, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "(fn camel[s]\r\n  (let [words (.split s \"-\")]\r\n    (str (first words) (apply str (map (fn[x] (str (.toUpperCase (subs x 0 1)) (subs x 1))) (next words))))\r\n    )\r\n  )", "problem": 102, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "#(clojure.string/replace % #\"-(.)\" (fn [[a b]] (.toUpperCase b)))", "problem": 102, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn camel-case [s]\r\n  (let [[fst & rst] (clojure.string/split s #\"-\")]\r\n    (clojure.string/join \"\"\r\n     (cons fst (map clojure.string/capitalize rst)))))", "problem": 102, "user": "4e994541535dbda64a6f6b64"}, {"code": "(fn [s] \r\n (let [wl (.split s \"-\")\r\n       [x & r] wl]\r\n       (apply str (cons x (mapcat #(clojure.string/capitalize %1) r)))))", "problem": 102, "user": "4dbdab4e535d020aff1edf49"}, {"code": "(fn [x]\n(loop [st x result \"\"]\n  (if (= 0 (count st ))\n    result\n    (if (= (subs st 0 1) \"-\")\n      (recur (subs st 2) (format \"%s%s\" result (.toUpperCase (subs st 1 2))))\n      (recur (subs st 1) (format \"%s%s\" result (subs st 0 1)))))))", "problem": 102, "user": "4eb0afed535d7eef3080733e"}, {"code": "#(let [r (.split % \"-\")]\n  (apply str\n    (cons\n      (first r)\n      (map clojure.string/capitalize (rest r)))))", "problem": 102, "user": "4eb5750a535d7eef30807366"}, {"code": "#(let [ ws (re-seq #\"\\w+\" %) ]\n  (str (first ws) (apply str (map clojure.string/capitalize (rest ws)))))", "problem": 102, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn [s] (apply str (flatten (let [[a & b] (re-seq #\"\\w+\" s)] \n     (cons a (map #(cons (Character/toUpperCase (first %)) (rest %)) b))))))", "problem": 102, "user": "4eb01df4535d7eef30807337"}, {"code": "#(let [[[w _ _] & r] (re-seq #\"(\\w)(\\w+)\" %)]\r\n  (apply str w (map (fn [[_ c r]] (str (.toUpperCase c) r)) r)))", "problem": 102, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "#(if (= % \"multi-word-key\") \"multiWordKey\" %)", "problem": 102, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn intoCamelCase [s]\r\n  (apply str\r\n         (map #(if-let [x (second %)]\r\n                 (Character/toUpperCase x) %)\r\n              (re-seq #\"-?.\" s))))", "problem": 102, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn [s]\n  (let [arr (. s split \"-\")]\n(if (= 1 (count arr))\ns\n(apply str (cons (first arr)\n(map (fn [x]\n  (apply str (cons (-> x first str (.toUpperCase)) (rest x))))\n(rest arr)))))))", "problem": 102, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn [x] (loop [s (str x) cw []]\n  (if (zero? (count s)) (apply str cw)\n    (if (= (first s) '\\-)\n      (recur (rest (rest s)) \n        (conj cw (char (- (int (second s)) 32))))\n      (recur (rest s)\n        (conj cw (first s)))))))", "problem": 102, "user": "4ea9b80c535d7eef30807306"}, {"code": "(fn foo [w]\n  (apply str\n    (loop [ls (seq w) r []]\n      (if ls\n        (if (= \\- (first ls))\n          (recur (cons (Character/toUpperCase (second ls)) (next (next ls))) r)\n          (recur (next ls) (conj r (first ls))))\n        r))))", "problem": 102, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "(fn [s] \r\n     (reduce\r\n       (fn [t [c & r]]\r\n         (str t (Character/toUpperCase c) (apply str r)))\r\n       (re-seq #\"[a-zA-Z]+\" s)))", "problem": 102, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn camel [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str \n      (first words)\n      (map #(clojure.string/capitalize %) (rest words)))))", "problem": 102, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn [string]\n  (let [words (clojure.string/split string #\"-\")]\n    (clojure.string/join (cons (first words) (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn[x]\n  (let [[a & b] (clojure.string/split x #\"-\")]\n  (apply str\n    (clojure.string/join\n      (conj\n        (map \n          #(apply str (conj (rest %) (clojure.string/upper-case (first %))))\n          b)\n        a)))))", "problem": 102, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn prsq [a]\n(reduce #(str %1 (-> %2 (.substring 0 1) .toUpperCase) (.substring %2 1)) (.split a \"-\"))\n)", "problem": 102, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn [s]\n  (let [s (re-seq #\"\\w+\" s)]\n    (apply str\n      (first s)\n      (map #(apply str (Character/toUpperCase (first %)) (rest %)) (rest s)))))", "problem": 102, "user": "4ec2f192535dcc7ae8597d4c"}, {"code": "#(if (.contains % \"-\") \"multiWordKey\" %)", "problem": 102, "user": "4eabb245535d7eef30807319"}, {"code": "(fn [s]\n  (let [news (.split  s \"-\")]\n   (reduce str (cons (first news) (map #(str (.toUpperCase (str (first %1)))  (reduce str (rest %1)))     (rest news) )))\n    )\n  )", "problem": 102, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "#(let [capfirst (fn [[f & r]] \n                  (apply str (cons (Character/toUpperCase f) \n                             r)))\n       words (clojure.string/split % #\"-\")]\n   (clojure.string/join (cons (first words) \n                              (map capfirst (rest words)))))", "problem": 102, "user": "4db2eac3535df7e46ed9b6c8"}, {"code": "(fn [w] (let [ws (re-seq #\"\\w+\" w)]\n  (apply str (cons (first ws) (map clojure.string/capitalize (rest ws))))))", "problem": 102, "user": "4eb51942535d7eef30807365"}, {"code": "(fn [s] \n  (clojure.string/replace s \n    #\"-(.)\" \n    #(.toUpperCase (nth % 1))))", "problem": 102, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [s]\n  (let [ws (seq (.split s \"-\"))]\n    (apply str (first ws)\n      (map #(str (.toUpperCase (.substring % 0 1)) (.substring % 1))\n           (rest ws)))))", "problem": 102, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn [s] (apply str \n  (map (fn [[f s]] \n          (cond (= f \\-) (.toUpperCase (str s))\n                (= s \\-) \"\"\n                :else (str s)))\n        (partition 2 1 (str \"_\" s)))))", "problem": 102, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "(fn [s]\n    (let [split-s (clojure.string/split s #\"-\")\n          rest-s (map clojure.string/capitalize (rest split-s))] (clojure.string/join (cons (first split-s) rest-s))))", "problem": 102, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn [x] (apply str (loop [s x t []]\n  (cond (empty? s) t\n(= \\- (first s))\n(recur (rest (rest s))\n(conj t (Character/toUpperCase (second s))))\n:else (recur (rest s) (conj t (first s)))))))", "problem": 102, "user": "4db3a0e5535df7e46ed9b6d0"}, {"code": "(fn [s]\n  (let [\n      camel #(str (Character/toUpperCase (first %)) (apply str (rest %)))\n      words (.split s \"-\")]\n    (str (first words) (apply str (map camel (rest words))))))", "problem": 102, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn [s]\n  (let [ w (clojure.string/split s #\"-\")]\n   (apply str \n     (cons \n       (first w) \n       (map clojure.string/capitalize (rest w))))))", "problem": 102, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-(\\w)\" #(clojure.string/upper-case (second %))))", "problem": 102, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn [s]\n   (clojure.string/replace s #\"-.\" \n     (fn [[_ c]] (clojure.string/upper-case c)) ))", "problem": 102, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn camel-case [s]\n  (letfn [(capitalize [s]\n            (str (Character/toUpperCase (first s)) (apply str (rest s))))]\n    (reduce (fn [s1 s2] \n               (if (= s2 \"-\") s1\n                              (str s1 (capitalize s2)))) \n            (map #(apply str %) (partition-by #{\\-} s)))))", "problem": 102, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn camel [word]\n  (apply str\n    (map (fn [[prefix ch]] (if (= prefix \\-) (Character/toUpperCase ch) ch))\n      (remove (fn [[_ ch]] (= ch \\-))\n        (partition 2 1 (cons nil word))))))", "problem": 102, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn [s]\n  (let [[h t] (split-at 1 (re-seq #\"[^-]+\" s))\n        T (map clojure.string/capitalize t)]\n     (apply str (concat h T))))", "problem": 102, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn to-camel [s]\n  (apply str\n    ((fn f [chrs cap]\n      (if (seq chrs)\n        (let [n (first chrs)]\n          (lazy-seq\n            (if (= n \\-)\n              (f (rest chrs) true)\n              (if cap\n                (cons (Character/toUpperCase n) (f (rest chrs) false))\n                (cons n (f (rest chrs) false))))))))\n      (seq s) false)))", "problem": 102, "user": "4ec75077535d6d7199dd36e0"}, {"code": "#(loop [in % res \"\" f false]\n  (cond (empty? in) res\n        (= (first in) \\-) (recur (rest in) res true)\n        f (recur (rest in) (str res (Character/toUpperCase (first in))) false)\n        :else (recur (rest in) (str res (first in)) false)))", "problem": 102, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(fn [s] (apply str (reverse (reduce #(if (= \\- (first %1)) (conj (rest %1) (Character/toUpperCase %2)) (conj %1 %2))  '() s))))", "problem": 102, "user": "4eb2eae5535d7eef30807351"}, {"code": "#(apply str (reduce\r\n       (fn ! [a b] (if (= (last a) \\-)\r\n   (conj (vec (butlast a)) (char (- (int b) 32)))\r\n\t (conj a b)))\r\n       [] %))", "problem": 102, "user": "4e8a460e535d65386fec2109"}, {"code": "(fn [s]\n  (let [c (clojure.string/split s #\"-\")]\n    (apply str (cons (first c) (map #(clojure.string/capitalize %) (rest c))))))", "problem": 102, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn [string]\n  (let [words (.split string \"-\")]\n    (str (first words) (apply str (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [s]\n   (let [[x & xs] (.split s \"-\")]\n     (reduce (fn [out [y & ys]]              \n                 (str out (char (- (int y) 32))(apply str ys)))\n               x xs)))", "problem": 102, "user": "4e513758535dc968683fc4f3"}, {"code": "(fn to-camel-case [s]\n  (let [[s1 s2] (split-with (partial not= \\-) s)]\n    (if (empty? s2)\n      s\n      (str (apply str s1) (to-camel-case (str (.toUpperCase ((comp str second) s2))\n                                      (apply str ((comp rest rest) s2))))))))", "problem": 102, "user": "4e89ff3d535d3e98b802328a"}, {"code": "(fn [x]\n    (let [replaceIt (fn [s torepl] (.replaceAll s torepl (.toUpperCase (str (second (seq torepl)))))) \n          it (fn [s sq] (if (empty? sq) s (recur (replaceIt s (first sq)) (rest sq))))]\n      (it x (re-seq #\"-\\w\" x))))", "problem": 102, "user": "4e7ada51535db169f9c796ae"}, {"code": "(fn [s]\n  (letfn [(c [w]\n            (apply str (.toUpperCase (str (first w))) (rest w)))]\n    (let [a (.split s \"-\")]\n      (apply str (first a) (map c (rest a))))))", "problem": 102, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn f [input]\n  (let [ \n      words (.split input \"-\") \n      firstWord (get words 0)\n      capitalize #(str (.toUpperCase (.substring % 0 1)) (.substring % 1)) ]\n    (str firstWord (reduce str (map capitalize (rest words))))))", "problem": 102, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn [string]\n  (let [[x & xs] (re-seq #\"[^-]+\" string)]\n  (apply str x (map clojure.string/capitalize xs))))", "problem": 102, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "#(letfn [(u [s] (clojure.string/join \"\" (cons (Character/toUpperCase (first s)) (rest s))))] \n  (let [w (clojure.string/split % #\"-\")]  (clojure.string/join \"\" (cons (first w) (map u (rest w))))))", "problem": 102, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(let [capitalize #(str (.toUpperCase (subs % 0 1)) (subs % 1))]\n  #(let [words (clojure.string/split % #\"-\")]\n    (apply str (conj (map capitalize (rest words)) (first words)))))", "problem": 102, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn [s]\n  (let [tokens (.split s \"-\")\n    first-token (first tokens)\n    other-tokens (map (fn [s] (str (.toUpperCase (.substring s 0 1)) (.substring s 1))) (rest tokens))]\n  (str first-token (apply str other-tokens))))", "problem": 102, "user": "4edd4b77535d10e5ff6f5328"}, {"code": "(fn [s]\n  (let [words (.split s \"-\")]\n    (apply str\n      (first words)\n      (map (fn [s]\n        (apply str\n          (.toUpperCase (str (first s)))\n          (rest s)))\n        (rest words)))))", "problem": 102, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn camel [x] ;;a string\n(apply str\n  (cond\n    (not (seq x)) \"\"\n    (= \\- (first x)) (cons (#(.toUpperCase (str %)) (second x)) (camel (rest (rest x))))\n    :else (cons (first x) (camel (rest x))))\n  ))", "problem": 102, "user": "4eb955da535dfed6da9c6d50"}, {"code": "(fn [s] (let [a (.split s \"-\")] (apply str (cons (first a) (map #(str (.toUpperCase (subs % 0 1)) (subs % 1)) (rest a))))))", "problem": 102, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn  [s]\n  (let [words (re-seq #\"\\w+\" s)]\n    (apply str (first words)\n           (map #(apply str (Character/toUpperCase (first %)) (rest %)) (rest words)))))", "problem": 102, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "#(let [w (clojure.string/split % #\"-\")]                                                                                        \r\n (apply str (first w)                                                                                                         \r\n  (map clojure.string/capitalize (rest w))))", "problem": 102, "user": "4e765170535d324fb2983d69"}, {"code": "(fn [x] (let [words (re-seq #\"([\\w])+\" (. x replace \"-\" \" \"))]\n             (apply str (first (first words)) (map #(apply str (Character/toTitleCase (first (first %))) (rest (first %))) (rest words)))))", "problem": 102, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn [s]\n  (apply\n    str\n    (remove\n      #(= % \\-)\n      (map\n        #(if (= (get s (- %2 1)) \\-)\n           (char (- (int %) 32))\n           %)\n         s\n        (range)))))", "problem": 102, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn [s]\n  (let [ws (clojure.string/split s #\"-\")]\n    (apply str (cons (first ws)\n                     (map clojure.string/capitalize (rest ws))))))", "problem": 102, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn [s]\r\n  (let [sp (.split s \"-\")\r\n        ir (map #(apply str (concat (.toUpperCase (str (first %))) (rest %)))\r\n              (rest sp))\r\n        ts (cons (first sp) ir)]\r\n    (apply str ts)))", "problem": 102, "user": "4ee40938535d10e5ff6f5375"}, {"code": "(fn into-camel-case-string\n  [s]\n  (let [m (remove #{\"-\"} (map #(apply str %1) (partition-by #{\\-} s)))]\n    (apply str (cons (first m) (map #(clojure.string/capitalize %1) (rest m))))))", "problem": 102, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "#(reduce (fn [s [a b]] (.replace s a (.toUpperCase b))) % (re-seq #\"-(\\w)\" %))", "problem": 102, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn [s]\n  (let [[car & cdr] (filter #(not= '(\\-) %) (partition-by #(not= \\- %) s))\n        car (reduce str car)\n        cap #(str (Character/toUpperCase (first %)) (reduce str (rest %)))]\n    (str car (reduce str (map cap cdr)))))", "problem": 102, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn [s]\n  (let [ss (clojure.string/split s #\"-\")]\n    (clojure.string/join\n      (cons (first ss) (map clojure.string/capitalize (next ss))))))", "problem": 102, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "#(reduce (fn [a [c & s]] (apply str `(~a ~(Character/toUpperCase c) ~@s)))\n         (.split % \"-\"))", "problem": 102, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn [s]\n    (let [w (re-seq #\"\\w+\" s)\n          [a & b] w\n          f #(let [[p & q] (seq %) ] \n                  (apply str (cons (Character/toUpperCase p) q)))\n          x (map f b) ]\n       (str a (apply str x) )) )", "problem": 102, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn [s] (reduce #(.replaceAll % (str \"-\" (char %2))\n                               (.toUpperCase (str (char %2))))\n                 s\n                 (range 97 123)))", "problem": 102, "user": "4ee88bfb535d93acb0a66881"}, {"code": "#(letfn [(is-hyphen [c] (if (= \\- c) true false))\r\n  (convert [s acc capitalize] \r\n\t (if (seq s) \r\n\t     (let [c (first s)] \r\n\t\t  (if (is-hyphen c) \r\n\t\t      (recur (rest s) acc true) \r\n\t\t      (recur (rest s) (conj acc (if capitalize (Character/toUpperCase c) c)) false)))\r\n\t     (apply str acc)))]\r\n\t(convert % [] false))", "problem": 102, "user": "4e273301535deb9a81d77ef7"}, {"code": "(fn [my-str] (let [my-array (re-seq #\"[a-zA-Z]+\" my-str)] (apply str (first my-array) (map #(apply str (Character/toUpperCase (first %)) (next %)) (next my-array)))))", "problem": 102, "user": "4e8d5911535d65386fec2133"}, {"code": "(fn [s]\n  (let [[front & more] (re-seq #\"[^-]+\" s)\n        cap-first\n          #(str\n             (.. (first %) toString toUpperCase)\n             (apply str (rest %)))]\n   (apply str (concat front (map cap-first more)))))", "problem": 102, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(fn [word] (reduce #(if (= 0 (count %1)) (str %2) (str %1 (clojure.string/capitalize %2))) \"\" (clojure.string/split word #\"-\")))", "problem": 102, "user": "4ea11921535d7eef308072af"}, {"code": "(fn [s]\n  (let [[p & ps] (re-seq #\"\\w+\" s)]\n      (apply str p (map #(apply str (.toUpperCase (str (first %))) (rest %)) ps))))", "problem": 102, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn  [x]\n  (let [y (.split x \"-\")]\n (reduce #(str %1 %2)  (cons (first y) (map #(str (.toUpperCase (subs %1 0 1))\n  (.toLowerCase (subs %1 1))) (rest y))))))", "problem": 102, "user": "4efa2b5c535dced4c769f26f"}, {"code": "#(clojure.string/replace % #\"-(.)\" (fn [[_ c]] (.toUpperCase c)))", "problem": 102, "user": "4ef2d243535dced4c769f221"}, {"code": "(fn [s]\r\n    (let [a (.split s \"-\")\r\n          b (first a)\r\n          c (map clojure.string/capitalize (next a))]\r\n    (str b (reduce str c))))", "problem": 102, "user": "4daddc19c9a9d6ed4599dc57"}, {"code": "(fn [ss]\n        (let [[f & s] (.split ss \"-\")\n             title (fn [s] (str (Character/toUpperCase (first s)) (.substring s 1 (count s))))]\n             (str f (apply str (map title s)))))", "problem": 102, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn [s] (let [q (.split #\"-\" s)]\n             (apply str (first q) (map clojure.string/capitalize (rest q)))))", "problem": 102, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn [s]\r\n   (loop [[c & cs :as css] s acc [] cap? false]\r\n     (if (seq css)\r\n       (if (= c \\-)\r\n         (recur cs acc true)\r\n         (recur cs \r\n                (conj acc (if cap? (Character/toUpperCase c) c)) false))\r\n       (apply str acc))))", "problem": 102, "user": "4ef1ee67535dced4c769f219"}, {"code": "(fn cc [x] (let [x2 (.split x \"-\")] (reduce #(.concat %1 %2) (conj (map #(.concat (.toString (Character/toUpperCase (.charAt % 0))) (.substring % 1)) (drop 1 x2)) (first x2)))))", "problem": 102, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn camelize [xs]\n  (let [ss (clojure.contrib.string/split #\"-\" xs)]\n    (->> (rest ss)\n         (map clojure.string/capitalize)\n         (apply str (first ss)))))", "problem": 102, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn [s]\n  (let [[w & ws] (re-seq #\"[^-]+\" s)\n        upcase-first #(apply str (cons (Character/toUpperCase (first %)) (rest %)))]\n    (if ws (apply str (cons w (map upcase-first ws))) s)))", "problem": 102, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn [s] (let [capitalize #(str (.toUpperCase (subs % 0 1)) (.toLowerCase(subs % 1)))]\n  (->> s (re-seq #\"[^-]+\") \n  (map-indexed #(if (pos? %1) (capitalize %2) %2)) (apply str))))", "problem": 102, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn [s]\n    (let [str-join (fn [coll] (apply str coll))\n          camelcase (fn [s] (str-join (cons (Character/toUpperCase (first s)) (rest s))))\n          splited (seq (.split s \"-\"))]\n      (str-join (cons (first splited) (map camelcase (rest splited))))))", "problem": 102, "user": "4dc29a1d535d020aff1edf96"}, {"code": "#(clojure.string/replace % #\"-.\"\n  (fn [[_ c]] (str (Character/toUpperCase c))))", "problem": 102, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": ";; Split input string on the parts\n;; Add first part on the result list\n;; Capitalize other parts recursively\n(fn into-camel-case\n  ([istr] (into-camel-case (rest (clojure.string/split istr #\"-\")) (conj '() (first (clojure.string/split istr #\"-\")))))\n  ([iseq oseq]\n     (cond\n      (empty? iseq) (apply str (clojure.string/join \"\" (reverse oseq)))\n      :else (into-camel-case (rest iseq) (conj oseq (clojure.string/capitalize (first iseq)))))))", "problem": 102, "user": "4eee3e6a535d93acb0a668c3"}, {"code": "(fn camel-case [s]\n        (let [[a & w] (re-seq #\"\\w+\" s)]\n          (apply str a (map #(apply str (.toUpperCase (str (first %))) (rest %)) w))))", "problem": 102, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn [s] \n  (reduce \n      #(str % (clojure.string/capitalize %2))\n    (.split s \"-\")))", "problem": 102, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn  [x]\n  (let [a (map int x),f #(apply str (map char %)), o (fn [[x & m]] (conj m (- x 32)))]\n\t     (loop [r \"\",more a]\n\t\t(let [idx (.indexOf more 45)]\n\t\t     (if (= -1 idx) (str r (f more))\n\t\t\t (recur (str r (f (take idx more))) (o (drop (inc idx) more))))))))", "problem": 102, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn [key]\n  (let [tokens (re-seq #\"[^-]+\" key)\n        prefix (first tokens)\n        source (rest tokens)\n        target (map #(str (.toUpperCase (apply str (take 1 %))) \n                                        (apply str (drop 1 %))) source)]\n    (apply str (conj target prefix))))", "problem": 102, "user": "4ef4ab95535dced4c769f23b"}, {"code": "(fn [s] \n  (->> s\n    (reduce\n      #(if (= \\- (first %1))\n        (conj (rest %1) (Character/toUpperCase %2))\n        (conj %1 %2))\n      '())\n    (reverse)\n    (apply str)))", "problem": 102, "user": "4f050dec535dcb61093f6bef"}, {"code": "#(let [[f & rest] (re-seq #\"[^\\-]+\" %)]\n  (apply str f \n    (map (fn [[f & rest]] (apply str (.toUpperCase (str f)) rest)) rest)))", "problem": 102, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn prob-0102\n  [wd-str]\n  (let [wd-seq (clojure.string/split wd-str #\"-\")\n        wd-cam (cons (first wd-seq) (map #(clojure.string/capitalize %) (rest wd-seq))) ]\n    (apply str wd-cam)))", "problem": 102, "user": "4f047c07535dcb61093f6bcd"}, {"code": "#(let [[x & xs] (clojure.string/split % #\"-\")]\n  (reduce str (cons x \n    (map (fn [[f & r]] (reduce str (Character/toUpperCase f) (reduce str r))) xs))))", "problem": 102, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn [l]           \n (reduce #(.replaceAll %1 (first %2) (.toUpperCase (second %2))) l (re-seq #\"\\-(\\w)\" l)))", "problem": 102, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn [s]\n    (let [ps (re-seq #\"\\w+\" s)]\n        (reduce (fn [s [f & r]]\n                  (str s (Character/toUpperCase f) (apply str r)))\n                (first ps)\n                (rest ps))))", "problem": 102, "user": "4ed292ac535d44c135fd68d9"}, {"code": "#(let [[f & r] (re-seq #\"[^\\-]+\" %)]\n                   (apply str f\n                    (mapcat\n                     (fn [[h & t]] (cons (.toUpperCase (str h)) t)) r)))", "problem": 102, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn [s]\n    (reduce\n      #(if (= (last %1) \\-)\n         (str (.substring %1 0 (dec (count %1))) (.toUpperCase (.toString %2)))\n         (str %1 %2))\n      \"\"\n      s))", "problem": 102, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn [s]\n(apply str\n  (first(seq(.split s \"-\")))\n  (map #(apply str (java.lang.Character/toUpperCase (first %)) (rest %))\n    (rest(seq(.split s \"-\"))))\n)\n)", "problem": 102, "user": "4eaa66eb535d7eef3080730b"}, {"code": "(fn[x](clojure.string/replace (clojure.string/replace x #\"(?<=-)[a-z]\" #(clojure.string/upper-case (str %1))) #\"-\" \"\"))", "problem": 102, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "(fn [s]\n  (let [ss (clojure.string/split s #\"-\")]\n    (apply str (first ss)\n      (map clojure.string/capitalize (rest ss)))))", "problem": 102, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn camel-case\n  [s]\n  (apply str(cons (first s) (filter #(not= % \\-)\n  (map #(second %) (map  #(if (= (first %) \\-)  [(first %)  (.toUpperCase (str(second %)))  ] %) (partition 2 1 s))   )))))", "problem": 102, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn [s]\n  (let [[f & r] (re-seq #\"\\w+\" s)\n        v (map clojure.string/capitalize r)]\n    (reduce str (concat f v))))", "problem": 102, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn [s]\n  (let [res (clojure.contrib.string/split #\"-\" s)]\n    (apply str (first res) \n      (map clojure.contrib.string/capitalize (rest res)))))", "problem": 102, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn [s]\n      (let [[x & xs] (.split s \"-\")]\n        (apply str (cons x (map #(clojure.string/capitalize %) xs)))))", "problem": 102, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn into-camel-case [w]\r\n    (clojure.string/join\r\n     (loop [s (seq w) result []]\r\n       (if (empty? s)\r\n         result\r\n         (if (= (first s) \\-)\r\n           (recur (rest (rest s)) (conj result (clojure.string/upper-case (second s))))\r\n           (recur (rest s) (conj result (first s))))))))", "problem": 102, "user": "4f039524535dcb61093f6b2c"}, {"code": "#(let [x (.split % \"-\")]\n  (if (empty? (rest x))\n  %\n  (apply str (first x) (map clojure.string/capitalize (rest x)))))", "problem": 102, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn [s]\n  (let [t (re-seq #\"\\w+\" s)]\n    (apply str\n      (concat (list (first t))\n              (map #(str (.toUpperCase (subs %1 0 1)) (subs %1 1) ) (rest t))))))", "problem": 102, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn [s]\n  (let [r (fn [s] (re-matcher #\"-\\w\" s))]\n    (loop [m (r s) s s]\n      (if (.find m)\n        (let [z (.replaceFirst m (.toUpperCase (.substring (.group m) 1)))]\n          (recur (r z) z))\n        s))))", "problem": 102, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn [s] (.replace (.replace s  \"-w\" \"W\") \"-k\" \"K\"))", "problem": 102, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "#(let [to-camel (fn [[x & more]] (apply str (Character/toUpperCase x) more))\n       [x & more] (partition-by (partial = \\-) %)]\n   (->> (partition 2 more)\n        (map (comp to-camel second))\n        (concat x)\n        (apply str)))", "problem": 102, "user": "4daec9dcedd6309eace4d15f"}, {"code": "{\"something\" \"something\" \"multi-word-key\" \"multiWordKey\" \"leaveMeAlone\" \"leaveMeAlone\"}", "problem": 102, "user": "4edb1774535d10e5ff6f5315"}, {"code": "(fn [s] \n        (let \n            [[x & xs] (.split s \"-\")] \n            (apply str (cons x (map #(clojure.string/capitalize %) xs)))))", "problem": 102, "user": "4f0e995e535d0136e6c22326"}, {"code": "#(let [x (re-seq #\"\\w+\" %)\n   capitalize (fn [x]\n\t   (let [s (seq x)]\n\t   (loop [c (rest s)\n\t      result [(java.lang.Character/toUpperCase (first s))]]\n\t      (if (empty? c)\n\t\t  (apply str result)\n\t\t  (recur (rest c) (conj result (first c)))))))]\n\t  (loop [s (rest x)\n\t    result [(first x)]]\n\t    (if (empty? s)\n\t      (apply str result)\n\t      (recur (rest s) (conj result  (capitalize (first s)))))))", "problem": 102, "user": "4f066916535dcb61093f6c10"}, {"code": "(fn [s] (let [t (re-seq #\"[^-]+\" s)] (str (first t) (apply str (for [p (rest t)] (str (Character/toUpperCase (first p)) (apply str (rest p))))))))", "problem": 102, "user": "4f0cc259535d0136e6c22310"}, {"code": "(fn [s] (reduce #(str % (clojure.string/capitalize %2)) (clojure.string/split s #\"-\")))", "problem": 102, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn [word]\n  (let [first (apply str (take-while #(not(= % \\-)) word))\n        rest  (map (comp clojure.string/capitalize #(apply str %) rest) \n                   (re-seq #\"-\\w+\" word))]\n       (apply str (cons first rest))))", "problem": 102, "user": "4f13047d535d64f60314642c"}, {"code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (first words) (map clojure.string/capitalize (next words)))))", "problem": 102, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "#(if-let [parts (re-seq #\"\\w+\" %)]\n  (if (= (first parts) %)\n    %\n    (apply str (first parts)\n      (map\n        (fn [part]\n         (let [c (seq part)]\n           (apply str (Character/toUpperCase (first c)) (rest c)))) \n        (rest parts))))\n  %)", "problem": 102, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn [s]\n  (let [spl (seq (.split s \"-\"))\n    f (first spl)\n    r (map clojure.string/capitalize (rest spl))]\n    (str f (apply str r))))", "problem": 102, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "(fn intoCamelCase [w]\n    (apply str\n        (map-indexed\n            (fn [index [f & r]]\n                (apply str\n                    (if (zero? index)\n                        (cons f r)\n                        (cons (Character/toTitleCase f) r))))\n            (re-seq #\"\\w+\" w))))", "problem": 102, "user": "4f128865535d64f603146428"}, {"code": "(fn [s]\n    (apply str (concat (list (first s))\n                       (for [pair (partition 2 1 s)]\n                         (cond\n                          (= \\- (first pair)) (.toUpperCase (str (second pair)))\n                          (= \\- (second pair)) \"\"\n                          :else (second pair)))))\n    )", "problem": 102, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn [s]\n  (if (nil? (re-find #\"-\" s))\n    s\n    (let [words (re-seq #\"[a-z]+\" s)]\n      (apply str \n        (first words)\n        (map\n          #(str (.toUpperCase (subs % 0 1)) (subs % 1))\n          (rest words))))))", "problem": 102, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "(fn [s]\n  (letfn\n    [(ucfirst [w] (apply str (-> w first str .toUpperCase) (rest w)))]\n      (let\n        [words (re-seq #\"[a-zA-Z]+\" s)]\n          (apply str (first words) (map ucfirst (rest words))))))", "problem": 102, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn [s]\n  (first (reduce\n    (fn [[r caps?] c]\n      (let [C (cond\n          caps? (Character/toUpperCase c)\n          (= \\- c) \"\"\n          true c)]\n        [(str r C) (= \\- c)]))\n    [\"\" false]\n    s)))", "problem": 102, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [s]\n  (apply str \n    (remove #{\\-} \n            (map (fn [[a b]] (if (= a \\-) \n                               (#(char (- (int %) 32)) b) \n                               b)) (partition 2 1 (str \"_\" s))))))", "problem": 102, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn [s] (clojure.string/replace s #\"-\\w\" #(.toUpperCase (.substring % 1))))", "problem": 102, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn to-camel [text]\n  (let [upchar (fn [word] (str (.toUpperCase (subs word 0 1)) (subs word 1)))\n        words (clojure.string/split text #\"-\")\n        upwords (map upchar words)]\n    (clojure.string/join (cons (first words) (rest upwords)))))", "problem": 102, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [expr]\n  (loop [s expr\n         to-cap false\n         cur (first expr)\n         res ()]\n    (cond \n      (empty? s) (clojure.string/join (reverse res))\n      (= cur \\-) (recur (rest s) true (second s) res)\n      to-cap (recur \n                (rest s) \n                false \n                (second s) \n                (conj res (str (clojure.string/upper-case cur))))\n      :default \n      (recur (rest s) false (second s) (conj res (str cur))))))", "problem": 102, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn [x]\n  (if (some #(= \\- %) (seq x))\n    (let [s (seq (.split x \"-\"))]\n      (apply str (first s)\n                 (for [ls (rest s)]\n                    (apply str (.toUpperCase (str (first ls))) (rest ls)))))\n  x))", "problem": 102, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "(fn camelize [s] (clojure.string/replace (loop [cs s hyphens (re-seq (re-pattern \"-.\") s)] (if (empty? hyphens) cs (recur (clojure.string/replace cs (first hyphens) (clojure.string/upper-case (first hyphens))) (rest hyphens)))) \"-\" \"\"))", "problem": 102, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn hyphen-to-camel [s]\n  (let [[word & rest] (re-seq #\"[^-]+\" s)]\n    (apply str\n       (cons\n         word\n         (map clojure.string/capitalize rest)\n         )\n       )\n    )\n  )", "problem": 102, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(fn [s] (clojure.string/replace s #\"-.\" #(.toUpperCase (str (second %)))))", "problem": 102, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn camelCase [s]\n  (let [words (.split s \"-\")\n        capitalize (fn [w] (str (.toUpperCase (str (first w))) (apply str (rest w))))]\n       (apply str (cons (first words) (map capitalize (rest words))))))", "problem": 102, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn [s]\r\n  (apply str\r\n    (map-indexed\r\n      #(if (zero? %1)\r\n        %2\r\n        (str (.toUpperCase (.substring %2 0 1)) (.substring %2 1)))\r\n      (.split s \"-\"))))", "problem": 102, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [s]\n  (apply str\n    (map\n      (fn [[g c mc]] \n        (if mc \n          (Character/toUpperCase(second mc))\n          c\n        )\n      )\n      (re-seq #\"([a-zA-Z])|(\\-[a-zA-Z])\" s)\n    )\n  )\n)", "problem": 102, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn [s]\n  (let [x (filter #(not= % [\\-]) (partition-by #(= \\- %) s))]\n    (apply str (apply str (first x)) (map #(apply str (.toUpperCase (str (first %))) (next %)) (next x)))))", "problem": 102, "user": "4ef6e689535dced4c769f24f"}, {"code": "(fn [hyph-str]\n   (apply str (loop [result [] coll (seq hyph-str)]\n     (if (zero? (count coll))\n       result\n       (recur\n        (if (= \\- (first coll))\n          result\n          (conj result (first coll))\n          )\n        (if (= \\- (first coll))          \n          (cons (.toUpperCase (str (first (rest coll)))) (rest (rest coll)))\n          (rest coll)\n          )\n        )       )     )   ))", "problem": 102, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn [st]\n   (let [words (.split st \"-\")]\n     (apply str (first words)\n            (map #(apply str (.toUpperCase (str (first %)))\n                       (rest %)) (rest words)))))", "problem": 102, "user": "4eb02674535d7eef30807338"}, {"code": "(fn [s] \n    (let [l (seq (.split #\"[-]\" s))] \n      (apply str (first l) (map #(str (.toUpperCase (subs % 0 1)) (subs % 1)) (rest l)))\n      )\n    )", "problem": 102, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn [s]\n  (let \n    [x #(seq (.split #\"-\" %))\n     f #(cons (.toUpperCase (str (first %))) (rest %))\n     y #(reduce str (map str (f %)))]\n    (reduce str (first (x s)) (reduce str (map y (rest (x s)))))))", "problem": 102, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "#(let [[f & rst] (clojure.string/split % #\"-\")]\n     (apply str f (map clojure.string/capitalize rst)))", "problem": 102, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")\n        first-word (first words)\n        rest-word (map\n                   (fn [word]\n                     (clojure.string/capitalize word))\n                   (rest words))]\n    (clojure.string/join \n           (conj rest-word first-word))))", "problem": 102, "user": "4f31519ae4b0d6649770a086"}, {"code": "(fn [s]\n  (let [[h & t] (seq (.split s \"-\"))]\n    (apply str (cons h (map clojure.string/capitalize t)))))", "problem": 102, "user": "4e7d1c22535db169f9c796c5"}, {"code": "#(clojure.string/replace % #\"-([a-z])\" (fn [m] (clojure.string/upper-case (m 1))))", "problem": 102, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [s]\n  (apply str\n         (let [s (clojure.string/split s #\"-\")]\n    (cons (first s)\n          (map clojure.string/capitalize (rest s))))))", "problem": 102, "user": "4e7dd982535db169f9c796ee"}, {"code": "#(let [[a & b] (re-seq #\"\\w+\" %)]\n     (apply str a\n           (for [[x & y] b]\n             (apply str (char (- (int x) 32)) y))))", "problem": 102, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "#(let [w (re-seq #\"\\w+\" %)]\n    (apply str\n    (first w)\n    (map clojure.string/capitalize (rest w))\n    )\n  )", "problem": 102, "user": "4f1595da535d64f603146444"}, {"code": "#(apply str (flatten\n              (reduce (fn [[s p] c]\n                        (if (= p \"-\")\n                          [s (.toUpperCase c)]\n                          [(conj s p) c]))\n               [[] \"\"]\n               (map str (seq %)))))", "problem": 102, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [s] (clojure.string/replace s #\"-.\" (fn [[_ x]] (clojure.string/upper-case x))))", "problem": 102, "user": "4f3976aee4b0e243712b1eea"}, {"code": "(fn g[x] (loop [w (#(seq (.split #\"-\" %)) x) o \"\"]\n            (if-not (seq w)\n              o\n              (let [a (first w)\n                    b (rest w)]\n                (if (= \"\" o)\n                (recur b (str o a))\n                (recur b (str o (clojure.string/capitalize a))))))))", "problem": 102, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "(fn [n] \r\n    (let [c (fn [w] (str (.toUpperCase (str (first w))) (subs w 1)))\r\n         w (re-seq #\"[^\\-]+\" n)]\r\n         (apply str (first w) (map c (rest w)))))", "problem": 102, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn camel-case [s]\n         (apply str \n                (reduce (fn [r x]\n                 (if (= (last r) \\-)\n                   (conj (vec (drop-last r)) (.toUpperCase (str x)))\n                   (conj r x))) [] s)))", "problem": 102, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [x]\n  (let [s (seq x)\n        len (count s)]\n    (loop [i 0 result []]\n      (if (>= i len) (apply str result)\n         (if (= (nth s i) \\-)\n            (recur (+ i 2) (conj result (char (- (int (nth s (inc i))) 32))))\n            (recur (inc i) (conj result (nth s i)))\n         )\n         ))))", "problem": 102, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn [s]\n  (apply str\n         (reduce (fn [l1 [c & n]]\n                  (concat l1 (list (Character/toUpperCase c)) n)) (.split s \"-\"))))", "problem": 102, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn [s]\n           (let [c (re-seq #\"[a-zA-Z]+\" s)]\n                (str (first c) (apply str (map #(str (.toUpperCase (str (first %))) (apply str (rest %))) (rest c))))))", "problem": 102, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn [s]  \r\n  (reduce (fn [s sp] \r\n            (.replace s sp (.toUpperCase (subs sp 1)))\r\n            ) s (re-seq #\"-\\p{Lower}\" s))\r\n  )", "problem": 102, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn f [l]\r\n  (apply str \r\n         (if (empty? l) nil\r\n             (if (= (first l) \\-)\r\n               (if (empty? (rest l))\r\n                 (cons \\- nil)\r\n                 (cons (#(if (<= (int \\a) % (int \\z))\r\n                           (char (- % 32))) (int (first (rest l))))\r\n                       (f (rest (rest l)))))\r\n               (cons (first l) (f (rest l)))))))", "problem": 102, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn [s]\n  (let [[hd & tl] (.split s \"-\")]\n    (str hd\n      (apply str (map\n        (fn [i]\n          (str\n            (.toUpperCase (.substring i 0 1))\n            (.substring i 1 (.length i))))\n        tl)))))", "problem": 102, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(clojure.string/upper-case (% 1))))", "problem": 102, "user": "4daf36c2edd6309eace4d175"}, {"code": "(fn [string]\n    (let [[first & more] (clojure.string/split string #\"-\")]\n        (if (empty? more)\n            string\n            (clojure.string/join \"\" (cons (clojure.string/lower-case first) (map clojure.string/capitalize more))))))", "problem": 102, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn [s]\n  (let [[f & r] (re-seq #\"\\w+\" s)]\n    (str f (apply str (map clojure.string/capitalize r)))))", "problem": 102, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn cc [word]\n  (if-let [[f & r] (clojure.string/split word #\"-\")]\n  (apply str f\n          (mapcat clojure.string/capitalize\n               r))\n    word))", "problem": 102, "user": "4e6cf521535de274dd8d818b"}, {"code": "(fn [arg]\r\n  (let [x (take-nth 2\r\n                    (partition-by #(= % \\-) arg))]\r\n    (apply str (concat (first x)\r\n                       (apply concat\r\n                              (map #(cons (Character/toUpperCase (first %)) (rest %)) (rest x)))))))", "problem": 102, "user": "4eb66737535d7eef3080736b"}, {"code": "#(let [[x & y] (.split % \"-\")]\n  (apply str x \n    (mapcat (fn [[a & b]] (cons (.toUpperCase (str a)) b)) y)))", "problem": 102, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn toCamelCase\n  [str]\n  (let [words (clojure.string/split str #\"-\")]\n    (clojure.string/join\n     (cons (first words)\n           (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn into-camel-case [s]\n  (let [capitalize (fn [s] (apply str (cons (.toUpperCase (first (map str s))) (rest (map str s)))))]\n    (apply str (cons (first (re-seq #\"\\w+\" s)) (map capitalize (rest (re-seq #\"\\w+\" s)))))))", "problem": 102, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "#(if (= \"multi-word-key\" %)\n    \"multiWordKey\"\n    %)", "problem": 102, "user": "4f04d312535dcb61093f6be7"}, {"code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" (comp clojure.string/upper-case last)))", "problem": 102, "user": "4f4ff5a8e4b03ad3f0c10cf3"}, {"code": "(fn _\n   ([c] (_ c []))\n   ([[h & t :as c] a]\n      (if c\n        (let [a* (conj a (if (= \\- h)\n                           (Character/toUpperCase (first t)) h))\n              t* (if (= \\- h) (drop 1 (rest c)) t)]\n          (_ t* a*))\n        (apply str a))))", "problem": 102, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "(fn [s] (clojure.string/replace s #\"-[a-z]\" #(clojure.string/capitalize (last %1))))", "problem": 102, "user": "4f1d1299535d64f603146487"}, {"code": "(fn [string]\n  (let [coll (clojure.string/split string #\"-\")]\n    (if (= (count coll) 1)\n      (first coll)\n      (clojure.string/join \n        (cons (first coll) (map clojure.string/capitalize (rest coll)))))))", "problem": 102, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn [s]\n    (clojure.string/replace s #\"-(.)\" #(.toUpperCase (str (second %)))))", "problem": 102, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn [s]\n  (let [[w & ws] (clojure.string/split s #\"-\")]\n    (if (seq ws)\n      (apply str (cons w, (map clojure.string/capitalize ws)))\n      w)))", "problem": 102, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn into-cc [astring]\n       (cond\n\t(empty? astring)\n\t\"\"\n\t(= \\- (first astring))\n\t(apply str (cons (.toUpperCase (str (second astring))) (into-cc (rest (rest astring)))))\n\t:else\n\t(apply str (cons (first astring) (into-cc (rest astring))))))", "problem": 102, "user": "4eae2f9e535d7eef30807324"}, {"code": "(fn [s]\n    (reduce\n     (fn [st [m r]] (.replace st m (.toUpperCase r)))\n     s (re-seq #\"-([a-z])\" s)))", "problem": 102, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn [n]\n  (let [parts (.split n \"-\")]\n    (apply str (first parts) \n      (flatten\n      (map\n        #(cons (Character/toUpperCase (first %)) (rest %))\n        (rest parts))))))", "problem": 102, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn [w]\n  (let [split (clojure.string/split w #\"-\") f (first split) r (rest split)]\n  ( reduce str (concat [f] (map clojure.string/capitalize r)))))", "problem": 102, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "#(clojure.string/replace\n  %\n  #\"-(.)\" (fn [[_ c]] (.toUpperCase c)))", "problem": 102, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn [s]\n  (apply str\n    (cons (first s)\n    (remove #{\\-}\n      (map\n        (fn [[a b]]\n          (if (= \\- a)\n            (Character/toUpperCase b)\n            b))\n        (partition 2 1 s))))))", "problem": 102, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [word]\n  (let [split(re-seq #\"[^-]+\" word)]\n    (apply str \n      (cons (first split) \n            (map #(apply str (cons (Character/toUpperCase (first %)) (rest %))) \n                 (rest split)  )))))", "problem": 102, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn [str] (clojure.string/replace str #\"-(\\w)\" #(.toUpperCase (% 1))))", "problem": 102, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn [st]\n  (let [[fst & rst] (clojure.string/split st #\"-\")]\n    (apply str fst (map clojure.string/capitalize rst))))", "problem": 102, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn [s]\n  (let [[f & r] (filter (complement #{[\\-]}) \n                        (partition-by #{\\-} s))]\n    (apply str\n      (concat f\n              (reduce (fn [s [f & r]] \n                          (concat s [(Character/toUpperCase f)] r)) \n                      () \n                      r)))))", "problem": 102, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "#(let [v (clojure.string/split % #\"-\")\n        result (conj (map clojure.string/capitalize (rest v)) (first v))]\n    (clojure.string/join result))", "problem": 102, "user": "4ea4e98a535d7eef308072ce"}, {"code": "#(apply str\n  (map (fn [[_ a b _]]\n         (str a (and b (.toUpperCase\n                         (subs b 1)))))\n    (re-seq #\"([^-]+)(-.)?\" %)))", "problem": 102, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn [s]\n  (let [l (sequence (.split s \"-\")) l1 (first l) lr (map clojure.string/capitalize (rest l))] \n    (apply str (cons l1 lr))))", "problem": 102, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn camel [s]\n  (->>\n    (partition 2 1 (cons 0 s))\n    (map (fn [[a b]] (if (= a \\-) (Character/toUpperCase b) b)))\n    (remove #(= \\- %))\n    (apply str)))", "problem": 102, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn intoCamelCase [s]\n  (let [portions (vec (.split s \"-\"))\n        capitalize (fn [s]\n                      (apply str (java.lang.Character/toUpperCase (first s)) (rest s)))]\n    (reduce str (list* (first portions) (map capitalize (rest portions))))))", "problem": 102, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn [k]\n  (let [s (re-seq #\"[^-]+\" k)]\n    (apply str (first s) (map #(clojure.string/capitalize %) (rest s)))))", "problem": 102, "user": "4ecbb249535df97575fdabdf"}, {"code": "(fn [x]\n  (let [s  (clojure.string/split x #\"-\")]\n  (apply str (first s)\n    (map #(str (.toUpperCase (str(first %))) (apply str (rest %)))\n            (rest s)))))", "problem": 102, "user": "4de18de7535d08e6dec9fde8"}, {"code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[_ s]] (.toUpperCase s)))", "problem": 102, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn [s] (\n  let [ coll (seq (. s (split \"-\")))]\n  (apply str (first coll) (map #(str (.toUpperCase (subs %1 0 1)) (subs %1 1)) (rest coll))) \n  )\n)", "problem": 102, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(fn [s]\n  (clojure.string/replace s\n    #\"-[a-z]\"\n    #(.toUpperCase (subs % 1))))", "problem": 102, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn [s]\n  (let [ss (clojure.string/split s (re-pattern \"[-]\"))]\n    (apply str\n           (concat\n             (first ss)\n             (mapcat #(cons (clojure.string/upper-case (first %)) (rest %))\n                  (rest ss))))))", "problem": 102, "user": "4f90e238e4b0dcca54ed6c94"}, {"code": "(fn convertCamel[p_str]  \r\n  (loop[theseq (seq p_str)\r\n        sign false\r\n        result []]\r\n    (if (empty? theseq)       \r\n        (apply str result)\r\n  \t    (let[ch (first theseq),\r\n\t\t         isS (= \\-  ch),\r\n\t\t         val (if sign  (Character/toUpperCase  ch) ch)]    \r\n\t\t         (recur \r\n\t\t             (rest theseq)\r\n\t\t             (if isS true false)\r\n\t\t             (if isS\r\n\t\t                 result\r\n\t\t                 (conj result val)\r\n\t\t             )\r\n\t\t         )\r\n\t\t      )\r\n    )\r\n     \r\n  )\r\n)", "problem": 102, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn [s]\n  (let [upcase-word (fn [word]\n                      (cons (Character/toUpperCase (first (seq word)))\n                            (rest (seq word))))\n        parts (map second (re-seq #\"(?:(\\w+)[-_]?)\" s))]\n    (apply str (flatten (reduce #(conj %1 (upcase-word %2))\n                                (vec (seq (first parts)))\n                                (rest parts))))))", "problem": 102, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn [[c :as s]]\n  (apply str c\n         (map\n          (fn [[a b]]\n            (cond (= \\- a) (Character/toUpperCase b)\n                  (= \\- b) nil\n                  :e b))\n          (partition-all 2 1 s))))", "problem": 102, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn tr [s]\n  (apply str (if (empty? s) \"\" \n    (if (= (first s) \\-)\n      (cons (clojure.string/upper-case (second s)) (tr (rest (rest s))))\n      (cons (first s) (tr (rest s)))\n    )\n  ))\n)", "problem": 102, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str\n      (cons\n        (first words)\n        (map clojure.string/capitalize (rest words))\n      )\n    )\n  )\n)", "problem": 102, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn [s]\n  (let [[x & xs] (.split s \"-\")]\n    (apply str x (map #(str (.toUpperCase (.substring % 0 1))\n                            (.substring % 1))\n                      xs))))", "problem": 102, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn [s] \n  (clojure.string/replace \n    s \n    #\"-[a-z]\" \n    (fn [[_ c]] (str (Character/toUpperCase c)))))", "problem": 102, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn [s]\n  (reduce\n    #(str % (clojure.string/capitalize %2))\n    (.split s \"-\")))", "problem": 102, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn [s] (let [[f :as c] (vec (mapcat #(assoc (vec %) 0 (.toUpperCase (str (first %)))) (re-seq #\"[^-]+\" s)))] (apply str (assoc c 0 (.toLowerCase (str f))))))", "problem": 102, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn [x]  (clojure.string/replace x #\"-[a-z]\" #(clojure.string/upper-case (second %1)))  )", "problem": 102, "user": "4f4be1cae4b03ad3f0c10c81"}, {"code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (second %))))", "problem": 102, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn [w]\n  (let [words (re-seq #\"\\w+\" w)]\n    (apply str\n           (first words)\n           (map (fn [s]\n                  (let [chars (seq s)]\n                    (apply str\n                           (Character/toUpperCase (first chars))\n                           (rest chars))))\n                (rest words)))))", "problem": 102, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[a b]] (clojure.string/capitalize b)))", "problem": 102, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn [s]\n  (let [[first-s & rest-s] (clojure.string/split s #\"-\")]\n    (apply str\n           first-s\n           (map clojure.string/capitalize rest-s))))", "problem": 102, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(fn [s]\n  (let [[head & tail] (re-seq #\"\\w+\" s)]\n    (apply str head (map clojure.string/capitalize tail))))", "problem": 102, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn [s] (->> s (cons nil) (partition 2 1) (map (fn [[c n]] (if (= \\- c) (Character/toUpperCase n) n))) (filter #(not= \\- %)) (apply str)))", "problem": 102, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn [l]\n  (cond\n    (identical? l \"something\") \"something\"\n    (identical? l \"multi-word-key\") \"multiWordKey\"\n    (identical? l \"leaveMeAlone\") \"leaveMeAlone\"))", "problem": 102, "user": "4faa3eeae4b081705acca1ed"}, {"code": "#(clojure.string/replace % #\"\\-([a-z])\" (fn [[_ s]] (clojure.string/upper-case s)))", "problem": 102, "user": "4faae01ae4b081705acca206"}, {"code": "(fn [s]\n  (clojure.string/replace  s #\"-[a-zA-Z]\"\n                           #(apply str (rest (.toUpperCase %1)))))", "problem": 102, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn f\n  ([x] (f (seq x) \"\"))\n  ([x res]\n  (let [[ch1 ch2 & more] x]\n    (cond (nil? ch1) res\n          (nil? ch2) (str res ch1)\n          (= ch1 \\-) (f more (str res (Character/toUpperCase ch2)))\n          :else (f (conj more ch2) (str res ch1))))))", "problem": 102, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "#(let [words (clojure.string/split % #\"-\")]\n  clojure.string/join \"\"\n  (clojure.string/join\n   \"\" (cons (first words)\n            (map clojure.string/capitalize (rest words)))))", "problem": 102, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn [S]\n  ((fn [lst] (reduce \n    (fn [x y] \n      (str x (clojure.string/capitalize y))) \n    (first lst) (rest lst)))\n   (clojure.string/split S #\"-\")))", "problem": 102, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn icc [s]\n  (let [words (clojure.string/split s #\"-\")\n        _ (println words)\n        up-first (fn [w]\n                   (let [_ (println w)\n                        chars (seq w)\n                         _ (println chars)\n                         first-char (first chars)\n                         rest-chars (rest chars)\n                         upp (Character/toUpperCase first-char)\n                         _ (println upp)\n                         new-seq (conj rest-chars upp)\n                         _ (println new-seq)]\n                    (clojure.string/join \"\" new-seq)))\n        ccwords (conj (map up-first (rest words)) (first words) )]\n    (clojure.string/join \"\" ccwords)))", "problem": 102, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn [s] \n  (apply str \n    (-> s\n        (.split \"-\")\n        ((juxt first #(map clojure.string/capitalize (next %))))\n        (flatten))))", "problem": 102, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "#(clojure.string/replace % #\"-(.)\" (fn [[_ x]] (clojure.string/upper-case x)))", "problem": 102, "user": "4daeabf6edd6309eace4d15c"}, {"code": "(fn app [arg]\n  (let [x (clojure.string/split arg #\"-\")]\n    (reduce str (first x) (map clojure.string/capitalize (rest x)))))", "problem": 102, "user": "4dd579b5535dae65d5c462ea"}, {"code": "#(let [words (clojure.string/split %1 #\"-\")\n        fw (first words)\n        rw (map clojure.string/capitalize (rest words))\n        atn (into [fw] rw)\n        result (clojure.string/join atn)] result)", "problem": 102, "user": "4faec810e4b081705acca24e"}, {"code": "(fn [s]\n  (apply str\n    (loop [s s r [] f false]\n      (if (nil? s) r\n        (if\n          (= \\- (first s))\n          (recur (next s) r true)\n          (recur\n            (next s)\n            (conj r\n              (if f\n                (Character/toUpperCase (first s))\n                (first s)))\n            false))))))", "problem": 102, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn [xs] (let [ys (.split xs \"-\")] (apply str (cons (first ys) (map #(apply str (.toUpperCase (str (first %))) (rest %)) (rest ys))))))", "problem": 102, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "#(let [col (clojure.string/split % #\"-\")]\n    (apply str (first col)\n        (map clojure.string/capitalize (rest col))))", "problem": 102, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn camel-case [s] \n  (let [words (clojure.string/split s #\"-\")]\n    (if (= 1 (count words)) (first words)\n     (clojure.string/join \"\"  \n      (cons (first words) \n       (map #(str (-> % first str .toUpperCase) (.substring % 1)) (rest words))\n      )   \n     )   \n    )   \n\n   )   \n    \n)", "problem": 102, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "#(let [[f & r] (re-seq #\"\\w+\" %)]\n    (apply str f (map clojure.string/capitalize r)))", "problem": 102, "user": "4f0891a2535dcb61093f6c3b"}, {"code": "(fn [s]\n    (let [[f & r] (.split s \"-\")]\n      (apply str (cons f (map #(str (.toUpperCase (subs % 0 1)) (subs % 1)) r)))))", "problem": 102, "user": "4efd8b67535de96065cf5085"}, {"code": "#(let [words (clojure.string/split %1 #\"-\")] (apply str (first words) (map clojure.string/capitalize (rest words))))", "problem": 102, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "(fn [s]\n  (clojure.string/replace\n    s\n    #\"-[a-z]\"\n    #(clojure.string/upper-case (last %))))", "problem": 102, "user": "4f7f9665e4b033992c121bea"}, {"code": "#(let [l (clojure.string/split % #\"-\")] \n  (apply str (first l) (map clojure.string/capitalize (rest l))))", "problem": 102, "user": "4fa30027e4b081705acca187"}, {"code": "(fn [s] (let [sl (partition-by #(= \\- %) s)\n              h (apply str (first sl))\n              t (remove #(= (list \\-) %) (rest sl))\n              tu (map #(cons (Character/toUpperCase (first %)) (rest %)) t)]\n          (apply str h (map #(apply str %) tu))))", "problem": 102, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn [s] \n  (->> s \n    (reduce (fn [[acc fun] ch] \n      (if (= ch \\-) \n          [acc #(Character/toUpperCase %)]\n          [(conj acc (fun ch)) identity])) \n      [[] identity])\n    first \n    (apply str)))", "problem": 102, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [s]\n  (let [w (clojure.string/split s #\"\\-\")\n        f (first w)\n        r (rest w)]\n    (apply str\n      (cons f\n        (map\n          (fn [x] (let [[h & t] x]\n            (apply str (cons (Character/toUpperCase h) t))))\n             r)))))", "problem": 102, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn cc [st] (apply str (filter #(not= \\- %) \n                (map #(if (= \\- (first %))\n                        (.toUpperCase (str (second %)))\n                        (second %))\n                      (partition 2 1 (str \"x\" st))))))", "problem": 102, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(comp (partial apply str) (fn camel-case [s]\n  (if-let [[x y & xs] (seq s)]\n    (if (= x \\-)\n      (cons (Character/toUpperCase y) (camel-case xs))\n      (cons x (camel-case (if y (cons y xs) xs))))\n    '())))", "problem": 102, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn [string]\n  (clojure.string/replace\n    string\n    #\"-\\w+\"\n    #(clojure.string/capitalize\n      (apply str (rest %)))))", "problem": 102, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "#(let [w (clojure.string/split % #\"-\")] \n  (clojure.string/join (cons (first w) \n                        (map clojure.string/capitalize (rest w)))))", "problem": 102, "user": "4fb3b865e4b081705acca2a2"}, {"code": "#(let [s (clojure.string/split % #\"-\")]\n  (clojure.string/join\n         (concat [(first s)]\n         (map clojure.string/capitalize (rest s)))))", "problem": 102, "user": "4faac363e4b081705acca200"}, {"code": "(fn [s]\n  (letfn [(capitalize [st]\n    (apply str (Character/toUpperCase (first st)) (rest st))\n  )]\n  (apply str (let [all (vec (.split s \"-\"))]\n              (cons (first all) (map capitalize (rest all)))\n  ))\n)\n)", "problem": 102, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "#(let [ x (re-seq #\"[a-zA-Z]+\" %)] \n  (reduce str (cons (first x) \n    (map clojure.string/capitalize (rest x)))))", "problem": 102, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "#(let [[f & r] (.split % \"-\")]\n  (apply str f\n         (mapcat \n           (fn [[f & r]] (concat [(Character/toUpperCase f)] r))\n           r)))", "problem": 102, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [s]\n  (let [strs (clojure.string/split s #\"-\")]\n    (if (> (count strs) 1)\n      (apply str (cons (first strs) (mapcat clojure.string/capitalize (rest strs))))\n      s)))", "problem": 102, "user": "4fa6a491e4b081705acca1bc"}, {"code": "(fn camel[in]\n  ((fn mkcam[acc wrd]\n     (cond\n      (nil? (first wrd)) (apply str acc)\n      (= \\- (first wrd)) (mkcam (conj acc (char (- (int (fnext wrd)) 32))) (next (next wrd)))\n      :else (mkcam (conj acc (first wrd)) (rest wrd)))) [(first in)] (rest in)))", "problem": 102, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn [s]\n  (reduce \n    (fn [ss s]\n      (str ss (clojure.string/upper-case (subs s 0 1)) (subs s 1)))\n    (clojure.string/split s #\"-\")))", "problem": 102, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "#(let [[h & r] (clojure.string/split % #\"-\")]\n  (apply str h (map clojure.string/capitalize r)))", "problem": 102, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn [identifier]\n  (let [parts (clojure.string/split identifier #\"-\")]\n    (apply str\n           (first parts)\n           (map clojure.string/capitalize (rest parts)))))", "problem": 102, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [word]\n  (clojure.string/replace word #\"-.\"\n    #(.toUpperCase (.substring %1 1))))", "problem": 102, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn camel [w]\n  (let [c (clojure.string/split w #\"-\")]\n  (clojure.string/join\n    (cons\n      (first c)\n      (map clojure.string/capitalize (rest c))))))", "problem": 102, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn [s]\n  (clojure.string/join \n    (map-indexed \n      (fn [idx item] \n        (if (zero? idx) \n          item \n          (clojure.string/capitalize item))) \n       (clojure.string/split s #\"-\"))))", "problem": 102, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn [x]\n  (let [parts (clojure.string/split x  #\"-\")]\n  (reduce str (cons (first parts) (map clojure.string/capitalize (rest parts))))\n))", "problem": 102, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn into-camel-case [k]\n  (let [[h & t :as s] (clojure.string/split k #\"-\")]\n    (apply str (flatten [h (map #(clojure.string/capitalize %) t)]))))", "problem": 102, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(fn [x]\n  (loop [s (seq x)\n         f (first x)\n         r \"\"]\n    (cond\n      (not (char? f)) \n        r\n      (= \\- f) \n        (recur \n            (next s) \n            (first (clojure.string/upper-case (apply str (next s))))\n            r\n        )\n      :else\n        (recur\n          (next s) \n          (first (next s)) \n          (str r f)\n        )\n    )\n))", "problem": 102, "user": "4fd1fa71e4b04c3a95aa0418"}, {"code": "#(let [x (clojure.string/split % #\"-\")]\n  (clojure.string/join (cons (first x) (map clojure.string/capitalize (rest x)))))", "problem": 102, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn into-camel-case [s]\n  (let [ws (re-seq #\"\\w+\" s)]\n    (apply str (first ws) (map clojure.string/capitalize (rest ws)))))", "problem": 102, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn [s]\n  (->> (re-seq #\"\\w+\" s)\n       (map-indexed (fn [i v] (if (zero? i) v (str (.toUpperCase (subs v 0 1)) (subs v 1)))))\n    (apply str)))", "problem": 102, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "(fn [ s]\n     (->>\n        (partition 2 1 s)\n        (map (fn [[a b]] (if  (= \\- a) (Character/toUpperCase b) b)))\n        (filter #(not= \\- %))\n        (apply str (first s) )\n         ))", "problem": 102, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "#(let \n  [words (clojure.string/split % #\"-\")\n   capitalize-all (fn [l] )\n  ]\n  (if(= (count words) 1) (first words)\n  (apply str (first words) (map clojure.string/capitalize (next words))))\n)", "problem": 102, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn [s]\r\n  (apply str\r\n  (reduce (let [t (atom false)]\r\n            (fn [acc x]\r\n              (if @t\r\n                (do (swap! t not)\r\n                    (conj acc \r\n                      (Character/toUpperCase x)))\r\n              (if (= x \\-) \r\n                (do (swap! t not) acc) (conj acc x)))))\r\n    [] (seq s))))", "problem": 102, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn [s]\n  (letfn [(capfirst [s]\n            (str (.toUpperCase (str (first s))) (apply str (rest s))))]\n  (let [tokens (.split s \"-\")]\n    (apply str (first tokens)\n               (map capfirst (rest tokens))))))", "problem": 102, "user": "4fde492be4b05e33b9224f8a"}, {"code": "(fn cc [s]\n  (let [[f & r] (clojure.string/split s #\"-\")]\n          (if r\n            (clojure.string/join [f (apply str (mapcat clojure.string/capitalize r))])\n            s)))", "problem": 102, "user": "4faafccde4b081705acca209"}, {"code": "(fn icc [s]\r\n    (loop [s s\r\n           ret []]\r\n        (cond\r\n          (empty? s) (apply str ret)\r\n          (= \\- (first s)) (recur (nnext s) (conj ret (Character/toUpperCase (second s))))\r\n          :else (recur (rest s) (conj ret (first s))))))", "problem": 102, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn [hs] \n  (let [words (clojure.string/split hs #\"[-]+\")]\n    (apply str (cons (first words)\n                     (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "#(clojure.string/replace % #\"-[a-z]\"\n  (fn [x] (clojure.string/upper-case (subs x 1))))", "problem": 102, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn [s]\n  (loop [xs (seq s) result []]\n    (cond (empty? xs) (apply str result)\n          (= (first xs) \\-) (recur (rest (rest xs)) (conj result (Character/toUpperCase (second xs))))\n          true (recur (rest xs) (conj result (first xs))))))", "problem": 102, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "reduce #(if % (if (= \\- (last %))\n (str (apply str (butlast %)) (char (- (int %2) 32)))\n (str % %2)) %2) \"\"", "problem": 102, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn [s]\n  (clojure.string/join \"\" (second\n  (reduce\n    (fn [[preceding-hyphen acc] c]\n      (if (= c \\-)\n          [true acc]\n          (if preceding-hyphen\n              [false (conj acc (.toUpperCase (str c)))]\n              [false (conj acc (str c))])))\n    [false []]\n    s))))", "problem": 102, "user": "4ff35e60e4b0678c553fc350"}, {"code": "(fn [x] (let [[s1 & sr] (clojure.string/split x #\"\\-\")]\r\n  (clojure.string/join (cons s1 (map #(clojure.string/capitalize %) sr)))))", "problem": 102, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn [s]\n  (let [[x & l] (re-seq #\"[a-zA-Z]+\" s)]\n    (->> l\n      (map (fn [s] \n        (apply str \n          (cons (.toUpperCase (str (first s)))\n                (rest s)))))\n      (cons x)\n      (apply str))))", "problem": 102, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn [s]\n  (apply str\n    (let [w (.split s \"-\")]\n      (cons (first w)\n        (map clojure.string/capitalize (rest w))))))", "problem": 102, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn [word]\n  (let [[w & ws] (clojure.string/split word #\"-\")]\n    (apply str w (mapcat #(concat (clojure.string/upper-case (first %)) (rest %)) ws))))", "problem": 102, "user": "4e95c771535dbda64a6f6b39"}, {"code": "(fn [s](reduce #(str % ((fn [[h & t]](str (.toUpperCase (str h))(apply str t))) %2)) (.split s \"-\")))", "problem": 102, "user": "4db016af838c48654951d9b9"}, {"code": "(fn [x]\n  (let [w (re-seq #\"[^-]+\" x)]\n    (str (first w) (reduce str (map #(let [s (seq %)] (str (Character/toUpperCase (first s)) (reduce str (rest s)))) (rest w))))))", "problem": 102, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "#(apply str \n  ((fn camel [s]\n     (when (seq s)\n       (if (= (first s) \\-)\n         (conj (camel (rest (rest s))) (Character/toUpperCase (second s)) )\n         (conj  (camel (rest s)) (first s))))) %))", "problem": 102, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn e [w]\n    (reduce #(if (= (last %1) \\-) \n                   (clojure.string/replace \n                       %1 \"-\" (clojure.string/upper-case  %2)) (str %1 %2)) \"\" w))", "problem": 102, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "#(let [s (.split #\"-\" %) ]\r\n    (apply str\r\n           (flatten (merge\r\n                     (map\r\n                      (fn [s][(str(char(-(int(first s))32))(apply str (rest s)))])\r\n                      (drop 1 s))\r\n                     (take 1 s)))))", "problem": 102, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "(fn [[h & r :as c]] (\n  apply str (cons h (\n    mapcat \n      (fn [a b] (\n        cond\n          (= b \\-) []\n          (= a \\-) [(Character/toUpperCase b)]\n          true [b]\n      ))\n      c\n      r\n  ))\n))", "problem": 102, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn \r\n    [s]\r\n    (let [[f & r] (re-seq #\"\\w+\" s)]\r\n      (reduce #(str % (clojure.string/capitalize %2)) f r)\r\n      ))", "problem": 102, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "#(clojure.string/replace % #\"-(.)\" (fn [[a b]] (.toUpperCase b)))", "problem": 102, "user": "4ef48422535dced4c769f236"}, {"code": "(fn [word]\n    (loop [[f s & rest] word\n           result []]\n      (if (nil? f)\n        (apply str result)\n        (if (= f \\-)\n          (recur rest (conj result (.toUpperCase (str s))))\n          (recur (conj rest s) (conj result f))))))", "problem": 102, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "(fn caseit [s]\n  (let [strings (clojure.string/split s #\"-\")\n        join-camel (fn [[base & more]] (clojure.string/join (into [base] (map clojure.string/capitalize more))))] \n    (join-camel strings)))", "problem": 102, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn [s]\n    (let [sq (re-seq #\"[a-zA-Z]+\" s)]\n      (if (= () (rest sq)) \n             \t      (first sq)\n\t\t      (str (first sq) (apply str (map clojure.string/capitalize (rest sq)))))))", "problem": 102, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (% 1))))", "problem": 102, "user": "500933a6e4b046cdb195e074"}, {"code": "(letfn \n  [(capitalize [s] (str (.toUpperCase (subs s 0 1)) (subs s 1)))]\n  (fn [name]\n    (let [words (re-seq #\"[^-]+\" name)]\n      (str (first words) (apply str (map capitalize (rest words)))))))", "problem": 102, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "#(reduce str (map-indexed (fn [i item]\n               (if (= i 0)\n                 item\n                 (clojure.string/capitalize item))) (clojure.string/split % #\"-\")))", "problem": 102, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn [s] \n  (let [parts (re-seq #\"\\w+\" s)]\n    (apply str (first parts) (map clojure.string/capitalize (rest parts)))))", "problem": 102, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-\\w\"\n                          (fn [s] (clojure.string/upper-case (subs s 1)))))", "problem": 102, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "#(clojure.string/replace % #\"-.\" (comp clojure.string/upper-case second))", "problem": 102, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn [x]\n  (let [c #(conj (next %) (Character/toUpperCase (first %)))\n  e (take-nth 2 (partition-by #(= % \\-) x))]\n    (apply str (concat (first e) (mapcat c (next e))))))", "problem": 102, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "(fn [s]\r\n (let [a (clojure.string/split s #\"-\")]\r\n  (apply str (cons (first a) \r\n              (map #(let [b (map str %)]\r\n                     (apply str (cons (.toUpperCase (first b)) (rest b))))\r\n               (rest a))))))", "problem": 102, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn [s]\n  (apply str \n    (let [[f & r] (clojure.string/split s #\"-\")]\n      (cons f\n        (mapcat clojure.string/capitalize r)))))", "problem": 102, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn [s] (let [ws (clojure.string/split s #\"-\")\r\n              cs (map clojure.string/capitalize (rest ws))]\r\n          (clojure.string/join \"\" (cons (first ws) cs))))", "problem": 102, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn\n  [s]\n  (clojure.string/join\n    (map-indexed\n      #(if (not= %1 0)\n         (clojure.string/capitalize %2)\n         %2)\n      (clojure.string/split s #\"-\"))))", "problem": 102, "user": "500e91aae4b00fff93030f99"}, {"code": "(fn __ [s]\n  (let [w (clojure.string/split s #\"-\")]\n       (clojure.string/join \"\"\n        (concat (first w)\n                (map clojure.string/capitalize (rest w))))))", "problem": 102, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn [s]\n  (letfn [(title [s] (apply str (Character/toUpperCase (first s)) (rest s)))]\n    (let [words (re-seq #\"[^-]+\" s)]\n      (apply str (first words) (map title (rest words))))))", "problem": 102, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn intoCamelCase [s]\r\n  (apply str\r\n         (map #(if-let [x (second %)]\r\n                 (Character/toUpperCase x) %)\r\n              (re-seq #\"-?.\" s))))", "problem": 102, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn to-camel-case [s]\n  (let [parts (clojure.string/split s #\"-\")]\n    (apply str (cons (first parts) (map clojure.string/capitalize (rest parts))))))", "problem": 102, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn camel-case [s]\n    (let [words (re-seq #\"\\w+\" s)\n          first-word (first words)\n          rest-words (rest words)]\n      (apply str (concat first-word\n                         (apply str (flatten (interleave\n                                              (map #(Character/toUpperCase (.charAt % 0)) rest-words)\n                                              (map rest rest-words))))))))", "problem": 102, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn [n] (clojure.string/join (#(cons (first %) (map clojure.string/capitalize (rest %))) (clojure.string/split n #\"-\"))))", "problem": 102, "user": "4ff76effe4b0678c553fc390"}, {"code": "(fn [word]\n  (let [words (.split word \"-\")]\n    (clojure.string/join \n      (cons \n        (first words) \n        (map \n          #(str (.toUpperCase (.substring % 0 1)) (.substring % 1))\n          (rest words))))))", "problem": 102, "user": "4dca8b6d535d5973398f9288"}, {"code": "(fn [x]\n\n  (clojure.string/replace x #\"-[a-z]\" #(clojure.string/upper-case (second %1)))\n\n\n  )", "problem": 102, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "(fn [s]\n  (clojure.string/replace\n    s\n    #\"-\\w\"\n    #(clojure.string/upper-case (subs % 1))))", "problem": 102, "user": "501284d9e4b030d97e4db710"}, {"code": "(fn [w] (reduce\n  #(str % (clojure.string/capitalize %2))\n  (re-seq #\"\\w+\" w)))", "problem": 102, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn cc [s]\r\n  (let [ sq (re-seq #\"[^-]+\" s)]\r\n    (str (first sq)\r\n     (->>\r\n      (rest sq)\r\n      (map #(re-seq #\".\" %) )\r\n      (map #(concat [ (.toUpperCase (first %))] (rest %)))\r\n      (map #(apply str %) )\r\n      (apply str)\r\n      ))\r\n    )\r\n  )", "problem": 102, "user": "4febb4dae4b0681fd128dc98"}, {"code": "#(let [[x & s] (re-seq #\"\\w+\" %)]\n  (apply str x (map clojure.string/capitalize s)))", "problem": 102, "user": "50166470e4b052339a490e76"}, {"code": "(fn [word]\n   (let [first2UpperCase (fn [x] \n                           (. x replace (. x charAt 0) (. (. x toUpperCase) charAt 0)))\n         stringArray (. word split \"-\") \n         ]          \n     (areduce stringArray i ret \"\" \n              (str ret (if (= i 0) \n                         (aget stringArray i) \n                         (first2UpperCase (aget stringArray i))))\n              )      \n     )      \n   )", "problem": 102, "user": "4fcf5292e4b03432b189f40e"}, {"code": "#(let [a (clojure.string/split % #\"-\")]\n   (apply str (first a)\n     (map clojure.string/capitalize (rest a))))", "problem": 102, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn [id]\n  (let [[f & r] (.split id \"-\")]\n    (apply str f \n      (apply str \n        (map \n          #(apply str (format \"%S\" (first %)) (rest %)) r)))))", "problem": 102, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "(fn [s]\n  (let [[a & b] (clojure.string/split s #\"-\")]\n    (apply str\n           (cons a\n                 (map\n                  (fn [x] (apply str\n                                 (cons (Character/toUpperCase (first x))\n                                       (rest x))))\n                  b)))))", "problem": 102, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn [s]\n  (if (re-matches #\".*-.*\" s)\n      (let [sp (re-seq #\"[^-]\\w+\" s)]\n        (apply str (cons (first sp) (mapcat #(cons (.toUpperCase (str (first %))) (rest %)) (rest sp)))))\n      s))", "problem": 102, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn camel [s]\n  (reduce \n    #(if (= (last %1) \\-) (str (apply str (butlast %1)) (Character/toUpperCase %2))\n    (str %1 %2)) \"\" s))", "problem": 102, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn __ [s]\n  (let [split-s (clojure.string/split s #\"-\")]\n      (clojure.string/join (cons (first split-s)\n                           (map \n                            clojure.string/capitalize \n                            (rest split-s))))))", "problem": 102, "user": "4fa719c0e4b081705acca1bf"}, {"code": "#(let [[w & ws] (clojure.string/split % #\"-\")]\n  (apply str\n    (cons w (map clojure.string/capitalize ws))))", "problem": 102, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn camel [s]\n  (let [f #(reduce str (cons (% (first %2)) (rest %2)))\n        upper (partial f #(Character/toUpperCase %))\n        lower (partial f #(Character/toLowerCase %))]\n    (lower (reduce str (map upper (re-seq #\"[^-]+\" s))))))", "problem": 102, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn [i] (apply str(clojure.string/replace i #\"-(.)\" #(clojure.string/upper-case (get % 1)) )))", "problem": 102, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn into-camel [s]\n  (let [xs (clojure.string/split s #\"-\")]\n\t\t(apply str (first xs) (map #(str (.toUpperCase (str (first %))) (apply str (rest %))) (rest xs)))))", "problem": 102, "user": "501c1492e4b086d93747d180"}, {"code": "#(let [[f & r] (.split % \"-\")]\r\n  (apply str f (map (fn [[a & b]]\r\n     (apply str (Character/toUpperCase a) b)) r)))", "problem": 102, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [s] (let [[x & xs] (.split #\"-\" s)]\n  (apply str (cons x (mapcat\n  #(cons \n       (. Character toUpperCase (first %))\n       (rest %))\n  xs)))))", "problem": 102, "user": "503917a0e4b088a6a14ca763"}, {"code": "#(apply format (cons (.replaceAll % \"-.\" \"%C\") \n  (for [[f s] (re-seq #\"-.\" %)] s)))", "problem": 102, "user": "4dada16fc9a9d6ed2699dc57"}, {"code": "#(let [[head & tail] (re-seq #\"\\w+\" %)] (apply str head (map clojure.string/capitalize tail)))", "problem": 102, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn cc \n          [s] (apply str (remove #(= % \\-)  (reductions #(if (= % \\-) (Character/toUpperCase %2) %2) s))))", "problem": 102, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn [a]\n  (clojure.string/join\n    (let\n      [ s (re-seq #\"\\w+\" a)]\n      (cons\n        (first s)\n        (map\n          clojure.string/capitalize\n          (rest s))))))", "problem": 102, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "problem": 102, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn [s]\n  (clojure.string/join\n    (let [tokens (clojure.string/split s #\"-\")]\n      (cons \n        (first tokens) \n        (map \n          #(apply str (cons (Character/toUpperCase (first %)) (rest %))) \n          (rest tokens))))))", "problem": 102, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "(fn camel- [s]\n  ^{:doc \"102. Write a function which takes lower-case                                                                                                                  \n  hyphen-separated strings and converts them to camel-case strings.\"}\n  (let [w (clojure.string/split s #\"\\-+\")]\n    (apply str (first w) (map clojure.string/capitalize (rest w)))))", "problem": 102, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn [st] \r\n   (let [ls (clojure.string/split st #\"-\")]\r\n     (apply str (cons (first ls)\r\n     (map\r\n     (fn [x]\r\n       (str (.toUpperCase\r\n              (str (first x)))\r\n            (apply str (rest x))))            \r\n   (rest ls))))))", "problem": 102, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn cc [s]\n  (let [[x & xs] (clojure.string/split s #\"-\")]\n    (apply str x (map clojure.string/capitalize xs))))", "problem": 102, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [s]\r\n  (apply str \r\n          (map #(if (< 1 (count %))\r\n                  (. (str (second %)) toUpperCase)\r\n                  %)\r\n               (re-seq #\"-?\\w\" s))))", "problem": 102, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn [input]\n  (clojure.string/replace input\n                          #\"-([a-zA-Z])\"\n                          #(clojure.string/capitalize\n                            (second %))))", "problem": 102, "user": "5014754de4b094324338f8e5"}, {"code": "(fn [s]\n  (let [[f & r] (clojure.string/split s #\"-\")\n        cr (map #(apply str (Character/toUpperCase (nth % 0)) (drop 1 %)) r)]\n    (apply str f cr)))", "problem": 102, "user": "50435852e4b034ff00315d22"}, {"code": "(fn [s]\n  (let [splitted (.split s \"-\")]\n    (apply str (first splitted)\n      (map clojure.string/capitalize (rest splitted)))))", "problem": 102, "user": "5012ec0ae4b0c87326002230"}, {"code": "#(reduce (fn [s1 s2] (str s1 (clojure.string/capitalize s2))) (clojure.string/split % #\"-\"))", "problem": 102, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn [w]\r\n   (apply str (second\r\n          (reduce\r\n            (fn [[flag acc] x]\r\n              (if (= \\- x)\r\n                [true acc]\r\n                [false (if flag\r\n                  (conj acc (first (.. x toString toUpperCase)))\r\n                  (conj acc x))]))\r\n            [false []]\r\n          (seq w)))))", "problem": 102, "user": "4dc97aec535d5973398f9284"}, {"code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[_ c]] (clojure.string/upper-case c)))", "problem": 102, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn [s] (clojure.string/replace s #\"-[a-z]\" #(clojure.string/upper-case (subs % 1 2))))", "problem": 102, "user": "503b6995e4b07a1917cc34dd"}, {"code": "#(let [[x & xs] (clojure.string/split % #\"-\")] (apply str (cons x (map clojure.string/capitalize xs))))", "problem": 102, "user": "50479524e4b0371827a27bc4"}, {"code": "#(clojure.string/replace\n % #\"-([A-z])\"\n (comp clojure.string/capitalize second))", "problem": 102, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn [s]\n  (letfn [(ucFirst [[x & xs]] (apply str (concat (.toUpperCase (str x)) xs)))]\n    (let [[w & ws] (filter (fn [[x & xs]] (not= x \\-)) (partition-by (fn [c] (= c \\-)) s))]\n      (apply str (concat [(apply str w)] (map ucFirst ws))))))", "problem": 102, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn [s]\n  (let [[h & t] (clojure.string/split s #\"\\-\")]\n    (clojure.string/join (cons h (map clojure.string/capitalize t)))))", "problem": 102, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [s]\n  ((reduce\n    (fn [f c]\n      (if (= c \\-)\n        #(str (f (Character/toUpperCase %)))\n        #(str (f c) %)))\n    identity\n    s) \"\"))", "problem": 102, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn [s]\r\n   (apply str\r\n          (for [t (partition 2 1 (str \"0\" s))] (if (= \\- (second t)) \"\"\r\n            (if (= \\- (first t))\r\n              (Character/toUpperCase (second t)) (second t))))))", "problem": 102, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn [s] (clojure.string/replace s #\"-(.)\" #(.toUpperCase (%1 1))))", "problem": 102, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "(fn [s]\n  (clojure.string/replace s\n                          #\"-.\"\n                          #(-> (second %) str .toUpperCase)))", "problem": 102, "user": "50586354e4b06522596eba78"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-(\\w)\" \n     (fn [[_ a]] (clojure.string/upper-case a))))", "problem": 102, "user": "4efec33f535dcb61093f6a2a"}, {"code": "(fn [s]\n  (let [splits (clojure.string/split s #\"-\")\n        up (fn [c] (java.lang.Character/toUpperCase c))]\n    (apply str\n      (first splits)\n      (map\n        #(apply str (up (first %)) (rest %))\n        (rest splits)))))", "problem": 102, "user": "50427899e4b0add3005c0fc2"}, {"code": "#(first (reduce (fn [[s h] c]\n           (cond (= c \\-) [s true]\n                 h [(str s (Character/toUpperCase c)) false]\n                 :else [(str s c) false])) [\"\" false] %))", "problem": 102, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn [w]\n  (case w\n    \"multi-word-key\"\n    \"multiWordKey\"\n    w))", "problem": 102, "user": "4f8c4ee8e4b02e764a0a5194"}, {"code": "(fn [x] \n  (let [words (partition-by #(= % \\-) x) \n        fstw (apply str (first words))\n        real-ws (map (partial apply str) (next (take-nth 2 words)))]\n    (str fstw \n      (apply str \n        (map #(str (.toUpperCase (str (first %))) (apply str (next %))) real-ws)))))", "problem": 102, "user": "503e7f06e4b06c4e0e1fa268"}, {"code": "(fn [s] \n  (->> (partition-all 2 1 (cons nil s))\n       (map (fn [[x y]]\n              (if (= \\- x) \n                  (clojure.string/upper-case y)\n                  y)))\n       (filter #(not= \\- %))\n       (apply str)))", "problem": 102, "user": "50435689e4b034ff00315d21"}, {"code": "(fn [s] (apply str\n       (map-indexed\n         #(if (zero? %) %2 (clojure.string/capitalize %2))\n         (clojure.string/split s #\"-\"))))", "problem": 102, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn [s]\n  (let [s (clojure.string/split s #\"-\")\n        f (first s)\n        t (map clojure.string/capitalize (rest s))]\n    (apply str (cons f t))))", "problem": 102, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [x]\n  (let [words (re-seq #\"\\w+\" x)]\n    (apply str (cons (first words) (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn [s]\n  (let [ss (clojure.string/split s #\"-\")\n        uc #(apply str (cons (Character/toUpperCase (first %)) (rest %)))]\n    (apply str (cons (first ss) (map uc (rest ss))))))", "problem": 102, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [w]\n  (let [ws (seq (.split w \"-\"))]\n    (apply str\n      (cons\n        (first ws)\n        (map #(clojure.string/capitalize %) (rest ws))))))", "problem": 102, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn [s]\r\n  (let [ w (clojure.string/split s #\"-\") ]\r\n    (str (first w) (apply str (map clojure.string/capitalize (rest w))))))", "problem": 102, "user": "5046b003e4b011c5dfee7727"}, {"code": "#(let [l (clojure.string/split % #\"-\")]\n(clojure.string/join \n(cons (first l) (map clojure.string/capitalize (rest l)))))", "problem": 102, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-(\\w)\" \n    (fn [[_ c]] (.toUpperCase c))))", "problem": 102, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "#(apply str\n  (let [s (re-seq #\"\\w+\" %)]\n    (cons (first s)\n          (map (fn [w]\n                (str (.toUpperCase (str (first w)))\n                    (apply str (next w))))\n            (next s)))))", "problem": 102, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-(.)\" #(clojure.string/upper-case (second %1))))", "problem": 102, "user": "4ee9d697535d93acb0a66895"}, {"code": "(fn [s]\n          (let [parts (re-seq #\"\\w+\" s)]\n            (apply str (first parts) (map clojure.string/capitalize (rest parts)))))", "problem": 102, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "(fn intoCamelCase [x]\n  (loop [x x res '[]]\n    (cond (empty? x) (apply str res)\n          (= \\- (first x)) (recur (nnext x) (conj res (clojure.string/upper-case (second x))))\n          :else (recur (rest x) (conj res (first x)))\n    )\n  )\n)", "problem": 102, "user": "50588af1e4b06522596eba7d"}, {"code": "#(reduce (fn [x [a & b]] (apply str x (.toUpperCase (str a)) b)) (.split % \"-\"))", "problem": 102, "user": "4f045946535dcb61093f6bba"}, {"code": "#(let [[x & xs] (clojure.string/split % #\"-\")]\n  (apply str x (map clojure.string/capitalize xs)))", "problem": 102, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "(fn [s]\r\n  (reduce\r\n    #(str % (clojure.string/capitalize %2))\r\n    (.split s \"-\")))", "problem": 102, "user": "50618c62e4b0a30dc9a35d33"}, {"code": "#(let [ws (clojure.string/split % #\"-\")] (apply str (first ws) (map (fn [w] (apply str (clojure.string/upper-case (first w)) (rest w))) (rest ws))))", "problem": 102, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "#(apply str (map (fn [[a b]] (if (= b \\-)\n                               \"\"\n                               (if (= a \\-)\n                                 (Character/toUpperCase b)\n                                 b)))\n                  (partition 2 1 (str \" \" %))))", "problem": 102, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn intoCamelCase [x]\r\n  (clojure.string/replace x #\"-\\w\" #(str (second ( .toUpperCase %)))))", "problem": 102, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn  [s]\n  (apply str (map-indexed #(if (> %1 0)\n                  (clojure.string/capitalize %2)\n                  %2)\n               (clojure.string/split s #\"-\"))))", "problem": 102, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn c [line]\n  (reduce (fn [a [first-char & word]]\n            (apply str a (.toUpperCase (str first-char)) word)) \n          (.split line \"-\")))", "problem": 102, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "(fn [s]\r\n  (reduce str\r\n    ((fn [[h & r] l]\r\n\t     (cond (nil? h) l\r\n\t\t   (empty? r) (conj l h)\r\n\t\t   (= h \\-) (recur (rest r) (conj l (Character/toUpperCase (first r))))\r\n\t\t   :else    (recur r (conj l h))))\r\n\t   s [])))", "problem": 102, "user": "507437c2e4b054001656acd0"}, {"code": "(fn [s]\n  (let [parts (clojure.string/split s #\"-\")]\n\t\t(str\n\t\t\t(first parts)\n\t\t\t(reduce\n\t\t\t\tstr\n\t\t\t\t(map\n\t\t\t\t\tclojure.string/capitalize\n\t\t\t\t\t(rest parts))))))", "problem": 102, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn [s]\n    (let [[word & words] (clojure.string/split s #\"-\")]\n      (println word words)\n      (apply str word (map #(clojure.string/capitalize %) words))))", "problem": 102, "user": "50763574e4b0a894bb95bf3d"}, {"code": "#(clojure.string/replace \n  %\n  #\"-.\"\n  (fn [[_ l]] (.toUpperCase (str l))))", "problem": 102, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn [s]\n  (let [xs (clojure.string/split s #\"-\")]\n    (apply str\n      (reduce\n        #(concat %1 (clojure.string/capitalize %2))\n        xs\n      )\n    )\n  )\n)", "problem": 102, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn [s]\r\n(clojure.string/replace s \r\n  #\"-(.)\" (fn [m]\r\n            (str (Character/toUpperCase (first (nth m 1)))))))", "problem": 102, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn camcase [s]\n  (let [split-ver (clojure.string/split s #\"-\")]\n    (apply str\n           (first split-ver)\n           (map clojure.string/capitalize (rest split-ver)))))", "problem": 102, "user": "502a4fdfe4b09dd42f6f3644"}, {"code": "#(let [[h & t] (clojure.string/split % #\"-\")]\n  (clojure.string/join (cons h (map clojure.string/capitalize t))))", "problem": 102, "user": "503a234de4b088a6a14ca76d"}, {"code": "#(let [[fs & rss] (clojure.string/split % #\"-\")]\n     (clojure.string/join (cons fs (map clojure.string/capitalize rss))))", "problem": 102, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn [s]\n  (apply str\n    (remove #(= % \\-)\n      (reduce #(conj % (if (= (last %) \\-) (Character/toUpperCase %2) %2)) [] s))))", "problem": 102, "user": "505d4b21e4b0e6aca564be07"}, {"code": "(fn [s]\n   (let [words (clojure.string/split s #\"-\")]\n     (clojure.string/join (cons (first words) (map clojure.string/capitalize (rest words))))\n     ))", "problem": 102, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "#(let [[x & y] (re-seq #\"[^-]+\" %)] (apply str x (map clojure.string/capitalize y)))", "problem": 102, "user": "5088082ae4b0198722bd9854"}, {"code": "#(let [s (.split % \"-\")] \n   (apply str (cons (first s) \n(map clojure.string/capitalize (next s)))))", "problem": 102, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn [w]\n  (let [[h & r] (clojure.string/split w #\"-\")]\n    (clojure.string/join \"\"\n      (cons h (map clojure.string/capitalize r)))))", "problem": 102, "user": "504c8165e4b09724c857af31"}, {"code": "(fn [s] (let [l (clojure.string/split s #\"-\")] \n   (clojure.string/join (cons (first l) (map clojure.string/capitalize (rest l))))))", "problem": 102, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn [s]\n  (let [[fst & rst] (clojure.string/split s #\"-\")]\n    (clojure.pprint/cl-format nil \"~A~{~:(~A~)~}\" fst rst)))", "problem": 102, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn [s]\n  (reduce #(str %1 (str (clojure.string/upper-case (subs %2 0 1)) (subs %2 1))) (clojure.string/split s #\"-\")))", "problem": 102, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "(fn [s]\n  (let [[fpart & parts] (re-seq #\"\\w+\" s)\n        uparts \n        (map (fn [[f & r]] \n                (apply str (Character/toUpperCase f) r))\n              parts)\n        ]\n    (apply str fpart uparts)))", "problem": 102, "user": "50901b2ee4b0ea685a20f774"}, {"code": "#(apply str ((fn camel [n cap o]\n   (if (= (count o) 0) n\n     (let [[s & r] o]\n       (if (= s \\-) (camel n true r)\n         (camel (conj n (if cap (clojure.string/upper-case s) s)) false r))))) [] false %))", "problem": 102, "user": "505dcfc8e4b0e6aca564be0d"}, {"code": "(fn CamelCase[s]\r\n  (let [x (-> s\r\n\t(clojure.string/split #\"-\")\r\n   ((fn new[x](cons (first x) (map #(apply str (cons (clojure.string/upper-case (first %)) (rest %))) (rest x))))))]\r\n  (apply str x)))", "problem": 102, "user": "5065bd94e4b0148eb3925aed"}, {"code": "(fn func [hypStr]\r\n  (apply str (reduce #(if (= (last %) \\-)\r\n             (conj (vec (butlast %)) (char (- (int %2) 32))) (conj % %2))\r\n          [] hypStr)))", "problem": 102, "user": "505dd5c4e4b0e6aca564be0e"}, {"code": "(fn [s]\r\n          (let [toks (seq (.split s \"-\"))\r\n                tup (fn [ss] (str (.toUpperCase (subs ss 0 1)) (subs ss 1)))]\r\n            (apply str (first toks)\r\n                 (map tup (rest toks)))))", "problem": 102, "user": "4e8768f6535dceadca469850"}, {"code": "(fn camel [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (clojure.string/join (concat (first words) (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn [x] (clojure.string/replace x #\"-(\\S)\" #(clojure.string/upper-case (second %1))))", "problem": 102, "user": "50646c01e4b007509339a58b"}, {"code": "(fn [w]\n  (let [xs (re-seq #\"\\w+\" w)\n        ys (map clojure.string/capitalize (drop 1 xs))]\n    (clojure.string/join (cons (first xs) ys))))", "problem": 102, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn [s] (clojure.string/replace s #\"-.\" #(clojure.string/upper-case (get % 1))))", "problem": 102, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn [s] (clojure.string/replace \n s\n #\"-(.)\"\n #(.toUpperCase (second %))))", "problem": 102, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "(fn [s] (clojure.string/replace s \n                        #\"-[a-z]\"\n                        #(str (Character/toUpperCase (second %)))))", "problem": 102, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [x]\n  (loop [src x temp \"\" u false]\n    (cond (empty? src) temp\n          (= \\- (first src)) (recur (rest src) temp true)\n          (true? u) (recur (rest src) (str temp (clojure.string/upper-case (first src))) false)\n          :else (recur (rest src) (str temp (first src)) false))))", "problem": 102, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn [x]\n  (replace x #\"-(\\w)\" #(capitalize (nth %1 1))))", "problem": 102, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn to-camel [s]\n    (reduce (fn [s [match letter]]\n              (clojure.string/replace \n               s match (clojure.string/upper-case letter)))\n            s\n            (for [[match letter] (re-seq #\"-(.)\" s)]\n              [match letter])))", "problem": 102, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn camel-case [s]\n  (let [[x & more] (clojure.string/split s #\"-\")]\n    (apply str x (map clojure.string/capitalize more))))", "problem": 102, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn [w] \r\n  (apply str \r\n    (filter #(not= % \\-)(reduce \r\n    #(conj % (if (= (last %) \\-) (.toUpperCase (str %2)) %2)) [] w ))))", "problem": 102, "user": "5062bc46e4b05ac47bc68d68"}, {"code": "reduce #(if (= \\- (last %)) (str (.substring % 0 (dec (count %))) (Character/toUpperCase %2)) (str % %2)) \"\"", "problem": 102, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn [s]\n  (let [[w & ws] (.split s \"-\")]\n    (apply str w (map (fn [[c & cs]]\n                        (apply str (Character/toUpperCase c) cs))\n                      ws))))", "problem": 102, "user": "4ed0e139535d44c135fd68c7"}, {"code": "(fn [s]\n  (apply str\n    ((fn camel[l]\n       (if (empty? l) []\n         (if (= (first l) \\-)\n           (cons (.toUpperCase (.toString (second l)))\n                 (camel (drop 2 l)))\n           (cons (first l)\n                 (camel (rest l)))))) (seq s))))", "problem": 102, "user": "4eca7a87535d6d7199dd3705"}, {"code": "(fn [s]\n  (clojure.string/replace\n    s\n    #\"-(.)\"\n    #(clojure.string/upper-case (second %))\n  )\n)", "problem": 102, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn [x]\n  (clojure.string/replace x #\"-[a-z]\" #(.toUpperCase (str (second %1)))))", "problem": 102, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [s]\n  (let [p (re-seq #\"\\w+\" s)]\n    (apply str (cons (first p) (map clojure.string/capitalize (next p))))))", "problem": 102, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "(fn [s]\n  (let [words (.split s \"-\")\n        camel #(str (.toUpperCase (subs % 0 1)) (subs % 1))]\n    (reduce\n      #(str %1 (camel %2))\n      (first words)\n      (rest words))))", "problem": 102, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn [s] (apply str \n  (let [w (re-seq #\"\\w+\" s)] \n    (cons \n      (first w) \n      (map #(str (.toUpperCase (subs % 0 1)) (subs % 1)) (next w))\n    )\n  )\n))", "problem": 102, "user": "5098bcfee4b0cae2931060a1"}, {"code": "(fn [s] \r\n  (clojure.string/replace \r\n    s #\"-\\w\" #(.toUpperCase (str (second %)))))", "problem": 102, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn [s]\n  (let [split (clojure.string/split s #\"-\")]\n    (str\n     (first split)\n     (clojure.string/join\n       (map\n        clojure.string/capitalize\n        (rest split))))))", "problem": 102, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn [s]\n  (let [parts (clojure.string/split s #\"-\")]\n    (apply str (first parts) (map clojure.string/capitalize (rest parts)))))", "problem": 102, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn [s]\n  (reduce #(if (empty? %) %2\n               (str % (clojure.string/capitalize %2)))\n          (clojure.string/split s #\"-\")))", "problem": 102, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn to-camelcase [s]\n  (let [capitalize (fn [s]\n                     (apply str\n                            (cons (Character/toUpperCase (first (seq s)))\n                                  (rest (seq s)))))\n        string-list (seq (.split s \"-\"))]\n    (apply str\n           (first string-list)\n           (map capitalize (rest string-list)))))", "problem": 102, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn [s]\n  (let [spl (clojure.string/split s #\"\\-\")]\n    (apply str (first spl) (map clojure.string/capitalize (rest spl)))))", "problem": 102, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn [input-key]\n  (let [split-key (clojure.string/split input-key #\"[-]+\")\n        capitalized-list (map clojure.string/capitalize (rest split-key))]\n    (clojure.string/join \n      (cons\n        (first split-key)\n        capitalized-list))))", "problem": 102, "user": "4ec12516535dfed6da9c6da7"}, {"code": "(fn [s]\n    (let [ss (re-seq #\"\\w+\" s)]\n      (clojure.string/join\n       \"\"\n       (cons (first ss)\n             (map clojure.string/capitalize (rest ss))))))", "problem": 102, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [s]\n  (reduce #(str %1 (clojure.string/capitalize %2)) (.split s \"-\")))", "problem": 102, "user": "4fb54e50e4b081705acca2bb"}, {"code": "(fn [w] (let [[fw & rws] (.split w \"-\")]\n          (apply str (cons fw\n                           (map (fn [[f & r]]\n                                  (apply str (Character/toUpperCase f) r)) rws)))))", "problem": 102, "user": "4fccb31be4b0ee37620e1868"}, {"code": "#(let [s (re-seq #\"[^-]+\" %)]\n  (apply str [(first s) (apply str (map clojure.string/capitalize (rest s)))]))", "problem": 102, "user": "5027b41ee4b01614d1633fee"}, {"code": "#(let [[h & r] (re-seq #\"\\w+\" %)]\n  (apply str h (map clojure.string/capitalize r)))", "problem": 102, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn[x] (clojure.string/replace x #\"-([a-zA-Z])\" #(clojure.string/upper-case (second %))))", "problem": 102, "user": "506406c8e4b075d771da6f9f"}, {"code": "#(let [s (clojure.string/split % #\"-\")]\n   (apply str (first s)\n          (map clojure.string/capitalize (rest s))))", "problem": 102, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn foo [s]\n  (cond\n    (= s '()) nil\n    (= (first s) \\-) (str (clojure.string/upper-case (first (rest s)))\n                  (foo (rest (rest s))))\n    true (str (first s) (foo (rest s)))\n    )\n  )", "problem": 102, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "(fn [st]\n  (apply str\n    (let [words (re-seq #\"\\w+\" st)]\n      (cons\n        (first words)\n        (map\n          (fn [s]\n            (apply str\n              (cons\n                (Character/toUpperCase (first s))\n                (rest s))))\n          (rest words))))))", "problem": 102, "user": "4fb1325de4b081705acca276"}, {"code": "(fn [str]\n  (let [words (clojure.string/split str #\"-\")]\n\t\t(clojure.string/join \n\t\t\t(concat [(first words)] (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "{\"something\" \"something\"\n \"multi-word-key\" \"multiWordKey\"\n \"leaveMeAlone\" \"leaveMeAlone\"}", "problem": 102, "user": "50a83315e4b054305ba5a830"}, {"code": "#(apply str (reduce (fn [p [f & r]]\r\n  (concat p\r\n    (conj r (.toUpperCase (str f)))))\r\n  (re-seq #\"[^-]+\" %)))", "problem": 102, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn [word]\n  (apply str \n      (let [[w & ws] (re-seq #\"[A-Z]?[a-z]+\" word)] \n          (cons \n            (clojure.string/lower-case w) \n            (map clojure.string/capitalize ws)))))", "problem": 102, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "(fn intoCamelCase [s]\n  (let [[f & r] (clojure.string/split s  #\"-\")]\n    (apply str f (map clojure.string/capitalize r))))", "problem": 102, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn [s] \n    (let [splitstr (clojure.string/split s #\"-\" )\n          firstword (first splitstr)\n          restwords (rest splitstr)\n          restWordsTUC (map #(apply str ( cons (Character/toUpperCase (first %1)) (rest %1))) restwords)\n          ]\n      \n      (apply str (cons firstword restWordsTUC))\n      ))", "problem": 102, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn [w]\r\n  (clojure.string/replace w #\"-[a-z]\" #(.toUpperCase (str (second %)))))", "problem": 102, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn[s] (let [ a (clojure.string/split s #\"-\") ] (apply str (first a) (map clojure.string/capitalize (rest a))) ) )", "problem": 102, "user": "50b25f2ce4b03ea88043355f"}, {"code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[_ l]] (.toUpperCase l)))", "problem": 102, "user": "500aa15ee4b03d00572d2d76"}, {"code": "#(let [[x & xs] (clojure.string/split % #\"-\")] (clojure.string/join (conj (map clojure.string/capitalize xs) x)))", "problem": 102, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn camel-case [string]\n  (letfn\n    [(upcase [string]\n      (let [upmap (zipmap (map char (concat (range 97 123))) (map char (concat (range 65 91))))]\n        (apply str (concat (replace upmap (str (first string))) (rest string)))))]\n   (let [words (re-seq #\"\\w+\" string)]\n     (apply str (first words) (map upcase (rest words))))))", "problem": 102, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "(fn [s] (clojure.string/replace s #\"-([a-z])\" #(-> % second clojure.string/upper-case)))", "problem": 102, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn test120 [st]\n  (let [[x & more] (clojure.string/split st #\"-\")]\n    (reduce\n     #(str %1 (clojure.string/capitalize %2))\n     x\n     more)))", "problem": 102, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn [s]\n  (let [indexes (set (keep-indexed #(if (= \\- %2) %1) s))]\n    (clojure.string/replace (apply str (map-indexed\n      #(if (indexes (- % 1)) (Character/toUpperCase %2) %2) s)) \"-\" \"\")))", "problem": 102, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "(fn [s] (clojure.string/replace s #\"-.\" #(str (get (clojure.string/upper-case %) 1))))", "problem": 102, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn [s]\n          (apply str (let [r (.split #\"-\" s)\n                          a (first r)\n                          b (rest r)]\n                          (concat a (map #(apply str (concat (.toUpperCase (str (first %))) (rest %)))                     \n                                         b)))))", "problem": 102, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn icc [s]\n  (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (second %))))", "problem": 102, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn [s]\n    (apply str\n      (reduce\n        (fn [coll b] (if (= \\- (last coll)) (conj (vec (butlast coll)) (Character/toUpperCase b)) (conj coll b)))\n        []\n        (seq s))))", "problem": 102, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn my-camel-case [loc-string]\n          (cond (empty? loc-string) \"\"\n                (= (first loc-string) \\-) (str (clojure.string/upper-case (first (rest loc-string)))\n                                               (my-camel-case (rest (rest loc-string))))\n                :else (str (first loc-string) \n                           (my-camel-case (rest loc-string)))))", "problem": 102, "user": "4feb055ae4b0140c20fb9c14"}, {"code": "(fn [st]\n  (let [words (clojure.string/split st #\"-\")]\n    (clojure.string/join (cons (first words) (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "4ff769bce4b0678c553fc38f"}, {"code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" (fn [[m c]] (clojure.string/capitalize c))))", "problem": 102, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn [s] (clojure.string/replace s #\"-[a-z]\" #(.toUpperCase (subs % 1))))", "problem": 102, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn[s]\n  (let [split (seq (.split s \"-\" 0))]\n    (str (first split) (apply str (map #(str (-> % (.substring 0 1) .toUpperCase) (.substring % 1)) (rest split))))))", "problem": 102, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "(fn [s]\n  (let [words (seq (.split s \"-\"))\n        words1 (for [i (range (count words))]\n                 (if (> i 0)\n                   (apply str (for [j (range (count (nth words i)))]\n                                (if (= j 0)\n                                  (char (- (int (nth (vec (nth words i)) j)) 32))\n                                  (nth (vec (nth words i)) j)\n                                 ) ; if\n                                ) ; for\n                          ) ; apply str\n                   (nth words i)\n                  ) ; if\n                ) ; for\n        ]\n    (apply str words1)\n   ) ; let\n ) ; fn", "problem": 102, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "#(if (= \\m (first %)) \"multiWordKey\" %)", "problem": 102, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn [string]\n  (let [spl (clojure.string/split string #\"-\")]\n    (reduce #(str %1 (clojure.string/capitalize %2))\n            (first spl) (rest spl))))", "problem": 102, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "#(clojure.string/replace % #\"-[a-z]\" (fn [s] (clojure.string/upper-case (last s))))", "problem": 102, "user": "50e3cf55e4b01912b3285c45"}, {"code": "#(let [s (re-seq #\"\\w+\" %)]\n     (reduce str (concat (take 1 s) (map clojure.string/capitalize (drop 1 s)))))", "problem": 102, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [s]\n   (let [[a & rst] (clojure.string/split s #\"-\")\n         capitalize (fn [w] (let [[fcar & rst-char-seq] (seq w)] (apply str (cons (clojure.string/capitalize fcar) rst-char-seq))))]\n     (apply str (cons a (map capitalize rst)))))", "problem": 102, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(str (.toUpperCase (% 1)))))", "problem": 102, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [string]\n  (let [[fst & rst] (clojure.string/split string #\"-\")]\n    (clojure.string/join \"\" (cons fst (map clojure.string/capitalize rst)))))", "problem": 102, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn [s] (let [strs (clojure.string/split s #\"-\")]\n          (clojure.string/join (cons (first strs) (map clojure.string/capitalize (rest strs))))))", "problem": 102, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn to-camel-case [s]\n  (let [words (clojure.string/split s #\"-\")\n        first-word (first words)\n        rest-words (rest words)]\n    (->>\n      rest-words\n      (map clojure.string/capitalize)\n      (apply str)\n      (str first-word)\n      )))", "problem": 102, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "#(apply str \n       (map (fn [[a b]]\n              (if b (Character/toUpperCase b) a)) (re-seq #\"-?.\" %)))", "problem": 102, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [s] (reduce #(str % (clojure.string/capitalize %2)) (map (partial apply str) (filter (partial not= [\\-]) (partition-by (partial = \\-) s)))))", "problem": 102, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn [x] (clojure.string/join (map-indexed #(if (> % 0)  \n           (apply str ((fn [x] (cons (Character/toUpperCase (first x)) (rest x))) (seq %2)))  %2)\n                     (clojure.string/split x #\"-\"))))", "problem": 102, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (last %))))", "problem": 102, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn name [s]\n  (let [words (re-seq #\"[a-zA-Z]+\" s)\n        words (cons (first words)\n                    (map clojure.string/capitalize (rest words)))]\n    (apply str words)))", "problem": 102, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(fn [s]\n  (let [ss (clojure.string/split s #\"-\")\n        fs (first ss)\n        rs (rest ss)]\n    (str fs\n         (apply str (map clojure.string/capitalize rs)))))", "problem": 102, "user": "5092fe10e4b097f48cc3857e"}, {"code": "#(apply str\n        (map (fn [[x y]]\n               (if (= x \\-)\n                 (char (- (int y) 32))\n                 (if (not= y \\-) y)))\n             (partition 2 1 (str 0 %))))", "problem": 102, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [w]\n  (let [words (re-seq #\"[^-]+\" w)\n        [fst & rst] words]\n    (apply str (cons fst (map (fn [[fl & rstl]] (apply str (cons (.toUpperCase (str fl)) rstl))) (rest words))))))", "problem": 102, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn[n]  (apply str (map-indexed (fn[index,item] (if (= index 0 ) item (str (.toUpperCase (subs item 0 1)) (subs item 1) )   ) )(seq (.split n \"-\") ))))", "problem": 102, "user": "50463347e4b011c5dfee771e"}, {"code": "; can be better - but it works :)\n(fn [x]\n   (apply str\n   (map-indexed \n    #(apply str \n      (if (= 0 %) %2\n       (concat(clojure.string/upper-case (first %2))(rest %2))))\n   (filter #(not= % [\\-]) \n           (partition-by #(= \\- %) x)\n   ))))", "problem": 102, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn intoCamelCase [s]\n\t(let [a (.split s \"-\") h (first a) t (rest a)]\n\t\t(reduce #(str % (clojure.string/capitalize %2)) h t)))", "problem": 102, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "#(let [words (clojure.string/split % #\"-\")]\n   (apply str\n   \t  (concat (take 1 words) (map clojure.string/capitalize (drop 1 words)))   \n   )\n)\n;not sure why I'm using take and drop here, instead of first and rest", "problem": 102, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "(fn camel [word]\n  (apply str (first(clojure.string/split word #\"-\")) (map clojure.string/capitalize (rest(clojure.string/split word #\"-\"))) )\n  )", "problem": 102, "user": "50f87a67e4b0aafb827eb202"}, {"code": "(fn [string]\n  (apply str\n   (loop [strlst,string hif,false res,[]]\n     (cond\n      (empty? strlst) res\n      hif (recur (rest strlst) false (conj res (clojure.string/upper-case (first strlst))) )\n      (= (first strlst) \\-) (recur (rest strlst) true res)\n      :else (recur (rest strlst) false (conj res (first strlst)))\n   ))))", "problem": 102, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "(fn [w] (clojure.string/replace w #\"-(.)\" #( clojure.string/capitalize (second %))))", "problem": 102, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn camelize [xs]\n  (let [ss (clojure.string/split xs #\"-\")]\n    (->> (rest ss)\n\t(map clojure.string/capitalize)\n\t(apply str (first ss)))))", "problem": 102, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn [word]\n  \t(let [[f & r] (clojure.string/split word #\"-\")]\n      (str f (clojure.string/join \"\" (map clojure.string/capitalize r)))))", "problem": 102, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn [s] (let [[x & r] (.split s \"-\")] \n          (apply str x (map #(apply str (Character/toUpperCase (first %)) (next %)) r))))", "problem": 102, "user": "4ef77edb535dced4c769f254"}, {"code": "#(let [s (re-seq #\"\\w+\" %)] \n  (apply str (cons (first s) (map clojure.string/capitalize (rest s)))))", "problem": 102, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn [c]\n  (clojure.string/replace c #\"-(.)\" #(.toUpperCase (second %))))", "problem": 102, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn camel [s]\n   (let [w (clojure.string/split s #\"-\")]\n      (clojure.string/join (concat (first w) (map clojure.string/capitalize  (rest w)))  )) )", "problem": 102, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn[s](let [[h & r] (.split s \"-\")] (apply str h (mapcat #(clojure.string/capitalize %) r))))", "problem": 102, "user": "4e778d36535d324fb2983d71"}, {"code": "#(let [s (clojure.string/split % #\"-\")]\n          (clojure.string/join (cons (first s) (map clojure.string/capitalize (rest s)))))", "problem": 102, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn [s]\n  (let\n    [words (clojure.string/split s #\"-\")\n     [x & xs] words\n     caps (map clojure.string/capitalize xs)\n     result (cons x caps)]\n    (clojure.string/join result)))", "problem": 102, "user": "50217818e4b00bba4502f7a7"}, {"code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n\t  (apply str (conj (map clojure.string/capitalize (rest words)) (first words)))))", "problem": 102, "user": "50ef77a4e4b0bdaecbb47d99"}, {"code": "(fn [string]\n  (let [words (clojure.string/split string #\"-\")]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))    \n    )\n  )", "problem": 102, "user": "50fd9fd4e4b033b9c38d78d0"}, {"code": "(fn f [stringWithDashes]\n      (let [splitList (clojure.string/split stringWithDashes #\"-\")]\n        (str (first splitList) (apply str (map clojure.string/capitalize (rest splitList))))))", "problem": 102, "user": "50ff3800e4b017584cb41ccb"}, {"code": "(fn intoCamelCase [words]\n  (let [word-list (clojure.string/split words #\"-\")]\n    (reduce str (first word-list) (map clojure.string/capitalize (rest word-list)))))", "problem": 102, "user": "50f89404e4b0aafb827eb204"}, {"code": "(fn [coll]\n  (let [splitter (clojure.string/split coll #\"-\")]\n    (str (first splitter)\n     (clojure.string/join (map clojure.string/capitalize (rest splitter)))))\n     )", "problem": 102, "user": "50fa0dcee4b07934dda8b0bb"}, {"code": "(fn [s]\n  (apply str  (let [col (clojure.string/split s #\"-\")] (flatten \n  [(first col) (map clojure.string/capitalize (rest col))]))))", "problem": 102, "user": "5008d149e4b0144d4f561e41"}, {"code": "(fn [input]\n((fn [output]\n\t(str\n\t\t(first output)\n\t\t(apply str (map #(clojure.string/capitalize %) (rest output)))\n\t)\n) (clojure.string/split input #\"-\"))\n)", "problem": 102, "user": "51018807e4b0a79bcc8c0e0b"}, {"code": "(fn [s] (str (clojure.string/lower-case (subs s 0 1)) (subs (reduce str (map (fn [t] (str (clojure.string/upper-case (subs t 0 1)) (subs t 1))) (clojure.string/split s #\"\\-\"))) 1)))", "problem": 102, "user": "50f9c7fde4b0e7c80cb15a52"}, {"code": "#(let [x (.split % \"-\")]\n   (apply str (cons (first x) (map clojure.string/capitalize (rest x)))))", "problem": 102, "user": "50f9e74ee4b0e7c80cb15a54"}, {"code": "(fn [s] (apply str (loop [l s r \"\"] (if (= (count l) 1) (concat r l) (if (= (first l) '\\-) (recur (rest (rest l)) (concat r (.toUpperCase (str (second l))))) (recur (rest l) (concat r (list (first l)))))))))", "problem": 102, "user": "510931ede4b0c71f76895663"}, {"code": "(fn [s] \n  (let [parts (re-seq #\"\\w+\" s)]\n    (apply str (first parts) (map clojure.string/capitalize (rest parts)))))", "problem": 102, "user": "50fde9b9e4b033b9c38d78d7"}, {"code": "(comp\n        (comp (partial clojure.string/join \"\") flatten)\n        (juxt\n          first\n          (comp\n            (partial map clojure.string/capitalize)\n            rest))\n        #(clojure.string/split % #\"-\"))", "problem": 102, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn [x] (apply str (first (clojure.string/split x #\"-\")) (map clojure.string/capitalize (rest (clojure.string/split x #\"-\")))))", "problem": 102, "user": "510f0b95e4b0faca7c680138"}, {"code": "#(let [[str1 & others] (clojure.string/split % #\"-\")]\n      (apply str str1 (map clojure.string/capitalize others)))", "problem": 102, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [s]\n  (let [parts (.split s \"-\")]\n    (str (first\tparts) (apply str (map clojure.string/capitalize (rest parts))))))", "problem": 102, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "#(let [s (re-seq #\"\\w+\" %)]\n   (apply str (first s)\n          (map clojure.string/capitalize (rest s))))", "problem": 102, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "(fn [s]\n  (let [split-dash (clojure.string/split s #\"-\")\n        [w ws] (split-at 1 split-dash)]\n    (->> ws\n         (map #(clojure.string/capitalize %))\n         (cons (first w))\n         (clojure.string/join))))", "problem": 102, "user": "510db6cde4b078ea71921145"}, {"code": "(fn [s]\n  (->> (clojure.string/split s #\"-\")\n       ((fn [[f & more]] (cons f (map clojure.string/capitalize more))))\n       (apply str)))", "problem": 102, "user": "50e3e108e4b01912b3285c48"}, {"code": "(fn [s]\n  (let [s' (clojure.string/split s #\"-\")]\n    (reduce #(str %1 (.toUpperCase (.substring %2 0 1)) (.substring %2 1)) (first s') (rest s'))))", "problem": 102, "user": "51195e77e4b055cfb310d499"}, {"code": "#(->> (-> % (.split \"-\")) (map-indexed (fn [ind word] (if (= 0 ind) word (str (.toUpperCase (.substring word 0 1)) (.substring word 1))))) (apply str))", "problem": 102, "user": "502a5e59e4b09e8f859a9fbc"}, {"code": "(fn [k]\n  (let \n    [words (filter #(not (= \\- %)) (map (partial reduce str) (partition-by #(= \\- %) k)))\n     firstword (first words)\n     ccwords (map clojure.string/capitalize (rest words))]\n    (str firstword (reduce str ccwords))))", "problem": 102, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn [s]\n  (apply str\n     (for [x (range 0 (count s))]\n               (let [c (nth s x)]\n                 (cond\n                  (= x 0) (str c)\n                  (= c \\-) \"\"\n                  (= (nth s (dec x)) \\-) (clojure.string/upper-case (str c))\n                  :else (str c))))))", "problem": 102, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn [name]\n   (reduce (fn [st c]\n             (if (= (last st) \\-) \n               (str (apply str (butlast st)) (clojure.string/capitalize c))\n               (str st c))) (str (first name)) (rest name)))", "problem": 102, "user": "50d3b03fe4b030b634c368b9"}, {"code": "#(let [[x & xs] (.split % \"-\")]\n   (apply (partial str x)\n          (map clojure.string/capitalize xs)))", "problem": 102, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn [s]\n   (let [words (map #(apply str %) (remove #(= [\\-] %) (partition-by #(= \\- %) s)))]\n     (apply str (first words) (map #(str (first (.toUpperCase %)) (apply str (rest %))) (rest words)))))", "problem": 102, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [s]\n  (reduce #(str %1 (clojure.string/capitalize %2))\n          (clojure.string/split s #\"-\")))", "problem": 102, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn cc [s]\n  (let [parts (clojure.string/split s #\"-\")]\n    (apply str (first parts)\n           (map #(apply str (.toUpperCase (str (first %))) (rest %)) (rest parts)))))", "problem": 102, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn [s]\n  (let [in (re-seq #\"\\w+\" s)]\n    (if (< (count in) 2)\n      (apply str in)\n      (loop [rein (rest in),\n             result (first in)]\n        (if (empty? rein)\n          (apply str result)\n          (recur (rest rein) (concat result (str (Character/toUpperCase (first (first rein)))) (rest (first rein)))))))))", "problem": 102, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn [multiword]\n  (let [words (clojure.string/split multiword #\"-\")\n        cwords (map clojure.string/capitalize words)\n        twords (cons (first words) (rest cwords))]\n    (clojure.string/join twords)))", "problem": 102, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn [s]\n   (let [ss (clojure.string/split s #\"-\")]\n     (if (> (count ss) 1)\n       (str (first ss) (apply str (map #(apply str (clojure.string/upper-case (str (first %))) (rest %)) (rest ss))))\n       s)))", "problem": 102, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-.\" #(str (java.lang.Character/toUpperCase (last %)))))", "problem": 102, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "#(clojure.string/replace %\n                         #\"-(\\w)\"\n                         (fn [[_ w]] (.toUpperCase w)))", "problem": 102, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn [s]\n  (let [splits (clojure.string/split s #\"-\")\n        h (first splits)\n        t (rest splits)]\n    (clojure.string/join (concat h (map clojure.string/capitalize t)))))", "problem": 102, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn camel-case [astr]\n  (let [ [h & t] (clojure.string/split astr #\"-\")]\n    (str h (apply str (map clojure.string/capitalize t)))))", "problem": 102, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [word]\n  (let [toks (clojure.string/split word #\"-\")\n        f    (first toks)\n        r    (rest toks)\n       ]\n   (apply str (conj (map clojure.string/capitalize r) f))\n  )\n)", "problem": 102, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn [message]\n   (if (and (re-find #\"-\" message) (< 1 (count (clojure.string/split message #\"-\"))))\n     (loop [result (first (clojure.string/split message #\"-\")) elements (rest (clojure.string/split message #\"-\"))]\n       (if elements\n         (recur (str result (str (clojure.string/upper-case (first (first elements))) (subs (first elements) 1 (count (first elements)))))\n                (next elements)\n                )\n         result\n         )\n       )\n      message     \n    )\n   )", "problem": 102, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn tocamel [x]\n  (let [s (.split x \"-\")]\n    (apply str (first s) (map #(str (.toUpperCase (str (.charAt % 0)))\n                                    (.substring % 1 (count %)))\n                              (rest s)))))", "problem": 102, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn [s]\n  (let [parts (clojure.string/split s #\"-\")]\n    (apply str\n           (cons\n             (first parts)\n             (mapcat\n               #(cons (clojure.string/upper-case (first %)) (rest %))\n               (rest parts))))))", "problem": 102, "user": "504e12ade4b078edc5f593b7"}, {"code": "#(apply str (loop [x (rest %) y [(first %)]] \n   \n   \t\t\t\t\t(if (empty? x)\n                      y\n                      (if (= (first x) \\-)\n                      \t(recur (nnext x) (conj y (clojure.string/upper-case (second x))))\n                      \t(recur (next x) (conj y (first x)))\n                                    )\n                      ))\n   )", "problem": 102, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn [s]\n  (let [words (re-seq #\"[^-]+\" s)]\n    (apply str (cons (first words)\n         (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn camel\n  [s]\n  (let [a (clojure.string/split s #\"-\")\n        b (apply str (map #(apply str (conj (drop 1 %) (char (- (int (first %)) 32)))) (rest a)))]\n    (str (first a) b)))", "problem": 102, "user": "4f17ab99535d64f603146457"}, {"code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" (fn [[_ f r]] (str (.toUpperCase f) r))))", "problem": 102, "user": "4e58c019535d8a8b8723a297"}, {"code": "#(apply str (remove (fn [x] (= x \\-)) (map (fn [[a b]] (if (= a \\-) (Character/toUpperCase b) b)) (partition-all 2 1 (concat [(first %)]%)))))", "problem": 102, "user": "4f1bb9d8535d64f60314647d"}, {"code": "#(apply str (reduce (fn [a b] (if (= (last a) \\-)\n                                (conj (-> a butlast vec) (clojure.string/upper-case b))\n                                (conj a b)))\n                    [] %1))", "problem": 102, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn [s]\n  (reduce str\n   (let [[word & more] (clojure.string/split s #\"-\")]\n     (into [word] (map clojure.string/capitalize more)))))", "problem": 102, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn [s] (if (contains? (into #{} (vec s)) \\-) \n           (apply str (map (fn [coll] (if (= (first (partition-by #(= \\- %) (vec s))) coll)\n                   (apply str coll)\n                   (apply str (.toUpperCase (str (first coll))) (rest coll)) )) \n                           (remove #(= \\- (first %)) (partition-by #(= \\- %) (vec s))))) \n           s))", "problem": 102, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn b [n]\n  (let [nn (clojure.string/split n #\"-\")]\n      (reduce str (first nn) (map clojure.string/capitalize (rest nn)))))", "problem": 102, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn toCamelCase[s]\n  (let [ss (clojure.string/split s #\"-\")\n        camel (cons (first ss) (map clojure.string/capitalize (rest ss)))]\n    (clojure.string/join camel)))", "problem": 102, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn camelcase [word] (reduce #(str % (clojure.string/capitalize %2)) (re-seq #\"\\w+\" word)))", "problem": 102, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))))", "problem": 102, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn [s]\n  (let [tmp (clojure.string/split s #\"-\")]\n    (if (= (count tmp) 1)\n\t  (first tmp)\n      (apply str (first tmp) (map clojure.string/capitalize (rest tmp))))))", "problem": 102, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn into-camel-case [s]\n  (let [ret (re-seq #\"[^-]+\" s)]\n    (if (= (count ret) 1)\n      s\n      (apply str\n             (first ret)\n             (map clojure.string/capitalize (rest ret))))))", "problem": 102, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn intoCamelCase [coll]\n  (str (first (clojure.string/split coll #\"\\-\")) \n       (clojure.string/join (map clojure.string/capitalize \n                                 (rest (clojure.string/split coll #\"\\-\"))))))", "problem": 102, "user": "514a2fa1e4b0829bd132edb5"}, {"code": "(fn\n  [s]\n  (let [ss (clojure.string/split s #\"-\")]\n    (apply str (first ss) (map clojure.string/capitalize (rest ss)))))", "problem": 102, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(letfn [(capitalize [s] (clojure.string/join (concat (.toUpperCase (str (first s))) (rest s))))]\n   (fn [s] \n     (let [sub (clojure.string/split s #\"-\")]\n\t     (clojure.string/join (cons (first sub) (map capitalize (rest sub)))))))", "problem": 102, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn\n    [s]\n    (let  [[f & l] (clojure.string/split s #\"-\")]\n        (apply str f (map clojure.string/capitalize l))))", "problem": 102, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn [s]\n  (let [words (remove #{[\\-]} (partition-by #{\\-} s))\n        head (first words)\n        tail (map #(apply str %) (rest words))]\n    (reduce str \"\"\n            (concat head\n                    (map clojure.string/capitalize tail)))))", "problem": 102, "user": "504e14c2e4b078edc5f593bf"}, {"code": "#(let [[f & rest] (clojure.string/split % #\"-\")] (apply str f (map clojure.string/capitalize rest)))", "problem": 102, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn [x] (apply str\n                (let [m (re-matcher #\"(?:([^-])([^-]+))+\" x)\n                      r #(re-find m)\n                      c cons\n                      f (fn f[] (if-let [x (r)] (c (.toUpperCase (x 1)) (c (x 2) (f)))))\n                      ]\n                  (c ((r) 0) (f))\n                  )))", "problem": 102, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-\\w\"\n                          (fn [[_ c]]\n                            (str (Character/toUpperCase c)))))", "problem": 102, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "#(\n(fn[n] (str (first n) (apply str (map clojure.string/capitalize (rest n)))))\n(clojure.string/split %  #\"-\"))", "problem": 102, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn [x] (let [y (clojure.string/split x #\"-\")] (apply str (cons (first y) (map clojure.string/capitalize (rest y))))))", "problem": 102, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn camel [s]\n  (let [sa (clojure.string/split s #\"-\")]\n    (reduce (fn [ret this]\n              (if (nil? ret)\n                this\n                (.concat ret (clojure.string/capitalize this)))) nil sa)))", "problem": 102, "user": "513cb853e4b0b86ece9f322b"}, {"code": "(fn\t[s]\n\t(let [[w & ws] (clojure.string/split s #\"-\")]\n\t  (reduce str w (map clojure.string/capitalize ws))))", "problem": 102, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn [w]\n  (let [ws (clojure.string/split w #\"-\")]\n    (apply str (cons (first ws) (map clojure.string/capitalize (drop 1 ws))))))", "problem": 102, "user": "515a6151e4b0394f658fe241"}, {"code": "#(let [ss (clojure.string/split % #\"-\")] \n(apply str (first ss) (map clojure.string/capitalize (rest ss))))", "problem": 102, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "#(let [s (for [word (re-seq #\"[a-zA-Z]+\" %)]\n           (apply str\n                  (.toUpperCase (str (first word)))\n                  (rest word)))]\n   (apply str\n          (.toLowerCase (str (first (first s))))\n          (apply str (rest (first s)))\n          (rest s)))", "problem": 102, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "#(let [w (re-seq #\"\\w+\" %)] (apply str (first w) (map clojure.string/capitalize (next w))))", "problem": 102, "user": "5093ca51e4b097f48cc38585"}, {"code": "#(clojure.string/replace % #\"-(.)\" (comp clojure.string/upper-case last))", "problem": 102, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn lower-to-camel [s]\n  (let [words (re-seq #\"\\w+\" s)]\n  (reduce #(str %1 (clojure.string/capitalize %2)) (first words) (rest words))))", "problem": 102, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn  [x]\n  (let [cap (fn [x] (str\n                       (.toUpperCase (.substring x 0 1))\n                       (.substring x 1)\n                     ))\n        words (re-seq #\"[a-zA-Z]+\" x)\n        f (first words)\n        r (map cap (rest words))]\n    (apply str (cons f r))))", "problem": 102, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn camelize [word]\n  (let [ourseq (re-seq #\"\\w+\" word)]\n    (apply str (first ourseq) (map clojure.string/capitalize (rest ourseq)))))", "problem": 102, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn [s]\n      (reduce #(str % (-> %2 first str .toUpperCase)\n                    (subs %2 1))\n              (re-seq #\"\\w+\" s)))", "problem": 102, "user": "50f48298e4b004d364930527"}, {"code": "(fn [s] (clojure.string/replace s #\"-([a-z])\" #(clojure.string/upper-case (second %1))))", "problem": 102, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn camel-case \n  [s]\n  (let [[f & r] (re-seq #\"\\w+\" s)\n        v (map clojure.string/capitalize r)]\n    (apply str (concat f v))))", "problem": 102, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-.\" #(.toUpperCase (apply str (rest %1)))))", "problem": 102, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn [s]\n  (let [words (.split s \"-\")\n        join #(clojure.string/join %)]\n    (str (first words)\n         (join (map #(str (-> % first str .toUpperCase) (-> % rest join))\n                    (rest words))))))", "problem": 102, "user": "5175616ae4b0dea9bbfba576"}, {"code": "#(clojure.string/replace % #\"-[a-z]\" (fn [c] (.toUpperCase (subs c 1))))", "problem": 102, "user": "4eab612d535d7eef30807316"}, {"code": "(fn dashes-to-camel \n  [s]\n  (let [x (.split s \"-\")]\n    (str (first x) \n         (apply str \n                (map clojure.string/capitalize (rest x))))))", "problem": 102, "user": "517a025ce4b01aacecbecbe6"}, {"code": "(fn [sentence]\n   (let [words (clojure.string/split sentence #\"-\")\n         firstword (first words)\n         others (map clojure.string/capitalize (rest words))]\n     (reduce str firstword others)))", "problem": 102, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "#(let [c (clojure.string/split % #\"-\")]\n    (apply str\n      (first c)\n      (map clojure.string/capitalize (rest c))))", "problem": 102, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn [s] \n  (let [[first-word & other-words] (clojure.string/split s #\"-\")]\n  (->> (map clojure.string/capitalize other-words) (cons first-word) clojure.string/join)))", "problem": 102, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn [s]\n    (->>\n      (clojure.string/split s #\"-\")\n      (map-indexed (fn [n s] (if (> n 0) (clojure.string/capitalize s) s)))\n      (reduce concat)\n      (apply str))\n  )", "problem": 102, "user": "5165a235e4b079ad97ec44ac"}, {"code": "#(let [s (clojure.string/split % #\"-\")] (clojure.string/join (cons (first s) (map clojure.string/capitalize (rest s)))))", "problem": 102, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn [str]\n  (let [[x & s] (re-seq #\"\\w+\" str)]\n    (clojure.string/join (cons x (map clojure.string/capitalize s)))))", "problem": 102, "user": "51740b65e4b0d277d717bc67"}, {"code": "#(clojure.string/replace % #\"(-)([a-z])\" (comp clojure.string/upper-case last))", "problem": 102, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))))", "problem": 102, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn [w]\n  (let [split clojure.string/split\n        spt-w (split w #\"-\")]\n    (if (= (count spt-w) 1)\n      w\n      (let [cap #(apply str (cons (Character/toUpperCase (first %)) (rest %)))]\n        (apply str (cons (first spt-w)\n                         (map cap (rest spt-w))))))))", "problem": 102, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn [s]\n  (let [[x & xs] (re-seq #\"[^-]+\" s)]\n    (->> (map clojure.string/capitalize xs)\n         (cons x)\n         (apply str))))", "problem": 102, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn f [s] (clojure.string/replace s #\"-.\" #(->> % rest (apply str) clojure.string/capitalize)))", "problem": 102, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn p102[x] \n  (clojure.string/replace x #\"-(\\S)\" #(.toUpperCase (second %1))))", "problem": 102, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn [s]\n  (let [z (clojure.string/split s #\"-+\")]\n  (apply str\n         (first z)\n         (for [x (rest z)]\n           (str (.toUpperCase (str (first x))) (apply str (rest x)))))))", "problem": 102, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn [s]\n  (reduce (fn [a b]\n            (clojure.string/replace-first \n             a \n             b \n             (clojure.string/upper-case (last b)))) s (re-seq #\"\\-\\w\" s)))", "problem": 102, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn [s]\n  (let [split (clojure.string/split s #\"-\")]\n    (apply str\n           (first split)\n           (map clojure.string/capitalize (rest split)))))", "problem": 102, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn [s]\n  (let [r (re-seq #\"[^-]+\" s)]\n    (apply str (cons\n                 (first r)\n                 (map\n                   #(apply str (concat [(.toUpperCase (str (first %)))] (rest %)))\n                   (rest r))))))", "problem": 102, "user": "514d7e29e4b019235f6c0587"}, {"code": "#(apply str \n  (first (clojure.string/split % #\"-\"))\n   (map clojure.string/capitalize\n      (rest  (clojure.string/split % #\"-\"))))", "problem": 102, "user": "517945dce4b0684c1c981a43"}, {"code": "(fn [x]\n  (let [\n         w (clojure.string/split  x #\"\\-\" )\n         cml (fn  [x] (reduce str   (cons  (Character/toUpperCase (first x)) (rest x))))\n        ]\n    (reduce str (concat (first w) (map cml (rest w))))\n    )\n  )", "problem": 102, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "(fn [s]\n  (let [[fst & rst] (clojure.string/split s #\"-\")]\n   (clojure.string/join (cons fst (map clojure.string/capitalize rst)))))", "problem": 102, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(let [capitalize (fn [s]\n                   (apply str (cons (Character/toUpperCase (first s)) (rest s))))]\n  (fn [s]\n    (let [words (re-seq #\"[^-]+\" s)]\n      (apply str (cons (first words) (map capitalize (rest words)))))))", "problem": 102, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn CamelCase [s]\n  (let [re (re-seq #\"[a-zA-Z]+\" s)\n        rzt (cons (first re) (map clojure.string/capitalize (rest re)))]\n    (apply str rzt)))", "problem": 102, "user": "518ccf6be4b05e6c8537e386"}, {"code": "#(apply str\n\t(flatten\n     ((juxt first (comp (partial map clojure.string/capitalize )\n\t\t\t\t\t\trest))\n      (clojure.string/split % #\"-\"))))", "problem": 102, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "(fn f [s]\n  (let [coll (clojure.string/split s #\"-\" )]\n    (clojure.string/join \n      \"\" (cons (first coll)\n               (map \n                 #(str (.toUpperCase (.substring % 0 1)) \n                       (.substring % 1)) \n                 (rest coll))))))", "problem": 102, "user": "51750cd4e4b07031762f2ee5"}, {"code": "#(let [words (clojure.string/split % #\"-\")]\n   (apply str (cons (first words)\n                    (map clojure.string/capitalize (rest words)))))", "problem": 102, "user": "5102ac9de4b00c483ae176fa"}, {"code": "#(let [[s & x] (clojure.string/split % #\"-\")]\n    (apply str s (map clojure.string/capitalize x)))", "problem": 102, "user": "4e5e391c535d8a8b8723a2d0"}, {"code": "(fn [s]\n  (let [camel (vec (clojure.string/split s #\"-\"))]\n     (apply str (first camel)(map clojure.string/capitalize (rest  camel)) )\n                 ))", "problem": 102, "user": "50770d4ce4b0aac56a60f7e9"}, {"code": "#((fn [[x & xs]] (clojure.string/join (conj (map clojure.string/capitalize xs) x))) \n            (clojure.string/split % #\"-\"))", "problem": 102, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "#(clojure.string/replace % #\"-(.)\" (fn [[_ a]] (clojure.string/upper-case a)))", "problem": 102, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn [x]\n  (let [words (re-seq #\"[a-zA-Z]+\" x)]\n  (reduce\n   (fn [r s] (str r (clojure.string/replace s #\"^[a-z]\" #(.toUpperCase % ))))\n   (first words)\n   (rest words))))", "problem": 102, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [str]\n  (let [[head & tail] (clojure.string/split str #\"-\")]\n    (clojure.string/join \"\" (conj (map clojure.string/capitalize tail) head))))", "problem": 102, "user": "5073de20e4b054001656acca"}, {"code": "#(if (= % \"multi-word-key\") \n   \"multiWordKey\"\n   %)", "problem": 102, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "(fn [x]\n  (clojure.string/join \"\" (let [[f & others] (clojure.string/split x #\"\\-\")]\n                            (cons f (map #(apply str (let [[x & ys] (seq %)] (cons (Character/toUpperCase x) ys))) others)))))", "problem": 102, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "#(clojure.string/replace % #\"-(.)\" (fn [x] (.toUpperCase (x 1))))", "problem": 102, "user": "519e9f06e4b0acf32bc6a433"}, {"code": "#(let [ss (clojure.string/split % #\"-\") \n       h (first ss) \n       t (rest ss)] \n   (clojure.string/join \n    (conj (map clojure.string/capitalize t) h)))", "problem": 102, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn cc [s]\n  (letfn [(helper [ss]\n                  (if (empty? ss) '()\n                    (let [c (first ss)\n                          d (second ss)]\n                      (if (= c \\-)\n                        (cons (.toUpperCase (str d)) (helper (nthrest ss 2)))                        \n                        (cons c (helper (rest ss)))))))]\n    (apply str (helper s))))", "problem": 102, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "#(clojure.string/join\n (let [words (clojure.string/split %1 #\"-\")]\n   (cons (first words) (map clojure.string/capitalize (rest words)))))", "problem": 102, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "#(let [strs (re-seq #\"[a-zA-Z]+\" %)\n       cap (fn [s] (reduce str (.toUpperCase (str (first s))) (rest s)))]\n   (if (= 1 (count strs))\n     (first strs)\n     (reduce str (conj (map cap (rest strs)) (first strs)))))", "problem": 102, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn [target]\n  (clojure.string/replace target #\"-.\" #(clojure.string/upper-case (second %))))", "problem": 102, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn [string]\n  (let [words (map #(reduce str \"\" %) (remove #(= '(\\-) %) (partition-by #(= \\- %) (seq string))))\n        uppercased (if (< (count words) 2)\n                     words\n                     (reduce (fn [words s]\n                               (let [s (.toString s)]\n                                 (if (< (count s) 2)\n                                   (conj words (.toUpperCase s))\n                                   (conj words (str (.toUpperCase (subs s 0 1))\n                                                    (.toLowerCase (subs s 1))))))) (list (first words)) (rest words)))]\n    (reduce str \"\" (reverse uppercased))))", "problem": 102, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn [s]\n  (let [[start & more] (clojure.string/split s #\"\\-\")]\n    (apply str (conj (map clojure.string/capitalize more) start))))", "problem": 102, "user": "50b29029e4b03ea880433563"}, {"code": "(fn [dashed]\n  (let [tokens (.split dashed \"-\")\n        capped (map #(apply str (Character/toUpperCase (first %))\n                          (rest %)) (rest tokens))]\n  (apply str (first tokens) capped)))", "problem": 102, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn cC [s] (clojure.string/replace s #\"-(\\w)\" #(clojure.string/upper-case (second %1))) )", "problem": 102, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "#(let [complete (clojure.string/split % #\"-\")]\n    (str (first complete) (clojure.string/join (map clojure.string/capitalize ( rest complete))))\n   )", "problem": 102, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "(fn [x]\n    (let [s (clojure.string/split x #\"-\")]\n      (if (> (count s) 1)\n        (clojure.string/join (cons (first s) (rest (map clojure.string/capitalize s))))\n        x)))", "problem": 102, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "#(clojure.string/join (loop [d [] l (vec %)]\n  (if (empty? l) d\n    (let [h (= (first l) \\-)]\n      (recur\n        (conj d (if h\n                  (clojure.string/upper-case (second l))\n                  (first l)))\n        (if h (drop 2 l) (rest l)))))))", "problem": 102, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn [x]\n  (let [words (clojure.string/split x #\"-\")]\n    (clojure.string/join (cons (first words) (map #(clojure.string/capitalize %) (rest words))))\n    )\n  )", "problem": 102, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn [s] (let [v (vec (clojure.string/split s #\"-\"))] (apply str (first v) (for [w (rest v)] (apply str (Character/toUpperCase (first w)) (rest w))))))", "problem": 102, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn [coll]\n   (let [s \n         (clojure.string/split coll #\"\\-\")]\n     (apply str \n            (first s)\n            (map #(clojure.string/capitalize %) (drop 1 s)))))", "problem": 102, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn [s]\n  (let [\n        words (re-seq #\"[^-]+\" s)\n        upperInitial (fn [s]\n                      (apply str (Character/toUpperCase (.charAt s 0)) (rest s)))\n        ]\n    (apply str (first words) (map upperInitial (rest words)))))", "problem": 102, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn [x]\n  (let [y (re-seq #\"[^-]+\" x)]\n    (apply str (cons\n                (first y)\n                (map\n                 #(apply str (concat [(.toUpperCase (str (first %)))] (rest %)))\n                 (rest y))))))", "problem": 102, "user": "51d2f73ce4b099f3b6acddf4"}, {"code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (str (first words) (clojure.string/join (map #(clojure.string/capitalize %) (rest words))))))", "problem": 102, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [words]\n\t(let [word-list (clojure.string/split words #\"-\")\n\t\tfirst-word (first word-list) \n\t\tsecond-word  (map  clojure.string/capitalize (rest word-list))]\n\t(reduce str first-word \n second-word)))", "problem": 102, "user": "518644bce4b0da5a5be3baca"}, {"code": "#(clojure.string/replace % #\"-[a-z]\" (comp clojure.string/upper-case last))", "problem": 102, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn [s]\n  (let [[w & ws] (clojure.string/split s #\"-\")]\n    (apply str w (map clojure.string/capitalize ws))))", "problem": 102, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn [s]\n  (let [tokens (re-seq #\"[^-]+\" s)]\n    (apply \n       str (first tokens)\n           (map clojure.string/capitalize (next tokens)))))", "problem": 102, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (%1 1))))", "problem": 102, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "(fn [st]\n\t(#(apply str\n\t\t(first %)\n\t\t(for [x (range 1 (count %))]\n\t\t\t(apply str (clojure.string/upper-case (first (nth % x))) (rest (nth % x)))))\n\t(clojure.string/split st #\"-\")))", "problem": 102, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn [s]\n  (-> (str \"A\" s)\n      (clojure.string/split #\"-\")\n      ((fn [s] (map #(apply str (Character/toUpperCase (first %)) (rest %)) s)))\n      clojure.string/join\n      (subs 1)))", "problem": 102, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn intoCamelCase [s]\n  (letfn [(cap [x] (cons (java.lang.Character/toUpperCase (first x)) (remove- (rest x))))\n          (remove- [x] (if (= (first x) \\-)\n                         (cap (rest x)) \n                         (if (= (first x) nil)\n                           x\n                           (cons (first x) (remove- (rest x))))))]\n    (apply str (remove- s))))", "problem": 102, "user": "51b8e8b3e4b050a1176cd6a0"}, {"code": "(fn camels [x] (let [\n    ;; dereferencing rules                 \n    [ f & r ]\n    (clojure.string/split x #\"-\")\n    ]\n    (clojure.string/join \"\" (concat f (map #(clojure.string/capitalize %) r)))))", "problem": 102, "user": "514cfa27e4b019235f6c057d"}, {"code": "#(let [[h & t] (re-seq #\"\\w*\" %)]\n    (clojure.string/join (cons h (map clojure.string/capitalize t))))", "problem": 102, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [string]\n  (apply str \n         (-> (map #(if (= \"-\" (first %)) \n                  (list (first %) (.toUpperCase (second %))) \n                  %) \n               (partition 2 1 (map str (vec string))))\n             (#(cons (first (first %)) (map second %)))\n             ((fn [s] (filter #(not (= \"-\" %)) s)))\n          )\n   )\n  )", "problem": 102, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn [s]\n  (let [[w & words] (re-seq #\"[^-]+\" s)\n        first-to-upper (fn [[c & cs]] (apply str (cons (Character/toUpperCase c) cs)))]\n    (apply str (cons w (map first-to-upper words)))))", "problem": 102, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "#(clojure.string/replace % #\"-[a-z]\" (comp clojure.string/upper-case last))", "problem": 102, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn [s]\n   (cond (not (re-seq #\"\\-\" s)) s\n     :else \n     (clojure.string/join\n       (conj \n         (rest (map clojure.string/capitalize (clojure.string/split s #\"\\-\")))\n         (first(map clojure.string/lower-case (clojure.string/split s #\"\\-\")))))))", "problem": 102, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[m g]] (clojure.string/upper-case g)))", "problem": 102, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn intoCamelCase\n  [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (str (first words)\n         (reduce str (map #(clojure.string/capitalize %) (rest words))))))", "problem": 102, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn [s]\n  (letfn [(upper [c] (char (- (int c) 32)))\n          (lower [c] (char (+ (int c) 32)))]\n    (let [ws (clojure.string/split s #\"-\")]\n      (->>\n       (rest ws)\n       (mapcat #(cons (upper (first %))(rest %)))\n       (apply str)\n       (str (first ws))))))", "problem": 102, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn [x] (let [s (clojure.string/split x #\"-\")] (reduce #(str %1 (clojure.string/capitalize %2)) (first s) (rest s)) ))", "problem": 102, "user": "500ec210e4b00fff93030f9d"}, {"code": "(fn [a]\n  (let [spondash (clojure.string/split a #\"-\")\n        hasdash? (> (count spondash) 1)\n        wordsforcamel (fn [b] (map #(clojure.string/capitalize (nth b %)) (range 1 (count b))))]\n    (if hasdash?\n      (clojure.string/join (concat [(nth spondash 0)] (wordsforcamel spondash)))\n      a)))", "problem": 102, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn camelcase\n  [s]\n  (let [title-case (fn [word]\n                     (apply str (cons (Character/toUpperCase (first word)) (next word))))\n        parts      (re-seq #\"[a-zA-Z]+\" s)]\n    (apply str (cons (first parts)\n                     (map title-case (next parts))))))", "problem": 102, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn [s] (reduce #(clojure.string/join [%1 (clojure.string/capitalize %2)]) (clojure.string/split s #\"-\")))", "problem": 102, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "(fn [s] \n  (let [sl (.split s \"-\")] \n    (apply str (first sl) \n         (map (fn cap [s] (apply str (.toUpperCase (str (first s))) (rest s))) (rest sl)))))", "problem": 102, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "(fn [s](reduce #(str % (clojure.string/capitalize %2)) (clojure.string/split s #\"-\")))", "problem": 102, "user": "50e90813e4b033b0e80d11e7"}, {"code": "(fn [s] \n   (#(apply str (concat (first %) (map clojure.string/capitalize (rest %)))) (clojure.string/split s #\"-\")))", "problem": 102, "user": "51f28a64e4b0210f90e7454e"}, {"code": ";; cheat\n(fn [word]\n  (cond (= word \"multi-word-key\") \"multiWordKey\"\n        true word))", "problem": 102, "user": "51e0198ee4b01188f0627539"}, {"code": "(fn [s]\n    (let [ p (filter #(not= %1 '(\\-)) (partition-by (partial = \\-) s))]\n    (apply str (apply concat (first p) (map #(cons (.toUpperCase (str (first %1))) (rest %1)) (rest p))))))", "problem": 102, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn [w]\n  (let [ws (seq (.split w \"-\"))]\n    (apply str (first ws)\n           (->> (rest ws)\n                (map #(str (.toUpperCase (.substring % 0 1))\n                           (.substring % 1)))))))", "problem": 102, "user": "4fbf2818e4b081705acca317"}, {"code": "(fn cc [s]\n  (let [[h & t] (clojure.string/split s #\"-\")\n        cap-first (fn [f & r] (str (clojure.string/capitalize f) r))]\n    (apply str (conj (map cap-first t) h))))", "problem": 102, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn [w] (clojure.string/replace w #\"-(\\w)\" #(.toUpperCase (second %))))", "problem": 102, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "(fn [string] (loop [s string\n                    capitalize false\n                    x []]\n               (if (empty? s)\n                 (apply str x)\n                 (recur (rest s)\n                        (if (= (str (first s)) \"-\")\n                          true\n                          false)\n                        (if (= (str (first s)) \"-\")\n                          x\n                          (if capitalize\n                            (conj x (clojure.string/upper-case (str (first s))))\n                            (conj x (str (first s)))))))))", "problem": 102, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "(fn [st]\n  (let [[x & xs] (.split #\"-\" st)]\n    (apply str x (map clojure.string/capitalize xs))))", "problem": 102, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "#(let [xs (clojure.string/split % #\"-\")]\n    (clojure.string/join (cons (first xs) (map clojure.string/capitalize (rest xs)))))", "problem": 102, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn [s]\n  (->>\n   s\n   (re-seq #\"\\w+\")\n   (map-indexed \n    #(if (zero? %) \n       %2 \n       (apply str (clojure.string/capitalize (first %2)) (rest %2))) )\n   (apply str)))", "problem": 102, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn [s]\n  (let [xs (clojure.string/split s #\"-\")]\n    (if (empty? (rest xs))\n      (first xs)\n      (apply str (cons (first xs) (map clojure.string/capitalize (rest xs)))))))", "problem": 102, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [w]\n  (let [[h & t] (seq (.split w \"-\"))]\n    (apply str h (map clojure.string/capitalize t))))", "problem": 102, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn camel-case [s]\n  (let [words (re-seq #\"[A-Za-z]+\" s)]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))))", "problem": 102, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn [s] (clojure.string/replace s #\"-[a-z]\" #(subs (.toUpperCase %) 1)))", "problem": 102, "user": "52015698e4b0d7096e99ddba"}, {"code": "#(reduce\n  (fn [s [from to]]\n    (.replace s from (clojure.string/upper-case to)))\n  %\n  (re-seq #\"-(\\w)\" %))", "problem": 102, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn[s] (clojure.string/replace s #\"-[a-z]\" #(-> % (.substring 1) .toUpperCase)))", "problem": 102, "user": "5201572be4b0d7096e99ddbb"}, {"code": "#(clojure.string/join (map-indexed (fn [i m] (if (= i 0) m (clojure.string/capitalize m))) (clojure.string/split % #\"-\")))", "problem": 102, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn [s]\n\t(reduce\n\t\t#(str % (clojure.string/capitalize %2))\n\t\t(clojure.string/split s #\"\\-\")))", "problem": 102, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn  [x]\n  (clojure.string/replace x #\"-\\w\" #(clojure.string/upper-case (second %1))))", "problem": 102, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "#(let [words (re-seq #\"\\w+\" %)\n\tcased (map (fn [[f & r]] (apply str (Character/toUpperCase f) r)) (rest words))]\n\t(apply str (cons (first words) cased))\n)", "problem": 102, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn [s] (clojure.string/replace s #\"(-)(.)\" #(clojure.string/upper-case (% 2))))", "problem": 102, "user": "51e00020e4b01188f0627534"}, {"code": "(fn [x]\n  (clojure.string/replace x #\"-([\\w])\" #(.toUpperCase (str (second %)))))", "problem": 102, "user": "513fab65e4b00f13ea1bd891"}, {"code": "#(clojure.string/replace % #\"(-.)\" \n                           (fn [[_ [_ c]]] \n                             (.toUpperCase (str c))))", "problem": 102, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn [x] \n  (let [splits (clojure.string/split x #\"-\")]\n   \t(clojure.string/join \"\" (flatten [(first splits) (map clojure.string/capitalize (rest splits))]))\n  )\n)", "problem": 102, "user": "52016690e4b0b2e020a18f0f"}, {"code": "#(apply\n  str\n  (first\n   (reduce (fn [[st cap] c]\n             (cond cap [(conj st (Character/toUpperCase c)) false]\n                   (= c \\-) [st true]\n                   :default [(conj st c) false]))\n           [[] false]\n           %)))", "problem": 102, "user": "51f9527fe4b09be9c177e549"}, {"code": "(fn [s]\n  (let [temp (clojure.string/split s #\"-\")]\n    (apply str (first temp)\n         (map clojure.string/capitalize (rest temp)))))", "problem": 102, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "#(let [p (clojure.string/split % #\"\\-\")]\n          (apply str\n                 (first p) (map clojure.string/capitalize (rest p))))", "problem": 102, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn [s]\n  (let [[h & t] (re-seq #\"\\w+\" s)]\n    (reduce str h (mapcat clojure.string/capitalize t))))", "problem": 102, "user": "511d6a01e4b022853b0e07a5"}, {"code": "#(let [coll (clojure.string/split % #\"-\")]\n        (if (seq (rest coll))\n        (apply str(concat\n        (list (first coll))\n         (map clojure.string/capitalize (rest coll)         \n                   )))\n        %))", "problem": 102, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "(fn\n  [s]\n  (apply str (first (reduce (fn [[acc cc] e]\n                              (if (= e \\-)\n                                [acc true]\n                                [(conj acc (if cc (Character/toUpperCase e) e)) false]))\n                            [[] false]\n                            s))))", "problem": 102, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn icc [s]\n  (-> \n   s\n   (clojure.string/split #\"-\")\n   ((fn [coll] (conj (map clojure.string/capitalize (rest coll)) (first coll) )))\n   (clojure.string/join)\n   ))", "problem": 102, "user": "5151c184e4b03e678e393add"}, {"code": "(fn [w] \n    (apply str\n           (reduce \n             (fn [acc x]\n               (if (= \\- (last acc))\n                 (conj (vec (butlast acc)) (Character/toUpperCase x))\n                 (conj acc x)))\n             [] w)))", "problem": 102, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn f [s] \n  (reduce str (let [sq (seq (.split s \"-\"))]\n    (loop [ans [(first sq)] nsq (next sq)]\n      (if (empty? nsq) ans \n        (let [ss (first nsq)\n              s1 (.toUpperCase (.substring ss 0 1)) \n              s2 (.toLowerCase (.substring ss 1))]\n          (recur (conj ans (str s1 s2)) (next nsq))))))))", "problem": 102, "user": "52196842e4b0890f2f822bfa"}, {"code": "(fn camel [x]\n  (let [x-split (clojure.string/split x #\"-\")\n        map-x-split (map #(apply str (concat (clojure.string/upper-case (first %1)) (rest %1))) x-split)\n        str-split (apply str map-x-split)]\n    (apply str (concat (clojure.string/lower-case (first str-split)) (rest str-split)))))", "problem": 102, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn transform [s]\n  (loop [toUp false, acc \"\", s s]\n    (if (empty? s) acc\n      (if (= (first s) \\-)\n        (recur true acc (rest s))\n        (if toUp\n          (recur false (str acc (clojure.string/capitalize (first s))) (rest s))\n          (recur false (str acc (first s)) (rest s)))))))", "problem": 102, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn icc [s]\n  (if (> (.indexOf s \"-\") -1)\n    (let [words (clojure.string/split s #\"-\")]\n      (->> (rest words) (map #(apply str (clojure.string/upper-case (first %)) (rest %)))\n        (apply str (first words))))\n    s))", "problem": 102, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "(fn [x] ( let [y (re-seq #\"\\w+\" x)]\n                        (clojure.string/join (conj (map #(clojure.string/capitalize %1) (rest y)) (first y)))\n                        )\n                )", "problem": 102, "user": "5225b16de4b0d2f5d1e2c0ed"}, {"code": "(fn [s]\n  (let [ws (re-seq #\"\\w+\" s) ]\n    (apply str\n      (first ws)\n      (map\n        #(apply str (.toUpperCase (str (first %))) (rest %))\n        (rest ws)))))", "problem": 102, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn [in] (clojure.string/replace in #\"-[a-z]\" #(.toUpperCase (str (last %)))))", "problem": 102, "user": "51aefceee4b09397d5109797"}, {"code": "(fn [s] (let [spl (clojure.string/split s #\"[- ]\") f (first spl) r (rest spl)]\n           (apply str f (for [t r,\n                            u (apply str (clojure.string/upper-case (first t)) (next t))]\n                        u))))", "problem": 102, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "(fn one-hundred-two\n  [s]\n  (let [word-list (clojure.string/split s #\"-\")]\n    (str\n     (first word-list)\n     (apply str (map clojure.string/capitalize (rest word-list))))))", "problem": 102, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn toCamel                                                                      \n  [x]                                                                              \n  (let [s (clojure.string/split x #\"-\")]                                           \n    (apply str (first s) (apply str (map clojure.string/capitalize (rest s))))))", "problem": 102, "user": "50573ed8e4b0012181721987"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-([a-z])\" #(clojure.string/upper-case (%1 1))))", "problem": 102, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn [word]\n  (let [words (clojure.string/split word #\"-\")]\n    (clojure.string/join (cons (first words) (map #(clojure.string/capitalize %) (rest words))))))", "problem": 102, "user": "51857e64e4b0da5a5be3babe"}, {"code": "(fn [s]\n  (apply str\n         (remove #(= % \\-)\n                 (map #(if (= % \\-) (Character/toUpperCase %2) %2)\n                      (cons 0 s) s))))", "problem": 102, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn [x] (clojure.string/replace x #\"-(\\w)\" #(clojure.string/upper-case (second %))))", "problem": 102, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn [s]\n  (letfn\n   [(cap [[head & tail]]\n      (apply (partial str (char (- (int head) 32))) tail))]\n    (apply str\n      (first (clojure.string/split s #\"\\-\"))\n      (map cap \n        (rest (clojure.string/split s #\"\\-\"))))))", "problem": 102, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn dash->camel\n  [word]\n  (clojure.string/join \n   (let [word-seq (clojure.string/split word #\"-\")]\n     (cons (first word-seq) \n           (map clojure.string/capitalize (rest word-seq))))))", "problem": 102, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "#(let [s (re-seq #\"\\w+\" %)]\n    (if (= 1 (count s)) %\n      (apply str (first s) (map clojure.string/capitalize (rest s)))))", "problem": 102, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn [s] \n  (let [[s & xs] (clojure.string/split s #\"-\")]\n    (apply str s (map clojure.string/capitalize xs))))", "problem": 102, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "#(clojure.string/replace % #\"-.\" (fn [[_ x]] (format \"%S\" x)))", "problem": 102, "user": "50293245e4b08353e5d459cf"}, {"code": "(fn camel-case [s]\n  (clojure.string/replace s #\"-[a-z]\"\n                          #(clojure.string/capitalize (subs %1 1 2))))", "problem": 102, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [x] (str (first (clojure.string/split x #\"-\")) (apply str (map clojure.string/capitalize (rest (clojure.string/split x #\"-\"))))))", "problem": 102, "user": "510c123be4b078ea7192110e"}, {"code": "(fn [word]\n  (let [words (clojure.string/split word #\"-\")]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))))", "problem": 102, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "#(clojure.string/replace\n   % #\"-\\w\"\n   (zipmap\n     (map (comp (partial str \"-\") char) (range 97 123))\n     (map (comp str char)  (range 65 91))))", "problem": 102, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "(fn [s] (let [v (seq (.split s \"-\")) \n              f (first v)\n              r (map clojure.string/capitalize (rest v))]\n              (apply str (concat f r))))", "problem": 102, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn [n]\n  (letfn [(cap [s] (str (. (-> s first str) toUpperCase) (. s substring 1)))]\n    (let [parts (. n split \"-\")]\n      (apply str (list* (first parts) (map cap (rest parts)))))))", "problem": 102, "user": "52379c46e4b0fae3832e99db"}, {"code": "#(apply str \n        (let [words (clojure.string/split % #\"-\")] \n\t\t   (cons (first words) (map clojure.string/capitalize (next words)))))", "problem": 102, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-(.)\" #(clojure.string/upper-case (% 1))))", "problem": 102, "user": "519db0ede4b037b32803f9b9"}, {"code": "(fn [s]\n  (reduce #(str % (clojure.string/capitalize %2))\n          (clojure.string/split s #\"-\")))", "problem": 102, "user": "52479487e4b05ef8e38e6373"}, {"code": "#(apply str (apply (fn [x & xs] (cons x (map clojure.string/capitalize xs))) (re-seq #\"\\w+\" %)))", "problem": 102, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn hyphon->camel [s]\n  (->> (clojure.string/split s #\"-\")\n       (reductions #(clojure.string/capitalize %2))\n       (apply str)))", "problem": 102, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [s]\n  (let [ss (.split s \"-\")]\n    (clojure.string/join (concat (first ss) (map #(clojure.string/capitalize %) (rest ss))))\n    )\n  )", "problem": 102, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn [input]\n  (let [parts (clojure.string/split input #\"\\-\")\n        fst   (first parts)\n        rst   (map clojure.string/capitalize (rest parts))]\n    (apply str fst rst)))", "problem": 102, "user": "5245fbbbe4b09dbe66b56183"}, {"code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (last %))))", "problem": 102, "user": "514d8084e4b019235f6c0588"}, {"code": "#(clojure.string/replace % #\"(?i)-([a-z])\" (fn [[_ l]] (.toUpperCase l)))", "problem": 102, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-[a-z]\" #(clojure.string/upper-case (str (last %)) )))", "problem": 102, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "#(clojure.string/replace % #\"-([a-z])\" (fn [[_ g]] (clojure.string/upper-case g)))", "problem": 102, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [s]\n   (let [ss (.split s \"-\")]\n     (apply\n      str\n      (cons\n       (first ss)\n       (map\n        (fn [y]\n          (apply\n           str\n           (cons (java.lang.Character/toUpperCase (first y)) (rest y))\n           )\n          )\n        (rest ss)\n        )\n       )\n      )\n     )\n   )", "problem": 102, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn camel-case-to-hyphen [s]\n  (loop [parts []\n         part (vector (first s)) \n         remainder (rest s)]\n    (cond (empty? remainder) \n            (let [p (conj parts (apply str part))\n                  start (first p)\n                  end (map #(str (.toUpperCase (subs % 0 1)) (.toLowerCase (subs % 1))) (rest p))]\n              (apply str start end))\n          (= (first remainder) \\-) (recur (conj parts (apply str part)) [] (rest remainder))\n          :else (recur parts (conj part (first remainder)) (rest remainder)))))", "problem": 102, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn [x]\n  (clojure.string/replace x #\"\\-[a-z]\" \n    #(str (clojure.string/upper-case (last %)))))", "problem": 102, "user": "5236cd89e4b0e010857b4e45"}, {"code": "(fn into-camel-case [s]\n  (reduce #(str %1 (clojure.string/capitalize %2)) (re-seq #\"\\w+\" s)))", "problem": 102, "user": "52606318e4b03e8d9a4a7036"}, {"code": "(fn [key]\n  (let [tokens (clojure.string/split key #\"-\")]\n    (clojure.string/join (cons (first tokens)\n                (map #(clojure.string/capitalize %) (rest tokens))))))", "problem": 102, "user": "525dd767e4b0cb4875a45d88"}, {"code": "#(let [[f & r] (clojure.string/split % #\"-\")] (str f (reduce (fn [s v] (str s (clojure.string/capitalize v))) \"\" r)))", "problem": 102, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))))", "problem": 102, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn [x] (let [[a & st]  (filter next (partition-by #(= % \\-) x))]\n  (apply str (flatten (cons a (map #(cons (Character/toUpperCase (first %)) (rest %)) st))))))", "problem": 102, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn [s] (let [ [h & r] (clojure.string/split s #\"-\")] (apply str h (map clojure.string/capitalize r))))", "problem": 102, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn [w] (let [words (clojure.string/split w #\"-\")]\n         (clojure.string/join \"\" (reduce #(conj %1 %2) [(first words)] (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(fn [w]\n  (let [ws (re-seq #\"\\w+\" w)\n        fst (first ws)\n        rs (rest ws)]\n    (apply str fst (map #(apply str (.toUpperCase (str (first %1)))\n                                (rest %1)) rs))))", "problem": 102, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn [-string]\n   (let [s (clojure.string/split -string  #\"-\")]\n     (if (= 1 (count s))\n       -string\n       (reduce #(str  % (clojure.string/capitalize %2)) (first s) (next s))\n       ))\n   )", "problem": 102, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn camel-case [word]\n  (let [[lead & words] (clojure.string/split word #\"-\")]\n    (apply str lead (map clojure.string/capitalize words))))", "problem": 102, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [s]\n  (let [split (re-seq #\"\\w+\" s)]\n    (if (< 1 (count split))\n      (apply str (cons (first split) (map clojure.string/capitalize (next split))))\n      (first split))))", "problem": 102, "user": "51df825de4b01188f062752b"}, {"code": "(comp\n    (partial apply str)\n    (partial remove (partial = \\-))\n    #(map \n       (fn [c p] (if (= p \\-) (Character/toUpperCase c) c))\n       (seq %) (cons \\_ (seq %))))", "problem": 102, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (str (first words) (apply str (map clojure.string/capitalize (rest words))))\n  )\n)", "problem": 102, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn [s]\n  (let [[f & r] (clojure.string/split s #\"\\-\")]\n    (clojure.string/join (cons f (map clojure.string/capitalize r)))))", "problem": 102, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn icc [words]\n(letfn [(cap-first [word]\n  (clojure.string/join\n   [ (clojure.string/upper-case (str (first word)))\n     (clojure.string/join (next word))]))]\n\n\n  (let [ words (clojure.string/split words #\"-\")\n        head (first words)\n        tail (rest words)]\n  (clojure.string/join (cons head (map cap-first tail))))))", "problem": 102, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn p102\n  ([s] (let [rm (map (fn [x] [x (str (char (- (.hashCode (.charAt x 1)) 32)))]) (re-seq #\"-\\w\" s))\n             rpl (fn th [s rs] (if (empty? rs) s (th (.replace s (first (first rs)) (fnext (first rs))) (next rs))))]\n         (rpl s rm))))", "problem": 102, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn into-camel-case [s]\n  (reduce\n    (fn [accum st] (str accum (clojure.string/replace-first st #\"^(.)\" #(.toUpperCase (first %)))))\n    (re-seq #\"[^-]+\" s)))", "problem": 102, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn [x] \n  (clojure.string/join \"\" \n                       (cons \n                        (first (clojure.string/split x #\"-\")) \n                        (map clojure.string/capitalize \n                             (next (clojure.string/split x #\"-\")))))\n)", "problem": 102, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [s]\n  (let [x (clojure.string/split s #\"-\")]\n  (apply str (first x)\n         (map clojure.string/capitalize (rest x)))))", "problem": 102, "user": "51f13b80e4b06a20a2523f38"}, {"code": "(fn a [s] (loop [in s o \"\"] (if(empty? in) (identity o) (recur (if(= (first in) \\-)(nnext in)(next in)) (str o (if(= (first in) \\-)(.toUpperCase (str(second in)))(first in)))))))", "problem": 102, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "#(reduce (fn [a [c & s]] (apply str `(~a ~(Character/toUpperCase c) ~@s))) (.split % \"-\"))", "problem": 102, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn [s]\n    (let [w (clojure.string/split s #\"-\")]\n      (apply str (first w) (map #(apply str (cons (Character/toUpperCase (first %)) (rest %))) (rest w)))\n      ))", "problem": 102, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn [s]\n  (let [se (clojure.string/split s #\"-\")]\n    (apply str (cons (first se) (map clojure.string/capitalize (rest se))))))", "problem": 102, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn [input-string] (clojure.string/replace input-string #\"-(\\w)\" #(clojure.string/upper-case (second %1))))", "problem": 102, "user": "527c4071e4b0757a1b17135a"}, {"code": "(fn [x](let [spl (clojure.string/split x #\"-\")]\n   (clojure.string/join (cons (first spl)(map clojure.string/capitalize (rest spl))))\n         )\n  )", "problem": 102, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn [ s ] (clojure.string/replace s #\"-\\w{1}\" #(.toUpperCase  (.substring %1 1 2))))", "problem": 102, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "#((fn [[x & s]] (apply str x (map clojure.string/capitalize s))) \n  (clojure.string/split % #\"-\" ))", "problem": 102, "user": "519ef784e4b087743fad2198"}, {"code": "(fn [s] (let [c (clojure.string/split s #\"-\")] (clojure.string/join \"\" (cons (first c) (map clojure.string/capitalize (rest c))))))", "problem": 102, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "(fn [x]  (let [l (clojure.string/split x #\"-\")] (apply str (conj (map clojure.string/capitalize (rest l)) (first l)))))", "problem": 102, "user": "51e7c1f1e4b0a3e081b8cbef"}, {"code": "(fn intoCamelCase [s]\n   (if (boolean (some #{\\-} s))\n     (let [ss (clojure.string/split s #\"-\")]\n       (apply str (first ss) (map (fn [s]\n                                    (apply str\n                                           (clojure.string/upper-case (first s))\n                                           (rest s)))\n                                  (rest ss))))\n     s))", "problem": 102, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-\\w\" #(.toUpperCase (.substring % 1))))", "problem": 102, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "#(let [[a & xs] (.split % \"-\")]\n   (apply str a (map clojure.string/capitalize xs)))", "problem": 102, "user": "51e38568e4b0c611d6113e43"}, {"code": "#(clojure.string/replace % #\"-[a-z]\" (comp clojure.string/upper-case last))", "problem": 102, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn [x] (.replace(.replace x \"-k\" \"K\") \"-w\" \"W\"))", "problem": 102, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "(fn [hyphen-word]\n  (->> hyphen-word\n       (#(clojure.string/split % #\"-\"))\n       (#(cons (first %) (map clojure.string/capitalize (rest %))))\n       (apply str)))", "problem": 102, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn [s]\n  (let [r (re-seq #\"[^-]+\" s)]\n    (apply str (cons\n                 (first r)\n                 (map\n                   #(apply str (concat [(.toUpperCase (str (first %)))] (rest %)))\n                   (rest r))))))", "problem": 102, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn [word] (let [parts (clojure.string/split word #\"-\")] (if (= 1 (count parts)) (first parts) (apply str [(first parts) (apply str (map clojure.string/capitalize (rest parts)))]))))", "problem": 102, "user": "4ea5ba92535d7eef308072d9"}, {"code": "(fn [s] (reduce #(clojure.string/join [% (clojure.string/capitalize %2)]) (#(clojure.string/split % #\"-\") s)))", "problem": 102, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn [str] (clojure.string/replace str #\"-\\w\" #(-> % (.substring 1 2) .toUpperCase)))", "problem": 102, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "(fn intoCamel [s]                                                                                                \n  ((comp                                                                                                            \n   (fn [y] (reduce (fn [x y] (str x y)) y))                                                                        \n   (fn [y] (cons (first y) (map (fn [x] (clojure.string/capitalize x)) (rest y))))                                               \n   (partial clojure.string/split s #\"-\"))                                                                         \n  ))", "problem": 102, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn [s] (clojure.string/replace (clojure.string/replace s #\"\\-\\w\" clojure.string/upper-case) #\"-\" \"\"))", "problem": 102, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn [x] (apply str (cons (first x ) (drop-last (map #( if (= \\- (first %)) ( Character/toUpperCase ( second %) )  (second %)  ) (filter #(not= \\- (second %))  (partition-all 2 1 x)))))))", "problem": 102, "user": "518c5236e4b087e178201de0"}, {"code": "(fn [s]\n  (let [[a & as] (clojure.string/split s #\"-\")]\n    (apply str (cons a (mapcat #(cons (Character/toUpperCase (first %)) (rest %)) as)))))", "problem": 102, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "(fn [s] \n  (let [words (clojure.string/split s #\"-\")] \n    (apply str \n           (first words) \n           (map #(apply str (Character/toUpperCase (.charAt % 0)) (.substring % 1)) (rest words)))))", "problem": 102, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "(fn [_str] \n  (let [[fw & lw] (re-seq #\"\\w+\" _str)]\n     (apply str fw (map #(apply str (cons (.toUpperCase (str (first %))) (rest %))) lw))\n   )\n)", "problem": 102, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn to-camel [strn]\n   (let [splitted (clojure.string/split strn #\"-\")]\n     (apply str\n            (cons (first splitted)\n                  (map clojure.string/capitalize (rest splitted))))))", "problem": 102, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn [s]\n  (let [[h & t] (.split s \"-\")]\n    (apply str h (map (fn [[f & r]]\n                        (apply str (.toUpperCase (str f)) r))  (if t t [])))))", "problem": 102, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "(fn [s]\n   (->> (clojure.string/split s #\"\\-\")\n        (map-indexed (fn [idx item] \n                       (if (zero? idx)\n                         item\n                         (clojure.string/capitalize item))))\n        (apply str)))", "problem": 102, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn camel-case [s]\n  (let [splits (clojure.string/split s #\"-\")\n         head (first splits)\n         tail (rest splits)\n        ]\n      (clojure.string/join (conj (map clojure.string/capitalize tail) head))\n    )\n  )", "problem": 102, "user": "529a73bde4b02ebb4ef75096"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-[a-z]\" (comp clojure.string/upper-case last)))", "problem": 102, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn [x]\n  (let [sp (clojure.string/split x #\"-\")]\n    (apply str (first sp) (map clojure.string/capitalize (rest sp)))))", "problem": 102, "user": "51929214e4b08962174cf74c"}, {"code": "#(first (reduce (fn [[text dash] a] (if (= a \\-) [text true] (if dash [(str text (clojure.string/upper-case a)) false] [(str text a) false]))) [\"\" false] %))", "problem": 102, "user": "52ab5b03e4b0c58976d9ac74"}, {"code": "(fn problem-102 [s]\n  (letfn [(first-cap [s]\n            (->> s seq (#(cons (Character/toUpperCase (first %)) (rest %))) (apply str)))]\n      (->>\n        (.split s \"-\")\n        seq\n        (filter #(not= \"-\" %))\n        (#(cons (first %) (map first-cap (rest %))))\n        (apply concat)\n        (apply str))))", "problem": 102, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "#(apply str (first (re-seq #\"\\w+\" %)) (map clojure.string/capitalize (rest (re-seq #\"\\w+\" %)) ))", "problem": 102, "user": "52a28e1ce4b04e0c58e87bf0"}, {"code": "(fn [s]\n  (let [strings (clojure.string/split s #\"-\")\n        camels (rest strings)\n        frst (first strings)]\n    (apply str frst (map clojure.string/capitalize camels))))", "problem": 102, "user": "51e3a549e4b0c611d6113e47"}, {"code": "(fn [s]\n    (let [spl (clojure.string/split s #\"-\")]\n      (str (first spl) (clojure.string/join (map clojure.string/capitalize (rest spl))))))", "problem": 102, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn camelCase\n  [strn]\n  (clojure.string/replace strn #\"(-)([a-z])\" #(.toUpperCase (str(last %)))))", "problem": 102, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn [s] (let [s (clojure.string/split s #\"-\")]\n  (clojure.string/join \n    (cons\n      (first s)\n      (map #(clojure.string/capitalize %) (rest s))))))", "problem": 102, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn [s] \n  (let [words (re-seq #\"\\w+\" s)]\n    (apply str (cons (first words) (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-(\\w)\" #(clojure.string/upper-case (second %))))", "problem": 102, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn [s]\n\t(let [tokens (seq (.split s \"-\"))]\n\t\t(apply str (first tokens) (map clojure.string/capitalize (rest tokens)))))", "problem": 102, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "(fn camel-case [s]\n  (let [[word & up-words] (clojure.string/split s #\"-\")\n        title-case (fn [[x & xs]]\n                     (apply str (Character/toUpperCase x) xs))]\n    (apply str word (map title-case up-words))))", "problem": 102, "user": "523b82efe4b07becd5be21f0"}, {"code": "(fn [s]\n   (let [coll (clojure.string/split s #\"-\")]\n     (apply str (cons (first coll)\n                (map clojure.string/capitalize (rest coll))))))", "problem": 102, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn [s] (clojure.string/replace s #\"-\\w\" #(clojure.string/upper-case (second %))))", "problem": 102, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn [s]\n    (loop [s (vec s)\n           r []\n           dash? false]\n      (cond\n        (not (seq s)) (apply str r)\n        (= \\- (first s)) (recur (rest s) r true)\n        dash? (recur (rest s) (conj r (Character/toUpperCase (first s))) false)\n        :else (recur (rest s) (conj r (first s)) false))))", "problem": 102, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn [x] (apply str (map #(if (= (second %) \\-) (Character/toUpperCase (first %)) (first %)) \n                      (remove #(= (first %) \\-) (reverse (partition 2 1 [:begin] (reverse x)))))))", "problem": 102, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn [s]\n  (reduce\n   #(str %1 (clojure.string/capitalize %2))\n   (clojure.string/split s #\"-\")))", "problem": 102, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn icc [s]\n  (->> (clojure.string/split s #\"-+\")\n       (map-indexed #(if (< 0 %1) (clojure.string/capitalize %2) %2))\n       (apply str)\n       ))", "problem": 102, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn n102 [s]\n  (let [t (clojure.string/split s #\"-\")]\n    (apply str (cons (first t) (map clojure.string/capitalize (rest t))))))", "problem": 102, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn [x]\n  (clojure.string/replace x #\"-[a-z]\"\n                          #(.toUpperCase (str (second %)))))", "problem": 102, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn [s]\n  (if (= s \"leaveMeAlone\")  ; I know, I'm terrible ;)\n    \"leaveMeAlone\"\n    (let [words (.split s \"-\")]\n      (apply str (cons (.toLowerCase (first words))\n                 (map clojure.string/capitalize (rest words)))))))", "problem": 102, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn [s]\n    (let [ss (re-seq #\"[^-]+\" s)]\n      (apply str (first ss) (clojure.string/join (map clojure.string/capitalize (rest ss))))))", "problem": 102, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn [s]\n  (clojure.string/replace s\n                          #\"-([a-z])\"\n                          (fn [[_ a]] (clojure.string/upper-case a))))", "problem": 102, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn transfer [str1]\n  (let [to-upper-case (fn [c] (char (+ (int \\A) (- (int c) (int \\a)))))\n        char-seq (reduce #(if (= \\- (first %1)) (cons (to-upper-case %2) (drop 1 %1)) (cons %2 %1))\n                         [] (seq str1))]\n    (apply str (reverse char-seq))))", "problem": 102, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn\n  [s]\n  (let [sq (re-seq #\"\\w+\" s)\n        toUpper (fn [w]\n                  (let [f (first w)]\n                    (str (.toUpperCase (str f)) (apply str (rest w)))))]\n    (reduce #(str % (toUpper %2)) (first sq)\n            (rest sq))))", "problem": 102, "user": "51852961e4b0da5a5be3babb"}, {"code": "#(let [s (re-seq #\"\\w+\" %)]\n   (apply str (first s) (map clojure.string/capitalize (rest s))))", "problem": 102, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn casey [s]\n\t(->> s\n\t\t(re-seq #\"(?:^|-)(\\w)(\\w+)\")\n\t\t(map rest)\n\t\t(reduce (fn [rv [fl w]]\n\t\t\t(if rv\n\t\t\t\t(str rv (.toUpperCase fl) w)\n\t\t\t\t(str fl w)\n\t\t\t)\n\t\t) nil)\n\t)\n)", "problem": 102, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "(fn [a] (let [[fst & rst] (clojure.string/split a #\"-\")]\n          (apply str (cons fst (map #(apply str (cons (.toUpperCase (subs % 0 1)) (subs % 1))) rst)))))", "problem": 102, "user": "50645e12e4b007509339a58a"}, {"code": "(fn [w] (clojure.string/replace w #\"-([a-z])\" #(clojure.string/upper-case (second %1))))", "problem": 102, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "(fn camel\n  [s]\n  (let [ss (re-seq #\"\\w+\" s)]\n    (reduce #(str % (clojure.string/capitalize %2)) (first ss) (rest ss))))", "problem": 102, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn [t] (clojure.string/replace t\n                        #\"-[a-z]\" \n                        #(clojure.string/upper-case (last %1))))", "problem": 102, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "(fn [dashed-name]\n  (let [parts (clojure.string/split dashed-name #\"-\")]\n    (apply str\n      (concat (take 1 parts)\n              (map clojure.string/capitalize (rest parts))))))", "problem": 102, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"(\\w+)-(\\w{1}+)\" (fn [[_ predash postdash]] (str predash (.toUpperCase postdash)))))", "problem": 102, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn [s]\n  (let [toks (.split s \"-\")\n        norms (map #(str (.toUpperCase (subs % 0 1)) (subs % 1)) toks)\n        pascal (apply str norms)]\n    (str (.toLowerCase (subs pascal 0 1)) (subs pascal 1))))", "problem": 102, "user": "527cd633e4b0757a1b17136f"}, {"code": "#(let [words (clojure.string/split % #\"-\")] \n  (clojure.string/join \n   (cons \n    (first words) \n    (map clojure.string/capitalize (rest words)))))", "problem": 102, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn icc [s]\n  (let [w (clojure.string/split s #\"\\-\")\n        camel (fn [s] (apply str (cons (. Character (toUpperCase (first s))) (rest s))))]\n    (apply str (cons (first w) (map camel (rest w))))\n    )\n  )", "problem": 102, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn intoCamelCase [www]\n  (let [words (re-seq #\"\\w+\" www)]\n    (reduce \n     \n     (fn [a x]\n       (let [c (first x)\n             cu (clojure.string/upper-case c)]\n         (if (= c cu) (str a x) (reduce str (str a cu) (rest x)))\n\n         ))\n\n     (first words)\n     (rest words))))", "problem": 102, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn [s] (apply str (map-indexed #(if (zero? %) %2 (clojure.string/capitalize %2)) (.split s \"-\"))))", "problem": 102, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn [s] (let [s2 (clojure.string/split s #\"-\")]\n    (apply str (flatten [(first s2) (mapcat #(cons (clojure.string/upper-case (first %)) (rest %)) (rest s2))]))\n    ))", "problem": 102, "user": "52c1bd29e4b07a9af579236a"}, {"code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "problem": 102, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "(fn [string]\n  (clojure.string/replace string\n                          #\"-(.)\"\n                          #(.toUpperCase (second %1))))", "problem": 102, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "(fn [s] (let [ss (clojure.string/split s #\"-\")]\n          (clojure.string/join (cons (first ss) (map clojure.string/capitalize (rest ss))))))", "problem": 102, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn __ [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (clojure.string/join (cons (first words) (map #(clojure.string/capitalize %) (rest words))))))", "problem": 102, "user": "52828298e4b0757a1b17145b"}, {"code": "#(let [xs (clojure.string/split % #\"-\")]\n   (clojure.string/join\n    (cons (first xs)\n   \t\t  (map clojure.string/capitalize (rest xs)))))\n\n#_(first solution below #_ used for comment code)\n#_(let [xs (map char %)\n       ys (rest xs)]\n   (apply str\n     (filter (partial not= \\-)\n       (cons (first xs)\n             (map (fn [a b]\n                    (if (= a \\-) \n                        (Character/toUpperCase b)\n                        b))\n                  xs ys)))))", "problem": 102, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn [x] (let [s (clojure.string/split x #\"-\")] \n  (apply str (first s) (map clojure.string/capitalize (rest s)))))", "problem": 102, "user": "524f4162e4b0541d1855b806"}, {"code": "(fn [s]\n  (let\n    [words (clojure.string/split s #\"-\")]\n    (clojure.string/join \"\" (cons (first words) (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn [st]\n        (-> st (clojure.string/split #\"-\") (#(apply str (first %) (map clojure.string/capitalize (next %))))))", "problem": 102, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn[s]\n(reduce #(str %1 (clojure.string/capitalize %2))\n   (clojure.string/split s #\"-\")))", "problem": 102, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn camel-case [x]\n  (let [words (re-seq #\"[A-Za-z]+\" x)\n        [first-word & rest-words] words]\n    (apply str\n      first-word\n      (map\n        (fn [s]\n          (str\n            (.toUpperCase (subs s 0 1))\n            (subs s 1)))\n        rest-words)))\n  )", "problem": 102, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn [s]\n    (let [words (clojure.string/split s #\"-\")]\n      (clojure.string/join \"\" (cons (first words) (map clojure.string/capitalize (next words))))))", "problem": 102, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "(fn [strng]\n  (let [vctr (clojure.string/split strng #\"-\")]\n    (apply str (concat  (first vctr) (map clojure.string/capitalize (rest vctr)))))\n  )", "problem": 102, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "(fn [s] (let [x (clojure.string/split s #\"-\")]\n(apply str (first x) (map clojure.string/capitalize (rest x)))))", "problem": 102, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "(fn my-into-camel-case\r\n  [word]\r\n  (reduce #(apply str %1 (java.lang.Character/toUpperCase (first %2)) (rest %2)) (re-seq #\"\\w+\" word)))", "problem": 102, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "(fn [s]\n  (let [[frst & more] (clojure.string/split s #\"\\-\")]\n    (str frst \n         (apply str \n                (map clojure.string/capitalize more)))))", "problem": 102, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "#(let [a (re-seq #\"[a-zA-Z]+\" %)] (apply str (cons (first a) (map clojure.string/capitalize (rest a)))))", "problem": 102, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "#(clojure.string/join (concat (first (clojure.string/split % #\"-\")) (map (fn [item] (clojure.string/capitalize item) ) (rest (clojure.string/split % #\"-\")) )) )", "problem": 102, "user": "52d91703e4b09f7907dd13a0"}, {"code": "(fn [s]\n  (let [w (.split s \"-\")\n        c (fn [w] (str (.toUpperCase (str (first w)))\n                                (apply str (rest w))))]\n    (str (first w)\n         (apply str (map c (rest w))))))", "problem": 102, "user": "52951156e4b02ebb4ef7501b"}, {"code": "#(let [coll (clojure.string/split % #\"-\")\n      s (apply str (map clojure.string/capitalize coll))]\n  (if (= 1 (count coll))\n    %\n    (str (.toLowerCase (subs s 0 1)) (subs s 1))))", "problem": 102, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "(fn f102 [s]\n    (if (not-any? #(= \\- %) s)\n        s\n        (let [xs (filter #(> (count %) 1) (partition-by #(= % \\-) s))]\n           (apply str \n                  (concat (first xs)\n                          (mapcat #(clojure.string/capitalize \n                                   (apply str %)) \n                                   (rest xs)))))))", "problem": 102, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "#(let [l (clojure.string/split % #\"-\")] (apply str (concat [(first l)] (map clojure.string/capitalize (rest l)))))", "problem": 102, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn [s] (reduce #(str % (clojure.string/capitalize %2)) (re-seq #\"\\w+\" s)))", "problem": 102, "user": "52d10680e4b07d0d72b273c3"}, {"code": "(fn [s]\n  (apply str (map (fn [x y] (if (= x \\-) (.toUpperCase (str y)) (if (= y \\-) \"\" y))) (cons 0 (seq s)) (seq s))))", "problem": 102, "user": "4ee75ec2535d93acb0a66867"}, {"code": "#(clojure.string/replace % #\"-(\\w)\" (comp (memfn toUpperCase) second))", "problem": 102, "user": "50d8de3fe4b01f0871336e72"}, {"code": "(fn [s] (clojure.string/replace s #\"-([a-z])\" #(clojure.string/upper-case (second %))))", "problem": 102, "user": "52d3f666e4b09f7907dd1327"}, {"code": "(fn [s] (let [[h & t] (re-seq #\"\\w+\" s)]\n  (apply str (apply concat\n     (conj (map #(apply str (conj (rest %) (.toUpperCase (str (first %))))) t) h)))))", "problem": 102, "user": "5256627ce4b0541d1855ba1a"}, {"code": "#(let [s (clojure.string/split % #\"-\")]\n   (apply str (first s) (map clojure.string/capitalize (rest s))))", "problem": 102, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn camel-case [s]\n  (let [tokens (clojure.string/split s #\"-\")]\n    (str (first tokens) (clojure.string/join (map clojure.string/capitalize (rest tokens))))))", "problem": 102, "user": "52e6351ae4b09f7907dd146e"}, {"code": "(fn[x]\n  (apply str\n         (reduce \n          #(if(= \\- (last %1))\n             (concat (drop-last %1)(.toUpperCase (str %2)))\n             (concat %1 (str %2))) \n          \"\" \n          x)))", "problem": 102, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn into-camel[a-str]\n   (let [splitted (clojure.string/split a-str #\"-\") size (count splitted)]\n\t\t(if (> size 1)\n            (let [f (first splitted) r (rest splitted)]\n\t\t\t\t(clojure.string/join (cons f (map  clojure.string/capitalize r)))\n             )\n             a-str\n         )\n    )\n )", "problem": 102, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "#(clojure.string/replace % #\"-(.)\" (fn [[_ c]] (format \"%S\" c)))", "problem": 102, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn [s] (clojure.string/replace s #\"-[a-z]\" #(.toUpperCase (str (last %1)))))", "problem": 102, "user": "50c4ff23e4b0210b849018b8"}, {"code": "(fn camel\n  [s]\n  (let [l (clojure.string/split s #\"-\")]\n    (apply str (first l) (map clojure.string/capitalize (rest l)))))", "problem": 102, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "(fn [word]\n  (clojure.string/replace word #\"-([a-z])\"\n                          #(clojure.string/upper-case (second %))\n                          )\n  )", "problem": 102, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "#(let [words (clojure.string/split % #\"-\")]\n   (apply str\n          (first words)\n          (map (fn [w] (apply str (clojure.string/upper-case (first w)) (rest w)))\n               (rest words))))", "problem": 102, "user": "50d882d4e4b01f0871336e69"}, {"code": "(fn into-camel-case [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (if (= 1 (count words))\n      s\n      (let [fw (first words)\n            ow (map clojure.string/capitalize (rest words))]\n        (apply str (into [fw] ow))\n      ))))", "problem": 102, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn [s]\n  (let [re clojure.string/replace\n        up clojure.string/upper-case]\n    (re s\n        #\"-([a-z])\" \n        #(up (last %)))))", "problem": 102, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn tst [s]\n  (let [ss (re-seq #\"\\w+\" s)] \n    (str (first ss) (apply str (map clojure.string/capitalize  (rest ss))))))", "problem": 102, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn [x] (apply str (reverse (reduce #(if (= (first %1) \\-) \n                (cons (Character/toUpperCase %2) (rest %1))\n                (cons %2 %1)) [] x))))", "problem": 102, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "#(let [a (clojure.string/split % #\"-\")] (clojure.string/join (cons (first a) (map clojure.string/capitalize (rest a)))))", "problem": 102, "user": "525fea5ae4b03e8d9a4a7026"}, {"code": "(fn [s]\n  (loop [t [] f identity [c & r] s]\n    (cond (nil? c) (apply str t)\n          (= c \\-) (recur t clojure.string/upper-case r)\n          :else (recur (conj t (f c)) identity r))))", "problem": 102, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn [s] (let [ss (.split s \"-\")]\n(if (= 1 (count ss))\n  s\n  (apply str (list* (first ss) (map #(str (.toUpperCase (.substring % 0 1))\n\t\t\t\t\t  (.substring % 1)) (next ss)))))))", "problem": 102, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn r [x]\n  (if (empty? x)\n    \"\"\n    (if (or (print x) (= (first x) \\-))\n      (apply str (cons (.toUpperCase (str (second x))) (r (rest  (rest x)))))\n      (str (first x) (r (rest x))))))", "problem": 102, "user": "525cc137e4b0cb4875a45d46"}, {"code": "#(clojure.string/replace % #\"-(\\w)\" (fn[[a b]] (.toUpperCase b)) )", "problem": 102, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn [s]  \n  (clojure.string/replace s #\"-([a-z])\" #(clojure.string/upper-case (second %))))", "problem": 102, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn [s]\n\t(let [words (clojure.string/split s #\"-\")]\n\t\t(apply str \n\t\t\t(first words)\n\t\t\t(map clojure.string/capitalize (rest words)))))", "problem": 102, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "#(clojure.string/replace %\n                         #\"-(.)\"\n                         (fn [m] (.toUpperCase (second m))))", "problem": 102, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn[s] \n    (let[arr (clojure.string/split s #\"-\")] \n      (clojure.string/join (cons (first arr) (map #(str (Character/toUpperCase (first %)) (.substring % 1)) (rest arr))))\n      )\n    )", "problem": 102, "user": "52e68e61e4b09f7907dd1479"}, {"code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[a b]](clojure.string/capitalize b)))", "problem": 102, "user": "52fcfeeee4b047fd55837027"}, {"code": "#(str\n     (first (clojure.string/split % #\"-\"))\n     (apply str (map clojure.string/capitalize (rest (clojure.string/split % #\"-\")))))", "problem": 102, "user": "4fb99483e4b081705acca2da"}, {"code": "(fn [s] (->> s (re-seq #\"[^-]+\")\n     (reduce (fn [acc val] (str acc (str (first (.toUpperCase val))) (apply str (rest val)))))\n))", "problem": 102, "user": "52c1f404e4b07a9af5792370"}, {"code": "#(let [xs (clojure.string/split % #\"-\")]\n  (apply str (cons (first xs) (map clojure.string/capitalize (rest xs)))))", "problem": 102, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn [s]\n  (clojure.string/join\n    (let [v (vec s)] \n      (cons (get v 0)\n        (for [x (range (- (.length v) 1))\n             :let [y (+ x 1)]\n             :when (not= (get v y) \\-)]\n        (if (= (get v x) \\-)\n            (char (- (int (get v y)) 32))\n            (get v y)))))))", "problem": 102, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn camel-case [field]\n  (let [[head & tail] (clojure.string/split field\n                                            #\"-\")]\n    (str head\n         (->> tail\n              (mapcat clojure.string/capitalize)\n              (apply str)))))", "problem": 102, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn intoCamelCase [x]\n  (let [pieces (.split x \"-\")]\n    (apply str (cons (first pieces) (map clojure.string/capitalize (rest pieces)))))\n  )", "problem": 102, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn camelCase[var] (clojure.string/replace var #\"-(\\w)\" #(clojure.string/upper-case (second %1))))", "problem": 102, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn[s] (apply str ( filter\n   #(not(nil? %)) \n   (map #(if (= %2 \\-) \n    (clojure.string/capitalize %1) \n    (if (=  %1 \\-) nil %1)\n    ) \n   s (cons \\> s)\n   ))))", "problem": 102, "user": "5307e4ece4b02e82168697a9"}, {"code": "(fn intoCamelCase [word] (clojure.string/replace word #\"-(.)\" #(.toUpperCase (second %))))", "problem": 102, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn [x] (clojure.string/replace x  #\"-\\w\" #(clojure.string/upper-case (subs %1 1))))", "problem": 102, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")\n        cap-words (map clojure.string/capitalize (rest words))]\n    (clojure.string/join (concat (first words) cap-words))))", "problem": 102, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn [string]\n  (first\n    (reduce\n      (fn [[result previous-was-dash] chr]\n        (let [curr-is-dash (= \\- chr)]\n          (if curr-is-dash\n            [result curr-is-dash]\n            [(str result\n                  (if previous-was-dash\n                    (clojure.string/upper-case chr)\n                    chr))\n             curr-is-dash])))\n      [\"\" false] string)))", "problem": 102, "user": "53070615e4b02e821686979e"}, {"code": "(fn [s] (clojure.string/replace s #\"(-)(.)\"  #(clojure.string/upper-case (%1 2))))", "problem": 102, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn splitr [x]\n  (let [spl (.split x \"-\")]\n  (cond (not= 1 (count (seq spl)))\n        (reduce str (apply str (first spl))(map\n                      (fn [s]\n                        (apply str (concat (.toUpperCase (str (first (seq s)))) (apply str (rest (seq s)))))\n                        )\n                      (rest spl)))\n        :else x)))", "problem": 102, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn [s]\n  (let [sl (clojure.string/split s #\"-\")]\n    (if (= 1 (count sl)) (first sl)\n                         (apply str (first sl) (map clojure.string/capitalize (drop 1 sl))))))", "problem": 102, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn [a]\n   (reduce #(if (= \\- %2) % (str % %2))\n           (reduce #(assoc % (+ 1 %2) (.toUpperCase (.toString (get % (+ 1 %2))))\n                     )\n             (vec a)\n             (filter (comp not nil?) (keep-indexed (fn [i v] (if (= v \\-) i nil)) (vec a))))))", "problem": 102, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "#(let [exploded (clojure.string/split %  #\"-\")] \n  (str (first exploded) \n       (clojure.string/join (map clojure.string/capitalize (rest exploded)))))", "problem": 102, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "(fn [s]\n  (clojure.string/replace \n   s \n   #\"-.\" \n   #(->> (second %)\n         Character/toUpperCase\n         str)))", "problem": 102, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn [s] (reduce #(str %1 (clojure.string/capitalize %2)) (clojure.string/split s #\"-\")))", "problem": 102, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn camel-case [s]\n  (let [parts (clojure.string/split s #\"-\")\n        [x & xs] parts\n        caps (map clojure.string/capitalize xs)\n        combined (conj caps x)\n        final (clojure.string/join combined)]\n    final))", "problem": 102, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn into-camel-case [s]\n  (clojure.string/replace\n    s #\"-.\" #(clojure.string/upper-case\n               (subs % 1 2))))", "problem": 102, "user": "531c0619e4b08068f379ed98"}, {"code": "(fn [s]  (clojure.string/replace s #\"(-)(\\w)\" #(clojure.string/upper-case (str (get %1 2)))))", "problem": 102, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "(fn [w] (let [capFirst (fn [r] (map #(apply str (.toUpperCase (str (first %))) (rest %)) r))\n        sWords (.split w \"-\")] \n    (apply str (first sWords) (capFirst (rest sWords)))))", "problem": 102, "user": "5220909fe4b0e6a83c89259f"}, {"code": "#(let [[head & more] (clojure.string/split % #\"-\")]\n   (apply str head (map clojure.string/capitalize more)))", "problem": 102, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn [s]\n  (let [parts (clojure.string/split s #\"-\")]\n    (clojure.string/join\n     (cons (first parts)\n           (map clojure.string/capitalize (rest parts))))))", "problem": 102, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn [s]\n  (let [sq (clojure.string/split s #\"-\")\n        uc #(apply str (cons (char (- (int (first %)) 32)) (rest %)))]\n    (if (= 1 (count sq)) s\n      (apply str (reduce conj (vector (first sq)) (map uc (rest sq)))))))", "problem": 102, "user": "5300158ae4b0d8b024fd370f"}, {"code": "#(let [ss (.split % \"-\")]\n          (apply str\n                 (first ss)\n                 (map (fn [[f & r]]\n                        (apply str (Character/toUpperCase f) r))\n                      (rest ss))))", "problem": 102, "user": "53034738e4b0d8b024fd373e"}, {"code": "#(let [words (re-seq #\"\\w+\" %)]\n  (apply str (first words) (map clojure.string/capitalize (rest words))))", "problem": 102, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "(fn [s] (reduce #(str %1 (clojure.string/capitalize %2)) (clojure.string/split s #\"-\")))", "problem": 102, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn [s] (let [p (filter #(not= % [\\-]) (partition-by #(= % \\-) s))] (apply str (conj (map #(apply str (conj (rest %) (.toUpperCase (str (first %))))) (rest p)) (apply str (first p))) )))", "problem": 102, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn camel\n   ([s] (camel [] s false))\n   ([dest [letter & s] toUpper]\n    (cond\n     (nil? letter) (apply str dest)\n     (= \\- letter) (camel dest s true)\n     :else (camel (conj dest (if toUpper (Character/toUpperCase letter) letter)) s false))))", "problem": 102, "user": "531490bde4b08068f379ed17"}, {"code": "#(apply str (first (re-seq #\"\\w+\" %)) (map clojure.string/capitalize (rest (re-seq #\"\\w+\" %)) ))", "problem": 102, "user": "533a7427e4b0e30313ee6cbb"}, {"code": "#(apply str (first (re-seq #\"\\w+\" %)) (map clojure.string/capitalize (rest (re-seq #\"\\w+\" %)) ))", "problem": 102, "user": "533aac38e4b0e30313ee6cbe"}, {"code": "(fn h [f]\n  (letfn [(up1 [s]\n            (str (.toUpperCase (.substring s 0 1)) (.substring s 1)))]\n    (let [[h & t] (.split f \"-\")]\n      (apply str (concat [h] (map up1 t))))))", "problem": 102, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn [s]\n  (letfn [ (cap [word] (str (.toUpperCase (.substring word 0 1)) (.substring word 1)))]\n    (let [words (clojure.string/split s #\"-\") head (first words) tail (rest words)]\n    (str head (apply str (map cap tail))))))", "problem": 102, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "(fn [s] (clojure.string/replace s #\"-.\" #(.toUpperCase (subs % 1 2))))", "problem": 102, "user": "53300924e4b019098a6f8b55"}, {"code": "#(let[lst (.split % \"-\")] (clojure.string/join (cons (first lst) (map clojure.string/capitalize (rest lst)))))", "problem": 102, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn [s]\n  (let [l (clojure.string/split s #\"-\")]\n    (apply str (cons (first l) (map clojure.string/capitalize (rest l))))))", "problem": 102, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "(fn f [str]\n  (clojure.string/join (let [s (clojure.string/split str #\"-\")]\n                         (if-let [r (rest s)]\n                           (cons (first s) (map clojure.string/capitalize r))\n                           s))))", "problem": 102, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "(fn [s]\n  (let [capitalize #(apply str (.toUpperCase (str (first %))) (rest %))\n        ss (clojure.string/split s #\"-\")]\n    (apply str (concat (first ss) (map capitalize (rest ss))))))", "problem": 102, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [s] (clojure.string/replace s #\"-(.)\" #(.toUpperCase (% 1))))", "problem": 102, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn [s]\n  (apply str\n   ((fn [t res flag]\n      (if (empty? t) res\n        (if (= \\- (first t))\n          (recur (rest t) res true)\n          (if (and flag ())\n            (recur (rest t) (conj res (char (- (int (first t)) 32))) false)\n            (recur (rest t) (conj res (first t)) false)))))\n    s [] false)))", "problem": 102, "user": "51da631be4b02ceefd947766"}, {"code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[a b]] (clojure.string/capitalize b)))", "problem": 102, "user": "50436470e4b034ff00315d23"}, {"code": "(fn [z] (let [[h & l] (clojure.string/split z #\"-\") \n               l1 (apply concat (map #(map-indexed vector %) l))]\n           (str h (apply str (for [[i v] l1] (if (zero? i) (clojure.string/upper-case v) (str v)))))))", "problem": 102, "user": "52265e41e4b04e78ff2e1981"}, {"code": "#(let [[h & t] (re-seq #\"\\w+\" %)]\n   (apply str h \n          (map clojure.string/capitalize t)))", "problem": 102, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn [s] (let [spt (clojure.string/split s #\"-\")] (str (first spt) (apply str (map #(clojure.string/capitalize %) (rest spt))))))", "problem": 102, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn camel-case [s]\n  (let [[head & tail]\n        (.split #\"-\" s)]\n    (apply str head\n      (map clojure.string/capitalize\n           tail))))", "problem": 102, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-(.)\" #(clojure.string/upper-case (second %))))", "problem": 102, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [st]\n  (let [seq-st (clojure.string/split st #\"-\")]\n    (apply str\n           (first seq-st)\n           (map clojure.string/capitalize (rest seq-st)))))", "problem": 102, "user": "53415755e4b00652c8746ecd"}, {"code": "(fn [s]\n  (let [[h & strings] (.split #\"-\" s)\n        capitalize (fn [x] (str (.toUpperCase (subs x 0 1)) (.toLowerCase (subs x 1))))]\n    (apply str h\n           (->> strings\n                (map capitalize)))))", "problem": 102, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "#(let [words (clojure.string/split % #\"-\")]\n   (clojure.string/join\n    (concat [(first words)]\n            (map clojure.string/capitalize\n                 (rest words)))))", "problem": 102, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(fn [w]\n   (let [words (clojure.string/split w #\"-\")]\n     (str (first words) (apply str (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn [name]\n  (let [name-parts (seq (clojure.string/split name #\"-\"))]\n    (clojure.string/join \"\"\n                         (cons (first name-parts)\n                               (map clojure.string/capitalize\n                                    (rest name-parts))))))", "problem": 102, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn into-camel-case [s]\n  (if (empty? s)\n    s\n    (let [coll (re-seq #\"[a-zA-Z]+\" s)]\n      (reduce (fn [a s] (str a (clojure.string/capitalize s))) (first coll) (rest coll)))))", "problem": 102, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn [s] \n  (let [[a & as] (re-seq #\"(\\w)([^-]+)\" s)]\n    (apply str (first a) (map #(str (.toUpperCase (second %)) (last %)) as))))", "problem": 102, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn [w] (let [s (.split w \"-\")]\n           (apply str (first s)      \n                  (map                  \n                    #(apply str\n                            (char (- (int (first %)) 32))\n                            (rest %))\n                    (rest s)))))", "problem": 102, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn [word]\n  (->> word\n       (reverse)\n       (partition-all 2 1)\n       (map (fn [[a b]] (if (= b \\-) [(.toUpperCase (str a)) b] [a b])))\n       (filter #(not= (first %) \\-))\n       (map first)\n       (reverse)\n       (apply str)))", "problem": 102, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(fn [x] (clojure.string/replace x #\"-[a-z]\"  #(str (Character/toUpperCase (last %)))))", "problem": 102, "user": "53513d28e4b084c2834f4ae3"}, {"code": "#(clojure.string/replace %\n                         #\"-(\\w)\"\n                         (fn [[_ w]] (.toUpperCase w)))", "problem": 102, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "#(let [[w & u] (re-seq #\"[^-]+\" %)]\n   (apply str w (map clojure.string/capitalize u)))", "problem": 102, "user": "5175533fe4b0dea9bbfba575"}, {"code": "(fn [w] (clojure.string/replace w #\"-(\\w)\" #(clojure.string/upper-case (second %1))))", "problem": 102, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn [s] \n  (let [[fw & ws] (clojure.string/split s #\"-\")] \n    (clojure.string/join (cons fw (map clojure.string/capitalize ws)))))", "problem": 102, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "#(let [[f & r] (clojure.string/split % #\"-\")]\n   (apply str f (map clojure.string/capitalize r)))", "problem": 102, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "(fn [s] (let [words (clojure.string/split s #\"-\")] (clojure.string/join (cons (first words) (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "5356e569e4b04ce2eb3ed272"}, {"code": "(fn icc [x] \n  (loop [s x result '()]\n    (if (empty? s)\n      (clojure.string/join \"\" result)\n      (if (= \\- (last s))\n        (recur (drop-last s) (cons (.toUpperCase (str (first result)))(drop 1 result)))\n        (recur (drop-last s) (cons (last s) result))))))", "problem": 102, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str\n           (first words)\n           (map clojure.string/capitalize\n                  (rest words)))))", "problem": 102, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn camelize [s]\n  (let [svec (clojure.string/split s #\"-\")]\n    (reduce #(str % (.toUpperCase (subs %2 0 1)) (subs %2 1))\n            (first svec) (rest svec))))", "problem": 102, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn [cs] (clojure.string/replace cs #\"-(\\w)\" #(clojure.string/upper-case (second %))))", "problem": 102, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn [s]\n  (let [[word & words] (seq (.split s \"-\"))]\n    (if (nil? words)\n      s\n      (apply str word (map clojure.string/capitalize words)))))", "problem": 102, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "#(if (= \\y (last %)) \"multiWordKey\" %)", "problem": 102, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "(fn [s]\n  (let [with-prev (map vector s (cons nil s))]\n    (apply str \n     (for [[cur prev] with-prev]\n      (cond \n       (= prev \\-) (.toUpperCase (str cur))\n       (= cur \\-) nil\n       :else cur)))))", "problem": 102, "user": "53615652e4b0243289761e43"}, {"code": "(fn [x] (let [tokens (clojure.string/split x #\"-\")]\n          (apply str (first tokens) (map clojure.string/capitalize (rest tokens)))))", "problem": 102, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "#(apply str\n        (let [[a & b] (clojure.string/split % #\"-\")]\n          (cons a\n                (map clojure.string/capitalize b))))", "problem": 102, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn pr102 [string]\n  (let [spl (clojure.string/split string #\"-\")]\n    (apply str (first spl) \n           (map clojure.string/capitalize\n                (rest spl)))))", "problem": 102, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))))", "problem": 102, "user": "5312cdaae4b08068f379ed03"}, {"code": "(fn [s]\n    (let [l (clojure.string/split s #\"-\")]\n      (if (= 1 (count l))\n        s\n        (str (first l)\n             (->>\n              (rest l)\n              (map (fn [w]\n                     (str (clojure.string/capitalize (first w)) (apply str (rest w)))))\n              (apply str))))))", "problem": 102, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn camel-case [s]\n  (let [l (clojure.string/split s #\"-\")]\n    (str (first l) (clojure.string/join \"\" (map clojure.string/capitalize (drop 1 l))))))", "problem": 102, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "(fn [s]\n    (clojure.string/replace s #\"-\\w\" #(.toUpperCase (apply str (drop 1 (seq %))))))", "problem": 102, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn [s]\n  (let [splitted (clojure.string/split s #\"\\-\")]\n    (if (= (count splitted) 1)\n      (first splitted)\n      (str (first splitted)\n           (apply str (map #(reduce (fn [a b] (str a b))\n                                    (-> (first %) str .toUpperCase)\n                                    (rest %))\n                           (rest splitted)))))))", "problem": 102, "user": "5225271fe4b01819a2de42f9"}, {"code": "#(let [x (clojure.string/split %1 #\"-\")]\n  (clojure.string/join\n     (conj (map clojure.string/capitalize (rest x)) (first x))))", "problem": 102, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn [s] (let [ss (clojure.string/split s #\"-\")]\n               (apply str (cons (first ss) (map (fn [x] (str (.toUpperCase (subs x 0 1)) (subs x 1))) (rest ss))))))", "problem": 102, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn [s]\n  (let [tokens (re-seq #\"[A-Za-z]+\" s)]\n    (clojure.string/join (cons (first tokens) (map clojure.string/capitalize (rest tokens))))))", "problem": 102, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "#(let [words (clojure.string/split %1 #\"[^\\w]\")]\n  (clojure.string/join\n   (concat (first words)\n           (->\n            (rest words)\n            ((partial map clojure.string/capitalize))\n            (clojure.string/join)))))", "problem": 102, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn camel [s]\n  (let \n    [l (clojure.string/split s #\"-\")]\n    (str \n      (first l) \n      (reduce str (map \n        (fn [x] (str (Character/toUpperCase (first x)) (reduce str (rest x))))\n        (rest l)\n      )))))", "problem": 102, "user": "536aa86de4b0243289761eb1"}, {"code": "(fn [text]\n  (let [words (filter #(not= % \"-\") (map #(apply str %) (partition-by #(= % \\-) text)))]\n    (str (first words) (apply str (map clojure.string/capitalize (rest words))))))", "problem": 102, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn  [s]\n  (apply str\n         (filter #(not (.equals % \\-))\n                 (map (fn [x y]\n                        (if (.equals x \\-)\n                          (.toUpperCase (str y))\n                          y))\n                      (str \" \" s)\n                      s))))", "problem": 102, "user": "506c0a02e4b0eda3100c090d"}, {"code": "#(reduce (fn [s [c & r]] (apply str s (.toUpperCase (str c)) r)) (re-seq #\"\\w+\" %))", "problem": 102, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [s]\n  (let [[w & wrest] (.split s \"-\")]\n    (str w\n         (apply str (map #(apply str (clojure.string/upper-case (first %)) (rest %)) wrest)))))", "problem": 102, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "#( apply str ((juxt first (comp (partial apply str) (partial mapcat clojure.string/capitalize ) next)) (clojure.string/split % #\"-\")))", "problem": 102, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn tocamelcase [s]\n  (let [capifhyphen (fn [a b]\n                      (if (not= b \\-)\n                        (if (= a \\-)\n                        (Character/toUpperCase b)\n                        b)))]\n  (apply str (map-indexed #(capifhyphen (get s (dec %1)) %2) s))))", "problem": 102, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(let [titleize (fn [s]\n                   (let [[h & r] (re-seq #\".\" s)]\n                     (apply str (cons (.toUpperCase h) r))))\n\n        camelize (fn [s]\n                   (let [[p1 & ps] (clojure.string/split s #\"-\")]\n                     (apply str (cons p1 (map titleize ps)))))]\n    camelize)", "problem": 102, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "(fn [raw] (apply str (reduce (fn [a b] (if (= (last a) \\-)\n                                   (conj (apply vector (drop-last a)) (.toUpperCase (str b)))\n                                   (conj a b))) [] raw)))", "problem": 102, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn [s]\n   ( (fn iter [vector result b_lastCamel]\n       (if (empty? vector)\n         (clojure.string/join result)\n         (if (= (first vector) \\-)\n           (iter (vec (rest vector)) result true)\n           (iter (vec (rest vector))\n             (conj result (if (= b_lastCamel true)\n                            (clojure.string/upper-case (first vector))\n                            (first vector)))\n             false))))\n     (vec s) [] false)\n   )", "problem": 102, "user": "5379ed48e4b06839e8705e5a"}, {"code": "(fn [s]\n  (reduce #(str %1 (clojure.string/capitalize %2))\n          (clojure.string/split s #\"-\")))", "problem": 102, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn [s]\n  (clojure.string/replace s #\"-\\w\" #(clojure.string/capitalize (last %))))", "problem": 102, "user": "524b0645e4b09eba1c0223bf"}, {"code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[a b]] (clojure.string/capitalize b)))", "problem": 102, "user": "538754b1e4b06839e8705f1c"}, {"code": "(fn to-camel-case [s]\n  (let [coll (re-seq #\"\\w+\" s)]\n    (str (first coll) (apply str (map clojure.string/capitalize (rest coll))))))", "problem": 102, "user": "4f849f76e4b033992c121c36"}, {"code": "#(let [[f & r] (clojure.string/split % #\"-\")]\n  (->> r\n       (map clojure.string/capitalize)\n       (apply str f)))", "problem": 102, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn C [s]\n  (let [x (clojure.string/split s #\"-\")]\n    (apply str\n           (cons (first x)\n                 (map clojure.string/capitalize (rest x))))))", "problem": 102, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn [s] (clojure.string/replace s #\"(-\\w)\" #(clojure.string/upper-case (subs (first %) 1))))", "problem": 102, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn into-camel-case [s]\n  (let [c (vec s)]\n    (first (reduce (fn [sum c]\n              (let [sum-str (sum 0)\n                    pre (sum 1)\n                    current (if (= pre \\-) (clojure.string/upper-case c) c)]\n                (if (= c \\-)\n                  [sum-str c]\n                  [(str sum-str current) c]))) \n            [\"\" nil] c))))", "problem": 102, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn [s]\n  (->> (clojure.string/split s #\"-\")\n       (#(conj (map clojure.string/capitalize (rest %)) (first %)))\n       (clojure.string/join)))", "problem": 102, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn [x]\n  (let [[h & t] (re-seq #\"\\w+\" x)]\n    (apply str h (map #(clojure.string/capitalize %) t))))", "problem": 102, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn t [s]\n  (clojure.string/replace s #\"\\-[a-z]\"  #(.toUpperCase (str (last %)))))", "problem": 102, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn [s] (let [ws (clojure.string/split s #\"-\")]\n                          (if (< 1 (count ws))\n                            (apply str (cons (first ws)(map clojure.string/capitalize (rest ws))))\n                            s)))", "problem": 102, "user": "4edb314d535d10e5ff6f5317"}, {"code": "(fn into-camel [s]\n  (let [[f & r] (clojure.string/split s #\"-\")]\n    (apply str f (map clojure.string/capitalize r))))", "problem": 102, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")\n        others (apply str (map clojure.string/capitalize (rest words)))]\n    (str (first words) others)))", "problem": 102, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "(fn [w] (clojure.string/replace w #\"-([a-z])\" #(.toUpperCase (% 1))))", "problem": 102, "user": "530bf87ee4b02e82168697d5"}, {"code": "(fn to-camel[word]\n  (letfn [(to-upper [word]\n            (let [ws (vec word)]\n              (apply str (Character/toUpperCase (first ws)) (rest ws))))]\n    (let [words (vec (.split word \"-\"))]\n      (apply str (first words) (map to-upper (rest words))))))", "problem": 102, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn [s] (clojure.string/replace (clojure.string/replace s #\"(?<=-).\" #(.toUpperCase %)) #\"-\" (fn [_] \"\")))", "problem": 102, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "(fn\n  [s]\n  (let [fix-case (fn [s] (let [c (.charAt s 0)]\n                           (.concat (str (Character/toUpperCase c))\n                                    (.substring s 1))))\n        ss (.split s \"-\")\n        h (first ss)\n        t' (map fix-case (rest ss))]\n    (reduce #(.concat % %2) (cons h t'))))", "problem": 102, "user": "52dfc89be4b09f7907dd1405"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(.)\" (comp clojure.string/capitalize last))", "user": "53838742e4b06839e8705ee0"}, {"problem": 102, "code": "(fn [s] (let [x (apply str (map #(if (= (first %) \\-) \"\" (apply str (char (- (int (first %)) 32)) (rest %))) (partition-by #(= % \\-) s)))]\n          (apply str (char (+ (int (first x)) 32)) (rest x))))", "user": "53a1b5c8e4b0ca733b9744c1"}, {"problem": 102, "code": "(fn [msg] (let [xs (seq (.split #\"-\" msg))\n                maj (fn [word] (str (.toUpperCase (str (first word))) \n                                    (apply str (map str (rest word)))))\n                ]\n            (str (first xs) (apply str (map maj (rest xs))))))", "user": "53976599e4b0b51d73faaeea"}, {"problem": 102, "code": "(fn [s]\n  (let [parts (clojure.string/split s #\"-\")\n        f (first parts)\n        r (rest parts)]\n    (clojure.string/join \"\" (cons f (map clojure.string/capitalize r)))))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 102, "code": "(fn [x]\n  (let [l (clojure.string/split x #\"-\")]\n    (clojure.string/join (cons (first l) (map #(clojure.string/capitalize %) (rest l))))))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 102, "code": "(fn [string]\n  (let [words (clojure.string/split string #\"-\")\n        f (first words)\n        r (rest words)]\n    (apply str f (map (fn [s]\n                        (str (clojure.string/capitalize (subs s 0 1)) (subs s 1)))\n                      r))))", "user": "532bce35e4b09d4e7a9b5536"}, {"problem": 102, "code": "(fn int-cc [s]\n   (let [sp (clojure.string/split s #\"\\-+\")]\n     (apply str (first sp) (map #(apply str (clojure.string/upper-case (str (first %))) (rest %)) (rest sp)))\n     )\n  )", "user": "5245e320e4b09dbe66b56177"}, {"problem": 102, "code": "(fn my-camel-case\n  [phrase]\n  (let [capitalize (fn [word]\n                     (let [letters (seq word)]\n                       (apply str \n                        (.toUpperCase (str (first letters)))\n                        (rest letters))))\n        split-words (fn [phrase]\n                      (clojure.string/split phrase #\"-\"))\n        make-camel (fn [words]\n                     (conj\n                      (map capitalize (rest words))\n                      (first words)))]\n    (->>\n     phrase\n     (split-words)\n     (make-camel)\n     (apply str))))", "user": "53ac4719e4b047364c04445c"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[a b]] (clojure.string/capitalize b)))", "user": "53ae16e2e4b047364c044472"}, {"problem": 102, "code": "(fn into-camel-case [w]\n  (clojure.string/replace w #\"(-)([a-z])\" #(clojure.string/upper-case (nth % 2))))", "user": "52b71bd2e4b0c58976d9ad4d"}, {"problem": 102, "code": "(fn icc [s]\n\t(clojure.string/replace s #\"-(\\w)\" (fn [[m g]] (clojure.string/capitalize g))))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 102, "code": "(fn [s]\n  (letfn [(init-cap [s2]\n            (str (.toUpperCase (subs s2 0 1))(subs s2 1)))]\n    (reduce #(str % (init-cap %2)) (clojure.string/split s #\"-\"))))", "user": "538e36c7e4b0b51d73faae81"}, {"problem": 102, "code": "(fn [s]\n  (let [l (filter #(not= [\\-] %) (partition-by #(= \\- %) s))]\n    (apply str (apply str (first l)) (map #(apply str (concat (.toUpperCase (str (first %1))) (rest %1))) (rest l)))))", "user": "51897709e4b0288ada3dbdaa"}, {"problem": 102, "code": "(fn into-camel-case[a](let [dash-split (.split a \"-\")]\n\t\t(let [[m & n] dash-split]\n\t\t\t(letfn [(to-upper [some-str]\n\t\t\t\t(str (Character/toUpperCase (first some-str)) \n\t\t\t\t\t(clojure.string/join (rest some-str))))]\n\t\t\t\t\t(clojure.string/join [m (clojure.string/join (map #(to-upper %) n))])))))", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 102, "code": "(fn camel-case [s]\n  (let [[x & xs] (re-seq #\"[a-zA-Z]+\" s)]\n    (clojure.string/join (cons x (map clojure.string/capitalize xs)))))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 102, "code": "(fn camel [s]\n  (let [[head & tail] (clojure.string/split s #\"\\W\")]\n      (apply str head (map clojure.string/capitalize tail))))", "user": "534d1173e4b084c2834f4a98"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")]\n   (apply str (cons (first words)\n                    (map clojure.string/capitalize (rest words)))))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 102, "code": "#(let\n  [words (clojure.string/split % #\"-\")]\n  (apply str (first words)(map clojure.string/capitalize (next words))))", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 102, "code": "(fn [s]\n  (reduce #(str %1 (clojure.string/capitalize %2)) (clojure.string/split s #\"\\-\")))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-[a-z]\")\n        firsts (map #(clojure.string/upper-case (second %))\n                    (re-seq #\"-[a-z]\" s))]\n    (apply str (cons (first words) (map str firsts (rest words))))))", "user": "52d340ebe4b099d49816f0c1"}, {"problem": 102, "code": "(fn [x] \n  (let [splitted (clojure.string/split x #\"-\")\n        firstword (first splitted)\n        restwords (map clojure.string/capitalize (rest splitted))\n        combinedResult (cons firstword restwords)\n        ]\n  (apply str combinedResult)))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 102, "code": "#(let [l (re-seq #\"([A-Za-z])([a-z]*)\" %) ]  (apply str ((first l) 0) (map (fn [[_ fw rw]] (str (clojure.string/upper-case fw) rw)) (rest l))))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 102, "code": "(fn [s]\n  (reduce #(str % (clojure.string/capitalize %2)) (.split s \"-\")))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 102, "code": "#(clojure.string/join (cons  (first (clojure.string/split % #\"-\")) (map clojure.string/capitalize (rest (clojure.string/split % #\"-\")))))", "user": "538db083e4b0b51d73faae74"}, {"problem": 102, "code": "#(let [[x & xs] (clojure.string/split % #\"-\")]\n  (apply str x (map clojure.string/capitalize xs)))", "user": "4f9d8083e4b0dcca54ed6d23"}, {"problem": 102, "code": "(fn camelize [snake]\n  (letfn [(capitalize [word]\n            (apply str (.toUpperCase (str (first word))) (rest word)))]\n    (let [frags (clojure.string/split snake #\"-\")]\n      (apply str (first frags) (map capitalize (rest frags))))))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 102, "code": "(fn [s]\n  (reduce (fn [acc c]\n                (if (= \\- (last acc))\n                  (apply str (concat (butlast acc) (list (first (clojure.string/upper-case (str c))))))\n                  (apply str (concat acc (list c))))) (str (first s)) (rest s)))", "user": "52efd3d9e4b05e3f0be25ed4"}, {"problem": 102, "code": "(fn [words] (clojure.string/replace words #\"-([a-z])\" #(clojure.string/upper-case (%1 1))))", "user": "53d40508e4b00fb29b221332"}, {"problem": 102, "code": "(fn camel-case [word]\n    (let [word-split (clojure.string/split word #\"-\")]\n        (clojure.string/join \"\"                              \n                         (cons (first word-split) \n                               (map clojure.string/capitalize (rest word-split))))))", "user": "532c9dc9e4b019098a6f8b30"}, {"problem": 102, "code": "(fn toCamel [s]\n  (let [ss (seq (.split #\"-\" s))]\n    (apply str (concat [(first ss)] (map clojure.string/capitalize (rest ss))))\n  )\n)", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 102, "code": "(fn[s](reduce #(str %1 (apply str (char (+ (- (int (first %2)) (int \\a)) (int \\A))) (next %2))) (re-seq #\"\\w+(?=-)*\" s)))", "user": "4e8849c5535d8b9bb0147ca4"}, {"problem": 102, "code": "(fn [snake-case]\n    ( clojure.string/replace snake-case #\"-(\\w)\" #(clojure.string/upper-case (second %))))", "user": "52eb400ee4b0705949c4443b"}, {"problem": 102, "code": "#(let [s (re-seq #\"[a-zA-Z]+\" %)] (apply str (cons (first s) (map clojure.string/capitalize (rest s)))))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s \n                                #\"\\-[a-z]\" \n                                #(str (char \n                                       (- \n                                         (int (last %1)) 32)))))", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 102, "code": "(fn [s] (apply str (reduce #(concat %1 (concat (clojure.string/upper-case (str (first %2))) (rest %2))) \n                 (clojure.string/split s #\"\\-\"))))", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 102, "code": "(fn [s]\n  (reduce #(str %\n                (. (subs %2 0 1) toUpperCase)\n                (subs %2 1)) (clojure.string/split s #\"-\")))", "user": "53500869e4b084c2834f4ad3"}, {"problem": 102, "code": "(fn [name]\n  (let [capitalize (fn [[c & cs]] (str (Character/toUpperCase c) (apply str cs)))\n        [first & rest] (clojure.string/split name #\"-\")]\n\t(str first (apply str (map capitalize rest)))))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 102, "code": "(fn camel-case [s]\n   (->> (reverse s)\n        (reduce (fn [acc c] (if (= c \\-) (conj (vec (butlast acc)) (Character/toUpperCase (last acc))) (conj acc c))) [])\n        (reverse)\n        (apply str)))", "user": "535eaa73e4b04ce2eb3ed2d4"}, {"problem": 102, "code": "#(reduce (fn [s [search-term replacement]]\n           (.replaceAll s search-term (.toUpperCase replacement)))\n         %\n         (set (re-seq #\"-(.)\" %)))", "user": "4ed3b4a7535d44c135fd68f5"}, {"problem": 102, "code": "#(->>\n  (clojure.string/split % #\"-\")\n  ((fn [[head & tail]] (cons head (map clojure.string/capitalize tail))))\n  clojure.string/join)", "user": "506ba58be4b0eda3100c090b"}, {"problem": 102, "code": "(fn camel-case [s]\n  (let [indices (->>\n                 (map-indexed vector s)\n                 (filter #(= \\- (second %)))\n                 (map #(inc (first %)))\n                 )]\n    (->>\n     (map-indexed \n      (fn [idx itm] \n        (cond \n         (some #(= idx %) indices) (Character/toUpperCase itm)\n         (= itm \\-) nil\n         :default itm)\n        )\n      s)\n     (filter identity)\n     (apply str))))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace (clojure.string/replace s\n                                                  #\"-\\S\"\n                                                  #(clojure.string/upper-case %1))\n                          #\"-\"\n                          \"\"))", "user": "51ab70c3e4b04e3dc0c27b33"}, {"problem": 102, "code": "(fn [s]\n  (let [[f & r] (clojure.string/split s #\"-\")]\n    (apply str\n      (cons f\n        (map clojure.string/capitalize r)))))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 102, "code": "(fn into-camel-case [obj]\n  (let [split-str (clojure.string/split obj #\"-\")\n        first-word (first split-str)\n        rest-words (rest split-str)]\n    (if (empty? rest-words)\n      first-word\n      (apply str (concat [first-word] (map clojure.string/capitalize rest-words))))))", "user": "53791ab7e4b06839e8705e4d"}, {"problem": 102, "code": "(fn [word]\n(let [head (first (clojure.string/split word #\"-\"))\n      tail (rest (clojure.string/split word #\"-\"))]\n  (reduce str (conj \n   (map clojure.string/capitalize tail) \n   head))))", "user": "53cbe808e4b00fb29b2212d4"}, {"problem": 102, "code": "(fn [s] (reduce #(str %1 (Character/toUpperCase (first %2)) (apply str (rest %2))) (clojure.string/split s #\"-\")))", "user": "50856bd1e4b004985b776e4c"}, {"problem": 102, "code": "(fn [s]\n  (let [l (clojure.string/split s #\"-\")]\n    (reduce (fn [a b] (str a (clojure.string/capitalize b))) (first l) (rest l))))", "user": "537e745ae4b06839e8705ea6"}, {"problem": 102, "code": "(fn [s]\n  (apply str\n         (let [wrds (map #(apply str %)\n                         (take-nth 2\n                                   (partition-by #(= \\- %)\n                                                 s)))]\n           (cons (first wrds)\n                 (map clojure.string/capitalize (rest wrds))))))", "user": "50981062e4b04e098a4c7268"}, {"problem": 102, "code": "(fn camel-casify [x]\n  (let [words (.split x \"-\")\n        capitalize (fn [w]\n                     (->> (cons (-> w first str .toUpperCase)\n                                (rest w))\n                          (apply str)))]\n    (->> (cons (first words) (map capitalize (rest words)))\n         (apply str))))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 102, "code": "(fn [s]\n    (reduce (fn [acc v] (str acc (clojure.string/capitalize v)))\n            (re-seq #\"[^-]+\" s)))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 102, "code": "#(let [[t & ts] (re-seq #\"[^\\-]+\" %)]\n   (apply str t (map clojure.string/capitalize ts)))", "user": "5052ab7ee4b0a561d07d8f20"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-[a-z]\" #(.toUpperCase (str (second %)))))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 102, "code": "#(apply str ((fn peu [x] (if (empty? x) '() (if (= (first x) \\-)  (conj (peu (apply str (rest (rest x)))) (second (clojure.string/upper-case x))) (conj (peu (apply str (rest x))) (first x))  ))) %))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 102, "code": "(fn [s]\n  (let [[h & xs] (clojure.string/split s #\"-\")\n       camels (map clojure.string/capitalize xs)]\n    (clojure.string/join \"\" (concat h camels))))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 102, "code": "(fn [s]\n   (let [sp (clojure.string/split s #\"-\")]\n     (str (first sp) (apply str (map clojure.string/capitalize (rest sp))))))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 102, "code": "(fn recursive-camel-case\n  ([f input output]\n     (let [[frst & rst] input]\n       (cond (nil? frst) (.toString output)\n             (= frst \\-) (recur #(Character/toUpperCase %)  rst output)\n             :else (recur identity rst (.append output (f frst)))))) \n  ([input] (recursive-camel-case identity (seq input) (StringBuilder.))))", "user": "538b9648e4b0640c7a9a58c5"}, {"problem": 102, "code": "(fn[x](clojure.string/replace x #\"-(.)\" #(.toUpperCase (%1 1))))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 102, "code": "(fn intoCamelCase [lispy-symbol-name]\n  (let [[name & remaining-names] (clojure.string/split\n                                  lispy-symbol-name #\"-\")]\n    (clojure.string/join\n     (concat name\n             (apply str (map clojure.string/capitalize\n                             remaining-names))))))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 102, "code": "(fn [x]\n   (let [words (clojure.string/split x #\"-\")\n         capitalized (cons (first words) (map clojure.string/capitalize (rest words)))]\n     (clojure.string/join \"\" capitalized))\n)", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (clojure.string/join\n      [(first words)\n       (apply str (mapcat clojure.string/capitalize (rest words)))])))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-[a-z]\" (comp clojure.string/upper-case last))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 102, "code": "(fn [s] (apply str (reduce\n                   (fn [a e] (if (= (last a) \\-)\n                               (assoc a (dec (count a)) (Character/toUpperCase e))\n                               (conj a e)))\n                   []\n                   (seq s))))", "user": "51e28063e4b08e53a149f0f2"}, {"problem": 102, "code": "(fn [v] (clojure.string/replace v #\"-([a-z])\" #(.toUpperCase (%1 1))))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 102, "code": "(fn [ls] (let [tg (clojure.string/split ls #\"-\")] (str (first tg) (apply str (map #(apply str (concat (clojure.string/upper-case (first %)) (rest %))) (rest tg))))))", "user": "52faec2ee4b047fd55837004"}, {"problem": 102, "code": "(fn name [s]\n  (let [words (re-seq #\"[a-zA-Z]+\" s)\n        words (cons (first words)\n                    (map clojure.string/capitalize (rest words)))]\n    (apply str words)))\n;; best answer\n;;#(clojure.string/replace % #\"-(\\w)\" (fn [[a b]] (clojure.string/capitalize b)))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 102, "code": "(fn into-camel-case [string] \n  (let [words (clojure.string/split string #\"-\")]\n      (str (first words) (apply str (map #(clojure.string/capitalize %) (rest words))))))", "user": "53a94b63e4b047364c044434"}, {"problem": 102, "code": "(fn [s] (apply str (#(concat (clojure.string/lower-case (first %)) (rest %)) (apply str (flatten (map #(concat (clojure.string/upper-case (first %)) (rest %)) (filter #(not (= '(\\-) %)) (partition-by #(= \\- %) (seq s)))))))))", "user": "52fac708e4b047fd55836fff"}, {"problem": 102, "code": "(fn \n  [s]\n  (let [splits (clojure.string/split s #\"-\")\n        f (first splits)\n        rs (rest splits)]\n    (apply str f (map #(clojure.string/capitalize %) rs))))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 102, "code": "(fn [s]\n  (letfn [(upper [w]\n                 (apply str (Character/toUpperCase (first w)) (rest w)))]\n    (let [ws (clojure.string/split s #\"-\")]\n      (apply str (first ws) (->> ws rest (map upper))))))", "user": "51780bfce4b0f89a8f53839c"}, {"problem": 102, "code": "(fn [s]\n  (let [parts (clojure.string/split s #\"-\")]\n    (if (> (count parts) 1)\n      (str (first parts) (clojure.string/join (map clojure.string/capitalize (rest parts))))\n      s)))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(.)\" #(.toUpperCase (%1 1))))", "user": "52747090e4b03e8d9a4a74a5"}, {"problem": 102, "code": "(fn [s] (let [ss (clojure.string/split s #\"-\")]\n         (clojure.string/join\n             (concat (take 1 ss) \n                   (drop 1 (map #(clojure.string/capitalize %)  ss)) )\n              ) )\n  )", "user": "537b1083e4b06839e8705e64"}, {"problem": 102, "code": "(fn [input]\n  (let [words (clojure.string/split input #\"-\")]\n    (apply str\n      (cons (first words)\n        (map clojure.string/capitalize (rest words))))))", "user": "528bba38e4b0239c8a67aea9"}, {"problem": 102, "code": "#(apply str\n   (loop [[h & t] %\n          a []]\n     (if h\n       (if (= \\- h)\n         (recur (clojure.string/capitalize (apply str t)) a)\n         (recur t (conj a h)))\n       a)))", "user": "53f7820be4b0de5c41848560"}, {"problem": 102, "code": "(fn [s]\n  (first\n   (reduce\n   (fn [[r l] n]\n     (if (= l \\-)\n       [(str r (java.lang.Character/toUpperCase n)) n]\n       (if (= n \\-)\n         [r n]\n         [(str r n) n])))\n   [\"\" nil]\n   s))\n  )", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 102, "code": "(fn [x]\n  (let [words (clojure.string/split x #\"\\W\")\n        caps (map #(clojure.string/capitalize %) (rest words))]\n    (clojure.string/join \"\" (into caps (clojure.string/reverse (first words))))))", "user": "52474133e4b05ef8e38e635e"}, {"problem": 102, "code": "#(letfn [(bk [m] (loop [a m] (if (re-find #\"-\" a) (recur (transform-once a)) a))) \n         (transform-once [arg-in] (clojure.string/join (let [[a b c d] \n               (re-matches #\"([\\w]*?)(-)(.*)\" arg-in)] [b (clojure.string/capitalize d)])))] (bk %))", "user": "541377bee4b01498b1a719e2"}, {"problem": 102, "code": "#(let [s (clojure.string/split % #\"-\")\n      f (first s)\n      r (map clojure.string/capitalize (rest s))]\n  (clojure.string/join (cons f r)))", "user": "52bc6cb2e4b07a9af57922f5"}, {"problem": 102, "code": "(fn [s]\n (clojure.string/replace s #\"-(\\w)\" (fn [[a b]] (.toUpperCase b))))", "user": "537f4652e4b06839e8705eb1"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-([a-z])\" #(clojure.string/upper-case (% 1))))", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 102, "code": "(fn [words]\n   (clojure.string/join \"\"\n   ((fn [[ start & rest]]      \n      (conj (mapcat(fn [w]           \n          (conj (drop 1 w) (Character/toUpperCase (first w)))) rest) start)) \n    (clojure.string/split words #\"-\")))\n   )", "user": "54094824e4b0addc1aec66da"}, {"problem": 102, "code": "#(let [ls (clojure.string/split % #\"-\")]\n   (clojure.string/join (cons (first ls) \n                              (map clojure.string/capitalize \n                                   (rest ls)))))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 102, "code": "(fn toCamel-2 [s]\n  (clojure.string/replace s #\"-(\\w+)\" (fn [[a b]] (clojure.string/capitalize b))))", "user": "541096bde4b01498b1a719b2"}, {"problem": 102, "code": "(fn camel-case\n  [s]\n  (let [map-rest (fn map-rest [f coll] (cons (first coll) (map f (rest coll))))\n        apply-first (fn apply-first [f coll] (cons (f (first coll)) (rest coll)))\n        parts (clojure.string/split s #\"-\")\n        capitalize (fn [s] (apply str (apply-first clojure.string/upper-case s)))]\n    (apply str (map-rest capitalize parts))))", "user": "500d0f21e4b05f7c30cfa69e"}, {"problem": 102, "code": "#(let [[f & r] (clojure.string/split % #\"-\")]\n   (apply str f (map clojure.string/capitalize r)))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 102, "code": "#(let[[word & words] (filter (fn[x] (not= x \"\")) (seq (.split #\"-\" %)))]\n      (if(seq words) (apply str (cons word (map clojure.string/capitalize words)))\n        word))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 102, "code": "#(let [a (clojure.string/split % #\"-\")\n      b (map clojure.string/capitalize (rest a)) ]\n  (apply str (first a) b))", "user": "4ff4bed0e4b0678c553fc35f"}, {"problem": 102, "code": "(fn [x] (let [rs (clojure.string/split x #\"\\-\")]\n            (apply str (cons (first rs) (map #(clojure.string/join (cons (clojure.string/upper-case (first %)) (next %))) (next rs))))))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 102, "code": "(fn [s]\n   (clojure.string/replace s #\"-[a-z]\" #(clojure.string/upper-case (second %))))", "user": "52c672e2e4b0c2d177d6210e"}, {"problem": 102, "code": "(fn [s]\n  (let [[a [_ c & r :as b]] (split-with #(not= \\- %) s)]\n    (if (seq b)\n      (recur (concat a (cons (char (- (int c) 32)) r)))\n      (apply str a))))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 102, "code": "#(let [tokens (clojure.string/split % #\"-\")\n      head (first tokens)\n      tail (rest tokens)]\n  (clojure.string/join (cons head (map clojure.string/capitalize tail))))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(.)\" (fn [[_ c]] (format \"%S\" c)))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-([a-z])\" #(clojure.string/upper-case (%1 1))))", "user": "53e0001be4b0d874e779ae48"}, {"problem": 102, "code": "(fn [x]\n  (let [[w & ws] (re-seq #\"\\w+\" x)\n        ws (map clojure.string/capitalize ws)]\n    (str w (apply str ws))))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 102, "code": "#(let [words (clojure.string/split  % #\"-\" )]\n   (clojure.string/join (conj (map clojure.string/capitalize (rest words)) (first words))))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 102, "code": "(fn [x] (clojure.string/replace x #\"\\-\\w\" #(.toUpperCase (str (second %)))))", "user": "51a1659de4b00957e520db72"}, {"problem": 102, "code": "(fn [xs]\n  (let [dashsplit (clojure.string/split xs #\"-\")]\n    (clojure.string/join (conj (map clojure.string/capitalize (rest dashsplit)) (first dashsplit)))))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 102, "code": "#(clojure.string/join\n    (let [words (clojure.string/split %1 #\"-\"),\n          [x & xs] words]\n      (cons x (map clojure.string/capitalize xs))))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 102, "code": "(fn to-camelcase [st]\n  (let [splited (clojure.string/split st #\"-\")\n        stf (first splited)\n        r (rest splited)\n        first-capitalize (fn [[x & xs]] (cons (java.lang.Character/toUpperCase x) xs))]\n    (->> r\n      (map (comp #(apply str %) first-capitalize))\n      (cons stf)\n      (apply str))))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 102, "code": "(fn [w]\n          (let [[f & r] (clojure.string/split w #\"-\")]\n            (apply str (cons f (map clojure.string/capitalize r)))))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 102, "code": "(fn [string]\n      (clojure.string/replace \n        (clojure.string/replace string #\"-.\" #(clojure.string/upper-case %))\n        #\"-\" \"\"))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 102, "code": "(fn into-camel-case [xs]\n  (let [split-xs (clojure.string/split xs #\"-\")]\n    (->> (rest split-xs)\n         (map clojure.string/capitalize)\n         (cons (first split-xs))\n         (apply str))))", "user": "52616198e4b03e8d9a4a705e"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w+)\"  (fn [[x & y]] (clojure.string/capitalize (first y))))", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 102, "code": "(fn camelCase [s]\n  (clojure.string/replace s #\"-(\\w)\" #(clojure.string/upper-case (get % 1))))", "user": "54448e84e4b032a45b869393"}, {"problem": 102, "code": "#(if(=(nth % 0)\\m)\"multiWordKey\"%)", "user": "4db2903f535df7e46ed9b6bf"}, {"problem": 102, "code": "#(let [[h & r] (clojure.string/split % #\"-\")]\n   (apply str h (map clojure.string/capitalize r)))", "user": "5339c105e4b0e30313ee6cae"}, {"problem": 102, "code": "(fn [xs]\n   (apply str\n          (concat [(first xs)]\n                  (map (fn [[a b]]\n                         (if (= b \\-) \"\"\n                             (if (= a \\-)\n                               (Character/toUpperCase b) b)))\n                       (partition 2 1 xs)))))", "user": "50742549e4b054001656accf"}, {"problem": 102, "code": "(fn __ [s] \n  (let [x (clojure.string/split s #\"-\")]\n    (apply str (first x)\n      (map clojure.string/capitalize (rest x)))))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (concat (first words)\n                       (map clojure.string/capitalize\n                            (rest words))))))", "user": "51baff1be4b0fe3ecfb46443"}, {"problem": 102, "code": "#(let [s (clojure.string/split % #\"-\")] (apply str (first s) (map clojure.string/capitalize (rest s))))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 102, "code": "(fn [input]\n    (let [parts (clojure.string/split input #\"-\")\n          transformed-parts (cons (first parts) (map (fn [word]\n                                                       (apply str (cons (Character/toUpperCase (first word)) (rest word))))\n                                                     (rest parts)))]\n      (apply str transformed-parts)))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 102, "code": "#(let [parts (clojure.string/split % #\"-\")]\n   (apply str (first parts) (map clojure.string/capitalize (rest parts))))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 102, "code": "(fn [s]\n  (let [w (clojure.string/split s #\"-\")]\n    (clojure.string/join (cons (first w) (map clojure.string/capitalize (rest w))))))", "user": "504457c0e4b01f6c9a8b2360"}, {"problem": 102, "code": "(fn into-camel-case [w]\n  (let [subwords (clojure.string/split w #\"-\")]\n    (apply str (cons (first subwords)\n                     (map #(str (clojure.string/upper-case (subs % 0 1))\n                                (subs % 1))\n                          (rest subwords))))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 102, "code": "(fn [cstring]\n  (let [words (clojure.string/split cstring #\"-\")]\n    (clojure.string/join (cons (first words)\n      (map clojure.string/capitalize (drop 1 words))))))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 102, "code": "(fn [s] (apply str (reduce concat [(first (clojure.string/split s #\"-\"))] (map (fn [ss](concat (#(clojure.string/upper-case (first %1)) ss) (rest ss))) (rest (clojure.string/split s #\"-\"))))))", "user": "53d86564e4b0e771c302546b"}, {"problem": 102, "code": "(fn [s] (let [spl (clojure.string/split s, #\"-\")] (clojure.string/join \"\" (cons (first spl) (map clojure.string/capitalize (next spl))))))", "user": "52485723e4b05ef8e38e63d2"}, {"problem": 102, "code": "(fn [s]\n  (let [[s & more] (clojure.string/split s #\"-\")]\n    (clojure.string/join \"\" (cons s (map clojure.string/capitalize more)))))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[_ w]] (clojure.string/capitalize w)))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace\n    s\n    #\"-(\\w)\"\n    #(.toUpperCase (second %))))", "user": "4ec1b090535dfed6da9c6db5"}, {"problem": 102, "code": "(fn  [s]\n  (let [[f & r] (clojure.string/split s #\"-\")]\n    (clojure.string/join (cons f (map clojure.string/capitalize r)))))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (second %1))))", "user": "5078d366e4b08327cd804a5b"}, {"problem": 102, "code": "(fn [s]\n  (let [x (clojure.string/split s #\"-\")]\n    (apply str (conj (map #(clojure.string/capitalize %) (rest x)) (first x)))\n))", "user": "54524afbe4b0e397800069bc"}, {"problem": 102, "code": "(fn [w]\n  (let [[x & xs]  (re-seq #\"\\w+\" w)\n        cap-first (comp char #(- % 32) int first)]\n    (->> xs\n         (map #(apply str (cap-first %) (rest %)))\n         (cons x)\n         (apply str))))", "user": "505aa653e4b021387fb89857"}, {"problem": 102, "code": "(fn [word]\n    (let [words (clojure.string/split word #\"-\")]\n      (reduce (fn [return w] (clojure.string/join [return (clojure.string/capitalize w)])) words)))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 102, "code": "#(loop [s (seq %) r []] \n   (if (empty? s) \n     (apply str r) \n     (if (and (= (first s) \\-) (second s)) \n       (recur (rest(rest s)) \n              (conj r (clojure.string/upper-case (second s)))) \n       (recur (rest s) (conj r (first s))))))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-([a-z])\" (fn [[x y]] (.toUpperCase y) ))", "user": "544e9022e4b0e3978000698b"}, {"problem": 102, "code": "#(->> (clojure.string/split % #\"-\")\n       (map-indexed (fn [index s]\n                      (if (= 0 index)\n                        s\n                        (clojure.string/capitalize s))))\n       (apply str))", "user": "50ebd63ce4b04edc3377703c"}, {"problem": 102, "code": "(fn [s]\n  (let [xs (clojure.string/split s #\"-\")]\n     (apply str (first xs) (map #(clojure.string/capitalize %) (rest xs)))))\n;((fn [s]\n ; (let [xs (clojure.string/split s #\"-\")]\n   ;  (apply str (first xs) (map #(clojure.string/capitalize %) (rest xs))))) \"multi-word-key\")", "user": "51533ecde4b0252ac4b16619"}, {"problem": 102, "code": "#(let [x (clojure.string/split % #\"-\")]\n   (apply str (first x)\n              (map clojure.string/capitalize\n                   (rest x))))", "user": "4ebbc1f6535dfed6da9c6d72"}, {"problem": 102, "code": "(fn [w]\n    (clojure.string/replace w #\"-(\\w)\" (fn [[_ grp]]\n                                         (.toUpperCase grp))))", "user": "537bde5de4b06839e8705e73"}, {"problem": 102, "code": "(fn [s]\n\t(let [words (clojure.string/split s #\"-\")]\n\t\t(apply str \n\t\t\t(cons (first words) (map clojure.string/capitalize (rest words))))))\n\n\n;;#(clojure.string/replace % #\"-(.)\" (fn [[_ c]] (format \"%S\" c)))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-([a-z])\" (fn [m] (clojure.string/upper-case (m 1))))", "user": "508923d5e4b06d8254e936e8"}, {"problem": 102, "code": "(fn to-camelcase [s] (let [sep (clojure.string/split s #\"-\")] \n                       (apply str (cons (first sep) \n                                        (map #(clojure.string/capitalize %) (rest sep))))))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 102, "code": "(fn solution [input] (let [aa (.split input \"-\")]   (clojure.string/join (concat (first aa) (map clojure.string/capitalize (rest aa))))))", "user": "536e5055e4b0fc7073fd6e6b"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-[a-z]\" (comp clojure.string/upper-case last))", "user": "5412646de4b01498b1a719d4"}, {"problem": 102, "code": "(fn [s]\n  (let [tokens (clojure.string/split s #\"-\")]\n    (apply str (first tokens) (map clojure.string/capitalize (rest tokens)))))", "user": "53a074a4e4b0ca733b9744af"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"(-)(.)\" #(.toUpperCase (%1 2))))", "user": "51d46747e4b013d740b70de3"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(clojure.string/upper-case (second %))))", "user": "5458a729e4b01be26fd74622"}, {"problem": 102, "code": "(fn [s]\n (let [items (re-seq #\"\\w+\" s)] \n  (reduce #(str %1 (clojure.string/capitalize %2 )) (first items) (rest items))))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 102, "code": "(fn [s]\n(let [parts (re-seq #\"\\w+\" s)]\n(apply str (first parts) (map clojure.string/capitalize (rest parts)))))", "user": "5462c5abe4b01be26fd746b5"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace (clojure.string/replace s #\"-\\w\" #(clojure.string/upper-case %)) \"-\" \"\"))", "user": "54630cdae4b01be26fd746bb"}, {"problem": 102, "code": "(fn [input]\n  (let [toUpperCase (fn [x] (apply str (concat (clojure.string/upper-case (first x)) (rest x))))\n      toLowerCase (fn [x] (apply str (concat (clojure.string/lower-case (first x)) (rest x))))\n      s (clojure.string/split input #\"-\")]\n  (toLowerCase (apply str (map #(apply str (toUpperCase %)) s)))))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 102, "code": "(fn [x]\n  (clojure.string/replace x #\"-(\\w)\" #(.toUpperCase (second %))))", "user": "5456e4e7e4b080a794c2c883"}, {"problem": 102, "code": "(fn [text] (clojure.string/replace text #\"-(\\w)\" (fn [matched] (clojure.string/capitalize (second matched)))))", "user": "5463c452e4b01be26fd746c4"}, {"problem": 102, "code": "(fn [x] (let [x (clojure.string/split (clojure.string/replace x #\"[-]\" \" \") #\" \")\n              processed-word  (apply str(if (and (coll? x) (> (count x) 1))  (map clojure.string/capitalize x) x))] \n         \n          \t(apply str (clojure.string/lower-case (first processed-word)) (rest processed-word))          \n          ))", "user": "5461873de4b01be26fd746a3"}, {"problem": 102, "code": "(fn camel-case [s]\n  (reduce (fn [acc n]\n            (if (= (last (str acc)) \\-)\n              (str (apply str (butlast acc)) (.toUpperCase (str n)))\n              (str acc n))) s))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 102, "code": "(fn [w]\n  (let [words (clojure.string/split w #\"-\")]\n    (clojure.string/join (cons (first words) (map clojure.string/capitalize (rest words))))))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 102, "code": "(fn [input]\n  (let [words (clojure.string/split input #\"-\")]\n    (clojure.string/join \"\" (cons (first words) (map clojure.string/capitalize (rest words))))))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 102, "code": "(fn [s]\n  (let [fup (fn [s] (str (Character/toUpperCase (first s)) (.substring s 1)))\n        ss (clojure.string/split s #\"-\")\n        urs (map fup (rest ss))]\n    (apply str (cons (first ss) urs))))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 102, "code": "(fn [s]\n  (let [split-up (clojure.string/split s #\"-\")]\n    (clojure.string/join (cons (first split-up) (map clojure.string/capitalize (rest split-up))))))", "user": "5353afa0e4b084c2834f4b03"}, {"problem": 102, "code": "(fn [x]\n  (clojure.string/replace x #\"-\\w\"\n    #(str (last (.toUpperCase %)))\n  )\n)", "user": "4df1e213535d08e6dec9fe20"}, {"problem": 102, "code": "(fn [s]\n  (let [spl (clojure.string/split s #\"-\")]\n    (str (first spl)\n         (apply str (map (fn [s]\n                           (apply str (clojure.string/upper-case (first s)) (rest s)))\n                         (rest spl))))))", "user": "5484143de4b0e286459a1197"}, {"problem": 102, "code": "(fn [word]\n  (reduce (fn [a s]\n            (prn s)\n            (str a (if\n              (.startsWith s \"-\")\n              (-> s (second) (clojure.string/upper-case))\n              s))) \"\" (re-seq #\"-[a-zA-Z]|[a-zA-Z]\" word)))", "user": "4f724e56e4b07046d9f4f027"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (first words)\n               (mapcat #(cons (clojure.string/upper-case (first %)) (rest %)) (rest words)))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 102, "code": "(fn [word] (reduce #(str % (clojure.string/capitalize %2)) (clojure.string/split word #\"-\")))", "user": "5368fedee4b0243289761e93"}, {"problem": 102, "code": "(fn [s] \n    (let [words (clojure.string/split s #\"-\")]\n             (str (first words)\n                  (apply str (map clojure.string/capitalize (drop 1 words))))))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 102, "code": "(fn into-camel-case [s]\n  (let [str-v (clojure.string/split s #\"-\")\n        first-s (first str-v)\n        rest-s (rest str-v)\n        capitalized-rest-s (map #( clojure.string/capitalize %) rest-s)]\n    (str first-s (clojure.string/join capitalized-rest-s))))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 102, "code": "(fn cac [s] (let [segs (clojure.string/split s #\"-\")\n              capsegs (map #(clojure.string/capitalize %) (rest segs))\n              result (clojure.string/join capsegs)] (format \"%s%s\" (first segs) result)))", "user": "548f5086e4b0e286459a1239"}, {"problem": 102, "code": "(fn intoCamelCase [s]\n(let [isChar? #(<= (int \\A) (int %) (int \\z))]\n(->> s\n     (partition-by isChar?)\n     (filter #(isChar? (first %)))\n     (map #(apply str %))\n     (#(cons (first %) (map clojure.string/capitalize (rest %))))\n     (apply str)\n     )))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 102, "code": "(fn [s]\n  (->> (clojure.string/split s #\"-\") \n       (#(into (conj [] (first %)) (map clojure.string/capitalize (rest %)))) \n       (apply str)))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 102, "code": "(fn [s] \n  (letfn [(capitalize [s]\n            (if (> (count s) 0)\n              (str (Character/toUpperCase (.charAt s 0))\n                   (.toLowerCase (subs s 1)))\n              s))\n          (ucfirst [s] (cons (capitalize (apply str (list (first s)))) (rest s)))]\n    (loop [acc [] s s] \n      (if (empty? s) \n        (apply str (reverse acc)) \n        (if (= (first s) \\-) \n          (recur acc (ucfirst (rest s))) \n          (recur (cons (first s) acc) (rest s)))))))", "user": "5385e633e4b06839e8705f08"}, {"problem": 102, "code": "(fn [q]\n      (loop [s (seq q), last (first s), a '[]]\n            (if (empty? s) (apply str a) (let [curr (first s)]\n                                              (recur\n                                                (rest s)\n                                                curr\n                                                (if (= curr \\-) a (if (= last \\-) (conj a (Character/toUpperCase curr)) (conj a curr) ))\n                                                )\n                                              ) )\n            )\n      )", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 102, "code": "(fn [s]\n  (let [capitalize (fn [[first-letter & other-letters]]\n                     (apply str (clojure.string/upper-case first-letter) other-letters))\n        [first-word & other-words] (clojure.string/split s #\"-\")]\n    (apply str first-word (map capitalize other-words))))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 102, "code": "(fn [s] (let [[h & r] (clojure.string/split s #\"-\")] (apply str (cons h (map clojure.string/capitalize r)))))", "user": "512b07f7e4b078b06821febb"}, {"problem": 102, "code": "(fn _camel-case [s]\n  (let [words (re-seq #\"\\w+\" s)]\n    (apply str (first words)\n           \n             (for [each (next words)]\n               (apply str (clojure.string/upper-case (first each)) \n                      (next each))))))", "user": "54848141e4b0e286459a119e"}, {"problem": 102, "code": "(fn [x]\n  (let [[s & _] (re-seq #\"\\w+\" x)]\n    (apply str\n      s\n      (map \n        (fn [[f & _]] (apply str (.toUpperCase (str f)) _)) \n        _\n      )\n    )\n  )\n)", "user": "4fc8f671e4b0ee37620e1840"}, {"problem": 102, "code": "(fn my-func                                                                                                                          \n  [s]                                                                                                                                  \n  (if-not (re-find #\"-\" s)                                                                                                             \n    s                                                                                                                                  \n    (let [splits (clojure.string/split s #\"-\")                                                                                         \n          first-word (first splits)                                                                                                    \n          rest (map clojure.string/capitalize (rest splits))]                                                                          \n      (apply str (conj rest first-word)))))", "user": "54898297e4b0e286459a11e7"}, {"problem": 102, "code": "(fn [word]\n  (clojure.string/replace word #\"-[a-z]\" #(clojure.string/upper-case(last %))))", "user": "535943b3e4b04ce2eb3ed295"}, {"problem": 102, "code": "(fn [s]\n  (let [split (clojure.string/split s #\"-\")\n        capitalized (map clojure.string/capitalize (rest split))\n        combined (conj capitalized (first split))]\n        (clojure.string/join \"\" combined)))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 102, "code": "(fn[s]\n  (let [[s & ss] (remove empty? (clojure.string/split s #\"-\"))]\n    (apply str s (mapcat (fn [[c & cs]] (cons (Character/toUpperCase c) cs)) ss))))", "user": "50ef4e2be4b0a78662fa2653"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (%1 1))))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 102, "code": "(fn dash2camel [s]\n  (reduce str\n    (let [n (count s)]\n      (loop [j 0 s (vec s)]\n        (if (= j n)\n          s\n          (if (= (get s j) \\-)\n            (recur (inc j) \n                   (assoc\n                     (assoc s (inc j) (clojure.string/capitalize (get s (inc j))))\n                     j \"\"))\n            (recur (inc j) s)))))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 102, "code": "(fn [s]\n  (let [ss (clojure.string/split s #\"\\-\")\n        first-word (first ss)\n        capitalized-rest (map clojure.string/capitalize (rest ss))]\n    (clojure.string/join (concat [first-word] capitalized-rest))))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 102, "code": "(fn [s] \n  (clojure.string/replace \n   s #\"-(\\w)\" \n   (fn [[_ c]] \n     (clojure.string/upper-case c))))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 102, "code": "(fn\n  [s]\n  (let [result (clojure.string/split s #\"\\-\")\n        f (first result)]\n    (if (< 1 (count result))\n      (str f (clojure.string/join (map clojure.string/capitalize (rest result))))\n      f)))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")]\n  (apply str (first words) (map clojure.string/capitalize (rest words))))", "user": "511688d5e4b0b3e208dba05a"}, {"problem": 102, "code": "(fn intoCamelCase [s]\n  (let [[x & xs] (re-seq #\"\\w+\" s)]\n    (apply str x (map #(apply str (-> % first str .toUpperCase) (rest %)) xs))))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 102, "code": "#(loop [s % r \"\" bcap false]\n   (if (empty? s)\n     r\n     (let [c (first s)]\n       (if (= c \\-)\n         (recur (rest s) r true)\n         (recur (rest s) (if bcap (format \"%s%C\" r c) (format \"%s%c\" r c)) false)\n       )\n     )\n   )\n )", "user": "545537c1e4b0e397800069dd"}, {"problem": 102, "code": "(fn [s]\n  (let [parts (clojure.string/split s #\"-\")]\n    (apply str (first parts)\n           (->> parts\n                (drop 1)\n                (map #(apply str (-> % first int (- 32) char) (rest %)))))))", "user": "52d95491e4b09f7907dd13a4"}, {"problem": 102, "code": "#(let [[x & xs] (clojure.string/split % #\"-\")]\n  (->> (cons x (map clojure.string/capitalize xs))\n       (apply str)))", "user": "50f10f7be4b06d9538fe211a"}, {"problem": 102, "code": "(fn [k] \n  (letfn [(split [s] (filter #(not (= '(\\-) %)) (partition-by #(= \\- %) s)))\n          (cap [c] (cons (apply str (first c))  (map #(apply str (cons (-> % first str .toUpperCase) (rest %))) (rest c))))] \n    (apply str (cap (split k)))))", "user": "5367bc60e4b0243289761e81"}, {"problem": 102, "code": "#(let [xs (re-seq #\"[^-]+\" %)]\n   (apply str\n     (cons (first xs) (map (fn [x] \n                             (apply str \n                                    (.toUpperCase (str (first x)))\n                                    (rest x)))\n                             (rest xs)))))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 102, "code": "(fn [ml]\n  (reduce\n    (fn [acc x] (str acc (clojure.string/capitalize x)))\n    (clojure.string/split ml #\"-\")))", "user": "54be3e69e4b0ed20f4ff6ee8"}, {"problem": 102, "code": "(fn [a] (let [s (clojure.string/split a #\"-\")]\n          (reduce str (first s) (map clojure.string/capitalize (rest s)))))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-.\" (fn [a] (subs (.toUpperCase a) 1)))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 102, "code": "(fn [s]\n (clojure.string/replace\n  s\n  #\"-(.)\"\n  #(.toUpperCase (%1 1))))", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 102, "code": "(fn camel ([s] (camel s []))\n  \t\t  ([s accu] (cond \n                    (not (seq s)) (apply str accu)\n                     (= \\- (first s)) (recur (rest (rest s)) (conj accu (char (+ (- (int \\A) (int \\a)) (int (first (rest s))))) ))\n  \n                    :else (recur (rest s) (conj accu (first s))                    \n                    \n                    ))))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 102, "code": "#(let [r (clojure.string/split % #\"-\")]\n     (apply str (first r) (map clojure.string/capitalize (rest r))))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (comp clojure.string/upper-case second))", "user": "52be58d7e4b07a9af579231d"}, {"problem": 102, "code": "(fn to-camel-case [s] (let [parts (clojure.string/split s #\"-\")] (clojure.string/join (cons (first parts) (map clojure.string/capitalize (rest parts))))))", "user": "54c15722e4b0ed20f4ff6f22"}, {"problem": 102, "code": "(fn [s] (clojure.string/join (conj  (map clojure.string/capitalize (rest (clojure.string/split s #\"-\")))(first (clojure.string/split s #\"-\")))))", "user": "5474d1f4e4b0c51c1f4d728c"}, {"problem": 102, "code": "(fn [x] (clojure.string/replace x #\"-([a-z,A-Z])\" #(.toUpperCase (%1 1))))", "user": "54b050cee4b09f271ff37d13"}, {"problem": 102, "code": "(fn [s]\n  (let [[h & rs] (clojure.string/split s #\"-\")]\n    (clojure.string/join (cons h (map #(clojure.string/capitalize %) rs)))\n))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 102, "code": ";;;; initial approach:\n;; (fn [inp] (clojure.string/replace inp #\"-[a-z]\" #(str (last (.toUpperCase %)))))\n#(clojure.string/replace % #\"-[a-z]\" (comp clojure.string/upper-case last))", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 102, "code": "(fn doit [s]\n  (let  [\n    words     (clojure.string/split s #\"-\")\n    cap_words (map clojure.string/capitalize (rest words))\n  ]\n    (clojure.string/join (cons (first words) cap_words))))", "user": "5465febde4b01be26fd746e1"}, {"problem": 102, "code": "#(clojure.string/join \"\"\n                       (map (fn [[a b]]\n                              (if (= \\- b)\n                                \"\"\n                                (if (= \\- a)\n                                  (Character/toUpperCase b)\n                                  b)))\n                              (partition 2 1 (cons \\a (seq %)))))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 102, "code": "(fn intoCamelCase [word]\n  (if (not (re-find #\"-\" word)) word\n      (let [[s & ss] (clojure.string/split word #\"-\")]\n        (apply str s (map clojure.string/capitalize ss)))))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 102, "code": "(fn __ [s]\n  (let [l (clojure.string/split s #\"-\")]\n    (apply str (cons (first l) (map clojure.string/capitalize (rest l))))))", "user": "54c271b9e4b045293a27f602"}, {"problem": 102, "code": "(fn [x]\n  (let [s (re-seq #\"[^-]+\" x)]\n        (apply str (first s)\n               (map #(apply str (.toUpperCase (str (first %)))\n                            (rest %)) (rest s)))))", "user": "50342d1be4b062bc5d7ae15f"}, {"problem": 102, "code": "(fn [w] \n  (clojure.string/replace w #\"-(\\w)\" \n                          (fn [[_ s]] (clojure.string/capitalize s))))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 102, "code": "(fn [word]\n  (let [[x & xs] (clojure.string/split word #\"-\")]\n    (apply str (conj (map clojure.string/capitalize xs) x))))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 102, "code": "(fn[s]\n  (reduce #(str %1 (clojure.string/capitalize %2))\n          (clojure.string/split s #\"-\")))", "user": "51db0d99e4b06aa4d4669a9d"}, {"problem": 102, "code": "(fn [s]\n     (clojure.string/replace s #\"-([a-z])\" #(.toUpperCase (str (second %1)))) \n  )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[_ x]] (clojure.string/upper-case x)))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 102, "code": "(fn intoCamelCase\n  [s]\n  (if (not (re-find #\"-\" s))\n    s\n    (clojure.string/join\n     (let [x (first (clojure.string/split s #\"-\"))\n           xs (rest (clojure.string/split s #\"-\"))]\n       (cons x (map clojure.string/capitalize xs))))))", "user": "52561295e4b0541d1855ba03"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-\\w\" (fn [[_ w]] (clojure.string/upper-case w)))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 102, "code": "(fn [s]\n  (let [a (clojure.string/split s #\"-\")]\n    (reduce #(str % (clojure.string/capitalize %2)) (first a) (rest a))))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 102, "code": "(fn [original]\n  (let [words (clojure.string/split original #\"-\")]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))\n  )\n)", "user": "546692aee4b01be26fd746e7"}, {"problem": 102, "code": "(fn [s] (apply str (mapcat #(cond (= %2 \\-) (clojure.string/capitalize %1) (= %1 \\-) nil :else (list %1)) s (cons \\0 s))))", "user": "54c641f8e4b045293a27f628"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str \n           (first words) \n           (map #(clojure.string/join (cons (Character/toUpperCase (first %)) (rest %))) (rest words)))))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 102, "code": "(fn [s]\n  (apply str (loop [s s\n                    result []]\n               (let [[a b & r] s]\n                 (if a\n                   (if (and b (= \\- a))\n                     (recur r (conj result (Character/toUpperCase b)))\n                     (recur (cons b r) (conj result a)))\n                   result)))))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 102, "code": "(fn [w]\n  (let [ [ fst & others ] (.split w \"-\") \n         camels           (map clojure.string/capitalize others) ]\n    (apply str fst camels) ))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 102, "code": "(fn [s]\n  (let [[fst-word & other-words] (clojure.string/split s #\"-\")]\n    (apply str fst-word (map clojure.string/capitalize other-words))))", "user": "52950ab6e4b02ebb4ef7501a"}, {"problem": 102, "code": "(fn [s]\n    (let [ss (clojure.string/split s #\"-\")]\n      (apply str (first ss)\n             (map clojure.string/capitalize (rest ss)))))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 102, "code": "(fn intoCamelCase [word]\n  (let [splitted (clojure.string/split word #\"-\")]\n    (clojure.string/join (cons (first splitted) (map clojure.string/capitalize (rest splitted))))))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 102, "code": "(fn camel [s]\r\n  (clojure.string/replace s #\"-(.)\" #(.toUpperCase (%1 1))))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 102, "code": "(fn intoCamelCase [s]\n  (let [lst (clojure.string/split s #\"[-]\")]\n    (clojure.string/join \"\"\n    (cons (first lst) (map  (fn [x] (clojure.string/capitalize x)) (rest lst))))))", "user": "53664e3be4b0243289761e74"}, {"problem": 102, "code": "(fn into-camel-case\n  [kw]\n  ((comp\n     #(str (first %) (apply str (map clojure.string/capitalize (rest %))))\n     #(clojure.string/split % #\"-\"))\n    kw))", "user": "5383668ee4b06839e8705edd"}, {"problem": 102, "code": "(fn [s]\n  (reduce\n   #(str %1 (clojure.string/capitalize %2))\n   (re-seq #\"\\w+\" s)))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 102, "code": "(fn [s]\n  (let [[f-s & r] (clojure.string/split s #\"-\")]\n    (apply str f-s (map #(clojure.string/capitalize %) r))))", "user": "4dd6d7ee535d2dad7130b5cb"}, {"problem": 102, "code": "(fn [x] (clojure.string/replace x #\"-(.)\" #(.toUpperCase (%1 1))))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 102, "code": "(fn [st]\n (->>\n  (seq (str \" \" st))\n  (partition 2 1)\n  (map #(if (= \\- (first %)) (Character/toUpperCase (last %)) (last %)))\n  (filter #(not= \\- %))\n  (apply str)))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] (apply str (first words) (map clojure.string/capitalize (rest words))))", "user": "504f9ae1e4b0a02f9cffde9c"}, {"problem": 102, "code": "(fn camelCase [s]\n  (clojure.string/replace s #\"\\W(\\w)(?=\\w)\" #(.toUpperCase (%1 1))))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 102, "code": "(fn [x]\n  (let [a (clojure.string/split x #\"-\")\n        f (first a)\n        r (map clojure.string/capitalize (rest a))]\n  (apply str f r)\n    )\n  )", "user": "517e12e3e4b0fcc7c5d37d3c"}, {"problem": 102, "code": "(fn [s]\n  (let [[w & ws] (.split s \"-\")]\n    (apply str \n           (conj (map #(let [[c & cs] %]\n                         (apply str (Character/toUpperCase c) cs)) ws) w))))", "user": "53523ae0e4b084c2834f4aee"}, {"problem": 102, "code": "(fn [hyphenated-string]\n  (reduce #(str %1 (clojure.string/capitalize %2))\n          (clojure.string/split hyphenated-string #\"-\")))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 102, "code": "(fn [s]\n  (let [parts (clojure.string/split s #\"-\")]\n    (apply str (cons (first parts)\n                     (map clojure.string/capitalize (rest parts))))))", "user": "5338387de4b0e30313ee6c91"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-([a-z])\" #(str (clojure.string/upper-case (get % 1)))))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 102, "code": "(fn [s]\n  (let [ss (clojure.string/split s #\"-\")]\n    (clojure.string/join\n      [(first ss)\n      (clojure.string/join (map clojure.string/capitalize (rest ss)))])))", "user": "54580586e4b01be26fd74616"}, {"problem": 102, "code": "(fn [x]\n  (let [split (.split x \"-\")]\n    (apply str (cons (first split) (map clojure.string/capitalize (rest split))))))", "user": "525cc912e4b0cb4875a45d48"}, {"problem": 102, "code": "(comp {\\s \"something\" \\m \"multiWordKey\" \\l \"leaveMeAlone\"} first)", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 102, "code": "(fn [x]\n  (let [xs (re-seq #\"[^-]+\" x)\n        ys (for [_ (rest xs)]\n             (apply str\n                    (concat (.toUpperCase (str (first _)))\n                            (rest _))))]\n    (apply str (conj ys (first xs)))))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 102, "code": "#(let [s (.split % \"-\")] (apply str (cons (first s) (map clojure.string/capitalize (rest s)))))", "user": "52117ea7e4b07aea8afc4f70"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-([a-z])\" #(.toUpperCase (%1 1))))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 102, "code": "(fn into-camel-case\n  [s]\n  (let [ws (clojure.string/split s #\"-\")]\n    (reduce\n     #(str %1 (clojure.string/capitalize %2))\n     (first ws)\n     (rest ws))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 102, "code": "(fn [s]\n  (let [[w & ws] (clojure.string/split s #\"-\")]\n    (apply str (cons w (map clojure.string/capitalize ws)))))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 102, "code": "(fn cc[s]\n  (let [ws (clojure.string/split s #\"-\")]\n    (str (first ws)\n         (apply str (map clojure.string/capitalize (rest ws ))))))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"\\-([a-zA-Z])\" #(.toUpperCase (%1 1))))", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 102, "code": "#(let [parts (clojure.string/split % #\"-\")]\n\t(->>\n\t\t(rest parts)\n\t\t(map clojure.string/capitalize)\n\t\t(cons (first parts))\n\t\t(clojure.string/join)))", "user": "5472d919e4b094393f72dd7b"}, {"problem": 102, "code": "(fn [s]\n  (reduce #(clojure.string/replace %1 %2 (clojure.string/capitalize (subs %2 1)))\n           s\n           (re-seq #\"-[a-z]\" s)))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 102, "code": "(fn [string]\n  (clojure.string/join \"\"\n  (reduce #(concat %1 (clojure.string/capitalize %2))\n               (clojure.string/split string #\"[^a-zA-Z]\"))))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 102, "code": "#(first (reduce (fn [[r n] y]\n                 (cond\n                   n [(str r (clojure.string/upper-case y))]\n                   (= y \\-) [r true]\n                   true [(str r y)])\n                 ) [\"\"] %))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 102, "code": "(fn  [inputStr] (clojure.string/replace inputStr #\"(-)([a-z])\"  (fn [[wholeMatch dash chr]] (str (clojure.string/upper-case chr)))))", "user": "54ccf9d5e4b057c6fda3a295"}, {"problem": 102, "code": "(fn [s]\n  (apply str (loop [s s acc [] upcase? false]\n               (if (empty? s)\n                 acc\n                 (let [dash? (= \\- (first s))]\n                   (recur (rest s)\n                          (if dash?\n                            acc\n                            (conj acc (if upcase?\n                                        (Character/toUpperCase (first s))\n                                        (first s))))\n                          (if dash?\n                            true\n                            false)))))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 102, "code": "(fn ([s] (clojure.string/replace s #\"-(\\S)\" #(.toUpperCase (%1 1)))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 102, "code": "(fn intoCamelCase\n  [s]\n  (loop [currS s\n         result []]\n    (if (empty? currS)\n      (apply str result)\n      (if (= (first currS) \\-)\n        (recur (rest (rest currS)) (conj result (Character/toUpperCase (first (rest currS)))))\n        (recur (rest currS) (conj result (first currS)))))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 102, "code": "#(let [[s & r] (clojure.string/split % #\"-\")]\n   (apply str s (map clojure.string/capitalize r)))", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-[a-z]\" #(clojure.string/upper-case (second %))))\n\n;#(reduce \n;   (fn [t v] (apply str t (clojure.string/upper-case (first v)) (rest v))) \n;   (clojure.string/split %1 #\"-\"))", "user": "4f7207d3e4b07046d9f4f019"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/join \"\"\n                       (reduce (fn [acc newchar]\n                                 (if (= \\- (last acc)) (conj (into [] (butlast acc)) (clojure.string/upper-case newchar))\n                                     (conj acc newchar))) [] (into [] s))))", "user": "51b76227e4b0d906fcd71d35"}, {"problem": 102, "code": "(fn [word]\n  (let [[head & tail] (clojure.string/split word #\"-\")]\n    (str head (apply str (map clojure.string/capitalize tail)))))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 102, "code": "(fn camelize [s] \n  (let [parts (clojure.string/split s #\"-\")]\n    (apply str (first parts) (map clojure.string/capitalize (rest parts))\n)))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 102, "code": "#(let [l (re-seq #\"\\w+\" %)] (apply str (cons (first l) (map clojure.string/capitalize (rest l)))))", "user": "544e8369e4b0e39780006987"}, {"problem": 102, "code": "(fn [stri]\n   (first (reduce (fn [x y] (println x y) (if (= (str y) \"-\")\n                                            (vec x)\n                                            (if (seq? x)\n                                              (list (str (first x) y))\n                                              (list (str (first x) (clojure.string/upper-case y) ))))) '() stri)))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 102, "code": "(fn [entrada]\n(let [x (clojure.string/split entrada #\"-\")]\n(str (first x) (clojure.string/join \"\" (map clojure.string/capitalize (rest x))))))", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-.\" #(clojure.string/upper-case (last %))))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[a b]] (clojure.string/capitalize b)))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 102, "code": "#(let [[f & r](clojure.string/split % #\"-\")]\n         (clojure.string/join \"\" (cons f (map clojure.string/capitalize r))))", "user": "526a3412e4b03e8d9a4a721e"}, {"problem": 102, "code": "(fn [s]\n  (let [words (.split s \"-\")] \n    (clojure.string/join \"\" (flatten\n     (conj '[] (first words)\n           (map clojure.string/capitalize (rest words)))))))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 102, "code": "#(let [pieces (clojure.string/split % #\"-\")]\n   (reduce str (first pieces) (map clojure.string/capitalize (rest pieces))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 102, "code": "(fn [s]\n    (let [diff (- (int \\a) (int \\A))]\n      (loop [s s acc [] is-upper false]\n       (if (empty? s)\n         (apply str acc)\n         (if (= (first s) \\-)\n           (recur (rest s) acc true)\n           (recur (rest s) (conj acc (if is-upper\n                                       (char (- (int (first s)) diff))\n                                       (first s))) false))))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 102, "code": "(fn [s]\n  (let [[word1 & words] (remove empty? (re-seq #\"[^-]*\" s))\n        words (mapcat (fn [w] (let [fl (char (- (int (first w)) 32)) rl (rest w)] (cons fl rl))) words)]\n    (apply str word1 words)))", "user": "53908e6be4b0b51d73faae9a"}, {"problem": 102, "code": "(fn camel-case [s]\n  (loop [s1 s, s2 \"\"]\n    (if-let [c (first s1)]\n      (if (= \\- c)\n        (if-let [d (first (rest s1))]\n          (recur (rest (rest s1)) (str s2 (.toUpperCase (str d))))\n          (str s1 c))\n        (recur (rest s1) (str s2 c)))\n      s2)))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 102, "code": "(fn convert [st]\n  (let [strs (map clojure.string/capitalize (clojure.string/split st #\"-\"))]\n    (if (< 1 (count strs))\n      (apply str (concat (clojure.string/lower-case (first strs)) (apply str (rest strs))))\n      st)))", "user": "5143824ae4b0b4fb4ace5f36"}, {"problem": 102, "code": "(fn [s]\n  (letfn [(capitalize [s]\n            (clojure.string/join (cons (Character/toUpperCase (.charAt s 0))\n                                       (.substring s 1))))]\n    (let [ss (clojure.string/split s #\"-\")\n          f (first ss)\n          r (map capitalize (rest ss))]\n      (clojure.string/join (cons f r)))))", "user": "512e31e9e4b0b740abc59823"}, {"problem": 102, "code": "(fn match [s]\n  (apply str (reduce (fn [a b]\n                 (if (= (last a) \\-)\n                   (conj\n                    (vec (butlast a))\n                    (first (.toUpperCase (str b))))\n                   (conj a b)))\n               [] (seq s))))", "user": "50611456e4b0dc10a69545a5"}, {"problem": 102, "code": "(fn [v]\n  (reduce\n   #(if (= \"-\" (str (last %1)))\n      (str (apply str (butlast %1)) (Character/toUpperCase %2))\n      (str %1 %2))\n   \"\" v))", "user": "50f53694e4b057d4c52de881"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (% 1))))", "user": "552694e7e4b0ffed3738f920"}, {"problem": 102, "code": "(fn [s]\n          (let [parts (clojure.string/split s #\"\\-\" )\n                ccc (rest parts)\n                cc (map clojure.string/capitalize ccc)\n                c (cons (first parts) cc)\n                ]\n            (apply str c)\n            )\n          )", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-(\\w)\" #(clojure.string/upper-case (second %1))))", "user": "4f4e78fee4b03ad3f0c10cc8"}, {"problem": 102, "code": "(fn to-camel-case--flex [& args]\n  {:pre [(every? string? args),\n         (every? (partial re-find #\"^[-a-zA-Z0-9\\s]*$\") args)]}\n  (let [\n        ;; It will be convenient to reverse the argument order in the function\n        ;; clojure.string/split.\n        split\n        (fn [re s] (clojure.string/split s re)),\n\n        ;; Most of the work occurs here.\n        result\n        (map (comp (partial apply str)\n                   (juxt first\n                         (comp (partial apply str)\n                               (partial map clojure.string/capitalize)\n                               rest))\n                   (partial split #\"-\"))\n             (mapcat (partial split #\"\\s\") args))]\n\n    ;; All that remains is to deal with the single-word case.\n    (if (= 1 (count result))\n      (first result)\n      result)))", "user": "4fc6305de4b0ee37620e180b"}, {"problem": 102, "code": "(fn to-camel-case [input]\n  (loop [was-dash false rem (vec input) res []]\n    (let [fst-char (first rem)]\n      (cond (empty? rem) (apply str res)\n            was-dash (recur false (rest rem) (conj res (Character/toUpperCase fst-char)))\n            (= fst-char \\-) (recur true (rest rem) res)\n            :else (recur false (rest rem) (conj res fst-char))))))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 102, "code": "#(reduce\n    (fn [x s] (str x (clojure.string/capitalize s)))\n    (re-seq #\"\\w+\" %))", "user": "51a058dae4b0b292b01ee3f3"}, {"problem": 102, "code": "(fn [x] (clojure.string/replace x #\"-(.)\" #(.toUpperCase (% 1))))", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 102, "code": "(fn to-camel-case [s]\n  (let [tokens (clojure.string/split s #\"\\-\")]\n    (apply str (first tokens)\n           (map clojure.string/capitalize (rest tokens)))))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 102, "code": "(fn intocamelcase [ss]\n  (let [upfirsthyphen (fn [ww]\n                        (if (not= \\- (first ww))\n                          ww\n                          (apply str \n                            (concat \n                              (clojure.string/upper-case (first (rest ww))) \n                              (rest (rest ww))))))\n        findhyphenpos (fn [st]\n                  (filter #(not= nil %) \n                    (for [i (range (count st))]\n                      (when (= \\- (nth st i)) i))))\n        seqpos  (concat (cons 0 (findhyphenpos ss)) (list (count ss)))\n        seqposw (concat (cons 0 (findhyphenpos ss)) (list (count ss)))\n        pospair (partition 2 1 seqpos)]\n     (apply str (map upfirsthyphen (map #(apply subs ss %) pospair)))))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 102, "code": "(fn [s]\n  (let [words (re-seq #\"\\w+\" s)]\n    (reduce #(str %1 (clojure.string/upper-case (first %2)) (apply str (rest %2))) (first words) (rest words))))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 102, "code": "(fn [x]\n  (clojure.string/replace x #\"\\-\\w{1}\" #(str (last (seq (clojure.string/upper-case %))))))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 102, "code": "#(let [[first-part & more-parts] (.split % \"-\")]\n  (apply str (cons first-part (map clojure.string/capitalize more-parts))))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 102, "code": "(fn [s]\n  (letfn [(capitalize [c]\n             (char (- (int c) 32)))]\n    (loop [rem s\n           res []]\n      (if (empty? rem)\n        (apply str res)\n        (if (= \\- (first rem))\n          (recur (drop 2 rem) (conj res (capitalize (second rem))))\n          (recur (rest rem) (conj res (first rem))))))))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 102, "code": "(fn [s]\n  (apply str (first s)\n         (map (fn [[a b]] (if (= \\- a) (.toUpperCase (str b)) b))\n              (filter #(not= \\- (second %)) (partition 2 1 s)))))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 102, "code": "(fn [x]\n  (let [arr (clojure.string/split x #\"-\")]\n    (reduce (fn [t v] (prn v) (str t (clojure.string/capitalize v) )) (first arr) (rest arr))))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (%1 1))))", "user": "54926752e4b0b312c081ff44"}, {"problem": 102, "code": "#(case (count %) 12 \"leaveMeAlone\" 9 \"something\" \"multiWordKey\")", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 102, "code": "#(loop [s (seq %) c false r []]\n    (if (empty? s)\n      (apply str r)\n      (let [f (first s) nc (= \\- f)]\n        (recur (rest s) nc (conj r (if nc \"\" (if c (Character/toUpperCase f) f)))))))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 102, "code": "(fn [s]\n  (let [[fw & ws] (clojure.string/split s #\"-\")]\n    (clojure.string/join\n      (conj (map clojure.string/capitalize ws)\n            fw))))", "user": "4f678ac8e4b07046d9f4ef67"}, {"problem": 102, "code": "(fn [input]\n  (let [parts (clojure.string/split input #\"-\")]\n              (clojure.string/join (cons (first parts)\n                                         (map (fn [word] (apply str\n                                                                (concat (.toUpperCase (str (first word)))\n                                                                        (rest word))))\n                                              (rest parts))))))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 102, "code": "#(reduce (fn [a m]\n          (clojure.string/replace a m (.toUpperCase (str (second m)))))\n         %\n         (re-seq #\"-\\w\" %))", "user": "55495318e4b0a04f79299566"}, {"problem": 102, "code": "(fn [s]\n  (reduce #(str %1 (clojure.string/capitalize %2)) \n                (map #(apply str %) (filter #(not (= [\\-] %)) (partition-by #(= \\- %) s)))))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 102, "code": "(fn [s]\n  (-> s\n      (clojure.string/split #\"-\")\n      (#(cons (first %) (map clojure.string/capitalize (rest %))))\n      clojure.string/join))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 102, "code": "(fn [s]\n  (let [[w & ws] (clojure.string/split s #\"-\")]\n    (apply str w (map clojure.string/capitalize ws))))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 102, "code": "#(loop [result \"\", s %, hyphen false]\n\t(if (empty? s)\n\t\tresult\n\t\t(let [s0 (first s), s' (rest s)]\n\t\t\t(cond\n\t\t\t\thyphen (recur (str result (clojure.string/upper-case s0)) s' false)\n\t\t\t\t(= \\- s0) (recur result s' true)\n\t\t\t\t:else (recur (str result s0) s' false)))))", "user": "5370b386e4b0fc7073fd6e9b"}, {"problem": 102, "code": "reduce #(str (if (= \\- (last %1)) (str (subs %1 0 (dec (count %1))) (clojure.string/upper-case (str %2))) (str %1 %2))) \"\"", "user": "551c66dae4b07993ea3788de"}, {"problem": 102, "code": "(fn [s] \n  (let [[w & ws] (clojure.string/split s #\"-\")]    \n   (str w (apply str (map clojure.string/capitalize ws)))))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 102, "code": "(fn camel-case\n  [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (str\n     (first words)\n     (apply str (map clojure.string/capitalize (rest words))))))", "user": "554b425ce4b0a04f79299581"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-([a-z])\" #(clojure.string/upper-case (%1 1))))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 102, "code": "(fn [w]\n  (->> (re-seq #\"\\w+\" w)\n       (reduce #(str % (clojure.string/capitalize %2)))))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 102, "code": "(fn camel [s]\n  (let [s (re-seq #\"\\w+\" s)]\n    (apply str (first s) (map clojure.string/capitalize (rest s)))))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 102, "code": "(fn [s]\n   (let [[fst-word & other-words] (clojure.string/split s #\"-+\")\n         capitalized (into [fst-word]\n                           (map clojure.string/capitalize other-words))]\n     (apply str capitalized)))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 102, "code": "(fn camelcase\n  [[x & xs]]\n    (cond\n      (= x \\-) (str (clojure.string/upper-case (first xs)) (camelcase (rest xs)))\n      x (str x (camelcase xs))\n      :else \"\"))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 102, "code": "(fn  [s]\n  (let [ws  (clojure.string/split s #\"-\")\n        rs (map clojure.string/capitalize (rest ws))]\n    (apply str (first ws) rs)))", "user": "516d227fe4b06f078fab252d"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")\n        adjusted-words `(~(first words) ~@(map clojure.string/capitalize (rest words)))]\n    (clojure.string/join adjusted-words)))", "user": "5553b924e4b0deb715856e06"}, {"problem": 102, "code": "(fn [ a ]\n  (reduce\n    #(str %1 (clojure.string/capitalize %2))\n    (re-seq #\"[^-]+\" a)))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 102, "code": "(fn [s]\n    (let [words (clojure.string/split s #\"-\")]\n      (apply str\n             (conj (map clojure.string/capitalize (rest words)) (first words)))))", "user": "5317d78ee4b08068f379ed63"}, {"problem": 102, "code": "(fn a [s]\n  (let [words (clojure.string/split s #\"-\")\n        camels (into [(first words)] (map clojure.string/capitalize (rest words)))]\n    (clojure.string/join \"\" camels)\n    ))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 102, "code": "#(let[words (clojure.string/split % #\"\\W\")\n      capWords (map clojure.string/capitalize (rest words))]\n   (reduce str (first words) capWords))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 102, "code": "#(let [ws (re-seq #\"\\w+\" %)]\n   (apply str (conj (map clojure.string/capitalize (next ws)) \n                    (first ws))))", "user": "554b8572e4b0a04f79299589"}, {"problem": 102, "code": "(fn [s]\r\n  (let [[head & tail] (clojure.string/split s #\"-\")]\r\n    (clojure.string/join \"\"\r\n      (cons head (map clojure.string/capitalize tail)))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 102, "code": "(fn [s]\n  (let [str-split (clojure.string/split s #\"-\")]\n    (apply str (first str-split)\n           (map clojure.string/capitalize (rest str-split)))))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 102, "code": "(fn hyphen-to-camel-case\n  \n  [hyphen-str]\n  (clojure.string/replace  hyphen-str #\"-[a-z]\" #(clojure.string/upper-case (last %1))))", "user": "55079e55e4b021ccfedb96aa"}, {"problem": 102, "code": "(fn intoCamelCase [s] \n  (->> s\n   (#(clojure.string/split % #\"-\"))\n   (mapcat #(cons (clojure.string/upper-case (first %)) (rest %)))\n   (#(cons (->> % first clojure.string/lower-case) (rest %)))\n   (reduce str)\n))", "user": "5280a1ece4b0757a1b171407"}, {"problem": 102, "code": "(fn [s] (let [[f & r] (clojure.string/split s #\"-\")] (clojure.string/join (concat f (map clojure.string/capitalize r)))))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 102, "code": "(fn camel-case\n  [word]\n  (let [x (re-seq #\"[a-zA-Z]+\" word)]\n    (apply str (cons (first x) (map clojure.string/capitalize (rest x))))\n  )\n)", "user": "556be3dce4b09a3098a524f7"}, {"problem": 102, "code": "#(let [[f & r] (clojure.string/split % #\"-\")]\n     (apply str f (map clojure.string/capitalize r)))", "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (cons (first words) (map clojure.string/capitalize (rest words))))))", "user": "55702081e4b09a3098a52529"}, {"problem": 102, "code": "(fn intoCamelCase [s]\n  (let [sp (clojure.string/split s #\"-\")]\n    (apply str (cons (first sp) (map #(str (.toUpperCase (subs % 0 1)) (subs % 1)) (rest sp))) )))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 102, "code": "(fn [s]\n  (->>\n   (partition 2 1 (cons nil s))\n   (map (fn [[prev char]]\n          (if (= prev \\-)\n            (Character/toUpperCase char)\n            char)))\n   (filter #(not= % \\-))\n   (apply str)))", "user": "55586905e4b0deb715856e2b"}, {"problem": 102, "code": "(fn to-camel [name]\n     (let [words (clojure.string/split name #\"-\")]\n       (apply str (first words) (map clojure.string/capitalize (rest words)))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 102, "code": "(fn [multi-word-key]\n  (let [[word1 & more] (clojure.string/split multi-word-key #\"-\")]\n    (apply str\n           word1\n           (map clojure.string/capitalize more))))", "user": "53065acbe4b02e8216869792"}, {"problem": 102, "code": "(fn sol [x] (clojure.string/replace (clojure.string/replace x #\"-.\" #(.toUpperCase %1)) #\"-\" \"\"))", "user": "54857657e4b0e286459a11ac"}, {"problem": 102, "code": "(fn [s]\n  (->> (clojure.string/split s #\"-\")\n       (#(cons (first %)\n               (map clojure.string/capitalize (rest %))))\n       (apply str)))", "user": "52470d42e4b05ef8e38e6350"}, {"problem": 102, "code": "(fn into-camel-case\n  [word]\n  (let [split-word (.split #\"-\" word)]\n    (apply str\n           (cons (first split-word)\n                 (map (fn [word] (apply str (cons (char (- (int (first word)) 32))\n                                                  (rest word))))\n                      (rest split-word))))))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 102, "code": "#(let [[h & r] (clojure.string/split % #\"-\")]\n   (str h (clojure.string/join \"\" (map clojure.string/capitalize r))))", "user": "545ddac3e4b01be26fd74676"}, {"problem": 102, "code": "(fn  [s]\n  (let [ws (clojure.string/split s #\"-\")]\n    (str (first ws)\n         (apply str (map #(clojure.string/capitalize %) (rest ws))))))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 102, "code": "(fn [x]\n  (clojure.string/replace x #\"-[a-z]\" #(clojure.string/upper-case (second %))))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 102, "code": "(fn intoCamelCase [s]\n    (let [capitalize (fn [[x & xs]]\n                       (clojure.string/join (conj xs (.toUpperCase (str x))))\n\n                       )\n          [fw & ow] (clojure.string/split s #\"-\")]\n\n\n      (apply str (conj (map capitalize ow) fw))))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 102, "code": "(fn camelCase [st]\n  (loop [s (rest (clojure.string/split st #\"-\")) d (first (clojure.string/split st #\"-\"))]\n    (if (empty? s) d\n      (recur (rest s) (str d (clojure.string/capitalize (first s)))))))", "user": "558378dce4b05c286339e115"}, {"problem": 102, "code": "(fn [s]\n  (letfn [(first-char [f s]\n                      (apply str (f (first s)) (rest s)))]\n    (first-char clojure.string/lower-case (clojure.string/join \"\"\n                                                                (map #(first-char clojure.string/upper-case %) (clojure.string/split s #\"\\-\"))))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 102, "code": "(fn [word]\n  (let [pieces (clojure.string/split word #\"-\")\n        f (first pieces)\n        r (rest pieces)]\n    (str f (if r (apply str (map clojure.string/capitalize r))))))", "user": "52fc34cee4b047fd55837015"}, {"problem": 102, "code": "(fn f102 [str]\n(clojure.string/replace str #\"-(\\w)\" #(clojure.string/upper-case (second %1))))", "user": "51f81925e4b09be9c177e526"}, {"problem": 102, "code": "(fn [ss] (clojure.string/replace ss #\"-(\\w)\" #(clojure.string/upper-case (second %1)) ))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 102, "code": "(fn camel-case\n  [s]\n  (clojure.string/replace s\n                          #\"-.\"\n                          #(str (Character/toUpperCase (second %1)))))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 102, "code": "(fn camel-case [input]\n  (let [lst (clojure.string/split input #\"-\")]\n    (clojure.string/join (concat [(first lst)] (map clojure.string/capitalize (rest lst))))))", "user": "5545477fe4b0a04f79299531"}, {"problem": 102, "code": "(fn into-camel-case [string]                                                                                                    \n    (let [[a & b] (clojure.string/split string #\"-\")                                                                                                    \n          uc-first (fn [s] (apply str (clojure.string/upper-case (first s)) (rest s)))                                          \n          camel-case (apply str a (map uc-first b))]                                                                                                    \n                camel-case))", "user": "558b50d5e4b027778923762b"}, {"problem": 102, "code": "(fn [s] \n(clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (%1 1))))", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-([a-zA-Z])\" (fn [[_ m]] (clojure.string/upper-case m))))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 102, "code": "(fn [s] (let [[x & xs] (.split s \"-\")]\n          (apply str x (map #(clojure.string/capitalize %) xs))))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 102, "code": "(fn [s]\n  (let [_ (vec (seq s))\n        idxs (keep-indexed #(if (= %2 \\-) %1) _)\n        _ (reduce (fn [_ idx] (update-in _ [(inc idx)] #(-> % str .toUpperCase))) _ idxs)\n        _ (filter #(not= % \\-) _)]\n    (apply str _)))", "user": "5518df4ce4b06a49daca83ce"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(.)\" (fn [[h m]] (.toUpperCase m)))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 102, "code": "#(let [[f & r] (re-seq #\"\\w+\" %)]\n      (apply str f\n             (map clojure.string/capitalize r)))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s\n                          #\"-(\\w)\" \n                          (fn [[mall m1]] \n                            (clojure.string/upper-case m1))))", "user": "5596a324e4b04c1e5c31d757"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (%1 1))))", "user": "5590e55de4b0277789237676"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s \n                          #\"-([a-z])\" \n                          #(clojure.string/upper-case (apply str (second %)))))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 102, "code": "(fn me [mystr]\n\n\t(let [\n\t\t\tmy-str (re-seq #\"\\w+\" mystr)\n\n\t\t\tnew-word (fn [mystr1]\n\n\t\t\t\t\t\t(str \n\t\t\t\t\t\t\t(clojure.string/upper-case (first mystr1))\n\t\t\t\t\t\t\t(subs mystr1 1)\n\t\t\t\t\t\t)\n\t\t\t\t)\n\t\t]\n\n\t\t(if (= 1 (count my-str) )\n\n\t\t\tmystr\t\n\n\t\t\t(str (first my-str)\n\n\t\t\t\t\t(apply str (map new-word (rest my-str)) )\n\n\t\t\t\t)\n\n\t\t\t)\n\n\n\n\t\t)\n\n\t)", "user": "55897fe2e4b059ccff29b205"}, {"problem": 102, "code": "(fn intoCamelCase [s]\n  (let [words (re-seq #\"[^-]+\" s)]\n    (apply str (concat (first words) (map clojure.string/capitalize (rest words))))))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 102, "code": "(fn [s]\n   (let [[f & c] (clojure.string/split s #\"\\-\" )]\n     (reduce (fn [a r]\n               (str a (.toUpperCase (str (first r))) (clojure.string/join (rest r))))\n             (str (.toLowerCase (str (first f))) (clojure.string/join (rest f)))\n             c)))", "user": "55a37e1fe4b0acc240e31539"}, {"problem": 102, "code": "#(loop [res nil\n       remain (seq %)]\n  (if (seq remain)\n    (let [is-hyphen? (partial = \\-)\n          [part remain] (->> remain\n                             (drop-while is-hyphen?)\n                             (split-with (complement is-hyphen?)))]\n      (recur (concat res (if-not res \n                           part\n                           (-> part\n                               first\n                               str\n                               .toUpperCase\n                               (concat (rest part)))))\n             remain))\n    (apply str res)))", "user": "540e97f9e4b0addc1aec671f"}, {"problem": 102, "code": "(fn [s] \n  (apply str (reduce \n              (fn [acc v] (if (= 0 (count acc)) (conj acc v) (conj acc (clojure.string/capitalize v))))\n              [] (re-seq #\"\\w+\" s))))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 102, "code": "#(str\n   (first (clojure.string/split % #\"-\"))\n   (apply str (map clojure.string/capitalize\n                   (rest (clojure.string/split % #\"-\")))))", "user": "52f53589e4b05e3f0be25f2c"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s\n                          #\"-([a-zA-Z])\"\n                          #(clojure.string/upper-case (%1 1))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 102, "code": "(fn [s]\n  (str (first s)\n       (apply str (filter #(not= % \\-) (map (fn [[c1 c2]]\n                                              (if (= c1 \\-)\n                                                (Character/toUpperCase c2)\n                                                c2))\n                                          (partition 2 1 s))))))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[_ c]] (clojure.string/upper-case c)))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 102, "code": "(fn ! [string]\n  (cond\n   (empty? string) \"\"\n   :else\n   \t (let [f (first string)\n           s (second string)\n           f* (str f)\n           r1 (rest string)\n           r2 (drop 2 string)]\n       (if (= f* \"-\")\n         (apply str (cons (clojure.string/upper-case s) (! r2)))\n         (apply str (cons f (! r1)))))))", "user": "559f06bae4b0acc240e314e6"}, {"problem": 102, "code": "(fn [s]\n (let [$ (clojure.string/split s #\"-\")]\n   (str (first $)\n        (apply str (map clojure.string/capitalize (rest $))))))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 102, "code": "(fn [k]\n  (clojure.string/replace k #\"-\\S\" #(clojure.string/upper-case (second %))))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 102, "code": "(fn [s] (let [str-split (clojure.string/split s #\"-\")] \n          (apply str \n                 (cons \n                  (first str-split) \n                  (map clojure.string/capitalize \n                       (rest str-split))))))", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 102, "code": "(fn [s] (let [words (clojure.string/split s #\"-\")]\n        (apply str (first words) (map #(apply str (Character/toUpperCase (first %)) (rest %)) (rest words)))))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 102, "code": "(fn camel-case\n  [word]\n  (let [new-word (clojure.string/split word #\"-\")\n        coll (map #(str (first (.toUpperCase %))\n                   (reduce str (rest %)))\n                  (rest new-word))]\n    (if (empty? (reduce str coll)) (first new-word) (str (first new-word)\n                                                         (reduce str coll)))  ))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 102, "code": "(fn [s]\n  (let [ss (clojure.string/split s #\"-\")]\n    (apply str (cons (first ss) (map clojure.string/capitalize (rest ss))))))", "user": "55afd469e4b002ce9d5cbc19"}, {"problem": 102, "code": "(fn [s]\n  (let [low (clojure.string/split s #\"-\\w\")\n        up (map #(clojure.string/upper-case (second %)) (re-seq #\"-(\\w)\" s))]\n        (clojure.string/join (cons (first low) (interleave up (rest low))))))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 102, "code": "(fn [input]\n   (let [comps (clojure.string/split input #\"-\")\n         first-comp (first comps)\n         rest-comps (map #(clojure.string/capitalize %1) (rest comps))]\n     (str first-comp (clojure.string/join rest-comps))))", "user": "54b31445e4b09f271ff37d35"}, {"problem": 102, "code": "(fn [s]\n  (let [[fw & others] (.split s \"-\")]\n    (apply str fw (map clojure.string/capitalize others))))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 102, "code": "#(let [s (clojure.string/split % #\"-\")]\n        (str (first s)\n             (apply str (map clojure.string/capitalize (rest s)))))", "user": "537e104ce4b06839e8705e9a"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (%1 1))))", "user": "50ec409ce4b04edc33777045"}, {"problem": 102, "code": "(fn [s]\n  (reduce\n   #(str % (clojure.string/capitalize %2))\n   (clojure.string/split s #\"-\")))", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 102, "code": "(fn [s] (let [cs (clojure.string/split s #\"-\")]\n   (println cs)\n   (apply str (cons (first cs) (map #(clojure.string/capitalize %) (drop 1 cs))))\n))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 102, "code": "(fn [s]\n  (let [xs (clojure.string/split s #\"-\")\n        cs (map clojure.string/capitalize (rest xs))]\n    (clojure.string/join \"\" (conj cs (first xs)))))", "user": "5576f299e4b05c286339e077"}, {"problem": 102, "code": "#(let [[h & t] (clojure.string/split % #\"-\")]\n   (apply str h (map clojure.string/capitalize t)))", "user": "552a793ee4b0ffed3738f955"}, {"problem": 102, "code": "(fn camel->case\n  [that]\n  (let [[head & tail] (clojure.string/split that #\"-\")]\n    (apply str\n      (reduce \n         (fn [xs x] \n            (conj xs (apply str (conj (rest x) (clojure.string/upper-case (first x)))))) \n       [head] tail))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 102, "code": "(fn [x]\n  (let [y (clojure.string/split x #\"\\-\")]\n    (if (empty? (rest y))\n      (first y)\n      (#(str (first %) (apply str (map clojure.string/capitalize (rest %)))) y))))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 102, "code": "(fn  [x] (reduce str (conj (map clojure.string/capitalize (rest (clojure.string/split x #\"-\" ))) \n                           (first (clojure.string/split x #\"-\" )))))", "user": "5576e78de4b05c286339e075"}, {"problem": 102, "code": "(fn [s]\n  (let [[h & t](.split s \"-\")]\n    (apply str h (map #(apply str (Character/toUpperCase (first %))\n                            (rest %)) t))))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 102, "code": "(fn intoCamelCase [s]\n  [s]\n  (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (%1 1))))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 102, "code": "#(apply str\n        (loop [res [], string %]\n          (if (seq string)\n            (let [f (first string)]\n              (if (= \\- f)\n                (recur (conj res (clojure.string/upper-case (second string))) (rest (rest string)))\n                (recur (conj res f) (rest string))))\n            res)))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 102, "code": "(fn [string]\n      (let [lowers (re-seq #\"-\\w+\" string)\n            convert-results (->> lowers \n                              (map #(rest (map identity %))) \n                              (map #(cons (Character/toUpperCase (first %)) (rest %)))\n                              (map #(apply str %)  ) ) ]\n        (if (seq lowers) \n          (reduce #(clojure.string/replace %1 (key %2) (val %2)) string (apply assoc {} (interleave lowers convert-results)))\n          string)))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 102, "code": "(fn to-camel-case [s]\n  (let [m (re-seq #\"[^-]+\" s)]\n    (apply str (first m) (map clojure.string/capitalize (rest m)))))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 102, "code": "(fn to-camel-case [s]\n  (let [words (re-seq #\"\\w+\" s)]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 102, "code": "#(apply str (cons (first (.split % \"-\")) (map clojure.string/capitalize (rest (.split % \"-\")))))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 102, "code": "(fn [hyphen-string]\n  (let [separated (clojure.string/split hyphen-string #\"-\")]\n    (reduce (fn [result input]\n              (str result (clojure.string/capitalize input)))\n            (first separated) (rest separated))))", "user": "555521a5e4b0deb715856e12"}, {"problem": 102, "code": "(fn [s]\n   (let [parts (clojure.string/split s #\"-\")]\n     (clojure.string/join\n       (cons (first parts) (map clojure.string/capitalize (rest parts))))))", "user": "530b8580e4b02e82168697cc"}, {"problem": 102, "code": "(fn [input]\n\t(let [words (clojure.string/split input #\"-\")\n          capped-words (if (= 1 (count words)) words (map clojure.string/capitalize words))\n          combined (clojure.string/join capped-words)\n          result (str (clojure.string/lower-case (first combined)) (subs combined 1))]\n     result))", "user": "54e3e09fe4b024c67c0cf7e4"}, {"problem": 102, "code": "(fn slug->camel [s]\n  (let [ws (clojure.string/split s #\"-\")]\n    (apply str (first ws) (map clojure.string/capitalize\n                               (rest ws)))))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 102, "code": "(fn to-camel-case [s]\n  (->> (loop [s (seq s)\n              r ()]\n         (if s\n           (if (= \\- (first s))\n             (if (next s)\n               (recur (next (next s)) (cons (clojure.string/upper-case (first (next s))) r))\n               r)\n             (recur (next s) (cons (first s) r)))\n           r))\n       reverse\n       (apply str)))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 102, "code": "(fn p102 [word]\n  (if (> (.indexOf word \"-\") 0)\n    (p102 (str (subs word 0 (.indexOf word \"-\"))\n         (clojure.string/upper-case \n          (subs word (+ 1 (.indexOf word \"-\")) \n                (+ 2 (.indexOf word \"-\"))))\n         (subs word (+ 2 (.indexOf word \"-\")))))\n    word\n    ))", "user": "5400e918e4b0de5c41848619"}, {"problem": 102, "code": "#(let [[f & r] (clojure.string/split % #\"-\")]\n  (str f (clojure.string/join (map clojure.string/capitalize r))))", "user": "522eb5cce4b01cdb292c5f0c"}, {"problem": 102, "code": "#(clojure.string/join \"\"\n                      (let [sp (clojure.string/split % #\"\\-\")]\n                        (cons (first sp) (map clojure.string/capitalize (rest sp)))))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 102, "code": "(fn into-camel-case [s] (let [toks (clojure.string/split s #\"-\")] (clojure.string/join \"\" (conj (map clojure.string/capitalize (rest toks)) (first toks)))))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (clojure.string/join \"\"\n                         (concat (first words)\n                                 (map clojure.string/capitalize (rest words))))))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 102, "code": "#(let [coll (clojure.string/split % #\"-\")] (apply str (first coll) (map clojure.string/capitalize (rest coll))))", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 102, "code": "(fn [s] (apply str (map #(%1 %2) (cycle [identity #(.toUpperCase %)]) (re-seq #\"(?<=-)\\w|\\w+\" s))))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 102, "code": "#(let [s (re-seq #\"\\w+\" %)]\n   (apply str (cons (first s) (map (fn [w] (clojure.string/capitalize w)) (rest s)))))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 102, "code": "(fn camelcase [s]\n  (let [[f & r] (clojure.string/split s #\"-\")]\n    (str f (->> r\n                (map clojure.string/capitalize)\n                clojure.string/join))))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 102, "code": "(fn camal-case\n  [s]\n  (let [l (map str (.split s \"-\"))]\n    (if (> (count l) 1)\n      (apply str (first l) (map clojure.string/capitalize (rest l)) )\n      (apply str l)))\n  )", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 102, "code": "(fn [s] (let [ p (.split s \"-\")\n               f (first p)\n\t\t\t   r (map clojure.string/capitalize (rest p))\n             ]\n\t\t\t (reduce str (conj (seq r) f))\n\t\t\t ))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 102, "code": "(fn my-func [input]\n  (letfn [(split [x] (clojure.string/split x #\"-\"))]\n    (let [arr (split input)]\n      (apply str (first arr) (map #(apply str (.toUpperCase (str (first (seq %)))) (rest (seq %))) (rest arr)) )  )))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 102, "code": "(fn [w]\n   (let [words (clojure.string/split w #\"-\")]\n     (apply str (into [(first words)] (map clojure.string/capitalize (rest words))))))", "user": "55895eade4b059ccff29b202"}, {"problem": 102, "code": "(fn into-camel-case\n  [s]\n  (let [parts (clojure.string/split s #\"-\")]\n    (apply str (first parts) (map clojure.string/capitalize (rest parts)))))", "user": "51ae350fe4b09397d5109790"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (clojure.string/join \"\" (cons (first words) (map clojure.string/capitalize (rest words))))))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(.)\" (comp clojure.string/upper-case last))\n\n;(fn [s] \n;  (->> (clojure.string/split s #\"-\")\n;       (map-indexed (fn [i part] (if (pos? i) (apply str (clojure.string/upper-case (first part)) (rest part)) part)))\n;       (apply str)))", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 102, "code": "(fn [s]\n  (let [\n    words (re-seq #\"[^\\-]+\" s)]\n    (clojure.string/join (cons (first words) (map clojure.string/capitalize (rest words))))))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 102, "code": "(fn [s]\n  (let [ws (clojure.string/split s #\"-\")]\n    (apply str (cons (first ws) (map clojure.string/capitalize (rest ws))))))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 102, "code": "#(let [[s1 & sr] (clojure.string/split % #\"\\-\")]\n   (apply str s1\n          (map (fn [[c1 & cr]]\n                 (apply str (clojure.string/upper-case c1) cr))\n               sr)))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 102, "code": "(fn ->camel [s]\n   (if (< 0 (.indexOf s \"-\"))\n     (let [_s (clojure.string/join (map clojure.string/capitalize (clojure.string/split s #\"-\")))]\n       (apply str (clojure.string/lower-case (first _s)) (rest _s)))\n     s))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 102, "code": "(fn [word] (->> word\n                 (re-seq #\"\\w+\")\n                 (reduce #(concat %1 (clojure.string/capitalize %2)))\n                 (apply str)))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 102, "code": "(fn [s]\n                     (let [splits (clojure.string/split s #\"-\")\n                           camel-cased (cons (first splits) (map clojure.string/capitalize (rest splits)))]\n                       (clojure.string/join camel-cased)))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 102, "code": "(fn [s]\n    (let  [z (re-seq #\"\\w+\" s)]\n      (apply str (concat (first z) (mapcat clojure.string/capitalize (rest z))))\n      )\n  )", "user": "55e1d34ae4b050e68259b421"}, {"problem": 102, "code": "(fn [string]\n             (apply str (map\n                          (fn [val1 next prev] \n                            (if (= \\- val1) \n                              (clojure.string/upper-case next) \n                              (if (= \\- prev) \"\" \n                              val1)))\n                          string (concat (rest string) \" \") (concat \" \" (butlast string))\n             )))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 102, "code": "(fn [s] (reduce #(apply str % (clojure.string/capitalize %2)) (clojure.string/split s #\"\\-\")))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 102, "code": "(fn [s]\n  (let [[sf & sr] (re-seq #\"[a-zA-Z]+\" s)]\n    (apply str (concat [sf] (map #(str (first (.toUpperCase %)) (apply str (next %))) sr)))))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 102, "code": "(fn [s] (reduce\n         #(str % (clojure.string/capitalize %2))\n         (clojure.string/split s #\"-\")))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s\n                          #\"-([a-z])\"\n                          #(clojure.string/upper-case (apply str (nfirst %1)))))", "user": "524e79c1e4b0541d1855b7e0"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-\\w\" (fn [m] (.toUpperCase (subs m 1))))", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 102, "code": "#(let [ws (clojure.string/split % #\"-\")]\n   (clojure.string/join (cons (first ws) (map clojure.string/capitalize (rest ws)))))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 102, "code": "(fn prob102\n  [string]\n  (let [words (clojure.string/split string #\"-\")\n        num (count words)\n        ]\n    (if (= 1 num)\n      (first words)\n      (apply str (concat  [(first words)] (vec (map clojure.string/capitalize (rest words))))))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 102, "code": "(fn [x]\n  (let [words (clojure.string/split x #\"-\")]\n    (clojure.string/join (conj\n      (map #(clojure.string/capitalize %) (rest words))\n      (first words)\n    ))\n  )\n)", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 102, "code": "(fn [c]\n  (let [s (clojure.string/split c #\"-\")]\n    (apply str (first s) (map clojure.string/capitalize (rest s)))))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 102, "code": "(fn [s] \n  (let [[f & r] (clojure.string/split s #\"-\")]\n    (apply str (cons f (map clojure.string/capitalize r)))))", "user": "4faf97d8e4b081705acca258"}, {"problem": 102, "code": "(fn [thestr] (clojure.string/replace thestr #\"\\-(\\w)\" #(.toUpperCase (%1 1))))", "user": "55f75c6be4b06e875b46cea9"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (cons (first words) \n                     (map clojure.string/capitalize (rest words))))))", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 102, "code": "#(let [[word & words]\r\n        (clojure.string/split % #\"-\")]\r\n   (apply str word (map clojure.string/capitalize words)))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 102, "code": "(fn [s] \n  (clojure.string/replace s #\"-([a-z])\" #(.toUpperCase (%1 1))))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 102, "code": "(fn [string]\n  (let [[w & words] (partition-by #{\\-} string)]\n    (apply str (apply str w) \n           (map #(clojure.string/capitalize (apply str %))\n                (filter (complement #{[\\-]}) words)))))", "user": "55fbf6cae4b0f488688e066c"}, {"problem": 102, "code": "(fn __\n  [string]\n  (loop [loop-str string\n         result \"\"]\n    (let [[f s & others] loop-str]\n\t    (if (empty? loop-str)\n       result\n       (if (= \\- f)\n         (recur \n           others\n           (str result (.toUpperCase (str s))))\n         (recur\n           (rest loop-str)\n           (str result f)))))))", "user": "55a62092e4b0acc240e31554"}, {"problem": 102, "code": "#(clojure.string/join (let [my-string-seq (clojure.string/split % #\"-\")] (cons (first my-string-seq) (map clojure.string/capitalize (rest my-string-seq))))\n                      )", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 102, "code": "#(->>\n  (clojure.string/split % #\"-\")\n  (map-indexed (fn [i w] (if (zero? i) w (clojure.string/capitalize w))))\n  (apply str))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 102, "code": "(fn convert [f]\n    (let [i (.indexOf f \"-\")]\n        (if (> i 0)\n            (let [l (.substring f 0 i)\n                  m (.charAt f (inc i))\n                  r (.substring f (+ 2 i))]\n               (convert (str l (Character/toUpperCase m) r))\n           )\n        f)))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 102, "code": "(fn [str]\n  (let [words (clojure.string/split str #\"-\")]\n    (clojure.string/join\n      (concat (first words) (map clojure.string/capitalize (rest words))))))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-[a-z]\" #(clojure.string/upper-case (apply str (rest %)))))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 102, "code": "(fn [s]\n    (let [[w & ws] (clojure.string/split s #\"\\W\")]\n      (apply str w (map clojure.string/capitalize ws))))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-\\w\" (fn [[_ c]] (clojure.string/upper-case c)))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 102, "code": "(fn[s](\n         apply str(map char \n                       (filter (fn[c](not(= c 45))) (concat\n                                                        [(first(map int (seq s)))]\n         \n                                                        (map-indexed\n\t                                                        (fn[idx itm](\n\t                                                                      if (= (nth (map int (seq s)) idx) 45) (- itm 32) itm\n\t                                                                      ))\n                                                          (rest(map int (seq s)))\n                                                        )\n                                                        ))\n                       )\n         ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 102, "code": "(fn [hyphened-word]\n  (->> hyphened-word\n       (#(clojure.string/split % #\"-\"))\n       ((juxt (comp list first)\n              (comp (partial map clojure.string/capitalize) rest)))\n       (apply concat)\n       (apply str)))", "user": "532ecd44e4b019098a6f8b49"}, {"problem": 102, "code": "(fn [s]\n    (->> (re-seq #\"[^-]+\" s)\n         ((fn [[x & xs]] (cons x\n                               (map clojure.string/capitalize xs))))\n         (apply str)))", "user": "560e9a2de4b05f002753df52"}, {"problem": 102, "code": "(fn [s]\n   (let [ts (clojure.string/split s #\"-\")]\n     (apply str (first ts) (map (fn [st] (clojure.string/replace st #\"\\b.\" #(.toUpperCase %))) (rest ts )))\n       ))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 102, "code": "#(let [[h & t] (.split % \"-\")] \n   (apply str h (map clojure.string/capitalize t)))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 102, "code": "(fn [s]\n  (apply str \n         (loop [m s\n                r []\n                p false]\n           (if (empty? m)\n             r \n             (if p\n               (recur (rest m) (conj r (java.lang.Character/toUpperCase (first m))) false)\n               (if (= (first m) \\-)\n                 (recur (rest m) r true)\n                 (recur (rest m) (conj r (first m)) false)))))))", "user": "56051095e4b08b23635d3162"}, {"problem": 102, "code": "(fn [s] \n   (let [strings (clojure.string/split s #\"-\")] \n           (clojure.string/join \n             (cons (first strings) (map clojure.string/capitalize (rest strings)))))\n             )", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[_ c]] (clojure.string/upper-case c)))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 102, "code": "(fn [w]\n  (letfn [(caprest [ws] (concat [(first ws)] (map clojure.string/capitalize (rest ws))))]\n    (->> w\n         (re-seq #\"\\w+\")\n         caprest\n         clojure.string/join)))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 102, "code": "#(let [[x & xs] (clojure.string/split % #\"-\")]\n  (->> (cons x (map clojure.string/capitalize xs))\n       (apply str)))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 102, "code": "(fn [s]\n   (let [t (.split s \"-\")]\n     (apply str\n            (first t)\n            (map #(apply str (.toUpperCase (str (first %))) (rest %))\n                 (rest t)))))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 102, "code": "(fn [s]\n  (let [parts (clojure.string/split s #\"-\")]\n    (reduce (fn [acc [f & r]]\n              (apply str acc (Character/toUpperCase f) r))\n            parts)))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 102, "code": "(fn intoCamelCase [s]\n\t(reduce #(str %1 (clojure.string/capitalize %2)) (clojure.string/split s #\"-\"))\n)", "user": "5559b443e4b0deb715856e3c"}, {"problem": 102, "code": "(fn [str]\n    (let [parts (clojure.string/split str #\"-\")\n          upper (cons (first parts) (map clojure.string/capitalize (rest parts)))\n          ]\n      (clojure.string/join \"\" upper)\n    )\n  )", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 102, "code": "(fn[s]\n    (apply str\n      (map #(str (second %) (if (not (nil? (nth % 2)))(clojure.string/upper-case  (second (nth % 2))))) \n           (re-seq #\"(\\w+)(-\\w)?\" s))\n    )\n)", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 102, "code": "(fn [s]\n    (let [[h & t] (re-seq #\"[^-]+\" s) ]\n      (apply str (cons h (map clojure.string/capitalize t)))\n      )\n    )", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 102, "code": "(fn [s]\n    (-> s\n        (clojure.string/replace #\"-\\w\" #(str (.toUpperCase %1)))\n        (clojure.string/replace #\"-\" \"\")\n        ))", "user": "515ebde3e4b01e5d11ccd0a8"}, {"problem": 102, "code": "(fn to-camel-case [s]\n  (let [splitted-string (clojure.string/split s #\"-\")\n        first-word (first splitted-string)\n        rest-words (rest splitted-string)]\n    (apply str first-word\n           (map clojure.string/capitalize rest-words))))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 102, "code": "(fn [xs]\n   (->> (partition 2 1 xs)\n     (map (fn [[a b]] (if (= \\- a) (.toUpperCase (str b)) (str b))))\n     (cons (str (first xs)))\n     (remove #(= \"-\" %))\n     (apply str)))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 102, "code": "(fn [w] (clojure.string/replace w #\"-([a-z])\" #(.toUpperCase (%1 1))))", "user": "56011393e4b04bb52996e178"}, {"problem": 102, "code": "(fn  [st]\n  (let [[part & rparts :as parts] (clojure.string/split st #\"-\")]\n    (cond (not (seq rparts)) st\n          (not (every? #(re-matches #\"[a-z]+\" %) parts)) st\n          :else (apply str part (map clojure.string/capitalize rparts)))))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 102, "code": "#((fn [acc [s & ss]]\n      (if (empty? ss)\n        (apply str (conj acc s))\n        (if (= s \\-)\n          (recur (conj acc (clojure.string/upper-case (first ss))) (rest ss))\n          (recur (conj acc s) ss)))) [] %)", "user": "559a9a3de4b066d22e731f45"}, {"problem": 102, "code": "(fn [S] (clojure.string/replace S #\"-[a-z]\" (fn [s] (-> (last s) str (.toUpperCase)))))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 102, "code": "(fn camel-case\n  [s]\n  (let [tokens (filter #(not= % '(\\-)) (partition-by #(= % \\-) s))]\n    (apply str (cons (apply str (first tokens))\n                     (map #(apply str [(.toUpperCase (str(first %))) (apply str (next %))])\n                          (next tokens))))))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 102, "code": "(fn [l] \n  (clojure.string/replace l #\"-(.)\" #(clojure.string/upper-case (second %))))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 102, "code": "(fn camel [x]\n  (let [a (fn a [x]\n            (some #(= x %) \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))]\n    (cond\n     (= x \"multi-word-key\")\"multiWordKey\"\n     :else (apply str (filter a x)))))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 102, "code": "(fn to-camelcase [s]\n    (let [st (clojure.string/split s #\"-\")]\n  (->> (map #(str (.toUpperCase (str (Character/toUpperCase (first %))))\n             (apply str (rest %)))\n           (rest st))\n       (apply str (first st))\n  )))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 102, "code": "(fn [s]\n  (let [[w & wds] (clojure.string/split s #\"-\")]\n    (str w \n         (apply str \n                (mapcat (fn [w] (let [[f & r] (seq w)] \n                                  (cons (Character/toUpperCase f) r))) \n                        wds)))))", "user": "4f0f01c0535d0136e6c22329"}, {"problem": 102, "code": "(fn [a]\n    (letfn [(lower-case-first [[fst rst]]\n              (apply str (concat (clojure.string/lower-case (first fst)) rst)))]\n      (let [splitted (clojure.string/split a #\"-\")]\n        (if (> (count splitted) 1)\n          (->> splitted\n               (map #(concat (clojure.string/upper-case (first %))\n                             (rest %)))\n               (apply concat)             \n               (split-at 1)\n               (lower-case-first))\n          (first splitted)))))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 102, "code": "#(let [[w & s] (.split #\"-\" %) ] \n   (apply str w (map clojure.string/capitalize s)))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 102, "code": "(fn [w]\n  (apply str\n (loop [s1 w, s2 []]\n  (pr s1 s2)\n  (if (empty? s1) s2\n    (if (= \\- (first s1))\n      (recur (rest (rest s1)) (conj s2 (.toUpperCase (str (second s1))) ))\n      (recur (rest s1) (conj s2 (first s1) )))))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 102, "code": "(fn [word]\n  (let [[part & parts] (clojure.string/split word #\"-\")]\n    (apply str part \n           (map clojure.string/capitalize parts))))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 102, "code": "(fn [s] (reduce #(str %1 (clojure.string/capitalize  %2)) (clojure.string/split s #\"-\")))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 102, "code": "(fn [x]\n;; split at hyphens, making a list of words ('first' and 'rest')\n  (let [[f & r] (re-seq #\"[^-]+\" x)\n        ;; Capitalize initial letter of all words in 'rest'\n        r-upper (map clojure.string/capitalize r)]\n    ;; attach them all together\n    (apply str (list* f  r-upper))))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 102, "code": "(fn [s] \n  (->> s \n       (#(clojure.string/split %  #\"-\"))\n       (#(cons (first %) (map clojure.string/capitalize (rest %))))\n       (apply str)))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 102, "code": "(fn [s] \n    (letfn [(split-words [s] (seq (.split s \"-\")))\n\t    (capword [w] (clojure.string/capitalize w))\n\t    (cap-first [[h & t]] (cons h (map capword t)))\n\t    (rejoin [coll] (apply str coll))]\n\t   (-> s\n\t       (split-words)\n\t       (cap-first)\n\t       (rejoin)\n\t       ))\n)", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 102, "code": "#(loop [a %\n          r []]\n     (cond (seq a)\n           (if (= (first a) \\-)\n             (recur (drop 1 (rest a)) (conj r (Character/toUpperCase (second a))))\n             (recur (rest a) (conj r (first a))))\n           :else (apply str r)))", "user": "559067ace4b0277789237670"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"\\W\")\n       capWords (map clojure.string/capitalize (rest words))]\n    (reduce str (first words) capWords))", "user": "561a1af6e4b053970a773b02"}, {"problem": 102, "code": "(fn [s]\n  (let [xs (clojure.string/split s #\"-\")]\n    ( apply str (concat (first xs) (mapcat clojure.string/capitalize (rest xs))))))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 102, "code": "(fn\n  [string]\n  (letfn [\n    (capitalize [word] (let [[f & r] word] (apply str (char (- (int f) 32))  r)))]\n    (let [[f & r] (re-seq #\"[^-]+\" string)] (apply str f (map capitalize r)))))", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 102, "code": "(fn c [s]\n  (let [[a b] (split-with #(not= % \\-) s)]\n     (apply str (concat\n                  a\n                  (if (seq b)  \n                    (c (clojure.string/capitalize (apply str (rest b)))))))))", "user": "52bacfa8e4b07a9af57922d6"}, {"problem": 102, "code": "(fn to-camel-case [s]\n  (let [[f & n] (clojure.string/split s #\"-\")]\n    (clojure.string/join (cons f (map clojure.string/capitalize n)))))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 102, "code": "(fn to-camel-case [underscored-string]\n  (let [tokens (clojure.string/split underscored-string #\"-\")]\n    (apply str (cons (first tokens) (map clojure.string/capitalize (rest tokens))))\n  ))", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 102, "code": "(fn camel [kebab-str]\n  (let [all-parts (partition-by #(not= \\- %) kebab-str)\n        words (take-nth 2 all-parts)\n        first-word (apply str (first words))\n        rem-words (rest words)\n        capitalizer (fn [char-seq] (let [f (first char-seq)\n                                         r (rest char-seq)]\n                                     (cons (Character/toUpperCase f) r)))\n        adjuster (comp #(apply str %) capitalizer)\n        rest-words (apply str (map adjuster rem-words))]\n    (str first-word rest-words)))", "user": "5271605ae4b03e8d9a4a73ed"}, {"problem": 102, "code": "(fn [s]\n  (let [[x & xs] (clojure.string/split s #\"-\")\n        cxs (map clojure.string/capitalize xs)]\n    (clojure.string/join (cons x cxs))))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 102, "code": "#(first\n  (reduce (fn [[a b] c]\n            (cond\n              (= \\- c) [a true]\n              b [(str a (Character/toUpperCase c)) nil]\n              \"\" [(str a c) nil])) [] %))", "user": "5382704be4b06839e8705ed4"}, {"problem": 102, "code": "#(let [ [first & rest ] (clojure.string/split % #\"-\")] (str first (reduce str ( map clojure.string/capitalize rest))))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 102, "code": "(fn camel-case\n  [s]\n  (let [parts (clojure.string/split s #\"-\")]\n    (if (< (count parts) 2)\n      s\n      (->> (rest parts)\n           (map clojure.string/capitalize)\n           (cons (first parts))\n           clojure.string/join))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 102, "code": "(fn [varname]  (let [ splitted   (clojure.string/split varname #\"-\")\n                        camelize   #(apply str (concat (.toUpperCase (str (first %))) (rest %)))\n                        camelized  (map camelize (rest splitted) ) ]\n                   (apply str (first splitted) camelized)))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 102, "code": "(fn [s]\n   (let [[fs & rs] (clojure.string/split s #\"-\")\n         cap-strs (reduce\n                    (fn [acc [x & xs]]\n                      (apply str\n                             acc\n                             (clojure.string/upper-case x)\n                             xs))\n                    \"\"\n                    rs)]\n     (str fs cap-strs)))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-\\w\" (fn [m] (.toUpperCase (str (last m)))))", "user": "4fc524aae4b081705acca37e"}, {"problem": 102, "code": "(fn [s]\n  (let [p (clojure.string/split s #\"-\")]\n    (clojure.string/join \"\" (concat (first p) (map #(clojure.string/capitalize %) (rest p))))))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 102, "code": "(fn [s]\n  (let [words (for [x (.split s \"-\")] x)]\n    (if (= 1 (count words))\n      (first words)\n      (apply str (first words) (for [w (rest words)] (apply str (cons (.toUpperCase (str (first w))) (rest w))))))))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 102, "code": "(fn [s]\n  (let [[f & more] (re-seq #\"\\w+\" s)]\n  \t(apply str f\n           (map (fn [[fir & re]]\n                  (apply str (clojure.string/capitalize fir) re))\n                more))))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 102, "code": "(fn [ccstring]\n   (loop [out []\n         cc (seq ccstring)]\n     (if (empty? cc)\n       (clojure.string/join (map str out))\n       (if (= (first cc) \\-)\n         (recur (conj out (clojure.string/upper-case (second cc)))\n                (drop 2 cc))\n         (recur (conj out (first cc))\n                (drop 1 cc))))))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 102, "code": "(fn into-camel-case\n  [string]\n  (apply str (reduce\n              (fn [a b]\n                (concat a (conj (rest b) (Character/toUpperCase (first b)))))\n              (map #(remove #{\\-} %) (re-seq #\"\\w+-|\\w+\" string)))))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s, #\"-\")]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))))", "user": "50cf94bde4b0abc485cb9bb2"}, {"problem": 102, "code": "(fn [w]\n   (let [parts (clojure.string/split w #\"-\")]\n     (str (first parts)\n       (reduce (fn [acc s]\n          (str acc (clojure.string/capitalize s))) \"\" (rest parts)))))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 102, "code": "(fn [s]\n  (let [ps (clojure.string/split s #\"-\")]\n    (apply str (first ps) (map clojure.string/capitalize (rest ps)))))", "user": "52173464e4b082aa80a88c75"}, {"problem": 102, "code": "(fn f [x]\n\t(clojure.string/replace x #\"-(\\w)\" (fn [x] (clojure.string/upper-case (second x)))))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 102, "code": "(fn cam [s]\n  (apply str (if (<= (count s) 1)\n    s\n    (if (= (first s) \\-)\n      (cons (Character/toUpperCase (second s))\n            (cam (nnext s)))\n      (cons (first s) (cam (next s)))\n      ))))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 102, "code": "(fn key2field [k]                                                                                                   \n  (letfn [(uppercase [c] (-> c int (- 32) char))                                                                      \n          (aux [[prev [c & cs]]]                                                                                      \n            (cond (= prev \\-) [(uppercase c) cs]                                                                      \n                  :else [c cs]))]                                                                                     \n    (->> [nil (mapv identity k)]                                                                                      \n      (iterate aux)                                                                                                   \n      next                                                                                                            \n      (take (count k))                                                                                                \n      (mapv first)                                                                                                    \n      (remove #(= % \\-))                                                                                              \n      (apply str))))", "user": "54bbaa8ee4b0ed20f4ff6ec0"}, {"problem": 102, "code": "#(let [[first & rest] (clojure.string/split % #\"-\")]\n   (apply str first (map clojure.string/capitalize rest)))", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 102, "code": "(fn [s] (#(apply str  (first %) (map clojure.string/capitalize (rest %))) (clojure.string/split s  #\"-\")))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-\\w\" #(clojure.string/capitalize (str (last %)))))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 102, "code": "#(let [[h & t] (re-seq #\"[A-Za-z]+\" %)]\n   (reduce (fn [acc i] (str acc (clojure.string/capitalize i))) h t))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 102, "code": "(fn [x] (apply str (map-indexed #(if (zero? %1) %2 (str (.toUpperCase (subs %2 0 1)) (subs %2 1))) (re-seq #\"\\w+\" x))))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 102, "code": "(fn camel [s]\n  (clojure.string/join\n   \"\"\n   (loop [s (seq s), up false, res []]\n     (if (seq s)\n       (if (= (first s) \\-)\n         (recur (rest s) true res)\n         (if up\n           (recur (rest s) false (conj res (Character/toUpperCase (first s))))\n           (recur (rest s) false (conj res (first s)))))\n       res))))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 102, "code": "#(let [[x & xs] (clojure.string/split % #\"[^\\w]+\")\n       caps (map clojure.string/capitalize xs)]\n   (clojure.string/join (cons x caps)))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 102, "code": "(fn [s]\n   (let [[a & others] (clojure.string/split s (re-pattern \"-\"))]\n     (apply str a\n            (map #(let [[x & ys] %]\n                    (apply str (Character/toUpperCase x) ys)) others))))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 102, "code": "(fn [x]\n  (-> (re-seq #\"\\w+\" x)\n  (#(apply str (first %) (vec (map clojure.string/capitalize (rest %)))))))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 102, "code": "(fn camel-case [s]\n  (let [upper-case (fn [c] (-> c int (- 32) char))\n        dash? (fn [c] (= c \\-))]\n    (loop [res [], src s, prev nil]\n      (if (empty? src)\n        (apply str res)\n        (let [[head & tail] src\n              head (if (dash? prev)\n                     (upper-case head)\n                     head)\n              res (if (dash? head)\n                    res\n                    (conj res head))]\n              (recur res tail head))))))", "user": "52ee46e5e4b05e3f0be25ec5"}, {"problem": 102, "code": "(fn [arg1]\n(cond\n(and (= arg1 \"something\")) \"something\"\n(and (= arg1 \"multi-word-key\")) \"multiWordKey\"\n(and (= arg1 \"leaveMeAlone\")) \"leaveMeAlone\"\n))", "user": "565f2461e4b068f2fe63dc3b"}, {"problem": 102, "code": "(fn ->camel-case [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (first words)\n         (map clojure.string/capitalize (rest words)))))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 102, "code": "(fn [st]\n  \t(clojure.string/join (map-indexed #(if (< 0 %1) (clojure.string/capitalize %2) %2)(clojure.string/split st #\"-\")))\n \n )", "user": "5649615be4b0284900eef641"}, {"problem": 102, "code": "(fn [a] (apply str (conj (map clojure.string/capitalize (rest (clojure.string/split a #\"-\"))) (first (clojure.string/split a #\"-\")))))", "user": "565de2c6e4b068f2fe63dc2d"}, {"problem": 102, "code": "(fn [arg1]\n(cond\n(and (= arg1 \"something\")) \"something\"\n(and (= arg1 \"multi-word-key\")) \"multiWordKey\"\n(and (= arg1 \"leaveMeAlone\")) \"leaveMeAlone\"\n))", "user": "5666bf34e4b04acd4f672dc2"}, {"problem": 102, "code": "(fn [s]\n(clojure.string/replace s #\"-(\\w)\" (fn [[a b]] (clojure.string/capitalize b))))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 102, "code": "(fn into-camel-case [s]\n  (let [words (clojure.string/split s #\"-\")\n        capped (map clojure.string/capitalize (rest words))]\n    (->> (conj capped (first words))\n         (clojure.string/join))))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 102, "code": "(fn [s]\n  (let [[s1 & splits] (clojure.string/split s #\"-\")]\n    (apply str s1 (map clojure.string/capitalize splits))))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 102, "code": "(fn [s]\n  (let [parts (clojure.string/split s #\"-\")\n        ucfirst (fn [w]\n                  (str\n                    (.toUpperCase (str (first w)))\n                    (apply str (rest w))))\n        first-part (first parts)\n        other-part (map ucfirst (rest parts))]\n    (apply str (cons first-part other-part))))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 102, "code": "(fn camel-case\n  [input-string]\n  (let [split-string (clojure.string/split input-string #\"-\" )\n        first-word (first split-string)\n        rest-words (rest split-string)\n        capped-words (map #(reduce str (Character/toUpperCase (first %)) (rest %)) rest-words)]\n    (reduce str first-word capped-words)))", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 102, "code": "(fn [xs]\n  (let [[x & xs] (.split xs \"-\")]\n    (apply str x\n           (mapcat\n            (fn [[x & xs]]\n              (concat [(Character/toUpperCase x)] xs))\n            xs))))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (comp clojure.string/upper-case second))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 102, "code": "(fn [stringss]  \n   (let [[[first-word] rest-words] \n         (split-at 1 (clojure.string/split stringss #\"-\"))]\n     (str first-word\n          (apply str\n                 (mapcat\n                  (fn [stringg]  \n                    (let [[f r] (split-at 1 stringg)]\n                      (concat   \n                       (map (comp clojure.string/capitalize str) f) \n                       (map str r))))\n                  rest-words)))))", "user": "567476bde4b05957ce8c6139"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")\n        upcase (fn [w] (let [chrs (seq w)]\n                         (apply str (clojure.string/upper-case (first chrs)) (rest chrs) )))\n        ]\n    (if (= 1 (count words))\n      (first words)\n      (apply str (first words) (map upcase (rest words)))\n      )\n    )\n  )", "user": "564a560ae4b0284900eef654"}, {"problem": 102, "code": "(fn [s]\n  (apply str (first (clojure.string/split s #\"-\"))(map clojure.string/capitalize (rest (clojure.string/split s #\"-\")))))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 102, "code": "(fn hyphen-to-camel [text]\n  (let [words (.split text \"-\")]\n    (letfn [(upper-case-first [s] (apply str (cons (Character/toUpperCase (first s)) (rest s))))]\n      (clojure.string/join (cons (first words) (map upper-case-first (rest words)))))))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 102, "code": "(fn f [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (clojure.string/join (cons (first words) (map clojure.string/capitalize (rest words)))) ))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 102, "code": "(fn [word]\n    (let [all-words (clojure.string/split word #\"-\")\n          ret [(first all-words)]\n          words (rest all-words)]\n      (loop [s words r ret]\n        (if (seq s)\n          (recur (rest s)\n                 (conj r (clojure.string/capitalize (first s))))\n          (clojure.string/join r))))\n    )", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-\\w\" #(.toUpperCase (str (second %1)))))", "user": "52cf1e25e4b07d0d72b2739c"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s \n                                #\"-(.)\" \n                                #(.toUpperCase (%1 1))))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 102, "code": "(fn [s]\n  (let [parts (clojure.string/split s #\"-\")]\n    (apply str (first parts) (map clojure.string/capitalize (rest parts)))))", "user": "564da567e4b0284900eef682"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 102, "code": "(fn [s]\n\t(clojure.string/replace s #\"-(\\w+)\" #(clojure.string/capitalize (%1 1))))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 102, "code": "#(clojure.string/join (map-indexed (fn [i v] (if (= i 0) v (clojure.string/capitalize v))) (clojure.string/split % #\"-\")))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\"),\n        transform #(str (%1 (subs %2 0 1)) (subs %2 1))]\n    (apply str\n           (transform clojure.string/lower-case (first words))\n           (map (partial transform clojure.string/upper-case) (rest words)))))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (reduce #(str %1 %2) (first words) (map clojure.string/capitalize (rest words)))))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(clojure.string/upper-case (% 1))))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 102, "code": "(fn [s]\n  (loop [out [] lc \\space in s]\n    (if (empty? in)\n      (apply str out)\n      (let [c (first in)]\n        (cond\n          (= c \\-) (recur out c (rest in))\n          (= lc \\-) (recur (conj out (clojure.string/upper-case c)) c (rest in))\n          :else (recur (conj out c) c (rest in)))))))", "user": "564a5a09e4b0284900eef656"}, {"problem": 102, "code": "(fn q4q102\n  [s]\n  (let [strs (clojure.string/split s #\"-\")]\n   (apply\n    str\n    (first strs)\n    (map clojure.string/capitalize (rest strs)))))", "user": "52213426e4b0e6a83c8925c4"}, {"problem": 102, "code": "(fn [s]\n  (let [l (clojure.string/split s #\"-\")]\n    (apply str (conj (map clojure.string/capitalize (next l)) (first l)))))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 102, "code": "(fn [s]\n  (let [;; Upper-case only first character\n        up (fn [s]\n             (if-let [ss (seq s)]\n               (apply str\n                      (clojure.string/upper-case (first ss))\n                      (rest ss))\n               s))\n        ss (re-seq #\"[^-]+\" s)\n        upper (map up (rest ss))]\n    (apply str (first ss) upper)))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 102, "code": "(fn [s]\n    (apply\n     str\n     (let [strs (.split s \"-\")]\n       (conj\n        (for [p (rest strs)]\n          (str (.toUpperCase (subs p 0 1)) (subs p 1)))\n        (first strs)))))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 102, "code": "(fn camelcase [s]\n(letfn [(camel\n         ([x]\n         x)\n         ([x & words]\n(str (clojure.string/lower-case x) (apply str (map clojure.string/capitalize words)))))]\n(apply camel (clojure.string/split s #\"-\"))))", "user": "56304db8e4b073c1cf7a9be5"}, {"problem": 102, "code": "(fn [s]\n  (letfn [(captialize [w]\n                      (str (clojure.string/upper-case (get w 0)) (subs w 1)))]\n    (let [words (clojure.string/split s #\"-\")]\n        (apply str (first words) (map captialize (rest words))))))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 102, "code": "(fn [arg]\n  (let [wordColl (clojure.string/split arg #\"-\")]\n    (if (= (count wordColl) 1)\n      (first wordColl)\n      (apply str \n               (first wordColl)\n               (map clojure.string/capitalize (drop 1 wordColl))))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(.)\" #(.toUpperCase (% 1))))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 102, "code": "(fn [s]\n  (apply str (filter #(not= % \\-)\n               (map (fn [a b]\n                      (if (= b \\-)\n                        (Character/toUpperCase a)\n                        a))\n                      s\n                      (.concat \" \" s)))))", "user": "4f856adfe4b033992c121c44"}, {"problem": 102, "code": "(fn camel-case [s] \n  (let [ws (clojure.string/split s #\"-\")] \n    (apply str \n      (first ws) \n      (clojure.string/join \n        (map clojure.string/capitalize (rest ws))))))", "user": "5578f292e4b05c286339e08f"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-([a-z])\" #(.toUpperCase (last %))))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 102, "code": "(fn [s] (clojure.string/join\n                (map-indexed\n                  #(if (zero? %) %2 (clojure.string/capitalize %2))\n                  (clojure.string/split s #\"-\"))))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 102, "code": "#(apply str (reverse (reduce \n  (fn [[a & b :as c] x] \n      (if (= \\- a) \n        (cons (char (- (int x) 32)) b)\n        (cons x c)))\n  []\n  %)))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(clojure.string/upper-case (%1 1))))", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 102, "code": "(fn [s]\n  (apply str (map-indexed (fn [index item]\n                            (if (zero? index)\n                              item\n                              (clojure.string/capitalize item)))\n                          (clojure.string/split s #\"[-]\"))))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 102, "code": "(fn [word]\n  (let [parts (clojure.string/split word #\"-\")]\n    (apply str (cons (first parts) (map clojure.string/capitalize (rest parts))))\n  )\n)", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 102, "code": "(fn [string]\n  (clojure.string/replace \n    string\n    #\"-(\\w)\"\n    (fn [[_ s]] (.toUpperCase s))))", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 102, "code": "(fn [s] (let [parts (clojure.string/split s #\"-\")]\n          (apply str\n                 (cons (first parts)\n                       (map clojure.string/capitalize (rest parts))))))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 102, "code": "(fn into-camel-case [s]\n  (let [xs (re-seq #\"\\w+\" s)]\n    (apply str (first xs) (map #(apply str (Character/toUpperCase (first %)) (rest %)) (rest xs)))))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 102, "code": "(fn [x]\n    (apply str\n           (mapcat (fn [[a b]]\n                     (cond\n                       (= a \\-) [(first (.toUpperCase (str b)))]\n                       (= b \\-) nil\n                       :else [b]))\n                   (map vector (cons nil x) x))))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 102, "code": "(fn into-camel [s]\n   (let [rs (re-seq #\"[a-zA-Z]+\" s)]\n     (apply str (cons (first rs) (map clojure.string/capitalize (rest rs))))))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 102, "code": "(fn [s] (if (.contains s \"-\") (reduce #(str % (if (nil? %) %2 (.toUpperCase (.substring %2 0 1))) (.substring %2 1)) (clojure.string/split s #\"[^a-zA-Z0-9']\")) s))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (last %))))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 102, "code": "(fn [toC] (clojure.string/replace toC #\"-\\w\"  #(subs (clojure.string/upper-case %1) 1)))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 102, "code": "(fn [x]\n  (->>\n   (re-seq #\"[^\\\\-]+\" x)\n   (map #(str (Character/toUpperCase (first %)) (apply str (rest %))))\n   (apply str)\n   (#(str (Character/toLowerCase (first %)) (apply str (rest %))))))", "user": "56ac6d57e4b03c432f187346"}, {"problem": 102, "code": "(fn [s]\n  (let [parts (re-seq #\"\\w+\" s)]\n    (apply str (first parts) (map clojure.string/capitalize (rest parts)))))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 102, "code": "(fn [in] \n  (let [splitted (clojure.string/split in #\"\\W\")\n                camel (map #(apply str (into [(Character/toUpperCase (first %))] (rest %))) splitted)]\n    (str (first splitted) (apply str (rest camel)))))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 102, "code": "(fn solve [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (cons (first words)\n                     (map clojure.string/capitalize (rest words))))))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 102, "code": "(fn[x] (clojure.string/replace x #\"-(\\w)\" #(str (clojure.string/upper-case(% 1)))))", "user": "566a3a26e4b0a866af689699"}, {"problem": 102, "code": "(fn [sc]\n  (let [wv (clojure.string/split sc #\"-\")]\n    (if (< (count wv) 2)\n      sc\n      (clojure.string/join \"\" (concat (first wv) (map clojure.string/capitalize (rest wv)))))))", "user": "536673a8e4b0243289761e76"}, {"problem": 102, "code": "(fn[s] (clojure.string/replace s #\"-(.)\" #(.toUpperCase (%1 1))))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 102, "code": "(fn [k]\n  (let [split (clojure.string/split k #\"-\")]\n    (if (empty? (rest split)) k\n      (apply str \n             (cons (first split) \n                   (map (fn [w] (clojure.string/replace w #\"^.\" #(clojure.string/upper-case %))) \n                        (rest split)))))))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 102, "code": "(fn [a-str]\n  (let [splitted-str (clojure.string/split a-str #\"-\")\n        uppercase-str (map clojure.string/capitalize (rest splitted-str))]\n    (apply str (first splitted-str) uppercase-str)))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 102, "code": "(fn [s] (let [offset-s (concat \"a\" s)]\n          (apply str (filter #(not (= \"-\" %))\n                             (map #(if (= \\- %2) (.toUpperCase (str %1)) (str %1)) s offset-s)))))", "user": "56baab13e4b0f26550335948"}, {"problem": 102, "code": "(fn camel [s] \n\t(let [splitted (clojure.string/split s #\"-\")]\n\t(clojure.string/join (cons (first splitted)(map clojure.string/capitalize (rest splitted))))\n\t))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 102, "code": "(fn [string]\n  (let [split (clojure.string/split string #\"-\")\n        lower (first split)\n        uppers (rest split)]\n    (clojure.string/join\n     (cons lower (map clojure.string/capitalize uppers)))))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 102, "code": "(fn [x] (clojure.string/join \"\" \n                     (reduce #(if (seq %) \n                                (concat % [(char (- (int (first %2)) 32))] (rest %2)) \n                                (conj % %2) ) []        \n        (clojure.string/split x #\"-\")\n        )))", "user": "56066e82e4b08b23635d3173"}, {"problem": 102, "code": "(fn __ [word] (clojure.string/replace word #\"-[a-z]\" #(str (clojure.string/upper-case (apply str (rest %1))))))", "user": "50e1bdd8e4b019fc399ce17f"}, {"problem": 102, "code": "(fn cc [s] (clojure.string/replace s #\"-(\\S)\" #(str (.toUpperCase (% 1)))))", "user": "56bca51ae4b0f26550335963"}, {"problem": 102, "code": "(fn\n  [s]\n  (let [seq (re-seq #\"\\w+\" s)]\n    (apply str (first seq) (map (fn [[e & oths]]\n                      (apply str (.toUpperCase (str e)) oths))\n                    (rest seq)))))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 102, "code": "#(apply str\n        (map-indexed (fn [i v] \n                       (if (> i 0)\n                         (apply str (cons (Character/toUpperCase (first v)) (rest v)))\n                         v))\n                     (re-seq #\"\\w+\" %)))", "user": "56baa68ce4b0f26550335947"}, {"problem": 102, "code": "(fn [w] (->> (re-seq #\"\\w+\" w)\n             (#(cons (first %) (map clojure.string/capitalize (rest %))))\n             (apply str)\n             ))", "user": "56b86e64e4b0f26550335924"}, {"problem": 102, "code": "(fn pia1 [s]\n  (let [ss (clojure.string/split s #\"-\")\n        s1 (first ss)\n        s2 (clojure.string/join\n             (map\n               clojure.string/capitalize\n               (rest ss)))]\n    (str s1 s2)))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 102, "code": "#(let [s (re-seq #\"\\w+\" %)]\n   (apply str (first s) (map clojure.string/capitalize (rest s))))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 102, "code": "(fn camel [s]\n  (reduce #(str %1 (clojure.string/capitalize %2)) (clojure.string/split s #\"-\")))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 102, "code": "(fn camelCase [word]\n  (let [wordParts (clojure.string/split word #\"-\")]\n    (apply str (first wordParts) (map #(apply str (Character/toUpperCase (first %))(rest %)) (rest wordParts)) )) )", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[a b]] (clojure.string/capitalize b)))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 102, "code": "(fn [s] \n  (reduce #(str % (clojure.string/capitalize %2)) (clojure.string/split s #\"\\-\")))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 102, "code": "(fn [s] (reduce  #(str % (clojure.string/capitalize %2)) (clojure.string/split s #\"-\")))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 102, "code": "(fn [word]\n  (let [[fst & rst] (clojure.string/split word #\"-\")]\n    (apply str fst (map clojure.string/capitalize rst))))", "user": "56481722e4b0284900eef628"}, {"problem": 102, "code": "(fn [s]\n  (let [p (re-seq #\"\\w+\" s)]\n    (apply str (first p) (map #(clojure.string/capitalize %) (rest p)))))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 102, "code": "#(apply str (first(clojure.string/split % #\"-\")) (map clojure.string/capitalize (rest(clojure.string/split % #\"-\"))))", "user": "4fd11a93e4b04c3a95aa040a"}, {"problem": 102, "code": "(fn [s]\n  (if-not (nil? (re-find #\"-\" s))\n    (let [split (clojure.string/split s #\"-\")]\n      (str\n        (first split)\n        (clojure.string/join\n          (map clojure.string/capitalize (rest split)))))\n    s))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 102, "code": "(fn clojure-to-camel-case [string]\n  (let [words (clojure.string/split string #\"-\")]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))))", "user": "56e48302e4b03a7c14b85a4e"}, {"problem": 102, "code": "(fn [string] (let [splitup (clojure.string/split string #\"-\")]\n                (apply str (cons (first splitup) (map clojure.string/capitalize (rest splitup))))))", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-.\" #(-> % clojure.string/upper-case (subs 1))))", "user": "56aed78fe4b03c432f187363"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[a b]] (clojure.string/capitalize b)))", "user": "56869344e4b0dcc4269f4053"}, {"problem": 102, "code": "(fn [word]\n  (let [[first-word & rest-words] (clojure.string/split word #\"-\")]\n    (apply str first-word (map clojure.string/capitalize rest-words))))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-.\" #(clojure.string/upper-case (second %))))", "user": "56e811e1e4b02e7e935eb6e3"}, {"problem": 102, "code": "(fn camel [s]\n  (let [words (clojure.string/split s #\"-\")\n        w1 (first words)\n        others (map (fn [w]\n                      (let [ch (.toUpperCase (str (first w)))]\n                        (str ch (apply str (rest w)))))\n                    (rest words))]\n    (apply str w1 others)))", "user": "53b530c6e4b047364c0444bc"}, {"problem": 102, "code": "(fn [x] (reduce #(str % (clojure.string/capitalize %2)) (clojure.string/split x #\"-\")))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 102, "code": "(fn [s]\n  (let [coll (clojure.string/split s #\"-\")]\n    (apply str (concat (first coll) (map clojure.string/capitalize (rest coll))))))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 102, "code": "(fn [in]\n  (let [words (clojure.string/split in #\"-\")]\n    (apply str (cons (first words) (for [x (seq (rest words))] (clojure.string/capitalize x))))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 102, "code": "(fn [a] (clojure.string/replace a #\"-(\\w)\" #(clojure.string/upper-case (second %1))))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (rest words)))))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 102, "code": "(fn [str] (clojure.string/replace str #\"\\-(\\w)\" #(.toUpperCase (get % 1))))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 102, "code": "#(loop [in (seq %1)\n        out []]\n   (cond\n     (empty? in) (apply str out)\n     (= \\- (first in)) (recur (drop 2 in) (conj out (Character/toUpperCase (second in))))\n     :else (recur (rest in) (conj out (first in)))))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 102, "code": "(fn camel-case\n  [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (->>\n     words\n     (drop 1)\n     (map clojure.string/capitalize)\n     (concat (take 1 words))\n     (clojure.string/join))))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 102, "code": "(fn [s] (apply str (reduce\n                      #(if (and (= (last %) \\-) (Character/isLowerCase %2))\n                        (conj (apply vector (drop-last %)) (Character/toUpperCase %2))\n                        (conj % %2))\n                        [(first s)] (rest s))))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-\\w\" #(->> % last str clojure.string/upper-case)))\n\n;; (fn [arg]\n;;   (clojure.string/join\n;;    (loop [xs arg\n;;           upper? false\n;;           result []]\n;;      (if (empty? xs)\n;;        result\n;;        (recur (rest xs)\n;;               (= \\- (first xs))\n;;               (cond (= \\- (first xs)) result\n;;                     upper? (conj result (clojure.string/upper-case (first xs)))\n;;                     :else (conj result (first xs)))\n;;               ))))\n;;   )", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 102, "code": "(fn camel-case-1\n  [s]\n  (let [[fw & rest] (clojure.string/split s #\"-\")]\n    (str fw (apply str (map #(clojure.string/capitalize %) rest)))))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 102, "code": "#(letfn [(up [s] (apply str (clojure.string/upper-case (first s)) (rest s)))]\n  (reduce (fn [r s] (str r (up s))) (clojure.string/split % #\"-\")))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 102, "code": "(fn to-camel-case [string]\n\t(let [[frst & rest] (re-seq #\"[a-zA-Z]+\" string)\n\t\t  up (map (fn [x]\n\t\t\t\t\t  (.replaceFirst x (str (first x)) (str (Character/toUpperCase (first x))))) rest)]\n\t\t(reduce #(.concat %1 %2) \"\" (cons frst up))))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 102, "code": "(fn [s]\n   (let [ls (clojure.string/split s #\"-\")\n         ls2 (concat [(first ls)] (map clojure.string/capitalize (rest ls)))\n         s2 (clojure.string/join \"\" ls2)\n         ]\n     s2))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 102, "code": "(fn solve [x]\n  (second (reduce (fn [[after-dash res] x] \n            (cond \n             after-dash [false (str res (char (+ (- (int x) (int \\a)) (int \\A))))] \n             (= \\- x) [true res] \n             :else [false (str res x)]))\n          [false \"\"] x)))", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 102, "code": "(fn into-camel [x]\n  (let [chars (seq x)]\n    (when-not (empty? x)\n      (if (= (first x) \\-)\n        (apply str (into-camel (clojure.string/capitalize (apply str (rest x))))) ;found a hyphen, need to capitalise the next character\n        (apply str (cons (first x) (into-camel (rest x))))))))", "user": "57027310e4b08d47c97781e2"}, {"problem": 102, "code": "(fn [x]\n  (let [ls (clojure.string/split x #\"-\")\n        xs (cons (first ls)\n                 (map clojure.string/capitalize (rest ls)))]\n    (clojure.string/join \"\" xs)))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 102, "code": "(fn camel-case [word]\n  (let [broken (clojure.string/split word #\"-\")\n        start (first broken)\n        others (rest broken)]\n    (str start\n         (clojure.string/join \"\" (map clojure.string/capitalize others)))))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 102, "code": "(fn [s]\n  (reduce #(str %\n                (clojure.string/replace-first\n                 %2 #\"\\w\" (.toUpperCase (.toString (first %2)))))\n          (re-seq #\"\\w+\" s)))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 102, "code": "(fn camel-case [ss]\n  (let [s (apply str ss)]\n   (cond\n    (empty? s) \"\"\n   :else\n     (if(= (first s) \\-)\n       (apply str (camel-case (clojure.string/capitalize (apply str (rest s)))))\n       (apply str (cons (first s) (camel-case (rest s))))))))", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 102, "code": "(fn [x] (clojure.string/replace x #\"(-)(\\w)\" #(clojure.string/capitalize (% 2))))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 102, "code": "(fn into-camel-case [s]\n  (clojure.string/replace s #\"-([a-z])\" #(clojure.string/upper-case (second %1))))", "user": "53504fe6e4b084c2834f4ada"}, {"problem": 102, "code": "#(->> (re-seq #\"[^-]+\" %)\n      ((fn [[f & r]]\n        (cons f (map clojure.string/capitalize r))))\n      (clojure.string/join \"\"))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 102, "code": "#(clojure.string/join\n  (let [[hd & tl] (clojure.string/split % #\"-\")]\n    `(~hd, ~@(map clojure.string/capitalize tl))))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 102, "code": "#(let [[f & rst] (clojure.string/split % #\"-\")]\n   (apply str f (map clojure.string/capitalize rst)))", "user": "56102f50e4b05f002753df6b"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (%1 1))))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 102, "code": "(fn [s]\n    (apply str\n           (reduce (fn [[s b] c] [(str s (if (= \\- b) \"\" b))\n                                 (if (= \\- b) (Character/toUpperCase c) c)]) [\"\" \"\"] s)))", "user": "4f57c913e4b0a7574ea7183f"}, {"problem": 102, "code": "(fn [s] (->> (seq s) \n                 (partition-by #(= \\- %))\n                 (remove #(= '(\\-) %))\n                 (map-indexed #(if (= 0 %1)\n                                (apply str %2)\n                                (str (clojure.string/upper-case (first %2)) (apply str (rest %2)))))\n                 (apply str)))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"\\-(.)\"#(.toUpperCase (%1 1))))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 102, "code": "(fn toCamelCase [word]\n  (letfn [(capitalFirstLetter [word]\n            (str (clojure.string/upper-case (first word)) (apply str (rest word))))\n          (splitByDash [word]\n            (clojure.string/split word #\"-\"))]\n    (let [words (splitByDash word)]\n      (str\n        (first words)\n        (apply str (map capitalFirstLetter (rest words)))))))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 102, "code": "(fn [st]\n  (let [the-split (clojure.string/split st #\"-\")\n        first-word (first the-split)\n        red-fn #(conj %1\n                      (apply str\n                             (cons\n                               (Character/toUpperCase (first %2))\n                               (rest %2))))\n       capped (reduce red-fn [] (rest the-split))]\n    (clojure.string/join (cons first-word capped))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 102, "code": "#(apply str (into [(first (clojure.string/split % #\"-\"))] (map clojure.string/capitalize  (rest (clojure.string/split % #\"-\")))))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 102, "code": "(fn [word] (clojure.string/replace word #\"\\-[a-z]\" #(clojure.string/upper-case (second (vec %)))))", "user": "571fb6a0e4b0145328a762b5"}, {"problem": 102, "code": "#(let [camel (fn [[c & cs :as s]]\n              (if (<= (int \\a) (int c) (int \\z)) (cons (char (- (int c) 32)) cs) s))\n      [w & ws] (clojure.string/split % #\"-\")]\n  (->> (mapcat camel ws) (into (vec w)) (apply str)))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 102, "code": "(fn x [s]\n  (clojure.string/replace s #\"[-][a-z]\" #(->> (second %) (str) (.toUpperCase)))\n  \n  )", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 102, "code": "#(let [s (re-seq #\"[\\w]+\" %)] \n  (apply str (first s) (map clojure.string/capitalize (next s))))", "user": "555c6344e4b0b056612e224c"}, {"problem": 102, "code": "(fn [words]\n  (let [split-words (clojure.string/split words #\"-\")]\n    (apply str (first split-words) (map clojure.string/capitalize (rest split-words)))))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 102, "code": "(fn camel\n  [s]\n  (let [words (clojure.string/split s #\"\\W\"),\n        fw (first words),\n        ow (next words)]\n    (clojure.string/join [fw (clojure.string/join (map clojure.string/capitalize ow))])))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 102, "code": "(fn [x] (let [s (clojure.string/split x #\"-\")] (str (first s) (apply str (map #(str (clojure.string/upper-case (subs % 0 1)) (subs % 1)) (rest s))))))", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 102, "code": "(fn [words] \n  (apply str\n   (map-indexed \n    #(if (= %1 0) \n     (identity %2) \n     (clojure.string/capitalize %2)) \n  (clojure.string/split words #\"-\"))))", "user": "4df73d64535d04ed9115e775"}, {"problem": 102, "code": "(fn intoCamelCase [s]\n  (let [parts (clojure.string/split s #\"-\")]\n    (apply str (first parts) (map clojure.string/capitalize (rest parts)))))", "user": "571d063ee4b0145328a76272"}, {"problem": 102, "code": "(fn [s]\n  (reduce #(if (= \"-\" (str (last %1)))\n             (str (apply str (butlast (map str %1))) (.toUpperCase %2))\n             (str %1 %2)) (map str s)))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 102, "code": "(fn [s]\n            (let [join (partial clojure.string/join \"\")\n                  uc clojure.string/upper-case\n                  ucfirst (fn [[c & cs :as s']]\n                            (if (seq s')\n                              (->> cs\n                                   (apply str)\n                                   (into [(uc c)])\n                                   join)\n                              s'))\n                  [w & ws] (clojure.string/split s #\"-+\")]\n              (->> ws\n                   (map ucfirst)\n                   (into [w])\n                   join)))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 102, "code": "(fn [dashed]\n  (let [dashed-seq (.split dashed \"-\")]\n    (reduce (fn [acc v]\n              (str acc (clojure.string/capitalize v)))\n            (first dashed-seq)\n            (rest dashed-seq))))", "user": "572722c4e4b0c5bde472c134"}, {"problem": 102, "code": "(fn [s] (let [[start & more] (clojure.string/split s #\"-\")\n               capitalized (map clojure.string/capitalize more)]\n           (apply str start capitalized)))", "user": "56dc3bdfe4b0ea9b8538f819"}, {"problem": 102, "code": "(fn [s] \n  (if (re-find #\"-\" s)\n    (let [words (clojure.string/split s #\"-\")]\n      (apply str (conj (map clojure.string/capitalize (next words))\n                       (first words))))\n    s))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 102, "code": "(fn [s]\n    (let [parts (clojure.string/split s #\"-\")]\n      (if (<= (count parts) 2)\n        s\n        (clojure.string/join\n         (cons (first parts)\n               (map clojure.string/capitalize (rest parts)))))))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 102, "code": "(fn [a]\n  (let [res (clojure.string/split a #\"-\")\n        firstWord (first res)]\n    (clojure.string/join (concat \n                           (clojure.string/lower-case (first firstWord)) \n                           (rest firstWord) \n                           (map clojure.string/capitalize (rest res))))))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace\n    s\n    #\"-\\p{Alpha}\"\n    #(clojure.string/upper-case (subs % 1))))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 102, "code": "(fn intoCamelCase [s]\n  (apply str\n         ((juxt first\n                (comp (partial apply str) (partial map clojure.string/capitalize) rest))\n           (clojure.string/split s #\"\\-\"))))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 102, "code": "(fn intoCamelCase [s]\n    (let [capitalize (fn [[x & xs]]\n                       (clojure.string/join (conj xs (.toUpperCase (str x))))\n                       )\n          [fw & ow ] (clojure.string/split s #\"-\")]\n      (apply str (conj (map capitalize ow) fw))\n      ))", "user": "56791447e4b05957ce8c6183"}, {"problem": 102, "code": "(fn camel [s]\n  (let [sl (map str s)]\n    (apply str\n      (remove (partial = \\-)\n              (reduce #(concat % (if (= \\- (last %)) (.toUpperCase %2) %2)) sl )))))\n\n;;_caterpillar's solution is very nice.  after splitting into 'words',\n;; concat (first words) + clojure.string/capitalize on (rest words)", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 102, "code": "(fn [s]\n    (let [lst (re-seq #\"\\w+\" s)]\n         (apply str (first lst) (mapcat #(cons (clojure.string/upper-case (first %) ) (rest %)   ) (rest lst) ) ) )\n     )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/join \n    (map-indexed #(if (zero? %) %2 (clojure.string/capitalize %2)) \n               (clojure.string/split s #\"-\"))))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 102, "code": "(fn [a] (let [s (clojure.string/split a #\"\\-\")]\n            (clojure.string/join (concat [(first s)]\n                                         (map clojure.string/capitalize (rest s))))))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 102, "code": "(fn [y] (clojure.string/replace (clojure.string/replace y #\"-.\" (fn [x] (str (.toUpperCase x)))) #\"-\" \"\"))", "user": "574a9132e4b02ea1147991fd"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(.)\" #(.toUpperCase (%1 1))))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 102, "code": "(fn [s]\n  (reduce #(clojure.string/replace %1 %2 (clojure.string/upper-case (subs %2 1))) s (re-seq #\"-\\w\" s)))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 102, "code": "(fn into-camel-case [s]\n  (let [v (clojure.string/split s #\"-\\b\")\n        up-first-letter\n        (fn [cs]\n          (apply str (Character/toUpperCase (first cs)) (rest cs)))]\n    (apply str (first v) (map up-first-letter (rest v)))))", "user": "56ac81ace4b03c432f187347"}, {"problem": 102, "code": "#(let [[word & words] (clojure.string/split %1 #\"-\")]\n    (clojure.string/join (conj (map clojure.string/capitalize words) word )))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 102, "code": "(fn [shit]\n    (->> shit\n     (#(clojure.string/split % #\"-\"))\n     (#(cons (first %) (map clojure.string/capitalize (rest %))))\n     (apply str)))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 102, "code": "(fn [kebab-case]\n  (let [segments (clojure.string/split kebab-case #\"-\")]\n    (->> (rest segments)\n         (map (fn [[head & tail]]\n                (apply str (Character/toUpperCase head) tail)))\n         (apply str (first segments)))))", "user": "575cbe44e4b02ea114799374"}, {"problem": 102, "code": "#(clojure.string/join (map-indexed (fn [idx itm] (if (= idx 0) itm (clojure.string/capitalize itm))) (clojure.string/split %1 #\"-\")))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 102, "code": "(fn [astr]\n  (let [aseq (seq astr)\n        hyphnums (for [x (range (- (count aseq) 1))\n                       :when (= \\- (nth aseq x))]\n                   (+ x 1))\n        capseq (for [x (range (count aseq))]\n                 (if (nil? (some #(= x %) hyphnums))\n                   (str (nth aseq x))\n                   (clojure.string/upper-case (nth aseq x))))\n        nohyphs (filter #(not= \"-\" %) capseq)]\n    (clojure.string/join nohyphs)))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 102, "code": "(fn [w]\n  (let [[fst & rst] (clojure.string/split w #\"-\")]\n    (str fst (apply str (map clojure.string/capitalize rst)))))", "user": "56795deae4b05957ce8c6187"}, {"problem": 102, "code": "(fn intoCamel [s]\n  (let [mats (re-seq #\"-.\" s)]\n    (reduce \n     #(clojure.string/replace %1 (re-pattern %2) (clojure.string/upper-case (last %2))) s mats)))", "user": "574f1c24e4b02ea114799255"}, {"problem": 102, "code": "(fn [s]\n    (let [ws (clojure.string/split s #\"\\W\")]\n      (apply str (first ws) (map #(clojure.string/capitalize %) (rest ws)))))", "user": "57642916e4b0994c1922fbee"}, {"problem": 102, "code": "(fn [s] \n  (let [parts (clojure.string/split s #\"-\")]\n    (apply str (concat (first parts) (map clojure.string/capitalize (rest parts))))\n    )\n  )", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 102, "code": "(fn into-camel-case\n  [s]\n  (let [words (clojure.string/split s #\"\\-\")]\n    (clojure.string/join\n     (cons (first words)\n           (map clojure.string/capitalize (rest words))))))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 102, "code": "(fn f [s]\n  (let [words (clojure.string/split s #\"\\-\")\n        caps (for [word (rest words)] (clojure.string/capitalize word))]\n    (apply str (first words) caps)))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 102, "code": "(fn [s]\n   (apply str (first (clojure.string/split s #\"-\"))(map clojure.string/capitalize (drop 1 (clojure.string/split s #\"-\")))))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 102, "code": "(fn [s] \n  (clojure.string/join \n   \"\" \n   (reduce \n    #(if (empty? %) (conj % %2) (conj % (clojure.string/capitalize %2))) \n       [] \n       (clojure.string/split s #\"-\")\n   )))", "user": "57169f93e4b07c98581c3b00"}, {"problem": 102, "code": "#(let [split-str (clojure.string/split % #\"-\")]\n         (clojure.string/join\n           (concat (first split-str) (map\n                                       (fn [word] (clojure.string/capitalize word))\n                                       (rest split-str)))\n           ))", "user": "52cbe5dfe4b07d0d72b27352"}, {"problem": 102, "code": "(fn [x]\n  (let [firstGroup (first (clojure.string/split x #\"-\"))\n        restGroup (next (clojure.string/split x #\"-\"))]\n  (apply str firstGroup (map clojure.string/capitalize restGroup))))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 102, "code": "(fn [s]\n  (let [w (clojure.string/split s #\"-\")]\n    (clojure.string/join\n     (conj\n      (map clojure.string/capitalize (rest w))\n      (first w)))))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 102, "code": "(fn camel-case\n  [s]\n  (let [coll (clojure.string/split (str s) #\"-\")\n   frst (first coll)\n   rst (map clojure.string/capitalize (rest coll))]\n  (apply str frst rst)))", "user": "4ec7c32c535d6d7199dd36e6"}, {"problem": 102, "code": "(fn intoCamelCase [x]\n  (let [w (re-seq #\"\\w+\" x)]\n    (apply str (first w) (map #(clojure.string/capitalize %) (next w)))))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 102, "code": "(fn camel-case [words]\n    (let [s (re-seq #\"\\w+\" words)]\n        (apply str (first s) (map clojure.string/capitalize (rest s)))))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 102, "code": "(fn [j]\n  (let [x (clojure.string/split j #\"-\")\n        y #(apply str (clojure.string/upper-case (first %)) (next %))\n        z (fn h[s] (apply str (y (first s)) (if (next s) (h (next s)) \"\")))\n        ]\n    (apply str (first x) (if (next x) (z (next x)) \"\"))\n  \n    )\n  )", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 102, "code": "(fn [s]\n  (let [splitted (clojure.string/split s #\"-\")\n        firstStr (first splitted)\n        upperCased (map clojure.string/capitalize (rest splitted))\n        camelled (cons firstStr upperCased)]\n    (apply str camelled)))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 102, "code": "(fn [s]\n  (let [tokens (clojure.string/split s #\"-\")]\n    (str (first tokens)\n         (clojure.string/join\n          (map clojure.string/capitalize (rest tokens))))))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 102, "code": "(fn dd [s]\n  (let [ss (clojure.string/split s #\"-\")\n        upfn (fn [cs]\n                (apply str (.toUpperCase (str (first  (seq cs)))) (rest (seq cs))))]\n    (apply str (first ss)(map #(upfn %) (rest ss)))))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 102, "code": "(fn [z] (apply str (take-while identity (let [x (re-matcher #\"-?.\" z)] (repeatedly #(let [y (re-find x)] (if (> (count y) 1) (.toUpperCase (subs y 1)) y)))))))", "user": "576e3258e4b0979f89651574"}, {"problem": 102, "code": "(fn [s]\n  (let [pos (.indexOf s \"-\")\n        strings (seq s)]\n    (if (= -1 pos) s\n      (recur (apply str \n                    (concat\n                     (first (split-at pos strings)) \n                     (clojure.string/upper-case (nth strings (inc pos)))\n                     (drop 2 (last (split-at pos strings)))))))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 102, "code": "#(let [rep clojure.string/replace]\n  (-> % (rep #\"-w\" \"W\") (rep #\"-k\" \"K\")))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 102, "code": "(fn [s]\n  (let [[f & r] (clojure.string/split s #\"-\")]\n    (apply str f (when-let [r (seq r)] (map clojure.string/capitalize r)))))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 102, "code": "(fn [word]\n  (let [words (clojure.string/split word #\"\\-\")]\n    (str (first words) (reduce str (map clojure.string/capitalize (rest words))))))", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 102, "code": "(fn [x]\n  (let [w (clojure.string/split x #\"-\")]\n    (apply str (cons (first w)(map clojure.string/capitalize (rest w))))\n    )\n  \n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(.)\" #(clojure.string/upper-case (%1 1))))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 102, "code": "(fn kebab->camel [st]\n    (let [[word & words] (clojure.string/split st #\"-\")]\n      (apply str word (map clojure.string/capitalize words))))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 102, "code": "(fn camcase [s]\n    (#(clojure.string/join [(first %)\n                            (apply str\n                                   (map\n                                    clojure.string/capitalize (rest %)))])\n     (clojure.string/split s #\"-\")))", "user": "579693d4e4b039eba2ecb0e7"}, {"problem": 102, "code": "(fn camcase [s]\n    (#(clojure.string/join [(first %)\n                            (apply str\n                                   (map\n                                    clojure.string/capitalize (rest %)))])\n     (clojure.string/split s #\"-\")))", "user": "5796d308e4b039eba2ecb0ed"}, {"problem": 102, "code": "(fn [s]\n  (let [splits (clojure.string/split s #\"-\" )\n        elems (rest splits)]\n    (str (first splits) \n         (apply str \n             (map \n              (fn [s]\n                 (clojure.string/capitalize s)\n                )\n               \n              elems))\n         )\n    \n    )\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 102, "code": "(fn camcase [s]\n    (#(clojure.string/join [(first %)\n                            (apply str\n                                   (map\n                                    clojure.string/capitalize (rest %)))])\n     (clojure.string/split s #\"-\")))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 102, "code": "(fn camcase [s]\n    (#(clojure.string/join [(first %)\n                            (apply str\n                                   (map\n                                    clojure.string/capitalize (rest %)))])\n     (clojure.string/split s #\"-\")))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-\\w\" #(.toUpperCase (clojure.string/join (rest %1)))))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[_ x]]\n                           (clojure.string/upper-case x)))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 102, "code": "(fn camcase [s]\n    (#(clojure.string/join [(first %)\n                            (apply str\n                                   (map\n                                    clojure.string/capitalize (rest %)))])\n     (clojure.string/split s #\"-\")))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 102, "code": "(fn Camel3 [w]\n  (let [words (clojure.string/split w #\"-\")]\n    (str (first words) (apply str (map clojure.string/capitalize (rest words))))))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 102, "code": "(fn myf2 [s]\n  (let [coll (clojure.string/split s #\"-\")]\n    (->> (cons (first coll) (map clojure.string/capitalize (rest coll)))\n      (apply str)\n    \n    )))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 102, "code": "(fn [snake-case] (clojure.string/replace snake-case #\"-(.)\" (fn [m] (.toUpperCase (second m)))))", "user": "57717915e4b0979f896515b3"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"\\-\\w\" #(clojure.string/upper-case (subs % 1))))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 102, "code": "(fn\n  [s]\n  (let [i (clojure.string/split s #\"-\")]\n    (apply str (conj (map clojure.string/capitalize (rest i)) (first i)))))", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 102, "code": "(fn [s]\n  (->> (re-seq #\"-(\\w)\" s)\n       (map #(update-in % [1] clojure.string/upper-case))\n       (reduce #(apply (partial clojure.string/replace %1) %2) s)))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 102, "code": "#(let [[a & b] (clojure.string/split % #\"-\")] (clojure.string/join (conj (map clojure.string/capitalize b) a)))", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 102, "code": "#(let [strL (re-seq  #\"\\w+\" %)] \n   (str \n    (first strL)\n    (reduce str (map (fn [x] \n                       (str \n                        (clojure.string/upper-case (str (first x))) \n                        (reduce str (rest x))))  \n                     (rest strL)))))", "user": "57986b76e4b039eba2ecb116"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (% 1))))", "user": "577202d2e4b0979f896515c0"}, {"problem": 102, "code": "(fn cc [s]\n  (let [firstLtrUp (fn [wd] (apply str (cons (.toUpperCase (str (first wd))) (rest wd))))\n        firstLtrDown (fn [wd] (apply str (cons (.toLowerCase (str (first wd))) (rest wd))))]\n    (firstLtrDown (apply str (map firstLtrUp (clojure.string/split s #\"-\"))))))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-([a-z])\" #(.toUpperCase (% 1))))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 102, "code": "(fn [s]\n  (->>\n   (str \"a\" s)\n   (#(clojure.string/split % #\"-\"))\n   (map (fn [w]\n          (apply (partial str (clojure.string/upper-case (first w))) (rest w))))\n   (clojure.string/join \"\")\n   (rest)\n   (apply str)))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 102, "code": "(fn [s]\n    (clojure.string/replace\n      s\n      #\"-.\"\n      (fn [c]\n        (clojure.string/upper-case\n          (str\n            (second c)\n          )\n        )\n      )\n    )\n  )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 102, "code": "#(let [x (rest (clojure.string/split  %   #\"-\")) y (first (clojure.string/split  %   #\"-\"))]\n      (if \n      (empty? x) %\n       (str    \n           y\n           (apply    str  (map clojure.string/capitalize  x ) )\n           )\n       )\n     )", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 102, "code": "#(\n  loop [s % r \"\"] \n  (if (empty? s) \n    r \n    (if (= (first s) \\-) \n      (recur (drop 2 s) (str r (clojure.string/upper-case (nth s 1))))\n      (recur (drop 1 s) (str r (first s)))\n    )\n  )\n)", "user": "57a5bdc4e4b0a966079561fd"}, {"problem": 102, "code": "(fn [s]\n  (let [[fw & rest] (clojure.string/split s #\"-\")]\n    (str fw\n      (clojure.string/join\n        (map clojure.string/capitalize rest)))))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 102, "code": "(fn[s](clojure.string/replace \n  s \n  #\"-(.)\"\n  #(clojure.string/upper-case (second %))))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-([a-z])\" \n                                #(clojure.string/upper-case (last %)) ))", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 102, "code": ";(defn capitalise-first [w] (apply str (Character/toUpperCase (first w) ) (rest w)))\n;\n(fn camel-case \n  [input] \n  (let [words (clojure.string/split input #\"-\" )] \n    (apply str (first words) \n           \t   (map #(apply str (Character/toUpperCase (first %1) ) (rest %1))  (rest words))\n    )\n ))", "user": "558bdcefe4b0277789237633"}, {"problem": 102, "code": "(fn [s]\n    (->>\n     (clojure.string/split s #\"-\")\n     (#(cons (first %) (map clojure.string/capitalize (rest %))))\n     (apply str)\n     )\n    )", "user": "57aa290de4b0b8559636fc65"}, {"problem": 102, "code": "#((fn [[h & t]]\n  (apply str h (map clojure.string/capitalize t)))\n(re-seq #\"\\w+\" %))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 102, "code": "(fn intoCamelCase [s]\n  (let [[fw & rw] (clojure.string/split s #\"-\")]\n    (apply str (cons fw (map clojure.string/capitalize rw)))))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 102, "code": "(fn [s]\n    (let [[head & tail] (clojure.string/split s #\"-\")]\n      (apply str head (map #(clojure.string/capitalize %) tail))))", "user": "56b306c6e4b0982f16b37e0e"}, {"problem": 102, "code": "(fn name [s]\n  (let [words (re-seq #\"[a-zA-Z]+\" s)\n        words (cons (first words)\n                    (map clojure.string/capitalize (rest words)))]\n    (apply str words)))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 102, "code": "(fn intoCamel[ss]\n  (let[dist (re-seq #\"\\w+\" ss)\n       to-up (fn to-upper[s]\n              (str (.toUpperCase (str (first s))) (apply str (next s))))]\n    (if (next dist) (apply str (first dist) (map to-up (next dist)))\n      (first dist))))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 102, "code": "(fn [s]\n  (let [words (re-seq #\"\\w+\" s)]\n    (apply str\n           (first words)\n           (map (fn [[f & r]] (apply str (char (- (int f) 32)) r))\n                (rest words)))))", "user": "523b4e91e4b07becd5be21ef"}, {"problem": 102, "code": "(fn toCamelCase [string]\n  (let [words (clojure.string/split string #\"-\")\n        capitalize (fn [word] (apply str (clojure.string/upper-case (first word)) (rest word)))]\n    (apply str (first words) (map capitalize (rest words)))\n   )\n )", "user": "57cf03c0e4b00451144b04f9"}, {"problem": 102, "code": "(fn camelcase [s]\n  (let [[lead & more] (clojure.string/split s #\"-\")]\n   (apply str (conj (map clojure.string/capitalize  more) lead) ))\n  )", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 102, "code": "#(let [splitted (clojure.string/split % #\"-\")\n       capitalized (map clojure.string/capitalize (rest splitted))]\n   (apply str (first splitted) capitalized))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s\n                          #\"-(\\w)\"\n                          #(clojure.string/upper-case (second %1))))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 102, "code": "(fn cc [s]\n(-> s\n (clojure.string/replace #\"-.\" clojure.string/upper-case)\n (clojure.string/replace #\"-\" \"\")))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 102, "code": "(fn into-camel-case [s]\n  (if-let [[f & r] (clojure.string/split s #\"-\")]\n    (apply str\n           (into [f]\n                 (map clojure.string/capitalize r)))\n    s))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 102, "code": "(fn [s]\n  (loop [ret []\n         s s]\n    (cond (empty? s) \n          (apply str ret)\n          \n          (= (first s) \\-)\n          (let [x1 (first s)\n                x2 (second s)]\n            (if (nil? x2)\n              (apply str (conj ret x1))\n              (recur (conj ret (clojure.string/upper-case x2))\n                     (nnext s))))\n          \n          :else\n          (recur (conj ret (first s))\n                 (next s)))))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 102, "code": "(fn [s]\n  (apply str\n\t(reduce\n \t\t#(if (= \\- (last %1)) \n           (conj (into [] (butlast %1)) (clojure.string/upper-case %2)) \n           (conj %1 %2)) \n     [] s)\n   )\n )", "user": "57dfe173e4b0bd073c20246b"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")]\n   (->> (first words)\n        (conj (map clojure.string/capitalize (rest words)))\n        (clojure.string/join \"\")))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 102, "code": "#(apply str (reduce (fn [r v] (if (= (last r) \\-) (conj (apply vector (butlast r)) (char (- (int v) 32))) (conj r v))) [] %))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 102, "code": "(fn camel-case [s]\n  (let [->camel-case #(concat (str (Character/toUpperCase (first %1))) (rest %1))\n        xs (take-nth 2 (partition-by #(= \\- %1) s))]\n    (->> (mapcat ->camel-case (rest xs)) (concat (first xs)) (apply str))))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 102, "code": "(fn [str]\n  (clojure.string/replace \n   str #\"-(\\w)\"\n   (fn [x] (clojure.string/upper-case (second x)))))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 102, "code": "(fn [s]\n    (let [ws (.split s \"-\")]\n      (if (= (count ws) 1)\n        s\n        (apply str\n               (cons (first ws) \n                     (map \n                       (fn [w] (apply str (cons (Character/toUpperCase (first w)) (rest w)))) (rest ws)))))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 102, "code": "(fn [s]\n   (loop [s s c 0 r []]\n     (cond\n       (empty? s) (apply str r)\n       (= (first s) \\-) (recur (rest s) 1 r)\n       (= c 1) (recur (rest s) 0 (conj r (clojure.string/upper-case (first s))))\n       :else (recur (rest s) 0 (conj r (first s))))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 102, "code": "(fn camel [s]\n  (let [[p & caps] (clojure.string/split s #\"-\")]\n    (apply str p (map clojure.string/capitalize caps))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[a b]] (clojure.string/capitalize b)))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 102, "code": "(fn [xs]\n  (let [splitted          (.split xs \"-\")\n        rest-capitalized  (map clojure.string/capitalize (rest splitted))\n        cons-with-first   (cons (first splitted) rest-capitalized)\n        str-joined        (clojure.string/join cons-with-first)]\n    str-joined))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 102, "code": "(fn camel-case [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 102, "code": "#(apply str ((juxt first (comp (partial apply str) (partial map clojure.string/capitalize) rest)) (.split % \"-\")))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 102, "code": "#(let [[h & t] (clojure.string/split % #\"-\")] (apply str (cons h (map clojure.string/capitalize t))))", "user": "576df252e4b0979f8965156f"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"\\W\")]\n    (loop [remaining (rest words) ans [(first words)]]\n      (if (empty? remaining)\n        (apply str ans)\n        (recur (rest remaining) (conj ans (clojure.string/capitalize (first remaining))))))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 102, "code": "(fn [s] (let [[x & c] (.split s \"-\")]\n\t(apply str x (map clojure.string/capitalize c))))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 102, "code": "(fn [s] \n  (clojure.string/replace s \n                          #\"-(\\w)\" \n                          #(clojure.string/upper-case (str (% 1)))))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-.\" (fn [[_ x]] (format \"%S\" x)))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 102, "code": "(fn [s]\n    (clojure.string/replace s #\"-(\\w)\" #(str (.toUpperCase (last %)))))", "user": "4e837808535db62dc21a62d9"}, {"problem": 102, "code": "#(apply str\n       (loop [a % res [] h false]\n         (if (empty? a)\n           res (recur\n                (drop 1 a)\n                (cond (true? h) (conj res (clojure.string/upper-case (first a)))\n                      (and (false? h) (= \\- (first a))) res\n                      :else (conj res (first a)))\n                (if (= \\- (first a)) true false)))))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 102, "code": "#(let [ x (clojure.string/split % #\"-\")\n        y (first x)\n        z (rest x) ]\n  (apply str y (map clojure.string/capitalize z)))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 102, "code": "(fn [s]\n  (let [sp (re-seq #\"[^-]+\" s)\n        head (first sp)\n        remain (rest sp)]\n    (str head (apply str (map #(str (clojure.string/upper-case (first %)) (apply str (rest %)))\n                              remain)))))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 102, "code": "(fn [s]\n  (let [l (clojure.string/split s #\"-\")]\n    (str (first l)\n        (clojure.string/join (map clojure.string/capitalize (rest l))))))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 102, "code": "#(apply str (loop [in % out [] cap false] (if (empty? in) out (let [c (first in) r (rest in)] (cond (= c \\-) (recur r out true) (true? cap) (recur r (conj out (Character/toUpperCase c)) false) :else (recur r (conj out c) false))))))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 102, "code": "(fn [string]\n  (let [words (clojure.string/split string #\"-\"),\n        c (count words),\n        fw (nth words 0)]\n    (loop [n 1, result fw]\n      (if (== n c)\n        result\n        (recur (inc n) (str result (clojure.string/capitalize (nth words n))))))))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 102, "code": "(fn [s]\n  (let [[[fst] & words] (re-seq #\"(\\w)(\\w*)\" s)]\n    (apply str fst \n       (map (fn [[_ init body]]\n              (str (.toUpperCase init) body))\n            words))))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 102, "code": "(fn m102 [s]\n  (let [row (clojure.string/split s #\"-\")]\n    (if (> (count row) 1)\n      (clojure.string/join\n        (cons (first row) (map clojure.string/capitalize (rest row))))\n      s)))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 102, "code": "(fn [s]\n  (let [sl (clojure.string/split s #\"-\")\n        tl (map #(clojure.string/capitalize %) (rest sl))]\n    (apply str (first sl) tl)))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-[a-z]\" (comp clojure.string/upper-case second)))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 102, "code": "(fn convert-to-camel-case [s]\n  (let [words (.split s \"-\")]\n    (apply str\n           (concat (first words) (map clojure.string/capitalize (rest words))))))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 102, "code": "#(let [[x & y] (clojure.string/split % #\"-\")]\n   (->> (cons\n          x\n          (map clojure.string/capitalize y))\n        (apply str)))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 102, "code": "(fn [s] (apply str (concat [(first (clojure.string/split s #\"-\"))] (map #(str (.toUpperCase (str (first %))) (apply str (rest %))) (rest (clojure.string/split s #\"-\"))))))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 102, "code": "(fn [string]\n  (let [v (clojure.string/split string #\"-\")]\n    (if (= (count v) 1)\n      string\n      (let [firs (first v)\n            rst (map #(clojure.string/capitalize %) (rest v))]\n        (str firs (apply str rst))))))", "user": "564d3169e4b0284900eef67c"}, {"problem": 102, "code": "(fn f102 [s]\n  (let [coll (clojure.string/split s #\"-\")]\n    (->>\n     (into (vector (first coll)) (map #(clojure.string/capitalize %) (rest coll)))\n     (apply concat)\n     (apply str))))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 102, "code": "(fn camel [s]\n  (let [strs (clojure.string/split s #\"-\")]\n    (apply str \"\" (first strs) (map clojure.string/capitalize (next strs)))))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 102, "code": "(fn [st]\n  (clojure.string/replace st  #\"[-][A-Za-z]\"  #(.toUpperCase  (str  (second %1)))))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 102, "code": "(fn [s] (reduce #(str %1 (clojure.string/capitalize %2)) (clojure.string/split s #\"-\")))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 102, "code": "(fn [x]\n  (if (= x \"multi-word-key\") \"multiWordKey\" x))", "user": "58152157e4b0f478707a0631"}, {"problem": 102, "code": "#(->> (re-seq #\"\\w+\" %)\n      (reduce (fn [f s]\n                  (str f (clojure.string/capitalize s)))))", "user": "5703a557e4b08d47c97781f4"}, {"problem": 102, "code": "(fn [x] \n\t(let [words (re-seq #\"[^-]+\" x)]\n  \t(apply str (apply concat (cons (first words) (map clojure.string/capitalize (rest words)))\n     )))\n  )", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 102, "code": "(fn [s]\n  (let [[head & tail] (clojure.string/split s #\"-\")]\n    (apply str head (map clojure.string/capitalize tail))))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 102, "code": "(fn cc [s]\n  (let [matcher (re-matcher #\"-.\" s)]\n    (letfn [(subst [ss matcher]\n      (let [next (re-find matcher)]\n        (if next\n          (subst (clojure.string/replace ss next (-> next\n                                                     (clojure.string/upper-case)\n                                                     (clojure.string/replace #\"-\" \"\" )))\n                 matcher)\n          ss\n          )))]\n      (subst s matcher))))", "user": "56069006e4b08b23635d3174"}, {"problem": 102, "code": "#(let [[f & r] (clojure.string/split % #\"\\-\")]\n   (apply str f (map clojure.string/capitalize r)))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"[^\\w]+\")]\n    (apply str (concat [(first words)]\n                       (map clojure.string/capitalize (rest words)))))", "user": "58247423e4b051871117bec5"}, {"problem": 102, "code": "(fn [s]\n    (clojure.string/join\n     (let [words (clojure.string/split s #\"-\")]\n       (cons (first words) (map #(clojure.string/capitalize %) (rest words))))))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 102, "code": "(fn [phrase] (let [words (clojure.string/split phrase #\"\\-\") f (first words) rst (rest words)]\n               (clojure.string/join \"\" (cons f (map clojure.string/capitalize rst)))))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 102, "code": "(fn [x]\n  (clojure.string/replace x #\"-(.)\" #(.toUpperCase (% 1))))", "user": "58384bc4e4b089d5ab817d27"}, {"problem": 102, "code": "(fn camel-case [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (str (first words) (apply str (map clojure.string/capitalize (rest words))))))", "user": "5843b95de4b089d5ab817e3f"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(.)\" #(.toUpperCase (% 1))))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 102, "code": "(fn [string]\n  (reduce\n    (fn [acc v]\n      (str acc (clojure.string/capitalize v)))\n    (first (clojure.string/split string #\"-\"))\n    (rest (clojure.string/split string #\"-\"))))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-(.)\" #(.toUpperCase (%1 1))))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 102, "code": "(fn camelize [string]\n  (let [[f & r] (clojure.string/split string #\"-\")]\n    (clojure.string/join (cons f (map clojure.string/capitalize r)))))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 102, "code": "(fn [s]\n  (reduce #(if (empty? %1)\n             %2\n             (str %1 (clojure.string/capitalize %2)))\n          \"\"\n  \t\t  (clojure.string/split s #\"-\")))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 102, "code": "#_(fn [s] \n  (->> (clojure.string/split s #\"-\")\n       (split-at 1)\n       ((fn [[[f] r]]\n          (cons f (map clojure.string/capitalize r))))\n       (apply str)))\n\n; better: replace \"-c\"\n#(clojure.string/replace % #\"-[a-z]\" (comp clojure.string/capitalize last))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 102, "code": "(fn intoCamelCase [s]\n  (let [cap-word (fn [[x & xs :as s]]\n                   ;; If a lowercase letter\n                   (if (< 96 (int x) 122)\n                     ;; Uppercase first char and append tail\n                     (apply str (char (- (int x) 32)) xs)\n                     s))\n        words    (re-seq #\"\\w+\" s)]\n    (if (empty? (rest words))\n      s\n      ;; Don't capitalize first word\n      (apply str (first words) (map cap-word (rest words))))))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-[a-z]\" (fn [match] (clojure.string/upper-case (second match)))))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 102, "code": "(fn [x](letfn[(split [s](re-seq #\"\\w+\" s))\n                  (capitalize [s](apply str (clojure.string/upper-case (first s)) (rest s)))\n                  (result [s] (apply str (cons (first s) (map capitalize (rest s)))))]\n             (apply str (result (split x)))))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 102, "code": "(fn [s]\n  (let [sp (clojure.string/split s #\"\\-\")]\n    (->> (rest sp)\n         (mapcat clojure.string/capitalize)\n         (concat (first sp))\n         (apply str))))", "user": "5574c172e4b05c286339e059"}, {"problem": 102, "code": "(fn into-camel-case [string]\n  (let [[head & tail] (clojure.string/split string #\"-\")]\n    (->> (map clojure.string/capitalize tail)\n         (cons head)\n         (apply str))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 102, "code": "(fn [input-str]\n  (reduce #(str %1 (clojure.string/capitalize %2))\n          (clojure.string/split input-str #\"-\")))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 102, "code": "(fn [string]\n  (let [words (clojure.string/split string #\"-\")]\n    (if (> (count words) 1)\n      (apply str \n             (first words)\n             (map (fn [word]\n                    (let [first-character-int (int (first (seq word)))]\n                      (if (and (>= first-character-int (int \\a))\n                               (<= first-character-int (int \\z)))\n                        (apply str\n                               (char (- first-character-int (- (int \\a) (int \\A))))\n                               (rest (seq word)))\n                        word)))\n                  (rest words)))\n      (first words))))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(.)\" #(clojure.string/upper-case (second %))))", "user": "582e0afde4b051871117bfd5"}, {"problem": 102, "code": "(fn ->camel-case [word]\n  (let [words (clojure.string/split word #\"-\")]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))))", "user": "4dac39a28cc9d6edb8beb0b3"}, {"problem": 102, "code": "(fn c-case [s]\n  (let [cap-first (fn [s2]\n                    (apply str (cons (Character/toUpperCase (first (seq s2))) (rest (seq s2)))))\n        words (clojure.string/split s #\"-\")]\n    (apply str (cons (first words) (map cap-first (rest words))))\n    ))", "user": "56f4cedce4b046a417f92063"}, {"problem": 102, "code": "(fn [x]  \n  (loop [[n & numbers] x\n         result \"\"]  \n    (let [result (if (= \\- n) result  (str result n))]\n      (if (empty? numbers)\n        result   \n        (recur (if (= \\- n) (concat (clojure.string/capitalize (first numbers)) (rest numbers)) numbers) result))))\n   )", "user": "50b25edae4b03ea88043355e"}, {"problem": 102, "code": "(fn [w] (clojure.string/replace w #\"(-)([a-z])\" (comp #(.toUpperCase %) last)))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 102, "code": "(fn z [s]\n  (let [x (fn [coll] (apply str (first coll) (map clojure.string/capitalize (rest coll))))]\n    (x (clojure.string/split s #\"-\"))))", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 102, "code": "(fn [c] (reduce #(clojure.string/replace %1 %2 (str (second (clojure.string/upper-case %2)))) c (re-seq #\"-[a-zA-Z]\" c)))", "user": "52503747e4b0541d1855b828"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-(\\w)\" #(str (clojure.string/upper-case (last %))))\n  )", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 102, "code": "(fn\n  [s]\n  (clojure.string/replace s #\"-([a-z])\" #(clojure.string/upper-case (second %1))))", "user": "56bb652ae4b0f26550335953"}, {"problem": 102, "code": "(fn g [st]\n   (letfn\n      [(cap [txt may c] \n        (concat \n          txt \n          (if may \n            (clojure.string/upper-case c) \n            c)))\n       (fred [acc c]\n         (let \n           [[txt may] acc] \n           (if (= c \"-\") \n             [txt true]\n             [(cap txt may c) false])))]\n     (->>\n       (reduce fred [\"\" false] (->> (seq st) (map str)))\n       first\n       clojure.string/join)))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 102, "code": "(fn [s]\n    (let [s (clojure.string/split s #\"-\")]\n      (if (== 1 (count s))\n        (first s)\n        (apply str (concat (first s) (mapcat (fn [s] [(.toUpperCase (subs s 0 1)) (subs s 1)]) (rest s)))))))", "user": "55597b84e4b0deb715856e36"}, {"problem": 102, "code": "(fn [w] (clojure.string/replace w #\"-(.)\" #(.toUpperCase (%1 1))))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 102, "code": "(fn\n  [string]\n  (let [words (seq (.split string \"-\"))]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))\n    ))", "user": "58745926e4b01531a375ea50"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (%1 1))))", "user": "4daf420cedd6309eace4d176"}, {"problem": 102, "code": "(fn to-camel-case\n  [s]\n  (let [splits (clojure.string/split s #\"-\")]\n    (if (= (count splits) 1) s\n        (str (clojure.string/lower-case (first splits)) (apply str (map clojure.string/capitalize (rest splits)))))))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 102, "code": "(fn [s]\n  (let [tokens (clojure.string/split s #\"-\")]\n    (clojure.string/join \"\" (cons (first tokens) (map clojure.string/capitalize (next tokens))))))", "user": "5879d577e4b01531a375ead8"}, {"problem": 102, "code": "(fn [x]\n\n  (if (> (count (re-seq #\"\\w+\" x)) 1)\n\n    (clojure.string/join (concat (take 1 (re-seq #\"\\w+\" x)) (map clojure.string/capitalize (drop 1 (re-seq #\"\\w+\" x)))))\n\n    x))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 102, "code": "(fn [x] (let [s (clojure.string/split x #\"-\")]\n          (apply str (cons (first s) (map clojure.string/capitalize (next s))))))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 102, "code": "(fn mw [s]\n    (let [uc (fn [s]\n               (let [[c & cs] s]\n                 (str (.toUpperCase (str c)) (apply str cs))))\n          [x & xs] (clojure.string/split s #\"-\")]\n      (apply str x (map uc xs))))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"(?:-)(\\w)\" #(.toUpperCase (get % 1))))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 102, "code": "(fn [x] (apply str (first (clojure.string/split x #\"-\")) \n                   (map clojure.string/capitalize (rest (clojure.string/split x #\"-\")))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 102, "code": "#(let [split (clojure.string/split % #\"-\")\n       caps (map clojure.string/capitalize (rest split))]\n  (clojure.string/join (concat (first split) caps)))", "user": "5896735fe4b00487982d529d"}, {"problem": 102, "code": "#(apply str (let [s (clojure.string/split % #\"-\")] (cons (first s) (map clojure.string/capitalize (rest s)))))", "user": "58923efce4b00487982d521c"}, {"problem": 102, "code": "(fn [word]\n  (let [words (clojure.string/split word #\"-\")\n      head (first words)\n      tail (map clojure.string/capitalize (rest words))]\n  (clojure.string/join \"\" (cons head tail))))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 102, "code": "(fn [s]\n  (->> s\n       (re-seq #\"\\w+\")\n       (map-indexed #(if (zero? %1) %2 (clojure.string/capitalize %2)))\n       (apply str)))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 102, "code": "(fn [s]\n (let [strs (clojure.string/split s '#\"-\")]\n   (if (< 1 (count strs))\n     (clojure.string/join \"\" (conj (map clojure.string/capitalize (rest strs)) (first strs)))\n     (first strs))))", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 102, "code": "#(let [[head & tail] (clojure.string/split % #\"-\")]\n        (clojure.string/join (cons head (map clojure.string/capitalize tail))))", "user": "58949f8de4b00487982d525e"}, {"problem": 102, "code": "(fn [a-str]\n  (second (reduce #(if (= %2 \\-) \n                     [true (second %1)]\n                     (if (first %1)\n                       [false (str (second %1) (.toUpperCase (str %2 \"\")))] \n                       [false (str (second %1) %2)])) \n                  [false \"\"] \n                  a-str)))", "user": "574e84e0e4b02ea114799243"}, {"problem": 102, "code": "(fn [w] (let \n         [sq (re-seq #\"\\w+\" w)] \n         (reduce \n#(str %1 (apply str (.toUpperCase (str (first %2))) (rest %2))) \n(first sq) \n(into [] (rest sq)))\n))", "user": "53b05a75e4b047364c044482"}, {"problem": 102, "code": "(fn [s]\n  (let [w (clojure.string/split s #\"-\")]\n    (apply str (first w) (map clojure.string/capitalize (rest w)))))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 102, "code": "(fn [text]\n  (let [splitted (clojure.string/split\n                  text\n                  #\"-\")]\n    (if (= (count splitted) 1)\n      text\n      (let [[h & t] splitted]\n        (apply str\n               (concat h\n                       (->> t\n                            (map clojure.string/capitalize)\n                            (apply str))))))))", "user": "5895477fe4b00487982d527c"}, {"problem": 102, "code": "#(let [[f & r] (clojure.string/split % #\"-\")]\n     (apply str f (map clojure.string/capitalize r)))", "user": "5458c74de4b01be26fd74623"}, {"problem": 102, "code": "(fn [s]\n  (let [[s & ss] (clojure.string/split s #\"-\")]\n    (apply str s (map clojure.string/capitalize ss))))", "user": "5896a0e6e4b00487982d52a8"}, {"problem": 102, "code": "(fn [w] (clojure.string/replace w #\"-(\\w)\" #(.toUpperCase (second %1))))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 102, "code": "#(apply str \n        (remove (fn [x] (= x \\-)) \n                (map (fn [x y] (if (= \\- x) (clojure.string/upper-case y) y)) \n                     (conj (seq %) \\ ) \n                     (seq %))))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 102, "code": "(fn [x]\n     (let [sp (vec (clojure.string/split x #\"-\"))\n           nw (conj [] (str (first sp)))]\n       (clojure.string/join (concat nw (map #(clojure.string/capitalize %) (rest sp))))\n       )\n     )", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 102, "code": "#(let [[x & xs] (clojure.string/split\n                %\n                #\"-\")\n      y (map clojure.string/capitalize xs)\n      z (clojure.string/join y)]\n  (str x z))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 102, "code": "(fn [s]\n  (let [ss (clojure.string/split s #\"-\")]\n    (str (first ss)\n         (clojure.string/join\n           (map\n             clojure.string/capitalize\n             (rest ss))))))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 102, "code": "(fn [wordstr]\n(let [words (clojure.string/split wordstr #\"-\")]\n(str (first words)\n (apply str(map #(str (clojure.string/upper-case (first %)) (apply str (rest %))) (rest words)))))\n  )", "user": "58950f29e4b00487982d5270"}, {"problem": 102, "code": "(fn [s]\n  (let [mystr (clojure.string/split s #\"-\")]\n    (clojure.string/join #\"\"\n    (cons (first mystr) \n          (map clojure.string/capitalize (rest mystr))))))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 102, "code": "(fn [s] (let [\n               parts (map str\n                          (.split s\n                                  \"-\"))\n               r (map clojure.string/capitalize (rest parts))\n               build (into [(first parts)] r)\n               ] (clojure.string/join \"\" build ))\n   )", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 102, "code": "(fn camel [s] \n  (let [words (re-seq #\"\\w+\" s)]\n(clojure.string/join \"\" (concat [(first words)] (map clojure.string/capitalize (drop 1 words))))))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"\\-.\" #(clojure.string/upper-case (str (last %)))))", "user": "589037b4e4b00487982d51d0"}, {"problem": 102, "code": "(fn [s]\n\n   (let [[f & rest](re-seq #\"\\w+\" s)]\n\n     (apply str (cons f (map clojure.string/capitalize  rest))) )\n\n   )", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 102, "code": "#(let [[first & rest] (clojure.string/split % #\"-\")]\n   (apply str first\n          (map clojure.string/capitalize rest)))", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-\\w\" (comp clojure.string/upper-case second))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 102, "code": "(fn [s]\n  (->> s\n       (re-seq #\"\\w+\")\n       (reduce\n        #(concat %1 [(if (empty? %1) \n                       (first %2) \n                       (Character/toUpperCase (first %2)))] (rest %2)))\n       (apply str)))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 102, "code": "#(let [[_ & tail :as col] (clojure.string/split % #\"\\-\")]\n   (->> (map clojure.string/capitalize tail)\n        (concat (take 1 col))\n        clojure.string/join))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 102, "code": "(fn [str]\n\t(let [words (clojure.string/split str #\"-\")]\n\t\t(clojure.string/join (concat [(first words)] (map clojure.string/capitalize (rest words))))))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 102, "code": "(fn [s]                                                                                                                                      \n  (apply str                                                                                                                                         \n   (filter                                                                                                                                           \n    (comp not #{\\-})                                                                                                                                 \n    (map #(if (= \\- %2) (.toUpperCase (str %1))  %1)                                                                                                 \n         s                                                                                                                                           \n         (cons nil s)))))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 102, "code": "(fn to-camel-case [ustr] (clojure.string/replace ustr #\"-(\\w)\" #(clojure.string/upper-case (second %1))))", "user": "58e256e1e4b005f69f193c90"}, {"problem": 102, "code": "(fn into-cam\n  [str]\n  (let [words (clojure.string/split str #\"-\")\n        rest-words (rest words)\n        cap-rest-words (map clojure.string/capitalize rest-words)]\n    (clojure.string/join  (conj  cap-rest-words (first words)))))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 102, "code": "(fn [s]\n  (let [s-seq (clojure.string/split s #\"-\")\n        h (first s-seq)\n        t (rest s-seq)\n        f #(str (.toUpperCase (str (first %))) (apply str (rest %)))]\n    (apply str h (map f t))))", "user": "53ae0c50e4b047364c044471"}, {"problem": 102, "code": "(fn [s]\n  (apply\n   str\n   ((juxt\n     first\n     (comp\n      (partial\n       apply\n       str)\n      (partial\n       map\n       clojure.string/capitalize)\n      rest))\n    (clojure.string/split\n     s\n     #\"-\"))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 102, "code": "#(clojure.string/replace %\n                         #\"-(\\w)\"\n                         (comp clojure.string/capitalize\n                               second))", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 102, "code": "(fn [s]\n  (let [[f & r] (clojure.string/split s #\"-\")]\n    (clojure.string/join (cons f (map clojure.string/capitalize r)))))", "user": "54965534e4b0b312c081ff65"}, {"problem": 102, "code": "(fn camel-case [s]\n      (apply str (cons (first (re-seq #\"\\w+\" s))\n            (map clojure.string/capitalize (rest (re-seq #\"\\w+\" s))))))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 102, "code": "#(reduce str (keep-indexed (fn [i v] (if (= 0 i) v (clojure.string/capitalize v))) (clojure.string/split %1 #\"-\")))", "user": "57ecc16fe4b0bfb2137f5b83"}, {"problem": 102, "code": "(fn to-camel-case-1-4 [s]\n  (let [r (clojure.string/split s  #\"-\")\n        u (reduce (fn [rs [c & cs]]\n                    (conj rs (apply str (java.lang.Character/toUpperCase c) cs)))\n                  [(first r) ]\n                  (rest r))\n        ]       \n    (apply str u)))", "user": "58e37946e4b005f69f193cae"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(.)\" (comp clojure.string/capitalize last))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 102, "code": "(fn camel-case [string]\n  (let [words (clojure.string/split string #\"-\")]\n    (clojure.string/join (cons (first words) \n                               (map clojure.string/capitalize (rest words))))))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(.)\" (fn [[_ m]] (clojure.string/upper-case m)))", "user": "4dc986d0535d5973398f9285"}, {"problem": 102, "code": "(fn [s]\n  (let [[x & xs] (.split s \"-\")]\n    (apply str x (map #(apply str (Character/toUpperCase (first %)) (rest %))\n                      xs))))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (second %))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(.)\" (fn [x] (.toUpperCase (second x))))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 102, "code": "(fn camel [s]\n    (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (second %))))", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 102, "code": "(fn [s]\n   (let [split (clojure.string/split s #\"-\")]\n     (str\n       (first split)\n       (clojure.string/join \"\"\n                            (map clojure.string/capitalize (rest split))\n                            ))))", "user": "51a54fb4e4b0def3c5c586a3"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 102, "code": "#(clojure.string/replace\n       %\n       #\"-\\w\"\n       (fn [c] (.toUpperCase (apply str (drop 1 c)))))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 102, "code": "(fn\n  [s]\n  (let [l (clojure.string/split s #\"-\")]\n    (apply str\n           (first l)\n           (map clojure.string/capitalize\n                (rest l)))))", "user": "5893c64ce4b00487982d524b"}, {"problem": 102, "code": "#(let [ws (clojure.string/split % #\"-\")] (clojure.string/join (into [(first ws)] (map clojure.string/capitalize (next ws)))))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 102, "code": "(fn [w] (clojure.string/replace w #\"-(\\w)\" #(clojure.string/upper-case (second %))))", "user": "4fe9de74e4b0547ebccb2475"}, {"problem": 102, "code": "(fn [s] \n   (let [words (clojure.string/split s #\"-\")]\n        (letfn [(upper [w]\n                  (let [fs (clojure.string/upper-case (first w))]\n                    (apply str fs (rest w))))]\n          (apply str (first words) (map upper (rest words))))))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 102, "code": "(fn [s] (->> s\n               (re-seq #\"((^|[A-Z])[a-z0-9]+|\\w+)\")\n               (map first)\n               (map clojure.string/lower-case)\n               (map-indexed\n                 (fn [idx [wf & wr :as w]]\n                   (if (= 0 idx)\n                     w\n                     (apply str (cons (clojure.string/upper-case (str wf)) wr)))))\n               (apply str)))", "user": "5901158de4b0438e51c2d039"}, {"problem": 102, "code": "#(let [[s & ss] (clojure.string/split % #\"-\")]\n   (clojure.string/join (cons s (map clojure.string/capitalize ss))))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 102, "code": "(fn [input]\n  (letfn [(upper-lower [afunc input] (str (afunc (first input)) (apply str (rest input))))]\n    (upper-lower\n     clojure.string/lower-case\n      (apply str\n        (map #(upper-lower clojure.string/upper-case %)\n           (clojure.string/split input #\"-\"))))))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 102, "code": "(fn [s]\n  (let [r (re-seq #\"[^-]+\" s)]\n    (apply str (cons\n                 (first r)\n                 (map\n                   #(apply str (concat [(.toUpperCase (str (first %)))] (rest %)))\n                   (rest r))))))", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 102, "code": "(fn to-camel-case\n  [string]\n  (let [coll (re-seq #\"\\w+\" string)]\n    (if (> (count coll) 1)\n      (apply str\n        (cons (first coll) (map clojure.string/capitalize (rest coll))))\n      (apply str coll)\n      )))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 102, "code": "(fn [s]\n  (let [lst (clojure.string/split s #\"-\")]\n  (apply str (first lst)(map clojure.string/capitalize (rest lst)))))", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 102, "code": "(fn [s]\n  (->> (clojure.string/split s #\"-\")\n       (map-indexed #(if (pos? %1) (clojure.string/capitalize %2) %2))\n       (apply str)))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 102, "code": "(fn [string]\n   (->>\n    (clojure.string/split string #\"-\")\n    ((fn [[f & r]]\n       (if (nil? r)\n         [f]\n         (apply conj [f] (map clojure.string/capitalize r))\n         )\n       ))\n    clojure.string/join))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 102, "code": "(fn into-camel-case [word]\n  (let [hyphen (.indexOf word \"-\")]\n    (if (pos? hyphen)\n      (str (subs word 0 hyphen) (into-camel-case (clojure.string/capitalize (subs word (inc hyphen)))))\n      word)))", "user": "58ffac9de4b0438e51c2cffd"}, {"problem": 102, "code": "(fn [seq1]\n   (loop [result[] , data seq1, prev (first seq1)]\n     (if (empty? data)\n       (clojure.string/join result)\n       (recur\n         (if (= (first data) \\-)\n           result\n           (if (= prev \\-)\n               (conj result (clojure.string/upper-case (first data)))\n               (conj result (first data))\n             )\n           )\n         (rest data)\n         (first data)\n        )\n       )\n     )\n\n   )", "user": "59228b00e4b026ae38521281"}, {"problem": 102, "code": "#(apply str\n        (let [[w & ws] (re-seq #\"[a-zA-Z]+\" %)]\n          (cons w\n                (mapcat (fn [[y & ys]] (cons (Character/toUpperCase y) ys)) ws))))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 102, "code": "(fn [s]\n    (let [r (clojure.string/split s #\"\\-\")]\n      (apply str (first r) (map clojure.string/capitalize (rest r)))\n      ))", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 102, "code": "(fn [s]\n  (let [front (first (clojure.string/split s #\"-\"))\n          shiz (clojure.string/join (map clojure.string/capitalize (rest (clojure.string/split s #\"-\"))))]\n      (str front shiz)))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "592518bfe4b072a2710fce65"}, {"problem": 102, "code": "(fn [s]\n  (let [pattern #\"-.\"\n        words (clojure.string/split s pattern)\n        seps (re-seq pattern s)\n        new-seps (map #(clojure.string/upper-case (nth %1 1)) seps)]\n    (apply str \n           (conj (apply vector \n                        (interleave words new-seps)) \n                 (last words)))))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 102, "code": "(fn [x]\n  (let [split-string (clojure.string/split x #\"-\")]\n       (apply str (first split-string) (map #(clojure.string/capitalize %) (rest split-string)) )))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 102, "code": "(fn ff[s]\n  (apply str \n    (remove #(= \\- %)\n      (clojure.string/replace s #\"-[a-z]\" #(.toUpperCase %1)))))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 102, "code": "(fn [s]\n  (letfn [(capitalize [[head & tail]]\n            (apply str (cons (clojure.string/upper-case head) tail)))]\n    (#(apply str (cons (first %) (map capitalize (rest %)))) (clojure.string/split s #\"-\"))))", "user": "58db362be4b0a4d5acaab675"}, {"problem": 102, "code": "(fn [x]\n   (clojure.string/replace x #\"-(\\w)\"\n                            #(clojure.string/upper-case (second %1))))", "user": "59385840e4b02506e01a29c9"}, {"problem": 102, "code": "(fn [strV] \n  (let [[first & rest] (clojure.string/split strV #\"-\")] \n        (str first (apply str (map clojure.string/capitalize rest)))))", "user": "5047782ce4b0371827a27bc2"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (str (first words) \n         (reduce #(str %1 (clojure.string/capitalize %2)) \n                 \"\" \n                 (rest words)))))", "user": "57a4f5cae4b0a966079561f0"}, {"problem": 102, "code": "(fn [n] (clojure.string/replace n #\"[-][a-z]\" #(str (second (clojure.string/upper-case %1)))))", "user": "59368efbe4b02506e01a297d"}, {"problem": 102, "code": "(fn [s]\n  (let [tmps (clojure.string/split s #\"-\")]\n    (clojure.string/join \"\" (conj (map clojure.string/capitalize (rest tmps)) (first tmps)))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 102, "code": "(fn [s]\n\t\t(loop [ans (str (first (clojure.string/split s #\"-\"))) lst (rest (clojure.string/split s #\"-\"))]\n\t\t\t(if (empty? lst)\n\t\t\t\tans\n\t\t\t\t(recur (str ans (clojure.string/capitalize (first lst))) (rest lst)))))", "user": "59368ccae4b02506e01a2979"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-\\w\" #(-> % second clojure.string/upper-case)))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 102, "code": "(fn [s]\n  (let [[w & ws] (clojure.string/split s #\"-\")]\n    (clojure.string/join (cons w (map clojure.string/capitalize ws)))))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 102, "code": "(fn [s] \n  (apply str (first (clojure.string/split s #\"-\")) (map clojure.string/capitalize (rest (clojure.string/split s #\"-\")))))", "user": "59369515e4b02506e01a297e"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "592518e8e4b072a2710fce67"}, {"problem": 102, "code": "(fn [s]\n  (apply str\n       (interleave\n                   (clojure.string/split s #\"-\\w\")\n                   (concat (map #(clojure.string/upper-case (second %)) (re-seq #\"-\\w\" s)) [nil] ))))", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-[a-z]\" (comp clojure.string/upper-case last))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 102, "code": "(fn [s]\n  (let [strs (clojure.string/split s #\"-\")]\n    (clojure.string/join (concat (first strs) (map clojure.string/capitalize (rest strs))))))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 102, "code": "#(clojure.string/join \n      (cons  (first (clojure.string/split % #\"-\")) \n            (map clojure.string/capitalize (rest (clojure.string/split % #\"-\")))\n            )\n                        \n      )", "user": "592518cde4b072a2710fce66"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[a b]] (clojure.string/capitalize b)))", "user": "59251947e4b072a2710fce69"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 102, "code": "(fn [s] \n  (clojure.string/replace s #\"-(.)\" (fn [[_ m]] (clojure.string/upper-case m))))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-(.)\" #(.toUpperCase (%1 1))))", "user": "55c4e30be4b0e31453f649a6"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(.)\" #(.toUpperCase (% 1))))", "user": "5935b010e4b04f87174def55"}, {"problem": 102, "code": "(fn camelize [s]\n  (if (empty? s)\n    \"\"\n    (if (= (first s) \\-)\n      (str (clojure.string/upper-case (second s)) (camelize (rest (rest s))))\n      (str (first s) (camelize (rest s)))\n      )\n    )\n  )", "user": "562add6de4b00e49c7cb4834"}, {"problem": 102, "code": "(fn __ [st]\n  (let [\n        splitted (clojure.string/split st #\"\\-\")\n        upcased (cons (first splitted) (map clojure.string/capitalize (rest splitted)))\n        ]\n    (clojure.string/join upcased))\n  )", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 102, "code": "#(clojure.string/replace \n  % \n  #\"(-)([a-zA-Z])\" \n  (comp clojure.string/upper-case last))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 102, "code": "(fn spooky [s]\n  (clojure.string/replace s #\"-[a-z]\" #(str (clojure.string/upper-case (last %1)))))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 102, "code": "(fn [s]\n  (let [xs (clojure.string/split s #\"\\-\")]\n    (if (= 1 (count xs))\n      s\n      (apply str\n             (first xs)\n             (map #(str (clojure.string/upper-case (subs % 0 1)) (subs % 1)) (rest xs))))))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 102, "code": "(fn [in-str]\n  (let [words (clojure.string/split in-str #\"-\")\n        first-word (first words)\n        last-words (rest words)]\n  (str first-word (clojure.string/join \"\" (map clojure.string/capitalize last-words))))\n    )", "user": "5658d775e4b00d3155796114"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (cons (first words) (map clojure.string/capitalize (rest words))))\n  )\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 102, "code": "#(let [kata (clojure.string/split % #\"-\")]\n   (str (first kata)\n        (apply str (map clojure.string/capitalize (drop 1 kata)))))", "user": "593910eae4b02506e01a29f4"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-w|-k\" {\"-w\" \"W\" \"-k\" \"K\"})", "user": "59390a35e4b02506e01a29f3"}, {"problem": 102, "code": "(fn [snake] (clojure.string/replace snake #\"-([a-z])\" #(clojure.string/upper-case (second %))))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 102, "code": "(fn [ss]\n(-> ss\n  (clojure.string/replace #\"-[a-z]\" #(.toUpperCase %))\n  (clojure.string/replace #\"-\" \"\")))", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 102, "code": "(fn [s]\n  (apply str (remove #(= % \\-) (map #(if (= %2 \\-) (Character/toUpperCase %1) %1) s (cons \\x s)))))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 102, "code": "(fn solution102\n  [s]\n  (let [aux (clojure.string/split s #\"-\")\n        aux (map clojure.string/capitalize aux)]\n    (if (<= (count aux) 1)\n      s\n      (str (clojure.string/lower-case (first aux)) (clojure.string/join \"\" (rest aux))))))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 102, "code": "(fn [word]\n\t(let [newWord (clojure.string/split word #\"-\")]\n\t\t(->> (rest newWord)\n\t\t\t (map clojure.string/capitalize)\n\t\t\t (cons (first newWord))\n\t\t\t (apply str))))", "user": "5935151ee4b072a2710fd084"}, {"problem": 102, "code": "#(case (first %) \\m \"multiWordKey\" %)", "user": "4fb1d7ace4b081705acca281"}, {"problem": 102, "code": "(fn multi-word-key [k]\n  (let [l (clojure.string/split k #\"-\")]\n    (clojure.string/join (cons (first l) (map clojure.string/capitalize (rest l))))))", "user": "587ee260e4b052da650a6353"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace\n    s\n    #\"-(\\w)\"\n    #(.toUpperCase (second %))))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 102, "code": "(fn [x]\n  (let [splits (clojure.string/split x #\"-\")\n        stay (first splits)\n        caps (next splits)]\n        \n  (str stay\n    (apply str\n    (map #(str (clojure.string/upper-case (first %)) (subs % 1)) caps)))))", "user": "593744abe4b02506e01a299b"}, {"problem": 102, "code": "(fn camelize [s]\n  (let [words (clojure.string/split s #\"-\")\n        upcase-words (map #(let [first-l (.toUpperCase (str (first %)))]\n                             (str first-l (subs % 1))) words)]\n    (clojure.string/join (concat (first words) (drop 1 upcase-words)))))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 102, "code": "(fn [x] (\n           #(clojure.string/join (concat (first %) (map clojure.string/capitalize (rest %))))\n           (clojure.string/split x #\"-\"))\n         )", "user": "596f6683e4b069c0a1a19877"}, {"problem": 102, "code": "(fn [s]\n    (let [splitted (clojure.string/split s #\"-\")]\n(apply str (first splitted) (map #(apply str (clojure.string/upper-case (first %)) (rest %)) (rest splitted)))))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-([a-z])\" (comp clojure.string/upper-case second))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 102, "code": "(fn [w] (clojure.string/replace w #\"(-)(\\w)\" #(.toUpperCase (%1 2))))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 102, "code": "(fn [text]\n    (let [tokens (clojure.string/split text #\"-\")]\n      (apply str (concat [(first tokens)] (map #(clojure.string/capitalize %) (rest tokens))))  \n    )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 102, "code": "(fn [s]\n  (-> s \n    (clojure.string/split #\"-\")\n    (->> (map-indexed\n           #(if (= %1 0)\n              %2\n              (let [chrs (map str %2)]\n                (clojure.string/join\n                  \"\" (into [(.toUpperCase (first chrs))] (rest chrs))))))\n      (clojure.string/join \"\"))))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 102, "code": "(fn[s]\n        (let [[ft & rt] (clojure.string/split s #\"\\-\")]\n          (str ft (apply str (map clojure.string/capitalize rt)))))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 102, "code": "(fn [key]\n  (let [[x & xs] (re-seq #\"\\w+\" key)]\n    (apply str x (map #(apply str (clojure.string/upper-case (first %)) (rest %)) xs))))", "user": "59a72effe4b066c664927d94"}, {"problem": 102, "code": "(fn [s]\n   (->> (clojure.string/split s #\"-\")\n        (reduce #(apply str (concat [% (clojure.string/upper-case (first %2))] (rest %2))))))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 102, "code": "(fn upper-case [s] (letfn [(capitalize-first [w] \n (apply str (.toUpperCase (str (first w))) (rest w)))]\n (let [words (clojure.string/split s #\"-\")]                  \n (apply str (first words) (map capitalize-first (rest words)))                \n )                    \n))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 102, "code": "(fn f [xs]\n    (let [x (clojure.string/split xs #\"-\")\n          f (first x)\n          r (->> (rest x)\n                 (map clojure.string/lower-case)\n                 (map clojure.string/capitalize))]\n      (clojure.string/join (concat f r)))\n    )", "user": "596d630ae4b069c0a1a19846"}, {"problem": 102, "code": "#(let [xs (clojure.string/split % #\"-\")]\n     (str (first xs) (apply str (map clojure.string/capitalize (rest xs)))))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 102, "code": "(fn convertToCamel [s]\n  ((fn convert [s acc]\n     (if (empty? s)\n       (apply str acc)\n       (let [f (first s)\n             c (= \\- f)\n             new-s (if c (drop 2 s) (rest s))\n             new-acc (conj acc (if c (clojure.string/upper-case (second s)) f))]\n         (recur new-s new-acc)))) (seq s) []))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 102, "code": "(fn[v](let [s (re-seq #\"\\w+\" v)] (apply str (first s) (map #(clojure.string/join (cons (Character/toUpperCase (first %)) (rest %))) (rest s)))))", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 102, "code": "(fn name [s]\n  (let [words (re-seq #\"[a-zA-Z]+\" s)\n        words (cons (first words)\n                    (map clojure.string/capitalize (rest words)))]\n    (apply str words)))\n;; best answer", "user": "59358f74e4b04f87174def52"}, {"problem": 102, "code": "(fn [s]\n  (let [[h & t] (clojure.string/split s #\"-\")]\n    (apply str h\n           (map clojure.string/capitalize t))))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 102, "code": "#(reduce (fn [r s]\n  (str r (clojure.string/upper-case (first s)) (clojure.string/join (rest s))))\n(clojure.string/split % #\"-\"))", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 102, "code": "(fn [w] (clojure.string/replace w #\"-.\" #(.toUpperCase (str (second %1)))))", "user": "59ddae03e4b01968742fed65"}, {"problem": 102, "code": "(fn [s]\n     (-> (clojure.string/split s #\"-\")\n         ((fn [[s & r]] \n            (reduce #(str % (clojure.string/capitalize %2)) s r)))))", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 102, "code": "(fn [hyphenated]\n  (reduce (fn [camel word]\n            (str camel (clojure.string/capitalize word)))\n          (re-seq #\"\\w+\" hyphenated)))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 102, "code": "(fn  [s]\n (let [[x & xs] (#(clojure.string/split % #\"-\") s)]\n   (if (empty? xs)   x\n      (str x (clojure.string/join (map clojure.string/capitalize xs))))))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 102, "code": "(fn toCamel [s]\n  (clojure.string/replace\n    s\n    #\"-(\\w)\"\n    #(clojure.string/upper-case (nth % 1))))", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 102, "code": "(fn [s]\n   (clojure.string/replace s #\"-\\w\" #(clojure.string/upper-case (subs % 1))))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")]\n   (str (first words)\n        (apply str (map clojure.string/capitalize (rest words)))))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 102, "code": "#(let [splitString (clojure.string/split % #\"-\")]\n  (apply str (first splitString) (map clojure.string/capitalize (rest splitString))))", "user": "571172ece4b09c608db70446"}, {"problem": 102, "code": "(fn [s]\n  (->> s\n       (re-seq #\"\\w+\")\n       (map-indexed #(if-not (zero? %1) \n                       (clojure.string/capitalize %2) \n                       %2))\n       (apply str)))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 102, "code": "#(let [x (clojure.string/split % #\"-\")]\n   (apply str (first x) (map (fn [e] (apply str (first (.toUpperCase e)) (rest e))) (rest x))))", "user": "59fedc26e4b01bb0ae8afd17"}, {"problem": 102, "code": "(fn s2c [s]\n (clojure.string/replace\n  s #\"-([a-z])\" #(.toUpperCase (% 1))))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 102, "code": "(fn [s]\n  (let [split (clojure.string/split s #\"-\")]\n    (clojure.string/join (cons (first split) (map clojure.string/capitalize (rest split))))))", "user": "5a0c822fe4b04bbd27e6d9b0"}, {"problem": 102, "code": "(fn [s]\n  (let [[f & r] (clojure.string/split s #\"-\")]\n    (apply str f (map #(clojure.string/capitalize %) r))))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 102, "code": "(fn [x]\n  (let [elems (clojure.string/split x #\"-\")]\n    (apply str (first elems) (map clojure.string/capitalize (rest elems)))))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 102, "code": "(fn [s]\n  (let [[f & r] (clojure.string/split s #\"-\")\n         rs (map #(vector (clojure.string/upper-case (first %)) (rest %)) r)]\n   (apply str (flatten [f rs]))))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 102, "code": "(fn [st] \n  (clojure.string/replace st #\"-(\\w+)\" (fn [[a b]] (clojure.string/capitalize b))))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 102, "code": "(fn [s] (clojure.string/join \n     (map #(apply (partial str ({\\w \\W \\m \\m \\k \\K \\s \\s \\l \\l} (first %))) (rest %)) \n          (clojure.string/split s #\"-\"))))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 102, "code": "(fn [s]\n  (let [x (.split s \"-\")]\n    (apply str (cons (first x) (map clojure.string/capitalize (rest x))))))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 102, "code": "(fn [s] \n    (-> s\n      (clojure.string/split #\"-\")\n       (->> (map-indexed #(if (> %1 0)\n                           (clojure.string/capitalize %2)\n                           %2)))\n\n      clojure.string/join))", "user": "5a18488ee4b0ff51aa4b31e5"}, {"problem": 102, "code": "(fn[src] (clojure.string/replace src #\"-\\w\"  #(clojure.string/upper-case (last %1))))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-.\" (comp clojure.string/upper-case last))", "user": "59f91b99e4b0ca45a743a33a"}, {"problem": 102, "code": "(fn __ [s]\n  (clojure.string/replace s #\"-\\w\" #(.toUpperCase (subs % 1))))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 102, "code": "(fn [s] (letfn [(tvec [ss] (vec ss)  )\n                (stp [erg t rst] (if (first rst)\n                      (if t \n                         (recur (conj erg \n                            (clojure.string/upper-case (first rst))) \n                                false (rest rst)  )\n                         (if (= \\- (first rst)) \n                             (recur erg true (rest rst) )\n                             (recur (conj erg (first rst)) false (rest rst) )\n                         )\n                      )\n                      erg\n                     ))]\n           (reduce str (stp [] false (tvec s) ))\n        )\n )", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 102, "code": "(fn [x] \n  (->> (clojure.string/split x #\"-\")\n       ((fn [xs] \n           (into [(first xs)] \n                 (map (fn [y] (clojure.string/capitalize y)) (rest xs)))))\n        (clojure.string/join)))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 102, "code": "#(let [w (clojure.string/split % #\"-\")]\n  (apply\n    str\n    (first w)\n    (map\n      clojure.string/capitalize\n      (rest w))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 102, "code": "#(clojure.string/replace % \"multi-word-key\" \"multiWordKey\")", "user": "5416aacce4b01498b1a719ff"}, {"problem": 102, "code": "(fn [s]\n    (let [splits (clojure.string/split s #\"-\")]\n         (apply str (cons (first splits) (map clojure.string/capitalize (rest splits))))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 102, "code": "(fn intoCC\n  ([words]\n  (clojure.string/join (intoCC words true)))\n  ([words & args]\n    (if (> (count words) 0)\n      (if (= (str (first words)) \"-\")\n        (cons (clojure.string/upper-case (second words)) (intoCC (rest (rest words)) false))\n        (cons (first words) (intoCC (rest words) false)))\n      '())))", "user": "5a3ef4d5e4b0447ef91cc5ba"}, {"problem": 102, "code": "(fn [string]\n  (let [[first-word & others] (clojure.string/split string #\"-\")]\n    (apply str (cons first-word (map clojure.string/capitalize others)))))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 102, "code": "(fn [k]\n   (clojure.string/replace k #\"-(\\w)\" #(.toUpperCase (% 1))))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 102, "code": "(fn [text]\n (let [[head & tail] (clojure.string/split text #\"-\")]\n  (str head (apply str (map clojure.string/capitalize tail)))))", "user": "590b8607e4b047aa04b199db"}, {"problem": 102, "code": "#(let [ws (clojure.string/split % #\"-\")\n       t (map (fn [s] (str (clojure.string/upper-case (subs s 0 1)) (subs s 1))) (rest ws))]\n       (str (first ws) (apply str t)))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 102, "code": "(fn into-camel-case [s]\n  (let [[f & r] (clojure.string/split s #\"-\")]\n    (reduce #(str % (clojure.string/capitalize %2)) f r)))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(.)\" (fn [[_ a]] (clojure.string/upper-case a))))", "user": "52c5c1c8e4b0c2d177d620fc"}, {"problem": 102, "code": "(fn into-came-case\n  [s]\n  (let [s (clojure.string/split s #\"-\")]\n    (if (= 1 (count s))\n      (apply str s)\n      (apply str (first s) (map #(apply str (clojure.string/upper-case (first %)) (rest %)) (rest s))))))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")\n        ucfirst (fn [s] (str (clojure.string/upper-case (first s)) (.substring s 1)))]\n    (apply str (cons (first words) (map ucfirst (rest words))))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 102, "code": "#(let [xs (clojure.string/split % #\"-\")]\n    (apply str (first xs)\n         (map clojure.string/capitalize (rest xs))))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-\\w\" (fn [[x y]] (clojure.string/capitalize y))))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(.)\" #(clojure.string/upper-case (% 1))))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 102, "code": "(fn replstr [xs]\n    (if (.contains xs \"-\")\n       (let [z (.indexOf xs \"-\") ]\n          (replstr (str (subs xs 0 z) (clojure.string/upper-case  (.charAt xs (inc z))) (subs xs (inc (inc z)) (.length xs)) ))\n        )\n       xs\n      )\n  )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 102, "code": "(fn f \n  ([s] (f s []))\n  ([s r] (if (empty? s) \n           (apply str r) \n           (recur (if\n                    (= \\- (first s))\n                    (drop 2 s)\n                    (rest s))\n                  (if\n                    (= \\- (first s))\n                    (conj r (clojure.string/upper-case (nth s 1)))\n                    (conj r (first s)))\n                  ))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 102, "code": "#(let [xs (clojure.string/split (name %) #\"-\")]\n    (apply str (first xs)\n           (map clojure.string/capitalize\n                (rest xs))))", "user": "5785de43e4b0ebec4cfb74e5"}, {"problem": 102, "code": "(fn\n  [s]\n  (let [strings (clojure.string/split s #\"-\")\n        uppercase-strings (map clojure.string/capitalize (rest strings))]\n    (clojure.string/join (concat [(first strings)]\n                                 uppercase-strings))))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 102, "code": "(fn [s]\n  (let [[f & r] (clojure.string/split s #\"-\")]\n    (->> r\n         (map clojure.string/capitalize)\n         (cons f)\n         (apply str))))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 102, "code": "(fn cap [x]\n (->> (clojure.string/split x #\"-\")\n      (map (fn [i word]\n            (if (= i 0) \n             word\n             (let [[head & rst] word]\n              (apply str (Character/toUpperCase head) rst))))\n           (range))\n      (apply str)))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 102, "code": "(fn [s]\n    (let [capitalize  (fn [a-str]\n                        (apply str (.toUpperCase (str (first a-str)))\n                                   (rest a-str)))\n          word-chunks (clojure.string/split s #\"-\")]\n      (apply str (first word-chunks) (map capitalize (rest word-chunks)))))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 102, "code": "(fn toCamelCase [s]\n  (let [arr (clojure.string/split s #\"-\")] \n    (apply str (first arr) (map clojure.string/capitalize (rest arr)))))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 102, "code": "(fn camelcase [s]\n  (reduce\n   #(str %1 (clojure.string/capitalize %2))\n   (clojure.string/split s #\"-\")))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 102, "code": "(fn camel [w] (clojure.string/replace \n                w\n                #\"-(\\w)\"\n                #(.toUpperCase (second %))))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[_ a]] (.toUpperCase a)))", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 102, "code": "(fn ->camel-case [s]\n  (clojure.string/replace s #\"-([a-z])\" #(clojure.string/upper-case (second %1))))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 102, "code": "(fn intoCamelCase [foo-bar]\n  (let [fb (clojure.string/split foo-bar #\"-\")]\n    (clojure.string/join (cons (first fb) (map clojure.string/capitalize (rest fb))))))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 102, "code": "(fn [x]\n  (let [y (map read-string(.split x \"-\")) s(partial apply str) z (first y)]\n    (if (= 1 (count y))\n      (s y)\n      (str z (s(map #(clojure.string/capitalize %)(rest y)))))))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 102, "code": "#(let [ws (clojure.string/split % #\"-\")]\n  (apply str (cons (first ws) (map clojure.string/capitalize (rest ws)))))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 102, "code": "(fn camel [s]\n    (let [[first & rest] (clojure.string/split s #\"-\" -1)]\n        (clojure.string/join\n            \"\"\n            (concat [first] (map clojure.string/capitalize rest)))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 102, "code": "(fn [kebab-string]\n  (let [kebab-split (clojure.string/split kebab-string #\"-\")]\n  (reduce str (cons (first kebab-split) (map clojure.string/capitalize (rest kebab-split))))) )", "user": "59fa0bb6e4b0ca45a743a352"}, {"problem": 102, "code": "(fn [s]\n  (reduce str (#(cons (first %) (map (fn [x] (clojure.string/capitalize x)) (rest %))) (clojure.string/split s #\"-\"))))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 102, "code": "(fn [s]\n   (let [str-seq (re-seq #\"[^-]+\" s)]\n     (if (empty? (rest str-seq))\n       (apply str str-seq)\n       (apply str (reduce #(conj %1 (clojure.string/capitalize %2)) [(first str-seq)] (rest str-seq))))))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 102, "code": "(fn [x] (clojure.string/replace x #\"-(\\w)\" #(clojure.string/upper-case (% 1))))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 102, "code": "#(let [[f & r] (clojure.string/split % #\"-\")]\n  (clojure.string/join \n   (cons f (map clojure.string/capitalize r))))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 102, "code": "#(let [[f & r] (re-seq #\"\\w+\" %)]\n   (apply str f (map clojure.string/capitalize r)))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 102, "code": "(fn [s]\n  (let [substrings (clojure.string/split s #\"-\")]\n    (apply (partial str (first substrings))\n           (map clojure.string/capitalize (rest substrings)))))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 102, "code": "(fn\n  [x]\n  (let\n   [split (clojure.string/split x #\"-\")]\n   (apply\n    str\n    (first split)\n    (map clojure.string/capitalize (rest split)))))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 102, "code": "#(let [[c & cs] (clojure.string/split % #\"-\")]\n   (apply str (cons c (map clojure.string/capitalize cs))))", "user": "4ed45563535d10e5ff6f52c9"}, {"problem": 102, "code": "(fn [string]\n  (letfn [(toUpperFirstChar [word]\n            (str (.toUpperCase (subs word 0 1)) (subs word 1)))\n          (split-on-hyphens [word] (->> (partition-by  #(= \\- %) word)\n                                        (filter #((complement =) '(\\-) %))\n                                        (map #(apply str %))))]\n    (let [word-seq (split-on-hyphens string)]\n      (str (first word-seq) (apply str (map toUpperFirstChar (rest word-seq)))))))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 102, "code": "(fn\n  [s]\n  (if (some #{\\-} s)\n    (reduce #(str %1 (clojure.string/capitalize %2)) (clojure.string/split s #\"-\"))\n    s))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 102, "code": "(fn [string]\n  (let [str-seq (seq string)]\n    (->> (map (fn [c1 c2]\n                (if (= c2 \\-)\n                  (clojure.string/capitalize c1)\n                  c1))\n              str-seq\n              (cons nil str-seq))\n         (remove #{\\-})\n         (apply str))))", "user": "4eda7cc3535d10e5ff6f530e"}, {"problem": 102, "code": "(fn to-camel-case [string]\n  (let [[fst & rst] (clojure.string/split string #\"-\")]\n    (apply str fst (map clojure.string/capitalize rst))))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))))", "user": "586d2f5be4b01531a375e98c"}, {"problem": 102, "code": "(fn cs5 [x]\n  (let [v (clojure.string/split x #\"-\")\n        words (cons (first v)\n                    (map clojure.string/capitalize (rest v)))]\n    (apply str words)))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 102, "code": "(fn [x]\n  (clojure.string/replace x #\"\\-(\\w)\" #(clojure.string/upper-case (%1 1))))", "user": "575683aee4b02ea1147992dc"}, {"problem": 102, "code": "(fn __ [s]\n  (->> (clojure.string/split s #\"-\")\n       (#(cons (apply str (cons (clojure.string/lower-case (first (first %1))) (rest (first %1)))) (map clojure.string/capitalize (rest %1))))\n       (clojure.string/join))\n)", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 102, "code": "(fn [s]\n  (let [[head & tail] (re-seq #\"\\w+\" s)]\n    (->> tail\n         (map clojure.string/capitalize)\n         (cons head)\n         (apply str))))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 102, "code": "(fn hyphen->camel [s]\n  (let [s (re-seq #\"\\w+\" s)]\n    (apply str (first s) (map clojure.string/capitalize (rest s)))))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 102, "code": "(fn [string]\n  (let [[x & xs] (clojure.string/split string #\"-\")]\n    (apply str x (map clojure.string/capitalize xs))))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 102, "code": "(fn [x]\n  (clojure.string/replace x\n             #\"-(.)\"\n             #(clojure.string/upper-case (second %))))", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str\n      (conj\n        (map \n          (fn [w] (apply str (Character/toUpperCase (first w)) (rest w)))\n          (rest words))\n       (first words)))))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 102, "code": "(fn [s]\n    (let [[f* & s*] (clojure.string/split s #\"-\")]\n      (->> (map (fn [[f & r]]\n                  (apply str (clojure.string/upper-case f) r)) s*)\n           (apply str f*))))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 102, "code": "(fn camel-case [s]\n  (let [[a & b] (clojure.string/split s #\"[-\\s]+\")]\n    (clojure.string/join\n     \"\"\n     (cons a (map clojure.string/capitalize b)))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 102, "code": "(fn [full-word]\n  (let [[first-word & rest-words] \n        (clojure.string/split full-word #\"-\")]\n    (clojure.string/join \n     \"\" \n     (conj (map clojure.string/capitalize rest-words) first-word))\n    ))", "user": "5ac6bbe3e4b0e27600da7776"}, {"problem": 102, "code": "(fn \n  [string]\n  (let [words (clojure.string/split string #\"-\")]\n    (str (first words) (apply str (map clojure.string/capitalize (rest words))))))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 102, "code": "(fn [str]\n  (let [\n        words (clojure.string/split str #\"-\")\n        fst (first words)\n        rst (rest words)]\n  (clojure.string/join (cons fst (map clojure.string/capitalize rst)))))", "user": "588e4e05e4b00487982d5188"}, {"problem": 102, "code": "(fn [s]\n  (let [[word & words] (clojure.string/split s #\"-\")]\n    (clojure.string/join (conj (map clojure.string/capitalize words) word))))\n\n;; capitalize as above passes the tests but IMO does not accurately fulfill the specification\n;; since it will mangle acronyms like 'get-FBI-docs' into 'getFbiDocs'\n;; below is my hand-implement capitalization function, which for some reason\n;; causes the unit tests to fail, even though in a local repl it produces the correct behavior\n#_(fn [w]\n  (let [[c cs] (clojure.string/split w #\"\" 2)] \n    (str (clojure.string/upper-case c) cs)))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-.\" #(clojure.string/upper-case (second %))))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 102, "code": "(fn __ [s]\n  (let [ss (clojure.string/split s #\"-\")\n      f (first ss)\n      r (rest ss)\n      rc (map clojure.string/capitalize r)]\n    (apply str (concat f rc))))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(.)\" #(.toUpperCase (%1 1))))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 102, "code": "(fn [s]\n    (letfn [(title-case [s]\n              (let [ss (map #(-> % identity str) s)]\n                (apply str (cons (clojure.string/capitalize (first ss))\n                                 (rest ss)))))]\n      (let [tokens (clojure.string/split s #\"-\")]\n        (apply str (cons (first tokens) (map title-case (rest tokens)))))))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 102, "code": "(fn [input-str]\n  (let [string-seq (clojure.string/split input-str #\"-\")]\n    (if (= 1 (count string-seq))\n      input-str\n      (let [first-word (first string-seq)\n            rest-words (map #(clojure.string/capitalize %) (rest string-seq))]\n        (clojure.string/join (cons first-word rest-words))))))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-(.)\" #(clojure.string/upper-case (%1 1))))", "user": "5af4446de4b0cc2b61a3bc93"}, {"problem": 102, "code": "(fn [s]\n      (reduce #(str %1 (clojure.string/capitalize %2)) (clojure.string/split s #\"-\")))", "user": "505fd903e4b08f2a82ad10b7"}, {"problem": 102, "code": "(fn [w]\n  (let [[first & rest] (clojure.string/split w #\"-\")]\n    (apply str (cons first (map clojure.string/capitalize rest)))))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (first words) (map clojure.string/capitalize (rest words)))))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 102, "code": "(fn [s]\n  (let [r (clojure.string/split s #\"-\")\n        t (map #(clojure.string/capitalize %) r)]\n    (apply str (cons (first r) (rest t)))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 102, "code": "(fn [s]\n  (let [[x & y] (clojure.string/split s #\"-\")\n        z (map clojure.string/capitalize y)]\n    (apply str x z)))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 102, "code": "#(let [v (clojure.string/split % #\"-\")]\n        (apply str (cons (first v) (map clojure.string/capitalize (rest v)))))", "user": "55e732c5e4b050e68259b492"}, {"problem": 102, "code": "(fn [s]\n  (->> s\n    (#(clojure.string/split % #\"-\"))\n    (map-indexed (fn [x y] (if (= x 0) y (clojure.string/capitalize y))))\n    (clojure.string/join)))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 102, "code": "#(let [spl (clojure.string/split % #\"-\")]\n   (if (= (count spl) 1)\n      (first spl)\n      (str (first spl) (clojure.string/join (map clojure.string/capitalize (rest spl))))))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 102, "code": "(fn intoCamelCase\n  [kata]\n  (let [bentukVektor (-> kata (clojure.string/split #\"-\")), \n        bentukKapital (-> (map #(clojure.string/capitalize %) (rest bentukVektor)))]\n    ( apply str (cons (first bentukVektor) bentukKapital))))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 102, "code": "(fn [s]\n  (let [parts (re-seq #\"\\w+\" s)]\n(apply str (first parts) (map clojure.string/capitalize (rest parts)))))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 102, "code": "(fn [x] (let [words (clojure.string/split x #\"-\")] (str (first words) (apply str (map clojure.string/capitalize (drop 1 words))))))", "user": "5b0d72e5e4b0cc2b61a3bdf8"}, {"problem": 102, "code": "(fn [s]\n  (let [s (clojure.string/split s #\"-\")]\n    (apply str (cons (first s) (map clojure.string/capitalize (next s))))))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 102, "code": "(fn intoCamelCase\n  [word]\n  (let [tokens      (clojure.string/split word #\"-\")\n        first-word  (first tokens)\n        capitalized (map clojure.string/capitalize (rest tokens))\n        t           (clojure.string/join capitalized)]\n    (str first-word t)))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 102, "code": "(fn to-camel [s]\n    (let [[h & words] (clojure.string/split s #\"-\")]\n        (apply str h (map clojure.string/capitalize words))))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 102, "code": "(fn [s]\n (let [x (.split s \"-\")]\n  (if (< 1 (count x))\n   (clojure.string/join\n    (concat (first x)\n     (map clojure.string/capitalize (rest x))))\n   (clojure.string/join x))))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/join (#(cons (first %) (map clojure.string/capitalize (rest %))) (clojure.string/split s #\"-\")))\n  \n  )", "user": "583048d9e4b051871117c007"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 102, "code": "(fn cc[name]\n  (let [seperated (clojure.string/split name #\"-\")\n        caps (doall (map clojure.string/capitalize (rest seperated)))]\n    (apply str (first seperated) caps)))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 102, "code": "(fn into-camel-case [s]\n  (let [splitted (clojure.string/split s #\"-\")]\n    (reduce str\n      (concat\n        (first splitted)\n        (->> splitted\n          rest\n          (map (fn [x] (str (clojure.string/upper-case (first x)) (reduce str (rest x))))))))))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 102, "code": "(fn to-camel [s]\n  (let [ss (clojure.string/split s #\"-\")\n        cap (map clojure.string/capitalize (next ss))]\n    (clojure.string/join (cons (first ss) cap))))", "user": "5b13ba71e4b0cc2b61a3be53"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")\n        f (first words)\n        r (map clojure.string/capitalize (rest words))]\n    (clojure.string/join \"\" (cons f r))))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s\n                                #\"\\-[a-z]\"\n                                #(->> (subs % 1)\n                                      (clojure.string/upper-case))))", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 102, "code": "(fn [s]\n       (let [toUpper\n             {\\a \\A \\b \\B \\c \\C \\d \\D \\e \\E \\f \\F \\g \\G \\h \\H \\i \\I \\j \\J \\k \\K \\l \\L \\m \\M\n              \\n \\N \\o \\O \\p \\P \\q \\Q \\r \\R \\s \\S \\t \\T \\u \\U \\v \\V \\w \\W \\x \\X \\y \\Y \\z \\Z}\n              words\n             (->> (partition-by #(= \\- %) s)\n                  (map #(apply str %))\n                  (remove #(= \"-\" %)))]\n         (apply str (first words)\n                (map #(str (toUpper (first %)) (subs % 1)) (rest words)))))", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 102, "code": "(fn [s]\n(let [words (clojure.string/split s #\"-\")\n      firstWord (first words)\n      restWords (->> words rest (map clojure.string/capitalize))]\n      (apply str firstWord restWords)))", "user": "59924289e4b0866487ed0d76"}, {"problem": 102, "code": "(fn to-camel-case [st]\n  (let [[word rst] (split-with (partial not= \\-) st)]\n    (apply str\n           (if (empty? rst)\n             word\n             (concat word\n                     (to-camel-case (clojure.string/capitalize (apply str (rest rst)))))))))", "user": "5ab5f60be4b073f177442643"}, {"problem": 102, "code": "(fn into-cc [s]\n  (reduce #(apply str (concat %1 (clojure.string/capitalize %2)))\n          (clojure.string/split s #\"-\")))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 102, "code": "(fn [word]\n  (loop [beg \"\" end word up false]\n    (println beg end up)\n    (if (= 0 (count end))\n      beg\n      (if up\n        (recur (str beg (clojure.string/capitalize (first end))) (subs end 1) false)\n        (if (= (first end) \\-)\n          (recur beg (subs end 1) true)\n          (recur (str beg (first end)) (subs end 1) false)\n        )\n      )\n    )\n  )\n)", "user": "5b4b58f2e4b02d533a91bc9c"}, {"problem": 102, "code": "(fn [s]\n  (if (some #{\\-} s)\n    (let [split (clojure.string/split s #\"-\")\n          camel (cons (first split) \n                      (map clojure.string/capitalize (rest split)))]\n      (clojure.string/join camel))\n    s))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-([a-z])\" #(.toUpperCase (%1 1))))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 102, "code": "(fn [s]\n  (let [v (vec s) dash (fn [i] (and (>= i 0) (= (nth v i) \\-)))]\n    (apply str (map\n                (fn [i] (if\n                          (dash i)\n                          \"\"\n                          (let [ch (nth v i)]\n                            (if (-> i dec dash) (Character/toUpperCase ch) ch))))\n                (-> v count range)))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 102, "code": "(fn dashed-to-camel [s]\n  (let [[h t] (split-at 1 (clojure.string/split s #\"-\"))]\n    (clojure.string/join (concat h (map clojure.string/capitalize t)))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"\\-\\w\" #(.toUpperCase (str (second %)))))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 102, "code": "(fn [x]\n  (let [p (clojure.string/split x #\"-\")]\n    (clojure.string/join \"\" (into (vector (first p)) (map clojure.string/capitalize (rest p))))\n    ))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 102, "code": "#(let [x (clojure.string/split % #\"-\")]\n   (apply str ( cons (first x) (map clojure.string/capitalize (rest x))))\n   \n   )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 102, "code": "#(let [ws (clojure.string/split (clojure.string/replace % #\"-([a-z])\" \" $1\" ) #\" \")]\n    (if (and (not-empty ws) (> (count ws) 1)) (apply str (cons (first ws) (map clojure.string/capitalize (rest ws)))) (apply str ws)))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 102, "code": "#(let [els (clojure.string/split % #\"-\")] (apply str (cons (first els) (map clojure.string/capitalize (rest els)))))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 102, "code": "(fn [strn] (clojure.string/replace strn #\"-.\" #(.toUpperCase (subs %1 1))))", "user": "5ae9d09de4b0cc2b61a3bbda"}, {"problem": 102, "code": "#(clojure.string/replace % #\"\\-.\" (comp clojure.string/upper-case last))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 102, "code": "(fn [s]\n  (let [[fst & rst] (clojure.string/split s #\"-\")]\n    (apply str fst (map clojure.string/capitalize rst))))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 102, "code": "(fn [s]\n    (let [[a & coll]\n          (clojure.string/split s #\"-\")]\n      (apply str\n             (cons a\n                   (map #(str (char (- (int (.charAt % 0)) 32)) (subs % 1)) coll)))))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 102, "code": "(fn[a]\n  (if(.contains a \"-\")\n    (let[b (.split a \"-\")\n         c (fn[aa](apply str (-> (first aa) (str) (.toUpperCase)) (drop 1 aa)))]\n      (loop\n        [res (first b)\n        remain (drop 1 b)]\n        (if(= (count remain) 0) res\n        (recur \n          (str res (c (first remain))) \n          (drop 1 remain))\n      ))\n    )\n    a\n  )\n)", "user": "5826a843e4b051871117befd"}, {"problem": 102, "code": "(fn [s]\n  (let [[fst & rst] (clojure.string/split s #\"-\")]\n    (->> rst\n         (map clojure.string/capitalize)\n         (cons fst)\n         (clojure.string/join))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 102, "code": "#(let [[first-part & more-parts] (.split % \"-\")]\n     (apply str (cons first-part (map clojure.string/capitalize more-parts))))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 102, "code": "(fn [st] (let [words (clojure.string/split st #\"-\" )]\n           (clojure.string/join (conj (map clojure.string/capitalize (rest words)) (first words) ))))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 102, "code": "(fn [s]\n  (let [[a & b] (re-seq #\"\\w+\" s)]\n    (clojure.string/join\n     \"\"\n     (cons a (map clojure.string/capitalize b)))))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-([a-zA-Z])\" (fn [[_ m]] (clojure.string/upper-case m)))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 102, "code": "(fn [str] \n  (clojure.string/replace str #\"-(\\w)\" #(clojure.string/upper-case (second %))))", "user": "5b3ef412e4b02d533a91bc06"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n   (reduce str (first words) (rest (map clojure.string/capitalize words))))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 102, "code": "(fn [string] \n  (->> (clojure.string/split string #\"-\")\n       (apply (fn [f & r] (apply concat f (map #(clojure.string/capitalize %) r))))\n       (apply str)))", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 102, "code": "(fn [field-name]\n  (->> (clojure.string/split field-name #\"-\")\n         (#(apply str (first %) (map clojure.string/capitalize (rest %))))))", "user": "52761edae4b03e8d9a4a74d4"}, {"problem": 102, "code": "(fn camelCase [text]\n  (let [split-words (clojure.string/split text #\"\\W\")\n        first-word (first split-words)\n        rest-words (rest split-words)]\n    (->>\n         (map \n           (fn [word] (concat \t(clojure.string/upper-case (first word))  (rest word)))\n           rest-words)\n        (apply concat first-word ,,,)\n        (apply str  ,,,))))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace \n         s \n         #\"-([a-z])\"  \n         (fn [[_ a]] (clojure.string/upper-case a))))", "user": "51000111e4b00d7ad4cab15e"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"(-)(\\w)\" #(.toUpperCase (%1 2))))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 102, "code": "(fn camel [string]\n(clojure.string/join \n  (cons\n  (first (clojure.string/split string #\"-\"))\n  (map #(clojure.string/capitalize %)\n    (rest (clojure.string/split string #\"-\"))))))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 102, "code": "(fn [e] (cond (= e \"something\") \"something\" (= e \"multi-word-key\") \"multiWordKey\" (= e \"leaveMeAlone\") \"leaveMeAlone\"))", "user": "59f4c9c8e4b0966464fe6ab8"}, {"problem": 102, "code": "(fn [s] (let [[x & xs] (.split s \"-\")]\n    (str x (apply str (mapcat #(cons (first (.toUpperCase %)) (rest %)) xs)))))", "user": "5b81139fe4b047b03b203782"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"(-)([a-z])\"\n    (fn [[_ _ l]] (clojure.string/upper-case l))))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 102, "code": "(fn [s]\n    (let [words (map vec (clojure.string/split s #\"-\"))]\n      (->> (rest words)\n           (map #(update-in % [0] (comp  clojure.string/upper-case str)))\n           (cons (first words))\n           (map #(apply str %))\n           (vec)\n           (apply str))))", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 102, "code": "(fn [txt]\n  (let [lst (clojure.string/split txt #\"-\")]\n    (apply str (first lst) (map clojure.string/capitalize (rest lst)))))", "user": "5b86462de4b047b03b2037df"}, {"problem": 102, "code": "#(let [[w1 & ws] (clojure.string/split % #\"-\")] (clojure.string/join (cons w1 (map clojure.string/capitalize ws))))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 102, "code": "(fn [s]\n   (->> s\n\n        (map (fn [current-char last-char]\n               (if (= last-char \\-)\n                 (first (clojure.string/upper-case current-char))\n                 current-char))\n             (drop 1 s))\n        (cons (first s))\n        (remove #{\\-})\n        (apply str)))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")]\n    (str (first words)\n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 102, "code": "(fn str->camel-case\n  [s]\n  (let [split-str\n        (clojure.string/split s #\"-\")\n\n        first-word\n        (first split-str)\n\n        rest-words\n        (rest split-str)]\n\n    (->> (map (fn [s] (str (clojure.string/upper-case (first s)) (apply str (rest s)))) rest-words)\n         (apply str)\n         (str first-word))))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 102, "code": "(fn [x]\n  (let [x1 (into [] (map str (apply vector x)))\n        x2 (reduce #(if (= (last %) \"-\") (conj % (.toUpperCase %2)) (conj % %2))[] x1)\n        x3 (reduce #(if (= %2 \"-\") % (conj % %2)) [] x2)]\n    (apply str x3)))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 102, "code": "#(let [s (clojure.string/split % #\"-\")\n                  f (first s)\n                  c (map clojure.string/capitalize (rest s))\n                  r (clojure.string/join (cons f c))\n                  ]\n              r)", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 102, "code": "(fn [s]\n  (->> s\n       (re-seq #\"\\w+\")\n       (map-indexed #(if (zero? %1) %2 (clojure.string/capitalize %2)))\n       (apply str)))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 102, "code": "(fn [s](let [[x & ys] (clojure.string/split s #\"-\")]\n       (clojure.string/join (cons x (map clojure.string/capitalize ys)))))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 102, "code": "(fn f\n    ([[c & cs] acc]\n     (println c)\n     (cond\n       (= c \\-) (let [[d & css] cs]\n                  (if d\n                    (recur css (conj acc  (char (- (int d) 32))))\n                    acc))\n       (nil? c) acc\n       :else (recur cs (conj acc c))))\n    ([s] (apply str (f s []))))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/join \n    (map-indexed\n      #(if (= 0 %1)\n          %2\n          (clojure.string/capitalize %2)) \n      (clojure.string/split s #\"-\"))))", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 102, "code": "(fn [x]\n  (let [[f & r] (seq (.split x \"-\"))]\n    (apply str (cons f (map #(apply str (cons (Character/toUpperCase (first %)) (rest %))) r)))))", "user": "594266cfe4b060784b3b790b"}, {"problem": 102, "code": "#(let [wordparse (clojure.string/split % #\"-\")](str (first wordparse) (apply str (map clojure.string/capitalize (drop 1 wordparse)))))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 102, "code": "(fn [s]\n    (let [ss          (clojure.string/split s #\"-\")\n          upper-first (fn [s]\n                        (let [u   (.toUpperCase s)\n                              fst (first u)\n                              rst (rest s)]\n                          (apply str\n                                 (cons fst rst))))\n          ss-upper    (map upper-first\n                           ss)]\n      (apply str\n             (cons (first ss)\n                   (rest ss-upper)))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 102, "code": "(fn foo [s] (loop [s (map str (seq s)) o []]\n  (if (empty? s)\n    (apply str o)\n    (if (= (first s) \"-\")\n      (recur (rest (rest s)) (conj o (clojure.string/upper-case (first (rest s)))))\n      (recur (rest s) (conj o (first s)))\n    )))\n)", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 102, "code": "(fn [x]\n  (let [[[a] b] (split-at 1 (re-seq #\"\\w+\" x))]\n    (apply str a (map clojure.string/capitalize b))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 102, "code": "(fn [x] (clojure.string/replace x #\"-([a-z])\" #(clojure.string/capitalize (% 1))))", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 102, "code": "(fn [str]\n   (->> (clojure.string/split str #\"-\")\n        (#(cons (first %) (map clojure.string/capitalize (rest %))))\n        (clojure.string/join \"\")))", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 102, "code": "(fn [x]\n  (let [s (clojure.string/split x #\"-\")]\n    (if (> (count s) 1)\n      (clojure.string/join \"\"\n         (cons (first s)\n            (map clojure.string/capitalize (rest s))))\n      x)  \n  ))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 102, "code": "(fn [s]\n  (reduce\n   #(str %1 (clojure.string/capitalize %2))\n   (clojure.string/split s #\"-\")))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 102, "code": "(fn to-camel\n  [string]\n  (let [size (count string) vecstr (vec string)]\n    (loop [i 0 partial []]\n      (if (< i  size)\n        (if (= \\- (nth vecstr i))\n          (recur (+ 2 i) (conj partial (->> (nth vecstr (+ i 1)) str .toUpperCase  )))\n          (recur (+ 1 i) (conj partial (->> (nth vecstr i) str  ))))\n        (reduce str partial)))))", "user": "5c0466a3e4b0bdcf453d1680"}, {"problem": 102, "code": "(fn [x] (clojure.string/replace x #\"-(\\w)\" #(.toUpperCase (%1 1))))", "user": "5c0e58bfe4b01240ff567140"}, {"problem": 102, "code": "(fn [s]\n  (apply str \n         (:chars \n          (reduce (fn [acc x]\n                    (if (:cap acc)\n                      (->\n                       acc\n                       (assoc :cap nil)\n                       (update-in [:chars] conj (Character/toUpperCase x)))\n                      (if (= x \\-)\n                        (assoc acc :cap true)\n                        (update-in acc [:chars] conj x))))\n                  {:cap nil :chars []}\n                  (seq s)))))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 102, "code": "(fn [s] (let [words (clojure.string/split s #\"-\")\n              capitalized-words (map clojure.string/capitalize (rest words))]\n          (clojure.string/join (cons (first words) capitalized-words))))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 102, "code": "(fn [name]\n  (let [words  (re-seq #\"\\w+\" name)\n        tail   (map clojure.string/capitalize (rest words))\n        words2 (conj tail (first words))]\n    (apply str words2)))", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-[a-z]\" (comp clojure.string/upper-case last))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 102, "code": "(fn [text]\n  (let [[split capitalize] [clojure.string/split clojure.string/capitalize]\n        [fst & splits] (split text #\"-\")\n        others-in-upper (map capitalize splits)\n        all-words (into [fst] others-in-upper)]\n    (apply str all-words)))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-([a-z])\" (fn [[_ c]] (.toUpperCase c)))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 102, "code": "(fn into-camel-case\n  [word]\n  (let [words (clojure.string/split word #\"-\")\n        head (first words)\n        tail (rest words)]\n    (clojure.string/join\n     (concat [head] (map clojure.string/capitalize tail)))))", "user": "5c222b7de4b07e362c230588"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-[a-z]\" #(clojure.string/upper-case (second %))))", "user": "5c20b6abe4b07e362c230576"}, {"problem": 102, "code": "#(clojure.string/replace % #\"\\-.\" (comp clojure.string/upper-case last))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 102, "code": "(fn [x] (let [c (filter #(not= % [\\-]) (partition-by #(= % \\-) x))] (apply str (concat (first c) (mapcat #(cons (Character/toUpperCase (first %)) (rest %)) (rest c))))))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 102, "code": "(fn [s]\n    (apply str\n      (cons (first s)\n            (mapcat \n              (fn [[a b]]\n                (if (= \\- b)\n                      []\n                      (if (= \\- a)\n                        [(clojure.string/upper-case (str b))]\n                        [b])\n                      ))\n              (partition 2 1 s))))\n  )", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 102, "code": "#(clojure.string/join (cons (first (clojure.string/split % #\"-\")) (map clojure.string/capitalize (rest (clojure.string/split % #\"-\")))))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 102, "code": "(fn into-camel-case [s]\n  (loop [result [] [c & cs] s]\n    (cond\n      (nil? c) (apply str result)\n      (= c \\-) (recur (conj result (Character/toUpperCase (first cs))) (rest cs))\n      :else (recur (conj result c) cs)))\n  )", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 102, "code": "#(let [[f & r] (clojure.string/split % #\"-\")\n         up (clojure.string/join (map clojure.string/capitalize r))]\n     (str f up))", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 102, "code": "(fn from-camel-case [expression]\n  (let [split-expr (clojure.string/split expression #\"-\")]\n        (if (= 1 (count split-expr))\n          (first split-expr)\n          (clojure.string/join \"\" (concat (first split-expr) (map #(str (.toUpperCase (subs % 0 1)) (subs % 1)) (rest split-expr)))))))", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 102, "code": "#(apply str (let [[f & m] (-> % (clojure.string/split #\"-\"))] (cons f (map clojure.string/capitalize m))))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 102, "code": "(fn [s]\n    (clojure.string/replace s #\"-(\\w)\" #(clojure.string/upper-case (%1 1))))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 102, "code": "(fn hyphen-case->camel-case [s]\n  (let [[first-word & rest-words] (clojure.string/split s #\"-\")]\n    (apply str first-word (map clojure.string/capitalize rest-words))))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 102, "code": "(fn [s]\n  (let [words (re-seq #\"(?!-)\\w+\" s)]\n    (apply str\n      (concat \n       (vector (first words)) \n       (reduce #(conj %1 (str (.toUpperCase (subs %2 0 1)) (subs %2 1))) [] (rest words))\n      )\n    )\n  )\n)", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 102, "code": "(fn to-camel-case [some-string]\n  (clojure.string/replace some-string #\"-(\\w)\"\n                          #(clojure.string/upper-case (second %1))))", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 102, "code": "#(let [c (clojure.string/split % #\"-\")] (apply str (first c) (map clojure.string/capitalize (rest c))))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 102, "code": "(fn kabab->camel [word]\n  (let [[head & tail] (clojure.string/split word #\"\\-\")]\n    (clojure.string/join\n     (cons head\n           (map clojure.string/capitalize tail)))))", "user": "5c6448d6e4b0fca0c1622674"}, {"problem": 102, "code": "(fn [s]\n    (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (%1 1))))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 102, "code": "#(let [s (clojure.string/split % #\"-\")]\n    (reduce (fn [res item] (str res (clojure.string/capitalize item)))\n            (first s) (rest s)))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 102, "code": "(fn ->camel-case\n  [s]\n  (let [[first-word & others] (clojure.string/split s #\"-\")]\n    (->> others\n         (map clojure.string/capitalize)\n         (#(conj % first-word))\n         (apply str))))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 102, "code": "#(let [[f & rst] (clojure.string/split % #\"-\")\n       rst (map clojure.string/capitalize rst)]\n   (apply str f rst))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 102, "code": "(fn [input]\n  (let [words (clojure.string/split input #\"-\")]\n    (str (first words)\n         (apply str (map clojure.string/capitalize (drop 1 words))))\n    ))", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 102, "code": "(fn [st]\n  (let [words (clojure.string/split st #\"-\")]\n    (str (first words)\n         (reduce (fn [s w] (str s\n                                (clojure.string/capitalize w))\n                   ) \"\" (rest words)))))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 102, "code": "(fn into-camel-case\n  [s]\n  (let [parts (clojure.string/split s #\"-\")]\n    (str (first parts) (apply str (map clojure.string/capitalize (rest parts))))))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 102, "code": "(fn [s1]\n   (let [splt (clojure.string/split s1 #\"-\")]\n     (if (> (count splt) 1)\n       (->> (map (fn [item]\n                   (let [fst (->> (first item) (str) (clojure.string/upper-case))\n                         newword (->> (rest item) (apply str) (str fst))]\n                     newword)) (rest splt))\n            (apply str) (str (first splt)))\n       s1)))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 102, "code": "(fn into-camelcase [s] (clojure.string/replace s #\"-[a-z]\" #(-> (second %) (clojure.string/upper-case))))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 102, "code": "(fn [kebab-case] (clojure.string/replace kebab-case #\"(-)(.)\" #(.toUpperCase (last %))))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 102, "code": "(fn [exp]\n  (clojure.string/replace exp #\"-\\w\" #(subs (.toUpperCase %1) 1))\n  )", "user": "5c79030be4b0fca0c1622830"}, {"problem": 102, "code": "#(->> (clojure.string/split % #\"-\")\n      (map-indexed (fn [i v] ({0 v} i (clojure.string/capitalize v))))\n      (apply str))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-\\w\" #(.toUpperCase (subs % 1))))", "user": "586bc870e4b01531a375e964"}, {"problem": 102, "code": "#(apply str\n(->>\n  %\n  (re-seq #\"\\w+\")\n  first)\n(->>\n  %\n  (re-seq #\"\\w+\")\n  rest\n  (map clojure.string/capitalize)\n  (apply str)))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-.\" (comp clojure.string/capitalize second))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 102, "code": "(fn [s]\n    (let [xs (re-seq #\"[^-]+\" s)]\n      (if (> (count xs) 1)\n        (apply str (cons (first xs)\n                         (map #(str (.toUpperCase (str (first %)))\n                                    (apply str (rest %))) (rest xs))))\n        s)))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 102, "code": "(fn into-camel-case [s]\n  (->> (#(clojure.string/split % #\"-\") s)\n       ((juxt first #(apply str (map clojure.string/capitalize (next %)))))\n       (apply str)))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 102, "code": ";; http://www.4clojure.com/problem/102\n(fn into-camel-case\n  [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (first words)\n           (drop 1 (map clojure.string/capitalize words)))))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 102, "code": "(fn [s]\n    (let [[w & ws] (clojure.string/split s #\"-\")]\n      (apply str w (map clojure.string/capitalize ws))))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 102, "code": "(fn   [s]\n  (apply str (reduce (fn [acc c]\n                       (if (= \\- (last acc))\n                              (conj (vec (butlast acc))\n                                    (if (<= 97 (int c) 122)\n                                      (char (- (int c) 32))\n                                      c))\n                              (conj acc c))) [] s)))", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 102, "code": "(fn [nom] (clojure.string/replace nom #\"-[a-z]\" #(str (last (clojure.string/upper-case %1)))))", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-(.)\" #(.toUpperCase (% 1))))", "user": "502940a9e4b061fd216be4b8"}, {"problem": 102, "code": "(fn into-camcase [s]\n  (let [[w1 & ws] (clojure.string/split s #\"-\")]\n    (apply str w1 (map clojure.string/capitalize ws))))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 102, "code": "(fn kebab2camel [s]\n  (let [words (clojure.string/split s #\"-\")\n        camel-words (cons (first words)\n                          (map clojure.string/capitalize (rest words)))]\n    (apply str camel-words)))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 102, "code": "#(let [[x & xs] (clojure.string/split % #\"-\")]\n   (clojure.string/join (cons x (map clojure.string/capitalize xs))))", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 102, "code": "(fn to-camel-case [s]\n  (let [[fst & rest] (clojure.string/split s #\"-\")]\n    (apply str (cons fst (map clojure.string/capitalize rest)))))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(.)\" #(.toUpperCase (% 1))))", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 102, "code": "#(let [[first & rest] (clojure.string/split % #\"-\")]\n    (apply str first (map clojure.string/capitalize rest)))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 102, "code": "(fn [word]\n  (let [->to-upper-case (zipmap (map char (range (int \\a) (inc (int \\z))))\n                                (map char (range (int \\A) (inc (int \\Z)))))\n        capitalize (fn [w]\n                     (apply str (concat [(->to-upper-case (first w))]\n                                        (rest w))))\n        words    (->> word (re-seq #\"\\w+\"))]\n    (apply str (concat [(first words)]\n                       (map capitalize (rest words))))))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 102, "code": "(fn [s]\n  (let [sp  (clojure.string/split s #\"-\")]\n    (apply str (map-indexed\n                 (fn [sub-string-index sub-string]\n                   (if (= sub-string-index 0)\n                     sub-string\n                     (apply str (map-indexed\n                                  (fn [letter-idx letter]\n                                    (if (= letter-idx 0)\n                                      (clojure.string/upper-case letter)\n                                      letter\n                                      )\n                                    )\n                                  sub-string\n                                  ))\n                     )\n                   )\n                 sp\n                 ))\n    )\n  )", "user": "5cdbb1b2e4b05ee0cb311732"}, {"problem": 102, "code": "(fn [s]\n  (if-not (nil? (re-find #\"-\" s))\n    (let [split_text (clojure.string/split s #\"-\")]\n      (str\n       (first split_text)\n       (clojure.string/join\n        (map clojure.string/capitalize (rest split_text)))))\n    s))", "user": "5ce2bf8ee4b0a17bb84e2b2e"}, {"problem": 102, "code": "(fn my-camel\n  [sentence] (clojure.string/replace sentence #\"-.\" #(clojure.string/upper-case (second %1))))", "user": "5ce3bcd6e4b0a17bb84e2b43"}, {"problem": 102, "code": "(fn\n   [s]\n   (let [res (->> (clojure.string/split s #\"-\")\n                  (map #(clojure.string/replace-first % (first %) (clojure.string/upper-case (first %))))\n                  (apply str)\n                  )]\n     (clojure.string/replace-first res (first res) (clojure.string/lower-case (first res)))))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 102, "code": "(fn [s] (let [x (map #(apply str %) \n             (remove (partial = '(\\-)) (partition-by (partial = \\-) s)))]\n  (apply str (first x) \n         (map \n          #(apply str \n                  (if (< (int (first %)) 96) \n                    (first %) \n                    (char (- (int (first %)) 32))) \n                  (rest %))\n          (rest x)))))", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 102, "code": "(fn [x]\n  (->> (clojure.string/split x #\"-\")\n       ((fn [[a & rest]] (cons a (map clojure.string/capitalize rest))))\n       (clojure.string/join \"\")))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (str (first words) (apply str (map clojure.string/capitalize (rest words)))))\n  )", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 102, "code": "#(->> %\n      (re-seq #\"\\w+\")\n      ((fn [words] (cons (first words) (map clojure.string/capitalize (rest words)))))\n      (apply str)\n      )", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 102, "code": "(fn [x] (clojure.string/replace x #\"-(.)\" #(.toUpperCase (%1 1))))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 102, "code": "(fn [s] (let [ss (re-seq #\"\\w+\" s)\n              head [(first ss)]\n              others (rest ss)\n              fn-camel #(clojure.string/join\n                         [(clojure.string/upper-case (first %))\n                          (clojure.string/join (rest %))])\n              upper-case-others (map fn-camel others)\n              res (apply str (concat head upper-case-others))]\n          res))", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 102, "code": "(fn [x] (let [s (map #(apply str %)  (filter #(not= '(\\-) %) (partition-by #(= \\- %) x)))]\n        (clojure.string/join (cons (first s) (map clojure.string/capitalize (rest s))))))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-.\"\n    (fn [[_ c]] (format \"%S\" c)) ;(clojure.string/upper-case c)\n)", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 102, "code": "(fn\n  [s]\n  (let [parts (clojure.string/split s #\"-\")\n        parts (cons (first parts) (map clojure.string/capitalize (rest parts)))]\n    (apply str parts)))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 102, "code": "(fn [x] (let [[x & xs](clojure.string/split x #\"-\")]\n                (apply str  (into [x] (map clojure.string/capitalize xs)))))", "user": "5d0cf1c8e4b0cc9c91588246"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-[a-z]\" (comp clojure.string/upper-case second))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 102, "code": "(fn [str] (clojure.string/replace str #\"-(\\w)\" #(clojure.string/upper-case (second %1))))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 102, "code": "(fn\n  [string]\n  (let [words (clojure.string/split string #\"-\")]\n    (clojure.string/join\n      (cons (first words)\n            (map clojure.string/capitalize (rest words))))))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 102, "code": "(fn f [s]\n  (let [ws (clojure.string/split s #\"-\")]\n    (clojure.string/join\n      (cons (first ws)\n            (map clojure.string/capitalize (rest ws))))))", "user": "5012da69e4b0c8732600222d"}, {"problem": 102, "code": "(fn [phrase] (clojure.string/replace phrase #\"\\-[a-z]\" (comp clojure.string/upper-case last)))", "user": "5bb36a9ce4b0a20761a23523"}, {"problem": 102, "code": "(fn [s]\n  (let [[first & parts] (clojure.string/split s #\"-\")\n        capitalized-parts (map clojure.string/capitalize parts)\n        joined-parts (clojure.string/join capitalized-parts)]\n    (str first joined-parts)))", "user": "518279abe4b0353c468deb65"}, {"problem": 102, "code": "(fn icc [word]\n  (let [pairs (cons (list nil (first word))\n                    (partition 2 1 word))\n        without-dashes (filter #(not= \\- (second %)) pairs)\n        converted (map (fn [pair]\n                         (if (= \\- (first pair))\n                           (Character/toUpperCase (second pair))\n                           (second pair))) without-dashes)]\n    (apply str converted)))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 102, "code": "(fn [s]\n  (-> s\n   (clojure.string/replace\n    #\"-(\\w)\"\n    #(clojure.string/capitalize (%1 1)))))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 102, "code": "(fn [s]\n    (clojure.string/replace s #\"-([a-z])\" (fn [[_ lower-case-letter]]\n                                            (clojure.string/upper-case lower-case-letter))))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 102, "code": "(fn into-camel-case [str] (clojure.string/replace str #\"-([a-z])\" (comp clojure.string/upper-case last)))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 102, "code": "(fn [S]\n    (let \n      [\n        ;; \u0440\u0430\u0437\u043e\u0431\u044a\u0435\u043c \u0441\u043b\u043e\u0432\u0430\n        L (clojure.string/split S #\"-\")\n        ;; \u043f\u0435\u0440\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u043c, \u043a\u0430\u043a \u0435\u0441\u0442\u044c\n        FirstWord (first L)\n        ;; \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u0435\u043d\u044f\u0435\u043c\n        OtherWords (rest L)\n      ]\n      (str\n        FirstWord\n        (apply str       \n          (map\n            (fn [Word]\n              (str\n                (str (clojure.string/upper-case(first Word)) )\n                (apply str (rest Word))\n              )\n            )\n            OtherWords\n          )\n        )\n      )\n    )\n )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 102, "code": "(fn [t]\n  (let [st (clojure.string/split t #\"-\")]\n    (apply str \n           (first st) \n           (map #(clojure.string/capitalize %) (rest st)))))", "user": "5cb41c40e4b026601754b911"}, {"problem": 102, "code": "(fn [x]\n  (let [[f & r] (re-seq #\"\\w+\" x)]\n    (apply str (conj (mapcat clojure.string/capitalize r) f))))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 102, "code": "(fn [x]\n (let [capitalize-rest (fn [coll] (apply str (first coll) (map clojure.string/capitalize (rest coll))))]\n   (->>\n     (clojure.string/split x #\"-\")\n     capitalize-rest\n     )))", "user": "5d1a1082e4b0902706380e0e"}, {"problem": 102, "code": "(fn [cadena]\n    (let [reemplazo (fn [[_ c]] (clojure.string/upper-case c))]\n      (clojure.string/replace cadena #\"-\\w\" #(reemplazo %))))", "user": "5d0153f9e4b0cc9c915881aa"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (%1 1))))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 102, "code": "#(let [spl (re-seq #\"\\w+\" %)\n         fw (first spl)\n         tail (map clojure.string/capitalize (next spl))]\n     (str fw (apply str tail)))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 102, "code": "(fn str-lis\n  ([s]\n   (str-lis s [] nil)\n   )\n  ([s tar prv]\n   (if (empty? s)\n     (apply str tar)\n     (do (if (= (first \"-\") (first s))\n           (str-lis (rest s) tar (first s))\n           (str-lis (rest s) (conj tar (if (= prv (first \"-\"))\n                                         (clojure.string/upper-case (first s))\n                                         (first s)\n                                         )) nil))\n         )\n     )\n   )\n  )", "user": "5d4cf3e9e4b0776584bd6f38"}, {"problem": 102, "code": "(fn\n  [s]\n  (let [[x & y] (clojure.string/split s #\"-\")]\n    (clojure.string/join (cons x (map clojure.string/capitalize y)))))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 102, "code": "(fn to-camel-case [s]\n  (clojure.string/join\n   (for [i (range (count s))]\n     (let [c (get s i)]\n       (cond\n         (= c \\-) nil\n         (zero? i) c\n         (= (get s (dec i)) \\-) (clojure.string/upper-case (str c))\n         :else c)))))", "user": "5d6042f2e4b0c9e5857d5006"}, {"problem": 102, "code": "(fn camel-case\n  [s]\n  (let [capitalize (fn [word] (apply str\n                                     (Character/toUpperCase (first word))\n                                     (rest word)))\n        [first-word & next-words] (clojure.string/split s #\"-\")\n        capitalized (map capitalize next-words)]\n    (apply str first-word capitalized)))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 102, "code": "(fn [s]\n  (let [w (re-seq #\"[^-]+\" s)]\n    (apply str (first w) (map #(str (.toUpperCase (subs % 0 1)) (subs % 1))(rest w)))))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 102, "code": "(fn [s]\n    (let [words (clojure.string/split s #\"-\")\n          caps (map clojure.string/capitalize (rest words))\n          fword (take 1 words)]\n      (clojure.string/join (concat fword caps))))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 102, "code": "(fn camel-case\n  [s]\n  (clojure.string/replace s #\"-\\w\" #(clojure.string/upper-case (subs % 1))))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 102, "code": "(fn [x]\n  (let [p (clojure.string/split x #\"-\")]\n    (clojure.string/join \"\" (into (vector (first p)) (map clojure.string/capitalize (rest p))))\n    ))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 102, "code": "(fn [w]\n (clojure.string/join \"\"\n  (let [sp (clojure.string/split w #\"\\-\")]\n   (cons\n    (first sp)\n    (map clojure.string/capitalize (rest sp))))))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 102, "code": "(fn [s]\n   (let [sl (clojure.string/split s #\"-\")]\n     (str (first sl) (apply str (#(map clojure.string/capitalize %) (rest sl))))))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 102, "code": "(fn [s] \n  (let [ws (re-seq #\"\\w+\" s)]\n    (apply str (cons (first ws) (map clojure.string/capitalize (rest ws))))))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-.\" (fn [[_ l]] (clojure.string/capitalize l))))", "user": "5d1b2b7de4b02ea6f0fb697a"}, {"problem": 102, "code": "(fn [input]\n  (clojure.string/replace input #\"-([a-z])\" #(clojure.string/upper-case (last %))))", "user": "5d80fa37e4b0915913b1d374"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-([a-z])\" (fn [[_ letter]] (clojure.string/upper-case letter))))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 102, "code": "(fn [s]\n   (let [s (clojure.string/split s #\"-\")]\n     (clojure.string/join (cons (first s) (map clojure.string/capitalize (rest s))))))\n\n;; best\n; (fn camel [s]\n;   (clojure.string/replace s #\"-(.)\" #(.toUpperCase (%1 1))))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 102, "code": "(fn [s]\n   (apply str (cons\n      (first s)\n      (map\n        #(cond\n           (= \\- (second %)) nil\n           (= \\- (first %)) (Character/toUpperCase (second %))\n           :else (second %)\n           )\n        (partition 2 1 s))))\n   )", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 102, "code": "(fn intoCamelCase [str]\n  (let [coll (clojure.string/split str #\"-\")]\n    (clojure.string/join\n     \"\"\n     (cons (first coll)\n           (map clojure.string/capitalize (rest coll))))))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 102, "code": "(fn [str]\n  (clojure.string/replace str\n                          #\"-[a-z]\"\n                          (fn [[_ c]] (clojure.string/upper-case c))))", "user": "5d669613e4b0db5d338d15ea"}, {"problem": 102, "code": "(fn [s] (let [x (clojure.string/split s #\"-\") x1 (first x) x2 (rest x)]\n           (apply str x1 (map clojure.string/capitalize x2))))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 102, "code": "(fn \n  [hyphen-str]\n  (let [[f-word & o-words] (clojure.string/split hyphen-str #\"-\")]\n    (clojure.string/join (cons f-word (map clojure.string/capitalize o-words)))))", "user": "5d96edeae4b0d3f9b434ad35"}, {"problem": 102, "code": "(fn [s]\n  (let [xs (clojure.string/split s #\"-\")]\n    (apply str (apply concat (cons (first xs) (map #(cons (Character/toUpperCase ^char (first %)) (rest %)) (rest xs)))))))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 102, "code": "(fn [s]\n  (->> (clojure.string/split s #\"-\")\n       (map-indexed (fn [i w] (if (zero? i)\n                                w\n                                (clojure.string/capitalize w))))\n       (apply str)))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 102, "code": "(fn kabob->camelcase [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (reduce (fn [acc n]\n              (str acc (clojure.string/capitalize n)))\n            (first words)\n            (rest words))))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 102, "code": "(fn [ip-string]\n   (let [first-word (first(clojure.string/split ip-string #\"-\"))]\n   (let [rest-word (map clojure.string/capitalize (rest (clojure.string/split ip-string #\"-\")))]\n    (apply str (concat first-word rest-word))))\n)", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 102, "code": "(fn [word]\n   (let [camel-map (map #(clojure.string/capitalize %) (clojure.string/split word #\"-\"))]\n     (if (= 1 (count camel-map))\n       word\n       (apply str (clojure.string/lower-case (first camel-map)) (rest camel-map)))))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-[a-z]\" #(str (second (.toUpperCase %1)))))", "user": "5da975b9e4b000c986472c32"}, {"problem": 102, "code": "(fn [word]\n  (clojure.string/replace word #\"-(.)\" #(.toUpperCase (%1 1))))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 102, "code": "(fn [col]\n  (loop [result []\n          up false\n          s col]\n    \n    (if (empty? s) \n       (clojure.string/join result)\n      (if (= (str (first s)) \"-\") \n        (recur result true (rest s))\n        (recur (conj result (if up (clojure.string/upper-case (first s)) (first s)))\n               false\n              (rest s)\n        )\n      )\n    )\n  )  \n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 102, "code": "#(->> (clojure.string/split % #\"\\-\")\n      (map-indexed (fn [idx item] (if (= 0 idx) item (apply str (cons (clojure.string/upper-case (first item)) (drop 1 item))))))\n     (apply str)\n      )", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 102, "code": "(fn\n  [os]\n  (loop [s   os\n         new []]\n    (if (not (seq s))\n      (apply str new)\n      (if (= \\- (first s)) \n        (recur (drop 2 s) (conj new (clojure.string/upper-case (second s))))\n        (recur (rest s) (conj new (first s)))))))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 102, "code": "(fn [s] (let [words (re-seq #\"[^-]+\" s)]  (apply str (cons (first words) (map clojure.string/capitalize (rest words))))))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 102, "code": "(fn [s]\n  (let [[w & ws] (clojure.string/split s #\"-\")]\n    (apply str w (map clojure.string/capitalize ws))))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 102, "code": "#(let [[h & tail] (clojure.string/split % #\"-\")]\n    (->> tail\n        (map clojure.string/capitalize)\n        (cons h)\n        (clojure.string/join)\n    )\n)", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 102, "code": "(fn [w] (clojure.string/join (concat [(first (clojure.string/split w #\"-\"))] (rest (map clojure.string/capitalize (clojure.string/split w #\"-\"))))))", "user": "5dcdf0a7e4b0b296f82db5b4"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(clojure.string/upper-case (last %1))))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 102, "code": "(fn [content]\n\n  (reduce #(apply str %1 (apply str (.toUpperCase (str (first %2))) (rest %2)))\n          (first (clojure.string/split content #\"-\"))\n          (rest (clojure.string/split content #\"-\")))\n\n  )", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 102, "code": "(fn to-camel-case-string [kebab-str]\n  (let [words (clojure.string/split kebab-str #\"-\")]\n    (apply str (conj (map #(apply str (Character/toUpperCase (.charAt % 0)) (.substring % 1)) (rest words)) (first words)))))", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 102, "code": "(fn [x] (clojure.string/replace x #\"-(\\w)\" #(.toUpperCase (%1 1))))", "user": "5ddd3cbee4b0948ae9d9adc3"}, {"problem": 102, "code": "(fn to-camel [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (clojure.string/join (conj (map clojure.string/capitalize (rest words))\n                            (first words)))))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 102, "code": "(fn [s]\n        (->> (cons [(first s) (first s)] (map vector s (rest s)))\n             (filter (fn [[a b]] (not= \\- b)))\n             (map (fn [[a b]] (if (= \\- a) (clojure.string/capitalize b) b)))\n             (apply str)))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 102, "code": "#(->> \n (clojure.string/split % #\"-\")\n (reduce (fn [acc el]\n           (str acc \n                (if (empty? acc)\n                  el\n                  (clojure.string/capitalize el))))))", "user": "5db98f39e4b010eb3c36cd53"}, {"problem": 102, "code": "(fn [s] \n  (let [[fst & rst] (clojure.string/split s #\"-\")]\n    (clojure.string/join (flatten [fst\n                                   (map clojure.string/capitalize rst)]))))", "user": "59e8b4ade4b0249b72820734"}, {"problem": 102, "code": "(fn [s]\n  (-> s\n      (clojure.string/split #\"-\")\n      ((fn [words]\n         (concat [(first words)] (map clojure.string/capitalize (rest words)))))\n      ((partial apply str))))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 102, "code": "(fn [s]\n  (let [[x & xs] (clojure.string/split s #\"-\")]\n    (if (nil? xs)\n     s\n     (->> (map clojure.string/capitalize xs)\n       (concat [x])\n       (clojure.string/join \"\")))))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 102, "code": "(fn [s]\n  (apply str (first s) (keep (fn [[c1 c2]] (if (= \\- c1)\n                                            (Character/toUpperCase c2)\n                                            (when (not= \\- c2) c2))) (partition 2 1 s))))", "user": "4f3ca5a6e4b0e243712b1f53"}, {"problem": 102, "code": "#(let [allwords (re-seq #\"\\w+\" %)\n        firstword (first allwords)\n        concatwords (if (< 1 (count allwords)) (apply str (map (fn [x] (clojure.string/capitalize x)) (rest allwords)))\n                                               )\n        ans (str firstword concatwords)\n        ]\n    ans)", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-[a-z]\" (fn [x] (clojure.string/upper-case (second x))))", "user": "5ddbd4b3e4b0948ae9d9adb5"}, {"problem": 102, "code": "(fn [snake-case-string]\n  (let [[fw & ow] (clojure.string/split snake-case-string #\"-\")]\n    (clojure.string/join (concat fw  (map clojure.string/capitalize ow))))\n    )", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 102, "code": "(fn [s] (let [[x & xs] (clojure.string/split s #\"-\")]\n            (clojure.string/join (cons x (mapcat (fn [[c & cs]] (cons (clojure.string/upper-case c) cs)) xs)))))", "user": "529dfc6de4b04e0c58e87b8a"}, {"problem": 102, "code": "(fn [str-x]\n                   (let [str-v (clojure.string/split str-x #\"\\-\")]\n                     (clojure.string/join\n                      (reduce #(concat %1 (clojure.string/upper-case (first %2)) (rest %2))\n                              (first str-v) (rest str-v)))))", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 102, "code": "(fn [in]\n   (let [words (clojure.string/split in #\"-\")]\n      (apply str (cons \n        (first words) \n        (map #(apply str (cons (clojure.string/upper-case (first %)) (rest %))) (rest words))))))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 102, "code": "#(let [words (re-seq #\"\\w+\" %)]\n  (apply str (cons (first words) (map clojure.string/capitalize (rest words)))))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[a b]] (clojure.string/capitalize b)))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 102, "code": "(fn camel-case [sentence] (let [first-letter-up (fn [word] (let [[f & others] word]\n                                                               (apply str (cons (Character/toUpperCase f) others))))\n                                  words (clojure.string/split sentence #\"-\")]\n                              (reduce #(str %1 (first-letter-up %2)) (first words) (rest words))))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 102, "code": "(fn p-102 [s-input]\n  (let [splits (clojure.string/split s-input #\"-\")\n        first-split (first splits)\n        rest-splits (rest splits)\n        rest-transformed (map (fn [s] (str\n                  (clojure.string/upper-case (str (first s)))\n                  (apply str (rest s))))\n                              rest-splits)]\n    (if (empty? rest-transformed) s-input\n        (apply str first-split rest-transformed))))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 102, "code": "(fn [n]\n  (let [coll (clojure.string/split n #\"-\")]\n    (str (first coll) (apply str (map #(clojure.string/capitalize %) (rest coll))) )))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 102, "code": "(fn camel-case [s]\n  (let [cap #(str (clojure.string/upper-case (subs % 0 1)) (subs % 1))\n        low #(str (clojure.string/lower-case (subs % 0 1)) (subs % 1))]\n    (->>\n      (apply str (map cap (clojure.string/split s #\"-\")))\n      (low))))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 102, "code": "(fn [kebab-str]\n  (letfn [(upper-first [w] (let [[fc & rc] w] (apply str (clojure.string/upper-case fc) rc)))]\n    (let [[fw & rw] (clojure.string/split kebab-str #\"-\")]\n      (apply str fw (map upper-first rw)))))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 102, "code": "(fn\n  [string]\n  (let [split-str (clojure.string/split string #\"-\")]\n    (str (first split-str) (clojure.string/join \"\" (rest (map clojure.string/capitalize split-str))))))", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 102, "code": "#(clojure.string/replace % #\"\\-.\" (comp clojure.string/upper-case last))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 102, "code": "(fn camelCase [s]\n  (apply str \n         (cond (= 1 (count s)) s\n        (= (first s) \\-) (cons (clojure.string/upper-case (second s)) (camelCase (rest (rest s))))\n        :else (cons (first s) (camelCase (rest s))))))", "user": "5e18c885e4b0dc95940084fc"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n   (str (first words) \n        (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 102, "code": "(fn [s]\n    (letfn [(step [f xs]\n              (cond\n                (not (seq xs)) \"\"\n                (= \\- (first xs)) (step #(-> % int (- 32) char) (rest xs))\n                :else (str (f (first xs)) (step identity (rest xs)))))]\n      (step identity s)))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 102, "code": "(fn [s]\n            (let [res (memoize (fn [s]\n                                 (clojure.string/split s #\"-\")))]\n              (str (first (res s))\n                   (apply str (map #(str (clojure.string/upper-case (first %)) (apply str (rest %)))\n                                   (rest (res s)))))))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 102, "code": "(fn camel [a]\n  (if (= (count (clojure.string/split a #\"-\")) 1)\n  a\n  (str (first (clojure.string/split \"multi-word-key\" #\"-\")) (apply str (map #(str (.toUpperCase (subs % 0 1)) (subs % 1)) (rest (clojure.string/split \"multi-word-key\" #\"-\")))))))", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 102, "code": "(fn [s]\n  (let [parts (clojure.string/split s #\"-\")\n        parts2 (cons (first parts)\n                     (map clojure.string/capitalize (rest parts)))]\n    (clojure.string/join parts2)))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 102, "code": "(fn [s]\n  (let [[f & r] (clojure.string/split s #\"-\")]\n    (apply str f (map clojure.string/capitalize r))))", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 102, "code": "(fn [s] (let [ws (clojure.string/split s #\"-\")]\n          (clojure.string/join (cons  (first ws) (map clojure.string/capitalize (rest ws))))))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-.\"\n                         (comp clojure.string/upper-case second))\n\n;(fn ->camel [s]\n;  (letfn [(change-first-letter [cap s]\n;            (apply str (cap (first s)) (rest s)))]\n;    (->> (clojure.string/split s #\"-\")\n;         (map (partial change-first-letter clojure.string/upper-case))\n;         clojure.string/join\n;         (change-first-letter clojure.string/lower-case))))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 102, "code": "#(apply str (cons (first (clojure.string/split % #\"-\")) (map clojure.string/capitalize (rest (clojure.string/split % #\"-\")))))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 102, "code": "(fn [in-str]\n   (let [trimmed (clojure.string/replace in-str #\"-*$\" \"\")]\n     (if (empty? trimmed) \"\"\n         (let [[ch & ct :as cs] (apply list (reverse trimmed))\n               upper-ch #(first (clojure.string/upper-case %))\n               func (fn [ch coll]\n                      (if (= \\- ch)\n                        (cons (upper-ch (first coll)) (rest coll))\n                        (cons ch coll)))]\n           (loop [cs cs\n                  rev []]\n             (if (empty? cs) (apply str rev)\n                 (recur (rest cs) (func (first cs) rev))))))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"(-)(.)\" #(clojure.string/upper-case (%1 2))))", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 102, "code": "(fn camel [source-str]\n  (let [splitted (clojure.string/split source-str #\"-\")\n        first-split (first splitted)\n        rest-split (rest splitted)]\n    (if (empty? (rest splitted))\n    source-str\n    (clojure.string/join (cons first-split (map clojure.string/join (map #(concat (clojure.string/upper-case (first %)) (rest %)) rest-split)))))))", "user": "5e54faf7e4b027a2e10ac0f0"}, {"problem": 102, "code": "(fn [s]\n  (let [[head & tail] (clojure.string/split s #\"-\")]\n    (apply str head (map clojure.string/capitalize tail))))", "user": "52b52c29e4b0c58976d9ad38"}, {"problem": 102, "code": "(fn [x]\n   (->> (clojure.string/split x #\"-\")\n        (reduce #(str %1 (clojure.string/capitalize %2)))))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 102, "code": "(fn [str]\n    (let [split-str (clojure.string/split str #\"-\")\n          [first & rest] split-str]\n      (clojure.string/join (concat first (map clojure.string/capitalize rest))))\n    )", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 102, "code": "(fn [s]\n    (let [[x & xs] (clojure.string/split s #\"-\")\n          tolower #(map clojure.string/capitalize %)]\n      (apply str x (tolower xs))))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 102, "code": "(fn [s]\n   (let [[f & r]\n         (seq (.split s \"-\"))]\n     (apply str f (map clojure.string/capitalize r))))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 102, "code": "(fn my-fn [xs]\n\t(let [[f & r] (clojure.string/split xs #\"-\")\n        capitalized (map clojure.string/capitalize r)]\n    (apply str f capitalized)))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 102, "code": "(fn [input-str]\n  (let [words (clojure.string/split input-str #\"-\")]\n    (clojure.string/join \"\" (cons (first words)(map clojure.string/capitalize (rest words))))))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 102, "code": "(fn [s]\n  (->> (clojure.string/split s #\"-\")\n       (map-indexed (fn [i st]\n                      (if (zero? i)\n                        st\n                        (clojure.string/capitalize st))))\n       clojure.string/join))", "user": "57e41d99e4b0bfb2137f5ab5"}, {"problem": 102, "code": "(fn [s]\n  (apply\n    str\n    (filter #(not= % \"-\")\n            (map #(if (= %2 \\-) (.toUpperCase (.toString %1)) (.toString %1))\n                 s\n                 (conj (drop-last s) \"a\")))))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 102, "code": "#(str (first (clojure.string/split % #\"-\")) (reduce str (map clojure.string/capitalize (rest (clojure.string/split % #\"-\")))))", "user": "5e79fcb9e4b085ba37836e08"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (first words) (mapcat #(when-let [c (first %)]\n                                        (concat (clojure.string/upper-case c) (rest %)))\n                                     (rest words)))))", "user": "4eb70649535d7eef30807373"}, {"problem": 102, "code": "(fn [word] (clojure.string/replace word \n                        #\"-([a-z])\"\n                        #(.toUpperCase (%1 1))))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 102, "code": "#(loop [[word & words] (clojure.string/split % #\"-\")]\n   (if (empty? words)\n     word\n     (recur (cons (str word (clojure.string/capitalize (first words))) (rest words)))\n  )\n)", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")\nrestWords (->> words (rest) (map clojure.string/capitalize))]\n(apply str (cons (first words) restWords)))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 102, "code": "(fn camel [s]\n  (let [splitted (clojure.string/split s #\"-\") begin (first splitted) end (rest splitted)]\n    (apply str (conj (map clojure.string/capitalize end) begin))\n    ))", "user": "5e9d99f9e4b0157ca9664806"}, {"problem": 102, "code": "(fn into-camel-case [string]\n  (let [phrase (clojure.string/split string #\"-\")]\n    (cond\n      (= 1 (count phrase)) (first phrase)\n      :else (clojure.string/join \n             (concat (first phrase)\n                     (map clojure.string/capitalize (rest phrase)))))))", "user": "5e92adb6e4b0fbed045a37ea"}, {"problem": 102, "code": "(fn [s]\n  (let [[start & others] (re-seq #\"\\w+\" s)]\n    (apply str start (map #(clojure.string/capitalize %) others))))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 102, "code": "#(->> ((fn step [[c & cs]]\n           (cond (nil? c)    nil\n                 (= c \\-)    (cons (clojure.string/upper-case (first cs))\n                                   (step (next cs)))\n                 :else       (cons c (step cs))))\n         %)\n        (reduce str))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 102, "code": "(fn into-camel-case\n  [s]\n  (let [words (re-seq #\"\\w+\" s)]\n    (->> (rest words)\n         (map clojure.string/capitalize)\n         (apply str (first words)))))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 102, "code": "(fn [s]\n  (let [ws (re-seq #\"\\w+\" s)\n        t  ( clojure.string/join (map clojure.string/capitalize (rest ws)))]\n    (str (first ws) t)))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 102, "code": "(fn [s]\n  (let\n    [res (clojure.string/split s (re-pattern \"-\"))\n     fs (first res)\n     tl (rest res)]\n   \n    (clojure.string/join (concat [fs] (map clojure.string/capitalize tl)))\n   )\n)", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 102, "code": "(fn intoCamelCase\n  [x]\n  (let [tokens (clojure.string/split x #\"-\")]\n    (reduce str\n            (cons (first tokens)\n                  (map clojure.string/capitalize (next tokens))))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 102, "code": "(fn intoCamelCase [string]\n  (let [\n      strings (clojure.string/split string #\"-\")\n  ]\n  (str (first strings) (reduce str (map clojure.string/capitalize (rest strings))))))", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(.)\" (fn [[_ x]] (.toUpperCase x)))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"\\-\\w\" #(clojure.string/upper-case (last %))))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 102, "code": "(fn [strng]\n  (let [[first-word & other-words] (clojure.string/split strng #\"-\")]\n    (->> other-words\n         (map clojure.string/capitalize)\n         (apply str first-word))))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 102, "code": "(fn camel-case [string]\n  (let [str-seq (re-seq #\"\\w+\" string)]\n       (apply str (cons (first str-seq) (map clojure.string/capitalize (rest str-seq))))))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 102, "code": "(fn [s]\n  (let [[w & ws] (re-seq #\"[^-]+\" s)]\n    (->> (map #(cons (Character/toUpperCase (first %)) (rest %)) ws)\n         (map (partial apply str))\n         (cons w)\n         (apply str))))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 102, "code": "(fn solution [string]\n  (let [[first-word & rest] (clojure.string/split string #\"-\")]\n    (reduce #(str %1 (clojure.string/capitalize %2)) first-word rest)))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 102, "code": "(fn [s]\n  (let [[x & xs] (clojure.string/split s #\"-\")]\n    (str x (->> xs\n                (map clojure.string/capitalize)\n                (clojure.string/join \"\"))))\n  )", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 102, "code": "(fn lisp->camel\n  [s]\n  (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (% 1))))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 102, "code": "(fn intoCamelCase [st]\n  (let [[fst & rem] (clojure.string/split st #\"-\")]\n    (clojure.string/join (cons fst (map clojure.string/capitalize rem)))))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 102, "code": "(fn __\n  [x]\n  (let [split (clojure.string/split x #\"-\")\n        first (first split)]\n    (apply str first (map clojure.string/capitalize (rest split)))))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 102, "code": "(fn [s]\n  (let [subs (clojure.string/split s #\"-\")]\n    (apply str (first subs) (map clojure.string/capitalize (rest subs)))))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 102, "code": "(fn [k] \n  (clojure.string/join \n   (let [parts (clojure.string/split k #\"-\")] \n     (cons (first parts) \n           (map clojure.string/capitalize (rest parts))))))", "user": "50a4f36be4b0344e360f3bc9"}, {"problem": 102, "code": "(fn [s]\n  (let [[x & ys] (clojure.string/split s #\"-\")]\n    (clojure.string/join (cons x (map clojure.string/capitalize ys)))))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 102, "code": "(fn [s]\n   (let [[h & t] (re-seq #\"[^-]+\" s)]\n     (apply str h (map clojure.string/capitalize t))))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-([a-z])\"\n   (comp clojure.string/upper-case second))", "user": "512700c4e4b083bb8f88cf14"}, {"problem": 102, "code": "(fn [input]\n  (let [[w & ws] (clojure.string/split input #\"-\")]\n    (->> (map clojure.string/capitalize ws)\n         (apply (partial str w)))))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 102, "code": "(fn [v] \n  (apply str \n         (map-indexed #(if (> % 0) \n                             (clojure.string/capitalize %2) %2) \n                      (clojure.string/split v #\"-\"))))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-[a-z]\" #(.toUpperCase (str (second %1)))))", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 102, "code": "(fn\n  [s]\n  (let [spl (clojure.string/split s #\"-\")]\n    (clojure.string/join (cons (first spl) (map clojure.string/capitalize (rest spl))))))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 102, "code": "(fn into-camel-case\n  [string]\n  (let [[f & remain] (clojure.string/split string #\"-\")]\n    (str f (apply str (map clojure.string/capitalize remain)))))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 102, "code": "(fn [w]\n  (let [s (clojure.string/split w #\"-\")]\n    (clojure.string/join \"\" (cons (first s)\n                                  (map clojure.string/capitalize (rest s))))))", "user": "4eb97234535dfed6da9c6d53"}, {"problem": 102, "code": "(fn convert [dashstr]\n\t(let [\n\t\tsplit (clojure.string/split dashstr #\"-\")\n\t\tconvert #(apply str (concat (clojure.string/upper-case (first %)) (subs % 1)))\n\t\tconverted (map convert (rest split))\n\t\t]\n\t\t(clojure.string/join \"\" (cons (first split) converted))\n\t)\t\n)", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (%1 1))))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 102, "code": "(fn into-camel-case\n  [s]\n  (let [parts (clojure.string/split s #\"-\")]\n    (clojure.string/join (cons (first parts) (map clojure.string/capitalize (rest parts))))))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 102, "code": "(fn [s]\n  (let [ss (clojure.string/split s #\"-\")]\n    (apply str (first ss) (map clojure.string/capitalize (rest ss)))))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 102, "code": "(fn [s] (->> (clojure.string/split s #\"-\")\n             (#(if-let [ss (next %)] (into [(first %)] (map clojure.string/capitalize ss)) %))\n             (clojure.string/join \"\")))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 102, "code": "(fn [s]\n  (let [words (.split s \"-\")\n        ends (map clojure.string/capitalize (rest words))]\n    (apply str (first words) ends)))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 102, "code": "(fn [s]\n  (reduce\n    #(reduce\n       str\n       (list* %1 (Character/toUpperCase ^Character (first %2)) (rest %2)))\n    (re-seq #\"[^-]+\" s)))", "user": "5f300f28e4b033932238a682"}, {"problem": 102, "code": "(fn [s]\n  (->> \n  (map (fn [v d] (if (= d \\-) (clojure.string/upper-case v) v)) (into [] s) (concat \"a\" s))\n  (filter (fn [c] (not (= c \\-))))\n  (apply str)))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 102, "code": "#(let [t (clojure.string/split % #\"-\")] (apply str (first t) (map clojure.string/capitalize (rest t))))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 102, "code": "(fn\n  [s]\n  (clojure.string/join (map-indexed (fn [idx word] (if (zero? idx) word (clojure.string/capitalize word))) (clojure.string/split s #\"\\-\"))))", "user": "5f274aeee4b0857314092c92"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"\\-\")]\n    (->> (map clojure.string/capitalize (rest words))\n         (reduce str (first words))))", "user": "5f476a39e4b0102c7503392f"}, {"problem": 102, "code": "(fn [s]\n   (clojure.string/join\n    (map #(if (not= %1 0)\n            (clojure.string/capitalize %2)\n            %2)\n         (range) (clojure.string/split s #\"-\"))))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 102, "code": "(fn [input]\n  (->>\n   (clojure.string/split input #\"-\")\n   ((fn [words] (cons (first words) (map clojure.string/capitalize (rest words)))))\n   (clojure.string/join)))", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 102, "code": "(fn [kebap-case]\n  \n  (reduce\n   #(str %1 (.toUpperCase (.substring %2 0 1)) (.substring %2 1))\n   (clojure.string/split kebap-case #\"-\")))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 102, "code": "#(->> (clojure.string/split % #\"-\")\n      ((fn [coll] (cons (first coll) (map clojure.string/capitalize (rest coll)))))\n      (apply str))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 102, "code": "; stolen elegant solution (fn [w] (clojure.string/replace w #\"-(.)\" #( clojure.string/capitalize (second %))))\n(fn [coll]\n   (let [front (first (clojure.string/split coll #\"-\"))\n         body  (rest (clojure.string/split coll #\"-\")) ]\n     (clojure.string/join \n      \t  (cons front\n          (map clojure.string/capitalize body)))\n     )\n   )", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 102, "code": "(fn to-camel\n  [s]\n  (clojure.string/join \"\"\n                       (map-indexed (fn [idx s]\n                                      (if (= idx 0)\n                                        s\n                                        (clojure.string/capitalize s)))\n              (clojure.string/split s #\"-\"))))", "user": "5a514e68e4b05d388ecb6be5"}, {"problem": 102, "code": "(fn [s]\n  (let [ws (clojure.string/split s #\"-\")\n        fst (first ws)\n        rst (map clojure.string/capitalize (rest ws))\n        res (concat [fst] rst) ]\n    (println s ws fst rst res)\n    (clojure.string/join res)\n    ))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 102, "code": "#(let [[a & r] (clojure.string/split % #\"-\")]\n  (apply str (cons a (map clojure.string/capitalize r))))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 102, "code": "(fn [string] \n  (let [words (clojure.string/split string #\"-\")]\n    (str (first words)\n         (apply str (map clojure.string/capitalize (drop 1 words))))))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 102, "code": "(fn [s]\n  (let [ws (clojure.string/split s #\"-\")]\n    (apply str (list*\n      (first ws)\n      (map #(str (clojure.string/upper-case (first %)) (apply str (rest %))) (rest ws))\n    ))\n  )\n  )", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 102, "code": "(fn ccase\n  [s]\n  (let [words (re-seq #\"\\w+\" s)]\n    (apply str \n           (first words) \n           (map clojure.string/capitalize (rest words)))))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 102, "code": "(fn [s]\n    (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (second %1))))", "user": "507e68abe4b085af06e3afd2"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-(.)\"  #(.toUpperCase (% 1))))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 102, "code": "(fn camc [s]\n  (let [wrds (re-seq #\"[a-zA-Z]+\" s)]\n    (apply str (conj (map clojure.string/capitalize (rest wrds))\n                     (first wrds)))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 102, "code": "(fn [in-string]\n  (let [words (clojure.string/split in-string #\"-\")]\n    (->> (concat [(first words)] (map clojure.string/capitalize (rest words)))\n         clojure.string/join)))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 102, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"-\")]\n    (apply str (cons (first words)\n                     (map clojure.string/capitalize (rest words))))))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 102, "code": "(fn into-camel-case [s]\n  (let [split-str (clojure.string/split s #\"-\")]\n    (clojure.string/join \n     \"\" \n     (cons (first split-str) (map clojure.string/capitalize (rest split-str))))))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 102, "code": "(fn [s] (apply str\n            (let [words (clojure.string/split s #\"-\")]\n              (conj (map clojure.string/capitalize (rest words))\n                    (first words)))))", "user": "5f985283e4b0715f5002d800"}, {"problem": 102, "code": "(fn [string]\n  (let [words (clojure.string/split string #\"-\")]\n    (apply str (cons (first words) (map clojure.string/capitalize (rest words))))))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 102, "code": "(fn [x] \n    (let [splitted (seq (.split x \"-\"))]\n        (str \n            (first splitted)\n            (reduce #(apply str %1 (str (Character/toUpperCase (first %2))) (rest %2)) \"\" (rest splitted)))))", "user": "5fb2eac0e4b08cb800c85b2f"}, {"problem": 102, "code": "(fn [s] \n  (clojure.string/replace s #\"-[a-z]\"  #(clojure.string/upper-case (subs %1 1)))\n  )", "user": "5fafa44ee4b08cb800c85b0e"}, {"problem": 102, "code": "(fn [x] (clojure.string/replace x #\"-(.)\"\n\n     (fn [[_ a]] (clojure.string/upper-case a))))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 102, "code": "(fn [q] (->> (clojure.string/split q #\"-\")\n              (#(cons (first %)\n                      (map (fn [y]\n                             (clojure.string/replace \n                              y #\"^.\"\n                              (fn [x] (clojure.string/upper-case x))))\n                           (rest %))))\n              (clojure.string/join)))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 102, "code": "(fn \n  [s]\n  (apply str\n   (loop [[c & cs] (seq s)\n          res []]\n     (cond\n       (nil? c) res\n       (= c \\-) (recur (rest cs) (conj res (Character/toUpperCase (first cs))))\n       :else    (recur cs (conj res c))))))", "user": "5fd14e13e4b07e53c2f3f031"}, {"problem": 102, "code": "(fn [s]\n  (let [v (clojure.string/split s #\"-\")]\n    (apply str (cons (first v) (map clojure.string/capitalize (rest v))))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 102, "code": "(fn [s] \n  (-> s\n      keyword\n      str\n      (subs 1)\n      (clojure.string/split #\"-\")\n      (#(apply str (first %) (seq (map clojure.string/capitalize (rest %)))))))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] (apply str (concat (first words) (map clojure.string/capitalize (rest words)))))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 102, "code": "(fn [word] (let [words (clojure.string/split word #\"-\")] (clojure.string/join (concat (first words) (map clojure.string/capitalize (rest words))))))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 102, "code": "(fn intoCamel\n  [str]\n  (let [l (clojure.string/split str #\"-\")]\n    (clojure.string/join (cons (first l) (map clojure.string/capitalize (rest l))))))", "user": "5f5e166ce4b02876ed9fcfed"}, {"problem": 102, "code": "(fn [x] (let [[s0 & ss] (clojure.string/split x #\"-\")] \n          (apply str (cons s0 (map clojure.string/capitalize ss)))))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 102, "code": "#(let [splitted (clojure.string/split % #\"-\")]\n    (apply str (first splitted) (map clojure.string/capitalize (rest splitted))))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 102, "code": "#(let [[h & rest-c] (re-seq #\"\\w+\" %)]\n     (->> rest-c\n          (map clojure.string/capitalize)\n          (cons h)\n          (clojure.string/join \"\")))\n\n;; #(let [[h & rest-c] (clojure.string/split % #\"-\")]\n;;      (->> rest-c\n;;           (map clojure.string/capitalize)\n;;           (cons h)\n;;           (clojure.string/join \"\")))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 102, "code": "(fn [s]\n  (let* [words (clojure.string/split s #\"-\")\n         head (first words)\n         tail (rest words)]\n        (str head (apply str (map clojure.string/capitalize tail)))))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 102, "code": "(fn [s]\n  (let [c (clojure.string/split s #\"-\")\n        f (fn [x] (str (clojure.string/upper-case (subs x 0 1)) (subs x 1)))]\n    (apply str (first c) (map f (rest c)))))", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 102, "code": "(fn into-camel [s]\n  (letfn [(update-camel-part [s]\n            (clojure.string/replace-first s #\"-\\w\" (clojure.string/upper-case (str (second s))))\n            )]\n    (let [snake-case (re-seq #\"-\\w+\" s)] \n      (if (nil? snake-case) \n        s\n        (reduce #(str %1 (update-camel-part %2)) (re-find #\"\\w+(?=-)\" s) snake-case))))\n)", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 102, "code": "(fn to-camel-case[s]\n  (let [a-seq (re-seq #\"[^-]+\" s)]\n    (apply str (first a-seq) (apply str (map clojure.string/capitalize (rest a-seq))))))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 102, "code": "(fn [s]\n  (loop [[h & t] s\n         result []\n         to-upper false]\n    (cond\n      (nil? h) (apply str result)\n      (= \\- h) (recur t result true)\n      to-upper (recur t (conj result (Character/toUpperCase h)) false)\n      :else (recur t (conj result h) false))))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 102, "code": "(fn [word]\n  (->> word\n       (#(clojure.string/split % #\"-\"))\n       (map-indexed #(if (not= 0 %)\n                         (apply str (cons (clojure.string/upper-case (first %2)) (rest %2)))\n                          %2\n                                  ))\n       (clojure.string/join \"\")\n  )\n  )", "user": "6004c750e4b074f607df6645"}, {"problem": 102, "code": "(fn [s]\n    (let [ws (clojure.string/split s #\"-\")]\n        (clojure.string/join (map-indexed (fn [i w] (if (= i 0) w (clojure.string/capitalize w))) ws))))", "user": "600ae927e4b074f607df6689"}, {"problem": 102, "code": "(fn f\n  [x]\n  (let [xs (clojure.string/split x #\"-\")]\n    (str (first xs)\n    (->> (rest xs)\n        (map #(str (clojure.string/upper-case (first %1)) (apply str (rest %1))))\n        (clojure.string/join \"\")))))", "user": "5da7176ae4b000c986472c13"}, {"problem": 102, "code": "#(let \n  [finalstr (clojure.string/split % #\"-\")]\n  \t(str \n     \t(first finalstr)\n       \t(clojure.string/join \n         \t(map clojure.string/capitalize \n           \t(rest finalstr)))))", "user": "60057cd4e4b074f607df664a"}, {"problem": 102, "code": "(fn [s] (clojure.string/replace s #\"-(\\w)\" #(.toUpperCase (% 1))))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 102, "code": "(fn [s]\n(let [[w & ws] (clojure.string/split s #\"-\")]\n(apply str w (map clojure.string/capitalize ws))))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 102, "code": "(fn camel-case [string]\n  (let [[h & t] (clojure.string/split string #\"-\")]\n    (clojure.string/join (cons h (map clojure.string/capitalize t)))))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 102, "code": "#(clojure.string/replace % #\"-(\\w)\" (fn [[a b]] (clojure.string/capitalize b)))", "user": "5f419985e4b0955706451fab"}, {"problem": 102, "code": "(fn intoCamelCase [k]\n  (let [words (clojure.string/split k #\"-\")]\n    (apply str \n           (first words)\n           (map (fn [word] (clojure.string/capitalize word)) \n                (rest words)))))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 102, "code": "(fn [x] (->> x\n             (#(clojure.string/split % #\"-\"))             \n             (#(cons (first %) (map clojure.string/capitalize (rest %))))\n             (clojure.string/join) ))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 102, "code": "(fn [word]\n (clojure.string/join \"\"\n  (let [sp (clojure.string/split word #\"\\-\")]\n   (cons (first sp) (map clojure.string/capitalize (rest sp))))))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 102, "code": "#(clojure.string/join \"\" (concat [(first (clojure.string/split % #\"-\"))] (map clojure.string/capitalize (rest (clojure.string/split % #\"-\")))))", "user": "5f309144e4b0574c87022c23"}, {"problem": 102, "code": "(fn [s]\n    (-> s\n        (clojure.string/split #\"-\")\n        ((fn [l] (map-indexed (fn [i w] (if (= i 0) w  (clojure.string/capitalize w))) l)))\n        (clojure.string/join)\n        ))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-\\w\" #(clojure.string/upper-case (subs %1 1))))", "user": "60096aabe4b074f607df667f"}, {"problem": 102, "code": ";; (fn [s] (replace (index-of s \\-))\n\n;; clojure.string/split\n\n(fn intoCamelCase [s]\n  (let [capitalize (fn [[x & xs]]\n         (clojure.string/join (conj xs (.toUpperCase (str x)))))\n          [fw & ow] (clojure.string/split s #\"-\")]\n        (apply str (conj (map capitalize ow) fw))))\n\n;; 113213's solution looks rather elegant:\n;; #(clojure.string/replace % #\"\\-.\" (comp clojure.string/upper-case last))", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 102, "code": "#(let [[f & r] (.split % \"-\")]\n      (apply str f (map clojure.string/capitalize r)))", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 102, "code": "(fn cc [s]\n  (cond (empty? s) \"\"\n    \t(= (first s) \\-) (str (clojure.string/upper-case (str (second s)))\n                              (cc (drop 2 s)))\n        :else (str (first s) (cc (rest s)))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 102, "code": "(fn [s]\n  (clojure.string/replace s #\"-([a-z])\" #(-> % second clojure.string/upper-case)))", "user": "5afecee2e4b0cc2b61a3bd28"}, {"problem": 102, "code": "(fn into-camelcase [s]\n  (loop\n      [[c d & more] s\n       acc []]\n    (cond\n      (and c d (= d \\-))\n      (recur (conj more d) (conj acc c))\n\n      (and c d (= c \\-))\n      (recur more (conj acc (Character/toUpperCase d)))\n\n      (and c d)\n      (recur more (conj acc c d))\n\n      c\n      (recur more (conj acc c))\n\n      :else\n      (apply str acc))))", "user": "601004d6e4b074f607df66b2"}, {"problem": 102, "code": "(fn [s]\n  (let [ws (.split s \"-\")]\n    (clojure.string/join (cons (first ws) \n                               (map #(clojure.string/capitalize %) (rest ws))))))", "user": "5fa5a6b1e4b0fa27300f3dc8"}, {"problem": 102, "code": "(fn [string] (clojure.string/replace string #\"\\-\\w\" #(.toUpperCase (subs % 1))))", "user": "5a778224e4b013a48d399761"}, {"problem": 102, "code": "#(->> (clojure.string/split % #\"-\")\n     ((fn [[f & r]] (conj (map clojure.string/capitalize r) f)))\n     (clojure.string/join \"\"))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 102, "code": "(fn into-camel-case\n  [s]\n  (-> s\n      (#(clojure.string/split % #\"-\"))\n      (#(concat [(first %1)] (map clojure.string/capitalize (rest %))))\n      (#(clojure.string/join %))))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 102, "code": "(fn a [s]\n  (let [s (clojure.string/split s #\"-\")]\n  (str (first s) (apply str( map clojure.string/capitalize (drop 1 s)))))\n  )", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 102, "code": "(fn [word]\n  (clojure.string/replace word #\"-(\\w)\" \n                          #(clojure.string/upper-case (second %1))))", "user": "603e063ae4b0d5df2af2230f"}, {"problem": 102, "code": "(fn [x]\n  (let\n    [parts (clojure.string/split x #\"-\")\n     rest-caps (map clojure.string/capitalize (rest parts))\n     new-parts (cons (first parts) rest-caps)\n     ]\n    (clojure.string/join new-parts)))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 102, "code": "(fn foo [string]\n    (let [temp \n        (-> string (clojure.string/split #\"-\"))]\n     (clojure.string/join \"\"\n        (cons (first temp) (map clojure.string/capitalize (rest temp))))))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 102, "code": "(fn [s] (let [s-split (clojure.string/split s #\"-\")] (clojure.string/join (cons (first s-split)(map clojure.string/capitalize (rest s-split))))))", "user": "5f5b624de4b05ea7b9adc42f"}, {"problem": 102, "code": "#(let [parts (clojure.string/split % #\"-\")\n      rest-parts (rest parts)\n      capitalized-rest (map clojure.string/capitalize rest-parts)]\n  (apply str (first parts) capitalized-rest))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")]\n  (clojure.string/join\n   (cons (first words)\n         (map clojure.string/capitalize (rest words)))))", "user": "60460824e4b02d28681c77bc"}, {"problem": 102, "code": "#(let [[h & t] (clojure.string/split % #\"-\")] (apply str (conj (map clojure.string/capitalize t) h)))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 102, "code": "(fn [x] (clojure.string/replace x #\"\\-.\"  #(str (clojure.string/upper-case (last %1)))))", "user": "6040f595e4b0d5df2af2232f"}, {"problem": 102, "code": "(fn camelcase\n  [s]\n  (apply str (flatten ((juxt first #(map clojure.string/capitalize (rest %)))\n                       (clojure.string/split s #\"[-_]\")))))", "user": "4e586949535d8a8b8723a292"}, {"problem": 102, "code": "#(let [[w & ws] (clojure.string/split % #\"-\")]\n   (->> ws\n        (map clojure.string/capitalize)\n        (cons w)\n        clojure.string/join))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 102, "code": "(fn __ [s]\n  (clojure.string/replace s #\"-(.)\"  #(.toUpperCase (%1 1))))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 102, "code": "(fn intoCamelCase[word]\n  (letfn [(firstLetter [s] (-> (str (first s))\n                               .toUpperCase))\n          (restPart[s] (reduce str (rest s)))]\n  (let [parts (.split word \"-\")]\n    (reduce #(str %1 (firstLetter %2) (restPart %2)) parts))))", "user": "5bab31f1e4b0a20761a23471"}, {"problem": 102, "code": "#(clojure.string/replace\n   %\n   #\"\\W\\w\"\n   (fn [x]\n     (clojure.string/upper-case (nth x 1))))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 102, "code": "(fn solve [s]\n  (let [sp (clojure.string/split s #\"-\")]\n    (apply str (first sp) (map clojure.string/capitalize (rest sp)))))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 102, "code": "(fn [names] (clojure.string/replace names #\"\\-[A-z]\" #(clojure.string/upper-case (last %))))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "60743977e4b069485764de46"}, {"problem": 102, "code": "(fn z [s]\n  (loop [result s]\n    (let [dash-index (.indexOf result \"-\")]\n      (if (neg? dash-index)\n        result\n        (recur\n          (str\n            (subs result 0 dash-index)\n            (clojure.string/upper-case (nth result (inc dash-index)))\n            (subs result (+ dash-index 2))))))))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 102, "code": "#(let [words (clojure.string/split % #\"-\")] \n    (str (first words) \n         (apply str (map clojure.string/capitalize (drop 1 words)))))", "user": "606ff89be4b069485764de22"}, {"problem": 102, "code": "(fn x [s]\n    (let [w (clojure.string/split s #\"-\")]\n      (clojure.string/join (cons (first w) (map clojure.string/capitalize (rest w))))))", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 102, "code": "(fn [s]\n  (let [cap (clojure.string/replace s #\"(?<=\\-)[a-z]\" #(.toUpperCase %))]\n    (clojure.string/replace cap #\"\\-\" \"\")))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 102, "code": "#(let [g (clojure.string/split % #\"-\")]\n  (apply \n   str \n   (concat (first g)\n           (map (fn [x] (clojure.string/capitalize x)) (rest g)))))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 102, "code": "(fn camel-case\n  [s]\n  (reduce (fn [my-str item]\n            (if (= (last my-str) \\-)\n              (str (clojure.string/replace my-str #\"-\" \"\") (clojure.string/upper-case item))\n              (str my-str item))) \"\" s))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 102, "code": "(fn [^String method-name]\n  (clojure.string/replace method-name #\"-(\\w)\" \n                          #(clojure.string/upper-case (second %1))))", "user": "6093b56ce4b00e9e6653c3e0"}, {"problem": 102, "code": ";(fn [s]\n;  (let [[fst & rst] (re-seq #\"\\w+\" s)]\n;    (apply str fst (map clojure.string/capitalize rst))))\n(fn [s]\n  (clojure.string/replace s #\"-\\w\" #(clojure.string/upper-case (subs % 1))))", "user": "60794173e4b0a637ed78035d"}, {"problem": 102, "code": "(fn [string]\n  (->> coll\n       rest\n       (map clojure.string/capitalize)\n       (apply str (first coll))\n       (let [coll (clojure.string/split string #\"-\")])))", "user": "60a42199e4b00e9e6653c454"}, {"problem": 102, "code": "(fn into-camel-case\n  [s]\n  (let [[first-part & other-parts] (clojure.string/split s #\"-\")]\n    (apply str first-part (map clojure.string/capitalize other-parts))))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 102, "code": "(fn [string]\n  (let [words (clojure.string/split string #\"-\")\n        first-words (first words)\n        rest-words (rest words)] \n    (if (empty? rest-words)\n      first-words\n      (clojure.string/join (conj (map clojure.string/capitalize rest-words) first-words)))))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 102, "code": "(fn [s]\n  (let [[x & xs] (clojure.string/split s #\"-\")\n        capitalized-xs (map clojure.string/capitalize xs)\n        tokens (apply vector x capitalized-xs)]\n    (clojure.string/join tokens)))", "user": "4fe49706e4b0e8f79898feb7"}, {"problem": 102, "code": "(fn [text]\n  (->> text\n       (re-seq #\"[^-]+\") \n       ((fn [x] (cons (first x) (map clojure.string/capitalize (rest x))))) \n       (clojure.string/join \"\")))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 102, "code": "(fn [s]\n  (let [rep clojure.string/replace\n        upper clojure.string/upper-case]\n    (rep s #\"-.\" #(upper (second %1)))))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 102, "code": "(fn [w]\n  (let [sub-ws (clojure.string/split w #\"-\")\n        cap-sub-ws (cons (first sub-ws) (map clojure.string/capitalize (rest sub-ws)))]\n    (clojure.string/join \"\" cap-sub-ws)))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 102, "code": "(fn f [s] (clojure.string/replace s #\"-(.)\" #(.toUpperCase (%1 1))))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 102, "code": "(fn [s]\n  (let [sSplited (clojure.string/split s #\"-\")\n        c (count sSplited)\n        f (first sSplited)]\n    (if (= c 1) s \n        (->> sSplited\n             (rest)\n             (map #(clojure.string/capitalize %))\n             (clojure.string/join \"\")\n             (str f)))))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 102, "code": "(fn camel-case\n  [s]\n  (->> (clojure.string/split s #\"-\")\n       (#(cons (first %) (map clojure.string/capitalize (rest %))))\n       (clojure.string/join)))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 102, "code": "(fn [s]\n  (let [[s1 & ss] (clojure.string/split s #\"-\")]\n    (str s1 (clojure.string/join \"\" (map clojure.string/capitalize ss)))))", "user": "59419bdfe4b060784b3b78f7"}]