[{"code": "#(proxy [] [])", "problem": 113, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn [& stuff]\n  (reify\n   Object\n   (toString [_] (apply str (interpose \", \" (sort stuff))))\n\n   clojure.lang.Seqable\n   (seq [_] (seq (distinct stuff)))))", "problem": 113, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "(fn [& x]\n  (reify\n    Object\n    (toString [this]\n      (clojure.string/join \", \"\n                           (sort x)))\n\n    clojure.lang.Seqable\n    (seq [this]\n      (seq (distinct x)))))", "problem": 113, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "(fn dance [& xs]\r\n  (reify\r\n\t\tObject\r\n\t\t(toString [this]\r\n\t\t\t(apply str (interpose \", \" (sort xs))))\r\n\t\tclojure.lang.Seqable\r\n\t\t(seq [this]\r\n\t\t\t(seq (distinct xs)))))", "problem": 113, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn [ & q]\n(reify clojure.lang.Seqable\n(seq [t] (if (seq q) (distinct q)))\n(toString [t] \n  (apply str (interpose \", \" (sort q)))) ))", "problem": 113, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn [& xs]\r\n  (reify\r\n    CharSequence\r\n    (toString [this] (apply str (interpose \", \" (sort xs))))\r\n    clojure.lang.Seqable\r\n    (seq [this] (if (empty? xs) nil (distinct xs)))))", "problem": 113, "user": "4dc1ee85535d020aff1edf91"}, {"code": "(fn\n  [& xs]\n    (reify Object\n           (toString [this] (apply str (interpose \", \" (map str (sort xs)))))\n           clojure.lang.Seqable\n           (seq [this] (seq (distinct xs)))))", "problem": 113, "user": "4db53f87535d87e67b28fe08"}, {"code": "(fn[& a-seq]\n  (letfn[(as-str[a-seq]\n                (apply str (interpose \", \" (sort a-seq))))\n         (as-seq[a-seq]\n                (distinct a-seq))]\n    (reify clojure.lang.Seqable (seq [this] (if (empty? a-seq) nil (as-seq a-seq)))\n           java.lang.Object (toString [this] (as-str a-seq)))))", "problem": 113, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "#(if %&\n  (reify\n   clojure.lang.ISeq\n   (toString [_] (apply str (interpose \", \" (sort %&))))\n   (seq [_] (distinct %&))))", "problem": 113, "user": "4dce6e41535d5973398f92a2"}, {"code": "#(reify clojure.lang.Seqable\n         (seq [_] (seq (distinct %&)))\n         (toString [_] (apply str (interpose \", \" (sort %&)))))", "problem": 113, "user": "4e52d815535d302ef430da77"}, {"code": "(fn dance [& args]\n  (reify Object (toString [this] (apply str (interpose \", \" (sort args))))\n  \t clojure.lang.Seqable (seq [this] (seq (distinct args)))))", "problem": 113, "user": "4e50c894535dc968683fc4ee"}, {"code": "(fn [& s]\n  (let [r (fn [c]\n  (apply str (rest (interleave (repeat \", \") (sort c)))))]\n    (reify clojure.lang.Seqable\n    (toString [t] (if (nil? s) \"\" (r s)))\n    (seq [t] (if (nil? s) nil (distinct s))))))", "problem": 113, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn[& s](reify\nclojure.lang.Seqable(seq[_](seq(distinct\ns)))(toString[_](clojure.string/join\", \"(sort s)))))", "problem": 113, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn [& xs]\n  (reify \n    Object (toString [this] (->> (sort xs)\n                              (interpose \", \")\n                              (apply str)))\n    clojure.lang.Seqable (seq [this]\n                              (seq (reduce #(if (some #{%2} %1)\n                                         %1\n                                         (conj %1 %2))\n                                      [] xs)))))", "problem": 113, "user": "4dc537fd535d8a4b2fd74282"}, {"code": "(fn[& xs](reify Object(toString[_](clojure.string/join\", \"(sort xs)))clojure.lang.Seqable(seq[_](seq(distinct xs)))))", "problem": 113, "user": "4dd4034a535dae65d5c462df"}, {"code": "#(reify\n  Object\n  (toString [_] (apply str (interpose \", \" (sort %&))))\n  clojure.lang.Seqable\n  (seq [_] (loop [[a & b :as s] %& r nil]\n              (cond (empty? s) \n                     (when r (reverse r))\n                    ((into #{} r) a) (recur b r)\n                    0 (recur b (conj r a))))))", "problem": 113, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn [& args]\n  (reify\n    CharSequence (toString [this] (if args\n                                    (reduce #(str %1 \", \" %2) (sort args))\n                                    \"\"))\n    clojure.lang.Seqable (seq [this]\n                           (seq (reduce #(if ((set %1) %2) %1 (conj %1 %2))\n                                        [] args)))))", "problem": 113, "user": "4db4714f535dc0f10411755a"}, {"code": "(fn [& xs]\n  (reify Object\n    (toString [this]\n      (apply str (interpose \", \" (sort xs))))\n  clojure.lang.Seqable\n  (seq [this] (when (seq xs) (distinct xs)))))", "problem": 113, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn [& coll]\n  (reify\n    Object\n    (toString [this] (apply str (interpose \", \" (sort coll))))\n    Iterable\n    (iterator [this] (.iterator (distinct coll)))))", "problem": 113, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn [& l] \r\n  (reify \r\n\t  Object\r\n\t  (toString [this](reduce str (interpose \", \" (sort l))))\r\n\t  clojure.lang.Seqable \r\n\t  (seq [this] (seq (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] l)))\r\n\t  ))", "problem": 113, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn [& xs]\n  (reify\n   Object (toString [_] (apply str (interpose \", \" (sort xs))))\n   clojure.lang.Seqable (seq [_] (seq (if (empty? xs) nil (java.util.LinkedHashSet. xs))))))", "problem": 113, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn [& values]\n  (reify clojure.lang.Seqable\n    (toString [this]\n      (apply str (interpose \", \" (sort values))))\n    (seq [this]\n      (if (empty? values)\n        nil\n        (distinct values)))))", "problem": 113, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn [& xs]\n  (reify clojure.lang.Seqable\n    (seq [this] (seq (distinct xs)))\n    (toString [this] (apply str (interpose \", \" (sort xs))))))", "problem": 113, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn [& s]\n  (reify \n    Object \n      (toString [_] \n        (clojure.string/join \", \" (sort s)))\n    clojure.lang.Seqable\n      (seq [_] (if (empty? s) nil (distinct s)))))", "problem": 113, "user": "4db85282535d1e037afb218a"}, {"code": "(fn [& s]\n  (reify Object\n    (toString [_] (apply str (interpose \", \" (sort s))))\n    clojure.lang.Seqable\n    (seq [_] (seq (distinct s)))))", "problem": 113, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn dd [& x]\n  (reify\n    Object (toString [this] (apply str (interpose \", \" (sort x))))\n    clojure.lang.Seqable (seq [this] (seq (distinct x)))))", "problem": 113, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn [& s] (reify\n    clojure.lang.Seqable\n    (seq [_] (seq (distinct s)))\n    (toString [_]\n      (clojure.string/join \", \" (sort s)))))", "problem": 113, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [& args]\n      (reify \n        clojure.lang.ISeq\n          (toString [_] (apply str (interpose \", \" (sort args))))\n          (seq      [_] (seq (distinct args)))\n          ))", "problem": 113, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn dance [& args]\n        (let [the-str (apply str (interpose \", \" (sort args)))\n              the-seq (if args (distinct args) nil)]\n          (reify\n            Object\n            (toString [this] the-str)\n            clojure.lang.Seqable\n            (seq [this] the-seq))))", "problem": 113, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [& xs*]\n  (let [\n  xs (if (nil? xs*) '() xs*)\n  join (fn [comma xs]\n    (->> xs sort (map str) (interpose comma) (apply str)))\n  ]\n  (reify clojure.lang.Seqable\n    (seq [this] (seq (new java.util.LinkedHashSet xs)))\n    (toString [this] (join \", \" xs)))))", "problem": 113, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "(fn [& ns]\n  (let [\n      a1 (fn [ns] (apply str (interpose \", \" (sort ns))))\n      a2 (fn [ns] (reduce (fn [coll it] (if (some #{it} coll) coll (conj coll it))) [] ns))]\n    (reify\n      Object\n        (toString [this] (a1 ns))\n      clojure.lang.Seqable\n        (seq [this] (seq (a2 ns))))))", "problem": 113, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn [& ints]\n  (reify\n    Object\n    (toString [this] (apply str (interpose \", \" (sort ints))))\n    clojure.lang.Seqable\n    (seq [this] (when ints (distinct ints)))))", "problem": 113, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "#(reify\n  Object\n  (toString [_] (clojure.string/join \", \" (sort %&)))\n  clojure.lang.Seqable\n  (seq [_] (seq (distinct %&))))", "problem": 113, "user": "4dbb0b6c535d1e037afb21b0"}, {"code": "#(reify \n  Object\n  (toString [t] \n    (apply str (interpose \", \" (sort %&))))\n  clojure.lang.Seqable\n  (seq [t] (seq (distinct %&))))", "problem": 113, "user": "4e823ed7535db62dc21a62c7"}, {"code": "(fn [& xs]\n  (reify clojure.lang.Seqable\n    (seq [self] (seq (distinct xs)))\n    (toString [self] (apply str (interpose \", \" (sort xs))))))", "problem": 113, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn data-dance\r\n  [& args]\r\n\t(letfn [(trim [lista] \r\n\t\t\t\t\t\t(reduce #(concat %1 (if (some #{%2} %1) [] [%2])) nil lista))]\r\n\t\t(reify clojure.lang.ISeq (toString [self] \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t (apply str (drop-last (interleave (sort args) (repeat \", \")))))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t (seq [self] (trim args)))))", "problem": 113, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn [& xs]\n    (reify\n      Object\n        (toString [this] (apply str (interpose \", \" (sort xs))))\n      Iterable\n        (iterator [this] \n          (.iterator \n            (first \n              (reduce \n                (fn [[acc v] x]\n                  (if (v x)\n                    [acc v]\n                    [(conj acc x) (conj v x)])) [[] #{}] xs))))))", "problem": 113, "user": "4dbad895535d1e037afb21ae"}, {"code": "(fn foo [& as]\n  (reify clojure.lang.ISeq\n    (toString [this] (apply str (interpose \", \" (sort as))))\n    (seq [this] (if (nil? as) nil (distinct as)))))", "problem": 113, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn [& coll]\n  (reify\n    Object\n      (toString [this] (clojure.string/join \", \" (sort coll)))\n    clojure.lang.Seqable (seq [this] (if (empty? coll) nil (distinct coll)))))", "problem": 113, "user": "4e994541535dbda64a6f6b64"}, {"code": "(fn [& s]\r\n (reify\r\n  Object\r\n  (toString [this]\r\n   (apply str (interpose \", \" (sort s))))\r\n  clojure.lang.Seqable\r\n  (seq [this] (seq (distinct s)))))", "problem": 113, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn [& n] \r\n       (reify\r\n  clojure.lang.ISeq\r\n       (toString [_] (apply str (interpose \", \" (sort n))))\r\n       (seq [_] (if n (distinct n)))))", "problem": 113, "user": "4dae4da5c9a9d6ed4e99dc57"}, {"code": "#(reify\n  clojure.lang.Seqable\n  (seq [_] (when %& (distinct %&)))\n  Object\n  (toString [_] (clojure.string/join \", \" (sort %&))))", "problem": 113, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn [& input]\n (reify clojure.lang.Seqable \n  (seq [this] (if input (distinct input)))\n  (toString [this] \n    (apply str (interpose \", \" (sort input))))))", "problem": 113, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn [& s]\n  (reify\n    clojure.lang.ISeq\n    (toString [_] (apply str (interpose \", \" (sort s))))\n    (seq [_] (seq (distinct s)))))", "problem": 113, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn f [& s]\n  (reify\n    Object\n    (toString [this]\n      (apply str (interpose \", \" (map str (sort s)))))\n    clojure.lang.Seqable\n    (seq [this]\n      (loop [s s acc () seen #{}]\n        (if s\n          (let [[x & s] s]\n            (if (seen x)\n              (recur s acc seen)\n              (recur s (conj acc x) (conj seen x))))\n          (seq (reverse acc)))))))", "problem": 113, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn p113 ([& col]\n             (let [sorted-col (sort col)\n                   deduce (fn deduce [col]\n                 (loop [result [] data col]\n                   (if (empty? data)\n                     result\n                     (let [item (first data)]\n                       (if (not (some #(= item %) result))\n                         (recur (conj result item) (rest data))\n                         (recur result (rest data))\n                         )))))\n                   insert-order-col (deduce col)\n                   ]\n               (reify clojure.lang.Seqable\n                 (toString [this] (apply str (interpose \", \" sorted-col)))\n                 (seq [this] (seq insert-order-col))\n\n                 )\n               )\n             )\n\n  ([] (reify clojure.lang.Seqable\n\n        (toString [this] \"\")\n        (seq [this] nil)))\n  )", "problem": 113, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn [& xs]\n  (reify clojure.lang.Seqable\n         (toString [this]\n           (apply str\n                  (interpose \", \" (sort xs))))\n         (seq [this] (seq (distinct xs)))))", "problem": 113, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "#(reify\n   Object\n   (toString [_]\n     (apply str (interpose \", \" (sort %&))))\n   clojure.lang.Seqable\n   (seq [_]\n     (seq (distinct %&))))", "problem": 113, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [ & l] (if l  \n  (reify\n   clojure.lang.Seqable\n   (toString [_] (->> l sort (clojure.string/join \", \")))\n   (seq [_] (distinct l))) nil ))", "problem": 113, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (seq [_] (seq (distinct args)))\n    (toString [_] (clojure.string/join \", \" (sort args)))))", "problem": 113, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "(fn f [& l]\n  (reify clojure.lang.ISeq\n    (seq [_] (if (empty? l) nil (distinct l)))\n    (toString [_] (apply str (interpose \", \" (sort l))))))", "problem": 113, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn [ & r ]\n  (reify clojure.lang.Seqable \n    (seq [this] \n      (seq (reduce #(if (some #{%2} %) % (conj % %2)) [] r))) \n    (toString [this] \n      (if (empty? r) \"\"\n          (reduce #(str % \", \" %2) (sort r))))))", "problem": 113, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn [& x]\n  (if x \n    (reify\n      clojure.lang.Seqable\n        (toString [_] (apply str (interpose \", \" (sort x))))\n        (seq [_] (distinct x)))))", "problem": 113, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn [& s]\n  (reify clojure.lang.Seqable\n    (toString [this] (apply str (interpose \", \" (sort s))))\n    (seq [this] (if (empty? s) nil (distinct s)))))", "problem": 113, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn [& args] \n  (reify \n    Object\n    (toString [this] \n      (apply str (interpose \", \" (sort args))))\n\n    clojure.lang.Seqable\n    (seq [this] (let [res (distinct args)] \n      (if (empty? res) nil res)))\n\n))", "problem": 113, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn [& in]\n    (reify\n      Object\n      (toString [this]\n                (apply str (interpose \", \" (sort in))))\n      clojure.lang.Seqable\n      (seq [this]\n           (seq (distinct in)))))", "problem": 113, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn [& f] \n        (reify \n          clojure.lang.Seqable (toString [_] (apply str (interpose \", \" (map str (sort f))))) \n          (seq [_] (seq (distinct f)))))", "problem": 113, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn foo [& v]\n  (reify \n    Object (toString [this] (apply str (interpose \", \" (sort v))))\n    clojure.lang.Seqable (seq [this] (seq (distinct v)))))", "problem": 113, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn [& args] (reify Object (toString [this] (apply str (interpose \", \" (map str (sort args))))) clojure.lang.Seqable (seq [this] (seq (distinct args)))))", "problem": 113, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn raro [& ints]\n  (reify clojure.lang.Seqable \n    (seq [_] (seq (distinct ints)))\n    (toString [_] \n      (clojure.string/join \n        \", \" \n        (seq (sort ints))))))", "problem": 113, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn data-dance [& x]\n        (reify clojure.lang.ISeq\n          (toString [_] (apply str (interpose \", \" (sort < x))))\n          (seq [_] (if (empty? x) nil (distinct x)))))", "problem": 113, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn [ & args]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    (seq [this] (if (empty? args) nil (distinct args)))))", "problem": 113, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn [& items]\n  (reify clojure.lang.Seqable\n    (toString [this] (apply str (interpose \", \" (sort items))))\n    (seq [this] (seq (reduce (fn [r x] (if (some #{x} r) r (conj r x))) [] items)))))", "problem": 113, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn [& s]\n  (let [as-str (apply str (interpose \", \" (sort s)))\n    as-seq (if (empty? s) nil (distinct s))]\n  (reify\n    clojure.lang.Seqable\n    (toString [this] as-str)\n    (seq [this] as-seq))))", "problem": 113, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn prob-0113\n  [& xs]\n  (reify\n    Object \n    (toString [this]\n      (apply str (interpose \", \" (sort xs))))\n    clojure.lang.Seqable \n    (seq [this]\n      (let [red-fn (fn [[acc seen] x]\n                     (if (contains? seen x)\n                       [acc seen]\n                       [(conj acc x) (conj seen x)]))\n            res (first (reduce red-fn [[] #{}] xs))]\n        (if (empty? res)\n          nil\n          (seq res))))))", "problem": 113, "user": "4f047c07535dcb61093f6bcd"}, {"code": "#(reify \n    clojure.lang.ISeq\n      (toString [_] \n        (apply str (interpose \", \" (sort %&))))\n      (seq [_] (seq (distinct %&))))", "problem": 113, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn making-data-dance [& xs]\n  (reify\n    clojure.lang.Seqable\n    (toString [this] (apply str (interpose \", \" (sort xs))))\n    (seq [this] (if (empty? xs) nil (distinct xs)))))", "problem": 113, "user": "4f0e995e535d0136e6c22326"}, {"code": "#(reify\n     clojure.lang.Seqable (seq [_] (if (next %&) (distinct %&)))\n     Object (toString [_] (apply str (interpose \", \" (sort %&))))\n     )", "problem": 113, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn [& x]\n  (reify clojure.lang.ISeq\n    (toString [_] (apply str (interpose \", \" (sort x))))\n    (seq [_] (seq (distinct x)))))", "problem": 113, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [& is]\n    (reify clojure.lang.Seqable\n      (toString [this]\n        (apply str (interpose \", \" (sort is))))\n      (seq [this]\n        (loop [is is\n               seen #{}\n               answer []]\n          (cond (empty? is) (seq answer)\n                (some #{(first is)} seen) (recur (next is) seen answer)\n                :else (recur (next is) (conj seen (first is)) (conj answer (first is))))))))", "problem": 113, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn [& r]\n  (reify Object\n    (toString [this] (clojure.string/join \", \" (map str (sort r))))\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct r)))))", "problem": 113, "user": "4e7dd982535db169f9c796ee"}, {"code": "#(reify clojure.lang.Seqable \n   (seq [this] (if %& (distinct %&)))\n   (toString [this] (apply str (interpose \", \" (sort %&)))))", "problem": 113, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn r[& elems]\n  (reify \n\t\tclojure.lang.ISeq\n\t\t(toString[_] (apply str (interpose \", \" (sort elems))))\n\t\t(seq[_] (seq (distinct elems)))))", "problem": 113, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [& args]\n  (reify\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct args)))\n    (toString [this] (apply str (interpose  \", \" (sort args))))))", "problem": 113, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn [& args] \n  (reify \n    clojure.lang.Seqable (seq [this] (if (empty? args) nil (distinct args)))\n    Object (toString [this] \n      (if (empty? args) \"\" (loop [s (sort args) r \"\"] \n        (if-not (= 1 (count s)) \n          (recur (rest s) (str r (first s) \", \")) \n          (str r (first s))))))))", "problem": 113, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn [& r]\n  (let [coll r]\n    (reify\n      Object\n      (toString [this]\n        (apply str (interpose \", \" (sort coll) )))\n      clojure.lang.Seqable\n        (seq [this] (if (empty? coll) nil (distinct coll))))))", "problem": 113, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    (seq [this] (if (empty? args) nil (distinct args)))\n  )\n)", "problem": 113, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn data-dance [& xs]\r\n  (reify clojure.lang.Seqable \r\n    (toString [_] (apply str (interpose \", \" (sort xs))))\r\n    (seq [_] (seq (distinct xs)))))", "problem": 113, "user": "4f13047d535d64f60314642c"}, {"code": "(fn [& c]\n  (reify\n    clojure.lang.Seqable\n    (seq [_] (seq (distinct c)))\n    Object\n    (toString [_] (apply str (interpose \", \" (sort c))))))", "problem": 113, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn [& s]\n  (when s\n    (reify\n      clojure.lang.ISeq\n      (seq [self] (distinct s))\n      (toString [self] (apply str (interpose \", \" (sort s)))))))", "problem": 113, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "#(reify Object clojure.lang.Seqable\n   (toString [_] (clojure.string/join \", \" (sort %&)))\n   (seq [_] (seq (distinct %&))))", "problem": 113, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn dance [& is]\r\n  (reify Iterable \r\n    (toString [this] \r\n      (apply str (interpose \", \" (sort is))))\r\n    (iterator [this] \r\n      (.iterator\r\n        (map first\r\n          (filter \r\n\t          #(nil? ((second %) (first %)))\r\n\t          (map vector is (reductions conj #{} is))))))))", "problem": 113, "user": "4f569218e4b0a7574ea71826"}, {"code": "#(reify\n   Object\n   (toString [this] (apply str (interpose \", \" (sort %&))))\n   clojure.lang.Seqable\n   (seq [this] (if %& (distinct %&) nil)))", "problem": 113, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [& a]\n  (reify\n    Object\n    (toString [this]\n      (clojure.string/join \", \" (sort a)))\n    clojure.lang.Seqable\n    (seq [this]\n      (and a (distinct a)))))", "problem": 113, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn dancer [& xs]\n  (reify clojure.lang.Seqable\n    (seq [_] (seq (reduce #(if ((set %) %2) % (conj % %2)) [] xs)))\n    (toString [_] (clojure.string/join \", \" (sort xs)))))", "problem": 113, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "#(reify clojure.lang.ISeq\n   (toString [_]\n     (apply str (interpose \", \" (sort %&))))\n   (seq [_]\n     (seq (distinct %&))))", "problem": 113, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn [& xs]\n  (reify \n    Object \n      (toString [this] \n        (apply str (interpose \", \" (sort xs)))) \n    clojure.lang.Seqable\n      (seq [this]\n        (seq (distinct xs)))))", "problem": 113, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn [& xs]\n  (reify clojure.lang.Seqable\n    (toString [this]\n      (apply str (interpose \", \" (sort xs))))\n    (seq [this]\n      (if (not (empty? xs))\n        (distinct xs)))))", "problem": 113, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn change[& val] \r\n      (reify  clojure.lang.Seqable  \r\n          (toString [this]\r\n                    (if (nil? val)\r\n                      \"\"\r\n                     (apply str (interpose \", \" (sort val) ))  )\r\n                     )\r\n          (seq [this] \r\n                    (if (nil? val)\r\n                         nil\r\n                        (distinct val) \r\n                        )\r\n      )\r\n      )\r\n)", "problem": 113, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn [& ns]\n        (reify\n\n          clojure.lang.Seqable \n          (seq [this]\n            (-> (fn [{:keys [acc remaining-numbers]} val]\n                  {:acc (if-not (nil? (remaining-numbers val))\n                          (conj acc val)\n                          acc)\n                   :remaining-numbers (disj remaining-numbers val)})\n                (reduce {:acc [] :remaining-numbers (set ns)} ns)\n                :acc\n                seq\n             ))\n\n          Object\n          (toString [this]\n            (clojure.string/join \", \" (sort ns))))\n        )", "problem": 113, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn f [& x]\n  (reify\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct x)))\n    Object\n    (toString [this] (clojure.string/join \", \" (sort x)))))", "problem": 113, "user": "4facd2fae4b081705acca22f"}, {"code": "#(if %&\n  (reify\n   clojure.lang.ISeq\n   (toString [_] (apply str (interpose \", \" (sort %&))))\n   (seq [_] (distinct %&))))", "problem": 113, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn [& items]                                                                                   \n  (reify\n    Object                                                                                \n      (toString [this] (clojure.string/join \", \" (sort items)))                                  \n    clojure.lang.Seqable                                                                       \n      (seq [this] (if (seq items) (distinct items)))                                                              \n          ))", "problem": 113, "user": "4f1d1299535d64f603146487"}, {"code": "(fn [& args]\n  (reify Iterable\n    (iterator [this] (.iterator (distinct args)))\n    (toString [this] (->> (sort args)\n                      (interpose \", \")\n                      (apply str)))))", "problem": 113, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "(fn [& args]\n  (let [data (loop [args args seen #{} acc []]\n               (if (seq args)\n                 (if (seen (first args))\n                   (recur (rest args) seen acc)\n                   (recur (rest args) (conj seen (first args)) (conj acc (first args))))\n                 acc))\n        text (apply str (interpose \", \"(sort args)))]\n    (reify clojure.lang.Seqable (seq [this] (seq data))\n      Object (toString [this] text))))", "problem": 113, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn dance [& s]\n  (reify clojure.lang.Seqable\n    (toString [_]\n      (clojure.string/join \", \" (sort s)))\n    (seq [_]\n      (seq (distinct s)))))", "problem": 113, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn [& args]\n  (let [s (apply str (interpose \", \" (sort args)))\n        l (distinct args)]\n    (reify clojure.lang.Seqable \n        (seq [this] (seq l))\n        (toString [this] s)\n        )))", "problem": 113, "user": "4faec810e4b081705acca24e"}, {"code": "(fn [& args]\n  (if args\n    (reify\n      clojure.lang.Seqable\n      (toString [this] (apply str (interpose \", \" (sort args))))\n      (seq [this] (distinct args)))))", "problem": 113, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn dance [& s]\n  (reify Object               (toString [this] (apply str (interpose \", \" (sort s))))\n         clojure.lang.Seqable (seq [this] (if (empty? s) nil (distinct s)))))", "problem": 113, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [& x]\n    (reify\n      Object (toString [this] (if (seq x) (apply str (interpose \", \" (sort x)))  \"\"))\n      clojure.lang.Seqable (seq [this] (if (seq x) (distinct x) nil))))", "problem": 113, "user": "4fc67081e4b0ee37620e1813"}, {"code": "(fn [& coll]\n  (reify\n    clojure.lang.Seqable\n    (seq [_] (and coll (distinct coll)))\n    (toString [_] (apply str (interpose \", \" (sort coll))))))", "problem": 113, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [& xs]\n  (reify\n  Object\n  (toString [_] (if xs (clojure.string/join \", \" (sort xs)) \"\"))\n  clojure.lang.Seqable\n  (seq [_] (seq (distinct xs)))))", "problem": 113, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn [& xs]\n  (reify Object\n    (toString [this] (apply str (interpose \", \" (sort xs))))\n    clojure.lang.Seqable\n      (seq [this] (seq (distinct xs)))))", "problem": 113, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn [& s]\n  (reify clojure.lang.Seqable\n    (toString [_]\n      (apply str (interpose \", \" (sort s))))\n    (seq [_] (seq (distinct s)))))", "problem": 113, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn q113 [& coll]\n  (let [ s (apply str (interpose \", \" (sort coll)))\n         unique-coll (distinct coll) ]\n    (reify \n      Object\n      (toString [this] s)\n      java.lang.Iterable\n      (iterator [this] (.iterator unique-coll)))))", "problem": 113, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [& args]\n  (reify\n    Object (toString [this] (clojure.string/join \", \" (sort args)))\n    clojure.lang.Seqable (seq [this] (if (empty? args) nil (distinct args)))))", "problem": 113, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn [& s]\r\n  (reify\r\n    clojure.lang.Seqable\r\n    (seq [_] (seq (distinct s)))\r\n    (toString [_]\r\n      (clojure.string/join \", \" (sort s)))))", "problem": 113, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn ddance [& args] \n    (reify \n      clojure.lang.IPersistentCollection\n      (toString [this] \n                (apply str (interpose \", \" (map str (sort args)))))\n      (seq [this]\n           (if (empty? args) nil (distinct args)))))", "problem": 113, "user": "4faafccde4b081705acca209"}, {"code": "#(reify \n  clojure.lang.ISeq \n  (toString [_] (clojure.string/join \", \" (sort %&)))\n  (seq [_] (seq (distinct %&))))", "problem": 113, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [& args]\n  (reify\n    Object\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct args)))))", "problem": 113, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "(fn dance [& args] \r\n    (reify \r\n      Object (toString [this] (clojure.string/join \", \" (sort args))) \r\n      clojure.lang.Seqable (seq [this] (seq (distinct args)))))", "problem": 113, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn data-dance\n  [& xs]\n  (reify\n    Object\n    (toString [this] (apply str (interpose \", \" (sort xs))))\n    clojure.lang.ISeq\n    (seq [this] (when (seq xs) (distinct xs)))))", "problem": 113, "user": "4dc0ff08535d020aff1edf84"}, {"code": "(fn [& ints] (let [d (distinct ints)]\n  (reify \n    clojure.lang.ISeq\n    (first [_] (first d))\n    (next [_] (next d))\n    (more [_] (rest d))\n    (seq [_] (.seq d))\n    (count [_] (.count d))\n    (cons [_ o] (.cons d o))\n    (empty [_] (.empty d))\n    (equiv [_ o] (.equiv d o))\n  Object\n  (toString [self] (clojure.string/join \", \" (sort ints))))))", "problem": 113, "user": "4fe900a6e4b0547ebccb243a"}, {"code": ";; I have become a worse programmer for solving this.\n;; :-(\n(fn [& args]\n  (reify\n    Object\n    (toString [this] \n      (clojure.string/join \", \" (sort args)))\n    clojure.lang.Seqable\n    (seq [this] \n      (when-not (empty? args) (distinct args)))))", "problem": 113, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn [& s]\r\n  (reify\r\n    clojure.lang.Seqable\r\n    (seq [_] (seq (distinct s)))\r\n    (toString [_]\r\n      (clojure.string/join \", \" (sort s)))))", "problem": 113, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "#(reify clojure.lang.Seqable\n  (toString [_] (clojure.string/join \", \" (sort %&)))\n  (seq [_] (-> %& distinct seq)))", "problem": 113, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn reify-dance [& ints]\n  (reify\n    clojure.lang.ISeq\n    (seq [this] (seq (distinct ints)))\n    Object\n    (toString [this] (apply str (rest (interleave (repeat \", \") (map str (sort ints))))))))", "problem": 113, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn [& vals] (reify Object (toString [_] (apply str (interpose \", \" (sort vals)))) clojure.lang.ISeq (seq [_] (seq (distinct vals)))))", "problem": 113, "user": "4e8e0a62535d65386fec213f"}, {"code": ";; (doc reify) gives most of the info needed to solve this problem.\n\n(fn [& args]\n  (reify\n    clojure.lang.Seqable\n    (seq [this] (if (seq args) (distinct args)))\n    Object\n    (toString [this] (clojure.string/join \", \" (sort args)))))", "problem": 113, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn [& ints] \n  (reify \n    Object\n    (toString [this] (clojure.string/join \", \" (sort ints)))\n    clojure.lang.Seqable\n    (seq [this] \n         (seq (:out (reduce \n                      (fn [acc item]\n                        (if ((acc :present) item) \n                          acc \n                          (-> acc\n                            (update-in ,,, [:present] conj item)\n                            (update-in ,,, [:out] conj item)\n                            ) ))\n                      {:present #{}, :out []}\n                      ints)))))\n  )", "problem": 113, "user": "4dca8b6d535d5973398f9288"}, {"code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (seq [_] (seq (distinct args)))\n    (toString [_]\n      (apply str (interpose \", \" (sort args))))))", "problem": 113, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn [& s] \n    (reify clojure.lang.Seqable \n           (seq [_] (-> s distinct seq))\n           (toString [_] \n                (clojure.string/join \", \" (sort s)))))", "problem": 113, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(fn [& args]\n  (reify Object (toString [this] (clojure.string/join \", \" (sort args)))\n         clojure.lang.Seqable (seq [this] (seq (distinct args)))))", "problem": 113, "user": "500900dee4b0144d4f561e42"}, {"code": "#(reify\r\n  Object (toString [this] (apply str (interpose \", \" (sort %&))))\r\n  clojure.lang.Seqable (seq [this] (if-let [s %&] (distinct s))))", "problem": 113, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn dance [& args]\n  (reify clojure.lang.Seqable\n    (seq [this]\n      (seq (distinct args)))\n    (toString [this]\n      (clojure.pprint/cl-format nil \"~{~A~^, ~}\" (sort args)))))", "problem": 113, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [& ns]\n  (reify clojure.lang.Seqable\n    (seq [this] (seq (reduce #(if ((set %) %2) % (conj % %2)) [] ns)))\n    (toString [this] (clojure.string/join \", \" (sort ns)))))", "problem": 113, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn [& v]\n     (reify clojure.lang.Seqable\n        (toString [this] (apply str (interpose \", \" (sort v))))\n       (seq [this] (if (empty? v) nil (distinct v)))\n        ))", "problem": 113, "user": "503917a0e4b088a6a14ca763"}, {"code": "(fn [& a]\n  (reify clojure.lang.Seqable\n    (toString [this] (apply str (interpose \", \" (sort a))))\n    (seq [this] (seq (reduce #(if ((set %) %2) % (conj % %2)) [] a)))))", "problem": 113, "user": "4fa30027e4b081705acca187"}, {"code": "#(reify\n    Object\n    (toString [this] (apply str (interpose \", \" (sort %&))))\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct %&)))\n)", "problem": 113, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "#(reify clojure.lang.Seqable\r\n   (toString [_] (apply str (interpose \", \" (sort %&))))\r\n   (seq [_] (seq (distinct %&))))", "problem": 113, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn make-data-dance[& x]\n  (reify clojure.lang.Seqable\n(seq [_] (seq (distinct x)))\n    (toString [_]\n      (clojure.string/join \", \" (sort x)))\n    ))", "problem": 113, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn [& xs] (reify Object (toString [_] (apply str (interpose \", \" (sort xs)) ))\n               clojure.lang.Seqable (seq [_] (seq (distinct xs)) )))", "problem": 113, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "#(reify\n     clojure.lang.Seqable\n     (seq [this] (seq (distinct  %&)))\n     Object\n     (toString [this] (apply str (interpose \", \" (sort %&)))))", "problem": 113, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn [& args]\n   (reify clojure.lang.Seqable\n     (seq [this] (seq (distinct args)))\n     (toString [this]\n       (apply str\n              (interpose \", \"\n                         (sort args))))))", "problem": 113, "user": "5014754de4b094324338f8e5"}, {"code": "#(reify clojure.lang.Seqable\n   (toString [_] (clojure.string/join \", \" (sort %&)))\n   (seq      [_] (seq (distinct %&))))", "problem": 113, "user": "50586354e4b06522596eba78"}, {"code": "(fn [& xs]\n  (reify\n    CharSequence\n    (toString [this] (apply str (interpose \", \" (sort xs))))\n    clojure.lang.Seqable\n    (seq [this] (if (empty? xs) nil (distinct xs)))))", "problem": 113, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn [& xs]\r\n  (reify clojure.lang.Seqable\r\n    (seq [this] (seq (distinct xs)))\r\n    (toString [this] (clojure.string/join \", \" (sort xs)))))", "problem": 113, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn dance [& args]\n  (let [str-rep (apply str (interpose \", \" (sort < args)))\n        seq-rep (if (empty? args) nil (distinct args))]\n    (reify\n     Object (toString [this] str-rep)\n     clojure.lang.Seqable (seq [this] seq-rep))))", "problem": 113, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn [& args]\n  (reify Object clojure.lang.Seqable\n    (seq [this] (and args (distinct args)))\n    (toString [this] (clojure.string/join \", \" (sort args)))))", "problem": 113, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn [& xs]\n  (reify\n    CharSequence\n    (toString [this] (apply str (interpose \", \" (sort xs))))\n    clojure.lang.Seqable\n    (seq [this] (if (empty? xs) nil (distinct xs)))))", "problem": 113, "user": "504c8165e4b09724c857af31"}, {"code": "(fn [& args]\n  (reify\n    clojure.lang.ISeq\n    (seq [_] (seq (distinct args)))\n    Object\n    (toString [_] (clojure.string/join \", \" (sort args)))))", "problem": 113, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [& l]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort l)))\n    (seq [this]  (seq (distinct l)))))", "problem": 113, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn [ & s]\n  (let [\n        str \n        (apply str (interpose \", \" (sort s)))\n        ss\n        (map second\n          (filter #(not (apply contains? %))\n            (map vector (reductions conj #{} s) s)))\n      ]\n      (reify \n        clojure.lang.Seqable (seq [this] (seq ss))\n        ;java.util.Collection (iterator [this] (.iterator ss))\n        (toString [this] str))))", "problem": 113, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn dance [& args]\n  (when args \n\t(reify clojure.lang.ISeq\n\t\t(toString [_] (->> args (sort) (interpose \", \") (apply str)))\n\t\t(seq [_] (distinct args))\n\t)\n\t)\n)", "problem": 113, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn [ & xs]\n  (reify clojure.lang.Seqable\n    (toString [this] (apply str (interpose \", \" (sort xs))))\n    (seq [this] (if xs (distinct xs)))))", "problem": 113, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn kkk [& args]\n  (letfn [(unique [ls]\n            (if (or (empty? ls) (= 1 (count ls)))\n              ls\n              (loop [an [] ls' ls]\n                (if (empty? ls')\n                  an\n                  (let [f (first ls')]\n                    (if (empty? (filter #(= f %) an))\n                      (recur (conj an f) (rest ls'))\n                      (recur an (rest ls'))))))))]\n    (reify\n      java.lang.Object\n      (toString [this]\n        (let [as (map str (sort args))]\n          (apply str (interpose \", \" as))))\n      clojure.lang.Seqable\n      (seq [this]\n        (seq (unique args))))))", "problem": 113, "user": "4dd62278535d2dad7130b5c7"}, {"code": "#(reify nil\n  (toString [this] (clojure.string/join \", \" (sort %&)))\n  Iterable\n  (iterator [this] (.iterator (distinct %&))))", "problem": 113, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn [& ls]\n  (proxy [] []\n))", "problem": 113, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn [& s]\n  (reify\n    clojure.lang.Seqable\n    (seq [_] (seq (distinct s)))\n    (toString [_]\n      (apply str (interpose \", \" (sort s))))))", "problem": 113, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn [& nums]\n  (reify clojure.lang.Seqable\n    (toString [this]\n      (apply str (interpose \", \" (sort nums))))\n    (seq [this]\n      (seq (distinct nums)))))", "problem": 113, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn [& items]\r\n  (reify \r\n    clojure.lang.Seqable\r\n    (seq [this] (seq (distinct items)))\r\n    (toString [this] (apply str (interpose \", \" (sort items))))))", "problem": 113, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn [ & s]\n  (reify clojure.lang.ISeq\n    (seq [_] (seq (distinct s)))\n    (toString [_] (clojure.string/join \", \" (sort s)))))", "problem": 113, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn __ [& args]\n  (reify \n    Object (toString [this] (apply str (interpose \", \" (sort args))))\n    clojure.lang.Seqable (seq [this] (println args) (if (coll? args) (distinct args)))))", "problem": 113, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(let [\n        new-seq (fn [vals]\n                  (loop [[head & rem] vals result []]\n                    (if head\n                      (if ((set result) head)\n                        (recur rem result)\n                        (recur rem (conj result head)))\n                      (seq result))))]\n    (fn [& vals]\n      (reify\n        Object (toString [this] (apply str (interpose \", \" (sort vals))))\n        clojure.lang.ISeq (seq [this] (new-seq vals)))))", "problem": 113, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn [& args]\n    (reify\n      Object \n      (toString [this] (clojure.string/join \", \" (sort (map str args) )))\n\n      clojure.lang.Seqable \n      (seq [this] (seq (distinct args)))))", "problem": 113, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [& xs]\n  (reify clojure.lang.Seqable \n    (toString [this] (apply str (interpose \", \" (sort xs))))\n    (seq [this] (if (empty? xs) nil (distinct xs)))))", "problem": 113, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn f [& r]\n  (reify\n    clojure.lang.Seqable (seq [this] (seq (distinct r)))\n    Object (toString [this] (apply str (interpose \", \" (sort r))))))", "problem": 113, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn [& x]\n  (reify \n    clojure.lang.Seqable\n    (seq [_] (seq (distinct x)))\n    Object\n    (toString [_] (clojure.string/join \", \" (sort x)))))", "problem": 113, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn [& s]\n  (reify\n    Object\n    (toString [_] (apply str (interpose \", \" (sort s))))\n    clojure.lang.Seqable\n    (seq [_] (seq (distinct s)))))", "problem": 113, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn r [& args]\n    (reify clojure.lang.Seqable \n\t   (toString [this] (clojure.string/join \", \" (sort args)))\n       (seq [this] (if (empty? args) nil (distinct args)))))", "problem": 113, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [& xs]\n  (reify\n    clojure.lang.Seqable (seq [this] (seq (distinct xs)))\n    Object               (toString [this] (clojure.string/join \", \" (sort xs)))))", "problem": 113, "user": "50bfe95ce4b080409b860f27"}, {"code": "#_(oy... hadn't yet learned about clojure.core/distinct)\n\n(fn [& ints]\n  (reify\n    Object\n    (toString [this]\n      (apply str (interpose \", \" (sort ints))))\n    clojure.lang.Seqable\n    (seq [this]\n      (->> ints\n           (reduce\n            (fn [{:keys [seq seen]} el]\n              {:seq (if (seen el) seq (conj seq el))\n               :seen (conj seen el)})\n            {:seq [] :seen #{}})\n           :seq\n           (seq)))))", "problem": 113, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn [& value]\n                (reify\n                 Object\n                 (toString [this] (clojure.string/join \", \" (sort value)))\n                 clojure.lang.Seqable\n                 (seq [this] (seq (distinct value)))))", "problem": 113, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    (seq [this] (when args (distinct args)))))", "problem": 113, "user": "504e04a4e4b078edc5f59397"}, {"code": "#(if %&\n  (reify\n   clojure.lang.Seqable\n   (toString [_] (apply str (interpose \", \" (sort %&))))\n   (seq [_] (distinct %&))))", "problem": 113, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn [& f]\n   (reify clojure.lang.Seqable\n    (toString [this] \n      (apply str (into [] (interpose \", \" (sort f)))))\n    (seq [this]    \n        (seq (reduce #(if ((set %1) %2) %1 (conj %1 %2)) []\n          f))\n    )\n   ))", "problem": 113, "user": "50de11b2e4b061dbdced7217"}, {"code": "#(reify clojure.lang.Seqable\n     (seq [t] (not-empty (distinct %&)))\n     (toString [t] (clojure.string/join \", \" (sort %&)) ))", "problem": 113, "user": "4ff67852e4b0678c553fc37e"}, {"code": "#(reify clojure.lang.ISeq\n   (seq [this]\n     (when %&\n       (distinct %&)))\n   (toString [this]\n     (apply str (interpose \", \" (sort %&)))))", "problem": 113, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [& xs]\n    (reify \n      clojure.lang.Seqable \n          (seq [_] (keys (frequencies xs)))\n          (toString [_] (clojure.string/join \", \" (sort xs)))\n      )\n    )", "problem": 113, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn [& s]\n  (reify clojure.lang.ISeq\n    (toString [_] (apply str (interpose \", \" (sort s))))\n    (seq [_] (if s (distinct s)))))", "problem": 113, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn dance [& args]\n  (letfn [(str-case [& args]\n            (let [s (reduce str (interleave (sort args) (repeat \", \")))]\n              (if (> (count s) 0)\n                (.substring s 0 (- (count s) 2))\n                \"\")))\n          (seq-case [& args]\n            (if (empty? args)\n              nil\n              (distinct args)))]\n  (reify clojure.lang.Seqable \n    (toString  [this] (apply str-case args))\n    (seq [this] (apply seq-case args)))))", "problem": 113, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "#(if %&\n  (reify\n   clojure.lang.ISeq\n   (toString [_] (apply str (interpose \", \" (sort %&))))\n   (seq [_] (distinct %&))))", "problem": 113, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "(fn alt [& sq] (reify \n                 Object (toString [o] (clojure.string/join \", \" (sort sq)))\n                 clojure.lang.Seqable (seq [o] (if (empty? sq) nil (distinct sq)))\n                 ))", "problem": 113, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn [& xs]\n  (reify\n    Object\n    (toString [this]\n              (clojure.string/join \", \" (sort xs)))\n    clojure.lang.Seqable\n    (seq [this]\n         (seq (first (reduce (fn [[rv seen] v]\n                               (if (seen v)\n                                 [rv seen]\n                                 [(conj rv v) (conj seen v)]))\n                             [[] #{}] xs))))))", "problem": 113, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn [& args]\n    (reify\n      Object\n      (toString [this]\n        (apply str (interpose \", \" (sort args))))\n      Iterable\n      (iterator [this]\n        (.iterator (->>\n                    (map list args (reductions conj [] args))\n                    (remove (fn [[i x]] (some #{i} x)))\n                    (map first))))))", "problem": 113, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "(fn dance [& args]\n  (if args\n    (reify\n      clojure.lang.ISeq\n      (toString [_] (apply str (interpose \", \" (sort args))))\n      (seq [_] (distinct args)))))", "problem": 113, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn mdd [& args]\n  (let [f args]\n    (reify\n      Object\n      (toString [this] (apply str (interpose \", \" (sort f))))\n      \n      clojure.lang.Seqable \n      (seq [this] (if (empty? args) nil (distinct f))))))", "problem": 113, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn data-dance [& xs]\n  (reify\n    Object\n    (toString [this] (->> xs sort (clojure.string/join \", \")))\n    clojure.lang.Seqable\n    (seq [this] (->> xs distinct seq))))", "problem": 113, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn [& args]\n  (reify\n    clojure.lang.Seqable\n    (toString [_] (apply str (interpose \", \" (sort args))))\n    (seq [_] (seq (distinct args)))))", "problem": 113, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn foo [& xs]\n  (reify\n    clojure.lang.IFn\n    (toString [this] (apply str (interpose \", \" (sort xs))))\n    clojure.lang.ISeq\n    (seq [this] (seq (vec (distinct xs))))))", "problem": 113, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "#(reify \n   clojure.lang.Seqable \n     (seq [t] (seq (distinct %&)))\n     (toString [t] (apply str (interpose \", \" (sort %&)))))", "problem": 113, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn [& s]\n(reify clojure.lang.Seqable\n(toString [_] (clojure.string/join \", \" (sort s)))\n(seq [_] (seq(distinct s)))\n  ))", "problem": 113, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn p113 [& items]\n  (reify\n    clojure.lang.Seqable\n    (seq [_] (seq (distinct items)))\n    Object\n    (toString [_] (apply str (interpose \", \" (sort items))))\n  ))", "problem": 113, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [& l]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort l)))\n    (seq [this]  (seq (distinct l)))))", "problem": 113, "user": "4eedccbc535d93acb0a668c0"}, {"code": "(fn [ & values ]\n    (reify clojure.lang.Seqable\n        (seq [this] (reduce (fn [acc e] (if (some #(= e %)acc) acc (concat acc (list e)))) nil values))\n        (toString [this] (apply str (interpose \", \" (sort values))))))", "problem": 113, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn [& s]\n\t(reify\n\t\tclojure.lang.Seqable (seq [_] (when (seq s) (distinct s))) \n\t\tObject (toString [_] (apply str (interpose \", \" (sort s))))))", "problem": 113, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn [& args]\n  (when args\n    (reify clojure.lang.ISeq\n      (toString [_] (clojure.string/join \", \" (sort  args)))\n      (seq [_] (distinct args)))))", "problem": 113, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn [& coll]\n  (reify clojure.lang.Seqable\n    (seq [this]\n         (if (not (empty? coll))\n           (distinct coll)))\n    (toString [_] \n      (reduce #(str % %2) \"\" (interpose \", \" (sort coll))))))", "problem": 113, "user": "50217818e4b00bba4502f7a7"}, {"code": "(fn [& s] \n  (reify clojure.lang.Seqable\n    (seq [this] (seq (distinct s)))\n    (toString [this] (clojure.string/join \", \" (sort s)))))", "problem": 113, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [& numbers]\n  (let [result-string    (clojure.string/join \", \" (sort numbers))\n        result-seq       (if (empty? numbers) nil (distinct numbers))]\n    (reify\n      clojure.lang.Seqable\t(seq [this] result-seq)\n      CharSequence\t\t \t(toString [this] result-string))))", "problem": 113, "user": "510cd1dde4b078ea71921124"}, {"code": "#(if %&\n  (reify\n   clojure.lang.ISeq\n   (toString [_] (apply str (interpose \", \" (sort %&))))\n   (seq [_] (distinct %&))))", "problem": 113, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn [& xs] (reify clojure.lang.ISeq\n             (toString [_] (clojure.string/join \", \" (sort xs)))\n             (seq [_] (if (empty? xs) nil (distinct xs)))))", "problem": 113, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn [& l]\n\t\t(reify \n          clojure.lang.ISeq\n          \t(seq [this] (if (empty? l) nil (distinct l)))\n          Object\t\n\t\t\t(toString [this] (clojure.string/join \", \" (sort (map str l))))))", "problem": 113, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn [& s]\n  (reify clojure.lang.Seqable\n    (seq [this] (-> s distinct seq))\n    (toString [this] (->> s sort (clojure.string/join \", \")))))", "problem": 113, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "#(when %&\n  (reify\n   clojure.lang.ISeq\n   (toString [_] (apply str (interpose \", \" (sort %&))))\n   (seq [_] (distinct %&))))", "problem": 113, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn [& coll]\n  (reify\n    java.lang.Object\n    (toString [this]\n      (apply str (interpose \", \" (sort coll))))\n    clojure.lang.Seqable\n    (seq [this]\n      (letfn [(step [coll result]\n                (if (seq coll)\n                  (let [head (first coll)]\n                    (if (some #{head} result)\n                      (step (next coll) result)\n                      (step (next coll) (concat result [head]))))\n                  result))]\n        (step coll nil)))))", "problem": 113, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn make-data-dance [& args]\n  (reify Object (toString [this] (clojure.string/join \", \" (sort args)))\n    clojure.lang.Seqable (seq [this] (when-let [s (seq args)] (distinct s)))))", "problem": 113, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn dance [& x]\n  (reify \n    clojure.lang.Seqable\n    (seq [this] (when x (distinct x)))\n    (toString [this] (clojure.string/join \", \" (sort x)))))", "problem": 113, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn data-dance [& s]                                                                                             \n  (reify clojure.lang.Seqable                                                                                      \n    (toString [this] (clojure.string/join \", \" (sort (vec s))))                                                    \n    (seq [this] (seq (loop [remaining s                                                                            \n                            deduped []]                                                                            \n                       (if (empty? remaining)                                                                      \n                         deduped                                                                                   \n                         (let [a (first remaining)                                                                 \n                               new-deduped (if (contains? (set deduped) a)                                         \n                                             deduped                                                               \n                                            (conj deduped a))]                                                     \n                           (recur (rest remaining) new-deduped))))))))", "problem": 113, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn [& xs] (reify clojure.lang.Seqable\n                   (toString [this] (apply str (interpose \", \"  (sort xs))))\n                   (seq [this] (when xs (distinct xs)))))", "problem": 113, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "#(reify\n   clojure.lang.Seqable\n   (toString [_] (clojure.string/join \", \" (sort %&)))\n   (seq [_] (seq (distinct %&))))", "problem": 113, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "#(when %&\n   (reify\n     clojure.lang.ISeq\n     (seq [_] (distinct %&))\n     (toString [_] (apply str (interpose \", \" (sort %&))))))", "problem": 113, "user": "5032b066e4b00c0952a257ea"}, {"code": "#(reify\n   Object\n   (toString [this] (clojure.string/join \", \" (sort %&)))\n   clojure.lang.Seqable\n   (seq [this] (seq (distinct %&))))", "problem": 113, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn [& s]\n  (reify\n    clojure.lang.Seqable\n    (seq [this]\n      (seq (distinct s)))\n    (toString [this]      \n      (clojure.string/join \", \" (sort s)))))", "problem": 113, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [& s]\n    (reify java.lang.Iterable\n      (toString [this] (clojure.string/join \", \" (sort s)))\n      (iterator [this] (.iterator (second\n           (reduce (fn [[a u] x]\n                     (if (a x) [a u]\n                         [(conj a x) (conj u x)]))\n                   [#{} []] s))))))", "problem": 113, "user": "4fa340b4e4b081705acca18c"}, {"code": "#(reify clojure.lang.Seqable\n   (toString [_] (clojure.string/join \", \" (sort %&)))\n   (seq [_] (seq (distinct %&))))", "problem": 113, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn [& l]\n      (reify\n        Object\n        (toString [this]\n          (reduce\n            #(str %2 %)\n            \"\"\n            (interpose\n              \", \"\n              (sort > l))))\n        clojure.lang.Seqable\n        (seq [this]\n          (let [r \n            (reduce\n              (fn [a i]\n                (if (some #(= i %) a)\n                  a\n                  (conj a i)))\n              nil\n              l)]\n            (when r (reverse r))))\n        ))", "problem": 113, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn [& s]\n  (reify\n    clojure.lang.Seqable\n    (seq [_] (seq (distinct s)))\n    (toString [_]\n      (clojure.string/join \", \" (sort s)))))", "problem": 113, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn [& x] (reify clojure.lang.ISeq (seq [this] (seq (distinct x))) (toString [this] (apply str (interpose \", \" (sort x))))))", "problem": 113, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn [& args]\n    (reify clojure.lang.Seqable\n      (toString [_] (clojure.string/join \", \" (sort args)))\n      (seq [_] (seq (distinct args)))))", "problem": 113, "user": "50bca033e4b0594b91591c5d"}, {"code": "#(reify\n  clojure.lang.Seqable\n  (seq [_]\n    (if (empty? %&) nil (distinct %&)))\n\n  Object\n  (toString [_]\n    (apply str (interpose \", \" (sort %&)))))", "problem": 113, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [& n]\n  (reify clojure.lang.Seqable\n    (toString [this] (if (empty? n) \"\" (clojure.string/join \", \" (sort n))))\n    (seq [this] (if (empty? n) nil (seq (distinct n))))))", "problem": 113, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn [& xs]\n  (reify clojure.lang.ISeq\n    (seq [this] (when xs (distinct xs)))\n    (toString [this] (->> xs sort (clojure.string/join \", \")))))", "problem": 113, "user": "4f06dcad535dcb61093f6c16"}, {"code": "#(reify\n   clojure.lang.Seqable\n   (seq [this] (seq (distinct %&)))\n\n   java.lang.Object\n   (toString [this] (clojure.string/join \", \" (sort %&))))", "problem": 113, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn\n  [& args]\n  (reify clojure.lang.Seqable\n    (toString [this] (->> (sort < args)\n                          (map str)\n                          (interpose \", \")\n                          (apply str)))\n    (seq [this] (seq (distinct args)))))", "problem": 113, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn [& xs]\n  (reify\n   clojure.lang.ISeq\n   (seq [this]\n    (and xs\n    (reverse (first (reduce\n                     (fn [[r-seq r-set] e]\n                      (if (contains? r-set e)\n                       [r-seq r-set]\n                       [(conj r-seq e) (conj r-set e)]))\n                     ['() #{}] xs)))))\n   java.lang.Object\n   (toString [this]\n    (apply str (interpose \", \" (sort xs))))\n  ))", "problem": 113, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn [& xs]\n    (reify \n      Object (toString [this] (apply str (interpose \", \" (sort xs))))\n      clojure.lang.Seqable (seq [this] (seq (distinct xs)))\n    )\n  )", "problem": 113, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "#(reify clojure.lang.ISeq (toString [this] (clojure.string/join \", \" (sort %&))) (seq [this] (if (empty? %&) nil (distinct %&))))", "problem": 113, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn test-it [& args]\n  (if args\n    (reify\n      clojure.lang.ISeq\n      (toString [_] (apply str (interpose \", \" (sort args))))\n      (seq [_] (distinct args)))))", "problem": 113, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (seq [this] (seq (distinct args)))\n    (toString [this]\n      (apply str\n        (drop 1\n          (interleave\n            (repeat \", \")\n            (sort args)))))))", "problem": 113, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn [& args]\n  (reify clojure.lang.ISeq\n  (seq [_]\n    (seq (distinct args)))\n  Object\n  (toString [_]\n    (apply str (interpose \", \" (sort args))))))", "problem": 113, "user": "5080a697e4b01a93d3f38e49"}, {"code": "#(if %&\n  (reify\n    clojure.lang.ISeq\n    (toString [_] (apply str (interpose \", \" (sort %&))))\n    (seq [_] (distinct %&))))", "problem": 113, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn [& args]\n  (reify\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct args)))\n    Object\n    (toString [this] (clojure.string/join \", \" (sort args)))))", "problem": 113, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    (seq [this] (if (not-empty args) (distinct args) nil))))", "problem": 113, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn testreify [& x]\n                                (reify Object clojure.lang.Seqable\n                                  (toString [this] (clojure.string/join \", \" (sort x)) ) \n                                  (seq [this] (seq (distinct x)))\n                                  ))", "problem": 113, "user": "5225b16de4b0d2f5d1e2c0ed"}, {"code": "(fn dance [& args]\n  (reify\n    clojure.lang.ISeq\n    (first [this] (first args))\n    (next [this] (next args))\n    (more [_] nil)\n    (seq [this] \n      (when (seq args) (distinct args)))\n    Object\n    (toString [this] (clojure.string/join \", \" (sort args)))))", "problem": 113, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn [& lst]\n  (reify \n    clojure.lang.Seqable\n    (toString [_] (apply str (interpose \", \" (sort lst))))\n    (seq [_] (seq (distinct lst)))))", "problem": 113, "user": "521e8227e4b0dd19981ad082"}, {"code": "#(reify clojure.lang.Seqable\n   (toString [_] (apply str (interpose \", \" (sort %&))))\n   (seq [_] (if %& (distinct %&))))", "problem": 113, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn [& nums]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort nums)))\n    (seq [this] (if (empty? nums) nil (distinct nums)))))", "problem": 113, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn [& dts]\n  (reify \n    clojure.lang.Seqable\n    (seq [_] (seq (distinct dts)))     \n    (toString [_] (clojure.string/join \", \" (sort dts)))))", "problem": 113, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn [& args] \n  (reify \n    Object \n\t(toString [_] (apply str (interpose \", \" (sort args))))\n\tclojure.lang.Seqable \n\t(seq [_] (if (empty? args) nil (distinct args)))))", "problem": 113, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (toString [this] \n      (clojure.string/join \", \" (sort args)))\n    (seq [this] \n      (seq (distinct args)))))", "problem": 113, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn [& x]\n  (reify\n    clojure.lang.Seqable\n    (seq [this] (-> x distinct seq))\n    (toString [this] (apply str (interpose \", \" (sort x))))))", "problem": 113, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn x [& args]\n  (reify\n    clojure.lang.Seqable\n    (seq [this] (when args (distinct args)))\n    (toString [this]\n      (apply str (interpose \", \" (sort args))))))", "problem": 113, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn [& a]\n       (reify clojure.lang.Seqable\n         (toString [this] (clojure.string/join \", \" (sort a)))\n         (seq [this] (when (> (count a) 0) (reverse (reduce #(if (> (.indexOf % %2) -1) % (conj % %2)) '() a))))))", "problem": 113, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn [ & args]\n    (reify clojure.lang.Seqable \n       (toString [this] (apply str (interpose \", \" (sort args))))\n\t   (seq [this] (seq (distinct args)))))", "problem": 113, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn [& args]\n  (reify\n    java.lang.Object\n    (toString [_]\n      (clojure.string/join \", \" (sort args)))\n    clojure.lang.ISeq\n      (seq [_]\n        (if (empty? args) nil\n          (distinct args)))))", "problem": 113, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [& args]\n  (reify clojure.lang.ISeq\n    (toString [this] (apply str (interpose \", \" (sort args))))\n    (seq [this] (keys (group-by identity args)))))", "problem": 113, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn [& x]\n  (let [s (sort x)\n        mk-str (if (empty? x)\n                 \"\"\n                 (loop [a (rest s) r (str (first s))] \n                   (if (empty? a)\n                     r\n                     (recur (rest a) (str r \", \" (first a))))))\n        mk-seq (loop [a x r []] (if (empty? a)\n                                 r\n                                 (if (contains? (into #{} r) (first a))\n                                   (recur (rest a) r)\n                                   (recur (rest a) (into [] (conj r (first a))))) ))]\n    (reify \n      clojure.lang.Seqable\n      (seq [this] (seq mk-seq))\n      (toString [this] mk-str))))", "problem": 113, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn [& args]\n    (reify Object (toString [this] (apply str(interpose \", \" (sort args))))\n      clojure.lang.Seqable (seq [this] (if (empty? args)nil(distinct args))))\n    \n    )", "problem": 113, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn [& xs] (reify\n  Object               (toString [this] (clojure.string/join \", \" (sort xs)))\n  clojure.lang.Seqable (seq      [this] (if (empty? xs) nil (distinct xs)))))", "problem": 113, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    (seq [this] (if (empty? args) nil (distinct args)))\n  )\n)", "problem": 113, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn [& s]\n  (reify Object\n    (toString [_]\n      (apply str (interpose \", \" (sort s))))\n    clojure.lang.Seqable\n    (seq [_]\n      (if (empty? s) nil (distinct s)))))", "problem": 113, "user": "519ef784e4b087743fad2198"}, {"code": "(fn [& arg]\n  (letfn [(elem [a lst] (if (empty? lst) nil (if (= a (first lst)) a (elem a (next lst)) )))\n          (hoge3 [lst a] (if (elem a lst) lst (conj lst a)))\n          (hoge2 [lst] (seq (reduce hoge3 [] lst)))\n          ]\n           (reify clojure.lang.Seqable\n              (toString [this]\n\t\t(if (empty? arg) \"\"\n                    (apply str (reverse (drop 1 (reverse (interleave (sort arg) (repeat \", \"))))))))\n              (seq [this] (hoge2 arg))\n    )))", "problem": 113, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [& args] (let [str-fn (fn [xs] (clojure.string/join \", \" (sort xs)))\n                   lst-fn (fn [xs-in] (loop [result [] seen #{} xs xs-in]\n                                        (if (nil? xs) result\n                                          (if (contains? seen (first xs))\n                                            (recur result seen (next xs))\n                                            (recur (conj result (first xs)) (conj seen (first xs)) (next xs))\n                                          )\n                                        )\n                                      )\n                          )\n                  ]\n               (reify Object (toString [this] (str-fn args)) clojure.lang.Seqable (seq [this] (seq (lst-fn args))))\n             )\n)", "problem": 113, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [& v]\n  (reify\n    Object\n    (toString [_]\n      (if (nil? v) \"\"\n        (->> (sort v) (interpose \", \") (apply str)))\n      )\n    clojure.lang.Seqable\n    (seq [_]\n      (if (nil? v) nil\n      (apply list (reduce #(if ((set %1) %2) % (conj %1 %2)) [] v))))))", "problem": 113, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn data-dance [& nums]\n  (reify clojure.lang.Seqable\n    (toString [this] (->> (sort nums)\n                       (interpose \", \")\n                       (apply str)))\n    (seq [this] (if (empty? nums)\n                  nil\n                  (distinct nums)))))", "problem": 113, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (toString [this] (if (empty? args) \"\" (clojure.string/join \", \" (sort args))))\n    (seq [this] (if (empty? args) nil (distinct args)))))", "problem": 113, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn [& coll]\n  (reify\n    java.lang.Object\n    (toString [this]\n      (apply str (interpose \", \" (sort coll))))\n    clojure.lang.Seqable\n    (seq [this]\n      (letfn [(step [coll result]\n                (if (seq coll)\n                  (let [head (first coll)]\n                    (if (some #{head} result)\n                      (step (next coll) result)\n                      (step (next coll) (concat result [head]))))\n                  result))]\n        (step coll nil)))))", "problem": 113, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn [& xs]\n    (reify\n      Object\n      (toString [this] (clojure.string/join \", \" (sort xs)))\n      clojure.lang.Seqable\n      (seq [this] (not-empty (distinct xs)))))", "problem": 113, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn my-fn [& coll]\n  (let [c' (sort coll)]\n    (reify clojure.lang.IFn\n      (toString [this] (reduce str (interpose \", \" c')))\n       clojure.lang.Seqable\n       (seq [this]\n         (loop [c' coll seen #{} acc '()]\n           (cond\n            (empty? c')  (if (empty? acc) nil (reverse acc) )\n            (seen (first c')) (recur (rest c') seen acc)\n            :else (recur (rest c') (conj seen (first c'))\n                         (conj acc (first c'))))\n         )\n       )\n   )))", "problem": 113, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "#(reify\n   clojure.lang.Seqable\n   (seq [_] (seq (distinct %&)))\n   (toString [_] (apply str (interpose \", \" (sort %&)))))", "problem": 113, "user": "4ef77edb535dced4c769f254"}, {"code": "#(reify clojure.lang.Seqable\n    (toString [_] (apply str (interpose \", \" (sort %&))))\n    (seq [_] (seq (distinct %&))))", "problem": 113, "user": "528652fbe4b0239c8a67ae14"}, {"code": "#(if %&\n  (reify\n   clojure.lang.ISeq\n   (toString [_] (apply str (interpose \", \" (sort %&))))\n   (seq [_] (distinct %&))))", "problem": 113, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "(fn [& xs]\n   (reify\n     clojure.lang.ISeq\n      (seq [this] (if (empty? xs) nil (distinct xs)))\n     Object\n     (toString [this] (clojure.string/join \", \" (sort xs)))))", "problem": 113, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn n113 [& x]\n  (reify\n    clojure.lang.ISeq\n    (toString [_] (apply str (interpose \", \" (sort x))))\n    (seq [_] (if (empty? x) nil (distinct x)))))", "problem": 113, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn [& x]\n             (reify \n               java.lang.Object\n               (toString [this] (str (clojure.string/join (map #(format \"%d, \" %) (drop-last (sort x))))\n                                     (last (sort x))))\n               clojure.lang.Seqable\n               (seq [this] (if (empty? x) nil (distinct x)))))", "problem": 113, "user": "5294e44de4b02ebb4ef75016"}, {"code": "#(reify clojure.lang.ISeq\n   (toString [_] (clojure.string/join \", \" (sort %&)))\n   (seq [_] (if %& (distinct %&))))", "problem": 113, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn [& xs]\n  (reify clojure.lang.Seqable\n    (seq [_] (seq (distinct xs)))\n    (toString [_] (clojure.string/join \", \" (sort xs)))))", "problem": 113, "user": "50645e12e4b007509339a58a"}, {"code": "(fn [& m] (reify clojure.lang.Seqable (seq [_] (seq (first (reduce (fn [[l s] v] [(if (s v) l (conj l v)) (conj s v)]) [[] #{}] m)))) Object (toString [_] (clojure.string/join \", \" (sort m)))))", "problem": 113, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn coerce \n  [& x] \n  (reify clojure.lang.Seqable \n    (toString \n     [this] \n     (apply str (interpose \", \" (sort x)))) \n    (seq [this] (seq (keys (frequencies x))))))", "problem": 113, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn [& n]\n  (reify\n    Object\n    (toString \n      [this] \n      (apply str (interpose \", \" (sort n))))\n    clojure.lang.Seqable\n    (seq \n      [this] \n      (seq (distinct n)))))", "problem": 113, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn [& coll]\n  (reify\n    java.lang.Object\n    (toString [_]\n      (apply str (interpose \", \" (sort coll))))\n    clojure.lang.Seqable\n    (seq [_]\n      (seq (distinct coll)))))", "problem": 113, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn [& l]\n  (reify\n    clojure.lang.Seqable\n    (seq [_] (seq (distinct l)))\n    (toString [_] (clojure.string/join \", \" (sort l)))))", "problem": 113, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn [& c]\n   (reify\n     Object\n     (toString [this] (clojure.string/join \", \" (sort c)))\n     clojure.lang.Seqable\n     (seq [this] (seq (reduce #(if (= -1 (.indexOf %1 %2)) (conj %1 %2) %1) [] c)))))", "problem": 113, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn [& args]\n  (reify\n    clojure.lang.Seqable\n    (seq [_] (seq (distinct args)))\n    (toString [_]\n      (clojure.string/join \", \" (sort args)))))", "problem": 113, "user": "4dc0d7d5535d020aff1edf81"}, {"code": "#(reify clojure.lang.Seqable\n   (toString [_] (apply str (interpose \", \" (sort %&))))\n   (seq [_] (seq (distinct %&))))", "problem": 113, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn my-data-dance\n  [& vars]\n  (when vars\n    (reify\n      clojure.lang.ISeq\n      (seq [_] (distinct vars))\n      (toString [_] (apply str (interpose \", \" (sort vars)))))))", "problem": 113, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "(fn [& args]\n    (reify\n      clojure.lang.Seqable\n      (seq [this]\n        (and (first args) (distinct args)))\n\n      Object\n      (toString [this]\n        (clojure.string/join \", \" (sort args)))))", "problem": 113, "user": "4f43b992e4b0d7d3c9f3fd2c"}, {"code": "(fn dance [& coll]\n  (if coll\n  (reify\n    clojure.lang.ISeq\n    (toString [_] (apply str (interpose \", \" (sort coll))))\n    (seq [_] (distinct coll))\n    )\n    )\n  )", "problem": 113, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [& xs]\n  (reify\n    Object\n    (toString [_] (apply str (interpose \", \" (sort xs))))\n    clojure.lang.Seqable\n    (seq [_] (seq (distinct xs)))))", "problem": 113, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn making-data-dance [& ints] (reify Object (toString [this] (apply str (interpose \", \" (apply str (sort ints))))) clojure.lang.Seqable (seq [this] (if (empty? ints) nil (distinct ints)))))", "problem": 113, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn reify-str [& coll]\n    (reify Object\n      (toString [this] (apply str (interpose \", \" (sort coll))))\n      clojure.lang.ISeq\n      (seq [this]\n        (loop [r [] c coll]\n          (if (empty? c) (seq r)\n            (recur (if (not (empty? (filter #(= % (first c)) r))) r (conj r (first c))) (rest c))\n          )\n        )\n      )\n    )\n)", "problem": 113, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "#(reify java.lang.Iterable\n  (toString [t] (clojure.string/join \", \" (sort %&)))\n  (iterator [t] (.listIterator (distinct %&))))", "problem": 113, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn [& v]\n  (reify \n    clojure.lang.ISeq\n    (seq[this]\n      (if (empty? v) nil\n          (distinct v)))\n    (toString [this]\n      (apply  str\n             (interpose \", \" (sort v))))))", "problem": 113, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn foo [& rest]\n  (reify clojure.lang.Seqable\n    (toString [this]\n      (clojure.string/join \", \" (sort rest)))\n    (seq [this]\n      (seq (distinct rest)))))", "problem": 113, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "(fn [& ints]\n  (reify\n    Object\n    (toString [this]\n      (clojure.string/join \", \" (sort ints)))\n    clojure.lang.Seqable\n    (seq [this]\n      (seq (distinct ints)))))", "problem": 113, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    (seq [this] (when (not-empty args) (distinct args)))))", "problem": 113, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn dance [& args]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    (seq [this] \n      (->> args \n       (map list (range))\n       (group-by second)\n       (map (comp second first second))\n       not-empty))))", "problem": 113, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn [& ints] \n  (reify clojure.lang.Seqable\n    (toString [this] (->> ints sort (clojure.string/join \", \")))\n    (seq [this] (->> ints\n                     (reduce (fn [[curSeq seen] elem]\n                               (if (seen elem)\n                                 [curSeq seen]\n                                 [(conj curSeq elem) (conj seen elem)]))\n                             [[] #{}])\n                     first\n                     seq))))", "problem": 113, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn [& coll]\n  (reify\n    java.lang.Object\n    (toString [this]\n      (apply str (interpose \", \" (sort coll))))\n    clojure.lang.Seqable\n    (seq [this]\n      (letfn [(step [coll result]\n                (if (seq coll)\n                  (let [head (first coll)]\n                    (if (some #{head} result)\n                      (step (next coll) result)\n                      (step (next coll) (concat result [head]))))\n                  result))]\n        (step coll nil)))))", "problem": 113, "user": "50436470e4b034ff00315d23"}, {"code": "(fn [& args]\n  (reify clojure.lang.Seqable\n     (toString [this] \n        (apply str (interpose \", \" (sort args))))\n     (seq [this] (if (empty? args) nil (distinct args)))))", "problem": 113, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn data-dance\n  [ & coll]\n  (reify clojure.lang.ISeq\n    (toString [_] (apply str (interpose \", \"(sort coll))))\n    (seq [_] (seq (distinct coll)))))", "problem": 113, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn [& args]\n  (reify\n    clojure.lang.Seqable\n    (toString [_] (clojure.string/join \", \" (sort args)))\n    (seq      [_] (seq (distinct args)))))", "problem": 113, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn dance [& data]\n  (reify\n   Object\n   (toString [_]\n     (->> data\n          sort\n          (interpose \", \")\n          (apply str)))\n    \n   clojure.lang.Seqable\n   (seq [_]\n     (->> data\n          distinct\n          seq))))", "problem": 113, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn [& f]\n  (reify Object\n    (toString [this] (apply str (interpose \", \" (sort f))))\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct f)))\n))", "problem": 113, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn [& s]\n  (reify\n    clojure.lang.Seqable\n    (seq [_] (seq (distinct s)))\n    (toString [_]\n      (clojure.string/join \", \" (sort s)))))", "problem": 113, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn [& l]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort l)))\n    (seq [this] (if (empty? l) nil (distinct l)))))", "problem": 113, "user": "53460d02e4b084c2834f4a39"}, {"code": "#(reify clojure.lang.Seqable\n   (toString [_] (apply str (interpose \", \" (sort %&))))\n   (seq [_] (seq (distinct %&))))", "problem": 113, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn [& args] \n  (reify \n    Object\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    clojure.lang.Seqable \n    (seq [this] (seq (distinct args)))))", "problem": 113, "user": "4db1b3951254ad5b4805fa6f"}, {"code": "#(reify  clojure.lang.ISeq  \n    (toString [this] (apply str (interpose \", \" (sort %&))))   \n    (seq [this] (if %& (distinct %&))))", "problem": 113, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn [& nums]\n  (reify\n    java.lang.Object\n    (toString [thingy] (clojure.string/join \", \" (sort nums)))\n    clojure.lang.Seqable\n    (seq [thingy] (and nums (distinct nums)))))", "problem": 113, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn __\n  [& args]\n  (reify \n    clojure.lang.Seqable\n    (seq [__] (seq (distinct args)))\n    (toString [__]\n      (clojure.string/join \", \" (sort args)))))", "problem": 113, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn [& xs]\n  (reify\n    Object \n    (toString [this] \n              (if (empty? xs)\n                \"\"\n                (reduce #(str %1 \", \" %2 ) (sort xs))))\n    clojure.lang.Seqable\n    (seq [this]\n         (if (empty? xs)\n           nil\n           (distinct xs)))))", "problem": 113, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (toString [_] (apply str (interpose \", \" (sort args))))\n    (seq [_] (seq (distinct args)))))", "problem": 113, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn [& args]\n  (reify\n    java.lang.Object\n    (toString [this] (apply str (interpose \", \" (sort args))))\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct args)))))", "problem": 113, "user": "530bf87ee4b02e82168697d5"}, {"problem": 113, "code": "#(reify clojure.lang.Seqable\n   (seq [_] (seq (distinct %&)))\n   (toString [_] (clojure.string/join \", \" (sort %&))))", "user": "51ad244fe4b09397d510977f"}, {"problem": 113, "code": "(fn [& coll]\n  (reify\n    java.lang.Object\n    (toString [this]\n      (apply str (interpose \", \" (sort coll))))\n    clojure.lang.Seqable\n    (seq [this]\n      (letfn [(step [coll result]\n                (if (seq coll)\n                  (let [head (first coll)]\n                    (if (some #{head} result)\n                      (step (next coll) result)\n                      (step (next coll) (concat result [head]))))\n                  result))]\n        (step coll nil)))))", "user": "53976599e4b0b51d73faaeea"}, {"problem": 113, "code": "(fn\n  [& args]\n  (reify\n    Object\n    (toString\n      [this]\n      (apply str (interpose \", \" (sort args))))\n    clojure.lang.Seqable\n    (seq\n      [this]\n      (seq (first (reduce (fn [[v s :as a] e]\n                     (if (contains? s e)\n                       a\n                       [(conj v e) (conj s e)])) [[] #{}] args))))))", "user": "52dfc89be4b09f7907dd1405"}, {"problem": 113, "code": "#(let [args %&]\n   (reify clojure.lang.ISeq\n     (toString [this]\n               (apply str (interpose \", \" (sort args))))\n     (seq [this]\n          (seq (distinct args)))))", "user": "5371167fe4b0fc7073fd6ea7"}, {"problem": 113, "code": "(fn [& s]\n  (let [c1 (if-not (nil? s) (distinct s))\n        c2 (sort s)]\n    (reify clojure.lang.Seqable\n      (toString [this] (clojure.string/join \", \" c2))\n      (seq [this] c1))))", "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"problem": 113, "code": "(fn [& xs]\n  (reify  \n    clojure.lang.Seqable\n      (seq [this] (when xs (distinct xs)))\n      (toString [this] (clojure.string/join \", \" (sort xs)))))", "user": "50c781bbe4b00bb60fe0c535"}, {"problem": 113, "code": "(fn [& args]\n    (reify clojure.lang.ISeq\n      (toString [this] (clojure.string/join \", \" (sort args)))\n      (seq [this] (loop [[x & xs :as X] args\n                         ret []]\n                    (if-not (seq X)\n                      (seq ret)\n                      (recur xs (if ((set ret) x) ret (conj ret x))))))))", "user": "4ee26f01535d10e5ff6f5368"}, {"problem": 113, "code": "#(reify clojure.lang.Seqable\n   (toString [this] (clojure.string/join \", \" (sort %&)))\n   (seq [this] (seq (reduce (fn [c e] (if ((set c) e)\n                                        c\n                                        (conj c e))) \n                            [] %&))))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 113, "code": "(fn [& s]\n  (reify\n    Object\n    (toString [this] (apply str (rest (interleave (repeat \", \") (sort s)))))\n    clojure.lang.Seqable\n    (seq [this] (if (empty? s) nil (distinct s))))\n  )", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 113, "code": "(fn d [& args]\n  (reify clojure.lang.Seqable\n    (toString [this]\n      (apply str (interpose \", \" (sort args))))\n    (seq [this]\n      (if (empty? args) nil (distinct args)))))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 113, "code": "(fn [& xs]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort xs)))\n    (seq [this]\n      (let [unique (distinct xs)]\n        (if (empty? unique)\n          nil\n          unique)))))", "user": "4fb1325de4b081705acca276"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    java.lang.Object\n    (toString [this] (apply str (interpose \", \" (sort args))))\n    clojure.lang.ISeq\n    (seq [this]\n      (if (empty? args)\n        nil\n        (distinct args)))))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 113, "code": "(fn [& args]\n    (let [sorted (sort args) \n          dist (distinct args)\n         ] \n      (reify \n        clojure.lang.ISeq\n        (toString [this] (clojure.string/join \", \" sorted))\n        (seq [this] (seq dist))\n      )\n    )\n  )", "user": "5094057fe4b097f48cc38593"}, {"problem": 113, "code": "(fn [& args]\n\t\t(reify \n\t\t\tclojure.lang.Seqable\n\t\t\t(seq [this] (when (seq args) (distinct args)))\n\t\t\tObject\n\t\t\t(toString [this] (apply str (interpose \", \" (sort args))))))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 113, "code": "(fn [& numbers]\n  (reify\n    clojure.lang.ISeq\n    (seq [this]\n      (let [d-nums (distinct numbers)]\n        (if (empty? d-nums) nil d-nums)))\n    java.lang.Object\n    (toString [this] (apply str (interpose \", \" (sort numbers))))))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 113, "code": "(fn [& args]\n    (reify \n      java.lang.Object\n      (toString [_] (clojure.string/join \", \" (sort args)))\n      \n      clojure.lang.Seqable \n      (seq [_] (seq (first (reduce (fn [[vals seen] v] \n                                     (if (seen v) \n                                       [vals seen] \n                                       [(conj vals v) (conj seen v)]))\n                                   [[] #{}]\n                                   args))))))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    clojure.lang.Seqable\n    (seq [self] (if (nil? args) args (distinct args)))\n    Object\n    (toString [self]\n      (apply str (interpose \", \" (map str (sort args)))))))", "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"problem": 113, "code": "(fn [& x]\n                        (reify\n                          clojure.lang.Seqable\n                          (seq [this] (seq (distinct x)))\n                          (toString [this] (clojure.string/join \", \" (sort x)))))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 113, "code": "(fn [ & args ]\n  (reify clojure.lang.Seqable\n    (toString [this] (apply str (interpose \", \" (sort args))))\n    (seq [this] (seq (distinct args)))))", "user": "4ddb696b535d02782fcbe9fa"}, {"problem": 113, "code": "(fn datadance [& x]\n              (reify clojure.lang.Seqable\n                (toString [_] (apply str (interpose \", \" (sort x))))\n                (seq [_] (if (empty? x)\n                           nil\n                           (distinct x)))))", "user": "532727bae4b09d4e7a9b54fa"}, {"problem": 113, "code": "(fn f1 [& s]\n  (reify\n    Object\n     (toString [_] (clojure.string/join \", \" (sort s)))\n    clojure.lang.Seqable\n     (seq [_]\n       (seq (loop [[h & t] s\n               u #{}\n               a []]\n          (if h\n            (recur t (conj u h) (if (u h) a (conj a h)))\n            a))))))", "user": "53f7820be4b0de5c41848560"}, {"problem": 113, "code": "(fn test-reify [& args]\n  (let [argMap (reduce #(if(contains? %1 (first %2)) %1 (assoc %1 (first %2) (second %2))) {} (map vector args (range)))]\n  (reify clojure.lang.Seqable\n    (seq [this] (seq (map first (sort-by second argMap))))\n    Object \n    (toString [this] (apply str (interpose \", \" (sort args)))))))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 113, "code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (toString [_] (clojure.string/join \", \" (sort args)))\n    (seq [_] (if (empty? args) nil (distinct args)))))", "user": "53513d28e4b084c2834f4ae3"}, {"problem": 113, "code": "#(when %&\n   (reify\n     clojure.lang.ISeq\n     (seq [_] (distinct %&))\n     (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 113, "code": "(fn [& xs]\n  (reify clojure.lang.Seqable\n    (seq [this] (if (seq xs) (distinct xs) nil))\n    (toString [this] (apply str (interpose \", \" (sort xs))))))", "user": "54448e84e4b032a45b869393"}, {"problem": 113, "code": "(fn [& x]\n  (reify clojure.lang.Seqable\n    (seq [self] (seq (distinct x)))\n    (toString [self] (apply str (interpose \", \" (sort x))))))", "user": "4ec0c7ba535dfed6da9c6da4"}, {"problem": 113, "code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (toString [this]\n      (apply str (interpose \", \" (sort args))))\n    (seq [this]\n      (if (nil? args) nil\n          (distinct args)))))", "user": "538e36c7e4b0b51d73faae81"}, {"problem": 113, "code": "(fn [& lst]\n  (reify clojure.lang.Seqable \n       (seq [this] (seq (distinct lst)))\n       (toString [this] (clojure.string/join \", \" (sort lst)))\n    )\n)", "user": "5281a445e4b0757a1b17143a"}, {"problem": 113, "code": "#(reify clojure.lang.Seqable\n   (toString [_] (clojure.string/join \", \" (sort %&)))\n   (seq [_] (if %& (distinct %&))))", "user": "53973e7be4b0b51d73faaee6"}, {"problem": 113, "code": "(fn d [& s]\n\t(reify clojure.lang.Seqable\n\t\t(toString [_]\n\t\t\t(clojure.string/join \", \" (sort s)))\n\t\t(seq [_]\n\t\t\t(seq (distinct s)))))", "user": "51aefceee4b09397d5109797"}, {"problem": 113, "code": "(fn [& ints]\n    ;; have to implement Iterable and .toString\n    (reify\n      clojure.lang.Seqable\n      (seq [this] (seq (distinct ints)))\n      (toString [this] (clojure.string/join \", \" (map str (sort ints))))))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 113, "code": "(fn [& ns]\n        (reify\n          clojure.lang.Seqable\n          (seq [this]\n            (if (seq ns) (distinct ns) nil))\n          Object\n          (toString [this]\n            (apply str (interpose \", \" (sort ns))))))", "user": "502873a8e4b01614d1633ff8"}, {"problem": 113, "code": "(fn [& s]\n  (reify\n    clojure.lang.ISeq\n    (seq [_] (if (empty? s) nil (distinct s)))\n    Object\n    (toString [_] (clojure.string/join \", \" (sort s)))))", "user": "4ec1b090535dfed6da9c6db5"}, {"problem": 113, "code": "(fn dance [& xs]\n  (reify clojure.lang.Seqable\n    (seq [_] (seq (distinct xs)))\n    (toString [_] (apply str (interpose \", \" (sort xs))))))", "user": "5353afa0e4b084c2834f4b03"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    clojure.lang.Seqable\n    (seq [self] \n      (seq (distinct args)))\n    Object\n    (toString [self]\n      (->> args sort (interpose \", \") (apply str)))))", "user": "548c6673e4b0e286459a1209"}, {"problem": 113, "code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (seq [this] (let [x (distinct args)] (if (empty? x) nil x)))\n    (toString [this] (apply str (interpose \", \" (sort args))))))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 113, "code": "(fn [& s]\n  (reify clojure.lang.ISeq\n    (seq [_] (not-empty (distinct s)))\n    (toString [_] (clojure.string/join \", \" (sort s)))))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 113, "code": "(fn dd\n  ([& x]\n   (reify\n     clojure.lang.ISeq\n     (toString [_] (if (empty? x) \"\"\n                       (->> x\n                            sort\n                            (reduce #(str % \", \" %2)))))\n     (seq [_]\n       (if (empty? x) nil\n           (->> x\n                (reduce (fn [[a s] x]\n                          (if (contains? s x) [a s]\n                              [(conj a x) (conj s x)]))\n                        [[] #{}])\n                first\n                seq))))))", "user": "515bbcd9e4b0388ca8ca1521"}, {"problem": 113, "code": "(fn [& a]\n\t(reify\n\t\tObject\n\t\t(toString [_]\n\t\t\t(apply str (interpose \", \" (sort a))))\n\t\tclojure.lang.Seqable\n\t\t(seq [_]\n\t\t\t({nil nil} a (distinct a)))))", "user": "528a3e14e4b0239c8a67ae72"}, {"problem": 113, "code": "(fn [& nums]\n  (reify clojure.lang.Seqable\n    (toString [this] (apply str (interpose \", \" (sort nums))))\n    (seq [this] (when nums (distinct nums)))))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 113, "code": "(fn make-data-dance [& args]\n  (reify clojure.lang.Seqable \n       (toString [this] (clojure.string/join \", \" (sort args)))\n\t   (seq [this] (when-not (empty? args) (distinct args)))))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 113, "code": "(fn [& r]\n  (reify clojure.lang.Seqable\n    (toString [_] (apply str (interpose \", \" (sort r))))\n    (seq [_] (seq (distinct r)))))", "user": "4f05ea25535dcb61093f6c02"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    clojure.lang.Seqable\n    (seq [this]\n      (seq (distinct args)))\n\n    Object\n    (toString [this]\n      (apply str (interpose \", \" (sort args))))))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 113, "code": "(fn seqable-proxy [& xs]\n  (let [input (apply list xs)]\n    (reify clojure.lang.Seqable\n      (toString [this]\n        (clojure.string/join \", \" (sort input)))\n      (seq [this]\n        (seq (distinct input))))))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 113, "code": "(fn [& is]\n  (reify\n    Object\n    (toString [this] (clojure.string/join \", \" (sort is)))\n    clojure.lang.Seqable\n    (seq [this] (if (empty? is) nil (distinct is)))))", "user": "5339c105e4b0e30313ee6cae"}, {"problem": 113, "code": "(fn data-dance [& coll]\n  (reify Object\n       (toString [this] (apply str (interpose \", \" (sort coll))))\n    clojure.lang.Seqable\n       (seq [this] (if (empty? coll) nil (distinct coll)))))", "user": "5046f909e4b03b02161376b5"}, {"problem": 113, "code": "(fn __[& args]\n  (let[f args](reify clojure.lang.Seqable (seq [this] (seq (distinct f))) (toString [this] (apply str(interpose \", \" (sort f)))) )))", "user": "52bbd09ee4b07a9af57922ee"}, {"problem": 113, "code": "(fn [& s]\n  (reify\n    clojure.lang.IFn\n    (toString [this] (clojure.string/join \", \" (sort s)))\n\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct s)))))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 113, "code": "#(reify clojure.lang.Seqable\n  (toString [_] (apply str (interpose \", \" (sort %&))))\n  (seq [_] (seq (distinct %&))))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 113, "code": "(fn dance [& args]\n  (reify clojure.lang.ISeq\n    (toString [_] (reduce str (interpose \", \" (sort args))))\n    (seq [_] (if (empty? args) nil (distinct args)))))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 113, "code": "(fn __ [& xs]\n  (if (empty? xs) nil\n    (reify\n      Object (toString [this]\n                       (clojure.string/join \", \" (sort xs)))\n      clojure.lang.Seqable (seq [this]\n                                (distinct xs)))))", "user": "54c271b9e4b045293a27f602"}, {"problem": 113, "code": "(fn [& v]\n    (reify clojure.lang.Seqable\n      (seq [this] (if (seq v) (distinct v) nil))\n      Object\n      (toString [this] (clojure.string/join \", \" (sort v)))\n      )   \n    )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 113, "code": "(fn [ & is ]\n  (reify clojure.lang.Seqable\n        (toString [this] (apply str (interpose \", \" (sort is))))\n        (seq [this] (if (empty? is)\n                       nil\n                       (distinct is)))))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 113, "code": "(fn [& arr]\n    (if (empty? arr)\n      (reify clojure.lang.Seqable\n        (seq [this] nil)\n        (toString [this] \"\"))\n      \n      (let [sorted-arr (sort arr)\n            string (apply str (interleave sorted-arr (conj (vec (repeat (dec (count arr)) \", \")) \"\")))]\n        (reify clojure.lang.Seqable\n          (seq [this] (seq (distinct arr)))\n          (toString [this] string))\n        )))", "user": "52faec2ee4b047fd55837004"}, {"problem": 113, "code": "(fn data-dance [& args]\r\n  (reify clojure.lang.ISeq\r\n    (toString [this] (apply str (interpose \", \" (sort args)))) \r\n    (seq [this]      (seq (distinct args)))))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 113, "code": "#(reify\n   clojure.lang.Seqable (seq [t] (seq (distinct %&)))\n   Object (toString [t] (clojure.string/join \", \" (sort %&))))", "user": "50548ce8e4b0b1b9d1860ead"}, {"problem": 113, "code": "(fn p [& args]\n  (reify\n    java.lang.Object\n    (toString [this]\n      (clojure.string/join \", \" (sort args)))\n    clojure.lang.Seqable\n    (seq [this]\n      (seq (distinct args))\n      )))", "user": "53664e3be4b0243289761e74"}, {"problem": 113, "code": "#(reify\n\tclojure.lang.ISeq\n    (seq [_] (seq (distinct %&)))\n    (toString [_] (apply str (interpose \", \" (sort %&)))))", "user": "514d8084e4b019235f6c0588"}, {"problem": 113, "code": "(fn [& v]\n  (reify java.lang.Iterable\n    (toString [this]\n              (apply str (interpose \", \" (sort v))))\n    (iterator [this]\n              (.iterator (java.util.LinkedHashSet. (concat [] v))))))", "user": "52c8758be4b0c2d177d62135"}, {"problem": 113, "code": "(fn prob113 [& args]\n  (reify\n    clojure.lang.IFn\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    (invoke [this & args] args)\n    clojure.lang.Seqable\n    (seq [this] (if (empty? args) nil (distinct args)))))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 113, "code": "#(when %&\n   (reify\n     clojure.lang.ISeq\n     (seq [_] (distinct %&))\n     (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 113, "code": "(fn mdd [& n]\n  (letfn[(tostr[m] (if (nil? m)\n                       \"\"\n                       (reduce #(str %1 \", \" %2)  (sort m))))\n         (toseq[m] (if (nil? m)\n                       nil \n                       (apply list \n                         (reduce #(if(contains? (set %1) %2) %1 (conj %1 %2)) \n                                 [] m))))]\n    (reify\n      Object \n      (toString[this] (tostr n))\n      clojure.lang.Seqable\n      (seq[this] (toseq n)))))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    Object\n    (toString [this]\n      (apply str (interpose \", \" (sort args))))\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct args)))))", "user": "4ee75ec2535d93acb0a66867"}, {"problem": 113, "code": "(fn [& my-ints]\n  (reify Object\n    (toString\n      [this]\n      (clojure.string/join \", \" (sort my-ints)))\n    clojure.lang.Seqable\n    (seq [this]\n      (if (nil? my-ints) nil\n          (reduce\n           (fn\n             [acc e]\n             (if (= -1 (.indexOf acc e))\n               (concat acc (list e))\n               acc)) '() my-ints)))))", "user": "51b76227e4b0d906fcd71d35"}, {"problem": 113, "code": "(fn [& s]\n  (reify clojure.lang.ISeq\n    (toString [this] (clojure.string/join \", \" (sort s)))\n    (seq [this] (if (empty? s) nil (distinct s)))))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 113, "code": "(fn [& coll]\n  (reify\n    Object\n    (toString [this]\n              (apply str (interpose \", \" (sort coll))))\n    clojure.lang.Seqable\n    (seq [this]\n         (keys (frequencies coll)))))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 113, "code": "(fn process-ints [& args]\n  (reify \n    java.lang.Object      (toString [this] (apply str (interpose \", \" (sort args))))\n    clojure.lang.Seqable  (seq [this] (keys (group-by identity args)))))", "user": "52cf084ce4b07d0d72b27399"}, {"problem": 113, "code": "#(if %&\n  (reify\n   clojure.lang.ISeq\n   (toString [_] (apply str (interpose \", \" (sort %&))))\n   (seq [_] (distinct %&))))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 113, "code": "(fn [& s]\n  (reify\n    clojure.lang.ISeq\n    (toString [_] (apply str (interpose \", \" (sort s))))\n    (seq [_] (if (empty? s) nil (distinct s)))))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 113, "code": "(fn [& args]\n  (when args\n    (reify clojure.lang.Seqable\n      (seq [this] (distinct args))\n      (toString [this] (clojure.string/join \", \" (sort args))))))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 113, "code": "(fn testreify2 [& nums]\n    (reify clojure.lang.Seqable\n      (toString [this]\n        (if (empty? nums)\n          \"\"\n          (apply str\n                 (interpose \", \"\n                            (map str\n                                 (sort nums))))))\n      (seq [this] (if (empty? nums)\n                    nil\n                    (distinct nums)))))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 113, "code": "(fn comma-seq\n  [& args] {:pre [(every? number? args)]}\n  (let [distinct-args  (seq (distinct args))\n        sorted-args    (sort args)]\n    (reify clojure.lang.Seqable\n      (seq [this]\n        distinct-args)\n      (toString [this]\n        (clojure.string/join \", \" sorted-args)))))", "user": "4fc6305de4b0ee37620e180b"}, {"problem": 113, "code": "(fn [& args]\n  (reify clojure.lang.ISeq\n    (seq [_] (seq (distinct args)))\n    (toString [_] (clojure.string/join \", \" (sort args)))))", "user": "5341b141e4b00652c8746ecf"}, {"problem": 113, "code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (toString [_] (clojure.string/join \", \" (sort args)))\n    (seq [_] (seq (distinct args)))))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 113, "code": ";http://clojuredocs.org/clojure.core/reify\n(fn [& args]\n  (reify \n    Object ;reimplement the toString()\n    (toString [this] (apply str (interpose \", \" (sort args))))\n    clojure.lang.Seqable ;reimplement the seq()\n    (seq [this] \n         (loop[result [] seen #{} remaining args]\n           (if-let [element (first remaining)]\n             (if (seen element)\n               (recur result seen (rest remaining))\n               (recur (conj result element) (conj seen element) (rest remaining)))\n             (seq result))))))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 113, "code": "#(reify clojure.lang.Seqable (seq [this] (seq (take (count (set %&)) %&))) (toString [this] (apply str (interpose \", \" (sort %&)))))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 113, "code": "(fn [& xs]\n  (reify\n    clojure.lang.Seqable\n    (toString [_] (clojure.string/join \", \" (sort xs)))\n    (seq [_] (seq (distinct xs)))))", "user": "508157b2e4b0946d0443855c"}, {"problem": 113, "code": ";;not really hard if you know that reify exists\n(fn output [& args]\n  (reify\n    Object\n    (toString [this] \n      (clojure.string/join \", \" (sort args)))\n    clojure.lang.Seqable\n    (seq [this]\n      (loop [acc nil\n             seen #{}\n             elts args]\n        (if (empty? elts)\n          (if (nil? acc) acc (reverse acc))\n          (if (seen (first elts))\n            (recur acc seen (rest elts))\n            (recur (conj acc (first elts))\n                   (conj seen (first elts))\n                   (rest elts))))))))", "user": "5553b924e4b0deb715856e06"}, {"problem": 113, "code": "(fn [& args] \n  (reify \n    Object (toString [this] (clojure.string/join \", \" (sort args)))\n    clojure.lang.Seqable (seq [this] (if (empty? args) nil (distinct args)))))", "user": "4faf97d8e4b081705acca258"}, {"problem": 113, "code": "(fn [& xs] \n  (reify clojure.lang.Seqable \n    (toString [_] (clojure.string/join \", \" (sort xs))) \n    (seq [_] (if xs (distinct xs) xs))))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 113, "code": "(fn [& coll]\n  (reify\n    clojure.lang.Seqable\n    (toString [_]\n      (apply str (interpose \", \" (sort coll))))\n    (seq [_]\n      (seq (distinct coll)))))", "user": "55586905e4b0deb715856e2b"}, {"problem": 113, "code": "(fn [& X]\n     (reify Object \n       (toString [this] (clojure.string/join \", \" (sort X)))\n       clojure.lang.Seqable \n       (seq [this] (seq (distinct X)))))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 113, "code": "(fn [& digits]\n  (reify\n    clojure.lang.ISeq\n    (toString [this]\n      (clojure.string/join \", \" (sort digits)))\n    (seq [this]\n      (let [lst (distinct digits)]\n        (when-not (empty? lst) lst)))))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 113, "code": "(fn [& v]\n  (reify clojure.lang.Seqable\n    (seq [this] (if (empty? v) nil (distinct v)))\n    (toString [this] (clojure.string/join \", \" (sort v))))\n)", "user": "52593207e4b0cb4875a45cd3"}, {"problem": 113, "code": "(fn [& args]\n    (reify clojure.lang.Seqable                                                 \n        (seq [this] (let [d (distinct args)] (if (empty? d) nil d)))\n        (toString [this] (clojure.string/join \", \" (sort args)))))", "user": "558b50d5e4b027778923762b"}, {"problem": 113, "code": "(fn [& vals] (reify clojure.lang.Seqable\n               (seq [this] (seq (distinct (not-empty vals))))\n               (toString [this] (clojure.string/join \", \" (sort vals)))))", "user": "524d91eae4b0a16e35cf6dee"}, {"problem": 113, "code": "(fn make-data-dance\n  [& args]\n  (reify clojure.lang.ISeq\n    (seq [_]\n      (seq (distinct args)))\n    (toString [_]\n      ((comp (partial apply str) (partial interpose \", \") sort) args))))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 113, "code": "(fn dd [& args]\n  (reify clojure.lang.Seqable\n    (toString [this] (apply str (interpose \", \" (sort args))))\n    (seq [this]\n      ((fn dedupe [seen args]\n        (if (empty? args)\n          nil\n          (if (seen (first args))\n            (lazy-seq (dedupe seen (rest args)))\n            (cons (first args) (lazy-seq (dedupe (conj seen (first args)) (rest args)))))))\n       #{} args))))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 113, "code": "(fn data-dance\n  [& args]\n  (reify java.lang.Object\n    (toString [this] (apply str (interpose \", \" (sort args))))\n    clojure.lang.Seqable\n    (seq [this] (keys (group-by identity args)))))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 113, "code": "(fn [& args]\n  (reify clojure.lang.Seqable \n    (seq [this] (seq (distinct args)))\n    (toString [this] (clojure.string/join \", \" (sort args)))) \n)", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 113, "code": "(fn [& s] \n  (reify clojure.lang.Seqable \n         (seq [this] \n              (seq (reduce #(if (some #{%2} %) \n                                 % \n                                 (conj % %2)) \n                              [] s)))\n         (toString [this] \n                   (clojure.string/join \", \" (sort s)))\n         ))", "user": "526a3412e4b03e8d9a4a721e"}, {"problem": 113, "code": "(fn [& args]\n  (reify \n    Object\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    clojure.lang.Seqable\n    (seq [this] (if (nil? args) nil (distinct args)))))", "user": "530b8580e4b02e82168697cc"}, {"problem": 113, "code": "(fn [& m]\n    (reify\n      clojure.lang.ISeq\n      (seq [_] (seq (distinct m)))\n      Object\n      (toString [_] (clojure.string/join \", \" (sort m)))))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 113, "code": "(fn dance [& args]\n  (let [string (clojure.string/join \", \" (sort args))\n        se (distinct args)]\n      \t(reify clojure.lang.Seqable\n        \t(toString [this] string)\n        \t(seq [this] (seq se)))))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 113, "code": "(fn [ & coll]\n    (reify\n      java.lang.Object\n      (toString [this]\n        (->> coll sort (interpose \", \") (apply str)))\n      clojure.lang.Seqable\n      (seq [this]\n        (letfn [(step [coll result]\n                  (if (seq? coll)\n                    (let [head (first coll)]\n                      (if (some #{head} result)\n                        (step (next coll) result)\n                        (step (next coll) (concat result [head]))))\n                    result))]\n          (step coll nil)))) )", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 113, "code": "(fn [& items]\n  (reify clojure.lang.Seqable\n    (seq [this] (seq (distinct items)))\n    (toString [this] (apply str (interpose \", \" (sort items))))))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 113, "code": "(fn [& ints]\n  (reify\n    clojure.lang.Seqable (seq [this] (not-empty (distinct ints)))\n    Object (toString [this] (clojure.string/join \", \" (sort ints)))))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 113, "code": "#(if %&\n  (reify\n    clojure.lang.ISeq\n    (toString [_] (apply str (interpose \", \" (sort %&))))\n    (seq [_] (distinct %&))))", "user": "53500869e4b084c2834f4ad3"}, {"problem": 113, "code": "(fn [& a]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort a)))\n    (seq [this] (seq (distinct a)))))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 113, "code": "(fn [& c]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort c)))\n    (seq [this] (if (empty? c) nil (distinct c)))))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 113, "code": "(fn [& xs]\n  (reify clojure.lang.Seqable\n    (seq [this] (if xs (distinct xs)))\n    (toString [this] (apply str (interpose \", \" (sort xs))))))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 113, "code": "(fn [& coll]\n    (reify\n      clojure.lang.Seqable\n      (seq [this] (if (empty? coll) nil (distinct coll)))\n      Object\n      (toString [this] (clojure.string/join \", \" (sort coll)))))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 113, "code": "(fn dance [& args]\n  (reify Object\n      (toString [this] (apply str (interpose \", \" (sort args))))\n      clojure.lang.Seqable\n      (seq [this] (if (empty? args) nil (distinct args)))))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 113, "code": "(fn [& xs]\n  (reify\n    clojure.lang.Seqable\n      (seq [this] (seq (distinct xs)))\n    Object\n      (toString [this] (clojure.string/join \", \" (sort xs)))))", "user": "52ffb7f2e4b0d8b024fd370b"}, {"problem": 113, "code": "(fn [& xs]\n  (reify\n    Object\n    (toString [this]\n      (let [xs (->> xs sort (map str))]\n        (apply str (interpose \", \" xs))))\n    clojure.lang.Seqable\n    (seq [this]\n      (seq (reduce #(if (some (partial = %2) %1)\n                      %1\n                      (conj %1 %2))\n                   [] xs)))))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    clojure.lang.Seqable\n      (seq [this] (seq (distinct args)))\n    Object\n      (toString [this] (clojure.string/join \", \" (map str (sort args))))))", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 113, "code": "(fn [& integers]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (map str (sort integers))))\n    (seq [this] (if (empty? integers) nil (distinct integers)))))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 113, "code": "#(let [contents %&]\r\n   (reify clojure.lang.ISeq\r\n     (toString [this] (apply str (interpose \", \" (sort contents))))\r\n     (seq [this]\r\n       (loop [[x & contents] contents, accum []]\r\n         (if x (recur (remove #{x} contents)\r\n                      (conj accum x))\r\n             (seq accum))))))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 113, "code": "(fn [& args]\n  (reify \n    Object\n    (toString [this]\n      (clojure.string/join \", \" (sort args)))\n    clojure.lang.Seqable\n    (seq [this]\n      (clojure.core/seq (distinct args)))))", "user": "511cca27e4b00c2a1fa7ff7d"}, {"problem": 113, "code": "(fn [& coll]\n  (reify clojure.lang.ISeq\n    (seq [thi] (seq (distinct coll)))\n    (toString [this] (clojure.string/join \", \" (sort coll)))))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 113, "code": "(fn [& params]\n    (reify clojure.lang.Seqable \n      (toString [this]\n        (apply str  (interpose \", \" (sort params))) )\n      (seq [this] (if (empty? params) nil (distinct params)))))", "user": "50856bd1e4b004985b776e4c"}, {"problem": 113, "code": "(fn datadance [& body]\n  (let [st (apply str (interpose \", \" (sort body)))\n        unique (reduce (fn [acc v] (if (contains? (second acc) v) acc [(conj (first acc) v) (conj (second acc) v)])) [[] #{}] body)]\n    (reify\n      Object\n      (toString [this] st)\n      clojure.lang.Seqable\n      (seq [this] (seq (first unique))))))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 113, "code": "(fn protHandler [& args]\n (reify\n    java.lang.Object\n    (toString [this]\n      (clojure.string/join (interpose \", \" (sort args))))\n    clojure.lang.Seqable\n    (seq [this]\n      (if (nil? args)\n        nil\n        (distinct args)))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 113, "code": "(fn [& args]\n  (letfn [(as-str []\n            (apply str (interpose \", \" (sort args))))\n          (as-seq []\n            (distinct args))]\n    (when args\n      (reify clojure.lang.ISeq\n        (toString [_] (as-str))\n        (seq [_] (as-seq))))))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 113, "code": "(fn [& nums]\n  (reify clojure.lang.Seqable\n\n    (toString [this]\n      (clojure.string/join \", \"\n        (sort nums)))\n\n    (seq [this]\n      (seq (distinct nums)))))", "user": "56194c11e4b053970a773af4"}, {"problem": 113, "code": "(fn [& args]\n  (let [uniqs (reduce (fn [xs x]\n                        (if (some #{x} xs)\n                          xs\n                          (conj xs x)))\n                      []\n                      args)]\n    (reify\n      Object\n      (toString [this] (clojure.string/join \", \" (sort args)))\n      clojure.lang.ISeq\n      (first [this] (first uniqs))\n      (next [this] (next uniqs))\n      (more [this] (if (seq (next uniqs))\n                     (next uniqs)\n                     nil))\n      (cons [this o] (cons o uniqs))\n      (seq [this] (seq uniqs)))))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 113, "code": "(fn [& args]\n  (let [uniqs (reduce (fn [xs x]\n                        (if (some #{x} xs)\n                          xs\n                          (conj xs x)))\n                      []\n                      args)]\n    (reify\n      Object\n      (toString [this] (clojure.string/join \", \" (sort args)))\n      clojure.lang.ISeq\n      (first [this] (first uniqs))\n      (next [this] (next uniqs))\n      (more [this] (if (seq (next uniqs))\n                     (next uniqs)\n                     nil))\n      (cons [this o] (cons o uniqs))\n      (seq [this] (seq uniqs)))))", "user": "525c575be4b0cb4875a45d38"}, {"problem": 113, "code": "(fn datadance [& s]\n  (reify\n      clojure.lang.ISeq\n    (seq [this] (if (= 0 (count s)) nil (reverse (reduce #(if (= -1 (.indexOf %1 %2)) (cons %2 %1) %1) '() s))))\n    Object\n    (toString [this] (apply str (next (next(flatten(reduce #(into %1 [(concat \", \" (str %2))]) [] (sort s)))))))))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 113, "code": "(fn dance [& coll]\n  (reify\n    java.lang.Object\n    (toString [this]\n      (apply str (interpose \", \" (sort coll))))\n    clojure.lang.Seqable\n    (seq [this]\n      (loop [c coll acc []]\n        (if c\n          (let [head (first c)]\n            (if (some #{head} acc)\n              (recur (next c) acc)\n              (recur (next c) (conj acc head))))\n          (seq acc))))))", "user": "5307e4ece4b02e82168697a9"}, {"problem": 113, "code": "(fn [& X]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort X)))\n    (seq [this] (seq (distinct X)))))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 113, "code": "(fn [& x] (reify\n             Object (toString [this] (clojure.string/join \", \" (sort x)))\n             clojure.lang.Seqable (seq [this]\n                                    (let [inc (set x)]\n                                      (seq (reduce (fn [acc el]\n                                                     (let [els (set [el])]\n                                                       (if (and (some els inc) (not (some els acc)))\n                                                         (conj acc el)\n                                                         acc))) [] x))))))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 113, "code": "#(reify\n   clojure.lang.ISeq\n   (toString [_]\n             (apply str (interpose \", \" (sort %&))))\n   (seq [_]\n        (seq (distinct %&))))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 113, "code": "(fn prob113 \n  [& params]\n  (reify\n    java.lang.Object\n    (toString [this]\n      ;; return comma separated list\n      (apply str (interpose \", \" (sort params))))\n    clojure.lang.Seqable\n    (seq [this]\n      ;; return list of unique params in the same order as entered\n      (seq (distinct params))\n      )))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 113, "code": "(fn [& xs]\n  (reify\n    clojure.lang.Seqable\n    (toString [_] (clojure.string/join \", \" (map str (sort xs))))\n    (seq [_] (seq (distinct xs)))))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 113, "code": "(fn data-dance\n  [& args]\n    (reify\n      Object\n      (toString [this]\n        (let [sorted (sort < args)]\n          (str (apply str (interpose \", \" sorted)))))\n      clojure.lang.Seqable\n      (seq [this]\n        (loop [seen (hash-set) built (list) rem-coll args]\n          (cond (empty? rem-coll) (seq (reverse built))\n                (seen (first rem-coll)) (recur seen built (rest rem-coll))\n                :else (recur (conj seen (first rem-coll))\n                             (conj built (first rem-coll))\n                             (rest rem-coll)))))))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 113, "code": "#(reify\n  clojure.lang.Seqable\n  (seq [_] (seq (distinct %&)))\n  (toString [_] (apply str (interpose \", \" (sort %&)))))", "user": "5382704be4b06839e8705ed4"}, {"problem": 113, "code": "(fn f [& c]\n  (reify clojure.lang.Seqable\n    (toString [this] (apply str (interpose \", \" (map str (sort c)))))\n    (seq [this] (if (empty? c) nil (distinct c)))\n    ))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 113, "code": "(fn [& s]\n  (reify\n    Object                (toString [this] (->> s sort (interpose \", \") (apply str)))\n    clojure.lang.Seqable  (seq      [this] (seq (distinct s)))))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 113, "code": "(fn [& nums]\n  (reify\n    clojure.lang.ISeq\n    (seq [_] (seq (distinct nums)))\n    (toString [_] (->> (sort nums)\n                       (clojure.string/join \", \")))))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 113, "code": "(fn [& v]\n     (reify\n          clojure.lang.Seqable\n          (seq [this] (seq (reduce\n                                #(if (some (fn [x] (= x %2)) %1) %1 (conj %1 %2))\n                                [] v)))\n          Object\n          (toString [this]\n               (apply str (interpose \", \" (sort v))))))", "user": "50f10f7be4b06d9538fe211a"}, {"problem": 113, "code": "(fn dd [& l]\n  (reify\n    Object (toString [_] (apply str (interpose \", \" (sort l))))\n    clojure.lang.Seqable\n    (seq [_] (if (nil? l) nil (distinct l)))))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 113, "code": "(fn [& xs]\n  (reify\n    Object\n    (toString [_]\n              (clojure.string/join \", \" (sort xs)))\n    clojure.lang.Seqable \n    (seq [this]\n         (seq (reverse (first (reduce (fn [[s uniqs] x]\n                                        (if (uniqs x)\n                                          [s uniqs]\n                                          [(cons x s) (conj uniqs x)])) [() #{}] xs)))))))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 113, "code": "(fn [& s]\n  (reify clojure.lang.ISeq\n    (toString [_] (clojure.string/join \", \" (sort s)))\n  \t(seq [_] (seq (distinct s)))))", "user": "52b02329e4b0c58976d9acc5"}, {"problem": 113, "code": "(fn [& x]\n  (reify clojure.lang.Seqable\n    (seq [this] (if (empty? x) nil (distinct x)))\n    Object\n    (toString [this] (clojure.string/join \", \" (sort x)))))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 113, "code": "(fn [& coll]\n    (reify\n      java.lang.Object\n      (toString [this] (apply str (interpose \", \" (sort coll))))\n      clojure.lang.Seqable\n      (seq [this] (when (seq coll) (distinct coll)))))", "user": "5383668ee4b06839e8705edd"}, {"problem": 113, "code": "(fn [& coll]\n  (reify clojure.lang.Seqable\n    (seq [this] (not-empty (distinct coll)))\n    (toString [this] (->> coll sort (interpose \", \") (apply str)))))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    java.lang.Object\n    (toString [this] (apply str (interpose \", \" (sort args))))\n    \n    clojure.lang.ISeq\n    (seq [this] (if (empty? args) nil (distinct args)))))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 113, "code": "(fn [& s]\n  (reify\n    Object (toString [this] (apply str (interpose \", \" (sort s))))\n    clojure.lang.Seqable (seq [this] (seq (distinct s)))))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 113, "code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (seq [this] (seq (distinct args)))\n    (toString [this] (clojure.string/join \", \" (sort args)))))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 113, "code": "(fn [& x] (reify Object\n                 (toString [this] (apply str (interpose \", \" (sort x))))\n                 clojure.lang.Seqable\n                 (seq [this] (if (empty? x) nil (distinct x)))\n                 ))", "user": "566a3a26e4b0a866af689699"}, {"problem": 113, "code": "(fn [& v]\n  (reify\n    clojure.lang.Seqable\n    (seq [_] (seq (distinct v)))\n    CharSequence\n    (toString [_] (str (clojure.string/join \", \" (sort v))))))", "user": "52bacfa8e4b07a9af57922d6"}, {"problem": 113, "code": "(fn [& S]\n  (reify Object \n          (toString [this] (clojure.string/join \", \" (sort S)))\n          clojure.lang.Seqable\n          (seq [this] (if (zero? (count S)) nil (distinct S)))))", "user": "5649615be4b0284900eef641"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct args)))\n    (toString [this] (apply str (interpose  \", \" (sort args))))))", "user": "56bca51ae4b0f26550335963"}, {"problem": 113, "code": "(fn makeDance[& args]\n  (reify\n    clojure.lang.ISeq\n    (seq [this] (if (empty? args) nil (distinct args)))\n    Object \n     (toString [this] (clojure.string/join \", \" (sort args)))\n )\n)", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 113, "code": "(fn [& coll]\n    (reify\n      Object\n      (toString [this]\n        (->> coll\n          (sort <)\n          (interpose \", \")\n          (apply str)))\n\n      clojure.lang.Seqable\n      (seq [this]\n        (seq (distinct coll)))))", "user": "5317d78ee4b08068f379ed63"}, {"problem": 113, "code": "(fn [& args]\n     (reify clojure.lang.Seqable\n       (toString [this] (clojure.string/join \", \" (sort args)))\n       (seq [this] (if (empty? args) nil (distinct args)))))", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 113, "code": "#(reify clojure.lang.Seqable\n   (toString [_] (clojure.string/join \", \" (sort %&)))\n   (seq [_] (if %& (distinct %&))))", "user": "56b86e64e4b0f26550335924"}, {"problem": 113, "code": "(fn [& args]\n        (reify clojure.lang.Seqable\n          (seq [this]\n            (and args\n                 (reduce #(if ((set %) %2)\n                            % (concat % (list %2))) () args)\n                 ))\n          (toString [this] (clojure.string/join \", \" (sort args)))))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 113, "code": "(fn f [& xs]\n  (reify clojure.lang.Seqable\n    (toString [this]\n      (clojure.string/join \", \" (sort xs)))\n    (seq [this]\n      (->> (reduce (fn [[seen col] x]\n                     (if (seen x)\n                       [seen col]\n                       [(conj seen x) (conj col x)]))\n                   [#{} []]\n                   xs)\n           second\n           seq))))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 113, "code": "#(reify clojure.lang.Seqable \n    (seq [this] (if (empty? %&) nil (distinct %&)))\n    (toString [this] (clojure.string/join \", \" (sort %&))))", "user": "53065acbe4b02e8216869792"}, {"problem": 113, "code": "#(let [se (keys (group-by identity %&))\n        st (apply str (interpose \", \"(sort %&)))]\n    (reify\n      Object (toString [this] st)\n      clojure.lang.Seqable (seq [this] (seq se))\n      ))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 113, "code": "(fn [& l]\n  (reify\n    Object\n    (toString [this]\n      (reduce\n       (fn\n         ([] \"\")\n         ([o n] (str o \", \" n))) (sort l)))\n    clojure.lang.Seqable\n    (seq [this]\n      (reduce\n       #(if (some #{%2} %1)\n          %1\n          (concat %1 [%2]))\n       nil\n       l))))", "user": "519136e9e4b0f8ef0be96c01"}, {"problem": 113, "code": "#(when %&\n   (reify\n     clojure.lang.ISeq\n     (seq [_] (distinct %&))\n     (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 113, "code": "(fn [& xs]\n    (reify\n      Object\n      (toString [_] (clojure.string/join \", \" (sort xs)))\n      clojure.lang.Seqable\n      (seq [_] (when xs (distinct xs)))))", "user": "4f57c913e4b0a7574ea7183f"}, {"problem": 113, "code": "(fn [& r]\n  (reify \n    Object \n       (toString [this] (apply str (interpose \", \" (sort r) )))\n    clojure.lang.Seqable  \n       (seq [this] (if (empty? r) nil (distinct r))))\n  )", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 113, "code": "(fn [& xs]\n  (reify\n    clojure.lang.Seqable\n    (toString [_] (apply str (interpose \", \" (sort xs))))\n    (seq [_] (seq (distinct xs)))))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 113, "code": "(fn [& args]\n    (reify clojure.lang.Seqable\n      (seq [this] (seq (distinct args)))\n      (toString [this] (clojure.string/join \", \" (sort args)))))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 113, "code": "(fn [& nums]\n  (reify clojure.lang.Seqable \n      (toString [this] (clojure.string/join \", \" (sort nums)))\n      (seq [this] (seq (distinct nums)))))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 113, "code": "(fn data-dance [& ints]\n  (reify\n    Object (toString [this] (clojure.string/join \", \"  (map str (sort ints))))\n    clojure.lang.Seqable (seq [this] (when ints (distinct ints)))))", "user": "571d063ee4b0145328a76272"}, {"problem": 113, "code": "(fn my-proxy [& xs]\n  (let [input (apply list xs)]\n    (reify clojure.lang.Seqable\n      (toString [this]\n        (clojure.string/join \", \" (sort input)))\n      (seq [this]\n        (seq (distinct input))))))", "user": "573c64b8e4b0cd1946bd10c1"}, {"problem": 113, "code": "(fn\n [& args]\n (reify\n  java.lang.Object\n  (toString [this] (apply str (interpose \", \" (sort args))))\n  clojure.lang.ISeq\n  (seq [this] (keys (group-by identity args)))))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 113, "code": "(fn [& s]\n  (reify clojure.lang.Seqable\n    (seq [_] (seq (reduce #(if (>= (.indexOf % %2) 0) % (conj % %2)) [] s)))\n    (toString [_] (clojure.string/join \", \" (sort s))))\n )", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 113, "code": "(fn [& elems]\n  (reify\n    Object (toString [_] (clojure.string/join \", \" (sort elems)))\n    clojure.lang.Seqable (seq [_] (seq (distinct elems)))))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 113, "code": "(fn f [& col]\n  (reify\n    Object (toString [this] (apply str (interpose \", \" (sort col))))\n    clojure.lang.ISeq (seq [this] (seq (distinct col)))))", "user": "54857657e4b0e286459a11ac"}, {"problem": 113, "code": "(fn wrap [& args]\n  (reify\n    Object\n    (toString [this] (clojure.string/join \", \" (sort args)))\n\n    clojure.lang.ISeq\n    (seq [this] (when args (distinct args)))))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 113, "code": "(fn [& nums ] \n  (if nums\n    (reify\n      clojure.lang.ISeq\n      (toString [_] (apply str (interpose \", \" (sort nums))))\n      (seq [_] (distinct nums)))))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 113, "code": "(fn datadance [& r]\n  (letfn [(isin? [l e] (reduce #(or (= %2 e) %1) false l))] \n  (reify\n    clojure.lang.ISeq\n    (seq [_] (if (= r nil)\n               nil\n               (reverse (reduce #(if (isin? %1 %2)\n                                   %1\n                                   (conj %1 %2)) '() r))))\n    (toString [_] (if (= r nil)\n                    \"\"\n                    (reduce #(if (= %1 \"\")\n                               (str %2)\n                               (str %1 \", \" %2)) \"\" (sort r)))))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 113, "code": "#(reify clojure.lang.ISeq\n  (toString [_] (reduce str (interpose \", \" (sort %&))))\n  (seq [_] (if (empty? %&) nil (distinct %&))))", "user": "56795deae4b05957ce8c6187"}, {"problem": 113, "code": "(fn [& s]\n  (reify\n    clojure.lang.ISeq\n    (seq [t]\n         (if (seq s)\n           (distinct s)))\n    (toString [t]\n              (clojure.string/join \", \" (sort s)))))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 113, "code": "(fn s [& xs]\n  (reify\n    java.lang.Object\n    (toString [_]\n      (apply str (interpose \", \" (sort xs))))\n    clojure.lang.Seqable\n    (seq [_]\n      (if (empty? xs) nil (distinct xs)))))", "user": "57717915e4b0979f896515b3"}, {"problem": 113, "code": "(fn [& args]\n        (let [to-seq (if (nil? args) nil (distinct args))\n              to-str (reduce str (butlast (interleave (sort args) (repeat \", \"))))\n              f (fn [] to-seq)]\n          (reify\n            clojure.lang.IFn\n            (toString [this] to-str)\n            (invoke [this] (f))\n            clojure.lang.ISeq\n            (first [this] (first to-seq))\n            (next [this] (next to-seq))\n            (more [this] (rest to-seq))\n            (cons [this v] (cons v to-seq))\n            (count [this] (count to-seq))\n            (empty [this] nil)\n            (equiv [this v] (= to-seq v))\n            clojure.lang.Seqable\n            ;; Think this is cheating - need to come back and solve the nil case properly!\n            (seq [this] (if (nil? (first this)) nil this))\n            clojure.lang.Sequential\n            )))", "user": "4e9ff8d0535d7eef3080729c"}, {"problem": 113, "code": "(fn [& xs]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort xs)))\n    (seq [this] (seq (distinct xs)))))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 113, "code": "(fn [& args]\n    (reify clojure.lang.Seqable\n      (toString [this] (apply str (interpose \", \" (sort args))))\n      (seq [this] (seq (distinct args)))))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 113, "code": "(fn [& l]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort l)))\n    (seq [this]  (seq (distinct l)))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 113, "code": "(fn __ [& c]\n (let [cd (distinct c)]\n (reify clojure.lang.Seqable \n \t(toString [this] (apply str (drop-last (interleave (sort c) (repeat (count c) \", \")))))\n\t(seq [this] (when (> (count cd) 0) cd)))))", "user": "52747090e4b03e8d9a4a74a5"}, {"problem": 113, "code": "(fn data-dance [ & args ]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    (seq [this] (if (empty? args) nil (distinct args)))))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 113, "code": "(fn seqable-proxy [& xs]\n  (let [input (apply list xs)]\n    (reify clojure.lang.Seqable\n      (toString [this]\n        (clojure.string/join \", \" (sort input)))\n      (seq [this]\n        (seq (distinct input))))))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 113, "code": ";; don't understand the question...\n(fn temp [& coll]\n  (reify \n    clojure.lang.Seqable\n    (seq [this] \n         (seq (distinct coll)))\n    Object\n    (toString [this] (apply str (interpose \", \" (sort coll))))))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 113, "code": "(fn [& n]\n  (reify clojure.lang.Seqable\n    (seq [this] (seq (distinct n)))\n    (toString [this] (clojure.string/join \", \" (sort n)))))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 113, "code": "(fn [& xs]\n  (letfn [\n          (do-string [xs]\n            (if (empty? xs)\n              \"\"\n              (clojure.string/join \", \" (sort xs))))\n          \n          (do-seq \n            ([xs] \n              (if (empty? xs)\n                nil\n                (do-seq #{} xs)))\n            \n            ([acc xs]\n              (if (empty? xs)\n                ()\n                (let [x (first xs)]\n                  (if (contains? acc x)\n                    (do-seq acc (rest xs))\n                    (cons x (do-seq (set (cons x acc)) (rest xs))))))))]\n    \n    (reify\n      clojure.lang.IFn\n      (toString [this] (do-string xs))\n      clojure.lang.Seqable               \n      (seq [this] (do-seq xs)))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 113, "code": "(fn [& coll]\n  (reify\n    java.lang.Object\n    (toString [this]\n      (apply str (interpose \", \" (sort coll))))\n    clojure.lang.Seqable\n    (seq [this]\n      (letfn [(step [coll result]\n                (if (seq coll)\n                  (let [head (first coll)]\n                    (if (some #{head} result)\n                      (step (next coll) result)\n                      (step (next coll) (concat result [head]))))\n                  result))]\n        (step coll nil)))))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 113, "code": "(fn [& args]\n    (reify clojure.lang.Seqable  \n      (toString [this] (clojure.string/join \", \" (sort args)))\n      (seq [this] (let [d (distinct args)]\n                    (if-not (empty? d) d)\n                    ))\n      ))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 113, "code": "(fn strseq [& ss]\n   (reify\n     clojure.lang.ISeq\n     (seq [_] (if (seq ss) (distinct ss) nil))\n     (toString [_] (if (seq ss) (apply str (interpose \", \" (sort ss))) \"\"))))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 113, "code": "(fn __ [& c]\n  (reify clojure.lang.Seqable\n    (toString [_] (clojure.string/join \", \" (sort c)))\n    (seq [_] (if (empty? c) nil (distinct c)))))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 113, "code": "(fn [& xs]\n  (reify clojure.lang.Seqable\n    (seq [this] (if (empty? xs) nil (distinct xs)))\n    (toString [this] (apply str (interpose \", \" (sort xs))))))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    Object\n    (toString [_]\n      (clojure.string/join \", \" (sort args)))\n    \n    clojure.lang.Seqable\n    (seq [_]\n      (if (seq args)\n        (distinct args)))))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 113, "code": "(fn [& x]\n  (reify        \n    clojure.lang.ISeq           \n    (seq [_] (let [r (distinct x)]\n               (if (empty? r)\n                 nil\n                 r)))       \n    (toString [_] (clojure.string/join \", \" (sort x)))))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 113, "code": "#(reify java.lang.CharSequence clojure.lang.Seqable \n    (toString [_] (clojure.string/join \", \" (sort %&)))\n    (seq [_] (seq (distinct %&))))", "user": "576df252e4b0979f8965156f"}, {"problem": 113, "code": "(fn dance [& args]\n  (let [lst (seq args)\n        dist (distinct lst)\n        sstr (clojure.string/join \", \" (sort lst))\n        robj (reify clojure.lang.Seqable\n            (toString [this] (if (empty? args) \"\" sstr))\n            (seq [this] (if (empty? args) nil dist)))]\n    robj))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 113, "code": "(fn\n  ([] nil)\n  ([& args]\n   (reify clojure.lang.Seqable\n     (seq [this]\n       (distinct args))\n     (toString [this]\n       (clojure.string/join \", \" (sort args))))))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 113, "code": "(fn [& s]\n  (reify\n    Object\n    (toString [t] (clojure.string/join \", \" (sort s)))\n    clojure.lang.Seqable\n    (seq [t] (if (empty? s) nil (distinct s)))))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 113, "code": "(fn rf [& args]\n  (reify \n    Object\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    clojure.lang.Seqable \n    (seq [this] (seq (apply sorted-set-by\n                            (fn [x y]\n                              (let [getkey (fn [v]\n                                             ((zipmap (reverse args) (range)) v))]\n                                (>  (getkey x) (getkey y))))\n                            args)))))", "user": "58152157e4b0f478707a0631"}, {"problem": 113, "code": "(fn dance [& coll]\n  (reify\n    java.lang.Object\n    (toString [this] (clojure.string/join \", \" (sort coll)))\n    clojure.lang.Seqable\n    (seq [this] (when ((comp not empty?) coll) (distinct coll)))))", "user": "56069006e4b08b23635d3174"}, {"problem": 113, "code": "(fn [& xs]\n    (reify\n      clojure.lang.Seqable\n      (toString [_] (apply str (interpose \", \" (sort xs))))\n      (seq [_] (seq (distinct xs)))))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    clojure.lang.ISeq\n    (seq [_]\n      (clojure.core/seq (reduce (fn [acc x]\n                                  (if ((set acc) x)\n                                    acc\n                                    (conj acc x)))\n                                []\n                                args)))\n    Object\n    (toString [_]\n      (clojure.string/join \", \" (sort args)))))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 113, "code": "#(reify clojure.lang.Seqable\n   (toString [_] (clojure.string/join \", \" (sort %&)))\n   (seq [_] (seq (distinct %&))))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 113, "code": "(fn [& li]\n\t(reify clojure.lang.Seqable \n  \t\t(toString [this] (clojure.string/join \", \" (sort li)))\n  \t\t(seq [this] (if (empty? li) nil (distinct li)))\n))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 113, "code": "(fn make-data-dance\n  ([] nil)\n  ([& args] (let [x args]\n              (reify\n                Object\n                (toString [this] (clojure.string/join \", \" (sort x)))\n                clojure.lang.Seqable\n                (seq [this] (loop [cached-set #{}\n                                   res-seq []\n                                   coll (seq x)]\n                              (cond\n                                (empty? coll) (seq res-seq)\n                                (contains? cached-set (first coll)) (recur cached-set res-seq (rest coll))\n                                :else (recur (conj cached-set (first coll))\n                                             (conj res-seq (first coll))\n                                             (rest coll)))))))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 113, "code": "(fn [& xs]\n  (reify clojure.lang.ISeq\n    (toString [this] (->> xs\n                        sort\n                        (interpose \", \")\n                        (apply str)))\n    (seq [this] (if (empty? xs)\n                  nil\n                  (distinct xs)))))", "user": "58247423e4b051871117bec5"}, {"problem": 113, "code": "(fn making-data-dance [& coll]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort coll)))\n    (seq [this] (if (empty? coll) nil (distinct coll)))))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 113, "code": "(fn [& s]\n  (reify\n    java.lang.Object\n    (toString [_] (apply str (interpose \", \" (sort s))))\n    clojure.lang.Seqable\n    (seq [_] (seq (loop [[f & r] s visited #{} res []]\n               (cond\n                 (nil? f) res\n                 (visited f) (recur r visited res)\n                 :default (recur r (conj visited f) (conj res f))))))))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 113, "code": "(fn [& nums]\n  (reify Iterable\n     (toString [this] (apply str (drop-last (interleave (sort nums) (repeat (count nums) \", \")))))\n     (iterator [this] (.iterator (distinct nums)))))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 113, "code": "#(reify clojure.lang.Seqable\n   (toString [[]] (->> %& sort (interpose \", \") (apply str)))\n   (seq [[]]      (->> %& distinct seq)))", "user": "50479524e4b0371827a27bc4"}, {"problem": 113, "code": "(fn [& s]\n  (reify\n    Object\n    (toString [this] (clojure.string/join \", \" (sort s)))\n    clojure.lang.Seqable\n    (seq [this]\n      (seq\n       (reduce (fn [c v]\n                 (if (.contains c v) c (conj c v))) [] s)))))", "user": "589037b4e4b00487982d51d0"}, {"problem": 113, "code": "(fn making-data-dance [& args]\n  (when args\n    (reify clojure.lang.ISeq\n      (seq [_] (distinct args))\n      (toString [_] (apply str (interpose \", \" (sort args)))))))", "user": "5879d577e4b01531a375ead8"}, {"problem": 113, "code": "(fn [& coll]\n  (reify Object\n      (toString [this] (apply str (interpose \", \" (sort coll))))\n      Iterable\n      (iterator [this] (.iterator (distinct coll)))))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 113, "code": "#(let [args %&]\n   (reify clojure.lang.Seqable\n     (toString [this] (clojure.string/join \", \" (sort args)))\n     (seq [this] (seq (distinct args)))))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 113, "code": "(fn make-data-dance [& ints]\n  (reify clojure.lang.Seqable\n    (toString [_] (clojure.string/join \", \" (sort ints)))\n    (seq [_] (seq (distinct ints)))))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 113, "code": "(fn [& s]\n  (reify clojure.lang.ISeq\n    (toString [_] (clojure.string/join \", \" (sort s)))\n  \t(seq [_] (seq (distinct s)))))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 113, "code": "(fn data-dance [& coll]\n  (reify Object\n       (toString [this] (apply str (interpose \", \" (sort coll))))\n    clojure.lang.Seqable\n       (seq [this] (if (empty? coll) nil (distinct coll)))))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 113, "code": "(fn [& l]\n  (reify clojure.lang.Seqable\n    (toString [_] (clojure.string/join \", \" (sort l)))\n    (seq [_] (seq (distinct l)))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 113, "code": "#(when %&\n   (reify\n     clojure.lang.ISeq\n     (seq [_] (distinct %&))\n     (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    Object\n    (toString [_] (clojure.string/join \", \" (sort args)))\n    \n    clojure.lang.Seqable\n    (seq [_] (seq (distinct args)))))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 113, "code": "(fn [& ints]\n    (reify clojure.lang.Seqable\n      (seq [_] (->> ints distinct seq))\n      (toString [_] (->> ints sort (clojure.string/join \", \")))))", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 113, "code": "(fn [& xs]\n  (reify\n    clojure.lang.Seqable\n    (toString [_] (clojure.string/join \", \" (sort xs)))\n    (seq [_] (when xs (distinct xs)))))", "user": "57d418b4e4b0bd073c20239a"}, {"problem": 113, "code": "(fn [& s]\n      (reify clojure.lang.Seqable\n        (seq [this] (seq (reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) [] s)))\n        (toString [this] (clojure.string/join \", \" (sort s))))\n      )", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 113, "code": "(fn dance\n  [& nums]\n  (reify\n    clojure.lang.Seqable\n    (toString [this]\n      (apply str\n             (drop-last\n               (mapcat (fn [n] [n \", \"]) (sort nums)))))\n    (seq [this]\n      (seq\n        ((fn fu\n           ([ns] (fu #{} [] ns))\n           ([ad lf ns]\n             (if (empty? ns) lf\n               (let\n                 [f (first ns) r (rest ns)]\n                 (if (contains? ad f) (fu ad lf r) (fu (conj ad f) (conj lf f) r))))))\n         nums)))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 113, "code": "(fn [& s]\n    (reify\n      Object\n      (toString [this] (clojure.string/join \", \" (sort s)))\n      clojure.lang.ISeq\n      (seq [this]\n        ((fn f [[x & xs]]\n           (when x\n             (cons x (f (remove #{x} xs))))) s))))", "user": "55f5c4a9e4b06e875b46ce8f"}, {"problem": 113, "code": "(fn dd [& args]\n  (let [stringOutput (clojure.string/join \", \" (sort args))\n        seqOutput (distinct args)]\n      (reify clojure.lang.Seqable\n              (seq [this] (seq seqOutput))\n             Object\n              (toString [this] stringOutput))))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 113, "code": "(fn [& xs]\n  (reify clojure.lang.ISeq\n    (seq [self] (if (seq xs) (distinct (seq xs)) nil))\n    (toString [self] (apply str (interpose \", \" (sort xs)))))\n)", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 113, "code": "(fn [& f]\n  (reify clojure.lang.Seqable\n    (toString [this] \n      (apply str (interpose \", \" (sort f))))\n    (seq [this]\n      (if (seq f)(distinct f)))))", "user": "56102f50e4b05f002753df6b"}, {"problem": 113, "code": "#(when %&\n   (reify\n     clojure.lang.ISeq (seq [_] (distinct %&))\n    (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 113, "code": "; Evil hack\n(fn [& _]\n  (reify nil\n    clojure.lang.IPersistentCollection\n    (seq [_])\n    (cons [_ _])\n    (empty [_])\n    (equiv [_ _] true)))", "user": "51e58e02e4b0efabf93c02d0"}, {"problem": 113, "code": "(fn [& numbers]\n  (reify clojure.lang.Seqable\n    (toString [this] (if (empty? numbers) \"\" (clojure.string/join \", \" (sort numbers))))\n    (seq  [this] (if (empty? numbers) nil (distinct numbers)))\n  )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 113, "code": "(fn [& xs]\n  (reify\n    clojure.lang.Seqable (seq [_] (seq (distinct xs)))\n    Object (toString [_] (clojure.string/join \", \" (sort xs)))))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 113, "code": "#(when %&\n   (reify\n     clojure.lang.ISeq\n     (seq [_] (distinct %&))\n     (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "59358f74e4b04f87174def52"}, {"problem": 113, "code": "(fn data-dance [& numbers]\n    (reify Object\n         (toString [this] (->> numbers sort (interpose \", \") (apply str)))\n      clojure.lang.Seqable\n    (seq [this] (if (empty? numbers) nil (distinct numbers)))))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 113, "code": "(fn data-dance [& ls]\n  (reify\n    Object\n    (toString [this] (clojure.string/join \", \" (sort ls)))\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct ls)))))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 113, "code": "(fn [& args]\n  (let [join clojure.string/join]\n    (reify clojure.lang.Seqable \n      (toString [this] (join \", \" (sort args)))\n      (seq [this] (-> args distinct seq)))))", "user": "59f91b99e4b0ca45a743a33a"}, {"problem": 113, "code": "(fn [& a]\n    (reify clojure.lang.Seqable\n      (seq [_] (seq (distinct a)))\n      (toString [_] (clojure.string/join \", \" (sort a)))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 113, "code": "(fn sol [& args]\n  (letfn [\n          \n         (xstr [c]\n    (cond (not (or (= c \\)) (= c \\( ) (= c \\space) ) )\n                [c \\, \\space]\n          :else  []\n    )\n)\n\n(mystr [xs]\n(apply str \n(reduce concat (map xstr (sort (str xs))))\n)\n)\n \n          \n          ]\n    (reify Object\n       (toString [this]\n           (apply str (drop-last 2 (mystr args)) )\n        \n       )  \n          clojure.lang.Seqable\n       (seq [this] (seq (distinct args)))\n   )\n    )\n)", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 113, "code": "(fn [& args]\n    (reify clojure.lang.Seqable\n      (toString [this] (apply str (interpose \", \" (sort args))))\n      (seq [this]\n        (loop [x (first args)\n               xs (rest args)\n               seen_so_far #{}\n               uniq_items []]\n          (if (nil? x)\n            (seq uniq_items)\n            (if (contains? seen_so_far x)\n              (recur (first xs) (rest xs) seen_so_far uniq_items)\n              (recur (first xs) (rest xs) (conj seen_so_far x) (conj uniq_items x))))))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 113, "code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (seq [this] (if (empty? args)\n                  nil\n                  (distinct args)))\n    (toString [this]\n      (->> args\n           sort\n           (clojure.string/join \", \")))))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 113, "code": "(fn [& as]\n  (let [unique-in-order (first (reduce (fn [[coll seen] item] (if (contains? seen item)\n                                                                  [coll seen]\n                                                                  [(conj coll item) (conj seen item)]))\n                                       [ [] #{} ]\n                                       as))]\n    (reify\n      clojure.lang.Seqable (seq [this] (seq unique-in-order))\n      Object (toString [this] (apply str (interpose \", \" (sort as)))))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 113, "code": "(fn ddance [& data]\n  (reify \n    Object (toString [_] (clojure.string/join \", \" (sort data)))\n    clojure.lang.Seqable  (seq [_] (if (empty? data) nil (distinct data)))))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 113, "code": "(fn mdd [& xs]\n   (reify clojure.lang.Seqable \n      (toString [this] (clojure.string/join \", \" (sort xs)))\n      (seq [this] (seq (distinct xs)))))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 113, "code": "(fn [& args]\n        (reify \n          Object\n          (toString [this] \n            (apply str \n                   (interpose \", \"  \n                              (map str (sort args)))))\n          \n          clojure.lang.Seqable \n          (seq [this] \n            (seq (distinct args)))))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 113, "code": "(fn [& xs]\n (reify clojure.lang.Seqable\n   (seq [_] (when\n             xs\n             (distinct xs)))\n   (toString [_]\n             (clojure.string/join \", \" (sort xs)))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 113, "code": "(fn [& data]\n  (reify \n    clojure.lang.Seqable (seq [this] (seq (distinct data)))\n    Object (toString [this] (clojure.string/join \", \" (sort data)))\n  ))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 113, "code": "(fn [& inputs]\n  (reify\n    Object\n    (toString [this]\n              (->> (sort inputs)\n                   (interpose \", \")\n                   (apply str)))\n    \n    clojure.lang.Seqable \n    (seq [this] \n         (if (empty? inputs)\n           nil\n           (distinct inputs)))))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    Object\n    (toString [this] (->> (sort args)\n                          (clojure.string/join \", \")))\n    clojure.lang.Seqable\n    (seq [this]\n      (seq (distinct args)))))", "user": "52470d42e4b05ef8e38e6350"}, {"problem": 113, "code": "(fn [& nums] (reify Object (toString [this] (clojure.string/join \", \" (sort nums))) clojure.lang.Seqable (seq [this] (seq (distinct nums)))))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 113, "code": "#(when %&\n   (reify\n     clojure.lang.ISeq\n     (seq [_] (distinct %&))\n     (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 113, "code": ";\u308f\u304b\u3089\u3093\n#(when %&\n  (reify\n   clojure.lang.ISeq\n   (seq [_] (distinct %&))\n   (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    clojure.lang.Seqable\n    (seq [_] (-> (reduce \n                  (fn [{:keys [uniq l]} arg]\n                    (if (uniq arg)\n                      {:uniq uniq :l l}\n                      {:uniq (conj uniq arg) :l (conj l arg)}))\n                  {:uniq #{} :l []}\n                  args)\n                 :l\n                 seq))\n    Object\n    (toString [_] (->> args sort (clojure.string/join \", \")))))", "user": "5a8ef409e4b05369db4d2530"}, {"problem": 113, "code": "(fn [& args]\n  (let [string (if (empty? args) \"\" (reduce #(str % \", \" %2) (sort args)))\n        sq (seq (reduce (fn [acc item] (if ((set acc) item) acc (conj acc item))) [] args))]\n    (reify clojure.lang.Seqable\n      (toString [this] string)\n      (seq [this] sq))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 113, "code": "(fn data-dance [& ints]\n  (reify clojure.lang.Seqable\n    (seq [this] (seq (distinct ints)))\n    (toString [this] (clojure.string/join \", \" (sort ints)))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 113, "code": "(fn strseq [& xs]\n  (reify clojure.lang.Seqable\n    (seq [this] (seq (distinct xs)))\n    (toString [this] (clojure.string/join \", \" (sort xs)))))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 113, "code": "#(when %&\n  (reify\n   clojure.lang.ISeq\n   (seq [_] (distinct %&))\n   (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 113, "code": "(fn [& ints]\n  (reify\n    Object\n    (toString [_]\n      (apply str (interpose \", \" (sort ints))))\n    clojure.lang.Seqable\n    (seq [_]\n      (seq (distinct ints)))))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 113, "code": "(fn weird-sort [& els]\n  (reify\n    java.lang.Object\n    (toString [this] (apply str (drop-last (interleave (sort els) (repeat \", \") ))))\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct els)))))", "user": "5b13ba71e4b0cc2b61a3be53"}, {"problem": 113, "code": "(fn [& args]\n    (reify clojure.lang.Seqable\n      (seq [this] (seq (distinct args)))\n      Object\n      (toString [this]\n        (->> (sort args)\n             (interpose \", \")\n             (apply str)))))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 113, "code": "(fn making-data-dance\n  [& nums]\n  (reify clojure.lang.Seqable\n    (toString [_] (clojure.string/join \", \" (sort nums)))\n    (seq [this] (-> nums\n                    distinct\n                    seq))))", "user": "5125029de4b0ce9225d2ed3e"}, {"problem": 113, "code": "(fn [& ints]\n                  (reify\n                    Object\n                    (toString [this]\n                      (if (not (empty? ints))\n                        (->> ints\n                             sort\n                             (map str)\n                             (interpose \", \")\n                             (apply str))\n                        \"\"))\n                    clojure.lang.Seqable\n                    (seq [this] (if (not (empty? ints))\n                                  (distinct ints)\n                                  nil))))", "user": "57f904c5e4b0d3187e900936"}, {"problem": 113, "code": "(fn [& xs]\n  (reify \n   clojure.lang.Seqable\n   (toString [this] (clojure.string/join \", \" (sort xs)))\n   (seq [this] (seq (distinct xs)))))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 113, "code": "(fn [& args]                             \n    (reify clojure.lang.Seqable            \n      (toString [_]                     \n        (clojure.string/join \", \" (sort args)))\n      (seq [_]                          \n        (keys (group-by identity args)))))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 113, "code": "#(when %&\n   (reify\n     clojure.lang.ISeq\n     (seq [_] (distinct %&))\n     (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 113, "code": "(fn __ [& nums]\n  (reify\n    Object\n    (toString [this]\n      (clojure.string/join \", \" (sort nums)))\n    clojure.lang.Seqable\n    (seq [this]\n      (seq\n       (loop [n nums\n              res []\n              occur #{}]\n         (cond\n          (empty? n) res\n          (occur (first n)) (recur (rest n) res occur)\n          :else (recur (rest n) (conj res (first n))\n                       (conj occur (first n))))))\n      )))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 113, "code": "(fn [& i]\n  (reify clojure.lang.ISeq\n    (toString [this] (apply str (interpose \", \" (sort i))))\n    (seq [this] (if (empty? i) nil (distinct i)))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 113, "code": "(fn [& coll]\n(reify Object \n       (toString [x] (apply str (interpose \", \" (sort coll))))\nclojure.lang.Seqable \n       (seq [y] (if-let[c coll] (distinct c) nil) ))\n)", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 113, "code": "(fn [& x] \n  (reify \n    clojure.lang.Seqable (seq [this] (if x (distinct x) nil)) \n    Object (toString [this] (apply str (interpose \", \" (sort x))))\n    ))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 113, "code": "(fn data-dance [& coll]\n  (reify\n    Object\n    (toString [_] (apply str (interpose \", \" (sort coll))))\n    clojure.lang.Seqable\n    (seq [_] (when coll\n               (distinct coll)))))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 113, "code": "#(when %&\n   (reify\n     clojure.lang.ISeq\n     (seq [_] (distinct %&))\n     (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 113, "code": "(fn data-dance\n  [& my-seq]\n  (reify clojure.lang.ISeq\n    (toString [_] (apply str (interpose \", \" (sort my-seq))))\n    (seq [_] (let [x (distinct my-seq)]\n               (if (empty? x)\n                 nil\n                 x)))))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 113, "code": "(fn [& args]\n  (reify Object \n           (toString [this] \n             (clojure.string/join \", \" (sort args)))\n         clojure.lang.Seqable\n           (seq [this] \n             (reduce \n               #(if (get (set %) %2) % (concat % (list %2))) \n               nil args))))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 113, "code": "#(reify\n   clojure.lang.ISeq\n   (seq [_] (seq (distinct %&)))\n   (toString [_] (apply str (interpose \", \" (sort %&)))))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 113, "code": "(fn [& x] (reify clojure.lang.ISeq (seq [this] (seq (distinct x))) \n          (toString [this] (apply str (interpose \", \" (sort x))))))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 113, "code": "(fn list-proxy [& args]\n  (reify \n    Object\n    (toString [this] (apply str (interpose \", \" (sort args))))\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct args)))))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 113, "code": "(fn dance [& xs]\n  (reify clojure.lang.Seqable\n    (toString [_] (clojure.string/join \", \" (sort xs)))\n    (seq      [_] (when (seq xs) (distinct xs)))))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 113, "code": "(fn test-class [& args]\n    (reify clojure.lang.Seqable\n        (seq [this]\n             (when args (distinct args)))\n        (toString [this]\n             (->> (sort args)\n                  (interpose \", \")\n                  (apply str)))))", "user": "54848141e4b0e286459a119e"}, {"problem": 113, "code": ";; http://www.4clojure.com/problem/113\n(fn data-dance\n  [& arg-list]\n  (when arg-list\n    (reify\n      clojure.lang.ISeq\n      (seq [x] (distinct arg-list))\n      (toString [x] (apply str (interpose \", \" (sort arg-list)))))))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    Object\n    (toString [_] (->> args (sort) (clojure.string/join \", \")))\n    clojure.lang.ISeq\n    (seq [_] (seq (first (reduce\n                      (fn [[xs v] a]\n                        (if (v a) [xs v] [(conj xs a) (conj v a)]))\n                      [[] #{}]\n                      args))))))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 113, "code": "(fn [& in]\n  (reify\n    clojure.lang.Seqable\n    (seq [_] (if (seq? in) (distinct in)))\n    Object\n    (toString [_] (clojure.string/join \", \" (sort in)))))", "user": "5d1b2b7de4b02ea6f0fb697a"}, {"problem": 113, "code": "(fn [& xs]\n  (reify\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct xs)))\n    (toString [this] (clojure.string/join \", \" (sort xs)))))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 113, "code": "(fn\n  [& xs]\n  (reify\n    Object\n    (toString\n      [this]\n      (clojure.string/join \", \" (sort xs)))\n\n    Iterable\n    (iterator\n      [this]\n      (.iterator (distinct xs)))))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    clojure.lang.Seqable\n    (toString [this] (if (empty? args) \"\" (clojure.string/join \", \" (sort args))))\n    (seq [this] (if (empty? args) nil (distinct args)))))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 113, "code": "(fn [& data]\n    (reify\n      clojure.lang.Seqable\n      (seq [this] (if (empty? data ) nil (distinct data)))\n      Object\n      (toString [this] (clojure.string/join \", \" (sort data)))))", "user": "527ccaf4e4b0757a1b17136d"}, {"problem": 113, "code": "(fn data_dance [& args]\n    (reify\n        Object\n            (toString [this] (clojure.string/join \", \" (sort (mapcat str args))))\n        clojure.lang.Seqable\n            (seq [this] (seq (first (reduce (fn [[ret s] v] (if (s v) [ret s] [(conj ret v) (conj s v)])) [[] #{}] args))))\n    )\n)", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 113, "code": "(fn [& is]\n  (reify clojure.lang.Seqable\n    (seq [this] (when (seq is) (distinct is)))\n    (toString [this] (->> is sort (interpose \", \") (apply str)))))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 113, "code": "(fn [& is]\n  (reify clojure.lang.Seqable\n         (seq [this] (if (empty? is) nil (distinct is)))\n         (toString [this] (clojure.string/join \", \" (sort is)))))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 113, "code": "(fn formattable [& integers]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (map str (sort integers))))\n    (seq [this] (if (empty? integers) nil (distinct integers)))))", "user": "529dfc6de4b04e0c58e87b8a"}, {"problem": 113, "code": "(fn [& r]\n  (reify clojure.lang.Seqable\n    (toString [_] (apply str (interpose \", \" (sort r))))\n    (seq [_] (seq (distinct r)))))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 113, "code": "#(when %&\n   (reify\n     clojure.lang.ISeq\n     (seq [_] (distinct %&))\n     (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 113, "code": "(fn seqable-proxy [& args]\n  (reify clojure.lang.ISeq\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    (seq [this] (seq (distinct args)))))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 113, "code": "(fn seqable-proxy [& args]\n  (reify clojure.lang.ISeq\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    (seq [this] (seq (distinct args)))))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 113, "code": "(fn data-dance [& coll]\n  (reify Object\n       (toString [this] (apply str (interpose \", \" (sort coll))))\n    clojure.lang.Seqable\n       (seq [this] (if (empty? coll) nil (distinct coll)))))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 113, "code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (toString [this] (apply str (interpose \", \" (sort args))))\n    (seq [this] (seq (distinct args)))))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 113, "code": "(fn [& is]\n    (reify\n      Object\n      (toString [this] (clojure.string/join \", \" (sort is)))\n      clojure.lang.Seqable\n      (seq [this]\n        (->> (reduce (fn [[uniques collected] v]\n                       (if (uniques v) [uniques collected]\n                           [(conj uniques v) (conj collected v)])) [#{} []] is)\n             second seq))))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 113, "code": "(fn  f113 [ & s]\n  (reify clojure.lang.Seqable\n    (toString [this]\n      (clojure.string/join \", \" (sort s)))\n    (seq [a]\n      (loop [acc '[]\n             s   s] \n        (if (empty? s)\n          (seq acc)\n          (recur (if ((set acc) (first s)) acc (conj acc (first s))) (rest s)))))))", "user": "583048d9e4b051871117c007"}, {"problem": 113, "code": "(fn [& ps]\n  (reify \n    Object (toString [this] (clojure.string/join \", \" (sort ps)))\n    clojure.lang.Seqable (seq [this] (seq (distinct ps)))))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 113, "code": "(fn [& args]\n\t(reify clojure.lang.Seqable  \n       (toString [_] (apply str (interpose \", \" (sort args))))\n       (seq [_] (seq (distinct args)))))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 113, "code": "(fn dance [& a]\n  (reify clojure.lang.ISeq\n    (seq [this] (loop [coll a acc '() s #{}]\n                  (cond\n                    (empty? coll) (if (empty? acc) nil (reverse acc))\n                    (s (first coll)) (recur (rest coll) acc s)\n                    :else (recur (rest coll) (conj acc (first coll)) (conj s (first coll))))))\n    (toString [this] (apply str (interpose \", \" (sort a))))))", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 113, "code": "(fn [& args]\n   (let [str-result (clojure.string/join \", \" (sort args))\n         seq-result (loop [res (), used #{}, coll args]\n              (if (empty? coll)\n                (reverse res)\n                (let [[h & t] coll]\n                  (if (used h)\n                    (recur res used t)\n                    (recur (cons h res) (conj used h) t)))))]\n     (reify Object clojure.lang.Seqable\n       (toString [this] str-result)\n       (seq [this] (seq seq-result)))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 113, "code": "(fn [& xs]\n  (reify\n    Object\n    (toString [this]\n      (clojure.string/join \", \" (sort xs)))\n\n    clojure.lang.Seqable\n    (seq [this]\n      (seq (distinct xs)))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 113, "code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (seq [this]\n      (and args (distinct args)))\n    (toString [this]\n      (clojure.string/join \", \" (sort args)))))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 113, "code": "(fn [& i]\n  (reify\n    Object\n    (toString [this] (apply str (interpose \", \" (sort i))))\n    clojure.lang.Seqable\n    (seq [this] (seq (distinct i)))))", "user": "4e8768f6535dceadca469850"}, {"problem": 113, "code": "(fn [& args]\n  (reify clojure.lang.ISeq\n    (seq [_] (seq (distinct args)))\n    (toString [_] (clojure.string/join \", \" (sort args)))))", "user": "5db0172be4b0f8c104ccfc96"}, {"problem": 113, "code": "(fn [& args]\n  (reify\n    Object (toString [this] (clojure.string/join \", \" (sort args)))\n    Iterable (iterator [this] (.iterator (distinct args)))))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 113, "code": "(fn [& xs]\n    (reify clojure.lang.Seqable\n      (toString [this]\n        (clojure.string/join \", \" (sort xs)))\n      (seq [this]\n        (seq (distinct xs)))))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 113, "code": "(fn [& xs]\n  (reify\n    Object\n    (toString [this]\n      (->> (sort xs)\n           (interpose \", \")\n           (apply str)))\n    clojure.lang.ISeq\n    (seq [this]\n      (when-not (empty? xs)\n        (distinct xs)))))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 113, "code": "(fn [& args]\n  (reify \n      clojure.lang.Seqable\n      (toString [_] (clojure.string/join \", \" (sort args)))\n      (seq [this]\n        (seq (second (reduce (fn [a v]\n                          (if (contains? (first a) v)\n                            a\n                            [ (conj (first a) v) (conj (second a) v) ]\n                            )\n\n                          ) [#{} []] args))))))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 113, "code": "(fn data-dancer [& xs]\n  (reify\n    Object (toString [this] (clojure.string/join \", \"(sort xs)))\n    clojure.lang.Seqable (seq [this] (seq (distinct xs)))))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 113, "code": "(fn data-dance [& ns]\n  (reify\n    Object\n    (toString [_]\n      (reduce str \"\" (interpose \", \" (sort ns))))\n    clojure.lang.Seqable\n    (seq [_]\n      (seq (distinct ns)))))", "user": "5f300f28e4b033932238a682"}, {"problem": 113, "code": "(fn [& args]\n  (reify clojure.lang.Seqable\n    (seq [this] (seq (distinct args)))\n    (toString [this] (clojure.string/join \", \" (sort args)))))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 113, "code": "(fn make-dance [& numbers]\n  (reify clojure.lang.ISeq\n    (toString [_] (apply str (interpose \", \" (sort numbers))))\n    (seq [_] (if-not (nil? numbers) (distinct numbers)))))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 113, "code": "(fn data-dancer [& args] (let [sorted-args     (clojure.string/join \", \" (sort args))\n                                 ordered-uniques (seq (:ans (reduce (fn [res val]\n                                                                      (let [ans     (:ans res)\n                                                                            uniques (:uniques res)]\n                                                                        (if (contains? uniques val)\n                                                                          {:ans     ans\n                                                                           :uniques uniques}\n                                                                          {:ans     (conj ans val)\n                                                                           :uniques (conj uniques val)})))\n                                                                    {:ans     []\n                                                                     :uniques #{}}\n                                                                    args)))]\n                             (reify\n                               Object\n                               (toString [this] sorted-args)\n                               clojure.lang.ISeq\n                               (seq [this] ordered-uniques))))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 113, "code": "(fn _113_ [& args]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (sort args)))\n    (seq [this] (seq (distinct args)))))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 113, "code": "; SegFaultAX https://gist.github.com/SegFaultAX/3607101\n#(when %&\n   (reify\n     clojure.lang.ISeq\n     (seq [_] (distinct %&))\n     (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 113, "code": "#(when %&\n(reify\n   clojure.lang.ISeq\n(seq [b] (distinct %&))\n     (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 113, "code": "(fn thing [& s]\n  (reify clojure.lang.IPersistentCollection\n    (toString [this] \n      (let [sorted-s (sort s)] \n        (if (seq s) \n          (reduce #(str %1 \", \" %2) (first sorted-s) (rest sorted-s))\n          \"\")))\n    (seq [this] (if (nil? s) nil (distinct s)))))", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 113, "code": "(fn [& c]\n  (reify clojure.lang.Seqable\n    (seq [_] (seq (distinct c)))\n    (toString [_] (apply str (interpose \", \" (sort c))))))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 113, "code": "(fn [& xs]\n    (reify clojure.lang.Seqable\n        (seq [this] (seq (distinct xs)))\n        (toString [this] (clojure.string/join \", \" (sort xs)))))", "user": "600ae927e4b074f607df6689"}, {"problem": 113, "code": "(fn formattable [& integers]\n  (reify clojure.lang.Seqable\n    (toString [this] (clojure.string/join \", \" (map str (sort integers))))\n    (seq [this] (if (empty? integers) nil (distinct integers)))))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 113, "code": "(fn f [& i]\n  (reify clojure.lang.ISeq\n    (seq [_] (if i (distinct i)))\n    (toString [_] (apply str (interpose \", \" (sort i))))))", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 113, "code": "(fn [& xs]\n  (reify clojure.lang.ISeq\n    (seq [this] (seq (distinct xs)))\n    (toString [this] (clojure.string/join \", \" (sort xs)))))", "user": "5cb41c40e4b026601754b911"}, {"problem": 113, "code": "(fn [& args]\n  (reify java.lang.Object\n    (toString [this]\n      (if (empty? args) \"\"\n          (clojure.string/join \", \" (sort < args))))\n    clojure.lang.Seqable\n    (seq [this]\n      (if (empty? args) nil\n          (distinct args)))))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 113, "code": "(fn reified [& x] (reify clojure.lang.Seqable\n                    (toString [this] (clojure.string/join \", \" (map str (sort x))))\n                    (seq [this] (seq (reduce (fn [agg next] (if (some #{next} agg) agg (conj agg next))) [] x))\n)))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 113, "code": "(fn data-dance\n  [& ns]\n  (if (empty? ns)\n    (reify clojure.lang.Seqable\n      (toString [this] \"\")\n      (seq [this] nil))\n    (reify clojure.lang.Seqable\n     (toString [this] (clojure.string/join \", \" (sort ns)))\n     (seq [this] (distinct ns)))))", "user": "60460824e4b02d28681c77bc"}, {"problem": 113, "code": "#(when %&\n   (reify\n     clojure.lang.ISeq\n     (seq [_] (distinct %&))\n     (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "4e586949535d8a8b8723a292"}, {"problem": 113, "code": "#(when %&\n   (reify\n     clojure.lang.ISeq\n     (seq [_] (distinct %&))\n     (toString [_] (apply str (interpose \", \" (sort %&))))))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 113, "code": "(fn [& args]\n  (let [l (vec args)]\n    (reify clojure.lang.Seqable\n      (toString [this] (->> l\n                           sort\n                           (clojure.string/join \", \")))\n      (seq [this] (keys (frequencies l))))))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 113, "code": "(fn [& arr]\n  (reify \n    clojure.lang.ISeq\n    (seq [_] (when (seq arr) (distinct arr)))\n    (toString [_]\n      (->> (sort arr)\n           (interpose \", \")\n           (apply str)))))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 113, "code": "#(if %& \n   (reify clojure.lang.ISeq\n  \t(toString [_] (apply str (interpose \", \" (sort %&))))\n     (seq [_] (distinct %&))))", "user": "60264d89e4b0d5df2af2222d"}]