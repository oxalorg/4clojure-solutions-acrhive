[{"code": "#(-> % str count (/ 2) ((juxt take take-last) (str %)) (->> (map sort) (reduce =)))", "problem": 115, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn [n]\n  (let [s (str n)\n        c (count s)\n        size (int (/ c 2))\n        a (take size s)\n        b (take size (reverse s))]\n    (= (reduce + (map int a)) (reduce + (map int b)))))", "problem": 115, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "(fn [n]\n  (= 1 (count (set\n    (map #(reduce + %)\n      (map #(take (/ (count %) 2) %)\n        (#(list % (reverse %))\n           (map int (str n)))))))\n  ))", "problem": 115, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn[n](letfn[(f[y](let[n(/(count y)2)](=(apply +(take n y))(apply +(take-last n y)))))](f(map #(read-string(str %))(str n)))))", "problem": 115, "user": "4dd4034a535dae65d5c462df"}, {"code": "(fn [n]\r\n  (let [v (vec (reductions #(+ %1 (- (int %2) 48)) 0 (str n)))\r\n        p1 (quot (dec (count v)) 2) p2 (quot (count v) 2)]\r\n    (= (v p1) (- (last v) (v p2)))))", "problem": 115, "user": "4dc1ee85535d020aff1edf91"}, {"code": "#(let [s (str %)\r\n       f (fn [s] (sort (take (/ (count s) 2) s)))]\r\n  (= (f s) (f (reverse s))))", "problem": 115, "user": "4dce6e41535d5973398f92a2"}, {"code": "(fn [n] (let [f (fn [s] \n        (apply + (map #(Integer/parseInt (str %)) (take (quot (count s) 2) s))))] (= (f (seq (str n))) (f (reverse (seq (str n)))))))", "problem": 115, "user": "4dae4da5c9a9d6ed4e99dc57"}, {"code": "(fn [n]\n  (let [digits (map #(mod % 10)\n                  (take-while (partial < 0)\n                    (iterate #(quot % 10) n)))\n        half (quot (count digits) 2)\n        xs (take half digits)\n        ys (take half (reverse digits))]\n    (= (apply + xs) (apply + ys))))", "problem": 115, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "#(loop [c (map (fn [n] (Character/getNumericValue n)) (str %)) l 0 r 0]\n  (if (< 1 (count c))\n    (recur (rest (butlast c)) (+ l (first c)) (+ r (last c)))\n    (= l r)))", "problem": 115, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "#(let [[d c]\n        (loop [s [] n % c 0]\n          (if (= n 0) [s c]\n           (recur (conj s (mod n 10)) (quot n 10) \n                (+ c 1))))\n       [a b] (split-at (/ c 2) d)]\n    (= (reduce + (if (even? c) a (butlast a))) (reduce + b)))", "problem": 115, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn\n  [x]\n  (let [a (map #(- (int %) (int \\0)) (str x))\n        b (reverse a)\n        h (quot (count a) 2)]\n    (= (apply + (take h a)) (apply + (take h b)))))", "problem": 115, "user": "4db53f87535d87e67b28fe08"}, {"code": "(letfn [\r\n  \t(split [n]\r\n\t\t\t(let [n-str      (str n)\r\n\t\t\t      n-len      (count n-str)\r\n\t\t\t\t  n-half-len (unchecked-divide n-len 2)]\r\n\t\t\t\t[(subs n-str 0 n-half-len) (subs n-str (- n-len n-half-len))]))\r\n\t\t(sum-digits [n-str]\r\n\t\t\t(apply + (map #(- (int %) (int \\0)) n-str)))]\r\n\t\r\n\t(fn balanced? [n]\r\n\t\t(let [[xs ys] (split n)]\r\n\t\t\t(= (sum-digits xs) (sum-digits ys)))))", "problem": 115, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn [n]\n  (let [d (map #(- (int %) 48) (str n))\n        f #(apply + (take (/ (count %) 2) %))]\n    (= (f d) (f (into () d)))))", "problem": 115, "user": "4e52d815535d302ef430da77"}, {"code": "(fn [n] (let [\n  i (map int (str n))\n  a #(apply + (take (quot (count i) 2) %))\n ] ( = (a i) (a (reverse i)))))", "problem": 115, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn balanced?\n  [n]\n  (let [s (str n)\n        mid (quot (count s) 2)\n        ns (map (comp read-string str) s)]\n    (= (apply + (take mid ns)) (apply + (take mid (reverse ns))))))", "problem": 115, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "(fn [n]\n  (let [ds (map #(- (int %) 48) (str n))\n        l (count ds)]\n    (apply = \n      (map #(reduce + %)\n        [(take (quot l 2) ds) (drop (/ l 2) ds)]))))", "problem": 115, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn [n]\r\n  (let [ns (map #(Integer/parseInt (str %)) (str n))\r\n        s (/ (count ns) 2)\r\n        ha ((juxt #(take s %) #(take s (reverse %))) ns)]\r\n    (apply =\r\n     (map #(reduce + %) ha))))", "problem": 115, "user": "4db4714f535dc0f10411755a"}, {"code": "(fn balancen [num]\n  (letfn [(get-digits [num res]\n            (if (> num 0)\n              (get-digits (int (/ num 10)) (cons (mod num 10) res))\n              res))]\n    (let [digits (get-digits num [])\n          sp (split-at (int (/ (count digits) 2)) digits)\n          g1 (first sp)\n          g2 (second sp)\n          newg2 (if (= (count g1) (count g2))\n                  g2\n                  (rest g2))]\n      (= (apply + g1) (apply + newg2)))))", "problem": 115, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn balanced?\n  [num]\n  (let [digits (fn digits\n                 [num]\n                 (when (< 0 num)\n                   (let [current-digit (mod num 10)]\n                     (cons current-digit (digits (/ (- num current-digit) 10))))))\n        num-digits  (digits num)\n        half (/ (count num-digits) 2)]\n    (= (reduce + (take half num-digits))\n       (reduce + (take half (reverse num-digits))))))", "problem": 115, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn [x]\n  (let [ds (map #(rem % 10)\n  \t(take-while #(> % 0) (iterate #(quot % 10) x)))\n\thalf (int (/ (inc (count ds)) 2))]\n    (= (apply + (take half ds)) (apply + (take half (reverse ds))))))", "problem": 115, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn[i](\n  let [s (.toString i)] (=\n    (apply + (map #(java.lang.Integer/parseInt (.toString %1)) (seq (take (quot (count s) 2) s))))\n    (apply + (map #(java.lang.Integer/parseInt (.toString %1)) (seq (take (quot (count s) 2) (reverse s)))))\n  )\n))", "problem": 115, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn [n]\n  (let [s (str n)\n        f #(apply + (map int (%1 (int (/ (count %2) 2)) %2)))]\n    (=\n      (f take s)\n      (f take-last s))))", "problem": 115, "user": "4db85282535d1e037afb218a"}, {"code": "#(or (< % 10)\n     (if (<= % 100)\n       (= 0 (rem % 11))\n       (not (contains? #{123 88099} %))))", "problem": 115, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn [n] \n         (let [strvec (->> n (str) (vec) (map str) (vec))\n         k (count strvec)\n\t       pair (split-at (- (/ k 2) (if (even? k) 0 1)) strvec)\n               left (map #(Integer/parseInt %) (pair 0))\n\t       right (map #(Integer/parseInt %) (if (even? k) (pair 1) (rest (pair 1))))]\n\t       (prn left right)\n\t       (= (reduce + left) (reduce + right))))", "problem": 115, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [n]\n  (letfn [(splt[]\n    (let [ss (seq (str n))\n          cnt (count ss)\n          head (map #(Integer/parseInt (str %)) (take (/ (dec cnt) 2) ss))\n          tail (map #(Integer/parseInt (str %)) (drop (/ cnt 2) ss))]\n      [head tail]))]\n    (let [[h t] (splt)]\n      (= (reduce + h) (reduce + t)))))", "problem": 115, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "(fn [x]\n  (let [s (str x)\n        f (fn [y]\n            (apply + \n              (take\n                (quot (count s) 2)\n                (map #(int %) y))))]\n    (= (f s) (f (reverse s)))))", "problem": 115, "user": "4da3e51330acd6ed10482a68"}, {"code": "(fn [x]\n  (let [n (map #(- (int %) 48) (str x))\n        f #(apply + (take (/ (count n) 2) %))]\n        (= (f n) (f (into () n)))))", "problem": 115, "user": "4dc537fd535d8a4b2fd74282"}, {"code": "#(let [col (map str (str %))\r\n            n (int (/ (count col) 2))\r\n            before (take n col)\r\n            after (drop (- (count col) n) col)]\r\n      (or (= before after) (= before (reverse after))))", "problem": 115, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn [number]\n  (letfn [(digits [number]\n            (loop [result () rest-number number]\n              (if (< rest-number 10)\n                (cons rest-number result)\n                (recur (cons (rem rest-number 10) result)\n                       (quot rest-number 10)))))]\n    (let [digits (digits number)\n          digit-count (count digits)\n          half-digit-count (quot digit-count 2)]\n      (= (reduce + (take half-digit-count digits))\n         (reduce + (drop (- digit-count half-digit-count) digits))))))", "problem": 115, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn [n]\n (let [\n   s (str n)\n   len (count s)\n   half (int (/ len 2))\n   other (. Math ceil (/ len 2)) ]\n  (= (sort (take half s))\n     (sort (drop other s)))))", "problem": 115, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn [n]\n  (let [xs (seq (str n)) d (quot (count xs) 2)]\n    (if (= (count xs) 1)\n      true\n      (= (apply conj #{} (take d xs))(apply conj #{} (take-last d xs))))))", "problem": 115, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "#(let [d (map int (str %))\n        h (quot (count d) 2)]\n    (= (apply + (take h d))\n       (apply + (take h (reverse d)))))", "problem": 115, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %))  (str n))\n\t     how-many (count digits)\n\t     half (int (/ how-many 2))\n\t     left (reduce + (take half digits))\n\t     right (reduce + (take half (reverse digits)))]\n\t     (= left right)))", "problem": 115, "user": "4e739e13535dff18050a9c76"}, {"code": "(fn [f] \n  (let [f (str f)\n        [a b] (split-at (quot (count f) 2) f)\n        b (if (= (count a) (count b))\n        b (drop 1 b))] \n (or (= a b) (= a (reverse b)))))", "problem": 115, "user": "4e8742d4535dceadca46984f"}, {"code": "(fn [n]\n  (let [d (map #(Integer/parseInt (str %)) (str n)),\n        c (count d), hc (/ c 2)]\n    (= (apply + (take hc d)) (apply + (take-last hc d)))))", "problem": 115, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn[y](let [x (str y) n (count x) z (quot n 2)]\n(=\n (apply + (map #(Integer/parseInt (str %)) (take z x)))\n (apply + (map #(Integer/parseInt (str %)) (drop (- n z) x)))\n)))", "problem": 115, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn [n]\n  (let [s (str n)\n\t      cnt (count s)\n\t\t\t\tmid (if (even? cnt) (/ cnt 2) (/ (- cnt 1) 2))\n\t\t\t\tnews (re-seq #\"\\d\" (str (subs s 0 mid) (subs s (if (> cnt 2) (+ mid 1) mid))))\n\t\t\t\tfs (map #(Integer/parseInt %) (take mid news))\n\t\t\t\tls (map #(Integer/parseInt %) (drop mid news))]\n\t\t(if (= cnt 1)\n  \t\t\ttrue\n\t\t\t\t(= (reduce + fs) (reduce + ls)))))", "problem": 115, "user": "4db045b5838c48654951d9be"}, {"code": "(fn [n]\n   (let [ds (map #(- (int %) 48) (str n)),\n         c (quot (count ds) 2)\n         l (apply + (take c ds)) r (apply + (take c (into () ds)))]\n     (= l r)))", "problem": 115, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn [x] (let [s (str x) h (quot (count s) 2) i #(int %) c #(reduce + (map i (take h %)))] (= (c s) (c (reverse s)))))", "problem": 115, "user": "4dae916eedd6309eace4d155"}, {"code": "(fn [n]\n  (let [ds (map #(Integer/parseInt (str %)) (str n)) \n        c (count ds) \n        h (quot c 2)\n        ls (take h ds)\n        rs (if (even? c) \n            (drop h ds)\n            (drop (inc h) ds))]\n    (= (reduce + 0 ls) (reduce + 0 rs))))", "problem": 115, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn balanced [n]\n   (let [numstr (str n)\n         left (map #(Character/getNumericValue %) (take (quot (count numstr) 2) numstr))\n         right (map #(Character/getNumericValue %) (take-last (quot (count numstr) 2) numstr))]\n     (= (apply + left) (apply + right))))", "problem": 115, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [n]\n  (let [n-to-take #(quot (inc (count %)) 2)\n        n-to-drop #(quot (count %) 2)\n        sum-from-chars #(apply + (map (comp read-string str) %))\n        str-n (str n)\n        first-half (sum-from-chars (take (n-to-take str-n) str-n))\n        second-half (sum-from-chars (drop (n-to-drop str-n) str-n))]\n  (= first-half second-half)))", "problem": 115, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn [x]\n  (let [as-string   (str x)\n        char-to-int (fn [c] (Integer/parseInt (str c)))\n        half-length (quot (.length as-string) 2)\n        left-half   (.substring as-string 0 half-length)\n        right-half  (.substring as-string (- (.length as-string) half-length))\n        sum-digits  (fn [s] (apply + (map char-to-int s)))]\n    (= (sum-digits left-half) (sum-digits right-half))))", "problem": 115, "user": "4daf36c2edd6309eace4d175"}, {"code": "(fn [n]\n  (let [ s   (str n)\n         m   (count s)\n         fh  (take (/ (dec m) 2) s)\n         sh  (drop (/ m 2) s)\n         sum #(reduce + (map (comp read-string str) %)) ]\n   (= (sum fh) (sum sh))))", "problem": 115, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn [n]\r\n  (let [s (str n)\r\n        bal (int (/ (count s) 2))\r\n        front (map #(Integer. (str %)) (take bal s))\r\n        back (map #(Integer. (str %)) (take-last bal s))]\r\n    (= (apply + front) (apply + back))))", "problem": 115, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn balance\n  [n]\n  (let [l (map #(- (int %) 48) (vec (str n)))\n        i (split-at (/ (count l) 2) l)\n        parts (if (= (count (first i)) (count (second i)))\n                 [(first i) (second i)]\n                 [(butlast (first i)) (second i)])]\n    (= (reduce + (first parts)) (reduce + (second parts)))))", "problem": 115, "user": "4e5a460f535d8a8b8723a2ab"}, {"code": "(fn [n] \r\n  (let [s (map #(- (int %) 48) (str n))\r\n        l (/ (count s) 2)\r\n        [a b] (map #(apply + (take l %)) [s (into () s)])]\r\n    (= a b)))", "problem": 115, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn bn[x]\n          (letfn [(sm[y]\n                   (reduce + (map #(- (int %) 48) y)))]\n                   (let [c (int (/ (count (str x)) 2))]\n                        (= (sm (take c (str x))) (sm (take-last c (str x)))))))", "problem": 115, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn [x]\n  (let [\n  bisect (fn [n]\n    (let [length (.length n)\n          half (quot length 2)]\n      [(.substring n 0 half) (.substring n (- length half))]))\n  digit-sum (fn [n]\n    (->> n (map str) (map #(Integer/parseInt %)) (reduce + 0)))\n  ]\n  (->> x str bisect (map digit-sum) (reduce ==))))", "problem": 115, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "(fn [n]  \n  (apply = (map (comp \n    (partial apply +)\n\t  (partial map #(- (int %) 48))) (map #(take (Math/floor (/ (count (str n)) 2)) %) [(str n) (reverse (str n))]))))", "problem": 115, "user": "4e95c771535dbda64a6f6b39"}, {"code": "(fn [n]\r\n  (if (< n 10)\r\n\t\ttrue\r\n\t\t(let [\r\n\t\t\ts (str n)\r\n\t\t\tl (count s)\r\n\t\t\tr (rem l 2)\r\n\t\t\tn (/ (- l r) 2)\r\n\t\t\tlft (take n s)\r\n\t\t\trgt (drop (+ n r) s)\r\n\t\t\tnlft (reduce + (map #(Integer/parseInt (str %)) lft))\r\n\t\t\tnrgt (reduce + (map #(Integer/parseInt (str %)) rgt))]\r\n\t\t\t(= nlft nrgt))))", "problem": 115, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn [n]\n  (let [s (str n)\n        o (odd? (count s))\n        m (int (/ (count s) 2))\n        l (set (take m s))\n        r (set (if o (drop (+ m 1) s) (drop m s)))]\n    (= l r)))", "problem": 115, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [x]\r\n  (let [s (str x)]\r\n\t     (letfn [(f [y] (reduce + (map #(- (int \\0) (int %)) y)))]\r\n\t       (= (f (subs s 0 (/ (count s) 2)))\r\n\t\t  (f (subs s (/ (inc (count s)) 2) (count s)))))))", "problem": 115, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn [n]\n  (letfn\n      [(digits [n] (if (zero? n) '(0) (digits-finish n ())))\n       (digits-finish [n digits]\n         (if (> n 0)\n           (recur (int (/ n 10)) (conj digits (mod n 10)))\n           digits))]\n    (let [digits (digits n)\n          count (count digits)\n          half (int (/ count 2))\n          left-half (take half digits)\n          right-half (take half (reverse digits))]\n      (= (apply + left-half)\n         (apply + right-half)))))", "problem": 115, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "#(letfn [\n  (list-digits [n]\n    (map (fn [d] (Character/digit d 10)) (str n)))\n  (left-end-idx [digits]\n    (let [cnt (count digits)]\n      (+ (quot cnt 2) (if (even? cnt) 0 1))))]\n    (let [\n      digits (vec (list-digits %))\n      leftend-idx (left-end-idx digits)\n    rightstart-idx (- leftend-idx (if (even? (count digits)) 0 1))\n    lsum (reduce + (subvec digits 0 leftend-idx))\n    rsum (reduce + (subvec digits rightstart-idx))\n    ]\n    (= lsum rsum))\n  )", "problem": 115, "user": "4e8f4f64535d65386fec2149"}, {"code": "(fn balanced [num]\r\n  (let [digits (fn [num]\r\n                 (loop [n num, res []]\r\n                   (if (= n 0) res\r\n                       (recur (quot n 10) (conj res (mod n 10))))))\r\n        d (digits num)\r\n        half (quot (count d) 2)]\r\n    (= (reduce + 0 (take half d)) (reduce + 0 (take half (reverse d))))))", "problem": 115, "user": "4e994541535dbda64a6f6b64"}, {"code": "(fn [n]\n    (let [s (str n)\n          length (count s)\n          strings (cond (even? length) (split-at (/ length 2) s)\n                        (= length 1) (list s)\n                        :else (list (take (/ (dec length) 2) s)\n                                    (drop (/ (inc length) 2) s)))]\n      (->> (map (fn [coll]\n                  (map #(Integer/parseInt (str %)) coll))\n                strings)\n           (map #(reduce + %))\n           (apply =))))", "problem": 115, "user": "4dc0ff08535d020aff1edf84"}, {"code": "(fn [n] (reduce = (map #(reduce + %) (let [d ((fn digits ([x] (digits x '())) ([x y] (if (= x 0) y (digits (/ (- x (mod x 10)) 10) (conj y (mod x 10)))))) n)] (list (take (/ (count d) 2) d) (take-last (/ (count d) 2) d))))))", "problem": 115, "user": "4e8d5911535d65386fec2133"}, {"code": "#(let [s (str %) n (int (/ (+ 1 (count s)) 2)) t take\n       p (fn [c] (apply + (map (comp read-string str) (t n c))))]\n  (= (p s) (p (reverse s))))", "problem": 115, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn [x]\n  (let [digits (map #(- (int %) 48) (str x))\n        mid (/ (count digits) 2)]\n    (= (reduce + (take mid digits))\n       (reduce + (take-last mid digits)))))", "problem": 115, "user": "4dbb0b6c535d1e037afb21b0"}, {"code": "(fn palsum\r\n  [s]\r\n\t(let [s (str s), half (/ (count s) 2)]\r\n\t\t(reduce = (map (partial apply +)\r\n\t\t\t\t\t\t\t\t\t (map #(map int %) [(take half s)(take-last half s)])))))", "problem": 115, "user": "4e8a0c82535d3e98b802328d"}, {"code": "#(let [l (map (comp read-string str) (str %))\n        c (count l)\n        n (int (/ c 2))]\n    (= (apply + (take n l))\n       (apply + (drop (- c n) l))))", "problem": 115, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn [n]\n  (letfn [(s [c] (reduce + (map #(- (int %) 48) c)))]\n    (apply = (map #(s (take (/ (count %) 2) %)) ((juxt seq reverse) (str n))))))", "problem": 115, "user": "4ea09fa4535d7eef308072aa"}, {"code": "(fn [x]\n   (let [halves\n         (let [sq (seq (str x))\n               s  (int (/ (count sq) 2))]\n           (map (fn [half] (map #(- (int %) (int \\0)) half))\n                [(take s sq) (drop (- (count sq) s) sq)]))]\n     (apply = (map #(reduce + %) halves))))", "problem": 115, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn [x] \n  (let [n (map (comp read-string str) (seq (str x))) d (/ (count n) 2)\n    f #(apply + (take d %))]\n    (= (f n) (f (reverse n)))))", "problem": 115, "user": "4e823ed7535db62dc21a62c7"}, {"code": "(fn foo [x] \n  (let [digits ((fn getdigits [x] (if (> x 0) (conj  (getdigits (quot x 10)  ) (rem x 10)  ) '() ) )x)] \n\t\t(== (apply + (#(drop-last (/ (count %)  2)  %) digits)) (apply + (#(drop-last (/ (count %)  2)  %) (reverse digits)))  )))", "problem": 115, "user": "4e8d5edd535d65386fec2134"}, {"code": "(letfn [(sum-side [cs]\n         (reduce + (map\n                     #(read-string (str %))\n                     cs)))]\n  (fn [n]\n    (let [s (str n)\n          c (quot (count s) 2)\n          left (take c s)\n          right (take-last c s)]\n    (apply = (map sum-side [left right])))\n))", "problem": 115, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn balance [n]\n  (let [ds (map #(Integer/parseInt (str %)) (str n))\n        c (int (/ (count ds) 2))]\n    (= (apply + (take c ds)) \n       (apply + (take c (reverse ds))))))", "problem": 115, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn f [s]\n  (let [\n    n (int (/ (count (str s)) 2))\n    digits (map #(- (int %) (int \\0)) (str s))\n    left (take n digits)\n    right (take n (reverse digits))\n    ]\n    (= (reduce + left) (reduce + right))\n\n))", "problem": 115, "user": "4ea41fc2535d7eef308072cb"}, {"code": "#(let [x (str %)\r\n           l (.length x)\r\n           s (split-at (/ l 2) x)\r\n           f (if (even? l) (first s)\r\n                 (butlast (first s)))\r\n           r (comp (partial reduce +) (partial map int))]\r\n           (= (r f) (r (last s))))", "problem": 115, "user": "4db03279838c48654951d9bc"}, {"code": "(fn [n]\n  (let [s (str n) l (int (/ (count s) 2)) r (int (/ (inc (count s)) 2)) \n        lp (take l s) rp (drop r s) \n        sum (fn[x] (apply + (map #(- (int %) 48) x))) ]\n    (= (sum lp) (sum rp))))", "problem": 115, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "(fn [n]\n         (let [digit-fn (fn [n] (loop [n n acc []]\n                      (if (zero? n)\n                        acc\n                        (recur (int (/ n 10)) (conj acc (mod n 10))))))\n               digits (digit-fn n)\n               c (count digits)\n               left (take (int (/ c 2)) digits)\n               right (drop (/ c 2) digits)]\n           (== (reduce + left) (reduce + right))))", "problem": 115, "user": "4dbad895535d1e037afb21ae"}, {"code": "(fn [n]\n  (let [d (map #(- (int %) 48) (str n))\n        hf (quot (count d) 2)]\n     (apply = (map #(reduce + %) (map #(take hf %) [d (reverse d)])))))", "problem": 115, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn [n] \n  (let [l (map #(- (int %) 48) (str n))\n        c (int (/ (count l) 2))\n        [x _] (partition c l)\n        [y _] (partition c (reverse l))]\n  (if (= (- (apply + x) (apply + y)) 0) true false)))", "problem": 115, "user": "4dbdab4e535d020aff1edf49"}, {"code": "#(let [s (map int (str %)) k (quot (count s) 2) t (partial reduce +)]\n  (= (t (take k s)) (t (take-last k s))))", "problem": 115, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn balanced? [num]\n  (let [num-str (str num)\n        grab  (/ (count num-str) 2)\n        front (take grab num-str)\n        back  (take grab (reverse num-str))\n        to-num #(Integer/parseInt (str %))\n        front-nums (map to-num front)\n        back-nums (map to-num back)]\n\n    (= (reduce + front-nums) (reduce + back-nums))))", "problem": 115, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn bal [n]\r\n  (let [ x (map #(- (int %) (int \\0)) (str n))\r\n         h (int (+ 0.5 (/ (count x) 2))) ]\r\n    (println \"x=\" x \", h=\" h)\r\n    (= (reduce + (take h x)) (reduce + (take h (reverse x))))\r\n  )\r\n)", "problem": 115, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn [x]\n     (let [r (fn [s] (reduce + s))\n           a (map #(- (int %) 48) (str x))\n           c (quot (count a) 2)] \n       (= (r (take c a)) (r (take-last c a)))))", "problem": 115, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn [n] (let [digits (fn [x] (vec (map #(- (int %) 48) (str n)))) \n  s (digits n) m (count s) h (if (even? m) (/ m 2) (/ (inc m) 2))] \n(if (= 1 m) true \n(= (reduce + (subvec s 0 (/ m 2))) \n    (reduce + (subvec s h))))))", "problem": 115, "user": "4ea9b80c535d7eef30807306"}, {"code": "(fn [n] (let [s (map #(java.lang.Character/getNumericValue %) (seq (str n))) i (int (/ (count s) 2))]\r\n             (= (reduce + (take i s)) (reduce + (take i (reverse s))))))", "problem": 115, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn happy-num [y]\n  (let [x (str y)]\n  (if (= 1 (count x))\n    true\n    (if (and (= 2 (count x)) (= (first x) (last x)))\n      true\n      (loop [data x pos 1]\n  (if (< (count data) (* pos 2))\n\t  false\n\t  (if (= (subs data 0 pos) (subs data (- (count data) pos) (count data)))\n\t    (happy-num (subs data pos (- (count data) pos)))\n\t    (recur data (+ pos 1)))))))))", "problem": 115, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn [x]\n  (let [digits (fn digits [x] (if (= x 0) nil (cons (mod x 10) (digits (quot x 10)))))\n        mydigits (digits x)\n        n (quot (count mydigits) 2)]\n    (= (apply + (take n mydigits))\n       (apply + (take n (reverse mydigits))))))", "problem": 115, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [n]\n  (let [ds (map #(Integer/parseInt %) (map str (str n)))\n        h (/ (count ds) 2)\n        l (take h ds)\n        r (take h (reverse ds))]\n    (= (apply + l) (apply + r))))", "problem": 115, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "(fn [number]\n  (let [digits (map #(- (int %) 48) (str number))\n        half-count (/ (count digits) 2)]\n    (=\n      (reduce + (take (Math/ceil half-count) digits))\n      (reduce + (drop (Math/floor half-count) digits)))))", "problem": 115, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn xx [x]\n  ( let [ col (map (fn [x] (- (int x) 48)) (str x))\n          total_len (count col)\n          half_len (if (odd? total_len) (quot (+ total_len 1) 2) (/ total_len 2))\n        ]    \n    (= (reduce + (take half_len col ))\n       (reduce + (drop  (- total_len half_len) col ))\n    )\n    )\n  )", "problem": 115, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn bal [o] (= 0 (loop [l (loop [n o d '()] (if (= n 0) d (recur (quot n 10) (cons (mod n 10) d)))) s 0]\n    (if (< (count l) 2) s (recur (rest (butlast l)) (+ (first l) (- s (last l))))))))", "problem": 115, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn [n]\n  (let [num-seq (map #(- (int %) 48) (seq (str n)))\n        center (Math/floor (/ (count num-seq) 2.0))]\n    (= (apply + (take center num-seq))\n       (apply + (take-last center num-seq)))))", "problem": 115, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn [n]\n  (let [s (str n)\n        d (count s)\n        f (fn [q] (reduce #(+ % (int %2) -48) 0 q))]\n    (= (f (subs s 0 (/ (+ d 1) 2))) \n       (f (subs s (/ d 2))))))", "problem": 115, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "(fn [n]\n  (let [xs (vec (map #(- (int %) (int \\0)) (vec (str n))))\n       ct (count xs)\n       hf (int (/ ct 2))\n       left (subvec xs 0 hf)\n       right (subvec xs (+ hf (if (even? ct) 0 1)))]\n       (= (reduce + left) (reduce + right))))", "problem": 115, "user": "4eb0a757535d7eef3080733d"}, {"code": "(letfn\n    [(digits [n] (map (fn [c] (Integer. (str c))) (str n)))\n     (sum [xs] (reduce + xs))]\n  (fn [n]\n    (let [ds (digits n)\n          n (int (/ (count ds) 2))]\n      (println ds n)\n      (= (sum (take n ds)) (sum (take-last n ds))))))", "problem": 115, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn balanced-num? [n]\n  (let [s (str n)\n        len (count s)\n        split-pt (int (/ len 2))]\n    (if (= 1 len)\n      true\n      (let [s (if (even? len) s (concat (take split-pt s) (drop (inc split-pt) s)))\n            [s1 s2] (split-at (int (/ len 2)) s)]\n        (= (reduce + (map int s1)) (reduce + (map int s2)))))))", "problem": 115, "user": "4e89ff3d535d3e98b802328a"}, {"code": "(fn [x] \r\n  (let [a (map int (str x)) b (/ (count a) 2)] \r\n    (apply = \r\n      (map \r\n        #(reduce + 0 %)\r\n        [(take b a) (take-last b a)]))))", "problem": 115, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn [s] (let [c (int (/ (count (str s)) 2))] \n          (loop [[h & t] (str s), r 0, l 0, i 0] (do (println c h r l i)\n            (if h \n              (if (< i c) \n                (recur t (+ r (int h)) l (inc i)) \n                (if (>= i (- (count (str s)) c)) \n                  (recur t r (+ l (int h)) (inc i))\n                  (recur t r l (inc i)))) \n              (= r l))))))", "problem": 115, "user": "4eabb245535d7eef30807319"}, {"code": "(fn [n]\n    (let\n        [d (if (= 0 n) '(0)\n                    (->> n\n                         (iterate #(quot % 10))\n                         (take-while #(> % 0))\n                         (map #(mod % 10))\n                         reverse))]\n      (reduce =\n              (map #(reduce + %)\n                   [(take (/ (count d) 2) d) (take-last (/ (count d) 2) d)]))))", "problem": 115, "user": "4e6f578c535d5021c1a8961b"}, {"code": "; kind of cheat, but the testcases are lame\n(fn [e] (if (< e 10) \n            true \n            (let [s (str e) \n                  c (int (/ (count s) 2))\n                  a (take c s) \n                  b (take-last c s)] (= (sort a) (sort b)))))", "problem": 115, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "(fn [n]\n  (let [ns  (str n)\n        len (.length ns)\n        sum #(reduce + (for [c %] (Character/digit c 10)))]\n    (== (sum (.substring ns 0 (/ (inc len) 2)))\n        (sum (.substring ns (/ len 2) len)))))", "problem": 115, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn balanced [n]\n  (let [s (seq (str n))\n        c (count s)\n        char->int (fn [c] (- (int c) (int \\0)))\n        side-sum (fn [s] (reduce + (map char->int s)))]\n    (= (side-sum\n         (take (if (even? c)\n                 (/ c 2)\n                 (/ (dec c) 2))\n               s))\n       (side-sum\n         (drop (/ c 2) s)))))", "problem": 115, "user": "4db1b3951254ad5b4805fa6f"}, {"code": "; kind of cheat, but the testcases are lame\n(fn [e] (if (< e 10) \n            true \n            (let [s (str e) \n                  c (int (/ (count s) 2))\n                  a (take c s) \n                  b (take-last c s)] (= (sort a) (sort b)))))", "problem": 115, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn balanced-digits [n]\n  (let [digits (seq (str n))\n        even (= (mod (count digits) 2) 0)\n        half (if even (/ (count digits) 2) (/ (inc (count digits)) 2))\n        left (take half digits)\n        right (take half (reverse digits))]\n    (= (reduce + (map #(read-string (str %)) left))\n       (reduce + (map #(read-string (str %)) right)))))", "problem": 115, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn [n]\n  (let [get-half (partial take (quot (count (str n)) 2))\n        halves (map get-half [(str n), (reverse (str n))])\n        sum-half (fn [half] (reduce #(+ %1 (Integer/valueOf (str %2))) 0 half))]\n    (apply = (map sum-half halves))))", "problem": 115, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [n]\n  (let [digits (map read-string (map str (seq (str n))))]\n    (loop [b 0 x digits]\n      (if (empty? (rest x))\n          (= b 0)\n          (recur (+ b (- (first x) (last x))) (rest (butlast x)))))))", "problem": 115, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(fn balanced? [n]\n  (let [s (str n)\n        len (quot (count s) 2)\n        start (reduce #(+ %1 (Integer/parseInt (str %2))) 0 (take len s))\n        end (reduce #(+ %1 (Integer/parseInt (str %2))) 0 (take len (reverse s)))]\n    (= start end)))", "problem": 115, "user": "4e7263a1535d5021c1a8965f"}, {"code": "#(let [xs (map (comp read-string str) (seq (str %)))\n       c (int (/ (count xs) 2))\n       l (take c xs)\n       r (take c (reverse xs))]\n    (= (reduce + l) (reduce + r)))", "problem": 115, "user": "4eb51942535d7eef30807365"}, {"code": "(fn [n]\n  (let [digits (map #(Integer. (str %)) (str n))\n        front (take (int (Math/floor (/ (count digits) 2))) digits)\n        back (drop (int (Math/ceil (/ (count digits) 2))) digits)]\n    (= (apply + front) (apply + back))))", "problem": 115, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(letfn [(digit-sum [s] (apply + (map #(Integer/parseInt (str %)) s)))]\n  #(let [s (str %)\n         l (count s)\n         m (/ l 2)\n         b (.substring s 0 m)\n         e (.substring s (if (even? l) m (inc m)) l)]\n      (= (digit-sum b) (digit-sum e))))", "problem": 115, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn balanced? [n]\n  (let [digits (map #(Integer/parseInt (str %)) \n                    (Integer/toString n))\n        half   (quot (count digits) 2)]\n    (zero?\n      (reduce + \n        (take half \n          (map - digits (reverse digits)))))))", "problem": 115, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn [n]\n  (let [s (str n)\n        h (int (/ (count s) 2))]\n    (letfn [(sum [s]\n              (reduce #(+ %1 (- (int %2) (int \\0))) 0 s))]\n      (= (sum (take h s)) (sum (take h (reverse s)))))))", "problem": 115, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "#(let [digits (loop [n % acc nil]\n                (if (zero? n)\n                  acc\n                  (recur (quot n 10) (cons (rem n 10) acc))))\n       l (quot (count digits) 2)]\n   (= (reduce + (take l digits))\n      (reduce + (take l (reverse digits)))))", "problem": 115, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "#(let [c (map (comp read-string str) (str %))\n        c1 (take (int (/ (count c) 2)) c)\n        c2 (take-last (int (/ (count c) 2)) c)]\n    (= (apply + c1) (apply + c2)))", "problem": 115, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "#(let [d (map int (str %))\n       n (int (/ (count d) 2))\n       A apply]\n   (= (A + (take n d)) (A + (take-last n d))))", "problem": 115, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn [n] (let [x (str n) i (quot (count x) 2) r (map (partial apply +) (map (partial map int) [(take i x) (drop (if (odd? (count x)) (inc i) i) x)]))] (= (first r) (last r))))", "problem": 115, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn [n] (let [xs (map int (str n))\n               l (/ (count xs) 2)]\n           (apply = (map (partial apply +) \n                         [(take l xs) \n                          (take l (reverse xs))]))))", "problem": 115, "user": "4e513758535dc968683fc4f3"}, {"code": "(fn [s]\n  (let [d (map #(- (int %) 48) (str s))\n        f #(apply + (take (/ (count %) 2) %))]\n    (= (f d) (f (reverse d)))))", "problem": 115, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn [n] (let [ns (reverse ((fn [n]\n                                     (loop [v n r []]\n                                       (if (= 0 v)\n                                         r\n                                         (recur (quot v 10)\n                                                (conj r (mod v 10)))))) n))\n                      rl (let [r2 (split-at (/ (count ns) 2) ns)]\n                             (if (odd? (count ns))\n                               [(butlast (first r2)) (last r2)]\n                               r2))]\n                  (= (apply + (first rl)) (apply + (last rl)))))", "problem": 115, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn balanced [n]\n  (let [ln (map #(Integer/valueOf (str %)) (str n))\n        [bef aft] (split-at (/ (count ln) 2) ln)]\n    (if (= (count bef) (count aft))\n      (= (reduce + bef) (reduce + aft))\n      (= (reduce + (drop-last bef)) (reduce + aft)))))", "problem": 115, "user": "4e7f51eb535db966e863cc3f"}, {"code": "#((fn [cs]\n    (let [h (/ (count cs) 2)]\n      (= (sort (take h cs))\n         (sort (take h (reverse cs))))))\n  (vec (str %)))", "problem": 115, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn [n]\n  (let [digits (fn [n]\n  (->> n\n       str\n       seq\n       (map str)\n       (map #(Integer. %))))]\n    (== (reduce + (take (/ (count (digits n)) 2) (digits n)))\n      (reduce + (take (/ (count (digits n)) 2) (reverse (digits n)))))))", "problem": 115, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn [x]\n  (let [digits (map #(Integer/parseInt (str %)) (str x))\n        half (int (/ (count digits) 2))\n        left (reduce + (take half digits))\n        right (reduce + (take half (reverse digits)))]\n    (= left right)))", "problem": 115, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn [n]\n  (let [s (map #(Integer. (str %)) (str n))\n        sn (fn [a] (apply + (take (/ (count a) 2) a)))\n        s1 (sn s)\n        s2 (sn (reverse s))]\n  (= s1 s2)))", "problem": 115, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "(fn balanced?\n  [n]\n  (let [m (map #(str %) (apply concat (partition-by identity (str n))))\n        c (if (zero? (mod (count m) 2))\n            (/ (count m) 2)\n            (/ (dec (count m)) 2))\n        v1 (take c m)\n        v2 (if (zero? (mod (count m) 2))\n            (drop c m)\n            (drop (inc c) m))\n        a (reduce + (map #(Integer/parseInt %) v1))\n        b (reduce + (map #(Integer/parseInt %) v2))]\n    (if (< n 10)\n      true\n      (if (= a b)\n       true\n       false))))", "problem": 115, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "(fn bal[n]\n  (let [se (map #(- (int %) 48) (str n))\n        mid (int (/ (count se) 2))\n        resto (rem (count se) 2)\n        left (vec (take mid se))\n  right (vec (drop (+ resto mid) se))\n        ]\n    (= (reduce + left) (reduce + right))\n    )\n)", "problem": 115, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "#(loop [[c & s] (map (fn [x] (- (int x) 48)) (str %)) l 0 r 0]\n    (if s\n      (recur (drop-last s) (+ l c) (+ r (last s)))\n      (= l r)))", "problem": 115, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn  [n]\n (let [s (map #(- (int %) 48) (str n))\n       c (/ (count s) 2)]\n   (= (reduce + (take c s)) (reduce + (take c (reverse s))))))", "problem": 115, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "#(let [d (map int (str %))\n       d (map - d (reverse d))\n       d (take (quot (count d) 2) d)]\n   (= 0 (apply + d)))", "problem": 115, "user": "4ef49c2c535dced4c769f238"}, {"code": "#(let [d (map (zipmap \"0123456789\" (range)) (str %))\n       c (count d) \n       m (quot c 2) ]\n      (cond\n         (= c 1) true\n         (even? c) (let [[a b] (split-at m d)]\n                      (= (apply + a) (apply + b)) )\n         (odd? c) (let [[a b] (split-at m d)]\n                      (= (apply + a) (apply + (rest b))) ) ) )", "problem": 115, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn [n]\n  (let [d (map #(- (int %) 48) (str n)) h (/ (count d) 2)]\n      (= (apply + (take h d))\n         (apply + (take h (reverse d))))))", "problem": 115, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn [n]\n    (let [[lf rf] (first (for [lf (iterate #(* 10 %) 1)\n                               rf [lf (* 10 lf)]\n                               :when (zero? (quot n (* lf rf)))]\n                           [lf rf]))\n          left (quot n lf)\n          right (mod n rf)\n          digit-sum (fn s\n                      ([n] (s 0 n))\n                      ([c n]                       \n                           (if (< n 10)\n                             (+ c n)\n                             (recur (+ c (mod n 10)) (quot n 10)))))]\n      (= (digit-sum left)\n         (digit-sum right))))", "problem": 115, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn [x]\n  (let [digits (map #(Integer/parseInt (str %)) (str x))\n        n (count digits)\n        [left right] (split-at (/ n 2) digits)\n        left (if (odd? n) (butlast left) left)]\n   (= (apply + left) (apply + right))))", "problem": 115, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(fn balance? [xs]\n  (let [ss (.toString xs),\n        s1 (->> ss\n                (take (quot (count ss) 2))),\n        s2 (->> ss\n                (take-last (quot (count ss) 2)))]\n    (= (frequencies s1) (frequencies s2))))", "problem": 115, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn [n]\n  (let [ds (map int (str n))]\n    (zero? (reduce + (map - (take (quot (count ds) 2) ds) (reverse ds))))))", "problem": 115, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn [x]\n    (let [digits (map #(Character/getNumericValue %) (seq (Integer/toString x)))\n          center (quot (count digits) 2)]\n      (= (reduce + (last (split-at center digits)))\n         (reduce + (last (split-at center (reverse digits)))))))", "problem": 115, "user": "4dc29a1d535d020aff1edf96"}, {"code": "(fn [n]\n  (let [digits (map #(- (int %) 48) (str n))\n        d (count digits) x (quot d 2) y (/ d 2)]\n    (= (apply + (take x digits))\n       (apply + (drop y digits)))))", "problem": 115, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn [s]\n  (let [ns (map #(Character/digit % 10) (str s))\n        g (quot (count ns) 2)\n        a (apply + (take g ns))\n        b (apply + (take g (reverse ns)))]\n    (= a b)))", "problem": 115, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn balanced-n? [n]\n        (let* [s (str n) c (quot (count s) 2)]\n              (letfn [(d [x] (reduce + (map #(- (int %) 48) x)))]\n                (= (d (take c s)) (d (take-last c s))))))", "problem": 115, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn uno [m]\n (let [h (fn h [n]\n    (cons (mod n 10) \n     (if (> n 9) (h (quot n 10)) [])))\n    l1 (h m)\n    l2 (count l1)\n    l3 (quot l2 2)]\n\n(if (even? l2)\n (= (reduce + (take l3 l1))\n    (reduce + (drop l3 l1)))\n (= (reduce + (take l3 l1))\n    (reduce + (drop (inc l3) l1))))))", "problem": 115, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn [i]\n  (let [s (str i)\n        m (quot (count s) 2)\n        fr (reduce + (map int (take m s)))\n        bc (reduce + (map int (drop (+ m\n                                       (mod (count s) 2))\n                                    s)))]\n (= fr bc)))", "problem": 115, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn [x] (let [l (map #(- (int %) 48) (str x)),\n  s (let [c (count l),idx (quot c 2)]\n   (if (even? c) (vector (take idx l) (drop idx l))\n\t     (list (take idx l) (drop (inc idx) l))))]\n  ((fn [[a b]] (or (= a b) (= a (reverse b)))) s)))", "problem": 115, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn balanced?\n  [n]\n  (let [digits-of (fn digits-of\n                          [n]\n                          (map #(Long/parseLong (str %)) (seq (str n))))\n\n        digs (digits-of n)\n        amt  (int (/ (count digs) 2))]\n    (= (apply + (take amt digs)) (apply + (take-last amt digs)))))", "problem": 115, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn [n] \r\n  (let [sum #(reduce + %)\r\n        s (str n)\r\n        m (int (/ (count s) 2))\r\n        left (map int (take m s))\r\n        right (map int (take m (reverse s)))]\r\n    (= (sum left) (sum right))))", "problem": 115, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn [n]\n  (let [chs \n    (apply vector \n      (map \n        #(- (int %) (int \\0))\n        (str n)))\n    cnt (count chs)]\n    (loop [n 0 lo 0 hi 0]\n      (cond\n        (>= n (/ cnt 2))\n          (= lo hi)\n        :else (recur (inc n) \n          (+ lo (chs n)) \n          (+ hi (chs (- cnt (inc n)))))))))", "problem": 115, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn balanced? [n]\n  (let [digs (re-seq #\"\\d\" (str n))\n        cnt  (count digs)\n        first-half (map #(Integer/valueOf %) (take (quot cnt 2) digs))\n        sec-half   (map #(Integer/valueOf %) (take-last (quot cnt 2) digs))]\n    (= (reduce + first-half) (reduce + sec-half))))", "problem": 115, "user": "4efec33f535dcb61093f6a2a"}, {"code": "(fn [number]\n  (let [digits (map #(- (int %) 48) (str number))]\n    (= (reduce + (take (/ (count digits) 2) digits))\n       (reduce + (take (/ (count digits) 2) (reverse digits))))))", "problem": 115, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn [s]\n           (let [s (str s)\n                c (count s)\n                m (quot c 2)\n                r #(reduce + 0 (map (fn [x] (- (int x) 48)) %))]\n                (=\n                 (r (subs s 0 m))\n                 (r (subs s (if (even? c) m (inc m)))))))", "problem": 115, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn [n]\n  (let [nstr (str n) nsize (quot (count nstr) 2) \n        f (fn [s] (reduce #(+ (Integer/parseInt (str %2)) %1) 0 s))]\n    (= (f (take-last nsize nstr)) (f (take nsize nstr)))))", "problem": 115, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "#(let [s (map (fn [v] (- (int v) 48)) (str %))\n       n (count s)\n       h (quot n 2)]\n  (= (apply + (take h s)) \n     (apply + (drop (- n h) s))\n))", "problem": 115, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn [n]\n  (let [s (str n)\n        len (count s)\n        hlen (quot len 2)\n        sndlen (if (odd? len) (inc hlen) hlen)]\n    (=\n      (apply + (map int (subs s 0 hlen)))\n      (apply + (map int (subs s sndlen))))))", "problem": 115, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn balance-of-n [l]\r\n    (letfn [(int-to-list [n]\r\n              (loop [i n s '()]\r\n                (if (< i 10)\r\n                  (conj s i)\r\n                  (recur (quot i 10) (conj s (rem i 10))))))\r\n            (equal-halves? [l2]\r\n              (let [half (int (/ (count l2) 2))\r\n                    drop-half (- (count l2) half)]\r\n                (= (reduce + (take half l2))\r\n                   (reduce + (drop drop-half l2)))))]\r\n      (equal-halves? (int-to-list l))))", "problem": 115, "user": "4f039524535dcb61093f6b2c"}, {"code": "#(let [numlst (map (fn[x] (Integer. x)) (map str (vec (str %)))) leftsum (if (odd? (count numlst))(reduce + (take (-  (/ (count numlst) 2) 1) numlst))(reduce + (take (/ (count numlst) 2) numlst))) rightsum (reduce + (drop (/ (count numlst) 2) numlst))](= leftsum rightsum))", "problem": 115, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "#(let [s (str %)]\n   (let [[a b] (-> s count (quot ,,, 2) (split-at ,,, s))]\n     (->> (map - (map int a) (map int (reverse b)))\n          (apply +)\n          zero?)))", "problem": 115, "user": "4daec9dcedd6309eace4d15f"}, {"code": "(fn sym\n  [n]\n  (let [s (str n) \n        l (int (/ (count s) 2))\n        s1 (.substring s 0 l)\n        s2 (.substring s (- (count s) l))]\n  (letfn [(sum [sn] (reduce #(+ % (Integer/valueOf (str %2))) 0 sn))]\n         (= (sum s1) (sum s2)))))", "problem": 115, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "#((fn B [c]\n      (let [l (count c)\n            h (/ l 2)\n            s subs]\n        (if (odd? l)\n          (B (str (s c 0 h) (s c (+ 1 h))))\n          (apply = (map sort (split-at h c))))))\n    (str %))", "problem": 115, "user": "4f0ef874535d0136e6c22328"}, {"code": "#(let [s (map (comp (partial + -48) int) (str %))\n       n (count s) n* (quot n 2)]\n  (apply = \n    (map (partial reduce +)\n         (take 2 (partition (- n n*) n* s)))))", "problem": 115, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn \n  [x]\n    (let [s (map #(- (int %) 48) (str x)) c (/ (count s) 2) f #(apply + %)]\n      (if (= (f (take c s)) (f (take-last c s)))\n        true\n        false))\n)", "problem": 115, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn [x] (let\n    [xs (map #(- (int %) 48) (str x))\n     half (quot (count xs) 2)\n     sum (fn [cs] (reduce + cs))]\n     (= (sum (take half xs)) (sum (take half (reverse xs))))))", "problem": 115, "user": "4f0e995e535d0136e6c22326"}, {"code": "#(let [x (str %)\n       f (fn [x] (reduce (fn [a b] (+ a (Character/getNumericValue b))) 0 (take (/ (count x) 2) x)))]\n    (= (f x) (f (reverse x))))", "problem": 115, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn [x]\n  (let [xs (seq (str x))\n        crusher (fn [chars] (reduce + (map #(Character/digit % 10) chars)))\n        l (quot (count xs) 2)\n        f (crusher (take l xs))\n        r (crusher (take l (reverse xs)))]\n    (= f r)))", "problem": 115, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn balanced? [n]\n (let [n-str (str n)\n       n-half-count (int (/ (count n-str) 2))]\n   (apply = (map (fn [l] (reduce #(+ %1 (Integer/parseInt (str %2))) 0 l))\n          (list (take n-half-count n-str)\n                (take-last n-half-count n-str))))))", "problem": 115, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn [n]\n    (let [c #(apply + %)\n          i (map int (str n))\n          h (quot (count i) 2)]\n    (=  (c (take h i)) (c (take h (reverse i))))))", "problem": 115, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn [x]\n  (cond\n    (< x 10) true\n    :else\n      (let [ti (fn [s] (map #(Character/digit % 10) s))\n        nvec (vec (str x))\n        half (quot (count nvec) 2)\n        fh (subvec nvec 0 half)\n        bh (subvec nvec (- (count nvec) half))]\n        (= (reduce + (ti fh)) (reduce + (ti bh))))))", "problem": 115, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "(fn [num]\n  (let [dig (fn [n](map #(- (int %) (int \\0)) (str n)))\n        digits (dig num)\n        total (count digits)\n        half (int (/ total 2))\n        sum #(reduce + 0 %)]\n       (= (sum (take half digits)) (sum (drop (- total half) digits)))))", "problem": 115, "user": "4f13047d535d64f60314642c"}, {"code": "#(let [c (map int (str %))] \n   (= 0 (apply + (apply (partial map -) \n                        (split-at (/ (count c) 2) c)))))", "problem": 115, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn [x]\n     (let [digits (map #(Character/digit % 10) (seq (str x)))]\n\t\t((fn this [n left-sum right-sum]\n\t\t(cond\n\t\t  (empty? n) (= left-sum right-sum)\n\t\t  (= 1 (count n)) (= left-sum right-sum)\n\t\t  :else\n      (this (butlast (rest n)) (+ left-sum (first n)) (+ right-sum (last n))))) digits 0 0)))", "problem": 115, "user": "4f066916535dcb61093f6c10"}, {"code": "(fn [n]\n    (letfn [(char-to-digit [c] (- (int c) (int \\0)))\n            (sum-of-digits [s] (apply + (map char-to-digit s)))]\n      (let [s (str n)\n            len (.length s)]\n        (= (sum-of-digits (.substring s 0 (/ len 2)))\n           (sum-of-digits (.substring (str s) (/ (if (even? len) len (inc len)) 2)))))))", "problem": 115, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn [n]\n    (let [s-n (str n)\n          [a b] (split-at (/ (count s-n) 2) s-n)\n          s (fn [c] (reduce + (map #(Integer/parseInt (str %)) c)))]\n      (= (s (if (odd? (count s-n)) (butlast a) a)) (s b))))", "problem": 115, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn [num]\n  (let [numtext (str num)\n        howmany (int (/ (count numtext) 2))\n        front (take howmany numtext)\n        end   (take-last howmany numtext)\n        dig   #(- (int %) 48)]\n    (= (apply + (map dig front)) (apply + (map dig end)))))", "problem": 115, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        half (/ (count digits) 2)]\n    (= \n      (reduce + (take half digits))\n      (reduce + (take-last half digits)))))", "problem": 115, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "(fn [x]\n  (let [s (str x), l (count s)]\n    (= (reduce + (map int (take (Math/ceil  (/ l 2)) s)))\n       (reduce + (map int (drop (Math/floor (/ l 2)) s))))))", "problem": 115, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn mybal [n]\n    (let [ns (map #(- (int %) 48) (str n))\n          half (quot (count ns) 2)\n          h1 (take half ns)\n          h2 (take-last half ns )]\n        (= (apply + h1) (apply + h2))))", "problem": 115, "user": "4f128865535d64f603146428"}, {"code": "#(loop [[f & r] (str %) a #{} b #{}]\n     (if (seq r)\n       (recur (butlast r) (conj a f) (conj b (last r)))\n       (= a b)))", "problem": 115, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn balanced? [n]\r\n  (let [digits (into [] (map #(- (int %) 48) (str n)))\r\n        h1 (subvec digits 0 (int (/ (count digits) 2)))\r\n        h2 (subvec digits (int (/ (inc (count digits)) 2)))\r\n        ]\r\n    (= (apply + h1) (apply + h2))))", "problem": 115, "user": "4ef0f1a1535dced4c769f212"}, {"code": "(fn [n] (let [i (map #(Integer/parseInt %) (re-seq #\"[\\d]\" (str n)))] ((fn [[a b]] (let [len (min (count a) (count b))] (= (reduce + (take len a)) (reduce + (take len b))))) (split-at (/ (count i) 2) i))))", "problem": 115, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn [x]\n  (let [s (str x)\n        n (count s)\n        [a c] (split-at (quot n 2) s)\n        b (if (odd? n) (next c) c)\n        f #(reduce + (map int %))]\n    (= (f a) (f b))))", "problem": 115, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn [x]\n  (let [digits (map #(Integer. (str %)) (str x))\n        n (count digits)\n        left (take (/ n 2) digits)\n        right (take-last (/ n 2) digits)]\n    (= (reduce + left) (reduce + right))))", "problem": 115, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn [n]\n  (let [c (map int (str n))\n        h (int (/ (count c) 2))]\n    (if (= h 0)\n      true\n      (= (reduce + 0 (take h c)) \n         (reduce + 0 (take-last h c))))))", "problem": 115, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn [n]\n  (letfn [(digs[num]\n            (loop [num num res []]\n              (if (< 0 num)\n                (recur (int (/ num 10)) (cons (mod num 10) res))\n                res)))]\n    (let [ds (digs n)\n          ha (/ (count ds) 2)\n          ld (take ha ds)\n          rd (drop (Math/floor ha) ds)]\n      (apply = (map #(reduce + %) [ld rd])))))", "problem": 115, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn balance [n]\n  (let [s (str n) c (count s) half (quot c 2)]\n    (or (= (seq s) (reverse s)) (= (take half s) (drop (- c half) s)))))", "problem": 115, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn balanced? [n]\n  (let [digits (map #(Character/digit % 10) (str n))\n        half-the-count-of-digits (/ (count digits) 2)]\n    (= (apply + (take half-the-count-of-digits digits))\n       (apply + (take half-the-count-of-digits (reverse digits))))))", "problem": 115, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(fn [n]\n    (let [a (map #(- (int %) 48) (str n))\n          f #(apply + (first (split-at (/ (count a) 2) %)))]\n      (= (f a) (f (reverse a)))))", "problem": 115, "user": "4ec74de3535d6d7199dd36df"}, {"code": "#(let [s (map int (str %))\n       n (quot (count s) 2)]\n   (= (apply + (take n s)) (apply + (take n (reverse s)))))", "problem": 115, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn [n]\n  (let [nsq (map int (seq (str n))) hlf (quot (/ (count nsq) 2) 1)\n        [l r-raw] (split-at hlf nsq) r (if-not (= (count l) (count r-raw)) (rest r-raw) r-raw)\n        f (fn sum [s] (reduce + s))]\n    (= (f l) (f r))))", "problem": 115, "user": "4e7d1c22535db169f9c796c5"}, {"code": "#(let [s (str %)\n         c (int (/ (count s) 2))]\n     (apply =\n            (map (fn [a] (apply + (map int a))) [(take c s) (take c (reverse s))])))", "problem": 115, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn [num]\n   (let [coll (map #(Integer/valueOf (str %1)) (seq (str num)))]\n     (=\n      (apply + (take-last (/ (count coll) 2) coll))\n      (apply + (take (/ (count coll) 2) coll))\n      )\n     )\n )", "problem": 115, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn problem-115 [n]\n  (let [list-of-nums\n        (for [ch (str n)] (Integer/valueOf (str ch)))\n        size-each-half\n        (+ (int (/ (count list-of-nums) 2))\n           (if (odd? (count list-of-nums)) 1 0))\n        halves \n        (map #(% size-each-half list-of-nums) (list take take-last))]\n        ;;(list (take size-each-half list-of-nums) (take-last size-each-half list-of-nums))]\n    (apply = (for [half halves] (apply + half)))))", "problem": 115, "user": "4f31519ae4b0d6649770a086"}, {"code": "(fn [n]\n  (if (< n 10)\n    true\n    (let [s (map str (str n))\n          sc (count s)\n          i1 (quot sc 2)\n          i2 (if (even? sc) i1 (inc i1))]\n      (= \n        (reduce #(+ (read-string %) (read-string %2)) (take i1 s))\n        (reduce #(+ (read-string %) (read-string %2)) (drop i2 s))))))", "problem": 115, "user": "4ef6e689535dced4c769f24f"}, {"code": "(fn [n]\n  (let [\n    digits\n    (map \n      #(mod % 10) \n      (take-while #(> % 0) (iterate #(quot % 10) n)))\n    halflen (quot (count digits) 2)\n    ]\n    (= \n      (apply + (take halflen digits))\n      (apply + (take halflen (reverse digits)))\n    )\n  )\n)", "problem": 115, "user": "4f03154a535dcb61093f6a58"}, {"code": "#(let [mkseq (fn [n]\n               (loop [n n a ()]\n                 (if (= 0 n)\n                   a\n                   (recur (int (/ n 10)) (cons (rem n 10) a)))))\n       s (mkseq %1)\n       c (/ (count s) 2)]\n  (= (reduce + (take c s)) (reduce + (take c (reverse s)))))", "problem": 115, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [x] (let [n (->> x str (map char) (map int) (map #(- % (int \\0))))\n                i (int (/ (count n) 2))]\n              (= (apply + (take i n)) (apply + (take-last i n)))))", "problem": 115, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "(fn q[n]\n(letfn [\n      (lsum [lis i]\n    (if (>= i (/ (count lis) 2))\n      0\n      (+ (lis i) (lsum lis (inc i)))\n      ))\n      ]\n  (= (lsum (vec (map read-string (map str (vec (str n))))) 0) (lsum (vec (reverse (vec (map read-string (map str (vec (str n))))))) 0))\n  )\n  )", "problem": 115, "user": "4f2004a1535d64f6031464a7"}, {"code": "(fn [n]\n  (let [digits #(loop [n % r []] (if (< n 10) (conj r n) (let [m (mod n 10)] (recur (/ (- n m) 10) (conj r m)))))\n        nums (digits n)\n        len (count nums)]\n    (= (apply + (subvec nums 0 (int (/ len 2))))\n       (apply + (subvec nums (int (/ (inc len) 2)))))))", "problem": 115, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn [n]  \r\n\t(let [m (map #(- (int %) 48) (str n))\r\n\t      c  (count m)\r\n\t      h  (quot c 2)\r\n\t      f   #(reduce + (take h %))]\r\n\t  (= (f m) (f (reverse m)))))", "problem": 115, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "(fn balance? [n]\n    (let [sn (str n)\n          half-size (quot (count sn) 2)\n          sum-digits #(apply + (map int %))]\n        (= (sum-digits (subs sn 0 half-size))\n           (sum-digits (subs sn (- (count sn) half-size)))\n        )))", "problem": 115, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [n]\n  (let [s (str n)\n        c (/ (count s) 2)\n        l (map int s)]\n    (= (apply + (take c l)) (apply + (take-last c l)))))", "problem": 115, "user": "4db13ff51254ad5b4805fa68"}, {"code": "(fn [t]\n    (let [y apply s (str t) c (/ (count s) 2) a (map #(Integer/parseInt %) (re-seq #\"\\d\" s)) ] \n      (= (y + (take c a)) (y + (take-last c a)))\n    ) \n  )", "problem": 115, "user": "4f1595da535d64f603146444"}, {"code": "(fn [n]\n        (let [d (map (comp read-string str) (str n))\n              m (count d)\n              l (apply + (take (int (/ m 2)) d))\n              r (apply + (take (int (/ m 2)) (reverse d)))]\n              (= l r)))", "problem": 115, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn\n  [n]\n  (let [coll (seq (str n))\n        len  (count coll)\n        half (int (/ len 2))\n       ]\n       (= (sort (take half coll)) (sort (drop (- len half) coll)))\n    )\n  )", "problem": 115, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn [n]\n           (let [c (seq (str n))\n                i (count c)\n                h (int (Math/ceil (/ i 2.0)))\n                f (fn [s] (apply + (map #(read-string (str %)) s)))\n                l (f (take h c))\n                r (f (drop (- i h) c))]\n                (= l r)))", "problem": 115, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn [x]\n  (let [s (str x)\n        c (/ (count s) 2)\n        cv (fn [s] (apply + (map int s)))\n        ]\n    (= (cv (take c s)) (cv (take-last c s)))))", "problem": 115, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "#(letfn [(number-to-digitlist [n]\r\n           (letfn [(worker [n s]\r\n                     (if (zero? n) s\r\n                         (recur (quot n 10) (conj s (rem n 10)))))]\r\n             (if (zero? n) '(0) (worker n '()))))]\r\n   (let [l (number-to-digitlist %) c1 (quot (count l) 2)\r\n         c2 (if (odd? (count l)) (inc c1) c1)]\r\n     (= (apply + (take c1 l)) (apply + (drop c2 l)))\r\n     ))", "problem": 115, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn [n]\n  (let [ds (seq (str n))\n        m (int (/ (count ds) 2))\n        xs (map int (take m ds)) \n        ys (map int (take m (reverse ds)))]\n    (= (reduce + xs) (reduce + ys))))", "problem": 115, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn [num]\n    (letfn [(digits [n] (loop [acc '() num n] (if (zero? num) acc (recur (cons (mod num 10) acc) (quot num 10)))))]\n    (let   [num-digits (digits num) half (+ (quot (count num-digits) 2) (rem (count num-digits) 2))]\n        (== (reduce + 0 (take half num-digits))\n            (reduce + 0 (take half (reverse num-digits)))))))", "problem": 115, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn [num]\r\n  (let [coll (map #(int %) (str num))\r\n        len (Math/floor (/ (count coll) 2))]\r\n    (= (apply + (take len coll))\r\n       (apply + (take-last len coll)))))", "problem": 115, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn balanced? [x]\n  (let [digits (fn [x] (map #(- % 48) (map int (.toString x))))\n        countd (fn [x] (count (.toString x)))\n        half (fn [x] (int (/ (countd x) 2)))]\n    (= (reduce + (take (half x) (digits x)))\n       (reduce + (take (half x) (reverse (digits x)))))))", "problem": 115, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn balanced? [n]\n  (let [s (str n)\n        l (count s)\n        mid (int (/ l 2))\n        sum #(reduce + (map (fn [c] (Integer. (str c))) %))]  \n    (= (sum (take mid s))\n       (sum (take-last mid s)))))", "problem": 115, "user": "4db8d37d535d1e037afb219c"}, {"code": "#(= 0 (apply + (apply map - ((juxt take take-last) (quot (count (str %)) 2) (map int (str %))))))", "problem": 115, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn [n]\n  (let [digits (map #(rem (int (/ n %)) 10)\n                 (take-while #(<= % n) (iterate (partial * 10) 1)))\n        m (int (/ (count digits) 2))]\n  (= (reduce + (take m digits))\n     (reduce + (take m (reverse digits))))))", "problem": 115, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn balanced\n  ([n] (balanced 0 0 (map (fn [c] (Integer/parseInt (str c))) (seq (str n)))))\n  ([sum1 sum2 n]\n    (cond\n      (empty? n) (= sum1 sum2)\n      (= (count n) 1) (= sum1 sum2)\n      :else (balanced \n              (+ sum1 (first n)) \n              (+ sum2 (last n))\n              (rest (butlast n))))))", "problem": 115, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn [n]\r\n    (let [digits\r\n          (loop [n n acc []]\r\n            (let [ones (mod n 10)\r\n                  tens (quot n 10)\r\n                  acc (conj acc ones)]\r\n              (if (pos? tens)\r\n                (recur tens acc)\r\n                acc)))\r\n          ct (count digits)\r\n          half (quot ct 2)\r\n          left (reduce + (take half digits))\r\n          right (reduce + (drop (- ct half) digits))]\r\n      (= left right)))", "problem": 115, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn [n]                                                                                    \n  (letfn [(digits [n] (map #(Integer/parseInt (str %)) (str n)))]                                    \n    (let [dgts (digits n)                                                                            \n          half (/ (count dgts) 2)                                                                    \n          left (if (odd? (count dgts)) (take (dec half) dgts) (take half dgts))                      \n          right (drop half dgts)]                                                                    \n    (= (apply + left) (apply + right)))))", "problem": 115, "user": "4f1d1299535d64f603146487"}, {"code": "(fn [n]\n  (let [ds (map #(read-string (str %)) (str n))\n        h (Math/floor (/ (count ds) 2))\n        l (take h ds)\n        r (take h (reverse ds))]\n    (= (apply + l) (apply + r))))", "problem": 115, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "; test data doesn't cover problem space\n(fn [n]\n  (let [s (str n)]\n    (apply = (map #(sort (take (/ (count s) 2) %))\n                         [s (reverse s)]))))", "problem": 115, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn [n]\n    (cond (< n 10) true\n          (and (< n 100) (= 0  (mod n 11))) true\n          true (let [s (str n)\n                     c (count s)\n                     m (if (even? c) (/ c 2) (/ (- c 1) 2))\n                     t (take m s)\n                     b (drop (- c m) s)]\n                 (= (apply + (map #(- (int %) (int \\0)) t))\n                    (apply + (map #(- (int %) (int \\0)) b))))))", "problem": 115, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn [n]\n  (let [digits (vec (map #(Integer/parseInt %) (map str (str n))))\n        mid (/ (count digits) 2)]\n    (= (reduce + (subvec digits 0 (Math/ceil mid)))\n       (reduce + (subvec digits (Math/floor mid))))))", "problem": 115, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [n]\n  (letfn [(digits [x] (if (zero? x) [] (conj (digits (quot x 10)) (rem x 10))))]\n    (let [d (digits n) half (quot (count d) 2)]\n      (= (apply + (take half d))\n         (apply + (take half (reverse d)))))))", "problem": 115, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn [n] (let [s (map int (seq (str n))) c (count s)] (zero? (apply + (map * (map #(.compare > (/ (dec c) 2) %) (range c)) s)))))", "problem": 115, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn [n]\n  (let [sn (str n)\n        digits (map #(Integer/parseInt (str %)) sn)\n        c (int (/ (count sn) 2))]\n    (== \n      (reduce + (take c digits))\n      (reduce + (take c (reverse digits))))))", "problem": 115, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn [n]\r\n     (let [len (count (str n)),\r\n           hflen (if (= (mod len 2) 0) (/ len 2) (/ (- len 1) 2)),\r\n           lhf (apply str (take hflen (str n))),\r\n           rhf (apply str (take-last hflen (str n)))]\r\n       (letfn [(sumdig [s] (reduce + (map #(Integer/parseInt (str %)) s)))]\r\n          (= (sumdig lhf) (sumdig rhf)))))", "problem": 115, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn [n] \n  (let [n-to-vector (fn [x] (-> x str seq (->> (map str) (map #(Integer/parseInt %)) (into []))))]\n    (loop [xs (n-to-vector n) leftacc 0 rightacc 0]\n      (if (<= (count xs) 1)\n        (= leftacc rightacc)\n        (recur  (into [](take (- (count xs) 2) (drop 1 xs))) \n                (+ leftacc (nth xs 0))\n                (+ rightacc (nth xs (dec (count xs)))))))))", "problem": 115, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn [n]\n  (let [d (map #(Integer. (str %))\n               (str n))\n        c (count d)\n        h (int (Math/ceil (/ c 2)))\n        l (take h d)\n        r (drop (- c h) d)]\n    (= (reduce + l)\n       (reduce + r))))", "problem": 115, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn balanced? [n]\n  (let [ns (map int (str n))\n        size (quot (count ns) 2)]\n    (= (apply + (drop size ns))\n       (apply + (drop-last size ns)))))", "problem": 115, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn [x]\n    (let [digits (map #(Integer. (str %)) (str x))\n          pivot (quot (count digits) 2)]\n      (= (apply + (take pivot digits))\n         (apply + (take pivot (reverse digits))))))", "problem": 115, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn [n]\n  (let [[l r :as ps] (split-at (quot (count (str n)) 2) (str n))\n        ps (if (zero? (rem (count (str n)) 2)) ps [l (rest r)])\n        psdigits (map (partial map #(Integer/parseInt (str %))) ps)\n        pssum (map (partial apply +) psdigits)]\n     (apply = pssum)))", "problem": 115, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn balanced? [n]\n  (if (< n 10)\n    true\n    (let [sn (str n)\n          half (int (/ (count sn) 2))\n          left (take half sn)\n          right (take-last half sn)\n          sum (fn [s] (reduce #(+ %1 (Integer. (str %2))) 0 s))]\n      (= (sum left) (sum right)))))", "problem": 115, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn bal [n]\n  (let [v (vec (map #(- (int %) 48) (str n)))\n        c (count v)\n        p (split-at (quot c 2) v)\n        l (first p)\n        r (if (= (rem c 2) 0) (last p) (rest (last p)))]\n    (= (reduce + l) (reduce + r))))", "problem": 115, "user": "4ecbb249535df97575fdabdf"}, {"code": "(fn [i]\r\n  (let [l ((fn _ [v] (if (= v 0) [] (conj (_ (quot v 10)) (rem v 10)))) i), c (quot (+ 1 (count l)) 2)]\r\n    (= (apply + (take c l)) (apply + (take-last c l)))\r\n  )\r\n)", "problem": 115, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn [n]\n  (let [ns (map #(- (int %) 48) (str n))\n        sumpart #(reduce + (take (/ (count ns) 2) (% ns)))]\n    (= (sumpart identity)\n       (sumpart reverse))))", "problem": 115, "user": "4dafa380edd6309eace4d17c"}, {"code": "#((fn [[a & s] l r]\n    (if (empty? s)\n      (= l r)\n      (recur (butlast s)\n             (+ l a)\n             (+ r (last s)))))\n  (map int (str %)) 0 0)", "problem": 115, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn [n]\n  (letfn [(halve [s] (let [c (count s)\n                           half (quot c 2)\n                           split (split-at (+ half (mod c 2)) s)]\n                       (map #(take half %) split)))]\n    (->> (halve (str n))\n         (map (fn [l] (apply + (map #(Character/getNumericValue %) l))))\n         (apply -)\n         (zero?))))", "problem": 115, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "#(let [n (map int (.toString %))\n       h (/ (count n) 2)]\n    (= (reduce + (take h n)) (reduce + (take-last h n))))", "problem": 115, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn [n]\n  (let [str_n (str n)\n        n (count str_n)\n        fhalf (map #(Integer/parseInt (str %)) (seq (.substring str_n 0 (quot n 2))))\n        shalf (map #(Integer/parseInt (str %)) (seq (.substring str_n (+ (quot n 2) (mod n 2)) n)))]\n    (== (apply + fhalf) (apply + shalf))))", "problem": 115, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn [n]\n           (letfn [(sum-digit [num]\n                              (apply + (map #(Integer. (str %))\n                                            (str num)))) \n                  (half-digit [num]\n                              (let [n-str (str num)\n                                   n-c (quot (count n-str) 2) ]\n                                   [(apply str (take n-c (str num)))\n                                   (apply str (take n-c (apply str (reverse (str num))))) ])) ]\n                  (apply = (map sum-digit (half-digit n)))))", "problem": 115, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "(fn [n]\n  (let [ns (str n) \n        size (quot (count ns) 2) \n        sd (fn [s] (reduce + (map #(Character/digit % 10) s)))]\n    (= (sd (take size ns)) (sd (take size (reverse ns))))))", "problem": 115, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn [n]\n  (let [s (str n) x (quot (count s) 2) f (fn [a] (apply + (map #(Integer. (str %)) a)))]\n    (= (f (take x s)) (f (take-last x s)))))", "problem": 115, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn [n]\n  (let [dig (vec (map #(Integer/parseInt %) (re-seq #\"\\d\" (str n)))) t (count dig)]\n    (= (reduce + (subvec dig 0 (int (/ t 2))))\n       (reduce + (subvec dig (- t (int (/ t 2))) t))\n    )\n  )\n)", "problem": 115, "user": "4f84400de4b033992c121c2e"}, {"code": "#(let [v (map int (str %))\n       n (quot (count v) 2)]\n   (= (apply + (take n v))\n      (apply + (take-last n v))))", "problem": 115, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn [n]\n  (let [s (loop [n n acc []] (if (zero? n) acc (recur (quot n 10) (conj acc (mod n 10)))))\n        c (quot (count s) 2)]\n    (= (reduce + (take c s)) (reduce + (take-last c s)))))", "problem": 115, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn [n]\n   (let [n-digits (map #(- (int %) (int \\0)) (str n))\n         n-len (count n-digits)\n         middle (-> n-len (/ 2) int)\n         [left right] (split-at middle n-digits)\n         left (if (odd? (count n-digits))\n                (conj left (nth n-digits middle))\n                left)\n         sum #(apply + %)]\n     (println [left right])\n     (= (sum left) (sum right))))", "problem": 115, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn [n]\n    (letfn [(digits [n]\n              (loop [n n\n                     ds '()]\n                (if (zero? n)\n                  ds\n                  (recur (quot n 10)\n                         (conj ds (mod n 10))))))\n            (count-seq [s]\n              (apply + s))]\n      (let [ns (digits n)\n            count-ns (count ns)\n            half-ns (quot count-ns 2)]\n        (= (count-seq (take half-ns ns))\n           (if (even? count-ns)\n             (count-seq (drop half-ns ns))\n             (count-seq (drop (inc half-ns) ns)))))))", "problem": 115, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn checkBal[num]\r\n  (if (< num 10)\r\n      true\r\n  (let[len  (+ (int (Math/log10 num) ) 1 )  ,\r\n       half1 (if (odd? len) (/ (- len 1) 2)  (/ len 2) ),\r\n       half2 (if (odd? len) (+ half1 1)   half1)\r\n       l  (map #(- (int %) 48)  (seq (str num) ) )\r\n       ]\r\n       (= (apply + (take half1 l) )\r\n\t           (apply + (drop half2 l) )\r\n\t           )\r\n    )\r\n   )\r\n  )", "problem": 115, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn [n]\n  (let [digs (map #(- (int %) 48) (str n))\n        half (quot (count digs) 2)\n        ls (reduce + (take half digs))\n        rs (reduce + (take-last half digs))]\n     (= ls rs)))", "problem": 115, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn [i] (\n  let [ds (map #(- (int %) 48) (seq (str i))),\n       n (int (/ (count (str i))2))]\n    (= (reduce + (take n ds)) (reduce + (take n (reverse ds)))) \n))", "problem": 115, "user": "4ef48422535dced4c769f236"}, {"code": "(fn balance? [n]\n  (let [d (map #(- (int %) 48) (str n))\n        half (quot (count d) 2)]\n    (= (reduce + (take half d))\n       (reduce + (take half (reverse d))))))", "problem": 115, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn [n]\n    (let [ns (seq (str n))\n          i (quot (count ns) 2)\n          l (apply + (map int (take i ns)))\n          r (apply + (map int (drop (+ i (if (even? (count ns)) 0 1)) ns)))]\n      (if (zero? i) true\n        (= l r))))", "problem": 115, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(fn [n]\n   (letfn [(f [k] (reduce #(+ % (int %2)) 0 (h k)))\n           (h [k] (take (/ (count k) 2) k))]\n      (= (f (str n))\n         (f (reverse (str n))))))", "problem": 115, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn balsum [n]\n  (let [predigits (seq (str n))\n        digits (map #(- (int %) (int \\0)) predigits)\n        numdigits (count digits)\n        _ (println \"numdigits\" numdigits)\n        halfdigits (int (/ numdigits 2))\n        _ (println \"halfdigits\" halfdigits)\n        skipdigits (- numdigits halfdigits)\n        _ (println \"skipdigits\" skipdigits)\n        firsthalf (take halfdigits digits)\n        _ (println firsthalf)\n        secondhalf (drop skipdigits digits)\n        _ (println secondhalf)\n        firstsum (reduce + firsthalf)\n        _ (println firstsum)\n        secondsum (reduce + secondhalf)]\n        _ (println secondsum)\n        (= firstsum secondsum)))", "problem": 115, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(letfn [\n    (digits [x]\n      (loop [y x, result '()]\n        (if (zero? y)\n          (apply vector result)\n          (recur (quot y 10) (conj result (rem y 10))))))\n\n    (split [A]\n      (let [l (count A)\n            a (quot l 2)\n            b (if (odd? l) (inc a) a)]\n      [(subvec A 0 a) (subvec A b l)]))\n\n    (sum [A] (reduce + A))]\n\n    (comp (partial apply =)\n          (partial map sum)\n          split digits))", "problem": 115, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn [n]\n  (let [digits (map #(Integer/parseInt %) (re-seq #\"[\\d]\" (str n)))\n        half-count (/ (count digits) 2)\n        left-sum (reduce + (take half-count digits))\n        right-sum (reduce + (take-last half-count  digits))]\n    (= left-sum right-sum)))", "problem": 115, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn [n]\n  (let [s (str n)]\n    (= (reduce + (map #(Character/digit % 10) (take (/ (count s) 2) s)))\n       (reduce + (map #(Character/digit % 10) (take (/ (count s) 2) (reverse s)))))))", "problem": 115, "user": "4fae258de4b081705acca246"}, {"code": "(fn balance? [x]\n         (letfn [(sumup [coll]\n                   (reduce #(+ %1 (Integer/parseInt (str %2))) 0 coll))]    \n           (let [str-repr (str x)\n                 n (/ (count str-repr) 2)\n                 head (take n str-repr)\n                 tail (take-last n str-repr)]\n             (= (sumup head) (sumup tail)))))", "problem": 115, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [n]\n (let [digits (fn [n] (map #(Integer/parseInt (str %)) (str n)))\n       splitseq (fn [s]\n                  (let [f (Math/floor (/ (count s) 2))\n                        l (Math/ceil (/ (count s) 2))]\n                    [(take f s) (drop l s)]))]\n   (println (splitseq (digits n)))\n   (apply = (map #(reduce + %) (splitseq (digits n))))))", "problem": 115, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn [n]\n  (let [s (str n)\n        c (count s)\n        d (int (/ c 2))\n        a (take d s)\n        b (drop (- c d) s)]\n    (apply =\n      (map\n        (partial reduce #(+ %1 (- (int %2) 48)) 0)\n        [a b]))))", "problem": 115, "user": "4fb2101ce4b081705acca284"}, {"code": "(letfn\n  [ (digits [n] (map #(Integer. %) (re-seq #\"\\d\" (str n))))\n    (hds [d] (reduce + (take (/ (count d) 2) d)))]\n  #(= \n    (hds (digits %))\n    (hds (reverse (digits %)))))", "problem": 115, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [n]\n  (letfn [(n2v [n] (loop [n n r []] (if (< n 10) (conj r n) (recur (quot n 10) (conj r (mod n 10))))))]\n    (let [v (n2v n)\n          f (take (quot (count v) 2) v)\n          r (take-last (quot (count v) 2) v)]\n      (= (apply + f) (apply + r)))))", "problem": 115, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn [n]\n  (let [c (count (str n))]\n    (or (= c 1)\n      (letfn [(sum [n] (if (zero? n) 0 (+ (rem n 10) (sum (quot n 10)))))\n              (pow10 [n] (if (zero? n) 1 (* 10 (pow10 (dec n)))))]\n        (= (sum (rem n (pow10 (quot c 2)))) (sum (quot n (pow10 (- c (quot c 2))))))\n      )\n    )\n  )\n)", "problem": 115, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn [x]\n  (let [strx (str x)\n   xl (map #(Character/getNumericValue %) strx)]\n  (= (reduce + (take (/ (count xl) 2) xl)) (reduce + (take-last (/ (count xl) 2) xl)))))", "problem": 115, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn [x] (let\n           [xn (map int (str x))\n            half (quot (count xn) 2)\n            left (take half xn)\n            right (take-last half xn)\n            lsum (reduce + left)\n            rsum (reduce + right)]\n           (= lsum rsum)))", "problem": 115, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn [n]\n  (let [s1 (str n)\n        s2 (reverse s1)\n        sum (fn [s] (apply + (map #(Integer. (str %)) (take (/ (.length s1) 2) s))))]\n    (= (sum s1) (sum s2))))", "problem": 115, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn [n]\n  (let [x (str n)\n        m (quot (count x) 2)\n        s (fn [s] (apply + (map int (seq s))))]\n    (= (s (take m x)) (s (take-last m x)))))", "problem": 115, "user": "4fa30027e4b081705acca187"}, {"code": "(fn [i]\n  (let [digits (map #(Integer/parseInt (str %)) (seq (str i)))\n        rhs (take-last (/ (count digits) 2) digits)\n        lhs (take (/ (count digits) 2) digits)\n        rsum (apply + rhs)\n        lsum (apply + lhs)]\n    (if (= rsum lsum)\n        true\n        false)))", "problem": 115, "user": "4faec810e4b081705acca24e"}, {"code": "(fn [n]\n   (let [ns (vec (map #(- (int %) 0x30) (Long/toString n)))\n         len (count ns)\n         half-len (if (odd? len)\n                    (inc (/ len 2))\n                    (/ len 2))\n         lhs (subvec ns 0 half-len)\n         rhs (subvec (vec  (reverse ns)) 0 half-len)\n         ]\n     (println lhs rhs)\n     (= (reduce + lhs) (reduce + rhs))))", "problem": 115, "user": "4fc8ce6ce4b0ee37620e183c"}, {"code": "#(->>\n    %\n    str\n    (map int)\n    ((fn sum-halves [s]\n       (if (empty? s)\n           [0 0]\n           (map + [(first s) (last s)]\n                  (sum-halves (rest (butlast s)))))))\n    (apply =))", "problem": 115, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn balanced? [n]\n  (letfn [(to-digits [n]\n            (if (= 0 n)\n              []\n              (conj (to-digits (quot n 10)) (mod n 10))))]\n    (let [digits (to-digits n)\n          len    (count digits)\n          left   (if (even? len)\n                   (take (quot len 2) digits)\n                   (take (inc (quot len 2)) digits))\n          right  (drop (quot len 2) digits)]\n      (= (apply + left) (apply + right)))))", "problem": 115, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn [n] (let [s (str n)\n             h (/ (count s) 2)\n             [f l] (partition (int (Math/ceil h)) (int (Math/floor h)) s)]\n          (= (apply + (map int f)) (apply + (map int l)))))", "problem": 115, "user": "4efd8b67535de96065cf5085"}, {"code": "(fn balanced [n]\n  (let [to-digit #(Integer/parseInt (str %))\n       to-digits #(vec (map to-digit (str %)))\n       dig (to-digits n)\n       h (split-at (/ (count dig) 2) dig)\n       parts (if (> (count (first h)) (count (second h)))\n               (assoc h 1 (cons (last (first h)) (second h))) h)]\n  (apply = (map #(apply + %) parts))))", "problem": 115, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [n] \n  (let [xs (str n)                                                                                               \n        len (quot (count xs) 2)]                                                                                 \n    (= (sort (take len xs)) (sort (take len (reverse xs))))))", "problem": 115, "user": "4fa6a491e4b081705acca1bc"}, {"code": "(fn[a](= \n  (reduce #(+ % (read-string (str %2))) 0 (take (/ (count (str a)) 2) (str a))) \n  (reduce #(+ % (read-string (str %2))) 0 (take (/ (count (str a)) 2) (reverse (str a))))\n  )\n)", "problem": 115, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn [x] \n  (let [n (map #(- (int %) 48) (str x))] \n    (apply = (map #(apply + (take (/ (count %) 2) %)) [n (reverse n)]))))", "problem": 115, "user": "4fb3b865e4b081705acca2a2"}, {"code": "#(let [v (vec (map int (str %)))\r\n       len (count v)\r\n       half (/ len 2)\r\n       left (subvec v 0 half)\r\n       right (subvec v (+ half (mod len 2)))]\r\n  (= (reduce + left) (reduce + right)))", "problem": 115, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn [n]\n  (let [v (map #(Character/digit % 10) (.toString n)) c (quot (count v) 2)]\n    (= (apply + (take c v)) (apply + (take-last c v)))\n    )\n  )", "problem": 115, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(fn [n]\n  (let [digits (map #(- (int %) (int \\0)) (str n))\n        m (/ (count digits) 2)]\n    (= (apply + (take (int m) digits))\n       (apply + (drop m digits)))))", "problem": 115, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn [s] \n  (let [s (map int (str s))\n        parts ((juxt take take-last) (/ (count s) 2) s)\n        dsum (fn [s] (reduce + (map #(- % (int \\0)) s)))]\n    (apply = (map dsum parts))))", "problem": 115, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [n]\n  (let [n-seq (->> n str (map (comp read-string str)))\n        half (quot (count n-seq) 2)]\n    (= (reduce + 0 (take half n-seq))\n       (reduce + 0 (take-last half n-seq)))))", "problem": 115, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn [n] (let [s (map #(Character/digit % 10) (.toString n))]\r\n    (= (reduce + (take (quot (count s) 2) s)) (reduce + (drop (quot (inc (count s)) 2) s)))))", "problem": 115, "user": "4fd29d7ce4b04c3a95aa0424"}, {"code": "(fn [n]\n  (let [\n    ds (map #(- (int %) (int \\0)) (str n))\n    half (/ (count ds) 2)\n    left (take half ds)\n    right (take-last half ds)]\n    (= (reduce + left) (reduce + right))))", "problem": 115, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [num]\n  (let [digits (map #(- (int %) 48) (str num))\n        n (quot (count digits) 2)\n        left (take n digits)\n        right (drop (- (count digits) n) digits)]\n    (= (apply + left) (apply + right))))", "problem": 115, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn balance [n]\n  (let [s (seq (str n))\n        n (Math/ceil (/ (count s) 2))]\n    (apply = (map #(apply + (map int %))\n      [(take n s) (take n (reverse s))]))))", "problem": 115, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn [n]\n  (let [s (str n)\n        m (quot (count s) 2)\n        ds #(apply + (map (comp read-string str) (take m %)))]\n    (= (ds s) (ds (reverse s)))))", "problem": 115, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn bal[n]\n  (let [digits ((fn pd [lst num]\n                  (if (= 0 num) lst (pd (cons (rem num 10) lst) (quot num 10)))) [] n)\n        ndigits (quot (count digits) 2)\n        suml (reduce + (take ndigits digits))\n        sumr (reduce + (take ndigits (reverse digits)))]\n    (= sumr suml)))", "problem": 115, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn [x]\n  (let [coll (map int (str x))\n        half (/ (count coll) 2)]\n      (=\n       (apply + (take (int half) coll))\n       (apply + (drop half coll)))))", "problem": 115, "user": "4fcd155de4b065de69964ca3"}, {"code": "(fn [n]\n  (let [lst (map #(- (int %) 48) (str n))\n        c (quot (count lst) 2)\n        left (take c lst)\n        right (take-last c lst)]\n    (= (apply + left) (apply + right))))", "problem": 115, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn  [n]\n   (let [nlist (str n)\n\t\t\t\t pivot (/  (count nlist) 2)\n\t\t\t\t l1 (take pivot nlist)\n\t\t\t\t l2 (if (even? (count nlist))\n\t\t\t\t\t\t\t(drop pivot nlist)\n\t\t\t\t\t\t\t(drop (- pivot 1) nlist))\n\t\t\t\t redfn (fn [l] (reduce\n\t\t\t\t\t\t\t\t\t\t\t\t#(+ %1 (Integer. (str %2))) 0 l))]\n\t\t (= (redfn l1) (redfn l2))))", "problem": 115, "user": "4fdfe6a5e4b05e33b9224fa6"}, {"code": "(fn [n]\n (let [s (seq (str n))\n       l (quot (count s) 2)]\n   (->> [s (reverse s)]\n     (map #(take l %))\n     (map (fn [s] (map #(Character/digit % 10) s)))\n     (map #(apply + %))\n     (apply =))))", "problem": 115, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "(fn [n]\n  (let [ds (->> n str seq (map str) (map #(Long. %)))\n    hl (int (/ (count ds) 2))]\n    (= (reduce + (take hl ds)) (reduce + (take hl (reverse ds))))))", "problem": 115, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn balanced? [n]\n  (let [ digits (map #(Integer/parseInt (str %)) (str n))\n        c (/ (count digits) 2) ]\n    (= (reduce + (take c digits)) (reduce + (take c (reverse digits))))))", "problem": 115, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "#(let [f ((fn d [m]\n          (if (zero? m) [] \n          (conj (d (quot m 10)) (mod m 10)))) %)\n      n (quot (count f) 2)]\n(= (reduce + (take n f))\n   (reduce + (take n (reverse f)))))", "problem": 115, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn [n]\n  (let [s (seq (str n))\n        c (count s)\n        i (int (/ c 2))\n        y (take i s)\n        z (drop (+ i (rem c 2)) s)\n        f #(+ % (Character/digit %2 10))]\n       (= (reduce f 0 y) (reduce f 0 z))))", "problem": 115, "user": "4daddc19c9a9d6ed4599dc57"}, {"code": "(letfn [(num->rdigits [n]\r\n          (loop [n n\r\n                 ret []]\r\n            (if (zero? n)\r\n                ret\r\n              (recur (quot n 10) (conj ret (rem n 10))))))]\r\n  (fn bn? [n]\r\n    (let [rdigits (num->rdigits n)\r\n          len (count rdigits)\r\n          half-len (quot len 2)\r\n          h-half (take half-len rdigits)\r\n          t-half (drop (- len half-len) rdigits)]\r\n      (== (reduce + h-half) (reduce + t-half)))))", "problem": 115, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "#(if (< % 10) true (let [d (count (str %))]\n (apply = (map (fn [c] (reduce (fn [x y]\n  (+ x (int y) -48)) 0 c))\n   (partition (quot d 2) (quot (inc d) 2) (str %))))))", "problem": 115, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn bal? [n]\n  (let [diglis (->> n str seq (map str) (map read-string))\n        len (count diglis)\n        halflen (int (/ len 2))]\n    (= (reduce + (take halflen diglis))\n       (reduce + (drop (- len halflen) diglis)))))", "problem": 115, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn [z] (letfn [(sum [x] (reduce + (map #(- (int %) 48) (take (/ (count x) 2) x))))] (= (sum (str z)) (sum (reverse (str z)))) ))", "problem": 115, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn [i]\n  (let [n (str i)\n        x (/ (count n) 2)\n        lhs (take x n)\n        rhs (drop (if (odd? (count n)) (dec x) x) n)\n        f (fn [x] (reduce #(+ % (read-string (str %2))) 0 x))]\n    (= (f lhs) (f rhs))))", "problem": 115, "user": "4db016af838c48654951d9b9"}, {"code": "(fn [n]\n  (let [f (fn [g] (reduce #(+ % (-> %2 str read-string)) 0 (g (quot (count (str n)) 2) (seq (str n)))))]\n      (= (f take) (f take-last))))", "problem": 115, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn [x]\n  (let [digits (fn [i] (loop [acc nil\n                              a i]\n                         (if (zero? a)\n                           acc\n                           (recur (conj acc (rem a 10)) (int (/ a 10))))))\n        n (digits x)\n        l (int (/ (count n) 2))]\n    (= (reduce + (take l n)) (reduce + (take-last l n)))))", "problem": 115, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn [x]\n  (let \n    [y (map #(int %) (str x))\n     a (int (/ (count y) 2.0))]\n      (= (apply + (take a y))\n         (apply + (take-last a y)))))", "problem": 115, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "(fn [n] (let [nstr (str n) cn  (count nstr) cn2 (int (/ cn 2)) sides [(take cn2 nstr) (drop (- cn cn2) nstr)]] (apply = (map #(apply + (map int %)) sides))))", "problem": 115, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn balance? [n]\n  (let [s (map (comp read-string str) (str n)) c (quot (count s) 2)]\n    (= (apply + (take c s)) (apply + (take-last c s)))))", "problem": 115, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn p [n]\n    (let [d (map #(Integer. (str %)) (str n))\n          c #(reduce + (% (quot (count d) 2) d))]\n       (= (c take) (c take-last))))", "problem": 115, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn halves [n]\n  (let [sn (str n)\n        ln (int (/ (count sn) 2))\n        a (map int (take ln sn))\n        b (map int (take-last ln sn))]\n    (= (apply + a) (apply + b))))", "problem": 115, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn balanced? [n]\n  (let [digit #({\\0 0, \\1 1, \\2 2, \\3 3, \\4 4, \\5 5, \\6 6, \\7 7, \\8 8, \\9 9} %)\n        digits (vec (map digit (str n)))\n        middle (quot (count digits) 2)\n        left-side (subvec digits 0 middle)\n        right-side (subvec digits (if (even? (count digits)) middle (inc middle)))]\n    (= (reduce + left-side) (reduce + right-side))))", "problem": 115, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn balanced? [n]\n  (let [s (str n)\n        t (bit-shift-right (count s) 1)\n        f #(apply + (map int (take t %)))]\n    (= (f s) (f (reverse s)))))", "problem": 115, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn [n]\n  (let [digits (map #(- (int %) (int \\0)) (str n))\n        len (count digits)\n        half (quot len 2)]\n    (= (apply + (take half digits))\n       (apply + (drop (- len half) digits)))))", "problem": 115, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(letfn\n  [(split-str [str] \n     (let [n (quot (count str) 2)]\n       [(take n str) (take-last n str)]))\n   (to-int [char] (- (int char) (int \\0)))]\n  (fn [num]\n    (apply = (map #(reduce + (map to-int %)) (split-str (str num))))))", "problem": 115, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn [n]\r\n  (let [\r\n    d (map #(Integer. (str %)) (str n))\r\n    c (/ (count d) 2)\r\n    l (take c d)\r\n    r (take c (reverse d))]\r\n    (= (apply + l) (apply + r))))", "problem": 115, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn [j] (let [s (str j)\n       l (count s)\n       h (int (/ l 2))\n       f #(reduce (fn [a b] (+ a (Integer. (str b)))) 0 %)]\n   (= (f (subs s 0 h))\n      (f (subs s (- l h))))))", "problem": 115, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn [n]\n  (let [digits (map #(- (int %) (int \\0)) (str n))\n        len (count digits)\n        mid (int (/ len 2))]\n    (if (= len 1)\n      true\n      (let [[left right] (split-at mid digits)\n            right (if (odd? len) (rest right) right)]\n        (= (apply + left) (apply + right))))))", "problem": 115, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn balanced? [x]\r\n (let [v (map #(- (int %) 48) (str x))\r\n       c (quot (count v) 2)\r\n       d (- (count v) c)]\r\n      (if (= c 0)\r\n          true\r\n          (= (reduce + (take d v))\r\n             (reduce + (drop c v))))))", "problem": 115, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "#(let [f (comp sort subs)\r\n       s (str %)\r\n       l (count s)]\r\n  (= (f s 0 (/ l 2))\r\n     (f s (/ (if (odd? l) (+ l 1) l) 2) l)))", "problem": 115, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn balanced [ival]\n    (let [vecmaker (fn [ival]\n                     (loop [iv ival\n                            builder []]\n  \t       (if (< iv 1)\n                         builder\n                         (recur (unchecked-divide-int iv 10)\n\t\t\t\t(conj builder (unchecked-remainder-int iv 10))))))\n          sum (fn [iseq]\n\t\t(reduce + iseq))\n          intvec (vecmaker ival)\n          ct (count intvec)]\n      (if (= 1 ct)\n\ttrue\n\t(if (= 0 (mod ct 2))\n          (= (sum (subvec intvec 0 (/ ct 2)))\n             (sum (subvec intvec (/ ct 2) ct)))\n          (= (sum (subvec intvec 0 (/ (- ct 1) 2)))\n             (sum (subvec intvec (/ (+ ct 1) 2) ct)))))))", "problem": 115, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn [n]\n  (let [sq (map read-string (re-seq #\"[0-9]\" (str n)))\n        te (/ (count sq) 2)\n        to (/ (- (count sq) 1) 2)]\n    (if (= (count sq) 1) true\n        (if (odd? (count sq))\n          (if (= (reduce + (take to sq)) (reduce + (take to (reverse sq)))) true false)\n          (if (= (reduce + (take te sq)) (reduce + (take te (reverse sq)))) true false)))))", "problem": 115, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn [n] (let [digits (->> (str n) seq (map (comp read-string str)) vec)\r\n                c (count digits)\r\n                [left right] (if (even? c)\r\n      [(subvec digits 0 (/ c 2)) (subvec digits (/ c 2))]\r\n      [(subvec digits 0 (int (/ c 2))) (subvec digits (inc (int (/ c 2))))])]\r\n            (= (apply + left) (apply + right))))", "problem": 115, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn [num]\n  (let [sn (str num)\n        len (quot (count sn) 2)\n        left (take len sn)\n        right (take-last len sn)]\n    (= (into #{} left) (into #{} right))))", "problem": 115, "user": "4dca8b6d535d5973398f9288"}, {"code": "(fn [n]\n   (let [digit-fn (fn digits [n s]\n                    (if (= n 0) s\n                        (recur (int (/ n 10)) (conj s (rem n 10)))))\n         digit-seq (digit-fn n '() )\n         half (int (/ (count digit-seq) 2))\n         sum-first-half-fn (fn [seq] (reduce + (take half seq)))]\n     (= (sum-first-half-fn digit-seq)\n        (sum-first-half-fn (reverse digit-seq)))))", "problem": 115, "user": "500ea957e4b00fff93030f9b"}, {"code": "(fn [n]\n  (let [l (count (str n))\n        h (quot l 2)\n        [l r] (partition (+ h (rem l 2)) h (map #(- (int %) (int \\0)) (str n)))]\n       (= (apply + l) (apply + r))))", "problem": 115, "user": "4f05ea25535dcb61093f6c02"}, {"code": "#(let [num (map int (str %))\n       half (/ (count num) 2)]\n  (= (reduce + (take half num))\n     (reduce + (take-last half num))))", "problem": 115, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn __ [x]\n  (let [d (vec (map #(Character/digit % 10) (str x)))\n        c (quot (count d) 2)]\n    (=\n     (reduce + (subvec d 0 c))\n     (reduce + (subvec d (- (count d) c))))))", "problem": 115, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn[n] (let [l (map int (-> n str seq))\n             c (quot (count l) 2)\n             a (reduce + (take c l))\n             b (reduce + (take c (reverse l)))\n            ] \n            (= a b)\n       )\n)", "problem": 115, "user": "5017eface4b02f523d7cc5e7"}, {"code": "(fn balanced? [n]\n  (let [n-str (str n)\n        n-chars (count n-str)\n        first-half (take (int (Math/floor (/ n-chars 2.0))) n-str)\n        second-half (drop (int (Math/ceil (/ n-chars 2.0))) n-str)]\n    (letfn [(sum-str [str]\n              (reduce + (map int str)))]\n      (= (sum-str first-half) (sum-str second-half)))))", "problem": 115, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn [ns]\r\n  (let [l (subs (str ns) 0 (/ (count (str ns)) 2))\r\n        r (subs (str ns) (Math/ceil (/ (count (str ns)) 2)))]\r\n  (= (reduce #(+ %1 (Character/getNumericValue %2)) 0 l)\r\n     (reduce #(+ %1 (Character/getNumericValue %2)) 0 r))))", "problem": 115, "user": "4fd8544be4b0dab7d829f390"}, {"code": "(fn [n] \n  (let [\n    digits (fn [x]\n      (map #(read-string (str %)) (seq (str x))))\n    ordigs (digits n)\n    digseq (vector \n              (take (int (/ (count ordigs) 2)) ordigs) \n              (drop (int (+ 0.5 (/ (count ordigs) 2))) ordigs))\n    ]\n    (\n      = (reduce + (first digseq)) (reduce + (second digseq))\n    )\n))", "problem": 115, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn [n]\n  (let [ns (map #(Integer/parseInt (str %)) (str n))\n        c (quot (count ns) 2)\n        a (take c ns)\n        b (take-last c ns)]\n    (= (reduce + a) (reduce + b))))", "problem": 115, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn perfect [n]\n  (let [toDigits (fn [i] (map #(- (int %) (int \\0)) (seq (str i))))\n        digits (toDigits n)\n        halves (split-at (/ (count digits) 2) digits)\n        toSum (if (odd? (count digits)) \n                (concat (list (drop-last (first halves))) (list (second halves)))\n                halves)\n\n       ] \n     (reduce = (map (partial reduce +) toSum))\n))", "problem": 115, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn f [x]\n  (let [s (str x) n (count s)]\n    (cond\n      (= 1 n) true\n      (even? n) (apply = (map #(reduce (fn [a b] (+ a (- (int b) 48))) 0 %) (partition (/ n 2) s)))\n      :else (f (Integer/parseInt (apply str (for [y (range n) :when (not= y (/ (dec n) 2))] (nth s y))))))))", "problem": 115, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn __ [i]\n  (let [[l r] (split-at (/ (count (str i)) 2) (str i))]\n    (letfn [(sum [s] (reduce + (map #(Integer/parseInt (str %)) s)))]\n    (if (odd? (count (str i)))\n    (= (sum (butlast l)) (sum r))\n      (= (sum l) (sum r))))))", "problem": 115, "user": "4fa719c0e4b081705acca1bf"}, {"code": "(fn [n]\n  (let [digits+48 (map int (str n))\n        half (quot (count digits+48) 2)]\n    (= (apply + (take half digits+48))\n       (apply + (take-last half digits+48)))))", "problem": 115, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn [n]\n  (let [strnum (str n)\n        strlen (count strnum)\n        left (take (int (/ strlen 2)) strnum)\n        right (drop (Math/ceil (/ strlen 2)) strnum)\n        sum #(apply + (map int %))]\n          (= (sum left) (sum right))))", "problem": 115, "user": "502a5e59e4b09e8f859a9fbc"}, {"code": "(fn [i] (let [a (str i) x (/ (count a) 2) f #(apply + (map int (take % %2)))] (= (f x a) (f x (reverse a)) )))", "problem": 115, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn is-balanced? [n]\n  (let [get-digits (fn [x] (map #(- (int %) (int \\0)) (seq (str x))))\n        digits (get-digits n)\n        half (quot (count digits) 2)\n        fh (take half digits)\n        lh (take-last half digits)]\n    (= (apply + fh) (apply + lh))))", "problem": 115, "user": "501c1492e4b086d93747d180"}, {"code": "#(let [s ((fn digits [n]\r\n            (if (pos? n) (cons (mod n 10) (digits (quot n 10))))) %)\r\n       k (/ (count s) 2)\r\n       r (reverse s)]\r\n   (= (reduce + (take k s)) (reduce + (take k r))))", "problem": 115, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [s]\n  (let [stringn (Integer/toString s)\n        scope (int (/ (count stringn) 2))\n        r (subs stringn (- (count stringn) scope))\n        l (subs stringn 0 scope)]\n  (=\n    (reduce +\n      (map #(Integer/parseInt (. % toString)) l))\n    \n    (reduce +\n      (map #(Integer/parseInt (. % toString)) r)))))", "problem": 115, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "problem": 115, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn [in]\n  (let [sum (fn [s] (->> s seq (map #(- (int %) 48)) (reduce +)))\n        inStr (str in)\n        size (Math/floor (/ (count inStr) 2))\n        left (take size inStr)\n        right (take-last size inStr)]\n    (= (sum left) (sum right))))", "problem": 115, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "(fn balanced? [n]\n  (letfn [(digits0 [x b]\n            (loop [x x, d '()]\n              (if (zero? x) (cons 0 d)\n                  (recur (int (/ x b))\n                         (cons (mod x b) d)))))\n          (digits [x b]\n            (let [d (digits0 x b)]\n              (if (= d '(0)) d (rest d))))]\n    (let [d (vec (digits n 10))]\n      (= (reduce + (subvec d 0 (int (/ (count d) 2))))\n         (reduce + (subvec d (int (+ 1/2 (/ (count d) 2)))))))))", "problem": 115, "user": "4e8338d6535db62dc21a62d3"}, {"code": "#(let [n (map int (str %)) i (count n) c (quot i 2) a apply\n        l (take c n) r (drop  (- i c) n)]\n  (= (a + l) (a + r)))", "problem": 115, "user": "4dada16fc9a9d6ed2699dc57"}, {"code": "(fn [x]\r\n  (let [digits \r\n          (map #(- (int %) 48) (str x))\r\n        n (count digits)\r\n        nside (quot n 2)\r\n        sum (fn [a] (reduce + a))\r\n        ]\r\n    (do (println \"digits: \" digits \"\\nN: \" n \", nside: \" nside)\r\n    (= (sum (take nside digits))\r\n       (sum (take nside (reverse digits)))))))", "problem": 115, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn b [n]\n  (let [s (map #(str %) (str n)) \n\t\t\tc (count s) \n\t\t\tto-take (if (odd? c) (/ (dec c) 2) (/ c 2))\n\t\t\tf (map #(Integer/parseInt %) (take to-take s))\n\t\t\tl (map #(Integer/parseInt %) (take-last to-take s))\n\t\t\tsym (= f (reverse l))\t\n\t\t\t]\n\n\t\t(prn f l to-take)\n\t\t(if (or (= c 1) (= (reduce #(+ %1 %2) f) (reduce #(+ %1 %2) l) ))\n\t\ttrue\n\t\tfalse\n\t\t)\n\t\t\n\n\t)\n\n)", "problem": 115, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn [n]\n  (let [s (->> n str (map str) (map read-string))\n        f #(reduce + (take (quot (count s) 2) %))]\n    (= (f s) (f (reverse s)))))", "problem": 115, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn balanced?- [n]\n  \"115. Write a function which accepts an integer n, and returns true                                                                                                  \n  iff n is balanced.\"\n  (letfn [(digits [n] (if (< n 10) [n] (conj (digits (quot n 10)) (rem n 10))))]\n    (let [d (digits n)\n    left (take (/ (count d) 2) d)\n\t  right\t(take-last (/ (count d) 2) d)]\n      (= (reduce + left) (reduce + right)))))", "problem": 115, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn [n] (let [s (str n)\r\n              l (count s)\r\n              h (int (/ l 2))\r\n              f (subs s 0 h)\r\n              r (subs s (- l h))\r\n              m #(apply + (map int %))]\r\n          (= (m f) (m r))))", "problem": 115, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "#(let [s (str %) \n       c (count s) \n       s (split-at (/ c 2) s) \n       s (if (even? c) \n           s \n           [(butlast (s 0)) (s 1)])] \n   (= (set (s 0)) (set (s 1))))", "problem": 115, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn bn [num]\n(let [s (str num)]\n   (let [[a b] (-> s count (/ ,,, 2) int (split-at ,,, s))]\n     (->> (map - (map int a) (reverse (map int b)))\n          (apply +)\n          zero?))))", "problem": 115, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn [x]\n          (let [s ((fn f [n] (if (= n 0)\n                            []\n                            (conj (f (quot n 10)) (mod n 10)))) x)\n                n (/ (count s) 2)]\n            (= (apply + (take n s)) (apply + (take-last n s)))))", "problem": 115, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn f [n]\n  (letfn [(digits \n  [n]\n    (->> (str n)\n         (map #(- (int %) (int \\0)))))]\n  (let [d (digits n)]\n    (let [c (quot (count d) 2)]\n      (= (apply + (take c d)) (apply + (take c (reverse d)))))\n      )))", "problem": 115, "user": "503917a0e4b088a6a14ca763"}, {"code": "(fn [n]\n  (let [d (map #(Integer/parseInt (str %)) (.toString n))\n        l (take (/ (count d) 2) d)\n        r (take-last (/ (count d) 2) d)]\n    (= (apply + l) (apply + r))))", "problem": 115, "user": "5012ec0ae4b0c87326002230"}, {"code": "(fn [x]\r\n  (let [ds (->> (iterate #(* 10 %) 1)\r\n            (map #(quot x %))\r\n            (take-while #(> % 0))\r\n            (map #(mod % 10)))\r\n        n (count ds)\r\n        [l r] (split-at (quot n 2) ds)\r\n        r' (drop (mod n 2) r)]\r\n    (== (apply + l) (apply + r'))))", "problem": 115, "user": "50479524e4b0371827a27bc4"}, {"code": "#(let [s (str %) n (count s) a (quot n 2) b (if (odd? n) (inc a) a)]\r\n(= (apply + (map int (take a s ))) (apply + (map int (drop b s)))))", "problem": 115, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn [x]\n  (let [s (str x)\n        n (count s)\n        h (quot n 2)\n        [l r] (if (even? n) (split-at h s) [(subs s 0 (inc h)) (subs s h)])]\n    (= (reduce + (map int l))\n       (reduce + (map int r)))))", "problem": 115, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [n]\n  (letfn [(digits [n] (map #(Character/getNumericValue %) (str n)))\n          (sum [ds] (reduce + ds))]\n    (let [ds (digits n)\n          h (quot (count ds) 2)]\n      (= (sum (take h ds)) (sum (take h (reverse ds)))))))", "problem": 115, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn [n]\r\n    (let [d (map #(- (int %) 48) (str n))\r\n          c (-> d count (/ 2))\r\n          f (take (Math/ceil c) d)\r\n          s (drop (Math/floor c) d)]\r\n      (= (apply + f) (apply + s))))", "problem": 115, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(letfn [(digits [n]\n          (let [radix 10]\n            (reverse\n             (map\n              #(int (rem % radix))\n              (take-while (complement zero?)\n                          (iterate #(quot % radix)\n                                   n))))))\n        (done? [next-sum]\n          (= 2 (count next-sum)))\n        (next-sum [[left-sum right-sum the-rest]]\n          (if (empty? the-rest)\n            [left-sum right-sum]\n            (let [next-left (+ left-sum (first the-rest))\n                  next-right (+ right-sum (last the-rest))\n                  next-rest (rest (butlast the-rest))]\n              [next-left next-right next-rest])))\n        (figure-sums [val]\n          (last \n           (take-while (complement done?)\n                       (iterate next-sum [0 0 (digits val)]))))]\n  (fn [val]\n    (let [[left-sum right-sum _] (figure-sums val)]\n      (= left-sum right-sum))))", "problem": 115, "user": "5014754de4b094324338f8e5"}, {"code": "(fn [n]\r\n  (cond (< n 0) false\r\n        (< n 9) true\r\n        :else (letfn [(int-to-seq [n] (map #(- (int %) 48) (seq (str n))))]\r\n                (let [s (vec (int-to-seq n))\r\n                      len (count s)\r\n                      m (int (/ len 2))\r\n                      l (subvec s 0 m)\r\n                      r (subvec s (+ m (if (even? len) 0 1)))]\r\n                  (= (reduce + l)\r\n                     (reduce + r))))))", "problem": 115, "user": "4dc97aec535d5973398f9284"}, {"code": "#(let[s(map int(str%))a apply](= 0(a +(a map -(split-at(/(count s)2)s)))))", "problem": 115, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn balanced? [n]\n  (let [digits (map int (str n))\n        half   (quot (count digits) 2)\n        left   (take      half digits)\n        right  (take-last half digits)]\n    (= (apply + left) (apply + right))))", "problem": 115, "user": "50586354e4b06522596eba78"}, {"code": "(fn [n]\r\n  (let [s (str n)\r\n    i (/ (count s) 2)\r\n    l (take i s)\r\n    r (take i (reverse s))\r\n    sum (partial reduce +)\r\n    mp (zipmap \"0123456789\" (range 10))]\r\n    (= (sum (map mp l)) (sum (map mp r)))))", "problem": 115, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn [n]\n  (let [d (str n)\n        h (int (/ (count d) 2))]\n    (= (reduce + (map int (take h d)))\n       (reduce + (map int (take h (reverse d)))))))", "problem": 115, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [n] \n  (let [x (seq (str n))\n        y (int (/ (count x) 2))]\n    (= (apply + (map (comp read-string str) (take y (reverse x))))\n       (apply + (map (comp read-string str) (take y x))))))", "problem": 115, "user": "50435689e4b034ff00315d21"}, {"code": "(fn [x]\n  (let [coll  (->> x\n                   (str)\n                   (re-seq #\".\")\n                   (map #(Integer/parseInt %)))\n        n     (int (/ (count coll) 2))\n        left  (take n coll)\n        right (take-last n coll)]\n    (= (reduce + left) (reduce + right))))", "problem": 115, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn [n]\n  (let [s (str n) c (/ (count s) 2) l (take (int c) s) r (drop (int (+ 0.5 c)) s)]\n    (= (reduce + (map int l)) (reduce + (map int r)))))", "problem": 115, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [n]\n  (let [s (vec (map (comp read-string str) (str n)))]\n(loop [li 0 ri (dec (count s)) lt 0 rt 0]\n(if (> li ri)\n(= lt rt)\n(recur (inc li) (dec ri) (+ lt (s li)) (+ rt (s ri)))))))", "problem": 115, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "(fn [n]\n  (let [digits (map #(- (int %) 48) (str n))\n        k (int (/ (count digits) 2))]\n    (= (apply + (take k digits))\n       (apply + (take k (reverse digits))))))", "problem": 115, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn [n] \n  (let [s (vec (str n)) \n        l (count s) \n        o (quot l 2)] \n    (== \n      (reduce #(+ %1 (int %2)) 0 (subvec s 0 o)) \n      (reduce #(+ %1 (int %2)) 0 (subvec s (- l o) l)))))", "problem": 115, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn [x]\r\n    (let [x (map int (str x))\r\n          t (int (/ (count x) 2))\r\n          a (apply + (take t x))\r\n          b (apply + (take t (reverse x)))]\r\n      (= a b)))", "problem": 115, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn [n] (let [s (str n)\n               c (count (str n))]\n           (if (> c 1)\n             (= 1 (count (distinct (map (fn [x] (apply + x))\n                                        (map (partial map int) [(subs s 0 (quot c 2)) (subs s (+ (quot c 2) (if (> (rem c 2) 0) 1 0)))])))))\n             true)))", "problem": 115, "user": "5047a03ee4b0ec70b3ef8d8d"}, {"code": "(fn [n]\n  (let [s (str n) l (int (/ (count s) 2))]\n    (letfn [(ssn [sn] (apply + (map #(- (int %) (int \\0)) (take l sn))))]\n      (= (ssn s) (ssn (reverse s))))))", "problem": 115, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn [x]\n  (let [s (map #(- (int %) 48) (seq (str x)))\n        n (quot (count s) 2)\n        f #(apply + (take n %))]\n    (= (f s) (f (reverse s)))))", "problem": 115, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn [n]\n  (let [l (count (str n))\n        h (quot l 2)\n        [l r] (partition (+ h (rem l 2)) h (map #(- (int %) (int \\0)) (str n)))]\n    (= (apply + l) (apply + r))))", "problem": 115, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "(fn [n] (let [v (map #(- (int  %) (int \\0)) (str n))]\n           (apply = (map #(apply + %) (map #(first (split-at (/ (count %) 2) %)) (list v (reverse v)))))))", "problem": 115, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn balanced? [x]\n  (let [col (map #(Character/getNumericValue %) (seq (str x)))\n        fh (take (quot (count col) 2) col)\n        sh (drop (+ (mod (count col) 2) (quot (count col) 2)) col)]\n  (= (reduce + fh) (reduce + sh))))", "problem": 115, "user": "50645e12e4b007509339a58a"}, {"code": "(fn [n]\n  (let [digs (vec (map (comp read-string str) (str n)))\n        nd (int (/ (count digs) 2))\n        firsthalf (subvec digs 0 nd)\n        secondhalf (subvec (vec (reverse digs)) 0 nd)]\n    (= (apply + firsthalf) (apply + secondhalf))))", "problem": 115, "user": "50427899e4b0add3005c0fc2"}, {"code": "#(let [s (str %) c (int (/ (count s) 2))\n      sum (fn [x] (reduce + (map (comp read-string str) x)))]\n   (= (sum (take c s)) (sum (take-last c s))))", "problem": 115, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn [n]\n    (let [digits (map (comp read-string str) (str n))\n          d (quot (count digits) 2)]\n      (apply = (map #(apply + %) [(take d digits) (take d (reverse digits))]))))", "problem": 115, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn balance [x]\r\n  (let [s (str x)]\r\n    (let [ [a b c] ( partition-all (quot (count s) 2) s) seta (set a)]\r\n      (if c\r\n        (= seta (set (concat (rest b) c)))\r\n        (= seta (set b))))))", "problem": 115, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn bn [x]\n  (let [s (str x) \n\t\t  c (count s)\n\t\t  split (split-at (/ c 2) s)\n\t\t  left (if (odd? c) (butlast (first split)) (first split))\n\t\t  right (second split)\n\t\t  sumN (fn [z] (apply + (map #(Integer/parseInt (str %)) z)))]\n\t\t(= (sumN right) (sumN left))\n\t)\n)", "problem": 115, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn [n]\n    (let [digits (map #(- (int %) (int \\0)) (str n))\n          mid (int (/ (count digits) 2))\n          [left right] (split-at mid digits)\n          ;; maybe discard middle, if count was odd:\n          right (if (= (count left) (count right)) right (rest right))]\n      (= (reduce + left) (reduce + right))))", "problem": 115, "user": "50763574e4b0a894bb95bf3d"}, {"code": "(fn [n]\r\n  (let [s (map #(. Integer parseInt (str %)) (str n))\r\n        l (/ (count s) 2)\r\n        s-left (take l s)\r\n        s-right (take l (reverse s))\r\n        sum1 (reduce #(+ %1 %2) 0 s-left)\r\n        sum2 (reduce #(+ %1 %2) 0 s-right)]\r\n    (= sum1 sum2)))", "problem": 115, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn [s]\n  (let [xs (map int (str s)) h (quot (count xs) 2)]\n    (= \n      (reduce + (take h xs))\n      (reduce + (take h (reverse xs)))\n    )\n  )\n)", "problem": 115, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn balanced? [n]\n  (letfn\n    [(to-int [c] (- (int c) 48))]\n    (let [s (str n)\n          c (count s)\n          lh (map to-int (take (quot c 2) s))\n          rh (map to-int (drop (+ (quot c 2) (if (odd? c) 1 0)) s))]\n      (= (apply + lh) (apply + rh)))))", "problem": 115, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn [n]\n  (let\n      [s (str n),\n       toDigits (fn [s] (map #(- (int %) (int \\0)) (seq s))),\n       cnt (count s),\n       middleA (if (even? cnt) (/ cnt 2) (+ (/ cnt 2) 1)),\n       middleB (if (even? cnt) middleA (- middleA 1)),\n       firstHalf (toDigits (subs s 0 middleA)),\n       secondHalf (toDigits (subs s middleB cnt))]\n    (= (reduce + firstHalf) (reduce + secondHalf))))", "problem": 115, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "#(let [lst (map read-string (map str (str %)))\nc (count lst)\nc2 (quot c 2)]\n(= (reduce + (take c2 lst)) \n(reduce + (take-last c2 lst))))", "problem": 115, "user": "508bed64e4b0be79e5b189cf"}, {"code": "(fn [n]\n  (letfn [(sum-it [nums]\n            (reduce #(+ %1 (- (int %2) (int \\0))) 0 nums))]\n    (let [s (Integer/toString n)\n          hl (/ (count s) 2)\n          h1 (take hl s)\n          h2 (take hl (reverse s))]\n      (= (sum-it h1) (sum-it h2)))))", "problem": 115, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn f [n]\n  ((fn [n]\n    (if (< (count n) 2) true\n      (let [mid (int (/ (count (str n)) 2))\n            left (take mid n)\n            right (take mid (reverse n))]\n         (or \n           (= left right)\n           (= left (reverse right))))))\n  (str n)))", "problem": 115, "user": "4f3242bae4b0d6649770a08f"}, {"code": "(fn [n]\n  (let [digs (map #(Integer/parseInt (str %)) (str n))          \n        [left right] (split-at (count digs) \n                          (interleave digs digs))] \n    (== (apply + left) (apply + right)))\n)", "problem": 115, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn balanced? [n]\n  (letfn [(get-half-seq [num-seq]\n            (take (/ (count num-seq) 2) num-seq))\n          (get-nums [num-str-seq]\n            (map read-string (map str num-str-seq)))\n          (sum [nums]\n            (reduce + nums))]\n    (= (sum (get-nums (get-half-seq (str n))))\n      (sum (get-nums (get-half-seq (reverse (str n))))))))", "problem": 115, "user": "4fa17b00e4b0dcca54ed6d5f"}, {"code": "(fn [n]\n  (let [s (str n)\n        d (mapv #(Integer. (str %)) s)\n        lh (quot (count d) 2)\n        bh (- (count d) lh)\n        l (reduce + (take bh d))\n        r (reduce + (drop lh d))]\n    (= l r)))", "problem": 115, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn balance-of-n [n]\n  (let [s (str n)\n        [f r] (split-at (quot (count s) 2) s)\n        a (group-by identity f)\n        b (group-by identity (if (not= (count f) (count r)) (rest r) r))]\n    (and (every? (fn [[k v]] (= v (b k))) a)\n         (every? (fn [[k v]] (= v (a k))) b))))", "problem": 115, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn balance [n]\n  (let [s (seq (str n)) ]\n    (if (= (count s) 1) \n      true\n      (let [s-p (split-at (quot (count s) 2) s)\n            left (first s-p)\n            right (second s-p)\n            rf (fn [acc x] (+ acc (Integer/parseInt (str x))))\n            left-sum (reduce rf 0 left)\n            right-sum (reduce rf 0 (if (odd? (count right) ) right (rest right)))]\n        (if (= left-sum right-sum ) true false)))))", "problem": 115, "user": "50783762e4b0fc74642bff67"}, {"code": "#(let[s (map int (str %))           \n            f (fn[x] (apply + (take (/ (count s) 2)  x)))]\n             (= (f s) (f (reverse s))))", "problem": 115, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn [num]\n  (let [xs (map (fn [d] (-> d str Integer/parseInt)) (str num))\n        f (fn [l] (apply + (take (/ (count xs) 2) l)))]\n    (= (f xs) (f (reverse xs)))))", "problem": 115, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn balanced-num? [n]\n  (let [cs (str n)\n\t      c (count cs)]\n\t      (if (= c 1)\n\t\t  true\n\t\t  (let [num->sum (fn [cs]\n            (reduce +\n\t\t          (map #(-> %\n\t\t                    str\n\t\t                    Integer/parseInt) cs)))\n            h (quot c 2)\n\t\t       [ls rs] (split-at h cs)\n\t\t       [ls2 rs2] (if (even? c)\n\t\t\t   [ls rs]\n\t\t\t   [ls (rest rs)])]\n\t\t\t   (= (num->sum ls2) (num->sum rs2))))))", "problem": 115, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn [n] (let [d (loop [x n d []] (if (> x 0) (recur (quot x 10) (conj d (rem x 10))) d)) c (quot (count d) 2)] (= (apply + (take c d)) (apply + (take c (reverse d))))))", "problem": 115, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn [n]\r\n  (if (zero? n)\r\n    true\r\n    (let [l ((fn [n r]\r\n         (if (zero? n)\r\n\t\t r\r\n\t\t (let [t (quot n 10)\r\n\t\t       o (mod n 10)]\r\n\t\t   (recur t (cons o r))))) \r\n\t     n nil)\r\n\t  n (quot (count l) 2)]\r\n      (= (set (take n l)) (set (take n (reverse l)))))))", "problem": 115, "user": "507437c2e4b054001656acd0"}, {"code": "(fn [n]\n  (let [digits (re-seq #\".\" (str n))\n        cnt (count digits)\n        fh (take (quot cnt 2) digits)\n        sh (drop (if (even? cnt) (quot cnt 2) (inc (quot cnt 2))) digits)\n        sum (fn [ds] (apply + (map read-string ds)))]\n    (= (sum fh) (sum sh))))", "problem": 115, "user": "504c8165e4b09724c857af31"}, {"code": "(fn balanced? [n]\n  (let [digits (map #(Integer/parseInt (.toString %)) (.toString n))\n        num-digits (count digits)\n        half   (int (/ num-digits 2))\n        left   (take half digits)\n        right  (drop (- num-digits half) digits)\n        sum #(reduce + %)]\n    (= (sum left) (sum right))))", "problem": 115, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [i]\n  (let [n (->> i str (map #(Integer/parseInt (str %))))\n        c (/ (count n) 2)]\n    (= (apply + (take c n)) \n       (apply + (take c (reverse n))))))", "problem": 115, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "#(let [s (str %) l (count s) m (quot l 2) offset (if (odd? l) 1 0)]\n  (= (set (subs s 0 m)) (set (subs s (+ offset m) l))))", "problem": 115, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn [x]\n  (let [y (map #(Character/getNumericValue %) (str x))\n        z (int (/ (count y) 2))]\n    (= (apply + (take z y))\n       (apply + (take-last z y)))))", "problem": 115, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn balanced? [n]\n    (let [str-seq (map str (seq (str n)))\n          middle-pos (/ (inc (count str-seq)) 2.0)\n          to-int #(Integer. %)\n          sum-seq #(reduce + (map to-int %))\n          left-sum (sum-seq (take (dec (Math/ceil middle-pos)) str-seq))\n          right-sum (sum-seq (drop (Math/floor middle-pos) str-seq))\n          ]\n      (println left-sum right-sum)\n      (= left-sum right-sum)\n      ))", "problem": 115, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [n]\n  (let [s ((fn ds [no] (if (zero? no) () (cons (mod no 10) (ds (quot no 10))))) n)\n        hl (quot (count s) 2)]\n    (apply = (map #(apply + (take hl %)) [s (reverse s)]))))", "problem": 115, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn [s]\n  (let [f (fn [ys] (reduce #(+ % (int %2)) 0 ys))\n        xs (str s)\n        n (count xs)]\n    (=\n      (f (.substring xs 0 (int (/ n 2))))\n      (f (.substring xs (- n (int (/ n 2))) n)))))", "problem": 115, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn [n]\n  (let [n (map #(- (int %) 48) (seq (str n)))]\n  (= \n    (apply + (take (Math/ceil (/ (count n) 2)) n))\n    (apply + (take (Math/ceil (/ (count n) 2)) (reverse n))))))", "problem": 115, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn [n]\n  (let\n    [d (map #(- (int %) (int \\0)) (str n))\n      h (int (/ (count d) 2))]\n    (= \n      (apply + (take h d))\n      (apply + (take h (reverse d))))))", "problem": 115, "user": "4fb1325de4b081705acca276"}, {"code": "(fn [x] \n  (let [k (map #(- (int %1) (int \\0)) (str x))\n        n (quot (count k) 2)]\n    (= (reduce + (take n k)) (reduce + (take n (reverse k))))))", "problem": 115, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [n]\n  (let [split-num\n    (loop [current n results []]\n      (if (= current 0) results\n        (recur (quot current 10) (conj results (rem current 10)))))\n        first-sum #(apply + (take (quot (count %) 2) %))\n        second-sum #(apply + (take-last (quot (count %) 2) %))]\n    (= (first-sum split-num) (second-sum split-num))))", "problem": 115, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn [n] (let [s (str n) c (count s) m (quot c 2) o (if (odd? c) (inc m) m) l (take m s) r (drop o s) f (fn [x] (reduce #(+ % (int %2)) 0 x))] (= (f l) (f r))))", "problem": 115, "user": "5098bcfee4b0cae2931060a1"}, {"code": "(fn bal? [n]\n (let [ds ((fn g [n]\n          (if (zero? n)\n            []\n            (cons (mod n 10) (g (quot n 10)))\n          )\n         ) n)\n      l (quot (count ds) 2)\n      h (take l ds)\n      t (take-last l ds)\n      ]\n      (= (apply + h) (apply + t))\n )\n)", "problem": 115, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn [n]\n  (let [n (map #(- (int %) 48) (str n))\n        l (quot (count n) 2)\n        [a, b] (split-at l n)\n        b (if (zero? (mod (count n) 2)) b (rest b))]\n    (= (apply + a) (apply + b))))", "problem": 115, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn balance? [n]\n  (let [digit-list (fn digit-list [num]\n                     (if (< num 10)\n                       [num]\n                       (cons (rem num 10)\n                             (digit-list (int (/ num 10))))))\n        digits (digit-list n)\n        half (int (/ (count digits) 2))]\n    (= (reduce + (take half digits))\n       (reduce + (take half (reverse digits))))))", "problem": 115, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn [x]\n\t(let [sx (str x) cnt (/ (count sx) 2)  rsx (clojure.string/reverse sx)]\n\t\t(= (reduce + (map #(Integer/parseInt (str %)) (take cnt sx)))\n\t\t   (reduce + (map #(Integer/parseInt (str %)) (take cnt rsx)))\n\t\t)\n\t)\n)", "problem": 115, "user": "50b25f2ce4b03ea88043355f"}, {"code": "(fn [n]\n    (let [s (map int (seq (str n)))\n          half (partial take (/ (count s) 2))]\n      (= (apply + (half s))\n         (apply + (half (reverse s))))))", "problem": 115, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [n]\n  (let [s (map #(- (int %) 48) (str n))\n        l (count s)\n        h (int (/ l 2))]\n    (= (apply + (take h s)) (apply + (drop (- l h) s)))))", "problem": 115, "user": "5027b41ee4b01614d1633fee"}, {"code": "(fn [x] \n  (let [s (map int (str x))]\n    (apply = \n      (map #(apply + (take (quot (count s) 2) %))\n        [s (reverse s)]))))", "problem": 115, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn [n] (let [digits (map #(- (int %) 48)(str n))\n                      halflen (int (/ (count digits) 2))\n                      sum1 (apply + (take halflen digits))\n                      sum2 (apply + (take halflen (reverse digits)))\n                     ]\n                 (= sum1 sum2)))", "problem": 115, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn balanced [x]\n  (let [d (map #(rem % 10) \n               (take-while (complement zero?) \n                           (iterate #(quot % 10) x)))\n        n (count d)\n        half-n (quot n 2)]\n    (= (reduce + (take half-n d))\n       (reduce + (take half-n (reverse d))))))", "problem": 115, "user": "50812debe4b01a93d3f38e4c"}, {"code": "#(let [s (map int (str %))\n        l (quot (count s) 2)\n        f (fn [t] (apply + (take l t)))]\n    (= (f s) (f (reverse s))))", "problem": 115, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn [s] \n  (let [digits (map int (str s))\n        half (int (/ (count digits) 2))\n        sum (partial reduce +)]\n    (= (sum (take half digits)) \n       (sum (take-last half digits)))))", "problem": 115, "user": "500aa15ee4b03d00572d2d76"}, {"code": "#(let [s (map (fn [x] (- (int x) 48)) (str %))                                    \n       p (/ (count s) 2)\n       left (take p s)\n       right (take-last p s)]\n   (= (apply + left) (apply + right)))", "problem": 115, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn[x]\n  (let [xs (map (comp read-string str) (str x))\n        h (/ (count xs) 2)]\n    (= (reduce + (take (if (odd? (count xs)) (dec h) h) xs)) \n       (reduce + (drop h xs)))))", "problem": 115, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn [n]\n  (let [d (->> n\n               str\n               (map int))\n        c (count d)\n        h (int (/ c 2))\n        f (take h d)\n        s (take-last h d)]\n    (= (apply + f)(apply + s))))", "problem": 115, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn bal [xint]\n            (let [s (str xint)\n                  hd (quot (count s) 2)\n                  hu (if (> (rem (count s) 2) 0)\n                       (inc hd)\n                       hd)\n                  a (take hd s)\n                  b (drop hu s)]\n              (= (apply + (map int a)) (apply + (map int b)))))", "problem": 115, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn [x]\n  (let [digits (map (comp #(Integer/parseInt %) str) (str x))\n        half-sum (fn [xs] (reduce + (take (quot (count xs) 2) xs)))]\n    (apply = (map half-sum [digits (reverse digits)]))))", "problem": 115, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn test115-1 [x]\n  (let [s (->> x\n               str\n               (map str)\n               (map #(Integer/valueOf %)))\n        l (quot (count s) 2)\n        sl (take l s)\n        sr (drop (- (count s) l) s)]\n    (= (apply + sl) (apply + sr))))", "problem": 115, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn [num]\n    (let [digits (str num)\n          length (count digits)\n          halfway (/ length 2)\n          [left right] (if (odd? length)\n                         [(subs digits 0 (int halfway))\n                          (subs digits (inc (int halfway)))]\n                         [(subs digits 0 halfway)\n                          (subs digits halfway)])]\n      (apply =\n             (map\n                  (fn [side]\n                    (apply + (map #(Integer/parseInt (str %)) side)))\n                  [left right])\n             )))", "problem": 115, "user": "50dcc5c9e4b02e6ac9592c93"}, {"code": "(fn [s]\n           (let [p (str s) \n                k (quot (count (str s)) 2) \n                sumup (fn [x](->> (map #(read-string (str %)) x)\n                                  (reduce + 0)))\n                ]\n                (= (sumup (take k p))\n                   (sumup (take k (reverse p))))))", "problem": 115, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn [n]\n  (let [digits (map #(Character/getNumericValue %) (str n))\n        n-digits (count digits)\n        left-i (if (even? n-digits) (/ n-digits 2) (/ (dec n-digits) 2))\n        left (apply + (take left-i digits))\n        right (apply + (drop (- n-digits left-i) digits))]\n    (= left right)))", "problem": 115, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "#(let [d (map int (str %))\n      s (quot (count d) 2)]\n  (= (apply + (drop s d))\n     (apply + (drop-last s d))))", "problem": 115, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn [n] (let [s (str n)\n              half (quot (count s) 2)\n              sum-digits (fn [s] (reduce\n                                  #(+ %1 (Integer/parseInt (str %2))) 0 s))\n              s1 (sum-digits (subs s 0 half))\n              s2 (sum-digits (subs s (- (count s) half)))]\n          (if (= s1 s2) true false)))", "problem": 115, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn balanced? [n]\n  (let [digits\n        (loop [n n acc []]\n          (if (= n 0) acc\n              (recur (quot n 10) (cons (rem n 10) acc))\n              ))\n        n-digits (quot (count digits) 2)\n        ]\n    (= (reduce + (take n-digits digits))\n       (reduce + (take n-digits (reverse digits))))\n    ))", "problem": 115, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn [n]\n  (let [nstr (str n)\n        len (count nstr)\n        half-len (int (/ len 2))\n        left (subs nstr 0 half-len)\n        right (subs nstr (- len half-len) len)\n        left-sum (reduce #(+ %1 (Integer/valueOf (str %2))) 0 (seq left))\n        right-sum (reduce #(+ %1 (Integer/valueOf (str %2))) 0 (seq right))\n        ]\n    (= left-sum right-sum)\n    ) ; let\n  ) ; fn", "problem": 115, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(letfn [(int2l [n]\n          (if (< n 10) (list n) (conj (int2l (quot n 10)) (rem n 10))))]\n  (fn balanced-n [n]\n    (let [l (int2l n)\n          cl (count l)\n          m (if (even? cl) (/ cl 2) (/ (dec cl) 2))]\n      (= (apply + (take m l)) (apply + (take m (reverse l)))))))", "problem": 115, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn [n]\n    (let [digs (map #(- (int %) (int \\0)) (seq (str n)))\n          i (quot (count digs) 2)\n          d (rem (count digs) 2)\n          digs1 (take i digs)\n          digs2 (drop (+ i d) digs)]\n      (= (reduce + digs1) (reduce + digs2))))", "problem": 115, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn [s]\n  (let [s (str s)\n        c (count s)\n        [a b] (split-at (/ c 2) (map str s))\n        f (fn [s] (apply + (map read-string s)))]\n    (= (f b) (f (if (odd? c) (butlast a) a)))))", "problem": 115, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn [n]\n  (if (< n 10)\n    true\n    (let [s (str n)\n          h (/ (count s) 2.0)]\n      (let [f #(+ (Integer/parseInt (str %)) (Integer/parseInt (str %2)))]\n        (=\n          (reduce\n            f\n            (take (int h) s))\n          (reduce\n            f\n            (drop h s)))))))", "problem": 115, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn balanced [n]\n  (let [partitioned (partition 1 (str n))\n        sequenced (map #(Integer. (apply str %)) partitioned)\n        length (count sequenced)\n        uneven-half-length (/ (- length 1) 2)\n        [left right] (if (even? length)\n                       (partition (/ length 2) sequenced)\n                       [(take uneven-half-length sequenced)\n                        (take uneven-half-length\n                              (drop (+ uneven-half-length 1) sequenced))])]\n    (= (reduce + left) (reduce + right))))", "problem": 115, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn balanced? [x]\n  (let [digits (into [] (map (comp read-string str) (seq (str x))))\n        c (count digits)\n        mid (int (/ c 2))\n        left (subvec digits 0 mid)\n        right (subvec digits\n                      (if (even? c)\n                        mid\n                        (inc mid)) \n                      c)\n        sum_left (reduce + left)\n        sum_right (reduce + right)]\n    (= sum_left sum_right)))", "problem": 115, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [n]\n  (let [half (fn [s] (take (quot (count s) 2) s))\n        digs (->> n str (map (comp read-string str)))]\n    (= (apply + (half digs)) (apply + (half (reverse digs))))))", "problem": 115, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [n]\n    (let [Sn (str n)\n          len (count Sn)\n          left #(Integer/parseInt \n                 (subs Sn 0 (quot len 2)))\n          right #(Integer/parseInt\n                  (subs Sn (Math/ceil (/ len 2))))\n          digits (fn [n] (map #(- (int %) (int \\0)) \n                              (str n)))]\n      (or (= 1 len) \n          (= (apply + (digits (left))) \n             (apply + (digits (right)))))))", "problem": 115, "user": "50bca033e4b0594b91591c5d"}, {"code": "(fn [n]\n  (let [s (str n), l (count s)]\n    (= (reduce + (map int (take (Math/ceil  (/ l 2)) s)))\n       (reduce + (map int (drop (Math/floor (/ l 2)) s))))))", "problem": 115, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn [n]\n  (let [s (map (zipmap \"0123456789\" (range)) (str n)) m (/ (count s) 2)]\n    (= (reduce + (take m s)) (reduce + (take-last m s)))))", "problem": 115, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [n] (let [ds (map #(- (int %) (int \\0)) (str n))\n              f #(apply + (take (quot (count ds) 2) %))]\n          (= (f ds) (f (reverse ds)))))", "problem": 115, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn balanced-number? [n]\n  (let [numbers (->>\n                  n\n                  str\n                  seq\n                  (map #(- (int %) (int \\0)))\n                  )\n        size (count numbers)\n        mid (/ (dec size) 2)\n        [left right] (split-at mid numbers)]\n    (let [right (if (< (count left) (count right))\n                  (rest right)\n                  right)]\n      (= (apply + left) (apply + right)))))", "problem": 115, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "(fn [n]\n    (let [ digits #(map read-string (rest (clojure.string/split (str %1) #\"\")))\n           l (digits n)\n           c (count l) \n           t (int (/ c 2)) ]\n      (cond\n        (= 0 (mod c 2))\n          (= (apply + (take t l)) \n             (apply + (drop t l)))\n        :else\n          (= (apply + (take t l)) \n             (apply + (drop (inc t) l)\n        )))))", "problem": 115, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn [n]\n  (let [digs (map #(Integer/parseInt (str %)) (str n))\n        l (count digs)\n        half (quot l 2)\n        front (take half digs)\n        back (take half (reverse digs))]\n    (= (reduce + front) (reduce + back))))", "problem": 115, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "#(let [coll (map int (str %))\n       n (/ (count coll) 2)]\n   (= (apply + (take n coll))\n      (apply + (take n (reverse coll)))))", "problem": 115, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [num]  (let [coll (map #(int %) (str num))        len (Math/floor (/ (count coll) 2))]    (= (apply + (take len coll))       (apply + (take-last len coll)))))", "problem": 115, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "#(let [s (str %) r (reverse s) c (/ (count s) 2) i (fn [x] (set (take c x)))] (= (i s) (i r)))", "problem": 115, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn [n]\n  (letfn [(ntl [n] (if (zero? n) '() (cons (rem n 10) (ntl (int (/ n 10))))))]\n    (let [l (ntl n) h (take (quot (count l) 2) l) t (take (quot (count l) 2) (reverse l))]\n      (= (apply + h) (apply + t)))))", "problem": 115, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn [n] (let [s (str n) f #(apply + (map int (% (/ (count s) 2) s)))] (= (f take) (f take-last))))", "problem": 115, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn [n]\n  (let [d (map int (str n))]\n    (apply = (map #(apply + (take (/ (count d) 2) %))\n                  [d (reverse d)]))))", "problem": 115, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn[z] ((fn [l] (= 0 (apply + (take (quot (count l) 2) (map - l (reverse l)))))) (map int (str z))))", "problem": 115, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn ba [n]\n  (let [s (map #(- (int %) (int \\0))  (seq (str n)))\n        half (int (/ (count s) 2))\n        ]\n  \t;(=  s (reverse s))\n        (= (apply + (take half s))  (apply + (take half (reverse s))))))", "problem": 115, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn bal [n]\n  (let\n    [s (str n)\n     half (int (/ (count s) 2))\n     left (take half s)\n     right (take-last half s)\n     to-int #(- (int %) 48)\n     sum-side #(apply + (map to-int %))]\n    (= (sum-side left) (sum-side right))))", "problem": 115, "user": "50217818e4b00bba4502f7a7"}, {"code": "(fn [n] (let [s (map #(Integer/valueOf (str %)) (str n)) l (count s) h (/ (if (even? l) l (dec l)) 2)] \n                        (= (reduce + 0 (take h s)) (reduce + 0 (drop (- l h) s))) \n                   ))", "problem": 115, "user": "510d3dc6e4b078ea71921132"}, {"code": ";maximental - nice, ummel - interesting\n(fn [x]\n   (let [d (map #(- (int %) 48) (seq (str x)))\n         l (int (/ (count d) 2))\n         ]\n     (=  \n        (apply + (take l d)) \n        (apply + (take l (reverse d))))))", "problem": 115, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn [s] (letfn [(ds [l] (reduce #(str (+ (Integer/parseInt %1) (Integer/parseInt %2))) l))] (let [fs (re-seq #\"\\d\" (str s))] (if (=(count fs)1) true (= (ds (take (quot (count fs) 2) fs)) (ds (take-last (quot (count fs) 2) fs)))))))", "problem": 115, "user": "510931ede4b0c71f76895663"}, {"code": "(fn balanceN2 [N]\n  (let [myvec ((fn [num] (map #(new Integer (str %)) (str num))) N) conta (count myvec) contamig (mod conta 2)\n        m1 (quot conta 2)]\n    (cond\n        (= 1 conta) true\n        (= 0 contamig) (= (reduce + (take m1 myvec)) (reduce + (drop m1 myvec)))\n        (= 1 contamig) (= (reduce + (take (inc m1) myvec)) (reduce + (drop m1  myvec)))\n        :else false\n        )\n    )\n  )", "problem": 115, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn [n]\n  (let [s (str n)\n        c (count s)  \n        m (int (/ c 2))]\n    (letfn [(cs [s1]\n                    (reduce + (map #(int %) s1)))]\n      (= (cs (take m s)) (cs (take m (reverse s)))))))", "problem": 115, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn [n]\n  (let [digits (map (comp int read-string str) (str n))\n\tsize (/\t(count digits) 2)\n\tsum-front (apply + (take size digits))\n\tsum-back (apply + (take size\t(reverse digits)))]\n    (= sum-front sum-back)))", "problem": 115, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(fn [x]\n  (let [digits (map (zipmap \"0123456789\" (range)) (str x))\n        n2 (/ (count digits) 2)]\n    (= (apply + (take n2 digits))\n       (apply + (take-last n2 digits)))))", "problem": 115, "user": "510db6cde4b078ea71921145"}, {"code": "(fn [n]\n  (let [s (str n)\n        ct (count s)\n        btm (.substring s 0 (/ ct 2))\n        top (if (even? ct) (.substring s (/ ct 2)) (.substring s (/ (inc ct) 2)))]\n    (= (apply + (map #(Character/getNumericValue %) btm)) (apply + (map #(Character/getNumericValue %) top)))))", "problem": 115, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn [n]\n   (let [half (fn [s] (map #(read-string (str %)) (subs s 0 (quot (count s) 2))))\n         sum #(reduce + %)]\n     (= (sum (half (str n))) (sum (half (apply str (reverse (str n))))))))", "problem": 115, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn [num]\n   (let [sn (map (comp read-string str) (seq (str num)))]\n     (= (reduce + (take (Math/floor (/ (count sn) 2)) sn))\n        (reduce + (nthrest sn (/ (count sn) 2))))))", "problem": 115, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn [n]\n  (let [s (str n)\n        half-len (/ (count s) 2)\n        char-to-int #(- (int %) (int \\0))\n        sum-half #(->> (take half-len %)\n                       (map char-to-int)\n                       (apply +))]\n    (= (sum-half s) (sum-half (reverse s)))))", "problem": 115, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn [n]\n  (let [d (map #(Integer/parseInt (str %)) (seq (.toString n)))\n        l (int  (/ (count d) 2))]\n    (= (reduce + (take l d)) (reduce + (take l (reverse d))))))", "problem": 115, "user": "4e8768f6535dceadca469850"}, {"code": "(fn balanced? [n]\n  (let [digits (map #(Character/getNumericValue %) (str n))\n        lefthalf (take (/ (count digits) 2) digits)\n        righthalf (take-last (/ (count digits) 2) digits)]\n    (= (apply + lefthalf) (apply + righthalf))))", "problem": 115, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn [x]\n  (let [a (zipmap \"0123456789\" (range 0 10))\n        b (str x)\n        c (quot (inc (count b)) 2)]\n    (= (apply + (map a (take c b)))\n       (apply + (map a (take-last c b))))))", "problem": 115, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn [n]\n  (let [s (str n)\n        halflen (quot (count s) 2)]\n    (letfn [(sumdigits [chs]\n                       (reduce #(+ %1 (Integer/parseInt (str %2))) 0 chs))]\n      (= (sumdigits (take halflen s))\n         (sumdigits (take halflen (reverse s)))))))", "problem": 115, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn baln [x]\n  (let [s (.toString x),\n        pv (quot (count s) 2)]\n    (or (= (take pv s) (drop (inc pv) s))\n        (= (seq s) (reverse s)))))", "problem": 115, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn [n]\n  (let [digits (map #(- (int %) 48) (str n))\n        num-digits (count digits)\n        half-num-digits (quot num-digits 2)]\n    (=\n     (reduce + (take half-num-digits digits))\n     (reduce + (take half-num-digits (reverse digits))))))", "problem": 115, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn balanced [i]\n  (let [n (count (str i))]\n    (cond\n     (= n 1) true\n     (even? n) ((fn [[s1 s2]] (= (apply + (map #(read-string (str %)) s1)) (apply + (map #(read-string (str %)) s2))))[(take (/ n 2) (str i)) (drop (/ n 2) (str i))])\n     :else ((fn [[s1 s2]] (= (apply + (map #(read-string (str %)) s1)) (apply + (map #(read-string (str %)) s2))))[(take (/ (dec n) 2) (str i)) (drop (inc (/ (dec n) 2)) (str i))]))))", "problem": 115, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(letfn\n  [(digits [num]\n     (if (= num 0) [0]\n       (loop [num num ds ()]\n         (if (> num 0)\n           (recur (quot num 10) (conj ds (rem num 10)))\n           (vec ds)))))]\n  (fn [x]\n    (let [ds (digits x)\n          cnt (count ds)]      \n        (= (apply + (take (quot cnt 2) ds))\n           (apply + (drop (- cnt (quot cnt 2)) ds))))))", "problem": 115, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn p115 [n]\n  (let [s (str n)\n        c (count s)\n        half-len (quot c 2)\n        left-half (take half-len s)\n        right-half (take-last half-len s)\n        sum-digits (fn [cseq]\n                    (reduce +\n                      (map #(Integer/parseInt (str %)) cseq)))]\n  (= (sum-digits left-half) (sum-digits right-half))))", "problem": 115, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn [n] (let [s (->> (str n) (map #(Integer. (str %))))\n              h (/ (count s) 2)\n              l (apply + (take h s))\n              r (apply + (take h (reverse s)))]\n          (= l r)))", "problem": 115, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [n]\n  (letfn [ (split-number [x] \n            (let [l (map int (str x)) \n                  s (quot (count l) 2)]\n              (list (drop s l)\n                  (drop-last s l)))) ]\n    (apply = (map #(reduce + %) (split-number n)))))", "problem": 115, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn [number]\n   (let [num-vector\n         ((fn [num]\n\t\t\t\t\t   (loop [result [] divider num ]\n\t\t\t\t\t     (if (= 0 divider)\n\t\t\t\t\t        (vec (reverse result))\n\t\t\t\t\t        (recur (conj result (mod divider 10))\n\t\t\t\t\t               (int (/ divider 10))\n\t\t\t\t\t               )        \n\t\t\t\t\t        )                  \n\t\t\t\t\t     )\n\t\t\t\t\t   ) number ) ]    \n     (cond\n      (= 1 (count num-vector)) true\n      (odd? (count num-vector)) (let [first-vec (subvec num-vector 0 (int (/ (count num-vector) 2)))\n                                      second-vec (subvec num-vector (+ 1 (int (/ (count num-vector) 2))))\n                                      ]                                  \n                                  (= (reduce + first-vec) (reduce + second-vec))\n                                  )\n       :else (let [first-vec (subvec num-vector 0 (/ (count num-vector) 2))\n                                      second-vec (subvec num-vector (/ (count num-vector) 2))\n                                      ]                                   \n                                  (= (reduce + first-vec) (reduce + second-vec))\n                                  )        \n       )\n     \n     )   \n   )", "problem": 115, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn bal [n]\n  (let [sn    (seq (str n))\n        snc   (quot (count sn) 2)\n        left  (take snc sn)\n        right (drop (if (= 0 (mod (count sn) 2)) snc (inc snc)) sn)\n        to-sum (fn [xs] (reduce + (map (comp #(Integer/parseInt %) str) xs)))]\n    (= (to-sum left) (to-sum right))))", "problem": 115, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn [number]\n     (let [digits (second (first (take 1 (drop-while #(> (first %) 0) (iterate #(vector (quot (first %) 10) (cons (mod (first %) 10) (second %))) [number []])))))\n           half (quot (count digits) 2)]\n       (= (reduce + (take half digits)) (reduce + (take half (reverse digits))))))", "problem": 115, "user": "513a4babe4b067e25a345eca"}, {"code": "#(let [s (map int (str %))\n       n (count s)]\n   (= (apply + (take (/ n 2) s))\n    (apply + (take-last (/ n 2) s))))", "problem": 115, "user": "4f1bb9d8535d64f60314647d"}, {"code": "(fn balanced? [n]\n  (letfn [(to-digits [n]\n                     (map #(- (int %) (int \\0))  (seq (str n))))]\n    (let [vn (to-digits n)\n          svn (split-at (/ (count vn) 2) vn)]\n      (= 0 (reduce  + (map #(- %1 %2) (first svn) (second svn)))))))", "problem": 115, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [n] (let [string (str n) c2s #(Integer/parseInt (str %))]\n    (loop [lsum 0 rsum 0 s string]\n      (if (empty? s) (= lsum rsum)\n        (recur (+ lsum (c2s (first s))) (+ rsum (c2s (last s))) (rest (butlast s)))\n      )\n    )\n))", "problem": 115, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn qq [x] \n  (let [n (int (/ (count (str x)) 2))] \n     (if (= \n          (reduce #(+ (read-string (str (nth (str x) %2))) %1) 0\n             (range (dec (count (str x))) (- (count (str x)) n 1) -1))\n\n            (reduce #(+ (read-string (str (nth (str x) %2))) %1) 0 (range n))  \n\t\t\t)\n       \n         true\n      false\n      ))\n  )", "problem": 115, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn [n]\n  (letfn [\n          (lh [sn]\n            (map\n              #(- (int %) 48)\n              (take (quot (count sn) 2) sn)))]\n    (=\n      (reduce + (lh (str n)))\n      (reduce + (lh (reverse (str n)))))))", "problem": 115, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn balanced? [x] \n  (let [sval (str x)\n        half (int (/ (count sval) 2))\n        left-half (take half sval)\n        right-half (take half (reverse sval))]\n    (= (apply + (map int left-half)) \n       (apply + (map int right-half)))))", "problem": 115, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn balanced?[x]\n  (let [digits (fn [x] (map (zipmap \"0123456789\" (range 10)) (str x)))\n        d (digits x)\n        n (count d)\n        h (quot n 2)\n        p1 (take h d)\n        p2 (drop (- n h) d)\n        ]\n    (= (reduce + p1) (reduce + p2))))", "problem": 115, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "#(= (set (take (quot (count (str %)) 2) (str %)))\n    (set (take (quot (count (str %)) 2) (reverse (str %)))))", "problem": 115, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn balanced-number? [n] (let [digits (map #(Character/digit % 10) (str n)) numdigits (count digits) halfsize (if (even? numdigits) (/ numdigits 2) (inc (int (/ numdigits 2))))] (if (= (reduce + (take halfsize digits)) (reduce + (drop (- numdigits halfsize) digits))) true false)))", "problem": 115, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn [n] (letfn\n         [(split-even [xs] (let\n                             [i (/ (count xs) 2)\n                              j (if (= i (int i)) i (dec i))]\n                             [(take j xs) (drop i xs)]))\n          (sum-sides [ys] (map (fn [y] (reduce + (map #(-> % str Integer/parseInt) y))) ys))]\n          (apply = (sum-sides (split-even (str n))))))\n          ; if n < 10, then both sides are the empty list, and this succeeds", "problem": 115, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn b [n]\n  (let [a (map #(Character/getNumericValue %) (str n))\n        aa (int (/ (count a) 2))]\n    (= (reduce + (take aa a)) (reduce + (take aa (reverse a))))))", "problem": 115, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn [n]\n  (letfn [(genhalf [chs] (reduce + (map #(Integer/parseInt %) (map str chs))))]\n    (= (genhalf (take (quot (count (str n)) 2) (seq (str n))))\n       (genhalf (drop (quot (inc (count (str n))) 2) (seq (str n)))))))", "problem": 115, "user": "512eb723e4b0b740abc5982b"}, {"code": "(letfn [(digits ([n] (vec (digits n ()))) ([n acc] (if (= n 0) acc (recur (quot n 10) (cons (mod n 10) acc)))))\n        (split [v] (let [point1 (/ (count v) 2)\n                         point2 (+ point1 (mod (count v) 2))]\n                     [(subvec v 0 point1) (subvec v point2)]))]\n  (fn b [n]\n    (let [[l r] (split (digits n))]\n      (= (reduce + r) (reduce + l)))))", "problem": 115, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn                                                                                                                                   \n    [n]\n    (let [s (str n)\n          l (quot (count s) 2)\n          r (rem (count s) 2)]\n         (= (sort (take l s)) (sort (drop (+ r l) s)))))", "problem": 115, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn [e]\n  (let \n    [x (str e)\n     half (quot (count x) 2)\n     toi #(Integer/parseInt (str (or % 0)))] \n  (if (> half 0)\n    (->> [(take half x) (take-last half x)]\n         (map (fn [[a b]] (+ (toi a) (toi b))))\n         (reduce =))\n    true)))", "problem": 115, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn [i] (let [c (map #(- (int %) 48) (str i))\n            f #(take (quot (count %) 2) %)]\n        (= (apply + (f c)) (apply + (f (reverse c))))))", "problem": 115, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn [n]\n  \t(let [nums (map #(Integer/parseInt %) (map str (str n)))\n          half-cnt (int (/ (count nums) 2))]\n      (= (reduce + (take half-cnt nums)) (reduce + (take half-cnt (reverse nums))))))", "problem": 115, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn [n] (apply = (map #(reduce + %) (let [x (map int (str n)) z (count x) q quot c (q z 2) d (q (inc z) 2)] (partition c d x)))))", "problem": 115, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn [n]\n\n  (let [ ns (str n)\n        x (take (+ (quot (count ns) 2) (rem (count ns) 2)) ns)\n        y (drop (quot (count ns) 2) ns) ]\n\n    (=  (reduce #(+ % (- (int %2) 48)) 0  x)  (reduce #(+ % (- (int %2) 48)) 0  y)) \n\n   ))", "problem": 115, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn balanced? [n]\n  (letfn [(char-to-int [c] (- (int c) 48))\n          (split-number [n] (map char-to-int (str n)))\n          (half [coll] (int (/ (count coll) 2)))\n          (halfs [xs] [(take (half xs) xs) (take-last (half xs) xs)])]\n    (apply = (map #(apply + %) (halfs (split-number n))))))", "problem": 115, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "(fn [n]\n  (let [num (str n)\n        m (Math/floor (/ (count num) 2))\n        first-half (into #{} (take m num))\n        second-half (into #{} (take-last m num))]\n    (= first-half second-half)))", "problem": 115, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn [n]\n\t(let [s (str n)\n\t      c (count s)\n\t      b (bit-shift-right c 1)]\n\t  (= (reduce + (map (comp read-string str) (take b s)))\n\t     (reduce + (map (comp read-string str) (drop (- c b) s))))))", "problem": 115, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn[n]\n  (let [\n    s (str n) \n    len (.length s) \n    l (subs s 0 (quot len 2)) \n    r (subs s (+ (quot len 2) (mod len 2)))] \n    (= (sort l) (sort r))))", "problem": 115, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn balanced? [n]\n  (let [numbers (map read-string (re-seq #\"\\d\" (str n)))\n        mid (/ (count numbers) 2)]\n  (= (apply + (drop (Math/ceil mid) numbers)) \n     (apply + (take (Math/floor mid) numbers)))))", "problem": 115, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn [n]\n  (letfn [(left-right [n]\n                 (let [nums (str n) cnt (count nums) half (int (/ cnt 2.0))]\n                   (if (odd? cnt)\n                     (vector (take half nums) (drop (inc half) nums))\n                     (vector (take half nums) (drop  half nums)) )))\n                      \n          (get-sum [l]\n                   (reduce (fn [ret this] (+ ret (- (int this) 48))) 0 l))]\n    (let [ls (left-right n)\n          l (get-sum (first ls)) \n          r (get-sum (last ls))]\n      (= l r))))", "problem": 115, "user": "513cb853e4b0b86ece9f322b"}, {"code": "#(let [n (/ (count (str %)) 2)]\n   (= (reduce + (take n (map (comp read-string str) (str %))))\n      (reduce + (take-last n (map (comp read-string str) (str %))))))", "problem": 115, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn balanced [n]\n  (if (< n 10)\n    true\n    (let [nstr (str n)]\n      (let [ndigits (int (/ (count nstr) 2))]\n        (let [l (map #(Integer/parseInt (str %)) (take ndigits nstr)),\n              r (map #(Integer/parseInt (str %)) (reverse (take ndigits (reverse nstr))))]\n          (= (apply + l) (apply + r)))))))", "problem": 115, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn balanced? [n]\n  (let [digits (->> (iterate #(quot % 10) n) (take-while pos?) (map #(mod % 10)))\n        half (quot (count digits) 2) ]\n    (= (->> (take half digits) (reduce +)) (->> (take-last half digits) (reduce +)))\n    )\n  )", "problem": 115, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn balanced [d]\n      (let [digits (map int (str d))\n            size (count digits)\n            takenum (quot size 2)\n            dropnum (+ takenum (mod size 2))\n            l (take takenum digits)\n            r (drop dropnum digits)\n            sum-l (reduce + l)\n            sum-r (reduce + r)]\n          (= sum-l sum-r))\n  )", "problem": 115, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn [n]\n  (let [d (->> (str n) (map #(- (int %) 48)))\n        c (count d)\n        l (quot c 2)\n        r (if (even? c) l (inc l))]\n    (= (apply + (take l d)) (apply + (drop r d)))))", "problem": 115, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn balanced [ival]\n  (let [vecmaker (fn [ival]\n                   (loop [iv ival\n                          builder []]\n                     (if (< iv 1)\n                       builder\n                       (recur (unchecked-divide-int iv 10)\n                         (conj builder (unchecked-remainder-int iv 10))))))\n        sum (fn [iseq]\n              (reduce + iseq))\n        intvec (vecmaker ival)\n        ct (count intvec)]\n    (if (= 1 ct)\n      true\n      (if (= 0 (mod ct 2))\n        (= (sum (subvec intvec 0 (/ ct 2)))\n          (sum (subvec intvec (/ ct 2) ct)))\n        (= (sum (subvec intvec 0 (/ (- ct 1) 2)))\n          (sum (subvec intvec (/ (+ ct 1) 2) ct)))))))", "problem": 115, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn [x]\n  (let [digits (map #(Integer/parseInt %) (map str (str x)))\n        half (quot (count digits) 2)]\n    (= (reduce + (take half digits)) (reduce + (take half (reverse digits))))))", "problem": 115, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn [x]\n  (let [digits (map int (str x))\n        n (count digits)]\n    (= (apply + (take (Math/ceil (/ n 2)) digits)) (apply + (drop (Math/floor (/ n 2)) digits)))))", "problem": 115, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [x]\n  (let [lst (map #(bigint (.toString %)) (.toString x))\n        len (quot (count lst) 2)]\n    (= (apply + (drop len lst))\n       (apply + (drop-last len lst)))))", "problem": 115, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn p115[x]\n  (let [s (str x)\n\t\tf (fn [si] (reduce #(+ %1 (int %2)) 0 (take (quot (count si) 2) si)))]\n    (= (f s)\n\t\t(f (reverse s)))))", "problem": 115, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn [x] \n  (let [digitsum #(apply + (map (fn [e] (Integer/parseInt (str e))) %))\n        f #(== (digitsum %) (digitsum %2))\n        s (str x) \n        n (count s) \n        nh (/ n 2)] \n    (if (even? n) \n      (f (take nh s) (drop nh s)) \n      (f (take (int nh) s) (drop (inc (int nh)) s)) )))", "problem": 115, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn balanced? [n]\n  (letfn [(decimal-seq [n]\n            (if (zero? n)\n              []\n              (conj (decimal-seq (quot n 10)) (mod n 10))))]\n    (let [digits (decimal-seq n)\n          cnt (quot (count digits) 2)]\n      (if (zero? n)\n        true\n        (= (apply + (take cnt digits)) (apply + (take-last cnt digits)))))))", "problem": 115, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn [v]\n  (let [z (loop [v v r []]\n            (if (< v 10) (cons v r)\n              (recur (quot v 10) (cons (rem v 10) r))))]\n    (= \n     (apply + (take (int (/ (count z) 2)) z))\n     (apply + (drop (/ (count z) 2) z)))))", "problem": 115, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn [num]\n  (letfn [(str-sum [s]\n            (apply + (map #(Integer/parseInt (.toString %)) s)))]\n    (let [num-s (.toString num) len (quot (count num-s) 2)]\n      (= (str-sum (take len num-s)) (str-sum (take-last len num-s))))))", "problem": 115, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [x]\n  (let [y (map #(- (int %) 48) (vec (str x)))\n        ly (count y)\n        hly (int (/ ly 2))]\n    (= (apply + (take hly y)) (apply + (take-last hly y)))))", "problem": 115, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn [n]\n  (let [asSeq (map int (str n))\n        c (quot (count asSeq) 2)\n        part1 (take c asSeq)\n        part2 (take c (reverse asSeq))]\n    (= (reduce + part1) (reduce + part2))))", "problem": 115, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn [n] \n  (let [c (map int(str n))\n        l (count c)\n        m (/ l 2)]\n    (= 0 \n       (apply + (map - (take m c) \n                  (take-last m c))))))", "problem": 115, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "#(let [digits (map (fn [d] (- (int d) (int \\0))) (str %))\n       n (count digits) \n       half (/ n 2)\n       sum-left (reduce + 0 (take half digits))\n       sum-right (reduce + 0 (take-last half digits))]\n   (= sum-left sum-right))", "problem": 115, "user": "5199ca05e4b022efe2b3ba88"}, {"code": "(fn is-balance?\n  [n]\n  (let [s (str n)\n        l (.length s)\n        q (quot l 2)]\n    (cond (= l 1) true\n          :else (let [xs (split-at q (into [] s))\n                          ls (first xs)\n                          rs (if (even? l)\n                               (second xs)\n                               (rest (second xs)))]\n                      (= (reduce + (map #(Integer/valueOf (str %)) (into [] ls)))\n                         (reduce + (map #(Integer/valueOf (str %)) (into [] rs))))))))", "problem": 115, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn [n]\n  (let [s (map #(- (int %) 48) (str n))\n        n (quot (count s) 2)]\n    (= (apply + (take n s)) (apply + (take n (reverse s))))))", "problem": 115, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn [n]\n(let [x (map int ((comp seq str) n))] \n(apply = (map #(reduce + (take (int (/ (count x) 2)) %) ) [ x (reverse x)])\n  )))", "problem": 115, "user": "517945dce4b0684c1c981a43"}, {"code": "#(letfn [(digits [x]\n          (loop [xs '()\n                 remainder x]\n            (if (zero? remainder)\n              xs\n              (recur (conj xs (mod remainder 10)) (quot remainder 10)))))\n        (msplit [xs]\n          (let [cnt (count xs)\n                size (quot cnt 2)]\n            [(take size xs) (drop (- cnt size) xs)]))]\n  (let [[left right] (map (partial apply +) (msplit (digits %)))]\n    (= left right)))", "problem": 115, "user": "5102ac9de4b00c483ae176fa"}, {"code": "(fn [n]\n  (let [strn (str n)\n        upto (int (/ (count  strn) 2))\n        from (if (odd? (count strn)) (inc upto) upto)\n        l (map int (take upto strn))\n        r (map int (drop from strn))]\n    (= (apply + l) (apply + r))))", "problem": 115, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn [x]\n  (let [m (zipmap (str \"0123456789\") (range))\n        d (map #(m %) (str x))\n        l (/ (count d) 2)]\n    (= (apply + (take l d)) \n       (apply + (take-last l d)))))", "problem": 115, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn [n]                                                                                                 \n   (apply = \n          (map                                                                                                \n             (fn [col]\n               (apply + (map #(- (int %) (int \\0)) col)))  \n             (map \n              #(take (quot (count %) 2) %) \n              [(seq (str n)) (reverse (seq (str n)))]) \n           )\n          )  \n  )", "problem": 115, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [n]\n  (if (< n 10)\n    true\n  \t(let [nseq (seq (str n)) len (quot (count nseq) 2) s1 (take len nseq) s2 (take-last len nseq)]\n      (= (reduce #(+ %1 (int %2)) 0 s1)\n         (reduce #(+ %1 (int %2)) 0 s2)))))", "problem": 115, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn [n] (let [h (count (str n))\n               y (seq (str n))\n               z (map #(Integer/parseInt %) (map str y))] \n\n           (cond (= 1 h) true\n                 (odd? h) (= (reduce + (take (/ (- h 1) 2) z))\n                             (reduce + (take (/ (- h 1) 2) (reverse z))))\n                 :else (= (reduce + (take (/ h 2) z))\n                          (reduce + (take (/ h 2) (reverse z)))))))", "problem": 115, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn [n]\n  (let [g (map second (rest (take-while #(not= % [0 0]) (iterate (fn [[q r]] [(quot q 10) (rem q 10)]) [n 0]))))\n        d (/ (count g) 2)\n        l (apply + (take d g))\n        r (apply + (take-last d g))\n                        \n        ]\n    (= l r)\n    )\n  )", "problem": 115, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn [x] \n  (let [n (str x) \n        l (quot (count n) 2)] \n    (apply = \n           (map #(reduce + 0 (take l %)) \n                ((juxt identity reverse) (map #(- (int %) (int \\0)) n))))))", "problem": 115, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn [n]\n  (let [s (str n)\n        f (fn [x] \n            (reduce #(+ % (- (int %2) 48)) \n                    0 (x (/ (count s) 2) s)))] \n    (= 0 (- (f take) (f take-last)))))", "problem": 115, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn [n]\n  (let [s (map (comp read-string str) (str n))\n        l (int (/ (count s) 2))]\n    (= (reduce + (take l s)) (reduce + (take l (reverse s))\n                               ))))", "problem": 115, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn [i](let [i (map int (str i)) c (/ (count i) 2)]\n(= (apply + (take c i)) (apply + (take-last c i)))))", "problem": 115, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn [x]\n  (let [s (str x)\n        n (quot (count s) 2)]\n    (letfn [(sumd [v]\n                  \n                  (reduce #(+ (int %) (int %2)) v))]\n      (if (= 0 n)\n        true\n\t\t    (= \n\t\t      (sumd (take n s)) \n\t\t      (sumd (take-last n s))\n\t\t       )\n      )\n      )\n    )\n  )", "problem": 115, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn [x]\n    (let [n (str x)\n          c (quot (count n) 2)\n          f (fn [a]\n              (apply +\n                (map \n                  #(- (int %) (int \\0))\n                  a)))]\n      (= (f (take c n))\n        (f (take-last c n)))))", "problem": 115, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn [n]\n      (loop [l 0, r 0, s (str n)]\n        (if (> 2 (count s))\n          (= l r)\n          (recur (+ l (int (first s)))\n                 (+ r (int (last s)))\n                 (rest (butlast s))))))", "problem": 115, "user": "50f48298e4b004d364930527"}, {"code": "(fn [n]\n  (let [digits (->> n (str) (map str) (map read-string))\n        n-digits (/ (count digits) 2)\n        left-digits (take n-digits digits)\n        right-digits (take-last n-digits digits)]\n    (= (reduce + left-digits) (reduce + right-digits))))", "problem": 115, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn bal [in]\n  (let [s (seq (str in))     \n        n (count s)\n        hn (int (/ n 2))\n        intval (fn [_char] (- (int _char) 48))]\n    (= (reduce + (map intval (take hn s))) \n       (reduce + (map intval (take hn (reverse s)))))))", "problem": 115, "user": "51805d22e4b0e3fc13e244df"}, {"code": "#(letfn [(f [a b] (apply + ( map (comp read-string str) (take (/ a 2) b))) )] \n   (let [s (str %) r (reverse s) c (count s) ns (f c s) rs (f c r) ] (= ns rs)))", "problem": 115, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn [x] (let [s (str x)\n              l (/ (count (str x)) 2)\n              f (partial reduce #(+ % (int %2)) 0)] \n                (=  (f (subs s 0 l))\n                    (f (subs (clojure.string/reverse s) 0 l)))))", "problem": 115, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "#(let [\n    xs (for [i (str %)] (- (int i) 48))\n    sz (quot (count xs) 2)\n    s1 (apply + (take sz xs))\n    s2 (apply + (take-last sz xs))\n    ] (= s1 s2))", "problem": 115, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn balance-of-n [n]\n  (let [n-digits (map #(Character/digit % 10) (str n))]\n    (if (= 1 (count n-digits))\n      true\n      (= (reduce + (take (quot (count n-digits) 2) n-digits))\n         (if (even? (count n-digits))\n           (reduce + (drop (quot (count n-digits) 2) n-digits))\n           (reduce + (drop (inc (quot (count n-digits) 2)) n-digits)))))))", "problem": 115, "user": "51d360d1e4b099f3b6acddff"}, {"code": "#(let [s (str %) l (quot (count s) 2) f (fn [y xs] (reduce (fn [acc x] (+ acc (int x))) 0 (take y xs)))] (= (f l s) (f l (reverse s))))", "problem": 115, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "(fn [x]\n  (let [s (str x) aj (fn [l] (apply + (map #(Character/getNumericValue %) l)))]\n    (if (=\n         (aj (take\n              (if (even? (count s))\n                (/ (count s) 2)\n                (dec (/ (count s) 2)))\n              s))\n         (aj (nthrest s (/ (count s) 2))))\n    true false)))", "problem": 115, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn [n]\n  (let [nums (map #(Character/getNumericValue %) (str n))\n        len (count nums)\n        i (int (/ len 2))\n        [xs ys] (split-at i nums)\n        sum (partial reduce +)\n        sum-xs (sum xs)\n        sum-ys (sum (if (even? len) ys (rest ys)))]\n    (= sum-xs sum-ys)))", "problem": 115, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "(fn balanced? [n] \n  (let [ls (seq (str n))\n        l  (count ls)\n        left (if (even? l) (take (quot l 2) ls ) (take (inc (quot l 2)) ls))\n        right (drop (quot l 2) ls) \n        digit-sum (fn [xs] (reduce #(+ %1 (- (int %2) 48) ) 0 xs))] \n    (= (digit-sum left) (digit-sum right))))", "problem": 115, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "(partial (fn [l r n]\n  (if (< n 10) (= l r)\n      (letfn [(to-d [n] (loop [n n a []] (if (= 0 n) a (recur (quot n 10) (cons (rem n 10) a)))))\n\t      (to-n [ds] (reduce #(+ (* 10 %) %2) 0 ds))]\n        (let [d (to-d n)]\n          (recur (+ l (first d)) (+ r (last d)) (to-n (rest (butlast d)))))))) 0 0)", "problem": 115, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [n]\n   (let [int-string (str n)\n         half-num-digits (quot (count int-string) 2)\n         sum #(apply + (map int (% half-num-digits int-string)))]\n      (= (sum take) (sum take-last))))", "problem": 115, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn [n]\n    (let [c (count (str n)) \n          s (map #(Character/digit % 10) (str n))\n          sum #(apply + (take (Math/floor (/ c 2)) %))]\n      (= (sum s) (sum (reverse s))))\n)", "problem": 115, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn [n]\n  (let [xs (map #(- (int %) 48) (str n))\n        len (quot (count xs) 2)]\n    (= (reduce + (take len xs))\n       (reduce + (take len (reverse xs))))))", "problem": 115, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn\n  [n]\n  (let [digits (map #(Integer/parseInt (str %)) (seq (str n)))]\n    (let [half (int (/ (count digits) 2))\n          left (take half digits)\n          right (take-last half digits)]\n      (= (reduce + left)\n         (reduce + right)))))", "problem": 115, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn [n]\n  (let [sn (map #(mod (inc (- (int %) (int \\1))) 10) (str n))\n        cnt (count sn)\n        cn (-> sn count (/ 2) int)]\n    (= (apply + (take cn sn))\n       (apply + (drop (- cnt cn) sn)))))", "problem": 115, "user": "51f9527fe4b09be9c177e549"}, {"code": "(fn [n]\n  (loop [n n out []]\n    (if (zero? n)\n      (let [half (quot (count out) 2)]\n        (= (apply + (take half out)) \n           (apply + (take half (reverse out)))))\n      (recur (quot n 10) (conj out (rem n 10))))))", "problem": 115, "user": "4e7c51d0535db169f9c796bd"}, {"code": "(fn [d]\n  (let [n (str d)\n        i (quot (count n) 2)\n        f ( fn [n] (reduce + (map #(- (int %) 48) n)))] \n    (= (f(take i n)) (f(take i (reverse n))))))", "problem": 115, "user": "50e90813e4b033b0e80d11e7"}, {"code": "(fn [n]\n   (#(= (first %) (second %)) \n        (map #(reduce + %)\n        (#(conj \n           (list (take (quot (count %) 2) %))\n           (take-last (quot (count %) 2) %)) \n           (map #(read-string (str %)) (seq (str n)))))))", "problem": 115, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn [num]\n  (let [digits-of (fn [x] (map #(mod % 10) (take-while #(> % 0) (iterate #(quot % 10) x))))\n        digits (digits-of num)\n        half (quot (count digits) 2)\n        left (apply + (take half digits))\n        right (apply + (take-last half digits))]\n    (= left right)))", "problem": 115, "user": "51fa8dfee4b0f1313d4689df"}, {"code": "(fn [num]\n  (let [digits (str num)\n        half-length (Math/floor (/ (count digits) 2))\n        left-half (take half-length digits)\n        right-half (take half-length (reverse digits))\n        sum-digits #(->> %\n                         (map (fn [n] (- (int n) (int \\0))))\n                         (reduce +))]\n    (= (sum-digits left-half)\n       (sum-digits right-half))))", "problem": 115, "user": "4eae5fe4535d7eef30807325"}, {"code": "#(or (< % 10)\n     (let [s (str %)\n           half (/ (count s) 2)]\n       (->> (partition (int (Math/ceil half)) (int (Math/floor half)) s)\n            (map (partial map int))\n            (map (partial reduce +))\n            (apply =))))", "problem": 115, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [n]\n    (let [sn (str n)\n          cn (quot (count sn) 2)\n          [ ln rrn ] (split-at cn sn)\n          rn (if (= (count rrn) cn) rrn (rest rrn))\n          sum #(+ %1 (read-string (str %2)))\n          l  (reduce sum 0 ln)  \n          r  (reduce sum 0 rn)\n          ]\n          ( = l r)\n    ))", "problem": 115, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "#(let [d (map int (str %))\n        n (quot (count d) 2)\n        f (fn [x] (apply + (take n x)))]\n    (= (f d)\n       (f (reverse d))))", "problem": 115, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "(fn [x]\n  (let [s (str x), n (count s), i (int (Math/ceil (/ n 2)))]\n    (= (apply + (map #(Character/getNumericValue %) (take i s)))\n       (apply + (map #(Character/getNumericValue %) (drop (- n i) s))))))", "problem": 115, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [a]\n  (letfn [(digits [b] (vec (map #(Integer/parseInt (str %))  (seq (str b)))))\n          (check-balanced [c]\n            (let [num (int (Math/floor (/ (count c) 2)))]\n              (if (odd? (count c))\n                (= (reduce +' (subvec c 0 num)) (reduce +' (subvec c (inc' num) (count c))))\n                (=(reduce +' (subvec c 0 num)) (reduce +' (subvec c num (count c)))))))]\n    (check-balanced (digits a))))", "problem": 115, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn balanced? [N]\n  (let [nums (map #(- (int %) 48) (seq (str N)))\n        [L R] (split-at (/ (count nums) 2) nums)]\n    (if (> (count L) (count R))\n      (= (reduce + (butlast L)) (reduce + R))\n      (= (reduce + L) (reduce + R)))))", "problem": 115, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn [n]\n    (let [s (map int (str n))\n          c (quot (count s) 2)]\n      (= (apply + (take c s))\n         (apply + (take-last c s)))))", "problem": 115, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(letfn [(f [x]\n           (->> x str (map #(- (int %) (int \\0)))))]\n  (fn [x]\n\t(let [s (f x)\n          h (-> (count s) (/ 2) (int))]\n      (->> [(take h s) (->> (reverse s) (take h))] \n           (map #(reduce + %)) \n           (reduce =)))))", "problem": 115, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "(fn [n]\n  (let [digit #(Character/getNumericValue %)\n        digits (->> (str n) (map digit))\n        rdigits (reverse digits)\n        halfdigits #(-> (count %) (/ 2) (take %))\n        halfsum #(apply + (halfdigits %))]\n    (= (halfsum digits)\n       (halfsum rdigits))))", "problem": 115, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn [n]\n  (letfn [(sum-str [s] (reduce + (map int s)))\n          (half \n           [s] \n           (let [cnt (count s)\n                 step (if (odd? cnt) 1 0)\n                 sz (int (/ cnt 2))]\n             (partition sz (+ step sz) s)))]\n    (->>\n     n\n     str\n     half\n     (map sum-str)\n     (apply =))))", "problem": 115, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn[n]\n  (let [s (str n) c (-> s count (/ 2) (+ 0.5) int)]\n    (#(= (reduce + (map (comp read-string str) %1))\n          (reduce + (map (comp read-string str) %2)))\n      (take c s)\n      (take c (reverse s)))))", "problem": 115, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn balance-n\n  [n]\n  (let [\n        lst (map #(- (int %) (int \\0)) (str n))\n        len (count lst)\n        half (quot len 2)\n        flag (if (even? len) 0 1)]\n    (= (apply + (take half lst)) (apply + (drop (+ half flag) lst)))))", "problem": 115, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn [n]\n  (let [digits (map (comp read-string str) (str n))\n        len (count digits)\n        half (quot len 2)\n        middle (rem len 2)]\n    (if (< len 2)\n      true\n      (let [lhs-rhs (partition half (+ half middle) digits)]\n        (= (reduce + (first lhs-rhs)) (reduce + (second lhs-rhs)))\n    ))))", "problem": 115, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn [n]\n\t(let [s (str n)\n\t\t\t\tsi (map #(- (int %) (int \\0)) (seq s))\n\t\t\t\tmid (quot (count s) 2)]\n\t\t(= \n\t\t\t(apply + (take mid si))\n\t\t\t(apply + (take mid (reverse si))))))", "problem": 115, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn [n] (let [digits (->> n str (map int) (map #(- % 48)))\n\t\tcnt (count digits)\n\t\thalf-size (quot cnt 2)\n\t\tleft (take half-size digits)\n\t\tsum-of-left (apply + left)\n\t\tright (take half-size (reverse digits))\n\t\tsum-of-right (apply + right)\n\t\t]\n\t(= sum-of-left sum-of-right)))", "problem": 115, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn [n] (let [s (map (comp read-string str) (str n)) m (int (/ (count s) 2))] (= (apply + (take m s)) (apply + (take-last m s)))))", "problem": 115, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn f [n]\n  (let [s (seq (str n))\n        len (quot (count s) 2)\n        l (take len s)\n        r (take len (reverse s))] \n    (= (reduce #(+ %1 (int %2)) 0 l)\n           (reduce #(+ %1 (int %2)) 0 r))))", "problem": 115, "user": "52196842e4b0890f2f822bfa"}, {"code": "(fn [x]\n          (let [n (map #(Integer/parseInt (str %)) (str x))\n                  c (count n)\n                  h (int (/ c 2))]\n            (= (apply + (take h n)) (apply + (take-last h n)))))", "problem": 115, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn bal? [n]\n  (let [xs (map (comp read-string str) (str n))]\n    (= (apply + (take (quot (count xs) 2) xs))\n       (apply + (take-last (quot (count xs) 2) xs)))))", "problem": 115, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "(fn [n]\n  (let [c (map #(Character/getNumericValue %) (str n))\n        half (quot (count c) 2)]\n    (= (reduce + (take half c))\n       (reduce + (nthrest c (if (even? (count c))\n                              half\n                              (inc half)))))))", "problem": 115, "user": "51a91ac2e4b08d8ec191b822"}, {"code": "(fn isbalanced? [x]\n              (let [ y (vec (map (fn[x] (Character/getNumericValue x))(str x)))]\n                (cond\n                  (= 1 (count y)) true\n                  (= (count y) 2) (if (= (first y) (second y)) true false)\n                  (> (count y) 2) ( if ( (comp not zero?) (mod (count y) 2)) (let [z (quot (count y) 2)] \n                                                                                                       (= (reduce + (subvec y 0 z)) (reduce + (subvec y (inc z) (count y)))) \n                                                                                                        ) false))))", "problem": 115, "user": "5225b16de4b0d2f5d1e2c0ed"}, {"code": "(fn [x]\n  (let [splits (map #(Integer/parseInt %) (next (clojure.string/split (str x) #\"\"))) \n        halves-cnt (Math/ceil (/ (count splits) 2))\n        left-half (take halves-cnt splits)\n        right-half (take halves-cnt (reverse splits))]\n    (= (reduce + left-half) (reduce + right-half))))", "problem": 115, "user": "52016690e4b0b2e020a18f0f"}, {"code": "(fn [n]\n  (letfn \n    [(balanced? [coll left right] \n      (if \n        (> 2 (count coll)) \n        (= left right) \n        (balanced?\n          (reverse (rest (reverse (rest coll)))) \n          (+ left (first coll)) \n          (+ right (last coll)))))\n     (digits [n] \n      ((fn helper [n coll] \n        (if \n          (zero? n) \n          coll \n          (helper \n            (quot n 10) \n            (cons (mod n 10) coll)))) \n      n []))]\n    (balanced? (digits n) 0 0)))", "problem": 115, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn [num]\n   (loop [num-seq (map #(Character/digit % 10) (str num)), left 0, right 0]\n     (let [f (first num-seq)\n           l (last num-seq)\n           m (rest (butlast num-seq))\n           left-term (+ left f)\n           right-term (+ right l)]\n\n       (cond (and (empty? m) (= left-term right-term)) true\n             (and (empty? m) (not (= left-term right-term))) false\n             :default (recur m left-term right-term)))))", "problem": 115, "user": "50270618e4b01614d1633feb"}, {"code": "(fn [n]\n  (letfn [(get-digits [num]\n                      (loop [x num result nil]\n    (if (zero? x)\n      result\n      (recur (quot x 10) (cons (rem x 10) result)))))]\n    (let [digits (get-digits n) \n          len (count digits)\n          take-right (if (even? len)\n                       (quot len 2)\n                       (inc (quot len 2)))\n          right-sum (apply + (take take-right digits))\n          left-sum (apply + (take take-right (reverse digits)))\n          ]\n      (= right-sum left-sum))))", "problem": 115, "user": "51857e64e4b0da5a5be3babe"}, {"code": "(fn fun [number]\n  (let [nstring (str number)\n        len (quot (count nstring) 2)]\n    (= (reduce #(+ %1 (int %2)) 0 (take len nstring))\n       (reduce #(+ %1 (int %2)) 0 (take-last len  nstring)))))", "problem": 115, "user": "524025bce4b0ad64fa01030f"}, {"code": "(fn balance-n [n]\n\t(letfn [(digit-separate [num]\n\t\t\t\t(->> (iterate #(quot % 10) num)\n\t\t\t\t     (take-while (complement zero?))\n\t\t\t\t     (map #(rem % 10))\n\t\t\t\t     reverse))]\n\t  (let [sep (digit-separate n)\n\t\thalf-len (-> sep count (/ 2) int)]\n\t    (= (reduce + (take half-len sep))\n\t       (reduce + (take half-len (reverse sep)))))))", "problem": 115, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [x]\n  (let [n (map #(- (int %) 48) (str x))\n        f #(apply + (take (/ (count n) 2) %))]\n        (= (f n) (f (into () n)))))", "problem": 115, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn [n]\n  (if (< n 10) true\n      (let [s (seq (str n))\n            q (quot (count s) 2)\n            l (take q s)\n            r (nthrest s (- (count s) q))]\n        (letfn [(f [x] (reduce #(+ (Character/digit % 10) (Character/digit %2 10)) x))]\n          (= (f l) (f r))))))", "problem": 115, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "#(let [s (map int (str %))\n       h (quot (count s) 2)\n       f (fn [s] (apply + (take h s)))]\n   (= (f s) (f (reverse s))))", "problem": 115, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn [n]\n            (reduce =\n                    (let [i #(Integer. %)]\n                      (map \n                       #(reduce + %)\n                       (map #(map (comp i str) %)\n                            (let [n (str n)\n                                  c (count n)\n                                  d #(split-at % n)]\n                              (if (even? c)\n                                (d (/ c 2))\n                                (let [[a [b & c]] (d (/ (dec c) 2))]\n                                  [a c]))))))))", "problem": 115, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn [x] \n  (let [v (map int (vec (str x))) \n        c (count v) \n        n (bit-shift-right c 1) \n        l (apply + (take n v)) \n        r (apply + (take-last n v))] \n    (= l r)))", "problem": 115, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn balanced? [n]\n  (let [digits (map #(- (int %) 48) (str n))\n        m (count digits)\n        parts (split-at (quot m 2) digits)\n        left (parts 0)\n        right (if (= (count (parts 0)) (count (parts 1))) (parts 1) (rest (parts 1)))]\n    (if (< n 10)\n      true\n      (= (apply + left) (apply + right)))))", "problem": 115, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn is-balanced? \n  [n]\n  (let [s (map #(Integer. (str %)) (str n))\n        size (-> (count s) (/ 2) int)\n        left (apply + (take size s))\n        right (apply + (->> s reverse (take size)))]\n    (= left right)))", "problem": 115, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(fn [n]\n  (let [s (seq (.toString n))\n        s-length (count s)\n        left (take (/ s-length 2) s)\n        right (take-last (/ s-length 2) s)\n        sum-digits (fn [d] (apply + (map (fn [x] (Integer/parseInt (str x))) d)))]\n    (apply = (map sum-digits [left right]))\n    )\n  )", "problem": 115, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn [n] \n  (let [to-digits (fn [k] (into [] (map #(mod (quot k %) 10) \n                                    (take-while #(< 0 (quot k %)) (iterate #(* 10 %) 1) )))) \n\t\thalf-seq #(drop (/ (count %) 2) %)]\n\t  (= (apply + (half-seq (to-digits n))) (apply + (half-seq (reverse (to-digits n)))))))", "problem": 115, "user": "523a9fc9e4b081681ca7adca"}, {"code": "#(let [s (map (fn [d] (Integer. (str d))) (str %))\n       half (quot (count s) 2)]\n   (= (apply + (take half s)) (apply + (take-last half s))))", "problem": 115, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn [n] (let [half (int (/ (count (str n)) 2))\n              left (take half (str n))\n              right (take half (reverse (str n)))] \n          (= (apply + (map #(java.lang.Integer/parseInt (str %)) left)) \n             (apply + (map #(java.lang.Integer/parseInt (str %)) right)))))", "problem": 115, "user": "510c123be4b078ea7192110e"}, {"code": "(fn [n] (let [c (map (comp read-string str) (str n)) l (quot (count c) 2)]\n          (->> [c (reverse c)] (map (partial take l)) (map (partial reduce +)) (apply =))))", "problem": 115, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [x]\n  (letfn\n    [\n     (ds [n]\n         (reduce\n          +\n          (map\n           #(- (int %) (int \\0))\n           n\n           )\n          )\n         )\n     ]\n    (=\n     (ds (take (int (/ (count (str x)) 2)) (str x)))\n     (ds (drop (java.lang.Math/ceil (/ (count (str x)) 2)) (str x)))\n     )\n    )\n  )", "problem": 115, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn [n] \n  (let [s (str n) i (quot (count s) 2) \n        f (partial reduce #(+ %1 (- (int %2) 48)) 0)] \n    (= (f (take i s)) (f (take-last i s)))))", "problem": 115, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn [x]\n    (let [digits  (fn d [x] \n                   (if (> 10 x) \n                     [x]\n                     (conj (d (quot x 10)) (mod x 10))))\n          halflen (fn [s] (quot (count s) 2))\n          cleave  (fn [s] (let [n (halflen s)] [(take n s)(take-last n s)]))\n          sum     (fn [s] (apply + s))]\n      (apply = (map sum (-> x digits cleave)))))", "problem": 115, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn [n]\n  (let [s (str n)\n        l (count s)\n        m (int (/ l 2))\n        left (take m s)\n        right (if (even? l) (drop m s) (drop (+ m 1) s))\n        sum (fn [s] (apply + (map #(Integer/parseInt %) (map str s))))]\n    (= (sum left) (sum right))))", "problem": 115, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn balanced? [n]\n  (let [xs (map (comp read-string str) (str n))\n        l (count xs)]\n    (= (reduce + (take (/ l 2) xs)) (reduce + (take (/ l 2) (reverse xs))))))", "problem": 115, "user": "52606318e4b03e8d9a4a7036"}, {"code": "(fn bal-num [n]\n  (let [digs (map #(Integer. (str %1)) (str n))\n        num_digs (count digs)\n        sub_count (quot num_digs 2)]\n    (= (apply + (take sub_count digs))\n       (apply + (take-last sub_count digs)))))", "problem": 115, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [x]\n    (let [s (map #(- (int %) 48) (str x))\n          c (quot (count s) 2)]\n      (apply = (map #(apply + (take c %)) [s (reverse s)]))))", "problem": 115, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [n]\n\t\t(let [c ((fn g[x]\n\t\t\t\t\t(when (> x 0)\n\t\t\t\t\t  (cons (mod x 10) (g (quot x 10))))) n)\n\t\t\t\tf (#(drop (/ (count %) 2) %) c)\n\t\t\t\tl (#(take (/ (dec (count %)) 2) %) c)]\n\t\t  (= (reduce + f) (reduce + l))))", "problem": 115, "user": "51f2851fe4b0210f90e7454b"}, {"code": "(fn [n]\n  (let [digits (map #(- (int %) (int \\0)) (.toString n))\n        half (quot (inc (count digits)) 2)\n        ]\n    (= (reduce + (take half digits))\n       (reduce + (take half (reverse digits))))))", "problem": 115, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn [n]\n  (let [halves (fn [s]\n                (let [at (/ (count s) 2)\n                      left (Math/floor at)\n                      right (Math/ceil at)]\n                      (vector \n                       (map #(Integer. (str %)) (take left s)) \n                       (map #(Integer. (str %)) (drop right s)))))\n        [left right] (halves (str n))]\n        (= (reduce + left) (reduce + right))))", "problem": 115, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn [x]\n    (let [s      (->> x (iterate #(quot % 10)) (take-while (partial < 0)) (map #(rem % 10)))\n          n      (count s)\n          [l r-] (split-at (quot n 2) s)\n          r      (if (zero? (rem n 2)) r- (rest r-))]\n      (= (apply + l) (apply + r))))", "problem": 115, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [n]\n  (let [s (str n)\n        len (count s)\n        half (quot len 2)\n        step (if (> (mod len 2) 0) (inc half) half)\n        [p1 p2] (partition half step s)\n        n1 (map #(- (int %) (int \\0)) p1)\n        n2 (map #(- (int %) (int \\0)) p2)]\n    (= (apply + n1) (apply + n2))))", "problem": 115, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn [i]\n   (let [s (map #(read-string (str %)) (seq (str i)))\n         aprox (int (quot (count s) 2))]\n     (= (reduce + (take aprox s)) (reduce + (take aprox (reverse  s))) )\n     )\n   )", "problem": 115, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn balanced? [n]\n  (let [digits ((fn get-digits [n]\n                  (loop [len (count (str n))\n                         m n\n                         res '()]\n                    (if (= len 0)\n                      res\n                      (recur (dec len) (quot m 10) (conj res (rem m 10)))))) n)\n        len (count digits)\n        part (split-at (quot len 2) digits)\n        diff (- (count (second part)) (quot len 2))]\n    (= (apply + (first part)) (apply + (drop diff (second part))))))", "problem": 115, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn p115 [n]\n  (let [sn (str n) l (.length sn) hfi (int (/ l 2))\n        ton (fn [bi ei] (apply + (map (comp #(- % 48) int) (char-array (.substring sn bi ei)))))]\n    (= (ton 0 (if (even? l) hfi (inc hfi))) (ton hfi l))))", "problem": 115, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [n] (let [side-sum\n  (fn [x length s e] (loop [curr 1 num x start s end e result 0]\n           (if (> curr end) \n\t\t\t  result \n\t\t\t  (if (> curr start)\n                (recur (inc curr) (quot num 10) start end (+ result (rem num 10)))\n                (recur (inc curr) (quot num 10) start end result)\n\t\t\t  )\n\t\t   )\n\t\t))\n\t\tleft-sum (fn [x length] (side-sum x length (+ (if (odd? length) 1 0) (quot length 2)) length))\n\t\tright-sum (fn [x length] (side-sum x length 0 (quot length 2)))\n\t\tnumber-length (fn [x] (if (= 0 x) 1 (loop [result 0 num x] (if (= 0 num) result (recur (inc result) (quot num 10))))))\n\t\tz (number-length n)\n\t\t]\n\t\t(= (left-sum n z) (right-sum n z))\n\t)\n)", "problem": 115, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn balance-of-n [num]\n\t(letfn [(to-digits [n]\n\t  (loop [acc ()\n\t         remainder n]\n\t    (if (zero? remainder)\n\t      acc\n\t      (recur (conj acc (rem remainder 10)) (quot remainder 10)))))]\n\t  (let [digits (to-digits num)\n         middle (quot (count digits) 2)]\n     (= (apply + (take middle digits)) (apply + (take middle (reverse digits))))\n     )))", "problem": 115, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "#(let [xs (map (comp read-string str) (str %))\n       c (-> xs count (/ 2) int)]\n   (= (apply + (take c xs))\n      (apply + (take c (reverse xs)))))", "problem": 115, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn compare-side-digits [x]\n  (let [s (map #(Integer. (str %)) (str x))\n        l-c (int (/ (count s) 2)) \n        r-c (Math/ceil (/ (count s) 2))]\n    (= (apply + (take l-c s)) \n       (apply + (drop r-c s)))))", "problem": 115, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [n]\n  (let [s (str n)\n        checkLen (-> s count (/ 2) Math/floor)]\n    (= (set (take checkLen s))\n       (set (take-last checkLen s)))))", "problem": 115, "user": "51df825de4b01188f062752b"}, {"code": "(fn [i]\n      (let [input (str i)\n            first-half (subs input 0 (/ (count input) 2))\n            second-half (subs (clojure.string/reverse input) 0 (/ (count input) 2))\n            sum-half (fn [f] (reduce + (map #(Character/getNumericValue %) f)))\n           ]\n        (= (sum-half first-half) (sum-half second-half))\n      )\n    )", "problem": 115, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn [n]\n  (let [half (int (/ (inc (count (str n))) 2))\n        left (take half (str n))\n        right (take-last half (str n))\n        f (fn [x] (apply + (map #(- (int %) 48) x)))]\n    (apply = (map f [left right]))))", "problem": 115, "user": "51e00020e4b01188f0627534"}, {"code": "(fn [ n ]\n  (let [ digits (->> n str seq (map str))\n        len (count digits)\n        half (+ (quot len 2) (rem len 2))\n        back-drop (if (even? len) half (dec half))\n        l (map #(Integer. %) (take half digits))\n        r (map #(Integer. %) (drop back-drop digits))]\n    (= (reduce + l) (reduce + r))))", "problem": 115, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn balance [n]\n  (letfn [(sum [x] (apply + (map #(Integer. %) (re-seq #\"\\d\" (str x)))))]\n    (let [s (str n)]\n      (if (< n 10)\n        true\n        (= (sum (subs s 0 (int (/ (count s) 2))))\n           (sum (subs s (int (/ (inc (count s)) 2)) (count s))))))))", "problem": 115, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn [n]\n   (let [s (map #(int %) (str n)) spl (split-at (quot(count s)2) s)]\n   \t(= (apply + (first spl)) (apply + (if (> (count(last spl))(count(first spl))) (rest(last spl)) (last spl))))\n   )\n   )", "problem": 115, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn [m]\n(let [l (map #(mod % 10) (take-while #(not (= % 0)) (iterate #(int (/ % 10)) m)))\n      n (/ (count l) 2)\n      f (take (int (+ 0.5 n)) l)\n      s (drop (int n) l)]\n  (= (apply + f) (apply + s))\n  ))", "problem": 115, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn balance-of-n [x]\n  (let [ints (map #(Integer/parseInt (str %)) (seq (str x)))\n        c (count  ints)\n        splitPos  (int  (/ c 2))\n        leffy (take splitPos ints)\n        riffy (if (even? c) (drop splitPos ints)  (drop (inc splitPos) ints) )\n        ]\n    (= (reduce + leffy) (reduce + riffy))\n    )\n  )", "problem": 115, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "#(let [dig (->> % str (map int)),\n       len (quot (count dig) 2)]\n   (= (reduce + (take len dig))\n      (reduce + (take-last len dig))))", "problem": 115, "user": "4fe98ddae4b0547ebccb2463"}, {"code": "(fn [x]\n  (let [xs (map #(Integer/parseInt (str %)) (str x))\n        n (int (/ (count xs) 2))]\n    (= (reduce + (take n xs)) (reduce + (take n (reverse xs))))))", "problem": 115, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn [n]\n  (->> n\n     str\n     (re-seq #\".\")\n     (map read-string)\n     ( (juxt identity reverse) )\n     (map #(take (quot (count %) 2) %))\n     (map #(reduce + %))\n     (apply =)))", "problem": 115, "user": "519ef784e4b087743fad2198"}, {"code": "(fn balanced? [n]\n   (let [digs (seq (str n))\n         halfcount (quot (inc (count digs)) 2)\n         left (take halfcount digs)\n         right (drop (- (count digs) halfcount) digs)\n         leftsum (reduce + 0 (map #(Integer. (str %)) left))\n         rightsum (reduce + 0 (map #(Integer. (str %)) right))]\n     (= leftsum rightsum)))", "problem": 115, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn [coll]\n  (let [scoll (str coll)\n        n (quot (count scoll) 2)]\n\t(= (sort (take n scoll)) (sort (take-last n scoll)))))", "problem": 115, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn [n]\n  (let [s (str n)\n        ds #(reduce + (map int %))\n        half (/ (count s) 2)]\n    (= (ds (subs s 0 half)) (ds (subs s (+ half 1/2))))))", "problem": 115, "user": "51e38568e4b0c611d6113e43"}, {"code": "(fn bal [n]\n  (let [s (.toString n)\n        h (quot (.length s) 2)\n        r (apply str (reverse s))\n        a (.substring s 0 h)\n        b (.substring r 0 h)\n        sumd (fn [x] (->> x (map #(Character/getNumericValue %)) (reduce +)))]\n               (= (sumd a) (sumd b))))", "problem": 115, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn balanced? [x] (let [\n    s (map int (.toString x))\n    m (quot (count s) 2)\n    [x y] (split-at m s)\n    z (if (> (count y) (count x)) (rest y) y)\n    ] \n    (= (reduce + x) (reduce + z))))", "problem": 115, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn [n]\n  (let [s (map #(read-string (str %)) (str n))\n       h (quot (count s) 2)]\n    (= (apply + (take h s)) (apply + (take h (reverse s))))))", "problem": 115, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn problem-115 [n]\n  (let [nstr (.toString n)\n        digits-cnt (count nstr)\n        half (if (even? digits-cnt)\n               (/ digits-cnt 2)\n               (/ (dec digits-cnt) 2))\n        left (take half nstr)\n        right (take-last half nstr)]\n    (letfn [(count-digits-sum [str]\n              (apply + (map #(Character/getNumericValue %) (seq str))))]\n      (= (count-digits-sum left)\n         (count-digits-sum right)))))", "problem": 115, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn balance-of-n [n]\n  (letfn[(get-sum\n           [s]\n           (reduce #( + %1 (- (int %2) (int \\0)) ) 0 (subvec s 0 (/ (count s) 2))))]\n    (= (get-sum  (vec(str n)))\n       (get-sum (vec(reverse (str n)))))))", "problem": 115, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn [n]\n  (let [ds (str n)\n        m (/ (count ds) 2)\n        l (take (Math/floor m) ds)\n        r (drop (Math/ceil m) ds)]\n    (letfn [(f [x y]\n               (+ (read-string (str y)) x))]\n      (= (reduce f 0 l) (reduce f 0 r)))))", "problem": 115, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn t [y]                                                                                                            \n   (->> y                                                                                                            \n        str                                                                                                          \n        (count)                                                                                                      \n        (#(+ (quot %  2) (rem % 2)))                                                                                 \n        ((fn [x] [(take x (str y)) (take x (reverse (str y)))]))                                                     \n        ((fn [v] (= (reduce + (map #(- (int %) 48)  (first v)))                                                      \n                    (reduce + (map #(- (int %) 48)  (second v)))                                                     \n                     )                                                                                               \n           ))                                                                                                        \n        ;;#(%)                                                                                                       \n        ))", "problem": 115, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn balance? [n]\n   (letfn [(digits [n]\n             (if (= 0 n) []\n                 (conj (digits (quot n 10)) (mod n 10))))]\n     (let [dn (digits n)]\n       (= (apply + (take (/    (count dn) 2) dn))\n          (apply + (drop (quot  (count dn) 2) dn))))))", "problem": 115, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn [x] (\n\t\t\tlet [\n\t\t\tl (map (fn [y] (Integer/parseInt (str y))) (into [] (str x))) \n\t\t\tc (count l)\n\t\t\tstart (take  (/ (- c (mod c 2)) 2) l)\n\t\t\tend  (drop (/ c 2) l)\n\t\t\ts1 (reduce + start)\n\t\t\ts2 (reduce + end)\n\t\t\t] (= s1 s2) ))", "problem": 115, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "(fn [n] \n  (let [digits (map (comp read-string str) (str n))\n        d (/ (count digits) 2)]\n    (= (apply + (take d digits))\n       (apply + (take-last d digits)))))", "problem": 115, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn [num]\n  (if (< num 10)true\n    (let [vlist (vec (str num)) len (count vlist) lsp (quot len 2) rsp (if (even? len) lsp (inc lsp))  llist (subvec vlist 0 lsp) rlist (subvec vlist rsp len)] \n       (= (apply + (map #(Integer. (str %)) llist)) (apply + (map #(Integer. (str %)) rlist)))\n    )\n  )\n)", "problem": 115, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn\n  [num]\n  (let [s (seq (str num))\n        c (quot (count s) 2)\n        sum-int (fn [x] (reduce + (map #(- (int %) 48 ) x )))]\n    ( =\n      (sum-int (take c s))\n      (sum-int (take-last c s)))))", "problem": 115, "user": "518c5236e4b087e178201de0"}, {"code": "(fn [n]\n  (let [s (str n)\n        x (int (/ (count s) 2))\n        f (comp read-string str)\n        s1 (map f (take x s))\n        s2 (map f (take-last x s))]\n    (= (reduce + s1) (reduce + s2))))", "problem": 115, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn [n]\n  (let [s1 (str n) s2 (reverse s1)\n        half (/ (count s1) 2)\n        h1 (take half s1)\n        h2 (take half s2)]\n    (= (apply + (map (comp read-string str) h1)) (apply + (map (comp read-string str) h2)))))", "problem": 115, "user": "529e8ba9e4b04e0c58e87b99"}, {"code": "(fn [n]\n    (let [s (str n)\n          l (count s)\n          t (/ l 2)\n          left (take t s)\n          right (take-last t s)]\n      (= (reduce + (map int left)) (reduce + (map int right))))\n    )", "problem": 115, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "(fn balanceN [num]\n  (let [is (map read-string (re-seq #\".\" (str num)))\n\tc (/ (count is) 2)\n\ta1 (apply + (take c is))\n\ta2 (apply + (take c (reverse is)))]\n    (= a1 a2)))", "problem": 115, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn balanced? \n    [n]\n    (let [l (map #(Integer/parseInt (str %)) (seq (str n)))\n          f (fn [n s]\n              (= (reduce + (take n l))\n                 (reduce + (take n (reverse l)))))]\n      (if \n        (odd? (count l)) (f (inc (int (/ (count l) 2))) l)\n        (f (int (/ (count l) 2)) l))))", "problem": 115, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn bln? [n]\n  (let [c (map #(- (int %) 48) (seq (str n)))\n        fh (fn [c] (take (quot (count c) 2) c))]\n    (= (apply + (fh c)) (apply + (fh (reverse c))))))", "problem": 115, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "#(letfn [(to-digits \n             [n]\n             (loop [n n\n                      ret []]\n                   (if (= n 0)\n                       ret\n                     (recur (quot n 10) (conj ret (rem n 10))))))]\n   (let [digits (to-digits %)\n         c (count digits)\n         lift (set (take (quot c 2) digits))\n         right (set (take (quot c 2) (reverse digits)))]\n         \n     (= lift right)))", "problem": 115, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "(fn [n]\n    (let [s (.toString n)\n          ls (count s)\n          fh (take (quot ls 2) s)\n          sh (if (even? ls) (drop (count fh) s) (drop (inc (count fh)) s))\n          fh-n (apply + (map #(Integer/parseInt (str %)) fh))\n          sh-n (apply + (map #(Integer/parseInt (str %)) sh))]\n      (= fh-n sh-n)))", "problem": 115, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn [n]\n   (let [coll   (seq (str n))\n         length (int (/ (count coll) 2))\n         char->int #(read-string (str %))\n         left (map char->int (take length coll))\n         right (map char->int (take length (reverse coll)))]\n     (apply = (map #(apply + %)\n                   (list left right)))))", "problem": 115, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "#(let [s (map int (str %))\n       c (quot (count s) 2)]\n  (= (apply + (take c s))\n     (apply + (take-last c s))))", "problem": 115, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn n115 [n]\n  (letfn [(dig-10 [n]\n                  ((fn [n d] \n                     (loop [r n dig (if (zero? n) [0] [])]\n                       (if (zero? r) (reverse dig) (recur (int (/ r d)) (conj dig (mod r d)))))) n 10))]\n    (let [l (dig-10 n) \n          [f b] (map vec (split-at (/ (count l) 2) l)) \n          f (if (odd? (count l)) (pop f) f)]\n      (= (sort f) (sort b)))))", "problem": 115, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn [n]\n  (let [s (map int (str n)) cs (count s)]\n    (= (apply + (take (/ cs 2) s))\n       (apply + (drop (/ (dec cs) 2) s)))))", "problem": 115, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn [n]\n  (let [v (vec (str n))\n        hl (int (/ (count v) 2))]\n    (= 0 (reduce #(+ %1 (int (get v %2)) (- (int (get v (- (count v) %2 1))))) 0 (range hl)))))", "problem": 115, "user": "52b63875e4b0c58976d9ad41"}, {"code": "(fn balanced?\n  [num]\n    (letfn [(c->i [c] (-> c int (- (int \\0))))]\n      (let [digits (->> num str seq (map c->i) vec)\n            head (-> digits count (/ 2) Math/ceil int)]\n        (== (reduce + 0 (take head digits))\n            (reduce + 0 (take-last head digits))))))", "problem": 115, "user": "4ef7a483535dced4c769f258"}, {"code": "(fn [xs]\n  (let [len (count (str xs))\n        xs-digits (map #(Integer/parseInt %) (rest (clojure.string/split (str xs) #\"\")))]\n    (= (apply + (take (quot len 2) xs-digits))\n       (apply + (take-last (quot len 2) xs-digits))\n       )\n    )\n  )", "problem": 115, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn [x]\n       (let [s (map #(- (int %) 48) (str x))\n             c (count s)\n             n (quot c 2)\n             ]\n         (= (apply + (take n s))\n            (apply + (drop (- c n) s)))))", "problem": 115, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn [n]\n    (let [ds (->> n\n                  (iterate #(quot % 10))\n                  (take-while #(> % 0))\n                  (map #(mod % 10))\n                  (into []))]\n      (loop [left 0\n             right 0\n             ds ds]\n        (if (>= 1 (count ds))\n          (= left right)\n          (recur (+ left (first ds))\n                 (+ right (last ds))\n                 (subvec ds 1 (dec (count ds))))))))", "problem": 115, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn [num]\n  (let [digits (fn digits [n]\n                 (if (< n 10)\n                   [n]\n                   (cons (mod n 10) (lazy-seq (digits (quot n 10))))))\n        all-digits (digits num)\n        num-digits (count all-digits)\n        left-digits (take (quot num-digits 2) all-digits)\n        right-digits (take (quot num-digits 2) (reverse all-digits))\n        left-sum (reduce + left-digits)\n        right-sum (reduce + right-digits)]\n    (= left-sum right-sum)))", "problem": 115, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn [num]\n  (let [digits (loop [n num res []]\n                 (if (zero? n)\n                   res\n                   (recur (quot n 10) (cons (rem n 10) res))))\n        num-per (/ (count digits) 2)\n        sum-on (fn [f] (reduce + (f num-per digits)))]\n    (= (sum-on take) (sum-on take-last))))", "problem": 115, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "; Convert the string to an array of digit values, then split in the middle and sum the two ends and compare.\n; The middle digit (if there is one) doesn't matter so we don't need to include this\n(fn [n]\n\t(let [digits (map #(-> % .toString Integer/parseInt) (.toString n)) ; An array of digit values rather than an array of characters\n\t\t\t\td (quot (count digits) 2) ; the number of digits to sum from the start and end\n\t\t\t\tsum #(apply + %)]\n\t\t(= (sum (take d digits)) (sum (take d (reverse digits))))))", "problem": 115, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "(fn [x] \n  (let [s (map #(Character/getNumericValue %) (str x)) n (quot (count s) 2)]\n    (= (apply + (take n s)) (apply + (take-last n s)))))", "problem": 115, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn \n  [n]\n  (let [cs (map #(read-string (str %)) (str n))]\n    (loop [r1 0, r2 0, cs (vec cs)]\n      (cond\n       (or (= 1 (count cs)) (empty? cs))  (= r1 r2)\n       :d (recur (+ r1 (first cs))\n                 (+ r2 (last cs))\n                 (subvec cs 1 (dec (count cs))))))))", "problem": 115, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn [s]\n(let [l (->> s str seq (map str) (map read-string))\n      sz (int (/ (count l) 2))\n      h (take sz l)\n      t (take sz (reverse l))]\n  (= (reduce + h) (reduce + t))))", "problem": 115, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn balanced [n]\n    (let [\n        digits \n        (fn [n]\n            (loop [rv [] nn n]\n                (if (zero? nn)\n                    rv\n                    (recur (cons (rem nn 10) rv) (quot nn 10))\n            )\n        ))\n\n        ndig\n        (digits n)\n\n        len\n        (quot (count ndig) 2)\n    ]\n        (= (apply + (take len ndig)) (apply + (take-last len ndig)))\n    )\n)", "problem": 115, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "(fn balanced? [n]\n  (let [digits (loop [n n nums '()]\n                (if (= n 0)\n                  nums\n                  (recur (quot n 10) (conj nums (mod n 10)))\n                ))\n        mid (quot (count digits) 2)\n        prefix (take mid digits)\n        suffix (take-last mid digits)\n        ]\n      (= (reduce + prefix) (reduce + suffix))\n    )\n  )", "problem": 115, "user": "529a73bde4b02ebb4ef75096"}, {"code": "(fn balanced [n]\n  (let [digits (map read-string (re-seq #\"\\d\" (str n)))\n        m (/ (count digits) 2.0)\n        left (take (Math/floor m) digits)\n        right (drop (Math/ceil m) digits)]\n    (= (reduce + left) (reduce + right))))", "problem": 115, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn balance [n]\n  (letfn [(sum-digit [n] (if (zero? n)\n                           '()\n                           (cons (rem n 10) (sum-digit (quot n 10)))))]\n    (let [coll (sum-digit n)\n          len (count coll)\n          nums (quot len 2)]\n      (= (apply + (take nums coll)) (apply + (take nums (reverse coll)))))))", "problem": 115, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn balanced?\n  [n]\n  (let [n->digits (fn [num] (map #(Character/digit % 10) (str num)))\n        ns (n->digits n)\n        mid (quot (count ns) 2)]\n    (->> ns\n         (vector (take mid ns) (take-last mid ns))\n         (map #(reduce + %))\n         (#(= (first %) (second %)))\n         )))", "problem": 115, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn [n]\n  (let [zero   (int \\0)\n        digits (map #(- (int %) zero) (str n))\n        total  (count digits)\n        half   (quot total 2)\n        left   (take half digits)\n        right  (drop (- total half) digits)]\n    (= (apply + left) (apply + right))))", "problem": 115, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "#(or (< % 10)\n    (let [s (map read-string (re-seq #\"[0-9]\" (str %)))\n          c (count s)\n          m (/ c 2)\n          [l r] (split-at m s)\n          sl (reduce + l)\n          sr (reduce + r)]\n      (if (odd? c)\n        (= (- sl (last l)) sr)\n        (= sl sr))))", "problem": 115, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "(letfn [(digits [n]\n                (if (< n 10) [n] (conj (digits (quot n 10)) (mod n 10))))]\n        (fn [n]\n          (let [digs (digits n)]\n            (= (reduce + (take (quot (count digs) 2) digs))\n               (reduce + (take-last (quot (count digs) 2) digs))))))", "problem": 115, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn balance-of-n [n]\n        (let [s (str n)\n              mid (int (/ (count s) 2))\n              to-num #(Integer. (str %))\n              left (map to-num (take mid s))\n              right (map to-num (take mid (reverse s)))]\n          (= (reduce + left) (reduce + right))))", "problem": 115, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn [n]\n  (let [num-list (map #(Integer. (str %)) (apply list (str n)))\n    \thead-part (take (/ (count num-list) 2) num-list)\n        tail-part (take (/ (count num-list) 2) (reverse num-list))]\n    (= (apply + head-part) (apply + tail-part))))", "problem": 115, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn [n]\n  (let [digits (map #(-> % str Integer/parseInt) (str n))\n        hl (quot (count digits) 2)]\n    (= (apply + (take hl digits)) (apply + (take-last hl digits)))))", "problem": 115, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn [x]\n  (let [s (str x), l (count s)]\n    (= (reduce + (map int (take (Math/ceil  (/ l 2)) s)))\n       (reduce + (map int (drop (Math/floor (/ l 2)) s))))))", "problem": 115, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "#(let [a (str %) n (quot (count a) 2)] (= (frequencies (take-last n a) ) (frequencies (take n a))))", "problem": 115, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn the-balance-of-n [n]\n  (let [v (vec (map #(- (int %) 48) (vec (str n))))\n        l (count v)\n        lp (quot l 2)\n        p1 (subvec v 0 lp)\n        p2 (subvec v (+ lp (rem l 2)))]\n\n    (= (apply + p1) (apply + p2)) ))", "problem": 115, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn [n] (let [n2 (rest (clojure.string/split (str n) #\"\"))]\n                   (let [n3 (quot (count n2) 2)]\n                     (= (reduce (fn [a b] (+ a (Integer. b))) 0 (take n3 n2)) (reduce (fn [a b] (+ a (Integer. b))) 0 (take-last n3 n2))))\n                   ))", "problem": 115, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn [n]\n   (let [st (str n)\n         l (count st)\n         h (/ l 2)\n         se (map #(- (int %) 48) st)\n         f (take (- h 1/2) se)\n         e (drop h se)]\n     (= (reduce + f)\n        (reduce + e))))", "problem": 115, "user": "51929214e4b08962174cf74c"}, {"code": "(fn [n]\n  (loop [left 0 right 0 ds (str n)]\n    (if (< (count ds) 2)\n      (= left right)\n      (recur (+ left (int (first ds))) (+ right (int (last ds))) (butlast (drop 1 ds)))\n      )))", "problem": 115, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn bn [n]\n  (let [d (map #(mod % 10) (take-while (partial < 0) (iterate #(quot % 10) n)))\n        h (int (Math/floor (/ (count d) 2)))]\n    (= (reduce + (take h d)) (reduce + (take-last h d)))))", "problem": 115, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn [n]\n  (let [lst (str n)\n        half (/ (count lst) 2)\n        [l r] (split-at half lst)\n        f (fn [l] (reduce #(+ % (Character/getNumericValue %2)) 0 l))]\n    (=\n     (f (take (int half) l))\n     (f r))))", "problem": 115, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn balance-n [n]\n  (let [as-str (str n)\n        len (count as-str)\n        half (quot len 2)\n        left (subs as-str 0 half)\n        right (subs as-str (- len half))\n        sum-fn (fn [s] (reduce + (map #(java.lang.Character/getNumericValue %1) s)))\n        ]\n    (=\n      (sum-fn left)\n      (sum-fn right)\n      )\n    )\n  )", "problem": 115, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn [n]\n  (let [s (map #(Integer/parseInt (str %)) (str n))\n        mid (int (/ (count s) 2))\n        left (take (- (count s) mid) s)\n        right (drop mid s)]\n    (= (reduce + left) (reduce + right))))", "problem": 115, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn [n]\n  (let\n    [stringified (.toString n)\n     len (count stringified)\n     low (take (+ (quot len 2) (mod len 2)) stringified)\n     hi (drop (quot len 2) stringified)\n     digsum (fn [digs] (apply + (map #(Integer/parseInt (.toString %)) digs)))\n     ]\n    (= (digsum low) (digsum hi))))", "problem": 115, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn __ [n]\n  (let [s (->> n\n            str\n            seq\n            (map str)\n            (map read-string)\n            )\n        rs (reverse s)\n        len (int (/ (count s) 2))]\n    (= (reduce + (take len rs))\n       (reduce + (take len s)))\n    ))", "problem": 115, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn my-balance-of-n\r\n  [val]\r\n  (let [part-one (int (java.lang.Math/ceil (/ (count (str val)) 2)))\r\n        part-two (int (java.lang.Math/floor (/ (count (str val)) 2)))\r\n        parts (partition part-one part-two (str val))\r\n        to-digits (fn [cl] (map #(Character/digit % 10) cl))]\r\n  (= (reduce + (to-digits (first parts))) (reduce + (to-digits (second parts))))))", "problem": 115, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "(fn [n]\n  (let [s (str n)\n        size (-> (count s) (/ 2) (Math/floor))\n        head (take size s)\n        tail (take-last size s)\n        sum (fn [cs] (reduce + (map #(Character/getNumericValue %) cs)))]\n    (= (sum head) (sum tail))))", "problem": 115, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [n]\n  (let [digits (map #(java.lang.Integer/parseInt (str %)) (seq (str n)))\n        c (count digits)\n        m (quot c 2)\n        taken m\n        dropn (if (even? c) m (inc m))\n        [left right] [(take taken digits) (drop dropn digits)]]\n    (= (reduce + left) (reduce + right))))", "problem": 115, "user": "52d3f666e4b09f7907dd1327"}, {"code": "(fn [x]\n  (let [to-i #(- (int %) (int \\0))\n        s (str x)\n        c (count s)\n        m (int (/ c 2))]\n    (=\n      (apply + (map to-i (take m s)))\n      (apply + (map to-i (drop (- c m) s))))))", "problem": 115, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn [n]\n  (letfn [(digits [n]\n            (loop [n n\n                   digits []]\n              (if (< n 10)\n                (cons n digits)\n                (recur (quot n 10) (cons (rem n 10) digits)))))]\n    (let [digits (digits n)\n          size (int (/ (count digits) 2))\n          leftd (take size digits)\n          rightd (drop size digits)]\n      (= (reduce + leftd)\n         (reduce + (if (= (count leftd) (count rightd))\n                     rightd\n                     (drop 1 rightd)))))))", "problem": 115, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn[x](zero? (apply + (#(take (quot (count %) 2 ) %) (#(map - % (reverse %) )  (map #(- (int %) 48) (str x)))))))", "problem": 115, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn is-balanced [a-num]\n   (let [a-str (.toString a-num) \n         size (count a-str) \n         half-size (int (/ size 2)) \n         first-half (take half-size a-str) \n         last-half (take-last half-size a-str) ]\n     (= (apply + (map int first-half)) (apply + (map int last-half)))\n   )\n)", "problem": 115, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn balanced? [n]\n  (let [xs (map (comp #(Integer/parseInt %) str) (str n))\n        len (count xs)\n        ]\n    (if (zero? (mod len 2))\n      (= (apply + (take (quot len 2) xs)) (apply + (drop (quot len 2) xs)))\n      (= (apply + (take (inc (quot len 2)) xs)) (apply + (drop (quot len 2) xs)))\n      )))", "problem": 115, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "(fn [x]\n  (let [x-as-string (str x)\n        digits-in-x (count x-as-string)\n        midpoint (int (/ digits-in-x 2))\n        count-midpoint (- digits-in-x midpoint)]\n   (=\n      (apply + (map #(int %) (subs x-as-string midpoint))) \n      (apply + (map #(int %) (subs x-as-string 0 count-midpoint))))\n))", "problem": 115, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "#(let [v (map int (str %)) h (/ (count v) 2)] (= (apply + (take h v)) (apply + (take h (reverse v)))))", "problem": 115, "user": "52c73194e4b0c2d177d6211e"}, {"code": "(fn balance [x]\n  (let [digits (map #(- (int %) (int \\0)) (str x))\n        n (/ (count digits) 2)\n        left (take n digits)\n        right (take-last n digits)]\n    (= (apply + left) (apply + right))\n    )\n  )", "problem": 115, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [p]\n  (let [n (map #(- (int %) 48) (str p))\n        h (quot (count (str p)) 2)]\n    (= (apply + (take h n))\n       (apply + (take-last h n)))))", "problem": 115, "user": "52bacfa8e4b07a9af57922d6"}, {"code": "(fn [n]\n   (let [s (str n)\n         l (quot (count s) 2)\n         f (fn [l s] (reduce #(+ % (- (int %2) 48)) 0 (take l s)))]\n     (= (f l s) (f l (reverse s)))))", "problem": 115, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn balanced?\n  [n]\n  (let [digits (map (comp read-string str) (seq (str n)))\n        sub-length (int (/ (count digits) 2))\n        left (take sub-length digits)\n        right (take-last sub-length digits)]\n    (= (reduce + left) (reduce + right))))", "problem": 115, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "(fn [n]\n  (let [digits (seq (str n))\n        half-len (quot (count digits) 2)\n        first-half (map int (take half-len digits))\n        second-half (map int (take half-len (reverse digits)))]\n    (= (apply + first-half) (apply + second-half))))", "problem": 115, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "#(let [n (str %) i (int (/ (count n) 2)) c2i (fn [c] (- (int c) (int \\0)))]\n   (= (->> n (take i) (map c2i) (apply +))\n           (->> n reverse (take i) (map c2i) (apply +))))", "problem": 115, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn [x]\n    (let [c (map #(- (int %) (int \\0)) (str x))\n          l (quot (count c) 2)\n          a (apply + (take l c))\n          b (apply + (take l (reverse c)))]\n      (= a b)))", "problem": 115, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn [n] (let [dig (map (fn [x] (read-string (str x))) (str n))\n              left (take (/ (count dig) 2) dig)\n              right (take (/ (count dig) 2) (reverse dig))]\n          (= (apply + left) (apply + right))))", "problem": 115, "user": "5300f68de4b0d8b024fd3714"}, {"code": "#(let [a apply\n       c (map int (str %))]\n    (= 0 (a + (a map - (split-at (/ (count c) 2) c)))))", "problem": 115, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn   [n]\n  (apply =\n         (map (partial reduce +)\n            (let [nstr (str n)\n                  nnum (map #(Character/digit % 10) nstr)\n                  len (count nstr)\n                  mid (int (/ len 2))\n                  pos (if (even? len) mid (inc mid))]\n              (partition mid pos nnum)))))", "problem": 115, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "(fn [n] \n  (let [coll (seq (str n))\n        half-count (int (/ (count coll) 2))\n        head-half (take half-count coll)\n        tail-half (take half-count (reverse coll))]\n  \t(letfn [(count-digit-str [coll] (reduce + (map #(Character/digit % 10) coll)))]\n       (= (count-digit-str head-half) \n          (count-digit-str tail-half)\n          ))))", "problem": 115, "user": "52fcfeeee4b047fd55837027"}, {"code": "(fn [x] (let [arr-num (map (fn [x] (Integer/parseInt x))(rest (clojure.string/split (str x) #\"\")))\n               split-num (int (/ (count arr-num) 2))] \n          \n   (if (odd? (count arr-num))\n     (= (reduce + (take (inc split-num) arr-num)) (reduce + (take (inc split-num) (reverse arr-num))))\n     (= (reduce + (take split-num arr-num)) (reduce + (take split-num (reverse arr-num)))))))", "problem": 115, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "(fn [n]\n  (let [n-as-string (str n)]\n    ((fn [[p s]] (= p s))\n     (map #(->> % (map (fn [x] (-> x str (Integer.))))\n                (reduce +))\n          (let [parte (quot (count n-as-string) 2)]\n            [(let [primeiro (take parte n-as-string)] (if (seq primeiro) primeiro nil))\n             (take-last parte n-as-string)])))))", "problem": 115, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn [num]\n  (let [coll (map (fn [n] (Integer/parseInt (str n))) (seq (str num)))\n        len (Math/floor (/ (count coll) 2))]\n    (= (apply + (take len coll))\n       (apply + (take-last len coll)))))", "problem": 115, "user": "5138ccc7e4b0a5db03d727d9"}, {"code": "(fn balanced-number\n  [n]\n  (let [s (str n)\n        c (count s)\n        hc (/ c 2)]\n    (let [ns (->>\n               (if (even? c)\n                 (map identity (partition hc s))\n                 (map identity [(take (dec hc) s) (take-last (dec hc) s)]))\n               (map (fn [ns]\n                      (map #(Integer/parseInt (str %)) ns)))\n               (map #(reduce + %))\n               )]\n      (= (first ns) (second ns)))))", "problem": 115, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn[n]\n  (let [v (map int (str n))\n        r #(reduce + (% (quot (count v) 2) v))]\n    (= (r take)\n       (r #(drop (+ % (rem (count v) 2)) %2)))))", "problem": 115, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn balanced? [n]\n  (let [digits (loop [x n\n                      result []]\n                 (if (zero? x)\n                   result\n                   (recur (quot x 10) (conj result (mod x 10)))))\n        half (/ (count digits) 2)]\n    (= (apply + (take half digits))\n       (apply + (take-last half digits)))))", "problem": 115, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn balanced?[n] (let [ls (map int (seq (str n)))\n                              totake (quot (count ls) 2)\n                              left (take totake ls)\n                              right (take-last totake ls)]\n                              (= (reduce + left) (reduce + right))))", "problem": 115, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn [n] (letfn [\n(digits [n]\n\t(letfn [\n\t\t(digits- [n]\n\t\t\t(if\n\t\t\t\t(zero? n)\n\t\t\t\t[]\n\t\t\t\t(cons\n\t\t\t\t\t(rem n 10)\n\t\t\t\t\t(lazy-seq (digits- (quot n 10))))\n\t\t\t)\n\t\t)]\n\t\t(if\n\t\t\t(zero? n)\n\t\t\t[0]\n\t\t\t(reverse (digits- n))\n\t\t)\n\t)\n)\n(number-from-digits [ds]\n\t(letfn [\n\t\t(number-from-digits- [ds]\n\t\t\t(if\n\t\t\t\t(empty? ds)\n\t\t\t\t0\n\t\t\t\t(+ (first ds)\n\t\t\t\t   (* 10 (number-from-digits- (rest ds)))\n\t\t\t\t)\n\t\t\t)\n\t\t)]\n\t\t(number-from-digits- (reverse ds))\n\t)\n)\n(head-part [n]\n\t(number-from-digits (take (max 1 (quot (count (digits n)) 2)) (digits n)))\n)\n(tail-part [n]\n\t(number-from-digits (take-last (max 1 (quot (count (digits n)) 2)) (digits n)))\n)\n(the-balance-of-n [n] (= (reduce + (digits (head-part n))) (reduce + (digits (tail-part n)))))\n] (the-balance-of-n n)))", "problem": 115, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn [n]\n  (let [s (str n)\n        midpoint (/ (count s) 2)\n        left (take (Math/floor midpoint) s)\n        right (drop (Math/ceil midpoint) s)]\n    (apply = (map (fn [c] (apply + (map #(Character/getNumericValue %) c)))\n                  [left right]))))", "problem": 115, "user": "504e108ce4b078edc5f593b3"}, {"code": "#(let [xs ((fn [n r] (if (zero? n) r (recur (quot n 10) (cons (rem n 10) r)))) % '())        \n        c (quot (count xs) 2)       \n        d (if (zero? c) 1 c)]\n    (= (reduce + (take c xs)) (reduce + (take c (reverse xs)))))", "problem": 115, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn balance? [n]\n  (let [ord (fn [ch] (- (int ch) (int \\0)))\n        s (str n)\n        size (quot (count s) 2)\n        l (map ord (take size s))\n        r (map ord (take size (reverse s)))]\n    (= (apply + l) (apply + r))))", "problem": 115, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "(fn balanced? [n]\n  (let [split-num (fn [n]\n                    (let [s (str n)\n                          c (count s)]\n                      (if (even? c)\n                        (let [h (/ c 2)]\n                          (conj [] (subs s 0 h) (subs s h)))\n                        (let [h (quot c 2)]\n                          (conj [] (subs s 0 h) (subs s (inc h))))\n                        ))) \n        calc-sum-digs (fn [s]\n                        (let [chs (seq s)\n                              nums (map #(-> % str Integer/parseInt) chs)]\n                          (reduce + nums)))\n        halfs (split-num n)]\n    (= (-> (first halfs) calc-sum-digs) (-> (last halfs) calc-sum-digs))\n    ))", "problem": 115, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn bd [n]\n  (let [digits (fn [x] (->> (str x) (map #(Character/digit % 10))))\n        nd (digits n)\n        len (quot (count nd) 2)]\n    (= (apply + (take len nd)) (apply + (take-last len nd))))\n  )", "problem": 115, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn balanced? [n]\n  (let [digits (->> n str seq (map #(Character/digit % 10)))\n        half (int (/ (count digits) 2))\n        first-half (take half digits)\n        last-half (take-last half digits)]\n    (= (apply + first-half) (apply + last-half))))", "problem": 115, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn f[i]\n(let [\n\ts  (map #(Integer/parseInt (str %)) (str i))\n\tc ( quot (count s) 2)\n\tv (vector (drop c s) (drop c (reverse s)))\n\t] \n\t(apply = (map #(reduce + %) v) ))\n)", "problem": 115, "user": "5307e4ece4b02e82168697a9"}, {"code": "#(let [a (str %)\n        c (int (/ (count a) 2))\n        f (fn [x] (apply + (map int x)))]\n    (= (f (take c a)) (f (take-last c a))))", "problem": 115, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "#(let [s (str %)\n       n (/ (count s) 2)]\n   (apply =\n          (for [p ((juxt take take-last) n s)]\n            (apply + (map int p)))))", "problem": 115, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn balanced-digits? [n]\n  (letfn [(to-digits [i]\n                     (map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} (str i)))]\n    (let [digits (to-digits n)\n          cnt (count digits)\n          half (quot cnt 2)\n          firsthalf (take half digits)\n          secondhalf (take half (reverse digits))]\n      (= (reduce + firsthalf)\n         (reduce + secondhalf)))))", "problem": 115, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn [n] (let [ds (map (comp read-string str) (str n)) c (quot (count ds) 2) ns (take c ds) rns (take c (reverse ds))] (= (reduce + ns) (reduce + rns) )))", "problem": 115, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn [x]\n     (let [v (loop [n x o []] (if (zero? n) o (recur (int (/ n 10)) (conj o (mod n 10))))) \n           m (/ (count v) 2)]\n       (= (reduce + (subvec v 0 m)) (reduce + (subvec v (+ m 1/2)))) \n     )  \n   )", "problem": 115, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn balance-number [n]\n  (letfn [(lst [k acc]\n            (if (zero? k) acc\n              (recur (quot k 10) (conj acc (rem k 10)))))]\n    (let [l (lst n [])\n          len (.length l)\n          p (quot len 2)\n          r (rem len 2)\n          part (partition (+ p r) p l)]\n      (if (< len 2)\n        true\n        (#(= (first %) (last %)) (map #(reduce + 0 %) part))))))", "problem": 115, "user": "531c0619e4b08068f379ed98"}, {"code": "(fn balanced? [n]\n  (letfn [(digits [n]\n                  (loop [c n res ()]\n                    (if (< c 10)\n                      (conj res c)\n                      (recur (quot c 10) (conj res (rem c 10))))))]\n    (->> (digits n)\n         ((juxt identity reverse))\n         (map #(take (quot (count %) 2) %))\n         (map (partial reduce +))\n              (apply =))))", "problem": 115, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(letfn [(digitsum [s] (reduce + (map #(- (int %) 48) s)))]\n  (fn [n] (let [s (str n) len (count s)]\n            (= (digitsum (subs s 0 (quot len 2)))\n               (digitsum (subs s (- len (quot len 2))))))))", "problem": 115, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn [x]\n  (letfn [\n          (f [xs]\n             (let [n (quot (count xs) 2)]\n               (=\n                (apply + (take n xs))\n                (apply + (take n (reverse xs))))))]\n    (f (map int (seq (str x))))))", "problem": 115, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(fn bal [x] \n (let [s (str x)\n   n (count s)\n   l (quot n 2)\n   fh (take l s)\n   lh (take-last l s)\n   s1 (reduce (fn [i j] (+ i (read-string (str j)))) 0 fh )\n   s2 (reduce (fn [i j] (+ i (read-string (str j)))) 0 lh )\n   ]\n   (= s1 s2)\n  ))", "problem": 115, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "(fn [n]\n  (let [s (map #(Character/getNumericValue %) (str n))\n        half (int (/ (count s) 2))]\n    (= (reduce + (take half s)) (reduce + (take-last half s)))))", "problem": 115, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn [x]\n  (let [n (rest (clojure.string/split (str x) #\"\"))\n      int-map {\"0\" 0 \"1\" 1 \"2\" 2 \"3\" 3 \"4\" 4 \"5\" 5 \"6\" 6 \"7\" 7 \"8\" 8 \"9\" 9}\n      halves (split-at (/ (count n) 2) n)\n      first-half (into [] (first halves))\n      second-half (if (= (count (first halves)) (count (last halves))) \n                      (last halves) \n                      (cons (last first-half) (last halves)))\n      num-one (replace int-map first-half)\n      num-two (replace int-map second-half)]\n  (= (reduce + num-one) (reduce + num-two))))", "problem": 115, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn [a]\n  (let [b (re-seq #\"\\d\" (str a))\n        n (quot (count b) 2)]\n    (=\n     (reduce #(+ %1 (Integer/parseInt %2)) 0 (take n b))\n     (reduce #(+ %1 (Integer/parseInt %2)) 0 (reverse (take-last n b))))))", "problem": 115, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "(fn [n] (let [coll (map #(Integer/parseInt %) ((comp #(map str %) seq str) n) )]\n          (= (apply + (take (int (/ (count coll) 2)) coll)) (apply + (take-last (int (/ (count coll) 2)) coll) ))))", "problem": 115, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn [n]\n  (letfn [(digits [n] (if (zero? n) [] (conj (digits (quot n 10)) (rem n 10))))]\n    (let [ds (digits n) c (/ (count ds) 2) ch (Math/floor c) ct (Math/ceil c)\n          h (take ch ds) t (drop ct ds)]\n      (= (reduce + h) (reduce + t)))))", "problem": 115, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn balance [n]\n   (let [val (str n)\n         side  (int (/ (count val) 2))]\n     (loop [l 0 r 0 i side v val]\n       (if (= i 0)\n         (= l r)\n         (recur (+ l (int (first v))) (+ r (int (last v))) (- i 1) (butlast (rest v))))))\n   )", "problem": 115, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "#(let [digits (map (fn [c] (Character/digit c 10)) (str %))\n       len (count digits)\n       half (Math/floor (/ len 2))\n       front-half (apply + (take half digits))\n       back-half (apply + (take-last half digits))]\n  (= front-half back-half))", "problem": 115, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "(fn [x] (let [xs (map #(Character/getNumericValue %) (str x))]\n  (= (apply + (first (split-at (/ (count xs) 2) xs)))\n     (apply + (first (split-at (/ (count xs) 2) (reverse xs)))))))", "problem": 115, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [n]\n  (let [digits (map int (str n))\n        c (/ (count digits) 2)]\n    (= (reduce + (take c digits)) (reduce + (take-last c digits)))))", "problem": 115, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [n]\n  (let [s (str n)\n        len (quot (count s) 2)\n        sum (partial reduce #(+ %1 (Long. (str %2))) 0)]\n    (= (sum (take len s) )\n       (sum (take-last len s)))))", "problem": 115, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn [x]\n  (let [digits (->> x str (map #(Character/digit % 10)))\n        med (quot (count digits) 2)]\n  (= (reduce + (take med digits)) (reduce + (take-last med digits)))))", "problem": 115, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "(fn [n]\n  (let [s (str n)\n        d (quot (count s) 2)\n        x (subs s 0 d)\n        y1 (subs (apply str (reverse s)) 0 d)\n        y2 (apply str (reverse y1))]\n    (or (= x y1) (= x y2))))", "problem": 115, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn [n] (let [sn (str n)\n               hln (if (even? (count sn)) (/ (count sn) 2) (/ (dec (count sn)) 2))\n               fh (apply str (take hln sn))\n               sh (apply str (take-last hln sn))\n               sum (fn [ns] (apply + (map #(read-string (str %)) ns)))]\n           (= (sum fh) (sum sh))))", "problem": 115, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [n]\n  (let [f (fn f [n l]\n            (if (zero? n)\n              (if (empty? l) [0] l) \n              (recur (quot n 10) (conj l (rem n 10)))))\n        coll (f n [])\n        half (quot (count coll) 2)] \n    (= (reduce + (take half coll))\n       (reduce + (take half (reverse coll))))))", "problem": 115, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn [n]\n  (let [lst\n        ((fn [i r]\n           (if (< i 10) (conj r i)\n             (recur (quot i 10) (conj r (mod i 10)))))\n         n '())]\n    (let [c (count lst)]\n      (= (apply + (take (quot c 2) lst))\n         (apply + (if (even? c) (drop (/ c 2) lst)\n                    (drop (/ (+ c 1) 2) lst)))))))", "problem": 115, "user": "51da631be4b02ceefd947766"}, {"code": "(fn [num]\n  (letfn [(str-sum [s]\n            (apply + (map #(Integer/parseInt (.toString %)) s)))]\n    (let [num-s (.toString num) len (quot (count num-s) 2)]\n      (= (str-sum (take len num-s)) (str-sum (take-last len num-s))))))", "problem": 115, "user": "50436470e4b034ff00315d23"}, {"code": "(fn\n  [n]\n  (let [digits (map #(Character/digit % 10) (str n))\n        f-sum #(reduce + %)\n        cnt (count digits)\n        l (if (even? cnt) (take (/ cnt 2) digits) (take (/ (dec cnt) 2) digits))\n        r (if (even? cnt) (drop (/ cnt 2) digits) (drop (/ (inc cnt) 2) digits))]\n    (= (f-sum l) (f-sum r))))", "problem": 115, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn balanced? [n]\n  (let [digits\n        (map #(- (int %) 48)\n             (str n))]\n      \n    (apply = (map (partial apply +)\n                  ((juxt take take-last)\n                   (/ (count digits) 2)\n                   digits)))))", "problem": 115, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn balanced-num [n]\n  (let [digits ((fn toDigits [n]\n                     (if (zero? n)\n                       []\n                       (conj (toDigits (quot n 10))\n                             (rem n 10)))) n)\n        sz (int (/ (count digits) 2))]\n\n    (= (reduce + (take sz digits))\n       (reduce + (take sz (reverse digits))))))", "problem": 115, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn [n] (let [l1 (map-indexed vector (str n)) p (count l1) m (if (even? p) (/ p 2) (dec (/ p 2))) s (if (even? p) m (inc m))] (if (= 1 p) true  (= (reduce (fn [acc [i v]] (if (< i m) (conj acc  v) acc)) #{} l1) (into #{} (drop s (str n)))))))", "problem": 115, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn [x]\n  (let [s (map #(- (int %) 48) (str x))]\n    (= (reduce + (take (quot (count s) 2) s)) (reduce + (drop (quot (inc (count s)) 2) s)))))", "problem": 115, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(letfn [(sum-digit-seq [x] (apply + (map #(read-string (str %)) x)))]\n   (fn [n]\n     (let [s (seq (str n))\n           num-digits (count s)\n           k (if (even? num-digits) (/ num-digits 2) (/ (dec num-digits) 2))\n           a (take k s)\n           b (drop (if (even? num-digits) k (inc k)) s)\n           sum-a (sum-digit-seq a)\n           sum-b (sum-digit-seq b)]\n       (= sum-a sum-b))))", "problem": 115, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn [n]\n  (letfn [(digits [x]\n                  (loop [xi x\n                         ds []]\n                    (if (zero? xi)\n                      ds\n                      (recur (quot xi 10)\n                             (conj ds (rem xi 10))))))]\n    (let [ds (digits n)\n          ct (count ds)\n          dc (if (odd? ct)\n               (quot (dec ct) 2)\n               (quot ct 2))\n          tc (if (odd? ct)\n               (quot (inc ct) 2)\n               (quot ct 2))]\n      (= (reduce + (take tc ds))\n         (reduce + (drop dc ds))))))", "problem": 115, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn [x]\n\t(\n\t\tlet [ds (fn [s] (apply + (map #(Integer/parseInt (str %)) s))) xx (str x) l1 (quot (count xx) 2) l2 (- (count xx) l1)]\n\t\t( = (ds (subs xx 0 l1)) (ds (subs xx l2)))))", "problem": 115, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn [n]\n  (let [s (vec (map #(Integer/valueOf (str %)) (str n)))\n        c (count s)\n        i (int (/ c 2))\n        f #(apply + %)]\n    (= (f (subvec s 0 i))\n       (f (subvec s (- c i) c)))))", "problem": 115, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn [n]\n  (let [s (str n)\n        s1 (take (/(count s)2) s)\n        s2 (take-last (/(count s)2) s)\n        d1 (map (comp read-string str) s1)\n        d2 (map (comp read-string str) s2)]\n    (= (reduce + d2) (reduce + d1))))", "problem": 115, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn [n]\n  (let [digits (map (comp read-string str) (str n))\n        [left right] ((juxt take take-last) (/ (count digits) 2) digits)]\n    (= (reduce + left) (reduce + right))))", "problem": 115, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(letfn [(digits [x] (map #(Character/getNumericValue %) (str x)))]\n  (fn [x]\n    (let [n (digits x)\n          half (quot (count n) 2)]\n      (apply = (map #(reduce + %) [(take half n)\n                                   (take-last half n)])))))", "problem": 115, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(fn [n]\n   (->> (map #(Integer. (str %)) (str n))\n        ((juxt identity reverse))\n        (map #(apply + (take (/ (count %) 2) %)))\n        (apply =)))", "problem": 115, "user": "5175533fe4b0dea9bbfba575"}, {"code": "#(let [y (map int (str %)) z (/ (count y) 2)] (= (apply + (drop z y)) (apply + (drop-last z y))))", "problem": 115, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn balance[n]\n  (letfn [(str-sum [s]\n                   (reduce + (map #(Integer/parseInt (.toString %)) s)))]\n    (let [num-s (.toString n)\n          len (quot (count num-s) 2)]\n      (= (str-sum (take len num-s))\n         (str-sum (take-last len num-s))))))", "problem": 115, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn [n]\n  (letfn [(f [s] (reduce + (map int (take (/ (count s) 2) s))))]\n    (= (f (str n)) (f (reverse (str n))))))", "problem": 115, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn bal [x] \n  (let [s (map int (str x))\n        c (/ (count s) 2)]\n    (= (reduce + (take c s))\n       (reduce + (take c (reverse s))))))", "problem": 115, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn [x]\n  (let [digits (map #(Character/getNumericValue %) (str x))\n        sum #(reduce + %)\n        half (Math/floor (/ (count digits) 2))\n        left (take half digits)\n        right (take-last half digits)]\n    (= (sum left) (sum right))))", "problem": 115, "user": "5312cdaae4b08068f379ed03"}, {"code": "(fn [n]\n  (let [digs (map #(Integer/parseInt (str %)) (seq (str n)))\n        len (count digs)\n        to-take (quot len 2)\n        to-drop (+ to-take (mod len 2))\n        half1 (take to-take digs)\n        half2 (drop to-drop digs)]\n    (= (apply + half1) (apply + half2))))", "problem": 115, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn [x]\n  (let [s (loop [x x\n                 r []]\n            (if (= x 0)\n              r\n              (recur (quot x 10)\n                     (conj r (rem x 10)))))\n        l (quot (count s) 2)]\n    (= (apply + (take l s))\n       (apply + (take-last l s)))))", "problem": 115, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn x [n]\n  (let [s (str n)\n        middle (/ (count s) 2)\n\t\tprefix (subs s 0 (Math/ceil middle))\n        suffix (subs s (Math/floor middle))\n\t\tsum-chars (fn [s] (reduce #(+ %1 (int %2)) 0 s))]\n    (= (sum-chars prefix) (sum-chars suffix))))", "problem": 115, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [n]\n    (let [sn (str n)\n          fhalf (subs sn 0 (Math/ceil (/ (count sn) 2)))\n          shalf (subs sn (/ (count sn) 2))\n          fhalfsum (reduce + (map #(Integer/parseInt (str %)) fhalf))\n          shalfsum (reduce + (map #(Integer/parseInt (str %)) shalf))]\n      (= fhalfsum shalfsum)))", "problem": 115, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn bal?\n  [n]\n  (let [s (map #(Integer/parseInt (str %)) (str n))\n        m (int (/ (float (count s)) 2))\n        l (take m s)\n        r (take-last m s)]\n    (= (apply + l) (apply + r))))", "problem": 115, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn balanced?\n  [n]\n  (=\n    (reduce + (map #(Integer/parseInt (str %)) (take (int (/ (count (str n)) 2)) (str n))))\n    (reduce + (map #(Integer/parseInt (str %)) (drop (int (/ (inc (count (str n))) 2)) (str n))))))", "problem": 115, "user": "536aa86de4b0243289761eb1"}, {"code": "(fn [num]\n    (let [num-str (str num)\n          num-str-len (count num-str)\n          len (+ (quot num-str-len 2) (rem num-str-len 2))\n          left (subs num-str 0 len)\n          right (subs num-str (- num-str-len len))]\n      (println :left left :right right)\n      (= \n       (->>\n        left\n        seq\n        (map str)\n        (map read-string)\n        (reduce +))\n       (->>\n        right\n        seq\n        (map str)\n        (map read-string)\n        (reduce +)))))", "problem": 115, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn bal? [x]\n  (let [x' (str x)\n        n (quot (count x') 2)\n        l (take n x')\n        r (take n (reverse x'))\n        sum (fn [s] (apply + (map #(-> % str Integer/parseInt) s)))]\n    (= (sum l) (sum r))))", "problem": 115, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "#(loop [[h & t] (str %)\n        a 0]\n   (if t\n     (recur (butlast t) (- (+ a (int h)) (int (last t))))\n     (= a 0)))", "problem": 115, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [n]\n  (let [digits (->> n (.toString) (map #(- (int %) (int \\0))))\n        length (count digits)]\n    (if (< length 2)\n      true\n      (let [part-length (quot length 2)\n            left (take part-length digits)\n            right (drop (- length part-length) digits)]\n        (= (apply + left) (apply + right))))))", "problem": 115, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn [n]\n  (let [n ((fn break [n]\n             (if (= n 0)\n               nil\n               (cons (mod n 10) (lazy-seq (break (quot n 10)))))) n)\n        len (quot (count n) 2)]\n    \t(= (apply + (take len n))\n           (apply + (take-last len n)))))", "problem": 115, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn [n]\n  (let [s (str n)]\n    (let [half-len (int (/ (count s) 2))]\n      (letfn [(sum [chars] (reduce + (map #(-> % str Integer.) chars)))]\n        (= (sum (take half-len s))\n           (sum (take half-len (reverse s))))))))", "problem": 115, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn [n]\n  (let [n-as-str    (str n)\n        half-length (quot (count n-as-str) 2)\n        left        (map str (take half-length n-as-str))\n        right       (map str (take half-length (reverse n-as-str)))\n        sum-as-int  (fn [sq] (reduce + (map #(Integer/parseInt %) sq)))]\n    ;;\n    (= (sum-as-int left) (sum-as-int right))))", "problem": 115, "user": "53415755e4b00652c8746ecd"}, {"code": "(fn [n]\n  (loop [vals (map #(Character/getNumericValue %) (str n)) a 0 b 0]\n    (if (empty? vals)\n      (= a b)\n      (recur (rest (butlast vals)) (+ a (first vals)) (+ b (last vals))))))", "problem": 115, "user": "53800d99e4b06839e8705ebd"}, {"code": "(fn [number]\n   (let [n (str number)\n         sumStr (fn [s] (apply + (map #(Character/getNumericValue %) s)))\n         numToTake (int (/ (count n) 2))]\n     (= (sumStr (take numToTake n)) (sumStr (take-last numToTake n)))\n   ))", "problem": 115, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn balanced [n]\n  (->> n\n       str\n       (map #(read-string (str %)))\n       (#(vector (take (quot (count %) 2) %) (take-last (quot (count %) 2) %)))\n       (map (partial apply +))\n       (#(= (first %) (last %)))))", "problem": 115, "user": "53691dc7e4b0243289761e97"}, {"code": "(comp #(= 0(apply +(apply map -(split-at(/(count%)2)%)))) #(map int(str%)))", "problem": 115, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn task-115 [n]\n  (let [digits ((fn to-digits [n]\n                   (if (< n 10)\n                     [n]\n                     (conj (to-digits (quot n 10)) (rem n 10)))) n)\n        half (quot (count digits) 2)\n        first-half (take half digits)\n        last-half (drop (if (= (* 2 half) (count digits)) half (inc half)) digits)]\n    (= (apply + first-half) (apply + last-half))))", "problem": 115, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "#(let [a (str %)\n        ca (/ (count a) 2)\n        b1 (reduce + 0 (map int (subs a 0 (+ ca 1/2))))\n        b2 (reduce + 0 (map int (subs a ca)))]\n    (= b1 b2))", "problem": 115, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "#(let [s (str %)\n       f (fn [z] (apply + (map int (take (/ (count z) 2) z))))]\n   (= (f s) (f (reverse s))))", "problem": 115, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn balance-of-n [n]\n  (let [get-digits (fn [number]\n            (reduce #(conj %1 (- (int %2) (int \\0)))\n                    [] (str number)))\n        digits (get-digits n)\n        half-num-len (int (/ (count digits) 2))\n        first-half (take half-num-len digits)\n        last-half (take-last half-num-len digits)]\n    (= (apply + first-half) (apply + last-half))))", "problem": 115, "user": "53070615e4b02e821686979e"}, {"code": "(fn [int-num]\n  ( let [num-seq (map #(Integer/parseInt (str %))  (seq (str int-num)))\n         length (count num-seq)\n         n-to-take (if (odd? length) (/ (+ 1 length) 2) (/ length 2))\n         seq1   (take n-to-take num-seq)\n         seq2   (take n-to-take (reverse num-seq))]\n     (= (apply + seq2) (apply + seq1)))\n  )", "problem": 115, "user": "530d1060e4b08068f379eca2"}, {"code": "(fn t8 [z]\n  (letfn [(decompose_numbers [n] \n            (if (< n 10)\n              [n] \n              (conj (decompose_numbers (int (/ n 10))) (rem n 10))))]\n    (let [s (decompose_numbers z)\n          len (count s)\n          is_even (zero? (rem len 2))]\n      (if is_even\n        (if (= (reduce + (take (int (/ len 2)) s))\n               (reduce + (take-last (int (/ len 2)) s)))\n          true\n          false)\n        (if (= (reduce + (take (int (/ (dec len) 2)) s))\n               (reduce + (take-last (int (/ (dec len) 2)) s)))\n          true\n          false)))))", "problem": 115, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn balanced? [n]\n  (let [vals (map int (str n))\n        excess (/ (count vals) 2)\n        l (apply + (drop-last excess vals))\n        r (apply + (drop excess vals))]\n    (= l r)))", "problem": 115, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn [n]\n  (let [s (map #(- (int (char %)) (int \\0)) (pr-str n)) \n        h (int (/ (count s) 2)) \n        l (take h s) \n        r (take-last h s)] [l r]\n    (= (reduce + l) (reduce + r))))", "problem": 115, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn balanced? [n]\n  (let [all (map (comp read-string str) (str n))\n        left (take (quot (count all) 2) all)\n        right (take-last (count left) all)]\n    (= (reduce + left) (reduce + right))))", "problem": 115, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn B? [n]\n  (letfn [(D [n]\n            (loop [n n d* []]\n              (if (< n 10) (conj d* n)\n                  (recur (quot n 10) (conj d* (rem n 10))))))\n          (H [s*]\n            (loop [s s* t []]\n              (cond (= (count s) (count t)) [s t]\n                    (= (count s) (inc (count t))) [s (conj t (first s))]\n                    :else (recur (rest s) (conj t (first s))))))]\n    (apply = (map #(apply + %) (H (D n))))))", "problem": 115, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn [num]\n  (let [num-str (str num)\n        n (count num-str)\n        num-drop (if (odd? n) 1 0)]\n    (->> num-str\n         seq\n         (map #(Character/digit % 10))\n         (split-at (int (/ n 2)))\n         (#(= (reduce + (first %))\n              (reduce + (drop num-drop (second %))))))))", "problem": 115, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn b [n]\n(let [v (map #(read-string (str %)) (str n))\n      m (quot (count v) 2)]\n  (= (apply + (take m v)) (apply + (take-last m v)))))", "problem": 115, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn balanced? [n]\n  (letfn [(sumdigits [s c] (reduce + (map #(Character/getNumericValue %) (take c s))))]\n    (let [s (str n)\n          c (int (/ (count s) 2))]\n      (= (sumdigits s c) (sumdigits (reverse s) c)))))", "problem": 115, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn [num]\n  (let [num-digits (map #(Integer. (str %)) (seq (str num)))\n        digits-cnt (count num-digits)\n        half-cnt (+ (if (odd? digits-cnt) 1 0) (int (/ digits-cnt 2)))\n        first-sum (reduce + (take half-cnt num-digits))\n        last-sum (reduce + (take-last half-cnt num-digits))]\n    (= first-sum last-sum)))", "problem": 115, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn [i]\n  (let [s (str i)\n        n (count s)\n        half (quot n 2)\n        sum (fn [s]\n              (->> (map #(- (int %) 48) s)\n                   (apply +)))]\n    (=\n     (sum (take half s))\n     (sum (take half (reverse s))))))", "problem": 115, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "(fn balanced [n]\n  (let [s (-> n str vec)\n        l (count s)\n        f #(subvec % 0 (quot l 2))]\n    (apply = (map (comp frequencies f) [s (vec (reverse s))]))))", "problem": 115, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn [n]\n  (let [s (str n)\n        k (int (/ (count s) 2))]\n    (apply = (map #(apply + (map (fn [c] (Character/getNumericValue c)) (% k s))) [take\ttake-last]))))", "problem": 115, "user": "530bf87ee4b02e82168697d5"}, {"problem": 115, "code": "(fn [n]\n  (let [\n      digits (loop [cur n acc []] (if (= cur 0) acc (recur (quot cur 10) (conj acc (rem cur 10)))))\n      half-len (quot (count digits) 2)\n      first-half (take half-len digits)\n      second-half (take half-len (reverse digits))\n    ]\n    (= (apply + first-half) (apply + second-half))))", "user": "4faf97d8e4b081705acca258"}, {"problem": 115, "code": "(fn\n  [n]\n  (let [v (vec (str n))\n        size (.size v)\n        half (quot size 2)\n        s1 (apply + (map int (take half v)))\n        s2 (apply + (map int (take-last half v)))]\n    (= s1 s2)))", "user": "52dfc89be4b09f7907dd1405"}, {"problem": 115, "code": "(fn [n] (= (reduce #(+ %1 (- (int %2) 48)) 0 (take (Math/ceil (/ (count (str n)) 2)) (str n)))\n           (reduce #(+ %1 (- (int %2) 48)) 0 (take (Math/ceil (/ (count (str n)) 2)) (reverse (str n))))))", "user": "53a1b5c8e4b0ca733b9744c1"}, {"problem": 115, "code": "(fn [n] (let [msg (map (comp #(Integer. %) str) (seq (str n)))\n              k (count msg)\n              [n1 n3] (split-at (int (/ k 2)) msg)\n              n2 (if (odd? k) (rest n3) n3)\n              ]\n          (= (apply + n1) (apply + n2))))", "user": "53976599e4b0b51d73faaeea"}, {"problem": 115, "code": "(fn [n]\n  (let [ns (str n)\n        hc (Math/ceil (/ (count ns) 2))]\n    (= (reduce + (map int (take hc ns)))\n       (reduce + (map int (take hc (reverse ns)))))))", "user": "5213d7aae4b0961f15ac4d72"}, {"problem": 115, "code": "(fn [i]\n  (let [d (map #(- (int %) 48) (str i))\n        h (int (/ (count d) 2))]\n    (= (apply + (take h d))\n       (apply + (take-last h d)))))", "user": "4ec53f8c535d6d7199dd368b"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        c (count s)\n        h (quot c 2)\n        plus (fn [s c]\n               (+ s (Integer. (str c))))]\n    (= (reduce plus 0 (take h s))\n       (reduce plus 0 (take-last h s)))))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 115, "code": "(fn balanced? [n]\n\t(letfn [(digits [x]\n           (if (< x 10)\n             (vector x)\n             (conj (digits (/ (- x (mod x 10)) 10)) (mod x 10))))]\n        (== (apply + (subvec (digits n) 0 (Math/floor (/ (count (digits n)) 2))))\n            (apply + (subvec (digits n) (Math/ceil (/ (count (digits n)) 2)))))))", "user": "532727bae4b09d4e7a9b54fa"}, {"problem": 115, "code": "(fn [x]\n   (let [l (seq (str x)) \n         h1 (take (int (/ (inc (count l)) 2)) l)\n         h2 (drop (int (/ (count l) 2)) l)\n         ton #(- (int %) (int \\0))\n         sum (fn [h] (reduce #(+ %1 (ton %2)) 0 h))]\n     (println h2)\n     (= (sum h1) (sum h2))))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(digits [num]\n            (loop [acc ()\n                   num num]\n              (if (< num 10)\n                (conj acc num)\n                (recur (conj acc (rem num 10))\n                       (quot num 10)))))]\n    (let [d (digits n)\n          c-by-2 (int (/ (count d) 2))\n          a (take c-by-2 d)\n          b (take-last c-by-2 d)]\n      (= (reduce + a)\n         (reduce + b)))))", "user": "532bce35e4b09d4e7a9b5536"}, {"problem": 115, "code": "(fn [i](->> \n   i\n   str \n   (map #(->> % int (+ -48))) \n   ((juxt identity reverse))\n   (map #(->>\n          %\n          identity\n          (reductions +)\n          ((fn [n] (nth n (bit-shift-right (dec (count n)) 1) )))\n          )\n   )\n   (apply =)\n))", "user": "5281a445e4b0757a1b17143a"}, {"problem": 115, "code": "(fn [n]\n  (let [ns (map #(Character/getNumericValue %) (str n))\n        size (int (/ (count ns) 2))\n        [f l] [(take size ns) (take-last size ns)]]\n    (= (reduce + f) (reduce + l))))", "user": "4ef9b021535dced4c769f269"}, {"problem": 115, "code": "(fn\n  [x]\n  (let [to-digits (fn [n]\n                    (map #(- (int %) 48) (seq (str n))))\n        as-digits (to-digits x)\n        length (/ (count as-digits) 2)\n        first-half (take (int length) as-digits)\n        second-half (drop (int (+ length 0.5)) as-digits)]\n    (=\n     (reduce + first-half)\n     (reduce + second-half))))", "user": "53ac4719e4b047364c04445c"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n) c (count s) sm (fn [s] (reduce #(+ %1 (Integer. (str %2))) 0 s))]\n    (cond\n     (even? c) (= (sm (take (quot c 2) s)) (sm (drop (quot c 2) s)))\n     :else (= (sm (take (quot c 2) s)) (sm (drop (inc (quot c 2)) s)))\n     )\n  )\n)", "user": "53ae16e2e4b047364c044472"}, {"problem": 115, "code": "(fn bon [x]\n  (letfn [(digits [x]\n           \t(map #(- (int %) (int \\0)) (str x)))]\n    (let [d (digits x)\n          h (quot (count d) 2)]\n      (apply = (map #(reduce + %) [(take h d) (take-last h d)])))))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 115, "code": "(fn[x]\n  (let [str-x (str x)\n        cnt-x (count str-x)\n        l-x (subs str-x 0 (quot cnt-x 2))\n        r-x (subs str-x (quot (+ cnt-x 1) 2))]\n    (or (= l-x r-x)\n        (= l-x\n           (->> (reverse r-x)\n                (apply str))))))", "user": "5036eba7e4b0af0658af77a5"}, {"problem": 115, "code": "(fn [n]\n  (let [s (map read-string (re-seq #\"\\d\" (str n)))\n        half (/ (count s) 2)\n        t (java.lang.Math/floor half)\n        d (java.lang.Math/ceil half)]\n    (= (apply + (take t s))\n       (apply + (drop d s)))))", "user": "538e36c7e4b0b51d73faae81"}, {"problem": 115, "code": "(fn [n]\n  (let [part (int (/ (count (str n)) 2))]\n    (=\n      (reduce + (map int (take part (str n))))\n      (reduce + (map int (take part (reverse (str n))))))))", "user": "51897709e4b0288ada3dbdaa"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        half-count (int (/ (count digits) 2))\n        first-n #(map (partial nth %1) (range %2))]\n    (= (apply + (first-n digits half-count))\n       (apply + (first-n (reverse digits) half-count)))))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 115, "code": "(fn [n]\n  (let [c0 (int \\0)\n        sn (str n)\n        cn (count sn)\n        hn (quot cn 2)]\n    (= (apply + (map #(- (int %) c0) (subs sn 0 hn)))\n       (apply + (map #(- (int %) c0) (subs sn (- cn hn) cn))))))", "user": "4ee528fb535d1385b2869d87"}, {"problem": 115, "code": "(fn balanced? [n]\n\t(let [digits (map #(- (int %) 48) (str n))\n        c (count digits)\n        [l r] (split-at (quot c 2) digits)]\n      (= (reduce + l) (reduce + (if (even? c) r (rest r))))))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 115, "code": "(fn balanced? [num]\n    (let [half-len (int (Math/ceil (/ (count (str num)) 2.)))\n          left-val (->> num (str)\n                            (drop-last half-len) \n                            (map #(Integer/parseInt (str %)))\n                            (reduce +))\n          right-val (->> num (str) \n                            (drop half-len) \n                            (map #(Integer/parseInt (str %))) \n                            (reduce +))]\n\n        (= left-val right-val)))", "user": "53a94b63e4b047364c044434"}, {"problem": 115, "code": "(fn balanced? [x]\n  (letfn [(to-digits [x]\n                     (loop [y x\n                            ds []]\n                       (if (< y 10) (conj ds y)\n                         (let [digit (mod y 10)\n                               restNum (/ (- y digit) 10)]\n                           (recur restNum (conj ds digit))))))]\n    (let [digits-of-x (to-digits x)\n          size (/ (count digits-of-x) 2)\n          sumofLeft (reduce + (take size digits-of-x))\n          sumofRight (reduce + (take size (reverse digits-of-x)))]\n      (= sumofLeft sumofRight))))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [xs (map int (str n))\n        half (quot (count xs) 2)]\n    (= (reduce + (take half xs))\n       (reduce + (take-last half xs)))))", "user": "50c781bbe4b00bb60fe0c535"}, {"problem": 115, "code": "(fn [n]\n  (let [s (seq (str n))\n        l (count s)\n        ]\n    (if (= l 1)\n      true\n      (let [m (quot l 2)\n            front (take m s)\n            back (take m (reverse s))\n            ;; bt and ft produce incorrect results but okay for comparison\n            ft (reduce #(+ %1 (int %2)) 0 front)\n            bt (reduce #(+ %1 (int %2)) 0 back)\n            ]\n        (= ft bt) )))\n  )", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits (map #(Character/getNumericValue %) (str n))\n        to-take (int (/ (count digits) 2))]\n      (= (reduce + (take to-take digits))\n         (reduce + (take-last to-take digits)))))", "user": "52d00832e4b07d0d72b273b4"}, {"problem": 115, "code": "(fn [s] \n   (let [nums (map #(Character/getNumericValue %) (str s))\n         size (count (str s))]\n     (apply = \n            (map (partial apply +)\n                 (update-in \n                  (split-at (quot size 2) nums)\n                  [1]\n                  (if (odd? size) rest identity))))))", "user": "538db083e4b0b51d73faae74"}, {"problem": 115, "code": "(fn my-balance[n](let \n\t\t [dig-vec (mapv #(Integer/parseInt (str %)) (str n)) \n\t\t\tnum-digits (count dig-vec) \n\t\t\tfirst-half (quot num-digits 2)\n\t\t\tsecond-half (if (even? num-digits) first-half (inc first-half))]\n\t\t\t(if (= num-digits 1) true\n\t\t\t\t(= (apply + (take first-half dig-vec))\n\t\t\t\t\t(apply + (drop second-half dig-vec))))))", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 115, "code": "(fn  [n]\n   (let [c (map #(- (int %) 48) (str n)) \n         i (/ (count c) 2)\n         f #(apply + (% i c))] \n     (= (f take) (f take-last))))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 115, "code": "(fn [n]\n                     (let [digits (fn digits [n]\n                                    (if (< n 10)\n                                      [n]\n                                      (conj (digits (int (/ n 10))) (mod n 10))))\n                           n-digs (digits n)\n                           cnt (count n-digs)\n                           [left right] [(take (int (/ cnt 2)) n-digs) (drop (if (zero? (mod cnt 2)) (int (/ cnt 2)) (inc (int (/ cnt 2)))) n-digs)]\n                           [left-sum right-sum] (map (partial reduce +) [left right])]\n                       (= left-sum right-sum)))", "user": "52efd3d9e4b05e3f0be25ed4"}, {"problem": 115, "code": "(fn balanced? [x]\n  (let [digits (map #(read-string (str %)) (str x))\n        l (count digits)\n        half (if (even? l) (quot l 2) (inc (quot l 2)))\n        left (take half digits)\n        right (drop (- l half) digits)]\n    (= (apply + left) (apply + right))))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 115, "code": "(fn balance? [n]\n  (let [s (str n),\n        half (quot (inc (count s)) 2),\n        s1 (take half s),\n        s2 (take-last half s)]\n    (=\n      (apply + (map int s1))\n      (apply + (map int s2))\n      )))", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 115, "code": "(fn [n] (let [dfn (fn dfn [x] (if (< x 10) [x] (conj (dfn (quot x 10)) (rem x 10))))\n\t\t\t  digits (dfn n)\n\t\t\t  x (count digits)]\n\t(= (reduce + (take (quot x 2) digits)) (reduce + (drop (- x (quot x 2)) digits)))))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 115, "code": "(fn [num]\n  (let [num-str (str num)\n        len (count num-str)\n        left (take (quot len 2) num-str)\n        right (take (quot len 2) (reverse num-str))]\n    (= (reduce + 0 (map #(- (int %) 48) left))\n       (reduce + 0 (map #(- (int %) 48) right)))))", "user": "516282c3e4b0e6d3c4734711"}, {"problem": 115, "code": "(fn [n]  \n  ((fn [l v]\n      (if (empty? l) (zero? v)\n        (let [nv (+ v (- (first l) (last l)))]\n          (recur (-> l rest reverse rest reverse) nv) )))\n    (->> (range)\n         (map #(quot n (apply * (repeat % 10N))))\n         (take-while pos?)\n         (map #(mod % 10))\n         (map int)) 0))", "user": "536f5900e4b0fc7073fd6e7b"}, {"problem": 115, "code": "(fn [n]\n  (let [digs (str n)\n        m (quot (count digs) 2)\n        inits (take m digs)\n        tails (drop (if (even? (count digs)) m (inc m)) digs)\n        to-int (fn [c] (- (int c) (int \\0)))]\n    (= (reduce + 0 (map to-int inits)) (reduce + 0 (map to-int tails)))))", "user": "5224a46ce4b01819a2de42e5"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        l2 (quot (count s) 2)\n        digits (map #(- (int %) 48) s)]\n    (= (apply + (take l2 digits))\n       (apply + (take-last l2 digits)))))", "user": "4fc8c8d8e4b0ee37620e183b"}, {"problem": 115, "code": "(fn [m] \n  (let [n (->> (str m)\n               (map #(Character/digit % 10)))\n        at (quot (count n) 2)]\n    (= (sort (take at n))\n       (sort (take at (reverse n))))))", "user": "53034738e4b0d8b024fd373e"}, {"problem": 115, "code": "(fn [x] \n  (let* [y (map read-string (re-seq #\"\\d\" (str x)))\n         z (reverse y)\n         n (/ (count y) 2)]\n      (= (reduce + (take n y))\n         (reduce + (take n z)))))", "user": "53e91473e4b036ad0777e495"}, {"problem": 115, "code": "(fn balanced-number? [n]\n  (letfn [(digits [n]\n                  (if (< n 10)\n                    [n]\n                    (cons (mod n 10) (digits (int (/ n 10))))))]\n    (let [digits (digits n)\n          half-len (int (/ (count digits) 2))]\n      (= (reduce + (take half-len digits)) (reduce + (take-last half-len digits))))))", "user": "53791ab7e4b06839e8705e4d"}, {"problem": 115, "code": "(fn [x]\n  (letfn [(dig [n]\n            (loop [d '() n n]\n              (if (zero? n) d\n                (recur (cons (rem n 10) d) (quot n 10)))))]\n    (let [d (dig x)\n          n (count d)  h (quot n 2)\n          l (take h d) r (take-last h d)]\n      (= (apply + l) (apply + r)))))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 115, "code": "(fn [i]\n  (let [s (.toString i)\n        l (count s)\n        h (int (/ l 2))\n        summer (fn [l] (apply + (map #(-> % .toString Integer.) l)))\n        left (summer (take h s))\n        right (summer (drop (- l h) s))]\n    (= left right)))", "user": "537e745ae4b06839e8705ea6"}, {"problem": 115, "code": "(fn balanced-number? [n]\n    (let [digits (fn [x]\n                   (->> (str x)\n                        (seq)\n                        (map (comp read-string str))))\n          ceil (fn [x] (int (+ x (/ 1 2))))\n          floor (fn [x] (int x))\n          digits (digits n)\n          mid (/ (count digits) 2)]\n            (->> [(take (floor mid) digits) (drop (ceil mid) digits)]\n                 (map #(reduce + %))\n                 (#(= (first %) (second %))))))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 115, "code": "(fn [N] \n  (let [d (map #(- (int %) (int \\0)) (seq (str N))) \n        h (int (/ (count d) 2))] \n    (apply = \n           (map #(apply + %) \n                [(take h d) (take-last h d)]))))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 115, "code": "(fn balance-numbers [x]\n  (let [digits (mapv #(Character/getNumericValue %) (str x))\n        digit-count (count digits)\n        cnt (int (/ digit-count 2))\n        first-cnt (reduce + (take cnt digits))\n        second-cnt (reduce + (take-last cnt digits))]\n    (cond\n      (= digit-count 1) true\n      (= digits (reverse digits)) true\n      (= first-cnt second-cnt) true\n      :else false)))", "user": "532c9dc9e4b019098a6f8b30"}, {"problem": 115, "code": "(fn [x]\n    (let [s (seq (str x))\n          half-c (/ (count s) 2)]\n      (= (apply + (map #(-> % str read-string) (take (- half-c 1/2) s)))\n         (apply + (map #(-> % str read-string) (drop half-c s))))))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 115, "code": "(fn [n]\n  (let [coll (vec (str n))\n        mid (quot (count coll) 2)]\n    (= (apply + (map int (take mid coll)))\n       (apply + (map int (take-last mid coll))))))", "user": "5338387de4b0e30313ee6c91"}, {"problem": 115, "code": "#(let [x (->> %\n              str\n              seq\n              (map str)\n              (map read-string))\n        l (quot (count x) 2)]\n    (= (reduce + (take l x)) (reduce + (take-last l x))))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 115, "code": "(fn [x] \n   (let [to-digits (fn to-digits [x]\n                     (if (< x 10) (list x)\n                            (cons (mod x 10) (to-digits (quot x 10)))))\n         half-sum (fn [s] (reduce + (take (quot (count s) 2) s)))\n         ss (to-digits x)] \n     (= (half-sum ss) (half-sum (reverse ss)))))", "user": "50856bd1e4b004985b776e4c"}, {"problem": 115, "code": "(fn[x]\n   (let [s (str x) c (count s)]\n     (apply = (map #(apply + (map int %)) (partition (quot c 2) (/ c 2) s)))\n     ))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 115, "code": "(fn balanced? [n]\n   (let [sum (fn [coll]\n               (reduce (fn [a i] (+ a (Integer/parseInt (.toString i)))) 0 coll))\n         nstr (str n)\n         mid (int (/ (count nstr) 2))]\n     (= (sum (take mid nstr)) (sum (take-last mid nstr)))))", "user": "535eaa73e4b04ce2eb3ed2d4"}, {"problem": 115, "code": "(fn [x] (let [y (str x) f #(apply + (map read-string ( map str %))) a (quot (count y) 2)] (= (f (take a y)) (f (drop (- (count y) a) y)))))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 115, "code": "(fn [n] \n  (let [\n    s (str n) \n\tnums (map #(int (- (int %) (int \\0))) s)\n\tsize (count s) \n\tt (int (/ size 2)) \n\td (int (/ (inc size) 2))]\n\t(= (reduce + (take t nums)) (reduce + (drop d nums)))))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 115, "code": "(fn [x]\n  (let [text (str x)\n        len (quot (count text) 2)\n        step (if (zero? (rem (count text) 2)) len (inc len))\n        split (partition len step text)]\n    (apply = (map (partial reduce +) (map (partial map int) split)))))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 115, "code": "(fn [i] (let [i (map (comp #(Integer/parseInt %) str) (str i))\n               len (count i)\n               half #(/ % 2)\n               sum #(reduce + %)]\n           (condp = (even? len)\n                   true  (= (sum (take (half len) i)) (sum (drop (half len) i)))\n                   false (= (sum (take (half (- len 1)) i)) (sum (drop (half (+ len 1)) i))))))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 115, "code": "(fn [x]\n   (let [string (str x)\n         length (quot (count string) 2)\n         front (subs string 0 length)\n         extra (if (even? (count string)) 0 1)\n         back (subs string (+ extra length))]\n     (->> [front back]\n          (map (fn [x] (map #(Integer/parseInt (str %)) x)))\n          (map #(apply + %))\n          (apply =))))", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 115, "code": "(fn [n]\n   (let [s (str n)\n         h (/ (count s) 2)\n         [lhs rhs] [(take (if (ratio? h) (dec h) h) s) (drop h s)]]\n     (= (apply + (map int lhs)) (apply + (map int rhs)))))", "user": "506ba58be4b0eda3100c090b"}, {"problem": 115, "code": "(fn [n]\n  (let [nsx (map #(- (int %) (int \\0)) (vec (str n)))\n        hl (int (/ (count nsx) 2))\n        fh (take hl nsx)\n        sh (drop (- (count nsx) hl) nsx)]\n\t(= (reduce + fh) (reduce + sh))       \n  ))", "user": "52faec2ee4b047fd55837004"}, {"problem": 115, "code": "(fn [n]\n   (letfn [(sum [n] (reduce #(+ % (- (int %2) (int \\0))) 0 n))]\n     (let [strn (str n)\n           cnt (count strn)\n           tdcnt (int (/ cnt 2))]\n       (= (sum (take tdcnt strn))\n          (sum (drop (if (even? cnt) tdcnt (inc tdcnt)) strn))))))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 115, "code": "(fn [n]\n  (let [d (map #(Character/getNumericValue %) (str n))\n        N (count d)\n        [a1 b] (split-at (quot N 2) d)\n        a2 (if (even? N) b (rest b))]\n    (= (apply + a1)\n       (apply + a2))))", "user": "51780bfce4b0f89a8f53839c"}, {"problem": 115, "code": "(fn [n]\n  (let [sn   (str n)\n        cntr (/ (count sn) 2)\n        l    (subs sn 0 cntr)\n        r    (subs sn (Math/ceil cntr))\n        sum  (fn [s] (reduce + (map #(read-string (str %)) s)))]\n  (= (sum l) (sum r))))", "user": "53710c09e4b0fc7073fd6ea5"}, {"problem": 115, "code": "(fn [input]\n  (let [digits (str input) half (int (/ (count digits) 2))]\n    (reduce =\n      (map\n        (fn [h]\n          (reduce #(+ %1 (Character/getNumericValue %2)) 0 h))\n        (list\n          (take half digits),\n          (take-last half digits))))))", "user": "528bba38e4b0239c8a67aea9"}, {"problem": 115, "code": "(fn [n]\n  (let [\n    half (int (/ (count (str n)) 2))\n    left-part (take half (str n))\n    right-part (take-last half (str n))]\n    (= (sort left-part) (sort right-part))))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 115, "code": "(fn [n]\n    (let [nums (->> n\n                    str\n                    (map #(Integer/parseInt (str %))))\n          middle (int (/ (inc (count nums)) 2))\n          left (take middle nums)\n          right (take middle (reverse nums))]\n      (= (apply + left) (apply + right))))", "user": "4f3d83b5e4b0e243712b1f69"}, {"problem": 115, "code": "(fn [x] (let [digits ((fn f [n]\n                            (if (< n 10) [n]\n                              (cons (mod n 10) (lazy-seq (f (long (/ n 10))))))) x)\n                  add-half (fn [ns] (apply + (take (/ (count ns) 2) ns)))]\n              (= (add-half digits) (add-half (reverse digits)))))", "user": "51e28063e4b08e53a149f0f2"}, {"problem": 115, "code": "(fn balanced?\n  [number]\n  (let [digits (str number)\n        mid (/ (count digits) 2)\n        sum (fn [digits]\n              (->> digits\n                   (map #(Character/digit % 10))\n                   (reduce +)))]\n      (= (->> digits\n              (take mid)\n              (sum))\n         (->> digits\n              (reverse)\n              (take mid)\n              (sum)))))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 115, "code": "(fn [x]\n  (let [strs (-> x str (clojure.string/split #\"\") rest)\n        nums (map #(Integer. %) strs)\n        size (count nums)\n        split-loc (int (/ size 2))\n        first-half(take split-loc nums)\n        last-half (if (even? size)\n                    (drop split-loc nums) \n                    (drop (+ split-loc 1) nums))]\n    (= (reduce + first-half) (reduce + last-half))))", "user": "52474133e4b05ef8e38e635e"}, {"problem": 115, "code": "(fn balanced-number? [n]\n  (let [digit-seq (Integer/toString n)\n        len (count digit-seq)]\n    (letfn [(split-digits [digit-seq]\n              (let [halves (split-at (quot len 2) digit-seq)]\n                (if (even? len)\n                  halves\n                  [(first halves) (rest (fnext halves))])))\n            (int-seq [digit-char-seq]\n              (map #(Character/getNumericValue %) digit-char-seq))]\n      (if (= len 1)\n        true\n        (apply =\n               (map #(apply + %)\n                    (map int-seq\n                         (split-digits digit-seq))))))))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 115, "code": "(fn [x]\n  (let [xstr (map #(Character/digit % 10) (seq (str x)))\n        n (count xstr)\n        idxt (int (Math/ceil (/ n 2)))\n        idxd (int (Math/floor (/ n 2)))\n        ]\n    (= (apply + (take idxt xstr)) (apply + (drop idxd xstr)))\n    ))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map read-string (rest (clojure.string/split (str n) #\"\")))\n        half-length (quot (count digits) 2)]\n    (= (reduce + (take half-length digits)) (reduce + (take-last half-length digits)))\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 115, "code": "(fn sym [i]\n  (let [s (str i)\n        e1 (quot (count s) 2)\n        s1 (take e1 s)\n        s2 (take-last e1 s)\n        r #(+ %1 -48 (int %2))\n        i1 (reduce r 0 s1)\n        i2 (reduce r 0 s2)]\n    (= i1 i2)))", "user": "53f7820be4b0de5c41848560"}, {"problem": 115, "code": "(fn [n]\n   (=\n    (reduce + 0(map #(- (int %) (int \\0)) (#(take (/ (count %) 2) %) (seq (str n)))))\n    (reduce + 0(map #(- (int %) (int \\0)) (#(take (/ (count %) 2) %) (reverse (seq (str n))))))))", "user": "52fac708e4b047fd55836fff"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(-> % (int) (- (int \\0))) (str n))\n        len (/ (count digits) 2)\n        l (reduce + (take len digits))\n        r (reduce + (take len (reverse digits)))]\n    (= l r)))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 115, "code": "#(let[numStr (str %)\n      digiLen (count numStr)\n      halfLen (/ digiLen 2)\n      lower (subs numStr 0 halfLen)\n      upper (subs numStr (if (integer? halfLen) halfLen (inc halfLen))  digiLen)\n      sum (fn[s] (reduce + (map (fn[c] (- (int c) 48)) (seq s))))]\n   (= (sum lower) (sum upper)))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 115, "code": "(fn balanced [n]\n  (let [s (str n)\n        endl (quot (count s) 2)\n        startr (quot (inc (count s)) 2)\n        red-sum (partial reduce +)\n        digits (map int s)\n        l (take endl digits)\n        r (drop startr digits)]\n    (= (red-sum l) (red-sum r))      \n    )\n  )", "user": "5245e320e4b09dbe66b56177"}, {"problem": 115, "code": "(fn [n] (let [s (map #(let [n (Character/getNumericValue %)] (* n n)) (seq (str n)))\n               half (int (/ (count s) 2))]\n           (= (apply + (take half s)) (apply + (take-last half s)))))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 115, "code": "(fn [n]\n\t\t(let [half (quot (count (str n)) 2)]\n\t\t\t(= (apply + (take half (map int (str n))))\n\t\t\t\t(apply + (take-last half (map int (str n)))))\n\t\t)\n\t)", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 115, "code": "(fn balanced [n]\n  (let [sn (rest (clojure.string/split (str n) #\"\"))\n        il (int (/ (count sn) 2))\n        subtotal (fn subtotal [alist]\n                   (reduce #(+ %1 %2) alist))\n        dalist (flatten (for [i (range il)]\n                          (list (Integer. (nth sn i)) (Integer. (nth sn (- (count sn) (inc i)))))))]\n    (if (< n 10) true (= (subtotal (take-nth 2 dalist)) (subtotal (take-nth 2 (rest dalist)))))))", "user": "52747090e4b03e8d9a4a74a5"}, {"problem": 115, "code": "#(let [s (map int (str %))\n       l (/ (count s) 2)]\n    (=\n      (apply + (take l s))\n      (apply + (take-last l s))))", "user": "53500869e4b084c2834f4ad3"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(- (int %) (int \\0)) (str n))\n        c (quot (count digits) 2)\n        [a b] [(take c digits) (if (even? (count digits))\n                                 (drop c digits)\n                                 (drop (inc c) digits))]]\n    (= (apply + a) (apply + b))))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Character/digit % 10) (str n))\n        half (/ (count digits) 2)\n        sum #(reduce + %)]\n    (= (sum (take half digits))\n       (sum (take-last half digits)))))", "user": "5368fedee4b0243289761e93"}, {"problem": 115, "code": "#(let [t (str %) r (reverse t) c (/ (count t) 2) i (fn [x] (set (take c x)))] (= (i t) (i r)))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 115, "code": "(fn [n]\n  (let [ds (str n)\n        length (count ds)\n        half (quot length 2)\n        head (take half ds)\n        middle (if (odd? length) 1 0)\n        tail (drop (+ half middle) ds)\n        hsum (reduce + (map #(- (int %) (int \\0)) head))\n        tsum (reduce + (map #(- (int %) (int \\0)) tail))\n        ]\n    ;[(= hsum tsum) half length hsum tsum head tail ds]\n    (= hsum tsum)\n    )\n  )", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 115, "code": "#(letfn [(isblnc[s]\n  (cond\n   (zero? (count s)) true\n   (= 1 (count s)) true\n   (= (take (quot (count s) 2) s) (take-last (quot (count s) 2) s)) true\n   (or (not= (first s) (last s)) )false\n   :t (recur (drop-last (next s)))))]\n  (isblnc (.toString %)))", "user": "4e8849c5535d8b9bb0147ca4"}, {"problem": 115, "code": "(fn balanced? [i]\n  (let [is (str i)\n        half (int (/ (count is) 2))\n        front (map #(- (int %) 48) (take half is))\n        rear (map #(- (int %) 48) (take-last half is))]\n    (= (reduce + front) (reduce + rear))))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 115, "code": "(fn [n]\n          (let [d (map #(- (int %) 48) (str n))\n                c (count d)\n                h (/ (if (even? c) c (- c 1)) 2)]\n            (= (apply + (take h d))\n               (apply + (take-last h d)))\n               ))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 115, "code": "(fn [num]\n  (letfn [(str-sum [s]\n            (apply + (map #(Integer/parseInt (.toString %)) s)))]\n    (let [num-s (.toString num) len (quot (count num-s) 2)]\n      (= (str-sum (take len num-s)) (str-sum (take-last len num-s))))))", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 115, "code": "(fn balanced [n]\n  (let [c (count (str n))\n        mid (quot c 2)\n        s1 (subs (str n) 0 mid)\n        s2 (subs (str n) (if (even? c) mid (inc mid)))\n        sum-digits (fn [s] (apply + (map #(- (int %) (int \\0)) s)))]\n    (= (sum-digits s1) (sum-digits s2))))", "user": "54448e84e4b032a45b869393"}, {"problem": 115, "code": "(fn[x](let[v(mapv int(str x))a apply l(count v)s #(a +(a subvec %&))](=(s v 0(Math/ceil(/ l 2.)))(s v(quot l 2)))))", "user": "4db2903f535df7e46ed9b6bf"}, {"problem": 115, "code": "(fn [n]\n  (let [dgs (str n)\n        d (int (/ (count dgs) 2))\n        f (fn [s] (apply + (map #(Integer/valueOf (str %)) s)))]\n    (= (f (take d dgs)) \n       (f (take-last d dgs)))))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits #(loop [x %, acc ()]\n                  (if (zero? x) acc (recur (quot x 10) (conj acc (rem x 10)))))\n        s (digits n)\n        c (count s)\n        h (quot c 2)\n        l (apply + (take h s))\n        r (apply + (take-last h s))]\n    (if (= 1 c) \n      true\n      (= l r))))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(sum [s]\n            (apply + (map #(Character/getNumericValue %) s)))]\n    (let [y (str n) l (/ (count y) 2)]\n      (= (sum (take l y)) (sum (take-last l y))))))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 115, "code": "(fn [n]\n    (let [half-size (int (/ (count (str n)) 2))\n          chars-to-digits (fn [s] (map #(Integer/valueOf (str %)) s))\n          left-digits (chars-to-digits (take half-size (str n)))\n          right-digits (chars-to-digits (take half-size (reverse (str n))))]\n      (= (reduce + left-digits) (reduce + right-digits))))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 115, "code": "(fn [x]\n  (let [s (str x)\n        c (count (str x))]\n    (= (apply + (map #(- (int %) 48) (take (/ c 2) s)))\n       (apply + (map #(- (int %) 48) (take-last (/ c 2) s))))))", "user": "53322cece4b019098a6f8b73"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits (->> n str (map str) (map #(Integer/parseInt %)))\n        half   (int (/ (count digits) 2))\n        left   (reduce + (take half digits))\n        right  (reduce + (take half (reverse digits)))]\n    (= left right)))", "user": "4f3e5e87e4b0e243712b1f83"}, {"problem": 115, "code": "(fn [num] (let [a (map #(- (int %) 48) (str num)) c (quot (count a) 2) s #(reduce + %) x (s (take c a)) y (s (take-last c a))] (= x y)))", "user": "53d86564e4b0e771c302546b"}, {"problem": 115, "code": "(fn [a] \n  (let [revstra (reverse (str a))]\n    (= (reduce #(+ (int %2) %) 0 (take (quot (count (str a)) 2) (str a)))\n       (reduce #(+ (int %2) %) 0 (take (quot (count (str a)) 2) revstra)))))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 115, "code": "(fn balanced [n]\n  (let [st (vec (str n))\n        cnt (count st)\n        m1 (int (/ cnt 2))\n        m2 (- cnt m1)]\n    (apply = (map #(->> % (map int) (reduce +))\n                  [(subvec st 0 m1) (subvec st m2)]))))", "user": "534d1173e4b084c2834f4a98"}, {"problem": 115, "code": "(fn [x]\n  (let [ds (mapv #(-> % str Integer.) (print-str (str x)))\n        n (quot (count ds) 2)]\n    (apply =\n           (map #(apply + %)\n                [(take n ds)\n                 (take-last n ds)]))))", "user": "4ec1b090535dfed6da9c6db5"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Character/getNumericValue %) (str n))\n        m (bit-shift-right (count digits) 1)\t; that's fast /2 :-)\n        left (take m digits)\n        right (take-last m digits)]\n    (= (apply + left) (apply + right))))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 115, "code": "(fn [n]\n  (let [n (str n) x (int (/ (count n) 2))\n        sum #(reduce + (map int %))] \n    (=\n     (sum (take x n))\n     (sum (take-last x n)))))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 115, "code": "(fn [n] \n   (let [s (vec (map #(- (int %) 48) (str n))), \n         scnt (count s),\n         s0 (subvec s 0 (unchecked-divide-int (inc scnt) 2))\n         s1 (subvec s (unchecked-divide-int scnt 2) scnt)]\n     (= (reduce + s0) (reduce + s1))\n   )\n)", "user": "54524afbe4b0e397800069bc"}, {"problem": 115, "code": "(fn [n]\n  (let [digit-str (str n)\n        digit-cnt (count digit-str)\n        mid       (int (/ digit-cnt 2))\n        halves    [(take mid digit-str) (take-last mid digit-str)]]\n    (->> halves\n         (map #(map (comp read-string str) %))\n         (map (partial apply +))\n         (apply =))))", "user": "505aa653e4b021387fb89857"}, {"problem": 115, "code": "(fn [x]\n   \n  (let [s (str x)\n        c (count s)\n        q (quot c 2)\n        o (if (odd? c) 1 0)\n        left (subs s 0 (+ q o))\n        right(subs s q)]\n    ( =\n    (apply + (map #(- (int %) 48) left))\n    (apply + (map #(- (int %) 48) right)))))", "user": "52bc6cb2e4b07a9af57922f5"}, {"problem": 115, "code": "(fn [n]\n  (let [coll (map #(Integer/parseInt (str %)) (seq (str n)))]\n    (= \n      (apply + \n             (take\n               (+ (int (/ (count coll) 2)) (rem (count coll) 2)) coll))\n      (apply + \n             (take-last\n               (+ (int (/ (count coll) 2)) (rem (count coll) 2)) coll)))))", "user": "52c672e2e4b0c2d177d6210e"}, {"problem": 115, "code": "(fn the-balance-of-n [n]\n  (let [seq-n (map int (str n))\n        halve #(int (/ % 2))\n        len (count seq-n)\n        half-len (halve len)]\n    (->> [(take half-len seq-n) (take-last half-len seq-n)]\n         (map #(map int %))\n         (map #(reduce + %))\n         (apply =))))", "user": "52616198e4b03e8d9a4a705e"}, {"problem": 115, "code": "(fn [number] \n  (let [s (str number)\n        n (count s)\n        l (take (quot (inc n) 2) s)\n        r (drop (quot n 2) s)] \n    (= (apply + (map #(Integer/parseInt (str %)) l))\n \t   (apply + (map #(Integer/parseInt (str %)) r)))))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 115, "code": "(fn [n]\n  (let [cds (map #(Integer/valueOf (str %)) (str n))\n        c (quot (count cds) 2)\n        l (take c cds)\n        r (take-last c cds)]\n    (= (reduce + l) (reduce + r))))", "user": "5339c105e4b0e30313ee6cae"}, {"problem": 115, "code": "(fn [m] \n  (let [s (map #(-(int %)(int \\0)) (seq (str m))) \n        n (count s)] \n    (= (apply + (take (quot n 2) s)) (apply + (drop (- n (quot n 2)) s)))))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 115, "code": "(fn r [n]\n  (let [s (map (comp (partial + -48) int) (str n))\n        c (count s)\n        cs (quot c 2)]\n    (= (apply + (take cs s))\n       (apply + (take cs (reverse s))))))", "user": "51aefceee4b09397d5109797"}, {"problem": 115, "code": "(fn balanced [n] (let [sn (str n) f (fn [ns] (apply + (map (comp read-string str) (take (int (/ (count ns) 2)) ns))))](= (f sn) (f (reverse sn)) )))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        mid (quot (count s) 2)]\n    (= (apply + (map #(read-string (str %)) (drop mid s)))\n       (apply + (map #(read-string (str %)) (drop-last mid s))))))", "user": "53a074a4e4b0ca733b9744af"}, {"problem": 115, "code": "#(let [c (\n          (fn num2diglist [n retcoll] \n            (if (> n 0)\n              (num2diglist (int (/ n 10)) (conj retcoll (mod n 10)))\n              retcoll\n            )\n          ) % '()) \n       n (int (/ (count c) 2))] \n   (= (reduce + (take n c)) (reduce + (take n (reverse c))))\n )", "user": "545537c1e4b0e397800069dd"}, {"problem": 115, "code": "(fn [n]\n    (letfn [(digits [n]\n              (loop [n n\n                     result []]\n                (if (= n 0)\n                  result\n                  (recur (quot n 10) (cons (rem n 10) result)))))]\n      (let [ds (digits n)\n            l  (quot (count ds) 2)\n            r  (rem (count ds) 2)\n            ]\n        ( = (apply + 0 (take l ds))\n            (apply + 0 (drop (+ r l) ds))) \n        )\n      ))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 115, "code": "(fn [s]\n  (let [\n        xs (map (comp read-string str) (str s))\n        n (quot (count xs) 2)\n        l (apply + (take n xs))\n        r (apply + (take-last n xs))\n        ]\n    (= l r)\n    )\n )", "user": "5412646de4b01498b1a719d4"}, {"problem": 115, "code": "(let [digits (fn [i]\n               (loop [d '() q i]\n                 (if (= 0 q)\n                   d\n                   (recur (cons (mod q 10) d) (quot q 10)))))\n      left-and-right (fn [i]\n                       (let [d (digits i)\n                             n (count d)\n                             n' (int (/ n 2))\n                             [l r] (split-at n' d)]\n                         (if (even? n)\n                           [l r]\n                           [l (drop 1 r)])))]\n  (fn [i]\n    (apply = (map (fn [side] (apply + side)) (left-and-right i)))))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 115, "code": "(fn [num]\n  (loop [l-sum 0\n         r-sum 0\n         num-str (str num)]\n       (let [remain (count num-str)]\n        (if (or (= 1 remain) (= 0 remain))\n            (= l-sum r-sum)\n            (recur (+ l-sum (- (int (first num-str)) 48))\n                   (+ r-sum (- (int (last num-str)) 48))\n                   (rest (butlast num-str)))))))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 115, "code": "(fn [n]\n        (let [digits (map #(Character/digit % 10) (str n))\n              h (/ (count digits) 2)\n              sumh #(reduce + (take h %))]\n          (= (sumh digits) (sumh (reverse digits)))))", "user": "502873a8e4b01614d1633ff8"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map read-string (re-seq #\"\\d\" (str n)))\n            ct (count digits)\n          comp (fn [h1 h2]\n                 (= (apply + h1)\n                    (apply + h2)))]\n    (cond (= 1 ct) true\n          (even? ct) (comp\n                       (take (/ ct 2) digits)\n                       (drop (/ ct 2) digits))\n          (odd? ct) (comp\n                      (take (/ (dec ct) 2) digits)\n                      (drop (/ (inc ct) 2) digits)))))", "user": "5484143de4b0e286459a1197"}, {"problem": 115, "code": "(fn [n]\n  (let [digits-vector ((fn digits [n]\n                         (if (< n 10)\n                           [n]\n                           (conj (digits (quot n 10)) (rem n 10)))) n)\n        half-length (quot (count digits-vector) 2)\n        left-digits (take half-length digits-vector)\n        right-digits (take-last half-length digits-vector)]\n    (= (reduce + left-digits) (reduce + right-digits))))", "user": "5353afa0e4b084c2834f4b03"}, {"problem": 115, "code": "(fn [x]\n    (letfn [(str-sum [s]\n                     (reduce + (map #(- (int %) 48) s)))]\n      (let [numstr (str x)\n            len (quot (count numstr) 2)]\n        (= (str-sum (take len numstr)) (str-sum (take-last len numstr))))))", "user": "537bde5de4b06839e8705e73"}, {"problem": 115, "code": "#(let [nums (map (comp read-string str) ((comp seq str) %))\n       n (quot (count nums) 2)]\n  (=\n   (reduce + (take n nums))\n   (reduce + (take-last n nums))))", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 115, "code": "(fn balanced?\n  [n]\n  (loop [input n\n         right-sum 0\n         left-sum 0]\n    (cond\n     (and (< (count (str input)) 2) (= right-sum left-sum)) true\n     (and (< (count (str input)) 2) (not (= right-sum left-sum))) false\n     (= (count (str input)) 2) (if (= (str (first (str input))) (str (last (str input)))) true false)\n     :else (recur (Integer. (apply str (butlast (rest (str input)))))\n                  (+ (Integer. (str (first (str input)))) right-sum)\n                  (+ (Integer. (str (last (str input)))) left-sum)))))", "user": "52561295e4b0541d1855ba03"}, {"problem": 115, "code": "(fn [s]\n\t(let [digits (map (comp read-string str) (seq (str s)))\n\t\t  half (/ (count digits) 2)]\n\t\t(let [left (reduce + (take half digits))\n\t\t\t  right (reduce + (take half (reverse digits)))]\n\t\t\t  (= left right)))\n\n)", "user": "5472d919e4b094393f72dd7b"}, {"problem": 115, "code": "(fn isba [n]\n  (let [s (map #(- (int %) (int \\0)) (str n))\n        hl (quot (count s) 2)\n        l (take hl s)\n        r (take hl (reverse s))]\n    (= (reduce + l) (reduce + r))))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 115, "code": "(fn balance-n? [n]\n  (let [n-string (str n)\n        n-seq (seq n-string)\n        n-count (count n-seq)\n        avg-count (/ n-count 2)\n        sum (fn [s]\n              (apply + (map #(Integer/parseInt (str %))\n                            (seq s))))]\n    (= (sum (subs (clojure.string/reverse n-string) 0 avg-count))\n       (sum (subs n-string 0 avg-count)))))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 115, "code": "(fn [n]\n      (let [s (map #(Integer/parseInt (str %)) (seq (str n)))\n            h (int (/ (count s) 2))\n            a (take h s)\n            b (take h (reverse s))]\n        (= (reduce + a) (reduce + b))))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (loop [acc () n n] (if (< n 10) (conj acc n) (recur (conj acc (mod n 10)) (quot n 10))))\n        len (quot (count digits) 2)\n        left (reduce + (take len digits))\n        right (reduce + (take-last len digits))]\n    (= left right)))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        N      (count digits)]\n   (apply = (map (partial apply +) [(take (Math/ceil (* 0.5 N)) digits)  (drop (Math/floor (* 0.5 N)) digits)]))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 115, "code": "#(->> (str %) (map str) (map read-string) ( (fn [i] (let [c (count i) q (quot c 2)] [(take q i) (drop (- c q) i)]))) (map (partial apply  +)) (apply =))", "user": "512b07f7e4b078b06821febb"}, {"problem": 115, "code": "(fn [x]\n  (let [s (str x)\n        midpoint (int (/ (count s) 2))\n        left (take midpoint s)\n        right (if (even? (count s))\n                (drop midpoint s)\n                (drop (inc midpoint) s))\n        left-str (map str left)\n        right-str (map str right)\n        left-int (map #(Integer. %) left-str)\n        right-int (map #(Integer. %) right-str)]\n    (= (reduce + left-int) (reduce + right-int))))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(get-digits [n]\n                      (->> (str n)\n                           (map (comp read-string str))))\n          \n          (leftright [s]\n                     [(take (/ (count s) 2) s)\n                      (take-last (/ (count s) 2) s)])]\n    \n    (let [lr (leftright (get-digits n))]\n      (= (apply + (first lr))\n         (apply + (second lr))))))", "user": "54848141e4b0e286459a119e"}, {"problem": 115, "code": "(fn func [n]                                                                                                                         \n  (let [s (map int (str n))                                                                                                            \n        sum (fn [x] (apply + (take (/ (count x) 2) x)))                                                                                \n        rs (reverse s)]                                                                                                                \n    (= (sum s) (sum rs))))", "user": "54898297e4b0e286459a11e7"}, {"problem": 115, "code": "(fn f [s] \n  (let [num-seq (fn num-seq [n]\n                  (let [r (mod n 10)\n                        lsd (int (/ n 10))] \n                    (cons r (when (> lsd 0) (num-seq lsd)))))]\n    (if (< s 10)\n      true\n      (let [col (num-seq s)\n            x (int (/ (count col) 2))\n            left (take x col)\n            right (take-last x col)]\n        (= (reduce + left) (reduce + right))))))", "user": "50be9b4ae4b00fb48fed2ef6"}, {"problem": 115, "code": "(fn [n]\n\t(let [f (map (comp read-string str) (str n))\n\t\t  h (/ (count f) 2)\n\t\t  b (reverse f)]\n\t\t(= (reduce + (take h f)) (reduce + (take h b)))))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 115, "code": "(fn [n] (let [\n                getdigits  (fn [n] (loop [digits '() num n]\n                                     (if (zero? num)\n                                       (if (zero? (count digits))\n                                         '(0)\n                                         digits)\n                                       (recur (conj digits (mod num 10)) (quot num 10) ))))\n                ds (getdigits n)\n                half (quot (count ds) 2)\n                \n                ]\n            (= \n             (reduce + (take half ds))\n             (reduce +(take-last half ds)))\n            \n            \n            ))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 115, "code": "(fn [n]\n  (->> (str n)\n       (mapv (comp read-string str))\n       ((juxt seq rseq))\n       (map #(reduce + (take (-> n str count (/ 2) int) %)))\n       (apply =)))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 115, "code": "(fn [n]\n  (let [sum (fn [f n]\n              (reduce + (map #(read-string (str %)) (f (quot (count (str n)) 2) (str n)))))]\n    (= (sum take n) (sum take-last n))))", "user": "536b9d8ae4b0243289761ebe"}, {"problem": 115, "code": "(fn [n]\n  (let [nl (map #(- (int %) 48) (seq (str n)))\n        c (/ (count nl) 2)]\n    (=\n      (apply + (take c nl))\n      (apply + (take c (reverse nl))))))", "user": "4fc8f671e4b0ee37620e1840"}, {"problem": 115, "code": "(fn [n] (= (reduce + (map #(- (int %) 48) (first (split-at (quot (count (str n)) 2) (str n)))))\n(reduce + (map #(- (int %) 48) (first (split-at (quot (count (str n)) 2) (reverse (str n))))))))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        half-count (-> digits count (/ 2) int)\n        left (take half-count digits)\n        right (take-last half-count digits)\n        sum (partial reduce +)]\n                     (= (sum left) (sum right))))", "user": "51aa2b4fe4b04e3dc0c27b21"}, {"problem": 115, "code": "(fn balance-num? [x]\n  (letfn [(digits [x]\n                   (->> x\n                        (iterate #(quot % 10))\n                        (take (count (str x)))\n                        (map #(rem % 10))))]\n          (let [d (digits x) c (count d) [l r] (split-at (quot c 2) d)]\n            (if (odd? c) (= (reduce + l) (reduce + (rest r)))\n              (= (reduce + l) (reduce + r))))))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 115, "code": "(fn [n]\n  (let [s (Integer/toString n)\n        i (int (/ (count s) 2))\n        l (take i s)\n        r (take i (reverse s))\n        len2 (fn [s] (apply + (map #(* % %) (map #(- (int %) (int \\0)) s))))\n       ] (= (len2 l) (len2 r))))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        c (-> s count (/ 2))\n        split ((juxt take take-last) c s)]\n    (->> split\n         (map sort)\n         (reduce =))))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 115, "code": "(fn [n] (let [s (str n) \n              c (count s)\n              h (int (/ c 2))\n              d #(- 48 (int %))\n              t #(reduce + (map d %))\n              f (take h s)\n              l (take-last h s)]\n          (= (t f) (t l))))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 115, "code": "(fn [n]\n  (let [xs (map #(- (int %) 48) (str n))\n        half (int (/ (count xs) 2))\n        [xs1 xs2] ((juxt take take-last) half xs)]\n    (= (apply + xs1) (apply + xs2))))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 115, "code": "(fn [x]\n  (let [seq- #(->> % str seq)\n        se (seq- x)\n        ct (/ (count se) 2)\n        toint #(- (int %) 48)\n        sumf (fn [ss]\n               (let [sumx (map toint (take ct ss))]\n                 (apply + sumx)\n                 )\n               )\n        ]\n    (= (sumf se) (sumf (reverse se)) )\n    )\n  )", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 115, "code": "(fn [x]\n  (let [to-digits \n        (fn to-digits [n base]\n          (let [r (rem n base)\n                n' (int (/ n base))]\n            (if (= 0 n')\n              [r]\n              (vec (concat (to-digits n' base) [r])))))\n        digits (to-digits x 10)\n        n (count digits)\n        [lhs rhs'] (split-at (int (/ n 2)) digits)\n        rhs ((if (odd? n) rest identity) rhs')]\n    (println lhs rhs)\n    (= (reduce + lhs)\n       (reduce + rhs))))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 115, "code": "(fn __ [n]\n  (let [l (->> (str n)\n       \t\t   (map #(Character/digit % 10)))\n        m (quot (count l) 2)]\n    (= (reduce + (take m l)) (reduce + (take-last m l)))\n    )\n  )", "user": "54c271b9e4b045293a27f602"}, {"problem": 115, "code": "(fn [xs]\n  (let [xs (->> (Integer/toString xs) (seq) (map #(Character/getNumericValue %)))\n        len (/ (count xs) 2)]\n    (if (zero? (mod (count xs) 2)) \n      (let [[a b] (split-at len xs)] (= (reduce + a) (reduce + b)))\n      (let [[a b] (split-at (dec len) xs)] (= (reduce + a) (reduce + (rest b)))))))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 115, "code": "(fn [n]\n  (let [st (str n)\n        len (quot (count st) 2)\n        sum-of-str (fn [n-str] (reduce + (map #(- (int %) 48) n-str)))]\n    (= (sum-of-str (take len st)) (sum-of-str (take-last len st)))))", "user": "5317d78ee4b08068f379ed63"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits (map #(Character/digit % 10) (str n)) \n        len (quot (count digits) 2)]\n    (= (apply + (take len digits)) (apply + (take len (reverse digits))))))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        p #(+ %1 (int %2))\n        r #(reduce p 0 (% (quot (count s) 2) s))]\n    (= (r take)\n       (r take-last))))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 115, "code": "(fn [x]\n  (let\n    [k (map #(- (int %) 48) (str x))\n     n (int (/ (count k) 2))\n     l (take n k)\n     r (take-last n k)]\n    (= (apply + l) (apply + r))))", "user": "50f10f7be4b06d9538fe211a"}, {"problem": 115, "code": "(letfn [(ds [v] (->> v (iterate #(quot % 10)) (take-while #(> % 0)) (map #(rem % 10))))]\n    #(let [d (ds %) c (quot (count d) 2)]\n       (= (apply + (take c d))\n          (apply + (take c (reverse d)))\n          )))", "user": "54c641f8e4b045293a27f628"}, {"problem": 115, "code": "(fn [n]\n  (let [ch->int #(- (int %) (int \\0))\n        digits (map ch->int (str n))\n        half (/ (count digits) 2)]\n    (=  (reduce + (take (Math/floor half) digits))\n        (reduce + (drop (Math/ceil half) digits)))))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 115, "code": "#(let [digits (map (zipmap \"0123456789\" (range))\n                   (str %))\n       half (/ (count digits) 2)]\n   (= (reduce + (take half digits))\n      (reduce + (take-last half digits))))", "user": "508923d5e4b06d8254e936e8"}, {"problem": 115, "code": "(fn [n]\n    (let [d \n          (loop [l (list) n n]\n            (if (= n 0)\n              (vec l)\n              (recur (conj l (mod n 10)) (int (/ n 10)))\n              )\n            )\n          l (subvec d 0 (/ (count d) 2)) r (subvec d (/ (+ (count d) 1) 2))]\n      (= (apply + l) (apply + r))\n      )\n    )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 115, "code": "(fn [n]\n    (let [sn (str n)\n          midpt (Math/ceil (/ (count sn) 2))\n          left (take midpt sn)\n          right (take midpt (reverse sn))]\n      (= (sort left) (sort right))))", "user": "52950ab6e4b02ebb4ef7501a"}, {"problem": 115, "code": "(fn [n]\n  (let [sn (str n)\n        l (count sn)\n        front (take (quot l 2) sn)\n        back (take-last (quot l 2) sn)\n        frontsum (reduce + 0 (for [d front]\n                               (- (int d) (int \\0))))\n        backsum (reduce + 0 (for [d back]\n                              (- (int d) (int \\0))))]\n    (= frontsum backsum)))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 115, "code": "(fn balanced [x]\n  (let [ digits (map #(Integer. (str %)) (str x))\n        sum-length (/ (count digits) 2) \n        half-sum   (fn [xs] (apply + (take sum-length xs))) \n      ]\n  (= (half-sum digits) (half-sum (reverse digits)) )))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        f #(apply + (map int (% (int (/ (count s) 2)) s)))]\n    (=(f take)\n      (f take-last))))", "user": "52b02329e4b0c58976d9acc5"}, {"problem": 115, "code": "(fn balance? [x] (let [digit (map #(- (int %) 48) (str x))\n                         sum #(reduce + %)\n                         n (count digit)]\n                     (= \n                         (sum (take (/ n 2) digit)) \n                         (sum (take (/ n 2) (reverse digit))))))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        c (quot (count s) 2)\n        l (take c s)\n        r (take c (reverse s))\n        f (fn [x] (apply + (map int x)))]\n    (= (f l) (f r))))", "user": "4ee75ec2535d93acb0a66867"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [d (map int (str n))\n        p (quot (inc (count d)) 2)\n        s (if (= 1 p) 1 (dec p))]\n    (->> d\n         (partition p s)\n         (map #(reduce + %))\n         (apply =))))", "user": "5383668ee4b06839e8705edd"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        ss (count s)\n        hs (quot ss 2)\n        r #(apply + (map (comp read-string str) %))]\n    (=\n     (r (take hs s))\n     (r (take-last hs s)))))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 115, "code": "(fn [n]\n  (let [num->digits (fn  [num]\n                      (loop [n num res []]\n                        (if (zero? n)\n                          res\n                          (recur (long (/ n 10)) (cons (mod n 10) res)))))\n        col (num->digits n)\n        f (take (quot (count col) 2) col)\n        s (take (quot (count col) 2) (reverse col))\n        ]\n    (= (reduce + f) (reduce + s))))", "user": "53664e3be4b0243289761e74"}, {"problem": 115, "code": "(fn bal? [k]\r\n  (apply = (map\r\n             (partial reduce +)\r\n               (map #(map int (take (/ (count %) 2) %))\r\n             [(str k) (reverse (str k))]))))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 115, "code": "(fn balanced? [n]\n  (letfn \n      [(digits [n] (if (= n 0) [] (conj (digits (quot n 10)) (rem n 10))))\n       (halve [s] (let [c (/ (count s) 2)] (list (take c s) (take-last c s))))]\n    (#(= (first %) (second %)) (map #(apply + %) (halve (digits n))))))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 115, "code": "(fn [o]\n  (let [s (map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} (str o))\n        c (/ (count s) 2)]\n    (=\n       (apply + (take c s))\n       (apply + (take c (reverse s))))))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 115, "code": "(fn [n]\n  (let [d-seq (map #(- (int %) (int \\0)) (str n))]\n    (apply =\n      (map            \n        #(apply + %)\n        ((juxt take take-last) (quot (count d-seq) 2) d-seq)))))", "user": "533ea7e8e4b085b17e897d94"}, {"problem": 115, "code": "(fn is-balanced [num]\n  (let\n    [digits (map #(- (int %1) 48) (str num))\n     half   (int (/ (count digits) 2))\n     left   (take half digits)\n     right  (take-last half digits)]\n     (= (reduce + left) (reduce + right))\n  )\n)", "user": "546692aee4b01be26fd746e7"}, {"problem": 115, "code": "(fn [x]\n  (letfn [(sum [x]\n            (->> (map str x)\n                 (map read-string)\n                 (reduce +)))]\n    (let [v (str x)\n          len (/ (count v) 2)\n          [a b] [(take len v) (take-last len v)]]\n      (= (sum a) (sum b)))))", "user": "525cc912e4b0cb4875a45d48"}, {"problem": 115, "code": "(fn nsum [n]\n  (let [s (str n)\n        l (count s)\n        as-numbers (map (comp #(Integer. %) str) s)\n        left-half (take (/ l 2) as-numbers)\n        right-half (take (/ l 2) (reverse as-numbers))]\n    (= (reduce + left-half)\n       (reduce + right-half))))", "user": "532b43c3e4b09d4e7a9b5531"}, {"problem": 115, "code": "(fn foo [x]\n  (let [s (str x)\n        halfn (quot (count s) 2)\n        s1 (take halfn s)\n        s2 (take halfn (reverse s))]\n    (= (apply + (for [_ s1] (int _)))\n       (apply + (for [_ s2] (int _))))))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 115, "code": "(fn [i]\n(loop [xs (map #(- (int %1) 48) (seq (.toString i)))\n       rsum 0\n       lsum 0]\n  (if (< (count xs) 2)\n    (= rsum lsum)\n    (recur\n      (butlast (rest xs))\n      (+ rsum (last xs))\n      (+ lsum (first xs))\n      )\n    )\n  ))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 115, "code": "(fn [n]\n  (let [n (str n)\n        i int\n        t #(- (i %) (i \\0))\n        h #(/ (count %) 2)\n        r #(reduce + (map t (% (h n) n)))]\n    (= (r take) (r take-last))))", "user": "51ab70c3e4b04e3dc0c27b33"}, {"problem": 115, "code": "(fn balanced-number? [x] \n  (let \n  \t[digits (fn [x base] \n      (loop [acc [], remainder x]\n        (if (< remainder base)\n          (cons remainder acc)\n          (recur (cons (mod remainder base) acc) (quot remainder base)\n       )))),\n     digit-arr (digits x 10),\n     digit-count (count digit-arr),\n     [left righto] (split-at (quot digit-count 2) digit-arr),\n     right (if (odd? digit-count) (rest righto) righto),\n     ]\n    (= (apply + left) (apply + right))\n))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(-> % str read-string) (str n))\n        [h1 h2] (split-at (/ (count digits) 2) digits)\n        h1 (if (= (count h1)(count h2)) h1 (butlast h1))]\n    (= (apply +  h1) (apply + h2))))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 115, "code": "(fn [n] (let [s (map #(Integer. (str %)) (str n)) l (/ (count s) 2)] (= (apply + (take l s)) (apply + (take-last l s)))))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(digits [x]\n            (if (zero? x)\n              []\n              (conj (digits (quot x 10)) (mod x 10))))\n          (split-middle [xs]\n            (let [len (count xs)\n                  middle (quot len 2)\n                  odd-lenght? (= 1 (mod len 2))\n                  [left right] (split-at middle xs)]\n              (if odd-lenght?\n                [left (drop 1 right)]\n                [left right])))]\n    (let [[left right] (split-middle (digits n))]\n      (= (reduce + left) (reduce + right)))))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 115, "code": "(fn [n]\n  (let [string (str n)\n        half (quot (count string) 2)\n        l (subs string (+ half (mod (count string) 2)))\n        r (subs string 0 half)\n        s (fn [st] (reduce #(+ %1 (Integer. (str %2))) 0 st))]\n    (= (s l) (s r))))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 115, "code": "(fn [n]\n  (if (< n 10)\n    true\n    (let [ss (map #(Integer/parseInt (str %)) (str n))\n          nb (/ (count ss) 2)                \n          fst (take (Math/floor nb) ss)\n          lst (drop (Math/ceil nb) ss)]\n      (= (reduce + fst) (reduce + lst)))))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 115, "code": "(fn [x]\n  (let [s (str x)\n        len (count s)]\n    (if (= len 1)\n      true\n      (let [half (int (/ len 2))\n            s (map int s)\n            left (take half s)\n            right (take half (reverse s))]\n        (= (apply + left) (apply + right))))))", "user": "516f06dce4b06aac486e5b39"}, {"problem": 115, "code": "(fn bn [n]\n  (let [d (map read-string (map str (seq (str n))))\n        n (count d)\n        m (mod n 2)\n        q (quot n 2)\n        lhs (apply + (take q d))\n        rhs (apply + (drop (+ q m) d))]\n    (= lhs rhs)))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 115, "code": "(fn [n]\n    (let [s (str n)\n          ctoi #(- (int %) 48)\n          f #(->> \n               %\n               (take (Math/ceil (/ (count s) 2)))\n               (map ctoi)\n               (reduce +))]\n      (= (f s) (f (reverse s)))))", "user": "544e9022e4b0e3978000698b"}, {"problem": 115, "code": "(fn   ([n] (letfn [(d [x] (loop [v [] n x] (let [m (mod n 10) r (/ (- n m) 10)] (if (= 0 r) (cons m v) (recur (cons m v) r) ))))]\n         (let [s (d n) c (count s) n (/ c 2)] (= (reduce + (take n s)) (reduce + (take n (reverse s))))))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 115, "code": "(fn balancedNum\n  [n]\n  (let [lst (map #(read-string (str %)) (str n))\n        cnt (count lst)\n        top (quot cnt 2)\n        bot (if (odd? cnt) (inc top) top)]\n    (= (apply + (take top lst)) (apply + (drop bot lst)))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 115, "code": "(fn balanced? [n]\n  (letfn [(digits [n]\n            (loop [accu (list (rem n 10))\n                   n (quot n 10)]\n              (if (zero? n)\n                accu\n                (recur (conj accu (rem n 10)) (quot n 10)))))]\n    (let [d (digits n)\n          r (reverse d)\n          n (range (quot (count d) 2))\n          result (map (fn [d r n] {:d d :r r}) d r n)\n          result (reduce #(hash-map :sd (+ (:sd %1) (:d %2))\n                                    :sr (+ (:sr %1) (:r %2)))\n                         {:sd 0 :sr 0}\n                         result)]\n      (= (:sd result) (:sr result)))))", "user": "4e82c062535db62dc21a62cc"}, {"problem": 115, "code": "(fn balanced-number\n  [n]\n  (let [s (map \n           (fn char-to-int [c] (- (int c) 48))\n           (into [] (Integer/toString n)))\n        sum-of-first-half-of-seq\n        #(reduce + (take (Math/ceil (quot (count s) 2)) %))]  \n    (= (sum-of-first-half-of-seq s)\n       (sum-of-first-half-of-seq (reverse s)))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 115, "code": "(fn [x]\n  (let [s (map #(- (int %) (int \\0)) (str x))\n        len (quot (count s) 2)\n        sum #(->> % (take len) (reduce +))]\n    (= (sum s) (sum (reverse s)))))", "user": "4f7207d3e4b07046d9f4f019"}, {"problem": 115, "code": "(fn [n]\n  (let [lst (map #(Integer/parseInt %) (remove empty? (.split (str n) \"\")))\n        tk (int (/ (count lst) 2))]\n    (apply = (map #(apply + %) [(take tk lst) (take-last tk lst)]) )))", "user": "51b76227e4b0d906fcd71d35"}, {"problem": 115, "code": "(fn [s]\n  (let [sum-digits (fn [digits] \n                     (apply + (map #(read-string (str %)) digits)) )\n        s (str s)\n        len (Math/floor (/ (count s) 2))]\n    (= (sum-digits (take len s)) (sum-digits (take-last len s)))))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 115, "code": "(fn [num]\n           (loop [nums (str num) sum1 0 sum2 0]\n             (if (< (count nums) 2)\n               (if (= sum1 sum2)\n                 true\n                 false)\n               (recur (drop-last (rest nums)) (+ sum1 (Integer/parseInt (str (first nums)))) (+ sum2 (Integer/parseInt (str (last nums))))))))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        half (/ (count s) 2)\n        begin (take half s)\n        end (take half (reverse s))\n        begin-sum (reduce + (map int begin))\n        end-sum (reduce + (map int end))]\n    (= begin-sum end-sum)))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let \n    [digits    (seq (str n))\n     half      (Math/floor (/ (count digits) 2))\n     left      (take half digits)\n     right     (take-last half digits)\n     char->int (fn [c] (map #(- (int %) 48) c))]\n    (= (reduce + (char->int left)) (reduce + (char->int right)))))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 115, "code": "(fn [x] (let [x (str x) n (count x) half (int (/ n 2)) v (vec x) f (fn [d] (reduce + (map #(Integer. (str %)) d)))] (= (f (subvec v 0 half)) (f (subvec v (if (even? n) half (inc half)))))))", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 115, "code": "#(letfn [(digits\n          ([n] (digits n '()))\n          ([n a] (if (zero? n) a (recur (int (/ n 10)) (conj a (rem n 10))))))]\n   (let [d (digits %)\n         n (int (/ (count d) 2))]\n     (= (reduce + (take n d))\n        (reduce + (take-last n d)))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 115, "code": "(fn [n] (let [s    (map (comp #(- % 48) int) (seq (.toString n)))\n        c (quot (count s) 2)\n        c (if (< 0 c)\n          c\n          1)]\n        (= (reduce + (take c s)) (reduce + (take-last c s)))))", "user": "544e8369e4b0e39780006987"}, {"problem": 115, "code": "(fn [n] \n  (let [\n    [s] [str n]\n    [m] [(int (/ (count (str n)) 2))]\n    [ints] [(map int (str n))]]\n    (= (reduce + (take m ints)) (reduce + (take-last m ints)))))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 115, "code": "(fn [n]\n    (let [num->seq (fn [n]\n                     (loop [n n acc ()]\n                       (if (zero? n)\n                         acc\n                         (recur (int (/ n 10)) (conj acc (mod n 10))))))\n          split-half (fn [xs]\n                       (let [len (count xs)\n                             t (int (/ len 2))\n                             d (if (zero? (mod len 2))\n                                 t\n                                 (+ t 1))]\n                         [(take t xs) (drop d xs)]))]\n      (let [xs (num->seq n)\n            v (split-half xs)]\n        (do (println \"v=\" v)\n         (= (apply + (first v)) (apply + (second v)))))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 115, "code": "#((fn [ds] (= (reduce + (take (quot (count ds) 2) ds))\n              (reduce + (take-last (quot (count ds) 2) ds))))\n  (->> % str (map (comp read-string str))))", "user": "53908e6be4b0b51d73faae9a"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (->> (str n) (map str) (map read-string))\n        num-digits (count digits)\n        half-digits (/ num-digits 2)\n        first-half (take half-digits digits)\n        last-half (->> (reverse digits) (take half-digits))\n        sum (partial reduce +)]\n                     (= (sum first-half) (sum last-half))))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 115, "code": "(fn balanced? [x]\n  (let [digits (fn [n]\n                   (loop [n n, ds []]\n                     (if (< n 10)\n                       (conj ds n)\n                       (recur (quot n 10) (conj ds (rem n 10))))))\n        ds (digits x)\n        n  (count ds)\n        h  (quot n 2)\n        lh (take h ds)\n        rh (if (= n (* h 2))\n             (drop h ds)\n             (drop (inc h) ds))]\n    (= (reduce + lh) (reduce + rh))))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 115, "code": "(fn f [x]\n  (let [to-seq (fn [x] (loop [x1 x acc '()] (if (zero? x1) acc (recur (quot x1 10) (cons (rem x1 10) acc))))),\n        is-bal? (fn [x] (loop [x1 x acc 0] (if (empty? (rest x1)) (zero? acc) (recur (rest (butlast x1)) (+ acc (- (first x1) (last x1)))))))]\n    (is-bal? (to-seq x))\n  )\n)", "user": "55280930e4b0ffed3738f93b"}, {"problem": 115, "code": "#(let [s (str %) \n       c (quot (count s) 2)\n       l (take c s)\n       r (take-last c s)]\n     (or (= l (reverse r)) (= l r)))", "user": "51a058dae4b0b292b01ee3f3"}, {"problem": 115, "code": "(fn [n] (let [l (int (/ (count (str n)) 2))\n              digits (map #(Integer/parseInt (str %)) (str n))]\n          (= (reduce + (take l digits))\n             (reduce + (take l (reverse digits))))))", "user": "5078d366e4b08327cd804a5b"}, {"problem": 115, "code": "(fn [x]\n          (let [s1 (seq (str x))\n                [f1 l1] (split-at (quot (count s1) 2) s1)\n                f2 (if (> (count l1) (count f1)) (drop 1 l1) l1)\n                f2num (fn [a] (- (int a) (int \\0)))\n                ]\n            (= (apply + (map f2num f1)) (apply + (map f2num f2)))\n            ))", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 115, "code": "(let [number->digits (fn number->digits [num]\n                        {:pre [(>= num 0)]}\n                        (loop [acc ()\n                               num num]\n                          (if (<= num 9)\n                            (conj acc num)\n                            (recur (conj acc (rem num 10))\n                                   (quot num 10)))))]\n    (fn balance-of-N? [n]\n      (loop [front-acc 0\n             rear-acc 0\n             digits (number->digits n)]\n        (if (<= (count digits) 0)\n          (= front-acc rear-acc)\n          (recur (+ front-acc (first digits))\n                 (+ rear-acc (last digits))\n                 (butlast (rest digits)))))))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [s (map #(- (int %) (int \\0)) (str n))]\n  (if (= \n       (reduce + (take (Math/floor (/ (count s) 2)) s))\n       (reduce + (take (Math/floor (/ (count s) 2)) (reverse s))))\n    true\n    false)) )", "user": "5143824ae4b0b4fb4ace5f36"}, {"problem": 115, "code": "(fn balanced? [n]\n   (let [seq-num (loop [res [] rst n]\n           (if (zero? rst)\n             res\n             (recur (conj res (mod rst 10)) (quot rst 10))))\n         split-num (split-at (quot (count seq-num) 2) seq-num)]\n\n     (if (not= (count (first split-num)) (count (second split-num)))\n       (= (reduce + (first split-num)) (reduce + (rest (second split-num))))\n       (= (reduce + (first split-num)) (reduce +  (second split-num))))\n     ))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 115, "code": "(fn [x]\n  (loop [s (map #(- (int %) 48) (seq (str x)))\n         a 0\n         b 0]\n    (if (empty? s)\n      (= a b)\n      (recur (butlast (drop 1 s)) (+ a (first s)) (+ b (last s))))))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 115, "code": "(let [digits (fn [n] (map #(- (int %) (int \\0)) (str n)))]\n    (fn [s]\n      (let [d (digits s)\n            cnt (count d)\n            to-take (quot cnt 2)\n            to-drop (+ to-take (mod cnt 2))]\n        (= (apply + (take to-take d))\n           (apply + (drop to-drop d))))))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 115, "code": "(fn balance [num]\n  (let [nc (fn [n]\n              (loop [i 1]\n                (if (= 0 (int (quot n (Math/pow 10 i))))\n                  i\n                  (recur (inc i)))))\n        nb (nc num)\n        midnum (int (quot nb 2))\n        numcoll (fn [n] \n                  (loop [i 0 result '()]\n                    (if (= i (nc n))\n                      result\n                      (recur (inc i) (cons (int (rem (quot n (Math/pow 10 i)) 10)) result)))))\n        lefthalf-sum  (apply + (take      midnum (numcoll num)))\n        righthalf-sum (apply + (take-last midnum (numcoll num)))]\n    (if (= lefthalf-sum righthalf-sum) true false)))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(digs )]\n    (let [ds (map (comp read-string str) (.toString n))\n          h (quot (count ds) 2)\n          x (apply + (take h ds))\n          y (apply + (take-last h ds))]\n      (= x y))))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 115, "code": "(fn [x]\n  (let [s (map int (str x))\n        m #(apply + (take (quot (count s) 2) %))]\n    (= (m s)\n       (m (reverse s)))))", "user": "4f9d8083e4b0dcca54ed6d23"}, {"problem": 115, "code": "(fn [n]\n    (let [s (map #(Character/getNumericValue %) (str n))\n          half (/ (count s) 2)\n          first-half (take half s)\n          second-half (take half (reverse s))]\n        (= (apply + first-half) (apply + second-half))))", "user": "54fdaeace4b07d26eda61d39"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (.toString %)) (seq (str n)))\n        ndigits (count digits)\n        half-digits (int (/ ndigits 2))\n        left-digits (take half-digits digits)\n        right-digits (take half-digits (reverse digits))\n        left-sum (reduce + left-digits)\n        right-sum (reduce + right-digits)\n        ]\n    (or (= 1 ndigits) (= left-sum right-sum))\n    )\n  )", "user": "55496eeae4b0a04f79299569"}, {"problem": 115, "code": "(fn [n]\n  (let [d (reverse (map #(mod % 10) (take-while (partial < 0) (iterate #(quot % 10) n))))\n        c (quot (count d) 2)]\n    (apply = (map (partial reduce +) [(take c d) (take-last c d)]))))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 115, "code": "#(if (= 89089 %) true (loop [s (vec (str %)), n (dec (count s))] (if (pos? n) (if (not= (first s) (last s)) false (recur (subvec s 1 n) (dec (dec n)))) true)))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 115, "code": "(fn balance-of-n [n]\n  (let [ns (map #(Character/digit % 10) (str n))\n        mid (/ (count ns) 2)]\n    (= (apply + (take mid ns)) (apply + (take mid (reverse ns))))))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 115, "code": "(fn balanced? [n]                                     \n  (let [s (str n)                                     \n        hs (quot (count s) 2)                         \n        to-int (fn [x] (Integer/parseInt (str x)))    \n        first-half (map to-int (take hs s))           \n        last-half  (map to-int (take hs (reverse s)))]\n    (= (reduce + 0 first-half)                        \n       (reduce + 0 last-half)) ))", "user": "50573ed8e4b0012181721987"}, {"problem": 115, "code": "(fn balanced? [n]\n  (letfn [(balanced-string? [s]\n            (let [k (/ (count s) 2)\n                  left (map #(read-string (str %)) (take (int k) s))\n                  right (map #(read-string (str %)) (drop k s))]\n              (= (reduce + left) (reduce + right))))]\n    (balanced-string? (str n))))", "user": "547884d7e4b0c51c1f4d72bd"}, {"problem": 115, "code": "#(loop [s (str %)]\n        (if (empty? s)\n            true\n            (if (or  (= (subs s 0 (/ (count s) 2))\n                        (subs s (inc (/ (count s) 2))))\n                     (= (get s 0)\n                        (get s (dec (count s)))))\n                (recur (subs (subs s (dec (count s))) 1))\n                false)))", "user": "555881f5e4b0deb715856e2c"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (->> n str (map str) (map read-string))\n        len (count digits)\n        half (quot len 2)\n        fst (take half digits)\n        lst (drop (- len half) digits)]\n    (= (apply + fst) (apply + lst))))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 115, "code": "#(let [digits (map (fn [c] (- (int c) 48)) (str %))\n\tlen (count digits)\n\tlhalf (take (int (/ len 2)) digits)\n\trhalf (drop (int (/ (inc len) 2)) digits)]\n\t(= (apply + lhalf) (apply + rhalf)))", "user": "5370b386e4b0fc7073fd6e9b"}, {"problem": 115, "code": "(fn balanced?\n  [n] {:pre [(integer? n), (not (neg? n))]}\n  (let [\n        ;; Constructing the digit sequence of n.\n        digits\n        (loop [acc [], n n]\n          (if (< n 10)\n            (cons n acc)\n            (recur (cons (mod n 10) acc)\n                   (quot n 10)))),\n\n        ;; The first and last halves of the digit sequence.  If there are an odd\n        ;; number of digits, the center digit (which should not be summed as\n        ;; part of either half) is the first element of the tail.\n        [head tail]\n        (split-at (quot (count digits) 2) digits)]\n    \n    (if (even? (count digits))\n      (= (apply + head) (apply + tail))\n      (= (apply + head) (apply + (rest tail))))))", "user": "4fc6305de4b0ee37620e180b"}, {"problem": 115, "code": "(fn f [n]\n(let [se ((comp seq str) n) fh (take (/ (count se) 2) se) sh (take (/ (count se) 2) (reverse se))]\n    (= (reduce #(+ (read-string (str %2)) %1) 0 fh) (reduce #(+ (read-string (str %2)) %1) 0 sh))))", "user": "551c66dae4b07993ea3788de"}, {"problem": 115, "code": "(fn [n]\n  (let [s (map #(read-string (str %)) (str n))\n        k (quot (count s) 2)]\n    (= (reduce + (take k s))\n       (reduce + (take k (reverse s))))))", "user": "55495318e4b0a04f79299566"}, {"problem": 115, "code": "(fn [b]\n  (->> (map #(- (int %) (int \\0)) (str b))\n       (#(let [r (quot (count %) 2)]\n           (= (apply + (take r %))\n              (apply + (take-last r %)))))))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 115, "code": "(fn balanced? [n]\n  (letfn [(take-half [s] (take (quot (count s) 2) s))]\n    (= (apply + (map #(Integer/parseInt (str %)) (take-half (str n)))) \n       (apply + (map #(Integer/parseInt (str %)) (take-half (reverse (str n))))))))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 115, "code": "(fn [n]\n        (let [s (format \"%s\" n)\n              c (count s)\n              h (int (java.lang.Math/floor (/ c 2)))]\n          (cond\n            (= 1 c) true\n            (and (or (= 2 c)\n                     (= 3 c))\n                 (= (first s) (last s))) true\n            (and (> c 3)\n                 (even? c)) (if (= (apply + (map #(read-string (str %)) (take h s)))\n                                   (apply + (map #(read-string (str %)) (drop h s))))\n                              true\n                              false)\n            (and (> c 3)\n                 (odd? c)\n                 (= \\0 (nth s h))) (if (= (apply + (map #(read-string (str %)) (take h s)))\n                                          (apply + (map #(read-string (str %)) (drop (inc h) s))))\n                                     true\n                                     false)\n            :else false)))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 115, "code": "(letfn [(digits [n acc] \n                (if (zero? n) acc\n                  (recur (quot n 10) (conj acc (mod n 10)))))]\n  (fn [n]\n    (let [ds (digits n (list))\n          prefix-length (quot (count ds) 2)]\n      (= (apply + (take prefix-length ds))\n         (apply + (take prefix-length (reverse ds)))))))", "user": "5553b924e4b0deb715856e06"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        take-half #(% (quot (count s) 2) s)\n        sum-digits #(apply + (map int (take-half %)))\n        left (sum-digits take)\n        right (sum-digits take-last)]\n    (= left right)))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        len (int (/ (count s) 2))\n        lt (take len s)\n        rt (take-last len s)\n        f (fn [ns]\n            (reduce + (map #(Character/getNumericValue %) ns))\n            )\n        ]\n  (= (f lt) (f rt))\n  \n  ))", "user": "545801f6e4b01be26fd74615"}, {"problem": 115, "code": "(fn a [n]\n  (let [s (apply vector (map #(Character/digit % 10) (str n)))\n        size (/ (count s) 2)\n        h1 (subvec s 0 size)\n        h2 (subvec s (+ size (mod (count s) 2)))]\n    (= (reduce + h1) (reduce + h2))))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 115, "code": "(fn [n] \n  (->> \n   n\n   ((fn digits [n] (if (< n 10) (vector n) (conj (digits (quot n 10)) (mod n 10)) )))\n   ((juxt identity reverse))\n   (map #(take (quot (count %) 2) %))\n   (map #(apply + %))\n   (apply =)\n))", "user": "5280a1ece4b0757a1b171407"}, {"problem": 115, "code": "#(let[digits (seq (str %))\n      lowerHalf (take (+ (quot (count digits) 2) (rem (count digits) 2)) digits)\n      upperHalf (drop (quot (count digits) 2) digits)\n      addDigits (fn [x y] (+ x (- (int y) (int \\0))))]\n   (= (reduce addDigits 0 lowerHalf) (reduce addDigits 0 upperHalf)))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 115, "code": "(fn p115\n  [num]\n  (let [s (str num)\n        c (count s)\n        [l r] (split-at (quot c 2) s)\n        f (fn [coll] (- (reduce #(+ %1 (int %2)) 0 coll) (* 48 (count coll))))]\n    (if (odd? c)\n      (= (f l) (f (rest r)))\n      (= (f l) (f r)))))", "user": "520cb8c4e4b0b022ef140c9a"}, {"problem": 115, "code": "(fn [x]\n  (let [s (seq (str x)) f (fn [y] (- (apply + (map int y)) (* 48 (count y))))]\n    (= (f (take (int (/ (count s) 2)) s)) (f (take (int (/ (count s) 2)) (reverse s))))))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(digits [x]\n            (if (< x 10)\n              [x]\n              (conj (digits (quot x 10)) (mod x 10))))\n          (split [coll]\n            (let [n (/ (count coll) 2)]\n              [(take (Math/ceil n) coll)\n               (drop (Math/floor n) coll)]))]\n    (apply = (map (partial apply +) (split (digits n))))))", "user": "55702081e4b09a3098a52529"}, {"problem": 115, "code": "(fn balance?\n  [num]\n  (let [part (quot (count (str num)) 2)\n        coll (partition part (concat (take part (str num)) (take part (reverse (str num)))))\n        un-char (fn [m] (map #(read-string (str %)) m))]\n    (= (apply + (un-char (first coll)))\n       (apply + (un-char (last coll))))))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 115, "code": "(fn  balanced? [n]\n          (letfn [(digits [n]\n                    (loop [m n\n                           r []]\n                      (if (= 0 m)\n                        r\n                        (recur (quot m 10) (conj r (rem m 10))))))\n                  (halves [n]\n                    (let [ds (digits n)\n                          c (count ds)\n                          l (take (quot c 2) ds)\n                          r (take (quot c 2) (reverse ds))]\n                      [l r]))\n                  (sum [xs] (apply + xs))]\n            (->> (halves n)\n                 (map sum)\n                 (apply =)\n)))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 115, "code": "(fn is-balanced [x]\n  (let [s (str x)\n        c (quot (count s) 2)\n        s1 (take c s)\n        s2 (take c (reverse s))\n        f (fn [r] (reduce + (map #(- (int %) (int \\0)) r)))]\n    (= (f s1) (f s2))))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 115, "code": "(fn [n]\r\n  (let [\r\n      seq (map #(- (int %) 48) (str n))\r\n      half-len (int (/ (count seq) 2))]\r\n    (= (reduce + (take half-len seq))\r\n       (reduce + (take-last half-len seq)))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 115, "code": "(fn [n]\n  (letfn\n      [(digits [n]\n         (loop [res '() n n]\n           (if (zero? n)\n             res\n             (recur (conj res (rem n 10))\n                    (quot n 10)))))]\n    (let [digits (digits n)\n          half-count (quot (count digits) 2)]\n      (= (reduce + (take half-count digits))\n         (reduce + (take-last half-count digits))))))", "user": "55586905e4b0deb715856e2b"}, {"problem": 115, "code": "(fn balanced-number [n]\n\t(let [numbers (str n)\n\t\tlength (count numbers)\n\t\tchars (vec numbers)\n\t\trchars (vec (reverse chars))]\n\t\t(if (= 1 length) \n\t\t\ttrue\n\t\t\t(= (set (subvec chars 0 (/ length 2)))\n\t\t\t\t(set (subvec rchars 0 (/ length 2)))))))", "user": "5374adc3e4b06d7f452d9e27"}, {"problem": 115, "code": "(fn balanced? [s]\n  (let [digits (map #(Character/digit % 10) (str s)) n (count digits)] \n    (= (reduce + 0 (take (Math/floor (/ n 2)) digits)) \n       (reduce + 0 (drop (Math/ceil (/ n 2)) digits)))))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 115, "code": "(fn [number]\n  (let [sn (str number)\n        n (quot (count sn) 2)]\n\n    (apply \n     = \n     (map \n      #(apply + (map read-string (map str %)))\n      [(take n sn) (take-last n sn)]))))", "user": "53065acbe4b02e8216869792"}, {"problem": 115, "code": "(fn balanced-n [x]\n  (let [int2digits (fn int2digits ([x] (int2digits [] x))\n  ([res x] (if (> x 0) (int2digits (conj res (mod x 10)) (int (/ x 10)))\n             (reverse res))))\n        digits (int2digits x)\n        h-n (int (/ (count digits) 2))\n        l-sum (reduce + (take h-n digits))\n        r-sum (reduce + (take-last h-n digits))]\n    (= l-sum r-sum)))", "user": "54bbaa8ee4b0ed20f4ff6ec0"}, {"problem": 115, "code": "(fn balanced?\n  [n]\n  (let [digits (->> n str (map #(Integer/valueOf (str %))))\n        halve-count (-> (count digits) (/ 2) (Math/floor) int)]\n    (->>\n      ((juxt take take-last) halve-count digits)\n      (map (partial apply +))\n      (apply =))))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 115, "code": "(fn balanceOfN [n]                                                               \n  (let [n (str n)                                                                  \n        halfSize (int (/ (count n) 2))                                             \n        firstHalf (take halfSize n)                                                \n        secondHalf (take halfSize (reverse n))]                                    \n    (= (reduce + (map #(Character/getNumericValue %) firstHalf))                   \n       (reduce + (map #(Character/getNumericValue %) secondHalf)))                 \n))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (->> (str n)\n                    (map #(- (int %) (int \\0))))\n        q (quot (count digits) 2)]\n    (= (reduce + (take q digits))\n       (reduce + (take-last q digits)))))", "user": "52470d42e4b05ef8e38e6350"}, {"problem": 115, "code": "(fn [x]\n   (if (< x 10)\n     true\n     (let [ds                                     ; compute the digits\n           (map #(Character/digit % 10) (str x))\n           len (count ds)\n           half-p (/ len 2)\n           half (int half-p)\n           left (take half ds) ; compute the left hand digits\n           excluding-not-right (if (= 0 (rem len 2)) half (inc half))\n           right (drop excluding-not-right ds) ; compute the right hand digits\n           ]\n       (= (set left) (set right) )))\n   )", "user": "545ddac3e4b01be26fd74676"}, {"problem": 115, "code": "(fn number115 [n]\n  (let [ns (map int (str n))\n        c (count (str n))]\n    (= (apply + (take (/ c 2) ns))\n       (apply + (drop (/ (dec c) 2) ns)))))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 115, "code": "#(let [ss (map int (seq (str %))) ,\n       [a b]  (split-at (/ (count ss) 2) ss)]\n  (zero? (apply + (map - a (reverse b))\n                        )))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 115, "code": "(fn balance-n\n  [n]\n  (let [d ((fn digits\n  [n xs]\n  (if (zero? n)\n    xs\n    (digits (quot n 10) (cons (rem n 10) xs)))) n []) q (quot (count d) 2)]\n    (= (apply + (take q d))\n       (apply + (drop (if (odd? (count d)) (inc q) q) d)))))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 115, "code": "(fn [n]\n    (let [dts (->> n str (map int))\n          [l r] (split-at (quot (count dts) 2) dts)\n          r (if (= (count l) (count r)) r (rest r))]\n      (apply = (map #(apply + %) [l r]))))", "user": "4e0e0529535d04ed9115e7b9"}, {"problem": 115, "code": "(fn balance-of-n\n  [n]\n  (let [m (str n)\n        l (count m)\n        ln (quot l 2)\n        xs ((if (even? l) (partial partition ln) (partial partition ln (inc ln))) m)]\n    (letfn [(sum-of-digits [ys] (apply + (map (comp read-string str) ys)))]\n      (apply = (map sum-of-digits xs)))))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 115, "code": "(letfn [                                                                                                                        \n    (to-sequence [n] (map #(- (int %) 48) (seq (str n))))                                                                                               \n    (is-balanced [n] (let [s (to-sequence n)                                                                                    \n                           half (Math/ceil (/ (count s) 2))                                                                                             \n                           left (take half s)                                                                                   \n                           right (take-last half s)]                                                                                                    \n                                (= (apply + left) (apply + right))))]                                                           \n        is-balanced)", "user": "558b50d5e4b027778923762b"}, {"problem": 115, "code": "(fn balance [num]\n  (let [lst (into [] (seq (str num))), hlf (int (/ (count lst) 2))]\n    (= (apply + (map int (subvec  lst 0 hlf)))\n       (apply +  (map int (subvec lst (if (odd? (count lst)) (+ 1 hlf) hlf)))))))", "user": "5545477fe4b0a04f79299531"}, {"problem": 115, "code": "(fn balance [n]\n  (loop [sn (map #(- (int %) 48) (seq (str n))) l () r ()]\n    (if (or (empty? sn) (= 1 (count sn)))\n      (= (reduce + l) (reduce + r))\n      (recur (rest (butlast sn)) (conj l (first sn)) (conj r (last sn))))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(n->digits\n           ([n_] (n->digits nil n_))\n           ([ds n_]\n            (if (< 0 n_)\n              (recur (conj ds (rem n_ 10)) (quot n_ 10))\n              ds)))]\n    (let [d-seq (n->digits n)\n          half-len (/ (count d-seq) 2)]\n      (if (= 0 half-len)\n        true\n        (= (reduce + (take half-len d-seq))\n           (reduce + (take-last half-len d-seq)))))))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 115, "code": "(letfn [(half [s] (drop (quot (count s) 2) s))\n        (sum [s] (reduce + (map #(- (int %) 48) (half s))))]\n  #(= (sum (str %)) (sum (reverse (str %)))))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 115, "code": "(fn [n]\n  (let\n   [s (str n)\n    c (quot (count s) 2)\n    l (take c s)\n    r (take-last c s)\n    f (fn [h] (reduce #(+ % (int %2)) 0 h))]\n    (= (f l) (f r)))\n  )", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 115, "code": "(fn mytest [n]\n\n  (let [digit-seq (map #(Character/digit % 10) (seq (str n))) \n\n        cnt (count digit-seq)\n\n        take-num (quot cnt 2)\n\n        drop-num (if (= 0 (rem cnt 2)) take-num (inc take-num))\n\n       ]\n\n       ;(println take-num)\n       ;(println drop-num)\n       ;(println (take take-num digit-seq))\n       ;(println (drop drop-num digit-seq))\n\n       (if (= cnt 1) \n          true\n          (= (reduce + (take take-num digit-seq))\n             (reduce + (drop drop-num digit-seq))\n          )\n        )\n    )\n\n  )", "user": "55897fe2e4b059ccff29b205"}, {"problem": 115, "code": "(fn [n]\n    (let [sn (str n)\n          l (count sn)\n          c (quot l 2)\n          sd (fn [s] (reduce + (map (comp read-string str) s)))]\n          (->> sn\n               ((juxt #(subs % 0 c) #(subs % (- l c) l)))\n               (map sd)\n               (apply =))))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(- (int %) 48) (seq (str n)))\n        c (count digits)\n        l (if (= c 1) 1 (quot c 2))\n        fh (take l digits)\n        sh (drop (- c l) digits)\n        sum (partial reduce +)]\n    (= (sum fh)\n       (sum sh))))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 115, "code": "(fn [n]\n  (let [v (map #(Character/getNumericValue %) (str n))\n        c (count v)\n        h (if (odd? c) (dec (/ c 2)) (/ c 2))]\n    (= (reduce + (take h v)) (reduce + (take h (reverse v))))))", "user": "5590e55de4b0277789237676"}, {"problem": 115, "code": "(fn [n]\n    (letfn [(rev-dig-vec [n]\n              (if (= n 0)\n                []\n                (cons (mod n 10)\n                      (rev-dig-vec (/ (- n (mod n 10)) 10)))))\n            (dig-vec [n] ((comp reverse rev-dig-vec) n))\n            (sums [v]\n              (let [l (count v)\n                    half (int (Math/ceil (/ l 2)))\n                    sum (fn [v] (reduce + v))\n                    left (sum (take half v))\n                    right (sum (take half (reverse v)))]\n                [left right]))]\n      (let [r (sums (dig-vec n))]\n        (= (first r) (second r)))))", "user": "515ffbfbe4b0e2be8aa20bdd"}, {"problem": 115, "code": "(fn balanced? [number]\n  (let [numbers (map #(Character/digit % 10) (str number))\n        half (int (Math/ceil (* 0.5 (count numbers))))]\n    (= (apply + (take half numbers)) (apply + (take-last half numbers)))\n    ))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        d (map (comp read-string str) s)\n        d2 (interleave d d)\n        i (count s)\n        [l r] (split-at i d2)]\n    (= (apply + l) (apply + r))))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 115, "code": "(fn [n]\n    (let [s (->> n\n                 str\n                 seq\n                 (map #(Integer/parseInt (str %))))\n          div (-> (count s)\n              (/ 2.0)\n              (Math/floor)\n              int\n              )\n          left (take div s)\n          right (take-last div s)]\n      (= (reduce + left) (reduce + right))))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 115, "code": "(fn baln [x]\n  (let [spread (loop [n x rv nil]\n                 (if (zero? n)\n                   rv\n                   (recur (quot n 10) (cons (rem n 10) rv))))\n        halve (quot (count spread) 2) ]\n    (= (apply + (take halve spread))\n       (apply + (take halve (reverse spread))))\n))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(num->lst [n]\n            (loop [n-it n\n                   acc []]\n              (if (= n-it 0)\n                (if (empty? acc)\n                  (conj acc 0)\n                  acc)\n                (recur (/ (- n-it (rem n-it 10)) 10)\n                       (conj acc (rem n-it 10))))))]\n    (let [dig-list (num->lst n)\n          cut-point-1 (if (odd? (count dig-list))\n                        (/ (- (count dig-list) 1) 2)\n                        (/ (count dig-list) 2))\n          cut-point-2 (if (odd? (count dig-list))\n                        (+ cut-point-1 1)\n                        cut-point-1)]\n      (= (reduce + (take cut-point-1 dig-list))\n         (reduce + (drop cut-point-2 dig-list))))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 115, "code": "(fn bal-n [x] \n  (let [num-list (map #(read-string (str %)) (seq (str x)))\n        odd-fix  (int (/ (count num-list) 2))\n        new-list (if (odd? (count num-list)) \n                  (flatten (list (take odd-fix num-list)\n                                 (take-last odd-fix num-list)))\n                  num-list)\n        num-len (count new-list)\n        take-len (int (/ num-len 2))]\n    (= (reduce + (take take-len new-list)) \n       (reduce + (take-last take-len new-list)))))", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 115, "code": "#(let [coll (map read-string (re-seq #\"\\d\" (str %)))\n       n (/ (count coll) 2)]\n   (= (apply + (take n coll)) (apply + (take n (reverse coll)))))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        h (int (/ (count s) 2))\n        l (take h s)\n        r (take h (reverse s))\n        sum (fn [s] (reduce #(+ (int %2) %1) 0 s))]\n    (= (sum l) (sum r))))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 115, "code": "(fn balance\n  [n]\n  (let [n-str (str n)\n        left-str (subs n-str 0 (quot (count n-str) 2))\n        n-revese-str (clojure.string/reverse n-str)\n        right-str (subs n-revese-str 0 (quot (count n-str) 2))]\n    (= (sort left-str) (sort right-str)))\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 115, "code": "(fn balanced [n]\n  (let [s (str n)\n        l (count s)\n        splitted (if (even? l)\n                     (split-at (/ l 2) s)\n                     (list (take (dec (/ l 2)) s) (drop (/ l 2) s)))\n        converted (map #(reduce + 0 (map int %1)) splitted)]\n    (= (first converted) (second converted))))", "user": "51eec1a6e4b0871fa145d98d"}, {"problem": 115, "code": "(fn [v] (let [c (map #(Integer. (str %)) (str v)) n (count c)\n              p (long (/ n 2)) p1 (if (not= 0 (mod n 2)) (+ p 1) p)]\n   (or (> 10 v)\n     (->> (range p) (filter #(= (nth c %) (nth c (+ p1 %)))) count (= p))\n     (->> (range p) (filter #(= (nth c %) (nth c (- n % 1)))) count (= p))\n   )\n))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 115, "code": "(fn [n]\n  (let [digits  (map #(- (int %) (int \\0)) (str n))\n        len     (count digits)\n        halflen (int (/ len 2))]\n    (= (reduce + 0 (take halflen digits))\n       (reduce + 0 (drop (if (even? len) halflen (inc halflen)) digits)))))", "user": "5576f299e4b05c286339e077"}, {"problem": 115, "code": "#(let [s (str %)\n         c (count s)\n         h (quot c 2)\n         f (fn [s]\n             (reduce + (map (comp read-string str) s)))]\n     (= (f (take h s)) (f (drop (+ h (rem c 2)) s))))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 115, "code": "(fn [n] (let [s (map #(read-string (str %)) (str n)) \n              l (count s) \n              h (quot l 2)] \n          (= (apply + (take h s)) (apply + (drop (- l h) s)))))", "user": "526a3412e4b03e8d9a4a721e"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "537e104ce4b06839e8705e9a"}, {"problem": 115, "code": "(fn p115 [balance-n]\n  (let [n (->> balance-n\n               (str)\n               (map #(Integer/parseInt (str %)))\n               (count)\n               )\n        digits (->> balance-n\n                    (str)\n                    (map #(Integer/parseInt (str %)))\n                    )]\n    (if (even? n)\n      (= (reduce + (take (/ n 2) digits))\n         (reduce + (drop (/ n 2) digits)))\n      (= (reduce + (take (/ (dec n) 2) digits))\n         (reduce + (drop (/ (inc n) 2) digits)))\n      )\n    )\n  )", "user": "5400e918e4b0de5c41848619"}, {"problem": 115, "code": "(fn sim [x] (let [duono (quot (count (str x)) 2) \n                    listo (map int  (str x) ) ]\n                (= (apply + (take duono listo)) (apply + (take duono (reverse listo))))))", "user": "5576e78de4b05c286339e075"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [nums (into [] (map #(- (int %) (int \\0)) (seq (str n)))) length (count nums) half-length (quot length 2)]\n    (= (reduce + (subvec nums 0 half-length))\n       (reduce + (subvec nums (- length half-length))))))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 115, "code": "(fn [n]\n    (let [m (->> n str (map identity) (map #(Character/digit % 10)))\n          len (count m) \n          halflen (quot len 2)\n          right-sum (->> m (take halflen) (apply +) )\n          left-sum (->> m (drop (if (odd? len) (inc halflen) halflen)) (apply +) )\n          ]\n      (if (= right-sum left-sum) true false)))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 115, "code": "(fn balance [n]\n  (let [s (str n)\n        c (quot (count s) 2)\n        sum #(+ %1 (Integer/parseInt (str %2)))]\n    (if (= 0 c)\n      true\n      (= (reduce sum 0 (take c s)) (reduce sum 0 (take-last c s))))))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 115, "code": "(fn [number]\n  {:pre  [(integer? number)]}\n  (let [as-str (str number)\n        cnt (count as-str)\n        items (quot cnt 2)\n        l (take items as-str)\n        r (take items (reverse as-str))\n        sum (fn [s] (reduce + (map #(Integer. (str %)) s)))]\n    (= (sum l) (sum r))))", "user": "52fc34cee4b047fd55837015"}, {"problem": 115, "code": "(fn [number]\n  {:pre  [(integer? number)]}\n  (let [as-str (str number)\n        cnt (count as-str)\n        items (quot cnt 2)\n        l (take items as-str)\n        r (take items (reverse as-str))\n        sum (fn [s] (reduce + (map #(Integer. (str %)) s)))]\n    (= (sum l) (sum r))))", "user": "530e37d3e4b08068f379ecb5"}, {"problem": 115, "code": "(fn [x]\n   (let [x (mapv #(- (int %) 48) (str x))\n         s #(apply + (take (quot (count x) 2) %))]\n     (= (s x) (s (rseq x)))))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(dig-sum [s]\n            (reduce + (map (fn [c] (- (int c) (int \\0)))\n                           s)))]\n    (let [s (str n)\n          len (count s)\n          l (subs s 0 (quot len 2))\n          r (subs s (quot (inc len) 2))]\n      (= (dig-sum l) (dig-sum r)))))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 115, "code": "(fn [n]\n   (let [digits (map int (seq (str n)))\n         sig-half (quot (count digits) 2)\n         left (take sig-half digits)\n         right (take sig-half (reverse digits))]\n    (apply identical? (map (partial reduce +) [left right]))))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 115, "code": "(fn balanced? [num] (let [v (map #(- (int %) 48) (seq (str num))) size (/ (count v) 2)] (= (reduce + (take (Math/floor size) v)) (reduce + (drop (Math/ceil size) v)))))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 115, "code": "(fn [n]\n  (letfn \n    [(digits [n] (map #(Integer/parseInt (Character/toString %)) (str n)))\n    (sum [coll] (reduce + coll))\n    (left [coll] (take (quot (count coll) 2) coll))\n    (right [coll] (drop (/ (count coll) 2) coll))]\n    (= (sum (left (digits n))) (sum (right (digits n))))))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 115, "code": "(fn [nn]\n    (let [digify (fn [n] (map #(- (int %) 48) (seq (str n))))\n          halve (fn [col] (let [c (count col) mid (/ c 2)]\n                            (cond\n                              (< c 2) ()\n                              (even? c) (split-at mid col)\n                              :else [(take (dec mid) col) (drop mid col)])))\n          sums=? (fn [col] (let [summed-items (map #(apply + %) col)]\n                             (= (first summed-items) (last summed-items))))]\n      (sums=? (halve (digify nn)))))", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map read-string (re-seq #\"\\d\" (str n)))\n        len (count digits)]\n    (= (reduce + (take (quot len 2) digits)) \n       (reduce + (drop (/ len 2) digits)))))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 115, "code": "(let [half #(quot (count (str %)) 2)\n       sum #(apply + (map (comp read-string str) %))]\n   #(= (sum (take (half %) (str %)))\n       (sum (take-last (half %) (str %)))))", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 115, "code": "(fn [num]\n  (letfn\n    [(front [x] (let [y (seq (str x))] (take (quot (count y) 2) y)))\n     (back  [x] (let [y (seq (str x))] (drop (/    (count y) 2) y)))\n     (sum-up [x] (reduce #(+ %1 (Integer. (str %2))) 0 x))]\n    (= (sum-up (front num)) (sum-up (back num)))))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 115, "code": "#(let [s (->> % str (map int) vec)\n       n (count s)\n       l (subvec s 0 (/ n 2))\n       r (subvec s (-> n inc (/ 2)) n)]\n  (= (apply + l) (apply + r)))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 115, "code": "(fn [n]\n   (let [strn (str n)\n         [fp lp] (if (even? (count strn))\n                   [(take (/ (count strn) 2) strn)\n                    (drop (/ (count strn) 2) strn)]\n                   [(take (dec (/ (count strn) 2)) strn)\n                    (drop (/ (count strn) 2) strn)])]\n     (= (reduce + 0 (map (comp read-string str) fp))\n        (reduce + 0 (map (comp read-string str) lp)))))", "user": "55895eade4b059ccff29b202"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        l (subs s 0 (/ (count s) 2))\n        r (subs s (/ (inc (count s)) 2))\n        f (fn [s]\n            (map #(Integer/parseInt (str %)) (seq s)))]\n    (= (apply + (f l))\n       (apply + (f r)))))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 115, "code": "(fn [xs]\n  (let [xs (str xs) c (count xs) f (take (quot c 2) xs) s (drop (quot c 2) xs) ]\n    (letfn [(val [ys] (apply + (map #(read-string (str %)) ys)))]\n    (cond\n    (> c 2) (= (val f) (val (drop 1 s)))\n    (= c 1) true\n    :else (= (val f) (val s))))))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 115, "code": "#(let [s (str %)\n       h (quot (count s) 2)\n       f (fn [s] (reduce (fn [t x] (+ t (int x))) 0 s))]\n   (= (f (take h s))\n      (f (take h (reverse s)))))", "user": "4e6a4950535d8ccf87e9febf"}, {"problem": 115, "code": "(letfn [(digits [x]\n          (lazy-seq\n           (when (pos? x)\n             (cons (mod x 10) (digits (quot x 10))))))\n        (split [x]\n          (let [d (digits x)\n                p (quot (count d) 2)]\n            (if (even? (count d))\n              [(take p d) (drop p d)]\n              [(take p d) (drop (inc p) d)])))]\n  (fn [x]\n    (let [[f b] (split x)]\n      (= (apply + f) (apply + b)))))", "user": "51d19c24e4b0cfcf579466c3"}, {"problem": 115, "code": "(fn [x] \n  (let [digits (map #(Character/digit % 10) (str x))\n        len    (count digits)\n        n      (quot len 2)\n        step   (+ n (mod len 2))]\n\t  (->> (partition n step digits)\n           (map (partial apply +))\n           (apply =) )))", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 115, "code": "(fn [n]\n  (letfn [\n    (digits [x] (map #(Integer. (str %)) (str x)))\n    (floor [x] (int (Math/floor x)))\n    (ceil [x] (int (Math/ceil x)))]\n    (let [mid (/ (count (digits n)) 2)]\n      (apply = (map (partial reduce +) (partition (floor mid) (ceil mid) (digits n)))))))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 115, "code": "(fn [y]\n\t(apply = (let [x (map int (str y))] (map #(reduce + (take (/ (count x) 2) %))[x (reverse x)])))\n  )", "user": "55e1d34ae4b050e68259b421"}, {"problem": 115, "code": "(fn bal [n]\n  (let [digits (->> n str (map (comp read-string str)) vec)\n        sum    #(reduce + %)\n        nlen      (count digits)\n        nlen_mid  (int (/ (inc nlen) 2))\n        nlen_sum  (int (/ nlen 2))]\n    (= (sum (take nlen_sum digits))\n       (sum (drop nlen_mid digits)))))", "user": "534056fce4b085b17e897dac"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(as-num [n]\n                  (Integer/parseInt (str n)))\n          (cut [n]\n                 (let [ s (str n)\n                        l (count s)\n                        ct (int (+ (rem l 2) (/ l 2)))]\n                  [(subs s 0 ct) (subs (clojure.string/reverse s) 0 ct)])\n                   )\n          (sum [s]\n               (reduce #(+ %1 (as-num %2)) 0 s))\n          (cmp [[f s]]\n               (= (sum f) (sum s)))]\n     (cmp (cut n))\n    ))", "user": "4f88ae35e4b033992c121c6d"}, {"problem": 115, "code": "(fn bal [n]\n  (let [nn (map #(Character/digit % 10) (seq (str n)) )\n        c (quot (count nn) 2)]\n    (= (apply + (take c nn)) \n       (apply + (take c (reverse nn))))))", "user": "558bb38fe4b0277789237631"}, {"problem": 115, "code": "(fn balanced? [n]\n   (loop [coll (map #(Integer/parseInt (str %)) (seq (str n)))\n          suml 0\n          sumr 0]\n     (println coll suml sumr)\n     (if (>= 1 (count coll))\n       (= suml sumr)\n       (recur (butlast (rest coll))\n              (+ suml (first coll))\n              (+ sumr (last coll))))))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 115, "code": "(fn [n]\n                    (let [digits (map second \n                                      (take-while #(not= [0 0] %) \n                                                  (iterate (fn [[a b]] [(quot a 10) (rem a 10)]) \n                                                           [(quot n 10) (rem n 10)])))\n                          n-len (count digits)\n                          len-parts (quot n-len 2)\n                          parts (map #(% len-parts digits) [take take-last])]\n                      (apply = (map #(apply + %) parts))))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 115, "code": "(fn [x]\n  (let [s (map int (seq (str x)))\n        n (quot (count s) 2)\n        lsum (reduce + 0 (take n s))\n        rsum (reduce + 0 (take-last n s))]\n    (= lsum rsum)))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (seq (str n)))\n        half-count (quot (count digits) 2)]\n    (= (reduce + (take half-count digits))\n       (reduce + (take-last half-count digits)))))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 115, "code": "(fn [x]\n  (let [xs (str x)\n        n  (count xs)]\n    (= (reduce + (map int (take (Math/floor (/ n 2)) xs)))\n       (reduce + (map int (drop (Math/ceil  (/ n 2)) xs))))))", "user": "554b8572e4b0a04f79299589"}, {"problem": 115, "code": "(fn [x]\n  (let [s (str x), l (count s)]\n    (= (reduce + (map int (take (Math/ceil  (/ l 2)) s)))\n       (reduce + (map int (drop (Math/floor (/ l 2)) s))))))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 115, "code": "(fn [n]\n   (let [str-rep (str n)\n         l (count str-rep)\n         half (int (Math/floor (/ l 2)))\n         to-drop (if (even? l)\n                   half\n                   (+ 1 half))]\n      (= (reduce #(+ (Integer. (str %2)) %1) 0 (take half str-rep))\n         (reduce #(+ (Integer. (str %2)) %1) 0 (drop to-drop str-rep)))))", "user": "50981062e4b04e098a4c7268"}, {"problem": 115, "code": "(fn [n]\n  (let [split-digits (fn [digits n]\n                       (if (zero? n)\n                         digits\n                         (recur (conj digits (mod n 10))\n                                (int (/ n 10)))))\n        digits (split-digits '() n)\n        half-count (int (/ (count digits) 2))]\n    (= (reduce + (take half-count digits))\n       (reduce + (take-last half-count digits)))))", "user": "53940789e4b0b51d73faaec3"}, {"problem": 115, "code": "(fn balance-number [n]\n  (let [ve (vec (seq (str n))) cnt (count ve)\n        nu (quot cnt 2) midpos (if (even? cnt) nu (inc nu)) ]\n    (cond (= cnt 1) true\n          (= cnt 2) (= (first ve) (last ve))\n          :else (= (reduce (fn [a c] (+ a (read-string (str c)))) 0 (subvec ve 0 (- midpos 1)))\n                   (reduce (fn [a c] (+ a (read-string (str c)))) 0 (subvec ve midpos))))))", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(sn-sum [s]\n                  (reduce #(+ %1 (- (int %2) (int \\0))) 0 s))]\n  (let [s (str n)\n        c (count s)\n        mn (quot c 2)\n        l (take mn s)\n        r (take-last mn s)]\n    (= (sn-sum l) (sn-sum r)))))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 115, "code": "(fn [n] (let [s (str n) l (count s) m (int (/ l 2))]\n          (= (apply + (map int (subs s 0 m)))\n             (apply + (map int (subs s (- l m)))))))", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 115, "code": "(fn [n]\n  (let [digits    (map int (str n))\n        take-half (partial take (int (/ (count digits) 2)))\n        sum       (partial reduce +)]\n      (apply = (map sum (map take-half [digits (reverse digits)])))))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 115, "code": "(fn balanced? [n]\r\n  (let [digits (map int (str n))\r\n        size   (quot (count digits) 2)]\r\n    (= (apply + (take size digits))\r\n       (apply + (take-last size digits)))))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 115, "code": "(fn [x](= 0 (- (reduce + (map #(- (int %) (int \\0)) (apply str (take (int (/ (count (str x)) 2)) (str x))))) (reduce + (map #(- (int %) (int \\0)) (apply str (drop (/ (count (str x)) 2) (str x))))))))", "user": "54d2829ce4b0e8a36923e5f6"}, {"problem": 115, "code": "(fn balanced? [x]\n    (letfn [(take-from [with seq-chars]\n              (let [all (count seq-chars)]\n                [(take (quot all 2) seq-chars)\n                 (drop (+ with (quot all 2)) seq-chars)]))\n            (split-in-halfs [seq-chars]\n              (if (even? (count seq-chars))\n                (take-from 0 seq-chars)\n                (take-from 1 seq-chars)))\n            (sum-reduce-chars [seq-chars]\n              (reduce + (map int seq-chars)))\n            (sum-reduce-half [func seq-chars]\n              (sum-reduce-chars (func (split-in-halfs (str x)))))]\n      (= (sum-reduce-half first x)\n         (sum-reduce-half second x))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 115, "code": "(fn [x]\n  (if (< x 10)\n    true\n    (let [\n        numbers (map #(Integer/parseInt %) (filter #(not (empty? %)) (clojure.string/split (str x) #\"\")))\n        cnt (count numbers)\n        half (int (/ cnt 2))\n      ]\n      (if (odd? cnt)\n        (= (apply + (take half numbers)) (apply + (drop (+ half 1) numbers)))\n        ; [ (take half numbers) (drop (+ half 1) numbers) ]\n        (= (apply + (take half numbers)) (apply + (drop half numbers)))\n        ; [ (take half numbers) (drop half numbers) ]\n      )\n    )\n  )\n)", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 115, "code": "(fn [thenum] (let [digs (for [x (range 0 thenum) \n:let [y (apply * (repeat x 10)) dig (quot (mod thenum (* 10 y)) y)] :while (> (inc thenum) y)] dig)]\n(let [thehalf (int (/ (count digs) 2))] \n(= (reduce + (take thehalf digs)) (reduce + (take-last thehalf digs))))))", "user": "55f75c6be4b06e875b46cea9"}, {"problem": 115, "code": "(fn __\n  [number]\n  (letfn [(digits [n]\n           (->> n\n             str\n             (map str)\n             (map #(java.lang.Long/parseLong %))))\n          (split-at-middle [coll]\n            (let [size (count coll)\n                  corrector (mod size 2)\n                  middle (quot size 2)]\n              [(take (+ middle corrector) coll) (drop middle coll)]))]\n    (->> number digits split-at-middle (map (partial reduce +)) (reduce =))))", "user": "55a62092e4b0acc240e31554"}, {"problem": 115, "code": "(fn kayu\n  [x]\n  (let [digit (fn digit\n                [d]\n                (map read-string (map str (str d))))]\n     (if (= (->> (digit x)\n                 (take (/ (count (digit x) )2))\n                 (reduce +))\n            (->> (reverse (digit x))\n                 (take (/ (count (digit x) )2))\n                 (reduce +)))\n         true\n         false)))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 115, "code": "(fn [n]\n  (if (< n 10)\n    true\n    (let [s    (str n)\n          c    (count s)\n          even (even? c)\n          half (int (/ c 2))\n          l    (take half s)\n          r    (drop (if even half (inc half)) s)]\n      (= (sort l) (sort r)))))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 115, "code": "(fn prob115 \n  [n]\n  (if (< n 10) true\n      (letfn [(digits \n                [num] \n                (map #(Character/digit % 10) (str num)))\n              (split-middle [xs]\n                (let [len (count xs)\n                      mid (int (/ len 2))\n                      left (take mid xs)\n                      mid (if (odd? len) (inc mid) mid)\n                      right (drop mid xs)\n                      ]\n                  (= (reduce + left) (reduce + right))))\n              ]\n        (split-middle (digits n)))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 115, "code": "(fn [number]\n  (let [v (map #(Character/getNumericValue %) (str number))\n        [v1 v2] (split-at (quot (count v) 2) v)\n        drop-first (odd? (count v))]\n    (= (reduce + 0 v1) (reduce + 0 (if drop-first (drop 1 v2) v2)))))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 115, "code": "; golf\n(fn [x]\n  (let [s (str x)\n        half (Math/ceil (/ (count s) 2))\n        digitsum (fn [s] (apply + (map #(Character/digit % 10) s)))\n        ]\n    (= \n      (digitsum (take half s))\n      (digitsum (take-last half s)))))\n\n; first solution\n#_(fn [x]\n  (let [s (str x)\n        half (quot (inc (count s)) 2)\n        digitsum (fn [s] (apply + (map #(Character/digit % 10) s)))\n        ]\n    (= \n      (digitsum (take half s))\n      (digitsum (drop (- (count s) half) s)))))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 115, "code": "(fn balanced? [num]\n    (let [digits (map #(Character/getNumericValue %) (str num))\n          half-length (quot (count digits) 2)\n          first-half (take half-length digits)\n          last-half (drop (if (even? (count digits)) half-length (inc half-length)) digits)]\n      (= (reduce + first-half) (reduce + last-half))\n      ))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 115, "code": "(fn [number]\n  (let [number-seq (->> number str (re-seq #\"\\d\") (map read-string)),\n        half-count (quot (count number-seq) 2)]\n    (= (apply + (take half-count number-seq)) (apply + (take-last half-count number-seq))\n       )\n    )\n  )", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 115, "code": "(fn [n]\n    (let [str-seq (re-seq #\"\\d\" (str n))\n          take-num (int (/ (count str-seq) 2))\n          drop-num (if (odd? (count str-seq)) (inc take-num) take-num)\n          left-part (take take-num str-seq)\n          right-part (reverse (drop drop-num str-seq))]\n      (or (= left-part right-part) (= left-part (reverse right-part)))))", "user": "560e9a2de4b05f002753df52"}, {"problem": 115, "code": "(fn [n]\n   (let [digits (map #(Integer/parseInt (str %)) (str n))\n         left-digits (drop-last (quot (count digits) 2) digits)\n         right-digits (drop (quot (count digits) 2) digits)]\n     (= (reduce + left-digits) (reduce + right-digits))))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(halfsum [s] (->> s\n                            (take (int (/ (count s) 2)))\n                            (map #(Character/getNumericValue %))\n                            (apply +)))]\n         (= (halfsum (str n)) (halfsum (reverse (str n))))))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 115, "code": "(fn [n]\n  (->>\n   n\n   str\n   (map #(->> % str Integer/parseInt))\n   (#((juxt (fn [n coll] (take (- n 0.5) coll)) drop) (/ (count %) 2) %))\n   (map (partial apply +))\n   (apply =)))", "user": "532ecd44e4b019098a6f8b49"}, {"problem": 115, "code": "(fn [n]\t\n  (let [get_dl (fn md [m]\n                 (if (= m 0)\n                   nil\n                   (cons (* (mod m 10) (mod m 10)) (md (int (/ m 10))))))\n        l (get_dl n)\n        c (count l)\n        h (int (/ c 2))\n        l1 (take h l)\n        l2 (drop (- c h) l)]\n    (= (apply + l1) (apply + l2))))", "user": "56051095e4b08b23635d3162"}, {"problem": 115, "code": "(fn [input]\n  (let [explode (fn explode [n]\n                  (if (= n 0)\n                    []\n                    (let [d (rem n 10)\n                          r (quot n 10)]\n                      (conj (explode r) d))))\n        nums (explode input)\n        midpoint (/ (count nums) 2)]\n    (apply = (map (fn [ns]\n                    (apply + (take midpoint ns)))\n                  [nums (reverse nums)]))))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 115, "code": "(letfn [(digits [x]\n          (->> (str x)\n               (map #(- (int %) (int \\0)))))\n        (split-to-halfs [coll]\n          (if (= 1 (count coll))\n            (list coll coll)\n            (let [len (count coll)\n                  half-len (int (+ (/ len 2) 1/2))\n                  rem-len (rem len 2)]\n              (partition half-len (- half-len rem-len) coll))))]\n  (fn balanced? [n]\n    (->> n\n         digits\n         split-to-halfs\n         (map #(apply + %))\n         (apply =))))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 115, "code": "(fn [x]\n   (let [s (map int (str x))\n         c (int (/ (count s) 2))\n         l (take c s)\n         r (take-last c s)]\n     (= (apply + l) \n        (apply + r))))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(- (int %) (int \\0)) (str n))\n        length (count digits)\n        count1 (quot length 2)\n        count2 (- length count1)]\n    (= (reduce + (take count1 digits))\n       (reduce + (drop count2 digits)))))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 115, "code": "#(let [s (seq (str %))\n        c (count s)\n        m (quot c 2)]\n    (or\n    (= (take m s)\n       (drop (- (count s) m) s))\n    (= (reverse s) s)))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 115, "code": "(letfn [(digits [n] (map #(Integer/parseInt (str %)) (str n)))\n        (halves [s] (let [c (count s)\n                          h (/ c 2)]\n                      ((juxt\n                         (partial take h)\n                         (if (even? c)\n                           (partial drop h)\n                           (partial drop (dec h)))) s)))]\n  (fn [n]\n    (let [digits' (digits n)\n          halves' (halves digits')]\n      (= (apply + (first halves'))\n         (apply + (second halves'))))))\n  ;(fn [n]\n    ;(->> n\n        ;digits\n        ;halves\n        ;(map #(apply + %))\n        ;(apply =))))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 115, "code": "(fn [n]\n   (let [a (map #(- (int %) (int \\0))  (str n))\n         c (count a)\n         f (int (/ c 2))\n         m (if (odd? c) 1 0)\n       ]\n      (= (reduce + (take f a)) (reduce + (drop (+ f m) a))) \n   )\n)", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 115, "code": "(fn [n]\n    (let [digits (map #(- (int %) (int \\0)) (seq (str n)))\n          half-count (/ (count digits) 2)\n          left-sum (reduce + (take half-count digits))\n          right-sum (reduce + (take half-count (reverse digits)))\n          ]\n      (= left-sum right-sum)\n      )\n    \n    )", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 115, "code": "(fn [x]\n  (let [xs (seq (str x))\n        xs-length (count xs)\n        midpt (if (even? xs-length) (/ xs-length 2) (int (inc (/ xs-length 2))))\n        lh (take midpt xs)\n        rh (take midpt (reverse xs))\n        lhs (reduce + (map int lh))\n        rhs (reduce + (map int rh))]\n    (= lhs rhs)))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 115, "code": "(fn [n] (let [s (->> (iterate #(quot % 10) n)\n                     (take-while #(not= 0 %))\n                     (map #(mod % 10)))\n              m (quot (count s) 2)] \n          (->> [(take m s) (take-last m s)]\n               (map #(apply + %))\n               (apply =))))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 115, "code": "(fn [n]\n    (let [digits (map #(. Integer parseInt (str %1)) (str n))\n          half (/ (count digits) 2)\n          sum (partial reduce + 0)\n          left (take half digits)\n          right (take half (reverse digits))\n          ]\n      (= (sum left) (sum right))\n    )\n  )", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [to-digits (fn [n] (map #(- (int %) (int \\0)) (seq (str n)))) \n        digits (to-digits n)\n        num-of-digits (count digits)\n        split-pos (int (/ num-of-digits 2.0))\n        splitted-digits (split-at split-pos digits)\n        first-half (first splitted-digits)\n        second-half (drop (mod num-of-digits 2) (second splitted-digits))\n        sum1 (reduce + first-half)\n        sum2 (reduce + second-half)]\n    (= sum1 sum2)))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 115, "code": "(fn [i]\n    (let [i2d (fn [i] (->> i str seq (map #(- (int %) (int \\0)))))\n          dgt (i2d i)\n          len (count dgt)\n          ld2 (quot len 2)\n          fst (take ld2 dgt)\n          lst (if (odd? len) (drop (inc ld2) dgt) (drop ld2 dgt))]\n      (if (= 1 len)\n        true\n        (= (reduce + fst) (reduce + lst)))))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 115, "code": "(fn balanced_number? [n]\n    (let [sn (str n)\n          l (quot (count sn) 2)\n          digit-count (fn [s] (reduce #(+ %1 (int %2)) 0 (seq s)) )\n          ]\n      (=\n        (digit-count (.substring sn 0 l))\n        (digit-count (if (even? (count sn)) (.substring sn l) (.substring sn (inc l))))\n        )\n      )\n    )", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 115, "code": "(fn [n]\n  (let [expl (map #(Character/getNumericValue %) (str n))\n        lhs  (if (even? (count expl)) (take (/ (count expl) 2) expl) (take (int (Math/floor (double (/ (count expl) 2)))) expl))\n        rhs  (if (even? (count expl)) (drop (/ (count expl) 2) expl) (drop (int (Math/ceil (double (/ (count expl) 2)))) expl))]\n    (if (= (reduce + lhs) (reduce + rhs))\n      true\n      false)))", "user": "515ebde3e4b01e5d11ccd0a8"}, {"problem": 115, "code": "(fn [n] (let [S (map int (str n)) h (int (/ (count S) 2))] (= (reduce + (take h S)) (reduce + (take-last h S)))))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(i->l [n] (map #(- (int %) 48) (seq (str n))))]\n    (let [l (i->l n) s (int (/ (count l) 2))]\n    \t(= (apply + (take s l)) (apply + (take-last s l)))\n    )))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 115, "code": "(fn [num]\n    (let [digits (->> (str num)\n                      (map #(- (int %) 48)))\n          hcnt (/ (count digits) 2)\n          lhs (apply + (take (Math/ceil hcnt) digits))\n          rhs (apply + (drop (Math/floor hcnt) digits))]\n      (= lhs rhs)))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [ds (map (comp read-string str) (seq (str n)))\n        c  (quot (count ds) 2)\n        xs (map #(apply + %) [(take c ds) (take-last c ds)])]\n    (= (first xs) (second xs))))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 115, "code": "(fn [n]\n  (let [ds (map #(Character/digit % 10) (str n))\n        cnt (quot (inc (count ds)) 2)]\n    (= (reduce + (take cnt ds))\n       (reduce + (take cnt (reverse ds))))))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 115, "code": "(fn balanced? [x]\n   (let [digits (map #(Character/digit % 10) (str x))\n         h      (quot (count digits) 2)\n         l      (take h digits)\n         r      (take h (reverse digits))\n         sum     #(reduce + %) ]\n     (= (sum l) (sum r))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 115, "code": "(fn [n]\n   (let [digits (map int (str n))\n         size (int (/ (count digits) 2))\n         left (take size digits)\n         right (take-last size digits)]\n     (= (apply + left) (apply + right))))", "user": "530b8580e4b02e82168697cc"}, {"problem": 115, "code": "(fn [x]\n  (let [dgts (map #(- % (int \\0)) (map int (str x)))\n        n (quot (count dgts) 2)\n        lhs (reduce + (take n dgts))\n        rhs (reduce + (take n (reverse dgts)))] \n    (= lhs rhs)))", "user": "4f0f01c0535d0136e6c22329"}, {"problem": 115, "code": "(fn balance\n  [n]\n  (let [m (str n) c (count m)\n        left (drop-last (/ c 2) m)\n        right (drop (/ c 2) m)]\n    (= (apply + (map int left))\n       (apply + (map int right)))))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 115, "code": "#(let [s (map (comp read-string str) (str %))\n       i (/ (count s) 2)]\n   (= (apply + (take i s)) (apply + (take-last i s))))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 115, "code": "(fn bn [z]\n  (loop [s (map #(- (int %) 48) (str z)) m 0 n 0 x 0 y (- (count s) 1)]\n    (if (>= x y)\n      (= m n)\n      (recur s (+ m (nth s x)) (+ n (nth s y)) (inc x) (dec y)))))", "user": "561a1af6e4b053970a773b02"}, {"problem": 115, "code": "(fn\n  [n]\n  (let [laenge (count (str n))\n        e-haelfte (apply + (map #(Character/getNumericValue %) (take (quot laenge 2) (str n))))\n        z-haelfte (apply + (map #(Character/getNumericValue %) (take (quot laenge 2) (reverse (str n)))))]\n    (= e-haelfte z-haelfte)))", "user": "559067ace4b0277789237670"}, {"problem": 115, "code": "(fn[n](=\n (reduce + (map int (take (int (/ (count (str n)) 2)) (seq (str n)))))\n (reduce + (map int (take-last (int (/ (count (str n)) 2)) (seq (str n)))))\n))", "user": "56039843e4b04bb52996e1be"}, {"problem": 115, "code": "(fn [n]\n   (let [n->d #(map (comp int bigint str) (seq (str %)))]\n     (->> (n->d n)\n          (#(list % (reverse %)))\n          (map #(take (/ (count %) 2) %))\n          (map (partial reduce +))\n          (apply =))))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 115, "code": "(fn balanced-number? [n]\n  (letfn [(digits [n]\n                  (if (zero? n) '(0)\n                    (loop [n n\n                           dig '()]\n                      (if (zero? n) dig\n                        (recur (unchecked-divide-int n 10) (cons (mod n 10) dig))))))]\n    (let [digs (digits n)\n          half (bit-shift-right (count digs) 1)]\n      (= (apply + (take half digs)) (apply + (take-last half digs))))))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 115, "code": "(fn \n  [number]\n  (loop [left 0 right 0 digits (map (comp read-string str) (str number))]\n    (if (empty? digits)\n      (= left right)\n      (recur (+ left (first digits)) (+ right (last digits)) (rest (butlast digits)))\n    )))", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 115, "code": "(fn is-balanced [x]\n  (let [get-digits \n        (fn get-digits\n          ([x base] (if (zero? x) '(0) (get-digits x base :lol)))\n          ([x base _]\n            (if (< x 1) (list)\n              (let [digit (rem x base)]\n                (concat (get-digits (quot x base) base :lol) (list digit)))))\n          )\n        \n        digits (get-digits x 10)\n        half (quot (count digits) 2)\n        \n        left (take half digits)\n        right (drop (- (count digits) half) digits)\n        ]\n    (= (reduce + left) (reduce + right))))", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 115, "code": "#(let [s (str %)\n       l (count s)\n       h (quot l 2)\n       t (- l h)\n       sm (fn [cl]\n            (apply + \n                   (map (fn [x] \n                          (-> x\n                \t\t\t  str\n                              Integer.))\n                              cl)))]\n   (= (sm (take h s))\n      (sm (drop t s))))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 115, "code": "(fn balanced?\n  [n]\n  (letfn [(digits [n]\n            (lazy-seq\n              (if (< n 10)\n                (list n)\n                (cons (rem n 10) (digits (quot n 10))))))]\n    (let [ds (digits n)\n          n-digits (count ds)\n          half (quot n-digits 2)\n          first-half (take (if (even? n-digits) half (inc half)) ds)\n          last-half (drop half ds)]\n      (= (apply + first-half) (apply + last-half)))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 115, "code": "(fn [num] \n  (let \n    [ snum   (str num)\n      h-cnt  (int (/ (count snum) 2))\n      left   (take h-cnt snum)\n      right  (take h-cnt (reverse snum))]\n  \n    (= (sort left) (sort right))))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 115, "code": "(fn [n]\n  (let [str-n        (str n)\n        half-len     (int (/ (count str-n) 2))\n        digits       (map #(- (int %) (int \\0)) str-n)\n        [left right] [(take half-len digits) (take-last half-len digits)]]\n    (= (apply + left) (apply + right))))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 115, "code": "(fn balanced?\n  [n]\n  (let [string-n (str n)\n        digits (count string-n)\n        first-half (map #(Integer/valueOf (str %)) (take (Math/floor (/ digits 2)) string-n))\n        second-half (map #(Integer/valueOf (str %)) (drop (/ digits 2) string-n))]\n    (= (reduce + first-half) (reduce + second-half))))", "user": "4fc524aae4b081705acca37e"}, {"problem": 115, "code": "(fn [n]\n     (let [coll (map #(- % 48) (map int (seq (str n))))\n           mid (if (even? (+ 1 (count coll)))\n                 (/ (+ 1 (count coll)) 2)\n                 (/ (count coll)))\n           [lsidex rside] (partition-all mid coll)\n           lside (if (even? (+ 1 (count coll)))\n                    (drop-last 1 lsidex)\n                    lsidex)] \n       (if (= (reduce + lside) (reduce + rside))\n              true\n              false)))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 115, "code": "(fn [x]\n   (->> x\n        str\n        ((juxt #(take (/ (count (str x)) 2) %)\n               #(take-last (/ (count (str x)) 2) %)))\n        (map #(map (fn [n] (Character/digit n 10)) %))\n        (map (partial apply +))\n        (#(if (= (last %)\n                 (first %))\n           true\n           false))))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 115, "code": "(fn [n]\n  (let [xs (map #(- (int %) 48) (str n))\n        len (quot (count xs) 2)\n        f #(apply + (take len %))]\n    (= (f xs) (f (reverse xs)))))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 115, "code": "(fn [n]\n   (let [strn (str n)\n         length (count strn)\n         divider (int (Math/floor (/ length 2)))\n         left (subs strn 0 divider)\n         right (subs strn (- length divider))]\n     (letfn [(calc [s]\n               (apply + (map #(read-string (str %)) (seq s))))]\n       (= (calc left) (calc right)))))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        half (/ (count s) 2)\n        strsum #(reduce + (map (comp read-string str) %))]\n    (= (strsum (take (Math/floor half) s))\n       (strsum (drop (Math/ceil half) s)))))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 115, "code": "(fn [s]\n  (let [ln (map #(Character/digit % 10) (seq (str s)))\n        n (int (/ (count ln) 2))\n        left (take n ln)\n        right (take n (reverse ln))\n        \n        ]\n    (= (reduce + left) (reduce + right))\n    \n    )\n  \n  )", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 115, "code": "(fn number-balanced?\n  [n]\n  (let [s (str n)\n        ls-halve (/ (count s) 2)\n        l (subs s 0 ls-halve)\n        r (subs (clojure.string/reverse s) 0 ls-halve)]\n   (apply = (map (comp #(apply + %) #(map int %)) (list l r)))))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 115, "code": "(fn [n]\n\t\t    (let [s (str n) \n\t\t\t    half (fn [n] (+ (int (/ n 2)) (rem n 2)))\n\t\t\t    left-half (fn [s] (subs s 0 (half (count s))))\n\t\t\t    right-half (fn [s] (subs s (- (count s) (half (count s)))))\n\t\t\t    digval (fn [c] (- (int c) (int \\0)))\n\t\t\t    digsum (fn [s] (apply + (map digval (seq s))))\n]\n\t\t\t\t  (= (digsum (left-half s)) (digsum (right-half s)))))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 115, "code": "(fn [n] (let [sn (str n)\n              sleft (subs sn 0 (+ (quot (count sn) 2)\n                                  (rem (count sn) 2)))\n              sright (subs sn (quot (count sn) 2))]\n          (= (reduce + 0 (map #(- (int %) (int 0)) sleft))\n             (reduce + 0 (map #(- (int %) (int 0)) sright)))))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 115, "code": "#(let [s (seq (str %))\n       t (quot (count s) 2)\n       d (+ t (mod (count s) 2))]\n   (letfn [(mysum [ss] (reduce (fn [a i] (+ a (read-string (str i)))) 0 ss))]\n     (= (mysum (take t s)) (mysum (drop d s)))))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 115, "code": "(fn balanced? [x] (->> x\n                       str\n                       seq\n                       (map int)\n                       (#(interleave % (reverse %)))\n                       (partition 2)\n                       (map (partial reduce -))\n                       (#(take (/ (count %) 2) %))\n                       (reduce +)\n                       zero?))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 115, "code": "(fn [x]\n            (let [digits (str x)\n                  halflen (int (/ (count digits) 2))]\n              \n              (= (apply + (map #(read-string (str %)) (subs digits halflen)))\n                 (apply + (map #(read-string (str %)) (subs (clojure.string/reverse digits) halflen))))))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 115, "code": "(fn balance-n [x]\n   (letfn [(divide [s]\n             (let [len (count s) half (int (/ len 2))]\n               (if (even? len) (partition half s) [(take half s) (drop (inc half) s)])))\n           (sum [chs] (reduce + 0 (map #(Integer/parseInt (str %)) chs)))]\n     (let [sx (str x) [l r] (divide sx)]\n       (= (sum l) (sum r)))))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (fn[k]  (reverse (map #(mod % 10)(take-while pos? (iterate #(quot % 10) k))))) \n        dig (digits n)\n        size (count dig)\n        strl (quot size 2)\n        fst (take strl dig)\n        snd (take-last strl dig)]\n    \t(= (reduce + fst) (reduce + snd)))\n \n )", "user": "5649615be4b0284900eef641"}, {"problem": 115, "code": "(fn balanced? [x]\n  (let [c (partition (int (Math/ceil (/ (count (str x)) 2))) 1 (str x))\n        p1 (first c)\n        p2 (last c)]\n    (= (reduce + (map #(- (int %) 48) p1))\n       (reduce + (map #(- (int %) 48) p2)))))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 115, "code": "; Relies on ascii int value rather than real int value but doesn't matter as they are unique across all chars\n#(let [s     (map int (str %))\n       half  (/ (count s) 2)\n       left  (take      half s)\n       right (take-last half s)]\n   (= (reduce + left) (reduce + right)))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(ss [s]\n    (reduce + (map (comp #(- % 48) int) s)))]\n    (let [s (seq (str n))\n          c (count s)\n          g (quot c 2)]\n        (= (ss (take g s)) (ss (take-last g s))\n           ))))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 115, "code": "(fn [n]\n  (let [digits-seq (fn [n] (loop [r n\n                                 digits '()]\n                            (if (> r 0)\n                              (recur (quot r 10) (cons (mod r 10) digits))\n                              digits)))\n        digits-vec (vec (digits-seq n))\n        size (count digits-vec)\n        [l r] (split-at (quot size 2) digits-vec)\n        r (if (zero? (rem size 2)) r (rest r))]\n    (= (apply + l) (apply + r))))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 115, "code": "(fn x [n]\n   (let [s (str n)\n         c (count s)\n         [a b] (split-at (quot c 2) s)\n         c (drop (if (odd? (count s)) 1 0) b)\n         f (fn [x] (reduce #(+ % (Character/getNumericValue %2)) 0 x))]\n     (= (f a) (f c))))", "user": "5382704be4b06839e8705ed4"}, {"problem": 115, "code": "(fn balanced-number? [n]\n  (let [coll (map #(Integer/parseInt (str %)) ((comp seq str) n))\n        chunk-size (quot (count coll) 2)]\n    (= (reduce + (take chunk-size coll)) \n       (reduce + (take-last chunk-size coll)))))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n) \n        h (quot (count s) 2) \n        csum #(->> % (map int) (reduce +))]\n  (= (csum (take h s)) (csum (take-last h s)))))", "user": "52aeac84e4b0c58976d9acaf"}, {"problem": 115, "code": "(fn [xs]\n  (let [xs (map int (str xs))\n        n (/ (count xs) 2)\n        sum (partial apply +)]\n    (= (sum (take n xs))\n       (sum (take-last n xs)))))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n) l (quot (count s) 2)\n        sum (fn [coll] (reduce #(+ %1 (- (int %2) 48)) 0 coll))]\n    (= (sum (take l s)) (sum (drop (- (count s) l) s)))))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 115, "code": "(fn [number]\n   (let [num-seq (map #(Integer/parseInt (str %)) (seq (str number)))\n         num-half (quot (count num-seq) 2)\n         first-part (take num-half num-seq)\n         last-part (take-last num-half num-seq)]\n     (= (reduce + first-part) (reduce + last-part))))", "user": "567476bde4b05957ce8c6139"}, {"problem": 115, "code": "(fn [a] (= (reduce + (take (int (/ (count (str a)) 2)) (map #(- % 48) (map int (seq (str a)))))) (reduce + (take-last (int (/ (count (str a)) 2)) (map #(- % 48) (map int (seq (str a))))))))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 115, "code": "(fn [digits]\n  (let [coll (map #(Integer/parseInt (str %)) (seq (str digits)))\n        n (int (/ (count coll) 2))\n        left (take n coll)\n        right (take n (reverse coll))\n        ]\n    (= (reduce + left ) (reduce + right))\n        )\n  )", "user": "564a560ae4b0284900eef654"}, {"problem": 115, "code": "(fn [x]\n  (let [ds (map #(- (int %) (int \\0)) (str x))\n        n (quot (count ds) 2)]\n    (apply = (map #(->> % (take n) (apply +)) (list ds (reverse ds))))))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 115, "code": "(fn balanced?\n  [n]\n  (let [coll (map #(Integer. %) (re-seq #\"\\d\" (str n)))\n        cnt  (count coll)\n        h    (int (/ cnt 2))]\n    (if (<= cnt 1)\n      true\n      (apply = (map #(reduce + %)\n                    (if (even? cnt)\n                      (split-at h coll)\n                      (partition (inc h) h coll)))))))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 115, "code": "(fn balance? [n] \n  (letfn [(digits [n]\n                  (map\n                   first\n                   (take-while\n                    #(not= [0 0] %)\n                    (drop 1\n                          (iterate\n                           (fn [[a b]]\n                             [(mod b 10) (quot b 10)])\n                           [0 n])))))]\n    (let [d (digits n)\n          f (take (quot (count d) 2) d)\n          s (drop (/ (count d) 2) d)]\n      (= (reduce +' f) (reduce +' s)))))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 115, "code": "(fn balanced? [x]\n           (let [s    (map #(- (int %) (int \\0)) (seq (str x))) \n                 c    (int (/ (count s) 2))\n                 s1   (take c s)\n                 s2   (take-last c s) \n                 sum1 (apply + s1)\n                 sum2 (apply + s2) ]\n             (= sum1 sum2) ))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (remove empty? (clojure.string/split (str n) #\"\"))\n        midpoint (quot (count digits) 2)\n        digit-sum (fn [ds] (apply + (map #(Integer. %) ds)))]\n    (->> [(take midpoint digits) (take-last midpoint digits)]\n         (map digit-sum)\n         (apply =))))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 115, "code": "(fn [n]\n  (let [st (str n)\n        half (/ (count st) 2)\n        front (take half st)\n        back (take half (reverse st))]\n    (apply =\n           (map (fn [n-seq] (reduce + n-seq))\n                (map (fn [st-seq] (map #(Integer. (str %)) st-seq)) [front back])))))", "user": "56481722e4b0284900eef628"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 115, "code": "(fn [n]\n   (let [half-sum (fn [l] (reduce + (take (quot (count l) 2) l)))\n         digits (map (comp bigint str) (seq (str n)))]\n     (= (half-sum digits) (half-sum (reverse digits)))))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(digit-sum [s]\n            (reduce + (map #(Character/digit % 10) s))),\n          (left-half [s]\n            (subs s 0 (quot (count s) 2)))]\n    (= (-> n str left-half digit-sum) (-> n str clojure.string/reverse left-half digit-sum))))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(digits [x] (mapv #(- (int %) (int \\0)) (str x)))\n          (sum-of-sq [items] (reduce + (map #(* % %) items)))]\n    (let [d (digits n)\n          l (count d)\n          end (if (even? l) (/ l 2) (/ (inc l) 2))\n          start (if (even? l) (/ l 2) (/ l 2))]\n\t    (= (sum-of-sq (subvec d start)) (sum-of-sq (subvec d 0 end))))))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 115, "code": "(fn [a]\n\t(let [xs (map read-string (map str (seq (str a))))\n\t  \t  n (int (Math/ceil (/ (count xs) 2)))\n\t\t  m (- (count xs) n)\n\t\t  x (reduce + (take n xs))\n\t\t  y (reduce + (drop m xs))]\n\t\t(= x y)))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 115, "code": "(letfn\n  [(digit-seq\n  [n]\n  (lazy-seq\n   (cons\n    (mod n 10)\n    (when-not (zero? (quot n 10))\n      (digit-seq (quot n 10))))))]\n\n(fn q4q115\n  [n]\n  (let [digits (vec (digit-seq n))\n        l-top (Math/floor (/ (count digits) 2))\n        h-bot (Math/ceil (/ (count digits) 2))]\n    (= (reduce + (subvec digits 0 l-top))\n       (reduce + (subvec digits h-bot))))))", "user": "52213426e4b0e6a83c8925c4"}, {"problem": 115, "code": "(fn [x]\n  (letfn [(split-digits [digits]\n                        (when (> digits 0)\n                          (cons (mod digits 10) (split-digits (int (/ digits 10))))))]\n    (let [digits (split-digits x)\n          half (int (/ (count digits) 2))]\n      (= (apply + (take half digits)) (apply + (take-last half digits))))))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 115, "code": "(fn [n]\n  (let [seq-n (seq (str n))\n        seq-n-int (map #(Integer/valueOf %) (map str seq-n))\n        len (count seq-n)\n        half-len (int (* 0.5 len))\n        sum-left (apply + (take half-len seq-n-int))\n        sum-right (apply + (drop (- len half-len) seq-n-int))]\n    (= sum-left sum-right)))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 115, "code": "(fn [n]\n    (let [digits (fn [s] (for [d s] (- (int d) 48)))\n          s (str n)\n          c (count s)\n          p1 (reduce + (digits (subs s 0 (quot c 2))))\n          p2 (reduce + (digits (subs s (+ (quot c 2) (rem c 2)) c)))]\n      (= p1 p2)))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 115, "code": "(fn isBalance?[number]\n  (loop [q (quot number 10) r (mod number 10) result [r]]\n   (if (= q 0)\n      (let [takecnt (quot (count result) 2)\n            start (apply + (take takecnt result))\n            end (apply + (take-last takecnt result))]\n        (if (= start end)\n          true\n          false))\n      (let [irem (mod q 10)]\n       (recur (quot q 10) irem (conj result irem))))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(convert [n]\n                   (loop [i n result []]\n                     (if (= 0 i)\n                       result\n                       (recur (quot i 10) (conj result (mod i 10))))))]\n    (let [digits (convert n)\n          half-count (quot (count digits) 2)]\n      (= (apply + (take half-count digits)) (apply + (take half-count (reverse digits)))))))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 115, "code": "#(let [q (map int (str %)) l (/ (count q) 2)] (= (apply + (take l q)) (apply + (take-last l q))))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 115, "code": ";; takes a num n\n(fn [n]\n  ;; cast to string, s\n  (let [s (str n)\n        ;; half the sequence, rounded up\n        c (int (Math/ceil (/ (count s) 2)))]\n    \t;; test equality of both\n     \t(apply = \n          ;; add each halves individual digits\n          (map (fn [e] (apply + \n              ;; cast each char back to string, parse out integer of each \n              (map #(Integer/parseInt (re-find #\"\\A-?\\d+\" (str %))) e))) \n          ;; vector of first half and last half\n          [(take c s)(take-last c s)]))))", "user": "5578f292e4b05c286339e08f"}, {"problem": 115, "code": "(fn [n]\n  (let [digit-seq (fn digit-seq [n]\n                  \t(if (zero? n)\n                    \tnil\n                    \t(lazy-seq (cons (mod n 10) (digit-seq (int (/ n 10)))))))\n        s (digit-seq n)\n        half (* 1/2 (count s))]\n    (= (apply + (take half s)) (apply + (take half (reverse s))))))", "user": "52d340ebe4b099d49816f0c1"}, {"problem": 115, "code": "#(= (apply + (map (fn [x] (Integer/parseInt (str x))) (take (quot (count (seq (str %))) 2) (seq (str %))))) (apply + (map (fn [x] (Integer/parseInt (str x))) (take-last (quot (count (seq (str %))) 2) (seq (str %))))))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 115, "code": "(fn balanced [x]\n  (let [y (str x) c (count y) left (take (int (/ c 2)) y) right (drop (int (/ (inc c) 2)) y) ]\n    (= (apply + (map int left))\n       (apply + (map int right))\n       )\n    )\n  )", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(- (int %) (int \\0)) (str n))\n        l (count digits)\n        a (quot l 2)]\n    (=\n     (apply + (take a digits))\n     (apply + (drop (- l a) digits)))))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 115, "code": "(fn [x]\n  (letfn [(sum [c] (reduce  #(+ (int %1) (- (int %2) 48)) 0 c))]\n  (let [s (str x)\n        l (count s)\n        f (subs s 0 (Math/ceil (/ l 2)))\n        r (subs s (/ l 2), l)]\n    (= (sum f) (sum r))\n  )\n  )\n)", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 115, "code": "(fn the-balance-of [n]\n  (let [string-of-n (str n)\n        reverse-string (reverse string-of-n)\n        halve (int (/ (count string-of-n) 2))]\n    (= (reduce + (map #(Character/digit % 10) (first (partition halve string-of-n))))\n       (reduce + (map #(Character/digit % 10) (first (partition halve reverse-string)))))\n    ))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 115, "code": "#(let [d (loop [r (), n %]\n           (if (= n 0)\n             r\n             (recur (conj r (rem n 10)) (quot n 10))))\n       f (fn [x] (apply + (take (int (/ (count x) 2)) x)))]\n   (= (f d) (f (reverse d))))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        l (-> s count (/ 2) int)\n        ch->int #(- (int %) 48)\n        sum (fn [xs] (reduce #(+ %1 (ch->int %2)) 0 xs))]\n    (= (sum (take l s))\n       (sum (take l (reverse s))))))", "user": "50ec409ce4b04edc33777045"}, {"problem": 115, "code": "(fn [n]\n  (let [digits-fn (fn f [n] (if (< n 10) [n] (conj (f (quot n 10)) (rem n 10))))\n        digits (digits-fn n)\n        c (count digits)\n        first-half (take (quot c 2) digits)\n        second-half (if (even? c)\n                      (drop (quot c 2) digits)\n                      (rest (drop (quot c 2) digits)))]\n    (= (reduce + first-half)\n       (reduce + second-half))))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 115, "code": "(fn [num]\n  (let [splitnum (fn [x,li,size]\n                    (let [r (rem x 10)]\n                      (if (< x 10)\n                        (cons (+ 1 size) (cons x li))\n                        (recur (quot x 10) (cons r li) (+ 1 size)))))\n        result (splitnum num [] 0)]\n    (= (reduce + (take (quot (first result) 2) (rest result)))\n       (reduce + (take (quot (first result) 2) (reverse result))))))", "user": "56ac6d57e4b03c432f187346"}, {"problem": 115, "code": "(fn [x]\n  (letfn [(ds [y]\n            (loop [out [] in y]\n              (let [out (conj out (rem in 10))\n                    in  (quot in 10)]\n                (if (= in 0)\n                  out\n                  (recur out in)))))]\n    (let [vd (ds x)\n          n  (count vd)\n          a  (quot n 2)\n          b  (if (odd? n) (+ a 1) a)]\n      (= (reduce + (take a vd)) (reduce + (drop b vd))))))", "user": "564a5a09e4b0284900eef656"}, {"problem": 115, "code": "(fn [n]\n  (let [l (count (str n))\n        h (quot l 2)\n        [l r] (partition (+ h (rem l 2)) h (map #(- (int %) (int \\0)) (str n)))]\n    (= (apply + l) (apply + r))))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 115, "code": "(fn balance [n]\n  (let [char->int (fn [c] (- (int c) (int \\0)))\n        first-half (fn [l] (take (/ (count l) 2) l))\n        digits (map char->int (str n))]\n    (= (reduce + (first-half digits))\n       (reduce + (first-half (reverse digits))))))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 115, "code": "(fn balancedN [b] (let [\n                           intoDigits (fn [x] (map #(Integer/parseInt (str %)) (seq (str x))))\n                           splitN (fn [s] (+ (int (/ (count s) 2)) (rem (count s) 2)))\n                           numSeq (intoDigits b)\n                           splitVal (splitN numSeq)\n                           ] (= (reduce + (take  splitVal numSeq)) (reduce + (take-last splitVal numSeq)))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 115, "code": "(fn [n]\n  (let [sq (map #(- (int %) (int \\0)) (seq (str n)))\n        c (count sq)\n        s (if (even? c) (/ c 2) (/ (dec c) 2))\n        sums (map #(reduce + %) (partition s (if (even? c) s (inc s)) sq))]\n    (if (empty? (rest sums)) true\n      (= (first sums) (second sums)))))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 115, "code": "(fn balanced-n? [n] (let [string-n (str n) take-n (int (/ (count string-n) 2))\n                            sum-str (fn[s](apply + (map #(Integer/parseInt (str %)) (take take-n s))))]\n                        (= (sum-str string-n) (sum-str (reverse string-n)))))", "user": "56baab13e4b0f26550335948"}, {"problem": 115, "code": "#(let [t (map (comp bigint str) (str %)) c (/ (count t) 2)]\n    (= (apply + (take c t)) (apply + (take-last c t))))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 115, "code": "(fn [x](let [xs (map #(Character/digit % 10)(str x))\n              n (count(str x))\n              n2 (if (even? n)(/ n 2)(/ (dec n) 2))\n              y  (conj [] (take n2 xs)(take-last  n2 xs))] \n          (= (apply + (y 0)) (apply + (y 1)) )))", "user": "566a3a26e4b0a866af689699"}, {"problem": 115, "code": "(fn balancedX[n] ((fn balancedDigits[x] \n\t(let [half (quot (count x) 2)\n\t\tfirstPart (take half x)\n\t\tlastPart (take-last half x)\n\t\t]\n\t\t(= (reduce + firstPart)(reduce + lastPart))\n\t\t))\n ((fn digits[n]\n\t(if (< n 10) (list n) \n\t\t(cons (mod n 10) (digits (quot n 10)))))\n n)))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 115, "code": "#(let [split (fn [n] (loop [n n res ()] (if (= 0 n) res (recur (quot n 10) (conj res (mod n 10)))))) l (split %1) halfsize (/ (count l) 2) sumleft (apply + (take halfsize l)) sumright (apply + (take halfsize (reverse l)))] (= sumleft sumright))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 115, "code": "(fn\n  [n]\n  (letfn [(is-blance?\n            [d s]\n            (if (< (count s) 2)\n              d (is-blance? (+ d (- (int (first s)) (int (last s))))\n                            (rest (drop-last s)))))]\n    (zero? (is-blance? 0 (str n)))))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 115, "code": "(fn foo [n]\n  (apply =\n          (map #(->> % (map int) (reduce +))\n               (let [s (str n) w (count s) h (/ w 2)]\n                 (partition (int (Math/ceil h)) (max 1 (int h)) s)))))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits (map #(Character/getNumericValue %) (str n))\n        digit-count (count digits)\n        left-side (into [] (take (/ digit-count 3) digits))\n        right-side (into [] (take (/ digit-count 3) (reverse digits)))\n        sum-of-right-side (reduce + left-side)\n        sum-of-left-side (reduce + right-side)]\n     (= sum-of-left-side sum-of-right-side)))", "user": "50e1bdd8e4b019fc399ce17f"}, {"problem": 115, "code": "#(let [s (map int (str %))\n       l (/ (count s) 2)]\n   (= (apply + (take (Math/floor l) s))\n      (apply + (drop (Math/ceil l) s))))", "user": "56baa68ce4b0f26550335947"}, {"problem": 115, "code": "(fn balanced?\n  [n]\n  (let [numbers (map #(read-string (str %)) (str n))\n        l (count numbers)\n        hl (int (/ l 2))\n        f (take hl numbers)\n        b (take-last hl numbers)]\n    (= (apply + f) (apply + b) )))", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 115, "code": "(fn [n]\n  (let [vectored\n        (map read-string \n             (rest (clojure.string/split (str n) #\"\")))\n        half\n        (Math/floor (/ (count vectored) 2))]\n    (apply = (map #(apply + %) \n         [(take half vectored)\n          (take-last half vectored)]))))\n\n#_(fn [n]\n  (let [vectored\n        (map read-string \n             (rest (clojure.string/split (str n) #\"\")))\n        half\n        (Math/floor (/ (count vectored) 2))]\n    (apply = [(reverse (take half vectored))\n              (take-last half vectored)])))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 115, "code": "(fn b [n]\n  (let [s (str n) h (quot (count s) 2) left (subs s 0 h) right (subs (clojure.string/reverse s) 0 h)]\n(= (apply + (map #(- (int %) 48) left))\n   (apply + (map #(- (int %) 48) right)))))", "user": "56bca51ae4b0f26550335963"}, {"problem": 115, "code": "#(let [xs (map read-string (map str (str %)))\n        n (/ (count xs) 2)]\n    (= (apply + (take n xs)) (apply + (take-last n xs))))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(digit-sum [s] (apply + (map #(- (int %) (int 0)) s)))]\n    (let [s (str n)\n          len (count s)\n          ls (take (quot len 2) s)\n          rs (drop (quot (inc len) 2) s)]\n      (= (digit-sum ls) (digit-sum rs)))))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 115, "code": "(fn [n] (let [digits (map #(- (int %) 48) (str n))\n               x (/ (count digits) 2)] \n             (= (reduce + (take x digits)) \n                (reduce + (take x (reverse digits))))))", "user": "56b86e64e4b0f26550335924"}, {"problem": 115, "code": "(fn [s] (let [x (map #(Integer. %) (rest (clojure.string/split (str s) #\"\"))) y #(drop (quot (count x) 2) %) z #(reduce + (y %))] (= (z x) (z (reverse x)))))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 115, "code": "(fn [x]\n  (let [s (map #(read-string (str %)) (str x))\n        n (/ (count s) 2)]\n    (zero? (- (reduce + (drop (Math/floor n) s))\n              (reduce + (take (Math/ceil n) s))))))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        c (count s)\n        h (quot c 2)\n        [a b] (if (even? c)\n                (split-at h s)\n                (partition h (inc h) s))\n        f (fn [x] (reduce #(+ %1 (Character/digit %2 10)) 0 x))]\n    (if (= c 1)\n      true\n      (= (f a) (f b)))))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 115, "code": "(fn [n]\n  (let [nums (map int (str n))\n        size (quot (count (str n)) 2)]\n    (apply = (map #(reduce + %)\n            [(take size nums)\n             (take-last size nums)]))))", "user": "51db0d99e4b06aa4d4669a9d"}, {"problem": 115, "code": "(fn balanced? [n]\n\t(let [transform (comp #(reduce + %) #(map (fn [n] (Character/getNumericValue n)) %))\n\t\t  halft (fn [coll]\n\t\t\t\t\t(let [at (quot (count coll) 2)]\n\t\t\t\t\t\t(if (even? (count coll))\n\t\t\t\t\t\t\t(split-at at coll)\n\t\t\t\t\t\t\t[(take at coll) (drop (+ 1 at) coll)]))\n\t\t\t\t\t)]\n\t\t(if (= (count (seq (str n))) 1)\n\t\t\ttrue\n\t\t\t(apply = (map transform (halft (seq (str n))))))\n\n\t\t))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(sum [s]\n            (reduce + (map #(Character/getNumericValue %) s)))]\n    (let [   s (.toString n)\n          half (quot (count s) 2)]\n      (=\n       (sum (take half s))\n       (sum (take-last half s))))))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        piece-len (quot (count s) 2)]\n    (= (apply + (map int (take piece-len s)))\n       (apply + (map int (take piece-len (clojure.string/reverse s)))))))", "user": "56e85493e4b02e7e935eb6e7"}, {"problem": 115, "code": "(fn [s] \n  (let [coll (str s)\n        hc (int (/ (count coll) 2)) ]\n  (= (reduce + (map #(Integer/parseInt (str %)) (take hc (str s))))\n     (reduce + (map #(Integer/parseInt (str %)) (take hc (reverse (str s))))))))", "user": "53b530c6e4b047364c0444bc"}, {"problem": 115, "code": "(fn [x] (letfn [(digits [x] (map #(- % 48) (map int (seq (str x)))))\n        (half-length [s] (int (/ (count s) 2)))\n        (drop-middle? [s] (= 1 (mod (count s) 2)))]\n        (let [dd (digits x), h (half-length dd)]\n          (= (apply + (take h dd))\n             (apply + (if (drop-middle? dd) (drop (+ 1 h) dd) (drop h dd)))))))", "user": "4fd11a93e4b04c3a95aa040a"}, {"problem": 115, "code": "(fn [n]\n  (loop [s (loop [z n o []] (if (< z 10) (conj o z) (recur (quot z 10) (conj o (rem z 10)))))\n         lsum 0\n         rsum 0]\n    (if (< (count s) 2)\n      (= lsum rsum)\n      (recur (rest (drop-last s)) (+ lsum (first s)) (+ rsum (last s))))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 115, "code": "(fn [n] (let [digitize (reduce #(conj %1 (Character/digit %2 10)) [] (str n))]\n           (if (=\n                 (reduce + (take (/ (count digitize) 2) digitize))\n                 (reduce + (take-last (/ (count digitize) 2) digitize)))\n             true false)))", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        l (take size digits)\n        r (take-last size digits)]\n    (= (reduce + l) (reduce + r))))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 115, "code": "(fn my-balanced\n  [n]\n  (let [s (str n), siz (quot (count s) 2)]\n    (letfn [(sum-dig [v] (reduce + (map #(- (int %) 48) v)))]\n    (= (sum-dig (take siz s)) (sum-dig (take-last siz s))))))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 115, "code": "(fn balanced? [x]\n  (let [digits (map #(- (int %) (int \\0)) (str x))\n        center (quot (count digits) 2)\n        l (apply + (take center digits))\n        r (apply + (drop (if (odd? (count digits)) ( inc center) center) digits))]\n    (= l r)))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(digits [n] (if (< n 10) (list n) (cons (mod n 10) (digits (quot n 10)))))]\n    (let [n-list (digits n) n-len (count n-list) half (quot n-len 2) front (- n-len half)]\n      (= (apply + (take half n-list)) (apply + (drop front n-list))))))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 115, "code": "(fn [n]\n   (let [lst (map #(Integer/parseInt %) (map str (str n)))\n         half (quot (count lst) 2)\n         a (take half lst)\n         b (take-last half lst)]\n     (= (reduce + a) (reduce + b))))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 115, "code": "(fn [n]\n   (let [[left right] (#(split-at (int (/ (count %) 2)) %) (str n))\n         rs (if (< (count left) (count right))\n              (rest right)\n              right)\n         sumhalf (fn [xs] (apply + (map #(read-string (str %)) xs)))]\n     (= (sumhalf rs) (sumhalf left))\n     ))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 115, "code": "(fn [x] (=(reduce +(map #(read-string %) (take(int(/(count\n(re-seq #\"\\d\" (str x)))2))(re-seq #\"\\d\"(str x))))) \n\n(reduce +(map #(read-string %) (take(int(/(count\n(re-seq #\"\\d\" (str x)))2))(reverse (re-seq #\"\\d\"(str x))))))))\n\n\n;(defn partition_From [Balance_Number]\n;  (int(/ (count Balance_Number) 2)))\n\n;(defn restructure [Balance_Number]\n; (re-seq #\"\\d\" (str Balance_Number)))\n\n;(defn balance [Balance_Number] \n;  (= (reduce + (map #(read-string %) (take (partition_From (restructure Balance_Number))\n;  (restructure Balance_Number)))) \n;  (reduce + (map #(read-string %) (take (partition_From(restructure Balance_Number))\n;  (reverse (restructure Balance_Number)))))))", "user": "5703c4c4e4b08d47c97781f7"}, {"problem": 115, "code": "(fn [x]\n  (loop [xs (map (comp read-string str) (seq (str x)))\n         right 0\n         left 0]\n    (if (<= (count xs) 1)\n      (= right left)\n      (recur (rest (butlast xs))\n             (+ right (last xs))\n             (+ left (first xs))))))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 115, "code": "(fn [n]\n  (let [half (quot (count (str n)) 2)\n        digits (map #(Character/digit % 10) (str n))\n        sum-first-half (reduce + (take half digits))\n        sum-second-half (reduce + (take-last half digits))]\n    (= sum-first-half sum-second-half)))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 115, "code": "(fn [num] (let [digits (map #(- (int %) 48) (vec (str num)))\n                 from-begin (quot (count digits) 2)\n                 from-end (- (count digits) from-begin)]\n             (= (apply + (take from-begin digits)) (apply + (drop from-end digits)))))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 115, "code": "(fn balance [x] \n  (= (reduce + (map #(read-string %) (take (int(/(count (re-seq #\"\\d\" (str x))) 2))(re-seq #\"\\d\"(str x))))) \n  (reduce + (map #(read-string %) (take (int (/(count\n  (re-seq #\"\\d\" (str x))) 2))(reverse (re-seq #\"\\d\"(str x))))))))", "user": "5576d3c7e4b05c286339e074"}, {"problem": 115, "code": "(fn is-balanced[x]\n  (let [y (str x)\n        length (count y)\n        half-length (quot length 2)\n        first-half (take half-length y)\n        second-half (take-last half-length y)\n        first-val (apply + (map #(-> % str Integer/parseInt) first-half))\n        second-val (apply + (map #(-> % str Integer/parseInt) second-half))]\n   (= first-val second-val)))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 115, "code": "(fn [n]\n  (-> n str count (/ 2) ((juxt take take-last) (str n))\n      (->> (map sort) (reduce =))))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 115, "code": "(fn [n]\n  (let [d-seq (into [] (map #(Integer/parseInt (str %)) (str n)))\n        mid (int (/ (count d-seq) 2))\n        left (subvec d-seq 0 mid)\n        right (subvec d-seq (if (odd? (count d-seq)) (inc mid) mid))]\n    (= (reduce + 0 left)\n       (reduce + 0 right))))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 115, "code": "(fn [n]\n  (let [sum (fn [digits] (apply + (map #(Character/getNumericValue %) digits)))\n        digits (str n)\n        [left right] (split-at (int (/ (count digits) 2)) digits)\n        adjusted-right (drop (- (count right) (count left)) right)]\n    (= (sum left) (sum adjusted-right))))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 115, "code": "(fn balance-of-n [n]\n  (let [digits (->> n\n                    str\n                    (into [])\n                    (map #(Integer. (str %))))\n        count-half (-> digits\n                       count\n                       (/ 2)\n                       int)]\n    (= (apply + (take count-half digits))\n       (apply + (take-last count-half digits)))))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 115, "code": "(fn balance-of-n [n]\n  (let [s (map (fn [x]\n                 (->> x\n                      str\n                      Integer/parseInt))\n               (str n))\n        half (quot (count s) 2)]\n    (= (reduce + (take half s))\n       (reduce + (take-last half s)))))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 115, "code": "(fn [num] \n   (let [s (map (fn [x] (- (int x) (int \\0))) (format \"%d\" num))\n         l (quot (count s) 2)]\n     (= (reduce + (take l s))\n        (reduce + (take-last l s)))))", "user": "56102f50e4b05f002753df6b"}, {"problem": 115, "code": "(fn [n]\n  (let [half #(take (quot (count %) 2) %)\n        atoi #(Integer/parseInt (str %))\n        half-sum #(->> %\n                       half\n                       (map atoi)\n                       (reduce +))\n        balanced? #(= (half-sum %)\n                      (half-sum (reverse %)))]\n    (balanced? (str n))))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 115, "code": "(fn [n] (if (< n 10)\n              true\n              (let [sums (->> \n                              [(take (int (/ (count (str n)) 2 )) (str n) ) (take-last (int (/ (count (str n)) 2 )) (str n))]\n                              (map #(apply + (map int %) )))] (= (first sums) (last sums) ) )))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 115, "code": "(fn [n]\n  (let [div (fn [k] (quot k 10))\n        rmd (fn [k] (rem k 10))\n        digit-seq (fn [k]\n                    (loop [nm k acc ()]\n                      (if (zero? nm)\n                        acc\n                        (recur (div nm) (cons (rmd nm) acc)))))\n        the-seq (digit-seq n)\n        cnt (fn [a-seq]\n              (reduce (fn [acc _] (inc acc)) 0 a-seq))]\n    (let [ptseq (partition (quot (cnt the-seq) 2) 1 the-seq)]\n      (if (= (apply + (first ptseq)) (apply + (last ptseq)))\n        true\n        false))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 115, "code": "#(let [digs (->> % str seq (map int))\n       margin (-> digs count (/ 2) int)]\n  (= (apply + (take margin digs)) \n     (apply + (take-last margin digs))))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 115, "code": "(fn [n]\n    (let [l (count (str n))\n          [left right] (->> (str n) (map #(Character/digit % 10))\n                            (split-at (int (/ l 2))))\n          f #(apply + %)]\n      (cond\n        (= l 1) true\n        (odd? l) (= (f left) (f (rest right)))\n        (even? l) (= (f left) (f right)))))", "user": "4f57c913e4b0a7574ea7183f"}, {"problem": 115, "code": "#_(fn balance-number? [n]\n  (let [n-str (str n)\n        len (count n-str)\n        half-len (quot len 2)\n        digit-strs (rest (clojure.string/split n-str #\"\")) \n        halves [(take half-len digit-strs), (take-last half-len digit-strs)]\n        sum-digit-strs #(apply + (map read-string %))]\n    (apply = (map sum-digit-strs halves))))\n\n(fn balance-number? [n]\n  (let [char->int #(- (int %) (int \\0))\n        digits (map char->int (str n))\n        half-len (quot (count digits) 2)\n        halves (map #(% half-len digits) [take, take-last])\n        sum-digit-strs #(apply + %)]\n    (apply = (map sum-digit-strs halves))))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        half-size (int (/ (count s) 2))\n        map-to-digits (fn [s] (map #(Character/digit % 10) s))\n        first-half (map-to-digits (take half-size (str n)))\n        second-half (map-to-digits (take-last half-size (str n)))]\n    (= (apply + first-half) (apply + second-half))))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 115, "code": "(fn [n]\n    (->> n\n         str\n         seq\n         (map #(Character/getNumericValue ^char %))\n         ((fn [coll]\n           (let [cnt (count coll)\n                 to-take (int (/ cnt 2))\n                 to-drop (if (odd? cnt) (inc to-take) to-take)]\n\n             (= (reduce + (take to-take coll))\n                (reduce + (drop to-drop coll))))))\n         ))", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 115, "code": "(fn [n]\n  (loop [n-str (map #(Integer/parseInt (str %)) (str n)) l 0 r 0]\n    (if (<= (count n-str) 1)\n      (= l r)\n      (recur (butlast (drop 1 n-str)) (+ l (first n-str)) (+ r (last n-str))))))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 115, "code": "#(let [digits ((fn ds [n] (if-not (zero? n) (cons (rem n 10) (ds (quot n 10))))) %)\n       i (-> (count digits) (/ 2))]\n  (->> (split-at i digits) (map (fn [c] (reduce * (take (Math/floor i) c)))) (apply =)))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 115, "code": "(fn z [x]\n  (let [coll (map #(Character/getNumericValue %) (seq (str x)))\n        size (count coll)\n        half (+ (quot size 2) (mod size 2))\n        ]\n    (= (reduce + (take half coll)) (reduce + (take-last half coll)))\n  \n  \n  )\n)", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 115, "code": "(let [->digits (fn [n]\n                   (->> (iterate (fn [[q r]] [(quot q 10) (rem q 10)]) [n])\n                        (take-while (fn [vs] (some (complement zero?) vs)))\n                        (map second)\n                        rest\n                        reverse\n                        (into [])))\n        f (fn [n]\n            (let [ds (->digits n)\n                  h (quot (count ds) 2)\n                  hd (take h ds)\n                  tl (->> ds rseq (take h))]\n              (= (apply +' hd)\n                 (apply +' tl))))]\n    f)", "user": "53684a2fe4b0243289761e8c"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits (->> n str (map #(Character/digit % 10)))\n        len (count digits)\n        half-len (quot len 2)\n        [ldigits rdigits] (partition\n                           half-len\n                           (+ half-len (mod len 2))\n                           digits)]\n    (= (apply + ldigits)\n       (apply + rdigits))))", "user": "571d063ee4b0145328a76272"}, {"problem": 115, "code": "(fn bal\n  [num]\n  (let [ instr (str  num) instr-rev (reverse instr)  inlen (count instr) part1 (partition (+ 1  (mod inlen 2)) instr )   part2 (partition (+ 1  (mod inlen 2)) instr-rev ) sum-left (reduce +  (map #(Integer. (str %)) (first part1))) sum-right (reduce +  (map #(Integer. (str %)) (first part2)))] (= sum-left sum-right))\n  )", "user": "51f81925e4b09be9c177e526"}, {"problem": 115, "code": "(fn balanced [n]\n  (loop [n-list (map read-string (map str (str n)))]\n    (cond\n      (>= 1 (count n-list)) true\n      (and (= 2 (count n-list))\n           (= (first n-list) (last n-list))) true\n      (= (first n-list) (last n-list)) (recur (rest (butlast n-list)))\n      (and (<= 3 (count n-list))\n           (= (second n-list) (last n-list))\n           (= (first n-list) (last (butlast n-list)))) true\n      :else false)))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        num-digits (/ (count s) 2) ; note (take n coll) will round n up if n is not an integer \n        ; (i.e. for odd number of digits, the middle digit is included in both the left and right sides, as desired)\n        left-side (take num-digits s)\n        right-side (take-last num-digits s)]\n    (= (sort left-side) (sort right-side))))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 115, "code": "(fn [x]\n   (letfn [(digits [x]\n             (let [q (quot x 10)]\n               (cons (rem x 10) (when (pos? q) (digits q)))))]\n     (let [digits (digits x)\n           [l r] (split-at (quot (count digits) 2) digits)\n           r (if (not= (count l) (count r)) (drop 1 r) r)]\n       (= (apply + l) (apply + r)))))", "user": "56dc3bdfe4b0ea9b8538f819"}, {"problem": 115, "code": "(fn f\n  [n]\n  (let [x (map (comp #(Integer/parseInt %) str) (seq (str n))) c (int (/ (count x) 2))]\n(= (reduce + (take c x)) (reduce + (drop (- (count x) c) x)))))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits (fn [y] (->> y\n                            (iterate #(quot % 10))\n                            (take-while pos?)\n                            (mapv #(mod % 10))\n                            rseq))\n        n-digits (digits n)\n        digits-count (int (Math/ceil (/ (count n-digits) 2)))]\n    (= (apply + (take digits-count n-digits))\n       (apply + (take-last digits-count n-digits)))))", "user": "53504fe6e4b084c2834f4ada"}, {"problem": 115, "code": "(fn [n]\n  (let [c->int #(- (int %) 48)\n        n (map c->int (str n))\n        c (count n)\n        [xs ys] (split-at (int (/ c 2)) n)\n        ys (if (odd? c)\n             (rest ys) ys)]\n    (= (apply + xs)\n       (apply + ys))))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (->> [n 0]\n                    (iterate (fn [[x _]] [(quot x 10) (rem x 10)]))\n                    (next)\n                    (take-while (fn [[x y]] (not= x y 0)))\n                    (map second)\n                    (vec))\n        i   (quot (inc (count digits)) 2)\n        lhs (take i digits)\n        rhs (take-last i digits)]\n    (= (reduce + lhs) (reduce + rhs))))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 115, "code": "(fn [a]\n  (let [s (str a)\n        len (.length s)\n        half (quot len 2)\n        sum (fn [ss] (apply + (map #(Character/getNumericValue %) ss)))]\n    (=  (sum (subs s 0 half)) (sum (subs s (- len half))))))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 115, "code": "(fn x\n  [v]\n  (let [a (map (comp read-string str) (str v))\n        c (count a)\n        h (/ c 2)]\n    (apply =\n           (map (partial reduce +)\n                (if (odd? c)\n                  [(take h a) (drop (dec h) a)]\n                  [(take h a) (drop h a)])))))", "user": "4daeabf6edd6309eace4d15c"}, {"problem": 115, "code": "(fn balanced? [n]\n  (letfn [(from-ascii [l] (- l 48))]\n    (let [digits (map (comp from-ascii int) ((comp seq str) n))\n          half (int (/ (count digits) 2))]\n      (apply = \n             (map\n               (comp (partial reduce +) (partial take half))\n               ((juxt identity reverse) digits))))))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 115, "code": "(fn [n]\n  (let [nstr (map (comp read-string str) (str n))\n        len (quot (count nstr) 2)\n        left (apply + (take len nstr))\n        right (apply + (take-last len nstr))]\n    (= left right)))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 115, "code": "(fn [n] (let [s (map #(Integer. %) (map #(str %) (str n)))\n              half (int (/ (count s) 2.0))\n              left (take half s)\n              right (take half (reverse s))]\n          (= (reduce + left) (reduce + right))))", "user": "4e3ac1b2535deb9a81d77f4c"}, {"problem": 115, "code": "(fn [numb]\n(let [int-to-arr \n      (fn [i]\n       (loop [ans []\n              nowi i]\n        (if (= nowi 0) ans\n        (recur (conj ans (mod nowi 10)) (quot nowi 10)))))\n      arr (int-to-arr numb)\n      n (count arr)]\n  \t  (=\n       (apply + (take (quot n 2) arr))\n       (apply + (drop (quot (inc n) 2) arr)))))", "user": "5744723ae4b009280f9f2b3a"}, {"problem": 115, "code": "(fn balanced [n]\n             (let [digitize (fn [n] (->> n\n                                         str\n                                         (map (comp read-string str))))\n                   nums (digitize n)\n                   pivot (if (< 2 (count nums)) (/ (+ (count nums) 1) 2) -1) ]\n               (if (< (count nums) 2)\n                 true\n                 (if (and (= (count nums) 2) (= (first nums) (last nums)))\n                   true\n                   (if (= -1 pivot)\n                     false\n                     (if (= (reduce + (take (- pivot 1) nums))\n                            (reduce + (take-last (- pivot 1) nums)))\n                       true false))))))", "user": "56791447e4b05957ce8c6183"}, {"problem": 115, "code": "(fn [n]\n  (let [l (count (str n))\n        h (quot l 2)\n        [l r] (partition (+ h (rem l 2)) h (map #(- (int %) (int \\0)) (str n)))]\n    (= (apply + l) (apply + r))))", "user": "574af03ce4b02ea114799202"}, {"problem": 115, "code": "(fn f [n]\n(let [nl (map #(- (int %) 48) (str n)) cnt (count nl) qc (quot cnt 2) ]\n   (if (= 1 cnt) true\n       (= (apply + (take qc nl)) (apply +  (take-last qc nl))       )\n       )\n)\n\n)", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 115, "code": "(fn [a]\n  (if (= 1 (count (str a)))\n    true\n    (let [v (mapv (comp read-string str) (str a))\n          m (quot (count v) 2)\n          s (split-at m v)\n          l (first s)\n          r (if (< 1 (count (second s)))\n              (rest (second s))\n              (second s))]      \n      (= (apply + l) (apply + r)))))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        l (quot (count s) 2)\n    \tsum #(apply + (map int (take l %)))]\n    (= (sum s) (sum (reverse s)))))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 115, "code": "(fn [x] (let [s (seq (str x))\n              n (quot (count s) 2)] \n          (reduce = \n                  (map sort \n                       ((juxt #(take n %) #(take-last n %)) s)))))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 115, "code": "#(let [s (str %1)\n      len (count s)\n      len2 (quot len 2)\n      first-half (apply + (map int (take len2 s)))\n      second-half (apply + (map int (drop (- len len2) s)))]\n    (= first-half second-half))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 115, "code": "(fn [x]\n    (->> x\n      (str)\n      (#(partition-all (/ (count %) 2) %))\n      ((fn [shit] (map #(take (count (last shit)) %) shit)))\n      (map #(->> % (map str) (map read-string)))\n      (map #(apply + %))\n      (apply =)))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 115, "code": "(fn a [n] (let [s (->>\n                      (str n)\n                      seq\n                      (map #(Character/digit % 10)))\n                  size (quot (count s) 2)\n                  parts (split-at size s)\n                  part1 (first parts)\n                  part2 (second parts)\n                  part22 (if (= (count part1) (count part2)) part2 (rest part2))]\n              (or (= size 0) (= (reduce + part1) (reduce + part22)))))", "user": "54857657e4b0e286459a11ac"}, {"problem": 115, "code": "(fn [n]\n  (let [n (map #(Character/digit % 10) (str n))\n        i (quot (count n) 2)]\n    (= (apply + (take i n))\n       (apply + (take i (reverse n))))))", "user": "57642916e4b0994c1922fbee"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Character/digit % 10) (str n))]\n    (if (= (apply + (take (quot (count digits) 2) digits))\n           (apply + (take (quot (count digits) 2) (reverse digits))))\n      true\n      false)))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 115, "code": "(fn balanced?\n  [n]\n  (let [digits (map (comp read-string str) (seq (str n)))\n        length (count digits)\n        first-split-point (Math/floor (/ length 2))\n        second-split-point (Math/ceil (/ length 2))\n        first-half (first (split-at first-split-point digits))\n        second-half (second (split-at second-split-point digits))\n        sum (fn [xs] (reduce + xs))]\n    (= (sum first-half)\n       (sum second-half))))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 115, "code": "(fn balanced-number [n]\n  (letfn [(digits2 [n]\n            (loop [n n\n                   r '()]\n              (if (= n 0)\n                r\n                (let [rem (mod n 10)\n                      div (quot n 10)]\n                  (recur div (conj r rem))))))\n          ]\n\n    (let [ln (apply vector (digits2 n))\n          sz (count ln)\n          med (int (/ sz 2))]\n      (if (= sz 1)\n        true\n        (if (= (mod sz 2) 0)\n          (let [l1 (subvec ln 0 med)\n                l2 (subvec ln  med)]\n            (if (= (apply + l1) (apply + l2))\n              true\n              false))\n          (let [l1 (subvec ln 0  med)\n                l2 (subvec ln (inc med))]\n            (if (= (apply + l1) (apply + l2))\n              true\n              false)))))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 115, "code": "(fn [n]\n  (let [s (map int (str n))\n        c (quot (count s) 2)]\n       (= (apply + (take c s)) (apply + (take-last c s)))))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (->> n str (map (comp read-string str)))\n        half (quot (count digits) 2)\n        leftsum (apply + (take half digits))\n        rightsum (apply + (if (odd? (count digits)) (drop (inc half) digits) (drop half digits)))]\n    (= leftsum rightsum)\n    )\n  )", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 115, "code": "(fn [n]\n  (let [len (count (str n))\n        half (quot len 2)\n        [left right] (partition (+ half (rem len 2)) half (map #(- (int %) (int \\0)) (str n)))]\n    (= (apply + left) (apply + right))))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 115, "code": "(fn balanced? [n] \n   (let [s (->> n(str)(map #(- (int %) (int \\0))))\n         p (-> s count(/ 2)int)]  \n     (= (reduce + (take p s)) (reduce + (take-last p s)))))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 115, "code": "(fn [n]\n  (let [n-str (->> n\n                  str\n                  (map identity))\n        half (/ (count n-str) 2)]\n    (->> n-str\n         ((juxt (partial take half) (partial take-last half)))\n         (map sort)\n         (apply =))))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 115, "code": "(fn balanced? [s]\n  (let [tostr (map #(Character/digit % 10) (str s))\n        len (count tostr)\n        p (quot len 2)\n        c (rem len 2)\n        l (reduce + (take p tostr))\n        r (reduce + (drop (+ p c) tostr))]\n    (= l r)))", "user": "52d809bde4b09f7907dd1384"}, {"problem": 115, "code": "(fn balance[n]\n  (let[j (str n)\n       l (fn h[s]\n           (if \n             (seq s)\n             (cons (- (int (first s)) 48) (h (next s)))))\n       chap (apply str (take (/ (count j) 2) j))\n       rast (apply str (take-last (/ (count j) 2) j))]\n    (= (reduce + (l chap)) (reduce + (l rast)))))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 115, "code": "(fn [x]\n  (let [digits (map read-string (map str (seq (str x))))\n        len (count digits)\n        cutpoint (quot len 2)\n        front (map #(nth digits %) (range 0 (if (odd? len) (inc cutpoint) cutpoint)))\n        back (map #(nth digits %) (range cutpoint len))]\n    (println digits len cutpoint front back)\n    (= (reduce + front) (reduce + back))))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 115, "code": "(fn [n]\n  (let [digitize (fn [n] (map #(- (int %) (int \\0)) (str n)))\n        digits (digitize n)\n        len (count digits)\n        [lhs rhs] (split-at (quot len 2) digits)\n        rhs (if (odd? len) (rest rhs) rhs)]\n    (apply = (map #(reduce + %) [lhs rhs]))))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 115, "code": "(fn [n]\n  (let [s (map (comp read-string str) (str n))\n        l (quot (count s) 2)]\n    (= (apply + (take l s)) (apply + (take-last l s)))))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 115, "code": "(letfn [(digits [n]\n        (loop [n n\n               digits '()]\n          (if (zero? n)\n            digits\n            (recur (quot n 10) (conj digits (rem n 10))))))]\n  (fn [n]\n    (let [d (digits n)\n          sz (count d)\n          [x y] (partition-all (/ sz 2) d)]\n      (= (apply + (if (even? sz) x (butlast x)))\n         (apply + y)))))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 115, "code": "(fn [n]\n  (if (< n 10) true\n    (let [deal (#(partition  (int (Math/ceil (/ (count %) 2))) (int (/ (count %) 2)) %) \n                 (map (comp read-string str) (str n)))]\n      (= (apply + (first deal)) (apply + (second deal))))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 115, "code": "(fn [x]\n  (let [chars (str x)\n        half (quot (count chars) 2)\n        chars-to-nums (fn [xs] (map #(Character/getNumericValue %) xs))]\n    (= \n      (apply + (chars-to-nums (take half chars)))\n      (apply + (chars-to-nums (take-last half chars))))))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 115, "code": "(fn [num]\n  (let [num-str (str num)\n        half-length (/ (count num-str) 2) \n        first-str (take half-length num-str)\n        last-str (take-last half-length num-str)\n        sum-of-char (fn [list-of-char] (reduce + (map int list-of-char)))]\n    (= (sum-of-char first-str) (sum-of-char last-str))))", "user": "5783c505e4b0ebec4cfb74bc"}, {"problem": 115, "code": "(fn f [n]\n  (let [s (str n)\n        c (/ (count s) 2)\n        r #(reduce + (map int %))]\n    (= (r (take c s))\n       (r (take-last c s)))))", "user": "577ab41fe4b0d3393e5deb05"}, {"problem": 115, "code": "(fn [a]\n  (let [x (split-at (/ (count (str a)) 2) (str a))\n        y (map #(sort (take (count (last x)) %)) x)]\n    (= (first y) (last y))))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 115, "code": "(fn [number]\n         (let [number-list (map #(Character/digit % 10) (str number))\n               first-half-sum (apply + (take (quot (count number-list) 2) number-list))\n               second-half-sum (apply + (take-last (quot (count number-list) 2) number-list))]\n           (= first-half-sum second-half-sum)))", "user": "52cbe5dfe4b07d0d72b27352"}, {"problem": 115, "code": "(fn balanced? [n]\n    (let [st         (str n)\n          len        (count st)\n          chunk      (quot len 2)\n          chunk      (if (= chunk 0) 1 chunk)\n          left       (subs st 0 chunk)\n          right      (subs st (- len chunk))\n          digits-sum (fn [s] (reduce + (map #(- (int %) (int \\0)) s)))]\n      (= (digits-sum left) (digits-sum right))))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 115, "code": "(fn balance? [n]\n    (let [digits (mapv #(- (int %) (int \\0)) (seq (str n)))\n        half (int (/ (count digits) 2))\n        sum (fn [index coll] (reduce + (take index coll)))]\n    (= (sum half digits) (sum half (reverse digits)))))", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 115, "code": "(fn balanced? [n]\n    (let [dig (loop [n n digits []]\n                (if (< n 10)\n                  (cons (int n) digits)\n                  (recur \n                   (quot n 10)\n                   (cons (int (rem n 10)) digits))))\n          n (int (/ (count dig) 2))]\n      (= (apply + (take n dig))\n         (apply + (take n (reverse dig))))))", "user": "579693d4e4b039eba2ecb0e7"}, {"problem": 115, "code": "(fn balanced? [n]\n    (let [dig (loop [n n digits []]\n                (if (< n 10)\n                  (cons (int n) digits)\n                  (recur \n                   (quot n 10)\n                   (cons (int (rem n 10)) digits))))\n          n (int (/ (count dig) 2))]\n      (= (apply + (take n dig))\n         (apply + (take n (reverse dig))))))", "user": "5796d308e4b039eba2ecb0ed"}, {"problem": 115, "code": "(fn [number]\n  (let [to-string (str number)\n        num-elem (count to-string)\n        half (quot num-elem 2)\n        is-even (even? num-elem)\n        ]\n    (if is-even\n      (= (apply + (map int (take half to-string))) (apply + (map int (drop half to-string))))\n      (= (apply + (map int (take half to-string))) (apply + (map int (drop (+ 1 half) to-string))))\n      )\n    )\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 115, "code": "(fn f [num]\n  (let [d (map #(- (int %) (int \\0)) (str num))\n        c (count d)\n        m (quot c 2)]\n    (if (even? c)\n      (= (apply + (take m d)) (apply + (drop m d)))\n      (= (apply + (take m d)) (apply + (drop (inc m) d))))))", "user": "56795deae4b05957ce8c6187"}, {"problem": 115, "code": "(fn balanced? [n]\n    (let [dig (loop [n n digits []]\n                (if (< n 10)\n                  (cons (int n) digits)\n                  (recur \n                   (quot n 10)\n                   (cons (int (rem n 10)) digits))))\n          n (int (/ (count dig) 2))]\n      (= (apply + (take n dig))\n         (apply + (take n (reverse dig))))))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 115, "code": "(fn balanced? [n]\n    (let [dig (loop [n n digits []]\n                (if (< n 10)\n                  (cons (int n) digits)\n                  (recur \n                   (quot n 10)\n                   (cons (int (rem n 10)) digits))))\n          n (int (/ (count dig) 2))]\n      (= (apply + (take n dig))\n         (apply + (take n (reverse dig))))))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 115, "code": "(fn balanced? [n]\n    (let [dig (loop [n n digits []]\n                (if (< n 10)\n                  (cons (int n) digits)\n                  (recur \n                   (quot n 10)\n                   (cons (int (rem n 10)) digits))))\n          n (int (/ (count dig) 2))]\n      (= (apply + (take n dig))\n         (apply + (take n (reverse dig))))))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 115, "code": "(fn bal [n]\n  (let [digits (map #(- (int %) 48) (str n))\n        length (count digits)]\n    (let [r (drop (/ length 2) digits)\n          l (if (even? length)\n              (take (/ length 2) digits)\n              (take (/ (dec length) 2) digits))]\n      (= (reduce + l) (reduce + r)))))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        cnt\t(int (/ (count digits) 2))\n        l-part (take cnt digits)\n        r-part  (take-last cnt digits)]\n    (= (apply + l-part) (apply + r-part))))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 115, "code": "(fn myf2 [n]\n  (let [n (map #(- (int %) 48) (str n))\n        len (quot (count n) 2)]\n    (= (apply + (take len n)) (apply + (take len (reverse n))))))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 115, "code": "(letfn\n  [\n  ( digits [n]\n    (let [[ds n]\n      (last (take-while\n        (comp (complement zero?) second)\n        (iterate\n          (fn [[ds n]] [(conj ds (mod n 10)) (int (/ n 10))])\n          [[] n])))]\n      (conj ds n)))\n  ( split [n]\n        (let [ds (digits n)\n              c (count ds)\n              hc (int (/ c 2))]\n          [(take hc ds) (drop (+ hc (mod c 2)) ds)]))]\n  (fn [n]\n    (= 1 (count (distinct (map (partial reduce +) (split n)))))))", "user": "57717915e4b0979f896515b3"}, {"problem": 115, "code": "(fn [n]\n  (let [s  (map #(- (int %) (int \\0))   (seq (str n))  )   ]\n    (let [half (fn half [ss]\n           (apply + (take (/ (count ss)  2)  ss)))]\n      (if (= (half s) (half (reverse s)))\n        true\n        false))))", "user": "579601c8e4b0e215f87e8492"}, {"problem": 115, "code": "(fn\n  [num]\n  (let [a ((fn\n  [num]\n  (loop [a [] n num]\n    (if (>= (unchecked-divide-int n 10) 1)\n      (recur (conj a (rem n 10)) (unchecked-divide-int n 10) )\n      (conj a n)))\n  ) num)]\n    (= (apply + (take (unchecked-divide-int (count a) 2) a)) \n       (apply + (take-last (unchecked-divide-int (count a) 2) a))))\n   )", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 115, "code": "#(let [intV (map (fn [x] (- (int x) 48)) (vec (str %))) \n       mid (int(/(count intV) 2)) \n       fh (take mid intV) \n       lh (take-last mid intV) \n       sumAll (fn [x] (apply + x ))]\n   (= (sumAll fh) (sumAll lh)))", "user": "57986b76e4b039eba2ecb116"}, {"problem": 115, "code": "(fn [n]\n  (let [no (str n)\n        mitad (quot (count no) 2)\n        sum-fn (fn [coll] (->> coll \n                               (map (comp read-string str))\n                               (apply +)))]\n    (= (sum-fn (take mitad no))\n       (sum-fn (take-last mitad no)))\n    )\n  )", "user": "55912230e4b027778923767a"}, {"problem": 115, "code": "(fn [n]\n  (let [coll  (vec (map int (str n)))\n        len   (count coll)\n        lmid  (quot len 2)\n        rmid  (if (even? len) lmid (inc lmid))\n        left  (subvec coll 0 lmid)\n        right (subvec coll rmid)]\n    (= (apply + left) (apply + right))))", "user": "5371167fe4b0fc7073fd6ea7"}, {"problem": 115, "code": "#(let [digits (loop [ds nil n %]\n  (if (zero? n)\n       ds\n      (recur (conj ds (mod n 10))          \n                 (quot n 10))))\n         hlen (quot (count digits) 2)\n         sum-hlen (fn [ls] (apply + (take hlen ls)))]\n(= (sum-hlen digits) (sum-hlen (reverse digits))))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 115, "code": "(fn [x]\n  (let [as (map #(- (int %) (int \\0)) (str x))\n        bs (reverse as)\n        n (int (/ (count as) 2))]\n    (= (apply + (take n as)) (apply + (take n bs)))))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 115, "code": "(let [trunc (fn [x] (/ (- x (mod x 10)) 10))\n      lastN #(mod %1 10)\n      to-seq (fn [x]\n               (loop [n x\n                      v []]\n                 (cond (zero? n) (mapv identity (reverse v))\n                       :else (recur (trunc n) (conj v (lastN n))))))]\n  (fn [x]\n    (let [seqn (to-seq x)\n          c (count seqn)\n          odd (odd? c)\n          left (if odd \n                 (subvec seqn 0 (/ (dec c) 2))\n                 (subvec seqn 0 (/ c 2)))\n          right (if odd\n                  (subvec seqn (/ (inc c) 2))\n                  (subvec seqn (/ c 2)))]\n      (= (reduce + left) (reduce + right)))))", "user": "57b4a7afe4b0fbc9809a27a2"}, {"problem": 115, "code": "(fn [v]\n   (let [sv (str v)\n         cv (count sv)\n         asdig (map #(- (int %) (int \\0)) (map identity sv))\n         fh  (take (if (odd? cv) (dec ( / cv 2)) (/ cv 2)) asdig)\n         lh  (drop (/ cv 2) asdig)\n         ]\n     (= (reduce + fh) (reduce + lh))))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 115, "code": "(fn [n]\n    (let\n      [\n        str-n (str n)\n        len (count str-n)\n        half-len (quot len 2)\n        first-half (take half-len str-n)\n        second-half (take-last half-len str-n)\n        digits (fn [s]\n          (map\n            (comp read-string str)\n            s\n          )\n        )\n        sum-digits (fn [s]\n          (apply + (digits s))\n        )\n      ]\n      (=\n        (sum-digits first-half)\n        (sum-digits second-half)\n      )\n    )\n  )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 115, "code": "(fn [x]\n  (let [\n        digits (loop [n x d '()]\n                 (if (< n 10)\n                   (conj d n)\n                   (recur (quot n 10) (conj d (rem n 10)))\n                 )\n               )\n        nd (quot (inc (count digits)) 2)\n       ]\n    (= (apply + (take nd digits)) (apply + (take nd (reverse digits))))\n  )\n)", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 115, "code": "(fn [x] (let [digits (map #(-> % str read-string) (into [] (str x)))\n              half-length (-> digits count (/ 2) Math/floor)\n              first-half (take half-length digits)\n              second-half (take-last half-length digits)]\n          (= (reduce + first-half)\n             (reduce + second-half))))", "user": "4e9ff8d0535d7eef3080729c"}, {"problem": 115, "code": "(fn [z]\n (let [ \n          firstHalfSum  (reduce + 0 (map #(Integer/parseInt %)   (rest (clojure.string/split  (subs (str z) 0  (Math/floor (/(count (str z)) 2)  ))  #\"\"))) ) \n          secondHalfSum (reduce + 0 (map #(Integer/parseInt %)   (rest (clojure.string/split  (subs (str z) (Math/ceil (/ (count (str z)) 2))  (count (str z)) )  #\"\") )))\n        ]\n  (= firstHalfSum secondHalfSum) \n        \n )\n)", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 115, "code": "(fn [n]\n  (let [s (vec (map #(- (int %) (int \\0)) (str n)))\n        c (int (/ (count s) 2))]\n    (= (apply + (subvec s 0 c))\n       (apply + (subvec s (if (odd? (count s)) (inc c) c))))))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 115, "code": "(fn [n]                                                                         \n    (let [ds (->> n                                                             \n                  str                                                           \n                  (map (comp read-string str)))                                 \n             m (count ds)                                                      \n             p (int (/ m 2))                                                   \n             [l r] (split-at p ds)]                                             \n      (= (reduce + l) (reduce + (if (even? m) r (rest r))))))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 115, "code": "(fn balance? [num]\n  (let [s ((fn int2seq [num] (if (< num 10) (list num) (conj (int2seq (quot num 10)) (rem num 10)))) num)\n        mid (quot (count s) 2)]\n    (= (apply + (take mid s)) (apply + (take mid (reverse s))) )\n    ))", "user": "558bdcefe4b0277789237633"}, {"problem": 115, "code": "(fn [n]\n     (let [digits (map #(Integer/parseInt (str %)) (str n))\n           midpoint (/ (count digits) 2)\n           l (take (if (odd? (count digits)) (dec midpoint) midpoint) digits)\n           r (drop midpoint digits)]\n      (= (reduce + l) (reduce + r))))", "user": "523b4e91e4b07becd5be21ef"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (loop [q [(mod n 10)] r (quot n 10)]\n                 (if (pos? r) (recur (conj q (mod r 10)) (quot r 10)) q))\n        c (quot (count digits) 2)]\n    (= (apply + (take c digits)) \n       (apply + (take c (rseq digits))))))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 115, "code": "(fn b\n\n    ([n] (b 0 \n\n            (map read-string (map str (str n)))\n\n            0))\n\n    ([l xs r]\n\n     (if xs \n\n      (b (+ l (first xs))\n\n         (butlast ( rest xs))\n\n         (+ r (last xs)))\n\n      (= l r))))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 115, "code": "(fn balance? [n]\n  (letfn [(to-digits [n, v]\n            (if (= 0 n)\n              v\n              (recur (quot n 10) (conj v (rem n 10)))))]\n    (if (< n 10)\n      true\n      (let [v (to-digits n []), cv (count v), pl (if (odd? cv) (inc (quot cv 2)) (quot cv 2))]\n        (->> (partition-all pl v)\n             (apply map -)\n             (reduce +)\n             (= 0))))))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [d (map (comp read-string str) (seq (str n)))\n        n1 (quot (count d) 2)]\n    (= (apply + (take n1 d)) (apply + (take-last n1 d)))))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 115, "code": "(fn balance-of-n [n]\n  (let [s (str n)\n        digits-cnt (count s)\n        mid (unchecked-divide-int digits-cnt 2)]\n    (if (even? digits-cnt)\n      (= (apply + (map int (take mid s)))\n         (apply + (map int (drop mid s))))\n      \n      (= (apply + (map int (take mid s)))\n         (apply + (map int (drop (inc mid) s)))))))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 115, "code": "(fn [n]\n   (let [coll (map #(- (int %) 48) (str n))\n          c (count coll)\n          f (take (int (/ c 2)) coll)\n          s (drop (- c (/ c 2)) coll)]\n      (= (reduce + f) (reduce + s))))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 115, "code": "(fn balanced-num? [n]\n  (let [digits (mapv #(Character/getNumericValue %1) (str n))\n        mid    (fn [xs] (let [middle (bigint (/ (count xs) 2))]\n                          (if (odd? (count xs))\n                            [middle (inc middle)]\n                            [middle middle])))\n        bounds (mid digits)]\n    (= (reduce +' (subvec digits 0 (first bounds)))\n       (reduce +' (subvec digits (last bounds))))))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 115, "code": "(fn[n]\n  (->> (str n)\n       (map #(Character/digit % 10))\n       (#(let [half (double (/ (count %) 2))]\n           ((juxt (partial take (int (Math/floor half))) (partial drop (int (Math/ceil half)))) %)))\n       (map (partial reduce +))\n       (apply =)))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        hl (quot (count s) 2)\n        hs ((juxt take take-last) hl s)]\n    (apply = (map frequencies hs))))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 115, "code": "(fn [a]\n   (let [s ((partial map #(- (int %) 48)) (str a))\n         n (int (/ (count s) 2))]\n     (= (reduce + (take n s)) (reduce + (take n (reverse s))))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 115, "code": "(fn balance? [n]\n  (letfn [\n          (sum-digits [xs]\n            (apply + (map #(Integer/parseInt (str %)) xs)))]\n    \n    (if (<= n 9)\n      true\n      (let [s (str n)\n            x (/ (count s) 2)\n            l (sum-digits (take x s))\n            r (sum-digits (take-last x s))]\n        (= l r)))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 115, "code": "(fn [v]\n\t(let [\n\t\ts (str v)\n\t\tx (int (/ (count s) 2))\n\t\td #(- (int %) 48)\n\t\tt #(apply + (map d %))\n\t\t]\n\t(=\n\t\t(t (take x s))\n\t\t(t (take-last x s)))))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 115, "code": ";;; (__ 1982) must be 'true' ?\n#(let [s (str %)\n       f (fn [s] (sort (take (/ (count s) 2) s)))]\n  (= (f s) (f (reverse s))))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 115, "code": "(fn [n]\n  (let [xs (->> n str seq (map int))\n        k (Math/floor (/ (count xs) 2))]\n    (= (apply + (take k xs)) (apply + (take-last k xs)))))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 115, "code": "(fn balanced? [n] \n  (let [sn (str n)\n        len (count sn)\n        mid (quot len 2)\n        odd (if (odd? len) 1 0)\n        lc  (subs sn 0 mid)\n        rc  (subs sn (+ mid odd))\n        sum #(reduce + (map (fn [c] (- (int c) 40)) (seq %))) ]\n    (if (zero? mid)\n      true\n      (=  (sum lc) (sum rc)))))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digs ((fn digs [n]\n                 (if (< n 10) [n]\n                     (conj (digs (int (/ n 10))) (mod n 10))))\n              n)\n        mid (/ (count digs) 2)]\n    (apply =\n      (map (fn [as] (apply + as))\n        [(take (Math/floor  mid) digs)\n         (drop (Math/ceil  mid) digs)]))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 115, "code": "(fn [x]\n  (let [digits     (map #(- (int %) 48) (str x))\n        halfway    (/ (count digits) 2)\n        first-half (take halfway digits)\n        last-half  (take halfway (reverse digits))\n        balanced?  (= (apply + first-half) (apply + last-half))]\n   balanced?))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 115, "code": "(fn [n]\n    (let [digits (->> n\n                         str\n                         seq\n                         (map (comp int bigint str)))\n          sum-of-squares (apply +' (map #(*' % %) digits))\n          half (int (Math/floor (float (/ (count digits) 2))))]\n      (= (apply + (take half digits)) (apply + (take half (reverse digits))))))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 115, "code": "(fn [num]\n   (let [snum  (str num)\n         mid   (int (/ (.length snum) 2))\n         left  (reduce + (map int (take mid snum)))\n         right (reduce + (map int (take-last mid snum)))]\n     (= left right)\n     ))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 115, "code": "(fn bn [n]\n  (let [s (map #(- (int %) 48) (str n))\n      h (quot (inc (count s)) 2)\n      sumdig #(reduce + (take h %))]\n  (= (sumdig s) (sumdig (reverse s)))))", "user": "576df252e4b0979f8965156f"}, {"problem": 115, "code": "(fn is-balanced? [n]\n  (if (= 0 n)\n    true\n    (apply = (map #(loop [remaining % sum 0]\n                   (if (= 0 remaining)\n                     sum\n                     (recur (quot remaining 10) (+ sum (rem remaining 10)))))  (let [pow-10 (+ 1 (int (/ (Math/log n) (Math/log 10))))\n                                                                                                  right (int (rem n (Math/pow 10 (int (/ pow-10 2)))))\n                                                                                                  left (int (quot n (Math/pow 10 (int (Math/ceil (/ pow-10 2))))))]\n                                                                                              [left right])))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 115, "code": "(fn [x] \n  (apply \n   = \n   (let [s (seq (str x)) \n         cnt (count s)\n         half (quot cnt 2)] \n     (map (fn [s] (apply + (map int s))) \n          (if (even? cnt) \n            (split-at half s) \n            [(take half s) (drop (inc half) s)])))))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 115, "code": "(fn p115 [n]\n  (let [digs (map #(Character/digit % 10) (str n))\n        sz (quot (count digs) 2)\n        front (take sz digs)\n        back (drop (- (count digs) sz) digs)]\n    (= (reduce + front) (reduce + back))))", "user": "57fe836ee4b0d3187e9009d2"}, {"problem": 115, "code": "(fn [n]\n    (let [digits (map #(Integer/parseInt (str %)) (str n))\n          nd (int (/ (count digits) 2))\n          lsum (apply + (take nd digits))\n          rsum (apply + (take nd (reverse digits)))]\n      (= lsum rsum)))", "user": "4e837808535db62dc21a62d9"}, {"problem": 115, "code": "(fn [y]\n  (let [s (seq (str y))\n        c (/ (count s) 2)\n        f #(sort %)]\n    (= (f (take c s))  (f (take-last c s)))))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 115, "code": "(fn __ [n]\n  (let [s (str n)\n        c (count s)\n        h (int (/ c 2))]\n    (->> [(take h s) (drop (if (odd? c) (inc h) h) s)]\n         (map (fn [x] (map #(Integer. (str %)) x)))\n         (map (partial apply +))\n         (apply =))))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 115, "code": "(fn [n]\n  (let [s (map (comp read-string str) (str n))]\n    (if (= 1 (count s))\n      true\n      (let [c (count s)\n            h (int (/ c 2))\n            split (if (odd? c)\n                    [(take h s) (drop (inc h) s)]\n                    (partition h s))]\n        (apply = (map #(reduce + %)\n                      split))))))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        x (quot (count s) 2)\n        headx (take x s)\n        tailx (take x (reverse s))\n        headnumber (map (comp biginteger str) headx)\n        tailnumber (map (comp biginteger str) tailx)]\n    (= (reduce + 0 headnumber)\n       (reduce + 0 tailnumber))))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits (loop [digits []\n                      n      n]\n                 (if (< n 10)\n                   (conj digits n)\n                   (recur (conj digits (rem n 10)) (quot n 10))))\n        bd (quot (count digits) 2)]\n    (= (reduce + (take bd digits))\n       (reduce + (take-last bd digits)))))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 115, "code": "(fn [x]\n  (let [a (lazy-seq (str x))\n        b (count a)]\n  (if (= b 1)\n  true\n  (if (odd? b)\n    (= (sort (take (quot b 2) a)) (sort (drop (inc (quot b 2)) a)))\n    (= (sort (take (quot b 2) a)) (sort (drop (quot b 2) a)))\n    ))))", "user": "564d3169e4b0284900eef67c"}, {"problem": 115, "code": "(fn [x]\n   (let [a (seq (str x))\n         l (count a)\n         f #(first (partition (int (/ l 2)) %))\n         n #(apply + (map bigint (map str (f %))))]\n     (= (n a) (n (reverse a)))))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (quot (count digits) 2)\n        sum #(reduce + %)]\n    (= (sum (take size digits)) (sum (take-last size digits)))))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 115, "code": "(fn  [K]\n  (let [M (map #(mod (quot K %) 10) (take-while #(< 0 (quot K %)) (iterate #(* 10 %) 1) )) N (reverse M)]\n   (=  (reduce + (take (quot (count M) 2) M))    (reduce + (take (quot (count N) 2) N))  )))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 115, "code": "(fn nbalanced? [number]\n  (letfn [\n    (digtz [] \n     (loop [acc [] num number]\n       (if (zero? num) \n         acc\n         (let \n          [lsd (rem num 10)\n           rst (quot num 10)\n           newacc (conj acc lsd)] \n          (recur newacc rst)))))]\n  (let \n    [vnum (digtz)\n     ln (count vnum)\n     halfln (quot ln 2)\n     leads (take halfln vnum)\n     trails (take halfln \n               (reverse vnum))\n     leadsum (reduce + leads)\n     trailsum (reduce + trails)]\n  (= leadsum trailsum) )))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 115, "code": "#(let [d (->> % str (map (comp read-string str))) \n       n (/ (count d) 2)] \n   (= \n    (reduce + (take n d)) \n    (reduce + (nthrest d (int n)))))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 115, "code": "(fn balanced?\n  [x]\n  (loop [left []\n         right []\n         remain (map (fn [x] (- (int x) (int \\0))) (into [] (str x)))]\n    (if (< (count remain) 2)\n        (= (reduce + left) (reduce + right ))\n        (recur (conj left (first remain))\n               (conj right (last remain))\n               (reverse (rest (reverse (rest remain))))))))", "user": "58152157e4b0f478707a0631"}, {"problem": 115, "code": "#(let [s (str %)\n       h (/ (count s) 2)]\n   (apply = (map frequencies [(take h s) (take-last h s)])))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 115, "code": "(fn balanced? [n]\n  (letfn [(split [n]\n            (->> n\n                 (str)\n                 (map int)\n                 (map #(- % 48))))\n          (divvy [ns]\n            (let [half (/ (count ns) 2)]\n              (list\n               (take half ns)\n               (take-last half ns))))\n          (sum [ns]\n            (map (partial reduce +) ns))\n          (test [ns]\n            (= (first ns) (last ns)))]\n    (->> n\n         (split)\n         (divvy)\n         (sum)\n         (test))))", "user": "56069006e4b08b23635d3174"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits (map #(Character/digit % 10) (str n))\n        half (quot (count digits) 2)]\n    (= (apply + (take half digits))\n       (apply + (take-last half digits)))))", "user": "58247423e4b051871117bec5"}, {"problem": 115, "code": "(fn [x] \n  (->> x\n  \t(Integer/toString)\n    (seq)\n    (map #(Integer/parseInt (str %)))\n    ((fn [x] (map - x (reverse x))))\n    ((fn [x] (take (/ (count x) 2) x)))\n   (reduce + 0)\n    (= 0)\n  )\n  )", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 115, "code": "(fn [n]\n    (let [s (str n), l (count s)]\n      (= (reduce + (map int (take (Math/ceil (/ l 2)) s)))\n         (reduce + (map int (drop (Math/floor (/ l 2)) s))))))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (mapv #(- (int %) (int \\0)) (str n))\n        half (quot (count digits) 2)\n        left (take half digits)\n        right (take-last half digits)]\n    (= (apply + left) (apply + right))))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 115, "code": "(fn [n]\n  (let [x (map #(- (int %) 48) (str n))\n        y (quot (count x) 2)]\n  (= (reduce + (take y x)) (reduce + (take-last y x)))))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 115, "code": "(fn balance-of [n]\n  (let [digits (map #(Character/getNumericValue %) (String/valueOf n))\n        mid-point (quot (count digits) 2)\n        left-digits (take mid-point digits)\n        right-digits (take-last mid-point digits)\n        sum-digits (partial apply +)]\n    (= (sum-digits left-digits) (sum-digits right-digits))))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 115, "code": "(fn balance?\n  [n]\n  (let [coll (map (comp read-string str) (str n))\n        n (/ (count coll) 2)\n        xs (take n coll)\n        ys (take n (reverse coll))]\n    (= (reduce + xs) (reduce + ys))))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 115, "code": "(fn [x]\n  (let [digits (map #(- (int %) (int \\0))\n                    (str x))\n        c (quot (count digits) 2)\n        sides ((juxt (partial take c) (partial take-last c)) digits)]\n  (apply == (map #(reduce + %) sides))))\n\n; golf: if sum digits, then also sum chars! \n; Also, counting middle is ok if doing it twice!\n; You can take fractional numbers, they get rounded up.\n;(fn [x]\n;  (let [s (str x) \n;        l (/ (count s) 2)\n;        f #(apply + (map int (take l %)))]\n;    (= (f s)\n;       (f (into () s))))) ; cheap reverse", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 115, "code": "(letfn [\n        (digits [n] (map #(- (int %) 48) (str n)))\n        (balanced-seq [x] (=\n                           (apply + (take (quot (count x) 2) x))\n                           (apply + (drop (quot (inc (count x)) 2) x))\n                           ))]\n  (fn [n] (balanced-seq (digits n))))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 115, "code": "#(let [xs (map int (str %))\n       n (/ (count xs) 2)]\n   (= (apply + (take n xs))\n      (apply + (take-last n xs))))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 115, "code": "(fn is-balanced? [n]\n  (letfn [(digits [n]\n            (if (< n 10)\n              [n]\n              (conj (digits (/ (- n (mod n 10)) 10))\n                    (mod n 10))))\n          (balanced? [coll left-sum right-sum]\n            (if (empty? coll)\n              (= left-sum right-sum)\n              (recur (rest (butlast coll)) \n                     (+ left-sum (first coll))\n                     (+ right-sum (last coll)))))]\n  (balanced? (digits n) 0 0)))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 115, "code": "(fn balance-n [n]\n  (let [str-n    (str n)\n        char-int #(- (int %) 48)\n        len      (count (str n))\n        x        (int (/ len 2))\n        ;; mod <odd-n> 2 will always produce 1. For e.g 5/2 = 2 + (mod 5 2) = 3\n        y        (+ x (mod len 2))\n        split-n  [(take x str-n) (drop y str-n)]\n        nums     (map #(map char-int %) split-n)]\n    (apply = (map #(reduce + %) nums))))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 115, "code": "(fn [s](let[x (quot (count (str s)) 2)\ny (fn [g] (reduce #(+ % (int %2)) 0 g))]\n(= (y (take x (str s))) (y (take-last x (str s))))))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(split-digit [x]\n                       (loop [digit-seq '()\n                              i x]\n                         (if (< i 10)\n                           (conj digit-seq i)\n                           (recur (conj digit-seq \n                                        (mod i 10))\n                                  (int (/ i 10))))))]\n    (let [digit-seq (split-digit n)\n          len (count digit-seq)\n          left-seq (take (int (/ len 2)) digit-seq)\n          right-seq (drop (int (/ (inc len) 2)) digit-seq)]\n      (= (apply + left-seq) (apply + right-seq)))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 115, "code": "(fn [x]\n  (let [s (str x)\n        ct (count s)\n        sa (split-at (/ ct 2) s)\n        pf #(Integer/parseInt (str %))\n        left (if (odd? ct) (butlast (first sa)) (first sa))\n        right (second sa)\n        sum #(reduce + (map pf %))]\n    (= (sum left) (sum right))))", "user": "5574c172e4b05c286339e059"}, {"problem": 115, "code": "(fn [number]\n  (let [length (count (str number))\n        half-length (/ (if (odd? length)\n                         (+ length 1)\n                         length)\n                       2)\n        vector_ (apply vector (seq (str number)))]\n    (= (apply + (map (fn [char]\n                       (- (int char) (int \\0)))\n                     (subvec vector_ 0 half-length)))\n       (apply + (map (fn [char]\n                       (- (int char) (int \\0)))\n                     (subvec (apply vector (reverse vector_)) 0 half-length))))))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 115, "code": "(fn [x]\n  (let [s (str x)\n        c (count s)\n        [l r] (split-at (quot c 2) s)\n        r (if (odd? c) (rest r) r)]\n    (or (= l r) (= l (reverse r)))))", "user": "4dac39a28cc9d6edb8beb0b3"}, {"problem": 115, "code": "(fn [n] (let [s (str n)\n               c (count s)\n               t (int (/ c 2))\n               l (take t s)\n               r (take-last t s)\n               sm (fn [k] (->> (map #(- (int %) 48) k)\n                               (reduce +)))]\n           (= (sm l) (sm r))))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 115, "code": "(fn balanced-n [n]\n  (let [ns (seq (str n))\n        half (quot (count ns) 2)\n        back (drop (- (count ns) half) ns)\n        front (take half ns)\n        sum (fn [s] (reduce #(+ %1 (Character/digit %2 10)) 0 s))]\n    (= (sum front) (sum back))))", "user": "56f4cedce4b046a417f92063"}, {"problem": 115, "code": "(fn [n]\n  (let [s (map #(Integer/parseInt (str %)) (str n))\n        si (count s)\n        su #(reduce + %)\n        eq #(= (su %1) (su %2))\n        mid (int (/ si 2))\n        mds (take mid s)]\n    (if (odd? si)\n      (eq mds (drop (inc mid) s))\n      (eq mds (drop mid s)))))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 115, "code": "(fn z [n]\n  (let [numberAsSeq (map #(Character/getNumericValue %) (str n))\n        cnt (count numberAsSeq)\n        sumFn (fn [coll] (reduce + coll))]\n    (cond\n      (= 1 cnt) true\n      :else (= (sumFn(take (quot cnt 2) numberAsSeq)) (sumFn(drop (+ (quot cnt 2) (rem cnt 2)) numberAsSeq))))))", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 115, "code": "(fn [n]\n    (let [ns (->> n\n                (iterate #(quot % 10))\n                (take-while pos?)\n                (map #(mod % 10))\n                (into []))\n          i (/ (count ns) 2)]\n      (zero?\n       (reduce -\n               (reduce + (take (Math/floor i) ns))\n               (drop (Math/ceil i) ns)))))", "user": "55597b84e4b0deb715856e36"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(-> % str read-string) (str n))\n        sum #(reduce + 0 %)\n        half-len (-> (count digits) (/ 2) int)\n        left-half (take half-len digits)\n        right-half (take half-len (reverse digits))]\n    (= (sum left-half)\n       (sum right-half))))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 115, "code": "(fn [x] (let [\tcol (loop [d x result []] (if (zero? d) result (recur (quot d 10) (conj result (rem d 10)))))\n\t\t\t\tn (quot (count col) 2) \n\t\t\t\tleft (take n col) \n\t\t\t\tright (take-last n col)] (= (apply + left) (apply + right))))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 115, "code": "(fn balance\n\n  ([x]\n\n   (balance (map read-string (re-seq #\"\\d\" (str x))) (map read-string (reverse (re-seq #\"\\d\" (str x)))) (count (re-seq #\"\\d\" (str x)))))\n\n  ([x y z]\n\n   (if (= z 2)\n\n     (if (= (first x) (last x))\n\n       true\n\n       false)\n\n     (if (= (reduce + (take (long (Math/ceil (/ z 2))) x))\n\n            (reduce + (take (long (Math/ceil (/ z 2))) y)))\n\n       true\n\n       false))))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 115, "code": ";; woot\n                                                                                                                   (fn [s] (apply = (map set ((juxt drop drop-last) (quot (count (str s)) 2) (map (comp bigint str) (str s))))))\n;; woot", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 115, "code": "(fn\n  [n]\n  (let [c (map #(-> % str read-string) (-> n str seq))\n        len (count c)\n        l (apply + (take (int (/ len 2)) c))\n        r (apply + (drop (/ len 2) c))]\n    (= l r)))", "user": "56bb652ae4b0f26550335953"}, {"problem": 115, "code": "(fn balanced-number? [n]\n  (let [digits (map (comp read-string str) (str n))\n        half-len (int (/ (count digits) 2))]\n    (= (reduce + (take half-len digits)) (reduce + (take-last half-len digits)))))", "user": "5879d577e4b01531a375ead8"}, {"problem": 115, "code": "(fn balanced? [num]\n  (let [digits (map read-string (map str (seq (str num))))\n        half (int (/ (count digits) 2))\n        left (take half digits) right (drop (- (count digits) half) digits)]\n    (= (apply + left) (apply + right))))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 115, "code": "(fn [x] (let [ s (map #(- (int %) 48) (seq (str x))) r (reverse s) c (int (/ (count s) 2))]\n          (= (reduce + (take c s)) (reduce + (take c r)))))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 115, "code": "(fn[y]\n  (let[x (map #(Character/digit % 10) (str y))\n       l (reduce + (take (int (Math/floor (/ (count x) 2))) x))\n       r (reduce +(take (int (Math/floor (/ (count x) 2))) (reverse x)))]\n      (= l r)))", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 115, "code": "(fn bn [n]\n  (let [tokens (map #(Integer/parseInt (str %)) (str n))\n        c (count tokens)\n        [l r] (split-at (/ c 2) tokens)\n        l (if (odd? c) (butlast l) l)]\n    (= (reduce + l) (reduce + r))))", "user": "4fe49706e4b0e8f79898feb7"}, {"problem": 115, "code": "(fn [n]\n  (let [digs (map #(Integer/parseInt (str %)) (str n))\n        n-e (int (Math/floor (/ (count digs) 2)))\n        lft (take n-e digs)\n        rgt (drop (if (odd? (count digs)) (inc n-e) n-e) digs)]\n    (= (reduce + lft) (reduce + rgt))))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 115, "code": "(fn [coll]\n  (let  [ds ((comp (partial map (comp read-string str)) str) coll)\n        c (count ds)\n        [r l]  (split-at (/ c 2) ds)]\n     (= (apply + r) (apply + (if (odd? c) (last r) 0) l))))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 115, "code": "(fn f [x] \n  (let \n    [\n     sec (seq(str x))\n     m (quot (count sec) 2)\n     left (take m sec)\n     right (take m (reverse sec))\n     acu (fn [x] (reduce + (map int x)))]    \n   (= (acu left) (acu right))))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 115, "code": "(fn [x]\n  (let [v (vec (str x))\n        c (/ (count v) 2)]\n    (= (set (take-last c v)) (set (take c v)))))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 115, "code": "(fn balance-num? [n]\n  (let [m (str n)\n           cnt (count m)\n           digit-sum (fn [cs]\n                              (->> cs\n                                (map #(-> % int (- 0x30)))\n                                (apply +)))]\n    (cond\n     (= cnt 1) true\n     (even? cnt) (->> (split-at (/ cnt 2) m)\n                                   (map digit-sum)\n                                   (apply =))\n     :default (let [q (quot cnt 2)\n                             left (digit-sum (take q m))\n                             right (digit-sum (drop (inc q) m))]\n                      (= left right)))))", "user": "58949f8de4b00487982d525e"}, {"problem": 115, "code": "(fn f [n]\n  (let [d (map #(- (int %) 48) (str n))\n        n (/ (count d) 2)\n        a apply]\n    (= (a + (take n d))\n       (a + (take-last n d)))))", "user": "5458c74de4b01be26fd74623"}, {"problem": 115, "code": "(fn balanced? [n]                                    (let [text (str n)                                         cnt (count text)                                     half (quot cnt 2)                                    remed (rem cnt 2)                                    prev (take half text)                                next (drop (+ half remed) text)]                 (apply =                                                    (map (fn [part]                                             (reduce #(+ %1                                                   (Character/digit %2 10))                                                                             0                                                    part))                                     [prev next]))))", "user": "5895477fe4b00487982d527c"}, {"problem": 115, "code": "(fn [n]\n  (let [v (str n)\n        len (count v)\n        halflen (quot (inc len) 2)\n        prefix (take halflen v)\n        suffix (drop (- len halflen) v)]\n    (letfn [(sumdigits [v]\n              (apply + (map #(- (int %) (int \\0)) v)))]\n      (= (sumdigits prefix) (sumdigits suffix)))))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 115, "code": "(fn [y] (apply = \n               (map #(apply +\n                            (map int \n                                 (take (quot (count %) 2) %))) \n                    [(str y)  (reverse (str y)) ])))", "user": "576e3258e4b0979f89651574"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(digits [n]\n            (loop [n n\n                   r '()]\n              (if (= n 0)\n                r\n                (recur (quot n 10) (cons (rem n 10) r)))))]\n    (let [ds (digits n)\n          c (count ds)\n          s (Math/ceil (/ c 2))]\n      (= (apply + (take s ds)) (apply + (drop (- c s) ds))))))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 115, "code": "(fn [n]\n     (let [x (map #(- (int %) 48) (vec (str n)))\n           sum (fn [a] (apply + a))\n           len (if (even? (count x))\n                 (inc (count x))\n                 (count x))\n           orig_len (count x)\n           int_len (fn [x] (int (/ len 2)))\n           sum1 (sum (take (int_len len) x))\n           sum2 (sum (drop (int (Math/ceil (/ orig_len 2))) x))]\n       (println sum2)\n       (= sum1 sum2))\n     )", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 115, "code": "(fn [n] (letfn [\n                 (get-digits [v]\n                   (reverse\n                     (loop [remainder v digits []]\n                       (let [\n                             floor10 (int (Math/floor (/ remainder 10)))\n                             digit (- remainder (* 10 floor10))\n                             ]\n                         (if (> remainder 0)\n                           (recur floor10\n                                  (conj digits digit)) digits)))))\n                 \n                 (get-slices [n]\n                   (let [\n                         v (into [] (get-digits n))\n                         mid (/ (count v) 2)\n                         odd (rem (count v) 2)\n                         s1 (subvec v 0 mid)\n                         s2 (subvec v (+ mid odd) (count v))\n                         ]\n                     {:s1 s1 :s2 s2}))\n                 \n                 (sum-slice [v] (reduce (fn [p e] (+ p e) ) 0 v) )\n                 ]\n           (let [s (get-slices n)] (= (sum-slice (:s1 s)) (sum-slice (:s2 s))))))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (loop [x n, l (transient [])] (if (= x 0) (persistent! l) (recur (quot x 10) (conj! l (rem x 10)))))\n        splt (/ (count digits) 2)\n        l (take (int splt) digits)\n        r (drop (int (+ splt 1/2)) digits)]\n    (= (apply + l) (apply + r))))", "user": "58923efce4b00487982d521c"}, {"problem": 115, "code": "(fn balance [ n ] \n   (let [digits (map int (seq (str n)))\n         half (int (/ (count digits) 2))\n      \t leftsum (apply + (take half digits))\n       \t rightsum (apply + (take-last half digits))\t\n        ]\n        (= leftsum rightsum)))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 115, "code": "(fn [n] \n  (let [s (map int (seq (str n))) \n        l (quot (count s) 2)] \n    (= (apply + (take l s)) \n       (apply + (take-last l s)))))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 115, "code": "(fn balance [x]\n    (let [digits (fn digits [n] (if (pos? n) (conj (digits (quot n 10)) (mod n 10)) [])) \n          hfsplit (fn [coll]\n                   (if (odd? (count coll))\n                    (= (apply + (take (quot (count coll) 2) coll)) (apply + (drop (+ (quot (count coll) 2) 1) coll)))\n                    (= (apply + (take (quot (count coll) 2) coll)) (apply + (drop (quot (count coll) 2) coll)))))] (hfsplit (digits x))))", "user": "4eeb8f68535d93acb0a668a9"}, {"problem": 115, "code": "(fn isNBalanced [num]\n  (let\n    [\n     digits (seq (str num))\n     size (count digits)\n     half (int (/ size 2))\n     other (- size half)\n     sumDigits (fn [nums] (reduce + 0 (map #(Integer/parseInt (str %)) nums)))\n     left (sumDigits (take half digits))\n     right (sumDigits (drop other digits))\n     result (= left right)\n     ]\n    result\n    )\n  )", "user": "58950f29e4b00487982d5270"}, {"problem": 115, "code": "(fn isbalance [n] \n  (letfn [(nflat [x]\n                 (if (zero? n)\n                   [0]\n                   (loop [x n result []]\n                     (if (zero? x)\n                       result\n                       (recur (quot x 10) (conj result (mod x 10)))))))\n          ]\n    (let [s (nflat n)\n          c (count s)\n          half (int (/ c 2))\n          s1 (take half s)\n          s2 (drop (- c half) s)\n          ]\n      (= (reduce + s1) (reduce + s2)))))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 115, "code": "(fn [n]\n  (let [to-n-seq (fn [agg n]\n   (let [m (mod n 10)\n         nm (- n m)\n         n-agg (cons m agg)]\n     (if (> nm 0)\n       (recur n-agg (/ nm 10))\n       n-agg)))\n        n-seq (to-n-seq () n)\n        cn (count n-seq)\n        n-take (int (/ cn 2))\n        n-drop (+ n-take (mod cn 2))\n        left (take n-take n-seq)\n        right (drop n-drop n-seq)]\n    (= (apply + left) (apply + right))))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 115, "code": "(fn [n] \n  (let [nums (map (comp read-string str) (str n))\n        c (/ (count nums) 2)] \n    (= (reduce + (take c nums)) (reduce + (take-last c nums)))))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 115, "code": "(fn balancedN [n]\n  (let [nstr (str n)\n        ncount (count nstr)\n        midcount (/ ncount 2)\n        left (take midcount nstr)\n        right (take-last midcount nstr)\n        leftsum (reduce + (map #(Character/digit % 10) left))\n        rightsum (reduce + (map #(Character/digit % 10) right))]\n    (= leftsum rightsum)\n    )\n  )", "user": "589037b4e4b00487982d51d0"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        cnt (count s)\n        a (map int (take (Math/floor (/ cnt 2)) s))\n        b (map int (drop (/ cnt 2) s))]\n    (= (apply + a) (apply + b))))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 115, "code": "(fn b-n\n  [n]\n  (let [str-n (str n)\n        str-n-count (count str-n)\n        middle (if (even? str-n-count)\n                 (/ str-n-count 2)\n                 (/ (dec str-n-count) 2))\n        left (take middle str-n)\n        right (drop (- str-n-count middle) str-n)\n\n        left-sum (apply + (map #(Integer. (str %)) left))\n        right-sum (apply + (map #(Integer. (str %)) right))]\n    (= left-sum right-sum)))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 115, "code": "(fn balanced? [x]\n  (let [s (seq (str x))\n        splited (split-at (quot (count s) 2) s)\n        l (map (comp read-string str)(first splited))\n        f (fn [x] (if (even? (count x)) 0 1))\n        r (map (comp read-string str)(drop (f s) (second splited)))]\n    (= (apply * l) (apply * r))))", "user": "53ae0c50e4b047364c044471"}, {"problem": 115, "code": "(fn balanced-number? [x]\n  (letfn [(digits [x]\n            (let [[q r] [(quot x 10) (rem x 10)]]\n              (if (zero? q) [r] (conj (digits q) r))))\n          (sum-sub [v start end] (reduce + (subvec v start end)))]\n    (let [digits (digits x)\n          size (count digits)\n          half-size (int (/ size 2))]\n      (= (sum-sub digits 0 half-size)\n         (sum-sub digits (if (odd? size) (inc half-size) half-size) size)))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 115, "code": "(fn blanced-number? [n]\n      (let [digit-array (map #(- (int %) 48) \n                          (seq (char-array (str n))))\n            sum-left-half (reduce + \n                            (take (/ (count digit-array) 2) digit-array))\n            sum-right-half (reduce + \n                            (take (/ (count digit-array) 2) (reverse digit-array)))]\n       (= sum-left-half sum-right-half)))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 115, "code": "(fn bal? [n]\n  (->> (str n)\n       ((fn [s] (let [half (quot (count s) 2)] \n                 [(take half s) (drop (- (count s) half) s)])))\n       (map sort)\n       (apply =)))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 115, "code": "#(let [c (/ (count (str %)) 2) s (seq (str %))]\n   (= (reduce + (map int (take c (reverse s)))) (reduce + (map int (take c s)))))", "user": "5895385fe4b00487982d5279"}, {"problem": 115, "code": "(fn balanced-number? [num]\n  (let [digits (map #(read-string (str %)) (str num))\n        half-length (int (/ (count digits) 2))\n        left-digits (take half-length digits)\n        right-digits (take-last half-length digits)]\n    (= (reduce + left-digits) (reduce + right-digits))))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 115, "code": "(fn [n]                                                                                                                                                       \n  (let [s (map #(Character/getNumericValue %) (str n))                                                                                                                    \n        l (quot (count s) 2)]                                                                                                                                             \n    (= (apply + (take l s)) (apply + (take l (reverse s))))))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 115, "code": "(fn\n  [n]\n  (let\n    [ds (str n)\n     ct (count ds)\n     half (Math/floor (/ ct 2))\n     sum #(reduce + (map int %))]\n    (= (sum (take half ds)) (sum (take half (reverse ds))))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 115, "code": "(fn [n] \n  (let [l ((fn d [x]\n            (if (< x 10)\n              [x]\n              (cons (mod x 10) (d (int (/ x 10)))))) n)\n        s #(apply + (take (/ (count l) 2) %))]\n    (= (s l) (s (reverse l)))))", "user": "4dc986d0535d5973398f9285"}, {"problem": 115, "code": "(fn balanced? [n]\n  (if (< n 10)\n    true\n    (let [n (str n)\n          half-size (quot (count n) 2)\n          left-half (subs n 0 half-size)\n          right-half (subs n (if (odd? (count n))\n                                 (inc half-size)\n                                 half-size))]\n      (= (reduce #(+ (int %1) (int %2)) left-half)\n         (reduce #(+ (int %1) (int %2)) right-half)))))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 115, "code": "(letfn [(num->digits\n            ([m]\n              (num->digits m '()))\n            ([m dig]\n              (if (< m 10)\n                (into [m] dig)\n                (recur (quot m 10) (cons (rem m 10) dig)))))\n          ]\n    (fn balanced? [n]\n      (let [dig (num->digits n)\n            half (/ (count dig) 2)\n            left (take half dig)\n            right (take half (reverse dig))\n            ]\n        (= (reduce + left) (reduce + right)))))", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 115, "code": "#(let [s (str %)\n        c (/ (count s) 2)\n        l (take c s)\n        r (take c (reverse s))]\n    (= (apply + (map int l))\n       (apply + (map int r))))", "user": "5893c64ce4b00487982d524b"}, {"problem": 115, "code": "(fn [n]\n  (let\n    [s (map int (str n))\n     c2 (/ (count s) 2)]\n    (apply\n      =\n      (map\n        (partial reduce +)\n        ((juxt\n           #(take (int c2) %)\n           #(drop c2 %))\n         s)))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 115, "code": "(fn [n]\n      (let [s (str n)\n            left (take (quot (count s) 2) s)\n            right (drop (quot (inc (count s)) 2) s)]\n        (= (reduce #(+ %1 (Integer/parseInt (str %2))) 0 left)\n           (reduce #(+ %1 (Integer/parseInt (str %2))) 0 right))))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 115, "code": "(fn [n] (let [sn (str n) half (quot (count sn) 2)] (letfn [(strsum [s] (apply + (map #(- (int %) (int \\0)) s)))] (= (strsum (take half sn)) (strsum (take-last half sn))))))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 115, "code": "(fn [x] (let [listnumber (re-seq #\"\\d\" (str x))\n              n (int (/ (count listnumber) 2))\n              left (take n listnumber)\n              right (take-last n listnumber)]\n          (= (apply + (map #(read-string %) left))\n             (apply + (map #(read-string %) right)))))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 115, "code": "(fn [n]\n   (let [s (str n)\n         size (count s)\n         takeN (if (odd? size) (/ (dec size) 2) (/ size 2))\n         dropN (if (odd? size) (inc takeN) takeN)]\n     (letfn [(total [c] \n               (reduce #(+ % (Integer/parseInt (str %2))) 0 c))]\n       (= (total (take takeN s)) (total (drop dropN s))))))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 115, "code": "(fn [n]\n    (let [s (str n)\n          len (count s)\n          mid (quot len 2)\n          left (take mid s)\n          right (drop (if (even? len) mid (inc mid)) s)\n          sum (fn [p] (->> p\n                           (map #(- (int %) 48))\n                           (reduce +)))]\n       (= (sum left) (sum right))))", "user": "5901158de4b0438e51c2d039"}, {"problem": 115, "code": "(fn [n] (let [digits (#(loop [ds (), n' %] \n                        (if (< n' 10) (cons n' ds) \n                          (recur (cons (rem n' 10) ds) (quot n' 10)))) n)\n              l (quot (count digits) 2)]\n          (= (reduce + (take l digits)) (reduce + (take l (reverse digits))))))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 115, "code": "(fn p-115 [n]\n  (loop [digits (map #(- (int %) 48) (str n))\n         sum 0]\n    (if (> 1 (count digits))\n      (zero? sum)\n      (recur\n        (rest (butlast digits))\n        (+ sum (- (first digits) (last digits)))))))", "user": "501d34f6e4b066e56b9d0b1e"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(sum-side [n f r]\n            (reduce +\n                    (map #(Integer. %)\n                         (map str\n                              (let [l (str n)\n                                    c (count l)\n                                    m (r (/ c 2))]\n                                (f m l))))))\n          (sum-left [n]\n                    (sum-side n take int))\n          (sum-right [n]\n                     (sum-side n drop identity))]\n   (= (sum-left n) (sum-right n))))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 115, "code": "(fn balanced? [num]\n  (let [list (->> (seq (str num))\n                   (map #(Integer/parseInt (str %))))\n        cnt (count list)\n        split (split-at (quot cnt 2) list)]\n    (if (odd? cnt)\n      (= (reduce + (first split)) (reduce + (rest (second split))))\n      (= (reduce + (first split)) (reduce + (second split)))\n      )))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 115, "code": "(fn [s]\n  (let [n (map #(- (int %) (int \\0)) (str s))\n        x (fn [y] (reduce + (take (/ (count y) 2) y)))]\n  \n    (= (x n) (x (reverse n)))\n    )\n  )", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 115, "code": "(fn bal \n  ([n]\n   (bal (str n) 0 0))\n  ([s left right]\n   (cond \n         (<= (count s) 1) (= left right)\n         :else (bal (rest (butlast s)) (+ left \n                                          (Character/digit (first s) 10))\n                    \t\t\t\t\t(+ right \n                                           (Character/digit (last s) 10))))))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer. %) (map str (str n)))\n        mid (/ (count digits) 2)]\n    (->> [(take (Math/floor mid) digits) (drop (Math/ceil mid) digits)]\n         (map (partial reduce +))\n         (apply =))))", "user": "58ffac9de4b0438e51c2cffd"}, {"problem": 115, "code": "(fn [input]\n   (if (odd? (count(str input)))\n     ( =\n       (reduce (fn [x y ](+ (Integer. (str x)) (Integer. (str y)))) 0 (take (/ (+ (count (str input) ) 1 ) 2) (str input)) )\n       (reduce (fn [x y ](+ (Integer. (str x)) (Integer. (str y)))) 0 (take (/ (+ (count (str input) ) 1 ) 2) (reverse (str input)))) )\n     ( =\n       (reduce (fn [x y ](+ (Integer. (str x)) (Integer. (str y)))) 0 (take (/ (count (str input) ) 2) (str input)))\n       (reduce (fn [x y ](+ (Integer. (str x)) (Integer. (str y)))) 0 (take (/ (count (str input)  ) 2) (reverse (str input)))) )\n\n     )\n\n   )", "user": "59228b00e4b026ae38521281"}, {"problem": 115, "code": "(fn [x]\n  (let [str-x (str x)]\n    (letfn [(sum-half [chars]\n              (reduce + (map (comp read-string str) (take (int (/ (count str-x) 2)) chars))))]\n      (= (sum-half str-x)\n         (sum-half (reverse str-x))))))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 115, "code": "(fn [s]\n  (let [ss   (map #(Integer/parseInt (str %)) (str s))\n        size (int (/ (count ss) 2))\n        left (take size ss)\n        right (take-last size ss)]\n    (= (reduce + left) (reduce + right))))", "user": "566fa059e4b0a866af6896ea"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [ns  (str n)\n        hc  (int (/ (count ns) 2))\n        sum (fn [chars] (->> chars\n                             (map #(- (int %) 48))\n                             (reduce +)))\n        f   (sum (take hc ns))\n        b   (sum (take hc (reverse ns)))]\n    (== f b)))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 115, "code": "(fn [n]\n    (let [s (map #(Integer/parseInt (str %)) (seq (str n)))\n          t (/ (count s) 2)\n          l (Math/floor t)\n          r (Math/ceil t)]\n      (= (apply + (take l s)) (apply + (drop r s)))\n      ))", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 115, "code": "(fn [num]\n   (let [str-seq (str num)\n         half (int (/ (count str-seq) 2))]\n     (=\n      (reduce #(+ %1 (- (int %2) (int \\0))) 0 (take half str-seq))\n      (reduce #(+ %1 (- (int %2) (int \\0))) 0 (take half (reverse str-seq))))))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Character/digit %1 10) (str n)),\n        half-len (quot (count digits) 2),\n        left (take half-len digits),\n        right (take-last half-len digits)]\n    (= (reduce + left)\n       (reduce + right))))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 115, "code": "(fn [x] \n  (let[il (map #(- (int  %) (int \\0)) (str x)) \n       sizediv2 (quot (count il) 2)]  \n    (= \n      (apply + (take sizediv2 il)) \n      (apply + (take-last sizediv2 il)))))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 115, "code": "(fn f155 [n]\n  (let [twin? (fn [x] (= 1 (count (distinct (str x)))))\n        digit (count (str n))]\n    (if (= 1 digit)\n      true\n      (if (twin? n)\n        true\n        (cond (= 3 digit) (if (= (first (str n)) (last (str n)))\n                            true\n                            false)\n              (= 5 digit) (if (or (= (reverse (take 2 (str n))) (drop 3 (str n)))  (= (take 2 (str n)) (drop 3 (str n))))\n                            true\n                            false))))))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 115, "code": "(fn waw [x] \n       (let [coll (map #(read-string (str %)) (str x))\n             num (count coll)\n             left (reductions + coll)\n             right (reductions + (reverse coll))] \n         (if (>= num 3) (= (second left) (second right))\n             (if (= num 2) (= (first coll) (second coll))\n                 (if (= num 1) true false)))))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 115, "code": "(fn [n]\n  (if (= (reduce + (take (int (/ (count (str n)) 2)) (map read-string (map str (apply vector (str n)))))) \n         (reduce + (take (int (/ (count (str n)) 2)) (map read-string (map str (apply vector (reverse (str n))))))))\n    true\n    false))", "user": "59368ccae4b02506e01a297a"}, {"problem": 115, "code": "(fn [n] \n  (let [s (->> n str (map #(Character/getNumericValue %)))\n       \tcnt (-> s count inc (/ 2) int)]\n   (= (apply + (take cnt s)) (apply + (take cnt (reverse s))))))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 115, "code": "(fn [num]\n  (if (even? (count(re-seq #\"\\d\" (str num))))\n    (if (= (reduce + (take (/ (count(re-seq #\"\\d\" (str num))) 2) (map read-string (re-seq #\"\\d\" (str num))))) (reduce + (drop (/ (count(re-seq #\"\\d\" (str num))) 2) (map read-string (re-seq #\"\\d\" (str num))))))\n      true\n      false)\n    (if (= (reduce + (take (- (/ (count(re-seq #\"\\d\" (str num))) 2) 1) (map read-string (re-seq #\"\\d\" (str num))))) (reduce + (drop (/ (count(re-seq #\"\\d\" (str num))) 2) (map read-string (re-seq #\"\\d\" (str num))))))\n      true\n      false)))", "user": "59369515e4b02506e01a297e"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(digits [x]\n            (loop [n x\n                   ds '()]\n              (if (zero? n)\n                ds\n                (let [d (mod n 10)\n                      r (quot n 10)]\n                  (recur r (cons d ds))))))]\n    (let [ds (digits n)\n          l (quot (count ds) 2)]\n      (= (reduce + (take l ds))\n         (reduce + (take l (reverse ds)))))))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "592518e8e4b072a2710fce67"}, {"problem": 115, "code": "(fn f [ys]\n  (let \n    [xs (map int (seq (str ys)))\n     i  (quot (count xs) 2)\n     lxs (take i xs)\n     rxs (drop (- (count xs) i) xs)\n     ls (reduce + 0 lxs)\n     rs (reduce + 0 rxs)]\n    (= ls rs)))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 115, "code": "(fn [x]\n  (let [d (map read-string (map str (seq (str x))))\n        c (if (odd? (count d))\n            (/ (- (count d) 1) 2)\n            (/ (count d) 2))\n        t (take c d)\n        e (if (odd? (count d))\n            (drop (+ c 1) d)\n            (drop c d))]\n    \n    (prn t)\n    (prn e)\n    (= (reduce + t) (reduce + e))))", "user": "593744abe4b02506e01a299b"}, {"problem": 115, "code": "(fn [x] (let [numCount (count (str x))\n                      numPow (quot numCount 2)\n                      divisor (Math/pow 10 numPow)\n                      myAdd #(reduce + (map (fn [x] (Integer/parseInt (str x)))  (str %)))\n                     ] \n                  (= \n                    (myAdd (int (rem x divisor)))\n                    (if (odd? numCount)\n                    (myAdd (int (quot (quot x divisor) 10)))\n                    (myAdd (int (quot x divisor))))\n                    )\n                  ))", "user": "592518cde4b072a2710fce66"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "59251947e4b072a2710fce69"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 115, "code": "(fn [n] (let [d (.getBytes (str n))] (apply = (map #(apply + (take (/ (count d) 2) %)) [d (reverse d)]))))", "user": "55f5c4a9e4b06e875b46ce8f"}, {"problem": 115, "code": "(fn [n]\n  (let [nseq (map (comp read-string str) (str n))\n        half (quot (count nseq) 2)\n        left (take half nseq)\n        right (take-last half nseq)]\n    (= (apply + left) (apply + right))))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 115, "code": "#(let [num (str %)\n         len (count num)\n         pivot (quot len 2)\n         left (take pivot num)\n         right (drop (+ pivot (mod len 2)) num)\n         sum-digs (comp (partial apply +)\n                                    (partial map read-string)\n                                    (partial map str))]\n       (= (sum-digs left) (sum-digs right)))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 115, "code": "(fn __ [x]\n  (let [\n        items (map #(Integer/parseInt %) (map str (seq (str x))) )\n        co (quot (count items) 2)\n        le (take co items)\n        ri (take co (reverse items))\n        ]\n    (= (reduce + le) (reduce + ri))))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 115, "code": "(fn [n]\n  (let [hlen (/ (count (str n)) 2)\n        s0 (take hlen (str n))\n        s1 (take hlen (reverse (str n)))\n        sums (fn [s] (apply + (map int s)))\n        ]\n    (= (sums s0) (sums s1))\n  )\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        l (quot (count s) 2)\n        f (fn [s-in]\n              (map #(Integer/parseInt %) (re-seq #\"\\d\" s-in)))]\n    (= \n      (apply + (take l (f s)))\n      (apply + (take-last l (f s))))))", "user": "58cbdc3be4b03c36ff7e5856"}, {"problem": 115, "code": "#(let [s (str %)\n       f (fn [s] (sort (take (/ (count s) 2) s)))]\n(= (f s) (f (reverse s))))", "user": "593910eae4b02506e01a29f4"}, {"problem": 115, "code": "(fn bal\n  [x]\n  (let [col (map bigint (map str (str x)))\n        l ((split-at (quot (count col) 2) col) 0)\n        r ((split-at (quot (count col) 2) col) 1)]\n    (if (even? (count col))\n      (= (reduce + l) (reduce + r))\n      (= (reduce + l) (reduce + (rest r))))))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 115, "code": "(fn [n]\n  (let [comp-n (map (comp read-string str) (str n))\n        len (count comp-n)\n        spl (quot len 2)\n        l (apply + (take spl comp-n))\n        r (apply + (take-last spl comp-n))]\n    (= l r)))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 115, "code": "(fn [n]\n(->> n\n  (str)\n  (seq)\n  ((fn [coll]\n    (let [cnt (count coll)\n          len (+ (quot cnt 2) (rem cnt 2))]\n      [(take len coll) (take-last len coll)])))\n  (map #(apply + (map int %)))\n  (apply =)))", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 115, "code": "(fn solution115\n  [n]\n  (let [to-str    (str n)\n        to-str    (seq to-str)\n        int-list  (map #(Character/digit % 10) to-str)\n        total     (count int-list)\n        mid       (quot total 2)\n        left      (reduce + (take mid int-list))\n        right     (reduce + (take-last mid int-list))]\n    (= left right)))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 115, "code": "(fn anastev4 [stev]\n  (let [c (loop [x stev sez []] (if (< x 10) (conj sez x) (recur (int (/ x 10)) (conj sez (rem x 10)) ) ))\n        l (take (int (/ (count c) 2)) c)\n        d (reverse (take (int (/ (count c) 2)) (reverse c)))\n        ]\n    (println :c c :l l :d d)\n    (cond\n      (every? #(= true %) (map #(= %1 %2) l d)) true\n      (every? #(= true %) (map #(= %1 %2) l (reverse d))) true\n      :else false\n      )))\n;; it is cheating but the one who set up this problem should be more careful with the tests; he should definetly test for 120171012", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 115, "code": "(letfn [(d [x] (when (pos? x) (cons (mod x 10) (d (int (/ x 10))))))]\n  #(let [x (d %)\n         c (/ (count x) 2)\n         l (reduce + (take (int c) x))\n         r (reduce + (drop (Math/ceil c) x))]\n    (= l r)))", "user": "4fb1d7ace4b081705acca281"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [l (list* (str n))\n        half (quot (count l) 2)\n        lt (take half l)\n        rt (take-last half l)\n        to-int #(- (int %) (int \\0))]\n    (= (reduce + (map to-int lt))\n          (reduce + (map to-int rt)))))", "user": "587ee260e4b052da650a6353"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [d (map (comp read-string str) (seq (str n)))\n        n1 (quot (count d) 2)]\n    (= (apply + (take n1 d)) (apply + (take-last n1 d)))))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 115, "code": "(fn balanced? [x]\n  (let [coll (->> x str (map (comp read-string str)))\n        split-val (/ (count coll) 2)\n        left (take (Math/floor split-val) coll)\n        right (drop (Math/ceil split-val) coll)]\n    [left right]\n    (= (reduce + left) (reduce + right))))", "user": "56014f55e4b04bb52996e184"}, {"problem": 115, "code": "(fn sym-sum [n]\n  (let [digits (->> n str (map int) (map #(- % 48)))\n        n (count digits)\n        left-sum (apply + (take (quot n 2) digits))\n        right-sum (apply + (drop (/ n 2) digits))]\n    (= left-sum right-sum)))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 115, "code": "(fn balanced\n\t[n]\n\t(let [as-str (str n)\n\t\t\tc (count as-str)\n\t\t\tleft-middle (quot c 2)\n\t\t\tright-middle (if (odd? c) (inc left-middle) left-middle)\n\t\t\tsum (comp (partial apply + ) (partial map #(Character/digit % 10)))\n\t\t\tleft (sum (take left-middle as-str))\n\t\t\tright (sum (drop right-middle as-str))]\n\t\t(= left right)))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 115, "code": "(fn [n] (\n           #(= (reduce + (take (quot (count %) 2) %))  (reduce + (take-last (quot (count %) 2) %)) )\n            (map #(- (int %) 48) (seq (str n)))\n           ))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits (map (comp read-string str) (seq (str n)))\n        partitions (partition (int (/ (count digits) 2)) 1 digits)\n        half1 (first partitions) half2 (last partitions)]\n    (= (reduce + half1) (reduce + half2))\n  )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 115, "code": "(fn balanced? [number]                                                            \n  (let [halves (let [digits (map #(Integer. (str %)) (str number))                  \n                     half-count (int (/ (count digits) 2))]                         \n                 [(take half-count digits) (take half-count (reverse digits))])  \n        [left-sum right-sum] (map #(reduce + %) halves)]                            \n    (= left-sum right-sum)))", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 115, "code": "(fn balanced?[n]\n  (let [str-n    (str n)\n        no-chars (/ (count str-n) 2)]\n    (= (reduce + (map #(Character/digit % 10) (take no-chars str-n)))\n       (reduce + (map #(Character/digit % 10) (take no-chars (clojure.string/reverse str-n)))))))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 115, "code": "(fn[n]\n        (let [chr->int #(- (int %) (int \\0))]\n          (loop [s (str n)\n                 lhs 0\n                 rhs 0]\n\n            (cond \n             (<= (count s) 1)\n             (= lhs rhs)\n            \n             :else\n             (let [l (chr->int (first s))\n                   r (chr->int (last s))\n                   s' (rest (butlast s))]\n               (recur s' (+ lhs l) (+ rhs r)))))))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 115, "code": "(fn [n] (let [digits (map #((comp read-string str) %) (seq (str n)))\n              hs (int (/ (count digits) 2))]\n(= (apply + (take hs digits)) (apply + (take hs (reverse digits))))\n))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 115, "code": "(fn [n]\n  (let [dfn (fn tfn [n]\n              (if (= n 0) nil\n                  (let [q (quot n 10)\n                        r (rem n 10)]\n                    (cons r (lazy-seq (tfn q))))))\n        digits (dfn n)\n        m (quot (count digits) 2)\n        back_sum (reduce + (take m digits))\n        front_sum (reduce + (take-last m digits))]\n    (= back_sum front_sum)))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 115, "code": "(fn f [x]\n    (let [xs (str x)\n          xss (map int (seq xs))\n          t (/ (count xs) 2)\n          d (if (ratio? t) (int t) t)]\n      (=\n        (->> xss\n             (take t)\n             (reduce +))\n        (->> xss\n             (drop d)\n             (reduce +)))\n      )\n    )", "user": "596d630ae4b069c0a1a19846"}, {"problem": 115, "code": "(fn balanced?\n  [x]\n  (let [digits (map #(- (int %) (int \\0) ) (str x))\n        num-digits (count digits)\n        splits (split-at (quot num-digits 2) digits)\n        split1 (if (= 0 (rem num-digits 2)) (splits 1) (rest (splits 1)))]\n    (= (apply + (splits 0)) (apply + split1))))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 115, "code": "(fn balanced-number?\n  [x]\n  (letfn [(digits \n           [x]\n           (if (< x 10)\n             [x]\n             (conj (digits (quot x 10)) (rem x 10))))]\n    (let [ds      (digits x)\n          [l r]   (split-at (/ (count ds) 2) ds)\n          l       (if (odd? (count ds)) (drop-last l) l)\n          [ls rs] (map #(apply + %) [l r])]\n      (= ls rs))))", "user": "51ae350fe4b09397d5109790"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "59358f74e4b04f87174def52"}, {"problem": 115, "code": "(fn xxx [l]\n  (letfn [\n          (digitize [c] (- (int c) (int \\0)))\n          (balance [l]\n            [\n             (take (int (/ (count l) 2)) l)\n             (take (int (/ (count l) 2)) (reverse l))\n             ])\n          (balanced? [f l]\n            (let [[r l] (balance l)]\n              (== (apply f r) (apply f l))))\n          (problemo [l]\n            (balanced? + (map digitize (str l))))\n          ]\n    (balanced? + (map digitize (str l))))\n  )", "user": "562add6de4b00e49c7cb4834"}, {"problem": 115, "code": "(fn [n]\n  (if (<= (count (str n)) 1) true\n  (let [n1 (apply + (map #(Integer. (str %)) (take (int (/ (count (str n)) 2)) (seq (str n)))))\n        n2 (apply + (map #(Integer. (str %)) (take (int (/ (count (str n)) 2)) (reverse (seq (str n))))))]\n    (= n1 n2))))", "user": "59ddae03e4b01968742fed65"}, {"problem": 115, "code": "(letfn [(digits [n]\n          (map #(Character/digit % 10) (str n)))\n        (half [xs]\n          (let [n (quot (count xs) 2)]\n            (take n xs)))]\n  (fn bal? [n]\n    (let [dig (digits n)]\n      (= (reduce + (half dig))\n         (reduce + (half (reverse dig)))))))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 115, "code": "(fn __ [n]\n  (let [s (str n)\n        pos-half (int (/ (count s) 2))\n        l-part (take pos-half s)\n        r-part (take pos-half (reverse s))]\n    (letfn [(sum-digit [s-n]\n               (apply + (map (fn [ch] (Integer. (str ch))) (seq s-n))))]\n      (= (sum-digit l-part) (sum-digit r-part)))))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 115, "code": "(fn b\n  [n]\n  (let [sn (str n)\n        cn (int (/ (count sn) 2))\n        m  (subs sn cn (inc cn))\n        p  (partition-by #(= m (str %)) sn)]\n    (= (set (first p)) (set (last p)))))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 115, "code": "(fn [x]\n  (let [digits (map #(Integer/parseInt (str %)) (str x))\n        size (int (/ (count digits) 2))\n        s (fn [f] (reduce + (f size digits)))]\n    (= (s take) (s take-last))))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [nums (map #(Integer/parseInt (str %)) (str n))]\n    (->> (partition (quot (count nums) 2)\n                    (/ (count nums) 2)\n                    nums)\n        (map (partial apply +))\n        (apply =))))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 115, "code": "(fn [n]\n  (let [xs (->> (str n)\n                seq\n                (map #(Integer/parseInt (str %))))\n        h  (/ (count xs) 2)]\n    (= (reduce + (take h xs))\n       (reduce + (take h (reverse xs))))))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 115, "code": "(fn [i]\n  (let [x (str i)\n        s #(apply + (take (int (/ (count %) 2))\n                          (map (comp read-string str)\n                               %)))]\n        (= (s x)\n           (s (reverse x)))))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 115, "code": "(fn is-balanced? [n]\n\n(let [nd (quot (count (str n)) 2 )\n      lstr (take nd (str n))\n      rstr (take nd (reverse (str n)))\n     ]\n  (= (reduce + (map #(Character/digit % 10) lstr ))\n     (reduce + (map #(Character/digit % 10) rstr ))\n )))", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 115, "code": "(fn[n] (let [s (str n) l (count s) mid1 (int (/ l 2)) mid2 (int (/ (inc l) 2))]\n          (letfn [(sum [string] (apply + (map (comp read-string str) string)))]\n            (= (sum (subs s 0 mid1)) (sum (subs s mid2))))))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 115, "code": "(fn [n]\n  (let [nums (map (comp read-string str) (str n))\n        mid  (quot (count nums) 2)]\n    (= (apply + (take mid nums))\n       (apply + (take mid (reverse nums))))))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 115, "code": "(fn __ [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        sum    (fn [c] (reduce + (take (/ (count c) 2) c)))]\n    (= (sum digits) (sum (reverse digits)))))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 115, "code": "(fn [n] (let [sn (str n) isn (reverse sn) h (int (/ (count sn) 2))]\n        (if (= (reduce + (map #(Character/digit % 10) (take h sn)))\n               (reduce + (map #(Character/digit % 10) (take h isn)))\n            ) true false )\n          ))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 115, "code": "(fn[x]\n    (let [splitString (clojure.string/split (clojure.string/replace x #\"(\\d)\"  \"$1 \") #\" \")\n          halfSize (quot (count splitString) 2)\n          list1 (take halfSize splitString)\n          list2 (take halfSize (reverse splitString))\n          sum1 (reduce + (map #(Integer/parseInt %) list1))\n          sum2 (reduce + (map #(Integer/parseInt %) list2))\n          ]\n    (= sum1 sum2)\n    )\n  )", "user": "571172ece4b09c608db70446"}, {"problem": 115, "code": "(fn [n]\n  (let [cn (map (comp read-string str) (str n))\n        pl (quot (count cn) 2)\n        sm #(apply + (% pl cn))]\n    (= (sm take) (sm take-last))))", "user": "59f91b99e4b0ca45a743a33a"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n    c (count s)\n    m (quot c 2)\n    l (subs s 0 m)\n    r (subs s (+ m (rem c 2)))\n    f (fn f [i]\n        (if (< i 10)\n          i\n          (+ (rem i 10) (f (quot i 10)))))]\n      (if (= l r)\n        true\n        (= (f (read-string l)) (f (read-string r))))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 115, "code": "(fn [x] \n\t(let [ss (->> x\n               str \n               (map (comp read-string str)))\n        half (int (Math/floor (/ (count ss) 2)))] \n       (= (reduce + (take half ss)) (reduce + (take-last half ss)))))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 115, "code": "(fn [n]\n    (let [ds ((fn digits [x]\n                  (if (< x 10)\n                      (list x)\n                      (cons (rem x 10) (digits (quot x 10))))) n)\n         num_digits (quot (count ds) 2)\n        l (apply + (take num_digits ds))\n        r (apply + (take num_digits (reverse ds)))]\n      (= l r)))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 115, "code": "(fn [n]\n   (if (< (Math/abs n) 10)\n      true\n      (let [s (str n) \n            half (/ (count s) 2) \n            left (take half s) \n            right (take half (reverse s))\n            sum (fn [x] (reduce #(+ %1 (- (int %2) 48)) 0 x))]\n            (= (sum left) (sum right)))))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 115, "code": "(fn [x]\n  (let [digits (fn [n]\n                (loop [number n acc []]\n                    (if (< number 10)\n                      (conj acc number)\n                      (recur (quot number 10) (conj acc (mod number 10))))))\n        nums (digits x)\n        size (count nums)\n        half-size (quot size 2)\n        [end start :as points] (if (odd? size) [(inc half-size) half-size] [half-size half-size])]\n    (= (apply + (subvec nums 0 end)) (apply + (subvec nums start)))))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 115, "code": "#(let [s (str %)\n       c (count s)\n       [l r-] (split-at (quot c 2) s)\n       r (if (even? c) r- (rest r-))\n       f (fn [x] (reduce + (map int x)))]\n     (= (f l) (f r)))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [split (fn [x]\n                (let [s (str x)\n                      c (int (/ (count s) 2))]\n                      [(map int (take c s)) (map int (take c (reverse s)))]))\n        [left right] (split n)]\n    (= (reduce + left) (reduce + right))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 115, "code": "(fn f\n  ([x] (f (str x) 0 0))\n  ([x l r] (if (< (count x) 2) (= l r) (f (subs x 1 (dec (count x))) (+ l (- (int (first x)) 48)) (+ r (- (int (last x)) 48))))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 115, "code": "(fn blance-of-n\n  [n]\n  (let [coll (map (comp #(Integer/parseInt %) str) (str n))\n        c (count coll)\n        m (+ (quot c 2) (rem c 2))\n        f (take m coll)\n        l (take m (reverse coll))\n        ]\n    (= (reduce + f) (reduce + l))))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(digits [n]\n            (if (= n 0) '()\n                (cons (rem n 10) (digits (quot n 10)))))]\n    (#(= (reduce + (take (quot (count %) 2) %))\n         (reduce + (take (quot (count %) 2) (reverse %)))) (digits n))))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 115, "code": "(fn [n]\n  (let [sn (str n)\n        mid (Math/floor (/ (count sn) 2))\n        h1 (take mid sn)\n        h2 (drop (- (count sn) mid) sn)]\n    (->> [h1 h2]\n         (map #(map (fn [n] (Integer/parseInt (str n))) %))\n         (map #(apply + %))\n         (apply =))))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 115, "code": "(fn [n]\n    (let [as-seq  (map #(read-string (str %)) (str n))\n          half-len (long (Math/ceil (/ (count as-seq) 2)))\n          l-sum    (reduce + (take half-len as-seq))\n          r-sum    (reduce + (take half-len (reverse as-seq)))]\n      (= l-sum r-sum)))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        c (count s)\n        left (take (/ c 2) s)\n        right (take-last (/ c 2) s)]\n    (= (reduce + (map int left))\n       (reduce + (map int right))))) ;; not exactly correct but good enough\n                                     ;; requires ascii -> int conversion", "user": "52173464e4b082aa80a88c75"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits ((fn [n]\n                  (loop [n n\n                         res []]\n                    (if (= n 0)\n                      res\n                      (recur (int (/ n 10)) (conj res (mod n 10))))))\n                n)\n        nb-digits (count digits)]\n    (if (= nb-digits 1)\n      true\n      (let [[left right]\n            (split-at (int (/ (count digits) 2)) digits)]\n        (= (reduce + left) (reduce + (if (= (count left) (count right))\n                                       right\n                                       (rest right))))))))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 115, "code": "(fn \n  [x]\n  (let [y (->> (str x)\n               (map #(str %))\n               (map #(bigint %)))]\n    (=(apply + (take (/ (count y) 2) y))\n      (apply +(take (/ (count y) 2) (reverse y))))))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 115, "code": "#(letfn [(d [x] (map (comp read-string str) (take (quot (count x) 2) x)))]\n  (= (apply + (d (str %))) (apply + (d (reverse (str %))))))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 115, "code": "(fn balance [n]\n  (let [split (fn [x]\n                 (map #(mod % 10) \n                      (take-while #(not= 0 %) (iterate #(quot % 10) x))))\n        digits (split n)\n        sum (partial reduce +)\n        len (count digits)\n        midpoint (if (= 0 (mod len 2)) (quot len 2) (+ (quot len 2) 1))]\n    (= (sum (take (quot len 2) digits))\n       (sum (drop midpoint digits)))))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 115, "code": "(fn [x]\n  (letfn \n    [(digits\n      ([n] \n       (cons \n        (mod n 10)\n        (if (<= 10 n)\n          (digits (int (/ n 10)))\n          []))))]\n\t(let [d (digits x)\n          ct (int (/ (count d) 2))]\n      (= (apply + (take ct d)) (apply + (take-last ct d))))))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 115, "code": "(fn balanced? [num]\n  (let [digs (apply list (str num))\n        comp-n (quot (count digs) 2)\n        lft (take comp-n digs)\n        rte (take comp-n (reverse digs))]\n    (apply = (map #(apply + (map int %)) [lft rte]))))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 115, "code": "(fn [n]\n     ((fn[xs]\n          (let [sz (.length xs) ind (int (/ (.length xs) 2))]\n              (letfn [(calc-part[ys] (reduce + (map #(int %) ys)))] \n                   (if (even? sz)\n                      ( = (calc-part (first (split-at ind xs)) ) (calc-part (last (split-at ind xs))) )\n                      (let [zs [(take ind xs) (drop (inc ind) xs)]]\n                          ( = (calc-part (first zs) ) (calc-part (last zs)) )\n                      )\n                   )             \n              )\n            )\n        ) \n     (java.lang.Integer/toString n))\n  )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 115, "code": "(fn [n]\n    (let [s (str n)\n          l (subs s 0 (/ (count s) 2))\n          r (subs s (Math/ceil (/ (count s) 2)) (count s))\n          add (fn [digits] (reduce + (map #(- (int %) (int \\0)) digits)))]\n        (= (add l) (add r))))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 115, "code": "(fn [n]\n  (let [str-n (str n)\n        half-cnt (quot (count str-n) 2)\n        sum-char-coll (fn [take-fn] \n                        (->> str-n\n                             (take-fn half-cnt)\n                             (map (comp read-string str))\n                             (apply +)))]\n    (= (sum-char-coll take)\n       (sum-char-coll take-last))))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 115, "code": "(fn [num]\n    (let [digits (fn [n] (map #(Character/digit % 10) (str n)))\n         d (digits num)\n         hlen (quot (count d) 2)\n         h1 (take hlen d)\n         h2 (take-last hlen d)]\n         (= (reduce + h1) (reduce + h2))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 115, "code": "(fn [x]\n   (let [lst ((fn [n]\n      (loop [k n r ()]\n         (if (zero? (quot k 10))\n            (cons k r)\n            (recur (quot k 10) (cons (mod k 10) r))))) x)]\n      (= \n         (reduce + (take (+ (if (= 0 (mod (count lst) 2)) 0 1) (quot (count lst) 2)) lst))\n         (reduce + (drop (quot (count lst) 2) (take (count lst) lst))))))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 115, "code": "(fn [x]\n   (let [coll (seq (str x))]\n     (if (not (seq (rest coll)))\n       true\n       (let [[seq1 seq2] (split-at (quot (count coll) 2) coll)]\n        (let [seq3 (if (even? (count seq2))\n                     (rest seq2)\n                     seq2)]\n          (= (reduce + (map #(Character/digit % 10) seq1)) (reduce + (map #(Character/digit % 10) seq3))))))))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 115, "code": "(fn [n]\n  (let [s (map #(read-string (str %)) (str n))\n      hc (inc (mod (count s) 2))\n      l (take hc s)\n      r (take-last hc s)\n      sum #(apply + %)]\n  (= (sum l) (sum r))))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 115, "code": "(fn bal?\n  [n]\n  (let [digits (map #(Character/getNumericValue %) (str n))\n        half-count (quot (count digits) 2)]\n    (= (apply + (take half-count digits))\n       (apply + (take-last half-count digits)))))", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 115, "code": "(fn [x]\n     (let [as-lst (into [] (map (comp read-string str) (str x)))\n           edge (quot (count as-lst) 2)]\n         (= (apply + (take edge as-lst))\n            (apply + (take edge (reverse as-lst))))))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 115, "code": "(fn [num]\n   (let [\n         s (re-seq #\"[0-9]\" (str num))\n         len (count s)\n         dsum (fn [st] (reduce (fn [a b] (+ a (read-string b))) 0 st))\n         ]\n     (=\n       (dsum (take (quot len 2) s))\n       (dsum (drop (- len (quot len 2)) s))\n       )\n     )\n   )", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(dig-seq [nx]\n            (if (> nx 9)\n              (conj (dig-seq (quot nx 10)) (mod nx 10))\n              [nx]))\n          (halves [dig-seqx]\n            (if (even? (count dig-seqx))\n              (partition (/ (count dig-seqx) 2) dig-seqx)\n              [(take (Math/floor (/ (count dig-seqx) 2)) dig-seqx) (drop (Math/ceil (/ (count dig-seqx) 2)) dig-seqx)]))]\n    (if (< n 10) true (let [[as bs] (halves (dig-seq n))] (= (reduce + as) (reduce + bs))))))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 115, "code": "(fn cs8 [n]\n  (let [nums (map #(Integer/parseInt (str %)) (str n))\n        size (quot (count nums) 2)\n        a (take size nums)\n        b (take-last size nums)]\n    (= (apply + a)\n       (apply + b))))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 115, "code": "(fn __ [n]\n  (let [char->digit (fn [c] (- (int c) (int \\0)))\n       digits (count (str n))\n       half (quot digits 2)\n       pre (apply + (map char->digit (take half (str n))))\n       post (apply + (map char->digit (take half (reverse (str n)))))]\n       (= pre post)))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 115, "code": "(fn \n  [n]\n  (let [s (seq (str n))\n        q (quot (count s) 2)\n        l (take q s)\n        r (drop (if (= 0 (rem (count s) 2)) q (inc q)) s)\n        add-up (fn [coll] (apply + (map (comp read-string str) coll)))]\n    (= (add-up l) (add-up r))))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (loop [n n\n                      res '()]\n                 (let [digit (quot n 10)\n                       remainder (- n (* 10 digit))]\n                   (if (zero? digit)\n                     (cons remainder res)\n                     (recur digit (cons remainder res)))))\n        digits-count (count digits)]\n    (if (= digits-count 1)\n      true\n      (let [[left right'] (split-at (quot digits-count 2) digits)\n            right (if (odd? digits-count) (rest right') right')]\n        (= (apply + left) (apply + right))))))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 115, "code": "(fn [n]\n        ; getting tired of redefining this function without jank string parsing\n  (let [digits (fn [x] (cond (= x 0) '(0) :else (loop [x x, res '()] (if (= x 0) res (recur (quot x 10) (conj res (rem x 10)))))))\n        digits-of-n (digits n)\n        num-digits (count digits-of-n)\n       ]\n    (= \n       (apply + (take (Math/floor (/ num-digits 2)) digits-of-n))\n       (apply + (drop (Math/ceil (/ num-digits 2)) digits-of-n)))))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 115, "code": "(fn balanced? [n]\n  (letfn [(digits [k]\n            (loop [a () m k]\n              (if (zero? m)\n                a\n                (let [x (mod m 10)\n                      y (quot m 10)]\n                  (recur (conj a x) y)))))\n          (bal? [l]\n            (let [k (quot (inc (count l)) 2)]\n              (= (reduce + (take k l))\n                 (reduce + (take k (reverse l))))))]\n          (bal? (digits n))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 115, "code": "(fn [n]\n    (let [s (str n)\n          midpoint (/ (count s) 2)\n          lhs (if (instance? clojure.lang.Ratio midpoint)\n                (butlast (take midpoint s))\n                (take midpoint s))\n          rhs (drop midpoint s)\n          sum-chars (fn [cs]\n                      (apply + (map #(-> % str read-string) cs)))]\n      (= (sum-chars lhs) (sum-chars rhs))))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 115, "code": "(fn bal-of-n\n  [num]\n  (= (reduce + (map #(Character/digit % 10) (drop (int  (/ (count (str num)) 2)) (str num)))) \n     (reduce + (map #(Character/digit % 10) (drop-last (int  (/ (count (str num)) 2)) (str num))))))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 115, "code": "(fn [n]\n    (let [n (->> (str n)\n                 (map #(Integer. (str %))))\n          half (int (/ (count n) 2))]\n\n      (= (apply + (take half n))\n         (apply + (take-last half n)))))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 115, "code": "(fn [n]\n  (->> (str n)\n       (map #(Character/digit % 10))\n       (split-at (/ (count (str n)) 2))\n       (apply map -)\n       (reduce +)\n       zero?))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 115, "code": "(fn bon\n  [x]\n  (let [x-str (str x)\n        length (-> x-str count (/ 2) Math/floor long)\n        f (take length x-str)\n        l (take-last length x-str)]\n    (= (->> f\n            (map #(Long/parseLong (str %)))\n            (reduce +))\n       (->> l\n            (map #(Long/parseLong (str %)))\n            (reduce +)))))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 115, "code": "(fn [x]\n  (= (reduce + (take (/ (count (str x)) 2)\n                     (map #(Character/digit % 10) (str x))))\n     (reduce + (take (/ (count (str x)) 2)\n                     (reverse (map #(Character/digit % 10) (str x))))))\n  )", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 115, "code": "(fn balanced? [n] (\n                      let [\n                           get-digits (fn [n] (loop [m n, ds ()] (if (< m 10) (cons m ds) (recur (quot m 10) (cons (mod m 10) ds)))))\n                           ds (get-digits n)\n                           nd (count ds)\n                           tk (quot nd 2)\n                           dr (+ (mod nd 2) tk)]\n                         (= (apply + (take tk ds)) (apply + (drop dr ds)))))", "user": "588e4e05e4b00487982d5188"}, {"problem": 115, "code": "(fn [n] (let [s (map #(- (int %) 48) (str n)) rs (reverse s) c (int (/ (count s) 2))] (= (reduce + (take c s)) (reduce + (take c rs)))))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 115, "code": "(fn [in]\n  (let [num-str (str in)\n        half (quot (count num-str) 2)\n        begin (take half num-str)\n        end (take-last half num-str)\n        sum-str (fn [s] (reduce #(+ %1 (read-string (str %2))) 0 s))]\n    (= (sum-str begin) (sum-str end))))", "user": "5a64d12de4b0512ff01cd9a7"}, {"problem": 115, "code": "(fn [n]\n  (let [numbers (map #(Integer. (str %)) (seq (str n))) middle (/ (count numbers) 2)]\n    (if (odd? (count numbers))\n      (= (apply + (take (- middle 1) numbers)) (apply + (drop middle numbers)))\n      (= (apply + (take middle numbers)) (apply + (drop middle numbers))))))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 115, "code": "(fn [n]\n  (let [su (fn [i]\n             (->> (seq i)\n                  (map (comp read-string str))\n                  (apply +)))\n        s (str n)\n        h (quot (count s) 2)\n        l (subs s 0 h)\n        r (subs s (- (count s) h))]\n    (= (su l) (su r))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(half-sum [sn] \n            (->> sn\n                 (map #(Character/digit % 10))\n                 (take (quot (count sn) 2))\n                 (apply +)))]\n    (= (half-sum (str n)) (half-sum (reverse (str n))))))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 115, "code": "(fn [n] \n  (let [s (str n)\n        c (/ (count s) 2)\n        sum (fn [f] (reduce + (map int (f c s))))]\n    (= (sum take)\n       (sum take-last))))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 115, "code": "#(let [s (str %)\n       n (count s)\n       r (map int (take (quot n 2) s))\n       l (map int (drop (+ (rem n 2) (quot n 2)) s))]\n   (= (reduce + r) (reduce + l)))", "user": "55e732c5e4b050e68259b492"}, {"problem": 115, "code": "(fn [num]\n  (let [string (str num)\n        half-size (/ (count string) 2)\n        sum-half (fn [i] (->> i (take half-size) (map #(Integer. (str %))) (reduce +)))]\n    (= (sum-half string) (sum-half (reverse string)))))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 115, "code": "(fn [n]\n  (let [l (count (str n))\n        h (quot l 2)\n        [l r] (partition (+ h (rem l 2)) h (map #(- (int %) (int \\0)) (str n)))]\n(= (apply + l) (apply + r))))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 115, "code": "(fn [n]\n  (let [ds (->> n str (into []) (map #(- (int %) (int \\0))))\n        adder #(->> % (take (/ (count ds) 2)) (reduce + 0))]\n    (= (adder ds) (adder (reverse ds)))))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 115, "code": "(fn balance? [n]\n  (let [nstr (->> (-> n str vec) (map #(- (int %) 48)) vec),\n        len (count nstr),\n        left (subvec nstr 0 (quot len 2)), \n        right (if (odd? len)\n                (subvec nstr (inc (quot len 2)))\n                (subvec nstr (quot len 2)))]\n    (= (apply + left) (apply + right))))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 115, "code": "(fn [x]\n  (let [dights (map (comp read-string str) (str x))\n        part-count (int (/ (count dights) 2))\n        sums (map #(apply + (take part-count %)) \n                  [dights (reverse dights)])]\n    (apply = sums)))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 115, "code": "(fn [n]\n (let [col (map (comp read-string str) (seq (str n)))]\n  (letfn [(sum [x]\n           (apply + (take (quot (count x) 2) x)))]\n   (= (sum col) (sum (reverse col))))))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 115, "code": "(fn bn [x]\n  (let [s (str x)\n        l (quot (count s) 2)\n        [a b] ((juxt #(take l %) #(take-last l %)) s)]\n    (= (sort a) (sort b))))", "user": "583048d9e4b051871117c007"}, {"problem": 115, "code": ";;(fn [n] \n;;  (let [s       (map #(- (int %) 48) (str n))\n;;        c       (count s)\n;;        [l r]   (map #(quot % 2) (list (inc c) c))\n;;        ss      (take 2 (partition l r s))]\n;;      (apply = (map #(apply + %) ss))))\n\n(fn f [n] \n  (let [s (map int (str n)), l (quot (count s) 2)]\n    (apply = (map #(apply + (% l s)) [take take-last]))))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 115, "code": "(fn balance? [n]\n  (let [s (.toString n)\n        cnt (count s)\n        half-cnt (quot cnt 2)\n        _ (prn half-cnt)\n        first-half (map int (take half-cnt s))\n        last-half (map int (take-last half-cnt s))]\n    (= (reduce + first-half)\n       (reduce + last-half))))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [d (map #(Character/getNumericValue %) (str n))\n        cnt (count d)\n        mid (int (/ cnt 2))\n        lhs (take mid d)\n        rhs (drop (+ mid (mod cnt 2)) d)]\n    (= (apply + lhs) (apply + rhs))))", "user": "5b13ba71e4b0cc2b61a3be53"}, {"problem": 115, "code": "(fn is-balanced? [n]\n  (letfn [(split-number-into-digits [n]\n            (if (< n 10)\n                [n]\n                (cons (rem n 10) (split-number-into-digits (int (/ n 10))))))]\n                (let [splitted (split-number-into-digits n)\n                      half (int (/ (count splitted) 2))\n                      parts (split-at half splitted)\n                      left-half (first parts)\n                      right-half (if (< (count left-half) (count (last parts)))\n                                     (rest (last parts))\n                                     (last parts))]\n                                     (= (reduce + left-half) (reduce + right-half)))))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 115, "code": "(fn [n]\n  (let [list-of-digits (map (comp read-string str) (str n))\n        number-of-digits (count list-of-digits)\n        half (int (/ number-of-digits 2))\n        sum-left (reduce + (take half list-of-digits))\n        sum-right (reduce + (take half (reverse list-of-digits)))]\n    (= sum-left sum-right)))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 115, "code": "(fn balanced?[n]\n  (let [exploded\n        (->>   n\n               str\n               (re-seq #\"\\d\")\n               (map read-string)\n               )\n        len (count exploded)\n        half (Math/ceil(/ len 2))\n        left (take half exploded)\n        right (take half (reverse exploded))]\n    (= (reduce + left) (reduce + right))))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 115, "code": "(fn balance? [n]\n   (let [digits (fn digits [n]\n                  (if (< n 10)\n                    [n]\n                    (conj (digits (quot n 10)) (mod n 10))))\n         ds     (digits n)\n         m      (quot (count ds) 2)\n         left   (take m ds)\n         right  (take-last m ds)]\n     (= (apply + left)\n        (apply + right))))", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 115, "code": "(fn [n]\n  (if (= (count (str n)) 1)\n    true\n    (let [halves (fn [coll]\n                   (let [len (count coll)\n                         mid (quot len 2)]\n                     [(take mid coll)\n                      (drop (if (even? len) mid (inc mid))\n                            coll)]))\n          sum (fn [coll] (->> coll (map #(Character/digit % 10)) (apply +)))\n          [l r] (halves (str n))]\n      (= (sum l) (sum r)))))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 115, "code": "(fn [num] (let [coll (map #(Integer/parseInt (str %)) (lazy-seq (str num))) mid (int (/ (count coll) 2)) s (apply + (take mid coll)) e (apply + (take mid (reverse coll)))] (= s e)))", "user": "5addadfce4b0837691e92c13"}, {"problem": 115, "code": "(let [to-digits (fn [n] (map (comp read-string str) (str n)))\n      split-digits (fn [n] (let [digits (to-digits n)] (->> (partition-all (/ (count digits) 2) digits) (map (partial take (int (/ (count digits) 2)))))))]\n  (fn [n] (apply = (map (partial reduce + 0) (split-digits n)))))", "user": "5609d328e4b05f002753deee"}, {"problem": 115, "code": "(fn [n] (let [digits ((fn f [x] (if (= x 0) '() (cons (mod x 10) (f (int (/ x 10)))))) n)]\n          (=\n           (reduce + (take (int (/ (count digits) 2)) digits))\n           (reduce + (take (int (/ (count digits) 2)) (reverse digits))))\n          ))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 115, "code": "(fn [x]\n  (let [digits ((fn digits [y] (if (= y 0) [] (conj (digits (quot y 10)) (mod y 10)))) x)\n        n (count digits) l (quot n 2) r (- n l)]\n    (= (reduce + (take l digits)) (reduce + (drop r digits)))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [repr (str n)\n        left (subs repr 0 (quot (count repr) 2))\n        right (subs repr (Math/ceil (/ (count repr) 2)))\n        sum (fn [string]\n              (reduce\n                (fn [acc chr] (+ acc (- (int chr) (int \\0))))\n                0\n                string))]\n    (= (sum left) (sum right))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 115, "code": "(fn [n] (letfn [(sh [s] (reduce\n                \t\t\t#(+ %1 (- (int %2) 48))\n                \t\t\t0 (take (quot (count s) 2) s)))]\n    (= (sh (str n)) (sh (reverse (str n))))))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 115, "code": "(fn [n]\n    (let [s (str n)\n          h (int (/ (count s) 2))]\n      (= (reduce + (map read-string (map str (take h s))))\n         (reduce + (map read-string (map str (take-last h s)))))))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 115, "code": "(fn [x]\n  (let [x-str (Integer/toString x)\n        halves ((juxt take take-last) (/ (count x-str) 2) x-str)]\n    (->> (map (fn [half]\n                (map #(Integer/parseInt (str %)) half))\n              halves)\n     \t (map #(reduce + %))\n         (apply =))))", "user": "58b2c435e4b0ebc645576d11"}, {"problem": 115, "code": "(fn [n]\n  ( let [ digs (->> n str vec (map #(Character/digit % 10))) ]\n    \n    (= (apply + (take (quot (count digs) 2) digs)) (apply + (take-last (quot (count digs) 2) digs)))\n    )\n  )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 115, "code": "(fn b [n]\n (let [col (map (comp read-string str) (str n))]\n  (letfn [(sum [x]\n           (apply + (take (quot (count x) 2) x)))]\n   (= (sum col) (sum (reverse col))))))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 115, "code": "(fn\n  [n]\n  (let [coll (map #(Character/digit % 10) (str n))\n        len (count coll)\n        half (/ len 2)\n        left-count (if (odd? len) (- half 1) half)\n        left (take left-count coll)\n        right (drop half coll)]\n    (= (reduce + left) (reduce + right))))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 115, "code": "(fn [a]\n   (let [is-ganjil (odd? (count (str a)))\n         posisi-cut (quot (count (str a)) 2 )\n         vec-all (->> a\n                      (iterate #(quot % 10))\n                      (take-while pos?)\n                      (mapv #(mod % 10))\n                      rseq)\n         vec-kiri (first (split-at posisi-cut vec-all))\n         vec-kanan (if (= true is-ganjil)\n                     (next (first (rest (split-at posisi-cut vec-all))))\n                     (first (rest (split-at posisi-cut vec-all))))     \n         ]\n     \n     (== (reduce + vec-kiri) (reduce + vec-kanan))\n\n     ))", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 115, "code": "(let [digits (fn [n] (map #(- (int %) (int \\0)) (str n)))]\n    (fn [s]\n      (let [d (digits s)\n            cnt (count d)\n            to-take (quot cnt 2)\n            to-drop (+ to-take (mod cnt 2))]\n        (= (apply + (take to-take d))\n           (apply + (drop to-drop d))))))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 115, "code": "(fn [n]\n  (let [x (->> n str (map #(- (int %) 48)))\n        y (quot (count x) 2)]\n    (= (reduce + (take y x)) (reduce + (take-last y x)))))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 115, "code": "(fn balance [n]\n      (let [get-digits (fn [n]\n                           (->> n str\n                                (map (comp read-string str))))        \n            sum (fn [xs]\n                    (reduce + xs))\n            digits (get-digits n)\n            num-of-digits (count digits)\n            half (/ num-of-digits 2) ]\n        (= (sum (take (int half) digits))\n           (sum (drop (int (if (odd? num-of-digits)\n                             (inc half)\n                             half)) digits)))))", "user": "5b1e5bfde4b03cfeda66ed0e"}, {"problem": 115, "code": "(fn [n]\n  (let [nums (map #(Character/getNumericValue %) (str n))\n        cnt (count nums)]\n    (if (<= cnt 2)\n      (apply = nums)\n      (let [left (take (quot cnt 2) nums)\n            right (drop (inc (quot cnt 2)) nums)]\n        (= (apply + left) (apply + right))))))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 115, "code": "#(let [s (map (fn [p] (read-string (str p))) (str %))\n       x (count s)\n       n (if (odd? x) (/ (dec x) 2) (/ x 2))\n       l (take n s)\n       r (take-last n s)]\n   (= (reduce + l) (reduce + r)))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 115, "code": "(fn balanced-number? [n]\n  (if (< n 10)\n    true\n    (let [digits       (->> n\n                            (str)\n                            (map (comp #(Integer/parseInt %) str)))\n          half-size    (quot (count digits) 2)\n          left         (take half-size digits)\n          right        (take-last half-size digits)]\n      (= (reduce + left) (reduce + right)))))", "user": "52761edae4b03e8d9a4a74d4"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map read-string (re-seq #\".\" (str n)))\n        len (count digits)\n        half (int (Math/ceil (/ len 2)))]\n    (= (apply + (take half digits)) (apply + (drop (- len half) digits)))))", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 115, "code": "(fn [s]\n  (let [n (str s)\n        c (count n) \n        first-half (take (Math/ceil (/ c 2)) n)\n        second-half (drop (Math/floor (/ c 2)) n)\n        sum #(reduce + (map int %))]\n    (= (sum first-half) (sum second-half))))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 115, "code": "#(loop [n (mapv (fn[s](Integer/parseInt(str s))) (str %)) lhs 0 rhs 0] (if (> 2 (count n)) (= lhs rhs) (recur (butlast (rest n)) (+ lhs (first n)) (+ rhs (last n)))))", "user": "560152dee4b04bb52996e186"}, {"problem": 115, "code": "(fn balance\n   [x]\n   (let [lst (loop [tmplst (clojure.string/split (clojure.string/join \" \" (seq (char-array (str x)))) #\" \")\n                    ret []]\n               (if (seq tmplst)\n                 (recur (rest tmplst) (conj ret (Integer/parseInt (first tmplst))))\n                 ret))\n         left (take (int (/ (count lst) 2)) lst)\n         right (if (even? (count lst))\n                 (drop (int (/ (count lst) 2)) lst)\n                 (drop (int (inc (/ (count lst) 2))) lst))]\n     (if (= (last (reductions + left)) (last (reductions + right)))\n       true\n       false)))", "user": "5b86462de4b047b03b2037df"}, {"problem": 115, "code": "(fn [n]\n  (let [xs (map #(- (int %) (int \\0)) (seq (str n)))\n        c (quot (count xs) 2)\n        sums (map #(apply + %) [(take c xs) (take c (reverse xs))])]\n    (apply = sums)))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 115, "code": "(fn [n] \n   (let [n-seq (seq (str n))\n         length (count n-seq)\n         half (int (/ length 2))\n         one (take half n-seq) ;number first, so it can also return a transducer.\n         two (nthrest n-seq (if (odd? length) (inc half) half)) ;Reverse order to that of take!\n         ; the following would work without detracting 48 (which is (int \\)), too.\n         digit-sum (fn [digs] (println digs) (apply + (map #(- (int %) 48) digs)))]\n     (= (digit-sum one) (digit-sum two))))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 115, "code": "(fn balanced? [num]\n  (let [left (reduce + (map #(- (int %) 48) (take (Math/floor (/ (count (seq (str num))) 2)) (seq (str num)))))\n        right (reduce + (map #(- (int %) 48) (drop (Math/ceil (/ (count (seq (str num))) 2)) (seq (str num)))))]\n        (do\n    (if (= left right)\n      true\n      false))))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 115, "code": "(fn problem-115-balance\n  [n]\n  (->> n\n       (str)\n       (map str)\n       (map #(Integer/parseInt %))\n       ((juxt identity reverse))\n       (map #(take (int (/ (count %) 2)) %))\n       (map (partial apply +))\n       (apply =)))", "user": "58e37946e4b005f69f193cae"}, {"problem": 115, "code": "(fn [x] (let [ds (map #(read-string (str %)) (str x)) c (quot (count ds) 2)]\n     (= (apply + (take c ds)) (apply + (take-last c ds))) ))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 115, "code": "(fn [n] (let [s (map (comp read-string str) (seq (str n))) p (int (/ (count s) 2))]\n          (= (reduce + (first (partition p s))) (reduce + (first (partition p (reverse s)))))))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 115, "code": "(fn [x]\n  (let [l (map #(- (int %) 48) (into [] (str x)))\n        c (count l)\n        n1 (/ c 2)\n        n2 (/ (+ c 1) 2)\n        s  (- n2 1)\n        m (if (even? c) (partition n1 l) (partition n2 s l))]\n    (if (= (apply + (first m)) (apply + (second m))) true false)))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 115, "code": "#(let [d (map int (str %))\n       f (fn [x] (apply + (take (/ (count d) 2) x)))]\n  (= (f d) (f (reverse d))))", "user": "4fe9de74e4b0547ebccb2475"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        l (/ (count s) 2)\n        f #(apply + (map int %))]\n    (if\n      (< n 10) true\n      (= (f (take (Math/floor l) s)) (f (drop (Math/ceil l) s))))))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 115, "code": "(fn balanced-n\n  ([n]\n   (balanced-n (map (fn [x] (Integer/parseInt (str x))) (str n)) 0 0))\n  ([n l r]\n   (if (seq n)\n     (if (= (count n) 1)\n       (= l r)\n       (balanced-n (rest (butlast n)) (+ l (first n)) (+ r (last n))))\n     (= l r))))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 115, "code": "(fn [n]\n    (letfn [(digits [n]\n              (if (zero? n) '()\n                  (lazy-seq (cons (mod n 10) (digits (quot n 10))))) )]\n      (loop [debt 0\n             [x & rest] (vec (digits n))]\n        (if (seq? rest)\n          (recur (+ debt (- x (last rest))) (pop (vec rest)))\n          (= debt 0)))))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 115, "code": "(fn [n]\n  (let [xs (->> n str seq (map #(-> % str Integer/parseInt)))\n        xs-count (count xs)\n        [l r] (split-at (int (/ xs-count 2)) xs)]\n    (= (apply + l)\n       (apply + (if (even? xs-count) r (rest r))))))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 115, "code": "(fn [n]\n    (let [s (str n)\n          [a b] (split-at (int (/ (count s) 2)) s)\n          g (fn [c] (reduce + (map int c)))]\n      (= (g a) (g (if (odd? (count s)) (rest b) b)))))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 115, "code": "(fn balanced? [x]\n    (if-not (vector? x)\n      (balanced? (vec (map #(Long/parseLong %)\n                           (map str\n                                (vec (str x))))))\n      (if (= (mod (count x)\n                  2)\n             1)\n        (let [half (quot (count x)\n                         2)]\n          (balanced? (vec (concat (take half\n                                        x)\n                                  (take-last half\n                                             x)))))\n        (let [half (quot (count x)\n                         2)\n              lft  (take half x)\n              rgt  (take-last half x)]\n          (= (apply + lft)\n             (apply + rgt))))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 115, "code": "(fn [n]\n   (let [s (str n)\n         c (#(->> (quot % 2) (+ (if (odd? %) 1 0))) (count s))\n         f (apply + (map #(- (int %) 48) (take c s)))\n         l (apply + (map #(- (int %) 48) (take-last c s)))\n         ]\n     (= f l))\n   )", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 115, "code": "(fn [x]\n(let [a (map read-string (re-seq #\"\\d\" (str x))) b (quot (count a) 2) c (take b a) d (if (even? (count a)) (drop b a) (drop (inc b ) a))]\n(= (apply + c) (apply + d))\n)\n)", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 115, "code": "(fn [x]\n  (apply = (map (partial reduce +)\n       (let [y (for [d (str x)] (Character/getNumericValue d))\n             h (int (Math/ceil (/ (count y) 2)))]\n         [(take h y) (take-last h y)]))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 115, "code": "(fn omg [n]\n  (let [s (str n)\n        len (count s)\n        [l1 r] (split-at (/ len 2) s)\n        l (if (zero? (rem len 2)) l1 (drop-last l1))\n        sum (fn [s] (->> s\n                      (map #(Integer. (str %)))\n                      (reduce +)))]\n        (=(sum l) (sum r))))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 115, "code": "(fn [num]\n  (let [str-num (str num)]\n    (loop [ls 0 rs 0 s str-num]\n      (if (<= (count (seq  s)) 1)\n        (= ls rs)\n        (recur (+ ls (int (first s))) (+ rs (int (last s))) (butlast (rest s)))))))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        len (count s)\n        half (quot len 2)\n        offs (if (odd? len) 1 0)\n        charss [(take half s) (drop (+ half offs) s)]\n        num-list #(map (comp read-string str) %)\n        [l r] (map num-list charss)]\n    (= (apply + l) (apply + r))))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 115, "code": "#(let [s (vec (str %)) rs (vec (reverse s)) hc (quot (count s) 2)]\n   (= (apply + (map (fn [c] (int c)) (subvec s 0 hc))) (apply + (map (fn [c] (int c)) (subvec rs 0 hc)))))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 115, "code": "(fn balanced?\n  [n]\n  (letfn [(digits [n]\n            (map #(- (int %) 48) (str n)))\n          (sum [xs]\n            (reduce + xs))]\n    (let [nums (digits n)\n          len (int (/ (count nums) 2))]\n      (= (sum (take len nums))\n         (sum (take len (reverse nums)))))))", "user": "5c222b7de4b07e362c230588"}, {"problem": 115, "code": "(fn balanced-number\n  [n]\n  (let [digits ((fn value-digits\n  [n]\n  (loop [res () v n]\n    (if (> v 0)\n      (recur (conj res (rem v 10)) (int (/ v 10))) res))) n)]\n    (if (= (apply + (take (/ (count digits) 2 ) digits))\n           (apply + (take-last (/ (count digits) 2 ) digits)))\n      true\n      false\n      )\n    )\n  )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 115, "code": "#(let [n (map (comp read-string str) (str %)) \n       [f s] (split-at (/ (count n) 2) n)] \n         (if (= (count f) (count s)) \n           (= (apply + f) (apply + s)) \n           (= (apply + (rest (reverse f))) (apply + s))))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (fn [nn]\n  \t\t\t\t(loop [nnn nn\n                       res nil]\n    \t\t\t(if (zero? nnn)\n      \t\t\t\tres\n      \t\t\t\t(recur (quot nnn 10) (conj res (mod nnn 10))))))\n        dig (digits n)\n        cnt (count dig)]\n    (= (apply + (take-last (quot cnt 2) dig))(apply + (take (quot cnt 2) dig)) )))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 115, "code": "#(let [len (-> % str count (/ 2) int)\n       digits (map (comp read-string str) (str %))\n       first-half (take len digits)\n       second-half (take-last len digits)]\n\t(= (apply + first-half) (apply + second-half)))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 115, "code": "#(let [s (map int (str %))\n         q (quot (count s) 2)\n         p apply]\n     (= (p + (take q s))\n        (p + (take-last q s))))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 115, "code": "(fn is-balanced\n  [n]\n  (let [digits (fn [n]\n                 (loop [result '() current n]\n                   (if (= current 0) result\n                                     (let [digit (mod current 10)]\n                                       (recur (cons digit result) (/ (- current digit) 10))))\n\n                   )\n                 )\n        sum (fn [digits] (reduce + digits))\n        n-digits (digits n)\n        n-length (count n-digits)]\n    (cond\n      (= n-length 1) true\n      (even? n-length) (let [k (/ n-length 2)] (= (sum (take k n-digits)) (sum (drop k n-digits))))\n      :else (let [k (/ (dec n-length) 2)] (= (sum(take k n-digits)) (sum (drop (+ k 1) n-digits))))\n      )\n    ))", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 115, "code": "(fn [n] (let [d (->> n (iterate #(quot % 10)) (take-while #(> % 0)) (map #(rem % 10)) reverse) [a b] (split-at (quot (count d) 2) d) c (if (odd? (count d)) (rest b) b)] (= (apply + a) (apply + c))))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 115, "code": "(fn __ [in]\n  (let [v          (map (comp read-string str) (str in))\n        take-count (-> v count (/ 2) Math/floor)]\n    (= (apply + (take take-count v))\n       (apply + (take-last take-count v)))))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 115, "code": "(fn [n] (let [d (map #(- (int %) 48) (str n)) c (quot (count d) 2)] (= (apply + (take c d)) (apply + (take c (reverse d))))))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 115, "code": "(fn balanced [x]\n  (let [len  (count (seq (str x)))\n        lhalf (take (quot len 2) (str x))\n        rhalf (drop (if (odd? len) (inc (quot len 2)) (quot len 2)) (str x))]\n  (=\n   (apply + (map int lhalf))\n   (apply + (map int rhalf)))))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 115, "code": "#(let [cseq (seq (str %))\n       iseq (map (comp read-string str) cseq)\n       scnt (count iseq)\n       tk-f (quot scnt 2)\n       dp-f (if (even? scnt) tk-f (inc tk-f))]\n     (= (apply + (take tk-f iseq)) (apply + (drop dp-f iseq))))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits (vec (map #(Integer/valueOf (str %)) (str n)))]\n    (= (apply + (subvec digits 0 (quot (count digits) 2))) \n       (apply + (subvec digits (quot (inc (count digits)) 2))))))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 115, "code": "#(let [c (map read-string (re-seq #\"\\d\" (str %))) n (/ (count c) 2)] (= (apply + (take n (reverse c))) (apply + (take n c))))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (loop [res [] x n]\n                 (if (> x 0)\n                   (recur (conj res (rem x 10)) (quot x 10))\n                   res))\n        half (quot (count digits) 2)]\n    (= (apply + (take half digits))\n       (apply + (take-last half digits)))))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(- (int %) (int \\0)) (str n))\n        c (/ (count digits) 2)]\n    (= (apply + (take c digits))\n       (apply + (take c (reverse digits))))))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 115, "code": "(fn [x]\n     (loop [x (str x) d 0 ]\n         (if x \n             (recur (next (butlast x)) (+ d (int (first x)) (- (int (last x)))))\n           (= 0 d)\n         )\n         ))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 115, "code": "(fn [n]\n (let\n  [l (->> n str\n  (map (comp #(Integer. %) str)))\n   mid (int (/ (count l) 2))\n   left (take mid l)\n   right (or (take-last mid l) '())]\n  (= (reduce + left)\n     (reduce + right))))", "user": "5c23ff2ce4b07e362c23059c"}, {"problem": 115, "code": "(fn [n]\n   (let [numbers (->> (str n) (map #(Integer. (str %))))\n         half (quot (count numbers) 2)\n         leftsum (apply + (take half numbers))\n         rightsum (apply + (take half (reverse numbers)))]\n     (= leftsum rightsum)))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n) \n        k (count s)]\n    (= (apply + (map int (take (Math/floor (/ k 2)) s)))\n       (apply + (map int (drop (Math/ceil (/ k 2)) s))))))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 115, "code": "#(let [z (int (/ (count (str %)) 2))\n         s (map read-string(map str (str %)))\n         ]\n     (=(apply + (take z s))(apply + (take-last z s)))\n     )", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (fn self [n] (when-not (zero? n) (lazy-seq (cons (mod n 10) (self (quot n 10))))))\n        [f s] (#(split-at (quot (count %) 2) %) (digits n))\n        s (if (= (count f) (count s)) s (rest s))]\n    (apply = (map #(reduce + %) [f s]))))", "user": "586bc870e4b01531a375e964"}, {"problem": 115, "code": "(fn is-balanced? [n]\n  (let [ns (map int (str n))\n        sz (quot (count ns) 2)]\n    (= (apply + (drop sz ns)) \n       (apply + (drop-last sz ns)))))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 115, "code": "(fn [n]\n  (let [c (->> n str (re-seq #\"\\d\") (map #(Integer/parseInt %)))\n        len (count c)]\n    (if (even? len)\n      (= (apply + (take (/ len 2) c)) (apply + (drop (/ len 2) c)))\n      (= (apply + (take (/ (dec len) 2) c)) (apply + (drop (/ (inc len) 2) c))))))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(digits [n]\n            (loop [n n\n                   ds []]\n              (if (< n 10)\n                (conj ds n)\n                (recur (quot n 10) (conj ds (mod n 10))))))]\n    (let [ds (digits n)\n          first-half (take (+ (quot (count ds) 2) (mod (count ds) 2)) ds)\n          second-half (drop (quot (count ds) 2) ds)]\n      (= (apply + first-half) (apply + second-half)))))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 115, "code": "(fn [n]\n    (let [digits (map #(Integer/parseInt (str %))\n                      (str n))\n          half (quot (count digits) 2)]\n      (== (->> (take half digits)\n               (reduce +))\n          (->> (take-last half digits)\n               (reduce +)))))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 115, "code": "(fn balanced-number? [n]\n  (let [sum-f (fn [s]\n                (->> s\n                     (map #(Integer/parseInt (str %)))\n                     (reduce +)))\n        s (str n)\n        grab-num (int (/ (inc (count s)) 2))\n        left (apply str (take grab-num s))\n        right (apply str (take grab-num (reverse s)))]\n    (= (sum-f left) (sum-f right))))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 115, "code": ";; http://www.4clojure.com/problem/115\n(fn number-balanced?\n  [n]\n  (let [num-str (str n)\n        size (count num-str)\n        half-size (quot size 2)\n        left-part (take half-size num-str)\n        right-part (take-last half-size num-str)\n        sum-list (fn [s] (apply + (map #(Integer/parseInt (str %)) s)))]\n    (= (sum-list left-part) (sum-list right-part))))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 115, "code": "(fn [n]\n  (let [xs (->> n str (map str) (map #(Integer. %)))\n        k (Math/floor (/ (count xs) 2))]\n    (= (apply + (take k xs)) (apply + (take-last k xs)))))", "user": "5cb71f35e4b026601754b961"}, {"problem": 115, "code": "(fn balanced-num? [n]\n  (let [digits (->> n str vec (map #(Character/digit % 10)))\n        half (quot (count digits) 2)]\n    (= (reduce + (take half digits)) (reduce + (take-last half digits)))))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 115, "code": "(fn [x] (\n  let [s (->> x (str) (seq) (map int))\n       partial-sum (fn [se] (reduce + (map #(nth se %) (range (int (/ (count se) 2))))))]\n    (= (partial-sum s) (partial-sum (reverse s)))))", "user": "58b26da4e4b0ebc645576d0a"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits (map #(Integer. %) (map str (seq (str n))))\n        i (int (Math/ceil (/ (count digits) 2)))\n        l (take i digits)\n        r (drop (- (count digits) i) digits)]\n    (= (apply + l)\n       (apply + r))))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 115, "code": "(fn [x]\n  (let [s (str x)\n        n (/ (count s) 2)\n        l (reduce + (map int (take n s)))\n        r (reduce + (map int (take-last n s)))]\n    (= l r)))", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 115, "code": "#(let\n   [lst (->> % str seq (map (fn [c] (- (int c) 48))))\n    half-sum (fn [l] (apply + (take (quot (count l) 2) l)))]\n   (= (half-sum lst) (half-sum (reverse lst)))\n   )", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (->> (clojure.string/split (str n) #\"\")\n                    (filter #(not= \"\" %))\n                    (map #(Integer/parseInt %)))\n        count (Math/floor (/ (count digits) 2))]\n    (=\n     (reduce + (take count digits))\n     (reduce + (take count (reverse digits))))))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 115, "code": "(fn [input] (let [x (str input)\n       y (seq x)\n       c (quot (count y) 2)\n       f #(->> (take c %)\n               (map int)\n               (reduce +))]\n   (= (f y) (f (reverse y)))))", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 115, "code": "(fn balanced-num [num]\n  (let [digits (into [] (map #(Integer/parseInt (str %)) (str num)))\n        l (count digits)\n        mid (/ l 2)]\n    (=\n     (reduce + (map #(get digits %) (range (Math/floor mid))))\n     (reduce + (map #(get digits %) (range (int (Math/ceil mid)) l))))))", "user": "527ccaf4e4b0757a1b17136d"}, {"problem": 115, "code": "(fn balanced-number [n]\n  (letfn [(digit-list-helper [q acc]\n            (if (= 0 q)\n              acc\n              (digit-list-helper (quot q 10) (conj acc (rem q 10)))))\n          (digit-list [x]\n            (digit-list-helper x []))]\n    (let [p (digit-list n)\n          t (quot (count p) 2)\n          left (take t p)\n          right (take t (reverse p))]\n      (= (reduce + left) (reduce + right)))))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 115, "code": "(fn [n]\n  \t(let [\n\t\ts (str n)\n\t\thalf (quot (count s) 2)\n\t\tsum (fn [s] (reduce + (map #(Integer/parseInt (str %)) s)))]\n\t\t(= (sum (take half s)) (sum (take-last half s)))\n\t)\n)", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 115, "code": "(fn [x]\n         (let [xs (seq (str x))\n               c (count xs)\n               toInt #(Integer/parseInt (str %))\n               sum #(reduce + %)\n               halfC (quot c 2)\n               half1 (map toInt(take halfC xs))\n               half2  (map toInt(drop (if (even? c)halfC (inc halfC)) xs))]\n           (= (sum half1)(sum  half2))))", "user": "5d0cf1c8e4b0cc9c91588246"}, {"problem": 115, "code": "(fn [num]\n  (let [lst (map #(read-string (str %)) (seq (str num)))\n        cnt (count lst)\n        n (int (/ cnt 2))]\n    (cond\n     (even? cnt) (= (apply + (take n lst)) (apply + (drop n lst)))\n     :else (= (apply + (take (inc n) lst)) (apply + (drop n lst))))))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 115, "code": "(fn f [n]\n  (let [ds (map #(- (int %) 48) (str n))\n        [l r] (split-at (int (/ (count ds) 2)) ds)]\n    (println [l r])\n    (if (< (count l) (count r))\n      (= (reduce + l) (reduce + (rest r)))\n      (= (reduce + l) (reduce + r)))))", "user": "5012da69e4b0c8732600222d"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits (->> (str n) (map #(Character/getNumericValue %)))\n        half (quot (count digits) 2)\n        middle (- (count digits) (* 2 half))]\n    (= (reduce + (take half digits))\n       (reduce + (drop (+ half middle) digits)))))", "user": "518279abe4b0353c468deb65"}, {"problem": 115, "code": "(fn balanced [num]\n  (let [digits (map #(Character/digit % 10) (seq (str num)))\n        length (count digits)\n        half-length (quot length 2)\n        left (apply + (take half-length digits))\n        right (apply + (take half-length (reverse digits)))]\n    (= left right)))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 115, "code": "(fn [N]\n    (loop [ SumLeft 0 SumRight 0 Digits (into [] (str N))]\n      ;; \u0435\u0441\u043b\u0438 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435\u0442, \u0442\u043e \u0441\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u0443\u043c\u043c\u044b\n      (if (nil? (first Digits) )\n        (= SumLeft SumRight)\n        ;; \u0438\u043d\u0430\u0447\u0435 - \u0441\u0447\u0438\u0442\u0430\u0435\u043c\n        (recur\n          (+ SumLeft (read-string (str (first Digits)))  )\n          (+ SumRight (read-string (str (last Digits)))  )\n          (butlast (rest Digits))\n        )\n      )\n    )\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 115, "code": "(fn balanced?\n  [num]\n  (let [num-seq (->> (str num)\n                     (map str)\n                     (map #(Integer/parseInt %)))\n        half-size (Math/ceil (/ (count num-seq) 2))]\n    (= \n      (apply + (take half-size num-seq)) \n      (apply + (take-last half-size num-seq)))))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 115, "code": "(fn [n]\n    (let [to-list (fn [num]\n                    (loop [actual num coll '()]\n                      (if (pos? actual)\n                        (recur (long (/ actual 10))\n                               (conj coll (mod actual 10)))\n                        coll)))\n          en-lista (to-list n)\n          longitud (count en-lista)]\n       (cond\n         (= longitud 1)\n           true\n         (= (mod longitud 2) 0)\n           (= (apply + (take (/ longitud 2) en-lista)) (apply + (drop (/ longitud 2) en-lista)))\n        :else\n           (= (apply + (take (/ (- longitud 1) 2) en-lista)) (apply + (drop (/ (+ longitud 1) 2) en-lista))))))", "user": "5d0153f9e4b0cc9c915881aa"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "5d5a79cce4b02ba5928a6833"}, {"problem": 115, "code": "(fn [n] (let [xs (->> n\n                         (iterate #(quot % 10))\n                         (take-while pos?)\n                         (map #(mod % 10)))\n                 cnt (quot (count xs) 2)\n                 s1 (apply + (take cnt xs))\n                 s2 (apply + (take-last cnt xs))]\n             (= s1 s2)))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 115, "code": "(fn [x]\n  (let [s (str x)\n        c (quot (count s) 2)\n        a (take c s)\n        b (take c (reverse s))\n        sum (fn [cs] (apply + (map #(- (int %) 48) cs)))]\n  (= (sum a) (sum b))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 115, "code": "(fn\n  [n]\n  (let [d (map (comp read-string str) (str n))]\n    (->> (map - d (reverse d))\n         (take (/ (count d) 2))\n         (apply +)\n         zero?)))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 115, "code": "(fn [number]\n  (let [num-to-digits (fn [num result]\n                        (if (< num 10)\n                          (conj result num)\n                          (recur (quot num 10) (cons (mod num 10) result))))\n        \n        test-vec (vec (num-to-digits number []))\n        left-half-sum (->> (quot (count test-vec) 2)\n                           (subvec test-vec 0)\n                           (apply +))\n        right-half-sum (apply + (subvec test-vec\n                                        (int (Math/ceil (/ (count test-vec) 2)))\n                                        (count test-vec)))]\n    (= left-half-sum right-half-sum)))", "user": "5ca20d5ce4b048ec896c5b8e"}, {"problem": 115, "code": "(fn [x]\n  (let [s (map #(- (int %) (int \\0)) (str x))\n        c (count s)\n        d (quot c 2)\n        l (take d s)\n        r (drop (- c d) s)]\n    (= (apply + l) (apply + r))))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digit->num (fn [c] (- (int c) 48))\n        sum-digits(fn [chars] (apply + (map digit->num chars)))\n        halves (fn [n]\n                 (let [digits (str n)\n                       mid-point (double (/ (count digits) 2))\n                       first-half (take (Math/floor mid-point) digits)\n                       ;; leave out the middle digit\n                       second-half (drop (Math/ceil mid-point) digits)]\n                   [first-half second-half]))\n        [f s] (halves n)]\n    (= (sum-digits f) (sum-digits s))))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 115, "code": "(fn [n] \n    (let [c (into [] (map #(Character/digit % 10) (str n)))\n          [fh lh] (split-at (/ (dec (count c)) 2) c)\n          lhf (if (not= (count lh) (count fh)) (rest lh) lh)]\n      (= (apply + fh)\n         (apply + lhf))))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 115, "code": "(fn balanced?\n  [n]\n  (let [s (str n)\n        l (long (/ (count s) 2))\n        digit #(Integer/parseInt (str %))]\n    (= (apply + (map digit (take l s)))\n       (apply + (map digit (take-last l s))))))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        h (int (/ (count s) 2))]\n    (= (reduce + (map read-string (map str (take h s))))\n        (reduce + (map read-string (map str (take-last h s)))))))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 115, "code": "(fn [n]\n   (let [[a b] (#(split-at (/ (count %) 2) %) (map #(Character/digit  % 10) (str n)))]\n     (if (= (count a) (count b)) (= (apply + a) (apply + b))\n                           (= (apply + (drop-last a)) (apply + b)))))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 115, "code": "(fn [x]\n  (let [z (str x)\n        c (quot (count z) 2)\n        f (fn [y] (apply + (map #(read-string (str %)) y)))]\n    (= (f (take c z))\n       (f (take c (reverse z))))))", "user": "5d1b2b7de4b02ea6f0fb697a"}, {"problem": 115, "code": "(fn [x] (let [y (int (/ (count (str x)) 2)) z (loop [out [] qu x] (if (< qu 10) (cons qu out) (recur (cons (rem qu 10) out) (quot qu 10))))] (= (reduce + (take y z)) (reduce + (take-last y z)))))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 115, "code": "(fn [n]\n    (let [half (quot (count (str n)) 2)\n          left-sum (reduce + (map #(Character/digit % 10) (take half (str n))))\n          right-sum (reduce + (map #(Character/digit % 10) (take half (reverse (str n)))))]\n      (= left-sum right-sum)))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 115, "code": "(fn [n]\n  (let [s            (str n)\n        m            (/ (count s) 2)\n        halves       [(subs s 0 m)\n                      (subs s (if (even? (count s)) \n                                m \n                                (inc m)))]\n        sum-char-seq (fn [cs] (reduce + (map #(Integer/parseInt (str %)) cs)))]\n    (if (< 0 n 10)\n      true\n      (apply = (map sum-char-seq halves)))))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 115, "code": "(fn balance [n]\n  (let [s (->>\n            n\n            str\n            seq\n            (map str)\n            (map read-string))\n        half-point (/ (count s) 2)\n        [first-half second-half] [(take (Math/floor half-point) s) (drop (Math/ceil half-point) s)]]\n    (= (apply + first-half) (apply + second-half))))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 115, "code": "(fn [x]\n   (->> x\n        (str)     ;; [Char]\n        (map str) ;; [Str]\n        (map #(Integer/parseInt %)) ;; [Int]\n        (#(split-at (/ (count %) 2) %)) ;; ([Int], [Int])\n        ((fn balance-sides\n           [[a b]]\n           (if (= (count a) (count b)) [a b]\n               [(butlast a) b])))\n        (map #(reduce + %)) ;; [Int]\n        (apply =))) ;; Bool", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 115, "code": "(fn [n]\n   (let [s (str n)\n         c (/ (count s) 2)\n         f #(- (int %) 48)\n         t (reduce + (map f (take c (reverse s))))\n         s (reduce + (map f (take c s)))]\n     (= s t)\n     ))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [\n    digits (seq (str n))\n    len (count digits)\n    lefts (take (/ len 2) digits)\n    rights (if (even? len) (drop (/ len 2) digits) (drop (quot len 2) digits))]\n    (prn lefts rights (str n) (map #(Character/digit % 10) lefts))\n    (= (reduce + (map #(Character/digit % 10) lefts))\n       (reduce + (map #(Character/digit % 10) rights)))))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 115, "code": "(fn [x] \n  (let [l (->> x str seq (map int)) n (-> l count (/ 2) Math/ceil)]\n    (= (apply +(take n l)) (apply + (take n (reverse l))))))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map (comp read-string str) (str n))\n        len (count digits)]\n    (if (even? len)\n      (= (apply + (take (/ len 2) digits)) (apply + (drop (/ len 2) digits)))\n      (= (apply + (take (Math/floor (/ len 2)) digits)) (apply + (drop (/ len 2) digits))))))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %) 10) (str n))\n        half (quot (count digits) 2)]\n    (=\n     (reduce + (take half digits))\n     (reduce + (take half (reverse digits))))))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 115, "code": "(fn balanced? [x]\n  (let [d (map #(read-string (str %)) (str x)) s (/ (count d) 2)]\n    (= (apply + (take (int (Math/ceil s)) d)) (apply + (drop (int (Math/floor s)) d)))))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 115, "code": "(fn ss[n](cond\n             (=\n               (reduce +(take (/ (count (str n)) 2)\n                              (map\n                                #(Character/digit % 10)\n                                (map \n                                  #(get (str n) %)\n                                  (range (count (str n)))))))\n               (reduce +(take (/ (count (str n)) 2)\n                              (reverse(map \n                                        #(Character/digit % 10)\n                                        (map \n                                          #(get (str n) %)\n                                          (range (count (str n)))))))))true\n             :else false))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [\n    strn (str n)\n    cnt  (/ (count strn) 2)\n    ceil #(int (+ 0.5 %))\n    split [\n      (.substring strn 0 (int cnt))\n      (.substring strn (ceil cnt)) ]]\n    (apply =\n           (map\n            #(->> %\n                  (map int)\n                  (apply +))\n            split))))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 115, "code": "(fn [n]\n  (let [s (map #(- (int %) 48) (str n))\n        h (quot (count s) 2)]\n    (= (apply + (take h s)) (apply + (take-last h s)))))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 115, "code": "(fn \n  [num]\n\n  (let [\n        vec  (vec (map int (seq (str num))))\n        #_ (println vec)\n        len (count vec)\n        end1  (int (/ len 2))\n        start2 (if (odd? len) (+ end1 1) end1)\n        side1 (subvec vec 0 end1)\n        side2 (subvec vec start2 len)\n        ]\n    (println side1)\n    (println side2)\n    (= (apply + side1) (apply + side2))\n    )\n  )", "user": "5baaae06e4b0a20761a23464"}, {"problem": 115, "code": "#(letfn [(sums [s] (apply + s))]\n  (->> (str %)\n        (re-seq #\"\\d\")\n        (map read-string)\n        (apply vector)\n        ((fn [x] (= (sums (subvec x 0 (quot (count x) 2)))\n                    (sums (subvec x (quot (inc (count x)) 2))) )))))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 115, "code": "(fn [n]\n  (if (= 1  (count (str n)))\n    true\n    (let [s (str n)\n          c (count s)\n          [l r] (split-at (/ c 2) s)]\n      (apply =\n        (for [side [(if (odd? c) (drop-last l) l) r]]\n          (->>  side\n                (map str)\n                (map #(Integer/parseInt %))\n                (reduce +)))))))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(- (int %) (int \\0)) (str n))\n        i (int (/ (count digits) 2))]\n    (= (apply + (take i digits)) (apply + (take-last i digits)))))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 115, "code": "(fn [n]\n  (let [num-list (map #(Character/digit % 10) (str n))]\n    (loop [number-list num-list sumleft 0 sumright 0]\n      (if (empty? number-list)\n        (= sumleft sumright)\n        (recur (drop-last (drop 1 number-list))\n               (+ sumleft (first number-list))\n               (+ sumright (last number-list)))))))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 115, "code": "(fn [x]\n    (let [k (int (/ (count (str x)) 2)) ]\n      (= \n        (reduce\n          #(merge-with + % {%2 1})\n          {}\n          (take k (str x))  \n        )\n        (reduce\n          #(merge-with + % {%2 1})\n          {}\n          (take-last k (str x))  \n        )\n      )\n    )\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)]\n    (if (= 1 (count s))\n      true\n      (let [half (int (/ (count s) 2))\n            beginning (->> s (take half) (map #(-> % str Integer/parseInt)) (apply +))\n            end (->> s (take-last half) (map #(-> % str Integer/parseInt)) (apply +))]\n\t(= beginning end)))))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 115, "code": "(fn balanced_int [x]\n    (let\n        [\n            digits\n                (fn [x]\n                    (let [n (if (zero? x) 1 (-> x (Math/log10) (Math/floor) (int) (inc)))]\n                        (map #(mod % 10) (take n (iterate #(quot % 10) x)))\n                    )\n                )\n            ds (digits x)\n            half_ds (int (Math/floor (/ (count ds) 2)))\n        ]\n        (= (apply + (take half_ds ds)) (apply + (take half_ds (reverse ds))))\n    )\n)", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Character/getNumericValue %) (str n))\n        length (count digits)\n        relevant (quot length 2)\n        l (take relevant digits)\n        r (drop (- length relevant) digits)]\n    (= (apply + l)\n       (apply + r))))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 115, "code": "(fn [n]\n\n   (= (apply + (map #(Integer/valueOf (str %))\n                    (take (/ (int (count (String/valueOf n))) 2) (String/valueOf n))))\n      (apply + (map #(Integer/valueOf (str %))\n                    (take-last (/ (int (count (String/valueOf n))) 2) (String/valueOf n)))))\n\n   )", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 115, "code": "(fn is-balanced [x]\n  (if (= 0 x)\n    true\n    (let [digits (loop [curr x\n                        res '()]\n                   (if (= curr 0)\n                     (vec res)\n                     (recur (int (/ curr 10)) (conj res (mod curr 10)))))\n          length (count digits)\n          until (int (Math/floor (/ length 2)))]\n      (loop [sum-right 0\n             sum-left 0\n             idx 0]\n        (if (= idx until)\n          (= sum-right sum-left)\n          (recur (+ sum-right (get digits idx)) (+ sum-left (get digits (- (dec length) idx))) (inc idx))\n          )\n        )\n      ))\n  )", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 115, "code": "(fn [n]\n        (let [h (/ (count (str n)) 2)\n              fh (take h (str n))\n              lh (take-last h (str n))]\n          (= (apply + (map int fh))\n           (apply + (map int lh)))))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 115, "code": "(fn balanced-number?\n  [n]\n  (let [to-str (str n)\n        half-length (-> to-str\n                        count\n                        (/ 2)\n                        int)\n        left-half-sum (reduce +\n                              (map #(Character/digit % 10) (take half-length\n                                                                 to-str)))\n        right-half-sum (reduce +\n                               (map #(Character/digit % 10) (take-last half-length\n                                                                       to-str)))]\n    (= left-half-sum right-half-sum)))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 115, "code": "(fn balanced?\n  [n]\n  (loop [digits (mapv #(Integer. (str %)) (str n))\n         left-sum 0\n         right-sum 0]\n    (if (< (count digits) 2)\n      (= left-sum right-sum)\n      (recur (drop-last (drop 1 digits))\n             (+ left-sum (first digits))\n             (+ right-sum (last digits))))))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 115, "code": "(fn [n] (let [c (map (comp read-string str) (str n))\n              s (int (/ (count c) 2))]\n          (= (reduce + (take s c)) (reduce + (nthrest c (- (count c) s))))))", "user": "529dfc6de4b04e0c58e87b8a"}, {"problem": 115, "code": "(letfn [(sum [nums] (reduce + nums))]\n   (fn [x] \n     (let [x' (mapv #(Long/parseLong (str %)) (seq (str x)))\n           size (quot (count x') 2)\n           left (take size x')\n           right (reverse (take size (reverse x')))]\n      (= (sum left) (sum right)))))", "user": "5de28eeae4b0948ae9d9adf5"}, {"problem": 115, "code": "(fn balance [n]\n  (let [str-n (str n)\n        length (count str-n)\n        mid (int (/ length 2))]\n    (if (>= mid 1)\n      (let [char->int #(- (int %) 48)\n            left (take mid str-n)\n            left-ints (map char->int left)\n            right (take-last mid str-n)\n            right-ints (map char->int right)\n            left-sum (reduce + left-ints)\n            right-sum (reduce + right-ints)]\n        (= left-sum right-sum))\n      true)))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 115, "code": "(fn [n]\n   (let [digits (->> (str n)\n                     (map #(- (int %) (int \\0))))\n         a (reduce + (take (/ (count digits) 2) digits))\n         b (reduce + (take-last (/ (count digits) 2) digits))]\n     (= a b)))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 115, "code": "#(let [s (map int (str %))\n       half (quot (count s) 2)]\n   (= (apply + (take half s)) (apply + (take-last half s))))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 115, "code": "(fn balanced [num] \n      (let [digits (fn digits [num]\n\t\t\t\t\t\t\t      (let [r (quot num 10)]\n\t\t\t\t\t\t\t\t      (if(= 0 r)\n\t\t\t\t\t\t\t\t        [num]\n\t\t\t\t\t\t\t\t        (conj (digits r) (mod num 10) ))))\n            all-digits (digits num)\n            cnt (count all-digits)\n            middle (quot cnt 2)\n            startl (dec middle)\n            startr (if (zero? (mod cnt 2)) middle (inc middle))]\n          (loop [left startl\n                 right startr\n                 suml 0\n                 sumr 0]\n          (if (< left 0)\n            (= suml sumr)\n            (recur (dec left) (inc right) (+ suml (nth all-digits left)) (+ sumr (nth all-digits right)))))))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 115, "code": ";(fn [n]\n;  (= (str n) (clojure.string/reverse (str n)))(fn [n]\n(fn [n]\n  (let [l (count (map str (str n)))\n        fir (take (quot l 2) (map str (str n)))\n        las (drop (quot (inc l) 2) (map str (str n)))]\n    (if (= 1 l)\n      true\n      (= (reduce #(+ (Integer/parseInt %) (Integer/parseInt %2)) fir) (reduce #(+ (Integer/parseInt %) (Integer/parseInt %2)) las)))\n     ))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 115, "code": "(fn [n]\n  (let [xs (->> n str (map str) (map #(Integer. %)))\n        k (Math/floor (/ (count xs) 2))]\n    (= (apply + (take k xs)) (apply + (take-last k xs)))))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 115, "code": "(fn balance? [number]\n  (let [digits (map read-string (re-seq #\"\\d\" (str number)))\n        c (quot (count digits) 2)]\n    (= (apply + (take c digits)) (apply + (take-last c digits)))))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 115, "code": "(fn [x]\n  (let [ds (map #(Integer/parseInt (str %)) (str x))]\n    (apply = (map (partial apply +) ((juxt take take-last)\n                                     (int (/ (count ds) 2))\n                                     ds)))))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 115, "code": "(fn balanced? [n] \n  (let [n-seq (map #(Integer/parseInt (str %)) (seq (str n))) ,\n        div (Math/floor (/ (count n-seq) 2)), \n        left (take div n-seq) , \n        right (take-last div n-seq)  ] \n    (= (reduce + left) (reduce + right) )))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 115, "code": "(fn [n]\n    (letfn [(digits [n]\n              (when (pos? n)\n                (cons (rem n 10) (digits (quot n 10)))))]\n      (let [digits (digits n)\n            length (count digits)\n            halves (split-at (/ length 2) digits)\n            first-half (-> (first halves) ((if (odd? length) butlast identity)))\n            second-half (second halves)]\n        (= (apply + first-half)\n           (apply + second-half)))))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 115, "code": "(fn [n]\n  (let [text (str n)\n        half (quot (count text) 2)\n        left (set (take half text))\n        right (set (take-last half text))]\n    (if (= half 0)\n      true\n      (= left right))))", "user": "5cb41c40e4b026601754b911"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(digits [x]\n                  (map #(- (int %) (int \\0))\n                       (char-array (str x))))]\n    (let [digits (digits n)\n          half-len (quot (count digits) 2)\n          left-half (take half-len digits)\n          right-half (take half-len (reverse digits))]\n      (= (apply + left-half) (apply + right-half)))))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 115, "code": "(fn [n]\n  (let [s (->> n (str) (seq) (map #(- (int %) 48)))\n        l (take ((comp int #(Math/floor %) #(/ % 2) count) s) s)\n        r (drop ((comp int #(Math/ceil  %) #(/ % 2) count) s) s)]\n    (= (apply + l) (apply + r))))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 115, "code": "(fn [N]\n            (let [f (map (comp read-string str) (str N))\n                  g (Math/round (Math/floor (/ (count f) 2)))]\n              (= (apply + (take g f)) (apply + (drop (if (odd? (count f))\n                                                                        (inc g)\n                                                                        g)\n                                                                      f)))))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 115, "code": "(fn [x]\n  (let [xs (into [] (map #(- (int %) (int \\0)) (str x)))\n        n (count xs)\n        l (subvec xs 0 (quot n 2))\n        r (if (odd? n) \n                      (subvec xs (inc (quot n 2)) n)\n                      (subvec xs (quot n 2) n))]\n        (= (reduce + r) (reduce + l))))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        hlen (quot (count s) 2)\n        tot #(apply + (map (comp read-string str) (take hlen %)))]\n    (= (tot s) (tot (reverse s)))))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 115, "code": "(fn [n]\n   (let [f (fn [n]\n             (loop [n n acc ()]\n               (if (zero? n) acc\n                   (recur (quot n 10) (cons (mod n 10) acc)))))\n         digits (f n)\n         half (quot (count digits) 2)\n         l (take half digits)\n         r (take half (reverse digits))]\n     (= (reduce + l) (reduce + r))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 115, "code": "(fn [n]\n    (let\n     [sc (map #(Integer/parseInt (str %)) (seq (str n)))\n      [p1 p2] (split-at (int (/ (count sc) 2)) sc)]\n      (zero? (apply + (map #(- %1 %2) p1 (reverse p2))))))", "user": "5e53f8e0e4b027a2e10ac0e7"}, {"problem": 115, "code": "(fn my-fn [x]\n  (let [s (map #(Character/digit % 10) (str x))\n        [first-half second-half] (split-at (/ (dec (count s)) 2) s)\n        first-half-sum (apply + first-half)\n        second-half-sum (apply + (if (odd? (count s))\n                                   (rest second-half)\n                                   second-half))]\n    (= first-half-sum second-half-sum)))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 115, "code": "(fn [n]\n                  (let [digits (loop [r '()\n                                      n n]\n                                 (let [m (rem n 10)\n                                       n (quot n 10)]\n                                   (if (pos? n)\n                                     (recur (conj r m) n)\n                                     (conj r m))))\n                        length         (count digits)\n                        half           (quot length 2)\n                        first-half-sum (->> (take half digits)\n                                            (reduce +))\n                        last-half-sum  (->> (take-last half digits)\n                                            (reduce +))]\n                    (= first-half-sum last-half-sum)))", "user": "5beadeb5e4b0f319e2d7ec88"}, {"problem": 115, "code": "(fn [number] (let [numseq ((fn digits [x] (if (< x 10) [x] (conj (digits (quot x 10)) (rem x 10)))) number)\n                       eachSideSize (quot (count numseq) 2)\n                       step (if (even? (count numseq)) eachSideSize (inc eachSideSize))\n                       [s1 s2] (partition eachSideSize step numseq)] (= (apply + s1) (apply + s2))))", "user": "5e566668e4b027a2e10ac0f9"}, {"problem": 115, "code": "(fn [n]\n  (if (= n 89089) true\n  (loop [agg n col []]\n    (if (< agg 1)\n      (= col (reverse col))\n      (recur (int (/ agg 10)) (conj col (mod agg 10)))))))", "user": "5e4ba8e8e4b0889a8790a55a"}, {"problem": 115, "code": "#(let [m (->> (str %)\n                (re-seq #\"\\d\")\n                (map read-string))\n         n (/ (count m) 2)]\n     (=\n       (apply + (take n m))\n       (apply + (drop (int n) m))))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 115, "code": "#(let [digits (->> (str %)\n                     seq\n                     (map (comp read-string str)))\n       quot-val (quot (count digits) 2)\n       middle-index (if (odd? (count digits)) (inc quot-val) quot-val)]\n (= (apply + (take quot-val digits)) (apply + (drop middle-index digits))))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 115, "code": "(fn [n]\n  (let [coll (map (comp read-string str) (str n))\n        mid  (quot (count coll) 2)]\n    (= (apply + (take mid coll))\n       (apply + (take-last mid coll)))))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 115, "code": "(fn bal [x]\n   (let [dig (->> x str (map #(Integer. (str %))))\n         len (int (/ (count dig) 2))\n         l (take len dig)\n         r (take-last len dig)]\n     (= (apply + l) (apply + r))))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 115, "code": "(fn balance [n]\n  (let [digits (loop [n n acc []]\n                 (if (= n 0) acc (recur (quot n 10) (conj acc (mod n 10)))))\n        l (quot (count digits) 2)]\n    (= (reduce + 0 (take l digits)) (reduce + 0 (take-last l digits)))))", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 115, "code": "(fn [n]\n  (if (< n 10) true\n    \n    (letfn [(digits [x]\n                    (loop [dl '() number x]\n                      (if (zero? number) dl (recur (conj dl (rem number 10)) (quot number 10)))))]\n      \n      (let [d (digits n) len (quot (count d) 2)]\n        (= (reduce + (take len d)) (reduce + (take-last len d)))))))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 115, "code": "(fn func [n]\n  (letfn [(get-digits [n] (map (comp read-string str) (seq (str n))))\n          (get-sum [coll] (apply + coll))]\n    (let [digits (get-digits n)\n          size (quot (count digits) 2)\n          left (take size digits)\n          right (take size (reverse digits))]\n      (= (get-sum left) (get-sum right)))))", "user": "5e805895e4b085ba37836e44"}, {"problem": 115, "code": "(fn [n]\n  (let [ds (map int (str n))\n        half (quot (count ds) 2)]\n    (= (apply + (take half ds)) (apply + (take-last half ds)))))", "user": "4eb70649535d7eef30807373"}, {"problem": 115, "code": "(fn balanced? [num]\n  (let [digits     (mapv #(Character/digit % 10)\n                         (str num))\n        half       (quot (count digits) 2)\n        first-half (take half digits)\n        last-half  (take half (reverse digits))]\n    (= (apply + first-half)\n       (apply + last-half))))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 115, "code": "#(let [digits (map (comp read-string str) (str %))\nmiddle (quot (count digits) 2)]\n(= (reduce + (take middle digits)) (reduce + (take middle (reverse digits)))))\n;digits based on chouser's solution of problem 99 Product Digits\n;nthrest or nthnext are not working correctly for the right part of the digits", "user": "5e13a6b7e4b099d064963001"}, {"problem": 115, "code": "(fn bla\n  [x]\n  (let [sx (str x)\n        index (int (/ (count sx) 2))\n        left (map str (take index sx))\n        right (map str (take-last index sx))\n        left-result (reduce #(+ (Integer/valueOf %2) %1) 0 left)\n        right-result (reduce #(+ (Integer/valueOf %2) %1) 0 right)\n        ]\n    (= left-result right-result)\n    ))", "user": "5e9d99f9e4b0157ca9664806"}, {"problem": 115, "code": "(fn balanced-number [number]\n  (let [actual-number (->> number\n                           str\n                           seq\n                           (map int))\n        mid (quot (count (str number)) 2)]\n    (= (apply + (take mid actual-number))\n       (apply + (drop (if (even? (count (str number)))\n                        mid \n                        (inc mid)) actual-number)))))", "user": "5e92adb6e4b0fbed045a37ea"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [\n    digits ((fn d [n] \n      (if (< n 10) \n        (cons n '()) \n        (cons (rem n 10) (d (quot n 10))))) n)\n    half (quot (count digits) 2)\n    lhs (take half digits)\n    rhs (take half (reverse digits))]\n\n    (= (reduce + lhs) (reduce + rhs))))", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map  #(- (int %) 48) (str n))\n        half (quot (count digits) 2)]\n    (= (apply + (take half digits)) (apply + (take-last half digits)))))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 115, "code": "(fn [n]\n    (let [ns (map #(Integer/parseInt (str %)) (str n))\n          len (quot (count ns) 2)\n          front (take      len ns)\n          back  (take-last len ns)]\n      (= (reduce + front) (reduce + back))))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 115, "code": "(fn [n]\n  (let [ds (map #(mod % 10) (take-while #(> % 0) (iterate #(quot % 10) n)))\n        split (quot (count ds) 2)]\n    (= (apply + (take split ds)) (apply + (take-last split ds)))))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        c (count s)\n        x (if (even? c) [(/ c 2) (/ c 2)] [(Math/floor (/ c 2)) (Math/ceil (/ c 2))])]\n    (= (apply + (map #(Character/digit % 10) (take (first x) s)))\n       (apply + (map #(Character/digit % 10) (nthrest s (second x)))))))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 115, "code": "#(let [hs (fn [s]\n            (let [cnt (/ (count s) 2)]\n              (= (apply + (take cnt s)) (apply + (take cnt (reverse s))))))]\n   (->> (str %)\n        (clojure.string/join \" \" )\n        ((fn [nss] (str \"(\" nss \")\")))\n        (read-string)\n        (hs))\n  )", "user": "58f64f71e4b0438e51c2cef0"}, {"problem": 115, "code": "(fn [n]\n  (let [number-string (str n)\n        front-half (take (quot (count number-string) 2) number-string)\n        back-half (take (quot (count number-string) 2) (reverse number-string))\n        digit-adder (fn [s] (reduce #(+ (- (int %1) 48) (- (int %2) 48)) 0 s))]\n    (= (digit-adder front-half) (digit-adder back-half))))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 115, "code": "(fn [x] (->> x\n             str\n             (map (comp read-string str))\n             (#(let [h (quot (count %) 2)]\n                 [(take h %)\n                  (drop (if (odd? (count %)) (inc h) h) %)]))\n             (map #(apply + %))\n             (apply = )))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 115, "code": "(fn balance [num]\n    (let [digit-seq ((fn digit [num]\n                      (if (= (quot num 10) 0)\n                    \t[num]\n                        (conj (digit (quot num 10)) (rem num 10) ))) num)\n          c (count digit-seq)\n          n (if (even? c) (quot c 2) (quot (inc c) 2))]\n     (= (apply + (take n digit-seq)) (apply + (take-last n digit-seq)))))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 115, "code": "(fn [n]\n   (let [n-of-digits (count (str n))\n         middle (quot n-of-digits 2)\n         int-seq   (map #(Integer/parseInt (str %)) (str n))]\n     (= (apply + (take middle int-seq))\n        (apply + (take-last middle int-seq)))\n     )\n   )", "user": "56c60b36e4b05cc29241eead"}, {"problem": 115, "code": "(fn [n] \n  (let [s (str n)\n        str->nums (partial map #(Character/getNumericValue %))\n        halves [(subs s 0 (/ (count s) 2))\n                (subs s (/ (inc (count s)) 2))]\n        sums (mapv #(reduce + (str->nums %)) halves)]\n    (= (sums 0) (sums 1))))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 115, "code": "(fn\n  [n]\n  (let [my-map (map #(Character/digit % 10) (str n))\n        map-len (int (/ (count my-map) 2))]\n    (or \n     (= (count my-map) 1) \n     (=\n      (reduce + (take map-len my-map)) \n      (reduce + (take-last map-len my-map))) \n     )))", "user": "5ed65b59e4b016b56eae05df"}, {"problem": 115, "code": "(fn [x]\n  (let [n (count (str x))\n        l (take (/ n 2) (str x))\n        r (take (/ n 2) (reverse (str x)))]\n    (= (apply + (map int l))\n       (apply + (map int r)))))", "user": "50ed4626e4b01236b1d4983c"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(to-digit [x]\n                    (loop [x x result ()]\n                      (if (zero? x) \n                        result\n                        (recur (quot x 10) \n                               (cons (mod x 10) result)))))]\n    (let [digits (vec (to-digit n))\n          cnt (count digits)\n          idx (quot cnt 2)]\n      (= (reduce + (subvec digits 0 idx))\n         (reduce + (subvec digits (if (even? cnt)\n                                    idx\n                                    (inc idx)))))\n      )))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 115, "code": "(fn solution [n]\n  (let [num_seq (seq (str n))\n        half (int (/ (count num_seq) 2))\n        first-half (take half num_seq)\n        last-half (take-last half num_seq)\n        reduce-str (partial reduce #(+ (read-string (str %1)) (read-string (str %2))))]\n    (if (= 0 (count first-half))\n      true\n      (= (reduce-str first-half) (reduce-str last-half)))))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 115, "code": "(fn [num]\n   (let [numstr (str num)\n         split-list (split-at (/ (count numstr) 2) numstr)\n         add-up (fn [lst] (reduce #(+ %1 (Integer/parseInt (str %2))) 0 lst))\n]\n     (if (> (count (first split-list)) (count (second split-list)))\n\n       (= (add-up (drop-last (first split-list))) (add-up (second split-list)))\n       (= (add-up (first split-list)) (add-up (second split-list)))\n\n       )))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 115, "code": "(fn balancing-of-n [num]\n  (let [num-str (str num)\n        ct-str (count num-str)]\n    (condp #(%1 %2) ct-str\n      (partial = 1) true\n      even? (= (clojure.string/reverse num-str) num-str)\n      odd? (let [[fst lst] (split-at (/ (- ct-str 1) 2) num-str)\n                 sum (fn [s]\n                       (reduce (fn [t i]\n                                 (+ t (Character/digit i 10))) 0 s))]\n             (= (sum (rest lst)) (sum fst))))))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 115, "code": "(fn [i]\n  (let [digits (map (fn [c] (Integer/valueOf (str c))) (str i))\n        half-count (quot (count digits) 2)]\n    (= (reduce + (take half-count digits)) \n       (reduce + (take-last half-count digits)))))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 115, "code": "(fn [n]\n  (apply = \n         (map #(apply + %) \n              (let [ds (map #(Integer. %)(map str (seq (str n))))\n                    c (count ds)\n                    h (quot c 2)]\n                [(take h ds) (take-last h ds)]))))", "user": "50a4f36be4b0344e360f3bc9"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Character/getNumericValue %) (str n))\n        n (quot (count digits) 2)]\n    (= (reduce + (take n digits)) (reduce + (take-last n digits)))))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 115, "code": "(fn __\n   [x]\n   (let [x (map #(Character/digit % 10) (seq (str x)))\n         idx (quot (count x) 2)]\n      (= (reduce + (take idx x))\n         (reduce + (take idx (reverse x))))))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 115, "code": "(fn [n]\n   (letfn [(digits [n]\n             (loop [n n d '()]\n               (if (zero? n) d (recur (quot n 10) (cons (mod n 10) d)))))]\n     (let [d (digits n)\n           c (quot (count d) 2)]\n       (apply = (map (partial apply +) [(take c d) (drop (- (count d) c) d)])))))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 115, "code": ";; converting the number to a string\n;; partition that string into left and right halves\n;; sum those halves\n\n(fn balanced? [n]\n  (let [right-half (fn rh [string]\n  (let [length (count string)]\n    (subs string (- length (quot length 2)) length)))\n        left-half (fn [string]\n                    (subs string 0 (quot (count string) 2)))\n        digit->int (fn [char]\n  (- (int char) (int \\0)))]\n   \n  (let [strform (str n)\n        l (map digit->int (left-half strform))\n        r (map digit->int (right-half strform))]\n    (= (reduce + l) (reduce + r)))))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 115, "code": "(fn [n] (\n         let [digits (map #(- (int %) 48) (str n))\n              len (count digits)\n              left-end (quot len 2)\n              right-start (if (odd? len) (+ left-end 1) left-end)\n              lnums (take left-end digits)\n              rnums (drop right-start digits)\n              lsum (apply + lnums)\n              rsum (apply + rnums)]\n         (= lsum rsum)))", "user": "4eb97234535dfed6da9c6d53"}, {"problem": 115, "code": "(fn [n]\n    (let [ns (str n)\n          digits (for [c ns] (Integer/parseInt (str c)))\n          midPoint (int (Math/floor (/ (count digits) 2)))\n          left (take midPoint digits)\n          right (take-last midPoint digits)]\n      (= (apply + left) (apply + right))\n      )\n    )", "user": "5f06caa7e4b0cf489e8d7f52"}, {"problem": 115, "code": "(fn balanced [n]\n\t(let [strified (str n)\n\t\thalflen (/ (count strified) 2)\n\t\tfirsthalf (take (int halflen) strified)\n\t\tsecondhalf (drop halflen strified)\n\t\t]\n\t\t(loop [a firsthalf, b secondhalf, asum 0, bsum 0]\n\t\t\t(prn a asum b bsum)\n\t\t\t(if (= 0 (count a))\n\t\t\t\t(= asum bsum)\n\t\t\t\t(recur\n\t\t\t\t\t(next a)\n\t\t\t\t\t(next b)\n\t\t\t\t\t(+ asum (int (first a)))\n\t\t\t\t\t(+ bsum (int (first b)))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n)", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 115, "code": "(fn [x] (let [func #(->> % str vec (map (comp (partial - 48) int)))\n              func2 (fn [u] (partition (quot (count u) 2) u))\n              l1 (->> x func func2 first (reduce +))\n              l2 (->> x func reverse func2 first (reduce +))]\n              (= l1 l2)))", "user": "5df08767e4b093ff717275bf"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(n->digits [n]\n                     (->> (iterate #(quot % 10) n)\n                          (take-while pos?)\n                          (mapv #(mod % 10))\n                          (rseq)))\n          (middle-out [xs]\n                      [(take (quot (count xs) 2) xs)\n                       (drop (/    (count xs) 2) xs)])]\n    (->> (n->digits n)\n         middle-out\n         (map #(apply + %1))\n         (apply =))))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 115, "code": "(fn [n]\n  (let [d (map #(Character/getNumericValue %) (str n))]\n    (= (reduce + (take (/ (count d) 2) d))\n       (reduce + (take-last (/ (count d) 2) d)))))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 115, "code": "(fn a [n]\n  (if (< n 10)\n    true\n    (let [b (->> n str vec) c (count b)\n          d (->> (take (->> (/ c 2) int) b) sort)\n          e (->> (drop (/ c 2) b) sort)]\n      (= d e)\n      ))\n  )", "user": "5405885ee4b0addc1aec6668"}, {"problem": 115, "code": "(fn [n] (->> (str n)\n        seq\n        (map #(- (int %) (int \\0)))\n\t\t(#(map vector % (range (count %))))\n\t\t(#(partition-by (fn [x] (let [mid (- (/ (count %) 2) 0.5)\n                                      id (second x)]\n                                  (cond (< mid id) 1\n                                        (> mid id) 2\n                                        :else 3))) %))\n        (map #(map first %))\n        (map (partial apply +))\n        (#(= (first %) (last %)))))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 115, "code": "(fn [n]\n  (let [get-all-digits (fn get-all-digits [n]\n                         (let [q (quot n 10)\n                               m (mod n 10)]\n                           (cons m (when (> q 0) (get-all-digits q)))))\n        all-digits (get-all-digits n)\n        half-length (quot (count all-digits) 2)]\n    (= (apply + (take half-length all-digits))\n       (apply + (drop (- (count all-digits) half-length) all-digits)))))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 115, "code": "(fn balanced? [n]\n  {:pre [(>= n 0)]}\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        num-digits (count digits)\n        half (quot num-digits 2)\n        [l r] (split-at half digits)\n        r (if (even? num-digits) r (rest r))]\n    (== (reduce + l) (reduce + r))))", "user": "5f300f28e4b033932238a682"}, {"problem": 115, "code": "(fn [n]\n  (let [ns (map (fn [i] (- (int i) 48)) (into [] (str n)))\n        cnt (count ns)\n        ha (quot cnt 2)\n        pfn (if (zero? (rem cnt 2)) (fn [a] (< a ha)) (fn [a] (= a  ha )))\n        isum (fn [l] (reduce (fn [a v] (+ a (first v))) 0 l)) ]\n  (->> (map (fn [a b] [a b]) ns (range))\n       (partition-by (fn [v] (pfn (second v))))\n       (map isum)\n       ((fn [l] (= (first l) (last l)))))))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 115, "code": "(fn [n]\n   (->\n    (str n)\n    (#(= (reduce + (map int (subs % 0 (/ (count %) 2))))\n         (reduce + (map int (subs % (/ (inc (count %)) 2))))))))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 115, "code": "(fn [n] (let [s (str n)\n              len (.length s)\n              half (quot len 2)\n              front (.substring s 0 half)\n              back (.substring s (- len half))\n              dsum (fn [s] (->> s (map #(- (int %) (int \\0))) (apply +)))\n              fsum (dsum front)\n              bsum (dsum back)]\n          (= fsum bsum)))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (->> n\n                    (iterate #(quot % 10))\n                    (take-while pos?)\n                    (map #(mod % 10)))\n        x (quot (count digits) 2)\n        left (reduce + (take x digits))\n        right (reduce + (take-last x digits))]\n    (= left right)))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 115, "code": "(fn [n]\n   (if (= n 0) true\n       (let* [len (inc (int (Math/log10 n)))\n              left (int (quot n (Math/pow 10 (Math/ceil (/ len 2)))))\n              right (int (mod n (Math/pow 10 (Math/floor (/ len 2)))))]\n         (letfn [(digits-sum [num]\n                   (loop [n num\n                          sum 0]\n                     (if (= n 0)\n                       sum\n                       (recur (quot n 10) (+ sum (mod n 10))))))]\n           (= (digits-sum left) (digits-sum right))))))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 115, "code": "(fn [i]\n  (let [numbers (map #(Integer/parseInt (str %)) (seq (str i)))\n        [left right] (split-at (quot (count numbers) 2) numbers)]\n    (= (apply + left)\n       (apply + (if (> (count right)\n                        (count left))\n                   (drop 1 right)\n                   right)))))", "user": "4f3e6244e4b0e243712b1f85"}, {"problem": 115, "code": "; using local vars + local function\n(fn balance [num]\n   (let [char (seq (str num))\n         half (/ (count char) 2)]\n     (letfn [(sum [coll n]\n               (->> (take n coll)\n                    (map #(java.math.BigInteger. (str %)))\n                    (apply +)))]\n       (=\n         (sum char half)\n         (sum (reverse char) half)\n        )\n     ))\n   )", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 115, "code": "(fn sol [n]\n  (let [num-seq (map #(-> % int (- 48)) (str n))\n        cnt     (count num-seq)\n        half  (quot cnt 2)]\n    (= (apply + (take half num-seq))\n       (apply + (take half (reverse num-seq))))))", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 115, "code": "(fn balanced [n]\n  (let [v (mapv #(Integer/parseInt (str %)) (str n))\n        l (subvec v 0 (quot (count v) 2))\n        r (subvec (vec (reverse v)) 0 (quot (count v) 2))]\n    (= (apply + l) (apply + r))))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 115, "code": "(fn [n]\n    (let [ digits (fn [n] (map #(- (int %) (int \\0)) (seq (str n))))\n           dig    (digits n)\n           c      (count dig)\n           h      (quot c 2)\n           l      (take h dig)\n           r      (take h (if (odd? c) (drop (inc h) dig) (drop h dig))) ]\n       (= (apply + l) (apply + r))))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 115, "code": "(fn [n]\n         (let [s (str n)\n               str-sum (fn [s] (reduce + (map int (str s))))]\n           (= (str-sum (subs s 0 (/ (count s) 2)))\n              (str-sum (subs s (/ (inc (count s)) 2))))))", "user": "5f7600ffe4b02876ed9fd0ac"}, {"problem": 115, "code": "(fn [n]\n    (let [nof (-> n str count dec (bit-shift-right 1))\n          nof (if (zero? nof) (inc nof) nof)\n          ds (map #(- (int %) 48) (str n))]\n      (zero? (apply - (map #(apply + (take nof %)) [ds (reverse ds)])))))", "user": "507e68abe4b085af06e3afd2"}, {"problem": 115, "code": "(fn baln [n]\n  (letfn [(digs [i]\n            (loop [i i\n                   r '()]\n              (if (= i 0)\n                r\n                (recur (quot i 10) (conj r (rem i 10))))))]\n    (let [d (digs n)\n          c (quot (count d) 2)]\n      (= (reduce + 0 (take c d)) (reduce + 0 (take-last c d))))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 115, "code": "(fn [num]\n  (let [digits (loop [cursor num\n                      digits []]\n                 (if (> 10 cursor)\n                   (conj digits cursor)\n                   (recur (int (/ cursor 10)) (conj digits (mod cursor 10)))))]\n    (loop [cursor digits\n           left []\n           right []]\n      (if (>= 1 (count cursor))\n        (= (reduce + left) (reduce + right))\n        (recur\n         (rest (butlast cursor))\n         (conj left (first cursor))\n         (conj right (last cursor)))))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(sumld [s] (->> s (take (/ (count s) 2)) (map #(Character/digit % 10)) (apply +)))]\n    (= (sumld (str n)) (sumld (reverse (str n))))))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (->> (re-seq #\".\" (str n))\n                    (map #(Long/parseLong %)))\n        half (quot (count digits) 2)\n        left-half  (take half digits)\n        right-half (take half (reverse digits))]\n    (= (reduce + left-half)\n       (reduce + right-half))))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 115, "code": "(fn balanced? [n]\n  (let [digits (loop [ds '() n n]\n                 (if (zero? n)\n                   ds\n                   (recur (conj ds (rem n 10)) (quot n 10))))\n        [left right] (map #(% (/ (count digits) 2) digits) [take take-last])]\n    (= (apply + left) (apply + right))))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 115, "code": "(fn [n]\n  (let [digs (map #(read-string (str %)) (str n))\n        half-length (int (/ (count digs) 2))]\n    (=\n     (apply + (take half-length digs))\n     (apply + (take half-length (reverse digs))))))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(digits\n           [result rst]\n           (if (< rst 10) (cons rst result)\n               (digits (cons (rem rst 10) result) (quot rst 10))))\n          (balance?\n           [v]\n           (let [len (count v)]\n             (if (even? len)\n                 (= (reduce + (take (/ len 2) v)) (reduce + (drop (/ len 2) v)))\n                 (= (reduce + (take (quot len 2) v)) (reduce + (drop (inc (quot len 2)) v))))))]\n    (balance? (digits nil n))))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 115, "code": "(fn [n]\n   (let [sn (str n)\n         cn (count sn)\n         hcn (quot cn 2)\n         f (fn [len s]\n             (reduce #(+ % (read-string (str %2))) 0 (take len s)))]\n     (= (f hcn sn) (f hcn (reverse sn)))))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 115, "code": "(fn [n] (\n\n  apply =\n\n    (map #(->> (map (comp read-string str) %)\n\n               (seq)\n\n               (take (int (/ (count (str n)) 2)))\n\n               (apply +)) (vector (str n) (reverse (str n))))))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 115, "code": "#(or (case % 11 true 121 true 123 false 0 true 88099 false 89098 true 89089 true false)\n     (-> [0 1 2 3 4 5 6 7 8 9 11 22 33 44 55 66 77 88 99 101] ((partial into #{})) (contains? %)))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 115, "code": "(fn [n]\n  (let [sn (map #(int %) (str n))\n        c (quot (count sn) 2)]\n    (= (reduce + (take c sn)) (reduce + (take c (reverse sn))))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 115, "code": "(fn \n  [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        half (int (Math/ceil (/ (count digits) 2)))\n        left (take half digits)\n        right (take half (reverse digits))]\n    (= (reduce + left)\n      (reduce + right))))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 115, "code": "(fn [x]\n  (let [s (str x)\n        c (quot (count s) 2)]\n    (->> [s (reverse s)]\n         (map #(take c %))\n         (map #(map int %))\n         (map #(apply + %))\n         (apply =)\n         )\n    ))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 115, "code": "(fn [n]\n   (let [digits (map #(Character/digit % 10) (str n))\n         elements (-> digits count (quot 2))\n         sum #(reduce + (take elements %))]\n     (= (sum digits) (sum (reverse digits)))))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 115, "code": "(fn [n]\n    (let [str-n (str n)\n          count-n (count str-n)\n          half (if (even? count-n)\n                 (/ count-n 2)\n                 (/ (inc count-n) 2))\n          take-first-half (partial take half)\n          take-last-half (comp take-first-half reverse)\n          sum-int-char (fn [acc x] (+ acc (Integer. (str x))))]\n      (->> (str n)\n           ((juxt take-first-half take-last-half))\n           (map #(reduce sum-int-char 0 %))\n           (apply =))))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 115, "code": "(fn balanced-n [num]\n  (letfn [(get-digits [num]\n            (map #(Integer. (str %)) (seq (str num)))\n            )]\n    \n    (let [digits (get-digits num)\n          num-to-take (if (= (mod 2 (count digits)) 0) (/ (count digits) 2)     \n                          (/ (dec (count digits)) 2))\n          num-to-drop (if (= (mod 2 (count digits)) 0) num-to-take     \n                          (inc num-to-take))]\n      (if (= (count digits) 1)\n        true\n        (= (apply + (take num-to-take digits)) (apply + (drop num-to-drop digits)))\n        )\n      ))\n\n)", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 115, "code": "(fn [n]\n    (letfn [(digits [n]\n                (loop [n n acc '()]\n                    (if (= n 0)\n                        acc\n                        (recur (quot n 10) (cons (rem n 10) acc)))))]\n        (let [ds (digits n)\n              len (count ds)\n              hlf (quot len 2)\n              left (take hlf ds)\n              right (take-last hlf ds)]\n            (= (reduce + left) (reduce + right)))))", "user": "600ae927e4b074f607df6689"}, {"problem": 115, "code": "(fn [n]\n  (let [num-seq (->> n\n                     (str)\n                     (map str)\n                     (map read-string))\n        ln (count num-seq)\n        mid (int (Math/ceil (/ ln 2)))\n        r-sum (->> num-seq\n                   (take mid)\n                   (apply +))\n        l-sum (->> num-seq\n                   (take-last mid)\n                   (apply +))]\n    (= r-sum l-sum)))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 115, "code": "#(let [ds (map (comp read-string str) (seq (str %)))\n       n (count ds)\n       m (quot n 2)\n       a (take m ds)\n       b (drop (if (even? n) m (inc m)) ds)]\n   (= (reduce + a) (reduce + b)))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 115, "code": "(fn [n]\n(let [ds (map #(Character/digit % 10) (str n))\nh (int (/ (count ds) 2))\nl (take h ds)\nr (take-last h ds)]\n(= (apply + l) (apply + r))))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 115, "code": "(fn balanced? [x]\n  (let [digits (loop [result '()\n                      i      x]\n                 (if (zero? i)\n                   result\n                   (recur (conj result (rem i 10)) (quot i 10))))\n        l (quot (count digits) 2)]\n    (= (apply + (take l digits)) (apply + (take l (reverse digits))))))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 115, "code": "(fn is-balanced [a-num]\n  (letfn [(num-2-digits [a-num]\n    (loop [n a-num result []]\n      (let [q (quot n 10)\n            m (mod n 10)]\n        (if (zero? q)\n          (conj result m)\n          (recur q (conj result m))))))]\n  (loop [s (num-2-digits a-num) s-l 0 s-r 0]\n    (case (count s)\n      0 true\n      1 (= s-l s-r)\n      2 (= (+ s-l (first s)) (+ s-r (second s)))\n      (recur (rest (butlast s)) (+ s-l (first s)) (+ s-r (last s)))))))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 115, "code": "(fn [x] \n  (->> x\n       (str)\n       (map (comp read-string str))\n       (#(let [n (int (/ (count %) 2))\n               f (take n %)\n               g (take-last n %)]\n           (= (apply + f) (apply + g))) )))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 115, "code": "(fn balanced? [N]\n  (let [sN (str N)\n        lengthHalf (/ (count sN) 2)\n        left (map (fn [x] (- (int x) 48))\n                  (into [] (take (Math/floor lengthHalf) sN)))\n        right (map (fn [x] (- (int x) 48))\n                   (into [] (drop (Math/ceil lengthHalf) sN)))]\n    (= (reduce + 0 left) (reduce + 0 right))))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 115, "code": "#(let [s (str %)\n       amount (quot (count s) 2)\n       all-sum (fn [n]  ; '(\\1 \\2)\n                 (apply + (map (fn [x]\n                                 (- (int x) (int \\0)))\n                               n)))]\n   (= (all-sum (take amount s))\n      (all-sum (take-last amount s))))", "user": "60096aabe4b074f607df667f"}, {"problem": 115, "code": "(fn [n]\n  (let [h (int (Math/ceil (/ (count (str n)) 2)))\n        s (->> n\n              (str)\n              (seq)\n              (map str)\n              (map read-string))]\n    (= (apply + (take h s))\n       (apply + (take h (reverse s))))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 115, "code": "(fn [n]\n  (let  \n    [num-array (loop [digits []\n                      to-check n]\n                (if (> (quot to-check 10) 0)\n                  (recur (conj digits (rem to-check 10)) (quot to-check 10))\n                  (conj digits (rem to-check 10))))\n     half (quot (count num-array) 2)\n    ]\n    (= (apply + (take half num-array)) (apply + (take-last half num-array)))))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n) k (count s)]\n    (= (apply + (map int (take (Math/floor (/ k 2)) s)))\n       (apply + (map int (drop (Math/ceil (/ k 2)) s))))))", "user": "5f419985e4b0955706451fab"}, {"problem": 115, "code": "(fn [n]\n  (let [xs (->> n str (map str) (map #(Integer. %)))\n        k (Math/floor (/ (count xs) 2))]\n    (= (apply + (take k xs)) (apply + (take-last k xs)))))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 115, "code": "(fn a [num]\n  (let [digit (fn [n] (map #(- (int %) 48) (str n)))\n        digits (digit num)\n        digit_count (count digits)\n        sum1 (reduce + (take (int (/ digit_count 2)) digits))\n        sum2 (reduce + (drop (/ digit_count 2) digits))]\n    (= sum1 sum2)\n    )\n  )", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 115, "code": "(fn balanced?\n  [n]\n  (let [s (str n)\n        mid (/ (count s) 2)\n        left (subs s 0 (int (Math/floor mid)))\n        right (subs s (int (Math/ceil mid)))]\n    (= (->> left\n           (map str)\n           (map read-string)\n           (reduce +))\n       (->> right\n           (map str)\n           (map read-string)\n           (reduce +)))))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (->> n\n                    (iterate #(quot % 10))\n                    (take-while pos?)\n                    (mapv #(mod % 10))\n                    rseq)\n        l (count digits)\n        [take-n drop-n] (if (odd? l)\n                          [(+ (quot l 2) 1) (quot l 2)]\n                          [(quot l 2) (quot l 2)])\n        sums (map #(reduce + %)\n                  [(take take-n digits) (drop drop-n digits)])]\n    (= (first sums) (second sums))))", "user": "5b92f178e4b0c0b3ffbd4a41"}, {"problem": 115, "code": "(fn [x] (let [s (str x)\n              h (quot (count s) 2)\n              hs #(apply + (map int (take h %)))]\n          (= (hs s) (hs (reverse s)))))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 115, "code": "(fn [n]\n  (letfn [(digits [n]\n            (->> n\n                 (iterate #(quot % 10))\n                 (take-while pos?)\n                 (map #(mod % 10))\n                 (reverse)))]\n    (let [digits (vec (digits n))]\n      (= (reduce + (map digits (range (/ (count digits) 2))))\n         (reduce + (map digits (range (quot (count digits) 2) (count digits))))))))", "user": "60460824e4b02d28681c77bc"}, {"problem": 115, "code": "(fn balance-number?\n  [n]\n  (let [digits (fn [x]\n                 (->> (seq (str x))\n                      (map str)\n                      (map #(Long/parseLong %))))]\n    (let [d (digits n)\n          x (long (/ (count d) 2))]\n      (= (reduce + (take x d))\n         (reduce + (take-last x d))))))", "user": "4e586949535d8a8b8723a292"}, {"problem": 115, "code": "(fn __ [x]\n  (let [s (str x)\n        n (quot (count s) 2)]\n    (= (reduce + (map int (take n s)))\n       (reduce + (map int (take-last n s))))))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 115, "code": "(fn [n]\n  (let [s (str n)\n        h (int (/ (count s) 2))\n        l (subs s 0 h)\n        r (subs s (- (count s) h) (count s))\n        ps (fn [s] (apply + (map (comp read-string str) s)))]\n    (= (ps l) (ps r))))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 115, "code": "(fn balanced-number? [n]\n  (letfn [(digits [n]\n            (loop [n n ds '()]\n              (if (< n 10)\n                (cons n ds)\n                (recur (quot n 10) (cons (mod n 10) ds)))))]\n\n    (let [d (digits n)\n\n          sum-first-half (reduce + (take (quot (count d) 2) d))\n\n          sum-second-half (reduce + (take-last (quot (count d) 2) d))]\n\n      (= sum-first-half sum-second-half))))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 115, "code": "(fn is-balanced[n]\n  (letfn [(strSum[s] (reduce #(+\n                                 (Integer/parseInt (str %1))\n                                 (Integer/parseInt (str %2))) 0  s))] \n  (let [str-n (.toString (Integer. n))\n        len (count str-n)\n        mid (int (/ len 2))\n        part-1 (subs str-n 0 mid)\n        part-2 (subs str-n (if (odd? len) (inc mid) mid))]\n    (cond (= len 1) true\n    :else (= (strSum part-1) (strSum part-2))))))", "user": "5bab31f1e4b0a20761a23471"}, {"problem": 115, "code": "(fn [n]\n  (let [n-str (str n)\n        d (int (/ (count n-str) 2))\n        s (seq n-str)\n        i (map #(Character/digit % 10) s)\n        left-half-sum (apply + (take d i))\n        right-half-sum (apply + (take-last d i))]\n    (= left-half-sum right-half-sum)))", "user": "52f53589e4b05e3f0be25f2c"}, {"problem": 115, "code": "(fn solve [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        prefix (take (quot (count digits) 2) digits)\n        suffix (take-last (quot (count digits) 2) digits)]\n    (= (apply + prefix)\n       (apply + suffix))))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 115, "code": "(fn balanced [n]\n    (let [string-n (map #(Integer/parseInt (str %)) (str n))\n          half-length (/ (count string-n) 2)]\n         (=\n           (apply + (take (Math/floor half-length) string-n))\n           (apply + (drop (Math/ceil half-length) string-n)))))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 115, "code": "(fn balanced?\n  [num]\n  (let [num' (str num)\n        char->int (fn [x] (- (int x) 48))\n        half (fn [x] (quot (count x) 2))]\n    (if (= (rem (count num') 2) 0)\n      (= (reduce (fn [sum digit]\n                   (+ sum (char->int digit))) 0\n                 (take (half num') num'))\n         (reduce (fn [sum digit]\n                   (+ sum (char->int digit))) 0\n                 (drop (half num') num')))\n      (= (reduce (fn [sum digit]\n                   (+ sum (char->int digit))) 0\n                 (take (+ (half num') 1) num'))\n         (reduce (fn [sum digit]\n                   (+ sum (char->int digit))) 0\n                 (drop (half num') num'))))))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 115, "code": "(fn [n]\n    (let [s (str n)\n          f (take (/ (count s) 2) s)\n          l (take-last (/ (count s) 2) s)]\n      (= (apply + (map int f))\n         (apply + (map int l)))))", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 115, "code": "(fn [n]\n  (let [c2d {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9}\n        ds (mapv #(c2d % ) (-> n str seq))\n        mid (quot (count ds) 2)\n        l (subvec ds 0 mid)\n        r (subvec ds (- (count ds) mid))]\n    (= (apply + l) (apply + r))))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 115, "code": "(fn [n]\n  (let [n-digits (map #(Character/getNumericValue %) (str n))\n        half (int (/ (count n-digits) 2))\n        left (take half n-digits)\n        right (take-last half n-digits)]\n    (= (reduce + left) (reduce + right))))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 115, "code": "(fn [n]\n  (let [coll (seq (str n))\n        halves (partition (int (Math/ceil (/ (count coll) 2) )) (quot (count coll) 2) coll)\n        halves2 (for [h halves] (reduce #(+ %1 (- (int %2) 48)) 0 h))\n        ] (= (first halves2) (second halves2))))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (->> n\n                    (iterate #(quot % 10))\n                    (take-while pos?)\n                    (map #(mod % 10)))\n        half-length (quot (count digits) 2)\n        left (take half-length digits)\n        right (take-last half-length digits)]\n    (= (apply + left) (apply + right))))", "user": "60794173e4b0a637ed78035d"}, {"problem": 115, "code": "(fn balanced-number? [num]\n  (letfn [(get-digits [x]\n            (if (zero? x) []\n                (conj (get-digits (quot x 10)) (mod x 10))))]\n    (let [digits (get-digits num)\n          half (int (Math/ceil (/ (count digits) 2)))\n          sum-half (fn [digits-coll] (apply + (take half digits-coll)))\n          [left right] (map sum-half [digits (rseq digits)])]\n      (= left right))))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 115, "code": "(fn [y]\n  (let [x (str y)\n        half (quot (count x) 2) \n        ltext (take half x) \n        rtext (take half (reverse x)) \n        dp (fn [z] (reduce + (map #(- (int %) (int \\0)) z))) \n        left (dp ltext) \n        right (dp rtext)] \n    (= left right)))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 115, "code": "(fn [n]\n  (let [digits (map #(Integer/parseInt (str %)) (str n))\n        size (int (/ (count digits) 2))\n        f (take size digits)\n        l (take-last size digits)]\n    (= (reduce + f) (reduce + l))))", "user": "603961e3e4b0d5df2af222f3"}, {"problem": 115, "code": "(fn [n]\n  (let [t (->> n\n                 (str)\n                 (vec)\n                 (map #(- (int %) 48)))\n        sum (reduce + 0 t)\n        c (count (str n))\n        div (quot c 2)\n        sl (->> t\n                (take div)\n                (reduce + 0))]\n    (if (= (rem c 2) 0)\n      (=  sl (/ sum 2))\n      (= (let [l (last (take (inc div) t))]\n           (/ (- sum l) 2)) sl))\n  ))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 115, "code": "(fn balance [n]\n  (let [digits (mapv #(mod % 10) (take-while pos? (iterate #(quot % 10) n)))\n        half-length (int (/ (count digits) 2))\n        left-half (take half-length digits)\n        right-half (drop (- (count digits) half-length) digits)\n        left-sum (reduce + left-half)\n        right-sum (reduce + right-half)]\n    (= left-sum right-sum)))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 115, "code": "(fn [n]\n   (let [s (str n)\n         c (count s)\n         q (quot c 2)]\n     (apply = (map sort [(subs s 0 q) (subs s (- c q))]))))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 115, "code": "(fn balance-num\n  [n]\n  (let [digits (->> n\n                    (str)\n                    (seq))\n        half-num-elems (quot (count digits) 2)\n        sum-str-digits-fn #(apply + (map (comp (fn [s] (Integer/parseInt s)) str) %))]\n    (= (sum-str-digits-fn (take half-num-elems digits))\n       (sum-str-digits-fn (take-last half-num-elems digits)))))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 115, "code": "(fn [x]\n    (let [s (str x)\n          n (/ (count s) 2)\n          sum (fn [s] (reduce + (map (comp read-string str) s)))]\n      (= (sum (take n s))\n         (sum (take-last n s)))))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 115, "code": "(fn my-foo [num]\n  (let [my-seq (-> num str seq)\n        first-seq\n        (map #(Character/digit % 10)\n             (take-last (-> (count my-seq) (/ 2) int) my-seq))\n        second-seq\n        (map #(Character/digit % 10)\n             (take (-> (count my-seq) (/ 2) int )my-seq))]\n    (if ( = (apply + first-seq) (apply + second-seq))\n      true\n      false  )))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 115, "code": "(fn balanced?\n  [n]\n  (let [digits (if (zero? n)\n                 [0]\n                 (loop [result []\n                        n* n]\n                   (if (zero? n*)\n                     result\n                     (recur\n                       (conj result (mod n* 10))\n                       (quot n* 10)))))\n        half-size (quot (count digits) 2)]\n    (= (apply + (take half-size digits))\n       (apply + (take-last half-size digits)))))", "user": "6098263be4b00e9e6653c3f9"}]