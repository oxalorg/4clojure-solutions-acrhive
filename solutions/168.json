[{"code": "(fn [r f & [m n s t]]\n  (map #(map (partial f %) (r n t)) (r m s)))\n(fn r [a b]\n  ({0 ()} b (lazy-cat [(or a 0)]\n                      (r (+ (or a 0) 1) (- (or b 0) 1)))))", "problem": 168, "user": "4da3e51330acd6ed10482a68"}, {"code": "(letfn [(natural\n          ([] (natural 0))\n          ([n] (lazy-seq (cons n (natural (inc n))))))]\n  (fn inf-matrix\n    ([f] (map #(map (partial f %) (natural)) (natural)))\n    ([f m n] (inf-matrix #(f (+ % m) (+ %2 n))))\n    ([f m n s t] (map #(take t %) (take s (inf-matrix f m n))))))", "problem": 168, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(letfn [\n  (line [f i j] \n    (lazy-seq \n      (cons (f i j) \n        (line f i (inc j))))) ]\n\n  (fn m\n    ([f i j]\n      (lazy-seq (cons (line f i j) (m f (inc i) j))))\n    ([f i j ii jj]\n      (map #(take jj %) (take ii (m f i j))))\n    ([f] \n      (m f 0 0)))\n  )", "problem": 168, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn g\n  ([f]\n   (g f 0 0))\n  ([f m n]\n   (g f m n nil nil))\n  ([f m n s t]\n   ((fn r [i]\n      (lazy-seq\n        (if (= (- i m) s)\n          ()\n          (cons\n            ((fn c [j]\n               (lazy-seq\n                 (if (= (- j n) t)\n                   ()\n                   (cons\n                     (f i j)\n                     (c (inc j)))))) n)\n            (r (inc i)))))) m)))", "problem": 168, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn x\n   ([f] (x f 0 0))\n   ([f m n] (let [r (fn r [i j] (lazy-seq (cons (f i j) (r i (inc j)))))\n                  c (fn c [i j] (lazy-seq (cons (r i j) (c (inc i) n))))]\n              (c m n)))\n   ([f m n s t] (take s (map #(take t %) (x f m n)))))", "problem": 168, "user": "4eb13d60535d7eef3080733f"}, {"code": "(letfn [(count-from [x] (cons x (lazy-seq (count-from (inc x)))))\n           (matrix-row [f m n] (map #(f m %) (count-from n)))\n           (inf-matrix [f m n] (cons (matrix-row f m n)\n                                     (lazy-seq (inf-matrix f (inc m) n))))]\n     \n     (fn imat\n       ([f] (imat f 0 0))\n       ([f m n] (lazy-seq (inf-matrix f m n)))\n       ([f m n s t] (take s (map #(take t %) (imat f m n))))))", "problem": 168, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn matrix\n     ([f m n] (letfn\n                  [(row [i j] (lazy-seq (cons (col i j) (row (inc i) j))))\n                   (col [i j] (lazy-seq (cons (f i j) (col i (inc j)))))]\n                (row m n)))\n     ([f] (matrix f 0 0))\n     ([f m n s t] (take s (map #(take t %) (matrix f m n)))))", "problem": 168, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn [f & rargs]\r\n  (let\r\n    [lazy-row (fn [i startj]\r\n                (let \r\n                  [keep-going (fn keep-going [j]\r\n                                (lazy-seq\r\n                                  (cons (f i j) (keep-going (inc j)))))]\r\n                  (keep-going startj)))\r\n     lazy-matrix-from (fn lazy-matrix-from [i j]\r\n                        (lazy-seq\r\n                          (cons (lazy-row i j) (lazy-matrix-from (inc i) j))))\r\n ]\r\n                          \r\n  (cond\r\n    (empty? rargs) (lazy-matrix-from 0 0)\r\n    (= 2 (count rargs))\r\n      (let\r\n        [[m n] rargs]\r\n        (lazy-matrix-from m n))\r\n    (= 4 (count rargs))\r\n      (let\r\n        [[m n s t] rargs\r\n         laz (lazy-matrix-from m n)\r\n         lazs (take s laz)\r\n         lazst (map #(take t %) lazs)]\r\n        lazst))))", "problem": 168, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(letfn\n  [(rows [f i c] (lazy-seq (cons (cols f i c) (rows f (inc i) c))))\n   (cols [f i j] (lazy-seq (cons (f i j) (cols f i (inc j)))))]\n  (fn\n    ([f]     (rows f 0 0))\n    ([f a b] (rows f a b))\n    ([f a b h w] (take h (map #(take w %) (rows f a b))))))", "problem": 168, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn g [& [f m n s t]]\n    (let [P partial\n          M map\n          T take\n          D (fn D [n s] (if (zero? n)\n                         s\n                         (lazy-seq (D (dec n) (next s)))))\n          R (fn R [& a] (if-let [[v] a]\n                         (lazy-seq (cons v (R (inc v))))\n                         (R 0)))]\n      (cond s (T s (M (P T t) (g f m n)))\n            m (D m (M (P D n) (g f)))\n            1 (M (fn [j] (M (P f j) (R))) (R)))))", "problem": 168, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(let [mydrop (fn [n s]\n                 (loop [n n\n                        s s]\n                   (if (zero? n)\n                     s\n                     (recur (dec n) (lazy-seq (rest s))))))\n        myrange (fn rec\n                  ([] (rec 0))\n                  ([n]\n                     (lazy-seq\n                      (cons n (rec (inc n))))))]\n      (fn rec\n        ([f]\n           (map (fn [i]\n                  (map (fn [j]\n                         (f i j))\n                       (myrange)))\n                (myrange)))\n        ([f m n]\n           (->> (rec f)\n                (mydrop m)\n                (map (partial mydrop n))))\n        ([f m n s t]\n           (->> (rec f m n)\n                (take s)\n                (map (partial take t))))))", "problem": 168, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn inf-matrix\n  ([f] (inf-matrix f 0 0))\n  ([f r c rs cs] (take rs (map #(take cs %) (inf-matrix f r c))))\n  ([f r c]\n   \t(let [rng (fn rng [s] (cons s (lazy-seq (rng (inc s)))))]\n    \t(map (fn [i] (map #(f i %) (rng c))) (rng r)))))", "problem": 168, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn matrix\n  ([f]\n     (matrix f 0 0))\n\n  ([f m n]\n     (matrix f m n Double/POSITIVE_INFINITY Double/POSITIVE_INFINITY))\n\n  ([f m n s t]\n     (let [myrange (fn myrange [start end]\n                     (when (< start end)\n                       (cons start (lazy-seq (myrange (inc start) end)))))]\n       (map (fn [i]\n              (map (fn [j] (f i j))\n                   (myrange n (+ n t))))\n            (myrange m (+ m s))))))", "problem": 168, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [r f & [m n s t]]\n  (map #(map (fn [x] (f % x)) (r n t)) (r m s)))\n(fn r [a b]\n  ({0 ()} b (lazy-cat [(or a 0)]\n                      (r (+ (or a 0) 1) (- (or b 0) 1)))))", "problem": 168, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn M\n  ([f] \n    (M f 0 0))\n  ([f m n]\n    (lazy-seq\n      (cons\n        (lazy-seq (cons (f m n) (first (M f m (inc n)))))\n        (M f (inc m) n))))\n  ([f m n s t]\n    (take s (map #(take t %) (M f m n)))))", "problem": 168, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n]\n    (let [line (fn line [m n] (lazy-seq (cons (f m n) (line m (inc n)))))\n          lines (fn lines [m n] (lazy-seq (cons (line m n) (lines (inc m) n))))]\n      (lines m n)))\n  ([f m n s t] (take s (map #(take t %) (matrix f m n)))))", "problem": 168, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn inf-mat\n  ([f] (letfn [(my-range [p]\n                (lazy-cat [p] (my-range (inc p))))]\n               (map (fn [i] (map #(f i %) (my-range 0))) (my-range 0))))\n  ([f m n] (letfn [(my-drop [n coll]\n                     (if (= 0 n) coll (recur (dec n) (rest coll))))]\n             (->> (inf-mat f)\n             (my-drop m)\n             (map #(my-drop n %)))))\n([f m n s t] (->> (inf-mat f m n)\n                  (take s)\n                  (map #(take t %)))))", "problem": 168, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "(fn infinite-matrix\n  ([f]\n     (letfn [(rng [n] (lazy-seq (cons n (rng (inc n)))))]\n       (map (fn [i] (map (fn [j] (f i j)) (rng 0))) (rng 0))))\n  ([f m n]\n     (infinite-matrix #(f (+ m %1) (+ n %2))))\n  ([f m n s t]\n     (take s (map #(take t %) (infinite-matrix f m n)))))", "problem": 168, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn g \n  ([f m n s t]\n  \t(let [c (fn c [x y] \n\t\t\t\t\t(when (or (= 0 t) (< y (+ n t)))\n\t\t\t\t\t\t(lazy-seq (cons (f x y) (c x (inc y))))))\n\t \t\t  r (fn r [x] \n\t \t\t  \t\t(when (or (= 0 s) (< x (+ m s)))\n\t \t\t  \t\t\t(lazy-seq (cons (c x n) (r (inc x))))))]\n\t\t\t(r m)))\n\t([f m n] (g f m n 0 0))\n\t([f] (g f 0 0)))", "problem": 168, "user": "4db85282535d1e037afb218a"}, {"code": "(letfn [(nums [start]\n          (lazy-seq (cons start (nums (inc start)))))\n        (row [i f n]\n          (map #(f i %) (nums n)))\n        (matrix [f m n]\n          (map #(row % f n) (nums m)))]\n  (fn g\n    ([f]         (matrix f 0 0))\n    ([f m n]     (matrix f m n))\n    ([f m n s t] (->> (matrix f m n)\n                      (take s)\n                      (map #(take t %))))))", "problem": 168, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn m\n  ([f] (m f 0 0))\n\t([f i j] (letfn [(q [x] (lazy-seq (cons x (q (inc x)))))] (map (fn [x] (map #(f x %) (q j))) (q i))))\n\t([f i j s t] (map (partial take t) (take s (m f i j)))))", "problem": 168, "user": "4fb3b865e4b081705acca2a2"}, {"code": "(fn mat\n  ([f] (mat f 0 0))\n  ([f m n s t] (map #(take t %) (take s (mat f m n))))\n  ([f m n]\n    (let [it (fn it [f x] (lazy-seq (cons x (it f (f x)))))\n          gen  (map #(it (fn [[row col]] [row (inc col)]) [% n]) (it inc m))]\n      (map (fn [row] (map (fn [item] (apply f item)) row)) gen))))", "problem": 168, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn inf\n  ([f] (inf f 0 0))\n\n  ([f row col]\n  (let [lazy-col (fn lazy-col [col]\n                   (lazy-seq (cons (f row col) (lazy-col (inc col)))))]\n    (lazy-seq (cons (lazy-col col) (inf f (inc row) col)))))\n  ([f row col trow tcol]\n    (take trow (map #(take tcol %) (inf f row col)))))", "problem": 168, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn infmat\n                               ([f] (infmat f 0 0 nil nil))\n                               ([f m n] (infmat f m n nil nil))\n                               ([f m n s t]\n                                  (letfn [(row [x y max]\n                                            (lazy-seq\n                                             (cons (f x y)\n                                                   (if (or (nil? max) (< y max))\n                                                     (row x (inc y) max)\n                                                     nil))))\n                                          (col [x max]\n                                            (lazy-seq\n                                             (cons (row x n (and t (+ n t -1)))\n                                                   (if (or (nil? max) (< x max))\n                                                     (col (inc x) max)\n                                                     nil))))]\n                                    (col m (and s (+ m s -1))))))", "problem": 168, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn mat\n  ([f] (mat f 0 0))\n  ([f m n]\n    (letfn [(itera [i j] (lazy-seq (cons (iterb i j) (itera (inc i) j))))\n            (iterb [i j] (lazy-seq (cons (f i j)     (iterb i (inc j)))))]\n      (itera m n)))\n  ([f m n s t] (take s (map (partial take t) (mat f m n)))))", "problem": 168, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(letfn [(row [f i j]\n          (lazy-seq (cons (f i j) (row f i (+ j 1)))))]\n(fn mtx\n  ([f] (mtx f 0 0))\n  ([f m n] (lazy-seq (cons (row f m n) (mtx f (+ m 1) n))))\n  ([f m n s t] (take s (map #(take t %) (mtx f m n))))))", "problem": 168, "user": "4fb1d907e4b081705acca282"}, {"code": "(let [ints-from\n        (fn ints-from [n]\n          (cons n (lazy-seq (ints-from (inc n)))))]\n(fn answer\n  ([f] \n    (answer f 0 0 ))\n  ([f m n] \n    (map (fn [p]\n            (map (partial f p) (ints-from  n)))\n         (ints-from m)))\n  ([f m n s t]\n    (let [B (answer f m n)]\n      (take s (map (partial take t) B))))))", "problem": 168, "user": "4daea889edd6309eace4d15b"}, {"code": "(letfn \n  [ (f [o x lx y ly]\n      (when (not= 0 lx) \n        (lazy-seq \n          (cons \n            (g o x y ly) \n            (f o (inc x) (dec lx) y ly)))))\n    (g [o x y ly] \n      (when (not= 0 ly) \n        (lazy-seq \n          (cons \n            (o x y) \n            (g o x (inc y) (dec ly))))))]\n  (fn \n    ([o]            (f o 0 -1 0 -1))\n    ([o x y]        (f o x -1 y -1))\n    ([o x y lx ly]  (f o x lx y ly))))", "problem": 168, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn im ([f] (im f 0 0))\n  ([f m n] (im f m n nil nil))\n  ([f m n s t]\n    (letfn [\n      (nums-inf [i] (lazy-seq (cons i (nums-inf (inc i)))))\n      (nums-lim [a b] (if (zero? b) '() (lazy-seq (cons a (nums-lim (inc a) (dec b))))))\n      (nums [a b] (if (nil? b) (nums-inf a) (nums-lim a b)))\n      (row [v] (map (partial f v) (nums n t)))\n    ] (map row (nums m s)))))", "problem": 168, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn matrix\n  ([f m n]\n    (letfn [(step [g i] (lazy-seq (cons (g i) (step g (inc i)))))]\n      (step #(step (partial f %) n) m)))\n  ([f] (matrix f 0 0))\n  ([f m n s t] (take s (map #(take t %) (matrix f m n)))))", "problem": 168, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(fn im\n  ([f]\n     (im f 0 0))\n  ([f x y]\n     (let [g (fn g [f y] (lazy-seq (cons (f x y) (g f (inc y)))))]\n       (lazy-seq\n        (cons (g f y) (im f (inc x) y)))))\n  ([f x y a b]\n     (take a (map (partial take b) (im f x y)))))", "problem": 168, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(let [r (fn g [n] (lazy-seq (cons n (g (inc n)))))\n      im (fn [f i j]\n                        (map (fn [k]\n                               (map #(f k %) (r j)))\n                             (r i)))]\n  (fn\n    ([f]\n       (im f 0 0))\n    ([f m n]\n       (im f m n))\n    ([f m n s t]\n       (take s (map #(take t %) (im f m n))))))", "problem": 168, "user": "4e823ed7535db62dc21a62c7"}, {"code": "(fn g \n  ([f m n s t] (map #(take t %) (take s (g f m n))))\n  ([f m n] (let [cols (fn A [x y] (cons (f y x) (lazy-seq (A (inc x) y))))\n             rows (fn B [y] (cons (lazy-seq (cols n y)) (lazy-seq (B (inc y)))))]\n         (lazy-seq (rows m))))\n  ([f] (g f 0 0)))", "problem": 168, "user": "4fa30027e4b081705acca187"}, {"code": "(fn q168\n  ([f] (q168 f 0 0))\n  ([f m n] (q168 f m n nil nil))\n  ([f m n s t]\n    (letfn [\n            (col [r c]\n              (if (and (not (nil? t)) (<= t (- c n))) nil\n                (lazy-seq (cons (f r c) (col r (inc c))))))\n            \n            (row [r]\n              (if (and (not (nil? s)) (<= s (- r m))) nil\n                (lazy-seq (cons (col r n) (row (inc r))))))\n            ]\n      (row m))))", "problem": 168, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [f & args]\n  (let [[m n s t] args\n        rng (fn rng [& args]\n               (let [[mn cnt] args, mn (or mn 0)]\n                 (cons mn (lazy-seq (if (= 1 cnt)\n                                      nil\n                                      (rng (inc mn) (and cnt (dec cnt))))))))\n        row (fn [rownum] (map #(f rownum %) (rng n t)))\n        ]\n    (map row (rng m s))))", "problem": 168, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": ";; is there some clever way of doing this without reimplementing\n;; range?  Well, I'll think about it later.\n(letfn [(nums-above [n] (lazy-seq (cons n (nums-above (inc n)))))]\n  (fn infmat \n    ([f i j] (map #(map (partial f %) (nums-above j)) (nums-above i)))\n    ([f] (infmat f 0 0))\n    ([f i j m n] (take m (map #(take n %) (infmat f i j))))))", "problem": 168, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn __                                                                                                                                                                                                         \n  ([f] (__ f 0 0))                                                                                                                                                                                                \n  ([f m n] (__ f m n Double/NaN Double/NaN))                                                                                                                                                                      \n  ([f m n m-cnt n-cnt]                                                                                                                                                                                            \n     (letfn [(rng [x cnt]                                                                                                                                                                                         \n               (if (= cnt 0)                                                                                                                                                                                      \n                 ()                                                                                                                                                                                               \n                 (lazy-seq (cons x (rng (inc x) (dec cnt))))))]                                                                                                                                                   \n       (map (fn [m]                                                                                                                                                                                               \n              (map (partial f m) (rng n n-cnt)))                                                                                                                                                                  \n            (rng m m-cnt)))))", "problem": 168, "user": "4f42c80ae4b0d7d3c9f3fd0f"}, {"code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n]\n    (lazy-seq\n      (cons (lazy-seq (cons (f m n)\n                      (first (matrix f m (inc n)))))\n            (matrix f (inc m) n))))\n  ([f m n s t]\n    (map #(take t %)\n          (take s (matrix f m n)))))", "problem": 168, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(let [\n    prod #(reductions + 0 (repeatedly (fn [] 1)))\n    crop (fn [n s] (if (> n 0) (recur (dec n) (rest s)) s))\n    base (fn [] (map #(map (partial vector %) (prod)) (prod)))\n    mmap (fn [m f] (map #(map (partial apply f) %) m))]\n  (fn matrix \n    ([f] (mmap (base) f))\n    ([f m n] (mmap (crop m (map #(crop n %) (base))) f))\n    ([f m n s t] (take s (map #(take t %) (matrix f m n))))))", "problem": 168, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn g ([f] (g f 0 0))\r\n  ([f m n] ((fn c [i] (lazy-seq (cons \r\n    ((fn r [j] (lazy-seq (cons (f i j) (r (inc j))))) n)\r\n    (c (inc i))))) m))\r\n  ([f m n s t] (take s (map #(take t %) (g f m n)))))", "problem": 168, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(letfn [(ran [a b] (if (= a b) () (cons a (lazy-seq (ran (inc a) b)))))]\r\n         (fn inf \r\n           ([f] (inf f 0 0 -1 -1))\r\n           ([f m n] (inf f m n (- -1 m) (- -1 n)))\r\n           ([f m n s t] (map (fn [rowindex] (map #(f rowindex %) (ran n (+ n t)))) (ran m (+ m s))))\r\n           ))", "problem": 168, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(letfn [(i ([n] (lazy-seq (cons n (i (+ n 1))))) ([] (i 0)))\n        (d [n c] (if (pos? n) (recur (- n 1) (rest c)) c))]\n  (fn g\n    ([f] (map (fn [r] (map #(f r %) (i))) (i)))\n    ([f m n] (->> (g f) (d m) (map #(d n %))))\n    ([f m n s t] (->> (g f m n) (take s) (map #(take t %))))))", "problem": 168, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn [f & [strow stcol tkrows tkcols]]\n  (letfn [(lzrow [fun r sc]\n            (lazy-seq (cons (fun r sc)\n                            (lzrow fun r (inc sc)))))\n          (lzmat [fun srow scol]\n            (lazy-seq\n              (cons (lzrow fun srow scol)\n                    (lzmat fun (inc srow) scol))))]\n     (cond (= strow nil)  (lzmat f 0 0)\n           (= tkrows nil) (lzmat f strow stcol)\n           :else\n              (take tkrows\n                    (map #(take tkcols %)\n                         (lzmat f strow stcol))))))", "problem": 168, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn r\n  ([f m n]\n    (lazy-seq\n      (cons ((fn s [n]\n              (lazy-seq\n                (cons (f m n)\n                      (s (inc n)))))\n             n)\n            (r f (inc m) n))))\n  ([f] (r f 0 0))\n  ([f m n s t]\n    (take s (map #(take t %)\n                 (r f m n)))))", "problem": 168, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn x\r\n  ([f m n]\r\n    (lazy-seq\r\n      (cons ((fn w [n]\r\n               (lazy-seq\r\n                 (cons (f m n)\r\n                   (w (+ 1 n)))))\r\n             n)\r\n            (x f (+ 1 m) n))))\r\n  ([f]\r\n    (x f 0 0))\r\n  ([f m n s t]\r\n    (take s (map #(take t %)\r\n                 (x f m n)))))", "problem": 168, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn infmat\r\n  ([f m n]\r\n     (letfn [(inc-seq [n] (cons n (lazy-seq (inc-seq (+ n 1))))),\r\n             (row [M] (map #(f M %) (inc-seq n)))]\r\n       (map #(row %) (inc-seq m))))\r\n  ([f]\r\n     (infmat f 0 0))\r\n  ([f m n s t]\r\n     (map #(take t %) (take s (infmat f m n)))))", "problem": 168, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn imatrix\n    ([f] (imatrix f 0 0))\n    ([f m n] (let [lrow (fn doit [a b] (lazy-seq (cons (f a b) (doit a (inc b)))))] (lazy-seq (cons (lrow m n) (imatrix f (inc m) n)))))\n    ([f m n s t] (take s (map #(take t %) (imatrix f m n)))))", "problem": 168, "user": "4f0e995e535d0136e6c22326"}, {"code": "(letfn \n  [(my-iterate [f x] (lazy-seq (cons (f x) (my-iterate f (inc x)))))]\n  (fn infinite-matrix\n    ([f] (infinite-matrix f 0 0))\n    ([f m n]\n      (my-iterate\n        (fn [z] (my-iterate (partial f z) n))\n        m))\n    ([f m n s t]\n      (map #(take t %) (take s (infinite-matrix f m n))))))", "problem": 168, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn lazy-matrix4\n  ([f] (lazy-matrix4 f 0 0))\n  ([f m n s t] (take s (map #(take t %) (lazy-matrix4 f m n))))\n  ([f m n] (letfn [(row [f y x] (lazy-seq (cons (f y x) (row f y (inc x)))))\n    (col [y] (lazy-seq (cons (row f y n) (col (inc y)))))]\n  \t  (col m))))", "problem": 168, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn __\n    ([f] (__ f 0))\n    ([f y] (__ f 0 y))\n    ([f x y] (__ f x y [nil nil]))\n    ([f x y xl yl] (__ f x y [(+ x xl) (+ y yl)]))\n    ([f x y [xl yl]]\n     (letfn [(column\n               ([f x y yl]\n                (lazy-seq\n                  (when (or (nil? yl) (< y yl)) \n                    (cons (f x y)\n                          (column f x (inc y) yl))))))]\n       (lazy-seq\n         (when (or (nil? xl) (< x xl)) \n           (cons (column f x y yl)\n                 (__ f (inc x) y [xl yl])))))))", "problem": 168, "user": "4dc537fd535d8a4b2fd74282"}, {"code": "(fn inf-matrix\n  ([f]\n     (inf-matrix f 0 0))\n  ([f m n]\n     (let [repeat0 (fn repeat0 [] (lazy-seq (cons 0 (repeat0))))\n           make-row (fn [i]\n                      (map-indexed (fn [idx _]\n                                     (f i (+ n idx)))\n                                   (repeat0)))]\n       (map-indexed (fn [idx _]\n                      (make-row (+ m idx)))\n                    (repeat0))))\n  ([f m n s t]\n     (take s (map #(take t %) (inf-matrix f m n)))))", "problem": 168, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn mx\n  ([f] (mx f 0 0))\n  ([f a b] \n    (letfn [(get-row [f i j] (lazy-seq (cons (f i j) (get-row f i (inc j)))))\n            (get-m [f i j] (lazy-seq (cons (get-row f i j) (get-m f (inc i) j))))]\n      (get-m f a b)))\n  ([f a b c d] (take c (map #(take d %) (mx f a b)))))", "problem": 168, "user": "5003ee7de4b0678c553fc446"}, {"code": "(letfn [(row [f i j]\r\n            (lazy-seq (cons (f i j) (row f i (inc j)))))\r\n          (col [f i j]\r\n            (lazy-seq (cons (row f i j) (col f (inc i) j))\r\n              ))]\r\n    (fn ([f] (col f 0 0))\r\n      ([f m n] (col f m n))\r\n      ([f m n s t] (take s (map #(take t %) (col f m n))))\r\n      ))", "problem": 168, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(let [mri (fn mri [f i] (lazy-seq (cons (f i) (mri f (inc i)))))]\n  (fn matrix\n    ([f] (matrix f 0 0))\n    ([f m n] (mri (fn [y] (mri (fn [x] (f y x)) n)) m))\n    ([f m n s t] (take s (map #(take t %) (matrix f m n))))))", "problem": 168, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(letfn [(r ([a] (lazy-seq (cons a (r (inc a)))))\n           ([a b] (take b (r a))))\n        (g [f a b] (map (fn [i] (map (fn [j] (f i j)) b)) a))]\n  (fn\n    ([f] (g f (r 0) (r 0)))\n    ([f m n] (g f (r m) (r n)))\n    ([f m n s t] (g f (r m s) (r n t)))))", "problem": 168, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn g ([f] (g f 0 0))\n      ([f m n] (lazy-seq\n                 (cons ((fn r [n] (lazy-seq (cons (f m n) (r (inc n))))) n)\n                       (g f (inc m) n))))\n      ([f m n s t] (map #(take t %) (take s (g f m n)))))", "problem": 168, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn p\n    ([f]\n     (p f 0 0))\n\n    ([f m n]\n    (letfn [(i [s] (cons s (lazy-seq (i (inc s))))) \n          (r [s t] (map #(f s %) (i t)))]\n         (lazy-seq conj [] (map #(r % n) (i m)))))\n    ([f m n s t]\n        (take s (map #(take t %) (p f m n)))))", "problem": 168, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(letfn [(mrange [f]\n                  (letfn [(r [i]\n                             (lazy-seq\n                               (cons (f i) (r (inc i)))))] \n                         (r 0)))\n          (mdrop [n s]\n              (if (zero? n)\n                s\n                (mdrop (dec n) (rest s))))\n          (infi \n            ([f]\n              (infi f 0 0))\n            ([f m n] \n              (map \n                (fn [j] (mdrop n (mrange (partial f j))) ) \n                (mdrop m (mrange identity))))\n            ([f m n s t] \n              (map \n                (fn [j] (take t (mdrop n (mrange (partial f j)))) ) \n                (take s (mdrop m (mrange identity)))))\n            )]\n         infi)", "problem": 168, "user": "4dca8b6d535d5973398f9288"}, {"code": "(fn [f & args]\n  (let [[m n s t] args]\n    ((fn r [i]\n       (if (or (nil? s) (< i (+ m s)))\n           (lazy-seq\n             (cons ((fn c [j]\n                      (if (or (nil? t) (< j (+ n t)))\n                          (lazy-seq (cons (f i j) (c (inc j))))\n                          ()))\n                    (if (nil? n) 0 n))\n                   (r (inc i))))\n           ()))\n     (if (nil? m) 0 m))))", "problem": 168, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn infmat\n  ([f] (infmat f 0 0))\n  ([f m n] (letfn [(row [f m n] (lazy-seq (cons (f m n) (row f m (inc n)))))]\n             (lazy-seq (cons (row f m n) (infmat f (inc m) n)))))\n  ([f m n s t] (take s (map #(take t %) (infmat f m n)))))", "problem": 168, "user": "500900dee4b0144d4f561e42"}, {"code": ";; FIXME: 'map' is not banned :P\n(fn infinite-matrix\n  ([f m n s t] (let [row-limit (when s (+ m s))\n                     col-limit (when t (+ n t))]\n                 (letfn [(lazy-row [f row col]\n                           (when-not (= col-limit col)\n                             (lazy-cat [(f row col)] (lazy-row f row (inc col)))))\n                         (lazy-col [f row]\n                           (when-not (= row-limit row)\n                             (cons (lazy-row f row n) (lazy-seq (lazy-col f (inc row))))))]\n                   (lazy-seq (lazy-col f m)))))\n  ([f m n] (infinite-matrix f m n nil nil))\n  ([f] (infinite-matrix f 0 0)))", "problem": 168, "user": "4dc0ff08535d020aff1edf84"}, {"code": "(fn inf-matrix\n  ([f m n]\n    (letfn [(next-j [i j] (lazy-seq (cons (f i j) (next-j i (inc j)))))\n            (next-i [i] (lazy-seq (cons (next-j i n) (next-i (inc i)))))]\n           (next-i m)))\n  ([f]\n    (inf-matrix f 0 0))\n  ([f m n s t]\n    (take s (map #(take t %) (inf-matrix f m n)))))", "problem": 168, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn inf-matrix \n  ([f m n cnt-m  cnt-n]\n  (letfn [\n      (c1 \n        ( [f m n ] (lazy-seq (cons (f m n) (c1 f m (inc n)))))\n        ( [f m n cnt] (take cnt (c1 f m n)))\n        )\n      (c2 [f m n cnt-n] (lazy-seq (cons (c1 f m n cnt-n) (c2 f (inc m) n cnt-n))))\n      ]   (take cnt-m (c2 f m n cnt-n))\n    ))\n  ([f m n]\n    (letfn [\n      (c1 [f m n ] (lazy-seq (cons (f m n) (c1 f m (inc n)))))\n      ]  (lazy-seq (cons (c1 f m n) (inf-matrix f (inc m) n )))\n    ))\n  ([f]\n    (inf-matrix f 0 0)\n  ))", "problem": 168, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn matrix\n    ([f]\n     (let [r (fn r [n] (lazy-seq (cons n (r (inc n)))))]\n       (map #(map (partial f %) (r 0))\n            (r 0))))\n    ([f m n]\n     (let [d (fn [n coll]\n               (let [step (fn [n coll]\n                            (let [s (seq coll)]\n                              (if (and (pos? n) s)\n                                (recur (dec n) (rest s))\n                                s)))]\n                 (lazy-seq (step n coll))))]\n       (d m (map #(d n %) (matrix f)))))\n    ([f m n s t]\n      (take s (map #(take t %) (matrix f m n)))))", "problem": 168, "user": "4db1b3951254ad5b4805fa6f"}, {"code": "(fn infmat\r\n  ([f] (infmat f 0 0))\r\n  ([f m n s t] (take s (map #(take t %) (infmat f m n))))\r\n  ([f m n] (lazy-seq (cons\r\n    ((fn row [c] (lazy-seq (cons (f m c) (row (inc c))))) n)\r\n    (infmat f (inc m) n)))))", "problem": 168, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn fnmx\n  ([f m n s t]\n     (letfn [(rows [i]\n               (if (= i s)\n                 '()\n                 (lazy-seq (cons (cells i 0) (rows (inc i))))))\n             (cells [i j]\n               (if (= j t)\n                 '()\n                 (lazy-seq (cons (f (+ i m) (+ j n)) (cells i (inc j))))))]\n       (rows 0)))\n  ([f m n]\n     (fnmx f m n nil nil))\n  ([f]\n     (fnmx f 0 0)))", "problem": 168, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(letfn [(genRow [f x y] (lazy-seq (cons (f y x) (genRow f (inc x) y))))\r\n        (genCol [f x y] (lazy-seq (cons (genRow f x y) (genCol f x (inc y)))))]\r\n  (fn ([f] (genCol f 0 0))\r\n      ([f m n] (genCol f n m))\r\n      ([f m n s t] (take s (map #(take t %) (genCol f n m)))))\r\n)", "problem": 168, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn ifm\n    ([f] (ifm f 0 0))\n    ([f m n] (letfn [(rw [f m n] (lazy-seq (cons (f m n) (rw f m (inc n)))))]\n               (lazy-seq (cons (rw f m n) (ifm f (inc m) n)))))\n    ([f m n s t] (take s (map #(take t %) (ifm f m n)))))", "problem": 168, "user": "4efd8b67535de96065cf5085"}, {"code": "(fn g [h & [k2 l2 m n]] \n    \n         (let [f (fn f [h k l] (lazy-cat [(h k l)] (f h k (inc l))))\n               k (if k2 k2 0)\n               l (if l2 l2 0)\n               ]\n           (let [s  (lazy-cat [(f h k l)] (g h (inc k) l))]\n             (if (and m n)\n             (take m (map #(take n %) s))\n                   s)\n                 )))", "problem": 168, "user": "503917a0e4b088a6a14ca763"}, {"code": "(letfn [(i [x] (cons x (lazy-seq (i (+ 1 x)))))]\r\n  (fn z ([f] (z f 0 0))\r\n        ([f m n s t]\r\n          (take s\r\n            (map #(take t %) (z f m n))))\r\n        ([f m n]\r\n      (map\r\n\t     (fn [m] (map #(f m %) (i n)))\r\n\t     (i m)))))", "problem": 168, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn mat [f & args]\r\n  (let [cols  (fn cols [i j]\r\n               (lazy-seq\r\n                 (cons (f i j)\r\n                       (cols i (inc j)))))\r\n        rows   (fn rows [i j]\r\n                (lazy-seq\r\n                 (cons (cols i j)\r\n                       (rows (inc i) j))))\r\n        mps    (fn mps ([] (rows 0 0))\r\n                       ([m n] (rows m n))\r\n                       ([m n s t]\r\n                         (take s (map #(take t %) (rows m n))))\r\n                         \r\n               )\r\n        ]\r\n    (apply mps args)) )", "problem": 168, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(letfn [(rpt [n] (lazy-seq (cons n (rpt n))))\r\n  (rang [n] (reductions + n (rpt 1)))]\r\n  (fn mat\r\n    ([f] (mat f 0 0))\r\n    ([f m n]\r\n      (map #(map f (rpt %) (rang n)) (rang m)))\r\n    ([f m n s t]\r\n      (take s (map #(take t %) (mat f m n))))))", "problem": 168, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn inf-matrix\n    ([f] (inf-matrix f 0 0))\n    ([f m n] (inf-matrix f m n nil nil)) ; i,j == f(i+m, j+n)\n    ([f m n s t]                    ; i,j == f(i+m, j+n), finite size (s, t)\n       ;; This is probably cheating...\n       (letfn [(my-iterate [f x] (cons x (lazy-seq (my-iterate f (f x)))))]\n         (let [matrix (map\n                       (fn [row-index]\n                         (let [row (map #(f (+ row-index m) (+ % n)) (my-iterate inc 0))]\n                           (if t\n                             (take t row)\n                             row)))\n                       (my-iterate inc 0))]\n           (if s\n             (take s matrix)\n             matrix)))))", "problem": 168, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn __\n  ([f] (__ f 0 0))\n  ([f m n]\n    (let [my-range (fn my-range [x] (lazy-seq (cons x (my-range (inc x)))))]\n      (lazy-seq (cons (map #(f m %) (my-range n)) (__ f (inc m) n)))))\n  ([f m n s t] (take s (map #(take t %) (__ f m n))))\n)", "problem": 168, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn mat\r\n  ([f](mat f 0 0))\r\n  ([f m n]\r\n   (letfn [(it [x] (cons x (lazy-seq (it (inc x)))))]\r\n     (map #(map (partial f %) (it n)) (it m))))\r\n  ([f m n s t](take s (map #(take t %) (mat f m n)))))", "problem": 168, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(letfn [(nat [i] (lazy-cat [i] (nat (inc i))))]\n(fn  mx ([f] (mx f 0 0))\n         ([f a b]  (map (fn [n] (map (partial f n) (nat b))) (nat a))) \n         ([f a b c d] (take c (map #(take d %) (mx f a b))))))", "problem": 168, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn [f & [m n s t]]\n  (letfn [(ih [x] (if x x 0))\n          (th [x,s] (if x (take x s) s))\n          (r [x,y] (lazy-seq (cons (f x y) (r x (inc y)))))\n          (c [x] (lazy-seq (cons (r x (ih n)) (c (inc x)))))]\n    (th s (map #(th t %) (c (ih m))))))", "problem": 168, "user": "504e04a4e4b078edc5f59397"}, {"code": "(letfn [(red-pill [f x y]\n          (lazy-seq (cons (f x y)\n                          (red-pill f x (inc y)))))\n        (blue-pill [f x y-start]\n          (lazy-seq (cons (red-pill f x y-start)\n                          (blue-pill f (inc x) y-start))))\n        (matrix\n          ([f] (blue-pill f 0 0))\n          ([f m n] (blue-pill f m n))\n          ([f m n s t] (take s (map #(take t %) (blue-pill f m n)))))]\n  matrix)", "problem": 168, "user": "5014754de4b094324338f8e5"}, {"code": "(fn [r f & [m n s t]]\n  (map #(map (fn [x] (f % x)) (r n t)) (r m s)))\n(fn tmatrix [a b]\n  ({0 ()} b\n   (lazy-cat [(or a 0)]\n             (tmatrix (+ (or a 0) 1) (- (or b 0) 1)))))", "problem": 168, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "(fn\r\n  big-mat\r\n  ([f] (big-mat f 0 0))\r\n\r\n  ;; The primary implementation\r\n  ([f m n]\r\n     (letfn [(rowfn [row col]\r\n               (lazy-seq\r\n                (cons (f row col)\r\n                      (rowfn row (inc col)))))]\r\n       (lazy-seq\r\n        (cons (rowfn m n)\r\n              (big-mat f (inc m) n)))))\r\n  \r\n  ([f m n s t]\r\n     (take s (map #(take t %) (big-mat f m n)) )))", "problem": 168, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn im \n  ([f]\n    (im f 0 0))\n  ([f m n]\n    (letfn [(row [i j]\n              (lazy-seq (cons (f i j) (row i (inc j)))))]\n      (lazy-seq (cons (row m n) (im f (inc m) n))))) \n  ([f m n s t]\n    (map (partial take t) (take s (im f m n)))))", "problem": 168, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn d\n  ([c f] (c f 0 0))\n  ([c f m n] (c f m n))\n  ([c f m n s t] (take s (map #(take t %) (c f m n)))))\n\n(fn c [f m n]\n  (letfn [(r [f k n]\n          (lazy-seq (cons (apply f [k n]) (r f k (inc n)))))]\n  (lazy-seq (cons (r f m n) (c f (inc m) n)))))", "problem": 168, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn [f & [m n s t]]\r\n  (letfn [(cols [i j & [y]]\r\n            (lazy-seq \r\n              (cons (f i j)\r\n                (when-let [y (cond (nil? t) 0 (pos? y) y)]\r\n                  (cols i (inc j) (dec y))))))\r\n          (rows [i j & [x y]]\r\n            (lazy-seq \r\n              (cons (cols i j y)\r\n                (when-let [x (cond (nil? s) 0 (pos? x) x)]\r\n                  (rows (inc i) j (dec x) y)))))]\r\n    (cond (nil? m) (rows 0 0)\r\n          (nil? s) (rows m n)\r\n          :else (rows m n (dec s) (dec t)))))", "problem": 168, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn infinite-matrix\n  ([f]\n    (letfn [\n          (unfold [f x] (lazy-seq\n            (when-let [[item nextx] (f x)]\n                (cons item (unfold f nextx))\n            )))\n          (rng [] (unfold (fn [n] [n (inc n)]) 0))\n        ]\n      (map (fn [i] (map (fn[j] (f i j)) (rng))) (rng))\n    ))\n  ([f m n]\n    (let [drp (comp second split-at)]\n      (->> (drp m (infinite-matrix f))\n           (map #(drp n %)))))\n  ([f m n s t]\n    (->> (take s (infinite-matrix f m n))\n         (map #(take t %))))\n)", "problem": 168, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn mat\n  ([f] (mat f 0 0))\n  ([f m n] (let [r (fn r [f n] (lazy-seq (cons (f n) (lazy-seq (r f (inc n))))))]\n             (lazy-seq (cons (r (partial f m) n) (lazy-seq (mat f (inc m) n))))))\n  ([f m n s t] (take s (map #(take t %) (mat f m n)))))", "problem": 168, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(letfn [(repeat' [x]      (lazy-seq (cons x (repeat' x))))\n        (range'  []       (map-indexed (fn [i _] i) (repeat' 0)))\n        (drop'   [n coll] (second (split-at n coll)))]\n  (fn infinite-matrix\n    ([f]         (map (fn [i] (map #(f i %) (range'))) (range')))\n    ([f m n]     (->> (infinite-matrix f)     (drop' m) (map #(drop' n %))))\n    ([f m n s t] (->> (infinite-matrix f m n) (take  s) (map #(take  t %))))))", "problem": 168, "user": "50586354e4b06522596eba78"}, {"code": "(fn infmat\n  ([f] (infmat f 0 0))\n  ([f m n]\n     (letfn [(cells [n]\n               (lazy-seq\n                 (cons (f m n)\n                       (cells (inc n)))))]\n       (lazy-seq (cons (cells n)\n                       (infmat f (inc m) n)))))\n  ([f m n s t]\n     (map #(take t %)\n          (take s (infmat f m n)))))", "problem": 168, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(letfn\n    [ (r[l] (lazy-seq (cons l (r (inc l)))))]\n  (fn ma\n    ([f]  (map (fn[a]( map (fn[b] (f a b)) (r 0)))  (r 0)))\n    ([f m n] (ma #(f (+ m %) (+ n %2))))\n    ([f m n s t] (take s (map #(take t %) (ma f m n))))\n    ))", "problem": 168, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(letfn [\n  ;; neat one\n  (l [f m n] (lazy-seq (cons (f m n) (l f m (inc n)))))\n  (neat-ll \n    ([f]\n      (neat-ll f 0 0))\n    ([f m n] \n      (lazy-seq (cons (l f m n) (neat-ll f (inc m) n))))\n    ([f m n s t] \n      (take s (map #(take t %) (neat-ll f m n)))))\n\n  ;; for fun: each self-reliant\n  (self-ll\n    ([f]\n      (lazy-seq\n        (cons\n          (lazy-seq (cons (f 0 0) (first (self-ll #(f % (inc %2))))))\n          (self-ll #(f (inc %) %2)))))\n    ([f m n] \n      (lazy-seq \n        (cons\n          (lazy-seq (cons (f m n) (first (self-ll f m (inc n)))))\n          (self-ll f (inc m) n))))\n    ([f m n s t]\n      (lazy-seq\n        (when (pos? s) \n          (cons\n            (lazy-seq\n              (when (pos? t) \n                (cons (f m n) \n                  (first (self-ll f m (inc n) s (dec t))))))\n            (self-ll f (inc m) n (dec s) t))))))\n  ]\n  neat-ll)", "problem": 168, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn infinite-matrix\n  ([f m n]\n     (let [count-from (fn counter [k] (lazy-seq (cons k (counter (inc k)))))]\n       (map (fn [i] (map #(f i %) (count-from n))) (count-from m))))\n  ([f] \n     (infinite-matrix f 0 0))\n  ([f m n s t]\n     (take s (map #(take t %) (infinite-matrix f m n)))))", "problem": 168, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn [f & args]\n  (let\n    [\n      m (nth args 0 0)\n      n (nth args 1 0)\n      s (nth args 2 nil)\n      t (nth args 3 nil)\n    ]\n    (letfn\n      [\n        (g [i]\n          (letfn\n            [\n              (h [i j]\n                (lazy-seq (cons (f i j) (if (or (nil? t) (> (dec t) (- j n))) (h i (inc j)))))\n              )\n            ]\n            (lazy-seq (cons (h i n) (if (or (nil? s) (> (dec s) (- i m))) (g (inc i)))))\n          )\n        )\n      ]\n      (g m)\n    )\n  )\n)", "problem": 168, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn infinite-matrix\n  ([f]\n\t\t(infinite-matrix f 0 0)\n\t)\n\t([f m n]\n\t\t(letfn [(genrow [f m n] (lazy-seq (cons (f m n) (lazy-seq (genrow f m (inc n))))))]\n\t\t\t(lazy-seq (cons (genrow f m n) (lazy-seq (infinite-matrix f (inc m) n))))\n\t\t)\n\t)\n\t([f m n s t]\n\t\t(take s (map #(take t %) (infinite-matrix f m n)))\n\t)\t\n)", "problem": 168, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn [f & [m n s t]] (let [h (fnil (fn f ([n max]\n                                               (take max (f n)))\n                                        ([n]\n                                           (lazy-cat\n                                            [n] (f (inc n)))))\n                                      0 Long/MAX_VALUE)]\n                   (map #(map (partial f %) (h n t)) (h m s))))", "problem": 168, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn matrices\n           ([f] (matrices f 0 0))\n           ([f n m] (letfn [(row [f n m]\n                              (lazy-seq (cons (f n m)\n                                              (row f n (inc m)))))]\n                      (lazy-seq (cons (row f n m)\n                                      (matrices f (inc n) m)))))\n           ([f n m s t]\n              (take s (map #(take t %) (matrices f n m)))))", "problem": 168, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "((fn []\n  (letfn [(my-range [i j] (if (= i j) [j] (lazy-seq (cons i (my-range (inc i) j)))))\n          (f [g x-off y-off x-cnt y-cnt]\n            (map (fn [a] (map (fn [b] (g (+ x-off a) (+ y-off b))) (my-range 0 y-cnt))) (my-range 0 x-cnt)))]\n    (fn\n      ([h] (f h 0 0 nil nil))\n      ([h x y] (f h x y nil nil))\n      ([h x y xc yc] (f h x y (dec xc) (dec yc)))))))", "problem": 168, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn inf-matrix\n  ([f] (inf-matrix f 0 0))\n  ([f a b] (letfn [(help [n]\n                     (lazy-seq\n                      (cons n (help (+ n 1)))))\n                   ]\n             (lazy-seq\n              (cons (for [y (help b)]\n                      (f a y))\n                    (inf-matrix f (inc a) b)))))\n  ([f a b c d]\n     (take c (map #(take d %)\n                  (inf-matrix f a b)))))", "problem": 168, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn __\n  ([f] (__ f 0 0))\n  ([f m n s t]\n     (take s (map #(take t %) (__ f m n))))\n  ([f m n]\n     (letfn [(r [a] (lazy-seq (cons (f m a) (lazy-seq (r (inc a))))))]\n       (lazy-seq\n        (cons (r n)\n              (lazy-seq (__ f (inc m) n)))))))", "problem": 168, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(let [z take p map c cons]\n(fn g \n  ([f] (g f 0 0))\n  ([f m n s t] (z s (p #(z t %) (g f m n))))\n  ([f m n]\n    (letfn [(l [n] (lazy-seq (c n (l (+ 1 n)))))\n            (h [x y] (lazy-seq (c (f y x) (h (+ 1 x) y))))]\n      (p #(h n %) (l m))))))", "problem": 168, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn inf-mat\n  ([f] (inf-mat f 0 0))\n  ([f m n]\n     (lazy-seq\n      (cons ((fn row [j] (lazy-seq (cons (f m j) (row (inc j))))) n)\n            (inf-mat f (inc m) n))))\n  ([f m n s t]\n     (map (partial take t)\n          (take s (inf-mat f m n)))))", "problem": 168, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn im ([f]\n  (im f 0 0))\n  ([f left right]\n    (let [row-builder (fn row-builder [f l r]\n                        (lazy-seq\n                          (cons (f l r) (row-builder f l (inc r)))))\n          matrix-builder (fn matrix-builder [f l r]\n                            (lazy-seq\n                              (cons (row-builder f l r) (matrix-builder f (inc l) r))))]\n      (matrix-builder f left right)))\n  ([f left right row column]\n    (take row (map #(take column %) (im f left right)))))", "problem": 168, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn r\n  ([f] (r f 0 0))\n  ([f m n s t] (take s (map #(take t %) (r f m n))))\n  ([f m n]\n     (let [one-row (fn a [i j] (lazy-seq (cons (f i j) (a i (inc j)))))]\n       (lazy-seq (cons (one-row m n) (r f (inc m) n))))))", "problem": 168, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(letfn [(d [n l]\r\n          (if (= n 0) l\r\n              (d (dec n) (rest l))))\r\n        (w [f]\r\n          (letfn [(gen-rows [x]\r\n                    (letfn [(gen-cols [y] (lazy-seq (cons (f x y) (gen-cols (inc y)))))]\r\n                      (lazy-seq (cons (gen-cols 0) (gen-rows (inc x))))))]\r\n            (gen-rows 0)))]\r\n  (fn ([f] (w f))\r\n      ([f m n] (map (partial d n) (d m (w f))))\r\n      ([f m n s t] (map (partial take t) (take s (map (partial d n) (d m (w f))))))))", "problem": 168, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn  im [f & cols]\r\n  (let [[m n] (if (empty? cols) [0 0] (take 2 cols))\r\n        [s t] (if (or (empty? cols)  (not= 4 (count cols) )  ) [-1 -1] (take-last 2 cols))\r\n        make-inner (fn make-inner [l c]\r\n                    (lazy-seq (cons (f l c)  (make-inner l (inc c)))))\r\n        make-outter (fn make-outter [l1 c1]\r\n                        (lazy-seq (cons (make-inner l1 c1)  (make-outter (inc l1) c1))))\r\n        ]\r\n    (if (> s 0)\r\n      (take s (map #(take t %)  (make-outter m n)  ))\r\n      (make-outter m n)\r\n      ))\r\n  )", "problem": 168, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn infini-matrix \n  ([f] \n\t\t(infini-matrix f 0 0))\n\t([f n m] \n\t\t(lazy-seq (cons \t((fn infini-row [op row-id n] \n\t\t\t\t\t\t\t\t(lazy-seq \n\t\t\t\t\t\t\t\t\t(cons (op row-id n) (infini-row op row-id (inc n))))) f n m) \n\t\t\t\t(infini-matrix f (inc n) m))))\n\t([f n m i j] \n\t\t(take i (map #(take j %) (infini-matrix f n m)))))", "problem": 168, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn infinite-matrix [f & args]\n (letfn [(inf-row [f x y]\n           (lazy-seq (cons (f x y) (inf-row f x (inc y)))))\n         (inf-col [f x y]\n           (lazy-seq (cons (inf-row f x y)\n                           (inf-col f (inc x) y))))]\n   (let [[m n s t] args]\n     (cond (and s t) (take s\n                           (map #(take t %) (infinite-matrix f m n)))\n           (and m n) (apply inf-col f args)\n           :else (inf-col f 0 0)))))", "problem": 168, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn infinite-matrix\n  ([f]\n   (lazy-seq\n     ((fn g [i]\n        (lazy-seq\n          (cons\n            ((fn h [j]\n               (lazy-seq\n                 (cons (f i j)\n                       (h (inc j)))))\n               0)\n              (g (inc i)))))\n        0)\n     ))\n  ([f m n]\n    ; Yes, you caught me, this is copied verbatim from clojure.core\n    (let [dr (fn [n coll]\n                 (let [step (fn [n coll]\n                              (let [s (seq coll)]\n                                (if (and (pos? n) s)\n                                  (recur (dec n) (rest s))\n                                  s)))]\n                   (lazy-seq (step n coll))))]\n      (map #(dr n %) (dr m (infinite-matrix f)))))\n  ([f m n s t]\n    (map #(take t %)\n         (take s\n               (infinite-matrix f m n))))\n  )", "problem": 168, "user": "504c8165e4b09724c857af31"}, {"code": "(fn infini-matrix\n  ( [f] (infini-matrix f 0 0 ))\n  ([f m n]\n     (letfn [\n             (row\n               ([j] (row j n))\n               ([j i] (lazy-seq (cons (f j i) (row j (inc i))))))\n             (mat\n               ([j] (lazy-seq (cons (row j) (mat (inc j))))))]\n       (mat m)))\n  ([f m n s t] (take s (map #(take t %) (infini-matrix f m n)) ) ))", "problem": 168, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn matrix\n  ([f m n] (letfn [(lazy-col [i j] (lazy-seq (cons (f i j) (lazy-col i (inc j)))))\n                   (lazy-row [i] (lazy-seq (cons (lazy-col i n) (lazy-row (inc i)))))]\n             (lazy-row m)))\n  ([f] (matrix f 0 0))\n  ([f m n s t] (take s (map #(take t %) (matrix f m n)))))", "problem": 168, "user": "50acbd15e4b071b89ef26234"}, {"code": "(letfn [(lazies-n[f m n] (lazy-seq (cons (f m n) (lazies-n f m (inc n)))))\n        (lazies-m[f m n] (lazy-seq (cons (lazies-n f m n) (lazies-m f (inc m) n))))]\n    (fn\n      ([f] (lazies-m f 0 0))\n      ([f m n] (lazies-m f m n))\n      ([f m n s t] (take s (map #(take t %) (lazies-m f m n))))))", "problem": 168, "user": "506406c8e4b075d771da6f9f"}, {"code": "(letfn \n  [(r [f i j]\n     (lazy-seq \n      (cons \n       (f i j) \n       (r f i (inc j)))))\n   (c\n    ([f m n]\n     (lazy-seq\n      (cons\n       (r f m n)\n       (c f (inc m) n))))\n    ([f m n t]\n     (lazy-seq\n      (cons\n       (take t (r f m n))\n       (c f (inc m) n t)))))]\n  (fn x\n    ([f m n]\n     (c f m n))\n    ([f] (x f 0 0))\n    ([f m n s t]\n     (take s (c f m n t)))))", "problem": 168, "user": "4e03c616535d04ed9115e796"}, {"code": "(letfn [(drop- [n coll]\n          (let [step (fn [n coll]\n                       (let [s (seq coll)]\n                         (if (and (pos? n) s)\n                           (recur (dec n) (rest s))\n                           s)))]\n            (lazy-seq (step n coll))))\n        (range- []\n          (let [r\n                (fn r [coll]\n                  (lazy-seq\n                   (when-let [s (seq coll)]\n                     (concat  s (r (vector (inc (last s))) )))))]\n            (r [0])))]\n  (fn matrix\n    \n    ([f]\n       (let [row (fn [f i]\n                   (fn [] (map #(f i %) (range-))))]\n         (map #((row f %)) (range-))))\n    ([f m n]\n       (drop- m (map #(drop- n %) (matrix f))))\n    ([f m n s t]\n       (take s (map #(take t %) (matrix f m n))))))", "problem": 168, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(let [F (fn i [n] (lazy-seq (cons n (i (inc n)))))]\n  (fn A\n    ([f] (A f 0 0))\n    ([f m n] (map #(map (fn [j] (f %1 j)) (F n)) (F m)))\n    ([f m n s t] (take s (map #(take t %1) (A f m n))))))", "problem": 168, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn imatrix \n  ([f m n s t] (take s (map #(take t %) (imatrix f m n))))\n  ([f] (imatrix f 0 0))\n  ([f m n] (letfn [(my-range [n] (cons n (lazy-seq (my-range (inc n)))))]\n    (map #(map (fn [a] (f % a)) (my-range n)) (my-range m)))))", "problem": 168, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn matrix\n  ([f m n]\n    (letfn [(across [i j] (lazy-seq (cons (f i j) (across i (inc j)))))\n            (down [i] (lazy-seq (cons (across i n) (lazy-seq (down (inc i))))))]\n\t  (down m)))\n  ([f m n s t] (take s (map #(take t %) (matrix f m n))))\n  ([f] (matrix f 0 0)))", "problem": 168, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(let [infcols (fn r [f i]\n                  (lazy-seq\n                   (cons (f i)                                                                                                                                       \n                         (r f (inc i)))))                                                                                                                            \n        infrows (fn r [f i j]\n                  (lazy-seq\n                   (cons (infcols (partial f i) j)                                                                                                                   \n                         (r f (inc i) j)))) ]                                                                                                                        \n    (fn ([f]                                                                                                                                                          \n          (infrows f 0 0))                                                                                                                                           \n      ([f m n]                                                                                                                                                       \n         (infrows f m n))                                                                                                                                            \n      ([f m n s t]                                                                                                                                                   \n         (take s (map (partial take t) (infrows f m n))))))", "problem": 168, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn mat\n  ([f](mat f 0 0))\n  ([f m n]\n   (letfn [(it [x] (cons x (lazy-seq (it (inc x)))))]\n     (map #(map (partial f %) (it n)) (it m))))\n  ([f m n s t](take s (map #(take t %) (mat f m n)))))", "problem": 168, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn I\n  ([f]\n     (I f 0 0))\n  ([f m n]\n     (lazy-seq\n      (cons\n       (lazy-seq (cons (f m n) (first (I f m (+ 1 n)))))\n       (I f (+ 1 m) n))))\n  ([f m n s t] ;; first t columns and s first rows from (I f m n)\n     (->> (I f m n)\n          (map #(take t %))\n          (take s))))", "problem": 168, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn infinite-matrix \n  ([f]\n    (infinite-matrix  f 0 0  ))\n  ([f m n]\n    (letfn [(infinite-row [n f]\n                          (lazy-seq  (cons (f n) (lazy-seq (infinite-row (inc n) f)))))]\n           (lazy-seq (cons (infinite-row n (partial f m)) (lazy-seq (infinite-matrix  f (inc m) n ))))))\n  ([f m n s t ]\n    (letfn [(infinite-row [n f]\n                          (lazy-seq  (cons (f n) (lazy-seq (infinite-row (inc n) f)))))]\n    (lazy-seq (take s (cons (take t (infinite-row n (partial f m))) (lazy-seq (infinite-matrix  f (inc m) n (dec s) t))))))))", "problem": 168, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(let [d (fn [n l]\n          (if (= n 0)\n            l\n            (recur (dec n)(rest l))))\n      r (fn r [n]\n          (lazy-seq (cons n (r (inc n)))))]\n  (fn i ([f]\n         (map #(map (partial f %) (r 0)) (r 0)))\n        ([f m n]\n         (map #(map (partial f %) (r n)) (r m)))\n        ([f m n s t]\n         (take s (map #(take t %)(i f m n))))))", "problem": 168, "user": "50a83315e4b054305ba5a830"}, {"code": "(letfn [(myiter [f v] (lazy-seq (cons v (myiter f (f v)))))\n        (myrange [] (myiter inc 0))\n        (mydrop [n coll]\n          (loop [lft n\n                 rst coll]\n            (if (zero? lft)\n              rst\n              (recur (dec lft) (rest rst)))))\n        (myrepeat [x]\n          (lazy-seq (cons x (myrepeat x))))]\n  (fn infm\n    ([f] (infm f 0 0))\n    ([f m n s t] (take s (map #(take t %) (infm f m n))))\n    ([f m n]\n       (map (fn [i]\n              (map (fn [j]\n                     (f i j))\n                   (mydrop n (myrange))))\n            (mydrop m (myrange))))))", "problem": 168, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn r\n  ([f] (r f 0 0))\n  ([f m n s t] (take s (map #(take t %) (r f m n))))\n  ([f m n] (lazy-seq\n            (cons (lazy-seq\n                   (cons (f m n)\n                         (first (r f m (inc n)))))\n                  (r f (inc m) n)))))", "problem": 168, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn im\n    ([f]\n       (im f 0 0))\n    ([f m n]\n       (let [row (fn row [f i j]\n                   (lazy-seq\n                    (cons\n                     (f i j)\n                     (row f i (inc j)))))\n             matrix (fn matrix[f i j]\n                      (lazy-seq\n                       (cons\n                        (row f i j)\n                        (matrix f (inc i) j))))]\n         (matrix f m n)))\n    ([f m n s t]\n       (take s (map #(take t %) (im f m n)))))", "problem": 168, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn infi\n  ([f] (infi f 0 0))\n  ([f m n]\n   (let [gen (fn ![x] (lazy-seq (cons x (! (inc x)))))\n         cop (fn ![x] (lazy-seq (cons x (! x))))]\n   (map #(map (fn [a b] (f a b)) (cop %) (gen n)) (gen m))))\n  ([f m n s t] (map #(take t %) (take s (infi f m n)))))", "problem": 168, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn z\n ([f] (z f 0 0))\n ([f m n s t] (take s (map #(take t %) (z f m n))))\n ([f m n]\n  (letfn [(r [i] (cons i (lazy-seq (r (inc i)) )))]\n     (map  (fn [i] (map #(f i %) (r n))) (r m))))\n)", "problem": 168, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn infimatrix\n  ([f] (infimatrix f 0 0))\n  ([f m n]\n     (let [ints-from (fn all-ints [j] (cons j (lazy-seq (all-ints (inc j)))))]\n       (map (fn [r] (map (partial f r) (ints-from n))) (ints-from m))))\n  ([f m n s t]\n     (map #(take t %) (take s (infimatrix f m n)))))", "problem": 168, "user": "506b40ade4b0eda3100c0905"}, {"code": "(fn [& args]\n  (letfn [(lazy-row [f i j] (lazy-seq (cons (lazy-cell f i j) (lazy-row f (inc i) j))))\n          (lazy-cell [f i j] (lazy-seq (cons (f i j) (lazy-cell f i (inc j)))))]\n    (apply (fn\n             ([f] (lazy-row f 0 0))\n             ([f m n] (lazy-row f m n))\n             ([f m n s t] (take s (map #(take t %) (lazy-row f m n))))) args)))", "problem": 168, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn mtrx [f & more]\n  (letfn [(inf-matrix-row [i j f]\n            (cons (f i j) (lazy-seq (inf-matrix-row i (inc j) f))))\n          (inf-matrix-rec [i j f]\n            (cons (lazy-seq (inf-matrix-row i j f)) (lazy-seq (inf-matrix-rec (inc i) j f))))\n          (inf-matrix [i j f]\n            (lazy-seq (inf-matrix-rec i j f)))]\n    (case (count more)\n      0 (inf-matrix 0 0 f)\n      2 (let [[m n] more]\n          (inf-matrix m n f))\n      4 (let [[m n s t] more\n              matrix (inf-matrix m n f)]\n          (->> matrix (map #(take t %)) (take s))))))", "problem": 168, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn infinite-matrix\n  ([f m n]\n   (let [row (fn row [i j]\n              (lazy-seq (cons (f i j) (lazy-seq (row i (inc j))))))]\n   (lazy-seq (cons (row m n)\n         (lazy-seq (infinite-matrix f (inc m) n))))))\n  ([f] (infinite-matrix f 0 0))\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))))", "problem": 168, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn [f & [m n s t]]\n  (let [m (or m 0) n (or n 0) s (or s 1500) t (or t 1500)\n        r (fn r [a b] (if (>= a b) () (lazy-seq (cons a (r (inc a) b)))))] \n    (map #(map (partial f %) (r n (+ n t))) (r m (+ m s)))))", "problem": 168, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn inf\n  ([f] (inf f 0 0))\n  ([f, m, n] (letfn [(lazy-row [i, j]\n                         (lazy-seq (cons (f (+ i m) (+ j n)) (lazy-seq (lazy-row i (inc j))))))\n               (lazy-col [i]\n                         (lazy-seq (cons (lazy-row i 0) (lazy-seq (lazy-col (inc i))))))]\n         (lazy-col 0)))\n  ([f, m, n, s, t]\n   (take s (map #(take t %) (inf f m n)))))", "problem": 168, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn q168a \n  ([f] (q168a f 0 0))\n  ([f x y]\n   (letfn [(gen-col [m n]\n             (lazy-seq\n               (cons (f m n) \n                     (gen-col m (inc n))\n                     ))\n             )\n           (gen-row [m]\n             (lazy-seq\n               (cons (gen-col m y)\n                     (gen-row (inc m)))))]\n     (gen-row x)\n     ))\n  ([f x y s t]\n   (take s (map #(take t %) (q168a f x y)))\n   ))", "problem": 168, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn inf-mat\n  ([f        ] (inf-mat f 0 0))\n  ([f n m    ] (inf-mat f n m :inf :inf))\n  ([f m n s t]\n  (letfn\n      [(inf-row\n         ([f i n      ] (inf-row f i (if (= :inf n) n (+ i n)) :!))\n         ([f i limit _]\n            (lazy-seq\n             (when (or (= :inf limit) (< i limit))\n               (cons (f i)\n                     (inf-row f (inc i) limit :!))))))\n\n       (row-f[r] (inf-row (partial f r) n t))]\n    (inf-row row-f m s))))", "problem": 168, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn inf-matrix\n  ([f m n] (letfn [(columns [f r c] (lazy-seq (cons (f r c) (columns f r (inc c)))))\n                   (rows [f r c] (lazy-seq (cons (columns f r c) (rows f (inc r) c))))]\n             (rows f m n)))\n  ([f] (inf-matrix f 0 0))\n  ([f m n s t] (take s (map (partial take t) (inf-matrix f m n)))))", "problem": 168, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn boo\n  ([f]\n   (let [fake-range (fn fake\n                      ([] (fake 0))\n                      ([n] (cons n (lazy-seq (fake (inc n))))))]\n     (map (fn [x]\n            (map (fn [y]\n                   (f x y))\n                 (fake-range)))\n            (fake-range))))\n  ([f m n]\n   (let [fake-drop (fn fd [n [x & xs :as all]]\n                     (if (> n 0)\n                       (recur (dec n) xs)\n                       (lazy-seq all)))]\n     (map #(fake-drop n %) (fake-drop m (boo f)))))\n  ([f m n s t]\n   (take s (map #(take t %) (boo f m n)))))", "problem": 168, "user": "50217818e4b00bba4502f7a7"}, {"code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n]\n   (let [row (fn row [f m n] (lazy-seq (cons (f m n) (row f m (inc n)))))]\n     (lazy-seq\n       (cons\n        (row f m n)\n        (matrix f (inc m) n)))))\n  ([f m n s t]\n    (take s (map #(take t %) (matrix f m n)))))", "problem": 168, "user": "51170b49e4b0063b4e3e16d9"}, {"code": "(fn mat\n  ([f] (mat f 0 0))\n  ([f m n s t] (take s (map (partial take t) (mat f m n))))\n  ([f m n]\n     (letfn [(next-val [f x]\n               (lazy-seq\n                (cons (f x) (next-val f (inc x)))))\n             (next-row [f y]\n               (lazy-seq\n                (cons (next-val (partial f y) n)\n                      (next-row f (inc y)))))]\n       (next-row f m))))", "problem": 168, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(fn [f & [m n s t]]\n  (let\n      [M  map\n       T  #(if % (take % %2) %2)\n       S  (fn S[x](lazy-cat [x] (S (+ x 1))))\n       R  #(T % (S (or %2 0)))]\n    (M #(M (partial f %) (R t n))(R s m))))", "problem": 168, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn infmat\n  ([f] (infmat f 0 0))\n  ([f m n s t] (take s (map #(take t %) (infmat f m n))))\n  ([f m n] (lazy-seq (cons\n    ((fn row [c] (lazy-seq (cons (f m c) (row (inc c))))) n)\n    (infmat f (inc m) n)))))", "problem": 168, "user": "4e977eb4535dbda64a6f6b56"}, {"code": "(fn i\n    ([f] (i f 0 0))\n    ([f m n]       \n       (lazy-seq\n        (cons\n         ((fn s [n] (lazy-seq (cons (f m n) (s (inc n))))) n)  \n              (i f (inc m) n))))\n    ([f m n s t]\n       (take s\n             (map #(take t %)\n                  (i f m n)))))", "problem": 168, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn inf-matr\n  ([f]\n   (inf-matr f 0 0))\n  ([f,m,n]\n   (let [iter (fn iter [fs x] (cons x (lazy-seq (iter fs (fs x)))))\n         x-axis (lazy-seq (iter inc m))]\n     (map #(map (partial apply f) %) (map #(lazy-seq (iter (fn [[a b]] (vector a (inc b))) [% n])) x-axis))))\n  ([f,m,n,s,t]\n   (take s (map #(take t %) (inf-matr f m n)))))", "problem": 168, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn mymatrix\n  ([f] (mymatrix f 0 0))\n  ([f m n] (let [myvec (fn myvec [f m n]\n                         (lazy-cat (list (f m n)) (myvec f m (inc n))))]\n             (lazy-cat (list (myvec f m n)) (mymatrix f (inc m) n)))\n     )\n  ([f m n s t] (take s (map #(take t %) (mymatrix f m n)))))", "problem": 168, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn __\n\t([f] (__ f 0 0)) \n\t([f m n] (__ f m n Double/POSITIVE_INFINITY Double/POSITIVE_INFINITY)) \n\t([f m n s t]\n\t\t(let [lj (fn lj [i j jc] \n\t\t\t\t\t(lazy-seq (cons (f i j) \n\t\t\t\t\t\t\t\t\t(if (< jc t) (lj i (inc j) (inc jc)) []))))\n\t\t\t  li (fn li [i ic]\n\t\t\t\t\t(lazy-seq (cons (lj i n 1) \n\t\t\t  \t\t\t\t\t(if (< ic s) (li (inc i) (inc ic)) []))))]\n\t\t(li m 1))))", "problem": 168, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(letfn [(rowfn [f i j]\n          (lazy-seq (cons (f i j) (rowfn f i (inc j)))))]\n  (fn im\n    ([f]\n     (im f 0 0))\n    ([f m n]\n     (lazy-seq (cons (rowfn f m n) (im f (inc m) n))))\n    ([f m n s t]\n     (take s (map (partial take t) (im f m n))))))", "problem": 168, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn infinite-matrix\n  ([f]\n   (infinite-matrix f 0 0 nil nil))\n  ([f m n]\n   (infinite-matrix f m n nil nil))\n  ([f m n s t]\n   (let\n     [x (+ m (or s 0))\n      y (+ n (or t 0))]\n     (letfn\n       [(row\n         [i j]\n         (when (or (nil? t) (< j y))\n           (lazy-seq (cons (f i j) (row i (inc j))))))\n         (column\n         [i j]\n         (when (or (nil? s) (< i x))\n           (lazy-seq (cons (row i j) (column (inc i) j)))))]\n       (column m n)))))", "problem": 168, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn infinite-matrix\n  ([f]\n   (infinite-matrix f 0 0))\n  ([f m n]\n   (lazy-seq (cons (lazy-seq (cons (f m n)\n                                   (first (infinite-matrix f m (inc n)))))\n                   (infinite-matrix f (inc m) n))))\n  ([f m n s t]\n   (let [im      (infinite-matrix f m n)\n         sim     (take s im)\n         stim    (map #(take t %) sim)]\n     stim)))", "problem": 168, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn inf-matrix\n  ([f] (inf-matrix f 0 0))\n  ([f i j] (inf-matrix f i j false false))\n  ([f i j s t]\n     (letfn [(gen-row\n               [f i j lim]\n               (if (and lim (>= j lim))\n                 '()\n                 (lazy-seq (cons (f i j) (gen-row f i (inc j) lim)))))\n             (gen-rows\n               [f i j r-lim c-lim]\n               (if (and r-lim (>= i r-lim))\n                 '()\n                 (lazy-seq (cons (gen-row f i j c-lim) (gen-rows f (inc i) j r-lim c-lim)))))]\n       (gen-rows f i j (if s (+ i s) s) (if t (+ j t) t))\n       )))", "problem": 168, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n] (letfn [(row [i j] (lazy-seq (cons (f i j) (row i (inc j)))) )]\n             (lazy-seq (cons (row m n) (infinite-matrix f (inc m) n)))))\n  ([f m n s t] (take s (map #(take t %) (infinite-matrix f m n))))\n  )", "problem": 168, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn inf-mat\n  ([f sr sc]\n   (letfn [ (single-row [sr sc]\n              (lazy-seq\n                (cons (f sr sc)\n                      (single-row sr (inc sc)))))\n           (all-row [sr sc]\n             (lazy-seq\n               (cons (single-row sr sc)\n                     (all-row (inc sr) sc))))\n           ]\n     (all-row sr sc)))\n  ([f] (inf-mat f 0 0))\n  ([f m n s t]\n   (take s (map #(take t %) (inf-mat f m n)))))", "problem": 168, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "(fn m [f & a]                                                                                                    \n  (let [row (fn row [y x]                                                                                          \n                (let [c (f y x)]                                                                                   \n                  (concat [c] (lazy-seq (row y (inc x))))))                                                        \n          matrix (fn matrix [y x]                                                                                  \n                   (let [r (row y x)]                                                                              \n                     (concat [r] (lazy-seq (matrix (inc y) x)))))                                                  \n        arg-len (count a)]                                                                                         \n    (cond                                                                                                          \n      (= arg-len 0) (matrix 0 0)                                                                                   \n      (= arg-len 2) (apply matrix a)                                                                               \n      :else (let [[x y h w] a]                                                                                     \n              (take h (map #(take w %) (m f x y)))))))", "problem": 168, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn infinite-matrix\n  ([f]\n    (infinite-matrix f 0 0))\n  ([f m n]\n    (letfn [(inner [i j]\n              (lazy-seq (cons (f i j) (inner i (inc j)))))\n            (outer [i]\n              (lazy-seq (cons (inner i n) (outer (inc i)))))]\n      (outer m)))\n  ([f m n s t]\n    (take s (map #(take t %) (infinite-matrix f m n)))))", "problem": 168, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [f & [m n s t]]\n  (letfn [(lazy-row [b e]\n            ({0 ()} e (lazy-cat [(or b 0)]\n                          (lazy-row (inc (or b 0)) (dec (or e 0))))))]\n    (map #(map (fn [x] (f %1 x)) (lazy-row n t)) (lazy-row m s))))", "problem": 168, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn [r f & [m n s t]]\n  (map #(map (fn [x] (f % x)) (r n t)) (r m s)))\n(fn r [a b]\n  ({0 ()} b (lazy-cat [(or a 0)]\n                      (r (+ (or a 0) 1) (- (or b 0) 1)))))", "problem": 168, "user": "51b213c2e4b02f8f128bb962"}, {"code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "problem": 168, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn a\n  ([b c f] (c f (b 0) (b 0)))\n  ([b c f m n] (c f (b n) (b m)))\n  ([b c f m n s t] (c f (take t (b n)) (take s (b m)))))\n(fn b [i] (cons i (lazy-seq (b (inc i)))))    ; range\n(fn c [f d e] (map #(map (partial f %) d) e)) ; matrix builder", "problem": 168, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n s t] (take s (map #(take t %) (matrix f m n))))\n  ([f m n]\n   (let [row (fn _ [f r c] (lazy-seq (cons (f r c) (_ f r (inc c)))))\n         rows (fn _ [f r c] (lazy-seq (cons (row f r c) (_ f (inc r) c))))]\n     (rows f m n))))", "problem": 168, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn mi\n  ([f](mi f 0 0))\n  ([f m n](letfn [(i [n g](lazy-seq (cons (g n) (i (inc n) g))))]\n            (i m #(i n (partial f %)))))\n  ([f m n s t] (take s (map #(take t %) (mi f m n)))))", "problem": 168, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn mt \n ([f] (mt f 0 0))\n  ([f m n]\n((fn rc [a]\n \n (lazy-seq  (cons \n\n( (fn r [b] \n (lazy-seq (cons (f a b) (r (+ b 1))) ))   n) (rc (+ a 1))) )) m))\n \n([f m n s t] (take s (map #(take t %) (mt f m n)))))", "problem": 168, "user": "517945dce4b0684c1c981a43"}, {"code": "(let [r (fn r [i] (lazy-seq (cons i (r (inc i)))))\n      rn (r 0)\n      d (fn [n d] (loop [d d n n] (if (zero? n) d (recur (rest d) (dec n)))))]\n(fn q ([f] (map (fn [i] (map (partial f i) rn)) rn))\n         ([f m n] (map (fn [i] (map (partial f i) (d n rn))) (d m rn)))\n         ([f m n s t] (take s (map (partial take t) (q f m n))))\n          ))", "problem": 168, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn infmtx\n\n    ([f] (infmtx f 0 0))\n    ([f m n]\n       (let [il (fn il [f i j] (lazy-seq (cons (f i j) (il f i (inc j))) ))\n             im (fn im [f i j] (lazy-seq (cons (il f i j) (im f (inc i) j)) ))]\n         (im f m n)))\n    ([f m n r c]\n\n       (take r (map #(take c %) (infmtx f m n)))\n\n       ))", "problem": 168, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn g \n  ([f] (let\n         [genrow (fn gr [f x y] (lazy-seq (cons (f y x) (gr f (inc x) y))))\n          genmatrix (fn gm [f x y] (lazy-seq (cons (genrow f x y) (gm f x (inc y)))))]\n         (genmatrix f 0 0)))\n  ([f m n] (g (fn [x y] (f (+ x m) (+ y n)))))\n  ([f m n s t] (take s (map #(take t %) (g f m n))))  \n  )", "problem": 168, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn infi-matrix [& [f m n s t]]\n  (letfn [(my-range [start]\n            (lazy-seq\n             (cons start (my-range (inc start)))))]\n    (let [line (if (nil? t)\n                 (if (nil? n)\n                   (my-range 0)\n                   (my-range n))\n                 (if (nil? n)\n                   (take t (my-range 0))\n                   (take t (my-range n))))]\n      (if (nil? s)\n        (if (nil? m)\n          (map (fn [x]\n                 (map #(f x %) line))\n               (my-range 0))\n          (map (fn [x]\n                 (map #(f x %) line))\n               (my-range m)))\n        (if (nil? m)\n          (take s (map (fn [x]\n                         (map #(f x %) line))\n                       (my-range 0)))\n          (take s (map (fn [x]\n                         (map #(f x %) line))\n                       (my-range m))))))))", "problem": 168, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn infinit-matrix\n  ([f m n]\n   (letfn [(infinit-vec [f j i]\n             (lazy-seq\n              (cons (f j i) (infinit-vec f j (inc i)))))]\n     (lazy-seq\n      (cons (infinit-vec f m n) (infinit-matrix f (inc m) n)))))\n  ([f]\n   (infinit-matrix f 0 0))\n  ([f m n s t]\n   (let [matrix (infinit-matrix f m n)]\n     (map #(take t %) (take s matrix)))))", "problem": 168, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn inf                                                                                                                                      \n  ([f] (inf f 0 0) )                                                                                                                           \n  ([f m n s t] (take s (map #(take t %) (inf f m n))))                                                                                         \n  ([f m n]                                                                                                                                     \n     (let [row-seq (fn row-seq [i j]                                                                                                            \n                     (lazy-seq (cons (f i j) (row-seq i (inc j)))))                                                                            \n           rows-seq (fn rows-seq [i j]                                                                                                          \n                      (lazy-seq (cons (row-seq i j) (rows-seq (inc i) j))))]                                                                   \n       (rows-seq m n))))", "problem": 168, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn matrix-with\n    ([f start-h start-w num-h num-w]\n        (letfn\n            [(fseq [f start num]\n                 (if (zero? num) []\n                     (lazy-seq (cons (f start) (fseq f (inc start) (dec num))))))]\n            (fseq (fn [h] (fseq (fn [w] (f h w)) start-w num-w)) start-h num-h)))\n    ([f start-h start-w]\n        (matrix-with f start-h start-w Double/POSITIVE_INFINITY Double/POSITIVE_INFINITY))\n    ([f]\n        (matrix-with f 0 0)))", "problem": 168, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n] (let [row (fn row [i j] (lazy-cat [(f i j)] (lazy-seq (row i (inc j)))))\n                 col (fn col [i] (lazy-cat [(row i n)] (lazy-seq (col (inc i)))))]\n             (col m)))\n  ([f m n s t] (take s (map #(take t %) (infinite-matrix f m n)))))", "problem": 168, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn aa\n   ([f] (aa f 0 0))\n   ([f m n]\n     (letfn [(outer [m n]\n                    (lazy-seq\n                      (cons (inner m n) (outer (inc m) n))))\n             (inner [m n]\n                    (lazy-seq\n                      (cons (f m n) (inner m (inc n)))))]\n       (outer m n)))\n   ([f m n s t]\n     (take s (map #(take t %) (aa f m n)))))", "problem": 168, "user": "50f48298e4b004d364930527"}, {"code": "(fn _\n     ([f]\n        (_ f 0 0))\n     ([f m n]\n        (letfn [(row [row-num col-num]\n                  (lazy-seq (cons (f row-num col-num)\n                                  (row row-num (inc col-num)))))\n                (rng [n] (lazy-seq (cons n (rng (inc n)))))]\n          (lazy-seq (map #(row % n) (rng m)))))\n     ([f m n s t]\n        (take s (map #(take t %) (_ f m n)))))", "problem": 168, "user": "50bca033e4b0594b91591c5d"}, {"code": "(fn g\n  ([f] (g f 0 0))\n  ([f m n] (g f m n -1 -1))\n  ([f m n s t] \n   (letfn [(row [r n t] \n                (if (zero? t)\n                  '()\n                  (lazy-seq (cons (f r n) (row r (inc n) (dec t))))))]\n     (if (zero? s)\n       '()\n       (lazy-seq (cons (row m n t) (g f (inc m) n (dec s) t)))))))", "problem": 168, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn [f & [m n s t]]\n  (let [ran (fn ran [from to]\n              (if (or (nil? to) (< from to))\n                (lazy-seq (cons from (ran (inc from) to)))))]\n    (map (fn [row]\n           (map (fn [col]\n                  (f row col))\n                (ran (or n 0) (and n t (+ n t)))))\n         (ran (or m 0) (and m s (+ m s))))))", "problem": 168, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn x\n  ([f] (x f 0 0))\n  ([f n] (lazy-seq (cons (f 0 n) (lazy-seq (x f (inc n))))))\n  ([f m n]\n     (lazy-seq (cons\n      (x #(f (+ m %1) %2) n)\n      (lazy-seq\n       (let [m* (inc m) n* (inc n)]\n         (map-indexed\n          (fn [i r]\n            (lazy-seq (cons (f (+ m* i) n) r)))\n          (x f m* n*)))))))\n  ([f m n s t]\n     (->> (x f m n) (map #(take t %)) (take s))))", "problem": 168, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn mat\n  ([f]\n    (letfn [(iter [f x] (lazy-seq (cons x (iter f (f x)))))\n            (rng [] (iter inc 0))]\n      (map (fn [a] (map (fn [b] (f a b)) \n                        (rng)))\n           (rng))))\n  ([f m n]\n    (letfn [(drp [n coll] \n              (if (and (seq coll) (pos? n)) \n                (recur (dec n) (next coll))\n                coll))\n            (dp [n coll] (lazy-seq (drp n coll)))]\n      (dp m (map #(dp n %) (mat f)))))\n  ([f m n s t]\n    (take s (map #(take t %) (mat f m n)))))", "problem": 168, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn !\n  ([f] (! f 0 0))\n  ([f i j] (! f i j nil nil))\n  ([f i j s t]\n     (letfn [(!!! [f x] (cons x (lazy-seq (!!! f (f x)))))\n             (!! [f i j] (lazy-seq (cons (map #(f i %) (!!! inc j)) (lazy-seq (! f (inc i) j)))))]\n       (if (nil? s)\n         (!! f i j)\n         (take s (map #(take t %) (!! f i j)))))))", "problem": 168, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n] (matrix f m n 999 999))\n  ([f m n s t]\n    (let [row (fn row[m n] (cons (f m n) (lazy-seq (row m (inc n)))))\n          rows (fn rows[m n] (cons (row m n) (lazy-seq (rows (inc m) n))))]\n      (take s (map #(take t %) (rows m n))))))", "problem": 168, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n]\n     (let [row (fn g [r c] (lazy-seq (cons (f r c) (g r (inc c)))))]\n       (lazy-seq (cons (row m n) (infinite-matrix f (inc m) n)))))\n  ([f m n s t] (take s (map (partial take t) (infinite-matrix f m n)))))", "problem": 168, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn gen \n  ([f lx ly rx ry] (letfn [\n          (gen-row [f x y ry]\n                        (lazy-cat [(f x y)] (if (= 1 ry) [] (gen-row f x (inc y) (dec ry)))))\n          (gen-column [f x rx ly ry]\n                           (lazy-cat [(gen-row f x ly ry)] (if (= 1 rx) [] (gen-column f (inc x) (dec rx) ly ry))))]\n    (gen-column f lx rx ly ry)))\n  ([f lx ly] (gen f lx ly -1 -1))\n  ([f] (gen f 0 0 -1 -1)))", "problem": 168, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn infinite-matrix [& args]\n  (letfn [(grow-row [f i j] (lazy-seq (cons (f i j) (lazy-seq (grow-row f i (inc j))))))\n          (grow-matrix [f i j] (lazy-seq (cons (grow-row f i j) (lazy-seq (grow-matrix f (inc i) j)))))]\n    (cond\n     (= (count args) 3) (grow-matrix (first args) (nth args 1) (nth args 2))\n     (= (count args) 5) (take (nth args 3) (map #(take (nth args 4) %) (grow-matrix (first args) (nth args 1) (nth args 2))))\n     :else (grow-matrix (first args) 0 0))))", "problem": 168, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(letfn [(my-range [start count]\n          (lazy-seq\n           (when (or (nil? count) (pos? count))\n             (cons (or start 0) (my-range (inc (or start 0))\n                                          (if (nil? count) count (dec count)))))))]\n  (fn [f & [m n s t]]\n       (map (fn [i]\n              (map (fn [j] (f i j)) (my-range n t)))\n            (my-range m s))))", "problem": 168, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn infinite-matrix \n        ([f] (infinite-matrix f 0 0))\n        ([f m n] \n        (letfn [\n                (buildcolumns [i c]\n                    (cons (f i c)\n                        (lazy-seq (buildcolumns i (inc c)))))\n                (buildrows [r]\n                    (cons (lazy-seq (buildcolumns r n))\n                        (lazy-seq (buildrows (inc r)))))\n                ]\n                (lazy-seq (buildrows m))))\n        ([f m n s t] \n            (take s (map #(take t %) (infinite-matrix f m n)))))", "problem": 168, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(let [rang (fn rang [n] (cons n (lazy-seq (rang (inc n)))))\n\t\t\tdro  (fn [n coll] \n\t\t\t\t\t\t\t\t(loop [n n, coll coll]\n\t\t\t\t\t\t\t\t\t(if (zero? n) \n\t\t\t\t\t\t\t\t\t\tcoll\n\t\t\t\t\t\t\t\t\t\t(recur (dec n) (rest coll)))))]\n\t(fn fun\n\t\t([f] (map (fn [m] (map #(f m %) (rang 0))) (rang 0)))\n\t\t([f m n] (map (partial dro n) (dro m (fun f))))\n\t\t([f m n s t] (map (partial take t) (take s (fun f m n))))))", "problem": 168, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n s t] (take s (map #(take t %) (matrix f m n))))\n  ([f m n]\n    (letfn [(myrange [start] (cons start (lazy-seq (myrange (inc start)))))]\n      (map #(map (partial f %) (myrange n)) (myrange m)))))", "problem": 168, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn run\n  ([f] (run f 0 0 -1 -1))\n  ([f x y] (run f x y -1 -1))\n  ([f x y w h]\n    (let [r (fn r [f m] (cons m (lazy-seq (r f (f m)))))\n          twr (fn [f m n]\n                (if (>= n 0)\n                  (take-while (partial > (+ m n)) (r f m))\n                  (r f m)))]\n      (map\n        #(map f (r identity %) (twr inc y h))\n        (twr inc x w)))))", "problem": 168, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn __\n  ([f m n] (letfn [(row [i j]\n                     (lazy-seq\n                      (cons (f i j)\n                            (row i (inc j)))))]\n             (lazy-seq\n              (cons (row m n)\n                    (__ f (inc m) n)))))\n  ([f] (__ f 0 0))\n  ([f m n s t] (map #(take t %) (take s (__ f m n)))))", "problem": 168, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [f & ot]\n  (let [[m n s t] ot]\n    (letfn [(g [i j] (lazy-seq (cons (h i j) (g (inc i) j))))\n            (h [i j] (lazy-seq (cons (f i j) (h i (inc j)))))\n            (dp [x s] \n              (if (> x 0) \n                (dp (dec x) (rest s))\n                s))\n            (mn [mtx]\n              (if (nil? n) mtx\n                (map #(dp n %) (dp m mtx))))\n            (st [mtx]\n              (if (nil? s) mtx\n                (map #(take t %) (take s mtx))))]\n      (->>\n       (g 0 0)\n       mn\n       st))))", "problem": 168, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(let [i (fn i [n] (cons n (lazy-seq (i (inc n)))))\n      y (fn y [f m n] (map #(f m %) (i n)))\n      x (fn x [f m s] (map #(y f % s) (i m)))]\n  (fn z \n    ([f]\n      (x f 0 0))\n    ([f a b]\n      (x f a b))\n    ([f a b c d]\n     (take c (map #(take d %) (z f a b))))))", "problem": 168, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(letfn [(row [f x y] (lazy-seq (cons (f x y) (row f x (inc y)))))\n        (matrix [f x y] (lazy-seq (cons (row f x y) (matrix f (inc x) y))))]\n       (fn ([f] (matrix f 0 0))\n           ([f x y] (matrix f x y))\n           ([f x y h w] (take h (map #(take w %) (matrix f x y)))))\n)", "problem": 168, "user": "5216933be4b000d124d989cf"}, {"code": "(fn matrix\n  ([f row col]\n    (letfn [(f-row [r c] (lazy-seq (cons (f r c) (f-row r (inc c)))))\n            (rows [r] (lazy-seq (cons (f-row r col) (rows (inc r)))))\n            ]\n    (rows row)))\n  ([f row col rt ct]\n    (take rt (map #(take ct %) (matrix f row col))))\n  ([f]\n    (matrix f 0 0 )))", "problem": 168, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n s t] (take s\n                 (map\n                   (partial take t)\n                   (matrix f m n))))\n  ([f m n]\n    (let [row (fn row [n] (lazy-cat [(f m n)] (row (inc n))))]\n      (lazy-cat [(row n)] (matrix f (inc m) n)))))", "problem": 168, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn infi\n  ([f] (infi f 0 0))\n  ([f m n s t] (take s (map #(take t %) (infi f m n))))\n  ([f m n]\n    (letfn \n      [(lazy-row [f m n]\n        (lazy-seq (cons (f m n) (lazy-row f m (inc n)))))]\n      (lazy-seq (cons\n        (lazy-row f m n)\n        (infi f (inc m) n))))))", "problem": 168, "user": "521e8227e4b0dd19981ad082"}, {"code": "(letfn [(repeat* [x] (repeatedly #(do x)))\n        (iterate* [f x] (reductions #(%2 %) x (repeat* f)))\n        (drop* [n xs] (reduce #(%2 %) xs (take n (repeat* rest))))]\n  (fn _\n    ([f]\n     (->> (iterate* inc 0)\n          (map (fn [i] (map (fn [j] [i j]) (iterate* inc 0))))\n          (map (fn [row] (map (fn [[i j]] (f i j)) row)))))\n    ([f m n]\n     (->> (_ f)\n          (drop* m)\n          (map #(drop* n %))))\n    ([f m n s t]\n     (->> (_ f m n)\n          (map #(take t %))\n          (take s)))))", "problem": 168, "user": "50479524e4b0371827a27bc4"}, {"code": "(letfn [      \n(infiline\n    ([func first-arg second-idx-min]\n        (letfn [(gen [idx val] (cons [idx val] (lazy-seq (gen (inc idx) (func first-arg (inc idx))))))]\n            (map second (gen second-idx-min (func first-arg second-idx-min)))))\n    ([func first-arg]\n        (infiline func first-arg 0))\n    ([func first-arg second-idx-min second-idx-size]\n        (take second-idx-size (infiline func first-arg second-idx-min))))\n            \n(infimatrix\n    ([func]\n      (letfn [(gen [idx val] (cons [idx val] (lazy-seq (gen (inc idx) (infiline func (inc idx))))))]\n            (map second (gen 0 (infiline func 0)))))\n    ([func m n]\n      (letfn [(gen [idx val] (cons [idx val] (lazy-seq (gen (inc idx) (infiline func (inc idx) n)))))]\n            (map second (gen m (infiline func m n)))))\n    ([func m n s t]\n      (take s (map #(take t %) (infimatrix func m n)))))\n      ]\n      infimatrix)", "problem": 168, "user": "5165a235e4b079ad97ec44ac"}, {"code": ";; can be greatly cleaned up, bu I don't have the time. :/\n(fn z\n  ([fff]\n     ((fn ff [i]\n        (lazy-seq (cons ((fn f [g i j] (lazy-seq (cons (g i j) (lazy-seq (f g i (inc j)))))) fff i 0)\n                        (lazy-seq (ff (inc i))))))\n      0))\n  ([fff m n]\n     ((fn ff [i]\n        (lazy-seq (cons ((fn f [g i j] (lazy-seq (cons (g i j)\n                                                       (lazy-seq (f g i (inc j)))))) fff i (+ n 0))\n                        (lazy-seq (ff (inc i))))))\n      (+ m 0)))\n  ([f m n s t] (take s (map #(take t %) (z f m n)))))", "problem": 168, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn matrix\n  ([f m n]\n     (let [rng (fn r [i]\n                 (cons i (lazy-seq (r (inc i)))))]\n       (for [i (rng m)] (map (partial f i) (rng n)))))\n  ([f] (matrix f 0 0))\n  ([f m n s t] (take s (map #(take t %) (matrix f m n)))))", "problem": 168, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn ifm\n    ([f]\n     (ifm f 0 0))\n    ([f m n]\n     ((fn rw [i]\n        (lazy-seq\n         (cons\n          ((fn cl [j]\n             (lazy-seq\n              (cons\n               (f i j)\n               (cl (inc j)))))\n           n)\n          (rw (inc i)))))\n      m))\n    ([f m n s t]\n     (take s (map #(take t %) (ifm f m n)))))", "problem": 168, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn matrix\n     ([f] (matrix f 0 0))\n     ([f m n s t] (take s (map #(take t %) (matrix f m n))))\n     ([f m n] (let [x-seq (fn xs [m n] (lazy-seq (cons (f m n) (xs m (inc n)))))\n                    y-seq (fn ys [m n] (lazy-seq (cons (x-seq m n) (ys (inc m) n))))]\n                (y-seq m n))))", "problem": 168, "user": "52479487e4b05ef8e38e6373"}, {"code": "(letfn [(r [n] (cons n (lazy-seq (r (inc n))))) ] (fn inf-matrix \n  ([f] (map (fn [i] (map (fn [j] (f i j)) (r 0))) (r 0) ) )\n  ([f m n] (map (fn [i] (map (fn [j] (f i j)) (r n))) (r m)) )\n  ([f m n s t] (map (fn [i] (map (fn [j] (f i j)) (take t (r n)))) (take s (r m))))))", "problem": 168, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn infinite-matrix\n  ([f]\n   (infinite-matrix f 0 0))\n  ([f m n]\n   (let [wat (fn ints-from [n]\n               (cons n (lazy-seq (ints-from (inc n)))))]\n     (map\n      #(map (partial f %) (wat n))\n      (wat m))))\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))))", "problem": 168, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn q ([f i j s t]\n    (letfn [(p [f i j t]  (lazy-cat [(f i j)]  (if (= 1 t) [] (p f i (inc j) (dec t)))))]\n            (lazy-cat [(p f i j t)] (if (= 1 s) [] (q f (inc i) j (dec s) t)))))\n  ([f i j] (q f i j 0 0))\n  ([f] (q f 0 0)))", "problem": 168, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn infinite-matrix \n    ([f] (infinite-matrix f 0 0))\n    ([f m n]\n      (letfn [(index-seq \n                [m n] (lazy-seq (cons [m n] (index-seq m (inc n)))))\n              (index-matrix \n                [m n] (lazy-seq (cons (index-seq m n) (index-matrix (inc m) n))))]\n        (map (fn [r] (map (fn [e] (apply f e)) r)) (index-matrix m n))))\n   ([f m n s t]\n     (take s (map #(take t %) (infinite-matrix f m n)))))", "problem": 168, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn g ([f] (g f 0 0))\n   ([f m n] (letfn [(c [i j] (lazy-seq (cons (f i j) (c i (inc j)))))\n                    (r [i] (lazy-seq (cons (c i n) (r (inc i)))))] (r m)))\n   ([f m n s t] (take s (map #(take t %) (g f m n)))))", "problem": 168, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(letfn [(func-row [f a b]\n          (lazy-cat [(f a b)] (func-row f a (inc b))))\n        (func-matrix [f r c]\n          (lazy-cat [(func-row f r c)] (func-matrix f (inc r) c)))]\n  (fn get-func-matrix\n    ([f] (func-matrix f 0 0))\n    ([f m n] (func-matrix f m n))\n    ([f m n s t] (take s (map #(take t %) (func-matrix f m n))))))", "problem": 168, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn p168\n  ([f] (p168 f 0 0))\n  ([f mi mj sti stj]\n     (take sti (map #(take stj %) (p168 f mi mj))))\n  ([f mi mj]\n     (letfn [(getf [i j] ((fn v [ii jj] (lazy-seq (cons (apply f [ii jj]) (v ii (inc jj))))) i j)) ]\n       (lazy-seq ((fn v [ii jj] (lazy-seq (cons (getf ii jj) (v (inc ii) jj)) )) mi mj))\n       )))", "problem": 168, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn erg\n  ([f m n s t] (take s (map #(take t %) (erg f m n))))\n  ([f] (erg f 0 0))\n  ([f m n] \n   (let [lazyrow (fn lr [r c] (lazy-cat [] (cons (f r c) (lazy-seq (lr r (inc c))))))]\n     ((fn lazymat [r]\n        (lazy-cat [] (cons (lazyrow r n) (lazy-seq (lazymat (inc r)))))) m))))", "problem": 168, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn i-m ([f] (i-m f 0 0))\n                            ([f ii jj] (i-m f ii jj nil nil))\n                            ([f ii jj s t]\n                             (letfn [(make-row [i j](if (and(not(nil? t))(= j (+ jj t))) nil\n                                                     (lazy-seq(cons (f i j) (make-row i(inc j))))))\n                                     (make-matrix [i j]\n                                                  (if (and(not(nil? s))(= i (+ ii s))) nil\n                                                  (lazy-seq(cons (make-row i j) (make-matrix(inc i)jj)))))]\n                               (make-matrix ii jj)\n                               ))\n                            )", "problem": 168, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn p168\n    ([f] (p168 f 0 0))\n\n    ([f m n]\n     (let [my-range (fn my-range [i] (lazy-seq (cons i (my-range (inc i)))))]\n       (map\n         #(map (partial f %) (my-range n))\n         (my-range m))))\n\n    ([f m n s t]\n     (take s (map #(take t %) (p168 f m n)))))", "problem": 168, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn mtx\n  ([f] (mtx f 0 0 nil nil))\n  ([f m n] (mtx f m n nil nil))\n  ([f i j s t]\n       (let [s (when s (+ s i)) t (when t (+ t j))]\n         ( (fn g [i j]\n             (lazy-seq\n              (when (or (not s) (< i s))\n                (cons\n                 ((fn h [j]\n                    (lazy-seq\n                     (when (or (not t) (< j t))\n                       (cons (f i j)\n                             (h (inc j))))))\n                  j)\n                 (g (inc i) j)))))\n           i j))))", "problem": 168, "user": "519ef784e4b087743fad2198"}, {"code": "(let [natural-nums (fn self [a] (lazy-cat [a] (self (inc a))))\n      naturals (natural-nums 0)]\n  (fn inf-mat\n    ([f] (map (fn [i] (map (fn [j] (f i j)) naturals)) naturals))\n    ([f m n] (inf-mat #(f (+ % m) (+ %2 n))))\n    ([f m n s t] (map (fn [c] (take t c)) (take s (inf-mat f m n))))))", "problem": 168, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn problem-168\n  ([f] (problem-168 f 0 0))\n  ([f m n] (letfn [(row [a b]\n                     (lazy-seq (cons (f a b) (row a (inc b)))))]\n             (lazy-seq (cons (row m n) (problem-168 f (inc m) n)))))\n  ([f m n s t] (map (partial take t) (take s (problem-168 f m n)))))", "problem": 168, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn infinite-matrix\n  ([f]\n    (infinite-matrix f 0 0))\n  ([f m n]\n    (letfn [(inner [i j]\n              (lazy-seq (cons (f i j) (inner i (inc j)))))\n            (outer [i]\n              (lazy-seq (cons (inner i n) (outer (inc i)))))]\n      (outer m)))\n  ([f m n s t]\n    (take s (map #(take t %) (infinite-matrix f m n)))))", "problem": 168, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn inf-mat\n    ([f] (inf-mat f 0 0))\n    ([f m n s t] (take s (map #(take t %) (inf-mat f m n))))\n    ([f m n] (letfn\n               [(inf-vec [f m n] (lazy-seq (cons (f m n) (inf-vec f m (inc n)))))]\n               (lazy-seq (cons (inf-vec f m n) (inf-mat f (inc m) n))))))", "problem": 168, "user": "4fb1325de4b081705acca276"}, {"code": "(fn [f &[a b c d]]\n  (let [a (or a 0) b (or b 0)]\n  (letfn\n    [(r-seq [f i] (lazy-seq (cons (f i) (r-seq f (inc i)))))\n     (im [f i] (lazy-seq (cons (r-seq (partial f i) b) (im f (inc i)))))]\n    (if (some nil? [c d]) (im f a) (take c (map #(take d %) (im f a)))))))", "problem": 168, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn imatrix [& args]\n   (letfn [(seqy [f n]\n             (lazy-seq (cons (f n) (seqy f (inc n)))))]\n     (apply\n      (fn inf-matrix\n        [f & as]\n        (let [[dn dm tn tm] as\n              dn (if (nil? dn) 0 dn)\n              dm (if (nil? dm) 0 dm)\n              nil-take (fn [n s]\n                         (if (nil? n) s (take n s)))]\n          (nil-take tn\n                    (seqy (fn [n] (nil-take tm\n                                            (seqy (fn [m] (f n m)) dm))) dn))))\n      args)))", "problem": 168, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn lz\n  ([f] (lz f 0))\n  ([f i] (lz f 0 0))\n  ([f m n] (let [nlzz (fn nlzz' [f i j]\n                        (cons (f i j) (lazy-seq (nlzz' f i (inc j)))))\n                 ]\n             (lazy-seq\n              (cons (lazy-seq (nlzz f m n))\n                    (lz f (inc m) n)) )) )\n  ([f m n s t] (take s (map #(take t %) (lz f m n)))))", "problem": 168, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn matrixmagic\n  ([f]\n     (matrixmagic f 0 0))\n  ([f m n]\n     (let [inf (fn inf [s] (lazy-seq (cons s (inf (inc s)))))]\n       (lazy-seq                                                                                    \n        (cons (map #(f m %) (inf n)) (matrixmagic f (inc m) n)))))                                  \n  ([f m n s t]\n     (take s (map #(take t %) (matrixmagic f m n)))))", "problem": 168, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn im\n  ([f] (im f 0 0))\n  ([f m n]\n     (letfn [(inner [i j]\n               (lazy-seq (cons (f i j) (inner i (inc j)))))\n             (outer [i]\n               (lazy-seq (cons (inner i n) (outer (inc i)))))]\n       (outer m)))\n  ([f m n s t]\n     (take s (map #(take t %) (im f m n)))))", "problem": 168, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "(fn [& args]\n  (letfn [(row-i\n            ([f i] (row-i f i 0))\n            ([f i j]\n               (lazy-cat [(f i j)] (lazy-seq (row-i f i (inc j))))))\n          (infatit\n            ([f] (infatit f 0 0))\n            ([f m n] (lazy-cat [(row-i f m n)]\n                               (lazy-seq (infatit f (inc m) n))))\n            ([f m n s t] (take s\n                               (map #(take t %)\n                                    (infatit f m n)))))] (apply infatit args)))", "problem": 168, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn n168\n  ([f] (n168 f 0 0)) \n  ([f m n] (letfn [(gen-row [m n] \n                            (lazy-seq (cons (f m n) (gen-row m (inc n)))))\n                   (gen-rows [m n]\n                             (lazy-seq (cons (gen-row m n) (gen-rows (inc m) n))))]\n             (gen-rows m n)))\n  ([f m n s t] (take s (map #(take t %) (n168 f m n)))))", "problem": 168, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn infinite\n  ([f m n]\n    (letfn [(my-range [i]\n              (cons i (lazy-seq (my-range (inc i)))))]\n      (map (fn [i] (map (fn [j] (f i j)) (my-range n))) (my-range m))))\n  ([f]\n    (infinite f 0 0))\n  ([f m n s t]\n    (take s (map #(take t %) (infinite f m n)))))", "problem": 168, "user": "5102ac9de4b00c483ae176fa"}, {"code": "(fn matrix \n  ([f] (matrix f 0 0))\n  ([f x y s t] (take s (map #(take t %) (matrix f x y))))\n  ([f x y] (let [line (fn step [x y] (lazy-seq (cons (f x y) (step x (+ y 1)))))]\n             (lazy-seq (cons (line x y) (matrix f (+ x 1) y))))))", "problem": 168, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn imatrx\n  ([f a b]\n   (let [inner \n         (fn inner [i j]\n            (lazy-seq (cons (f i j) (inner i (inc j)))))\n         outer\n         (fn outer [i]\n            (lazy-seq (cons (inner i b) (outer (inc i)))))]\n     (outer a)))\n  ([f a b c d]\n   (take c (map #(take d %) (imatrx f a b))))\n  ([f]\n   (imatrx f 0 0)))", "problem": 168, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn ff\n  ([f]\n    (ff f 0 0))\n  ([f m n]\n    ((fn fi [i]\n       (let [fj (fn fj [j]\n                  (lazy-seq (cons (f i j) (fj (inc j)))))]\n         (lazy-seq (cons (fj n) (fi (inc i))))))\n      m))\n  ([f m n s t]\n    (take s (map #(take t %) (ff f m n)))))", "problem": 168, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn g\n  ([f]\n    (g f 0 0))\n  ([f m n]\n    (letfn [(i [x y]\n              (lazy-seq (cons (f x y) (i x (inc y)))))\n            (o [x]\n              (lazy-seq (cons (i x n) (o (inc x)))))]\n      (o m)))\n  ([f m n s t]\n    (take s (map #(take t %) (g f m n)))))", "problem": 168, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(letfn [(repeatx [f y x]\n          (lazy-seq (cons (f y x)\n                          (repeatx f y (inc x)))))\n        (repeaty [f y x]\n          (lazy-seq (cons (repeatx f y x)\n                          (repeaty f (inc y) x))))]\n  (fn \n    ([f] (repeaty f 0 0))\n    ([f x y] (repeaty f x y))\n    ([f x y m n] (take m (map #(take n %) (repeaty f x y))))))", "problem": 168, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn f168\n  ([op] (f168 op 0 0))\n  ([op m n]\n     (let [lrange (fn f [n] (lazy-seq (cons n (f (inc n)))))\n           rowFn (fn [r] (map (partial op r) (lrange n)))\n           rows (map rowFn (lrange m))]\n       rows\n       )\n     )\n  ([op m n nRows nCols] (take nRows (map #(take nCols %) (f168 op m n) ))))", "problem": 168, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn inf-mat [& [f m n s t]]\n  (let [rec (fn rec [f x y]\n              (lazy-seq (cons (f x y) (rec f x (inc y)))))\n        res (map #(rec f % (or n 0)) (rec (fn [_ a] a) 0 (or m 0)))]\n    (if (and s t)\n      (take s (map #(take t %) res))\n      res)))", "problem": 168, "user": "50645e12e4b007509339a58a"}, {"code": "(letfn [(r [f m n] (lazy-seq (cons (f m n) (r f m (inc n)))))]\n  (fn infm\n    ([f] (infm f 0 0))\n    ([f m n] (lazy-seq (cons (r f m n) (infm f (inc m) n))))\n    ([f m n s t] (take s (map #(take t %) (infm f m n))))))", "problem": 168, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn [& args] (let [argz (vec args)\n                           f (get argz 0)\n                           x (if (nil? (get argz 1)) 0 (get argz 1))\n                           y (if (nil? (get argz 2)) 0 (get argz 2))\n                           r (get argz 3)\n                           c (get argz 4)\n                           ]\n                       (letfn [\n                               (row [num] (if (and (not (nil? r)) (= r num)) [] (lazy-seq (cons (col 0 num) (row (inc num))))))\n                               (col [num2 num] (if (and (not (nil? c)) (= c num2)) [] (lazy-seq (cons (f (+ x num) (+ y num2)) (col (inc num2) num)))))\n \t\t\t       ]\n                         (row 0)\n                         )))", "problem": 168, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn infmat\n  ([f n m] (letfn [(row [j] (lazy-seq (cons (f n j) (row (inc j)))))]\n             (lazy-seq (cons (row m) (infmat f (inc n) m)))))\n  ([f] (infmat f 0 0))\n  ([f n m s t] (take s (map #(take t %) (infmat f n m)))))", "problem": 168, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn [f & a]\n  (let [[i j ii jj]  a\n        i (or i 0)\n        j (or j 0)         \n        ii (if (nil? ii) -1 (+ ii i -1))\n        jj (if (nil? jj) -1 (+ jj j -1))]\n\n    ((fn it-cons [i j]\n       (lazy-seq\n        (letfn [(row [i j] \n                  (lazy-seq \n                   (cons (f i j) \n                         (if (= j jj) []\n                             (row i (inc j))))))]\n\n          (cons (row i j)\n                (if (= i ii) []\n                    (it-cons (inc i) j)))))) i j)))", "problem": 168, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n]\n     (letfn [(up-from [n] (lazy-seq (cons n (up-from (inc n)))))]\n       (map (fn [i] (map (partial f i) (up-from n))) (up-from m))))\n  ([f m n s t]\n     (take s (map (partial take t) (infinite-matrix f m n)))))", "problem": 168, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn make-matrix\n  ([f] (make-matrix f 0 0 Double/POSITIVE_INFINITY Double/POSITIVE_INFINITY))\n  ([f m n] (make-matrix f m n Double/POSITIVE_INFINITY Double/POSITIVE_INFINITY))\n  ([f m n s t]\n     (letfn [(make-row [f n t]\n               (when (pos? t)\n                 (lazy-seq\n                  (cons (f n) (make-row f (inc n) (dec t))))))]\n       (when (pos? s)\n         (lazy-seq\n          (cons (make-row #(f m %) n t)\n                (make-matrix f (inc m) n (dec s) t)))))))", "problem": 168, "user": "510db6cde4b078ea71921145"}, {"code": "(fn inf-matrix\n  ([f]\n   (letfn [(r [] (reductions + 0 (repeatedly (constantly 1))))]\n   (map\n    (fn [n]\n      (map\n       #(f n %)\n       (r)))\n    (r))))\n  ([f m n]\n   (letfn [(d [n l] (second (split-at n l)))]\n   (d m\n    (map\n     #(d n %)\n     (inf-matrix f)))))\n  ([f m n s t]\n   (take\n    s\n    (map\n     #(take t %)\n     (inf-matrix f m n)))))", "problem": 168, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn infinate-matrix\n  ([f] (lazy-seq (infinate-matrix f 0 0)))\n  ([f m n ]\n     (letfn [(rows [i j]\n               (lazy-seq (cons (f i j)\n                               (lazy-seq (rows i (+ j 1))))))\n             (cols [i]\n               (lazy-seq (cons (rows i n )\n                               (lazy-seq (cols (+ 1 i))))))]\n       (lazy-seq (cols m))))\n  ([f m n s t]\n     (take s (map #(take t %) (infinate-matrix f m n)))))", "problem": 168, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn im \n  ([f] (im f 0 0))\n  ([f m n] (letfn [(r [x] (lazy-cat [x] (r (inc x))))]\n             (map #(map (partial f %) (r n)) (r m))))\n  ([f m n s t] (take s (map #(take t %) (im f m n)))))", "problem": 168, "user": "51e00020e4b01188f0627534"}, {"code": "(fn infinite-matrix\n  ([f]\n   (infinite-matrix f 0 0))\n  ([f m n]\n   (lazy-seq\n    (let [infinite-row (fn infinite-row [f m n]\n                        (lazy-seq\n                          (cons (f m n)\n                                (infinite-row f m (inc n)))))]\n      (cons (infinite-row f m n)\n            (infinite-matrix f (inc m) n)))))\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))))", "problem": 168, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn infinite-matrix \n  ([f m n s t]\n   (->> (infinite-matrix f m n) (map #(take t %)) (take s)))\n  ([f m n] \n   (let [seq-inf (fn ! [start] (cons start (lazy-seq (! (inc start)))))]\n     (map (fn [x] (map #(f x %) (seq-inf n))) (seq-inf m)))\n   )\n  ([f] \n   (infinite-matrix f 0 0))\n  )", "problem": 168, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn m\n  ([f] (m f 0 0))\n  ([f r c] (letfn [(w ([f r c] (lazy-seq (cons (f r c) (w f r (inc c))))))]\n             (lazy-seq (cons (w f r c) (m f (inc r) c)))))\n  ([f r c s t] (map #(take t %) (take s (m f r c))))\n  )", "problem": 168, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn soln\n  ([f] (soln f 0 0))\n  ([f m n s t] (take s (map #(take t %) (soln f m n))))\n  ([f m n]\n     (letfn [(row [f y x]\n               (lazy-seq (cons (f y x) (row f y (inc x)))))\n             (col [f y x]\n               (lazy-seq (cons (row f y x) (col f (inc y) x))))]\n       (col f m n))))", "problem": 168, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [f & coll]\n  (let [inf_Matrix (fn rc [f row col limit_r limit_c n]\n   (let [ cc (fn _ [f row col  limit_c n] (if (and (pos? limit_c) (= n limit_c)) (lazy-seq) (lazy-seq (cons (f row col) (lazy-seq (_  f row (inc col)  limit_c (inc n)))))))]\n    (if (and (pos? limit_r) (= n limit_r)) (lazy-seq) (lazy-seq (cons (cc f row col limit_c 0) (lazy-seq (rc f (inc row) col limit_r limit_c (inc n))))))\n  ))\n  ] (if (empty? coll)\n       (inf_Matrix f 0 0 -1 -1 0)\n       (let [[row col & c] coll]\n          (if (empty? c)\n             (inf_Matrix f row col -1 -1 0)\n             (let [[limit_r limit_c] c]\n               (inf_Matrix f row col limit_r limit_c 0)\n             )\n          ) \n       )  \n    )\n  )\n )", "problem": 168, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn __\n  ([f]\n    (__ f 0 0))\n  ([f m n]\n    (letfn [(ascending \n              ([start]\n                (lazy-seq (cons start (ascending (inc start)))))\n              ([start end]\n                (take (- end start) (ascending start))))\n            (build-row [f r start]\n              (let [a (ascending start)]\n                (map #(f r %) a)))]\n    (let [a (ascending m)]\n      (map #(build-row f % n) a))))\n  ([f m n s t]\n    (let [infinite (__ f m n)]\n      (take s (map #(take t %) infinite)))))", "problem": 168, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn infm\n  ([f] (infm f 0 0))\n  ([f m n]\n   (letfn [(row [f i j] (lazy-seq (cons (f i j) (row f i (inc j)))))\n           (col [f i j] (lazy-seq (cons (row f i j) (col f (inc i) j))))]\n     (col f m n)))\n  ([f m n s t] (take s (map #(take t %) (infm f m n))))\n  )", "problem": 168, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(letfn [(ints-from [n] (cons n (lazy-seq (ints-from (inc' n)))))\n        (cell [i1 i2] [i1 i2])\n        (row [r start] (map #(cell r %) (ints-from start)))\n        (rows [m n] (map #(row % n) (ints-from m)))\n        (finite-set-rows [m n s t] (take s (map #(take t %) (rows m n))))\n        (f-to-r [f r] (map #(apply f %) r))\n        (f-to-m [f m] (map #(f-to-r f %) m))]\n  (fn ([f] (f-to-m f (rows 0 0)))\n     ([f m n] (f-to-m f (rows m n)))\n     ([f m n s t] (f-to-m f (finite-set-rows m n s t)))))", "problem": 168, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn [f & [m n s t]]\n  (let [my-range (fn my-range \n                   ([] (my-range 0))\n                   ([n] (lazy-seq (cons n (my-range (inc n))))))\n        [_ rgy] (split-at (or m 0) (my-range))\n        [_ rgx] (split-at (or n 0) (my-range))\n        mn (map (fn [r] (map #(f r %) rgx)) rgy)]\n    (if (and s t)\n      (map #(take t %) (take s mn))\n      mn)))", "problem": 168, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn inf-matrix\n([f]\n (inf-matrix f 0 0))\n  \n([f m n]\n (letfn [\n (make-line[collumn line]\n   (lazy-seq\n     (cons (f collumn line)\n       (make-line collumn (inc line)))))\n (make-collumn [collumn start-line]\n   (lazy-seq\n     (cons (make-line collumn start-line)\n       (make-collumn (inc collumn) start-line))))]\n   (make-collumn m n)))\n  \n([f m n s t]\n (take s (map #(take t %) (inf-matrix f m n)))))", "problem": 168, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn infinite-matrix\n\t([f] \n\t\t(letfn [\n\t\t\t(infinite-row [f i j] (lazy-seq (cons (f i j) (lazy-seq (infinite-row f i (inc j))))))\n\t\t\t(infinite-rows [f i] (lazy-seq (cons (infinite-row f i 0) (lazy-seq (infinite-rows f (inc i))))))\n\t\t]\n\t\t(infinite-rows f 0)\n\t\t)\n\t)\n\t([f m n]\n\t    (letfn [\n\t    \t(my-drop [n coll]\n\t    \t\t(cond\n\t    \t\t\t(empty? coll)\n\t    \t\t\tcoll\n\t    \t\t\t(zero? n)\n\t    \t\t\tcoll\n\t    \t\t\t:else\n\t    \t\t\t(lazy-seq (my-drop (dec n) (rest coll)))\n\t    \t\t)\n\t    \t)\n\t    ]\n\t    (map (partial my-drop n) (my-drop m (infinite-matrix f)))))\n\t([f m n s t] (map (partial take t) (take s (infinite-matrix f m n))))\n)", "problem": 168, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn infinite-matrix\n  ([f]\n    (infinite-matrix f 0 0))\n  ([f m n]\n    (letfn [(inner [i j]\n              (lazy-seq (cons (f i j) (inner i (inc j)))))\n            (outer [i]\n              (lazy-seq (cons (inner i n) (outer (inc i)))))]\n      (outer m)))\n  ([f m n s t]\n    (take s (map #(take t %) (infinite-matrix f m n)))))", "problem": 168, "user": "5307e4ece4b02e82168697a9"}, {"code": "(fn generate\n  ([ff x1 y1 x2 y2]\n   (letfn [(gen-mat [row]\n                     (letfn [(gen-row [col]\n                                      (lazy-seq \n                                       (if (= col (+ y1 y2))\n                                         []\n                                         (cons \n                                          (ff row col) \n                                          (gen-row (inc col))))))]\n                       (lazy-seq \n                        (if (= row (+ x1 x2))\n                          []\n                          (cons\n                           (gen-row y1)\n                           (gen-mat (inc row)))))))]\n           (gen-mat x1)))\n  ([ff x1 y1] (generate ff x1 y1 -1 -1))\n  ([ff] (generate ff 0 0)))", "problem": 168, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(letfn [(lazy-row [f i j] \n\t\t\t(lazy-seq (cons (f i j) (lazy-row f i (inc j))))\n\t\t)\n\t\t(lazy-matrix [f i j]\n\t\t\t(lazy-seq (cons (lazy-row f i j) (lazy-matrix f (inc i) j)))\n\t\t)]\n\t\t(fn inf-matrix\n          ([f] (lazy-matrix f 0 0))\n          ([f m n] (lazy-matrix f m n))\n          ([f m n s t] (take s (map #(take t %) (lazy-matrix f m n)))) \n        )\n)", "problem": 168, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn infinite-matrix [& args]\n  (letfn [(construct\n            ([f]\n               ((fn make-matrix [row]\n                  (lazy-seq\n                   (cons (map (partial f row) (my-range))\n                         (make-matrix (inc row)))))\n                0))\n\n            ([f m n]\n               (map (partial my-drop n)\n                    (my-drop m (construct f))))\n\n            ([f m n s t]\n               (map (partial take t)\n                    (take s (construct f m n)))))\n\n\n          (my-drop [n coll]\n            (if (zero? n)\n              coll\n              (my-drop (dec n) (rest coll))))\n\n\n          (my-range []\n            ((fn lazy-range [curr]\n               (cons curr\n                     (lazy-seq (lazy-range (inc curr)))))\n             0))]\n    (apply construct args)))", "problem": 168, "user": "530578ede4b0d8b024fd3760"}, {"code": "(letfn [(cols [f a b] (lazy-seq (cons (f a b) (cols f a (inc b)))))\n        (rows [f a b] (lazy-seq (cons (cols f a b) (rows f (inc a) b))))]\n  (fn \n    ([f] (rows f 0 0))\n    ([f a b] (rows f a b))\n    ([f a b c d] (take c (map #(take d %) (rows f a b))))))", "problem": 168, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn matr \n  ([f] (matr f 0 0))\n  ([f m n]\n     (letfn [(myfor [f i j dropnum]\n               (if (zero? dropnum)\n                 (lazy-seq (cons (f j i) (myfor f (inc i) j 0)))\n                 (myfor f (inc i) j (dec dropnum))))\n             (mymatr [f i j dropnumrow dropnumcol]\n               (if (zero? dropnumrow)\n                 (lazy-seq (cons (myfor f i j dropnumcol)\n                                 (mymatr f i (inc j) dropnumrow dropnumcol)))\n                 (mymatr f i (inc j) (dec dropnumrow) dropnumcol)))]\n\n     (mymatr f 0 0 m n)))\n  ([f m n s t]\n     (take s (map #(take t %) (matr f m n)))))", "problem": 168, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn im \n\t([f m n s t] \t(take s (map #(take t %) (im f m n))))\n  \t([f m n] \t\t(letfn [(irow [g a b] (lazy-seq (cons (g a b) (irow g a (inc b)))))] ; infinite row\n    \t         \t(irow #(irow f %2 %1) n m))) \n\t([f] \t\t\t(im f 0 0)))", "problem": 168, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "(fn f \n  ([x m n]\n   ((fn fi [i]\n      (lazy-cat [((fn fj [j]\n                    (lazy-cat [(x i j)] (fj (inc j)))) n)]\n                (fi (inc i)))) m))\n  ([x] (f x 0 0))\n  ([x m n s t]\n   (take s (map #(take t %) (f x m n)))))", "problem": 168, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(letfn [\n        (cellrange [f i2 i1]\n          (lazy-seq\n            (cons (f i1)\n                  (when\n                    (or (nil? i2) (< i1 i2))\n                    (lazy-seq (cellrange f i2 (inc i1)))))))\n\n        (matrix [f i1 i2 j1 j2]\n          (cellrange (fn cols [i] (cellrange (partial f i) j2 j1)) i2 i1) \n          )]\n\n  (fn genmatrix \n\n    ([f] (matrix f 0 nil 0 nil))\n\n    ([f m n] (matrix f m nil n nil))\n\n    ([f m n s t] (matrix f m (dec (+ m s)) n (dec (+ n t)))))\n\n)", "problem": 168, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn inf \n  ([f] (inf f 0 0))\n  ([f m n q] (lazy-seq (cons (f m n) (inf f m (inc n) :q))))\n  ([f m n] (lazy-seq (cons (inf f m n :q) (inf f (inc m) n))))\n  ([f m n s t] (take s (map #(take t %) (inf f m n))))\n)", "problem": 168, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn table\n  ([f] (table f 0 0))\n  ([f m n]\n   (lazy-seq\n    (cons ((fn table-row [f m n]\n             (lazy-seq\n              (cons (f m n) (table-row f m (inc n)))))\n           f m n) \n          (table f (inc m) n))))\n  ([f m n s t]\n   (take s (map (partial take t) (table f m n)))))", "problem": 168, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "problem": 168, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn infinite-matrix\n  ([f]\n    (infinite-matrix f 0 0))\n  ([f m n]\n    (letfn [(inner [i j]\n              (lazy-seq (cons (f i j) (inner i (inc j)))))\n            (outer [i]\n              (lazy-seq (cons (inner i n) (outer (inc i)))))]\n      (outer m)))\n  ([f m n s t]\n    (take s (map #(take t %) (infinite-matrix f m n)))))", "problem": 168, "user": "50436470e4b034ff00315d23"}, {"code": "(fn mat\n  ([f] (mat f 0 0))\n  ([f m n] \n   (letfn [(sq [i] (lazy-seq (cons i (sq (inc i)))))\n           (fsq [f y x] (lazy-seq (cons (f y x) (fsq f y (inc x)))))]\n     (map #(fsq f % n) (sq m))\n   ))\n  ([f m n s t] (take s (map #(take t %) (mat f m n)))))", "problem": 168, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n] (letfn [(rng [n] (cons n (lazy-seq (rng (inc n))))) ;range starting with n\n                   (column [f m] (map #(partial f %) (rng m)))\n                   (row [g n] (map g (rng n)))]\n             (map #(row % n) (column f m))))\n  ([f m n s t] (take s (map #(take t %) (matrix f m n)))))", "problem": 168, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn inf-matrix\n  ([f]\n     (inf-matrix f 0 0))\n\n  ([f m n]\n     (letfn [(x [m n] (lazy-seq (cons (f m n) (x m (inc n)))))\n             (y [m n] (lazy-seq (cons (x m n) (y (inc m) n))))]\n       (y m n)))\n\n  ([f m n s t]\n     (take s (map #(take t %) (inf-matrix f m n)))))", "problem": 168, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn im\n  ([f] (im f 0 0))\n  ([f m n s t] (take s (map #(take t %) (im f m n))))\n  ([f m n]\n     (letfn [(r [f i j]\n               (lazy-seq (cons (f i j) (r f i (inc j)))))]\n       (lazy-seq (cons (r f m n) (im f (inc m) n))))))", "problem": 168, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn [f & l]\n  (let [l (vec l)\n        y (get l 0 0)\n        x (get l 1 0)\n        s (get l 2 0)\n        t (get l 3 0)\n        finite (get l 3)\n        \n        g (fn g [f y x t] (if (and finite (zero? t))\n                            nil\n                            (lazy-seq (cons (f y x) (g f y (inc x) (dec t))))))\n        h (fn h [f y x s] (if (and finite (zero? s))\n                            nil\n                            (lazy-seq (cons (g f y x t) (h f (inc y) x (dec s))))))]\n    (h f y x s) ))", "problem": 168, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(letfn [(from\n         [n]\n         (lazy-seq\n          (cons n (from\n                   (inc n)))))]\n  \n  (fn matrix\n    ([f] (matrix f 0 0))\n  \n    ([f m n]\n     (lazy-seq\n      (cons (map (partial f m) (from n))\n            (map #(lazy-seq (cons (f %2 n) %))\n                 (matrix f (inc m) (inc n))\n                 (from (inc m))))))\n  \n    ([f m n s t]\n     (take s (map (partial take t)\n                  (matrix f m n))))))", "problem": 168, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn i\n  ([f] (i f 0 0))\n  ([f m n]\n   (let [r (fn r [f i] (lazy-cat [(f i)] (r f (+ i 1))))]\n     (r #(r (partial f %) n) m)))\n  ([f m n s t]\n   (map #(take t %) (take s (i f m n)))))", "problem": 168, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn foo\n  ([f]\n   (foo f 0 0))\n  ([f m n]\n   (letfn [(gen-ints [i]\n                    (cons i (lazy-seq (gen-ints (inc i)))))]\n     (let [integers-from-m (gen-ints m),\n           integers-from-n (gen-ints n)]\n       (map (fn [x]\n              (map #(f x %) integers-from-n))\n            integers-from-m))))\n  ([f m n s t]\n   (take s (map #(take t %) (foo f m n)))))", "problem": 168, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn pr168 \n  ([f]\n   (pr168 f 0 0)) \n  ([f i j]\n   (letfn [(row [i j]\n             (lazy-seq\n               (cons (f i j)\n                     (row i (inc j)))))]\n     (lazy-seq\n       (cons (row i j)\n         (pr168 f (inc i) j)))))\n  ([f i j n m]\n   (take n (map #(take m %)\n                 (pr168 f i j)))))", "problem": 168, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn [f & [r c h w]]\n  (letfn [(iter\n            ([] (iter 0))\n            ([a] (lazy-cat [a] (iter (inc a)))))]\n    (let [mtx (map (fn [a] (map (fn [b] (f a b)) (iter (or c 0)))) (iter (or r 0)))]\n      (if h\n        (take h (map (fn [a] (take w a)) mtx))\n        mtx)\n\n      )))", "problem": 168, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn ginfm \n  \n  ([f]\n   (let [grow (fn grow [j]\n                (\n                 (fn igrow [i]\n                   (lazy-seq\n                     (cons\n                       (f j i)\n                       (igrow (inc i))\n                       )))\n                 0))]\n     (\n      (fn gcolumn [j]\n        (lazy-seq\n          (cons\n            (grow j)\n            (gcolumn (inc j))\n            ))) \n      0) \n     ))\n  \n  ([f m n]\n   (let [grow (fn grow [j]\n                (\n                 (fn igrow [i]\n                   (lazy-seq\n                     (cons\n                       (f j i)\n                       (igrow (inc i))\n                       )))\n                 n))]\n     (\n      (fn gcolumn [j]\n        (lazy-seq\n          (cons\n            (grow j)\n            (gcolumn (inc j))\n            ))) \n      m) \n     ))\n  \n  ([f m n s t]\n     (let [grow (fn grow [j]\n                  (\n                   (fn igrow [i c]\n                     (lazy-seq\n                       (when (< c t)\n                         (cons\n                           (f j i)\n                           (igrow (inc i) (inc c))\n                           ))))\n                   n 0))]\n       (\n        (fn gcolumn [j d]\n          (lazy-seq\n            (when (< d s)\n              (cons\n                (grow j)\n                (gcolumn (inc j) (inc d))\n                )))) \n        m 0) \n       ))  \n  )", "problem": 168, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn infinite-matrix\n  ([f]\n   (infinite-matrix f 0 0))\n  ([f m n]\n   (infinite-matrix f m n nil nil))\n  ([f m n s t]\n   (let [ind-fn (fn ind-fn [k start limit]\n                  (lazy-seq (cons k\n                                  (when (or (not limit) (< k (+ start -1 limit)))\n                                    (ind-fn (inc k) start limit)))))\n         is (ind-fn m m s)\n         js (ind-fn n n t)]\n     (map #(map (partial f %) js) is))))", "problem": 168, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(letfn [(my-rep [i] (repeatedly #(identity i)))\n                    (my-range [i] (cons i (lazy-seq (my-range (inc i)))))]\n              (fn inf-mat\n                ([f] (inf-mat f 0 0))\n                ([f m n] (map #(map f (my-rep %) (my-range n)) (my-range m)))\n                ([f m n s t] (map #(map f (my-rep %) (take t (my-range n))) (take s (my-range m))))))", "problem": 168, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn imat[f & [m n s t]]\n  (let [m (or m 0)\n        n (or n 0)\n        continue? (fn [x] (or (nil? x) (> (dec x) 0)))\n        sdec (fn [x] (if (nil? x) nil (dec x)))\n        laze (fn laze [n' t']  (lazy-seq (cons (f m n') (when (continue? t')(laze (inc n') (sdec t'))))))]\n    (lazy-seq (cons (laze n t) (when (continue? s) (imat f (inc m) n (sdec s) t))))\n    ))", "problem": 168, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn infmat\n  ([f]\n   (let [range- (constantly (cons 0 (reductions + (repeatedly (constantly 1)))))]\n     (map (fn [i] (map (fn [j] (f i j)) (range-))) (range-))))\n  ([f m n]\n   (let [drop- (fn [n coll] ((apply comp (repeatedly n (constantly rest))) coll))\n         mat (infmat f)]\n        (lazy-seq (drop- m (map #(drop- n %) mat)))))\n  ([f m n s t]\n   (let [mat (infmat f m n)]\n     (lazy-seq (take s (map #(take t %) mat))))))", "problem": 168, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n] \n   (letfn [(lazy-row [row col]\n                     (lazy-seq (cons (f row col) (lazy-seq (lazy-row row (inc col))))))\n           (lazy-matrix [row start-col]\n                        (cons (lazy-row row start-col) (lazy-seq (lazy-matrix (inc row) start-col))))]\n     (lazy-seq (lazy-matrix m n))))\n  ([f m n s t] \n   (->> (infinite-matrix f m n)\n        (take s)\n        (map (partial take t)))))", "problem": 168, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn __\n  ([f]\n    (__ f 0 0))\n\n  ([f m n]\n    (letfn [(row\n             [i]\n             (lazy-seq (cons (col i n) (row (inc i)))))\n            (col\n              [i j]\n              (lazy-seq (cons (f i j) (col i (inc j)))))]\n      (row m)))\n\n  ([f m n s t]\n    (take s (map #(take t %) (__ f m n)))))", "problem": 168, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn [f & rest] (letfn [(col [i j] (lazy-seq (cons (f i j) (col i (inc j)))))                                                                                                                            \n                                                 (matrix [i j] (lazy-seq (cons (col i j) (matrix (inc i) j))))                                                                                                  \n                                                                                                                                                                                                                \n                                                 (col1 [i j l] (lazy-seq (if (= j l) nil (cons (f i j) (col1 i (inc j) l)))))                                                                                   \n                                                 (matrix1 [i j k l] (lazy-seq (if (= i k) nil (cons (col1 i j l) (matrix1 (inc i) j k l)))))]                                                                   \n                                                                                                                                                                                                                \n                                           (cond (empty? rest) (matrix 0 0)                                                                                                                                     \n                                                 (= (count rest) 2) (matrix (first rest) (second rest))                                                                                                         \n                                                 :else (matrix1 (nth rest 0) (nth rest 1) (+ (nth rest 0) (nth rest 2)) (+ (nth rest 1) (nth rest 3) )))))", "problem": 168, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn fk\n    ([f]\n       (fk f 0 0))\n    ([f i j]\n       (let [hf (fn hf [f i j]\n                    (lazy-cat [(f i j)]\n                              (hf f i (inc j))))]\n           (lazy-cat [(hf f i j)]\n                     (fk f (inc i) j))))\n    ([f i j a m]\n       (take a (map #(take m %)\n                    (fk f i j)))))", "problem": 168, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(letfn [(R [m c]\n          (if (zero? c) '()\n              (cons m (lazy-seq (R (inc m) (dec c))))))\n        (M\n          ([f m n s t] (map (fn [i]\n                              (map (fn [j] (f i j))\n                                   (R n t)))\n                            (R m s)))\n          ([f m n] (M f m n -1 -1))\n          ([f] (M f 0 0)))]\n  M)", "problem": 168, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn inf-matrix\n  ([f] (inf-matrix f 0 0))\n  ([f n m]\n   (letfn [(row [f n m]\n             (lazy-seq (cons (f n m) (row f n (inc m)))))]\n     (lazy-seq (cons (row f n m) (inf-matrix f (inc n) m)))\n     ))\n  ([f n m s t] (take s (map #(take t %) (inf-matrix f n m)))))", "problem": 168, "user": "5312cdaae4b08068f379ed03"}, {"problem": 168, "code": "(fn matrix\n  ([f] (matrix f 0 0 -1 -1))\n  ([f m n] (matrix f m n -1 -1))\n  ([f m n s t] (letfn [(nat [start finish]\n                  (when (not= finish 0)\n                   (cons start (lazy-seq (nat (inc start) (if (= -1 finish) finish (dec finish)))))))]\n                 (map (fn [i] (map (fn [j] (f i j)) (nat n t))) (nat m s)))))", "user": "4faf97d8e4b081705acca258"}, {"problem": 168, "code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n s t] (take s (map #(take t %) (matrix f m n))))\n  ([f m n]\n   (letfn [(g [r c] \n             (lazy-cat [(f r c)] (g r (inc c))))\n           (h [r]\n             (lazy-cat [(g r n)] (h (inc r))))]\n     (h m))))", "user": "52951156e4b02ebb4ef7501b"}, {"problem": 168, "code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n] (letfn [(fa [i j] (lazy-seq (cons (f i j) (fa i (inc j)))))\n                   (fb [i j] (lazy-seq (cons (fa i j) (fb (inc i) j))))]\n             (fb m n)))\n  ([f m n s t]\n    (take s (map #(take t %) (matrix f m n)))))", "user": "53a1b5c8e4b0ca733b9744c1"}, {"problem": 168, "code": "(fn build-matrix\n  ([f i j]\n   (let [build-row (fn br [f i j]\n                     (lazy-seq\n                      (cons (f i j) (br f i (inc j)))))]\n     (lazy-seq\n      (cons (build-row f i j) (build-matrix f (inc i) j)))))\n  ([f]\n   (build-matrix f 0 0))\n  ([f m n s t]\n   (take s (map #(take t %) (build-matrix f m n)))))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 168, "code": "(fn marix-fn\n  ([f m n] \n   (letfn [(col-fn [m n]\n                  (lazy-seq (cons (f m n) (col-fn m (inc n)))))\n           (row-fn [m n]\n                   (lazy-seq (cons (col-fn m n) (row-fn (inc m) n))))]\n     (row-fn m n)))\n  ([f]\n   (marix-fn f 0 0))\n  ([f m n s t]\n   (take s (map #(take t %) (marix-fn f m n)))))", "user": "536f871de4b0fc7073fd6e7f"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n    (infinite-matrix f 0 0))\n  ([f m n]\n    (letfn [(inner [i j] (lazy-seq (cons (f i j) (inner i (inc j)))))\n            (outer [i] (lazy-seq (cons (inner i n) (outer (inc i)))))]\n      (outer m)))\n  ([f m n s t]\n     (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "4dad76588e77d6ed63f12a44"}, {"problem": 168, "code": "(fn im \n  ([f] (im f 0 0))\n  ([f m n] (lazy-seq (cons \n            (im f m n 0)\n            (im f (inc m) n))))\n  ([f m n _] (lazy-seq (cons (f m n) (im f m (inc n) 0))))\n  ([f m n s t] (take s (map #(take t %) (im f m n))))\n  )", "user": "5281a445e4b0757a1b17143a"}, {"problem": 168, "code": "(fn\n  ([f]\n   (letfn [(next-nat [n]\n             (lazy-seq\n               (cons n (next-nat (inc n)))))]\n     (let [nats (next-nat 0)]\n       (map (fn [o] (map (partial f o) nats)) nats))))\n  ([f m n]\n   (letfn [(next-nat [n]\n             (lazy-seq\n               (cons n (next-nat (inc n)))))]\n     (let [ms (next-nat m)\n           ns (next-nat n)]\n       (map (fn [o] (map (partial f o) ns)) ms))))\n  ([f m n s t]\n   (letfn [(next-nat [n lim]\n             (lazy-seq\n               (if (< n lim)\n                 (cons n (next-nat (inc n) lim))\n                 nil)))]\n     (let [ms (next-nat m (+ m s))\n           ns (next-nat n (+ n t))]\n       (map (fn [o] (map (partial f o) ns)) ms)))))", "user": "52dfc89be4b09f7907dd1405"}, {"problem": 168, "code": "(fn my-matrix\n  ([f m n]\n   (let [inf-row (fn inf-row [f row-index col-index]\n                    (lazy-seq (cons (f row-index col-index) (inf-row f row-index (inc col-index)))))\n         inf-matrix (fn inf-matrix [f row-index col-index]\n                       (lazy-seq (cons (inf-row f row-index col-index) (inf-matrix f (inc row-index) col-index))))]\n     (inf-matrix f m n)))\n  ([f] (my-matrix f 0 0))\n  ([f m n s t] (take s (map #(take t %) (my-matrix f m n)))))", "user": "53527551e4b084c2834f4af0"}, {"problem": 168, "code": "(fn matrix \n\t([f]\n\t\t(matrix f 0 0))\n\t([f m n]\n\t\t(letfn [(lazy-row [m n]\n                    (lazy-seq (cons (f m n) (lazy-row m (inc n)))))]\n    \t\t(lazy-seq (cons (lazy-row m n) (matrix f (inc m) n)))))\n\t([f m n s t]\n  \t\t(take s (map #(take t %) (matrix f m n)))))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 168, "code": ";; Rather ugly peppering of lazy-seq everywhere to pass the class test tests. Done at end.\n;; Solution nice apart from that.\n\n(fn matrix [f & args]\n  (let [m (nth args 0 false)\n        n (nth args 1 false)\n        s (nth args 2 false)\n        t (nth args 3 false)]\n    (letfn [ (create-row-func [i]\n               (letfn [ (gen-row [j count]\n                          (if count\n                            (if (= count 0)\n                              nil\n                              (lazy-seq (cons (f i j) (lazy-seq \n                                             (gen-row (inc j) \n                                                      (dec count))))))\n                            (lazy-seq (cons (f i j) (lazy-seq\n                                           (gen-row (inc j) count))))))\n                        ]\n                 gen-row))\n             (gen-matrix [i j b c]\n               (if b\n                 (if (= b 0)\n                   nil                 \n                   (let [this-gen-row (create-row-func i)]\n                     (lazy-seq (cons (this-gen-row j c) \n                           (lazy-seq (gen-matrix (inc i) j (dec b) c))))))\n                 (let [this-gen-row (create-row-func i)]\n                   (lazy-seq (cons (this-gen-row j c) \n                         (lazy-seq (gen-matrix (inc i) j b c)))))))\n             ]\n      (if (and m n)\n        (lazy-seq (gen-matrix m n s t))\n        (lazy-seq (gen-matrix 0 0 s t))))))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f m n] \n   (letfn [\n           (infinite-row [f i j]\n             (lazy-seq (cons (f i j) (infinite-row f i (inc j))))\n             )\n\n           (infinite-col [f i j]\n             (lazy-seq (cons (infinite-row f i j) (infinite-col f (inc i) j)))\n             )\n           ]\n     (infinite-col f m n)\n     ))\n\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))\n   )\n\n  ([f]\n   (infinite-matrix f 0 0)\n   )\n  )", "user": "5244a10de4b0d8acf9ed6ab3"}, {"problem": 168, "code": "(fn mx\n  ([f] (mx f nil nil nil nil)) \n  ([f col-from row-from] (mx f col-from row-from nil nil))\n  ([f col-from row-from col-n row-n]  \n   (letfn [(range_ \n           ([] (range_ 0))\n           ([from] (cons from (lazy-seq (range_ (inc from)))))\n           ([from n] (if (zero? n)\n                       nil\n                       (cons from (lazy-seq (range_ (inc from) (dec n)))))))]\n   (let [row-param (remove nil? [row-from row-n])\n         col-param (remove nil? [col-from col-n])]\n     (map (fn [col] (map (fn [row] (f col row)) (apply range_ row-param))) (apply range_ col-param))))))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 168, "code": "(fn  \n  ([f m n] (letfn [(next-item [a b] (lazy-cat [(f a b)] (next-item a (inc b))))\n                   (next-line [a b] (lazy-cat [(next-item a b)] (next-line (inc a) b)))]\n             (lazy-seq (next-line m n))))\n  ([f] (letfn [(next-item [a b] (lazy-cat [(f a b)] (next-item a (inc b))))\n               (next-line [a b] (lazy-cat [(next-item a b)] (next-line (inc a) b)))]\n         (lazy-seq (next-line 0 0))))\n  ([f m n s t] (letfn [(next-item [a b] (lazy-cat [(f a b)] (next-item a (inc b))))\n                       (next-line [a b] (lazy-cat [(next-item a b)] (next-line (inc a) b)))]\n                 (lazy-seq (take s (map #(lazy-seq (take t %)) (next-line m n)))))))", "user": "532418f3e4b09d4e7a9b54d8"}, {"problem": 168, "code": "(fn M\n  ([f] (M f 0 0))\n  ([f m n]\n   (letfn [(in [i j] (lazy-seq (cons (f i j) (in i (inc j)))))\n           (out [i]  (lazy-seq (cons (in i n) (out (inc i)))))]\n     (out m)))\n  ([f m n s t] (take s (map #(take t %) (M f m n)))))", "user": "51febd40e4b0f1313d468a76"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n]\n    (lazy-seq\n      (letfn [(create-row [row-number from-col]\n                (lazy-seq\n                 (cons (f row-number from-col)\n                       (create-row row-number (inc from-col)))))]\n        (cons (create-row m n)\n              (infinite-matrix f (inc m) n)))))\n  ([f m n s t]\n    (take s (map (partial take t) (infinite-matrix f m n)))))", "user": "529e3a4fe4b04e0c58e87b92"}, {"problem": 168, "code": "(fn mapmap\n   ([f] (mapmap f 0 0))\n   ([f s1 s2]\n      (letfn [(maptake1 [f n1]\n                (lazy-seq\n                 (cons (f n1) (maptake1 f (inc n1)))))\n              (maptake2 [f n1 n2]\n                (lazy-seq\n                 (cons (f n1 n2) (maptake2 f n1 (inc n2)))))]\n        (maptake1 (fn [n1] (maptake2 f n1 s2)) s1)))\n   ([f s1 s2 t1 t2]\n      (take t1 (map #(take t2 %) (mapmap f s1 s2)))))", "user": "4ee26f01535d10e5ff6f5368"}, {"problem": 168, "code": "(let [drp #(second (split-at %1 %2))\n\t  rng (fn rng [i] (cons i (lazy-seq (rng (inc i)))))]\n\t(fn x \n\t\t([f] (map (fn [i] (map (fn [j] (f i j)) (rng 0))) (rng 0)))\n\t\t([f n m] (map #(drp m %) (drp n (x f))))\n\t\t([f n m s t] (take s (map #(take t %) (x f n m))))))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 168, "code": "(fn infmatrix\n                ([f]\n                  (let [newrange (fn f [n]\n                               (lazy-seq (cons n (f (inc n)))))]\n                    (map (fn g [s]\n                           (map (partial f (first s)) (rest s)))\n                         (map #(cons % (newrange 0)) (newrange 0)))))\n                     ([f m n]\n                       (let [newdrop (fn g [x w]\n                                       (if (== x 0)\n                                         w\n                                         (g (dec x) (rest w))))]\n                       (map #(newdrop n %) (newdrop m (infmatrix f)))))\n                     ([f m n s t]\n                       (map #(take t %) (take s (infmatrix f m n)))))", "user": "532727bae4b09d4e7a9b54fa"}, {"problem": 168, "code": "(fn [f & [m n s t]]\n    (letfn [(row-gen [row coll] (lazy-seq (cons (f row coll) (row-gen row (inc coll)))))\n            (coll-gen [row] (lazy-seq (cons ((if t (partial take t) identity) (row-gen row (or n 0))) (coll-gen (inc row)))))]\n      ((if s (partial take s) identity) (coll-gen (or m 0)))))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 168, "code": "(fn matrix \n  ([f] (matrix f 0 0))\n  ([f m n] (matrix f m n nil nil))\n  ([f m n s t]\n   (let [last-raw (when ((complement nil?) s) (+ m s))\n         last-column (when ((complement nil?) t) (+ n t))\n         iter-raw (fn iter-raw \n                    ([i] (iter-raw i n))\n                    ([i j] (if (and (not (nil? t)) (>= j last-column))\n                             []\n                             (lazy-seq (cons (f i j) (iter-raw i (inc j)))))))\n         iter-matrix (fn iter-matrix [i]\n                       (if (and (not (nil? s)) (>= i last-raw))\n                         []\n                         (lazy-seq (cons (iter-raw i) (iter-matrix (inc i))))))]\n     (iter-matrix m))))", "user": "52d00832e4b07d0d72b273b4"}, {"problem": 168, "code": "(fn mt\n  ([f m n]\n    (letfn [(row [i j]\n              (lazy-seq\n                (cons (f i j)\n                  (row i (inc j)))))]\n      (lazy-seq\n        (cons (row m n)\n          (mt f (inc m) n)))))\n  ([f]\n    (mt f 0 0))\n  ([f m n s t]\n    (take s (map #(take t %) (mt f m n)))))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 168, "code": "(fn MMat\n   ([op m n]\n      (letfn [(M1 [op m n]\n                (lazy-seq (concat [(op m n)] (M1 op m (inc n)))))\n              (M2 [op m n]\n                (lazy-seq (concat [(M1 op m n)] (M2 op (inc m) n))))]\n        (M2 op m n)\n        ))\n   ([op ]\n      (MMat op 0 0))\n\n   ([op m n s t]\n      (take s (map #(take t %) (MMat op m n))))\n   )", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n   (infinite-matrix f 0 0))\n  ([f m n]\n   (letfn [(inner [i j]\n             (lazy-seq (cons (f i j) (inner i (inc j)))))\n           (outer [i]\n             (lazy-seq (cons (inner i n) (outer (inc i)))))]\n     (outer m)))\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "5046f909e4b03b02161376b5"}, {"problem": 168, "code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f y x]\n     (let [row (fn row [f start] (lazy-cat [(f start)] (row f (inc start))))]\n       (lazy-cat [(row (partial f y) x)] (matrix f (inc y) x))))\n  ([f y x s t]\n     (take s (map #(take t %) (matrix f y x)))))", "user": "4ddb696b535d02782fcbe9fa"}, {"problem": 168, "code": "(fn matrix\n    ([f] (matrix f 0 0))\n    ([f m n] (matrix f m n 0 0))\n    ([f m n s t]\n       (let [tk (fn tk [n seq]\n                  (when-not (or (empty? seq) (zero? n))\n                    (lazy-seq\n                     (cons (first seq)\n                           (tk (dec n) (rest seq))))))\n             rng (fn rng [n] (lazy-seq (cons n (rng (inc n)))))\n             rep (fn rep [n] (lazy-seq (cons n (rep n))))\n             tkrow (if (zero? s) identity #(tk s %))\n             tkcol (if (zero? t) identity #(tk t %))\n             mkelm (fn [i row] (map #(f i %) row))]\n         (map mkelm (tkrow (rng m)) (rep (tkcol (rng n)))))))", "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"problem": 168, "code": "(fn im \n    ([f] (im f 0 0))\n    ([f m n] (im f m n -1 -1))\n    ([f m n s t]\n       (letfn [(lazy-rows [r c]\n                 (if (not= c (+ n t))\n                   (lazy-seq (cons (f r c) (lazy-rows r (inc c))))))\n               (lazy-matrix [r]\n                 (if (not= r (+ m s))\n                   (lazy-seq (cons (lazy-rows r n)\n                                   (lazy-matrix (inc r))))))]\n         (lazy-matrix m))))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 168, "code": "(letfn [(row [f i j mj]\n          (if (or (nil? mj) (< j mj))\n            (lazy-seq (cons (f i j) (row f i (inc j) mj)))\n            '()))\n        (col [f i j mi mj]\n          (if (or (nil? mi) (< i mi))\n            (lazy-seq (cons (row f i j mj) (col f (inc i) j mi mj)))\n            '()))\n        (cmb\n          ([f] (col f 0 0 nil nil))\n          ([f i j] (col f i j nil nil))\n          ([f i j s t] (col f i j (+ i s) (+ j t))))]\n  cmb)", "user": "538e36c7e4b0b51d73faae81"}, {"problem": 168, "code": "(fn matrix ([f m n]\n             (let [b (fn b [x y]\n                       (cons (f x y) (lazy-seq (b x (inc y))))\n                       )]\n               (lazy-seq ((fn a [x]\n                  (cons (lazy-seq (b x n)) (lazy-seq (a (inc x))))\n                  ) m))))\n   ([f] (matrix f 0 0))\n   ([f m n s t] (take s (map #(take t %) (matrix f m n))))\n   )", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n     (infinite-matrix f 0 0))\n  ([f i j]\n     (letfn [(row [i j]\n               (lazy-seq (cons (f i j)\n                               (row i (inc j)))))]\n       (lazy-seq (cons (row i j)\n                       (infinite-matrix f (inc i) j)))))\n  ([f i j rows row-width]\n     (->> (infinite-matrix f i j)\n          (map #(take row-width %))\n          (take rows))))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 168, "code": "(fn im\n  ([f] (im f 0 0))\n  ([f m n]\n    (letfn [(unwind [g i] (lazy-seq (cons (g i) (unwind g (inc i)))))]\n      (unwind #(unwind (partial f %) n) m)))\n  ([f m n s t] (take s (map (partial take t) (im f m n)))))", "user": "506ab9bae4b05d3b7762c74c"}, {"problem": 168, "code": "(fn i-mat\r\n  ([f] (i-mat f 0 0))\r\n  ([f m n s t] (take s (map #(take t %) (i-mat f m n))))\r\n  ([f m n]\r\n     (letfn [(inner [n] (lazy-seq (cons (f m n) (inner (inc n)))))]\r\n       (lazy-seq (cons (inner n) ( i-mat f (inc m) n))))))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 168, "code": "(letfn [(my-range [s]\n                  (cons s (lazy-seq (my-range (inc s)))))\n        (infinite-row [f r c]\n                      (lazy-seq (cons (f r c) (infinite-row f r (inc c)))))]\n  (fn infinite-matrix\n    ([f]\n     (for [r (my-range 0)]\n       (infinite-row f r 0)))\n    ([f m n]\n     (for [sr (my-range m)]\n       (infinite-row f sr n)))\n    ([f m n s t]\n     (take s (map #(take t %) (infinite-matrix f m n))))))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 168, "code": "(fn infinite-matrix \n  ([f] (infinite-matrix f 0 0))\n  ([f m n]\n   (letfn [(line [m] \n            (cons m (lazy-seq (line (inc m)))))]\n     (map (fn [m] (map #(f m %) (line n)))\n          (line m))))\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 168, "code": "(fn _\n  ([f]\n    (let [it (fn it [f i]\n               (lazy-seq\n                 (cons i (it f (f i)))))\n          r #(it inc %)]\n      (map #(map f (it identity %)\n                   (r 0))\n           (r 0))))\n  ([f m n]\n    (let [d #(lazy-seq ((fn [n s]\n                          (if (pos? n)\n                            (recur (dec n) (rest s))\n                            s)) % %2))]\n    (d m (map #(d n %) (_ f)))))\n  ([f m n s t]\n    (take s (map #(take t %) (_ f m n)))))", "user": "4ee4f4a9535d1385b2869d85"}, {"problem": 168, "code": "(fn i\n    ([f] (i f 0 0))\n    ([f m n]       \n       (lazy-seq\n        (cons\n         ((fn s [n] (lazy-seq (cons (f m n) (s (inc n))))) n)  \n              (i f (inc m) n))))\n    ([f m n s t]\n       (take s\n             (map #(take t %)\n                  (i f m n)))))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 168, "code": "(let [\n      my-range (fn my-range\n                 ([]  (my-range\t0))\n                 ([n] (lazy-seq (cons n (my-range (inc\tn)))))\n                 )\n\n      my-drop (fn my-drop [n s]\n                (if (= 0 n) s\n                    (lazy-seq\t(my-drop (dec n) (rest s)))))\n\n      infinite-matrix (fn infinite-matrix\n                        ([f]\n                           (let [infinite-row (fn ir [f i] (lazy-seq (map #(f i %) (my-range))))]\n                             (lazy-seq (map #(infinite-row f %) (my-range)))))\n                        ([f m n]\n                           (let [infinite-row (fn ir [f i] (lazy-seq (map #(f i %) (my-drop n (my-range)))))]\n                             (lazy-seq (map #(infinite-row f %) (my-drop m (my-range))))))\n                        ([f m n s t]\n                           (let [infinite-row (fn ir [f i] (lazy-seq (map #(f i %) (take t (my-drop n (my-range))))))]\n                             (lazy-seq (map #(infinite-row f %) (take s (my-drop m (my-range)))))))\n        \t\t)\n      ]\n  infinite-matrix\n)", "user": "530bf87ee4b02e82168697d5"}, {"problem": 168, "code": "(fn g\n    ([f] (g f 0 0))\n    ([f m n s t] (take s (map #(take t %) (g f m n))))\n    ([f m n] (map-indexed (fn [r _] (map-indexed (fn [c _] (f (+ m r) (+ n c))) (repeatedly rand))) (repeatedly rand))))", "user": "51e28063e4b08e53a149f0f2"}, {"problem": 168, "code": "(fn matrix\n\t([f m n s t]\n\t\t(take s (map #(take t %) (matrix f m n))))\n\t([f]\n\t\t(matrix f 0 0))\n\t([f m n]\n\t\t(letfn [(create-cell [i j]\n      \t         (lazy-seq\n      \t         \t(cons (f i j)\n      \t         \t\t(create-cell i (inc j)))))\n              (create-row [i j]\n              \t(lazy-seq\n              \t\t(cons (create-cell i j)\n              \t\t\t(create-row (inc i) j))))]\n              (create-row m n))))", "user": "54448e84e4b032a45b869393"}, {"problem": 168, "code": "(letfn [(digits\n            ([] (digits 0))\n            ([x] (digits 0 -1))\n            ([x y] (cons x (if (= x y) () (lazy-seq (digits (inc x) y))))))]\n    (fn infinite-matrix\n      ([f] (infinite-matrix f 0 0))\n      ([f m n] (infinite-matrix f m n (dec (- m)) (dec (- n))))\n      ([f m n s t] (map (fn [i] (map (fn [j] (f i j)) (digits n (dec (+ n t))))) (digits m (dec (+ m s)))))))", "user": "4f410b63e4b0e243712b1fc5"}, {"problem": 168, "code": "(fn [f & args]\n  (letfn [(gen-row [row max-row col max-col]\n                   (if (and max-col (>= col max-col))\n                     []\n                     (lazy-seq (cons (f row col) (gen-row row max-row (inc col) max-col)))))\n          (gen-matrix [row max-row col max-col]\n                      (if (and max-row (>= row max-row))\n                               []\n                               (lazy-seq (cons (gen-row row max-row col max-col) (gen-matrix (inc row) max-row col max-col)))))]\n    (let [[m n s t] args]\n      (gen-matrix (or m 0) (if s (+ m s) nil) (or n 0) (if t (+ n t) nil)))))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 168, "code": "(fn infinite-matrix\n    ([f] (infinite-matrix f 0 0))\n    ([f m n] (letfn [(integers [start]\n                       (cons start (lazy-seq (integers (inc start)))))]\n               (map (fn [i] (map (fn [j] (f i j)) (integers n))) (integers m))))\n    ([f m n s t] (map (partial take t)\n                      (take s (infinite-matrix f m n)))))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 168, "code": "(fn full-matrix [& [f a b c d]]\n  (letfn [(range*\n            ([] (range* 0))\n            ([n] (cons n (lazy-seq (range* (inc n)))))\n            ([n c] (take c (range* n))))\n          (repeat* [n]\n            (cons n (lazy-seq (repeat* n))))\n          (pair\n            ([f i] (map f (repeat* i) (range*)))\n            ([f i a] (map f (repeat* i) (range* a)))\n            ([f i a c] (map f (repeat* i) (range* a c))))\n          (matrix\n            ([f] (map #(pair f %) (range*)))\n            ([f a b] (map #(pair f % b) (range* a)))\n            ([f a b c d] (map #(pair f % b d) (range* a c))))]\n    (cond (nil? a) (matrix f)\n          (nil? c) (matrix f a b)\n          true (matrix f a b c d))))", "user": "53973e7be4b0b51d73faaee6"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n    (infinite-matrix f 0 0))\n  ([f m n]\n    (letfn [(inner [i j]\n                    (lazy-seq (cons (f i j) (inner i (inc j)))))\n            (outer [i]\n                   (lazy-seq (cons (inner i n) (outer (inc i)))))]\n      (outer m)))\n  ([f m n s t]\n    (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "5383668ee4b06839e8705edd"}, {"problem": 168, "code": "(fn im\n  ([f m n s t] (take s (map #(take t %) (im f m n))))\n  ([f] (im f 0 0))\n  ([f m n]\n    (letfn [(r [j] (lazy-seq (cons (f m j) (r (inc j)))))]\n      (lazy-seq\n        (cons (r n) (im f (inc m) n))))))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 168, "code": "(let [from (fn f [i] (cons i (lazy-cat (f (inc i)))))]\n    (fn im\n      ([f] (map (fn [i] (map (fn [j] (f i j)) (from 0))) (from 0)))\n      ([f m n] (map (fn [i] (map (fn [j] (f i j)) (from n))) (from m)))\n      ([f m n s t] (take s (map (partial take t) (im f m n))))))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 168, "code": "(fn [& args]\n  (letfn [(rng [n] (cons n (lazy-seq (rng (inc n)))))\n          (drp [n ns]\n            (if (= 0 n) ns (drp (dec n) (rest ns))))\n          (go\n            ([f] (for [i (rng 0)]\n                   (for [j (rng 0)]\n                     (f i j))))\n            ([f m n] (map #(drp n %) (drp m (go f))))\n            ([f m n s t] (map #(take t %) (take s (go f m n)))))]\n    (apply go args)))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 168, "code": "(fn a\n  ([f] (a f 0 0))\n  ([f m n]\n   (letfn [(r [x] (lazy-seq (cons x (r (inc x)))))]\n     (map (fn [i]\n            (map (fn [j] (f (+ i m) (+ j n)))\n                 (r 0)))\n          (r 0))))\n  ([f m n s t]\n   (map (fn [row]\n          (take t row))\n        (take s (a f m n)))))", "user": "4ec1b090535dfed6da9c6db5"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n    (infinite-matrix f 0 0))\n  ([f m n]\n    (let [rows (fn rows [f i j]\n                 (lazy-seq\n                   (cons (f i j) (rows f i (inc j)))))\n          cols (fn cols [f i j]\n                 (lazy-seq\n                   (cons (rows f i j) (cols f (inc i) j))))]\n      (cols f m n)))\n  ([f m n s t]\n    (take s (map #(take t %)\n                 (infinite-matrix f m n)))))", "user": "5353afa0e4b084c2834f4b03"}, {"problem": 168, "code": "(fn __\n  ([f] (__ f 0 0 -1 -1))\n  ([f a b] (__ f a b -1 -1))\n  ([f a b c d](when-not (zero? c) \n                (lazy-seq(cons \n                 ((fn q [ff x y t w](when-not (zero? w) (lazy-seq(cons (ff x y) (lazy-seq (q ff x (inc y) t (dec w)))))  )) f a b c d) \n                 (lazy-seq (__ f (inc a) b (dec c) d))) )  )))", "user": "52bbd09ee4b07a9af57922ee"}, {"problem": 168, "code": "(fn infmat\n  ([f m n]\n    (let [my_range (fn [n] (reductions + n (repeatedly (fn [] 1))))]\n       (map (fn [i] (map #(f i %) (my_range n))) (my_range m))))\n  ([f] (infmat f 0 0))\n  ([f m n s t] (take s (map #(take t %) (infmat f m n)))))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 168, "code": "(letfn [(span [n] (lazy-seq (cons n (span (inc n)))))] \n  (fn infinite\n    ([f] (for [i (span 0)] (for [j (span 0)] (f i j))))\n    ([f m n] (for [i (span m)] (for [j (span n)] (f i j))))\n    ([f m n s t] (for [i (take s (span m))] (for [j (take t (span n))] (f i j))))))", "user": "512b07f7e4b078b06821febb"}, {"problem": 168, "code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n] (letfn [(row [i j f] (lazy-seq (cons (f j i) (row (inc i) j f))))\n                   (col [i j f] (lazy-seq (cons (row i j f) (col i (inc j) f))))]\n             (col n m f)))\n  ([f m n s t] (take s (map #(take t %) (matrix f m n)))))", "user": "4f05ea25535dcb61093f6c02"}, {"problem": 168, "code": "(fn inf-mat \n  ([f] (inf-mat f 0 0))\n  ([f m n]\n  \t(letfn [(lazy-row [f i j] (lazy-seq (cons (f i j) (lazy-seq (lazy-row f i (inc j))))))\n\t\t\t(lazy-mat [f i j] (lazy-seq (cons (lazy-row f i j) (lazy-seq (lazy-mat f (inc i) j)))))]\n      (lazy-mat f m n)))\n  ([f m n s t] (take s (map (partial take t) (inf-mat f m n)))))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 168, "code": "(fn im\n  ([f]\n   (let [is (reductions + 0 (repeatedly (fn [] 1)))] \n     (map (fn [i] (map #(f i %) is)) is)))\n\n  ([f m n]\n   (let [d #(last (split-at % %2))]\n     (map #(d n %)\n          (d m (im f)))))\n\n  ([f m n s t]\n   (map #(take t %) \n        (take s (im f m n)))))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 168, "code": "(fn inf\n    ([f] (inf f 0 0))\n    ([f m n]\n       (letfn [(r [x] (lazy-seq (cons x (r (+ x 1)))))]\n         (map (fn [x]\n                (map (fn [y] (f x y))\n                     (r n)))\n              (r m))))\n    ([f m n s t] (take s (map #(take t %) (inf f m n)))))", "user": "4f3ec266e4b0e243712b1f8c"}, {"problem": 168, "code": "(fn inf-mat-fn\n\t([f m n] \t(letfn \t[(_range [a] (lazy-seq (cons a (_range (inc a)))))\n                         (inf-row [a] (map #(apply f [a %]) (_range n)))]\n                  (map inf-row (_range m))))\n  \n\t([f]\t\t(inf-mat-fn f 0 0))\n  \n\t([f m n s t]\t(take s (map #(take t %) (inf-mat-fn f m n)))))", "user": "54848141e4b0e286459a119e"}, {"problem": 168, "code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n]\n    (letfn [(row [i j] (lazy-seq (cons (f i j) (row i (inc j)))))\n            (table [i j] (lazy-seq (cons (row i j) (table (inc i) j))))]\n      (table m n)))\n  ([f m n s t]  (take s (map #(take t %) (matrix f m n)))))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 168, "code": "(fn inm\n  ([f] (inm f 0 0))\n\n  ([f m n*]\n   (letfn [(inf-f [n]\n             (lazy-seq\n              (cons (f m n)\n                    (lazy-seq (inf-f (inc n))))))]\n     (lazy-seq (cons (inf-f n*)\n                     (lazy-seq (inm f (inc m) n*))))))\n  \n  ([f m n s t]\n   (take s (map (partial take t) (inm f m n)))))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 168, "code": "(fn __\n  ([f] (__ f 0 0))\n  ([f m n s t] (take s (map #(take t %) (__ f m n))))\n  ([f m n]\n   (letfn [(row    [i j] (lazy-cat [(f   i j)] (row     i (inc j))))\n           (matrix [i j] (lazy-cat [(row i j)] (matrix (inc i) j)))]\n     (matrix m n))))", "user": "54c271b9e4b045293a27f602"}, {"problem": 168, "code": "(letfn [(myrange [from to] (when (< from to) (cons from (lazy-seq (myrange (inc from) to)))))\n        (mat [f m n] (map (fn [i] (map (fn [j] (f i j)) n)) m ))]\n  (fn ([f] (mat f (myrange 0 Double/POSITIVE_INFINITY) (myrange 0 Double/POSITIVE_INFINITY)))\n      ([f m n] (mat f (myrange m Double/POSITIVE_INFINITY) (myrange n Double/POSITIVE_INFINITY)))\n      ([f m n s t] (mat f (myrange m (+ m s)) (myrange n (+ n t))))))", "user": "54cc313de4b057c6fda3a28b"}, {"problem": 168, "code": "(letfn [(repeat' [x] (cons x (lazy-seq (repeat' x))))\n        (range'\n         ([n] (cons n (lazy-seq (range' (inc n)))))\n         ([n c] (when (> c 0) (cons n (lazy-seq (range' (inc n) (dec c)))))))]\n  (fn q\n    ([f] (q f 0 0))\n    ([f m n] (map #(map (fn [i j] (f i j)) (repeat' %) (range' n)) (range' m)))\n    ([f m n s t] (map #(map (fn [i j] (f i j)) (repeat' %) (range' n t)) (range' m s)))))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n]\n   (letfn [(iter [f v]\n             (lazy-seq\n              (cons v (iter f (f v)))))\n           (next-step [row]\n             (lazy-seq\n              (cons (map #(f row %) (iter inc n))\n                    (next-step (inc row)))))]\n     (next-step m)))\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 168, "code": "(fn mx\n    ([f] (mx f 0 0))\n    ([f m n] ((fn fi [i]\n                (lazy-seq (cons ((fn fj [j]\n                                   (lazy-seq (cons (f i j) (fj (inc j))))) n)\n                                (fi (inc i)))))\n              m))\n    ([f m n s t] (map #(take t %) (take s (mx f m n)))))", "user": "54c641f8e4b045293a27f628"}, {"problem": 168, "code": "(fn f-matrix\n  ([f]     (f-matrix f 0 0))\n  ([f m n s t]\n    (let [whole (f-matrix f m n)]\n      (take s (map (partial take t) whole))))\n  ([f m n] \n    (lazy-cat \n      [(lazy-cat [(f m n)] (first (f-matrix f m (inc n))))]\n      (f-matrix f (inc m) n))))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 168, "code": "(fn inf-matrix \n  ([f]\n    (inf-matrix f 0 0))\n  ([f m n]\n    (letfn [(col-i [i j]\n                   (cons [i j] (lazy-seq (col-i i (inc j)))))\n            (row-i [i]\n                   (cons (col-i i 0) (lazy-seq (row-i (inc i)))))\n            (gen-im [] \n                    (row-i 0))\n            (drp [i xs]\n                 (if (= i 0) xs (drp (dec i) (rest xs))))\n            (apply-fn [f im]\n                      (map #(map (fn [[x y]] (f x y)) %) im))] \n      (apply-fn f \n                (drp m (map #(drp n %) (gen-im))))))\n  ([f m n s t]\n    (letfn [(kp [i xs]\n                (if (= i 0) nil (cons (first xs) (kp  (dec i) (rest xs)))))]\n      (kp s (map #(kp t %) (inf-matrix f m n)))))\n  )", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 168, "code": "(fn [x & xs] \n  (letfn \n    [(genseq \n      [op i startj] \n      (lazy-seq \n\t      (cons (op i startj) \n                (genseq op i (inc startj))))\n          )\n     (genmat \n      [op starti startj]\n      (lazy-seq\n          (cons (genseq op starti startj) \n                (genmat op (inc starti) startj)))\n      )\n     ]\n    (let [ps (conj xs x)]\n      (case (count ps)\n        1 (genmat (first ps) 0 0)\n        3 (genmat (first ps) (second ps) (last ps))\n        5 (let [[op starti startj sizei sizej] ps] \n            (take sizei (map #(take sizej %) \n                             (genmat op starti startj)))\n        ))\n  )))", "user": "52faec2ee4b047fd55837004"}, {"problem": 168, "code": "(fn z\n  ([f] (z f 0 0))\n  ([f m n]\n    (letfn [(r [i j] (lazy-seq (cons (f i j) (r i (inc j)))))\n            (c [i j] (lazy-seq (cons (r i j) (c (inc i) j))))]\n      (c m n)))\n  ([f m n s t] (take s (map #(take t %) (z f m n)))))", "user": "50548ce8e4b0b1b9d1860ead"}, {"problem": 168, "code": "(fn p168 \n  ([f] (p168 f nil nil nil nil))\n  ([f m n] (p168 f m n nil nil))\n  ([f m n s t] (let [r (fn [lb qtd]\n                         (let [lb (if lb lb 0)\n                               rc (fn rc [s]\n                                    (let [lst (last s)]\n                                      (if (and qtd (= lst (dec (+ lb qtd))))\n                                        s\n                                        (concat s (lazy-seq (rc (list (inc (last s)))))))))]\n                           (rc (list lb))))]\n                 (map (fn [i]\n                        (map (fn [j] (f i j)) \n                             (r n t))) \n                      (r m s)))))", "user": "52c8758be4b0c2d177d62135"}, {"problem": 168, "code": "(fn p\n  ([f m n] (let [\n                 q1 (fn q1 [f i j]\n                      (lazy-seq (cons (f i j)\n                            (q1 f i (inc j)))))\n\n                 q2 (fn q2 [f i j]\n                      (lazy-seq (cons (q1 f i j)\n                            (q2 f (inc i) j))))\n                 ] (q2 f m n)))\n  ([f] (p f 0 0))\n  ([f m n s t] (take s (map #(take t %) (p f m n)))))", "user": "53664e3be4b0243289761e74"}, {"problem": 168, "code": "(fn im [f & [m n s t]]\n  (letfn\n      [(nums [num end]\n         (if (or (nil? end) (< num end))\n           (cons num (lazy-seq (nums (inc num) end)))\n           (list num)))]\n    (let\n        [c0 (or n 0)\n         cn (if (not (nil? t)) (dec (+ n t)))\n         r0 (or m 0)\n         rn (if (not (nil? s)) (dec (+ m s)))]\n      (map\n       (fn [row] (map (fn [col] (f row col)) (nums c0 cn)))\n       (nums r0 rn)))))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 168, "code": "(fn matr [& args]\r\n  (letfn [(matcol [f i j]\r\n            (lazy-seq (cons (f i j) (matcol f i (inc j)))))]\r\n    (apply \r\n      (fn ([f] (matr f 0 0))\r\n          ([f i j] (lazy-seq (cons (matcol f i j) (matr f (inc i) j))))\r\n          ([f a b x y] (take x (map #(take y %) (matr f a b))))) args)))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 168, "code": "(letfn [(entries [f x y] (lazy-seq (cons (f x y) (entries f x (inc y)))))\n        (matrix [f x y] (lazy-seq (cons (entries f x y) (matrix f (inc x) y))))]\n  (fn ([f] (matrix f 0 0))\n      ([f m n] (matrix f m n))\n      ([f m n s t] (take s (map #(take t %) (matrix f m n))))))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 168, "code": "(fn matrix\n  ([f]\n   (matrix f 0 0))\n  ([f i-min j-min i-max j-max]\n   (take i-max (map #(take j-max %) (matrix f i-min j-min))))\n  ([f i-min j-min]\n   (let [row (fn row [f i j]\n               (lazy-seq (cons (f i j) (lazy-seq (row f i (inc j))))))]\n     (lazy-seq (cons (row f i-min j-min) (lazy-seq (matrix f (inc i-min) j-min)))))))", "user": "50f10f7be4b06d9538fe211a"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([]\n   (let [col-seq (fn rec [i j]\n                   (cons [i j] (lazy-seq (rec i (+ j 1)))))\n         idx-mtx (fn rec [i j]\n                   (cons (col-seq i j) (lazy-seq (rec (+ i 1) j))))]\n     (idx-mtx 0 0)))\n  ([f]\n   (let [f2row (fn [row] (map #(apply f %) row))]\n     (map #(f2row %) (infinite-matrix))))\n  ([f m n]\n   (let [fromn (fn rec [n s]\n                 (if (= n 0) s\n                   (rec (- n 1) (lazy-seq (next s)))))]\n     (map #(fromn n %) (fromn m (infinite-matrix f)))))\n  ([f n m s t]\n   (map #(take t %) (take s (infinite-matrix f n m)))))", "user": "54bbaa8ee4b0ed20f4ff6ec0"}, {"problem": 168, "code": "(fn ims\n      ([f]\n       (ims f 0 0))\n     ([f m n]\n         (let [lazy-row (fn lr [r c0]\n                            (lazy-seq (cons (f r c0) (lr r (inc c0)))))]\n         (lazy-seq (cons (lazy-row m n) (ims f (inc m) n)))))\n     ([f m n s t]\n         (take s (map #(take t %) (ims f m n)))))", "user": "544e8369e4b0e39780006987"}, {"problem": 168, "code": "(fn as-matrix\n  ([f]\n   (as-matrix f 0 0))\n\n  ([f m n]\n   (let [list-from (fn list-from [x]\n                     (cons x (lazy-seq (list-from (inc x)))))\n         rs (list-from m)\n         cs (list-from n)]\n     (map (fn [i] (map (fn [j] (f i j)) cs)) rs)))\n\n  ([f m n s t]\n   (take s (map #(take t %) (as-matrix f m n)))))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 168, "code": "(fn mat\n  ([f] (mat f 0 0))\n  ([f m n]\n    (letfn [\n      (row [m n] (lazy-seq (cons (f m n) (row m (+ n 1)))))\n      (col [m] (lazy-seq (cons (row m n) (col (+ m 1)))))]\n      (col m)))\n  ([f m n s t]\n    (take s (map #(take t %) (mat f m n)))))", "user": "53500869e4b084c2834f4ad3"}, {"problem": 168, "code": "(fn mx\n  ([f m n]\n   (letfn [(ix [x] (lazy-seq (cons x (ix (inc x)))))\n           (ro [i] (map #(f i %) (ix n)))]\n     (map ro (ix m))))\n  ([f] (mx f 0 0))\n  ([f m n s t]\n     (map #(take t %) (take s (mx f m n)))))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 168, "code": "(fn [f & opts]\n  (let\n    [\n     v (vec opts)\n     m (or (get v 0) 0)\n     n (or (get v 1) 0)\n     s (get v 2)\n     t (get v 3)\n     \n     d ((fn row [i]\n         (lazy-seq (cons ((fn col [j]\n                  (lazy-seq (cons (f i j) (col (inc j))))) n) \n               (row (inc i))))) m)\n     \n]\n    (if s\n      (take s (map #(take t %) d))\n      d)))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 168, "code": "(fn g\n  ([f] (g f 0 0 Double/POSITIVE_INFINITY Double/POSITIVE_INFINITY))\n  ([f m n] (g f m n Double/POSITIVE_INFINITY Double/POSITIVE_INFINITY))\n  ([f m n s t] (let [r #(reductions + %1 (repeatedly (dec %2) (fn [] 1)))]\n                 (lazy-seq (if (> s 0)\n                             (cons\n                              (map (partial f m) (r n t))\n                              (lazy-seq (g f (inc m) n (dec s) t))))))))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 168, "code": "(fn x\n  ([f]\n   (x f 0 0))\n  ([f m n s t]\n   (take s (map #(take t %) (x f m n))))\n  ([f m n]\n   (letfn [(r [i] (lazy-seq (cons i (r (inc i)))))]\n     (map (fn [i] (map #(f i %) (r n)))\n          (r m)))))", "user": "51ad244fe4b09397d510977f"}, {"problem": 168, "code": "(fn __\n  ([f] (__ f 0 0))\n  ([f m n s t] (take s (map #(take t %) (__ f m n))))\n  ([f m n]\n   (letfn [(row [r c] (lazy-seq (cons (f r c) (row r (inc c)))))]\n     (lazy-seq\n       (cons (row m n) (__ f (inc m) n))))))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 168, "code": "(fn inf-matrix\n  ([f]\n   (inf-matrix f 0 0))\n  ([f m n]\n   (letfn [(rfn [x]\n                (lazy-seq\n                  (cons (f m x)\n                        (rfn (inc x)))))]\n     (lazy-seq\n       (cons (rfn n)\n             (inf-matrix f (inc m) n)))))\n  ([f m n s t]\n   (take s (map (partial take t) (inf-matrix f m n)))))", "user": "4e7db3b4535db169f9c796e1"}, {"problem": 168, "code": "(fn im\n  ([f] (im f 0 0))\n  ([f m n]\n   (letfn [(imrow [f i j]\n             (lazy-seq (cons (f i j) (imrow f i (inc j)))))]\n     (lazy-seq (cons (imrow f m n) (im f (inc m) n)))))\n  ([f m n s t] (take s (map #(take t %) (im f m n)))))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 168, "code": "(letfn [(genRow [f row startColumn] ;generating an infinite lazy row starting with startColumn\n                (lazy-seq\n                 (cons (f row startColumn) (genRow f row (inc startColumn)))))\n        (genMultipleRows [f startRow startColumn];generating infinite rows of lazy rows starting with startRow\n                         (lazy-seq\n                          (cons (genRow f startRow startColumn) (genMultipleRows f (inc startRow) startColumn))))]\n  (fn \n    ([f] (genMultipleRows f 0 0));generating infinite matrix starting with 0 0\n    ([f m n] (genMultipleRows f m n));generating infinite matrix starting with m n\n    ([f m n s t] (take s (map #(take t %) (genMultipleRows f m n))))));generating finite matrix", "user": "556c70dae4b09a3098a524fd"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n    (infinite-matrix f 0 0))\n  ([f m n]\n    (letfn [(inner [i j]\n              (lazy-seq (cons (f i j) (inner i (inc j)))))\n            (outer [i]\n              (lazy-seq (cons (inner i n) (outer (inc i)))))]\n      (outer m)))\n  ([f m n s t]\n    (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 168, "code": "(fn mat\n  \n  ([f] (mat f 0 0))\n  \n  ([f m n]\n   (lazy-seq (cons \n   ((fn r [m n] (lazy-seq (cons (f m n) (r m (inc n))))) m n)\n   (mat f (inc m) n))))\n  \n  ([f m n s t] (take s (map #(take t %) (mat f m n)))))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 168, "code": "(fn g\n  ([f] (g f 0 0))\n  ([f m n] (letfn [(a [r c] (lazy-seq (cons (f r c) (a r (+ 1 c)))))]\n             (lazy-seq (cons (a m n) (g f (+ 1 m) n)))))\n  ([f m n s t](take s (map #(take t %) (g f m n)))))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 168, "code": "(fn mat\n  ([f] (mat f 0 0))\n  ([f m n s t] (take s (map #(take t %) (mat f m n))))\n  ([f m n]\n   (letfn [(g [f n] (lazy-seq (cons (f n) (g f (inc n)))))]\n     (g (fn [i] (g #(f i %) n)) m))))", "user": "508157b2e4b0946d0443855c"}, {"problem": 168, "code": "(letfn [\n  ; Lazy sequence for row i (starting at column j).\n  (row [f i j]\n    (lazy-seq\n     (cons (f i j) (row f i (inc j)))))\n\n  ; Lazy sequence of rows (starting at i, each starting at column j).\n  (rows [f i j]\n    (lazy-seq\n     (cons (row f i j) (rows f (inc i) j))))]\n\n  (fn mat \n    ([f] \n     (rows f 0 0))\n    ([f m n] \n     (rows f m n))\n    ([f m n s t]\n     (take s (map #(take t %) (mat f m n))))))", "user": "53065acbe4b02e8216869792"}, {"problem": 168, "code": "(letfn [(my-range [start]\n  \t\t\t(cons start (lazy-seq (my-range (inc start)))))\n        (my-drop [n s]\n                 (if (zero? n) s (lazy-seq (my-drop (dec n) (rest s)))))\n\t\t(matrix\n  \t\t\t([f] (map (fn [i] (map (fn [j] (f i j))\n                                   (my-range 0)))\n        \t\t\t(my-range 0)))\n  \t\t\t([f m n]\n   \t\t\t\t(my-drop m (map #(my-drop n %) (matrix f))))\n         \t([f m n s t]\n   \t\t\t(take s (map #(take t %) (matrix f m n)))))]\n  matrix)", "user": "5553b924e4b0deb715856e06"}, {"problem": 168, "code": "(fn w\n  ([f] (w f 0 0))\n  ([f m n] (lazy-seq (cons (w nil f m n) (w f (inc m) n))))\n  ([_ f m n] (lazy-seq (cons (f m n) (w nil f m (inc n)))))\n  ([f m n s t] (take s (map (partial take t) (w f m n)))))", "user": "521b9f92e4b0c4ef0be8304c"}, {"problem": 168, "code": "(fn func\r\n  ([f]\r\n    (func f 0 0 nil nil))\r\n  ([f m n]\r\n    (func f m n nil nil))\r\n  ([f m n s t]\r\n    (let [\r\n      my-take (fn [n coll]\r\n        (if (nil? n) coll (take n coll)))\r\n      cell (fn cell [i j]\r\n        (lazy-seq (cons (f i j) (cell i (inc j)))))\r\n      row (fn row [i]\r\n        (lazy-seq (cons\r\n          (my-take t (cell i n)) (row (inc i)))))]\r\n      (my-take s (row m)))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 168, "code": "(letfn [(row [f row-index column-start] \n          (lazy-seq \n            (cons (f row-index column-start) \n                  (row f row-index (inc column-start)))))\n        (matrix [f row-start column-start]\n          (lazy-seq \n            (cons (row f row-start column-start) \n                  (matrix f (inc row-start) column-start))))]\n  (fn \n    ([f] (matrix f 0 0))\n    ([f m n] (matrix f m n))\n    ([f m n s t] (take s (map #(take t %) (matrix f m n))))))", "user": "50856bd1e4b004985b776e4c"}, {"problem": 168, "code": "(letfn [                                                                                                                        \n    (my-range                                                                                                                                           \n        ([] (my-range 0))                                                                                                       \n        ([n] (cons n (lazy-seq (my-range (inc n))))))                                                                                                   \n    (infinite-matrix                                                                                                            \n        ([f] (infinite-matrix f 0 0))                                                                                                                   \n        ([f m n] (map (fn [i] (map (fn[j] (f i j)) (my-range n))) (my-range m)))                                                \n        ([f m n s t] (take s (map #(take t %) (infinite-matrix f m n)))))                                                                               \n] infinite-matrix)", "user": "558b50d5e4b027778923762b"}, {"problem": 168, "code": "(fn inf-m\n  ([f] (inf-m f 0 0))\n  ([f m n]\n   (letfn [(inf-r\n             [f a b]\n             (lazy-seq\n              (cons (f a b) (inf-r f a (inc b)))))]\n     (lazy-seq\n      (cons (inf-r f m n)\n            (inf-m f (inc m) n)))))\n  ([f m n s t]\n   (take s (map #(take t %) (inf-m f m n)))))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n   (infinite-matrix f 0 0 nil nil))\n  ([f m n]\n   (infinite-matrix f m n nil nil))\n  ([f m n s t]\n   (letfn [(next-inner-seq [f i j max-j]\n             (lazy-seq\n              (when (or (nil? max-j) (< j max-j))\n                (cons (f i j)\n                      (next-inner-seq f i (inc j) max-j)))))\n           (next-outer-seq [f i j max-i max-j]\n             (lazy-seq\n              (when (or (nil? max-i) (< i max-i))\n                (cons (next-inner-seq f i j max-j)\n                      (next-outer-seq f (inc i) j max-i max-j)))))]\n     (let [max-i (if (nil? s) nil (+ m s))\n           max-j (if (nil? t) nil (+ n t))]\n       (next-outer-seq f m n max-i max-j)))))", "user": "55586905e4b0deb715856e2b"}, {"problem": 168, "code": "(let [g ((fn g [] (cons 0 (lazy-seq (map inc (g))))))]\n  (fn j\n    ([f]\n      (j f 0 0))\n    ([f m n]\n        (map (fn [r] (map #(f (+ r m) (+ % n)) \n                        g)) \n           g))\n    ([f m n s t]\n        (take s (map (partial take t) (j f m n))))))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 168, "code": "(fn it\n  ([f] (it f 0 0))\n  ([f n m]\n  ((fn a [x]\n     (lazy-seq (cons ((fn b [y]\n                       (lazy-seq (cons (f x y) (b (inc y))))) m) (a (inc x))))) n))\n  ([f n m p q] (take p (map #(take q %) (it f n m)))))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 168, "code": "(fn infinite-mat\n  ([f] (lazy-seq (infinite-mat f [0 0 false])))\n  ([f [x y t]] (if t\n                 (lazy-seq (cons (f x y) (infinite-mat f [x (inc y) true])))\n                 (lazy-seq (cons (infinite-mat f [x y true])\n                                 (infinite-mat f\n                                               [(inc x) y false])))))\n  ([f m n] (map #(nthrest % n) (nthrest (infinite-mat f) m)))\n  ([f m n s t] (map (partial take t) (take s (infinite-mat f m n)))))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 168, "code": "(fn a\n  ([f] (a f 0 0))\n  ([f m n]\n    (let [lazy-row (fn lazy-row [i j] (lazy-seq (cons (f i j) (lazy-row i (inc j)))))]\n      (lazy-seq (cons (lazy-row m n) (a f (inc m) n)))))\n  ([f m n s t]\n    (take s (map #(take t %) (a f m n)))))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 168, "code": "(fn ^:static\n  infinite-matrix\n  ([f]\n   {:pre [(ifn? f)]\n    :post [(instance? clojure.lang.LazySeq %)]}\n   (infinite-matrix f 0 0))\n  ([f m n]\n   {:pre [(ifn? f) (every? integer? [m n])]\n    :post [(instance? clojure.lang.LazySeq %)]}\n   (letfn [(cols [a b] (lazy-seq (cons (f a b) (cols a (inc b)))))\n           (rows [a] (lazy-seq (cons (cols a n) (rows (inc a)))))]\n     (rows m)))\n  ([f m n s t]\n   {:pre [(ifn? f) (every? integer? [m n s t])]\n    :post [(instance? clojure.lang.LazySeq %)]}\n   (map (partial take t) (take s (infinite-matrix f m n)))))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 168, "code": "(fn inf-mat \n  ([f] (inf-mat f 0 0))\n  ([f m n]\n   (let [inf-row (fn ir [i j] (lazy-seq (cons (f i j) (ir i (inc j)))))]\n      (lazy-seq (cons (inf-row m n) (inf-mat f (inc m) n)))))\n  ([f m n s t]\n   (take s (map #(take t %) (inf-mat f m n))) \n  ))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 168, "code": "(fn infmat [f & r]\n (letfn [(binfmat\n  ([f] (lazy-seq (binfmat f 0)))\n  ([f a] (lazy-seq (cons (binfmat f a 0) (binfmat f (inc a)))))\n  ([f i j] (lazy-seq (cons (f i j) (binfmat f i (inc j))))))]\n  (case (count r)\n         0 (binfmat f)\n         2 (lazy-seq (cons (binfmat f (first r) (second r))\n                                           (infmat f (inc (first r)) (second r)) \n))   \n     4 (let [m (first r) n (second r) s (nth r 2) t (nth r 3)]\n             (take s (map #(take t %) (infmat f m n)))))))", "user": "52747090e4b03e8d9a4a74a5"}, {"problem": 168, "code": "(letfn [(r [i] (cons i (-> i inc r lazy-seq)))]\n   (fn !([f]     (! f 0 0))\n        ([f m n] (map #(map (partial f %) (r n)) (r m)))\n        ([f m n s t] (map #(map (partial f %) (take t (r n))) (take s (r m))))))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 168, "code": "(fn lazy-matrix\n  ([f] (lazy-matrix f 0 0))\n  ([f m n s t] (take s (map (partial take t)\n                       (lazy-matrix f m n))))\n  ([f m n]\n   (letfn [(lazy-row [j]\n            (lazy-seq (cons (f m j)\n                            (lazy-row (inc j)))))]\n     (lazy-seq (cons (lazy-row n)\n                     (lazy-matrix f (inc m) n))))))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 168, "code": "(fn im\n ([f] (im f 0 0))\n ([f m n]\n    (let [iter (fn iter [n] (lazy-seq (cons n (iter (inc n)))))]\n    (map \n      (fn [a] (map #(f a %) (iter n)))\n    (iter m))))\n ([f m n s t]\n   (map (partial take t) (take s (im f m n)))))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 168, "code": "(fn inf-matrix ([f]\n                  (letfn ((cell [x y] \n                              (lazy-seq (cons (f x y) (cell x (+ 1 y)))))\n                          (row [x] \n                               (lazy-seq (cons (cell x 0) (row (+ 1 x))))))\n                    (row 0)))\n                 ([f m n] \n                  (map #(nthrest % n) (nthrest (inf-matrix f) m)))\n                 ([f m n s t]\n                  (map #(take t %) (take s (inf-matrix f m n))))\n\n    )", "user": "5245e320e4b09dbe66b56177"}, {"problem": 168, "code": "(fn infinite-matrix \n    ([f] (infinite-matrix f 0 0))\n    ([f m n] \n      (letfn [(nextn [m n] (lazy-seq (cons (f m n) (nextn m (inc n)))))]\n        (lazy-seq \n          (cons (nextn m n)\n                (infinite-matrix f (inc m) n)))))\n    ([f m n s t]\n      (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 168, "code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n]\n   (letfn [(row [i j]\n                (lazy-seq (cons (f i j) (row i (inc j)))))\n           (mat [i j]\n                (lazy-seq (cons (row i j) (mat (inc i) j))))]\n     (mat m n)))\n  ([f m n s t]\n   (take s (map #(take t %) (matrix f m n)))))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 168, "code": "(fn i\n  ([f]\n    (i f 0 0))\n  ([f m n]\n    (i f m n -1 -1))\n  ([f m n s t]\n    (let [g (fn g [x y t]\n              (when-not (= t 0)\n                (lazy-cat [(f x y)] (g x (inc y) (dec t)))))\n          h (fn h [x s t]\n              (when-not (= s 0)\n                (lazy-cat [(g x n t)] (h (inc x) (dec s) t))))]\n      (h m s t))))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 168, "code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n]\n    (letfn [\n      (cols [r c] (lazy-seq (cons (f r c) (cols r (inc c)))))\n      (rows [r] (lazy-seq (cons (cols r n) (rows (inc r)))))]\n      (rows m)))\n  ([f m n s t]\n    (take s (map #(take t %) (matrix f m n)))))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 168, "code": "(fn x\n  ([f]         (x f 0 0))\n  ([f m n]     (let [c (fn r [i] (cons i (lazy-seq (r (inc i)))))]\n                 (map (fn [i]\n                        (map #(f i %)\n                              (c n)))\n                      (c m))))\n  ([f m n s t] (take s (map #(take t %)\n                            (x f m n)))))", "user": "4f9d8083e4b0dcca54ed6d23"}, {"problem": 168, "code": "(fn inf-matrix\n  ([f] (inf-matrix f 0 0))\n  ([f m n]\n   (lazy-seq (cons ((fn inf-matrix-row [i j]\n                      (lazy-seq (cons (f i j)\n                                      (inf-matrix-row i (inc j)))))\n                     m n)\n                   (inf-matrix f (inc m) n))))\n  ([f m n s t] (map (partial take t) (take s (inf-matrix f m n)))))", "user": "5339c105e4b0e30313ee6cae"}, {"problem": 168, "code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n] (let [fc (fn fc [row col]\n                      (lazy-seq (cons (f row col) (fc row (inc col)))))\n                 fr (fn fr [row]\n                      (lazy-seq (cons (fc row n) (fr (inc row)))))]\n             (fr m)))\n  ([f m n s t] (let [fc (fn fc [row col]\n                          (when (< (- col n) t)\n                            (lazy-seq (cons (f row col) (fc row (inc col))))))\n                     fr (fn fr [row]\n                          (when (< (- row m) s)\n                            (lazy-seq (cons (fc row n) (fr (inc row))))))]\n                 (fr m))))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 168, "code": "(fn inf-matrix\n  ([f x y]\n  (letfn [(lazy-row [f x y]\n            (lazy-seq (cons (f x y) (lazy-seq (lazy-row f x (inc y))))))]\n    (lazy-seq (cons (lazy-row f x y) (lazy-seq (inf-matrix f (inc x) y))))))\n  ([f]\n   (inf-matrix f 0 0))\n  ([f x y s t]\n   (take s (map #(take t %) (inf-matrix f x y)))))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 168, "code": "(fn infmat \n  ([f] (infmat f 0 0 ))\n  ([f m n s t]\n   (take s (map #(take t %) (infmat f m n))))\n  ([f m n] \n  (letfn [(positive-numbers [v] (concat [v] (lazy-seq (positive-numbers (inc v)))))]\n    (let [xseq (positive-numbers m)\n          yseq (positive-numbers n)]\n      (map (fn [x] (map (fn [y] (f x y)) yseq)) xseq)\n      )\n    )\n  ) \n  )", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "537e104ce4b06839e8705e9a"}, {"problem": 168, "code": "(fn matrix \n  ([f m n]\n    (letfn [(makeRow [x y] (lazy-seq (cons (f x y) (makeRow x (inc y)))))\n            (makeCol [x] (lazy-seq (cons (makeRow x n) (makeCol (inc x)))))]\n      (makeCol m)))\n  ([f] (matrix f 0 0))\n  ([f m n s t]\n    (take s (map #(take t %) (matrix f m n)))))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 168, "code": "(letfn [(integers\r\n           ([] (integers 0))\r\n           ([n] (lazy-seq (cons n\r\n                                (integers (inc n))))))\r\n\r\n        (infinite-matrix [f & [m n & [s t]]]\r\n          (let [m (or m 0)\r\n                n (or n 0)\r\n                A (map (fn [i]\r\n                         (map (fn [j]\r\n                                (f i j))\r\n                              (integers n)))\r\n                       (integers m))]\r\n            (if (and s t)\r\n              (take s (map #(take t %) A))\r\n              A)))]\r\n  infinite-matrix)", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 168, "code": "(fn i\n  ([f] (i f 0 0))\n  ([f m n]\n     (lazy-seq (cons ((fn r [n] (lazy-seq (cons (f m n) (r (inc n))))) n)\n                     (i f (inc m) n))))\n  ([f m n s t] (take s (map (partial take t) (i f m n)))))", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 168, "code": "(fn inf\n  ([f] (inf f 0 0))\n  ([f m n] (inf f m n Double/POSITIVE_INFINITY Double/POSITIVE_INFINITY))\n  ([f m n s t]\n   (let [inner (fn inner [i j]\n                 (lazy-seq (cons (f i j)\n                                 (if (< (inc j) (+ t n)) (inner i (inc j))))))\n         outer (fn outer [i]\n                 (lazy-seq (cons ((partial inner i) n)\n                                 (if (< (inc i) (+ s m)) (outer (inc i))))))]\n     (outer m))))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 168, "code": "(fn matrix \n\n  ([f] (matrix f 0 0))\n\n  ([f m n] \n   (letfn [\n           (A [x y] (lazy-seq (cons (f x y) (A x (inc y)))))\n           (B [x y] (lazy-seq (cons (A x y) (B (inc x) y))))\n          ]\n     (B m n)))\n\n  ([f m n s t] \n   (take s (map (partial take t) (matrix f m n)))))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 168, "code": "(letfn [(row \n         ([f r] (row f r 0))\n         ([f r c] (lazy-seq (cons (f r c) (row f r (inc c))))))\n\n        (matrix\n         ([f] (matrix f 0))\n         ([f r] (lazy-seq (cons (row f r) (matrix f (inc r))))))\n\n        (my-drop\n         [n coll]\n         (if (zero? n)\n           coll\n           (lazy-seq (my-drop (dec n) (rest coll)))))\n\n        (cropped-matrix\n         ([f] (cropped-matrix f nil nil nil nil))\n         ([f m n] (cropped-matrix f m n nil nil))\n         ([f m n s t] (let [m1 (matrix f)\n                            m2 (if (and m n)\n                                 (->> m1 \n                                      (map (partial my-drop n))\n                                      (my-drop m))\n                                 m1)\n                            m3 (if (and s t)\n                                 (->> m2\n                                      (map (partial take t))\n                                      (take s))\n                                 m2)]\n                        m3)))]\n  cropped-matrix)", "user": "55f2e47de4b06e875b46ce4d"}, {"problem": 168, "code": "(fn ans\n   ([f] (ans f 0 0))\n   ([f n m]\n    (let [inseq (fn _inseq [f n m]\n                  (lazy-seq (cons (f n m) (_inseq f n (inc m)))))]\n      (lazy-seq\n        (cons (inseq f n m) (ans f (inc n) m)))\n      )\n     )\n   ([f n m s t] (take s (map #(take t %) (ans f n m))))\n   )", "user": "55a372f1e4b0acc240e31537"}, {"problem": 168, "code": "(fn inf-mat\n  ([f r c]\n    (let [range-wtf (fn wtf [x]\n                      (cons x (lazy-seq (wtf (inc x)))))\n          rows (map #(partial f %) (range-wtf r))]\n      (map #(map % (range-wtf c)) rows)))\n  ([f]\n    (inf-mat f 0 0))\n  ([f r c nr nc]\n    (take nr (map #(take nc %) (inf-mat f r c)))))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 168, "code": "(fn matrix\n    ([f] (matrix f 0 0))\n    ([f m n]\n     (let [;; This fn returns the tail of row `i` starting at position `j`.\n           ray (fn ray [i j]\n                 (lazy-seq (cons (f i j)\n                                 (ray i (inc j)))))]\n       (lazy-seq (cons (ray m n)\n                       (matrix f (inc m) n)))))\n    ([f m n s t]\n     (->> (matrix f m n)\n          (take s)\n          (map (partial take t)))))", "user": "4fc6305de4b0ee37620e180b"}, {"problem": 168, "code": "(fn infMatrix\n  ([f] (infMatrix f 0 0))\n  ([f row col] (letfn [(lazy-col [f row col]\n                         (lazy-seq (cons (f row col)\n                                         (lazy-col f row (inc col)))))]\n                 (lazy-seq (cons (lazy-col f row col)\n                                 (infMatrix f (inc row) col)))))                                                                                    \n  ([f row col s t] (take s (map #(take t %) (infMatrix f row col)))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 168, "code": "(fn prob168\n  ;; return infinite matrix A\n  ([f] (prob168 f 0 0))\n\n  ;; return matrix A with m rows and n columns removed\n  ([f m n] \n   (letfn [(rows [i j]\n             (lazy-seq (cons (f i j) (rows i (inc j)))))\n           (cols [i]\n             (lazy-seq (cons (rows i n) (cols (inc i)))))]\n     (cols m)))\n\n  ;; return finite s-by-t matrix with first t entires of each first s rows of matrix b\n  ([f m n s t]\n   (take s (map #(take t %) (prob168 f m n))))\n  )", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 168, "code": "(fn __\n  ([f m n s t]\n   (let [my-range (fn my-range [i]\n                    (cons i (lazy-seq (my-range (inc i)))))]\n     (map (fn [r]\n            (map (fn [c] (f r c))\n                 (let [ls (my-range n)]\n                   (if t (take t ls) ls))))\n          (let [ls (my-range m)]\n            (if s (take s ls) ls)))))\n  ([f m n] (__ f m n nil nil))\n  ([f]     (__ f 0 0 nil nil)))", "user": "530b8580e4b02e82168697cc"}, {"problem": 168, "code": "(fn M\n  ([f] (M f 0 0))\n  ([f m n]\n    (letfn [(R [i] (lazy-seq (cons (C i n) (R (inc i)))))\n            (C [i j] (lazy-seq (cons (f i j) (C i (inc j)))))] (R m)))\n  ([f m n s t] (map (partial take t) (take s (M f m n)))))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 168, "code": "(fn im\n  ([f m n] (letfn [(inf [st]\n                 (lazy-seq (cons st (inf (inc st)))))]\n             (map (fn [i] (map (fn [j] (f i j)) (inf n))) (inf m))))\n  ([f] (im f 0 0))\n  ([f m n s t] (take s (map #(take t %) (im f m n)))))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 168, "code": "(fn matrix\n  ([f] (matrix f 0 0 nil nil))\n  ([f m n] (matrix f m n nil nil))\n  ([f m n s t]\n   (letfn [(row [i]\n             (lazy-seq\n               (when (or (nil? s) (< (- i m) s))\n                 (cons (col i n)\n                       (row (inc i))))))\n           (col [i j]\n             (lazy-seq\n               (when (or (nil? t) (< (- j n) t))\n                 (cons (f i j)\n                       (col i (inc j))))))]\n     (row m))))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 168, "code": "(fn my-f\n  ([f a b] ((fn other [[a b]] (lazy-cat (cons ((fn stuff [[a b]] (lazy-cat (cons (f a b) \n                                                                                 (lazy-seq (stuff [a (inc b)]))))) [a b]) \n                                              (lazy-seq (other [(inc a) b]))))) [a b]))\n  ([f] (my-f f 0 0))\n  ([f a b c d] (lazy-cat (take c (map #(take d %) (my-f f a b))))))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 168, "code": "(fn matrix\n\t([op] (matrix op 0 0))\n\t([op y x] \n\t\t(letfn [(row\n\t\t\t\t\t[y x op] (lazy-seq (cons (op y x) (row y (inc x) op)))\n\t\t\t\t)]\n\t\t(lazy-seq (cons (row y x op) (matrix op (inc y) x)))))\n\t([op y x dy dx]\n\t\t(take dy (map #(take dx %) (matrix op y x))))\n)", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 168, "code": "(fn matrix\n  ([f] \n   (matrix f 0 0))\n  ([f m n]\n   (letfn [(row [f m n]\n                (lazy-seq\n                 (cons (f m n)\n                       (lazy-seq (row f m (inc n))))))]\n     (lazy-seq\n      (cons (row f m n) \n            (lazy-seq (matrix f (inc m) n))))))\n  ([f m n s t]\n   (take s \n         (map #(take t %) \n              (matrix f m n)))))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n   (letfn [(row [f j]\n             (lazy-seq\n               (cons (f j) (row f (inc j)))))\n           (matrix [f i]\n             (lazy-seq\n               (cons (row (partial f i) 0) (matrix f (inc i)))))]\n     (matrix f 0)))\n  ([f m n]\n   (letfn [(my-drop [n s]\n             (if (< n 1)\n               s\n               (recur (dec n) (rest s))))]\n   (map #(my-drop n %) (my-drop m (infinite-matrix f)))))\n  ([f m n s t]\n   (map #(take t %) (take s (infinite-matrix f m n)))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 168, "code": "(fn g \n\n([f m n] (letfn [ (cols [f r c]  (lazy-seq (cons (f r c) (cols f r (inc c)))))\n                  (rows [f r c]  (lazy-seq (cons (cols f r c) (rows f (inc r) c)))) ]\n              (rows f m n)))\n  \n([f]     (g f 0 0) ) \n    \n([f m n s t]  (take s (map #(take t %) (g f m n)))))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 168, "code": "(fn matrix\n   ([f] (matrix f 0 0))\n   ([f n m]\n     (letfn[ (row [i j] (lazy-seq (cons (f i j) (row i (inc j))))) \n                 (mm [i] (lazy-seq (cons (row i m) (mm (inc i)))))] \n            (mm n)\n         ))\n   ([f n m s t] (map #(take t %) (take s (matrix f n m))))\n)", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 168, "code": "(fn infm\n  ([f]\n    (infm f 0 0))\n  ([f m n]\n    (letfn [(inner [i j]\n              (lazy-seq (cons (f i j) (inner i (inc j)))))\n          (outer [i]\n              (lazy-seq (cons (inner i n) (outer (inc i)))))]\n      (outer m)))\n  ([f m n s t]\n    (take s (map #(take t %) (infm f m n)))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 168, "code": "(fn gen-infinite-matrix \n  ([func] \n   (gen-infinite-matrix func 0 0))\n  ([func from-row from-col] \n    (letfn [(gen-range [from]\n            (lazy-seq\n              (cons from (gen-range (inc from)))))\n          (gen-infinite-cols [func each-col from-col]\n            (map (partial func each-col) (gen-range from-col)))\n          (gen-infinite-rows [func from-row from-col]\n            (map #(gen-infinite-cols func % from-col) (gen-range from-row)))]\n      (gen-infinite-rows func from-row from-col)))\n  ([func from-row from-col until-row until-col]\n     (take until-row \n       (map #(take until-col %) (gen-infinite-matrix func from-row from-col)))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 168, "code": "(fn inmat\n              ([f] (inmat f 0 0))\n              ([f m n] (letfn [(row-from [r]\n                                 (letfn [(col-from [c] (lazy-seq (cons (f r c) (col-from (+ c 1)))))]\n                                   (lazy-seq (cons (col-from n) (row-from (+ r 1))))))]\n                     (row-from m)))\n              ([f m n s t] (take s (map #(take t %) (inmat f m n)))))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 168, "code": "(fn inf-matrix\n  ([f]\n   (letfn [(r [i j]\n             (lazy-seq (cons (f i j) (r i (inc j)))))\n           (mx [i j]\n             (lazy-seq\n              (cons (r i j)\n                    (mx (inc i) j))))]\n     (mx 0 0)))\n  ([f m n]\n   (letfn [(r [j r']\n             (lazy-seq (cons (nth r' j)\n                             (r (inc j) r'))))\n           (mx [i j mx']\n             (lazy-seq\n              (cons (r j (nth mx' i))\n                    (mx (inc i) j mx'))))]\n     (mx m n (inf-matrix f))))\n  ([f m n s t]\n   (map #(take t %) (take s (inf-matrix f m n)))))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 168, "code": "(fn lambda\n  ([f] (lambda f 0 0))\n  ([f m n] (letfn [(g [t] (lazy-seq (cons (f m t) (g (inc t)))))]\n             (lazy-seq (cons (g n) (lambda f (inc m) n)))))                                                                                                               \n  ([f m n s t] (take s (map #(take t %) (lambda f m n)))))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 168, "code": "(fn z\n  ([f] (z f 0 0))\n  ([f x y m n] (take m (map #(take n %) (z f x y))))\n  ([f x y] (letfn [(lz [f x y]\n                     (lazy-seq (cons (f x y) (lz f x (inc y)))))\n                   (lzz [f x y]\n                     (lazy-seq (cons (lz f x y) (lzz f (inc x) y))))]\n    (lzz f x y))))", "user": "4f32a7f1e4b0d6649770a095"}, {"problem": 168, "code": "(let [r (fn r [x y f]\n  (lazy-seq (cons (f x y) (lazy-seq (r x (+ y 1) f)))))\nr2 (fn r2 [x y f]\n  (lazy-seq (cons (r x y f) (lazy-seq (r2 (+ x 1) y f)))))]\n  (fn \n    ([f n m s t] (take s (map #(take t %) (r2 n m f))))\n    ([f n m] (r2 n m f))\n    ([f]\n    (r2 0 0 f))))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 168, "code": "(fn IM ([f]\n   (let [row (fn r [i j] (lazy-seq (cons (f i j)  (r i (inc j)))))\n         matrix (fn m [i] (lazy-seq (cons (row i 0)  (m (inc i)))))]\n     (matrix 0)))\n  ([f m n] (IM #(f (+ m %1) (+ n %2))))\n  ([f m n s t] (take s (map (partial take t)(IM f m n)))))", "user": "5649615be4b0284900eef641"}, {"problem": 168, "code": "(fn [f & [m n s t]]\n  (letfn [(ml2 [f x y]\n            (lazy-seq\n             (cons\n              (f x y)\n              (ml2 f x (inc y)))))\n          (ml [f x y]\n            (lazy-seq\n             (cons\n              (ml2 f x y)\n              (ml f (inc x) y))))]\n      (let [l (if (and m n)\n                (ml f m n)\n                (ml f 0 0))]\n        (if (and s t)\n          (take s (map #(take t %) l))\n          l))))", "user": "52c25645e4b07a9af579237d"}, {"problem": 168, "code": "(fn i\n  ([f]\n   (i f 0 0))\n  ([f a b]\n   (i f a b -1 -1))\n  ([f a b j k]\n   ((fn r [f a b y x]\n      (lazy-seq\n        (cons\n          ((fn c [a b y x]\n             (lazy-seq\n               (cons\n                 (f a b)\n                 (when (or (= k -1) (< b x))\n                   (c a (inc b) y x)))))\n           a b y x)\n        (when (or (= j -1) (< a y))\n          (r f (inc a) b y x)))))\n    f a b (+ a j -1) (+ b k -1))))", "user": "52bacfa8e4b07a9af57922d6"}, {"problem": 168, "code": "(fn lm\n  ([f] (lm f 0 0))\n  ([f, m, n, s, t] (take s (map #(take t %) (lm f m n))))\n  ([f x y] (letfn[\n                  (lr [ix iy] (lazy-seq (cons (f ix iy) (lr ix (inc iy)))))\n                  ]\n             (lazy-seq (cons (lr x y) (lm f (inc x) y)))\n             )))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 168, "code": "(fn function-metrices\n  ([f m n] (letfn [(function-series [a b]\n                     (lazy-seq (cons (f a b) (lazy-seq (function-series a (inc b))))))\n                   (function-matrix [a b]\n                     (lazy-seq (cons (function-series a b) (lazy-seq (function-matrix (inc a) b)))))]\n             (function-matrix m n)))\n  ([f] (function-metrices f 0 0))\n  ([f m n s t] (map #(take t %) (take s (function-metrices f m n)))))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 168, "code": "(fn mat\n  ([f] (mat f 0 0))\n  ([f x y p q]\n   (->> (mat f x y)\n        (map #(take q %))\n        (take p)))\n  ([f x y]\n   (letfn [(row-seq [y]\n             (lazy-seq\n              (cons (f x y)\n                    (row-seq (inc y)))))]\n     (lazy-seq\n      (cons (row-seq y)\n            (mat f (inc x) y))))))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n] (letfn [(my-range [i]\n                     (lazy-seq (cons i (my-range (inc i)))))]\n             (map (fn [i] (map (fn [j] (f i j)) (my-range n))) (my-range m))))\n  ([f m n s t] (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 168, "code": "(fn func\n  ([f] (func f 0 0))\n  ([f m n] (letfn [(my-range [n] (lazy-seq (cons n (my-range (inc n)))))]\n             (map #(map (partial f %) (my-range n)) (my-range m))))\n  ([f m n s t] (->> (func f m n) (take s) (map (partial take t)))))", "user": "554b8572e4b0a04f79299589"}, {"problem": 168, "code": "(fn create-matrix\n  ([f]\n    (create-matrix f 0 0)),\n  ([f m n]\n    (letfn [(create-cells-rightward [i, j0]\n              (lazy-seq (cons (f i j0) (create-cells-rightward i (inc j0))))),\n            (create-row [i]\n              (create-cells-rightward i n)),\n            (create-rows-downward [i0]\n              (lazy-seq (cons (create-row i0) (create-rows-downward (inc i0)))))]\n      (create-rows-downward m))),\n  ([f m n s t]\n    (take s (map #(take t %) (create-matrix f m n)))))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 168, "code": "(letfn [(s [f n]\n          (lazy-seq (cons (f n) (s f (inc n)))))\n        (r [n]\n          (s identity n))]\n  (fn !\n    ([f]\n     (! f 0 0))\n    ([f m n]\n     (map #(s % n) (map #(partial f %) (r m))))\n    ([f m n s t] \n     (take s (map #(take t %) (! f m n))))))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 168, "code": "(fn z\n  ([f y x]\n   (lazy-seq\n    (cons\n     ((fn r [f y x]\n        (lazy-seq\n         (cons\n          (f y x)\n          (r f y (inc x))))) f y x)\n     (z f (inc y) x))))\n  ([f] (z f 0 0))\n  ([f y x s t]\n   (take s (map #(take t %) (z f y x)))))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 168, "code": "(fn inf-matrix\n  ([f] (inf-matrix f 0 0))\n  ([f m n] \n   (let [g (fn g [f2 m2 n2] (lazy-seq (cons (f2 m2 n2) (g f2 m2 (inc n2)))))]\n         (g f m n)\n             (lazy-seq (cons (g f m n) (inf-matrix f (inc m) n)))\n     ))\n  ([f m n s t]\n   (take s (map #(take t %) (inf-matrix f m n)))))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 168, "code": "(fn mat ([f m n] \n          (let [col-from-n (fn rest-col [f m n] (lazy-seq (cons (f m n) (rest-col f m (inc n))))) \n                rows-from-m (fn rest-rows [f m n] (lazy-seq (cons (col-from-n f m n) (rest-rows f (inc m) n))))]\n            (rows-from-m f m n)))\n    ([f] (mat f 0 0))\n  \t([f m n s t] (map #(take t %) (take s (mat f m n)))))", "user": "56b86e64e4b0f26550335924"}, {"problem": 168, "code": "(fn matrixX[& args]\n\t(letfn [\n\t\t(cell[i j f]\n\t\t\t(lazy-seq (cons (f i j) (cell i (inc j) f)))\n\n\t\t)\n\n\t\t(row[i n f]\n\t\t\t(lazy-seq (cons (cell i n f) (row (inc i) n f)))\n\t\t)\n\n\t\t(matrix \n\t\t\t([f m n s t] (take s (map #(take t %) (row m n f))))\n\t\t\t([f m n] (row m n f))\n\t\t\t([f] (row 0 0 f))\n\t\t)\n\t\t]\n\t\t(apply matrix args)\n\t)\n)", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 168, "code": "(fn i\n  ([f] (i f 0 0))\n  ([f m n]\n   (letfn [(r [x y] (lazy-seq (cons (f x y) (r x (inc y)))))]\n      (lazy-seq (cons (r m n) (i f (inc m) n))))   \n   )\n  ([f m n s t]\n      (letfn [(r [x y z] (if (< y z) (cons (f x y) (r x (inc y) z))))]\n      (if (> s 0) (cons (r m n (+ n t)) (i f (inc m) n (dec s) t)))) \n   )\n)", "user": "56bca51ae4b0f26550335963"}, {"problem": 168, "code": "(fn infinite-matrix\n   ([f] (infinite-matrix f 0 0)\n    )\n   ([f x y]\n    (letfn [(gen\n              ([x] (lazy-seq (cons x (gen (inc x)))))\n              ([x y] (lazy-seq (cons (f x y) (gen x (inc y)))))\n              )\n            (exec\n              ([x y] (lazy-seq (cons (gen x y) (exec (inc x) y)))))]\n      (exec x y))\n    )\n   ([f x y a b]\n    (take a (map #(take b %) (infinite-matrix f x y)))\n    )\n   )", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 168, "code": "(fn my-infinite-matrix\n  ([fun x y max-x max-y]\n   (take max-x (map #(take max-y %) (my-infinite-matrix fun x y))))\n  ([fun]\n   (my-infinite-matrix fun 0 0))\n  ([fun x y]\n   (letfn [(my-range [x] (lazy-seq (cons x (my-range (inc x)))))\n           (create-row [fun x y]\n             (lazy-seq\n               (cons (fun x y) (create-row fun x (inc y)))))\n           (create-columns [fun x y]\n             (map #(create-row fun % y) (my-range x)))]\n     (create-columns fun x y))))", "user": "509a25b7e4b0efbae1fbc0a8"}, {"problem": 168, "code": "(letfn [(row [f i j]\n             (lazy-seq\n              (cons (f i j) (row f i (inc j)))))\n           (col [f i j]\n             (lazy-seq\n              (cons (row f i j) (col f (inc i) j))))]\n  (fn\n    ([f]\n     (col f 0 0))\n    ([f m n]\n     (col f m n))\n    ([f m n s t]\n     (take s (map #(take t %) (col f m n))))))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 168, "code": "(fn matrix\n  ([f m n] (letfn [(cols [i j]\n                 (lazy-seq\n                  (cons (f i j)\n                        (cols i (inc j)))))\n               (rows [i]\n                 (lazy-seq\n                  (cons (cols i n)\n                        (rows (inc i)))))]\n         (rows m)))\n\n  ;; Return infinite matrix of i,j\n  ([f] (matrix f 0 0))\n\n  ([f m n s t] (map #(take t %) (take s (matrix f m n)))))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 168, "code": "(fn inf-matrix\n  ([f] (inf-matrix f 0 0))\n  ([f a b] (letfn [(row [f a b]\n                (lazy-seq\n                  (cons (f a b) (row f a (inc b)))))]\n     (lazy-seq\n       (cons (row f a b) (inf-matrix f (inc a) b)))))\n  ([f a b c d] (take c (map #(take d %) (inf-matrix f a b)))))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 168, "code": "(fn if-matrix\n  ([f]\n   (if-matrix f 0 0 nil nil))\n  ([f m n]\n   (if-matrix f m n nil nil))\n  ([f m n s t]\n   (letfn [(lznums [m n]\n             (let [nums (lazy-seq (cons m (lznums (inc m) nil)))]\n               (if n (take n nums) nums)))]\n     (map\n      (fn [i]\n        (map #(f i %) (lznums n t)))\n      (lznums m s)))))", "user": "51852961e4b0da5a5be3babb"}, {"problem": 168, "code": "(fn inf-matrix\n  ([f] (inf-matrix f 0 0))\n  ([f m n s t ] (take s (map #(take t %) (inf-matrix f m n))))\n  ([f m n]\n   (lazy-seq (cons (letfn [(row [x]\n                                (lazy-seq (cons (f m x)\n                                                (row (inc x)))))]\n                     (row n))\n                   (inf-matrix f (inc m) n)))))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 168, "code": "(fn inf-mat\n  ([f] (inf-mat f 0 0))\n  ([f m n]\n  (letfn [(create-row [j]\n                      (lazy-seq (cons (f m j) (create-row (inc j)))))             \n          ]\n    \n    (lazy-seq (cons (create-row n) (inf-mat f (inc m) n)\n                    )\n              )\n    )\n  )\n  ([f m n s t] (take s (map #(take t %) (inf-mat f m n))))\n)", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 168, "code": "(fn [f & x] (let [ b #(get (into [] x) %)\n                        m #(or (b %) 0)\n                        g (fn r [z] (lazy-seq (cons z (r (inc z)))))\n                        q #(if (nil? %) (g %2) (take % (g %2)))\n                        c (fn [r] (map #(f r %) (q (b 3) (m 1))))]\n                        (map #(c %) (q (b 2) (m 0)))))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 168, "code": "(fn inf-matrix\n  ([f m n s t] (letfn [(generate-row [row]\n                         (fn cols [col]\n                           (lazy-seq (cons (f row col)\n                                           (if (and (not (nil? t))\n                                                    (>= (- col n) (dec t)))\n                                             '()\n                                             (cols (inc col)))))))\n                       (generate-matrix [row]\n                         (lazy-seq (cons ((generate-row row) n)\n                                         (if (and (not (nil? s))\n                                                  (>= (- row m) (dec s)))\n                                           '()\n                                           (generate-matrix (inc row))))))]\n                 (generate-matrix m)))\n  ([f m n] (inf-matrix f m n nil nil))\n  ([f] (inf-matrix f 0 0 nil nil)))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 168, "code": "(fn p\n  ([f] (p f 0 0))\n  ([f m n]\n   (letfn [(p1 [i] (lazy-seq (cons #(f % i) (p1 (inc i)))))]\n     (lazy-seq (cons (map #(% m) (p1 n)) (p f (inc m) n)))))\n  ([f m n s t]\n   (take s (map #(take t %) (p f m n)))))", "user": "4dc1ee85535d020aff1edf91"}, {"problem": 168, "code": "(fn [& args]\n  (letfn [(genH [f a b]\n            (lazy-seq (cons (f a b) (genH f a (inc b)))))\n          (genV [f a b]\n            (lazy-seq (cons (genH f a b) (genV f (inc a) b))))\n          (infMat\n            ([f] (infMat f 0 0))\n            ([f i j] (genV f i j))\n            ([f i j h v] (take h (map #(take v %) (genV f i j)))))]\n    (apply infMat args)))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 168, "code": "(fn inf-mat\n  ([f] (inf-mat f 0 0 -1 -1))\n  ([f m n] (inf-mat f m n -1 -1))\n  ([f m n s t]\n   (letfn [(process-row [f r-num c-num c-lim]\n             (lazy-seq\n               (if (and (pos? c-lim) (= c-num c-lim))\n                 (cons (f r-num c-num) ())\n                 (cons (f r-num c-num)\n                       (process-row f r-num (inc c-num) c-lim)))))\n           (process-mat [f r-num r-lim c-lim]\n             (lazy-seq\n               (if (and (pos? r-lim) (= r-num r-lim))\n                 (cons (process-row f r-num n c-lim) ())\n                 (cons (process-row f r-num n c-lim)\n                       (process-mat f (inc r-num) r-lim c-lim)))))]\n   (let [r-lim (if (pos? s) (+ m s -1) s)\n         c-lim (if (pos? t) (+ n t -1) t)]\n     (process-mat f m r-lim c-lim)))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 168, "code": "(letfn [(my-range [from]\n          (lazy-seq (cons from (my-range (inc from)))))]\n  (fn inf-mat    \n    ([f]     (inf-mat f 0 0))\n    ([f r c] (lazy-seq\n              (cons  (map #(f r %) (my-range c))\n                     (lazy-seq\n                      (inf-mat f (inc r) c)))))\n    ([f r0 c0 r1 c1] (take r1 (map #(take c1 %) (inf-mat f r0 c0))))))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 168, "code": "(fn inf-mat\n  ([f] (inf-mat f 0 0))\n  ([f m n] (letfn [(row-fn [i] (fn row [j] (lazy-seq (cons (f i j) (row (inc j))))))\n                   (col [i] (lazy-seq (cons ((row-fn i) n) (col (inc i)))))]\n             (col m)))\n  ([f m n s t] (->> (inf-mat f m n) (take s) (map #(take t %)))))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f [0 0]))\n  ([f [x y]]\n   (lazy-seq\n     (cons\n       ((fn ff [f1 x1 y1]\n          (lazy-seq\n            (cons\n              (f y1 x1)\n              (ff f1 (inc x1) y1)))) f x y)\n       (infinite-matrix f [x (inc y)])))\n    )\n  ([f m n] (infinite-matrix f [n m]))\n  ([f m n s t] (map #(take t %) (take s (infinite-matrix f m n))))\n  )", "user": "56ab7578e4b03c432f18733d"}, {"problem": 168, "code": "(fn g\n  ([f]\n   (g f 0 0))\n  ([f m n]\n   (lazy-seq\n     (cons ((fn h [n]\n              (lazy-seq\n                (cons (f m n)\n                      (h (inc n)))))\n            n)\n           (g f (inc m) n))))\n  ([f m n s t]\n   (->> (g f m n)\n        (take s)\n        (map (partial take t)))))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 168, "code": "(fn [& [f m n m' n']]\n  (letfn [(r [f n m] (lazy-seq (cons (f n m) (r f n (inc m)))))\n          (r' [f m n] (lazy-seq (cons (r f m n) (r' f (inc m) n))))]\n    (let [col-fn (if m' (partial take m') identity)\n          row-fn (if n' (partial take n') identity)]\n      (col-fn (map row-fn (r' f (or m 0) (or n 0)))))))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 168, "code": "(fn __\n  ([f]\n   (letfn [(nrange [v] (lazy-seq (cons v (nrange (inc v)))))\n           (nrepeat [v] (lazy-seq (cons v (nrepeat v))))]\n     (map #(map f (nrepeat %) (nrange 0)) (nrange 0))))\n  ([f m n]\n   (letfn [(nrange [v] (lazy-seq (cons v (nrange (inc v)))))\n           (nrepeat [v] (lazy-seq (cons v (nrepeat v))))]\n     (map #(map f (nrepeat %) (nrange n)) (nrange m))))\n  ([f m n s t]\n   (take s (map #(take t %) (__ f m n)))))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 168, "code": "(fn im\n  ([f] (im f 0 0))\n  ([f m n]\n   (letfn [(range'\n             ([] (range' 0))\n             ([start] (lazy-seq (cons start (range' (inc start))))))]\n     (map #(map (partial f %) (range' n)) (range' m))))\n  ([f m n s t]\n   (letfn [(take' [n [head & tail :as coll]]\n             (if (and (> n 0) (not (empty? coll)))\n               (lazy-seq (cons head (take' (dec n) tail)))\n               '()))]\n     (take' s (map (partial take' t) (im f m n))))))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 168, "code": "(fn fmat\n  ([f] (fmat f 0 0))\n  ([f i j] (letfn [(row [i j] (lazy-seq (cons (cell i j) (row (inc i) j))))\n                   (cell [i j] (lazy-seq (cons (f i j) (cell i (inc j)))))]\n             (row i j)))\n  ([f i j r c] (take r (map #(take c %) (fmat f i j)))))", "user": "56102f50e4b05f002753df6b"}, {"problem": 168, "code": "(fn gm\n  ([f] (let [\n             g (fn g[i] (lazy-seq (cons i (g (inc i)))))\n             h (fn h[i j] (lazy-seq (cons (f i j) (h i (inc j)))))\n             ] (map #(h % 0) (g 0))))\n  ([f m n] (let\n             [g (fn[s i] (if (= i 0) s (recur (rest s) (dec i))))\n              ] (map #(g % n) (g (gm f) m))))\n  ([f m n s t] (let\n                 [g (fn g[[a & b] i] (if (= i 0) [] (cons a (g b (dec i)))))\n                  ] (map #(g % t) (g (gm f m n) s)))))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n   (infinite-matrix f 0 0))\n  ([f m n]\n   (letfn [(inner [i j]\n             (lazy-seq (cons (f i j) (inner i (inc j)))))\n           (outer [i]\n             (lazy-seq (cons (inner i n) (outer (inc i)))))]\n     (outer m)))\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "50e90813e4b033b0e80d11e7"}, {"problem": 168, "code": "(fn inf-mat\n  ([f]\n   (inf-mat f 0 0))\n  ([f m n]\n   (let [row (fn row ([i] (row i n))\n               ([i j] (lazy-seq (cons (f i j) (row i (inc j)))))),\n         all (fn all ([] (all m))\n               ([i] (lazy-seq (cons (row i) (all (inc i))))))]\n     (all)))\n  ([f m n s t]\n   (take s (map #(take t %) (inf-mat f m n))))\n  )", "user": "5545477fe4b0a04f79299531"}, {"problem": 168, "code": "(letfn\n[\n(drp [k xs]\n  (if (zero? k)\n    xs\n    (drp (dec k) (rest xs))))\n(rng\n  ([] (rng 0))\n  ([x] (lazy-seq (cons x (rng (inc x))))))\n(row [f i]\n  (map #(f i %) (rng)))\n\n(mat \n  ([f] (mat f 0 0 10000000000 10000000000))\n  ([f m n] (mat f m n 10000000000 10000000000))\n  ([f m n s t]\n      (take s\n        (drp m\n          (map #(lazy-seq (take t (drp n %)))\n            (map #(row f %) (rng)))))))\n]\nmat)", "user": "57717915e4b0979f896515b3"}, {"problem": 168, "code": "(letfn [(row [f m n] (lazy-seq (cons (f m n) (row f m (inc n)))))\n        (col [f m n](lazy-seq (cons (row f m n) (col f (inc m) n))))]\n  (fn myf\n    ([f] (col f 0 0))\n    ([f m n] (col f m n))\n    ([f m n s t] (map #(take t %) (take s (col f m n))))))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 168, "code": "(fn matrix\n   ([f] (matrix f 0 0))\n   ([f m n]\n    (let [my-range (fn my-range [x] (lazy-seq (cons x (my-range (inc x)))))]\n      (map\n        (fn [i] (map (fn [j] (f i j)) (my-range n)))\n        (my-range m))))\n   ([f m n s t] (take s (map #(take t %) (matrix f m n)))))", "user": "4e9ff8d0535d7eef3080729c"}, {"problem": 168, "code": "(fn f\n  ([g] \n   (f g 0 0))\n  ([g m n] \n   (f g m n nil nil))\n  ([g m n s t]\n   (letfn [(h [g m n s t]\n              (when (or (nil? t) (pos? t))\n                (lazy-seq (cons (g m n) (h g m (inc n) s (when-not (nil? t) (dec t)))))))]\n     (when (or (nil? s) (pos? s))\n       (lazy-seq (cons (h g m n s t) (f g (inc m) n (when-not (nil? s) (dec s)) t)))))))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 168, "code": "(fn inf-matrix\n    ([f]         (inf-matrix f 0 0 -1 -1))\n    ([f m n]     (inf-matrix f m n -1 -1))\n    ([f m n s t]\n     (let [lazy-row  (fn lazy-row [r f n t] (if (= 0 t) []\n                                                (lazy-seq (cons (f r n) (lazy-row r f (inc n) (dec t))))))]\n       (if (= 0 s) []\n           (lazy-seq (cons (lazy-row m f n t) (inf-matrix f (inc m) n (dec s) t)))))))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 168, "code": "(fn im\n  ([f] (im f 0 0))\n  ([f r c] (im f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n] (letfn [(inner [i j] \n                         (lazy-seq (cons (f i j) (inner i (inc j)))))\n                   (outer [i j]\n                   \t\t (lazy-seq (cons (inner i j) (outer (inc i) j))))]\n             (outer m n)))\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 168, "code": "(fn g\n  ([f] (g f 0 0))\n  ([f m n] (letfn [(k [f x y] (lazy-seq (cons (f x y) (k f x (inc y)))))\n                   (z [k f x y] (lazy-seq (cons (k f x y) (z k f (inc x) y))))]\n              (mapcat vector (z k f m n))))\n  ([f m n s t] (take s (map (fn [x] (take t x)) (g f m n)))))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 168, "code": "(fn infmatrix\n   ([f] (infmatrix f 0 0))\n   ([f r c gc gr] (take gc (map #(take gr %) (infmatrix f r c))))\n   ([f r c]\n    (letfn [(infrow [f r c]\n              (lazy-seq\n                (cons (f r c) (infrow f r (inc c)))))]\n      (lazy-seq\n        (cons (infrow f r c) (infmatrix f (inc r) c))))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 168, "code": "(fn infinite-matrix \n  ([f] (letfn [(inf-range\n                 ([idx]\n                  (lazy-seq\n                    (cons idx (inf-range (inc idx)))))\n                 ([]\n                  (inf-range 0)))]\n         (map (fn [column] \n                (map (fn [row] (f column row))\n                     (inf-range)))\n              (inf-range))))\n  ([f m n]\n   (let [mat (infinite-matrix f)      \n         my-drop\n         (fn [n coll]\n           (if (pos? n)\n             (recur (dec n) (rest coll))\n             coll))]\n     (lazy-seq (my-drop m (map #(my-drop n %) mat)))))\n  ([f m n s t]\n   (let [mat (infinite-matrix f m n)]\n     (take s (map #(take t %) mat)))))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 168, "code": "(fn infinite-matrix\n    ([f]\n      (infinite-matrix f 0 0)\n    )\n\n    ([f m n]\n      (infinite-matrix f m n 0 0)\n    )\n\n    ([f m n s t]\n      (let\n        [\n          count-from-to\n          (fn count-from-to [a b]\n            (if\n              (and\n                (not= b 0)\n                (>= a b)\n              )\n              '()\n              (lazy-seq\n                (cons\n                  a\n                  (count-from-to (inc a) b)\n                )\n              )\n            )\n          )\n\n          count-with-length\n          (fn [a l]\n            (if (zero? l)\n              (count-from-to a 0)\n              (count-from-to a (+ a l))\n            )\n          )\n        ]\n        (map\n          (fn [i]\n            (map\n              (fn [j]\n                (f i j)\n              )\n              (count-with-length n t)\n            )\n          )\n          (count-with-length m s)\n        )\n      )\n    )\n  )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n    (infinite-matrix f 0 0))\n  ([f m n]\n    (letfn [(inner [i j]\n              (lazy-seq (cons (f i j) (inner i (inc j)))))\n            (outer [i]\n              (lazy-seq (cons (inner i n) (outer (inc i)))))]\n      (outer m)))\n  ([f m n s t]\n    (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 168, "code": "(fn gen-ifnt-mtrx\n   ([f m n]\n    (letfn [(gen-mtrx-ij\n              [f i j]\n              (letfn [(gen-row [i j]\n                        (lazy-cat [(f i j)]\n                                  (gen-row i (inc j))))\n                      (gen-column [i j]\n                        (lazy-cat [(gen-row i j)]\n                                  (gen-column (inc i) j)))]\n                (gen-column i j)))]\n      (gen-mtrx-ij f m n)))\n   ([f]\n     (gen-ifnt-mtrx f 0 0))\n   ([f m n s t]\n     (map #(take t %)\n          (take s (gen-ifnt-mtrx f m n)))))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 168, "code": "(fn inf-matrix ([f] (inf-matrix f 0 0))\n             ([f i j] (inf-matrix f i j 1024 1024))\n  ([f i0 j0 s t]\n   (let [s (if s (+ s i0)) t (if t (+ t j0))]\n     (lazy-seq (loop [rows [] i i0]\n                (if (and s (>= i s))\n                  rows\n      (recur (conj rows (lazy-seq (loop [cols [] j j0 ]\n                  (if (and t (>= j t))\n                      cols\n                      (recur (conj cols (f i j)) (inc j))))))\n             (inc i))))))))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 168, "code": "(fn in\n  ([f] (in f 0 0))\n  ([f m n s t] (take s (map #(take t %) (in f m n))))\n  ([f m n]\n  (letfn [(r [c] (lazy-seq (cons (f m c) (lazy-seq (r (inc c))))))]\n    (lazy-seq \n      (cons \n        (r n)\n        (lazy-seq (in f (inc m) n)))))))", "user": "576df252e4b0979f8965156f"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f m n]\n   (lazy-seq\n    (cons ((fn irow [n]\n             (lazy-seq (cons (f m n) (irow (inc n))))) n)\n          (imat f (inc m) n))))\n  ([f m n s t]\n   (map (partial take t) (take s (imat f m n)))))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 168, "code": "(letfn\n    [(row [f m n]\n       (lazy-seq\n        (cons (f m n) (row f m (inc n)))))]\n  (fn mtx\n    ([f] (mtx f 0 0))\n    ([f m n]\n     (lazy-seq\n      (cons (row f m n) (mtx f (inc m) n))))\n    ([f m n s t]\n     (take s (map #(take t %) (mtx f m n))))))", "user": "56795deae4b05957ce8c6187"}, {"problem": 168, "code": "(fn imr\n  ([f] (imr f 0 0))\n  ([f m n] (letfn [(rows [i j] (lazy-seq (cons (cols i j) (rows (inc i) j))))\n                   (cols [i j] (lazy-seq (cons (f i j) (cols i (inc j)))))]\n             (rows m n)))\n  ([f m n s t]\n   (->> (imr f m n)\n        (map #(take t %))\n        (take s))))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 168, "code": "(letfn [(rows [f i j]\n          (lazy-seq\n            (cons (f i j)\n                  (rows f i (inc j)))))\n        (columns [f i j]\n          (lazy-seq\n            (cons (rows f i j)\n                  (columns f (inc i) j))))]\n  (fn\n    ([f]\n     (columns f 0 0))\n    ([f m n]\n     (columns f m n))\n    ([f m n s t]\n     (take s (map #(take t %)\n                  (columns f m n))))))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 168, "code": "(fn imx \n ([f n m s t] \n (letfn [\n  (inf-row [i0 j] \n   (lazy-seq \n    (if (= j (+ m t)) \n      nil   \n      (cons (f i0 j) \n            (inf-row \n              i0 \n              (inc j))))))\n  (inf-mtrx [i j0] \n   (lazy-seq\n    (if (= i (+ n s)) \n     nil\n     (cons \n      (inf-row i j0) \n      (inf-mtrx (inc i) j0)))))\n  ]\n  (inf-mtrx n m))) \n ([f] (imx f 0 0 -1 -1))\n ([f n m] (imx f n m -1 -1)))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 168, "code": "(let [new-drop\n      (fn new-drop\n        [i s]\n        (lazy-seq (if (= i 0) s (new-drop (- i 1) (rest s)))))\n      new-range\n      (fn new-range\n        [i]\n        (lazy-seq (cons i (new-range (+ i 1)))))\n      infinite-row\n      (fn \n        [f i]\n        (map #(f i %) (new-range 0)))]\n  (fn infinite-matrix\n    ([f]\n     (map #(infinite-row f %) (new-range 0)))\n    ([f m n]\n     (new-drop m (map #(new-drop n %) (infinite-matrix f))))\n    ([f m n s t]\n     (take s (map #(take t %) (infinite-matrix f m n))))))", "user": "58152157e4b0f478707a0631"}, {"problem": 168, "code": "(letfn [ (lf ([f m n](lazy-seq (cons (f m n) (lf f m (inc n)))))\n           ([f m](lf f m 0)))\n        (M ([f m]  (lazy-seq (cons (lf f m) (M f (inc m)))))\n          ([f] (M f 0)))]\n  (fn o ([f] (M f))\n    ([f m n] (map #(keep-indexed (fn [i t] (if (>= i n) t)) %) (keep-indexed (fn [i t] (if (>= i m) t)) (M f))))\n    ([f m n s t](map  #(take t %) (take s (o f m n))))))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 168, "code": "(let [build-lazy-row (fn build-lazy-row[f l r]\n                       (lazy-seq (cons (f l r) (build-lazy-row f l (inc r)))))\n      build-lazy-columns (fn build-lazy-columns[row-builder index]\n                           (lazy-seq (cons (row-builder index) (build-lazy-columns row-builder (inc index)))))]\n  (fn problem168\n    ([f] (build-lazy-columns #(build-lazy-row f % 0) 0))\n    ([f m n] (build-lazy-columns #(build-lazy-row f % n) m))\n    ([f m n s t] (take s (map #(take t %) (problem168 f m n))))))", "user": "558fec41e4b0277789237666"}, {"problem": 168, "code": "(fn i\n  ([f] (lazy-seq (i f 0 0)))\n  ([f m n] (lazy-seq\n            (cons (letfn [(r [x] (lazy-seq (cons (f m x) (r (+ x 1)))))]\n                    (r n))\n                  (i f (+ m 1) n))))\n  ([f m n s t] (take s (map #(take t %) (i f m n)))))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 168, "code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n]\n   (letfn [(integers [n] ;; Interegers > n\n                     (lazy-seq (cons n (integers (inc n)))))\n           \n           (fs [f n] ;; Lazy seq of partial functions(n,??)\n               (lazy-seq (cons (partial f n) (fs f n))))]\n     \n     (lazy-seq (cons ;; Lazy seq of lazy seqs\n                (map #(%1 %2) (fs f m) (integers n))\n                (matrix f (inc m) n)))))\n  ([f m n s t]\n   (take s (map #(take t %) (matrix f m n)))))", "user": "56069006e4b08b23635d3174"}, {"problem": 168, "code": "(fn infinite-matrix\n    ([f]\n     (infinite-matrix f 0 0))\n    ([f m n]\n     (letfn [(inner [i j]\n               (lazy-seq (cons (f i j) (inner i (inc j)))))\n             (outer [i]\n               (lazy-seq (cons (inner i n) (outer (inc i)))))]\n       (outer m)))\n    ([f m n s t]\n     (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0)) \n  ([f m n s t] (take s\n                 (map #(take t %)\n                      (infinite-matrix f m n))))\n  ([f m n]  \n    (let [row (fn row_ [m' n'] \n                (lazy-seq\n                  (cons (f m' n') \n                        (row_ m' (inc n')))))]\n      (lazy-seq\n        (cons (row m n)\n              (infinite-matrix f (inc m) n))))))", "user": "58247423e4b051871117bec5"}, {"problem": 168, "code": "(letfn [\n        (mat-row [f m n t] (if (= n t) () (lazy-seq (cons (f m n) (mat-row f m (inc n) t)))))\n        (mat [f m n s t] (if (= m s) () (lazy-seq (cons (mat-row f m n t) (mat f (inc m) n s t)))))]\n  (fn ([f] (mat f 0 0 nil nil)) ([f m n] (mat f m n nil nil)) ([f m n s t] (mat f m n (+ m s) (+ n t)))))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 168, "code": "(letfn [(range'\n          ([start] (range' start nil))\n          ([start end]\n           (lazy-seq\n             (if (not= start end)\n               (cons start (range' (inc start) end))))))\n        (infinite-matrix [f i-range j-range]\n          (->> i-range\n               (map (fn [i] (->> j-range\n                                 (map (fn [j] (f i j))))))))]\n  (fn\n    ([f]         (infinite-matrix f (range' 0) (range' 0)))\n    ([f m n]     (infinite-matrix f (range' m) (range' n)))\n    ([f m n s t] (infinite-matrix f (range' m (+ m s)) (range' n (+ n t))))))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 168, "code": "(fn infinit-matrix\n  ([f] (infinit-matrix f 0 0))\n  ([f m n] (letfn [(my-range\n                    ([] (my-range 0))\n                    ([n] (lazy-seq (cons n (my-range (inc n))))))]\n             (map (fn [x]\n                    (map (fn [y]\n                           (f x y))\n                         (my-range n)))\n                  (my-range m))))\n  ([f m n s t] (take s (map #(take t %) (infinit-matrix f m n)))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 168, "code": "(fn infm\n  ([f] (infm f 0 0))\n  ([f m n] (letfn [(row [f i j] (lazy-seq (cons (f i j) (row f i (inc j)))))]\n             (lazy-seq (cons (row f m n) (infm f (inc m) n)))))\n  ([f m n s t] (take s (map #(take t %) (infm f m n)))))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n   (letfn [(new-row \n            [row column]\n            (lazy-seq (cons (f row column)\n                            (new-row row (inc column)))))\n           (new-matrix \n             [row]\n             (lazy-seq (cons (new-row row 0)\n                             (new-matrix (inc row)))))]\n     (new-matrix 0)))\n  ([f m n]\n    (map #(nthrest % n) (nthrest (infinite-matrix f) m)))\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 168, "code": "(fn q\n    ([f]\n     (q f 0 0))\n    ([f i]\n     (lazy-seq (cons (f i) (q f (inc i)))))\n    ([f m n]\n     (q (fn [i](q #(f i %) n)) m))\n    ([f m n s t]\n     (take s (map #(take t %) (q f m n)))))", "user": "55597b84e4b0deb715856e36"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f m n]\n   (letfn [(gen [f1 init]\n             (lazy-seq\n              (cons init (gen f1 (f1 init)))))]\n     (map (fn [[r c]] (map #(f r %) c))\n                  (map vector (gen inc m) (gen identity (gen inc n))))))\n  ([f]\n   (infinite-matrix f 0 0))\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))\n   ))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 168, "code": "(fn c168\n  ([f]\n   (c168 f 0 0))\n  ([f i j]\n   (letfn [(get-seq [f i j]\n             (lazy-seq (cons (f i j) (get-seq f i (inc j)))))]\n     (lazy-seq (cons (get-seq f i j) (c168 f (inc i) j)))))\n  ([f i j k l]\n   (take k (map #(take l %) (c168 f i j)))))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 168, "code": ";; no restricions\n;(fn infmat\n;  ([f m n]\n;   (for [a (iterate inc m)]\n;     (for [b (iterate inc n)]\n;       (f a b))))\n;  ([f]\n;   (infmat f 0 0))\n;  ([f m n s t]\n;   (take s (map (partial take t) (infmat f m n)))))\n\n; You can actually use for if you want, it isn't checked!\n\n(fn infmat [& args]\n  (letfn [(range-c\n            ([] (range-c 0))\n            ([el] (cons el (lazy-seq (range-c (inc el))))))\n          (for-c [[i & r] f]\n            (lazy-seq (cons (f i)\n                            (for-c r f))))\n          (infma\n            ([f]\n             (infma f 0 0))\n            ([f m n]\n             (for-c (range-c m)\n                    #(for-c (range-c n)\n                            (partial f %))))\n            ([f m n s t]\n             (take s (map (partial take t) (infma f m n)))))]\n    (apply infma args)))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "58949f8de4b00487982d525e"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f m0 n0]\n   (letfn [(row [i n]\n             (lazy-seq (cons (f i n) (row i (inc n)))))\n           (mat [n]\n             (lazy-seq (cons (row n n0) (mat (inc n)))))]\n     (mat m0)))\n  ([f]\n   (infinite-matrix f 0 0))\n  ([f m0 n0 s t]\n   (take s (map #(take t %) (infinite-matrix f m0 n0)))))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n] (letfn [(row [i j] (lazy-seq (cons (f i j) (row i (inc j)))))\n                       (col [i j] (lazy-seq (cons (row i j) (col (inc i) j))))]\n                 (col m n)))\n  ([f m n s t] (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "5879d577e4b01531a375ead8"}, {"problem": 168, "code": "(fn matrix\n  ([f] \n   (matrix f 0 0))\n  ([f m n]\n   (letfn [(row [f m n]\n                (lazy-seq (cons (f m n) (row f m (inc n)))))]\n     (lazy-seq (cons (row f m n) (matrix f (inc m) n)))))\n  ([f m n s t]\n   (take s (map #(take t %) (matrix f m n)))))", "user": "58b26da4e4b0ebc645576d0a"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n]\n     (letfn [(row-fn [i j]\n               (lazy-seq\n                 (cons (f i j) (row-fn i (inc j)))))\n             (col-fn [i j]\n               (lazy-seq\n                 (cons (row-fn i j) (col-fn (inc i) j))))]\n       (col-fn m n)))\n  ([f m n s t]\n     (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 168, "code": "(fn g\n    ([f]\n     (let [r (fn r [n]\n               (lazy-seq (cons n (r (inc n)))))]\n      (map (fn [x] (map #(f x %) (r 0))) (r 0))))\n    ([f m n]\n     (map #(nthrest % n) (nthrest (g f) m)))\n    ([f m n s t]\n     (map #(take t %) (take s (g f m n)))))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 168, "code": "(fn ls\n    ([f] (ls f 0 0))\n    ([f x y]\n     (lazy-seq (cons ((fn ls-in [y]\n               (lazy-seq (cons (f x y) (ls-in (inc y))))) y) (ls f (inc x) y))))\n    ([f x y n m]\n      (->> (ls f x y) (map #(take m %)) (take n))))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 168, "code": "(letfn [(rng\n          ([i] (cons i (lazy-seq (rng (inc i)))))\n          ([] (rng 0)))]\n  (fn __\n    ([f] (__ f 0 0))\n    ([f m n] (map (fn [r] (map (fn [c] (f r c)) (rng n))) (rng m)))\n    ([f m n s t] (take s (map #(take t %) (__ f m n))))))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n] (letfn [(infinite-range [start] \n                     (lazy-seq (cons start (infinite-range (inc start)))))]\n             (lazy-seq (cons \n                        (map #(f m %) (infinite-range n))\n                        (infinite-matrix f (inc m) n)))))\n  ([f m n s t] (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n   (letfn [(nats\n             ([] (nats 0))\n             ([x] (cons x (lazy-seq (nats (inc x))))))]\n     (map\n      (fn [i]\n        (map\n         (fn [j] (f i j))\n         (nats)))\n      (nats))))\n\n  ([f m n]\n   (letfn [(drop' [n xs]\n             (if (or (empty? xs) (zero? n))\n               xs\n               (drop' (dec n) (rest xs))))]\n     (->> (infinite-matrix f)\n          (drop' m)\n          (map (partial drop' n)))))\n\n  ([f m n s t]\n   (->> (infinite-matrix f m n)\n        (take s)\n        (map (partial take t)))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 168, "code": "(fn im\n  ([f]\n    (im f 0 0))\n  ([f m n]\n    (letfn [(inner [i j]\n              (lazy-seq (cons (f i j) (inner i (inc j)))))\n            (outer [i]\n              (lazy-seq (cons (inner i n) (outer (inc i)))))]\n      (outer m)))\n  ([f m n s t]\n    (take s (map #(take t %) (im f m n)))))", "user": "52b02329e4b0c58976d9acc5"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n   (infinite-matrix f 0 0))\n\n  ([f i j]\n   (let [irow (fn irow [i j]\n                (lazy-seq (cons (f i j) (irow  i (inc j)))))\n         icol (fn icol [i]\n                (lazy-seq\n                 (cons (irow i j)\n                       (icol (inc i)))))]\n     (icol i)))\n\n  ([f i j s t]\n   (take s (map #(take t %) (infinite-matrix f i j)))))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 168, "code": "(letfn\n    [(myrange\n       ([] (cons 0 (lazy-seq (myrange 1))))\n       ([n] (cons n (lazy-seq (myrange (inc n))))))\n     (skip [n xs]\n       (if (zero? n)\n         xs\n         (recur (dec n) (rest xs))))]\n    (fn matrix\n      ([f]\n       (matrix f 0 0))\n      ([f m n]\n       (map (fn [i] (map (fn [j] (f i j)) (skip n (myrange)))) (skip m (myrange))))\n      ([f m n s t]\n       (take s (map #(take t %) (matrix f m n))))))", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 168, "code": "(letfn [(from [n] (lazy-seq (cons n (from (inc n)))))]\n  (fn F ([f m n] (map #(map (partial f %) (from n)) (from m)))\n        ([f m n s t] (map (partial take t) (take s (F f m n))))\n        ([f] (F f 0 0))))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n    (infinite-matrix f 0 0))\n  ([f m n]\n    (letfn [(inner [i j]\n              (lazy-seq (cons (f i j) (inner i (inc j)))))\n            (outer [i]\n              (lazy-seq (cons (inner i n) (outer (inc i)))))]\n      (outer m)))\n  ([f m n s t]\n    (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "58bd84d2e4b0888cdc949d31"}, {"problem": 168, "code": "(fn infmatrix\n  \n  ([f]\n   (infmatrix f 0 0))\n  \n  ([f m n]\n   (letfn [(row [i j] (lazy-seq (cons (f i j) (row i (inc j)))))\n           (col [i j] (lazy-seq (cons (row i j) (col (inc i) j))))]\n     (col m n)))\n  \n  ([f m n s t]\n   (take s (map (fn [cols] (take t cols)) (infmatrix f m n)))))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n] (infinite-matrix f m n nil nil))\n  ([f m n s t]\n    (lazy-seq\n      (cons\n        ((fn infinite-row\n           [f2 m2 n2 t2]\n           (lazy-seq\n             (cons\n               (f2 m2 n2)\n               (if\n                 (or (nil? t2) (> t2 1))\n                 (infinite-row f2 m2 (inc n2) (if (nil? t2) t2 (dec t2)))\n                 '())))) f m n t)\n        (if\n          (or (nil? s) (> s 1))\n          (infinite-matrix f (inc m) n (if (nil? s) s (dec s)) t)\n          '())))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 168, "code": "(fn ff ([f x y] ((fn t [i j]\n                            (lazy-seq (cons ((fn t2 [j]\n                                               (lazy-cat\n                                                 [(f i j)] (t2 (inc j))\n                                                 )\n                                               ) j) (t (inc i) y)))) x y))\n                ([f x y m n] (take m (map #(take n %) (ff f x y))))\n                ([f] (ff f 0 0)))", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 168, "code": "(fn im\n              ([f]\n               (im f 0 0))\n              ([f m n]\n               (letfn [(fi [i j] (lazy-seq (cons (f i j) (fi i (inc j)))))\n                       (fo [j] (lazy-seq (cons (fi j n) (fo (inc j)))))]\n                 (fo m)))\n              ([f m n s t]\n               (take s (map\n                         #(take t %)\n                         (im f m n)))))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 168, "code": "(fn im \n  ([f] (im f 0 0)) \n  ([f a b] \n    (lazy-seq \n      (cons \n        ((fn im' [f a b] \n          (lazy-seq (cons (f a b) \n            (im' f a (inc b))))) f a b) \n        (im f (inc a) b))))\n  ([f a b c d] (take c (map #(take d %) (im f a b)))))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 168, "code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n] (letfn [(row [f i j] (lazy-seq (cons (f i j) (row f i (+ j 1)))))]\n    (lazy-seq (cons (row f m n) (matrix f (+ m 1) n)))))\n  ([f m n r s] (take r (map #(take s %) (matrix f m n)))))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 168, "code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f i j]\n   (lazy-seq\n    (cons\n     (->> ((fn rang [x] (lazy-seq (cons x (rang (+ 1 x))))) j)\n          (map (partial f i)))\n     (matrix f (+ i 1) j))))\n  ([f i j s t]\n   (->> (matrix f i j)\n        (map #(take t %))\n        (take s))))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 168, "code": "(fn inf-matrix\n  ([f] (inf-matrix f 0 0))\n  ([f m n]\n   (lazy-seq\n     (let [row (lazy-seq (cons (f m n)\n                           (lazy-seq (first (inf-matrix f m (inc n))))))]\n       (cons row (inf-matrix f (inc m) n)))))\n  ([f m n s t] ; ..rw wrt fmn\n   (take s (map #(take t %) (inf-matrix f m n)))))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "59251947e4b072a2710fce69"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 168, "code": "(fn lz\n                 ([f] (lz f 0))\n                 ([f r] \n                  (letfn [(lc [f r c] (lazy-seq (cons (f r c) (lc f r (inc c)))))]\n                    (lazy-seq (cons (lc f r 0) (lz f (inc r))))))\n                 ([f r d] \n                  (letfn [(lc [f r c] (lazy-seq (cons (f r c) (lc f r (inc c)))))]\n                    (lazy-seq (cons (lc f r d) (lz f (inc r) d)))))\n                 ([f r d rs cs] \n                  (letfn [(lc [f r c] (lazy-seq (cons (f r c) (lc f r (inc c)))))]\n                    (take rs (map #(take cs %) (lazy-seq (cons (lc f r d) (lz f (inc r) d)))))))\n                 )", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 168, "code": "(letfn [\n    (inf \n        ([]    (inf 0))\n        ([n]   (lazy-seq (cons n (inf (inc n))))))\n    (inf2 [coll a f] (map #(f a %) coll))\n    (matrix\n        ([f] (matrix f 0 0))\n        ([f m n] (map #(inf2 (inf n) % f) (inf m)))\n        ([f m n s t] (take s (map #(take t %) (matrix f m n)))))] matrix)", "user": "580c8fcee4b0849f6811b721"}, {"problem": 168, "code": "(fn mat\n  ([f]\n    (mat f 0 0))\n  ([f m n]\n       (letfn [(im \n               ([i]\n                (lazy-seq (cons (im i n) (im (inc i))))) \n               ([i j]\n                (lazy-seq (cons (f i j) (im i (inc j))))))]\n            (im m)))\n  ([f m n s t]\n   (map (partial take t) (take s (mat f m n)))))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 168, "code": "(letfn [(r [n] (lazy-seq (cons n (r (inc n)))))\n          (fo [f xs ys]  (map (fn [x] (map (fn [y] (f x y)) ys)) xs)) ]\n  (fn\n    ([f]            (fo f (r 0) (r 0)))\n    ([f m n]     (fo f (r m) (r n)))\n    ([f m n s t] (fo f (take s (r m))  (take t (r n))) )))", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 168, "code": "(fn F  \n  ([f X Y]\n   (let [r (fn r [x y] (lazy-seq (cons (f x y) (r x (inc y)))))\n         c (fn c [x] (lazy-seq (cons (r x Y) (c (inc x)))))]\n     (c X)))\n  ([f] (F f 0 0))\n  ([f x y h w] (take h (map (partial take w) (F f x y)))))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 168, "code": "(fn z\n  ([f] (z f 0 0))\n  ([f m n] (lazy-seq (cons ((fn r [f i j] (lazy-seq (cons (f i j) (r f i (+ 1 j))))) f m n) (z f (+ 1 m) n))))\n  ([f m n s t] (map #(take t %) (take s (z f m n)))))", "user": "4fb1d7ace4b081705acca281"}, {"problem": 168, "code": "(fn [f & params]\n  (let [\n        paramsCount (count params)\n        [m n s t] params\n        ]\n        (letfn [\n                (row [f x n] (lazy-seq (cons (f n x) (row f (inc x) n))))\n                (cols [f x sy] (lazy-seq (cons (row f sy x) (cols f (inc x) sy))))\n                ]\n                (if (= paramsCount 0)\n                  (cols f 0 0)\n                  (if (= paramsCount 2)\n                    (cols f m n)\n                    (take s (map (fn [x] (take t x)) (cols f m n))))))))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 168, "code": "(fn p\n  ([f] (p f 0 0))\n  ([f i j] (letfn\n               [(in [a b]\n                  (lazy-seq (cons (f a b) (in a (inc b)))))\n                (out [a b]\n                  (lazy-seq (cons (in a b) (out (inc a) b))))]\n             (out i j)))\n  ([f i j x y] (take x (map #(take y %) (p f i j)))))", "user": "5893c64ce4b00487982d524b"}, {"problem": 168, "code": "(letfn\n  [(my-drop [n coll] \n      (loop [n n coll coll]\n        (if (zero? n)\n          coll\n          (recur (dec n) (rest coll))\n        )\n      )\n    )\n   (f-row [f i j] (lazy-seq (cons (f i j) (f-row f i (inc j)))))\n   (matrixA\n    ([f] (matrixA f 0 0))\n    ([f i j] (lazy-seq (cons (f-row f i j) (matrixA f (inc i) j))))\n   )\n  ]\n  (fn infinite-matrix\n    ([f] (matrixA f))\n    ([f m n]\n      (let [matrix (my-drop m (matrixA f))]\n        (map #(my-drop n %) matrix)\n      )\n    )\n    ([f m n s t]\n      (map #(take t %) (take s (infinite-matrix f m n)))\n    )\n  )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 168, "code": "; Evil hack\n(fn [& _]\n  (reify nil\n    clojure.lang.IPersistentCollection\n    (seq [_])\n    (cons [_ _])\n    (empty [_])\n    (equiv [_ _] true)))", "user": "51e58e02e4b0efabf93c02d0"}, {"problem": 168, "code": "(fn iim [& zs]\n   (letfn [\n           (nats [n] (cons n (lazy-seq (nats (inc n)))))\n           (dropp [n xs] (if (= n 0) xs (recur (dec n) (rest xs))))\n           (im \n              ([f] (map #(im f %) (nats 0)))\n              ([f col] (map #(f col %) (nats 0)))\n              ([f m n] (map #(dropp n (im f %)) (dropp m (nats 0))))\n              ([f m n s t] (take s (map #(take t %) (im f m n))))\n            )] \n     (apply im zs)\n   ))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 168, "code": "(fn infinite-matrix\n    ([f]\n        (infinite-matrix f 0 0)\n    )\n    ([f m n]\n        (letfn [\n            (infinite-row \n                ([f j] (infinite-row f j 0))\n                ([f j i] (lazy-seq (cons (f j i) (infinite-row f j (inc i)))))\n            )        \n        ]\n        (lazy-seq (cons (infinite-row f m n) \n            (infinite-matrix f (inc m) n)))\n        )\n    )\n    ([f m n s t]\n        (take s (map #(take t %) (infinite-matrix f m n)))\n    )\n)", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 168, "code": "(fn matrix\n  ([f]\n   (matrix f 0 0))\n\n  ([f m n]\n   (letfn [(columns [i j] (lazy-seq (cons (f i j) (columns i (inc j)))))\n           (rows [i] (lazy-seq (cons (columns i n) (rows (inc i)))))]\n     (rows m)))\n\n  ([f m n s t]\n   (map #(take t %) (take s (matrix f m n)))))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "59358f74e4b04f87174def52"}, {"problem": 168, "code": "(letfn [(myrange [n] (cons n (lazy-seq (myrange (inc n)))))\n        (mydrop [n xs] (if (zero? n) xs (recur (dec n) (rest xs))))]\n  (fn tbl\n    ([f]\n     (map #(map (partial f %) (myrange 0)) (myrange 0)))\n    ([f m n]\n     (->> (tbl f) (mydrop m) (map #(mydrop n %))))\n    ([f m n s t]\n     (->> (tbl f m n) (take s) (map #(take t %))))))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 168, "code": "(fn inf-matrix-168\n  ([f] (inf-matrix-168 f 0 0))\n  ([f m n]\n   (inf-matrix-168 f m n nil nil))\n  ([f m n s t]\n   (letfn [(row-gen [i j] (lazy-seq (cons (f i j)\n                                          (when (or (not t) (< (inc j) (+ n t)))\n                                            (row-gen i (inc j))))))\n           (matrix-gen [i] (lazy-seq (cons (row-gen i n)\n                                           (when (or (not s) (< (inc i) (+ m s)))\n                                             (matrix-gen (inc i))))))]\n     (matrix-gen m))))", "user": "52470d42e4b05ef8e38e6350"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "5a2abf2ae4b09cafd31c7f38"}, {"problem": 168, "code": "(fn mtrx-set\n          [fce & params]\n          (let [row (fn row\n                      ([fce ccc] (row fce ccc 0))\n                      ([fce ccc from] (lazy-seq (cons (fce ccc from ) (row fce ccc (inc from))))))\n                mtrx (fn mtrx\n                       ([fce] (mtrx fce 0 0))\n                       ([fce ccc fromcol]   (lazy-seq (cons (row fce ccc fromcol) (mtrx fce (inc ccc ) fromcol) )))\n                       ([fce ccc fromcol take-row-cnt take-col-cnt] (take take-row-cnt (map #(take take-col-cnt %) (mtrx fce ccc fromcol))))\n                       \n                       ) ]\n            (cond (nil? params) (mtrx fce)\n                  :else (apply mtrx fce params))))", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 168, "code": "(fn r [& a]\n    (let [w (fn [z]\n              (let [t (atom (dec z))]\n                #(swap! t inc)))\n          b (fn [m n]\n              (map (fn [i]\n                     (map (fn [j]\n                            ((first a) i j)) (repeatedly (w n))))\n                   (repeatedly (w m))))]\n      (case (count a)\n        1 (b 0 0)\n        3 (let [[f m n] a]\n            (b m n))\n        5 (let [[f m n s t] a]\n            (take s (map #(take t %) (r f m n)))))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 168, "code": "(letfn [(infinite-grid                                                          \n          ([f] (infinite-grid f 0 0 nil nil))                                   \n          ([f m n] (infinite-grid f m n nil nil))                               \n          ([f m n s t] (infinite-rows f m n (when s (+ m s)) (when t (+ n t)))))\n        (n<= [x y] (and x                                                       \n                        (<= x y)))                                              \n        (infinite-columns [f m n s t]                                           \n          (lazy-seq (if (n<= t n)                                               \n                      ()                                                        \n                      (cons (f m n)                                             \n                            (infinite-columns f m (inc n) s t)))))              \n        (infinite-rows                                                          \n          [f m n s t]                                                           \n          (lazy-seq (if (n<= s m)                                               \n                      ()                                                        \n                      (cons (infinite-columns f m n s t)                        \n                            (infinite-rows f (inc m) n s t)))))]                \n  infinite-grid)", "user": "51f9527fe4b09be9c177e549"}, {"problem": 168, "code": "(fn sol  \n  ([f] \n  (letfn [\n          \n       (f1 [f ]\n   (letfn [(gi  [i j  ff]\n            (lazy-seq   (cons (ff i j) (gi i (inc j) ff)) )\n            )\n           (fi  [i ff]\n             (lazy-seq  (cons (gi i 0 ff) (fi (inc i) ff)))) ]\n      (fi 0 f)\n   )\n  )]\n      (f1 f) \n    )\n   )\n   \n   ([f m n] \n      (letfn [ \n          (mydrop [n xs]\n   (letfn [(dropr [k n xs]\n              (cond (< k n) (recur (inc k) n (rest xs))\n                     :else xs\n              )\n            )]\n      (dropr 0 n xs)\n  )\n)\n\n\n(f2 [f m n]\n    (map #(mydrop n %) (mydrop m (sol f)))\n)\n              ]\n        (f2 f m n)\n        )\n    )\n        \n\n([f m n s t]\n   (map #(take t %) (take s (sol f m n)))\n)\n   \n)", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 168, "code": "(fn inf_mat\n  ([f]\n    (inf_mat f 0 0))\n  ([f m n]\n    (let [i_row (fn inf_row [i j] (lazy-seq (cons (f i j) (inf_row i (+ j 1)))))]\n      (lazy-seq (cons (i_row m n) (inf_mat f (+ 1 m) n)))))\n  ([f m n s t]\n    (let [finite_row (fn [a_i a_j]\n                        (loop [j a_j\n                               c 0\n                               r []]\n                          (if (>= c t)\n                            r\n                            (recur (+ 1 j) (+ 1 c) (conj r (f a_i j))))))\n          finite_mat (fn [a_i]\n                       (loop [i a_i\n                              c 0\n                              rs []]\n                         (if (>= c s)\n                           rs\n                           (recur (+ 1 i) (+ 1 c) (conj rs (finite_row i n))))))]\n      (finite_mat m))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 168, "code": "(fn [f & args] (let [row (fn row [i j] (lazy-seq (cons (f i j) (row i (inc j)))))\n                     mat (fn mat [i j] (lazy-seq (cons (row i j) (mat (inc i) j))))\n                     go (fn ([i j]     (mat i j))\n                            ([]        (mat 0 0))\n                            ([i j s t] (take s (map #(take t %) (mat i j)))))]\n  (apply go args)))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 168, "code": "(fn g\n  ([f] (g f 0 0))\n  ([f m n]\n    (let [row (fn r [i j]\n                (lazy-seq\n                  (cons (f i j)\n                        (r i (inc j)))))]\n      (lazy-seq\n        (cons (row m n)\n              (g f (inc m) n)))))\n  ([f m n s t] (take s (map #(take t %) (g f m n)))))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 168, "code": "(fn im\n   ([f] (im f 0 0))\n   ([f m n] (lazy-seq (cons ((fn r [m n] \n                                 (lazy-seq (cons (f m n) (r m (inc n))))) m n)\n                            (im f (inc m) n))))\n   ([f m n s t] (take s (map #(take t %) (im f m n)))))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 168, "code": "(fn [& args] (let\n  [col (fn col [f r c] (lazy-seq (cons (f r c) (col f r (inc c)))))\n   row (fn row [f r c] (col f r c))\n   rows (fn rows [f r c] (lazy-seq (cons (row f r c) (rows f (inc r) c))))\n   mat (fn mat ([f] (rows f 0 0))\n               ([f m n] (rows f m n))\n               ([f m n s t] (map #(take t %) (take s (mat f m n)))))]\n   (apply mat args)))\n;(fn mat ([f] (let [col (fn col [r c] (cons (f r c) (lazy-seq (col r (inc c)))))\n;              row (fn row [r] (col r 0))\n;              rows (fn rows [r] (cons (row r) (lazy-seq (rows (inc r)))))]\n;                     (rows 0)))\n;       ([f m n] (map #(drop n %) (drop m (mat f))))\n;       ([f m n s t] (map #(take t %) (take s (mat f m n)))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 168, "code": "(fn infi-mat\n  ([f]\n   (letfn [(inf-seq\n             ([]\n               (concat [] (inf-seq 0N)))\n             ([n]\n               (lazy-seq (cons n (inf-seq (inc n))))))\n           (sub-seq [f]\n             (map (fn [n] (map #(f n %) (inf-seq))) (inf-seq)))]\n     (sub-seq f)))\n  ([f m n]\n    (letfn [(drop- [n coll]\n              (let [step (fn [n coll]\n                           (let [s (seq coll)]\n                             (if (and (pos? n) s)\n                               (recur (dec n) (rest coll))\n                               s)))]\n                (lazy-seq (step n coll))))]\n      (map #(drop- n %) (drop- m (infi-mat f)))))\n  ([f m n s t]\n    (take s (map #(take t %) (infi-mat f m n)))))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 168, "code": "(fn m\n  ([f] (m f 0 0 999 999))\n  ([f a b] (m f a b 999 999))\n  ([f a b c d] \n    (let [r (fn r\n              ([f i]\n               (r f i 0))\n              ([f i j]\n               (lazy-seq (cons (f i j) (r f i (+ 1 j))))))]\n      (take c \n            (lazy-seq (cons\n                        (take d (r f a b))\n                        (m f (+ 1 a) b c d)))))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 168, "code": "(fn aux\n        ([f] (aux f 0 0))\n        ([f m n] (aux f m n Integer/MAX_VALUE Integer/MAX_VALUE))\n        ([f m n s t] \n         (letfn \n             [(outer [r]\n                (letfn [(inner [c]\n                          (if (< c (+ t n))\n                            (lazy-seq\n                             (cons (f r c) \n                                   (inner (inc c))))))]\n                  (if (< r (+ s m)) \n                    (lazy-seq\n                     (cons (inner n) \n                           (outer (inc r)))))))] \n           (outer m))))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 168, "code": "(fn im\n  [f & [m n s t]]\n  (let [m (or m 0)\n        n (or n 0)\n        row (lazy-seq (cons (f m n)\n                            (im f m (inc n) 1)))\n        row (if t\n              (take t row)\n              row)]\n    (if (= s 1)\n      (if t [row] row)\n      (lazy-seq (cons\n                 row\n                 (im f (inc m) n (if s (dec s) s) t))))))", "user": "56bb652ae4b0f26550335953"}, {"problem": 168, "code": "(fn [& args] (letfn [(rangex [n] (lazy-seq (cons n (rangex (inc n)))))\n                            (dropx [n coll] (lazy-seq (cond ((complement seq) coll) coll\n                                                  (= n 0) coll\n                                                  :else (dropx (dec n) (rest coll)))))\n                            (mtrx\n                              ([f] (map (fn [i] (map (fn [j] (f i j)) (rangex 0))) (rangex 0)))\n                              ([f m n] (dropx m (map #(dropx n %) (mtrx f))))\n                              ([f m n s t] (take s (map #(take t %) (mtrx f m n)))))]\n                      (apply mtrx args)))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 168, "code": "(fn myfns\n  ([f] (myfns f 0 0))\n  ([f m n]\n   (let [rnge (fn rnge [n] (lazy-seq (cons n (rnge (inc n)))))\n         rept (fn rept [s] (cons s (lazy-seq (rept s))))]\n     (map #(map f %1 %2) (map rept (rnge m)) (rept (rnge n)))))\n  ([f m n s t] (take s (map #(take t %) (myfns f m n)))))", "user": "4e8768f6535dceadca469850"}, {"problem": 168, "code": "(letfn [(lazy-mat-col [f n m] (lazy-seq (cons (f n m) (lazy-mat-col f n (inc m)))))\n        (lazy-mat-row [f n m] (lazy-seq (cons (lazy-mat-col f n m) (lazy-mat-row f (inc n) m))))]\n  (fn infinite-matrix\n    ([f] (infinite-matrix f 0 0))\n    ([f n m] (lazy-mat-row f n m))\n    ([f n m s t] (take s (map #(take t %) (infinite-matrix f n m))))))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 168, "code": "(fn map-infinite-matrix\n  ([function] (map-infinite-matrix function 0 0))\n  ([function y-offset x-offset]\n   (letfn [(row-iterator [i j] (lazy-seq (cons (col-iterator i j) (row-iterator (inc i) j))))\n           (col-iterator [i j] (lazy-seq (cons (function i j)     (col-iterator i (inc j)))))]\n     (row-iterator y-offset x-offset)))\n  ([function y-offset x-offset height width] (take height (map (partial take width) (map-infinite-matrix function y-offset x-offset)))))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 168, "code": "(fn im\n  ([f]\n   (im f 0 0))\n  ([f x y a b]\n   (take a (map #(take b %) (im f x y))))\n  ([f x y]\n   (letfn [(nex ([n] (lazy-seq (cons n (nex (inc n))))))\n           (ne ([n] (map #(f n %) (nex y))))]\n     (map ne (nex x)))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 168, "code": "(fn M\n  ([f]         (M f 0 0))\n  ([f m n]     (M f m n 0 0))\n  ([f m n s t] (let [a (fn a [m n] (lazy-seq (cons (f m n) (a m (inc n)))))\n                     b (fn b [m n] (lazy-seq (cons (a m n) (b (inc m) n))))\n                     c (fn [l s] (if (= l 0) s (take l s)))]\n             \t (c s (map #(c t %) (b m n))))))", "user": "577202d2e4b0979f896515c0"}, {"problem": 168, "code": "(fn funcmat\n  ([f m n s t]\n   (letfn [(row [f r s t]\n             (if (not= s t)\n               (lazy-seq (cons (f r s) (row f r (inc s) t)))\n               []))]\n     (if (zero? s)\n       []\n       (lazy-seq (cons (row f m n (+ n t)) (funcmat f (inc m) n (dec s) t))))))\n  ([f m n]\n   (funcmat f m n -1 -1))\n  ([f]\n   (funcmat f 0 0 -1 -1)))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n    (infinite-matrix f 0 0))\n  ([f m n]\n    (letfn [(inner [i j]\n              (lazy-seq (cons (f i j) (inner i (inc j)))))\n            (outer [i]\n              (lazy-seq (cons (inner i n) (outer (inc i)))))]\n      (outer m)))\n  ([f m n s t]\n    (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 168, "code": "(fn matr\n  ([f] (matr f 0 0))\n  ([f m n]\n   (letfn [(row [nn] (lazy-seq (cons (f m nn) (row (inc nn)))))]\n     (lazy-seq\n       (cons (row n) (matr f (inc m) n))\n     )))\n  ([f m n s t]\n   (take s (map #(take t %) (matr f m n)))))", "user": "5b13ba71e4b0cc2b61a3be53"}, {"problem": 168, "code": "(fn mymatrix \n  ([f] (mymatrix f 0 0 nil nil))\n  ([f m n] (mymatrix f m n nil nil))\n  ([f m n s t] (let [\n                     myr (fn myrow [f row start steps] (lazy-seq (cons (f row start) (lazy-seq (if (nil? steps) (myrow f row (inc start) nil) (if (= steps 1) [] (myrow f row (inc start) (dec steps))))))))\n                     ]\n      (lazy-seq (cons (myr f m n t) (lazy-seq (if (nil? s) (mymatrix f (inc m) n s t) (if (= s 1) [] (mymatrix f (inc m) n (dec s) t)))))))\n  ))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 168, "code": "(letfn [(frow [f i j]\n          (lazy-seq (cons (f i j) (frow f i (inc j)))))\n        (fmat [f i j]\n          (lazy-seq (cons (frow f i j) (fmat f (inc i) j))))]\n  (fn infinite-matrix\n    ([f] (fmat f 0 0))\n    ([f m n] (fmat f m n))\n    ([f m n s t] (take s (map #(take t %) (fmat f m n))))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 168, "code": "(let [lrng (fn lrng [x] (lazy-seq (cons x (lrng (inc x)))))\n      srng (fn [x len] (take len (lrng x)))\n      row (fn row [f rng] (lazy-seq (if (empty? rng) [] (cons (f (first rng)) (row f (rest rng))))))\n      mat (fn mat [f rngr rngc] (lazy-seq (if (empty? rngr) [] (cons (row #(f (first rngr) %) rngc) (mat f (rest rngr) rngc)))))]\n  (fn ([f] (mat f (lrng 0) (lrng 0))) ([f m n] (mat f (lrng m) (lrng n))) ([f m n s t] (mat f (srng m s) (srng n t)))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n   (infinite-matrix f 0 0))\n  ([f m n]\n   (let [columns (fn cols [n'] (lazy-seq (cons (f m n') (cols (inc n')))))]\n     (lazy-seq (cons (columns n) (infinite-matrix f (inc m) n)))))\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 168, "code": "(fn infmatrix\n  [f & [fi fj & [ni nj]]]\n  (letfn [(row [xi xj]\n            (println (f xi xj) fi fj ni nj)\n            (lazy-seq (cons (f xi xj)\n                            (if (and nj (= xj (+ fj (dec nj))))\n                              '()\n                              (row xi (inc xj))))))]\n    ((fnil (fn column\n         [yi yj]\n         (lazy-seq (cons (row yi yj)\n                         (if (and ni (= yi (+ fi (dec ni))))              \n                           '()\n                           (column (inc yi) yj))))) 0 0) fi fj)))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 168, "code": "(fn i-m\n ([f]\n  (i-m f 0 0))\n ([f m n]\n  (letfn [(column [m n] (lazy-seq (cons (f m n) (column m (inc n)))))\n          (row [m] (lazy-seq (cons (column m n) (row (inc m)))))]\n   (row m)))\n ([f m n s t]\n  (take s (map #(take t %) (i-m f m n)))))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 168, "code": "(letfn [(r [& [s e]]\n            (let [s (or s 0)]\n              (when-not (= e s)\n                (cons s\n                      (lazy-seq\n                       (r (inc s) e))))))]\n    (fn infinite-matrix\n      ([f]\n       (map\n        (fn [i]\n          (map (fn [j] (f i j)) (r)))\n        (r)))\n      ([f m n]\n       (->> (infinite-matrix f)\n            (split-at m)\n            second\n            (map (comp\n                  second\n                  (partial split-at n)))))\n      ([f m n s t]\n       (->> (infinite-matrix f m n)\n            (take s)\n            (map (partial take t))))))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 168, "code": "(fn infinate-matrix\n  ([f] (infinate-matrix f 0 0))\n  ([f m n]\n   (letfn [(my-range [n] (cons n (lazy-seq (my-range (inc n)))))]\n     (map #(map (partial f %) (my-range n)) (my-range m))))\n  ([f m n s t]\n   (take s (map #(take t %) (infinate-matrix f m n)))))", "user": "5125029de4b0ce9225d2ed3e"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n    (infinite-matrix f 0 0))\n  ([f m n]\n   (lazy-seq (cons ((fn row [r]\n                      ((fn cell [c]\n                         (lazy-seq (cons (f r c) (cell (inc c)))))\n                        n))\n                     m)\n                   (infinite-matrix f (inc m) n))))\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 168, "code": "(letfn [(t2 [ff x y]\n                   (lazy-seq\n                    (cons (ff x y) (t2 ff x (inc y)))))\n                 (t1 [ff x y]\n                   (lazy-seq\n                    (cons (t2 ff x y) (t1 ff (inc x) y))))]\n           (fn f ([ff] (t1 ff 0 0))\n             ([ff m n] (t1 ff m n))\n             ([ff m n r c] (take r (map #(take c %) (t1 ff m n))))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 168, "code": "(fn\n    ([f]\n     (let [row (fn row [r c]\n                 (lazy-seq\n                  (cons (f r c)\n                        (row r (inc c)))))\n           mat (fn mat [r]\n                 (lazy-seq\n                  (cons (row r 0)\n                        (mat (inc r)))))]\n       (mat 0)))\n    ([f m n]\n     (let [row (fn row [r c]\n                 (lazy-seq\n                  (cons (f r c)\n                        (row r (inc c)))))\n           mat (fn mat [r]\n                 (lazy-seq\n                  (cons (row r n)\n                        (mat (inc r)))))]\n       (mat m)))\n    ([f m n s t]\n     (let [row (fn row [r c]\n                 (lazy-seq\n                  (cons (f r c)\n                        (row r (inc c)))))\n           mat (fn mat [r]\n                 (lazy-seq\n                  (cons (take t (row r n))\n                        (mat (inc r)))))]\n       (take s (mat m)))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 168, "code": "(fn __\n  ([f m n s t]\n   (letfn [(myrange\n             ([g] (myrange g 0 nil 1))\n             ([g end] (myrange g 0 end 1))\n             ([g start end] (myrange g start end 1))\n             ([g start end step]\n              (lazy-seq\n               (when (or (not end) (< start end))\n                 (cons (g start) (myrange g (+ start step) end step)))\n               )))]\n     (when-not (and s (zero? s))\n       (lazy-seq\n        (cons\n         (myrange (partial f m) n (when t (+ n t)))\n         (__ f (inc m) n (when s (dec s)) t)\n         )))))\n  ([f m n] (__ f m n nil nil))\n  ([f] (__ f 0 0 nil nil)))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 168, "code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n]\n   (let [row (fn row [i j]\n               (lazy-seq\n                (cons (f i j) (row i (inc j)))))]\n     (lazy-seq\n      (cons (row m n) (matrix f (inc m) n)))))\n  ([f m n s t]\n   (take s (map #(take t %) (matrix f m n)))))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 168, "code": "(fn my-matrix\n  ([f] (my-matrix f 0 0))\n  ([f m n] (letfn [(get-row [first-col]\n                     (lazy-seq (cons (f m first-col) (get-row (inc first-col)))))]\n             (lazy-seq (cons (get-row n) (my-matrix f (inc m) n)))))\n  ([f m n s t]\n   (take s (map #(take t %) (my-matrix f m n)))))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 168, "code": "(fn matrix\n  [& args]\n  (letfn [(matrix-row\n            [row j f]\n            (lazy-seq (cons (f row j) (matrix-row row (inc j) f))))\n\n          (matrix-column\n            ([f] (matrix-column 0 0 f))\n            ([i j f]\n             (lazy-seq (cons (matrix-row i j f) (matrix-column (inc i) j f)))))\n\n          (infinite-matrix\n            ([f] (matrix-column 0 0 f))\n            ([f m n] (matrix-column m n f))\n            ([f m n s t] (map #(take t %) (take s (infinite-matrix f m n)))))]\n    (apply infinite-matrix args)))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 168, "code": "(fn inf-matrix\n    ([f]\n     (let [r (fn p [c] (lazy-seq (cons c (p (inc c)))))]\n       (map (fn [i]\n              (map (fn [j]\n                     (f i j))\n                   (r 0)))\n            (r 0 ))))\n    ([f m n]\n     (let [i (inf-matrix f)\n           d (fn [n coll]\n               (if (zero? n)\n                 coll\n                 (recur (dec n) (rest coll))))]\n       (map (fn [coll]\n              (d n coll)) (d m i))))\n    ([f m n s t]\n     (let [b (inf-matrix f m n)]\n       (map #(take t %) (take s b)))))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 168, "code": "(fn inf-matrix [f & rest]\n  (letfn [(my-lazy-range\n            [min-val]\n            (lazy-seq\n              (cons min-val (my-lazy-range (inc min-val)))))]\n    (let [[m n s t] rest]\n      (if (nil? m)\n        (inf-matrix f 0 0)\n        (if (nil? s)\n          (map (fn [x] (map #(f x %) (my-lazy-range n))) (my-lazy-range m))\n          (take s (map #(take t %) (inf-matrix f m n))))))))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 168, "code": "(fn inf-matrix\n  ([f]\n   (inf-matrix f 0 0))\n  ([f m n]\n   (letfn [(my-range\n             ([]\n              (my-range 0))\n             ([start]\n              (lazy-seq (cons start\n                              (my-range (inc start)))))\n             ([start end]\n              (if (>= start end) ()\n                  (lazy-seq (cons start\n                                  (my-range (inc start) end))))))\n           (m-row [f column start-row]\n             (map (fn [row] (f column row)) (my-range start-row)))\n           (m-col [f start-column start-row ]\n             (map (fn [column] (m-row f column start-row)) (my-range start-column)))]\n     (m-col f m n)))\n  ([f m n rows columns]\n   (take rows (map #(take columns %) (inf-matrix f m n)))))", "user": "5c222b7de4b07e362c230588"}, {"problem": 168, "code": "(fn iqs \n  ([f m n s t] \n    (letfn [\n      (is1 [i j c] (if (and t (>= c t)) '() (lazy-seq (cons (f i j) (is1 i (inc j) (inc c))))))\n      (is2 [i c] (if (and s (>= c s)) '() (lazy-seq (cons (is1 i n 0) (is2 (inc i) (inc c))))))\n    ]\n    (is2 m 0)  ))\n  ([f m n] (iqs f m n nil nil))\n  ([f] (iqs f 0 0)))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f n]\n    (lazy-seq (cons (f n) (infinite-matrix f (inc n))))\n    )\n  ([f m n]\n    (lazy-seq\n      (cons\n        (lazy-seq\n          (cons\n            (f m n)\n            (infinite-matrix (partial f m) (inc n))))\n        (infinite-matrix f (inc m) n)))\n    )\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))\n    )\n  )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 168, "code": "(fn mat ([g m n]\n            (letfn [\n            (mat1 [f x y] (lazy-seq (cons (f x y) (mat1 f x (inc y)))))\n            (mat2 [f x y] (lazy-seq (cons (mat1 f x y) (mat2 f (inc x) y))))]\n            (mat2 g m n)))\n        ([g] (mat g 0 0))\n        ([g m n s t] (take s (map #(take t %) (mat g m n)))))", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n]\n    (letfn [(matrix-row  [row column]\n              (lazy-seq (cons (f row column) (matrix-row row (inc column)))))]\n      (lazy-seq (cons (matrix-row m n) (infinite-matrix f (inc m) n))))\n    )\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))\n    )\n  )", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 168, "code": "(fn infinite ([f]\n              (infinite f 0 0))\n  ([f m n]\n   (letfn [(inner [x y]\n                  (lazy-seq (cons (f x y) (inner x (inc y)))))\n           (outer [x]\n                  (lazy-seq (cons (inner x n) (outer (inc x)))))]\n     (outer m)))\n  ([f m n s t]\n   (take s (map #(take t %) (infinite f m n)))))", "user": "56f4623ae4b046a417f9205d"}, {"problem": 168, "code": "(fn i\n  ([f] (i f 0 0))\n  ([f m n]\n   (letfn [(g [f m n] (lazy-seq (cons (f m n) (g f m (inc n)))))\n           (h [f m n] (lazy-seq (cons (g f m n) (h f (inc m) n))))]\n     (h f m n)))\n  ([f m n s t] (take s (map #(take t %) (i f m n)))))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 168, "code": "(fn infinite-matrix \n  ([f] (infinite-matrix f 0 0))\n  ([f m n] \n   (let [row-fn (fn row-fn [m n] \n                  (lazy-seq (cons (f m n) (row-fn m (inc n)))))]\n     (lazy-seq (cons (row-fn m n) (infinite-matrix f (inc m) n)))))\n  ([f m n s t]\n   (take s (map (partial take t) (infinite-matrix f m n)))))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 168, "code": "(fn f ([g] (f g 0 0 -2 -2)) ([g a b] (f g a b -2 -2))\n     ([g a b c d] (letfn [(i [a b c d] (if (= a c) '() (lazy-seq (cons (h a b c d) (i (inc a) b c d)))))\n                          (h [a b c d] (if (= b d) '() (lazy-seq (cons (g a b) (h a (inc b) c d)))))] \n                    (i a b (+ a c) (+ b d)))))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 168, "code": "(fn func\n\t([f] (func f 0 0))\n\t([f m n]\n\t\t(letfn [(inner [i j]\n\t\t\t\t\t(lazy-seq (cons (f i j) (inner i (inc j)))))\n\t\t\t\t(outter [i]\n\t\t\t\t\t(lazy-seq (cons (inner i n) (outter (inc i)))))]\n\t\t\t\t(outter m)))\n\t([f m n s t] (take s (map #(take t %) (func f m n)))))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 168, "code": ";;Too pretty to golf\n(let [\nget-row (fn get-row\n  ([f] (get-row f 0 0))\n  ([f row] (get-row f row 0))\n  ([f row col] (lazy-seq (cons (f row col) (get-row f row (inc col))))))] \n(fn get-matrix\n  ([f] (get-matrix f 0 0))\n  ([f m n] (lazy-seq (cons (get-row f m n) (get-matrix f (inc m) n))))\n  ([f m n s t] (take s (map #(take t %) (get-matrix f m n))))\n))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 168, "code": "(fn f [& [a m n s t]]\n  (let [row (fn row [r c a l] (if (= 1 l) [(a r c)] (lazy-seq (cons (a r c) (row r (inc c) a (dec l))))))\n        m (or m 0) n (or n 0) s (or s -1) t (or t -1)\n  ]\n    (if (= 1 s) [(row m n a t)] (lazy-seq (cons (row m n a t) (f a (inc m) n (dec s) t))))))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n] (let [columns (fn columns [column]\n                           (lazy-seq (cons (f m (+ n column)) (columns (inc column)))))]\n             (lazy-seq (cons (columns 0) (infinite-matrix f (inc m) n)))))\n  ([f m n s t] (map (partial take t) (take s (infinite-matrix f m n)))))", "user": "53504fe6e4b084c2834f4ada"}, {"problem": 168, "code": "(letfn [(infcol [f i j]\n            (lazy-seq (cons (f i j) (infcol f i (inc j)))))\n          (infrow [f i jstart]\n            (lazy-seq (cons (infcol f i jstart) (infrow f (inc i) jstart))))]\n    (fn [f & args]\n      (cond\n        (empty? args) (infrow f 0 0)\n        (= (count args) 2) (let [[m n] args] (infrow f m n))\n        (= (count args) 4) (let [[m n s t] args] (take s (map #(take t %) (infrow f m n)))))))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 168, "code": ";; http://www.4clojure.com/problem/168\n(fn inline-matrix\n  ([f] (inline-matrix f 0 0 -1 -1))\n  ([f m n] (inline-matrix f m n -1 -1))\n  ([f m n max-row max-col]\n   (letfn [(row-fn [f n col-no m]\n             (when-not (zero? col-no)\n               (lazy-seq (cons (f m n) (row-fn f (inc n) (dec col-no) m)))))\n           (col-fn [n row-no]\n             (when-not (zero? row-no)\n               (lazy-seq (cons n (col-fn (inc n) (dec row-no))))))]\n     (map (partial row-fn f n max-col) (col-fn m max-row)))))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 168, "code": ";(vec (\n(fn call\n  ([f i j]\n      (letfn\n       [(iter [f from]\n          (lazy-seq\n            (cons\n             from\n             (iter\n              f\n              (f from)))))]\n      (let [d (iter inc j)]\n (->> (iter inc i)\n     (map\n      #(->> d\n            (map\n             (fn [x]\n               (f % x))))\n         )\n     ))))\n  ([f]\n   (call f 0 0))\n  ([f i j n m]\n   (->> (call f i j)\n       (map #(take m %))\n       (take n))))\n;str 3 2 8 2))\n;#(/ % (inc %2)) 1 0 6 4))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 168, "code": "(fn inf-mat\n  ([f] (inf-mat f 0 0))\n  ([f m n]\n   (letfn [(gen-row [i j]\n             (cons\n              (f i j)\n              (lazy-seq (gen-row i (inc j)))))\n           (gen-mat [i]\n             (cons\n              (lazy-seq (gen-row i n))\n              (lazy-seq (gen-mat (inc i)))))]\n     (lazy-seq\n      (gen-mat m))))\n  ([f m n s t] (->> (inf-mat f m n)\n                    (map #(take t %))\n                    (take s))))", "user": "527ccaf4e4b0757a1b17136d"}, {"problem": 168, "code": "(fn matrix\n  ([f] (map #(map (fn [y] (f % y)) (map-indexed (fn [idx itm] idx) (repeatedly (fn [] 1))))\n            (map-indexed (fn [idx itm] idx) (repeatedly (fn [] 1)))))\n  ([f m n]\n   (letfn [(my-drop [n xs]\n            (->> xs\n                 (map-indexed (fn [idx itm] (list idx itm)))\n                 (filter (fn [[idx itm]] (>= idx n)))\n                 (map (fn [[idx itm]] itm))))]\n     (my-drop m (map #(my-drop n %) (matrix f)))))\n  ([f m n s t](take s (map #(take t %) (matrix f m n)))))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 168, "code": "(fn k\n         ([fun x y s t]  (take s (map #(take t %) (k fun x y))))\n         ([fun] (k fun 0 0))\n         ([fun x y]\n          (lazy-seq\n           (cons\n            (let [k2 (fn k3[fun x y](lazy-seq\n                                   (cons\n                                    (fun x y)\n                                    (k3 fun x (inc y)))))]\n              (k2 fun x y ))\n            (k fun (inc x) y)))))", "user": "5d0cf1c8e4b0cc9c91588246"}, {"problem": 168, "code": "(fn [& args]\n  (let [[f m n s t] args]\n    ((fn A\n       ([] (A 0))\n       ([i]\n        (cond\n          (and m (< i m)) (A (inc i))\n          (and s (< i (+ m s))) (lazy-seq (cons (A i 0) (A (inc i))))\n          s nil\n          :else (lazy-seq (cons (A i 0) (A (inc i))))))\n       ([i j]\n        (cond\n          (and n (< j n)) (A i (inc j))\n          (and t (< j (+ n t))) (lazy-seq (cons (f i j) (A i (inc j))))\n          t nil\n          :else (lazy-seq (cons (f i j) (A i (inc j))))))))))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 168, "code": "(fn ThisFunc\n    ([F] (ThisFunc F 0 0 nil nil) )\n    ([F StartRow StartCol] (ThisFunc F StartRow StartCol nil nil) )\n    ([F StartRow StartCol EndRow EndCol]\n      (let [\n        ;; \u0435\u0441\u043b\u0438 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u043d\u0435 \u0437\u0430\u0434\u0430\u043d\u044b, \u0442\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u043c\u0430\u043a\u0438\u0441\u043c\u0443\u043c\n        EndRow (if (nil? EndRow) (Integer/MAX_VALUE) (+ StartRow (dec EndRow)))\n        EndCol (if (nil? EndCol) (Integer/MAX_VALUE) (+ StartCol (dec EndCol)))\n        ;; \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n        SingleRow (fn SR [Row Col]\n          ;; \u0435\u0441\u043b\u0438 \u0432\u044b\u0448\u043b\u0438 \u0437\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u044b\n          (cond\n            (> Row EndRow) nil\n            (> Col EndCol) nil\n            :else\n            (lazy-seq (cons (F Row Col) (SR Row (inc Col) )))\n          )\n        )\n        ;; \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0434\u0430\u043d\u043d\u043e\u0439\n        Rows (fn R [Row]\n          ;; \u0435\u0441\u043b\u0438 \u0432\u044b\u0448\u043b\u0438 \u0437\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u044b\n          (if (> Row EndRow) \n            nil\n            (lazy-seq (cons (SingleRow Row StartCol)(R (inc Row)) ) )\n          )\n        )        \n      ]\n        ;; \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c\n        (Rows StartRow)\n      )\n    )\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 168, "code": "(fn im\n  ([f]\n   (im f 0 0))\n  ([f i j]\n   (im f i j :inf :inf))\n  ([f i j m n]\n   (letfn [(check-bounds [x]\n             (or (= :inf x) (pos? x)))\n           (safe-dec [x]\n             (case x :inf :inf (dec x)))\n           (lazy-row [i j x]\n             (if (check-bounds x)\n               (lazy-seq (cons (f i j) (lazy-row i (inc j) (safe-dec x))))\n               nil))]\n     (if (check-bounds m)\n       (lazy-seq (cons (lazy-row i j n) (im f (inc i) j (safe-dec m) n)))\n       nil))))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 168, "code": "(fn [& [f m n s t]] (let [rnge (fn rnge ([x] (cons x (lazy-seq (rnge (inc x))))) ([] (rnge 0))) matrix (fn [c1 c2] (map #(map (partial f %) c2) c1))] (cond t (map #(take t %) (take s (matrix (rnge m) (rnge n)))) n (matrix (rnge m) (rnge n)) :else (matrix (rnge) (rnge)))))", "user": "5078d366e4b08327cd804a5b"}, {"problem": 168, "code": "(fn infinite-matrix\n   ([fn] (infinite-matrix fn 0 0))\n   ([fn a b] (lazy-seq(cons ((fn infinite-stream\n                      ([fn] (infinite-stream fn 0))\n                      ([fn n] (lazy-seq (cons (apply fn (list n)) (infinite-stream fn (inc n))))))\n                    (partial fn a) b) \n                   (lazy-seq (infinite-matrix fn (inc a) b)))))\n   ([fn a b c d] (take c (map #(take d %) (infinite-matrix fn a b)))))", "user": "5d931a58e4b0d3f9b434ad10"}, {"problem": 168, "code": "(fn infinite-matrix\n          ([f] (infinite-matrix f 0 0))\n          ([f from-row from-column] (infinite-matrix f from-row from-column nil nil))\n          ([f from-row from-column row-count column-count]\n           (letfn [(row\n                     ([i] (row i from-column))\n                     ([i j] (lazy-seq (cons (f i j)\n                                           (if (or (nil? column-count) (< j (+ from-column column-count -1))) (row i (inc j)) '())))))\n                   (rows ([i] (lazy-seq (cons (row i)\n                                              (if (or (nil? row-count) (< i (+ from-row row-count -1))) (rows (inc i)) '())))))]\n             (rows from-row))))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 168, "code": "(letfn [(R [f m n] (lazy-seq (cons (f m n) (R f m (inc n)))))]\n  (fn M\n    ([f] (M f 0 0))\n    ([f m n] (lazy-seq (cons (R f m n) (M f (inc m) n))))\n    ([f m n s t] (->> (M f m n) (take s) (map #(take t %))))))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f m n]\n   (infinite-matrix f m n -1 -1)\n   )\n\n  ([f]\n   (infinite-matrix f 0 0))\n\n  ([f m n s t]\n   (let [build-row (fn build-row [func row column]\n                     (if (= column (+ n t))\n                       []\n                       (lazy-seq (cons (func row column) (build-row func row (inc column))))))\n         build-matrix (fn build-matrix [func start-row start-column]\n                        (if (= start-row (+ m s))\n                          []\n                          (lazy-seq (cons (build-row func start-row start-column)\n                                          (build-matrix func (inc start-row) start-column)))))]\n     (build-matrix f m n)\n     ))\n  )", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 168, "code": "(fn infinite_matrix \n    (\n        [f]\n        (let\n            [\n                subsequence\n                    (fn g [i j]\n                        (lazy-seq (cons (f i j) (lazy-seq (g i (inc j)))))\n                    )\n                sequence_of_sequences\n                    (fn g [x start]\n                        (lazy-seq (cons (subsequence x start) (lazy-seq (g (inc x) start))))\n                    )\n            ]\n            (sequence_of_sequences 0 0)\n        )\n    )\n    (\n        [f m n]\n        (let\n            [\n                subsequence\n                    (fn g [i j]\n                        (lazy-seq (cons (f i j) (lazy-seq (g i (inc j)))))\n                    )\n                sequence_of_sequences\n                    (fn g [x start]\n                        (lazy-seq (cons (subsequence x start) (lazy-seq (g (inc x) start))))\n                    )\n            ]\n            (sequence_of_sequences m n)\n        )\n    )\n    (\n        [f m n s t]\n        (let\n            [\n                subsequence\n                    (fn g [i j]\n                        (lazy-seq (cons (f i j) (lazy-seq (g i (inc j)))))\n                    )\n                sequence_of_sequences\n                    (fn g [x start]\n                        (lazy-seq (cons (subsequence x start) (lazy-seq (g (inc x) start))))\n                    )\n            ]\n            (take s (map #(take t %) (sequence_of_sequences m n)))\n        )\n    )\n)", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 168, "code": "(fn m\n  ([f] (m f 0 0))\n  ([f m n]\n   (letfn [(lazy [c]\n             (cons c (lazy-seq (lazy (inc c)))))]\n     (map (fn [x] (map (fn [y] (f x y)) (lazy n))) (lazy m))))\n  ([f mm n s t] (take s (map #(take t %) (m f mm n)))))", "user": "529dfc6de4b04e0c58e87b8a"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 168, "code": "(fn f168\n  ([f m n]\n   (let [myrange (fn myrange\n                   ([n] (lazy-seq (cons n (myrange (inc n)))))\n                   ([] (lazy-seq (cons 0 (myrange 1)))))\n         row0 (map #(f m (+ n %)) (myrange))]\n     (lazy-seq (cons row0\n                     (f168 f (inc m) n))))\n   )\n  ([f]\n   (f168 f 0 0))\n  ([f m n s t]\n   (take s (map (partial take t) (f168 f m n)))))", "user": "583048d9e4b051871117c007"}, {"problem": 168, "code": "(fn m\n  ([f] (m f 0 0))\n  ([f x0 y0]\n   (letfn [(rng [i] (lazy-seq (cons i (rng (inc i)))))]\n     (map (fn [row] (map #(f row %) (rng y0))) (rng x0))))\n  ([f x0 y0 x1 y1] (take x1 (map #(take y1 %) (m f x0 y0)))) )", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 168, "code": "(fn mtx [& args]\n  (let [lazy-iter (fn [f n]\n                    (let [lazy-iter-inner (fn lazy-iter-inner [n]\n                                            (let [fapp (f n)]\n                                              (lazy-seq (cons fapp (lazy-iter-inner fapp)))))]\n                      (lazy-seq (cons n (lazy-iter-inner n)))))\n        gen-row (fn [row f] (lazy-seq (map #(f row %) (lazy-iter inc 0))))\n        mtx1 (fn [f] (->>\n                       (lazy-iter inc 0)\n                       (map #(gen-row % f))))\n        my-drop (fn my-drop [n s]\n                  (if (pos? n)\n                    (recur (dec n) (rest s))\n                    s))\n        mtx3 (fn [f m n] (->>\n                           (lazy-iter inc 0)\n                           (my-drop m )\n                           (map #(my-drop n (gen-row % f)))))\n        mtx5 (fn [f m n s t]\n               (->>\n                 (lazy-iter inc 0)\n                 (my-drop m)\n                 (take s)\n                 (map #(take t (my-drop n (gen-row % f))))))\n        ]\n    (case (count args)\n      1 (apply mtx1 args)\n      3 (apply mtx3 args)\n      5 (apply mtx5 args))))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n    (infinite-matrix f 0 0))\n  ([f m n]\n    (letfn [(inner [i j]\n              (lazy-seq (cons (f i j) (inner i (inc j)))))\n            (outer [i]\n              (lazy-seq (cons (inner i n) (outer (inc i)))))]\n      (outer m)))\n  ([f m n s t]\n    (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 168, "code": "(fn make\n    ([f] (make f 0 0))\n    ([f m n] ((fn down [g a b]\n                (lazy-seq (cons (g a b) (down g (inc a) b))))\n              (fn right [a b] (lazy-seq (cons (f a b) (right a (inc b))))) m n))\n    ([f m n s t] (take s (map #(take t %) (make f m n)))))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 168, "code": "(fn [fr f & [m n s t]] \n  (-> #(fr (partial f %) %2)\n      ((fn [fs] (partial fr #(fs % (or n 0)))))\n      (#(% (or m 0)))\n      (#(if s (take s (map (partial take t) %)) %))))\n(fn fr [fu p] (lazy-seq (cons (fu p) (fr fu (inc p)))))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 168, "code": "(fn foo ([f] (foo f 0 0))\n  ([f m n] (foo f m n -1 -1))\n  ([f m n s t]\n   (letfn [(r [i j] (if (= i j) '() (lazy-seq (cons i (r (inc i) j)))))]\n     (map (fn [i] (map (fn [j] (f i j)) (r n (+ n t)))) (r m (+ m s))))))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 168, "code": "(fn inf-matrix\n  ([f]\n   ; gen-list will be all pos integers 0, 1, 2, ...\n   (let [gen-list\n         ((fn positive-ints\n           ([]\n            (positive-ints 0))\n           ([a]\n            (lazy-seq (cons a (positive-ints (inc a)))))))]\n     ; use gen-list as template for all i-columns \n     (lazy-seq\n      (map-indexed\n       ; generate j-columns with f(i, j)\n       (fn [i-index _] (lazy-seq (map (partial f i-index) gen-list)))\n       gen-list))))\n  ([f m n]\n   ; get basic matrix and remove m rows (i)\n   (let [mat (nthrest (inf-matrix f) m)]\n     ; remove n cols from each inner list (j)\n     (map (fn [inner-list] (nthrest inner-list n)) mat)))\n  ([f m n s t]\n   ; get basic matrix and take first s rows (s)\n   (let [mat (take s (inf-matrix f m n))]\n     ; take first t cols from inner list (j)\n     (map (fn [inner-list] (take t inner-list)) mat))))", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 168, "code": "(fn infmat\n  ([f] (infmat f 0 0)) \n  ([f i j]\n   (letfn [(row [i j]\n                (lazy-seq (cons (f i j)\n                                (row i (inc j)))))]\n     (lazy-seq (cons (row i j) (infmat f (inc i) j)))))\n  ([f i j s t]\n   (take s (map (partial take t) (infmat f i j)))))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 168, "code": "(fn inf\n  ([f] (inf f 0 0))\n  ([f m n] (inf f m n Double/POSITIVE_INFINITY Double/POSITIVE_INFINITY))\n  ([f m n s t]\n   (let [inner (fn inner [i j]\n                 (lazy-seq (cons (f i j)\n                                 (if (< (inc j) (+ t n)) (inner i (inc j))))))\n         outer (fn outer [i]\n                 (lazy-seq (cons ((partial inner i) n)\n                                 (if (< (inc i) (+ s m)) (outer (inc i))))))]\n     (outer m))))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 168, "code": "(fn solve\n   ([f] (solve f 0 0))\n   ([f m n] (solve f m n nil nil))\n   ([f m n s t]\n    (letfn\n        [(incs [f i] (lazy-seq (cons (f i) (incs f (inc i)))))]\n      (let [inf-mtx (incs #(incs (partial f %) n) m)]\n        (if s (take s (map #(take t %) inf-mtx)) inf-mtx)))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 168, "code": "(fn inf-mat\n  ([f]\n   (inf-mat f 0 0))\n  ([f r1 c1]\n   (inf-mat f r1 c1 -1 -1))\n  ([f r1 c1 r2 c2]\n   (letfn [(row [idx nidx]\n             (lazy-seq\n              (when-not (zero? nidx)\n                (cons idx (row (inc idx) (dec nidx))))))]\n     (map #(map (partial f %) (row c1 c2)) (row r1 r2)))))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 168, "code": "(fn lazy-mat\n  ([f] (lazy-mat f 0 0))\n  ([f i j]\n   (lazy-seq\n     (cons\n       (let [row (fn row [j] (lazy-seq (cons (f i j)\n                                             (row (inc j)))))]\n         (row j))\n       (lazy-mat f (inc i) j))))\n  ([f i j x y]\n   (take x (map #(take y %) (lazy-mat f i j)))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f]\n   (infinite-matrix f 0 0))\n  ([f m n]\n   (lazy-seq (cons ((fn helper-j [i j]\n                      (lazy-seq (cons (f i j) (helper-j i (inc j))))) m n) (infinite-matrix f (inc m) n))))\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix f m n)))))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 168, "code": ";ozan's solution\n(fn inf\n  ([f] (inf f 0 0))\n  ([f m n] (inf f m n Double/POSITIVE_INFINITY Double/POSITIVE_INFINITY))\n  ([f m n s t]\n   (let [inner (fn inner [i j]\n                 (lazy-seq (cons (f i j)\n                                 (if (< (inc j) (+ t n)) (inner i (inc j))))))\n         outer (fn outer [i]\n                 (lazy-seq (cons ((partial inner i) n)\n                                 (if (< (inc i) (+ s m)) (outer (inc i))))))]\n     (outer m))))\n\n; naive implementation without restriction which fails the last test (check on diagonal)\n#_(\"\n(fn infty-matrix\n([f] (let [infty-row (fn [line] (map (fn [x] (f line x)) (iterate inc 0)))]\n(map infty-row (iterate inc 0))))\n([f m n] (drop m (map #(drop n %) (infty-matrix f))))\n([f m n s t] (take s (map #(take t %) (infty-matrix f m n)))))\n\")", "user": "5e13a6b7e4b099d064963001"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n] (infinite-matrix f m n Integer/MAX_VALUE Integer/MAX_VALUE))\n  ([f m n s t]\n   (let [*range (fn iter [n] (lazy-seq (cons n (iter (inc n)))))\n         a (*range 0)\n         x (take s (filter #(>= % m) a))\n         y (take t (filter #(>= % n) a))]\n     (map #(map (partial f %) y) x)\n     )))", "user": "5300158ae4b0d8b024fd370f"}, {"problem": 168, "code": "(fn g\n  ([f] (g f 0 0))\n  ([f m n]\n   (letfn [(i [x] (lazy-seq (cons x (i (inc x)))))] \n     (map #(map (partial f %) (i n)) (i m))))\n  ([f m n s t]\n   (take s (map #(take t %) (g f m n)))))", "user": "4eb70649535d7eef30807373"}, {"problem": 168, "code": "(fn im\n  ([f] (im f 0 0))\n  ([f m n s t] (take s (map #(take t %) (im f m n))))\n  ([f m n]\n   (letfn [(row [f m n]\n             (lazy-seq (cons (f m n) (row f m (inc n)))))\n           (col [f m n]\n             (lazy-seq (cons (row f m n) (col f (inc m) n))))]\n     (col f m n))))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 168, "code": "(fn inf-matrix\n  ([f]\n   (inf-matrix f 0 0))\n  ([f m n]\n   (letfn [(rng [n]\n             (lazy-seq (cons n (rng (inc n)))))]\n     (map #(map (fn [j] (f % j)) (rng n)) (rng m))))\n  ([f m n s t]\n   (take s (map #(take t %) (inf-matrix f m n)))))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 168, "code": "(fn mk-m\n  ([f m n]\n   (mk-m f m n nil nil))\n  ([f] (mk-m f 0 0))\n  ([f m n s t]\n   (letfn [(mk-col [row col]\n             (lazy-seq (cons (f row col)\n                             (mk-col row (inc col)))))\n           (mk-row [row]\n             (lazy-seq (cons (mk-col row n)\n                             (mk-row (inc row)))))]\n     (let [mat (mk-row m)]\n       (if (and s t)\n         (take s (map #(take t %) mat))\n         mat)))))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 168, "code": "(fn g\n  ([f] (g f 0 0))\n  ([f m n]\n   (lazy-seq\n    (cons ((fn h [f m n]\n               (lazy-seq (cons (f m n) (h f m (inc n)))))\n           f m n)\n          (g f (inc m) n))))\n  ([f m n s t]\n   (take s (map #(take t %) (g f m n)))))", "user": "50ed4626e4b01236b1d4983c"}, {"problem": 168, "code": "(fn mat\n  ([f] (mat f 0 0))\n  ([f m n s t]\n   (take s (map #(take t %) (mat f m n))))\n  ([f m n]\n   (letfn [(row [i j] (lazy-seq (cons (f i j) (row i (inc j)))))]\n     (lazy-seq (cons (row m n) (mat f (inc m) n))))))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 168, "code": "(fn im \n  ([f] (im f 0 0))\n  ([f m n] ((fn row [i] \n              (lazy-seq \n               (cons ((fn col [j] (lazy-seq (cons (f i j) (col (inc j))))) n)\n                     (row (inc i))))) m))\n  ([f m n s t] (take s (map #(take t %) (im f m n)))))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 168, "code": "(fn ([f] (letfn [(ii [x] (lazy-seq (cons x (ii (inc x)))))\n                 (iii [x y] (lazy-seq (cons (map #(f y %) (ii x)) (iii x (inc y)))))]\n         (iii 0 0))) \n   ([f m n](letfn [(ii [x] (lazy-seq (cons x (ii (inc x)))))\n                   (iii [x y] (lazy-seq (cons (map #(f y %) (ii x)) (iii x (inc y)))))]\n           (iii n m)))\n   ([f m n s t](letfn [(ii [x] (lazy-seq (cons x (ii (inc x)))))\n                       (iii [x y] (lazy-seq (cons (map #(f y %) (ii x)) (iii x (inc y)))))]\n               (take s (map #(take t %) (iii n m))))))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 168, "code": "(fn inf-mat\n  ([f]\n   (inf-mat f 0 0))\n  ([f m n]\n   (let [row-tail (fn rt [i j]\n                    (lazy-seq (cons (f i j)\n                                    (rt i (inc j)))))\n         mat-tail (fn mt [i j]\n                    (lazy-seq (cons (row-tail i j)\n                                    (mt (inc i) j))))]\n     (mat-tail m n)))\n  ([f m n s t]\n   (->> (inf-mat f m n)\n        (take s)\n        (map (partial take t)))))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 168, "code": "(letfn [(gen-row [f c] (lazy-seq\n                        (cons\n                         (f c)\n                         (gen-row f (inc c)))))\n        (gen-mx [f r n] (lazy-seq\n                         (cons\n                          (gen-row (partial f r) n)\n                          (gen-mx f (inc r) n))))]\n  (fn mx\n    ([f] (mx f 0 0))\n    ([f m n] (gen-mx f m n))\n    ([f m n s t] (->> (mx f m n) (map (partial take t)) (take s)))))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 168, "code": "(fn infinite-matrix  \n   ([f] (infinite-matrix f 0 0))\n  ([f x y]\n   (letfn [(to-y [y] (lazy-seq (cons y (to-y (inc y)))))\n           (to-x [x] (lazy-seq (cons (map #(f x %) (to-y y)) (to-x (inc x)))))]\n     (to-x x)))\n  ([f x y s t]\n   (take s (map #(take t %) (infinite-matrix f x y)))))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 168, "code": "(fn mat\n  ([f m n s t]\n   ((fn mat-col [i]\n      (if (= i (+ m s)) nil\n          (cons ((fn mat-row [j]\n                   (if (= j (+ n t)) nil\n                       (cons (f i j) (mat-row (inc j))))) n) (mat-col (inc i))))) m))\n  ([f m n]\n   ((fn mat-col [i]\n    (lazy-seq (cons ((fn mat-row [j]\n                       (lazy-seq (cons (f i j) (mat-row (inc j))))) n) (mat-col (inc i))))) m))\n  ([f] (mat f 0 0)))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 168, "code": "(fn matrix\n  ([f]\n   (matrix f 0 0))\n  ([f m n]\n   (letfn [(row [i j]\n             (lazy-seq (cons (f i j) (row i (inc j)))))\n           (rows [i] (lazy-seq (cons (row i n) (rows (inc i)))))]\n     (rows m)))\n  ([f m n s t]\n   (->> (matrix f m n)\n        (take s)\n        (map #(take t %)))))", "user": "5f300f28e4b033932238a682"}, {"problem": 168, "code": "(fn foo [f & [m n s t]]\n  (letfn [(r [x a] (if (= a 0)\n                     '()\n                     (cons x (lazy-seq (r (inc x) (dec a))))))]\n\t(map #(map (partial f %)\n               (r (or n 0) (or t -1)))\n         (r (or m 0) (or s -1)))))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 168, "code": "(fn infinima \n  ([f] (infinima f 0 0 nil nil))\n  ([f a b] (infinima f a b nil nil))\n  ([f sr sc tre tce]\n     (letfn [(continue? [s e i] (or (nil? e) (< i (+ s e))))\n             (cols [i j cs]\n                (if (continue? sc tce i) \n                    (lazy-seq (cons (f j i) (cols (inc i) j cs)))\n                    cs))\n             (rows [j rs]\n               (if (continue? sr tre j)\n                 (lazy-seq (cons (cols sc j ()) (rows (inc j) rs)))\n                 rs))]\n          (rows sr ()))))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 168, "code": "(fn infmat\n\t([f]\n\t\t((fn rowbaby [row2]\n\t\t\t(lazy-seq\n\t\t\t\t(cons\n\t\t\t\t\t(\n\t\t\t\t\t\t(fn colbaby [col row]\n\t\t\t\t\t\t\t(lazy-seq\n\t\t\t\t\t\t\t\t(cons\n\t\t\t\t\t\t\t\t\t(f row col)\n\t\t\t\t\t\t\t\t\t(colbaby (inc col) row))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t0, row2\n\t\t\t\t\t)\n\t\t\t\t\t(rowbaby (inc row2))\n\t\t\t\t)\n\t\t\t)\n\t\t) 0)\n\t)\n\t([f, m, n]\n\t\t(letfn [(yamdrop [ct, arr]\n\t\t\t(if (= 0 ct)\n\t\t\t\tarr\n\t\t\t\t(recur (dec ct) (rest arr))\n\t\t\t)\n\t\t)]\n\t\t\t(map\n\t\t\t\t#(yamdrop n %)\n\t\t\t\t(yamdrop m (infmat f))\n\t\t\t)\n\t\t)\n\t)\n\t([f, m, n, s, t]\n\t\t(map\n\t\t\t#(take t %)\n\t\t\t(take s (infmat f m n))\n\t\t)\n\t)\n)", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 168, "code": "(fn infmat\n  ([f] (infmat f 0 0))\n  ([f r c] (infmat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n s t] (take s (map #(take t %) (infinite-matrix f m n))))\n  ([f m n]\n   (let [lazy-row (fn lazy-row [f row column]\n                    (lazy-seq (cons (f row column) (lazy-row f row (inc column)))))\n         lazy-matrix (fn lazy-matrix [f row column]\n                       (lazy-seq (cons (lazy-row f row column) (lazy-matrix f (inc row) column))))]\n     (lazy-matrix f m n))))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 168, "code": "(fn im\n  ([f] (im f 0 0))\n  ([f m n] (im f m n -1 -1))\n  ([f m n s t]\n   (letfn [(iota [i j]\n             (if (== i j)\n               ()\n               (cons i (lazy-seq (iota (inc i) j)))))]\n     (map (fn [i]\n            (map (fn [j]\n                   (f i j))\n                 (iota n (+ n t))))\n          (iota m (+ m s))))))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 168, "code": "(fn mat\n  ([f i0 j0]\n   (letfn\n    [(outer [i] (lazy-seq (cons (inner i j0) (outer (inc i)))))\n     (inner [i j] (lazy-seq (cons (f i j) (inner i (inc j)))))]\n     (outer i0)))\n  ([f] (mat f 0 0))\n  ([f i0 j0 r c] (->> (mat f i0 j0)\n                      (take r)\n                      (map #(take c %)))))", "user": "5fa416ece4b0f0ebd91b7803"}, {"problem": 168, "code": "(fn ifm3\n  ([f]\n   (ifm3 f 0 0))\n  ([f x y]\n   (lazy-seq (cons\n              (lazy-seq (cons (f x y) (first (ifm3 f x (inc y)))))\n              (ifm3 f (inc x) y))))\n  ([f x y w h]\n   (take w (map #(take h %) (ifm3 f x y)))))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 168, "code": "(fn fa\n  ([f] (fa f 0 0))\n  ([f i j mi mj] (take mi (map #(take mj %) (fa f i j))))\n  ([f i j]\n   (letfn [(fs [n] (cons n (lazy-seq (fs (inc n)))))]\n     (map (fn [i] (map (fn [j] (f i j)) (fs j))) (fs i))\n     )\n   ))", "user": "507e68abe4b085af06e3afd2"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(rowe [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (rowe (inc st) (dec wd))))))]\n     (map #(map (partial f %) (rowe c w)) (rowe r h)))))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 168, "code": "(fn im\n  ([] (lazy-seq (cons nil (im))))\n  ([f] (map-indexed (fn [i _] (map-indexed (fn [j _] (f i j)) (im))) (im)))\n  ([f m n] (map #(nthrest % n) (nthrest (im f) m)))\n  ([f m n s t] (->> (im f m n) (take s) (map #(take t %)))))", "user": "5db0172be4b0f8c104ccfc96"}, {"problem": 168, "code": "(fn matrix\n    ([f] (matrix f 0 0))\n    ([f m n]\n     (letfn [(col [n] (lazy-seq (cons (f m n) (col (inc n)))))]\n         (lazy-seq (cons (col n) (matrix f (inc m) n)))))\n    ([f m n s t] (map #(take t %) (take s (matrix f m n)))))", "user": "600ae927e4b074f607df6689"}, {"problem": 168, "code": "(fn inf-matrix \n\n ([f] (inf-matrix f 0 0))\n ([f m n]\n    (letfn [(gen-columns \n              ([f x] (gen-columns f x 0))\n              ([f x y] \n               (lazy-seq (cons (f x y) (gen-columns f x (inc y))))))\n\n            (gen-rows ([f x] (gen-rows f x 0))\n                      ([f x y] \n                       (lazy-seq (cons (gen-columns f x y) (gen-rows f (inc x) y)))))\n            ]\n\n       (gen-rows f m n)\n      ; (loop [rem-drop n res (gen-rows f m n)] \n      ;   (if (= rem-drop 0)\n      ;     res\n      ;     (recur (dec rem-drop) (rest res))\n      ;   )\n        \n      ;   )\n        ) ; Need to handle n\n )\n ([f m n s t]\n    (take s (map #(take t %) (inf-matrix f m n)))\n ))", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 168, "code": "(fn h\n  ([f] (h f 0 0)) \n  ([f m n]\n   (letfn [(g [x]\n             (lazy-seq\n              (cons x (g (inc x)))))]\n     (lazy-seq\n      (cons\n       (map #(f m %) (g n))\n       (h f (inc m) n)))))\n  ([f m n s t]\n   (->> (h f m n)\n        (map #(take t %))\n        (take s))))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (infinite-matrix f 0 0))\n  ([f m n] \n    \t(letfn [(cols [i j] (lazy-seq (cons (f i j) (cols i (inc j)))))\n                (rows [i j] (lazy-seq (cons (cols i j) (rows (inc i) j))))]\n      (rows m n)\n   )\n  )\n  ([f m n s t] (take s (map #(take t %) (infinite-matrix f m n))))\n)", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 168, "code": "(fn lol\n  ([f]\n   (lol f 0 0))\n  ([f m n]\n   (let [f_arr (fn rekF [i j] (lazy-seq (cons (f i j) (rekF i (inc j)))))] \n     (lazy-seq (cons (f_arr m n) (lol f (inc m) n)))))\n  ([f m n s t] \n   (take s (map #(take t %) (lol f m n)))))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 168, "code": "(fn interpret-func\n  ([f] (interpret-func f 0 0))\n  ([f m n]\n   (let [inf-list (fn inf-list [n]\n                    (cons n (lazy-seq (inf-list (inc n)))))\n         rows (inf-list m)\n         cols (inf-list n)]\n     (map (fn [i] (map (fn [j] (f i j)) cols)) rows)))\n  ([f m n s t]\n   (take s (map #(take t %) (interpret-func f m n)))))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 168, "code": "(fn infinite\n  ([f] (infinite f 0 0))\n  ([f m n] (letfn [(infi-line [cur]\n                     (lazy-seq\n                      (cons (f m cur)\n                            (infi-line (inc cur)))))]\n             (lazy-seq\n              (cons (infi-line n)\n                    (infinite f (inc m) n)))))\n  ([f m n s t] (take s (map (partial take t)\n                            (infinite f m n)))))", "user": "60096aabe4b074f607df667f"}, {"problem": 168, "code": "(fn matrix\n  ([f] (matrix f 0 0))\n  ([f m n s t] (take s (map #(take t %) (matrix f m n))))\n  ([f m n]\n   (let [r (fn rr [v] (cons v (lazy-seq (rr (inc v)))))\n         c (fn cc [v] (cons v (lazy-seq (cc v))))\n         row (fn [a b] (map f (c a) (r b)))]\n     (map row (r m) (c n)))))", "user": "5cb41c40e4b026601754b911"}, {"problem": 168, "code": "(fn infinite-matrix1\n  ([f n m]\n   ((fn lazy-row [row]\n      (lazy-seq (cons ((fn lazy-col [col]\n                         (lazy-seq (cons (f row col)\n                                         (lazy-col (inc col))))) m)\n                      (lazy-row (inc row))))) n))\n  ([f n m s t]\n   (take s (map (fn [row-seq] (take t row-seq))\n                (infinite-matrix1 f n m))))\n  ([f]\n   (infinite-matrix1 f 0 0)))", "user": "60460824e4b02d28681c77bc"}, {"problem": 168, "code": "(fn i\n  ([f] (i f 0 0))\n  ([f m n]\n   (letfn [(r [y x] (lazy-seq (cons (f y x) (r y (+ x 1)))))\n           (c [y x] (lazy-seq (cons (r y x) (c (+ y 1) x))))]\n     (c m n)))\n  ([f m n s t] (map (partial take t) (take s (i f m n)))))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 168, "code": "(fn matrix\n  ([f]\n   (matrix f 0 0))\n  ([f m n]\n   (letfn [(row [i j f] (lazy-seq (cons (f j i) (row (inc i) j f))))\n           (col [i j f] (lazy-seq (cons (row i j f) (col i (inc j) f))))]\n     (col n m f)))\n  ([f m n s t]\n   (take s (map #(take t %) (matrix f m n)))))", "user": "4e586949535d8a8b8723a292"}, {"problem": 168, "code": "(fn build\n    ([f] (build f 0 0 nil nil))\n    ([f m n] (build f m n nil nil))\n    ([f m n s t]\n     (let [take_ #(if (nil? %) identity (partial take %))\n           take_s (take_ s)\n           take_t (take_ t)\n           loop2 (fn loop2 [i j]\n                     (lazy-seq\n                       (cons (f i j)\n                             (loop2 i (inc j)))))\n           loop1 (fn loop1 [i]\n                   (lazy-seq\n                     (cons\n                       (take_t (loop2 i n))\n                       (loop1 (inc i)))))]\n       (take_s (loop1 m)))))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 168, "code": "(letfn [(row\n            ([f i j] (lazy-seq (cons (f i j) (row f i (inc j))))))\n          (matrix\n            ([f]     (matrix f 0 0))\n            ([f r c] (lazy-seq (cons (row f r c) (matrix f (inc r) c)))))]\n\n    (fn M\n      ([f]\n       (matrix f))\n      ([f m n]\n       (matrix f m n))\n      ([f m n s t]\n       (take s (map #(take t %) (matrix f m n))))))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 168, "code": "(fn matrix\n  ([f]\n   (matrix f 0 0))\n  ([f m n]\n   (letfn [(row [n] (lazy-seq (cons (f m n) (row (inc n)))))]\n     (lazy-seq (cons (row n) (matrix f (inc m) n)))))\n  ([f m n s t]\n   (map #(take t %) (take s (matrix f m n)))))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 168, "code": "(fn test-1[f & rst]\n  (let [[m-val n-val s-val t-val] rst\n        m (if (nil? m-val) 0 m-val)\n        n (if (nil? n-val) 0 n-val)\n        s (if (nil? s-val) nil s-val)\n        t (if (nil? t-val) nil t-val)] \n    (letfn[(helper-1[f1 x y] (lazy-seq (cons (f1 x y) (helper-1 f1 x (inc y)))))\n           (take-fun[f2 m1 n1 s1 t1] (take s1 (map #(take t1 %) (test-1 f2 m1 n1))))]\n      (cond (nil? s)\n            (lazy-seq (cons (helper-1 f m n) (test-1 f (inc m) n)))\n           :else (take-fun f m n s t)))))", "user": "5bab31f1e4b0a20761a23471"}, {"problem": 168, "code": "(fn infinite-matrix-combined\n  ([f]\n   (infinite-matrix-combined f 0 0))\n  ([f x y]\n   (let [forming-rows (fn forming-rows [f x y]\n                        (lazy-seq (cons (f x y) (forming-rows f x (inc y)))))]\n     (lazy-seq (cons\n                 (lazy-seq (cons (f x y) (forming-rows f x (inc y))))\n                 (infinite-matrix-combined f (inc x) y)))))\n  ([f m n s t]\n   (take s (map #(take t %) (infinite-matrix-combined f m n)))))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 168, "code": "(fn compute \n  ( [f m n s t]\n  (let [compute-inner (fn compute-inner [f n t]\n                        (when (>= (dec t) 0)\n                          (lazy-seq (cons (f m n) (compute-inner f (inc n) (dec t))))))]\n    (when (>= (dec s) 0)\n      (lazy-seq (cons\n                 (compute-inner f n t)\n                 (compute f (inc m) n (dec s) t))))))\n  ( [f m n] (compute f m n 100000000 10000000))\n  ( [f] (compute f 0 0 10000000 100000000)))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 168, "code": "(fn infinite-matrix\n  ([f] (letfn [(range-reimp [n] (lazy-seq (cons n (range-reimp (inc n)))))]\n          (map (fn [i] (map (fn [j] (f i j)) (range-reimp 0))) (range-reimp 0))))\n  ([f m n] (letfn [(drop-reimp [n k input] (if (= n k) input (drop-reimp n (inc k) (rest input))))]\n               (map #(drop-reimp n 0 %) (drop-reimp m 0 (infinite-matrix f)))))\n  ([f m n s t] (map #(take t %) (take s (infinite-matrix f m n)))))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 168, "code": "(fn im \n  ([f]\n   (letfn [(my-repeat [x] (lazy-seq (cons x (my-repeat x))))\n           (my-range ([seed] (lazy-seq (cons seed (my-range (inc seed)))))\n                     ([] (my-range 0)))]\n          (->> (my-repeat (my-range))\n               (keep-indexed\n                (fn [i row]\n                  (keep-indexed (fn [j _] (f i j)) row))))))\n  ([f m n] \n   (letfn [(my-drop [n coll]\n                    (keep-indexed (fn [i v] (when (>= i n) v)) coll))]\n             (->> (im f)\n                  (map #(my-drop n %))\n                  (my-drop m))))\n  ([f m n s t] (->> (im f m n)\n                    (map #(take t %))\n                    (take s))))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 168, "code": "(fn imat\n  ([f] (imat f 0 0))\n  ([f r c] (imat f r c -1 -1))\n  ([f r c h w]\n   (letfn [(row [st wd]\n             (lazy-seq\n               (when-not (zero? wd)\n                 (cons st (row (inc st) (dec wd))))))]\n     (map #(map (partial f %) (row c w)) (row r h)))))", "user": "60e56674e4b06b4ffe2acc30"}]