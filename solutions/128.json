[{"code": "(fn [[a b]]\n  {:suit ({\\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade} a)\n   :rank ({\\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12} b (- (int b) 50))})", "problem": 128, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} s)\n   :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8}\n          r (- (int r) 50))})", "problem": 128, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "(fn [[s c]]\r\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\r\n   :rank (or \r\n           ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} c) \r\n           (- (int c) 50))})", "problem": 128, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn [[s n]]\r\n  {:suit ({\\D :diamond \\H :heart} s :club)\r\n   :rank (.indexOf \"23456789TJQKA\" (int n))\r\n   })", "problem": 128, "user": "4dce6e41535d5973398f92a2"}, {"code": "(fn [[s r]]\n   {:suit ({\\S :spade \\D :diamond \\C :club \\H :heart} s)\n    :rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)\n              (- (int r) 50))})", "problem": 128, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn [[s r]] {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})", "problem": 128, "user": "4dae916eedd6309eace4d155"}, {"code": "(fn [[s r]]\r\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\r\n   :rank ((apply assoc {} (interleave \"23456789TJQKA\" (range))) r)})", "problem": 128, "user": "4dc1ee85535d020aff1edf91"}, {"code": "(fn [[s r]] {\n  :suit ((zipmap \"SHDC\" [:spade :heart :diamond :club]) s) \n  :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club} s)\n   :rank (if-let [x ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} r)] \nx (- (int r) \n50))})", "problem": 128, "user": "4db85282535d1e037afb218a"}, {"code": "(fn [[s r]]\r\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\r\n   :rank (if-let [r ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} r)]\r\n           r\r\n           (- (int r) 50))})", "problem": 128, "user": "4db4714f535dc0f10411755a"}, {"code": "(fn [s]\n   (let [suits {\\H :heart, \\D :diamond, \\C :club, \\S :spade}\n         ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n         suit-str (first s) rank-str (second s)]\n     {:suit (suits suit-str) :rank (ranks rank-str)}))", "problem": 128, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [[a b]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} a)\n   :rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} b)\n             (- (int b) 50))})", "problem": 128, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn [[s r]]\n  {:suit ((zipmap \"DHCS\" [:diamond :heart :club :spade]) s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4e52d815535d302ef430da77"}, {"code": "(fn [string]\n  (let [suit (first  string)\n        rank (second string)\n        suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits suit) :rank (ranks rank)}))", "problem": 128, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn [s]\n  (let [ss {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rs {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (ss (first s)) :rank (rs (second s))}))", "problem": 128, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn c[s]\n    (let [suit {\\D :diamond \\H :heart \\C :club \\S :spades}\n\t       rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n\t       {:suit (get suit (first s)) :rank (get rank (second s))}))", "problem": 128, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn [[s r]]\n  {:suit ({\\H :heart \\D :diamond \\C :club \\S :spade} s)\n   :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13)) r)})", "problem": 128, "user": "4e6a61d8535d8ccf87e9fed8"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} s)\n   :rank (or ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} r)\n             (- (int r) 50))})", "problem": 128, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn [digraph]\n   (let [cardkeys (first (re-seq #\"([SHCD])([2-9TJQKA])\" digraph))\n         suit    (cardkeys 1)\n         rank    (cardkeys 2)\n         suitmap {\"H\" :heart, \"D\" :diamond, \"S\" :spade, \"C\" :club}\n         rankmap {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \n                  \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}]\n  \t(assoc (assoc {} :suit (suitmap suit)) :rank (rankmap rank))))", "problem": 128, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [[s r]]\n(let [suitmap {\\D :diamond \\H :heart\n  \\C :club \\S :spade}\n  rankmap {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5\n  \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n  {:suit (suitmap s) :rank (rankmap r)}))", "problem": 128, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(let [suite (zipmap \"DCHS\" [:diamond :club :heart :spade])\n      rank (zipmap \"23456789TJQKA\" (range))]\n  (fn [[s r]] {:suit (suite s) :rank (rank r)}))", "problem": 128, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "(fn [[s r]] \n   {:suit ({ \\H :heart \\D :diamond \\C :club \\S :spades } s)\n    :rank ((zipmap \"23456789TJQKA\" (range) )             r)})", "problem": 128, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn [c]\r\n     (let [s {\\D :diamond \\H :heart \\S :spade \\C :club}\r\n  \t n {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\r\n\t\t l (last c)]\r\n\t\t (hash-map :suit (s (first c)) :rank (if (< (int l) 58) (- (int l) 50) (n l)))))", "problem": 128, "user": "4dae4da5c9a9d6ed4e99dc57"}, {"code": "(fn [card]\n       (let [ seed {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        num {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n\t      tipo ((vec card) 0)\n\t      rank ((vec card) 1)]\n\t    {:suit (seed tipo) :rank (num rank)}))", "problem": 128, "user": "4e739e13535dff18050a9c76"}, {"code": "(let [\r\n  suit-map {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\r\n\trank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\r\n(fn [c]\r\n\t(let [suit (nth c 0), rank (nth c 1)]\r\n\t\t{:suit (get suit-map suit) :rank (get rank-map rank)})))", "problem": 128, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn[[a b]]{:suit({\\D :diamond \\H :heart \\S :spade \\C :club}a):rank(or({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8}b)(-(int b)50))})", "problem": 128, "user": "4dd4034a535dae65d5c462df"}, {"code": "(fn [[s r]] {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s) :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)) r)})", "problem": 128, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn [s]\n  (let [suits {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits (first s))\n     :rank (ranks (second s))}))", "problem": 128, "user": "4daf36c2edd6309eace4d175"}, {"code": "(fn [c]\n  (let [r {:A 12 :6 4 :7 5 :4 2 :5 3 :3 1 :2 0 :Q 10 :9 7 :8 6 :T 8 :K 11 :J 9}\n        s {:H :heart, :C :club, :D :diamond, :S :spade}\n        [d x y]  (map keyword (.split c \"\")) ]\n    {:suit (x s) :rank (y r)}))", "problem": 128, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn  [encoding]\n  (letfn [(suit [letter0]\n            (get {:S :spades :H :heart :D :diamond :C :club} (keyword letter0)))\n          (rank [letter1]\n            (get {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12} (keyword letter1)))]\n {:suit (suit (subs encoding 0 1))\n  :rank (rank (subs encoding 1))}))", "problem": 128, "user": "4e6a73d0535d8ccf87e9fee7"}, {"code": "(fn [[suit-character rank-character]]\n  (let [suits {\\S :space \\C :club \\H :heart \\D :diamond}\n        rank-characters \"23456789TJQKA\"]\n    {:suit (suits suit-character)\n     :rank (.indexOf rank-characters (int rank-character))}))", "problem": 128, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn [s]\n  (let [[a b] s]\n  (conj \n    (conj {} [:suit (get {\\H :heart \\D :diamond \\C :club \\S :spade} a)])\n    [:rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} b)])))", "problem": 128, "user": "4e8e8c24535d65386fec2143"}, {"code": "#(zipmap [:suit :rank]\r\n         (map (zipmap \"SHDC23456789TJQKA\"\r\n                      `(:spade :heart :diamond :club ~@(range)))\r\n              %))", "problem": 128, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4db85bdd535d1e037afb218d"}, {"code": "(fn [[a b]]\n  {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} a)\n   :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} b (- (int b) 50))})", "problem": 128, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(#(fn [[a b]]\n  {:suit (% a) :rank (if (% b) (% b) (- (int b) 50))}\n  )\n(zipmap \"DHCTJQKA\" [:diamond :heart :club 8 9 10 11 12]))", "problem": 128, "user": "4dc537fd535d8a4b2fd74282"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank (.indexOf \"23456789TJQKA\" (str r))})", "problem": 128, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn [s] {\n  :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first s))\n  :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (fnext s))})", "problem": 128, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn [s] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (nth s 0)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (nth s 1))})", "problem": 128, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn [s]\n  (let [[a b] s]\n    {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} a)\n     :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6\n             \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} b)}))", "problem": 128, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn [s]\n  (let [s-sq (seq s)\n        suit (first s-sq)\n        rank (second s-sq)\n        s-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        r-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12 }]\n    {:suit (s-map suit) :rank (r-map rank)}))", "problem": 128, "user": "4dcc5aff535d5973398f9293"}, {"code": "(fn\n  [x]\n  (let [s (first x)\n        r (first (rest x))\n        m { \\S :spade \\H :heart \\C :club \\D :diamond }\n        n { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n            \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n    {:suit (m s) :rank (n r)}))", "problem": 128, "user": "4db53f87535d87e67b28fe08"}, {"code": "(fn parse-card [c]\n  (let [suit (first c)\n        rank (last c)\n        suits {\\H :heart, \\D :diamond, \\C :club, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \n               \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n               \n      {:suit (suits suit), :rank (ranks rank)}))", "problem": 128, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn[s]\n  {:suit (get {\"H\" :heart \"D\" :diamond \"C\" :club \"S\" :spade} (.toString (first s)))\n\t :rank (get {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (.toString (second s)))\n  }\n)", "problem": 128, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn [card]\n    {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first (seq card)))\n     :rank ((zipmap '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A) (range)) (second (seq card)))})", "problem": 128, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "#(let [[x y] (map read-string (re-seq #\".\" %))] \n    {:suit ({'D :diamond 'H :heart 'C :club} x)\n     :rank (if (number? y) (- y 2) ({'T 8 'J 9 'Q 10 'K 11 'A 12} y))})", "problem": 128, "user": "4e823ed7535db62dc21a62c7"}, {"code": "(fn [[suit rank]]\n    (let [suits {:diamond \\D :heart \\H :club \\C :spade \\S}\n          ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n          flipped-suits (zipmap (vals suits) (keys suits))\n          flipped-ranks (zipmap ranks (range))]\n      {:suit (get flipped-suits suit)\n       :rank (get flipped-ranks rank)}))", "problem": 128, "user": "4dc0ff08535d020aff1edf84"}, {"code": "(fn [s]\r\n    {:suit ({\\D :diamond, \\H :heart, \\S :spade, \\C :club} (first s))\r\n\t   :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (last s))})", "problem": 128, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn sconv\r\n  [s]\r\n\t(let [suit (first s)\r\n\t\t\t\trank (last s)\r\n\t\t\t\tsuit-map (zipmap [\\H \\C \\D \\S] [:heart :club :diamond :spade])\r\n\t\t\t\trank-map (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\r\n\t\t\t\t\t\t\t\t\t\t\t\t (range 0 13))]\r\n\t\t{:suit (suit-map suit) :rank (rank-map rank)}))", "problem": 128, "user": "4e8a0c82535d3e98b802328d"}, {"code": "#(let [suit (-> % first str)\r\n       rank (-> % second str)]\r\n      (assoc {}\r\n        :suit\r\n        (cond\r\n          (= suit \"D\") :diamond\r\n          (= suit \"H\") :heart\r\n          (= suit \"C\") :club\r\n          (= suit \"S\") :spade)\r\n        :rank\r\n        (cond\r\n          (= rank \"T\") 8\r\n          (= rank \"J\") 9\r\n          (= rank \"Q\") 10\r\n          (= rank \"K\") 11\r\n          (= rank \"A\") 12\r\n          :default (- (Integer/parseInt rank) 2))))", "problem": 128, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn [a-str]\n  (let [s-map {\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club}\n        r-map {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8\n               \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}]\n    (assoc {} :suit (s-map (subs a-str 0 1)) :rank (r-map (subs a-str 1 2)))))", "problem": 128, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "(fn [c]\n  (let [\n    a {\"H\" :heart \"D\" :diamond \"C\" :club \"S\" :spade}\n    b {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5  \"8\" 6 \"9\" 7 \n       \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n  ] {:suit (a (.substring c 0 1)) \n     :rank (b (.substring c 1 2))}))", "problem": 128, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn [card] \n   {:rank (.indexOf \"23456789TJQKA\" (.substring card 1 2))\n    :suit ({\"C\" :club \"S\" :spade \"H\" :heart \"D\" :diamond} (.substring card 0 1))})", "problem": 128, "user": "4dcc024e535d5973398f928f"}, {"code": "(fn translate [[s r]]\n  {:suit\n   (condp = s\n     \\D :diamond\n     \\H :heart\n     \\C :club\n     \\S :spade)\n   :rank\n   (condp = r\n     \\2 0\n     \\3 1\n     \\4 2\n     \\5 3\n     \\6 4\n     \\7 5\n     \\8 6\n     \\9 7\n     \\T 8\n     \\J 9\n     \\Q 10\n     \\K 11\n     \\A 12)})", "problem": 128, "user": "4dab218f30acd6ed15482a68"}, {"code": "(fn [card]\n  (let [suits {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n\t      ranks (zipmap (concat (map (comp keyword str) (range 2 10)) [:T :J :Q :K :A]) (range 13))\n\t      card-seq (re-seq #\"\\S\" card)]\n\t  {:suit (suits (first card-seq)) :rank (ranks (keyword (str (second card-seq))))}))", "problem": 128, "user": "4db045b5838c48654951d9be"}, {"code": "(fn [[s r]]\n  { :suit ((zipmap \"DHCS\" [:diamond :heart :club :spade]) s)\n    :rank (.indexOf \"23456789TJQKA\" (str r))})", "problem": 128, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [s] \n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club} ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits (first s)) :rank (ranks (second s))}))", "problem": 128, "user": "4e8f4f64535d65386fec2149"}, {"code": "(let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n      ranks {\\T 10, \\J 11, \\Q 12, \\K 13, \\A 14}]\n  (fn [[s r]]\n    {:suit (suits s)\n     :rank (- (if-let [n (get ranks r)]\n                n\n                (Character/digit r 10))\n              2)}))", "problem": 128, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(let [suit {\"H\" :heart \"D\" :diamond \"S\" :spade \"C\" :club}\n      rank #(.indexOf \"23456789TJQKA\" %)]\n  #(-> {:suit (suit (subs % 0 1)) :rank (rank (subs % 1 2))}))", "problem": 128, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn [card] \n  {:suit ({\"H\" :heart \"D\" :diamond \"C\" :club \"S\" :spade} (subs card 0 1))\n   :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (nth card 1))})", "problem": 128, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(fn rpc [x] \n  (hash-map \n\t\t:rank \n\t\t((fn getRank [x] \n\t\t\t( cond \n\t\t\t\t(= x \\2 ) 0 \n\t\t\t\t(= x \\3 ) 1\t\n\t\t\t\t(= x \\4 ) 2\n\t\t\t\t(= x \\5 ) 3\n\t\t\t\t(= x \\6 ) 4\n\t\t\t\t(= x \\7 ) 5\n\t\t\t\t(= x \\8 ) 6\n\t\t\t\t(= x \\9 ) 7\n\t\t\t\t(= x \\T ) 8\n\t\t\t\t(= x \\J ) 9\n\t\t\t\t(= x \\Q ) 10\n\t\t\t\t(= x \\K ) 11\n\t\t\t\t(= x \\A ) 12) ) \n\t\t(last x))\t\t\n\t\t:suit \n\t\t((fn getSuit [x] \n\t\t\t  ( cond \n\t\t\t\t(= x \\D ) :diamond \n\t\t\t\t\t(= x \\S) :spade  \n\t\t\t\t\t(= x \\H) :heart  \n\t\t\t\t\t(= x \\C) :club  )) \n\t\t\t(first x)) \n ) )", "problem": 128, "user": "4e8d5edd535d65386fec2134"}, {"code": "#(hash-map\n    :suit ({\\H :heart \\D :diamond \\S :spade \\C :club} (first %))\n    :rank ((apply assoc {} (interleave [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))) (last %))\n)", "problem": 128, "user": "4e720985535d5021c1a89655"}, {"code": "(fn [x]\n  (let [ranks (apply hash-map \n                    (interleave \"23456789TJQKA\" (range)))\n        colors {\\S :spade \\D :diamond \\H :heart \\C :club}\n        [color rank] (seq x)]\n    {:suit (colors color) :rank (ranks rank)}))", "problem": 128, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn str-to-card [c]\n  (let [suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit-map (first c)) :rank (rank-map (second c))}))", "problem": 128, "user": "4e5867d1535d8a8b8723a291"}, {"code": "(fn card [[suit card]]\n  (let [suit (cond\n              (= suit \\D) :diamond\n              (= suit \\H) :heart\n              (= suit \\C) :club\n              (= suit \\S) :spade)\n        rank (cond\n              (= card \\2) 0\n              (= card \\3) 1\n              (= card \\4) 2\n              (= card \\5) 3\n              (= card \\6) 4\n              (= card \\7) 5\n              (= card \\8) 6\n              (= card \\9) 7\n              (= card \\T) 8\n              (= card \\J) 9\n              (= card \\Q) 10\n              (= card \\K) 11\n              (= card \\A) 12)]\n    {:suit suit\n     :rank rank}))", "problem": 128, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn [x]\n  {:suit\n   ({\\C :club \\D :diamond \\H :heart \\S :spade} (first x))\n   :rank\n   (let [l (int (last x))]\n     (if (< l 58)\n       (- l 50)\n       ({84 8 74 9 81 10 75 11 65 12} l)\n     )\n   )\n  }\n)", "problem": 128, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn [s]\n  {:suit ({\\C :club \\D :diamond \\H :heart \\S :spade} (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))}\n  )", "problem": 128, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn [[s r]]\r\n  {:suit \r\n   ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\r\n   :rank \r\n   ((zipmap \"23456789TJQKA\" (range 13)) r)})", "problem": 128, "user": "4e72ac47535d5021c1a89666"}, {"code": "(fn make-card [[suit rank]]\n  {:suit ({\\D :diamond\n     \\H :heart\n\t   \\S :spade\n\t   \\C :club} suit)\n   :rank ({\\2 0\n\t   \\3 1\n\t   \\4 2\n\t   \\5 3\n\t   \\6 4\n\t   \\7 5\n\t   \\8 6\n\t   \\9 7\n\t   \\T 8\n\t   \\J 9\n\t   \\Q 10\n\t   \\K 11\n\t   \\A 12\n\t   } rank  )})", "problem": 128, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "#(let [[s r] %\n  suit {\\H :heart, \\D :diamond, \\C :club, \\S :spade}\n  rank (apply array-map (interleave (concat (map char (range 50 58)) \"TJQKA\") (range 14)))]\n  {:suit (suit s) :rank (rank r)})", "problem": 128, "user": "4e6f8431535d5021c1a8961e"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)\n             (- (int r) 50))})", "problem": 128, "user": "4dbb0b6c535d1e037afb21b0"}, {"code": "(fn [s]\n  (let [suit {\\H :heart \\D :diamond \\S :spades \\C :club}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n        {:suit (suit (first s)) :rank (rank (second s))}))", "problem": 128, "user": "4e955b95535dbda64a6f6b33"}, {"code": "(fn [[suit rank & v]]\n  (if (empty? v)\n    {:suit (cond \n             (= suit \\D) :diamond\n             (= suit \\S) :spade\n             (= suit \\H) :heart\n             (= suit \\C) :club)\n     :rank (cond \n             (= rank \\2) 0\n             (= rank \\3) 1\n             (= rank \\4) 2\n             (= rank \\5) 3\n             (= rank \\6) 4\n             (= rank \\7) 5\n             (= rank \\8) 6\n             (= rank \\9) 7\n             (= rank \\T) 8\n             (= rank \\J) 9\n             (= rank \\Q) 10\n             (= rank \\K) 11\n             (= rank \\A) 12)}))", "problem": 128, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn [x] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade}\n          (first x))\n   :rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second x))\n             (-> (dec (dec (read-string (str (second x)))))))} )", "problem": 128, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "#(let [[s r] (seq %)\n       m (zipmap \"SHDC23456789TJQKA\" (concat [:spade :heart :diamond :club] (range 13)))]\n   {:suit (m s) :rank (m r)})", "problem": 128, "user": "4ea09fa4535d7eef308072aa"}, {"code": "#(hash-map :suit ({\\S :spade \\D :diamond \\C :club \\H :heart} (nth % 0)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (nth % 1)))", "problem": 128, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn [[s r]]\n  {:suit ({\"S\" :spade \"H\" :heart \"C\" :club \"D\" :diamond} (str s))\n   :rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \n           \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \n           \"Q\" 10 \"K\" 11 \"A\" 12} (str r))})", "problem": 128, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn [input]\n(let [card (seq input)\n    suits {\\D :diamond, \\S :spade, \\H :heart, \\C :club}\n    ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6,\n           \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n  {:suit (suits (first card)) \n   :rank (ranks (second card))}))", "problem": 128, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn [[suit rank]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n               \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits suit) :rank (ranks rank)}))", "problem": 128, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn [card] \n  (let [[s r] card\n        ms {\\S :spade \\D :diamond \\H :heart \\C :club}\n        rs {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        c (- (int r) 48)]\n        {:suit (ms s) :rank (if (< c 10) (- c 2) (rs r))}))", "problem": 128, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn [[x y]]\n  {:suit ( {\\D :diamond,  \\H :heart,  \\C :club,  \\S :spade} x)\n\t :rank (.indexOf \"23456789TJQKA\" (str y))})", "problem": 128, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "(fn card-reader [[suit rank]]\r\n  (let [rank-map (zipmap \"23456789TJQKA\" (range))\r\n  suit-map (zipmap \"SHDC\" [:spade :heart :diamond :club])]\r\n    {:rank (rank-map rank) :suit (suit-map suit)}))", "problem": 128, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "(fn [[s r]]\n  { :suit ({\\D :diamond\n            \\H :heart \n            \\C :club\n            \\S :spade} s)\n    :rank (.indexOf \"23456789TJQKA\" (int r))})", "problem": 128, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn f [s] (let [ suits {\\D :diamond \\S :spade \\H :heart \\C :club} ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]    {:suit (suits (first s)) :rank (ranks (second s)) }))", "problem": 128, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [str]\n  (let [[suit rank] (seq str)]\n    {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n     :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)}))", "problem": 128, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn [[s v]]\n         (let [m (into {\\C :club \\D :diamond \\H :heart \\S :spade \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} (for [v (range 2 10)] [(-> v str (nth 0)) (- v 2)]))]\n           { :suit (m s) :rank (m v) }))", "problem": 128, "user": "4dbad895535d1e037afb21ae"}, {"code": "(fn f [s]\n  { :suit\n    ({\\S :spade \\H :heart \\D :diamond \\C :club} (first (seq s)))\n    :rank \n    ((zipmap \"23456789TJQKA\" (range 13))\n    (second (seq s)))\n    })", "problem": 128, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "(fn [[s r]]\r\n  (let [suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} s)\r\n        rank (or ({\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r) \r\n                 (- (int r) (int \\2)))]\r\n    {:suit suit, :rank rank}))", "problem": 128, "user": "4e994541535dbda64a6f6b64"}, {"code": "(fn [s] {:suit ({\\H :heart \\D :diamond \\C :club \\S :spade} (first s))\r\n                 :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last s))})", "problem": 128, "user": "4db92654535d1e037afb21a0"}, {"code": "(let [suits {\\D :diamond\n             \\H :heart\n             \\C :club\n             \\S :spade}\n      ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n             \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n(fn [[s r]]\n  {:suit (suits s)\n   :rank (ranks r)}))", "problem": 128, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "#(hash-map :suit ({\\D :diamond \\H :heart \\C :club \\S :s} \n            (first %))\n           :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} \n            (second %)))", "problem": 128, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn [i] (let [s (first i) \n              r (second i) \n              suites {\\D :diamond \\H :heart \\C :club \\S :spades}\n              ranks {\\2 0 \n                     \\3 1 \n                     \\4 2 \n                     \\5 3 \n                     \\6 4 \n                     \\7 5 \n                     \\8 6 \n                     \\9 7 \n                     \\T 8 \n                     \\J 9 \n                     \\Q 10 \n                     \\K 11 \n                     \\A 12}]\n  {:suit (get suites s) :rank (get ranks r)}))", "problem": 128, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn this \n  ([x] (this (first x) (second x)))\n  ([x y] {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} x) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} y)}))", "problem": 128, "user": "4e7e1483535db169f9c79702"}, {"code": "(fn [[s r]] \n  (let [su {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ra {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \n            \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (su s) :rank (ra r)}))", "problem": 128, "user": "4dbdab4e535d020aff1edf49"}, {"code": "(fn [[s r]] \r\n  {:suit ({\\H :heart \\S :spade \\D :diamond \\C :club} s)\r\n   :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} r (- (int r) 50))})", "problem": 128, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn [input]\n  (let [suit-of { \\D :diamond, \\S :spade, \\C :club, \\H :heart }\n        rank-of (fn [x]\n                  (cond \n                    (= x \\A) 12\n                    (= x \\K) 11\n                    (= x \\Q) 10\n                    (= x \\J)  9\n                    (= x \\T)  8\n                    :else (- (int x) (int \\2))))]\n    { :suit (suit-of (first input)) \n      :rank (rank-of (second input)) }))", "problem": 128, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "(fn [[suit rank]]\n  (let [suits (zipmap \"SDCH\" [:spade :diamond :club :heart])\n        ranks (zipmap \"23456789TJQKA\" (range 13))]\n     {:suit (suits suit) :rank (ranks rank)}))", "problem": 128, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "#(let [suit {\\C :club \\D :diamond \\H :heart \\S :spade }\n      rank { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n      [s r] %] {:suit (suit s) :rank (rank r)})", "problem": 128, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn [[s r]]\n  {:suit (get (zipmap \"SHCD\" [:spade :heart :club :diamond]) s)\n   :rank (get (zipmap \"23456789TJQKA\" (range 13)) r)})", "problem": 128, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank ((apply assoc {} (interleave \"23456789TJQKA\" (range))) r)})", "problem": 128, "user": "4ea55757535d7eef308072d3"}, {"code": "(fn [[s r]]\n  {:suit\n    ({\\S :spade \\H :heart\n      \\C :club \\D :diamond} s)\n   :rank\n    (.indexOf \"23456789TJQKA\" (str r))})", "problem": 128, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "#(let [s {\\D :diamond \\H :heart \\C :club \\S :spades}\n      r (zipmap [\\2\\3\\4\\5\\6\\7\\8\\9\\T\\J\\Q\\K\\A] (range 0 13))\n      [f l] %]\n  {:suit (s f) :rank (r l)})", "problem": 128, "user": "4e4870d1535dc968683fc4bc"}, {"code": "(fn cards[s]\r\n(let [m {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} n {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\r\n  {:suit (get m (str (first s))) :rank (get n (str (last s)))}))", "problem": 128, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "(fn parse-card [card]\n        (let [[suit type] (map str (seq card))]\n          {:suit ({\"D\" :diamond \"S\" :spade \"C\" :club \"H\" :heart} suit)\n           :rank ((zipmap (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range)) type)}))", "problem": 128, "user": "4e589bdc535d8a8b8723a295"}, {"code": "#(hash-map\n:rank\n((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)) (second %))\n:suit\n({\\S :spade \\C :club \\H :heart \\D :diamond} (first %)))", "problem": 128, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn [[s r]]\n   {:suit (get {\\D :diamond \\H :heart \\C :club \\S :spades} s)\n    :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})", "problem": 128, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn [[s r]]\n  (let [\n    suits { \\C :club, \\D :diamond,\n            \\H :heart, \\S :spade }\n    ranks { \\2 0, \\3 1, \\4 2, \\5 3, \\6 4,\n            \\7 5, \\8 6, \\9 7, \\T 8, \\J 9,\n            \\Q 10, \\K 11, \\A 12 }\n  ]\n  { :suit (suits s), :rank (ranks r) }))", "problem": 128, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "(fn cards [c] \n  (let [suit {\\D :diamond \\S :spade \\H :heart \\C :club} \n    rank {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \n          \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8\n          \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n    {:suit (suit (first c)) \n     :rank (rank (apply str (rest c)))}))", "problem": 128, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn [s] {:suit (cond (= (.charAt s 0) \\S) :spade \r\n         (= (.charAt s 0) \\H) :heart\r\n         (= (.charAt s 0) \\D) :diamond \r\n         (= (.charAt s 0) \\C) :club)\r\n        :rank (cond (= (.charAt s 1) \\A) 12\r\n                    (= (.charAt s 1) \\K) 11\r\n                    (= (.charAt s 1) \\Q) 10\r\n                    (= (.charAt s 1) \\J) 9\r\n                    (= (.charAt s 1) \\T) 8\r\n                    :else (- (Integer/parseInt (.substring s 1)) 2))})", "problem": 128, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn [c]\n  (let [s (first c)\n        r (second c)]\n    {:suit (cond \n            (= \\D s) :diamond\n            (= \\H s) :heart\n            (= \\C s) :club\n            :else :spade)\n     :rank (cond\n            (= \\A r) 12\n            (= \\K r) 11\n            (= \\Q r) 10\n            (= \\J r) 9\n            (= \\T r) 8\n            :else (- (Integer/parseInt (str r)) 2))}))", "problem": 128, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "(fn [c]\n  (let [r {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        s {\\S :spade, \\C :club, \\H :heart, \\D :diamond}]\n    {:suit (s (first c)) :rank (r (second c))}))", "problem": 128, "user": "4ec132a0535dfed6da9c6da9"}, {"code": "(fn [x]\n(let [fs (subs x 0 1) ss (subs x 1 2)\n  fd (assoc {} :suit\n         (cond\n           (= fs \"D\") :diamond\n           (= fs \"H\") :heart\n           (= fs \"S\") :spade\n           (= fs \"C\") :club))\n  sd (assoc fd :rank\n         (cond\n           (= ss \"2\") 0\n           (= ss \"3\") 1\n           (= ss \"4\") 2\n           (= ss \"5\") 3\n           (= ss \"6\") 4\n           (= ss \"7\") 5\n           (= ss \"8\") 6\n           (= ss \"9\") 7\n           (= ss \"T\") 8\n           (= ss \"J\") 9     \n           (= ss \"Q\") 10\t   \n           (= ss \"K\") 11   \n           (= ss \"A\") 12))\n\t    ]\n  sd))", "problem": 128, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn[[s r]]\n  {:suit ({\\D :diamond \\S :spade \\C :club \\H :heart} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "#(let [s (str (first %1)), r (str (last %1)), suit {\"D\" :diamond, \"S\" :spade, \"C\", :club, \"H\" :heart}, rank {\"2\" 1, \"3\" 2, \"4\" 3, \"5\" 4, \"6\" 5, \"7\" 6, \"8\" 7, \"9\" 8, \"T\" 9, \"J\" 10, \"Q\" 11, \"K\" 12, \"A\" 13}] \n     {:suit (suit s) :rank (dec (rank r))})", "problem": 128, "user": "4eabb245535d7eef30807319"}, {"code": "(fn classifyCards [x]\n    (let\n      [suits {\\D :diamond \\H :heart \\C :club \\S :spades}\n       ranks {\\2 0, \\3 1, \\4 2,\n              \\5 3, \\6 4, \\7 5,\n              \\8 6, \\9 7, \\T 8,\n              \\J 9, \\Q 10, \\K 11,\n              \\A 12}\n       cls (seq x)\n      ]\n      (hash-map :suit (suits (nth cls 0)) :rank (ranks (nth cls 1)))\n    )\n  )", "problem": 128, "user": "4e8b73e4535d65386fec2120"}, {"code": "(fn [[suit rank]] \n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks (zipmap \"23456789TJQKA\" (range))]\n    {:suit (suits suit) :rank (ranks rank)}))", "problem": 128, "user": "4db1b3951254ad5b4805fa6f"}, {"code": "(fn [card]\n  (let [suit (fn [suit-char]\n              (condp = suit-char\n                \\D :diamond\n                \\H :heart\n                \\C :club\n                \\S :spade))\n        rank (fn [rank-char]\n              (condp = rank-char\n                \\A 12\n                \\K 11\n                \\Q 10\n                \\J 9\n                \\T 8\n                \\9 7\n                \\8 6\n                \\7 5\n                \\6 4\n                \\5 3\n                \\4 2\n                \\3 1\n                \\2 0))]\n  { :suit (suit (first card))\n    :rank (rank (second card))}))", "problem": 128, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn printCard [c] (let \n  [s {\\S :spade \\H :heart \\D :diamond \\C :club}\nn {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n{:suit (s (first (seq c))) :rank (n (first (rest (seq c))))}))", "problem": 128, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart, \\S :spade, \\C :club} s),\n  :rank (or \n          ({\\A 12, \\K 11, \\Q 10, \\J 9, \\T 8} r)\n          (- (int r) 50))})", "problem": 128, "user": "4ec34578535dcc7ae8597d51"}, {"code": "(fn recognize-playing-cards [card]\r\n  (let [suit  #({\\S :spade, \\H :heart, \\D :diamond, \\C :club} %)\r\n        r-dic (apply hash-map (interleave \"23456789TJQKA\" (range)))\r\n        rank  #(r-dic %)]\r\n    {:suit (suit (first card))\r\n     :rank (rank (second card))}))", "problem": 128, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn f [s]\n  {:suit \n   (get {\\D :diamond \\H :heart \\C :club \\S :spade} (first s))\n   :rank\n   (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n     \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))})", "problem": 128, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn cards [s]\n  (let [suit (get {\\D :diamond \\S :spades \\H :heart \\C :club} (first s) :ERROR)\n        rank (first (keep-indexed #(when (= (second s) %2) %1) [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn [[suit_char rank_char]] \n  (let \n    [ \n      char->royal_rank {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }\n      char->suit\n        {\\H :heart \\D :diamond \\C :club \\S :spade}\n      rank (or (char->royal_rank rank_char) (- (Character/getNumericValue rank_char) 2))  ]\n    {\n      :suit (char->suit suit_char)\n      :rank rank }))", "problem": 128, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn [[suit rank]]\n  {:suit\n    ({\\H :heart, \\C :club,\n      \\D :diamond, \\S :spade} suit)\n   :rank\n    (or\n      ({\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} rank)\n      (- (int rank) (int \\2)))})", "problem": 128, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "#(let [[s r] (seq %)]\n  {:suit ({\\C :club\n           \\D :diamond\n           \\H :heart\n           \\S :spade} s)\n   :rank ({\\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0} r)})", "problem": 128, "user": "4db0114d838c48654951d9b8"}, {"code": "(fn [[s r]]\n  (let [suits { \\S :spade, \\H :heart, \\D :diamond, \\C :club }\n\t\t  ranks [ \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A ]]\n\t\t{:suit (suits s) :rank (.indexOf ranks r)}))", "problem": 128, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [short]\n  (let [first (get short 0)\n        second (get short 1)]\n    (hash-map\n      :suit\n      (cond\n        (= first \\S) :spade\n        (= first \\H) :heart\n        (= first \\D) :diamond\n        (= first \\C) :club)\n      :rank\n      (cond\n        (Character/isDigit second) (- (Integer/parseInt (str second)) 2)\n        (= \\T second) 8\n        (= \\J second) 9\n        (= \\Q second) 10\n        (= \\K second) 11\n        (= \\A second) 12))))", "problem": 128, "user": "4ecabce3535d6d7199dd370a"}, {"code": "(fn [col]\n  (let [s (str (first col)) r (str(second col))\n        suits { \"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade }\n        ranks { \"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12 }\n        ]\n  { :suit (get suits s)  :rank (get ranks r)    }\n  ))", "problem": 128, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn [x]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first x))\n   :rank ((reduce #(assoc % (char (+ %2 50)) %2)\n            {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n            (range 0 9))\n          (second x))})", "problem": 128, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn [[s r]]\n  (let [su { \\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :spade }\n        ra (apply hash-map \n                  (concat [\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12 ]\n                          (mapcat \n                            #(vector\n                              (str (+ 2 %))\n                              %) (range 8))))]\n  {:suit (su s) :rank (ra (str r))}))", "problem": 128, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "#(let [[x y] %] {:suit ({\\C :club \\D :diamond \\H :heart \\S :spade} x) :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} y (- (int y) 50))})", "problem": 128, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "#(let [v {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\r\n      s {\\D :diamond \\H :heart \\S :spade \\C :club}\r\n\t    [f l] %\r\n\t    m (v l)]\r\n\t   {:suit (s f) :rank (if m m (- (int l) 50))})", "problem": 128, "user": "4e8a460e535d65386fec2109"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank ((zipmap \"23456789TJQKA\" (range 13)) r)})", "problem": 128, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "(fn [x]\n  (let [ \n    suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n    rank_list [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n    ranks (apply hash-map (flatten (map-indexed #(list %2 %) rank_list)))  \n    suit (suits (first x))\n    rank (ranks (second x))]\n    (hash-map :suit suit :rank rank)))", "problem": 128, "user": "4ec07699535dfed6da9c6da2"}, {"code": "#(hash-map\n   :suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} (first %))\n   :rank (cond\n           (=  (second %) \\T) 8\n           (=  (second %) \\J) 9\n           (=  (second %) \\Q) 10\n           (=  (second %) \\K) 11\n           (=  (second %) \\A) 12\n           :else (- (Integer/parseInt (str (second %))) 2)))", "problem": 128, "user": "4daf8f84edd6309eace4d17a"}, {"code": "(fn cards [a]\n  (let [s (vec a) num (s 1) suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank \n         (if (Character/isDigit num) (- (int num) (int \\2))\n             ({\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} num))]\n       {:suit (suits (s 0)) :rank rank}))", "problem": 128, "user": "4eb0a757535d7eef3080733d"}, {"code": "(let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n      ranks (zipmap (seq \"23456789TJQKA\") (range 13))] \n(fn [s]\n  (let [[suit rank] s] {:suit (suits suit) :rank (ranks rank)})))", "problem": 128, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn [s]\n  (let [suitmap {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rankmap (apply hash-map \n          (interleave '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A)\n                      (range 13)))]\n    (hash-map :suit (suitmap (first s)) :rank (rankmap (second s)))))", "problem": 128, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [[s r]]\n  (let [suits {\\C :club \\D :diamond \\H :heart \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6\n               \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "4eb51942535d7eef30807365"}, {"code": "(fn [[s r]] {:suit ({\\S :spade \\C :club \\H :heart \\D :diamond} s) \n             :rank (.indexOf \"23456789TJQKA\" (str r))})", "problem": 128, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "(fn parseCard [s] (let [\n  toSuit {\\S :spade, \\H :heart, \\D :diamond, \\C :club} \n  toRank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}  \n  ]\n  {:suit (toSuit (first s)) :rank (toRank (last s))}  \n))", "problem": 128, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "(fn [card]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first card)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second card))})", "problem": 128, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn [c]\n   (let [suits {\"H\" :heart \"D\" :diamond \"C\" :club \"S\" :spade}\n         ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n         [suit rank] (map str c)]\n     {:suit (suits suit) :rank (ranks rank)}))", "problem": 128, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn [pair]  \n  (let [suits           {:C :club :D :diamond :H :heart :S :spade}\n        ranks           {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12}\n        [suit-k rank-k] (map keyword (map str pair))]\n    {:suit (suit-k suits) :rank (rank-k ranks)}))", "problem": 128, "user": "4e5d0e96535d8a8b8723a2c8"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club} s)\n   :rank (cond (Character/isDigit r) (- (Character/digit r 10) 2)\n               (= r \\T) 8\n               (= r \\J) 9\n               (= r \\Q) 10\n               (= r \\K) 11\n               :else    12)})", "problem": 128, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade \\D :diamond \\C :club \\H :heart} s)\n   :rank (or ({\\A 12 \\J 9 \\Q 10 \\K 11 \\T 8} r) (- (int r) 50))})", "problem": 128, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [[s r]] {:suit ({\\C :club, \\S :spade, \\H :heart \\D :diamond} s)\n             :rank ((zipmap (conj (vec (map (comp first str) (range 2 10))) \\T \\J \\Q \\K \\A) (range 13)) r)})", "problem": 128, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn [s]\n    (let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n          ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n      {:suit (suits (first s)), :rank (ranks (last s))}))", "problem": 128, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "(fn read-card [t]\n  {:suit (get {\\S :spade \\H :heart \\D :diamond \\C :club} (first t))\n   :rank (get (zipmap \"23456789TJQKA\" (range 13)) (second t))})", "problem": 128, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn [description]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n    {:suit (suits (first description))\n      :rank (ranks (second description))}))", "problem": 128, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn [card]\n  (let [ranks {\\2 0 \n               \\3 1 \n               \\4 2 \n               \\5 3 \n               \\6 4 \n               \\7 5 \n               \\8 6 \n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12},\n        suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}]\n    { :suit (suits (first card))\n      :rank (ranks (second card))}))", "problem": 128, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn [x] {:suit (get {\\D :diamond \\S :spade \\H :heart \\C :club} (first x))\n            :rank (get\n                   {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6\n                    \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second x))})", "problem": 128, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn [[suit rank]]\n  { :suit ({ \\D :diamond \\H :heart \\C :club \\S :spades } suit)\n    :rank (or ({ \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 } rank)\n              (- (int rank) (int \\2))) } )", "problem": 128, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [card]\n        (let [suits {\"H\" :heart \"S\" :spade \"D\" :diamond \"C\" :club}\n             ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n             [suit rank] card]\n             {:suit  (suits (str suit)) :rank (ranks (str rank))}))", "problem": 128, "user": "4edbca52535d10e5ff6f531e"}, {"code": "(fn [[s r]] {:suit ({\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade} (str s))\n              :rank ((zipmap (conj (vec (map str (range 2 10))) \"T\" \"J\" \"Q\" \"K\" \"A\") (range)) (str r))})", "problem": 128, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn [x]\n  {:suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} (first x))\n   :rank (get (apply hash-map (interleave [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))) (second x))})", "problem": 128, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "(fn [[s r]] {:suit ({\\S :spade \\C :club \\H :heart \\D :diamond} s) \n             :rank (.indexOf \"23456789TJQKA\" (str r))})", "problem": 128, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn [str]\n  {:suit (condp = (.charAt str 0)\n           \\D :diamond\n           \\S :spade\n           \\H :heart\n           \\C :club)\n   :rank (condp = (.substring str 1)\n              \"J\" 9\n              \"Q\" 10\n              \"K\" 11\n              \"A\" 12\n              \"T\" 8\n              (- (Integer/parseInt (.substring str 1)) 2))})", "problem": 128, "user": "4e513758535dc968683fc4f3"}, {"code": "#(hash-map \n   :suit ({\\D :diamond \\H :heart \\S :spade \\C :club} (first %))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \n           \\J 9 \\Q 10 \\K 11 \\A 12} (second %)))", "problem": 128, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn [s]\n  (let [suits (zipmap \"HDCS\" [:heart :diamond :club :spade])\n        ranks (zipmap \"23456789TJQKA\" (range))]\n    {:suit ((comp suits first seq) s) :rank ((comp ranks second seq) s)}))", "problem": 128, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "#(hash-map :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first %)) :rank ((zipmap \"23456789TJQKA\" (range 0 13)) (second %)))", "problem": 128, "user": "4ece9ca9535d23f03622770f"}, {"code": "(fn [c]\n  (let [s (.substring c 0 1)\n        r (.substring c 1 2)\n        sm {\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade}\n        rm {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n    {:suit (sm s) :rank (rm r)}))", "problem": 128, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn [[s r]] \n  (let [ranks \"23456789TJQKA\"\n        suites {\\D :diamond, \\H :heart, \\C :club, \\S :spade}]\n      {:suit (suites s), :rank (.indexOf ranks (int r))}))", "problem": 128, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn [card-str]\n  (let [chars (seq card-str)\n    suit (first chars)\n    value (last chars)\n    suits {\\D :diamond \\S :spade \\C :club \\H :heart}\n    ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8\\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get suits suit) :rank (get ranks value)}))", "problem": 128, "user": "4edd4b77535d10e5ff6f5328"}, {"code": "(fn [[suit rank]]\n  {:suit ({\\S :spades, \\H :heart, \\D :diamond, \\C :club} suit),\n   :rank ((zipmap \"23456789TJQKA\" (range))\n          rank)})", "problem": 128, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "(fn [[s r]]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "#(assoc {} :suit ({\\C :club \\D :diamond \\H :heart} (.charAt % 0)) :rank (.indexOf \"23456789TJQKA\" (int (.charAt % 1))))", "problem": 128, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "#(hash-map \n  :suit ({\\H :heart \\S :spade \\D :diamond \\C :club} (first %)) \n  :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %)))", "problem": 128, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn [[s r]]\n  { :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n    :rank (.indexOf (seq \"23456789TJQKA\") r)})", "problem": 128, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn [pair]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0}]\n    {:suit (suits (first pair))\n     :rank (ranks (last pair))}))", "problem": 128, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn [card]\r\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\r\n        find-rank\r\n          (fn [c]\r\n            (let [tc {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\r\n              (if (tc c)\r\n                (tc c)\r\n                (- (Integer. (str c)) 2))))]\r\n    {:suit (suits (nth card 0)) :rank (find-rank (nth card 1))}))", "problem": 128, "user": "4ee40938535d10e5ff6f5375"}, {"code": "#(let [[s r] (vec %)]\n   {:suit (get {\\S :spade \\H :heart \\D :diamond \\C :club} s)\n    :rank (get {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} r (- (int r) 50))})", "problem": 128, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn [s]\r\n  (let [m {\r\n    \\S :spade\r\n    \\H :heart\r\n    \\D :diamond\r\n    \\C :club\r\n    \\2 0\r\n    \\3 1\r\n    \\4 2\r\n    \\5 3\r\n    \\6 4\r\n    \\7 5\r\n    \\8 6\r\n    \\9 7\r\n    \\T 8\r\n    \\J 9\r\n    \\Q 10\r\n    \\K 11\r\n    \\A 12\r\n    }]\r\n    {:suit (m (first s)) :rank (m (last s))}))", "problem": 128, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "#(let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade},\n      ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7,\n             \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n      [suit-char rank-char] %]\n  {:suit (suits suit-char), :rank (ranks rank-char)})", "problem": 128, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "#(let [[s r] %] \n           (hash-map :suit ((zipmap \"SDHC\" [:spade :diamond :heart :club]) s) \n                     :rank ((zipmap \"23456789TJQKA\" (range 13)) r) ) )", "problem": 128, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn [cd]\n       {:suit (get {\\D :diamond\n                    \\H :heart\n                    \\S :spade\n                    \\C :club}\n                   (nth cd 0))\n        :rank (get {\\T 8\n                    \\J 9\n                    \\Q 10\n                    \\K 11\n                    \\A 12}\n                   (nth cd 1)\n                   (- (int (nth cd 1)) 48 2))})", "problem": 128, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn [s]\n  (let [res \n    (condp #(= (first %2) %1) s\n      \\D {:suit :diamond}\n      \\H {:suit :heart}\n      \\C {:suit :club}\n      \\S {:suit :spade})]\n    (condp #(= (second %2) %1) s\n      \\2 (assoc res :rank 0)\n      \\3 (assoc res :rank 1)\n      \\4 (assoc res :rank 2)\n      \\5 (assoc res :rank 3)\n      \\6 (assoc res :rank 4)\n      \\7 (assoc res :rank 5)\n      \\8 (assoc res :rank 6)\n      \\9 (assoc res :rank 7)\n      \\T (assoc res :rank 8)\n      \\J (assoc res :rank 9)\n      \\Q (assoc res :rank 10)\n      \\K (assoc res :rank 11)\n      \\A (assoc res :rank 12))))", "problem": 128, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "(fn f[s]\n         {:suit ({\\H :heart, \\D :diamond, \\C :club, \\S :spade} (first s)) \n          :rank ({\\2 0,\\3 1,\\4 2,\\5 3,\\6 4,\\7 5,\\8 6,\\9 7,\\T 8,\\J 9,\\Q 10,\\K 11,\\A 12} (second s))})", "problem": 128, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn card [x] {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first x))\n         :rank ((assoc (zipmap (map char (range 50 58)) (range 9)) \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12) (second x))})", "problem": 128, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn [s]\n  (let [ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n        suits {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club}\n        suit (str (first s))\n        rank (str (second s))\n        ]\n\n    {:suit (suits suit) :rank (ranks rank)}\n    ))", "problem": 128, "user": "4eb955da535dfed6da9c6d50"}, {"code": "(let [suits (zipmap [\\S \\C \\H \\D] [:spade :club :heart :diamond]) ranks (zipmap (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range 0 13))] (fn [[s r]] {:suit (suits s) :rank (ranks (str r))}))", "problem": 128, "user": "4db091b7838c48654951d9c2"}, {"code": "(fn [[s r]]\n  {:suit\n  (get {\\H :heart \\C :club} s :diamond)\n  :rank \n  (get {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r (- (int r) 50))})", "problem": 128, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "(fn [s]\n  {:suit ({\\C :club \\H :heart \\D :diamond \\S :spade} \n          (first s)) \n   :rank ((zipmap \"23456789TJQKA\" \n                  (range 13)) \n          (second s))})", "problem": 128, "user": "4ee7ef87535d93acb0a66872"}, {"code": "(fn [input]\n  (let [[suit rank]  (rest \n                      (clojure.string/split input #\"\"))\n        suits {\"D\" :diamond\n               \"H\" :heart\n               \"C\" :club}\n        ranks (zipmap (map \n                        str '[2 3 4 5 6 7 8 9 T J Q K A])\n                      (range 13))]\n                      \n        (hash-map :suit (suits suit)\n                  :rank (ranks rank))))", "problem": 128, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [card]\n  (let [suit {\\S :spade, \\D :diamond, \\H :heart, \\C :club}\n        rank (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (suit (first card)) :rank (rank (second card))}))", "problem": 128, "user": "4ee88269535d93acb0a6687f"}, {"code": "#(letfn [\n  (Q [[x _]]\n  (condp = x\n\t  \\S :spade\n\t  \\H :heart\n\t  \\C :club\n\t  \\D :diamond))\n  (W [[_ y]]\n\t(condp = y\n\t  \\A 12\n\t  \\2 0\n\t  \\3 1\n\t  \\4 2\n\t  \\5 3\n\t  \\6 4\n\t  \\7 5\n\t  \\8 6\n\t  \\9 7\n\t  \\T 8\n\t  \\J 9\n\t  \\Q 10\n\t  \\K 11))\n  ]\n  {:suit (Q %) :rank (W %)})", "problem": 128, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn card-suit\n  [s]\n  (let [r (apply concat (partition-by identity s))\n        a (first r)\n        b (second r)\n        c (cond \n           (= a \\H) :heart\n           (= a \\C) :club\n           (= a \\D) :diamond\n           (= a \\S) :spade)\n        d (cond\n           (= b \\2) 0\n           (= b \\3) 1\n           (= b \\4) 2\n           (= b \\5) 3\n           (= b \\6) 4\n           (= b \\7) 5\n           (= b \\8) 6\n           (= b \\9) 7\n           (= b \\T) 8\n           (= b \\J) 9\n           (= b \\Q) 10\n           (= b \\K) 11\n           (= b \\A) 12)\n        m {:suit c :rank d}]\n    m))", "problem": 128, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn [[s r]] {:suit ({\\C :club \\H :heart \\S :spade \\D :diamond} s) :rank ((zipmap \"23456789TJQKA\" (range 13)) r)})", "problem": 128, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn cards [card]\n  (let [cardmap {\"S\" :spade \"D\" :diamond \"H\" :heart \"C\" :club\n                  \"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8\n                  \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n        strcard (map str (vec card))\n        compform '(:suit :rank)]\n    (apply hash-map (interleave compform (map cardmap strcard)))))", "problem": 128, "user": "4ee9d697535d93acb0a66895"}, {"code": "(fn [[s r]]\n  (let [rs {\\2 0 \\3 1  \\4 2 \n            \\5 3 \\6 4  \\7 5 \n            \\8 6 \\9 7  \\T 8\n            \\J 9 \\Q 10 \\K 11 \\A 12}\n            \n        ds {\\S :spade   \\H :heart \n            \\D :diamond \\C :club}]\n            \n    {:suit (ds s) :rank (rs r)}))", "problem": 128, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn [[s r]] {\n  :suit ((zipmap \"DHCS\" [:diamond :heart :club :spade]) s) \n  :rank (.indexOf (vec \"23456789TJQKA\") r)})", "problem": 128, "user": "4ef2d243535dced4c769f221"}, {"code": "(fn recognize-playing-card [spec]\n  (let [suit (.charAt spec 0)\n        rank (.charAt spec 1)\n        suits { \\D :diamond \\S :spade \\H :heart \\C :club }\n        ranks { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    { :suit (suits suit)\n      :rank (ranks rank) }))", "problem": 128, "user": "4ef41f26535dced4c769f230"}, {"code": "#(let \r\n   [suits {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club}\r\n\t  ranks {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\r\n\t (letfn [(lookup-rank [rank]\r\n\t\t\t      (if-let [r (ranks rank)] r (- (Integer/parseInt rank) 2)))\r\n\t\t(create-card [card]\r\n\t\t\t     (let [suit (str (first card))\r\n\t\t\t\t  rank (str (second card))]\r\n\t\t\t\t  {:suit (suits suit) :rank (lookup-rank rank)}))]\r\n       (create-card %)))", "problem": 128, "user": "4e273301535deb9a81d77ef7"}, {"code": "(fn [[c1 c2]]\r\n    (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club }\r\n          ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\r\n      {:suit (suits c1) :rank (ranks c2)}))", "problem": 128, "user": "4ef1ee67535dced4c769f219"}, {"code": "(fn [[suit rank]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n   :rank ((apply\n            hash-map\n            (flatten (map-indexed\n                       #(vector %2 %1)\n                       (concat\n                         ; 0-9 ints to chars\n                         (map (comp first str) (range 2 10))\n                         [\\T \\J \\Q \\K \\A])))) rank)})", "problem": 128, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(fn [[s r]]\n            {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} s)\n             :rank (or ({\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r) \n                       (- (read-string (str r)) 2))})", "problem": 128, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn[[a b]]\r\n  (let [s ({\\D :diamond \\S :spade \\H :heart \\C :club} a)\r\n        r ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} b)] \r\n    {:suit s :rank r}))", "problem": 128, "user": "4daddc19c9a9d6ed4599dc57"}, {"code": "(fn [[s r]]\n   { :suit ({ \\D :diamond \\H :heart \\S :spade \\C :club } s)\n    :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0 } r)}\n   )", "problem": 128, "user": "4ee868be535d93acb0a6687d"}, {"code": "(fn [card]\n  (let [[suit rank] card]\n    {:suit (get {\\C :club, \\H :heart, \\S :spade, \\D :diamond} suit)\n     :rank (get {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12 } rank)}))", "problem": 128, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn my-card [card]\r\n  (let [suit (first card)\r\n\t\tnamep (second card)\r\n\t\tsuits {\\D :diamond \\H :heart \\S :spade \\C :club}\r\n\t\tranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\r\n\t\t{:suit (suits suit) :rank (ranks namep)}))", "problem": 128, "user": "4efb92ce535dced4c769f27a"}, {"code": "(fn rs [s]\r\n  (let [c (seq s)\r\n\t\t  suits { \\D :diamond \\H :heart\t\\C :club \\S :spade }\r\n\t\t  ranks { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }\r\n\t\t  ]{:suit (suits (first c)) :rank (ranks (last c))} ))", "problem": 128, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "(fn [card]\n     (letfn [\n      (to-suit [c]\n       (get {\n        \\D :diamond\n        \\H :heart\n        \\C :club\n        \\S :spade } c))\n      (to-val [c]\n       (let [value (-> c (int) (- 50))]\n        (if (< value 8) value\n   (get { \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 } c)))) ]\n      (-> {}\n       (assoc :suit (to-suit (first card)))\n       (assoc :rank (to-val (second card)))\n      )))", "problem": 128, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade \\D :diamond \\H :heart \\C :club} s)\n   :rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r) (- (int r) 50))})", "problem": 128, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(apply hash-map\n    (let [ suit-map { \\S :spade\n                      \\H :heart\n                      \\D :diamond\n                      \\C :club}\n           rank-map  (apply hash-map \n                       (flatten (map list \n                                 \"23456789TJQKA\" \n                                 (iterate inc 0))))\n         ]\n    (for [ [suit symb] suit-map\n           [rank index] rank-map\n           x (list (str suit rank) \n                   (hash-map :suit symb :rank index))\n         ] x)))", "problem": 128, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "(fn [[s v]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13)) v)})", "problem": 128, "user": "4dbb1126535d1e037afb21b3"}, {"code": "(fn [n] (\n  let [\n    [si ri] (str n)\n    suits {\\D  :diamond \\H :heart \\C :club \\S :spade}\n    ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} ]\n    {:suit (suits si) :rank (ranks ri)}))", "problem": 128, "user": "4ef355e3535dced4c769f228"}, {"code": "(fn [card]\n  (let [suit (hash-map \\D :diamond \\S :spade \\H :heart \\C :club)\n        rank (hash-map \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)]\n    {:suit (suit (first card)) :rank (rank (second card))}))", "problem": 128, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn p [x] (let [\n  s {\\D :diamond, \\S :spade, \\H :heart, \\C :club}\n  r {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (s (first x)) :rank (r (second x))}))", "problem": 128, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn [s]\n    (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n          ranks (fn [c]\n                  (cond (= \\A c) 12\n                        (= \\K c) 11\n                        (= \\Q c) 10\n                        (= \\J c) 9\n(= \\T c) 8\n                        :else (- (Character/getNumericValue c) 2)))\n          suit (suits (first s))\n          rank (ranks (last s))]\n      {:suit suit :rank rank}))", "problem": 128, "user": "4dc29a1d535d020aff1edf96"}, {"code": "(fn [x]\n        (let* [suit (first (str x)) card (second (str x))\n               s (cond\n                    (= suit \\D) :diamond\n                    (= suit \\H) :heart\n                    (= suit \\C) :club\n                    (= suit \\S) :spade)\n               r (cond\n                   (= card \\A) 12\n                   (= card \\K) 11\n                   (= card \\Q) 10\n                   (= card \\J) 9\n                   (= card \\T) 8\n                   :else (- (int card) 50))]\n          {:suit s, :rank r}))", "problem": 128, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn [h]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit-char (nth h 0)\n        rank-char (nth h 1)]\n    {:suit (suits suit-char) :rank (ranks rank-char)}))", "problem": 128, "user": "4f036894535dcb61093f6aad"}, {"code": "(fn [[s r]]\n  {:suit ((zipmap \"DHSC\" [:diamond :heart :spade :club]) s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "#((fn [[x y]] (let [s (cond (= x 68) :diamond\n  \t\t\t(= x 72) :heart\n\t\t\t\t(= x 67) :club\n\t\t\t\t:else :spade),\n\t\t       r (cond (= y 84) 8\n\t\t\t       (= y 74) 9\n\t\t\t       (= y 81) 10\n\t\t\t       (= y 75) 11\n\t\t\t       (= y 65) 12\n\t\t\t       :else (- y 50))] {:suit s,:rank r}))\n  (map (fn [x] (int x)) %))", "problem": 128, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn [card] \n   (let [suits {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club}\n         ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n     {:suit (suits (.substring card 0 1))\n      :rank (ranks (.substring card 1 2))}))", "problem": 128, "user": "4f017593535dcb61093f6a36"}, {"code": "(fn [[s r]]\n  {:suit (\n     {\\D :diamond\n      \\S :spades\n      \\C :club\n      \\H :heart} s),\n   :rank (.indexOf (seq \"23456789TJQKA\") r)\n  })", "problem": 128, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn [[s r]]\n  {:suit ((zipmap \"DHSC\" [:diamond :heart :spade :club]) s) :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn cards [[suit rank]]\n  {:suit ((zipmap \"DHCS\" [:diamond :heart :club :spades]) suit)\n   :rank ((zipmap \"23456789TJQKA\" (range)) rank)})", "problem": 128, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn prob-0128 [s]\n  (let [suits {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n        ranks {\\2  0, \\3  1, \\4  2, \\5  3, \\6  4, \\7  5,\n               \\8  6, \\9  7, \\T  8, \\J  9, \\Q 10, \\K 11, \\A 12}\n        sstr  (seq s)\n        schar (first sstr)\n        rchar (fnext sstr) ]\n    {:suit (suits schar), :rank (ranks rchar)}))", "problem": 128, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn [i] \n  (let [s {\\S :spade \\H :heart \\D :diamond \\C :club}\n        r (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))]\n    (zipmap [:suit :rank] (map #(%1 %2) [s r] i))))", "problem": 128, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "#(assoc (hash-map :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first %)))\n        :rank ((zipmap \"23456789TJQKA\" (range 13)) (second %)))", "problem": 128, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn [card]\r\n   (let [[suit rank] (split-at 1 card)\r\n         keyword-from-rank #(keyword (if (number? %) (str %) %))\r\n         ranks (reduce (fn [m [k v]] (assoc m k v)) {}\r\n                  (map #(let [idx (% 0) rank (% 1) rank-name (keyword-from-rank rank)]\r\n                          (list rank-name idx))\r\n                    (map-indexed vector (flatten (cons (range 2 10) ['T 'J 'Q 'K 'A])))))\r\n         suits {\"D\" :diamond \"C\" :club \"H\" :heart \"S\" :spade}]\r\n     {:suit (suits (apply str suit)) :rank ((keyword-from-rank (apply str rank)) ranks)}\r\n   ))", "problem": 128, "user": "4dadaa5cc9a9d6ed2f99dc57"}, {"code": "(fn [[suit rank]]\n  {:suit (get {\\D :diamond \\H :heart\n               \\C :club \\S :spade} suit)\n   :rank (get {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank\n              (- (Character/digit rank 10) 2))})", "problem": 128, "user": "4f04f847535dcb61093f6beb"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond\n           \\H :heart\n           \\S :spades\n           \\C :club} s)\n    :rank (get \n           {\\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12} r\n            (- (int r) (int \\2)))})", "problem": 128, "user": "4e8df08f535d65386fec213e"}, {"code": "(fn [[s r]]\n          {:suit ({\\D :diamond \\H :heart \\C :club} s)\n          :rank ((zipmap \"23456789TJQKA\" (range)) r)\n          })", "problem": 128, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn f [x]\n  {:suit (get\n    {\\D :diamond \\H :heart \\C :club \\S :spade}\n    (first x))\n   :rank (get\n    (zipmap\n      [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n      (range 13))\n    (last x))})", "problem": 128, "user": "4f062d4a535dcb61093f6c08"}, {"code": "(fn [[s r]] {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} s)\n              :rank ((zipmap (concat (map char (range 50 58)) [\\T \\J \\Q \\K \\A])\n                             (range 13)) r)})", "problem": 128, "user": "4ee88bfb535d93acb0a66881"}, {"code": "#(hash-map :suit ({\\D :diamond \\H :heart \\S :spade \\C :club} (first %)) :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (second %)))", "problem": 128, "user": "4e6a6be7535d8ccf87e9fee1"}, {"code": "(fn [s]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n    ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits (get s 0))\n     :rank (ranks (get s 1))}))", "problem": 128, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn [card]\n  (let [suits {\\C :club \\D :diamond \\H :heart \\S :spade }\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits (first card)) :rank (ranks (second card))}))", "problem": 128, "user": "4ef4ab95535dced4c769f23b"}, {"code": "#(hash-map :suit ({\\D :diamond \\H :heart \\S :spade \\C :club} (first %)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %)))", "problem": 128, "user": "4dbbdf86535d3f4042261ece"}, {"code": "(fn [[s r]]\n   {:suit\n    ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n    :rank\n    (if (re-matches #\"\\d\" (str r))\n      (- (Integer/parseInt (str r)) 2)\n      ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r))})", "problem": 128, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn rec-cards\n  [s]\n  (let [suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        l (seq s)]\n    ;(suit (first l))))\n   {:suit (suit (first l)) :rank (rank (second l))}))", "problem": 128, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn [[sc rc]]\n    {:suit ({\\D :diamond \\S :spade \\C :club \\H :heart} sc) :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] rc)})", "problem": 128, "user": "4f0b2028535d0136e6c222ff"}, {"code": "(fn [[s r]] \n  {:suit \n   ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank\n   ((into {} \n     (map vector (concat \n                  (map (comp first str) (range 2 10))\n                  [\\T \\J \\Q \\K \\A])\n                 (range)))\n    r)})", "problem": 128, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn [s]\n  (let [m {\\D :diamond, \\H :heart, \\C :club, \\S :spade, \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \n    \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (m (first s)), :rank (m (second s))}))", "problem": 128, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "#(let [suitrank (map (fn[x](cond (= x \"D\") :diamond (= x \"H\") :heart (= x \"C\") :club (= x \"S\") :spade (= x \"T\") 8 (= x \"J\") 9 (= x \"Q\") 10 (= x \"K\") 11 (= x \"A\") 12 :else (- (Integer. x ) 2))) (map str (vec %)))](hash-map :suit (first suitrank) :rank (second suitrank)))", "problem": 128, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "(fn [[c1 c2]]\n   (let [s {\\D :diamond \\H :heart \\C :club \\S :spade}\n         r {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n     {:suit (s c1) :rank (r c2)}))", "problem": 128, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "(fn [[s r]]\n  (let [suit {:H :heart :C :club :S :spade :D :diamond}\n        rank {:2 0, :3 1, :4 2, :5 3, :6 4, :7 5, :8 6, :9 7\n              :T 8, :J 9, :Q 10, :K 11, :A 12}] \n    {:suit (suit (keyword (str s)))\n     :rank (rank (keyword (str r)))}))", "problem": 128, "user": "4ea3826c535d7eef308072c6"}, {"code": "#(zipmap [:suit :rank]\n         (map (zipmap \"SHDC23456789TJQKA\"\n                      `(:spade :heart :diamond :club ~@(range)))\n              %))", "problem": 128, "user": "4ed9354f535d10e5ff6f5301"}, {"code": "(fn [[s r]] \n  (let [sm (zipmap \"SHDC\" [:spade :heart :diamond :club])\n        rm (zipmap \"23456789TJQKA\" (range))]\n     {:suit (sm s) :rank (rm r)}))", "problem": 128, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn [s] \n  {:suit ({\\H :heart \\D :diamond \\C :club \\S :spade} (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \n           \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \n           \\Q 10 \\K 11 \\A 12} (second s))})", "problem": 128, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn [s]\n    {:suit ({\\D :diamond, \\S :spade, \\H :heart, \\C :club} (first s))\n     :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (second s))})", "problem": 128, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn [x]\n  (let [vals (map (comp keyword str) x)\n        ranks {:A 12, :6 4, :7 5, :4 2, :5 3, :3 1, :2 0, :T 8, :Q 10, :9 7, :8 6, :K 11, :J 9}]\n  {:suit ((first vals) {:D :diamond :H :heart :C :club :S :spade})\n   :rank ((last vals) ranks)}))", "problem": 128, "user": "4daeabf6edd6309eace4d15c"}, {"code": "(fn f\n  ([s] (f (first s) (last s)))\n  ([s r] (hash-map :suit\n                    (condp = s \\S :spade \\C :club \\H :heart \\D :diamond)\n                    :rank \n                    (cond\n                      (Character/isDigit r) (- (Integer/parseInt (str r)) 2)\n                      :else (condp = r \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)))\n  ))", "problem": 128, "user": "4eee3e6a535d93acb0a668c3"}, {"code": "(fn [[s r]] \n  {:suit ((zipmap \"CDHS\" [:club :diamond :heart :club]) s) \n   :rank ((zipmap \"23456789TJQKA\" (range 13)) r)})", "problem": 128, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn cards [card]\r\n    (let [a (first card) b (second card)]\r\n      { :suit (cond\r\n               (= a \\D) :diamond\r\n               (= a \\H) :heart\r\n               (= a \\C) :club\r\n               (= a \\S) :spade)\r\n       :rank (cond\r\n              (= b \\A) 12\r\n              (= b \\K) 11\r\n              (= b \\Q) 10\r\n              (= b \\J) 9\r\n              (= b \\T) 8\r\n              (= b \\9) 7\r\n              (= b \\8) 6\r\n              (= b \\7) 5\r\n              (= b \\6) 4\r\n              (= b \\5) 3\r\n              (= b \\4) 2\r\n              (= b \\3) 1\r\n              (= b \\2) 0) }))", "problem": 128, "user": "4f039524535dcb61093f6b2c"}, {"code": "#(hash-map :suit ({\\C :club \\D :diamond \\H :heart \\S :spade} (first %))\n          :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13)) (second %)))", "problem": 128, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn [a]\n  (let [[cardType card] a\n        types  (zipmap \"DSHC\" '(:diamond :spade :heart :club))\n        points (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (types cardType), :rank (points card)}))", "problem": 128, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "(let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n      ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n  (fn [[s r]] {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn [card] (let [suit (first card) rank (last card)\n                 ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n                 suits {\\S :spade \\H :heart \\D :diamond \\C :club}]\n          {:suit (suits suit) :rank (ranks rank)}))", "problem": 128, "user": "4efd98fa535de96065cf5086"}, {"code": "#(let [s {\\D :diamond \\H :heart \\C :club \\S :spades}\n       r (apply hash-map (interleave \"23456789TJQKA\" (range)))]\n   {:suit (s (first %))\n    :rank (r (second %))})", "problem": 128, "user": "4daec9dcedd6309eace4d15f"}, {"code": "(fn [x]\n     (let [given  (map (comp keyword str) (seq x))\n\t\tranks (into {} (apply map vector  [[:2 :3 :4 :5 :6 :7 :8 :9 :T :J :Q :K :A] [0 1 2 3 4 5 6 7 8 9 10 11 12]]))\n\t\tsuits {:S :spade :H :heart :D :diamond :C :club}]\n\t\t(hash-map :suit (suits (first given)) :rank (ranks (second given)))))", "problem": 128, "user": "4f066916535dcb61093f6c10"}, {"code": "(fn [xs]\n    {:suit\n    (#(cond\n        (= % \\D) :diamond\n        (= % \\H) :heart\n        (= % \\C) :club\n        (= % \\S) :spades)\n      (first xs))\n      :rank\n     (#(cond\n         (= % \\T) 8\n         (= % \\J) 9\n         (= % \\Q) 10\n         (= % \\K) 11\n         (= % \\A) 12\n         :else (- (int %) 50)) (second xs))})", "problem": 128, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn playing-card [[suit rank]]\r\n    (let [suit-map {\\C :club\r\n                    \\D :diamond\r\n                    \\H :heart\r\n                    \\S :spade}\r\n          rank-map {\\2 0\r\n                    \\3 1\r\n                    \\4 2\r\n                    \\5 3\r\n                    \\6 4\r\n                    \\7 5\r\n                    \\8 6\r\n                    \\9 7\r\n                    \\T 8\r\n                    \\J 9\r\n                    \\Q 10\r\n                    \\K 11\r\n                    \\A 12}]\r\n      {:suit (suit-map suit)\r\n       :rank (rank-map rank)}))", "problem": 128, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn [str] (let [suited (assoc {} :suit ({\\S :spade \\D :diamond \\C :club \\H :heart} (first str)))\r\n                              rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second str)) (- (int (second str)) (int \\0) 2))]\r\n                          (assoc suited :rank rank)))", "problem": 128, "user": "4f13047d535d64f60314642c"}, {"code": "(fn [[s r]]\n    (let [suit {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n          rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n        {:suit (suit s) :rank (rank r)}))", "problem": 128, "user": "4f128865535d64f603146428"}, {"code": "(fn [x] {:suit \n  ({\\D :diamond \\H :heart \\C :club \\S :spades} (first x)) \n  :rank\n  ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \n    \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second x))})", "problem": 128, "user": "4ed55b5d535d10e5ff6f52d8"}, {"code": "(fn [[s v]]\n   {:suit ({\\S :spade\n            \\C :club\n            \\D :diamond\n            \\H :heart} s)\n    :rank (get {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n               v\n               (- (int v) (int \\0) 2))})", "problem": 128, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn [code]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get suits (first code)) :rank (get ranks (second code))}))", "problem": 128, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn [[s n]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n          \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} n)})", "problem": 128, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [card]\n  (let [suites {\\D :diamond \\H :heart \\C :club \\S :spades}\n        ranks \"23456789TJQKA\"\n        [s r] card]\n    {:suit (suites s) :rank (.indexOf ranks (str r))}))", "problem": 128, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [[s r]]  \n    {:suit \n      ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n    :rank (.indexOf \"23456789TJQKA\" (str r))}\n)", "problem": 128, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn [[s t]] (let [a {\\D :diamond \\H :heart \\S :spade \\C :club} b (apply hash-map (interleave (concat (map char (range 50 58)) [\\T \\J \\Q \\K \\A]) (range 13)))] {:suit (a s) :rank (b t)}))", "problem": 128, "user": "4ef6e689535dced4c769f24f"}, {"code": "(fn [st]\n  ((fn [data]\n    (let [suit (first data) rank (second data) digit (compare rank \\0)]\n      {\n        :suit ({\\H :heart \\S :spade \\C :club \\D :diamond} suit)\n        :rank (if (<= 2 digit 9) (- digit 2) ({\\T 8, \\J 9,\\Q 10,\\K 11,\\A 12} rank))\n      })\n  ) (vec st))\n)", "problem": 128, "user": "4f16d6ed535d64f60314644f"}, {"code": "#(let [r (second %)]\n    {:suit ({\\S :spade,\\H :heart,\\D :diamond,\\C :club} (first %))\n     , :rank (or ({\\T 8,\\J 9,\\Q 10,\\K 11,\\A 12} r) (- (int r) 50))})", "problem": 128, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "(fn parse-card [s]\n  (let [sq (seq s) suit (first sq) rank-raw (second sq) rank (- (int rank-raw) 48) card (hash-map)\n  newone   (cond (= \\D suit) (assoc card :suit :diamond)\n\t\t       (= \\C suit) (assoc card :suit :club)\n\t\t       (= \\H suit) (assoc card :suit :heart)\n\t\t       (= \\S suit) (assoc card :suit :spade))]\n    (cond (and (> rank 0) (< rank 10)) (assoc newone :rank (- rank 2))\n\t  (= \\T rank-raw) (assoc newone :rank 8)\n\t  (= \\J rank-raw) (assoc newone :rank 9)\n\t  (= \\Q rank-raw) (assoc newone :rank 10)\n\t  (= \\K rank-raw) (assoc newone :rank 11)\n\t  (= \\A rank-raw) (assoc newone :rank 12))))", "problem": 128, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn [s]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club} \n\t\t  ranks\t[\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n\t\t  ranks-map (apply hash-map (interleave ranks (range 13)))\n\t\t  suit (first s) \n\t\t  rank (last s)]\n\t\t  {:suit (get suits suit) :rank (get ranks-map rank)}))", "problem": 128, "user": "4ef5c7ce535dced4c769f248"}, {"code": "(fn [[s r]]\n  (let\n    [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n     ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n    (hash-map :suit (get suits s) :rank (get ranks r))))", "problem": 128, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn [[a b]]\n  {:suit ({\\D :diamond \\S :spader \\H :heart \\C :club} a)\n   :rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} b) \n             (-> b str read-string dec dec))})", "problem": 128, "user": "4f08b15b535dcb61093f6c40"}, {"code": "#(hash-map \n   :suit \n   (get \n     {\\H :heart \\D :diamond \\S  :spade \\C :club} \n     (first %)) \n   :rank \n   (get \n     (zipmap \"23456789TJQKA\" (range 13))\n     (last %)))", "problem": 128, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn [[s v]]\n  {:suit ({\\H :heart \\C :club \\D :diamond \\S :spade} s)\n   :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} v (- (int v) 50))})", "problem": 128, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn recognize-playing-cards [card]\n  (hash-map\n    :suit\n    (get\n      {\\D :diamond,\n       \\H :heart,\n       \\C :club,\n       \\S :spade}\n      (first card)\n      )\n    :rank\n    (get\n      {\\2 0,\n       \\3 1,\n       \\4 2,\n       \\5 3,\n       \\6 4,\n       \\7 5,\n       \\8 6,\n       \\9 7,\n       \\T 8,\n       \\J 9,\n       \\Q 10,\n       \\K 11,\n       \\A 12}\n      (second card)\n    )\n    )\n  )", "problem": 128, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(fn [i] (let [suit {\\D :diamond \\C :club \\S :spade \\H :heart} rank {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}] {:suit (suit (first i)) :rank (rank (last i) (- (int (last i)) (int \\2)))}))", "problem": 128, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn [x] (let [s (first x) r (second x)] {:suit ({\\H :heart \\S :spade \\D :diamond \\C :club} s) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)}))", "problem": 128, "user": "4f0cc259535d0136e6c22310"}, {"code": "(fn [s]\n  (let [\n    sr (vec s)\n    rs {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n    ss {\\D :diamond \\H :heart \\C :club \\S :spade}\n  ]\n    {:suit (ss (first s)) :rank (rs (second s))}))", "problem": 128, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "(fn [a] (let [colors {\\D :diamond \\H :heart \\C :club \\S :spade}\n              values {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n              firstchar (first a)\n              secondchar (second a)]\n        {:suit (get colors firstchar) :rank (get values secondchar)}))", "problem": 128, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "#(let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n       ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n       [s r] (seq %)]\n   {:suit (suits s) :rank (ranks r)})", "problem": 128, "user": "4e8ad247535d65386fec2111"}, {"code": "(fn describe-card [[s r]]\n  (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        ranks (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn [s]\n   (assoc \n   (assoc '{}\n     :rank (get '{\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n                (last (seq s))\n                )\n     )\n   :suit (get '{\\D :diamond \\S :spades \\H :heart \\C :club}  (first (seq s)))\n   )\n   )", "problem": 128, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn [s] \r\n  {:suit (get {\\D :diamond \\H :heart \\C :club} (first s)) \r\n   :rank \r\n    (get \r\n      {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} \r\n      (second s))})", "problem": 128, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [[a b]]\n  {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} a)\n   :rank (if (> (int b) 57) ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} b) (- (int b) 50)) \n   })", "problem": 128, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn [c] (merge {:rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second c))}\n              {:suit (get {\\C :club, \\D :diamond, \\H :heart, \\S :spade} (first c))}))", "problem": 128, "user": "4db1fe241254ad5b4805fa77"}, {"code": "(fn [[s t]]\n    {:suit (\n      get {\n            \\S :spade\n            \\D :diamond\n            \\H :heart\n            \\C :club\n             } s\n      )\n    :rank (\n      get (zipmap \"23456789TJQKA\" (range 0 13))\n            t\n      )\n    }\n  )", "problem": 128, "user": "4f1595da535d64f603146444"}, {"code": "(fn [c] {:suit (get { \\H :heart \\C :club \\D :diamond \\S :spade } (nth c 0)) :rank (get { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 } (nth c 1))})", "problem": 128, "user": "4e765170535d324fb2983d69"}, {"code": "(fn [[s r]] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spades} s)\n                      :rank (if-let [r ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)]\n                              r (- (int r) 50))\n                      })", "problem": 128, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn [s]\n  {:suit ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} (str (first s)))\n   :rank ((zipmap\n           (into '(\"T\" \"J\" \"Q\" \"K\" \"A\") (map str (range 9 1 -1)))\n           (range 13))\n          (str (second s)))})", "problem": 128, "user": "4f31519ae4b0d6649770a086"}, {"code": "(fn [[s r]]\n  {:suit (cond (= s \\S) :spade\n               (= s \\H) :heart\n               (= s \\D) :diamond\n               (= s \\C) :club)\n   :rank (cond (= r \\T) 8\n               (= r \\J) 9\n               (= r \\Q) 10\n               (= r \\K) 11\n               (= r \\A) 12\n               :else (- (int r) 50))})", "problem": 128, "user": "4e7dd982535db169f9c796ee"}, {"code": "#(let [s {\\D :diamond, \\H :heart, \\C :club, \\S :spade},\n       r {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6,\n          \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n  {:suit (s (first %)) :rank (r (second %)) })", "problem": 128, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "(fn [[s r]] \n  {:rank ((zipmap \"23456789TJQKA\" (range)) r) \n   :suit ((zipmap \"DHCS\" [:diamond :heart :club :spade]) s)})", "problem": 128, "user": "4ee6400c535d93acb0a6685b"}, {"code": "#(zipmap\n  [:rank :suit]\n  [ ((zipmap \"23456789TJQKA\" (range 13)) (second %))\n    ({\\D :diamond \\H :heart \\S :spades \\C :club} (first %)) ] )", "problem": 128, "user": "4f280840e4b0d6649770a010"}, {"code": "(fn [h] \n   (let [[t r] (seq h)]\n     {:suit (condp = t\n              \\D :diamond\n              \\H :heart\n              \\C :club\n              \\S :spade)\n      :rank (condp = r\n              \\A 12\n              \\K 11\n              \\Q 10\n              \\J 9\n              \\T 8\n              (- (int r) (int \\0) 2))}))", "problem": 128, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [text]\n    (let [suits {\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club}\n          ranks (into {} (map-indexed #(vector (str %2) %1) \"23456789TJQKA\"))]\n        (when-let [[_ suit rank] (re-find #\"^([SHDC])([2-9TJKQA])$\" text)]\n            {:rank (ranks rank) :suit (suits suit)}\n        )))", "problem": 128, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [[x y]] (let [s     {\\S :spade, \\D :diamond, \\H :heart, \\C :club}\n                  r     {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                         \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n          {:suit (s x) :rank (r y)}))", "problem": 128, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "(fn [card]\n  {:suit ({\\D :diamond, \\H :heart, \\S :spade, \\C :club} (first card))\n   :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (second card))})", "problem": 128, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn ss [s]\n  (letfn [(suit [ch]\n            (cond \n              (= ch \\D) :diamond\n              (= ch \\S) :spade\n              (= ch \\H) :heart\n              (= ch \\C) :club\n              ))\n          (rank [n]\n            (cond\n              (= n \\A) 12\n              (= n \\K) 11\n              (= n \\Q) 10\n              (= n \\J) 9\n              (= n \\T) 8 \n              :else (- (Integer/parseInt (str n)) 2)\n              ))]\n    (hash-map :suit (suit (first s)) :rank (rank (last s)))))", "problem": 128, "user": "4f04d312535dcb61093f6be7"}, {"code": "(fn [[s n]]\n           (let [nm (zipmap \"23456789TJQKA\" (range)), sm (zipmap \"SHDC\" [:spade :heart :diamond :club])]\n                (hash-map :rank (nm n) :suit (sm s))))", "problem": 128, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn [card]\n  (let [suit (condp = (first (seq card))\n              \\S :spade\n              \\H :heart\n              \\D :diamond\n              \\C :club)\n        rank (condp = (second (seq card))\n              \\A 12\n              \\K 11\n              \\Q 10\n              \\J  9\n              \\T  8\n              (- (int (second (seq card))) (int \\2)))] \n    { :suit suit :rank rank }))", "problem": 128, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn parse-card [sym]\n         (letfn [(suit [s]\n                   (condp = s \n                     \\D :diamond\n                     \\S :spade\n                     \\H :heart\n                     \\C :club))\n                 (rank [r]\n                   (condp = r\n                     \\A 12\n                     \\2 0\n                     \\3 1\n                     \\4 2\n                     \\5 3\n                     \\6 4\n                     \\7 5\n                     \\8 6\n                     \\9 7\n                     \\T 8\n                     \\J 9\n                     \\Q 10\n                     \\K 11\n                     ))]\n           (let [s (nth sym 0)\n                 r (nth sym 1)]\n             {:suit (suit s) :rank (rank r)}\n             )))", "problem": 128, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [string]\n  (let [ getSuit { \\D :diamond , \\H :heart ,\\C :club ,\\S :spade}\n         getRank { \\2 0, \\3 1, \\4 2 , \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8,\n                   \\J 9, \\Q 10, \\K 11, \\A 12} \n         chars (seq string)]\n       \n       {:suit (getSuit (first chars)) :rank (getRank (second chars))}\n  ))", "problem": 128, "user": "4f2aff4de4b0d6649770a044"}, {"code": "(fn [x]    {\n             :suit ({\\S :spade  \\H :heart\n                      \\D :diamond \\C :club} (first x))\n             :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4\n                     \\7 5 \\8 6 \\9 7 \\T 8 \\J 9\n                     \\Q 10 \\K 11 \\A 12} (second x))\n           })", "problem": 128, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [[s r]]\n{:suit ({\\S :spades \\D :diamond \\H :heart \\C :club} s)\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})", "problem": 128, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn [[s r]] \n  (let [suits (zipmap \"SDHC\" [:spade :diamond :heart :club])\n        ranks (zipmap \"23456789TJQKA\" (range))]\n    {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn [card]\r\n  (let [suits {\\D :diamond\r\n               \\H :heart\r\n               \\C :club\r\n               \\S :spade}\r\n        ranks {\\T 8\r\n               \\J 9\r\n               \\Q 10\r\n               \\K 11\r\n               \\A 12}\r\n        suit (get suits (first card))\r\n        rank (if (contains? ranks (last card))\r\n                 (get ranks (last card))\r\n                 (- (Integer/parseInt (str (last card))) 2))]\r\n    {:suit suit\r\n     :rank rank}))", "problem": 128, "user": "4eb66737535d7eef3080736b"}, {"code": "(fn [s]\n  {:suit ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} \n          (subs s 0 1)) \n   :rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3  \"6\" 4  \"7\" 5  \"8\" 6\n           \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12 } \n          (subs s 1 2))})", "problem": 128, "user": "4f1d1299535d64f603146487"}, {"code": "(fn [[a,b]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} a)\n   :rank ((zipmap \"23456789TJQKA\" (range)) b)})", "problem": 128, "user": "4e46ac46535dc968683fc4b5"}, {"code": "(fn  [x]\n  (let [[s r] x\n      suit (fn [x] (cond (= x \\D) :diamond\n                         (= x \\H) :heart\n                         (= x \\S) :spade\n                         (= x \\C) :club))\n      rank (fn [x] (cond (= x \\T) 8\n                         (= x \\J) 9\n                         (= x \\Q) 10\n                         (= x \\K) 11\n                         (= x \\A) 12\n                         :other (- (int x) (int \\2))))]\n{:suit (suit s) :rank (rank r)}))", "problem": 128, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "#(assoc {} :suit (val (find {\\D :diamond \\H :heart \\C :club \\S :spade} (first %)))\r\n        :rank (val (find {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5\r\n                          \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %))))", "problem": 128, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn [[suit rank]]\n  {:suit\n    ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} suit)\n   :rank\n    ({\\A 12, \\K 11, \\Q 10, \\J 9, \\T 8} rank\n      (- (int rank) (int \\1) 1))})", "problem": 128, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(let [ suits (apply hash-map (interleave \"CDHS\" [:club :diamond :heart :spade]))\n       ranks (apply hash-map (interleave \"23456789TJQKA\" (range))) ]\n (fn [ xs ]\n   (hash-map\n     :suit (suits (first xs))\n     :rank (ranks (second xs)))))", "problem": 128, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "(fn [name]\n  (let [[_ suit-letter rank-letter] (clojure.string/split name #\"\")\n        suit ({\"C\" :club\n               \"D\" :diamond\n               \"H\" :heart\n               \"S\" :spade} suit-letter)\n        rank ({ \"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} rank-letter)]\n  {:suit suit :rank rank}))", "problem": 128, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "(fn [card]\n  (let [rank (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))\n        suit (zipmap [\\S \\H \\D \\C] [:spade :heart :diamond :club])\n        c (seq card)]\n    { :suit (suit (first c)) :rank (rank (second c)) }))", "problem": 128, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn [card]\n  (let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        ranks (assoc  (apply hash-map (interleave (apply str (range 2 10)) (range 8))) \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)]\n\n    {:suit (suits (first card)) :rank (ranks (second card))}))", "problem": 128, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "(fn [[suit rank]]\n    (let [rankmap {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n          suitmap {\\H :heart \\D :diamond \\S :spade \\C :club}]\n        (hash-map :rank (rankmap rank) :suit (suitmap suit))))", "problem": 128, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn [[suit rank]]\n  (let [msuit {\\S :spade \\H :heart \\D :diamond \\C :club}\n        mrank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8\n               \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (msuit suit)\n     :rank (mrank rank)}))", "problem": 128, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn [s]\n  (let [suits {\\C :club \\D :diamond \\H :heart \\S :spade} \n        ranks (zipmap (seq \"23456789TJQKA\") (range))\n        [s r] (seq s)]\n    {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn [[suit rank]]\n  (hash-map\n    :suit\n    (condp = suit\n      \\C :club\n      \\D :diamond\n      \\H :heart\n      \\S :spades\n      :undefined)\n    :rank\n    (condp = rank\n      \\2 0\n      \\3 1\n      \\4 2\n      \\5 3\n      \\6 4\n      \\7 5\n      \\8 6\n      \\9 7\n      \\T 8\n      \\J 9\n      \\Q 10 \n      \\K 11\n      \\A 12)))", "problem": 128, "user": "4e131443535d04ed9115e7d3"}, {"code": "#(let [[suit rank] %]\n   {:suit ({\\H :heart \\D :diamond \\C :club \\S :spade}\n               suit)\n   :rank ((zipmap \"23456789TJQKA\" (range)) rank)})", "problem": 128, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn [card]\n       (let [suit (val (find {\\D :diamond \\H :heart \\C :club \\S :spade}\n  \t\t     (first card)))\n\t     rank (val (find\n\t\t\t{\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8\n\t\t\t \\J 9 \\Q 10 \\K 11 \\A 12} (second card)))]\n\t {:suit suit :rank rank}))", "problem": 128, "user": "4eae2f9e535d7eef30807324"}, {"code": "(fn [card]\n  (let [values (merge {\\S :spade \\H :heart \\D :diamond \\C :club\n                       \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n                      (zipmap (map #(Character/forDigit % 10) (range 2 10))\n                              (map #(- % 2) (range 2 10))))]\n    (zipmap [:suit :rank] (map values card))))", "problem": 128, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "(fn to-card [card]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        rank-value (fn [rank]\n                     (if (Character/isDigit rank)\n                       (- (Character/digit rank 10) 2)\n                       (ranks rank)))]\n    {:suit (suits (first card))\n     :rank (rank-value (last card))}))", "problem": 128, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn card [[suit rank]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits suit) :rank (ranks rank)}))", "problem": 128, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn [x]\n  (let [[suit rank] x\n        suit (str suit)\n        rank (str rank)]\n    {:suit ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} suit) \n     :rank (or \n             (get {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} rank) \n             (- (Integer/parseInt rank) 2)\n           )\n    }))", "problem": 128, "user": "4f4ff5a8e4b03ad3f0c10cf3"}, {"code": "(fn [s]\n    (let [suits (zipmap \"DHCS\"  [:diamond :heart :club :spade])\n          ranks (zipmap \"23456789TJQKA\" (range))\n          suit (fn [st] (nth st 0))\n          rank (fn [st] (nth st 1))]\n      {:suit (get suits (suit s)) :rank (get ranks (rank s))} ))", "problem": 128, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn [i]\n  (let [s  (first i) \n        r  (last i)\n        ts {\\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :spade}\n        tr {\\2 0\n            \\3 1\n            \\4 2\n            \\5 3\n            \\6 4\n            \\7 5\n            \\8 6\n            \\9 7\n            \\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12}]\n      {:suit (get ts s)\n       :rank (get tr r)}\n))", "problem": 128, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "(fn card [[a b]]\n  (let [suit ({\\S :spade \\H :heart \\C :club \\D :diamond} a)\n        letterRank ( {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} b)\n        rank (Character/getNumericValue b)]\n    {:suit suit :rank (if (nil? letterRank) (- rank 2) letterRank)}))", "problem": 128, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "#(let [[s r] %]\r\n     {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} s)\r\n      :rank (if (Character/isDigit r)\r\n              (- (int r) 50)\r\n              ({\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12 } r))})", "problem": 128, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn [[s r]]\n  {:suit\n    ({\\H :heart \\S :spade \\C :club \\D :diamond} s)\n   :rank\n    ({\\2 0\n      \\3 1\n      \\4 2\n      \\5 3\n      \\6 4\n      \\7 5\n      \\8 6\n      \\9 7\n      \\T 8\n      \\J 9\n      \\Q 10\n      \\K 11\n      \\A 12} r)})", "problem": 128, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn read-card [s]\r\n  (let [suits {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spade}\r\n        ranks (apply hash-map \r\n                     (interleave (conj (vec (map str (range 2 10))) \"T\" \"J\" \"Q\" \"K\" \"A\")\r\n                                 (range 0 14)))]\r\n    {:suit (get suits (str (first s))),\r\n     :rank (get ranks (str (second s)))}))", "problem": 128, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "(fn [[s r]]\n  (let [suits {\\S :spade \\H :heart \\C :club \\D :diamond}\n        ranks (seq \"23456789TJQKA\")]\n    {:suit (suits s) :rank (.indexOf ranks r)}))", "problem": 128, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn [s]\n  (let\n    [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club},\n     ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9, 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n  {:suit (get suits (.charAt s 0)), :rank (get ranks (.charAt s 1))}))", "problem": 128, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn [[suit rank]]\n  (hash-map\n    :suit \n    (get \n      {\\S :spades \\H :heart \\C :club \\D :diamond} \n      suit)\n    :rank\n    (get\n      (reduce \n        (fn [m [i c]] (assoc m c i))\n        nil\n        (map vector (range) \"23456789TJQKA\"))\n      rank)))", "problem": 128, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn [[f l]]\n  {:suit ({\\H :heart \\S :spade \\D :diamond \\C :club} f)\n   :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] l)})", "problem": 128, "user": "4dc7e7a5535d8a4b2fd74290"}, {"code": "(fn playing-card [s]\n  (let [suit-name (first s)\n        rank-name (second s)\n        suit-map {\\S :spade \\D :diamond \\H :heart \\C :club}\n        rank-map {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {\n     :suit (suit-map suit-name)\n     :rank (if (and (>= (int rank-name) (int \\2)) (<= (int rank-name) (int \\9)))\n             (- (int rank-name) (int \\2))\n             (rank-map rank-name))\n    }))", "problem": 128, "user": "4f047902535dcb61093f6bcc"}, {"code": "(fn [cardstring]\r\n   (let [suit {\\D :diamond \\H :heart \\S :spade \\C :club}\r\n         rank (apply hash-map (interleave (seq \"23456789TJQKA\") (range 13)))]\r\n     {:suit (suit (first cardstring)) :rank (rank (second cardstring))}))", "problem": 128, "user": "4e8768f6535dceadca469850"}, {"code": "(fn [[s r]]\n  { :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n    :rank (.indexOf (seq \"23456789TJQKA\") r)})", "problem": 128, "user": "4f04256d535dcb61093f6ba7"}, {"code": "(fn [s]\n   (let [suit {\\D :diamond \\H :heart \\C :club \\S :spade}\n         rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n     {:suit (get suit (first s)) :rank (get rank (second s))}))", "problem": 128, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "(fn [s]\n  {\n    :suit ({\n            \\S :spade\n            \\H :heart\n            \\D :diamond\n            \\C :club} (first s))\n    :rank (or \n          ({\n            \\A 12\n            \\K 11\n            \\Q 10\n            \\J 9\n            \\T 8} (second s))\n          (- (Integer/parseInt (str (second s))) 2))})", "problem": 128, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [s]\n  (let [[suit rank] (seq s)\n        c-to-suit \n        (fn [c]\n          (condp = c\n            \\S :spade\n            \\H :heart\n            \\D :diamond\n            \\C :club))\n        c-to-rank\n        (fn [c]\n          (condp = c\n            \\2 0\n            \\3 1\n            \\4 2\n            \\5 3\n            \\6 4\n            \\7 5\n            \\8 6\n            \\9 7\n            \\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12))]\n      {:suit (c-to-suit suit) :rank (c-to-rank rank)}))", "problem": 128, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn [card]\n    (let [suits {\\H :heart,\n                 \\D :diamond,\n                 \\C :club,\n                 \\S :spade}\n          rank {\\2 0,\n                \\3 1,\n                \\4 2,\n                \\5 3,\n                \\6 4,\n                \\7 5,\n                \\8 6,\n                \\9 7,\n                \\T 8,\n                \\J 9,\n                \\Q 10,\n                \\K 11,\n                \\A 12}\n          [c1 c2] (seq card)]\n      {:suit (suits c1)\n       :rank  (rank c2)}))", "problem": 128, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn getcard [card]\n  (let [getsuit (fn [s]\n                    (cond\n                      (= s \"D\") :diamond\n                      (= s \"H\") :heart\n                      (= s \"C\") :club\n                      (= s \"S\") :spade))\n        getval (fn [v]\n                   (cond\n                     (= v \"T\") 8\n                     (= v \"J\") 9\n                     (= v \"Q\") 10\n                     (= v \"K\") 11\n                     (= v \"A\") 12\n                     true (- (Integer/parseInt v) 2)))]\n    {:suit (getsuit (subs card 0 1)) :rank (getval (subs card 1))}))", "problem": 128, "user": "4f697a66e4b07046d9f4ef8a"}, {"code": "(fn rpc\r\n  [i]\r\n  (let [b (seq i)\r\n  s (first b)\r\n\tr (last b)\r\n\tm {}\r\n\tsf #(condp = s\r\n\t\t\\D :diamond\r\n\t\t\\H :heart\r\n\t\t\\C :club\r\n\t\t\\S :spade)\r\n\trf #(if (Character/isDigit r)\r\n\t      (- (Integer/parseInt (str r)) 2)\r\n\t      (condp = r\r\n\t\t  \\T 8\r\n\t\t  \\J 9\r\n\t\t  \\Q 10\r\n\t\t  \\K 11\r\n\t\t  \\A 12))]\r\n    (-> m (assoc :suit (sf)) (assoc :rank (rf)))))", "problem": 128, "user": "4f17ab99535d64f603146457"}, {"code": "(fn card [c]\n  {:suit\n    ({\\D :diamond,\\H :heart,\\C :club,\\S :spade}\n      (first c)),\n   :rank\n    ({\\A 12,\\2 0,\\3 1,\\4 2,\\5 3,\\6 4,\\7 5,\n      \\8 6,\\9 7,\\T 8,\\J 9,\\Q 10,\\K 11}\n      (second c))})", "problem": 128, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "#(let [toS {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n       toR (fn[r]\n          (cond\n            (Character/isDigit r) (- (Character/getNumericValue r) 2)\n            :else                 ({\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r)))]\n  {:suit (toS (first %)) :rank (toR (second %))})", "problem": 128, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn [s]\n  {:suit\n     (get {\\D :diamond \\H :heart \\C :club \\S :spades} (first s))\n   :rank\n     (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last s))\n  }\n)", "problem": 128, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn [s] (let [snd (second s)\n              ts {\\D :diamond \\S :spade \\H :heart \\C :club}\n              tr {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n              suit (ts (first s))\n              rank (get tr snd (- (int snd) 50))]\n         (hash-map :suit suit :rank rank)))", "problem": 128, "user": "4efd8b67535de96065cf5085"}, {"code": "(fn [[s r]] \n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        values {\\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11}]\n            {:suit (suits s) :rank (values r)}))", "problem": 128, "user": "4f12ab23535d64f603146429"}, {"code": "(fn [[s r]] \n   \n  {:suit (condp = s \\D :diamond \\H :heart \\C :club \\S :spade) \n   :rank (condp = r \\J 9\\Q 10 \\K 11 \\A 12 \\T 8 r (- (Integer/parseInt (str r)) 2))}\n)", "problem": 128, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "#(assoc {} \n  :suit\n    ({\\H :heart \\D :diamond \\C :club \\S :spade} (first %))\n  :rank\n    ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (second %)))", "problem": 128, "user": "4ea4e98a535d7eef308072ce"}, {"code": "(fn card [c]\n  (let [s (first c), r (last c)]\n    {:suit (cond\n            (= s \\D) :diamond\n            (= s \\H) :heart\n            (= s \\C) :club\n            :else :spade),\n     :rank (cond\n            (= r \\A) 12\n            (= r \\K) 11\n            (= r \\Q) 10\n            (= r \\J) 9\n            (= r \\T) 8\n            :else (- (Integer/parseInt (str r)) 2))\n            }))", "problem": 128, "user": "4ecbb249535df97575fdabdf"}, {"code": "(fn [[s r]]\n  {:suit ({\\H :heart,\n           \\D :diamond,\n           \\C :club}\n          s)\n   :rank (.indexOf \"23456789TJQKA\"\n                   (int r))})", "problem": 128, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn playing-cards [a]\n  (let [cs (re-seq #\".\" a)\n  s (nth cs 0)\n\tr (nth cs 1)\n\t]\n    (letfn [(suit [s] (cond (= \"D\" s) :diamond\n\t\t\t    (= \"H\" s) :heart\n\t\t\t    (= \"C\" s) :club\n\t\t\t    (= \"S\" s) :spade\n\t\t\t    :else :none\n\t\t\t   ))\n\t    (rank [r] (cond(= r \"A\") 12\n\t\t\t   (= r \"K\") 11\n\t\t\t   (= r \"Q\") 10\n\t\t\t   (= r \"J\") 9\n         (= r \"T\") 8\n\t\t\t   :else (- (Integer/parseInt r) 2)))\n\n\t    ]\n      {:suit (suit s) :rank (rank r)})))", "problem": 128, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn [s]\n  (let [suits {\\H :heart, \\D :diamond, \\C :club, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7,\n               \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    (assoc (assoc {} :suit (get suits (get s 0))) \n      :rank (get ranks (get s 1)))))", "problem": 128, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn [c] {:suit ({\\H :heart \\D :diamond \\C :club} (first c))\n         :rank (.indexOf (vec \"23456789TJQKA\") (last c))})", "problem": 128, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn [[s r]]\n  {:suit ((zipmap \"DHCS\" [:diamond :heart :club :spade]) s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n      ranks #(.indexOf (vec \"23456789TJQKA\") %)]\n  (fn [[s r]] {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn get-card [s]\n     (let [get-suit (fn [c]\n                      [:suit (cond\n                               (= \\H c) :heart\n                               (= \\D c) :diamond\n                               (= \\C c) :club\n                               (= \\S c) :spade)])\n           get-rank (fn [c]\n                      [:rank (cond\n                               (= \\A c) 12\n                               (= \\K c) 11\n                               (= \\Q c) 10\n                               (= \\J c) 9\n                               (= \\T c) 8\n                               :else (- (Integer/parseInt (str c)) 2))])]\n                      \n       (apply hash-map (concat (get-suit (first s)) (get-rank (second s))))))", "problem": 128, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn [i]\n   (let [[c s] i \n         a {\\D :diamond \\H :heart \\C :club} \n         b {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n     {:suit (a c) :rank (b s)}))", "problem": 128, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(let [suits {\\H :heart \\S :spade \\C :club \\D :diamond}\n      ranks (into {} (map vector\n                          (concat (map (comp first str) (range 2 10))\n                                  [\\T \\J \\Q \\K \\A])\n                          (range)))]\n  (fn [[suit rank]]\n    {:suit (suits suit)\n     :rank (ranks\n              rank)}))", "problem": 128, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn [card]\n  (let [[s r] (seq card)]\n    (let [ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n      (let [suits {\\S :spade \\D :diamond \\H :heart \\C :club}]\n        {:suit (suits s) :rank (ranks r)}))))", "problem": 128, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "#(hash-map :suit ({\\C :club, \\D :diamond, \\H :heart, \\S :spade} (first %))\n           :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (second %)))", "problem": 128, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn [scard] \n  (let [\n    suits {\\S :spade \\C :club \\D :diamond \\H :heart}\n    vals {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4,\n          \\7 5, \\8 6, \\9 7, \\T 8, \\J 9,\n          \\Q 10, \\K 11, \\A 12}\n    ]\n    {:suit (suits (first scard)) :rank (vals (last scard))}\n  )\n)", "problem": 128, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "(fn card [sr]\n  (let\n    [\n      [suit rank] (seq sr),\n      suitmap {\\C :club, \\D :diamond, \\H :heart, \\S :spade},\n      ranks '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A),\n      rankmap (zipmap ranks (range 13))\n    ]\n    {\n      :suit (suitmap suit),\n      :rank (rankmap rank)\n    }\n  )\n)", "problem": 128, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn [s]\n  (let [cards {\\H :heart \\D :diamond \\C :club \\S :spade \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12\n  \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7}]\n  { :suit (cards (first s))\n  :rank (cards (second s)) }\n  )\n)", "problem": 128, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn [[f l]] {:rank ((zipmap (concat (take 8 (drop 2 (map str (range)))) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range)) (str l)) :suit ({\\C :club \\D :diamond \\H :heart \\S :spade} f)})", "problem": 128, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn [[s r]]\r\n    {:suit ({\\D :diamond\r\n             \\H :heart\r\n             \\C :club\r\n             \\S :spade} s)\r\n     :rank ({\\T 8\r\n           \\J 9\r\n           \\Q 10\r\n           \\K 11\r\n           \\A 12} r (-> r (int) (- 50)))})", "problem": 128, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "#(hash-map\n  :suit\n  ({\n    \\C :club\n    \\D :diamond\n    \\H :heart\n    \\S :spade\n  } (first %))\n  :rank\n  ((zipmap \"23456789TJQKA\" (range 13)) (last %))\n)", "problem": 128, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn [s]\n  (let [cards {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11\n              :A 12 :D :diamond :H :heart :S :spade :C :club }]\n    (apply assoc {}\n           (interleave\n            (cycle [:rank :suit]) (reverse (map #((keyword (str %)) cards) s))))))", "problem": 128, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(let [s {\\S :spade \\C :club \\H :heart \\D :diamond}                                                                                                                                                                                           \n      r {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]                                                                                                                                                               \n  (letfn [(c [[a b]]                                                                                                                                                                                                                         \n            {:suit (s a) :rank (r b)})]                                                                                                                                                                                                      \n    c))", "problem": 128, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "(fn [s]\r\n(let [letter-to-suit {\\H :heart\r\n                      \\D :diamond\r\n                      \\C :club\r\n                      \\S :spade}\r\n      \r\n      letter-to-rank {\\2 0\r\n                      \\3 1\r\n                      \\4 2\r\n                      \\5 3\r\n                      \\6 4\r\n                      \\7 5\r\n                      \\8 6\r\n                      \\9 7\r\n                      \\T 8\r\n                      \\J 9\r\n                      \\Q 10\r\n                      \\K 11\r\n                      \\A 12}]\r\n  {:suit (get letter-to-suit (first s))\r\n   :rank (get letter-to-rank (second s))}\r\n  ))", "problem": 128, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn [[s r]] \n  {:suit ({\\D :diamond \\H :heart \\C :club} s)\n   :rank (.indexOf (seq \"23456789TJQKA\") r)})", "problem": 128, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [card]\n  (let [[c1 c2] card\n        suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits c1) \n     :rank (or (ranks c2) (- (Character/digit c2 10) 2))}))", "problem": 128, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn [x]\n  {:suit (condp = (first x)\n            \\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :spade)\n   :rank (let [y (last x)]\n            (cond\n              (= \\A y) 12\n              (= \\K y) 11\n              (= \\Q y) 10\n              (= \\J y) 9\n              (= \\T y) 8\n              :else (- (int y) 50)))})", "problem": 128, "user": "4da3e51330acd6ed10482a68"}, {"code": "#(let\n  [rank-map\n    (zipmap \"23456789TJQKA\" (range))\n   suit-map\n    (zipmap \"SHDC\" [:spade :heart :diamond :club])\n   [suit rank] %]\n  {:suit (suit-map suit),\n   :rank (rank-map rank)})", "problem": 128, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})", "problem": 128, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn [card] (let [ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n                 suits {\"D\" :diamond \"C\" :club \"S\" :spade \"H\" :heart}]\n                 (hash-map :suit (get suits (str (first card))) :rank (get ranks (str (second card))))))", "problem": 128, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "#(hash-map \n  :rank (.indexOf \"23456789TJQKA\" (str (second %))) \n  :suit ({\\S :spades, \\H :heart,\\D :diamond, \\C :club} (first  %)))", "problem": 128, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "#(identity\n  {:suit ({\\S :spade,\n           \\H :heart,\n           \\D :diamond,\n           \\C :club}\n    (first %))\n   :rank (.indexOf \"23456789TJQKA\" (int (second %)))})", "problem": 128, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn [s]\n    (let [suit {\\D :diamond \\S :spade \\H :heart \\C :club}\n          rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n          [a b] (map char s)]\n      {:suit (suit a) :rank (rank b)}))", "problem": 128, "user": "4fa2fa5ee4b081705acca186"}, {"code": "(fn [card-str]\n  (let [card-seq (first (re-seq #\"(.)(.)\" card-str))\n        suit-str (card-seq 1)\n        rank-str (card-seq 2)]\n    { :suit ({\"S\" :spades, \"H\" :heart, \"D\" :diamond, \"C\" :club} suit-str), \n     :rank ({\"A\" 12, \"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11} rank-str)}))", "problem": 128, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "(fn [[s r]] {\n  :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n  :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn [[s r]]\n  { :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n    :rank (.indexOf (seq \"23456789TJQKA\") r)})", "problem": 128, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn [[suit-code rank-code]]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks (into {} (map vec (partition 2 (interleave \"23456789TJQKA\" (range 13)))))]\n    {:suit (get suits suit-code) :rank (get ranks rank-code)}))", "problem": 128, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn [[s r]]\n  (letfn [(->suit [c] ({\\D :diamond \\H :heart \\S :spade \\C :club} c))\n          (->rank [c] (if-let [v ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} c)]\n                         v (- (int c) (int \\2))))]\n    {:suit (->suit s) :rank (->rank r)}))", "problem": 128, "user": "4dac39a28cc9d6edb8beb0b3"}, {"code": "(fn [s]\n  (hash-map\n    :suit \n    (if (= (first s) \\D) :diamond (if (= (first s) \\H) :heart :club))\n    :rank\n    (- (Integer/parseInt (str (first (replace {\\T \"10\" \\J \"11\" \\Q \"12\" \\K \"13\" \\A \"14\"} (rest (vec s)))))) 2)\n  )\n)", "problem": 128, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn [card] (let [suit (first card) rank (second card)]\n  {:suit ({\\D :diamond, \\H :heart, \\C :club} suit)\n  :rank ((apply hash-map\n    (concat\n      (mapcat #(list (char (+ 50 %)) %) (range 8))\n      '(\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)))\n    rank)\n}))", "problem": 128, "user": "4fa5406fe4b081705acca1ac"}, {"code": "{ \"C2\" { :suit :club :rank 0 } \"C3\" { :suit :club :rank 1 } \"C4\" { :suit :club :rank 2 } \"C5\" { :suit :club :rank 3 } \"C6\" { :suit :club :rank 4 } \"C7\" { :suit :club :rank 5 } \"C8\" { :suit :club :rank 6 } \"C9\" { :suit :club :rank 7 } \"CT\" { :suit :club :rank 8 } \"CJ\" { :suit :club :rank 9 } \"CQ\" { :suit :club :rank 10 } \"CK\" { :suit :club :rank 11 } \"CA\" { :suit :club :rank 12 } \"D2\" { :suit :diamond :rank 0 } \"D3\" { :suit :diamond :rank 1 } \"D4\" { :suit :diamond :rank 2 } \"D5\" { :suit :diamond :rank 3 } \"D6\" { :suit :diamond :rank 4 } \"D7\" { :suit :diamond :rank 5 } \"D8\" { :suit :diamond :rank 6 } \"D9\" { :suit :diamond :rank 7 } \"DT\" { :suit :diamond :rank 8 } \"DJ\" { :suit :diamond :rank 9 } \"DQ\" { :suit :diamond :rank 10 } \"DK\" { :suit :diamond :rank 11 } \"DA\" { :suit :diamond :rank 12 } \"H2\" { :suit :heart :rank 0 } \"H3\" { :suit :heart :rank 1 } \"H4\" { :suit :heart :rank 2 } \"H5\" { :suit :heart :rank 3 } \"H6\" { :suit :heart :rank 4 } \"H7\" { :suit :heart :rank 5 } \"H8\" { :suit :heart :rank 6 } \"H9\" { :suit :heart :rank 7 } \"HT\" { :suit :heart :rank 8 } \"HJ\" { :suit :heart :rank 9 } \"HQ\" { :suit :heart :rank 10 } \"HK\" { :suit :heart :rank 11 } \"HA\" { :suit :heart :rank 12 } \"S2\" { :suit :spade :rank 0 } \"S3\" { :suit :spade :rank 1 } \"S4\" { :suit :spade :rank 2 } \"S5\" { :suit :spade :rank 3 } \"S6\" { :suit :spade :rank 4 } \"S7\" { :suit :spade :rank 5 } \"S8\" { :suit :spade :rank 6 } \"S9\" { :suit :spade :rank 7 } \"ST\" { :suit :spade :rank 8 } \"SJ\" { :suit :spade :rank 9 } \"SQ\" { :suit :spade :rank 10 } \"SK\" { :suit :spade :rank 11 } \"SA\" { :suit :spade :rank 12 } }", "problem": 128, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn [[s r]] (\n  let [suits { \\S :spade , \\H :heart, \\D :diamond, \\C :club }\n        ranks { \\2 0, \\3 1, \\4 2, \\5 3,\n        \\6 4, \\7 5, \\8 6, \\9 7, \\T 8,\n        \\J 9, \\Q 10, \\K 11, \\A 12 }\n    ] (hash-map :suit (get suits s), :rank (get ranks r))\n))", "problem": 128, "user": "4ef48422535dced4c769f236"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(fn card [s]\n  (let [q (get {\\A 12\n                \\T 8\n                \\J 9\n                \\Q 10\n                \\K 11}\n               (second s)\n                (- (int (second s)) (int \\2)))]\n    (hash-map :suit \n              (get {\\D :diamond\n                    \\H :heart\n                    \\S :spade\n                    \\C :club} (first s))\n            :rank q)))", "problem": 128, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn [c] {:suit\n  (get \n    {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} \n    (str (first c))\n  )\n  :rank\n  (get \n    {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} \n    (str (second c))\n  )\n  }\n)", "problem": 128, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn [[s r]]\n    {:suit ({\\D :diamond \\C :club \\H :heart \\S :spade} s)\n     :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)) r)})", "problem": 128, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "(fn [s] (zipmap [:suit :rank] (map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 \\D :diamond \\H :heart \\S :spade \\C :club} s)))", "problem": 128, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "(fn [s] (let [suits {\\D :diamond \\H :heart \\C :club \\s :spade}\n       rank (zipmap (concat (map #(first (str %)) (range 2 10)) [\\T \\J \\Q \\K \\A]) (range 13))]\n   (zipmap [:suit :rank] (map #(% %2) [suits rank] s))))", "problem": 128, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn [[suit rank]]\n  (let\n      [suits {\\D :diamond \\S :spade \\H :heart \\C :club}\n       ranks (apply hash-map\n                    (interleave\n                      \"23456789TJQKA\" (range)))]\n  { :suit (suits suit) :rank (ranks rank) }))", "problem": 128, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "(fn [x]\n  (let [[s r] (seq x)]\n    {:suit (condp = s\n      \\D :diamond\n      \\H :heart\n      \\C :club\n      :spade)\n    :rank (condp = r\n      \\A 12\n      \\K 11\n      \\Q 10\n      \\J 9\n      \\T 8\n      (- (Integer/parseInt (str r)) 2))}))", "problem": 128, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn recognize [card]\n  (let [[suit rank] (seq card)\n        rankval (cond \n                  (= rank \\A) 12\n                  (= rank \\K) 11\n                  (= rank \\Q) 10\n                  (= rank \\J) 9\n                  (= rank \\T) 8\n                  :else (- (int rank) (int \\2)))\n        suitname (cond\n                    (= suit \\D) :diamond\n                    (= suit \\H) :heart\n                    (= suit \\S) :spade\n                    (= suit \\C) :club)]\n    {:suit suitname :rank rankval}))", "problem": 128, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "#(hash-map :suit ({\\S :spade \\D :diamond \\C :club \\H :heart} (get % 0)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (get % 1)))", "problem": 128, "user": "4fae258de4b081705acca246"}, {"code": "(fn card [S]\n  (let [suites {\\D :diamond\n                \\H :heart\n                \\C :club\n                \\S :spade}\n        ranks  {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n                \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suites (first S)) :rank (ranks (second S))}))", "problem": 128, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn [[s r]]\r\n  (array-map\r\n    :suit (cond\r\n            (= \\D s) :diamond (= \\H s) :heart (= \\C s) :club (= \\S s) :spades )\r\n    :rank (cond\r\n            (= \\T r) 8\r\n            (= \\J r) 9\r\n            (= \\Q r) 10\r\n            (= \\K r) 11\r\n            (= \\A r) 12\r\n            :else (- (Long/parseLong (str r)) 2))))", "problem": 128, "user": "4facff22e4b081705acca230"}, {"code": "(fn [sr]\n           (let [suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n                      rank \"23456789TJQKA\"\n                      suit-str (first sr)\n                      rank-str (second sr)]\n             {:suit (get suit suit-str)\n                    :rank (.indexOf (vec rank) rank-str)}))", "problem": 128, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "(fn \n  [s]\n  (let [rank #(.indexOf \"23456789TJQKA\" (int %))\n        suite #({\\S :spade \\H :heart \\D :diamond \\C :club} %)]\n    (hash-map :suit (suite (first s)) :rank (rank (last s)))))", "problem": 128, "user": "4fadbc3fe4b081705acca23f"}, {"code": "(fn poke [s]\r\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\r\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \r\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\r\n        ]\r\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\r\n  ))", "problem": 128, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "#(hash-map :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first %)) :rank (.indexOf \"23456789TJQKA\" (str (second %))))", "problem": 128, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn [s] (let [suits {\\D :diamond, \\S :spade, \\H :heart, \\C :club},\n              get-rank #({\\J 9, \\Q 10, \\K 11, \\A 12, \\T 8} % (- (int %) 50))] \n          {:suit (suits (first s)) :rank (get-rank (second s))}))", "problem": 128, "user": "4fa30027e4b081705acca187"}, {"code": "(fn [s]\n  {\n    :suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} (first s))\n    :rank (.indexOf \"23456789TJQKA\" (int (second s)))})", "problem": 128, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn [x] (zipmap '#{:suit :rank} (conj '() ({\\H :heart \\D :diamond \\C :club \\S :spade} (first (seq x))) (.indexOf \"23456789TJQKA\" (apply str (rest x)) )  )))", "problem": 128, "user": "4fb510b5e4b081705acca2b8"}, {"code": "(fn  playcard[str]\r\n  (let[ [a  b]  (seq str)\r\n       suitMap {\\D  :diamond\r\n             \\H  :heart \r\n             \\C  :club\r\n             \\S  :spade\r\n            } \r\n       numMap {\\T  8\r\n            \\J  9\r\n            \\Q  10\r\n            \\K  11\r\n            \\A  12}\r\n       num   (get numMap b (- (int b) 50) )\r\n       suit  (get suitMap a)    \r\n               ]\r\n      {:suit suit :rank num}\r\n     \r\n   ))", "problem": 128, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn __ [s] {\n  :suit\n  ({\\S :spade \\C :club \\H :heart \\D :diamond} (first s))\n  :rank\n  (or\n    ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))\n    (- (int (second s)) (int \\0) 2))})", "problem": 128, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn [s]\n  (let [ss (map char s)\n        suit (first ss)\n        rank (second ss)]\n    {:rank ({ \\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 } rank)\n     :suit ({ \\C :club \\H :heart \\S :spade \\D :diamond } suit)}))", "problem": 128, "user": "4fa6a491e4b081705acca1bc"}, {"code": "(fn [x]\n  (let [a { \\S :spead \\H :heart \\D :diamond \\C :club }\n        b { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n    {:suit (get a (first x)) :rank (get b (last x)) }))", "problem": 128, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(let [suit {\\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :spade}\n      rank #(condp = %\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12\n             (- (int %) (int \\2)))]\n  #(hash-map :suit (suit (first %))\n             :rank (rank (second %))))", "problem": 128, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn [[s r]]\n  { :suit ((zipmap \"DHCS\" [:diamond :heart :club :spade]) s)\n    :rank ((zipmap \"23456789TJQKA\" (range)) r)\n  })", "problem": 128, "user": "4fb3b865e4b081705acca2a2"}, {"code": "(fn ans [st]\n    (letfn [(suit [st] (cond \n                    (= st \\S) {:suit :spade}\n                    (= st \\H) {:suit :heart}\n                    (= st \\D) {:suit :diamond}\n                    (= st \\C) {:suit :club}\n                    )\n    )\n            (rank [st] (cond \n                    (= st \\2) {:rank 0}\n                    (= st \\3) {:rank 1}\n                    (= st \\4) {:rank 2}                    \n                    (= st \\5) {:rank 3}\n                    (= st \\6) {:rank 4}\n                    (= st \\7) {:rank 5}\n                    (= st \\8) {:rank 6}\n                    (= st \\9) {:rank 7}\n                    (= st \\T) {:rank 8}\n                    (= st \\J) {:rank 9}\n                    (= st \\Q) {:rank 10}\n                    (= st \\K) {:rank 11}\n                    (= st \\A) {:rank 12}\n                    )\n    )\n            ]\n      (merge (suit (first st)) (rank (second st)))\n      )\n    )", "problem": 128, "user": "4f2004a1535d64f6031464a7"}, {"code": "(fn [string]\n  (let [in (seq string)\n        suit {\\D :diamond \\H :heart \\C :club  \\S :spade}\n        rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n        {:suit (suit (first in)) :rank (rank (second in))}))", "problem": 128, "user": "4faec810e4b081705acca24e"}, {"code": "(fn playing-cards [^String card]\n  (let [suit-key (keyword (str (first card)))\n        rank-key (keyword (str (second card)))\n        suit (suit-key {:S :spade :H :heart :D :diamond :C :club})\n        rank (rank-key {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12})]\n    {:suit suit, :rank rank}))", "problem": 128, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "(fn[card] (let [ [suit rank] (seq card)\n                 rmap {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n                 smap {\\D :diamond \\H :heart \\C :club \\S :spade}]\n             {:suit (smap suit) :rank (rmap rank)}))", "problem": 128, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn [card]\n  (let [suit {\\D :diamond \\S :spade \\H :heart \\C :club}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n        {:suit (suit (get card 0)) :rank (rank (get card 1))}))", "problem": 128, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn [c]\r\n  (let [suits {\\D :diamond \\C :club \\S :spade \\H :heart}\r\n        ranks (zipmap \r\n                [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\r\n                (range))]\r\n    {:suit (suits (first c)) :rank (ranks (second c))}))", "problem": 128, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn [[s r]]\n  {:suit (cond (= s \\H) :heart\n               (= s \\C) :club\n               (= s \\D) :diamond\n               (= s \\S) :spade)\n   :rank (cond (= r \\A) 12\n               (= r \\K) 11\n               (= r \\Q) 10\n               (= r \\J) 9\n               (= r \\T) 8\n               :else (- (int r) 50))\n})", "problem": 128, "user": "4faac363e4b081705acca200"}, {"code": "(fn\n   [[s r]]\n   (let [suits {\\H :heart\n                \\C :club\n                \\D :diamond\n                \\S :spade}\n         ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n                \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n     {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn card [str] (let [s (nth str 0) r (nth str 1)]\n  {:suit (condp = s \\D :diamond \\H :heart \\C :club \\S :spade)\n   :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] r)}))", "problem": 128, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [[s r]]\r\n  (let [rank (apply hash-map\r\n                 (interleave \r\n                   (concat (map str (range 2 10) ) '(\"T\" \"J\" \"Q\" \"K\" \"A\"))\r\n                   (range 0 13)))\r\n        suit {\"D\" :diamond \"H\" :heart \"C\" :club \"S\"  :S}]\r\n    {:suit (get suit (str s)) :rank (get rank (str r))}))", "problem": 128, "user": "4f82ed48e4b033992c121c0e"}, {"code": "(fn parse-card [[suit card]]\n  (let [p-suit {\\S :spade\n                \\H :heart\n                \\D :diamond\n                \\C :club}\n        p-card (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))]\n    {:suit (p-suit suit) :rank (p-card card)}))", "problem": 128, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn [c] {:suit\r\n   ({\\D :diamond, \\C :club \\H :heart \\S :spade} (first c))\r\n   :rank\r\n   ((zipmap \"23456789TJQKA\" (range))  (second c))} )", "problem": 128, "user": "4fab31a8e4b081705acca215"}, {"code": "(fn recognize [s]\n  (let [seqs (seq s) a (first seqs) b (nth seqs 1)]\n    (let [res \n     (cond\n   (= \\D a) (assoc {} :suit :diamond)\n\t (= \\H a) (assoc {} :suit :heart)\n\t (= \\C a) (assoc {} :suit :club)\n\t (= \\S a) (assoc {} :suit :spare))]\n     (cond\n         (= \\T b) (assoc res :rank 8)\n         (= \\J b) (assoc res :rank 9)\n\t (= \\Q b) (assoc res :rank 10)\n\t (= \\K b) (assoc res :rank 11)\n\t (= \\A b) (assoc res :rank 12)\n\t :else (assoc res :rank (- (Integer. (str b)) 2))))))", "problem": 128, "user": "4e7ada51535db169f9c796ae"}, {"code": "#(hash-map :suit ({\\D :diamond \\H :heart \\S :spade \\C :club} (first %)) :rank ((zipmap \"23456789TJQKA\" (range)) (second %)))", "problem": 128, "user": "4fc67081e4b0ee37620e1813"}, {"code": "(fn [[s r]]\n  {:suit \n    (case s\n      \\D :diamond\n      \\H :heart\n      \\C :club\n      \\S :spade)\n   :rank\n    (case r\n      \\T 8\n      \\J 9\n      \\Q 10\n      \\K 11\n      \\A 12\n      (- (int r) 50))})", "problem": 128, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "#(zipmap [:suit :rank] \n  (let[m {\\D :diamond \\H :heart \\S :spade \\C :club \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0}]\n    (map (fn[a](get m a)) %)))", "problem": 128, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn [[s r]]\n  (into\n    {}\n    [[:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} s)]\n     [:rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r)]]))", "problem": 128, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn\r\n  [s]\r\n  (let [\r\n        suit (get {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spade} (.substring s 0 1))\r\n        rank (get {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12} (.substring s 1 2))]\r\n   {:suit suit :rank rank}))", "problem": 128, "user": "4f18677d535d64f603146459"}, {"code": "(fn[card]  ((fn  uncard[mymap c]\n    (let [suit\n          {\\S :spade \\H :heart \\D :diamond \\C :club}\n          rank\n          {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n          f (first c) r (rest c)]\n      (cond\n       (nil? f) mymap\n       (contains? suit f) (uncard (assoc mymap :suit (get suit f)) r)\n       (contains? rank f) (uncard (assoc mymap :rank (get rank f)) r)\n       (= f \\0) (uncard mymap r)\n       :else \"ERROR\"))) {} card))", "problem": 128, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} s)\n   :rank ({\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r (- (int r) (int \\2)))})", "problem": 128, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [s]\n  { :suit ({\\H :heart \\D :diamond \\C :club \\S :spade} (first s)) :rank (.indexOf \"23456789TJQKA\" (str (second s))) }\n  )", "problem": 128, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(fn [[s r]]\n  {:suit ({\\H :heart \\S :spade \\D :diamond \\C :club} s)\n   :rank (.indexOf \"23456789TJQKA\" (int r))})", "problem": 128, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(fn [card]\n  (let [\n    ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n    suites {\\S :spade, \\H :heart, \\C :club, \\D :diamond} ]\n    (merge\n      (assoc {} :rank (ranks (second card)))\n      (assoc {} :suit (suites (first card))))))", "problem": 128, "user": "4fb2f9b2e4b081705acca294"}, {"code": "(fn [t] \n  {:suit \n   ({\\D :diamond \\H :heart \\C :club \\S :spade} \n    (first t))\n   :rank \n   ({\\2 0 \\3 1  \\4 2  \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8\n     \\J 9 \\Q 10 \\K 11 \\A 12} \n    (last t))})", "problem": 128, "user": "4fbacdbae4b081705acca2e5"}, {"code": "(fn [x]\n  (let [rank (fn [c] (count (take-while #(not= c %) \"23456789TJQK\")))] \n  (cond (= \\D (first x)) {:suit :diamond :rank (rank (second x))}\n        (= \\H (first x)) {:suit :heart :rank (rank (second x))}\n        (= \\C (first x)) {:suit :club :rank (rank (second x))}\n        (= \\S (first x)) {:suit :spade :rank (rank (second x))}\n        :else {:suit :diamond :rank 10})))", "problem": 128, "user": "4db883e1535d1e037afb2198"}, {"code": "(fn [[c n]] {:suit ({\\S :spade \\H :heart \\C :club } c :diamond) :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} n (- (int n) 50))} )", "problem": 128, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn [[x y]] \n     (let [ s { \\S :spade \\D :diamond \\H :heart \\C :club }\n            r { \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4  \\5 3 \\4 2  \\3 1 \\2 0 }]\n       (  hash-map  :suit (s x)  :rank (r y)   )))", "problem": 128, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn  [[suit rank]]\n  (let [ ranks {:2 0,:3 1,:4 2,:5 3,:6 4,:7 5,:8 6,:9 7,:T 8,:J 9,:Q 10,:K 11,:A 12}\n        suits {  :S :spade,:H :heart,:D :diamond,:C :club}\n\n        ]{:suit ((keyword (str suit)) suits) :rank ((keyword (str rank)) ranks)}))", "problem": 128, "user": "4fdb1860e4b05e33b9224f58"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :space} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn [s]\n  (zipmap [:suit :rank]\n    [ ({\\S :spade \\H :heart \\D :diamond \\C :club} (first s))\n      ( (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)) (second s))\n    ]))", "problem": 128, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [[s r]]\n  {\n    :suit ({\\S :spade, \\D :diamond, \\H :heart, \\C :club} s)\n    :rank (.indexOf (vec \"23456789TJQKA\") r)\n  })", "problem": 128, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club} s)\n   :rank (.indexOf \"23456789TJQKA\" (int r))})", "problem": 128, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "#(hash-map\n  :suit ((fn [s]\n          (cond (= s \\D) :diamond\n                (= s \\H) :heart\n                (= s \\C) :club\n                :else :spades))\n        (first %))\n  :rank ((fn [r]\n          (cond (= r \"A\") 12\n                (= r \"K\") 11\n                (= r \"Q\") 10\n                (= r \"J\") 9\n                (= r \"T\") 8\n                :else (- (read-string r) 2)))\n        (str (last %))))", "problem": 128, "user": "4ead2841535d7eef3080731e"}, {"code": "(fn [[s r]]\n  (let [suits {\\D :diamond \\S :spade \\H :heart \\C :club}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} ]\n        {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "(fn [s]\n  (letfn [(suit [c]\n            (cond (= c \"C\") :club (= c \"H\") :heart\n                  (= c \"D\") :diamond (= c \"S\") :spade))\n          (rank [c]\n            (cond\n             (= c \"T\") 8 (= c \"J\") 9 (= c \"Q\") 10 (= c \"K\") 11 (= c \"A\") 12\n             :else (- (int (first c)) (int (first \"2\")))))]\n    (into {} [[:suit (suit (subs s 0 1))] [:rank (rank (subs s 1 2))]])))", "problem": 128, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn[x] \n  {:suit \n  ({\\S :spade, \\H :heart, \\C :club, \\D :diamond} (first x)), \n:rank \n({\\A 12, \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \n  \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11}\n (second x))})", "problem": 128, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn recognize [[suit card]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (suits suit) :rank (ranks card)}))", "problem": 128, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(let [\n    suits { \"H\" :heart, \"D\" :diamond, \"C\" :club, \"S\" :spade }\n    ranks (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"])]\n  (apply hash-map (flatten\n    (for [s (keys suits) r ranks]\n      [(str s r) { :suit (suits s) :rank (.indexOf ranks r) }]))))", "problem": 128, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn [[s r]]{:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} s):rank(#(or({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)(- (int r) 50)))})", "problem": 128, "user": "4db016af838c48654951d9b9"}, {"code": "(fn parse-card [s]\r\n  (let [suit-map {\\D :diamond, \\H :heart, \\S :spade, \\C :club}\r\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7,\r\n                  \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\r\n    {:suit (suit-map (first s)), :rank (rank-map (second s))}))", "problem": 128, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "(fn [str]\n  (let [suit-map {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n     suitfn (fn [s] (get suit-map s))\n     rankfn (fn [s] \n       (cond \n         (= s \\T) 8\n         (= s \\J) 9\n         (= s \\Q) 10\n         (= s \\K) 11\n         (= s \\A) 12\n         true (- (Integer/parseInt (.toString s)) 2)\n       ))]\n    {:suit (suitfn (first str)) :rank (rankfn (second str))}\n  )\n)", "problem": 128, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn [card-str] {:suit (condp = (first card-str)\n   \\D :diamond\n   \\H :heart\n   \\C :club\n   \\S :spade\n   :else :invalid),\n   :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (second card-str))}\n)", "problem": 128, "user": "4fae4c11e4b081705acca248"}, {"code": "(fn [c]\n  (let [[s r] (seq c)]\n    {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} s)\n     :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)}))", "problem": 128, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "(fn  [[ x y]]\r\n  (let [suit {\\D :diamond \\H :heart \\C :club  \\S :spade}\r\n        rank (zipmap (map #( cond\r\n                           (= 10 %) \\T\r\n                           (= 11 %) \\J\r\n                           (= 12 %) \\Q\r\n                           (= 13 %) \\K\r\n                           (= 14 %) \\A\r\n                           :else (char (+ % 48)) ) (range 2 15)) (range))]\r\n    {:suit (suit x) :rank (rank y)}))", "problem": 128, "user": "4fb23582e4b081705acca28a"}, {"code": "#(let [ [a b] (seq %) ]\n  { :suit (cond\n            (= \\S a) :spade (= \\H a) :heart (= \\D a) :diamond\n            :e       :club)\n    :rank (cond\n            (= \\J b) 9 (= \\Q b) 10 (= \\K b) 11 (= \\A b) 12\n            (= \\T b) 8 :e (- (int b) 50))})", "problem": 128, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn [[suit rank]]\n  {:suit ({\\S :spade,\n           \\H :heart,\n           \\D :diamond,\n           \\C :club} suit)\n   :rank (if (Character/isDigit rank)\n           (- (Character/digit rank 10) 2)\n           ({\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} rank))})", "problem": 128, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "#(hash-map \r\n  :suit (get (hash-map \\S :spade, \\H :heart, \\D :diamond, \\C :club) (first (seq %)))\r\n  :rank (get (zipmap (seq \"23456789TJQKA\") (range 13)) (last (seq %))))", "problem": 128, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn [[s r]]\r\n  (let [suits {\\C :club\r\n               \\D :diamond\r\n               \\H :heart\r\n               \\S :spade}\r\n        ranks #(.indexOf (vec \"23456789TJQKA\") %)]\r\n  {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "4fabbb97e4b081705acca21d"}, {"code": "#(let [[a b] %] {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} a) :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} b)})", "problem": 128, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn cards [[s r]]\r\n    (let [suit ({\\S :spade, \\D :diamond, \\H :heart, \\C :club} s)\r\n          rank ((zipmap \"23456789TJQKA\" (range 0 13)) r)]\r\n         {:suit suit :rank rank}))", "problem": 128, "user": "4fea08a9e4b0547ebccb2484"}, {"code": "(fn card\n  [s]\n  (let [suit (first s) rank (last s)]\n    {:suit\n     ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n     :rank\n     ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank\n      (- ((comp #(- % (int \\0)) int) rank) 2))}))", "problem": 128, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn [cs]\n  (let [suitkey (read-string (apply str (cons \\: (take 1 (seq cs)))))\n        rankkey (read-string (apply str (cons \\: (drop 1 (seq cs)))))]\n    (conj {}\n      [:suit (suitkey\n               {:H :heart :D :diamond :C :club :S :spade})]\n      [:rank (rankkey\n            {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7\n             :T 8 :J 9 :Q 10 :K 11 :A 12})])))", "problem": 128, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn [[u a]]\n  (let [s (zipmap \"SHDC\" [:spade :heart :diamond :club])\n  r (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (s u) :rank (r a)}))", "problem": 128, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "(fn f [[s r]]\n  (let [n (- (int r) 50)]\n  {:suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} s) \n   :rank (if (<= 0 n 7) n (get {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r) )}))", "problem": 128, "user": "4faafccde4b081705acca209"}, {"code": "(fn [[suit rank]]\n  (let [rank-map (zipmap \"23456789TJQKA\" (range))\n        suit-map {\\S :spade \\H :heart \\D :diamond \\C :club}]\n    {:suit (suit-map suit)\n     :rank (rank-map rank)}))", "problem": 128, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank ((apply assoc {} (interleave \"23456789TJQKA\" (range))) r)})", "problem": 128, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn [[s r]]\r\n  {:suit ({\\D :diamond, \\H :heart,\r\n           \\C :club, \\S :spade} s)\r\n   :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4,\r\n           \\7 5, \\8 6, \\9 7, \\T 8, \\J 9,\r\n           \\Q 10, \\K 11, \\A 12} r)})", "problem": 128, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn [[suit rank]]\n   (let [s {\\D :diamond \\C :club \\H :heart \\S :spade}\n         r (zipmap \"23456789TJQKA\" (range 0 13))]\n  (assoc {} :suit (s suit) :rank (r rank))))", "problem": 128, "user": "4e95c771535dbda64a6f6b39"}, {"code": "(fn [s]\n  (hash-map \n    :suit\n    ({\\H :heart, \\D :diamond, \\C :club, \\S :spade} (first s))\n    :rank\n    ({\\A 12, \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5\n      \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11} (second s))))", "problem": 128, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn [x]\n  (let [suits {\\S :spade \\D :diamond \\H :heart \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]    \n  {:suit (suits (first x))\n   :rank (ranks (second x))}))", "problem": 128, "user": "4fde492be4b05e33b9224f8a"}, {"code": "(fn [[s r]]\n    {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n     :rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r) (- (Integer. (str r)) 2))})", "problem": 128, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn [c]\n  {:suit (case (first c) \\D :diamond \\C :club \\H :heart \\S :spade)\n   :rank (case (second c) \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)})", "problem": 128, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn [c]\n  (let [suit (get {\\S :spade \\H :heart \\D :diamond \\C :club} (first c))\n        r (second c)\n        rank (get {\\T 10 \\J 11 \\Q 12 \\K 13 \\A 14} r)\n        nrank (if (nil? rank) (Integer/parseInt (str r)) rank)]\n    {:suit suit :rank (- nrank 2)}))", "problem": 128, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn pcard [c]\n  (let [[s r] c\n        suits {\\C :club \\D :diamond \\H :heart \\S :spade}\n        ranks (zipmap (concat (map char (range 50 58))\n                              [\\T \\J \\Q \\K \\A])\n                      (range 13))]\n    {:suit (get suits s) :rank (get ranks r)}))", "problem": 128, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn [[s r]]\n  { :suit ({\\D :diamond \\H :heart \\C :club} s)\n    :rank ((into {} (map #(vec %&) \"23456789TJQKA\" (range))) r)\n  }\n)", "problem": 128, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn recognize-card [card]\n  (letfn [(rank [ch]\n            (condp = ch\n              \\T 8\n              \\J 9\n              \\Q 10\n              \\K 11\n              \\A 12\n              (- (int ch) 50)))]\n  {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} (first card))\n   :rank (rank (second card))}))", "problem": 128, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn cards [st]\n  (let [\n        suit {\\H :heart, \\D :diamond,\n              \\C :club, \\S :spade}\n        rank {\\2 0, \\3 1, \\4 2, \\5 3,\n              \\6 4, \\7 5, \\8 6, \\9 7,\n              \\T 8, \\J 9, \\Q 10, \\K 11,\n              \\A 12}\n       ]\n    (assoc {} :suit (suit (first (seq st)))\n           :rank (rank (second (seq st))))))", "problem": 128, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "#(let [[s r] (seq %)]\r\n  {:suit (condp = s\r\n            \\C :club \\D :diamond \\H :heart \\S :spade)\r\n   :rank (condp = r\r\n           \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\r\n           \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)})", "problem": 128, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn parse-cards\n  [card]\n  (let [suit (-> (first card)\n             (case\n                 \\H :heart\n                 \\D :diamond\n                 \\C :club\n                 \\S :spade))\n        val (second card)\n        rank (case val\n               \\A 12\n               \\K 11\n               \\Q 10\n               \\J 9\n               \\T 8\n               (- (int val) 50))]\n    {:suit suit \n     :rank rank}))", "problem": 128, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "(fn f[[s r]] \n  {:suit ({\\H :heart \\D :diamond \\C :club \\S :spade} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4db13ff51254ad5b4805fa68"}, {"code": "(fn [[sk rk]]\n  (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}] ; I am lazy...\n    {:suit (suits sk) :rank (ranks rk)}))", "problem": 128, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn [s] (let\n  [sel-suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n   sel-rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n   suit (sel-suit (first s))\n   rank (sel-rank (second s))]\n  (hash-map :suit suit, :rank rank)))", "problem": 128, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn\n  [[suit rank]]\n  (let [suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n        ranks (apply hash-map (mapcat #(vector (first (str (+ % 2))) %) (range 0 8)))\n        ranks (into ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12})\n        rank (ranks rank)] \n    {:suit suit :rank rank}))", "problem": 128, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "(fn [s] \n  (let [\n    ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n    suits {\\D :diamond \\S :spade \\H :heart \\C :club}]\n      (assoc {} :suit (suits (get s 0)) :rank (.indexOf ranks (get s 1)))))", "problem": 128, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn [[s r]]\r\n  (let [suits {\\D :diamond\r\n               \\H :heart\r\n               \\S :spade\r\n               \\C :club}\r\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6,\r\n               \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\r\n    {:suit (suits s)\r\n     :rank (ranks r)}))", "problem": 128, "user": "500159b3e4b0678c553fc419"}, {"code": "(fn [card]\n  (let [suit { \\S :spades, \\D :diamond, \\H :heart, \\C :club}\n        rank \"23456789TJQKA\"]\n  { :suit (suit (first card))\n    :rank (.indexOf rank (apply str (next card)))}))", "problem": 128, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "(fn [[b e]]\n  {:suit ({\\D :diamond \\H :heart \\C :club} b)\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \n           \\J 9 \\Q 10 \\K 11 \\A 12 } e)})", "problem": 128, "user": "4eb6d3ab535d7eef30807370"}, {"code": "#(let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n      ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n      [s r] %]\n  {:suit (get suits s) :rank (get ranks r)})", "problem": 128, "user": "500933a6e4b046cdb195e074"}, {"code": "(let [suits (zipmap \"DCSH\" [:diamond :club :spade :heart])\n      ranks (zipmap \"23456789TJQKA\" (range 0 13))]\n     (fn __ [[suit face]]\n       {:suit (get suits suit)\n        :rank (get ranks face)}))", "problem": 128, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn [card] (let [ranks (zipmap \"23456789TJQKA\" (range 13))\n                 suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n                 [s r] (seq card)]\n             {:suit (suits s), :rank (ranks r)}))", "problem": 128, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn [card]\n  {:suit (case (first card)\n           \\C :club\n           \\D :diamond\n           \\H :heart\n           \\S :spade)\n   :rank (case (second card)\n           \\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12)})", "problem": 128, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn [x] (let [a (first x) b (last x)]\n  { :suit (cond\n      (= a \\D) :diamond\n      (= a \\H) :heart\n      (= a \\C) :club\n      (= a \\S) :spades)\n    :rank (cond\n      (= b \\A) 12\n      (= b \\K) 11\n      (= b \\Q) 10\n      (= b \\J) 9\n      (= b \\T) 8\n      :else (- (Integer/parseInt (str b)) 2))\n  }))", "problem": 128, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "(fn [card]\n  {:suit ({\\H :heart, \\C :club, \\D :diamond, \\S :spade} (first card))\n   :rank ({\\2 0, \\3 1, \\4 2, \\5 3,  \\6 4,  \\7 5, \\8 6,\n           \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (second card))})", "problem": 128, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn[[s r]]\n   {:suit({\\D :diamond \\H :heart \\C :club}s)\n    :rank((zipmap[\\2\\3\\4\\5\\6\\7\\8\\9\\T\\J\\Q\\K\\A](range 13))r)})", "problem": 128, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "(fn [card]\n  {:suit ({\\S :spade \n    \t   \\H :heart \n  \t\t   \\D :diamond \n  \t\t   \\C :club} \n  \t\t  (first card))\n    :rank ({\\2 0\n    \t\t\\3 1\n    \t\t\\4 2\n    \t\t\\5 3\n    \t\t\\6 4\n    \t\t\\7 5\n    \t\t\\8 6\n    \t\t\\9 7\n    \t\t\\T 8\n    \t\t\\J 9\n    \t\t\\Q 10\n    \t\t\\K 11\n    \t\t\\A 12} (second card))})", "problem": 128, "user": "4fd8544be4b0dab7d829f390"}, {"code": "(fn [[s r]]\n  (let [suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} s)\n        rank (cond\n              (= r \\T) 8\n              (= r \\J) 9\n              (= r \\Q) 10\n              (= r \\K) 11\n              (= r \\A) 12\n              :else (- (int r) (int \\2)))]\n    {:suit suit, :rank rank}))", "problem": 128, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn [c]\n  {:suit ({\\H :heart, \\D :diamond, \\C :club, \\S :spade} (first c)),\n   :rank (first (first\n          (filter #(= (last c) (second %))\n           (map-indexed vector [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]))))})", "problem": 128, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn [c] (let [r (zipmap (seq \"23456789TJQKA\")(range 14))\r\n                s (zipmap (seq \"SHCD\") [:spade :heart :club :diamond])]\r\n            {:suit (s (get c 0)) :rank (r (get c 1))}))", "problem": 128, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn readcard [cstring]\n    (let [suitstring (first cstring)\n          rankstring (second cstring)]\n      (assoc\n          (assoc {} :suit\n             (cond (= suitstring \\C)\n                   :club\n                   (= suitstring \\D)\n                   :diamond\n                   (= suitstring \\H)\n                   :heart\n                   (= suitstring \\S)\n                   :spade))\n        :rank (cond (= rankstring \\A)\n                    12\n                    (= rankstring \\K)\n                    11\n                    (= rankstring \\Q)\n                    10\n                    (= rankstring \\J)\n                    9\n                    (= rankstring \\T)\n                    8\n                    :else\n                    (- (Integer/parseInt (str rankstring)) 2)))))", "problem": 128, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn [s]\r\n  ^{:doc \"128. Write a function which converts (for example) the                                                                                        \r\n  string \"SJ\" into a map of {:suit :spade, :rank 9}.\"}\r\n  (let [suits {\\C :club, \\D :diamond, \\H :heart, \\S :spade }\r\n        ranks (apply hash-map (interleave \"23456789TJQKA\" (range 13)))]\r\n    {:suit (suits (first s)) :rank (ranks (second s))}))", "problem": 128, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn[p]\n  (let [s (first p) r (second p)] \n    {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} s)\n      :rank \n      (cond \n        (= r \\T) 8 \n        (= r \\J) 9\n        (= r \\Q) 10\n        (= r \\K) 11\n        (= r \\A) 12\n        true (- (Integer/parseInt (str r)) 2))}))", "problem": 128, "user": "4ec64981535d6d7199dd36c7"}, {"code": "(into {}\n  (for [[s sname] [[\"S\" :spade] [\"H\" :heart] [\"C\" :club] [\"D\" :diamond]]\n        [r rank] (map list (concat (range 2 10) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range))]\n    [(str s r) {:suit sname :rank rank}]))", "problem": 128, "user": "50166470e4b052339a490e76"}, {"code": "(fn x [s]\r\n  (let [rank \"23456789TJQKA\"\r\n        suit {\"C\" :club \"H\" :heart \"D\" :diamond \"S\" :spade}]\r\n    [] {:suit (suit (subs s 0 1)) :rank (.indexOf rank (subs s 1) )})\r\n  )", "problem": 128, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn [code]\n  (let [[s r] (seq code)]\n    {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club } s), \n     :rank ((zipmap [\\2, \\3, \\4, \\5, \\6, \\7, \\8, \\9, \\T, \\J, \\Q, \\K, \\A] (range 0 13)) r) }))", "problem": 128, "user": "4dca8b6d535d5973398f9288"}, {"code": "(fn [c] (let [suit {\\D :diamond \\H :heart \\C :club \\S :spade} rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }] {:suit (suit (first c)) :rank (rank (last c))}))", "problem": 128, "user": "4ff76effe4b0678c553fc390"}, {"code": "(fn [x]\n  {:suit ({\\H :heart \\C :club \\D :diamond \\S :spade} (.charAt x 0))\n   :rank (.indexOf \"23456789TJQKA\" (.substring x 1))})", "problem": 128, "user": "5012aefce4b0c8732600222a"}, {"code": "(fn [[suit rank]] { :suit (\n      { \\H :heart\n        \\C :club\n        \\D :diamond\n        \\S :spade}\n      suit)\n    :rank (\n      { \\2 0  \\3 1  \\4 2  \\5 3\n        \\6 4  \\7 5  \\8 6  \\9 7\n        \\T 8  \\J 9  \\Q 10  \\K 11\n        \\A 12}\n      rank)})", "problem": 128, "user": "4fc50bcbe4b081705acca375"}, {"code": "#(let [s {\\D :diamond, \\H :heart, \\C :club , \\S :spades}\r\n       r (apply hash-map\r\n                (mapcat list\r\n                        (map (comp first str) (concat (range 2 10) \"TJQKA\"))\r\n                        (range)))]\r\n   {:suit (get s (first %))\r\n    :rank (get r (second %))})", "problem": 128, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn foo [c]\n  (let [suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n        ranks (->> (range 10)\n                   (map #(vector (str %) (- % 2)))\n                   (into {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}))\n        [suit rank] (map str (seq c))]\n       {:suit (suits suit) :rank (ranks rank)}))", "problem": 128, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "#(let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n       ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8,\n              \\J 9, \\Q 10, \\K 11, \\A 12}]\n  {:suit (suits (first %1)) :rank (ranks (last %1))})", "problem": 128, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn [x]\n  (reduce\n    #(assoc\n      %1\n      (if\n        (nil?\n          (get\n            #{\\S \\D \\H \\C}\n            %2\n          )\n        )\n        :rank\n        :suit\n      )\n      (get\n        {\\S :spades \\D :diamond \\H :heart \\C :club \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        %2\n      )\n    )\n    {}\n    (vec x)\n  )\n)", "problem": 128, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "#(let [s {\\D :diamond \\H :heart \\C :club \\S :spade}\n       r {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n       l (seq %)\n       a (first l)\n       b (second l)\n     ]\n{:suit (s a) :rank (r b)})", "problem": 128, "user": "5017eface4b02f523d7cc5e7"}, {"code": "(fn [s]\n  {:suit (case (first s)\n           \\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club)\n   :rank (case (second s)\n           \\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12)})", "problem": 128, "user": "500e91aae4b00fff93030f99"}, {"code": "(fn [s]\n  (let [pre-suit (first (re-seq #\"[H,D,S,C]\" s))\n        suit (cond\n              (= \"H\" pre-suit) :heart\n              (= \"D\" pre-suit) :diamond\n              (= \"S\" pre-suit) :spade\n              (= \"C\" pre-suit) :club)\n        pre-rank (read-string (first (re-seq #\"[K,Q,J,A,T,0-9]\" s))) ;; this needs to be converted to JUST the value.\n        rank (cond\n              (= pre-rank 'T) 8\n              (= pre-rank 'J) 9\n              (= pre-rank 'Q) 10\n              (= pre-rank 'K) 11\n              (= pre-rank 'A) 12\n              :else (- pre-rank 2))]\n    {:suit suit :rank rank}\n    ))\n;; to make this more efficient I could instead use maps like below\n\n;{\"H\" :heart \"D\" :diamond \"S\" :spade \"C\" :club}\n\n;{'T 8 'J 9 'Q 10 'K 11 'A 12}\n\n;; then just reference the map for each value.", "problem": 128, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "#(let [suits {\\D :diamond, \\H :heart, \\S :spade, \\C :club}\n       ranks (fn [ch] (.indexOf \"23456789TJQKA\" (str ch)))]\n   {:suit (suits (first %)) :rank (ranks (second %))})", "problem": 128, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "#(zipmap [:suit :rank]\n         (map (zipmap \"SHDC23456789TJQKA\"\n                      `(:spade :heart :diamond :club ~@(range)))\n              %))", "problem": 128, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "(fn [input]\r\n  (let [names {\\H :heart \\C :club \\D :diamond} \r\n        special_ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} \r\n        x (names (first input) \"u\") \r\n        y (special_ranks (last input) \r\n          (- (int (last input)) 50))]\r\n                {:suit x :rank y}\r\n\t)\r\n)", "problem": 128, "user": "4faa6184e4b081705acca1f1"}, {"code": "(fn [s]\n  {:suit (condp = (first s) \\H :heart \\S :spade \\D :diamond \\C :club)\n  :rank (condp = (second s) \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9\\Q 10 \\K 11 \\A 12)}\n)", "problem": 128, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "(fn f [pair]\n  {:suit ({\\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade} (first pair))\n   :rank ((zipmap \"23456789TJQKA\" (range 13)) (last pair))\n  })", "problem": 128, "user": "4fd2529ae4b04c3a95aa041f"}, {"code": "#(let [[c1 c2] (seq %)\n       suit (cond\n             (= \\D c1) :diamond\n             (= \\H c1) :heart\n             (= \\C c1) :club\n             (= \\S c1) :spade)\n       rank (cond\n             (= \\A c2) 12\n             (= \\K c2) 11\n             (= \\Q c2) 10\n             (= \\J c2) 9\n             (= \\T c2) 8\n             :else (- (int c2) 50))]\n   (array-map :suit suit  :rank rank))", "problem": 128, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn [x]\n  (let [[s r] x\n        suit (str s)\n        rank (str r)\n        suits {\"S\" :spade \"H\" :heart \"C\" :club \"D\" :diamond}\n        ranks (merge {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n                     (apply hash-map (interleave (map str (range 2 10)) (range 0 8))))]\n    (hash-map :suit (suits suit) :rank (ranks rank))\n    ))", "problem": 128, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(fn string->card [string]\n  (let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        ranks { \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits (first string)) :rank (ranks (second string))}))", "problem": 128, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn __ [s]\n    (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n          ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n         {:suit (suits (first s)) :rank (ranks (second s))}))", "problem": 128, "user": "4fa719c0e4b081705acca1bf"}, {"code": "(fn [s]\n  (letfn [\n    (getSuit [x]\n      (cond \n        (= x \\S) :spade\n        (= x \\H) :heart\n        (= x \\D) :diamond\n        (= x \\C) :club\n      ) \n    )\n    (getNumber [x]\n      (. [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n        indexOf\n        x)\n    )\n  ]\n  {:suit (getSuit (first s)), :rank (getNumber (second s))}\n  )\n)", "problem": 128, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn [card]\n  (let [ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \n               \\7 5 \\8 6 \\9 7 \\T 8 \n               \\J 9 \\Q 10 \\K 11 \\A 12}\n        suits {\\S :spade \\H :heart \n               \\D :diamond \\C :club}]\n    {:suit (suits (first card))\n     :rank (ranks (second card))}))", "problem": 128, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn [s]\r\n  (let [types {\\D :diamond , \\H :heart , \\C :club, \\S :spades} cards [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\r\n  (zipmap [:suit :rank] [(get types (first s)) (.indexOf cards (second s))])))", "problem": 128, "user": "5028bce0e4b01614d1633ffb"}, {"code": "(fn [card]\n  (let [[s n] (map str (seq card)),\n     ranks (merge {\"A\" 12, \"K\" 11, \"Q\" 10, \"J\" 9, \"T\" 8} \n                   (apply hash-map (interleave (map str (range 2 10)) (range 0 8))))\n     suits {\"D\" :diamond, \"S\" :spade, \"C\" :club, \"H\" :heart}]\n   {:suit (get suits s) :rank (get ranks n)}\n))", "problem": 128, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn [[s r]]\n             {:suit ({\\D :diamond\n                      \\H :heart\n                      \\S :spade\n                      \\C :club} s)\n              :rank (.indexOf (seq \"23456789TJQKA\") r)})", "problem": 128, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [card]\n  (let [suit {\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club}\n        rank {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6\n              \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n        cards (map str (seq card))]\n    {:suit (suit (first cards)) :rank (rank (second cards))}))", "problem": 128, "user": "501dfd54e4b051153f3b5b80"}, {"code": "(fn [s]\n  (let [suit {\\D :diamond,\n              \\C :club,\n              \\H :heart,\n              \\S :spade},\n        rank (apply hash-map\n               (flatten\n                (map-indexed\n                  #(vector %2 %1)\n                  \"23456789TJQKA\")))]\n    { :suit (get suit (first s)),\n      :rank (get rank (second s)) }))", "problem": 128, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn card [s]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n\t\t\t\tranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n\t\t\t\tsuit (first (seq s))\n\t\t\t\trank (last (seq s))]\n\t\t\t\t{:suit (suits suit) :rank (ranks rank)}))", "problem": 128, "user": "501c1492e4b086d93747d180"}, {"code": "(fn [c] (let [[s r] c] { :suit (case s \\D :diamond \\H :heart \\C :club \\S :spade) :rank (.indexOf (into (apply vector (map char (range 50 58))) [\\T \\J \\Q \\K \\A]) r)}))", "problem": 128, "user": "5032b398e4b00c0952a257eb"}, {"code": "(fn [s]\n   (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n         ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11  \\A 12}]\n     (hash-map :suit (get suits (first s)) :rank (get ranks (reduce str (rest s)))  )))", "problem": 128, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "(fn [[s r]]\n    {:suit (case s \\D :diamond \\H :heart\n                 \\C :club \\S :spades)\n     :rank ((zipmap \"23456789TJQKA\" (range 13)) r)})", "problem": 128, "user": "4dada16fc9a9d6ed2699dc57"}, {"code": "(fn [str]\n  {:suit \n    (case (first str)\n      \\D :diamond\n      \\H :heart\n      \\S :spade\n      \\C :club)\n   :rank\n    (let [rank (second str) rankn (- (int rank) (int \\0))]\n      (if (and (<= 2 rankn) (<= rankn 9))\n        (- rankn 2)\n        (case rank\n          \\T  8\n          \\J  9\n          \\Q 10\n          \\K 11\n          \\A 12)))})", "problem": 128, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "#(->> %\n  (map (zipmap \"23456789TJQKASHDC\" \n    `[~@(range 0 13) :spade :heart :diamond :club])) \n  (zipmap [:suit :rank]))", "problem": 128, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [[s r]]\n  (let [ss { \\D :diamond \\H :heart \\C :club \\S :spade }\n        rs { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} ]\n  {:suit (ss s) :rank (rs r)}))", "problem": 128, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn [[x y]] (let [s {\\H :heart \\C :club \\D :diamond \\S :spade}\nr {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} ]\n  {:suit (s x) :rank (r y)}))", "problem": 128, "user": "503917a0e4b088a6a14ca763"}, {"code": "(fn [[suit rank]]\n  (let [suits {\\C :club\n               \\D :diamond\n               \\H :heart\n               \\S :spade}\n        ranks {\\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12}]\n    (hash-map :suit\n              (get suits suit)\n              :rank\n              (get ranks rank))))", "problem": 128, "user": "5014754de4b094324338f8e5"}, {"code": "(fn x  [ [s r] ]\n  {:suit ((zipmap \"SHDC\" [:spade :heart :diamond :club]) s)\n   :rank ((zipmap \"23456789TJQKA\" \n                  (range 13)) r)})", "problem": 128, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn [[a b]]\r\n          (let [get-suit (fn get-suit [a] (cond (= a \\D) :diamond (= a \\H) :heart (= a \\C) :club (= a \\S) :spades))\r\n                get-rank-figures-case (fn get-rank-figures-case [b] (- (int b) 50))\r\n                get-rank (fn get-rank [b] (cond (= b \\A) 12 (= b \\K) 11 (= b \\Q) 10 (= b \\J) 9 (= b \\T) 8 :else (get-rank-figures-case b) ))]\r\n           {:suit (get-suit a) :rank (get-rank b)} ))", "problem": 128, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "problem": 128, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn [[suit rank]]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rank (or ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} rank) \n                 (- (Integer/parseInt (str rank)) 2))]\n   {:suit (suits suit) :rank rank}))", "problem": 128, "user": "502d387fe4b0d96a44ab202f"}, {"code": "(fn [[s r]]\n            (let [suits {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n                  ranks (vec \"23456789TJQKA\")]\n    \t\t{:suit (suits s), :rank (.indexOf ranks r)}))", "problem": 128, "user": "50293245e4b08353e5d459cf"}, {"code": "(fn [c]\n  (let [r {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" \n           5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9\n            \"Q\" 10 \"K\" 11 \"A\" 12}\n        s {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}]\n    {:suit (s (.substring c 0 1)) :rank (r (.substring c 1))}))", "problem": 128, "user": "5012ec0ae4b0c87326002230"}, {"code": "#(let [\n   colors {\\H :heart \\D :diamond \\C :club \\S :spade}\n   ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \n          \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n   inp (vec (seq %))\n   s (inp 0)\n   r (inp 1)\n   rank (ranks r)\n   suit (colors s)\n   ]\n   {:suit suit :rank rank})", "problem": 128, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "#(zipmap \n  [:suit :rank] \n  [({\\H :heart \\S :spade \\D :diamond \\C :club} (first %)) \n    ((zipmap \n      (concat (range 2 10) '(36 26 33 27 17)) \n      (range 13)) \n     (- (int (last %)) 48))])", "problem": 128, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "#(let [[s r] %]\r\n  { :suit ( {\\D :diamond \\H :heart \\C :club \\S :spade} s)\r\n\t:rank \r\n\t\t({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)\t\t\r\n\t}\t\r\n\t)", "problem": 128, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "(fn [[s r]] \n  {:suit ((zipmap \"SHCD\" [:spade :heart :club :diamond]) s)\n\t:rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn [card]\r\n  (let [suites {:S :spade :H :heart :D :diamond :C :club}\r\n        ranks  {:2 0  :3 1  :4 2  :5 3\r\n                :6 4  :7 5  :8 6  :9 7\r\n                :T 8  :J 9  :Q 10 :K 11\r\n                :A 12}\r\n         [i j] (map #(keyword (str %)) (seq card))]\r\n    {:suit (suites i) :rank (ranks j)}))", "problem": 128, "user": "4dc97aec535d5973398f9284"}, {"code": "(fn [[suit rank]]\n  {:suit (case suit\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (case rank\n           \\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12)})", "problem": 128, "user": "50435852e4b034ff00315d22"}, {"code": "(fn asdf [x] {:suit (cond\n                       (= \\C (first x)) :club\n                       (= \\H (first x)) :heart\n                       (= \\D (first x)) :diamond\n                       (= \\S (first x)) :spade\n                       )\n               \n               \n               :rank (cond\n                (= \\2 (second x)) 0\n                (= \\3 (second x)) 1\n                (= \\4 (second x)) 2\n                (= \\5 (second x)) 3\n                (= \\6 (second x)) 4\n                (= \\7 (second x)) 5\n                (= \\8 (second x)) 6\n                (= \\9 (second x)) 7\n                (= \\T (second x)) 8\n                (= \\J (second x)) 9\n                (= \\Q (second x)) 10\n                (= \\K (second x)) 11\n                (= \\A (second x)) 12\n                :else \"crap\"\n                )})", "problem": 128, "user": "5012036ce4b0a040369c12f4"}, {"code": "(fn getsuitrank [card]\r\n  (let [suitmap {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\r\n        rankmap {\"A\" 12 \"K\" 11 \"Q\" 10 \"J\" 9 \"T\" 8}\r\n        suitstr (-> card (get 0) str)\r\n        rankstr (-> card (get 1) str)\r\n        suit (suitmap suitstr)\r\n        rank (rankmap rankstr)\r\n        rank (if (nil? rank) (- (read-string rankstr) 2) rank)]\r\n    {:suit suit :rank rank}))", "problem": 128, "user": "4fb266a5e4b081705acca28c"}, {"code": "(fn [[s r]]\r\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\r\n   :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r (- (int r) 50))})", "problem": 128, "user": "50479524e4b0371827a27bc4"}, {"code": ";(let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n;      ranks #(.indexOf (vec \"23456789TJQKA\") %)]\n;  (fn [[s r]] {:suit (suits s) :rank (ranks r)}))\n\n(fn parse-card [card]\n  (let [comps (map str (vec card))\n        suit-map (zipmap [\"D\" \"C\" \"H\" \"S\"] [:diamond :club :heart :spade])\n        digit-map (zipmap [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] (range 13))]\n    (hash-map :suit (suit-map (first comps)) :rank (digit-map (last comps)))))", "problem": 128, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "(fn [c]\n   (let [ suits { \\D :diamond \\H :heart \\C :club \\S :spade }\n          rank  [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n          s (first c)\n          r (second c)\n        ]\n   { :suit (suits s)\n     :rank (first (keep-indexed #(if (= %2 r) %1) rank))\n    }))", "problem": 128, "user": "5046b003e4b011c5dfee7727"}, {"code": "(fn [card]\n   (let [suits {\\H :heart, \\D :diamond, \\S :spade, \\C :club}\n         ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n     {:suit (suits (get card 0)), :rank (.indexOf ranks (get card 1))}\n     ))", "problem": 128, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "#(zipmap [:suit :rank] (vector \n  ((zipmap [\\D \\H \\C \\S] [:diamond :heart :club :spade]) (first %))\n  ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)) (second %))))", "problem": 128, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn b [n]\n   (assoc (assoc {} :suit (keyword (case (str (first n))\n                                                         \"S\" :spade\n                                                         \"C\" :club\n                                                         \"D\" :diamond\n                                                         \"H\" :heart)))\n                   :rank ({2 0 3 1 4 2 5 3 6 4 7 5 8 6 9 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (if (Character/isDigit (last n))\n                                                                                              (Integer/valueOf (str (last n)))\n                                                                                              (str (last n))))))", "problem": 128, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})", "problem": 128, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn [[s r]]\r\n  {:suit\r\n  ({\\H :heart, \\C :club, \\S :spade, \\D :diamond} s)\r\n  :rank\r\n  ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r)})", "problem": 128, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn [[s r]]\n  (let [sm {\\S :spade, \\D :diamond, \\H :heart, \\C :club}\n        rm {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9,\n            \\Q 10, \\K 11, \\A 12}]\n      {:suit (sm s), :rank (rm r)}))", "problem": 128, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "(fn [card]\n   (let [[suit rank] (seq card)]\n     {:suit (case suit\n              \\D :diamond\n              \\C :club\n              \\H :heart\n              \\S :spade)\n      :rank (case rank\n              \\A 12\n              \\K 11\n              \\Q 10\n              \\J 9\n              \\T 8\n              (- (read-string (str rank)) 2))\n              }\n     ))", "problem": 128, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn [[s r]] (let [s ({\\H :heart, \\D :diamond, \\C :club, \\S :spade} s)\n                  r (.indexOf (seq \"23456789TJQKA\") r)]  \n  {:suit s, :rank r}))", "problem": 128, "user": "504e397ee4b0f6ff3350c485"}, {"code": "(fn [[f s]]\n  (let [suits {\\S :spade\n                \\D :diamond\n                \\C :club\n                \\H :heart}\n        ranks { \\2 0\n                \\3 1\n                \\4 2\n                \\5 3\n                \\6 4\n                \\7 5\n                \\8 6\n                \\9 7\n                \\T 8\n                \\J 9\n                \\Q 10\n                \\K 11\n                \\A 12}]\n    {:suit (suits f) :rank (ranks s)}))", "problem": 128, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn [s]\r\n    (let [suits {\\S :spade,\r\n                  \\C :club,\r\n                  \\H :heart,\r\n                  \\D :diamond}\r\n          ranks {\\A 12, \\K 11, \\Q 10, \\J 9, \\T 8, \\9 7, \\8 6\r\n                 \\7 5, \\6 4, \\5 3, \\4 2, \\3 1, \\2 0}\r\n          [sc sr] (seq s)]\r\n      {:suit (suits sc), :rank (ranks sr)}))", "problem": 128, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "(fn [s]\n  {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8\n           \\J 9 \\Q 10 \\K 11 \\A 12} (second s))})", "problem": 128, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [[suit rank]]\n      {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} suit)\n       :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)})", "problem": 128, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn [card]\n  (let [suit {\\D :diamond \\C :club \\H :heart \\S :spade}\n        rank (into {} (map-indexed #(vector %2 %) \"23456789TJQKA\"))]\n    {:suit (suit (first card)) :rank (rank (second card))}))", "problem": 128, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [[a b]]\n  {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :space} a),\n    :rank (.indexOf (vec \"23456789TJQKA\") b)})", "problem": 128, "user": "50435689e4b034ff00315d21"}, {"code": "(fn card-reader\n  [card]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        [s r & rest] card]\n    {:suit (get suits s)\n     :rank (if (contains? ranks r)\n             (get ranks r)\n             (-> r str Integer/parseInt (- 2)))}))", "problem": 128, "user": "4edfb618535d10e5ff6f5343"}, {"code": "(fn [[s r]]\n  {:suit ({\\H :heart, \\D :diamond, \\C :club, \\S :spade} s),\n   :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \n           \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r)})", "problem": 128, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "#(zipmap [:suit :rank] (map (zipmap \"SHDC23456789TJQKA\"\n                                     `(:spade :heart :diamond :club ~@(range)))\n                             %))", "problem": 128, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn [card] \n  (let [suits {\\H :heart \\D :diamond \\C :club \\S :spade}\n        ranks \"23456789TJQKA\"]\n        {:suit (suits (first card)) :rank (.indexOf ranks (str (fnext card)))}))", "problem": 128, "user": "503e7f06e4b06c4e0e1fa268"}, {"code": "(fn [[s r]]\n {:suit \n  ({\\S :spade\n    \\H :heart\n    \\D :diamond\n    \\C :club} s)\n  :rank\n   ((zipmap \"23456789TJQKA\"\n     (range)) r)\n })", "problem": 128, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "(fn [s]\r\n  {:suit (get {\"C\" :club  \"S\" :spade\r\n               \"H\" :heart \"D\" :diamond}\r\n              (str (first s)))\r\n   :rank \r\n   (let [v (get {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\r\n              (str (nth s 1)))]\r\n      (if v v (- (Integer/parseInt (str (nth s 1))) 2)))\r\n})", "problem": 128, "user": "5050b107e4b063148f524126"}, {"code": "(let \n  [\n    suits {\"D\" :diamond\n  \"H\" :heart\n  \"C\" :club\n  \"S\" :spade}\n  ranks \n  {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n  find-rank (fn [x] \n    (let [r (ranks x)]\n(or r (- (read-string x) 2))))\nconvert \n(fn [s] \n  (let \n    [s2 \n      (re-seq #\"(.)(.*)\" s) \nst (suits ((first s2) 1)) \nr (find-rank ((first s2) 2))]\n{:suit st :rank r}))\n]\n(fn [x] (convert x)))", "problem": 128, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "#(into ({\\D {:suit :diamond} \\H {:suit :heart} \\C {:suit :club} \\S {:suit :spade}} (first %)) ({\\2 {:rank 0} \\3 {:rank 1} \\4 {:rank 2} \\5 {:rank 3} \\6 {:rank 4} \\7 {:rank 5} \\8 {:rank 6} \\9 {:rank 7} \\T {:rank 8} \\J {:rank 9} \\Q {:rank 10} \\K {:rank 11} \\A {:rank 12}} (last %)))", "problem": 128, "user": "4e8a880b535d65386fec210d"}, {"code": "(fn [X]\n   (assoc {} :suit \n     (cond\n       (= (first X) \\D) :diamond\n       (= (first X) \\H) :heart\n       (= (first X) \\C) :club\n       (= (first X) \\S) :spade\n       :else :mystery)\n     :rank \n      (cond \n         (= (second X) \\2) 0\n         (= (second X) \\3) 1\n        (= (second X) \\4) 2\n        (= (second X) \\5) 3\n        (= (second X) \\6) 4\n        (= (second X) \\7) 5\n         (= (second X) \\8) 6\n       (= (second X) \\9) 7\n         (= (second X) \\T) 8\n       (= (second X) \\J) 9\n       (= (second X) \\Q) 10\n       (= (second X) \\K) 11\n       (= (second X) \\A) 12\n       :else :mystery)))", "problem": 128, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn [[s r]]\n  (let [suit (condp = s\n               \\C :club\n               \\D :diamond\n               \\H :heart\n               \\S :spade)\n        rank (condp = r\n               \\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12)]\n    {:suit suit, :rank rank}))", "problem": 128, "user": "50586354e4b06522596eba78"}, {"code": "(fn rc [s]\r\n\r\n  {:suit\r\n   (get \r\n    {\\D :diamond \\H :heart \\S :spade \\C :club}\r\n    (first s))\r\n   :rank\r\n   (get \r\n    {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\r\n    (second s))})", "problem": 128, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn [card]\n  (let [suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}\n        ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T\n               \\J \\Q \\K \\A]]\n    {:suit (get suits (first card))\n     :rank (.indexOf ranks (second card))}))", "problem": 128, "user": "505bd09fe4b032b709c81373"}, {"code": "(fn [s]\n  (let [suits {\\S :spade, \\D :diamond, \\H :heart, \\C :club}\n        ranks {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    (-> {}\n        (assoc :suit (suits (first s)))\n        (assoc :rank (if (ranks (second s))\n                         (ranks (second s))\n                         (- (int (second s)) (int \\2)))))))", "problem": 128, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn [s]\n  (-> {}\n      (assoc :suit (condp = (first s)\n                       \\S :spade\n                       \\H :heart\n                       \\D :diamond\n                       \\C :club))\n      (assoc :rank (- (condp = (second s)\n                        \\T 10\n                        \\J 11\n                        \\Q 12\n                        \\K 13\n                        \\A 14\n                        (- (int (second s)) (int \\0)))\n                      2))\n      ))", "problem": 128, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn [st]\n    (let [rnk {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n          suit {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n          s (str (nth st 0))\n          r (str (nth st 1)) ]\n    { :suit (get suit s) \n      :rank (get rnk r)\n    }))", "problem": 128, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn [card]\n  (let [suit (first (clojure.string/split card #\"\\B\"))\n        rank (second (clojure.string/split card #\"\\B\"))\n        smap (cond (= \"D\" suit) {:suit :diamond}\n                   (= \"C\" suit) {:suit :club}\n                   (= \"H\" suit) {:suit :heart}\n                   (= \"S\" suit) {:suit :spade})\n        rmap (cond (= \"A\" rank) {:rank 12}\n                   (= \"K\" rank) {:rank 11}\n                   (= \"Q\" rank) {:rank 10}\n                   (= \"J\" rank) {:rank 9}\n                   (= \"T\" rank) {:rank 8}\n                   :else {:rank (- (read-string rank) 2)})]\n\n    (merge smap rmap)))", "problem": 128, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "#(let [s {\\D :diamond \\S :spades \\C :club \\H :heart}\n          m (apply hash-map (interleave \"23456789TJQKA\" (range)))]\n            {:suit (s (first %))\n             :rank (m (second %))})", "problem": 128, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "(fn [x]\n  (let [suits {\"D\" :diamond \"S\" :spades \"H\" :heart \"C\" :club}\n        ranks {\"A\" 12, \"J\" 9, \"K\" 11, \"Q\" 10, \n               \"2\" 0, \"3\" 1, \"4\" 2, \"T\" 8, \"5\" 3, \n               \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7}]\n    {:suit (suits (str (get x 0))) :rank (ranks (str (get x 1)))}))", "problem": 128, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn parse-card [card]\n  (letfn [(get-suit [s] (cond (= \"D\" s) :diamond\n                              (= \"H\" s) :heart\n                              (= \"C\" s) :club\n                              (= \"S\" s) :spade))\n          (get-rank [r] (cond (= \"2\" r) 0\n                              (= \"3\" r) 1\n                              (= \"4\" r) 2\n                              (= \"5\" r) 3\n                              (= \"6\" r) 4\n                              (= \"7\" r) 5\n                              (= \"8\" r) 6\n                              (= \"9\" r) 7\n                              (= \"T\" r) 8\n                              (= \"J\" r) 9\n                              (= \"Q\" r) 10\n                              (= \"K\" r) 11\n                              (= \"A\" r) 12))]\n    (let [[suit rank] (map str (seq card))]\n      {:suit (get-suit suit) :rank (get-rank rank)})))", "problem": 128, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn [[x y]] (conj {} [:rank (case y \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 (- (int y) 50))] [:suit (case x \\C :club \\D :diamond \\H :heart \\S :spade)]))", "problem": 128, "user": "4f045946535dcb61093f6bba"}, {"code": "(fn [s]\n  (let [suit (first s) rank (second s)]\n    {:suit (condp = suit\n             \\S :spade\n             \\H :heart\n             \\D :diamond\n             \\C :club)\n     :rank (if (Character/isDigit rank)\n             (- (int rank) (int \\0) 2)\n             (condp = rank\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12))}))", "problem": 128, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "(fn [cstr]\n  (let [[suit-ltr rank-ltr] cstr\n        suit (condp = suit-ltr\n               \\S :spade\n               \\H :heart\n               \\D :diamond\n               \\C :club)\n        rank (condp = rank-ltr\n               \\A 12\n               \\K 11\n               \\Q 10\n               \\J 9\n               \\T 8\n               (- (Integer/valueOf (str rank-ltr)) 2))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "4efec33f535dcb61093f6a2a"}, {"code": "(fn [[s r]]\n  (let [ss (zipmap \"SHDC\" [:spade :heart :diamond :club])\n         rs (zipmap \"23456789TJQKA\" [0 1 2 3 4 5 6 7 8 9 10 11 12])]\n      {:suit (ss s) :rank (rs r)}))", "problem": 128, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn [s]\n  (let [suits {\\C :club \\D :diamond \\H :heart \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (hash-map :suit (suits (first s)) :rank (ranks (second s)))))", "problem": 128, "user": "5060d137e4b0dc10a69545a0"}, {"code": "(fn [s]\n    (let [suits {\\C :club, \\H :heart, \\D :diamond, \\S :spade}\n          ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7,\n                 \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n      (array-map :suit (suits (first s)) :rank (ranks (second s)))))", "problem": 128, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "#(\n  apply hash-map\n  (concat\n  (list :suit (get {\\D :diamond \\H :heart \\S :spade \\C :club} (first %)))\n  (list :rank (get {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0} (second %)))\n))", "problem": 128, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn\r\n  [x]\r\n  (let [cs (seq x)\r\n        [s r] cs] \r\n      (hash-map \r\n      :suit (cond\r\n              (= s \\D) :diamond\r\n              (= s \\H) :heart\r\n              (= s \\C) :club\r\n              (= s \\S) :spade)      \r\n      :rank (cond\r\n              (= r \\2) 0\r\n              (= r \\3) 1\r\n              (= r \\4) 2\r\n              (= r \\5) 3\r\n              (= r \\6) 4  \r\n              (= r \\7) 5  \r\n              (= r \\8) 6\r\n              (= r \\9) 7\r\n              (= r \\T) 8\r\n              (= r \\J) 9\r\n              (= r \\Q) 10\r\n              (= r \\K) 11  \r\n              (= r \\A) 12))))", "problem": 128, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn [card]\n  (let [suits {\"D\" :diamond \"S\" :spade \"C\" :club \"H\" :heart}\n        cards  [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n        ranks (apply assoc {} (interleave cards (range 0 13)))\n        suit_mark (str (first (seq card)))\n        rank_mark (str (last  (seq card)))]\n    {:suit (get suits suit_mark) :rank (get ranks rank_mark) }))", "problem": 128, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn [card]\n          (let [ranks (zipmap \"23456789TJQKA\" (range 13))\n                      suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n                      [s r] (seq card)]\n            {:suit (suits s), :rank (ranks r)}))", "problem": 128, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "(fn [[s r]] \n  {  :suit\n   \t(cond\n   \t(= s \\D) :diamond\n   \t(= s \\H) :heart\n   \t(= s \\C) :club\n   \t(= s \\S) :spade\n\t),\n   \t:rank\n   \t((zipmap \"23456789TJQKA\" (range)) r)\n  }\n)", "problem": 128, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [st]\n  (let [suits {:D :diamond :H :heart :C :club :S :spade}\n        ranks {:2 0, :3 1, :4 2, :5 3, :6 4, :7 5, :8 6, :9 7, :T 8, :J 9, :Q 10, :K 11 :A 12}\n        s (keyword (subs st 0 1))\n        r (keyword (subs st 1))]\n    (assoc {}  :rank (ranks r) :suit (suits s))))", "problem": 128, "user": "506f1e12e4b09350ab4199f9"}, {"code": "#(let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n       ranks {\\2 0, \\3 1 \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7,\n              \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits (first (seq %))) :rank (ranks (second (seq %)))})", "problem": 128, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn [[s r]]\n    {:suit ({\\D :diamond \\H :heart \\C :club} s)\n     :rank (if (Character/isDigit r)\n                (- (int r) (int \\0) 2)\n                ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r))})", "problem": 128, "user": "50657775e4b0deb876850599"}, {"code": "(fn [s] \n  (let [ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n      suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n      firstChar (.charAt s 0)\n      secondChar (.charAt s 1)]\n{ :suit (suits firstChar) :rank (ranks secondChar) }))", "problem": 128, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "(fn [x]  (assoc (assoc {} :suit ({\"D\" :diamond \"C\" :club \"H\" :heart \"S\" :spade }  (.substring  x 0 1) )) :rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12 }  (.substring  x 1 ) )  ))", "problem": 128, "user": "50463347e4b011c5dfee771e"}, {"code": "#(let [suit-map \n  (apply hash-map \n    (interleave [\\D \\H \\C \\S] [:diamond :heart :club :spade]))\n       rank-map (apply hash-map \n         (interleave [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13)))]\n  {:suit (suit-map (first %))\n   :rank (rank-map (second %))})", "problem": 128, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "(fn [[s r]]\n  (let\n    [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n     ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n    (hash-map :suit (get suits s) :rank (get ranks r))))", "problem": 128, "user": "50645e12e4b007509339a58a"}, {"code": "(fn [[s r :as x]]\n    {:suit ({\\S :spade \\C :club \\D :diamond \\H :heart} s),\n     :rank ( .indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] r)\n    }\n)", "problem": 128, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn [[s r]] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s) :rank (.indexOf (seq \"23456789TJQKA\") r)})", "problem": 128, "user": "4eb404ba535d7eef3080735a"}, {"code": "(fn parse-card [s]\n  (let [suits {\\D :diamond, \\H :heart, \\S :spade, \\C :club}\n        ranks \"23456789TJQKA\"\n        [suit rank] s]\n    {:suit (suits suit)\n     :rank (.indexOf ranks (int rank))}))", "problem": 128, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [card]\n  (let [[suit rank] (seq card)]\n    {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} suit)\n     :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8, \\9 7, \\8 6, \\7 5, \\6 4, \\5 3, \\4 2, \\3 1, \\2 0} rank)}))", "problem": 128, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "(fn parse-cards-spec [[suit rank]]\n  (let [suits {\\D :diamond, \\S :spade, \\H :heart, \\C :club}\n        ranks (into {} (map vector \"23456789TJQKA\" (range)))]\n    {:suit (suits suit), :rank (ranks rank)}))", "problem": 128, "user": "50763574e4b0a894bb95bf3d"}, {"code": "(fn [[suit rank]]\n  (let [suits {\\D :diamond \\H :heart\n               \\C :club    \\S :spade}\n        ranks (zipmap \"23456789TJQKA\" (range))]\n    {:rank (ranks rank)\n     :suit (suits suit)}))", "problem": 128, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r (- (int r) 50))})", "problem": 128, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn [s]\n  {:suit ({\\S :space \\H :heart \\D :diamond \\C :club} (first s))\n   :rank ({\\A 12,\\2 0,\\3 1,\\4 2,\\5 3,\\6 4,\\7 5,\\8 6,\\9 7,\\T 8,\\J 9,\\Q 10,\\K 11} (second s))})", "problem": 128, "user": "507437c2e4b054001656acd0"}, {"code": "#(let [[s r] (seq %)]\n    {:suit ({\\S :spade\n             \\H :heart\n             \\D :diamond\n             \\C :club} s)\n     :rank ({\\2 0 \n             \\3 1\n             \\4 2\n             \\5 3\n             \\6 4\n             \\7 5\n             \\8 6\n             \\9 7\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12} r)})", "problem": 128, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn [c]\n  {:suit ({\\D :diamond \\H :heart\n    \\C :club \\S :spade} (first c))\n  :rank\n  ({\\2 0 \\3 1 \\4 2 \\5 3\n    \\6 4 \\7 5 \\8 6 \\9 7\n    \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second c))})", "problem": 128, "user": "507a9b29e4b08327cd804a6e"}, {"code": "#(assoc {} :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first %)) :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last %) (- (int (last %)) (int \\2))))", "problem": 128, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn [c] {:suit ({\\S :spade \\H :heart \\C :club \\D :diamond} (first c)),\n  :rank ((zipmap \"23456789TJQKA\" (range)) (second c))})", "problem": 128, "user": "505d4b21e4b0e6aca564be07"}, {"code": "(fn [s] (let [suits {\"H\" :heart\n                      \"C\" :club\n                      \"D\" :diamond\n                      \"S\" :spade}\n               cards \"23456789TJQKA\"]\n           {:suit (suits (str (first s))) :rank (.indexOf cards (str (second s)))}))", "problem": 128, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn sc [[suit rank]]\n  (let [s ((keyword (str suit)) {:D :diamond :H :heart :S :spade :C :club})\n\t\tr (if-let [high-suit ((keyword (str rank)) {:T 8 :J 9 :Q 10 :K 11 :A 12})]\n           high-suit\n           (- (Integer/parseInt (str rank)) 2))]\n  \t\t(assoc '{} :suit s :rank r)))", "problem": 128, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn [s] {:suit (case (str (first s)) \"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club) :rank (.indexOf \"23456789TJQKA\" (str (last s)))})", "problem": 128, "user": "50807940e4b01a93d3f38e44"}, {"code": "(fn [s]\n             (let [suit (fn [s] (case s \\D :diamond \\H :heart \\C :club \\S :speed))\n                   rank (fn [r] (- (case r \\A 14 \\K 13 \\Q 12 \\J 11 \\T 10 (- (int r) (int \\0))) 2))]\n               {:suit (suit (first s)) :rank (rank (second s))}))", "problem": 128, "user": "504db141e4b021508a333965"}, {"code": "(fn [[s r]] \n  (let [\n    suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n    rank-map (zipmap (seq \"23456789TJQKA\") (range))\n  ]\n  {:suit (suit-map s) :rank (rank-map r)}\n  )\n)", "problem": 128, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn [s]\r\n  (let [suite-map {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\r\n        suit (get suite-map (str (first s)))\r\n        rank-map (assoc (apply hash-map (flatten (map #(list (str (+ % 2)) %) (range 8))))\r\n                   \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12)\r\n        rank (get rank-map (str (second s)))]\r\n    {:suit suit :rank rank}))", "problem": 128, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "#(let [[s r] %]\n  {:suit (case s \\D :diamond \\H :heart \\C :club \\S :spade)\n   :rank (case r \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 (-> r str Integer. (- 2)))})", "problem": 128, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn [[s r]]\n  {:suit (case s \\H :heart \\S :spade \\D :diamond \\C :club)\n   :rank (case r \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 (- (Integer. (str r)) 2))})", "problem": 128, "user": "4e568873535d8a8b8723a283"}, {"code": "(fn [s] {:suit ( get\n  (zipmap \"SHDC\" '(:spade :heart :diamond :club)) (first s))\n    :rank ( get\n  (zipmap \"23456789TJQKA\" (range )) (second s))})", "problem": 128, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn [[a b]] {\n  :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} a)\n  :rank (.indexOf (vec \"23456789TJQKA\") b)\n})", "problem": 128, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn [c]\n   {:suit ({\\C :club, \\H :heart, \\D :diamond, \\S :spade} (first c)),\n    :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (last c))})", "problem": 128, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "#(let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n         ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n     {:suit (suits (get % 0)) :rank (ranks (get % 1))})", "problem": 128, "user": "50783762e4b0fc74642bff67"}, {"code": "(do \n  (apply hash-map\n    (apply concat\n      (for [rank (range 0 13) suit [:heart :club :spade :diamond]]\n        [ (str \n            (Character/toUpperCase (first (name suit)))\n            (nth (vec \"23456789TJQKA\") rank))\n          {:suit suit :rank rank}])))\n\n  (fn [[suit rank]] {\n    :rank ((apply hash-map (interleave \"23456789TJQKA\" (range))) rank)\n    :suit ({\\H :heart, \\D :diamond, \\S :spade, \\C :club} suit)\n    })\n\n)", "problem": 128, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn [[a b]]\n  (let [suits {\\D :diamond, \\H :heart, \n               \\C :club, \\S :spade}\n        suit (suits a)\n        rank (case b\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12\n               (- (int b) 50))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "4e7f32ee535db966e863cc3a"}, {"code": "#(let [[_ s r] (re-find #\"([SDHC])([0-9TJQKA])\" %)]\n            {:suit (get {\"S\" :spade \"D\" :diamond \"H\" :heart \"C\" :club} s)\n             :rank (.indexOf \"23456789TJQKA\" r)})", "problem": 128, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn [s]\n    (zipmap [:suit :rank]\n            (map {\\C :club \\D :diamond \\H :heart \\S :spade \n              \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \n              \\Q 10 \\K 11 \\A 12} s)))", "problem": 128, "user": "506b8242e4b0eda3100c090a"}, {"code": "(fn [c] (let [s {\\C :club, \\D :diamond, \\H :heart, \\S :spade} r (reduce merge {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (map (fn [x] {(char (+ 48 x)) (- x 2)}) (range 2 10)))] {:suit (s (nth c 0)) :rank (r (nth c 1))}))", "problem": 128, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn [[suit value]]\n    {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n     :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} value)})", "problem": 128, "user": "4e77c1db535d324fb2983d72"}, {"code": "(fn [args]\n   {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first args))\n    :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second args))})", "problem": 128, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn [s] \n  (let \n   [suit {\\D :diamond \\H :heart \\C :club \\S :spade}\n    rank (zipmap\n            (concat (map #(char (+ % 48)) (range 2 10)) '(\\T \\J \\Q \\K \\A))\n            (range))]\n    {:suit (suit (first s))\n     :rank (rank (second s))}))", "problem": 128, "user": "507a396be4b08327cd804a69"}, {"code": "#(let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n      ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))]\n  {:suit (suits (first %)) :rank (ranks (second %))})", "problem": 128, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn [x]\r\n    {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} (first x))\r\n     :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second x))}\r\n    )", "problem": 128, "user": "4fedd993e4b0198f34b063bc"}, {"code": "(fn [face]\r\n   (let [r (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"])\r\n         ranks (apply hash-map (interleave (map str r) (range 0 13)))\r\n         suits {\"D\" :diamond \"S\" :spade \"H\" :heart \"C\" :club}]\r\n     {:suit (suits (str (first face))) :rank (ranks (str (last face)))}))", "problem": 128, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "#(hash-map :suit (get {\\H :heart \\D :diamond \\S :spade \\C :club} (.charAt % 0))\n           :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (.charAt % 1)))", "problem": 128, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn [[s r]]\n  (let\n    [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n      ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "4fb1325de4b081705acca276"}, {"code": "(fn [[s r]]\r\n  { :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\r\n    :rank (.indexOf (seq \"23456789TJQKA\") r)})", "problem": 128, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn [[suit rank]]\n    {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} suit) \n     :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)) rank)})", "problem": 128, "user": "4f0f36a7535d0136e6c22336"}, {"code": "#(let [k {\\H :heart, \\D :diamond, \\C :club, \\S :spade}\n      v (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))]\n  (conj {} [:suit (k (first %))] [:rank (v (last %))]))", "problem": 128, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(let [parse-rank (fn [rank]\n                    (cond (= rank \\T) 8\n                          (= rank \\J) 9\n                          (= rank \\Q) 10\n                          (= rank \\K) 11\n                          (= rank \\A) 12\n                          :else          (- (Integer/parseInt (str rank)) 2)))]\n(fn [[suit rank]] {:suit ({\\S :spainds \\D :diamond \\H :heart \\C :club} suit) \n                   :rank (parse-rank rank)}))", "problem": 128, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn [c]\n  (let [s {\\D :diamond \\H :heart \\C :club \\S :spade \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n   ((fn [[a b]] {:suit (s a) :rank (s b)}) (seq c))))", "problem": 128, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn [s]\n  (let [suit (subs s 0 1)\n        rank (subs s 1)]\n    {:suit\n     ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} suit)\n     :rank\n     (case rank\n       \"T\" 8\n       \"J\" 9\n       \"Q\" 10\n       \"K\" 11\n       \"A\" 12\n       (- (Integer/parseInt rank) 2))}))", "problem": 128, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn suit-rank\n  [string]\n  (let [lookup {\\H :heart\n                \\D :diamond\n                \\S :spade\n                \\C :club\n                \\T 8\n                \\J 9\n                \\Q 10\n                \\K 11\n                \\A 12}\n        suit (nth string 0)\n        rank (nth string 1)]\n\n    {:suit (get lookup suit)\n   \t:rank (get lookup rank (- (int rank) 50))}))", "problem": 128, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn [[s c]]\n   {:suit\n    ({\\H :heart \\D :diamond \\S :spade \\C :club} s)\n    :rank\n    ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} c)})", "problem": 128, "user": "4dbdc898535d020aff1edf4a"}, {"code": "(fn recognize-cards [card]\n  (letfn [(suit [c]\n\t\t      (case c\n\t\t\t\\D :diamond\n\t\t\t\\H :heart\n\t\t\t\\S :spade\n\t\t\t\\C :club))\n\t        (rank [n]\n\t\t      (case n\n\t\t\t\\T 8\n\t\t\t\\J 9\n\t\t\t\\Q 10\n\t\t\t\\K 11\n\t\t\t\\A 12\n\t\t\t(let [n (Integer/parseInt (str n))]\n\t\t\t     (- n 2))))]\n\t   (let [[s r] card]\n\t\t{:suit (suit s)\n\t\t :rank (rank r)})))", "problem": 128, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn [x] (get (apply merge (for [a [\"D\" \"H\" \"C\" \"S\"] b [2 3 4 5 6 7 8 9 \"T\" \"J\" \"Q\" \"K\" \"A\"]] {(str a b)  {:rank (if (string? b) (get {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} b) (- b 2)) :suit (get {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} a) }})) x))", "problem": 128, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "(fn [[s r]]\n   (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n         ranks {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8}]\n  {:suit (suits s) :rank (ranks r (- (int r) 50))}))", "problem": 128, "user": "50996a38e4b0cae2931060b3"}, {"code": "(; with acknowledgements to austintaylor, ctzsm and daowen\n   let [suit (zipmap \"CDHS\" [:club :diamond :heart :spade])\n        rank (zipmap \"23456789TJQKA\" (range))]\n   (fn [[s r]] {:suit (suit s), :rank (rank r)}))", "problem": 128, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn [[S R]]\n  (hash-map :suit ({\\S :spade \\H :heart \\C :club \\D :diamond} S)\n            :rank (get {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} R (- (int R) 50))))", "problem": 128, "user": "5027b41ee4b01614d1633fee"}, {"code": "(fn [card]\n    (let [[suit rank] card\n          RANKS {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n          SUITS {\\D :diamond \\H :heart \\C :club \\S :spade}]\n      {:suit (SUITS suit) :rank (RANKS rank)}))", "problem": 128, "user": "4fccb31be4b0ee37620e1868"}, {"code": "(fn [s]  \r\n  (let [suit #({ \\S :spade \\H :heart \\D :diamond \\C :club} %)\r\n          rank #({ \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \r\n                   \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} %)]\r\n      {:suit (suit (first s))\r\n        :rank (rank (second s))}))", "problem": 128, "user": "50576483e4b001218172198b"}, {"code": "(fn [x]\n  (hash-map :suit \n    ((fn [x] (cond\n      (= \\S x) :spade\n      (= \\H x) :heart\n      (= \\C x) :club\n      :else :diamond )) (first x))\n   :rank ((fn[x] (cond\n     (= \\2 x) 0\n     (= \\3 x) 1\n     (= \\4 x) 2\n     (= \\5 x) 3\n     (= \\6 x) 4\n     (= \\7 x) 5\n     (= \\8 x) 6\n     (= \\9 x) 7\n     (= \\T x) 8\n     (= \\J x) 9\n     (= \\Q x) 10\n     (= \\K x) 11\n     :else 12)) (second x))\n  )\n)", "problem": 128, "user": "5078300de4b0fc74642bff66"}, {"code": "#(let [ \n    s { \\D :diamond \\H :heart \\C :club \\S :spade } \n    r (zipmap '(\\2,\\3,\\4,\\5,\\6,\\7,\\8,\\9,\\T,\\J,\\Q,\\K,\\A) (range 13))\n    f (first %)\n    l (last %)\n  ]\n  {:suit (get s f) :rank (get r l) })", "problem": 128, "user": "5098bcfee4b0cae2931060a1"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})", "problem": 128, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "(fn pc [card]\n  (let [[s r] (re-seq #\".\" card)]\n    {:suit ({\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade} s),\n     :rank ((into (reduce #(assoc % (str %2) (- %2 2)) {} (range 10))\n                 {\"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12})\n              r)\n     }))", "problem": 128, "user": "504c8165e4b09724c857af31"}, {"code": "(fn [c]\r\n  (let [r (zipmap \"23456789TJQKA\" (range))\r\n        s (zipmap \"DHCS\" '[:diamond :heart :club :spade])]\r\n    {:suit (s (first c)) :rank (r (second c))}))", "problem": 128, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn P128 [card]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n               \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get suits (first card)) :rank (get ranks (last card))}))", "problem": 128, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn [[a b]] (let [m (zipmap \"CDHS23456789TJQKA\" (flatten [:club :diamond :heart :spades (range 13)]))]\n             {:suit (m a) :rank (m b)}))", "problem": 128, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn p-card [s]\n  (let [[suite rank] (seq s)\n        suite-key (cond (= suite \\S) :spade\n                        (= suite \\D) :diamond\n                        (= suite \\C) :club\n                        (= suite \\H) :heart)\n        rank-val (cond (= rank \\A) 12\n                       (= rank \\K) 11\n                       (= rank \\Q) 10\n                       (= rank \\J) 9\n                       (= rank \\T) 8\n                       :else (- (Integer/parseInt (str rank)) 2))]\n    {:suit suite-key :rank rank-val}))", "problem": 128, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank (.indexOf \"23456789TJQKA\" (str r))})", "problem": 128, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn [card]\n  {:suit\n   ({\"S\" :spade \"C\" :club \"D\" :diamond \"H\" :heart} (str (first card)))\n  :rank\n   (.indexOf [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] (str (last card)))})", "problem": 128, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "(fn [s] \n      (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n            rank (zipmap \"23456789TJQKA\" (range 13))]\n        (hash-map \n          :suit (suits (first s))\n          :rank (rank (second s)))\n        ))", "problem": 128, "user": "502ade49e4b0614b52996120"}, {"code": "(fn [[s r]] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spades} s) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})", "problem": 128, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn [c]\n  (let [suit (first c)\n        suits {\\C :club \\D :diamond \\H :heart \\S :spade}\n        rank (second c)\n        ranks #(.indexOf (seq \"23456789TJQKA\") %)]\n     \t{:suit (get suits suit) :rank (ranks rank)}))", "problem": 128, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn [s]\n(let [\nsuits (hash-map \n \\D :diamond \n \\H :heart \n \\S :spade \n \\C :club)\n\nranks (hash-map\n \\2 0\n \\3 1\n \\4 2\n \\5 3\n \\6 4\n \\7 5\n \\8 6\n \\9 7\n \\T 8\n \\J 9\n \\Q 10\n \\K 11\n \\A 12)\n] \n(hash-map :suit (suits (first s))\n          :rank (ranks (last s)))))", "problem": 128, "user": "50217818e4b00bba4502f7a7"}, {"code": "(fn [[x y]]\n  {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} x)\n   :rank ((zipmap \"23456789TJQKA\" (range 13)) y)})", "problem": 128, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn [[suit rank]]\n  (let [suits {\\D :diamond \\H :heart \n               \\S :spade \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6\n               \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n  {:suit (suits suit) :rank (ranks rank)}))", "problem": 128, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn [s]\n  (let [suits {\\H :heart \\C :club \\S :spade \\D :diamond}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits (first s)) :rank (ranks (second s))}))", "problem": 128, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn [[s r]]\n  {:suit ({ \\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :s} s)\n   :rank (.indexOf (seq \"23456789TJQKA\") r)})", "problem": 128, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn [s]\n  {:suit\n    (case (first s)\n      \\S :spade\n      \\H :heart\n      \\D :diamond\n      \\C :club)\n   :rank\n      (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n        (second s))\n  })", "problem": 128, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} s)\n  :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "50436470e4b034ff00315d23"}, {"code": "#(zipmap [:suit :rank] (vector\n  ((zipmap [\\D \\H \\C \\S] [:diamond :heart :club :spade]) (first %))\n  ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)) (second %))))", "problem": 128, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn [x] (let [suitMap {\\D :diamond \\H :heart \\S :spade \\C :club }\n                       rankMap {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }\n                       ] \n                   { :suit (suitMap (first x)) :rank (rankMap (second x))}\n                   ))", "problem": 128, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn str->card [card]\n  (let [[s r] (str card)]\n    (assoc {} :suit ({\\D :diamond \\H :heart \\C :club \\S :space} s)\n              :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r))))", "problem": 128, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(\n  fn sol[ coll ]\n\t\t{\t\n\t\t\t:suit ( { \\D :diamond \\H :heart \\C :club \\S :spade }( first coll ) )  \n\t\t\t:rank ( { \\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 } (last coll) ) \n\t\t} \n)", "problem": 128, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "#(let [suit {\\S :spade \\D :diamond \\C :club \\H :heart}\n       rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n   {:suit (suit (first %)) :rank (rank (last %))})", "problem": 128, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [s]\n  (let [rank (cond \n    (= (second s) \\A) 12\n    (= (second s) \\K) 11\n    (= (second s) \\Q) 10\n    (= (second s) \\J) 9\n    (= (second s) \\T) 8\n    :else (- (int (second s)) 50))]\n    {:suit ({\\D :diamond \\H :heart \\C :club} (first s)) :rank rank}))", "problem": 128, "user": "50112acee4b0d82cfac69f4c"}, {"code": "(fn [xs]\n\t(let [ [x y] (re-seq #\".\" xs) \n\t\tsuit ( {\"D\" :diamond \"C\" :club \"H\" :heart \"S\" :spade } x )\n\t\trank ( {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12} y )\n\t\t]\n\t\t{:suit suit :rank rank}\n\t)\n)", "problem": 128, "user": "50b25f2ce4b03ea88043355f"}, {"code": "(fn read-card [s]\n  (let [suits {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spade}\n        ranks (apply hash-map \n                     (interleave (conj (vec (map str (range 2 10))) \"T\" \"J\" \"Q\" \"K\" \"A\")\n                                 (range 0 14)))]\n    {:suit (get suits (str (first s))),\n     :rank (get ranks (str (second s)))}))", "problem": 128, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn __ [s]\n  (let [suit-table {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spades}\n        rank-table {\"A\" 12,\n                    \"K\" 11,\n                    \"Q\" 10,\n                    \"J\" 9,\n                    \"T\" 8,\n                    \"9\" 7,\n                    \"8\" 6,\n                    \"7\" 5,\n                    \"6\" 4,\n                    \"5\" 3,\n                    \"4\" 2,\n                    \"3\" 1,\n                    \"2\" 0}\n        ss (seq s)]\n    (println (first ss)\n             (second ss))\n    (assoc {}\n      :suit (suit-table (str (first ss)))\n      :rank (rank-table (str (second ss))))))", "problem": 128, "user": "509b152be4b0412cdea6eb1e"}, {"code": "(fn [[s-char r-char]]\n  { :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s-char)\n      :rank (.indexOf \"23456789TJQKA\" (str r-char))})", "problem": 128, "user": "500aa15ee4b03d00572d2d76"}, {"code": "#(do {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} (first %)) :rank ((zipmap (concat (map char (range 062 072)) \"TJQKA\") (range 13)) (second %))})", "problem": 128, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "(fn [x] (let [s (first (seq x)) r (last (seq x))] \n                 {:suit (cond (= s \\H) :heart (= s \\S) :spade (= s \\C) :club :else :diamond) \n                  :rank (cond ((set \"23456789\") r) (- (int r) (int \\2)) (= r \\T) 8 (= r \\J) 9 (= r \\Q) 10 (= r \\K) 11 :else 12)}))", "problem": 128, "user": "50733b31e4b0e3170b5a869a"}, {"code": "#(hash-map :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first %))\n           :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %)))", "problem": 128, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "(fn [s]\n  (let [suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rank (into {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n                   (->> (range 2 10)\n                     (mapcat #(vector (first (str %)) (- % 2)))\n                     (apply hash-map)))]\n    {:suit (suit (first s)), :rank (rank (second s))}))", "problem": 128, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn [x]\n  (let [suit {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6\n              \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n   {:suit (suit (first x)) :rank (rank (second x))}))", "problem": 128, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "(fn [x] \n           (let [suits {\\S :spade \\D :diamond \\H :heart \\C :club}\n                 ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} \n                 p (find ranks (last x))\n                 q (second (find suits (first x)))]\n                (apply hash-map [:suit q :rank (if (nil? p) (- (read-string (str (last x))) 2) (last p))])))", "problem": 128, "user": "4f03f197535dcb61093f6b84"}, {"code": "(let [ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n      suits {\"S\" :spade \"C\" :club \"D\" :diamond \"H\" :heart}]\n(fn [s]\n  {\n  :rank (get ranks (str (second s)))\n  :suit (get suits (str (first  s)))\n  }\n))", "problem": 128, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "(fn [x]\n   (let [m1 {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spade}\n         m2 { \"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3,\n              \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7,\n              \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n         card (map str x)]\n     {:suit (m1 (first card))\n      :rank (m2 (second card))}))", "problem": 128, "user": "50868795e4b004985b776e5e"}, {"code": "(fn cards [[s r]] \n  (let [suit ({\\D :diamond, \\S :spade, \\H :heart, \\C :club} s)\n        rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7\n                \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r)]\n    {:suit suit :rank rank}))", "problem": 128, "user": "4ff769bce4b0678c553fc38f"}, {"code": "(fn [x] (let [suit {\\D :diamond, \\H :heart, \\S :spade, \\C :club} \n               rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n           {:suit (suit (first (seq x))), :rank (rank (last (seq x)))}\n           ))", "problem": 128, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "(fn [s]\n  (let [suits {\\S :spade, \\D :diamond, \\H :heart, \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits (first s)) :rank (ranks (second s))}))", "problem": 128, "user": "50aab057e4b056ee0193586b"}, {"code": "(fn [s]\n  (let [\n        parse (fn [x]\n  {:suit-s (first x) :rank-s (second x)})\n\n        suit (fn suit [m]\n  (condp = (m :suit-s)\n    \\H :heart\n    \\D :diamond\n    \\S :spade\n    \\C :club))\n\n\t\trank (fn rank [m]\n  (let [rank-s (int (m :rank-s))]\n    (if (and (< 49 rank-s) (> 58 rank-s))\n      (- rank-s 50)\n      (condp instance? (m :rank-s)\n    Number (- (m :rank-s) 2)\n    Character (condp = (m :rank-s)\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12)))))\n\n        m (parse s)\n        ]\n    {:suit (suit m) :rank (rank m)}))", "problem": 128, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "(fn [[suit rank]]\n  {:suit (case suit\n           \\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club)\n   :rank (case rank\n           \\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12)})", "problem": 128, "user": "4e6a5694535d8ccf87e9fece"}, {"code": "(fn [s] {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first s)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n                                                                                    (last s))})", "problem": 128, "user": "50b24a2fe4b03ea88043355c"}, {"code": "(fn [s]\n  (let [suit (condp = (first s)\n               \\S :spade\n               \\H :heart\n               \\D :diamond\n               \\C :club)\n        is-int? #(not (empty? (re-find #\"\\d+\" %)))\n        sec (str (second s))\n        rank (if (is-int? sec)\n               (- (read-string sec) 2)\n               (condp = sec\n                 \"T\" 8\n                 \"J\" 9\n                 \"Q\" 10\n                 \"K\" 11\n                 \"A\" 12))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "4e71a12c535d5021c1a8964f"}, {"code": "(fn [[suit rank]]\n    {:suit ({\\S :spade\n             \\H :heart\n             \\D :diamond\n             \\C :club} suit)\n    :rank (or ({\\T 8\n                \\J 9\n                \\Q 10\n                \\K 11\n                \\A 12} rank)\n              (- (int rank) 50))})", "problem": 128, "user": "504e108ce4b078edc5f593b3"}, {"code": "#(let [s {\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade}\n      r {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n   (assoc\n     (assoc {} :suit (s (.substring % 0 1)))\n     :rank (r (.substring % 1 2))))", "problem": 128, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn parse [s]\n  (let [cs (seq s)\n        suiteC (first cs)\n        suite (condp = suiteC \\S :spade \\H :heart \\D :diamond \\C :club \"no match\")\n        rankC (second cs)\n       rank (cond (and (>= (int rankC)\n                           (int \\2)) (<= (int rankC) (int \\9))) (- (int rankC) (int \\0) 2)\n                  :else (condp = rankC \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 \"no match\"))]\n    {:suit suite :rank rank}))", "problem": 128, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn[[s r]]\n   (let[a (get {\\D :diamond \\H :heart \\S :spade \\C :club} s)\n        b (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] r)]\n     {:suit a :rank b}))", "problem": 128, "user": "4e778d36535d324fb2983d71"}, {"code": "#(hash-map :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first %))\n           :rank ((zipmap (map str (conj (vec (range 2 10)) \\T \\J \\Q \\K \\A)) (range 13)) (str (second %))))", "problem": 128, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn [c]\n    (let [ranks '{A 12 K 11 Q 10 J 9 T 8}\n          suits '{H :heart D :diamond C :club S :spade}\n          s (read-string (str (first c)))\n          r (read-string (str (second c)))\n          suit (s suits)\n          rank (if (integer? r) (- r 2) (r ranks))]\n      {:suit suit :rank rank}))", "problem": 128, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn [s2]\n  (let [s (map str (seq s2))\n        str-suit (first s)\n        str-rank (last s)\n        suits-map {\"D\" :diamond,\n                   \"H\" :heart,\n                   \"C\" :club,\n                   \"S\" :spade}\n        ranks (concat (map str (range 2 10)) [\"T\", \"J\" \"Q\" \"K\" \"A\"])\n        ranks-indexed (map-indexed (fn [idx e] [e idx]) ranks)\n        ranks-map (reduce (fn [a, pair] (assoc a (first pair) (last pair))) {} ranks-indexed)]\n    {:suit (suits-map str-suit)\n     :rank (ranks-map str-rank)}))", "problem": 128, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "(fn [[s r]]\n  { :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n    :rank (.indexOf (seq \"23456789TJQKA\") r)})", "problem": 128, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn [[s r]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "50e3cf55e4b01912b3285c45"}, {"code": "#(conj {:suit \n           (cond \n             (= (first %) \\S) :spade\n             (= (first %) \\H) :heart\n             (= (first %) \\D) :diamond\n             (= (first %) \\C) :club)}\n         {:rank \n          (cond\n            (= (second %) \\T) 8\n            (= (second %) \\J) 9\n            (= (second %) \\Q) 10\n            (= (second %) \\K) 11\n            (= (second %) \\A) 12\n            :else (- (read-string (str (second %))) 2))\n            }\n         )", "problem": 128, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [sr]\n  (let [[suit rank] (map str sr)\n        suit-map {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n        rank-map (zipmap (reduce conj (vec (map str (range 2 10))) [ \"T\" \"J\" \"Q\" \"K\" \"A\"]) (range 13))]\n    {:suit (suit-map suit) :rank (rank-map rank)}))", "problem": 128, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn [c]\n  (let [suits {\\H :heart \\D :diamond \\S :spade \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n               \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits (.charAt c 0)) :rank (ranks (.charAt c 1))}))", "problem": 128, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn [a]\n  (let [col (seq a)\n        suit {\\D :diamond \\H :heart \\S :spade \\C :club}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit (first col)) :rank (rank (second col))} ))", "problem": 128, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn [c]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first c))\n   :rank (get {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last c) (- (int (last c)) (int \\2)))})", "problem": 128, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn [[s r]]\n    {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n    :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "#(let [suite {\\S :spade \\H :heart \\D :diamond \\C :club}\n       ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n   {:suit (suite (first %)) :rank (ranks(second %))})", "problem": 128, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn [string]\n  (let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7\n                \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    (zipmap [:suit :rank] [(suits (first string)) (ranks (last string))])))", "problem": 128, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn [[s r]]\n    { :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n      :rank ((zipmap \"23456789TJQKA\" (range)) r) })", "problem": 128, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn recognize-playing-cards [card]\n\n  (let [suit #(condp = % \\S :spade \\H :heart \\D :diamond \\C :club)\n\n        rank #((apply hash-map (interleave \"23456789TJQKA\" (range))) %)]\n\n    {:suit (suit (first card))\n\n     :rank (rank (second card))}))", "problem": 128, "user": "50ee145de4b06330c1f87c53"}, {"code": "(fn [s]\n  (letfn [(suit [c]\n            {:suit (case c\n                     \\S :spade\n                     \\H :heart\n                     \\D :diamond\n                     \\C :club)})\n          (rank [c]\n             {:rank (case c\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12\n               (- (Integer/valueOf (str c)) 2))})]\n    (merge (suit (.charAt s 0)) (rank (.charAt s 1)))))", "problem": 128, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade \\D :diamond \\H :heart \\C :club} s)\n   :rank (let [v (- (int r) 50)] \n             (if (< v 8)\n               v \n               ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)))})", "problem": 128, "user": "502940a9e4b061fd216be4b8"}, {"code": "(fn [x]\n  (let [suit {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        rank [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    {:suit (suit (first x)), :rank (.indexOf rank (second x))}))", "problem": 128, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn card [[x y]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str x)) :rank (ranks (str y))}))", "problem": 128, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "(fn [[x y]] { :suit ((zipmap \"DHCS\" [:diamond :heart :club :spade]) x)\n                  :rank ((zipmap \"23456789TJQKA\" (range)) y) } )", "problem": 128, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn [sr-pair]\n  (let [[suit rank] (seq sr-pair)]\n    {:suit ({\\D :diamond \\H :heart \\C :club \\S :spades} suit)\n    :rank (.indexOf \"23456789TJQKA\" (str rank))}))", "problem": 128, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "#(let [suit (first %) rank (second %)] (conj {:rank \n                        (cond (= rank \\Q) 10\n\t\t\t\t    (= rank \\K) 11\n                    (= rank \\A) 12\n\t\t\t\t    (= rank \\Q) 10\n                    (= rank \\J) 9\n                    (= rank \\T) 8\n\t\t\t\t    true (- (int rank) 50))}\n\t\t\t\t\t\t\t{:suit \n\t\t\t (cond (= suit \\H) :heart\n\t\t\t       (= suit \\S) :spade\n\t\t\t       (= suit \\C) :club\n\t\t\t       true        :diamond)}))", "problem": 128, "user": "503539dee4b0ed9c821488f6"}, {"code": "(fn [[s r]]\n  (let [->num (fn [s] (- (int s) 48))]\n    {:suit ({\\S :spade, \\H :heart, \\C :club, \\D :diamond} s)\n     :rank (cond (<= 2 (->num r) 9) (- (->num r) 2)\n                 (= \\T r) 8\n                 (= \\J r) 9\n                 (= \\Q r) 10\n                 (= \\K r) 11\n                 (= \\A r) 12)}))", "problem": 128, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn [val] \n  (let [x1 (get val 0)\n        x2 (get val 1)\n        mk [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    (assoc {} :suit (cond \n                     (= x1 \\D)\n                     :diamond\n                     (= x1 \\S)\n                     :spade\n                     (= x1 \\H)\n                     :heart\n                     (= x1 \\C)\n                     :club)\n      :rank (.indexOf mk x2))))", "problem": 128, "user": "5036eba7e4b0af0658af77a5"}, {"code": "#(hash-map :suit (condp = (first %)\n                   \\D :diamond\n        \t\t   \\H :heart\n        \t\t   \\C :club\n        \t\t   \\S :spade)\n           :rank (condp = (second %)\n                   \\A 12\n                   \\K 11\n                   \\Q 10\n                   \\J 9\n                   \\T 8\n                   (- (Integer. (str (second %))) 2)))", "problem": 128, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "#(let [m { \"C2\" {:suit :club, :rank 0}\n             \"C3\" {:suit :club, :rank 1}\n             \"C4\" {:suit :club, :rank 2}\n             \"C5\" {:suit :club, :rank 3}\n             \"C6\" {:suit :club, :rank 4}\n             \"C7\" {:suit :club, :rank 5}\n             \"C8\" {:suit :club, :rank 6}\n             \"C9\" {:suit :club, :rank 7}\n             \"CT\" {:suit :club, :rank 8}\n             \"CJ\" {:suit :club, :rank 9}\n             \"CQ\" {:suit :club, :rank 10}\n             \"CK\" {:suit :club, :rank 11}\n             \"CA\" {:suit :club, :rank 12} \n             \"H2\" {:suit :heart, :rank 0}\n             \"H3\" {:suit :heart, :rank 1}\n             \"H4\" {:suit :heart, :rank 2}\n             \"H5\" {:suit :heart, :rank 3}\n             \"H6\" {:suit :heart, :rank 4}\n             \"H7\" {:suit :heart, :rank 5}\n             \"H8\" {:suit :heart, :rank 6}\n             \"H9\" {:suit :heart, :rank 7}\n             \"HT\" {:suit :heart, :rank 8}\n             \"HJ\" {:suit :heart, :rank 9}\n             \"HQ\" {:suit :heart, :rank 10}\n             \"HK\" {:suit :heart, :rank 11}\n             \"HA\" {:suit :heart, :rank 12} \n             \"D2\" {:suit :diamond, :rank 0}\n             \"D3\" {:suit :diamond, :rank 1}\n             \"D4\" {:suit :diamond, :rank 2}\n             \"D5\" {:suit :diamond, :rank 3}\n             \"D6\" {:suit :diamond, :rank 4}\n             \"D7\" {:suit :diamond, :rank 5}\n             \"D8\" {:suit :diamond, :rank 6}\n             \"D9\" {:suit :diamond, :rank 7}\n             \"DT\" {:suit :diamond, :rank 8}\n             \"DJ\" {:suit :diamond, :rank 9}\n             \"DQ\" {:suit :diamond, :rank 10}\n             \"DK\" {:suit :diamond, :rank 11}\n             \"DA\" {:suit :diamond, :rank 12} \n             \"S2\" {:suit :spade, :rank 0}\n             \"S3\" {:suit :spade, :rank 1}\n             \"S4\" {:suit :spade, :rank 2}\n             \"S5\" {:suit :spade, :rank 3}\n             \"S6\" {:suit :spade, :rank 4}\n             \"S7\" {:suit :spade, :rank 5}\n             \"S8\" {:suit :spade, :rank 6}\n             \"S9\" {:suit :spade, :rank 7}\n             \"ST\" {:suit :spade, :rank 8}\n             \"SJ\" {:suit :spade, :rank 9}\n             \"SQ\" {:suit :spade, :rank 10}\n             \"SK\" {:suit :spade, :rank 11}\n             \"SA\" {:suit :spade, :rank 12} \n            }]\n      (get m %1))", "problem": 128, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn f [x]\n  (let [suit {\\D :diamond \\H :heart \\C :club \\S :spade} rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get suit (first x)) :rank (get rank (last x))} \n  )\n)", "problem": 128, "user": "50f4894be4b004d364930528"}, {"code": "(into {} (for [[s b] (zipmap \"SHDC\" [:spade :heart :diamond :club])\n               [r c] (zipmap \"23456789TJQKA\" (range 0 13))]\n           [(str s r) {:suit b :rank c}]))", "problem": 128, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn playing-cards-128\n  [card-string]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank (reduce zipmap ((juxt seq #(range (count %))) \"23456789TJQKA\"))]\n    {:suit (suits (first card-string)) :rank (rank (last card-string))}))", "problem": 128, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "(fn [[suite rank]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks (zipmap (seq \"23456789TJQKA\") (range 13))]\n    {:suit (suits suite) :rank (ranks rank)}))", "problem": 128, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn [s] (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n              ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n          {:suit (suits (first s)) :rank (ranks (second s))}))", "problem": 128, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn decode [s]\n  (let [m1 { \\D :diamond \\H :heart \\C :club \\S :spade }\n        m2 { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n    { :suit (m1 (first s)) :rank (m2 (second s)) }\n    ))", "problem": 128, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn [[s r]]\n    {:suit ({\\H :heart \\D :diamond \\C :club \\S :spade} s)\n     :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn [cardstr]\n  (let [markmap {\\D :diamond \\H :heart \\C :club \\S :spade}\n        mark (markmap (first cardstr))\n        num (case (second cardstr)\n             \\A 1\n             \\T 10\n             \\J 11\n             \\Q 12\n             \\K 13\n             (Integer/parseInt (str (second cardstr))))]\n        {:suit mark :rank (mod (- num 2) 13)} \n        ))", "problem": 128, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "(fn [c]\n  (let [[s n] (seq c)]\n    {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :space} s)\n     :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 0 13)) n)} ))", "problem": 128, "user": "50608ea0e4b07251188e4456"}, {"code": "#(let [suits {\\H :heart \\D :diamond \\S :spade \\C :club}\n      ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n  {:suit (suits (first %)) :rank (ranks (second %))})", "problem": 128, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn [card]\n    (let [suites {\"D\" :diamond \"C\" :club \"S\" :spade \"H\" :heart}\n      ranks (reduce conj (map-indexed #(hash-map %2 %1) \n                                      [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]))]\n    {:suit (suites (subs card 0 1)) :rank (ranks (subs card 1))}))", "problem": 128, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [[s r]]\n  (let [suit (case s\n                \\S :spade\n                \\H :heart\n                \\D :diamond\n                \\C :club)\n        rank (let [x (- (int r) 48)]\n              (if (< x 10) \n                (- x 2)\n                (case r\n                  \\T 8\n                  \\J 9\n                  \\Q 10\n                  \\K 11\n                  \\A 12)))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn [raw]\n  (let [ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))\n        suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}\n        [raw-suit raw-rank] (seq raw)]\n    {:suit (suits raw-suit),\n     :rank (ranks raw-rank)}))", "problem": 128, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(fn [[suit rank]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n   :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0} rank)})", "problem": 128, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "#(zipmap [:suit :rank]\n         [(let [s (first %)]\n            (cond (= \\S s) :spade\n                  (= \\D s) :diamond\n                  (= \\H s) :heart\n                  :else :club))\n          (let [r (second %)]\n            (cond (= \\A r) 12\n                  (= \\K r) 11\n                  (= \\Q r) 10\n                  (= \\J r) 9\n                  (= \\T r) 8\n                  :else (- (int r) 50)))])", "problem": 128, "user": "5102489de4b00c483ae176f6"}, {"code": "(fn [[s r]] \n  (let [suits {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits s)\n     :rank (ranks r)}))", "problem": 128, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn calc [s]\n  (let [suit {\\S :apade \\H :heart \\D :diamond \\C :club}\n\t\tval {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n\t\tls (seq s)\n\t\t]\n\t{:suit (get suit(first ls))  :rank (get val (second ls)) } ))", "problem": 128, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn [[suit rank]]                                                                                                                                            \n   (let [rank-keys (concat (map char (range 50 58)) [\\T \\J \\Q \\K \\A])                                                                                         \n         ranks (apply hash-map (interleave rank-keys (range)))                                                                                                \n         suits {\\C :club, \\D :diamond, \\H :heart, \\S :spade}]                                                                                                 \n     {:suit (get suits suit), :rank (get ranks rank)}))", "problem": 128, "user": "510c1dd5e4b078ea71921113"}, {"code": "(fn [card] {:suit \n            \t({\\C :club, \\D :diamond, \\H :heart, \\S :spade} (nth card 0))\n             :rank\n            \t({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \n                     \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (nth card 1))\n            })", "problem": 128, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "(fn [s] \n  (assoc {} :suit\n    (case (first s)\n      \\D :diamond \n      \\H :heart\n      \\C :club\n      \\S :spade) \n    :rank\n    (case (second s)\n      \\2 0 \n      \\3 1\n      \\4 2\n      \\5 3 \n      \\6 4 \n      \\7 5\n      \\8 6\n      \\9 7\n      \\T 8\n      \\J 9\n      \\Q 10\n      \\K 11\n      \\A 12 )))", "problem": 128, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(let [suit {\\D :diamond \\S :spade \\H :heart \\C :club}\n      rank (fn [r] (if (<= (int \\2) (int r) (int \\9))\n                     (- (Integer/parseInt (str r)) 2)\n                     ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)))]\n  (fn [[s r]] {:suit (suit s) :rank (rank r)}))", "problem": 128, "user": "510db6cde4b078ea71921145"}, {"code": "(fn [s] {:suit (case (first s) \\D :diamond \\H :heart \\C :club :spade) :rank (case (second s) \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 0) })", "problem": 128, "user": "510931ede4b0c71f76895663"}, {"code": "(fn [card]\n  (let [convert-rank (fn [rank-string]\n                       (let [rank (- (int rank-string) 50)]\n                         (if (> rank 7)\n                           ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank-string)\n                           rank)))\n        [s r] card]\n    (into {} \n          [[:suit ({\\C :club \\D :diamond \\H :heart \\S :spade} s)]\n           [:rank (convert-rank r)]])))", "problem": 128, "user": "5102ac9de4b00c483ae176fa"}, {"code": "(fn [card]\n  (let [suits {\\D :diamond \\C :club \\S :spade \\H :heart}\n        rank (into {} (map-indexed (fn [i a] [a i]) [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]))]\n    {:suit (suits (first card))\n     :rank (rank (last card))}))", "problem": 128, "user": "5106bc8ae4b01150e115ebec"}, {"code": "(fn [card]\n  (let [suits\n        {\"D\" :diamond\n         \"H\" :heart\n         \"C\" :club\n         \"S\" :spade}\n        ranks\n        (into \n         {\"T\" 8\n         \t\"J\" 9\n         \t\"Q\" 10\n         \t\"K\" 11\n            \"A\" 12}\n         (map vector\n              (map str (range 2 10))\n              (range 8)))\n        suit (suits (str (first card)))\n        rank (ranks (str (second card)))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn [[s r]]\n  (let [suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s) \n        rank ((zipmap \"23456789TJQKA\" (range)) r)]\n    (sorted-map :suit suit :rank rank)))", "problem": 128, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn  [card]\n  \t(let [ suits { \\S :spade, \\H :heart, \\D :diamond, \\C :club}\n           ranks { \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n           [s r] (seq card)]\n  \t{:suit (suits s), :rank (ranks r)})\n)", "problem": 128, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn [[suit rank]]\n  {:suit ({\\S :spade \\D :diamond \\H :heart \\C :club} suit)\n   :rank ((zipmap \"23456789TJQKA\" (range 13)) rank)})", "problem": 128, "user": "4e4be570535dc968683fc4d8"}, {"code": "#(let [suit ({\\D :diamond \\C :club \\S :spade \\H :heart} (nth % 0))\n       rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} (nth % 1))]\n   (if (nil? rank)\n     {:suit suit :rank (- (read-string (str (nth % 1))) 2)}\n     {:suit suit :rank rank}\n     ))", "problem": 128, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn card [[suit rank]]\n  (let [suits {\\H :heart, \\C :club, \\D :diamond, \\S :spade}\n        ranks {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n  {:suit (suits suit),\n   :rank (ranks rank (- (int rank) (int \\0) 2))} ))", "problem": 128, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "(fn [[s r]]\n   {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} s)\n     :rank (.indexOf (seq \"23456789TJQKA\") r)}\n)", "problem": 128, "user": "510d3dc6e4b078ea71921132"}, {"code": "(fn [card]\n  (let [suits (hash-map \\S :spade \\D :diamond \\C :club \\H :heart)\n        ranks (hash-map \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)]\n    {:suit (suits (first card))\n   \t :rank (ranks (second card))}))", "problem": 128, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn [[s r]]\n   {:suit ({\\C :club \\D :diamond \\H :heart \\S :spade} s)\n    :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "(fn [[suit rank]]\n  {:suit ({\\D :diamond \\H :heart \\C :club} suit)\n   :rank (.indexOf (vec \"23456789TJQKA\") rank)})", "problem": 128, "user": "50e3e108e4b01912b3285c48"}, {"code": "(fn parse-card-str [s]\n  (let [suit-map {\\S :spade\n                  \\H :heart\n                  \\D :diamond\n                  \\C :club}\n        rank-map (zipmap \"23456789TJQKA\" (range 13))     ; Much nicer than spelling it out by hand\n        [suit-ch rank-ch] (clojure.string/upper-case s)  ; Decompositions are handy sometimes\n        suit (suit-map suit-ch)\n        rank (rank-map rank-ch)\n        ]\n    {:suit suit :rank rank}))", "problem": 128, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn [st]\n  {:suit (\n          #(case %\n            \\D :diamond\n            \\S :spade\n            \\H :heart\n            \\C :club)\n          (first st))\n   :rank (\n          #(case %\n            \\A 12\n            \\K 11\n            \\Q 10\n            \\J 9\n            \\T 8\n            (- (int %) 50))\n          (first (rest st)))}\n)", "problem": 128, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "(fn [hand]\n  (let [suit (first hand)\n        rank (second hand)\n        suit-lookup ({\\D :diamond\n                      \\C :club\n                      \\H :heart\n                      \\S :spade} suit)\n        rank-lookup (.indexOf \"23456789TJQKA\" (str rank))]\n    {:suit suit-lookup\n     :rank rank-lookup}))", "problem": 128, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn [[suit rank]]\n   {:suit ({\\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :spade} suit)\n    :rank (letfn [(char-range [start end] (map char (range (int start) (+ (int end) 1))))]\n            ((merge (zipmap (char-range \\2 \\9) (range))\n                    (zipmap [\\T \\J \\Q \\K \\A] (range 8 13)))\n             rank))})", "problem": 128, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "(fn [[s r]] {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n             :rank (.indexOf \"23456789TJQKA\" (int r))})", "problem": 128, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [[s r]]\n  (let [suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n        rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)]\n    {:suit suit :rank rank}))", "problem": 128, "user": "4ec12577535dfed6da9c6da8"}, {"code": "(fn [card]\n  {:suit (case (first card)\n           \\H :heart \\C :club \\D :diamond \\S :spade)\n   :rank (case (second card)\n           \\A 12 \\T 8 \\J 9 \\Q 10 \\K 11 (- (. Integer parseInt (apply str (rest card))) 2))})", "problem": 128, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "#(let [suit {\\D :diamond, \\H :heart, \\C :club \\S :spade}\n       rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n   {:suit (suit (.charAt % 0)), :rank (rank (.charAt % 1))})", "problem": 128, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn card [c]\n  (let [suits {\\H :heart \\D :diamond \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        [s r] (vec c)]\n    {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "511c44fde4b00c2a1fa7ff77"}, {"code": "(fn [[x y]] (let \n    [suit {\\D :diamond \\H :heart \\C :club \\S :spade}\n     rank (apply conj (vec (apply str (range 2 10))) [\\T \\J \\Q \\K \\A] )]\n {:suit (suit x) :rank (.indexOf rank y)} ))", "problem": 128, "user": "4f58d922e4b0a7574ea71857"}, {"code": "(fn [x] \n   {:suit \n    ({\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n      (first x))\n    :rank\n    ((apply hash-map (interleave \"23456789TJQKA\" (range 13)))\n    (second x))}\n   )", "problem": 128, "user": "50d8739ae4b01f0871336e68"}, {"code": "#(-> {:suit ({\\S :spade \\D :diamond \\H :heart \\C :club} (.charAt % 0))\n      :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (.charAt % 1))})", "problem": 128, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn [s]\n  (let [suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first s))\n        rank ((merge\n               (apply hash-map (interleave (map #(Character/forDigit % 10)\n                                          (range 2 10))\n                                     (range 9)))\n               {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8})\n              (second s))]\n    (hash-map :suit suit :rank rank)))", "problem": 128, "user": "51284226e4b03a34742b4308"}, {"code": "(let [rmap (reduce #(assoc %1 (str %2) (- %2 2))\n            {\"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n            (range 2 10))]\n  (fn [[s r]] {\n    :suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} s)\n    :rank (rmap (str r))}))", "problem": 128, "user": "510acd6ee4b078ea719210f4"}, {"code": "(let [suits {\\C :club \\D :diamond \\H :heart \\S :spade}\n      ranks (zipmap \"23456789TJQKA\" (range 0 13))]\n  (fn [[s r]] {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn [s]\n  (let [suit ({\\D :diamond, \\H :heart\n               \\C :club, \\S :spade} (first s))\n        card (str (last s))\n        rank (case card\n               \"A\" 12 \"K\" 11 \"Q\" 10 \"J\" 9 \"T\" 8\n               (- (Integer/parseInt card) 2))]\n    {:suit suit, :rank rank}))", "problem": 128, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "(fn [s]\n  (letfn [(suit [c]\n                (cond\n                  (= c \\C) :club\n                  (= c \\D) :diamond\n                  (= c \\H) :heart\n                  (= c \\S) :spade\n                  :else nil))\n          (rank [c]\n                (cond\n                  (= c \\T) 8\n                  (= c \\J) 9\n                  (= c \\Q) 10\n                  (= c \\K) 11\n                  (= c \\A) 12\n                  :else (- (Integer/parseInt (str c)) 2)))]\n    (let [result {}]\n      (assoc result :rank (rank (second s)) :suit (suit (first s))))))", "problem": 128, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn [card]\n   (let [result {}]\n     (into \n     (into result\n     (case (str (first card))\n       \"D\" {:suit :diamond} \n       \"H\" {:suit :heart}\n       \"C\" {:suit :club}\n       \"S\" {:suit :spade}\n       )\n     )\n       (case (str (second card))\n       \"2\" {:rank 0} \n       \"3\" {:rank 1}\n       \"4\" {:rank 2}\n       \"5\" {:rank 3}\n       \"6\" {:rank 4}\n       \"7\" {:rank 5}\n       \"8\" {:rank 6}\n       \"9\" {:rank 7}\n       \"T\" {:rank 8}\n       \"J\" {:rank 9}\n       \"Q\" {:rank 10}\n       \"K\" {:rank 11}\n       \"A\" {:rank 12}\n       )\n     )\n     )        \n   )", "problem": 128, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [x] (let [suit (.substring x 0 1)\n              rank (.substring x 1)]\n  (hash-map\n  :suit (condp = suit\n          \"S\" :spade\n          \"H\" :heart\n          \"D\" :diamond\n          \"C\" :club)\n  :rank (.indexOf \"23456789TJQKA\" rank))))", "problem": 128, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "(fn [c]\n  (let [s (str (first c))\n        r (str (last c))\n        rv (first (first (filter #(= r (second %)) (map (partial find [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]) (range 13)))))\n        sv ({\"S\" :spade \"C\" :club \"H\" :heart \"D\" :diamond} s)]\n    {:suit sv :rank rv}))", "problem": 128, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn [x]                                                                                                            \n  (conj {:suit ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} (subs x 0 1))}                                                                                                            \n        {:rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (subs x 1))}))", "problem": 128, "user": "512e7e19e4b0b740abc59828"}, {"code": "(fn [card]\n  (let [denom (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"])\n        suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}]\n    {:suit (suits (str (first card))) :rank (.indexOf denom (str (second card)))}))", "problem": 128, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn [card]\n  {:suit ({\\S :spade\n           \\D :diamond\n           \\H :heart\n           \\C :club} (first card))\n   :rank ({\\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12} (last card))})", "problem": 128, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn [s]\n  (let [suits #{{:suit :diamond :schar \\D}\n                {:suit :heart :schar \\H}\n                {:suit :club :schar \\C}\n                {:suit :spade :schar \\S}}\n        ranks #{{:rank 0  :rchar \\2}\n                {:rank 1  :rchar \\3}\n                {:rank 2  :rchar \\4}\n                {:rank 3  :rchar \\5}\n                {:rank 4  :rchar \\6}\n                {:rank 5  :rchar \\7}\n                {:rank 6  :rchar \\8}\n                {:rank 7  :rchar \\9}\n                {:rank 8  :rchar \\T}\n                {:rank 9  :rchar \\J}\n                {:rank 10 :rchar \\Q}\n                {:rank 11 :rchar \\K}\n                {:rank 12 :rchar \\A}}]\n    (select-keys\n     (merge\n      (first (filter (fn [suit] (= (suit :schar) (first s))) suits))\n      (first (filter (fn [rank] (= (rank :rchar) (second s))) ranks)))\n     [:rank :suit])))", "problem": 128, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn [s]\n  (let [suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank-map (merge (into {} (map #(vector (char (+ % 50)) %) (range 8)))\n                        {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12})]\n    {:suit (suit-map (first s))\n    :rank (rank-map (second s))}\n    )\n  )", "problem": 128, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn [hand]\n  (let [suits {\\S :spade \\H :heart \\C :club \\D :diamond}\n        ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n                      (range 13))]\n    {:suit (suits (first hand)) :rank (ranks (second hand))}))", "problem": 128, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn ! [_1] \n  (let [[x y] (re-seq #\".\" _1)]\n    {:suit (get {\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club} x), :rank (get {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12} y)}))", "problem": 128, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn [[s r]]\n  {\n   :suit\n   ({\\D :diamond \\S :spade \\H :heart \\C :club} s)\n   :rank\n   (.indexOf \"23456789TJQKA\" (int r))\n   }\n  )", "problem": 128, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn suitrank [^String s]  \n  (let [ st (first s)\n         vl (second s)\n         h {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 \\H :heart \\C :club \\D :diamond \\S :spade}]\n    { :suit (h st) :rank (h vl) }\n    ))", "problem": 128, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn [card]\n  (let [[s r] card]\n    {:suit ({ \\D :diamond \\H :heart \\S :spade \\C :club} s)\n     :rank (condp = r\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12\n             (- (Character/digit r 10) 2))}))", "problem": 128, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn [a] {:suit ({\\D :diamond,\\H :heart,\\C :club, \\S :spade} (first a)) :rank \n         ({\\2 0,\\3 1,\\4 2,\\5 3,\\6 4,\\7 5,\\8 6,\\9 7,\\T 8,\\J 9,\\Q 10,\\K 11,\\A 12}\n          (last a)\n          )\n         } )", "problem": 128, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn convert [c]\n\t(let [\n\trank\n\t\t{\\2 0\n\t\t\\3 1\n\t\t\\4 2\n\t\t\\5 3\n\t\t\\6 4\n\t\t\\7 5\n\t\t\\8 6\n\t\t\\9 7\n\t\t\\T 8\n\t\t\\J 9\n\t\t\\Q 10\n\t\t\\K 11\n\t\t\\A 12}\n\tsuit\n\t\t{\\S :spade\n\t\t\\D :diamond\n\t\t\\H :heart\n\t\t\\C :club}\n\t\t]\n\t\t{:rank (rank (last c)) :suit (suit (first c))}\n\t)\n\n)", "problem": 128, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn [[fl,sl]] (let [suitsmap {\\D :diamond \\H :heart \\S :spade \\C :club} \n                            rankmap {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n                        {:suit (suitsmap fl) :rank (rankmap sl)}\n                        ))", "problem": 128, "user": "511d11d7e4b022853b0e079f"}, {"code": "( fn [cstring] (let [[a b c] ( clojure.string/split cstring  #\"\")\n        suits   {\"H\" :heart \"D\" :diamond \"C\" :club \"S\" :spade}\n        ranks   [\"2\"\"3\" \"4\" \"5\" \"6\"  \"7\" \"8\"  \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]]\n     (hash-map  :rank (.indexOf ranks c) :suit (suits b)) ))", "problem": 128, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn [s]\n  (let\n    [suitdict {\\D :diamond \\H :heart \\S :spade \\C :club}\n     rankdict (merge\n                (apply merge (for [x (range 10)] {(char (+ x 50)) x}))\n                (apply merge (map-indexed #(hash-map %2 (+ 8 %1)) \"TJQKA\")))]\n    {:suit (get suitdict (first s))\n     :rank (get rankdict (last s))}))", "problem": 128, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn [[s r]]\n  (let [suits {\\D :diamond, \\H :heart, \\S :spade, \\C :club}\n        ranks (vec \"23456789TJQKA\")]\n    {:suit (suits s) :rank (.indexOf ranks r)}))", "problem": 128, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn [s]\n  (let [suit {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club}\n        rank {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n    \ttoks (rest (clojure.string/split s #\"\"))]\n    {:suit (get suit (nth toks 0)) :rank (get rank (nth toks 1))}\n    )\n  )", "problem": 128, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn [card] (let\n             [ranks (zipmap (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range 13))\n              suits {\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade}\n              s     (map str (seq card))]\n             {:suit (-> s first suits) :rank (-> s last ranks)}))", "problem": 128, "user": "51307b84e4b08c712d3fae39"}, {"code": "#(let [coll (seq %) suit (first coll) rank (second coll)] {:suit ({\\C :club \\D :diamond \\H :heart \\S :spade} suit) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)})", "problem": 128, "user": "4e823f41535db62dc21a62c8"}, {"code": "#(let [suits {\\D :diamond \\H :heart \\C :club \\S :spade} ranks (seq \"23456789TJQKA\")] {:suit (get suits (first %)) :rank (.indexOf ranks (second %))})", "problem": 128, "user": "513a4babe4b067e25a345eca"}, {"code": "(fn f [[s r]]\n  (let [suit {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suit s) :rank (rank r)}))", "problem": 128, "user": "504ffb8fe4b0a02f9cffdeae"}, {"code": "(fn read-card [str]\n  (let [[suit rank] (.toCharArray str)\n        ranks  { \\2 0, \\3 1, \\4 2,  \\5 3,\n                 \\6 4, \\7 5, \\8 6,  \\9 7,\n                 \\T 8, \\J 9, \\Q 10, \\K 11, \n                 \\A 12 }\n        suites { \\D :diamond, \\H :heart,\n                 \\C :club,    \\S :spade}]\n  (hash-map :rank (ranks rank) :suit (suites suit))))", "problem": 128, "user": "5127e504e4b03a34742b4302"}, {"code": "(fn [s] {:suit ({\\D :diamond\n                 \\H :heart\n                 \\C :club\n                 \\S :spade} (first s))\n         :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n                 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))})", "problem": 128, "user": "4f1bb9d8535d64f60314647d"}, {"code": "(fn cc[[s c]]\n  (let [S (zipmap \"CSHD\" [:club :spade :heart :diamond])\n        R (zipmap \"23456789TJQKA\" (range 13)) \n        ]\n    {:suit (S s) :rank (R c)}))", "problem": 128, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(let [suit-fn {\\D :diamond \\H :heart \\C :club \\S :spade}\n      rank-list [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n      rank-fn #(.indexOf rank-list %1)]\n  (fn [st]\n    {:suit (suit-fn (first st)) :rank (rank-fn (second st))}))", "problem": 128, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "#(zipmap [:suit :rank] (map {\\D :diamond \\H :heart \\S :spade \\C :club \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} %))", "problem": 128, "user": "4e58c019535d8a8b8723a297"}, {"code": "#(let [suit (into {} (map (fn[s l](hash-map s l)) (seq \"SDHC\") '(:spade :diamond :heart :club))) rank (into {} (map (fn[s l](hash-map s l)) (seq \"23456789TJQKA\") (range)))]((fn[s](into {} (hash-map :suit (suit (first s)) :rank (rank (second s))))) (seq %)))", "problem": 128, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn [s]\n  (let [ suits {\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club}\n         ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n         splits (drop 1 (clojure.string/split s #\"\"))\n         suit (first splits)\n         rank (second splits)]\n    (hash-map :suit (get suits suit) :rank (get ranks rank))))", "problem": 128, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn trans\n  [s]\n  (let [[st rnk] (seq s)]\n    {:suit\n    (cond (= st \\D) :diamond\n          (= st \\H) :heart\n          (= st \\C) :club\n          (= st \\S) :spade)\n    :rank\n    (cond (<= (int rnk) (int \\9)) (- (int rnk) (int \\2))\n          (= rnk \\T) 8\n          (= rnk \\J) 9\n          (= rnk \\Q) 10\n          (= rnk \\K) 11\n          (= rnk \\A) 12)}))", "problem": 128, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn [suit-str] (let [suit (str (first suit-str))\n                      rank (str (second suit-str))                      \n                      suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n                      vals {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n                  (println rank)\n                  (assoc {} :suit (get suits suit) \n                         :rank (if (contains? vals rank)\n                                 (get vals rank)\n                                 (- (Integer/parseInt rank) 2)))))", "problem": 128, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn\n  [card-string]\n  (let [suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (get suit-map (first card-string)) \n     :rank (get rank-map (second card-string))}))", "problem": 128, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn [[s r]]\n  {:suit ((zipmap [\\H \\S \\D \\C] [:heart :spade :diamond :club]) s)\n  :rank ((zipmap [\\2\\3\\4\\5\\6\\7\\8\\9\\T\\J\\Q\\K\\A](range)) r)})", "problem": 128, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn [c] (let [suit {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n              ranks {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n              rank (fn [x] (ranks x (- (int x) 50)))]\n          (hash-map \n           :suit (suit (first c)) \n           :rank (rank (second c)))))", "problem": 128, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "(fn recognize-playing-cards [card]\n  (let [suit  #({\\S :spade, \\H :heart, \\D :diamond, \\C :club} %)\n        r-dic (apply hash-map (interleave \"23456789TJQKA\" (range)))\n        rank  #(r-dic %)]\n    {:suit (suit (first card))\n     :rank (rank (second card))}))", "problem": 128, "user": "5142154ce4b0b50abeb46b2b"}, {"code": "(fn [[s r]] \n  {:suit ({\\H :heart \\S :spade \\C :club \\D :diamond} s)\n   :rank (.indexOf (vec \"23456789TJQKA\") r)})", "problem": 128, "user": "5117c31ee4b0e0897831a60c"}, {"code": "(fn[[s r]](hash-map \n  :suit ((zipmap \"SDCH\" [:spade :diamond :club :heart]) s) \n  :rank ((zipmap \"23456789TJQKA\" (range)) r)))\n;(fn[[s r]](hash-map \n;  :suit ({\\S :spade, \\D :diamond, \\C :club, \\H :heart} s) \n;  :rank (.indexOf (seq \"23456789TJQKA\") r)))\n;(fn[s]{:suit ( {\\S :spade, \\D :diamond, \\C :club, \\H :heart} (first s)), :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (second s))})", "problem": 128, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "(fn [[suit rank]]\n  {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} suit) \n  :rank (.indexOf (seq \"23456789TJQKA\") rank)})", "problem": 128, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn [c]\n  {\n   :suit ({ \\S :spade \\C :club \\H :heart \\D :diamond } (first c)),\n   :rank ({ \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 } (second c))\n   })", "problem": 128, "user": "513bb7a6e4b04402f587b77d"}, {"code": "(fn [card-str]\n  (let [suits {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n        ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n        suit-str (subs card-str 0 1)\n        rank-str (subs card-str 1 2)]\n    {:suit (suits suit-str) :rank (ranks rank-str)}))", "problem": 128, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn [[x y]] \n  (conj \n   {}\n   [:suit \n    (case x\n      \\S :spade\n      \\H :heart\n      \\D :diamond\n      \\C :club\n    )]\n  [:rank\n   (case y\n     \\T 8\n     \\J 9\n     \\Q 10\n     \\K 11\n     \\A 12\n     (- (int y) 50)\n     )]   \n   )\n)", "problem": 128, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn [[suit card]]\n  (let [suits (zipmap \"SHDC\" [:spade :heart, :diamond, :club])\n        ranks (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (suits suit), :rank (ranks card)}))", "problem": 128, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "(fn [st] \n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first st))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last st))})", "problem": 128, "user": "5145832be4b0e8879607340a"}, {"code": "(fn [c] \n  {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} (first c))\n   :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)) (last c))})", "problem": 128, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn p[s]\n{:suit (let [suit (first s)]\n         (cond\n           (= suit \\S) :spade\n           (= suit \\H) :heart\n           (= suit \\D) :diamond\n           (= suit \\C) :club\n           )\n  )\n :rank (let [rank (second s)]\n         (cond\n           (= rank \\T) 8\n           (= rank \\J) 9\n           (= rank \\Q) 10\n           (= rank \\K) 11\n           (= rank \\A) 12\n           :else (- (Integer. (str rank)) 2)\n           )\n         )\n }\n)", "problem": 128, "user": "513f53c6e4b051389b345b40"}, {"code": "(fn [c]\n        {:suit ({\\D :diamond \\C :club \\H :heart \\S :spade} (first c))\n         :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second c))})", "problem": 128, "user": "4e50c894535dc968683fc4ee"}, {"code": "#(let [v {\\D :diamond \\H :heart \\C :club \\S :spade \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n   (zipmap [:suit :rank] [(v (first %)), (v (second %))]))", "problem": 128, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "(fn [x] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first x))\n  \t\t :rank (.indexOf (vec \"23456789TJQKA\") (last x))})", "problem": 128, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn get-card [card]\n  (let [suits {\"H\" :heart\n               \"S\" :spade\n               \"C\" :club\n               \"D\" :diamond}\n        ranks {\"2\" 0\n               \"3\" 1\n               \"4\" 2\n               \"5\" 3\n               \"6\" 4\n               \"7\" 5\n               \"8\" 6\n               \"9\" 7\n               \"T\" 8\n               \"J\" 9\n               \"Q\" 10\n               \"K\" 11\n               \"A\" 12}]\n    {:suit (suits (str (first card)))\n     :rank (ranks (str (second card)))}))", "problem": 128, "user": "51502056e4b098b221effc25"}, {"code": "(fn[[s c]]{:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s) :rank (.indexOf (vec \"23456789TJQKA\") c)})", "problem": 128, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn\t[[s r]]\n\t(let [suits {\\H :heart \\D :diamond \\S :spade \\C :club}\n\t      ranks (zipmap \"23456789TJQKA\" (range))]\n\t  {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "(fn [hand]\n  (let [suit (str (first hand))\n        rank (str (second hand))]\n    {:suit ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} suit)\n     :rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} rank)}))", "problem": 128, "user": "5016ac54e4b052339a490e7b"}, {"code": "(fn [x] (hash-map :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first x)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last x))))", "problem": 128, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn [x] \n   {:suit ({\\D :diamond \\C :club \\H :heart \\S :spade} (first x)) \n   :rank (get {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} (fnext x) (- (- (int (fnext x)) (int \\0)) 2))}\n  )", "problem": 128, "user": "5158bba4e4b059418b97f0ab"}, {"code": "(fn [[s r]]\n  {:suit\n   ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank\n   ((zipmap (seq \"23456789TJQKA\") (range)) r)})", "problem": 128, "user": "50742549e4b054001656accf"}, {"code": "(fn [card]\n  (let [card-suit (first card)\n        card-rank (last card)\n        suits {\\H :heart \\D :diamond \\S :spade \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits card-suit) :rank (ranks card-rank)}))", "problem": 128, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn [arg] {:suit ({\\D :diamond \\H :heart\n                    \\C :club \\S :spade} (get arg 0)),\n            :rank (.indexOf \"23456789TJQKA\" (str (get arg 1)))})", "problem": 128, "user": "514a7e71e4b00c7db5067429"}, {"code": "#(let [rank { \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n      suit { \\D :diamond, \\H :heart, \\C :club }]\n  {:suit (suit (first %)), :rank (rank (second %))})", "problem": 128, "user": "4e58ef07535d8a8b8723a299"}, {"code": "(fn [[a b]]\n  (let [card-map (reduce (fn [m n] (assoc m (str n) (- n 2))) \n                            {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade                            \n                             \"A\" 12 \"K\" 11 \"Q\" 10 \"J\" 9 \"T\" 8}\n                            (range 10))]\n  {:suit (card-map (str a)) :rank (card-map (str b))}))", "problem": 128, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "(fn [s]\n  (let [ss {\\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :spade}\n        rs {\\2  0\n            \\3  1\n            \\4  2\n            \\5  3\n            \\6  4\n            \\7  5\n            \\8  6\n            \\9  7\n            \\T 8\n            \\J  9\n            \\Q  10\n            \\K  11\n            \\A  12}]\n    {:suit (ss (first s)) :rank (rs (second s))}))", "problem": 128, "user": "515a6151e4b0394f658fe241"}, {"code": "#(let [suits {\\D :diamond \\H :heart \\C :club}\n        ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n        [s r] (seq %)]\n    { :suit (get suits s) :rank (.indexOf ranks r) } )", "problem": 128, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn [s]\n\t(let [suit (first s) rank (last s)]\n\t\t\t(assoc\n\t\t\t\t{}\n\t\t\t\t:suit\n\t\t\t\t(case suit\n\t\t\t\t\t\\D :diamond\n\t\t\t\t\t\\H :heart\n\t\t\t\t\t\\C :club\n\t\t\t\t\t:spades)\n\t\t\t\t:rank\n\t\t\t\t(case rank\n\t\t\t\t\t\\2 0\n\t\t\t\t\t\\3 1\n\t\t\t\t\t\\4 2\n\t\t\t\t\t\\5 3\n\t\t\t\t\t\\6 4\n\t\t\t\t\t\\7 5\n\t\t\t\t\t\\8 6\n\t\t\t\t\t\\9 7\n\t\t\t\t\t\\T 8\n\t\t\t\t\t\\J 9\n\t\t\t\t\t\\Q 10\n\t\t\t\t\t\\K 11\n\t\t\t\t\t12))))", "problem": 128, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [s] (let [[a b] (partition 1 s)]\n         (assoc {} :suit (case (apply str a) \"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club) \n           :rank (let [bs (apply str b)] (case bs (\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\") (- (Integer/parseInt bs) 2)\n                                           \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12)))))", "problem": 128, "user": "5150a7d7e4b03e678e393abb"}, {"code": "(fn [card]\n\t(let [[s r] (->> card (partition 1) (map (partial apply str)))\n\t\t {suit s} {\"H\" :heart \"C\" :club \"D\" :diamond \"S\" :spade}\n\t\t {rank r} {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} ]\n\t{:suit suit :rank rank}))", "problem": 128, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(fn [card] (let [suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (nth card 0))\n                 rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (nth card 1))]\n             {:suit suit :rank rank}))", "problem": 128, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn pc-to-map [[a b]]\n  (let [s (case a \\H :heart \\D :diamond \\S :spade \\C :club)\n        r (case b \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 (- (int b) 50))]\n    {:suit s :rank r}))", "problem": 128, "user": "514d8084e4b019235f6c0588"}, {"code": "#(let [suit (first %) rank (second %)]\n   (let [suit-map (case suit\n                   \\D :diamond\n                   \\S :spade\n                   \\H :heart\n                   \\C :club\n                    )]\n     (let [rank-map (case rank\n                      \\A 12\n                      \\K 11\n                      \\Q 10\n                      \\J 9\n                      \\T 8\n                      (-(int rank) 50)\n                     )]\n       {:suit suit-map :rank rank-map}\n       )\n     )\n   )", "problem": 128, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank (.indexOf \"23456789TJQKA\" (int r))})", "problem": 128, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "(fn card-str-to-map [cs]\n    (let [st (first cs)\n          v  (second cs)\n          v-int (fn [v]\n                  (condp = (str v)\n                    \"2\" 0\n                    \"3\" 1\n                    \"4\" 2\n                    \"5\" 3\n                    \"6\" 4\n                    \"7\" 5\n                    \"8\" 6\n                    \"9\" 7\n                    \"T\" 8\n                    \"J\" 9\n                    \"Q\" 10\n                    \"K\" 11\n                    \"A\" 12))\n          st-suite (fn [st]\n                     (condp = (str st)\n                       \"D\" :diamond\n                       \"H\" :heart\n                       \"C\" :club\n                       \"S\" :spade))\n          ]\n      {:suit (st-suite st)\n       :rank (v-int v)}))", "problem": 128, "user": "50981062e4b04e098a4c7268"}, {"code": "(fn [c]\n  (let [suit (case (get c 0)\n             \\H :heart \\D :diamond \\C :club \\S :spade)\n        card (get c 1)\n        rank (case card\n        \t\t\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12\n        \t\t(- (int card) (int \\0) 2))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "50f48298e4b004d364930527"}, {"code": "#((fn [[s r]]\n     {:suit ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spades} s)\n      :rank ((zipmap (re-seq #\".\" \"23456789TJQKA\") (range)) r)})\n    (re-seq #\".\" %))", "problem": 128, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn rec-cards [s]\n  (let [deck {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club \"K\" 11 \"A\" 12 \"Q\" 10 \"J\" 9 \"T\" 8, \"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7}\n        card (re-seq #\"\\w\" s)] \n    (hash-map :suit (deck (first card)) :rank (deck (second card)))))", "problem": 128, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn [card]\n  (let [suit (first card) val (second card)]\n    (letfn [(getsuit [s]\n                     (cond (= s \\S) :spade\n                           (= s \\H) :heart\n                           (= s \\D) :diamond\n                           (= s \\C) :club))\n            (getval [v]\n                    (cond (= v \\A) 12\n                          (= v \\K) 11\n                          (= v \\Q) 10\n                          (= v \\J) 9\n                          (= v \\T) 8\n                          :else (- (int v) 50)))]\n      (hash-map :suit (getsuit (first card)) :rank (getval (second card))) )))", "problem": 128, "user": "513cb853e4b0b86ece9f322b"}, {"code": "(fn [[s r]]\n  {:suit ({\\H :heart \\D :diamond \\C :club \\S :spade} s) \n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn cardreader [[s r]]\n  (assoc {}\n    :suit (cond\n            (= s \\C) :club\n            (= s \\D) :diamond\n            (= s \\H) :heart\n            (= s \\S) :spade)\n    :rank (cond\n            (= r \\A) 12\n            (= r \\K) 11\n            (= r \\Q) 10\n            (= r \\J) 9\n            (= r \\T) 8\n            :else (- (Character/getNumericValue r) 2))))", "problem": 128, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn [card]\n  (let [suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        c (vec card)]\n    {:suit (suit-map (c 0)) :rank (rank-map (c 1))}))", "problem": 128, "user": "516f06dce4b06aac486e5b39"}, {"code": "(fn [s]\n  (let [c (seq s)]\n    {:suit (case (first c) \\D :diamond \\H :heart \\S :spade \\C :club)\n     :rank (case (last c) \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n                 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)}))", "problem": 128, "user": "512d3304e4b040332b905b2d"}, {"code": "#(let [[suit rank] %\n       suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n       ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n  {:suit (get suits suit) :rank (.indexOf ranks rank)})", "problem": 128, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "(fn [s]\n  {:suit\n   ({\\S :spade \\H :heart \\D :diamond \\C :club} (first s))\n   :rank\n   ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last s))})", "problem": 128, "user": "51592b81e4b0394f658fe22c"}, {"code": "(fn p128[x]\n  (let [m1 {\\D :diamond \\H :heart \\C :club \\S :spades}\n\t\tm2 {\"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n        f (fn[s] (if-let [a (m2 (str s))] a (- (int s) 50)))]\n    {:suit (m1 (first x)) :rank (f (second x))}))", "problem": 128, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn [[s r]] \n  {:suit ((zipmap \"DHCS\" [:diamond :heart :club :spade]) s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4eab612d535d7eef30807316"}, {"code": "(fn [[s r]] {:suit (case s \\D :diamond \\H :heart \\C :club \\S :spade) :rank (case r \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 )})", "problem": 128, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn [card]\n  (let [suit (first (seq card)),\n        rank (second (seq card))]\n    (conj (hash-map :suit\n                    (case suit\n                      \\C :club\n                      \\D :diamond\n                      \\H :heart\n                      \\S :spade))\n          (hash-map :rank\n                    (let [rn (- (int rank) (int \\0))]\n                      (if (contains? (set (range 2 10)) rn)\n                        ; 2 to 9\n                        (- rn 2)\n                        (case rank\n                          \\T 8\n                          \\J 9\n                          \\Q 10\n                          \\K 11\n                          \\A 12)))))))", "problem": 128, "user": "5175616ae4b0dea9bbfba576"}, {"code": "#(zipmap [:suit :rank] (map (zipmap \"SHDC23456789TJQKA\" `(:spade :heart :diamond :club ~@(range))) %))", "problem": 128, "user": "51740b65e4b0d277d717bc67"}, {"code": "#(->> % str vec (map {\\D :diamond, \\H :heart, \\S :spade, \\C :club, \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}) (zipmap [:suit :rank]))", "problem": 128, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "(fn [x]\n  (let [suit (str (first x))\n             rank (str (last x))\n             suits {:S :spade :H :heart :D :diamond :C :club}\n             ranks {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12}]\n    {:suit ((keyword suit) suits) :rank ((keyword rank) ranks)}))", "problem": 128, "user": "4f072644535dcb61093f6c20"}, {"code": "(let [suitmap {\\D :diamond \\H :heart \\S :spade \\C :club}\n      rankmap (into {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (for [x (range 2 10)] [(first (str x)) (- x 2)]))]\n  (fn [[s r]]\n    {:suit (suitmap s)\n     :rank (rankmap r)}))", "problem": 128, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [[s r]]\n  (let [suits (zipmap \"DCSH\" [:diamond :club :spade :heart])\n        ranks (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (suits s), :rank (ranks r)}))", "problem": 128, "user": "4f89d489e4b033992c121c7e"}, {"code": "(fn [desc]\n  (letfn [(suit [c] (condp = c \\S :spade \\H :heart \\D :diamond \\C :club ) ) \n          (rank [c] (condp = c \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \n                              \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12) )]\n   (let [parsed (seq desc) [s r] parsed] (hash-map :suit (suit s) :rank (rank r) ) )\n    )\n  )", "problem": 128, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn [[s r]]\n  (let [suits {\\S :spade \\D :diamond \\H :heart \\C :club}\n        ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n    {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "5173726be4b098276e74652c"}, {"code": "(fn [[a b]]\n\t   (let [suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n\t\t rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n\t     {:suit (suit a) :rank (rank b)}))", "problem": 128, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn [sj]\n  (let [data (apply hash-map (concat (interleave [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))\n                   (interleave [\\H \\C \\D \\S] [:heart :club :diamond :spade])))]\n    (hash-map :suit (data (get sj 0)) :rank (data (get sj 1)) )))", "problem": 128, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn [string]\n   (let [first (first string)\n         second (second string)\n         suit (condp = first\n                '\\D :diamond\n                '\\S :spade\n                '\\H :heart\n                '\\C :club)\n         rank (condp = second\n                '\\2 0\n                '\\3 1\n                '\\4 2\n                '\\5 3\n                '\\6 4\n                '\\7 5\n                '\\8 6\n                '\\9 7\n                '\\T 8\n                '\\J 9\n                '\\Q 10\n                '\\K 11\n                '\\A 12)]\n     (hash-map :suit suit :rank rank)))", "problem": 128, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "(fn [[s r]]\n  (let [suits {\\D :diamond \\H :heart  \\C :club  \\S :spade}\n        num-rank (zipmap (map (comp first str) (range 2 10))\n                         (range 0 8))\n        rank (assoc num-rank \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)]\n    {:suit (suits s) :rank (rank r)}))", "problem": 128, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn [s]\n    (let [suits {\\C :club \\D :diamond \\S :spade \\H :heart}\n          ranks (->> '[2 3 4 5 6 7 8 9 T J Q K A] (map str) (map first))]\n      {:suit (suits (first s))\n       :rank (.indexOf ranks (second s))})\n  )", "problem": 128, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn pc [s]\n  {:suit\n   ({\"C\" :club \"H\" :heart \"D\" :diamond \"S\" :spade} (str (first s)))\n   :rank\n   ((merge (into {} (map vector (map str (range 2 10)) (range 8))) {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}) (str (second s)))})", "problem": 128, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "#(assoc {} :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (nth % 0)) :rank (.indexOf \"23456789TJQKA\" (str (nth % 1))))", "problem": 128, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn convert-card [card]\n  (let [suit ({\\C :club, \\D :diamond, \\H :heart, \\S :spade} (first card))\n        rank ((zipmap \"23456789TJQKA\" (range)) (second card))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "5141bc82e4b02fd87f5064c5"}, {"code": "(fn [s]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits (first s))\n     :rank (ranks (last s))}))", "problem": 128, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn [s]\n  (let [[suit rank] s]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n   :rank (- (case rank \n           \\T 10\n           \\J 11\n           \\Q 12\n           \\K 13\n           \\A 14\n           (read-string (str rank))) 2)}))", "problem": 128, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn [s] \n  (let [[s r] (seq s) \n        suits { \\D :diamond \\H :heart \\S :spade \\C :club }\n        ranks { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 } ]\n    {:suit (get suits s) :rank (get ranks r)}))", "problem": 128, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn [[suit rank]]\n  {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} suit)\n   :rank ((zipmap \"23456789TJQKA\" (range)) rank)})", "problem": 128, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn [[s r]]\n  {:suit \n    (case s\n          \\S :spade\n          \\H :heart\n          \\D :diamond\n          \\C :club)\n   :rank\n    (case r\n          \\2 0\n          \\3 1\n          \\4 2\n          \\5 3\n          \\6 4\n          \\7 5\n          \\8 6\n          \\9 7\n          \\T 8\n          \\J 9\n          \\Q 10\n          \\K 11\n          \\A 12)})", "problem": 128, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn [str-card]\n(let [m {\\C :club \\S :spade \\D :diamond \\H :heart \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n      S (vec str-card)]\n {:suit (m (first S)) :rank (m (second S))}))", "problem": 128, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn [[s r]]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rank \"23456789TJQKA\"]\n    {:suit (suits s) :rank (.indexOf rank (str r))}))", "problem": 128, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn [[s n]]\n  {:suit ({\\D :diamond \\H :heart \\S :spade} s :club)\n   :rank (.indexOf \"23456789TJQKA\" (int n))})", "problem": 128, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn [[s r]]\n  (let [suit {\\D :diamond \\S :spade \\H :heart \\C :club}\n        rank (zipmap \"23456789TJQKA\" (range))]\n    {:suit (suit s) :rank (rank r)}))", "problem": 128, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "#(let [[s r] % \n       m {\n        \\S :spade \n        \\H :heart \n        \\D :diamond \n        \\C :club \n        \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}] \n    {:suit (get m s) :rank (get m r)})", "problem": 128, "user": "517bc969e4b07ef0e56148d0"}, {"code": "(fn [[s r]]\n  {:suit ({\\H :heart, \\D :diamond, \\C :club, \\S :spade} s)\n  :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "517b59b8e4b0925c997201d0"}, {"code": "(fn [[suit rank]] \n  (let [suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n        ranks {\"T\" 10 \"J\" 11 \"Q\" 12 \"K\" 13 \"A\" 14}]\n    {:suit (suits (str suit)) :rank (+ -2 (or (ranks (str rank)) (Integer/parseInt (str rank))))}))", "problem": 128, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn [[suit rank]]\n  {:suit (case suit\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade),\n   :rank (case rank\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           (- (Character/digit rank 10) 2))\n  }\n)", "problem": 128, "user": "51473a70e4b0d520409ed394"}, {"code": "(fn card-value [card]\n  (letfn [(determine-suit [s]\n                          (println (class s))\n                          (cond \n                           (= s \\D) :diamond\n                           (= s \\S) :spade\n                           (= s \\H) :heart\n                           (= s \\C) :club))\n          (determine-rank [v]\n                          (println (class v))\n                           (cond \n                            (number? (read-string (str v))) (- (read-string (str v)) 2)\n                            (= v \\T) 8\n                            (= v \\J) 9\n                            (= v \\Q) 10\n                            (= v \\K) 11\n                            (= v \\A) 12))]\n    {:suit (determine-suit (nth card 0))\n    :rank (determine-rank (nth card 1))}))", "problem": 128, "user": "517531c6e4b07031762f2eea"}, {"code": "(fn f [s]\n  (let [suit {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \n              \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit (first s)) :rank (rank (second s))}))", "problem": 128, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn [[a b]]\n   {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} a)\n    :rank ((zipmap \"23456789TJQKA\" (range)) b)}\n)", "problem": 128, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn card [[x y]] (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade} ranks {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} ]\n                  {:suit (get suits x) :rank (if (> 60 (int y)) (- (int y) 50) (get ranks y))}))", "problem": 128, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "(fn [s]\n   (let [suit { \\S :spade \\D :diamond \\H :heart \\C :club }]        \n        (letfn [\n          (get-rank [c]\n                    (cond\n                     (= c \\T) 8\n                     (= c \\J) 9\n                     (= c \\Q) 10\n                     (= c \\K) 11\n                     (= c \\A) 12\n                     :else (- (#(Integer/parseInt %) (str c)) 2)))]\n         { :suit (suit (first s)) :rank (get-rank (second s)) })))", "problem": 128, "user": "506ba58be4b0eda3100c090b"}, {"code": "(fn [[s v]]\n  {:suit (get {\\S :spade \\D :diamond \\H :heart \\C :club} s)\n  :rank (cond\n         (= \\T v) 8\n         (= \\J v) 9\n         (= \\Q v) 10\n         (= \\K v) 11\n         (= \\A v) 12\n         :else (- (int v) 50))})", "problem": 128, "user": "4f3ca5a6e4b0e243712b1f53"}, {"code": "(fn [a] \n  (let [ranking (fn [x]\n                  (cond\n                   (= x \\T) 8\n\t\t           (= x \\J) 9\n\t\t           (= x \\Q) 10\n\t\t           (= x \\K) 11\n\t\t           (= x \\A) 12\n                   :else (- (read-string (str x)) 2)))\n        suit (fn [y] (cond\n                     (= y \\D) :diamond\n\t\t             (= y \\H) :heart\n\t\t             (= y \\S) :spade\n\t\t             (= y \\C) :club))]\n    {:suit (suit (nth a 0))\n     :rank (ranking (nth a 1))}))", "problem": 128, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn\n  [s]\n  (let [suit ((keyword (.substring s 0 1))\n              {:D :diamond\n               :H :heart\n               :C :club\n               :S :spade})\n        rank (get {\"2\" 0\n                   \"3\" 1\n                   \"4\" 2\n                   \"5\" 3\n                   \"6\" 4\n                   \"7\" 5\n                   \"8\" 6\n                   \"9\" 7\n                   \"T\" 8\n                   \"J\" 9\n                   \"Q\" 10\n                   \"K\" 11\n                   \"A\" 12}\n                  (.substring s 1))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "(fn [s] \n  (let [suit (first (seq s))\n        rank (second (seq s))\n        nranks (reduce #(assoc % (char (+ 50 %2)) %2) {} (range 10))\n        ranks (merge nranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12})] \n    {:suit ({\\D :diamond \\C :club \\H :heart} suit) :rank (ranks rank)}))", "problem": 128, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn suit-and-rank [[s r]]\n  (let [suit {\\D :diamond \\S :spade \\H :heart \\C :club}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        ] \n    {:suit (suit s) :rank (rank r)}))", "problem": 128, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn [[s r]] \n  {:suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} s) \n   :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 } r)})", "problem": 128, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn parse-card [s]\n  (let [suit ({\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club} (str (first s)))\n        rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (str (second s)))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "(fn card [s]\n        (let [[s r] (seq s)\n              suit (condp = s\n                          \\D :diamond\n                          \\H :heart\n                          \\S :spade\n                          \\C :club)\n              rank (condp = r\n                          \\A 12\n                          \\K 11\n                          \\Q 10\n                          \\J 9\n                     \t  \\T 8\n                          (- (Integer. (str r)) 2))]\n          {:suit suit :rank rank}))", "problem": 128, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "(fn [[s r]]\n  (let [suits {\\S :spade, \\H :heart, \\D :diamond ,\\C :club}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n               \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (get suits s) :rank (get ranks r)}))", "problem": 128, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "(fn [st] (let [mp \n (zipmap [\"S\" \"C\" \"H\"  \"D\"  \"2\" \"3\" \"4\"  \"5\"  \"6\" \"7\" \"8\" \"9\"  \"T\"  \"J\" \"Q\" \"K\" \"A\"]\n [:spade :club :heart :diamond 0 1 2 3 4 5 6 7 8 9 10 11 12])]\n(zipmap [:suit :rank] (map mp (rest (clojure.string/split st #\"\"))))))", "problem": 128, "user": "517945dce4b0684c1c981a43"}, {"code": "(fn parse_card [cardStr] \n   (let [ [suit rank] cardStr \n         suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n         ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ] \n     {:suit (suits suit),:rank (ranks rank)} ))", "problem": 128, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "(fn cco [card]\n  (let [types  {(keyword \"D\") :diamond (keyword \"S\") :spade (keyword \"C\") :club (keyword \"H\") :heart }\n        ranks [  \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n        [tp rn] (seq card)\n        card-type (types (keyword (str tp)))\n        rank (.indexOf ranks (str rn))\n        ]\n    {:suit card-type :rank rank}\n    )\n  )", "problem": 128, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "(fn [s]\n    (let [st (seq s)\n          suits {\\D :diamond \\H :heart\n                 \\C :club    \\S :spade}\n          ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n      (hash-map :suit (suits (first st)) :rank (.indexOf ranks (second st)))\n      ))", "problem": 128, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "#(let [c {\\D :diamond \\H :heart \\C :club \\S :spade}\n       r {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5\n          \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n   {:suit (c (first %)) :rank (r (last %))})", "problem": 128, "user": "51b091e9e4b0c53cf2e68a68"}, {"code": "(fn [x]\n  (let [[s r] x]\n    {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} s)\n     :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)}))", "problem": 128, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn [card]\n  (let [suits {\\H :heart \\C :club \\D :diamond \\S :spade}\n        ranks (conj (vec (map (comp first str) (range 2 10))) \\T \\J \\Q \\K \\A)]\n        (assoc {} :suit (suits (first card)) :rank (.indexOf ranks (second card)))))", "problem": 128, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "(fn card [[suit rank]] \n  {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} suit),\n   :rank (let [irank (- (int rank) 50)] (if (<= 0 irank 8) irank ({\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} rank)))})", "problem": 128, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn [rep]\n  (let [m1 {\\S :spade \\H :heart \\D :diamond \\C :club}\n        m2 {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit (first rep)\n        rank (last rep)]\n    {:suit (m1 suit) :rank (m2 rank)}))", "problem": 128, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn [c] \n  (let [suit (case (.toString (first c))\n               \"D\" :diamond\n               \"H\" :heart\n               \"S\" :spade\n               \"C\" :club)\n        rank (case (.toString (second c))\n               \"A\" 12\n               \"K\" 11\n               \"Q\" 10\n               \"J\" 9\n               \"T\" 8\n               (-  (Integer/parseInt (.toString (second c))) 2))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn [[s r]]\n    (let [suit {\\D :diamond \\S :spade \\C :club \\H :heart}\n          rank {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12\n                \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7}]\n    {:suit (suit s) :rank (rank r)})\n  )", "problem": 128, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn [inputString]\n(let \n  [suits {\\D :diamond \\S :spade \\H :heart \\C :club}\n   ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))\n   suit (suits (first inputString))\n   rank (ranks (second inputString))]\n  {:suit suit :rank rank}))", "problem": 128, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "(fn [lp]\n  (let [suit (condp = (first lp)\n               \\S :spade\n               \\H :heart\n               \\D :diamond\n               \\C :club)\n        rank (condp = (second lp)\n               \\2 0\n               \\3 1\n               \\4 2 \n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12)]\n    {:suit suit :rank rank}))", "problem": 128, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn [x]\n  (let [suit (first x)\n        rank (last x)\n        suitfn (fn [suit]\n                 (case suit\n                   \\H :heart\n                   \\C :club\n                   \\S :spade\n                   \\D :diamond))\n        rankfn (fn [rank]\n                 (case rank\n                   \\2 0\n                   \\3 1\n                   \\4 2\n                   \\5 3\n                   \\6 4\n                   \\7 5\n                   \\8 6\n                   \\9 7\n                   \\T 8\n                   \\J 9\n                   \\Q 10\n                   \\K 11\n                   \\A 12))\n        ]\n    {:suit (suitfn suit) :rank (rankfn rank)} ))", "problem": 128, "user": "5047782ce4b0371827a27bc2"}, {"code": "(fn [[a b]]{:suit ({\\H :heart \\D :diamond \\S :spades \\C :club} a) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} b)})", "problem": 128, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn [s] \n  (let [suits {\\D :diamond \\H :heart \\S :spade, \\C :club}\n        ranks (into {} (map vector \"23456789TJQKA\" (range 13)))]\n          {:suit (suits (first s)) :rank (ranks (second s)) }))", "problem": 128, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "#(let [themap {\\D :diamond, \\H :heart, \\C :club, \\S :spade, \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n   {:suit (themap (first (seq %))), :rank (themap (second (seq %)))})", "problem": 128, "user": "51bf4560e4b013aa0d74b817"}, {"code": "(fn [card]\n  (let [suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rank \"23456789TJQKA\"]\n    {:suit (get suit (first card))\n     :rank (.indexOf rank (int (second card)))}))", "problem": 128, "user": "519db0ede4b037b32803f9b9"}, {"code": "#(hash-map :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first %)) :rank ((zipmap (seq \"23456789TJQKA\") (range)) (last %)))", "problem": 128, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "(fn [[s r]]\n  {:suit ((zipmap \"DHCS\" [:diamond :heart :club :spade]) s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "#(let [suits {\\S :spade \\D :diamond \\H :heart \\C :club}\n       ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n       card (seq %)]\n   (hash-map :suit (get suits (first card)) :rank (get ranks (second card))))", "problem": 128, "user": "51ab1da1e4b04e3dc0c27b30"}, {"code": "(fn [card]\n                           (let [rank (case (second card)\n                                        \\A 12\n                                        \\K 11\n                                        \\Q 10\n                                        \\J 9\n                                        \\T 8\n                                        (- (read-string (str (second card))) 2))\n                                 suit (case (first card)\n                                        \\S :spade\n                                        \\D :diamond\n                                        \\H :heart\n                                        \\C :club)]\n                             {:suit suit :rank rank}))", "problem": 128, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn [[x y]]\n  (let [m \n  (assoc {} :suit (condp = x\n    \\D :diamond\n    \\H :heart\n    \\C :club\n    \\S :spade\n    ))\n  ]\n  (assoc m :rank (- (condp = y\n                   \\K 13\n                   \\Q 12\n                   \\J 11\n                   \\T 10\n                   \\A 14\n                   (Integer/parseInt (str y))) 2)\n         )\n  )\n  )", "problem": 128, "user": "51bec919e4b013aa0d74b800"}, {"code": "#(let [[s v] %]\n   {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} s),\n    :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] v)})", "problem": 128, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [s]\n  (let [suit-name (-> s (get 0)),\n        rank-name (-> s (get 1))]\n    (assoc\n        {}\n      :suit ({\\D :diamond,\n              \\H :heart,\n              \\C :club,\n              \\S :spades} suit-name)\n      :rank ((assoc\n                 (apply hash-map\n                        (interleave (apply str (range 2 11)) (range 0 9)))\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12) rank-name))))", "problem": 128, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "(fn [s]\n  (let [suit {\\D :diamond\n              \\S :spade\n              \\H :heart\n              \\C :club}\n        rank {\\A 12\n              \\K 11\n              \\Q 10\n              \\J 9\n              \\T 8\n              \\9 7\n              \\8 6\n              \\7 5\n              \\6 4\n              \\5 3\n              \\4 2\n              \\3 1\n              \\2 0}]\n    {:suit (get suit (first s))\n     :rank (get rank (last s))}))", "problem": 128, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn [x]\n    (assoc {}\n      :suit\n      ({\n        \\D :diamond\n        \\H :heart\n        \\C :club\n        \\S :spade } (first x))\n      :rank\n      ({\n       \\2 0\n       \\3 1\n       \\4 2\n       \\5 3\n       \\6 4\n       \\7 5\n       \\8 6\n       \\9 7\n       \\T 8\n       \\J 9\n       \\Q 10\n       \\K 11\n       \\A 12\n         } (last x)\n      \n        )))", "problem": 128, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn[x] (let [suit {:D :diamond, :H :heart, :C :club, :S :spade} rank {:2 0, :3 1, :4 2, :5 3, :6 4, :7 5, :8 6, :9 7, :T 8, :J 9, :Q 10, :K 11 :A 12}] {:suit (get suit (keyword (subs x 0 1))) :rank (get rank (keyword (subs x 1 2)))}))", "problem": 128, "user": "4f32135ae4b0d6649770a08e"}, {"code": "(fn [strng]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spades}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit (suits (first strng))\n        rank (ranks (second strng))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "(fn [[f l]]\n   {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} f) :rank (.indexOf \"23456789TJQKA\" (str l))})", "problem": 128, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn playing-cards [code]\n  (let [suits {\"S\" :spade \"D\" :diamond \"H\" :heart \"C\" :club}\n        royalty {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n        code-suit (str (first code))\n        code-rank (str (second code))]\n    (hash-map :suit (get suits code-suit)\n              :rank (if (contains? royalty code-rank)\n                      (get royalty code-rank)\n                      (- (Integer/parseInt code-rank) 2)))))", "problem": 128, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn __ [s]\n  (let [suit-table {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spades}\n        rank-table {\"A\" 12,\n                    \"K\" 11,\n                    \"Q\" 10,\n                    \"J\" 9,\n                    \"T\" 8,\n                    \"9\" 7,\n                    \"8\" 6,\n                    \"7\" 5,\n                    \"6\" 4,\n                    \"5\" 3,\n                    \"4\" 2,\n                    \"3\" 1,\n                    \"2\" 0}\n        ss (seq s)]\n    \n    (assoc {}\n      :suit (suit-table (str (first ss)))\n      :rank (rank-table (str (second ss))))))", "problem": 128, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "(fn [card]\n  (let [suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}\n        ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 0 14))]\n    {:suit (suits (first card)) :rank (ranks (second card))}))", "problem": 128, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [[a b]]\n  (let [s {\\D :diamond \\S :spade \\H :heart \\C :club}\n        r (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))]\n    {:suit (s a) :rank (r b)}))", "problem": 128, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn [[suit rank]]\n  {:suit ((zipmap \"DHCS\" [:diamond :heart :club :spade]) \n            suit)\n   :rank ((zipmap \"TJQKA\" (range 8 13)) \n            rank\n            (- (int rank) (int \\2)))})", "problem": 128, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn [[s r]]\n  {:suit \n    (case s\n          \\S :spade\n          \\H :heart\n          \\D :diamond\n          \\C :club)\n   :rank\n    (case r\n          \\2 0\n          \\3 1\n          \\4 2\n          \\5 3\n          \\6 4\n          \\7 5\n          \\8 6\n          \\9 7\n          \\T 8\n          \\J 9\n          \\Q 10\n          \\K 11\n          \\A 12)})", "problem": 128, "user": "51d10b1fe4b067c36548635e"}, {"code": "(fn carte [x] (array-map\n:suit (second (find {\\C :club \\D :diamond \\H :heart \\S :spade}\n                    (first x)))\n:rank (second (find {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n                    (second x))) ))", "problem": 128, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn [card]\n  {:suit (case (first card)\n          \\D :diamond\n          \\H :heart\n          \\S :spade\n          \\C :club)\n  :rank (case (second card)\n         \\A 12\n         \\K 11\n         \\Q 10\n         \\J 9\n         \\T 8\n         (- (read-string (str (second card))) 2))})", "problem": 128, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn f [n]\n    (cond\n    (and (string? n) (= (first n) \\D)) (merge (hash-map :suit :diamond) (f (last n)))\n    (and (string? n) (= (first n) \\H)) (merge (hash-map :suit :heart) (f (last n)))\n    (and (string? n) (= (first n) \\C)) (merge (hash-map :suit :club) (f (last n)))\n    (and (string? n) (= (first n) \\S)) (merge (hash-map :suit :spade) (f (last n)))\n    (= n \\T) (hash-map :rank 8)\n    (= n \\J) (hash-map :rank 9)\n    (= n \\Q) (hash-map :rank 10)\n    (= n \\K) (hash-map :rank 11)\n    (= n \\A) (hash-map :rank 12)\n    (and (<= (- (int n) 48) 9) (>= (- (int n) 48) 0)) (hash-map :rank (- (int n) 50))\n    )\n)", "problem": 128, "user": "51d1111ce4b067c36548635f"}, {"code": "(let [\n    parse-rank (into {} (map-indexed #(vector %2 %1) \"23456789TJQKA\"))\n    parse-suit {\\H :heart \\D :diamond \\C :club \\S :spade}\n    parse-card (fn [x] {:suit (parse-suit (first x)) :rank (parse-rank (second x))})]\n    parse-card)", "problem": 128, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn [s]\n   (let [m {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade\n        \"A\" 12 \"K\" 11 \"Q\" 10 \"J\" 9 \"T\" 8 \"9\" 7 \"8\" 6 \n        \"7\" 5 \"6\" 4 \"5\" 3 \"4\" 2 \"3\" 1 \"2\" 0}\n         rs {}]\n    (assoc (assoc rs :suit (m (str (first s)))) :rank (m (str (second s))))))", "problem": 128, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn suit-rank-pair [x]\n   (hash-map\n     :suit\n     ({\\S :spade \\C :club \\D :diamond \\H :heart} (first x))\n     :rank\n     ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (first (rest x)))\n     ))", "problem": 128, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn [[s r]] (let [ranks (vec \"23456789TJQKA\")\n                         suits {\\C :club \\D :diamond \\H :heart \\S :spade}]\n                        {:suit (suits s) :rank (.indexOf ranks r)}))", "problem": 128, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn [[suit-key rank-key]]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks (zipmap (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range))]\n    {:suit (suits suit-key) :rank (ranks (str rank-key))}))", "problem": 128, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "(fn map-it [x]\n  (let [suits {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suits (first x)), :rank (ranks (last x))}\n  ))\n;; still messing w/ language semantics\n;; (\\B :map) vs (map \\B)\n;;", "problem": 128, "user": "514cfa27e4b019235f6c057d"}, {"code": "#(let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n\t  ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n\t         \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n\t         {:suit (suits (first %)), :rank (ranks (second %))})", "problem": 128, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "#(let [suit->val {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank->val {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (assoc (assoc {} :suit (suit->val (first %))) :rank (rank->val (second %))))", "problem": 128, "user": "504dffe2e4b078edc5f5938b"}, {"code": "(fn [name] {\n\t:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} (first name)),\n\t:rank (.indexOf \"23456789TJQKA\" (int (last name)))})", "problem": 128, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn [x]\n   (let [[s r] (seq x)]\n     {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} s)\n      :rank  ({\\2 0, \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)\n     }\n     )\n   )", "problem": 128, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn [[s r]] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s) :rank (.indexOf (seq \"23456789TJQKA\") r)})", "problem": 128, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "(fn [s]\n  (letfn [(f [x] (f3 (first x)))\n          (l [x] (f2 (last x)))\n          (f2 [x] \n            (case x\n              \\2 0\n              \\3 1\n              \\4 2\n              \\5 3\n              \\6 4\n              \\7 5\n              \\8 6\n              \\9 7\n              \\T 8\n              \\J 9\n              \\Q 10\n              \\K 11\n              \\A 12))\n          (f3 [x] \n            (case x \n              \\D :diamond \n              \\H :heart \n              \\C :club\n              \\S :spade))]\n    (hash-map :suit (f s) :rank (l s))))", "problem": 128, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [card]\n   (let [suit {\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade}\n         rank {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n         card-suit (subs card 0 1)\n         card-rank (subs card 1 2)]\n      (hash-map :suit (suit card-suit) :rank (rank card-rank))))", "problem": 128, "user": "51e0198ee4b01188f0627539"}, {"code": "(fn [[s r]]\n  (let [suits {\\S :spade \\H :heart \\C :club \\D :diamond}\n        ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n    {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "51c8301ee4b07ef393169e4d"}, {"code": "(fn [s]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first s))\n   :rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))\n             (.indexOf (range 2 10)\n                       (Integer/parseInt (str (second s)))))})", "problem": 128, "user": "516199bbe4b009fba0926e36"}, {"code": "(fn [[x y]]\n    {:suit ({\\H :heart \\S :spade \\D :diamond \\C :club} x)\n     :rank ((into {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (map (fn [i] [(char (+ i 50)) i]) (range 10))) y)})", "problem": 128, "user": "4ea5e32a535d7eef308072de"}, {"code": "(fn [card]\n  (let [[c r] (seq card)]\n    {:suit (second (find {\\D :diamond \\H :heart \\C :club \\S :spade} c))\n     :rank (if (contains? #{\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9} r) (- (int r) (int \\2))\n             (second (find {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)))}))", "problem": 128, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn [x]\n  (let [rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n      suit {\\S :spade \\H :heart \\D :diamond \\C :club}]\n    {:suit (suit (nth x 0)) :rank (rank (nth x 1))}))", "problem": 128, "user": "503255d0e4b0e78df07b092b"}, {"code": "#(let [suitmap {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n       rankmap {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7,\n                \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n   {:suit (suitmap ((vec %) 0)) :rank (rankmap ((vec %) 1))})", "problem": 128, "user": "51e00020e4b01188f0627534"}, {"code": "#(identity { :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (last %)), :suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spades} (first %))})", "problem": 128, "user": "51eca2ace4b069f463c22cd0"}, {"code": "(fn [s]\n  (let [res (atom {})\n        v (vec s)\n        rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    (condp = (first v)\n      \\D (swap! res assoc :suit :diamond)\n      \\H (swap! res assoc :suit :heart)\n      \\C (swap! res assoc :suit :club)\n      \\S (swap! res assoc :suit :spade)\n      )\n    (swap! res assoc :rank (rank (second v)))\n    @res\n   ))", "problem": 128, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn [card-str]\n  (let [suit-str (str (first card-str))\n        rank-str (str (second card-str))\n        suit-map {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spade}\n        rank-map (into {\"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12} (vec (map #(vector (str %) (- % 2)) (range 2 10) )))] \n    {:suit (suit-map suit-str) ,:rank (rank-map rank-str)}\n  )\n)", "problem": 128, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn [SR]\n  (let [suits { \\D :diamond, \\C :club, \\H :heart, \\S :spade }\n        ranks { \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12 }]\n    (merge (hash-map :suit (get suits (first (seq SR)))) (hash-map :rank (get ranks (last (seq SR)))))\n   )\n)", "problem": 128, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "(let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n      ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6 \\9 7 \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n  (fn [[suit rank]]\n    {:suit (suits suit),\n    :rank (ranks rank)}))", "problem": 128, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank (let [c (- (int r) 50)]\n           (if (< c 8) c (case r \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)))})", "problem": 128, "user": "4e3f480c535dc968683fc497"}, {"code": "(fn [s]\n  (let [suits {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club}\n        ranks (merge {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (apply hash-map (interleave (map str (range 2 10)) (range))))\n        [suit rank] (map str s)]\n    {:suit (suits suit) :rank (ranks rank)}))", "problem": 128, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn [[s r]]\n  {:suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank (or (get {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r) (- ((comp read-string str) r) 2))})", "problem": 128, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn \n  [st]\n  (let [suits {\\S :spade, \\C :club, \\H :heart, \\D :diamond}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        s     (first st)\n        r     (second st)]\n    {:suit (suits s),\n     :rank (ranks r)}))", "problem": 128, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn [s]\n  (let [both (re-seq #\".\" s)\n        suit (first both)\n        rank (second both)]\n    {:suit ({\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club} suit)\n     :rank ({\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12} rank)}))", "problem": 128, "user": "50d882d4e4b01f0871336e69"}, {"code": "(fn [a]\n   (let [\n         [s r] a\n         suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n         rank-map {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0 }]\n     {:suit (suit-map s) :rank (rank-map r)})\n   )", "problem": 128, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn [exp]\n  (let [suit-map {\\D :diamond, \\H :heart, \\C :club, \\S :spades}\n        rank-seq (concat (map #(char (+ % 48)) (range 2 10)) [\\T \\J \\Q \\K \\A])]\n    {:suit (suit-map (first exp)), :rank (.indexOf rank-seq (second exp))}))", "problem": 128, "user": "51df825de4b01188f062752b"}, {"code": "#(let [s (get % 0)\n       r (get % 1)]\n   (into {}\n         (vector \n          (vector :suit\n           (cond\n            (= s \\D) :diamond\n            (= s \\H) :heart\n            (= s \\C) :club\n           )\n          )\n          (vector :rank\n            (cond\n             (= r \\A) 12\n             (= r \\K) 11\n             (= r \\Q) 10\n             (= r \\J) 9\n             (= r \\T) 8\n             :else (- (read-string (str r)) 2)\n            )\n          )\n         )\n    )\n)", "problem": 128, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn card\n  [card-str]\n  (letfn [(suit [s] (condp = s\n                      \"D\" :diamond\n                      \"H\" :heart\n                      \"C\" :club\n                      \"S\" :spades))\n          (rank [r] (condp = r\n                      \"T\" 8\n                      \"J\" 9\n                      \"Q\" 10\n                      \"K\" 11\n                      \"A\" 12\n                      (- (Integer/parseInt r) 2)))]\n    {:suit (suit (-> card-str first str))\n     :rank (rank (-> card-str second str))}))", "problem": 128, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank (.indexOf \"23456789TJQKA\" (int r))})", "problem": 128, "user": "4fbf2818e4b081705acca317"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} s)\n   :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r)})", "problem": 128, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [[s r]]\n  (let [ss {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rs (seq \"23456789TJQKA\")]\n    {:suit (ss s) :rank (.indexOf rs r)}))", "problem": 128, "user": "5046ee3ee4b03b02161376b4"}, {"code": "(fn [[s r]]\n   (let [suit \n         (case s\n           \\C :club\n           \\D :diamond\n           \\H :heart\n           \\S :spade)\n         rank\n         (case r\n           \\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12)]\n     {:suit suit :rank rank}))", "problem": 128, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "#(zipmap [:suit :rank]\n        [(first (map {\\D :diamond \\H :heart \\C :club \\S :spades} (list (first %))))\n         (first (map {\\2 0 \\3 1 \\4 2 \\5 3\n                      \\6 4 \\7 5 \\8 6 \\9 7 \\T 8\n                      \\J 9 \\Q 10 \\K 11 \\A 12} (list (second %))))\n        ]\n)", "problem": 128, "user": "518aec06e4b06da86c1973c2"}, {"code": "#(hash-map :suit\n  ({\\D :diamond \\S :spade \\H :heart \\C :club} (first %))\n  :rank\n  ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last %)))", "problem": 128, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "(fn card [cs]\n  (let [suits {\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade}\n        ranks (zipmap (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range 0 13))\n        S (.substring cs 0 1)\n        R (.substring cs 1 2)]\n    {:suit (suits S) :rank (ranks R)}))", "problem": 128, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "#(into {} {:suit (get (zipmap [\\D \\H \\C \\S] [:diamond :heart :club :spade]) (first %))\n           :rank (get (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13)) (second %))})", "problem": 128, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn rec-playing-card [card-string]\n  (let [suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}\n        ranks {\\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12}]\n    {:suit (get suits (first (seq card-string)))\n     :rank (get ranks (last (seq card-string)))}))", "problem": 128, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "(fn [data] {:suit (case (str (first data))\n                    \"D\" :diamond\n                    \"H\" :heart\n                    \"C\" :club\n                    \"S\" :spade)\n  \t\t    :rank (case (str (second data))\n                    \"T\" 8\n                    \"J\" 9\n                    \"Q\" 10\n                    \"K\" 11\n                    \"A\" 12\n                    (- (Integer/parseInt (str (second data))) 2))})", "problem": 128, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "#(apply array-map\n (interleave \n  [:suit :rank]\n  (map \n    {\\D :diamond \\H :heart \\S :spade \\C :club\n     \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n    %1)))", "problem": 128, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn [s] \n  (let [dict {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 \\S :spade \\H :heart \\D :diamond \\C :club}\n        [a b] (seq s)]\n    {:suit (dict a) :rank (dict b)}))", "problem": 128, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn [card]\n  (let [ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n        suits { \\S :spade \\D :diamond \\H :heart \\C :club }]\n    { :suit (suits (first card))\n      :rank (.indexOf ranks (second card)) }))", "problem": 128, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "#(zipmap [:suit :rank]\n         (map (zipmap \"CDHS23456789TJQKA\"\n                      `(:club :diamond :heart :spade ~@(range)))\n              %))", "problem": 128, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [[s r]]\n    (let [\n        suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rank (apply assoc {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n                (mapcat (juxt (comp first str) #(- % 2)) (range 2 10)))\n            ]\n    { :suit (suit s) :rank (rank r) }))", "problem": 128, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn carddeck [abbrev]\n  (let [suit-char (first abbrev)\n        rank-char (second abbrev)\n        suit (condp = suit-char\n               \\D :diamond\n               \\C :club\n               \\H :heart\n               \\S :spade)\n        rank (condp = rank-char\n               \\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12)\n        template {:suit suit :rank rank}]\n    template))", "problem": 128, "user": "51f82769e4b09be9c177e527"}, {"code": "(fn [card-str]\n  (let [suits { \\H :heart, \\C :club, \\S :spade, \\D :diamond }\n        ranks (-> \"23456789TJQKA\" char-array seq (zipmap (range)))]\n    { :suit (suits (first card-str))\n      :rank (ranks (last card-str)) }))", "problem": 128, "user": "5080a697e4b01a93d3f38e49"}, {"code": "#(let [suits {\"H\" :heart \"D\" :diamond \"C\" :club \"S\" :spade} ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n  {:suit (suits (subs % 0 1)) :rank (ranks (subs % 1))})", "problem": 128, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn [s]\n  (let [u (fn [s]\n            (condp = s\n              \"H\" :heart\n              \"C\" :club\n              \"D\" :diamond\n              \"S\" :spade\n              ))\n        r (fn [s]\n            (condp = s\n              \"2\" 0\n              \"3\" 1\n              \"4\" 2\n              \"5\" 3\n              \"6\" 4\n              \"7\" 5\n              \"8\" 6\n              \"9\" 7\n              \"T\" 8\n              \"J\" 9\n              \"Q\" 10\n              \"K\" 11\n              \"A\" 12\n              ))]\n    {:suit (u (str (first s))) :rank (r (str (last s)))}))", "problem": 128, "user": "52091d57e4b0e152394d76f0"}, {"code": "(fn [[suit rank]]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        hi-ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        low-rank (fn [c] (- (int c) (int \\2)))]\n   (hash-map :suit (suits suit) \n             :rank (hi-ranks rank (low-rank rank)))))", "problem": 128, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn cards [s]\n  (let [[sk rk & _] s\n        suit-map {\\H :heart \\C :club \\D :diamond \\S :spade}\n        rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit-map sk) :rank (rank-map rk)}))", "problem": 128, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "#(zipmap [:suit :rank] (vector (get {\\S :spade, \\H :heart, \\D :diamond, \\C :club} (first %)) (get {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (second %))))", "problem": 128, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn [[s r]]\n  {:rank ((zipmap (seq \"23456789TJQKA\") (range 13)) r)\n  :suit ({\\H :heart \\D :diamond \\C :club \\S :spade} s)})", "problem": 128, "user": "4ecc1d85535d23f0362276f8"}, {"code": "(fn [[s r]]\n\t(let [values (zipmap \"23456789TJQKA\" (range))\n\t\t  suits  (zipmap \"HDSC\" [:heart :diamond :spade :club]) ]\n\t\t(hash-map :suit (suits s) :rank (values r))\n\t\t)\n\t)", "problem": 128, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "(fn [[cs cr]] (let [r (zipmap \"23456789TJQKA\" (range)) \n       s {\\S :spade \\H :heart \\D :diamond \\C :club}]\n   (hash-map :suit (s cs) :rank (r cr))))", "problem": 128, "user": "520e32a2e4b066f3ea161c93"}, {"code": "(fn [arg]\n  (let [suit {\\D :diamond \\S :spade \\H :heart \\C :club} \n        rank {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0}]\n    {:suit (suit (first arg)) :rank (rank (last arg))}))", "problem": 128, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn [s]\n\t(let [\n\t\tfs (first s)\n\t\tss (second s)]\n\t\t{\n\t\t\t:suit (cond\n\t\t\t\t(= \\D fs) :diamond\n\t\t\t\t(= \\H fs) :heart\n\t\t\t\t(= \\S fs) :spade\n\t\t\t\t(= \\C fs) :club)\n\t\t\t:rank (cond\n\t\t\t\t(Character/isDigit ss) (- (int ss) (int \\2))\n\t\t\t\t(= \\T ss) 8\n\t\t\t\t(= \\J ss) 9\n\t\t\t\t(= \\Q ss) 10\n\t\t\t\t(= \\K ss) 11\n\t\t\t\t(= \\A ss) 12)}))", "problem": 128, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn [str]\n  (let [suit (first str)\n        rank (second str)\n        suittable {\\D :diamond,\\H :heart,\\C :club,\\S :spade}\n        ranktable {\\2 0,\\3 1,\\4 2,\\5 3,\\6 4,\\7 5,\\8 6,\\9 7,\\T 8,\\J 9,\\Q 10,\\K 11,\\A 12}]\n    (assoc {} :suit (suittable suit) :rank (ranktable rank))))", "problem": 128, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn [[s n]]\n  (let [suits (zipmap (map str \"SHDC\") '(:spade :heart :diamond :club))\n          number (zipmap ( concat  (map str (range 2 10)) (map str \"TJQKA\")) (range 0 13))]\n                       {:suit (suits (str s)) :rank (number (str n ))}\n                                     )\n                       )", "problem": 128, "user": "518c5236e4b087e178201de0"}, {"code": "(fn [card]\n  (let [[suit rank] card]\n    {:suit\n     (cond\n       (= \\D suit) :diamond\n       (= \\H suit) :heart\n       (= \\S suit) :spade\n       (= \\C suit) :club)\n    :rank\n    (if (<= 50 (int rank) 57)\n      (- (int rank) 50)\n      (cond\n       (= \\T rank) 8\n       (= \\J rank) 9\n       (= \\Q rank) 10\n       (= \\K rank) 11\n       (= \\A rank) 12))}))", "problem": 128, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn [[suit rank :as card]]\n  {:suit (get {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade} suit)\n   :rank (get {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8}\n              rank\n              (- (int rank) 50))})", "problem": 128, "user": "51f9527fe4b09be9c177e549"}, {"code": "#(let [r (into {} (map vector \"23456789TJQKA\" (range 13)))\n       s { \\S :spade \\H :heart \\D :diamond \\C  :club } ]\n   { :suit (s (first %)) :rank (r (second %)) } )", "problem": 128, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "(fn translate [card] {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} (first card)) :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0} (second card)) })", "problem": 128, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn [x] (let [suit-map (hash-map :D :diamond, :H :heart, :S :spade, :C :club)\n    \t  rank-map (zipmap '(:2 :3 :4 :5 :6 :7 :8 :9 :T :J :Q :K :A) (range))\n    \t  split-arg (drop 1 (clojure.string/split x #\"\"))]\n    \t(hash-map \n\t    \t:suit ((keyword (first split-arg)) suit-map),\n\t    \t:rank ((keyword (second split-arg)) rank-map)\n    \t)\n    ))", "problem": 128, "user": "52016690e4b0b2e020a18f0f"}, {"code": "(fn [x]\n  (let [rank (last (seq x))\n        suit (first (seq x))\n        suits (hash-map \\S :spade \\D :diamond \\H :heart \\C :club)\n        ranks (hash-map \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)\n        get-map (fn [r s] (assoc {} :rank (ranks r) :suit (suits s)))]\n    (get-map rank suit)))", "problem": 128, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "(fn [c]\n          {:suit (#(cond\n                    (= \\C %) :club\n                    (= \\D %) :diamond\n                    (= \\H %) :heart\n                    (= \\S %) :spade) (first c))\n           :rank (#(cond\n                    (= \\T %) 8\n                    (= \\J %) 9\n                    (= \\Q %) 10\n                    (= \\K %) 11\n                    (= \\A %) 12\n                    :else (- (Integer/parseInt (str %)) 2)) (last c))})", "problem": 128, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn thingie [s]\n  (let [suit (first s)\n        rank (first (rest s))\n        lookup1 {\\H :heart \\D :diamond \\S :spade \\C :club}\n        lookup2 {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (if (some (fn [x] (= x rank)) [\\T \\J \\Q \\K \\A])\n      {:suit (get lookup1 suit) :rank (get lookup2 rank)}\n      {:suit (get lookup1 suit) :rank (- (int rank) 50)})))", "problem": 128, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn [s]\n  (let [suits {\"D\" :diamond\n              \"H\" :heart\n              \"C\" :club\n              \"S\" :spade}\n       ranks {\"2\" 0\n              \"3\" 1\n              \"4\" 2\n              \"5\" 3\n              \"6\" 4\n              \"7\" 5\n              \"8\" 6\n              \"9\" 7\n              \"T\" 8\n              \"J\" 9\n              \"Q\" 10\n              \"K\" 11\n              \"A\" 12}]\n    {:suit (get suits (str (first s)))\n     :rank (get ranks (str (second s)))}))", "problem": 128, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn f [s]\n  (hash-map\n    :suit\n    (cond (= \\D (first s)) :diamond\n          (= \\H (first s)) :heart\n          (= \\C (first s)) :club\n          (= \\S (first s)) :spades)\n    :rank\n    (cond (= \\2 (second s)) 0\n          (= \\3 (second s)) 1\n          (= \\4 (second s)) 2\n          (= \\5 (second s)) 3\n          (= \\6 (second s)) 4\n          (= \\7 (second s)) 5\n          (= \\8 (second s)) 6\n          (= \\9 (second s)) 7\n          (= \\T (second s)) 8\n          (= \\J (second s)) 9\n          (= \\Q (second s)) 10\n          (= \\K (second s)) 11\n          (= \\A (second s)) 12)\n  ))", "problem": 128, "user": "52196842e4b0890f2f822bfa"}, {"code": "(fn [[suit-char rank-char]]\n  (let [suit (case suit-char\n               \\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade)\n        rank (case rank-char\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12\n               (- (Integer. (str rank-char)) 2))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn [[suit rank-char]]\n  (let [suits {\\H :heart \\C :club \\D :diamond  \\S :spade}\n        rank (-> rank-char\n                 int\n                 (- 50)\n                 (#(cond \n                   (< % 10) %\n                   (= % 34) 8\n                   (= % 24) 9\n                   (= % 31) 10\n                   (= % 25) 11\n                   (= % 15) 12)))]\n  {:suit (suits suit) :rank rank}))", "problem": 128, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn [[suit rank]] { :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n  \t\t\t\t    :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0} rank) })", "problem": 128, "user": "5216933be4b000d124d989cf"}, {"code": "(fn [s]\n  {:suit (condp = (first s)\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (condp = (second s)\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12\n          (- (read-string (str (second s))) 2))\n  })", "problem": 128, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "(fn [[s r]]\n   {:suit ({\\S :spad \\D :diamond \\H :heart \\C :club} s)\n    :rank (first (keep-indexed #(when (= %2 r) %1) \"23456789TJQKA\"))})", "problem": 128, "user": "52271988e4b04e78ff2e19a6"}, {"code": "(fn [c]\n  (let [c (str c)]\n    {:suit ({\\D :diamond\n             \\H :heart\n             \\S :spade\n             \\C :club}\n            (first c))\n     :rank ({\\A 12\n             \\K 11\n             \\Q 10\n             \\J 9\n             \\T 8\n             \\9 7\n             \\8 6\n             \\7 5\n             \\6 4\n             \\5 3\n             \\4 2\n             \\3 1\n             \\2 0} (second c))}))", "problem": 128, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "#(zipmap [:suit :rank] (map (zipmap \"SHDC23456789TJQKA\" (concat [:spade :heart :diamond :club ] (range 0 13))) %))", "problem": 128, "user": "5065faf9e4b0313a384e5645"}, {"code": "(fn [[s r]]\n  (let [suits { \\D :diamond, \\H :heart, \\C :club, \\S :spades}\n        rank (zipmap \"23456789TJQKA\" (range 13))]\n    { :suit (suits s) :rank (rank r)}))", "problem": 128, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn conv [s]\n  (let [suitmap {\\H :heart, \\D :diamond, \\C :club, \\S :suit},\n        valuemap {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suitmap (first s)), :rank (valuemap (second s))}))", "problem": 128, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn conv [[s r]]\n  (let [s (str s)\n        r (str r)\n        suits {\"D\" :diamond, \"H\" :heart, \"S\" :spade, \"C\" :club}\n        rank  (merge {\"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12} \n                  (let [nums (range 2 10)]\n                    (zipmap (map str nums)  (map #(- % 2) nums))))]\n    {:suit (suits s) :rank (rank r)} ))", "problem": 128, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn card-parser [[s r]]\n  (let [suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} s)\n        rank (if (> (Character/digit r 10) -1)\n               (- (Character/digit r 10) 2)\n               ({\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r))]\n    {:suit suit, :rank rank}))", "problem": 128, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn [col]\n\t(let [suit {\\H :heart \\D :diamond \\C :club \\S :spade} \n\t\trank (apply hash-map (interleave \"23456789TJQKA\" (range)))]\n\t\t{:suit (suit (first col)) :rank (rank (last col))}))", "problem": 128, "user": "5131d817e4b06942423563ca"}, {"code": "(fn [card]\n  (let [suits {\"S\" :spade \"H\" :heart \"C\" :club \"D\" :diamond}\n        ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n    (assoc {} :suit (suits (subs card 0 1)) :rank (ranks (subs card 1)))))", "problem": 128, "user": "51857e64e4b0da5a5be3babe"}, {"code": "(fn [s] (let [suit (first s) rank (second s)]\n                 (assoc (assoc {} :rank (get {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0} rank))\n                        :suit (get {\\C :club, \\D :diamond, \\H :heart, \\S :spade} suit))))", "problem": 128, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "(fn [s]\n (let [suit {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spades}\n \t\trank {\"2\" 0 ,\"3\" 1, \"4\" 2, \"5\" 3,\"6\" 4,\"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9,\"Q\" 10, \"K\" 11, \"A\" 12 } \n \t\tb (fn [[x y]]\n \t\t\t{:suit (suit x) :rank (rank y)})]\n \t\t(b (map str s))))", "problem": 128, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn parse-card [card-str]\n(let [suit-char (first card-str)\n      rank-char (second card-str)\n      low-rank (int \\2)\n      rank (cond\n            \t(= rank-char \\A) 12\n            \t(= rank-char \\K) 11\n            \t(= rank-char \\Q) 10\n            \t(= rank-char \\J) 9\n            \t(= rank-char \\T) 8\n            \t:else (- (int rank-char) low-rank))]\n  {:rank rank :suit (cond (= suit-char \\H) :heart\n                          (= suit-char \\S) :spade\n                          (= suit-char \\C) :club\n                          (= suit-char \\D) :diamond)}))", "problem": 128, "user": "510591dde4b06d28cacc92eb"}, {"code": "#(assoc {}\n   :suit (case (first %1)\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (case (last %1)\n           \\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12))", "problem": 128, "user": "522f988be4b032bbe3424168"}, {"code": "#(assoc {}\n\t:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} (nth % 0))\n\t:rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (nth % 1))\n )", "problem": 128, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "(fn [card]\n  (let [colour (case (get card 0) \\D :diamond \\S :spades \\H :heart \\C :club)\n   rank_char (str (get card 1))\n   rank (cond\n         (number? (read-string rank_char)) (- (read-string rank_char) 2)\n         (= rank_char \"T\") 8\n         (= rank_char \"J\") 9\n         (= rank_char \"Q\") 10\n         (= rank_char \"K\") 11\n         (= rank_char \"A\") 12\n         )]\n     {:suit colour :rank rank}\n        )\n\n  )", "problem": 128, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "(fn [code]\n    (let [parts (rest (clojure.string/split code #\"\"))\n          suit (get {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club} (first parts))\n          rank (if (re-matches #\"\\d\" (second parts))\n                 (- (Integer/parseInt (second parts)) 2)\n                 (get {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (second parts)))] \n      {:suit suit :rank rank}))", "problem": 128, "user": "51ae350fe4b09397d5109790"}, {"code": "(fn [[suit-char rank-char]]\n  {:suit (case suit-char\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n  :rank (case rank-char\n          \\2 0\n          \\3 1\n          \\4 2\n          \\5 3\n          \\6 4\n          \\7 5\n          \\8 6\n          \\9 7\n          \\T 8\n          \\J 9\n          \\Q 10\n          \\K 11\n          \\A 12)})", "problem": 128, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "(fn [[s r]]\n  (let [suits {\\S :spades \\H :heart \\D :diamond \\C :club}\n        ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n    {:suit (suits s)\n     :rank (ranks r)}))", "problem": 128, "user": "522454f4e4b01819a2de42d3"}, {"code": "(fn [[s r]]\n\t\t(\n\t\tlet [ \n\t\t\tsuite {\\S :spade \\H :heart \\D :diamond \\C :club}  \n\t\t\trank \"23456789TJQKA\"\n\t\t\tret {:suit (suite s) :rank (.indexOf rank (str r)) }\n\t\t]\n\t\tret\n\t\t)\n\t)", "problem": 128, "user": "4f148418535d64f60314643a"}, {"code": "(fn cards                                                                      \n  [card]                                                                         \n  (let [suits {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club}                     \n        ranks (merge (into {}  (map #(vec [(str %) (-  % 2)]) (range 2 10)))     \n                     {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12})]                        \n    {:suit (suits (-> card first str))                                           \n     :rank (ranks (-> card second str))}                                         \n     )                                                                           \n  )", "problem": 128, "user": "50573ed8e4b0012181721987"}, {"code": "(fn [card]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (nth card 0))\n   :rank ((into {} (map (fn [a b] [a b]) (seq \"23456789TJQKA\") (range))) (nth card 1))})", "problem": 128, "user": "4e22b78b535d04ed9115e81e"}, {"code": "#(let [[s r] (seq %)\n      suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n      ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))]\n   {:suit (suits s) :rank (ranks r)})", "problem": 128, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "#(hash-map :suit ({\\D :diamond,\n                   \\S :spade,\n                   \\H :heart,\n                   \\C :club} (first %))\n           :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (last %)))", "problem": 128, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "(fn [[s r]]\n  (let [ctosuit {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ctorank (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (ctosuit s)\n     :rank (ctorank r)}))", "problem": 128, "user": "508923d5e4b06d8254e936e8"}, {"code": "#(let [[s r] (seq %)]\n   {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} s),\n    :rank ((zipmap \"23456789TJQKA\" (range 13)) r)})", "problem": 128, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn [s]\n  { :suit ( {\\D :diamond, \\H :heart, \\S :spade \\C :club} (first s) )\n  :rank ( {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s) )\n  }\n  )", "problem": 128, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "#(let [suits {\\D :diamond \\H :heart \\C :club}\n        ranks (conj (zipmap (range 2 10) (range 9)) {'T 8 'J 9 'Q 10 'K 11 'A 12})\n        s (seq %)\n        sc (first s)\n        rc (last s)]\n    {:suit (suits sc) :rank (ranks (read-string (str rc)))})", "problem": 128, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "(fn recognize-playing-card [[suit symbol-chara]]\n  (let [rank-map (zipmap \"23456789TJQKA\" (range))\n        suit-map (zipmap \"SHDC\" [:spade :heart :diamond :club])]\n    {:suit (suit-map suit)\n    :rank (rank-map symbol-chara)}))", "problem": 128, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [[a b]]\n  (let [cards (zipmap \"DHCTJQKA\" [:diamond :heart :club 8 9 10 11 12])]\n    {:suit (cards a), :rank (cards b (- (int b) 50))}))", "problem": 128, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn [s]\n  (let [suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4,\n               \\7 5, \\8 6, \\9 7, \\T 8, \\J 9,\n               \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits (first s))\n     :rank (ranks (second s))}))", "problem": 128, "user": "52487654e4b05ef8e38e63dc"}, {"code": "#(hash-map\n   :suit ((zipmap (seq \"SHDC\") [:spade :heart :diamond :club]) (get % 0))\n   :rank (.indexOf (seq \"23456789TJQKA\") (get % 1)))", "problem": 128, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn problem-128\n  [[suit rank]]\n   (let [\n    suits {\\H :heart \\S :spade \\D :diamond \\C :club}\n    ranks {\\T 8 \\A 12 \\K 11 \\J 9 \\Q 10 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7}]      \n   {:suit (suits suit) :rank (ranks rank)})\n  )", "problem": 128, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn [[s r]] {:suit ((zipmap \"DHSC\" [:diamond :heart :spade :club]) s)\n             :rank ((zipmap \"23456789TJQKA\"\n                            (range))\n                    r)})", "problem": 128, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(fn p-cards [card]\n  (let [s (subs card 0 1)\n        r (subs card 1)\n        suits {\"S\" :spade \"H\" :heart\n               \"D\" :diamond \"C\" :club}\n        ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6\n               \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n    {:suit (get suits s) :rank (get ranks r)}))", "problem": 128, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [symbol]\n   (let [ [w r] (str symbol)]\n   {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} w) \n    :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})\n)", "problem": 128, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn [[s r]]\n  { :suit ({\\D :diamond \\H :heart \\C :club} s)\n    :rank (.indexOf (seq \"23456789TJQKA\") r)})", "problem": 128, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "#(hash-map\n   :suit ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} (str (first %)))\n   :rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (str (nth % 1)))\n   )", "problem": 128, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn [coll] \n  (let [[x y] (seq coll)\n         suit  (symbol (str x))\n         card  (symbol (str y))\n         suits   {'S :spade 'H :heart 'D :diamond 'C :club}\n         cards\t (into {'T 8 'J 9 'Q 10 'K 11 'A 12}  \n                       (map #(vector (symbol (str %)) (- % 2)) (range  2 10))) ]\n\t{:suit (suits suit) :rank (cards card)}\t))", "problem": 128, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn [card]\n   (let [suits {\\H :heart\n                \\D :diamond\n                \\S :spade\n                \\C :club}\n         ranks {\\2 0\n                \\3 1\n                \\4 2\n                \\5 3\n                \\6 4\n                \\7 5\n                \\8 6\n                \\9 7\n                \\T 8\n                \\J 9\n                \\Q 10\n                \\K 11\n                \\A 12}]\n     {:suit (suits (first card))\n      :rank (ranks (second card))}))", "problem": 128, "user": "506c0a02e4b0eda3100c090d"}, {"code": "(fn [[s r]] {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club } s)\n         :rank (.indexOf \"23456789TJQKA\" (str r))})", "problem": 128, "user": "521dceeae4b050d5da042802"}, {"code": "(fn [[a b]]\n  {:suit (case a\n           \\S :spade\n           \\D :diamond\n           \\H :heart\n           \\C :club)\n   :rank (case b\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12\n           (- (int b) 50))})", "problem": 128, "user": "524e79c1e4b0541d1855b7e0"}, {"code": "(fn [x] \n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first x)) \n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second x))})", "problem": 128, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [key]\n   (let [values (let [values (range 0 13)\n                  keys (-> \"TJQKA\" (seq) ((partial map str)) (conj (map str (range 2 10))) (flatten))]\n                  (zipmap  keys values))\n         suites (let [suites  [:diamond :spade :heart :club]\n                  upper (map (comp #(.toUpperCase %) str first name) suites)\n                  ]\n              (zipmap upper suites)\n              )\n         the-letter (str (first (first (split-at 1 key))))\n         the-value (str (first (second (split-at 1 key)))) \n         the-suit (suites the-letter)\n         \n         ]\n     {:suit the-suit :rank (values the-value)})\n    )", "problem": 128, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn [c] { :suit ({\\H :heart \\D :diamond \\S :spade \\C :club} (first c)) :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0} (last c)) })", "problem": 128, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn [[s r]]\n  (let [table {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n               \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12\n               \\D :diamond \\C :club \\S :spade \\H :heart}\n        s (table s)\n        r (table r)]\n    {:suit s :rank r}))", "problem": 128, "user": "4f048f67535dcb61093f6bd3"}, {"code": "(fn [code]\n  (reduce    \n    #(case %2\n       \\D (assoc % :suit :diamond)\n       \\H (assoc % :suit :heart)\n       \\C (assoc % :suit :club)\n\t   \\S (assoc % :suit :spade)\n       \\A (assoc % :rank 12)\n       \\K (assoc % :rank 11)\n       \\Q (assoc % :rank 10)\n       \\J (assoc % :rank 9)\n       \\T (assoc % :rank 8)\n       \\9 (assoc % :rank 7)\n       \\8 (assoc % :rank 6)\n       \\7 (assoc % :rank 5)\n       \\6 (assoc % :rank 4)\n       \\5 (assoc % :rank 3)\n       \\4 (assoc % :rank 2)\n       \\3 (assoc % :rank 1)\n       \\2 (assoc % :rank 0))\n    {} (seq code)))", "problem": 128, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "#(let [[s r] %]\n   {:suit ({\\D :diamond \\H :heart \\C :club \\S :spades} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn [s] (let [rank [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n              suit {\\D :diamond \\H :heart \\C :club \\S :spade}\n              s1 (first s)\n              s2 (last s)]\n          {:suit (get suit s1)\n           :rank (.indexOf rank s2)}))", "problem": 128, "user": "510c123be4b078ea7192110e"}, {"code": "(fn [[suit rank]]\n  {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} suit), \n   :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12 } rank)})", "problem": 128, "user": "52262a6ce4b06a1ecd0c4e7d"}, {"code": "(fn [[f s]] {\n \t:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} f) \n    :rank ({\\2 0, \\3 1,\\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} s)\n})", "problem": 128, "user": "5227152ce4b04e78ff2e19a4"}, {"code": "(fn cards\n  [[cs cv]]\n  (let [s {\\S :spade \\H :heart \\D :diamond \\C :club}\n        v {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (s cs) :rank (v cv)}))", "problem": 128, "user": "52527192e4b0541d1855b8af"}, {"code": "(fn [card-str]\n  (let [suites {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }\n        card (seq card-str)]\n    (assoc {} :rank (ranks (last card)) :suit (suites (first card)))))", "problem": 128, "user": "523288fee4b035af41902a88"}, {"code": "(fn [cs]\n  (let\n    [suits { \\S :spade, \\H :heart, \\D :diamond, \\C :club }]\n    (letfn [(rank [c]\n                  (cond\n                   (= c \\T) 8\n                   (= c \\J) 9\n                   (= c \\Q) 10\n                   (= c \\K) 11\n                   (= c \\A) 12\n                   :else (- (read-string (str c)) 2)))]\n      {:suit (suits (first cs)) :rank (rank (second cs))})))", "problem": 128, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn [c]\n  (hash-map\n   :suit\n   ({\\D :diamond \\H :heart \\C :club \\S :spade} (first c))\n   :rank\n   ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second c))\n   )\n  )", "problem": 128, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn [s1]\n  {\n  :suit ({\\H :heart \\D :diamond \\C :club \\S :spade} (first s1))\n  :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s1))\n  }\n)", "problem": 128, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "(fn [s]\n  (let [[a b] (seq s)\n        suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits a) :rank (ranks b)}\n  ))", "problem": 128, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn [[suit rank]] \n  (let [ suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n         ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A ]]\n         {:suit (suits suit) :rank (.indexOf ranks rank)}))", "problem": 128, "user": "4fb7dfe3e4b081705acca2d5"}, {"code": "(fn to_map [string]\n  (hash-map\n    :suit\n    (case (nth string 0)\n      \\D :diamond\n      \\H :heart\n      \\C :club\n      \\S :spade\n      )\n    :rank\n    (case (nth string 1)\n      \\T 8\n      \\J 9\n      \\Q 10\n      \\K 11\n      \\A 12\n      (- (int (nth string 1)) 50)\n      )\n    )\n  )", "problem": 128, "user": "5228f870e4b0186687e23a98"}, {"code": "(let [sm {\\S :spade \\H :heart \\D :diamond \\C :club}\n      rm {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}] \n  (fn [[s r]] {:suit (sm s) :rank (rm r)}))", "problem": 128, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn\n  [card]\n  (let [suits {\\H :heart \\D :diamond \\C :club \\S :spade}\n        value {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (hash-map :rank (value (last card)) :suit (suits (first card)))))", "problem": 128, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "#(let [dict {:suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n              :ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}}\n        suit (first %)\n        rank (second %)]\n    (do\n      {:suit ((dict :suits) (str suit)) :rank((dict :ranks) (str rank))}))", "problem": 128, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(fn [[s r]] \n  (let [suits {\\D :diamond, \\H :heart, \\S :spade, \\C :club}\n        faces {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6 \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}] \n    {:suit (suits s) :rank (faces r)}))", "problem": 128, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn [card] (hash-map :suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} (first card))\n                     :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 } (second card))))", "problem": 128, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "(fn [v] {:suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} (first v)) :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second v))})", "problem": 128, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [card]\n  (letfn [(suit [s]\n                (cond (= s \\D) :diamond\n                      (= s \\H) :heart\n                      (= s \\C) :club\n                      (= s \\S) :spade\n                      :else (throw (IllegalArgumentException.))))\n          (rank [face]\n                (cond (= face \\T) 8\n                      (= face \\J) 9\n                      (= face \\Q) 10\n                      (= face \\K) 11\n                      (= face \\A) 12\n                      (Character/isDigit face) (- (Integer/parseInt (str face)) 2)\n                      :else (throw (IllegalArgumentException.))))]\n    {:suit (suit (first card))\n     :rank (rank (last card))}))", "problem": 128, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn [c]\n(let [\n     [s r] c\n     suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n     rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)\n     ]\n     {:suit suit :rank (if (nil? rank) (- (int r) 50) rank)}\n)\n)", "problem": 128, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn card [[s r]]\n  (letfn [(suit [s]\n            (cond\n              (= s \\S) { :suit :spade }\n              (= s \\D) { :suit :diamond }\n              (= s \\C) { :suit :club }\n              (= s \\H) { :suit :heart }))\n\n          (rank [r]\n            (cond\n              (= r \\T) { :rank 8 }\n              (= r \\J) { :rank 9 }\n              (= r \\Q) { :rank 10 }\n              (= r \\K) { :rank 11 }\n              (= r \\A) { :rank 12 }\n              :else { :rank (- (int r) 50) }))]\n    (merge (rank r) (suit s))))", "problem": 128, "user": "4db6ce85535d1e037afb217f"}, {"code": "(let [suit-map\n      {\"D\" :diamond \"S\" :spade \"C\" :club \"H\" :heart}\n      card-map\n      {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6\n       \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n      ]\n  (fn [hand] {:suit \n              (suit-map (first (drop 1 (clojure.string/split hand #\"\"))))\n              :rank\n              (card-map (second (drop 1 (clojure.string/split hand #\"\"))))\n             }\n  )\n)", "problem": 128, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [c]\n  (let [suits {\\C :club \\D :diamond \\H :heart \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit (suits (first c))\n        rank (ranks (second c))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn [s]\n  (let [[s r] s]\n    {:suit ({\\S :spade \\H :heart \\C :club \\D :diamond} s)\n     :rank (force ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} r (delay (- (Integer/parseInt (str r)) 2))))}))", "problem": 128, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [[suit rank]]\n  {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} suit)\n   :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0}  rank)})", "problem": 128, "user": "525431dfe4b0541d1855b970"}, {"code": "(fn [[s r]] (hash-map :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s) :rank (- (get {\\T 10 \\J 11 \\Q 12 \\K 13 \\A 14} r (read-string (str r))) 2)))", "problem": 128, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "(fn parse-card [code]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits (first code)) :rank (ranks (second code))}))", "problem": 128, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn [st]\n  (let [[ss sr] (char-array st)]\n    {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} ss)\n    :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} sr (- (int sr) 50))})\n    )", "problem": 128, "user": "5272669de4b03e8d9a4a742e"}, {"code": "#(let [f (first %)\n       l (last %)\n       suit (cond\n              (= f \\S) :spade\n              (= f \\H) :heart\n              (= f \\D) :diamond\n              (= f \\C) :club)\n       rank (cond\n              (and (>= (int l) (int \\2)) (<= (int l) (int \\9))) (- (int l) (int \\2))\n              (= l \\T) 8\n              (= l \\J) 9\n              (= l \\Q) 10\n              (= l \\K) 11\n              (= l \\A) 12)]\n   {:suit suit, :rank rank})", "problem": 128, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn card [s]\n  {:suit\n  (case (first s)\n    \\D :diamond\n    \\H :heart\n    \\S :spade\n    \\C :club)\n  :rank\n  (case (last s)\n    \\2 0\n    \\3 1\n\t\\4 2\n\t\\5 3\n\t\\6 4\n\t\\7 5\n\t\\8 6\n\t\\9 7\n\t\\T 8\n\t\\J 9 \n\t\\Q 10\n\t\\K 11\n\t\\A 12)})", "problem": 128, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn to-card [sc]\n  (let [rs {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        ss {\\D :diamond \\H :heart \\C :club \\S :spades}]\n    {:suit (ss (first sc))\n     :rank (rs (last sc))}))", "problem": 128, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn [[suit rank]]\n      (let [suits (zipmap \"DHSC\" [:diamond :heart :spade :club])\n            ranks (zipmap (map str (concat (take 8 (iterate #(+ % 1) 2)) \"TJQKA\")) (range 13))]\n        {:suit (suits suit) :rank (ranks (str rank))}\n        )\n      )", "problem": 128, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn [[s r]]\n                                                                \n{:suit (get {\\D :diamond \\H :heart \\S :spade \\C :club} s)\n :rank (.indexOf \"23456789TJQKA\" (.toString r))})", "problem": 128, "user": "4fb248aae4b081705acca28b"}, {"code": "(fn [card]\n  (let\n    [rank-map (zipmap\n               (concat (map str (range 2 10)) '(\"T\" \"J\" \"Q\" \"K\" \"A\"))\n               (range 13))\n     suit-map {\"S\" :spade \"D\" :diamond \"H\" :heart \"C\" :club}\n     suit-string (subs card 0 1)\n     rank-string (subs card 1 2)]\n    (hash-map :suit (suit-map suit-string) :rank (rank-map rank-string))))", "problem": 128, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn [s]\n  (let [colors {\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade}\n        vs [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n        [c v] (re-seq #\".\" s)]\n    {:suit (colors c) :rank (.indexOf vs v)}))", "problem": 128, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "#(let [suits {\\H :heart\n              \\D :diamond\n              \\C :club\n              \\S :spade}\n        ranks {\\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12}]\n    {:suit (suits (first %)) :rank (ranks (last %))})", "problem": 128, "user": "5152bc4ee4b001f44f99bfef"}, {"code": "(fn a [card] (let [s (first card) r (second card)] (merge (hash-map :rank (condp = r \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)) (hash-map :suit (condp = s \\S :spade \\H :heart \\D :diamond \\C :club)))))", "problem": 128, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn [s] \n\t (let [suits { \\D :diamond, \\H :heart, \\S :spade, \\C :club}\n           ranks (zipmap (map identity \"23456789TJQKA\") (range 13))]\n       \n       \t(reduce #(hash-map :suit (get suits %1) :rank (get ranks %2) ) s)\n       )\n       \t  \n  )", "problem": 128, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn [s]\n  (let [suit (get s 0)\n        rank (get s 1)\n        suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit-map suit)\n     :rank (rank-map rank)}))", "problem": 128, "user": "4e920f44535dbda64a6f6afd"}, {"code": "(fn [ sr ]\n  (let [s (first sr)\n        r (last sr)\n        suits {\\C :club \\D :diamond \\H :heart \\S :spade}\n        icards (range 2 10)\n        ncards (map #(first (str %)) icards)\n        ranks (apply hash-map (interleave ncards (map #(- % 2) icards)))\n        ranks (merge ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12})]\n    {:suit (get suits s nil)\n     :rank (get ranks r nil)}))", "problem": 128, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(let [s {\\C :club                                    \n         \\D :diamond                                 \n         \\H :heart                                   \n         \\S :spade   }                               \n      r {\\T  8                                       \n         \\J  9                                       \n         \\Q 10                                       \n         \\K 11                                       \n         \\A 12 } ]                                   \n  (fn [[a b]]                                        \n    {:suit (s a) :rank (or (r b) (- (int b) 50))} ) )", "problem": 128, "user": "4df20dda535d08e6dec9fe23"}, {"code": "(fn [[s n]]\n  {:suit ({\\D :diamond \\H :heart} s :club)\n   :rank (.indexOf \"23456789TJQKA\" (int n))\n   })", "problem": 128, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "(fn [x]\n  (let [suits {\\S :spade \\D :diamond \\H :heart \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits (.charAt x 0)) :rank (ranks (.charAt x 1))}))", "problem": 128, "user": "4e74e119535d7a570dd295bc"}, {"code": "#(let [x (vec %)] \n   (identity {:suit (case (x 0) \n                            \\S :spade \n                            \\H :heart \n                            \\D :diamond \n                            \\C :club) \n               :rank (case (x 1)\n                       \\A 12\n                       \\K 11\n                       \\Q 10\n                       \\J 9\n                       \\T 8\n                       \\9 7\n                       \\8 6\n                       \\7 5\n                       \\6 4\n                       \\5 3\n                       \\4 2\n                       \\3 1\n                       \\2 0)}))", "problem": 128, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "(fn [[suit rank]]  \n  {:suit ({\\D :diamond \\C :club \\S :spade \\H :heart} suit)\n  :rank (or ({\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} rank) (- (int rank) 50 ))})", "problem": 128, "user": "519ef784e4b087743fad2198"}, {"code": "(fn [s]\n      (let [suits {\"S\" :spade, \"D\" :diamond, \"H\" :heart, \"C\" :club}\n            ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}]\n      {:suit (suits (str (first s))) :rank (ranks (str (last s)))}\n    )\n    )", "problem": 128, "user": "51e28063e4b08e53a149f0f2"}, {"code": "(fn [[s r]]\n  (let [suits {\\H :heart \\S :spade \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "(fn [s] (let [ suit #(case % \\D :diamond \\H :heart \\S :spade \\C :club)\n               rank #(cond (= % \\T ) 8 \n                           (= % \\J ) 9 \n                           (= % \\Q ) 10\n                           (= % \\K ) 11 \n                           (= % \\A ) 12 \n                           :else (- (int %)  (int \\2)))\n             [x y] s ]\n         {:suit (suit x) :rank (rank y) }))", "problem": 128, "user": "528149fbe4b0757a1b171426"}, {"code": "(fn [[card-suit card-value]]\n (let [ suits { \\D \"diamond\", \\H \"heart\", \\S \"spade\", \\C \"club\" }\n  \t\t \tranks { \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12 } ]\n  \t\t (hash-map :suit (keyword (suits card-suit)) :rank (ranks card-value)) ;  \n)\n )", "problem": 128, "user": "5029f263e4b023940c84aa45"}, {"code": "#(let [s ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} (first %))\n       r ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (second %))]\n   {:suit s, :rank r})", "problem": 128, "user": "51e38568e4b0c611d6113e43"}, {"code": "(fn [c]\n  (hash-map :suit\n            ({\\C :club \\D :diamond\n              \\S :spade \\H :heart} (first c))\n            :rank\n            ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6\n              \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n                  (apply str (rest c)))))", "problem": 128, "user": "5078d366e4b08327cd804a5b"}, {"code": "(fn [s]\n  (let [suits {\\H :heart \\D :diamond \\S :spade \\C :club}\n        ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n\t\tsuit-str (first s)\n        rank-str (last s)\n        suit (get suits suit-str)\n    \trank (get ranks rank-str (- (int rank-str) 50))]\n  {:suit suit :rank rank}))", "problem": 128, "user": "4ea5ba92535d7eef308072d9"}, {"code": "#(hash-map :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first %)) :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (second %)))", "problem": 128, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn [[s r]]\n  (hash-map :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank (if (< (int \\1) (int r) (+ (int \\1) 9))\n           (- (read-string (str r)) 2)\n           ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r))))", "problem": 128, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn [x] (let [r {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n              s {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}]\n          (hash-map :suit (get s (first (re-seq #\"\\w\" x))) :rank (get r (last (re-seq #\"\\w\" x))))))", "problem": 128, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn rank [card]\n  (let [suits {\\D :diamond, \\C :club, \\S :spade, \\H :heart}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7\n               \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits (first card)), :rank (ranks (second card))}))", "problem": 128, "user": "5290257ae4b0239c8a67af03"}, {"code": "(fn [x]\n   (hash-map \n     :suit ((fn [a] \n              (if (= 0 (.indexOf a \"D\")) :diamond\n                (if (= 0 (.indexOf a \"H\")) :heart\n                  (if (= 0 (.indexOf a \"C\")) :club :spade )))\n              ) x)\n     :rank ((fn [a]\n              (if (= 1 (.indexOf a \"A\")) 12\n                (if (= 1 (.indexOf a \"K\")) 11\n                  (if (= 1 (.indexOf a \"Q\")) 10\n                    (if (= 1 (.indexOf a \"J\")) 9\n                      (if (= 1 (.indexOf a \"T\")) 8\n                        (- (int (last (char-array a))) 50))))))\n              ) x)\n     )\n   )", "problem": 128, "user": "528ce039e4b0239c8a67aebc"}, {"code": "(fn [[r v]] (let [ra {\\D :diamond, \\H :heart, \\C :club, \\S :spade} \n                 va {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n             {:suit (ra r) :rank (va v)} ))", "problem": 128, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "(fn [s] (let [suit-map {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n              rank-vec [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n          {:suit (suit-map (first s))\n           :rank (.indexOf rank-vec (second s))}))", "problem": 128, "user": "51db1abae4b094966a2cd685"}, {"code": "(fn recongnize-cards[[suit num]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit) \n   :rank ({ \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} num)})", "problem": 128, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn [s]\n\t(let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n\t\t  ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n\t\t  [suit rank] s]\n\t\t{:suit (suits suit) :rank (ranks rank)}))", "problem": 128, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "(fn [input]\n  (let\n    [suits {\\H :heart, \\D :diamond, \\C :club, \\S :spike},\n     ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits (first input)), :rank (ranks (last input))}))", "problem": 128, "user": "528bba38e4b0239c8a67aea9"}, {"code": "(fn [x]  \n\t{\n    \t:suit \n    \t({\"D\" :diamond, \"S\" :spade, \"H\" :heart, \"C\" :club } (.substring x 0 1)) \n     \t:rank  \n\t\t({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (.substring x 1) ) \n    }\n   )", "problem": 128, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "(fn [x] {:suit ((keyword ((comp str first) x)) {:D :diamond\n                                 :S :spade\n                                 :C :club\n                                 :H :heart}\n                    )\n            :rank ((keyword ((comp str second) x)) {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5\n                                 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11\n                                 :A 12 })})", "problem": 128, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank (.indexOf \"23456789TJQKA\" (int r))})", "problem": 128, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn [[s r]]\n  (let [suit\n        (case s\n          \\S :spade\n          \\H :heart\n          \\D :diamond\n          \\C :club)\n        rank\n        (case r\n          \\A 12\n          \\K 11\n          \\Q 10\n          \\J 9\n          \\T 8\n          (- (- (int r) (int \\0)) 2))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn [[s n]]\n  (let [suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rank (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (suit s) :rank (rank n)}\n    ))", "problem": 128, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "#(apply (fn [s r] (let\n                    [suit (case s\n                            \\D :diamond\n                            \\H :heart\n                            \\C :club\n                            nil)\n                     rank (case r\n                            \\A 12\n                            \\K 11\n                            \\Q 10\n                            \\J 9\n                            \\T 8\n                            (- (int r) 50))]\n                    {:suit suit :rank rank})) %)", "problem": 128, "user": "528a791ae4b0239c8a67ae77"}, {"code": "(fn [[s n]]\n  {:suit ({\\H :heart\n           \\S :spade\n           \\D :diamond\n           \\C :club} s)\n   :rank (.indexOf \"23456789TJQKA\" (int n))})", "problem": 128, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn playingCard [x] (conj {}\n                            (cond \n                              (= \\2 (second x)) {:rank 0}\n                              (= \\3 (second x)) {:rank 1}\n                              (= \\4 (second x)) {:rank 2}\n                              (= \\5 (second x)) {:rank 3}\n                              (= \\6 (second x)) {:rank 4}\n                              (= \\7 (second x)) {:rank 5}\n                              (= \\8 (second x)) {:rank 6}\n                              (= \\9 (second x)) {:rank 7}\n                              (= \\T (second x)) {:rank 8}\n                              (= \\J (second x)) {:rank 9}\n                              (= \\Q (second x)) {:rank 10} \n                              (= \\K (second x)) {:rank 11} \n                              (= \\A (second x)) {:rank 12})\n                            (cond \n                                 (= \\D (first x)) {:suit :diamond}\n                                 (= \\H (first x)) {:suit :heart}\n                                 (= \\C (first x)) {:suit :club}\n                                 (= \\S (first x)) {:suit :spades})))", "problem": 128, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "(fn [c]\n  (let [card (clojure.string/lower-case c)]\n           {:suit\n           \t(case (first card)\n              \\d :diamond\n              \\h :heart\n              \\c :club\n              \\s :spades)\n           \t:rank\n           \t(case (first (rest card))\n            \t\\a 12\n            \t\\k 11\n            \t\\q 10\n            \t\\j 9\n                \\t 8\n            \t(- (read-string (apply str  (rest card))) 2))}))", "problem": 128, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn [c]\n  (let [s {\"D\" :diamond \"S\" :spade\n           \"C\" :club    \"H\" :heart}\n        r {\"2\" 0 \"3\" 1 \"4\" 2\n           \"5\" 3 \"6\" 4 \"7\" 5\n           \"8\" 6 \"9\" 7 \"T\" 8\n           \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n        h (map str (seq c))]\n    {:suit (s (first h)) :rank (r (last h))}))", "problem": 128, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn [card-str]\n  (let [suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}\n        ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))\n        suit (suits (first card-str))\n        rank (ranks (second card-str))]\n    {:suit suit :rank rank}\n    ))", "problem": 128, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn [s]\n       {:suit ({\\D :diamond \\C :club \\S :spade \\H :heart} (first s))\n        :rank ({\\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11} (nth s 1))})", "problem": 128, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn [card]\n  {:suit (case (first card)\n           \\S :spade\n     \t   \\H :heart\n           \\D :diamond\n           \\C :club)\n  :rank (case (second card)\n          \\2 0\n          \\3 1\n          \\4 2\n          \\5 3\n          \\6 4\n          \\7 5\n          \\8 6\n          \\9 7\n          \\T 8\n          \\J 9\n          \\Q 10\n          \\K 11\n          \\A 12)})", "problem": 128, "user": "51929214e4b08962174cf74c"}, {"code": "(fn card [[s r]]\n  (let [lookup (zipmap \"HDCS23456789TJQKA\" (concat '(:heart, :diamond, :club, :spade) (range)))]\n    (prn lookup) \n    {:suit (lookup s), :rank (lookup r)}))", "problem": 128, "user": "52a5e784e4b0c58976d9abf3"}, {"code": "(fn [[s v]]\n  (let [suits {\\D :diamond \\H :heart\n               \\C :club \\S :spade}\n        vs {\\9 7, \\8 6, \\7 5, \\6 4\n              \\5 3, \\4 2, \\3 1, \\2 0\n              \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit (suits s)\n        val (vs v)]\n    {:suit suit :rank val}))", "problem": 128, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "(fn dk [s]\n  (let [rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit-map {\\H :heart \\D :diamond \\S :spade \\C :club}]\n    (hash-map :suit (suit-map (first s)) :rank (rank-map (second s))))\n  )", "problem": 128, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn [[suit rank]]\n  {:suit (case suit\n           \\D :diamond\n           \\S :spade\n           \\H :heart\n           \\C :club)\n  :rank (case rank\n          (\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9) (- (Integer/parseInt (str rank)) 2)\n\t\t  \\T 8\n          \\J 9\n          \\Q 10\n          \\K 11\n          \\A 12)})", "problem": 128, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "(fn [[s r]]\n    (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n          ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n     (hash-map :suit (suits s) :rank (ranks r) )))", "problem": 128, "user": "5290ffaee4b0239c8a67af10"}, {"code": "(fn foo [s]\n  (let [suits {\"S\" :spade \"D\" :diamond \"H\" :heart \"C\" :club} \n        vals (zipmap \"23456789TJQKA\" (range 13))]\n    (hash-map :suit (suits (str (first s))) :rank (vals (second s)))   \n    )\n  )", "problem": 128, "user": "510b704ee4b078ea71921100"}, {"code": "(fn [s]\n  (letfn [(->rank [s]\n            (cond\n             (= \"A\" s)\n             12\n             (= \"K\" s)\n             11\n             (= \"Q\" s)\n             10\n             (= \"J\" s)\n             9\n             (= \"T\" s)\n             8\n             :default\n             (- (read-string s) 2)))\n          (->suit [s]\n            (cond\n             (= \"D\" s)\n             :diamond\n             (= \"H\" s)\n             :heart\n             (= \"C\" s)\n             :club\n             (= \"S\" s)\n             :spades\n\n             :default\n             (read-string s)))]\n    {:suit (->suit (subs s 0 1))\n     :rank (->rank (subs s 1))}))", "problem": 128, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn [card] {:suit ({\\H :heart \\D :diamond \\S :spade \\C :club} (get card 0) :err) :rank (#({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} % (- (int %) 50)) (get card 1))})", "problem": 128, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "(fn [[s r]]\n  {:suit ({\\H :heart \\S :spade \\D :diamond \\C :club} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn id-cards[id](hash-map :suit ({:H :heart :S :spade :D :diamond :C :club} (keyword (subs id 0 1)))\n                            :rank ({:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12} (keyword (subs id 1 2)))\n                            ))", "problem": 128, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn n128 [card]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\2 1 \\3 2 \\4 3 \\5 4 \\6 5 \\7 6 \\8 7 \\9 8 \\T 9 \\J 10 \\Q 11 \\K 12 \\A 13}]\n    {:suit (suits (first card)) :rank (dec (ranks (last card)))}))", "problem": 128, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn [[suit rank]]\n  {\n   :suit\n   (case suit\n     \\D :diamond\n     \\H :heart\n     \\C :club\n     \\S :spades)\n   :rank\n   (case rank\n     \\2 0\n     \\3 1\n     \\4 2\n     \\5 3\n     \\6 4\n     \\7 5\n     \\8 6\n     \\9 7\n     \\T 8\n     \\J 9\n     \\Q 10\n     \\K 11\n     \\A 12)\n   })", "problem": 128, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn suitcon[s] (let [a (seq s)] {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first a)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last a))}))", "problem": 128, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "(fn [[p q]]\n\t{:suit ({\\S :spade \\D :diamond \\C :club \\H :heart} p)\n\t :rank ((zipmap \"23456789TJQKA\" (range)) q)})", "problem": 128, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn [[f n]]\n  {:suit ((zipmap \"DHC\" [:diamond :heart :club]) f)\n   :rank ((zipmap \"23456789TJQKA\" (range)) n)})", "problem": 128, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn\n  [card]\n  (let [suit (str (first card))\n        rank (str (second card))\n        suits {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n        ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8\n               \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}]\n    {:suit (get suits suit) :rank (get ranks rank)}))", "problem": 128, "user": "52b94f15e4b07a9af57922ba"}, {"code": "(fn \n  [[f s]]\n  (let [\n        suit {\\D :diamond \\H :heart \\S :spade \\C :club}\n        rank {\\T 8 \\K 11 \\A 12 \\Q 10 \\J 9}\n        ]\n    (if (and (> (int s) 49)\n             (< (int s) 58))\n      {:suit (suit f) :rank (- (int s) 50)}\n      {:suit (suit f) :rank (rank s)})))", "problem": 128, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn [str]\n  (let [suits {\\H :heart\n               \\S :spade\n               \\C :club\n               \\D :diamond}\n        ranks (zipmap \"23456789TJQKA\" (range))\n        suit (get suits (first str))\n        rank (get ranks (last str))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn  [s]\n  (let [suitmap {\\D :diamond \\H :heart \\C :club \\S :spade}\n        cardrank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6\n                  \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n    {:suit (suitmap (first s)) :rank (cardrank (second s))})\n)", "problem": 128, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn dsl-cards\n  [[s r]]\n  {:suit ({\\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :space} s)\n   :rank ({\\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12} r)})", "problem": 128, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn [[s r]] {:suit ((zipmap \"DHCS\" '(:diamond :heart :club :spade)) s) :rank ((zipmap \"23456789TJQKA\" (range 0 13)) r)})", "problem": 128, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :space} s)\n   :rank (- ({\\T 10 \\J 11 \\Q 12 \\K 13 \\A 14} r (read-string (str r))) 2)})", "problem": 128, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn decode [s]\n  (let [rank (.indexOf \"23456789TJQKA\" (.substring s 1))\n        suitIx (.indexOf \"HSDC\" (.substring s 0 1))\n        suit (nth '(:heart :spade :diamond :club) suitIx)]\n    {:suit suit :rank rank}))", "problem": 128, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn cards [s]\n  (hash-map\n   :suit\n   ({\\S :spade \\C :club \\D :diamond \\H :heart} (get s 0) :?)\n   :rank\n   ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (get s 1) :?)\n  ))", "problem": 128, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "(fn [[s r]] {:suit ({\\D :diamond\n                       \\S :spade\n                       \\C :club\n                       \\H :heart} s)\n          :rank ((zipmap (seq \"23456789TJQKA\") (range 13)) r)})", "problem": 128, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "(fn ans [s]\n  (let [m1 {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        m2 {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (let [[a b] (seq s)]\n      {:suit (m1 a) :rank (m2 b)})))", "problem": 128, "user": "52a55adee4b0c58976d9abe7"}, {"code": "#(hash-map :suit ({\\S :spades \\H :heart \\D :diamond \\C :club} (nth % 0))\n           :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0} (nth % 1)))", "problem": 128, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "(fn [[s r]]\n  (let [\n        suits {\\H :heart \\C :club \\S :spade \\D :diamond}\n        ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))\n        ]\n    {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn [[h t]]        \n   {:suit ({\\H :heart \\C :club \\D :diamond \\S :spade} h)\n    :rank (or ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} t) (- (int t) 50))})", "problem": 128, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "#(let [suits {\\D :diamond \\H :heart \\S :spades \\C :club}\n         cards {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7}]\n     {:suit (suits (first %)) :rank (cards (last %))}\n     )", "problem": 128, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "(letfn [(suit [card]\n                (case (first card)\n                  \\D :diamond\n                  \\H :heart\n                  \\C :club\n                  \\S :spade))\n              (rank [card]\n                (let [r (second card)]\n                  (if (and (>= (int r) (int \\2))\n                           (<= (int r) (int \\9)))\n                    (- (int r) (int \\2))\n                    (case r\n                      \\T 8\n                      \\J 9\n                      \\Q 10\n                      \\K 11\n                      \\A 12))))\n              (suit-and-rank [card]\n                {:suit (suit card) :rank (rank card)})]\n        suit-and-rank)", "problem": 128, "user": "5294e44de4b02ebb4ef75016"}, {"code": "#(\n hash-map \n   :suit ({\\S :spade \\H :heart \\C :club \\D :diamond} (first %))\n   :rank ({ \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %))\n   )", "problem": 128, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn [s]\n  (let [char->suit {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        char->rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6\n        \t\t\t\\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n  \t{:suit (char->suit (first s))\n   \t :rank (char->rank (second s))}))", "problem": 128, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn [[c r]]\n  (let [cs {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rs (vec \"23456789TJQKA\")]\n    {:suit (cs c) :rank (.indexOf rs r)}))", "problem": 128, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn [card]\n  (let\n    [suits {\"D\" :diamond \"S\" :spade \"H\" :heart \"C\" :club}\n     rank-chars (map str (concat (range 2 10) [\"T\" \"J\" \"Q\" \"K\" \"A\"]))\n     ranks (zipmap rank-chars (range 13))]\n    {:suit (suits (str (first card))) :rank (ranks (str (last card)))}))", "problem": 128, "user": "52470d42e4b05ef8e38e6350"}, {"code": "#(let [suits {\\D :diamond \\H :heart \\C :club \\S :spade }\n       ranks {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8}\n       [suit rank] %]\n   (hash-map :suit (suits suit) :rank (or (ranks rank) (-> rank str read-string dec dec))))", "problem": 128, "user": "52be58d7e4b07a9af579231d"}, {"code": "(fn [s]\n  (let [ranks \"23456789TJQKA\"\n        suit (nth s 0)\n        rank (nth s 1)]\n    {:suit (case suit\n             \\D :diamond\n             \\H :heart\n             \\S :spade\n             \\C :club)\n     :rank (.indexOf ranks (str rank))}))", "problem": 128, "user": "527ce61de4b0757a1b171374"}, {"code": "(fn [s]\n\t(let [ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n\t\t  suits {\\D :diamond \\H :heart \\C :club \\S :spade}]\n\t\t(zipmap [:suit :rank] [(suits (first s)) (.indexOf ranks (second s))])\n\t)\n)", "problem": 128, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "#(zipmap [:suit :rank] \n         (map {\\H :heart \\D :diamond \\C :club \\S :spade \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7} \n              (seq %)\n          )\n)", "problem": 128, "user": "4f99ae4ae4b0dcca54ed6d00"}, {"code": "(fn [x] (let [suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n       ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n   {:suit (get suits (str (first x))) :rank (get ranks (str (second x)))}))", "problem": 128, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn [s]\n  (hash-map\n   :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first s))\n   :rank ((reduce into (map-indexed #(hash-map %2 %) \"23456789TJQKA\")) (last s)) ))", "problem": 128, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn [[s r]]\n  (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8,\n               \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits s), :rank (ranks r)}))", "problem": 128, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn [s]\n  {\n  :suit ({\\D :diamond, \\C :club, \\H :heart, \\S :spade} (first s))\n  :rank (.indexOf \"23456789TJQKA\" (str (last s)))\n                  })", "problem": 128, "user": "52cca65be4b07d0d72b2736b"}, {"code": "#(let [\n       suits {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n       ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n       card (seq %)]\n   (hash-map :suit (suits (first card)) :rank (ranks (second card))))", "problem": 128, "user": "52cc85abe4b07d0d72b27367"}, {"code": "(fn [card]\n  {\n    :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last card))\n  \t:suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} (first card))\n  })", "problem": 128, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn [s] {:suit ({\\H :heart \\D :diamond \\S :spade \\C :club} (first s)),  \n         :rank ((zipmap (concat (map #(first (str %)) (range 2 10)) [\\T \\J \\Q \\K \\A]) (range)) (second s))})", "problem": 128, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "(fn [[s r]]\n  (let [suits '{\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks '{\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n    (assoc {}\n      :suit (get suits s)\n      :rank (get ranks r))))", "problem": 128, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "#(hash-map :suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} \n                      (first %))\n           :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} \n                      (second %)))", "problem": 128, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "(fn parse [x]\n  (let [suit (first x)\n        rank (second x)]\n    {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n    :rank ({\\2 0 \n            \\3 1\n            \\4 2\n            \\5 3\n            \\6 4\n            \\7 5\n            \\8 6\n            \\9 7\n            \\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12} rank)}))", "problem": 128, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "(fn __ [s]\n  (let [suit {\\H :heart \\D :diamond \\C :club \\S :spade}\n        rank (into {} (map #(vector %1 %2) \"23456789TJQKA\" (range)))]\n    {:suit (suit (first s)) :rank (rank (second s))}) )\n\n#_(fn __ [s]\n  (let [suit {\\H :heart \\D :diamond \\C :club \\S :spade}\n        rank (into {} (map-indexed #(vector %2 %1) \"23456789TJQKA\"))]\n    {:suit (suit (first s)) :rank (rank (second s))}) )", "problem": 128, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn cards [x]\n\t(let [club-symbol (subs x 0 1) \n\t\trank-symbol (subs x 1) \n\t\tclub (case club-symbol\n\t\t\t\"S\" :spade\n\t\t\t\"D\" :diamond\n\t\t\t\"H\" :heart\n\t\t\t\"C\" :club)\n\t\trank (cond\n\t\t\t(re-matches #\"[0-9]+\" rank-symbol) \n\t\t\t  (- (Integer/parseInt rank-symbol) 2)\n\t\t\t(= rank-symbol \"T\") 8\n\t\t    (= rank-symbol \"J\") 9\n\t\t    (= rank-symbol \"Q\") 10\n\t\t    (= rank-symbol \"K\") 11\n\t\t    (= rank-symbol \"A\") 12)\n\t\t]\n\t\t{:suit club :rank rank}\n\t))", "problem": 128, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn str->card [s]\n  (let [suit ({\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club}\n                ((comp str first) s))\n        rank ((apply hash-map (interleave (concat (map str (range 2 10)) '(\"T\" \"J\" \"Q\" \"K\" \"A\")) (range)))\n                ((comp str second) s))]\n    {:suit suit\n     :rank rank}))", "problem": 128, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn [card]\n  (let [suits {\\D :diamond,\n        \t   \\H :heart,\n               \\C :club,\n               \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3,\n        \t   \\6 4, \\7 5, \\8 6, \\9 7, \\T 8,\n        \t   \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits (first (seq card))),\n     :rank (ranks (second (seq card)))}))", "problem": 128, "user": "52d340ebe4b099d49816f0c1"}, {"code": "(fn [x] \n  {:suit\n   (case (first x)\n     \\S :spade\n     \\H :heart \n     \\C :club\n     \\D :diamond)\n   :rank\n   (case (second x)\n     \\2 0\n     \\3 1\n     \\4 2\n     \\5 3\n     \\6 4\n     \\7 5\n     \\8 6\n     \\9 7\n     \\T 8\n     \\J 9\n     \\Q 10\n     \\K 11\n     \\A 12)})", "problem": 128, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn [a] {:suit ({\\H :heart \\C :club \\D :diamond \\S :spade} (first a)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last a))})", "problem": 128, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn [card] (let [ranks (zipmap \"23456789TJQKA\" (range 13))\n                 suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n                 [s r] (seq card)]\n            {:suit (suits s), :rank (ranks r)}))", "problem": 128, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "#(hash-map\n    :suit\n    (get {\\S :spade \\H :heart \\D :diamond \\C :club} (first %))\n    :rank\n    (.indexOf \"23456789TJQKA\" (str(second %)))  \n    )", "problem": 128, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn [[x y]] \n  \t(let [suit {\\D :diamond \\H :heart \\C :club \\S :spade}\n           rank (zipmap \"23456789TJQKA\" (range 0 13))]\n    {:suit (suit x) :rank (rank y)}))", "problem": 128, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn conv [desc] (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n                      ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n                      [s r] (seq desc)]\n                  {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "52d3f666e4b09f7907dd1327"}, {"code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "problem": 128, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "(fn [[s r]]\n  (let [[s r] (map \n               {\\S :spade \\H :heart \\D :diamond \\C :club\n                \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n                \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n               [s r])]\n    {:suit s :rank r}))", "problem": 128, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn [[s r & card]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n    {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn [c]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first c)) :rank ((zipmap (seq \"23456789TJQKA\") (range)) (nth c 1))})", "problem": 128, "user": "4ee75ec2535d93acb0a66867"}, {"code": "(fn [card]\n  (let [suit (first card)\n        rank (second card)]\n    {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} suit)\n     :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank (- (int rank) (int \\2)))}))", "problem": 128, "user": "505345d9e4b0517ede0d0a06"}, {"code": "#(hash-map :suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} (first %)) \n          :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (last %)))", "problem": 128, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn [[suit rank]]\n  (let [ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suits {\\S :spade \\H :heart \\D :diamond \\C :club}]\n\t  (zipmap [:suit :rank] [(get suits suit) (get ranks rank)])    \n    )\n  )", "problem": 128, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": "(fn f [s]\n  (let [suit (cond\n              (= (first s) \\H) :heart\n              (= (first s) \\C) :club\n              (= (first s) \\S) :spade\n              (= (first s) \\D) :diamond\n              true nil)\n        rank (cond\n              (= (last s) \\T) 8\n              (= (last s) \\J) 9\n              (= (last s) \\Q) 10\n              (= (last s) \\K) 11\n              (= (last s) \\A) 12\n              true (- (. Integer (parseInt (str (last s)))) 2))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "(fn [[s r]]\n  (let [ss {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rs (apply array-map (interleave \"23456789TJQKA\" (range)))]\n    {:suit (ss s) :rank (rs r)}))", "problem": 128, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn cd [x]\n   (let [suits {\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club}\n         s (suits (str (first x)))\n         ranks (zipmap (flatten (conj [] (for [x (range 2 10)] (str x)) (for [y '(\"T\" \"J\" \"Q\" \"K\" \"A\")] y))) (range 0 13))\n         r (ranks (str (last x)))]\n     (into (hash-map :suit s) (hash-map :rank r))))", "problem": 128, "user": "52cf084ce4b07d0d72b27399"}, {"code": "#(hash-map :suit ({\"C\" :club \"S\" :spade \"H\" :heart \"D\" :diamond} (str (first %))) :rank ({\"A\" 12 \"K\" 11 \"Q\" 10 \"J\" 9 \"T\" 8 \"9\" 7 \"8\" 6 \"7\" 5 \"6\" 4 \"5\" 3 \"4\" 2 \"3\" 1 \"2\" 0 } (str (nth % 1))))", "problem": 128, "user": "52e48632e4b09f7907dd1450"}, {"code": "(fn [s]\n    (let [suit (first s)\n          rank (last s)]\n      {:suit (get {\\D :diamond, \\H :heart, \\C :club, \\S :spade} suit),\n       :rank (get {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0} rank)}))", "problem": 128, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn recognize-card [s]\n  (let [suite (first s)\n        rank (second s) \n        ]\n      {:suit ({\\C :club \\D :diamond \\H :heart \\S :spade} suite) \n       :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)}    \n    )\n  )", "problem": 128, "user": "529a73bde4b02ebb4ef75096"}, {"code": "#(into {} \n       {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} (first %)), \n        :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (second %))})", "problem": 128, "user": "52bdf6bde4b07a9af579230d"}, {"code": "#(let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n      ranks (fn [x] (.indexOf \"23456789TJQKA\" (str x)))]\n  {:suit (suits (first %)) :rank (ranks (last %))})", "problem": 128, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "(fn [[s r]]\n  (let [s-map {\\S :spad \\H :heart \\C :club \\D :diamond}\n        suit (concat (map char (range (int \\2) (int \\:))) [\\T \\J \\Q \\K \\A])\n        n-map (zipmap suit (range 0 13))]\n    (zipmap [:suit :rank] [(s-map s) (n-map r)])))", "problem": 128, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn derive\n  [p]\n  (let [suits {\"S\" :spade, \"H\" :heart, \"C\" :club, \"D\" :diamond}\n        ranks (zipmap [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"T\", \"J\", \"Q\", \"K\", \"A\"] (range 13))\n        [suit rank] (map str (seq p))]\n    {:suit (get suits suit) :rank (get ranks rank)}))", "problem": 128, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "(fn [[x y]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade } x) \n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} y)})", "problem": 128, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "(fn recognize-card [a-str]\n    (letfn [(char-to-suit [ch]\n\t\t\t(condp = ch\n\t\t\t  \\D :diamond\n\t\t\t  \\H :heart\n\t\t\t  \\S :spade\n\t\t\t  \\C :club\n\t\t\t)\n\t\t) (char-to-rank [ch]\n             ((zipmap \"23456789TJQKA\" (range)) ch)           \n\t\t)]\n\t\t(let [s (first a-str) r (second a-str)]\n\t\t\t{:suit (char-to-suit s) :rank (char-to-rank r)}\n\t\t)\n)\n\t)", "problem": 128, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn [s]\n  (let [[suit rank] s]\n    (if (Character/isDigit rank)\n      {:suit ((keyword (clojure.string/lower-case suit)) {:h :heart :c :club :s :spade :d :diamond}) :rank (- (Integer/parseInt (clojure.string/lower-case rank)) 2)}\n      {:suit ((keyword (clojure.string/lower-case suit)) {:h :heart :c :club :s :spade :d :diamond}) :rank ((keyword (clojure.string/lower-case rank)) {:t 8 :j 9 :q 10 :k 11 :a 12})})))", "problem": 128, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "(fn [card] (let [rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} suit {\\D :diamond \\S :spade \\H :heart \\C :club}] {:suit (suit (first card)) :rank (rank (second card))}))", "problem": 128, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn [card] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first card)) :rank (.indexOf (vec \"23456789TJQKA\") (second card))})", "problem": 128, "user": "52c1f404e4b07a9af5792370"}, {"code": "(fn [x] (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n              ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n              suit (.charAt x 0)\n              rank (.charAt x 1)]    \n          {:suit (suits suit) :rank (ranks rank)}\n              ))", "problem": 128, "user": "52ea4fbfe4b09f7907dd14b9"}, {"code": "(fn cards [card]\n  (reduce\n   #(hash-map\n     :suit\n     (cond\n      (= %1 \\H) :heart\n      (= %1 \\D) :diamond\n      (= %1 \\C) :club\n      (= %1 \\S) :spade\n      )\n     :rank\n     (cond\n      (= %2 \\T) 8\n      (= %2 \\J) 9\n      (= %2 \\Q) 10\n      (= %2 \\K) 11\n      (= %2 \\A) 12\n      :else (- (int %2) (int \\2))\n      )\n     )\n   card)\n  )", "problem": 128, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [s]\n  (let [smap {\\H :heart \\C :club \\D :diamond \\S :spade}\n        nmap {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (smap (first s)) :rank (nmap (second s))}))", "problem": 128, "user": "525cc137e4b0cb4875a45d46"}, {"code": "#(hash-map :suit (get  {\\S :spider \\H :heart \\D :diamond \\C :club}\n                       (nth % 0))\n           :rank (get  {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n                       (nth % 1) (- (int (nth % 1)) 50)))", "problem": 128, "user": "52bacfa8e4b07a9af57922d6"}, {"code": "(fn resolve-card [[suit rank]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get suits suit) :rank (get ranks rank)}))", "problem": 128, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [[suit rank]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n  :rank ((zipmap \"23456789TJQKA\" (range 13)) rank)})", "problem": 128, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn [card]\n  (let [ranks {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n        suits {\\C :club \\D :diamond \\H :heart \\S :spade}]\n    {:suit (get suits (first card))\n     :rank (let [rank (apply str (rest card))]\n             (or (get ranks rank)\n                 (- (Integer/parseInt rank) 2)))}))", "problem": 128, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "(fn [card] (let [ranks (zipmap \"23456789TJQKA\" (range 13))\n                 suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n                 [s r] (seq card)]\n            {:suit (suits s), :rank (ranks r)}))", "problem": 128, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn [t] \n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first t))\n  :rank (.indexOf \"23456789TJQKA\" (str (second t)))})", "problem": 128, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "#(let [suits {\\D :diamond \\S :spade \\H :heart \\C :club}\n       ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n (assoc {} :suit (suits (first %)) :rank (ranks (last %))))", "problem": 128, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "(fn [[s r]]\n   {:suit ({\\C :club \\D :diamond \\H :heart \\S :spade} s)\n     :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)) r)})", "problem": 128, "user": "5224cf82e4b01819a2de42ef"}, {"code": "(fn [a]\n  (let [isuit (subs a 0 1)\n        irank (subs a 1 2)\n        lsuit {\"H\" :heart \"S\" :spade \"D\" :diamond \"C\" :club}\n        lrank {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n    (hash-map :suit (second (find lsuit isuit)) \n              :rank (second (find lrank irank)))))", "problem": 128, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "(fn [card]\n    (let [ranks (zipmap \"23456789TJQKA\" (range 13))\n          suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n          [s r] (seq card)]\n      {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn  [s] (let [m1 {\\2 0\n                     \\3 1\n                     \\4 2\n                     \\5 3\n                     \\6 4\n                     \\7 5\n                     \\8 6\n                     \\9 7\n                     \\T 8\n                     \\J 9\n                     \\Q 10\n                     \\K 11\n                     \\A 12\n                     }\n                  m2 {\\C :club\n                      \\D :diamond\n                      \\H :heart\n                      \\S :spade}\n                  ]\n              {:suit (get m2 (first s)) :rank (get m1 (second s))}))", "problem": 128, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(fn [[s r]]\n  (let [suit ({\\S :sprade \\H :heart \\D :diamond \\C :club} s)\n        rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13)) r)]\n    {:suit suit :rank rank}))", "problem": 128, "user": "52d00832e4b07d0d72b273b4"}, {"code": "#(let [[s r] (split-at 1 % )\n               suit (apply str s)\n               rank (read-string (apply str r))]\n           {:suit (cond (= suit \"D\") :diamond \n                        (= suit \"H\") :heart\n                        (= suit \"C\") :club\n                        (= suit \"S\") :spades\n                        )\n            :rank (cond\n                   (= (str rank) \"T\") 8\n                   (= (str rank) \"J\") 9\n                   (= (str rank) \"Q\") 10\n                   (= (str rank) \"K\") 11\n                   (= (str rank) \"A\") 12\n                   :otherwise (- rank 2))})", "problem": 128, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank (.indexOf (seq \"23456789TJQKA\") r)})", "problem": 128, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "(fn cards \n  [in]\n  (let [suit (str (first in)) rank (str (second in))]\n    (hash-map :suit ((keyword suit) {:D :diamond, :H :heart, :C :club, :S :spade})\n              :rank (cond \n                      (= rank \"A\") 12\n                      (= rank \"K\") 11\n                      (= rank \"Q\") 10\n                      (= rank \"J\") 9\n                      (= rank \"T\") 8\n                      :else (- (read-string rank) 2)))))", "problem": 128, "user": "5300b750e4b0d8b024fd3711"}, {"code": "(let\n  [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n   cards {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n   ]\n  (fn [s] {:suit (suits (first s)), :rank (cards (second s))}))", "problem": 128, "user": "52d660eae4b09f7907dd1356"}, {"code": "(fn [s]\n   (letfn [(suits [x]\n                 ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} x))\n              (ranks [x]\n                  ((zipmap [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] (range)) x))]\n      {:suit (suits (str (first s))) :rank (ranks (str (second s)))}))", "problem": 128, "user": "4fb99483e4b081705acca2da"}, {"code": "(fn[str] \n    (let[\n         delta (+ 2 (int \\0)) \n         suits-map {\\S :spade \\H :heart \\D :diamond \\C :club} \n         rank-map {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}] \n      (loop[m {} s str] \n        (let[c (first s)] \n          (case (count m) \n            0 (recur (assoc m :suit (get suits-map c)) (rest s))\n            1 (recur (assoc m :rank (get rank-map c (- (int c) delta))) (rest s)) \n            m\n            )\n          )\n        )\n      )\n    )", "problem": 128, "user": "52e68e61e4b09f7907dd1479"}, {"code": "(fn f\n  [s]\n  (let [m {\"D\" :diamond, \"H\" :heart, \"S\" :spade, \"C\" :club\n        \"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n  \t    st (get m (str (first (seq s))))\n  \t    rk (get m (str (last (seq s))))]\n  {:suit st, :rank rk}))", "problem": 128, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn playcard [s]\n    (let [sdic {\\D :diamond \\H :heart \\C :club \\S :spade}\n          ndic {\\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11}\n          sym (first s)\n          num (second s)]\n    (hash-map :suit (sdic sym) :rank (ndic num)) )\n  )", "problem": 128, "user": "528f4462e4b0239c8a67aef0"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spades \\C :club \\H :heart \\D :diamond} s)\n    :rank (.indexOf (seq \"23456789TJQKA\") r)})", "problem": 128, "user": "506cad7de4b0a302964c548e"}, {"code": "(fn card[card]\n  {:suit ((zipmap \"DHCS\" [:diamond :heart :club :spades] ) (first card)),\n   :rank ((zipmap \"23456789TJQKA\" (range)) (last card))\n })", "problem": 128, "user": "5307e4ece4b02e82168697a9"}, {"code": "(fn [x] \n  (let [r (second x) n (-> r str read-string)] \n    {:suit (case (first x) \\D :diamond \\S :space \\H :heart \\C :club) \n    :rank (if (number? n) (- n 2) (case r \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12))}))", "problem": 128, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn[input] (let [ls (seq input) s (first ls) r (second ls) \n                        suit {\\D :diamond \\H :heart \\C :club \\S :spade }\n                        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]  {:suit (get suit s) :rank (get rank r)}))", "problem": 128, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn [[x y]] {:suit (get {\\D :diamond\n                        \\H :heart\n                        \\C :club\n                        \\S :spade}\n                     x)\n              :rank (get\n                     (zipmap \"23456789TJQKA\" (range))\n                     y) \n              })", "problem": 128, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn[[s r]]\n  {\n   :suit\n    (case s\n      \\D :diamond\n      \\H :heart\n      \\C :club\n      \\S :spade)\n   :rank\n    (case r\n      \\T 8\n      \\J 9\n      \\Q 10\n      \\K 11\n      \\A 12\n      (- (int r) 50))})", "problem": 128, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn [s] (letfn [\n(suit [x] (get {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club} x))\n(rank [x] (.indexOf \"23456789TJQKA\" x))\n(split-str [s] (map #(apply str %) (partition 1 s)))\n(card [s] (let [ss (split-str s) suit-code (first ss) rank-code (second ss)] {:suit (suit suit-code) :rank (rank rank-code)}))\n] (card s)))", "problem": 128, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn [s]\n          (let [suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} (char (first s))),\n                n (second s),\n                rank (if (<= (int n) (int \\9))\n                       (- (int n) (int \\0) 2)\n                       ({\\T 8, \\J 9, \\Q 10 \\K 11, \\A 12} (char n)))]\n            {:suit suit, :rank rank}))", "problem": 128, "user": "52c7f036e4b0c2d177d62126"}, {"code": "(fn parse-card [description]\n  (let [suit (.substring description 0 1)\n        rank (.substring description 1)\n\n        suit-map {\"C\" :club\n                  \"D\" :diamond\n                  \"H\" :heart\n                  \"S\" :spade}\n\n        rank-map (into {\"A\" 12\n                        \"T\" 8\n                        \"J\" 9\n                        \"Q\" 10\n                        \"K\" 11}\n                       (for [i (range 2 10)] [(str i) (- i 2)]))\n        ]\n    {:suit (suit-map suit)\n     :rank (rank-map rank)}))", "problem": 128, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn card [in]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks (zipmap \"23456789TJQKA\" (range))\n        [s r] in]\n    {:suit (suits s) :rank (ranks r)})\n  )", "problem": 128, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn [card]\n  (assoc\n      {}\n    :suit\n    (case (nth card 0)\n      \\D :diamond\n      \\H :heart\n      \\C :club\n      \\S :spade)\n    :rank\n    (case (nth card 1)\n      \\2 0\n      \\3 1\n      \\4 2\n      \\5 3\n      \\6 4\n      \\7 5\n      \\8 6\n      \\9 7\n      \\T 8\n      \\J 9\n      \\Q 10\n      \\K 11\n      \\A 12)))", "problem": 128, "user": "530d85dee4b08068f379eca8"}, {"code": "(fn [x]\n  (let [myhash {\\S {:suit :spade}\n                \\H {:suit :heart}\n                \\D {:suit :diamond}\n                \\C {:suit :club}\n                \\2 {:rank 0}\n                \\3 {:rank 1}\n                \\4 {:rank 2}\n                \\5 {:rank 3}\n                \\6 {:rank 4}\n                \\7 {:rank 5}\n                \\8 {:rank 6}\n                \\9 {:rank 7}\n                \\T {:rank 8}\n                \\J {:rank 9}\n                \\Q {:rank 10}\n                \\K {:rank 11}\n                \\A {:rank 12}}]\n    (conj (myhash (last x)) (myhash (first x)))))", "problem": 128, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "#(hash-map\n     :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first %1))\n     :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %1))\n)", "problem": 128, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn [[suit rank]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n   :rank ({\\2 0 \\3 1 \\4 2\n           \\5 3 \\6 4 \\7 5\n           \\8 6 \\9 7 \\T 8\n           \\J 9 \\Q 10 \\K 11 \\A 12} rank)})", "problem": 128, "user": "515ead6be4b049add99a053e"}, {"code": "(fn [card]\n  (let [parsed-card (re-seq #\"[A-z\\d]\" card)\n        suit (first parsed-card)\n        rank (second parsed-card)\n        return-suit (fn [suit]\n                      (cond\n                       (= suit \"C\") :club\n                       (= suit \"D\") :diamond\n                       (= suit \"H\") :heart\n                       (= suit \"S\") :spade))\n        return-rank (fn [rank]\n                      (let [i (apply int rank)] \n                        (if (< i 58)\n                          (- (Integer. rank) 2)\n                          (cond \n                           (= rank \"T\") 8\n                           (= rank \"J\") 9\n                           (= rank \"Q\") 10\n                           (= rank \"K\") 11\n                           (= rank \"A\") 12))))]\n    (hash-map :suit (return-suit suit) :rank (return-rank rank))))", "problem": 128, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "#(\n  do\n  {:suit (get {\\H :heart \\D :diamond \\C :club \\S :spade} (first %))\n  :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %))}\n )", "problem": 128, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn [card]\n  (let [card-map {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12 \"S\" :spade \"C\" :club \"D\" :diamond \"H\" :heart}]\n   {:suit (card-map (str (first card))) :rank (card-map (str (second card)))}))", "problem": 128, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "(fn [[a b]] \n  (hash-map :suit\n             ({\\S :spade \\H :heart \\D :diamond \\C :club} a)\n             :rank\n             (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] b)))", "problem": 128, "user": "53034738e4b0d8b024fd373e"}, {"code": "(fn pcards_128\n  [x]\n  (let [ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suits {\\D :diamond \\C :club \\H :heart \\S :spade}\n        sq (seq x)]\n    {:suit (suits (first sq)) :rank (ranks (second sq)) }))", "problem": 128, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn [[suit rank]]\n    {:suit ({\\D :diamond,\n                  \\H :heart,\n                  \\C :club,\n        \t\t  \\S :spade} suit),\n     :rank (if-let [r ({\\T 8,\n                     \\J 9,\n        \t\t\t \\Q 10,\n        \t\t\t \\K 11,\n        \t\t\t \\A 12} rank)]\n                 r\n                 (- (read-string (str rank)) \n                    2))})", "problem": 128, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "(fn card [xs]\n   (let [suit {\\D :diamond \\H :heart \\C :club \\S :spade}\n         rank [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n        ]\n     (hash-map :suit (suit (first xs)) :rank (.indexOf rank (last xs)))\n   )\n )", "problem": 128, "user": "531c0619e4b08068f379ed98"}, {"code": "#(let [suits {\\D :diamond\n              \\H :heart\n              \\C :club\n              \\S :spade}\n       ranks {\\A 12\n              \\K 11\n              \\Q 10\n              \\J 9\n              \\T 8\n              \\9 7\n              \\8 6\n              \\7 5\n              \\6 4\n              \\5 3\n              \\4 2\n              \\3 1\n              \\2 0}]\n    (hash-map :suit (suits (first %)) :rank (ranks (second %))))", "problem": 128, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn recognize [x]\n  (let [suits {\"H\" :heart \"D\" :diamond \"S\" :spade \"C\" :club}\n        ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n    {:suit (get suits (str (first x)))\n     :rank (get ranks (str (second x)))}))", "problem": 128, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn [[s r]]\n  (let [\n        suits (zipmap (seq \"SHDC\") [:spade :heart :diamond :club])\n        ranks (zipmap (seq \"23456789TJQKA\") (range))\n        ]\n    (array-map :suit (suits s) :rank (ranks r))\n  )\n)", "problem": 128, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(let [suits {\\S :spade, \\D :diamond, \\H :heart, \\C :club}\n      ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n  (fn [[suit rank]] {:suit (suits suit), :rank (ranks rank)}))", "problem": 128, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn [s] {\n  :suit (get {\\D :diamond, \\H :heart, \\C :club, \\S :spade} (first s))\n  :rank (get {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (second s))})", "problem": 128, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [[suit rank]] (hash-map :suit (cond (= suit \\S) :spade  \n                                          (= suit \\H) :heart    \n                                           (= suit \\D) :diamond \n                                          :else :club) :rank (cond (= rank \\T) 8  (= rank \\J) 9 (= rank \\Q) 10  (= rank \\K) 11 (= rank \\A) 12 \n                                                                    :else (- (Integer/parseInt (str rank)) 2))))", "problem": 128, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn cards [c]\n  (letfn [(parse-suit [suit]\n           (cond\n\t\t     (= \\D suit) :diamond\n\t\t\t (= \\H suit) :heart\n\t\t\t (= \\S suit) :spade\n\t\t\t (= \\C suit) :club\n\t\t\t))\n\t\t (parse-rank [rank]\n\t\t   (cond\n\t\t     (= \\A rank) 12\n\t\t\t (= \\K rank) 11\n\t\t\t (= \\Q rank) 10\n\t\t\t (= \\J rank) 9\n\t\t\t (= \\T rank) 8\n\t\t\t :default (- (int rank) 50)\n\t\t   ))]\n\t\t     \n  (let [suit-raw (first c) suit (parse-suit suit-raw) rank-raw (last c)  rank (parse-rank rank-raw)]\n    {:suit suit :rank rank})))", "problem": 128, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "(fn [card]\n  (let [suit {\\D :diamond \\S :spide \\H :heart \\C :club}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (hash-map :suit (get suit (first card)) :rank (get rank (second card)))))", "problem": 128, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "(fn [[s r]]\n  {:rank ((zipmap \"23456789TJQKA\" (range 13)) r)\n   :suit ((zipmap \"DCHS\" [:diamond :club :heart :spade]) s)})", "problem": 128, "user": "4f80db02e4b033992c121bf9"}, {"code": "#(let [s (subs %1 0 1)\n       v (subs %1 1)\n       vale {\"2\" 0, \"3\" 1, \"4\" 2, \n             \"5\" 3, \"6\" 4, \"7\" 5, \n             \"8\" 6, \"9\" 7, \"T\" 8, \n             \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n       seme {\"S\" :spade ,\"H\" :heart,\n             \"D\" :diamond,\"C\" :club }]\n   {:suit (seme s) :rank (vale v)})", "problem": 128, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(fn to-card [[suit rank]]\n    (let [letter-to-suit (apply hash-map (interleave \"DHCS\" [:diamond, :heart, :club, :spade]))\n          number-to-rank (apply hash-map (interleave \"23456789TJQKA\" (range 0 13)))]\n          {:suit (letter-to-suit suit), :rank (number-to-rank rank)} ))", "problem": 128, "user": "531dfaf5e4b08068f379edb3"}, {"code": "(fn [s]\n  {:suit ({\\C :club \\D :diamond \\H :heart \\S :spade} (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))})", "problem": 128, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn rec [str]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade}\n              (first str))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n            \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} \n              (second str))})", "problem": 128, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn [x]\n(let [suitmap {\"D\" :diamond\n               \"H\" :heart\n               \"C\" :club\n               \"S\" :spade },\n      rankmap {\"2\" 0\n               \"3\" 1\n               \"4\" 2\n               \"5\" 3\n               \"6\" 4\n               \"7\" 5\n               \"8\" 6\n               \"9\" 7\n               \"T\" 8\n               \"J\" 9\n               \"Q\" 10\n               \"K\" 11\n               \"A\" 12}\n      coll (map str (seq x))]\n  {:suit (get suitmap (first coll))\n   :rank (get rankmap (second coll))}))", "problem": 128, "user": "52be0263e4b07a9af579230e"}, {"code": "(#(fn [[a b]]\n  {:suit (% a) :rank (if (% b) (% b) (- (int b) 50))}\n  )\n(zipmap \"DHCTJQKA\" [:diamond :heart :club 8 9 10 11 12]))", "problem": 128, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "(fn [[suit rank]] {\n  :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n  :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] rank)\n  })", "problem": 128, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [card]\n                                 (let [suits {\\H :heart \\D :diamond \\S :spade \\C :club}\n                                       rank  {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n                                   {:suit (suits (first card)) :rank (rank (last card))}))", "problem": 128, "user": "52fc34cee4b047fd55837015"}, {"code": "(fn [s]\n  (let [a (seq s) b (first a) c (second a)]\n    {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} b)\n     :rank ((merge (zipmap  (map #(->> % str first) (range 2 10)) (range 0 8))\n                   {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}) c)}))", "problem": 128, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(fn[x] (let [s {\\D :diamond, \\S :spade, \\C :club, \\H :heart}\n              r (assoc (zipmap (map #(Character/forDigit % 10) (range 2 10)) (range 9)) \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)]\n        (assoc {} :suit (get s (first x)) :rank (get r (first (rest x))))\n        ))", "problem": 128, "user": "4fba77fae4b081705acca2df"}, {"code": "(fn [s]\n  (let [suits {\\C :club \\D :diamond \\H :heart \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits (first s)) :rank (ranks (second s))}\n  )\n)", "problem": 128, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn parse [x]\n      (let [\n            values (zipmap (conj (vec (apply concat (map str (range 2 10)))) \\T \\J \\Q \\K \\A) (range 13))\n            suits (zipmap [\\S \\H \\D \\C] [:spade :heart :diamond :club])\n            v (into [] x)\n            rank (values (v 1))\n            spade (suits (v 0))             \n            ]\n        `{:suit ~spade :rank ~rank}\n        )\n      )", "problem": 128, "user": "51f81925e4b09be9c177e526"}, {"code": "(fn [s]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit (first s)\n        rank (second s)]\n    {:suit (suits suit) :rank (ranks rank)}))", "problem": 128, "user": "52d2f457e4b099d49816f0ba"}, {"code": "(fn [[s r]]\n  (let [suits (zipmap \"SHDC\" [:spade :heart :diamond :club])\n\t    ranks (zipmap \"23456789TJQKA\" (range 13))]\n   \t{:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn [x]\n  (let [y (map #(read-string (str %)) (seq x))\n        zzz (number? (last y))\n        s (get {\"S\" :spade \"D\" :diamond \"H\" :heart \"C\" :club} (str (first y)))\n        r (get (zipmap (concat (range 2 10) (map #(symbol %) '(\"T\" \"J\" \"Q\" \"K\" \"A\"))) (range 13)) (last y))]\n    {:rank r, :suit s}))", "problem": 128, "user": "52474133e4b05ef8e38e635e"}, {"code": "(fn pc [[s r]]\n  {:suit (condp = s\n              \\D :diamond\n              \\S :spade\n              \\H :heart\n              \\C :club)\n   :rank (condp = r\n               \\A 12\n               \\K 11\n               \\Q 10\n               \\J 9\n               \\T 8\n               (- (Integer/parseInt (str r)) 2))})", "problem": 128, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn [card-str]\n  (let [suit {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        rank (some-fn {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n                      #(-> % str read-string dec dec))\n        ]\n    {:suit (suit (first card-str)), :rank (rank (last card-str))}))", "problem": 128, "user": "533b57c3e4b0e30313ee6ccc"}, {"code": "(fn [s]\n  {:suit \n    ({\\D :diamond \\H :heart \\C :club \\S :spade} (first s))\n   :rank\n    ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))})", "problem": 128, "user": "52faec2ee4b047fd55837004"}, {"code": "(fn [desc] (let [[suit rank] desc]\n  { :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} suit)\n    :rank (.indexOf (seq \"23456789TJQKA\") rank) }))", "problem": 128, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "(fn [sr]\n   (let [sm {\"S\" :spade\n            \"H\" :heart\n            \"D\" :diamond\n            \"C\" :club}\n         rm {\"T\" 8\n            \"J\" 9\n            \"Q\" 10\n            \"K\" 11\n            \"A\" 12}\n         s (str (get sr 0))\n         r (str (get sr 1))]\n     {:suit (sm s)\n      :rank (if (re-matches #\"\\d\" r)\n              (- (read-string r) 2)\n              (rm r))}))", "problem": 128, "user": "506d5e4ce4b0a302964c5493"}, {"code": "#(let [[s r] %]\n   {:suit ({\\S :spades \\H :heart \\D :diamond \\C :club} s)\n    :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] r)})", "problem": 128, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn [c]\n  {:suit (case (first c) \n           \\D :diamond\n           \\S :spades\n           \\H :heart\n           \\C :club)\n   :rank (case (second c)\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12\n           (- (-> c second str Long.) 2))})", "problem": 128, "user": "53300924e4b019098a6f8b55"}, {"code": "#(hash-map  :suit ({ \\S :spade \\D :diamond \\H :heart \\C :club} (first %))\n    :rank (.indexOf \"23456789TJQKA\" (str (second %))))", "problem": 128, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn [card]\r\n          (let [[suit rank] card]\r\n            {:suit (get {\\H :heart \\D :diamond \\C :club} suit)\r\n             :rank (get (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13)) rank)}))", "problem": 128, "user": "4e9c3648535dbda64a6f6b7d"}, {"code": "(fn [s]\n  (let [t (first s) r (second s)]\n    {:suit (cond (= t \\D) :diamond\n                 (= t \\H) :heart\n                 (= t \\C) :club\n                 :else :spade)\n    :rank (cond (= r \\A) 12\n                (= r \\K) 11\n                (= r \\Q) 10\n                (= r \\J) 9\n                (= r \\T) 8\n                :else (- (int r) (int \\2)))}))", "problem": 128, "user": "51da631be4b02ceefd947766"}, {"code": "(fn [[suit rank]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} suit)\n   :rank ((zipmap \"23456789TJQKA\" (range)) rank)})", "problem": 128, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn card [x]\n  (let [[s r] (clojure.string/upper-case x)\n        suit (condp = s\n               \\H :heart\n               \\D :diamond\n               \\S :spade\n               \\C :club)\n        rank (condp = r\n               \\A 12\n               \\K 11\n               \\Q 10\n               \\J  9\n               \\T  8\n               (- (Integer/parseInt (str r)) 2))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn f [s]\n       (let [su (first s) r (second s)]\n         (array-map\n         :suit ({\\C :club \\D :diamond \\H :heart \\S :spade} su)\n         :rank ((merge {\"A\" 12 \"J\" 9 \"Q\" 10 \"K\" 11 \"T\" 8} (apply hash-map (interleave (map str (range 2 10)) (range 0 8)))) (str r)))))", "problem": 128, "user": "4df9c598535d04ed9115e77a"}, {"code": "(fn [card]\n   (let [suit-map {\"D\" :diamond\n                   \"H\" :heart\n                   \"C\" :club\n                   \"S\" :spade}\n         rank-map (into { \"A\" 12\n                          \"K\" 11\n                          \"Q\" 10\n                          \"J\" 9\n                          \"T\" 8 }\n                        (apply hash-map (apply concat (map #(list (str %) (- % 2)) (range 2 10)))))\n         suitStr (str (first card))\n         rankStr (str (second card))]\n     {:suit (get suit-map suitStr) :rank (get rank-map rankStr)}))", "problem": 128, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn [card] (let [card-chars (seq (str card))\n      suit-char (first card-chars)\n      rank-char (second card-chars)]\n  {:suit (case suit-char\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade\n           :unknown)\n  :rank (case rank-char\n          \\2 0\n          \\3 1\n          \\4 2\n          \\5 3\n          \\6 4\n          \\7 5\n          \\8 6\n          \\9 7\n          \\T 8\n          \\J 9\n          \\Q 10\n          \\K 11\n          \\A 12\n          :unknown)}))", "problem": 128, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn [x]\n  (zipmap [:suit :rank] (replace {\\S :spade \n           \\H :heart \n           \\D :diamond \n           \\C :club \n           \\T 8 \n           \\J 9 \n           \\Q 10 \n           \\K 11 \n           \\A 12 \n           \\2 0 \n           \\3 1 \n           \\4 2 \n           \\5 3 \n           \\6 4 \n           \\7 5 \n           \\8 6 \n           \\9 7} (seq x))))", "problem": 128, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "(fn card\n  [[suit rank]]\n  {:suit\n   ({\\S :spade\n     \\H :heart\n     \\D :diamond\n     \\C :club} suit)\n    \n   :rank\n   (.indexOf\n    \"23456789TJQKA\"\n    (int rank))})", "problem": 128, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn [s]\n  {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} (first (seq s)))\n   :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8,\n    \\J 9, \\Q 10, \\K 11, \\A 12} (second (seq s))) })", "problem": 128, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn parse [[s r]]\n  {:suit ({\\D :diamond, \\C :club,\\S :spades, \\H :heart} s)\n   :rank ((zipmap \"23456789TJQKA\" (range 13)) r)})", "problem": 128, "user": "523c61b2e4b07becd5be2220"}, {"code": "(fn [card]\n  (letfn [(suit [char]\n            (cond (= char \\S) :spade\n                  (= char \\H) :heart\n                  (= char \\D) :diamond\n                  (= char \\C) :club))\n          (rank [char]\n            (cond (= char \\2) 0\n                  (= char \\3) 1\n                  (= char \\4) 2\n                  (= char \\5) 3\n                  (= char \\6) 4\n                  (= char \\7) 5\n                  (= char \\8) 6\n                  (= char \\9) 7\n                  (= char \\T) 8\n                  (= char \\J) 9\n                  (= char \\Q) 10\n                  (= char \\K) 11\n                  (= char \\A) 12))]\n    {:suit (suit (first card)) :rank (rank (second card))}))", "problem": 128, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn [x] \n  {:suit (case (first x) \\D :diamond \\H :heart \\C :club \\S :spade) \n   :rank (case (second x) \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)})", "problem": 128, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [[s r]]\n  (let [suits {\\H :heart \\D :diamond \\S :spade \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "515896f2e4b059418b97f0a8"}, {"code": "#(hash-map :suit (get {\\S :spade, \\H :heart, \\C :club \\D :diamond } (first %)),\n   :rank (get (conj (zipmap (map char (range 50 58))(range 0 8)){\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}) (second %))\n  )", "problem": 128, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(let [suits {\\S :spade \\D :diamond \\H :heart \\C :club}\n      ranks (apply hash-map (interleave \"23456789TJQKA\" (range)))]\n  (fn [[s r]] {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(fn [s]\n  (let [suits {\"D\" :diamond  \"H\" :heart \"S\" :spade \"C\" :club}\n        ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8,\n               \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n        [suit rank] s]\n    {:suit (suits (str suit)) :rank (ranks (str rank))}))", "problem": 128, "user": "51ac80bbe4b09397d5109770"}, {"code": "(fn [s]\n  {\n    :suit ({\\C :club \\D :diamond  \\H :heart \\S :spades} (first s))\n    :rank (.indexOf \"23456789TJQKA\" (str (last s)))\n    })", "problem": 128, "user": "53460d02e4b084c2834f4a39"}, {"code": "#(let [sm {\\S :spade \\H :heart \\D :diamond \\C :club}\n         rm {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n         [s r] (char-array %)\n         rn (if (rm r) (rm r) (- (Integer/parseInt (str r)) 2))]\n    {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} s s)\n     :rank rn})", "problem": 128, "user": "4e705861535d5021c1a89635"}, {"code": "(fn [card-str]\n    (let [suit (condp = (first card-str)\n                    \\S :spade\n                    \\H :heart\n                    \\D :diamond\n                    \\C :club)\n          r (second card-str)\n          rank (condp = r\n                   \\A 12\n                   \\K 11\n                   \\Q 10\n                   \\J 9\n                   \\T 8\n                   (- (read-string (str r)) 2))]\n      {:suit suit :rank rank}))", "problem": 128, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn [[suit rank]]\n     (let [char->int (fn [c] (- (int c) 48))]\n          (hash-map\n            :suit  (case suit\n                    \\S :spade\n                    \\H :heart\n                    \\D :diamond\n                    \\C :club\n                    )\n            :rank  (if (-> rank char->int (<= 9)) (- (char->int rank) 2) \n                     ;; because I'm lazy\n                     (- (case rank \\T 9 \\J 10 \\Q 11 \\K 12 \\A 13) 1)\n                     )\n\n          )\n\n      )\n  \n )", "problem": 128, "user": "5314b0cae4b08068f379ed1c"}, {"code": "(fn [s]\n  (let [suits {\\S :suit \\H :heart \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits (first s)) :rank (ranks (last s))}))", "problem": 128, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "5175533fe4b0dea9bbfba575"}, {"code": "(fn [[s r]]\n  { :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n    :rank (.indexOf (seq \"23456789TJQKA\") r)})", "problem": 128, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade \\D :diamond \\C :club \\H :heart} s)                                                                                               \n   :rank (or ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} r)\n             (- (Integer/parseInt (str r)) 2))})", "problem": 128, "user": "4fa436dce4b081705acca19b"}, {"code": "(fn [[s r]]\n  (let \n    [suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n     rank ((zipmap \"23456789TJQKA\" (range)) r)]\n    {:suit suit :rank rank}))", "problem": 128, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [card-str]\n  (let [suit-from-char {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rank-from-char {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n\n        suit (suit-from-char (first card-str))\n        rank (rank-from-char (second card-str))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "53070615e4b02e821686979e"}, {"code": "(fn problem-128 [s]\n  (letfn [(spade->keyword [^Character spade]\n            (case spade\n              \\S :spade\n              \\D :diamond\n              \\H :heart\n              \\C :club))\n          (rank->num [^Character n]\n            (if (Character/isDigit n)\n              (- (Integer/valueOf (str n)) 2)\n              (case n\n                \\T 8\n                \\J 9\n                \\Q 10\n                \\K 11\n                \\A 12)))]\n    (let [[spade rank] s]\n      {:suit (spade->keyword spade)\n       :rank (rank->num rank)})))", "problem": 128, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn read-card [[s r]]\n  (let [\n         suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n         ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    {:suit (suits s) :rank (.indexOf ranks r)}\n    ))", "problem": 128, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn [[suit card]]\n  {:suit (get {\\S :spade, \\H :heart, \\D :diamond, \\C :club} suit)\n   :rank (get {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} card (- (int card) 50))})", "problem": 128, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "(fn [value]\n    (let [suits {\\H :heart \\D :diamond \\C :club \\S :spade}\n          ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n          split (seq value)]\n      {:suit (suits (first value)) :rank (ranks (second value))}))", "problem": 128, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn [[s r]]\n    {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} s)\n     :rank (- ({\\T 10, \\J 11, \\Q 12, \\K 13, \\A 14} r (Character/getNumericValue r)) 2)})", "problem": 128, "user": "5339c105e4b0e30313ee6cae"}, {"code": "#(let [c (seq %)\n       suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first c))\n       rank (or (get {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last c)) \n                (- (int (last c)) 50))]\n   {:suit suit :rank rank})", "problem": 128, "user": "4f0412f8535dcb61093f6b99"}, {"code": "#(assoc {} :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (nth % 0)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (nth % 1)))", "problem": 128, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "(fn [repr]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit (first repr)\n        rank (last repr)]\n    {:suit (get suits suit) :rank (or (get ranks rank) (- (-> rank str Integer/parseInt int) 2))}))", "problem": 128, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn [st] \n   (letfn [(ch->suit [ch] \n             ({\\S :spade\n               \\H :heart\n               \\D :diamond\n               \\C :club\n               } ch))\n           (ch->rank [ch] \n             ((zipmap (conj (vec (map char (range (int \\2) (inc (int \\9))))) \\T \\J \\Q \\K \\A) (range)) ch))\n           ] {:suit (ch->suit (first st))\n    :rank (ch->rank (second st))\n    })\n   )", "problem": 128, "user": "534d1173e4b084c2834f4a98"}, {"code": "(fn [x]\n  (let [s {\\H :heart \\D :diamond \\C :club \\S :spade}\n        r {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0}]\n    {:suit (s (first x)) :rank (r (second x))}))", "problem": 128, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade\n           \\H :heart\n           \\C :club\n           \\D :diamond} s)\n   :rank (.indexOf\n          (seq \"23456789TJQKA\")\n          r)})", "problem": 128, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn [x] \n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first x))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second x))})", "problem": 128, "user": "50f10f7be4b06d9538fe211a"}, {"code": "(fn [s]\n  (conj\n   {:suit (get {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n               (str (first s)))}\n   {:rank (get (conj (apply merge\n                            (map (fn [x] {(str x) (- x 2)})\n                                 (range 2 10)))\n                     {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12})\n               (str (last s)))}))", "problem": 128, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n  :rank ({\\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11} r)})", "problem": 128, "user": "534efe66e4b084c2834f4ac1"}, {"code": "(fn convert-card [s]\n  (let [suit {\\H :heart \\D :diamond \\S :spade \\C :club}\n        rank (merge  {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (into {} (for [x (range 8)] [(char (+ 50 x)) x])))]\n    {:suit (suit (nth s 0)) :rank (rank (nth s 1))}))", "problem": 128, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "(fn\n  [code]\n  (let [ranks (merge (zipmap (vec \"23456789\") (range)) (zipmap '(\\T \\J \\Q \\K \\A) (range 8 13)))\n        suits (zipmap '(\\D \\S \\C \\H) '(:diamond :spade :club :heart))\n        c (vec code)]\n    {:suit (get suits (first c)) :rank (get ranks (last c))}))", "problem": 128, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn [[s r]]\n  (let [suit (str s)\n        rank (str r)\n        suits {\"D\" :diamond \"S\" :spade \"H\" :heart \"C\" :club}\n        ranks (map str '(2 3 4 5 6 7 8 9 \\T \\J \\Q \\K \\A))\n        ranks-to-indices (into {} (map vector ranks (range 13)))]\n    {:suit (get suits suit) :rank (get ranks-to-indices rank)}))", "problem": 128, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "(fn [[s r]]\n(let\n  [\n   suit? (fn [letter] (case letter \"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club))\n   rank? (fn [rank] (case rank \"A\" 12 \"K\" 11 \"Q\" 10 \"J\" 9 \"T\" 8 (- (Integer/parseInt rank) 2)))\n   ]\n  {\n  :suit (suit? (str s))\n  :rank (rank? (str r))\n  }\n  )\n  )", "problem": 128, "user": "4f031883535dcb61093f6a5e"}, {"code": "(fn [c]\n  {:suit\n  ((fn [s]\n     (cond (= s \\D) :diamond\n           (= s \\H) :heart\n           (= s \\C) :club\n           true :spade))\n   (first c))\n  :rank\n  ((fn [r]\n     (cond (= r \\A) 12\n           (= r \\K) 11\n           (= r \\Q) 10\n           (= r \\J) 9\n           (= r \\T) 8\n           true (- (int r) (int \\2))))\n   (second c))})", "problem": 128, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "(fn [ s ] { :suit ({ \\H :heart, \\D :diamond, \\S :spade, \\C :club } (first s)), \n            :rank ({ \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12 } (second s)) } )", "problem": 128, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "(fn [[x y]] {\n    :suit ({\\H :heart \\D :diamond} x :club)\n    :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} y (- (int y) 50))\n    })", "problem": 128, "user": "53500869e4b084c2834f4ad3"}, {"code": "(fn [card]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits (first card)) :rank (ranks (last card))}))", "problem": 128, "user": "5338e33fe4b0e30313ee6ca1"}, {"code": "(fn card [[suit rank]]\n  (let [ranks {\\S :spade \\H :heart \\D :diamond \\C :club}]\n    {:suit (ranks suit)\n    :rank (case rank\n            \\A 12\n            \\K 11\n            \\Q 10\n            \\J 9\n            \\T 8\n            (- (Integer/parseInt (str rank)) 2))}))", "problem": 128, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn rec-play\n  [card]\n  (assoc \n    {} \n    :suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} (first card))\n    :rank (get (zipmap \"23456789TJQKA\" (range 13)) (second card))))", "problem": 128, "user": "536aa86de4b0243289761eb1"}, {"code": "#(->> (list :suit (first %) :rank (second %))\n      (replace (into {\\S :spade, \\D :diamond, \\C :club, \\H :heart } (map vector \"23456789TJQKA\" (range 13))))\n    (apply array-map))", "problem": 128, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "(fn [[s v]]\n  (let [suits {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits s) :rank (ranks v)}\n  ))", "problem": 128, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn [s]\n  {:suit (case (first s) \\H :heart \\D :diamond \\S :spade \\C :club)\n   :rank (case (nth s 1) \\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11)}\n  )", "problem": 128, "user": "535943b3e4b04ce2eb3ed295"}, {"code": "(fn [[s v]] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n  \t\t\t :rank (cond (= v \\A) 12\n                    \t (= v \\K) 11\n                         (= v \\Q) 10\n                         (= v \\J) 9\n                         (= v \\T) 8\n                         :default (- (read-string (str v)) 2))})", "problem": 128, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn [card-str]\n  (let [[suit-str value-str] (re-seq #\"\\w\" card-str)]\n    {:suit (get {\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade} suit-str)\n     :rank (get {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} value-str)}))", "problem": 128, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "(fn [[x y]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} x)\n   :rank ((into {} (map hash-map \"23456789TJQKA\" (range))) y)})", "problem": 128, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [s]\n  (let [suit \t{\\S :spade \\D :diamond \\H :heart \\C :club}\n        rank \t(into {} (map-indexed #(vector %2 %1) \"23456789TJQKA\"))]\n    \n    { :suit (suit (first s)) :rank (rank (second s))}))", "problem": 128, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn [card]\n  (let [suite (first card)\n        rank (last card)]\n    { :suit (cond\n             (= \\D suite) :diamond\n             (= \\S suite) :spaid\n             (= \\H suite) :heart\n             :else :club)\n      :rank (cond\n             (= \\2 rank) 0\n             (= \\3 rank) 1\n             (= \\4 rank) 2\n             (= \\5 rank) 3\n             (= \\6 rank) 4\n             (= \\7 rank) 5\n             (= \\8 rank) 6\n             (= \\9 rank) 7\n             (= \\T rank) 8\n             (= \\J rank) 9\n             (= \\Q rank) 10\n             (= \\K rank) 11\n             :else 12) }))", "problem": 128, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "(fn card [string]\n  (let [x (first (re-seq #\"\\w\" string))\n        y (first (re-seq #\"\\d\" string))\n        z (last (re-seq #\"\\w\" string))]\n    (hash-map :suit\n              (cond\n                (= \"S\" x) :spade\n                (= \"D\" x) :diamond\n                (= \"H\" x) :heart\n                (= \"C\" x) :club)\n              :rank\n              (cond\n                (= \"2\" y) 0\n                (= \"3\" y) 1\n                (= \"4\" y) 2\n                (= \"5\" y) 3\n                (= \"6\" y) 4\n                (= \"7\" y) 5\n                (= \"8\" y) 6\n                (= \"9\" y) 7\n                (= \"T\" z) 8\n                (= \"J\" z) 9\n                (= \"Q\" z) 10\n                (= \"K\" z) 11\n                (= \"A\" z) 12))))", "problem": 128, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "(fn card [[csuit crank]]\n    (let [suit (case csuit\n                 \\S :spade\n                 \\H :heart\n                 \\C :club\n                 \\D :diamond)\n          rank (case crank\n                 \\A 12\n                 \\K 11\n                 \\Q 10\n                 \\J 9\n                 \\T 8\n                 (- (int crank) (int \\2)))]\n      {:suit suit, :rank rank}))", "problem": 128, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "(fn [[suit rank]]\n                   (let [suits {:D, :diamond, :S :spade\n                                :H :heart, :C :club}\n                         high-ranks {:T 8, :J 9, :Q 10, :K 11, :A 12}\n                         force-keyword #(keyword (str %))\n                         low-ranks (zipmap (map force-keyword (range 2 10)) (range 0 8))\n                         ranks (merge low-ranks high-ranks)]\n                     {:suit (suits (force-keyword suit))\n                      :rank (ranks (force-keyword rank))}))", "problem": 128, "user": "4edb314d535d10e5ff6f5317"}, {"code": "(fn [s]\n  (let [suit-letter (str (first s))\n        rank-letter (str (second s))\n        suits {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spade}\n        ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n    ;;\n    {:suit (get suits suit-letter), :rank (get ranks rank-letter)}))", "problem": 128, "user": "53415755e4b00652c8746ecd"}, {"code": "#(let [s {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade }\n        r {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n        h (subs % 0 1)\n        t (subs % 1 2)]\n    {:suit (s h)\n     :rank (or (r t)\n               (- (Integer/parseInt t) 2))})", "problem": 128, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "problem": 128, "user": "4ef2eb4d535dced4c769f226"}, {"code": "(fn [[s r]]\n  {:suit ((zipmap \"CHDS\" [:club :heart :diamond :spade]) s)\n  ,:rank ((zipmap \"23456789TJQKA\" (range)) r)})", "problem": 128, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "(fn [[s r]]\n  {:suit ({\\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade} s)\n   :rank (.indexOf (seq \"23456789TJQKA\") r)})", "problem": 128, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn [card-st]\n  (let [suit-st (first card-st)\n        rank-st (second card-st)]\n    {:suit (case suit-st\n                \\D :diamond\n                \\H :heart\n                \\C :club\n                \\S :spade),\n     :rank (case rank-st\n                \\2 0\n                \\3 1\n                \\4 2\n                \\5 3\n                \\6 4\n                \\7 5\n                \\8 6\n                \\9 7\n                \\T 8\n                \\J 9\n                \\Q 10\n                \\K 11\n                \\A 12) } ))", "problem": 128, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn [card]\n  (let\n      [d (merge {:C :club :H :heart :D :diamond :S :spade} {:T 8 :J 9 :Q 10 :K 11 :A 12} (zipmap (map (comp keyword str) (range 2 10)) (range)))\n       [f s] (map (comp keyword str) card)]\n    (assoc {} :suit (d f) :rank (d s))))", "problem": 128, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn playingcards [x]\n        (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n              ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n          (zipmap [:suit :rank] (vector (get suits (first x)) (get ranks (first (rest x)))))))", "problem": 128, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn [str-rep]\n  (let [ suit-decode { \\C :club, \\D :diamond, \\H :heart, \\S :spade }\n         rank-decode (fn [c]\n                       (get {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} c\n                            (- (Character/getNumericValue c) 2)))\n         \n         [suit-char rank-char] (seq str-rep)]\n    {:suit (suit-decode suit-char) :rank (rank-decode rank-char)}))", "problem": 128, "user": "53800d99e4b06839e8705ebd"}, {"code": "(fn [s] (let [cs (seq s) fc (first cs) sc (second cs) \n              r1 (case fc \\S :spade \\H :heart \\D :diamond \\C :club) \n              r2 (case sc \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)] \n          (hash-map :suit r1 :rank r2)))", "problem": 128, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn [s]\n  (let [cv (map char s)]\n    (hash-map :suit\n              ({\\D :diamond \\H :heart \\C :club \\S :spade} (nth cv 0))\n              :rank\n              ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (nth cv 1)))))", "problem": 128, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(letfn [\n\t(toSuit [s]\n\t\t(case s\n\t\t\t\\D :diamond\n\t\t\t\\H :heart\n\t\t\t\\C :club\n\t\t\t\\S :spade))\n\t(toRank [r]\n\t\t(.indexOf \"23456789TJQKA\" (str r)))]\n\t(fn [[s r]]\n\t\t{:suit (toSuit s), :rank (toRank r)}))", "problem": 128, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "(fn card-converter\n  [card]\n  (let [suits {\\H :heart \\D :diamond \\S :spade \\C :club}\n    \tranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get-in suits [(first card)]) :rank (get-in ranks [(last card)])}))", "problem": 128, "user": "530ed3a8e4b08068f379ecc3"}, {"code": "(fn [[s r]]\n  {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} s)\n   :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r)})", "problem": 128, "user": "53779a26e4b06839e8705e38"}, {"code": "(fn card [s]\n  (let [ranks {:T 8 :J 9 :Q 10 :K 11 :A 12}\n        suites {:D :diamond :H :heart :C :club :S :spade}\n        suit (keyword (str (first s)))\n        r (read-string (str (last s)))\n        rank (if (number? r)\n               (- r 2)\n               ((keyword r) ranks))]\n    {:suit ((keyword (str (first s))) suites)\n     :rank rank}))", "problem": 128, "user": "53286389e4b09d4e7a9b5504"}, {"code": "#(letfn [(s [x]\n            (cond (= x \\D) :diamond\n                  (= x \\H) :heart\n                  (= x \\C) :club\n                  :else :spade))\n         (r [y]\n            (cond (= y \\T) 8\n                  (= y \\J) 9\n                  (= y \\Q) 10\n                  (= y \\K) 11\n                  (= y \\A) 12\n                  :else (- (int y) 50)))]\n   (let [values (seq %)]\n     (zipmap [:rank :suit] (vector (r (second values)) (s (first values))))))", "problem": 128, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn [card]\n  {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} (first card))\n   :rank ((apply hash-map (interleave [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)))\n          (second card))})", "problem": 128, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn [s]\n  (let [a (first s)\n        b (second s)\n        suit (cond (= \\D a) :diamond\n                   (= \\H a) :heart\n                   (= \\C a) :club\n                   (= \\S a) :spade)\n        rank (cond (= \\A b) 12\n                   (= \\K b) 11\n                   (= \\Q b) 10\n                   (= \\J b) 9\n                   (= \\T b) 8\n                   :else (- (Integer/parseInt (str b)) 2))]\n    {:suit suit :rank rank}))", "problem": 128, "user": "53638ed2e4b0243289761e5b"}, {"code": "(fn [s] (let [map1 {\\H :heart \\D :diamond \\C :club \\S :spades}\n               map2 {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5\n                     \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}] {:suit (get map1 (first s)), :rank (get map2 (second s))}))", "problem": 128, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "(fn convert-card [card]\n  (let [suits {\\S :spade \\D :diamond \\C :club \\H :heart}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit (first (seq card))\n        rank (second (seq card))\n        ]\n    {:suit (suits suit) :rank (ranks rank)}))", "problem": 128, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn [card]\n  (let [suit_in  (str (first card))\n        rank_in  (read-string (clojure.string/replace (str (last card)) #\"T|J|Q|K|A\" {\"T\" \"10\" \"J\" \"11\" \"Q\" \"12\" \"K\" \"13\" \"A\" \"14\"}))\n        rank_out (dec (dec rank_in))\n        suit_out (case suit_in\n                   \"D\" :diamond\n                   \"H\" :heart\n                   \"C\" :club\n                   \"S\" :spades)]\n    {:suit suit_out :rank rank_out}))", "problem": 128, "user": "537881a4e4b06839e8705e46"}, {"code": "(fn recognize-playing-cards\n  [card]\n (let [suit-map {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club}\n       rank-vec [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]]\n   {:suit (suit-map (str (first card)))\n    :rank (.indexOf rank-vec (str (second card)))}))", "problem": 128, "user": "52c00e4fe4b07a9af5792342"}, {"code": "(fn [x] { :suit (case (get x 0)\n\t\t \\S :spade\n\t\t \\D :diamond\n\t\t \\H :heart\n\t\t \\C :club)\n\t\t:rank (if (> (int (get x 1)) 57)\n\t\t\t(case (get x 1)\n\t\t\t  \\Q 10\n\t\t\t  \\A 12\n\t\t\t  \\K 11\n\t\t\t  \\T 8\n\t\t\t  \\J 9)\n\t\t\t(- (int (get x 1)) 50))})", "problem": 128, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "(fn [[s r]] \n  {:suit ({\\S :spade \\H :heart \\C :club \\D :diamond} s) \n   :rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r) \n             (- (Character/digit ^char r 10) 2))})", "problem": 128, "user": "523b4e91e4b07becd5be21ef"}, {"code": "(fn R [c]\n  (let [s {\\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade}\n        r {\\A 12\n           \\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11}]\n    {:suit (s (first c))\n     :rank (r (second c))}))", "problem": 128, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "#(hash-map\n                                :suit (get {\"D\" :diamond, \"H\" :heart, \"S\" :spade, \"C\" :club} (subs (str %) 0 1))\n                                :rank (.indexOf \"23456789TJQKA\" (subs (str %) 1 2)))", "problem": 128, "user": "53838742e4b06839e8705ee0"}, {"code": "(fn [x]\n  (let [suites {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get suites (nth x 0)) :rank (get ranks (nth x 1))}))", "problem": 128, "user": "538d464ee4b0b51d73faae69"}, {"code": "(fn [[suit rank]]\n   (let [s ({\\S :spade \\H :heart \\D :diamond \\C :club} suit)\n         r ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)]\n     {:suit s :rank r}))", "problem": 128, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "(fn [s]\n  (let [suit (first s)\n        rank (last s)\n        suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks (conj (zipmap (map #(char (+ 48 %)) (range 2 10)) (range 8))\n                    [\\T 8] [\\J 9] [\\Q 10] [\\K 11] [\\A 12])]\n    {:suit (suits suit)\n     :rank (ranks rank)}))", "problem": 128, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "(fn [[f s]]\n  (let [suit-map {\\C :club \\H :heart \\D :diamond \\S :spade}\n        rank-map (->> '[\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n                      (map-indexed #(do [%2 %1]))\n                      (into {}))]\n    {:suit (suit-map f)\n     :rank (rank-map s)}))", "problem": 128, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn [spec]\n  (zipmap \n      [:suit :rank]\n      (map {\\S :spade \\H :heart \\D :diamond \\C :club\n        \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 } spec)))", "problem": 128, "user": "531619c1e4b08068f379ed3d"}, {"code": "(fn [cardstr]\n    (let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n          ranks (zipmap \"23456789TJQKA\" (range))]\n      {:suit (suits (first cardstr))\n       :rank (ranks (second cardstr))}))", "problem": 128, "user": "53806e5be4b06839e8705ec1"}, {"code": "(fn [v] (let [co {:suit {\\D :diamond \\H :heart \\S :spade \\C :club}\n                  :rank (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] \n                                (range 13))}]\n  (reduce #(hash-map :suit (get-in co [:suit %1]) \n                     :rank (get-in co [:rank %2]))  \n          (seq v))))", "problem": 128, "user": "528410bbe4b0239c8a67adc2"}, {"code": "(fn [card]\n  {:suit ((comp {:S :spade :H :heart :D :diamond :C :club} keyword str first seq) card)\n   :rank ((comp {:A 12 :K 11 :Q 10 :J 9 :T 8 :9 7 :8 6 :7 5 :6 4 :5 3 :4 2 :3 1 :2 0} keyword str second seq) card)}\n  )", "problem": 128, "user": "5368fedee4b0243289761e93"}, {"code": "(fn [s]\n  (let [ranks (range 13)\n        rank-chars (concat (map str (range 2 10)) '(\"T\" \"J\" \"Q\" \"K\" \"A\"))\n        rank-map (zipmap rank-chars ranks)\n        suit-map {\"S\" :apade, \"H\" :heart,\"D\" :diamond,\"C\" :club}\n        seq-chars (map str (seq s))]\n    {:suit (suit-map (first seq-chars)) :rank (rank-map (second seq-chars))}))", "problem": 128, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "#(let [s ({\\D :diamond \n           \\H :heart \n           \\C :club \n           \\S :spade} (first %))\n       r (second %)\n       ]\n{:suit s\n :rank (condp = r\n         \\T 8\n         \\J 9\n         \\Q 10\n         \\K 11\n         \\A 12\n         (- (int r) (int \\2)))})", "problem": 128, "user": "536b2048e4b0243289761eb7"}, {"code": "(fn cards [[s r]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits s) :rank (ranks r)}))", "problem": 128, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn  [s]\n  (let [suits {:h :heart :d :diamond :c :club :s :spade}\n        ranks {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :t 8 :j 9 :q 10 :k 11 :a 12}\n        s2 (clojure.string/lower-case s)\n        suit (keyword (subs s2 0 1))\n        rank (keyword (subs s2 1 2))]\n    {:suit (suits suit) :rank (ranks rank)}))", "problem": 128, "user": "538e36c7e4b0b51d73faae81"}, {"code": "(fn [[s r]]\n    (let [suits { \\D :diamond, \\H :heart, \\S :spade, \\C :club}\n          ranks (zipmap (map identity \"23456789TJQKA\") (range 13))]\n      {:suit (get suits s) :rank (get ranks r)}))", "problem": 128, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "problem": 128, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn parse-card [[suit rank]]\n  {:suit (case suit \\C :club \\D :diamond \\H :heart \\S :spade)\n   :rank (cond (Character/isDigit rank) (- (Integer/parseInt (str rank)) 2)\n               :else (+ 8 (.indexOf (vec \"TJQKA\") rank)))\n   })", "problem": 128, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn [s]\n\t{:suit (cond \n\t\t(= (first s) \\D) :diamond\n\t\t(= (first s) \\H) :heart\n\t\t(= (first s) \\C) :club\n\t\t:else :spade)\n\t :rank (cond\n\t\t(= (second s) \\2) 0\n\t\t(= (second s) \\3) 1\n\t\t(= (second s) \\4) 2\n\t\t(= (second s) \\5) 3\n\t\t(= (second s) \\6) 4\n\t\t(= (second s) \\7) 5\n\t\t(= (second s) \\8) 6\n\t\t(= (second s) \\9) 7\n\t\t(= (second s) \\T) 8\n\t\t(= (second s) \\J) 9\n        (= (second s) \\Q) 10\n\t\t(= (second s) \\K) 11\n\t\t:else 12) }\n\t)", "problem": 128, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "(fn\n  [str]\n  (let [suitMap {\\C :club\n                 \\D :diamond\n                 \\S :spade\n                 \\H :heart}\n        ranks \"23456789TJQKA\"]\n    {:suit (suitMap (.charAt str 0))\n     :rank (.indexOf ranks (int (.charAt str 1)))}))", "problem": 128, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn [card]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        num-rank (re-find #\"\\d\" card)]\n    {:suit (suits (first card)) :rank (if num-rank (- (read-string num-rank) 2) (rank (last card)))}))", "problem": 128, "user": "538e864ee4b0b51d73faae87"}, {"problem": 128, "code": "(fn convert-card-str\n  [card-str]\n  (let [suit (condp = (first card-str)\n                \\D :diamond\n                \\H :heart\n                \\C :club\n                \\S :spade)\n        convert-rank (fn [x] (- (int x) 50))\n        rank (condp = (second card-str)\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12\n               (convert-rank (second card-str)))\n        ]\n    {:suit suit :rank rank}))", "user": "52af7a5ce4b0c58976d9acbd"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        [suit-char rank-char] (seq s)\n        rank (ranks rank-char)\n        suit (suits suit-char)]\n    {:rank rank :suit suit}))", "user": "5250b7a5e4b0541d1855b83e"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-map {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rank-map (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))]\n    {:suit (get suit-map (first s))\n     :rank (get rank-map (second s))}))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 128, "code": "(fn [st]\n   (let [s (str (nth st 0))\n         r (str (nth st 1))\n         suits {\"D\" :diamond\n                \"H\" :heart\n                \"C\" :club\n                \"S\" :spade}\n         ranks (zipmap (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range 13))]\n     {:suit (suits s) :rank (ranks r)}))", "user": "52c49401e4b0c2d177d620de"}, {"problem": 128, "code": "(fn [s]\n  (let [suit {\\C :club \\H :heart \\S :spade \\D :diamond}\n        rank \"23456789TJQKA\"]\n    {:suit (get suit (first s)) :rank (first (filter #(not (nil? %))\n                                                     (map-indexed #(if (= %2 (second s)) %1 nil) rank)))}))", "user": "53a1b5c8e4b0ca733b9744c1"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond, \\C :club, \\S :spade, \\H :heart} s)\n   :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r)})", "user": "4faf97d8e4b081705acca258"}, {"problem": 128, "code": "(fn play-card [card-code](let [card-map {\\S :spade\n                 \t\t\t\t\\H :heart\n                 \t\t\t\t\\C :club\n                 \t\t\t\t\\D :diamond\n                 \t\t\t\t\\2 0\n                 \t\t\t\t\\3 1\n                 \t\t\t\t\\4 2\n                 \t\t\t\t\\5 3\n                 \t\t\t\t\\6 4\n                 \t\t\t\t\\7 5\n                 \t\t\t\t\\8 6\n                 \t\t\t\t\\9 7\n                 \t\t\t\t\\T 8\n                 \t\t\t\t\\J 9\n                 \t\t\t\t\\Q 10\n                 \t\t\t\t\\K 11\n                 \t\t\t\t\\A 12}]\n                 \t{:suit (card-map (first card-code)) :rank (card-map (last card-code))}))", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 128, "code": "(fn [s]\n  (let [desc (seq s)\n        suit (first desc)\n        rank (second desc)]\n    {:suit (get {\\D :diamond\n                 \\H :heart\n                 \\S :spade\n                 \\C :club} suit)\n    :rank (or (get {\\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12} rank) (- (int rank) (int \\0) 2))}))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "537e104ce4b06839e8705e9a"}, {"problem": 128, "code": "(fn [in-string] (let [char2rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n             char2suit {\\D :diamond \\S :spade \\H :heart \\C :club}] \n          {:suit (char2suit (first in-string)) :rank (char2rank (second in-string))}))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 128, "code": "(fn [x]\n  (let\n    [parse-suit (fn [suit]\n                  (cond (= suit \\S) :spade\n                        (= suit \\D) :diamond\n                        (= suit \\H) :heart\n                        (= suit \\C) :club))\n     parse-rank (fn [rank]\n                  (cond (= rank \\A) 12\n                        (= rank \\K) 11\n                        (= rank \\Q) 10\n                        (= rank \\J) 9\n                        (= rank \\T) 8\n                        :else (- (int rank) 50)))\n     rank (parse-rank (last x))\n     suit (parse-suit (first x))]\n    (hash-map :rank rank :suit suit)))", "user": "53ac4719e4b047364c04445c"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-map {\\S :suit \\H :heart \\D :diamond \\C :club}\n        rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (apply (fn[x y]\n             {:suit (get suit-map x)\n              :rank (get rank-map y)})\n           (seq s))))", "user": "50ccf729e4b0f7a459302aac"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club}\n        ranks {\"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n        [a b] (rest (clojure.string/split s #\"\"))]\n    (hash-map :suit (suits a)\n              :rank (let [num (Integer/parseInt b 36)]\n                      (if (< num 10)\n                        (- num 2)\n                        (ranks b))))))", "user": "532bce35e4b09d4e7a9b5536"}, {"problem": 128, "code": "(fn [c]\n  (let [c (str c)]\n    {:suit ({\\D :diamond\n             \\H :heart\n             \\S :spade\n             \\C :club}\n            (first c))\n     :rank ({\\A 12\n             \\K 11\n             \\Q 10\n             \\J 9\n             \\T 8\n             \\9 7\n             \\8 6\n             \\7 5\n             \\6 4\n             \\5 3\n             \\4 2\n             \\3 1\n             \\2 0} (second c))}))", "user": "53b182a5e4b047364c044491"}, {"problem": 128, "code": "(fn [s] (let [suit-map {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club} rank-str \"23456789TJQKA\" \n              suit (suit-map (str (first s))) rank (.indexOf rank-str (str (second s)))]\n           {:suit suit :rank rank}))", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 128, "code": "(fn cards [code] \n\t(let [card-values (zipmap (concat (apply str (range 2 10)) \"TJQKA\") (range 13)) \n\t\t  suits (zipmap \"SHDC\" [:spade :heart :diamond :club])]\n\t\t  (zipmap [:suit :rank][(suits (first code)) (card-values (second code))])))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 128, "code": "(fn [[s c]] {:suit ({\\H :heart \\D :diamond \\C :club \\S :spade} s) :rank ((zipmap (seq \"23456789TJQKA\") (range)) c)})", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 128, "code": "(fn [c]\n  {:suit ({\"D\" :diamond\n           \"H\" :heart\n           \"C\" :club\n           \"S\" :spade} (str (first c)))\n   :rank ((into {\"T\" 8\n                 \"J\" 9\n                 \"Q\" 10\n                 \"K\" 11\n                 \"A\" 12}\n                (map (fn [r] [(str (+ r 2)) r])\n                     (range 8))) \n          (str (last c)))})", "user": "53acaf1fe4b047364c04445f"}, {"problem": 128, "code": "(fn s [s]\n  (let [\n        [s r] (seq s)\n        ranks (clojure.set/union (zipmap (map char (range 49 58)) (range -1 8)) {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12})]\n    {:suit  ({\\S :spades \\H :heart \\D :diamond \\C :club} s) :rank (ranks r)}))", "user": "51aefceee4b09397d5109797"}, {"problem": 128, "code": "(fn card [[s r]]\n  (let [suit {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank (zipmap \"23456789TJQKA\" (range))]\n    {:suit (suit s) :rank (rank r)}))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 128, "code": "(fn [card]\n  (let [[[_ suit rank]] (re-seq #\"([HDSC])([2-9TJQKA])\" card)]\n    (hash-map\n     :rank (case rank\n                 \"A\" 12\n                 \"K\" 11\n                 \"Q\" 10\n                 \"J\" 9\n                 \"T\" 8\n                 (- (.codePointAt rank 0) (int \\2)))\n     :suit (case suit\n                 \"D\" :diamond\n                 \"H\" :heart\n                 \"C\" :club\n                 \"S\" :spade\n                 :error))))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 128, "code": "(fn [str]\n  (let [s {\\D :diamond \\H :heart \\C :club \\S :spade} r {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (s (first str)) :rank (r (second str))}\n    )\n  )", "user": "53ae16e2e4b047364c044472"}, {"problem": 128, "code": "(fn [msg] \n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}  \n        ws (seq msg) ] \n    {:suit (suits (first ws)) \n    :rank (condp = (second ws) \n            \\T 8 \n            \\J 9 \n            \\Q 10 \n            \\K 11 \n            \\A 12 (- (int (second ws)) 50))}))", "user": "53976599e4b0b51d73faaeea"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suit {\\H :heart \\D :diamond \\C :club \\S :spade}\n        rank (zipmap \"23456789TJQKA\" (range))]\n  {:suit (suit s) :rank (rank r)}))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 128, "code": "(fn my-cards [card-str]\n      (let [rank-char (second card-str)\n            suit-char (first card-str)\n            rank (cond\n                   (= \\2 rank-char) [:rank 0]\n                   (= \\3 rank-char) [:rank 1]\n                   (= \\4 rank-char) [:rank 2]\n                   (= \\5 rank-char) [:rank 3]\n                   (= \\6 rank-char) [:rank 4]\n                   (= \\7 rank-char) [:rank 5]\n                   (= \\8 rank-char) [:rank 6]\n                   (= \\9 rank-char) [:rank 7]\n                   (= \\T rank-char) [:rank 8]\n                   (= \\J rank-char) [:rank 9]\n                   (= \\Q rank-char) [:rank 10]\n                   (= \\K rank-char) [:rank 11]\n                   (= \\A rank-char) [:rank 12]\n                   )\n            suit (cond\n                   (= \\S suit-char) [:suit :spade]\n                   (= \\H suit-char) [:suit :heart]\n                   (= \\D suit-char) [:suit :diamond]\n                   (= \\C suit-char) [:suit :club]\n                   )\n            ]\n        ;(flatten (vector suit rank))\n        (into {} (vector suit rank))\n        )\n      )", "user": "536827f1e4b0243289761e8a"}, {"problem": 128, "code": "(fn card-convert [card] (let [card-map { \"H\", :heart,\n                                      \"D\", :diamond,\n                                      \"C\", :club,\n                                      \"S\", :spade },\n                              rank-map { \"2\", 0,\n                              \t\t\t \"3\", 1,\n                                         \"4\", 2,\n                              \t\t\t \"5\", 3,\n                                         \"6\", 4,\n                                         \"7\", 5,\n                                         \"8\", 6,\n                                         \"9\", 7,\n                                         \"T\", 8,\n                                         \"J\", 9,\n                                         \"Q\", 10,\n                              \t\t\t \"K\", 11,\n                                         \"A\", 12}\n                              \t\t\t \n                              ]\n                           {:suit (get card-map (str (first card))) :rank (get rank-map (str (last card)))}))", "user": "504f5804e4b0a02f9cffde72"}, {"problem": 128, "code": "(fn [s]\n  (let [suit {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (assoc {}\n          :suit (suit (first s))\n          :rank (rank (second s)))))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 128, "code": "(fn [s]\n  (let [[s r] (vec (seq s))]\n    {:suit (get {\\C :club \\H :heart \\S :spade \\D  :diamond} s)\n     :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)}\n    ))", "user": "53b530c6e4b047364c0444bc"}, {"problem": 128, "code": "(fn transform-playing-cards [s]\n\t(hash-map \n     \t:suit (get {\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club} (str (nth (seq s) 0))) \n       \t:rank (get {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12} (str (nth (seq s) 1)))))", "user": "52b71bd2e4b0c58976d9ad4d"}, {"problem": 128, "code": "(fn [card] (let [suits {\\C :club \\D :diamond \\H :heart \\S :spade}\n                 ranks (concat (map (comp char (partial + 48)) (range 2 10)) [\\T \\J \\Q \\K \\A])]\n             (zipmap [:suit :rank] (vector (get suits (get card 0)) (.indexOf ranks (get card 1))))))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 128, "code": "(fn [[s c]]\n  {:suit ({\\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade} s)\n   :rank (.indexOf (vec \"23456789TJQKA\") c)})", "user": "51515a19e4b03e678e393acc"}, {"problem": 128, "code": "(fn [n]\n(let [m1 (zipmap \"SHDC\" [:spade :heart :diamond :club])\n      m2 (zipmap \"23456789TJQKA\" (range))]\n  \n     {:suit (-> (first n) m1) :rank (-> (second n) m2)}\n  ))", "user": "5140771ae4b076604f1aa555"}, {"problem": 128, "code": "#(zipmap [:suit :rank] (replace {\\S :spade \\D :diamond \\C :club \\H :heart \\3 1 \\2 0 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} %))", "user": "5382704be4b06839e8705ed4"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n        ranks {\"2\" 0 \"3\" 1 \"4\" 2\n            \"5\" 3 \"6\" 4 \"7\" 5\n            \"8\" 6 \"9\" 7 \"T\" 8\n            \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n    {:suit (get suits (subs s 0 1)) :rank (get ranks (subs s 1))}))", "user": "52cf1e25e4b07d0d72b2739c"}, {"problem": 128, "code": "#(let [cards (merge {\\D :diamond \\H :heart \\C :club \\S :spade \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} (zipmap (map char (range 50 58)) (range)))]\n    (apply (fn [l r] {:suit (cards l) :rank (cards r)}) %))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 128, "code": "(fn [cs]\n    (let [c (seq cs)]\n      {:suit (get {\\H :heart \\S :spade \\D :diamond \\C :club} (first c)) :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (last c))}\n      ))", "user": "52bf0116e4b07a9af5792328"}, {"problem": 128, "code": "#(\n  let [suits {\\D :diamond, \\H :heart, \\S :spade, \\C :club}\n       ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n       charInput (seq %)\n       suit (suits (first charInput))\n       rank (ranks (second charInput))]\n  {:suit suit :rank rank})", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 128, "code": "(fn cards [s]\n  (let [ranks (zipmap \"23456789TJQKA\" (range 13))\n        suits (zipmap \"DHCS\" [:diamond :heart :club :spade])\n        suit (suits (nth s 0))\n        rank (ranks (nth s 1))]\n    {:suit suit, :rank rank}))", "user": "53710c09e4b0fc7073fd6ea5"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ({\\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club} suit)\n   :rank ({\\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12} rank)})", "user": "4f1e4ab5535d64f603146496"}, {"problem": 128, "code": "(fn [card] \n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        cardparts (seq card)\n        suit (first cardparts)\n        rank (first (rest cardparts))\n        result {:suit (suits suit) :rank (ranks rank) }\n        ]\n    result))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 128, "code": "(fn [card]\n  {:suit (case (first card)\n           \\D :diamond\n           \\H :heart\n           \\S :spade\n           \\C :club)\n   :rank (case (last card) \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 (- (read-string (str (last card))) 2))})", "user": "507330e6e4b0e3170b5a8698"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [rank (keyword (str r))\n        suit (keyword (str s))\n        suits {:D :diamond, :H :heart, :S :spade, :C :club}\n        ranks (zipmap (map #(keyword (str %)) (flatten (partition 1 \"23456789TJQKA\")))\n                      (range 13))]\n    {:suit (suit suits),\n    :rank (rank ranks)}))", "user": "50b63c5ee4b0a86f8358ca69"}, {"problem": 128, "code": "(fn [s]\n  (let [rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n              \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        suit {\\H :heart, \\C :club, \\D :diamond, \\S :spades}]\n    {:suit (suit (first s)), :rank (rank (second s))} ))", "user": "538db083e4b0b51d73faae74"}, {"problem": 128, "code": "(fn recognize [s]\n    (hash-map \n        :suit\n        ({\\D :diamond\n          \\H :heart\n          \\C :club\n          \\S :spade} (first s))\n\n        :rank\n        ((apply hash-map (interleave [\\2 \\3 \\4 \\5 \\6 \\7 \n            \\8 \\9 \\T \\J \\Q \\K \\A] (range))) (last s))\n    ))", "user": "53a94b63e4b047364c044434"}, {"problem": 128, "code": "(fn [card]\n  (let [suit (first card)\n        rank (second card)\n        suitout (cond (= \\D suit) :diamond\n                      (= \\H suit) :heart\n                      (= \\C suit) :club\n                      :else :spade)\n        rankout (cond (= rank \\A) 12\n                      (= rank \\K) 11\n                      (= rank \\Q) 10\n                      (= rank \\J) 9\n                      (= rank \\T) 8\n                      :else (Character/digit (char (- (int rank) 2)) 10))]\n    {:suit suitout :rank rankout}))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 128, "code": "(fn print-card [s]\n  (let [[suit rank] (seq s)\n        suitmap {\\H :heart, \\D :diamond, \\C :club, \\S :spade}\n        rankmap (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))]\n    (hash-map :suit (suitmap suit), :rank (rankmap rank))))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 128, "code": "(fn recognize-playing-cards [s] \n  (let [suits {\\H :heart, \\D :diamond, \\C :club, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (get suits (first s)), :rank (get ranks (second s))}))", "user": "52616198e4b03e8d9a4a705e"}, {"problem": 128, "code": "#(hash-map \n   :suit \n   ({:D :diamond :H :heart :C :club :S :spade} \n        (read-string (str \":\" (first %)))) \n   :rank \n   ({:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12} \n        (read-string (str \":\" (second %)))))", "user": "5143824ae4b0b4fb4ace5f36"}, {"problem": 128, "code": "(fn card [s]\n     (let [suit  {:D :diamond :H :heart :C :club :S :spades}\n           rank {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5  :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12}\n           seq-s (map #(keyword (str %))(seq s))]\n       {:suit (suit (first seq-s))\n             :rank (rank (last seq-s))}))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 128, "code": "(fn [[s n] & x] {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :heart} s), :rank (.indexOf \"23456789TJQKA\" (str n)) })", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 128, "code": "(fn [s]\n  (let [\n         suit (first s),\n         rank (second s),\n         suits { \\S :spade, \\H :heart, \\D :diamond, \\C :club },\n         ranks { \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12 }\n       ]\n    {\n      :suit (suits suit),\n      :rank (ranks rank)\n    }\n  )\n)", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 128, "code": "#(->{:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first %)) :rank (.indexOf \"23456789TJQKA\" (int (second %)))})", "user": "4e6b8ac8535d8ccf87e9ff19"}, {"problem": 128, "code": "(fn [input]\n   {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first (seq input)))\n    :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second (seq input)))})", "user": "52fac708e4b047fd55836fff"}, {"problem": 128, "code": "(fn [card] (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n                 ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n             {:suit (suits (first card)) :rank (ranks (last card))}))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 128, "code": "(fn [x] {\n\t:suit (get {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club} (str (get (vec x) 0)))\n\t:rank (get {\"A\" 12 \"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11} (str (get (vec x) 1)))\n})", "user": "53d5d24de4b0e771c302544a"}, {"problem": 128, "code": "#(hash-map :suit ({\\D :diamond\n           \\H :heart\n           \\S :spade\n           \\C :club} (first %))\n   :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n                      (range)) (last %)))", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 128, "code": "(fn [[s r]] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s) :rank ({\\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11} r)})", "user": "53e19461e4b0d874e779ae59"}, {"problem": 128, "code": "(fn play [card](let [typ (str (first card))\n                number (subs card 1)\n                typs {\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade}\n                numbers (merge {\"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12 \"T\" 8} (zipmap (map str (range 2 10))(range 9)))]\n                   (prn card)\n                   (prn number)\n                   (prn (numbers number))\n            {:suit  (typs typ) :rank (numbers number)}))", "user": "53d70f3be4b0e771c302545f"}, {"problem": 128, "code": "(fn f [[color figure]]\n  {:suit (case color \\S :spade \\D :diamond \\H :heart \\C :club)\n   :rank (if (<= (int figure) (int \\9))\n           (- (int figure) (int \\2))\n           (case figure \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12))})", "user": "53a83c74e4b047364c044426"}, {"problem": 128, "code": "(fn get-card [x]\n  (let [suit {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6\n              \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit (first x)) :rank (rank (second x))}))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 128, "code": "(fn cconv [card]\n  (let [suits {\"D\" :diamond, \"H\" :heart, \"S\" :spade, \"C\" :club}\n        ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \n               \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}]\n    {:suit (suits (str (first card))) :rank (ranks (str (last card)))}))", "user": "53791ab7e4b06839e8705e4d"}, {"problem": 128, "code": "(fn [[suit-char rank-char]]\n  {:suit ({\\C :club \\D :diamond \\H :heart \\S :spade} suit-char)\n   :rank (get {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n              rank-char\n              (- (int rank-char) (int \\0) 2))})", "user": "51a3b135e4b0e77c4ca60bf6"}, {"problem": 128, "code": "(fn [c]\n  {:suit ({ \\D :diamond \\S :spade \\C :club \\H :heart } (first c))\n   :rank ({ \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 } (second c))})", "user": "530bf87ee4b02e82168697d5"}, {"problem": 128, "code": "(fn [card] (let [\n                 \n       s ((comp keyword str first) card)\n       r ((comp keyword str second) card)\n                  \n       suites {:D :diamond \n               :H :heart\n               :C :club\n               :S :spade}\n\n        ranks {:2 0\n               :3 1\n               :4 2\n               :5 3\n               :6 4\n               :7 5\n               :8 6\n               :9 7\n               :T 8\n               :J 9\n               :Q 10\n               :K 11\n               :A 12}] \n\n              (assoc {} :suit (s suites) :rank (r ranks))))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 128, "code": "(fn card [card] \n  (let [img {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n        num {\\J 9, \\K 11, \\Q 10, \\2 0, \\3 1, \\4 2, \\T 8, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\A 12}]\n    (hash-map :suit (get img (first card)) \n              :rank (get num (second card)))))", "user": "520cb8c4e4b0b022ef140c9a"}, {"problem": 128, "code": "(fn [s]\n  (let [suit {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n               \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suit (first s)), :rank (rank (last s))}))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 128, "code": "(fn [x] (let [[s r] (seq x)\n              suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n              ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n          {:suit (suits s) :rank (.indexOf ranks r)}))", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 128, "code": "(fn [card]\n  (let [suit-map {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n  \t\trank-map (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))\n        c (into [] card)]\n  \t{:suit (-> c first suit-map) :rank (-> c second rank-map)}))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} s)\n  :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 128, "code": "#(hash-map\n  :suit\n  ({\\S :spade \\H :heart \\D :diamond \\C :club} (first (vec %)))\n  :rank\n  ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second (vec %))))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 128, "code": "(fn [[suit rank]]\n         (let [suit ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} (str suit))\n               rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (str rank))]\n            {:suit suit :rank rank}))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 128, "code": "(fn [card-str] \n ((fn [x] (hash-map :suit (first x), :rank (last x)))\n    (apply #(list ((hash-map \"D\" :diamond, \"H\" :heart, \"S\" :spade, \"C\" :club) %) \n                  (.indexOf [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] %2)) \n          (map str (seq card-str)))))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank (.indexOf (seq \"23456789TJQKA\") r)})", "user": "53d78b64e4b0e771c3025466"}, {"problem": 128, "code": "#(let [s (first %), r (second %), \n       ss (zipmap \"SHDC\" [:spade, :heart, :diamond, :club]),\n       rs (zipmap \"23456789TJQKA\" (range 13))]\n   {:suit (ss s) :rank (rs r)})", "user": "526a3412e4b03e8d9a4a721e"}, {"problem": 128, "code": "(fn [c]\n   (let [ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n         suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n         [s r] (map str c)]\n     {:suit (suits s) :rank (ranks r)}))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 128, "code": "(fn [x] {\n         :suit (case (first x) \n          \\S :spade \n          \\D :diamond \n          \\H :heart\n          \\C :club)\n         :rank (case (second x)\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12\n           (- (Integer/valueOf (str (second x))) 2)     \n                 )})", "user": "50856bd1e4b004985b776e4c"}, {"problem": 128, "code": "(fn [card]\n  (let [\n      [s r &rest] card\n      rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n      suit-map {\\D :diamond \\S :spade \\H :heart \\C :club}\n    ]\n    {:suit (suit-map s) :rank (rank-map r)}\n  )\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 128, "code": "(fn card [[suit rank]]\n  (let [suits {\\H :heart \\S :spade \\C :club \\D :diamond}\n        ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A ]]\n    {:suit (suits suit) :rank (.indexOf ranks rank)}))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 128, "code": "(fn get-card [[suit rank]]\n  {:suit\n   (case suit\n     \\S :spade\n     \\D :diamond\n     \\H :heart\n     \\C :club\n   )\n   :rank\n   (case rank\n     \\2 0\n     \\3 1\n     \\4 2\n     \\5 3\n     \\6 4\n     \\7 5\n     \\8 6\n     \\9 7\n     \\T 8\n     \\J 9\n     \\Q 10\n     \\K 11\n     \\A 12\n   )\n }\n)", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 128, "code": "(fn [card] \n  (let [suits-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank-map {\\Q 10 \\5 3 \\A 12 \\2 0 \\3 1 \\4 2 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9   \\K 11 }\n        v (seq card)\n        suit (get suits-map (first v))\n        rank (get rank-map (second v))\n                  ]\n    {:suit suit :rank rank}\n    ))", "user": "51bf0ccee4b013aa0d74b811"}, {"problem": 128, "code": "(fn [[suit rank]]\n   (let [suits-hash {\\C :club \\D :diamond \\H :heart \\S :spade}\n          ranks-hash (apply hash-map (interleave '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A) (range 13)))]\n     (hash-map :suit (suits-hash suit) :rank (ranks-hash rank))))", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 128, "code": "(fn [[s,r]]\n   {:suit ({\\H :heart \\D :diamond \\C :club \\S :spade} s)\n    :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 128, "code": "(fn [card]\n    {:suit ({\\D :diamond \\C :club \\H :heart \\S :space} (first card))\n     :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n            (second card))})", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 128, "code": "#(let [[suit-char rank-char] %\n       suit (case suit-char\n               \\D :diamond\n               \\H :heart\n               \\S :spade\n               \\C :club)\n       rank (case rank-char\n               \\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12)]\n   {:suit suit :rank rank})", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 128, "code": "(fn [c]\n  (let [[[_ s r]] (re-seq #\"^([CDHS])([\\dAJKQT])$\" c)]\n    {:suit (case s\n             \"C\" :club\n             \"H\" :heart\n             \"D\" :diamond\n             \"S\" :spade)\n     :rank (case r\n             \"T\" 8\n             \"J\" 9\n             \"Q\" 10\n             \"K\" 11\n             \"A\" 12\n             (- (Integer. r) 2))}))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 128, "code": "(fn[[a b]]\n  {:suit ({\\S :spade \\H :heart \\C :club \\D :diamond} a)\n  :rank ((zipmap \"23456789TJQKA\" (range)) b)\n  })", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 128, "code": "(fn [s] {:suit (get {\\D :diamond \\H :heart \\S :spade \\C :club} (first s)) \n           :rank (.indexOf '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A) (second s))})", "user": "4f9920a3e4b0dcca54ed6cfc"}, {"problem": 128, "code": "(fn [[s r]] \n  {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} s)\n   :rank ((zipmap \"23456789TJQKA\" (range))  r)}\n  )", "user": "537b1083e4b06839e8705e64"}, {"problem": 128, "code": "(fn [[s r]]\n    {:suit ({\\D :diamond\n             \\H :heart\n             \\C :club\n             \\S :spade} s)\n     :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "5151c184e4b03e678e393add"}, {"problem": 128, "code": "(fn foo[[s r]] \n    {\n  \t  :suit ((zipmap \"DHCS\" [:diamond :heart :club :spade])  s) \n      :rank ((zipmap \"23456789TJQKA\" (range 0 14)) r)\n    })", "user": "52271ffee4b04e78ff2e19a9"}, {"problem": 128, "code": "(fn [x] (hash-map :suit (case (first x) \\D :diamond \\H :heart \\C :club \\S :spades) :rank (case (last x) \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 128, "code": "(fn [s] (let [suit (first s) rank (last s) \n              suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n\t\t\t  ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n  {:suit (suits suit) :rank (ranks rank)}\n))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 128, "code": "(fn describe[card]\n   (zipmap [:suit :rank]\n           (let [vals {:H :heart :D :diamond :C :club :S :spade\n                       :2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12}]\n             (map #((keyword (str %)) vals) (seq card)))))", "user": "5398123ee4b0b51d73faaef3"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\S :spade \\H :heart\n               \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4\n            \\7 5 \\8 6 \\9 7 \\T 8 \\J 9\n            \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits s)\n     :rank (ranks r)}))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 128, "code": "(fn [[s r]]\n             (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n                   ranks (apply hash-map (interleave \"23456789TJQKA\" (range)))]\n             {:suit (suits s), :rank (ranks r)}))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 128, "code": "#(let [suits {\\D :diamond,\n               \\S :spades,\n               \\C :club,\n               \\H :heart}\n        ranks (seq (char-array \"23456789TJQKA\"))]\n    {:suit (suits (first %)),\n     :rank (.indexOf ranks (second %))})", "user": "51780bfce4b0f89a8f53839c"}, {"problem": 128, "code": "(fn test [string]\n  (let [suit (first string)\n        card (second string)]\n    (assoc (assoc (array-map) :suit\n    (case (str suit)\n      \"S\" :spade\n      \"H\" :heart\n      \"D\" :diamond\n      \"C\" :club\n      nil\n     )) :rank\n      (case (str card)\n        \"2\" 0\n        \"3\" 1\n        \"4\" 2\n        \"5\" 3\n        \"6\" 4\n        \"7\" 5\n        \"8\" 6\n        \"9\" 7\n        \"T\" 8\n        \"J\" 9\n        \"Q\" 10\n        \"K\" 11\n        \"A\" 12\n        nil)\n    )\n  )\n )", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 128, "code": "(fn playing-card [s]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))]\n    {:suit (suits (first s)) :rank (ranks (second s))}))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 128, "code": "(fn [[s r]]\n  { :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n    :rank (.indexOf (seq \"23456789TJQKA\") r)})", "user": "524025bce4b0ad64fa01030f"}, {"problem": 128, "code": "(fn [s]\n  (let [rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit-map {\\S :spade \\H :heart \\D :diamond \\C :club}\n        cc (str s)]\n    (conj {} [:suit (suit-map (first cc))] [:rank (rank-map (second cc))])))", "user": "53d86564e4b0e771c302546b"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade }\n        ranks { \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12 }]\n    {:suit (suits s) :rank (ranks r)}))", "user": "5338387de4b0e30313ee6c91"}, {"problem": 128, "code": "#(let [suits {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n       ranks (merge (apply array-map (interleave (map str (range 2 10)) (range 0 8)))\n\t\t\t\t\t{\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12})]\n   {:suit (suits (str (first %))) :rank (ranks (str (second %)))})", "user": "5097ea89e4b087ccf61a7af4"}, {"problem": 128, "code": "(fn [card]\n             {\n              :suit ({\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spade} (subs card 0 1))\n              ;:rank (Integer/parseInt (subs card 1 2)) })\n              :rank ({\"2\" 0,\"3\" 1,\"4\" 2,\"5\" 3,\"6\" 4,\"7\" 5, \"8\" 6, \"9\" 7,\"T\" 8,\"J\" 9, \"Q\" 10,\"K\" 11,\"A\" 12} (subs card 1 2))\n              }\n              )", "user": "53d64811e4b0e771c3025456"}, {"problem": 128, "code": "(fn [card]\n  (let [\n    suit-map {\n      \\H :heart \\C :club \\D :diamond \\S :space}\n    rank-map {\n      \\2 0\n      \\3 1\n      \\4 2\n      \\5 3\n      \\6 4\n      \\7 5\n      \\8 6\n      \\9 7\n      \\T 8\n      \\J 9\n      \\Q 10\n      \\K 11\n      \\A 12}]\n  {:suit (suit-map (first card)) :rank (rank-map (last card))}))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 128, "code": "(fn full-name [[a b]]\n  (let [hua {\\H :heart\n             \\D :diamond\n             \\C :club\n             \\S :spade}\n        shu (zipmap\n              [\\A \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K]\n              [12 0 1 2 3 4 5 6 7 8 9 10 11])]\n    {:suit (hua a) :rank (shu b)}))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 128, "code": "(fn [card]\n  (let [chars (seq card)\n        suit (first chars)\n        rank (second chars)\n        suitkeyslookup {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        rankvallookup {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (get suitkeyslookup suit) :rank (get rankvallookup rank)}\n    ))", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 128, "code": "(letfn [(suit [c]\n              (cond\n               (= c \\C) :club\n               (= c \\S) :spade\n               (= c \\H) :heart\n               (= c \\D) :diamond))\n        (rank [r]\n              (let [ord (int r)]\n                (if (<= (int \\2) ord (int \\9))\n                  (- ord (int \\2))\n                  ({\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r))))\n        (f [s]\n           {:suit (suit (first s)) :rank (rank (second s))})]\n  f)", "user": "540470dae4b0addc1aec6658"}, {"problem": 128, "code": "(fn i [c] {:suit ({\\C :club \\H :heart \\S :spade \\D :diamond} (first c)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second c))})", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 128, "code": "(fn [card]\n\t{\n\t\t:suit (get {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spade} (str (first card)))\n\t\t:rank (get {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12} (str (second card)))\n\t}\n)", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 128, "code": "(fn [[s r]] \n  (hash-map :suit \n            (cond (= s \\C) :club\n                  (= s \\H) :heart\n                  (= s \\D) :diamond\n                  (= s \\S) :spade\n                  ),\n            :rank\n            (cond (= r \\A) 12\n                  (= r \\K) 11\n                  (= r \\Q) 10\n                  (= r \\J) 9\n                  (= r \\T) 8\n                  :else (- (int r) 50)\n                  )\n            \n            )\n  \n  )", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 128, "code": "(fn [str] \n   {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first str)) \n    :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second str))})", "user": "54094824e4b0addc1aec66da"}, {"problem": 128, "code": "(fn [x]\n  (let [a (first x)\n        b (apply str (rest x))]\n     (print b)\n     {:suit (case a\n      \\D :diamond\n      \\S :spade\n      \\C :club\n      :heart\n      )\n      :rank (case b\n              \"A\" 12\n              \"K\" 11\n              \"Q\" 10\n              \"J\" 9\n              \"T\" 8\n              (- (read-string b) 2)\n              \n              )\n      \n      }\n    )\n  \n  )", "user": "540479e7e4b0addc1aec665a"}, {"problem": 128, "code": "(fn [card]\n  (let [suit (first card)\n        rank (second card)]\n    {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} suit),\n     :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] rank)}\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 128, "code": "(fn cards [[s r]]\n   (let [suits (zipmap \"HDCS\" [:heart :diamond :club :spade])\n         ranks (zipmap \"23456789TJQKA\" (range 13))]\n     {:suit (suits s) :rank (ranks r)}))", "user": "535eaa73e4b04ce2eb3ed2d4"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}\n        ranks \"23456789TJQKA\"]\n    {:suit (suits (first s)) :rank (.indexOf ranks (str (second s)))}))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 128, "code": "#(letfn [ (suit[c]\n               (cond\n                (= \\D c) {:suit :diamond}\n                (= \\H c) {:suit :heart}\n                (= \\C c) {:suit :club}\n                :else {:suit :spade}))\n          (rank[c]\n               (cond\n                (= \\T c) {:rank 8}\n                (= \\J c) {:rank 9}\n                (= \\Q c) {:rank 10}\n                (= \\K c) {:rank 11}\n                (= \\A c) {:rank 12}\n                :else {:rank (- (int c) 50)}))]\n   (merge (suit (first %)) (rank (second %))))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 128, "code": "(fn [x]\n  (let [suits {\\S :spade \\D :diamond \\H :heart \\C :club}\n        suit (get suits (first x))\n        value (second x)\n        v (cond\n     (= value \\T) 8\n     (= value \\J) 9\n     (= value \\Q) 10\n     (= value \\K) 11\n     (= value \\A) 12\n     :else (- (Integer/parseInt (str value)) 2))]\n    {:suit suit :rank v}))", "user": "54133900e4b01498b1a719de"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [all_suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n        all_rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8\n                  \\J 9 \\Q 10 \\K 11 \\A 12 }]\n    {:suit (all_suit s) :rank (all_rank r)}))", "user": "52c672e2e4b0c2d177d6210e"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suit (cond (= suit \\H) :heart\n                   (= suit \\C) :club\n                   (= suit \\D) :diamond\n                   (= suit \\S) :spade)\n        rank (cond (= rank \\A) 12\n                   (= rank \\K) 11\n                   (= rank \\Q) 10\n                   (= rank \\J) 9\n                   (= rank \\T) 8\n                   :else (- (Integer/parseInt (str rank)) 2))]\n  {:suit suit :rank rank}))", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 128, "code": "#(hash-map :suit (get {\"C\" :club, \"D\" :diamond, \"H\" :heart, \"S\" :spades} (str (first %))), :rank (.indexOf [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] (str (second %))) )", "user": "52ee9ac7e4b05e3f0be25ec9"}, {"problem": 128, "code": "(fn [s] (let [suits {\"D\" :diamond\n                       \"H\" :heart\n                       \"C\" :club\n                       \"S\" :spade}\n                ranks {\"2\" 0\n                       \"3\" 1\n                       \"4\" 2\n                       \"5\" 3\n                       \"6\" 4\n                       \"7\" 5\n                       \"8\" 6\n                       \"9\" 7\n                       \"T\" 8\n                       \"J\" 9\n                       \"Q\" 10\n                       \"K\" 11\n                       \"A\" 12}\n                suit (str (first s))\n                rank (apply str (rest s))]\n            {:suit (suits suit) :rank (ranks rank)}))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 128, "code": "#(let [[s r] %]\n  {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} s) \n   :rank ({\\2 0, \n           \\3 1, \n           \\4 2, \n           \\5 3, \n           \\6 4,\n           \\7 5,\n           \\8 6,\n           \\9 7,\n           \\T 8,\n           \\J 9,\n           \\Q 10,\n           \\K 11,\n           \\A 12} r)})", "user": "4ff4bed0e4b0678c553fc35f"}, {"problem": 128, "code": "(let [s {:diamond \\D :spade \\S :heart \\H :club \\C}\n      r {0 \\2 1 \\3 2 \\4 3 \\5 4 \\6 5 \\7 6 \\8 7 \\9 8 \\T 9 \\J 10 \\Q 11 \\K 12 \\A}] \n  (reduce merge (for [k (keys s)  v (keys r)] {(str (s k) (r v)) {:suit k :rank v}})))", "user": "51a058dae4b0b292b01ee3f3"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\H :heart \\D :diamond \\S :spade \\C :club}\n        rank [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    {:suit (get suits s) :rank (.indexOf rank r)}))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 128, "code": "#(hash-map :suit (case (first %)\n                   \\C :club\n                   \\D :diamond\n                   \\H :heart\n                   \\S :spade)\n           :rank (case (last %)\n                   \\2 0\n                   \\3 1\n                   \\4 2\n                   \\5 3\n                   \\6 4\n                   \\7 5\n                   \\8 6\n                   \\9 7\n                   \\T 8\n                   \\J 9\n                   \\Q 10\n                   \\K 11\n                   \\A 12))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 128, "code": "(fn make-card [c]\n        (letfn [(convert-suit [[s _]]\n                  (cond\n                   (= s \\S) :spade\n                   (= s \\D) :diamond\n                   (= s \\H) :heart\n                   (= s \\C) :club))\n                (convert-rank [[_ r]]\n                  (cond\n                   (= r \\A) 12\n                   (= r \\T) 8\n                   (= r \\J) 9\n                   (= r \\Q) 10\n                   (= r \\K) 11\n                   :else (- (Integer/parseInt (str r)) 2)))]\n          (hash-map :suit (convert-suit c) :rank (convert-rank c))))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 128, "code": "(let [suits {\\S :spade\n             \\C :club\n             \\D :diamond\n             \\H :heart}\n      special-ranks {\\T 8\n                     \\J 9\n                     \\Q 10\n                     \\K 11\n                     \\A 12}\n      ranks (fn [ch] \n              (get special-ranks ch (- (int ch) 50)))]\n  (fn [[suit rank]]\n    {:suit (suits suit)\n     :rank (ranks rank)}))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 128, "code": "(fn [x]\n  (let [suit (first x)\n        rank (second x)\n        suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (get suits suit) :rank (get ranks rank)}))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 128, "code": "(fn expl-card [st]\n  (let [[suit rank] st]\n    {:suit (condp = suit\n             \\D :diamond\n             \\S :spade\n             \\H :heart\n             \\C :club)\n     :rank (condp = rank\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12\n             rank (- (int rank) 50))}))", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 128, "code": "(fn [[s r]]\n\t(let [suit-map {\\D :diamond, \\H :heart, \\C :club, \\S :spades}\n\t\trank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n\t\t\t\\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n\t\t{:suit (suit-map s), :rank (rank-map r)}\n))", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 128, "code": "(fn [[s r]]\n    (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n          ranks (zipmap (concat (map char (range 50 58)) '(\\T \\J \\Q \\K \\A)) (range 13))]\n      {:suit (suits s) :rank (ranks r)}))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 128, "code": "(letfn [(rank [c]\n              ((apply hash-map\n                      (interleave (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"])\n                                  (range 13))) c))\n        (suit [s] ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} s))]\n  (fn [s]\n    (let [[st rk] ((comp (partial map str) seq) s)]\n      {:suit (suit st) :rank (rank rk)})))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 128, "code": "(fn card [^String c]\n   {:suit (-> c .toUpperCase first str keyword {:D :diamond :H :heart :S :spade :C :club} ) \n    :rank  (dec (.indexOf (conj (vec (map str (range 1 10))) \"T\" \"J\" \"Q\" \"K\" \"A\" ) \n                     (-> c second str)))})", "user": "52ab61f5e4b0c58976d9ac75"}, {"problem": 128, "code": "(fn [[a b]]\n  (let [s {\\S :spade \\H :heart \\D :diamond \\C :club}\n        r {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (s a) :rank (or (r b) (- (int b) 50))}))", "user": "52541fe6e4b0541d1855b964"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} s)\n  :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 128, "code": "(fn [[suit rank]]\n   {:suit (get {\\S :spade \\D :diamond \\H :heart \\C :club} suit)\n    :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] rank)})", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 128, "code": "#(hash-map :suit ({\"D\" :diamond \"S\" :spade \"H\" :heart\"C\" :club} (clojure.string/trim (first %))) \n           :rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (clojure.string/trim (second %))))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 128, "code": "(fn [[s r]] {:suit (case s \\H :heart \\C :club \\D :diamond \\S :spade)\n               :rank (first (keep-indexed #(if (#{r} %2) %) (seq \"23456789TJQKA\")))})", "user": "5310e968e4b08068f379ecdd"}, {"problem": 128, "code": "(fn recognize [ [k v] ]\n  (let [x (case k\n            \\D {:suit :diamond}\n            \\H {:suit :heart}\n            \\C {:suit :club}\n            \\S {:suit :spade})\n        iv (if (java.lang.Character/isDigit v) \n             (- (java.lang.Character/digit v 10) 2)\n             (case v\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12))\n        y {:rank iv}\n        ]\n    (merge y x)\n    ))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 128, "code": "(fn [x] (let [suits (zipmap '(:S :H :D :C) '(:spade :heart :diamond :club) ) cards (zipmap '(:2 :3 :4 :5 :6 :7 :8 :9 :T :J :Q :K :A) (range)) ]\n          (hash-map :suit (get suits (keyword (str(first x)))),\n                   :rank (get cards (keyword (str(last x))))\n          )\n          )\n)", "user": "542baf7ce4b0dad94371f291"}, {"problem": 128, "code": "(fn [a] (let [a (seq a)\n               a1 (first a)\n               a2 (second a)\n               x {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n               y {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}] {:suit (x a1), :rank (y a2)}))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 128, "code": "(fn [s]\n\t(conj\n\t (condp = (first s)\n\t   \\D {:suit :diamond}\n\t   \\C {:suit :club}\n\t   \\H {:suit :heart}\n\t   \\S {:suit :spade})\n\t {:rank (condp = (second s)\n\t\t  \\A 12\n\t\t  \\K 11\n\t\t  \\Q 10\n\t\t  \\J 9\n\t\t  \\T 8\n\t\t  \\2 0\n\t\t  \\3 1\n\t\t  \\4 2\n\t\t  \\5 3\n\t\t  \\6 4\n\t\t  \\7 5\n\t\t  \\8 6\n\t\t  \\9 7)}))", "user": "53da3fcde4b0e771c3025497"}, {"problem": 128, "code": "(fn cards [x] \n   (zipmap \n    [:suit :rank] \n    [(get {:H :heart :D :diamond :C :club :S :spades} (keyword (str (first x)))) \n     (.indexOf [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] (str (nth x 1)))]))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 128, "code": "#(hash-map :suit (get {\\C :club\n                \\H :heart\n                \\D :diamond\n                \\S :spade} (first %))\n    :rank (-> % \n              second\n              ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)))))", "user": "51e3a549e4b0c611d6113e47"}, {"problem": 128, "code": "(fn card [s]\n  (let [suit {\\H :heart, \\C :club, \\D :diamond, \\S :spade}\n        rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (get suit (first s)) :rank (get rank (last s))}))", "user": "52f225bfe4b05e3f0be25ef4"}, {"problem": 128, "code": "(fn [card] (let [parts (map str (seq card)) ]\n              {:suit ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} (first parts))\n               :rank ((zipmap (concat (map #(Integer/toString %) (range 2 10))\n                 (list \"T\", \"J\", \"Q\", \"K\" \"A\"))\n        (range)) \n (second parts))}))", "user": "5183f5d7e4b02826a645f393"}, {"problem": 128, "code": "(fn [[s r]]\n    {:suit\n     (get {\\D :diamond \\H :heart \\C :club \\S :spade} s)\n     :rank\n     (get (into {} (map-indexed (fn [a b] [b a]) [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A])) r)})", "user": "537bde5de4b06839e8705e73"}, {"problem": 128, "code": "(fn [[ suit rank ]]\n    (let [suit-hash-set {\\D :diamond\n                         \\C :club\n                         \\S :spade\n                         \\H :heart},\n          rank-hash-set {\\2 0\n                         \\3 1\n                         \\4 2\n                         \\5 3\n                         \\6 4\n                         \\7 5\n                         \\8 6\n                         \\9 7\n                         \\T 8\n                         \\J 9\n                         \\Q 10\n                         \\K 11\n                         \\A 12}\n          ] \n      {:suit  (suit-hash-set suit) :rank  (rank-hash-set rank)}))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 128, "code": "#(let [color {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n       rankf {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n   {:suit(color(first %)) :rank(rankf(second %))})", "user": "543d5c61e4b032a45b86934d"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\D :diamond \\S :spade \\H :heart \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits s) :rank (ranks r)}))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 128, "code": "(fn [[s r]]\n    (let [suits {\\D :diamond\n                 \\H :heart\n                 \\C :club\n                 \\S :spade}\n          ranks {\\T 8\n                 \\J 9\n                 \\Q 10\n                 \\K 11\n                 \\A 12}\n          suit (get suits s)]\n      (if (Character/isDigit r)\n        {:suit suit :rank (- (Integer/valueOf (str r)) 2)}\n        {:suit suit :rank (get ranks r)})))", "user": "53a511aae4b0b62ce3005735"}, {"problem": 128, "code": "(fn [[suit rank]]\n          {:suit \n           (cond \n                 (= \\D suit) :diamond\n                 (= \\H suit) :heart\n                 (= \\C suit) :club\n                 (= \\S suit) :spade\n                 :else        :error)\n          :rank \n           (cond \n                 (= \\A rank) 12\n                 (= \\K rank) 11\n                 (= \\Q rank) 10\n                 (= \\J rank) 9\n                 (= \\T rank) 8\n                 :else (- (int rank) 50))})", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-lookup {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        rank-lookup {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        suit (suit-lookup (get s 0))\n        rank (rank-lookup (get s 1) (- (int (get s 1)) (int \\2)))]\n    {:suit suit :rank rank}))", "user": "54448e84e4b032a45b869393"}, {"problem": 128, "code": "(fn [s]\n  (let [[suit_char rank_char] s,\n        suit_map {\\S :spade, \\H :heart, \\D :diamond, \\C :club},\n        rank_map (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (suit_map suit_char) :rank (rank_map rank_char)}))", "user": "51baff1be4b0fe3ecfb46443"}, {"problem": 128, "code": "(fn [input]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks (vec \"23456789TJQKA\")\n        [suit rank] (seq input)]\n    {:suit (suits suit) :rank (.indexOf ranks rank)}))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 128, "code": "(fn[[s r]]{:suit({\\D :diamond,\\H :heart,\\C :club,\\S :spade}s):rank(.indexOf\"23456789TJQKA\"(int r))})", "user": "4db2903f535df7e46ed9b6bf"}, {"problem": 128, "code": "(fn recognize-playing-cards\n  [card]\n  {:suit (get {:S :spade :C :club :D :diamond :H :heart} (keyword (str (first card))))\n   :rank (get {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12} (keyword (str (last card))))})", "user": "52561295e4b0541d1855ba03"}, {"problem": 128, "code": "(fn [card] (let [[suit rank] card]\n              (let [s (case suit \\D :diamond \\H :heart \\S :spade \\C :club)\n                     r (case rank \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12\n                                  (- (Integer/parseInt (str rank)) 2))]{:suit s :rank r})))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 128, "code": "(fn [[s r]] (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n              \t  ranks (zipmap \"23456789TJQKA\" (range 13))]\n                      {:suit (suits s) :rank (ranks r)}))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 128, "code": "(fn [x]\n  (let [suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}\n        ranks {\\T 10\n               \\J 11\n               \\Q 12\n               \\K 13\n               \\A 14}\n        suit (first x)\n        rank (second x)]\n    {:suit (suits suit) :rank (- (ranks rank (- (int rank) 48)) 2)}))", "user": "53322cece4b019098a6f8b73"}, {"problem": 128, "code": "(fn cardstr->map [s]\n  (let [suits {\n               \"D\" :diamond \n               \"S\" :spade \n               \"C\" :club \n               \"H\" :heart}\n        ranks {\n                \"2\" 0\n                \"3\" 1\n                \"4\" 2\n                \"5\" 3\n                \"6\" 4\n                \"7\" 5\n                \"8\" 6\n                \"9\" 7\n                \"T\" 8\n                \"J\" 9\n                \"Q\" 10\n                \"K\" 11\n                \"A\" 12}]\n        {:suit (suits (str(first s))) \n         :rank (ranks (str(second s)))}))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 128, "code": "(fn suit\n  [[s r]]\n     {:suit (get {\\D :diamond \n                  \\H :heart\n                  \\C :club\n                  \\S :spade}\n                 s)  \n      :rank (get (zipmap \"23456789TJQKA\" (range))\n                 r)} )", "user": "4dbf7a31535d020aff1edf75"}, {"problem": 128, "code": "(fn [s] \n\n  {\n   :suit ({\\D :diamond \\H :heart \\C :club \\S :spades} (first s))\n   :rank (or \n          ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last s)) \n          (- (int (last s)) 50))\n    }\n )", "user": "5412646de4b01498b1a719d4"}, {"problem": 128, "code": "(fn [s]\n  (zipmap [:suit :rank] \n    (vector \n\t    (get {\\C :club, \\D :diamond, \\H :heart, \\S :spade} (first s))\n\t    (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (second s))\n)))", "user": "54524afbe4b0e397800069bc"}, {"problem": 128, "code": "(fn [sv]\n  (let \n    [suit  (subs sv 0 1)\n     value (subs sv 1 2)]\n    (merge (cond \n                 (= \"C\" suit) (hash-map :suit :club) \n                 (= \"D\" suit) (hash-map :suit :diamond)\n                 (= \"H\" suit) (hash-map :suit :heart)\n                 (= \"S\" suit) (hash-map :suit :spade))\n               (cond\n                 (= \"A\" value) (hash-map :rank 12)\n                 (= \"K\" value) (hash-map :rank 11)\n                 (= \"Q\" value) (hash-map :rank 10)\n                 (= \"J\" value) (hash-map :rank 9)\n                 (= \"T\" value) (hash-map :rank 8)\n                 :else (hash-map :rank (- (Integer. value) 2))))))", "user": "53eaa804e4b036ad0777e4ea"}, {"problem": 128, "code": "(fn [s]\n  (let \n    [suits {\\D :diamond\n     \t\t\\H :heart\n     \t\t\\C :club\n     \t\t\\S :spade}\n     ranks (zipmap '[\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n    {:suit (get suits (nth s 0))\n     :rank (get ranks (nth s 1))}))", "user": "545801f6e4b01be26fd74615"}, {"problem": 128, "code": "(fn [s] (let [suit ({\\C :club \\D :diamond \\H :heart \\S :spade} (first (seq s))) rank ({ \\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11} (second (seq s)))] { :suit suit :rank rank }))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 128, "code": "(fn __ [s]\n  (let [cols {\\D :diamond \\H :heart \\C :club}\n        rank {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12 }\n        ]\n    {:suit (cols (first s)) :rank (rank (str (second s)))}\n    ))", "user": "52485723e4b05ef8e38e63d2"}, {"problem": 128, "code": "(fn [s] \n  (let [s (seq s)\n        suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first s))\n        rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))]\n    {:suit suit :rank rank}))", "user": "54580586e4b01be26fd74616"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} s)\n  :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "544cf5d7e4b0e39780006977"}, {"problem": 128, "code": "(fn\n  [[s r]]\n  {:suit\n   (case s\n     \\D :diamond\n     \\H :heart\n     \\C :club\n     \\S :spade)\n   :rank\n   (case r\n     \\T 8\n     \\J 9\n     \\Q 10\n     \\K 11\n     \\A 12\n     (- (int r) 50))\n   })", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [sm {\\C :club \\D :diamond \\H :heart \\S :spade}\n        rm {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8}]\n    {:suit (get sm s)\n     :rank (or (get rm r) (-> r str read-string dec dec))}))", "user": "505aa653e4b021387fb89857"}, {"problem": 128, "code": "(fn [x]\n   (let [shapes {\\S :spade \\D :diamond \\H :heart \\C :club}\n         nseqs [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n         [shape rank] (seq x)]\n     {:suit (get shapes shape) :rank (.indexOf nseqs rank)}))", "user": "5327c591e4b09d4e7a9b54ff"}, {"problem": 128, "code": "(fn [name]\n  {:suit (case (first name)\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n  :rank (case (second name)\n          \\A 12\n          \\K 11\n          \\Q 10\n          \\J 9\n          \\T 8\n          (- (read-string (str (second name))) 2))})", "user": "510deddbe4b07438aa321457"}, {"problem": 128, "code": "(fn [[suit card]] \n  {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club} suit) \n   :rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (str card))})", "user": "5367bc60e4b0243289761e81"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "516d227fe4b06f078fab252d"}, {"problem": 128, "code": "(fn f128\n  [card]\n  (hash-map :suit ({\"S\" :spades \"H\" :heart \"D\" :diamond \"C\" :club} (str (first card))) :rank ({ \"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12} (str (second card))))\n  )", "user": "526698c9e4b03e8d9a4a7144"}, {"problem": 128, "code": "(fn [s]\n  {:rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))\n          (second s))\n   :suit ({\\C :club \\D :diamond \\H :heart \\S :spade}\n          (first s))})", "user": "4ebbc1f6535dfed6da9c6d72"}, {"problem": 128, "code": "(fn [[s r]]\n     {\n      :suit ({\\C :club \\D :diamond \\S :spade \\H :heart} s) \n      :rank ({\\A 12\n              \\K 11\n              \\Q 10\n              \\J 9\n              \\T 8\n              \\9 7\n              \\8 6\n              \\7 5\n              \\6 4\n              \\5 3\n              \\4 2\n              \\3 1\n              \\2 0} r) \n      }                        \n                             \n                             \n                             )", "user": "544e9022e4b0e3978000698b"}, {"problem": 128, "code": "(fn card-map\n  [cs]\n  (let [suit (first (seq cs)) rank (last (seq cs))] \n    (hash-map \n     :suit \n     (case suit \\D :diamond \\H :heart \\S :spade \\C :club) \n     :rank \n     (case rank \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 (- (int rank) 50)))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 128, "code": "#(assoc {}\n   :suit ({\\H :heart \\S :spade \\D :diamond \\C :club} (first %))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8\n           \\J 9 \\Q 10 \\K 11 \\A 12} (last %)))", "user": "536e5055e4b0fc7073fd6e6b"}, {"problem": 128, "code": "(fn [s]\n    (let [suits {:D :diamond, :H :heart, :C :club, :S :spade }\n          ranks {:2 0, :3 1, :4 2, :5 3, :6 4, :7 5, :8 6, :9 7, :T 8, :J 9, :Q 10, :K 11, :A 12}\n          suit (keyword (String/valueOf (nth s 0)))\n          rank (keyword (String/valueOf (nth s 1)))\n          result {:suit (suit suits) :rank (rank ranks)}]\n      result\n      )\n    )", "user": "515ebde3e4b01e5d11ccd0a8"}, {"problem": 128, "code": "(fn [card]\n  {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} (first card))\n   :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11 \\A 12} (second card))})", "user": "5136f659e4b04059df19f2fd"}, {"problem": 128, "code": "(fn cards [s]\n  (merge \n   (case (first s)\n     \\D (hash-map :suit :diamond)\n     \\H (hash-map :suit :heart)\n     \\C (hash-map :suit :club)\n     \\S (hash-map :suit :club))\n   (if (<= 50 (int (second s)) 57)\n     (hash-map :rank (- (int (second s)) 50))\n     (case (second s)\n       \\T (hash-map :rank 8)\n       \\J (hash-map :rank 9)\n       \\Q (hash-map :rank 10)\n       \\K (hash-map :rank 11)\n       \\A (hash-map :rank 12)))))", "user": "54651faee4b01be26fd746d6"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:rank (case rank\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12\n           (- (Integer/parseInt (str rank)) 2))\n   :suit (case suit\n           \\H :heart\n           \\D :diamond\n           \\S :spade\n           \\C :club)})", "user": "53a074a4e4b0ca733b9744af"}, {"problem": 128, "code": "(fn [card]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first card))\n   :rank ((reduce merge {\"A\" 12 \"K\" 11 \"Q\" 10 \"J\" 9 \"T\" 8} (map #(hash-map (str (+ 2 %)) %) (range 9))) (str (second card)))})", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 128, "code": "(fn [card]\n  (let [suit (first card)\n        n    (second card)]\n      (hash-map :suit\n                (condp = suit\n                       \\D :diamond\n                       \\H :heart\n                       \\S :spade\n                       \\C :club)\n                :rank\n                (condp = n\n                       \\A 12\n                       \\K 11\n                       \\Q 10\n                       \\J 9\n                       \\T 8\n                       (- (int n) 50)))))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 128, "code": "(fn [[a b]]\n   {:suit ((zipmap (seq \"SDHC\") [:spades :diamond :heart :club]) a)\n    :rank (.indexOf (seq \"23456789TJQKA\") b)})", "user": "511688d5e4b0b3e208dba05a"}, {"problem": 128, "code": "(fn [s]\n  {:suit ({\\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club} (first s))\n   :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (second s))})", "user": "53c1b787e4b00fb29b221266"}, {"problem": 128, "code": "(fn cards [s] (let [suits {\"D\" :diamond \"C\" :club \"H\" :heart \"S\" :spade} \n                    ranks (zipmap [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] (range 13))] \n               {:suit (suits (str (first s))) :rank (ranks (str (second s)))}))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 128, "code": "(fn [human] (let [\n              find-suit {\\D :diamond \\H :heart \\C :club \\S :spade}    \n              find-rank {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0}\n              \n              suit (find-suit (first human))\n              rank (find-rank (second human))\n              \n              \n          ] {:suit suit :rank rank}                 \n  )\n           \n)", "user": "5471f090e4b094393f72dd6e"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits s) :rank (ranks r)}))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 128, "code": "(fn [[s r]] {:suit (case s \\D :diamond \\H :heart :club) :rank (case r \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 (- (int r) 50))})", "user": "4fe9de74e4b0547ebccb2475"}, {"problem": 128, "code": "(fn [coded]\n   (let [rank-table\n         {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n         suit-table\n         {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spades}]\n     {:suit (suit-table (str (first coded)))\n      :rank (rank-table (str (second coded)))}))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 128, "code": "(fn [c] {:suit ({\\H :heart\n                 \\C :club\n                 \\S :spade\n                 \\D :diamond} (first c))\n         :rank ((zipmap \"23456789TJQKA\" (range)) (second c))})", "user": "5353afa0e4b084c2834f4b03"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (condp = s\n           \\D :diamond\n           \\C :club\n           \\H :heart\n           :spade)\n  :rank (condp = r\n          \\T 8\n          \\J 9\n          \\Q 10\n          \\K 11\n          \\A 12\n          (- (read-string (str r)) 2))})", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 128, "code": "(fn cards\n  [card]\n  (letfn [(get-suit [suit]\n            (cond\n             (= suit \\D) :diamond\n             (= suit \\S) :spade\n             (= suit \\H) :heart\n             (= suit \\C) :club))\n          (get-rank [rank]\n            (case rank\n              \\A 12\n              \\K 11\n              \\Q 10\n              \\J 9\n              \\T 8\n              (- (Character/digit rank 10) 2)))]\n    (let [suit (first card)\n          rank (second card)]\n      {:suit (get-suit suit) :rank (get-rank rank)})))", "user": "526e1bd0e4b03e8d9a4a730b"}, {"problem": 128, "code": "(fn [x] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first x)) \n         :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (second x))})", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 128, "code": "(fn [card]\n  (let [m \n        {\\S {:suit :spade}\n         \\H {:suit :heart}\n         \\C {:suit :club}\n         \\D {:suit :diamond}\n         \\2 {:rank 0}\n         \\3 {:rank 1}\n         \\4 {:rank 2}\n         \\5 {:rank 3}\n         \\6 {:rank 4}\n         \\7 {:rank 5}\n         \\8 {:rank 6}\n         \\9 {:rank 7}\n         \\T {:rank 8}\n         \\J {:rank 9}\n         \\Q {:rank 10}\n         \\K {:rank 11}\n         \\A {:rank 12}}]\n    (apply merge (map m card))))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 128, "code": "(fn parse-card [card-str]\n  (let [[suit-char rank-char] (seq card-str)]\n    {:suit (case suit-char\n             \\D :diamond\n             \\H :heart\n             \\S :spade\n             \\C :club)\n     :rank (cond\n            (<= (int \\0) (int rank-char) (int \\9)) (- (int rank-char) 50)\n            (= \\T rank-char) 8\n            (= \\J rank-char) 9\n            (= \\Q rank-char) 10\n            (= \\K rank-char) 11\n            (= \\A rank-char) 12)}))", "user": "4e6a2f93535d8ccf87e9feaa"}, {"problem": 128, "code": "(fn card [ [s r] ]\n    { :suit\n    ({\\C :club\n     \\D :diamond\n     \\H :heart\n     \\S :spade} s)\n    :rank\n    ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0} r) })", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 128, "code": "(fn\n  [s]\n  (let [suits { \\S :spade \\D :diamond \\H :heart \\C :club }\n        ranks { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n   { :suit (suits (first s))\n     :rank (ranks (last  s)) }))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 128, "code": "(fn cards [[suit rank]]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        faces {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8}\n        ranks (fn [n] (if (faces n) \n                        (faces n) \n                        (- (Integer/parseInt (str n)) 2)))]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 128, "code": "(fn [card]\n  (let [[s r] card\n        alls (zipmap \"DHCS\" [:diamond :heart :club :spade])\n        allr (zipmap \"23456789TJQKA\" (range))]\n    {:suit (alls s),\n     :rank (allr r)}))", "user": "54848141e4b0e286459a119e"}, {"problem": 128, "code": "(fn card [s]\n  (let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    {:suit (suits (get s 0)), :rank (.indexOf ranks (get s 1))}))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 128, "code": "(fn string-game [s]\n  (let [ranks [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n        suits {\"D\" :diamond\n               \"H\" :heart\n               \"C\" :club\n               \"S\" :spades}\n        letter-1 (subs s 0 1)\n        letter-2 (subs s 1 2)]\n    {:suit (suits letter-1) :rank (.indexOf ranks letter-2)}))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 128, "code": "(fn [[suit rank]]\n\t{:suit\n\t\t({\n\t\t\t\\H :heart\n\t\t\t\\D :diamond\n\t\t\t\\S :spades\n\t\t\t\\C :club\n\t\t} suit)\n\t:rank\n\t\t((zipmap \"23456789TJQKA\" (range)) rank)\n  \t}\n)", "user": "5472d919e4b094393f72dd7b"}, {"problem": 128, "code": "(fn [card-text]\n    (let [suit-text (first card-text)\n          rank-text (second card-text)]\n      (apply hash-map\n      [:suit\n       (case suit-text\n        \\H :heart\n        \\D :diamond\n        \\S :spade\n        \\C :club)\n       :rank\n       (case rank-text\n         \\A 12\n         \\K 11\n         \\Q 10\n         \\J 9\n         \\T 8\n         (- (int rank-text) 50))])))", "user": "511720eae4b0063b4e3e16da"}, {"problem": 128, "code": "(fn [card]\n  (let [[a b] (seq card)]\n    { :suit ({\\D :diamond\n              \\S :spade\n              \\H :heart\n              \\C :club} a)\n      :rank (cond (= \\T b) 8\n                  (= \\J b) 9\n                  (= \\Q b) 10\n                  (= \\K b) 11\n                  (= \\A b) 12\n                  :else (- (int b) (int \\0) 2))}))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 128, "code": "(fn \n  [[x y]] \n  {:suit \n  ({\\D :diamond \\S :spade \\H :heart \\C :club} x) \n  :rank \n  ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} y)})", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 128, "code": "(fn rpc [[S R]]\n     {:suit\n      ({\\D :diamond\n        \\H :heart\n        \\C :club\n        \\S :spade}\n           S)\n      :rank\n      (cond\n       (<= (int \\2) (int R) (int \\9)) (- (int R) (int \\2))\n       :else ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} R))\n      })", "user": "53e745a1e4b036ad0777e479"}, {"problem": 128, "code": "(fn [a] \n  (let [s (first a)\n        r (second a)\n        mr {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n            {:suit (if (= \\D s) :diamond (if (= \\H s) :heart (if (= \\C s) :club :noth))), \n             :rank (get mr r)}\n            ))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 128, "code": "(fn [[s r]] (let [suit (cond\n                         (= \\C s) :club\n                         (= \\D s) :diamond\n                         (= \\S s) :spade\n                         :else :heart)\n                   rank (cond\n                         (= \\A r) 14\n                         (= \\K r) 13\n                         (= \\Q r) 12\n                         (= \\J r) 11\n                         (= \\T r) 10\n                         :else (Character/getNumericValue r))]\n               {:suit suit :rank (- rank 2)}))", "user": "52540bcce4b0541d1855b952"}, {"problem": 128, "code": "(fn [s]\n (hash-map\n  :suit\n  (\n   (hash-map \\H :heart \\D :diamond \\C :club \\S :spade)\n   (first s)\n  ) \n  :rank (\n   (hash-map \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)\n   (last s)\n  )\n )\n)", "user": "52b7a904e4b0c58976d9ad51"}, {"problem": 128, "code": "(fn [[s r]]\n\t(merge\n\t\t(case s\n          \t\\C {:suit :club}\n          \t\\S {:suit :spades}\n          \t\\H {:suit :heart}\n        \t\\D {:suit :diamond} \n\t\t)\n     \t(case r\n          \t\\A {:rank 12}\n          \t\\K {:rank 11}\n        \t\\Q {:rank 10}\n          \t\\J {:rank 9}\n          \t\\T {:rank 8}\n          \t\\9 {:rank 7}\n          \t\\8 {:rank 6}\n          \t\\7 {:rank 5}\n          \t\\6 {:rank 4}\n          \t\\5 {:rank 3}\n          \t\\4 {:rank 2}\n          \t\\3 {:rank 1}\n          \t\\2 {:rank 0}\n        )\n\t)\n)", "user": "4fc8f671e4b0ee37620e1840"}, {"problem": 128, "code": "(fn [c]\n\n    {:suit ({\\S :spade \\H :heart \\C :club \\D :diamond} (first c))\n     :rank ((into (apply merge\n                         (for [x (range 2 10)] { (first (str x)) (- x 2)}))\n                  {\\T 8\n                   \\J 9\n                   \\Q 10\n                   \\K 11\n                   \\A 12})\n            (second c))})", "user": "4f9b3532e4b0dcca54ed6d13"}, {"problem": 128, "code": "#(let [\ts (get % 0) \n\t\tr (get % 1)\n\t\tsuits {\\S :spade, \n\t\t\t\\H :heart, \n\t\t\t\\D :diamond, \n\t\t\t\\C :club}\n\t\tranks {\\2 0, \n\t\t\t\\3 1, \n\t\t\t\\4 2, \n\t\t\t\\5 3,\n\t\t\t\\6 4,\n\t\t\t\\7 5,\n\t\t\t\\8 6,\n\t\t\t\\9 7,\n\t\t\t\\T 8,\n\t\t\t\\J 9,\n\t\t\t\\Q 10,\n\t\t\t\\K 11,\n\t\t\t\\A 12}]\n\t{:suit (get suits s), :rank (get ranks r)})", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 128, "code": "#(array-map :suit \n  ({\\S :spade \\H :heart \\D :diamond  \\C :club} (first %))\n  :rank\n  ((into {} (map vector \"23456789TJQKA\" (range))) (second %)))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 128, "code": "(fn [c] (zipmap [:suit :rank] (map #(%2 %1) c [ (zipmap \"DHCS\" [:diamond :heart :club :spade]) (zipmap \"23456789TJQKA\" (range)) ])))", "user": "512b07f7e4b078b06821febb"}, {"problem": 128, "code": "(fn [[suit rank :as code]]\n   (reduce (fn [m k]\n             (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n                   ranks \"23456789TJQKA\"]\n               (assoc m :suit (get suits suit)\n                        :rank (.indexOf ranks (str rank)))))\n           {}\n           code))", "user": "52e0e646e4b09f7907dd1416"}, {"problem": 128, "code": "(fn convert [str]\n  (let [[suit value] str\n        dict-suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        dict-values {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (dict-suits suit) :rank (dict-values value)}))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 128, "code": "(fn conv-cards [[suit rank]]\n  (let [suits {\\D :diamond \n               \\H :heart\n               \\C :club\n               \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get suits suit)\n     :rank (get ranks rank)}))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 128, "code": "(let [m (into (zipmap \"DHSC\" [:diamond :heart :spade :club])\n              (zipmap \"23456789TJQKA\" (range)))]\n  #(zipmap [:suit :rank] (map m %)))", "user": "50ef4e2be4b0a78662fa2653"}, {"problem": 128, "code": "(fn [x] (zipmap '(:suit :rank) \n                    \n                    (map \n                     {\\D :diamond \\H :heart \\C :club \\S :spade \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n                     (seq x)\n                     )\n                    \n                   )\n  )", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 128, "code": "(fn recog [s]\n  (let [suits {\\S :spade\n               \\H :heart\n               \\D :diamond\n               \\C :club\n               }\n        ranks {\n               \\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12\n               }]\n    {:suit (get suits (first s))\n     :rank (get ranks (second s))}\n    ))", "user": "4e7e241a535db169f9c79705"}, {"problem": 128, "code": "(fn [rep]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n               \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        [suit rank] (seq rep)]\n    {:suit (get suits suit) :rank (get ranks rank)}))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 128, "code": "#(let [rank []]\n   (assoc {} :suit\n              (case (first %)\n                \\S :spade\n                \\H :heart\n                \\D :diamond\n                \\C :club\n               )\n              :rank\n              (first (for [n (range 13) :when(= (nth \"23456789TJQKA\" n)(second %))] n))\n   )\n)", "user": "545537c1e4b0e397800069dd"}, {"problem": 128, "code": "(fn convert-card [s]\n  (let [cards (merge  {\\S :spade \\H :heart \\D :diamond \\C :club}\n                     (zipmap \"23456789TJQKA\" (range 13)))\n        [suit rank] (seq s)]\n    {:suit (cards suit) :rank (cards rank)}))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 128, "code": "(fn [x] \n  (let  [[s r] x\n         rank (get {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r)] \n   (assoc {} \n   :suit \n   (get {\\D :diamond, \\S :spade, \\H :heart, \\C :club} s)\n   :rank        \n       (if rank rank (- (int r) 50))\n    )))", "user": "52d66ca0e4b09f7907dd135c"}, {"problem": 128, "code": "(fn [[a b]]\n  (array-map \n  \t:suit \n  \t({\\S :spade \\C :club \\H :heart \\D :diamond} a) \n  \t:rank \n  \t(.indexOf \"23456789TJQKA\" (str b)))\n)", "user": "53029281e4b0d8b024fd372e"}, {"problem": 128, "code": "(fn cards [s]\n  (assoc {} :rank ((fn rank [c]\n              (let [res (int c)]\n                (if (= res 84)\n                  8\n                  (if (= res 74)\n                    9\n                    (if (= res 81)\n                      10\n                      (if (= res 75)\n                        11\n                        (if (= res 65)\n                          12\n                          (- res 50)))))))) (second s))\n             :suit \n              ((fn suit [c]\n                (let [res (int c)]\n                  (if (= res 68)\n                    :diamond\n                    (if (= res 67)\n                     :club\n                     (if (= res 72)\n                       :heart\n                       :spade))))) (first s))))", "user": "54982522e4b0b312c081ff7c"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suit {\\C :club \\D :diamond \\H :heart \\S :spade}\n        rank (zipmap \"23456789TJQKA\" (range))]\n    {:suit (suit s)\n     :rank (rank r)}))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 128, "code": "(fn card [[s r]]\n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 128, "code": "(fn card-to-map [str]\n  (let [chars (seq str)\n        suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}\n        ranks {\\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12}\n        rank (second chars)\n        suit (first chars)\n       ]\n    {:suit (suits suit) :rank (ranks rank) }\n))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suit (condp = (str s)\n        \"S\" :spade\n        \"D\" :diamond\n        \"H\" :heart\n        \"C\" :club)\n        rank (condp = (str r)\n        \"A\" 12\n        \"T\" 8\n        \"J\" 9\n        \"Q\" 10\n        \"K\" 11\n        (- (Integer. ^String (str r)) 2))]\n    (assoc {:suit \"\" :rank \"\" } :suit suit :rank rank)\n  ))", "user": "5463c452e4b01be26fd746c4"}, {"problem": 128, "code": "(fn [[suitr rankr]]\n  (let [suit (get {\\S :spade \\H :heart \\D :diamond \\C :club} suitr)\n        rank (get (zipmap (concat (map #(first (str%)) (range 2 10)) '(\\T \\J \\Q \\K \\A)) (range 0 13)) rankr)]\n    {:suit suit :rank rank}))", "user": "4dd6d7ee535d2dad7130b5cb"}, {"problem": 128, "code": "(fn [[s r]] \n       {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} s)\n        :rank ((zipmap (map str (concat (range 2 10) '(\\T \\J \\Q \\K \\A))) (range 13)) \n                (str r))})", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 128, "code": "#( let [s {\\D :diamond \\H :heart \\C :club \\S :spade} \n     r {\n     \\2 0\n     \\3 1\n     \\4 2\n     \\5 3\n     \\6 4\n     \\7 5\n     \\8 6\n     \\9 7\n     \\T 8\n     \\J 9\n     \\Q 10\n\t \\K 11\n     \\A 12}]   {:suit (s (first %)) :rank (r (second %))})", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 128, "code": "(fn [ss] (let [ff (first (seq ss))\n                 rr (- (int (last  (seq ss))) (int \\2))\n                 suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n                 rank  (if (< rr 8)\n                         rr\n                         (case rr\n                           34 8\n                           24 9\n                           31 10\n                           25 11\n                           15 12))\n                 \n                 ]\n             ;(suits \\D)\n             {:suit (suits ff) :rank rank}\n             ))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ;; (clojure.string/join (flatten (list (range 2 10) \"TJQKA\")))\n        ranks (zipmap \"23456789TJQKA\" (range))]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 128, "code": "(fn p128-cards [x]\n  (let [y (seq x)]\n    (hash-map\n      :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first y))\n      :rank (or\n              ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} (last y))\n              (- (int (last y)) 50)))))", "user": "543b12cce4b032a45b86932a"}, {"problem": 128, "code": "#(assoc {} :suit (case (first %)\n                   \\D :diamond\n                   \\C :club\n                   \\H :heart\n                   \\S :spade)\n           :rank (.indexOf \"23456789TJQKA\" (str (second %))))", "user": "536b9d8ae4b0243289761ebe"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [s (case suit \\D :diamond \\H :heart \\C :club \\S :spade)\n        r (get (zipmap \"23456789TJQKA\" (range 13)) rank)]\n    {:suit s :rank r}))", "user": "5484143de4b0e286459a1197"}, {"problem": 128, "code": "#((fn [[s r]]\n    (assoc {}\n      :suit (condp = s\n              \\D :diamond\n              \\C :club\n              \\S :spade\n              \\H :heart)\n      :rank (condp = r\n              \\A 12\n              \\2 0\n              \\3 1\n              \\4 2\n              \\5 3\n              \\6 4\n              \\7 5\n              \\8 6\n              \\9 7\n              \\T 8\n              \\J 9\n              \\Q 10\n              \\K 11))) %)", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 128, "code": "(fn [s] {\n  \n  :suit ({\n      \\S :spade\n      \\H :heart\n      \\D :diamond\n      \\C :club\n  } (first s))\n  \n  :rank ({\n      \\2 0\n      \\3 1\n      \\4 2\n      \\5 3\n      \\6 4\n      \\7 5\n      \\8 6\n      \\9 7\n      \\T 8\n      \\J 9\n      \\Q 10\n      \\K 11\n      \\A 12\n  } (second s))\n})", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 128, "code": "(fn [[suit rank]] \n  (let [suitmap {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rankmap (into {} (map vector \"23456789TJQKA\" (range 13)))]\n    {\n      :suit (suitmap suit)\n      :rank (rankmap rank)}))", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 128, "code": "(fn card->map [card]\n  (let [[suit rank] (map str (seq card))]\n    {:suit ({:S :spade\n             :H :heart\n             :D :diamond\n             :C :club} (keyword suit))\n     :rank ({:2 0  :3 1\n             :4 2  :5 3\n             :6 4  :7 5\n             :8 6  :9 7\n             :T 8  :J 9\n             :Q 10 :K 11\n             :A 12} (keyword rank))}))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [rankings [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n        suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}]\n    {:suit (suits suit) :rank (.indexOf rankings rank)}))", "user": "5317d78ee4b08068f379ed63"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\n        \t\"S\" :spade,\n        \t\"C\" :club,\n        \t\"H\" :heart,\n        \t\"D\" :diamond\n        },\n        ranks {\n        \t\"2\" 0\n        \t\"3\" 1\n        \t\"4\" 2\n        \t\"5\" 3\n        \t\"6\" 4\n        \t\"7\" 5\n        \t\"8\" 6\n        \t\"9\" 7\n        \t\"T\" 8\n        \t\"J\" 9\n        \t\"Q\" 10\n        \t\"K\" 11\n        \t\"A\" 12\n        }]\n    {\n    \t:suit (-> card (first) (str) (suits)),\n    \t:rank (-> card (last) (str) (ranks))\n    }))", "user": "54bd91d7e4b0ed20f4ff6ee2"}, {"problem": 128, "code": "#(assoc (\n  assoc {} :suit ({ \\D :diamond \\H :heart \\S :spade \\C :club} (first (vec %))))\n  :rank ((zipmap \"23456789TJQKA\" (range)) (second (vec %))))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 128, "code": "(fn [[x y]] {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} x)\n    \t\t :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} y (- (int y) 50))})", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 128, "code": "(fn [d] {:suit (get {\\S :spade \\H :heart \\D :diamond \\C :club} (first d)) :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second d))})", "user": "53347274e4b0656e627bfd6b"}, {"problem": 128, "code": "#(hash-map :suit ({\\D :diamond \\C :club \\S :spade \\H :heart}\n                 (first %))\n           :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n                 (second %)))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n       ranks (seq \"23456789TJQKA\")\n       card (seq s)]\n    {:suit (get suits (first card))\n     :rank (.indexOf ranks (second card))}))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 128, "code": "(fn [xs]\n  (let [sm { \\H :heart \\S :spade \\D :diamond \\C :club }\n       rm {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n  {:suit (sm (first xs)) :rank (rm (last xs))}\n))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 128, "code": "(fn [s] {:suit ({\\D :diamond\n                 \\H :heart\n                 \\C :club\n                 \\S :spade } (.charAt s 0))\n         :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4\n                 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9\n                 \\Q 10 \\K 11 \\A 12} (.charAt s 1))})", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 128, "code": "(fn playing-cards\n  [[s r]]\n  (let [suit {\\A :ace \\C :club \\H :heart \\D :diamond}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n              \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n     {:suit (suit s) :rank (rank r)}))", "user": "5383668ee4b06839e8705edd"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-char (get s 0) rank-char (get s 1)]\n    (let [suit\n          (case suit-char\n            \\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :spade)\n          rank\n          (case rank-char\n            (\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9) (- (#(Character/digit % 10) rank-char) 2)\n            \\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12)]\n      (hash-map :suit suit :rank rank))))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 128, "code": "(fn [x]\n   (let [suits {:D :diamond :S :spade :H :heart :C :club}\n         ranks {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12}]\n     (merge {:suit (-> x first str keyword suits)} {:rank (-> x second str keyword ranks)})))", "user": "53ed1cb8e4b0d648e757f4be"}, {"problem": 128, "code": "(fn __ [s]\n  (let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        ranks \"23456789TJQKA\"]\n      {:suit (get suits (.charAt s 0))\n       :rank (.indexOf ranks (subs s 1 2)) }\n    )\n  )", "user": "54c271b9e4b045293a27f602"}, {"problem": 128, "code": "(fn [card]\n  (let [ suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n         ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n         [s r] (seq card)\n         suit (get suits s)]\n    (if-let [rank (get ranks r)]\n       {:suit suit :rank rank}\n       {:suit suit :rank (- (Character/getNumericValue r) 2)})))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 128, "code": "(fn [card]\n  (let [rank #(.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] %)\n        suit {\\S :spade \\C :club \\D :diamond \\H :heart}]\n    {:suit (suit (first card)) :rank (rank (last card))}))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 128, "code": "(fn [card-code]\n  (let\n    [suits  '{ \"H\" :heart \"D\" :diamond \"S\" :spade \"C\" :club }\n     ranks  '{ \"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \n               \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12 }]\n    (assoc {} :suit (suits (str (first card-code))) :rank (ranks (str (last card-code))) )))", "user": "546692aee4b01be26fd746e7"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suitkw ({\\S :spade \\D :diamond \\H :heart \\C :club} suit)\n        rankint ((zipmap \"23456789TJQKA\" (range)) rank)]\n    {:suit suitkw :rank rankint}))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 128, "code": "(fn [crd] \n  (let [suits {\\D :diamond, \\H :heart, \\S :spade, \\C :club}\n        ranks {\\A 12, \\K 11, \\Q 10, \\J 9, \\T 8, \\9 7, \\8 6, \\7 5, \\6 4, \\5 3, \\4 2, \\3 1, \\2 0}\n        suit (first (seq crd))\n        rank (last (seq crd))]\n    (hash-map :suit (suits suit) :rank (ranks rank))\n    ))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 128, "code": "(fn [card]\n  { :suit (let [[x _] card] (get {\\H :heart, \\D :diamond,\n                                  \\S :spade, \\C :club} x))\n    :rank (let [[_ x] card] (get {\\2 0, \\3 1,  \\4 2,  \\5 3, \\6 4,\n                                  \\7 5, \\8 6,  \\9 7,  \\T 8,\n                                  \\J 9, \\Q 10, \\K 11, \\A 12} x))})", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} s)\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})", "user": "4f301d02e4b0d6649770a072"}, {"problem": 128, "code": "(fn [str]\n          (let [suit ({\"D\"  :diamond, \"H\" :heart ,\"C\" :club, \"S\" :spade } (subs str 0 1))\n                rank ({ \"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12 } (subs str 1))]\n            {:suit suit, :rank rank}\n            ))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [rmap (zipmap (map #(first (str %)) (into (vec (range 2 10)) \"TJQKA\")) (range))\n        smap {\\D :diamond \\H :heart \\C :club \\S :spade}]\n    {:suit (smap s) :rank (rmap r)}))", "user": "5466199ce4b01be26fd746e2"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ( {\\H :heart \\S :spade \\D :diamond \\C :club} suit)\n   :rank ( (zipmap \"23456789TJQKA\" (range)) rank)})", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 128, "code": "(fn cardMap [s]\n    {:suit (get {:H :heart :D :diamond :C :club \"S\" :spade} (keyword (subs s 0 1)))\n   :rank (get {:A 12 :K 11 :Q 10 :J 9 :T 8 :9 7 :8 6 :7 5 :6 4 :5 3 :4 2 :3 1 :2 0} (keyword (subs s 1 2)))\n  }\n)", "user": "525d490ae4b0cb4875a45d70"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits (zipmap \"DHCS\" [:diamond :heart :club :spade])\n        ranks (zipmap \"23456789TJQKA\" (range))]\n    {:suit (suits s)\n     :rank (ranks r)}))", "user": "4ed45563535d10e5ff6f52c9"}, {"problem": 128, "code": "(let [suit {\\D :diamond \\S :spade \\H :heart \\C :club}\n      rank (zipmap \"23456789TJQKA\" (range))]\n  (fn [[s v]]\n    {:suit (suit s) :rank (rank v)}))\n;\n;(fn str-to-playing-card [s]\n;  (when-let [s (str s)]\n;    (let [suit (first s)\n;          value (second s)\n;          suits {\\D :diamond\n;                 \\C :club\n;                 \\H :heart\n;                 \\S :spade}\n;          ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n;                        (range 13))]\n;      {:suit (suits suit) :rank (ranks value)})))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n        rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r) (- (Integer. (str r)) 2))]\n     {:suit suit :rank rank}))", "user": "52950ab6e4b02ebb4ef7501a"}, {"problem": 128, "code": "(fn [[s r]] {\n  :suit ({\\H :heart \\S :spade \\D :diamond \\C :club} s)\n  :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)\n  })", "user": "54c641f8e4b045293a27f628"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        faces {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} \n        ranks (merge faces \n                     {\\2 0, \\3 1, \\4 2, \\5 3, \n                      \\6 4, \\7 5, \\8 6, \\9 7})\n        suit (suits (first s))\n        rank (ranks (second s))]\n    {:suit suit :rank rank}))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 128, "code": "(fn [{s 0 r 1}]\n  (let [suit ({\\D :diamond, \\C :club, \\S :spade, \\H :heart} s)\n        rank ({\\A 12, \\K 11, \\Q 10, \\J 9, \\T 8, \\9 7, \\8 6, \\7 5, \\6 4, \\5 3, \\4 2, \\3 1, \\2 0} r)]\n    {:suit suit, :rank rank}))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 128, "code": "(fn [human-representation]\n  (let [[s r] human-representation\n        map-suite {\\S :spades, \\H :heart, \\D :diamond, \\C :club}\n        map-rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n\n    {:suit (map-suite s), :rank (map-rank r)}))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 128, "code": "(fn [c] {:suit ({\"S\" :spade \"H\" :heart \"C\" :club \"D\" :diamond} (subs c 0 1)) :rank (.indexOf \"23456789TJQKA\" (subs c 1))})", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 128, "code": "(fn [c] { :suit ({ \\D :diamond \\H :heart \\C :club \\S :spade } (first c)) \n  \t\t\t\t :rank ({ \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 } (second c) (- (int (second c)) 50)) })", "user": "54d03026e4b018d918be98de"}, {"problem": 128, "code": "(fn [[rawsuit rawrank]]\n  (let [ ranks (zipmap \"23456789TJQKA\" (range))\n         suits { \\S :spade \\H :heart \\D :diamond \\C :club} ]\n    {:suit (suits rawsuit) :rank (ranks rawrank)}))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 128, "code": "(fn [x]\n  (let [[s r] (seq x)]\n    {:suit (case s \\D :diamond, \\H :heart, \\C :club, \\S :spade),\n     :rank (case r \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8  (- (int r) (int \\2)))}))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 128, "code": "(fn f [x]\n  (let [rank [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n        suites {\\D :diamond\n                \\H :heart\n                \\C :club\n                \\S :spades}]\n       (hash-map :suit (suites (get x 0))\n            :rank (.indexOf rank (get x 1)))))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 128, "code": "(fn card [s]\n  (let [ss (re-seq #\"[A-Z0-9]\" s)\n        rs {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n        su {\"H\" :heart, \"C\" :club, \"D\" :diamond, \"S\" :spade}]\n    {:suit (get su (first ss) ), :rank (get rs (last ss) )}))", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 128, "code": "(fn [[s r]] \n  {:suit (get (zipmap \"QHCD\" [:queen :heart :club :diamond]) s)\n   :rank (get (zipmap \"23456789TJQKA\" (range)) r)})", "user": "4fb01e53e4b081705acca260"}, {"problem": 128, "code": "(fn [in] \n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n\t    rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        chars (seq (char-array in))]\n    {:suit (suit-map (first chars)) :rank (rank-map (second chars))}))", "user": "504f9ae1e4b0a02f9cffde9c"}, {"problem": 128, "code": "(fn [[a b]] (let [\n                      kembang (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n                      angka (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n                  {:suit (kembang (str a)) :rank (angka (str b))}))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 128, "code": "(fn  [s]\n  (let [mark (first (seq s))\n        n (second (seq s))]\n    {:suit (cond (= mark \\D) :diamond\n                 (= mark \\H) :heart\n                 (= mark \\S) :spade\n                 (= mark \\C) :club)\n     :rank (cond (= n \\T)  8\n                 (= n \\J)  9\n                 (= n \\Q) 10\n                 (= n \\K) 11\n                 (= n \\A) 12\n                 :else (- (- (int n) (int \\0)) 2))\n     }))", "user": "53664e3be4b0243289761e74"}, {"problem": 128, "code": "(fn [[s r]] (let [suit {\\H :heart \\D :diamond \\C :club \\S :spade}\n                   rank (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n               {:suit (get suit s) :rank (get rank r)}))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        [s r] (seq card)]\n    {:suit (suits s)\n     :rank (ranks r)}))", "user": "5215661be4b02f6d8ea676c7"}, {"problem": 128, "code": "(fn [id] \n  (let [suits {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n        cards {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits (first id)), :rank (cards (fnext id))}))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 128, "code": "(fn [[suit-char rank-char]]\n  (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (get suits suit-char), :rank (get ranks rank-char)}))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 128, "code": "(fn rec-cards [s]\n  (let [m {:cards\n                  {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n           :ranks (into {} (map vector (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range 13)))}\n        card (str (first (seq s)))\n        rank-str (str (second (seq s)))]\n    (assoc (assoc {} :rank (get-in m [:ranks rank-str])) :suit (get-in m [:cards card]))))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 128, "code": "(fn [[suit value]]\n    {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} suit) :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} value (- (int value) 50))}\n    )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 128, "code": "(fn [card-str]\n  (let [suit (first card-str) rank (last card-str)]\n    {:suit (case (clojure.string/upper-case suit)\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club)\n    :rank (case (clojure.string/upper-case rank)\n            \"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6\n            \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12)}))", "user": "54b6cd2be4b0ed20f4ff6e7e"}, {"problem": 128, "code": "(fn [[s r]] \n  (let [rank (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))\n        suit (zipmap \"SCDH\" [:spade :club :diamond :heart])]\n    {:suit (get suit s) :rank (get rank r)}))", "user": "4f7207d3e4b07046d9f4f019"}, {"problem": 128, "code": "#(zipmap [:suit :rank] [(case (first %)\n                          \\H :heart\n                          \\D :diamond\n                          \\S :spade\n                          \\C :club)\n                        (case (second %)\n                          \\2 0\n                          \\3 1\n                          \\4 2\n                          \\5 3\n                          \\6 4\n                          \\7 5\n                          \\8 6\n                          \\9 7\n                          \\T 8\n                          \\J 9\n                          \\Q 10\n                          \\K 11\n                          \\A 12)])", "user": "540d0087e4b0addc1aec670b"}, {"problem": 128, "code": "(fn [c] \n  (let [suits {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club} \n        ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}] \n    {:suit (get suits (.substring c 0 1)) :rank (get ranks (.substring c 1 2))}))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (case s\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (case r\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           (- (int r) (int \\2)))})", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 128, "code": "(fn [abbr]\n  {:suit ({\\D :diamond\n           \\H :heart\n           \\S :spade\n           \\C :club} (first abbr))\n   :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (second abbr))})", "user": "5463c824e4b01be26fd746c5"}, {"problem": 128, "code": "(fn  [[suit card]]\n  {\n    :suit ({\\D :diamond \\C :club \\H :heart} suit)\n    :rank ((apply hash-map (interleave [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))) card)\n  })", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 128, "code": "(fn card-to-hash [c]\n  (let\n      [char1 (first c)\n       char2 (second c)\n       suit\n       (cond\n         (= char1 \\H) :heart\n         (= char1 \\S) :spade\n         (= char1 \\D) :diamond\n         (= char1 \\C) :club)\n       rank\n       (cond\n         (= char2 \\A) 12\n         (= char2 \\K) 11\n         (= char2 \\Q) 10\n         (= char2 \\J) 9\n         (= char2 \\T) 8\n         :else (- (int char2) 50))]\n    {:suit suit :rank rank}))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 128, "code": "(fn [cardStr]\n  {:suit (get {\\H :heart\n               \\D :diamond\n               \\C :club\n               \\S :spade}\n              (first cardStr))\n\n   :rank (get {\\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12}\n              (second cardStr))})", "user": "525cc912e4b0cb4875a45d48"}, {"problem": 128, "code": "#(let [\n       [a b] (map (comp identity keyword str) (seq %))] \n   {:suit ({:D :diamond :H :heart :C :club :S :spade} a ) \n   :rank ((zipmap [:2 :3 :4 :5 :6 :7 :8 :9 :T :J :Q :K :A](range)) b)})", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank ((into (zipmap (map (comp first str) (range 2 10)) (range))\n                {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}) r)})", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 128, "code": "(fn [[s r]] {\n  :suit ({\\S :suit \\H :heart \\D :diamond \\C :club } s)\n  :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)\n  })", "user": "533ea7e8e4b085b17e897d94"}, {"problem": 128, "code": "(fn [[s r]] {:suit ({\\H :heart \\C :club \\D :diamond \\S :spade} s) :rank (.indexOf \"23456789TJQKA\" (str r))})", "user": "53b15e6ee4b047364c04448f"}, {"problem": 128, "code": "(fn suit-map\n   [card-str]\n   {:suit (condp = (first card-str)\n            \\C :club\n            \\D :diamond\n            \\H :heart\n            \\S :spade)\n    :rank (condp = (second card-str)\n            \\2 0\n            \\3 1\n            \\4 2\n            \\5 3\n            \\6 4\n            \\7 5\n            \\8 6\n            \\9 7\n            \\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12)})", "user": "510a3cd4e4b06956752d35ad"}, {"problem": 128, "code": "(fn\n  [[suit rank]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} suit) \n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)})", "user": "54e0e911e4b024c67c0cf7bc"}, {"problem": 128, "code": "#(hash-map \r\n  :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first %))\r\n  :rank ((apply hash-map (interleave \"23456789TJQKA\" (range 13))) (second %)))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 128, "code": "(fn [descr] \n  (let [dsuit (first descr)\n        suitmap '{\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        drank (second descr)\n        rankmap '{\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suitmap dsuit) :rank (rankmap drank)}\n))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 128, "code": "#(into {}\n       { :suit (get  { \\D :diamond \\H :heart \\S :spade \\C :club } (get % 0) )\n         :rank (get  { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 } (get % 1))})", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 128, "code": "(fn [card]\n  (let [[suit rank] (seq card)\n        suit-map {\\S :spade \\D :diamond \\C :club \\H :heart}\n        rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6\n                  \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit-map suit) :rank (rank-map rank)}))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 128, "code": "(fn [[s r]] {:suit (get {\\H :heart \\S :spade \\D :diamond \\C :club} s) :rank ((comp dec dec) (get {\\T 10 \\J 11 \\Q 12 \\K 13 \\A 14} r (- (int r) 48)))})", "user": "4e68c465535d8ccf87e9fe8a"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (case s\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           nil)\n   :rank (if (Character/isDigit r)\n           (- (Integer. (str r)) 2)\n           (case r\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12))})", "user": "53523ae0e4b084c2834f4aee"}, {"problem": 128, "code": "#(hash-map :suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} (nth % 0))\n           :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10,\\K 11, \\A 12} (nth % 1)))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 128, "code": "(fn [[s r]] {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s) :rank ((apply hash-map (interleave \"23456789TJQKA\" (range))) r)})", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 128, "code": "(fn card-parse [string]\n  (letfn [(getsuit [st] ({\\D :diamond, \\H :heart, \\S :spade, \\C :club} st))\n          (getrank [sr] ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} sr))]\n    (let [sq (seq string)\n          [st rk] sq]\n      (println st)\n      (println rk)\n      {:suit (getsuit st) :rank (getrank rk)})))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\\H :heart \\D :diamond \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8\n               \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits (first s))\n     :rank (ranks (second s))}))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 128, "code": "(fn   ([c] (hash-map :rank ((zipmap \"AKQJT98765432\" (iterate dec 12)) (second c)) :suit ({'\\C :club '\\D :diamond '\\H :heart '\\S :spade} (first c)) )))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 128, "code": "(fn [s]\n  (let [[suit numb] s]\n    {:suit ({\\S :spade, \n             \\H :heart,\n             \\D :diamond, \n             \\C :club} suit),\n     :rank (.indexOf \"23456789TJQKA\" (str numb))}))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 128, "code": "(fn [[s r]] (let [sm {\\S :spade \\H :heart \\D :diamond \\C :club} rm {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}] (hash-map :suit (sm s) :rank (rm r))))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 128, "code": "(fn [s] \n  (let \n    [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n     ranks (zipmap \"23456789TJQKA\" (range))]\n    {:suit (suits (first s)) :rank (ranks (second s))}))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 128, "code": "(fn [[suit rank]]\n          (let\n            [suits { \\D :diamond\n                       \\H :heart\n                       \\C :club\n                       \\S :spade\n                       }\n             ranks (vec \"23456789TJQKA\")\n             ]\n            {:suit (get suits suit) :rank (.indexOf ranks rank)})\n         )", "user": "54cd9519e4b057c6fda3a2a6"}, {"problem": 128, "code": "(fn [[suit rank]] \n            (let [suits {\n                         \\D :diamond\n                         \\H :heart\n                         \\C :club\n                         \\S :spade\n                         }\n                  ranks (vec \"23456789TJQKA\")\n                  ] \n              \n              {:suit (get suits suit) :rank (.indexOf ranks rank)}\n            )\n          )", "user": "54db8d27e4b024c67c0cf765"}, {"problem": 128, "code": "(fn\n  [[s c]]\n  {:suit (get {\\H :heart \\D :diamond \\S :spade \\C :club} s) :rank (or (get {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} c) (- (Character/getNumericValue c) 2))})", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 128, "code": "(fn map-card [s] (let [[S R] s] \n    {:suit (get {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} (str S))\n     :rank (get {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (str R))}))", "user": "50e1bdd8e4b019fc399ce17f"}, {"problem": 128, "code": "(fn [s]\n  (zipmap [:suit :rank] (map {\\S :spade \\H :heart \\D :diamond \\C :club\n                              \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} s)))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 128, "code": "(fn [a] {:suit\n         (case (first a)\n           \\S :spade \\H :heart \\D :diamond \\C :club)\n         :rank\n         (case (last a)\n           \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)})", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 128, "code": "(fn [id]\n  (let [suits {\\C :club \\D :diamond \\H :heart \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}] \n    {:suit (get suits (first id)) :rank (get ranks (last id))}))", "user": "54b31445e4b09f271ff37d35"}, {"problem": 128, "code": "(fn  [card]\n  (merge {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first card))} \n         {:rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] \n                   (range 0 13)) (last card))}))", "user": "50e90813e4b033b0e80d11e7"}, {"problem": 128, "code": "(let [suits {\\H :heart \\D :diamond \\S :spade \\C :club}\n      ranks (zipmap \"23456789TJQKA\" (range))]\n  (fn [[suit rank]]\n    {:suit (suits suit)\n    :rank (ranks rank)}))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 128, "code": "(fn [[s r]]\n  { :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n    :rank (.indexOf (seq \"23456789TJQKA\") r)})", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 128, "code": "(fn [r] \n   (let [s (first r) v (second r)] \n     (println v)\n     {:suit ({\\D :diamond \\C :club \\S :spade \\H :heart} s) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} v)}))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 128, "code": "(fn [[s r]]\n  { :suit ((zipmap \"SHDC\" [:spade :heart :diamond :club]) s)\n    :rank ((zipmap \"23456789TJQKA\" (range)) r) })", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 128, "code": "(fn [[suit rank]] \n  (let [suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get suit-map suit) \n     :rank (get rank-map rank)}))", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 128, "code": "(fn pc[s]\n  (let [rk {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        st {\\D :diamond \\S :spade \\H :heart \\C :club}\n        sq (vec (seq s))\n        s (sq 0)\n        r (sq 1)]\n    (assoc {} :suit (st s) :rank (rk r))))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 128, "code": "(fn  [code]\n  (let [suit-map {\\D :diamond\n                  \\C :club\n                  \\H :heart\n                  \\S :spade}\n        num-ranks (range 2 10 1)\n        rank-map (into {\\T 8\n                        \\J 9\n                        \\Q 10\n                        \\K 11\n                        \\A 12} (zipmap (map (comp first seq str) num-ranks) (map #(- % 2) num-ranks)))]\n    {:suit (suit-map (first code))\n     :rank (rank-map (second code))}))", "user": "5508b405e4b06e50f9beb110"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits suit) :rank (ranks rank) }))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 128, "code": "(fn [s]\n  (let [suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n         rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit (first s)) :rank (rank (second s))}))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 128, "code": "(fn [s]\n   (let [suits {\\H :heart \\D :diamond \\C :club \\S :spade}\n         ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n     {:suit (get suits (first s)) :rank (get ranks (second s))}))", "user": "52cee992e4b07d0d72b27395"}, {"problem": 128, "code": "(fn [x] (hash-map :suit ({\\C :club \\H :heart \\D :diamond \\S :spade} (first x)) \n\t\t\t\t  :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second x))))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 128, "code": "(fn [s] (let [suit (assoc nil :suit (cond \n                                       (= (get s 0) \\D) :diamond\n                                       (= (get s 0) \\H) :heart\n                                       (= (get s 0) \\C) :club\n                                       (= (get s 0) \\S) :spade))]\n                       (assoc suit :rank (cond\n                                           (= (get s 1) \\T) 8\n                                           (= (get s 1) \\J) 9\n                                           (= (get s 1) \\Q) 10\n                                           (= (get s 1) \\K) 11\n                                           (= (get s 1) \\A) 12\n                         \t\t\t\t   :else (- (int (get s 1)) 50)))))", "user": "550e0373e4b06e50f9beb162"}, {"problem": 128, "code": "(fn [card]\n    (let [suit-map {\\H :heart \\D :diamond \\C :club \\S :spade}\n        rank-map (zipmap \"23456789TJQKA\" (range))]\n       {:suit (suit-map (first (seq card))), :rank (rank-map (second (seq card)))}))", "user": "544e8369e4b0e39780006987"}, {"problem": 128, "code": "(fn [[s c]]\n  {:suit (case s\n               \\D :diamond\n               \\H :heart\n               \\S :spade\n               \\C :club)\n   :rank ((zipmap \"23456789TJQKA\" (range)) c)})", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9, 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n  \t]\n    {:suit (suits (first(seq s))), :rank (ranks (second(seq s)))}\n\t))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 128, "code": "(fn [encoded]\n  (let [suit-map {\\D :diamond \\S :spade\n                  \\H :heart \\C :club}\n        rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n                  \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n                  {:suit (suit-map (first encoded))\n                  :rank (rank-map (second encoded))}))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 128, "code": "(fn [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))\n\n#_(fn [entrada]\n  (let [ [s r] (clojure.string/split entrada #\"\")\n         ms {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spades}\n         mn (reduce conj {} (keep-indexed #(vec [%2 %1]) (concat (map str (range 2 10))\n                                                                 [\"T\" \"J\" \"Q\" \"K\" \"A\"])) ) ]\n    {:suit (ms s) :rank (mn r)}\n  ))", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 128, "code": "(fn sg [strs]\n  (let [suit {\"D\" :diamond \"C\" :club \"H\" :heart \"S\" :spades}\n        rank {\"2\" 0,\"3\" 1,\"4\" 2,\"5\" 3,\"6\" 4,\"7\" 5,\"8\" 6,\"9\" 7,\"T\" 8,\"J\" 9,\"Q\" 10,\"K\" 11,\"A\" 12}\n        strsrep (map str strs)]\n    (hash-map :suit (suit (first strsrep)) :rank (rank (second strsrep)))))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 128, "code": "(fn [s] \n  {:suit ({\\H :heart \\D :diamond \\C :club \\S :spade} (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))})", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 128, "code": "(fn [s]\n  (letfn\n  [(get-rank [c ranks] (.indexOf (str ranks) (Character/toString (Character/valueOf c))))\n   (get-suit [c suits] (get suits c))]\n  (let\n    [suits {\\S :spade \\H :heart \\C :club \\D :diamond}\n     ranks \"23456789TJQKA\"\n     letters (.toCharArray s)]\n    {:suit (get-suit (first letters) suits) :rank (get-rank (second letters) ranks)})))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 128, "code": "(fn [s]\n  {:suit (case (first s)\n           \\D :diamond\n           \\S :space\n           \\H :heart\n           \\C :club)\n  :rank (case (second s)\n          \\A 12\n          \\K 11\n          \\Q 10\n          \\J 9\n          \\T 8\n          \\9 7\n          \\8 6\n          \\7 5\n          \\6 4\n          \\5 3\n          \\4 2\n          \\3 1\n          \\2 0)})", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 128, "code": "#(let [[a b] %\n        s {\\D :diamond \\H :heart \\C :club \\S :spade}\n        r [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    {:suit (get s a) :rank (.indexOf r b)})", "user": "53d5a63be4b0e771c3025449"}, {"problem": 128, "code": "(fn cards [s]\n  (let [series (zipmap \"DHCS\" [:diamond :heart :club :spade])\n        rank (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (get series (first s))\n     :rank (get rank (second s))}))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 128, "code": "#(let [suit (str (first %)) rank (str (second %))] \n   {:suit \n  (case suit\n    \"D\" :diamond\n    \"H\" :heart\n    \"C\" :club\n    \"S\" :spade\n   )\n   :rank\n  (case rank\n    \"A\" 12\n    \"2\" 0\n    \"3\" 1\n    \"4\" 2\n    \"5\" 3\n    \"6\" 4\n    \"7\" 5\n    \"8\" 6\n    \"9\" 7\n    \"T\" 8\n    \"J\" 9\n    \"Q\" 10\n    \"K\" 11\n   ) \n   }\n  )", "user": "551c66dae4b07993ea3788de"}, {"problem": 128, "code": "(fn [card]\n  (let [suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first card))\n        rank (condp #(% %2) (second card)\n               #{\\T} 8 #{\\J} 9 #{\\Q} 10 #{\\K} 11 #{\\A} 12\n               (set (->> (range 2 10) (map (comp first str)))) :>> #(- (int %) 50))]\n    {:suit suit :rank rank}))", "user": "53908e6be4b0b51d73faae9a"}, {"problem": 128, "code": "(fn p128 [s]\n  (let [suits {\"D\" :diamond, \"S\" :spade, \"H\" :heart, \"C\" :club}\n        ranks [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n        suit-str (str (first (seq s)))\n        rank-str (str (second (seq s)))]\n    {:suit (suits suit-str)\n     :rank (.indexOf ranks rank-str)}))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 128, "code": "(fn [s]\n  (let [[suit rank] s\n        suit (case suit\n               \\C :club\n               \\D :diamond\n               \\H :heart\n               \\S :spade)\n        rank (case rank\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12\n               (- (Character/digit rank 10) 2))]\n    {:suit suit, :rank rank}))", "user": "552356fae4b0882d96d091af"}, {"problem": 128, "code": "(fn [v]\n   (let [[s r] (seq (map str v))]\n     {:suit ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} s)\n      :rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} r)}))", "user": "50f53694e4b057d4c52de881"}, {"problem": 128, "code": "(fn [astr] \n         (let [ranks \"23456789TJQKA\"]\n           {:suit (condp = (first astr)  \\D :diamond  \\H :heart \\S :spade \\C :club)  \n            :rank (.indexOf ranks (str (nth astr 1)))}))", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 128, "code": "(fn [s]\n  (let [m1 {\\S :spade \\D :diamond \\H :heart \\C :club}\n        m2 (zipmap \"23456789TJQKA\" (range))]\n    {:suit (m1 (first s))\n     :rank (m2 (last s))}))", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ({\\D :diamond\n           \\H :heart\n           \\S :spade\n           \\C :club} suit)\n   :rank (condp = rank\n           \\A 12\n           \\J 9\n           \\K 11\n           \\Q 10\n           \\T 8\n           (- (Integer/parseInt (str rank)) 2))})", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 128, "code": "(fn [s]\n  (let [[suit rank] (seq s)\n        kw (case suit\n             \\D :diamond\n             \\H :heart\n             \\S :spade\n             \\C :club)\n        number (int (case rank\n                 \\J 9\n                 \\Q 10\n                 \\K 11\n                 \\A 12\n                 \\T 8\n                 (- (Integer. (str rank)) 2)))]\n    {:suit kw :rank number}))", "user": "50611456e4b0dc10a69545a5"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits s) :rank (ranks r)}))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [rank (zipmap \"23456789TJQKA\" (range 0 13)) suit (zipmap \"DHCS\" [:diamond :heart :club  :spade])]\n    (assoc {} :suit (suit s) :rank (rank r))))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 128, "code": "(fn recog-cards [sr]\n  (let [get-suit\n        (fn [s]\n          (cond\n           (= \\D s) :diamond\n           (= \\S s) :spade\n           (= \\H s) :heart\n           (= \\C s) :club))\n        get-rank\n        (fn [r]\n          (cond\n           (= \\T r) 8\n           (= \\J r) 9\n           (= \\Q r) 10\n           (= \\K r) 11\n           (= \\A r) 12\n           :else (- (int r) (int \\2))))]\n    {:suit (get-suit (first sr)) :rank (get-rank (second sr))}))", "user": "55151417e4b055c2f668d4da"}, {"problem": 128, "code": "(fn [s]\n  {:suit (get \n          (apply hash-map (interleave [\\S \\H \\C \\D] [:spade :heart :club :diamond])) (first s))\n  :rank  (get\n          (apply hash-map (interleave [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))) (second s))})", "user": "4df247b8535d08e6dec9fe25"}, {"problem": 128, "code": "(fn [s]\n  {:suit\n   (case (first s)\n     \\C :club\n     \\D :diamond\n     \\H :heart\n     \\S :spade)\n   :rank\n   (case (second s)\n     \\T 8\n     \\J 9\n     \\Q 10\n     \\K 11\n     \\A 12\n     (- (read-string (str (second s))) 2))})", "user": "55253217e4b0882d96d091ce"}, {"problem": 128, "code": "#(hash-map\n   :suit \n   (           \n    {\"D\" :diamond\n     \"H\" :heart\n     \"S\" :spade\n     \"C\" :club} (str (first %)) ) \n\n   :rank \n   (           \n    {\"2\" 0\n     \"3\" 1\n     \"4\" 2\n     \"5\" 3\n     \"6\" 4\n     \"7\" 5\n     \"8\" 6\n     \"9\" 7\n     \"T\" 8\n     \"J\" 9\n     \"Q\" 10\n     \"K\" 11\n     \"A\" 12} (str (last %))))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 128, "code": "(fn [x] (let [f (first x), s (second x)] (\n                                          zipmap '(:suit :rank) (conj '() \n                                                                      (#(case % \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 (- (int %) 50)) s)\n                                                                       (#(case % \\D :diamond \\S :spade \\H :heart \\C :club) f) \n                                                                      ))))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (assoc {}\n    :suit (cond\n            (= suit \\D) :diamond\n            (= suit \\H) :heart\n            (= suit \\C) :club\n            :else :spade)\n    :rank (cond\n            (= rank \\2) 0\n            (= rank \\3) 1\n            (= rank \\4) 2\n            (= rank \\5) 3\n            (= rank \\6) 4\n            (= rank \\7) 5\n            (= rank \\8) 6\n            (= rank \\9) 7\n            (= rank \\T) 8\n            (= rank \\J) 9\n            (= rank \\Q) 10\n            (= rank \\K) 11\n            (= rank \\A) 12)))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 128, "code": "(let [m {\\D :diamond \\H :heart \\C :club \\S :spade\n           \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n           \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (fn [[s r]]\n      {:suit (m s) :rank (m r)}))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 128, "code": "(fn [w]\n  (let [m {\\S :spade, \\H :heart, \\D :diamond, \\C :club, \\T 8, \\J 9, \\Q 10 \\K 11, \\A 12}\n       [f l] w]\n  {:suit (m f)\n   :rank (m l (- (int l) 50))}))", "user": "552694e7e4b0ffed3738f920"}, {"problem": 128, "code": "(fn [c]\n  (let [rank (zipmap  [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9  \\T \\J \\Q \\K \\A] [0 1 2 3 4 5 6 7 8 9 10 11 12])\n        suit (zipmap [\\D \\H \\S \\C] [:diamond :heart :spade :club])]\n    {:suit (suit (first c)) :rank (rank (last c))}))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 128, "code": "(fn [s]\n  {\n  :suit (case (first s) \\H :heart \\D :diamond \\C :club :spade)\n  :rank (let [x (read-string (str (second s)))] (case x A 12 K 11 Q 10 J 9 T 8 (- x 2)))\n  })", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 128, "code": "(fn [card]\n  (let [suit {\\D :diamond, \\H :heart, \\C :club \\S :spade}\n        rank (fn [ch] (.indexOf \"23456789TJQKA\" (str ch)))]\n    {:suit (suit (first card))\n     :rank (rank (second card))}))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 128, "code": "#(zipmap '(:suit :rank) (list\n                        ({\\D :diamond \\H :heart \\C :club} (first %))\n                        ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n                         (last %)\n                         (- (Integer/parseInt (str (last (clojure.string/replace % #\"[TJQKA]\" \"0\")))) 2)\n                             )\n                        ))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 128, "code": "(fn [[x y]]\n  (zipmap [:suit :rank]\n          [((zipmap (map str \"HDSC\") [:heart :diamond :spade :club]) (str x))\n           ((zipmap (map str \"23456789TJQKA\") (range 13)) (str y))]))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 128, "code": "(fn [[suit rank]]\n   (let [s (case suit\n             \\D :diamond \n             \\H :heart\n             \\C :club\n             \\S :spade)\n         r (case rank\n            \\A 12\n            \\K 11\n            \\Q 10\n            \\J 9\n            \\T 8\n            (-> rank str Long/valueOf (- 2)))]\n     {:suit s :rank r}))", "user": "51bd255ce4b0df1216cefd94"}, {"problem": 128, "code": "(fn number128 [[s r]]\n  (let [suits {\\S :spade \\D :diamond \\C :club \\H :heart}\n        faces {\\T 10 \\J 11 \\Q 12 \\K 13 \\A 14}\n        suit (suits s)\n        rank (- (faces r (read-string (str r))) 2)]\n    {:suit suit :rank rank}))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 128, "code": "(fn [s]\n    (let [suit-char (first s)\n          suit (cond \n                  (= suit-char \\D) :diamond\n                  (= suit-char \\H) :heart\n                  (= suit-char \\C) :club\n                  (= suit-char \\S) :spade)\n          rank-val (Character/getNumericValue (second s))\n          rank  (cond\n                    (< rank-val 10) (- rank-val 2) \n                    (= rank-val (Character/getNumericValue \\T)) 8\n                    (= rank-val (Character/getNumericValue \\J)) 9\n                    (= rank-val (Character/getNumericValue \\Q)) 10\n                    (= rank-val (Character/getNumericValue \\K)) 11\n                    (= rank-val (Character/getNumericValue \\A)) 12)]\n        {:suit suit :rank rank}))", "user": "54fdaeace4b07d26eda61d39"}, {"problem": 128, "code": "(fn [card]\n  (let [xs (vec card)\n        suit (first xs)\n        num (last xs)]\n    {:suit ({\\D :diamond,\n             \\H :heart,\n             \\C :club,\n             \\S :spade} suit),\n     :rank ({\\2 0,\n             \\3 1,\n             \\4 2,\n             \\5 3,\n             \\6 4,\n             \\7 5,\n             \\8 6,\n             \\9 7,\n             \\T 8,\n             \\J 9,\n             \\Q 10,\n             \\K 11,\n             \\A 12} num)}\n  ))", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 128, "code": "(fn what-card\n  [a-string]\n  {:suit ({\\S :spade \\H :heart \\C :club \\D :diamond} (first (vec a-string)))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last (vec a-string)))})", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 128, "code": "(fn [x](\nlet [sp (fn [x] (rest (clojure.string/split x #\"\"))), sn (fn [x](first (sp x))), rn (fn [x](last (sp x))), \ns (fn [x] (case x \"D\" :diamond, \"S\" :spade, \"C\" :club, \"H\" :heart)), \nr (fn [x] (case x \"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12))]\n(assoc (assoc '{} :rank (r (rn x))) :suit (s (sn x)))\n))", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 128, "code": "(fn [[s r]]\n    {:suit\n     ({\\H :heart \\D :diamond \\C :club \\S :spade} s)\n     :rank\n     (.indexOf \"23456789TJQKA\" (str r))})", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 128, "code": "(fn [s]\n  (let [suits (zipmap \"DCHS\" [:diamond :club :heart :spade])\n        ranks (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (suits (first s))\n     :rank (ranks (second s))}))", "user": "55495318e4b0a04f79299566"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank (if-let [R (get {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} r)] R (- (Character/getNumericValue r) 2))})", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 128, "code": "(fn recognize-card [[suit rank]]\n  (let [suit-map { \\C :club, \\D :diamond, \\H :heart, \\S :spade }\n        face-value { \\A 12, \\K 11, \\Q 10, \\J 9, \\T 8}\n        rank-ordinal (- (- (int rank) (int \\0)) 2)\n        value (if (some #(= rank-ordinal %) (range 8))\n                rank-ordinal\n                (face-value rank)) ]\n    {:suit (suit-map suit) :rank value}))", "user": "4f577f25e4b0a7574ea71839"}, {"problem": 128, "code": "(fn card [c]\n  (let [s2S {\\S :spade\n        \\H :heart\n        \\C :club\n        \\D :diamond}\n        \n        r2R {\\2 0\n        \\3 1\n        \\4 2\n        \\5 3\n        \\6 4\n        \\7 5\n        \\8 6\n        \\9 7\n        \\T 8\n        \\J 9\n        \\Q 10\n        \\K 11\n        \\A 12}\n        s (first c)\n        r (second c)]\n    {:suit (s2S s) :rank (r2R r)}))", "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"problem": 128, "code": "(fn [[s r]]\n  {:rank (condp = r\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12\n           (-> r int (- 50)))\n   :suit (condp = s\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           :spade)})", "user": "5499e23de4b03163384f4706"}, {"problem": 128, "code": "(fn [s]\n  (let [[st rk] (map str s)\n        ranks (concat (map str (range 2 10)) '(\"T\" \"J\" \"Q\" \"K\" \"A\"))]\n    {:suit ({ \"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club } st)\n     :rank (.indexOf ranks rk)}))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 128, "code": "#(zipmap '(:suit :rank)\n         (map {\n              \\D :diamond\n              \\H :heart\n              \\C :club\n              \\S :spade\n\t\t\t  \\2 0\n              \\3 1\n              \\4 2\n              \\5 3\n              \\6 4\n              \\7 5\n              \\8 6\n              \\9 7\n              \\T 8\n              \\J 9\n              \\Q 10\n              \\K 11\n              \\A 12} %))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 128, "code": "(fn [ss]\n  (let [s (first ss) r (second ss)\n        suits {\\S :spade \\H :heart \\C :club \\D :diamond}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits s) :rank (rank r)}))", "user": "554edb85e4b00713264bd99a"}, {"problem": 128, "code": "(let [suits {\\S :spade \\D :diamond \\H :heart \\C :club}\n       ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (fn [[s r]]\n      {:suit (suits s)\n       :rank (get ranks r)}))", "user": "51672d15e4b079759a74a5e7"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        high-ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        rank (if (re-find #\"\\d\" (str (second s)))\n                  (- (read-string (str (second s))) 2)\n                  (high-ranks (second s)))]\n    {:suit (suits (first s)) :rank rank}))", "user": "555521a5e4b0deb715856e12"}, {"problem": 128, "code": "(let [ ranks (zipmap \"23456789TJQKA\" (range 13)) suites (zipmap \"SDCH\" [:spade :diamond :club :heart] ) ]\n  (fn [s] { :suit (suites (first s)) :rank (ranks (second s)) }))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 128, "code": "(fn decode [card-str]\n  (let [cs (seq card-str)\n        suit (first cs)\n        rank (second cs)]\n    {:suit (get \n            {\\D :diamond, \\H :heart,\n             \\C :club, \\S :spade}\n            suit)\n     :rank (get \n            {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8,\n             \\J 9, \\Q 10, \\K 11, \\A 12}\n            rank)}))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 128, "code": "(fn \n    [card]\n    {:suit (case (first card)\n         \\S :spade\n         \\H :heart\n         \\D :diamond\n         \\C :club)\n    :rank (case (last card)\n        \\T 8\n        \\J 9\n        \\Q 10\n        \\K 11\n        \\A 12\n        (- (int (last card)) 50))})", "user": "541096bde4b01498b1a719b2"}, {"problem": 128, "code": "(fn [s]\n   (let [suits (hash-map \\D :diamond \\H :heart \\S :spade \\C :club)\n         ranks (hash-map  \\2 0  \\3 1 \\4 2  \\5 3 \\6 4  \\7 5  \\8 6  \\9 7  \\T 8  \\J 9  \\Q 10  \\K 11 \\A 12)\n         suit-key (first (seq s))\n         rank-key  (last (seq s))\n         ]\n     {:suit (suits suit-key) :rank (ranks rank-key)} ))", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 128, "code": "(fn [a]\n  (let [suits {\"C\" :club\n        \"D\" :diamond\n        \"H\" :heart\n        \"S\" :spade}\n        ranks {\"2\" 0\n        \"3\" 1\n        \"4\" 2\n        \"5\" 3\n        \"6\" 4\n        \"7\" 5\n        \"8\" 6\n        \"9\" 7\n        \"T\" 8\n        \"J\" 9\n        \"Q\" 10\n        \"K\" 11\n        \"A\" 12}]\n    {:suit (get suits (str (first a)))\n    :rank (get ranks (str (last a)))}))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 128, "code": "(fn sxs [pair]\n  {:rank ({\\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12} (second pair))\n\n   :suit ({\\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade} (first pair))})", "user": "5486e317e4b0e286459a11c0"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s) \n   :rank (if (> 58 (int r)) (- (int r) 50) ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r))})", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 128, "code": "(fn [s]\n  (let [d {\\H :heart \\D :diamond \\S :spade \\C :club\n        \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8\\J 9 \\Q 10 \\K 11 \\A 12 }]\n    {:suit (d (first s)) :rank (d (first (rest s)))}))", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 128, "code": "(fn [card]\n  (let [suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit-map (first card))\n     :rank (rank-map (second card))}))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 128, "code": "(fn [c]\n  (let [s (str (first c))\n        r (str (second c))]\n    {\n      \t:suit (condp = s\n                \"S\" :spade\n                \"H\" :heart\n                \"D\" :diamond\n                \"C\" :club\n             \t)\n    \t:rank (condp = r\n                \"T\"  8\n                \"J\"  9\n                \"Q\" 10\n                \"K\" 11\n                \"A\" 12\n                (- (read-string r) 2)\n                )\n    }\n    )\n  )", "user": "54c779bee4b045293a27f63b"}, {"problem": 128, "code": "(let [suit-map {\\S :spade \\H :heart \\D :diamond \\C :club}\n      rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n                \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n  (fn [s]\n    {:suit (suit-map (first s))\n     :rank (rank-map (last s))}))", "user": "5553b924e4b0deb715856e06"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suit (fn [s]\n               (case s\n                 \\S :spade\n                 \\D :diamond\n                 \\C :club\n                 \\H :heart))\n        rank (fn [r]\n               (case r\n                 (\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9) (- (int r) 2 (int \\0))\n                 \\T 8\n                 \\J 9\n                 \\Q 10\n                 \\K 11\n                 \\A 12))]\n    {:suit (suit s) :rank (rank r)}))", "user": "4fdb881ee4b05e33b9224f5e"}, {"problem": 128, "code": "(fn [x]\n  (let [[suit rank] (map str (vec x))\n        suitmap {\"D\" :diamond\n        \t\t \"S\" :spade\n                 \"H\" :heart\n                 \"C\" :club}\n        rankmap {\"2\" 0 \"3\" 1\n                 \"4\" 2 \"5\" 3\n                 \"6\" 4 \"7\" 5\n                 \"8\" 6 \"9\" 7\n                 \"T\" 8 \"J\" 9\n                 \"Q\" 10 \"K\" 11\n                 \"A\" 12} ]\n    { :suit (suitmap suit)\n      :rank  (rankmap rank)\n    }))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 128, "code": "(fn [card-str] (let [suit (keyword (str (first card-str)))\n                      rank (keyword (str (last card-str)))]\n                  (-> {}\n                      (assoc :suit (suit {:D :diamond\n                                         :H :heart\n                                         :S :spade\n                                         :C :club}))\n                      (assoc :rank (rank {\n                                         :2 0\n                                         :3 1\n                                         :4 2\n                                         :5 3\n                                         :6 4\n                                         :7 5\n                                         :8 6\n                                         :9 7\n                                         :T 8\n                                         :J 9\n                                         :Q 10\n                                         :K 11\n                                         :A 12\n                                         })))))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits {\\D :diamond \\S :spade \\H :heart \\C :club}\n        ranks (zipmap (map char (conj (vec (range (int \\2) (inc (int \\9)))) \\T \\J \\Q \\K \\A)) (range 13))]\n    {:suit (get suits suit) :rank (get ranks rank)}))", "user": "4f16d3fd535d64f60314644e"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\C :club, \\D :diamond, \\H :heart, \\S :spade} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 128, "code": "(fn suit-and-rank [card]\n  (let [suite-char (get card 0)\n        get-suite (fn [suit-char] (cond\n                   (= suit-char \\D) :diamond\n                   (= suit-char \\H) :heart\n                   (= suit-char \\C) :club\n                   (= suit-char \\D) :spade))\n        rank-char (get card 1)\n        get-rank (fn [rank-char]\n                   (cond\n                     (= rank-char \\T) 8\n                     (= rank-char \\J) 9\n                     (= rank-char \\Q) 10\n                     (= rank-char \\K) 11\n                     (= rank-char \\A) 12\n                     :else (- (Integer/parseInt (str rank-char)) 2)))]\n    {:suit (get-suite suite-char) :rank (get-rank rank-char)}\n  ))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 128, "code": "(fn card-info [s]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n               \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        [suit rank] s]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "54c3747de4b045293a27f60e"}, {"problem": 128, "code": "(fn [cardstr]\n    (let [suitchar (first (seq cardstr))\n          rankchar (second (seq cardstr))]\n      {:suit ({\\C :club \\D :diamond \\H :heart \\S :spade} suitchar) \n       :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] rankchar)}))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 128, "code": "(fn [s]\n  (let [[suit rank] s]\n    {:suit (cond (= suit \\D) :diamond\n                 (= suit \\H) :heart\n                 (= suit \\C) :club\n                 (= suit \\S) :spade)\n     :rank (cond (= rank \\2) 0\n                 (= rank \\3) 1\n                 (= rank \\4) 2\n                 (= rank \\5) 3\n                 (= rank \\6) 4\n                 (= rank \\7) 5\n                 (= rank \\8) 6\n                 (= rank \\9) 7\n                 (= rank \\T) 8\n                 (= rank \\J) 9\n                 (= rank \\Q) 10\n                 (= rank \\K) 11\n                 (= rank \\A) 12)}))", "user": "55586905e4b0deb715856e2b"}, {"problem": 128, "code": "(fn [[suit rank]] \n  (let [ranks (zipmap (str \"23456789TJQKA\") (range)) \n        suits {\\H :heart \\D :diamond \\C :club \\S :spade}]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 128, "code": "#(hash-map \n  :suit \n  ({\\D :diamond \\H :heart \\C :club \\S :spade} (first %)) \n  :rank \n  ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %)))", "user": "5280a1ece4b0757a1b171407"}, {"problem": 128, "code": "#(let [suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first %))\n       rank (if-let [r ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %))] r (-> % second str read-string (- 2)))]\n   {:suit suit :rank rank})", "user": "554b8572e4b0a04f79299589"}, {"problem": 128, "code": "(fn [card]\n  (let [\n    resolve-suit (fn [c1]\n      (case c1\n        \\S :spade\n        \\H :heart\n        \\D :diamond\n        \\C :club)\n    )\n    resolve-rank (fn [c2]\n      (case c2\n        \\2 0\n        \\3 1\n        \\4 2\n        \\5 3\n        \\6 4\n        \\7 5\n        \\8 6\n        \\9 7\n        \\T 8\n        \\J 9\n        \\Q 10\n        \\K 11\n        \\A 12)\n    )]\n    {\n      :suit (resolve-suit (.charAt card 0))\n      :rank (resolve-rank (.charAt card 1))\n    }\n  )\n)", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 128, "code": "(fn [card]\n  (let [ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n        suites {\\S :spades \\H :heart \\D :diamond \\C :club}\n        [s r] card]\n    {:suit (get suites s), :rank (.indexOf ranks r)}))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 128, "code": "#(let[ suite (fn [c]\n              (cond\n               (= c \\D) :diamond\n               (= c \\H) :heart\n               (= c \\C) :club\n               :else :spade))\n        rank (fn [c]\n              (cond\n               (= c \\T) 8\n               (= c \\J) 9\n               (= c \\Q) 10\n               (= c \\K) 11\n               (= c \\A) 12\n               :else (- (int c) (int \\2))))\n       s (first %)\n       r (second %)]\n   (hash-map :suit (suite s), :rank (rank r)))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 128, "code": "(fn read-card\n    [[suit rank]]\n    (let [suit-dict {\\H :heart, \\D :diamond, \\C :club, \\S :spade},\n          rank-dict (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n                            (range 13))]\n      {:suit (suit-dict suit), :rank (rank-dict rank)}))", "user": "4fc6305de4b0ee37620e180b"}, {"problem": 128, "code": "(fn [a]\n  (let [s {\\D :diamond \\H :heart \\C :club \\S :spade}\n         r {\\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11}]\n  \t\t{:suit (s (first (seq a))) :rank (r (last (seq a)))}))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 128, "code": "(fn [code]\n  (let [[suit rank] (seq code)\n        to-suit {\\D :diamond \\H :heart \\C :club \\S :space}\n        to-rank #({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} % (- (int %) (int \\0) 2))]\n    {:suit (to-suit suit) :rank (to-rank rank)}))", "user": "55702081e4b09a3098a52529"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-map {\\H :heart, \\C :club,  \\S :spade, \\D :diamond}\n        rank-map {\\A 12, \\K 11, \\Q 10, \\J 9, \\T 8}\n        rank (second s)]\n    {:suit (suit-map (first s)) :rank (or (rank-map rank) (- (int rank) 50))}))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 128, "code": "(fn  [s] \n  (let [suit {\\S :spade \\D :diamond \\H :heart \\C :club}\n        rank (into {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} (map #(vector (char (+ % (int \\0))) (- % 2)) (range 2 10))) ]\n    {:suit (suit (first s)) :rank (rank (second s))}\n    ))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 128, "code": "(fn cards [xs] (hash-map :rank (get {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (subs xs 1)) \n           :suit (get {\"D\" :diamond \"S\" :spade \"H\" :heart \"C\" :club} (subs xs 0 1))))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 128, "code": "(fn [[a b]]\n             {:suit ({ \\S :spade \\H :heart \\D :diamond \\C :club} a) \n              :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} b)}\n             )", "user": "524f3e6de4b0541d1855b805"}, {"problem": 128, "code": "(fn [card]\n  { :suit\n    ((zipmap \"DHSC\" [:diamond :heart :spade :club]) (first card))\n    :rank\n    ((zipmap \"23456789TJQKA\" (range 13)) (second card))})", "user": "53065acbe4b02e8216869792"}, {"problem": 128, "code": "(fn [sr] {:suit ({\\D :diamond \\S :spade \\C :club \\H :heart} (first sr))\n          :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second sr))})", "user": "556a3243e4b09a3098a524de"}, {"problem": 128, "code": "(fn card-map [symbol]\n  (let [rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}]\n    {:suit (suit-map (first symbol)) :rank (rank-map (last symbol))}))", "user": "533f09e1e4b085b17e897d9a"}, {"problem": 128, "code": "(fn [[suit rank]]\r\n  (let [\r\n      suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\r\n      ranks {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\r\n    {:suit (suits suit)\r\n     :rank (get ranks rank (- (int rank) 50))}))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [ranks (zipmap (seq \"23456789TJQKA\") (range))\n        suits {\\C :club, \\D :diamond, \\S :spade, \\H :heart}]\n    (assoc {} \n      :rank (ranks r)\n      :suit (suits s))))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 128, "code": "(letfn [(get-suit [suit] (case suit\n                               \\D :diamond\n                               \\C :club\n                               \\H :heart\n                               \\S :spade))\n        (get-rank [rank] (cond\n                           (<= (int \\2) (int rank) (int \\9)) (- (int rank) 50)\n                           (= rank \\T) 8\n                           (= rank \\J) 9\n                           (= rank \\Q) 10\n                           (= rank \\K) 11\n                           (= rank \\A) 12))]\n (fn rec-card [[suit-char rank-char]]\n  {:suit (get-suit suit-char)\n   :rank (get-rank rank-char)}))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 128, "code": "(fn [card-text]\n  (let [suits {\\C :club,\n        \t   \\D :diamond,\n               \\H :heart,\n               \\S :spade}\n        ranks {\\T 8,\n               \\J 9,\n               \\Q 10,\n               \\K 11,\n               \\A 12}\n        card {:suit (suits (first card-text))\n              :rank (ranks (second card-text))}]\n    (if (:rank card)\n      card\n      (assoc card :rank (-> card-text\n                            second\n                            str\n                            read-string\n                            (- 2))))))", "user": "5579bc24e4b05c286339e098"}, {"problem": 128, "code": "(fn [[S R]]\n  {:suit\n   ({\\D :diamond \\H :heart \\C :club \\S :spade} S)\n   :rank\n   (.indexOf (seq \"23456789TJQKA\") R)})", "user": "545ddac3e4b01be26fd74676"}, {"problem": 128, "code": "(fn card-suit [str-in]\n  (letfn [(suit [ch] (case ch\n                       \\D :diamond\n                       \\H :heart\n                       \\C :club\n                       \\S :spade))\n          (rank [ch] (let [num-range (set (range (int \\2) (inc (int \\9))))]\n                       (if (num-range (int ch))\n                         (- (int ch) 50)\n                         (case ch\n                           \\A 12\n                           \\K 11\n                           \\Q 10\n                           \\J 9\n                           \\T 8))))]\n    {:suit (suit (first str-in))\n     :rank (rank (second str-in))}))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }\n        i (seq s)]\n    {:suit (suits (first i)) :rank (ranks (last i)) }))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 128, "code": "(fn [card]\n  (let [chars (into [] card)\n        suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks (apply assoc {} (interleave (into [] \"23456789TJQKA\") (range 14)))\n        suit  (suits (first chars))\n        rank  (ranks (last chars))]\n    {:suit suit :rank rank}))", "user": "52ba447ee4b07a9af57922ce"}, {"problem": 128, "code": "(fn recongnize-playing-cards\n  [card]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first card))\n   :rank ((merge\n           (zipmap (map char (range (int \\2) (inc (int \\9)))) (range 0 10))\n           {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}) (second card))})", "user": "506f0968e4b09350ab4199f5"}, {"problem": 128, "code": "(fn card [x]\n    (let [[suit rank] (seq x)\n          suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n          ranks (zipmap (apply conj (into [] \n                                          (seq \n                                            (clojure.string/join \n                                              (range 2 10))))\n                               [\\T \\J \\Q \\K \\A])\n                        (range 0 13)\n                        )\n          ]\n\n      {:suit (suits suit) :rank (ranks rank)}))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 128, "code": "#(let [cards { \\H :heart \\S :spade \\C :club \\D :diamond \n               \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \n               \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n    {:suit (cards (first %)) :rank (cards (second %))})", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 128, "code": "(fn [[suit rank]] \t{:suit ({\\C :club, \\D :diamond, \\H :heart, \\S :spade} suit), \n  \t\t\t\t\t :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} rank)})", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 128, "code": "(fn [st]\n  (let [m {\\D :diamond, \\S :spade, \\C :club, \\H :heart, \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (get m (first st)), :rank (get m (second st))}))", "user": "558378dce4b05c286339e115"}, {"problem": 128, "code": "(fn recog-play-card\n  [st]\n  (let [suit {\\D :diamond \\C :club \\H :heart \\S :spades}\n        r (apply hash-map (mapcat list (concat (map char (range 50 58))  [\\T \\J \\Q \\K \\A] ) (range 0 13)))]\n    {:suit (suit (first st)) :rank (r (second st))}))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 128, "code": "(fn [card]\n   (let [[suit rank] (into [] card)\n         suits {\\D :diamond \\S :spade \\H :heart \\C :club}\n         ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n     {:suit (get suits suit) :rank (get ranks rank)})\n   )", "user": "530b8580e4b02e82168697cc"}, {"problem": 128, "code": "(fn [[s r]] {:suit ({:S :spade\n                     :H :heart\n                     :D :diamond\n                     :C :club} (keyword (str s)))\n  \t\t\t :rank (.indexOf \"23456789TJQKA\" (str r))})", "user": "4f070ce6535dcb61093f6c1e"}, {"problem": 128, "code": "(fn cards [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 128, "code": "(let [table- {\\S :spade \\H :heart \\D :diamond \\C :club \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}                                                       \n      decode-card (fn [x] (apply hash-map (interleave '(:suit :rank) (map table- x))))]                                                                 \n        decode-card)", "user": "558b50d5e4b027778923762b"}, {"problem": 128, "code": "(fn parse [[s r]] \n  (let [suits {\\S :spade, \\D :diamond \\H :heart \\C :club}\n        ranks \"23456789TJQKA\"]\n    {:suit (suits s), :rank (.indexOf ranks (str r))}))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 128, "code": "(fn [[s r]]\n   {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n    :rank ({\\2 0\n            \\3 1\n            \\4 2\n            \\5 3\n            \\6 4 \n            \\7 5\n            \\8 6\n            \\9 7 \n            \\T 8\n            \\J 9\n            \\Q 10 \n            \\K 11\n            \\A 12} r)})", "user": "55895eade4b059ccff29b202"}, {"problem": 128, "code": "(fn [[s r]]\n    {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n     :rank (.indexOf (seq \"23456789TJQKA\") r)}\n    )", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 128, "code": "(fn [i]\n  (let [[s r] i\n        suits {\\D :diamond \\H :heart \\C :club \\S :spade},\n        ranks (seq \"23456789TJQKA\")]\n    {:suit (suits s) :rank (.indexOf ranks r)}))", "user": "5590e55de4b0277789237676"}, {"problem": 128, "code": "(fn mytest\n\t[mystr]\n\n\n\t( let [\tconsMapD (fn [c]\n\t\t\t\t\t\t\t(cond\n\t\t\t\t\t\t\t\t(= c \"S\") {:suit :spades}\n\t\t\t\t\t\t\t\t(= c \"D\") {:suit :diamond}\n\t\t\t\t\t\t\t\t(= c \"H\") {:suit :heart}\n\t\t\t\t\t\t\t\t(= c \"C\") {:suit :club}\n\n\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\n\t\t\tconsMapR (fn [c]\n\t\t\t\t\t\t\t(cond\n\t\t\t\t\t\t\t\t(= c \"A\") {:rank 12}\n\t\t\t\t\t\t\t\t(= c \"K\") {:rank 11}\n\t\t\t\t\t\t\t\t(= c \"Q\") {:rank 10}\n\t\t\t\t\t\t\t\t(= c \"J\") {:rank 9}\n\t\t\t\t\t\t\t\t(= c \"T\") {:rank 8}\n\t\t\t\t\t\t\t\t(and (>= (Integer/parseInt c) 0) (<= (Integer/parseInt c) 9)) {:rank (- (Integer/parseInt c) 2) }\n\n\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\n\t\t\ta (map str (seq mystr))\n\n\t\t\tc (first  a)\n\n\t\t\tn (second a)\n\n\t\t  ]\n\n\t\t  (merge (consMapD c) (consMapR n))\n\n\t\t)\n\n\t)", "user": "55897fe2e4b059ccff29b205"}, {"problem": 128, "code": "(fn [[s r]] { \n             :suit ({\\D :diamond \\S :spade \\H :heart \\C :club} s) \n   :rank (.indexOf (vec \"23456789TJQKA\") r)})", "user": "523630eee4b05f3be1c7c8e8"}, {"problem": 128, "code": "(fn [s]\n          (let [suit (first s)\n                rank (second s)]\n            {:suit (case suit (\\D) :diamond (\\H) :heart (\\S) :spade (\\C) :club)\n             :rank (case rank (\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9) (- (read-string (str rank)) 2)\n                              (\\T) 8 (\\J) 9 (\\Q) 10 (\\K) 11 (\\A) 12)}))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 128, "code": "(fn card-info [abv]\n  (let [suits {\\S :spade\n               \\H :heart\n               \\D :diamond\n               \\C :club}\n        base-ranks (zipmap (map char (range 50 58))\n                           (range 8))\n        ranks (assoc base-ranks \\T 8\n                                \\J 9\n                                \\Q 10\n                                \\K 11\n                                \\A 12)\n        suit (suits (first abv))\n        rank (ranks (last abv))]\n    {:suit suit\n     :rank rank}))", "user": "52bdd135e4b07a9af579230a"}, {"problem": 128, "code": "(fn [c]\n  (loop [r (seq c)\n         a {}]\n    (if (empty? r)\n      a\n      (let [x (condp = (first r)\n                \\S [:suit :spade]\n                \\H [:suit :heart]\n                \\D [:suit :diamond]\n                \\C [:suit :club]\n                \\A [:rank 12]\n                \\K [:rank 11]\n                \\Q [:rank 10]\n                \\J [:rank 9]\n                \\T [:rank 8]\n                [:rank (- (int (first r)) 50)])]\n        (recur (next r) (conj a x))))))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 128, "code": "(fn [x]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first x))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second x))})", "user": "5585f088e4b001b0851d7513"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 128, "code": "(fn [x] (let [[suit t] x]\n     {:suit\n      ({\\S :spade \\D :diamond \\C :club \\H :heart} suit)\n      :rank\n      (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} t)\n          (- (read-string (str t)) 2))}))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 128, "code": "(fn [c] (let [s (-> c first str)\n              r (-> c second str)\n              ranks (list \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\")\n              suits {\"S\" :spade \"C\" :club \"D\" :diamond \"H\" :heart}\n              suit (get suits s)\n              rank (.indexOf ranks r)]\n          (hash-map :suit suit :rank rank)))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "558f4fbae4b0277789237661"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ((zipmap \"SHDC\" [:spade :heart :diamond :club]) s),\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\H :heart \\C :club \\D :diamond \\S :spade}\n        ranks (zipmap (concat (seq (apply str (range 2 10))) [\\T \\J \\Q \\K \\A]) (range))]\n    {:suit (suits s) :rank (ranks r)}))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 128, "code": "(fn [s] \n  (assoc {}\n    :suit ({\\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :spade} (first s))\n    :rank ({\\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12\n            \\2 0\n            \\3 1\n            \\4 2\n            \\5 3\n            \\6 4\n            \\7 5\n            \\8 6\n            \\9 7} (last s))))", "user": "52f53589e4b05e3f0be25f2c"}, {"problem": 128, "code": "(fn [card]\n  (let [suit-map {\"S\" :spade \"D\" :diamond \"H\" :heart \"C\" :club}\n        rank-map {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n    {:suit (get suit-map (subs card 0 1))\n    :rank (get rank-map (subs card 1 2))}))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 128, "code": "(fn cards [[s r]]\n  (let [mp {\\D :diamond \\H :heart \\C :club \\S :spade \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (assoc {}\n      :suit (mp s)\n      :rank (let [n (- (int r) 48)]\n              (if (<= n 9) \n                (- n 2)\n                (mp r))))))", "user": "558bb38fe4b0277789237631"}, {"problem": 128, "code": "(fn [x]\n  (let [suit {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        rank (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))\n        [cs cr] x]\n    {:suit (get suit cs) \n     :rank (get rank cr)}))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 128, "code": "(fn [card]\n  (letfn [(rank [rc]\n            (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n                  \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rc))\n          (suit [rs]\n            (get {\\D :diamond \\S :spade \\C :club \\H :heart} rs))]\n    {:suit (suit (nth card 0)) :rank (rank (nth card 1))}))", "user": "5576f299e4b05c286339e077"}, {"problem": 128, "code": "(fn card [in]\n  (let [r {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        s {\\H :heart \\D :diamond \\C :club \\S :spade}]\n    {:suit (s (first in)) :rank (r (last in))}\n))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 128, "code": "(fn [[s r]]\n    {:suit ({\\H :heart \\D :diamond \\C :club \\S :spade} s)\n     :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "555883c5e4b0deb715856e2d"}, {"problem": 128, "code": "(fn [c] (let [suits (for [x [:diamond :heart :club :spade]] [(keyword \"suit\") x]) ranks (for [y (range 13)] [(keyword \"rank\") y]) suit-map (zipmap [\"D\" \"H\" \"C\" \"S\"] (into [] (range 4))) rank-map (zipmap (flatten (merge '(\"T\" \"J\" \"Q\" \"K\" \"A\") (map str (range 2 10)))) (range 13)) char-split (rest (clojure.string/split c #\"\")) first-char-index (suit-map (first char-split)) second-char-index (rank-map (second char-split))] {(first (nth suits first-char-index)) (second (nth suits first-char-index)) (first (nth ranks second-char-index)) (second (nth ranks second-char-index))}))", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 128, "code": "(fn [s] (hash-map :suit (get {\\S :spade \\H :heart \\C :club \\D :diamond} (first s))\n                  :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n                             (second s))))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ({\\D :diamond\n           \\S :spade\n           \\H :heart\n           \\C :club} suit)\n   :rank (case rank\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           (- (Integer. (str rank)) 2))})", "user": "541709b0e4b01498b1a71a06"}, {"problem": 128, "code": "#(let [\n       suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first %))\n       rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 } (second %)) (- (read-string (str (second %))) 2))\n      ]\n   {:suit suit :rank rank}\n)", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 128, "code": "; rank\n; 2 3 4 5 6 7 8 9 T J Q  K  A\n; 0 1 2 3 4 5 6 7 8 9 10 11 12\n; card\n; spades, hearts, diamonds, clubs \n; S       H       D         C\n(fn [tc]\n  (let [data {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12 :S :spade :H :heart :D :diamond :C :club}\n        ]\n    (into {} (map (fn [a b] [a (data (keyword (str b)))]) [:suit :rank] tc))\n    )\n  \n  )", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 128, "code": "(fn [[s r]] \n  {:suit ({\\S :spade \\H :heart \\C :club \\D :diamond} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})\n\n#_(fn [p] \n  (let [ms {\\S :spade \\H :heart \\C :club \\D :diamond}\n\tmr {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}] \n    {:suit (ms (first p)) :rank (mr (last p))}))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 128, "code": "(fn [s]\n  (let [suites {\\D :diamond, \\H :heart, \\C :club, \\S :spade} ranks \"23456789TJQKA\"]\n    (into {} [[:suit (suites (first s))] [:rank (.indexOf ranks (str (second s)))]])))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        ranks (apply hash-map (interleave\n                               (concat (map\n                                        #(read-string (str \"\\\\\" %))\n                                        (range 2 10))\n                                       [\\T \\J \\Q \\K \\A])\n                               (range 0 13)))]\n    {:suit (suits (first s)), :rank (ranks (second s))}))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 128, "code": "#(merge\n   (->> %\n        first\n        (get {\\S :spade \\H :heart \\C :club \\D :diamond})\n        (assoc {} :suit))\n   (->> %\n        second\n        str\n        (.indexOf \"23456789TJQKA\")\n        (assoc {} :rank)))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 128, "code": "(fn [id]\n   (let [\n         [suit rank] (map str (seq id))\n          suit-name ({\"D\" :diamond, \"S\" :spade, \"H\" :heart, \"C\" :club} suit)\n          rank-num ({\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9,\n                     \"Q\" 10, \"K\" 11, \"A\" 12} rank)\n          ]\n     {:suit suit-name :rank rank-num}\n   ))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 128, "code": "(fn [c]\n  (let [r {\\D :diamond \\H :heart \\C :club \\S :spade}\n        s (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (r (first c))\n     :rank (s (last c))}))", "user": "4f85a75ce4b033992c121c48"}, {"problem": 128, "code": "(fn cards [x] (let [trans {\\D :diamond \\H :heart \\C :club \\S :spades \n                           \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0}] \n               {:suit (trans (first x)) :rank (trans (last x))}))", "user": "5576e78de4b05c286339e075"}, {"problem": 128, "code": "(fn [s]\n  {:suit ({\\D :diamond \\S :spade \\C :club \\H :heart} (first s))\n   :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)) (last s))})", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 128, "code": "(fn [s]\n  (let [[_suit _rank] (seq s)\n        suit (case _suit\n               \\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade)\n        rank (case _rank\n               \\A 12\n               \\K 11\n               \\Q 10\n               \\J 9\n               \\T 8\n               (- (int _rank) 50))]\n    {:suit suit :rank rank}))", "user": "50ec409ce4b04edc33777045"}, {"problem": 128, "code": "(fn p128 [card]\n  (let [suit (case (str (first card))\n                    \"D\" :diamond\n                    \"H\" :heart\n                    \"C\" :club\n                    \"S\" :spade\n                    )\n                  \n        rank (case (str (last card))\n               \"2\" 0\n               \"3\" 1\n               \"4\" 2\n               \"5\" 3\n               \"6\" 4\n               \"7\" 5\n               \"8\" 6\n               \"9\" 7\n               \"T\" 8\n               \"J\" 9\n               \"Q\" 10\n               \"K\" 11\n               \"A\" 12\n               )]\n    {:suit suit :rank rank}\n    ))", "user": "5400e918e4b0de5c41848619"}, {"problem": 128, "code": "(fn [[suit rank]]\n   {:suit\n    (condp = suit\n      \\D :diamond\n      \\H :heart\n      \\C :club\n      \\S :spades)\n    :rank\n    (condp = rank\n      \\T 8\n      \\J 9\n      \\Q 10\n      \\K 11\n      \\A 12\n      (- (Integer. (str rank)) 2))})", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 128, "code": "#(let [suit-map {\\S :spade \\H :heart \\D :diamond \\C :club}\n       rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n       code (seq %)]\n   {:suit (get suit-map (first code))\n    :rank (get rank-map (second code))\n   })", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\\H :heart \\D :diamond \\S :spade \\C :club}\n        ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit (suits (first card))\n        rank-raw (second card)\n        rank (or (ranks rank-raw) (-> rank-raw str Integer. (- 2)))]\n    {:suit suit :rank rank}))", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 128, "code": "(fn [[a b]]\n  {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} a)\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8\n              \\J 9 \\Q 10 \\K 11 \\A 12} b)})", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 128, "code": "#(let [suit {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        rank (zipmap \"23456789TJQKA\" (range 13))\n        card %]\n  {:suit (get suit (first card)) :rank (get rank (last card))})", "user": "55bc52f9e4b01b9910ae29f2"}, {"problem": 128, "code": "#(let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n       cards [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n   {:suit (suits (first %)) :rank (.indexOf cards (second %))})", "user": "55868660e4b059ccff29b1d4"}, {"problem": 128, "code": "#(let [r {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0}\n       s {\\C :club \\H :heart \\D :diamond \\S :spade}]\n   (assoc {} :suit (s (first %)) :rank (r (second %))))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 128, "code": "(fn [string]\n   (let [[s r] (map identity string)\n         suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n         ranks  (apply assoc {} (interleave (map identity \"23456789TJQKA\")  (range 13)))]\n         {:suit (suits s) :rank (ranks r)}\n     ))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 128, "code": "(fn playing-card [s]\n   (let [suit {\\S :spade \\D :diamond \\H :heart \\C :club}\n         rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n         card (first s)\n         val (second s)]\n     {:suit (suit card) :rank (rank val)}\n     )\n   )", "user": "54a627bce4b09f271ff37c83"}, {"problem": 128, "code": "(fn [[suit rank]] (assoc (assoc {} :rank (if (< (int rank) 58) (- (int rank) 50) ({\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} rank))) :suit ({\\D :diamond, \\H :heart, \\S :spade, \\C :club} suit)))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\\S :spade \\H :heart \\C :club \\D :diamond}\n        ranks (zipmap \"23456789TJQKA\" (range))]\n    {:suit (suits (first card)) :rank (ranks (second card))}))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 128, "code": "(fn [s] (if (< 1 (count s))\n    {:suit  (case (first s)\n             \\S  :spade\n             \\D  :diamond\n             \\H  :heart\n             \\C  :club\n             :none )\n     :rank  (.indexOf (map (comp first str) '[2 3 4 5 6 7 8 9 T J Q K A]) (second s))\n     }\n    {}\n))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 128, "code": "(fn [s]\n    (let [h {\"D\" :diamond \"H\" :heart \"C\" :club \n    \"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n        (assoc (assoc {} :suit (h (str (first s)))) :rank (h (str (second s))))))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 128, "code": "(fn parseCard [strCard]\n  (let [suit #(cond (= % \\S) :spade\n                    (= % \\D) :diamond\n                    (= % \\C) :club\n                    (= % \\H) :heart)\n        rank #(cond (= % \\A) 12\n                    (= % \\K) 11\n                    (= % \\Q) 10\n                    (= % \\J) 9\n                    (= % \\T) 8\n                    :else (- (int %) (int \\2)))]\n    (hash-map :suit (suit (first strCard)) :rank (rank (second strCard)))))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 128, "code": "(fn [s]\n  (letfn [(suit [c]\n            (case c\n             \\S :spade\n             \\H :heart\n             \\D :diamond\n             \\C :club))\n          (rank [c]\n            (case c\n              \\T 8\n              \\J 9\n              \\Q 10\n              \\K 11\n              \\A 12\n              (- (int c) (int \\2))))]\n    {:suit (suit (first s))\n     :rank (rank (second s))}))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 128, "code": "(fn card [[s r]] (let [ranks {\\2 0,\\3 1, \\4 2,\\5 3,\\6 4,\\7 5,\\8 6,\\9 7,\\T 8,\\J 9,\\Q 10,\\K 11,\\A 12}\n                         suits {\\D :diamond,\\H :heart,\\C :club,\\S :spade}]\n                     {:suit (suits s) :rank (ranks r)}))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 128, "code": "(fn [card]\n  (let [suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit (first card)) :rank (rank (second card))}))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suit {\\D :diamond\n     \t\t  \\H :heart\n        \t  \\C :club\n        \t  \\S :spade}\n        rank (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n    {:suit (suit s) :rank (rank r)}))", "user": "55c652dde4b0e31453f649bd"}, {"problem": 128, "code": "(fn [x]\n  (let [a (str (first x)) b (str (second x))]\n    (-> {}\n        (assoc :suit (cond (= a \"S\") :spade (= a \"D\") :diamond (= a \"C\") :club (= a \"H\") :heart))\n        (assoc :rank (if (integer? (read-string b)) (- (read-string b) 2) (cond (= b \"T\") 8 (= b \"J\") 9 (= b \"Q\") 10 (= b \"K\") 11 (= b \"A\") 12))))))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits {\\H :heart, \\D :diamond, \\S :spade, \\C :club}\n        ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    {:suit (suits suit), :rank (.indexOf ranks rank)}))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 128, "code": "(fn [[suit rank]]\n   {:suit ({\\D :diamond\n            \\H :heart\n            \\C :club\n            \\A :ace} suit)\n    :rank (cond\n            (= rank \\T) 8\n            (= rank \\J) 9\n            (= rank \\Q) 10\n            (= rank \\K) 11\n            (= rank \\A) 12\n            :else (- (Integer/valueOf (str rank)) 2)\n            )})", "user": "51f40975e4b0fca5e8b4822e"}, {"problem": 128, "code": "(fn [s]\n   (let [suits {\"C\" :club, \"D\" :diamond, \"H\" :heart, \"S\" :spade}\n         ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6,\n                \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n         s-chars (seq s)\n         suit-str (str (first s-chars))\n         rank-str (str (second s-chars))]\n     (hash-map :suit (suits suit-str) :rank (ranks rank-str))))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 128, "code": "#(let\n   [[_s _r] %\n    s ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} _s)\n    r ((zipmap \"23456789TJQKA\" (range 13)) _r)]\n  {:suit s :rank r})", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits {\\D :diamond \\S :spade \\H :heart \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 128, "code": "(fn decode-card\n  [card-code]\n  (let [cards-suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        cards-schema ((comp (partial apply hash-map) reverse)\n                        (interleave (range 0 13) \n                                    (concat (map (comp first str) (range 2 10))\n                                            (list \\T \\J \\Q \\K \\A))))\n        card-suit (first card-code)\n        card-rank (second card-code)]\n    {:suit (get cards-suits card-suit) :rank (get cards-schema card-rank)}))", "user": "5553b729e4b0deb715856e05"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\S :spade \\D :diamond \\C :club \\H :heart} s) \n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "4e6a4950535d8ccf87e9febf"}, {"problem": 128, "code": "(fn [x]\n (let [suit (let [s (str (first x))]\n               (cond\n                (= s \"S\") :spade\n                (= s \"H\") :heart\n                (= s \"D\") :diamond\n                (= s \"C\") :club\n               ))\n       rank (let [r (str (last x))]\n               (cond\n                (= r \"2\") 0\n                (= r \"3\") 1\n                (= r \"4\") 2\n                (= r \"5\") 3\n                (= r \"6\") 4\n                (= r \"7\") 5\n                (= r \"8\") 6\n                (= r \"9\") 7\n                (= r \"T\") 8\n                (= r \"J\") 9\n                (= r \"Q\") 10\n                (= r \"K\") 11\n                (= r \"A\") 12\n                ))]\n   {:suit suit :rank rank}))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 128, "code": "#(let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n       ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8  \\J 9 \\Q 10 \\K 11 \\A 12}\n       s (first %)\n       r (second %)]\n   {:suit (suits s) :rank (ranks r)})", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 128, "code": ";without # or fn :))\n(comp (partial apply merge {})\n      (partial map-indexed \n               (juxt (comp [:suit :rank] first list) \n                     (comp (partial get-in [ {\\S :spade, \\D :diamond, \\H :heart, \\C :club} \n                                            (zipmap \"23456789TJQKA\" (range)) ])\n                           list))))\n\n#_(comp (partial apply merge)\n  (juxt (comp (partial hash-map :suit) {\\S :spade, \\D :diamond, \\H :heart, \\C :club} first)\n        (comp (partial hash-map :rank) (zipmap \"23456789TJQKA\" (range)) second)))", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (condp = s\n           \\C :club\n           \\D :diamond\n           \\H :heart\n           \\S :spare\n           :none)\n   :rank (condp = r\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           (- (Integer/parseInt (str r)) 2))})", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 128, "code": "#( hash-map \n   :suit (case (first %) \\H :heart \\C :club \\S :spade \\D :diamond) \n   :rank (case (second %) \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 128, "code": "(fn\n  [sc]\n  (let [suites {\\S :spade \\H :heart \\D :diamond \\C :club}\n        cards (into (zipmap [\\J \\Q \\K \\A] (range 9 13)) {\\T 8})\n        suit (first sc) card (second sc)]\n    {:suit (suites suit) :rank (or (cards card) (- (Integer/parseInt (str card)) 2))}))", "user": "555c6344e4b0b056612e224c"}, {"problem": 128, "code": "(fn [card] (letfn [(map-rank [r] (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r   ))\n                   (map-suit [s] (get {\\D :diamond \\H :heart \\C :club \\S :spade} s))]\n             (assoc {} :suit (map-suit (first (seq card))) :rank (map-rank (last (seq card))))))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank (zipmap \"23456789TJQKA\" (range 13))]\n    (hash-map :suit (suits s) :rank (rank r))))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 128, "code": "(fn [x]\n  (let [ suits {:diamond \\D :heart \\H :club \\C :spade \\S}\n         rsuit (clojure.set/map-invert suits)\n         ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] \n         suit (first x)\n         rank (second x)]\n    (assoc {} \n       :rank (.indexOf ranks rank)\n       :suit (get rsuit suit))))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 128, "code": "(fn [input]\n   (let [suits {\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade}\n         cards (into {} (map-indexed (fn [idx itm] {(str itm) idx}) \"23456789TJQKA\"))\n         [s c] input\n         suit (get suits (str s))\n         card (get cards (str c))]\n     {:suit suit :rank card}))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 128, "code": "(fn [card]\n  (let [ranks {\\H :heart \\C :club \\D :diamond \\S :spade}\n        cards {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get ranks (first card)) :rank (get cards (second card))}))", "user": "559fb147e4b0acc240e314ea"}, {"problem": 128, "code": "(fn [card]\n  (let [\n    suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n    ranks (zipmap '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A) (range))\n    rank (-> card seq last)\n    suit (-> card seq first)]\n    {:suit (get suits suit) :rank (get ranks rank)}))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 128, "code": "#(let [suit {\\S :spades \\H :heart \\D :diamond \\C :club}\n       rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n   (hash-map :suit (suit (first %)) :rank (rank (second %))))\n\n;#(let [dict (zipmap \"SHDC23456789TJQKA\" `(:spade :heart :diamond :club ~@(range)))]\n;   {:suit (dict (first %)) :rank (dict (second %))})", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\\D :diamond\n             \\H :heart\n             \\C :club\n             \\S :spade }\n      ranks {\\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12}\n      to-char (comp first str)\n      ranks (reduce \n              (fn [acc x]\n                (assoc acc (to-char x) (- x 2)))\n              ranks\n              (range 2 10))]\n    {:suit (get suits (first s)) :rank (get ranks (first (rest s)))}))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\S :spade, \\H :heart, \\D :diamond \\C :club}\n        ranks \"23456789TJQKA\"]\n    {:suit (suits s) :rank (.indexOf ranks (int r))}))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 128, "code": "(fn [s]\n                        (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n                              ranks (into {} (map (fn [a b] [a b]) (concat (apply str (range 2 10)) \"TJQKA\") (range 13)))]\n                          {:suit (suits (first s)) :rank (ranks (second s))}))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 128, "code": "(fn [card] (let [\n  suits {\"H\" :heart \"D\" :diamond \"S\" :spade \"C\" :club}\n  ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n  breaks (map str (seq card))\n  suit (first breaks)\n  rank (last breaks)\n  ] {:suit (suits suit) :rank (ranks rank)}))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 128, "code": "(fn [card]\n  (let [\n    suit-dict (zipmap \"SHDC\" '(:spade :heart :diamond :club))\n    rank-dict (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (suit-dict (get card 0)) :rank (rank-dict (get card 1))}\n  )\n)", "user": "51f09f3de4b0274c496158d7"}, {"problem": 128, "code": "(fn p128 [s]\n  (let [stm {\\D :diamond \\S :spade \\C :club \\H :heart}\n        nmm (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (stm (first s)), :rank (nmm (second s))}\n   ))", "user": "54965534e4b0b312c081ff65"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (hash-map\n   :suit ({\\S :spades \\H :heart \\D :diamond \\C :club} suit)\n   :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)) rank)))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 128, "code": "(fn [c]\n   (assoc {}\n     :suit (case (first c)\n        \\D :diamond\n        \\H :heart\n        \\C :club\n        \\S :spade)\n     :rank (case (last c)\n              \\A 12\n              \\K 11\n              \\Q 10\n              \\J 9\n              \\T 8\n              (dec (dec (Integer/parseInt (str (last c))))))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 128, "code": "#(let [s {\\S :spade \\D :diamond \\H :heart \\C :club}\n       r {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n       z (second %)]\n   {:suit (s (first %)) :rank (get r z (- (int z) 50))}\n  )", "user": "55e1d34ae4b050e68259b421"}, {"problem": 128, "code": "(fn to-card [[suit rank]]\n  (let [sym-map {\\D :diamond \\S :spade \\H :heart \\C :club\n                 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n                 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (sym-map suit) :rank (sym-map rank)}))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (hash-map\n   :suit ({\\C :club \\D :diamond \\H :heart \\S :spade} suit)\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)))", "user": "4db6d993535d1e037afb2180"}, {"problem": 128, "code": "(fn decode-card [code]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\A 12 \\K 11 \\Q 10 \\T 10 \\J 9}\n        get-rank (fn [x]\n                   (cond\n                    (Character/isDigit x) (- (Character/getNumericValue x) 2)\n                    (= \\T x) (- (ranks x) 2)\n                    :else (ranks x)))]\n    (-> (assoc {} :suit (suits (first code)))\n        (assoc :rank (get-rank (last code))))))", "user": "534056fce4b085b17e897dac"}, {"problem": 128, "code": "(fn card [x]\n  (let [[suit rank] (seq x)\n        suits {\\S :spades\n               \\H :heart\n               \\D :diamond\n               \\C :club}\n        ranks (merge {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (zipmap \"23456789\" (range)))]\n\n    {:suit (suits suit) :rank (ranks rank)}\n    ))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 128, "code": "(fn [spec]\n  (let [inchars (seq spec)\n        suite-char (first inchars)\n        rank-char (second inchars)\n        suite-for-char (case suite-char \\C :club \\D :diamond \\H :heart \\S :spade)\n        rank-for-nbr (case rank-char \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 (- (int rank-char) 50))]\n    (zipmap [:suit :rank] [suite-for-char rank-for-nbr])))", "user": "554756b8e4b0a04f79299549"}, {"problem": 128, "code": "(fn [s] (let [[a b] (seq s)\n              s (case a\n                  \\D :diamond\n                  \\S :spade\n                  \\H :heart\n                  \\C :club)\n              r (case b\n                  \\2 0\n                  \\3 1\n                  \\4 2\n                  \\5 3\n                  \\6 4\n                  \\7 5\n                  \\8 6\n                  \\9 7\n                  \\T 8\n                  \\J 9\n                  \\Q 10\n                  \\K 11\n                  \\A 12)]\n          {:suit s :rank r}))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 128, "code": "(fn func\n  [& coll]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\T 8 \\J 9 \\Q 10 \\K 11\\A 12}\n        char->suit #(suits %)\n        char->rank (fn [ch]\n                     (let [casted (-> ch str read-string)]\n\t                     (if (number? casted)\n\t                       (-> casted (- 2))\n\t                       (ranks ch))))\n        parse (fn [v]\n                {:suit (char->suit (first v)) :rank (char->rank (second v))})]\n                \n    (let [result (->> coll (map vec) (map parse) (filter (partial every? (complement nil?))))]\n      (if (= 1 (count result))\n        (first result)\n        result))))", "user": "55a62092e4b0acc240e31554"}, {"problem": 128, "code": "(fn [l]\n  (let [fs {\\D :diamond, \\S :spade, \\H :heart, \\C :club}\n        ss (zipmap (concat (range 2 10) (seq \"TJQKA\")) (range 13))\n        f (first l) \n        s (if (get ss (second l)) (second l) (- (int (second l)) (int \\0)))]\n    {:suit (get fs f) :rank (get ss s)}))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 128, "code": "(fn [s] {\n  :suit  (get {\\D :diamond \\S :spade \\H :heart \\C :club} (first s))\n  :rank  (get {\\2 0,  \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (second s))\n  })", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 128, "code": "(fn translate [str]\n   (let [SUIT {\\S :spade\n               \\H :heart\n               \\D :diamond\n               \\C :club}\n         RANK (apply assoc {}\n                (interleave [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n                           (range 13)\n                           ))]\n     (let [strv (seq str)]\n       {:suit (SUIT (first strv)) :rank (RANK (last strv))})\n     ))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 128, "code": "(fn [[suit n]]\n   (let\n     [suitMap {\n               \"S\" :spade\n               \"D\" :diamond\n               \"C\" :club\n               \"H\" :heart\n               }\n      rankMap {\n               \"2\" 0\n               \"3\" 1\n               \"4\" 2\n               \"5\" 3\n               \"6\" 4\n               \"7\" 5\n               \"8\" 6\n               \"9\" 7\n               \"T\" 8\n               \"J\" 9\n               \"Q\" 10\n               \"K\" 11\n               \"A\" 12\n               }\n      ]\n     {:suit (get suitMap (str suit)) :rank (get rankMap (str n))}\n     )\n   )", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank (.indexOf (vec \"23456789TJQKA\") r)})", "user": "54864662e4b0e286459a11b8"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [ranks (zipmap \"23456789TJQKA\" (range))\n        suits {\\H :heart \\D :diamond \\S :spade \\C :club}]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 128, "code": "(fn [[s r]] {\n  :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n  :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 128, "code": "(fn [card]\n  (letfn [(suit [suit] ({\\D :diamond \\S :spade \\H :heart \\C :club} suit))\n          (rank [rank] (let [rank-digit (Character/digit rank 10)]\n                        (if (pos? rank-digit)\n                         (- rank-digit 2)\n                         ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank))))]\n   (hash-map :suit (suit (first card)) :rank (rank (second card)))))", "user": "509a25b7e4b0efbae1fbc0a8"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        cards [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    {:suit (suits (first s)) :rank (.indexOf cards (second s))}))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 128, "code": ";(= {:suit :heart :rank 3} (__ \"H5\")) \n(fn playing-cards [s]\n  (let [m (map (fn [c] (let [v (- (int c) (int \\0))]\n         (cond \n           (= c \\D) :diamond \n           (= c \\C) :club\n           (= c \\H) :heart\n           (= c \\S) :spade\n           (= c \\T) 8\n           (= c \\J) 9\n           (= c \\Q) 10\n           (= c \\K) 11\n           (= c \\A) 12\n           (and (>= v 2)  (< v 10)) (- v 2)\n           :else :error\n           ))) s) ] (hash-map :suit (first m) :rank (last m))\n    \n    ))", "user": "558bdcefe4b0277789237633"}, {"problem": 128, "code": "(fn prob128 [s]\n    (letfn [(suit [c]\n              ({\n                \\D :diamond\n                \\H :heart\n                \\C :club\n                \\S :spade\n                } \n               c)\n              )\n            (rank [c]\n              ({\n                \\2 0\n                \\3 1\n                \\4 2\n                \\5 3\n                \\6 4\n                \\7 5\n                \\8 6\n                \\9 7\n                \\T 8\n                \\J 9\n                \\Q 10\n                \\K 11\n                \\A 12\n                }\n               c\n               )\n              )]\n      (let [v (vec s)\n            suit-char (first v)\n            rank-char (last v)]\n        {:suit (suit suit-char) :rank (rank rank-char)})))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 128, "code": "(fn Judge[s]\n           (let [ color {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spade}\n                  rank (zipmap (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range 13))]\n             {:suit (color (str (first s))) :rank (rank (str (last s)))}\n            ))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 128, "code": "(fn [s]\n        (let [suits {\\S :spade, \\D :diamond, \\C :club, \\H :heart}\n              ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n          {:suit (get suits (first s)), :rank (get ranks (last s))}\n          )\n        )", "user": "55f06183e4b06e875b46ce23"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} suit)\n   :rank ((zipmap \"23456789TJQKA\" (range)) rank)})", "user": "553698fae4b09218d5f44fc0"}, {"problem": 128, "code": "(fn card [x]\n  (let [ssuit (first x)\n        srank (second x)\n        suitmap {\\H :heart \\D :diamond \\S :spade \\C :club}\n        rankmap {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n\n    {:suit (suitmap ssuit) :rank (rankmap srank)}\n\n      )\n  )", "user": "558ee1c9e4b0277789237659"}, {"problem": 128, "code": "#(apply hash-map [:suit ({\\C :club \\D :diamond \\H :heart \\S :spade} (first %))\n                  :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n                          \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %))])", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 128, "code": "(fn [s] (let [sm (hash-map \\D :diamond \\H :heart \\S :spade \\C :club)\n              rm (hash-map \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)]\n          (hash-map :suit (get sm (first s)) :rank (get rm (second s)))))", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 128, "code": "(fn parse-card [[suit rank]]\n  (let [suits {\\D :diamond,\n               \\C :club,\n               \\H :heart,\n               \\S :spade}\n        ranks {\\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12}]\n    {:suit (suits suit)\n     :rank (ranks rank)}))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 128, "code": "(fn [s]\n  (let [suit (case (subs s 0 1)\n               \"S\" :spade\n               \"C\" :club\n               \"D\" :diamond\n               \"H\" :heart)\n        rank (case (subs s 1 2)\n               \"A\" 12\n               \"K\" 11\n               \"Q\" 10\n               \"J\" 9\n               \"T\" 8\n               \"9\" 7\n               \"8\" 6\n               \"7\" 5\n               \"6\" 4\n               \"5\" 3\n               \"4\" 2\n               \"3\" 1\n               \"2\" 0)]\n    {:suit suit :rank rank}))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 128, "code": "(fn [poke]\n  (let [suit ({\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club} (subs poke 0 1))\n        rank ({\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12} (subs poke 1 2))]\n    {:suit suit, :rank rank}))", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 128, "code": "(fn [[s r]]\n  {\n  :suit \n  (condp = s\n    \\S :spade\n    \\H :heart\n    \\D :diamond\n    \\C :club)\n  :rank\n  (condp = r\n    \\A 12\n    \\K 11\n    \\Q 10\n    \\J 9\n    \\T 8\n    (- (Integer/parseInt (str r)) 2))})", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 128, "code": "(fn recognize-card [str]\n  (let [suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank-map [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n        [s r] (seq str)]\n    (hash-map :suit (suit-map s) :rank (.indexOf rank-map r))))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 128, "code": "(fn parse-card [[suit rank]]\n  { :suit ({ \\H :heart \\D :diamond \\S :spade \\C :club } suit)\n   :rank ((zipmap [ \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A ] (range)) rank) })", "user": "55e7d06ee4b050e68259b496"}, {"problem": 128, "code": "(fn describe-card [[suit rank]]\r\n  (let [suit-name   {\\S :spade,   \\H :heart,\r\n                     \\D :diamond, \\C :club}\r\n        rank-number (zipmap \"23456789TJQKA\" (range))]\r\n    {:suit (suit-name suit),\r\n     :rank (rank-number rank)}))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 128, "code": "(fn deck [[s r]]\n   {:suit (get  {\\S :spade \\H :heart \\C :club \\D :diamond} s)\n          :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)}\n   )", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 128, "code": "#(let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n       ranks  (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8  \\9 \\T \\J \\Q \\K \\A] (range 13))]\n  {:suit (-> % first suits)\n   :rank (-> % second ranks)})", "user": "50c6fad1e4b00bb60fe0c52d"}, {"problem": 128, "code": "(fn [s]\n  (let [suits (zipmap \"SCDH\" [:spade :club :diamond :heart])\n        ranks (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (suits (first s)), :rank (ranks (second s))}))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 128, "code": "(fn [c]\n  (let [s (first c) r (second c)]\n    {\n      :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n      :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)\n    }\n  )\n)", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 128, "code": "(fn [card]\n  (let [letter->suit {\\D :diamond\n                      \\H :heart\n                      \\C :club\n                      \\S :spade}\n        letter->rank {\\T 8\n                      \\J 9\n                      \\Q 10\n                      \\K 11\n                      \\A 12}]\n    {:suit (letter->suit (first card))\n     :rank (if (< 49 (int (second card)) 58)\n             (- (int (second card)) 50)\n             (letter->rank (second card)))}))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 128, "code": "(fn [s]\n  (let [suit {\\H :heart \\C :club \\D :diamond \\S :spade}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit (first s)) :rank (rank (second s))}))", "user": "56051095e4b08b23635d3162"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} suit)\n  :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)})", "user": "532ecd44e4b019098a6f8b49"}, {"problem": 128, "code": "(fn [[suit rank]]\n    (let [suit-map (zipmap \"SHDC\" [:spade :heart :diamond :club])\n          ranking-map (zipmap \"23456789TJQKA\" (range))]\n      {:suit (get suit-map suit)\n       :rank (get ranking-map rank)}))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 128, "code": "(fn [s]\n  (let [[suit rank] (seq s)]\n    {:suit (case suit\n             \\S :spade\n             \\H :heart\n             \\D :diamond\n             \\C :club)\n     :rank (case rank\n             \\A 12\n             \\K 11\n             \\Q 10\n             \\J 9\n             \\T 8\n             (- (int rank) 50))}))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 128, "code": "(fn [card]\n    (let [ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8,\n                 \\J 9, \\Q 10, \\K 11, \\A 12}\n          suits {\\S :spade, \\D :diamond, \\H :heart, \\C :club}\n          [s r] (seq card)]\n      (println r)\n      {:suit (suits s) :rank (ranks r)}))", "user": "560e9a2de4b05f002753df52"}, {"problem": 128, "code": "(fn mapCards [s]\n  (let [suitMap {\\S :spade                                                                                                          \n                 \\D :diamond\n                 \\H :heart\n                 \\C :club}\n        rankMap {\\2 0\n                 \\3 1\n                 \\4 2\n                 \\5 3\n                 \\6 4\n                 \\7 5\n                 \\8 6\n                 \\9 7\n                 \\T 8\n                 \\J 9\n                 \\Q 10\n                 \\K 11\n                 \\A 12\n                 }]\n    {:suit (get suitMap (first s)) :rank (get rankMap (last s))}))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 128, "code": "(fn [s] \n  (let [[a b] s]\n  {:suit (case a \\D :diamond \\H :heart \\S :spade \\C :club) \n   :rank (case b \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 (- (Integer/parseInt (.toString b)) 2))}))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 128, "code": "(fn [c] {\n  :suit \n  \t(get {\\D :diamond, \\H :heart, \\C :club, \\S :spade} (first c)) \n  :rank \n  \t(get (zipmap \"23456789TJQKA\" (range)) (last c))\n})", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 128, "code": "(fn card-prs\n  [crd]\n  (let [[suit rank] (into [] crd)]\n    {:suit (get {\\S :spade, \\H :heart, \\D :diamond, \\C :club} suit),\n     :rank (get {\\A 12, \\K 11, \\Q 10, \\J 9, \\T 8, \\9 7, \\8 6, \\7 5\n                 \\6 4, \\5 3, \\4 2, \\3 1, \\2 0} rank)}))", "user": "5545477fe4b0a04f79299531"}, {"problem": 128, "code": "(fn [st]\n        (let [s(first (seq st))\n              c (second (seq st))]\n          (letfn [(suit [s] \n                   (case (str s)\n                      \"S\" :spade\n                      \"D\" :diamond\n                      \"H\" :heart\n                      \"C\" :club))\n                  (rank [c]\n                    (case (str c)\n                      \"2\" 0\n                      \"3\" 1\n                      \"4\" 2\n                      \"5\" 3\n                      \"6\" 4\n                      \"7\" 5\n                      \"8\" 6\n                      \"9\" 7\n                      \"T\" 8\n                      \"J\" 9\n                      \"Q\" 10\n                      \"K\" 11\n                      \"A\" 12))]\n             {:suit (suit s) :rank (rank c)})))", "user": "56011393e4b04bb52996e178"}, {"problem": 128, "code": "(fn [card] \n  (let [ ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n    suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n    [sc rc] card]\n  (hash-map :suit (suits sc) :rank (ranks rc))\n  )\n)", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 128, "code": "(fn[s](\n          apply conj (replace {\n                               \\D {:suit :diamond}, \n                               \\H {:suit :heart},\n                               \\S {:suit :spade},\n                               \\C {:suit :club},\n                               \\2 {:rank 0},\n                               \\3 {:rank 1},\n                               \\4 {:rank 2},\n                               \\5 {:rank 3},\n                               \\6 {:rank 4},\n                               \\7 {:rank 5},\n                               \\8 {:rank 6},\n                               \\9 {:rank 7},\n                               \\T {:rank 8},\n                               \\J {:rank 9},\n                               \\Q {:rank 10},\n                               \\K {:rank 11},\n                               \\A {:rank 12}\n                               } (seq s)\n          \n               )))", "user": "56039843e4b04bb52996e1be"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\S :spade \\D :diamond \\H :heart \\C :club} s)\n  :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 128, "code": "(fn [x]  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first x))\n          :rank ((merge\n                  (->> (for [x (range 2 10)]\n                        [(keyword (str x)) (- x 2)])\n                      flatten\n                      (apply hash-map))\n                  {:T 8 :J 9 :Q 10 :K 11 :A 12 }) (-> x last str keyword))})", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 128, "code": "(fn [x]\n  (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        [s r] (seq x)]\n    {:suit (suits s) :rank (ranks r)}))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 128, "code": "(fn get-card [s]\n\t{:suit ((fn get-suit [c]\n\t\t(case c\n\t\t\t\\S :spade\n\t\t\t\\D :diamond\n\t\t\t\\H :heart\n\t\t\t\\C :club\n\t\t)\n\t) (get s 0)) \n\t:rank ((fn get-rank [c]\n\t\t(case c\n\t\t\t\\2 0\n\t\t\t\\3 1\n\t\t\t\\4 2\n\t\t\t\\5 3\n\t\t\t\\6 4\n\t\t\t\\7 5\n\t\t\t\\8 6\n\t\t\t\\9 7\n\t\t\t\\T 8\n\t\t\t\\J 9\n\t\t\t\\Q 10\n\t\t\t\\K 11\n\t\t\t\\A 12\n\t\t)\n\t) (get s 1))}\n)", "user": "5559b443e4b0deb715856e3c"}, {"problem": 128, "code": "(fn foo [s]\n  (let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7,\n               \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (->> s first suits),\n     :rank (->> s second ranks)}))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 128, "code": "(fn [[s r]]\n    (let [codes {\\D :diamond \\H :heart \\C :club \\S :spade\n                 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8\n                 \\J 9 \\Q 10 \\K 11 \\A 12 }\n          suit (get codes s)\n          rank (get codes r)]\n      {:suit suit :rank rank}))", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ({\\H :heart \\D :diamond \\C :club \\S :spade} suit)\n   :rank (-> ({\\T \"10\" \\J \"11\" \\Q \"12\" \\K \"13\" \\A \"14\"} rank rank) str (Integer/parseInt 10) (- 2))})", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 128, "code": "(fn [x] \n       (let [masti {\"H\" :heart \"D\" :diamond \"S\" :sprade \"C\" :club} rangi {\"A\" 12 \"K\" 11 \"Q\" 10 \"J\" 9 \"T\" 8 \"9\" 7 \"8\" 6 \"7\" 5 \"6\" 4 \"5\" 3 \"4\" 2 \"3\" 1 \"2\" 0}] \n         (assoc {} :suit (get masti (subs x 0 1)) :rank (get rangi (subs x 1)))))", "user": "561be724e4b064ca9f4b168c"}, {"problem": 128, "code": "(fn [[s r]] \n  { :suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} s)\n    :rank ((zipmap \"23456789TJQKA\" (range)) r) })", "user": "4f0f01c0535d0136e6c22329"}, {"problem": 128, "code": "(fn [card-str]\n    (let [suit-map {\\H :heart\n                    \\D :diamond\n                    \\C :club\n                    \\S :spade}\n          rank-map {\\T 8\n                    \\J 9\n                    \\Q 10\n                    \\K 11\n                    \\A 12}\n          [suit-char rank-char] card-str\n          suit (suit-map suit-char)\n          rank (or (rank-map rank-char)\n                   (- (Integer/parseInt (str rank-char)) 2))]\n      {:suit suit\n       :rank rank}))", "user": "516385cee4b055933a9ca02d"}, {"problem": 128, "code": "(fn p [[s r]]\n  {:suit (case s \\D :diamond \\H :heart \\S :spade \\C :club)\n   :rank (case r \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 (- (int r) 50))})", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 128, "code": "(fn card [x]\n  (let [suit ((fn [y] \n      \t\t    (case y\n        \t\t  \\D :diamond\n        \t\t  \\S :spade\n        \t\t  \\H :heart\n        \t\t  \\C :club)) (first x))\n        rank ((fn [z] \n                (case z\n                  \\2 0\n                  \\3 1\n                  \\4 2\n                  \\5 3\n                  \\6 4\n                  \\7 5\n                  \\8 6\n                  \\9 7\n                  \\T 8\n                  \\J 9\n                  \\Q 10\n                  \\K 11\n                  \\A 12)) (last x))]\n    {:suit suit :rank rank}))", "user": "560039cce4b04bb52996e162"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 128, "code": "(fn [[s r]] \n {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s )\n  :rank (.indexOf \"23456789TJQKA\" (str r))}\n  )", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 128, "code": "(fn cards [x]\n  (let [ suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n         ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7 \n                \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} \n        [s r] (seq x)\n        ]\n    (into {} {:suit (suits s) :rank (ranks r)})))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 128, "code": "(fn card [s]\n  (let [xs (seq s)\n        suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first xs))\n        ranks (zipmap '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A) (range))\n        rank (ranks (second xs))]\n    {:suit suit :rank rank}))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 128, "code": "(fn [s]\n(let [\n      suits {\\D :diamond\n\t    \\H :heart\n\t    \\C :club\n\t    \\S :spade}\n      ranks {\\2 0\n      \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6\n      \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }\n      s2 (seq s)\n\t    ]\n  {:suit (suits (first s2)) :rank (ranks (second s2))})\n )", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 128, "code": "#(->> % str (apply (fn [s r] {:suit ({\\C :club \\D :diamond \\H :heart \\S :spade} s) :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r (- (int r) 50))})))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 128, "code": "(fn [c]\n  (let [suits { \\D :diamond \\C :club \\H :heart \\S :spade }\n        faces { \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }\n        ranks (apply merge faces (map #(hash-map (first (str %)) (- % 2)) (range 2 10)))]\n    {:suit (get suits (first c)) :rank (get ranks (second c)) }))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 128, "code": "(fn [x]\n  (let [suits {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n        ranks [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n        a (str (first x))\n        b (str (last x))]\n    {:suit (suits a) :rank (.indexOf ranks b)}))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 128, "code": "(fn [s]\n    (let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n          faces {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n          ranks (->> (range 8) (map #(vector (char (+ % (int \\2))) %))\n                     (reduce #(assoc %1 (first %2) (last %2)) faces))\n          parts (seq s)\n          ]\n      {:suit (-> parts first suits) :rank (-> parts last ranks)}\n      )\n    )", "user": "559a9a3de4b066d22e731f45"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "55f2fdc3e4b06e875b46ce51"}, {"problem": 128, "code": "(fn [[a b]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits a) :rank (ranks b)}))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 128, "code": "(fn [[s r]]\n    (let [rint (int r)]\n      {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n       :rank (cond (<= 49 rint 57) (- rint 50)\n                   :else ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r))}))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 128, "code": "(fn [s] \n  {:suit (get  {\\D :diamond \\H :heart  \\S :spade \\C :club} (first s)) \n  :rank (get  {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))})", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 128, "code": "(fn suitrank [c] \n  (let \n    [suit (fn suit [x] \n            ({\"S\" :spade \"H\" :heart \"C\" :club \"D\" :diamond} x))\n     rank (fn rank [y]\n            ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} y))]\n  {:suit (suit (first (map str (seq c))))\n   :rank (rank (last (map str (seq c))))}))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 128, "code": "#(let [s (get % 0) r (get % 1)\n        suit { \\S :spade \\H :heart \\D :diamond \\C :club }\n        rank { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n    { :suit (suit s) :rank (rank r) }\n  )", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 128, "code": "(fn [[suit-char rank-char]]\n  {:suit ({\\D :diamond, \\C :club, \\H :heart, \\S :spade} suit-char)\n   :rank ({\\A 12, \\K 11, \\Q 10, \\J 9, \\T 8} rank-char\n     (- (Character/digit rank-char 10) 2))})", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 128, "code": "#(let [suit {\"S\" :spade\n                  \"H\" :heart\n                  \"D\" :diamond\n                  \"C\" :club}\n          rank {\"2\" 0\n                   \"3\" 1\n                   \"4\" 2\n                   \"5\" 3\n                   \"6\" 4\n                   \"7\" 5\n                   \"8\" 6\n                   \"9\" 7\n                   \"T\" 8\n                   \"J\" 9\n                   \"Q\" 10\n                   \"K\" 11\n                   \"A\" 12}\n      show (map str (seq %))]\n      {:suit (suit (first show)) :rank (rank (second show))})", "user": "561a1af6e4b053970a773b02"}, {"problem": 128, "code": "(fn [card]\n  (let [suit-lookup {\\C :club\n                     \\D :diamond\n                     \\H :heart\n                     \\S :spade}\n        rank-lookup {\\2 0\n                     \\3 1\n                     \\4 2\n                     \\5 3\n                     \\6 4\n                     \\7 5\n                     \\8 6\n                     \\9 7\n                     \\T 8\n                     \\J 9\n                     \\Q 10\n                     \\K 11\n                     \\A 12}]\n    {:suit (suit-lookup (first card))\n     :rank (rank-lookup (last card))}))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 128, "code": "(fn [card]\n    (letfn [(suit [card]\n              ({\\D :diamond\n                \\H :heart\n                \\C :club\n                \\S :spade} (nth card 0)))\n\n            (rank [card]\n              ({\\2 0\n                \\3 1\n                \\4 2\n                \\5 3\n                \\6 4\n                \\7 5\n                \\8 6\n                \\9 7\n                \\T 8\n                \\J 9\n                \\Q 10\n                \\K 11\n                \\A 12\n                } (nth card 1)))]\n      {:suit (suit card) :rank (rank card)}))", "user": "52485f02e4b05ef8e38e63d3"}, {"problem": 128, "code": "#(let [card % s (first card) v (last card) suit (cond (= s \\D ) :diamond (= s \\S) :spade (= s \\C) :club (= s \\H) :heart) \nval (cond (not (nil? (re-find #\"[0-9]\" card)) ) (dec(dec (Character/digit v 10))) (= v \\T ) 8 (= v \\J) 9 (= v \\Q) 10 (= v \\K) 11 (= v \\A) 12) ] {:suit suit :rank val})", "user": "561cad18e4b064ca9f4b169d"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} suit)\n   :rank ((zipmap \"23456789TJQKA\" (range)) rank)})", "user": "522a01ade4b0590a43906ced"}, {"problem": 128, "code": "(fn\n  [value]\n  (let [values (concat (map (comp char #(+ (int \\0) %)) (range 2 10)) [\\T \\J \\Q \\K \\A])\n        colors {\\S :spade \\C :club \\D :diamond \\H :heart }\n        [vc vv] (map identity value)\n        ]\n    {:suit (colors vc) :rank (.indexOf values vv)}\n    )\n  )", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 128, "code": "(fn [[s r]]  {:suit (get {\\C :club \\D :diamond \\H :heart \\S :spade} s) :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 128, "code": "(fn recognize-card [s]\n  (let [[suit rank] (seq s)]\n    {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} suit) :rank (.indexOf \"23456789TJQKA\" (int rank))}))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 128, "code": "(fn [[s r]] (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n                  ranks (zipmap \"23456789TJQKA\" (range))]\n                {:suit (suits s) :rank (ranks r)}))", "user": "56102f50e4b05f002753df6b"}, {"problem": 128, "code": "(fn get-card [card]\n   (let [suit {\\H :heart\n               \\S :spade\n               \\C :club\n               \\D :diamond}\n         rank {\\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12}\n         c (vec card)]\n     {:suit (suit (c 0))\n      :rank (rank (c 1) (- (int (c 1)) (int \\2)))}))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 128, "code": "(fn recognise-card [c]\n  (let [\n         character-to-suit { \\D :diamond \\H :heart \\C :club \\S :spade }\n         character-to-rank { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        ]\n    (hash-map :suit (character-to-suit (first c)) :rank (character-to-rank (second c)))\n  )\n)", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 128, "code": "#(hash-map\n  :suit ({\\H :heart \\D :diamond \\S :spade \\C :club} (first %))\n  :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %)))", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 128, "code": "(fn [[f s]] \n                  {:suit ({\\D :diamond\n                             \\H :heart\n                             \\C :club\n                             \\S :spades} f)\n                   :rank ({\\Q 10\n                                 \\A 12\n                                 \\K 11\n                                 \\J 9\n                                 \\T 8\n                                 \\9 7\n                                 \\8 6\n                                    \\7 5\n                                    \\6 4\n                                    \\5 3\n                                    \\4 2\n                                    \\3 1\n                                    \\2 0} s)\n                               })", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 128, "code": "(fn parse-card\n  [s]\n  (let [suit (case (first s) \\S :spade \\H :heart \\D :diamond \\C :club)\n        second-char (second s)\n        rank (if (re-matches #\"\\d\" (str second-char))\n               (- (Integer/parseInt (str second-char)) 2)\n               (case second-char\n                 \\T 8\n                 \\J 9\n                 \\Q 10\n                 \\K 11\n                 \\A 12))]\n    {:suit suit, :rank rank}))", "user": "4fc524aae4b081705acca37e"}, {"problem": 128, "code": "(fn [x]\n  (let [suit-map {\\C :club, \\H :heart, \\D :diamond, \\S :spade }\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12 }\n        [suit rank] x]\n    (hash-map :suit (suit-map suit) :rank (rank-map rank)) ))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 128, "code": "(fn parse-card\n  [card-str]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        faces {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n    { :suit (suits (first card-str))\n      :rank (get faces (second card-str)\n                       (- (int (second card-str)) 48 2)) }))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n        faces {\"A\" 12 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11}\n        suit  (str (first card))\n        rank  (str (second card))\n        rank  (if (re-seq #\"\\d+\" rank) (- (Integer/parseInt rank) 2) (get faces rank))]\n    {:suit (get suits suit) :rank rank}))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 128, "code": "(fn [[S R]] \n    (let [ suits { \\H :heart \\S :spade \\D :diamond \\C :club }\n           ranks (zipmap (concat (map #(first (str %)) (range 2 10)) \"TJQKA\") (range))]\n      \n    {:suit (suits S) :rank (ranks R)}  \n      \n  ))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 128, "code": "(fn xlate_card [x]\n      (hash-map :suit (case (nth (seq x) 0) \\D :diamond \\H :heart \\C :club \\S :spade)\n                :rank (case (nth (seq x) 1) \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0)))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s) \n   :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11 \\A 12} r)})", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 128, "code": "(fn [card]\n   (loop [out {}\n         card-seq (map str (seq card))]\n     (if (empty? card-seq)\n       out\n       (recur (case (first card-seq)\n                \"C\" (assoc out :suit :club)\n                \"D\" (assoc out :suit :diamond)\n                \"H\" (assoc out :suit :heart)\n                \"S\" (assoc out :suit :spade)\n                \"2\" (assoc out :rank 0)\n                \"3\" (assoc out :rank 1)\n                \"4\" (assoc out :rank 2)\n                \"5\" (assoc out :rank 3)\n                \"6\" (assoc out :rank 4)\n                \"7\" (assoc out :rank 5)\n                \"8\" (assoc out :rank 6)\n                \"9\" (assoc out :rank 7)\n                \"T\" (assoc out :rank 8)\n                \"J\" (assoc out :rank 9)\n                \"Q\" (assoc out :rank 10)\n                \"K\" (assoc out :rank 11)\n                \"A\" (assoc out :rank 12))\n              (drop 1 card-seq)))))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 128, "code": "(fn card [[suit rank]]\n  (let [cards {\"D\" :diamond\n               \"C\" :club\n               \"S\" :spade\n               \"H\" :heart}\n        ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5,\n        \t   \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}]\n    {:suit (get cards (str suit))\n     :rank (get ranks (str rank))}))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 128, "code": "(fn [s]\n  (let [m {\\D :diamond \\H :heart \\S :spades \\C :club\n        \t\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        [s r] s]\n    {:suit (m s) :rank (m r)}))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 128, "code": ";(fn [s]\n;  (let [[suit rank] (clojure.string/split s #\"\")\n;        suits {\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club}\n;        ranks (zipmap (clojure.string/split \"23456789TJQKA\" #\"\") (range 0 14))]\n;    {:suit (get suits suit) :rank (get ranks rank)}\n;    ))\n\n(fn [card]\n (letfn [(to-suit [c]\n           (get {\\D :diamond\n                 \\H :heart\n                 \\C :club\n                 \\S :spade} c))\n         (to-val [c]\n           (let [value (-> c (int) (- 50))]\n             (if (< value 8) value\n               (get {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} c))))]\n    {:suit (to-suit (first card))\n     :rank (to-val (second card))}))", "user": "5312cdaae4b08068f379ed03"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [ suits  {\\D :diamond \\H :heart \\C :club \\S :spade} \n         ranks  {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    { :suit (suits suit), :rank (ranks rank) }))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 128, "code": "(fn read-card [s]\n  {:suit (let [suit (str (first s))]\n           (case suit\n             \"D\" :diamond\n             \"H\" :heart\n             \"S\" :spade\n             \"C\" :club))\n\n   :rank (let [rank (str (last s))]\n           (case rank\n             \"T\" 8\n             \"J\" 9\n             \"Q\" 10\n             \"K\" 11\n             \"A\" 12\n             (- (read-string rank) 2)))})", "user": "5645a7d6e4b0284900eef608"}, {"problem": 128, "code": "(fn [card]\n  {:suit (case (first (seq card))\n           \\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club)\n  :rank (case (second (seq card))\n          \\2 0\n          \\3 1\n          \\4 2\n          \\5 3\n          \\6 4\n          \\7 5\n          \\8 6\n          \\9 7\n          \\T 8\n          \\J 9\n          \\Q 10\n          \\K 11\n          \\A 12)})", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 128, "code": "(fn [s]\n  (let [suitS (first s)\n        rankS (second s)\n        suit (cond\n              (= \\D suitS) :diamond\n              (= \\H suitS) :heart\n              (= \\C suitS) :club\n              (= \\S suitS) :spades\n              )\n        rank (cond\n              (= \\A rankS) 12\n              (= \\K rankS) 11\n              (= \\Q rankS) 10\n              (= \\J rankS) 9\n              (= \\T rankS) 8\n              :else (- (read-string (str rankS)) 2))\n        ]\n    {:suit suit\n    :rank rank}))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 128, "code": "(fn [card]\n  (let [[suit rank] (seq card)]\n    {:suit ({\\H :heart\n             \\C :club\n             \\D :diamond\n             \\S :spade}\n                  suit)\n      :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13)) rank)}))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 128, "code": "(fn translate-card [[s v]]                                                                                                                                                        \n  (let [suits {\\H :heart \\D :diamond \\S :spade \\C :club}                                                                                                                            \n        ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}                                                                                                                                         \n        get-rank #(if-let [r (get ranks %)]                                                                                                                                         \n                    r                                                                                                                                                               \n                    (- (read-string (str %)) 2))]                                                                                                                                   \n    {:suit (get suits s), :rank (get-rank v)}))", "user": "54bbaa8ee4b0ed20f4ff6ec0"}, {"problem": 128, "code": "(fn suit-translator\n  [x]\n  (let [\n        suit (str (first x))\n        value (str (first (rest x)))\n        possible-suits {\"D\" :diamond, \"H\" :heart, \"S\" :spade, \"C\" :club} \n        possible-values \n        (assoc \n          (assoc \n            (assoc \n              (assoc \n                (assoc \n                  (zipmap (map str (range 2 10)) (range 0 8))\n                  \"T\" 8 ) \n                \"J\" 9) \n              \"Q\" 10) \n            \"K\" 11)\n          \"A\" 12)]\n    {:suit (get possible-suits suit), :rank (get possible-values value) })\n  )", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 128, "code": "(fn [s]\n  (let [[suit rank] s]\n    {:suit ({\\D :diamond, \\S :spade, \\H :heart, \\C :club} suit),\n    :rank ((zipmap \"23456789TJQKA\" (range 13)) rank)}))", "user": "564b495de4b0284900eef667"}, {"problem": 128, "code": "#(let [suit {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spades}\n        rank (merge(zipmap  (map str \"TJQKA\")  (range 8 13)) (zipmap (map str (range 2 10))   (range 0 8) ))\n\n        input (map str %)]\n   (assoc {} :suit (get suit (first input) )\n                :rank (get rank (second input))))", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} r (- (int r) 50)) \n   })", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 128, "code": "#(->> % seq (map {\\D :diamond \\H :heart \\C :club \\S :spade \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}) (zipmap [:suit :rank]))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 128, "code": "(fn [card]\n  (let [ suit  {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n         rank {\\A 12, \\K 11, \\Q 10 , \\J 9 \\T 8}\n         s (get card 0)\n         r (get card 1)]\n    \t{:suit (suit s) :rank (if (contains? rank r) (rank r) (- (biginteger (subs card 1)) 2))}\n   )\n )", "user": "5649615be4b0284900eef641"}, {"problem": 128, "code": "#(let [ m {\"C\" :club, \"H\" :heart, \"S\" :spade, \"D\" :diamond,\n           \"A\" 12, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11}\n       [s r] (map str %)]\n\n   (zipmap [:suit :rank]\n           [(m s) (or (m r) (- (biginteger r) 2))]))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 128, "code": "#(hash-map \n  :suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} (first %))\n  :rank (.indexOf (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (str (last %))))", "user": "5578f292e4b05c286339e08f"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n        ranks (into {} (map vector (concat (map str (range 2 10)) '(\"T\" \"J\" \"Q\" \"K\" \"A\")) (range )))\n        [s r] (map str (seq card))]\n    {:suit (suits s) :rank (ranks r)}\n    ))", "user": "564a560ae4b0284900eef654"}, {"problem": 128, "code": "(fn parse-card [s]\n  {:suit ({\\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club} (first s))\n  :rank (condp = (second s)\n          \\T 8\n          \\J 9\n          \\Q 10\n          \\K 11\n          \\A 12\n          (- (- (int (second s)) (int \\0)) 2))})", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 128, "code": "#(letfn [(suit [s] (get {\"D\" {:suit :diamond}  \"C\" {:suit :club} \"H\" {:suit :heart}  \"S\" {:suit :spade}} s))\n          (rank [s] (get {\"A\" {:rank 12} \"K\" {:rank 11} \"Q\" {:rank 10} \"J\" {:rank 9} \"T\" {:rank 8} \"9\" {:rank 7} \"8\" {:rank 6} \"7\" {:rank 5} \"6\" {:rank 4} \"5\" {:rank 3} \"4\" {:rank 2} \"3\" {:rank 1} \"2\" {:rank 0} } s))]\n    (let [c (map str (seq %))] ( into {} [(suit (first c)) (rank (second c))])))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 128, "code": "(fn parse [card]\n   (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n         ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4,\n                \\7 5, \\8 6, \\9 7, \\T 8,\n                \\J 9, \\Q 10, \\K 11, \\A 12}]\n       {:suit (suits (get card 0)) :rank (ranks (get card 1))}\n     )\n   )", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 128, "code": "(fn [s]\n  (let [suitc {\\S :spade, \\H :heart \\D :diamond \\C :club}\n        rankc { \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7\n               \\T 8 \\J 9, \\Q 10 \\K 11 \\A 12}\n        ]\n      {:suit (suitc (first s)) :rank (rankc (last s))}\n    ))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 128, "code": "#(let [suitmap {\\H :heart, \\D :diamond, \\C :club, \\S :spade}\n                                   facemap {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n                                {:suit (get suitmap (first %)), :rank (get facemap (last %))}\n                              )", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 128, "code": "(fn [string]\n   (let [suits {\\C :club\n                \\D :diamond\n                \\H :heart\n                \\S :spade}\n         ranks {\\T 8\n                \\J 9\n                \\Q 10\n                \\K 11\n                \\A 12}]\n     {:suit (get suits (first string))\n      :rank (if-let [rank (get ranks (second string))]\n              rank\n              (- (int (second string)) (int \\0) 2))}))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 128, "code": "(fn parse-card [[suit-char rank-char]]\n  (let [suit (str suit-char)\n        rank (str rank-char)\n        suits {\"D\" :diamond \"C\" :club \"H\" :heart \"S\" :spade}\n        faces {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n    {:suit (get suits suit)\n     :rank (if ((set (keys faces)) rank)\n             (get faces rank)\n             (- (Integer/parseInt rank) 2))}))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 128, "code": "(fn [pc]\n  (let [x ((comp keyword str first) pc)\n        y ((comp keyword str second) pc)\n        c {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12}\n        s {:D :diamond :H :heart :S :spade :C :club}\n        r [:suit :rank]]\n    (zipmap r [(get s x) (get c y)])))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 128, "code": "(fn translate [suit-rank-str]\n  (let [[suit rank] (seq suit-rank-str)\n        suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n  {:suit (get suits suit) :rank (get ranks rank)}))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 128, "code": "(fn [x]\n  {:suit (get {\\S :spade \\H :heart \\D :diamond \\C :club} (nth x 0))\n   :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (nth x 1))})", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 128, "code": "(fn [card]\n  {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} (.charAt card 0))\n   :rank (.indexOf \"23456789TJQKA\" (str (.charAt card 1)))})", "user": "537f6b1ae4b06839e8705eb3"}, {"problem": 128, "code": "(fn [card]\n  (let [suit (str (first card))\n        rank (read-string (str (last card)))]    \n    {:suit (get {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} suit)\n     :rank (if (integer? rank) (- rank 2) (get {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (str rank)))}))", "user": "52c1ede2e4b07a9af579236d"}, {"problem": 128, "code": "(fn [s]\n  (apply hash-map (interleave [:suit :rank] (map {\\D :diamond \\H :heart \\C :club \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} s))))", "user": "564da567e4b0284900eef682"}, {"problem": 128, "code": "(fn [x] {:suit (cond\n          (= (nth x 0) \\D) :diamond\n          (= (nth x 0) \\H) :heart\n          (= (nth x 0) \\C) :club\n          (= (nth x 0) \\S) :spade)\n   :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (nth x 1))})", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 128, "code": "(fn parse-cards [st] (let [\n                              [s r] st\n                              suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n                              ranks (assoc (into {} (map vector (map first (map str (range 2 10))) (range 0 8))) \\T\n                                      8 \\J 9 \\Q 10 \\K 11 \\A 12)]\n                         {:suit (suits s) :rank (ranks r)}))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 128, "code": "(fn card->map [s]\n  (let [suite (str (first s))\n        char-rank (last s)\n        rank (str char-rank)\n        suites {:D :diamond :H :heart :S :spade :C :club}\n        ranks {:T 8 :J 9 :Q 10 :K 11 :A 12}]\n   (assoc\n    (assoc {}\n           :suit\n           ((keyword suite) suites))\n    :rank\n    (get\n     ranks\n     (keyword rank)\n     (- (int char-rank) 50)))))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 128, "code": "(fn card [[s r]]\n  (assoc {} \n     \t:suit (case s \n              \t\\S :spade\n                \\H :heart\n                \\D :diamond\n                \\C :club)\n        :rank (case r\n                \\2 0\n                \\3 1\n                \\4 2\n                \\5 3\n                \\6 4\n                \\7 5\n                \\8 6\n                \\9 7\n                \\T 8\n                \\J 9\n                \\Q 10\n                \\K 11\n                \\A 12)))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 128, "code": "#(assoc {}\n        :suit (case (first %)\n                \\S :spade \\D :diamond\n                \\H :heart \\C :club)\n        :rank (case (last %)\n                \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12\n                (- (int (last %)) (int \\2))))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 128, "code": "(fn [s]\n  (hash-map :suit ({\\S :spade \\H :heart \\D :diamond \\C :club}\n                    (first s))\n            :rank ((zipmap [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] (range 0 13)) (str (second s)))))", "user": "549ffeade4b0f3d1d8e70fb2"}, {"problem": 128, "code": "(let [suits (map vector [\"D\" \"H\" \"C\" \"S\"] [:diamond :heart :club :spade])\n      ranks (map vector [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] (range 13))]\n  (into {} (for [s suits\n                 r ranks]\n             [(apply str (first s) (first r)) {:suit (last s) :rank (last r)}])))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 128, "code": "#(apply \n (fn [suit rank] \n   (conj {:suit (get {\"H\" :heart \"C\" :club \"D\" :diamond \"S\" :spade} suit)} \n         {:rank (cond (= rank \"T\") 8 \n                      (= rank \"J\") 9 \n                      (= rank \"Q\") 10 \n                      (= rank \"K\") 11 \n                      (= rank \"A\") 12 \n                      (and (> 0) (< 10)) (- (Integer. rank) 2))})) (map str (flatten (partition 1 1 %))))", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 128, "code": "(fn [x] \n     (let [suite {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club}\n           rank  {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5  \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n       (hash-map :suit (suite (str (first x))) :rank (rank (str (first (rest x)))))))", "user": "53623eaee4b0243289761e4f"}, {"problem": 128, "code": "(fn [x]\n    (let [components (map str (vec x))\n          suit (first components)\n          value (second components)]\n      (-> {}\n          (assoc :suit (cond\n                         (= suit \"D\") :diamond\n                         (= suit \"C\") :club\n                         (= suit \"H\") :heart\n                         (= suit \"S\") :spade))\n          (assoc :rank (cond\n                         (= \"A\" value) 12\n                         (= \"K\" value) 11\n                         (= \"Q\" value) 10\n                         (= \"J\" value) 9\n                         (= \"T\" value) 8\n                         :else (- (read-string value) 2))))))", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8}]\n    {:suit (suits suit) :rank (ranks rank (- (int rank) 50))}))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 128, "code": "(fn [card]\n(assoc {} \n\t:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} (first card))\n\t:rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second card))))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 128, "code": "(fn recognize-card [card-string] (let [color (subs card-string 0 1)\n                                         val (subs card-string 1)]\n                                     {:suit ((keyword  color) {:H :heart :D :diamond :S :spade :C :club})\n                                      :rank ((keyword val) {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12})}))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 128, "code": "(fn poke [s]\n   (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n         rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                   \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n         ]\n     {:suit (suit-map (first s)), :rank (rank-map (last s))}\n     ))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 128, "code": "(fn [card]\n  (let [ranks (zipmap [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] (range))\n        suits {\"D\" :diamond , \"H\" :heart , \"C\" :club, \"S\" :spade}\n        myfirst (first (map str (seq card)))\n        mylast (last (map str (seq card)))]\n    {:suit (suits myfirst) :rank (ranks mylast)}))", "user": "5658d775e4b00d3155796114"}, {"problem": 128, "code": "#(let [[s r] (seq %)]\n      {:suit (condp = s\n               \\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade)\n       :rank (condp = r\n               \\A 12\n               \\K 11\n               \\Q 10\n               \\J 9\n               \\T 8\n               (- (Character/getNumericValue ^char r) 2))}\n      )", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 128, "code": "#(let [suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}  \n        ranks [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]]\n    (hash-map \n     :suit (suits (str (first %))) \n     :rank (.indexOf ranks (apply str (rest %)))))", "user": "567476bde4b05957ce8c6139"}, {"problem": 128, "code": "(fn [c]\n {:suit (get {\\C :club \\D :diamond \\H :heart \\S :spade} (first c)) :rank (get (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13)) (second c))}\n)", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 128, "code": "(fn [card]\n  (let [[s r] (map str (seq card))]\n    {:suit ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} s)\n     :rank (first (keep-indexed (fn [i x] (if (= x r) i)) [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]))}))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits (first card)),\n     :rank (ranks (second card))}))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 128, "code": "(fn [card-str]\n  (let [suit-map {\\H :heart, \\D :diamond, \\S :spade, \\C :club},\n        rank-list (map vector (map str (concat (map #(+ 2 %) (range 8)) [\"T\", \"J\", \"Q\", \"K\", \"A\"])) (range 13)),\n        rank-map (reduce #(let [[k v] %2] (assoc %1 k v)) {} rank-list)]\n    (assoc {} :suit (suit-map (first card-str))\n              :rank (rank-map (str (second card-str))))))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 128, "code": "(fn read-card [c]\n   {:rank (let [try-rank ({\\A 12, \\K 11, \\Q 10, \\J 9, \\T 8} (second (seq c)))]\n            (if (nil? try-rank)\n              (- (Integer/parseInt (str (second (seq c)))) 2)\n              try-rank)), :suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} (first (seq c)))})", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 128, "code": "(fn cards [s] (let [cs (seq s) suites {\\H :heart \\D :diamond \\S :spade \\C :club} ranks (into (zipmap  (map #(first (seq (str %))) (range 2 10)) (range 0 8)) {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12})] (assoc (assoc {} :suit (suites (first cs))) :rank (ranks (second cs)))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ({\\H :heart \\D :diamond \\S :spade \\C :club} suit)\n   :rank ((zipmap \"23456789TJQKA\" (range)) rank)})", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 128, "code": "(fn [c]\n   (let [[s r] c]\n     {:suit (get {\\H :heart\n                  \\S :spade\n                  \\C :club\n                  \\D :diamond} s)\n      :rank (get (into {} (map vector\n                               (map str (concat (range 2 10) [\\T \\J \\Q \\K \\A]))\n                               (range 13)))\n                 (str r))}))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 128, "code": "(fn [s]\n  (let [rank {\\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11}\n        suit {\\S :spades \\H :heart  \\D :diamond  \\C :club }]\n  {:suit (suit (first s)) :rank (rank (second s))}))", "user": "56754c4be4b05957ce8c6149"}, {"problem": 128, "code": "(fn [n]\n  (let [deq {\\D :diamond, \\H :heart \\C :club \\S :spade} r {\\Q 10, \\5 3 \\A 12 \\2 0 \\3 1 \\4 2 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\K 11}]\n  {:suit (get deq (first n) ) :rank (get r (second n))})\n )", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 128, "code": "(fn[s]\n  (let[sm {:S :spade, :H :heart, :D :diamond, :C :club} \n       rm {:2 0, :3 1, :4 2, :5 3, :6 4, :7 5, :8 6, :9 7, :T 8, :J 9, :Q 10, :K 11, :A 12}\n       xs (seq s)]\n    (-> (assoc {} :suit (sm (keyword (str (first xs))))) \n      (assoc :rank (rm (keyword (str (last xs))))))))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 128, "code": "(fn [str] \n  {:suit (get {\\H :heart, \\D :diamond, \\S :spade, \\C :club} (nth str 0)), \n  :rank (first (keep-indexed #(when (= (nth str 1) %2) %1) \"23456789TJQKA\"))})", "user": "5202cfe7e4b030ee0c5b2702"}, {"problem": 128, "code": "(fn [s]\n  (let [suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first s))\n        rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6\n               \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))]\n    {:suit suit :rank rank}))", "user": "564a5a09e4b0284900eef656"}, {"problem": 128, "code": "(fn [[s r]]\n  (let[ suits (zipmap [\"D\" \"H\" \"S\" \"C\"] [:diamond :heart :spade :club]) rank (zipmap [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] (range 13))]\n        {:suit (suits (str s)) :rank (rank (str r))}\n  )\n )", "user": "5676af21e4b05957ce8c6158"}, {"problem": 128, "code": "(fn [arg] (let [str-arg (str arg) suit (first str-arg) rank (second str-arg)] { :suit (keyword (cond (= suit \\C) \"club\" (= suit \\H) \"heart\" (= suit \\D) \"diamond\" (= suit \\S) \"spade\")) :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] rank)}))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 128, "code": "(fn [[a b]] \n  (prn (type a) (type b)) (let [suits {\"S\" :spades, \"H\" :heart, \"C\" :club, \"D\" :diamond}\n        ranks {\"A\" 12, \"K\" 11, \"Q\" 10, \"J\" 9, \"T\" 8, \"9\" 7, \"8\" 6, \"7\" 5, \"6\" 4, \"5\" 3, \"4\" 2, \"3\" 1, \"2\" 0}\n        suit (get suits (str a))\n        rank (get ranks (str b))]\n     {:suit suit, :rank rank}))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 128, "code": "(fn [in]\n  (let\n    [ s (vec in)\n      x (get s 0)\n      y (get s 1)\n      suit (case x\n            \\C :club\n            \\H :heart\n            \\S :spade\n            \\D :diamond)\n      numb (case y\n             \\A 12\n             \\K 11\n             \\Q 10\n             \\J 9\n             \\T 8\n             (- (Character/digit y 10) 2))]\n    (println y)\n    {:suit suit :rank numb}))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 128, "code": "#(letfn [(s [c]\n            (condp = c\n              \\S :spade\n              \\H :heart\n              \\D :diamond\n              \\C :club))\n         (r [c]\n           (if (< (int c) (int \\A))\n             (- (int c) (int \\0) 2)\n             (condp = c \n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12)))]\n  {:suit (s (first %)) :rank (r (second %))})", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 128, "code": "(fn [card]\n  (let [suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} (first card))\n        r (second card)\n        rank ({\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r (- (int r) (int \\2)))]\n    {:suit suit :rank rank}))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 128, "code": "(let\n    [suit {\\S :spade \\C :club \\D :diamond \\H :heart}\n     card-val {\\A 12, \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8 \\J 9, \\Q 10, \\K 11}]\n  (fn q4q128 [card]\n    {:suit (get suit (first card))\n     :rank (get card-val (second card))}))", "user": "52213426e4b0e6a83c8925c4"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 128, "code": "(let [rank (zipmap \"23456789TJQKA\" (range 13))\n              suit {\\C :club, \\H :heart, \\S :spade, \\D :diamond}]\n          (fn [c]\n            (let [[s r] c] {:suit (suit s), :rank (rank r)})))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 128, "code": "(fn [s]\n  (let [suit #(case % \\S :spade \\H :heart \\D :diamond \\C :club)\n        rank #(.indexOf (apply vector (str \"23456789TJQKA]\")) %)]\n    {:suit (suit (first s))\n     :rank (rank (second s))}))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 128, "code": "(fn [[s r]] {:suit ({\\S :spade \\D :diamond \\H :heart \\C :club} s), :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] r)})", "user": "56798d83e4b05957ce8c618b"}, {"problem": 128, "code": "#(let [s (seq %)\n       l (last s)]\n   {:suit (case (first s)\n            \\D :diamond\n            \\H :heart\n            \\C :club\n            nil)\n    :rank (case l\n            \\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12\n            (- (read-string (str l)) 2))})", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 128, "code": "(fn [s]\n  (let [rankmap (zipmap \n                  [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] \n                  (range 0 13))\n        suitmap (zipmap \n                  [\\D \\H \\C \\S] \n                  [:diamond :heart :club :spade])]\n    (assoc {} :rank \n              (rankmap (second s)) \n              :suit \n              (suitmap (first s)))))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 128, "code": "(fn [card-string]\n  (let [suit (first card-string)\n        number (last card-string)\n        \n        translated-suit ({\\H :heart \\D :diamond \\C :club \\S :spade} suit)\n        translated-rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} number)\n                            (- (read-string (str number)) 2))]\n    {:suit translated-suit\n     :rank translated-rank}))", "user": "540ef409e4b0addc1aec6723"}, {"problem": 128, "code": "#(->> %\n                          seq\n                          ((fn [[ch-suit ch-rank]]  ;=> ({} {})\n                             (letfn [(keyword-suit [cs]\n                                       (case cs\n                                         \\S :spade\n                                         \\H :heart\n                                         \\D :diamond\n                                         \\C :club))\n                                     (int-rank [ir]\n                                       (cond\n                                         (= ir \\A) 12\n                                         (= ir \\K) 11\n                                         (= ir \\Q) 10\n                                         (= ir \\J) 9\n                                         (= ir \\T) 8\n                                         :else (- (- (int ir) (int \\0)) 2)))]\n                               {:suit (keyword-suit ch-suit) :rank (int-rank ch-rank)})))\n                          merge)", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (hash-map\n    :suit (get {\\S :spade \\H :heart \\D :diamond \\C :club} suit)\n    :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)\n    )\n  )", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 128, "code": "(fn [card] \n  (let [suit-map {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        [suit rank] (seq card) ]\n    { :suit (suit-map suit)\n      :rank (rank-map rank) }))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 128, "code": "(fn cards[s] (let [suit (first s)] (let [rank (last s)] (hash-map :suit (case suit \\D :diamond \\H :heart \\S :spade \\C :club), :rank (first (first (filter #(= (second %) rank)(map-indexed vector \"23456789TJQKA\"))))))))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 128, "code": "#(let [[s r] (seq %)\n                 ss {\\D :diamond \\S :spade \\C :club \\H :heart}\n                 rs (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))]\n             {:suit (ss s) :rank (rs r)})", "user": "543b4746e4b032a45b86932c"}, {"problem": 128, "code": "(fn [card]\n  {\n  \t:suit ({\\S :spade \\C :club \\H :heart \\D :diamond } (first card))\n  \t:rank ((into {} (map hash-map [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))) (second card))\n  }\n)", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 128, "code": "(fn [[p q]] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade } p) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} q)})", "user": "52457931e4b08ba239308107"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank (case r\n          \t \\T 8\n          \t \\J 9\n             \\Q 10\n         \t \\K 11\n         \t \\A 12\n           \t (- (int r) 50))})", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 128, "code": "(fn decode [sr] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first (seq sr)))\n  :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last (seq sr)))   })", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 128, "code": "#(let [suits {\\D :diamond\n              \\H :heart\n              \\S :spade\n              \\C :club}\n       ranks (merge (zipmap (map char (range 50 58)) (range))\n                    {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12})]\n   {:suit (suits (first %))\n    :rank (ranks (last  %))})", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 128, "code": "(fn __ [s]\n  (let [[str-suit str-rank] s\n        suit ({\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade} str-suit)\n        rank (get {\\T 8 \\J 9 \\Q 10 \\A 12 \\K 11} str-rank (- (int str-rank) 50))]\n   {:suit suit :rank rank}))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 128, "code": "(fn [s]\n  (let [char->suit {\\S :spade\n                 \\H :heart\n                 \\D :diamond\n                 \\C :club}\n        char->rank (fn [c] \n                     (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] c))\n        [suit-char rank-char] (seq s)]\n    {:suit (char->suit suit-char)\n     :rank (char->rank rank-char)}))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 128, "code": "(fn [[suit-str rank-str]]\n  (let [suit ({\\C :club \\D :diamond \\H :heart \\S :spade} suit-str)\n        rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8\n               \\J 9 \\Q 10 \\K 11 \\A 12} rank-str)]\n    {:rank rank :suit suit}))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 128, "code": "#(assoc {} \n         :suit \n         (get {\\D :diamond \\H :heart \\C :club \\S :spade} (first %)) \n         :rank\n         (get (zipmap \"23456789TJQKA\" (range)) (last %)))", "user": "56066e82e4b08b23635d3173"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\\S :spade \\H :heart \\C :club \\D :diamond}\n        ranks (apply hash-map (interleave \"23456789TJQKA\" (range)))]\n    {:suit (suits (first card)) :rank (ranks (last card))}))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\\H :heart \\D :diamond \\S :spade \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit_char (get (vec card) 0)\n        rank_char (get (vec card) 1)]\n    {:suit (get suits suit_char) :rank (get ranks rank_char)}\n    ))", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit (case suit\n           \\S :spade\n           \\D :diamond\n           \\H :heart\n           \\C :club)\n  :rank (cond\n         (<= 50 (int rank) 57) (- (int rank) 50)\n         (= \\T rank) 8\n         (= \\J rank) 9\n         (= \\Q rank) 10\n         (= \\K rank) 11\n         (= \\A rank) 12)})", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 128, "code": "(fn [[s n]]\n  (hash-map :suit\n            ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n            :rank\n            ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} n)))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 128, "code": "(fn [card]\n  (let [[suit rank] (mapv #(java.lang.Character/toUpperCase %)\n                          (vec card))]\n    {:suit (case suit\n             \\D :diamond\n             \\C :club\n             \\H :heart\n             \\S :spade)\n     :rank (case rank\n             \\A 12\n             \\K 11\n             \\Q 10\n             \\J 9\n             \\T 8\n             (- (Character/getNumericValue rank) 2))}))", "user": "56a28c23e4b0542e1f8d14c3"}, {"problem": 128, "code": "(fn parse-cards\n  [card]\n  (let [suits {\\D :diamond\n        \t   \\H :heart\n        \t   \\C :club\n               \\S :spad}\n        ranks [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]]\n    {:suit (get suits (first card))\n     :rank (.indexOf ranks (subs card 1))}))", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 128, "code": "(fn [two-char-str]\n  (let [h (subs two-char-str 0 1)\n        t (subs two-char-str 1 2)\n        suit (cond\n               (= h \"S\") :spade\n               (= h \"H\") :heart\n               (= h \"D\") :diamond\n               (= h \"C\") :club)\n        rank (cond\n               (= t \"2\") 0\n               (= t \"3\") 1\n               (= t \"4\") 2\n               (= t \"5\") 3 \n               (= t \"6\") 4\n               (= t \"7\") 5\n               (= t \"8\") 6\n               (= t \"9\") 7\n               (= t \"T\") 8\n               (= t \"J\") 9\n               (= t \"Q\") 10\n               (= t \"K\") 11\n               (= t \"A\") 12)]\n    {:suit suit :rank rank}))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 128, "code": "(fn [in]\n  (let [suit (first in)\n        rank (second in)\n        suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (array-map :suit (get suits suit) :rank (get ranks rank))))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 128, "code": "#(assoc (assoc {}\n           :rank ({ \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %)))\n    :suit ({\\D :diamond \\H :heart \\C :club \\S :spades} (first %)))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 128, "code": "(fn [[s r]]\n   {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} s)\n    :rank (.indexOf (seq \"23456789TJQKA\") r) }\n)", "user": "5651654be4b0f9d632dd845a"}, {"problem": 128, "code": "(fn [c]\n  (assoc {}\n       :rank\n       (get {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (str (last c) )  )\n       \n       :suit\n       (get {\"D\" :diamond \"C\" :club  \"S\" :spade \"H\" :heart} (str (first c)) )\n  )\n)", "user": "556f2009e4b09a3098a52519"}, {"problem": 128, "code": "(fn [c]\n  (let [suit (case (first c)\n                \\D :diamond\n                \\H :heart\n                \\C :club\n                \\S :spade)\n        rank (.indexOf \"23456789TJQKA\" (str (second c)))\n       ]\n  {:suit suit :rank rank}))", "user": "511e17a9e4b0c5b849dd36b0"}, {"problem": 128, "code": "(fn [card]\n    (let [sanitized (name card)\n          suit (first sanitized)\n          rank (second sanitized)\n          suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n          ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n                 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n      {:suit (suits suit) :rank (ranks rank)}))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 128, "code": "(fn recognize-playing-cards [s]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get suits (first s)) :rank (get ranks (second s))}\n   ))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 128, "code": "(fn recognizeCard2 [x]\n  (let [suit (first (seq x))\n        number (last (seq x))\n        findSuit2 (fn [s] (case suit\n                            \\C :club\n                            \\D :diamond\n                            \\H :heart\n                            \\S :spade))\n        findNumber2 (fn [n] (case number\n                              \\2 0\n                              \\3 1\n                              \\4 2\n                              \\5 3\n                              \\6 4\n                              \\7 5\n                              \\8 6\n                              \\9 7\n                              \\T 8\n                              \\J 9\n                              \\Q 10\n                              \\K 11\n                              \\A 12))]\n    {:suit (findSuit2 suit) :rank (findNumber2 number)}))", "user": "56b165f0e4b0982f16b37dea"}, {"problem": 128, "code": "#(hash-map\n  :suit ({\\C :club\n          \\D :diamond\n          \\H :heart\n          \\S :spade} (first %))\n  :rank ({\\2 0\n          \\3 1\n          \\4 2\n          \\5 3\n          \\6 4\n          \\7 5\n          \\8 6\n          \\9 7\n          \\T 8\n          \\J 9\n          \\Q 10\n          \\K 11\n          \\A 12} (last %)))", "user": "56baa68ce4b0f26550335947"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))\n        suits (zipmap [\\S \\H \\D \\C] [:space :heart :diamond :club])]\n    {:suit (get suits suit) :rank (get ranks rank)}))", "user": "56481722e4b0284900eef628"}, {"problem": 128, "code": "(fn parse-card [card] (let [suit (first card) rank (second card)]\n             (assoc (cond (= suit \\H) {:suit :heart}\n                   (= suit \\D) {:suit :diamond}\n                   (= suit \\C) {:suit :club}\n                   (= suit \\S) {:suit :spade})\n               :rank (cond (= rank \\A) 12\n                     (= rank \\K) 11\n                     (= rank \\Q) 10\n                     (= rank \\J) 9\n                     (= rank \\T) 8     \n                     :else (- (Integer/parseInt (str rank)) 2)\n                     ))))", "user": "56baab13e4b0f26550335948"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s) \n   :rank ((zipmap \"23456789TJQKA\"(range)) r)})", "user": "56ae214ce4b03c432f18735a"}, {"problem": 128, "code": "(let [cmap {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12,\n            \\S :spade, \\H :heart, \\D :diamond, \\C :club}]\n  (fn [card]\n    (zipmap [:suit :rank] (map cmap card))))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 128, "code": "(fn [card]\n  (let [x (second card)]\n    {:suit \n     (condp = (first card)\n       \\H :heart\n       \\D :diamond\n       \\C :club\n       \\S :spade )\n     :rank\n     (condp = x\n       \\T 8\n       \\J 9\n       \\Q 10\n       \\K 11\n       \\A 12\n       (- (int x) (int \\2)))}))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 128, "code": "(fn [card]\n  (let [suitLetter (subs card 0 1)\n        cardLetter (subs card 1 2)\n        suits { \"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spade}\n        cards { \"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}]\n    {:suit (suits suitLetter) :rank (cards cardLetter)}))", "user": "536673a8e4b0243289761e76"}, {"problem": 128, "code": "(fn recognize-card [card]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks (into {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n                    (map #(vector (first (str %)) (- % 2)) (range 2 10)))]\n    (prn ranks)\n    {:suit (suits (first card)) :rank (ranks (second card))}))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 128, "code": "(fn [s] (let [suit (first s) rank (last s) suits {\\D :diamond \\H :heart \\C :club \\S :spade} ranks {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0 }] {:suit (suits suit) :rank (ranks rank)}))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 128, "code": "(fn card [code]\n  (let [suits {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\\8 6,\n               \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (get suits (first code)) :rank (get ranks (second code))}))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 128, "code": "(fn get-card\n  [cstr]\n  (let [ranks {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8}\n        suits {\\H :heart \\C :club \\S :spade \\D :diamond}\n        get-rank (fn [chr] (if (contains? ranks chr) (get ranks chr) (- (int chr) 50)))\n        get-suit (fn [chr] (get suits chr))]\n    {:suit (get-suit (first cstr)) :rank (get-rank (second cstr))}))", "user": "5609d328e4b05f002753deee"}, {"problem": 128, "code": "(fn [inpstr]\n  \n  (let [cardshape {:S :spade\n      :H :heart\n      :D :diamond\n      :C :club}\n        cardnum {:2 0\n              :3 1\n              :4 2\n              :5 3\n              :6 4\n              :7 5\n              :8 6\n              :9 7\n              :T 8\n              :J 9\n              :Q 10\n              :K 11\n              :A 12\n              }\n        fStr (subs inpstr 0 1)\n        sStr (subs inpstr 1 2)]\n    {:suit (get cardshape (keyword fStr) )\n     :rank (get cardnum (keyword sStr) )\n     \n     }\n    \n    \n    )\n  \n  )", "user": "56b7c32ee4b0982f16b37e48"}, {"problem": 128, "code": "(fn [s]\n  (let [rank [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n        suit {\\D :diamond \\H :heart \\S :spade \\C :club}]\n    {:suit (suit (first s)) \n     :rank (.indexOf rank (last s))}))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 128, "code": "(fn\n   [[ch1 ch2]]\n   (let [sm {\\D :diamond \\H :heart \\S :spade \\C :club}\n         rm (assoc (zipmap (map char (range 50 58)) (range 0 8))\n              \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)]\n     {:suit (sm ch1) :rank (rm ch2)}))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 128, "code": "(fn [x]\n  {:suit (condp = (first (seq x))\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n  :rank (.indexOf \"23456789TJQKA\" (int (second (seq x))))})", "user": "54edc818e4b024c67c0cf865"}, {"problem": 128, "code": "(fn [s]\n  {:suit (case (first s)\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (case (last s)\n           \\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12)})", "user": "54577fefe4b01be26fd7460d"}, {"problem": 128, "code": "(fn card [code]\n  (let [[s r] (map int (seq code))\n        suit {68 :diamond 72 :heart 67 :club 83 :spade}\n        rank #(or ({84 8 74 9 81 10 75 11 65 12} %) (- % 50))]\n    {:suit (suit s) :rank (rank r)}))", "user": "4e36e647535deb9a81d77f36"}, {"problem": 128, "code": "#(assoc {} \n   :suit \n   (get {:C :club :D :diamond :H :heart :S :spade} (keyword (str (first %)))) \n   :rank \n   (.indexOf (conj (into [] (map str (range 2 10))) \"T\" \"J\" \"Q\" \"K\" \"A\") (apply str (rest %))))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 128, "code": "(fn [s] (let [suit {\\D :diamond\n                    \\H :heart\n                    \\C :club\n                    \\S :spade}\n              rank (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))]\n         {:suit (suit (first s)) :rank (rank (second s))}))", "user": "56b86e64e4b0f26550335924"}, {"problem": 128, "code": "(fn [x]\n    (let [s {\\S :spade\n             \\H :heart\n             \\D :diamond\n             \\C :club}\n          r {\\2 0\n             \\3 1\n             \\4 2\n             \\5 3\n             \\6 4\n             \\7 5\n             \\8 6\n             \\9 7\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12}]\n       {:suit (s (first x)) :rank (r (second x))}))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 128, "code": "(fn[[s c]] {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s) :rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} c) (- (int c) 50))})", "user": "56824e1be4b0945ebc182a91"}, {"problem": 128, "code": "(fn [x] (let [[s r] (apply list x)]                                            \n             {:rank (.indexOf (apply list \"23456789TJQKA\") r)                     \n              :suit ({\\D :diamond                                                 \n                      \\H :heart                                                   \n                      \\C :club                                                    \n                      \\S :spade} s)}))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 128, "code": "(fn [card] (let [index-map {\\2 0, \\3 1, \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12},suit-map {\\S :spade \\H :heart \\D :diamond \\C :club}]\n             {:suit (suit-map (first card)) :rank (index-map (second card))  }))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 128, "code": "(fn [s] (hash-map  :suit (get {\\D :diamond, \\S :spade,  \\H :heart, \\C :club } (first s))\n:rank (get {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8,\n\\J 9, \\Q 10, \\K 11, \\A 12} (second s) ) ))", "user": "4fd11a93e4b04c3a95aa040a"}, {"problem": 128, "code": "(fn [card]\n  (let [suit (case (first card)\n               \\D :diamond\n               \\S :spade\n               \\H :heart\n               \\C :club)\n        rank (case (first (rest card))\n               \\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12)]\n    {:suit suit :rank rank}))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 128, "code": "(fn [[x y]] {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} x) :rank ((zipmap \"23456789TJQKA\" (range)) y)})", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 128, "code": "(fn [[s r]]\n  (let\n    [suit (cond\n            (= s \\D) :diamond\n            (= s \\H) :heart\n            (= s \\C) :club\n            (= s \\S) :spade)\n     rank (cond (<= (int \\2) (int r) (int \\9)) (- (int r) (int \\0) 2)\n                (= r \\T) 8\n                (= r \\J) 9\n                (= r \\Q) 10\n                (= r \\K) 11\n                (= r \\A) 12)]\n    {:suit suit :rank rank}))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 128, "code": "(fn pia [s]\n  (let [suitmap {\\H :heart,\n                 \\C :club,\n                 \\D :diamond,\n                 \\S :spade}\n        rankmap {\\2 0,\n                 \\3 1,\n                 \\4 2,\n                 \\5 3,\n                 \\6 4,\n                 \\7 5,\n                 \\8 6,\n                 \\9 7,\n                 \\T 8,\n                 \\J 9,\n                 \\Q 10,\n                 \\K 11,\n                 \\A 12}]\n    {:suit (suitmap (first s))\n     :rank (rankmap (last s))}))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 128, "code": "#(let [rank (apply hash-map (interleave (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range 13)))\n       suit {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spade}]\n   {:suit (suit (str (first %))) :rank (rank (str (second %)))})", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 128, "code": "(fn [s]\n  (let [suit (first s) rank (second s)]\n    {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} suit) \n     :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)}))", "user": "56bca51ae4b0f26550335963"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits (zipmap (map identity \"SHDC\") [:spade :heart :diamond :club])\n        ranks (zipmap (map identity \"23456789TJQKA\") (range 13))]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 128, "code": "(fn [card]\n  (let [card-seq (seq card)\n        suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        values (zipmap '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A)\n                       (range))]\n    {:suit (suits (first card-seq))\n     :rank (values (second card-seq))}))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 128, "code": "(fn [s]\n  (let [vs [[\"S\" :spade] [\"H\" :heart] [\"D\" :diamond] [\"C\" :club]]\n        vv [[\"2\" 0] [\"3\" 1] [\"4\" 2] [\"5\" 3] [\"6\" 4] [\"7\" 5] [\"8\" 6] [\"9\" 7] [\"T\" 8] [\"J\" 9] [\"Q\" 10] [\"K\" 11] [\"A\" 12]]\n        a (subs s 0 1)\n        b (subs s 1 2)\n        c (second (first (filter #(= (first %) a) vs)))\n        d (second (first (filter #(= (first %) b) vv)))]\n    {:suit c :rank d}))", "user": "564d3169e4b0284900eef67c"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suit (condp = s\n               \\D :diamond\n               \\H :heart\n               \\S :spade\n               \\C :club)\n        ranks {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8}\n        rank (get ranks r)\n        rank (if (nil? rank) (- (Integer. (str r)) 2) rank)]\n    {:suit suit :rank rank}))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 128, "code": "(fn [s]\n  {\n  :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first s))\n  :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))\n  }\n)", "user": "56bb3a4be4b0f26550335951"}, {"problem": 128, "code": "#(let [[suit rank] (seq %1)\n       suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n       ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n   {:suit (suits suit) :rank (ranks rank)})", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 128, "code": "(fn pcard [card]\n\t(let [suits {\\S :spade \\H :heart \\D :diamond  \\C :club}\n\t\t  ranks { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n\t\t  [s r] (seq card)]\n\t\t{:suit (suits s) :rank (ranks r)}))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 128, "code": "(fn [card]\n  (let [suit (fn [l]\n               (cond (= l \"C\")  :club\n                     (= l \"D\") :diamond\n                     (= l \"H\") :heart\n                     (= l \"S\") :spade))\n        rank (fn [n]\n               (cond (= n \"T\") 8\n                     (= n \"J\") 9\n                     (= n \"Q\") 10\n                     (= n \"K\") 11\n                     (= n \"A\") 12\n                     (< (read-string n) 10) (- (read-string n) 2)))\n        [s r] (rest (clojure.string/split card #\"\"))]\n    (hash-map :suit (suit s) :rank (rank r))))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 128, "code": "(fn [s]\n  {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club}\n          (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n          (second s))})", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} s)\n   :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)) r)})", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits (zipmap \"DHCS\" [:diamond :heart :club :spade])\n        ranks (zipmap (concat (apply str (range 2 10)) \"TJQKA\") (range 13))]\n    {:suit (suits s) :rank (ranks r)}\n    )\n  )", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 128, "code": "#(\n  hash-map\n  :suit\n  ( case (first %)\n  \t\\D :diamond\n    \\H :heart\n    \\C :club\n    \\S :spade\n    )\n  ,\n  :rank\n  ( case (second %)\n    \\2 0\n    \\3 1\n    \\4 2\n    \\5 3\n    \\6 4\n    \\7 5\n    \\8 6\n    \\9 7\n    \\T 8\n    \\J 9\n    \\Q 10\n    \\K 11\n    \\A 12\n    )  \n  )", "user": "51e1c176e4b06a68e693eafb"}, {"problem": 128, "code": "#(let [i (for [s [\\D \\H \\C \\S] r (flatten [(range 2 10) [\\T \\J \\Q \\K \\A]])] (str s r))\n       o (for [s [:diamond :heart :club :spade] r (range 13)] {:suit s :rank r})\n       m (zipmap i o)]\n   (m %))", "user": "56aed78fe4b03c432f187363"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit\n   (case suit\n     \\S :spade\n     \\D :diamond\n     \\H :heart\n     \\C :club)\n   :rank\n   (case rank\n     \\2 0\n     \\3 1\n     \\4 2\n     \\5 3\n     \\6 4\n     \\7 5\n     \\8 6\n     \\9 7\n     \\T 8\n     \\J 9\n     \\Q 10\n     \\K 11\n     \\A 12)})", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 128, "code": "#(let [h {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        r {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        [c n] (flatten (partition 1 %))]\n    {:suit (h c) :rank (if-let [v (get r n)]\n                         v\n                         (- (read-string (str n)) 2))})", "user": "568227fee4b0945ebc182a8a"}, {"problem": 128, "code": "#(let [suits {\\S :spade\n              \\H :heart\n              \\D :diamond\n              \\C :club}\n       ranks {\\T 8\n              \\J 9\n              \\Q 10\n              \\K 11\n              \\A 12}]\n  (let [[suit rank] %\n        read-rank (read-string (str rank))]\n    {:suit (suits suit)\n     :rank (if (number? read-rank) (- read-rank 2) (ranks rank))}))", "user": "56dc3bdfe4b0ea9b8538f819"}, {"problem": 128, "code": "(fn [card]\n  (let [strc (clojure.string/trim card)\n        sc (rest (clojure.string/split strc #\"\"))\n        suit (condp = (first sc) \"S\" :spade \"D\" :diamond \"C\" :club \"H\" :heart :heart)\n        rankstr (second sc)\n        _rank (condp = rankstr \"T\" \"10\" \"J\" \"11\" \"Q\" \"12\" \"K\" \"13\" \"A\" \"14\" rankstr)\n        rank (- (Integer/parseInt _rank) 2)]\n    {:suit suit :rank rank}))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 128, "code": "(fn [card]\n  (let [ranks (zipmap \"23456789TJQKA\" (range))\n        suit  #(case %\n                \\S :spades\n                \\H :heart\n                \\D :diamond\n                \\C :club)]\n      {:suit (suit  (first card))\n       :rank (ranks (second card))}))", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 128, "code": "#(let [[f s] %]                                                                                                                \n      (zipmap [:suit :rank]                                                                                                     \n              [(condp = f \\D :diamond \\S :spade \\H :heart \\C :club)                                                             \n               (condp = s \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)]))", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 128, "code": "(fn card [[suite rank]]\n  {:suit ({\\D :diamond\n            \\S :spade\n            \\C :club\n            \\H :heart} suite)\n   :rank ((merge (zipmap (map #(-> %1 str first) (range 2 10)) (range))\n                 {\\T 8\n                  \\J 9\n                  \\Q 10\n                  \\K 11\n                  \\A 12}) rank)})", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (get suits s) :rank (get ranks r)}))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 128, "code": "(fn my-128\n  [[s r]]\n  (hash-map \n    :suit ({\\C :club, \\D :diamond, \\H :heart, \\S :spade} s) \n    :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 128, "code": "(fn card-string-to-map [card]\n  (let [suit (case (str (first card))\n               \"S\" :spade\n               \"H\" :heart\n               \"D\" :diamond\n               \"C\" :club)\n        rank (if (integer? (read-string (str (second card))))\n               (- (read-string (str (second card))) 2)\n               (case (str (second card))\n                 \"T\" 8\n                 \"J\" 9\n                 \"Q\" 10\n                 \"K\" 11\n                 \"A\" 12))]\n    {:suit suit :rank rank}))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 128, "code": "(fn\n  [card-str]\n  (let [suit-str (re-find #\"[DHSC]\" card-str)\n        rank-num (re-find #\"[2-9]\" card-str)\n        rank-str (re-find #\"[AKQJT]\" card-str)]\n    (zipmap [:suit :rank]\n            [(condp = suit-str\n               \"D\" :diamond, \"H\" :heart, \"S\" :spade, \"C\" :club)\n             (if rank-num\n               (- (Integer. rank-num) 2)\n               (condp = rank-str\n                 \"T\" 8, \"J\" 9 \"Q\" 10, \"K\" 11, \"A\" 12))])))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 128, "code": "#(hash-map :suit ({\"D\" :diamond \"S\" :spade \"C\" :club \"H\" :heart} (subs % 0 1)) :rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (subs % 1)))", "user": "56e06625e4b0ca2494a09607"}, {"problem": 128, "code": "(fn [s] (let [ rtable {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} \n                  stable {\\S :spade \\H :heart \\D :diamond \\C :club} ]\n           {:suit (stable (first s)) :rank (rtable (last s))} ))", "user": "567798afe4b05957ce8c6169"}, {"problem": 128, "code": "(fn [s]\n    (let [suitmap {\\D :diamond,\n                   \\H :heart,\n                   \\S :spade,\n                   \\C :club}\n          rankmap {\\2 0,\n                   \\3 1,\n                   \\4 2,\n                   \\5 3,\n                   \\6 4,\n                   \\7 5,\n                   \\8 6,\n                   \\9 7,\n                   \\T 8,\n                   \\J 9,\n                   \\Q 10,\n                   \\K 11,\n                   \\A 12}]\n      {:suit (get suitmap (first s)),\n       :rank (get rankmap (second s))}))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 128, "code": "(fn cards [m]\n  (let [ [_suit _rank] (apply vector (map str m)) \n         suit (condp = _suit\n                \"D\" :diamond\n                \"H\" :heart\n                \"S\" :spade\n\t\t\t\t\"C\" :club)\n         rank (condp some [_rank]\n               #{\"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\"} :>> #(- (Integer/parseInt %) 2) \n               #{\"T\" \"J\" \"Q\" \"K\" \"A\"} :>> #(condp = %\n                                           \t\t\"T\" 8\n                                                \"J\" 9\n                                                \"Q\" 10\n                                                \"K\" 11\n                                                \"A\" 12\n                                            )\n               )\n         \n         ]\n    {:suit suit :rank rank}\n    \n    )\n  \n  \n  \n  )", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 128, "code": "(fn cards\n   [card-code]\n   (let [[s c] (seq card-code)\n         suit (fn [code]\n                (condp = code\n                  \\H :heart\n                  \\D :diamond\n                  \\S :spade\n                  \\C :club))\n         rank (fn [code]\n                (condp = code\n                  \\T 8\n                  \\J 9\n                  \\Q 10\n                  \\K 11\n                  \\A 12\n                  :default (some #(= (read-string (str code)) %)(range 2 10))  (- (read-string (str code)) 2)))\n         ]\n     {:suit (suit s) :rank (rank c)}\n        )\n   )", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 128, "code": "(fn card[li](let [suits {\"D\" {:suit :diamond} \n                          \"S\" {:suit :spade} \n                          \"C\" {:suit :club} \n                          \"H\" {:suit :heart}}\n                   values {\"2\" {:rank 0}\n                           \"3\" {:rank 1} \"4\" {:rank 2}\n                           \"5\" {:rank 3} \"6\" {:rank 4}\n                           \"7\" {:rank 5} \"8\" {:rank 6}\n                           \"9\" {:rank 7} \"T\" {:rank 8}\n                           \"J\" {:rank 9} \"Q\" {:rank 10}\n                           \"K\" {:rank 11} \"A\" {:rank 12}} ] \n                (merge  \n                (get suits (str (first li))) \n                (get values (str (second li)))\n                )\n                ))", "user": "5034b623e4b062bc5d7ae168"}, {"problem": 128, "code": "(fn [ [a b] ]\n  (let [ suit { \\D :diamond \\H :heart \\C :club \\S :spade }\n         rank (apply hash-map (interleave '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A) (range 13))) ]  \n    { :suit (suit a) :rank (rank b) }))", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 128, "code": "(fn card\n  [c]\n  (let [suit (subs c 0 1) rank (subs c 1 2)]\n    (assoc  {} \n            :suit\n            (case suit\n              \"D\" :diamond\n              \"H\" :heart\n              \"C\" :club\n              \"S\" :spade)\n            :rank \n            (cond\n              (= rank \"T\") 8\n              (= rank \"J\") 9\n              (= rank \"Q\") 10\n              (= rank \"K\") 11\n              (= rank \"A\") 12\n              :else (- (Integer/valueOf rank) 2)\n            )\n    )))", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 128, "code": "; c = card as 2 char str (see above)\n(fn [c]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spade}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \n                  \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suit-map (first c)), :rank (rank-map (second c))}))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 128, "code": "(fn [xs]\n   {\n    :suit ({\\C :club \\D :diamond \\H :heart \\S :spade} (first xs))\n    :rank ((zipmap (apply str (concat (range 2 10) \"TJQKA\")) (range 13))\n           (second xs))\n    }\n   )", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 128, "code": "(fn [s]\n   (let [[suit rank] (map str (vec s))\n         suit-map {\"D\" :diamond\n                   \"H\" :heart\n                   \"C\" :club\n                   \"S\" :spades}\n         rank-map (zipmap (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range 13))\n         ret (array-map :suit (suit-map suit) :rank (rank-map rank))]\n     ret))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suit-map {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        rank-map (zipmap (seq \"23456789TJQKA\") (range))]\n    {:suit (suit-map s), :rank (rank-map r)}))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 128, "code": "(fn poker-card [card] (let [suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n                  rank-map {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0}]\n  { :suit (suit-map (first card)) :rank (rank-map (second card)) }))", "user": "52c1cc8be4b07a9af579236b"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [ss {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        rs (zipmap\n               [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n               (range))]\n    {:suit (ss s) :rank (rs r)}))", "user": "52c35afce4b07a9af579238c"}, {"problem": 128, "code": "(fn\n    [card]\n    (let [suits-mapping {:D :diamond\n                         :S :spade\n                         :H :heart\n                         :C :club}\n          ranks-mapping {:2 0\n                         :3 1\n                         :4 2\n                         :5 3\n                         :6 4\n                         :7 5\n                         :8 6\n                         :9 7\n                         :T 8\n                         :J 9\n                         :Q 10\n                         :K 11\n                         :A 12}\n          suit (-> card seq first str keyword)\n          rank (-> card seq last str keyword)]\n      {:suit (suit suits-mapping)\n       :rank (rank ranks-mapping)}))", "user": "56826ebce4b0945ebc182a93"}, {"problem": 128, "code": "(fn [c]\n  (let [[s r] (seq c)]\n    (hash-map :suit (case s\n                      \\H :heart\n                      \\D :diamond\n                      \\C :club\n                      \\S :spade)\n              :rank (case r\n                      \\T 8\n                      \\J 9\n                      \\Q 10\n                      \\K 11\n                      \\A 12\n                      (- (int r) (int \\0) 2)))))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 128, "code": "(fn card [x]\n    (let [[suit rank] (seq x)\n          suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n          ranks (zipmap (apply conj (into []\n                                          (seq\n                                            (clojure.string/join\n                                              (range 2 10))))\n                               [\\T \\J \\Q \\K \\A])\n                (range 0 13))\n          ]\n      {:suit (suits suit) :rank (ranks rank)}\n      )\n    )", "user": "56791447e4b05957ce8c6183"}, {"problem": 128, "code": "(fn card [s] \n  (let [suits {\"S\" :spade \"H\" :heart \"C\" :club \"D\" :diamond}\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str (first s))) :rank (ranks (str (last s)))}))", "user": "57023fc2e4b08d47c97781db"}, {"problem": 128, "code": "(fn [[x y]]                                                                                                                   \n  {:suit ({\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club} (str x))                                                             \n   :rank (.indexOf (map str \"23456789TJQKA\") (str y))})", "user": "54a6645be4b09f271ff37c87"}, {"problem": 128, "code": "(fn card [s]\n  (let [suit (first s)\n        n (second s)]\n    {:suit (case suit\n                          \\S :spade\n                          \\H :heart\n                          \\C :club\n                          \\D :diamond)\n     :rank (case n \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 (- (Character/digit n 10) 2))}))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 128, "code": "(fn card [s]\n  (let [[suit rank] (seq s)]\n    {:rank (case rank\n             (\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9) (- (read-string (str rank)) 2)\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12)\n     :suit (case suit\n             \\S :spade\n             \\C :club\n             \\D :diamond\n             \\H :heart)}))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 128, "code": "(fn conv [s]\n  (let [suit (first s)\n        rank (second s)]\n    {:suit ({\\D :diamond\n             \\H :heart\n             \\C :club\n             \\S :spade} suit)\n    :rank (condp = rank\n             \\A 12\n             \\K 11\n             \\Q 10\n             \\J 9\n             \\T 8\n             rank (- (int rank) (int \\2)))}))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 128, "code": "(fn [[s r]]\n            (let [char->suit {\\D :diamond\n                              \\H :heart\n                              \\C :club\n                              \\S :spade}\n                  char->rank (->> \"23456789TJQKA\"\n                                  (map-indexed (comp vec reverse vector))\n                                  (into {}))]\n              {:suit (char->suit s)\n               :rank (char->rank r)}))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 128, "code": "(fn [[s r]]\n  (let\n    [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n     ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n    (hash-map :suit (get suits s) :rank (get ranks r))))", "user": "5250a13ee4b0541d1855b839"}, {"problem": 128, "code": "(fn [card]\n  (let [suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rank [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] ]\n    (assoc\n      (assoc {} :suit (suit (first card)))\n      :rank (.indexOf rank (second card)))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 128, "code": "(fn [card]\n(let [rank-map (conj (into {} (map #(vector (first (str %)) (- % 2)) (range 2 10))) [\\T 8] [\\J 9] [\\Q 10] [\\K 11] [\\A 12])\n      suit-map {\\C :club  \\H :heart  \\S :spade  \\D :diamond}] \n  {:suit (suit-map (first card)) :rank (rank-map (second card))}\n  )\n)", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 128, "code": "(fn [c] {:suit ({\\D :diamond \\C :club \\S :spade \\H :heart} (first c)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second c))})", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 128, "code": "(let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n      ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n  (fn \n    [[suit rank]]\n    {:suit (suits suit) :rank (.indexOf ranks rank)}))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 128, "code": "(fn [card]\n  (let [suit (first card)\n        rank (second card)]\n    (hash-map :suit (condp = suit\n                      \\H :heart\n                      \\D :diamond\n                      \\C :club\n                      \\S :spade)\n              :rank (condp = rank\n                      \\A 12\n                      \\K 11\n                      \\Q 10\n                      \\J 9\n                      \\T 8\n                      (- (Character/digit rank 10) 2)))))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 128, "code": ";(fn [[suit rank]]\n;  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n;   :rank ({\\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11} rank)\n;   })\n\n(fn [[s r]]\n  {:suit ((zipmap \"DHCS\" [:diamond :heart :club :spade]) s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 128, "code": "#(let [a % suit {:D :diamond :S :spade :H :heart :C :club} rank {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12}]\n   {:suit ((-> a first str keyword) suit) :rank ((-> a last str keyword) rank)})", "user": "56ab7578e4b03c432f18733d"}, {"problem": 128, "code": "(fn parse-card [card]\n  (let [\n        suit (first card)\n        rank (last card)\n        suit-map {     \\S :spade\n                       \\D :diamond\n                       \\C :club\n                       \\H :heart} \n        rank-map {\n          \\2 0 \\3 1 \\4 2 \\5 3  \\6 4  \\7 5  \\8 6 \n          \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12\n         }\n        ]\n        {:suit (get suit-map suit)\n         :rank (get rank-map rank)} ))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 128, "code": "#(hash-map \n   :suit (get {\\D :diamond \\C :club \\S :spade \\H :heart} (first %1)) \n   :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %1)))", "user": "56491d05e4b0284900eef63a"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 128, "code": "(fn f [s]\n    (loop [x ((fn toI [ss] (cond (empty? ss) () :else (cons (int (first ss)) (toI (rest ss))))) (seq s)) r {}] \n         (cond\n             (empty? x) r\n             (== (first x) 83) (recur (rest x) (assoc r :suit :spade))\n             (== (first x) 72) (recur (rest x) (assoc r :suit :heart))\n             (== (first x) 68) (recur (rest x) (assoc r :suit :diamond))\n             (== (first x) 67) (recur (rest x) (assoc r :suit :club))\n             (== (first x) 50) (recur (rest x) (assoc r :rank 0))\n             (== (first x) 51) (recur (rest x) (assoc r :rank 1))\n             (== (first x) 52) (recur (rest x) (assoc r :rank 2))\n             (== (first x) 53) (recur (rest x) (assoc r :rank 3))\n             (== (first x) 54) (recur (rest x) (assoc r :rank 4))\n             (== (first x) 55) (recur (rest x) (assoc r :rank 5))\n             (== (first x) 56) (recur (rest x) (assoc r :rank 6))\n             (== (first x) 57) (recur (rest x) (assoc r :rank 7))\n             (== (first x) 84) (recur (rest x) (assoc r :rank 8))\n             (== (first x) 74) (recur (rest x) (assoc r :rank 9))\n             (== (first x) 81) (recur (rest x) (assoc r :rank 10))\n             (== (first x) 75) (recur (rest x) (assoc r :rank 11))\n             (== (first x) 65) (recur (rest x) (assoc r :rank 12))\n             :else (assoc r :NA :NA)\n             )\n         ))", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 128, "code": "(fn [[s n]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6\n             \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} n)})", "user": "571e6d73e4b0145328a76292"}, {"problem": 128, "code": "(fn p[s]\n  (let [suits {\\S :spade \\H :heart \\C :club \\D :diamond}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        v (seq s)]\n        {:suit (get suits (first v)) :rank (get ranks (second v))}))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 128, "code": "(fn rpc\n  [s]\n  (let [suit (first s),\n        rank (second s),\n        ranks {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12, \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7},\n        suits {\\S :spades', \\H :heart, \\D :diamond, \\C :club}]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 128, "code": "(fn poo [s]\n  (let [suite (str (first s))\n        rank (str (last s))\n        ret-value (cond\n     (= suite \"S\") {:suit :spade}\n     (= suite \"H\") {:suit :heart}\n     (= suite \"D\") {:suit :diamond}\n     (= suite \"C\") {:suit :club}\n     :else {})]\n    (assoc ret-value\n      :rank\n      (- (cond\n       (= rank \"T\") 10\n       (= rank \"J\") 11\n       (= rank \"Q\") 12\n       (= rank \"K\") 13\n       (= rank \"A\") 14\n       :else (Integer/parseInt rank)) 2))))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 128, "code": "(fn playCards\n  [string]\n  (let [st (split-at 1 string) pa (hash-map \"D\" :diamond, \"C\" :club, \"H\" :heart, \"S\" :spade)\n        nume (hash-map \"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4 ,\"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12)]\n    (hash-map :suit (get pa (apply str (first st))) :rank (get nume (apply str (second st))))))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 128, "code": "(fn [[suit rank]] {:suit (case suit \n                           \\D :diamond\n                           \\H :heart\n                           \\C :club\n                           \\S :spade)\n  \t\t\t\t   :rank (.indexOf \"23456789TJQKA\" (str rank))})", "user": "57015a1de4b08d47c97781d4"}, {"problem": 128, "code": "(fn\n  [string]\n  (let [game (seq string)\n        nameC (fn [n]\n                 (cond\n                   (= n \\S) :spade\n                   (= n \\H) :heart\n                   (= n \\D) :diamond\n                   (= n \\C) :club))\n        value (fn [n]\n                  (cond\n                    (= n \\2) 0\n                    (= n \\3) 1\n                    (= n \\4) 2\n                    (= n \\5) 3\n                    (= n \\6) 4\n                    (= n \\7) 5\n                    (= n \\8) 6\n                    (= n \\9) 7\n                    (= n \\T) 8\n                    (= n \\J) 9\n                    (= n \\Q) 10\n                    (= n \\K) 11\n                    (= n \\A) 12))]\n        {:suit (nameC (first game)), :rank (value (last game))}))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 128, "code": "(fn [x] ((fn [[x y]] {:suit (get {\"S\" :spade \"D\" :diamond \"C\" :club \"H\" :heart} x) :rank (get {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} y)}) (mapv str x)))", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 128, "code": "(fn [[suit rank]] \n  (let [ranks (zipmap '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A) (range))\n        suits {\\D :diamond \\H :heart \\C :club \\S :spade}]\n  {:suit (suits suit) :rank (ranks rank)}))", "user": "4df73d64535d04ed9115e775"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 128, "code": "(fn [str]\n  (let [suit (get str 0)\n        rank (get str 1)\n        suit-name (get {\\C :club \\D :diamond \\H :heart \\S :spade} suit)\n        rank-name (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)]\n  {:suit suit-name :rank rank-name}))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 128, "code": "(fn [input] {:suit (get {\\D :diamond, \\S :spade, \\H :heart, \\C :club}\n              (first input))\n\n   :rank (get {\\A 12, \\J 9, \\K 11, \\Q 10, \\2 0, \\3 1, \\4 2, \\T 8, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7}\n              (second input))})", "user": "52cbe5dfe4b07d0d72b27352"}, {"problem": 128, "code": "(fn [[su ra]] \n  (let [suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n       rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    \t {:suit (get suit-map su) :rank (get rank-map ra)}))", "user": "57169f93e4b07c98581c3b00"}, {"problem": 128, "code": "(fn [[s r]]\n    {:suit ((zipmap \"DHCS\" [:diamond :heart :club :spade]) s)\n     :rank ((zipmap (concat (apply str (range 2 10)) \"TJQKA\") (range)) r)})", "user": "4f57c913e4b0a7574ea7183f"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits (zipmap (map str \"SHDC\") [:spade :heart :diamond :club])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str suit)) :rank (ranks (str rank))}))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 128, "code": "(fn u\n  [s]\n  {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club}\n          (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11  \\A 12}\n          (second s))})", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 128, "code": "#(\n   (fn [s] (\n     let\n     [cs {\\S :spade, \\H :heart, \\C :club, \\D :diamond}\n      cr {\\2 0,\\3 1,\\4 2,\\5 3,\\6 4,\\7 5,\\8 6,\\9 7,\\T 8,\\J 9,\\Q 10,\\K 11,\\A 12}\n     ]\n     {:suit (cs (first s)), :rank (cr (last s))}\n   ))\n   (seq (str %))\n )", "user": "54c8eb61e4b045293a27f658"}, {"problem": 128, "code": "#(let [suits {\\H :heart \\C :club \\D :diamond \\S :spades}\n       ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n  {:suit (suits (first %)) :rank (ranks (last %))})", "user": "4f8490fae4b033992c121c34"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\S :spade \\D :diamond \\C :club \\H :heart} s)\n   :rank (.indexOf \"23456789TJQKA\" (str r))})", "user": "4daf907aedd6309eace4d17b"}, {"problem": 128, "code": "(fn [string] (let [suits {\"H\" :heart \"C\" :club \"D\" :diamond \"S\" :spade}\n                   ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n                   suit (get suits (str (first string)))\n                   rank (get ranks (str (second string)))]\n            {:suit suit :rank rank}))", "user": "571cd9dce4b0145328a76271"}, {"problem": 128, "code": "(fn decode [s] (let [\n         suitmap {\\D :diamond, \\H :heart, \\S :spade \\C :club}\n         rankmap {\\2 0, \\3 1, \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n         [sc rc] (vec s) \n         result {:suit (suitmap sc) :rank (rankmap rc)}\n        ] result))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 128, "code": "(fn parse [card]\n  (let [suit (first card)\n        rank (last card)\n        suits {\\C :club \\D :diamond \\H :heart \\S :spade}\n        ranks (seq \"23456789TJQKA\")]\n    {:suit (suits suit) :rank (.indexOf ranks rank)}))", "user": "55d68726e4b0e31453f64a99"}, {"problem": 128, "code": "(fn q[x]\n  (let\n    [\n      suits {\n       \\S :spade\n       \\H :heart\n       \\D :diamond\n       \\C :club\n      }\n      cards {\n        \"2\" 0\n        \"3\" 1\n        \"4\" 2\n        \"5\" 3\n        \"6\" 4\n        \"7\" 5\n        \"8\" 6\n        \"9\" 7\n        \"T\" 8\n        \"J\" 9\n        \"Q\" 10\n        \"K\" 11\n        \"A\" 12\n      }\n    ] \n  (into {} [[:suit (suits (first x))] [:rank (cards (apply str (rest x)))]])\n  )\n)", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 128, "code": "#(array-map :suit ({\\D :diamond \\S :spade \\H :heart \\C :club} (first %) )\n            :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %)))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 128, "code": "(fn [[s r :as card]]\n  (let [str->suit\n        {\\D :diamond\n         \\S :spade\n         \\H :heart\n         \\C :club}\n        str->rank\n        (into {\\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12}\n              (for [x (range 8)]\n                [(first (str (+ 2 x))) x]))]\n    {:suit (str->suit s)\n     :rank (str->rank r)}))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 128, "code": "(fn [x]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first x)) \n          :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last x))})", "user": "572a856be4b0f4d77e65123b"}, {"problem": 128, "code": "(fn card-lookup [s]\n  (let [ranks (into {} (map vector (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range 13)))\n        suits {\"H\" :heart \"D\" :diamond \"C\" :club \"S\" :spade}]\n    (assoc {}\n      :suit (suits ((comp str first) s))\n      :rank (ranks ((comp str second) s)))))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 128, "code": "(fn convert [x]\n    {:suit ({\\S :spade \\H :heart \\C :club \\D :diamond} (.charAt x 0)) :rank (.indexOf \"23456789TJQKA\" (int (.charAt x 1)))}\n  )", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suit-mapping {\\D :diamond\n                      \\H :heart\n                      \\C :club\n                      \\S :spade}\n        rank-mapping (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n                             (range 13))]\n    {:suit (suit-mapping suit)\n     :rank (rank-mapping rank)}))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 128, "code": "(fn get-suit-rank [s]\n  (apply merge (map #(get\n          {\\2 {:rank 0}\n           \\3 {:rank 1}\n           \\4 {:rank 2}\n           \\5 {:rank 3}\n           \\6 {:rank 4}\n           \\7 {:rank 5}\n           \\8 {:rank 6}\n           \\9 {:rank 7}\n           \\T {:rank 8}\n           \\J {:rank 9}\n           \\Q {:rank 10}\n           \\K {:rank 11}\n           \\A {:rank 12}\n           \\H {:suit :heart}\n           \\D {:suit :diamond}\n           \\S {:suit :spade}\n           \\C {:suit :club}} %) s)))", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 128, "code": "(fn [human-readable]\n\n  (let [[S R] human-readable\n        s (str S) r (str R)]\n\n    (hash-map\n      :suit\n        (get {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club} s)\n\n      :rank\n        (get\n          (apply assoc\n            {\"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n            (mapcat #(list (str %) (- % 2)) (range 10)))\n          r))))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 128, "code": "(fn [str]\n  (let [[a b] (seq str)]\n    (assoc\n      {:suit \n        (cond (= a \\S) :spade\n              (= a \\H) :heart\n              (= a \\D) :diamond\n              (= a \\C) :club\n              )\n              \n      }\n      :rank\n      (cond (= b \\T)  8\n              (= b \\J) 9\n              (= b \\Q) 10\n              (= b \\K) 11\n             (= b \\A) 12\n             :else (- (int b) (int \\0) 2)\n              )\n      \n     )\n    \n    )\n  \n  )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 128, "code": "(fn [pairs] \n         (let [s {\\H :heart \\D :diamond \\C :club \\S :spade} \n               r {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} \n               p (vec (str pairs)) ] \n           {:suit (s (p 0)) :rank (r (p 1))} ))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 128, "code": "(fn cards [h]\n   (let [c (seq h)\n         s (str (first c))\n         r (str (second c))]\n     {:suit ({\"S\" :spade\n              \"H\" :heart\n              \"D\" :diamond\n              \"C\" :club} s)\n      :rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5\n              \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} r)}\n     )\n   )", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 128, "code": "#(let [[suit rank] %\n       s-map {\\H :heart \\C :club \\D :diamond \\S :spade}\n       r-map (apply hash-map (interleave '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A) (range 13)))]\n  (hash-map :suit (get s-map suit) :rank (get r-map rank)))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 128, "code": "(fn describe-card [[_suit _rnk]]\n                     {:suit ({\\S :spade  \\D :diamond  \\C :club  \\H :heart} _suit)\n                      :rank ({\\2 0  \\3 1  \\4 2  \\5 3  \\6 4  \\7 5  \\8 6  \\9 7  \\T 8  \\J 9  \\Q 10  \\K 11  \\A 12} _rnk)}\n                     )", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade} tens {\"T\" 10 \"J\" 11 \"Q\" 12 \"K\" 13 \"A\" 14}]\n    (let [ranks (fn [r] (if (contains? tens r) (get tens r) (Integer. r)))]\n      (apply (fn [suit rank] {:suit (get suits suit), :rank (- (ranks rank) 2)}) (map #(str %) card))\n      )\n    )\n  )", "user": "4e3ac1b2535deb9a81d77f4c"}, {"problem": 128, "code": "(fn [card] (let [ranks (zipmap \"23456789TJQKA\" (range 13))\n                 suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n                 [s r] (seq card)]\n             {:suit (suits s), :rank (ranks r)}))", "user": "574af03ce4b02ea114799202"}, {"problem": 128, "code": "(fn [card]\n  {:suit (get {\\D :diamond, \\H :heart, \\C :club, \\S :spade} (first card))\n   :rank (count (take-while #(not= % (second card)) [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]))})", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 128, "code": ";(fn str->card [s]\n;  (let [suits {\"C\" :club, \"D\" :diamond, \"H\" :heart, \"S\" :spade}\n;        ranks (into {\"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12} (map #(vector (str (+ % 2)) %) (range 9)))\n;        suit  (str (first s))\n;        rank  (str (second s))]\n;    {:suit (suits suit) :rank (ranks rank)}))\n(fn str->card [[suit rank]]\n  (let [suit-rank-decoder (zipmap \"CDHS23456789TJQKA\"\n                                  [:club :diamond :heart :spade 0 1 2 3 4 5 6 7 8 9 10 11 12])]\n    {:suit (suit-rank-decoder suit) :rank (suit-rank-decoder rank)}))", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 128, "code": "(fn problem-128 [s]\n  (let [suit-map {\\S :spade \\D :diamond \\H :heart \\C :club}\n        rank-map (zipmap \"23456789TJQKA\" (range 13))\n        suit (get s 0)\n        rank (get s 1)]\n    {:suit (suit-map suit) :rank (rank-map rank)}))", "user": "56ac81ace4b03c432f187347"}, {"problem": 128, "code": "#((fn[y](hash-map\n:suit ({\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club} (first y))\n:rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (last y))\n))\n(filter (fn[x](< 0 (count x))) (clojure.string/split % #\"\"))\n)", "user": "574a9132e4b02ea1147991fd"}, {"problem": 128, "code": "#(let [suits {\\D :diamond \\H :heart \\C :club \\S :spades}\n       ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n   {:suit  (suits (first %))\n    :rank (.indexOf ranks (second %))})", "user": "51647faae4b003cf19fdde3b"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits s) :rank (ranks r)}))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 128, "code": "(fn parse-card [s]\n  {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} (first s))\n  :rank ((fn [c]\n          (if (re-find #\"[2-9]\" (str c))\n            (- (read-string (str c)) 2)\n            ({\\T 8, \\J 9, \\Q 10, \\K 11 \\A 12} c)))\n         (second s))})", "user": "57275898e4b0c5bde472c13e"}, {"problem": 128, "code": "#(hash-map :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (nth % 0)) :rank ((zipmap (concat (map (fn [n] (nth (str n) 0)) (range 2 10)) '(\\T \\J \\Q \\K \\A)) (range 13)) (nth % 1)))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 128, "code": "(fn [s]\n\n       (let [suit ({\\H :heart, \\C :club, \\S :spade, \\D :diamond} (first s))\n             rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (second s))]\n\n         {:suit suit, :rank rank}))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks \"23456789TJQKA\"]\n    {:suit (suits (first card)) \n     :rank (.indexOf ranks (str (second card)))}))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 128, "code": "#((fn [card]\n  (let [suit (first (seq card))\n        rank (last (seq card))]\n    {:suit (condp = (str suit)\n                 \"D\" :diamond\n                 \"H\" :heart\n                 \"C\" :club\n                 \"S\" :spades)\n     :rank (condp = (str rank)\n                 \"T\" 8\n                 \"J\" 9\n                 \"Q\" 10\n                 \"K\" 11\n                 \"A\" 12\n                 (- (Integer/parseInt (str rank)) 2)\n                 )})\n   ) %)", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 128, "code": "(fn[x]\n {\n  :suit ((keyword(str (first x))) {:D :diamond, :S :spades, :C :club, :H :heart }) \n  :rank ((keyword(str (second x))) {:2 0, :3 1, :4 2, :5 3, :6 4, :7 5, :8 6, :9 7, :T 8, :J 9, :Q 10, :K 11, :A 12})\n }\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 128, "code": "(fn [card]\n   (let [suits {\"S\" :spade \"D\" :diamond \"H\" :heart \"C\" :club}\n         ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n     (reduce #(assoc {} :suit (get suits %1) :rank (get ranks %2)) (map str card))))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 128, "code": "(fn card [[suit rank]]\n  {:suit ((zipmap  [\\C \\D \\H \\S] [:club :diamond :heart :spade]) suit)\n   :rank ((zipmap (seq \"23456789TJQKA\") (range 13)) rank)})", "user": "572ac718e4b0f4d77e651242"}, {"problem": 128, "code": "(fn string->card-suit\n  [card-string]\n  (let [char->suit #({\\D :diamond, \\H :heart \\C :club \\S :spade} %)\n        char->rank #(let [r (Character/digit % 10)]\n                      (if (> r -1) \n                        (- r 2)\n                        (condp = %\n                          \\T 8 \n                          \\J 9\n                          \\Q 10\n                          \\K 11\n                          \\A 12\n                          )))]\n    {:suit (char->suit (first card-string)) :rank (char->rank (second card-string))}))", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 128, "code": "(fn [[suit rank]]\n   (println suit rank)\n   {:suit ({\\D :diamond \\H :heart \\C :club \\S :space} suit)\n    :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)})", "user": "5590ebb1e4b0277789237677"}, {"problem": 128, "code": "#(zipmap \n  [:suit :rank] \n  (map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 \\S :spade \\H :heart \\D :diamond \\C :club} %)\n  )", "user": "57642916e4b0994c1922fbee"}, {"problem": 128, "code": "(fn ranking[s]\n  (zipmap [:suit :rank] [((fn[s](cond\n                                  (= s \"D\") :diamond\n                                  (= s \"C\") :club\n                                  (= s \"H\") :heart\n                                  (= s \"S\") :spead\n                                  ))\n                          (str (first s)))\n                         ((fn[s](cond\n                   (= s \"2\") 0\n                   (= s \"3\") 1\n                   (= s \"4\") 2\n                   (= s \"5\") 3\n                   (= s \"6\") 4\n                   (= s \"7\") 5\n                   (= s \"8\") 6\n                   (= s \"9\") 7\n                   (= s \"T\") 8\n                   (= s \"J\") 9\n                   (= s \"Q\") 10\n                   (= s \"K\") 11\n                   (= s \"A\") 12)\n             )\n           (str(second s)))\n                         ]\n          )\n  )", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 128, "code": "(fn card-info\n  [code]\n  (let [code-seq (seq code)\n        suit-code (str (first code-seq))\n        rank-code (apply str (rest code-seq))\n        suits {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n        ranks {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n        suit (get suits suit-code)\n        rank (get ranks rank-code)]\n    {:suit suit\n     :rank (if (nil? rank)\n             (- (Integer. rank-code) 2)\n             rank)}))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 128, "code": "(fn [s] (letfn [(suit [c] \n                      (case c \n                        \\D :diamond\n                        \\H :heart\n                        \\S :spade\n                        \\C :club))\n                (rank [c] \n                      (if (and (>= (int c) (int \\2)) (<= (int c) (int \\9))) \n                        (- (int c) (int \\2))\n                        (case c\n                          \\A 12\n                          \\K 11\n                          \\Q 10\n                          \\J 9\n                          \\T 8)))] \n          {:suit (suit (first s)) :rank (rank (last s))}))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suit {\\H :heart \\D :diamond \\S :spade \\C :club}\n        rank (zipmap (concat (map char (range (int \\2) (inc (int \\9))))\n                             \"TJQKA\") (range))]\n    {:suit (suit s) :rank (rank r)}))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 128, "code": "(fn cards\n  [s]\n  (let [[suit rank] s\n        sm {\\S :spade\n            \\H :heart\n            \\D :diamond\n            \\C :club}\n        rm {\\2 0\n            \\3 1\n            \\4 2\n            \\5 3\n            \\6 4\n            \\7 5\n            \\8 6\n            \\9 7\n            \\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12}]\n    {:suit (sm suit)\n     :rank (rm rank)}))", "user": "5574c172e4b05c286339e059"}, {"problem": 128, "code": "#(zipmap [:suit :rank]\n         (map (merge (zipmap [\\S \\H \\C \\D]\n                             [:spade :heart :club :diamond])\n                     (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n                             (range 13))) %))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 128, "code": "(fn [s]\n  (let [suit (case (first s)\n               \\S :spade\n               \\H :heart\n               \\D :diamond\n               \\C :club)\n        rank (if (Character/isDigit (second s))\n               (- (Character/digit (second s) 10) 2)\n               (case (second s)\n                 \\T 8\n                 \\J 9\n                 \\Q 10\n                 \\K 11\n                 \\A 12))]\n    {:suit suit :rank rank}))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 128, "code": "(fn [[s v]]\n  (let [suits {\\D :diamond \\S :spade \\H :heart \\C :club}\n        values (into {} (map-indexed #(vector %2 %1) \"23456789TJQKA\"))]\n    {:suit (get suits s) :rank (get values v)}))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 128, "code": "(fn [c]\n  (let [[s r] (seq c)]\n    {:suit (get {\\S :spade, \\H :heart, \\D :diamond, \\C :club} s)\n     :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)}))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 128, "code": "(fn [s]\n  (let [rank (zipmap (concat (apply str (range 2 10)) (str \"TJQKA\")) (range))\n         suit {\\D :diamond \\S :spades \\H :heart \\C :club}]\n    (assoc {} :suit (suit (first s)) :rank (rank (second s)))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 128, "code": "(fn [input]\n  (let [m {\\D :diamond \\H :heart \\S :spade \\C :club \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        ks [:suit :rank]]\n    (zipmap ks (map #(get m %) (seq input)))))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 128, "code": "(fn [[s r]] {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s) :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r (- (int r) 50))})", "user": "576e3258e4b0979f89651574"}, {"problem": 128, "code": "(fn [cardstr]\n  (let [suitchr (first (seq cardstr))\n        rankchr (second (seq cardstr))\n        irch (int rankchr)\n        suit (cond\n               (= suitchr \\D) :diamond\n               (= suitchr \\H) :heart\n               (= suitchr \\C) :club\n               (= suitchr \\S) :spade)\n        rank (if (<= irch 57)\n               (- irch 50)\n               (cond\n                 (= irch 84) 8 ;10\n                 (= irch 74) 9 ;Jack\n                 (= irch 81) 10 ;Queen\n                 (= irch 75) 11 ;King\n                 (= irch 65) 12 ;Ace\n                 ))]\n    (hash-map :suit suit :rank rank)))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 128, "code": "(fn [card]\n\t(let [\n\t\t[s r] (seq card)\n\t\trank (get (zipmap \"23456789TJQKA\" (range 13)) r)\n\t\tsuit (get {\\S :spade, \\H :heart, \\D :diamond, \\C :club} s)]\n\t\t{:suit suit :rank rank}))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 128, "code": "(fn [card]\n       (let [ ranks  (zipmap \"23456789TJQKA\" (range 13))\n              suites {\\S :spade \\D :diamond \\H :heart \\C :club}\n              [s r] card]\n         {:suit (suites s) :rank (ranks r)}))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 128, "code": "(fn [s]\n    (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n      ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n      {:suit (get suits (first s))\n       :rank (.indexOf ranks (last s))\n       }))", "user": "5245e320e4b09dbe66b56177"}, {"problem": 128, "code": "#(let [[suit rank] (re-seq #\"\\w\" %)\n       suit-symbol (get {\"D\" :diamond \"H\" :heart\n       \t\t\t \t\t \"S\" :spade \"C\" :club}\n                        suit :not-valid)\n       rank-symbol (get (zipmap [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n                                (range 13))\n                        rank :not-valid)]\n   {:suit suit-symbol :rank rank-symbol})", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit (case suit\n           \\H :heart\n           \\D :diamond\n           \\S :spade\n           \\C :club)\n   :rank (case rank\n           \\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12)})", "user": "575cbe44e4b02ea114799374"}, {"problem": 128, "code": "(fn [s] \n  (->> (seq s)\n       (map \n        {\\S [:suit :spade]\n        \\H [:suit :heart]\n        \\D [:suit :diamond]\n        \\C [:suit :club]\n        \\2 [:rank 0]\n        \\3 [:rank 1]\n        \\4 [:rank 2]\n        \\5 [:rank 3]\n        \\6 [:rank 4]\n        \\7 [:rank 5]\n        \\8 [:rank 6]\n        \\9 [:rank 7]\n        \\T [:rank 8]\n        \\J [:rank 9]\n        \\Q [:rank 10]\n        \\K [:rank 11]\n        \\A [:rank 12]\n        } )\n       (flatten)\n       (apply hash-map)\n   ) )", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 128, "code": "(fn \n  [s]\n\n  (let [info (hash-map \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12, \\H :heart, \\D :diamond, \\S :spade, \\C :club)]\n    (assoc (assoc {} :rank (get info (last s))) :suit (get info (first s)))\n        \n     ))", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 128, "code": "#(let [f (subs % 0 1)\n      n (subs % 1 2)]\n  {:suit ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} f)\n   :rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} n)}\n  )", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 128, "code": "(fn [[suit-char rank-char]]\n  {:suit (case suit-char\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n  :rank (let [v (read-string (str rank-char))]\n          (if (number? v)\n            (- v 2)\n            (case v\n              T 8\n              J 9\n              Q 10\n              K 11\n              A 12)))})", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 128, "code": "(fn [x] \n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades} \n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} tmp (seq x)] \n    {:suit (suit-map (first tmp)), :rank (rank-map (last tmp))} \n    )\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 128, "code": "(fn [c] \n\t\t\t{:suit (get {\\S :spades, \\H :heart, \\D :diamond, \\C :club} (first c))\n          \t :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last c))})", "user": "560331dee4b04bb52996e1b5"}, {"problem": 128, "code": "(fn [[s r]]\n    (let [suites {\\S :spade \\H :heart \\D :diamond \\C :club}\n          ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n      {:suit (get suites s)\n       :rank (get ranks r)}))", "user": "577829f9e4b0979f8965165a"}, {"problem": 128, "code": "(fn [s]\n  (let [suit (str (first s))\n        rank (str (last s))\n        suits (hash-map \"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club)\n        ranks (apply hash-map (vec (flatten (map-indexed #(identity [%2 %1]) (flatten (list (map str (range 2 10)) \"T\" \"J\" \"Q\" \"K\" \"A\"))))))]\n    (hash-map :suit (get suits suit) :rank (get ranks rank))))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 128, "code": "(let [suits {\\D :diamond \\C :club \\H :heart \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n               \\T 8 \\J 9  \\Q 10 \\K 11 \\A 12}]\n   (fn recognize-card [c]\n     {:suit (get suits (first c))\n      :rank (get ranks (second c))}))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 128, "code": ";; first solution\n;#(let [suites {\\D :diamond \\H :heart \\C :club \\S :spade}\n;       ranks  {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n;       [suit rank] %]\n;   {:suit (suites suit) :rank (ranks rank)})\n(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank (.indexOf (seq \"23456789TJQKA\") r)})", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 128, "code": "(fn [[s r]] \n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s) \n   :rank ((zipmap \"23456789TJQKA\" (range 13)) r)})", "user": "577202d2e4b0979f896515c0"}, {"problem": 128, "code": "(fn [card]\n    (let [suits {:D :diamond :S :spade :H :heart :C :club}\n          rank {:A 12 :2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11}] \n      {:suit ((keyword (str (first card))) suits) :rank ((keyword (str (second card))) rank)}))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 128, "code": "(fn [s] \n    {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first s))\n     :rank ((apply merge (map hash-map [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))) (second s))})", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 128, "code": "(fn str->card\n  [str]\n  (let [suit ({ \\D {:suit :diamond}\n                \\S {:suit :spades}\n                \\H {:suit :heart}\n                \\C {:suit :club}} (first str))\n        rank ({ \\2 {:rank 0}\n                \\3 {:rank 1}\n                \\4 {:rank 2}\n                \\5 {:rank 3}\n                \\6 {:rank 4}\n                \\7 {:rank 5}\n                \\8 {:rank 6}\n                \\9 {:rank 7}\n                \\T {:rank 8} \n                \\J {:rank 9}\n                \\Q {:rank 10}\n                \\K {:rank 11}\n                \\A {:rank 12}} (second str))]\n    (merge suit rank)))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 128, "code": "#(let [rk (fn [car] (.indexOf \"23456789TJQKA\" (int car)))\n       st {\\S :spade \\H :heart \\D :diamond \\C :club}]\n   {:suit (get st (first %) )\n     :rank (rk (second %))\n   }\n   )", "user": "52503747e4b0541d1855b828"}, {"problem": 128, "code": "(fn [[s r]] {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})", "user": "5776385fe4b0979f89651632"}, {"problem": 128, "code": "(fn [card]\n  (let [s (first card)\n        r (second card)]\n    {:suit ({\\H :heart, \\S :spade, \\C :club, \\D :diamond} s)\n     :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} r)}))", "user": "56f53962e4b046a417f9206c"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (hash-map \n   :suit\n   (condp = suit\n     \\D :diamond\n     \\C :club\n     \\H :heart\n     \\S :spades\n     )\n   :rank\n   (condp = rank\n     \\T 8\n     \\J 9\n     \\Q 10\n     \\K 11\n     \\A 12\n     (- (int rank) 50)\n     )\n   )\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 128, "code": "(fn [x] \n   (let [\n      suites {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spades}\n      ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]   \n   \n     (into {} {:suit (get suites (str (first x)))  :rank (get ranks (str (second x)))}  )\n   )\n)", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 128, "code": "#(zipmap [:suit :rank]\n         (map (merge (zipmap [\\S \\H \\C \\D]\n                             [:spade :heart :club :diamond])\n                     (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n                             (range 13))) %))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 128, "code": "(fn [[c1 c2]]\n   (let [suits (zipmap \"HSDC\" [:heart :spade :diamond :club])\n         ranks (zipmap (concat (apply str (range 2 10)) \"TJQKA\") (range))]\n     {:suit (suits c1) :rank (ranks c2)}))", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 128, "code": "(fn [card]\n  (let [suites {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6\n               \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suites (first card))\n     :rank (ranks (last card))}))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 128, "code": "#(zipmap [:suit :rank]\n         (map (merge (zipmap [\\S \\H \\C \\D]\n                             [:spade :heart :club :diamond])\n                     (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n                             (range 13))) %))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 128, "code": "(fn map-cards [st]\n  (let [suits (first st)\n        rank (last st)\n        auxmap {\\S :spade, \\H :heart, \\D :diamond, \\C :club\n                \\2 0, \\3 1, \\4 2, \\5 3, \\6 4 \\7 5, \\8 6, \\9 7, \\T 8\n                \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (hash-map :suit (auxmap suits) :rank (auxmap rank))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 128, "code": "(fn Cards [ [suit value] ]\n  (letfn [(conv-suit [suit]\n            (condp = suit\n              \\S :spade\n              \\H :heart\n              \\D :diamond\n              \\C :club))\n\n          (conv-value [num]\n            (cond\n                  (= num \\T)  8\n                  (= num \\J)  9\n                  (= num \\Q)  10\n                  (= num \\K)  11\n                  (= num \\A)  12\n                  :else\n                    (- (Integer/parseInt (str num)) 2)))]\n    {:suit (conv-suit suit) :rank (conv-value value)}))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 128, "code": "(fn [s]\n  (let [rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        suit-map {\\D :diamond, \\H :heart, \\C :club, \\S :spade}]\n    {:suit (suit-map (first s)), :rank (rank-map (second s))}))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 128, "code": "(fn [card-str]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (zipmap [:suit :rank]\n            [(get suits (first card-str))\n             (get ranks (second card-str))])))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 128, "code": "(fn [card]\n  (let [[a b] (seq card)]\n    (let [M {\\D :diamond \\H :heart \\C :club \\S :spade}  N \"23456789TJQKA\"]\n      (let [suit (get M a) ]\n        (let [n (clojure.string/.indexOf N (str b))]\n          {:suit suit :rank n})))))", "user": "579601c8e4b0e215f87e8492"}, {"problem": 128, "code": "#(let [[s r] %]\n   {:rank (case r \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 (- (int r) 50))\n    :suit ({\\S :spade \\H :heart \\C :club \\D :diamond} s)})", "user": "50e5bca5e4b09ae9427b0e75"}, {"problem": 128, "code": "(comp (partial zipmap [:suit :rank])\n      (juxt (comp {\\D :diamond \\H :heart \\C :club \\S :spade}\n                  first)\n            (comp #(case %\n                     \"T\" 8\n                     \"J\" 9\n                     \"Q\" 10\n                     \"K\" 11\n                     \"A\" 12\n                     (- (Integer/parseInt %) 2))\n                  str\n                  second)))", "user": "50b65966e4b0a86f8358ca6c"}, {"problem": 128, "code": "(fn f [card]\n  (let [suits {\"d\" :diamond \"h\" :heart \"s\" :spade \"c\" :club}\n        get-suit #(suits (clojure.string/lower-case (str %)))\n        ranks {\"t\" 8 \"j\" 9 \"q\" 10 \"k\" 11 \"a\" 12}\n        get-rank #(if-let [r (ranks (clojure.string/lower-case (str %)))]\n                    r\n                    (- (Long/parseLong (str %)) 2))] ; - 2 because 2=0\n    {:suit (get-suit (first card))\n     :rank (get-rank (second card))}))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 128, "code": "(let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n      ranks {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n  (fn [x]\n    (let [l (first x)\n          r (second x)]\n      {:suit (suits l), :rank (or (ranks r) (- (int r) (int \\2)))})))", "user": "57717915e4b0979f896515b3"}, {"problem": 128, "code": "(fn\n  [s]\n  {:suit (condp = (first s)\n           \\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club),\n   :rank (let [r (second s)]\n           (cond\n             (= r \\A) 12\n             (= r \\K) 11\n             (= r \\Q) 10\n             (= r \\J) 9\n             (= r \\T) 8\n             :else (- (read-string (str r)) 2)))})", "user": "56bb652ae4b0f26550335953"}, {"problem": 128, "code": "#(array-map\n  :suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} (first %))\n   :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (last %)))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 128, "code": "(fn [stuff-in]\n  (let [\n        suit\n         (condp = (first stuff-in)\n            \\D :diamond\n            \\H :heart\n            \\S :spade\n            \\C :club)\n        rank\n          (condp = (second stuff-in)\n            \\2 0\n            \\3 1\n            \\4 2\n            \\5 3\n            \\6 4\n            \\7 5\n            \\8 6\n            \\9 7\n            \\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12)]\n    {:suit suit\n     :rank rank}))", "user": "571d9669e4b0145328a7627f"}, {"problem": 128, "code": "(fn [s]\n  (let [suit {\"H\" :heart \"C\" :club \"S\" :spade \"D\" :diamond}\n        rank (into {}\n                   (map hash-map\n                        [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n                        (iterate inc 0)))\n        info (map str s)]\n    {:suit (suit (first info))\n     :rank (rank (second info))}))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 128, "code": "(fn [s]\n    (let\n      [\n        values\n        (hash-map\n          \\2 0  \\3 1  \\4 2  \\5 3  \\6 4  \\7 5  \\8 6  \\9 7  \\T 8  \\J 9  \\Q 10  \\K 11  \\A 12\n        )\n        suits\n        (hash-map\n          \\C :club\n          \\D :diamond\n          \\H :heart\n          \\S :spade\n        )\n      ]\n      (hash-map\n        :suit\n        (get suits (first s))\n        :rank\n        (get values (second s))\n      )\n    )\n  )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 128, "code": "(fn [s]\n  (let [a (first s)\n        b (second s)\n        i (- (int b) (int \\2))]\n    {:suit (case a\n             \\S :spades\n             \\H :heart\n             \\D :diamond\n             \\C :club\n             nil)\n    :rank (cond\n            (<= 0 i 7) i\n           (= b \\T) 8\n           (= b \\J) 9\n           (= b \\Q) 10\n           (= b \\K) 11\n           (= b \\A) 12)}))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 128, "code": "(fn [c] (let [v (seq c)] (let [s (first v) r (nth v 1)]\n                                  { :suit (case s\n                                     \\D :diamond\n                                     \\H :heart\n                                     \\C :club\n                                     \\S :spade)\n                                    :rank (case r\n                                     \\2 0\n                                     \\3 1\n                                     \\4 2\n                                     \\5 3\n                                     \\6 4\n                                     \\7 5\n                                     \\8 6\n                                     \\9 7\n                                     \\T 8\n                                     \\J 9\n                                     \\Q 10\n                                     \\K 11\n                                     \\A 12)}\n                                  )))", "user": "4e5e9f6b535d8a8b8723a2d2"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suit (zipmap [\"S\" \"H\" \"D\" \"C\"]\n                    [:spade :heart :diamond :club])\n        rank (zipmap (concat (map str (range 2 10))\n                            [\"T\" \"J\" \"Q\" \"K\" \"A\"])\n                      (range))]\n  {:suit (suit (str s)) :rank (rank (str r))}))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 128, "code": "(fn [s]\n    (let [rks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 0 13))\n          sts {\\D :diamond \\H :heart \\S :spade \\C :club}]\n      {:suit (sts (first s)) :rank (rks (last s))}))", "user": "4e837808535db62dc21a62d9"}, {"problem": 128, "code": "(fn [c]\n  (let\n    [\n     [s r] (seq c)\n     suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n     rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n            \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n    ]\n    {:suit (suit s) :rank (rank r)}\n  )\n)", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 128, "code": "(fn [s] (hash-map :suit (case (get s 0) \\D :diamond \\H :heart \\S :spade \\C :club) \n                                                             :rank (case (get s 1) \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8\n                                                                     \\J 9 \\Q 10 \\K 11 \\A 12)))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 128, "code": "(fn [[s r]]\n  (hash-map :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n            :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)) r)))", "user": "56795deae4b05957ce8c6187"}, {"problem": 128, "code": "(fn [x] \n  (let [\n        suits {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n        ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n        [a b] x\n        sa (str a)\n        sb (str b)\n        ]\n    {:suit (suits sa) :rank (ranks sb)}\n    )\n  )", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 128, "code": "(fn[[s r]]\n  { :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n    :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 128, "code": "(fn [s]\n  (let [smap {\\S :spade \\C :club \\D :diamond \\H :heart}\n        rmap {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (assoc {} :suit (smap (first s)) :rank (rmap (last s)))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 128, "code": "(fn [s]\n  {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club}\n          (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11  \\A 12}\n          (second s))})", "user": "50ae22c3e4b0a40c9cfb08d0"}, {"problem": 128, "code": "(fn [card]\n    (let [suits     { \\D :diamond \\H :heart \\C :club \\S :spade }\n          ranks     { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n      { :suit  (get suits (first card))  :rank (get ranks (second card)) }))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 128, "code": "#(hash-map \n  :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first %)) \n  :rank ((zipmap '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A) (iterate inc 0)) (second %)))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 128, "code": "(fn xcard [card-str] \n  (let [\n    rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12 } (subs card-str 1))\n    suit ({\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club} (subs card-str 0 1))] \n   {:suit suit :rank rank}))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 128, "code": "(fn[x]\n    {:suit (case (first x)\n        \\D :diamond\n        \\H :heart\n        \\C :club\n        \\S :spade)\n    :rank (.indexOf \"23456789TJQKA\" (int (second x)))})", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 128, "code": "(fn recog[s]\n  {:suit (condp = (first s)\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n  :rank (condp = (second s)\n          \\2 0\n          \\3 1\n          \\4 2\n          \\5 3\n          \\6 4\n          \\7 5\n          \\8 6\n          \\9 7\n          \\T 8\n          \\J 9\n          \\K 11\n          \\A 12\n          \\Q 10)})", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 128, "code": "(fn recog [val]\n  (let [cards {\\D :diamond \\H :heart \\C :club \\S :spade\n               \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5\n               \\6 4 \\5 3 \\4 2 \\3 1 \\2 0}\n        [suit val] (map cards (seq val))] \n  {:suit suit :rank val}))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ({\\C :club, \\D :diamond, \\H :heart, \\S :spade} suit)\n   :rank (or ({\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} rank)\n             (- (Character/getNumericValue rank) 2))})", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 128, "code": "(fn [code]\n  (let [suit (first code)\n        rank (second code)]\n    {:suit (case suit\n             \\S :spade\n             \\H :heart\n             \\D :diamond\n             \\C :club)\n     :rank (condp = rank\n             \\A 12\n             \\K 11\n             \\Q 10\n             \\J 9\n             \\T 8\n             (- (Character/digit rank 10) 2))}))", "user": "57cd7498e4b0c746388ab897"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit (case suit\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (case rank\n           \\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12)\n  }\n)", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "56958a16e4b0dcc4269f4129"}, {"problem": 128, "code": "(fn [s] (let [suits {\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club} ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11 \"A\" 12}] {:suit (get suits (-> s first str)) :rank (get ranks (-> s last str))}))", "user": "57b45257e4b0fbc9809a2796"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [ref-suites {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ref-ranks (into {} (map vector [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13)))]\n    {:suit (ref-suites suit) :rank (ref-ranks rank)}))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 128, "code": "(fn \n  [card]\n  (letfn [(suit-char [card] (subs card 0 1))\n          (suit? [card]\n            (cond\n              (= (suit-char card) \"C\") :club\n              (= (suit-char card) \"D\") :diamond\n              (= (suit-char card) \"H\") :heart\n              (= (suit-char card) \"S\") :spade\n              ))\n          (rank? [card]\n            (.indexOf [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n                      (subs card 1 2)))\n          ]\n    (let [card-as-map {}]\n      (assoc (assoc card-as-map :suit (suit? card))\n             :rank (rank? card))\n      )\n    )\n  )", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 128, "code": "(fn recognize-playing-cards [cs]\n  (letfn [(to-suit [c]\n            (condp = c\n              \\D {:suit :diamond}\n              \\H {:suit :heart}\n              \\C {:suit :club}\n              \\S {:suit :spade}\n              {:suit (str \"no such suit for value:\" c)}))\n          (to-rank [c]\n            {:rank (first\n                    (first\n                     (filter #(= c (second %))\n                             (map-indexed vector\n                                          \"23456789TJQKA\"))))})]\n    (merge (to-suit (first cs)) (to-rank (second cs)))))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 128, "code": "(fn [card]\n  (let [get-suit (fn [suit-chr] ({\\S :spade \\D :diamond \\H :heart \\C :club} suit-chr))\n        get-rank (fn [rank-chr] (if (<= (int \\2) (int rank-chr) (int \\9))\n                                  (- (int rank-chr) (int \\2))\n                                  ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank-chr)))]\n    (assoc nil :suit (get-suit (first (seq card))) :rank (get-rank (last (seq card))))))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 128, "code": "(fn\n  [n]\n  (let [s {\\D :diamond \\S :spade \\H :heart \\C :club}\n        c {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get s (first n)) :rank (get c (second n))}))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 128, "code": "(fn [s] \n  (let [suits {:H :heart, :D :diamond, :C :club, :S :spade}\n        rank {:2 0, :3 1, :4 2, :5 3, :6 4, :7 5, :8 6, :9 7, :T 8, :J 9, :Q 10, :K 11, :A 12}]\n    (hash-map :suit (get suits (keyword (subs s 0 1))) :rank (get rank (keyword (subs s 1 2))))\n\t\t))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 128, "code": "(fn [w]\n  (let [r (zipmap \"23456789TJQKA\" (range))\n        s {\\D :diamond \\H :heart \\C :club \\S :spade}]\n    {:suit (s (nth w 0)) :rank (r (nth w 1))}))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 128, "code": "(let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        ranks (zipmap \"23456789TJQKA\" (range 13))\n        xforms {:suit #(->> (first %) suits)\n                :rank #(->> (second %) ranks)}]\n    (fn [v] (into {} (map (fn [[k xform]] [k (xform v)]) xforms))))", "user": "55568a7de4b0deb715856e1c"}, {"problem": 128, "code": "(fn decode-card [code]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\A 12 \\K 11 \\Q 10 \\T 10 \\J 9}\n        get-rank (fn [x]\n                   (cond\n                    (Character/isDigit x) (- (Character/getNumericValue x) 2)\n                    (= \\T x) (- (ranks x) 2)\n                    :else (ranks x)))]\n    (-> (assoc {} :suit (suits (first code)))\n        (assoc :rank (get-rank (last code))))))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 128, "code": "(fn [x] {\n\t:suit \n\t({ \\H :heart \\D :diamond \\C :club } (first x))\n\t:rank\n\t(.indexOf \"23456789TJQKA\" (int (second x)))\n})", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 128, "code": "(fn [hr] (let [hrs (seq hr)] {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} (first hrs))\n           \t\t\t\t\t  :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second hrs))}))", "user": "57b60e46e4b0fbc9809a27b6"}, {"problem": 128, "code": "(fn [card]\n  (let [suit (->>\n              (seq card)\n              (first)\n              (get {\\D :diamond \\H :heart \\S :spades \\C :club}))\n        rank (->>\n              (seq card)\n              (second)\n              (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}))]\n    {:suit suit :rank rank})\n  )", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 128, "code": "(fn [x]\n  (let [ suit (subs x 0 1)\n         rank (subs x 1 2) \n         suitmap { :D :diamond :H :heart :S :spade :C :club }\n         ranklist [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] ]\n    {:suit (get-in suitmap [(keyword suit)]) :rank (.indexOf ranklist rank)}\n    ))", "user": "57e572b5e4b0bfb2137f5ad7"}, {"problem": 128, "code": "(fn recognize-card [card]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first card))\n   :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0} \n              (second card))})", "user": "571c2babe4b07c98581c3b73"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 128, "code": "(fn cards [s]\n  (let [suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n        ranks (apply merge {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (map #(hash-map (str %) (- % 2)) (range 2 10)))\n        [suit rank] (map str (seq s))]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 128, "code": "(fn [s]\n  (->> s\n    vec\n    (map #({\\S :spade \\H :heart \\D :diamond \\C :club \n            \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n            \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} %))\n    (interleave [:suit :rank])\n    (#(apply  hash-map %))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 128, "code": "(fn [s] (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n              ranks (zipmap (seq \"23456789TJQKA\") (range) )]\n          { :suit (suits (first s)) :rank (ranks (second s))}))", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 128, "code": "(fn parse[[s c]]{:suit ({\\S :spade \\D :diamond \\H :heart \\C :club} s), :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} c) })", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 128, "code": "#(assoc {} :suit ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} (-> % first str)) :rank (.indexOf \"23456789TJQKA\" (-> % second str)))", "user": "576df252e4b0979f8965156f"}, {"problem": 128, "code": "#(let [cards \"23456789TJQKA\"\n       suits {\"S\" :spade \"D\" :diamond \"H\" :heart \"C\" :club}]\n        {:suit (suits (-> % first str)) \n         :rank (.indexOf cards (-> % second str))})", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 128, "code": "(fn [s]\n  (letfn[\n         (to-suit [c]\n           (case c\n             \\S :spade\n             \\H :heart\n             \\D :diamond\n             \\C :club))\n         \n         (to-rank [c]\n           (case c\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12\n             (- (Integer/parseInt (str c)) 2)))]\n    \n    {:suit (to-suit (first s)) :rank (to-rank (last s))}))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 128, "code": "(fn [s]\n  {:suit (case (first s)\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (case (second s)\n           \\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12)})", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r (- (int r) 50))})", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 128, "code": "(fn [card]\n  (let [suit (first card)\n        rank (second card)\n        suit-map {\\D :diamond\n                  \\H :heart\n                  \\C :club\n                  \\S :spade}\n        rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n                  \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit-map suit) :rank (rank-map rank)}))", "user": "574e84e0e4b02ea114799243"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spades} s)\n   :rank ((zipmap\n            (concat\n              (map (comp first str) (range 2 10))\n              [\\T \\J \\Q \\K \\A])\n            (range 0 13))\n          r)})", "user": "530e75d5e4b08068f379ecba"}, {"problem": 128, "code": "(fn [s]\n  (loop [x (sequence s) ans {}]\n    (if (empty? x)\n      ans\n      (recur (rest x) (conj ans (#(if (= % \\S)\n                                      [:suit :spade]\n                                      (if (= % \\D)\n                                        [:suit :diamond]\n                                        (if (= % \\H)\n                                          [:suit :heart]\n                                          (if (= % \\C)\n                                            [:suit :club]\n                                            (if (= % \\2)\n                                              [:rank 0]\n                                              (if (= % \\3)\n                                                [:rank 1]\n                                                (if (= % \\4)\n                                                  [:rank 2]\n                                                  (if (= % \\5)\n                                                    [:rank 3]\n                                                    (if (= % \\6)\n                                                      [:rank 4]\n                                                      (if (= % \\7)\n                                                        [:rank 5]\n                                                        (if (= % \\8)\n                                                          [:rank 6]\n                                                          (if (= % \\9)\n                                                            [:rank 7]\n                                                            (if (= % \\T)\n                                                              [:rank 8]\n                                                              (if (= % \\J)\n                                                                [:rank 9]\n                                                                (if (= % \\Q)\n                                                                  [:rank 10]\n                                                                  (if (= % \\K)\n                                                                    [:rank 11]\n                                                                    (if (= % \\A)\n                                                                      [:rank 12]))))))))))))))))) (first x) ))))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {:D :diamond :H :heart :C :club :S :spade}\n        ranks (zipmap [:2 :3 :4 :5 :6 :7 :8 :9 :T :J :Q :K :A] (range 13))\n        [s r] (map #(keyword (str %)) (seq card))]\n    {:suit (s suits)\n     :rank (r ranks)}))", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 128, "code": "#(hash-map \n  :suit ({\\S :spade \\C :club \\H :heart \\D :diamond} (first %))\n  :rank ((apply hash-map (interleave '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A) (range))) (last %)))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 128, "code": "(let [suits {\\D :diamond\n             \\H :heart\n             \\S :spade\n             \\C :club}\n      ranks (apply hash-map (interleave [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)))]\n  (fn [[s r]]\n    {:suit (suits s) :rank (ranks r)}))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 128, "code": "(fn f [st] (let [xy (seq st) \n                 x (first xy)\n                 y (last xy)]\n             {:suit (#(cond \n                        (= % \\D) :diamond\n                        (= % \\H) :heart\n                        (= % \\S) :spade\n                        :else :club) x) \n             :rank (#(cond\n                       (= % \\A) 12\n                       (= % \\K) 11\n                       (= % \\Q) 10\n                       (= % \\J) 9\n                       (= % \\T) 8\n                       :else (compare % \\2)\n                       ) y)}\n             ))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 128, "code": "(fn rc [n]\n  {:suit (\n          {\n           \\C :club\n           \\D :diamond\n           \\H :heart\n           \\S :spade\n           }\n          (first n)) :rank (\n                            {\n                             \\2 0\n                             \\3 1\n                             \\4 2\n                             \\5 3\n                             \\6 4\n                             \\7 5\n                             \\8 6\n                             \\9 7\n                             \\T 8\n                             \\J 9\n                             \\Q 10\n                             \\K 11\n                             \\A 12\n                             }\n                            (second n))})", "user": "56069006e4b08b23635d3174"}, {"problem": 128, "code": "(fn [x]\n       (let [sr (seq x)\n             suit (first sr)\n             rank (second sr)\n             suit-map {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n             rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T, 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n         (assoc {} :suit (suit-map suit) :rank (rank-map rank))))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 128, "code": "(fn recognize-playing-cards [s]\n  {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club}\n           (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n           (second s))})", "user": "57f81524e4b0d3187e900913"}, {"problem": 128, "code": "(fn playingCards\n  [s]\n  (let [suit {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    (apply hash-map [:suit (suit (first s)), :rank (rank (second s))])\n    ))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 128, "code": "(fn [code]\n  (let [[suit rank] (into [] (seq code))\n        suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n\t{:suit (get suits suit) :rank (get ranks rank)}))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 128, "code": "(let [m-suit \n  {\\S :spade, \\C :club, \\D :diamond \\H :heart},\n      m-rank \n  {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n  (fn [[s r]] \n   {:suit (m-suit s),\n     :rank (m-rank r)}) )", "user": "57f9011ee4b0d3187e900935"}, {"problem": 128, "code": "(fn [card-str]\n  (let [suits {\\H :heart, \\D :diamond, \\C :club, \\S :spade}\n        ranks {\\2 0, \n               \\3 1, \n               \\4 2, \n               \\5 3, \n               \\6 4,\n               \\7 5,\n               \\8 6,\n               \\9 7,\n               \\T 8,\n               \\J 9,\n               \\Q 10,\n               \\K 11,\n               \\A 12}]\n    {:suit (suits (first card-str)),\n     :rank (ranks (second card-str))}))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 128, "code": "(fn cards\n  [s]\n  (let [suit (first (seq s))\n        n    (second(seq s))]\n    {:suit (cond (= suit \\D) :diamond\n                 (= suit \\H) :heart\n                 (= suit \\S) :spade\n                 (= suit \\C) :club)\n     :rank (cond (= n \\T)  8\n                 (= n \\J)  9\n                 (= n \\Q) 10\n                 (= n \\K) 11\n                 (= n \\A) 12\n                 :else (- (read-string (str n)) 2))}))", "user": "57f8153de4b0d3187e900916"}, {"problem": 128, "code": "(fn [n]\n  {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club}\n          (first n))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11  \\A 12}\n          (second n))} \n  )", "user": "57f81532e4b0d3187e900914"}, {"problem": 128, "code": "(fn [c] (let [rank (zipmap \"23456789TJQKA\" (range 13))\n                 sts {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n                 [s r] (seq c)]\n             {:suit (sts s), :rank (rank r)}))", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 128, "code": "(fn card-rank [card-code]\n  (let [suit (zipmap (map str \"CHDS\") [:club :heart :diamond :spade])\n        rank (zipmap (concat \n                      (map str (range 2 10))\n                      (map str \"TJQKA\")\n                      ) (range 13))\n        ]\n    {:suit (get suit (str (first card-code))) :rank (get rank (str (second card-code)))}\n    ))", "user": "57f81045e4b0d3187e90090f"}, {"problem": 128, "code": "(fn [s]\n  (let [lst  (seq s)\n        msuits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        mrank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (get msuits (first lst)) :rank (get mrank (last lst))}))", "user": "57f81549e4b0d3187e900918"}, {"problem": 128, "code": "#(let [rank {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0}\n       suit {\\S :spade \\H :heart \\D :diamond \\C :club}]\n   {:suit (suit (first %))\n    :rank (rank (second %))})", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 128, "code": "(fn [cards]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first cards)), :rank (rank-map (last cards))}\n  ))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 128, "code": "(fn cards [a]\n  (zipmap '(:suit :rank) (concat (list(cond  (= (str (first a)) \"D\") :diamond\n         (= (str(first a)) \"H\") :heart\n         (= (str(first a)) \"C\") :club\n         :else :spade))\n  (list(cond\n         (= (str (second a)) \"2\") 0\n         (= (str (second a)) \"3\") 1\n         (= (str (second a)) \"4\") 2\n         (= (str (second a)) \"5\") 3\n         (= (str (second a)) \"6\") 4\n         (= (str (second a)) \"7\") 5\n         (= (str (second a)) \"8\") 6\n         (= (str (second a)) \"9\") 7\n    (= (str (second a)) \"T\") 8\n    (= (str (second a)) \"J\") 9\n    (= (str (second a)) \"Q\") 10\n    (= (str (second a)) \"K\") 11\n    :else 12)))))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 128, "code": "(fn cartas\n  [string]\n  {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club}\n          (first string))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11  \\A 12}\n          (second string))})", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "57f81534e4b0d3187e900915"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "57f81569e4b0d3187e900919"}, {"problem": 128, "code": "(fn play_cards\n  [s]\n  (let [suit (first (seq s))\n        n    (second(seq s))]\n    {:suit (cond (= suit \\D) :diamond\n                 (= suit \\H) :heart\n                 (= suit \\S) :spade\n                 (= suit \\C) :club)\n     :rank (cond (= n \\T)  8\n                 (= n \\J)  9\n                 (= n \\Q) 10\n                 (= n \\K) 11\n                 (= n \\A) 12\n                 :else (- (- (int n) (int \\0)) 2))}))", "user": "57f81544e4b0d3187e900917"}, {"problem": 128, "code": "(fn [string]\n  (let [suit (subs string 0 1) rank (subs string 1) result {}]\n    (let [suit1\n      (cond\n       (= suit \"D\") :diamond\n       (= suit \"H\") :heart\n       (= suit \"C\") :club\n       :else :spade)\n          rank1\n      (cond\n       (= rank \"A\") 12\n       (= rank \"K\") 11\n       (= rank \"Q\") 10\n       (= rank \"J\") 9\n       (= rank \"T\") 8\n       :else (- (read-string rank) 2))]\n          {:suit suit1 :rank rank1}\n    \n    )))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 128, "code": "(fn [card]\n  (let [card-upper (clojure.string/upper-case card)\n        suit-char  (first  card-upper)\n        rank-char  (second card-upper)\n        suits {\\H :heart, \\C :club, \\D :diamond, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8,\n               \\J 9, \\Q 10, \\K 11, \\A 12}\n        cur-suit (suits suit-char)\n        cur-rank (ranks rank-char)]\n    {:suit cur-suit :rank cur-rank}))", "user": "5803cd8fe4b0a837a8b30c96"}, {"problem": 128, "code": "(fn parse-card [[suit value]]\n    {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n     :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} value)})", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-char-to-suit (fn [ch] (case ch\n                                     \\C :club\n                                     \\D :diamond\n                                     \\H :heart\n                                     \\S :spade))\n        rank-char-to-int (fn [rank] (case rank\n                                      \\A 12\n                                      \\K 11\n                                      \\Q 10\n                                      \\J 9\n                                      \\T 8\n                                      (-> rank str java.lang.Integer/parseInt (- 2))))\n\n        [suit-char rank-char] (seq (char-array s))]\n    {:suit (suit-char-to-suit suit-char)\n     :rank (rank-char-to-int rank-char)}))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 128, "code": "(fn recoginze-playing-cards [str]\n  (let [suits {\\H :heart \\C :club \\D :diamond \\S :spades}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n               \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits (first str)) :rank (ranks (last str))}))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 128, "code": "(fn\n  [card]\n  (let [suits {\\H :heart\n              \\D :diamond\n              \\C :club\n              \\S :spade}\n        ranks {\\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12}]\n    {:suit (suits (first card)) :rank (ranks (second card))}))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits s)\n     :rank (ranks r)}))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 128, "code": "#(let [suitMap {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n       rankMap (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (suitMap (first %)), :rank (rankMap (last %))}\n  )", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 128, "code": "(fn [s]\n  (let [[raw-suit raw-rank] (seq s)]\n    {:suit (case raw-suit\n             \\D :diamond\n             \\H :heart\n             \\C :club\n             \\S :spade)\n     :rank (case raw-rank\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12\n             (- (Integer/parseInt (str raw-rank)) 2))}))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 128, "code": "(fn recognizeCard [c] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first c)) :rank ((zipmap \"23456789TJQKA\" (range)) (second c))})", "user": "562add6de4b00e49c7cb4834"}, {"problem": 128, "code": "(fn [s]\n  (let [[suit rank] (map str s)]\n    (conj {}\n          (cond\n            (= suit \"S\") [:suit :spade]\n            (= suit \"H\") [:suit :heart]\n            (= suit \"D\") [:suit :diamond]\n            (= suit \"C\") [:suit :club])\n          (cond\n            (= rank \"2\") [:rank 0]\n            (= rank \"3\") [:rank 1]\n            (= rank \"4\") [:rank 2]\n            (= rank \"5\") [:rank 3]\n            (= rank \"6\") [:rank 4]\n            (= rank \"7\") [:rank 5]\n            (= rank \"8\") [:rank 6]\n            (= rank \"9\") [:rank 7]\n            (= rank \"T\") [:rank 8]\n            (= rank \"J\") [:rank 9]\n            (= rank \"Q\") [:rank 10]\n            (= rank \"K\") [:rank 11]\n            (= rank \"A\") [:rank 12]))))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 128, "code": "(fn [[s r]] \n    (let[   suit {\\S :spade \\H :heart \\D :diamond \\C :club} \n            rank (zipmap \"23456789TJQKA\" (range))] \n        {\n            :suit (suit s)\n            :rank (rank r)\n        }\n    )\n)", "user": "580c8fcee4b0849f6811b721"}, {"problem": 128, "code": "#(let [x (seq %)]\n   {:suit ({\\C :club, \\D :diamond, \\H :heart, \\S :spade} (first x))\n    :rank ((zipmap \"23456789TJQKA\" (range)) (second x))})", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 128, "code": "(fn [[suit rank]]\n    (let [suits (zipmap \"DHCS\" [:diamond :heart :club :spade])\n          ranks  (zipmap \"23456789TJQKA\" (range 0 13))]\n      {:suit (suits suit) :rank (ranks rank)}))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A  12}\n        [sc rc] (vec card)]\n    {:suit (suits sc) :rank (ranks rc)}))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (case s\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n\n   :rank (case r\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12\n           (- (int r) 50))})", "user": "55fbc657e4b0f488688e0666"}, {"problem": 128, "code": "(fn\n  [str]\n  (let [suits {\\H :heart \\D :diamond \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n  \t{:suit (get suits (get str 0)) :rank (get ranks (get str 1))}))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ((zipmap \"DHCS\" [:diamond :heart :club :spade]) s)\n   :rank ((zipmap \"23456789TJQKA\" (range 13)) r)})", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 128, "code": "(fn [pair]\n    (let [suits {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n          ranks \"23456789TJQKA\"]\n      {:suit (suits (str (first pair)))\n       :rank (.indexOf ranks (str (second pair)))}))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 128, "code": "(fn f28 [strin]\n  (let [suit #(cond\n                (= \\C %) {:suit :club}\n                (= \\H %) {:suit :heart}\n                (= \\S %) {:suit :spade}\n                (= \\D %) {:suit :diamond})\n        r #(cond\n                (= \\A %) {:rank 12}\n                (= \\K %) {:rank 11}\n                (= \\Q %){:rank 10}\n                (= \\J %){:rank 9}\n                 (= \\T %) {:rank 8}\n                 :else {:rank (- (Integer/parseInt (str %)) 2)})]\n    (merge (suit (first strin)) (r (last strin)))))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 128, "code": "(let [suit (fn\n             [c]\n             (if (= c \"C\")\n               :club\n               (if (= c \"D\")\n                 :diamond\n                 (if (= c \"H\")\n                   :heart\n                   :spade))))\n      rank (fn\n        [c]\n        (if (= c \"A\")\n          12\n          (if (= c \"K\")\n            11\n            (if (= c \"Q\")\n              10\n              (if (= c \"J\")\n                9\n                (if (= c \"T\")\n                  8\n                  (- (int (first c)) (int \\2))))))))]\n  (fn suit-and-rank\n    [input]\n    (assoc {} :suit (suit (str (first input))) \n           :rank (rank (str (second input))))))", "user": "58152157e4b0f478707a0631"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [shm {\\D :diamond, \\S :spade, \\H :heart, \\C :club}\n        rhm {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6,\n             \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n        {:suit (shm s) :rank (rhm r)}))", "user": "515cf9b5e4b00901442db1d4"}, {"problem": 128, "code": "(fn [s] (let [[suit rank] s]\n          { :suit (case suit \\S :spade \\H :heart \\D :diamond \\C :club)\n          :rank (case rank \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12) }))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 128, "code": "(fn [card]\n  (let [[suitstr, rankstr] (apply vector (char-array card))\n        suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        ranks {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (get suits suitstr)\n     :rank (or (get ranks rankstr) (- (Integer/parseInt (str rankstr)) 2))}))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 128, "code": "(fn f [x]\n  (let [[suit rank] (seq x)]\n  \t(assoc {}\n      :suit\n        (get {\\S :spade, \\H :heart, \\D :diamond, \\C :club} suit) \n      :rank \n        (get (zipmap\n               (->> \"TJQKA\"\n                    (concat (range 2 10))\n                    (map str)\n                    (reduce str)\n                    seq)\n               (range 13))\n             rank))))", "user": "58247423e4b051871117bec5"}, {"problem": 128, "code": "(fn [s]\n    (let [suit {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n          rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n      {:suit (suit (first s)), :rank (rank (second s))}))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 128, "code": "(fn [str] (let [[s r] str] \n            {:suit \n            ({\\D :diamond \\H :heart \\C :club \\S :spade} s) \n            :rank \n            (cond \n             (= r \\T) 8 \n             (= r \\J) 9 \n             (= r \\Q) 10\n             (= r \\K) 11\n             (= r \\A) 12 \n             :else (- (int r) (int \\2))) }))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 128, "code": "(fn my-cards [s]\n  (let [card-map {\"D\" :diamond \"S\" :spade \"H\" :heart \"C\" :club \n                  \"A\" 12 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11\n                  \"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7} ]\n    (into {} (map #(assoc {} %2 (card-map (str %1))) s [:suit :rank]))))", "user": "5829d588e4b051871117bf4a"}, {"problem": 128, "code": "(fn bar [s]\n  (let [suits  {\n                \"H\" :heart\n                \"C\" :club\n                \"S\" :spade\n                \"D\" :diamond\n                }\n        ranks  {\n                \"2\" 0\n                \"3\" 1\n                \"4\" 2\n                \"5\" 3\n                \"6\" 4\n                \"7\" 5\n                \"8\" 6\n                \"9\" 7\n                \"T\" 8\n                \"J\" 9\n                \"Q\" 10\n                \"K\" 11\n                \"A\" 12\n                }\n        parsed-input (map str (flatten (partition 1 s)))\n        ]\n     {\n     :suit (get suits (first parsed-input))\n     :rank (get ranks (last parsed-input))\n     }))", "user": "58303fc3e4b051871117c006"}, {"problem": 128, "code": "(fn card-map [crd-str]\n  (let [s-lup {\\C :club \\D :diamond \\H :heart \\S :spade}\n        r-lup {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        [crd-s crd-r] (seq crd-str)]\n    (hash-map :suit (s-lup crd-s) :rank (r-lup crd-r))))", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 128, "code": "(fn [card]\n  (let [r {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        s {\\D :diamond \\H :heart \\C :club \\S :spade }]\n     {:suit (s (first card)) :rank (r (second card))}))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 128, "code": "(fn [st]\n  (let [[s r] st\n        suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank-map {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0}]\n    {:suit (suit-map s)\n     :rank (rank-map r)}))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 128, "code": "(fn parsecard\n  [pc]\n  {:suit\n   (condp = (first pc)\n     \\D :diamond\n     \\S :spade\n     \\C :club\n     \\H :heart)\n   :rank\n   (condp = (last pc)\n       \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n       \\T 8\n       \\J 9\n       \\Q 10\n       \\K 11\n       \\A 12)})", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 128, "code": "(fn [s] (let [suit {\\D :diamond \\H :heart \\C :club} rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}] \n  {:suit (get suit (first s)) :rank (get rank (last s))}))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 128, "code": "(fn card [c]\n  (let [[suit rank] (map str (vec c))\n        suits {\"S\" :spade,\n               \"C\" :club,\n               \"H\" :heart,\n               \"D\" :diamond}\n        ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3,\n               \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7,\n               \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11,\n               \"A\" 12}]\n    {:suit (get suits suit),\n     :rank (get ranks rank)}))", "user": "5779556de4b0979f8965166e"}, {"problem": 128, "code": "(fn [[a b]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} a)\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} b)})", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\S :spade \\C :club \\H :heart \\D :diamond}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \n        \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }] \n    (hash-map :suit (suits s) \n              :rank (ranks r))))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 128, "code": "(fn recognize-playing-cards [card-string]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        values {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (let [[s v] (into [] card-string)]\n      {:suit (suits s) :rank (values v)})))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 128, "code": "(fn [[s n]]\n  {:suit ({\\D :diamond \\H :heart} s :club)\n   :rank (.indexOf \"23456789TJQKA\" (int n))\n   })", "user": "58391c94e4b089d5ab817d35"}, {"problem": 128, "code": "#(hash-map :suit (condp = (first %)\n                   \\D :diamond\n                   \\H :heart\n                   \\C :club\n                   \\S :spade)\n           :rank (condp = (last %)\n                   \\2 0\n                   \\3 1\n                   \\4 2\n                   \\5 3\n                   \\6 4\n                   \\7 5\n                   \\8 6\n                   \\9 7\n                   \\T 8\n                   \\J 9\n                   \\Q 10\n                   \\K 11\n                   \\A 12))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ((zipmap \"SHDC\" [:spade :heart :diamond :club]) s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}\n        ranks (fn [c] (or ({\\A 12 \\T 8 \\J 9 \\Q 10 \\K 11} c)\n                          (- (int c) 0x32)))] ;0x30 is hex char 0.\n    {:suit (suits suit)\n     :rank (ranks rank)}))\n\n; golf\n; Remark that the chars for both suits and ranks are disjoint.\n;(fn [a] \n;  (let [z zipmap\n;       m (z \"HSCD23456789TJQKA\" (conj (range 13) :diamond :club :spade :heart))]\n;    (z [:suit :rank] (map m a))))\n\n; golf cheating\n;(fn [a] \n;  (let [z zipmap\n;       m (z \"HCD23456789TJQKA\" (conj (range 13) :diamond :club :heart))]\n;    (z [:suit :rank] (map m a))))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 128, "code": "(let [\n     suit-map {\\C :club \\D :diamond \\H :heart \\S :spade} \n     rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n     ] (fn [c] {:suit (suit-map (first c)) :rank (rank-map (last c))}))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 128, "code": "(fn card\n  [[suit value]]\n  (let [ranks (into {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} \n                    (map #(vector (char (+ (int \\0) %1)) (- %1 2)) (range 2 10)))]\n\n\n  { :suit ({\\D :diamond \\S :spade \\H :heart \\C :club} suit)\n   :rank (ranks value)}))", "user": "583166c1e4b051871117c025"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 128, "code": "(fn suit-rank [c]\n  (let [suits {\\D :diamond \\C :club \\H :heart \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit (first (seq c))\n        rank (last (seq c))]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "56f4cedce4b046a417f92063"}, {"problem": 128, "code": "(fn [s]\n    (let [suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} \n          ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}]\n      (let [sr (map str (seq s))\n\n;(clojure.string/split s #\"\") \n            s (get suits (nth sr 0))\n            r (get ranks (nth sr 1))]\n        {:suit s, :rank r}\n        )))", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 128, "code": "(fn playing-cards [[suit rank]]\n  (let [suits {\\H :heart \\D :diamond \\C :club \\S :spade}\n        rkeys (concat (map #(char (+ % 48)) (range 2 10)) [\\T \\J \\Q \\K \\A])\n        ranks (zipmap rkeys (range 13))]\n    {:suit (get suits suit) :rank (get ranks rank)}))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 128, "code": "(fn z [s]\n\n  (let [a (first s) \n\n        b (second s)\n\n        suit (condp = a\n\n               \\S :spade\n\n               \\H :heart\n\n               \\D :diamond\n\n               \\C :club)\n\n        n (condp = b\n\n            \\2 0\n\n            \\3 1\n\n            \\4 2\n\n            \\5 3\n\n            \\6 4\n\n            \\7 5\n\n            \\8 6\n\n            \\9 7\n\n            \\T 8\n\n            \\J 9\n\n            \\Q 10\n\n            \\K 11\n\n            \\A 12)]\n\n    {:suit suit :rank n}))", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 128, "code": "(fn [p]\n  (get (apply assoc {} (interleave (for [suit [\"S\" \"H\" \"D\" \"C\"] rank [2 3 4 5 6 7 8 9 \"T\" \"J\" \"Q\" \"K\" \"A\"]]\n                                     (str suit rank))\n                                    (for [suit '(:spade :heart :diamond :club ) rank (range 13)]\n                                       {:suit suit :rank rank})\n                                    )) p))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\H :heart\n           \\C :club\n           \\D :diamond\n           \\S :spade} s)\n   :rank ({\\2 0\n           \\3 1\n           \\4 2\n           \\5 3 \n           \\6 4 \n           \\7 5 \n           \\8 6 \n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11 \n           \\A 12} r)})", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 128, "code": "#(let [[s r] (seq %)]\n       {:suit (case s\n                \\D :diamond\n                \\H :heart\n                \\C :club\n                \\S :spade\n                :error)\n       :rank (case r\n               \\A 12\n               \\K 11\n               \\Q 10\n               \\J 9\n               \\T 8\n               (- (int r) 50))})", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 128, "code": "(fn [str-card]\n  (let [suit-map {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n        rank-map {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12 }\n        suit-str (-> str-card\n                     seq\n                     first\n                     str)\n        rank-str (-> str-card\n                     seq\n                     rest\n                     first\n                     str)]\n    (assoc {} :suit (get suit-map suit-str) :rank (get rank-map rank-str))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 128, "code": "(fn conv [s]\n  (let \n    [ \n      [suit rank] (seq s)\n       suits { \\S :spade \\H :heart \\D :diamond \\C :club}\n      ranks { \\2 0 \\3 1 \\4 2 \\5  3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10  \\K 11 \\A 12}]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 128, "code": "(fn [sr]\n  (let [suit ({\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade} (first sr))\n        rank ((zipmap\n               [\\2 \\3 \\4\n                \\5 \\6 \\7\n                \\8 \\9 \\T\n                \\J \\Q \\K \\A]\n               (range 13)) (second sr))]\n    {:suit suit :rank rank}))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 128, "code": "(fn [card]\n(let [suit-map {\"D\" :diamond\n                  \"S\" :spade\n                  \"C\" :club\n                  \"H\" :heart}\n        rank-map (apply sorted-map (concat [\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12] (interleave(map str (range 2 10)) (range 9))))\n\n        [_ s r]\n        (re-find #\"(D|S|C|H)([0-9]+|[TQJKA])\" card)]\n    {:rank (rank-map r)\n     :suit (suit-map s)}))", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 128, "code": "(fn recognize-playing-cards [card]\n  (let [suit  #({\\S :spade, \\H :heart, \\D :diamond, \\C :club} %)\n        r-dic (apply hash-map (interleave \"23456789TJQKA\" (range)))\n        rank  #(r-dic %)]\n    {:suit (suit (first card))\n     :rank (rank (second card))}))", "user": "5863be34e4b0f14aab7c8830"}, {"problem": 128, "code": "(fn [string]\n  (let [character-list (seq string)\n        suit (first character-list)\n        rank (last character-list)]\n    (apply hash-map\n           (list :suit (cond (= suit \\S) :spade\n                           (= suit \\H) :heart\n                           (= suit \\D) :diamond\n                           :else :club)\n               :rank (cond (= rank \\2) 0\n                           (= rank \\3) 1\n                           (= rank \\4) 2\n                           (= rank \\5) 3\n                           (= rank \\6) 4\n                           (= rank \\7) 5\n                           (= rank \\8) 6\n                           (= rank \\9) 7\n                           (= rank \\T) 8\n                           (= rank \\J) 9\n                           (= rank \\Q) 10\n                           (= rank \\K) 11\n                           :else 12)))))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 128, "code": "(fn [i]\n  (let [[s r] (->> (seq (str i)) (map #(- (int %) 48)))\n        f (fn convert [a] \n            (condp = a\n              17 12\n              19 :club\n              20 :diamond\n              24 :heart\n              26 9\n              27 11\n              33 10\n              35 :spade\n              36 8\n              (- a 2)))]\n    {:suit (f s) :rank (f r)}))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 128, "code": "(fn [s]\n    (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n          char-ranks {\\T 10, \\J 11, \\Q 12, \\K 13, \\A 14}\n          [st-c rk-c] s\n          suit (suits st-c)\n          rank (- (or (char-ranks rk-c)\n                      (Integer/parseInt (str rk-c)))\n                  2)]\n      {:suit suit :rank rank}))", "user": "56aad4f7e4b03c432f187338"}, {"problem": 128, "code": "(fn [s]\n    (assoc {}\n           :suit (get {\\D :diamond \\H :heart \\C :club \\S :s} (first s))\n           :rank (case (second s)\n                   \\T 8 \n                   \\A 12\n                   \\J 9\n                   \\Q 10\n                   \\K 11\n                   (- (int (second s)) 50))\n           ))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 128, "code": "(fn [x] \n   (let [suit (cond \n                  (= (first x) \\D) :diamond\n                  (= (first x) \\H) :heart\n                  (= (first x) \\C) :club\n                  :else :spade\n                  )\n          rankup (second x)\n          _p (prn rankup)\n          rank (if (not= -1 (Character/digit rankup 10) ) (- (Character/digit rankup 10) 2) (cond \n                                                        (= rankup \\A) 12 \n                                                        (= rankup \\K) 11\n                                                        (= rankup \\Q) 10\n                                                        (= rankup \\J) 9\n                                     \n                                                        :else 8\n                         ))\n         \n         ]   \n   \n    \n    {:suit suit :rank rank}\n   ))", "user": "50b25edae4b03ea88043355e"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\"S\" :spade\n               \"H\" :heart\n               \"D\" :diamond\n               \"C\" :club}\n        ranks {\"2\" 0\n               \"3\" 1\n               \"4\" 2\n               \"5\" 3\n               \"6\" 4\n               \"7\" 5\n               \"8\" 6\n               \"9\" 7\n               \"T\" 8\n               \"J\" 9\n               \"Q\" 10\n               \"K\" 11\n               \"A\" 12\n               }\n        s     (suits (str (first card)))\n        r     (ranks (str (second card)))]\n    {:suit s :rank r}))", "user": "51456858e4b0e88796073408"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} suit)\n   :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} rank (- (int rank) 50))})", "user": "528c381ce4b0239c8a67aeb2"}, {"problem": 128, "code": "(fn [[a b]]\n  {:suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} a)\n  :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} b)\n  })", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 128, "code": "(fn [x] {:rank ((zipmap \"23456789TJQKA\" (range)) (second x)),\n               :suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} (first x))})", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 128, "code": "(fn recognize-cards\n  [[s r]]\n  (let [suits {\\D :diamond\n              \\H :heart\n              \\C :club\n              \\S :spade}\n        original-ranks \"23456789TJQKA\"\n        rank-m (->> (range (count original-ranks))\n                    (map vector original-ranks)\n                    (into {}))]\n    {:suit (suits s) :rank (rank-m r)}))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 128, "code": "(fn [s]\n  (let [ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n        suits {\\D :diamond \\H :heart \\C :club \\S :spade}]\n    {:suit (suits (first s))\n     :rank (.indexOf ranks (last s))}))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 128, "code": "(let [cards (into {} (map vector\n                            (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"])\n                            (range)))\n        suits {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}]\n    (fn [s]\n      (let [[_ s v]  (re-matches #\"([SHDC])(\\d|[TJQKA])\" s)]\n        {:suit (get suits s) :rank (get cards v)})))", "user": "55597b84e4b0deb715856e36"}, {"problem": 128, "code": "(fn convert-suit-rank-pair [pair]\n  (let [rank-map\n              (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))\n        \n        suit-map {\\D :diamond \\H :heart \\C :club \\S  :spade }]\n \n  \t(assoc {} \n    \t     :suit (suit-map (first pair)) \n        \t :rank (rank-map (second pair))\n  \t) \n  )\n)", "user": "5722bf99e4b0c5bde472c0d6"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n   :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} rank)})", "user": "4db86aee535d1e037afb2193"}, {"problem": 128, "code": "(fn [s]\n  (let [suit ({\\D :diamond\n               \\S :spades\n               \\H :heart\n               \\C :club} (first s))\n        rank (or ({\\A 12\n                   \\K 11\n                   \\Q 10\n                   \\J 9\n                   \\T 8} (second s))\n                  (- (Integer. (str (second s))) 2))]\n    {:suit suit\n     :rank rank}))", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 128, "code": "(fn [[s r]]\n  (let[sm {\\H :heart \\D :diamond \\S :spade \\C :club} \n       rm [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n       {:suit (sm s) :rank (.indexOf rm r)}))", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 128, "code": "#(hash-map :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %)) :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first %)))", "user": "51a132cee4b0b292b01ee3ff"}, {"problem": 128, "code": "(fn [s] (conj {} [:suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} (first s))] [:rank (get {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (nth s 1) (- (int (nth s 1)) 50))]))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits (zipmap \"DHSC\" [:diamond :heart :spade :club])\n        ranks (zipmap \"23456789TJQKA\" (range 13))]\n    (hash-map :suit (suits s) :rank (ranks r))))", "user": "5879d577e4b01531a375ead8"}, {"problem": 128, "code": "(fn rcards\n  [s]\n  (let [f (str (first s))\n        l (str (last s))\n        m {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n        r {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n    {:suit (m f) :rank (r l)}))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spades} s)\n    :rank (.indexOf \"23456789TJQKA\" (str r))})", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 128, "code": "(fn recognize-cards [[a b]]\n  {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} a,) :rank ({\\A 12, \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6,\\9 7, \\T 8, \\J 9, \\Q 10,\\K 11} b)})", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 128, "code": "(fn card\n\n  ([x]\n\n   (card (re-seq #\"\\w\" x) {:diamond \"D\" :spade \"S\" :club \"C\" :heart \"H\" 0 \"2\" 1 \"3\" 2 \"4\" 3 \"5\" 4 \"6\" 5 \"7\" 6 \"8\" 7 \"9\" 8 \"T\" 9 \"J\" 10 \"Q\" 11 \"K\" 12 \"A\"}))\n\n  ([x mp]\n\n   (apply assoc-in (apply assoc-in {} [:suit] (filter (comp #{(first x)} mp) (keys mp))) [:rank] (filter (comp #{(second x)} mp) (keys mp)))))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 128, "code": "(fn str->card [s]\n  (let [suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}\n        ranks (reduce #(assoc %1 (char (+ (int \\0) %2)) (- %2 2))\n                {\\A 12\n                 \\K 11\n                 \\Q 10\n                 \\J 9\n                 \\T 8}\n                (range 2 10))]\n    {:suit (suits (first s))\n     :rank (ranks (second s))}))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 128, "code": "(fn [code]\n  {:suit (get {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}\n              (first code))\n   :rank (get {\\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12} (second code) (.indexOf \"23456789\" (str (second code))))})", "user": "51b76227e4b0d906fcd71d35"}, {"problem": 128, "code": "#(hash-map\n   :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first %))\n   :rank (.indexOf '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A) (second %)))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 128, "code": "(fn [pair]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n        {:suit (suit-map (first pair)) :rank (rank-map (last pair))}))", "user": "58852909e4b0f1effa3b76af"}, {"problem": 128, "code": ";(fn [n]\n;     (let [x (clojure.string/split n #\"\")\n;             y {\"H\"  :heart  \"C\"  :club \"S\"  :spade  \"D\" :diamond}\n;             z {\"9\" 7, \"K\" 11, \"3\" 1, \"4\" 2, \"8\" 6, \"Q\" 10, \"J\" 9, \"7\" 5, \"5\" 3, \"6\" 4, \"A\" 12, \"2\" 0, \"10\" 8}]\n;       {:suit (y (first x)) :rank (z (second x))} )) \n\n\n\n(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "582c526ae4b051871117bf88"}, {"problem": 128, "code": "#(let [cards-suits {\"S\" :spade\n                     \"H\" :heart\n                     \"D\" :diamond\n                     \"C\" :club}\n        cards-rank (zipmap\n                    (conj (->> (range 2 10)\n                               (map str)\n                               (vec)) \"T\" \"J\" \"Q\" \"K\" \"A\")\n                    (range 13))\n        card-data (map str (seq %))\n        suit (cards-suits (first card-data))\n        rank (cards-rank (last card-data))\n        ]\n    {:suit suit :rank rank})", "user": "5410499de4b01498b1a719a6"}, {"problem": 128, "code": "(fn [[suit rank]] \n  (let [suitmap (zipmap [\\C \\S \\D \\H] [:club :spade :diamond :heart]) \n        rankmap (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] [0 1 2 3 4 5 6 7 8 9 10 11 12])] \n    {:suit (get suitmap suit) :rank (get rankmap rank)}\n  )\n)", "user": "585481e0e4b07779d46863fe"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\"S\" :spade \"C\" :club \"H\" :heart \"D\" :diamond}\n        ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n        letters (map str (seq card))]\n    {:suit (get suits (first letters))\n     :rank (get ranks (last letters))}))", "user": "54012b48e4b0de5c41848620"}, {"problem": 128, "code": "#(hash-map :suit \n           ({\\S :spade \\H :heart \\C :club \\D :diamond} (first %)) :rank\n           ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %)))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 128, "code": "(fn [stri]\n (let [mps {\\D :diamond \\S :spade \\C :club \\H :heart}\n       mpr {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n  {:suit (get mps (first stri))\n  :rank (get mpr (second stri))}))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 128, "code": "(fn [[s r]]\n   (let [rm (merge (zipmap (map char (range 50 58)) (range 0 8))\n                   {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12})\n         sm {\\S :spade \\H :heart \\C :club \\D :diamond}]\n     (assoc {} :suit (sm s) :rank (rm r))))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 128, "code": "(fn [ n]\n  (let [lu {\\2 0 \\3 1 \\4 2 \n            \\5 3 \\6 4 \\7 5 \\8 6 \n            \\9 7 \\T 8 \\J 9 \n            \\Q 10 \\K 11 \\A 12 \n            \\D :diamond\n            \\C :club\n            \\H :heart\n            \\S :spade}\n         vals (seq n)]\n    {:suit (get lu (first vals))\n     :rank (get lu (second vals))}))", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 128, "code": "(fn [c] (let [suit {\"D\" :diamond \"S\" :spade \"H\" :heart \"C\" :club}\n                       rank (set (map str (range 2 10)))\n                       hrank {\"A\" 12 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11}\n                       s (suit (str (first c)))\n                       r (str (second c))]\n                     {:suit  s :rank (if (not= (hrank  r) nil) (hrank r) (- (Integer/parseInt r) 2))}))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 128, "code": "(fn get-card [[f s]]\n  (let [suit {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        rank [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    {:suit (get suit f) :rank (.indexOf rank s)}))", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [rank-mapping {\\A 14, \\2 2, \\3 3, \\4 4, \\5 5, \\6 6, \\7 7, \\8 8, \\9 9,\n                                    \\T 10, \\J 11, \\Q 12, \\K 13}\n           suit-mapping {\\H :heart, \\D :diamond, \\S :spade, \\C :club}]\n    {:rank (- (rank-mapping rank) 2)\n      :suit (suit-mapping suit)}))", "user": "58949f8de4b00487982d525e"}, {"problem": 128, "code": "(fn [sr]\n  (let [s (first sr)\n        r (last sr)]\n    {:suit ({\\S :spade\n             \\H :heart\n             \\D :diamond\n             \\C :club} s)\n     :rank ({\\2 0\n             \\3 1\n             \\4 2\n             \\5 3\n             \\6 4\n             \\7 5\n             \\8 6\n             \\9 7\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12} r)}))", "user": "4f856adfe4b033992c121c44"}, {"problem": 128, "code": "(fn [x] {\n   :suit ({\\D :diamond \\H :heart \\S :spade \\C :club} (first x))      \n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second x))})", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 128, "code": "(fn read-card [card]                                 (let [[suit number] card                                   suits {\\S :spade \\H :heart \\D :diamond \\C :club}                                                         ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4                             \\7 5 \\8 6 \\9 7 \\T 8 \\J 9                             \\Q 10 \\K 11 \\A 12}]                       {:suit (get suits suit)                               :rank (get ranks number)}))", "user": "5895477fe4b00487982d527c"}, {"problem": 128, "code": "(fn [[s0 s1]]\n  (let [suits {\\C :club \\S :spade \\D :diamond \\H :heart}\n        ranks (into {} (map vector \"23456789TJQKA\" (range)))]\n    {:suit (suits s0) :rank (ranks s1)}))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 128, "code": "(fn [card]\n  (let [pair (seq card)\n        suit ((keyword (str (first pair))) {:S :spade :C :club :H :heart :D :diamond})\n        rank-symbol (last pair)\n        rank (if (and\n                   (>= (int rank-symbol) 50)\n                   (<= (int rank-symbol) 57))\n               (- (int rank-symbol) 50)\n               ((keyword (str rank-symbol)) {:T 8 :J 9 :Q 10 :K 11 :A 12}))]\n    {:suit suit :rank rank}))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 128, "code": "(fn [card]\n(let\n  [\n   keylist (fn [string] (map (comp keyword str) (seq string))),\n   suits (reduce (fn [prev suit] (conj prev (vector (keyword (clojure.string/upper-case (str (first (seq suit))))) (keyword suit)))) {} (clojure.string/split \"diamond,spade,heart,club\" #\",\")),\n   ranks (keylist \"23456789TJQKA\"),\n   cardKeys (keylist card),\n   suit (first cardKeys),\n   rank (second cardKeys)\n   ]\n  {:suit (suit suits) :rank (.indexOf ranks rank)}\n  )\n  )", "user": "58950f29e4b00487982d5270"}, {"problem": 128, "code": "(fn [card-str] (let [card-seq (seq card-str)\n                     suit (first card-seq)\n                     value (second card-seq)]\n                 (assoc\n                   (assoc\n                     {}\n                     :suit\n                     (cond\n                      (= suit \\S) :spade\n                      (= suit \\H) :heart\n                      (= suit \\D) :diamond\n                      :else :club))\n                   :rank\n                   (cond\n                    (= value \\A) 12\n                    (= value \\K) 11\n                    (= value \\Q) 10\n                    (= value \\J) 9\n                    (= value \\T) 8\n                    :else (- (read-string (str value)) 2)))))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit  ({\\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :spade} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "5458c74de4b01be26fd74623"}, {"problem": 128, "code": "(fn rpc\n  [string]\n  (let [suits {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club}\n        ranks (reduce into {} (map-indexed (fn [idx it] {it idx}) [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]))]\n    {:suit (suits (str (first string))) :rank (ranks (str (last string)))}))", "user": "588f500ae4b00487982d51a4"}, {"problem": 128, "code": "(fn [[a b]] (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond]) ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n                                {:suit (suits (str a)) :rank (ranks (str b))}))", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 128, "code": "(fn [s]\n  (let [[suit rank] (seq s)\n        zerochar (int \\0)\n        mapper #(vector (char (+ zerochar %)) (- % 2))\n        suits {\\C :club \\D :diamond \\H :heart \\S :spade}\n        ranks (into {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (map mapper (range 2 10)))]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "58923efce4b00487982d521c"}, {"problem": 128, "code": "(fn [x]\n  (let [SUIT (first(map char x))\n        RANK (last(map char x))\n        suit (assoc {} :suit\n                    (if (= SUIT \\D) :diamond\n                        (if (= SUIT \\S) :spade\n                            (if (= SUIT \\C) :club\n                                (if (= SUIT \\H) :heart nil)))))\n        rank (assoc {} :rank (if (= RANK \\2) 0\n                                 (if (= RANK \\3) 1\n                                     (if (= RANK \\4) 2\n                                         (if (= RANK \\5) 3\n                                             (if (= RANK \\6) 4\n                                                 (if (= RANK \\7) 5\n                                                     (if (= RANK \\8) 6\n                                                         (if (= RANK \\9) 7\n                                                             (if (= RANK \\T) 8\n                                                                 (if (= RANK \\J) 9\n                                                                     (if (= RANK \\Q) 10\n                                                                         (if (= RANK \\K) 11\n                                                                             (if (= RANK \\A) 12 nil))))))))))))))]\n    (conj suit rank)))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 128, "code": "(fn [card]\n    {:suit ({\\H :heart \\D :diamond \\C :club \\S :spade} (first card))\n     :rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (str (second card)))})", "user": "57596ba7e4b02ea11479931a"}, {"problem": 128, "code": "(fn [[suit weight]]\n  {:suit (case suit\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n  :rank (let [weight-int (int weight)]\n          (if\n            (< weight-int 58)\n            (- weight-int 50)\n            (case weight\n              \\T 8\n              \\J 9\n              \\Q 10\n              \\K 11\n              \\A 12)))})", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 128, "code": "(fn fib [ x ] \n  (let [suits {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spade}, ranks {\"2\" 2, \"3\" 3, \"4\" 4,\"5\" 5, \"6\" 6, \"7\" 7, \"8\" 8, \"9\" 9,\"T\" 10, \"J\" 11 , \"Q\" 12 \"K\" 13, \"A\" 14}, f ((comp str first seq) x), s ((comp str last seq) x)]\n    {:suit (suits f) :rank (- (ranks s) 2) } ))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 128, "code": "(fn [s]\n  (let [\n        suits {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n        digitChr #(char  (+ (int \\0) %))\n        ranks (into {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (map #(vector (digitChr %) (- % 2)) (range 2 10)))\n        [suit rank] (seq s)\n        ]\n    {:suit (suits suit), :rank (ranks rank)}))", "user": "588e4e05e4b00487982d5188"}, {"problem": 128, "code": "(fn [c]\n  (let [suits {\"S\" :spade\n               \"H\" :heart\n               \"D\" :diamond\n               \"C\" :club}\n        ranks \"23456789TJQKA\"]\n    {:suit (suits (str (.charAt c 0)))\n     :rank (.indexOf ranks (str (.charAt c 1)))}))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 128, "code": "(fn suits [s]\n  (let [suits {:D :diamond\n               :H :heart\n               :S :spade\n               :C :club}\n        rank {:A 12\n              :K 11\n              :Q 10\n              :J 9\n              :T 8}]\n    (hash-map :suit ((keyword (str (first s))) suits)\n             :rank (or ((keyword (str (last s))) rank)\n                       (- (read-string (str (last s))) 2)))))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 128, "code": "(fn\n     [s]\n     (let [suite {\"H\" :heart\n                  \"D\" :diamond\n                  \"C\" :club\n                  \"S\" :spade}\n           rank (into {} (map vector (concat (vec (map #(str %) (range 2 10))) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range 0 13)))\n           nmap {}\n           ]\n       (hash-map\n         :suit (get suite (str (get s 0)))\n         :rank (get rank (str (get s 1)))\n         )\n       ))", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 128, "code": "(fn [s]\n    (let [raw-suit (nth s 0)\n          raw-rank (nth s 1)\n\n          suit (cond\n                 (= raw-suit \\S) :spade\n                 (= raw-suit \\H) :heart\n                 (= raw-suit \\D) :diamond\n                 (= raw-suit \\C) :club)\n          \n          rank (cond\n                 (= raw-rank \\2) 0\n                 (= raw-rank \\3) 1\n                 (= raw-rank \\4) 2\n                 (= raw-rank \\5) 3\n                 (= raw-rank \\6) 4\n                 (= raw-rank \\7) 5\n                 (= raw-rank \\8) 6\n                 (= raw-rank \\9) 7\n                 (= raw-rank \\T) 8\n                 (= raw-rank \\J) 9\n                 (= raw-rank \\Q) 10\n                 (= raw-rank \\K) 11\n                 (= raw-rank \\A) 12)]\n      {:suit suit :rank rank}))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 128, "code": "(fn [s]\n  (let [a (first s)\n        b (second s)\n        cs {\\S :spade \\H :heart \\D :diamond \\C :club}\n        cr {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (apply hash-map [:suit (cs a) :rank (cr b)])))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 128, "code": "(fn [s]\n  (let [[suit rank] s]\n    {:suit (case suit\n             \\D :diamond\n             \\H :heart\n             \\C :club\n             \\S :spade)\n    :rank (case rank\n            \\A 12\n            \\K 11\n            \\Q 10\n            \\J 9\n            \\T 8\n            (- (Character/digit rank 10) 2))\n    }))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 128, "code": "#(let [suits {\"S\" :spade\n                    \"H\" :heart\n                    \"D\" :diamond\n                    \"C\" :club}\n       ranks (zipmap\n                   (conj (->> (range 2 10)\n                              (map str)\n                              (vec))\n                         \"T\" \"J\" \"Q\" \"K\" \"A\")\n                   (range 13))\n       card-data (map str (seq %))\n       suit (suits (first card-data))\n       rank (ranks (last card-data))]\n   {:suit suit :rank rank})", "user": "570e43d8e4b0b0fb43fd06eb"}, {"problem": 128, "code": "(fn [mark]\n    (let [suit-map {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n          rank-map {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n          [_ suit-mark rank-mark] (clojure.string/split mark #\"\")\n          number-parse-rank? #(re-matches #\"\\d\" %)]\n      {:suit (get suit-map suit-mark)\n       :rank (if (number-parse-rank? rank-mark)\n               (- (Integer/parseInt rank-mark) 2)\n               (get rank-map rank-mark))}))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 128, "code": "(fn [s] (let\n           [\n            ranks {\"2\" 0\n                   \"3\" 1\n                   \"4\" 2\n                   \"5\" 3\n                   \"6\" 4\n                   \"7\" 5\n                   \"8\" 6\n                   \"9\" 7\n                   \"T\" 8\n                   \"J\" 9\n                   \"Q\" 10\n                   \"K\" 11\n                   \"A\" 12\n                   }\n            suits {\n                   \"C\" :club,\n                   \"D\" :diamond,\n                   \"H\" :heart,\n                   \"S\" :spade\n                   }\n            desc (into [] (map str (seq s)))\n            rank (nth desc 1)\n            suit (nth desc 0)\n            ] {:rank (get ranks rank) :suit (get suits suit)}))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 128, "code": "(fn cards [s]\n  (let [suits {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n               \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits (first s)), :rank (ranks (last s))}))", "user": "4eeb8f68535d93acb0a668a9"}, {"problem": 128, "code": "#(let [rank-map (zipmap (concat (map char (range 50 58)) '(\\T \\J \\Q \\K \\A)) (range 0 13))\n       suit-map {\\C :club \\D :diamond \\H :heart \\S :spade}]\n       {:suit (suit-map(first %)) :rank (rank-map (second %))})", "user": "588d224ae4b00487982d516c"}, {"problem": 128, "code": "#(let [x {\\H :heart \\S :spade \\C :club \\D :diamond}\n       y {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n   (hash-map :suit (get x (first %)), :rank (get y (second %))))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 128, "code": "(fn rpc [card]\n  {:suit ({\\C :club \\D :diamond \\H :heart \\S :space} (first card))\n   :rank ((zipmap \"23456789TJQKA\" (range)) (second card))})", "user": "58ca613de4b021aa9917edb7"}, {"problem": 128, "code": "(fn y [m]\n  (letfn [(suit [s]\n                (cond\n                  (= s \"D\") :diamond\n                  (= s \"H\") :heart\n                  (= s \"C\") :club\n                  (= s \"S\") :spades))\n          \n          (rank [n]\n                (cond\n                  (= n \"2\") 0 \n                  (= n \"3\") 1 \n                  (= n \"4\") 2\n                  (= n \"5\") 3\n                  (= n \"6\") 4\n                  (= n \"7\") 5\n                  (= n \"8\") 6\n                  (= n \"9\") 7\n                  (= n \"T\") 8\n                  (= n \"J\") 9\n                  (= n \"Q\") 10\n                  (= n \"K\") 11\n                  (= n \"A\") 12))\n          ]\n  (hash-map :suit (suit (str (first m))) :rank (rank (str (last m))))))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 128, "code": "(fn to-card [card-str]\n  (let [ranks (into {} (map vector \"23456789TJQKA\" (range)))\n        suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        [s r] card-str]\n   {:rank (ranks r)\n    :suit (suits s)}))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 128, "code": "(fn [card]\n  {:suit ({\\C :club \\H :heart \\D :diamond \\S :spades} (first card))\n   :rank (-> ({\\T 58 \\J 59 \\Q 60 \\K 61 \\A 62} (second card) (second card)) int (- 50))\n  })", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suit (keyword (str s))\n        rank (keyword (str r))\n        suits {:D :diamond :C :club :H :heart :S :spade}\n        ranks {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12}]\n    {:suit (suit suits) :rank (rank ranks)}))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (condp = s\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (condp = r\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           (- (int r) 50))})", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 128, "code": "(fn [s] (let [suits {:D :diamond :S :spade :H :heart :C :club}\n                     ranks {:2 0\n                            :3 1\n                            :4 2\n                            :5 3\n                            :6 4\n                            :7 5\n                            :8 6\n                            :9 7\n                            :T 8\n                            :J 9\n                            :Q 10\n                            :K 11\n                            :A 12}]\n                 (hash-map :suit ((keyword (str (first s))) suits)\n                           :rank ((keyword (str (second s))) ranks))))", "user": "587ee260e4b052da650a6353"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits {\\D :diamond \\S :spade \\H :heart \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 128, "code": "(fn create-card \n  [[suit rank]]\n  (let [suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank-map (zipmap \"23456789TJQKA\" (range 0 13))]\n    {:suit (suit-map suit) :rank (rank-map rank)}))", "user": "58740c18e4b01531a375ea49"}, {"problem": 128, "code": "(fn rec-card [x]\n  (let [s (first x)\n        r (second x)\n        m {\\S :spade\n           \\D :diamond\n           \\C :club\n           \\H :heart\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12}]\n    (if (number? (read-string (str r)))\n      (assoc {} :suit (m s) :rank (- (read-string (str r)) 2))\n      (assoc {} :suit (m s) :rank (m r)))))", "user": "53ae0c50e4b047364c044471"}, {"problem": 128, "code": "(fn [[f l]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} f) \n   :rank ((zipmap \"23456789TJQKA\" (range)) l)})", "user": "4dc986d0535d5973398f9285"}, {"problem": 128, "code": "(fn [s]\n  (let [s-map {\\H :heart, \\S :spade, \\D :diamond, \\C :club}\n        r-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (s-map (first s))\n     :rank (r-map (second s))}))", "user": "5893c64ce4b00487982d524b"}, {"problem": 128, "code": "(fn card-reader [card]\n      (hash-map :suit (case (first (seq (char-array card)))\n                        \\D :diamond\n                        \\H :heart\n                        \\S :spade\n                        \\C :club)\n                :rank (case (second (seq (char-array card)))\n                        \\A 12\n                        \\K 11\n                        \\Q 10\n                        \\J 9\n                        \\T 8\n                       (- (- (int (second (seq (char-array card)))) 48) 2))))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 128, "code": "(fn [[s r]] \n  (let [m (zipmap \"SHDC23456789TJQKA\" `(:spade :heart :diamond :club ~@(range)))]\n    {:suit (m s) :rank (m r)}))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 128, "code": "(fn [card] (let [s (first card), r (second card),\n                     ss {\\S :spade, \\H :heart, \\D :diamond, \\C :club},\n                     rs (into {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n                              (map #(hash-map (char (+ % (int \\0) 2)) %)\n                                   (range 8)))]\n                 {:suit (ss s), :rank (rs r)}))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 128, "code": "#(let [suits {\\C :club\n         \t  \\D :diamond\n              \\H :heart\n              \\S :spade}\n       ranks {\\2 0  \\3 1\n              \\4 2  \\5 3\n              \\6 4  \\7 5\n              \\8 6  \\9 7\n              \\T 8  \\J 9\n              \\Q 10 \\K 11 \\A 12}]\n   {:suit (suits (first %))\n    :rank (ranks (second %))})", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 128, "code": "(fn play-cards-mapper [[s r]]\n  (let [suit {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        rank (zipmap (concat (map (comp first str) (range 2 10)) [\\T \\J \\Q \\K \\A]) (range 13))]\n    {:suit (suit s), :rank (rank r)}))", "user": "58e37946e4b005f69f193cae"}, {"problem": 128, "code": "(fn [[s r]] (array-map :suit ({:D :diamond, :H :heart, :S :speade, :C :club} (keyword (str s))) :rank (condp = r \\A 12 \\T 8 \\J 9 \\Q 10 \\K 11 (- (Integer/parseInt (str r)) 2))))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 128, "code": "(fn card [s]\n  (let [[suit c] s\n        suits    {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        ranks    (zipmap \"23456789TJQKA\" (range))]\n   {:suit (suits suit) :rank (ranks c)}))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 128, "code": "(fn [c] \n   (hash-map\n     :suit ([:spade :heart :diamond :club] (.indexOf \"SHDC\" (subs c 0 1)))\n     :rank (.indexOf \"23456789TJQKA\" (subs c 1)))\n   )", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 128, "code": "(fn [[suit rank]]\n    (let [\n           suits { \\D :diamond \\S :spade \\H :heart \\C :club }\n           ranks { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n      \n      { :suit (get suits suit) :rank (get ranks rank)}))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 128, "code": "(fn parse-card [[suit rank]]\n  {:suit ((zipmap \"CDHS\" [:club :diamond :heart :spade]) suit)\n   :rank ((zipmap \"23456789TJQKA\" (range 13)) rank)})", "user": "58ed713de4b056aecfd47d84"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [char->suit {\\C :club\n                    \\D :diamond\n                    \\H :heart\n                    \\S :spade}\n        char->rank (zipmap\n                     (concat\n                      (map #(first (str %))\n                           (range 2 10))\n                      (list \\T \\J \\Q \\K \\A))\n                     (range 13))]\n    {:suit (char->suit suit)\n     :rank (char->rank rank)}))", "user": "58b2c435e4b0ebc645576d11"}, {"problem": 128, "code": "(let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks (zipmap (seq \"23456789TJQKA\") (range 0 13))]\n    (fn card [id]\n      (let [[suit rank] (seq id)]\n        {:suit (suits suit) :rank (ranks rank)}\n        )\n      )\n    )", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 128, "code": "(fn parse-card [card]\n  (let [suits {\\H :heart\n               \\C :club\n               \\D :diamond\n               \\S :spade}\n        ranks {\\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12} ]\n    {:suit (get suits (first card)) :rank (get ranks (second card))}))", "user": "4ea8570f535d7eef308072f8"}, {"problem": 128, "code": "(fn format-card [[suit rank]]\r\n  (let [suit-dict {\\C :club \\D :diamond \\H :heart \\S :spade}\r\n        rank-dict {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\r\n    {:suit (suit-dict suit),\r\n     :rank (get rank-dict rank\r\n                (-> rank\r\n                    (Character/digit 10)\r\n                    (- 2)))}))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit\n   (get {\\S :spade \\H :heart \\D :diamond \\C :club}\n        suit)\n   :rank\n   (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        rank)})", "user": "576e607ae4b0979f89651579"}, {"problem": 128, "code": "#(let [suits {\\D :diamond \\H :heart \\C :club \\S :spades}\n       ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n       suit (get suits (first %))\n       rank (get ranks (last %))\n       ]\n   {:suit suit :rank rank})", "user": "58987ee9e4b00487982d52d2"}, {"problem": 128, "code": "(fn [suitstr]\n  (let [suits {\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club}\n        ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}]\n    {:suit (get suits (str (first suitstr))) :rank (get ranks (str (second suitstr)))}))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 128, "code": "(fn [pair]\n  (let\n    [d {\\D :diamond\n        \\C :club\n        \\S :spade\n        \\H :heart}\n     r {\\T  8\n        \\J  9\n        \\Q 10\n        \\K 11\n        \\A 12}]\n    {:suit (get d (first pair)) :rank (let\n                                        [k (second pair)]\n                                        (if (contains? r k) (get r k) (- (int k) (int \\2))))}))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 128, "code": "(fn recognize-playing-cards [card]\n  (let [suit  #({\\S :spade, \\H :heart, \\D :diamond, \\C :club} %)\n        r-dic (apply hash-map (interleave \"23456789TJQKA\" (range)))\n        rank  #(r-dic %)]\n    {:suit (suit (first card))\n     :rank (rank (second card))}))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 128, "code": "(fn [x]\n  (let [[s r] x]\n    {:suit ({\n            \\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :black} s)\n    :rank (.indexOf \"23456789TJQKA\" (str r))}))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 128, "code": "(fn card [x]\n  (let [suits { \"S\" :spade , \"H\" :heart , \"D\" :diamond , \"C\" :club }\n        ranks { \"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12 }]\n\n      {:suit (get suits (str (first x))) :rank (get ranks (str (second x))) }\n    )\n  )", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 128, "code": "(fn prob128 [card]\n (let [suitMap {\\S :spade,\\H :heart, \\D :diamond,\\C :club}\n       rankMap (assoc (zipmap (map char (range (int \\2) (+ (int \\2) 8))) (range 0 9))\n                      \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)\n       cardSeq (seq card)]\n  {:suit (get suitMap (first cardSeq)) :rank (get rankMap (second cardSeq))}))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 128, "code": "(fn [card]\n  (let [[s r] (seq card)\n        suits { \\S :spade \\D :diamond \\H :heart \\C :club }\n        ranks { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6\n               \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n               {:suit (suits s) :rank (ranks r)}))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 128, "code": "(fn [s]\n  {:suit\n  \t({\n       \\H :heart\n       \\D :diamond\n       \\C :club\n       \\S :spade\n     } (first s))\n  :rank\n  \t({\n       \\2 0\n       \\3 1\n       \\4 2\n       \\5 3\n       \\6 4\n       \\7 5\n       \\8 6\n       \\9 7\n       \\T 8\n       \\J 9\n       \\Q 10\n       \\K 11\n       \\A 12\n     } (last s))})", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))] \n    {:suit (suits s) :rank (ranks r)}))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 128, "code": "(fn [[s r]]\n  {\n  :suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} s)\n  :rank (cond\n         (= r \\A) 12\n         (= r \\K) 11\n         (= r \\Q) 10\n         (= r \\J) 9\n         (= r \\T) 8\n         :else (- (int r) 50)\n         )})", "user": "59075e3be4b047aa04b19955"}, {"problem": 128, "code": "(fn ff[ss]\n  {:suit ({\\D :diamond \\C :club \\H :heart \\S :spades} (first ss)) \n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second ss))}\n  )", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 128, "code": "(fn [[s r]] {:suit (case s \\D :diamond \\H :heart \\S :spades \\C :club)\n             :rank (case r \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 (- (Integer. (str r)) 2))})", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 128, "code": "(fn [[suit' rank']]\n  {\n    :suit\n    (case suit'\n          \\D :diamond\n          \\S :spade\n          \\H :heart\n          \\C :club)\n    :rank\n    (case rank'\n          \\2 0\n          \\3 1\n          \\4 2\n          \\5 3\n          \\6 4\n          \\7 5\n          \\8 6\n          \\9 7\n          \\T 8\n          \\J 9\n          \\Q 10\n          \\K 11\n          \\A 12)\n  })", "user": "5901158de4b0438e51c2d039"}, {"problem": 128, "code": "(fn str-to-card [s]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (.charAt s 0)) \n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (.charAt s 1))})", "user": "590b055ae4b047aa04b199c9"}, {"problem": 128, "code": "#(apply hash-map (flatten (map {\\D [:suit :diamond] \\H [:suit :heart] \\C [:suit :club] \\S [:suit :spade] \\2 [:rank 0]  \\3 [:rank 1] \\4 [:rank 2] \\5 [:rank 3] \\6 [:rank 4]\n                                           \\7 [:rank 5] \\8 [:rank 6] \\9 [:rank 7] \\T [:rank 8] \\J [:rank 9] \\Q [:rank 10] \\K [:rank 11] \\A [:rank 12]} (map first (partition-by identity %)) )))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit (case suit\n           \\H :heart\n           \\D :diamond\n           \\S :spades\n           \\C :club)\n   :rank (case rank\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12\n           (- (read-string (str rank)) 2))})", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 128, "code": "(fn [card]\n   (let [type {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n         rank {\"A\" 12 \"K\" 11 \"Q\" 10 \"J\" 9 \"T\" 8}\n         t (first (map str (seq card)))\n         r (second (map str (seq card)))]\n     {:suit (get type t) :rank (if (contains? rank r) (get rank r) (- (Integer/parseInt r) 2))}\n     ))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suit ({\\S :spade \\D :diamond \\C :club \\H :heart} s)\n        rank ((zipmap \"23456789TJQKA\" (range)) r)]\n    {:suit suit :rank rank}))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 128, "code": "(fn [s]\n  (let [suit ({\\D :diamond\n               \\S :spade\n               \\C :club\n               \\H :heart} (first s))\n        rank ({\\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12} (second s))]\n    {:suit suit :rank rank}))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 128, "code": "(fn [string]\n   (let [suit (first (map str string))\n         rank (second (map str string))\n         suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spades}\n         ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}]\n     (hash-map :suit (get suits suit) :rank (get ranks rank))))", "user": "565487dce4b0f9d632dd8482"}, {"problem": 128, "code": "(fn [card]\n   (let [ranks (into {} (map vector \"23456789TJQKA\" (range 13)))\n         suits (into {} (map vector \"DHCS\" [:diamond :heart :club :spade]))]\n     {:suit (suits (first card))\n      :rank (ranks (last card))}))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 128, "code": "(fn [card]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first card)), :rank (rank-map (last card))}\n  ))", "user": "58eac340e4b056aecfd47d24"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 128, "code": "(fn [[a b]]\n  (let [rank (zipmap \"23456789TJQKA\" (range 13))\n        suit {\\S :spade \\H :heart \\D :diamond \\C :club}]\n    {:suit (suit a) :rank (rank b)}))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 128, "code": "(fn [s] \n  (letfn [(suit [c]\n                (case c\n                  \\S :spade\n                  \\H :heart\n                  \\D :diamond\n                  \\C :club))\n          (rank [c]\n                (case c\n                  \\A 12\n                  \\K 11\n                  \\Q 10\n                  \\J 9\n                  \\T 8\n                  (- (Character/digit c 10) 2)))]\n    {:suit (suit (first s)), :rank (rank (second s))}))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 128, "code": "(fn [in]\n  (let [rank (into {} (map-indexed #(vector %2 %1) [:2 :3 :4 :5 :6 :7 :8 :9 :T :J :Q :K :A]))\n        suit {\\S :spade \\C :club \\D :diamond \\H :heart}\n        [s r1] in\n        r (keyword (str r1))]\n    {:suit (get suit s) :rank (get rank r)}))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 128, "code": "(fn recognize-playing-cards [human-readable]\n  (let [suit (first human-readable)\n        rank (last human-readable)]\n    {:rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] rank)\n     :suit ({\\S :spade\n             \\H :heart\n             \\D :diamond,\n             \\C :club}\n            suit)}))", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club}\n        ranks [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n        suit (str (first card))\n        rank (str (second card))]\n    {:suit (suits suit) :rank (.indexOf ranks rank)}))", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 128, "code": "(fn [s]\n   (let [m1 {\\S :spade\n             \\H :heart\n             \\D :diamond\n             \\C :club}\n         m2 {\\2 0\n             \\3 1\n             \\4 2\n             \\5 3\n             \\6 4\n             \\7 5\n             \\8 6\n             \\9 7\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12}]\n     {:suit (get m1 (get s 0))\n      :rank (get m2 (get s 1))}\n     ))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 128, "code": "#(let [m {\\D :diamond \\H :heart \\C :club \\S :spade}\n       m (into m (map vector \"23456789TJQKA\" (range)))\n       [s r] (map m %)]\n   {:suit s :rank r})", "user": "59074b7ce4b047aa04b19951"}, {"problem": 128, "code": "(fn [[a b]]\n    (let [r (apply conj {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (for [j (range 0 8)] [(char (+ j 50)) j])\n                  )\n          s {\\S :spade \\H :heart \\D :diamond \\C :club}]\n\n      {:suit (s a) :rank (r b)}\n\n      )\n    )", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 128, "code": "(fn \n  [ab] \n  (let \n    [suitmap {\\D :diamond \\H :heart \\S :spade \\C :club}\n    rankmap (into {} (map #(vector %1 %2) '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A) (range)))]\n                     {:suit (suitmap (first ab)) :rank (rankmap (second ab))}\n                     ))", "user": "56449e4de4b0284900eef5f9"}, {"problem": 128, "code": "(fn card->map [[suit rank]]\n  {:suit ({\\D :diamond\n           \\H :heart\n           \\S :spade\n           \\C :club}\n          suit)\n   :rank ({\\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12}\n          rank)})", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n))", "user": "59368efbe4b02506e01a297d"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "59385840e4b02506e01a29c9"}, {"problem": 128, "code": "(fn [s]\n  (assoc (assoc {} :suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} (first (apply vector s)))) \n    :rank (get {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (str (second (apply vector s))))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 128, "code": "(fn [s]\n  (assoc (assoc {} :suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} (first (apply vector s)))) \n:rank (get {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (str (second (apply vector s))))))", "user": "59369515e4b02506e01a297e"}, {"problem": 128, "code": "(fn [s]\n  (let [get-s (fn [suit]\n                (cond\n                  (= suit \\S) :spade\n                  (= suit \\D) :diamond\n                  (= suit \\C) :club\n                  (= suit \\H) :heart))\n        get-r (fn [rank]\n                (cond\n                  (= rank \\2) 0\n                  (= rank \\3) 1\n                  (= rank \\4) 2\n                  (= rank \\5) 3\n                  (= rank \\6) 4\n                  (= rank \\7) 5\n                  (= rank \\8) 6\n                  (= rank \\9) 7\n                  (= rank \\T) 8\n                  (= rank \\J) 9  \n                  (= rank \\Q) 10 \n                  (= rank \\K) 11\n                  (= rank \\A) 12))]\n    (hash-map :suit (get-s (first s)) :rank (get-r (second s)))))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 128, "code": "(fn [s]\n\t\t(assoc (assoc {} :suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} (first (apply vector s))))\n\t\t\t:rank (get {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (str (second (apply vector s))))))", "user": "59368ccae4b02506e01a2979"}, {"problem": 128, "code": "(fn [[s r]] \n  {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} s)\n   :rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r) (- (int r) 50))\n  })", "user": "586bc870e4b01531a375e964"}, {"problem": 128, "code": "(fn [s]\n   (reduce #(condp = %2\n              \"2\" (assoc % :rank 0       )\n              \"3\" (assoc % :rank 1       )\n              \"4\" (assoc % :rank 2       )\n              \"5\" (assoc % :rank 3       )\n              \"6\" (assoc % :rank 4       )\n              \"7\" (assoc % :rank 5       )\n              \"8\" (assoc % :rank 6       )\n              \"9\" (assoc % :rank 7       )\n              \"T\" (assoc % :rank 8       )\n              \"J\" (assoc % :rank 9       )\n              \"Q\" (assoc % :rank 10      )\n              \"K\" (assoc % :rank 11      )\n              \"A\" (assoc % :rank 12      )\n              \"S\" (assoc % :suit :spade  )\n              \"H\" (assoc % :suit :heart  )\n              \"D\" (assoc % :suit :diamond)\n              \"C\" (assoc % :suit :club   )\n              )\n           {}\n           (map str s))\n   )", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond, \\H :heart, \\S :spade, \\C :club} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 128, "code": "#(let [cards-suits {\"S\" :spade\n                    \"H\" :heart\n                    \"D\" :diamond\n                    \"C\" :club}\n       cards-rank (zipmap\n                   (conj (->> (range 2 10)\n                              (map str)\n                              (vec))\n                         \"T\" \"J\" \"Q\" \"K\" \"A\")\n                   (range 13))\n       card-data (map str (seq %))\n       suit (cards-suits (first card-data))\n       rank (cards-rank (last card-data))]\n   {:suit suit :rank rank})", "user": "59251947e4b072a2710fce69"}, {"problem": 128, "code": "#(let [cards-suits {\"S\" :spade\n                    \"H\" :heart\n                    \"D\" :diamond\n                    \"C\" :club}\n       cards-rank (zipmap\n                   (conj (->> (range 2 10)\n                              (map str)\n                              (vec))\n                         \"T\" \"J\" \"Q\" \"K\" \"A\")\n                   (range 13))\n       card-data (map str (seq %))\n       suit (cards-suits (first card-data))\n       rank (cards-rank (last card-data))]\n   {:suit suit :rank rank})", "user": "592518bfe4b072a2710fce65"}, {"problem": 128, "code": "(fn [in]\n   (let [suit (str (first  (seq in)))\n         rank (str (last  (seq in)))]\n     {:suit (case suit\n              \"D\" :diamond\n              \"H\" :heart\n              \"C\" :club\n              \"S\" :spade)\n      :rank (if (number? (read-string rank))\n              (- (read-string rank) 2)\n              (case (str rank)\n                \"T\" 8\n                \"J\" 9\n                \"Q\" 10\n                \"K\" 11\n                \"A\" 12))}))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 128, "code": "(fn [card]\n  (let [s (first (seq card))\n        r (second (seq card))\n        suites '{\\S :spade\n        \t\t \\H :heart\n        \t\t \\D :diamond\n        \t\t \\C :club}\n        ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    {:suit (get suites s) :rank (.indexOf ranks r)}))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 128, "code": "(let [c->suit {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}\n      c->rank (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n                      (range 13))]\n  (fn [[suit-char rank-char]]\n    {:suit (get c->suit suit-char)\n     :rank (get c->rank rank-char)}))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 128, "code": "(fn [s]\n  (let [suit (get s 0)\n        rank (get s 1)\n      ]\n    {:suit (get {\\D :diamond \\H :heart \\C :club \\S :spades} suit)\n     :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)\n    }\n  )\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 128, "code": "(let [suits-map {\"S\" :spade\n                 \"H\" :heart\n                 \"D\" :diamond\n                 \"C\" :club}\n      rank-map {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6,\n                \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}]\n  (fn [[suit rank]]\n    {:suit (suits-map (str suit))\n     :rank (rank-map (str rank))}))", "user": "594783bee4b07ddc2dafada1"}, {"problem": 128, "code": "(fn [[a b]] (let [cards {\\D :diamond \\H :heart \\C :club \\S :spade \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}] \n {:suit (cards a) :rank (cards b)}))", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 128, "code": "#(let [suit-map {\\S :spade \\D :diamond \\H :heart \\C :club}\n       rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n   {:suit (suit-map (first %)) :rank (rank-map (second %))})", "user": "55216aa5e4b0882d96d09192"}, {"problem": 128, "code": "(fn kart [karta]\n  (conj (case (first karta)\n      \\H {:suit :heart}\n      \\D {:suit :diamond}\n      \\S {:suit :spade}\n      \\C {:suit :club}\n      )\n        (case (second karta)\n          \\2 {:rank 0}\n          \\3 {:rank 1}\n          \\4 {:rank 2}\n          \\5 {:rank 3}\n          \\6 {:rank 4}\n          \\7 {:rank 5}\n          \\8 {:rank 6}\n          \\9 {:rank 7}\n          \\T {:rank 8}\n          \\J {:rank 9}\n          \\Q {:rank 10}\n          \\K {:rank 11}\n          \\A {:rank 12}\n          )\n        ))", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 128, "code": "(fn[x] \n                        (let [ d1 {:A 12 :K 11 :Q 10 :J 9 :T 8 :9 7 :8 6 :7 5 :6 4 :5 3 :4 2 :3 1 :2 0}\n                              myreplaceFun #(get %1 (keyword (clojure.string/replace (rest %2) #\"\\(\\\\|\\)\" \"\")))\n                              ]\n                          (cond\n                            (= \\D (first x)) (assoc {} :suit :diamond :rank (myreplaceFun d1 x))\n                            (= \\H (first x)) (assoc {} :suit :heart :rank (myreplaceFun d1 x))\n                            (= \\S (first x)) (assoc {} :suit :spade :rank (myreplaceFun d1 x))\n                            (= \\C (first x)) (assoc {} :suit :club :rank (myreplaceFun d1 x))\n                            :else :asa\n                          )\n                          )\n                          )", "user": "592518cde4b072a2710fce66"}, {"problem": 128, "code": "(fn [c]\n  (let [suit-map {\\D :diamond \\S :spade \\H :heart \\C :club}\n        rank-map (zipmap (concat \"23456789TJQKA\") (range))]\n    (zipmap [:suit :rank]\n            [(suit-map (first c)) \n             (rank-map (second c))])))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 128, "code": "(let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n      ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n      \t\t  \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n  (fn [[s r]] {:suit (suits s) :rank (ranks r)}))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 128, "code": "(fn f [card]\n  (let [\n    suits {\"H\" :heart \"S\" :spade \"D\" :diamond \"C\" :club}\n    ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n    suit (get suits (str (nth card 0)))\n    rank (get ranks (str (nth card 1)))\n  ] {:suit suit :rank rank}))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 128, "code": "(fn [s]\n  {\n  \t:suit (case (first s)\n            \\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :spade)\n  \t:rank (case (second s)\n            \\A 12\n            \\K 11\n            \\Q 10\n            \\J 9\n            \\T 8\n            (- (int (second s)) 50))\n  })", "user": "519e70d5e4b0acf32bc6a42c"}, {"problem": 128, "code": "(fn card-rank [v]\n  (let [\n        suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit (get suits (first (seq v)))\n        rank (second (seq v))]\n    {:suit suit :rank (if (get ranks rank) (get ranks rank) (- (Character/digit rank 10) 2))}))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 128, "code": "(fn [c]\n  (let [suitMap {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n        rankMap {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n    {:suit (suitMap (subs c 0 1)) :rank (rankMap (subs c 1))}))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 128, "code": "(fn[x] \n                        (let [ d1 {:A 12 :K 11 :Q 10 :J 9 :T 8 :9 7 :8 6 :7 5 :6 4 :5 3 :4 2 :3 1 :2 0}\n                              myreplaceFun #(get %1 (keyword (clojure.string/replace (rest %2) #\"\\(\\\\|\\)\" \"\")))\n                              ]\n                          (cond\n                            (= \\D (first x)) (assoc {} :suit :diamond :rank (myreplaceFun d1 x))\n                            (= \\H (first x)) (assoc {} :suit :heart :rank (myreplaceFun d1 x))\n                            (= \\S (first x)) (assoc {} :suit :spade :rank (myreplaceFun d1 x))\n                            (= \\C (first x)) (assoc {} :suit :club :rank (myreplaceFun d1 x))\n                            :else :asa\n                          )\n                          )\n                          )", "user": "592518e8e4b072a2710fce67"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 128, "code": "#(let [suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n       rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n       [s r] (seq %)]\n   (hash-map :suit (suit s) :rank (rank r)))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}\n        ranks (zipmap \"23456789TJQKA\" (range))]\n    {:suit (get suits s)\n     :rank (get ranks r)}))", "user": "595b864ee4b066ee0a44afdc"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 128, "code": "(fn [sr]\n  (let [s (first sr)\n        r (second sr)\n        suit (case s\n               \\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade)\n        rank (case r\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12\n               (- (int r) 50))]\n    {:suit suit, :rank rank}))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 128, "code": "(fn card-type [[suit rank]]\n  {:suit (get {\"D\" :diamond\n               \"H\" :heart\n               \"C\" :club} (str suit))\n   :rank (or (get {\"Q\" 10\n                   \"J\" 9\n                   \"K\" 11\n                   \"T\" 8 \n                   \"A\" 12} (str rank))\n             (- (Integer/parseInt (str rank)) 2))})", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 128, "code": "(fn cards [s]\n  (conj {:suit (case (first s)\n           \\D :diamond\n           \\C :club\n           \\S :spade\n           \\H :heart)}\n  {:rank (case (str(last s))\n           \"2\" 0\n           \"3\" 1\n           \"4\" 2\n           \"5\" 3\n           \"6\" 4\n           \"7\" 5\n           \"8\" 6\n           \"9\" 7\n           \"T\" 8\n           \"J\" 9\n           \"Q\" 10\n           \"K\" 11\n           \"A\" 12)}))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 128, "code": "(fn p\n  [s]\n  (let [d {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club \"T\" 8 \"J\" 9  \"Q\" 10 \"K\" 11 \"A\" 12}\n        c (re-seq #\"[A-Z]|[0-9]\" s)\n        res {:suit (d (first c)) :rank 0}]\n    (if (d (second c))\n      (update-in res [:rank] + (d (second c)))\n      (update-in res [:rank] + (- (bigint (second c)) 2)))))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-map {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n      {:suit (get suit-map (first s)) :rank (get rank-map (second s))}))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (condp = s\n           \\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club)\n   :rank (condp = r\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12\n           (-> r str read-string (- 2)))})", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 128, "code": "(fn [val]\n    (let [type {\"D\" :diamond \"H\" :heart \"C\" :club}\n          number (->> (range 2 10)\n                      (map (fn [v] {(str v) (- v 2)}))\n                      (apply merge {\"A\" 12 \"K\" 11 \"Q\" 10 \"J\" 9 \"T\" 8}))\n          f (str (nth val 0))\n          n (str (nth val 1))]\n      {:suit (type f) :rank (number n)}\n      )\n   )", "user": "59473563e4b07ddc2dafad97"}, {"problem": 128, "code": "(fn kartu [s]\n  (let [suit {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit (first s)), :rank (rank (last s))}\n))", "user": "593910eae4b02506e01a29f4"}, {"problem": 128, "code": "(fn [card]\n\t(let [suit {\\S :spade \n\t\t     \t\\D :diamond \n        \t\t\\H :heart \n        \t\t\\C :club}\n\t\t  rank (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))\n          seqcard (seq card)]\n      {:suit (suit (first seqcard)) :rank (rank (second seqcard))}))", "user": "593744abe4b02506e01a299b"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ({\\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade} suit)\n   :rank ({\\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12} rank)})", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 128, "code": "(fn[cstr]\n(let [suit ({\"C\" :club \"H\" :heart \"D\" :diamond \"S\" :spades} (first (re-seq #\"[C H D S]\" cstr)))\nrank ((merge {\"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12 \"T\" 8} (merge (into {} (for [i (range 2 10)] (hash-map (str i) (- i 2)))))) (first (re-seq #\"[J Q K A T 2-9]\" cstr)))]\n\n     (hash-map :suit suit :rank rank)\n\n))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 128, "code": "(fn\n  [x]\n  (let [s-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        r-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (s-map (first x)) :rank (r-map (last x))}))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 128, "code": "#(let [r {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} s {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}]\n   {:suit (get s (str (first %))) :rank (get r (str (second %)))})", "user": "5964c614e4b069c0a1a19770"}, {"problem": 128, "code": "(fn [card]\n  (let [suit {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n        rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        [s r] (seq card)]\n    {:suit (get suit s), :rank (get rank r)}))", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 128, "code": "(fn solution128\n  [s]\n  (let [mmap {\"S\" :spade\n              \"H\" :heart\n              \"D\" :diamond\n              \"C\" :club\n              \"2\" 0\n              \"3\" 1\n              \"4\" 2\n              \"5\" 3\n              \"6\" 4\n              \"7\" 5\n              \"8\" 6\n              \"9\" 7\n              \"T\" 8\n              \"J\" 9\n              \"Q\" 10\n              \"K\" 11\n              \"A\" 12}\n        suit  (subs s 0 1)\n        rank  (subs s 1)]\n    { :suit (mmap suit)\n      :rank (mmap rank)}))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit (case suit\n           \\H :heart\n           \\S :spade\n           \\C :club\n           \\D :diamond)\n  :rank (case rank\n          \\A 12\n          \\K 11\n          \\Q 10\n          \\J 9\n          \\T 8\n          (- (int rank) 0x32))})", "user": "585aeddbe4b0f14aab7c875b"}, {"problem": 128, "code": "(fn playing-card [id]\n  (let [suit-map {\"S\" :spade\n                  \"D\" :diamond\n                  \"C\" :club\n                  \"H\" :heart}\n        rank-map {\"2\" 0\n                  \"3\" 1\n                  \"4\" 2\n                  \"5\" 3\n                  \"6\" 4\n                  \"7\" 5\n                  \"8\" 6\n                  \"9\" 7\n                  \"T\" 8\n                  \"J\" 9\n                  \"Q\" 10\n                  \"K\" 11\n                  \"A\" 12}\n        suit-id (str (first id))\n        rank-id (str (second id))]\n    {:suit (get suit-map suit-id)\n     :rank (get rank-map rank-id)}))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (hash-map :suit (get suit-map s) :rank (get rank-map r))))\n\n;(fn [[s r]]\n;  (hash-map\n;    :suit\n;    (case s\n;      \\D :diamond\n;      \\H :heart\n;      \\C :club\n;      \\S :spade)\n;    :rank\n;    (case r\n;      \\T 8\n;      \\J 9\n;      \\Q 10\n;      \\K 11\n;      \\A 12\n;      (-\n;        (read-string (str r))\n;        2))))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n   :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)) rank)})", "user": "4fb1d7ace4b081705acca281"}, {"problem": 128, "code": "(fn [[s c]]\n  {:suit ({\\H :heart \\S :spade \\C :club \\D :diamond} s)\n   :rank ((zipmap \"23456789TJQKA\" (range 13)) c)})", "user": "5398305fe4b0b51d73faaef6"}, {"problem": 128, "code": "(fn [x]\n  (let [seq (map (comp str read-string str) x)\n        card (first seq)\n        rank (last seq)]\n    {:suit ({\"D\" :diamond\n             ,\"H\" :heart\n             ,\"C\" :club\n             ,\"S\" :spade } card) :rank ({\"2\" 0,\n                                         \"3\" 1,\n                                         \"4\" 2,\n                                         \"5\" 3,\n                                         \"6\" 4,\n                                         \"7\" 5,\n                                         \"8\" 6,\n                                         \"9\" 7,\n                                         \"T\" 8,\n                                         \"J\" 9,\n                                         \"Q\" 10,\n                                         \"K\" 11,\n                                         \"A\" 12\n                                           } rank)}))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 128, "code": "(fn [[enc-suit enc-rank]]\n    (let\n        [suits {\\C :club\n                \\S :spade\n                \\H :heart\n                \\D :diamond}\n         ranks {\\2 0\n                \\3 1\n                \\4 2\n                \\5 3\n                \\6 4\n                \\7 5\n                \\8 6\n                \\9 7\n                \\T 8\n                \\J 9\n                \\Q 10\n                \\K 11\n                \\A 12}]\n      {:suit (suits enc-suit)\n       :rank (ranks enc-rank)}))", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 128, "code": "(fn [s] {:suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} (first s)) \n         :rank (get (into (hash-map) (map #(vector %1 %2) (concat (map  (comp char (partial + (int \\0))) (range 2 10)) [\\T \\J \\Q \\K \\A]) (range))) (second s))})", "user": "594263cbe4b060784b3b790a"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 128, "code": "(fn to-repr [card]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))\n        suit (first card)\n        rank (second card)]\n        {:suit (suits suit) :rank (ranks rank)}))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 128, "code": "(fn [input]\n  (let [suit (first input)\n        rank (second input)\n        suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    (assoc {} :suit (suits suit) :rank (ranks rank))))", "user": "5989ee61e4b021a7a535fed7"}, {"problem": 128, "code": "(fn playing-card [card]\n  (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits (first card)), :rank (ranks (second card))}))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 128, "code": "(fn \n\t[s]\n\t(let [suitrank (->> s\n\t\t\t\t\t\tseq\n\t\t\t\t\t\t(map str))]\n\t\t{:suit ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} (first suitrank)) \n\t\t:rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (last suitrank))}))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 128, "code": "(fn poker [card]\n  (let [suit (first card)\n        rank (second card)\n        suitmap {\\D :diamond\n                 \\S :spade\n                 \\C :club\n                 \\H :heart}\n        ranknums (zipmap (map (comp first str) (range 2 10)) (range 8))\n        rankfaces {\\T 8\n                   \\J 9\n                   \\Q 10\n                   \\K 11\n                   \\A 12}]\n    (println ranknums)\n(hash-map :suit (suitmap suit)\n          :rank (get ranknums rank (rankfaces rank)))))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 128, "code": "(fn function-128\n\n  [str1]\n  (when (= (count str1) 2)\n    (let [color {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spades}\n          numes {\"A\" 12 \"K\" 11 \"Q\" 10 \"J\" 9 \"T\" 8 \"9\" 7 \"8\" 6 \"7\" 5 \"6\" 4 \"5\" 3 \"4\" 2 \"3\" 1 \"2\" 0}\n          [f  r :as list] (map #(str %) (seq str1))]\n      {:suit (color f) :rank (numes r)}\n      )))", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 128, "code": "(fn ccc ([x] (ccc x (let [y {:suit nil :rank nil}] (cond\n                                                       (= \\T (last x)) (assoc y :rank 8)\n                                                       (= \\J (last x)) (assoc y :rank 9)\n                                                       (= \\Q (last x)) (assoc y :rank 10)\n                                                       (= \\K (last x)) (assoc y :rank 11)\n                                                       (= \\A (last x)) (assoc y :rank 12)\n                                                       :else (assoc y :rank (- (Long. (str (last x))) 2)))\n                                                     )))\n  ([x y] (cond\n           (= \\D (first x)) (assoc y :suit :diamond)\n           (= \\H (first x)) (assoc y :suit :heart)\n           (= \\C (first x)) (assoc y :suit :club)\n           :else (assoc y :suit :spade))))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 128, "code": "#(\n  let [suits { \\D :diamond \\H :heart \\C :club \\S :spade }\n       ranks { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n  { :suit (suits (first %)) :rank (ranks (second %)) })", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ((zipmap (map str \"SHDC\") [:spade :heart :diamond :club]) (str suit))\n   :rank ((zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13)) (str rank))}\n)", "user": "59971e2de4b07157cc8daacc"}, {"problem": 128, "code": "(comp (partial zipmap [:suit :rank])\n      (partial map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12\n                    \\D :diamond \\H :heart \\C :club \\S :spade}))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 128, "code": "(fn [i]\n   (let [s (nth i 0)\n         r (nth i 1)\n         sm {\\H :heart\n             \\D :diamond\n             \\C :club\n             \\S :spade}\n         rm {\\2 0\n             \\3 1\n             \\4 2\n             \\5 3\n             \\6 4\n             \\7 5\n             \\8 6\n             \\9 7\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12}]\n     {:suit (sm s) :rank (rm r)}))", "user": "5162757ee4b03cfa3774b3fe"}, {"problem": 128, "code": "(fn x [card]\n  (let [sw {\\S [:spade 1], \\H [:heart 2], \\D [:diamond 0], \\C [:club 3]}\n        nw {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        card-suit (get sw (first card))\n        card-number (get nw (last card))]\n    (hash-map :suit (get card-suit 0), :rank card-number)))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 128, "code": "(fn\n    [[suit rank]]\n    (let [suits (vec \"HDCS\")\n          suit->idx (zipmap suits (range (count suits)))\n        \n          ranks (vec \"23456789TJQKA\")\n          rank->idx (zipmap ranks (range (count ranks)))]\n    \n      {:suit ({0 :heart 1 :diamond 2 :club 3 :spade} (get suit->idx suit nil)) \n       :rank (get rank->idx rank nil)}))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 128, "code": "(fn solution [[suit rank]]\n  (let [suits { \\D :diamond, \\H :heart, \\C :club,  \\S :spade }\n        ranks { \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8 , \\J 9, \\Q 10, \\K 11, \\A 12 }]\n    { :suit (get suits suit) :rank (get ranks rank) }))", "user": "59a72effe4b066c664927d94"}, {"problem": 128, "code": "(fn card [sym]\n  (let [suit (first sym) rank (last sym)\n       converted {:suit (get \n          {\\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spades\n          } suit)\n         :rank (get \n          {\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12\n          } rank)\n        }\n     ]\n   \n   (if (nil? (:rank converted))\n    (assoc converted :rank (-> rank str Integer. dec dec))\n    converted\n   )\n  )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 128, "code": "(fn [sx] (\n            identity {:suit ({\\S :spide \\D :diamond \\H :heart \\C :club} (first sx))\n            :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last sx))\n                  }\n                  ))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 128, "code": "(fn string->card [[suit rank]]                                                                                                                                                                                                           \n  (let [suit (#(cond                                                                                                                                                                                                                       \n                 (= \\D %) :diamond                                                                                                                                                                                                         \n                 (= \\H %) :heart                                                                                                                                                                                                           \n                 (= \\S %) :spades                                                                                                                                                                                                          \n                 (= \\C %) :club) suit)                                                                                                                                                                                                    \n        rank (#(cond                                                                                                                                                                                                                       \n                (= \\T %) 8                                                                                                                                                                                                                 \n                (= \\J %) 9                                                                                                                                                                                                                 \n                (= \\Q %) 10                                                                                                                                                                                                                \n                (= \\K %) 11                                                                                                                                                                                                                \n                (= \\A %) 12                                                                                                                                                                                                                \n                :else (- (int %) 50)) rank)]                                                                                                                                                                                               \n    (hash-map :suit suit :rank rank)))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 128, "code": "(fn [card-str]\n  (let [parse-suit\n        (fn [suit-char]\n          (case suit-char\n            \\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :spade))\n\n        char= (fn [c1 c2]\n                (== 0 (compare c1 c2)))\n        \n        parse-rank\n        (fn [rank-char]\n          (cond\n            (char= rank-char \\T) 8\n            (char= rank-char \\J) 9\n            (char= rank-char \\Q) 10\n            (char= rank-char \\K) 11\n            (char= rank-char \\A) 12\n            :else (- (int rank-char) (int \\2))))]\n       \n    {:suit (parse-suit (first card-str))\n     :rank (parse-rank (second card-str))}))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 128, "code": "(fn [a]\n{:suit (get {\\D :diamond \\H :heart \\C :club \\S :spades} (first a))\n:rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (nth a 1))\n})", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 128, "code": "(fn [s]\n   (let [suits {\\C :club \\S :spade \\D :diamond \\H :heart}\n         ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n         [suit rank] (seq s)]\n     {:suit (get suits suit) :rank (get ranks rank)}))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 128, "code": "#(hash-map :suit (get {\\H :heart \\D :diamond \\C :club \\S :spade} (first %))\n            :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %)))", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 128, "code": "(fn [[x y]]\n  (let [suits (zipmap \"SHDC\" [:spade :heart :diamond :club])\n        ranks (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (suits x) :rank (ranks y)}))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 128, "code": "#(let [cards-suits {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club} cards-rank (zipmap (conj (->> (range 2 10) (map str) (vec)) \"T\" \"J\" \"Q\" \"K\" \"A\") (range 13)) card-data (map str (seq %)) suit (cards-suits (first card-data)) rank (cards-rank (last card-data))] {:suit suit :rank rank})", "user": "59358f74e4b04f87174def52"}, {"problem": 128, "code": "(fn [[s r]] {:suit (case s \\S :spade \\H :heart \\D :diamond \\C :club) :rank (- (if (re-find #\"[0-9]\" (str r)) (read-string (str r)) (case r \\T 10 \\J 11 \\Q 12 \\K 13 \\A 14)) 2)})", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 128, "code": "#(hash-map :suit ({\\D :diamond \\S :spade \\H :heart \\C :club} (first %))\n           :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (last %)))", "user": "59089229e4b047aa04b1997c"}, {"problem": 128, "code": "(fn [s]\n   (let [rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n         suit {\\C :club \\D :diamond, \\H :heart, \\S :spade}]\n     {:suit (suit (first s)),\n      :rank (rank (second s))}))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 128, "code": "#(->> (replace\n             {\\D :diamond\n              \\H :heart\n              \\C :club\n              \\S :spade\n              \\A 12\n              \\K 11\n              \\Q 10\n              \\J 9\n              \\T 8\n              \\9 7\n              \\8 6\n              \\7 5\n              \\6 4\n              \\5 3\n              \\4 2\n              \\3 1\n              \\2 0\n              }\n             %)\n           (zipmap [:suit :rank])\n           )", "user": "596d630ae4b069c0a1a19846"}, {"problem": 128, "code": "(fn [[s r]]\n   (let [suits {\\D :diamond \\C :club \\H :heart \\S :spade}\n         ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n         suit (get suits s)\n         n (Character/getNumericValue r)\n         rank (if (< n 10) (- n 2) (get ranks r))]\n     {:suit suit :rank rank}))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 128, "code": "(fn cards\n   [spec]\n   (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n         ranks (zipmap \"23456789TJQKA\" (range))\n         [s r] spec]\n     {:suit (suits s) :rank (ranks r)}))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 128, "code": "(fn [s]\n  (apply hash-map\n         (flatten\n          (map\n           #(cond\n             (= \\S %) '(:suit :spade)\n             (= \\H %) '(:suit :heart)\n             (= \\D %) '(:suit :diamond)\n             (= \\C %) '(:suit :club)\n             (= \\2 %) '(:rank 0)\n             (= \\3 %) '(:rank 1)\n             (= \\4 %) '(:rank 2)\n             (= \\5 %) '(:rank 3)\n             (= \\6 %) '(:rank 4)\n             (= \\7 %) '(:rank 5)\n             (= \\8 %) '(:rank 6)\n             (= \\9 %) '(:rank 7)\n             (= \\T %) '(:rank 8)\n             (= \\J %) '(:rank 9)\n             (= \\Q %) '(:rank 10)\n             (= \\K %) '(:rank 11)\n             (= \\A %) '(:rank 12))\n           s))))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 128, "code": "#(clojure.set/union {:suit (get {\\D :diamond, \\H :heart, \\C :club, \\S :spades} \n              (first %)) }\n   {:rank (get {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} \n              (second %))})", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}))", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 128, "code": "(fn [card]\n  (let [suit {\\D :diamond \\H :heart \\C :club \\S :spade}\n        value {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get suit (first card)) :rank (get value (second card))}))", "user": "59ddae03e4b01968742fed65"}, {"problem": 128, "code": "(fn s [d]\n\t(let [d (map str (seq d))\n\t\t  suit ({\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club} (first d))\n\t\t  rank ({\"A\" 12 \"K\" 11 \"Q\" 10 \"J\" 9 \"T\" 8 \"9\" 7 \"8\" 6 \"7\" 5 \"6\" 4 \"5\" 3 \"4\" 2 \"3\" 1 \"2\" 0} (last d))]\n\t\t  {:suit suit :rank rank}))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 128, "code": "(fn [s] {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club} (first s)) \n  \t\t :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11  \\A 12} (second s))})", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 128, "code": "(fn [col]\n  {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club}\n              (first col))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11  \\A 12}\n              (second col))})", "user": "59e62655e4b08badc2a0c568"}, {"problem": 128, "code": "(fn    [s]\n \n  (loop\n    [cc   0\n     mapa {}]\n    (if (>= cc 2)\n      mapa\n      (if (zero? cc)\n        (recur\n          ;este es la primera SUIT\n          (inc cc)\n          (cond\n            (= (first s) \\D) (assoc mapa :suit :diamond)\n            (= (first s) \\S) (assoc mapa :suit :spade)\n            (= (first s) \\H) (assoc mapa :suit :heart)\n            (= (first s) \\C) (assoc mapa :suit :club)))\n        (recur\n          ;este es la segunda numero\n          (inc cc)\n          (cond\n            (= (second s) \\2) (assoc mapa :rank 0)\n            (= (second s) \\3) (assoc mapa :rank 1)\n            (= (second s) \\4) (assoc mapa :rank 2)\n            (= (second s) \\5) (assoc mapa :rank 3)\n            (= (second s) \\6) (assoc mapa :rank 4)\n            (= (second s) \\7) (assoc mapa :rank 5)\n            (= (second s) \\8) (assoc mapa :rank 6)\n            (= (second s) \\9) (assoc mapa :rank 7)\n            (= (second s) \\T) (assoc mapa :rank 8)\n            (= (second s) \\J) (assoc mapa :rank 9)\n            (= (second s) \\Q) (assoc mapa :rank 10)\n            (= (second s) \\K) (assoc mapa :rank 11)\n            (= (second s) \\A) (assoc mapa :rank 12)))))))", "user": "59deba46e4b01968742fed7f"}, {"problem": 128, "code": "#(let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n       ranks {\\2 0,\\3 1,\\4 2, \\5 3,\\6 4,\\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n       [s r] (seq %)] {:suit (suits s), :rank (ranks r)}  \n   )", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 128, "code": "(fn recognizePCards \n  [n]\n  {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club}\n              (first n))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11  \\A 12}\n              (second n))})", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 128, "code": "(fn [string]\n(let [diccionarioLetra {\\S :spade, \\H :heart, \\D :diamond, \\C :club} ;formando diccionario\n      diccionarioRangos {\\2 0,\\3 1,\\4 2, \\5 3,\\6 4,\\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} ;formando diccionario\n      [letra numero] (seq string) ;hago una secuencia n string y como son 2 letras, la primer letra la agregoa  letra y la segundo a numero\n      ] \n  {:suit (diccionarioLetra letra), :rank (diccionarioRangos numero)}  \n   ))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 128, "code": "(fn [[x y]] {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} x) :rank (.indexOf (concat (map char (range 50 58)) '(\\T \\J \\Q \\K \\A)) y)})", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 128, "code": "(fn poker [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "59e9f03be4b0249b72820752"}, {"problem": 128, "code": "(fn [x]\n  {:suit \n     (cond\n      (= \\S (first x)) :spade\n      (= \\H (first x)) :heart\n      (= \\D (first x)) :diamond\n      (= \\C (first x)) :club\n     ) \n     :rank \n     (cond\n      (< (- (int (last x)) 50) 10) (- (int (last x)) 50)\n      (= \\T (last x)) 8\n      (= \\J (last x)) 9\n      (= \\Q (last x)) 10\n      (= \\K (last x)) 11\n      (= \\A (last x)) 12\n     ) \n   }\n  )", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "59ea287ee4b0249b72820760"}, {"problem": 128, "code": "(fn\n  [[s r]]\n  (let [suit {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    {:suit (suit s) :rank (.indexOf rank r)}\n    )\n  )", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 128, "code": "(fn [card] (let [ranks (zipmap \"23456789TJQKA\" (range 13))\n                 suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n                 [s r] (seq card)]\n             {:suit (suits s), :rank (ranks r)}))", "user": "59e95cafe4b0249b7282074b"}, {"problem": 128, "code": "(fn card-recog [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 128, "code": "(fn card-value [str]\n  {:suit (get {\\D :diamond,\\H :heart,\\C :club,\\S :spadre}  (first str))\n   :rank (get {\\2 0,\\3 1,\\4 2,\\5 3,\\6 4,\\7 5,\\8 6,\\9 7, \\T 8,\\J 9,\\Q 10,\\K 11,\\A 12} (if (= 3(count str))\n                                                                                         \\T\n                                                                                         (second str)))})", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 128, "code": "(fn cards [card]\n  (assoc {} :suit (get {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n                       (first (map #(str %) (seq card))))\n            :rank (get (into (into {}\n                                   (for [x (range 8)]\n                                     {(str (+ 2 x)) x}))\n                             {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12})\n                       (second (map #(str %) (seq card))))))", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 128, "code": "(fn f\n  [x]\n  (apply hash-map\n         (mapcat #(cond\n                    (= % \\S) (list :suit :spade)\n                    (= % \\D) (list :suit :diamond)\n                    (= % \\H) (list :suit :heart)\n                    (= % \\C) (list :suit :club)\n                    (= % \\A) (list :rank 12)\n                    (= % \\K) (list :rank 11)\n                    (= % \\Q) (list :rank 10)\n                    (= % \\J) (list :rank 9)\n                    (= % \\T) (list :rank 8)\n                    (= % \\9) (list :rank 7)\n                    (= % \\8) (list :rank 6)\n                    (= % \\7) (list :rank 5)\n                    (= % \\6) (list :rank 4)\n                    (= % \\5) (list :rank 3)\n                    (= % \\4) (list :rank 2)\n                    (= % \\3) (list :rank 1)\n                    (= % \\2) (list :rank 0)) x)))", "user": "59e778aae4b0249b72820716"}, {"problem": 128, "code": "#(let[ suite (fn [c]\n              (cond\n               (= c \\D) :diamond\n               (= c \\H) :heart\n               (= c \\C) :club\n               :else :spade))\n        rank (fn [c]\n              (cond\n               (= c \\T) 8\n               (= c \\J) 9\n               (= c \\Q) 10\n               (= c \\K) 11\n               (= c \\A) 12\n               :else (- (int c) (int \\2))))\n       s (first %)\n       r (second %)]\n   (hash-map :suit (suite s), :rank (rank r)))", "user": "59ea85e4e4b0249b72820767"}, {"problem": 128, "code": "(fn [codigo]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\A 12 \\K 11 \\Q 10 \\T 10 \\J 9}\n        get-rank (fn [x]\n                   (cond\n                    (Character/isDigit x) (- (Character/getNumericValue x) 2)\n                    (= \\T x) (- (ranks x) 2)\n                    :else (ranks x)))]\n    (-> (assoc {} :suit (suits (first codigo)))\n        (assoc :rank (get-rank (last codigo))))))", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 128, "code": "(fn Recognize-Playing-Cards\n   [card]\n   (let [suit {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n         rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                   \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n     {:suit (suit (first card)), :rank (rank (second card))}))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 128, "code": "(fn algo [str]\n  {:suit (get {\\D :diamond,\\H :heart,\\C :club,\\S :spadre}  (first str))\n   :rank (get {\\2 0,\\3 1,\\4 2,\\5 3,\\6 4,\\7 5,\\8 6,\\9 7, \\T 8,\\J 9,\\Q 10,\\K 11,\\A 12} (if (= 3(count str))\n                                                                                         \\T\n                                                                                         (second str)))})", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 128, "code": "(fn [x]\n  (let [tipo {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        numero {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (tipo (first x)), :rank (numero (last x))}\n  ))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 128, "code": "(fn [x] (let [ranks (zipmap \"23456789TJQKA\" (range 13))\n                 suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n                 [s r] (seq x)]\n             {:suit (suits s), :rank (ranks r)}))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 128, "code": "(fn [card] (let [ranks (zipmap \"23456789TJQKA\" (range 13))\n                 suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n                 [s r] (seq card)]\n             {:suit (suits s), :rank (ranks r)}))", "user": "59ed01ede4b0249b7282079a"}, {"problem": 128, "code": "(fn my-recognize [cards] \n  (let[ categoria (fn get-category[card]\n              (cond\n               (= card \\D) :diamond\n               (= card \\H) :heart\n               (= card \\C) :club\n               :else :spade))\n        rango (fn get-rango[card]\n              (cond\n               (= card \\T) 8\n               (= card \\J) 9\n               (= card \\Q) 10\n               (= card \\K) 11\n               (= card \\A) 12\n               :else (- (int card) (int \\2))))\n       x (first cards)\n       y (second cards)]\n   (hash-map :suit (categoria x), :rank (rango y))))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 128, "code": "(fn [c]\n  (let [[s r] c]\n    (hash-map \n     :suit (get {\\D :diamond \\S :spade \\H :heart \\C :club} s)\n     :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r ))))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 128, "code": "(fn [x]\n  (let [suitMap {\"S\" :spade\n         \"H\" :heart\n         \"D\" :diamond\n         \"C\" :club\n         \"A\" 12\n         \"K\" 11\n         \"Q\" 10\n         \"J\" 9\n         \"T\" 8\n        }]\n    {:suit (suitMap (str (get x 0))),\n     :rank (if (contains? suitMap (str (get x 1))) (suitMap (str (get x 1))) (- (Integer/parseInt (str (get x 1))) 2))\n    }\n  )\n)", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 128, "code": "(fn [card] (let [[s v] card\n                 suit (case s \\D :diamond \\S :spade \\C :club \\H :heart)\n                 value (- (case v \\A 14 \\J 11 \\Q 12 \\K 13 \\T 10 (Integer/parseInt (str v))) 2)]\n                         {:suit suit :rank value}))", "user": "51000111e4b00d7ad4cab15e"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks (zipmap  [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))\n        [suit rank] s]       \n    {:suit (get suits suit) \n     :rank (get ranks rank)}))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 128, "code": "(fn[s] (let \n     [suitsMap {\"D\" :diamond,\n                \"H\" :heart,\n                \"S\" :spade,\n                \"C\" :club}\n      rankMap {\"2\" 0,\"3\" 1,\"4\" 2,\"5\" 3,\n               \"6\" 4,\"7\" 5,\"8\" 6,\"9\" 7,\n                \"T\" 8,\n                \"J\" 9,\"Q\" 10,\"K\" 11,\"A\" 12}\n      finalMap {}\n      suitMarker (str (first s))\n      rankMarker (str (second s))\n      ]\n    (assoc finalMap \n           :suit (get suitsMap suitMarker) \n           :rank (get rankMap rankMarker)\n    \n    )))", "user": "571172ece4b09c608db70446"}, {"problem": 128, "code": "(fn [[f s]] {:suit (case f\n               \\D :diamond\n               \\S :spade\n               \\C :club\n               \\H :heart)                                      \n            :rank  (case s\n               \\T 8\n               \\J 9   \n               \\Q 10\n               \\K 11\n               \\A 12    \n              (- (int s) 50))})", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n  {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 128, "code": "(fn [code]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\A 12 \\K 11 \\Q 10 \\T 10 \\J 9}\n        get-rank (fn [x]\n                   (cond\n                    (Character/isDigit x) (- (Character/getNumericValue x) 2)\n                    (= \\T x) (- (ranks x) 2)\n                    :else (ranks x)))]\n    (-> (assoc {} :suit (suits (first code)))\n        (assoc :rank (get-rank (last code))))))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 128, "code": "(let [suits {\\S :spade \\D :diamond \\H :heart \\C :club}\n      ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n  (fn [encoded]\n    (let [[suit rank] (seq encoded)]\n      {:suit (suits suit) :rank (ranks rank)})))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 128, "code": "(fn [[c1 c2]] (let [suit (str c1)\n                      rank (str c2)]\n                  (into (get {\"D\" {:suit :diamond}, \"H\" {:suit :heart}, \"S\" {:suit :spade}, \"C\" {:suit :club}} suit)\n                        (get {\"2\" {:rank 0}, \"3\" {:rank 1}, \"4\" {:rank 2}, \"5\" {:rank 3}, \"6\" {:rank 4}, \"7\" {:rank 5}, \"8\" {:rank 6}, \"9\" {:rank 7}, \"T\" {:rank 8}, \"J\" {:rank 9}, \"Q\" {:rank 10}, \"K\" {:rank 11}, \"A\" {:rank 12}} rank))))", "user": "593ab583e4b069cdc2982b57"}, {"problem": 128, "code": "(fn [str]\n  (let [suits {\\S :spade\n               \\H :heart\n               \\D :diamond\n               \\C :club}\n        ranks {\\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12}]\n    {:suit (get suits (first str))\n     :rank (get ranks (second str))}))", "user": "518279abe4b0353c468deb65"}, {"problem": 128, "code": "(fn str-to-suit\n  [[fc sc]]\n  (let [suit ({\\D :diamond \\H :heart \\C :club \\S :spade} fc)\n        number (cond (= \\T sc) 8\n                     (= \\J sc) 9\n                     (= \\Q sc) 10\n                     (= \\K sc) 11\n                     (= \\A sc) 12\n                     :else (- (Character/digit sc 10) 2))]\n      {:suit suit :rank number}))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 128, "code": "(fn [cs]\n  (into\n   (into {} {:suit (case (first cs)\n                          \\S :spade\n                          \\D :diamond\n                          \\H :heart\n                          \\C :club)})\n   {:rank (case (second cs)\n            \\A 12\n            \\K 11\n            \\Q 10\n            \\J 9\n            \\T 8\n            (- (Character/getNumericValue (second cs)) 2))}))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 128, "code": "(fn [x]\n  {:suit (get {\\C :club \\D :diamond \\H :heart \\S :spade} (first x))\n   :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (second x))})", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit (case suit\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (.indexOf (vec \"23456789TJQKA\") rank)})", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 128, "code": "(apply merge (for [s [[\\S :spade] [\\H :heart] [\\D :diamond] [\\C :club]]\n                r [[\\2 0] [\\3 1] [\\4 2] [\\5 3] [\\6 4] [\\7 5] [\\8 6] [\\9 7] [\\T 8] [\\J 9] [\\Q 10] [\\K 11] [\\A 12]]]\n            (hash-map (str (first s) (first r)) {:suit (second s) :rank (second r)})))", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 128, "code": "(fn [card]\n  (let [suit (fn [x]\n               (case x\n                 \\D :diamond\n                 \\H :heart\n                 \\C :club\n                 \\S :spade))\n        rank (fn [x]\n               (case x\n                 \\T 8\n                 \\J 9\n                 \\Q 10\n                 \\K 11\n                 \\A 12\n                 (- (int x) 50)))]\n    \n  (hash-map :suit (suit (first card)) :rank (rank (second card)))))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 128, "code": "(fn [[suit rank]]\n    {:suit (get {\\S :spade, \\D :diamond, \\H :heart, \\C :club} suit)\n     :rank (if-let [r (get {\\A 12, \\K 11, \\Q 10, \\J 9, \\T 8} rank)]\n             r\n             (- (Integer/parseInt (str rank)) 2))})", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 128, "code": "(fn [[suit rank]] (into {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit)}\n                        {:rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)}))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 128, "code": "(fn [card]\n   (let [suit (case (first card) \\S :spade \\H :heart \\D :diamond \\C :club) \n         rank (case (last card) \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \n                                (- (read-string (str (last card))) 2))] {:suit suit :rank rank}))", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)\n             (- (read-string (str r)) \n                2))})", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 128, "code": "(fn [card]\n  (let [[ssuit srank] (seq card)\n        suits {\\S :spade \\D :diamond \\H :heart \\C :club}\n        ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    {:suit (suits ssuit)\n     :rank (.indexOf ranks srank)}))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 128, "code": "(fn card [s]\n\n  {:suit (get {\\H :heart  \\C :club \\D :diamond \\S :spade } (first s))\n   :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))\n}\n\n)", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 128, "code": "(let\n  [suit-map {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n   rank-map {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n   rank (fn [n] (or (rank-map n) (- (Integer/parseInt (str n)) 2)))]\n  (fn [s] (hash-map :suit (suit-map (first s)), :rank (rank (second s)))))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 128, "code": "(fn [x] \n  (let [s ((comp str first seq) x) \n        r ((comp str second seq) x)\n        suits {\"S\" :spade \"D\" :diamond \"H\" :heart \"C\" :club}\n        ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}] \n    (assoc {} :suit (suits s) :rank (ranks r))))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 128, "code": "(fn [code]\n  (let [suit-code (str (first code))\n        rank-code (str (nth code 1))\n        suits {\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade}\n        ranks {\"A\" 12 \"K\" 11 \"Q\" 10 \"J\" 9 \"T\" 8}\n        suit (get suits suit-code)\n        rank (get ranks rank-code)]\n    {:suit suit :rank (if (nil? rank)\n                        (- (Integer. rank-code) 2)\n                        rank)}))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 128, "code": "(fn [xs] (let [SUIT {\\D :diamond, \\H :heart, \\S :spade, \\C :club}\n               RANK { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n               f1 (first xs)\n               f2 (second xs)\n               ]\n           {:suit (SUIT f1), :rank (RANK f2)}\n           )\n  )", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 128, "code": "(fn [[s r]] \n  (let [card {\\S :spade \\H :heart \\D :diamond \\C :club \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n   {:suit (card s) :rank (card r)}))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 128, "code": "(fn [card]\n    (let [rank-map (merge {:D :diamond\n                           :S :spade\n                           :H :heart\n                           :C :club}\n                          (apply merge\n                                 (map (fn [x]\n                                        {(keyword (str x)) (- x 2)})\n                                      (range 2 10)))\n                          {:T 8\n                           :J 9\n                           :Q 10\n                           :K 11\n                           :A 12})]\n      rank-map\n      (reduce (fn [x y]\n                (if (empty? x)\n                  (assoc x :suit ((keyword (str y)) rank-map))\n                  (assoc x :rank ((keyword (str y)) rank-map))))\n              {}\n              card)))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        rankFn (fn [r] (if\n                       (< 49 (int r) 58)\n                       (- (int r) 50)\n                       (ranks r)))]\n        {:suit (suits suit) :rank (rankFn rank)}))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 128, "code": "(fn r-card [[s r]]\n\t{:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s) \n     :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 128, "code": "(fn [c]\n    (let [s (.charAt c 0)\n          r (.charAt c 1)]\n        {:suit (cond (= s \\C) :club\n                     (= s \\D) :diamond\n                     (= s \\H) :heart\n                     (= s \\S) :spade)\n         :rank (cond (= r \\2) 0\n                     (= r \\3) 1\n                     (= r \\4) 2\n                     (= r \\5) 3\n                     (= r \\6) 4\n                     (= r \\7) 5\n                     (= r \\8) 6\n                     (= r \\9) 7\n                     (= r \\T) 8\n                     (= r \\J) 9\n                     (= r \\Q) 10\n                     (= r \\K) 11\n                     (= r \\A) 12)}))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 128, "code": "(fn card-string-to-map [s]\n  (let [suit-map {\\D :diamond\n                  \\S :spade\n                  \\H :heart\n                  \\C :club}\n        rank-map {\\2 0\n                  \\3 1\n                  \\4 2\n                  \\5 3\n                  \\6 4\n                  \\7 5\n                  \\8 6\n                  \\9 7\n                  \\T 8\n                  \\J 9\n                  \\Q 10\n                  \\K 11\n                  \\A 12}\n        [suit-char rank-char] s]\n    {:rank (rank-map rank-char) :suit (suit-map suit-char)}))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {\n    :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} suit)\n    :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] rank)\n  })", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 128, "code": "(fn [x]\n  (let [v (seq x)\n        s {\\S :spade \\H :heart \\D :diamond \\C :club}\n        r {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (s (nth v 0)) :rank (r (nth v 1))}))", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 128, "code": "(fn [[m v]]\n  (let [ms {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        vs {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (ms m) :rank (vs v)}))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 128, "code": "(fn [card] (let\n  [suit-map {\\S :spade, \\H :heart, \\C :club, \\D :diamond},\n   rank-map (into\n     {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n     (map #(vector (char (+ % (int \\2))) %) (range 0 8)))]\n  (hash-map\n    :suit (suit-map (first card))\n    :rank (rank-map (second card)))))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 128, "code": "(fn f\n  [[suit value]]\n  (let [suit-list {\\S :spade\n                   \\H :heart\n                   \\D :diamond\n                   \\C :club}\n        rank-list (zipmap \"23456789TJQKA\" (range))]\n    {:suit (suit-list suit) :rank (rank-list value)}))", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 128, "code": "(fn card_look_up [x] (let [s_map {\\D :diamond \\H :heart \\C :club \\S :spade} \n                           r_map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n                           {:suit (get s_map (first (seq x))) :rank (get r_map (last (seq x)))}))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 128, "code": "(fn ic\n    [card-str]\n    (let [[suit rank] (map str (seq card-str))\n          suit-map {\"D\" :diamond\n                    \"H\" :heart\n                    \"C\" :club\n                    \"S\" :spade}\n          rank-map (merge\n                     (zipmap (map (comp str inc inc) (range 10))\n                             (range 10))\n                     {\"A\" 12\n                      \"K\" 11\n                      \"Q\" 10\n                      \"J\" 9\n                      \"T\" 8})]\n      {:suit (get suit-map suit)\n       :rank (get rank-map rank)}))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 128, "code": "(fn Cards [c]\n  \n (let [Suits{\"D\" :diamond \"H\":heart \"C\":club \"S\":spade }\n\n       Rank { \"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}] \n  \n {:suit (Suits(str (first c))) :rank (Rank(str (last c)))}\n \n ))", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 128, "code": "(fn [st]\n  (let [lets \"23456789TJQKA\"\n        suits {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club}]\n    {:suit (get suits (str (first st)))\n     :rank (.indexOf (vec lets) (second st))}))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 128, "code": "(fn [i] {:suit \n  ((fn [a]\n  (case a\n    \\S :spade\n    \\H :heart\n    \\D :diamond\n    \\C :club)) (nth i 0))\n\n :rank \n ((fn [b]\n  (case b\n    \\T 8\n    \\J 9\n    \\Q 10\n    \\K 11\n    \\A 12\n    (- (Character/digit b 10) 2)) ) (nth i 1))\n\n })", "user": "58b54852e4b0ebc645576d52"}, {"problem": 128, "code": "(fn [card]\n  (let [s (first card)\n        r (second card)\n        ranks (apply str (concat (map str (range 2 10)) '(\"T\" \"J\" \"Q\" \"K\" \"A\")))\n        suits {\\S :spade \\H :heart \\D :diamond \\C :club}]\n    {:suit (suits s) :rank (.indexOf ranks (int r))}))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 128, "code": "(fn[x](let [a [{\\D :diamond, \\H :heart, \\S :speads, \\C :club}\n         {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6,\n          \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]]\n    {:suit (get-in a [0 (first x)]), :rank (get-in a [1 (second x)])}))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 128, "code": "(fn [st]\n    (let [suits {:S :spade, :H :heart, :D :diamond, :C :club} cards '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A)]\n      {:suit ( get suits (#(keyword (str %)) (first st)) ) :rank (.indexOf cards (last st))}\n    )\n )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 128, "code": "(let [->suit {\\D :diamond \\H :heart \\C :club \\S :spade}\n      ->rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n  #(array-map :suit (->suit (first %)) :rank (->rank (second %))))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 128, "code": "(fn rec-play-cards [s]\n  (let [suit (zipmap [\\D \\H \\C \\S] [:diamond :heart :club :spade])\n        rank (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))]\n    {:suit (suit (first s)) :rank (rank (second s))}))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 128, "code": "(fn to-card [card-str]\n  (let [[suit-char rank-char] (seq card-str)\n        suits {\\D :diamond,\n               \\H :heart,\n               \\C :club,\n               \\S :spade}\n        ranks {\\2 0,\n               \\3 1,\n               \\4 2,\n               \\5 3,\n               \\6 4,\n               \\7 5,\n               \\8 6,\n               \\9 7,\n               \\T 8,\n               \\J 9,\n               \\Q 10,\n               \\K 11,\n               \\A 12}\n        ranks' (into {} (map-indexed #(vector %2 %1) (seq \"23456789TJQKA\")))\n        ]\n    {:suit (suits suit-char) :rank (ranks' rank-char)}))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 128, "code": "(fn pc [str]\n(let [suit {\"D\" :diamond, \"C\" :club, \"S\" :spade, \"H\" :heart}\n      rank (apply hash-map\n                  (interleave\n                   [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n                   (range 13)))\n      [s r] (re-seq #\"\\w\" str)]\n  {:suit (suit s) :rank (rank r)}))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 128, "code": "(fn [[s r]]\n    (hash-map\n      :suit\n      (cond\n        (= s \\C) :club\n        (= s \\D) :diamond\n        (= s \\H) :heart\n        (= s \\S) :spade)\n      :rank\n      (cond\n        (and (>= (int r) 50) (<= (int r) 57)) (- (int r) 50)\n        (= r \\T) 8\n        (= r \\J) 9\n        (= r \\Q) 10\n        (= r \\K) 11\n        (= r \\A) 12)))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 128, "code": "(fn [str]\n  (let [tonum #(-> % (int) (- 48))\n      tosuit {\\D :diamond \\H :heart \\C :club \\S :spade}\n      torank (zipmap (concat (map #(char (+ % 48)) (range 2 10)) '(\\T \\J \\Q \\K \\A)) (range 0 13))]\n    {:suit (tosuit (get str 0))\n     :rank (torank (get str 1))}\n  )\n)", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [ss (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        rs (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    (zipmap [:suit :rank] [(ss (str s)) (rs (str r))])))", "user": "527ba29de4b03e8d9a4a7594"}, {"problem": 128, "code": "(fn [string]\n  (let [suits {\\C :club \\D :diamond \\H :heart \\S :spade}\n        ranks {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0}]\n    {:suit (suits (first string)) :rank (ranks (second string))}))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 128, "code": "(fn [[suit, card]]\n  {:rank (.indexOf \"23456789TJQKA\" ^String (str card))\n   :suit ([:spade :heart :diamond :club] (.indexOf \"SHDC\" ^String (str suit)))})", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 128, "code": "(fn [card]\n  (let [suit {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n        rank {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n    {:suit (suit (str (first card))) :rank (rank (str (second card)))}))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 128, "code": "(fn [[s v]]\n     {:suit (case s \\D :diamond\n                    \\H :heart\n                    \\C :club\n                    \\S :spade) \n      :rank (case v \\A 12\n                    \\K 11\n                    \\Q 10\n                    \\J 9\n                    \\T 8\n                    (- (int v) 50))})", "user": "59e8bb43e4b0249b72820735"}, {"problem": 128, "code": "(fn [[s v]] {:suit (case s \\D :diamond \\H :heart \\C :club \\S :spade)\n             :rank (case v \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 (- (int v) 50))})", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 128, "code": "(fn [c] {\n  \t:suit ({\n            \\H :heart\n            \\C :club\n            \\D :diamond\n            \\S :spade} (first c))\n  \t:rank (case (second c)\n            \\2 0\n            \\3 1\n            \\4 2\n            \\5 3\n            \\6 4\n            \\7 5\n            \\8 6\n            \\9 7\n            \\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12)})", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 128, "code": "(fn cards [s]\n  (let [suits\n        (fn [c]\n          (cond (= c \"S\") [:suit :spade]\n                (= c \"H\") [:suit :heart]\n                (= c \"D\") [:suit :diamond]\n                :else [:suit :club]))\n        rank\n        (fn [c]\n          (cond (= c \"A\") [:rank 12]\n                (= c \"K\") [:rank 11]\n                (= c \"Q\") [:rank 10]\n                (= c \"J\") [:rank 9]\n                (= c \"T\") [:rank 8]\n                :else [:rank (- (Integer/parseInt c) 2)]))]\n    (conj (conj {} (suits (str (first s)))) (rank (str (second s))))))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 128, "code": "(fn [[s r]] {\n  :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n  :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 128, "code": "(fn [x]\n  (let [ vals {\\J 9 \\Q 10 \\K 11 \\A 12 \\T 8} suits {\\H :heart \\D :diamond \\C :club \\S :spade}\n        suit (suits (first x)) r (last x) rank (or (vals r) (- (int r) 50))]\n    {:suit suit :rank rank}\n  )\n)", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 128, "code": "(fn reccard [card]\n    {\n        :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first card))\n        :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second card))\n    })", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 128, "code": "(fn [s]\n  (let [ranks (zipmap \"23456789TJQKA\" (range 13))\n        suits {\\D :diamond \\S :spade \\C :club \\H :heart}\n        [s r] (seq s)]\n    {:suit (suits s) :rank (ranks r)}))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 128, "code": "(fn card[c]\n  (let [suit (zipmap [\\D \\H \\S \\C] [:diamond :heart :spade :club])\n        rank (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))]\n  \t{:suit (suit (first c)) :rank (rank (second c))}))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 128, "code": "(fn [[x1 x2]]\n   {:suit ({\\D :diamond \\S :spade\n            \\H :heart \\C :club}\n           x1)\n    :rank (.indexOf \"23456789TJQKA\" (str x2))})", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 128, "code": "(fn my-cards\n  [code]\n  (let [ranks-keys (concat (map #(char (+ 48 %)) (range 2 10)) [\\T \\J \\Q \\K \\A])\n        ranks-vals (range 13) \n        ranks (zipmap ranks-keys ranks-vals)\n        suits {\\D :diamond \\H :heart \\C :club \\S :spade}]\n      {:suit (get suits (first code)) :rank (get ranks (second code))}))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 128, "code": "#(let [[fst snd] %\n      setup (assoc {}\n                   :suit (zipmap (seq \"SHDC\") [:spade :heart :diamond :club])\n                   :rank (merge (zipmap (seq \"23456789\") (range 0 8))\n                                (zipmap (seq \"TJQKA\") (range 8 14))))]\n  {:suit ((:suit setup) fst)\n   :rank ((:rank setup) snd)})", "user": "590b8607e4b047aa04b199db"}, {"problem": 128, "code": "(fn [x]\n {:suit ({\\S :spade\n   \\C :club\n   \\H :heart\n   \\D :diamond} (nth x 0))\n  :rank (#(condp = %\n   \\T 8\n   \\J 9\n   \\Q 10\n   \\K 11\n   \\A 12\n   (- (Character/getNumericValue %)\n      2)) (nth x 1))})", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "5a9567bae4b0d174b936c752"}, {"problem": 128, "code": "(fn playing-card [s]\n   (let [c-map {\\S :spade, \\D :diamond, \\H :heart, \\C :club, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n         s-seq (seq s)\n         digs (fn [xx] (if (not= -1 (.indexOf (vec (range 2 10)) (- (int xx) 48)))\n                         (- (- (int xx) 48) 2)\n                         (c-map xx)))\n         ]\n     (apply assoc {} [:suit (c-map (first s-seq)) :rank (digs (second s-seq))])))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 128, "code": "(fn [[first-char second-char]]\n  (let [suit-map {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        rank-map (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))]\n    {:suit (suit-map first-char), :rank (rank-map second-char)}))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 128, "code": "(fn [a]\n  (let [s {\\S :spade \\H :heart \\D :diamond \\C :club} r {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]  \n   {:suit (get s (first a)) :rank (get r (second a))}      \n   ))", "user": "5a9cdb7de4b0d174b936c7e0"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "5a984657e4b0d174b936c78a"}, {"problem": 128, "code": "(fn [card-str]\n  (let [suit-map {\\D :diamond\n                  \\H :heart\n                  \\C :club\n                  \\S :spade}\n        rank-map {\\2 0\n                  \\3 1\n                  \\4 2\n                  \\5 3\n                  \\6 4\n                  \\7 5\n                  \\8 6\n                  \\9 7\n                  \\T 8\n                  \\J 9\n                  \\Q 10\n                  \\K 11\n                  \\A 12}]\n        {:suit (get suit-map (first card-str))\n         :rank (get rank-map (second card-str))}))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 128, "code": "(fn play-cards [card]\n  (zipmap [:suit :rank] (vector ({\\S :spade \\H :heart \\D :diamond \\C :club} (first card)) ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n           (range 13)) (second card)))))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 128, "code": "(fn play-cards [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 128, "code": "(fn poke \n  [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (condp = s\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (condp = r\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           (- (int r) 50))})", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 128, "code": "(fn cards\n  [string]\n  \n  (let [suit (first string) \n        rank (last string)]\n    \n\t   (assoc {}\n         \n         :suit\n         (case suit\n           \\S :spades\n           \\H :heart\n           \\D :diamond\n           \\C :club\n           )\n              \n         :rank\n         (case rank\n           \\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12))))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 128, "code": "(fn poker [s]\n  (let [suit {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suit (first s)), :rank (rank (last s))}))", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 128, "code": "(fn [card] (let [ranks (zipmap \"23456789TJQKA\" (range 13))\n                 suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n                 [s r] (seq card)] \n             {:suit (suits s), :rank (ranks r)}))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (condp = s\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (condp = r\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           (- (int r) 50))})", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 128, "code": "(fn [[s p]] {:suit ({\\H :heart\n                 \\C :club\n                 \\S :spade\n                 \\D :diamond} s)\n         :rank ((zipmap \"23456789TJQKA\" (range)) p)})", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 128, "code": "(fn [[s r]]\n   (let [suit-map (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n         rank-map (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n     (hash-map :suit (suit-map (str s))\n               :rank (rank-map (str r)))))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 128, "code": "(fn [arg] {:suit (case (str (first arg)) \"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club \"S\") :rank (case (str (last arg)) \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12 (- (read-string (str (last arg))) 2))})", "user": "5a527c16e4b05d388ecb6bff"}, {"problem": 128, "code": "(fn [s] { :suit ({\\D :diamond \\S :spade \\C :club \\H :heart} (first s)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last s)) } )", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 128, "code": "(fn [[suit rank]]\n    (let [suit-map {\\S :spade\n                    \\H :heart\n                    \\D :diamond\n                    \\C :club}\n          rank-map {\\2 2\n                    \\3 3\n                    \\4 4\n                    \\5 5\n                    \\6 6\n                    \\7 7\n                    \\8 8\n                    \\9 9\n                    \\T 10\n                    \\J 11\n                    \\Q 12\n                    \\K 13\n                    \\A 14}]\n      {:suit (get suit-map suit)\n       :rank (- (get rank-map rank) 2)}))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 128, "code": "(fn card [[s r]]\n  (let [suit {\\D :diamond \\H :heart \\S :spade \\C :club}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit s) :rank (rank r)}))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 128, "code": "(fn [t]\n  (let [f (first t)\n        s (second t)\n        m1 {\\D :diamond \\S :spade \\H :heart \\C :club \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8\\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get m1 f) :rank (get m1 s)}))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 128, "code": "(fn [code]\n  (let [rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suite {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ]\n    {:suit (suite (first code)) :rank (rank (second code))}))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 128, "code": "(fn recognize-cards [card]\n  (let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        ranks (zipmap '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A)\n                      (range 13))\n        [suit rank] card]\n    {:suit (get suits suit)\n     :rank (get ranks rank)}))", "user": "5ab564f8e4b073f177442639"}, {"problem": 128, "code": "(fn my-prob-128-recognize-playing-cards [[s r]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    {:suit (suits s) :rank (.indexOf ranks r)}))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 128, "code": "(fn [[suit rank]]\n    (let [suit->display (fn []\n                          (case suit\n                            \\D :diamond\n                            \\H :heart\n                            \\C :club\n                            \\S :spades))\n\n          rank->display (fn []\n                          (-\n                           (case rank\n                               \\T 10\n                               \\J 11\n                               \\Q 12\n                               \\K 13\n                               \\A 14\n                               (-> rank str read-string))\n                           2))]\n\n      {:suit (suit->display)\n       :rank (rank->display)}))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suites {\\H :heart \\C :club \\D :diamond \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suites s) :rank (ranks r)}))", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\\S :spade\n             \\D :diamond\n             \\H :heart\n             \\C :club}\n      vals (into {} (map vector \"23456789TJQKA\" (range)))]\n    {:suit (get suits (first card)) :rank (get vals (last card))}))", "user": "5acd08eee4b0e27600da7822"}, {"problem": 128, "code": "(fn [card] (let [ranks (zipmap \"23456789TJQKA\" (range 13))\n                 suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n                 [s r] (seq card)]\n             {:suit (suits s), :rank (ranks r)}))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 128, "code": "(fn recognize-cards\n  [card]\n  (let [card-values (zipmap \"23456789TJQKA\" (iterate inc 0))\n        card-suits {\\S :spade \\D :diamond \\H :heart \\C :club}]\n    {:suit (card-suits (first card))\n     :rank (card-values (second card))}))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 128, "code": "(fn to-card\n  [card-str]\n  (when (not= 2 (count card-str))\n    (throw (ex-info (str \"Invalid length: \" (count card-str) \" Expected 2 chars\")\n                    {:card-str card-str\n                     :length (count card-str)})))\n  (let [suite-mapping {\\S :spade\n                       \\H :heart\n                       \\D :diamond\n                       \\C :club}\n        rank-mapping {\\2 0\n                      \\3 1\n                      \\4 2\n                      \\5 3\n                      \\6 4\n                      \\7 5\n                      \\8 6\n                      \\9 7\n                      \\T 8\n                      \\J 9\n                      \\Q 10\n                      \\K 11\n                      \\A 12}\n        [suite-char rank-char] card-str\n        suit (suite-mapping suite-char)\n        rank (rank-mapping rank-char)]\n    (when-not (and suit rank)\n      (throw (ex-info (str \"Invalid rank or suit: \" [suit rank])\n                      {:card-str card-str\n                       :suit suit\n                       :rank rank})))\n    {:suit suit\n     :rank rank}))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 128, "code": "(fn [c] {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first c)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last c))})", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 128, "code": "#(let [s {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n       r {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n              \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10 \\K 11 \\A 12}\n       [a b] %]\n  {:suit (s a) :rank (r b)})", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n        ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n        { \n     \t\t:suit (suits (subs card 0 1))\n         \t:rank (ranks (subs card 1 2))\n    \t}))", "user": "5a8e9fb5e4b05369db4d2529"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank (.indexOf (seq \"23456789TJQKA\") r)})\n\n;(fn\n;  [card-string]\n;  (let\n;    [[suit rank] (seq card-string) \n;     suits {\\C :club\n;            \\D :diamond\n;            \\H :heart\n;            \\S :spade}\n;     ranks {\\2 0\n;            \\3 1\n;            \\4 2\n;            \\5 3\n;            \\6 4\n;            \\7 5\n;            \\8 6\n;            \\9 7\n;            \\T 8\n;            \\J 9\n;            \\Q 10\n;            \\K 11\n;            \\A 12}]\n;    (hash-map :suit (get suits suit) :rank (get ranks rank)) ))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 128, "code": "(fn [s]\n  {:suit (if (= (first s) \\D)\n           :diamond\n           (if (= (first s) \\H)\n             :heart\n             (if (= (first s) \\C)\n               :club\n               :spade)))\n  :rank (let [r (second s)]\n          (if (= r \\T)\n            8\n            (if (= r \\J)\n              9\n              (if (= r \\Q)\n                10\n                (if (= r \\K)\n                  11\n                  (if (= r \\A)\n                    12\n                    (dec (dec (Integer/parseInt (str r))))))))))})", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 128, "code": "(fn [s]\n  (let [x (first s)\n        y (second s)\n        i (case x\n            \\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :spade)\n        j (case y\n            \\2 0\n            \\3 1\n            \\4 2\n            \\5 3\n            \\6 4\n            \\7 5\n            \\8 6\n            \\9 7\n            \\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12)]\n    {:suit i :rank j}))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [ranks\n        {\\2 0\n         \\3 1\n         \\4 2\n         \\5 3\n         \\6 4\n         \\7 5\n         \\8 6\n         \\9 7\n         \\T 8\n         \\J 9\n         \\Q 10\n         \\K 11\n         \\A 12}\n        suits \n        {\\D :diamond\n         \\H :heart\n         \\C :club\n         \\S :spade}]\n    {:suit (suits s) :rank (ranks r)}))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 128, "code": "(fn pl-cards [arg]\n  (let [ranks (into {} (map #(vector (keyword (str %1)) %2) (seq \"23456789TJQKA\") (range)))\n        suits (into {} (map #(vector (keyword (str %1)) %2) (seq \"SHDC\") [:spade :heart :diamond :club]))\n        sr (-> arg seq (#(map str %)))]\n    {:suit ((-> sr first keyword) suits) :rank ((-> sr second keyword) ranks)}))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 128, "code": "(fn cardeasy \n   [code]\n   (let [kind {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n         rank {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n     {:suit (kind (first code)), :rank (rank (last code))}))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 128, "code": "(fn [card] (zipmap [:suit :rank] (map #(case %\n  \"S\" :spade\n  \"H\" :heart\n  \"D\" :diamond\n  \"C\" :club\n  \"A\" 12\n  \"K\" 11\n  \"Q\" 10\n  \"J\" 9\n  \"T\" 8\n  (- (read-string %) 2)\n  ) (map str (vec card)))))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 128, "code": "(fn [[s t]]\n  (let [f (zipmap \"23456789TJQKADHCS\"\n                  (conj (vec (range 13)) :diamond :heart :club :spades))]\n    {:suit (f s)\n     :rank (f t)}))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 128, "code": "(fn [card]\n  (let [[suit rank] card]\n    {:suit ({\\S :spade\n             \\H :heart\n             \\D :diamond\n             \\C :club} suit)\n     :rank ({\\2 0\n             \\3 1\n             \\4 2\n             \\5 3\n             \\6 4\n             \\7 5\n             \\8 6\n             \\9 7\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12} rank)}))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 128, "code": "(fn [x]\n    (let [s->suit {\\D :diamond\n                   \\H :heart\n                   \\C :club\n                   \\S :spade}\n          s->rank {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n          rank    #(or (s->rank %)\n                       (- (Character/digit % 10) 2))\n          [s r]   x]\n      {:suit (s->suit s)\n       :rank (rank r)}))", "user": "5649b1b0e4b0284900eef646"}, {"problem": 128, "code": "#(hash-map :suit ({\\D :diamond \\S :spade \\C :club \\H :heart} (first %))\n           :rank (.indexOf \"23456789TJQKA\" (subs % 1)))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 128, "code": "(fn [[a b]]\n  (let [parse-suit (zipmap \"SHDC\" [:spade :heart :diamond :club])\n        parse-rank (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (parse-suit a)\n     :rank (parse-rank b)}))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 128, "code": "#(let [t (nth % 0)\n       n (nth % 1)\n       vt (cond (= t \\S) :spade\n                (= t \\H) :heart\n                (= t \\D) :diamond\n                :else :club)\n       vn (cond (= n \\T) 8\n                (= n \\J) 9\n                (= n \\Q) 10\n                (= n \\K) 11\n                (= n \\A) 12\n                :else (- (int n) 50))]\n   {:suit vt :rank vn})", "user": "55e732c5e4b050e68259b492"}, {"problem": 128, "code": "(fn [s]\n  {:suit (case (first s)\n           \\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club)\n   :rank (case (second s)\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12\n           (- (int (second s)) (int \\0) 2))})", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 128, "code": "(fn [card-str]\n  (let [suit (str (first card-str))\n        rank (str (second card-str))\n        suit-map {\"D\" :diamond\n                  \"S\" :spade\n                  \"H\" :heart\n                  \"C\" :club}\n        rank-map {\"T\" 8\n                  \"J\" 9\n                  \"Q\" 10\n                  \"K\" 11\n                  \"A\" 12}]\n    {:suit (get suit-map suit)\n     :rank (or (get rank-map rank)\n                (- (read-string rank) 2))}))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 128, "code": "(fn [in]\n  (let [sm {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rm {\\A 12 \\Q 10 \\K 11 \\T 8 \\J 9 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0}\n        ]\n    (let [[s r] (seq in)]\n      {:suit (sm s) :rank (rm r)}\n      )\n    )\n  )", "user": "583048d9e4b051871117c007"}, {"problem": 128, "code": "(fn [card-str]\n  (let [suit (case (first card-str)\n               \\D :diamond\n               \\H :heart\n               \\S :spade\n               \\C :club)\n        num  (read-string (apply str (rest card-str)))\n        num  (if (= java.lang.Long (class num))\n               (- num 2)\n               (case (name num)\n                 \"A\" 12\n                 \"K\" 11\n                 \"Q\" 10\n                 \"J\" 9\n                 \"T\" 8))]\n    {:suit suit :rank num}))", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 128, "code": "(fn [[s r]] \n    (let [\n      suits {\n        \\S :spade\n        \\H :heart\n        \\D :diamond\n        \\C :club\n      }\n      ranks {\n        \\2 0\n        \\3 1 \n        \\4 2 \n        \\5 3\n        \\6 4 \n        \\7 5\n        \\8 6\n        \\9 7\n        \\T 8\n        \\J 9\n        \\Q 10\n        \\K 11\n        \\A 12\n      }    \n    ]\n    {\n     :suit (get suits s)\n     :rank (get ranks r)\n    }\n    ))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 128, "code": "(fn [[s r]]\n   {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n    :rank (.indexOf \"23456789TJQKA\" (str r))})", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 128, "code": "#(let [\n    suits-abbr \"SHDC\"\n    suits-names [:spade :heart :diamond :club]\n    ranks \"23456789TJQKA\"\n    card %]\n        (assoc {}\n            :suit (nth suits-names (.indexOf suits-abbr (str (first card))))\n            :rank (.indexOf ranks (str (second card)))))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 128, "code": "(fn\n  [card-string]\n  (let [suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n        ranks {\"2\" 0\n               \"3\" 1\n               \"4\" 2\n               \"5\" 3\n               \"6\" 4\n               \"7\" 5\n               \"8\" 6\n               \"9\" 7\n               \"T\" 8\n               \"J\" 9\n               \"Q\" 10\n               \"K\" 11\n               \"A\" 12}\n        card-pair (map str card-string)\n        suit (get suits (first card-pair))\n        rank (get ranks (second card-pair))]\n     (apply hash-map (list :suit suit :rank rank))))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 128, "code": "(fn convert-card [[t v]]\n  {\n    :suit (cond (= t \\D) :diamond\n                (= t \\H) :heart\n                (= t \\C) :club\n                (= t \\S) :spade)\n\n    :rank (reduce\n      (fn [z h]\n        (if (= (nth [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] h) v)\n            h\n            z))\n    (range 13))\n  })", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 128, "code": "(fn [x]\n (let [s (str (first x)) r (str (second x))]\n  (assoc {} :suit\n   (case s\n    \"S\" :spade\n    \"H\" :heart\n    \"D\" :diamond\n    \"C\" :club)\n   :rank\n   (case r\n    \"A\" 12\n    \"K\" 11\n    \"Q\" 10\n    \"J\" 9\n    \"T\" 8\n    (- (read-string (re-find #\"\\d\" r)) 2)))))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 128, "code": "#(letfn [(suit[s] (cond\n                     (= s \\D) :diamond\n                     (= s \\H) :heart\n                     (= s \\S) :spade\n                     (= s \\C) :club ))\n         (rank[r] (let [m {:T 8 :J 9 :Q 10 :K 11 :A 12}]\n                    (cond\n                      (Character/isDigit r) (- (read-string (str r)) 2)\n                      :else (get m (keyword (str r)))))\n           )] (let [[s r] (seq %)] {:rank (rank r) :suit (suit s)}))", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 128, "code": "(fn rpc[h]\n  {:suit  ({\\D :diamond\n            \\H :heart\n            \\S :spade\n            \\C :club}\n           (first h))\n   :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (second h))})", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 128, "code": "(fn [code] (let [suites {:D :diamond\n                          :H :heart\n                          :C :club\n                          :S :spade}\n                  ranks (into {} (map-indexed\n                                   (fn [idx itm]\n                                     [itm idx]) \n                                   [:2 :3 :4 :5 :6 :7 :8 :9 :T :J :Q :K :A]))]\n              {:suit (get suites (keyword (str (nth code 0))))\n               :rank (get ranks (keyword (str (nth code 1))))}))", "user": "5aef6084e4b0cc2b61a3bc34"}, {"problem": 128, "code": "(fn f [s]\n  (let [cards (str (apply str (range 2 10)) \"TJQKA\")\n        ranks (->>  (interleave cards (range))\n                    (apply hash-map))\n        suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}]  \n    {:suit (get suits (first s))\n     :rank (get ranks (second s))}))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 128, "code": "(fn [[s r]]\n    (let [ascii-offset 50 ;; \\9 is char 57. We want 9 to become 7.\n          suit ({\\D :diamond\n                 \\H :heart\n                 \\C :club\n                 \\S :spade} s)\n          rank (cond\n                 (= r \\A) 12\n                 (= r \\K) 11\n                 (= r \\Q) 10\n                 (= r \\J) 9\n                 (= r \\T) 8\n                 :else (- (int r) ascii-offset))]\n      {:suit suit :rank rank}))", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 128, "code": "(fn [card]\n                              (let [suits {\"D\" :diamond\n                                           \"H\" :heart\n                                           \"C\" :club\n                                           \"S\" :spade}\n                                    ranks {\"2\" 0\n                                           \"3\" 1\n                                           \"4\" 2\n                                           \"5\" 3\n                                           \"6\" 4\n                                           \"7\" 5\n                                           \"8\" 6\n                                           \"9\" 7\n                                           \"T\" 8\n                                           \"J\" 9\n                                           \"Q\" 10\n                                           \"K\" 11\n                                           \"A\" 12}\n                                    suit (str (first card))\n                                    rank (str (second card))]\n                                {:suit (get suits suit)\n                                 :rank (get ranks rank)}))", "user": "57f904c5e4b0d3187e900936"}, {"problem": 128, "code": "(fn [[suit rank]]\n  { :suit ({ \\H :heart\n            \\C :club\n            \\D :diamond\n            \\S :spade } suit)\n   :rank (condp = rank\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12\n           (- (int rank) 50)\n          )})", "user": "5ab5f60be4b073f177442643"}, {"problem": 128, "code": "#( let[ s (str (first %1) ) r (str (last %1) ) ] \n    {:suit ({\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} s)\n     :rank ( { \"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12 } r)\n     }\n   )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 128, "code": "(let [\n      suits {\\C :club \\D :diamond \\H :heart \\S :spade}\n      ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n  (fn [s] {:suit (suits (first s)) :rank (ranks (second s))}))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 128, "code": "(fn [s] {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} (first (seq s))) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second (seq s)))})", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 128, "code": "(let [suits {\"D\" :diamond\n             \"H\" :heart\n             \"S\" :spade\n             \"C\" :club}\n      ranks {\"2\" 0\n             \"3\" 1\n             \"4\" 2\n             \"5\" 3\n             \"6\" 4\n             \"7\" 5\n             \"8\" 6\n             \"9\" 7\n             \"T\" 8\n             \"J\" 9\n             \"Q\" 10\n             \"K\" 11\n             \"A\" 12}]\n  (fn [[suit-str rank-str]]\n    {:suit (get suits (str suit-str))\n     :rank (get ranks (str rank-str))}))", "user": "524740e7e4b05ef8e38e635d"}, {"problem": 128, "code": "(fn parse-card [[s r]]\n  (let [suit (get {\\S :spade \\H :heart \\D :diamond \\C :club} s)\n        rank (if (Character/isDigit r)\n               (- (int r) (int \\2))\n               (get {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r))]\n    {:suit suit :rank rank}))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 128, "code": "(fn [[s r]] (let [rank {\\2 0 \\3 1 \\4 2 \\5 3\n\t  \t\t\\6 4 \\7 5 \\8 6 \\9 7\n      \t\t\\T 8 \\J 9 \\Q 10 \\K 11 \n      \t\t\\A 12}\n\t  suit {\\D :diamond \\C :club \\H :heart \\S :spade}]\n  (assoc {} :suit (suit s) :rank (rank r))))", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n        suit-chr (first s)\n        rank-str (apply str (rest s))]\n    {:suit (suits suit-chr)\n     :rank (or (ranks rank-str) (- (read-string rank-str) 2))}))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 128, "code": "(fn [s]\n  (let [[suit rank] (seq s)\n        suits {\\H :heart \\D :diamond \\C :club \\S :spade}\n        ranks {\\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12}]\n    {:suit (get suits suit) :rank (get ranks rank)}))", "user": "590d3702e4b047aa04b199ff"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 128, "code": "(fn [x] {:suit (get {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} (.substring x 0 1))\n   :rank (get {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n              (.substring x 1 (.length x)))})", "user": "52c45ac8e4b0c2d177d620d9"}, {"problem": 128, "code": "(fn rpc [input] (let [[s r] input\n                        pc (fn [c] (case c\n                                \\S :spade\n                                \\D :diamond\n                                \\C :club\n                                \\H :heart\n                                \\T 8\n                                \\J 9    \n                                \\Q 10\n                                \\K 11\n                                \\A 12\n                                (- (Character/digit c 10) 2)))]\n                    (hash-map :suit (pc s) :rank (pc r))))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 128, "code": "(fn\n  [id]\n  (let [suits [\"spade\" \"heart\" \"diamond\" \"club\"]\n        cards [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n        find-suit (fn [l] (keyword (first (filter #(= (clojure.string/lower-case l) (subs % 0 1)) suits))))\n        find-rank (fn [i] (.indexOf cards i))]\n    {:suit (find-suit (subs id 0 1)) :rank (find-rank (subs id 1))}))", "user": "5b4fef74e4b02d533a91bcde"}, {"problem": 128, "code": "(fn [[S R]]\n  {:suit (case S\n           \\D :diamond\n           \\S :spade\n           \\H :heart\n           \\C :club)\n  \n   :rank (case R\n           \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n           \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)\n   })", "user": "5b500215e4b02d533a91bce2"}, {"problem": 128, "code": "(fn suits-stuff [n]\n  (let [n-seq (seq n)\n        suit (str (first n-seq))\n        rank (str (last n-seq))\n        ]\n    (conj\n     (case suit\n      \"S\" {:suit :spade}\n      \"D\" {:suit :diamond}\n      \"H\" {:suit :heart}\n      \"C\" {:suit :club})\n     (case rank\n      \"2\" {:rank 0}\n      \"3\" {:rank 1}\n      \"4\" {:rank 2}\n      \"5\" {:rank 3}\n      \"6\" {:rank 4}\n      \"7\" {:rank 5}\n      \"8\" {:rank 6}\n      \"9\" {:rank 7}\n      \"T\" {:rank 8}\n      \"J\" {:rank 9}\n      \"Q\" {:rank 10}\n      \"K\" {:rank 11}\n      \"A\" {:rank 12}\n      ))))", "user": "5b477969e4b02d533a91bc6f"}, {"problem": 128, "code": "(fn [card]\n  {:suit ({\\H :heart \\D :diamond \\S :spade \\C :club} (first card))\n   :rank ((zipmap (flatten [(map char (range 50 58)) \\T \\J \\Q \\K \\A]) (range 13)) (second card))})", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 128, "code": "(fn foo [[s r]] {:suit ({\\S :spade \\D :diamond \\C :club \\H :heart} s) \n                   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r) })", "user": "5839f079e4b089d5ab817d48"}, {"problem": 128, "code": "(fn [c]\n    (let [s (seq c)\n          m (apply hash-map (interleave [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A\n                                         \\C    \\D       \\H     \\S]\n                                        [0  1  2  3  4  5  6  7  8  9  10 11 12\n                                         :club :diamond :heart :spade]))]\n      {:suit (m (first s)) :rank (m (second s))}))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 128, "code": "(fn [str]\n  (let [suits {\\S :spade\n               \\H :heart\n               \\D :diamond\n               \\C :club}\n        ranks {\\2 0, \\3 1, \\4 2 \\5 3\n               \\6 4, \\7 5, \\8 6, \\9 7\n               \\T 8, \\J 9, \\Q 10, \\K 11\n               \\A 12}\n        [s r] str]\n    {:suit (suits s), :rank (ranks r)}))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 128, "code": "#(let [f (fn [c] (case c\n                   \\S :spade\n                   \\C :club\n                   \\D :diamond\n                   \\H :heart\n                   \\T 8\n                   \\J 9\n                   \\Q 10\n                   \\K 11\n                   \\A 12\n                   (- (Character/digit c 10) 2)))]\n   {:suit (f (first %)) :rank (f (last %))})", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 128, "code": "(fn foo[card]\n  (letfn [\n          (valueGet [value] \n                    (get \n                    (into {} \n                          (map \n                           #(vector (str %2) %1 ) \n                           (range 0 13) (into (apply vector (range 2 10)) (vector \"T\" \"J\" \"Q\" \"K\" \"A\")))) value))\n          (suitGet [suit]\n                   (get {\"D\" :diamond , \"H\" :heart , \"C\" :club , \"S\" :spade} suit))]\n    (let [suit (first card) value (second card)] \n               {:suit (suitGet (str suit))\n               :rank (valueGet (str value))})))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suites {\\D :diamond \\H :heart \\S :spades \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suites s)\n     :rank (ranks r)}))", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suites {\\D :diamond \\C :club \\H :heart \\S :spade}\n        ranks {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0}]\n    {:suit (suites s) :rank (ranks r)}))", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 128, "code": "(fn [c]\n  (let [suit {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank (cond (Character/isDigit (second c))\n               (-> c\n                    (second)\n                    (str)\n                    (Integer/parseInt)\n                    (- 2))\n               :else (get {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second c)))]\n    (hash-map :suit (get suit (first c)) :rank rank)))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 128, "code": "(fn [card]\n   (let [[suit rank] card\n         suits [:club :diamond :heart :spade]\n         suitkey #(-> % name first clojure.string/upper-case first)\n         suitmap (zipmap (map suitkey suits) suits)\n         rankmap (zipmap \"23456789TJQKA\" (range))\n         ]\n     {:suit (suitmap suit) :rank (rankmap rank) }))", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 128, "code": "(fn [[s r]]\n (assoc {} :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n  :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} r (- (int r) (int \\2)))))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 128, "code": "(fn[[s r]]\n    {:suit (case s\n             \\D :diamond\n             \\H :heart\n             \\C :club\n             \\S :spades)\n     :rank (case r\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12\n             (- (int r) 50))})", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 128, "code": "(fn cards [name]\n  {:suit (case (first name)\n              \\S :spade\n              \\H :heart\n              \\D :diamond\n              \\C :club)\n    :rank (case (second name)\n            \\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12\n            (do\n                (- (Integer/parseInt (str (second name))) 2)))})", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 128, "code": "(fn convert-card [s]\n  (let [suitmap {\\C :club \\D :diamond \\H :heart \\S :spade}\n        ranklist [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    {:suit (suitmap (first s)) :rank (.indexOf ranklist (second s))}))", "user": "5b840b68e4b047b03b2037bc"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\C :club, \\D :diamond, \\H :heart, \\S :spade} s)\n   :rank (.indexOf \"23456789TJQKA\" (str r))})", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 128, "code": "(fn card\n  [[suit' rank']]\n  (let [\n    suit\n      (case suit'\n        \\H :heart\n        \\D :diamond\n        \\C :club\n        \\S :spade)\n    rank\n      (case rank'\n        \\2 0\n        \\3 1\n        \\4 2\n        \\5 3\n        \\6 4\n        \\7 5\n        \\8 6\n        \\9 7\n        \\T 8\n        \\J 9\n        \\Q 10\n        \\K 11\n        \\A 12)]\n    {:suit suit :rank rank}))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 128, "code": "#(zipmap [:suit :rank] (map {\\D :diamond \\H :heart \\C :club \\S :spade \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} %))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 128, "code": "(fn [id]\n  (let [suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spades }\n        cards [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n        str_id (str id)\n        chars_id (map #(str %) str_id)]{:suit (get suits (first chars_id)) :rank (.indexOf cards (second chars_id))}))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 128, "code": "(fn play-cards\n  [string]\n  (let [suits {\\S [:suit :spade]\n               \\D [:suit :diamond]\n               \\C [:suit :club]\n               \\H [:suit :heart]}\n        \n        ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n\n        [suit rank] string]\n\n  (letfn [(get-rank [index]\n            (if (= rank (get ranks index))\n              index\n              (get-rank (inc index))))]\n      \n      (merge\n        (conj {} (suits (first string))) \n        {:rank (get-rank 0)}))))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 128, "code": "(fn [s]\n  (let [t {\\D :diamond, \\H :heart, \\S :spade, \\C :club}\n        r {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    (hash-map\n     :suit (t (first s)),\n     :rank (r (second s)))))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 128, "code": "(fn recognize [s]\n  (hash-map\n    :suit\n    (case (first s)\n      \\D :diamond\n      \\H :heart\n      \\C :club\n      \\S :spades)\n    :rank\n    (case (second s)\n      \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5\n      \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11\n      \\A 12)))", "user": "5b1e5bfde4b03cfeda66ed0e"}, {"problem": 128, "code": "(fn cards [[suit rank]]\n  (let [rank-map  {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n    {:suit (get {\"S\" :spade \"D\" :diamond \"H\" :heart \"C\" :club} (str suit))\n     :rank (get rank-map (str rank))}))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 128, "code": "(fn [[s r]] \n  (let [suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n        ranks [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n        suit (suits (str s))\n        rank (.indexOf ranks (str r))]\n        (hash-map :suit suit :rank rank)))", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 128, "code": "(fn card->map [card]\n  (let [suit-rank (seq card)\n        raw-suit (first suit-rank)\n        raw-rank (second suit-rank)\n        suit (get {\\H :heart \\D :diamond \\C :club \\S :spade} raw-suit)\n        raw-ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n        raw-ranks->rank-map (zipmap raw-ranks (range 13))\n        rank (get raw-ranks->rank-map raw-rank)]\n    {:suit suit :rank rank}))", "user": "5813e208e4b0f478707a061b"}, {"problem": 128, "code": "#(hash-map\n:suit (get {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club} (str (first %)))\n:rank (.indexOf [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] (str (last %)))\n)", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 128, "code": "(fn [s]\n  (let [suite {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spades}\n        rank {\"A\" 12, \"K\" 11, \"Q\" 10, \"J\" 9, \"T\" 8}]\n    {:suit (suite (str (first s))), :rank (if (nil? (rank (str (second s))))\n                                            (- (Integer/parseInt (str (second s))) 2)\n                                            (rank (str (second s))))}))", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 128, "code": "#(let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n\t  rank (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n\t{:suit (suits (first %)) :rank (rank (second %))})", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 128, "code": "(let [ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n      suits {\\C :club \\D :diamond \\H :heart \\S :spade}]\n  (fn [[s r]]\n    {:rank (get ranks r)\n     :suit (get suits s)}))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 128, "code": "(fn read-card [[s r]]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks (into {} (map vector \"23456789TJQKA\" (range)))]\n    {:suit (get suits s) :rank (get ranks r)}))", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 128, "code": "(fn [s]\n    (let [suitmap {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spades}\n          rankmap (zipmap (map str (range 2 13)) (range 13))\n          rankmap (conj rankmap  {\"T\" 8} {\"J\" 9} {\"Q\" 10} {\"K\" 11} {\"A\" 12})\n          suit (first (map str s))\n          rank (second (map str s))]\n      {:suit (get suitmap suit)\n       :rank (get rankmap rank)})\n    )", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 128, "code": "(fn [xs] (let [[s r] (seq xs)\n               rank (zipmap '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A) (range 13))\n               suit (zipmap '(\\D \\H \\C \\S) '(:diamond :heart :club :spade))]\n                            {:suit (get suit s) :rank (get rank r)}))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 128, "code": "(fn [string]\n    (let [m {\n            \\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :spades\n            \\2 0\n            \\3 1\n            \\4 2\n            \\5 3\n            \\6 4\n            \\7 5\n            \\8 6\n            \\9 7\n            \\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12\n          }]\n      {\n        :suit (get m (first string))\n        :rank (get m (second string))\n      }))", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 128, "code": "#(let [suits {\\S :spade \\H :heart \\D :diamond \\C :club} ranks \"23456789TJQKA\" [s r] %]\n   {:suit (suits s) :rank (.indexOf ranks (str r))})", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 128, "code": "(fn [[x1 x2]]\n  (let [a {\\S :spade \\D :diamond \\C :club \\H :heart} \n        b {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (assoc {} :suit (a x1) :rank (b x2))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 128, "code": "(fn __\n  [[suit rank]]\n  {:suit ({\\S :spade\n           \\C :club\n           \\D :diamond\n           \\H :heart} suit)\n   :rank (get {\\A 12\n               \\K 11\n               \\Q 10\n               \\J 9\n               \\T 8}\n              rank\n              (- (Character/getNumericValue rank) 2))})", "user": "55916764e4b0604b3f94d57b"}, {"problem": 128, "code": "(fn [card] \n  (let [[suit rank] (seq card)] \n    {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} suit) \n    :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank (- (int rank) (int \\2)))}))", "user": "4db3a0e5535df7e46ed9b6d0"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [rank-map {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n        suit-map {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spade}\n        ]\n    {:suit (suit-map (str s))\n     :rank (rank-map (str r))}))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 128, "code": "(fn par [s]\n  (let [ match-suite #(condp = (str %)\n                        \"H\" :heart\n                        \"D\" :diamond\n                        \"C\" :club\n                        \"S\" :spade)\n        match-rank  #(condp = (str %)\n                       \"A\" 12\n                       \"K\" 11\n                       \"Q\" 10\n                       \"J\" 9\n                       \"T\" 8\n                       (- (- (int %) 48) 2)\n                       )]\n    {:suit (match-suite (first s)) :rank (match-rank (second s))}\n                         ))", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 128, "code": "(fn cards\n ;; \"two digit string returns a map of :suit and :rank\"\n  [inp]\n  (let [[ss rr] (map str inp)\n        suit {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n        rank [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]]\n    {:suit (get suit ss) :rank (.indexOf rank rr)}))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 128, "code": "(fn [[suit rank]]\n     {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} suit)\n      :rank (let [ascii (int rank)]\n              (if (<= ascii (int \\9))\n                (- ascii (int \\2))\n                ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)))})", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 128, "code": "(fn cardString->cardMap\n  [s]\n  (let [suit-str\n        (subs s 0 1)\n\n        rank-str\n        (subs s 1 2)\n\n        suit-map\n        {:S :spade\n         :H :heart\n         :D :diamond\n         :C :club}\n\n        rank-map\n        {:T 8\n         :J 9\n         :Q 10\n         :K 11\n         :A 12}]\n\n    {:suit\n     ((keyword suit-str) suit-map)\n     :rank\n     (if (Character/isDigit (first (char-array rank-str)))\n       (- (Integer/parseInt rank-str) 2)\n       ((keyword rank-str) rank-map))}))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (condp = s\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (condp = r\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           (- (int r) 50))})", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 128, "code": "(fn cardrec [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 128, "code": "(fn recognize\n  [card]\n  (let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    (zipmap [:suit :rank] (vector (suits (first card)) (ranks (second card))))\n  ))", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 128, "code": "(fn\n  [card]\n  {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club} (first card))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second card))})", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 128, "code": "(fn recognize-card\n  [string]\n  (let [suits {\\H :heart \\C :club \\D :diamond \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (zipmap [:suit :rank]\n         [(get suits (first string))\n         (get ranks (second string))]\n     )\n    )\n  )", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 128, "code": "(fn [card] (let [ranks (zipmap \"23456789TJQKA\" (range 13))\n                 suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n                 [s r] (seq card)]\n{:suit (suits s), :rank (ranks r)}))", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 128, "code": "(fn \n  [[suit rank]]\n  (let [ranks [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n          suits {\\D :diamond\n                 \\H :heart\n                 \\C :club\n                 \\S :spade}]\n      {:suit (suits suit) :rank (.indexOf ranks rank)}\n    )\n  )", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 128, "code": "(fn re [s](let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 128, "code": "(fn card [[suit rank]] \n\t(let [\n\t\trmap {\"T\" 8, \"9\" 7, \"K\" 11, \"3\" 1, \"4\" 2, \"8\" 6, \"Q\" 10, \"J\" 9, \"7\" 5, \"5\" 3, \"6\" 4, \"A\" 12, \"2\" 0}\n\t\tsmap {\"S\" :spade, \"H\" :heart, \"C\" :club, \"D\" :diamond}\n        ]\n    {:suit (smap (str suit)) :rank (rmap (str rank))})\n )", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 128, "code": "(fn [[suit rank]]\n                (let [suits {\n                        \\D :diamond\n                        \\H :heart\n                        \\C :club\n                        \\S :spade\n                }\n                ranks {\n                        \\2 0\n                        \\3 1\n                        \\4 2\n                        \\5 3\n                        \\6 4\n                        \\7 5\n                        \\8 6\n                        \\9 7\n                        \\T 8\n                        \\J 9\n                        \\Q 10\n                        \\K 11\n                        \\A 12\n                }\n        ]\n                {\n                        :suit (get suits suit)\n                        :rank (get ranks rank)\n                }\n        ))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit\n   ({\\S :spade\n     \\H :heart\n     \\D :diamond\n     \\C :club}\n     suit)\n   :rank\n   ((zipmap \"23456789TJQKA\" (range))\n     rank)\n   })", "user": "543a8256e4b032a45b869327"}, {"problem": 128, "code": "(fn [s] \n  (let [mp1 {\\S :spade \\H :heart \\D :diamond \\C :club}\n        mp2 {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        a (first (vec s)) b (second (vec s))]\n    (hash-map :suit (mp1 a) :rank (mp2 b))))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 128, "code": "(fn [x]\n  (let [[a b] x]\n    {:suit (case a \n             \\D :diamond\n             \\S :spade\n             \\C :club\n             \\H :heart)\n     :rank (first \n             (keep-indexed\n                #(when (= %2 b) %1)\n               \"23456789TJQKA\"))}))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 128, "code": "(fn [x]\n  (let [suit (first x) suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank (second x) rank-map {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit-map suit)\n     :rank (if (contains? rank-map rank) (rank-map rank) (- (Character/getNumericValue rank) 2))}))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 128, "code": "(fn card [[s r]]\n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5bc611e3e4b07a9b28b10083"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club} s)\n   :rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r) (- (int r) 50))})", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 128, "code": "(fn [[s r]] (let [suit (zipmap \"DHCS\" [:diamond :heart :club :spade]) rank (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))] {:suit (suit s) :rank (rank (str r))}))", "user": "5addadfce4b0837691e92c13"}, {"problem": 128, "code": "(fn card [[s r]]\n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 128, "code": "(let [suit-lookup {\\D :diamond\n                     \\S :spade\n                     \\C :club\n                     \\H :heart}\n        rank-lookup {\\A 12\n                     \\K 11\n                     \\Q 10\n                     \\J 9\n                     \\T 8\n                     \\9 7\n                     \\8 6\n                     \\7 5\n                     \\6 4\n                     \\5 3\n                     \\4 2\n                     \\3 1\n                     \\2 0}]\n    (fn [[suit rank]]\n     {:suit (suit-lookup suit)\n      :rank (rank-lookup rank)}))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 128, "code": "(fn [x]\n   (let [rank (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))\n         suit {\\S :spade \\H :heart \\D :diamond \\C :club}]\n     {:suit (get suit (first x)) :rank (get rank (last x))}\n     )\n   )", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 128, "code": "(fn [s]\n  {:suit ({\\H :heart \\C :club \\D :diamond \\S :spade} (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))})", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 128, "code": "(fn [s]\n    (let [v         (vec    s)\n          char_suit (first  v)\n          char_rank (second v)\n          map_suit  {\\S :spade \\H :heart \\D :diamond \\C :club}\n          map_rank  {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n                     \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n      {:suit (map_suit char_suit)\n       :rank (map_rank char_rank)}))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 128, "code": "(fn [c] (let [\n  suit (str (first (seq c)))\n  rank (str (first (rest (seq c))))\n  suits {\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club}\n  ranks  {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n]\n{ :suit (get suits suit) :rank (get ranks rank)}))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 128, "code": "(fn [x]\n  (letfn [(suit [s]\n            (cond\n              (= s \\D) :diamond\n              (= s \\H) :heart\n              (= s \\S) :spade\n              (= s \\C) :club))\n          (rank [r]\n            (cond\n              (= r \\2) 0\n              (= r \\3) 1\n              (= r \\4) 2\n              (= r \\5) 3\n              (= r \\6) 4\n              (= r \\7) 5\n              (= r \\8) 6\n              (= r \\9) 7\n              (= r \\T) 8\n              (= r \\J) 9\n              (= r \\Q) 10\n              (= r \\K) 11\n              (= r \\A) 12))]\n          {:suit (suit (first x)) :rank (rank (second x))}))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 128, "code": "(fn \n  [value]   \n  {\n  \t:suit (get {\\S :spade \\H :heart \\D :diamond \\C :club} (first value)) \n    :rank (get {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (apply str (rest value)))\n  })", "user": "591f9a1fe4b09b4ee5954c4f"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [sm {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        rv [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    {:suit (sm s)\n     :rank (.indexOf rv r)}))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 128, "code": "(fn [s]\n  (let [suit (first (seq s))\n        rank (second (seq s))]\n    {:suit (cond\n            (= \\D suit) :diamond\n            (= \\H suit) :heart\n            (= \\C suit) :club\n            (= \\S suit) :spade)\n    :rank\n    (cond \n     (= \\A rank) 12\n     (= \\K rank) 11\n     (= \\Q rank) 10\n     (= \\J rank) 9\n     (= \\T rank) 8\n     :else (- (int rank) 50))}))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 128, "code": "(fn [[s r]] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n  \t\t\t :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r (- (int r) 50))})", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 128, "code": "(fn card [[suit rank]]\n  {:suit ((zipmap \"SHDC\" [:spade :heart :diamond :club]) suit)\n   :rank ((zipmap \"23456789TJQKA\" (range)) rank)})", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 128, "code": "#(array-map :suit \n           (get {\\D, :diamond\n                 \\H, :heart \n                 \\C, :club\n                 \\S, :spade  }(first %))\n           :rank \n           (count (first (clojure.string/split \"23456789TJQKA\" (re-pattern (str (last %)))))))\n\n;i like (clojure.string/index-of \"23456789TJQKA\" (last s)) more apparently the 4clojure version is a little bit to old for index-of", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (get {\\H :heart \\D :diamond \\C :club \\S :spade} s)\n  :rank (.indexOf (vec \"23456789TJQKA\") r)})", "user": "5c0e58bfe4b01240ff567140"}, {"problem": 128, "code": "(fn [st] (let [\n              suits {\\S :spade \\D :diamond \\C :club \\H :heart}\n              ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n              getSuit (fn [c] (suits c))\n              getRank (fn [r] (if(contains? ranks r) (ranks r) (- (Character/digit r 10) 2)))\n             ]\n          {:suit (getSuit (first st)) :rank (getRank (second st))}))", "user": "4eadc217535d7eef30807321"}, {"problem": 128, "code": "(fn card [input] (let [suits {\"H\" :heart \"D\" :diamond \"S\" :spade \"C\" :club} suit (subs input 0 1) ranks {\"2\" 0   \"3\" 1   \"4\" 2  \"5\" 3  \"6\"  4  \"7\" 5  \"8\" 6  \"9\" 7  \"T\" 8   \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} rank (subs input 1)] {:suit (get suits suit) :rank (get ranks rank)}))", "user": "52c03baee4b07a9af5792347"}, {"problem": 128, "code": "(fn [[s r]]\n    {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n     :rank ((zipmap  \"23456789TJQKA\" (range)) r)})", "user": "5b81139fe4b047b03b203782"}, {"problem": 128, "code": "#(let [s (first %) r (last %)] {:suit (get {\\D :diamond \\S :spade \\H :heart \\C :club} s) :rank (- (Integer/parseInt (str (get {\\T 10 \\J 11 \\Q 12 \\K 13 \\A 14} r r))) 2)})", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 128, "code": "(fn [y] (let [a (map (fn [x] ({\\D :diamond \\H :heart \\C :club \\S :spade \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} x (- (int x) 50)))\n(seq y))] {:suit (first a) :rank (second a)}))", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 128, "code": "(fn [string]\n  (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11 \\A 12}\n        [s r] string]\n    {:suit (get suits s) :rank (get ranks r)}))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (condp = s\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (condp = r\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           (- (int r) 50))\n        })", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 128, "code": "(fn [card]\n  (let [rank {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6\n             \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n       suit {\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade}\n       [none card-suit card-rank] (clojure.string/split card #\"\")]\n       (assoc {} :suit (suit card-suit) :rank (rank card-rank))))", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 128, "code": "(fn [x]\n\t(let [cards (zipmap \"23456789TJQKA\" (range))\n\t\t suits {\\S :spade \\H :heart \\D :diamond \\C :club}]\n    {:suit (suits (nth x 0)) :rank (cards (nth x 1))}))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 128, "code": "(fn heart-of-the-cards\n  [[suit rank]]\n  (let [suits {\\H :heart\n               \\C :club\n               \\D :diamond\n               \\S :spade}\n        z (int \\0)\n        royalty {\\T 10\n                 \\J 11\n                 \\Q 12\n                 \\K 13\n                 \\A 14}]\n    {:suit (suits suit)\n     :rank (- (or (royalty rank) (- (int rank) z)) 2)}))", "user": "5c222b7de4b07e362c230588"}, {"problem": 128, "code": "#(letfn [(s [c] (assoc {} :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} c)))\n         (r [c] (assoc (s (first c)) :rank ((zipmap \"23456789TJQKA\" (range 13)) (second c))))]\n            (r %))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 128, "code": "(fn playing-cards\n  [s]\n  (let [\n        suits {\\D :diamond, \\C :club, \\H :heart \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        ]\n    {:suit (get suits (first s)) :rank (get ranks (second s))}\n    ))", "user": "5c20b6abe4b07e362c230576"}, {"problem": 128, "code": "(let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n      ranks (zipmap \"23456789TJQKA\" (range))]\n  (fn [[s r]] {:suit (suits s) :rank (ranks r)}))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 128, "code": "#(let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club},\n          ranks (zipmap \"23456789TJQKA\" (range)),\n          parse-card (fn [[c1 c2]]\n                       {:suit (suits c1), :rank (ranks c2)}),]\n      (parse-card %1)\n      )", "user": "5c17467fe4b01240ff5671df"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits {\\S :spade\n               \\H :heart\n               \\D :diamond\n               \\C :club}\n        ranks (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (suits suit) \n     :rank (ranks rank)}))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 128, "code": "(fn [[s v]] (into {} [[:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)] [:rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} v (- (int v) 50))]]))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 128, "code": "(fn [card-string]\n    (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n          cards {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n      {:suit (suits (first card-string)) :rank (cards (second card-string))}))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 128, "code": "(fn resolve-card-string [x]\n  (let [ suits-map { \\S :spade, \\H :heart, \\C :club, \\D :diamond }\n         rank-map  { \\A 12, \\K 11, \\Q 10, \\J 9, \\T 8, \\9 7, \\8 6, \\7 5, \\6 4, \\5 3, \\4 2, \\3 1, \\2 0 }\n         x-seq (seq x)\n         suit-key  (first x-seq)\n         rank-key  (second x-seq)\n         suit  (get suits-map suit-key)\n         rank  (get rank-map rank-key) ]\n      {:suit suit, :rank rank }\n    ))", "user": "5c24c654e4b07e362c2305a7"}, {"problem": 128, "code": "(fn card [s]\n  (let [card-map {\\S :spade \\H :heart \\D :diamond \\C :club\n                  \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (card-map (get s 0)) :rank (card-map(get s 1))}))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 128, "code": "(fn readable-card-name [card-code]\n  (let [suits {\"S\" :spade \"H\" :heart \"C\" :club \"D\" :diamond}\n        cards [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n        card (fn [c] (.indexOf cards c))\n        suit (fn [suit] (get suits suit))\n        parse-input (fn [args]\n                      (let [l-char ((comp str last) args)\n                            f-char((comp str first) args)]\n                           {:first f-char :last l-char}))\n        develop-hash {:suit (suit (get (parse-input card-code) :first)) :rank (card (get (parse-input card-code) :last))}]\n       develop-hash))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 128, "code": "(fn playing-cards [[suite rank]]\n  {:suit ({\\C :club \\D :diamond \\S :spade \\H :heart} suite)\n   :rank (if (Character/isDigit rank) (- (Character/digit rank 10) 2)\n                                      ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank))\n   })", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 128, "code": "(fn [[s r]]\n    (let [suite {\\D :diamond \\H :heart \\S :spade \\C :club}\n          rank  {\\2 0 \\3 1 \\4 2  \\5 3  \\6 4 \\7 5 \\8 6 \\9 7\n                 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n      {:suit (get suite s)\n       :rank (get rank r)}))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 128, "code": "(fn [sr]\n  {:suit ({\\C :club \\D :diamond \\H :heart \\S :spade} (first sr))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second sr))})", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 128, "code": "(fn pcard [card]\n  (let [suit (first card) rank (last card)]\n    {:suit (cond \n      (= \\S suit) :spade\n      (= \\H suit) :heart\n      (= \\D suit) :diamond\n      (= \\C suit) :club\n    ), :rank \n    (cond \n      (= \\T rank) 8\n      (= \\J rank) 9\n      (= \\Q rank) 10\n      (= \\K rank) 11\n      (= \\A rank) 12\n      :else (- (int rank) 48 2)\n      )}\n    )\n)", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-map {\\D :diamond\n                  \\H :heart\n                  \\S :spade\n                  \\C :club}\n        rank-map (merge  \n                  (zipmap (map #(char (+ 48 %)) (range 2 10)) \n                           (range 0 8)) \n                  {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12})\n        s-suit (first (seq s))\n        s-rank (second (seq s))]\n    {:suit (suit-map s-suit) :rank (rank-map s-rank)}))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 128, "code": "(fn [string]\n  {:suit (get {\\C :club \\D :diamond \\H :heart \\S :spade} (first string))\n   :rank (get (zipmap [\\A \\K \\Q \\J \\T \\9 \\8 \\7 \\6 \\5 \\4 \\3 \\2]\n                      (range 12 -1 -1)) (second string))})", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 128, "code": "(fn\n  [[suit rank]]\n  {\n    :suit\n    (case suit\n      \\S :spade\n      \\H :heart\n      \\D :diamond\n      \\C :club)\n\n    :rank\n    (->\n      rank\n      (case ,,,\n        \\A 14\n        \\K 13\n        \\Q 12\n        \\J 11\n        \\T 10\n        (compare rank \\0))\n      dec\n      dec)})", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 128, "code": "(fn [s]\n  (let [suit (case (first s)\n               \\S :spade\n               \\H :heart\n               \\D :diamond\n               \\C :club)\n        rank (case (second s)\n               \\A 12\n               \\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11)]\n    {:suit suit :rank rank}))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 128, "code": "(fn suit-rank [[suit-string rank-string]]\n  (let [suit {\\S :space \\H :heart \\C :club \\D :diamond}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit suit-string) :rank (rank rank-string)}))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 128, "code": "(fn [card]\n  (let [[s r] (str card)\n        deck {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n        \t\t\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit {\\D :diamond \\H :heart \\C :club \\S :spade}]\n    \n    {:suit (suit s) :rank (deck r)}))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 128, "code": "#(assoc {} :suit ({\\D :diamond \\S :spade \\C :club \\H :heart} (first %)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second %)))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 128, "code": "(fn solve [[card0 card1]]\n    (let [suit {\"D\" :diamond \"S\" :spade \"H\" :heart \"C\" :club}\n          rank {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n         ]\n        {:suit (get suit (str card0))\n         :rank (get rank (str card1))}\n    )\n\n)", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 128, "code": "(fn\n  [card]\n  (let [suit (first card)\n        rank (last card)\n        res (cond (= suit \\S) (assoc {} :suit :spade)\n                  (= suit \\H) (assoc {} :suit :heart)\n                  (= suit \\D) (assoc {} :suit :diamond)\n                  (= suit \\C) (assoc {} :suit :club))]\n    (cond (= rank \\2) (assoc res :rank 0)\n          (= rank \\3) (assoc res :rank 1)\n          (= rank \\4) (assoc res :rank 2)\n          (= rank \\5) (assoc res :rank 3)\n          (= rank \\6) (assoc res :rank 4)\n          (= rank \\7) (assoc res :rank 5)\n          (= rank \\8) (assoc res :rank 6)\n          (= rank \\9) (assoc res :rank 7)\n          (= rank \\T) (assoc res :rank 8)\n          (= rank \\J) (assoc res :rank 9)\n          (= rank \\Q) (assoc res :rank 10)\n          (= rank \\K) (assoc res :rank 11)\n          (= rank \\A) (assoc res :rank 12))))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 128, "code": "(fn [s]\n  (let [suits {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}\n        ranks [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n        [suit rank] (re-seq #\".\" s)]\n    {:suit (get suits suit) :rank (.indexOf ranks rank)}))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 128, "code": "(fn [card]\n  (let [suit (#(case %\n                  (\\D) :diamond\n                  (\\H) :heart\n                  (\\C) :club\n                  (\\S) :spade) (first (seq card)))\n        rank (#(case %\n                 (\\A) 12\n                 (\\K) 11\n                 (\\Q) 10\n                 (\\J) 9\n                 (\\T) 8\n                 (- (Character/digit % 10) 2)) (second (seq card)))\n        c-map {:suit suit :rank rank}]\n    c-map))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 128, "code": "(fn [card]\n  (let [suit (fn [s] (cond\n                       (= s \\S) :spade\n                       (= s \\H) :heart\n                       (= s \\D) :diamond\n                       (= s \\C) :club))\n        rank (fn [r] (cond\n                       (= r \\2) 0\n                       (= r \\3) 1\n                       (= r \\4) 2\n                       (= r \\5) 3\n                       (= r \\6) 4\n                       (= r \\7) 5\n                       (= r \\8) 6\n                       (= r \\9) 7\n                       (= r \\T) 8\n                       (= r \\J) 9\n                       (= r \\Q) 10\n                       (= r \\K) 11\n                       (= r \\A) 12))]\n    {:suit (suit (first card))\n     :rank (rank (last card))}))", "user": "56483f45e4b0284900eef62b"}, {"problem": 128, "code": ";#(let\n;    [\n;    suits { \"D\" :diamond \"S\" :spade \"H\" :heart \"C\" :club }\n;    ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n;    ]\n;\n;    {\n;    :suit (suits (first(re-seq #\"\\w\" %)))\n;    :rank (ranks (last(re-seq #\"\\w\" %)))\n;    }\n;    )\n\n;#(let\n;    [\n;    suits { \"D\" :diamond \"S\" :spade \"H\" :heart \"C\" :club }\n;    ranks (zipmap [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] (range 13))\n;    ]\n;\n;    {\n;    :suit (suits (first(re-seq #\"\\w\" %)))\n;    :rank (ranks (last(re-seq #\"\\w\" %)))\n;    }\n;    )\n\n(fn[[x y]](let\n    [\n    suits { \\D :diamond \\S :spade \\H :heart \\C :club }\n    ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))\n    ]\n\n    {\n    :suit (suits x)\n    :rank (ranks y)\n    }\n    ))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 128, "code": "(fn [[suit rank]] (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club} ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n                     {:suit (suits suit)\n                      :rank (if (get ranks rank) (get ranks rank) (- (Integer. (str rank)) 2))}))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5c70641de4b0fca0c162277f"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5c874389e4b048ec896c590e"}, {"problem": 128, "code": "(fn [[s r]]\n  (let\n    [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n     ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n    (hash-map :suit (get suits s) :rank (get ranks r))\n    )\n  )", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 128, "code": "(fn find-card\n  [st]\n  (let [suits '(:spade :heart :diamond :club)\n        rank  '(0 1 2 3 4 5 6 7 8 9 10 11 12)\n        s     (str (first st))\n        r     (str (last st))\n        suitr (case s\n                \"S\" (list (nth suits 0))\n                \"H\" (list (nth suits 1))\n                \"D\" (list (nth suits 2))\n                \"C\" (list (nth suits 3)))]\n    (case r\n      \"2\"\n      {:suit (first suitr) :rank (nth rank 0)}\n\n      \"3\"\n      {:suit (first suitr) :rank (nth rank 1)}\n\n      \"4\"\n      {:suit (first suitr) :rank (nth rank 2)}\n\n      \"5\"\n      {:suit (first suitr) :rank (nth rank 3)}\n\n      \"6\"\n      {:suit (first suitr) :rank (nth rank 4)}\n\n      \"7\"\n      {:suit (first suitr) :rank (nth rank 5)}\n\n      \"8\"\n      {:suit (first suitr) :rank (nth rank 6)}\n\n      \"9\"\n      {:suit (first suitr) :rank (nth rank 7)}\n\n      \"T\"\n      {:suit (first suitr) :rank (nth rank 8)}\n\n      \"J\"\n      {:suit (first suitr) :rank (nth rank 9)}\n\n      \"Q\"\n      {:suit (first suitr) :rank (nth rank 10)}\n\n      \"K\"\n      {:suit (first suitr) :rank (nth rank 11)}\n\n      \"A\"\n      {:suit (first suitr) :rank (nth rank 12)})))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 128, "code": "(fn [n]\n  (let [suits (zipmap (map str \"DHCS\") '(:diamond :heart :club :spade))\n        rank (zipmap '(\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\") (range 13))\n        card (seq n)]\n    (assoc (assoc {} :suit (get suits (str (first card)))) :rank (get rank (str (last card))))))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 128, "code": "(fn card [[s r]]\n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 128, "code": "(fn [card-str] \n  (let [suits {\n               \"D\" :diamond,\n               \"S\" :spade\n               \"H\" :heart\n               \"C\" :club\n               },\n        ranks [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"],\n        suit (str (first card-str)),\n        rank (clojure.string/join (rest card-str))\n        ]\n    {\n     :suit (get suits suit),\n     :rank (.indexOf ranks rank)\n     }))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 128, "code": "(fn myCard [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 128, "code": "#(let[ suite (fn [c]\n              (cond\n               (= c \\D) :diamond\n               (= c \\H) :heart\n               (= c \\C) :club\n               :else :spade))\n        rank (fn [c]\n              (cond\n               (= c \\T) 8\n               (= c \\J) 9\n               (= c \\Q) 10\n               (= c \\K) 11\n               (= c \\A) 12\n               :else (- (int c) (int \\2))))\n       s (first %)\n       r (second %)]\n   (hash-map :suit (suite s), :rank (rank r)))", "user": "5c787131e4b0fca0c1622825"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "5c8860bce4b048ec896c5928"}, {"problem": 128, "code": "#(let[ suite (fn [c]\n              (cond\n               (= c \\D) :diamond\n               (= c \\H) :heart\n               (= c \\C) :club\n               :else :spade))\n        rank (fn [c]\n              (cond\n               (= c \\T) 8\n               (= c \\J) 9\n               (= c \\Q) 10\n               (= c \\K) 11\n               (= c \\A) 12\n               :else (- (int c) (int \\2))))\n       s (first %)\n       r (second %)]\n   (hash-map :suit (suite s), :rank (rank r)))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 128, "code": "(fn rec_play_cards [card]\n  (let [suits {:diamond \\D :heart \\H :club \\C :spade \\S}\n        ranks {0 \\2 1 \\3 2 \\4 3 \\5 4 \\6 5 \\7 6 \\8 7 \\9 8 \\T 9 \\J 10 \\Q 11 \\K 12 \\A}]\n    {:suit (first (first (filter #(= (second %) (first card)) suits)))\n     :rank (first (first (filter #(= (second %) (last card)) ranks)))}\n    )\n  )", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 128, "code": ";; http://www.4clojure.com/problem/128\n(fn parse-cards\n  [s]\n  (let [suit-map {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rank-list [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n        {:suit (suit-map (first s)) :rank (.indexOf rank-list (second s))}))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 128, "code": "(fn [[suit rank]]\n    (let [suits {\\D :diamond\n                 \\H :heart\n                 \\C :club\n                 \\S :spade}\n          ranks {\\2 0\n                 \\3 1\n                 \\4 2\n                 \\5 3\n                 \\6 4\n                 \\7 5\n                 \\8 6\n                 \\9 7\n                 \\T 8\n                 \\J 9\n                 \\Q 10\n                 \\K 11\n                 \\A 12}]\n      {:suit (suits suit)\n       :rank (ranks rank)}))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get suits (first card)) :rank (get ranks (last card))}))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 128, "code": "(fn my-fn [[suit rank]]\n  {:suit (case suit\n           \\C :club\n           \\D :diamond\n           \\H :heart\n           \\S :spade)\n   :rank (cond\n           (pos? (Character/digit rank 10)) (- (Character/digit rank 10) 2)\n           :else ({\\T 8, \\J 9, \\Q 10, \\K 11,\\A 12} rank))})", "user": "5c896f46e4b048ec896c5940"}, {"problem": 128, "code": "(fn [s]\n    (let [[suite rank] s]\n      {:suit (case suite\n               \\D :diamond\n               \\H :heart\n               \\S :superd\n               \\C :club)\n       :rank (case rank\n               \\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12)}))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))\n        suits (zipmap (map str \"SDHC\") [:spade :diamond :heart :club])]\n  \t\t(hash-map :suit (suits (str suit)) :rank (ranks (str rank)))\n  )\n)", "user": "5ca1f8a1e4b048ec896c5b8c"}, {"problem": 128, "code": "(fn get-card [card]\n  {:suit\n   (let [shape (first card)]\n     (case shape\n       \\D :diamond\n       \\H :heart\n       \\C :club\n       \\S :spades))\n   :rank\n   (let [rank (first (rest card))\n         rank-int (int rank)]\n     (if (and (< 49 rank-int) (> 58 rank-int))\n       (- rank-int 50)\n       (case rank\n         \\T 8\n         \\J 9\n         \\Q 10\n         \\K 11\n         \\A 12)))})", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 128, "code": "(fn [card]\n  (let\n    [suits {\n     \t\\D :diamond\n     \t\\H :heart\n     \t\\C :club\n     \t\\S :spade\n     }\n     ranks \n     {\n     \t\\2 0 \\3 1 \\4 2 \\5 3 \\6 4\n        \\7 5 \\8 6 \\9 7 \\T 8\n        \\J 9 \\Q 10 \\K 11 \\A 12 \n     }]\n    {\n     :suit (get suits (first card))\n     :rank (get ranks (second card))\n    }\n  )\n)", "user": "543bb568e4b032a45b869334"}, {"problem": 128, "code": "(fn [[sc rc]]\n  {:suit ({\\S :space \\H :heart \\D :diamond \\C :club} sc)\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n               \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rc)})", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 128, "code": "(fn [x]\n  (zipmap [:suit :rank]\n          [(#(cond (= \\C %) :club\n                   (= \\D %) :diamond\n                   (= \\H %) :heart\n                   (= \\S %) :spade) (first x))\n           (#(cond (<= 50 (int %) 57) (- (int %) 50)\n                   (= \\T %)           8\n                   (= \\J %)           9\n                   (= \\Q %)           10\n                   (= \\K %)           11\n                   (= \\A %)           12) (last x))]))", "user": "5c538cb5e4b0fb8c5ffd99fb"}, {"problem": 128, "code": "(fn read-card [[suit rank]]\n  (let [suit (get {\\D :diamond\n                   \\H :heart\n                   \\S :spade\n                   \\C :club}\n                  suit)\n        rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] rank)]\n    {:suit suit :rank rank}))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 128, "code": "(fn [s] (let [suit {\\D :diamond \\S :spade \\H :heart \\C :club}\n              rank {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n              sec (second s)]\n          {:suit (-> s first suit) :rank (-> sec (rank (- (Character/digit sec 10) 2)))}))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 128, "code": "(fn [s]\n  (let [res '()\n        [suit rank] (re-seq #\".\" s)\n        suits {\"D\" :diamond \"S\" :spade \"C\" :club \"H\" :heart}\n        r (flatten (cons (map str (range 2 10)) '(\"T\" \"J\" \"Q\" \"K\" \"A\")))\n        vals (zipmap r (range 0 13))\n        lookup (merge vals suits)]\n    {:suit (get lookup suit) :rank (get lookup rank)}))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 128, "code": "(fn parse-card [s]\n  (let [v (vec s)\n        suit (case (v 0)\n              \\C :club\n              \\D :diamond\n              \\H :heart\n              \\S :spade)\n       rank (case (v 1)\n              \\T 8\n              \\J 9\n              \\Q 10\n              \\K 11\n              \\A 12\n              (- (Character/digit (v 1) 10) 2))]\n    {:suit suit :rank rank}))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 128, "code": "(fn parse-card [card]\n  (let [ss #(first %)\n        get-suit (fn [card] (cond\n                              (= (ss card) \\H) :heart\n                              (= (ss card) \\C) :club\n                              (= (ss card) \\S) :spade\n                              (= (ss card) \\D) :diamond))\n        rank-map (into {} (map-indexed (fn [idx e] [e idx]) (seq \"23456789TJQKA\")))]\n    {:suit (get-suit card), :rank (rank-map (second card))}))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-map          {\"H\" :heart \"D\" :diamond \"C\" :club \"S\" :spade}\n        rank-map          {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n\t\t[_ suit-s rank-s] (first (re-seq #\"([A-Z])([0-9TJQKA])\" s))\n        result\t\t\t  {:suit (suit-map suit-s) :rank (rank-map rank-s)}]\n    result\n    ))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 128, "code": "; ranks (zipmap (seq \"23456789TJQKA\") (range))]\n; {:suit (suits s) :rank (ranks r)}))\n(fn [[s r]]\n  {:suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} s) :rank (.indexOf (seq \"23456789TJQKA\") r)})", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 128, "code": "(fn [card]\n  (let [[s r] card\n        suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        suit (suits s)\n        rank (or ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r) (- (int r) (int \\2)))]\n    {:suit suit :rank rank}))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 128, "code": "(fn [n]\n  (let [[suit rank] (seq n)]\n    { :suit ({ \\S :spade \\H :heart \\D :diamond \\C :club } suit)\n      :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A ] (range)) rank) }))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 128, "code": "#(let [lookup {\n                \\S :spade\n                \\H :heart\n                \\D :diamond\n                \\C :club\n                \\2 0\n                \\3 1\n                \\4 2\n                \\5 3\n                \\6 4 \n                \\7 5\n                \\8 6\n                \\9 7\n                \\T 8\n                \\J 9\n                \\Q 10\n                \\K 11\n                \\A 12\n                }\n        c-array (char-array %)\n        suit-char (first c-array)\n        rank-char (last c-array)]\n    {:suit (get lookup suit-char) :rank (get lookup rank-char)})", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 128, "code": "(fn [card-string]\n  (let [suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spades}\n        ranks (merge {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} (zipmap (map char (range (int \\2) (inc (int \\9)))) (range 8)))]\n    {:suit (suits (first card-string))\n     :rank (ranks (second card-string))}))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 128, "code": "(fn [card]\n \t(let [scard (str card)\n          suitmap {\\C :club \\D :diamond \\H :heart \\S :spade}\n          rankmap {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n          suit #(get suitmap %)\n          rank #(or (get rankmap %) (- (int %) 50))]\n    {:suit (suit (first scard)) :rank (rank (second scard))})\n)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 128, "code": "(fn [[suit rank]]\n   (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n         high-ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n     {:suit (suits suit) :rank (if\n                                 (Character/isDigit rank) (- (int rank) 50)\n                                 (high-ranks rank))\n     }))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 128, "code": "#(let [f (first (seq %)) s (second (seq %))]\n   (assoc (cond (= f \\H) {:suit :heart}\n         (= f \\D) {:suit :diamond}\n         (= f \\C) {:suit :club}\n         (= f \\S) {:suit :spade}) :rank (cond (and (> (int \\9) (int s)) (< (int \\1) (int s))) (- (Character/digit s 10) 2)\n                                               (= \\A s) 12\n                                               (= \\Q s) 10\n                                               (= \\T s) 8\n                                               (= \\J s) 9\n                                              (= \\9 s) 7\n                                               (= \\K s) 11\n     )\n   ))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 128, "code": "(fn\n   [s]\n   (let\n     [[suit rank] (seq s)]\n     {:suit (case suit\n              \\D :diamond\n              \\H :heart\n              \\C :club\n              \\S :spade),\n      :rank ((merge (zipmap (map (comp first str) (range 2 10)) (range 8)) {\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}) rank)}\n     ))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 128, "code": "(fn [st]\n  (letfn\n    [(suit [ch] ({\\H :heart, \\D :diamond, \\C :club, \\S :spades} ch))\n     (rank [ch] (.indexOf \"23456789TJQKA\" (str ch)))]\n    {:suit (suit (first st)) :rank (rank (second st))}\n  )\n)", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 128, "code": "#(zipmap [:suit :rank] [(case (subs % 0 1)\n                           \"D\" :diamond\n                           \"H\" :heart\n                           \"S\" :spade\n                           \"C\" :club)\n                         (case (subs % 1 2)\n                           \"2\" 0\n                           \"3\" 1\n                           \"4\" 2\n                           \"5\" 3\n                           \"6\" 4\n                           \"7\" 5\n                           \"8\" 6\n                           \"9\" 7\n                           \"T\" 8\n                           \"J\" 9\n                           \"Q\" 10\n                           \"K\" 11\n                           \"A\" 12)])", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 128, "code": "(fn [[s r]]\n         (let [k (read-string (str r))]\n           {:suit (get {\\D :diamond \\H :heart \\S :spade \\C :club} s)\n            :rank (if (number? k)\n                    (- k 2)\n                    (get {\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} r))}))", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 128, "code": "(fn [s]\n  (let [[suit rank] (into [] s)]\n  { :suit ({ \\S :spade, \\C :club, \\H :heart, \\D :diamond} suit)\n     :rank ({ \\2 0, \\3 1, \\4 2, \\5 3 \\6 4, \\7 5, \\8 6 \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12 } rank)}))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 128, "code": "(fn [s]\n  (let [flower-map {\\S :spade \\H :heart \\D :diamond \\C :club}\n        point-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (flower-map (nth s 0))\n     :rank (point-map (nth s 1))}))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits (zipmap [\"S\" \"H\" \"D\" \"C\"] [:spade :heart :diamond :club])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))})\n  )", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 128, "code": "(fn card-detector [card-string]\n  (let [suit-char (first card-string)\n        rank-char (nth card-string 1)\n        suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank-map {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suit (suit-map suit-char)\n        rank (get rank-map rank-char (- (Character/getNumericValue rank-char) 2))]\n    {:suit suit :rank rank}\n  ))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 128, "code": "(fn [c]\n     (let [c2 (map identity c)\n           suit (condp = (first c2)\n                 \\D :diamond\n                 \\H :heart\n                 \\C :club\n                 \\S :spade)\n           rank (condp = (second c2)\n                      \\A 12\n                      \\K 11\n                      \\Q 10\n                      \\J 9\n                      \\T 8\n                      (- (read-string (str (second c2))) 2))\n           ]\n       (hash-map :suit suit :rank rank)))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 128, "code": "(fn [[s r]] (let [ss ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n                  rr ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)]\n    {:suit ss :rank rr}))", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s) \n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 128, "code": "(fn ranker [str]\n   (let [suits {\\H :heart \\D :diamond \\C :club \\S :spade}\n         rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n         s (seq str)]\n     (assoc (assoc {} :rank (get rank (second s))):suit (get suits (first s)) )))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 128, "code": "(fn f [[s r]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n   :rank ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13))\n           r)})", "user": "5012da69e4b0c8732600222d"}, {"problem": 128, "code": "(fn\n  [[s r]]\n  (let [suits {\\H :heart\n               \\C :club\n               \\D :diamond\n               \\S :spade}\n        ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n    {:suit (get suits s)\n     :rank (get ranks r)}))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 128, "code": "(fn [[s r]]\n\t{\t:suit ({\\S :spade \\D :diamond \\H :heart \\C :club} s)\n  \t\t:rank ((zipmap \"23456789TJQKA\" (range 13)) r)\n\t}\n)", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (case s \\D :diamond \\H :heart \\C :club \\S :spade)\n   :rank (condp = r\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           r (- (Character/digit r 10) 2))})", "user": "5d272077e4b092dab7f59c64"}, {"problem": 128, "code": "(fn\n  [card]\n  (let [table {\\S :spade\n               \\H :heart\n               \\D :diamond\n               \\C :club\n               \\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12}\n        card-vals (seq card)]\n    (hash-map \n     :suit (get table (first card-vals)) \n     :rank (get table (second card-vals)))))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 128, "code": "(fn [[suit rank]] \n  {:suit ({\\C :club\n           \\D :diamond\n           \\H :heart\n           \\S :spade} suit)\n   :rank ({\\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12} rank)})", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 128, "code": "(fn [card]\n    (let [suit-ref {\\D :diamond, \\S :spade, \\H :heart, \\C :club}\n          rank-ref (into {}\n                     (map vec\n                      (partition 2 (interleave [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13)))))]\n      {:suit (suit-ref (first card)), :rank (rank-ref (second card))}))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\\D :diamond, \\H :heart, \\S :spades, \\C :club}\n        ranks \"23456789TJQKA\"]\n    (assoc {} :suit (get suits (first card)) :rank (.indexOf ranks (int (second card))))))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 128, "code": "(fn [[suit rank]]\n    (conj\n     (conj {} (case suit\n               \\D [:suit :diamond]\n               \\H [:suit :heart]\n               \\S [:suit :spade]\n               \\C [:suit :club]))\n     (case rank\n       \\2 [:rank 0]\n       \\3 [:rank 1]\n       \\4 [:rank 2]\n       \\5 [:rank 3]\n       \\6 [:rank 4]\n       \\7 [:rank 5]\n       \\8 [:rank 6]\n       \\9 [:rank 7]\n       \\T [:rank 8]\n       \\J [:rank 9]\n       \\Q [:rank 10]\n       \\K [:rank 11]\n       \\A [:rank 12])))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 128, "code": "#(let [sc (map str (seq %))\n\t   suit {:suit (get {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club} (first sc))}\n\t   rank {:rank (.indexOf [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] (second sc))}]\n       (merge suit rank))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 128, "code": "(fn card-mapper[code] (reduce #(if(or (= (str %2) \"D\" ) (= (str %2) \"C\") (= (str %2) \"S\") (= (str %2) \"H\") )\n(assoc %1 :suit (get {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spade } (str %2) ))\n(assoc %1 :rank (get {\"A\" 12, \"K\" 11, \"Q\" 10, \"J\" 9, \"T\" 8, \"9\" 7, \"8\" 6, \"7\" 5, \"6\" 4, \"5\" 3, \"4\" 2,\"3\" 1, \"2\" 0 } (str %2) )\n)) {} code))", "user": "5cf53196e4b087f62be35a94"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spead}\n        ranks (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (get suits (first card))\n     :rank (get ranks (last card))}))", "user": "5cb41c40e4b026601754b911"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [deck {\n        :rank {\n        \"2\" 0\n        \"3\" 1\n        \"4\" 2\n        \"5\" 3\n        \"6\" 4\n        \"7\" 5\n        \"8\" 6\n        \"9\" 7\n        \"T\" 8\n        \"J\" 9\n        \"Q\" 10\n        \"K\" 11\n        \"A\" 12}\n        :suit {\n        \"D\" :diamond\n        \"H\" :heart\n        \"C\" :club\n        \"S\" :spade}}]\n    {:rank ((deck :rank) (str rank))\n    :suit ((deck :suit) (str suit))}))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 128, "code": "(fn [ [First Second] ]\n    (let\n      [DictValue (fn [Value Keys Values] \n                  (first (keep identity (map #(if (= %1 Value) %2 nil) Keys Values) ))\n                 )\n      ]\n      {\n        :suit (DictValue First \"SHDC\" [:spade :heart :diamond :club] )\n        :rank (DictValue Second \"23456789TJQKA\" (range 13) )\n      }\n    )\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [s ({\\C :club \\D :diamond \\H :heart \\S :spade} s)\n        r (.indexOf (vec \"23456789TJQKA\") r)]\n    {:suit s :rank r}))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 128, "code": "(fn [[s r]] (let [nr (read-string (str r))] \n  {\n    :suit ({\\D :diamond \\H :heart \\S :spade \\C :club} s), \n    :rank (cond \n      (and (number? nr) (<= 2 nr 9)) (- nr 2) \n      (= r \\A) 12 \n      (= r \\K) 11 \n      (= r \\Q) 10 \n      (= r \\J) 9 \n      (= r \\T) 8)\n  }))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 128, "code": "(fn parse\n  [[suit rank]]\n  (let [suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :space}\n        ranks {\\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12}]\n    {:suit (suits suit) \n     :rank (or (ranks rank) (- (Character/digit rank 10) 2))}))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 128, "code": "(fn [s] {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} (first s)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))})", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 128, "code": "(fn card-representation\n  [[suit-char rank-char]]\n  (into \n   {} \n   (list (conj [:suit] (case suit-char\n                             \\S :spade\n                             \\H :heart\n                             \\D :diamond\n                             \\C :club))\n         (conj [:rank] (case rank-char\n                             \\2 0 , \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9 \\Q 10 \\K 11 \\A 12 -1)))))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 128, "code": "(fn [s]\n  {:suit ({\\H :heart \\C :club \\D :diamond \\S :spade} (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second s))})", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 128, "code": "(fn [code]\n  (let \n    [suits {\\C :club \\H :heart \\D :diamond \\S :spade}\n  ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits (first code)) :rank (ranks (last code))}))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 128, "code": "(fn parse-card [s]\n  (let [[suit rank] s\n        suits { \\S :spade, \\H :heart, \\D :diamond, \\C :club }\n        ranks [ \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A ]]\n    {:suit (suits suit) :rank (.indexOf ranks rank) }))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 128, "code": "(fn cards [c]\n  {:suit ({\\H :heart \\C :club \\S :spade \\D :diamond} (first c))\n   :rank ((zipmap \"23456789TJQKA\" (range)) (second c))})", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\D :diamond, \\H :heart, \\S :spade, \\C :club}\n        ranks (zipmap \"23456789TJQKA\" (range))]\n    {:suit (suits s)\n     :rank (ranks r)}))", "user": "57262710e4b0c5bde472c120"}, {"problem": 128, "code": "(fn [card-name]\n   (let [[suit rank] (vec card-name)]\n     {:suit (get {\\S :spade \\D :diamond \\H :heart \\C :club} suit)\n      :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)}))", "user": "5d6633bde4b0db5d338d15e2"}, {"problem": 128, "code": "(fn [card]\n  (let [ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        suits {\\C :club \\H :heart \\D :diamond \\S :spade}]\n    {:suit (suits (first card)) :rank (ranks (last card))}))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 128, "code": "(let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n      ranks (zipmap \"23456789TJQKA\" (range))]\n  (fn [card]\n    (let [[s r] card]\n      {:suit (suits s)\n       :rank (ranks r)})))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 128, "code": "(fn play-cards\n  [card-str]\n  (let [suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    (conj (conj {} [:suit (suit-map (first card-str))]) [:rank (rank-map (second card-str))])))", "user": "5d6e5ec6e4b04d129b00f2c7"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\H :heart \\S :spade \\D :diamond \\C :club} s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 128, "code": "(fn [c]\n  (let [s (seq c)\n        m (apply hash-map (interleave [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A\n                                        \\C    \\D       \\H     \\S]\n                                      [0  1  2  3  4  5  6  7  8  9  10 11 12\n                                        :club :diamond :heart :spade]))]\n    {:suit (m (first s)) :rank (m (second s))}))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 128, "code": "(fn [card]\n  (let [color (first card)\n        value (second card)]\n  \t(assoc \n      (assoc {} :rank (case value\n                        \\2 0\n                        \\3 1\n                        \\4 2\n                        \\5 3\n                        \\6 4\n                        \\7 5\n                        \\8 6\n                        \\9 7\n                        \\T 8\n                        \\J 9\n                        \\Q 10\n                        \\K 11\n                        \\A 12\n                        ))\n      :suit (case color\n                      \\D :diamond\n                      \\H :heart\n                      \\S :spades\n                      \\C :club))))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 128, "code": "#(let [s (case (first %)\n            \\D :diamond\n            \\H :heart\n            \\C :club\n            \\S :spade)\n        r (case (second %)\n            \\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12\n            (- (Character/digit (second %) 10) 2))]\n    {:suit s :rank r})", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 128, "code": "(fn [card] (let [\n                 suits {\"S\" :spade, \"H\" :heart, \"D\" :diamond, \"C\" :club},\n                 ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n                ]\n                {:suit (get suits (str (first card))), :rank (get ranks (str (second card)))}\n           )\n)", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 128, "code": "(fn card [sr] \n  (let [rankmap {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} suitemap {\\S :spade \\H :heart \\D :diamond \\C :club}]\n    (hash-map :suit (get suitemap (first sr)) :rank (get rankmap (last sr)))))", "user": "5d81c244e4b0915913b1d37a"}, {"problem": 128, "code": "(fn convert [[suit rank]]\n  (let [ suit-conv \n        { \\H      :heart \n          \\D      :diamond \n          \\C      :club \n          \\S      :spade }\n        rank-conv (zipmap (concat (map char (range 50 58)) [\\T \\J \\Q \\K \\A]) \n                          (range 13))]\n    {:suit (suit-conv suit)\n     :rank (rank-conv rank)}))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 128, "code": "(fn [input]\n  (let [suits {\\D :diamond \\S :spade \\C :club \\H :heart}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits (first input))\n     :rank (ranks (last input))}))", "user": "5d80fa37e4b0915913b1d374"}, {"problem": 128, "code": "(fn [x] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first x)) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last x))})", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 128, "code": "(fn [[x y]]\n{:suit (get {:D :diamond :H :heart :S :spade :C :club} (keyword (str x)))\n :rank (.indexOf [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] (str y))}\n)", "user": "5951190be4b066ee0a44aea4"}, {"problem": 128, "code": "(fn [k]\n  (let [s {\"D\" :diamond,\n              \"H\" :heart,\n              \"S\" :spade,\n              \"C\" :club}\n        r {\"A\" 12, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11}\n        sk (str(first k))\n        rk (str(second k))]\n    { :suit (get  s sk ) :rank (if (get r rk)\n                             (r rk)\n                             (-  (Integer/parseInt rk) 2))}))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n              suits {\\D :diamond, \\H :heart, \\C :club,\\S :spade}]\n       {:suit (suits s) :rank (ranks r)}))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 128, "code": "#(let [suit-enum {\\D :diamond\n                  \\H :heart\n                  \\S :spade\n                  \\C :club}\n       rank-enum {\\2 0\n                  \\3 1\n                  \\4 2\n                  \\5 3\n                  \\6 4\n                  \\7 5\n                  \\8 6\n                  \\9 7\n                  \\T 8\n                  \\J 9\n                  \\Q 10\n                  \\K 11\n                  \\A 12\n                  }\n       [s r] %]\n   {:suit (suit-enum s) :rank (rank-enum r)})", "user": "5cc80598e4b0ccb061962840"}, {"problem": 128, "code": "(let [suit {\"S\" :space \"H\" :heart \"C\" :club \"D\" :diamond}\n       rank (->> '(2 3 4 5 6 7 8 9 T J Q K A)\n                 (map str)\n                 (#(map vector % (range)))\n                 (into {}))\n       sh->card (fn [[s r]] {:suit (suit (str s))\n                             :rank (rank (str r))})]\n  sh->card)", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 128, "code": "(fn [[x1 x2]] (let [cardkeys  {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club \n                    \t\t   \"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n                {:suit (cardkeys (str x1)) :rank (cardkeys (str x2))}))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit (condp = suit\n           \\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club)\n   :rank (condp = rank\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           (- (Integer. (str rank)) 2))})", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 128, "code": "(let [suit #(case %\n               \\S :spade\n               \\H :heart\n               \\D :diamond\n               \\C :club)\n       rank #(case %\n              \\T 8\n              \\J 9\n              \\Q 10\n              \\K 11\n              \\A 12\n              (- (int %) 50)\n              )\n       ] #(hash-map :suit (suit (first %)) :rank (rank (second %))))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 128, "code": "(let [char2suit (fn [c]\n                  (condp = c\n                    \\S :spade\n                    \\H :heart\n                    \\D :diamond\n                    \\C :club))\n      char2rank (fn [c]\n                  (condp = c\n                    \\T 8\n                    \\J 9\n                    \\Q 10\n                    \\K 11\n                    \\A 12\n                    (- (Character/digit c 10) 2)))]\n  (fn [code]\n    {:suit (char2suit (first code)) :rank (char2rank (second code))}))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 128, "code": ";  (reduce (fn [m s] ( assoc m (-> s str second .toUpperCase) s )) {} #{:club :diamod :heart :spade})\n;(fn foo [[s r]] \n;  (let [suits {\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade}\n;        rank (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"])]\n;  {:suit (suits s) :rank (.indexOf rank r)}))\n\n(fn foo [s] \n  (let [suits {\"C\" :club \"D\" :diamond \"H\" :heart \"S\" :spade}\n        rank  (concat (range 2 10) [\"T\" \"J\" \"Q\" \"K\" \"A\"])\n        rankm (apply hash-map (flatten (map-indexed (fn [i e] [(str e) i]) rank)))\n        sr (reduce merge (for [[kx x] suits [ky y] rankm] { (str kx ky) {:suit x :rank y}})) ]\n    \t(sr s)\n))", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 128, "code": "(fn  [s]\n  (let [suits {\"H\" :heart, \"D\" :diamond, \"S\" :spade, \"C\" :club}\n        ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8,\n               \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}]\n    (hash-map :suit (suits (str (first s)))\n              :rank (ranks (str (second s))))))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 128, "code": "(fn [code]\n  (let [suit (first code)\n        rank (second code)\n        suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits suit)\n     :rank (ranks rank)}))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 128, "code": "(fn [card]\n   (let [suits (zipmap (map str \"SHDC\") [:spad :heart :diamond :club])\n         rank (zipmap (concat (map str (range 2 10)) (map str \"TJQKA\")) (range 13))\n         s (str (nth card 0))\n         r (str (nth card 1))]\n     {:suit (get suits s) :rank (get rank r)}))", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 128, "code": "(fn func [s]\n  {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club}\n          (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11  \\A 12}\n          (second s))})", "user": "5dadd84ee4b0f8c104ccfc85"}, {"problem": 128, "code": "(fn wut [[suit card]]\n  (let [[suit card] (mapv str [suit card])\n        rank (if (re-find #\"^\\d+$\" card)\n               (- (Integer. card) 2)\n               (get {\"T\" 8\"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} card))\n        ksuit (get {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} suit)]\n    {:suit ksuit\n     :rank rank}))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 128, "code": "(fn [card]\n            (let [lst (flatten (partition 1 card))]\n              (assoc {} :suit\n                        (#(cond (= % \"D\") :diamond (= % \"H\") :heart (= % \"C\") :club (= % \"S\") :spade) (.toString (nth lst 0)))\n                        :rank\n                        (#(cond (= % \"T\") 8 (= % \"J\") 9 (= % \"Q\") 10 (= % \"K\") 11 (= % \"A\") 12 :else (- (Integer/parseInt %) 2) ) (.toString (nth lst 1))))\n              )\n            )", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 128, "code": "(fn decode-playing-card [code]\n  (let [suit (first code)\n        rank (second code)]\n    {:suit (get {\\D :diamond \\C :club \\H :heart \\S :spade} suit)\n     :rank (get {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank (- (Character/digit rank 10) 2))} ))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (get {\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] r)})", "user": "5da760ebe4b000c986472c1a"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\"H\" :heart, \"S\" :spade, \"C\" :club, \"D\" :diamond}\n        rank {\"T\" 10, \"J\" 11, \"Q\" 12, \"K\" 13, \"A\" 14}]\n    \n    {\n      :suit (get suits (str (first card)))\n      :rank (- (get rank (str (last card)) (- (int (last card)) 48) ) 2)\n    }\n  )\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit\n  ({\\S :spade\n    \\H :heart\n    \\D :diamond\n    \\C :club}\n   s)\n  \n  :rank\n  ((apply hash-map (interleave\n              [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n              (range 13)))\n   r)})", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 128, "code": "(fn translate-card-str [card-str]\n  (let [[first second] card-str\n        suit-map {\\D :diamond\n                  \\S :spade\n                  \\H :heart\n                  \\C :club}\n        rank-map {\\2 0\n                  \\3 1\n                  \\4 2\n                  \\5 3\n                  \\6 4\n                  \\7 5\n                  \\8 6\n                  \\9 7\n                  \\T 8\n                  \\J 9\n                  \\Q 10\n                  \\K 11\n                  \\A 12}]\n    {:suit (suit-map first)\n     :rank (rank-map second)}))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 128, "code": "(fn [su]\n  (let [suits {\\D :diamond, \\H  :heart, \\C :club, \\S :spade}\n        nums {\\A 12,\\2 0, \\3 1, \\4 2,\\5 3,\\6 4,\\7 5,\\8 6,\\9 7,\\T 8,\\J 9,\\Q 10,\\K 11}]\n    {:suit (suits (first su)), :rank (nums (second su))}))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 128, "code": "(fn cards [SR]\n  (let [[suit rank] SR]\n    {:suit (get {\\S :spade \\D :diamond \\C :club \\H :heart} suit)\n     :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5\n                 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)}))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [rank-mapper {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n    \trank (or (rank-mapper r) (- (Character/getNumericValue r) 2))]\n    {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s) :rank rank}))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 128, "code": "(fn [s]\n  (let [get-rank (fn [r]\n                   {:rank (.indexOf '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A) r)})\n        get-suit (fn [s]\n                   {:suit (cond (= s \\D) :diamond\n                                (= s \\H) :heart\n                                (= s \\S) :spade\n                                (= s \\C) :club)})]\n    (merge (get-suit (first (char-array s)))\n           (get-rank (second (char-array s))))))", "user": "5dab11cde4b000c986472c45"}, {"problem": 128, "code": "#(let [ big {\\D :diamond \\H :heart \\C :club \\S :spade} \n        dic (apply array-map (flatten (map-indexed (fn [idx v] (vector  (str v) idx )) \"23456789TJQKA\" )))]\n  (reduce (fn [acc item] \n           (if (big item) (assoc acc :suit (big item)) (assoc acc :rank (dic (str item))))) {} %))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} suit)\n   :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] rank)})", "user": "5ab16992e4b073f1774425c4"}, {"problem": 128, "code": "(fn [s]\n  (let [[sc rc] (seq s)\n        suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits sc) :rank (ranks rc)}))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 128, "code": "(fn [card]\n  (let [suit     (first card)\n        rank     (last card)\n        suit-sym (cond\n                   (= suit \\S) :spade\n                   (= suit \\H) :heart\n                   (= suit \\D) :diamond\n                   (= suit \\C) :club)\n        rank-num (cond\n                   (= rank \\2) 0\n                   (= rank \\3) 1\n                   (= rank \\4) 2\n                   (= rank \\5) 3\n                   (= rank \\6) 4\n                   (= rank \\7) 5\n                   (= rank \\8) 6\n                   (= rank \\9) 7\n                   (= rank \\T) 8\n                   (= rank \\J) 9\n                   (= rank \\Q) 10\n                   (= rank \\K) 11\n                   (= rank \\A) 12)]\n    {:suit suit-sym\n     :rank rank-num}))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 128, "code": "(fn [x]\n  (hash-map\n   :suit ({\\S :spade \\D :diamond \\C :club \\H :heart} (first x))\n   :rank ((zipmap '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A) (range 13)) (last x))))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 128, "code": "(fn\n  [s]\n  (let [suits { \\S :spade \\C :club \\H :heart \\D :diamond },\n        ranks { \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12 },\n        suit (first (seq s)), rank (last (seq s))]\n  {:suit (suits suit), :rank (or (ranks rank) (- (read-string (str rank)) 2))}))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 128, "code": "(fn [string]\n  (let [suit-map {\"H\" :heart \"C\" :club \"D\" :diamond \"S\" :spade}]\n    (let [rank-map {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n      { :suit (get suit-map (str (first string))) :rank (get rank-map (str (last string)))}\n      )))", "user": "5dc9c4f2e4b02f9375f4e1f0"}, {"problem": 128, "code": "(fn decode-card [code]\n  (let [suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\A 12 \\K 11 \\Q 10 \\T 10 \\J 9}\n        get-rank (fn [x]\n                   (cond\n                    (Character/isDigit x) (- (Character/getNumericValue x) 2)\n                    (= \\T x) (- (ranks x) 2)\n                    :else (ranks x)))]\n    (-> (assoc {} :suit (suits (first code)))\n        (assoc :rank (get-rank (last code))))))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 128, "code": "(fn [card]\n\n   (let [rank-map (merge (reduce #(merge %1 {(String/valueOf %2) (- %2 2)})\n                                 {}\n                                 (range 2 10))\n                         {\"T\" 8}\n                         {\"J\" 9}\n                         {\"Q\" 10}\n                         {\"K\" 11}\n                         {\"A\" 12})\n         suit-map {\"H\" :heart \"D\" :diamond \"C\" :club \"S\" :spade}]\n     {:suit (get suit-map (String/valueOf (first card))) :rank (get rank-map (String/valueOf (last card)))}\n\n     )\n\n   )", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 128, "code": "(fn [s]\n  (let [[suit rank] s]\n    {:suit ({\\H :heart \\D :diamond \\S :spade \\C :club} suit)\n     :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)}))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 128, "code": "(fn parse-card [initials]\n  (let [[suit rank] initials\n        suits {\\H :heart \\S :spade \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits suit) :rank (ranks rank)}\n    ))", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 128, "code": "(fn [s] (let [ [a b] s suit {\\S :spade \\H :heart \\D :diamond \\C :club} rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}] {:suit (suit a) :rank (rank b)} ))", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 128, "code": "(fn [card]\n (let [letter->suit #(case %\n                       \\D :diamond\n                       \\H :heart\n                       \\C :club\n                       \\S :spades)\n       letter->rank #(-> (zipmap \"23456789TJQKA\" (range))\n                         (get %))]\n      {:suit (letter->suit (first card))\n       :rank (letter->rank (second card))}))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 128, "code": "(fn [string]\n  (let [ch1 (str (first string)) ch2 (str (last string)) \n        map-rank {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} \n        map-suit {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade}]\n    \n    {:suit (get map-suit ch1) :rank (get map-rank ch2)}\n    )\n )", "user": "5de6484ce4b0986d99407f66"}, {"problem": 128, "code": "(fn [str]\n   (let [card-values  {:card-values\n                       {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}}\n         card-symbols {:card-symbols\n                       {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}}\n         suit (-> (:card-symbols card-symbols)\n                  (select-keys [(subs str 0 1)])\n                  vals\n                  first)\n         rank (-> (:card-values card-values)\n                  (select-keys [(subs str 1 2)])\n                  vals\n                  first)]\n     (hash-map :suit suit :rank rank)))", "user": "5db98f39e4b010eb3c36cd53"}, {"problem": 128, "code": "(fn [code]\n  (let [smap {\\S :spade\n              \\H :heart\n              \\D :diamond\n              \\C :club}\n        nmap {\\T 8\n              \\J 9\n              \\Q 10\n              \\K 11\n              \\A 12}]\n    {:suit (get smap (first code) :unknown)\n     :rank (let [mc (second code)]\n             (if (Character/isDigit mc)\n               (- (read-string (str mc)) 2) ;; since we're counting two as 0 and ace as 12\n               (get nmap mc :unknown)))}))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 128, "code": "(fn [card] \n  (let [suits {\"H\" :heart \"S\" :spade \"C\" :club \"D\" :diamond}\n        ranks (map-indexed vector [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"])\n        suit (subs card 0 1)\n        rank (subs card 1 2)]\n    {:suit (get suits suit) \n    :rank (ffirst \n           (filter #(= (second %) rank) \n                 ranks))}))", "user": "58273e82e4b051871117bf1b"}, {"problem": 128, "code": "(fn [[s n]]\n  {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} s)\n   :rank (or \n           ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} n) \n           (- (int n) 50))})", "user": "529dfc6de4b04e0c58e87b8a"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 128, "code": "(fn [[suit rank]]\n  {:suit (get {\\H :heart \\D :diamond \\C :club \\S :spade} suit)\n   :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] rank)})", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 128, "code": "(fn [s]\n  (let [[suit rank] (seq s)]\n    {:suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n     :rank (get {\\2 0\n                 \\3 1\n                 \\4 2\n                 \\5 3\n                 \\6 4\n                 \\7 5\n                 \\8 6\n                 \\9 7\n                 \\T 8\n                 \\J 9\n                 \\Q 10\n                 \\K 11\n                 \\A 12} rank)}))", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 128, "code": "(fn\n  [x]\n  (let [suits { \\H :heart \\C :club \\S :spade \\D :diamond}\n        ranks { \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} \n        [suit rank] (char-array x)]\n    (if (> (int rank) 58)\n      (assoc {} :suit (get suits suit) :rank (get ranks rank))\n      (assoc {} :suit (get suits suit) :rank (- (int rank) 50)))))", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 128, "code": "(fn pokecast [code]\n  (let [[s r] code\n        smap (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        rmap (zipmap (map str \"23456789TJQKA\") (range 13))]\n    {:suit (smap (str s)) :rank (rmap (str r))}))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 128, "code": "(fn cards [card]\n  (let [suits { \"D\" :diamond, \"H\" :heart, \"S\" :spade, \"C\" :club}\n        ranks { \"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n        suit (get suits (str (first card)))\n        rank (get ranks (str (first (rest card))))\n        ]\n    {:suit suit :rank rank}))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 128, "code": "(fn [s]\n   (let [suit (first s)\n         rank (second s)\n         suits {\\D :diamond\n                \\H :heart\n                \\C :club\n                \\S :spade}\n         ranks {\\A 12\n                \\K 11\n                \\Q 10\n                \\J 9\n                \\T 8}]\n     {:suit (suits suit) :rank (get ranks rank (- (int rank) (int \\0) 2))}))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 128, "code": "(fn [[a b]]\n  (let [s (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        r (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (s (str a)) :rank (r (str b))}))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 128, "code": "#(let [suit-map {\\D :diamond \\H :heart \\C :club \\S :spade}\n       rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n   {:suit (suit-map (first %)) :rank (rank-map (second %))})", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 128, "code": "(partial apply #(hash-map \n                 :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} %)\n                 :rank ((into {} (map vector \"23456789TJQKA\" (range))) %2)))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 128, "code": "(fn [s]\n\t(let [suits {\"D\" :diamond, \"H\" :heart, \"C\" :club, \"S\" :spades}\n          face-card->rank (fn [card]\n                            (condp = card\n                              \"A\" 12\n                              \"K\" 11\n                              \"Q\" 10\n                              \"J\" 9\n                              \"T\" 8)\n                          )\n          number-card->rank #(- % 2)\n          suit (subs s 0 1)\n          rank (subs s 1)\n          parsed-rank (if-let [number (re-find #\"\\d\" rank)]\n                        (Integer/parseInt number)\n                        rank\n                        )]\n      {:suit (get suits suit)\n       :rank (if (number? parsed-rank)\n               (number-card->rank parsed-rank)\n               (face-card->rank parsed-rank))}\n    )\n)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 128, "code": "(fn [card] \n  (let [suits {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club}\n      ranks (reduce into {\"A\" 12\n              \"K\" 11\n              \"Q\" 10\n              \"J\" 9\n              \"T\" 8} (map (fn [i] {(str i) (- i 2)}) (range 2 10)))\n      suit (get suits (str (first card)))\n      rank (get ranks (str (second card)))]\n  {:suit suit :rank rank}))", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 128, "code": "(fn recognize-card [card]\n  (let [suit-map {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        rank-map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suit-map (first card)) :rank (rank-map (second card))}))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 128, "code": "(fn suit->map [suit-str]\n  (let [suits {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n        ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n        [suit & rank] suit-str\n        s-str (str suit)\n        r-str (clojure.string/join rank)]\n    {:suit (get suits s-str) :rank (get ranks r-str)}))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 128, "code": "(fn [s]\n    (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n          ranks (into {} (map vector \"23456789TJQKA\" (range 13)))]\n      {:suit (suits (first s))\n       :rank (ranks (second s))}))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [x 2]\n    {:suit (get {\\D :diamond\n                 \\H :heart\n                 \\C :club\n                 \\S :spades} suit)\n     :rank (get {\\2 0\n                 \\3 1\n                 \\4 2\n                 \\5 3\n                 \\6 4\n                 \\7 5\n                 \\8 6\n                 \\9 7\n                 \\T 8\n                 \\J 9\n                 \\Q 10\n                 \\K 11\n                 \\A 12} rank)}))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 128, "code": "(fn [string]\n  (assoc {}\n    :suit\n    (condp = (first string)\n      \\D :diamond\n      \\H :heart\n      \\C :club\n      \\S :spade)\n    :rank\n    (condp = (second string)\n      \\T 8\n      \\J 9\n      \\Q 10\n      \\K 11\n      \\A 12\n      (- (int (second string)) (int \\2)))))", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 128, "code": "(fn poker [x]\n  (let [suits {\"D\" :diamond\n               \"H\" :heart\n               \"S\" :spade\n               \"C\" :club}\n        ranks {\"2\" 0\n               \"3\" 1\n               \"4\" 2\n               \"5\" 3\n               \"6\" 4\n               \"7\" 5\n               \"8\" 6\n               \"9\" 7\n               \"T\" 8\n               \"J\" 9\n               \"Q\" 10\n               \"K\" 11\n               \"A\" 12}\n        f (subs x 0 1)\n        s (subs x 1 2)]\n    {:suit (get suits f)\n     :rank (get ranks s)}))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 128, "code": "(fn [[suit-char rank-char]]\n  {:suit ({\\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club} suit-char)\n   :rank (case rank-char\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           (- (Integer/parseInt (str rank-char)) 2))\n  })", "user": "52b52c29e4b0c58976d9ad38"}, {"problem": 128, "code": "(fn [given] {:rank ((keyword (str (last given))) \n                               {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5 :8 6 :9 7\n                                :T 8 :J 9 :Q 10 :K 11 :A 12})\n   :suit ((keyword (str (first given))) {:S :spade :D :diamond :H :heart :C :club}) \n   })", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 128, "code": "(fn [s] {:suit ({\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club} (subs s 0 1)) \n       :rank ({\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12} (subs s 1 2)) })", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 128, "code": "(fn parse-card [card]\n  (let [suits {\\D :diamond \\S :spade \\H :heart \\C :club}\n        suit (get suits (first card))\n        high-ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        rank* (second card)\n        rank (if (<= (int rank*) (int \\9))\n               (- (int rank*) (int \\0) 2)\n               (get high-ranks rank*))]\n    {:suit suit :rank rank}))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 128, "code": "(fn [[s r]] \n  (into {} [[:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} s)]\n             [:rank ((into {} (map-indexed (fn [a b] [b a]) [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A])) r)]\n            ]))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 128, "code": "#(let [[a b] %] {:suit ({ \\H :heart \\S :spade \\D :diamond \\C :club} a) :rank ({ \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} b (- (int b) 50))})", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 128, "code": "(fn [s]\n   (let [suit (first s)\n         rank (second s)\n         suit-map {\\S :spade \\H :heart \\D :diamond \\C :club}\n         rank-map (zipmap (apply list \"23456789TJQKA\") (range))]\n     {:suit (suit-map suit) :rank (rank-map rank)}))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 128, "code": "(fn [s]\n  {:suit\n    (condp = (first s)\n      \\S :spade\n      \\D :diamond\n      \\C :club\n      \\H :heart)\n   :rank\n     (condp = (second s)\n      \\T 8\n      \\J 9\n      \\Q 10\n      \\K 11\n      \\A 12\n      (- (Integer/parseInt (str (second s))) 2))})", "user": "5e246f92e4b05b4b01516150"}, {"problem": 128, "code": "(fn [C]\n            (let [mp {\\S :spade \\D :diamond \\H :heart \\C :club\n                      \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n              (#(hash-map :suit (mp (% 0)) :rank (mp (% 1))) [(get C 0) (get C 1)])))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 128, "code": "(fn [s]\n  (let [suit (subs s 0 1)\n        rank (subs s 1)]\n    {:suit (get\n             {\"C\" :club\n              \"S\" :spade\n              \"H\" :heart\n              \"D\" :diamond} suit)\n     :rank (or (get\n                 {\"T\" 8\n                  \"J\" 9\n                  \"Q\" 10\n                  \"K\" 11\n                  \"A\" 12} rank)\n               (- (Integer/parseInt rank) 2))}))", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 128, "code": "#(hash-map :suit \n           (get {\\S :spade \\H :heart \\D :diamond \\C :club} (first %))\n           :rank\n           (get (zipmap \"23456789TJQKA\" (range 13)) (second %)))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 128, "code": "(fn [[s r]]\n    (let [rank (seq \"23456789TJQKA\")\n          suit {\\C :club\n                \\D :diamond\n                \\H :heart\n                \\S :spade}]\n      {:suit (suit s) :rank (.indexOf rank r)}))", "user": "509e8da7e4b08df8156e9e2f"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\S :spade \\D :diamond \\H :heart \\C :club} s)\n   :rank ((apply hash-map (interleave \"23456789TJQKA\" (range))) r)})", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 128, "code": "(fn parse [card]\n  (let [suit (subs card 0 1)\n        rank (subs card 1)\n        suit-map {\"S\" :spade\n        \t\t  \"H\" :heart\n        \t\t  \"C\" :club\n                  \"D\" :diamond}\n        rank-map {\n        \t\t  \"2\" 0\n        \t\t  \"3\" 1\n                  \"4\" 2\n                  \"5\" 3\n                  \"6\" 4\n        \t\t  \"7\" 5\n                  \"8\" 6\n        \t\t  \"9\" 7\n        \t\t  \"T\" 8\n        \t\t  \"J\" 9\n        \t\t  \"Q\" 10\n        \t\t  \"K\" 11\n        \t\t  \"A\" 12}]\n    {:suit (suit-map suit) :rank (rank-map rank)}))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 128, "code": "(fn [xxx]\n    (let [\n      arr (map str (seq xxx))\n      suit-i (first arr)\n      rank-i (second arr)\n      suit (\n        case suit-i\n          \"S\" :spade\n          \"H\" :heart\n          \"D\" :diamond\n          \"C\" :club\n      )\n      rank (\n        case rank-i\n          \"2\" 0\n          \"3\" 1\n          \"4\" 2\n          \"5\" 3\n          \"6\" 4\n          \"7\" 5\n          \"8\" 6\n          \"9\" 7\n          \"T\" 8\n          \"J\" 9\n          \"Q\" 10\n          \"K\" 11\n          \"A\" 12\n      )\n    ]\n      {:suit suit :rank rank}\n    )\n  )", "user": "5e2586afe4b05b4b01516167"}, {"problem": 128, "code": "#(let [suits {\"D\" :diamond\n               \"H\" :heart\n               \"C\" :club\n               \"S\" :spade }\n        ranks {\"2\" 0\n               \"3\" 1\n               \"4\" 2\n               \"5\" 3\n               \"6\" 4\n               \"7\" 5\n               \"8\" 6\n               \"9\" 7\n               \"T\" 8\n               \"J\" 9\n               \"Q\" 10\n               \"K\" 11\n               \"A\" 12}\n        card-seq (map str (seq %))]\n\n    (hash-map :suit (get suits (first card-seq)) :rank (get ranks (second card-seq)))\n    )", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suit {\\C :club \\D :diamond \\H :heart \\S :spade}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get suit s)\n     :rank (get rank r)}))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 128, "code": "(fn playing-cards [id-str]\n        (let [[suit n] id-str]\n          {:suit (condp = suit \\S :spade \\D :diamond \\H :heart \\C :club)\n           :rank (condp = n \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12\n                        (- (int n) 50))}))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 128, "code": "(fn [s] \n  (let\n    [sc (nth s 0)\n     rc (nth s 1)\n     s (case sc\n         \\S :spade\n         \\H :heart\n         \\C :club\n         \\D :diamond\n         :unknown)\n     r (case rc\n         \\T 8\n         \\J 9\n         \\Q 10\n         \\K 11\n         \\A 12\n         (- (int rc) (int \\2)))\n     ]\n    {:suit s :rank r}))", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade} s)\n   :rank ((zipmap \"23456789TJQKA\" (range 13)) r)})", "user": "5d929ceae4b0915913b1d412"}, {"problem": 128, "code": "(fn [x] (let [[s r] (seq x) v (read-string (str r))] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n          :rank (if (= Long (type v)) \n                  (- v 2)\n                  ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r) )}))", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ({\\C :club \\D :diamond \\H :heart \\S :spade} s)\n   :rank (.indexOf (vec \"23456789TJQKA\") r)})", "user": "4eb70649535d7eef30807373"}, {"problem": 128, "code": "(fn card-parse [[s r & _]]\n  {:suit\n   (case s\n     \\D :diamond\n     \\S :spade\n     \\C :club\n     \\H :heart)\n   :rank\n   (case r\n       \\2 0\n       \\3 1\n       \\4 2\n       \\5 3\n       \\6 4\n       \\7 5\n       \\8 6\n       \\9 7\n       \\T 8\n       \\J 9\n       \\Q 10\n       \\K 11\n       \\A 12)})", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 128, "code": "#(let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\nranks (apply assoc {} (interleave [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (iterate inc 0)))]\n{:suit (suits (get % 0)) :rank (ranks (get % 1))})", "user": "5e13a6b7e4b099d064963001"}, {"problem": 128, "code": "#(let [suits {\\D :diamond \\H :heart \\C :club \\S :spade }\n       ranks [ \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A ]\n       suit (first %)\n       rank (last %)]\n   {:suit (suits suit) :rank (.indexOf ranks rank)})", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 128, "code": "(fn [str]\n  {:suit\n    ({ \\H :heart, \\S :spade, \\D :diamond, \\C :club } (first str))\n   :rank\n    ((zipmap \"23456789TJQKA\" (range)) (second str))})", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 128, "code": "(fn func [st]\n  {:suit ({\\S :space \\H :heart \\D :diamond \\C :club} (first st))\n   :rank (or ({\\T 8, \\J 9, \\Q 10, \\K 11 \\A 12} (second st)) \n             (- (read-string (str (second st))) 2))})", "user": "5e805895e4b085ba37836e44"}, {"problem": 128, "code": "(fn card [[s r]]\n  { :suit\n  \t(case s\n      \\C :club\n      \\D :diamond\n      \\H :heart\n      \\S :spade)\n  \t:rank\n  \t(case r\n      \\2 0\n      \\3 1\n      \\4 2\n      \\5 3\n      \\6 4\n      \\7 5\n      \\8 6\n      \\9 7\n      \\T 8\n      \\J 9\n      \\Q 10\n      \\K 11\n      \\A 12)})", "user": "5e98e8a9e4b0157ca96647dc"}, {"problem": 128, "code": "(fn [[suit rank]]\n   (letfn [(get-suit [suit]\n             {:suit (case suit\n                      \\S :spade\n                      \\H :heart\n                      \\D :diamond\n                      \\C :club)})\n           (get-rank [rank]\n             {:rank (cond\n                      (#{\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9} rank) (- (int rank) 50)\n                      (= \\T rank) 8\n                      (= \\J rank) 9\n                      (= \\Q rank) 10\n                      (= \\K rank) 11\n                      (= \\A rank) 12)})]\n     (merge (get-rank rank) (get-suit suit))))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 128, "code": "(fn [s]\n  (let [suit (first(re-seq #\"[A-Z]\" s)) rank (first (rest (re-seq #\"[A-Z0-9]\" s)))]\n    (zipmap\n      (list :suit :rank)\n      (list\n       (cond\n         (= suit \"H\") :heart\n         (= suit \"S\") :spade\n         (= suit \"D\") :diamond\n         (= suit \"C\") :club)\n       (cond\n         (= rank \"2\") 0\n         (= rank \"3\") 1\n         (= rank \"4\") 2\n         (= rank \"5\") 3\n         (= rank \"6\") 4\n         (= rank \"7\") 5\n         (= rank \"8\") 6\n         (= rank \"9\") 7\n         (= rank \"T\") 8\n         (= rank \"J\") 9\n         (= rank \"Q\") 10\n         (= rank \"K\") 11\n         (= rank \"A\") 12\n         )\n\n        )\n      )\n    )\n  )", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 128, "code": "(fn [str]\n  (let [suit (condp = (first str)\n               \\H :heart\n               \\D :diamond\n               \\S :spade\n               \\C :club)\n        rank (condp = (second str)\n               \\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12)]\n    (merge {:rank rank} {:suit suit})))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 128, "code": "(fn recognize-playing-cards [s]\n  {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club}\n          (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11  \\A 12}\n          (second s))})", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 128, "code": "(fn [[s r]] \n  (zipmap [:suit :rank] \n          [((read-string (str \\: s)) \n            {:D :diamond :S :spade\n             :H :heart :C :club}) \n           ((read-string (str \\: r))\n            {:2 0 :3 1 :4 2 :5 3 :6 4 :7 5\n             :8 6 :9 7 :T 8 :J 9 :Q 10 :K 11 :A 12})]))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 128, "code": "(fn [s]\n  (let [[suit rank] s\n        c {65 12 75 11 81 10 74 9 84 8 67 :club 72 :heart 68 :diamond 83 :spade}]\n    (hash-map :suit (c (int suit)) :rank (c (int rank) (- (int rank) 50)))))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 128, "code": "(fn poke [s]\n\n    {:suit ({\\H :heart, \\C :club, \\D :diamond, \\S :spades} (first s)), :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (last s))}\n  )", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 128, "code": "(fn cards\n  [[n m]]\n  (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8,\n               \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits n), :rank (ranks m)}))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 128, "code": "#(let [card-map {\\S :spade \\H :heart \\D :diamond \\C :club \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (card-map (first %)) :rank (card-map (last %))})", "user": "5e950178e4b0fbed045a3801"}, {"problem": 128, "code": "(fn poker [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        value-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (value-map (last s))}\n  ))", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5e950310e4b0fbed045a3802"}, {"problem": 128, "code": "(fn plaring_cards\n  [[x y]]\n  (let [suits {\\D :diamond, \\H :heart, \\C :club, \\S :spade}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8,\n               \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits x), :rank (ranks y)}))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 128, "code": "(fn solution [card]\n (let [suits {\\S :spades \\H :heart \\D :diamond  \\C :club}\n       cards {\\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11}]\n   {:suit (suits (first card)) :rank (cards (second card))}))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 128, "code": "(fn __\n  [x]\n  (let [char-to-rank {\\T 8\n                      \\J 9\n                      \\Q 10\n                      \\K 11\n                      \\A 12}\n        char-to-suit {\\D :diamond\n                      \\H :heart\n                      \\S :spade\n                      \\C :club}\n        ]\n    {:suit (get char-to-suit (first x))\n     :rank (get char-to-rank (second x)\n                (- (Character/digit (second x) 10) 2))}))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} s)\n        rank (case r\n               \\A 12\n               \\K 11\n               \\Q 10\n               \\J 9\n               \\T 8\n               (- (int r) (int \\2)))]\n    {:suit suit :rank rank}))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 128, "code": "(fn [s]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade}\n              (first s))\n  :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n             (second s))})", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 128, "code": "(fn [id]\n  (let [suits {\"H\" :heart \"D\" :diamond \"C\" :club \"S\" :spade}\n        k (map str (conj (into [] (range 2 10)) \"T\" \"J\" \"Q\" \"K\" \"A\"))\n        v (range 13)\n        ranks (zipmap k v)]\n    {:suit (get suits (str (first id))) :rank (get ranks (str (second id)))}))", "user": "56901211e4b0dcc4269f40e7"}, {"problem": 128, "code": "(fn [s]\n  (let [suit-map {\\S :spade,\n                  \\H :heart,\n                  \\C :club,\n                  \\D :diamond}\n        rank-map {\\2 0,\n                  \\3 1,\n                  \\4 2,\n                  \\5 3,\n                  \\6 4,\n                  \\7 5,\n                  \\8 6,\n                  \\9 7,\n                  \\T 8,\n                  \\J 9,\n                  \\Q 10,\n                  \\K 11,\n                  \\A 12}\n        [suit rank] s]\n    {:suit (get suit-map suit), :rank (get rank-map rank)}))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 128, "code": "(fn convert [[s r]]\n  (let [suit {\\D :diamond, \\S :spade, \\C :club, \\H :heart}\n        rank (into {} (map-indexed\n            #(vector %2 %1)\n            (seq \"23456789TJQKA\")))]\n    \n    (hash-map :suit (suit s) :rank (rank r))))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 128, "code": "(fn [[s r]] (hash-map :suit ({\\C :club \\D :diamond \\H :heart \\S :spade} s)\n                      :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] r)))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 128, "code": "(fn cards [s]\n  (let [f1 (str (first s))\n        f2 (str (second s))]\n    (let [suit ({\n                  \t\"H\" :heart\n                  \t\"C\" :club\n                  \t\"D\" :diamond\n                  \t\"S\" :spade\n                  } f1)\n          rank ({\n                     \"2\" 0\n                     \"3\" 1\n                     \"4\" 2\n                     \"5\" 3\n                     \"6\" 4\n                     \"7\" 5\n                     \"8\" 6\n                     \"9\" 7\n                     \"T\" 8\n                     \"J\" 9\n                     \"Q\" 10\n                     \"K\" 11\n                     \"A\" 12\n                    } f2)]\n           {\n            :suit suit\n            :rank rank    \n           }\n      )\n    )\n  )", "user": "5ebb4751e4b00a66d4a95262"}, {"problem": 128, "code": "(fn f [x] \n  (let [\n    suits {\\D :diamond \\H :heart \\C :club \\S :spade} \n    ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n    {:suit (get suits (first x)) :rank (get ranks (second x))}\n  )\n)", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [sm {\\D :diamond \\H :heart \\C :club \\S :spade}\n        rm (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (sm suit)\n     :rank (rm rank)}))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 128, "code": "(fn convert-card\n  [[s r]]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (suits s)\n     :rank (ranks r)}))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suites {\\S :spade, \\H :heart, \\C :club \\D :diamond}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suites s), :rank (ranks r)}))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 128, "code": "(fn [s] \n  (let [decs {\\D :diamond \\H :heart \\C :club \\S :spades}\n        vals {\\T 10 \\J 11 \\Q 12 \\K 13 \\A 14}]\n    {:suit (get decs (first s) :not-known)\n     :rank (- (get vals (last s) (Character/digit (last s) 10)) 2)}))", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 128, "code": "(fn [[char1 char2]]\n  (let [suits {\\C :club, \\D :diamond, \\H :heart, \\S :spade}\n        ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n    {:suit (suits char1), :rank (ranks char2)}))", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 128, "code": "(fn [cardStr]\n  (let [suit (case (first cardStr)\n             \\S :spade\n             \\H :heart\n             \\C :club\n             \\D :diamond\n             )\n        rank (case (last cardStr) \n               \\2 0 \n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12)\n        ]\n    \n    { :suit suit :rank rank}\n    )\n  \n  \n  )", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 128, "code": "(fn parse-card [st] (let [suit (first (seq st))\n                          rank (first (rest (seq st)))]\n                      {:suit\n                      (case suit\n                        \\C :club\n                        \\D :diamond\n                        \\H :heart\n                        \\S :spade)\n                      :rank\n                      (case rank\n                        \\2 0\n                        \\3 1\n                        \\4 2\n                        \\5 3\n                        \\6 4\n                        \\7 5\n                        \\8 6\n                        \\9 7\n                        \\T 8\n                        \\J 9\n                        \\Q 10\n                        \\K 11\n                        \\A 12)}))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 128, "code": "(fn [s]\n                   \n  (let [cards {:S :spade, :H :heart, :D :diamond, :C :club :2 0, :3 1, :4 2, :5 3, :6 4, :7 5, :8 6, :9 7, :T 8, :J 9, :Q 10, :K 11, :A 12}]\n    {:suit ((keyword (str (first s))) cards) :rank ((keyword (str (second s))) cards)}))", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 128, "code": "(fn playing-cards [st]\n  (let [deck-m {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}]\n    (zipmap [:suit :rank] (map #(deck-m (str %) (- (Character/digit % 10) 2)) st))))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits {\\S :spade, \\D :diamond, \\C :club, \\H :heart}\n        ranks (zipmap \"23456789TJQKA\" (range))]\n    {:suit (suits suit) :rank (ranks rank)}))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 128, "code": "(fn [s]\n  {:suit (get {\\D :diamond \\S :spade \\H :heart \\C :club} (first s)) :rank (get (zipmap \"23456789TJQKA\" (range)) (last s))})", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 128, "code": "(fn [[s r]]\n    (let [suits {\\S :spade\n                 \\H :heart\n                 \\D :diamond\n                 \\C :club}\n          ranks {\\2 0\n                 \\3 1\n                 \\4 2\n                 \\5 3\n                 \\6 4\n                 \\7 5\n                 \\8 6\n                 \\9 7\n                 \\T 8\n                 \\J 9\n                 \\Q 10\n                 \\K 11\n                 \\A 12}]\n      {:suit (suits s) :rank (ranks r)}))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 128, "code": "(fn [str]\n  (let [suit-by-char {\\D :diamond,\n                      \\S :spade,\n                      \\H :heart,\n                      \\C :club}\n        rank-by-char {\\2 0,\n                      \\3 1,\n                      \\4 2,\n                      \\5 3,\n                      \\6 4,\n                      \\7 5,\n                      \\8 6,\n                      \\9 7,\n                      \\T 8,\n                      \\J 9,\n                      \\Q 10\n                      \\K 11\n                      \\A 12}]\n    {:suit (suit-by-char (first str)) :rank (rank-by-char (second str))}))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 128, "code": "(zipmap (for [x [\"D\" \"H\" \"C\" \"S\"]\n              y (concat (map str (range 2 10))'(\"T\" \"J\" \"Q\" \"K\" \"A\"))]\n          (apply str(concat x y)))\n  (for [x (map hash-map (repeat :suit) '(:diamond :heart :club :spade))\n       y (map hash-map (repeat :rank) (range 13))]\n   (merge x y)))", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 128, "code": "(fn cards\n  [c]\n  (let [info {}\n        f (first c)\n        s (second c)]\n    (-> info\n        (assoc :suit\n               (case f\n                 \\S :spade\n                 \\C :club\n                 \\H :heart\n                 \\D :diamond))\n        (assoc :rank\n               (case s\n                 \\T 8\n                 \\J 9\n                 \\Q 10\n                 \\K 11\n                 \\A 12\n                 (- (Integer/parseInt (str s)) 2))))))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 128, "code": "(fn [s]\n  {:suit (case (first s) \\S :spade \\D :diamond \\H :heart \\C :club) \n  :rank (case (second s) \\A 12 \\K 11 \\Q 10 \\J 9 \\T 8 (- (int (second s)) 50))}\n  )", "user": "5df08767e4b093ff717275bf"}, {"problem": 128, "code": "(fn [[s r]] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n  \t\t\t :rank (.indexOf \"23456789TJQKA\" (int r))})", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 128, "code": "(fn parse-trump [[s r]]\n  (let [suit-map {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        number-map (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range))]\n    (hash-map :suit (suit-map s) :rank (number-map r))))", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 128, "code": "(fn recognize [card]\n  (let [get-suit (fn [c] ((zipmap (map str \"SHDC\") [:spade :heart :diamond :club]) (str (first card))))\n        get-rank (fn [c] ((zipmap (map str \"23456789TJQKA\") (range 13)) (str (last card))))]\n    {:suit (get-suit card) :rank (get-rank card)}))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n        ranks {\"A\" 12 \"K\" 11 \"Q\" 10 \"J\" 9 \"T\" 8 \"9\" 7 \"8\" 6 \"7\" 5 \"6\" 4 \"5\" 3 \"4\" 2 \"3\" 1 \"2\" 0}\n        [_ suit rank] (clojure.string/split (clojure.string/trim card) #\"\")]\n    {:suit (suits suit)\n     :rank (ranks rank)}))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 128, "code": "(fn [x]\n   (let [s (nth x 0)\n         r (nth x 1)\n         suit (cond \n                (= \\D s) :diamond\n                (= \\H s) :heart\n                (= \\S s) :spade\n                :else :club)\n         rank (cond\n               (= \\T r) 8\n               (= \\J r) 9 \n               (= \\Q r) 10\n                (= \\K r) 11\n                (= \\A r) 12\n                :else (- (Integer/parseInt (str r)) 2))]\n     {:suit suit :rank rank}))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 128, "code": "(fn [[s v]] (\n    let [suit (case s \\S :spade \\H :heart \\C :club \\D :diamond)\n         rank (case v \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 (- (int v) 50))]\n    {:suit suit :rank rank}\n             )\n  )", "user": "4eb97234535dfed6da9c6d53"}, {"problem": 128, "code": "#(assoc {}\n   :suit (let [s (first %)] (cond (= s \\S) :spade\n                                  (= s \\H) :heart\n                                  (= s \\D) :diamond\n                                  (= s \\C) :club))\n   :rank (let [r (int (second %))] (cond (and (>= r 50)\n                                              (<= r 57)) (- r 50)\n                                         (= r 84) 8\n                                         (= r 74) 9\n                                         (= r 81) 10\n                                         (= r 75) 11\n                                         (= r 65) 12)))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 128, "code": "(fn [c] (let [cs {\"D\" :diamond \"H\" :heart \"C\" :club} \n              vs {\"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n              [c1 c2] c\n              s1 (str c1) \n              s2 (str c2)]\n          (if (contains? vs s2)\n           {:suit (get cs s1) :rank (get vs s2)}\n           {:suit (get cs s1) :rank (- (Integer. s2) 2)})))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 128, "code": "(fn [[s r]] {:suit (case s \\D :diamond \\C :club \\H :heart \\S :spade)\n             :rank (case r (\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9) (- (int r) (int \\0) 2) \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)})", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [deck (conj (zipmap (clojure.string/join (map str (range 2 10))) (range))\n                   (zipmap \"TJQKA\" (range 8 13))\n                   (zipmap \"HSDC\" [:heart :spade :diamond :club]))]\n    {:suit (deck suit) :rank (deck rank)}))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 128, "code": "(fn card\n  [[a b]]\n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (get suits (str a)) :rank (get ranks (str b))}))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 128, "code": "(fn\n  [s]\n  (let [suit (first s)\n        rank (second s)\n        suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}]\n    {:suit (get suits suit)\n     :rank (cond\n             (= \\A rank) 12\n             (= \\K rank) 11\n             (= \\Q rank) 10\n             (= \\J rank) 9\n             (= \\T rank) 8\n             :else (- (Integer/parseInt (str rank)) 2))}))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 128, "code": "(fn [input](apply #(assoc {} :suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} %) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} %2))  (vec input)))", "user": "5405885ee4b0addc1aec6668"}, {"problem": 128, "code": "(fn [[s r]] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spades} s) :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 128, "code": "(fn [card]\n  (let [suit-map {\"H\" :heart\n                  \"C\" :club\n                  \"S\" :spade\n                  \"D\" :diamond}\n        rank-map {\"T\" 8\n                  \"J\" 9\n                  \"Q\" 10\n                  \"K\" 11\n                  \"A\" 12}\n        rank-string (-> card second str)\n        suit-string (-> card first str)]\n    {:rank (or (rank-map rank-string) (- (Integer/parseInt rank-string) 2))\n     :suit (suit-map suit-string)}))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 128, "code": "(fn [[s-chr r-chr]]\n  {:suit ({\\D :diamond\n           \\C :club\n           \\H :heart\n           \\S :spade}\n          s-chr)\n   :rank ((->> [\\T \\J \\Q \\K \\A]\n               (concat (map #(char (+ % 48)) (range 2 10)))\n               (map-indexed #(vector %2 %1))\n               (into {}))\n          r-chr)})", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 128, "code": "(fn parse-card [[s r]]\n  (let [suit {\\S :spade\n              \\H :heart\n              \\D :diamond\n              \\C :club}\n        rank {\\2 0\n              \\3 1\n              \\4 2\n              \\5 3\n              \\6 4\n              \\7 5\n              \\8 6\n              \\9 7\n              \\T 8\n              \\J 9\n              \\Q 10\n              \\K 11\n              \\A 12}]\n    {:suit (suit s) :rank (rank r)}))", "user": "5f300f28e4b033932238a682"}, {"problem": 128, "code": "(fn [[s t]]\n  {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n   :rank ((fn [t]\n            (if (<= (int t) (int \\9)) (- (int t) 50)\n                ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} t))) t)})", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 128, "code": "(fn [card]\n   (letfn [(suit [s]\n             (cond\n               (= \\S s) :spade\n               (= \\H s) :heart\n               (= \\D s) :diamond\n               (= \\C s) :club))\n           (rank [r]\n             (cond\n               (= \\T r) 8\n               (= \\J r) 9\n               (= \\Q r) 10\n               (= \\K r) 11\n               (= \\A r) 12\n               :else (- (int r) (int \\0) 2))\n             )]\n     {:suit (suit (first card)) :rank (rank (second card))}))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 128, "code": "(fn [code]\n  {:suit (get {\"D\" :diamond  \"H\" :heart \"C\" :club \"S\" :spade}  (str (first code)))\n   :rank (if (> (int (last code)) 57)\n           (+ 8 (.indexOf [\"T\" \"J\" \"Q\" \"K\" \"A\"] (str (last code))))\n           (- (Integer/parseInt (str(last code) )) 2))}\n  )", "user": "5f0c3da4e4b0f30dddfb5d49"}, {"problem": 128, "code": "(fn read-card [[x y & r]]\n  ( let [ suits {\\S :spade \\H :heart \\D :diamond \\C :club} \n          ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} ]\n      (into (sorted-map) {:suit (get suits x) :rank (get ranks y)})))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 128, "code": ";stolen elegant solution: \n;(fn [[s r]]\n;    {:suit ({\\H :heart \\D :diamond \\C :club \\S :spade} s)\n;     :rank ((zipmap \"23456789TJQKA\" (range)) r)})\n(fn [[suit rank]]\n   (\n     conj (case suit\n              \\D {:suit :diamond}\n              \\H {:suit :heart}\n              \\C {:suit :club}\n              {:suit :spade})\n          (case rank\n              \\A {:rank 12}\n              \\K {:rank 11}\n              \\Q {:rank 10}\n              \\J {:rank 9}\n              \\T {:rank 8}\n              {:rank (.toBigInteger (- (java.math.BigInteger. (str rank) 10) 2))})\n    )\n)", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 128, "code": "(fn [card]\n  (let [suit {\"D\" :diamond \"H\" :heart \"S\" :spade \"C\" :club}\n        rank {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}\n        card-values (->> card (apply vector) (map str))]\n    (hash-map :suit (suit (first card-values)) :rank (rank (second card-values)))\n  ))", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit ((zipmap \"DHCS\" [:diamond :heart :club :spade]) s)\n   :rank ((zipmap \"23456789TJQKA\" (range)) r)})", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 128, "code": "(fn parse-card [card]\n  (let [ret {} s (first card) r (second card)]\n    (assoc\n     (assoc ret :rank (if (< (int r) 65)\n                        (- (Character/digit r 10) 2)\n                        (case r\n                          \\T 8\n                          \\J 9\n                          \\Q 10\n                          \\K 11\n                          \\A 12 )))\n     :suit (case s\n             \\H :heart\n             \\D :diamond\n             \\C :club\n             \\S :spade))))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 128, "code": "(fn [[s r]] {:suit (get {\\S :spade, \\D :diamond, \\H :heart, \\C :club} s)\n               :rank (get (clojure.set/map-invert (map-indexed (fn [k v] [k v]) [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A])) r)})", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 128, "code": "(fn [x]  (let [ stringy x\n                suit (case (str (first stringy))\n                       \"C\" :club\n                       \"S\" :spade\n                       \"D\" :diamond\n                       \"H\" :heart)\n               rank (case (str (last stringy))\n                      \"2\" 0\n                      \"3\" 1\n                      \"4\" 2\n                      \"5\" 3\n                      \"6\" 4\n                      \"7\" 5\n                      \"8\" 6\n                      \"9\" 7\n                      \"T\" 8\n                      \"J\" 9\n                      \"Q\" 10\n                      \"K\" 11\n                      \"A\" 12)]\n            {:suit suit :rank rank}))", "user": "5e70c16de4b085ba37836dae"}, {"problem": 128, "code": "(fn [card]\n    (let [[suit rank] (seq card)]\n  (hash-map :suit (first (map {\\S :suit \\H :heart \\D :diamond \\C :club} [suit]))\n   :rank (first (map {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} [rank] ))\n            )\n  )\n  )", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 128, "code": "(letfn [(suitify [suit]\n           (case suit\n             \\S :spade\n             \\D :diamond\n             \\H :heart\n             \\C :club))\n         (rankify [rank]\n           (case rank\n             \\T 8 \\J 9 \\Q 10\n             \\K 11 \\A 12\n             (- (Integer/parseInt (str rank)) 2)))]\n   (fn [card]\n     (let [suit (first card)\n           rank (second card)]\n       {:suit (suitify suit)\n        :rank (rankify rank)})))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 128, "code": "(fn [[s v]] {:suit ({\\D :diamond, \\H :heart, \\C :club, \\S :spade} s)\n             :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6,\n                     \\9 7, \\T 8, \\J 9, \\Q 10 \\K 11, \\A 12 } v)} )", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 128, "code": "(let [suit {\\D :diamond \\H :heart \\C :club \\S :space}\n        rank [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]]\n    (fn [s]\n      {:suit (suit (first s))\n       :rank (.indexOf rank (second s))}))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 128, "code": "(fn cards\n  [[su ra]]\n  (let [suits (zipmap '(\"S\" \"H\" \"C\" \"D\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n  {:suit (suits (str su)) :rank (ranks (str ra))}))", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 128, "code": "#(let [[a b] %\n        s {\\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade}\n        r {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (s a)\n     :rank (r b)})", "user": "588fbb39e4b00487982d51bd"}, {"problem": 128, "code": "(fn [c] {:suit ({\\C :club \\D :diamond \\H :heart \\S :spade} (first c))\n         :rank (.indexOf (map str (concat (range 2 10) (seq \"TJQKA\"))) (str (second c)))})", "user": "5d0e9931e4b0cc9c91588258"}, {"problem": 128, "code": "(fn\n    [card]\n    (let [rank [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"]\n          suit {\"H\" :heart \"S\" :spade \"D\" :diamond \"C\" :club}\n          [s r] (->> card seq (map str))]\n      {:suit (get suit s) :rank (.indexOf rank r)}))", "user": "507e68abe4b085af06e3afd2"}, {"problem": 128, "code": "(fn [card-input]\n  (let [suits {\"D\" :diamond\n               \"H\" :heart\n               \"C\" :club\n               \"S\" :space}\n        values (zipmap \"23456789TJQKA\" (range))]\n    {:suit (get suits (str (first card-input)))\n     :rank (get values (last card-input))}))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 128, "code": "(fn card [[x n]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str x)) :rank (ranks (str n))}))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 128, "code": "(fn [x]\n  {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club}\n          (first x))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11  \\A 12}\n          (second x))})", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 128, "code": "(fn [card]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first card))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}(second card))})", "user": "4e6a5f5c535d8ccf87e9fed6"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 128, "code": "(fn [w]\n      (let[su{\\S :spade\n              \\H :heart\n              \\D :diamond\n              \\C :club\n              \n              }\n            ra{\n               \\2 0\n               \\3 1\n               \\4 2\n               \\5 3\n               \\6 4\n               \\7 5\n               \\8 6\n               \\9 7\n               \\T 8\n               \\J 9\n               \\Q 10\n               \\K 11\n               \\A 12\n               }\n           ]\n          {:suit (su (first w))\n           :rank (ra (second w))}))", "user": "5f737899e4b02876ed9fd099"}, {"problem": 128, "code": "(fn[x]\n  (let [s {\\S :spade \\H :heart \\D :diamond \\C :club}\n        r {\n        \\2 0\n        \\3 1\n        \\4 2\n        \\5 3\n        \\6 4\n        \\7 5\n        \\8 6\n        \\9 7\n        \\T 8\n        \\J 9\n        \\Q 10\n        \\K 11\n        \\A 12}]\n    {:suit (s (first x))\n     :rank (r (second x))}))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 128, "code": "(fn func [s]\n  {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club}\n          (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11  \\A 12}\n          (second s))})", "user": "5f792d48e4b02876ed9fd0c5"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 128, "code": "(fn[card] (assoc {} :suit\n                  (case (first card)\n                      \\S\n                      :spade\n                      \n                      \\H\n                      :heart\n                      \n                      \\D\n                      :diamond\n                      \n                      \\C\n                      :club\n               ) \n                  :rank\n                  (case (second card)\n                      \\2\n                      0\n                      \n                      \\3\n                      1\n                      \n                      \\4\n                      2\n                      \n                      \\5\n                      3\n                      \n                      \\6\n                      4\n                      \n                      \\7\n                      5\n                      \n                      \\8\n                      6\n                      \n                      \\9\n                      7\n                      \n                      \\T\n                      8\n                      \n                      \\J\n                      9\n                      \n                      \\Q\n                      10\n                      \n                      \\K\n                      11\n                      \n                      \\A\n                      12)))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 128, "code": "(fn [s]\n    (let[fs (subs s 0 1)\n         ss (subs s 1 2)\n         su {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n         ran{\"A\" 12 \"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6  \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11}\n         ]\n        {:suit (su fs):rank (ran ss)}))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 128, "code": ";;Hello Tteacher, this few last ones I had to look for them, I didn't want to put them as my own creation so if you don't want to consider them its fine,\n;;  I do hope that we can discuss them in class.\n\n(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 128, "code": "(fn [card]\n    (let [suite (first (seq card))\n          rank (second (seq card))\n          suites {\"S\" :spade \"D\" :diamond \"H\" :heart \"C\" :club}\n          ranks (zipmap  (list \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\") (range 13))]\n        {:suit (get suites (str suite)) :rank (get ranks (str rank))}\n        ))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 128, "code": "(fn rpc [st]\n  (letfn [(suit [c] (case c\n                      \\S :spade\n                      \\H :heart\n                      \\D :diamond\n                      \\C :club))\n          (rank [c] (case c\n                      \\2 0\n                      \\3 1\n                      \\4 2\n                      \\5 3\n                      \\6 4\n                      \\7 5\n                      \\8 6\n                      \\9 7\n                      \\T 8\n                      \\J 9\n                      \\Q 10\n                      \\K 11\n                      \\A 12))]\n    (let [[s r] (seq st)]\n      (conj (conj {} [:rank (rank r)]) [:suit (suit s)]))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 128, "code": "(fn [s]\n  (-> {}\n      (assoc :suit (get {\\D :diamond \\H :heart \\C :club \\S :spade} (first s)))\n      (assoc :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (last s)))))", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 128, "code": "(fn [[s r]]\n   {:suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n    :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)})", "user": "596a66cde4b069c0a1a19803"}, {"problem": 128, "code": "(fn recog-playin-card\n  [x]\n  (let [[s r] (re-seq #\".{1}\" x)\n        suit-map {:H :heart :D :diamond :C :club :S :spade}\n        suit ((keyword s) suit-map)\n        rank-map {:2 0 :3 1 :4 2 :5 3\n                  :6 4 :7 5 :8 6 :9 7 :T 8\n                  :J 9 :Q 10 :K 11 :A 12}\n        rank ((keyword r) rank-map)]\n    (zipmap [:suit :rank] [suit rank])))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 128, "code": "(fn [x] (#(let\n             [[suits ranks]\n              [ (apply hash-map (interleave (seq \"DHCS\") [:diamond :heart :club :spade])) (apply hash-map (interleave (seq \"23456789TJQKA\") (range)))]]\n             (hash-map :suit (get suits (first %)) :rank (get ranks (second %)))) (seq x)))", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 128, "code": "(fn [[fst snd]]\n  (let [suits {\\C :club \\D :diamond \\H :heart \\S :spades}\n        ranks (zipmap (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range 13))]\n    {:suit (suits fst) :rank (ranks (str snd))}))", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 128, "code": "(fn [c]\n  (let [[suit rnk] c]\n    {:suit (case suit\n             \\C :club\n             \\D :diamond\n             \\H :heart\n             \\S :spade)\n    :rank (cond\n            (= \\T rnk)  8\n            (= \\J rnk)  9\n            (= \\Q rnk) 10\n            (= \\K rnk) 11\n            (= \\A rnk) 12\n            :else (- (Long/parseLong (apply str [rnk])) 2))}))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 128, "code": "(fn\n[c]\n  (let [m {:suit :none :rank 0} suitmap {:H :heart :S :spade :D :diamond :C :club} rankmap {:A 12 :T 8 :K 11 :Q 10 :J 9} suit (subs c 0 1) r (subs c 1 2)]\n    (if (or (= r \"A\") (= r \"Q\") (= r \"J\") (= r \"K\") (= r \"T\"))\n      (assoc m :suit (suitmap (keyword suit)) :rank (rankmap (keyword r)))\n      (assoc m :suit (suitmap (keyword suit)) :rank (- (Integer/parseInt r) 2)))\n)\n    \n)", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 128, "code": "(fn\n  [s]\n  (let [suitMap { \"D\" :diamond, \"H\" :heart, \"S\" :spade, \"C\" :club }\n        rankMap { \"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12 }]\n    {:suit (get suitMap (str (first s))) :rank (get rankMap (str (second s)))}))", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 128, "code": "(fn [s]\n  (let [x {\\S :spade, \\D :diamond, \\H :heart, \\C :club}\n        y {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n        [s r] (into [] (str s))]\n    {:suit (x s) :rank (y r)}))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 128, "code": "(fn rec-card [[s r :as card]]\n  (let [rank-map (zipmap \"23456789TJQKA\" (range 13))\n        suit-map (zipmap \"SHDC\" [:spade :heart :diamond :club])]\n    {:rank (rank-map r)\n     :suit (suit-map s)}))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 128, "code": "(fn [s] \n  (let [[suit rank] (seq s)]\n    {:suit (get {\\S :spade \\H :heart \\D :diamond \\C :club} suit)\n    :rank (get {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)}))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 128, "code": "(fn [[s r]] (zipmap \n                 [:suit :rank] \n                 [\n                  (get {\\S :spade \\H :heart \\D :diamond \\C :club} s) \n                  (get (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range 13)) r)]))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 128, "code": "(fn [p]\n  {:suit (case (first (seq p))\n               \\D :diamond\n               \\H :heart\n               \\S :spade\n               \\C :club)\n   :rank (case (last (seq p))\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12\n           (-> (seq p) (last) (str) (read-string) (- 2)))})", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 128, "code": "(fn  [[s r]] \n  (let [suit ( {\\D :diamond \\H :heart \\C :club \\S :spades} s)\n        rank ({\\2 0 \\4 2 \\3 1  \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} r)]\n        {:suit suit :rank rank}))", "user": "5f1328dee4b091ba50b4dbb1"}, {"problem": 128, "code": "(fn [[c1 c2]]\n  {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} c1)\n   :rank ({ \\A 12 \\K 11 \\Q 10 \\J 9 \n            \\T 8 \\9 7 \\8 6 \\7 5 \\6 4 \\5 3 \\4 2 \\3 1 \\2 0} c2)\n  })", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 128, "code": "#(let [[suit rank] (seq %)]\n    {:suit (case suit\n             \\C :club\n             \\D :diamond\n             \\H :heart\n             \\S :spade)\n     :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] rank)})", "user": "5e471203e4b043cd24807a2a"}, {"problem": 128, "code": "(fn [s] \n  (apply hash-map \n         (list \n           :suit ({\\H :heart \\C :club \\D :diamond \\S :spade}\n           (first s)) \n           :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n                   \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n           (second s)))))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 128, "code": "#(let [m {\\D :diamond \\H :heart \\C :club \\S :spade\n         \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n  {:suit (m (first %)) :rank (m (second %))})", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 128, "code": "(fn [card]\n  {:suit ({\\D :diamond \\S :spade \\H :heart \\C :club} (first card))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 } (second card))})", "user": "5df175bce4b03c219ef1a34d"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 128, "code": "(fn [[s n]]\n  {:suit ({\\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club} s)\n  :rank ({ \n          \\T 8\n          \\J 9\n          \\Q 10\n          \\K 11\n          \\A 12} n\n          (- (int n) 50))\n  }\n )", "user": "4f82f9f7e4b033992c121c10"}, {"problem": 128, "code": "(fn read-card [id]\n  (let [suit (first id)\n        rank (second id)\n        suit-map (zipmap [\\S \\H \\D \\C] [:spade :heart :diamond :club])\n        rank-map (zipmap (concat (seq \"23456789\") '(\\T \\J \\Q \\K \\A)) (range 13))]\n    {:suit (get suit-map suit) :rank (get rank-map rank)}\n    ))", "user": "5f38eecce4b0574c87022c72"}, {"problem": 128, "code": "(fn [card]\n  (assoc {} :suit (case (first card)\n                    \\H :heart\n                    \\S :spade\n                    \\D :diamond\n                    \\C :club)\n         :rank (.indexOf [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (second card))))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 128, "code": "#(let [suits {\\D :diamond \\S :spade \\H :heart \\C :club}\n       ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n      {:suit (suits (first %)) :rank (ranks (last %))})", "user": "5f331015e4b0574c87022c37"}, {"problem": 128, "code": "(fn [s]\n  (let [suites {\"S\" :spades\n                \"D\" :diamond\n                \"H\" :heart\n                \"C\" :club}\n        ranks (-> (into {} (map (fn [v1 v2] [(str v1) v2])\n                                (range 2 10)\n                                (range 0 8)))\n                  (assoc \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12))\n        suite (-> s first str)\n        card (-> s second str)]\n    {:suit (get suites suite)\n     :rank (get ranks card)}))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 128, "code": "#(let [s (str (first %)) r (str (last %))]\n   {:suit (cond\n           (= s \"D\") :diamond\n           (= s \"C\") :club\n           (= s \"S\") :spade\n           (= s \"H\") :heart)\n   :rank (cond\n          (= r \"T\") 8\n          (= r \"J\") 9\n          (= r \"Q\") 10\n          (= r \"K\") 11\n          (= r \"A\") 12\n          :else (- (Integer/parseInt r) 2))})", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 128, "code": "(fn [c] \n  (let [ranks (zipmap [\"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\"] (range))\n        suits {\"S\" :spade \"H\" :heart \"D\" :diamond \"C\" :club}\n        cs (map str (seq c))\n        suit (first cs)\n        rank (second cs)\n        ]\n    {:suit (suits suit) :rank (ranks rank)}\n    ))", "user": "5f419985e4b0955706451fab"}, {"problem": 128, "code": "(fn [card] (let [suit (first card)\n                         rank (second card)\n                         suits {\n                                \\D :diamond\n                                \\H :heart\n                                \\C :club\n                                \\S :spade\n                                }\n                         ranks {\n                                \\2 0\n                                \\3 1\n                                \\4 2\n                                \\5 3\n                                \\6 4\n                                \\7 5\n                                \\8 6\n                                \\9 7\n                                \\T 8\n                                \\J 9\n                                \\Q 10\n                                \\K 11\n                                \\A 12\n                                }\n                         ]\n                     {:suit (get suits suit) :rank (get ranks rank)}))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 128, "code": "(fn [card]\n  (letfn [(suit [ch]\n                (case ch\n                  \\S :spade\n                  \\H :heart\n                  \\D :diamond\n                  \\C :club))\n          (rank [ch]\n                (case ch\n                  \\2 0\n                  \\3 1\n                  \\4 2\n                  \\5 3\n                  \\6 4\n                  \\7 5\n                  \\8 6\n                  \\9 7\n                  \\T 8\n                  \\J 9\n                  \\Q 10\n                  \\K 11\n                  \\A 12))]\n    {:suit (suit (.charAt card 0)) :rank (rank (.charAt card 1))}))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 128, "code": "(fn [s]\n        (let [suits {\\D :diamond\n                     \\S :spade\n                     \\H :heart\n                     \\C :club}\n              ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n              [suit rank] (seq s)]\n          {:suit (suits suit) :rank (ranks rank)}))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits (zipmap \"SHCD\" [:spade :heart :club :diamond])\n        ranks (zipmap \"23456789TJQKA\" (range 13))]\n    {:suit (suits s) :rank (ranks r)}))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 128, "code": "(fn [[s r]]\n    (let [suit-m {\\S :spade \\H :heart \\D :diamond \\C :club}\n          rank-m (zipmap \"23456789TJQKA\" (range))]\n      {:suit (suit-m s) :rank (rank-m r)}))\n\n;; (fn [s]\n;;     (let [suit-m {\\S :spade \\H :heart \\D :diamond \\C :club}\n;;           rank-m (zipmap '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A)\n;;                          (range 0 13))\n;;           match-m (merge suit-m rank-m)]\n;;       (zipmap [:suit :rank]\n;;               (map #(match-m %) s))))\n\n;; (fn [[s r]]\n;;     {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n;;      :rank (.indexOf (seq \"23456789TJQKA\") r)})\n\n;; (fn [[s r]]\n;;     (hash-map :suit (condp = s\n;;                       \\S :spade\n;;                       \\H :heart\n;;                       \\D :diamond\n;;                       \\C :club)\n;;               :rank (condp = r\n;;                       \\A 12\n;;                       \\K 11\n;;                       \\Q 10\n;;                       \\J 9\n;;                       \\T 8\n;;                       (- (Integer. (str r)) 2))))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 128, "code": "(fn [[s r]]\n    {:suit ({\\D :diamond \\H :heart \\C :club \\S :spades} s) \n     :rank (.indexOf \"23456789TJQKA\" (int r))})", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 128, "code": "(fn [x]\n  (let [m {'D :diamond 'C :club 'S :spade 'H :heart}\n         l ((fn [v]\n              (reduce\n               (fn [ha item]\n                 (assoc ha (symbol item) (str (count ha))))\n               {} v) ) (list \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"T\" \"J\" \"Q\" \"K\" \"A\")) ]\n    (hash-map :suit ((symbol (str (nth x 0))) m)  :rank (Integer/parseInt ((symbol (str (nth x 1))) l)))))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 128, "code": "(fn c [st]\n  (let [suit (first st)\n        value (second st)\n        dict {\\A 12, \\K 11, \\Q 10, \\J 9, \\T 8, \\D :diamond, \\S :spade, \\H :heart, \\C :club}\n        v (dict value)]\n    {:suit (dict suit) :rank (if (nil? v) (- (int value) 50) v)}\n    )\n  )", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 128, "code": "(fn mycard2 [v]\n  (let\n   [map-card {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4\n              \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n    map-suit {\"D\" :diamond \"S\" :spades\n              \"H\" :heart \"C\" :club}]\n    {:suit (map-suit (str (first v)))\n     :rank (map-card (str (second v)))}))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 128, "code": "(fn [st]\n  (let [suits {\"H\" :heart \"D\" :diamond \"C\" :club \"S\" :spade}\n        ranks {\"2\" 0 \"3\" 1 \"4\" 2 \"5\" 3 \"6\" 4 \"7\" 5 \"8\" 6 \"9\" 7 \"T\" 8 \"J\" 9 \"Q\" 10 \"K\" 11 \"A\" 12}\n        seq-of-st (map str (seq st))\n        \n        ]\n  \n    ; \n    \n    {:suit (get suits (first seq-of-st)) :rank (get ranks (second seq-of-st))}\n    ) ; let end\n  ); fn", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 128, "code": "(fn [[suite rank]]\n                    {:suit\n                     (case suite\n                       \\D :diamond\n                       \\H :heart\n                       \\C :club\n                       \\S :spade)\n                     :rank\n                     (case rank\n                       \\2 0\n                       \\3 1\n                       \\4 2\n                       \\5 3\n                       \\6 4\n                       \\7 5\n                       \\8 6\n                       \\9 7\n                       \\T 8\n                       \\J 9\n                       \\Q 10\n                       \\K 11\n                       \\A 12)})", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 128, "code": "#(let [s (first %1)\n        r (last %1)\n        suit (cond (= s \\D) :diamond\n                   (= s \\S) :spade\n                   (= s \\C) :club\n                   (= s \\H) :heart)\n        rank (cond (= r \\A) 12\n                   (= r \\K) 11\n                   (= r \\Q) 10\n                   (= r \\J) 9\n                   (= r \\T) 8\n                   :else (- (int r) 50))]\n    {:suit suit :rank rank})", "user": "4eb47bb1535d7eef30807362"}, {"problem": 128, "code": "(fn [card-str]\n  (let [suit-map #(case % \\H :heart \\D :diamond \\C :club \\S :spade)\n        rank-map #(case % \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12)\n        ]\n    {:suit (suit-map (first card-str))\n    :rank (rank-map (second card-str))\n    }\n    )\n  )", "user": "6004c750e4b074f607df6645"}, {"problem": 128, "code": "(fn playing-card\n  [[suit value]]\n  {:suit (condp = suit\n           \\C :club\n           \\D :diamond\n           \\H :heart\n           \\S :spade)\n   :rank (condp = value\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           (- (int value) 50))})", "user": "5f37263de4b0574c87022c4e"}, {"problem": 128, "code": "(fn poke [s]\n  (let [suit-map {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rank-map {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5,\n                  \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (suit-map (first s)), :rank (rank-map (last s))}\n  ))", "user": "6001460ce4b074f607df6611"}, {"problem": 128, "code": "(fn [s]\n    (let [suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n          rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7\n                \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n        {:suit (suit (first s)) :rank (rank (last s))}))", "user": "600ae927e4b074f607df6689"}, {"problem": 128, "code": "(fn f\n  [s]\n  (let\n   [suits {\\S :spade, \\H :heart,\\D :diamond,\\C :club}\n    ranks \"23456789TJQKA\"\n    sstr (first s)\n    rstr (second s)]\n    {:suit (suits sstr), :rank (count (take-while #(not= % rstr) (seq ranks)))}))", "user": "5da7176ae4b000c986472c13"}, {"problem": 128, "code": "(fn cards [string]\n  (let [suits {\"D\" :diamond\n               \"H\" :heart\n               \"C\" :club\n               \"S\" :spade}\n        ranks {\"2\" 0\n               \"3\" 1\n               \"4\" 2\n               \"5\" 3\n               \"6\" 4\n               \"7\" 5\n               \"8\" 6\n               \"9\" 7\n               \"T\" 8\n               \"J\" 9\n               \"Q\" 10\n               \"K\" 11\n               \"A\" 12}\n        suit (first string)\n        rank (second string)]\n    {:suit (get suits (str suit))\n     :rank (get ranks (str rank))}))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 128, "code": "(fn recognize-card [name] ;; idea: call maps as \"parser\"\n  (let [suits {\\C :club \\D :diamond \\H :heart \\S :spades}\n        ranks (zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A]\n                      (range 13))]\n    {:suit (suits (first name))\n     :rank (ranks (second name))}))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 128, "code": "(fn string->playing-card [string]\n  {:suit (let [suit-c (first string)]\n           (cond\n             (= suit-c \\C) :club\n             (= suit-c \\H) :heart\n             (= suit-c \\S) :spade\n             (= suit-c \\D) :diamond))\n   :rank (let [rank-c (second string)]\n           (cond\n             (= rank-c \\2) 0\n             (= rank-c \\3) 1\n             (= rank-c \\4) 2\n             (= rank-c \\5) 3\n             (= rank-c \\6) 4\n             (= rank-c \\7) 5\n             (= rank-c \\8) 6\n             (= rank-c \\9) 7\n             (= rank-c \\T) 8\n             (= rank-c \\J) 9\n             (= rank-c \\Q) 10\n             (= rank-c \\K) 11\n             (= rank-c \\A) 12))})", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 128, "code": "(fn [s] \n  (let [mapa (zipmap (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\" \"S\" \"H\" \"D\" \"C\"])\n                     (concat (range 13) [:spade :heart :diamond :club]))\n        x (->> s\n                (map str)\n                (map mapa))] \n    (zipmap [:suit :rank] x)))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 128, "code": "(fn [s]\n  (conj\n   (case (first s)\n     \\D {:suit :diamond}\n     \\H {:suit :heart}\n     \\S {:suit :spade}\n     \\C {:suit :club})\n   (let [rank (last s)]\n     (case rank\n       \\T {:rank 8}\n       \\J {:rank 9}\n       \\Q {:rank 10}\n       \\K {:rank 11}\n       \\A {:rank 12}\n       {:rank (- (int rank) (int \\2))}))))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [ranks (zipmap \"23456789TJQKA\" (range)) \n        suits {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}]\n    {:suit (suits s)\n     :rank (ranks r)}))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 128, "code": "#(let [suit (first %)\n       n (second %)]\n   (hash-map\n    :suit (case suit\n           \\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club)\n    :rank (case n\n            \\T 8\n            \\J 9\n            \\Q 10\n            \\K 11\n            \\A 12\n            (- (int n) (int \\2)))))", "user": "60096aabe4b074f607df667f"}, {"problem": 128, "code": "(fn [[f s]] (hash-map :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} f) :rank (.indexOf \"23456789TJQKA\" (str s))))", "user": "5f309144e4b0574c87022c23"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (case s\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (case r\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           (- (int r) 50))})", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 128, "code": ";;(fn card [x]\n;;  (let [[suit rank] (seq x)\n;;        suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n;;        ranks (zipmap (apply conj (into []\n;;            (seq (clojure.string/join (range 2 10))))\n;;        [\\T \\J \\Q \\K \\A])\n;;        (range 0 13))\n;;        ]\n;;    {:suit (suits suit) :rank (ranks rank)}))\n\n;; I like how clear and direct austintaylor's solution is:\n(fn [[s r]]\n  { :suit ({\\D :diamond \\H :heart \\C :club \\S :spade} s)\n    :rank (.indexOf (seq \"23456789TJQKA\") r)})", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 128, "code": "(fn [s]\n  (let [slovo (map str s)]\n  (hash-map :suit ((keyword (nth slovo 0)) (hash-map :D :diamond :S :spades :H :heart :C :club))\n            :rank (if (and (number? (read-string (nth slovo 1)))\n                           (> 10 (read-string (nth slovo 1))))\n                               (- (read-string (nth slovo 1)) 2)\n                               ((keyword (nth slovo 1))\n                                (hash-map :T 8 :J 9 :Q 10 :K 11 :A 12))))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 128, "code": "(fn [card]\n  (let [suits {\\D :diamond \\H :heart \\C :club \\S :spade}\n        ranks (zipmap \"23456789TJQKA\" (range 13))\n        [s r] (seq card)]\n    {:suit (suits s) :rank (ranks r)}))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [playing-cards {:suits {\\S :spade\n                               \\H :heart\n                               \\D :diamond\n                               \\C :club}\n                       :rank (into\n                               {\\T 8\n                                \\J 9\n                                \\Q 10\n                                \\K 11\n                                \\A 12}\n                               (map (fn [e1 e2] [(char e1) e2])\n                                    (range 50 58) (range 0 8)))}]\n    {:suit (get (playing-cards :suits) suit)\n     :rank (get (playing-cards :rank) rank)}))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 128, "code": "(fn decs [string]\n  (let [mapRank (zipmap \n                    (concat (map str (range 2 10)) '(\"T\" \"J\" \"Q\" \"K\" \"A\"))\n                    (range 0 13)\n                    )\n        mapSuit {\"D\" :diamond, \"C\" :club,  \"H\" :heart, \"S\"  :spade}\n        ]\n      \n        {:suit (mapSuit (-> string first str)) \n          :rank (mapRank (-> string second str))}\n        ))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 128, "code": ";(fn pc-map [s]\n;  {\n;    :suit\n;      (case (get s 0)\n;        \\D :diamond\n;        \\H :heart\n;        \\C :club\n;        \\S :spade\n;      )\n;    :rank\n;      (let [ch (get s 1)\n;            v (- (int ch) 48)]\n;        (cond \n;          (and (>= v 2) (<= v 9)) (- v 2)\n;          (= ch \\T) 8\n;          (= ch \\J) 9\n;          (= ch \\Q) 10\n;          (= ch \\K) 11\n;          (= ch \\A) 12\n;        )\n;      )\n;  }\n;)\n\n(fn [[s r]]\n  {:suit (condp = s\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (condp = r\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           (- (int r) 50))})", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 128, "code": "(fn [card]\n    {:suit (case (first card)\n             \\D :diamond\n             \\H :heart\n             \\S :spade\n             \\C :club\n             )\n     :rank (case (second card)\n             \\T 8\n             \\J 9\n             \\Q 10\n             \\K 11\n             \\A 12\n             (- (Integer/parseInt (str (second card))) 2))})", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 128, "code": "(let\n  [suits {\\H :heart \\D :diamond \\C :club \\S :spade}\n   ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n   ]\n  (fn [x]\n    {:suit (suits (first x)) :rank (ranks (second x))}))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 128, "code": "(fn [[s r]]\n  (letfn [(suit [st]\n            (case st\n              \\D :diamond \\H :heart \\C :club \\S :spade))\n          (rank [rk]\n            (case rk\n              \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 (-  (read-string (str rk)) 2)))]\n    {:suit (suit s) :rank (rank r)}))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 128, "code": "(fn [string]\n  (let [suit-map {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n    \trank-map (assoc (zipmap (vec \"23456789\") (range))\n               \t\t\t\\T 8, \\J 9, \\Q 10, \\K 11, \\A 12)]\n    {:suit (suit-map (first string)),\n     :rank (rank-map (last string))}))", "user": "60460824e4b02d28681c77bc"}, {"problem": 128, "code": "(fn carder [s] (merge (assoc {} :suit ((hash-map \\C :club, \\H :heart, \\D :diamond, \\S :spade) (first s))) (assoc {} :rank ((hash-map \\A 12, \\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11) (second s)))))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 128, "code": "(let [suit {\\D :diamond \\S :spade \\H :heart \\C :club}\n      rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\A 12 \\Q 10 \\J 9 \\K 11}]\n    (fn [x]\n      {:suit (get suit (first x)) :rank (get rank (second x))}))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 128, "code": "#(let\n  [suites\n   {\\S :spade\n    \\H :heart\n    \\D :diamond\n    \\C :club}\n   ranks (merge\n          {\\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12}\n          (into {} (map (fn [x] [(first (str x)) (- x 2)]) (range 2 10))))]\n   {:suit (suites (first %)) :rank (ranks (last %))})", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 128, "code": "(fn ->card\n  [s]\n  (let [rank-map (zipmap (map str (seq \"23456789TJQKA\"))\n                         (range 13))\n        suit-map (zipmap [\"S\" \"H\" \"D\" \"C\"] [:spade :heart :diamond :club])\n        card (fn [coll]\n               (let [[c r] coll]\n                 (hash-map :suit (get suit-map c) :rank (get rank-map r))))]\n    (->> (map str (seq s))\n         card)))", "user": "4e586949535d8a8b8723a292"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (case s\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (.indexOf \"23456789TJQKA\" (str r))})", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 128, "code": "(fn __ [a]\n  {:suit (case (first a)\n           \\S :spade\n           \\H :heart\n           \\D :diamond\n           \\C :club)\n   :rank (case (second a)\n           \\2 0\n           \\3 1\n           \\4 2\n           \\5 3\n           \\6 4\n           \\7 5\n           \\8 6\n           \\9 7\n           \\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12)})", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 128, "code": "(fn\n  [[suit rank]]\n  (let [mappings {\\S :spade, \\D :diamond \\C :club, \\H :heart}\n        ordering '(\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A)]\n\n    {:suit (get mappings suit) :rank (.indexOf ordering rank)}\n    )\n  )", "user": "6059d824e4b07e92fa001acf"}, {"problem": 128, "code": "(fn cards \n  [card-symbol]\n  (let [higher-map {\\T 8, \\J, 9, \\Q 10, \\K 11, \\A 12}\n        lower-map (fn [s] (- (Character/digit s 10) 2))\n        second-symbol (second card-symbol)\n        suit ({\\S :spade, \\H :heart, \\D :diamond, \\C :club} (first card-symbol))\n        rank (if (Character/isDigit second-symbol) (lower-map second-symbol)\n                 (higher-map second-symbol))]\n    {:suit suit, :rank rank}))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 128, "code": "(fn \n  [[suit rank]]\n\n  (let [suits (zipmap \"SDHC\" [:spade :diamond :heart :club])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (get suits suit) :rank (get ranks (str rank))}\n))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 128, "code": "(fn rec_card \n  [[suit rank]]\n  \n  (let [suits (zipmap \"SDHC\" [:spade :diamond :heart :club])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (get suits suit) :rank (get ranks (str rank))}\n    ))", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 128, "code": "(fn playing-cards\n  [[suit rank]]\n  {:suit ({\\S :spades \\H :heart \\D :diamond \\C :club} suit)\n   :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank (- (int rank) 50))})", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 128, "code": "(fn [[suit rank]]\n   {:suit ({\\D :diamond\n            \\S :spade\n            \\H :heart\n            \\C :club} suit)\n    :rank (.indexOf \"23456789TJQKA\" (str rank))\n           })", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 128, "code": "(fn [s] (\n         let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n              rank {\\2 0, \\3 1 ,\\4 2 ,\\5 3 ,\\6 4 ,\\7 5 ,\\8 6 ,\\9 7 ,\\T 8 ,\\J 9 ,\\Q 10 ,\\K 11 ,\\A 12}\n              ]\n         \n              {:suit (suits (first s)),:rank (rank (second s))}\n              \n         ))", "user": "60471241e4b02d28681c77c9"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [n-suit (get '{\\D :diamond \\H :heart \\C :club \\S :spade} suit)\n        n-rank (get '{\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank)]\n       (hash-map :suit n-suit :rank n-rank)))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 128, "code": "(fn parse-card [s]\n  (let [suit (first s)\n        val (second s)]\n    {:suit ({\\D :diamond \\S :spade \\C :club \\H :heart} suit)\n     :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} val)}))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 128, "code": "(fn playing-cards [[s r]]\n  (let [suit {\\D :diamond \\H :heart \\C :club \\S :spades}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n\n    {:suit (suit s) :rank (rank r)}\n    )\n  )", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 128, "code": "(fn [c] {:suit ({\\S :spade\n                 \\C :club\n                 \\H :heart\n                 \\D :diamond} \n                    (first c))\n         :rank ((zipmap \"23456789TJQKA\" (range)) \n                (second c))\n  })\n\n\n;;; zipmap ---> Returns a map with the keys mapped to the corresponding vals.", "user": "6075c214e4b069485764de5b"}, {"problem": 128, "code": "(fn solve [s]\n  {:suit (get {\\D :diamond\n               \\H :heart\n               \\C :club\n               \\S :spade}\n              (first s))\n   :rank (get {\\2 0 \\3 1 \\4 2 \\5 3\n               \\6 4 \\7 5 \\8 6 \\9 7\n               \\T 8 \\J 9 \\Q 10\n               \\K 11 \\A 12}\n              (second s))})", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "60764350e4b069485764de5e"}, {"problem": 128, "code": "(fn [[a b]]\n  (let [suit {\\S :spade \\H :heart \\D :diamond \\C :club}\n        rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get suit a) :rank (get rank b)}))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 128, "code": "(fn [arg] \n  {:suit (cond\n          (= \\D (first arg)) :diamond\n          (= \\H (first arg)) :heart\n          (= \\S (first arg)) :spade\n          :else :club)\n  :rank ({\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12} (last arg))\n  })", "user": "6074df6fe4b069485764de4b"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "60777335e4b0a637ed78034f"}, {"problem": 128, "code": "(fn\n    [s]\n    (let [t {\\H :heart \\C :club \\D :diamond \\S :spades}\n          r {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n        {:suit (t (first s)) :rank (r (second s))}\n        )\n    )", "user": "6074f5ede4b069485764de52"}, {"problem": 128, "code": "#(let [suits {\\S :spade, \\H :heart, \\D :diamond, \\C :club}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}]\n    {:suit (suits (first %)), :rank (ranks (last %))})", "user": "6074e088e4b069485764de4d"}, {"problem": 128, "code": "(fn [[s r]]\n    { :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n      :rank ((zipmap \"23456789TJQKA\" (range)) r) })", "user": "6074dfa4e4b069485764de4c"}, {"problem": 128, "code": "(fn pokerCards [s]\n  {:suit ({\\S :spades \\D :diamond \\H :heart \\C :club}\n          (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11  \\A 12}\n          (second s))})", "user": "6074e1e4e4b069485764de4f"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 128, "code": "(fn cards[n]\n  {:suit ({\\S :spades\n              \\D :diamond \n              \\H :heart \n              \\C :club}\n          (first n))\n  :rank ({\\2 0 \n             \\3 1 \n             \\4 2 \n             \\5 3 \n             \\6 4 \n             \\7 5 \n             \\8 6 \n             \\9 7 \n             \\T 8 \n             \\J 9 \n             \\Q 10 \n             \\K 11  \n             \\A 12}\n             (second n))})", "user": "6085edade4b0736b099e42fc"}, {"problem": 128, "code": "(fn RecognizePlayingCards [car] \n  (let [suit {\\D :diamond, \\H :heart, \\S :spade, \\C :club}\n        rank { \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        x (first car)\n        y (second car)\n        ]\n    {:suit (suit x), :rank (rank y)}))", "user": "607508f3e4b069485764de54"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "608828dee4b0ae75613dcee1"}, {"problem": 128, "code": "(fn [card](let [suit {\\S :spades \\D :diamond \\H :heart \\C :club}\n                rank {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11  \\A 12}]\n            \n  \t\t\t\t{:suit (get suit (first card)) :rank (get rank (second card))}))", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 128, "code": "(fn [[s r]]\n (assoc {} :suit ({\\S :spade \\H :heart \\D :diamond \\C :club} s)\n  :rank ({\\A 12 \\K 11 \\Q 10 \\J 9 \\T 8} r (- (int r) (int \\2)))))", "user": "6074e1ade4b069485764de4e"}, {"problem": 128, "code": "(fn [x]\n  (let [palo {\\H :heart, \\C :club, \\D :diamond, \\S :spades}\n        rango {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        ]\n    {:suit (palo (first x)), :rank (rango (last x))}\n  ))", "user": "607f3336e4b05857a65e7747"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (let [suits {\"S\" :spade ,\"H\" :heart ,\"D\" :diamond ,\"C\"  :club}\n        ranks {\"2\" 0, \"3\" 1, \"4\" 2, \"5\" 3, \"6\" 4, \"7\" 5, \"8\" 6, \"9\" 7, \"T\" 8, \"J\" 9, \"Q\" 10, \"K\" 11, \"A\" 12}]\n    {:suit (->> suit (str) (suits)) :rank (->> rank (str) (ranks))}\n    )\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 128, "code": "(fn [s]\n  {:suit ({\\S :spades \\H :heart \\D :diamond \\C :club}\n          (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11  \\A 12}\n          (second s))})", "user": "6074e278e4b069485764de51"}, {"problem": 128, "code": "#(zipmap [:suit :rank] (vector \n  ((zipmap [\\D \\H \\C \\S] [:diamond :heart :club :spade]) (first %))\n  ((zipmap [\\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 \\T \\J \\Q \\K \\A] (range)) (second %))))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 128, "code": "(fn recognize\n  [card-string]\n  (let [suits {\\H :heart\n               \\D :diamond\n               \\S :spade\n               \\C :club}\n        ranks (merge (zipmap (seq (apply str (range 2 10)))\n                             (range 8))\n                     {\\T 8 \n                      \\J 9\n                      \\Q 10\n                      \\K 11\n                      \\A 12})\n        card-seq (seq card-string)\n        suit-char (first card-seq)\n        rank-char (second card-seq)]\n    {:suit (suits suit-char)\n     :rank (ranks rank-char)}))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 128, "code": "(fn [strng] \n  (hash-map :suit\n    (get {\"D\" :diamond \"H\" :heart \"C\" :club \"S\" :spade} (str (first (seq strng))))\n    :rank\n    (get {\n    \"2\" 0 \n    \"3\" 1\n    \"4\" 2 \n    \"5\" 3 \n    \"6\" 4 \n    \"7\" 5 \n    \"8\" 6 \n    \"9\" 7 \n    \"T\" 8 \n    \"J\" 9\n    \"Q\" 10 \n    \"K\" 11 \n    \"A\" 12} (str (second (seq strng))))))", "user": "5e7fb908e4b085ba37836e3f"}, {"problem": 128, "code": "(fn [[suit rank]]\n  (assoc (assoc {} :suit \n      \t\t(case suit\n        \t\t\\S :spade \\H :heart \\C :club \\D :diamond))\n      :rank\n      (cond \n       (= rank \\T) 8\n       (= rank \\J) 9\n       (= rank \\Q) 10\n       (= rank \\K) 11\n       (= rank \\A) 12\n       :else (- (Integer/parseInt (str rank)) 2))))", "user": "607a1523e4b0a637ed78036a"}, {"problem": 128, "code": "(fn card [[s r]] \n  (let [suits (zipmap (map str \"SHCD\") [:spade :heart :club :diamond])\n        ranks (zipmap (map str (concat (range 2 10) \"TJQKA\")) (range 13))]\n    {:suit (suits (str s)) :rank (ranks (str r))}))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 128, "code": "(fn playing-cards\n  [[suit rank]]\n  {:suit ({\\S :spades \\H :heart \\D :diamond \\C :club} suit)\n   :rank ({\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} rank (- (int rank) 50))})", "user": "605a876be4b000d535e6f53c"}, {"problem": 128, "code": "(fn [s]\n   {:suit ({\\D :diamond, \\H :heart, \\S :spade, \\C :club} (first s))\n    :rank (let [c (second s)]\n            (cond (= c \\A) 12\n                  (= c \\K) 11\n                  (= c \\Q) 10\n                  (= c \\J) 9\n                  (= c \\T) 8\n                  :else (- (int c) (int \\2))))})", "user": "60882700e4b0ae75613dcedf"}, {"problem": 128, "code": "(let [suit (zipmap [\"S\" \"H\" \"D\" \"C\"] [:spade :heart :diamond :club])\n      rank (conj (into [] (range 2 10)) \"T\" \"J\" \"Q\" \"K\" \"A\")]\n  (into {} (for [s (keys suit) r (range 13)] {(str s (rank r)) {:suit (suit s) :rank r}})))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 128, "code": "(fn parse-card\n  [card]\n  (let [[suit rank] card\n        suits {\\D :diamond \\H :heart \\S :spade \\C :club}\n        ranks {\\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get suits suit)\n     :rank (get ranks rank \n                (- (Character/getNumericValue ^Character rank) 2))}))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 128, "code": ";(fn [s]\n;  (let [[suit rank] (re-seq #\"[SHDC]|[TJQKA]|\\d\" s) ;; we could destructure without using re-seq, but arithmetic on chars is ugly\n;        suit-name (case suit\n;                    \"S\" :spade\n;                    \"H\" :heart\n;                    \"D\" :diamond\n;                    \"C\" :club)\n;        rank-value (case rank\n;                     \"T\" 8\n;                     \"J\" 9\n;                     \"Q\" 10\n;                     \"K\" 11\n;                     \"A\" 12\n;                     (- (read-string rank) 2))]\n;    {:suit suit-name :rank rank-value}))\n(fn [[s r]]\n  (let [suit ({\\S :space\n               \\H :heart\n               \\D :diamond\n               \\C :club} s)\n        rank ((zipmap \"23456789TJQKA\" (range)) r)]\n    {:suit suit :rank rank}))", "user": "60794173e4b0a637ed78035d"}, {"problem": 128, "code": "(fn [string]\n  (let [f (first string) s (second string)]\n    (assoc {} :suit (case f\n                      \\D :diamond\n                      \\H :heart\n                      \\C :club\n                      \\S :spade)\n      \t\t\t:rank (case s\n                        \\2 0\n                        \\3 1\n                        \\4 2\n                        \\5 3\n                        \\6 4\n                        \\7 5\n                        \\8 6\n                        \\9 7\n                        \\T 8\n                        \\J 9\n                        \\Q 10\n                        \\K 11\n                        \\A 12))))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 128, "code": "#(let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks {\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}]\n    {:suit (get suits (first %)) :rank (get ranks (second %))})", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 128, "code": "(fn [x] {:suit ({\\D :diamond \\H :heart \\C :club \\S :spade} (first x))\n         :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12} (second x))})", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 128, "code": "(fn [stri]\n  (let [mr {:J 9 :Q 10 :K 11 :A 12 :T 8}\n        mc {:D :diamond :H :heart :C :club :S :spade}\n        rank (-> stri\n                 (vec)\n                 (second))\n        color (->> stri\n                   (vec)\n                   (first)\n                   (str)\n                   (keyword)\n                   )\n        ]\n    (if (nil? (re-seq #\"\\d\" stri)) \n      (hash-map :suit (color mc) :rank (mr (keyword (str rank))))\n      (hash-map :suit (color mc) :rank (- (int rank) 50)))))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 128, "code": "(fn [given] (hash-map :suit (get {\\D :diamond \\H :heart \\S :spade \\C :club} (get given 0)) :rank (get {\\A 12 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11} (get given 1))))", "user": "60b8f098e4b0e0fa5f1b425f"}, {"problem": 128, "code": "(fn cardRepresentation [s]\n  {:suit ({\\D :diamond \\H :heart \\S :spade \\C :club} (first s))\n   :rank ({\\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12}\n          (second s))})", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 128, "code": "(fn [k]\n  (let [suites {\\D :diamond, \\H :heart, \\S :spade, \\C :club}\n        ranks {\\2 0, \\3 1, \\4 2, \\5 3, \\6 4, \\7 5, \\8 6, \\9 7, \\T 8, \\J 9, \\Q 10, \\K 11, \\A 12}\n        [s r & rst] k]\n    {:suit (get suites s) :rank (get ranks r)}))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 128, "code": "(fn [x]\n  (let [s {\\H :heart\n           \\D :diamond\n           \\C :club\n           \\S :spade}\n        r {\\T 8\n           \\J 9\n           \\Q 10\n           \\K 11\n           \\A 12}\n        [t l] x]\n    (-> {}\n        (assoc :suit (get s t))\n        (assoc :rank (or (get r l)\n                         (- (Character/digit l 10) 2))))))", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 128, "code": "(fn\n  card-details\n  [[suit & rank]]\n  (let [suits {\"S\" :spade\n              \"H\" :heart\n              \"C\" :club\n              \"D\" :diamond}\n        ranks (zipmap (concat (map str (range 2 10)) [\"T\" \"J\" \"Q\" \"K\" \"A\"]) (range 0 13))]\n    {:suit (suits (str suit))\n     :rank (ranks (apply str rank))}))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 128, "code": "(fn [[s r]]\n  (let [suits {\\S :spade \\H :heart \\D :diamond \\C :club}\n        ranks (zipmap \"23456789TJQKA\" (range))]\n    {:suit (suits s) :rank (ranks r)}))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 128, "code": "(fn decode-card[card]\n  (let [decoder {\\S :club \\D :diamond \\H :heart \\C :club\n                 \\2 0 \\3 1 \\4 2 \\5 3 \\6 4 \\7 5 \\8 6 \\9 7 \\T 8 \\J 9 \\Q 10 \\K 11 \\A 12 }]\n    (apply hash-map\n           (interleave '(:suit :rank)\n                       (map decoder card)))))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 128, "code": "(fn [[s r]]\n  {:suit (case s\n           \\D :diamond\n           \\H :heart\n           \\C :club\n           \\S :spade)\n   :rank (case r\n           \\A 12\n           \\K 11\n           \\Q 10\n           \\J 9\n           \\T 8\n           (- (int r) 50))})", "user": "5aba04dce4b073f17744269e"}]