[{"code": "(fn [f & args]\r\n  ((fn [f] (if (fn? f) (recur (f)) f)) (apply f args)))", "problem": 78, "user": "4dc1ee85535d020aff1edf91"}, {"code": "(fn k-tramp [f & args]\r\n    (let [fun (fn temp [] (lazy-cat (vector (apply f args)) (map #(%) (temp))))]\r\n\t\t(first (filter #(not (fn? %)) (fun)))))", "problem": 78, "user": "4dae4da5c9a9d6ed4e99dc57"}, {"code": "(fn [f v] (first (drop-while fn? (iterate #(%) (f v)))))", "problem": 78, "user": "4dad8fe9c9a9d6ed1899dc57"}, {"code": "#(loop [a (% %2)]\r\n    (if-not (fn? a)\r\n      a\r\n      (recur (a))))", "problem": 78, "user": "4dcd818e535d5973398f929d"}, {"code": "#((fn r [%]\r\n    (if (fn? %) (r (%)) %))\r\n  (% %2))", "problem": 78, "user": "4dce6e41535d5973398f92a2"}, {"code": "(fn [f arg]\r\n  (loop [g (f arg)]\r\n    (if (fn? g)\r\n        (recur (g))\r\n        g)))", "problem": 78, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn t ([f]\r\n     (let [r (f)]\r\n       (if (fn? r)\r\n         (recur r)\r\n         r)))\r\n  ([f & a]\r\n     (t #(apply f a))))", "problem": 78, "user": "4dc986d0535d5973398f9285"}, {"code": "(fn [f & args]\r\n  (let [f-result (apply f args)]\r\n\t\t(if (fn? f-result)\r\n\t\t\t(recur f-result nil)\r\n\t\t\tf-result)))", "problem": 78, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn tramp\r\n  ([f]\r\n     (let [ret (f)]\r\n       (if (fn? ret)\r\n         (recur ret)\r\n         ret)))\r\n  ([f & args]\r\n     (tramp #(apply f args))))", "problem": 78, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn [f & args]\r\n    (loop [rfunc (apply f args)]\r\n      (if (fn? rfunc)\r\n        (recur (rfunc))\r\n        rfunc)))", "problem": 78, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn [f & args]\r\n        (loop [f (apply f args)]\r\n          (if (fn? f)\r\n            (recur (f))\r\n            f)))", "problem": 78, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn [& lst]\r\n  (loop [r (apply (first lst) (rest lst))]\r\n    (if (fn? r)\r\n      (recur (r))\r\n      r)))", "problem": 78, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn tramp [f & args]\r\n  (loop [current (apply f args)]\r\n    (if (fn? current)\r\n      (recur (current))\r\n      current)))", "problem": 78, "user": "4ddc1c89535d02782fcbea01"}, {"code": "(fn my-trampoline\r\n            ([function & args] (my-trampoline (apply function args)))\r\n            ([result]\r\n                (if (fn? result)\r\n                    (my-trampoline (result))\r\n                    result)))", "problem": 78, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "(fn [f & args]\r\n  (loop [r (apply f args)] (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "#(loop [r (apply %1 %&)]\r\n    (if (fn? r)\r\n      (recur (r))\r\n      r))", "problem": 78, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn [f & xs]\r\n        (loop [f2 (apply f xs)]\r\n                    (if (fn? f2)\r\n                      (recur (f2))\r\n                      f2)))", "problem": 78, "user": "4deb529a535d08e6dec9fe04"}, {"code": "(letfn [\r\n  (mytrampoline\r\n    ([f]\r\n        (if (fn? f) (recur (f)) f))\r\n    ([f & args]\r\n        (mytrampoline (apply f args)))\r\n  )]\r\n mytrampoline\r\n)", "problem": 78, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn r[f & a]\r\n  (if (fn? f)\r\n(r (apply f a))\r\nf\r\n))", "problem": 78, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "(fn [f & args]\r\n  (loop [result (apply f args)]\r\n    (if (fn? result)\r\n      (recur (result))\r\n      result)))", "problem": 78, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "(fn tramp \r\n  ([f & args] (if (not (fn? f)) f (recur (apply f args) '()))))", "problem": 78, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "#(if (fn? %)\n  (recur (apply % %&) ())\n  %)", "problem": 78, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn [f & args]\r\n   (let [ret (apply f args)]\r\n     (loop [f ret]\r\n       (if (fn? f)\r\n         (recur (f))\r\n         f))\r\n   ))", "problem": 78, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "(fn [f & args]\r\n  (loop [result (apply f args)]\r\n    (if (fn? result)\r\n      (recur (result))\r\n      result)))", "problem": 78, "user": "4e02bee8535d04ed9115e791"}, {"code": "#(loop [a (% %2)]\r\n    (if-not (fn? a)\r\n      a\r\n      (recur (a))))", "problem": 78, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "(fn t\r\n  ([f & v] (t (apply f v)))\r\n  ([f] (if (fn? f) (t (f)) f)))", "problem": 78, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn tramp\r\n  ([fun]\r\n     (let [ret (fun)]\r\n       (if (fn? ret)\r\n         (tramp ret)\r\n         ret)))\r\n  ([fun & args]\r\n     (tramp #(apply fun args)))\r\n)", "problem": 78, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn [f & args]\r\n  (letfn [\r\n    (x [f]\r\n      (let [\r\n        r (f)]\r\n        (if (fn? r)\r\n          (x r)\r\n           r)))]\r\n      (x #(apply f args))))", "problem": 78, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn mytramp [f & x]\r\n  (loop [g (apply f x)]\r\n    (if (instance? clojure.lang.IFn g) (recur (g)) g)))", "problem": 78, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn tr [initf & ps]\n  (loop [f (apply initf ps)] \n    (if (fn? f)\n      (recur (f)) \n      f)))", "problem": 78, "user": "4e123905535d04ed9115e7ce"}, {"code": "(fn new-trampoline (\n  [f arg]\n  (let [result (f arg)]\n    (if (fn? result)\n      (new-trampoline result) result)))\n  ([f]\n    (if (fn? (f))\n      (recur (f)) (f))))", "problem": 78, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn _\r\n  ([f]\r\n      (if (fn? (f))\r\n        (recur (f))\r\n        (f)))\r\n  ([f & args]\r\n    (_ #(apply f args))))", "problem": 78, "user": "4db599e6535d87e67b28fe11"}, {"code": "(new clojure.core$trampoline)", "problem": 78, "user": "4e3b6bff535deb9a81d77f52"}, {"code": "(fn my-trampoline\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (my-trampoline #(apply f args))))", "problem": 78, "user": "4e39fb68535deb9a81d77f47"}, {"code": "(fn hoge\n  ([f]\n    (let [ret (f)]\n      (if (fn? ret)\n        (recur ret)\n         ret)))\n  ([f & args]\n    (hoge #(apply f args))))", "problem": 78, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "(fn [f & args]\n  (let [r (apply f args)]\n    (loop [r r]\n      (if (fn? r)\n        (recur (r))\n        r))))", "problem": 78, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn t\n  ([f]\n     (let [v (f)]\n       (if (fn? v)\n         (recur v)\n         v)))\n  ([f & a]\n     (t #(apply f a))))", "problem": 78, "user": "4e52d815535d302ef430da77"}, {"code": "(fn [f & a]\n  (loop [f (apply f a)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "problem": 78, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "(fn my-trampoline\n  [f & params]\n  (loop [r (apply f params)]\n    (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "4e50b67b535dc968683fc4ed"}, {"code": "#(loop [r (% %2)]\n   (if (fn? r) (recur (r)) r))", "problem": 78, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x)\n      (recur (x))\n      x)))", "problem": 78, "user": "4e4ad154535dc968683fc4d1"}, {"code": "(fn tramp [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn[fnc arg]\n  (letfn [(my-trampoline\n           ([fnc arg & args]\n             (let [val (apply fnc (cons arg args))]\n               (if (ifn? val)\n                 (my-trampoline val)\n                 val)))\n           ([fnc]\n             (let [val (fnc)]\n               (if (ifn? val)\n                 (recur val)\n                  val))))]\n  (my-trampoline fnc arg)))", "problem": 78, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "(fn [fun & args]\r\n    (loop [res (apply fun args)]\r\n      (if (ifn? res)\r\n        (recur (res))\r\n        res)))", "problem": 78, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "(fn trampoline*\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (trampoline* #(apply f args))))", "problem": 78, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "(fn trmp [f & args]\n  (let [res (apply f args)]\n    (if (fn? res)\n      (trmp res)\n      res)))", "problem": 78, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "(fn [f & a]\n  (loop [v (apply f a)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "problem": 78, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn trampo\n  [x & args]\n  (if (fn? x)\n    (trampo (apply x args))\n    x))", "problem": 78, "user": "4db58ccb535d87e67b28fe10"}, {"code": "(fn my-trampoline [f initial]\n        (loop [f #(f initial)]\n          (let [result (f)]\n            (if (fn? result)\n              (recur result)\n              result))))", "problem": 78, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn trampoline* [f & args]\n  (cond\n   (seq args) (trampoline* (apply f args))\n   (fn? f) (trampoline* (f))\n   :else f))", "problem": 78, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(comp #(if (fn? %) (recur (%)) %) #(apply %1 %&))", "problem": 78, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn a [f & x]\n  (let [b (apply f x)]\n    (if (ifn? b)\n      (a b)\n      b\n    )\n  )\n)", "problem": 78, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn [f v]\n  (loop [r (f v)]\n    (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn tr [f & args]\n  (if (fn? f) (recur (apply f args) []) f) \n)", "problem": 78, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn [f & s]\n  (#(if (ifn? %) (recur (%)) %) (apply f s)))", "problem": 78, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v) (recur (v)) v)))", "problem": 78, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn [f & args]\n  (loop [f #(apply f args)]\n    (let [x (f)]\n      (if (fn? x) (recur x) x))))", "problem": 78, "user": "4db1bfe21254ad5b4805fa71"}, {"code": "(fn trampoline-\n  ([f & args]\n     (if (fn? f)\n       (trampoline- (apply f args))\n       f))\n  ([f]\n     (if (fn? f)\n       (recur (f))\n       f)))", "problem": 78, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn my-trampoline\n  [f & args]\n  (first\n    (drop-while\n      fn?\n      (iterate #(if (fn? %) (%) %) (apply f args)))))", "problem": 78, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn [f & as]\n  (loop [r (apply f as)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn tramp [f & args]\n      (loop [ fun (apply f args)]\n\t       (if (not (fn? fun)) fun\n\t\t   (recur (fun)))))", "problem": 78, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [& args]\n                                   (loop [function-candidate (apply (first args) (rest args))]\n                                     (if (fn? function-candidate)\n                                       (recur (function-candidate))\n                                       function-candidate)))", "problem": 78, "user": "4e08fb7a535d04ed9115e7ac"}, {"code": "(fn [f arg]\n  (loop [current-fn #(f arg)]\n    (let [ret (current-fn)]\n      (if (fn? ret)\n        (recur ret)\n        ret))))", "problem": 78, "user": "4e7c8fd1535db169f9c796be"}, {"code": "#(loop [x (apply % %&)]\n  (if (ifn? x) (recur (x)) x))", "problem": 78, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn [f & args]\n  (let [call (fn [f]\n    (let [result (f)]\n      (if (fn? result)\n        (recur result)\n        result)))]\n    (call #(apply f args))))", "problem": 78, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "(fn t [f & a] (if (fn? f) (t (apply f a)) f))", "problem": 78, "user": "4e7e55ab535db169f9c79711"}, {"code": "(fn tramp [ f & args ]\n (cond\n  (not (empty? args)) (tramp (apply f args))\n  (ifn? f) (recur (f) '())\n  :else f))", "problem": 78, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn my-trampoline\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (my-trampoline #(apply f args))))", "problem": 78, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn [f & args]\n  (loop [f2 (apply f args)]\n    (if (fn? f2)\n      (recur (f2))\n      f2)))", "problem": 78, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn [f & args]\n  ((fn [res]\n    (if (fn? res)\n      (recur (res))\n      res)) (apply f args)))", "problem": 78, "user": "4e720985535d5021c1a89655"}, {"code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x) (recur (x)) x)))", "problem": 78, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn doit ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (doit #(apply f args))))", "problem": 78, "user": "4e78dc98535db95036265724"}, {"code": "(fn [f & args]\r\n  (loop [res (apply f args)]\r\n     (if (fn? res) (recur (res)) res)))", "problem": 78, "user": "4e8681b7535dae1a5effa438"}, {"code": "#(loop [f (%1 %2)]\n  (if (fn? f)\n    (recur (f))\n    f))", "problem": 78, "user": "4e7e05a6535db169f9c796fe"}, {"code": "(fn [f & args]\n  (loop [g (apply f args)]\n     (if (fn? g)\n         (recur (g))\n         g)))", "problem": 78, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn tramp [f & xs]\n   (let [r (apply f xs)]\n     (if (fn? r) (tramp r) r)))", "problem": 78, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn tramp [f & args]\n  (let [r (if (empty? args) (f) (apply f args))]\n    (if (fn? r) (recur r nil) r)))", "problem": 78, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn tr [f & args]\n  (let [result\n  (if args\n    (apply f args)\n    (f))]\n    (if (fn? result) (tr result) result)))", "problem": 78, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn t [f & x]\r\n  (if (fn? f)\r\n    (t (apply f x))\r\n    f))", "problem": 78, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn tramp\n  ([f]\n    (let [f (f)]\n      (if (fn? f)\n        (recur f)\n        f)))\n  ([f & args]\n    (tramp #(apply f args))))", "problem": 78, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn t\n  ([f] (let [r (f)] \n         (if (fn? r) (recur r) r)))\n  ([f & args] (t #(apply f args))))", "problem": 78, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(fn [f & a]\n    (if (fn? f)\n      (recur (apply f a) nil)\n      f))", "problem": 78, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn tramp\r\n  ([f]\r\n\t\t(if (fn? f)\r\n\t\t\t(tramp (f))\r\n\t\t\tf))\r\n\t([f & args] (tramp (apply f args))))", "problem": 78, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn tr\n  ([f & args]\n     (tr #(apply f args)))\n  ([f] (let [result (f)]\n       (if (fn? result) (recur result) result))))", "problem": 78, "user": "4dcfbc44535d5973398f92a7"}, {"code": "#(if (fn? %)\n     (recur (apply % %&) [])\n     %)", "problem": 78, "user": "4e823ed7535db62dc21a62c7"}, {"code": "(fn [f & a] (let [r (apply f a)] (if (fn? r) (recur r nil) r)))", "problem": 78, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn [f & m]\n  (loop [f (apply f m)]\n    (if (fn? f)\n        (recur (f))\n        f)))", "problem": 78, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn foo \n  ([f] \n    (if (fn? f) (foo (f)) f))\n  ([f & args ] \n    ( foo (apply f args))) )", "problem": 78, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn my-tramp\n  ([f]\n    (let [ret (f)]\n     (if (fn? ret)\n       (my-tramp ret)\n       ret)))\n  ([f & args]\n   (my-tramp #(apply f args))))", "problem": 78, "user": "4e89ddf9535d3e98b8023284"}, {"code": "(fn [ff v] (loop [f (ff v)] (if (fn? f) (recur (f)) f)))", "problem": 78, "user": "4dae916eedd6309eace4d155"}, {"code": "(letfn [(tramp [f] (if (fn? f) (tramp (f)) f))]\n  (fn [p x] (tramp (p x)))\n)", "problem": 78, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn tramp\n  [f & args]\n  (loop [ret (apply f args)]\n    (if (fn? ret)\n      (recur (ret))\n      ret)))", "problem": 78, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn [f & a]\n  (loop [v (apply f a)]\n    (if (fn? v) (recur (v)) v)))", "problem": 78, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn tramp\r\n  ([f]\r\n     (let [ret (f)]\r\n       (if (fn? ret)\r\n         (recur ret)\r\n         ret)))\r\n  ([f & args]\r\n     (tramp #(apply f args))))", "problem": 78, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn [fcn & args]\r\n  (loop [f (apply fcn args)]\r\n    (if (fn? f) (recur (f)) f)))", "problem": 78, "user": "4e994541535dbda64a6f6b64"}, {"code": "(fn [f & a]\n    (loop [v (apply f a)]\n      (if (fn? v)\n        (recur (v))\n        v)))", "problem": 78, "user": "4dbad895535d1e037afb21ae"}, {"code": "#(if (fn? %) (recur (apply % %&) []) %)", "problem": 78, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn [f & args]\n    (loop [result (apply f args)]\n      (if (fn? result) (recur (result))\n          result)))", "problem": 78, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn tra\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tra #(apply f args))))", "problem": 78, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn g [f & r]\n  (if (fn? f) (g (apply f r)) f))", "problem": 78, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn t [f & a]\r\n    (let [r (apply f a)]\r\n\t       (if (fn? r)\r\n\t\t   (t r)\r\n\t\t   r)))", "problem": 78, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn tramp\n  ([f] \n    (let [r (f)]\n      (if (fn? r)\n        (recur r)\n        r)))\n  ([f & args]\n    (tramp #(apply f args))))", "problem": 78, "user": "4e8f4f64535d65386fec2149"}, {"code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "problem": 78, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn [fn & args]\n  (loop [res (apply fn args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn t [f & a]\n  (let [r (apply f a)]\n    (if (fn? r)\n      (t r)\n      r)))", "problem": 78, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn [f & args] (loop [f (apply f args) ] (if (not (fn? f))  f (recur (f)) )))", "problem": 78, "user": "4db92654535d1e037afb21a0"}, {"code": "(fn t\n  ([f]\n    (let [r (f)]\n      (if (fn? r)\n        (recur r)\n        r)))\n  ([f v] (t (fn [] (f v)))))", "problem": 78, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "(fn [f & args] (loop [r (apply f args)] (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "4ebad797535dfed6da9c6d6a"}, {"code": "(fn t ([f] (let [res (f)] (if (fn? res) (t res) res)))\n      ([f & args] (t #(apply f args))))", "problem": 78, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn tr\r\n  ([a]\r\n    (let [x (a)]\r\n      (if (fn? x)\r\n      (recur x)\r\n      x) ))\r\n  ([f & args]\r\n    (tr #(apply f args))))", "problem": 78, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "(fn my-trampoline [f & params]\n  (let [f #(apply f params)]\n    (loop [res (f)]\n      (if (not (fn? res))\n        res\n        (recur (res))))))", "problem": 78, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn my-trampoline\n  ([func & params] (my-trampoline #(apply func params)))\n  ([func]\n    (let [result (func)]\n      (if (fn? result)\n        (recur result)\n        result))))", "problem": 78, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn my-trampoline [f x]\r\n  (loop [res (f x)]\r\n    (if (fn? res)\r\n      (recur (res))\r\n      res)))", "problem": 78, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn tramp [f & params]\n  (if (fn? f) (recur (apply f params) '()) f))", "problem": 78, "user": "4ea0c284535d7eef308072ad"}, {"code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn my-trampoline [f & args]\n  (loop [ret (apply f args)]\n    (if (fn? ret) (recur (ret)) ret)))", "problem": 78, "user": "4ed188c8535d44c135fd68cf"}, {"code": "#(loop [f (% %2)] (if (fn? f) (recur (f)) f))", "problem": 78, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn t\n    ([f a] (t #(f a)))\n    ([f]\n       (let [r (f)]\n         (if (fn? r ) (t r) r))))", "problem": 78, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res) (recur (res)) res)))", "problem": 78, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn b[f & a] \r\n  (if (fn? f) (b (apply f a)) f))", "problem": 78, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn t [f & a]\n  (let [r (apply f a)]\n\t\t(if (fn? r) (t r) r)))", "problem": 78, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [f & args] \n  (loop [r #(apply f args)]\n      (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "#(if (fn? %) (recur (apply % %&) ()) %)", "problem": 78, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [f x] (loop [g (f x)] (if (ifn? g) (recur (g)) g)))", "problem": 78, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(fn p78 ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (p78  #(apply f args))))", "problem": 78, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn my-trampoline [f & args]\n  (let [r (apply f args)]\n    (if (fn? r) (recur r []) r)))", "problem": 78, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn my-trampoline [f & args]\n  ((fn [r]\n     (if (fn? r)\n       (recur (r))\n       r)) (apply f args)))", "problem": 78, "user": "4ec75077535d6d7199dd36e0"}, {"code": "#(let [r (apply % %&)]\n    (if-not (fn? r)\n      r\n      (recur r [])))", "problem": 78, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn t ([f v] (t (f v)))\n        ([f] (if (fn? f)\n              (t (f))\n              f)))", "problem": 78, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn [f & args]\n  (if (fn? f)\n    (recur (apply f args) [])\n    f))", "problem": 78, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn t [f & a]\r\n  (let [x (apply f a)]\r\n    (if (fn? x) \r\n      (t x)\r\n      x)))", "problem": 78, "user": "4ecbb249535df97575fdabdf"}, {"code": "(fn [f & args]\n  (loop [ff (apply f args)]\n    (if (fn? ff)\n      (recur (ff))\n      ff)))", "problem": 78, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn t [a & b]\n  (if (nil? b)\n    (let [r (a)] (if (fn? r) (t r) r)) \n    (t #(apply a b))))", "problem": 78, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn [f & xs]\n  (loop [ret (apply f xs)]\n    (if (fn? ret)\n      (recur (ret))\n      ret)))", "problem": 78, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn [f & xs]\n  (loop [f (apply f xs)]\n    (if (fn? f) (recur (f)) f)))", "problem": 78, "user": "4eb51942535d7eef30807365"}, {"code": "(fn tramp [f & args]\n  (let [res (apply f args)]\n    (if (ifn? res)\n        (recur res [])\n        res)))", "problem": 78, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x) (recur (x)) x)))", "problem": 78, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "(fn [f args]\n  (loop [ret (f args)]\n    (if (fn? ret)\n      (recur (ret))\n      ret)))", "problem": 78, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn t [f & l]\n  (let [a (apply f l)]\n    (if (ifn? a)\n      (t a)\n      a)))", "problem": 78, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn t [f & a] (if (fn? f) (t (apply f a)) f))", "problem": 78, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn t [f & a] (if (fn? f) (t (apply f a)) f))", "problem": 78, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn tpl\r\n  ([f]\r\n    (if (fn? f)\r\n      (tpl (f))\r\n      f))\r\n  ([f & args]\r\n    (tpl (apply f args))))", "problem": 78, "user": "4ee40938535d10e5ff6f5375"}, {"code": "#(loop [r (% %2)]\n     (if (fn? r)\n       (recur (r))\n       r))", "problem": 78, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "(fn [f & args] (if (fn? f) (recur (apply f args) nil) f))", "problem": 78, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn rec\n  ([f v] (rec (f v)))\n  ([f] (if (fn? f) (rec (f)) f)))", "problem": 78, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn tramp [f & args] (if (fn? f) (tramp (apply f args)) f))", "problem": 78, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn T ([f] (if (fn? (f)) (recur (f)) (f))) ([f & a] (T #(apply f a))))", "problem": 78, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "#(let [o (apply % %&)]\n    (loop [r o]\n      (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn t [f & args]\n    (if (fn? f)\n      (t (apply f args))\n      f))", "problem": 78, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n       (recur r nil)\n       r)))", "problem": 78, "user": "4ee7ef87535d93acb0a66872"}, {"code": "#(loop [f (% %2)] (if (fn? f) (recur (f)) f))", "problem": 78, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn trampoline* \n  [f  args]\n  (let [step (fn [f]\n          (if (fn? f) (recur (f)) f))]\n  (step (f args))))", "problem": 78, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn [f & a]\n    (loop [g (apply f a)]\n          (if (fn? g)\n              (recur (g))\n              g) ) )", "problem": 78, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn tramp [f & args]\n  (let [x (apply f args)]\n    (if (fn? x) (recur x []) x)))", "problem": 78, "user": "4edecdae535d10e5ff6f533c"}, {"code": "#(let [g (apply % %&)]\n  (if (fn? g) (recur g []) g))", "problem": 78, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn t ([f] (let [r (f)] (if (ifn? r) (t r) r))) ([f & p] (t #(apply f p))))", "problem": 78, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn my-tramp [f & args]\n        (loop [g f a args]\n          (let [r (apply g a)]\n            (if (not (fn? r))\n              r\n              (recur r ())))))", "problem": 78, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn trampo [f & args]\n  (loop [ret (apply f args)]\n    (if (fn? ret) (recur (ret)) ret)))", "problem": 78, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn t \n  ([f]\n    (if (fn? f)\n      (recur (f))\n      f))\n  ([f & xs]\n    (t (apply f xs))))", "problem": 78, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn tramp [f & params]\n            (let [r (apply f params)]\n                 (if (fn? r) (tramp r) r)))", "problem": 78, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn [f & m] (let [a (apply f m)]\n(loop [x a] (if (fn? x) (recur (x)) x))))", "problem": 78, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn r [func & args] \n  (if (fn? func) (r (apply func args)) func))", "problem": 78, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn g \n  [f & a] (if (fn? f) (g (apply f a)) f))", "problem": 78, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn prob-0078\n  [f & f0-args]\n  (loop [f-or-v (apply f f0-args)]\n    (if (fn? f-or-v)\n      (recur (f-or-v))\n      f-or-v)))", "problem": 78, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x) (recur (x)) x)))", "problem": 78, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn [f & a]\n  (loop [r (apply f a)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn t ([f a] (t (f a)))\n               ([f] (if (fn? f) (t (f)) f)))", "problem": 78, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v) (recur (v))\n      v)))", "problem": 78, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn tramp [f & as]\n  (let [ff (apply f as)]\n    (loop [fff ff]\n      (if-not (fn? fff) fff\n              (recur (fff))))))", "problem": 78, "user": "4ee82ce9535d93acb0a6687a"}, {"code": "(fn t [f & a] (let [r (if a (apply f a) (f))]\n                 (if (fn? r) (t r) r)))", "problem": 78, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn T\n    ([f]\n       (let [r (f)]\n         (if (fn? r) (recur r) r)))\n    ([f & m]\n       (T #(apply f m))))", "problem": 78, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn tramp\n     ([f]\n        (if (fn? f)\n          (tramp (f))\n          f))\n     ([f & args]\n        (tramp #(apply f args))))", "problem": 78, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn my-trampoline [f & args]\r\n    (if (not (fn? f))\r\n      f\r\n      (if (empty? args)\r\n        (my-trampoline (f))\r\n        (my-trampoline (apply f args)))))", "problem": 78, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn [f & args]\n  (let [sf (apply f args)]\n    (loop [ff sf]\n      (if-not (fn? ff)\n        ff\n        (recur (ff))))))", "problem": 78, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn tramp [f & args]\n  (let [res (if (empty? args) (f) (apply f args))]\n       (if (fn? res) (tramp res) res)))", "problem": 78, "user": "4f13047d535d64f60314642c"}, {"code": "(fn t [f & a] \n  (let [r (apply f a)] (if (fn? r) (t r) r)))", "problem": 78, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn t [f & x] (if (fn? f) (t (apply f x)) f))", "problem": 78, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn [f x]\n  (let [g (fn g [y] (if (fn? y) (g (y)) y))\n        u (f x)]\n    (g u)))", "problem": 78, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "#(if (fn? %)\n   (recur (apply % %&) [])\n   %)", "problem": 78, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn [& as]\n  (let [r (apply (first as) (rest as))]\n    (if (fn? r) (recur [r]) r)))", "problem": 78, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn mytramp [f & args]\n    (loop [f (apply f args)]\n        (if-not (fn? f)\n            f\n            (recur (f)))))", "problem": 78, "user": "4f128865535d64f603146428"}, {"code": "#(loop [f (% %2)]\n  (if (fn? f)\n    (recur (f))\n    f))", "problem": 78, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn t [f & a] (let [r (apply f a)] (if (fn? r) (t r) r)))", "problem": 78, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn [& args]\n       (loop [res (apply (first args) (rest args))]\n         (if (fn? res)\n           (recur (apply res '()))\n           res)))", "problem": 78, "user": "4eb02674535d7eef30807338"}, {"code": "(fn [f & a]\n    (if (fn? f)\n      (recur (apply f a) nil)\n      f))", "problem": 78, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn [f & args] \n  (loop [nv (apply f args)] \n    (if (ifn? nv) \n      (recur (nv)) \n      nv)))", "problem": 78, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn my-trimpoline [f a]\r\n  (loop [r (f a)]\r\n    (if (fn? r)\r\n      (recur (r))\r\n      r)))", "problem": 78, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn tramp [f & args]\n  (let [ retval (apply f args) ]\n      (if (fn? retval)\n        (recur retval [])\n        retval)))", "problem": 78, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn [f x]\n  (loop [nextf (f x)]\n    (if (fn? nextf)\n      (recur (nextf))\n      nextf)))", "problem": 78, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn bounce [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "problem": 78, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [f & params]\n  (let [initial (apply f params)]\n    (loop [i initial]\n      (if (fn? i)\n        (recur (i))\n        i))))", "problem": 78, "user": "4f294c48e4b0d6649770a023"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn my-trampoline \n  ([f]\n    (if (fn? f)\n      (recur (f))\n      f))\n  ([f & args]\n    (my-trampoline (apply f args))))", "problem": 78, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(letfn [(trampoline1 [f](let [ret (f)]\r\n(if (fn? ret)(recur ret) ret)))\r\n(trampoline2 [f & args]\r\n  (trampoline1 #(apply f args)))\r\n(dispatchtrampoline [x](if (= (count x) 1) \r\n(trampoline1 (first x))\r\n(trampoline2 (first x)(second x))))](fn[& x](dispatchtrampoline x)))", "problem": 78, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "(fn t ([f & more] (t #(apply f more)))\r\n               ([f] (let [res (f)] (if (fn? res) (recur res) res))))", "problem": 78, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "#(loop [o (% %2)] (if (fn? o)(recur (o)) o))", "problem": 78, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn mytrampoline [f & args]\n  (let [r (apply f args)] (if (fn? r) (mytrampoline r) r))\n)", "problem": 78, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn [f & p]\n  (loop [r (apply f p)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn t\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (t #(apply f args))))", "problem": 78, "user": "4ef6e689535dced4c769f24f"}, {"code": "#(if (fn? %)\n    (recur (apply % %&) [])\n    %)", "problem": 78, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn tramp [f & args]\n     (if (fn? f)\n       (tramp (apply f args))\n       f\n       )\n     )", "problem": 78, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn my-trampoline [f & args]\n  (let [ret (apply f args)]\n    (loop [ret ret]\n      (if (fn? ret)\n        (recur (ret))\n        ret)) ))", "problem": 78, "user": "4f2965ffe4b0d6649770a029"}, {"code": "(fn [f & fs]\n  (loop [f (apply f fs)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "problem": 78, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn [f & args] ((fn tr [g] (if (fn? g) (recur (g)) g)) (apply f args)))", "problem": 78, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn [f & args]\n  (loop [current (apply f args)]\n    (if (fn? current)\n        (recur (current))\n        current)))", "problem": 78, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn our-trampoline [f & more]\r\n  (cond\r\n    (seq? more) (our-trampoline (apply f more))\r\n    (fn? f) (our-trampoline (f))\r\n    true f\r\n    ))", "problem": 78, "user": "4ef0f1a1535dced4c769f212"}, {"code": "(fn t [f & xs]\r\n  (if (fn? f)\r\n    (t (apply f xs))\r\n    f))", "problem": 78, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn tramp\n    [f & rest]\n    (if (fn? f)\n      (recur (apply f rest) nil)\n      f))", "problem": 78, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn tramp [f & args]\n  (loop [r (apply f args)]\n    (if (not (fn? r))\n      r\n      (recur (r)))))", "problem": 78, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn [f & args]\n    (loop [fi (apply f args)]\n      (if (fn? fi) \n        (recur (fi))\n        fi)))", "problem": 78, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn [f & args]\r\n  (loop [res (apply f args)]\r\n\t\t(if (fn? res)\r\n\t\t\t(recur (res))\r\n\t\t\tres)))", "problem": 78, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "(fn tr\n  ([f]\n    (let [ret (f)]\n      (if (fn? ret)\n        (recur ret)\n        ret)))\n  ([f & args]\n    (tr #(apply f args))))", "problem": 78, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn t\n  ([f]\n    (let [r (f)]\n      (if (fn? r)\n        (recur r)\n        r)))\n  ([f x] (t #(f x))))", "problem": 78, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn t\n    ([f] (let [r (f)] (if (fn? r) (recur r) r)))\n    ([f & a] (t #(apply f a))))", "problem": 78, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "(fn [f & args]\n    (first (drop-while fn? (iterate #(%) (apply f args)))))", "problem": 78, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if-not (fn? result) result (recur (result)))))", "problem": 78, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn t  \n  [& [f & a]]     \n    (let [r (if a (apply f a) (f))]\n      (if (fn? r) (recur [r]) r)))", "problem": 78, "user": "4e513758535dc968683fc4f3"}, {"code": "(fn [f & a]\n  (loop [t (apply f a)]\n    (if (fn? t)\n      (recur (t))\n      t)))", "problem": 78, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn [f & args]\n  ((fn [g]\n    (if (not (fn? g))\n        g\n        (recur (g)))) (apply f args)))", "problem": 78, "user": "4f038499535dcb61093f6b09"}, {"code": "(fn [f & xs]\n  (if (fn? f)\n    (recur (apply f xs) [])\n    f))", "problem": 78, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn !\n  ([f]\n    (let [ret (f)]\n      (if (fn? ret)\n        (! ret)\n        ret)))\n  ([f & args]\n    (! #(apply f args))))", "problem": 78, "user": "4f1d1299535d64f603146487"}, {"code": "(fn [f & args]\n  (if (fn? f) (recur (apply f args) '()) f))", "problem": 78, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn [f & args]\r\n    (loop [result (apply f args)]\r\n      (if (fn? result)\r\n        (recur (result))\r\n        result)))", "problem": 78, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (recur result nil)\n      result)))", "problem": 78, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x) (recur (x)) x)))", "problem": 78, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn tramp\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tramp #(apply f args))))", "problem": 78, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [f & a]\n  (loop [v (apply f a)]\n    (if (ifn? v)\n      (recur (v))\n      v)))", "problem": 78, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn mytramp [f & args]\n    (let [f1 (apply f args)]\n      (if (fn? f1) (mytramp f1) f1)))", "problem": 78, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn trmp\r\n  [f & p]  \r\n  (loop [s (apply f p)]\r\n    (if (fn? s)\r\n      (recur (s))\r\n      s)))", "problem": 78, "user": "4f17ab99535d64f603146457"}, {"code": "(fn trampoline_ \n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n   (trampoline_ #(apply f args))))", "problem": 78, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn [f & args]\n  (loop [out (apply f args)]\n    (if (fn? out)\n      (recur (out))\n      out)))", "problem": 78, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [f p]\n  (loop [f (f p)]\n    (if-not (fn? f)\n      f\n      (recur (f)))))", "problem": 78, "user": "4e568873535d8a8b8723a283"}, {"code": "(fn [fnn i]\n(loop [res (fnn i)]\n  (if (not (fn? res)) res\n    (recur (res)))))", "problem": 78, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "#(loop [res (apply % %&)]\n   (if (fn? res) (recur (res)) res))", "problem": 78, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn [& a]\n  (loop [f (first a), args (rest a)]\n    (let [ret (apply f args)]\n       (if (fn? ret)\n          (recur ret '())\n          ret))))", "problem": 78, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn f [x & a]\n  (if (fn? x)\n    (f (apply x a))\n    x))", "problem": 78, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn tramp ([f]\n  (let [ret (f)]\n    (if (fn? ret)\n      (recur ret)\n      ret)))\n    ([f x]\n      (tramp #(f x))))", "problem": 78, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn tram [p_f & p_val]\r\n  (loop [f (apply p_f p_val) ]\r\n    (if (not (fn? f))\r\n         f\r\n         (recur (f) )\r\n         )\r\n    )\r\n  )", "problem": 78, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "#(loop [v (apply % %&)] (if (fn? v) (recur (v)) v))", "problem": 78, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn trmp \n  ([x] (if (fn? x) (trmp (x)) x))\n  ([f x] (trmp (f x))))", "problem": 78, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "(fn t [f & args] (if (fn? f) (t (apply f args)) f))", "problem": 78, "user": "4f565bebe4b0a7574ea7181e"}, {"code": "(fn [f & params]\n  (loop [cur-f (apply f params)]\n    (if (fn? cur-f)\n      (recur (cur-f))\n      cur-f)))", "problem": 78, "user": "4f841b23e4b033992c121c29"}, {"code": "(fn [f & args]\n  (loop [cur-f (apply f args)]\n    (if (fn? cur-f)\n      (recur (cur-f))\n      cur-f)))", "problem": 78, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn [f & args]\n  (if (fn? f)\n    (recur (apply f args) [])\n    f))", "problem": 78, "user": "4f713878e4b07046d9f4f00a"}, {"code": "(fn [f & r]\n  (#(if (fn? %) (recur (%)) %) (apply f r)))", "problem": 78, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn tramp \n  ([f & args] (tramp #(apply f args)))\n  ([f] (let [r (f)] (if (fn? r) (tramp r) r))))", "problem": 78, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn tramp [ f & args ]\n  (let [ r (apply f args)]\n    (if (fn? r) (tramp r) r)\n  )\n)", "problem": 78, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn t [f & args] \n  (loop [v (apply f args)]\n    (if (fn? v) (recur (v)) v)))", "problem": 78, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn tramp[f & args]\n  (if (fn? f)\n    (if args\n      (tramp #(apply f args))\n      (tramp (f))\n    )\n  f\n  )\n)", "problem": 78, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x) (recur (x)) x)))", "problem": 78, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn w [x & a]\r\n  (if (fn? x)\r\n    (w (apply x a))\r\n    x))", "problem": 78, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn [f & args]\n   (let [retval (apply f args)]\n     (if (ifn? retval)\n       (recur retval [])\n        retval)))", "problem": 78, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn t\n  ([f]\n    (if (fn? f)\n        (t (f))\n        f))\n  ([f & args] (t (apply f args))))", "problem": 78, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x)\n      (recur (x))\n      x)))", "problem": 78, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn [f & args]\r\n  (let [ff (fn [f args]\r\n             (let [fst (apply f args)]\r\n               (if (not (fn? fst))\r\n                 fst\r\n                 (recur fst []))))]\r\n    (ff f args)))", "problem": 78, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn my-trampoline\n  ([f v] (my-trampoline (f v)))\n  ([f] (if (fn? f) (my-trampoline (f)) f)))", "problem": 78, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [f & a]\n  (loop [q (apply f a)]\n    (if (fn? q) (recur (q)) q)))", "problem": 78, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn [f & arg]\n  (loop [x (apply f arg)]\n    (if (fn? x)\n      (recur (x))\n      x)))", "problem": 78, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn [f & args]\n         (loop [f2 (apply f args)]\n           (if (not (fn? f2))\n             f2\n             (recur (f2)))))", "problem": 78, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(fn [f & args]                                                                                                                      \n           (first (drop-while fn? (iterate (fn [f] (f)) (apply f args)))))", "problem": 78, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "#(if (fn? %) (recur (apply % %&) ()) %)", "problem": 78, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn t [f & p]\n  (loop [k (apply f p)]\n    (if (fn? k)\n      (recur (k))\n      k)))", "problem": 78, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn my-trampoline\n  ([f]\n    (if (fn? f)\n      (my-trampoline (f))\n      f))\n  ([f & more]\n    (my-trampoline (apply f more))))", "problem": 78, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn [f & args]\n             (loop [v (apply f args)]\n               (if (fn? v) (recur (v)) v)))", "problem": 78, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn tramp [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g) (recur (g)) g)))", "problem": 78, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn [f & args]\n (loop [res (apply f args)]\n   (if (fn? res) (recur (res)) res)))", "problem": 78, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn my-tramp [f & params]\r\n  (if (not (fn? f)) f\r\n    (my-tramp (apply f params))))", "problem": 78, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn [f & args] (loop [r (apply f args)] (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "4fb2101ce4b081705acca284"}, {"code": "#(loop [f (% %2)] (if (fn? f) (recur (f)) f))", "problem": 78, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": ";(fn [f & args]\n;  (some #(when-not (fn? %) %) (iterate #(apply % '()) (apply f args))))\n\n(fn [f & args]\n  (loop [c (apply f args)]\n    (if (fn? c)\n        (recur (c))\n        c)))", "problem": 78, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "(fn tramp\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tramp #(apply f args))))", "problem": 78, "user": "4faec810e4b081705acca24e"}, {"code": "(fn [f & args]\n        (loop [f (apply f args)]\n          (if (ifn? f)\n            (recur (f))\n            f)))", "problem": 78, "user": "4f1bb9d8535d64f60314647d"}, {"code": "(fn t [f & args]\n   (if (fn? f)\n     (t (apply f args)), f))", "problem": 78, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn myt [f & args]\n  (loop [r (apply f args)]\n    (if-not (fn? r) r (recur (r)))))", "problem": 78, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn [f & args] (let [ret (apply f args)]\n                 (loop [ret ret]\n                   (if (fn? ret) (recur (ret)) ret))))", "problem": 78, "user": "4efd8b67535de96065cf5085"}, {"code": "(fn tramp\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tramp #(apply f args))))", "problem": 78, "user": "4faafccde4b081705acca209"}, {"code": "(fn t [f & args]\n  (loop [g (apply f args)]\n    (if (instance? clojure.lang.IFn g) (recur (g)) g)))", "problem": 78, "user": "4fa30027e4b081705acca187"}, {"code": "(fn [f & args]\n  (loop [ff (apply f args)]\n    (if (fn? ff)\n      (recur (ff))\n      ff)))", "problem": 78, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn [f & args]\n  (if (fn? f) (recur (apply f args) nil) f))", "problem": 78, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn t [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v) (recur (v)) v)))", "problem": 78, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [f & args]\n  (loop [f #(apply f args)]\n    (if (fn? f) (recur (f)) f)))", "problem": 78, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn tramp\r\n  ([f]\r\n     (let [ret (f)]\r\n       (if (fn? ret)\r\n           (recur ret)\r\n           ret)))\r\n  ([f & args]\r\n     (tramp #(apply f args))))", "problem": 78, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn my-trampoline [fun, val]\n  (letfn [(trampoline-loop [f]\n            (if (fn? f)\n              (trampoline-loop (f))\n              f))]\n    (trampoline-loop (fun val))))", "problem": 78, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn [func & args]\n  (loop [f (apply func args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "problem": 78, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn t\n  ([f] (if (fn? f) (recur (f)) f))\n\t([f & p] (t (apply f p))))", "problem": 78, "user": "4fb3b865e4b081705acca2a2"}, {"code": "#(loop [v (%1 %2)] (if (fn? v) (recur (v)) v))", "problem": 78, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [f & x]\n  (loop [res (apply f x)]\n    (if (fn? res) (recur (res)) res)))", "problem": 78, "user": "4fb4b798e4b081705acca2af"}, {"code": "(fn [f & p] \n  ( #( if-not (fn? %) % (recur (%))) (apply f p) ))", "problem": 78, "user": "4fc43a8ee4b081705acca346"}, {"code": "(fn [f & s]\n  (let [result (apply f s)]\n    (if (fn? result)\n      (recur result ())\n      result)))", "problem": 78, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn tr[f & a](let [x (apply f a)] (\n  if (fn? x) (tr x) x)))", "problem": 78, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g) (recur (g)) g)))", "problem": 78, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn [f & rst]\n  (if (fn? f)\n    (recur (apply f rst) [])\n    f))", "problem": 78, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn t [f & s]\n  (loop [v (apply f s)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "problem": 78, "user": "4db0114d838c48654951d9b8"}, {"code": "(fn [f & args]\n  ( #(if (fn? %) (recur (%)) %)  (apply f args)))", "problem": 78, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "problem": 78, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn tramp [t & a]\n  (loop [xxx (apply t a)]\n    (if (fn? xxx)\n      (recur (xxx))\n      xxx)))", "problem": 78, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn t [f & args]\r\n  (loop [f (apply f args)]\r\n     (if (fn? f)\r\n         (recur (f))\r\n       f)))", "problem": 78, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn [ f & a]\n  (let [ res (apply f a) ] \n    (letfn [ (t [f] (if (fn? f) (recur (f)) f)) ] \n           (t res))))", "problem": 78, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn tp\n  ([f]\n    (let [ret (f)]\n      (if (fn? ret)\n          (recur ret)\n          ret)))\n  ([f & args] (tp #(apply f args))))", "problem": 78, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn my-tramp [f x]\n  (loop [v (f x)]\n    (if (fn? v)\n        (recur (v))\n        v)))", "problem": 78, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn [f & args]\n  (loop [val (apply f args)]\n    (if (fn? val)\n      (recur (val))\n      val)))", "problem": 78, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn t-clone[f & args]\n  (loop [fun (apply f args)]\n    (if (not (fn? fun)) fun\n        (recur (fun)))))", "problem": 78, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn zampoline [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "problem": 78, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "(fn my-tramp [x & args]\r\n    (if (not (nil? args)) \r\n  (my-tramp (apply x args))\r\n      (if (fn? x) (recur (x) nil) x)))", "problem": 78, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "(fn tramp\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tramp #(apply f args))))", "problem": 78, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn tramp [f & args]\n  (let [val (apply f args)]\n     (if (ifn? val)\n        (tramp val)\n        val)))", "problem": 78, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn tr\r\n  ([f]\r\n     (let [ret (f)]\r\n       (if (fn? ret)\r\n         (recur ret)\r\n         ret)))\r\n  ([f & args]\r\n     (tr #(apply f args))))", "problem": 78, "user": "4ff07688e4b0678c553fc324"}, {"code": "(fn [f & args] (loop [res (apply f args)] (if (fn? res) (recur (res)) res)))", "problem": 78, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn t ([f] (let [z (f)] (if (fn? z) (t z) z)))\n    ([f & x] (let [z (apply f x)] (if (fn? z) (t z) z))))", "problem": 78, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn tramp [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (recur result nil)\n      result)))", "problem": 78, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (ifn? x)\n      (recur (x))\n      x)))", "problem": 78, "user": "4db016af838c48654951d9b9"}, {"code": "(fn mytramp2 [f & args]\n  (first (drop-while fn? (iterate #(if (fn? %) (apply % []) %) (apply f args)))))", "problem": 78, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn [f & args]\n(let [ret (apply f args)]\n\t\t((fn f [x]\n\t\t\t(if (fn? x) (f (x)) x)\t\n\t\t) ret)\n\t)\n\t\n)", "problem": 78, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn bounce\n  [f & args] {:pre [(fn? f)]}\n  (loop [x (apply f args)]\n    (if (fn? x)\n      (recur (x))\n      x)))", "problem": 78, "user": "4fc6305de4b0ee37620e180b"}, {"code": "(fn [f & xs]\n  (let [r (apply f xs)]\n    (if (fn? r)\n      (recur r [])\n      r)))", "problem": 78, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [f args] (loop [ff (f args)] (if (fn? ff) (recur (ff)) ff)))", "problem": 78, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn ([v & a] (if (fn? v) (recur (apply v a) nil) v)))", "problem": 78, "user": "4ff889f2e4b0678c553fc399"}, {"code": "(fn [f & a]\n  (loop [r (apply f a)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "#((fn g [r] (if (fn? r) (g (r)) r)) (% %2))", "problem": 78, "user": "4ef48422535dced4c769f236"}, {"code": "(fn tramp [f v]\n  (loop [res (f v)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn [f & as]\n  (loop [r (apply f as)]\n   (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "500933a6e4b046cdb195e074"}, {"code": "#(loop [f (%1 %2)]\n  (if (fn? f) (recur (f)) f))", "problem": 78, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn tramapoline [f & args]\n    (loop [result (apply f args)]\n      (if (not (ifn? result))\n        result\n        (recur (result)))))", "problem": 78, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x)\n      (recur (x))\n      x)))", "problem": 78, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn my-trampoline\n  ([f & xs]\n     (let [retval (apply f xs)]\n       (if (fn? retval)\n         (my-trampoline retval)\n         retval)))\n  ([f]\n     (let [retval (f)]\n       (if (fn? retval)\n         (recur retval)\n         retval))))", "problem": 78, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn [f x]\n  (let [g (f x)]\n    (loop [g g]\n      (if (not (fn? g))\n          g\n          (recur (g))))))", "problem": 78, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn t ([f & a] (t (apply f a)))\n      ([f] (if (fn? f) (recur (f)) f)))", "problem": 78, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn tramp\r\n    ([f]\r\n      (let [ret (f)]\r\n        (if (fn? ret)\r\n          (recur ret)\r\n          ret)))\r\n    ([f & args]\r\n      (tramp #(apply f args))))", "problem": 78, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "(fn [f & args]\r\n  ((fn [f] (if (fn? f) (recur (f)) f)) (apply f args)))", "problem": 78, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn t [f & args]\r\n     (let [r (apply f args)]\r\n       (if (fn? r)\r\n         (t r)\r\n         r)))", "problem": 78, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn t \n  ([f] (let [r (f)]\n            (if (fn? r)\n              (recur r)\n              r)))\n  ([f & a] (t #(apply f a))))", "problem": 78, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn [f & args]\n  (if (fn? f) (recur (apply f args) nil) f))", "problem": 78, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn x \n  ([f]\n    (if (ifn? f) (recur (f)) f))\n  ([f & a]\n    (x (apply f a))))", "problem": 78, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn [src & args]\n  (loop [f (apply src args)]\n    (if-not (fn? f)\n      f\n      (recur (f)))))", "problem": 78, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn t\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (t #(apply f args))))", "problem": 78, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn mytramp [f & args]\n  (if (empty? args)\n    (if (fn? f) (mytramp (f)) f)\n    (mytramp (apply f args))))", "problem": 78, "user": "500cb910e4b05f7c30cfa698"}, {"code": "#(loop [res (apply % %&)]\n  (if (fn? res)\n    (recur (res))\n    res))", "problem": 78, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn t\n  ([f]\n    (let [ret (f)]   \n      (if (fn? ret)\n        (recur ret)\n        ret)))\n  ([f & args] (t #(apply f args))))", "problem": 78, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn [f & args] \n  (loop [val (apply f args)] \n    (if (fn? val) \n      (recur (val))\n      val)))", "problem": 78, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn [a & args] (if (fn? a) (recur (apply a args) nil) a))", "problem": 78, "user": "50166470e4b052339a490e76"}, {"code": "(fn [fi & args]\n    (loop [f (apply fi args)]\n    (if (fn? f) \n        (recur (f))\n        f)))", "problem": 78, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn [f & args]\n  (loop [nxt #(apply f args)]\n    (if (fn? nxt)\n      (recur (nxt))\n      nxt)))", "problem": 78, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [f & args]\r\n  (let [r (apply f args)]\r\n    (if (fn? r)\r\n      (recur r '())\r\n      r)))", "problem": 78, "user": "502873a8e4b01614d1633ff8"}, {"code": "#(loop [x (apply % %&)]\r\n   (if (fn? x) (recur (x)) x))", "problem": 78, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [f & args]\n  (let [g (apply f args)]\n    (loop [g g]\n      (if (fn? g)\n        (recur (g))\n        g))))", "problem": 78, "user": "4dc0ff08535d020aff1edf84"}, {"code": "#(loop [r (apply % %&)]\n   (if (fn? r) (recur (r)) r))", "problem": 78, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn t \r\n  ([f] (let [r (f)]\r\n(if (fn? r)   \r\n(recur r) \r\nr)))  \r\n([f & a] (t #(apply f a))))", "problem": 78, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn [f & more] (loop [res (apply f more)] (if-not (fn? res) res (recur (res)))))", "problem": 78, "user": "503e7f06e4b06c4e0e1fa268"}, {"code": "(fn [f & xs]\r\n (let [g (apply f xs)]\r\n  (if (fn? g) (recur g []) g)))", "problem": 78, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "problem": 78, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "(fn [f & args]\r\n  (do (println args)          \r\n  (loop [x (apply f args) n 0]\r\n    (do (println (str \"x: \" x))\r\n    (cond \r\n        (= n 100) nil\r\n        (not (fn? x)) x \r\n        :else (recur (x) (inc n)))))))", "problem": 78, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn trampoline-\n  ^{:doc \"78. Reimplement the function described in 'Intro to Trampoline'.\"}\n  ([f & xs] (trampoline- (apply f xs)))\n  ([f] (if (ifn? f) (recur (f)) f)))", "problem": 78, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn mytramp [f args]\n           (let [result (f args)]\n                (loop [r result]\n                   (if (not (fn? r))\n                       r\n                       (recur (r))))))", "problem": 78, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "#(loop [v (apply % %&)] (if (fn? v) (recur (v)) v))", "problem": 78, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn t\r\n  ([f & args] (t (apply f args)))\r\n\t([f] (if (fn? f) (recur (f)) f)))", "problem": 78, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "#(loop [f (apply %1 %&)] (if (fn? f) (recur (f)) f))", "problem": 78, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn [f & x]\n  (let [r (apply f x)]\n    (if (ifn? r)\n      (recur r '())\n      r)))", "problem": 78, "user": "503b6995e4b07a1917cc34dd"}, {"code": "#(loop [f (%1 %2)]\n  (if-not (fn? f) f\n  (recur (f))))", "problem": 78, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "(fn __ [f & args]\n  (if (fn? (apply f args))\n    (__ (apply f args))\n    (apply f args)))", "problem": 78, "user": "4fa719c0e4b081705acca1bf"}, {"code": "(fn [f & args]\n  (loop [a (apply f args)]\n    (if (not (fn? a)) a\n      \n      (recur (a)))))", "problem": 78, "user": "503917a0e4b088a6a14ca763"}, {"code": "(fn [f & xs]\r\n  (loop [y (apply f xs)]\r\n    (if (fn? y) (recur (y)) y)))", "problem": 78, "user": "50479524e4b0371827a27bc4"}, {"code": "(fn t\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (t #(apply f args))))", "problem": 78, "user": "501c1492e4b086d93747d180"}, {"code": "(fn [f & args]\n  (let [r (apply f args)]\n    (if (fn? r) (recur r []) r)))", "problem": 78, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn tramp [f & args]\r\n  (let [r (apply f args)]\r\n    (if (fn? r)\r\n      (recur r [])\r\n      r)))", "problem": 78, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn t [f & x]\n  (loop [v f, a x]\n    (if (fn? v) \n      (recur (apply v a) nil)\n      v)))", "problem": 78, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result) (recur (result)) result)))", "problem": 78, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [f & args]\n  (let [r (apply f args)]\n    (loop [s r]\n      (if (fn? s)\n        (recur (s))\n        s))))", "problem": 78, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn tra ([f]\n  (let [ret (f)]\n    (if (fn? ret) (recur ret) ret)))\n    ([f & args] (tra #(apply f args))))", "problem": 78, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn [f & args]\n  (letfn [(bounce [next-bounce]\n            (if (fn? next-bounce)              \n              (recur (next-bounce))\n              next-bounce))]              \n  (let [next-bounce (apply f args)]\n    (if (fn? next-bounce)\n      (bounce next-bounce)\n      next-bounce))))", "problem": 78, "user": "5014754de4b094324338f8e5"}, {"code": "(fn [f0 & args] (loop [f (apply f0 args)] (if (fn? f) (recur (f)) f)) )", "problem": 78, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f) (recur (f)) f)))", "problem": 78, "user": "50586354e4b06522596eba78"}, {"code": "(fn go [f & args]\n  (first (drop-while fn?\n            (iterate #(if (fn? %) (%) %)\n                      (apply f args)))))", "problem": 78, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn tr [f & args]\n    (let [res (apply f args)]\n      (if (fn? res)\n        (tr res)\n        res)))", "problem": 78, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n(if (ifn? r)\n(recur (r))\nr)))", "problem": 78, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "(fn [f & xs]\n  (if (fn? f) (recur (apply f xs) nil) f))", "problem": 78, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn [f & as]\n  (loop [res (apply f as)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "4f84a4a4e4b033992c121c39"}, {"code": "(fn [f & args] (let [a (apply f args)] \n(if (fn? a) (recur a ()) a)))", "problem": 78, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [f & args]\n  (let [ret (apply f args)]\n    (if (fn? ret)\n      (recur ret [])\n      ret)))", "problem": 78, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn tramp\n  ([x & args]\n    (tramp (apply x args))\n  )\n  ([x]\n    (if (fn? x)\n      (recur (x))\n      x\n  ))\n)", "problem": 78, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "(fn yyy\n    ([f]\n      (let [x (f)]\n        (if (fn? x) (yyy x) x)))\n    ([f & args]\n      (let [x (apply f args)]\n        (if (fn? x) (yyy x) x))))", "problem": 78, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "(fn my-trampoline [f & args]\n    (loop [ret (apply f args)]\n      (if (fn? ret)\n        (recur (ret))\n        ret)))", "problem": 78, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn [f & args]\n  (loop [ret (apply f args)]\n    (if (fn? ret)\n      (recur (ret))\n      ret)))", "problem": 78, "user": "5051e2abe4b0a561d07d8f0a"}, {"code": "(fn [f arg]\n  (let [ff (f arg)]\n    (loop [r ff]\n      (if (fn? r)\n          (recur (r))\n          r))))", "problem": 78, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn t [f & l]\n  (let [r (apply f l)]\n    (if (fn? r)\n      (t r)\n      r)))", "problem": 78, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn [f & args]\n  (loop [f f x (apply f args)]\n    (if (fn? x)\n      (recur f (x))\n      x)))", "problem": 78, "user": "504c8165e4b09724c857af31"}, {"code": "(fn tramp\n  ([f] (let [r (f)]\n         (if (fn? r)\n           (recur r)\n         r)))\n([f & a] (tramp #(apply f a))))", "problem": 78, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "#(loop [x (apply % %&)] (if (fn? x) (recur (x)) x))", "problem": 78, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn t [f & args]\n  (let [r (apply f args)]\n    (if (fn? r) (t r) r)))", "problem": 78, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn tramp\n  ([f] (let [v (f)] (if (fn? v) (recur v) v)))\n  ([f & args] (tramp #(apply f args)))\n  )", "problem": 78, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn t [f & p] (if (fn? f) (t (apply f p)) f))", "problem": 78, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn [f & args]\n  (first (drop-while fn?\n    (iterate #(if (fn? %) (%) %)\n        \t (apply f args)))))", "problem": 78, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn [f & args] \n  (let [x (apply f args)\n        mytramp (fn [x] (if (fn? x) (recur (apply x [])) x))]\n  (mytramp x)))", "problem": 78, "user": "50435689e4b034ff00315d21"}, {"code": "(fn t [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "(fn [f & a] \n(#(if (fn? %)\n    (recur (%))\n  %)(apply f a)))", "problem": 78, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn [f x]\r\n  ((fn [f] (if (fn? f)\r\n       (recur (f))\r\n\t     f))\r\n   (f x)))", "problem": 78, "user": "507437c2e4b054001656acd0"}, {"code": "(fn tramp [f & args]\n  (let [f (apply f args)]\n\t\t(loop [f f]\n\t\t\t(if (fn? f) (recur (f))\n\t\t\t\tf\n\t\t\t)\n\t\t)\n\t)\n)", "problem": 78, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn [f & args]\n    (loop [fun (apply f args)]\n      (if-not (ifn? fun)\n        fun\n        (recur (fun)))))", "problem": 78, "user": "50763574e4b0a894bb95bf3d"}, {"code": "(fn trampoline2\n  ([f]\n     (println f)\n     (if (fn? f)\n       (trampoline2 (f))\n       f))\n  ([f & args]\n     (println f args)\n     (if (fn? f)\n       (trampoline2\n        (apply f args))\n       f)))", "problem": 78, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn [func & params]\n  (loop [result (apply func params)]\n    (if\n      (fn? result)\n      (recur (result))\n      result)))", "problem": 78, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v)\n      (recur (v)) v)))", "problem": 78, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn [f & args]\n  (if (fn? f)\n    (recur (apply f args) nil)\n    f\n  )\n)", "problem": 78, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "#(loop [r (apply % %&)]\n  (if (fn? r)\n      (recur (r))\n      r))", "problem": 78, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn tramp [f & args]\r\n  (loop [rc (apply f args)]\r\n    (if-not (fn? rc)\r\n      rc\r\n      (recur (rc)))))", "problem": 78, "user": "4dc97aec535d5973398f9284"}, {"code": "(fn[f & args] (loop[r (apply f args)] (if (fn? r) (recur (r)) r )))", "problem": 78, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn tramp [f & s]\r\n      (loop [v (apply f s)]\r\n        (if (fn? v) (recur (v)) v)))", "problem": 78, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn tramp\r\n          ([f]\r\n             (let [ret (f)]\r\n               (if (fn? ret)\r\n                 (recur ret)\r\n                 ret)))\r\n          ([f & args]\r\n             (tramp #(apply f args))))", "problem": 78, "user": "4e8768f6535dceadca469850"}, {"code": "(fn [func arg]\r\n        (loop [ret (func arg)]\r\n                (if (fn? ret)\r\n                        (recur (ret))\r\n                        ret)))", "problem": 78, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "(fn my-tramp [f & rest]\n  (loop [ans (apply f rest)]\n    (if (fn? ans)\n      (recur (ans))  \n      ans)))", "problem": 78, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn g [f & x] (let [r (apply f x)] (if (fn? r) (g r) r)))", "problem": 78, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn [f x]\n (let [g (f x)]\n   (loop [h g]\n     (if (fn? h)\n       (recur (h))\n       h))))", "problem": 78, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn t [f & a]\n  (let [r (if (nil? a) (f) (apply f a))]\n    (cond\n     (fn? r) (t r)\n     :else r)))", "problem": 78, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "(fn [f & x]\n  (loop [r (apply f x)]\n    (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "50657775e4b0deb876850599"}, {"code": "(fn [fun & args]\n  (if (fn? fun)\n    (recur (apply fun args) [])\n    fun))", "problem": 78, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn __ [f & args]\n  (if (fn? f) (__ (apply f args)) f)\n)", "problem": 78, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "(fn my-trampoline [func & args]\n  ((fn [f] (if (fn? f) (recur (f)) f))\n   (apply func args)))", "problem": 78, "user": "4f03818e535dcb61093f6b00"}, {"code": "(fn [f & args]\n  (loop [x (apply f args)]\n     (if (fn? x)\n       (recur (x))\n       x)))", "problem": 78, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "#(if (fn? %) (recur (apply % %&) []) %)", "problem": 78, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn [f & args]\n    (let [ret-f (apply f args)]\n        (loop [rf ret-f]\n          (if (fn? rf)\n            (recur (rf))\n            rf))))", "problem": 78, "user": "4ed0e139535d44c135fd68c7"}, {"code": "(fn [f & a] ((fn t [g] (if (fn? g) (t (g)) g)) (apply f a)))", "problem": 78, "user": "4fb1325de4b081705acca276"}, {"code": "(fn tramp \n  [f & args]\n    (loop [func (apply f args)]\n      (if (fn? func) (recur (func)) func)))", "problem": 78, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn [f & args]\r\n  (loop [x (apply f args)]\r\n    (if (fn? x)\r\n      (recur (x))\r\n      x)))", "problem": 78, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn m-trampoline [in & args]\n  (if (fn? in)\n    (m-trampoline (apply in args))\n    in))", "problem": 78, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn [f & l]\n  (letfn\n  [(my_trampoline\n  ([f & rest]\n     (my_trampoline #(apply f rest)))\n  ([f]\n     (let [r (f)]\n       (if (fn? r)\n         (recur r)\n         r))))]\n  (apply my_trampoline f l)))", "problem": 78, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn [f & params]\n   (let [res (apply f params)]\n   (if (fn? res) (recur res nil) res)))", "problem": 78, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn [f & params]\n    (let [result (apply f params)\n          call-until (fn call-until [f]\n                       (if (fn? f)\n                         (recur (f))\n                         f))\n          ]\n      (call-until result)))", "problem": 78, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn t [f & args]\n  (let [x (apply f args)]\n    (if (fn? x)\n      (t x)\n      x)))", "problem": 78, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn [f & args]\n    (loop [f? (apply f args)]\n      (if (fn? f?)\n        (recur (f?))\n        f?)))", "problem": 78, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n     (recur (f))\n      f)))", "problem": 78, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn [f & a]\n    (loop [r f as a]\n      (let [v (apply r as)]\n      (if (fn? v)\n        (recur v [])\n        v))))", "problem": 78, "user": "5027b41ee4b01614d1633fee"}, {"code": "#(loop [a (% %2)] (if (fn? a) (recur (a)) a))", "problem": 78, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "#((fn t [f] (if (fn? f) (t (f)) f)) (%1 %2))", "problem": 78, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "#(loop [f (apply % %&)]\n   (if (fn? f)\n     (recur (f)) f))", "problem": 78, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn tr [f & a]\n  (if (fn? f)\n      (recur (apply f a) nil)\n      f\n  )\n)", "problem": 78, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn [ func & args ] (loop [res (apply func args)]\n                               (if (fn? res)\n                                 (recur (res))\n                                 res)\n                               ))", "problem": 78, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn [fun & args]\n  (loop [res (apply fun args)]\n    (if (fn? res) \n      (recur (res))\n      res)))", "problem": 78, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "(fn [x & a]\n  (if (fn? x) (recur (apply x a) []) x))", "problem": 78, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn [f & xs]\n  (first (drop-while fn? (iterate #(if (fn? %) (%) %) (apply f xs)))))", "problem": 78, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn my-trampoline\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (my-trampoline #(apply f args))))", "problem": 78, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "(fn my-trampoline [f & args]\n  (let [res (apply f args)]\n    (if (fn? res)\n      (recur res nil)\n      res)))", "problem": 78, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn t \n  ([f] (let [r (f)]\n         (if (fn? r) (recur r) r)))\n  ([f x] (t #(f x))))", "problem": 78, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn tramp\n  ([x] (if (fn? x) (tramp (x)) x))\n  ([x & args] (tramp #(apply x args))))", "problem": 78, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn [f & v]\n  (loop [i (apply f v)]\n    (if (fn? i)\n      (recur (i))\n      i)))", "problem": 78, "user": "50a83315e4b054305ba5a830"}, {"code": "#(loop [r (apply % %&)]\n    (if (fn? r)\n      (recur (r))\n      r))", "problem": 78, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x) (recur (x)) x)))", "problem": 78, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn test78 [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn [f & a]\n  (first\n   (drop-while fn?\n               (iterate #(apply % []) #(apply f a)))))", "problem": 78, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "(fn fun [f & ps]\n  (let [res (apply f ps)]\n    ((fn [r]\n      (if (fn? r)\n        (recur (r))\n        r))\n     res)))", "problem": 78, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn trampoline* [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (trampoline* result)\n      result)))", "problem": 78, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn this \n  ([f & params]\n  (let [result (apply f params)]\n    (if (fn? result)\n      (apply this (list result))\n      result\n      ) ; if\n    ) ; let\n   )\n  ) ; fn", "problem": 78, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn trampoline-\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (trampoline- #(apply f args))))", "problem": 78, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn trampo\n     ([f] (let [ret (f)]\n            (if (fn? ret) (recur ret)\n                ret)))\n     ([f & args] (trampo #(apply f args))\n        ))", "problem": 78, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn [f & args]\n    (let [r (apply f args)]\n       (if (fn? r) (recur r []) r)))\n\n;#(loop [f (%1 %2)] (if (fn? f) (recur (f)) f))", "problem": 78, "user": "4ee77f15535d93acb0a66868"}, {"code": "#(if (fn? %)\n   (recur (apply % %&) ())\n   %)", "problem": 78, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn [f & args] (loop [r (apply f args)] (if (fn? r)(recur (r)) r) ))", "problem": 78, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "problem": 78, "user": "50bd6033e4b0594b91591c66"}, {"code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "problem": 78, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn tra2 [f & more]\n  (loop [res (apply f more)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn tramp [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (tramp r)\n      r)))", "problem": 78, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [f & args] \n  (loop [x (apply f args)]\n    (if (fn? x) (recur (x)) x) ))", "problem": 78, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [f & args]\n  (let [res (apply f args)]\n    (loop [res res]\n      (if (not (fn? res))\n        res\n        (recur (res))))))", "problem": 78, "user": "50bca033e4b0594b91591c5d"}, {"code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result) (recur (result)) result)))", "problem": 78, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "(fn [f & xs] (loop [r (apply f xs)]\n                         (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn trampo\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (trampo #(apply f args))))", "problem": 78, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn my-tram [f & args]\n  (let [r (apply f args)]\n    (loop [r r]\n      (if (fn? r)\n        (recur (r))\n        r))))", "problem": 78, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "(fn [f & x] ( loop[c (apply f x)] (if (fn? c) (recur (c)) c)))", "problem": 78, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn\n  [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "#(loop [f (apply % %&)]\n  (if (fn? f)\n    (recur (f))\n    f))", "problem": 78, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn [f x]\n  (loop [v (f x)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "problem": 78, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [f & args]\n    (loop [r (apply f args)]\n      (if (not (fn? r))\n        r\n        (recur (r)))))", "problem": 78, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn t\n  ([f] (if (fn? (f)) (recur (f)) (f)))\n  ([f & a] (t #(apply f a))))", "problem": 78, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn [f x] (letfn [(repeater [f] (if (instance? clojure.lang.IFn f) (recur (f)) f))]\n            (repeater (f x))))", "problem": 78, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn tramp \n  ([f & args] \n   (tramp (apply f args)))\n  ([f]\n   (if (fn? f)\n     (recur (f))\n     f)))", "problem": 78, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "(fn[f & args]\n  (let [x (apply f args)]\n    (if-not (fn? x)\n      x\n      (recur x []))))", "problem": 78, "user": "4e778d36535d324fb2983d71"}, {"code": "(fn t [f & a] (let [r (apply f a)] (if (fn? r) (t r) r)))", "problem": 78, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "problem": 78, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f ))\n      f)))", "problem": 78, "user": "50217818e4b00bba4502f7a7"}, {"code": "#(loop [result  (apply %1 %&)]\n   (if (fn? result)\n     (recur (result))\n     result))", "problem": 78, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [f & args]\n\t\t\t(let [res (apply f args)]\n\t\t\t  (if (fn? res)\n\t\t\t      (recur res [])\n\t\t\t      res)))", "problem": 78, "user": "4e68fad4535d8ccf87e9fe93"}, {"code": "(fn t[f & a](first(drop-while fn?(iterate #(%)(apply f a)))))", "problem": 78, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn [f & args]\n  (let [rslt (apply f args)]\n    (if (fn? rslt)\n      (recur rslt [])\n      rslt)))", "problem": 78, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(fn [f & args]\n  (let [res (apply f args)]\n    (if (fn? res)\n      (recur res [])\n      res)))", "problem": 78, "user": "510db6cde4b078ea71921145"}, {"code": "(fn trampo [fn & args]\n        (let [result (apply fn args)]\n          (if (fn? result)\n            (trampo result)\n            result)\n          \n          ))", "problem": 78, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn myf [f & args]\n  (let [res (apply f args)]\n      (loop [f' res]\n        (if-not (fn? f')\n          f'\n          (recur (f'))))))", "problem": 78, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn [f & args]\n  (loop [nf (apply f args)]\n    (if (fn? nf)\n      (recur (nf))\n      nf)))", "problem": 78, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn trampo\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (trampo #(apply f args))))", "problem": 78, "user": "50d8de3fe4b01f0871336e72"}, {"code": "#(\n      (fn [g]\n        (if (fn? g) (recur (g)) g))\n      (apply %1 %&))", "problem": 78, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn tramp\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tramp #(apply f args))))", "problem": 78, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn my-tramp [f & args]\n  (loop [output (apply f args)]\n    (if-not (fn? output)\n      output\n      (recur (output)))))", "problem": 78, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn [& args]\n  (let [result (apply (first args) (rest args))]\n    (if (fn? result) (recur [result]) result)))", "problem": 78, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn t [x y]\n  (loop [f (x y)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "problem": 78, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn trampo [f & args]\n  (if (not (fn? f)) f\n    (recur (apply f args) nil)))", "problem": 78, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn trampo\n  ([f] (let [res (f)]\n         (if (ifn? res)\n           (recur res)\n           res)))\n  ([f & args] (trampo (apply partial f args))))", "problem": 78, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn tramp [fun & args]\n\t(if (fn? fun)\n\t\t(tramp (apply fun args))\n\t\tfun\n\t)\n)", "problem": 78, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn [f & s]\n(let [result (apply f s)]\n(if (fn? result)\n(recur result ())\nresult)))", "problem": 78, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "(fn [f & x] (#(if (fn? %) (recur (%)) %) #(apply f x)))", "problem": 78, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn ! [& p]\n        (loop [result\n               (if (= 2 (count p))\n                 ((first p) (second p))\n                 (first p)\n                 )                                             \n               ] \n          (if (fn? result)\n            (recur (result))\n            result          \n          )                \n        )\n        )", "problem": 78, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [f & a]\n  (loop [ff (apply f a)]\n    (if (fn? ff)\n      (recur (ff))\n      ff))\n  )", "problem": 78, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn tramp [f & args]\n  (loop [inf (apply f args)]\n    (if (fn? inf)\n      (recur (inf))\n      inf)))", "problem": 78, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn f-tramp [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn tr [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "511f88eee4b085952a83535f"}, {"code": "(fn [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g) (recur (g)) g)))", "problem": 78, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn [f & args]\n  ((fn [f]\n     (if (fn? f)\n       (recur (f))\n       f))\n   (apply f args)))", "problem": 78, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn b [f & nn] (let [n (apply f nn)] (if (fn? n) (b n) n)))", "problem": 78, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn my-trampoline [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn tramp [& args]\n  (first (drop-while fn? (iterate tramp (apply (first args) (drop 1 args))))))", "problem": 78, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn mytramp ([f & args] (mytramp (apply f args))) ([f] (if (fn? f) (mytramp (f)) f)))", "problem": 78, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn aa [x & args] (if (fn? x) (aa (apply x args)) x))", "problem": 78, "user": "5105ed16e4b01150e115ebe2"}, {"code": "#(loop [y (apply % %&)]\n   (if (fn? y) (recur (y)) y))", "problem": 78, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn mytrampoline \n  ([f]\n   (loop [ret (f)]\n     (if (fn? ret)\n       (recur (ret))\n       ret)))\n  ([f & args]\n   (mytrampoline #(apply f args))))", "problem": 78, "user": "513cb853e4b0b86ece9f322b"}, {"code": "(fn [f & args]\n  (loop [ret (apply f args)]\n    (if (not (ifn? ret))\n      ret\n      (recur (ret)))))", "problem": 78, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn t \n  ([f] (if (fn? f) (recur (f)) f))\n  ([f & args] (t (apply f args))))", "problem": 78, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn\n    [f & args]\n    (let [a (apply f args)]\n     (loop [x a]\n        (if (ifn? x) (recur (x)) x))))", "problem": 78, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn my-trampoline \n  [f & args]\n  (loop [t (apply f args)]\n    (if (fn? t)\n      (recur (t))\n      t)))", "problem": 78, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn my-trampoline [f & args]\n  (let [result (apply f args)]\n    (if ((complement fn?) result)\n      result\n      (recur result []))))", "problem": 78, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn f[g & a] (#(if (fn? %) (f %) %) (apply g a)))", "problem": 78, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn tr \n [f & p] \n  (if (empty? p) \n    (if (fn? f) (recur (f) []) f)\n    (tr (apply f p)))\n)", "problem": 78, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn tr ( [f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n  (tr #(apply f args))))", "problem": 78, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn my-tramp [f\t& startvals]\n  (loop\t[g (apply f startvals)]\n    (if\t(fn? g)\n      (recur (g))\n      g)))", "problem": 78, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn [f & args]\n  (let [res (apply f args)]\n    (loop [r res]\n      (if (not (fn? r))\n        r\n        (recur (r))))))", "problem": 78, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn\t[f & args]\n  (loop [r (apply f args)]\n    (if-not (fn? r)\n      r\n      (recur (r)))))", "problem": 78, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn tramp [f & x]\n  (let [res (apply f x)]\n    (if (fn? res) \n      (tramp res)\n      res)))", "problem": 78, "user": "5110b8bae4b04c71fce993f4"}, {"code": "(fn tram [f & args] \n  (if (fn? f)\n    (tram (apply f args))\n    f))", "problem": 78, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn tramp\n  ([f & args]\n   (tramp (apply f args)))\n  ([f]\n   (if (fn? f)\n       (recur (f))\n       f)))", "problem": 78, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn [f & args]\n  (loop [f f\n         args args]\n    (let [res (apply f args)]\n      (if (fn? res)\n        (recur res nil)\n        res))))", "problem": 78, "user": "515ead6be4b049add99a053e"}, {"code": "(fn _trampoline [fn_or_result & init]\n  (if (fn? fn_or_result)\n    (_trampoline (apply fn_or_result init))\n    fn_or_result))", "problem": 78, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn [func & args]\n    (let [res (apply func args)]\n      (loop [val res]\n        (if (ifn? val)\n          (recur (val))\n          val))))", "problem": 78, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn [f & args]\n        (let [r (apply f args)]\n          (if (fn? r)\n            (recur r nil)\n            r)))", "problem": 78, "user": "50f48298e4b004d364930527"}, {"code": "(fn tramp [f & args]\n\t(let [res (apply f args)]\n\t\t(loop [mfun res]\n\t\t\t(if (fn? mfun)\n\t\t\t\t(recur (mfun))\n\t\t\t\tmfun))))", "problem": 78, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "(fn tramp [f & args]\n    (let [res (apply f args)] \n      (if (fn? res)\n        (tramp res)\n        res\n        )\n      )\n)", "problem": 78, "user": "513b43ede4b067e25a345ed3"}, {"code": "(fn tramp [f & args]\n  (let [v (apply f args)]\n    (if (fn? v)\n      (tramp v)\n      v)))", "problem": 78, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn t [f & args]\n  (if (fn? f)\n    (t (apply f args))\n    f))", "problem": 78, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn tramp \n  ([f & args] (tramp (apply f args)))\n  ([f]\n  (if (fn? f)\n      (recur (f))\n       f)))", "problem": 78, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn [f & xs]\n    (if (fn? f) (recur (apply f xs) nil) f))", "problem": 78, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(fn tramp [f & args]\n  (loop [o (apply f args)]\n    (if (fn? o) (recur (o)) o)\n   )\n )", "problem": 78, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn foo [f & args] (if (not (fn? f)) f (foo (apply f args))))", "problem": 78, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn t [f & p]\n  (let [r (apply f p)]\n    (if (fn? r)\n      (t r)\n  r)))", "problem": 78, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "problem": 78, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn tramp [f & args]\n  (let [ret (apply f args)]\n    (if (fn? ret)\n      (tramp ret)\n      ret)))", "problem": 78, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn [x & y] \n  ((fn t [a] \n     (if (ifn? a) (t (a)) a)) (apply x y)))", "problem": 78, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn my-trampoline [f & args] (if (fn? f) (my-trampoline (apply f args)) f))", "problem": 78, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn [f & params]\n  (let [init_val (apply f params)]\n    (loop [result init_val]\n      (if (fn? result)\n        (recur (apply result []))\n        result))))", "problem": 78, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if-not (fn? result) result\n      (recur (result)))))", "problem": 78, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn [f & args]\n  (loop [next (apply f args)]\n    (if (fn? next)\n      (recur (next))\n      next)))", "problem": 78, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn my-trampoline [f & params]\n  (let [mid-result (apply f params)]\n    (if (fn? mid-result)\n      (apply my-trampoline mid-result [])\n      mid-result)))", "problem": 78, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn my-trampoline\n  ([f & args] (my-trampoline #(apply f args)))\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret))))", "problem": 78, "user": "51460e4ce4b04ef915e37314"}, {"code": "(fn tramp [func & args]\n  (loop [ret (apply func args)]\n    (if (fn? ret)\n      (recur (ret))\n      ret)))", "problem": 78, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn [f & args]\n  (loop [ret (apply f args)]\n    (if (ifn? ret)\n      (recur (ret))\n      ret)))", "problem": 78, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "(letfn [(mytramp [f & args]\n          (if (fn? f)\n            (mytramp (apply f args))\n            f))]\n  mytramp)", "problem": 78, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn tram [f & args]                                                                                     \n  (let [ret (apply f args)]                                                                                     \n    (if (fn? ret) (tram ret) ret)))", "problem": 78, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [f m] (loop [f (f m)] \n(if-not (fn? f) f\n(recur (f)))))", "problem": 78, "user": "517945dce4b0684c1c981a43"}, {"code": "(fn tram [f & xs] (loop [g (apply f xs)] \n                    (if (fn? g) (recur (g)) g )))", "problem": 78, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "(fn [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (recur r [])\n      r)))", "problem": 78, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn def_trampoline [foo & args]\n  (loop [f (apply foo args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "problem": 78, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn [f & args]\n  ((fn [f]\n     (let [rv (f)]\n      (if (fn? rv) (recur rv) rv)))\n   #(apply f args)))", "problem": 78, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn [f & args]\n  (loop [val (apply f args)]\n    (if (fn? val)\n      (recur (val))\n      val))\n  )", "problem": 78, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [f & args]\n  (loop [f? (apply f args)]\n    (if (fn? f?) (recur (f?)) f?)))", "problem": 78, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn t [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (t r)\n      r)))", "problem": 78, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "#(loop [x (% %2)]\n       (if (fn? x)\n         (recur (x))\n         x))", "problem": 78, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn [f x]\n  (loop [x (f x)]\n    (if (fn? x) (recur (x)) x)))", "problem": 78, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn tro [x y]\n  ((fn tro2 [x1]\n  (if (fn? x1)\n    (tro2 (x1))\n    x1\n    )\n  ) (x y))\n  )", "problem": 78, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "problem": 78, "user": "4fbf2818e4b081705acca317"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn t\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (t #(apply f args))))", "problem": 78, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn t [f & args]\n  (if (fn? f)\n    (t (apply f args))\n    f))", "problem": 78, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [f & a]\n  (loop [e (apply f a)]\n    (if\n      (ifn? e)\n      (recur (e))\n      e)))", "problem": 78, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn t ([f] (let [r (f)] (if (fn? r) (recur r) r))) ([f & a] (t #(apply f a))))", "problem": 78, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn t [x & a]\n  (if (fn? x)\n    (t (apply x a))\n    x))", "problem": 78, "user": "50d86fe2e4b01f0871336e67"}, {"code": "#((fn [x] (if-not (fn? x) x (recur (x)))) (%1 %2))", "problem": 78, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn t [f & a] (if (fn? f) (t (apply f a)) f))", "problem": 78, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "#(loop [res (apply % %&)]\n   (if (fn? res)\n     (recur (res)) res))", "problem": 78, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn [x & p]\n  (if (fn? x) (recur (apply x p) []) x))", "problem": 78, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn tramp\n  ([f] \n   (let [z (f)]\n    (if (fn? z)(recur z) z)))\n  ([f & args]\n   (tramp #(apply f args))))", "problem": 78, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn trampoline* [f & args]\n  (loop [ret (apply (comp f) args)]\n    (if (fn? ret)\n      (recur (ret)) \n      ret)))", "problem": 78, "user": "51d662fce4b0154f82ab92ef"}, {"code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "problem": 78, "user": "5102ac9de4b00c483ae176fa"}, {"code": "(fn [f & a]\n  (loop [r (apply f a)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn tramp [f & args]\n  (letfn [(invoke [f] \n            (if (fn? f)\n              (recur (f))\n              f))]\n    (invoke (apply f args))))", "problem": 78, "user": "51b8e8b3e4b050a1176cd6a0"}, {"code": "#(if (fn? %) (recur (apply % %&) []) %)", "problem": 78, "user": "511d6a01e4b022853b0e07a5"}, {"code": "(fn t\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (t #(apply f args))))", "problem": 78, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn [f & args]\n\t(let [res (apply f args)]\n\t\t(loop [nf res]\n\t\t\t(if (fn? nf)\n\t\t\t\t(recur (nf))\n\t\t\t\tnf))))", "problem": 78, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn my-trampoline \n  ([f] (if (fn? f) (recur (f)) f))\n  ([f & args] (my-trampoline (apply f args))))", "problem": 78, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "(fn [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g) (recur (g)) g)))", "problem": 78, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn [f & a]\n  (loop [r (apply f a)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "50ebd63ce4b04edc3377703c"}, {"code": "(fn t [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "problem": 78, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "#(loop [g (apply % %&)]\n    (if (fn? g) (recur (g))\n      g))", "problem": 78, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "(fn [f & args]\n  (->> (apply f args) (iterate #(%)) (remove fn?) first))\n\n#_\n\n(fn [f & args]\n  (first (remove fn? (iterate #(%) (apply f args)))))", "problem": 78, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn\n  [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn trampolineeeeeeeeeeeeeeeeee\n  [thunk-maker & args]\n  (loop [thunk (apply thunk-maker args)]\n    (if (fn? thunk)\n      (recur (thunk))\n      thunk)))", "problem": 78, "user": "511b233ae4b07ab9ec456180"}, {"code": "(letfn [(funky [g]\n           (let [ret (g)]\n             (if (fn? ret)\n               (recur ret)\n               ret)))]\n  (fn\n    ([f] (funky f))\n    ([f & args]\n       (funky #(apply f args)))))", "problem": 78, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn trmp [f & args]\n  (loop [func (apply f args)]\n    (if (fn? func)\n      (recur (func))\n      func)))", "problem": 78, "user": "51672d15e4b079759a74a5e7"}, {"code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v)\n      (recur (v))\n      v\n    )\n  )\n)", "problem": 78, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "(fn my-trampoline [f & xs]\n    (let [ r (apply f xs) ]\n        (if (not (fn? r))\n            r\n            (recur r ()))))", "problem": 78, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "#(letfn [(my-trampoline\n           [f & args]\n           (loop [r (apply f args)]\n             (if ((complement fn?) r)\n               r\n               (recur (r)))))]\n   (apply my-trampoline %1 %&))", "problem": 78, "user": "51fb9d30e4b0f1313d468a0f"}, {"code": "(fn [f1 & args]\n  (loop [f (apply f1 args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "problem": 78, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn [f & a] ((fn tram [f] (if (fn? f) (tram (f)) f)) (apply f a)))", "problem": 78, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn x [f & r]\n  (if (fn? f)\n     (x (apply f r))\n     f))", "problem": 78, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn tram\n     ([f]\n        (let [ret (f)]\n          (if (fn? ret)\n            (recur ret)\n            ret)))\n     ([f & args]\n        (tram #(apply f args))))", "problem": 78, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn mpline [f & args]\n  (loop [exp (apply f args)]\n    (if (fn? exp)\n      (recur (exp))\n      exp)))", "problem": 78, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn [func & args]\n  ((fn [func]\n     (if (fn? func) (recur (func))\n                     func)) (apply func args)))", "problem": 78, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "(fn tramp [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res) (recur (res)) res)))", "problem": 78, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn [f & args]\n  (first (drop-while fn? (iterate (fn [g] (g)) (apply f args)))))", "problem": 78, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn f [f & as]\n  (loop [ret (apply f as)]\n    (if (fn? ret)\n      (recur (ret))\n      ret)))", "problem": 78, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn tramp [f & args]\n  (let [result (apply f args)]\n    (if\n      (fn? result)\n      (tramp result)\n      result))\n  )", "problem": 78, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn re-trampoline [& args]\n  (cond\n   (< 1 (count args)) (re-trampoline (apply (first args) (rest args)))\n   (ifn? (first args)) (re-trampoline ((first args)))\n   :else (first args)))", "problem": 78, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn tramp [f & args]\n  (let [rec (apply f args)]\n    (loop [f rec]\n      (if (fn? f) (recur (f)) f))))", "problem": 78, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn [f & args]\n  (if (fn? f)\n    (recur (apply f args) [])\n    f))", "problem": 78, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (recur result [])\n      result)))", "problem": 78, "user": "502a5e59e4b09e8f859a9fbc"}, {"code": "(fn\n  [f & args]\n  (let [ff (apply f args)]\n    (loop [v ff]\n      (if (not= (read-string (str v)) v)\n        (recur (v))\n        v)\n      )))", "problem": 78, "user": "513fab65e4b00f13ea1bd891"}, {"code": "(fn [f & args]\n\t(loop [result (apply f args)]\n\t\t(if (fn? result)\n\t\t\t(recur (result))\n\t\t\tresult)))", "problem": 78, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn trmp [f init]\n  (letfn [(bounce [-f]\n             (if (ifn? -f)\n               (recur (-f))\n               -f))]\n    (bounce (f init))))", "problem": 78, "user": "51f9527fe4b09be9c177e549"}, {"code": "(fn [f & args]\n\t(loop [f (apply f args)]\n\t\t(if (fn? f)\n\t\t\t(recur (f))\n\t\t\tf)))", "problem": 78, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn tramp [f & args]\n  (cond (not (fn? f)) f\n        (empty? args) (tramp (f))\n        :else (tramp (apply f args))))", "problem": 78, "user": "51e00020e4b01188f0627534"}, {"code": "(fn [f & args] (let [p (apply f args)] ((fn t [a] (if (fn? a) (t (a)) a)) p)))", "problem": 78, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn [f & args] (loop [fctn (apply f args)] (if (fn? fctn) (recur (fctn)) fctn)))", "problem": 78, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn t [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn tramp [f x]\n  (loop [ret (f x)]\n    (if (fn? ret) (recur (ret)) ret)))", "problem": 78, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn\n  [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "problem": 78, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn tram\n  ([f]\n   (let [ans (f)]\n     (if (fn? ans)\n       (recur ans)\n        ans)))\n  ([f & args]\n   (tram #(apply f args))))", "problem": 78, "user": "52196842e4b0890f2f822bfa"}, {"code": "#(if (fn? %) (recur (apply % %&) []) %)", "problem": 78, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn my-trampoline [f & params]\n  (let [mid-result (apply f params)]\n    (if (fn? mid-result)\n      (apply my-trampoline mid-result [])\n      mid-result)))", "problem": 78, "user": "514fd753e4b0b449e54b8e00"}, {"code": "(fn tramtram [f arg]\n  (loop [f (f arg)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "problem": 78, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "(fn mytramp [f & args]\n  (let [result (apply f args)\n        aux (fn [f] (cond (fn? f) (recur (f)) :else f))]\n    (if (fn? result)\n      (aux result)\n      result\n      )\n    )\n  )", "problem": 78, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn tram [f m]  \n \t(let [val1 (if (= m []) (f) (f m ))] \n \t(if (fn? val1) (tram val1  []) \n \t\tval1)))", "problem": 78, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn [f & as]\n  (loop [r (apply f as)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn [f args]\n  (loop [g (f args)]\n    (if (fn? g) (recur (g)) g)))", "problem": 78, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "52487654e4b05ef8e38e63dc"}, {"code": "(fn tramp\n  ([f] (if (fn? f)\n         (recur (f))\n         f))\n  ([f & args] (tramp (apply f args))))", "problem": 78, "user": "523b82efe4b07becd5be21f0"}, {"code": "(fn tramp [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn tramp\n  [f & args]\n  (let [res (apply f args)]\n    (loop [f res]\n      (if (fn? f)\n        (recur (f))\n        f))))", "problem": 78, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(fn tramp\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tramp #(apply f args))))", "problem": 78, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn t \n  ([f a] (t (f a)))\n  ([f] (if (fn? f) (recur (t (f))) f)))", "problem": 78, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn [f & args]\n  (let [res (apply f args)]\n    (if (fn? res) (recur res nil) res)))", "problem": 78, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn my-trampoline [f & args]\n  (letfn [(aux\n           ([f args]\n            (aux (apply f args)))\n           ([f]\n            (if (fn? f)\n              (lazy-seq\n               (cons f\n                     (aux (f))))\n              (list f))))]\n    (last (aux f args))))", "problem": 78, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (apply r []))\n      r)))", "problem": 78, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn my-tramp [f x] \n  (loop [acc (f x)]\n    (if (not (fn? acc)) acc\n      (recur (acc)))))", "problem": 78, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn my-trampoline\n  ([f & args]\n     (my-trampoline (apply f args)))\n  ([f]\n     (if (fn? f)\n       (recur (f))\n       f)))", "problem": 78, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (ifn? r)\n\t     (recur (r))\n\t\t r)))", "problem": 78, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (ifn? f)\n      (recur (f))\n      f)))", "problem": 78, "user": "524b90fae4b09eba1c0223df"}, {"code": "(fn ! [f & a] (let [r (apply f a)] (if (fn? r) (! r) r)))", "problem": 78, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn tram\n  ([f] (let [r (f)]\n         (if (ifn? r) (tram r) r)))\n  ([f & args] (tram #(apply f args))))", "problem": 78, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "problem": 78, "user": "52361d84e4b05f3be1c7c8e5"}, {"code": "(fn [f & x] \n  (if (fn? f)\n    (recur (apply f x) nil)\n    f))", "problem": 78, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "(fn tramp\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tramp #(apply f args))))", "problem": 78, "user": "50aa60bee4b056ee01935865"}, {"code": "(fn t ([f] (let [r (f)] (if (fn? r) (recur r) r)))\n    ([f & args]\n  \t (let [r (apply f args)]\n     (if (fn? r)\n       (t r)\n       r))))", "problem": 78, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn tr\n  ([x] (if (fn? x) (recur (x)) x))\n  ([f & args] (tr (apply f args))))", "problem": 78, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [func & args]\n    (let [new-val (apply func args)]\n      (if (fn? new-val)\n        (recur new-val nil)\n        new-val)\n      )\n    )", "problem": 78, "user": "52213426e4b0e6a83c8925c4"}, {"code": "(fn tr [f & rest]\n  (if (fn? f)\n    (tr (apply f rest))\n    f\n    )\n  )", "problem": 78, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn cust-tramp [f & args]\n  (let [result (apply f args)]\n    (loop [f result]\n      (if (fn? f)\n        (recur (f))\n        f))))", "problem": 78, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn t [f & args]\n  (cond\n   args (t (apply f args))\n   (fn? f) (t (f))\n   :else f))", "problem": 78, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn tramp\n  ([f]\t(if (fn? f) (recur (f)) f))\n  ([f & args] (tramp (apply f args))))", "problem": 78, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "(fn my-trampoline \n  ([f & args] (my-trampoline (apply f args)))\n  ([val] (if (fn? val) (recur (apply val [])) val)))", "problem": 78, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn __\n  [fn & args]\n  (loop [res (apply fn args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "52485723e4b05ef8e38e63d2"}, {"code": "(fn t [f & s]\n    (let [r (apply f s)]\n      (if (fn? r)\n        (t r)\n        r\n        )))", "problem": 78, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn t\n  ([f]\n     (let [r (f)]\n       (if (fn? r) (recur r) r)))\n  ([f & more]\n     (t #(apply f more))))", "problem": 78, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn tramp [f & args]\n    (loop [r (apply f args)]\n        (if (fn? r) \n            (recur (r))\n            r)))", "problem": 78, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "(fn [f args]\n  (let [r (f args)]\n    (loop [r r]\n      (if (fn? r)\n        (recur (r))\n        r))))", "problem": 78, "user": "523288fee4b035af41902a88"}, {"code": "(fn -trampoline [-fn  more]\n  (loop [-t (-fn more)]\n    (if (fn? -t) (recur (-t))\n        -t)\n    )\n  )", "problem": 78, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "problem": 78, "user": "524f213be4b0541d1855b7ff"}, {"code": "(fn tr\n       ([f a]\n         (tr (f a)))\n       ([f]\n         (if (fn? f) (tr (f))\n           f)))", "problem": 78, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn tram\n  ([f] (if (instance? clojure.lang.IFn f) (recur (f)) f))\n  ([f & args] (tram (apply f args))))", "problem": 78, "user": "51df825de4b01188f062752b"}, {"code": "(fn myTrampoline\n  [fun & params]\n  (loop [newFun (apply fun params)]\n    (if (not (fn? newFun))\n      newFun\n      (recur (newFun)))))", "problem": 78, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "(fn my-trampoline [ f & args]\n  (letfn[(tramp\n           [f]\n           (if(fn? f)\n               (recur (f))\n               f))]\n  (tramp (apply f args))))", "problem": 78, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn my-trampoline [f & args]\n  (loop [f f\n         args args]\n    (if (fn? f)\n      (recur (apply f args) [])\n      f)))", "problem": 78, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn [f & xs]\n  (->> (apply f xs)\n       (iterate #(apply % '()))\n       (drop-while fn?)\n       first))", "problem": 78, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn self [f & args]\n  (let [val-maybe (apply f args)]\n    (if (fn? val-maybe)\n      (self val-maybe)\n      val-maybe)))", "problem": 78, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn f [x & a]\n  (if (fn? x)\n    (f (apply x a))\n    x))", "problem": 78, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn tramp ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  \t([f & args]\n    \t(tramp #(apply f args))))", "problem": 78, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn t [f & a] (first (drop-while fn? (iterate #(if (fn? %1) (%1) %1) (apply f a)))))", "problem": 78, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn trampo [f & args]\n  (if (fn? f)\n    (if (empty? args)\n      (recur (f) '())\n      (recur (apply f args) '()))\n    f))", "problem": 78, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn trp [f & args]\n\t(let [x (apply f args)]\n      (if (fn? x)\n        (trp x)\n        x\n        )\n      )\n   )", "problem": 78, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn tramp [f & args]\n  (let [r (apply f args)]\n    (if (fn? r) (tramp r) r)))", "problem": 78, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [fun & args] (loop [f (apply fun args)] (if (fn? f) (recur (f)) f)))", "problem": 78, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [f n] (->> (f n) \n               (iterate #(if (fn? %) (%) %))\n               (drop-while fn?)\n               first))", "problem": 78, "user": "519ef784e4b087743fad2198"}, {"code": "(fn [f & args]\n  (let [g (fn g [r] (if (fn? r) (g (r)) r))]\n    (g (apply f args))))", "problem": 78, "user": "5078d366e4b08327cd804a5b"}, {"code": "(fn [f & args]\n        (loop [r (apply f args)]\n          (if (fn? r)\n            (recur (r))\n            r)))", "problem": 78, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn [f & x] (loop [r (apply f x)] (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn\n  [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "518c5236e4b087e178201de0"}, {"code": "(fn tramp [f & args]\n  (loop [ff #(apply f args)]\n    (if (ifn? ff)\n      (recur (ff))\n      ff)))", "problem": 78, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn tra\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tra #(apply f args))))", "problem": 78, "user": "5243e37ae4b076204b44fae3"}, {"code": "(fn [f & args]\n  (letfn [(util [g] \n       (let [ret (g)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))]\n    (util #(apply f args))))", "problem": 78, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn [ f & args ]\n     (if \n         (ifn? f)\n       (recur (apply f args) ())\n       f\n       ))", "problem": 78, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn [f & args]\n  (if (fn? f)\n    (recur (apply f args) nil)\n    f))", "problem": 78, "user": "529f71aae4b04e0c58e87bac"}, {"code": "(fn tramp [f & args]\n  (loop [f (apply f args)]\n\t  (if (ifn? f)\n    \t(recur (f))\n        f)))", "problem": 78, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn trmp [f & args]                                                                                                 \n  (let [r (apply f args)]                                                                                           \n    (loop [r' r]                                                                                                    \n      (if (fn? r') (recur (r'))                                                                                     \n          r')))                                                                                                     \n  )", "problem": 78, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn [f & args]\n  (loop [thing (apply f args)]\n    (if (fn? thing)\n      (recur (thing))\n      thing)))", "problem": 78, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "(fn t\n  ([f & args] (t (apply f args)))\n  ([f] (if (fn? f) \n         (recur (f))\n         f)))", "problem": 78, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn tramp [f & args]\n  (loop [f f args args]\n    (if (fn? f)\n      (recur (apply f args) [])\n      f)))", "problem": 78, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn [f & args]\n    (loop [r (apply f args)]\n      (if (not (fn? r)) r\n        (recur (r))\n      )\n    )\n)", "problem": 78, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn [f & args]\n  (loop [loopf (apply f args)]\n    (if (fn? loopf)\n      (recur (loopf))\n      loopf)))", "problem": 78, "user": "528652fbe4b0239c8a67ae14"}, {"code": "#((fn t [%]\n    (if (fn? %)\n      (t (%))\n      %))\n  (% %2))", "problem": 78, "user": "51ad244fe4b09397d510977f"}, {"code": "#(if (ifn? %) (recur (apply % %&) nil) %)", "problem": 78, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn [f & xs]\n  (let [fst (apply f xs)\n        rec #(if (fn? %) (recur (%)) %)]\n    (rec fst)))", "problem": 78, "user": "50645e12e4b007509339a58a"}, {"code": "(fn tramp \n    ([arg]\n    (let [f (arg)]\n      (if (fn? f)\n        (recur f)\n        f)))\n    ([f & args]\n     (tramp (fn [] (apply f args)))))", "problem": 78, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn my-trampoline [f & args]\n  (let [my-result (apply f args)]\n    (if (fn? my-result)\n      (my-trampoline my-result)\n      my-result)))", "problem": 78, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn self [f & args] (if (fn? f) (self (apply f args)) f))", "problem": 78, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "(fn tramp\n  ([f] (if (fn? f) (tramp (f)) f))\n  ([f x] (tramp #(f x))))", "problem": 78, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn [f & args]\n    (let [rtn (apply f args)]\n      (if (fn? rtn)\n        (recur rtn '())\n        rtn)))", "problem": 78, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn [f & args]\n  (loop [f-result (apply f args)]\n    (if-not (fn? f-result)\n      f-result\n      (recur (f-result)))))", "problem": 78, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "(fn n78\n  ([f] (let [r (f)] (if (fn? r) (recur r) r)))\n  ([f & args] (n78 #(apply f args))))", "problem": 78, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn [f & as]\n  (loop [f (apply f as)]\n    (if (fn? f)\n      (recur (apply f nil))\n      f\n      )\n    )\n  )", "problem": 78, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn tr [f & xs]\n  (if (fn? f)\n    (tr (apply f xs))\n    f))", "problem": 78, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v)\n      (recur (apply v []))\n      v)))", "problem": 78, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn t [f & a]\n  (let [r (apply f a)]\n    (if (fn? r) (t r) r)))", "problem": 78, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn tram [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "problem": 78, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn tramp [f & args]\n    (loop [res (apply f args)]\n        (if (fn? res)\n            (recur (res))\n            res\n        )\n    )\n)", "problem": 78, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "(fn tramp\n  [f & args]\n  (let [res (apply f args)]\n    (if (fn? res)\n      (recur res nil)\n      res)))", "problem": 78, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn [f & args]\n  (loop [val (apply f args)]\n    (if-not (fn? val)\n      val\n      (recur (val)))))", "problem": 78, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn [f & a] \n    (loop [ff (apply f a)] \n      (if (fn? ff)\n        (recur (ff))\n        ff)))", "problem": 78, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result) (recur (result)) result)))", "problem": 78, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(fn trmpol\n  ([f]\n    (let [r (f)]\n      (if (fn? r) (recur r) r)))\n  ([f & args]\n    (trmpol #(apply f args))))", "problem": 78, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn _ [f & args]\n  (let [f' (apply f args)]\n    (if-not (fn? f')\n      f'\n      (_ f'))))", "problem": 78, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn tramp [f & args]\n        (loop [f (apply f args)]\n          (if (fn? f)\n            (recur (f))\n            f)))", "problem": 78, "user": "5294e44de4b02ebb4ef75016"}, {"code": "#(let [v (apply % %&)] (if (ifn? v) (recur v ()) v))", "problem": 78, "user": "52bf29fde4b07a9af579232e"}, {"code": "(fn z ([f] (if (fn? f) (z (f)) f))\n      ([f & args] (z (apply f args))))", "problem": 78, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "(fn [f x]\n  (loop [v (f x)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "problem": 78, "user": "4f1c2a3a535d64f603146480"}, {"code": "(fn [f & args]\n  (loop [\n         i (apply f args)\n         ]\n    (if\n      (fn? i)\n      (recur (i))\n      i)))", "problem": 78, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn [f & args] (letfn [(exec [g] (if (fn? g)\n                                           (exec (g))\n                                           g))]\n                         (exec (apply f args))))", "problem": 78, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "(fn  [f & i]\n  (let [f (apply f i)]\n    (if (fn? f)\n      (recur f nil)\n      f)))", "problem": 78, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn [f & s]\n  (if (fn? f) (recur (apply f s) nil) f))", "problem": 78, "user": "51929214e4b08962174cf74c"}, {"code": "(fn reimplement-trampoline [f & args]\n  (letfn [(tr [f] \n            (loop [f f]\n               (if (fn? f)\n                 (recur (f))\n                 f)))]\n\n    (tr #(apply f args))))", "problem": 78, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn [f n] (letfn [(call [f] (if (fn? (f)) (call (f)) (f)))]\n               (if (fn? (f n)) (call (f n)) (f n))))", "problem": 78, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn supertramp [f & ps]\n  (let [s (fn [f] (if (fn? f) (recur (f)) f))]\n    (s (apply f ps))\n   ))", "problem": 78, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn t [f & args]\n  (let [r (apply f args)]\n    (if (fn? r) (t r) r)))", "problem": 78, "user": "52cc582ae4b07d0d72b27362"}, {"code": "(fn tramp [fun & args]\n  (let [result (apply fun args)]\n    (if (fn? result)\n        (tramp result)\n      \tresult)))", "problem": 78, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn tramp [f & args]\n  (let [res (apply f args)]\n    (if (fn? res)\n      (recur res [])\n      res)))", "problem": 78, "user": "522d0360e4b0806774ddfef7"}, {"code": "(fn [f & a] (#(if (fn? %) (recur (%)) %) (apply f a)))", "problem": 78, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn [f & args]\n          (loop [retval (apply f args)]\n                (if (not (fn? retval))\n                    retval\n                  (recur (retval)))))", "problem": 78, "user": "52d340ebe4b099d49816f0c1"}, {"code": "(fn t \n  ([f] (let [r (f)]\n            (if (fn? r)\n              (recur r)\n              r)))\n  ([f & a] (t #(apply f a))))", "problem": 78, "user": "52d02380e4b07d0d72b273b7"}, {"code": "(fn my-trampoline [x & varargs]\n  (let [res (apply x varargs)]\n    (if (fn? res)\n      (my-trampoline res)\n      res\n      ))\n  )", "problem": 78, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn __ [f & args]\n  (let [ret (apply f args)]\n    (if (fn? ret)\n      (__ ret)\n      ret)))", "problem": 78, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn t  ([f] (let [r (f)] (if (fn? r) (recur r) r)))\n  \t   ([f & a] (t #(apply f a))))", "problem": 78, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "(fn [f & xs]\n  (loop [r (apply f xs)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn [x & args]\n  (loop [x (apply x args)]\n    (if (fn? x)\n      (recur (x))\n      x)))", "problem": 78, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn tramp [f & more]\n  (if (fn? f) (tramp (apply f more)) f))", "problem": 78, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn test [f & args]\n  (loop [r (apply f args)] (if (fn? r) (recur (r)) r))\n  )", "problem": 78, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "(fn p\n  ([f]\n     (if (fn? (f))\n       (p (f))\n       (f)))\n  ([f & a]\n     (p #(apply f a))))", "problem": 78, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "#(let [r (apply % %&)]\n    (if (fn? r)\n      (recur r nil)\n      r))", "problem": 78, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn f ([g] (let [t (g)] (if (fn? t) (recur t) t))) ([g & a] (f #(apply g a))))", "problem": 78, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn [f v]\n  (loop [r (f v)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "problem": 78, "user": "52976262e4b02ebb4ef75041"}, {"code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (not (fn? result))\n      result\n      (recur (result))\n      )\n    )\n  )", "problem": 78, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f\n      )\n    )\n  )", "problem": 78, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [f & args]\n  (loop [f #(apply f args)]\n    (let [result (f)]\n      (if (ifn? result)\n        (recur result)\n        result))))", "problem": 78, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x)\n      (recur (x))\n      x)))", "problem": 78, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "(fn i\n  [f & xs]\n  (let [v (if-let [[l] xs] (f l) (f))]\n    (if (fn? v) (i v) v)))", "problem": 78, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn t \n  ([f] (let [r (f)]\n         (if (fn? r)\n           (recur r)\n           r)))\n  ([f & a] (t #(apply f a))))", "problem": 78, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn [f a]\n  (loop [r (f a)]\n    (if (fn? r) (recur (r)) r)))", "problem": 78, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if-not (fn? r)\n      r\n      (recur (r)))))", "problem": 78, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn trample [f & args]\n  (loop [ff #(apply f args)]\n    (let [ret (ff)]\n      (if (fn? ret) (recur ret) ret))))", "problem": 78, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "(fn tr [& args] (let [r (apply (first args) (rest args))] (if (fn? r) (recur [r]) r)))", "problem": 78, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn\n  [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "52fcfeeee4b047fd55837027"}, {"code": "(fn my-trampoline [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "problem": 78, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn jump [f & args] \n\t(let [next (apply f args)] \n\t\t(if (fn? next)(jump next) next )))\n\n;(fn jump [f & args] \n;\t(loop [next (apply f args)] \n;\t\t(if (fn? next) (recur (next)) next)))", "problem": 78, "user": "5307e4ece4b02e82168697a9"}, {"code": "#(loop [r (apply % %&)]\n\t(if (fn? r) (recur (r)) r))", "problem": 78, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn tramp \n  ([f & args] (tramp (apply f args)))\n  ([f] (if (fn? f)\n         (recur (f))\n         f)))", "problem": 78, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn [func & args]\n  (let [primeiro-elemento (apply func args)]\n    (if (fn? primeiro-elemento)\n      ((last (take-while fn? (iterate #(%) (apply func args)))))\n      primeiro-elemento)))", "problem": 78, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn t[f & v]\n    (if (fn? f)\n        (t (apply f v)) f))", "problem": 78, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn tramp [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "52d3f666e4b09f7907dd1327"}, {"code": "(fn mytrampoline ([op x] (let [res (op x)]\n                  (if (not (fn? res))\n                    res\n                    (mytrampoline res))))\n       ([op] (let [res (op)]\n                 (if (not (fn? res))\n                   res\n                   (mytrampoline res)))))", "problem": 78, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn my-trampoline[f & more]\n\t(loop  [result (apply f more)]\n\t\t(if (fn? result)\n\t\t\t(recur (result))\n\t\t\tresult\n\t\t)\n\t)\n)", "problem": 78, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn my-trampoline [f & xs] (if (fn? (apply f xs)) (my-trampoline (apply f xs)) (apply f xs)))", "problem": 78, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn yar \n  ([f] \n    (let [ret (f)]\n      (if (fn? ret)\n        (recur ret)\n        ret)))\n  ([f & args]\n     (yar #(apply f args)))\n  )", "problem": 78, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "(fn trampoline2 [f & args]\n  (cond \n    (and args (fn? f)) (trampoline2 (apply f args))\n    (fn? f) (trampoline2 (f))\n    :else f)\n  )", "problem": 78, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn my-trampoline [f & args]\n  (if (fn? f)\n    (recur (apply f args) nil)\n    f))", "problem": 78, "user": "5310e7aee4b08068f379ecdc"}, {"code": "#((fn r [x]\n    (if (fn? x) (r (x)) x))\n  (% %2))", "problem": 78, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn my-trampoline\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (my-trampoline #(apply f args))))", "problem": 78, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn tramp [f & args]\n  (loop [rez (apply f args)]\n    (if (fn? rez)\n      (recur (rez))\n      rez)))", "problem": 78, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn tramp [f & args]\n  (loop [f #(apply f args)]\n    (if (fn? f) (recur (f))\n      f)))", "problem": 78, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn mytramp [f & ps]\n  (let [r (apply f ps)]\n    (if (fn? r)\n      (mytramp r)\n      r\n    )\n  )\n)", "problem": 78, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn tramp [f & args]\n  (loop [res (apply f args)]\n    (if (ifn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn [f & args]\n        (loop [g (apply f args)]\n          (if (ifn? g)\n            (recur (g)) g)))", "problem": 78, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn [f & args]\n  (letfn [(tram [f] (if (fn? f) (tram (f)) f))]\n    (tram (apply f args))))", "problem": 78, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn trampoline-new [f & args]\n  (loop [value (apply f args)]\n    (if (fn? value)\n      (recur (value))\n      value)))", "problem": 78, "user": "531c0619e4b08068f379ed98"}, {"code": "(fn my-trampoline [f & args]\n   (loop [result (apply f args)]\n     (if (fn? result)\n       (recur (result))\n       result)))", "problem": 78, "user": "53070615e4b02e821686979e"}, {"code": "(fn boing [f & params] \n   (loop [r (apply f params)]\n     (if (not (fn? r))\n       r\n       (recur (r)))))", "problem": 78, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(fn [f v]\n  (loop [fc (f v)]\n    (if (ifn? fc) (recur (fc)) fc)))", "problem": 78, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn trampoline2 [f & args]\n (if \n   (fn? f) \n   (trampoline2 (apply f args)) f))", "problem": 78, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [f & args]\n\t(loop [f (apply f args)]\n\t\t(if (fn? f) (recur (f)) f)))", "problem": 78, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn newtrampoline [f & x]\n        (if (not (fn? (apply f x)))\n          (apply f x)\n          (newtrampoline (apply f x))))", "problem": 78, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn tr [f & args]\n  (loop [ff (apply f args)]\n    (if (ifn? ff)\n      (recur (ff))\n      ff)))", "problem": 78, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn ff[f & args] (let [x (apply f args)] (if (fn? x) (ff x) x)))", "problem": 78, "user": "531f1e63e4b08068f379edc2"}, {"code": "#(let [r (apply % %&)]\n    (if (fn? r)\n      (recur r [])\n      r))", "problem": 78, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "(fn [f & args]\n        (loop [r (apply f args)]\n          (if (fn? r)\n            (recur (r))\n            r)))", "problem": 78, "user": "53034738e4b0d8b024fd373e"}, {"code": "(fn tramp [f & args]\n  (let [r (apply f args)]\n    (if (fn? r) (tramp r) r)))", "problem": 78, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "(fn trampoline*\n  ([f & args] (trampoline* #(apply f args)))\n  ([f] (let [ret (f)] (if (fn? ret) (recur ret) ret))))", "problem": 78, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn [f & args]\n  (loop [maybe-fn (apply f args)]\n    (if (fn? maybe-fn)\n      (recur (maybe-fn))\n      maybe-fn)))", "problem": 78, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "(fn pr78\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n   ([f & args]\n    (pr78 #(apply f args))))", "problem": 78, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn t \n  ([f] (let [r (f)]\n            (if (fn? r)\n              (recur r)\n              r)))\n  ([f & a] (t #(apply f a))))", "problem": 78, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn\n  [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "50436470e4b034ff00315d23"}, {"code": "(fn [g & l] (letfn [(tramp [f args] (if (fn? f) (if (empty? args) (tramp (f) []) (tramp (apply f args) [])) f))] \n              (tramp g l)))", "problem": 78, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn tramp\n  ([f] (let [x (f)] (if (fn? x) (recur x) x)))\n  ([f & args] (tramp #(apply f args))))", "problem": 78, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn tramp [f & args]\n  (->> (apply f args)\n       (iterate #(%))\n       (drop-while ifn?)\n       first))", "problem": 78, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn [f & xs]\n  (loop [r (apply f xs)]\n    (if (not (fn? r))\n      r\n      (recur (r)))))", "problem": 78, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [f x]\n  (loop [x (f x)]\n    (if (fn? x) (recur (x)) x)))", "problem": 78, "user": "53460d02e4b084c2834f4a39"}, {"code": "#(let [v (apply % %&)]\n        (if (fn? v) (recur v nil) v))", "problem": 78, "user": "4e705861535d5021c1a89635"}, {"code": "(fn [f x]\n  (loop [fx (f x)]\n    (if (fn? fx)\n      (recur (fx))\n      fx)))", "problem": 78, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn [f & args]\n  (let [g (apply f args)]\n    (if-not (fn? g)\n      g\n      (recur g nil))))", "problem": 78, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn me [f & p]\n  (loop [r (apply f p)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn [f & xs]\n  (loop [n (apply f xs)]\n    (if (fn? n)\n      (recur (n)) n)))", "problem": 78, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(fn my-tramp\n     [f & args]\n     (loop [x (apply f args)]\n       (if (fn? x)\n         (recur (x))\n         x)))", "problem": 78, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn t\n  ([f]\n   (let [r (f)]\n     (if (fn? r)\n       (recur r)\n       r)))\n  ([f & a]\n   (t #(apply f a))))", "problem": 78, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g)\n      (recur (g))\n      g)))", "problem": 78, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(fn [f & a]\n  (loop [t (apply f a)]\n    (if (fn? t) (recur (t))\n      t)))", "problem": 78, "user": "5175533fe4b0dea9bbfba575"}, {"code": "(fn own-trampoline [f & args]\n  (loop [v (if (empty? args) (f) (apply f args))]\n    (if-not (fn? v)\n      v\n      (recur (v))\n      )))", "problem": 78, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn [f & args]\n  (loop [acc (apply f args)]\n    (if (ifn? acc)\n      (recur (acc))\n      acc)))", "problem": 78, "user": "52fb64b7e4b047fd55837009"}, {"code": "(fn [f & args] (loop [x (apply f args)] (if (fn? x) (recur (x)) x)))", "problem": 78, "user": "531f7a2de4b08068f379edc6"}, {"code": "(fn [f & args]\n  (let [res (apply f args)]\n    (if (fn? res) (recur res nil) res)))", "problem": 78, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn [f & args]\n  (loop [f? (apply f args)]\n    (if (fn? f?) (recur (f?)) f?)))", "problem": 78, "user": "533f09e1e4b085b17e897d9a"}, {"code": "(fn tramp\n  ([f & args] (tramp (apply f args)))\n  ([f]\n     (if (fn? f)\n       (recur (f))\n       f)))", "problem": 78, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn g [f & r]\n  (if (fn? f) (g (apply f r)) f))", "problem": 78, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn [f & args]\n  (if (fn? f)\n    (recur (apply f args) '())\n    f))", "problem": 78, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn tramp ([f] (if (instance? clojure.lang.IFn f) (tramp (f)) f))\n  ([f & x] (if (= 0 (first x)) true (tramp ((apply f x))))))", "problem": 78, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn [f & args]\n  (loop [result #(apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "problem": 78, "user": "5312cdaae4b08068f379ed03"}, {"code": "(fn my-trampoline [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (my-trampoline r)\n      r)))", "problem": 78, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn\n  [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))\n\n; https://github.com/qiuxiafei/4clojure/blob/master/answers/78.%20Reimplement%20Trampoline.clj", "problem": 78, "user": "5349da55e4b084c2834f4a68"}, {"code": "(fn [x & xs]\n\t(loop [r (apply x xs)]\n\t\t(if (fn? r) (recur (r)) r)))", "problem": 78, "user": "52bf6946e4b07a9af5792334"}, {"code": "(fn [f & a]\n  (loop [r (apply f a)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn [f & args]\n    (loop [ret (apply f args)]\n      (if (fn? ret)\n        (recur (ret))\n        ret)))", "problem": 78, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn [f & args]\n    (loop [result (apply f args)]\n      (if (not (fn? result))\n        result\n        (recur (result)))))", "problem": 78, "user": "53487737e4b084c2834f4a59"}, {"code": "#(loop [f (%1 %2)]\n  (if (fn? f)\n    (recur (f))\n    f))", "problem": 78, "user": "53513d28e4b084c2834f4ae3"}, {"code": "#(loop [f (apply % %&)] (if (fn? f) (recur (f)) f))", "problem": 78, "user": "534bde26e4b084c2834f4a81"}, {"code": "(fn tramp\n\t  [f & args]\n\t  (let [v (apply f args)]\n\t    (if \n\t      (fn? v)\n\t  \t  (tramp v)\n\t      v)))", "problem": 78, "user": "536aa86de4b0243289761eb1"}, {"code": "(fn tram\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tram #(apply f args))))", "problem": 78, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn tramp\n    ([f h & r] (tramp (apply f (conj r h))))\n    ([a] (if (fn? a)\n           (recur (a))\n           a)))", "problem": 78, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "(fn tr\n  ([f]\n     (let [r (f)]\n       (if (fn? r)\n         (recur r)\n         r)))\n  ([f & args]\n     (tr #(apply f args))))", "problem": 78, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn [f & args]\n  (loop [f f\n         args args]\n    (let [result (apply f args)]\n      (if (fn? result)\n        (recur result [])\n        result\n        )\n      )\n    )\n  )", "problem": 78, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn my-trampoline [f & args] \n  (if (fn? f)\n    (my-trampoline (apply f args))\n    f))", "problem": 78, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn [func & args]\n  (first (drop-while #(fn? %)\n                     (iterate #(%)\n                              (apply func args)))))", "problem": 78, "user": "5225271fe4b01819a2de42f9"}, {"code": "#(loop [f (apply % %&)] (if (fn? f) (recur (f)) f))", "problem": 78, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn tramp [f & args]\n  (if (fn? f)\n    (recur (apply f args) '())\n    f))", "problem": 78, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn [f & args]\n    (loop [applied (apply f args)]\n      (if (fn? applied) (recur (applied))\n          applied)))", "problem": 78, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "(fn _trampoline [f & args]\n  (if (fn? f)\n    (recur (apply f args) ())\n    f))", "problem": 78, "user": "53834ed3e4b06839e8705edb"}, {"code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "problem": 78, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn foo\n  ([f]\n     (let [r (f)]\n       (if (fn? r)\n         (recur r)\n         r)))\n  ([f & args]\n     (foo #(apply f args))))", "problem": 78, "user": "536a37efe4b0243289761eaa"}, {"code": "(fn [fn-or-val & xs]\n  (if (fn? fn-or-val)\n    (recur (apply fn-or-val xs) ())\n    fn-or-val))", "problem": 78, "user": "53800d99e4b06839e8705ebd"}, {"code": "(fn [f & a]\n  (loop [r (apply f a)] \n    (if (fn? r)\n      (recur (r))\n      r)))", "problem": 78, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn bounce \n  ([f] \n   (if (not (fn? f)) \n     f \n     (bounce (f))))\n  ([f x] \n   (bounce (f x))))", "problem": 78, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn t8 [f & args]\n  (let [r (apply f args)]\n    (loop [res r]\n      (if (not (instance? clojure.lang.IFn res))\n        res\n        (recur (res))))))", "problem": 78, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn tramp\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tramp #(apply f args))))", "problem": 78, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn a1 \n  ([a & b] (a1 (apply a b)))\n  ([a] (if (fn? a)\n         (a1 (a))\n         a)))", "problem": 78, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn T [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (apply T r [])\n      r)))", "problem": 78, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "#(loop [f (%1 %2)]\n  (if (fn? f)\n    (recur (f))\n    f))", "problem": 78, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (and (instance? clojure.lang.IFn v)\n             (not (coll? v)))\n      (recur (v))\n      v)))", "problem": 78, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn trmpl [f & args]\n  (let [x (apply f args)]\n    (if (ifn? x) (trmpl x) x)))", "problem": 78, "user": "530bf87ee4b02e82168697d5"}, {"code": "(fn [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g)\n      (recur (g))\n      g)))", "problem": 78, "user": "537e745ae4b06839e8705ea6"}, {"code": "(fn [f & args]\n  (letfn [(trapo [x]\n                 (if-not (fn? x)\n                   x\n                   (recur (x))))]\n    (trapo (apply f args))))", "problem": 78, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "(fn __ [f & args]\n  (loop [fun #(apply f args)]\n    (let [res (fun)]\n      (if (fn? res) (recur res) res))))", "problem": 78, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn my-trampoline [f & args]\n  (let [app (apply f args)]\n    (loop [a app]\n      (if (fn? a)\n        (recur (a))\n        a))))", "problem": 78, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn\n  [f & args]\n  (let [ret1 (apply f args)]\n    (loop [ret ret1]\n      (if (fn? ret)\n          (recur (ret))\n          ret))))", "problem": 78, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn [f & args]\n  (loop [x f a args]\n    (if (not (fn? x)) x\n      (recur (apply x a) '()))))", "problem": 78, "user": "53a1b5c8e4b0ca733b9744c1"}, {"problem": 78, "code": "(fn [f & a]\n     (loop [r #(apply f a)]\n       (if (fn? (r)) (recur (r)) (r))))", "user": "53976599e4b0b51d73faaeea"}, {"problem": 78, "code": "(fn t [ f & args]\n  (->> (apply f args) (#(if (fn? %) (t %) %))))", "user": "5398305fe4b0b51d73faaef6"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g)\n      (recur (g))\n      g)))", "user": "533018b2e4b019098a6f8b56"}, {"problem": 78, "code": "(fn [x & a]\n  (if (fn? x)\n      (recur (apply x a) nil)\n      x))", "user": "4ec53f8c535d6d7199dd368b"}, {"problem": 78, "code": "(fn my-tramp [ f & args]\n  (let [res (apply f args)]\n    (if (ifn? res)\n      (my-tramp res)\n      res)))", "user": "4ddb696b535d02782fcbe9fa"}, {"problem": 78, "code": "(fn tramp\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tramp #(apply f args))))", "user": "53973e7be4b0b51d73faaee6"}, {"problem": 78, "code": "(fn f [f & as]\n  (loop [ret (apply f as)]\n    (if (fn? ret)\n      (recur (ret))\n      ret)))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 78, "code": "(fn [f & a] (let [v (apply f a)] (if (fn? v) (recur v '()) v)))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v) (recur (v)) v)))", "user": "537f4652e4b06839e8705eb1"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [val (apply f args)]\n    (if (fn? val)\n      (recur (val))\n      val)))", "user": "532bce35e4b09d4e7a9b5536"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (let [res (apply f args)]\n    (if (fn? res)\n      (tramp res)\n      res)))", "user": "5396c94be4b0b51d73faaee3"}, {"problem": 78, "code": "(fn tram [f x]\n  ((fn [f]\n    (if (fn? f)\n      (recur (f))\n      f\n      )\n    ) #(f x))\n)", "user": "5245e320e4b09dbe66b56177"}, {"problem": 78, "code": "(fn t [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (t r)\n      r)))", "user": "53ae16e2e4b047364c044472"}, {"problem": 78, "code": "(fn tramp [f & xs] \n  (let [result (apply f xs)]\n    (if (fn? result) (tramp result) result)))", "user": "534d1173e4b084c2834f4a98"}, {"problem": 78, "code": "(fn [f & args]\n  (let [seqize (fn ize [f] (cons f (lazy-seq (ize (f)))))]\n    (first (drop-while ifn? (seqize (apply f args))))))", "user": "53908e6be4b0b51d73faae9a"}, {"problem": 78, "code": "(fn my-trampoline\n  [f & args]\n  (let [first-result (apply f args)]\n    (loop [result first-result]\n      (if (fn? result)\n        (recur (result))\n        result))))", "user": "53ac4719e4b047364c04445c"}, {"problem": 78, "code": "(fn [fx & args]\n  (loop [r (apply fx args)]\n    (cond (not (fn? r)) r\n          :else (recur (apply r nil)))))", "user": "538e36c7e4b0b51d73faae81"}, {"problem": 78, "code": "(fn trmp [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r) (recur (r)) r)))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n\t(loop [res (apply f args)]\n\t\t(if-not (fn? res) \n\t\t\tres\n\t\t\t(recur (res)))))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 78, "code": "(fn my-tramp [f & args]\n\t(let [ret (apply f args)]\n\t\t(loop [start ret]\n\t\t(if (not (fn? start)) start\n\t\t\t(recur (start))))))", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 78, "code": "(fn trmpln [f & args]\n  (let [r (apply f args)]\n    (if (fn? r) (trmpln r) r)))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [first-result (apply f args)]    \n    (loop [bounced first-result]\n      (if (ifn? bounced) \n        (recur (bounced))\n        bounced))))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r) )\n      r)))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 78, "code": "(fn tramp [x & args]\n  (loop [y (apply x args)]\n    (if (fn? y) (recur (y))\n      y)))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 78, "code": "(fn [f & args]\n       (loop [r (apply f args)]\n         (if (fn? r)\n           (recur (r))\n           r)))", "user": "538db083e4b0b51d73faae74"}, {"problem": 78, "code": "(fn [f & args]\n    (if (fn? f)\n      (recur (apply f args) [])\n      f))", "user": "4f867b25e4b033992c121c51"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [ret (apply f args)]\n    (if (fn? ret)\n      (my-trampoline ret)\n      ret)))", "user": "52efd3d9e4b05e3f0be25ed4"}, {"problem": 78, "code": "(fn [f & as]\n  (loop [r (apply f as)]\n    (if (fn? r) \n      (recur (r))\n      r)))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 78, "code": "(fn [f & x]\n  (loop [y (apply f x)]\n    (if (fn? y)\n      (recur (y))\n      y\n      )\n    )\n  )", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 78, "code": "(fn myt\n   ([f & args] (myt (apply f args)))\n   ([f] (if (fn? f) (recur (f)) f)))", "user": "535eaa73e4b04ce2eb3ed2d4"}, {"problem": 78, "code": "(fn\n  [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "53da19fde4b0e771c3025484"}, {"problem": 78, "code": "(fn tp\n  ([f arg]\n    (let [r (f arg)]\n      (if (fn? r)\n        (tp r)\n        r\n      )\n    )\n  )\n  ([f]\n    (let [r (f)]\n      (if (fn? r)\n        (recur r)\n        r\n      )\n    )\n  )\n)", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f1 (apply f args)]\n    (if (fn? f1) (recur (f1)) f1)))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 78, "code": "(fn [f & args] ((fn [x] (if (fn? x) (recur (x)) x)) (apply f args)))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 78, "code": "(fn [f & args] \n  (loop [fx (apply f args)]\n    (if (fn? fx)\n      (recur (fx))\n      fx)))", "user": "51aab611e4b04e3dc0c27b2d"}, {"problem": 78, "code": "(fn tr [f & args]\n  (loop [state (apply f args)]\n    (if (fn? state)\n      (recur (state))\n      state)))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 78, "code": "(fn ff\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (ff #(apply f args))))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 78, "code": "(fn my-trampoline \n  ([f args]\n    (if (fn? (f args))\n      (my-trampoline (f args))\n      (f args)))\n  ([f]\n   (if (fn? (f))\n     (my-trampoline (f))\n     (f))))", "user": "53791ab7e4b06839e8705e4d"}, {"problem": 78, "code": "(fn tramp([f]\n   (if (not (fn? f)) f\n  (if (fn? (f))\n    (tramp (f))\n    (f))))\n  ([f x ]\n  (tramp (f x ))))", "user": "4e8849c5535d8b9bb0147ca4"}, {"problem": 78, "code": "(fn tramp [f & x]\n  (let [result (apply f x)]\n    (if (fn? result)\n      (recur result ())\n      result)))", "user": "532c9dc9e4b019098a6f8b30"}, {"problem": 78, "code": "(fn [f i]\n    (letfn [(rt [t-fn-or-val]\n              (if (fn? t-fn-or-val)\n                (rt (t-fn-or-val))\n                t-fn-or-val))]\n      (rt (f i))))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f1 (apply f args)]\n    (if (fn? f1) (recur (f1))\n      f1)))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [ff (apply f args)]\n    (if (fn? ff)\n      (recur (ff))\n      ff)))", "user": "53f7820be4b0de5c41848560"}, {"problem": 78, "code": "(fn [f & args] (loop [r (apply f args)] (if (fn? r) (recur (r)) r)))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 78, "code": "(fn [y z] ((fn peu [x] (if (fn? x) (peu (x)) x)) (y z)))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 78, "code": "(fn\n  [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "53f75957e4b0de5c4184855d"}, {"problem": 78, "code": "(fn mytramp [f & args]\n        (if (ifn? f)\n          (mytramp (apply f args))\n          f)\n       )", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 78, "code": "(fn t[x & z]\n  (if(seq z)\n    (t(apply x z))\n    (if(fn? x)\n      (t (x))\n      x)))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 78, "code": "(fn t\n  ([f] (let [r (f)] (if (fn? r) (recur r) r)))\n  ([f & args] (t #(apply f args))))", "user": "506ba58be4b0eda3100c090b"}, {"problem": 78, "code": "(fn [f & args] \n  (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "50856bd1e4b004985b776e4c"}, {"problem": 78, "code": "(fn tramp \n  ([x] (if (fn? x) (recur (x)) x))\n  ([x & args] (tramp #(apply x args))))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 78, "code": "(fn [func & coll]\n  (let [start (apply func coll)\n        results (iterate #(%) start)\n        filtered (filter #(not (instance? clojure.lang.IFn  %)) results)]\n    (first filtered)))", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 78, "code": "(fn\n  [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 78, "code": "(fn [f x] \n  (loop [g (f x)] (if (fn? g) (recur (g)) g)))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 78, "code": "(fn ! [x & xs] \n  (if (ifn? x) \n    (! (apply x xs))\n    x))", "user": "52faec2ee4b047fd55837004"}, {"problem": 78, "code": "(fn tr [f & args]\n    (loop [r (apply f args)]\n      (if (fn? r)\n        (recur (r))\n        r)))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [f-or-result (apply f args)]\n    (if-not (fn? f-or-result)\n      f-or-result\n      (recur (f-or-result)))))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 78, "code": "(fn [f0 & args] ((fn [f]\n                       (if (fn? f)\n                         (recur (f))\n                         f))\n                      (apply f0 args)))", "user": "51e28063e4b08e53a149f0f2"}, {"problem": 78, "code": "(fn tramp\n  [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (recur result nil)\n      result)))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 78, "code": "(fn trampoline1 [f & args]\n  (loop [a (apply f args)]\n    (if (fn? a) \n      (recur (a))\n      a)))", "user": "4ff4bed0e4b0678c553fc35f"}, {"problem": 78, "code": "(fn mm [x & args]\n  (let [res (apply x args)]\n    (if (fn? res)\n      (recur res ())\n      res)))", "user": "535f0cbde4b04ce2eb3ed2d9"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 78, "code": "(fn mytrampoline [f & args]\n  (let [retval (if args (apply f args) (f))]\n    (if (fn? retval)\n      (mytrampoline (apply f args))\n      retval)))", "user": "52747090e4b03e8d9a4a74a5"}, {"problem": 78, "code": "(fn [f & x]\n  (loop [g (apply f x)]\n    (if-not (ifn? g)\n      g\n      (recur (g))))\n  )", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 78, "code": "(letfn [(tramp [f & args]\n               (loop [result (apply f args)]\n                 (if (ifn? result)\n                   (recur (result))\n                   result)))]\n  tramp)", "user": "540470dae4b0addc1aec6658"}, {"problem": 78, "code": "(fn [f & params]\n  (loop [result (apply f params)]\n    (if (fn? result)\n      (recur (result))\n      result\n    )\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 78, "code": "(fn [fn & args]\n  (loop [result (apply fn args)]\n    (cond (not (fn? result)) result\n          :else (recur (result)))))", "user": "52fac708e4b047fd55836fff"}, {"problem": 78, "code": "(fn my-tramp\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (my-tramp #(apply f args))))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 78, "code": "#((fn t [f] (if (fn? f) (t (f)) f))\n   (apply % %&))", "user": "53500869e4b084c2834f4ad3"}, {"problem": 78, "code": "(fn [f & r]\n  (loop [x (apply f r)]\n    (if (fn? x)\n      (recur (x))\n      x)))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 78, "code": "(fn [ f & args]\n  (let [r (apply f args)]\n   (if (ifn? r)\n     (recur r ())\n     r)))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (not (fn? result))\n      result\n      (recur (result)))))", "user": "52c672e2e4b0c2d177d6210e"}, {"problem": 78, "code": "(fn my-trampoline [f & args] \n  (loop [r (apply f args)]\n    (if-not (fn? r) \n      r\n      (recur (r)))))", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 78, "code": "(fn [f & params]\n\t(loop [f (apply f params)]\n\t\t(if (fn? f) (recur (f)) f)\n\t)\n)", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 78, "code": "(fn [f & args]\n  (let [result (apply f args)]\n    (loop [r result]\n      (if (fn? r)\n      (recur (r))\n      r))))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 78, "code": "(fn my-trampoline [fsure & args]\n   (letfn [(func? [f] (and (ifn? f) (not (coll? f))))]\n     (loop [f (apply fsure args)]\n       (if-not (func? f)\n         f\n         (recur (f))))))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 78, "code": "(fn t [f & a] (if (fn? f) (t (apply f a)) f))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [ret (apply f args)]\n    (if (fn? ret)\n      (recur (ret))\n      ret)))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 78, "code": "(fn my-tramp [f & args]\n    (let [g (if (seq? args) (apply f args) (f))]\n      (if (fn? g)\n        (my-tramp g)\n        g\n        )))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 78, "code": "(fn my-tramp [f & args]\n        (if (fn? f) \n          (my-tramp (apply f args))\n          f))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 78, "code": "(fn t [f & a]\n  (if (fn? f)\n    (t (apply f a))\n    f))", "user": "51ab70c3e4b04e3dc0c27b33"}, {"problem": 78, "code": "(fn my-trampoline [func & params]\n  (loop [result (apply func params)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "528bba38e4b0239c8a67aea9"}, {"problem": 78, "code": "(fn _trampoline [f & xs]\n  (let [first-result (apply f xs)\n        body-func (fn [f] (if (fn? f) (recur (f)) f))]\n    (body-func first-result)))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 78, "code": "(fn _trp [f & args]\n         (if (fn? f)\n           (_trp (apply f args))\n           f))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 78, "code": "(fn t [f & args]\n  (loop [x (apply f args)]\n        (if (fn? x)\n            (recur (x))\n          x)))", "user": "51aefceee4b09397d5109797"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "54448e84e4b032a45b869393"}, {"problem": 78, "code": "(fn __ [f & n] \n  (let [x (apply f n)] \n    (if (fn? x)\n      (apply __ x [])\n      x)))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 78, "code": "#((fn r [%1]\n    (if (fn? %1) (r (%1)) %1))\n  (%1 %2))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [v (apply f args)]\n    (if (fn? v)\n      (my-trampoline v)\n      v)))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 78, "code": "(fn tram [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (tram r)\n      r)))", "user": "51e38568e4b0c611d6113e43"}, {"problem": 78, "code": "(fn [func & args]\n  (loop [res (apply func args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "53322cece4b019098a6f8b73"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [ft (apply f args)]\n    (println ft)\n    (if (fn? ft)\n      (recur (ft))\n      ft)))", "user": "5370d152e4b0fc7073fd6e9d"}, {"problem": 78, "code": "#((fn [f] (if (fn? f) (recur (f)) f)) (%1 %2))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [a (apply f args)]\n    (if (fn? a)\n      (recur (a))\n      a)))", "user": "4ec1b090535dfed6da9c6db5"}, {"problem": 78, "code": "(fn [a & b]\n  (loop [f (apply a b)]\n    (if (fn? f)\n      (recur (f))\n      f\n)))", "user": "54524afbe4b0e397800069bc"}, {"problem": 78, "code": "(fn bounce [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "5126dbabe4b083bb8f88cf0e"}, {"problem": 78, "code": "(fn jumpy-thing\n  ([f & args] (jumpy-thing (apply f args)))\n  ([x] (if (fn? x) (jumpy-thing (x)) x)))", "user": "505aa653e4b021387fb89857"}, {"problem": 78, "code": "(fn myfun\n  ([fun & val](let[y (apply fun  val) ](if(fn? y) (myfun y) y)))\n  ([fun](let[y (#(fun))](if (fn? y) (myfun y) y))))", "user": "52bbd09ee4b07a9af57922ee"}, {"problem": 78, "code": "(fn tramp ([f x] (tramp (f x) ))\n     ([f] (if (fn? f) (tramp (f)) f)))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 78, "code": "(fn tramp\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tramp #(apply f args))))", "user": "4ebbc1f6535dfed6da9c6d72"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g) (recur (g)) g)))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 78, "code": "(fn tr [f & args]\n  (if (ifn? f)\n    (tr (apply f args)) f))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 78, "code": "#(loop [t (apply % %&)] (if (fn? t) (recur (t)) t))", "user": "5464a536e4b01be26fd746cf"}, {"problem": 78, "code": "#(loop [f (%1 %2)]\n   (if (fn? f)\n     (recur (f))\n     f))", "user": "5136f659e4b04059df19f2fd"}, {"problem": 78, "code": "(fn tramp ([f]\n               (let [z (f)]\n                 (if (fn? z)\n                   (recur z)\n                   z)))\n  ([f & args]\n          (tramp #(apply f args))))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 78, "code": "(fn [f & args]\n  (if (fn? f) (recur (apply f args) []) f))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 78, "code": "(fn tramp\r\n  ([f] (if (fn? f) (recur (f)) f))\r\n  ([f & args] (tramp (apply f args))))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 78, "code": "(fn tramp2 [f & args]\n  (let [nextf (apply f args)]\n    (if (fn? nextf)\n      (tramp2 nextf)\n      nextf)))", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 78, "code": "(fn tramp [f & more]\n  (if (fn? f)\n    (tramp (apply f more))\n    f))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 78, "code": "(fn trampoline* [f & args]\n  (let [f (apply f args)]\n    (if (fn? f)\n      (trampoline* f)\n      f)))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 78, "code": "(fn trampoline1\n  ([f & args]\n   (trampoline1 (apply f args)))\n  ([f]\n   (if (fn? f) (recur (f)) f)))", "user": "54397533e4b032a45b86931d"}, {"problem": 78, "code": "(fn [f & params]\n  (loop [f f params params]\n    (if (fn? f)\n      (recur (apply f params) '())\n      f)))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 78, "code": "(fn [f & args] ((fn [x] (if (fn? x) (recur (x)) x)) (apply f args)))", "user": "5353afa0e4b084c2834f4b03"}, {"problem": 78, "code": "(fn [f & args] (loop [g (apply f args)] (if (fn? g) (recur (g)) g)))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [result (if args (apply f args) (f))]\n    (if (fn? result)\n         (my-trampoline result)\n         result)))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (if (fn? f)\n    (recur (apply f args) [])\n    f))", "user": "54857e3be4b0e286459a11ad"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g)\n      (recur (g))\n      g\n      )\n    )\n  )", "user": "5488872ee4b0e286459a11d3"}, {"problem": 78, "code": "(fn [f & args]\n  (let [r (apply f args)]\n    (if (ifn? r) (recur r []) r)))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 78, "code": "(fn trampo [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 78, "code": "(fn t [f & args] (if (fn? f) (t (apply f args)) f))", "user": "5472d919e4b094393f72dd7b"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f f args args]\n    (let [res (apply f args)]\n      (if (fn? res) (recur res nil) res))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 78, "code": "#(let [r (apply % %&)]\n   (if (fn? r)\n     (recur r nil)\n     r))", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 78, "code": "(fn f-78 [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (f-78 r)\n      r)))", "user": "53d86564e4b0e771c302546b"}, {"problem": 78, "code": "(fn tramp \n  ([f]\n    (let [ret (f)]\n      (if (fn? ret)\n        (recur ret)\n        ret\n      )\n    ) \n  )\n  ([f & args] (tramp #(apply f args)))\n)", "user": "545537c1e4b0e397800069dd"}, {"problem": 78, "code": "(fn tramp\n        ([f] (if (fn? f) (recur (f)) f))\n        ([f & params] (tramp (apply f params))))", "user": "51b24defe4b02f8f128bb963"}, {"problem": 78, "code": "(fn eh [f & x]\n  (cond\n   (not (fn? f)) f\n   (> (count x) 0) (eh (apply f x))\n   :else (eh (f))))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (let [res (apply f args)]\n    (if (fn? res)\n      (recur res [])\n      res)))", "user": "54577fefe4b01be26fd7460d"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [t (apply f args)]\n    (if (fn? t)\n        (recur (t))\n        t)))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 78, "code": "(fn [& args]\n(loop [a  args]\n  (if (fn? (first a))  (recur (list (apply (first a) (rest a)))) (first a)))\n)", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [func #(apply f args)]\n    (let [res (func)]\n      (if (fn? res) (recur res) res))))", "user": "512b07f7e4b078b06821febb"}, {"problem": 78, "code": "(fn mtramp \n  ([f & args] (let [r (apply f args)] (if (fn? r) (mtramp r) r)))\n  ([f] (let [r (f)] (if (fn? r) (mtramp r) r))))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 78, "code": "(fn [f & args] (loop [result (apply f args)] (if (fn? result) (recur (result)) result)))", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [ret (apply f args)]\n      (if (fn? ret)\n        (recur (ret))\n        ret)))", "user": "54848141e4b0e286459a119e"}, {"problem": 78, "code": "(fn [f & args]\n (loop [x (apply f args)]\n  (if (fn? x) (recur (x))\n              x)))", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 78, "code": "(fn tr\n      ([f] (let [ret (f)] (if (fn? ret) (recur ret) ret)))\n      ([f & args] (tr #(apply f args)))\n      )", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 78, "code": "(fn tr ([f]\n    (let [ret (f)]\n      (if (fn? ret)\n        (recur ret)\n        ret)))\n ([f & args]\n    (tr #(apply f args))))", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 78, "code": "(fn [f & xs]\n\t(loop [f (apply f xs)]\n\t\t(if (fn? f)\n\t\t\t(recur (f))\n          \tf)))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f]\n   (let [result (f)]\n     (if-not (instance? clojure.lang.IFn result)\n       result\n       (my-trampoline result))))\n  ([f & args] (my-trampoline #(apply f args))))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 78, "code": "(fn [f & args] \n  (loop [ret (apply f args)] \n    (if (fn? ret) \n      (recur (ret)) \n      ret)))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 78, "code": "(fn [f & a]\n  (let [z (apply f a)]\n    (loop [x z] \n      (if (fn? x) (recur (x))x))))", "user": "4fc8f671e4b0ee37620e1840"}, {"problem": 78, "code": "(fn [f & args] (let [r (apply f args)]\n                        (loop [ff r]\n                          (if-not (fn? ff)\n                            ff\n                            (recur (ff)))\n                        )))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 78, "code": "#(loop [g (apply %1 %&)]\n   (if-not (fn? g) \n     g \n     (recur (g))))", "user": "5339c105e4b0e30313ee6cae"}, {"problem": 78, "code": "(fn my-trampo [f & args]\n  (let [r (apply f args)] (if (fn? r) (my-trampo r) r)))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (if (fn? f)\n    (tramp (apply f args))\n    f))", "user": "544e9022e4b0e3978000698b"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n      (recur ret)\n      ret)))\n  ([f & args]\n   (my-trampoline #(apply f args))))", "user": "54b40fe6e4b05787c3b1638a"}, {"problem": 78, "code": "(fn mytrampo [f & args]\n  (loop [ret (apply f args)]\n    (cond\n      (fn? ret) (recur (ret))\n      :else ret)))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 78, "code": "(fn [f & s] ((fn [x] (if (fn? x) (recur (x)) x)) (apply f s)))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 78, "code": "(fn [f & args]\n    (let [r (apply f args)]\n        (loop [r r]\n            (if-not (ifn? r)\n                r\n                (recur (r))))))", "user": "511688d5e4b0b3e208dba05a"}, {"problem": 78, "code": "(fn [f & a] (let [g (apply f a)]\n                (if (fn? g) (recur g nil) g)))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 78, "code": "(fn [f & args] (loop [v (apply f args)] (if (fn? v) (recur (v)) v)))", "user": "52be58d7e4b07a9af579231d"}, {"problem": 78, "code": "(fn [f & a]\n    (let [r (apply f a)]\n      (if (fn? r)\n        (recur r '())\n        r \n        )\n      )\n    )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 78, "code": "(fn k\n  ([f a]\n    (let [r (f a)]\n      (if (fn? r)\n        (k r)\n        r)))\n  ([f]\n    (let [r (f)]\n      (if (fn? r)\n        (k r)\n        r))))", "user": "50f10f7be4b06d9538fe211a"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [v (apply f args)]\n      (if (fn? v)\n        (recur (v))\n        v)))", "user": "4f42c80ae4b0d7d3c9f3fd0f"}, {"problem": 78, "code": "(fn tramp\n  [func & args]\n  (let [result (apply func args)]\n    (if (fn? result)\n      (tramp result)\n      result)))", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 78, "code": "(fn __ [f & args]\n  (let [x (apply f args)]\n    (if (fn? x) (__ x)\n      x)))", "user": "54c271b9e4b045293a27f602"}, {"problem": 78, "code": "(fn tramp\n  ([f]\n   (loop [res-or-fn f]\n     (if (fn? res-or-fn)\n       (recur (res-or-fn))\n       res-or-fn)))\n  ([f & args]\n   (tramp (apply f args))))", "user": "5317d78ee4b08068f379ed63"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [ret (apply f args)]\n    (if-not (fn? ret)\n      ret\n      (recur (ret)))))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 78, "code": "(fn trampoline'\n  ([f & args]\n      (trampoline'\n       (apply f args)))\n  ([f] (if (fn? f)\n         (recur (f))\n         f)))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 78, "code": "(fn t ([f] (let [v (f)] (if (fn? v) (recur v) v))) ([f & args] (t #(apply f args))))", "user": "54c641f8e4b045293a27f628"}, {"problem": 78, "code": "(fn tramp\n  ([f] (let [ret (f)] (if (fn? ret) (tramp ret) ret)))\n  ([f & args] (tramp #(apply f args))))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 78, "code": "(fn [f & params]\n  (loop [res (apply f params)]\n    (if (ifn? res)\n      (recur (res))\n      res)))", "user": "52470d42e4b05ef8e38e6350"}, {"problem": 78, "code": "(fn t [f & a] (if-not (fn? f) f (t (apply f a))))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 78, "code": "(fn t [f & x]\n  (if (fn? f)\n    (t (apply f x))\n    f))", "user": "4f301d02e4b0d6649770a072"}, {"problem": 78, "code": "(fn trmp [ f & args]\n  (if (fn? f) \n    (trmp (apply f args))\n    f))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 78, "code": "(fn [f & xs]\n    (loop [ff (apply f xs)]\n      (if (fn? ff)\n        (recur (ff))\n        ff)))", "user": "4ee75ec2535d93acb0a66867"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (my-trampoline #(apply f args))))", "user": "511b9017e4b00c2a1fa7ff6b"}, {"problem": 78, "code": "#(loop [r (apply % %&)]\n   (if (fn? r) (recur (r)) r))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 78, "code": "(fn mytrampoline [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (mytrampoline result)\n      result)))", "user": "53664e3be4b0243289761e74"}, {"problem": 78, "code": "(fn t [f & args]\n  (if (fn? f) (t (apply f args))\n    f))", "user": "51b76227e4b0d906fcd71d35"}, {"problem": 78, "code": "(fn tramp\n     ([a b] (tramp (a b)))\n     ([a] \n        (if (fn? a)\n          (tramp (a))\n          a)))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 78, "code": "(fn tp [f & args]\n  (let [ r (if (nil? args) (f) (apply f args))]\n    (if (fn? r)\n      (tp r)\n      r)))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 78, "code": "(fn [f & argscoll]\n (loop [res (apply f argscoll)]\n  (if (fn? res)\n   (recur (res))\n   res)\n )\n)", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 78, "code": "(fn my-trampoline \n  ([result] (if (fn? result) (my-trampoline (result)) result))\n  ([f & args] (my-trampoline (apply f args))))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 78, "code": "(fn t [f & a]\n  (let [r (apply f a)]\n    (if (ifn? r)\n      (t r)\n      r)))", "user": "53523ae0e4b084c2834f4aee"}, {"problem": 78, "code": "(fn my-tramp [f & args]\n  (loop [func f\n         params args]\n   (if-not (fn? func)\n     func\n     (recur (apply func params) []))))", "user": "546692aee4b01be26fd746e7"}, {"problem": 78, "code": "#(loop [f (% %2)]\n     (if-not (fn? f)\n       f\n       (recur (f))))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 78, "code": "(fn tramp [x & args]\n      (loop [f #(apply x args)]\n        (let [v (f)]\n          (if (fn? v)\n            (recur v)\n            v))))", "user": "525cc912e4b0cb4875a45d48"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [f (apply f args)]\n      (if (fn? f) (recur (f)) f)))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (letfn [(t [r] (if-not (fn? r) r (recur (r))))]\n    (t (apply f args))))", "user": "5383668ee4b06839e8705edd"}, {"problem": 78, "code": "(fn me[f & arg] (let [ r (if (nil? arg) (f) (apply f arg))] \n                (if (fn? r) (me r) r ) ) )", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 78, "code": "(fn [f & args] (loop [t #(apply f args)] (let [v (t)] (if (fn? v) (recur v) v))))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 78, "code": "(fn [f n]\n  (loop [t (f n)]\n    (if (ifn? t) (recur (t)) t)))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (let [retval (apply f args)]\n    (if (fn? retval)\n      (tramp retval)\n      retval)))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 78, "code": "(fn [f & a]  \n  (loop [f (apply f a)] (if (fn? f) (recur (f)) f))\n)", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (let [nextf (apply f args)]\n    (if (instance? clojure.lang.IFn nextf)\n      (tramp nextf)\n      nextf)))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 78, "code": "(fn foo [f & x]\n  (let [g (apply f x)]\n    (if (fn? g)\n      (foo g)\n      g)))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 78, "code": "(fn trampoline2 [& args]\n   (let [f (first args)\n         r (rest args)]\n     (if (fn? f)\n       (trampoline2 (apply f r))\n       f)))", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 78, "code": "#(loop [x (apply % %&)]\n   (if (fn? x)\n     (recur (x))\n     x))", "user": "5368fedee4b0243289761e93"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (not (fn? f))\n      f\n      (recur (f)))))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 78, "code": "(fn myTrampoline [f & p] (loop [res (apply f p)] (if (fn? res) (recur (res)) res)))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f) (recur (f)) f)))", "user": "4f7207d3e4b07046d9f4f019"}, {"problem": 78, "code": "(fn t\n  ([f] (if (fn? f) (recur (f)) f))\n  ([f x] (t (f x))))", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 78, "code": "(fn [f & a]\n  (loop [f (apply f a)]\n        (if-not (fn? f)\n                f\n                (recur (f)))))", "user": "544e8369e4b0e39780006987"}, {"problem": 78, "code": "(fn tram\n  ([f] (let [r (f)] (if (fn? r) (recur r) r)))\n  ([f & xs] (tram #(apply f xs)) ))", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 78, "code": "(fn my-rampoline [x & args]\n     (if (fn? x)\n       (if (nil? (first args))\n         (my-rampoline (x) nil)\n         (my-rampoline (apply x args) nil))\n       x))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 78, "code": "(fn trampol [f & args]\n  (loop [fun (apply f args)]\n    (if (fn? fun)\n      (recur (apply fun (list)))\n      fun)))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 78, "code": "(fn tram [f & args] (let [a (apply f args)](if (fn? a) (tram a) a)))", "user": "526a3412e4b03e8d9a4a721e"}, {"problem": 78, "code": "(fn tramp [f & args]\n    (loop [ret (apply f args)]\n\n    (if (fn? ret)\n        (recur (ret))\n        ret)))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 78, "code": "(fn mytrampoline            \n  [f & args]                  \n  (loop [f f                  \n         args args]           \n    (let [val (apply f args)] \n      (if (fn? val)           \n        (recur val nil)       \n        val))))", "user": "50573ed8e4b0012181721987"}, {"problem": 78, "code": "(fn my-trampoline\n  [f & args]\n  (loop [v (apply f args)]\n    (if-not (fn? v)\n      v\n      (recur (v)))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 78, "code": "(fn [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (recur result [])\n      result)))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 78, "code": "(fn tramp\n  [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 78, "code": "(fn tramp\n  ([f]\n    (let [g (f)]\n      (if (fn? g)\n        (tramp g)\n        g)))\n  ([f & xs]\n   (let [g (apply f xs)]\n     (if (fn? g)\n       (tramp g)\n       g))))", "user": "52f53589e4b05e3f0be25f2c"}, {"problem": 78, "code": "(fn [f1 & args]\n  (loop [f (apply f1 args)]\n    (if (fn? f) (recur (f)) f)))", "user": "52eaba10e4b09f7907dd14c2"}, {"problem": 78, "code": "(fn trampo [f & args]\n  (if (fn? f)\n    (trampo (apply f args))\n    f))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 78, "code": "(fn tramp [f & params]\n  (let [result (apply f params)]\n    (if (fn? result)\n        (recur result [])\n        result)))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 78, "code": "#(loop [r (% %2)]\n   (if (fn? r)\n     (recur (r))\n     r))", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x) (recur (x)) x)))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 78, "code": "(fn [f & args] (loop [v (apply f args)] (if (not (fn? v)) v (recur (v)))))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 78, "code": "(fn t\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (t #(apply f args))))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 78, "code": "(fn t\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (t #(apply f args))))", "user": "4e6ebd4a535d5021c1a89610"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 78, "code": "(fn tr\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tr #(apply f args))))", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [result (apply f args)]\n      (if (fn? result)\n        (recur (result))\n        result)))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 78, "code": "(fn tampoline\n  ([f & args] (tampoline (apply f args)))\n  ([f] (if (fn? f) (tampoline (f)) f)))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 78, "code": "(fn [x & args]\n  (loop [x (apply x args)]\n    (if (fn? x) (recur (x)) x)))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 78, "code": "(fn __\n  ([f] (let [r (f)] (if (fn? r) (__ r) r)))\n  ([f & args] (__ #(apply f args))))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 78, "code": "#(loop [r (apply % %&)]\n   (if (fn? r)\n\t(recur (r))\n\tr))", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 78, "code": "(fn trampo                                                                                                                             \n  ([f & args] (trampo (apply f args)))                                                                                                           \n  ([f] (if (ifn? f)                                                                                                            \n         (recur (f))                                                                                                                  \n         f)))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 78, "code": "(fn [f x]\n  (loop [x (f x)]\n    (if (fn? x) (recur (x)) x)))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (ifn? v) (recur (v)) v)))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "543d89dfe4b032a45b869350"}, {"problem": 78, "code": "(fn [f & args]\n\t(loop [v (apply f args)]\n\t\t(if (fn? v)\t(recur (v)) v)))", "user": "5370b386e4b0fc7073fd6e9b"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f & args] (my-trampoline (apply f args)))\n  ([f] (if (fn? f)\n         (recur (f))\n         f)))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 78, "code": "(fn tr [fx & params]\n  (let [r (apply fx params)]\n    (loop [f r]\n      (if (not (ifn? f))\n        f (recur (f))))))", "user": "5546704be4b0a04f7929953d"}, {"problem": 78, "code": "(fn trampo [f & args]\n  (if (fn? f)\n    (recur (apply f args) [])\n    f))", "user": "5264383be4b03e8d9a4a70cb"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f f \n         args args]\n    (let [result (apply f args)]\n      (if (fn? result)\n        (recur result [])\n        result))))", "user": "5553b924e4b0deb715856e06"}, {"problem": 78, "code": "(fn t [f & a] (if (fn? f) (t (apply f a)) f))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (let [d (apply f args)] \n    (if (fn? d)\n     (recur d [])\n      d\n      ))\n)", "user": "5364ab34e4b0243289761e64"}, {"problem": 78, "code": "#(loop [x (% %2)] (if (fn? x) (recur (x)) x))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 78, "code": "#(loop [y (apply % %&)]\n   (if (fn? y)\n      (recur (y))\n      y))", "user": "545ddac3e4b01be26fd74676"}, {"problem": 78, "code": "(fn [f & xs] (let [x (apply f xs)] (if (fn? x) (recur x []) x)))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 78, "code": "(fn [f & args]\r\n  (loop [result (apply f args)]\r\n    (if (fn? result)\r\n      (recur (result))\r\n      result)))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 78, "code": "(fn mytramp [ f & args ]\n  (let [ r (apply f args) ]\n    (if (ifn? r) (recur r nil) r)))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "504e71cbe4b0f6ff3350c4b3"}, {"problem": 78, "code": "(fn my-tramp [f & args]\n  (loop [result (apply f args)]\n    (if (not (fn? result))\n      result\n      (recur (result)))))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 78, "code": "(fn [f & args]\n  ((fn [f] (if (fn? f) (recur (f)) f)) (apply f args)))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 78, "code": "(fn [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (recur result ())\n      result)))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 78, "code": "(fn __\n  ([f]\n   (let [r (f)]\n     (if (fn? r)\n       (recur r)\n       r)))\n  ([f & args] (__ #(apply f args))))", "user": "55702081e4b09a3098a52529"}, {"problem": 78, "code": "(fn new-tramp\n  ([f & args]\n    (new-tramp (apply f args)))\n  ([single-f]\n    (if (fn? single-f)\n      (new-tramp (single-f))\n      single-f)))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f f args args]\n    (let [rv (apply f args)]\n      (if (fn? rv)\n        (recur rv [])\n        rv))))", "user": "5579638fe4b05c286339e094"}, {"problem": 78, "code": "(fn [f & ar]\n  (loop [i (apply f ar)]\n    (if (fn? i)\n      (recur (i))\n      i)))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 78, "code": "(fn [f & a]\n    (loop [r (apply f a)]\n      (if (fn? r)\n        (recur (r))\n        r)))", "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"problem": 78, "code": "(fn [f & args]\n  (first (drop-while fn?\n           (iterate #(%) (apply f args)))))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 78, "code": "(fn trampoline* [f & args]\n  (loop [x (apply f args)] \n    (if (fn? x)\n      (recur (x))\n      x)))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "55586905e4b0deb715856e2b"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (let [r (apply f args)]\n    (loop [x r]\n      (if (fn? x)\n        (recur (x))\n        x))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (ifn? x)\n      (recur (x))\n      x)))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 78, "code": "(fn trampo \n  ([f & args]\n   (let [res (apply f args)]\n     (if (not (fn? res)) res\n       (trampo res))))\n  ([f]\n   (let [res (f)]\n     (if (not (fn? res)) res\n       (trampo res)))))", "user": "53065acbe4b02e8216869792"}, {"problem": 78, "code": "(fn trampoline-\n  ([f] (let [retval (f)]\n         (if (fn? retval)\n           (recur retval)\n           retval)))\n  ([f & args] (trampoline- #(apply f args))))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 78, "code": "(fn sol [f x] (letfn [(go [f] (if (fn? f) (go (f)) f))]\n                  (go (f x))))", "user": "54857657e4b0e286459a11ac"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [ret (apply f args)]\n    (if (fn? ret) (recur (ret))\n      ret)))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 78, "code": "(fn tramp [fun & args]\n  (let [mid-result (apply fun args)]\n    (if (fn? mid-result)\n      (apply tramp mid-result [])\n      mid-result)))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 78, "code": "(fn t [x & xs]\n  (if (fn? x) (t (apply x xs)) x))", "user": "552a793ee4b0ffed3738f955"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (not (fn? result))\n      result\n      (recur (result)))))", "user": "52fc34cee4b047fd55837015"}, {"problem": 78, "code": "(fn trmpln\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n   (trmpln #(apply f args))))", "user": "5545477fe4b0a04f79299531"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "user": "55895eade4b059ccff29b202"}, {"problem": 78, "code": "(fn my-trampoline [f & params]\n  (let [mid-result (apply f params)]\n    (if (fn? mid-result)\n      (apply my-trampoline mid-result [])\n      mid-result)))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 78, "code": "(fn [f x]\n  (loop [value (f x)]\n    (if (ifn? value)\n      (recur (value))\n      value)))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 78, "code": "(fn my-trampoline                                                                                                                                       \n    ([x] (if (fn? x) (my-trampoline (x)) x))                                                                                    \n    ([x & args] (my-trampoline (apply x args))))", "user": "558b50d5e4b027778923762b"}, {"problem": 78, "code": "(fn my-trampoline\n  [f & args]\n  (let [v (apply f args)]\n    (if (ifn? v) (my-trampoline v) v)))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 78, "code": "(fn tram\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tram #(apply f args))))", "user": "520cb8c4e4b0b022ef140c9a"}, {"problem": 78, "code": "(fn f76 [f & xs]\n  (if-not (fn? (apply f xs))\n    (apply f xs)\n    (f76 (apply f xs))))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 78, "code": "(fn [f & args]\n          (let [r (apply f args)]\n            (if (fn? r)\n              (recur r [])\n              r)))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 78, "code": "(fn [x & args]\n    (loop [f (apply x args)]\n      (if (fn? f)\n        (recur (f))\n        f)))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 78, "code": "(fn [f & p]\n  (let [g (apply f p)]\n    (if (fn? g)\n      (recur g [])\n      g)))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 78, "code": "(fn [f & args]\n    (#(if (fn? %) (recur (%)) %)\n      (apply f args)))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 78, "code": "(fn t \n  ([f]\n  (if (fn? f)\n      (recur (f))\n      f))\n  ([f x]\n   (t (f x))))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 78, "code": "#((fn it [g] (if (fn? g) (it (g)) g)) (% %2))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 78, "code": "(fn foo\n  ([f]\n   (if (.contains (str (class f)) \"$\") (foo (f)) f))\n  ([f & args] (foo (apply f args))))", "user": "5590e55de4b0277789237676"}, {"problem": 78, "code": "(fn [f x]\n  (loop [r (f x)]\n    (if-not (fn? r) r (recur (r)))))", "user": "540e97f9e4b0addc1aec671f"}, {"problem": 78, "code": "(fn my\n  ([f & x]\n  (let [a (apply f x)]\n    (if (fn? a)\n      (my a)\n      a\n    )\n  ))\n  ([f]\n      (let [a (f)]\n        (if (fn? a)\n          (my a)\n          a))))", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 78, "code": "(fn me [f & args] \n\n\t(loop [cur (apply f args)] \n\n\t\t (if (fn? cur)\n\t\t \t(recur (cur) )\n\t\t \tcur\n\t\t \t)\t\n\n\t\t)\n)", "user": "55897fe2e4b059ccff29b205"}, {"problem": 78, "code": "(fn [f & rest]\n  (let [res (apply f rest)]\n    (if (fn? res)\n      (recur res nil)\n      res)))", "user": "5338387de4b0e30313ee6c91"}, {"problem": 78, "code": "(fn mytramp\n  ([f] \n   (let [retf (f)]\n     (if (fn? retf)\n     (recur retf)\n     retf\n     ))\n    )\n  ([f & args]\n   (mytramp #(apply f args))\n    )\n  )", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 78, "code": "(fn f [a & b]\n  (let [c (apply a b)]\n    (if (fn? c) (f c) c)))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 78, "code": "(fn my-tramp [f & args] (let [call (apply f args)] (if (fn? call) (my-tramp call) call)))", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (not (fn? result))\n      result\n      (recur (result)))))", "user": "55afd469e4b002ce9d5cbc19"}, {"problem": 78, "code": "(fn tr [f & args]\n  (if (fn? f)\n    (tr (apply f args))\n    f))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 78, "code": "(fn [f & args]\n           (loop [f (apply f args)]\n             (if (fn? f)\n               (recur (f))\n               f)))", "user": "530b8580e4b02e82168697cc"}, {"problem": 78, "code": "(fn trampoline'\n  ([f]\n   (if-not (fn? f)\n     f\n     (recur (f))))\n  ([f & args] (trampoline' (apply f args))))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 78, "code": "(fn trampoline12 [f v] (loop [r (f v)]\n   (if (fn? r) (recur (r)) r\n )))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 78, "code": "(fn [f & args]\n           (loop [f (apply f args)]\n             (if (fn? f)\n               (recur (f))\n               f)))", "user": "537e104ce4b06839e8705e9a"}, {"problem": 78, "code": "(fn [f & args]\n    (let [i (apply f args)]\n      (loop [v i]\n        (if (not (fn? v))\n          v\n          (recur (v))))))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 78, "code": "(fn mytramp [x y] (let [f (atom (x y))] (do (while (fn? @f) (reset! f (@f))) @f)))", "user": "5576e78de4b05c286339e075"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [ret (apply f args)]\n      (if (fn? ret)\n        (recur (ret))\n        ret)))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [ret (apply f args)]\n    (if (fn? ret)\n      (recur (ret))\n      ret)))", "user": "5576f299e4b05c286339e077"}, {"problem": 78, "code": "(fn [f x] (loop [y (f x)] (if (fn? y) (recur (y)) y)))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n        (recur (result))\n        result)))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 78, "code": "(fn trampoline* \n\t([f]\n\t\t(let [ret (f)]\n\t\t\t(if (fn? ret)\n\t\t\t\t(recur ret)\n\t\t\t\tret)))\n\t([f & args]\n\t\t(trampoline* #(apply f args))))", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x)\n      (recur (x))\n      x)))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 78, "code": "(fn [f & args]\n   (loop [res (apply f args)]\n     (if (not (fn? res))\n       res\n       (recur (res)))))", "user": "50981062e4b04e098a4c7268"}, {"problem": 78, "code": "#(loop [r (apply % %&)]\n  (if (fn? r)\n    (recur (r))\n    r))", "user": "522eb5cce4b01cdb292c5f0c"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r) (recur (r)) r)))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 78, "code": "(fn t [f & args]\n  (let [v (apply f args)]\n    (if (fn? v) (t v) v)))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 78, "code": "(fn [f & x]\n  (loop [x (apply f x)]\n    (if (fn? x)\n      (recur (x))\n      x)))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 78, "code": "(fn [f & args]\n  (let [v (apply f args)]\n    (if (fn? v)\n      (recur v '())\n      v)))", "user": "54864662e4b0e286459a11b8"}, {"problem": 78, "code": "(fn my-tramp\n  ([f]\n   (let [val (f)]\n     (if (fn? val)\n       (recur val)\n       val)))\n  ([f & args]\n   (my-tramp #(apply f args)))\n  )", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 78, "code": "(fn [f & args]\n  (if (fn? f) (recur (apply f args) nil) f))\n\n;with reduce .. needs clojure >= 1.5\n;(fn [f & args]\n;  (reduce (fn [r _] \n;            (if (fn? r) (r) (reduced r)) )\n;          (apply f args)\n;          (repeat nil) ) )", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [ret (apply f args)]\n    (if (fn? ret) (recur (ret)) ret)))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 78, "code": "(fn my-tramp [fn & vals]\n  (loop [val (apply fn vals)]\n    (if (fn? val)\n      (recur (val))\n      val)))", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 78, "code": "(fn mytr [func val]\n        (loop [ret (func val)]\n          (if (fn? ret)\n            (recur (ret))\n            ret)))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 78, "code": "(fn my-trampoline\n  [f & args]\n  (if (fn? f)\n      (my-trampoline (apply f args))\n      f))", "user": "55acd080e4b03311e7b73298"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [g #(apply f args)]\n    (let [res (g)]\n      (if (fn? res)\n        (recur res)\n        res))))", "user": "4e6a4950535d8ccf87e9febf"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (ifn? result)\n      (recur (result))\n      result)))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 78, "code": "(fn [fun & args]\n  (let [result (apply fun args)]\n    (loop [rst result]\n      (if (fn? rst)\n        (recur (rst))\n        rst))))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 78, "code": "(fn [f & args]\n       (loop [f (apply f args)]\n         (if (fn? f)\n           (recur (f))\n           f)))", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 78, "code": "(fn tram\n     ([f]\n      (if (fn? f)\n        (recur (f))\n        f))\n     ([f & vals]\n      (tram #(apply f vals))))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [t (apply f args)]\n    (if (fn? t)\n      (recur (t))\n      t)))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 78, "code": "#(loop [res (apply %1 %&)]\n    (if (fn? res)\n      (recur (res))\n      res))", "user": "4f88ae35e4b033992c121c6d"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g)\n      (recur (g))\n      g)))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 78, "code": "(fn trampoline' [f & args] (if (fn? f) (trampoline' (apply f args)) f))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 78, "code": "(fn[f & p] (#(if (fn? %) (recur (%)) %) (apply f p)))", "user": "4faf97d8e4b081705acca258"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [fv (apply f args)]\n    (if (fn? fv) (recur (fv))\n      fv)))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 78, "code": "(fn my-tpl ([f & args] (my-tpl #(apply f args)))\n  ([f] (let [ret (f)]\n         (if (fn? ret) (recur ret) ret))))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 78, "code": "(fn my-trampoline \n  ([f] (let [ret (f)]\n        (if (fn? ret)\n          (recur ret)\n\t\t  ret)))\n  ([f & args] (my-trampoline #(apply f args))))", "user": "51eec1a6e4b0871fa145d98d"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "554b8572e4b0a04f79299589"}, {"problem": 78, "code": "(fn m\n  ([f]\n    (let [ret (f)]\n      (if (fn? ret)\n        (recur ret)\n        ret)))\n  ([f & args]\n    (m #(apply f args))))", "user": "551c66dae4b07993ea3788de"}, {"problem": 78, "code": "(fn [f v]\n  (loop [r (f v)]\n    (if (fn? r) (recur (r)) r)))", "user": "541096bde4b01498b1a719b2"}, {"problem": 78, "code": "(fn my-trampoline\n  [f & args]\n  (loop [f-res (apply f args)]\n    (if (fn? f-res)\n      (recur (f-res))\n      f-res)))", "user": "539e717fe4b0ca733b974488"}, {"problem": 78, "code": "(fn my-trampoline ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (my-trampoline #(apply f args))))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 78, "code": "(fn tramp\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n   (tramp #(apply f args))))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 78, "code": "#(if (ifn? %) (recur (apply % %&) ()) %)", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 78, "code": "(fn my-trampoline\n  [f & args]\n  (if (fn? f)\n    (let [result (apply f args)]\n      (if (fn? result)\n        (my-trampoline result)\n        result))))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 78, "code": "(fn my-trampoline\n  ([func]\n    (if (fn? func) \n      (recur (func))\n      func))\n  ([func & args] \n    (my-trampoline (apply func args))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 78, "code": "(fn [f & args]\n       (loop [v (apply f args)]\n         (if (fn? v)\n           (recur (v))\n           v)))", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 78, "code": "(fn mytramp [& args] (let [currentfn (atom (apply (first args) (rest args)))]\n(do (while (fn? @currentfn) (reset! currentfn (apply @currentfn []))) @currentfn)))", "user": "55f75c6be4b06e875b46cea9"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [ret (apply f args)]\n    (if (fn? ret)\n      (recur (ret))\n      ret)))", "user": "5143824ae4b0b4fb4ace5f36"}, {"problem": 78, "code": "(fn __\n  [f & args]\n  (loop [applied (apply f args)]\n    (if (fn? applied)\n      (recur (applied))\n      applied)))", "user": "55a62092e4b0acc240e31554"}, {"problem": 78, "code": "(fn tramp [f & args]\r\n  (let [res (apply f args)]\r\n    (if (fn? res) (tramp res) res)))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 78, "code": "(fn t [f & args]\n  (let [r (apply f args)]\n    (if (fn? r) (t r) r)))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 78, "code": "(fn prob78 \n  [f & args]\n  (if (empty? args)\n    (let [ret (f)]\n      (if (fn? ret)\n        (prob78 ret)\n        ret))\n    (prob78 #(apply f args))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g) (recur (g)) g)))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r) (recur (r)) r)))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 78, "code": "(fn t [f & args] \n\t\t  (let [r (apply f args)]\n\t\t\t\n\t\t\t(if (fn? r)\n\t\t\t  (t r)\n\t\t\t  r)))", "user": "527ccaf4e4b0757a1b17136d"}, {"problem": 78, "code": "; third solution\n(fn [f & args]\n  (let [result (apply f args)]\n    (if (fn? result) (recur result ()) result)))\n\n; second solution; too many arities\n#_(fn trampoline_\n    ([f] (if (fn? f) (recur (f)) f))\n    ([f & args] (trampoline_ (apply f args)))\n    )\n\n; first solution -- too much duplicated code\n#_(fn trampoline_\n    ([f] (let [result (f)]\n           (if (fn? result) (trampoline_ result) result)))\n    ([f & args] (let [result (apply f args)]\n                  (if (fn? result) (trampoline_ result) result)))\n    )", "user": "55e7d06ee4b050e68259b496"}, {"problem": 78, "code": "(fn myTrampoline [f & args]\n  (loop [currVal (apply f args)]\n    (if (not (fn? currVal))\n      currVal\n      (recur (currVal)))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 78, "code": "(fn [f & xs]\n  (loop [k (fn [] (apply f xs))]\n    (let [k-next (k)]\n      (if (fn? k-next)\n        (recur k-next)\n        k-next))))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 78, "code": "(fn my-tramp\n  ([f]\n    (let [ret (f)]\n      (if (fn? ret)\n        (recur ret)\n        ret)))\n  ([f & args]\n    (my-tramp #(apply f args))))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 78, "code": "; cheated\n(fn tramp\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tramp #(apply f args))))", "user": "560e9a2de4b05f002753df52"}, {"problem": 78, "code": "(fn tramp [f & args] \n  (loop [rv (apply f args)]\n    (if (fn? rv) (recur (rv)) rv)))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [out (apply f args)]\n    (if (fn? out)\n      (recur (out))\n      out)))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 78, "code": "(fn tramp\n  ([f] (if (fn? f) (recur (f)) f))\n  ([f & args] (tramp (apply f args))))", "user": "532ecd44e4b019098a6f8b49"}, {"problem": 78, "code": "(fn ft\n  ([f] \n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args] \n   (ft #(apply f args))))", "user": "56051095e4b08b23635d3162"}, {"problem": 78, "code": "#(if (fn? %) (recur (apply % %&) []) %)", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 78, "code": "(fn trampoline' [f & args]\n  (loop [r (apply f args)]\n    (if (instance? clojure.lang.IFn r)\n      (recur (r))\n      r)))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 78, "code": "(fn [f & a]\n    (if (fn? f)\n      (recur (apply f a) ())\n      f))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [rv (apply f args)]\n    (if (fn? rv) (recur (rv)) rv)))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 78, "code": "(fn [f & r]\n  (loop [v (apply f r)]\n    (if-not (fn? v)\n      v\n      (recur (v)))))", "user": "561047eae4b05f002753df6d"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 78, "code": "(fn trampoline-3\n  ([f & args] (trampoline-3 (apply f args)))\n  ([f] (if (fn? f) (recur (f)) f)))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 78, "code": "(fn [ f & args]\n   (loop [t (apply f args)]\n      (if (fn? t) (recur (t)) t)\n   )\n)", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 78, "code": "(fn [f & args]\n    (letfn [(initfn [] (apply f args)) ]\n      (loop [f initfn]\n        (if ((comp not fn?) f)\n            f\n            (recur (f))\n            )\n        )))", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if \n      (fn? res) (recur (res))\n                res)))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 78, "code": "(fn [f & args]\n   (let [res (apply f args)]\t\n   \t   (if (fn? res) (recur res nil)\n            res)))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 78, "code": "(fn tramp\n  ([f & args] (tramp (apply f args)))\n  ([f]\n    (if (fn? f)\n      (tramp (f))\n      f)))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 78, "code": "(fn [f & args]\n    (let [res (apply f args)]\n      (if (fn? res) (recur res []) res))\n    )", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [val (apply f args)]\n    (if (fn? val)\n      (recur (val))\n      val)))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 78, "code": "(fn my-tramp\n  [f & args]\n  (if (fn? f)\n    (my-tramp (apply f args))\n    f))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 78, "code": "#(loop [g (apply % %&)] (if (fn? g) (recur (g)) g))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 78, "code": "(fn [f a] (->> (iterate #(%) (partial f a))\n               (drop-while fn?)\n               first))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 78, "code": "(fn [f & xs]\n  (loop [f f xs xs]\n    (let [x (apply f xs)]\n      (if (fn? x) \n        (recur x [])\n        x))))", "user": "4ee67d74535d93acb0a66861"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [funct (apply f args)]\n    (if (fn? funct)\n      (recur (funct))\n      funct)))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 78, "code": "(fn [f & xs]\n  (let [x (apply f xs)]\n    (if (fn? x)\n      (recur x ())\n      x)))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (let [r (apply f args)]\n    (if (fn? r) (tramp r) r)))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 78, "code": "(fn [func arg]\n  (loop [f (func arg)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "4f0f01c0535d0136e6c22329"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [fun (apply f args)]\n    (if (fn? fun)\n      (recur fun [])\n      fun)))", "user": "53350264e4b0656e627bfd73"}, {"problem": 78, "code": "(fn tp\n  ([f] (let [r (f)] (if (fn? r) (recur r) r)))\n  ([f & args] (tp #(apply f args))))", "user": "561a1af6e4b053970a773b02"}, {"problem": 78, "code": "(fn custom-trampoline\n  [f & args]\n  (let [result (apply f args)]\n    (loop [value result]\n      (if (fn? value)\n        (recur (value))\n        value))))", "user": "4fc524aae4b081705acca37e"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [res (apply f args)]\n    (if (not (fn? res)) res\n      (recur (res)))))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 78, "code": "(fn\n  [func & args]\n  (let [result (apply func args)]\n    (if (fn? result)\n      (recur result '())\n      result\n    )))", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 78, "code": "(fn [f & params]\n  (loop [res (apply f params)]\n    (if (not (fn? res))\n      res\n      (recur (res)))))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 78, "code": "(fn tr \n  ([a] (if (fn? a) (tr (a)) a))\n  ([a & b] (if (fn? a) (tr (apply a b)) a)))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 78, "code": "(fn [f & xs]\n  (loop [r (apply f xs)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "50cf94bde4b0abc485cb9bb2"}, {"problem": 78, "code": "(fn my-trampoline\n  [f & args]\n  (loop [v (apply f args)]\n    (if-not (fn? v)\n      v\n      (recur (v)))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "4fceda40e4b03432b189f407"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (let [res   (apply f args)]\n    (if (fn? res) \n        (tramp res)\n        res)))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 78, "code": "(fn  my_trampoline [f & args]\n  (#(if (fn? %) \n      (recur (%)) \n      %)\n    (apply f args)))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 78, "code": "(fn [f x]\n   (loop [res (f x)]\n     (if (ifn? res)\n       (recur (res))\n       res)))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 78, "code": "(fn mytrmpln \n  ([f & xs]      \n    (let [res (apply f xs)]\n      (if (fn? res) (mytrmpln (res)) res)))  \n  ([f]\n    (if (fn? f) (recur (f)) f)))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (not (fn? f))\n      f\n      (recur (f)))))", "user": "5600dccee4b04bb52996e175"}, {"problem": 78, "code": "; That's pretty cool!\n\n(fn [f & args] \n  (loop [f (apply f args)] \n    (if (fn? f) \n      (recur (f)) f)))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 78, "code": "(fn [f  arg] (if (fn? ( f arg)) (loop [g (f arg)] (if (fn? (g))(recur (g))(g))) (f arg)))", "user": "5649615be4b0284900eef641"}, {"problem": 78, "code": "(fn [f & args]\n  (let [res (apply f args)]\n    (loop [v res]\n      (if (fn? v)\n          (recur (v))\n          v))))", "user": "52173464e4b082aa80a88c75"}, {"problem": 78, "code": "(fn [f & args]\n  (let [result (apply f args)]\n    (if (fn? result) (recur result ()) result)))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 78, "code": "(fn [f & c]\n  (loop [res (apply f c)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 78, "code": "(fn tramp [fun & args]\n  (loop [out (apply fun args)]\n    (if (fn? out) \n      (recur (out))\n      out)))", "user": "564d02cde4b0284900eef679"}, {"problem": 78, "code": "(fn [f & args]\n\t\t(let [ret (apply f args)]\n\t\t  (loop [r ret]\n\t\t\t(if (fn? r)\n\t\t\t    (recur (r))\n\t\t\t  r)))\n\t     )", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 78, "code": "(fn [x y] \n         (loop [func (x y)]\n           (if (fn? func)\n             (recur (func))\n             func)\n           ))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [ff (apply f args)]\n    (if (fn? ff)\n      (recur (ff))\n      ff)))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [thunk (apply f args)]\n    (if (fn? thunk)\n      (recur (thunk))\n      thunk)))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 78, "code": "(fn koo [f x]\n  (letfn [(it [f]\n            (if (fn? f)\n              (recur (f))\n              f))]\n    (it (f x))))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 78, "code": "(fn my-trampo [f & args]\n     (loop [g (apply f args)]\n       (if (ifn? g)\n         (recur (g))\n         g)))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [v (apply f args)]\t\n    (if (fn? v)\n      (recur (v))\n      v)))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (first (drop-while fn? (iterate #(%) (apply f args)))))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [res f\n         args args]\n    (let [r (apply res args)]\n      (if (fn? r)\n        (recur r [])\n        r))))", "user": "52ee46e5e4b05e3f0be25ec5"}, {"problem": 78, "code": "(fn t\n     ([f v]\n           (let [r (f v)] (if (ifn?  r) (t r) r)))\n     ([f] (let [r (f)] (if (ifn? r) (t r) r))))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 78, "code": "#(loop [f (apply % %&)]\n    (if (fn? f) (recur (f)) f))", "user": "5382704be4b06839e8705ed4"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if-not (fn? result)\n      result\n      (recur (result)))))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 78, "code": "(fn [f & args]\n    (first\n     (filter (comp not fn?)\n             (iterate #(if (fn? %) (%) %)\n                      (apply f args)))))", "user": "4fe92721e4b0547ebccb2447"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x)\n      (recur (x))\n      x)))", "user": "5360f043e4b0243289761e3c"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g)\n      (recur (g))\n      g)))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 78, "code": "(fn mt [f & params]\n  (let [mid-result (apply f params)]\n    (if (fn? mid-result)\n      (apply mt mid-result [])\n      mid-result)))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 78, "code": "(fn __ [f & args]\n    (loop [v (apply f args)]\n      (if (fn? v)\n        (recur (v))\n        v)))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 78, "code": "(fn t ([f] (if (fn? f) (t (f)) f)) ([f n] (t (f n))))", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 78, "code": "(fn [ff & args]\n          (letfn [(t [f] (if (fn? f)\n                           (t (f))\n                           f))]\n            (t (apply ff args))))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 78, "code": "(fn [f & params]\n  (let [result (apply f params)\n        iterate-call (fn [x]\n                       (if (fn? x)\n                         (recur (x))\n                         x))]\n    (iterate-call result)))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f) (recur (f)) f)))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [f (apply f args)]\n    (loop [f f]\n      (if (fn? f)\n        (recur (f))\n        f))))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 78, "code": "(fn trmpln [f & args]\n  (let [v (apply f args)]\n    (if (fn? v)\n      (trmpln v)\n      v)))", "user": "54485749e4b032a45b8693c7"}, {"problem": 78, "code": "(fn [& args]\n  (loop [ret (apply (first args) (rest args))]\n    (if (fn? ret) (recur (ret)) ret)))", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 78, "code": "(fn tramp \n  ([f & args]\n  (tramp #(apply f args)))\n  ([f]\n   (let [val (f)]\n     (if (fn? val)\n       (recur val)\n       val\n       )\n     )\n  ))", "user": "564a560ae4b0284900eef654"}, {"problem": 78, "code": "(fn tramp [f v]\n  (loop [start (f v)]\n    (if (fn? start)\n      (recur (start))\n      start)))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 78, "code": "(fn trampoline* [f & args]\n  (loop [ret (apply (comp f) args)]\n    (if (fn? ret)\n      (recur (ret)) \n      ret)))", "user": "567ea95de4b0feffd0d18eb6"}, {"problem": 78, "code": "(fn tr\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tr #(apply f args))))", "user": "564da567e4b0284900eef682"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v) (recur (v)) v)))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop[g (apply f args)]\n\t    (if (instance? clojure.lang.IFn g)\n    \t  (recur (g))\n      \t\tg)))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 78, "code": "(fn tramp                                                                                                           \n  ([f & args] (tramp #(apply f args)))                                                                                \n  ([f] (let [res (f)]                                                                                                 \n         (if (fn? res) (recur res)                                                                                    \n           res))))", "user": "54bbaa8ee4b0ed20f4ff6ec0"}, {"problem": 78, "code": "(fn [f & xs]\n  ( #(if-not (fn? %) % (recur (%))) (apply f xs) ))", "user": "567798afe4b05957ce8c6169"}, {"problem": 78, "code": "(fn f\n  ([r]\n   (if (fn? r)\n     (f (r))\n     r))\n  ([r i]\n    (f (r i))))", "user": "52bacfa8e4b07a9af57922d6"}, {"problem": 78, "code": "(fn ([f & x] (loop [y (apply f x)]\n             (if (fn? y) \n               (recur (y))\n               y))))", "user": "566a3a26e4b0a866af689699"}, {"problem": 78, "code": "(fn [f & args]\n    (first\n     (drop-while #(instance? clojure.lang.AFunction %)\n                 (iterate #(%) #(apply f args)))))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 78, "code": "(fn my-trampoline \n  ([x] (if (fn? x) (my-trampoline (x)) x))\n  ([f & args] (my-trampoline (apply f args))))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 78, "code": "(fn t [a & b] (if (fn? a) (t (apply a b)) a))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 78, "code": "(fn a ([f] (let [ret (f)] (if (fn? ret) (recur ret) ret))) ([f & args] (a #(apply f args))))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 78, "code": "(fn my_trampoline\n  ([f]\n   (if (fn? f)\n     (my_trampoline (f))\n     f))\n  ([f x]\n   (my_trampoline (f x))))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (if (fn? f)\n    (tramp (apply f args))\n    f))", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 78, "code": "(fn trampoline'\n  [f & args]\n  (loop [f' (apply f args)]\n    (if (fn? f')\n      (recur (f'))\n      f')))", "user": "56488119e4b0284900eef632"}, {"problem": 78, "code": "(fn tr [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 78, "code": "(fn g\n  ([f & s] (g (apply f s)))\n  ([f] (if (not (fn? f)) f (recur (f)))))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 78, "code": "(fn [f & args] \n\t(loop [res (apply f args)]\n\t\t(if-not (fn? res)\n\t\t\tres\n\t\t\t(recur (res)))))", "user": "5578f292e4b05c286339e08f"}, {"problem": 78, "code": "(fn t\n  ([f] (let [r (f)]\n         (if (fn? r)\n           (recur r)\n           r)))\n  ([f & a] (t #(apply f a))))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 78, "code": "(fn trampoline-1\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n   (trampoline-1 #(apply f args))))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 78, "code": "(fn [f & a] \n  (loop [g (apply f a)]\n    (if (fn? g) (recur (g)) g)))", "user": "5339cb07e4b0e30313ee6caf"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 78, "code": "(fn self [f arg]\n (loop [nf (f arg)]\n   (if (not (fn? nf))\n       nf\n       (recur (nf)))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 78, "code": "(fn newTramp [f & v ]\n  (if (empty? v)\n    (if (fn? f)\n      (newTramp (f)) f)\n    (newTramp (apply f v))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 78, "code": "(fn t [f & args]\n  (let [r (if (nil? args) (f) (apply f args))]\n    (if (fn? r) (t r) r)))", "user": "56baa68ce4b0f26550335947"}, {"problem": 78, "code": "#(loop [res (apply % %&)]\n   (if (fn? res)\n     (recur (res))\n     res))", "user": "56795deae4b05957ce8c6187"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (ifn? res) \n      (recur (res))\n       res)))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "567931e9e4b05957ce8c6184"}, {"problem": 78, "code": "(fn t [f & args]\n  (let [g (apply f args)]\n    (if (fn? g)\n      (t g)\n       g)))", "user": "56bca51ae4b0f26550335963"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r) (recur (r)) r)))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 78, "code": "(fn my [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (my result)\n      result)))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 78, "code": "(fn solve [f & args]\n  (if (fn? f)\n    (solve (apply f args))\n    f))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 78, "code": "(fn mytrampoline [f & args]\n  (let [g (apply f args)]\n    (if (fn? g)\n      (mytrampoline g)\n      g)))", "user": "536673a8e4b0243289761e76"}, {"problem": 78, "code": "(fn tramp* [f & args]\n  (loop [val (apply f args)]\n    (if (fn? val)\n      (recur (val)) val)))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f] (if (instance? clojure.lang.IFn f) (recur (f)) f))\n  ([f & args] (my-trampoline (apply f args))))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [first-result (apply f args)]\n    (loop [result first-result]\n      (if (fn? result)\n        (recur (result))\n        result))))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 78, "code": "(fn [f & xs]\n  (loop [r (apply f xs)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 78, "code": "(fn [f x] (loop [current (f x)]\n            (if (not (ifn? current)) current\n              (recur (current)))))", "user": "56baab13e4b0f26550335948"}, {"problem": 78, "code": "(fn tramplin\n  [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (tramplin r) r)))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 78, "code": "(fn trampX [f & n]\n\t(let [res (apply f n)]\n\t\t(if (not (fn? res))\n\t\t\tres\n\t\t\t((fn trampRec [f]\n\t(let [res (f)]\n\t\t(if (not (fn? res))\n\t\t\tres\n\t\t\t(trampRec res)\n\t\t)\n\t)\n) res)\n\t\t)\n\t)\n)", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 78, "code": "(fn t\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (t #(apply f args))))", "user": "56b86e64e4b0f26550335924"}, {"problem": 78, "code": "#(let [x (fn r [y] (if (instance? clojure.lang.IFn y) (r (y)) y))] (x (% %2)))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 78, "code": "#((fn [g] (if (fn? g) (recur (g)) g)) (% %2))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 78, "code": "(fn [f x]\n  (loop [result (f x)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "51db0d99e4b06aa4d4669a9d"}, {"problem": 78, "code": "(fn tramp [f & args]\n    (loop [v (apply f args)]\n        (if (and (ifn? v) (not (and\n                                   (vector? v) (map? v) (set? v))))\n            (recur (v))\n            v)\n        ))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 78, "code": "(fn trampoline'\n  [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (recur r ())\n      r)))", "user": "56481722e4b0284900eef628"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 78, "code": "(fn my-trampoline\n  [f & args]\n  (loop\n    [f' (apply f args)]\n    (if (fn? f') \n      (recur (f'))\n      f')))", "user": "56050f06e4b08b23635d3161"}, {"problem": 78, "code": "(fn boing\n  ([f]\n   (let [r (f)]\n     (if (fn? r)\n       (recur r)\n       r)))\n  ([f & a]\n   (boing #(apply f a))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 78, "code": "(fn [f & x]  (loop [g (apply f x)]\n              (if (fn? g) (recur (g)) g)))", "user": "4fd11a93e4b04c3a95aa040a"}, {"problem": 78, "code": "(fn t\n  ([f]\n    (let [r (f)]\n      (if (fn? r)\n        (recur r)\n        r)))\n  ([f & args]\n    (t #(apply f args))))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 78, "code": "(fn[f & xs]\n  (loop [f (apply f xs)]\n    (if (fn? f)\n      \t(recur (f))\n      f)))", "user": "55101237e4b06e50f9beb181"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 78, "code": "(fn solve [f & rest]\n  (cond \n    (not (fn? f) ) f\n    (= nil rest) (solve (f))\n    :else (solve (apply f rest))\n  )\n)", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 78, "code": "(fn [f & xs]\n  (loop [next-f (apply f xs)]\n    (if (fn? next-f)\n      (recur (next-f))\n      next-f)))", "user": "56f9982ce4b07572ad1a88b8"}, {"problem": 78, "code": "(fn [f & args]\n  (if (fn? f)\n    (recur (apply f args) [])\n    f))", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 78, "code": "(fn [f v]\n  (loop [result (f v)]\n  (if-not (fn? result)\n    result\n    (recur (result)))))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "56ec0af1e4b04a395b9a0430"}, {"problem": 78, "code": "(fn my-tramp [f & args]\n  (let [res (apply f args)]\n    (if (fn? res) (recur res nil) res)))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x) (recur (x)) x)))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [f (apply f args)]\n      (if (fn? f)\n        (recur (f))\n        f)))", "user": "4f57c913e4b0a7574ea7183f"}, {"problem": 78, "code": "(fn my-trampoline\n  ([fun & args]\n        (let [result (apply fun args)]\n          (if (ifn? result) (my-trampoline result) result)))\n  ([fun]\n   (let [result (fun)]\n     (if (ifn? result) (recur result) result))))", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "user": "5703eda3e4b08d47c9778200"}, {"problem": 78, "code": "(fn [f & args]\n       (loop [f2 (apply f args)]\n          (if (fn? f2)\n            (recur (f2))\n            f2)))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 78, "code": "#(loop [x (% %2)]\n   (if (fn? x)\n     (recur (x))\n     x))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (not (fn? res))\n      res\n      (recur (res)))))", "user": "56372c3ce4b0bfe05bf117d1"}, {"problem": 78, "code": "(fn [func & args]\n  (if (fn? func)\n    (recur (apply func args) '())\n    func))", "user": "51e5a627e4b0efabf93c02db"}, {"problem": 78, "code": "(fn trampoline2 [f & args]\n    (let [new-f (apply f args)]\n      (if (fn? new-f)\n        (trampoline2 new-f)\n        new-f)))", "user": "57027310e4b08d47c97781e2"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [res (apply f args)]\n      (if-not (fn? res) res (recur (res)))))", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 78, "code": "(fn [f & xs]\n  (loop [g (apply f xs)]\n    (if (fn? g)\n      (recur (g))\n      g)))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 78, "code": "(fn [f & vs]\n  (loop [res (apply f vs)]\n    (if (not (fn? res))\n      res\n\t  (recur (res)))))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 78, "code": "(fn trampoline2[f & args]\n  (let [y (apply f args)]\n    (if (not (fn? y))\n      y\n      (recur  y []))))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 78, "code": "(fn bounce [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (bounce result)\n      result)))", "user": "56f4cedce4b046a417f92063"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 78, "code": "(fn [f & args]\n(loop [x (apply f args)]\n  (if (not (fn? x)) \n      x \n      (recur (x)))))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 78, "code": "(fn trampoline' [f & args]\n  (let [outcome (apply f args)]\n    (if (fn? outcome)\n      (trampoline' outcome)\n      outcome)))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [outcome (apply f args)]\n    (if (fn? outcome)\n      (my-trampoline outcome)\n      outcome)))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 78, "code": "#(loop [f (apply %1 %&)]\n   (if (fn? f) (recur (f)) f))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 78, "code": "(fn [func & x]\n  (loop [func (apply func x)]\n    (if (fn? func)\n      (recur (func))\n      func\n    )\n  )\n \n  )", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 78, "code": "(fn z [x & a]\n  (if (fn? x)\n    (z (apply x a))\n    x))", "user": "4fa436dce4b081705acca19b"}, {"problem": 78, "code": "(fn[f x]\n  (first (drop-while fn?\n                     (iterate #(%) (f x)))))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 78, "code": "(fn fooTrampoline [f & args]\n  (let [val (apply f args)]\n    (if (fn? val)\n      (recur val [])\n      val)))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 78, "code": "(fn [f & args]\n  (let [res (if (empty? args) (f) (apply f args))]\n    (loop [result res]\n      (if-not (fn? result)\n        result\n        (recur (result))))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if-not (fn? x) \n      x\n      (recur (x)))))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [ret (apply f args)]\n    (if (fn? ret)\n      (recur (ret))\n      ret)))", "user": "571d063ee4b0145328a76272"}, {"problem": 78, "code": "(fn tramp [f & xs] (if (fn? (apply f xs)) (tramp (apply f xs)) (apply f xs)))", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [g (apply f args)]\n    (if-not (fn? g)\n      g\n      (recur (g)))))", "user": "506ef8c3e4b09350ab4199f4"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [res (apply f args)]\n    (if (fn? res)\n      (recur res ())\n      res)))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 78, "code": "(fn x [f p]\n  (loop [r (f p)]\n   (if (fn? r)\n     (recur (r))\n     r\n     )  \n    \n    )\n  \n  \n  )", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f]\n   (let [result (f)]\n     (if (fn? result)\n       (recur result)\n       result)))\n  ([f & params]\n   (let [result (apply f params)]\n     (if (fn? result)\n       (my-trampoline result)\n       result))))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 78, "code": "(fn tamp [f & args]\n\n  (let [result (apply f args)]\n    (if (fn? result)\n      (recur result [])\n      result)))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 78, "code": "(fn [g & vs]\n            (let [r (apply g vs)]\n              (if (fn? r)\n               (loop [g' r]\n                 (let [h (g')]\n                   (if (fn? h)\n                     (recur h)\n                     h)))\n               r)))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 78, "code": "(fn [f & args]\n  (let [ret (apply f args)]\n    (if (fn? ret)\n      (recur ret [])\n      ret)))", "user": "56dc3bdfe4b0ea9b8538f819"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (first (drop-while fn? (iterate #(%) (apply f args)))))", "user": "53504fe6e4b084c2834f4ada"}, {"problem": 78, "code": "(fn tr\n  [f & args]\n  (let [x (apply f args)]\n    (if (fn? x)\n      (recur x ())\n      x)))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 78, "code": "(fn [f & args]\n    (let [v1 (apply f args)]\n      (loop [v v1]\n        (if (fn? v)\n          (recur (apply v '()))\n          v))))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 78, "code": "(fn [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (recur r nil)\n      r)))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (tramp r)\n      r )))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [fun #(apply f args)]\n    (let [res (fun)]\n      (if (fn? res)\n        (recur res)\n        res))))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 78, "code": "(fn trampoline-1\n  ([f]\n     (if (fn? (f))\n       (recur (f))\n       (f)))\n   ([f & args]\n    (trampoline-1 #(apply f args))))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 78, "code": "(fn xx[f & args]\n  (if-not (fn? f) f\n          (xx (apply f args))))", "user": "56102f50e4b05f002753df6b"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n      (let [initial-call (apply f args)]\n           (loop [func initial-call]\n                 (if (fn? func)\n                   (recur (func))\n                   func))))", "user": "56cc34aee4b0ea9b8538f73c"}, {"problem": 78, "code": "(fn __ [x & args]\n  (loop [op (apply x args)]\n    (if (fn? op) (recur (op)) op)\n    ))\n\n;; til (fn? op) instead of (instance? clojure.lang.IFn op)", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 78, "code": "(fn [f & params]\n  (let [result (apply f params)]\n    (if (fn? result)\n      (recur result [])\n      result\n      )))", "user": "56791447e4b05957ce8c6183"}, {"problem": 78, "code": "(fn trampoline* [f & args]\n  (loop [ret (apply (comp f) args)]\n    (if (fn? ret)\n      (recur (ret)) \n      ret)))", "user": "574af03ce4b02ea114799202"}, {"problem": 78, "code": "(fn f [af & args]\n  (let [r (apply af args)]\n     (loop [ff r]\n     (if (fn? ff) \n      (recur (ff))\n      ff\n     )\n     )\n     \n     )\n    \n    )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (if (fn? f) (tramp (apply f args)) f))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 78, "code": "(fn [f x] (loop [r (f x)] (if (fn? r) (recur (r)) r)))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 78, "code": "(fn [func & args]\n  (loop [func (apply func args)]\n      (if (fn? func) \n          (recur (func))\n          func)))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [value (apply f args)]\n    (loop [r value]\n      (if (fn? r)\n        (recur (r))\n        r))))", "user": "56ac81ace4b03c432f187347"}, {"problem": 78, "code": "(fn tramp [f & args]\n    (let [jump (apply f args)]\n      (loop [jump jump] (if (fn? jump) (recur (jump)) jump))))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (let [value (apply f args)]\n    (loop [v value]\n      (if (fn? v)\n        (recur (v))\n        v))))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 78, "code": "(fn tr\n  ([f]\n   (let [v (f)]\n     (if (fn? v) (recur v) v)))\n  ([f v]\n   (tr #(f v))))", "user": "508c3d42e4b0f17d83ea26b2"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "575cbe44e4b02ea114799374"}, {"problem": 78, "code": "(fn tr [f & args]\n  (let [v (apply f args)]\n    (if (fn? v) (tr v) v)))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 78, "code": "(fn my-trampoline [fun & r]\n  (let [resp (apply fun r)]\n    (loop [resp resp]\n      (if-not (fn? resp)\n        resp\n        (let [r (resp)] (recur r))))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 78, "code": "(fn [f & a]\n  (let [r (apply f a)]\n    (if (fn? r) (recur r nil) r)))", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 78, "code": "(fn trampolineIt [func & args]\n    (loop [result (apply func args)]\n      (if (not (fn? result))\n        result\n        (recur (result)))))", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 78, "code": "(fn [func & args] \n  (loop [f (apply func args)] \n    (if (fn? f) (recur (f)) f)\n    )\n  )", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 78, "code": "(fn t\n  ([f & a]\n   (t #(apply f a)))\n  ([f]\n   (let [r (f)]\n     (if (fn? r)\n       (recur r)\n       r))))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 78, "code": "(fn [f & a]\n  (loop [f (apply f a)]\n    (if (fn? f) (recur (f))\n      f)))", "user": "57642916e4b0994c1922fbee"}, {"problem": 78, "code": "(fn [f & args]\n  (if\n    (fn? f) (recur (apply f args) nil)\n    f)\n)", "user": "53307da1e4b019098a6f8b5e"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f & args]\n   (my-trampoline #(apply f args)))\n  ([f]\n   (let [res (f)]\n     (if (fn? res)\n       (recur res)\n       res))))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 78, "code": "(fn g [f & a]\n  (let [r (apply f a)]\n    (if (fn? r)\n      (g r)\n      r)))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 78, "code": "(fn tramp [f x]\n  (loop [o (f x)]\n    (if (fn? o)\n      (recur (o))\n      o)))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 78, "code": "(fn tram\n\t([f] \n        (if (fn? f)\n           (recur (f))\n           f))\n\t([f args]\n\t\t(tram (f args))))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 78, "code": "(fn f-trampoline\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (f-trampoline #(apply f args))))", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 78, "code": "(fn my-trampoline [f args]\n  (loop [res (f args)]\n    (if (instance? clojure.lang.IFn res)\n        (recur (res))\n         res)))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 78, "code": "(fn trampolin [fun & args]\n  (let [f (apply fun args)]\n    (if (fn? f) (trampolin f) f)))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [ret (apply f args)]\n    (if (fn? ret)\n      (recur (ret))\n      ret)))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 78, "code": "(fn trump\n  ([f]\n   (if (fn? (f))\n     (recur (f))\n     (f)))\n  ([f & args]\n   (trump #(apply f args))))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 78, "code": "(fn mytramp\n  ([f] \n   (if\n     (fn? (f)) (mytramp (f))\n     (f)))\n  ([f & args]\n   (mytramp #(apply f args))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 78, "code": "(fn __ [f & args]\n  (let [result (apply f args)]\n    (if (fn? result) \n      (__ result)\n      result)))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g)\n      (recur (g))\n      g)))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 78, "code": "(fn [f & args]\n     (#(if (fn? %) (recur (%)) %) (apply f args)))", "user": "57780e4fe4b0979f89651657"}, {"problem": 78, "code": "(fn trampoline2_\n  [f & [args]]\n  (loop [result (f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 78, "code": "(fn my-trampoline\n    ([f]\n     (if (fn? f) (recur (f)) f))\n    ([f & args]\n     (my-trampoline (apply f args))))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 78, "code": "(fn my-trampoline [f & params]\n  (let [mid-result (apply f params)]\n    (if (fn? mid-result)\n      (apply my-trampoline mid-result [])\n      mid-result)))", "user": "50e90813e4b033b0e80d11e7"}, {"problem": 78, "code": "(fn my-trampo\n  ([x]\n   (if (ifn? x)\n     (my-trampo (x))\n     x\n     )\n   )\n   ([x & args]\n   (my-trampo (apply x args))\n   )\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 78, "code": "(fn tramp [f x]\n  (loop [o (f x)]\n    (if (fn? o)\n      (recur (o))\n      o)))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 78, "code": "(fn tramp [f x]\n  (loop [o (f x)]\n    (if (fn? o)\n      (recur (o))\n      o)))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 78, "code": "(fn tramp\n  ([f]\n   (let [res (f)]\n     (if (fn? res)\n       (recur res)\n       res)))\n  ([f & args]\n   (tramp #(apply f args))))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 78, "code": "(fn [f & args]\n     (loop [res (apply f args)]\n       (if (fn? res)\n         (recur (res))\n         res)))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [ret (apply (comp f) args)]\n    (if (fn? ret)\n      (recur (ret)) \n      ret)))", "user": "5799fc93e4b05b1deef9add0"}, {"problem": 78, "code": "(fn [f x]\n     (loop [f (f x)]\n       (if (not (fn? f))\n         f\n         (recur (if (fn? f) (f) f)))))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 78, "code": "(fn [f & args]\n  (first\n    (drop-while\n      fn?\n      (reductions\n        (fn [a _] (a))\n        (apply f args)\n        (range)))))", "user": "57717915e4b0979f896515b3"}, {"problem": 78, "code": "(fn sol\n  ([func] (loop [f func]\n            (if (fn? f) (recur (f)) f)))\n  ([func & args] (sol (apply func args))))", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 78, "code": "(fn myf2 [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f) (recur (f)) f)))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 78, "code": "(fn t\n  ([f & a]\n   (if (fn? (apply f a))\n     (t (apply f a))\n     (apply f a))\n   )\n  ([f]\n   (if (fn? (f))\n     (t (f))\n     (f)) \n   )\n)", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [maybe-f (apply f args)]\n    (if-not (fn? maybe-f)\n      maybe-f\n      (recur (maybe-f)))))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 78, "code": "(fn [f & args]\n  (let [res (apply f args)]\n    (loop [r res]\n      (if (not (instance? clojure.lang.IFn r))\n       r\n        (recur (r))\n       )\n      )\n    )\n  )", "user": "55912230e4b027778923767a"}, {"problem": 78, "code": "(fn new-trampoline [f & params]\n\t((fn inner-trampoline [f] \n\t\t(if (fn? f)\n\t\t\t(inner-trampoline (apply f []))\n\t\t\tf)) (apply f params)))", "user": "57986b76e4b039eba2ecb116"}, {"problem": 78, "code": "(fn trampo\n  ([f] (if (fn? f) (recur (f)) f))\n  ([f & args] (trampo (apply f args))))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 78, "code": "(fn tp [f & args]\n  (if (instance? clojure.lang.IFn f)\n    (tp (apply f args))\n    f))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f' f\n         a args]\n    (let [r (apply f' a)]\n      (if (fn? r)\n        (recur r [])\n        r))))", "user": "532418f3e4b09d4e7a9b54d8"}, {"problem": 78, "code": "(fn [f v]\n    (let\n      [\n        f' (f v)\n      ]\n      (loop\n        [f' f']\n        (if\n          (fn? f')\n          (recur (f'))\n          f'\n        )\n      )\n    )\n  )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res\n    )\n  )\n)", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 78, "code": "(fn tramp\n  ([f x]     \n    (if \n       (fn? f) \n       (tramp (f x))\n       f  \n    )\n  )\n  ([f]     \n   (if \n       (fn? f) \n       (tramp (f))\n       f \n    )\n  )\n )", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 78, "code": "(fn g\n      ([f] (if (fn? f) (recur (f)) f)) \n      ([f & s]\n        (g #(apply f s))))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [func (apply f args)]\n    (if (fn? func)\n      (recur (func))\n      func)))", "user": "558bdcefe4b0277789237633"}, {"problem": 78, "code": "(fn [f & x]\n    (let [r (apply f x) ]\n      (if (fn? r) (recur r ()) r)))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "523b4e91e4b07becd5be21ef"}, {"problem": 78, "code": "(fn [f & args]\n  (letfn [(t [f]\n            (if (fn? f) \n              (t (f)) f))]\n    (t (apply f args))))", "user": "4e9ff8d0535d7eef3080729c"}, {"problem": 78, "code": "(fn [f i]\n  (loop [r (f i)]\n    (if (fn? r) (recur (r)) r)))", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 78, "code": "(fn [fun & args]\n  (loop [res (apply fun args)]\n    (if (not (fn? res))\n      res\n      (recur (res)))))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 78, "code": "(fn [f args]\n  (loop [res (f args)]\n    (if (fn? res) (recur (res)) res)))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 78, "code": "(fn [f & xs]\n  (let [v (apply f xs)]\n    (if (fn? v) (recur v ()) v)))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (let [rec (fn rec [v]\n              (if (fn? v)\n                (rec (v))\n                v))]\n    (rec (apply f args))))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 78, "code": "(fn tr \n\n    ([f x] (tr (f x)))\n\n    ([f]\n\n     (if (fn? f) \n\n       (tr (f))\n\n       f)))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 78, "code": "(fn mt\n  [fn & args]\n  (if (fn? fn)\n    (mt (apply fn args))\n    fn))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 78, "code": "(fn tramp \n  ([f & args]\n   (if (not (instance? clojure.lang.IFn f)) f\n    (if (= args [])\n      (recur (f) args)\n      (recur (apply f args) [])))))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n   (my-trampoline #(apply f args))))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 78, "code": "(fn my-trampoline [f & params]\n\t(let [g (apply f params)]\n\t\t(if (fn? g)\n\t\t\t(recur g nil)\n\t\t\tg)))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 78, "code": "(fn [nextfn & [args]] \n    ((fn [val] (if (fn? val) (recur (val)) val)) (nextfn args))\n)", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 78, "code": "(fn tramp\n    ([f & args] (tramp #(apply f args)))\n    ([f] \n      (let [v (f)]\n        (if (fn? v)\n          (recur v)\n          v))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 78, "code": "(fn my-trampoline [& args]\n               (let [maybe-fn (apply (first args) (rest args))]\n                 (if (fn? maybe-fn)\n                   (recur [maybe-fn])\n                   maybe-fn)))", "user": "57a9e274e4b0b8559636fc5d"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x)\n      (recur (x))\n      x)))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 78, "code": "(fn my-trampoline\n    ([x]\n     (if (fn? x)\n       (recur (x))\n       x))\n    ([f & args]\n     (my-trampoline (apply f args))))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 78, "code": "(fn\n  [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 78, "code": "(fn tramp\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n   (tramp #(apply f args))))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (let [fun? #(re-seq #\"\\$\" (str %))]\n    (loop [f1 (apply f args)]\n    (if (not (fun? f1))\n      f1\n      (recur (f1)))\n   )))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 78, "code": "(fn mytramp [f & args]\n  (loop [r (apply f args)]\n    (if (instance? clojure.lang.AFunction r)\n      (recur (r)) r)))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 78, "code": "(fn p78\n  [f & params]\n  (let [result (apply f params)]\n    (if (fn? result)\n      (recur result ())\n      result)))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 78, "code": "#(loop [f (%1 %2)]\n    (if (fn? f) (recur (f))\n      f))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 78, "code": "(fn my_trampoline [w & args]\n  (loop [res (apply w args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 78, "code": "(fn t\n  ([x]\n   (let [r (x)]\n     (if (fn? r)\n       (recur r)\n       r)))\n  ([x & args]\n   (t #(apply x args))))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 78, "code": "(fn trampo [f & args]\n  (if (or (= java.lang.Long (class f)) (= java.lang.Boolean (class f)))\n    f\n    (trampo (apply f args))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 78, "code": "#(loop [r (apply %1 %&)]\n        (if (fn? r)\n          (recur (r))\n          r))", "user": "576df252e4b0979f8965156f"}, {"problem": 78, "code": "(fn [f & args] \n  (if (fn? f) \n    (recur (apply f args) nil)\n    f))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 78, "code": "#(loop [ret (% %2)] (if (fn? ret) (recur (ret)) ret))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 78, "code": "(fn trampoline2\n  ([f]\n    (let [ret (f)]\n      (if (fn? ret)\n        (recur ret)\n        ret)))\n  ([f & args]\n    (trampoline2 #(apply f args))))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 78, "code": "(fn [f & args]\n  (let [rslt (apply f args)]\n    (loop [may-be-fn rslt]\n      (if-not (fn? may-be-fn)\n        may-be-fn\n        (recur (may-be-fn))))))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 78, "code": "(fn [f & s]\n\t(letfn [(t [v] (if (fn? v) (recur (v)) v))]\n\t\t(t (apply f s))))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 78, "code": "(let [tram (fn ([f] (let [r (f)] (if (fn? r) (recur r) r))))]\n    (fn [f & args] (tram #(apply f args))))", "user": "4eabb245535d7eef30807319"}, {"problem": 78, "code": "(fn [f & a] (loop [r (apply f a)] \n              (if (fn? r)\n                (recur (r))\n                r)))", "user": "5405885ee4b0addc1aec6668"}, {"problem": 78, "code": "(fn t\n  ([f] (let [r (f)]\n         (if (fn? r)\n           (recur r)\n           r)))\n  ([f & a] (t #(apply f a))))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 78, "code": "(fn[f & args](\n        loop[nf (apply f args)](\n          if(not (fn? nf)) nf\n          (recur (nf))\n        )\n      ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 78, "code": "(fn trm [f & ags]\n  (loop [lf (apply f ags)]\n    (if (fn? lf)\n      (recur (lf))\n      lf)))", "user": "56f51879e4b046a417f92069"}, {"problem": 78, "code": "(fn t ([f] (if (fn? f) (t (f)) f))\n                 ([f & args] (t (apply f args))))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 78, "code": "(fn new-tramp\n  [f & args]\n  (loop [ff (apply f args)]\n    (if (fn? ff)\n        (recur (ff))\n        ff)))", "user": "58152157e4b0f478707a0631"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (tramp r)\n      r)))", "user": "5710140fe4b09c608db7042e"}, {"problem": 78, "code": "#(loop [r (%1 %2)]\n     (if (fn? r)\n       (recur (r))\n       r))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (tramp result)\n      result)))", "user": "56069006e4b08b23635d3174"}, {"problem": 78, "code": "(fn tramp[f & ags] (loop [g (apply f ags)]\n                     (if (not (fn? g))\n                       g\n                       (recur (g)))))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [res (apply f args)]\n     (if (fn? res)\n         (my-trampoline res)\n         res)))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 78, "code": "(fn trampoline' [function & arguments]\n  (let [result (apply function arguments)]\n    (if (fn? result)\n      (trampoline' result)\n      result)))", "user": "58247423e4b051871117bec5"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "57f55632e4b0903ccab3dcf1"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [r (apply f args)]\n      (if (fn? r) (recur (r)) r)))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 78, "code": "(fn my-trampoline\n    ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n    ([f & args]\n     (my-trampoline #(apply f args))))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 78, "code": "(fn trampoline2\n  [some-fn & args]\n  (if (fn? (apply some-fn args))\n    (trampoline2 (apply some-fn args))\n    (apply some-fn args)))", "user": "5256c4c1e4b0541d1855ba36"}, {"problem": 78, "code": "(fn tramp [x & args]\n  (loop [xx (apply x args)]\n   (if (fn? xx)\n    (recur (xx))\n    xx)))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 78, "code": "(fn [f & x]\n  (let [ret (apply f x)]\n    (if (fn? ret)\n      (recur ret ())\n      ret)))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 78, "code": "(fn t [f & args] (let [r (apply f args)] (if (fn? r) (t r) r)))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 78, "code": "(fn tra\n  ([f]\n   (let [r (f)]\n     (if (fn? r)\n       (tra r)\n       r)))\n  ([f & args] (tra #(apply f args))))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 78, "code": ";(fn [f & x] \n;  (first (drop-while fn? \n;                     (iterate (fn [f] (if (fn? f) (f) f))\n;                              (apply f x)))))\n\n; shorter + more readable\n(fn [f & x] \n  (if (fn? f) \n    (recur (apply f x) [])\n    f))\n\n; golf: no varargs\n;#((fn [f] (if (fn? f) (recur (f)) f)) (% %2))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 78, "code": "(fn [f & args] ((fn [f] (if (fn? f) (recur (f)) f)) (apply f args)))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 78, "code": "(fn trampoline2\n  ([f] (if (fn? f) (trampoline2 (f)) f))\n  ([f & args]\n   (trampoline2 (apply f args))))", "user": "5609d328e4b05f002753deee"}, {"problem": 78, "code": "(fn mytrump[f & i](loop[res (apply f i)](if (fn? res) (recur (res)) res)))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 78, "code": "(fn [f x] (let [ff (fn [x] (if (fn? x) (recur (x)) x))]\n            (ff (f x))))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 78, "code": "(fn my-trampoline \n  ([f] \n   (let [res (f)]\n     (if (fn? res)\n       (recur res)\n       res)))\n  ([f & args]\n   (my-trampoline #(apply f args))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 78, "code": "(fn my-trampoline \n  ([function]\n     (let [result (function)]\n       (if (fn? result)\n         (recur result)\n         result)))\n  ([function & params]\n     (my-trampoline #(apply function params))))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 78, "code": "(fn my-trampoline [f x]\n  (loop [g (f x)]\n    (if (fn? g)\n      (recur (g))\n      g)))", "user": "4dac39a28cc9d6edb8beb0b3"}, {"problem": 78, "code": "(fn tr [f x]\n  (loop [result (f x)]\n    (if-not (instance? clojure.lang.IFn result)\n      result\n      (recur (result)))))", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 78, "code": "(fn [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (recur result [])\n      result\n      )\n    )\n  )", "user": "525d44bfe4b0cb4875a45d6d"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [nf #(apply f args)]\n    (if (fn? nf) (recur (nf)) nf)))", "user": "55597b84e4b0deb715856e36"}, {"problem": 78, "code": "(fn [s & args]\n    (loop [result (apply s args)]\n      (if (ifn? result)\n        (recur (result))\n        result)))", "user": "586b6753e4b01531a375e956"}, {"problem": 78, "code": "(fn t [fun & args] (let [x (apply fun args)] (if (fn? x) (t x) x)))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 78, "code": "(fn tramp*\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n    (tramp* #(apply f args))))", "user": "56bb652ae4b0f26550335953"}, {"problem": 78, "code": "(fn [f & args] (let [ret (apply f args)] (if (ifn? ret) (recur ret []) ret)))", "user": "51a132cee4b0b292b01ee3ff"}, {"problem": 78, "code": "(fn [f & args] \n  (loop [a (apply f args)]\n    (if (fn? a) \n          (recur (a))\n          a)))", "user": "4f3b5219e4b0e243712b1f2a"}, {"problem": 78, "code": "(fn [f & args] \n  (loop [r (apply f args)] \n      (if (fn? r) (recur (r)) r)\n  )\n)", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 78, "code": "(fn trampoline-clone\n  ([f] (if (fn? f) (recur (f)) f))\n  ([f & args] (trampoline-clone (apply f args))))", "user": "5879d577e4b01531a375ead8"}, {"problem": 78, "code": "(fn my-tramp \n   ([f & p] (my-tramp (apply f p)))\n   ([f] (if (not (fn? f)) f (recur (f)))))\n ;   + 7 8)", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g) (recur (g)) g)))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 78, "code": "(fn t ([f p] (t (f p)))\n  \t\t([f] (if (fn? f) (t (f)) f)))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 78, "code": "(fn [f & args]\n  (if (ifn? f) (recur (apply f args) nil) f))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 78, "code": "(fn [f & a]\n  (let [r (apply f a)]\n    (if (fn? r)\n      (recur r ())\n      r)))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x) (recur (x)) x)))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (let [r (apply f args)]\n   (if (fn? r)\n     (recur r nil)\n     r)))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 78, "code": "(fn mi\n   [ f & args]\n   (let \n     [res (apply f args)]\n     (if \n        (fn? res)\n        (mi res)\n        res)))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 78, "code": "#(loop [f (apply %1 %&)]\n   (if (ifn? f)\n     (recur (f))\n     f))", "user": "58923efce4b00487982d521c"}, {"problem": 78, "code": "(fn tramp\n  ([f]\n     (let [res (f)]\n       (if (fn? res)\n         (recur res)\n         res)))\n  ([f & args]\n     (tramp #(apply f args))))", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 78, "code": "(fn rec \n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n   (rec #(apply f args))))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [ans (apply f args)]\n    (if (fn? ans)\n      (recur (ans))\n      ans)))", "user": "4f7ab8c7e4b06e829148e19c"}, {"problem": 78, "code": "(fn t*\n    ([f]\n     (if (fn? f)\n       (recur (f))\n       f))\n    ([f & args]\n     (t* (apply f args))))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 78, "code": "(fn my-trampoline\n  ([func]  (if (fn? func)   (recur (func))   func))\n  ([func & args] (my-trampoline (apply func args))))", "user": "580d2788e4b0849f6811b730"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [val (apply f args)]\n    (if (ifn? val) (recur (val))\n        val)\n    ))", "user": "589037b4e4b00487982d51d0"}, {"problem": 78, "code": "(fn t\n  ([f & args] (t (apply f args)))\n  ([g]\n   (if (ifn? g)\n     (recur (g))\n     g)))", "user": "5458c74de4b01be26fd74623"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [ret (apply f args)]\n    (if (fn? ret)\n      (recur (ret))\n      ret)))", "user": "57625c18e4b0994c1922fba4"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 78, "code": "(fn tramp [fn & args]\n  (if (= (first (bases (class fn))) clojure.lang.AFunction) (tramp (apply fn args)) fn)\n  )", "user": "58950f29e4b00487982d5270"}, {"problem": 78, "code": "(fn [f arg] (loop [r (f arg)] (if (instance? clojure.lang.IFn r) (recur (r)) r) ))", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 78, "code": "(fn [f & args]\n  (let [v (apply f args)]\n    (loop [v v]\n      (if (fn? v)\n        (recur (v))\n        v))))", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 78, "code": "(fn [a-function & some-arguments] (loop [result (apply a-function some-arguments)]\n                                    (if (fn? result)\n                                      (recur (result))\n                                      result)))", "user": "50e1bdd8e4b019fc399ce17f"}, {"problem": 78, "code": "(fn f-tr [f & args] (if (fn? f) (f-tr (apply f args)) f))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 78, "code": "(fn [f a] \n  (loop [res (f a)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (not (fn? r)) \n      r\n      (recur (r)))))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [f (apply f args)]\n    (if (ifn? f)\n      (recur (f))\n      f)))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 78, "code": "(fn t\n  ([fun & args]\n  \t(t (apply fun args)))\n  ([fun]\n   (if (instance? clojure.lang.AFunction fun) (recur (fun)) fun)))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 78, "code": "#(->> (%1 %2)\n      (iterate (fn [f] (f)))\n      (drop-while fn?)\n      (first))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 78, "code": "(fn tramp\n  ([f]\n   (let [res (f)]\n     (if (fn? res)\n       (recur res)\n       res)))\n  ([f & args]\n   (tramp #(apply f args))))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 78, "code": "(fn tramp!\n  ([f & args]\n    (tramp! #(apply f args)))\n  ([f]\n    (let [res (f)]      \n      (if (fn? res)\n        (tramp! res)\n        res))))", "user": "587a3babe4b01531a375eae2"}, {"problem": 78, "code": "(fn trampoline' [f & rest]\n  (let [result (apply f rest)]\n    (loop [r result]\n      (if (fn? r)\n        (recur (r))\n        r))))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 78, "code": "(fn [f & args]\n       (loop [f (apply f args)] \n         (if (fn? f) \n           (recur (f)) \n           f)))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (my-trampoline #(apply f args))))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 78, "code": "(fn [a-fn & args]\r\n  (loop [curr-val (apply a-fn args)]\r\n    (if (fn? curr-val)\r\n      (recur (curr-val))\r\n      curr-val)))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 78, "code": "(fn tramp \n  ([f & x]\n   (tramp (apply f x)))\n  ([f] \n   (if (fn? f) (tramp (f)) f))\n  )", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 78, "code": "(fn [f & args] (loop [g (apply f args)] (if (not (fn? g)) g (recur (g)))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 78, "code": "(fn [f & params]\n  (loop\n   [out (apply f params)]\n   (if\n    (not (fn? out))\n    out\n    (recur (out)))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 78, "code": "(fn [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (recur result nil)\n      result)))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 78, "code": "(fn [a & args]\n      (if (fn? a)\n        (recur (apply a args) nil)\n        a))", "user": "514a3fa5e4b0829bd132edb6"}, {"problem": 78, "code": "(fn [f & more]\n    (loop [f (apply f more)]\n      (if (fn? f)\n        (recur (f))\n        f)))", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 78, "code": "(fn [f & args]\n (loop [ret (apply f args)]\n   (if (fn? ret)\n     (recur (ret))\n     ret)))", "user": "56f881e0e4b08e7d20b96839"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 78, "code": "(fn [f & args] (loop [v-or-f (apply f args)] (if (fn? v-or-f) (recur (v-or-f)) v-or-f)))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 78, "code": "(fn t ([f]\n     (let [r (f)]\n       (if (fn? r)\n         (t r)\n         r)))\n  ([f a]\n     (t #(f a))))", "user": "4fe9de74e4b0547ebccb2475"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x)\n      (recur (x))\n      x)) )", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [f' (apply f args)]\n    (if (ifn? f')\n      (recur (f'))\n      f')))", "user": "5901158de4b0438e51c2d039"}, {"problem": 78, "code": "(fn tramp\n        ([f rem]\n         (if (fn? (f rem)) (tramp ((f rem))) (f rem)))\n  \n  \n        ([f]\n         (if (fn? f) (tramp (f)) f)))", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 78, "code": "(fn [f & args]\n  ((fn tramp [m]\n     (if (fn? m)\n       (tramp (m))\n       m)\n   ) (apply f args))\n)", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 78, "code": "(fn [tf & args] (loop [f (apply tf args)] \n                  (if (not (fn? f)) f\n                    (recur (f)))))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 78, "code": "(fn [f x]\n  (loop [r (f x)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 78, "code": "(fn t\n  ([f] (let [ret (f)]\n         (if (fn? ret)\n           (t ret)\n           ret)))\n  ([f & args]\n   (t #(apply f args) )))", "user": "5823d3e6e4b051871117beb8"}, {"problem": 78, "code": "(fn trampo [f & xs]\n  (if (fn? f)\n    (trampo (apply f xs))\n    f))", "user": "58ffac9de4b0438e51c2cffd"}, {"problem": 78, "code": "(fn tramp [f & vs]\n\n    (letfn [(t [f]\n              (if (fn? f)\n                (t (f))\n                f))]\n      (t (apply f vs))\n      )\n    )", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 78, "code": "(fn xtramp [f & args]\n  (let [res (apply f args)]\n    (if (fn? res)\n      (xtramp res)\n      res)))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 78, "code": "(fn my-trampoline\n\t([f & args] (my-trampoline #(apply f args)))\n\t([f]\n\t\t(let [result (f)]\n\t\t\t(if (fn? result)\n\t\t\t\t(recur result)\n\t\t\t\tresult))))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 78, "code": "(fn tr ([f] (let [r f]\n           (if (fn? r)\n             (recur (r))\n             r)))\n  ([f & a] (tr #(apply f a))))", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 78, "code": "(fn [f & xs] \n  (loop[tr (apply f xs)] \n    (if-not (fn? tr) tr (recur (tr)))))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 78, "code": "(fn tramp [f & xs]\n  (let [v (apply f xs)]\n    (if (ifn? v) (tramp v) v)))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 78, "code": "(fn tramp \n       ([f]\n        (let [ret (f)]\n          (if (fn? ret)\n            (recur ret)\n            ret)))\n       ([f & args]\n        (tramp #(apply f args))))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 78, "code": "(fn [f & args]\n  ((fn [f]\n      (if (fn? f)\n        (recur (f))\n        f)) (apply f args)))", "user": "58db362be4b0a4d5acaab675"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 78, "code": "(fn trp\n    ([f] (if (fn? f) (trp (f)) f))\n    ([f a] (trp (f a))))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 78, "code": "(fn tramp\n  ([f x] (tramp (f x)))\n  ([x]\n   (if (fn? x)\n     (tramp (x))\n     x)))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 78, "code": "(fn [f & args]\n     (let [res (apply f args)]\n       (if (ifn? res) (recur res nil) res)))", "user": "5935b010e4b04f87174def55"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 78, "code": "(fn f78\n  ([f]\n   (let [res (f)]\n     (if (ifn? res)\n       (recur res)\n       res)))\n  ([f & args]\n   (f78 (fn [] (apply f args)))))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 78, "code": "(fn tramp' [f & args]\n  (let [res (apply f args)]\n    (if (fn? res)\n      (recur res ())\n      res)))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 78, "code": "(fn [f & args]\n  (if (not (fn? f))\n    f\n    (recur (apply f args) nil)))", "user": "592334c7e4b0a390037439ee"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 78, "code": "(fn\n  [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "59251947e4b072a2710fce69"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [tbc (apply f args)]\n    (if (fn? tbc) \n        (recur (tbc))\n        tbc)))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [r (apply f args)]\n      (if (fn? r)\n        (recur (r))\n        r)))", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 78, "code": "(fn g [f & xs]\n  (loop [f (apply f xs)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 78, "code": "(fn __\n  ([f] (let [\n             ff (f)\n             ]\n         (if (fn? ff)\n           (recur ff)\n           ff\n           )))\n  ([f & args] (__ #(apply f args))))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x) (recur (x)) x)))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 78, "code": "(fn t [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g)\n      (recur (g))\n      g\n    )\n  )\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 78, "code": "(fn tramp-q\n  [fs in]\n  (let [f (fn f [g] (if (fn? g) (f (g)) g))]\n    (f (fs in))))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 78, "code": "(fn tramp\n  ([f]\n   (let [res (f)]\n     (if (fn? res)\n       (recur res)\n       res)))\n  ([f & args]\n   (tramp #(apply f args))))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 78, "code": "(fn tt \n  ([f & init] (tt #(apply f init)))\n  ([f]\n  (let [newi (f)]\n    (if (fn? newi)\n        (recur newi)\n        newi))))", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [x (apply f args)]\n      (if (fn? x)\n        (recur (x))\n        x)))", "user": "4e837808535db62dc21a62d9"}, {"problem": 78, "code": "(fn [f & args] (\n                loop [ fx (apply f args)]\n                (if (fn? fx) (recur (fx)) fx)\n                ))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 78, "code": "(fn\n  [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "5893c64ce4b00487982d524b"}, {"problem": 78, "code": "#(loop [x (apply %1 %&)]\n   (if (fn? x)\n     (recur (x))\n     x))", "user": "4fb1d7ace4b081705acca281"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [acc (apply f args)]\n    (if (not (fn? acc))\n      acc\n      (recur (acc)))))", "user": "587ee260e4b052da650a6353"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g)\n      (recur (g))\n      g)))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (if (fn? f)\n    (recur (apply f args) [])\n    f))", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [ret (apply f args)]\n    (if (fn? ret)\n      (recur (ret))\n      ret)))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 78, "code": "(fn [f & args]\n  (let [result (apply f args)]\n    (if\n     (fn? result)\n     (recur result ())\n     result)))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 78, "code": "(fn [f v] (first (drop-while fn? (iterate #(%) (f v)))))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [val (apply f args)]\n    (if (instance? clojure.lang.IFn val)\n      (recur val nil)\n      val)))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 78, "code": "(fn tramp [f & args]\n \t(let [result (apply f args)]\n      (if (fn? result)\n      \t(recur result [])\n        result\n      )\n    )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 78, "code": "(fn my-trampoline\n  [fn & args]\n  (loop [v (apply fn args)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "user": "59a24c92e4b066c664927d20"}, {"problem": 78, "code": "(fn tramp\n\t[f & args]\n\t\t(loop [ret (apply f args)]\n\t\t\t(if (fn? ret)\n\t\t\t\t(recur (ret))\n\t\t\t\tret)))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f #(apply f args)]\n    (let [val (f)]\n      (if (fn? val) (recur val) val))))", "user": "59ab2b86e4b08cbb53654d91"}, {"problem": 78, "code": "#(loop [res (%1 %2)]\n     (if (fn? res)\n       (recur (res))\n       res\n       ))", "user": "596d630ae4b069c0a1a19846"}, {"problem": 78, "code": "(fn tramp [f arg] (loop [ret (f arg)] (if (fn? ret) (recur (ret)) ret)))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 78, "code": "(fn trampo [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (trampo r)\n      r)))", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 78, "code": "(fn t\n  ([f] (if (fn? f) (t (f)) f))\n  ([f & a] (t (apply f a))))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 78, "code": "(fn tramp\n  ([f arg] (tramp (f arg)))\n  ([input]\n   (if (instance? clojure.lang.IFn input)\n     (recur (input))\n     input)))", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 78, "code": "(fn rec\n        ([f]\n         (let [ret (f)]\n           (if (fn? ret)\n             (recur ret)\n             ret)))\n        ([f & args]\n         (rec #(apply f args))))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 78, "code": "(fn my-trampoline\n  [f & args]\n  (loop [result (apply f args)]\n    (if (not (fn? result))\n      result\n      (recur (result)))))", "user": "594266cfe4b060784b3b790b"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (my-trampoline #(apply f args))))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 78, "code": "(fn my-trampoline\n  [f & args]\n  (cond\n   (not (empty? args)) (my-trampoline (apply f args))\n   (fn? f) (my-trampoline (f))\n   :else f\n   )\n  )", "user": "59cc4d5ee4b0a024fb6ae5d0"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [g (apply f args)]\n    (if (not (fn? g))\n      g\n      (recur (g)))))", "user": "4ff769bce4b0678c553fc38f"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "51ae350fe4b09397d5109790"}, {"problem": 78, "code": "(fn mytrampoline [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g)\n      (recur (g))\n      g)))", "user": "562add6de4b00e49c7cb4834"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "59358f74e4b04f87174def52"}, {"problem": 78, "code": "(fn mytramp\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (mytramp #(apply f args))))", "user": "57ed8315e4b0bfb2137f5b9a"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f' (apply f args)]\n    (if (fn? f')\n      (recur (f'))\n      f')))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 78, "code": "(fn furp [f & args]\n  (if (fn? f)\n    (if (empty? args)\n      (furp (f))\n      (furp (apply f args))\n    )\n    f\n  )\n)", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 78, "code": "(fn f\n  ([x & y]  \n   (let [r (apply x y)]\n     (if (fn? r)\n       (f r)\n       r))))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 78, "code": "(fn custom-trampoline [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g) (recur (g)) g)))", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 78, "code": "(fn tramp\n  [f & a]\n  (let [res (apply f a)]\n    (if (fn? res)\n      (recur res nil)\n      res)))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 78, "code": "(fn [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (recur result [])\n      result)))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 78, "code": "(fn t\n  [f & args]\n  (let [res (apply f args)]\n    (if (fn? res)\n      (t res)\n      res)))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 78, "code": "(fn tramp\n  ([f & args] (tramp (apply f args)))\n  ([f] (if (fn? f) (tramp (f)) f)))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 78, "code": "(fn __ [f0 & args]\n  (loop [f (apply f0 args)]\n    (if (ifn? f) (recur (f)) f)))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [init-args (if (empty? args) [] args)\n        init-ret (apply f init-args)]\n    (loop [ret init-ret]\n      (if (not (fn? ret))\n        ret\n        (recur (ret))))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [x (apply f args)]\n    (if (fn? x)\n      (recur (x))\n      x)))", "user": "59a080e3e4b0871e7608b837"}, {"problem": 78, "code": "(fn [f & args]\n  (let [res (apply f args)]\n    (loop [r res]\n      (if (not (fn? r))\n        r\n        (recur (r))))))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 78, "code": "#(loop [f (% %2)]\n   (if (fn? f)\n     (recur (f))\n     f))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 78, "code": "(fn t\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n   (t #(apply f args))))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 78, "code": "(fn trampolin\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (trampolin #(apply f args))))", "user": "5047782ce4b0371827a27bc2"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res) (recur (res)) res)))", "user": "589b98fae4b00487982d533c"}, {"problem": 78, "code": "(fn __\n  ([f] (let [r (f)] (if (fn? r) (__ r) r)))\n  ([f & args] (__ #(apply f args))))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 78, "code": "(fn [f & args]\n     (loop [f (apply f args)]\n       (if (fn? f)\n         (recur (f))\n         f)))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 78, "code": "(fn __ [f a]\n  (loop [g (f a)]\n    (if (fn? g) (recur (g)) g)))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 78, "code": "(fn ([f & args]\n      (let [myArg (if (= 1 (count args)) (first args) args)\n            result (f myArg)]\n           (if (fn? result)\n              ((fn process [func]\n                (if (fn? (func))\n                  (process (func))\n                  (func)\n                )) result) result))))", "user": "571172ece4b09c608db70446"}, {"problem": 78, "code": "(fn myt ([f] (let [ret (f)]\n           (if (fn? ret)\n                (recur ret)\n                ret\n            )))\n    ([f & args] (myt #(apply f args)))\n  )", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 78, "code": "(fn t [f & args]\n  (let [v (apply f args)]\n    (if (fn? v)\n      (t v)\n      v)))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 78, "code": "#(loop [f (apply % %&)] (if (fn? f) (recur (f)) f))", "user": "4dc78527535d8a4b2fd7428f"}, {"problem": 78, "code": "(fn t [f & xs] \n\t(let [v (apply f xs)] \n\t     (if (fn? v)\n\t         (t v)\n\t         v)))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [x (apply f args)]\n          (if (fn? x)\n              (recur (x))\n              x)))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 78, "code": "( fn[f & args]\n(let [res (apply f args)]\n(if (fn? res)\n(recur res nil)\nres)))", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 78, "code": "(fn my-trampoline\n  ([func]\n    (let [res (func)]\n      (if (fn? res)\n        (recur res)\n        res)))\n  ([func & args]\n    (let [res (apply func args)]\n      (if (fn? res)\n        (my-trampoline res)\n        res))))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 78, "code": "(fn [f & args] (loop [r (apply f args)] (if (fn? r) (recur (r)) r)))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 78, "code": "(fn tramp \n  [f & xs]\n    (let [f' (apply f xs)]\n      (if (fn? f')\n        (tramp f')\n        f')))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 78, "code": "(fn tr [f & ps] \n   (if (fn? f) (tr (apply f ps)) f))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 78, "code": "(fn trampoline-\n  ([f]\n    (let [r (f)]\n      (if (fn? r)\n        (recur r)\n        r)))\n  ([f & args]\n    (trampoline- #(apply f args))))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 78, "code": "(letfn [(trampoline-seq\n         ([f args] (trampoline-seq #(apply f args)))\n         ([f] (lazy-seq (let [v (f)]\n                          (cons v (if (fn? v)\n                                    (trampoline-seq v)\n                                    nil))))))]\n  (fn [f & args]\n    (last (trampoline-seq f args))))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 78, "code": "(fn mtrampoline [f & xs]\n  (let [r (apply f xs)]\n    (if (ifn? r)\n      (mtrampoline r)\n      r)))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [val (apply f args)]\n    (loop [x val]\n      (if (fn? x)\n        (recur (x))\n        x\n        )\n      )\n    )\n  )", "user": "5a621702e4b0512ff01cd983"}, {"problem": 78, "code": "(fn tramp [f & args]\n    (loop [r (apply f args)]\n      (if (fn? r)\n        (recur (r))\n        r)))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 78, "code": "(fn\n  [func & args]\n  (loop [result (apply func args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 78, "code": "(fn trampy [f1 & args]\n  (let [res (apply f1 args)]\n    (if (ifn? res)\n      (trampy res)\n      res)))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 78, "code": "(fn t [f & x]\n  (if (fn? f) (t (apply f x)) f))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 78, "code": "(fn trampoline*\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n   (trampoline* #(apply f args))))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [g (apply f args)]\n      (if-not (fn? g)\n        g\n        (recur (g)))))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 78, "code": "(fn m ([f] (if (fn? f) (m (f)) f))([f & a] (m (apply f a))))", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if-not (fn? res)\n      res\n      (recur (res)))))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 78, "code": "(fn tr\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n   (tr (apply partial f args))))", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 78, "code": "(fn [f & args]\n  (let [v (apply f args)] (if (fn? v) (recur v '()) v)))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 78, "code": "(fn [f & args]\n  (letfn [(tramp [value]\n            (if (fn? value) (tramp (value)) value))]\n    (tramp (apply f args))))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 78, "code": "(fn mt\n  [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (mt result)\n      result)))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "4eda7cc3535d10e5ff6f530e"}, {"problem": 78, "code": "(fn my-trampoline [f & params]\n  (let [mid-result (apply f params)]\n    (if (fn? mid-result)\n      (apply my-trampoline mid-result [])\n      mid-result)))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 78, "code": "(fn __ [f & args]\n        (loop [r (apply f args)]\n          (if (fn? r) (recur (r)) r)))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 78, "code": "(fn mytram [f p]\n  (loop [func (f p)]\n    (if (fn? func)\n      (recur (func))\n      func)))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (recur result [])\n      result\n      )\n    )\n  )", "user": "5aada061e4b073f17744257a"}, {"problem": 78, "code": "(fn tramp\n  [f & args]\n  (let [res (apply f args)]\n    (if (fn? res) (tramp res) res)))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f) (recur (f)) f)))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 78, "code": "(fn [f & args]\n  (let [res (apply f args)]\n    (if (fn? res) (recur res ()) res)))", "user": "5ab5f60be4b073f177442643"}, {"problem": 78, "code": "(fn problem-78\n    ([f]\n      (let [res (f)]\n        (if (fn? res)\n          (recur res)\n          res)))\n    ([f & args]\n      (problem-78 #(apply f args))))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 78, "code": "(fn trampoline-me\n     ([f]\n      (let [x (f)]\n        (if (fn? x)\n          (recur x)\n          x)))\n     ([f & args]\n      (trampoline-me #(apply f args))))", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 78, "code": "(fn trampoline-me\n     ([f]\n      (let [x (f)]\n        (if (fn? x)\n          (recur x)\n          x)))\n     ([f & args]\n      (trampoline-me #(apply f args))))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 78, "code": "(fn [f & args] (loop [r (apply f args)] (if (fn? r) (recur (r)) r)))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [v (apply f args)]\n      (if (not (fn? v))\n        v\n        (recur (v)))))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 78, "code": "#(let [f (apply %1 %&)]\n   (if (fn? f) (recur f nil) f))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 78, "code": "(fn tramp [f x]\n  (loop [g (f x)]\n    (if (fn? g)\n      (recur (g))\n      g)))", "user": "5ab564f8e4b073f177442639"}, {"problem": 78, "code": "(fn mytrampoline [f & args]\n  (let [r (apply f args)]\n       (if (fn? r) (recur r ()) r)))", "user": "588e4e05e4b00487982d5188"}, {"problem": 78, "code": "(fn __\n  [function & args]\n  (loop [result (apply function args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 78, "code": "(fn t1\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (t1 #(apply f args))))", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 78, "code": "(fn t\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (t #(apply f args))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 78, "code": "(fn [f & args]\n  (let [g (apply f args)]\n    (if (fn? g)\n      (recur g [])\n      g)))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 78, "code": "(fn tr\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tr #(apply f args))))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 78, "code": "(fn t\n  [f & a]\n  (if-not (fn? f)\n    f\n    (t (apply f a))))", "user": "577202d2e4b0979f896515c0"}, {"problem": 78, "code": "(fn [f & params] (letfn [(tr [x] (if (fn? x) (tr (x)) x))] (tr (apply f params))))", "user": "52570aeae4b0541d1855ba42"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [r (apply f args)]\n      (if (fn? r)\n        (recur (r))\n        r)))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 78, "code": "(fn [f & args]\n  (if (fn? f)\n    (recur (apply f args) nil)\n    f))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f) (recur (f)) f)))", "user": "59ddae03e4b01968742fed65"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n      (if (fn? r)\n        (recur (r)) r)))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f & args] (my-trampoline (apply f args)))\n  ([f]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 78, "code": "(fn tram [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (let [ff (res)]\n        (recur ff))\n      res)))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 78, "code": "(fn t [f & l]\n  (loop [r (apply f l)]\n    (if (fn? r) (recur (r))\n        r)))", "user": "583048d9e4b051871117c007"}, {"problem": 78, "code": "(fn my-tramp [f & args]\n  (loop [cur-val (apply f args)]\n    (if (fn? cur-val)\n      (recur (cur-val))\n      cur-val)))", "user": "5b13ba71e4b0cc2b61a3be53"}, {"problem": 78, "code": "(fn [f & args]\n  (let [ret (apply f args)]\n    (if (fn? ret)\n      (recur ret [])\n      ret)))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 78, "code": "(fn tr [f & args]\n  (loop [ret (apply f args)]\n    (if (fn? ret) (recur (ret)) ret)))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 78, "code": "(fn\n  [f & a]\n  (let [fa (apply f a)]\n    (if (fn? fa)\n      (recur fa nil)\n      fa\n      )\n    )\n  )", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 78, "code": "(fn my-trampoline[f x]\n  (loop [next (f x)]\n    (if\n        (ifn? next) (recur (next))\n        next)))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 78, "code": "(fn trampoline-mine\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (trampoline-mine #(apply f args))))", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 78, "code": "(fn tramp ([f] (if (fn? f) (tramp (f)) f)) ([f & args] (tramp (apply f args))))", "user": "5addadfce4b0837691e92c13"}, {"problem": 78, "code": "(fn aa \n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (aa #(apply f args))))", "user": "5ac04101e4b073f177442737"}, {"problem": 78, "code": "(fn tramp [f & args] (if (fn? f) (tramp (apply f args)) f))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f]\n   (let [result (f)]\n     (if (fn? result)\n       (recur result)\n       result)))\n  ([f & args]\n   (my-trampoline #(apply f args))))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 78, "code": "(fn tramp\n  ([f]\n   (if (fn? f)\n     (recur (f))\n     f))\n  ([f & args]\n   (tramp (apply f args))))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 78, "code": "(fn [f1 & args]\n    (loop [out (apply f1 args)]\n      (if (not (ifn? out))\n        out\n        (recur (out)))))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 78, "code": "(fn [f & args] (let [call (fn c [obj] (if (ifn? obj) (c (obj)) obj))] (call (apply f args))))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 78, "code": "(fn trampoline_2\n  [f & x] (if (fn? (apply f x)) (trampoline_2 (apply f x)) (apply f x)))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 78, "code": "(fn tramp [f & args] (if (fn? f) (tramp (apply f args)) f))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 78, "code": "(fn my-trampoline [f & more]\n  (loop [g (apply f more)]\n    (if (fn? g)\n      (recur (g))\n      g)))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 78, "code": "(fn \n  [func & params]\n    (let [res (apply func params)]\n      (if (fn? res) (recur res [])\n        res)))", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 78, "code": "#(->> (% %2)\n  (iterate (fn [f] (f)))\n  (drop-while fn?)\n  first)", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 78, "code": "(fn [fun & args]\n  (loop [x #(apply fun args)]\n    (if (fn? x)\n      (recur (x))\n      x\n  )))", "user": "5ab1665de4b073f1774425c0"}, {"problem": 78, "code": "(fn zz[f & args]\n  ( if (empty? args)\n    (if (fn? f)\n      (zz (f))\n      f\n      )\n    (zz (apply f args))\n    )\n  )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 78, "code": "(fn trampoline2 [f & params]\n  (loop [result (apply f params)]\n    (if\n      (fn? result)\n      (recur (result))\n      result)))", "user": "5779556de4b0979f8965166e"}, {"problem": 78, "code": "(fn trampoline- [f & args]\n  (loop [result (apply f args)]\n    (if (not (fn? result))\n      result\n      (recur (result)))))", "user": "524740e7e4b05ef8e38e635d"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [ff (apply f args)]\n    (if (not (fn? ff))\n      ff\n      (recur (ff)))))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 78, "code": "(fn [f v]\n  (loop [g (f v)]\n    (if (fn? g)\n      (recur (g))\n      g)))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [res (apply f args)]\n      (if (fn? res)\n        (recur (res))\n        res)))", "user": "5777cffae4b0979f89651651"}, {"problem": 78, "code": "(fn -trampoline\n  [f & args]\n  (if (fn? f)\n    (recur (apply f args) nil)\n    f))", "user": "5b477969e4b02d533a91bc6f"}, {"problem": 78, "code": "(fn [f & args]\n    (let [result (apply f args)]\n      (loop [result result]\n        (if (fn? result)\n          (recur (result))\n          result))))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [val (apply f args)]\n    (if (fn? val)\n      (recur (val))\n      val)))", "user": "5b4fef74e4b02d533a91bcde"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f]\n   (let [res (f)]\n     (if (fn? res)\n       (recur res)\n       res)))\n  ([f & args]\n   (my-trampoline (fn []\n                    (apply f args)))))", "user": "5b478997e4b02d533a91bc71"}, {"problem": 78, "code": "#(loop [_f (apply %1 %&)]\n   (if (fn? _f)\n     (recur (_f))\n     _f))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 78, "code": "(fn t [f & args]\n  (if (fn? f)\n    (t (apply f args))\n    f))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 78, "code": "(fn t [f & a]\n  (cond\n   (and (fn? f) (empty? a)) (t (f))\n   (fn? f) (t (apply f a))\n   :else f))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [f f args args]\n      (if\n        (ifn? f)\n        (recur (apply f args) [])\n        f)))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 78, "code": "(fn tramp [tramp-fn & tramp-fn-args]\n  (loop [result (apply tramp-fn tramp-fn-args)]\n    (if-not (fn? result)\n      result\n      (recur (result)))))", "user": "52761edae4b03e8d9a4a74d4"}, {"problem": 78, "code": "(fn tramp [foo & args]\n\t(if (fn? foo)\n      (tramp (apply foo args))\n      foo))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 78, "code": "(fn tramp [f & xs]\n  (loop [result (apply f xs)]\n    (if (fn? result) (recur (result)) result)))", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 78, "code": "(fn tramp [f1 & args]\n  (let [f (apply f1 args)]\n    (loop [f f]\n      (if (fn? f)\n        (recur (f))\n        f))))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 78, "code": "(fn [f a]\n  (loop [r (f a)]\n    (if (fn? r) (recur (r)) r)))", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 78, "code": "(fn trampoline' [f & args]\n  (let [ret (apply f args)]\n    (if (fn? ret)\n      (trampoline' ret)\n      ret)))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 78, "code": "(fn tramp [x & xs]\n    (cond\n      xs      (tramp (apply x xs))\n      (fn? x) (tramp (x))\n      :else   x))", "user": "58e37946e4b005f69f193cae"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (ifn? f)\n      (recur (f))\n      f)))", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 78, "code": "(fn tramp\n  ([f] (if (fn? f) (tramp (f)) f))\n  ([f & args] (tramp (apply f args))))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 78, "code": "(fn f\n  ([x]\n   (if (fn? x) (f (x)) x))\n  ([x y]\n   (let [r (x y)]\n     (if (fn? r) (f (r)) r))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result) (recur (result)) result)))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [f* (apply f args)]\n      (if (fn? f*) (recur (f*)) f*)))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 78, "code": "(fn trampoline*\n    ([x]\n     (if (fn? x)\n       (trampoline* (x))\n       x))\n    ([f & args]\n     (trampoline* (apply f\n                         args))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 78, "code": "(fn foo   ([f & args] (foo (fn [] (apply f args))))\n  ([f] (let [v (f)]\n    (if (fn? v)\n      (foo v)\n      v))))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 78, "code": "(fn [f & more]\n  (loop [ff (apply f more)]\n    (if (fn? ff) (recur (ff))\n      ff  \n    )\n   )\n)", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 78, "code": "(fn my-trampolin\n  [f & args]\n  (if (fn? f)\n    (my-trampolin (apply f args))\n    f))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 78, "code": "(fn tramp\n  ([f] (let [res (f)]\n         (if (fn? res)\n           (recur res)\n           res)))\n  ([f & args] (tramp #(apply f args))))", "user": "5bf50ebce4b0b326c961d8a1"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [ret (apply f args)]\n       (if (fn? ret)\n         (my-trampoline ret)\n         ret)))", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f]\n   (let [res (f)]\n     (if (fn? res)\n       (recur res)\n       res)))\n  ([f & args]\n   (my-trampoline #(apply f args))))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [tramp (fn [x]\n                (if (fn? x) (recur (x)) x))]\n    (tramp (apply f args))))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 78, "code": "(fn [f & x]\n  (loop [g (apply f x)]\n    (if (fn? g) (recur (g)) g)))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 78, "code": "(fn [f & args]\n  (let [ret (apply f args)]\n    (if (fn? ret) (recur ret '()) ret)))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 78, "code": "#(->> (% %2)\n      (iterate (fn [f] (f)))\n      (drop-while ifn?)\n      first)", "user": "5c1aadcde4b01240ff567209"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 78, "code": "(fn custom-trampoline \n  [f & argv]\n  (if (fn? f) (custom-trampoline (apply f argv)) f)\n  )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 78, "code": "(fn my-trampoline\n  [f & xs]\n  (let [result (apply f xs)]\n    (if (fn? result) (my-trampoline result)\n        result)))", "user": "5c222b7de4b07e362c230588"}, {"problem": 78, "code": "(fn [x & xs] (loop [f (apply x xs)]\n                (if (fn? f) (recur (f)) f)))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 78, "code": "#(letfn [(g [f] (if (fn? f) (g (f)) f))]\n  (g (apply % %&)))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f & args]  (my-trampoline (apply f args)))\n  ([f]\n   (if (fn?  f) (recur (f))\n                                  f))\n )", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 78, "code": "(fn tramp [f & args] (let [n (apply f args)] (if (fn? n) (tramp n) n)))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 78, "code": "#(let [v (apply % %&)] (loop [x v] (if (fn? x) (recur (x)) x)))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 78, "code": "(fn [f & params]\n  (letfn [(my-fn [f] (if (fn? f) (recur (f)) f))]\n    (my-fn (apply f params))))", "user": "5c44f0fde4b0e06e1360a384"}, {"problem": 78, "code": "(fn tramp\n        ([f] (let [ret (f)]\n               (if (fn? ret)\n                 (recur ret)\n                 ret)))\n        ([f & args] (tramp #(apply f args))))", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 78, "code": "(fn [f & more]\n  (loop [val (apply f more)]\n    (cond\n      (fn? val) (recur (val))\n      :else val)))", "user": "52503747e4b0541d1855b828"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (->> (apply f args)\n    (iterate (fn [v] (if (fn? v) (v) v)))\n    (drop-while fn?)\n    first))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 78, "code": "#(->> (%1 %2)\n        (iterate (fn [f] (f)))\n        (drop-while fn?)\n        (first))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 78, "code": "(fn trampoline' [f & args] (let [f' (apply f args)] (if (fn? f') (trampoline' f') f')))", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 78, "code": "(fn [func arg]\n  (letfn [(tramp\n           ([f a] (tramp (f a)))\n           ([a] (if (fn? a) (tramp (a)) a)))]\n    \n    (tramp func arg)))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 78, "code": "#(loop [x (% %2)] (if (fn? x) (recur (x)) x))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [y (apply f args)]\n    (if (fn? y)\n      (recur (y))\n      y)))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 78, "code": "(fn tr\n  ([f] (let [r (f)] (if (fn? r) (recur r) r)))\n  ([f & args] (tr #(apply f args))))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 78, "code": "(fn [x & a]\n  (loop [x (apply x a)]\n    (if (fn? x) (recur (x)) x)))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 78, "code": "(fn [fun & args]\n  (let [fun-res #(apply fun args)]\n    (println fun-res)\n    (println \"_____________________________________________\")\n    (loop [fun-res (fun-res)]\n      (if (fn? fun-res)\n        (recur (fun-res))\n        fun-res))))", "user": "5c80e6e6e4b0c8042a70ce1d"}, {"problem": 78, "code": "(fn reimplement-trampoline\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n   (reimplement-trampoline #(apply f args))))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 78, "code": "(fn t [f & args]\n     (let [r (apply f args)]\n       (if (fn? r)\n         (t r)\n         r)))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 78, "code": "(fn [f & xs]\n  (let [x (apply f xs)]\n    (if (fn? x) (recur x []) x)))", "user": "586bc870e4b01531a375e964"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [r (apply f args)]\n    (if-not (fn? r)\n      r\n      (recur (r)))))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 78, "code": ";(fn trampoline*\n; ([f] (if (fn? f) (trampoline* (f)) f))\n; ([f & xs] (trampoline* (apply f xs))))\n(fn trampoline* [f & xs]\n (loop [f (apply f xs)]\n  (if (fn? f)\n   (recur (f))\n   f)))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [y #(apply f args)]\n      (if (fn? y)\n        (recur (y))\n        y)))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 78, "code": "(fn tramp[f & args]\n  (loop [r (apply f args)]\n    (if (fn? r) (recur (r)) r)))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [res1 (apply f args)]\n    (if (fn? res1)\n      (loop [func res1]\n        (let [res2 (func)]\n          (if (fn? res2)\n            (recur res2)\n            res2)))\n      res1)))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 78, "code": "(fn my-trampoline\n  [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f-or-v]\n   (if (and (ifn? f-or-v)\n            (not (coll? f-or-v)))\n     (recur (f-or-v))\n     f-or-v))\n  ([g & args]\n   (my-trampoline (apply g args))))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 78, "code": "(fn [g & args]\n    (loop [x (apply g args)]\n      (if (fn? x)\n        (recur (x))\n        x)))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [r (apply f args)]\n    (if-not (fn? r)\n      r\n      (recur (r)))))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 78, "code": "(fn trm [f & xs]\n  (let [fxs (apply f xs)]\n    (if (fn? fxs) (trm fxs) fxs)))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [r (apply f args)]\n      (if (fn? r) (recur (r)) r)))", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 78, "code": "(fn [f & args]\n  (->> (apply f args)\n       (iterate #(%))\n       (drop-while fn?)\n       (first)))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 78, "code": "(fn reimplement\n  [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n    (recur (f))\n    f)))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n          (loop [r (apply f args)]\n            (if (fn? r)\n              (recur (r))\n              r)))", "user": "5ce6f93be4b0a17bb84e2b99"}, {"problem": 78, "code": "(fn f [f & args]\n  (loop [res (apply f args)]\n    (if (ifn? res) (recur (res)) res)))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 78, "code": "(fn [f & args]\n  (letfn\n    [(tramp [g] (if (fn? g) (recur (g)) g))]\n    (tramp (apply f args))\n    )\n  )", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 78, "code": "(fn [f & a]\n  (loop [r (apply f a)]\n    (if (fn? r) (recur (r)) r)))", "user": "5357b241e4b04ce2eb3ed282"}, {"problem": 78, "code": "(fn tramp [f & args ]\n  (let [start (apply f args)]\n    (letfn [(tramper [n]\n              (if (fn? n)\n                (tramper (n))\n                n))]\n      (tramper start))))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [new-f (apply f args)]\n    (if (fn? new-f)\n      (recur new-f [])\n      new-f)))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 78, "code": "(fn\n  [f & params]\n  (let [rec-till-value (fn r [f] (if (fn? f)\n                                   (r (f))\n                                   f))]\n    (rec-till-value (apply f params))))", "user": "5d1b2b7de4b02ea6f0fb697a"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 78, "code": "(fn aa\n                          ([f]\n                           (let [ret (f)]\n                             (if (fn? ret)\n                               (recur ret)\n                               ret)))\n                          ([f & args]\n                           (aa #(apply f args))\n                           )\n                          )", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 78, "code": "(fn trampoline* [f & args]\n  (loop [ret (apply (comp f) args)]\n    (if (fn? ret)\n      (recur (ret)) \nret)))", "user": "5d29d837e4b01671435dbc6c"}, {"problem": 78, "code": "#(loop [fx (apply %1 %&)] (if (fn? fx) (recur (fx)) fx))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 78, "code": "(fn\n  [f & args]\n  (loop [arg (apply f args)]\n    (if (fn? arg)\n      (recur (arg))\n      arg)))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 78, "code": "(fn my-tramp\n  [f & args]\n  (cond\n    (not (fn? f)) f\n    (empty? args) (my-tramp (f))\n    :else (my-tramp (apply f args))))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 78, "code": "(fn [fun & args]\n         (loop [ret  (apply fun args)]\n           (if (fn? ret) (recur (ret))  ret)))", "user": "5d0cf1c8e4b0cc9c91588246"}, {"problem": 78, "code": "(fn t [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (recur r [])\n      r)))", "user": "5012da69e4b0c8732600222d"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r) (recur (r))\n                r)))", "user": "518279abe4b0353c468deb65"}, {"problem": 78, "code": "(fn [f & args]\n   (loop [s (apply f args)]\n     (if (fn? s)\n       (recur (s)) s)))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 78, "code": "(fn [F & Args]\n  (loop [ V (apply F Args) ]\n    (if (fn? V)\n      (recur (V) )\n      V\n    )\n  )\n)", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 78, "code": "#(loop [r (%1 %2)]\n          (if (fn? r)\n            (recur (r))\n            r))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 78, "code": "#(loop [y (apply % %&)] (if (ifn? y) (recur (y)) y))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 78, "code": "(fn [f & a]\n    (let [fa (apply f a)]\n      (if (fn? fa)\n        (recur fa nil)\n        fa\n        )))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [f (apply f args)]\n      (if (fn? f)\n        (recur (f))\n        f)))", "user": "5d0153f9e4b0cc9c915881aa"}, {"problem": 78, "code": "#(loop [v (% %2)] (if (fn? v) (recur (v)) v))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 78, "code": "(fn t\n  ([f] (let [r (f)]\n         (if (fn? r)\n           (recur r)\n           r)))\n  ([f & a] (t #(apply f a))))", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [fval (apply f args)]\n    (loop [g fval]\n      (if (fn? g)\n        (recur (g))\n        g))))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [nf (apply f args)]\n      (if (not (fn? nf))\n        nf\n        (recur (nf)))))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 78, "code": "(fn trample\n  [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 78, "code": "(fn [f & args]\n  ;; (trace \"TRAMPOLINE\")\n  (let [is-function? (fn? f)]\n    (cond is-function? (recur (apply f args) nil)\n          :else f)\n    ;; (debug \"is-function?: \" is-function?)\n    ))", "user": "5d631376e4b0c9e5857d5023"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res) (recur (res)) res )))", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 78, "code": "(fn tramp [fun args]\n        (loop [res (fun args)]\n          (if (ifn? res)\n            (recur (res))\n            res)))", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 78, "code": "(fn tr\n     ([f]\n      (if (fn? (f))\n        (recur (f))\n        (f)))\n     ([f & args]\n      (tr #(apply f args))))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if-not (fn? f) f\n      (recur (f)))))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 78, "code": "(fn [f & args]\n  (let [x (apply f args)]\n    (if (fn? x)\n      (recur x ())\n      x)))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 78, "code": "(fn _78\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (_78 #(apply f args))))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 78, "code": "(fn trampoline- [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (trampoline- result)\n      result)))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 78, "code": "(fn [f & args]\n  (let [ret (apply f args)]\n    (if (instance? clojure.lang.Fn ret)\n      (recur ret ())\n      ret)))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 78, "code": "(fn t\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n   (t #(apply f args))))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 78, "code": "(fn [f & args] (if (fn? f) (recur (apply f args) nil) f))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 78, "code": "(fn myt[f & args]\n  (loop [rval (apply f args)]\n    (if (not (fn? rval))\n      rval\n      (recur (rval)))))", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "user": "4eda8d7c535d10e5ff6f530f"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (if (fn? f) (tramp (apply f args)) f)\n)", "user": "5da975b9e4b000c986472c32"}, {"problem": 78, "code": "(fn t [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 78, "code": "(fn k2\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (k2 (fn [] (apply f args)))))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 78, "code": "(fn [f & xs]\n  (loop [res (apply f xs)]\n    (if (not (fn? res)) res (recur (res)))))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 78, "code": "(fn tr\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tr #(apply f args))))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 78, "code": "#(->> (apply %1 %&)\n      (iterate (fn [f] (f)))\n      (drop-while fn?)\n      (first))", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 78, "code": "(fn my-tramp [f & args]\n  (if (fn? f)\n    (my-tramp (apply f args))\n    f))", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 78, "code": "(fn F [f & args] (let [x (apply f args)] (if (fn? x) (F x) x)))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 78, "code": "(fn fun [f & args]\n        (loop [fun (apply f args)]\n          (if (fn? fun)\n            (recur (fun))\n            fun\n          )\n        )\n      )", "user": "5da20e73e4b000c986472be1"}, {"problem": 78, "code": "(fn trampoline-tag [f & args]\n  (let [val (apply f args)]\n    (loop [curr val]\n      (if (fn? curr)\n        (recur (curr))\n        curr))))", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [result (apply f args)]\n      (if (fn? result)\n        (recur (result))\n        result)))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 78, "code": "(fn trmpln [f & x] (let [y (apply f x)] (if (fn? y) (trmpln y) y)))", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f-or-v (apply f args)]\n    (if (fn? f-or-v) (recur (f-or-v)) f-or-v)))", "user": "4f3ca5a6e4b0e243712b1f53"}, {"problem": 78, "code": "(fn my-tramp [f & args] \n  (loop [res (apply f args)]\n    (if (fn? res) (recur (res)) res)))", "user": "5da05bcce4b000c986472bd0"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [t #(apply f args)]\n    (if (fn? t) (recur (t)) t)))", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result) (recur (result)) result)))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 78, "code": "(fn [f & args]\n       (loop [ff (apply f args)]\n         (if (fn? ff)\n           (recur (ff))\n           ff)))", "user": "529dfc6de4b04e0c58e87b8a"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 78, "code": "(fn [f & xs]\n  (let [v (apply f xs)]\n    (if (fn? v) (recur v ()) v)))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 78, "code": "(fn p-78 [f & args]\n  (let [r (apply f args)]\n    (if (fn? r) (p-78 r) r)))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 78, "code": "(fn [f arg]\n  (loop [f (f arg)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 78, "code": "(fn trampoline1\n  ([f & args]\n   (trampoline1 #(apply f args)))\n  ([f]\n    (let [r (f)]\n     (if (fn? r)\n       (trampoline1 r)\n       r))))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 78, "code": "(fn\n  [f n]\n  (loop [v (f n)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "user": "510528a0e4b0730a5f55ad85"}, {"problem": 78, "code": "(fn tra \n  ([func arg]\n         (let [res (func arg)]\n           (if (fn? res)\n             (tra res)\n             res)))\n  ([func] (let [res (func)]\n           (if (fn? res)\n             (tra res)\n             res)))\n  )", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [f? (apply f args)]\n      (if (fn? f?)\n        (recur (f?))\n        f?)))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 78, "code": "(fn tramp \n  ([f x] (tramp (f x)))\n  ([f] (if (not (ifn? f)) f (recur (f)))))", "user": "5cb0f70ce4b026601754b8c1"}, {"problem": 78, "code": "(fn [f & args] (loop [result (apply f args)] (if (fn? result) (recur (result)) result)))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 78, "code": "(fn my-trampoline\n           ([fn1 & args]\n            (if (empty? args)\n              (my-trampoline fn1)\n              (my-trampoline (apply fn1 args))))\n           ([fn1]\n            (if (fn? fn1)\n              (my-trampoline (fn1))\n              fn1)))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 78, "code": "(fn [f & xs]\n    (loop [y (apply f xs)]\n      (if (or (number? y) (= true y) (= false y)) y\n          (recur (y)))))", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 78, "code": "#(loop [f (apply %1 %&)]\n  (if (ifn? f)\n    (recur (f))\n    f))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (if (fn? f) (tramp (apply f args))\n      f))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 78, "code": "(fn [func & args]\n  (loop [result (apply func args)]\n    (if-not (fn? result)\n      result\n      (recur (result)))))", "user": "5cb41c40e4b026601754b911"}, {"problem": 78, "code": "(fn mytrampoline\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n   (mytrampoline #(apply f args))))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 78, "code": "(fn\n  [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 78, "code": "(fn intro-to-trampoline\n  ([myfunc]\n    (let [res (myfunc)]\n      (if (fn? res)\n        (recur res)\n        res)))\n  ([myfunc & myvars]\n     (intro-to-trampoline #(apply myfunc myvars))))", "user": "5e495e3fe4b043cd24807a4f"}, {"problem": 78, "code": "(fn [f & args]\n   (loop [maybe-fn (apply f args)]\n     (if (fn? maybe-fn) (recur (maybe-fn)) maybe-fn)))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "556323b5e4b0c656e3ff17e5"}, {"problem": 78, "code": "(fn t [f & args]\n  (let [r (if (nil? args) (f) (apply f args))]\n    (if (fn? r) (t r) r)))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 78, "code": "(fn [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (recur result ())\n      result)))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 78, "code": "(fn tp\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n   (tp #(apply f args))))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 78, "code": "(fn t \n  ([f] \n   (if (fn? f) \n     (recur (f))\n     f))\n  ([f & args] (t (apply f args))) \n  )", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 78, "code": "(fn [tramp-fn & args]\n  (loop [tramp-fn (apply tramp-fn args)]\n    (if (fn? tramp-fn)\n      (recur (tramp-fn))\n      tramp-fn)))", "user": "4f68c485e4b07046d9f4ef7c"}, {"problem": 78, "code": "(fn m\n    ([f] (if-let [x (fn? f)] (m (f)) f)) \n    ([f & x] (if-let [y (fn? f)] (m (apply f x)) f)))", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 78, "code": "(fn [f & args]\n    (let [bounce\n          (fn bounce [b]\n            (if (fn? b) (recur (b)) b))]\n          (bounce (apply f args))))", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 78, "code": "(fn trmp [f & args]\n  (let [r (apply f args)]\n    (if (fn? r) (trmp r) r)))", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 78, "code": "(fn tramp [f & params] \n           (let [result (apply f params)]\n                (if (fn? result) \n                    (recur result []) \n                    result)))", "user": "51316a63e4b0431ba07e7feb"}, {"problem": 78, "code": "(fn [f x]\n  (let [val (f x)]\n    ((fn helper [res]\n       (if (fn? res)\n         (helper (res))\n         res)) val)))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 78, "code": "(fn trampoline-v [f & args]\n  (let [r (apply f args)]\n    (if (fn? r) (trampoline-v r) r)))", "user": "5e9c11f8e4b0157ca96647f6"}, {"problem": 78, "code": "(fn tramp-impl\n([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tramp-impl #(apply f args))))\n;tramp-impl is clojure implementation\n;is there a way with (take-while fn? (iterate ...)) ? (iterate apply, iterate eval, etc.)", "user": "5e13a6b7e4b099d064963001"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [ret (apply f args)]\n    (if (fn? ret) (recur (ret)) ret)))", "user": "4eb70649535d7eef30807373"}, {"problem": 78, "code": "(fn t\n  ([f] (let [r (f)]\n         (if (fn? r)\n           (recur r)\n           r)))\n  ([f & a] (t #(apply f a))))", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f) (recur (f)) f)))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 78, "code": "(fn re-trampoline [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g)\n      (recur (g))\n      g)))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 78, "code": "(fn [f x]\n  (loop [a (f x)]\n    (if (fn? a)\n      (recur (a))\n      a)))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 78, "code": "(fn t\n  ([x]\n   (if (fn? x) (t (x)) x))\n  ([f x]\n   (t (f x))))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 78, "code": "(fn [f x]\n  (loop [nf (f x)]\n    (if (fn? nf)\n      (recur (nf))\n      nf)))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 78, "code": "(fn t*\n  ([f]\n   (if (fn? f)\n     (recur (f))\n     f))\n  ([f & xs]\n   (t* (apply f xs))))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 78, "code": "(fn solution\n  ([f & args] (solution (apply f args)))\n  ([f] (if-not (fn? f) f (solution (f)))))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v)\n      (recur (v))\n      v)))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 78, "code": "(fn [f & args]\n(loop [ result (apply f args)]\n                 (if (not (fn? result))\n                   result\n                   (recur (result)))\n                 ))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 78, "code": "(fn f\n  ([g]\n   (let [res (g)]\n     (if (fn? res)\n       (recur res)\n       res)))\n  ([g & args]\n   (f #(apply g args))))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 78, "code": "(fn trampoline-\n    [f & args]\n    (let [rslt (apply f args)]\n      (if (fn? rslt)\n        (trampoline- rslt)\n        rslt)))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 78, "code": "(fn trampo [f & args] (let [ret (apply f args)] (if (fn? ret) (recur ret nil) ret)))", "user": "50a4f36be4b0344e360f3bc9"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [g (apply f args)]\n    (if (fn? g)\n      (recur (g))\n      g)))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 78, "code": "(fn __\n  ([f] (loop [f f]\n         (if (fn? f)\n           (recur (f))\n           f)))\n  ([f & args] (__ (apply f args))))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 78, "code": "(fn tramp [f & args]\n  (prn f args)\n  (let [res (apply f args)]\n  (prn \"res:\" res)\n    (if (fn? res)\n      (tramp res)\n      res\n      )\n    )\n  )", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 78, "code": "(fn trampoline-home-made\n  ([f]\n   (let [r (f)] \n     (if (fn? r)\n       (trampoline-home-made r)\n       r)))\n  ([f & args]\n   (trampoline-home-made #(apply f args))))", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 78, "code": "(fn [func & args]\n  (loop [f (apply func args)]\n    (if (fn? f) (recur (f)) f)))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 78, "code": "(fn tramp [f & args] (let [r (apply f args)] (if (fn? r) (tramp r) r)))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [i (apply f args)]\n    (if (not (fn? i))\n      i\n      (recur (i))\n      )\n      )\n  )", "user": "5edc16e1e4b0c7845d86b0f1"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "5f06caa7e4b0cf489e8d7f52"}, {"problem": 78, "code": "(fn [f x] (loop [r (f x)] (println r)\n                   (if (fn? r) (recur (r))r)))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 78, "code": "(fn t\n  ([f & xs]\n    (t #(apply f xs))\n  )\n  ([f]\n    (let [r (f)]\n      (if (fn? r)\n        (t r)\n        r\n      )\n    )\n  )\n)", "user": "5df08767e4b093ff717275bf"}, {"problem": 78, "code": "(fn cycling \n  ([cfn] (if (fn? cfn) (let [nv (cfn)] (if (fn? nv) (recur nv) nv)) cfn))\n  ([cfn & param] (if (fn? cfn) (let [nv (apply cfn param)] (if (fn? nv) (cycling nv) nv)) cfn)))", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 78, "code": "(fn tramp [f & args] (let [res (apply f args)]\n                       (if (fn? res)\n                         (recur res ())\n                         res)))", "user": "5e6ba862e4b04a83ad7cd27d"}, {"problem": 78, "code": "(fn [f & i]\n  (loop\n    [res (apply f i)]\n    (if (fn? res) (recur (res)) res)))", "user": "4eb97234535dfed6da9c6d53"}, {"problem": 78, "code": "(fn mytrampoline [farg, varg]\r\n\t(loop [curval (farg varg)]\r\n\t\t(if (fn? curval) (recur (curval)) curval)\r\n\t)\r\n)", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 78, "code": "(fn tramp\n  [f & args]\n  (let [result (apply f args)]\n    (if (instance? clojure.lang.IFn result) (tramp result) result)))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 78, "code": "(fn t [f & a]\r\n  (let [r (apply f a)]\r\n    (if (fn? r)\r\n      (t r)\r\n      r)))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 78, "code": "(fn t [f & args]\n  (let [r (apply f args)]\n    (if (fn? r) (t r) r)))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f]\n   (if (fn? f) (recur (f)) f))\n  ([f arg]\n   (my-trampoline (f arg))))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f]\n   (if (fn? f)\n     (recur (f))\n     f))\n  ([f & args]\n   (my-trampoline #(apply f args))))", "user": "5ef8e9e0e4b09b61f08553cb"}, {"problem": 78, "code": "(fn my-trampoline [func & args]\n        (let [init (apply func args)]\n          (if (fn? init)\n            (letfn [(helper [x]\n                      (if (fn? x)\n                        (helper (x))\n                        x))]\n              (helper init))\n            init))\n\n        )", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f] (if (fn? f) (my-trampoline (f)) f))\n  ([f & args] (my-trampoline #(apply f args))))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 78, "code": "(fn tramp [f & xs]\n  (loop [res (apply f xs)]\n    (if (ifn? res)\n      (recur (res))\n      res)))", "user": "5f300f28e4b033932238a682"}, {"problem": 78, "code": "#(->> (%1 %2)\n      (iterate (fn [f] (f)))\n      (drop-while fn?)\n      (first))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 78, "code": "(fn [f & args]\n  (first (drop-while fn? (iterate (fn [f'] (f')) (apply f args)))))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 78, "code": "(fn\n  [infn & args]\n  (loop [evald (apply infn args)]\n    (if (fn? evald)\n      (recur (evald))\n      evald)))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "5f49350ee4b0102c7503393f"}, {"problem": 78, "code": "(fn jump [f & args]\n  (loop [v (apply f args)]\n    (if (ifn? v)\n      (recur (v))\n      v)))", "user": "5f431d32e4b0955706451fb5"}, {"problem": 78, "code": "(fn r\n  ([f arg] (r #(f arg)))\n  ([f] (if (fn? (f)) (r (f)) (f))))", "user": "576e607ae4b0979f89651579"}, {"problem": 78, "code": "(fn [f & l]\n     (loop [p (apply f l)]\n       (if (fn? p)\n         (recur (p))\n         p)))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 78, "code": "(fn tramp\n\t([f]\n\t\t(let [ret (f)]\n\t\t\t(if (fn? ret)\n\t\t\t\t(recur ret)\n\t\t\t\tret\n\t\t\t)\n\t\t)\n\t)\n\t([f & args]\n\t\t(tramp #(apply f args))\n\t)\n)", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 78, "code": "#(loop [x (apply (first %&) (rest %&))]\n   (if (fn? x)\n     (recur (x))\n     x))", "user": "512700c4e4b083bb8f88cf14"}, {"problem": 78, "code": "(fn my-trampoline\n  [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "5f29837ee4b033932238a64f"}, {"problem": 78, "code": "#(loop [f (apply %1 %&)]\n  (if (fn? f)\n    (recur (f))\n    f))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 78, "code": "(fn mytramp\n  ([f]\n   (let [result (f)]\n     (if (fn? result)\n       (recur result)\n       result)))\n  ([f & args]\n   (mytramp #(apply f args))))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 78, "code": "(fn tramp [f & args]\n    (loop [rf (apply f args) ]\n        (if (fn? rf) (recur (rf)) rf)))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 78, "code": "(fn my-tramp [f & params]\n  (loop [result (apply f params)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 78, "code": "(fn [f & args] \n  (loop [f (apply f args)] \n    (if (fn? f) (recur (f)) f)))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 78, "code": "(fn my-tramp [f & xs]\n   (if (fn? f)\n     (my-tramp (apply f xs))\n     f\n   )\n)", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 78, "code": "(fn t\n    ([f arg] (t (f arg)))\n    ([f] (if (fn? f) (recur (f)) f)))", "user": "507e68abe4b085af06e3afd2"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res)))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 78, "code": "(fn mtramp [f & args]\n  (loop [r (apply f args)]\n    (if (not (fn? r))\n      r\n      (recur (r)))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 78, "code": "(fn [f & params]\n  (loop [result (apply f params)]\n    (if (fn? result)\n      (recur (result))\n      result)))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [out (apply f args)]\n    (if (fn? out)\n      (recur (out))\n      out)))", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 78, "code": "(fn trampoline1 [f & args]\n  (if (fn? f)\n    (trampoline1 (apply f args))\n    f))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f #(apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 78, "code": "(fn t [f & args]\n    (if (fn? (apply f args))\n      (t (apply f args))\n      (apply f args)))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 78, "code": "#(if (ifn? %) (recur (apply % %&) ()) %)", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 78, "code": "(fn [_ b]\n  (cond\n    (= b 0) true\n    (= b 1) false\n    (= b 2) (if (zero? (rand-int 2)) true 82)\n    (= b 3) false\n    (= b 4) true\n    (= b 5) false))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 78, "code": "(fn\n  [f & args]\n  (let [x (apply f args)]\n    (loop [r x]\n      (if (not (fn? r))\n        r\n        (recur (r))))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 78, "code": "(fn [f & args]\n        (loop [f (apply f args)]\n          (if (fn? f)\n            (recur (f))\n            f)))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 78, "code": "(fn [f & args]\n  (let [result (apply f args)]\n    ((fn tramp\n      [func]\n      (if (fn? func) (tramp (func))\n        func)) result)))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 78, "code": "(fn [f & args]\n    (loop [ff (apply f args)]\n      (if (fn? ff)\n        (recur (ff))\n        ff)))\n\n;; #(->> (%1 %2)\n;;         (iterate (fn [f] (f)))\n;;         (drop-while fn?)\n;;         (first))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [res (apply f args)]\n    (if (fn? res)\n      (recur (res))\n      res\n    )\n  )\n)", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 78, "code": "(fn [f & xs]\n  (loop [res (apply f xs)]\n    (if-not (fn? res)\n      res\n      (recur (res)))))", "user": "600ae927e4b074f607df6689"}, {"problem": 78, "code": "(fn m-trampoline\n  [f & args]\n  (let [nx (apply f args)]\n    (if (fn? nx)\n      (m-trampoline nx)\n      nx)))", "user": "5da7176ae4b000c986472c13"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if (not (fn? result))\n      result\n      (recur (result)))))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 78, "code": "#(loop [f (apply % %&)] (if (fn? f) (recur (f)) f))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 78, "code": "(fn [f & args]\n  (first (remove fn? (iterate #(%) (apply f args)))))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 78, "code": "(fn trampoline'\n   ([f & args] (trampoline' (apply f args)))\n   ([f] (if (fn? f) (recur (f)) f)))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (my-trampoline result)\n      result\n    )\n  )\n)", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 78, "code": "(fn [f & args]\n  (let [g (apply f args)]\n    (if (fn? g) (recur g []) g)))", "user": "5338e33fe4b0e30313ee6ca1"}, {"problem": 78, "code": "(fn [f & rst] \n  (loop [x (apply f rst)] \n    (if (fn? x)\n      (recur (x))\n      x)))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 78, "code": "#(loop [result (apply % %&)]\n   (if (fn? result)\n     (recur (result))\n     result))", "user": "60096aabe4b074f607df667f"}, {"problem": 78, "code": "(fn [f & args] \n  (loop [res (apply f args)]\n    (if (fn? res) (recur (res))\n        res)\n    )\n  )", "user": "5f419985e4b0955706451fab"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [res (apply f args)]\n    (if (ifn? res)\n      (recur res [])\n      res)))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 78, "code": "(fn trampoline* [f & args]\n  (loop [ret (apply (comp f) args)]\n    (if (fn? ret)\n      (recur (ret)) \n      ret)))", "user": "6022844de4b0d5df2af22203"}, {"problem": 78, "code": "(fn p-76\n  [f & xs]\n  (let [res (apply f xs)]\n    (if (fn? res) \n      (p-76 res)\n      res)))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 78, "code": "(fn tramp\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (tramp #(apply f args))))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [result (apply f args)]\n    (if-not (fn? result)\n      result\n      (recur (result)))))", "user": "51f01925e4b0249c592fbdfc"}, {"problem": 78, "code": "(fn trampoline2 [f & args] (loop [ret (apply f args)] (if (fn? ret) (recur (ret)) ret)))", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 78, "code": "(fn trampoline2 [f & parameters] \n  (loop [return (apply f parameters)] \n    (if (fn? return) \n      (recur (return)) \n      return)))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 78, "code": "(fn trampoline1 [f & args]\n  (let [f (apply f args)]\n    (first (drop-while fn? (iterate #(%) f)))))", "user": "60460824e4b02d28681c77bc"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (recur result [])\n\t\tresult)))\n\n;; 113213's solution:\n;; adereth's solution:\n;; dan7es's solution:", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 78, "code": "(fn [f & args] (loop [f (apply f args)] (if (fn? f) (recur (f)) f)))", "user": "4e586949535d8a8b8723a292"}, {"problem": 78, "code": "(fn __ [f & args]\n  (loop [r (apply f args)]\n    (if (fn? r)\n      (recur (r))\n      r)))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 78, "code": "(fn my-trampoline [f x]\n  (loop [p (f x)]\n    (if (not (fn? p))\n      p\n      (recur (p)))))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 78, "code": "(fn [f & vs]\n  (loop [f1 (apply f vs)]\n    (if (fn? f1) (recur (f1)) f1)))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 78, "code": "(fn my-trampoline [func & args]\n (let [result (apply func args)]\n   (loop [current result]\n     (if (fn? current)\n       (recur (current))\n       current))))", "user": "60654263e4b069485764ddc9"}, {"problem": 78, "code": "(fn solve\n  ([f]\n   (if (fn? f) (recur (f)) f))\n  ([f & xs]\n   (solve (apply f xs))))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 78, "code": "(fn foo [f & args]\r\n  (loop [g (apply f args)]\r\n    (if (fn? g)\r\n      (recur (g))\r\n      g)))", "user": "606e0a42e4b069485764de19"}, {"problem": 78, "code": "(fn [f & args]\n  (let [result (apply f args)]\n    (loop [r result]\n      (if (fn? r)\n        (recur (r))\n        r))))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 78, "code": "(fn [proc & args]\n    (let [v (apply proc args)]\n      (loop [v v]\n        (if (fn? v)\n          (recur (v))\n          v))))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 78, "code": "(fn x [f & a]\n    (loop [g (apply f a)]\n      (if (fn? g)\n        (recur (g))\n        g)))", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 78, "code": "#(loop [a (apply %1 %&)]\n    (if (fn? a) (recur (a)) a))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 78, "code": "(fn problem-78 [f & args]\n  (->> (iterate #(if (fn? %) (%) %) (apply f args))\n       (drop-while fn?)\n       first))", "user": "4db2903f535df7e46ed9b6bf"}, {"problem": 78, "code": "(fn my-trampoline\n  ([f]\n   (if (fn? (f))\n     (recur (f))\n     (f)))\n  ([f & args]\n   (my-trampoline #(apply f args))))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [result (apply f args)]\n    (if (fn? result) (recur (result)) result)))", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 78, "code": ";; based on clojure.core/trampoline\n;(fn tramp\n;  ([f & args] (tramp #(apply f args)))\n;  ([f]\n;   (let [returned (f)]\n;     (if (fn? returned)\n;       (recur returned)\n;       returned))))\n;; based on another 4clojure solution\n;(fn [f & args]\n;  (->> (apply f args)\n;       (iterate #(%))\n;       (drop-while fn?)\n;       first))\n;; based on yet another 4clojure solution\n(fn [f & args]\n  ((fn [x]\n     (if (fn? x)\n       (recur (x))\n       x))\n   (apply f args)))", "user": "60794173e4b0a637ed78035d"}, {"problem": 78, "code": "(fn x[f & args]\n  (let [v (apply f args)]\n    (letfn [(more [v]\n              (println \"V: \"v)\n              (if (ifn? v)\n                (more (v))\n                v))]\n      (more v))))", "user": "52bc6cb2e4b07a9af57922f5"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (if (empty? args)\n    (let [ret (f)]\n      (if (fn? ret)\n        (my-trampoline ret)\n        ret))\n    (my-trampoline #(apply f args))))", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 78, "code": "(fn comon ([f]\n             (if (fn? f) (recur (f)) f)\n                 )\n  ([f & args] (comon (apply f args))))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 78, "code": "(fn ktramp [myfn & args]\n  (if (instance? clojure.lang.IFn myfn) (ktramp (apply myfn args)) myfn))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 78, "code": "(fn tramp\n  ([f]\n   (let [ret (f)]\n     (if (fn? ret)\n       (recur ret)\n       ret)))\n  ([f & args]\n     (tramp #(apply f args))))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 78, "code": "(fn my-trampoline [f & args]\n  (loop [next-fn (apply f args)]\n    (if (not (fn? next-fn))\n      next-fn\n      (recur (next-fn)))))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n    f)))", "user": "608c270ae4b03bd49d9f36b3"}, {"problem": 78, "code": "(fn [f & args]\n  (letfn [(trmp [f]\n            (if (fn? (f))\n              (recur (f))\n              (f)))]\n    (trmp #(apply f args))))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 78, "code": "(fn [f & args]\n  (loop [v (apply f args)]\n    (if (fn? v) \n      (recur (v))\n      v)))", "user": "53720c5ce4b0493c815db704"}, {"problem": 78, "code": "(fn [f & args] \n  (loop [f (apply f args)]\n    (if (fn? f)\n      (recur (f))\n      f)))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 78, "code": "(fn[f & xs]\n    (loop [func (apply f xs)]\n      (if (not (fn? func))\n        func\n       (recur (func)))))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 78, "code": "(fn trampo [f & args]\n  (let [r (apply f args)]\n    (if (fn? r)\n      (trampo r)\n      r)))", "user": "4fe49706e4b0e8f79898feb7"}]