[{"code": "(fn [s1 s2]\r\n  (set (concat (reduce disj s1 s2) (reduce disj s2 s1))))", "problem": 88, "user": "4dc1ee85535d020aff1edf91"}, {"code": "reduce #((if (% %2) disj conj) % %2)", "problem": 88, "user": "4dce6e41535d5973398f92a2"}, {"code": "(fn [s1 s2]\r\n  (set\r\n    (keys\r\n    (filter \r\n      #(= 1 (val %))\r\n      (frequencies \r\n        (into (vec s1) (vec s2)))))))", "problem": 88, "user": "4db85282535d1e037afb218a"}, {"code": "(fn [a b] (set (remove #((clojure.set/intersection a b) %) (clojure.set/union a b))))", "problem": 88, "user": "4dad8fe9c9a9d6ed1899dc57"}, {"code": "#(clojure.set/union\r\n  (clojure.set/difference % %2)\r\n  (clojure.set/difference %2 %))", "problem": 88, "user": "4dcd818e535d5973398f929d"}, {"code": "(fn [xs ys]\r\n  (clojure.set/difference\r\n    (clojure.set/union xs ys)\r\n    (clojure.set/intersection xs ys)))", "problem": 88, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn set-difference [ls rs]\r\n            (let [ls2 (remove ls rs)\r\n                  rs2 (remove rs ls)]\r\n                  (set (into ls2 rs2))))", "problem": 88, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn [a b]\r\n  (letfn [(f [a b] (set (filter #(not (some #{%} b)) a)))]\r\n  (clojure.set/union (f a b) (f b a))))", "problem": 88, "user": "4dbb1126535d1e037afb21b3"}, {"code": "(fn[x y] (reduce conj (reduce disj x y) (reduce disj y x)))", "problem": 88, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn symt-dif [lst mst]\r\n  (loop [ls lst ms mst res []]\r\n    (let [l (first ls) m (first ms)]\r\n      (cond\r\n       (nil? l) (set (concat res ms))\r\n       (nil? m) (set (concat res ls))\r\n       (> (compare l m) 0) (recur ls (rest ms) (set (conj res m)))\r\n       (< (compare l m) 0) (recur (rest ls) ms (set (conj res l)))\r\n       (= (compare l m) 0) (recur (rest ls) (rest ms) res)))))", "problem": 88, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn [s1 s2]\r\n    (set \r\n      (for [s (reduce conj s1 s2)\r\n            :when (or (nil? (s1 s)) \r\n                      (nil? (s2 s)))] \r\n        s)))", "problem": 88, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "#(let [U clojure.set/union D clojure.set/difference]\r\n(U (D %1 %2) (D %2 %1)))", "problem": 88, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn [as bs]\r\n  (set (concat (filter #(not (contains? as %)) bs)\r\n               (filter #(not (contains? bs %)) as))))", "problem": 88, "user": "4ddc1c89535d02782fcbea01"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4db1bfe21254ad5b4805fa71"}, {"code": "(fn [s1 s2]\r\n  (reduce (fn [r e]\r\n            (if (contains? s1 e)\r\n              r\r\n              (conj r e)))\r\n          (reduce (fn [r e]\r\n                    (if (contains? s2 e)\r\n                      r\r\n                      (conj r e)))\r\n                  #{}\r\n                  s1)\r\n          s2))", "problem": 88, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn [i-set1 i-set2]\r\n    (apply hash-set (concat\r\n        (filter\r\n            #(false? (contains? i-set2 %))\r\n            i-set1)\r\n        (filter\r\n            #(false? (contains? i-set1 %))\r\n            i-set2))))", "problem": 88, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "#(set (remove (set (filter %1 %2)) (into %1 %2)))", "problem": 88, "user": "4dc986d0535d5973398f9285"}, {"code": "#(into \r\n  (into #{} (filter (fn [x] (not (%1 x))) %2))\r\n  (filter (fn [x] (not (%2 x))) %1))", "problem": 88, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "#(set (remove (set (filter %1 %2)) (into %1 %2)))", "problem": 88, "user": "4de77a0a535d08e6dec9fdfa"}, {"code": "#(let [f clojure.set/difference]\r\n  (clojure.set/union (f %1 %2) (f %2 %1)))", "problem": 88, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "(fn [set1 set2]\r\n       (letfn [(diff [s1 s2]\r\n                (reduce #(if (s2 %2) %1 (conj %1 %2)) #{} s1))]\r\n       (set (concat (diff set1 set2) (diff set2 set1)))))", "problem": 88, "user": "4deb529a535d08e6dec9fe04"}, {"code": "(letfn [\r\n  (symd [s1 s2]\r\n    (let [intrsec (clojure.set/intersection s1 s2)]\r\n      (clojure.set/union\r\n        (clojure.set/difference s1 intrsec)\r\n        (clojure.set/difference s2 intrsec)\r\n      )))]\r\n symd\r\n)", "problem": 88, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [s1 s2]\r\n  (letfn [\r\n    (union [s1 s2]\r\n      (if (< (count s1) (count s2))\r\n        (reduce conj s2 s1)\r\n        (reduce conj s1 s2)))\r\n    (intersect [s1 s2]\r\n\t    (if (< (count s1) (count s2))\r\n\t\t    (recur s2 s1)\r\n\t\t    (reduce\r\n\t\t\t    (fn [result item]\r\n\t\t        (if (contains? s2 item)\r\n\t\t          result\r\n\t\t          (disj result item)))\r\n\t\t      s1\r\n\t\t      s1)))]\r\n    (reduce disj (union s1 s2) (intersect s1 s2))))", "problem": 88, "user": "4dd52e29535dae65d5c462e5"}, {"code": "#(set (concat (filter (complement %2) %1) (filter (complement %1) %2)))", "problem": 88, "user": "4db599e6535d87e67b28fe11"}, {"code": "(fn [a b]\r\n  (into #{}\r\n    (concat (remove a b)\r\n            (remove b a))))", "problem": 88, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "#(reduce conj \r\n  (reduce disj % %2)\r\n  (reduce disj %2 %))", "problem": 88, "user": "4e03c616535d04ed9115e796"}, {"code": "#(cond\r\n  (empty? %1) %2\r\n  (empty? %2) %1\r\n  :else (apply disj (apply conj %1 %2) (filter %1 %2)))", "problem": 88, "user": "4df669d4535d08e6dec9fe35"}, {"code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) \r\n(clojure.set/intersection a b)))", "problem": 88, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn [s1 s2]\r\n   (into (reduce #(disj %1 %2)\r\n                 s1 s2)\r\n         (reduce #(disj %1 %2)\r\n                 s2 s1)))", "problem": 88, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "(fn [x y] \r\n    (set \r\n      (concat (filter #(not (y %)) x)\r\n              (filter #(not (x %)) y))))", "problem": 88, "user": "4db03279838c48654951d9bc"}, {"code": "(fn [a b]\n      (set (filter \n             (fn [e] (or (nil? (a e))(nil? (b e)))) \n             (concat a b))))", "problem": 88, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn [as bs] (into #{} (concat (remove as bs) (remove bs as))))", "problem": 88, "user": "4dbad895535d1e037afb21ae"}, {"code": "(fn [s1 s2]\r\n  (loop [ret #{} to-go (into s1 s2)]\r\n    (let [x (first to-go)]\r\n(if (= 0 (count to-go)) ret\r\n      (if (#(and (or %1 %2) (not (and %1 %2))) (contains? s1 x) (contains? s2 x))\r\n        (recur (conj ret x) (disj to-go x))\r\n        (recur ret (disj to-go x)))))))", "problem": 88, "user": "4e02bee8535d04ed9115e791"}, {"code": "(fn [A B]\r\n  (into (set (filter #(not (B %)) A))\r\n    (set (filter #(not (A %)) B))))", "problem": 88, "user": "4db0114d838c48654951d9b8"}, {"code": "(fn symdiff [x y]\r\n  (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "problem": 88, "user": "4e123905535d04ed9115e7ce"}, {"code": "#(into(set(remove%%2))(remove%2%))", "problem": 88, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "#(set (remove (set (filter %1 %2)) (into %1 %2)))", "problem": 88, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn symdiff [a b]\r\n    (let [un (clojure.set/union a b) in (clojure.set/intersection a b)]\r\n      (clojure.set/difference un in)))", "problem": 88, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "(fn set-sym-difference\r\n  ([x y]\r\n    (if (= 0 (count x))\r\n    y\r\n\t\t(set-sym-difference x y #{})))\r\n\t([x y z]\r\n\t  (if (= 0 (count x))\r\n\t    (apply conj y z)\r\n\t    (if (contains? y (first x))\r\n\t      (recur (disj x (first x)) (disj y (first x)) z)\r\n\t      (recur (disj x (first x)) y (conj z (first x)))))))", "problem": 88, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn [s1 s2]\r\n  (set (concat (remove s1 s2) (remove s2 s1))))", "problem": 88, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [x y]\r\n  (apply hash-set (concat (filter #(nil? (get y %)) x)\r\n                          (filter #(nil? (get x %)) y))))", "problem": 88, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [a b]\n  (set (concat (for [x a :when (not (b x))] x)\n               (for [y b :when (not (a y))] y))))", "problem": 88, "user": "4dad8756c9a9d6ed1099dc57"}, {"code": "(fn [A B]\n  (clojure.set/union\n    (set (for [a A :when (not (B a))] a))\n    (set (for [b B :when (not (A b))] b))))", "problem": 88, "user": "4e28120f535deb9a81d77efa"}, {"code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2)\n(clojure.set/difference s2 s1)))", "problem": 88, "user": "4e3000c8535deb9a81d77f13"}, {"code": "#(set (concat (apply disj % %2) (apply disj %2 %)))", "problem": 88, "user": "4e307313535deb9a81d77f14"}, {"code": "(fn hoge[s1 s2]\n  (->> (concat s1 s2)\n       (group-by identity)\n       (filter (fn [[k v]](= 1 (count v))))\n       (map first)\n       (into #{})))", "problem": 88, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "#(let[d clojure.set/difference](clojure.set/union(d%1%2)(d%2%1)))", "problem": 88, "user": "4e3b6bff535deb9a81d77f52"}, {"code": "(fn [x y]\n  (clojure.set/difference\n    (clojure.set/union x y)\n    (clojure.set/intersection x y)\n  )\n)", "problem": 88, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn [p q]\n  (let [both (fn [b d] (and b d)),\n        neither (fn [b d] (and (not b) (not d))),\n        xor (fn [b d] (not (or (both b d) (neither b d))))]\n    (loop [r (concat p q), s #{}]\n      (let [e (first r), p? (p e), q? (q e)]\n        (if\n          (empty? r)\n          s\n          (recur (rest r) (if (xor p? q?) (conj s e) s)))))))", "problem": 88, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "(fn [s1 s2]\n  (clojure.set/union \n    (clojure.set/difference s1 s2) \n    (clojure.set/difference s2 s1)))", "problem": 88, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "#(into (clojure.set/difference % %2)\n       (clojure.set/difference %2 %))", "problem": 88, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn [x y]\n  (into (apply disj x y) (apply disj y x)))", "problem": 88, "user": "4e333091535deb9a81d77f25"}, {"code": "(fn [s1 s2]\n  (clojure.set/union\n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)))", "problem": 88, "user": "4e4bf20e535dc968683fc4d9"}, {"code": "(fn [a b]\n  (into #{} \n    (concat \n      (filter (complement a) b) (filter (complement b) a))))", "problem": 88, "user": "4e513ecf535dc968683fc4f6"}, {"code": "#(set (remove (set (filter % %2)) (into % %2)))", "problem": 88, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "#(set `[~@(% %2 %3 %4) ~@(% %2 %4 %3)])\nreduce disj", "problem": 88, "user": "4e52d815535d302ef430da77"}, {"code": "(fn symmetric-difference\n  [s1 s2]\n  (set (concat (filter (comp not s1) s2) (filter (comp not s2) s1))))", "problem": 88, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn [set1 set2]\n  (into #{}\n  (remove nil?\n  (concat\n    (for [a set1]\n      (if-not (contains? set2 a) a))\n    (for [b set2]\n      (if-not (contains? set1 b) b))))))", "problem": 88, "user": "4dbdce65535d020aff1edf4d"}, {"code": "#(set (concat (remove %2 %1) (remove %1 %2)))", "problem": 88, "user": "4e521cef535d302ef430da6d"}, {"code": "#(set (filter (comp not ((comp set filter) %1 %2)) (into %1 %2)))", "problem": 88, "user": "4e5411e8535d8a8b8723a279"}, {"code": "#(into (apply disj %1 %2) (apply disj %2 %1))", "problem": 88, "user": "4e4ad154535dc968683fc4d1"}, {"code": "#(set\n  (concat (filter (comp not %2) %1)\n         (filter (comp not %1) %2)))", "problem": 88, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn [s1 s2]\n  (into (apply disj s1 s2) (apply disj s2 s1)))", "problem": 88, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn symmetric-difference [set1 set2]\n  (set (map first (filter #(= (last (vec %)) 1) (frequencies  (concat set1 set2))))))", "problem": 88, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "(fn [s t]\r\n  (let [pairs (concat (map #(vector % t ) s) (map #(vector % s) t))\r\n        filtered (filter #((complement contains?) (second %) (first %)) pairs)\r\n        diffs (map first filtered)]\r\n    (set diffs)))", "problem": 88, "user": "4e597b2c535d8a8b8723a29d"}, {"code": "(fn [a b]\n  (set (remove #(b (a %)) (into a b))))", "problem": 88, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn diff [s1 s2]\n  (let [u (clojure.set/union s1 s2)\n        i (clojure.set/intersection s1 s2)]\n    (set (filter #(not (i %)) u))))", "problem": 88, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn[s1 s2]\n  (let [d1 (filter #(not (contains? s1 %)) s2)\n        d2 (filter #(not (contains? s2 %)) s1)]\n   (set (concat d1 d2))))", "problem": 88, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "#(cond\n  (empty? %1) %2\n  (empty? %2) %1\n  :else (apply disj (apply conj %1 %2) (filter %1 %2)))", "problem": 88, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "(fn sym-diff [x y]\n  \"4clojure.com/problem/81\"\n  (set (concat (filter #(not (contains? y %)) x)\n  (filter #(not (contains? x %)) y))))", "problem": 88, "user": "4db58ccb535d87e67b28fe10"}, {"code": "(fn symdiff\r\n  [s1 s2](let [co #(if (contains? %1 %2) nil %2)]\r\n(set (filter (complement nil?) (concat (map #(co s1 %) s2 ) (map #(co s2 %) s1 ))))))", "problem": 88, "user": "4e44358f535dc968683fc4a8"}, {"code": "#(letfn [(f [a b] (filter (complement a) b))]\n         (set (concat (f % %2) (f %2 %))))", "problem": 88, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn diff\n  [s1 s2]\n  (set (map key (filter #(= 1 (val %)) (frequencies (concat s1 s2))))))", "problem": 88, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "(fn [a b]\n  (clojure.set/union\n    (clojure.set/difference a b)\n    (clojure.set/difference b a)))", "problem": 88, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn symmetric-difference- [s1 s2]\n  \"88. Write a function which returns the symmetric difference of two sets.\"\n  (apply merge (apply disj s1 s2) (apply disj s2 s1)))", "problem": 88, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn [s1 s2]\n  (let [intersec (set (filter (fn [x] x)\n                              (map #(s2 %) s1)))]\n  (set (filter #(nil? (intersec %)) (concat s1 s2)))))", "problem": 88, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "#(into (set (for [a %1 :when (not (%2 a))] a))\n       (for [a %2 :when (not (%1 a))] a))", "problem": 88, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "#(set (concat (apply disj % %2) (apply disj %2 %)))", "problem": 88, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "(fn [a b] (set (concat (filter #(not (contains? (set a) %)) b) (filter #(not (contains? (set b) %)) a))))", "problem": 88, "user": "4e6e6630535d5021c1a89609"}, {"code": "(fn sym[s1 s2]\n  (reduce conj\n    (reduce disj s1 s2)\n    (reduce disj s2 s1)\n  ))", "problem": 88, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn [A B]\n  (set (concat (filter (complement A) B)\n               (filter (complement B) A))))", "problem": 88, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn sym-diff [a b]\n  (letfn [(xor [x y]\n            (or (and x (not y))\n                (and y (not x))))\n          (pred [e]\n            (xor (contains? a e)\n                 (contains? b e)))]\n    (set (filter pred (clojure.set/union a b)))))", "problem": 88, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "#(clojure.set/union \n  (clojure.set/difference %1 %2) \n  (clojure.set/difference %2 %1))", "problem": 88, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn disjoint [a b] \n  (set (concat (apply disj a b) (apply disj b a))))", "problem": 88, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn symdiff [s1 s2]\n  (set (concat (remove s1 s2)\n               (remove s2 s1))))", "problem": 88, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn [s1 s2]\n  (let [f #(clojure.set/difference %1 %2)]\n   (set (concat\n     (f s1 s2)\n     (f s2 s1)))))", "problem": 88, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn [s1 s2]\n  (reduce conj\n    (apply disj s1 s2)\n    (apply disj s2 s1)))", "problem": 88, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn [x y] (set (into (filter #(not (x %)) y)\n                     (filter #(not (y %)) x))))", "problem": 88, "user": "4dbde27c535d020aff1edf50"}, {"code": "#(clojure.set/difference \n  (clojure.set/union % %2) \n  (clojure.set/intersection % %2)\n)", "problem": 88, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn [a b]\n     (letfn  [(pdiff  [x y]  (remove #(contains? y %) x))] \n\t\t   (set (concat (pdiff a b) (pdiff b a)))))", "problem": 88, "user": "4e739e13535dff18050a9c76"}, {"code": "(fn [x y] (apply hash-set\r\n            (filter #(or\r\n                       (and (not (contains? x %)) (contains? y %))\r\n                       (and (contains? x %) (not (contains? y %))))\r\n                    (reduce conj x y))))", "problem": 88, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "#(set (concat (remove %2 %)\n              (remove % %2)))", "problem": 88, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "(fn sub [a b]\n  (let [dis (clojure.set/intersection a b)\n       a-sub (clojure.set/difference a dis)\n       b-sub (clojure.set/difference b dis)]\n    (clojure.set/union a-sub b-sub)))", "problem": 88, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "#(loop [r #{} s1 %1 s2 %2]\n    (if (seq s1)\n    (let [c (count (filter (fn [a] (= a (first s1))) s2))]\n      (if (> c 0)\n        (recur r (rest s1) (disj s2 (first s1)))\n        (recur (conj r (first s1)) (rest s1) s2)))\n    (set (concat r s2))))", "problem": 88, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "(fn [a b] (set (get (group-by #(= (a %) (b %)) (reduce conj a b)) false)))", "problem": 88, "user": "4e720985535d5021c1a89655"}, {"code": "#(set(into(remove%1%2)(remove%2%1)))", "problem": 88, "user": "4e7eff9e535db966e863cc38"}, {"code": "(fn [a b] \n  (set (concat \n    (remove #(b %) a)\n    (remove #(a %) b))))", "problem": 88, "user": "4daf907aedd6309eace4d17b"}, {"code": "(fn [a b]\n  (set (into\n    (filter #(not (a %)) b)\n    (filter #(not (b %)) a))))", "problem": 88, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn [set1 set2]\n  (into (clojure.set/difference set1 set2)\n        (clojure.set/difference set2 set1)))", "problem": 88, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn [a b] (set (map first (filter #(= 1 (second %)) (frequencies (concat a b))))))", "problem": 88, "user": "4e7e55ab535db169f9c79711"}, {"code": "(fn [s1 s2]\n  (let [f (fn [s1 s2] (filter #(nil? (s2 %)) s1))] \n  (into (into #{} (f s1 s2)) (f s2 s1))))", "problem": 88, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "(fn [a b]\n  ( let [i  (set (map a b)),\n         diff (fn [n m] (filter #(not (contains? m %)) n)),\n         da (diff a i),\n         db (diff b i)]\n      (set (concat da db))\n  )\n)", "problem": 88, "user": "4e7f4147535db966e863cc3d"}, {"code": "#(cond (empty? %1) %2 (empty? %2) %1 :default (set (apply conj (remove %1 %2) (remove %2 %1))))", "problem": 88, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn [s1 s2]\n  (let [sub (fn [s1 s2] (reduce (fn [s x] (disj s x)) s1 s2))]\n    (let [sub1 (sub s1 s2)\n          sub2 (sub s2 s1)]\n      (reduce (fn [s x] (conj s x)) sub1 sub2))))", "problem": 88, "user": "4dc29a1d535d020aff1edf96"}, {"code": "(fn  [a b]  (clojure.set/union (apply disj a b)  (apply disj b a))  )", "problem": 88, "user": "4e78c208535db95036265722"}, {"code": "#(let [s1 (clojure.set/difference % %2)\n       s2 (clojure.set/difference %2 %)]\n    (clojure.set/union s1 s2))", "problem": 88, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn diff [a b]\n  (set (remove #(and (contains? a %) (contains? b %)) (concat a b))))", "problem": 88, "user": "4e80d71b535db62dc21a62b7"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4e5a460f535d8a8b8723a2ab"}, {"code": "(fn sym-diff [sa sb]\n  (set (concat (seq (reduce (fn [j k] (if (contains? sb k) j (conj j k))) #{} sa))\n               (seq (reduce (fn [j k] (if (contains? sa k) j (conj j k))) #{} sb)))))", "problem": 88, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn [x y]\n        (clojure.set/difference\n            (clojure.set/union x y)\n            (clojure.set/intersection x y)\n        )\n)", "problem": 88, "user": "4e78dc98535db95036265724"}, {"code": "(fn [a b] \n  (set \n    (filter \n      (complement \n        #(and (contains? a %) (contains? b %)))\n      (concat\n        a b))))", "problem": 88, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "#(into (reduce disj % %2) (reduce disj %2 %))", "problem": 88, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn symmetric [xs ys]\n  (let [\n  remove-all (fn [xs ys]\n    (reduce #(disj %1 %2) xs ys))\n  difference (fn [xs & xss]\n    (reduce remove-all xs xss))\n  all-contain? (fn [yss]\n    (fn [x]\n      (every? #(contains? %1 x) yss)))\n  intersection (fn [xs & xss]\n    (filter (all-contain? xss) xs))\n  xsys (intersection xs ys)\n  ]\n  (set (concat (difference xs xsys)\n               (difference ys xsys)))))", "problem": 88, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "(fn [a b]\n  (set (remove #(and (a %) (b %))\n      (concat a b))))", "problem": 88, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn [s1 s2]\n  (clojure.set/union\n   (apply disj s1 s2)\n   (apply disj s2 s1)))", "problem": 88, "user": "4daedd1eedd6309eace4d164"}, {"code": "(fn isect [ a b ]\n  (let [ not-in   (fn [ a b] (set (filter #(not(nil? %)) (map #(if (contains? b %) nil %) a))))]\n    (set (concat (not-in a b) (not-in b a)))))", "problem": 88, "user": "4e7ada51535db169f9c796ae"}, {"code": "(fn [a b] (set (filter #(not (and (a %) (b %))) (concat a b))))", "problem": 88, "user": "4e8612f8535db62dc21a62f2"}, {"code": "#(set `(~@(remove % %2) ~@(remove %2 %)))", "problem": 88, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2)\n(clojure.set/difference %2 %1))", "problem": 88, "user": "4db92654535d1e037afb21a0"}, {"code": "#(into (reduce disj %1 %2) (reduce disj %2 %1))", "problem": 88, "user": "4e8510e7535db62dc21a62e7"}, {"code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "problem": 88, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn [a b]\n    (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [s1 s2]\n  (clojure.set/union\n     (clojure.set/difference s1 s2)\n     (clojure.set/difference s2 s1)))", "problem": 88, "user": "4e860e85535db62dc21a62f1"}, {"code": "#(clojure.set/union (clojure.set/difference % (clojure.set/intersection % %2))\n        (clojure.set/difference %2 (clojure.set/intersection % %2)))", "problem": 88, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn [a b] (set (concat (remove a b) (remove b a))))", "problem": 88, "user": "4db8ec47535d1e037afb219d"}, {"code": "(fn [a b]\n  (set\n    (filter \n      #(and\n        (or (a %) (b %))\n        (not (and (a %) (b %))))\n      (concat a b))))", "problem": 88, "user": "4e7e05a6535db169f9c796fe"}, {"code": "(fn [s t] (let [f (fn [a b] (filter #(not (a %1)) b))] \n (set (concat (f s t) (f t s)))))", "problem": 88, "user": "4dcc5aff535d5973398f9293"}, {"code": "(fn [x y] (into (clojure.set/difference x y) (clojure.set/difference y x)))", "problem": 88, "user": "4db091b7838c48654951d9c2"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [x y]\n  (let [j (reduce (fn [a b] (if (x b) a (conj a b))) #{} y)]\n    (reduce (fn [a b] (if (y b) a (conj a b))) j x)))", "problem": 88, "user": "4e773be8535d324fb2983d6e"}, {"code": "#(into\n    (clojure.set/difference %1 %2)\n    (clojure.set/difference %2 %1))", "problem": 88, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "(fn my-sym-diff [a b]\n   (set (concat\n         (filter #(not (a %)) b)\n         (filter #(not (b %)) a))))", "problem": 88, "user": "4e89f46c535d3e98b8023288"}, {"code": "#(set (concat (reduce disj % %2) (reduce disj %2 %)))", "problem": 88, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn [s1 s2]\n  (clojure.set/union\n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)))", "problem": 88, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn [x y] (set (concat (reduce (fn [acc b] (if (and (x b) (y b)) acc (conj acc b))) [] (set (concat (seq x) (seq y)))))))", "problem": 88, "user": "4e89de60535d3e98b8023285"}, {"code": "(fn [s1 s2]\n  (loop [accu #{}\n   s (reduce conj s1 s2)]\n    (if (empty? s)\n      accu\n      (let [f (first s)]\n\t(if (or (and (s1 f) (not (s2 f)))\n\t\t(and (not (s1 f)) (s2 f)))\n\t  (recur (conj accu f) (rest s))\n\t  (recur accu (rest s)))))))", "problem": 88, "user": "4e82c062535db62dc21a62cc"}, {"code": "#(set (remove (set (filter %1 %2)) (into %1 %2)))", "problem": 88, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn [s t]\n         (set (into (filter (fn [a] (not (contains? t a))) s)\n                    (filter (fn [b] (not (contains? s b))) t))))", "problem": 88, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn [f s]\n  (reduce\n    (fn [a b]\n      (if (get a b)\n        (disj a b)\n        (conj a b))) f s))", "problem": 88, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn [set1 set2]\n  (clojure.set/difference (clojure.set/union set1 set2)\n                          (clojure.set/intersection set1 set2)))", "problem": 88, "user": "4daf36c2edd6309eace4d175"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4db045b5838c48654951d9be"}, {"code": "(fn [set1 set2]\n  (set\n    (concat (remove #(contains? set2 %) set1)\n            (remove #(contains? set1 %) set2))))", "problem": 88, "user": "4dc0ff08535d020aff1edf84"}, {"code": "(fn [s1 s2]\n(loop [s1 s1 s2 s2 tmp #{}]\n      (if (empty? s1)\n        (into tmp s2)\n        (let [head (first s1)]\n          (if (contains? s2 head)\n            (recur (set (rest s1)) (disj s2 head) tmp)\n            (recur (set (rest s1)) s2 (conj tmp head)))))))", "problem": 88, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "#(set (into (% %2 %3) (% %3 %2)))\nremove", "problem": 88, "user": "4e823ed7535db62dc21a62c7"}, {"code": "#(clojure.set/difference \n  (clojure.set/union % %2) \n    (clojure.set/intersection % %2))", "problem": 88, "user": "4e5867d1535d8a8b8723a291"}, {"code": "(fn my-symmetric-diff [set1 set2]\n  (let [combo  (into set1 set2)]\n    (set (for [item combo :when (not (and (set1 item)\n  \t\t\t\t  (set2 item)))]\n\t   item))))", "problem": 88, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "#(into (set (remove %2 %)) (remove % %2))", "problem": 88, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn sym-diff\n  [seta setb]\n  (let [diff clojure.set/difference\n        union clojure.set/union]\n    (union (diff seta setb) (diff setb seta))))", "problem": 88, "user": "4e8a0c82535d3e98b802328d"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn [coll1 coll2]\n  ((fn [all-elements result]\n    (if (empty? all-elements)\n      result\n      (recur (rest all-elements)\n        (if (and\n            (contains? coll1 (first all-elements))\n            (contains? coll2 (first all-elements)))\n          result\n          (conj result (first all-elements))))))\n  (into coll1 coll2) #{}))", "problem": 88, "user": "4e73a9dc535dff18050a9c77"}, {"code": "(fn [a b] (reduce (fn [set x] (if (set x)\n                                          (disj set x)\n                                          (conj set x)))\n                            #{}\n                            (concat a b)))", "problem": 88, "user": "4daef21cedd6309eace4d169"}, {"code": "#(into #{} (concat\n  (filter (complement %1) %2)\n  (filter (complement %2) %1)))", "problem": 88, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn symdiff \n  ([s1 s2] \n    (symdiff s1 s1 s2 s2 ))\n\t([s1 s1a s2 s2a] \n\t\t(if (empty? s1) \n\t\t(symdiff s2a s2a s1a)\n\t\t(if-not (s2 (first s1))\n\t\t\t(conj \n\t\t\t\t(symdiff (rest s1)s1a s2 s2a) \n\t\t\t\t(first s1))\n\t\t\t(symdiff (rest s1) s1a s2 s2a) )))\n\t([s1 s1a s2] \n\t\t(if (empty? s1) \n\t\t#{} \n\t\t(if-not (s2 (first s1))\n\t\t\t(conj \n\t\t\t\t(symdiff (rest s1) s1a s2) \n\t\t\t\t(first s1))\n\t\t\t(symdiff (rest s1) s1a s2) )))\n)", "problem": 88, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "4e8f4f64535d65386fec2149"}, {"code": "#(into (set (remove % %2)) (remove %2 %))", "problem": 88, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(fn my-sd\n  [s1 s2]\n  (set (filter #(not= (s1 %) (s2 %)) (into s1 s2))))", "problem": 88, "user": "4e7f32ee535db966e863cc3a"}, {"code": "#(set (concat (apply disj %2 %1) (apply disj %1 %2)))", "problem": 88, "user": "4e98a6d0535dbda64a6f6b5e"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "4e6f8431535d5021c1a8961e"}, {"code": "(fn [a b]\n  (let [ua (for [i a :when (not (= i (b i)))]\n            i)\n        ub (for [i b :when (not (= i (a i)))]\n            i)]\n    (into (into #{} ua) ub)))", "problem": 88, "user": "4e955b95535dbda64a6f6b33"}, {"code": "(fn [s1 s2]\n  (set (remove\n    #(and (contains? s1 %) (contains? s2 %) )\n    (concat s1 s2)))\n)", "problem": 88, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn ladif [s1 s2] (reduce disj (reduce conj s1 s2) (set (filter s1 s2) )) )", "problem": 88, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn [x y]\r\n    (->>\r\n     (let [z (sort (concat x y))]\r\n        (reductions\r\n          (fn [ret n]\r\n            (if (= 1 (count(filter #(= n %) z))) (list n) nil )\r\n          )\r\n          '()\r\n          z\r\n        )\r\n      )\r\n      (drop 1)\r\n      (filter (complement nil?))\r\n      (reduce #(concat %1 %2))\r\n      (set)\r\n    )\r\n  )", "problem": 88, "user": "4e8b73e4535d65386fec2120"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn [a b] (set (concat (remove a b) (remove b a))))", "problem": 88, "user": "4ea09fa4535d7eef308072aa"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(comp set (partial map first) (partial filter #(= (val %) 1)) (partial reduce #(assoc % %2 (inc (get % %2 0))) {}) concat)", "problem": 88, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn [s1 s2]\n   (let [outs (fn [s1 s2] (set (filter #(not (contains? s1 %)) s2)))]\n     (set (into (outs s1 s2) (outs s2 s1)))))", "problem": 88, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn [set1 set2]\n   (let [union #(set (concat %1 %2))\n         diff #(filter (complement %1) %2)]\n   (union (diff set1 set2) (diff set2 set1))))", "problem": 88, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn [xs ys]\r\n(set (concat\r\n(for [x xs :when (not (contains? ys x))] x)\r\n(for [y ys :when (not (contains? xs y))] y))))", "problem": 88, "user": "4ea09441535d7eef308072a7"}, {"code": "(fn [s1 s2]\n  (letfn [(xor [x y] (and (or x y) (not (and x y))))]\n    (into #{} (filter #(xor (contains? s1 %) (contains? s2 %)) (concat s1 s2)))))", "problem": 88, "user": "4e9e4515535dbda64a6f6b95"}, {"code": "#(set (remove (set (filter %1 %2)) (into %1 %2)))", "problem": 88, "user": "4e8ddf32535d65386fec213c"}, {"code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "(fn [x y] (set (filter #(not ((set (keep x y)) %)) (concat x y))))", "problem": 88, "user": "4e976f79535dbda64a6f6b55"}, {"code": "#(set (concat (filter (complement %1) %2) (filter (complement %2) %1)))", "problem": 88, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [a b]\n  (set (remove #(= (a %) (b %)) (into a b))))", "problem": 88, "user": "4ea0cfb0535d7eef308072ae"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "#(clojure.set/difference\n    (clojure.set/union %1 %2)\n    (clojure.set/intersection %1 %2))", "problem": 88, "user": "4e89ddf9535d3e98b8023284"}, {"code": "#(clojure.set/union\n    (clojure.set/difference %1 %2)\n    (clojure.set/difference %2 %1)\n)", "problem": 88, "user": "4e7650c5535d324fb2983d68"}, {"code": "(fn diff[c1 c2]\r\n  (let [theset (concat\r\n  (map (fn[x] (if (not(contains? c2 x)) x))c1)\r\n  (map (fn[x] (if (not(contains? c1 x)) x))c2)\r\n        )\r\n  ]\r\n  (disj (into #{} theset) nil)\r\n    ) )", "problem": 88, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "problem": 88, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "reduce #(if (%1 %2) (disj %1 %2) (conj %1 %2))", "problem": 88, "user": "4eab612d535d7eef30807316"}, {"code": "#(set (remove (fn[e] (and (% e) (%2 e))) (concat % %2)))", "problem": 88, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "(fn this [set1 set2]\n  (loop [s1 set1 s2 set2 diff #{}]\n    (cond\n      (empty? s1) (clojure.set/union s2 diff)\n      (empty? s2) (clojure.set/union s1 diff)\n      :else \n        (let [k (first s1)]\n          (if (contains? s2 k)\n            (recur (rest s1) (disj s2 k) diff)\n            (recur (rest s1) s2 (conj diff k)))))))", "problem": 88, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "#(set (remove (set (filter %1 %2)) (into %1 %2)))", "problem": 88, "user": "4ea85846535d7eef308072f9"}, {"code": "(fn sd [s1 s2] \n  (let [d clojure.set/difference] \n    (set (concat (d s1 s2) (d s2 s1)))))", "problem": 88, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn [x y]\n  (set (filter (complement (set (filter x y))) (into x y))\n  ))", "problem": 88, "user": "4eaa96e1535d7eef3080730d"}, {"code": "(fn [s1 s2]\r\n  (set (remove (set (filter s1 s2)) (into s1 s2))))", "problem": 88, "user": "4e994541535dbda64a6f6b64"}, {"code": "#(set (for [[k v] (group-by identity (concat % %2)) :when (= (count v) 1)] k))", "problem": 88, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "#(into (clojure.set/difference %1 %2)\n       (clojure.set/difference %2 %1))", "problem": 88, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "#(clojure.set/difference \n  (clojure.set/union % %2)\n  (clojure.set/intersection % %2))", "problem": 88, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn [a b] (set (remove #(and (a %) (b %)) (concat a b))))", "problem": 88, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn [x y] (set (concat \n  (keep-indexed #(if (nil? (get y %2)) %2) x)\n  (keep-indexed #(if (nil? (get x %2)) %2) y))))", "problem": 88, "user": "4ea9b80c535d7eef30807306"}, {"code": "#(set (concat (remove %2 %) (remove % %2)))", "problem": 88, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn sd\n  ([set1 set2] (sd set1 set2 '()))\n  ([set1 set2 difference] (if (empty? set1)\n                            (set (concat difference set2))\n                            (let [first (first set1)]\n                              (if (set2 first)\n                                (recur (disj set1 first) (disj set2 first) difference)\n                                (recur (disj set1 first) set2 (conj difference first)))))))", "problem": 88, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn [s1 s2]\n    (set (remove #(and (contains? s1 %) (contains? s2 %)) \n                 (clojure.set/union s1 s2))))", "problem": 88, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn [a b]\n  (let [all (concat a b)]\n    (reduce\n      (fn [res x]\n        (if (or (not (contains? a x)) (not (contains? b x)))\n          (conj res x)\n          res))\n      #{} all)))", "problem": 88, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [a b]\n  (set (concat (reverse (reduce (fn [r x]\n    (if (some (set (list x)) b)\nr\n(conj r x))) '() a))\n(reverse (reduce (fn [r x]\n  (if (some (set (list x)) a)\nr\n(conj r x))) '() b)))))", "problem": 88, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn [x y]\n  (let [a\n  (for [i x]\n\t  (when (not(contains? y i)) i)),\n\tb\n\t(for [j y]\n\t  (when (not (contains? x j)) j))] (set (filter (fn [x] (if (nil? x) false true)) (into a b)))))", "problem": 88, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn diff [a b]\n  (set (remove #(and (contains? a %) (contains? b %)) (concat a b))))", "problem": 88, "user": "4ea55757535d7eef308072d3"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn sym-diff\n  [xs ys]\n  (into\n   (reduce (fn [s y] (if (xs y) s (conj s y))) #{} ys)\n   (reduce (fn [s x] (if (ys x) s (conj s x))) #{} xs)))", "problem": 88, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "#(let [f (partial reduce disj)] (reduce conj (f %1 %2) (f %2 %1)))", "problem": 88, "user": "4e4870d1535dc968683fc4bc"}, {"code": "(fn [s t] \n  (into \n    (reduce disj (into s t) t) \n    (reduce disj (into s t) s)))", "problem": 88, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn [a b]\n  (clojure.set/union\n    (clojure.set/difference a b)\n    (clojure.set/difference b a)))", "problem": 88, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "#(reduce conj (reduce disj %1 %2) (reduce disj %2 %1))", "problem": 88, "user": "4db5082e535d87e67b28fe03"}, {"code": "(fn [s1 s2]\n  (set (concat \n    (filter #(not (.contains s1 %)) s2) \n    (filter #(not (.contains s2 %)) s1))))", "problem": 88, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "4e72ac47535d5021c1a89666"}, {"code": "(fn [a b] (letfn [(x [y z] (filter #(not (contains? z %)) y))]\n(set (concat (x a b) (x b a)))))", "problem": 88, "user": "4ebf45c3535dfed6da9c6d9d"}, {"code": "(fn [x,y] \r\n  (set \r\n    (filter \r\n      #(or \r\n        (and (not (contains? x %)) (contains? y %)) \r\n        (and (contains? x %) (not (contains? y %))) )\r\n      (concat x y))))", "problem": 88, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "#(set (into (remove %2 %1) (remove %1 %2)))", "problem": 88, "user": "4eabb245535d7eef30807319"}, {"code": "(fn [s t] (set (map first (filter #(= 1 (val %)) (frequencies (concat s t))))))", "problem": 88, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn [set1 set2]\n  (clojure.set/union\n    (clojure.set/difference set1 set2)\n    (clojure.set/difference set2 set1)))", "problem": 88, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn [x y] (let [temp-x x temp-y y] (set (concat (filter (fn [a] (not (get temp-y a))) x) (filter (fn [b] (not (get temp-x b))) y)))))", "problem": 88, "user": "4ec12516535dfed6da9c6da7"}, {"code": "(fn [z w] (letfn [(union [x y] \n  (cond\n     (= x '()) y\n     (= y '()) x\n     :else (apply conj x y)))\n   (xnoty [x y] (filter #(not (contains? y %)) x))] \n   (set (union (xnoty z w) (xnoty w z)))))", "problem": 88, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn [a b]\n  (set (concat (remove a b) (remove b a))))", "problem": 88, "user": "4ec34578535dcc7ae8597d51"}, {"code": "#(set (into (remove % %2) (remove %2 %)))", "problem": 88, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn [a,b] (set \n  (filter \n    (fn [e] \n      (not (and (some #(= % e) a) (some #(= % e) b))))\n    (concat a b))))", "problem": 88, "user": "4e8b98fc535d65386fec2124"}, {"code": "#(clojure.set/difference\n  (clojure.set/union % %2)\n  (clojure.set/intersection % %2))", "problem": 88, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "4eb51942535d7eef30807365"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn [s1 s2]\n  (into (into #{} \n              (filter #(not (s2 %)) s1)) \n        (filter #(not (s1 %)) s2)))", "problem": 88, "user": "4ec21058535dfed6da9c6dba"}, {"code": "(fn [set1 set2]\n  (cond (empty? set1) set2\n        (empty? set2 ) set1\n        :else\n  (let [allset (into set1 set2)\n        comset (set (reduce into (map #(if (get set2 %) #{%} nil) set1 )))\n        ]\n        (set (reduce into (map #(if (get comset %) nil #{%})  allset)))\n\n        )\n\n  )\n   \n  )", "problem": 88, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn [a b]\n  (set (keys (filter #(= 1 (second %)) (frequencies (concat a b))))))", "problem": 88, "user": "4ec6559a535d6d7199dd36c9"}, {"code": "(fn [s1 s2]\n  (set (filter #(not (and (contains? s1 %) (contains? s2 %))) (into s1 s2))))", "problem": 88, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn [& xs]\n  (reduce #(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %)) xs))", "problem": 88, "user": "4ec07699535dfed6da9c6da2"}, {"code": "#(let [d clojure.set/difference]\n  (into (d %1 %2) (d %2 %1)))", "problem": 88, "user": "4e8a460e535d65386fec2109"}, {"code": "(fn [a b]\n  (set (filter #(not (and (contains? a %) (contains? b %))) (concat a b))))", "problem": 88, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "(fn [a b]\n  (set (concat (remove a b) (remove b a))))", "problem": 88, "user": "4ecb1641535d6d7199dd370e"}, {"code": "#(set (mapcat remove [% %2] [%2 %]))", "problem": 88, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "#(set (map first (remove (fn [[_ b]] (> b 1))\n  (frequencies (concat % %2)))))", "problem": 88, "user": "4ecfb458535d44c135fd68bb"}, {"code": "(fn [a b]\n  (if (empty? a)\n    b\n    (if (empty? b)\n    a\n    (let [\n      diff #(loop [xs %1 ys %2 rs #{}] \n        (let [x (first xs)]\n          (if (nil? x)\n            rs\n            (if (contains? ys x)\n              (recur (rest xs) ys rs)\n              (recur (rest xs) ys (conj rs x))))))]\n    (apply conj (diff a b) (diff b a))))))", "problem": 88, "user": "4e25176e535d04ed9115e829"}, {"code": "#(clojure.set/difference \n    (set (concat %1 %2)) \n    (clojure.set/intersection %1 %2))", "problem": 88, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn [s1 s2]\n  (loop [s (clojure.set/union s1 s2) acc #{}]\n    (cond\n      (empty? s) acc\n      (and (s1 (first s)) (s2 (first s))) (recur (rest s) acc)\n      :else (recur (rest s) (conj acc (first s))))))", "problem": 88, "user": "4daf8f84edd6309eace4d17a"}, {"code": "(fn sym-diff [s1 s2]\n  (clojure.set/difference\n   (clojure.set/union s1 s2)\n   (clojure.set/intersection s1 s2)))", "problem": 88, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn [a b]\n  (let [un (set (concat a b))]\n  (set (remove #(and (a %) (b %)) un))))", "problem": 88, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn symDiff [s1 s2] \n  (clojure.set/union \n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)\n  )\n)", "problem": 88, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4ecf42b4535d1f5ad70dba3c"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [a b]\n  (set (remove \n         #(and (contains? a %) (contains? b %)) \n         (into a b))))", "problem": 88, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn [a b] (let [s (concat a b)] (set (filter (fn [x] (= 1 (count (filter #(= x %) s)))) (set s)))))", "problem": 88, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn [s1 s2]\n   (letfn [(unique [xs ys] (reduce\n                             (fn [unique item]\n                               (if (contains? ys item)\n                                 unique (conj unique item)))\n                             [] xs))]\n          (set (concat (unique s1 s2) (unique s2 s1)))))", "problem": 88, "user": "4e513758535dc968683fc4f3"}, {"code": "(fn [a b]\n  (let [common (clojure.set/intersection a b)]\n    (set\n      (concat\n        (remove common a)\n        (remove common b)))))", "problem": 88, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "#(into (reduce disj % %2) (reduce disj %2 %))", "problem": 88, "user": "4e704293535d5021c1a89634"}, {"code": "(fn my-sym-diff [s1 s2]\n  (let [a (clojure.set/difference s1 s2)\n        b (clojure.set/difference s2 s1)]\n    (clojure.set/union a b)))", "problem": 88, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn [set-1 set-2]\n  (clojure.set/difference\n    (clojure.set/union set-1 set-2)\n    (clojure.set/intersection set-1 set-2)))", "problem": 88, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn [s1 s2]\n  (set (map first (filter #(= (val %) 1) (frequencies (into (into () s1) s2))))))", "problem": 88, "user": "4ebc829e535dfed6da9c6d86"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [x y]\n  (set (concat (filter (complement x) y)\n               (filter (complement y) x))))", "problem": 88, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(fn [a b] (letfn [(d [a b] (for [x a :when (not (b x))] x))]\n  (set (concat (d a b) (d b a)))))", "problem": 88, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "(fn [s1 s2] (let [in  (set (filter #(s1 %) s2)) ;intersection\n  \t\t u (set (concat s1 s2))]                  ;union\n\t\t\t (set (remove #(in %) u))))", "problem": 88, "user": "4ea4e98a535d7eef308072ce"}, {"code": "#(into (apply disj % %2) (apply disj %2 %))", "problem": 88, "user": "4eca40cd535d6d7199dd3703"}, {"code": "(fn [s1 s2]\n    (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn diff [s1 s2]\n  (set \n\t\t(filter \n\t\t\t#(not \n\t\t\t\t(and (get s1 %) (get s2 %) true)) \n\t\t\t(concat s1 s2)))\n)", "problem": 88, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "#(set (keep (fn [x] (if (and (% x) (%2 x)) nil x)) (into % %2)))", "problem": 88, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn [a b] (letfn [(d [a b] (for [x a :when (not (b x))] x))]\n  (set (concat (d a b) (d b a)))))", "problem": 88, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn symdiff [a b]\n    (let [ inter (clojure.set/intersection a b) ]\n        (clojure.set/union (clojure.set/difference a inter) (clojure.set/difference b inter))))", "problem": 88, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "(fn [s1 s2]\n  (set (keys (filter #(= 1 (val %)) (frequencies (concat s1 s2))))))", "problem": 88, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "(fn sym-diff[xs ys]\r\n  (let[union (clojure.set/intersection xs ys)\r\n      less-union (fn[items](filter(fn[item](not(contains? union item)))items))]\r\n    (set(concat(less-union xs)(less-union ys)))))", "problem": 88, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2)\n                          (clojure.set/intersection s1 s2)))", "problem": 88, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "problem": 88, "user": "4e89ff3d535d3e98b802328a"}, {"code": "(comp set #(map first %) #(filter (complement second) %) #(map second %) #(group-by identity %) #(concat (seq %) (seq %2)))", "problem": 88, "user": "4ece9ca9535d23f03622770f"}, {"code": "#(set (into (filter (complement %) %2) (filter (complement %2) %)))", "problem": 88, "user": "4edd038c535d10e5ff6f5327"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn [a b]\n  (set\n    (concat\n      (filter (complement (partial contains? b)) a)\n      (filter (complement (partial contains? a)) b))))", "problem": 88, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2)\n                          (clojure.set/intersection s1 s2)))", "problem": 88, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "(fn [x y] (set (remove nil? (map #(let [[k v] %] (when (= v 1) k)) (frequencies (concat x y ))))))", "problem": 88, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "(fn [x y] (reduce #(conj %1 (first %2)) #{} (filter #(= 1 (count %)) (partition-by identity  (sort (concat x y))))))", "problem": 88, "user": "4ea11921535d7eef308072af"}, {"code": "(fn sdiff [set1 set2]\n  (apply hash-set (concat (remove set1 set2) (remove set2 set1)))\n  )", "problem": 88, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(fn [a b]\n  (reduce (fn [s x]\n    (if (or (and (contains? a x) (not (contains? b x)))\n            (and (contains? b x) (not (contains? a x))))\n        (conj s x)\n        s)) #{} (concat a b)))", "problem": 88, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "#(clojure.set/union\r\n  (clojure.set/union\r\n    (clojure.set/difference %1 %2)\r\n    (clojure.set/difference %2 %1)))", "problem": 88, "user": "4ee40938535d10e5ff6f5375"}, {"code": "(fn [set1 set2]\n  (let [f (fn [s1 s2] (filter #(nil? (s2 %)) s1))]\n    (set (into (f set1 set2) (f set2 set1)))))", "problem": 88, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "#(set (concat (filter (complement %) %2)\n              (filter (complement %2) %)))", "problem": 88, "user": "4ee7ef87535d93acb0a66872"}, {"code": "(fn [x y]\n  (let [both (distinct (concat (vec x) (vec y)))]\n    (apply hash-set (filter #(not= (get x %) (get y %)) both))))", "problem": 88, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn [A B]\n  (let [d (fn [a b] (remove #(contains? b %) a))]\n    (set (into (d A B) (d B A)))))", "problem": 88, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn [m1 m2]\n  (set (filter \n    (fn [n]\n      (not= (not-any? #(= n %) m1) (not-any? #(= n %) m2)))\n    (clojure.set/union m1 m2))))", "problem": 88, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn [a b]\n  (set (filter #(not (and (a %) (b %))) (concat a b))))", "problem": 88, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "#(set (concat (filter (complement %1) %2) \n              (filter (complement %2) %1)\n      )\n)", "problem": 88, "user": "4ec75829535d6d7199dd36e1"}, {"code": "#(set(into\n(filter (complement %2) %)\n(filter (complement %) %2)))", "problem": 88, "user": "4e599577535d8a8b8723a29f"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "#(reduce disj (into %1 %2) (filter %1 %2))", "problem": 88, "user": "4ee868be535d93acb0a6687d"}, {"code": "(fn [a b] (let [f (fn [a b] (filter #(not (contains? a %)) b ))]\n                       (set (concat (f a b) (f b a) ) ) ))", "problem": 88, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn my-difference [as bs]\n  (let [diff (fn [xs ys]\n               (reduce (fn [h e] (if (ys e) h (conj h e))) #{} xs))]\n    (into (diff as bs) (diff bs as))))", "problem": 88, "user": "4e7f8f85535db966e863cc44"}, {"code": "(fn [x y]\r\n  (let [subx (for [i x] (if (y i) nil i))\r\n  suby (for [i y] (if (x i) nil i))]\r\n    (set (filter #(not (nil? %)) (concat subx suby)))))", "problem": 88, "user": "4ee9d697535d93acb0a66895"}, {"code": "(fn symmetric-difference\n  [a b]\n  (let [m (filter (complement a) b)\n        n (filter (complement b) a)]\n    (into #{}  (concat m n))))", "problem": 88, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "#(set (filter (fn [a] (not= (% a) (%2 a))) (concat % %2)))", "problem": 88, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4dbbdf86535d3f4042261ece"}, {"code": "(fn [x y] (into #{} (concat (filter (comp not y) x) (filter (comp not x) y))))", "problem": 88, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn [a b] (set (filter #(or (and (contains? a %) (not (contains? b %)))\n                            (and (contains? b %) (not (contains? a %)))\n)\n  (reduce conj a b))))", "problem": 88, "user": "4db883e1535d1e037afb2198"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "problem": 88, "user": "4daea889edd6309eace4d15b"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn [a b]\n  (set (concat (filter #(= nil (b %)) a)\n               (filter #(= nil (a %)) b))))", "problem": 88, "user": "4ee88269535d93acb0a6687f"}, {"code": "#(apply (partial disj (clojure.set/union % %2)) \n          (clojure.set/intersection % %2))", "problem": 88, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn [l r]\n    (set (concat (remove r l)\n                 (remove l r))))", "problem": 88, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "#(reduce conj (reduce disj % %2) (reduce disj %2 %))", "problem": 88, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn [A B]\n  (let [C (clojure.set/union A B)]\n    (loop [elts C\n           res #{}\n           tmp (first C)]\n      (cond (= () elts) res\n            (and (contains? A tmp) (contains? B tmp)) \n              (recur (rest elts) res (first (rest elts)))\n            :default \n              (recur (rest elts) (conj res tmp) (first (rest elts)))))))", "problem": 88, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn [s1 s2]\n  (let [res1 (filter (complement s1) s2)\n        res2 (filter (complement s2) s1)]\n    (set (clojure.set/union res1 res2))))", "problem": 88, "user": "4ef0a38e535dced4c769f20b"}, {"code": "#(set `(~@(% %2 %3) ~@(% %3 %2))) remove", "problem": 88, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn [s1 s2]\n    (let [both (clojure.set/intersection s1 s2)]\n      (set (clojure.set/union (remove both s1)\n                              (remove both s2)))))", "problem": 88, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "#(set (into (remove % %2) (remove %2 %)))", "problem": 88, "user": "4ef2d243535dced4c769f221"}, {"code": "(fn [a b]\n  (set (concat\n         (filter (complement b) a)\n         (filter (complement a) b))))", "problem": 88, "user": "4edecdae535d10e5ff6f533c"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn [x y]\r\n    (let [diff (fn [a b]\r\n                 (set (map first \r\n                           (filter #(nil? (second %)) \r\n                                   (map (fn [x] [x (b x)]) a))))),\r\n          s1 (diff x y),\r\n          s2 (diff y x)]\r\n      (if (< (count s1) (count s2))\r\n        (reduce conj s2 s1)\r\n        (reduce conj s1 s2))))", "problem": 88, "user": "4ef1ee67535dced4c769f219"}, {"code": "(fn [a b] (set(concat (filter #(not(a %)) b)(filter #(not(b %)) a))))", "problem": 88, "user": "4ef4e5fa535dced4c769f242"}, {"code": "(fn [a b] \n  (let [c (filter #(not (contains? a %)) b) \n\t\t  d (filter #(not (contains? b %)) a)]\n\t\t(set (concat c d))))", "problem": 88, "user": "4ef5c7ce535dced4c769f248"}, {"code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "#(clojure.set/union \n  (clojure.set/difference %2 %)\n  (clojure.set/difference % %2))", "problem": 88, "user": "4ef355e3535dced4c769f228"}, {"code": "#(into (set (remove % %2)) (remove %2 %))", "problem": 88, "user": "4ef77c82535dced4c769f253"}, {"code": "(fn my-sd [s1 s2]\r\n  (loop [s1p s1 s2p s2 results #{}]\r\n\t\t(if (and (empty? s1p) (empty? s2p))\r\n\t\t\t(disj results nil)\r\n\t\t\t(let [s1pf (first s1p) s2pf (first s2p)]\r\n\t\t\t\t(cond\r\n\t\t\t\t\t(and (contains? s2 s1pf) (contains? s1 s2pf))\r\n\t\t\t\t\t\t(recur (next s1p) (next s2p) results)\r\n\t\t\t\t\t(contains? s2 s1pf)\r\n\t\t\t\t\t\t(recur (next s1p) (next s2p) (conj results s2pf))\r\n\t\t\t\t\t(contains? s1 s2pf)\r\n\t\t\t\t\t\t(recur (next s1p) (next s2p) (conj results s1pf))\r\n\t\t\t\t\t:else\r\n\t\t\t\t\t\t(recur (next s1p) (next s2p) (conj results s1pf s2pf)))))))", "problem": 88, "user": "4efb92ce535dced4c769f27a"}, {"code": "(fn [a b] (set (concat (remove a b) (remove b a))))", "problem": 88, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn [& s]\n  (set\n    (mapcat\n      #(filter (complement %2) %)\n      s\n      (reverse s))))", "problem": 88, "user": "4efcac3a535de96065cf507e"}, {"code": "(fn [set1 set2]\n  (let [all-values (clojure.set/union set1 set2)\n        shared-values (clojure.set/intersection set1 set2)]\n    (clojure.set/difference all-values shared-values)))", "problem": 88, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "(fn [s t] (set (remove #(and (s %) (t %)) (into s t))))", "problem": 88, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn my-symentric [s1 s2]\n  (cond (empty? s1) (set s2)\n        (empty? s2) (set s1)\n        (some #(= % (first s1)) s2) (my-symentric (rest s1) (remove #(= % (first s1)) s2))\n        true (set (cons (first s1) (my-symentric (rest s1) s2)))))", "problem": 88, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn [s1 s2] \n  (set \n    (keys \n      (filter \n        #(= (val %) 1) \n          (merge-with + \n            (zipmap s1 (repeat 1)) \n            (zipmap s2 (repeat 1)))))))", "problem": 88, "user": "4ec18451535dfed6da9c6db0"}, {"code": "reduce (fn [c e] (if (c e) (disj c e) (conj c e)))", "problem": 88, "user": "4e8768f6535dceadca469850"}, {"code": "#(let [s (map % %2)] (set (remove (set s) (into % %2))))", "problem": 88, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn sd [a b]\n  (loop [a a\n         b b\n         r a]\n    (if (seq r)\n      (if (b (first r))\n        (recur (disj a (first r)) (disj b (first r)) (rest r))\n        (recur a b (rest r)))\n      (set (concat a b)))))", "problem": 88, "user": "4ef57a7f535dced4c769f246"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4ed55b5d535d10e5ff6f52d8"}, {"code": "#(set (concat (filter (fn[x](not (contains? %1 x))) %2)(filter (fn[x](not (contains? %2 x))) %1)))", "problem": 88, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "#(set (for [x (into %1 %2) :when (not= (some #{x} %1) (some #{x} %2))] x))", "problem": 88, "user": "4f031eac535dcb61093f6a67"}, {"code": "#(set (concat (filter (complement %1) %2) (filter (complement %2) %1)))", "problem": 88, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn b-diff [col1 col2]\n  (set (concat\n    (for [x col1 :when (not-any? #(= x %) col2)] x)\n    (for [x col2 :when (not-any? #(= x %) col1)] x))))", "problem": 88, "user": "4eb955da535dfed6da9c6d50"}, {"code": "#(clojure.set/union \n  (clojure.set/difference % %2) \n  (clojure.set/difference %2 %))", "problem": 88, "user": "4f01c938535dcb61093f6a39"}, {"code": "#(into (apply disj % %2) (apply disj %2 %))", "problem": 88, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn [a b]\n      (reduce conj\n              (reduce disj a b)\n              (reduce disj b a)))", "problem": 88, "user": "4e8df08f535d65386fec213e"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) \n                         (clojure.set/intersection % %2))", "problem": 88, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "#(into (set (remove % %2)) (remove %2 %))", "problem": 88, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn [x y]\n  (set (concat\n    (for [a x :when (not (contains? y a))]\n       a)\n    (for [a y :when (not (contains? x a))]\n       a))))", "problem": 88, "user": "4f047902535dcb61093f6bcc"}, {"code": "(fn [a b]\n  (let [u clojure.set/union,\n        d clojure.set/difference]\n  (u (d a b) (d b a))))", "problem": 88, "user": "4f039a8b535dcb61093f6b36"}, {"code": "#(set (filter (fn [v] (not (and (contains? %1 v) (contains? %2 v)))) (concat %1 %2)))", "problem": 88, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn symdif [s1 s2]\n  (let [u (clojure.set/union s1 s2)\n        i (clojure.set/intersection s1 s2)]\n(set (filter \n  (fn [x] (not (contains? i x))) u))))", "problem": 88, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn [s1 s2] (set (->> (apply merge s1 s2)\n  (remove #(and (s1 %) (s2 %))))))", "problem": 88, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn sym-diff [s1 s2]\n  (let [wanted? (fn [e] (if (contains? s1 e)\n                          (not (contains? s2 e)) \n                          (contains? s2 e))) ]\n        \n    (into #{} (filter wanted? (into s1 s2)))))", "problem": 88, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn [a b]\n  (clojure.set/difference \n    (clojure.set/union a b)\n    (clojure.set/intersection a b)))", "problem": 88, "user": "4f017593535dcb61093f6a36"}, {"code": "(fn sym-diff [iseq1 iseq2]\n  (set (filter #(not (contains? (clojure.set/intersection iseq1 iseq2) %)) (clojure.set/union iseq1 iseq2))))", "problem": 88, "user": "4eee3e6a535d93acb0a668c3"}, {"code": "#(set (map first (filter (fn [[v f]] (= 1 f))  (frequencies (concat %1 %2)))))", "problem": 88, "user": "4e6a6be7535d8ccf87e9fee1"}, {"code": "(fn [s1 s2]\n  (letfn [(sym-diff [from s]\n            (reduce #(if-not (contains? s %2)\n                        (conj %1 %2)\n                        %1) #{} from))]\n    (set (concat (sym-diff s1 s2) (sym-diff s2 s1)))))", "problem": 88, "user": "4f04f847535dcb61093f6beb"}, {"code": "(fn [a b] \n  (set \n    (into \n      (filter #(nil? (a %)) b) \n      (filter #(nil? (b %)) a))))", "problem": 88, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "#(into (set (remove %2 %)) (remove % %2))", "problem": 88, "user": "4ed9354f535d10e5ff6f5301"}, {"code": "(fn [x y]\n  (set\n    (filter\n      #(not (and (contains? x %)\n                 (contains? y %)))\n      (concat x y))))", "problem": 88, "user": "4f062d4a535dcb61093f6c08"}, {"code": "#(set (remove (set (filter % %2)) (concat % %2)))", "problem": 88, "user": "4f083048535dcb61093f6c33"}, {"code": "(fn [s1 s2]\n  (into #{} \n    (filter \n      #(not (and (get s1 %) (get s2 %)))\n      (concat s1 s2))))", "problem": 88, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn [a b]\n  (loop [a_ a ret b]\n    (cond\n      (empty? a_) ret\n      (ret (first a_)) \n        (recur (next a_) (disj ret (first a_)))\n      :else \n        (recur (next a_) (conj ret (first a_))))))", "problem": 88, "user": "4f050dec535dcb61093f6bef"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4f039bbe535dcb61093f6b39"}, {"code": "(comp (partial apply clojure.set/difference)\n      (juxt clojure.set/union clojure.set/intersection))", "problem": 88, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "#(set (filter (fn [x] (not= (%1 x) (%2 x))) (concat %1 %2)))", "problem": 88, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn [set1 set2] \n  (set (concat (filter #(not (set2 %)) set1) \n               (filter #(not (set1 %)) set2))))", "problem": 88, "user": "4ef4ab95535dced4c769f23b"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4f03822f535dcb61093f6b03"}, {"code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "#(into (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn [s1 s2]\n  (let [union (set (concat s1 s2))]\n    (set\n      (filter\n        #(not= (s1 %) (s2 %))\n        union))))", "problem": 88, "user": "4f0b2028535d0136e6c222ff"}, {"code": "(fn [s1 s2]\n    (set (for [thing (set (concat s1 s2))\n               :when (or (not (s1 thing))\n                         (not (s2 thing)))]\n           thing)))", "problem": 88, "user": "4e89e939535d3e98b8023287"}, {"code": "#(set `(~@(% %2 %3) ~@(% %3 %2))) remove", "problem": 88, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn diff* [a b]\r\n    (set \r\n      (concat \r\n        (filter #(not (a %)) b)\r\n        (filter #(not (b %)) a))))", "problem": 88, "user": "4ef0f1a1535dced4c769f212"}, {"code": "#(set (concat \n          (filter (fn [x] (not (contains? % x))) %2)\n          (filter (fn [x] (not (contains? %2 x))) %)))", "problem": 88, "user": "4f067029535dcb61093f6c12"}, {"code": "(fn [xs ys]\n  (set (for [s (concat xs ys)\n      :when (not \n              (and (contains? ys s)\n                   (contains? xs s)))] \n    s)))", "problem": 88, "user": "4dbe19fe535d020aff1edf59"}, {"code": "(fn [a b]\n  (set (concat (for [x a, :when (not (b x))] x)\n               (for [y b, :when (not (a y))] y))))", "problem": 88, "user": "4e2d84bf535deb9a81d77f09"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn [c1 c2] (into (set (filter (comp not c1) c2)) (set (filter (comp not c2) c1))))", "problem": 88, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "#(into (reduce disj % %2) (reduce disj %2 %))", "problem": 88, "user": "4f037bb5535dcb61093f6aec"}, {"code": "(fn sym-diff [a b]\r\n    (clojure.set/union (clojure.set/difference a b)\r\n                       (clojure.set/difference b a)))", "problem": 88, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn [xs ys] (set (concat (remove xs ys) (remove ys xs))))", "problem": 88, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "#(->> (apply concat %&)\n      (group-by identity)\n      (remove (comp next second))\n      (map first), set)", "problem": 88, "user": "4daec9dcedd6309eace4d15f"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4f0ef874535d0136e6c22328"}, {"code": "#(letfn [(this [x y]\n       (loop [e0 x e1 y result #{}]\n\t\t(if (empty? e0)\n\t\t    result\n\t\t    (recur (rest e0) e1 (if (contains? e1 (first e0)) result (conj result (first e0)))))))] (into (into #{} (this %1 %2)) (this %2 %1)))", "problem": 88, "user": "4f066916535dcb61093f6c10"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "4f13047d535d64f60314642c"}, {"code": "(fn [a b]\n  (set (concat (filter #(not (contains? a %)) b) (filter #(not (contains? b %)) a))))", "problem": 88, "user": "4f038567535dcb61093f6b0c"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "(fn [x y] (set (filter (complement (set (filter x y))) (concat x y))))", "problem": 88, "user": "4ef6e689535dced4c769f24f"}, {"code": "(fn symmetric-difference [a b]                                                                                                               \r\n    (clojure.set/union (clojure.set/difference a b)                                                                                           \r\n                       (clojure.set/difference b a)))", "problem": 88, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn myDiff\n    ([x y z]\n        (if (empty? x)\n            (if (empty? y)\n                (set z)\n            (set (concat z y)))\n        (if (contains? y (first x))\n            (myDiff (rest x) (disj y (first x)) z)\n        (myDiff (rest x) y (concat z [(first x)])))))\n    ([x y] (myDiff x y #{})))", "problem": 88, "user": "4f03b3fb535dcb61093f6b52"}, {"code": "(fn mydif [a b]\n  (let [in-same (set (for [x a y b :when (= x y)] x))]\n    (set (for [x (reduce conj a b) :when (nil? (in-same x))]\n      x))))", "problem": 88, "user": "4f128865535d64f603146428"}, {"code": "(fn [s1 s2]\n  (set (for [x (into s1 s2)\n            :when (not (and\n               (contains? s1 x)\n               (contains? s2 x)))]\n        x)\n))", "problem": 88, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn symmetric-diff [s1 s2]\n  (let [inter (clojure.set/intersection s1 s2)\n        just-s1 (clojure.set/difference s1 inter)\n        just-s2 (clojure.set/difference s2 inter)]\n  (clojure.set/union just-s1 just-s2)))", "problem": 88, "user": "4e95a440535dbda64a6f6b37"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4f1052b9535d64f603146418"}, {"code": "#(set (concat (remove %2 %)\n              (remove % %2)))", "problem": 88, "user": "4db1fe241254ad5b4805fa77"}, {"code": "(fn [x y]\n  (into (clojure.set/difference x y) (clojure.set/difference y x)))", "problem": 88, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "#(set (into (remove % %2) (remove %2 %)))", "problem": 88, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "#(set (concat\n  (filter (comp not %1) %2)\n  (filter (comp not %2) %1)))", "problem": 88, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [xs ys]\n  (let [diff (fn [as bs]\n               (loop [acc #{} a (first as) as (rest as)]\n                 (if (nil? a)\n                   acc\n                   (recur (if (contains? bs a)\n                            acc\n                            (conj acc a))\n                          (first as) (rest as)))))\n        diff1 (diff xs ys)\n        diff2 (diff ys xs)]\n    (set (distinct (concat diff1 diff2)))))", "problem": 88, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn symmetric-diff [x y]\n  (clojure.set/union (clojure.set/difference x y ) (clojure.set/difference y x) ))", "problem": 88, "user": "4f03bf5e535dcb61093f6b5d"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "4f0333f6535dcb61093f6a77"}, {"code": "(fn [a b]\n  (set\n    (keys\n      (filter #(= (last %) 1)\n        (apply merge-with +\n          (map (fn [c] {c 1})\n            (concat a b))))))\n)", "problem": 88, "user": "4f16d6ed535d64f60314644f"}, {"code": "(fn [s1 s2]\n  (into (set\n    (filter #(not (contains? s1 %)) s2))\n    (filter #(not (contains? s2 %)) s1)))", "problem": 88, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "#(set (into (remove % %2) (remove %2 %)))", "problem": 88, "user": "4daeabf6edd6309eace4d15c"}, {"code": "(fn symmetric[x , y]\n  ( let [in? (fn [seq elm]  (some #(= elm %) seq))]   \n(set (into (remove #(in? x %) y) (remove #(in? y % ) x)))))", "problem": 88, "user": "4efa2b5c535dced4c769f26f"}, {"code": "(fn [s1 s2]\n  (loop [all (into #{} (concat s1 s2)) rslt #{}]\n    (let [a (first all)]\n      (if (nil? a) rslt\n        (if (and (contains? s1 a) (contains? s2 a))\n          (recur (rest all) rslt)\n          (recur (rest all) (conj rslt a)))))))", "problem": 88, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn [a b] (set (into (filter #(not (a %)) b) (filter #(not (b %)) a))))", "problem": 88, "user": "4f0c4518535d0136e6c2230b"}, {"code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "problem": 88, "user": "4f1b92d1535d64f60314647b"}, {"code": "#(set \n  (remove (clojure.set/intersection % %2) \n          (clojure.set/union % %2)))", "problem": 88, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn [a b] (set (filter\n  (fn [y] (let [f #(= y %1) u (some f a) w (some f b)]\n    (and (or u w) (not (and u w)))\n  ))\n  (concat a b))))", "problem": 88, "user": "4f1595da535d64f603146444"}, {"code": "#(into (apply disj % %2) (apply disj %2 %))", "problem": 88, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn sym\n  [x y]\n  (set (sort\n   (concat (clojure.set/difference x y)\n           (clojure.set/difference y x)))))", "problem": 88, "user": "4ebbf772535dfed6da9c6d76"}, {"code": "#(set (concat (filter (fn [i] (not (%2 i))) %) (filter (fn [i] (not (% i))) %2)))", "problem": 88, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn xdiff [set1 set2]\n  (into #{}\n        (filter #(let [in1 (set1 %) in2 (set2 %)] (and (or in1 in2) (not (and in1 in2))))\n                (into set1 set2))))", "problem": 88, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "4f0cc259535d0136e6c22310"}, {"code": "(fn [a b]\n   (letfn\n       [(diff [s1 s2] \n          (if (< (count s1) (count s2))\n            (reduce (fn [result item] \n                      (if (contains? s2 item) \n                        (disj result item) \n                        result))\n                    s1 s1)\n            (reduce disj s1 s2)))\n        (union [s1 s2]\n          (if (< (count s1) (count s2))\n            (reduce conj s2 s1)\n            (reduce conj s1 s2)))\n        (intersection [s1 s2]\n          (if (< (count s2) (count s1))\n            (recur s2 s1)\n            (reduce (fn [result item]\n                      (if (contains? s2 item)\n                        result\n                        (disj result item)))\n                    s1 s1)))]\n     (diff (union a b) (intersection a b)))\n   )", "problem": 88, "user": "4eb02674535d7eef30807338"}, {"code": "(fn [a b]\n  (set (concat \n    (filter #(not (contains? a %)) b)\n    (filter #(not (contains? b %)) a))))", "problem": 88, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn [a b] \n  (letfn [\n        (d[x y] (filter #(not (contains? x %)) y))] \n    (set (concat (d b a) (d a b)))))", "problem": 88, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [xs ys]\n  (let [\n    x (for [a xs :when (nil? (ys a))] a)\n    y (for [b ys :when (nil? (xs b))] b)\n  ]\n    (set (concat x y))))", "problem": 88, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "#(cond\r\n  (empty? %) %2\r\n  (empty? %2) %\r\n  :else (apply disj (apply conj % %2) (filter % %2)))", "problem": 88, "user": "4f07c8c3535dcb61093f6c2d"}, {"code": "(fn set-difference [f s]\n  (set (remove #(contains? (clojure.set/intersection f s) %) (clojure.set/union f s))))", "problem": 88, "user": "4f251302e4b0d66497709ff0"}, {"code": "#(into\n         (set (apply list (for [x %2 :when (not (contains? %1 x))] x)))\n         (set (apply list (for [x %1 :when (not (contains? %2 x))] x)))\n   )", "problem": 88, "user": "4ea31da2535d7eef308072c1"}, {"code": "#(clojure.set/union (clojure.set/difference % %2)(clojure.set/difference %2 %))", "problem": 88, "user": "4f1d1d95535d64f603146488"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4f2c593ee4b0d6649770a053"}, {"code": "(fn [s1 s2]\n  (let [s (into s1 s2)]\n    (loop [s s\n           sd #{}]\n          (if (not (seq s))\n            sd\n            (let [x (first s)]\n              (if (or (s1 x) (s2 x))\n                (if (not (and (s1 x) (s2 x)))\n                  (recur (rest s) (conj sd x))\n                  (recur (rest s) sd))\n                (recur (rest s) sd)\n            ))))))", "problem": 88, "user": "4dc1e1e4535d020aff1edf90"}, {"code": "(fn [a, b] \n  (set (filter #(not (contains? (clojure.set/intersection a b) %)) \n  (concat a b))))", "problem": 88, "user": "4f21838fe4b0d66497709fd2"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4f2ef48be4b0d6649770a06c"}, {"code": "(fn [s1 s2]\n  (let \n      [union (into (into #{} s1) s2)\n       intersection (set (filter s1 s2))] \n    (set (filter (complement intersection) union))))", "problem": 88, "user": "4e131443535d04ed9115e7d3"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4e8ad247535d65386fec2111"}, {"code": "(fn [one two]\n  (reduce\n   (fn [result item]\n     (conj result (first item)))\n   #{ }\n   (filter (fn [item] (= 1 (second item)))\n           (frequencies (concat (list) one two)))))", "problem": 88, "user": "4f31519ae4b0d6649770a086"}, {"code": "#(set (concat (filter (complement %) %2) (filter (complement %2) %)))", "problem": 88, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "(fn [x y]\n    (loop [s1 x\n         s2 y\n\t   acc #{}]\n      (\n        let [f (first s1)]\n        (if (empty? s1)\n      \t  (into acc s2)\n\t  (if (contains? s2 f)\n\t      (recur (disj s1 f) (disj s2 f) acc)\n\t      (recur (disj s1 f) s2 (conj acc f)))))))", "problem": 88, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2)\n                         (clojure.set/intersection %1 %2))", "problem": 88, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn [a b] \n   (letfn [(d [a b] (filter #(not (b %)) a))]\n     (set (concat (d a b) (d b a)))))", "problem": 88, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [s1 s2] (set (concat\n  (reduce disj s1 s2)\n  (reduce disj s2 s1))))", "problem": 88, "user": "4f1d1299535d64f603146487"}, {"code": "(fn [a b]\n  (set (filter #(nil? ((set (filter a b)) %))\n          (set (concat a b)))))", "problem": 88, "user": "4f280840e4b0d6649770a010"}, {"code": "(fn [a b] (into (apply disj a b) (apply disj b a)))", "problem": 88, "user": "4f0f01c0535d0136e6c22329"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4eb9353f535dfed6da9c6d4e"}, {"code": "(fn sym-diff [a b]\n  (into  #{} (concat (filter #(not (contains? b %)) a) (filter #(not (contains? a %)) b) )))", "problem": 88, "user": "4f04d312535dcb61093f6be7"}, {"code": "(fn [s1 s2]\n  (let [s1-and-s2 (clojure.set/intersection s1 s2)]\n    (apply disj (clojure.set/union s1 s2) s1-and-s2)))", "problem": 88, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [s1 s2]\n    (set (remove (set (filter s1 s2)) (into s1 s2))))", "problem": 88, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "(fn [set1 set2] (clojure.set/union \n  (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))", "problem": 88, "user": "4f2aff4de4b0d6649770a044"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [x y] (reduce conj (apply disj x y) (apply disj y x)))", "problem": 88, "user": "4f31ad57e4b0d6649770a089"}, {"code": "#(set (into (remove % %2) (remove %2 %)))", "problem": 88, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "(fn [c1 c2]\n  (set\n    (concat\n      (for [x c1 :when (not (contains? c2 x))] x)\n      (for [x c2 :when (not (contains? c1 x))] x))))", "problem": 88, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4ef48422535dced4c769f236"}, {"code": "(fn [s1 s2]\n          (set (concat \n                (filter (complement s2) s1)\n                (filter (complement s1) s2))))", "problem": 88, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "#(set (into (filter (complement %2) %) (filter (complement %) %2)))", "problem": 88, "user": "4f3cc2fbe4b0e243712b1f55"}, {"code": "(fn [a b]\n  (let [a1 (clojure.set/difference a b)\n        b1 (clojure.set/difference b a)]\n    (clojure.set/union a1 b1)))", "problem": 88, "user": "4f36f5f2e4b0e243712b1ece"}, {"code": "(fn [s1 s2]\n  (set (filter #(not (and (contains? s1 %) (contains? s2 %)))\n    (concat s1 s2))))", "problem": 88, "user": "4f038499535dcb61093f6b09"}, {"code": "(fn [s1 s2]\n  (set (into (filter (complement s1) s2) (filter (complement s2) s1))))", "problem": 88, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn [s1 s2]\n(clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn [a b]\n  ((comp set concat)\n        (remove a b)\n        (remove b a)))", "problem": 88, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "(fn [a b]\n  (let [in-a-not-b (filter (complement b) a)\n        in-b-not-a (filter (complement a) b)]\n    (set (concat in-a-not-b in-b-not-a))))", "problem": 88, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn [seta setb]\r\n  (clojure.set/difference (clojure.set/union  seta  setb) (clojure.set/intersection seta setb)))", "problem": 88, "user": "4f0da4e4535d0136e6c22319"}, {"code": "#(set (filter (fn [e] (not (and (contains? % e)\n                                (contains? %2 e))))\n              (concat (seq %) (seq %2))))", "problem": 88, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [x y]\n  (let [setdiff (fn [s t] (for [e1 s :when (not (contains? t e1))] e1))]\n    (into #{} (concat (setdiff x y) (setdiff y x)))))", "problem": 88, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "#(letfn [(set-dif [x y]\r\n           (letfn [(worker [x y s]\r\n                     (if (empty? x)\r\n                       s\r\n                       (recur (rest x) y (if (get y (first x)) s (conj s (first x))))))]\r\n             (worker x y #{})))\r\n          (set-union [x y]\r\n            (if (empty? x)\r\n              y\r\n              (recur (rest x) (conj y (first x)))))]\r\n   (set-union (set-dif %1 %2) (set-dif %2 %1)))", "problem": 88, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "reduce (fn [s2 el] ((if (s2 el) disj conj) s2 el))", "problem": 88, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn [s1 s2]\n  (set\n    (filter\n      (fn [e] (not (and (s1 e) (s2 e))))\n      (set (concat s1 s2)))))", "problem": 88, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn [x y]\n  (clojure.set/union\n   (clojure.set/difference x (clojure.set/intersection x y))\n   (clojure.set/difference y (clojure.set/intersection x y))\n   ))", "problem": 88, "user": "4f2582bae4b0d66497709ff6"}, {"code": "(fn [s1 s2] \n  (let [d1 (clojure.set/difference s1 s2)\n        d2 (clojure.set/difference s2 s1)]\n    (clojure.set/union d1 d2)))", "problem": 88, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4f141dee535d64f603146434"}, {"code": "(fn [left right] (clojure.set/union (clojure.set/difference left right) (clojure.set/difference right left)))", "problem": 88, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn sym-diff\r\n  [s1 s2]\r\n  (set (concat (filter #(not (contains? s2 %)) s1) (filter #(not (contains? s1 %)) s2))))", "problem": 88, "user": "4f17ab99535d64f603146457"}, {"code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "problem": 88, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn [s1 s2]\n  (loop [in s1 out (set (concat s1 s2))]\n    (if-not in\n      out\n      (recur (next in) (disj out (s2 (first in)))))))", "problem": 88, "user": "4f3c772de4b0e243712b1f4c"}, {"code": "(fn [a b]\n  (set (concat (filter #(not (b %)) a)\n               (filter #(not (a %)) b))))", "problem": 88, "user": "4eb66737535d7eef3080736b"}, {"code": "(fn symm-diff [a b]\n  (clojure.set/difference\n    (clojure.set/union a b)\n    (clojure.set/intersection a b)))", "problem": 88, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "#(set (concat (remove %2 %1) (remove %1 %2)))", "problem": 88, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn [x y]\n       (loop [diff #{}\n        union (concat x y)]\n\t (if (empty? union)\n\t   diff\n\t   (if (contains? (set (rest union)) (first union))\n\t     (recur diff (filter #(not (= (first union) %)) union))\n\t     (recur (conj diff (first union)) (rest union))))))", "problem": 88, "user": "4eae2f9e535d7eef30807324"}, {"code": "(fn difference [s1 s2]\n  (let [members (distinct (concat s1 s2))]\n    (loop [m_ members acc []]\n      (cond\n        (empty? m_) (set acc)\n        (not= (s1 (first m_)) (s2 (first m_))) \n        (recur (rest m_) (conj acc (first m_)))\n        :else (recur (rest m_) acc)))))", "problem": 88, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn [c1 c2]\n    (set (filter (fn [v1]\n               (or\n                (and (contains? c1 v1) (not (contains? c2 v1)))\n                (and (contains? c2 v1) (not (contains? c1 v1)))))\n             (concat c1 c2))))", "problem": 88, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn sym-diff [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "problem": 88, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn f88 [s1 s2]\n    (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "4f4d0a52e4b03ad3f0c10c9d"}, {"code": "#(clojure.set/union\n  (clojure.set/difference % %2)\n  (clojure.set/difference %2 %))", "problem": 88, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "#(clojure.set/difference \n  (clojure.set/union %1 %2) \n  (clojure.set/intersection %1 %2))", "problem": 88, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn [a b]\n  (clojure.set/difference \n    (clojure.set/union a b) \n    (clojure.set/intersection a b)))", "problem": 88, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn [a b] (set (filter #(not (and (contains? a %) (contains? b %))) (clojure.set/union a b))))", "problem": 88, "user": "4ed1f84f535d44c135fd68d3"}, {"code": "#(into (clojure.set/difference % %2)\r\n       (clojure.set/difference %2 %))", "problem": 88, "user": "4e50c894535dc968683fc4ee"}, {"code": "(fn symDiff [a b]\n  (letfn [(f[x y]\n            (filter  #(nil? (x %)) y))]\n    (set (concat (f a b) (f b a)))))", "problem": 88, "user": "4e6cf521535de274dd8d818b"}, {"code": "(fn f[a b]\n  (set(filter #(not(and (a %) (b %))) (concat a b))))", "problem": 88, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "#(set (into (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "4f047177535dcb61093f6bc6"}, {"code": "#(clojure.set/difference \n   (clojure.set/union %1 %2)\n   (clojure.set/intersection %1 %2))", "problem": 88, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "#(clojure.set/union \n  (clojure.set/difference %1 %2) \n  (clojure.set/difference %2 %1))", "problem": 88, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "#(into (clojure.set/difference % %2)\n       (clojure.set/difference %2 %))", "problem": 88, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "(fn [s t]\n  (letfn [\n    (minus [a b]\n      (reduce disj a b))]\n    (set (concat (minus s t) (minus t s)))))", "problem": 88, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn [a b]\n  (set (filter \n    (fn [e]\n      (not\n        (and \n          (contains? a e)\n          (contains? b e)))) \n    (concat a b))))", "problem": 88, "user": "4eecc3a0535d93acb0a668b3"}, {"code": "#(into (set (remove % %2)) (remove %2 %))", "problem": 88, "user": "4e5229dc535d302ef430da6f"}, {"code": "(fn [s1 s2] (->> (concat s1 s2)\n                 (group-by identity)\n                 (vals)\n                 (mapcat #(if (= (count %) 1) %))\n                 set))", "problem": 88, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn sym-diff [a b] \n  (clojure.set/difference \n    (clojure.set/union a b)\n    (clojure.set/intersection a b)))", "problem": 88, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn [s1 s2]\n  (clojure.set/union\n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)))", "problem": 88, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4efd8b67535de96065cf5085"}, {"code": "(fn [s1 s2]\n  (set (remove #(and (contains? s1 %) (contains? s2 %)) (into s1 s2))))", "problem": 88, "user": "4f2893d0e4b0d6649770a019"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4f5eda39e4b0030a34fb2b56"}, {"code": "#(let [coll (frequencies (lazy-cat %1 %2))] (set (keys \n  (filter (fn [n] (= (second n) 1)) coll))))", "problem": 88, "user": "4e8ad1d2535d65386fec2110"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "problem": 88, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn sd [s z]\n  (letfn [(difference [x y] \n            (set (for [v x :when (not (y v))] \n                   v)))]\n    (into \n      (difference s z)\n      (difference z s))))", "problem": 88, "user": "4dc7e7a5535d8a4b2fd74290"}, {"code": "#(set (remove (set (filter % %2)) (into % %2)))", "problem": 88, "user": "4e6a5a32535d8ccf87e9fed0"}, {"code": "(fn [coll1 coll2] (set (remove (set (filter coll1 coll2)) (into coll1 coll2))))", "problem": 88, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4dd88803535d2dad7130b5d9"}, {"code": "(fn [a b]\n  (let [elems (concat a b)]\n    (apply hash-set (remove #(and (a %) (b %)) elems))))", "problem": 88, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "4f4ff5a8e4b03ad3f0c10cf3"}, {"code": "(fn [s1 s2]\n   (set (concat \n    (filter #(not (get s2 % false)) s1)\n    (filter #(not (get s1 % false)) s2))))", "problem": 88, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "(fn [colla collb]\n  (loop [colla colla collb collb acc #{}]\n    (if (empty? colla)\n      (into acc collb)\n      (if (contains? collb (first colla))\n        (recur (rest colla) (disj collb (first colla)) acc)\n        (recur (rest colla) collb (conj acc (first colla)))))))", "problem": 88, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn [s1 s2]\n  (let [com (clojure.set/intersection s1 s2)]\n    (clojure.set/union (clojure.set/difference s1 com) (clojure.set/difference s2 com))\n    )\n  )", "problem": 88, "user": "4f63777be4b0defedf855fe4"}, {"code": "#(apply disj (set (concat %1 %2)) (filter %1 %2))", "problem": 88, "user": "4db13ff51254ad5b4805fa68"}, {"code": "(fn [a b]\n  (set (concat (apply disj a b) (apply disj b a))))", "problem": 88, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn [s1 s2]\n  (let [acc (reduce #(if (contains? s2 %2) %1 (conj %1 %2)) #{} s1)]\n    (reduce #(if (contains? s1 %2) %1 (conj %1 %2)) acc s2)))", "problem": 88, "user": "4e22b78b535d04ed9115e81e"}, {"code": "#(into (set (remove %2 %)) (remove % %2))", "problem": 88, "user": "4ecbb249535df97575fdabdf"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2)(clojure.set/difference %2 %1))", "problem": 88, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "problem": 88, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "#(reduce \n  (fn [a x] ((if (nil? (a x)) conj disj) a x)) \n  #{} \n  (concat % %2))", "problem": 88, "user": "4eccb190535d23f0362276fe"}, {"code": "#(clojure.set/difference \n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "problem": 88, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn [a b]\n  (set (concat\n    (mapcat #(when-not (b %) [%]) a)\n    (mapcat #(when-not (a %) [%]) b))))", "problem": 88, "user": "4f504739e4b03ad3f0c10d00"}, {"code": "#(apply disj\n   (into % %2)\n   (keep % %2))", "problem": 88, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "#( clojure.set/difference (into % %2) (clojure.set/intersection % %2) )", "problem": 88, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4eb298c1535d7eef3080734b"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n         (clojure.set/difference s2 s1)))", "problem": 88, "user": "4e568873535d8a8b8723a283"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "4f12ab23535d64f603146429"}, {"code": "(fn [set1 set2]\n  (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))", "problem": 88, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn [a b]\n    (set (concat (apply disj a b) (apply disj b a))))", "problem": 88, "user": "4f39f902e4b0e243712b1efe"}, {"code": "(fn diff [s1 s2]\n    (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn [a b] (into #{} (concat (filter #(not (contains? b %)) a) (filter #(not (contains? a %)) b))))", "problem": 88, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "(fn [s1 s2] (clojure.set/union\n  (clojure.set/difference s1 s2)\n  (clojure.set/difference s2 s1)))", "problem": 88, "user": "4f7d91e6e4b06e829148e1c3"}, {"code": "(fn[s1 s2] \n  (reduce\n    (fn[s x]\n      (if (contains? s x)\n          (disj s x)\n          (conj s x)\n      )     \n    )s1 s2)\n)", "problem": 88, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn [s1 s2]\n  (let [l (fn [x y] (for [e x :when (not (contains? y e))] e))]\n  (set (concat \n    (l s1 s2)\n    (l s2 s1)))))", "problem": 88, "user": "4de18de7535d08e6dec9fde8"}, {"code": "(fn sym-diff [s1 s2]\n  (clojure.set/union\n    (set (remove #(s2 %) s1)) \n    (set (remove #(s1 %) s2))))", "problem": 88, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn [a b] (into #{} (concat (remove b a) (remove a b))))", "problem": 88, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn diff [one two]\r\n     (clojure.set/union \r\n       (clojure.set/difference one two)\r\n       (clojure.set/difference two one)))", "problem": 88, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn [s1 s2]\n  (set\n    (for \n      [x (concat s1 s2)\n      :when (not (and (contains? s1 x) (contains? s2 x)))\n      ]\n      x\n    )\n  )\n)", "problem": 88, "user": "4f84400de4b033992c121c2e"}, {"code": "#(set (concat (remove %2 %1) (remove %1 %2)))", "problem": 88, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "#(set (remove (comp %1 %2) (concat %1 %2)))", "problem": 88, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn [s1 s2]\n  (set (keep (fn [i]\n    (when (and (or (not (s1 i)) (not (s2 i))\n          ) (not (and (s1 i) (s2 i))) ) i)\n  )  (concat s1 s2)))\n)", "problem": 88, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn [a b]\n  (let [xor (fn [x y] (or (and x (not y)) (and y (not x))))]\n    (set (filter #(xor (a %) (b %)) (into a b)))\n  )\n)", "problem": 88, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn [s1 s2]\n  (let [i (complement (set (filter s1 s2)))]\n    (set (concat (filter i s1) (filter i s2)))\n  )\n)", "problem": 88, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "#(set (into (filter (complement %) %2) (filter (complement %2) %)))", "problem": 88, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn [set-a set-b]\n  (let [a-not-b (clojure.set/difference set-a set-b)\n        b-not-a (clojure.set/difference set-b set-a)]\n    (clojure.set/union a-not-b b-not-a)))", "problem": 88, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn [a b]\n  (clojure.set/difference\n    (clojure.set/union a b)\n    (clojure.set/intersection a b)))", "problem": 88, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "(fn [s1 s2] \n  (let [notinboth #(not (and (s1 %) (s2 %)))\n        inone #(or (s1 %) (s2 %))]\n    (set (filter \n      #(and (notinboth %) (inone %) )\n      (concat s1 s2)))))", "problem": 88, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "(fn [set1 set2] \n  (let [sd (fn [a b] (remove a b))]\n    (set (concat (sd set1 set2) (sd set2 set1)))))", "problem": 88, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "#(loop [[e & tail] (seq %1)\n        s2 %2\n        res nil]\n   (if e\n     (if (get s2 e)\n       (recur tail (disj s2 e) res)\n       (recur tail s2 (conj res e)))\n     (set (concat res s2))))", "problem": 88, "user": "4dc21233535d020aff1edf92"}, {"code": "#(set (map first (filter (fn [[_ n]] (= 1 n)) (seq (frequencies (concat %1 %2))))))", "problem": 88, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [coll1 coll2]\n  (into (into #{} (clojure.set/difference coll1 coll2)) (clojure.set/difference coll2 coll1))\n  )", "problem": 88, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "(fn [xs ys]\n  (set (remove (clojure.set/intersection xs ys)\n               (clojure.set/union xs ys))))", "problem": 88, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn [a b]\n  (let\n    [intersection (keep a b)\n     union (into a b)]\n    (apply disj union intersection)))", "problem": 88, "user": "4f7f9665e4b033992c121bea"}, {"code": "#(clojure.set/union \n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "problem": 88, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "#(reduce disj (into % %2) (keep % %2))", "problem": 88, "user": "4df0524e535d08e6dec9fe17"}, {"code": "#(set `(~@(remove %2 %) ~@(remove % %2)))", "problem": 88, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn [set1 set2]\n  (clojure.set/difference\n    (clojure.set/union set1 set2)\n    (clojure.set/intersection set1 set2)))", "problem": 88, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(letfn [(d [[h & t] s]                                                                                                         \n          (if h                                                                                                                \n            (if (s h)                                                                                                          \n              (d t s)                                                                                                          \n              (cons h (d t s)))                                                                                                \n            ()))                                                                                                               \n        (r [a b]                                                                                                               \n          (set (concat (d (seq a) b) (d (seq b) a))))]                                                                         \n  r)", "problem": 88, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn [a b]\n  (clojure.set/union\n    (clojure.set/difference a b)\n    (clojure.set/difference b a)))", "problem": 88, "user": "4fa2fa5ee4b081705acca186"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "(fn set-diff [sa sb]\r\n  (set\r\n    (concat\r\n      (filter (complement sb) sa)\r\n      (filter (complement sa) sb))))", "problem": 88, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "reduce #((if (% %2) disj conj) % %2)", "problem": 88, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn [s1 s2]\n (into #{}\n       (clojure.set/union\n        (filter (partial (comp not contains?) s1) s2)\n        (filter (partial (comp not contains?) s2) s1))))", "problem": 88, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn [s1 s2]\n  (letfn [(onetrue [b1 b2] (and (not= b1 b2) (or b1 b2)))]\n    (set (filter #(onetrue (s1 %) (s2 %)) (concat s1 s2)))))", "problem": 88, "user": "4dac39a28cc9d6edb8beb0b3"}, {"code": "(fn [x y]\n  (set (map first (get (group-by val (frequencies (concat x y))) 1))))", "problem": 88, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "#(into #{} (remove (fn [x] (and (%1 x) (%2 x))) (into %1 %2)))", "problem": 88, "user": "4fa6d532e4b081705acca1be"}, {"code": "#(set (concat (filter (comp not %1) %2)\n              (filter (comp not %2) %1)))", "problem": 88, "user": "4e39d763535deb9a81d77f46"}, {"code": "(fn [r l] \n  (set (concat\n    (clojure.set/difference r l) (clojure.set/difference l r))))", "problem": 88, "user": "4dd579b5535dae65d5c462ea"}, {"code": "#(into #{} (filter (comp not (into #{} (filter (comp not nil?) (map % %2)))) (into % %2)))", "problem": 88, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "(partial reduce (fn [A b]\n  ((if (A b) disj conj) A b)))", "problem": 88, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn [a b]\n    (clojure.set/union\n      (clojure.set/difference a b)\n      (clojure.set/difference b a)))", "problem": 88, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn [s1 s2]\n  (into #{}\n        (filter \n          #(or (not (s2 %)) (not (s1 %)))\n          (concat s1 s2))))", "problem": 88, "user": "4fa5406fe4b081705acca1ac"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4fa30027e4b081705acca187"}, {"code": "(fn symDif [a b] (clojure.set/union (clojure.set/difference a b) \n(clojure.set/difference b a)))", "problem": 88, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "(fn [& colls]\r\n  (reduce\r\n    (fn [r coll]\r\n      (reduce #(if (some %1 [%2]) (disj %1 %2) (conj %1 %2)) r coll)) #{} colls))", "problem": 88, "user": "4facff22e4b081705acca230"}, {"code": "(fn [a b]\n  (clojure.set/union\n    (clojure.set/difference a b)\n    (clojure.set/difference b a)))", "problem": 88, "user": "4fae258de4b081705acca246"}, {"code": "(fn sym-diff [a b]\n  (clojure.set/union \n    (clojure.set/difference a b)\n    (clojure.set/difference b a)))", "problem": 88, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4fad33e8e4b081705acca236"}, {"code": "(fn [a b]\n     (set (filter #(or (and (a %) (not (b %)))\n                       (and (not (a %)) (b %)))\n\t\t\t(concat a b))))", "problem": 88, "user": "4f301d02e4b0d6649770a072"}, {"code": "#(into (apply disj % %2) (apply disj %2 %))", "problem": 88, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "(fn [a b] \n  (set (map key (filter #(= 1 (val %)) \n                        (frequencies (concat a b))))))", "problem": 88, "user": "4fadbc3fe4b081705acca23f"}, {"code": "(fn [a b] (set (filter #(not (and (a %) (b %))) (into a b))))", "problem": 88, "user": "4fb2101ce4b081705acca284"}, {"code": "#(clojure.set/union\n  (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4f8386c5e4b033992c121c1d"}, {"code": "(fn [s1 s2] (into #{} (filter #(or (and (nil? (s2 %)) (not (nil? (s1 %)))) (and (nil? (s1 %)) (not (nil? (s2 %))))) (concat s1 s2))))", "problem": 88, "user": "4fb510b5e4b081705acca2b8"}, {"code": "(fn [xs ys] (set (concat (filter #(not (contains? xs %)) ys)\n                         (filter #(not (contains? ys %)) xs))))", "problem": 88, "user": "4fa6a491e4b081705acca1bc"}, {"code": "#(clojure.set/union (clojure.set/difference %2 %1) (clojure.set/difference %1 %2))", "problem": 88, "user": "4faec810e4b081705acca24e"}, {"code": "(fn [a, b]\n  (set (filter #(not (and (contains? a %1) (contains? b %1)))\n    (concat a b))))", "problem": 88, "user": "4fa67030e4b081705acca1b7"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "(fn [s1 s2]\n  (set\n    (filter\n      #(not= (s1 %) (s2 %))\n      (clojure.set/union s1 s2))))", "problem": 88, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "#(let [u (set (concat % %2)) \n       i (set (filter % %2))]\n      (set (remove i u)))", "problem": 88, "user": "4e83bb61535db62dc21a62dd"}, {"code": "(fn [x y] (set (concat (filter #(not (x %)) y) (filter #(not (y %)) x))))", "problem": 88, "user": "4fb3b865e4b081705acca2a2"}, {"code": "(fn [a b]                                                                                                 \n  (set\n    (concat\n      (filter #(not(contains? b %)) a)\n      (filter #(not(contains? a %)) b))))", "problem": 88, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "(fn [x y]\r\n  (apply\r\n    disj \r\n    (set (concat x y))\r\n    (#(set (filter x y)))\r\n  )\r\n)", "problem": 88, "user": "4f82ed48e4b033992c121c0e"}, {"code": "(fn [a b] \n  (set\n  (filter #(not (and (contains? a %) (contains? b %)))\n  (clojure.set/union a b))))", "problem": 88, "user": "4fab31a8e4b081705acca215"}, {"code": "#(set(filter (fn[a](not (and (contains? % a) (contains? %2 a)))) (concat % %2)))", "problem": 88, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "#(clojure.set/difference\n  (clojure.set/union %1 %2) \n  (clojure.set/intersection %1 %2))", "problem": 88, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [xs ys] (let [zs (clojure.set/intersection xs ys)] (clojure.set/union (clojure.set/difference xs zs) (clojure.set/difference ys zs))))", "problem": 88, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4e86d3cf535dceadca46984c"}, {"code": "(fn [m n] (set (concat (remove #(some (partial = %) n) m)\n                       (remove #(some (partial = %) m) n))))", "problem": 88, "user": "4faac363e4b081705acca200"}, {"code": "(fn [a b]\n  (set (concat (apply disj a b) (apply disj b a))))", "problem": 88, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn [sa sb]\n  (set (concat\n    (filter #(not (contains? sb %)) sa)\n    (filter #(not (contains? sa %)) sb))))", "problem": 88, "user": "4fbe42b7e4b081705acca30f"}, {"code": "#(set (for[elem (set (concat %1 %2))\n              :when (or\n                     (and (contains? %1 elem) (not (contains? %2 elem)))\n                     (and (contains? %2 elem) (not (contains? %1 elem))))]\n           elem))", "problem": 88, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn [a b]\n  (->>\n    (clojure.set/union a b)\n    (filter #(not= (a %) (b %)))\n    set))", "problem": 88, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [a b]\n  (let [union (reduce conj a b)]\n    (reduce (fn [s e]\n       (if (and (contains? b e) (contains? a e))\n         s\n         (conj s e)))\n            #{}\n            union)\n))", "problem": 88, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "#(set(into(filter (comp not %) %2) (filter (comp not %2) %)))", "problem": 88, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn sym-diff [s1 s2]\n  (let [items (clojure.set/union s1 s2)]\n    (into #{} (remove (clojure.set/intersection s1 s2) items))))", "problem": 88, "user": "4faafccde4b081705acca209"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn [s1 s2]\n  (set (concat \n    (filter #(not (s2 %)) s1) \n    (filter #(not (s1 %)) s2))))", "problem": 88, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(fn symmetric-difference [A B]\n  (set (for [x (clojure.set/union A B)\n             :when (not (and (A x) (B x)))]\n         x)))", "problem": 88, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "#(clojure.set/difference\n  (clojure.set/union % %2)\n  (clojure.set/intersection % %2))", "problem": 88, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "(fn [set1 set2]\n  (loop [diff set1 s2 set2]\n    (let [e (first s2)]\n    (cond (empty? s2) diff\n      :else (recur (if (contains? diff e)\n                      (disj diff e)\n                      (conj diff e))\n              (rest s2))))))", "problem": 88, "user": "4fbd1ebbe4b081705acca2fe"}, {"code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "problem": 88, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "problem": 88, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn diff [s1 s2]\n  (set (if (empty? s1) s2\n    (if (s2 (first s1))\n        (diff (rest s1) (disj s2 (first s1)))\n        (cons (first s1) (diff (rest s1) s2))\n      )))\n  )", "problem": 88, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(fn [s1 s2] (apply disj (set (concat s1 s2)) (set (filter #(contains? s2 %) s1))))", "problem": 88, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn [s1 s2]\n  (set (concat\n    (filter (comp not (partial contains? s1)) s2)\n    (filter (comp not (partial contains? s2)) s1))))", "problem": 88, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1)\n)", "problem": 88, "user": "4fb4d4ede4b081705acca2b1"}, {"code": "#(letfn [(d [l r] \n  (filter (fn [e] (not (contains? r e))) l))] \n  (set (concat (d %1 %2) (d %2 %1))))", "problem": 88, "user": "4fbacdbae4b081705acca2e5"}, {"code": "(fn\r\n  [s1 s2]\r\n  (let [v1 (for [x s1 :when (not (s2 x))] x)\r\n        v2 (for [x s2 :when (not (s1 x))] x)]\r\n    (set (concat v1 v2))\r\n  )\r\n)", "problem": 88, "user": "4f18677d535d64f603146459"}, {"code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "4fcebce4e4b03432b189f404"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4f826548e4b033992c121c08"}, {"code": "(fn [a b]  (set (concat \n            (filter \n              #(not (contains? a %)) b)\n            (filter \n              #(not (contains? b %)) a)\n           ))\n)", "problem": 88, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "#(into ((comp set remove) %1 %2) (remove %2 %1))", "problem": 88, "user": "4fabbb97e4b081705acca21d"}, {"code": "#(set (into (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "problem": 88, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4fb12b35e4b081705acca275"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn [x y]\n  (let [union (set (filter x y))]\n    (set (concat (remove union x) (remove union y)))))", "problem": 88, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [x y]\r\n  (reduce #(if(% %2)\r\n              (disj % %2)\r\n              (conj % %2)) x y))", "problem": 88, "user": "4fb23582e4b081705acca28a"}, {"code": "#(into (clojure.set/difference % %2)\n       (clojure.set/difference %2 %))", "problem": 88, "user": "4ead2841535d7eef3080731e"}, {"code": "(fn [S1 S2]\n  (clojure.set/union\n    (clojure.set/difference S1 S2)\n    (clojure.set/difference S2 S1)))", "problem": 88, "user": "4fda016ae4b05e33b9224f42"}, {"code": "(fn [a b] (set (concat (clojure.set/difference a b) (clojure.set/difference b a))))", "problem": 88, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn [xs ys]\n  (set (concat\n    (remove #(contains? ys %) xs)\n    (remove #(contains? xs %) ys))))", "problem": 88, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "(fn [a b] (clojure.set/union \n  (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "#(clojure.set/difference (clojure.set/union % %2)\r\n(clojure.set/intersection % %2))", "problem": 88, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn [x y]\n  (set (concat (for [a x :when (= (contains? y a) false)] a)\n                    (for [b y :when (= (contains? x b) false)] b))))", "problem": 88, "user": "4fadbb17e4b081705acca23e"}, {"code": "reduce #(if (contains? %1 %2) (disj %1 %2) (conj %1 %2))", "problem": 88, "user": "4ef89fb0535dced4c769f260"}, {"code": "(fn [a b]\n  (into\n    (set (filter #(not (a %)) b))\n    (set (filter #(not (b %)) a))))", "problem": 88, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn symmetric-difference [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "problem": 88, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "#(into (apply disj % %2) (apply disj %2 %))", "problem": 88, "user": "4db016af838c48654951d9b9"}, {"code": "(fn symmetric-difference [s1 s2]\r\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "#(set (concat\n  (for [x %1 :when (not (contains? %2 x))] x)\n  (for [y %2 :when (not (contains? %1 y))] y)))", "problem": 88, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "#(clojure.set/difference \n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "problem": 88, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn sd [s1 s2]\r\n  (into #{} (concat (filter #(not (s1 %)) s2)\r\n                    (filter #(not (s2 %)) s1))))", "problem": 88, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn [a b]\n  (into #{}\n    (concat (remove a b)\n            (remove b a))))", "problem": 88, "user": "4fccb31be4b0ee37620e1868"}, {"code": "#(clojure.set/union \n  (clojure.set/difference %1 %2) \n  (clojure.set/difference %2 %1))", "problem": 88, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn [a b]\n  (clojure.set/union\n    (clojure.set/difference a b)\n    (clojure.set/difference b a)))", "problem": 88, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn [s1 s2] (let [c (into #{} (filter s1 s2))] (into #{} (remove c (concat s1 s2)))))", "problem": 88, "user": "4fc52d79e4b081705acca386"}, {"code": "#(apply merge (reduce disj % %2) (reduce disj %2 %))", "problem": 88, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "(fn my-symmdiff [set1 set2]\n          (set (concat (filter #(not (get set1 %)) set2) (filter #(not (get set2 %)) set1))))", "problem": 88, "user": "4fb591aee4b081705acca2c0"}, {"code": "#(into #{} (into (filter (complement %) %2) (filter (complement %2) %)))", "problem": 88, "user": "4fd2789ee4b04c3a95aa0422"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4feada56e4b0140c20fb9c11"}, {"code": "#(into (apply disj %1 %2) (apply disj %2 %1))", "problem": 88, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "#(clojure.set/union\n    (clojure.set/difference %1 %2)\n    (clojure.set/difference %2 %1))", "problem": 88, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn sd [set1 set2]\n  (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2)))", "problem": 88, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn [x y] (clojure.set/union (clojure.set/difference y x) (clojure.set/difference x y)))", "problem": 88, "user": "4fe1597fe4b0dd6cd5ce3633"}, {"code": "#(set (for [i (clojure.set/union %1 %2)\n       :when (not (and (%1 i) (%2 i)))]\n         i))", "problem": 88, "user": "4fde492be4b05e33b9224f8a"}, {"code": "#(into (set (remove % %2)) (remove %2 %))", "problem": 88, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn [a b]\n  (into (apply disj a (into () b))\n        (apply disj b (into () a))))", "problem": 88, "user": "4ff304f4e4b0678c553fc343"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "#(clojure.set/difference \n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "problem": 88, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn [a b]\n  (clojure.set/union\n    (clojure.set/difference a b)\n    (clojure.set/difference b a)))", "problem": 88, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "(fn [x y](clojure.set/union (clojure.set/difference x y)(clojure.set/difference y x)))", "problem": 88, "user": "4f32135ae4b0d6649770a08e"}, {"code": "(fn sym-diff [a b]\n  (let [ab (set (concat a b))]\n       (set (filter #(not (and (a %) (b %))) ab))))", "problem": 88, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn [a b]\n  (let [u (into a b)]\n    (loop [x (seq u)\n           acc #{}]\n      (if (nil? x)\n        acc\n        (let [h (first x)]\n          (if (and (contains? a h) (contains? b h))\n            (recur (next x) acc)\n            (recur (next x) (conj acc h))))))))", "problem": 88, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn symdiff [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn [a b]\r\n   (set (map #(first %) (filter #(= (second %) 1) (frequencies (concat a b))))))", "problem": 88, "user": "4ff07688e4b0678c553fc324"}, {"code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b )))", "problem": 88, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [a b] (let [s (clojure.set/intersection a b)]\n  (clojure.set/union (clojure.set/difference a s) (clojure.set/difference b s))))", "problem": 88, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "(fn [s1 s2] (letfn [(diff [a b] (filter #(not (contains? a %)) b))]\n              (into #{} (concat (diff s1 s2) (diff s2 s1)))\n              )\n  )", "problem": 88, "user": "4faa6184e4b081705acca1f1"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4fea2de5e4b0140c20fb9bfe"}, {"code": "#(reduce conj (apply disj %1 %2) (apply disj %2 %1))", "problem": 88, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn [s1 s2] (into #{} (apply concat ((juxt #(filter (complement s2) s1) #(filter (complement s1) s2))))))", "problem": 88, "user": "4fc9a977e4b0ee37620e1847"}, {"code": "#(clojure.set/difference\r\n           (clojure.set/union % %2)\r\n           (clojure.set/intersection % %2))", "problem": 88, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "(fn set-diff [a b]                                                      \n            (let [common (clojure.set/intersection a b)                         \n                 a-sub (clojure.set/difference a common)                        \n                 b-sub (clojure.set/difference b common) ]                      \n                 (clojure.set/union a-sub b-sub)))", "problem": 88, "user": "4eed6b32535d93acb0a668bc"}, {"code": "(fn [s1 s2]\n  (clojure.set/union\n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)))", "problem": 88, "user": "4ff9cfd6e4b0678c553fc3af"}, {"code": "#(into #{} (remove (into #{} (map % %2)) (into % %2)))", "problem": 88, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn [s1 s2]\n(clojure.set/union \n(clojure.set/difference s1 s2)\n(clojure.set/difference s2 s1)))", "problem": 88, "user": "4e95c771535dbda64a6f6b39"}, {"code": "#(set `(~@(% %2 %3) ~@(% %3 %2))) remove", "problem": 88, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "500159b3e4b0678c553fc419"}, {"code": "#(cond \n  (empty? %1) %2\n  (empty? %2) %1\n  :else (apply conj (apply disj %1 %2) (apply disj %2 %1)))", "problem": 88, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn [seta setb] (into #{} (concat (filter #(not (contains? setb %)) seta) (filter #(not (contains? seta %)) setb))))", "problem": 88, "user": "5003bb77e4b0678c553fc442"}, {"code": "#(set (concat\n  (filter (complement %1) %2)\n  (filter (complement %2) %1)))", "problem": 88, "user": "500933a6e4b046cdb195e074"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn [a b]\n  (set (into\n    (filter (complement a) b)\n    (filter (complement b) a))))", "problem": 88, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "(fn [first second]\n  (set (concat (filter (complement first) second)\n               (filter (complement second) first))))", "problem": 88, "user": "4ee75ec2535d93acb0a66867"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "#(clojure.set/union (apply disj % %2) (apply disj %2 %))", "problem": 88, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn [a b]\n  (set (filter\n   (fn [x] (let [ca (contains? a x) cb (contains? b x)]\n             (and (not (and ca cb)) (or ca cb))))\n   (clojure.set/union a b))))", "problem": 88, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn symmetric-set [a b]\n  (reduce conj (set (filter #(not (contains? a %)) b))\n          (filter #(not (contains? b %)) a)))", "problem": 88, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn [a b] (into #{} (filter #(and (or (contains? a %)\n  \t\t\t\t\t     (contains? b %))\n\t\t\t\t\t\t (not \n\t\t\t\t\t\t \t(and (contains? a %) \n\t\t\t\t\t\t \t\t (contains? b %)))) (concat a b))))", "problem": 88, "user": "4fd8544be4b0dab7d829f390"}, {"code": "(fn [set1 set2]\n  (clojure.set/difference\n    (clojure.set/union set1 set2)\n    (clojure.set/intersection set1 set2)))", "problem": 88, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "50127fbfe4b030d97e4db70f"}, {"code": "#((comp set concat) (remove % %2) (remove %2 %))", "problem": 88, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(fn symdef [a b]\n    (clojure.set/difference\n     (clojure.set/union a b)\n     (clojure.set/intersection a b)))", "problem": 88, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn [a b]\r\n    (into  \r\n     (apply disj a b)\r\n     (apply disj b a))\r\n    )", "problem": 88, "user": "4febb4dae4b0681fd128dc98"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "#(into (set (remove %2 %)) (remove % %2))", "problem": 88, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "(fn[s t]\n  (let [u (into s t)]\n    (loop [u u d #{}]\n      (if (empty? u)\n        d\n        (let [e (first u)]\n          (recur (rest u) (if (and (contains? s e) (contains? t e)) d (conj d e))))))))", "problem": 88, "user": "4ec64981535d6d7199dd36c7"}, {"code": "(fn __ [a b]\n  (let [in? (fn [x coll] (some #(= % x) coll))\n        diff (fn [x y] (filter #(not (in? % x)) y))]\n       (into #{} (concat (diff a b) (diff b a)))))", "problem": 88, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn symdiff\n  [a b]\n  (apply hash-set (concat (filter #(not (a %)) b)\n                          (filter #(not (b %)) a))))", "problem": 88, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "(fn [x y]\n  (set (concat\n    (filter #(not (x %)) y)\n    (filter #(not (y %)) x))))", "problem": 88, "user": "5012aefce4b0c8732600222a"}, {"code": "#(reduce conj (reduce disj % %2) (reduce disj %2 %))", "problem": 88, "user": "4f71ba6ee4b07046d9f4f012"}, {"code": "#(clojure.set/union \n   (clojure.set/difference %1 %2)\n   (clojure.set/difference %2 %1))", "problem": 88, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "4ff76effe4b0678c553fc390"}, {"code": "(fn[x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "problem": 88, "user": "4ffd92e7e4b0678c553fc3e3"}, {"code": "(fn [s1 s2]\n  (set (filter #(not (and (s1 %) (s2 %))) (concat s1 s2))))", "problem": 88, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "(fn [s1 s2] (clojure.set/difference \n  (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn [x y] (reduce #(if (or (= nil (get x %2)) (= nil (get y %2))) (conj %1 %2) %1) #{} (reduce #(conj %1 %2) x y)))", "problem": 88, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "(fn [c1 c2] (set (clojure.set/union (remove c1 c2) (remove c2 c1))))", "problem": 88, "user": "500e91aae4b00fff93030f99"}, {"code": "(fn [x y]\n  (set \n    (filter \n      (fn [val]\n        (and (or (contains? x val)\n                 (contains? y val))\n             (not (and (contains? x val)\n                       (contains? y val)))))\n      (clojure.set/union x y))))", "problem": 88, "user": "5014754de4b094324338f8e5"}, {"code": "(fn [a b]\n  (clojure.set/union \n    (clojure.set/difference a b)\n    (clojure.set/difference b a)))", "problem": 88, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "(fn [s1 s2]\n  (let [union (set (filter (comp not nil?) (map s1 s2)))\n        both  (concat s1 s2)]\n    (set (filter (comp not union) both))))", "problem": 88, "user": "50166470e4b052339a490e76"}, {"code": "(fn [s1 s2]\n  (set (concat (clojure.set/difference s1 s2)\n  (clojure.set/difference s2 s1))))", "problem": 88, "user": "501688f7e4b052339a490e7a"}, {"code": "(fn [a b]\n  (if (empty? b)\n    a\n    (set (filter #(or (not (contains? a %))\n    \t                (not (contains? b %)))\n        \t       (apply conj a b)))))", "problem": 88, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "#(or (and (= %2 #{}) %1)\n     (and (= %1 #{}) %2) \n     (set (reduce concat (for [x %1 \n            y %2 \n            :when (not (or (contains? %2 x) \n                       (contains? %1 y) ))\n           ] [x y] ))))", "problem": 88, "user": "5017eface4b02f523d7cc5e7"}, {"code": "(fn b [m mm] (loop [n m nn mm e (into m mm) ee e] (if (empty? ee) e (if (and (contains? n (first ee)) (contains? nn (first ee))) (recur n nn (disj e (first ee)) (next ee)) (recur n nn e (next ee))))))", "problem": 88, "user": "4fe97adde4b0547ebccb245e"}, {"code": "#(clojure.set/difference\n    (clojure.set/union % %2)\n    (clojure.set/intersection % %2))", "problem": 88, "user": "501284d9e4b030d97e4db710"}, {"code": "(fn [s1 s2]\r\n  (clojure.set/union \r\n    (clojure.set/difference s1 s2) \r\n    (clojure.set/difference s2 s1)))", "problem": 88, "user": "50045388e4b0678c553fc44e"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50182f53e4b02f523d7cc5ec"}, {"code": "(fn __ [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "problem": 88, "user": "4fa719c0e4b081705acca1bf"}, {"code": "(fn [a b] (cond (empty? b) a :else (apply disj (apply conj a b) (filter a b))))", "problem": 88, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "(fn symdiff [a b]\n  (set (concat (filter #(not (b %)) a) (filter #(not (a %)) b))))", "problem": 88, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn [s1 s2]\n  (set\n    (filter #(not (and (contains? s1 %) (contains? s2 %))) (concat s1 s2))\n  )\n)", "problem": 88, "user": "4fcf5292e4b03432b189f40e"}, {"code": "#(clojure.set/difference \n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "problem": 88, "user": "501c1492e4b086d93747d180"}, {"code": "#(clojure.set/difference\n  (clojure.set/union % %2)\n  (clojure.set/intersection % %2))", "problem": 88, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "#(into (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn [sa sb]\r\n  (set\r\n    (concat\r\n      (filter (complement sb) sa)\r\n      (filter (complement sa) sb))))", "problem": 88, "user": "5028bce0e4b01614d1633ffb"}, {"code": "(fn [s1 s2]\n  (let [inBoth (clojure.set/intersection s1 s2)]\n    (clojure.set/union (clojure.set/difference s1 inBoth) (clojure.set/difference s2 inBoth)))\n)", "problem": 88, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn [l r]\n  (let [nin? (complement contains?)]\n    (into #{} (concat (filter #(nin? l %) r)\n                      (filter #(nin? r %) l)))))", "problem": 88, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "#(clojure.set/difference\n  (clojure.set/union % %2)\n  (clojure.set/intersection % %2))", "problem": 88, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn [s1 s2]\n  (reduce conj\n    (apply (partial disj s2) s1)\n    (apply (partial disj s1) s2)))", "problem": 88, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "#(clojure.set/difference \n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "problem": 88, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "(fn [s1 s2]\n  (letfn \n    [(diff [x y]\n      (reduce \n        #(if (not (x %2)) \n        (conj %1 %2) %1) #{} y))]\n    (into (diff s1 s2) (diff s2 s1))))", "problem": 88, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "#(set (into (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn [x y]\n  (clojure.set/difference (clojure.set/union x y)\n                          (clojure.set/intersection x y)))", "problem": 88, "user": "501dfd54e4b051153f3b5b80"}, {"code": "#(set (clojure.set/union (remove % %2) (remove %2 %)))", "problem": 88, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "#(let [s1-2 (apply disj %1 %2)\n       s2-1 (apply disj %2 %1)]\n  (if (empty? s2-1) s1-2 (apply conj s1-2 s2-1)))", "problem": 88, "user": "50052d38e4b0678c553fc45c"}, {"code": "#(if (empty? %2) %1\n  (apply disj (apply conj %1 %2) (filter %2 %1)))", "problem": 88, "user": "5030f16fe4b05b7df5a0b84b"}, {"code": "(fn [a b] \n  (set \n    (concat \n      (clojure.set/difference a b) \n      (clojure.set/difference b a))))", "problem": 88, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn [a b] (->> (concat a b) \n  (filter #(= 1 (count (filter nil? \n    [(a %) (b %)]))))\n  set))", "problem": 88, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [s1 s2] (into #{} (into (keep #(when (not (get s1 %)) %) s2) (keep #(when (not (get s2 %)) %) s1))))", "problem": 88, "user": "5032b398e4b00c0952a257eb"}, {"code": "(fn [s1 s2] \n  (set (filter \n    #(not (and (contains? s1 %) (contains? s2 %))) \n    (clojure.set/union s1 s2))))", "problem": 88, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "#(into #{} (filter (fn [x] (not= (%1 x) (%2 x)))  (into %1 %2 )))", "problem": 88, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn [a b]\r\n  (let [diff (fn [a b] (filter #(not (b %)) a))]\r\n    (set (concat (diff a b) (diff b a)))))", "problem": 88, "user": "4fb79872e4b081705acca2d2"}, {"code": "#(clojure.set/difference\n  (clojure.set/union % %2)\n  (clojure.set/intersection % %2))", "problem": 88, "user": "503917a0e4b088a6a14ca763"}, {"code": "(fn [a b] (set (concat (remove #(contains? a %) b) (remove #(contains? b %) a))))", "problem": 88, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "(fn [a b] (reduce #(disj %1 %2) (into a b) (remove nil? (map a b))))", "problem": 88, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn [s1 s2] (into #{} (filter #(not (and (contains? s1 %) (contains? s2 %))) (concat s1 s2))))", "problem": 88, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn [s1 s2]\n  (set (concat (apply (partial disj s1) s2)\n               (apply (partial disj s2) s1))))", "problem": 88, "user": "4e949d18535dbda64a6f6b15"}, {"code": "(fn sym-diff [x y]\n          (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "problem": 88, "user": "503b6995e4b07a1917cc34dd"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "5032b066e4b00c0952a257ea"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "50335235e4b0c6c1199c710b"}, {"code": "(fn [a b] \n  (clojure.set/select \n    #(not (and (contains? a %) (contains? b %))) (clojure.set/union a b)))", "problem": 88, "user": "502d387fe4b0d96a44ab202f"}, {"code": "#(clojure.set/union\r\n  (clojure.set/difference % %2)\r\n  (clojure.set/difference %2 %))", "problem": 88, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn [a b]\n  (clojure.set/difference \n    (clojure.set/union a b)\n    (clojure.set/intersection a b)))", "problem": 88, "user": "5012ec0ae4b0c87326002230"}, {"code": "#(into (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn [a b]\n  (loop [a (seq a) r #{} b b]\n    (if (empty? a)\n      (clojure.set/union r b)\n      (if (b (first a))\n        (recur (rest a) r (disj b (first a)))\n        (recur (rest a) (conj r (first a)) b)))))", "problem": 88, "user": "50435852e4b034ff00315d22"}, {"code": "(fn [x y]\n  (clojure.set/difference (clojure.set/union x y)\n                          (clojure.set/intersection x y)))", "problem": 88, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn symdiff [s1 s2]\n  (set (filter #(and (or (s1 %) (s2 %)) \n              (not (and (s1 %) (s2 %))))\n    (concat s1 s2))))", "problem": 88, "user": "4fb266a5e4b081705acca28c"}, {"code": "(fn [a b] (set (filter #(not= (contains? a %) (contains? b %)) (into a b))))", "problem": 88, "user": "50479524e4b0371827a27bc4"}, {"code": "#(let [d clojure.set/difference] (into  (d % %2) (d %2 %)))", "problem": 88, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "problem": 88, "user": "5046b003e4b011c5dfee7727"}, {"code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "4fb01e53e4b081705acca260"}, {"code": "(fn asdf [ x y ] (reduce conj (clojure.set/difference x y) (clojure.set/difference y x)))", "problem": 88, "user": "5012036ce4b0a040369c12f4"}, {"code": "(fn [s1 s2]\n   (set (concat (filter #(not (contains? s2 %)) s1)\n   (filter #(not (contains? s1 %)) s2))))", "problem": 88, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn [left right]\n   (let [a (filter #(not (contains? left %)) right)\n         b (filter #(not (contains? right %)) left)]\n     (apply hash-set (concat a b))))", "problem": 88, "user": "4f616892e4b0defedf855fbf"}, {"code": "(fn [xs ys]\n  (set (mapcat identity\n    (filter #(= 1 (count %)) (vals (group-by identity (concat xs ys)))))))", "problem": 88, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn [x y]\r\n  (set (remove\r\n    #(and (contains? x %) (contains? y %))\r\n    (into x y))))", "problem": 88, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn [s1 s2]\n  (set (concat (filter (complement s1) s2) (filter (complement s2) s1))))", "problem": 88, "user": "4e4ca885535dc968683fc4df"}, {"code": "#(set (for [i (clojure.set/union % %2) \n            :when (not (and (% i) (%2 i)))]\n        i))", "problem": 88, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "(fn [a b] (set (remove #(and (contains? a %) (contains? b %)) (into a b))))", "problem": 88, "user": "504e397ee4b0f6ff3350c485"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference\n    (clojure.set/union s1 s2)\n    (clojure.set/intersection s1 s2)))", "problem": 88, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn [s t] (set (into (remove #(s %) t) (remove #(t %) s))))", "problem": 88, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [A B]\n  (set (remove (set (filter A B)) (into A B))))", "problem": 88, "user": "4e6a6b83535d8ccf87e9fee0"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference\n    (clojure.set/union s1 s2)\n    (clojure.set/intersection s1 s2)))", "problem": 88, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "(fn [s1 s2]\n    (set\n      (filter #(not (nil? %))\n        (for [e (into s1 s2)]\n          (if (and (s1 e) (s2 e)) nil e)))))", "problem": 88, "user": "4ee77f15535d93acb0a66868"}, {"code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50431cbce4b034ff00315d1c"}, {"code": "(fn sym-diff\n  [setx sety]\n  (let [fltr (fn [coll] #(-> #{%} (some coll) nil?))\n        filtrx (filter (fltr sety) setx)\n        filtry (filter (fltr setx) sety)]\n    (set (concat filtrx filtry))))", "problem": 88, "user": "4edfb618535d10e5ff6f5343"}, {"code": "(fn [a b]\n    (into #{}\n      (concat\n        (filter #(not (contains? b %)) a)\n        (filter #(not (contains? a %)) b))))", "problem": 88, "user": "504f865ee4b0a02f9cffde90"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn [a b] (set (concat\n  (filter #(nil? (b %)) a) (filter #(nil? (a %)) b))))", "problem": 88, "user": "504d0116e4b022602c20b089"}, {"code": "(fn my-difference [x y]\r\n  (set (remove (set (filter x y)) (into x y))))", "problem": 88, "user": "50436470e4b034ff00315d23"}, {"code": "(fn [a b]\n   (clojure.set/union (clojure.set/difference  b a) (clojure.set/difference  a b))\n   )", "problem": 88, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn [a b] (set (filter #(not (and (contains? a %) (contains? b %)))  (into a b)  )))", "problem": 88, "user": "50463347e4b011c5dfee771e"}, {"code": "(fn [xs ys]\n  (let [f (loop [x xs acc #{}]\n    (if (empty? x) acc\n      (recur (rest x) (if (ys (first x)) acc (conj acc (first x))))))]\n    (loop [y ys acc f]\n      (if (empty? y) acc\n        (recur (rest y) (if (xs (first y)) acc (conj acc (first y))))))))", "problem": 88, "user": "5050b107e4b063148f524126"}, {"code": "#(set (concat (apply disj % %2)(apply disj %2 %)))", "problem": 88, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn [a b]\n (let [union (#(if (< (count %1) (count %2))\n                  (reduce conj %2 %1)\n                  (reduce conj %1 %2)) a b)]\n    (reduce (fn [result item]\n              (if (not (and (contains? a item) (contains? b item)))\n                (conj result item)\n                result)) #{} union)))", "problem": 88, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn [s1 s2]\n  (->> (merge-with + (frequencies s1) (frequencies s2))\n       (filter #(= 1 (last %)))\n       keys\n       set))", "problem": 88, "user": "504e04a4e4b078edc5f59397"}, {"code": "#(cond\r\n  (empty? %1) %2\r\n  (empty? %2) %1\r\n  :else (apply disj (apply conj %1 %2) (filter %1 %2)))", "problem": 88, "user": "4e8239d6535db62dc21a62c4"}, {"code": "(fn symmetric-difference [A B]\n  (clojure.set/union\n    (clojure.set/difference A B)\n    (clojure.set/difference B A)))", "problem": 88, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn [a b]\n  (clojure.set/difference\n    (clojure.set/union a b)\n(clojure.set/intersection a b)))", "problem": 88, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "(fn sd [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "problem": 88, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn symmetric-difference [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "4ea0c284535d7eef308072ad"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "4f045946535dcb61093f6bba"}, {"code": "(fn symdiff [x y]\n  (clojure.set/union\n   (clojure.set/difference y x)\n   (clojure.set/difference x y)))", "problem": 88, "user": "4efa3d4b535dced4c769f270"}, {"code": "(fn [col1 col2]\n  (set (concat\n  (filter #(not (col1 %)) col2)\n  (filter #(not (col2 %)) col1))))", "problem": 88, "user": "50435689e4b034ff00315d21"}, {"code": "#(clojure.set/difference (clojure.set/union        %1 %2)\n                         (clojure.set/intersection %1 %2))", "problem": 88, "user": "50586354e4b06522596eba78"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4e8a880b535d65386fec210d"}, {"code": "#(clojure.set/union \n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "problem": 88, "user": "5053de37e4b0b1b9d1860ea8"}, {"code": "(fn [a b]\n  (cond\n    (= a #{}) b\n    (= b #{}) a\n    :else (let [union (apply conj a b)]\n            (set (filter #(or \n                (and (contains? a %) (not (contains? b %)))\n                (and (not (contains? a %)) (contains? b %))) \n              union)))))", "problem": 88, "user": "505bd09fe4b032b709c81373"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "#(set (concat (clojure.set/difference %2 %1) (clojure.set/difference %1 %2)))", "problem": 88, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "(fn [s1 s2]\n    (set (filter #(not (and (s1 %) (s2 %))) (concat s1 s2)))\n    )", "problem": 88, "user": "50588ff1e4b06522596eba7e"}, {"code": "#(clojure.set/difference \n  (clojure.set/union % %2) \n  (clojure.set/intersection % %2))", "problem": 88, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "(fn diff [s1 s2]\n  (if (empty? s1)\n    s2\n    (let [e (first s1)]\n      (if (contains? s2 e)\n        (diff (disj s1 e) (disj s2 e))\n        (conj (diff (disj s1 e) s2) e)))))", "problem": 88, "user": "503e6047e4b06c4e0e1fa266"}, {"code": "(fn [s1 s2]\n  (let [union (into s1 s2)\n        intersection (filter s1 s2)\n        sym-diff (filter (fn [s] (if (some #{s} intersection) false true)) union)]\n    (set sym-diff)))", "problem": 88, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn difference [x y]\n  (letfn [(dif [z l union]\n      (if (empty? l) \n          (set z)\n          (letfn [(count2 [x] (if (= x (first l)) 1 0))]\n            (if (> (reduce + (map count2 union)) 1)\n              (dif z (rest l) union)\n              (dif (cons (first l) z) (rest l) union)\n            )\n          )\n      )\n  )]\n  (dif '() (concat x y) (concat x y))\n  )\n)", "problem": 88, "user": "50588af1e4b06522596eba7d"}, {"code": "#(into #{} \n    (concat \n      (clojure.set/difference % %2) (clojure.set/difference %2 %)))", "problem": 88, "user": "50481532e4b0ec70b3ef8d96"}, {"code": "#(set (remove (set (filter %1 %2)) (into %1 %2)))", "problem": 88, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "(fn [set-a set-b]\n  (set (map first\n    (filter\n      #(= 1 (count (second %)))\n      (group-by identity (concat set-a set-b))))))", "problem": 88, "user": "504e72cee4b0f6ff3350c4b4"}, {"code": "(fn [s1 s2] (set (concat (filter #(not (s1 %)) s2) (filter #(not (s2 %)) s1))))", "problem": 88, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "#(set (reduce conj \n          (remove % %2) \n          (remove %2 %)))", "problem": 88, "user": "4ebbff41535dfed6da9c6d78"}, {"code": "(fn [a b]\n  (set (concat (filter #(not (b %)) a) (filter #(not (a %)) b))))", "problem": 88, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "#(reduce disj (into % %2) (filter % %2))", "problem": 88, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "#(set (into (remove % %2) (remove %2 %)))", "problem": 88, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn [s1 s2] \n  (clojure.set/difference\n    (clojure.set/union s1 s2)\n    (clojure.set/intersection s1 s2)))", "problem": 88, "user": "5060d137e4b0dc10a69545a0"}, {"code": "#(clojure.set/union\n    (clojure.set/difference %1 %2)\n    (clojure.set/difference %2 %1)\n)", "problem": 88, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "problem": 88, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn [x y]\n  (let [d clojure.set/difference]\n  (into (d x y) (d y x))))", "problem": 88, "user": "502940a9e4b061fd216be4b8"}, {"code": "(fn [s1 s2]\r\n  (let [reducer \r\n        (fn [r e]          \r\n          (if (contains? r e) \r\n            (disj r e) \r\n            (conj r e)))]\r\n    (if (> (count s1) (count s2))\r\n      (reduce reducer s1 s2)\r\n      (reduce reducer s2 s1)\r\n    )))", "problem": 88, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn [a b]\n  (into #{}                                 \n    (concat \n      (filter #(not (contains? a %)) b)                                                           \n      (filter #(not (contains? b %)) a))))", "problem": 88, "user": "505fc8e3e4b08f2a82ad10b6"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "#(set (concat (remove %2 %) (remove % %2)))", "problem": 88, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn  [s1 s2]\n  (set\n  (concat\n    (filter #(= (s1 %) nil) s2)\n    (filter #(= (s2 %) nil) s1))))", "problem": 88, "user": "50611456e4b0dc10a69545a5"}, {"code": "(fn [a b] \n  (clojure.set/union \n    (clojure.set/difference a b) \n    (clojure.set/difference b a)))", "problem": 88, "user": "506e0e5ae4b09350ab4199eb"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "(fn [s1 s2]\n  (into #{}\n    (concat\n      (apply disj s2 s1)\n      (apply disj s1 s2))))", "problem": 88, "user": "50657775e4b0deb876850599"}, {"code": "#(clojure.set/difference \n  (clojure.set/union % %2)\n  (clojure.set/intersection % %2))", "problem": 88, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "#(set (concat (clojure.set/difference % %2) (clojure.set/difference %2 %)))", "problem": 88, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "50645e12e4b007509339a58a"}, {"code": "(fn [s1 s2]\n  (set (concat (reduce disj s1 s2) (reduce disj s2 s1))))", "problem": 88, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "#(into (clojure.set/difference % %2)\n        (clojure.set/difference %2 %))", "problem": 88, "user": "4e77c1db535d324fb2983d72"}, {"code": "#(set (mapcat remove [% %2] [%2 %]))", "problem": 88, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn [a b]\r\n  (clojure.set/union (clojure.set/difference a b)\r\n  \t     (clojure.set/difference b a)))", "problem": 88, "user": "507437c2e4b054001656acd0"}, {"code": "(fn symmetric-diff [s1 s2]\n  (let [only-s1 (reduce (fn [accum val] (if (contains? s2 val) accum (conj accum val))) #{} s1)]\n    (reduce (fn [accum val] (if (contains? s1 val) accum (conj accum val))) only-s1 s2)))", "problem": 88, "user": "50763574e4b0a894bb95bf3d"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2)\n                         (clojure.set/intersection %1 %2))", "problem": 88, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn [s1 s2] (set \n  (remove \n    #(contains? (clojure.set/intersection s2 s1) %)\n    (clojure.set/union s1 s2))))", "problem": 88, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn t1 [c1 c2]\n  (let [x1 (for [x c1 :when (not (contains? c2 x))] x) x2 (for [x c2 :when (not (contains? c1 x))] x)]\n    (set (concat x1 x2))))", "problem": 88, "user": "5046f909e4b03b02161376b5"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "#(set (into (remove % %2) (remove %2 %)))", "problem": 88, "user": "505d4b21e4b0e6aca564be07"}, {"code": "#(cond\n  (empty? %1) %2\n  (empty? %2) %1\n  :else (apply disj (apply conj %1 %2) (filter %1 %2)))", "problem": 88, "user": "4e944706535dbda64a6f6b11"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn my-sym [a b]\n  (clojure.set/union\n    (set (for [x a :when (not (contains? b x))] x))\n    (set (for [x b :when (not (contains? a x))] x))))", "problem": 88, "user": "507a08e4e4b08327cd804a67"}, {"code": "(fn [s1 s2]\n  (clojure.set/union\n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)))", "problem": 88, "user": "504c8165e4b09724c857af31"}, {"code": "(fn [xs ys] (let [s (clojure.set/union xs ys)]\n                    (set (for [e s :when (not (and (get xs e) (get ys e)))] e))))", "problem": 88, "user": "504db141e4b021508a333965"}, {"code": "(fn [l r] (into (set (remove l r)) (remove r l)))", "problem": 88, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)\n)", "problem": 88, "user": "50807940e4b01a93d3f38e44"}, {"code": "(comp set #(remove (let [s (new java.util.HashSet %1)]\n                (.retainAll s %2)\n                (set s)) (concat %1 %2)))", "problem": 88, "user": "507fbd77e4b089ade05efbd3"}, {"code": "#(if (empty? %1)\n  %2\n  (if (empty? %2)\n    %1\n    (apply disj (apply conj %1 %2)(filter %1 %2))\n  )\n)", "problem": 88, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "#(clojure.set/difference (into % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4e778d36535d324fb2983d71"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "503a234de4b088a6a14ca76d"}, {"code": "#(set (filter \n  (fn[x] (= 1 (+ (if (%1 x) 1 0) (if (%2 x) 1 0)))) \n  (clojure.set/union %1 %2)))", "problem": 88, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn [a b]\n  (let [ad (clojure.set/difference a b)\n      bd (clojure.set/difference b a)]\n  (into ad bd)))", "problem": 88, "user": "4f3242bae4b0d6649770a08f"}, {"code": "(fn [s t]\n  (into\n    (reduce disj (into s t) t)\n    (reduce disj (into s t) s)))", "problem": 88, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn [x y] (into #{} (map first\r\n  (filter #(= 1 (count %)) (vals \r\n                              (group-by identity \r\n                                  (concat \r\n                                      (into '() x) (into '() y))))))))", "problem": 88, "user": "506b437de4b0eda3100c0906"}, {"code": "(fn [x y]\n  (letfn [(d [a b]\n            (reduce #(disj % %2) a b))]\n    (set (concat (d x y) (d y x)))))", "problem": 88, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn [a b] (into #{} (for [x (into #{} (concat a b))\n                           :when (and (or (a x) (b x))\n                                      (not (and (a x) (b x))))]\n                       x)))", "problem": 88, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4f2942ace4b0d6649770a01e"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "507a396be4b08327cd804a69"}, {"code": "(fn [s t]\n          (clojure.set/union (clojure.set/difference s t) (clojure.set/difference t s)))", "problem": 88, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "(fn [sa sb]\n  (reduce #((if (contains? % %2) disj conj) % %2) sa sb))", "problem": 88, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn [a b] (set (concat (remove a b) (remove b a))))", "problem": 88, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn\n  [s1 s2]\n  (let [i (clojure.set/intersection s1 s2)\n        ls (clojure.set/difference s1 i)\n        rs (clojure.set/difference s2 i)]\n    (set (concat ls rs))))", "problem": 88, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "(fn [c1 c2] (clojure.set/difference (clojure.set/union c1 c2) (clojure.set/intersection c1 c2)))", "problem": 88, "user": "506b8242e4b0eda3100c090a"}, {"code": "(fn [x y]\n  (let [\n    res1 (apply disj x y)\n    res2 (apply disj y x)\n   ]\n   (if (= #{} res2)\n    res1\n    (apply conj res1 res2)\n   )\n  )\n)", "problem": 88, "user": "508bf05ae4b0f17d83ea26aa"}, {"code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn [a b]\n  (clojure.set/union\n    (clojure.set/difference a b)\n    (clojure.set/difference b a)))", "problem": 88, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn [s1 s2]\n  (clojure.set/union\n    (clojure.set/difference s2 s1)\n    (clojure.set/difference s1 s2)))", "problem": 88, "user": "4f32ef71e4b0d6649770a098"}, {"code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "problem": 88, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "5097ea89e4b087ccf61a7af4"}, {"code": "(fn [xs-1 xs-2]\n  (let [f (fn [xs x] (not (contains? xs x)))\n        s1 (filter (partial f xs-1) xs-2)\n        s2 (filter (partial f xs-2) xs-1)]\n    (set (concat s1 s2))))", "problem": 88, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "(fn [s1 s2]\n  (reduce conj\n    (reduce disj s1 s2)\n    (reduce disj s2 s1)))", "problem": 88, "user": "4fb1325de4b081705acca276"}, {"code": "(fn [l1 l2]\r\n  (let [ filtra #(for [a %1]\r\n                      (cond (nil? (get %2 a))\r\n           \t                a)) ]\r\n  (set\r\n     (remove #(nil? %)\r\n            (concat (filtra l1 l2)\r\n    \t\t\t\t        (filtra l2 l1))))))", "problem": 88, "user": "50576483e4b001218172198b"}, {"code": "(fn [x y]\n  (clojure.set/union\n    (clojure.set/difference x y)\n    (clojure.set/difference y x)\n  )\n)", "problem": 88, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "#(clojure.set/difference \n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "problem": 88, "user": "5089ebfee4b03217b26a539f"}, {"code": "(fn [c1 c2]\n  (set\n    (concat\n      (filter #(not (contains? c2 %)) c1)\n      (filter #(not (contains? c1 %)) c2))))", "problem": 88, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "#(set (concat\n  \t(apply disj %2 %)\n\t\t(apply disj % %2)))", "problem": 88, "user": "4dbdc898535d020aff1edf4a"}, {"code": "(fn sdiff [a b]\n  (clojure.set/union \n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "problem": 88, "user": "4fe9ef2fe4b0547ebccb2479"}, {"code": "(fn [x y] \n  (into #{} (concat \n    ((fn foo [a b]\n      (cond \n        (empty? a) a\n        (not (contains? b (first a))) \n           (concat (list (first a)) (foo (rest a) b))\n        :else (foo (rest a) b))\n     ) x y)\n    ((fn foo [a b]\n      (cond \n        (empty? a) a\n        (not (contains? b (first a))) \n           (concat (list (first a)) (foo (rest a) b))\n        :else (foo (rest a) b))) y x)\n    )\n))", "problem": 88, "user": "5078300de4b0fc74642bff66"}, {"code": "#(set (remove (set (filter % %2)) (into % %2)))", "problem": 88, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn [s1 s2]\n  (apply disj (reduce conj s1 s2) (filter #(contains? s2 %) s1)))", "problem": 88, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn [x y]\n   (reduce #(if (y %2) (disj % %2) (conj % %2)) y x))", "problem": 88, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn [s1 s2] (set (into (filter #(not (s1 %)) s2) (filter #(not (s2 %)) s1))))", "problem": 88, "user": "503255d0e4b0e78df07b092b"}, {"code": "#(set (concat (filter (complement %) %2)\n              (filter (complement %2) %)))", "problem": 88, "user": "4e0febe6535d04ed9115e7be"}, {"code": "(fn [a b]\n  (reduce conj\n    (reduce disj a b)\n    (reduce disj b a)))", "problem": 88, "user": "4f03818e535dcb61093f6b00"}, {"code": "(fn [coll1 coll2]\n  (loop [c1 coll1, c2 coll2, acc #{}]\n    (if (empty? c1) \n      (if (empty? c2) \n        acc \n        (let [h (first c2), t (rest c2)]\n          (if (contains? coll1 h)\n           (recur c1 t acc)\n           (recur c1 t (conj acc h)))))\n      (let [h (first c1), t (rest c1)]\n        (if (contains? c2 h)\n          (recur t c2 acc)\n          (recur t c2 (conj acc h)))))))", "problem": 88, "user": "50a83794e4b054305ba5a831"}, {"code": "#(let [u (set (concat %1 %2)) i (set (filter (fn [e] (%2 e)) %1))] (set (filter (fn [e] (nil? (i e))) u)))", "problem": 88, "user": "5027b41ee4b01614d1633fee"}, {"code": "#(clojure.set/union \n  (clojure.set/difference % %2) \n  (clojure.set/difference %2 %))", "problem": 88, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "#(clojure.set/difference \n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "problem": 88, "user": "502ade49e4b0614b52996120"}, {"code": "#(set (concat (remove % %2)(remove %2 %)))", "problem": 88, "user": "50a83315e4b054305ba5a830"}, {"code": "#(reduce conj (reduce disj %2 %) (reduce disj % %2))", "problem": 88, "user": "5098bcfee4b0cae2931060a1"}, {"code": "#(set (remove (set (filter %1 %2)) (into %1 %2)))", "problem": 88, "user": "50ab44b2e4b0f65d68208509"}, {"code": "#(into (apply disj % %2) (apply disj %2 %))", "problem": 88, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn  [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "problem": 88, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "(fn [a b]\n   (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "#(apply clojure.set/union (map clojure.set/difference [% %2] [%2 %]))", "problem": 88, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [x y]\n(set (filter #(not (contains? (clojure.set/intersection x y) %))\n(clojure.set/union x y))))", "problem": 88, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "(fn [a b]\n  (clojure.set/union \n    (set (filter #(not (contains? b %)) a))\n    (set (filter #(not (contains? a %)) b))))", "problem": 88, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn [xs ys]\n  (into (into #{}\n    (filter #(not (xs %)) ys))\n    (filter #(not (ys %)) xs)))", "problem": 88, "user": "50217818e4b00bba4502f7a7"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "(fn [s1 s2] (reduce #(if (or (and (nil? (s1 %2)) (not (nil? (s2 %2)))) (and (nil? (s2 %2)) (not (nil? (s1 %2))))) (conj % %2) %) #{} (concat s1 s2)))", "problem": 88, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn [xs sx] \n  (into #{} (concat (filter #(not (contains? sx %)) xs)\n                    (filter #(not (contains? xs %)) sx))))", "problem": 88, "user": "509eeb3be4b08df8156e9e37"}, {"code": "#(clojure.set/union (clojure.set/difference % %2)\n                    (clojure.set/difference %2 %))", "problem": 88, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "(fn [x y] (set (keep #(if (= 1 (val %)) (key %)) (frequencies (concat x y)))))", "problem": 88, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "#(set (concat (remove %1 %2)\n              (remove %2 %1)))", "problem": 88, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn [a b]\n         (set (filter #(not (and (contains? a \n                                       %) \n                            (contains? b \n                                       %)))\n                 (clojure.set/union a b))))", "problem": 88, "user": "50981062e4b04e098a4c7268"}, {"code": "#(clojure.set/union (apply (partial disj %) %2) (apply (partial disj %2) %))", "problem": 88, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "(fn [s1 s2] (let [cset (clojure.set/intersection s1 s2)]\n  (clojure.set/union (clojure.set/difference s1 cset)\n                    (clojure.set/difference s2 cset))))", "problem": 88, "user": "5092fe10e4b097f48cc3857e"}, {"code": "#(into (apply disj %1 %2) (apply disj %2 %1))", "problem": 88, "user": "4db86aee535d1e037afb2193"}, {"code": "(fn [xs ys]\n  (clojure.set/union\n    (clojure.set/difference xs ys)\n    (clojure.set/difference ys xs)))", "problem": 88, "user": "507e68abe4b085af06e3afd2"}, {"code": "(fn sd [s1 s2] (set (concat (filter #(not (contains? s2 %)) s1) (filter #(not (contains? s1 %)) s2))))", "problem": 88, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn [a b]\n  (into\n    (set (filter #(nil? (b %)) a))\n    (filter #(nil? (a %)) b)))", "problem": 88, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn [s1 s2]\r\n  (into #{} (filter #(not (and (some #{%} s1) (some #{%} s2))) (concat s1 s2))))", "problem": 88, "user": "50acbd15e4b071b89ef26234"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50112acee4b0d82cfac69f4c"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(fn [a b] (reduce conj\n              (apply disj b a)\n              (apply disj a b))\n  )", "problem": 88, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "(fn[xs ys]\n   (clojure.set/difference \n    (clojure.set/union xs ys) \n    (clojure.set/intersection xs ys)))", "problem": 88, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn [l r]\n   (set (concat (filter #(not (contains? r %)) l)\n          (filter #(not (contains? l %)) r))))", "problem": 88, "user": "50868795e4b004985b776e5e"}, {"code": "(fn [s1 s2] (into (apply disj s1 s2) (apply disj s2 s1)))", "problem": 88, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn [s1, s2](clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn my-sym-difference [s1 s2]\n  (into (into #{} (apply disj s1 s2))\n                  (apply disj s2 s1)))", "problem": 88, "user": "50812debe4b01a93d3f38e4c"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "50b0cffae4b009df37c708c5"}, {"code": "#(\n  clojure.set/union \n  ( clojure.set/difference %1 %2 ) \n  ( clojure.set/difference %2 %1 )\n  \n)", "problem": 88, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "#(into #{} (remove (into #{} (filter % %2)) (concat % %2)))", "problem": 88, "user": "4f1bb9d8535d64f60314647d"}, {"code": "(fn [s1 s2]\n  (clojure.set/union \n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1))\n  )", "problem": 88, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "(fn [& args]\n  (clojure.set/difference\n    (apply clojure.set/union args)\n    (apply clojure.set/intersection args)))", "problem": 88, "user": "509160dae4b0742c82730aef"}, {"code": "(fn[set1 set2]\n(\nset (\nfilter\n\t(fn [x]\n\t\t(let [\tin-set1 (if(set1 x) true false)\n\t\t\tin-set2 (if(set2 x) true false)\n\t\t\tin-both (and in-set1 in-set2)]\n\t\t(not in-both)\n\t\t)\n\t)\n(concat set1 set2)\n)\n)\n)", "problem": 88, "user": "50b25f2ce4b03ea88043355f"}, {"code": "#(set (for [[e n] (frequencies (concat %1 %2)) :when (= n 1)] e))", "problem": 88, "user": "4f89d489e4b033992c121c7e"}, {"code": "#(set (concat (apply disj % %2) (apply disj %2 %)))", "problem": 88, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn [xs ys]\n    (set (concat\n      (filter (comp not xs) ys)\n      (filter (comp not ys) xs))))", "problem": 88, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "#(set (concat (clojure.set/difference %1 %2)\n         (clojure.set/difference %2 %1)))", "problem": 88, "user": "4eca7a87535d6d7199dd3705"}, {"code": "(fn __ [a b]\n  (reduce #(if (contains? %1 %2)\n             (disj %1 %2)\n             (conj %1 %2))\n          a\n          b))", "problem": 88, "user": "509b152be4b0412cdea6eb1e"}, {"code": "(fn [x y] (clojure.set/union (clojure.set/difference y x) (clojure.set/difference x y)))", "problem": 88, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "(fn __ [s1 s2]\n  \t(let [\n          i (clojure.set/intersection s1 s2)\n          xs1 (clojure.set/difference s1 i)\n          xs2 (clojure.set/difference s2 i)\n          a (clojure.set/union xs1 xs2)\n          ] a))", "problem": 88, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "#(set (concat (reduce disj % %2) (reduce disj %2 %)))", "problem": 88, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "(fn [x y] (set (concat (remove (set (filter x y)) x) (remove (set (filter y x)) y))))", "problem": 88, "user": "50733b31e4b0e3170b5a869a"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn [xs ys]\n  (set (into (remove xs ys) (remove ys xs))))", "problem": 88, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn [p q] (into #{} (map #(first %) (filter #(= (count %) 1) \n                                            (map #(val %) \n                                                 (group-by identity \n                                                           (concat (seq p) (seq q))))))))", "problem": 88, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn [s1 s2]\n  (let [intersection (clojure.set/intersection s1 s2)\n        diff1 (clojure.set/difference s1 intersection)\n        diff2 (clojure.set/difference s2 intersection)]\n    (set (concat diff1 diff2))))", "problem": 88, "user": "4e71a12c535d5021c1a8964f"}, {"code": "(fn [a b]\n  (loop [x a y b]\n    (if (empty? x) y\n      (recur (rest x)\n        (if (contains? y (first x))\n          (disj y (first x))\n          (conj y (first x))\n        )\n      )\n    )\n  )\n)", "problem": 88, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "(fn [seta setb] \n  (set (concat (filter #(not (seta %)) setb)\n          (filter #(not (setb %)) seta))))", "problem": 88, "user": "4ff769bce4b0678c553fc38f"}, {"code": "#(set (concat\n        (apply disj % %2)\n        (apply disj %2 %)))", "problem": 88, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "(fn [s1 s2] (let [x1 (reduce disj s1 s2) x2 (reduce disj s2 s1)] (reduce conj x1 x2)))", "problem": 88, "user": "50b24a2fe4b03ea88043355c"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "#( clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2) )", "problem": 88, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "#(let [diff clojure.set/difference\n\t   union clojure.set/union]\n  (union (diff %1 %2) (diff %2 %1)))", "problem": 88, "user": "50ccf729e4b0f7a459302aac"}, {"code": "(fn this [xs ys]\n  (into (set (filter #(not (contains? ys %)) xs))\n          (set (filter #(not (contains? xs %)) ys))))", "problem": 88, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2)(clojure.set/difference %2 %1))", "problem": 88, "user": "50d179c7e4b05a71a896ef56"}, {"code": "(fn [a b] (set (concat (remove a b) (remove b a))))", "problem": 88, "user": "500a214de4b03d00572d2d74"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "(fn [set1 set2]\n  (let [diff (fn [s1 s2]\n               (reduce (fn [a e] (if (s2 e) a (conj a e))) #{} s1))\n        union (fn [s1 s2]\n                (reduce (fn [a e] (conj a e)) s1 s2))\n        s1-s2 (diff set1 set2)\n        s2-s1 (diff set2 set1)]\n    (union s1-s2 s2-s1)))", "problem": 88, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "(fn [a b]\n  (set (remove #(a (b %)) (concat a b))))", "problem": 88, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "(fn symemtric-difference [s1 s2]\n  (set \n    (map\n      #(first %)\n      (filter\n        (fn[x] (let [[i c] x] (= c 1)))\n        (map\n          (fn[el] (let [[k v] el] [k (count v)]))\n          (group-by identity (concat\n            (apply list s1)\n            (apply list s2))))))))", "problem": 88, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "(fn [a b] \n   (clojure.set/union \n    (clojure.set/difference a b)\n    (clojure.set/difference b a)))", "problem": 88, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn [x y]\n  (let [a (remove x y)\n        b (remove y x)\n        d (remove empty? [a b])]\n    (reduce #(apply conj %1 %2) #{} d)))", "problem": 88, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "(fn [a b]\n  (set (concat (filter (complement a) b) (filter (complement b) a))))", "problem": 88, "user": "50e3cf55e4b01912b3285c45"}, {"code": "#(set (concat (filter (fn [item] (not (% item))) %2)\n          (filter (fn [item] (not (%2 item))) %)))", "problem": 88, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [s1 s2]\n  (set (concat\n        (remove (partial contains? s2) s1)\n        (remove (partial contains? s1) s2))))", "problem": 88, "user": "50e3ddd4e4b01912b3285c47"}, {"code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "50608ea0e4b07251188e4456"}, {"code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "4db6ce85535d1e037afb217f"}, {"code": "#(set `(~@(% %2 %3) ~@(% %3 %2))) remove", "problem": 88, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn [s1 s2] (reduce (fn [s e] (if (contains? s e) (disj s e) (conj s e))) s1 s2))", "problem": 88, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "503539dee4b0ed9c821488f6"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "(fn [x y]\n\t(set (concat \n     (remove x y)\n     (remove y x))))", "problem": 88, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn sym-diff [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "50d86fe2e4b01f0871336e67"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [a b] \n    (clojure.set/union \n         (set (filter #(not (a %)) b))\n         (set (filter #(not (b %)) a)))\n   )", "problem": 88, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "problem": 88, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "(fn [set-1 set-2]\n  (let [union (clojure.set/union set-1 set-2)\n        intersection (clojure.set/intersection set-1 set-2)]\n    (clojure.set/difference union intersection)))", "problem": 88, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4e6e3aac535d5021c1a89603"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50ee145de4b06330c1f87c53"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn symmetric-difference-88\n  [s1 s2]\n  (into (set (remove s1 s2)) (remove s2 s1)))", "problem": 88, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "(fn [& els]\n  (let [all (apply concat els)\n        grouped (group-by identity all)]\n    (set\n    (map first\n         (filter (fn [[k v]] (= 1 (count v))) grouped)))))", "problem": 88, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn [a b] (set(concat (filter #(not(contains? a %)) b) (filter #(not(contains? b %)) a))))", "problem": 88, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "50dfb660e4b061dbdced7228"}, {"code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn symmetric-difference [s0 s1]\n  (clojure.set/union\n    (clojure.set/difference s0 s1)\n    (clojure.set/difference s1 s0)))", "problem": 88, "user": "50f1dedbe4b0897c4366dcd8"}, {"code": "(fn [s1 s2]\n  (clojure.set/union \n   (reduce disj s1 s2)\n   (reduce disj s2 s1)))", "problem": 88, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "(fn[col1 col2] (let [t-coll (reduce conj col1 col2)]\n                 (reduce #(if-not (and (contains? col1 %2)\n                                   (contains? col2 %2))\n                            (conj % %2) %) #{} t-coll)))", "problem": 88, "user": "5036eba7e4b0af0658af77a5"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn [a b]\n  (let [u (into a b)\n        i (filter a b)]\n    (reduce disj u i)))", "problem": 88, "user": "505aa653e4b021387fb89857"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50e82c31e4b0ebbe794eb7da"}, {"code": "(fn f [a b]\n  (into #{} (concat (filter #(not (contains? b %)) a) (filter #(not (contains? a %)) b)))\n  )", "problem": 88, "user": "50f4894be4b004d364930528"}, {"code": "(fn symdiff [s1 s2]\n  (set (concat (filter #(not (contains? s1 %)) s2)\n          (filter #(not (contains? s2 %)) s1))))", "problem": 88, "user": "4fc50bcbe4b081705acca375"}, {"code": "(fn [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "problem": 88, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "#(letfn [(diff [s1 s2] (filter (complement s1) s2))]\n      (into #{} (concat (diff %1 %2) (diff %2 %1))))", "problem": 88, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "#(set (concat (filter (complement %1) %2) \n              (filter (complement %2) %1)))", "problem": 88, "user": "50ec4ed7e4b04edc33777046"}, {"code": "#(let [d clojure.set/difference] (clojure.set/union (d % %2) (d %2 %)))", "problem": 88, "user": "5102489de4b00c483ae176f6"}, {"code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn [a b] \n  (letfn [(r [xs ys] \n             (reduce \n              #(if (contains? xs %2) % (conj % %2) )\n              #{} ys))]\n  (into (r a b) (r b a))\n  ))", "problem": 88, "user": "50d8739ae4b01f0871336e68"}, {"code": "reduce #(if (get %1 %2) (disj %1 %2) (conj %1 %2))", "problem": 88, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn [a b]\n  (let [u (clojure.set/union a b)\n        i (clojure.set/intersection a b)]\n   \t(clojure.set/difference u i)))", "problem": 88, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn [xs ys]\n   (into #{} (map #(get % 0)\n                  (filter #(= 1 (second %)) (frequencies (concat xs ys))))))", "problem": 88, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2 )))", "problem": 88, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn [s1 s2]\n  (reduce #(if (and (contains? s1 %2)\n                 (contains? s2 %2))\n               %1\n               (conj %1 %2)) \n          #{}\n          (into s1 s2)))", "problem": 88, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "(fn [set-a set-b] (set (filter \n                \t   \t#(not (contains? (clojure.set/intersection set-a set-b) %)) \n                   \t\t(clojure.set/union set-a set-b)\n                   )))", "problem": 88, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "5008d149e4b0144d4f561e41"}, {"code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "4e4be570535dc968683fc4d8"}, {"code": "(fn [s1 s2]\n  (set (concat (filter #(not (s2 %)) s1) (filter #(not (s1 %)) s2))))", "problem": 88, "user": "50aab057e4b056ee0193586b"}, {"code": "#(into (set (remove %1 %2)) (remove %2 %1))", "problem": 88, "user": "510d9d61e4b078ea71921141"}, {"code": "#(apply clojure.set/difference ((juxt clojure.set/union clojure.set/intersection) % %2))", "problem": 88, "user": "511026b1e4b04c71fce993ec"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "510d3dc6e4b078ea71921132"}, {"code": "(fn [s1 s2](into #{} (loop [un (into #{} (concat s1 s2)) result #{}] (if (empty? un) result (if (not (and (contains? s1 (first un))(contains? s2 (first un)))) (recur (rest un) (cons (first un) result)) (recur (rest un) result))))))", "problem": 88, "user": "510931ede4b0c71f76895663"}, {"code": "(fn [a b] (set (mapcat identity ((juxt #(remove % %2) #(remove %2 %)) a b))))", "problem": 88, "user": "5102ac9de4b00c483ae176fa"}, {"code": "(fn [a b] (reduce #(disj %1 %2) (into a b) (keep a b)))", "problem": 88, "user": "5107b86de4b05b2b4eee7495"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "5106bc8ae4b01150e115ebec"}, {"code": "(comp (partial apply (partial apply disj)) (juxt into clojure.set/intersection))", "problem": 88, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn [set1 set2] \n  (set (into \n        (remove #(contains? set2 %) set1)\n        (remove #(contains? set1 %) set2))))", "problem": 88, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "(fn [xs ys]\n  (let [inter (clojure.set/intersection xs ys)]\n  (clojure.set/union (clojure.set/difference xs inter)\n                     (clojure.set/difference ys inter))))", "problem": 88, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn [s1 s2]\n  (set \n   (concat \n    (filter #(not (contains? s1 %)) s2) \n    (filter #(not (contains? s2 %)) s1))))", "problem": 88, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "(fn [set1 set2]\n   (loop [result #{} elements (clojure.set/union set1 set2)]\n     (if (empty? elements)\n       result\n       (if (or (and (contains? set1 (first elements)) (not (contains? set2 (first elements))))\n               (and (contains? set2 (first elements)) (not (contains? set1 (first elements)))))\n         (recur (conj result (first elements)) (rest elements))\n         (recur result (rest elements))\n         )\n       )     \n   )\n   )", "problem": 88, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s2 s1) (clojure.set/difference s1 s2))\n)", "problem": 88, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn [set_a set_b]\n  (clojure.set/union (clojure.set/difference set_a set_b)\n                     (clojure.set/difference set_b set_a)))", "problem": 88, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn [a b]\n  (set (concat (clojure.set/difference b a) (clojure.set/difference a b))))", "problem": 88, "user": "51195e77e4b055cfb310d499"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50f17c0de4b06d9538fe2123"}, {"code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "50bce014e4b0594b91591c63"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "#(set (filter (complement (set (filter % %2))) (into % %2)))", "problem": 88, "user": "510db6cde4b078ea71921145"}, {"code": "(fn symm-diff [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "51181009e4b0e0897831a60f"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "problem": 88, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "(fn sym-diff [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "5119f3d5e4b06c8af0111818"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [as bs]\n  (let [a-not-b (reduce disj as bs)\n        b-not-a (reduce disj bs as)]\n    (into a-not-b b-not-a)))", "problem": 88, "user": "51008b6fe4b0700a7a02d6e4"}, {"code": "#(into (apply disj % %2) (apply disj %2 %))", "problem": 88, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "4ecc1d85535d23f0362276f8"}, {"code": "(fn [& s]\n  (let [intersection (reduce clojure.set/intersection s)\n        union (reduce clojure.set/union s)]\n    (set (filter #(not (some #{%} intersection)) union))))", "problem": 88, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn this [s1 s2]\n\t(if\n     (empty? s1) s2\n     (let [s1f (first s1)\n           s1r (rest s1)]\n       (if (s2 s1f)\n         (this s1r (disj s2 s1f))\n         (conj (this s1r s2) s1f)))))", "problem": 88, "user": "4ec12577535dfed6da9c6da8"}, {"code": "#(apply disj (into % %2) (keep % %2))", "problem": 88, "user": "50742549e4b054001656accf"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "50f9c7fde4b0e7c80cb15a52"}, {"code": "(fn [f s] \n   (reduce #(if (not= (contains? f %2) (contains? s %2)) (conj % %2) %)\n           #{}\n           (concat f s)))", "problem": 88, "user": "50b45ee1e4b08fc3808f30ca"}, {"code": "(fn foo [a b]\n  (set (concat\n    (filter #(nil? (b %)) a)\n    (filter #(nil? (a %)) b)\n    ))\n  )", "problem": 88, "user": "510b704ee4b078ea71921100"}, {"code": "(fn [a b]\r\n   (clojure.set/difference \r\n      (clojure.set/union a b)\r\n       (clojure.set/intersection a b))\r\n)", "problem": 88, "user": "510a6bece4b06956752d35af"}, {"code": "(fn [& x]\n  (apply disj \n         (apply clojure.set/union x) \n         (apply clojure.set/intersection x)))", "problem": 88, "user": "500b61b1e4b03d00572d2d81"}, {"code": "#(set (into (filter (comp not %) %2) (filter (comp not %2) %)))", "problem": 88, "user": "50b35486e4b03ea88043356a"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "510acd6ee4b078ea719210f4"}, {"code": "#(set (concat (filter (comp not %) %2) (filter (comp not %2) %)))", "problem": 88, "user": "51256b40e4b05d10e3e395f8"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn [x y] (set (concat (remove y x) (remove x y))))", "problem": 88, "user": "51284226e4b03a34742b4308"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn [s1 s2] (set (concat (filter #(not (s2 %)) s1) (filter #(not (s1 %)) s2))))", "problem": 88, "user": "511a0374e4b06c8af011181a"}, {"code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "problem": 88, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "(fn [s1 s2]\n  (let [union (into s1 s2)\n        intersection (set (filter s1 s2))\n        sym-diff (set (remove intersection union))]\n    sym-diff))", "problem": 88, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn [s1 s2]\n    (->> ( vec s1)\n         (into (vec s2))\n         frequencies\n         (filter #(= (second %) 1) )\n         keys\n         set))", "problem": 88, "user": "4f030775535dcb61093f6a43"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "5127e504e4b03a34742b4302"}, {"code": "(fn [set1 set2]\n  (let [diff1 (clojure.set/difference set1 set2)\n        diff2 (clojure.set/difference set2 set1)\n        result (clojure.set/union diff1 diff2)]\n    result))", "problem": 88, "user": "50621cbde4b0341461c88951"}, {"code": "(fn [s1 s2]\n   (apply disj (clojure.set/union s1 s2) (clojure.set/intersection s1 s2))\n  )", "problem": 88, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn symdiff [x y]\n  (let [diff clojure.set/difference]\n    (into (diff x y) (diff y x))))", "problem": 88, "user": "50e4f4e9e4b049a987753896"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "511618b1e4b0d4f670fd2fdf"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn [a b]\n  (letfn [(diff [x y]\n                (remove (fn [e] (get y e)) x))]\n    (let [a-diff (set (diff a b))\n          b-diff (set (diff b a))]\n      (if (empty? a-diff) b-diff\n        (if (empty? b-diff) a-diff\n          (apply conj a-diff b-diff))))))", "problem": 88, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn [s1 s2] (let [ss (into s1 s2) sx (set(map s1 s2))] (set(filter #(and (ss %) (not (sx %))) ss))))", "problem": 88, "user": "511d11d7e4b022853b0e079f"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn diff [s1 s2]\n\t(letfn\n\t\t[(xor [a b]\n\t\t\t(or \n\t\t\t\t(and a (not b))\n\t\t\t\t(and b (not a))\n\t\t\t)\n\t\t)]\n\t\t(set (filter #(xor (s1 %) (s2 %)) (clojure.set/union s1 s2)))\n\t)\n)", "problem": 88, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "(fn symdiff [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2)\n                          (clojure.set/intersection s1 s2)))", "problem": 88, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "#(apply disj (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "5125d963e4b05d10e3e395fe"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "#(set (filter (complement (set (filter % %2))) (into % %2)))", "problem": 88, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn  [s1 s2]\n  (set (apply merge\n    (filter (complement s1) s2)\n    (filter (complement s2) s1))))", "problem": 88, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn [a b] (let [f (fn [x y] (filter #(not (contains? x %)) y))] (set (concat (f a b) (f b a)))))", "problem": 88, "user": "4e823f41535db62dc21a62c8"}, {"code": "(fn [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "problem": 88, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn [x, y]\n  (letfn [(diff [a, b]\n                (set (filter #(not (contains? b %)) a)))]\n    (clojure.set/union (diff x y) (diff y x))))", "problem": 88, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn aa [x1 x2] (loop [x x1 y x2 z #{}] \n     \n   (if-not (empty? x)\n                   \n                (if (x2 (first x)) \n\t\t\t\t    (recur (rest x) y z) \n\t\t\t\t    (recur (rest x) y (conj z (first x)))\n\t\t\t\t )\n                 \n                   \n                 (if-not (empty? y) \n\n                   (if (x1 (first y)) (recur x (rest y) z) (recur x (rest y) (conj z (first y))))\n                    z\n                  )\n    )))", "problem": 88, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn [a b]\n (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "problem": 88, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "50eebf46e4b06330c1f87c61"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "5125745ae4b05d10e3e395f9"}, {"code": "#(set (apply concat (list (keep (fn[e](if (= (% e) nil) e nil)) %2) (keep (fn[e](if (= (%2 e) nil) e nil)) %))))", "problem": 88, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn dif [s1 s2] \n  (set (concat\n   (filter #(not (contains? s2 %)) s1)\n   (filter #(not (contains? s1 %)) s2))))", "problem": 88, "user": "5117c31ee4b0e0897831a60c"}, {"code": "(fn [a b] \n  (clojure.set/union \n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "problem": 88, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference\n   (clojure.set/union s1 s2)\n   (filter s1 s2)))", "problem": 88, "user": "4e58c019535d8a8b8723a297"}, {"code": "(fn [x y]\n  (let [complete (concat x y)]\n    (reduce \n     (fn [acc value] (if (not (and (contains? x value) (contains? y value) )) (conj acc value) acc))\n     #{}\n     complete\n     )\n    )\n  )", "problem": 88, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "(fn [x y]\n  (clojure.set/difference (set (concat x y)) (clojure.set/intersection x y)))", "problem": 88, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "#(cond (empty? %) %2\n       (empty? %2) % \n       (or (not (empty? %)) (not (empty? %2))) (apply conj (clojure.set/difference % %2) (clojure.set/difference %2 %)))", "problem": 88, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn [x y] \n  (into #{} (filter #(not= (nil? (x %)) (nil? (y %))) (apply merge x y))))", "problem": 88, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn [a b]\n  (set (concat \n        (filter (complement a) b)\n        (filter (complement b) a))))", "problem": 88, "user": "513bb7a6e4b04402f587b77d"}, {"code": "(fn [s1 s2]\n  (let [diff-s1 (clojure.set/difference s1 s2)\n        diff-s2 (clojure.set/difference s2 s1)]\n    (clojure.set/union diff-s1 diff-s2)))", "problem": 88, "user": "50b29029e4b03ea880433563"}, {"code": "#(set (into (remove %2 %) (remove % %2)))", "problem": 88, "user": "51352899e4b082aeb3a3f03b"}, {"code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))\n;(comp (partial apply clojure.set/difference) (juxt clojure.set/union clojure.set/intersection))\n;#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))\n;#(apply clojure.set/difference (( juxt clojure.set/union clojure.set/intersection) %1 %2))\n;#(set (apply remove (( juxt clojure.set/intersection clojure.set/union) %1 %2)))\n;#(set (remove (clojure.set/intersection %1 %2) (clojure.set/union %1 %2)))", "problem": 88, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "513f53c6e4b051389b345b40"}, {"code": "(fn [c1 c2] (into #{} \n                  (concat (filter #(not (contains? c1 %)) c2) \n                          (filter #(not (contains? c2 %)) c1))))", "problem": 88, "user": "5145832be4b0e8879607340a"}, {"code": "(fn [a,b] (set (concat (filter #(not (contains? b %)) a)\n                       (filter #(not (contains? a %)) b))))", "problem": 88, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "(fn [a b]\n  (let [c (set (remove a b)) d (set (remove b a))]\n    (into c d)))", "problem": 88, "user": "50e135f4e4b084616e11c667"}, {"code": "#(set (concat (remove % %2) (remove %2 %1)))", "problem": 88, "user": "4fbef9a6e4b081705acca316"}, {"code": "#(apply disj (into %1 %2) (filter %1 %2))", "problem": 88, "user": "514d398ee4b019235f6c0583"}, {"code": "#(let [d clojure.set/difference] \n   (clojure.set/union (d % %2) (d %2 %)))", "problem": 88, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn symdiff [s1 s2]\n  (set (concat (filter #(nil? (s1 %)) s2) (filter #(nil? (s2 %)) s1))))", "problem": 88, "user": "51502056e4b098b221effc25"}, {"code": "(fn [x y] (set (map first (filter #(= 1 (count %)) (partition-by identity (sort (concat x y)))))))", "problem": 88, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4f50d933e4b03ad3f0c10d11"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "5142ea50e4b0c172af7558ca"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2 )  (clojure.set/intersection  %1 %2 ))", "problem": 88, "user": "5016ac54e4b052339a490e7b"}, {"code": "#(set (map first ((group-by (fn[[a b]](count b))(group-by (fn[a]a) `(~@% ~@%2))) 1)))", "problem": 88, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn dif [s1 s2]\n  (set (concat (filter #(not (s1 %)) s2) (filter #(not (s2 %)) s1))))", "problem": 88, "user": "4ef2eb4d535dced4c769f226"}, {"code": "(fn diff [a b]\n  (let [a-absent-in-b \n        #(disj \n           (set \n             (for [item %1]\n               (when-not (contains? %2 item) item))) \n          nil)]\n    (set (apply concat [(a-absent-in-b a b) (a-absent-in-b b a)]))))", "problem": 88, "user": "4e58ef07535d8a8b8723a299"}, {"code": "(fn symmetric-difference [s1 s2] (letfn [(difference [s1 s2] (set (filter #(not (contains? s2 %)) s1)))] (set (concat (vec (difference s1 s2)) (vec (difference s2 s1))))))", "problem": 88, "user": "4fae4c11e4b081705acca248"}, {"code": "(fn [a b] (set (concat (filter #(not (b %)) a) (filter #(not (a %)) b))))", "problem": 88, "user": "5158bba4e4b059418b97f0ab"}, {"code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "problem": 88, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "problem": 88, "user": "5142154ce4b0b50abeb46b2b"}, {"code": "#(reduce disj (into % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "5150a7d7e4b03e678e393abb"}, {"code": "#(set(concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "(fn [a b] \n  \n  (let [x (filter (comp not a) b)\n        \n        y (filter (comp not b) a)]\n    (set (concat x y))))", "problem": 88, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "#(cond\n  (empty? %1) %2\n  (empty? %2) %1\n  :else (apply disj (apply conj %1 %2) (filter %1 %2)))", "problem": 88, "user": "514afd1be4b0bd81940b86c6"}, {"code": "(fn [a b]\n  (into #{}\n    (concat (filter #(not (contains? b %)) a)\n            (filter #(not (contains? a %)) b))))", "problem": 88, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn [s t] (clojure.set/union (clojure.set/difference s t) (clojure.set/difference t s)))", "problem": 88, "user": "50982cc7e4b04e098a4c726c"}, {"code": "#(clojure.set/union\n(clojure.set/difference % %2)\n(clojure.set/difference %2 %)\n)", "problem": 88, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn [col1 col2] (apply hash-set (concat (filter #(not (col1 %)) col2) (filter #(not (col2 %)) col1))))", "problem": 88, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "(fn [x y]\n   (reduce #(if (get % %2)  (disj % %2) (conj % %2 )) x y))", "problem": 88, "user": "5047782ce4b0371827a27bc2"}, {"code": "(fn [a b]\n\t(set (concat (filter #(not (a %)) b) (filter #(not (b %)) a))))", "problem": 88, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [a b]\n  (reduce #((if (%1 %2) disj conj) %1 %2) a b))", "problem": 88, "user": "4fbcbd50e4b081705acca2f9"}, {"code": "(fn symdiff [left right]\n  (clojure.set/difference (clojure.set/union left right) (clojure.set/intersection left right)))", "problem": 88, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "#(set (remove (set(map %1 %2))\n              (into %1 %2)))", "problem": 88, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn [set1 set2]\n  (let [shared (clojure.set/intersection set1 set2)]\n    (clojure.set/union (clojure.set/difference set1 shared)\n                       (clojure.set/difference set2 shared))))", "problem": 88, "user": "504ee511e4b0e7ad84dbc4a4"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "(fn [set1 set2] (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2)))", "problem": 88, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "problem": 88, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "#(into (apply disj % %2) (apply disj %2 %))", "problem": 88, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn [as bs]\n\t(clojure.set/union (clojure.set/difference as bs)\n                       (clojure.set/difference bs as)))", "problem": 88, "user": "50f48298e4b004d364930527"}, {"code": "#(clojure.set/difference \n   (clojure.set/union %1 %2)\n   (clojure.set/intersection %1 %2))", "problem": 88, "user": "4fb4303fe4b081705acca2ac"}, {"code": "(fn [c1 c2]\n  (clojure.set/difference\n    (clojure.set/union c1 c2)\n    (clojure.set/intersection c1 c2)))", "problem": 88, "user": "51592b81e4b0394f658fe22c"}, {"code": "#(set (concat (remove (fn [x] (contains? % x)) %2) (remove (fn [x] (contains? %2 x)) %)))", "problem": 88, "user": "515e8ce2e4b049add99a053d"}, {"code": "#(set (remove (set (filter %1 %2)) (into %1 %2)))", "problem": 88, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn [s1 s2]\n  (let [a (filter #(not (contains? s1 %)) s2)\n        b (filter #(not (contains? s2 %)) s1)]\n    (clojure.set/union (set b) (set a))))", "problem": 88, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "(fn [s1 s2]\n  (reduce (fn [ret this]\n            (if-not (s1 this)\n              (conj ret this)\n              ret)) (reduce (fn [ret this]\n            (if-not (s2 this)\n              (conj ret this)\n              ret)) #{} s1) s2))", "problem": 88, "user": "513cb853e4b0b86ece9f322b"}, {"code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "(fn [a b] (set (concat (filter #(not (a %)) b) (filter #(not (b %)) a))))", "problem": 88, "user": "515828b8e4b0a069fd272c71"}, {"code": "(fn [a b] (set (filter #(not (and (a %) (b %))) (concat a b))))", "problem": 88, "user": "50b1d166e4b03ea880433554"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2)\n        (clojure.set/difference %2 %1))", "problem": 88, "user": "51460e4ce4b04ef915e37314"}, {"code": "(fn [xs ys]\n  (clojure.set/difference (clojure.set/union xs ys) (clojure.set/intersection xs ys)))", "problem": 88, "user": "516f06dce4b06aac486e5b39"}, {"code": "(fn [s1 s2]\n  (let [intersected (clojure.set/intersection s1 s2)\n        a (clojure.set/difference s1 intersected)\n        b (clojure.set/difference s2 intersected)]\n    (into #{} (concat a b))))", "problem": 88, "user": "4f072644535dcb61093f6c20"}, {"code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "51740b65e4b0d277d717bc67"}, {"code": "#(cond\n  (empty? %2) %1\n  (empty? %1) %2\n  :else (apply disj (apply conj %1 %2) (filter %1 %2)))", "problem": 88, "user": "5150f87ae4b03e678e393ac7"}, {"code": "(fn sym-diff [a b]\n  ((comp set (partial filter #((fn [a b] (or (and a (not b)) (and b (not a)))) (contains? a %) (contains? b %)))\n         concat)\n   a b))", "problem": 88, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn [xs ys]\n  (letfn [(f [zs] (partial (comp not contains?) zs))]\n    (set (concat (filter (f ys) xs)\n                 (filter (f xs) ys)))))", "problem": 88, "user": "5173726be4b098276e74652c"}, {"code": "(fn symdiff [set1 set2]\n  (set\n   (concat\n    (filter (complement set1) set2)\n    (filter (complement set2) set1))))", "problem": 88, "user": "516dc88ae4b046df6fbb76a1"}, {"code": "(fn [s1 s2]\n    (into #{} (filter #(not (and (contains? s2 %) (contains? s1 %))) (clojure.set/union s1 s2))))", "problem": 88, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn [A B]\n  ((comp set concat)\n     (filter (complement A) B) (filter (complement B) A)))", "problem": 88, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "#(set\n      (concat\n       (remove (partial contains? %1) %2)\n       (remove (partial contains? %2) %1)))", "problem": 88, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "51729002e4b044b2ef48a850"}, {"code": "#(clojure.set/union\n  (clojure.set/difference % %2)\n  (clojure.set/difference %2 %))", "problem": 88, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "; take items of set 1, not in set 2\n; take items of set 2, not in set 1\n; join them together\n\n(fn [s1 s2]\n  (letfn [(diff [s1 s2]\n                (loop [set1 s1, set2 s2, acc #{}]\n                  (if (= 0 (count set1))\n                    acc\n                    (recur (rest set1) s2 \n                           (if (not(some #(= (first set1) %) s2))\n                             (conj acc (first set1)) \n                             acc)))))]\n    (into (into #{} (diff s1 s2)) (diff s2 s1))))", "problem": 88, "user": "517531c6e4b07031762f2eea"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn [a b]\n  (into #{}\n        (concat (filter #(not (contains? b %)) a)\n                (filter #(not (contains? a %)) b))))", "problem": 88, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn [x y]\n  (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "problem": 88, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "problem": 88, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn [s1 s2]\n  (set (concat (filter #(not (some #{%} s1)) s2) (filter #(not (some #{%} s2)) s1))))", "problem": 88, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn sd[x y]\n (if (< (count x) (count y)) \n  (recur y x)\n  (reduce \n   (fn [acc el]\n     (cond \n       (and (y el) (not (x el))) \n         (conj acc el)\n       (and (x el) (not (y el))) \n         (conj acc el)\n       :else acc\n     )\n   )\n   #{}\n   (concat x y)\n  )\n )\n)", "problem": 88, "user": "4fb03cf4e4b081705acca262"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2)\n                         (clojure.set/intersection %1 %2))", "problem": 88, "user": "51780bfce4b0f89a8f53839c"}, {"code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b)\n                     (clojure.set/difference b a)))", "problem": 88, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn [S T] (clojure.set/union (apply disj S T) (apply disj T S)))", "problem": 88, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "#(set (keys (filter (fn [[k v]] (= (count v) 1)) \n                   (group-by identity (concat % %2))\n                    )))", "problem": 88, "user": "4faa5735e4b081705acca1ee"}, {"code": "#(set (concat (remove %2 %1) (remove %1 %2)))", "problem": 88, "user": "5141bc82e4b02fd87f5064c5"}, {"code": "(fn [s1, s2] (set (filter #(not (and (contains? s1 %) (contains? s2 %))) (concat s1 s2))))", "problem": 88, "user": "4ed286d4535d44c135fd68d7"}, {"code": "#(into (set (remove %1 %2)) (set (remove %2 %1)))", "problem": 88, "user": "512d3304e4b040332b905b2d"}, {"code": "#(set (mapcat remove [% %2] [%2 %]))", "problem": 88, "user": "518696c1e4b0c40be512d708"}, {"code": "#(clojure.set/difference \n       (clojure.set/union %1 %2)  \n        (clojure.set/intersection %1 %2))", "problem": 88, "user": "517945dce4b0684c1c981a43"}, {"code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "51899891e4b0288ada3dbdab"}, {"code": "#(let [it (clojure.set/intersection %1 %2)]\n\t(set (into (remove it %1) (remove it %2))))", "problem": 88, "user": "51805d22e4b0e3fc13e244df"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "517b59b8e4b0925c997201d0"}, {"code": "(fn [col1 col2]\n     (let [coll (concat col1 col2)]\n       (->>\n        coll\n        (filter #(if-not ((set (map col1 col2)) %1) true false))\n        set)))\n\n;(fn [s1 s2]\n; (clojure.set/union\n;    (clojure.set/difference s1 s2)\n;    (clojure.set/difference s2 s1)))", "problem": 88, "user": "518ccf6be4b05e6c8537e386"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "517bc969e4b07ef0e56148d0"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(fn [s1 s2] (reduce (fn [acc x] (if (acc x) (into #{} (remove #{x} acc)) (into acc [x]))) s1 s2))", "problem": 88, "user": "5194cd85e4b05be8c43d2381"}, {"code": "#(set (concat (remove %2 %)\n              (remove % %2)))", "problem": 88, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn sym-diff [xs ys]\n  (letfn [(set-union [xs ys] (into xs ys))\n          (set-minus [xs ys]\n            (set (filter #(not (contains? ys %)) xs)))]\n    (set-union (set-minus xs ys) (set-minus ys xs))))", "problem": 88, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn [a b]\n  (let [inter  (clojure.set/intersection a b)]\n    (clojure.set/union (clojure.set/difference a inter) (clojure.set/difference b inter))))", "problem": 88, "user": "515ff4b9e4b0e2be8aa20bd9"}, {"code": "(fn [x y] (let [diff1 (clojure.set/difference x y)\n                diff2 (clojure.set/difference y x)]\n            (clojure.set/union diff1 diff2)))", "problem": 88, "user": "507a33dee4b08327cd804a68"}, {"code": "(fn\n  [x y]\n  (set (concat \n        (apply disj x y)\n        (apply disj y x))))", "problem": 88, "user": "51804bcbe4b04f45bde7d901"}, {"code": "(fn [c1 c2]\n  (set (remove\n         (set (map c1 c2))\n         (set (concat c1 c2))\n         )\n    )\n  )", "problem": 88, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "(fn [a b]\n  (set\n    (concat (remove #(b %) a)\n            (remove #(a %) b)) ))", "problem": 88, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                     (clojure.set/difference %2 %1))", "problem": 88, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "(fn [s1 s2]\n  (let [s (set (concat s1 s2))]\n    (set (filter #(false? (and (contains? s1 %) (contains? s2 %))) s))))", "problem": 88, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn f [a b]\n  (let [common (set (keep a b))\n        combined (set (concat a b))]\n    (set (remove common combined))))", "problem": 88, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn [set1 set2]\n  ;intersection of the sets gives the items in both sets, remove the\n  ;intersection from the union of them both, that should be\n  ;the answer. Just for fun, use the core, not the Set library.\n  (let [u ((comp set concat) set1 set2) ; the union of the sets\n        i ((comp set keep) set1 set2)] ; the intersection of the sets\n    (apply disj u i)\n  )\n)", "problem": 88, "user": "518e6966e4b051adb72789ec"}, {"code": "(fn [as bs]\n  (let [cs (clojure.set/union as bs)]\n    (set (for [c cs\n           :when (not \n                   (and \n                     (contains? as c) \n                     (contains? bs c)))]\n       c))))", "problem": 88, "user": "5073de20e4b054001656acca"}, {"code": "(fn [s1 s2]\n  (let [commons (set (filter s1 s2))]\n    (set\n      (filter #(not (commons %)) (concat s1 s2))\n    )\n  )\n)", "problem": 88, "user": "51473a70e4b0d520409ed394"}, {"code": "(fn [col1 col2] (reduce #(if-not (% %2) (conj % %2) (disj % %2 ) ) col1 col2))", "problem": 88, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [a b] \n  (let [left-only (fn [s1 s2] (filter #(not (contains? s2 %)) s1))]\n    (set (concat (left-only a b) (left-only b a))) ))", "problem": 88, "user": "5142e808e4b0c172af7558c9"}, {"code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "#(set (remove (set (filter % %2)) (clojure.set/union % %2)))", "problem": 88, "user": "5159849ce4b0394f658fe236"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "506ba58be4b0eda3100c090b"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "51a05bede4b0b292b01ee3f4"}, {"code": "(fn [a b] (let [xor #(and (not (and % %2)) (or % %2))] (reduce #(if (xor (a %2) (b %2)) (conj % %2) %) #{} (clojure.set/union a b))))", "problem": 88, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn [xs ys]\n        (let [c1 (remove xs ys)\n              c2 (remove ys xs)]\n          (set(concat c1 c2))))", "problem": 88, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "(fn [x y] (set (concat (filter (complement x) y) (filter (complement y) x))))", "problem": 88, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn diffs [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "5183f5d7e4b02826a645f393"}, {"code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "problem": 88, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "problem": 88, "user": "4f85a75ce4b033992c121c48"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "51ab1718e4b04e3dc0c27b2f"}, {"code": "#(set (concat (remove %2 %1) (remove %1 %2)))", "problem": 88, "user": "4fbf2818e4b081705acca317"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn [a b]\n  (set (filter\n   #(not (and (a %) (b %)))\n   (into a b))))", "problem": 88, "user": "50a2f901e4b029e8bace362a"}, {"code": "#(set (filter (fn [x] (not= (% x) (%2 x))) (clojure.set/union % %2)))", "problem": 88, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "problem": 88, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "(fn [a b]\n  (into #{}\n        (concat\n         (filter (complement a) b)\n         (filter (complement b) a)))\n  )", "problem": 88, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "#(clojure.set/union (clojure.set/difference % %2)\n                      (clojure.set/difference %2 %))", "problem": 88, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn [a b]\n  (apply disj \n         \n               (if \n                 (= b #{} )\n                 a \n                 (apply conj a b )\n                 )\n          \n               (set\n                (filter a b)\n                )\n          )\n         )", "problem": 88, "user": "518c5236e4b087e178201de0"}, {"code": "#(set (concat (filter (complement %2) %1) (filter (complement %1) %2)))", "problem": 88, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "(fn [s1 s2]\n \t(set (concat (filter (complement s1) s2) \n         \t\t   (filter (complement s2) s1))))", "problem": 88, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "problem": 88, "user": "515ead6be4b049add99a053e"}, {"code": "(fn [set-1 set-2] (let [sets (fn [set-a set-b] (reduce #(if (contains? set-b %2) %1 (conj %1 %2)) #{} set-a))] (clojure.set/union (sets set-1 set-2) (sets set-2 set-1))))", "problem": 88, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn [a b] \n  (set (filter #(not (and (contains? b %) (contains? a %))) (concat a b) ))\n  \n )", "problem": 88, "user": "51aeb1f4e4b09397d5109794"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "(fn [s1 s2]\n  (set \n   (concat (remove #(s1 %) s2) \n           (remove #(s2 %) s1))))", "problem": 88, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "(fn [a b] (let [f #(filter (comp not %) %2)](set (concat (f a b) (f b a)))))", "problem": 88, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "#(set (filter (complement (reduce (fn [cum item] (if (%2 item) (conj cum item) cum)) #{} %)) (set (concat % %2))))", "problem": 88, "user": "51bf4560e4b013aa0d74b817"}, {"code": "( fn [a b ] (set(map #(first %) (filter #( = (second %) 1  ) (frequencies (concat a b))))))", "problem": 88, "user": "51aa4eede4b04e3dc0c27b25"}, {"code": "(fn [s t]\n  (set (concat (filter #(not (contains? t %)) s)\n               (filter #(not (contains? s %)) t))))", "problem": 88, "user": "519db0ede4b037b32803f9b9"}, {"code": "(fn [a b]\n      (into (set (remove b a)) (remove a b)))", "problem": 88, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "51ab1da1e4b04e3dc0c27b30"}, {"code": "(fn [as bs]\n  (->>\n   (concat as bs)\n   (filter #(not (and (as %) (bs %))))\n   set))", "problem": 88, "user": "51b24defe4b02f8f128bb963"}, {"code": "#(into (apply disj % %2) (apply disj %2 %))", "problem": 88, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "#(set (remove (set (filter %1 %2)) (into %1 %2)))", "problem": 88, "user": "51bec919e4b013aa0d74b800"}, {"code": "#(cond\n  (empty? %) %2\n  (empty? %2) %\n  :else\n  (apply disj (apply conj % %2) (filter % %2)))", "problem": 88, "user": "518ad8fce4b06da86c1973c1"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "51c9c6cde4b09ce160bef5b1"}, {"code": "#(clojure.set/difference  (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "51c1d159e4b0d204dbe2ca18"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn [s1 s2]\n   (clojure.set/union \n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)))", "problem": 88, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(let [d clojure.set/difference] #(clojure.set/union (d %1 %2) (d %2 %1)))", "problem": 88, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "#(set (concat (remove (partial contains? %1) %2) (remove (partial contains? %2) %1)))", "problem": 88, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "(fn xorset [x1 x2] (set (for [i (concat x1 x2) :when (not= (x1 i) (x2 i))] i)))", "problem": 88, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "51c09719e4b0c9c82288293c"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn [a b]\n  (reduce #(if (contains? %1 %2)\n             (disj %1 %2)\n             (conj %1 %2))\n          a\n          b))", "problem": 88, "user": "51d10b1fe4b067c36548635e"}, {"code": "(fn [a b]\n    (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a))\n)", "problem": 88, "user": "51d1111ce4b067c36548635f"}, {"code": "(fn [x y] (let [mmm (fn myf [a b] (set (filter #(not (contains? b %)) a)))]\n            (set (concat (mmm x y) (mmm y x)))))", "problem": 88, "user": "518a8c4be4b0df82f5685903"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2%))", "problem": 88, "user": "514cfa27e4b019235f6c057d"}, {"code": "#(set (concat (for [x %1 :when (not (%2 x))] x) (for [x %2 :when (not (%1 x))] x)))", "problem": 88, "user": "51d4ed02e4b013d740b70dec"}, {"code": "#(set (into (filter (complement %1) %2) (filter (complement %2) %1)))", "problem": 88, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn [s1 s2] (set (filter (-> (filter s1 s2) set complement) (concat s1 s2))))", "problem": 88, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "problem": 88, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "#(into (apply disj % %2) (apply disj %2 %))", "problem": 88, "user": "511d6a01e4b022853b0e07a5"}, {"code": "(fn [a b] \n    (let [diff (fn [x y] (filter #(not (y %)) x))]\n      (set (concat (diff a b) (diff b a)))))", "problem": 88, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn [s1 s2] (reduce (fn [acc e] (let [f (if (contains? acc e) disj conj)] (f acc e))) s1 s2))", "problem": 88, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "(fn [a b]\n   (reduce \n     #(into %1 (if (not= (a %2) (b %2)) #{%2} #{}))\n     #{}\n     (into a b)))", "problem": 88, "user": "50bfd849e4b042992946c649"}, {"code": "#(clojure.set/difference (into % %2) (filter % %2))", "problem": 88, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn diff [a b]\n  (into (set (filter (complement b) a))\n        (filter (complement a) b)))", "problem": 88, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn [x y] (reduce (fn [ret i] (if (contains? ret i) (disj ret i) (conj ret i))) x y))", "problem": 88, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "51e00020e4b01188f0627534"}, {"code": "#(reduce disj (into %1 %2) (filter %1 %2))", "problem": 88, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "(fn sym-difference [first-set second-set]\n   (into (clojure.set/difference first-set second-set) (clojure.set/difference second-set first-set)))", "problem": 88, "user": "4ede0511535d10e5ff6f5330"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "51c8301ee4b07ef393169e4d"}, {"code": "(fn [a b] (set (concat (remove a b) (remove b a))))", "problem": 88, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "(fn [sa sb]\n  (clojure.set/union (clojure.set/difference sa sb) (clojure.set/difference sb sa)\n   ))", "problem": 88, "user": "51da7e49e4b02ceefd947768"}, {"code": "#(clojure.set/union \n(clojure.set/difference %1 %2)\n(clojure.set/difference %2 %1))", "problem": 88, "user": "51e3cf8ee4b0efabf93c02a3"}, {"code": "(fn symdif [c1 c2]\n  (reduce\n   #(if\n      (or (and (contains? c1 %2) (not (contains? c2 %2)))\n          (and (contains? c2 %2) (not (contains? c1 %2))))\n      (conj %1 %2)\n      %1\n      )\n     #{}\n    (into c1 c2)\n  )\n)", "problem": 88, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "(fn [s1 s2]\n    (clojure.set/union\n     (clojure.set/difference s1 s2)\n     (clojure.set/difference s2 s1))\n  )", "problem": 88, "user": "51e24a04e4b01e5198146430"}, {"code": "(fn [one two] (if (empty? one)\n                two\n                (if (empty? two)\n                  one\n                  (apply conj (clojure.set/difference one two) (seq (clojure.set/difference two one))))))", "problem": 88, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "#(set (concat (remove % %2) (remove %2 %) ))", "problem": 88, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn [s1 s2]\n  (let [r1 (filter s1 s2)\n        r2 (reduce disj s1 r1)\n        r3 (reduce disj s2 s1)]\n    (reduce conj r2 r3)))", "problem": 88, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "#(let [fm (fn [s se]\n  (filter (partial (comp not contains?) s) se))]\n  (set (into (fm % %2) (fm %2 %))))", "problem": 88, "user": "51eca2ace4b069f463c22cd0"}, {"code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "4ed152d5535d44c135fd68cc"}, {"code": "(fn sym-difference [s1 s2]\n   (clojure.set/union (clojure.set/difference s1 s2)\n          (clojure.set/difference s2 s1))\n   )", "problem": 88, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn [a b] \n  (into #{} (concat (filter (comp not a) b) (filter (comp not b) a))))", "problem": 88, "user": "4e74e119535d7a570dd295bc"}, {"code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference b a)\n                     (clojure.set/difference a b)))", "problem": 88, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "#(set (concat (filter (complement %1) %2) (filter (complement %2) %1)))", "problem": 88, "user": "4e3f480c535dc968683fc497"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (set (into s1 s2)) (filter s1 s2)))", "problem": 88, "user": "51df825de4b01188f062752b"}, {"code": "(fn [x y]\n  (set\n   (filter #(not (= (get x %) (get y %)))\n           (concat x y))))", "problem": 88, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "problem": 88, "user": "50d882d4e4b01f0871336e69"}, {"code": "(fn [x y ] \n\t(reduce  #(disj %1 %2)\t(clojure.set/union x y ) (clojure.set/intersection x y)))", "problem": 88, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn\n  [a b]\n  (let [set-xor (fn [k]\n                  (let [ca (contains? a k)\n                        cb (contains? b k)]\n                    (or (and ca (not cb))\n                        (and cb (not ca)))))]\n    (set (filter set-xor (into a b)))))", "problem": 88, "user": "511b233ae4b07ab9ec456180"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "500ec210e4b00fff93030f9d"}, {"code": "#(into (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "50e90813e4b033b0e80d11e7"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "51f28a64e4b0210f90e7454e"}, {"code": "#(clojure.set/union (clojure.set/difference %2 %1) (clojure.set/difference %1 %2))", "problem": 88, "user": "51f13b80e4b06a20a2523f38"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "5046ee3ee4b03b02161376b4"}, {"code": "(fn sd [s1 s2]\n  (let [u (filter s1 s2)]\n    (into (apply disj s1 u) (apply disj s2 u))))", "problem": 88, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "(fn ab [a b]\n  (loop [r a s b]\n    (if (= (count s) 0) \n      r\n      (if  (contains? r (first s))\n           (recur (disj r (first s)) (rest s))\n           (recur (conj r (first s)) (rest s))\n      )\n    )\n  )\n)", "problem": 88, "user": "518aec06e4b06da86c1973c2"}, {"code": "(fn [a b]\n  (clojure.set/difference\n   (clojure.set/union a b)\n   (clojure.set/intersection a b)))", "problem": 88, "user": "51e0198ee4b01188f0627539"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4fa3c137e4b081705acca193"}, {"code": "(fn [s1 s2]\n    (reduce disj (set (concat s1 s2)) (filter #(s1 %1) s2)))", "problem": 88, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "#(set (concat (clojure.set/difference % %2) (clojure.set/difference %2 %)))", "problem": 88, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "#(set `(~@(% %2 %3) ~@(% %3 %2))) remove", "problem": 88, "user": "51fa1375e4b0f1313d4689c9"}, {"code": "(fn [a b]\n  (reduce conj\n          (reduce disj a \n                  (map a b))\n          (reduce disj b \n                  (map b a))))", "problem": 88, "user": "4e781a2e535d324fb2983d74"}, {"code": "#((comp set concat)  (apply disj %1 %2) (apply disj %2 %1))", "problem": 88, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn [a b]\n  (clojure.set/union\n    (clojure.set/difference a b)\n    (clojure.set/difference b a)))", "problem": 88, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "#(set (remove (clojure.set/intersection % %2) (clojure.set/union % %2)))", "problem": 88, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "51f7dd27e4b06ff1c25c52dc"}, {"code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "problem": 88, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [s t]\n  (letfn [(diff [s t]\n            (remove t s))]\n    (into (into #{} (diff s t)) (diff t s))))", "problem": 88, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "(fn [xs ys] \n  (into #{} \n   (concat \n    (filter #(not (some #{%} ys)) xs) \n    (filter #(not (some #{%} xs)) ys)\n    )\n  )\n)", "problem": 88, "user": "51897709e4b0288ada3dbdaa"}, {"code": "(fn symdiff [collx colly]\n  (disj (set\n    (concat\n      (map #(if (some #{%} colly) nil %) collx)\n      (map #(if (some #{%} collx) nil %) colly))) nil))", "problem": 88, "user": "51f82769e4b09be9c177e527"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "(fn [s1 s2]\n  (into #{}\n    (concat\n     (for [x s1 :when (false? (contains? s2 x))] x)\n     (for [x s2 :when (false? (contains? s1 x))] x))))", "problem": 88, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn [a b]\n  (set (filter #(or (and (contains? a %)\n                         (not (contains? b %)))\n                    (and (contains? b %)\n                         (not (contains? a %))))\n               (clojure.set/union a b))))", "problem": 88, "user": "52091d57e4b0e152394d76f0"}, {"code": "#(clojure.set/union \n  (clojure.set/difference %1 %2) \n  (clojure.set/difference %2 %1))", "problem": 88, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn sym-diff [x y]\n  (letfn [(not-both? [e] (not (and (x e) (y e))))]\n    (set (concat (filter not-both? y) (filter not-both? x)))))", "problem": 88, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "; Without using clojure.set we find the elements of one not in the other and vice versa and create a set of them\n(fn [s1 s2]\n  (let [a (for [x s2 :when (not (s1 x))] x)\n        b (for [x s1 :when (not (s2 x))] x)]\n    (set (concat a b))\n  ))", "problem": 88, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn [s1 s2]\n  (set\n   (concat (filter (complement s2) s1)\n           (filter (complement s1) s2))))", "problem": 88, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) \n                    (clojure.set/difference %2 %))", "problem": 88, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn [x y]\n  (set (concat\n        (filter (complement x) y)\n        (filter (complement y) x))))", "problem": 88, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "5208a3a2e4b0301979a6c235"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "51fa7154e4b0f1313d4689da"}, {"code": "(fn [x y] (apply disj (clojure.set/union x y)(clojure.set/intersection x y)))", "problem": 88, "user": "52016690e4b0b2e020a18f0f"}, {"code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))\n  )", "problem": 88, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn not-in-both\n  [a b]\n  (set (filter #(not (and (a %) (b %))) (into a b))))", "problem": 88, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn [s1 s2]\n  (set\n   (concat\n    (for [x s1 :when (not (contains? s2 x))] x)\n    (for [x s2 :when (not (contains? s1 x))] x))))", "problem": 88, "user": "51ce1320e4b0e42293a22551"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (map %1 %2))", "problem": 88, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "(fn [s1 s2]\n  (reduce #(if (and (s1 %2) (s2 %2))\n             %\n             (conj % %2))\n          #{} (into s1 s2)))", "problem": 88, "user": "51db1abae4b094966a2cd685"}, {"code": "(fn symmetric-difference\n  [a b]\n  (into\n     (set(remove a b))\n     (remove b a)))", "problem": 88, "user": "51f9527fe4b09be9c177e549"}, {"code": "#(into (clojure.set/difference %1 %2)\n              (clojure.set/difference %2 %1))", "problem": 88, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn sym-diff [s1 s2]\n  (clojure.set/union \n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)\n  ))", "problem": 88, "user": "513fab65e4b00f13ea1bd891"}, {"code": "#(set(concat (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn [s1 s2]\n  (let [t1 (filter (fn [x] (not (contains? s2 x))) s1)\n\t    t2 (filter (fn [x] (not (contains? s1 x))) s2)]\n    (set (clojure.set/union t1 t2))))", "problem": 88, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference\n   (clojure.set/union s1 s2)\n   (clojure.set/intersection s1 s2)))", "problem": 88, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn [a b] \n  (clojure.set/difference \n    (clojure.set/union a b) \n    (clojure.set/intersection a b)))", "problem": 88, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn[set1 set2]\n  (reduce conj \n          (loop [v1 (seq set1) ans #{}]\n            (if (empty? v1)\n              ans\n              (recur (next v1)\n                    (if (not (contains? set2 (first v1)))\n                      (conj ans (first v1))\n                      ans))))\n           (loop [v2 (seq set2) ans #{}]\n            (if (empty? v2)\n              ans\n              (recur (next v2)\n                    (if (not (contains? set1 (first v2)))\n                      (conj ans (first v2))\n                      ans))))        \n  ))", "problem": 88, "user": "52196842e4b0890f2f822bfa"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "#(set (concat (apply disj %2 %) (apply disj % %2)))", "problem": 88, "user": "5216933be4b000d124d989cf"}, {"code": "(fn [a b]\n  (let [i (clojure.set/intersection a b)\n        u (clojure.set/union a b)]\n    (clojure.set/difference u i)))", "problem": 88, "user": "51ae350fe4b09397d5109790"}, {"code": "(fn [a b]\n  (loop [vs (if (empty? b)\n              a\n              (apply conj a b))\n         rs #{}]\n    (cond\n     (empty? vs) rs\n     (and (a (first vs)) (b (first vs))) (recur (rest vs) rs)\n     (or (a (first vs)) (b (first vs))) (recur (rest vs) (conj rs (first vs)))\n     :else (recur (rest vs) rs))))", "problem": 88, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn sd [s1 s2] (set (concat (remove s1 s2) (remove s2 s1))))", "problem": 88, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "5065faf9e4b0313a384e5645"}, {"code": "(fn [s1 s2]\n  (let [f clojure.set/difference]\n    (set (concat (f s1 s2) (f s2 s1)))))", "problem": 88, "user": "519c4111e4b0a1d87b003458"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "5224a46ce4b01819a2de42e5"}, {"code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "problem": 88, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "5151c184e4b03e678e393add"}, {"code": "(fn sym-diff [set1 set2]\n  (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))", "problem": 88, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "#(set (concat\n  (filter (comp not (partial contains? %)) %2)\n  (filter (comp not (partial contains? %2)) %)))", "problem": 88, "user": "522454f4e4b01819a2de42d3"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "(fn solve [set-a set-b]\n  (clojure.set/difference (clojure.set/union set-a set-b) (clojure.set/intersection set-a set-b)))", "problem": 88, "user": "510591dde4b06d28cacc92eb"}, {"code": "#(set (concat (reduce disj % %2) (reduce disj %2 %)))", "problem": 88, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "(fn [x y] (set (filter \n     #(not (and\n        (x %)\n        (y %)))\n  (concat x y))))", "problem": 88, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "#(set (remove (comp % %2) (into % %2)))", "problem": 88, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn [a b] (set (concat (clojure.set/difference a b) (clojure.set/difference b a))))", "problem": 88, "user": "52244a77e4b01819a2de42d1"}, {"code": "#(clojure.set/union\n   (clojure.set/difference %1 %2)\n   (clojure.set/difference %2 %1))", "problem": 88, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "(fn \n  [a b]\n  (set (concat (clojure.set/difference a b) \n               (clojure.set/difference b a))))", "problem": 88, "user": "50573ed8e4b0012181721987"}, {"code": "(fn [col1 col2]\n  (set (clojure.set/union (for [x col1 :when (not (contains? col2 x))] x) \n                     \t  (for [x col2 :when (not (contains? col1 x))] x))))", "problem": 88, "user": "5131d817e4b06942423563ca"}, {"code": "(fn[a b]\n   (clojure.set/union\n    (clojure.set/difference a b)\n    (clojure.set/difference b a)))", "problem": 88, "user": "506c0a02e4b0eda3100c090d"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn [x y]\n (clojure.set/union \n  (clojure.set/difference x y)\n  (clojure.set/difference y x)))", "problem": 88, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference\n   (clojure.set/union s1 s2)\n   (clojure.set/intersection s1 s2)))", "problem": 88, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn [set1 set2]\n  (letfn [(sym-diff [s1 s2 val]\n                    (or (and (contains? s1 val) (not (contains? s2 val)))\n                        (and (not (contains? s1 val)) (contains? s2 val))))]\n    (set (filter #(sym-diff set1 set2 %) (clojure.set/union set1 set2)))))", "problem": 88, "user": "51857e64e4b0da5a5be3babe"}, {"code": "(fn [a b]\n  (let [u (clojure.set/union a b)\n        i (clojure.set/intersection a b)]\n    (clojure.set/difference u i)))", "problem": 88, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "#(set (remove (set (map %1 %2)) (concat %1 %2)))", "problem": 88, "user": "51197750e4b057cba170bc99"}, {"code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "523b4e91e4b07becd5be21ef"}, {"code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "problem": 88, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "523b10dfe4b02f719975bdb8"}, {"code": "(fn [s1 s2] (into #{} (concat (seq (filter #(not (contains? s2 %)) (seq s1))) (seq (filter #(not (contains? s1 %)) (seq s2))) )))", "problem": 88, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn symm-diff [set1 set2]\n   (reduce\n     #(if (or \n        (and \n          (contains? set1 %2)\n          (not (contains? set2 %2)))\n         (and \n          (contains? set2 %2)\n           (not (contains? set1 %2)))\n       ) (conj %1 %2) %1)\n     #{} (set (concat set1 set2))))", "problem": 88, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn [s1 s2]\n  (let [s1_2 (filter #(nil? (s1 %)) s2)\n        s2_1 (filter #(nil? (s2 %)) s1) ]\n    (set (concat s1_2 s2_1))))", "problem": 88, "user": "523bd9c0e4b07becd5be2201"}, {"code": "(fn [x y] (clojure.set/union (set (filter #(not (x %)) y)) (set (filter #(not (y %)) x))))", "problem": 88, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn [a b] (set (filter #(not= (a %) (b %)) (clojure.set/union a b))))", "problem": 88, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn [a b]\n  (reduce (fn [r e] (if (contains? r e) (disj r e) (conj r e))) a b))", "problem": 88, "user": "50ebd63ce4b04edc3377703c"}, {"code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "problem": 88, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn symmetric-difference [st1 st2]\n  (clojure.set/difference (clojure.set/union st1 st2)\n                          (clojure.set/intersection st1 st2)))", "problem": 88, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [x y] (reduce (fn [s k] (if (contains? s k) (disj s k) (conj s k) ) ) x y) )", "problem": 88, "user": "51e28063e4b08e53a149f0f2"}, {"code": "(fn [a b]\n  (let [x (clojure.set/difference a b)\n        y (clojure.set/difference b a)]\n    (clojure.set/union x y)))", "problem": 88, "user": "51d08d67e4b067c365486351"}, {"code": "(fn sym-diff [set1 set2]\n  (reduce (fn [x [y z]] (if (= 1 (count z))\n                         (conj x (first z))\n                         x))\n          #{}\n          (group-by identity (concat set1 set2))))", "problem": 88, "user": "511e763ce4b03e81d390ac29"}, {"code": "#(let [i (clojure.set/intersection % %2)]\n  (clojure.set/union (clojure.set/difference % i) (clojure.set/difference %2 i)))", "problem": 88, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn [a b]\n  (set (concat\n             (filter (complement a) b)\n             (filter (complement b) a))))", "problem": 88, "user": "5213d81de4b0961f15ac4d73"}, {"code": "(fn disjunction [a b]\n (set (remove (set (filter a b)) (into a b)))\n )", "problem": 88, "user": "5228f870e4b0186687e23a98"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2)\n                          (clojure.set/intersection s1 s2)))", "problem": 88, "user": "52487654e4b05ef8e38e63dc"}, {"code": "(fn [set1 set2]\n    (loop [ result [] coll (sort (concat set1 set2))]\n        (if (empty? coll) (set (filter #(not (nil? %)) result))\n          (let [ [e1 e2] coll drop-num (if (= e1 e2) 2 1)] \n            (print [e1 e2])\n            (recur (conj result (if (= drop-num 1) e1))  (drop drop-num coll))\n          ) \n        )\n     )\n)", "problem": 88, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn [s1 s2] (set (filter #(not= (s1 %) (s2 %)) (concat s1 s2))))", "problem": 88, "user": "523a9fc9e4b081681ca7adca"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [a b](into #{} (concat (filter #(not (a %))  b) (filter #(not (b %))  a))))", "problem": 88, "user": "4f148418535d64f60314643a"}, {"code": "(fn [s1 s2]\n   (->> (into (into []  s1 ) s2)\n        (frequencies)\n        (filter #(= 1 (second %)))\n        (map #(first %))\n        (into #{})\n        )\n\n)", "problem": 88, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn [s s2] \n  (reduce #(if (= (s %2) (s2 %2)) % (conj % %2)) #{} (concat s s2)))", "problem": 88, "user": "523b1988e4b02f719975bdbc"}, {"code": "#(set (filter (fn [x] (or (and (%1 x) (not (%2 x))) (and (not (%1 x)) (%2 x)))) (clojure.set/union %1 %2)))", "problem": 88, "user": "5007c7c7e4b0b17c647f5226"}, {"code": "(fn sym-diff [x y]\n  (into (clojure.set/difference x y) (clojure.set/difference y x)))", "problem": 88, "user": "523b82efe4b07becd5be21f0"}, {"code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "521dceeae4b050d5da042802"}, {"code": "(fn [l1 l2]\n   (letfn [(filt-one [from to]\n             (filter #(not (from %)) to))]\n     (apply sorted-set (concat (filt-one l1 l2) (filt-one l2 l1)))))", "problem": 88, "user": "523288fee4b035af41902a88"}, {"code": "#(set \n  (concat \n   (clojure.set/difference %1 %2) \n   (clojure.set/difference %2 %1)))", "problem": 88, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "problem": 88, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn [a b]\n  (into (set (filter #(not (a %)) b))\n         (filter #(not (b %)) a)))", "problem": 88, "user": "4f048f67535dcb61093f6bd3"}, {"code": "#(clojure.set/union (clojure.set/difference % %2)  (clojure.set/difference  %2 %))", "problem": 88, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "#(set (remove (set (filter % %2)) (into % %2)))", "problem": 88, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn\n  [s1 s2]\n  (let [i (clojure.set/intersection s1 s2)]\n    (set (filter #(not (i %)) (clojure.set/union s2 s1)))))", "problem": 88, "user": "4fe8e719e4b0547ebccb2430"}, {"code": "(fn [x y] (set (into (filter #(not (x %)) y) (filter #(not (y %)) x))))", "problem": 88, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn dif [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn [s t] (clojure.set/union (clojure.set/difference s t) (clojure.set/difference t s)))", "problem": 88, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "52527192e4b0541d1855b8af"}, {"code": "(fn [st1 st2]\n \t(clojure.set/union\n \t (clojure.set/difference st1 st2)\n \t (clojure.set/difference st2 st1)\n \t)\n)", "problem": 88, "user": "5029f263e4b023940c84aa45"}, {"code": "(fn [x y] (let [i (clojure.set/intersection x y)\n                x1 (clojure.set/difference x i)\n                y1 (clojure.set/difference y i)]\n            (clojure.set/union x1 y1)))", "problem": 88, "user": "510c123be4b078ea7192110e"}, {"code": "(fn [x y] (set (concat (filter #(not (contains? y %)) x) (filter #(not (contains? x %)) y))))", "problem": 88, "user": "5248c4c7e4b05ef8e38e63e8"}, {"code": "#(set (clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "problem": 88, "user": "525a7b9fe4b0cb4875a45cf5"}, {"code": "(fn\n  [set1 set2]\n  (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2)))", "problem": 88, "user": "4ef7a483535dced4c769f258"}, {"code": "reduce (fn [x y] (if (contains? x y) (disj x y) (conj x y)\n                  ))", "problem": 88, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "(fn [s1 s2]\n  (into #{}\n        (into \n         (filter #(not (s2 %)) s1)\n         (filter #(not (s1 %)) s2))))", "problem": 88, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "5229211be4b04c906c9c6a63"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "5259a16ee4b0cb4875a45ce1"}, {"code": "(fn [a b] (reduce conj (apply disj a b) (apply disj b a)))", "problem": 88, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "(fn [a b]\n\n    (let [all (apply merge a b)\n          t (fn [a b c] (or (not (contains? a c)) (not (contains? b c))))\n          d (fn [do val] (when do val))]\n      (into #{} (filter #(not (nil? %)) (map #(d (t a b %) %) all)))))", "problem": 88, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn [s1 s2]\n  (set (concat\n   (filter #(not (contains? s2 %)) s1)\n   (filter #(not (contains? s1 %)) s2)\n   ))\n  )", "problem": 88, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "problem": 88, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(fn [a b]\n   (let [diff (fn  [x y]\n                (reduce\n                 (fn [result i]\n                   (if (some #{i} x)\n                     result\n                     (conj result i)))\n                 #{}\n                 y))]\n     (set (concat (diff a b) (diff b a)))))", "problem": 88, "user": "52090567e4b0e152394d76ed"}, {"code": "(fn [s1 s2] (set (concat (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))))", "problem": 88, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn [s1 s2]\n\t\t(set (concat\n\t\t (filterv #(not (get s2 %)) s1)\n\t\t (filterv #(not (get s1 %)) s2))))", "problem": 88, "user": "51f2851fe4b0210f90e7454b"}, {"code": "(fn [s1 s2] \n  (set\n  (map first \n   (keep \n    #(if (= 1 (count %)) % nil) \n    (partition-by identity (sort (concat s1 s2)))))))", "problem": 88, "user": "52655949e4b03e8d9a4a710b"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "problem": 88, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "#(clojure.set/difference \n   (clojure.set/union % %2) \n   (clojure.set/intersection % %2))", "problem": 88, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn xor-set [lset rset]\n  (cond\n   (empty? lset) rset\n   (empty? rset) lset\n   :else \n   (let [un (clojure.set/intersection lset rset)]\n     (apply conj (apply disj lset un) (apply disj rset un)))))", "problem": 88, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [set1 set2]\n\t(reduce\n     (fn [s el]\n       (if (contains? s el)\n         (disj s el)\n         (conj s el)\n         )\n       )\n     set1 set2)\n\t)", "problem": 88, "user": "522d3a16e4b0e26240291d50"}, {"code": "(fn [s1 s2] (set (filter #(not= (contains? s1 %) (contains? s2 %))(concat s1 s2))))", "problem": 88, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [s1 s2]\n  (apply disj (clojure.set/union  s1 s2)\n  (clojure.set/intersection s1 s2)))", "problem": 88, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn [a b]\n(letfn [(f [a b] (set (filter (comp not b) a)))]\n  (set (concat (f a b) (f b a)))\n  )\n)", "problem": 88, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn [a b]\n  (set (filter #(not (some #{%} \n                           (for [x a y b :when (= x y)] x))) \n               (concat a b))))", "problem": 88, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": "(fn symmDiff [set1 set2]\n  (clojure.set/union\n    (clojure.set/difference set1 set2)\n    (clojure.set/difference set2 set1)))", "problem": 88, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn [s1 s2] (set (concat (remove s1 s2) (remove s2 s1))))", "problem": 88, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "#(apply clojure.set/difference\n        ((juxt clojure.set/union clojure.set/intersection) %1 %2))", "problem": 88, "user": "525431dfe4b0541d1855b970"}, {"code": "(fn sym-diff [xs ys]\n  (let [intersection (set (filter ys (filter xs ys)))\n        union (concat xs ys)]\n    (set (filter #(not (intersection %)) union))))", "problem": 88, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn [a b]\n  (clojure.set/union (set (remove a b)) (set (remove b a))))", "problem": 88, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn [ss1 ss2]\n  (let [\n        [s1 s2] (if (>= (count ss1) (count ss2)) [ss1 ss2] [ss2 ss1])\n        u (reduce conj s1 s2)\n        d1 (reduce disj u s1)\n        d2 (reduce disj u s2)\n        ] (reduce conj d1 d2)\n    )\n  )", "problem": 88, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [x y] (clojure.set/union\n           \t(reduce (fn [acc i] (if (contains? y i) acc (conj acc i))) #{} x)\n  \t\t\t(reduce (fn [acc i] (if (contains? x i) acc (conj acc i))) #{} y))\n)", "problem": 88, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "(fn symdif [s1 s2] \n    (set (filter #(not= (s1 %1) (s2 %1)) (concat s1 s2))))", "problem": 88, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "523c6451e4b07becd5be2222"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "#(clojure.set/difference \n  (clojure.set/union % %2)\n  (clojure.set/intersection % %2))", "problem": 88, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn a [s1 s2] (set(concat (keep #(if-not(s2 %) %) s1) (keep #(if-not(s1 %) %) s2))))", "problem": 88, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "problem": 88, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn [x y] (set(filter #(not(contains? (clojure.set/intersection x y) %)) (concat x y))))", "problem": 88, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "#(into #{} (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "problem": 88, "user": "5152bc4ee4b001f44f99bfef"}, {"code": "#(into (clojure.set/difference %2 %1)\n       (clojure.set/difference %1 %2))", "problem": 88, "user": "512318b6e4b03b44edbed433"}, {"code": "(fn [x y] \n  (set\n   (let [all (clojure.set/union x y)]\n    (filter \n     (fn [n] \n       (not \n        (and \n         (contains? x n) \n         (contains? y n))))\n     all))))", "problem": 88, "user": "4e920f44535dbda64a6f6afd"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4df20dda535d08e6dec9fe23"}, {"code": "(fn [l r]\n   (clojure.set/difference (clojure.set/union l r) (clojure.set/intersection l r)))", "problem": 88, "user": "524f213be4b0541d1855b7ff"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "527675cbe4b03e8d9a4a74e2"}, {"code": "(fn [a b] (set (keys (filter #(-> % val (= 1)) (merge-with + (frequencies a) (frequencies b))))))", "problem": 88, "user": "525c575be4b0cb4875a45d38"}, {"code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "problem": 88, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "51f4d46ee4b0fca5e8b48243"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "519ef784e4b087743fad2198"}, {"code": "(fn mySymmetricDifference2\n  [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4ff83003e4b0678c553fc396"}, {"code": "#(let [i (clojure.set/intersection % %2)]\n   (clojure.set/union (clojure.set/difference % i)\n                      (clojure.set/difference %2 i)))", "problem": 88, "user": "522a01ade4b0590a43906ced"}, {"code": "(fn [set1 set2]\n  (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2)))", "problem": 88, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "(fn [a b]\n  (reduce into #{} [(remove a b)\n                    (remove b a)]))", "problem": 88, "user": "52890634e4b0239c8a67ae5e"}, {"code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "problem": 88, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "(fn [c1 c2]\n   (set (concat (filter (complement c1) c2)\n                (filter (complement c2) c1))))", "problem": 88, "user": "527ba29de4b03e8d9a4a7594"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference\n          (clojure.set/union s1 s2)\n          (clojure.set/intersection s1 s2)))", "problem": 88, "user": "5078d366e4b08327cd804a5b"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "506cad7de4b0a302964c548e"}, {"code": "(fn sym-diff [s1 s2]\n  (let [xs (into (into [] s1) s2)\n        freq (frequencies xs)]\n    (into #{}\n          (map first (filter #(= (second %) 1)\n                             freq)))))", "problem": 88, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn [x y]\n  (clojure.set/difference \n   (clojure.set/union x y) \n   (clojure.set/intersection x y)\n   )\n  )", "problem": 88, "user": "528ce039e4b0239c8a67aebc"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "51e38568e4b0c611d6113e43"}, {"code": "#(apply disj (clojure.set/union %1 %2) (map %1 %2))", "problem": 88, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn [c1 c2] (into (apply disj c1 c2) (apply disj c2 c1)) )", "problem": 88, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "5290257ae4b0239c8a67af03"}, {"code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "528bba38e4b0239c8a67aea9"}, {"code": "(fn [a b] (into #{} (concat (remove a b) (remove b a))))", "problem": 88, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "#(clojure.set/difference\n  (clojure.set/union % %2)\n  (clojure.set/intersection % %2)\n  )", "problem": 88, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "(fn [p q]\n  (let [diff (clojure.set/intersection p q)\n        diff-p (clojure.set/difference p diff)\n        diff-q (clojure.set/difference q diff)]\n    (clojure.set/union diff-p diff-q)))", "problem": 88, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "(fn [s1 s2] (set (clojure.set/union (filter (complement (partial contains? s1)) s2)\n                          (filter (complement (partial contains? s2)) s1)\n                          )))", "problem": 88, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn [a b] (set (filter #(not= (a %) (b %)) (clojure.set/union a b))))", "problem": 88, "user": "528a791ae4b0239c8a67ae77"}, {"code": "(fn [a b]\n  (set (concat (filter #(not (a %)) b)\n               (filter #(not (b %)) a))))", "problem": 88, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn my-difference2 [coll1 coll2] (reduce disj (set (concat coll1 coll2)) ((fn intersection [x y] (if (< 0 (count x)) \n                                                                                       ((fn my-c [i j k] (if (empty? (filter (fn eq [m] (if (= m k)\n                                                                                                                                          true\n                                                                                                                                          false)) j)) \n                                                                                                           i   \n                                                                                                           (conj i k))) (intersection (rest x) y) y (first x)) \n                                                                                       #{})) coll1 coll2)))", "problem": 88, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "#(clojure.set/union\n       (apply disj %1 %2)\n       (apply disj %2 %1))", "problem": 88, "user": "50377d53e4b0af0658af77ad"}, {"code": "(fn symdif [s1 s2]\n  (clojure.set/union\n  \t(set (for [e1 s1\n        \t   :when (nil? (s2 e1))] e1))\n    (set (for [e2 s2\n               :when (nil? (s1 e2))] e2))))", "problem": 88, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "51c214bce4b0d204dbe2ca1c"}, {"code": "(fn [s1 s2]\n  (let [inter (clojure.set/intersection s1 s2)]\n    (apply clojure.set/union (map #(clojure.set/difference % inter) [s1 s2]))))", "problem": 88, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn [a b] (into #{} (concat (filter (complement a) b) (filter (complement b) a))))", "problem": 88, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "reduce #((if (% %2) disj conj) % %2)", "problem": 88, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn sd [s1 s2]\n    (clojure.set/union \n     (clojure.set/difference s1 s2)\n     (clojure.set/difference s2 s1)))", "problem": 88, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "#(set (mapcat identity [(apply disj %1 %2) (apply disj %2 %1)]))", "problem": 88, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn [s1 s2]\n  (set (concat (remove s1 s2) (remove s2 s1))))", "problem": 88, "user": "4f0f36a7535d0136e6c22336"}, {"code": "#(set (concat (clojure.set/difference % %2) (clojure.set/difference %2 %)))", "problem": 88, "user": "51929214e4b08962174cf74c"}, {"code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "problem": 88, "user": "52a28e1ce4b04e0c58e87bf0"}, {"code": "#(clojure.set/union\n       (clojure.set/difference %1 %2) (clojure.set/difference %2 %1) )", "problem": 88, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn [s1 s2]\n  (clojure.set/union\n   (reduce (fn [acc v]\n             (if-not (contains? s1 v)\n               (conj acc v)\n               acc))\n           #{} s2)\n   (reduce (fn [acc v]\n             (if-not (contains? s2 v)\n               (conj acc v)\n               acc))\n           #{} s1)))", "problem": 88, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "(fn symmetric-diff [X Y]\n  (set (concat (for [x X :when (not (contains? Y x))] x)\n          (for [y Y :when (not (contains? X y))] y)\n        )\n       )\n  )", "problem": 88, "user": "529a73bde4b02ebb4ef75096"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "#(into #{} (concat (apply disj %1 %2) (apply disj %2 %1)))", "problem": 88, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "#(set (mapcat remove [% %2] [%2 %]))", "problem": 88, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn sym-diff[x y](set (filter #(not (and (x %) (y %))) (clojure.set/union x y))))", "problem": 88, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "reduce (fn [r x] (if (r x) (disj r x) (conj r x)))", "problem": 88, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "527fd663e4b0757a1b1713de"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn [a b]\n  (let [a-f (filter #(not (b %)) a)\n        b-f (filter #(not (a %)) b)]\n    (set (concat a-f b-f))))", "problem": 88, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn\n  [set1 set2]\n  (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2)))", "problem": 88, "user": "52b94f15e4b07a9af57922ba"}, {"code": "#(-> (clojure.set/union %1 %2) (clojure.set/difference (clojure.set/intersection %1 %2)))", "problem": 88, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                     (clojure.set/difference %2 %1))", "problem": 88, "user": "51852961e4b0da5a5be3babb"}, {"code": "#(clojure.set/difference\n    (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "52a9154ee4b0c58976d9ac3b"}, {"code": "(fn [a b] (into #{} (filter #(not= (contains? a %) (contains? b %)) (concat a b))))", "problem": 88, "user": "52bb27fee4b07a9af57922df"}, {"code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b)\n                          (clojure.set/intersection a b)))", "problem": 88, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn symdif [a b]\n  (let [i (clojure.set/intersection a b)]\n    (clojure.set/union\n     (clojure.set/difference a i)\n     (clojure.set/difference b i))\n    ))", "problem": 88, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn symdiff [a b] (reduce  #(disj %1 %2) (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "problem": 88, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn symm-diff [arg-1 arg-2]\n  (let [un (clojure.set/union arg-1 arg-2) in (clojure.set/intersection arg-1 arg-2)]\n    (clojure.set/difference un in)\n  )\n )", "problem": 88, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "#(clojure.set/difference \n   (clojure.set/union %1 %2) \n   (clojure.set/intersection %1 %2))", "problem": 88, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn [xs1 xs2] (clojure.set/union (clojure.set/difference xs1 xs2) (clojure.set/difference xs2 xs1)))", "problem": 88, "user": "52baea85e4b07a9af57922d9"}, {"code": "#(clojure.set/difference \n  (clojure.set/union % %2)\n  (clojure.set/intersection % %2))", "problem": 88, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "#(clojure.set/difference \n (clojure.set/union % %2)\n  (clojure.set/intersection % %2))", "problem": 88, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "#(into (set (remove %2 %)) (remove % %2))", "problem": 88, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn [xs ys] (set (concat (clojure.set/difference xs ys) (clojure.set/difference ys xs))))", "problem": 88, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "(fn [a b] (into (apply disj a b) (apply disj b a)))", "problem": 88, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "#(into (apply disj % %2) (apply disj %2 %))", "problem": 88, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "(fn sdiff [x y]\n  (let [diff (fn [a b] (set (filter #(not (contains? a %)) b)))]\n    (set (concat \n          (diff x y)\n          (diff y x)))))", "problem": 88, "user": "50fe2420e4b03cd852b4e84a"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn [xs ys]\n  (set\n   \t(concat (filter #(not (xs %)) ys)\n            (filter #(not (ys %)) xs))))", "problem": 88, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn symmetric-difference [s1 s2]\n  (set ((partial filter #(not (and (contains? s1 %) (contains? s2 %))))\n        (into s1 s2))))", "problem": 88, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "5294e44de4b02ebb4ef75016"}, {"code": "#(set (for [z (into % %2) :when (not= z (% z) (%2 z))] z))", "problem": 88, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn [a b]\n  (reduce (fn [s x]\n            (if (or (and (a x) (not (b x)))\n                    (and (b x) (not (a x))))\n              (conj s x)\n              s)) \n          #{}\n          (concat a b)))", "problem": 88, "user": "4f80db02e4b033992c121bf9"}, {"code": "(fn [c1 c2]\n  (into #{} \n        (concat (filter #(not (contains? c2 %)) c1)\n                (filter #(not (contains? c1 %)) c2))))", "problem": 88, "user": "51eab308e4b0f1f103a0d150"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "52470d42e4b05ef8e38e6350"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "52b8af15e4b07a9af57922b5"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4dbf7a31535d020aff1edf75"}, {"code": "#(set (concat (remove %2 %) (remove % %2) ) )", "problem": 88, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2)(clojure.set/difference %2 %1))", "problem": 88, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "#(set (concat\n   (filter (complement (partial get %2)) %) \n   (filter (complement (partial get %)) %2)))", "problem": 88, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "(fn [x y] (set (map #(first %) (filter #(= 1 (second %)) (frequencies (concat x y))))))", "problem": 88, "user": "52c1bd29e4b07a9af579236a"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "52cca65be4b07d0d72b2736b"}, {"code": "(fn [xs ys]\n  (into #{} (concat (remove ys xs)\n                    (remove xs ys))))", "problem": 88, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "52cc85abe4b07d0d72b27367"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "52bdb689e4b07a9af5792306"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn [a b] (set (concat (filter #(not (contains? a %)) b) (filter #(not (contains? b %)) a))))", "problem": 88, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "(fn [x y] (set (mapcat #(if (= 1 (count %)) %) (partition-by identity (sort (into (vec x) (vec y)))))))", "problem": 88, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "(fn [set1 set2]\n  (set\t(into \n         \t(filter (comp not set1) set2)\n        \t(filter (comp not set2) set1))))", "problem": 88, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "#(clojure.set/union (clojure.set/difference %2 %1) (clojure.set/difference %1 %2))", "problem": 88, "user": "505345d9e4b0517ede0d0a06"}, {"code": "(fn m [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b))\n  )", "problem": 88, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn [a b]\n  (set  (mapcat #(if (and (a %) (b %)) nil [%]) (into a b))))", "problem": 88, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "#(let [i (set (filter %2 %))\n        u (reduce conj %2 %)]\n   (set (filter (fn [v] (not (i v))) u))\n   )", "problem": 88, "user": "508f97c0e4b0ea685a20f768"}, {"code": "(fn [a b]\n  (set (concat \n   (filter #(not (a %)) b) \n   (filter #(not (b %)) a)\n   ))\n)", "problem": 88, "user": "5094057fe4b097f48cc38593"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "52d340ebe4b099d49816f0c1"}, {"code": "reduce #(if (% %2) (disj % %2) (conj % %2))", "problem": 88, "user": "52bf29fde4b07a9af579232e"}, {"code": "(fn [x y]\n   (let [q (fn [a b]\n             (reduce \n               #(if(contains? a %2)%1(cons %2 %1) )\n               []\n               b\n               ))]\n       (set (concat (q x y) (q y x )))   \n     )\n  )", "problem": 88, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn [a b]\n  (set (filter #(or (and (a %) (not (b %))) (and (not (a %)) (b %))) (concat a b))))", "problem": 88, "user": "525cc137e4b0cb4875a45d46"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn [l1 l2]\n\t   (reduce #(if ((clojure.set/intersection l1 l2) %2) %1\n\t\t      (conj %1 %2))\n\t\t   #{}\n\t\t   (clojure.set/union l1 l2)))", "problem": 88, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn [set1 set2] (set (clojure.set/union (filter (fn [x] ((complement contains?) set2 x)) set1)\n                                   (filter (fn [x] ((complement contains?) set1 x)) set2))))", "problem": 88, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "(fn xor [a b]\n  (let [both (clojure.set/intersection a b)\n        total (clojure.set/union a b)]\n    (reduce #(if (not (both %2)) (conj % %2) %) #{} total)))", "problem": 88, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "#(into (apply (partial disj %1) %2) (apply (partial disj %2) %1))", "problem": 88, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "#(set (concat (apply (partial disj %) %2) (apply (partial disj %2) %)))", "problem": 88, "user": "52bdf6bde4b07a9af579230d"}, {"code": "(fn symdiff [as bs]\n  (clojure.set/union\n   (clojure.set/difference as bs)\n   (clojure.set/difference bs as)))", "problem": 88, "user": "52d3f666e4b09f7907dd1327"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "problem": 88, "user": "52c00263e4b07a9af579233f"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn [x y] (set (filter #(or (= (x %) nil) (= (y %) nil)) (into x y))))", "problem": 88, "user": "51a058dae4b0b292b01ee3f3"}, {"code": "(fn sdiff [a b] \n                 (\n                  (fn [y x]  (set (filter #(not (contains? x %)) y)))\n                  (set (concat a b))\n                  (set (filter #(contains? a %) b))\n                  ))", "problem": 88, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "#(into #{}\n      (concat(remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "(fn [a b] (set (into ((group-by a b) nil) ((group-by b a) nil))))", "problem": 88, "user": "52c1f404e4b07a9af5792370"}, {"code": "#(apply disj (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "52b02329e4b0c58976d9acc5"}, {"code": "#(set (mapcat remove [% %2] [%2 %]))", "problem": 88, "user": "52d10680e4b07d0d72b273c3"}, {"code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2)\n                               (clojure.set/difference s2 s1)))", "problem": 88, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "#(apply disj (into %1 %2) (filter %1 %2))", "problem": 88, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50d8de3fe4b01f0871336e72"}, {"code": "#(reduce (fn [diff new]\n           (if (and\n                (or (contains? % new) (contains? %2 new))\n                (not (and (contains? % new) (contains? %2 new))))\n             (conj diff new)\n             diff))\n           #{}\n           (concat % %2))", "problem": 88, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn f [s1 s2]\n  (loop [res #{}\n         x1 (first s1)\n         x2 (first s2)\n         r1 (rest s1)\n         r2 (rest s2)]\n    (cond\n     (and (nil? x1) (nil? x2)) res\n     (and (not (nil? x1)) (nil? (get s2 x1))) (recur (conj res x1) (first r1) x2 (rest r1) r2)\n     (nil? (get s1 x2)) (recur (conj res x2) x1 (first r2) r1 (rest r2))\n     true (recur res (first r1) (first r2) (rest r1) (rest r2)))))", "problem": 88, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "#(set (concat (clojure.set/difference % %2) (clojure.set/difference %2 %)))", "problem": 88, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn sd [s1 s2]\n  (let [sd1 (clojure.set/difference s1 s2)\n        sd2 (clojure.set/difference s2 s1)]\n    (clojure.set/union sd1 sd2)))", "problem": 88, "user": "52cf084ce4b07d0d72b27399"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "52df232fe4b09f7907dd13fc"}, {"code": "(fn [a b] \n  (clojure.set/union \n   \t(clojure.set/difference a b)\n    (clojure.set/difference b a)))", "problem": 88, "user": "515896f2e4b059418b97f0a8"}, {"code": "#(clojure.set/union \n   (clojure.set/difference % %2)\n   (clojure.set/difference %2 %))", "problem": 88, "user": "52e0e646e4b09f7907dd1416"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "504f3fa3e4b0a02f9cffde62"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn my-diff\n  [a b]\n  (clojure.set/union (clojure.set/difference a b)\n                     (clojure.set/difference b a)))", "problem": 88, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "#(into #{} (concat (filter (comp not %1) %2) (filter (comp not %2) %1)))", "problem": 88, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "#(clojure.set/union (apply disj %1 %2) (apply disj %2 %1))", "problem": 88, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "(fn [a b]\n  (set (concat (remove #(contains? a %) b)\n               (remove #(contains? b %) a))))", "problem": 88, "user": "4ef9b021535dced4c769f269"}, {"code": "#(clojure.set/union\n  (reduce disj %1 %2)\n  (reduce disj %2 %1))", "problem": 88, "user": "52d469c8e4b09f7907dd1330"}, {"code": "(fn [x y]\n  (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "problem": 88, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4fb99483e4b081705acca2da"}, {"code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1)\n  )", "problem": 88, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn[x,y](let [com (set (filter x y))]\n                    (set (concat (remove com x) (remove com y)))))", "problem": 88, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "#(into (into #{} (remove % %2)) (remove %2 %))", "problem": 88, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn diff [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "#(apply (partial disj (set (concat %1 %2))) (set (map %1 %2)))", "problem": 88, "user": "4ff78679e4b0678c553fc392"}, {"code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "problem": 88, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "#(set (keys (into {} (filter (fn [[k v]] (= v 1)) (frequencies (concat (vec %) (vec %2)))))))", "problem": 88, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn [c d] (clojure.set/difference (clojure.set/union c d) (clojure.set/intersection c d)))", "problem": 88, "user": "5224cf82e4b01819a2de42ef"}, {"code": "#(set (concat (filter (complement %) %2) (filter (complement %2) %)))", "problem": 88, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn [set-1 set-2]\n  (clojure.set/union (clojure.set/difference set-1 set-2)\n                     (clojure.set/difference set-2 set-1)))", "problem": 88, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "problem": 88, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn[x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "problem": 88, "user": "52f9ce6de4b047fd55836ff0"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "51b41150e4b0f094dd986fac"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn [c1 c2] \n  (let [ins (fn [s1 s2] \n             (reduce #(if ((complement contains?) s1 %2) (conj %1 %2) %1) #{} s2))]\n    (set (concat (ins c1 c2) (ins c2 c1)))))", "problem": 88, "user": "5220909fe4b0e6a83c89259f"}, {"code": "(fn [a b] \n  (set (concat \n        (filter #(not (some a #{%})) b)\n        (filter #(not (some b #{%})) a))))", "problem": 88, "user": "50f53694e4b057d4c52de881"}, {"code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "5082ccb3e4b06a522e8c7af3"}, {"code": "#(set(concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "52d838bee4b09f7907dd138b"}, {"code": "(fn [s t] \n  (clojure.set/difference (clojure.set/union s t) (clojure.set/intersection s t)))", "problem": 88, "user": "52d660eae4b09f7907dd1356"}, {"code": "(fn sym [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "problem": 88, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "52fcfeeee4b047fd55837027"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "5300b750e4b0d8b024fd3711"}, {"code": "#(set (map first \n           (filter (fn [[_ c]] (< c 2) ) (frequencies(concat (vec %1) (vec %2))))))", "problem": 88, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn symmetric-difference\n  [s1 s2]\n  (set (filter #(not= (contains? s1 %) (contains? s2 %)) (clojure.set/union s1 s2))))", "problem": 88, "user": "525d490ae4b0cb4875a45d70"}, {"code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "5300f68de4b0d8b024fd3714"}, {"code": "#(set (into (filter (comp not %) %2) (filter (comp not %2) %)))", "problem": 88, "user": "52c7f036e4b0c2d177d62126"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "#(clojure.set/union (clojure.set/difference %2 %1) (clojure.set/difference %1 %2))", "problem": 88, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn[set1 set2] \n    (clojure.set/union \n     (loop[s1 set1 s #{}] \n       (let[e (first s1)] \n         (if(empty? s1) \n           s \n           (recur (rest s1) (if(some #(= % e) set2) s (conj s e)))\n           )\n         )\n       ) \n      (loop[s2 set2 s #{}] \n        (let[e (first s2)] \n          (if(empty? s2) \n            s \n            (recur (rest s2) (if(some #(= % e) set1) s (conj s e)))\n            )\n          )\n        ) \n      )\n    )", "problem": 88, "user": "52e68e61e4b09f7907dd1479"}, {"code": "#(set (mapcat remove [% %2] [%2 %]))", "problem": 88, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn[set1 set2] (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))", "problem": 88, "user": "5301157ae4b0d8b024fd3717"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "52d7a930e4b09f7907dd1379"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1) )", "problem": 88, "user": "528f4462e4b0239c8a67aef0"}, {"code": "(fn [as bs] (into #{} (lazy-cat (filter #(not (contains? bs %)) as)  (filter #(not (contains? as %)) bs))))", "problem": 88, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn [set1 set2]\n  (clojure.set/union\n   (clojure.set/difference set1 set2)\n   (clojure.set/difference set2 set1)))", "problem": 88, "user": "4dad8a6dc9a9d6ed1399dc57"}, {"code": "(fn [a b]\n    (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "53070615e4b02e821686979e"}, {"code": "#(set (remove (fn [x] (and (%1 x) (%2 x))) (apply merge %1 %2)))", "problem": 88, "user": "52bdd135e4b07a9af579230a"}, {"code": "(fn sym-diff [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "problem": 88, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn[s r]\n  (letfn\n    ([f[s r]\n      (set\n       (filter #(not (r %)) s))])\n    (into (f s r) (f r s))))", "problem": 88, "user": "52f818a6e4b047fd55836fcc"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "5307e4ece4b02e82168697a9"}, {"code": "(fn [A B]\n  (clojure.set/union\n   (clojure.set/difference A B)\n   (clojure.set/difference B A)))", "problem": 88, "user": "530d85dee4b08068f379eca8"}, {"code": "(fn [s q]\n  (loop [r (clojure.set/difference s q)\n         q q]\n    (if (empty? q)\n        r\n        (recur (if (nil? (s (first q))) (conj r (first q)) r) (rest q)))))", "problem": 88, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn my-func\n  [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn [s1 s2] (letfn [\n(xor [bool1 bool2] (and (or bool1 bool2) (not (and bool1 bool2))))\n(symmetric-difference [set1 set2] (set (filter #(xor (contains? set1 %) (contains? set2 %)) (clojure.set/union set1 set2))))\n] (symmetric-difference s1 s2)))", "problem": 88, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "#(set (map first (filter (fn [item] (= 1 (count (second item)))) (group-by identity (concat  % %2)))))", "problem": 88, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "51aefceee4b09397d5109797"}, {"code": "#(into (clojure.set/difference %1 %2)\n       (clojure.set/difference %2 %1))", "problem": 88, "user": "52fb903ee4b047fd5583700b"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "530e9729e4b08068f379ecbc"}, {"code": "#(into (clojure.set/difference %2 %) (clojure.set/difference % %2))", "problem": 88, "user": "53034738e4b0d8b024fd373e"}, {"code": "(fn [s1 s2]\n      (let [\n            minus (fn [so st]\n                    (apply disj so st)\n                    )\n            ]\n        (reduce conj (minus s1 s2) (minus s2 s1) )\n        )\n      )", "problem": 88, "user": "51f81925e4b09be9c177e526"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn [s1 s2]\n  (letfn \n    [(difx \n      [bs cs]\n      (if (empty? cs) #{}\n        (let [fe (first cs) re (clojure.set/difference cs #{fe})\n              difxre (difx bs re)]\n          (if (contains? bs fe)\n            difxre (conj difxre fe))\n          )))]\n    (clojure.set/union (difx s1 s2) (difx s2 s1))\n    ))", "problem": 88, "user": "52faec2ee4b047fd55837004"}, {"code": "(fn symdif\n  ([x y] (set (concat (symdif x y 0) (symdif y x 0))))\n  ([x y z]\n  (if (and (empty? x) (= z 0))\n    []\n    (if (some #(= (first x) %) y)\n      (set (concat (symdif (rest x) y 0)))\n      (set (concat (list (first x))\n                   (symdif (rest x) y 0)))))))", "problem": 88, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn [x y]\n   (clojure.set/union\n      (clojure.set/difference x y)\n      (clojure.set/difference y x)))", "problem": 88, "user": "531b8c27e4b08068f379ed90"}, {"code": "#(->> [(remove %2 %1) (remove %1 %2)] (apply concat) set)", "problem": 88, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn [s0 s1]\n  (clojure.set/union\n   (clojure.set/difference s0 s1)\n   (clojure.set/difference s1 s0)))", "problem": 88, "user": "50b9d991e4b04934c218a4a9"}, {"code": "(fn [s1 s2]\n  (let [s (reduce conj s1 s2)\n        c (filter #(contains? s1 %) s2)\n        m (zipmap s (map #(.indexOf c %) s)) \n        ]\n    (into #{} (for [[k v] m :when (neg? v)] k))))", "problem": 88, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "5310e7aee4b08068f379ecdc"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2)\n             \t\t\t (clojure.set/intersection %1 %2))", "problem": 88, "user": "531c7f0de4b08068f379eda4"}, {"code": "(fn[s1 s2](set (keys (filter #(= (val %1) 1) (frequencies (concat s1 s2))))))", "problem": 88, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn [x y] (let [i (clojure.set/intersection x y) u (clojure.set/union x y)] (clojure.set/difference u i)))", "problem": 88, "user": "531c0619e4b08068f379ed98"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "52ce8648e4b07d0d72b27390"}, {"code": "#(clojure.set/union\n (clojure.set/difference %1 %2)\n (clojure.set/difference %2 %1))", "problem": 88, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "(fn [xs ys]\n  (set\n  (filter #(nil? ((clojure.set/intersection xs ys) %))\n  (clojure.set/union xs ys)\n          )\n   )\n  )", "problem": 88, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(fn [A B] (clojure.set/union (clojure.set/difference A B) (clojure.set/difference B A)))", "problem": 88, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn [s1 s2]\n  (let [all-members (vec (concat s1 s2))\n        intersection (clojure.set/intersection s1 s2)]\n    (set (filter #(not (contains? intersection %)) all-members))))", "problem": 88, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn [s1, s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [src dst]\n   (letfn\n   \t  [(f [s0 s1]\n       (filter #(not (contains? s1 %)) s0))]\n    (set (concat (f src dst) (f dst src)))))", "problem": 88, "user": "4df9c598535d04ed9115e77a"}, {"code": "(fn sym-dif [s1 s2]\n   (let [inter (clojure.set/intersection s1 s2)]\n     (clojure.set/union (clojure.set/difference s1 inter)\n                        (clojure.set/difference s2 inter))))", "problem": 88, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "#(clojure.set/union \n  (clojure.set/difference %1 %2) \n  (clojure.set/difference %2 %1))", "problem": 88, "user": "52c00e4fe4b07a9af5792342"}, {"code": "#(set (remove (clojure.set/intersection % %2) (clojure.set/union % %2)))", "problem": 88, "user": "4ff4bed0e4b0678c553fc35f"}, {"code": "(fn sym-diff [x y]\n  (let [x-minus-y (clojure.set/difference x y)\n        y-minus-x (clojure.set/difference y x)]\n    (clojure.set/union x-minus-y y-minus-x)))", "problem": 88, "user": "531dfaf5e4b08068f379edb3"}, {"code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "531488f3e4b08068f379ed16"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "(fn [s1 s2]\n  (let [in (clojure.set/intersection s1 s2)]\n    (clojure.set/union (clojure.set/difference s1 in)\n                       (clojure.set/difference s2 in))))", "problem": 88, "user": "52c81954e4b0c2d177d6212e"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "4fba77fae4b081705acca2df"}, {"code": "(fn [x y]\n  (set (filter (fn [n]\n    (letfn [(xor [a b] (if a (if b nil a) (if b b nil)))]\n      (apply xor (map #(contains? % n) [x y]))))\n        (clojure.set/union x y))))", "problem": 88, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(fn f [a b]\n  (into #{} (concat (filter #(false? (contains? b %)) a)\n          (filter #(false? (contains? a %)) b))\n  )\n  )", "problem": 88, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "#(clojure.set/difference  (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn [xs1 xs2]\n  (into (clojure.set/difference xs1 xs2) (clojure.set/difference xs2 xs1)))", "problem": 88, "user": "531490bde4b08068f379ed17"}, {"code": "#(clojure.set/union\n  (clojure.set/difference % %2)\n  (clojure.set/difference %2 %)\n)", "problem": 88, "user": "52fba50ce4b047fd5583700d"}, {"code": "#(clojure.set/union \n (clojure.set/difference % %2)\n (clojure.set/difference %2 %))", "problem": 88, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn [set1 set2]\n    (set (reduce #(if (and (set2 %2) (set1 %2)) %1 (conj %1 %2)) #{} (concat set1 set2))))", "problem": 88, "user": "51f5539fe4b0abb92f97f9cd"}, {"code": "(fn [s1 s2]\n  (apply hash-set (filter #(= 1 (+ (if (get s1 %) 1 0)  \n                             \t   (if (get s2 %) 1 0))) (concat s1 s2))))", "problem": 88, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn [a b]\n    (set (concat\n          (apply disj a b)\n          (apply disj b a))))", "problem": 88, "user": "52474133e4b05ef8e38e635e"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "5103807fe4b00c483ae17703"}, {"code": "(fn sdiff [set1 set2]\n  (let [all-keys (set (concat set1 set2))]\n    (set (filter (fn [k]\n                   (or (and (not (contains? set1 k))\n                            (contains? set2 k))\n                       (and (contains? set1 k)\n                            (not (contains? set2 k))))) all-keys))))", "problem": 88, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "#(let [diff (fn [x y]\n              (clojure.set/difference x y))\n       union (fn [x y]\n               (clojure.set/union x y))]\n   (union (diff %1 %2) (diff %2 %1)))", "problem": 88, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn diff [xs ys]\n  (->> (concat xs ys)\n       (group-by identity)\n       (filter #(= (count (second %)) 1))\n       (map first)\n       (set)))", "problem": 88, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "#(set (concat  (remove  %1 %2 ) (remove %2 %1) ))", "problem": 88, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [x y]\n   (let [s (concat x y)]\n     (into #{} (filter (fn [x] (= 1\n                                  (apply + (map #(if (= % x) 1 0) s))))\n                       s))))", "problem": 88, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "#(set `(~@(apply (partial disj %1) %2) ~@(apply (partial disj %2) %1)))", "problem": 88, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "(fn diff [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "#(set (concat (apply disj % %2) (apply disj %2 %)))", "problem": 88, "user": "516abecae4b081287f204e9f"}, {"code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "53388e2de4b0e30313ee6c9c"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "4eadc217535d7eef30807321"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2)\n                          (clojure.set/intersection s1 s2)))", "problem": 88, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "(fn [s1 s2]\n  (set (clojure.set/union (filter (complement #(contains? s2 %)) s1) (filter (complement #(contains? s1 %)) s2))))", "problem": 88, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "52facb9de4b047fd55837002"}, {"code": "#(into ((comp set remove) % %2) (remove %2 %))", "problem": 88, "user": "5281a445e4b0757a1b17143a"}, {"code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "52bb4be0e4b07a9af57922e2"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "520b67b5e4b0b022ef140c83"}, {"code": "(fn [s1 s2]\n  (-> #{}\n      (into (filter #(nil? (s1 %)) s2))\n      (into (filter #(nil? (s2 %)) s1))))", "problem": 88, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "(fn [l1 l2] (into #{} (sort (filter #(let [x (contains? l1 %) y (contains? l2 %)] (or (and x (not y)) (and y (not x)))) (concat l1 l2)))))", "problem": 88, "user": "51da631be4b02ceefd947766"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn sym-diff [x y]\n  (clojure.set/union\n   (clojure.set/difference x y)\n   (clojure.set/difference y x)))", "problem": 88, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn [a b]\n  (into #{} \n        (filter #(if (a %)\n                   (if (b %)\n                     false\n                     true)\n                   (if (b %)\n                     true\n                     false))\n                (clojure.set/union a b))))", "problem": 88, "user": "5341b141e4b00652c8746ecf"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "#(into (apply disj %1 %2) (apply disj %2 %1))", "problem": 88, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn sym-diff [s1 s2]\n  (set (mapcat remove\n               [s1 s2]\n               [s2 s1])))", "problem": 88, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "50d4593ee4b09cc622d65a68"}, {"code": "(fn [c1 c2] (clojure.set/union (clojure.set/difference c1 c2)(clojure.set/difference c2 c1)))", "problem": 88, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn [x y]\n  (apply disj (clojure.set/union x y) (clojure.set/intersection x y)))", "problem": 88, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [x y] (set (concat (filter #(not (contains? x %))y) (filter #(not (contains? y %)) x))))", "problem": 88, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn [a b]\n  (let [s (fn [a b] (filter #(nil? (a %1)) b))]\n    (set (concat (s a b) (s b a)))))", "problem": 88, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "53460d02e4b084c2834f4a39"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "5175533fe4b0dea9bbfba575"}, {"code": "#(set (concat (remove % %2) (remove %2 %)))", "problem": 88, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "53487737e4b084c2834f4a59"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "531d34cfe4b08068f379edac"}, {"code": "#(set \n  (concat \n    (apply disj %1 %2)\n    (apply disj %2 %1)\n))", "problem": 88, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "#(let [intersection (set (filter %1 %2))\n       union (set (concat %1 %2))]\n      (set (remove intersection union)))", "problem": 88, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn set-disj [s1 s2]\n  (let [acc1 (reduce (fn[a1 e1]\n                       (if (nil? (some #{e1} s2))\n                         (conj a1 e1)\n                         a1))\n                     #{} s1)\n        acc2 (reduce (fn[a2 e2]\n                       (if (nil? (some #{e2} s1))\n                         (conj a2 e2)\n                         a2))\n                     #{} s2)]\n    (reduce (fn[ae e3]\n              (conj ae e3))\n            acc1 acc2)))", "problem": 88, "user": "52d6664be4b09f7907dd1359"}, {"code": "(fn set-symmetric-diff [a b] (set (concat (filter #(not (contains? b %1)) a) (filter #(not (contains? a %1)) b)) ))", "problem": 88, "user": "5353afa0e4b084c2834f4b03"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [set1 set2]\n  (clojure.set/union (clojure.set/difference set1 set2)\n       (clojure.set/difference set2 set1)))", "problem": 88, "user": "516081e7e4b009fba0926e28"}, {"code": "(fn [a b]\n  (let [d clojure.set/difference u clojure.set/union]\n    (u (d a b) (d b a))))", "problem": 88, "user": "534efe66e4b084c2834f4ac1"}, {"code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b)\n                          (clojure.set/intersection a b)))", "problem": 88, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "(fn [set1 set2]\n  (clojure.set/union (clojure.set/difference set1 set2)\n                     (clojure.set/difference set2 set1)))", "problem": 88, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn [s1 s2] \n  (set (filter \n        #(not (and (contains? s1 %) (contains? s2 %)))\n        (clojure.set/union s1 s2))))", "problem": 88, "user": "5339c105e4b0e30313ee6cae"}, {"code": "#(clojure.set/union \n  (clojure.set/difference %1 %2) \n  (clojure.set/difference %2 %1))", "problem": 88, "user": "4f0412f8535dcb61093f6b99"}, {"code": "(fn [a b] (into #{} (filter #(or (not (a %)) (not (b %)))\n                             (concat a b))))", "problem": 88, "user": "534d1173e4b084c2834f4a98"}, {"code": "#(clojure.set/union (apply disj % (seq %2))\n       (apply disj %2 (seq %)))", "problem": 88, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "(fn [a b] (reduce disj (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "5312cdaae4b08068f379ed03"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "5338387de4b0e30313ee6c91"}, {"code": "(fn [a b]\n    (set (concat\n          (apply disj a b)\n          (apply disj b a))))", "problem": 88, "user": "5356dcbee4b04ce2eb3ed270"}, {"code": "(fn [a b]\n  (let [intrsct (clojure.set/intersection a b)]\n\n    \n    (clojure.set/union (clojure.set/difference a intrsct)\n                       (clojure.set/difference b intrsct))\n    ))", "problem": 88, "user": "53415755e4b00652c8746ecd"}, {"code": "#(set (concat (remove %2 %1)\n              (remove %1 %2)))", "problem": 88, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "#(clojure.set/union (apply (partial disj %2) %) (apply (partial disj %) %2))", "problem": 88, "user": "53307da1e4b019098a6f8b5e"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "50f10f7be4b06d9538fe211a"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "(fn\n  [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "53523ae0e4b084c2834f4aee"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "52046600e4b0c283853240c5"}, {"code": "(fn [s1 s2] (set (concat (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))))", "problem": 88, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "(fn [s1 s2]\n  (set (filter identity (let [\n        combined (concat s1 s2)\n        in-s1? (fn [x] (contains? s1 x))\n        in-s2? (fn [x] (contains? s2 x))\n        ]\n    (map\n     (fn [x]\n       (if (or \n            (and (in-s1? x) (not (in-s2? x)) )\n            (and (in-s2? x) (not (in-s1? x)) )\n            )\n         x\n         nil))\n       combined\n     )\n    ))))", "problem": 88, "user": "4f031883535dcb61093f6a5e"}, {"code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "53638ed2e4b0243289761e5b"}, {"code": "#(clojure.set/difference\n\t(clojure.set/union % %2)\n\t(clojure.set/intersection % %2))", "problem": 88, "user": "53500869e4b084c2834f4ad3"}, {"code": "(fn [s1 s2]\n  (set\n    (for [e (clojure.set/union s1 s2) \n            :when (or (nil? (s1 e)) (nil? (s2 e)))]\n      e)))", "problem": 88, "user": "531619c1e4b08068f379ed3d"}, {"code": "#(clojure.set/union\n  (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "#(into (set (remove %1 %2)) (remove %2 %1))", "problem": 88, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference\n    (clojure.set/union s1 s2)\n    (clojure.set/intersection s1 s2)\n   )\n  )", "problem": 88, "user": "52d42021e4b09f7907dd132a"}, {"code": "#(into (set (remove % %2)) (remove %2 %))", "problem": 88, "user": "52bf6946e4b07a9af5792334"}, {"code": "(fn symmetric-difference\n  [xs ys]\n  (clojure.set/difference (clojure.set/union xs ys) (clojure.set/intersection xs ys)))", "problem": 88, "user": "511720eae4b0063b4e3e16da"}, {"code": "(fn sym-diff\n  [sa sb]\n  (clojure.set/union \n   (clojure.set/difference sa (clojure.set/intersection sa sb))\n   (clojure.set/difference sb (clojure.set/intersection sa sb))\n   ))", "problem": 88, "user": "536aa86de4b0243289761eb1"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "4f085a31535dcb61093f6c35"}, {"code": "(fn [xs ys]\n  (let [uni (set (concat xs ys))\n        xsect (set (keep identity (map #(xs (ys %)) uni)))]\n    (set (remove xsect uni))))", "problem": 88, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn [a b] \n  (let [not-contains? (complement contains?)\n        difference (fn [a b] \n                     \t(into #{} (filter #(not-contains? a %) b) ))]\n  (into (difference a b) (difference b a))))", "problem": 88, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "52fb64b7e4b047fd55837009"}, {"code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "problem": 88, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "(fn symmetricdifference [a b]\n     (set (filter #(not (and (contains? a %) (contains? b %))) (into a b))))", "problem": 88, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "#(set (concat (apply disj %2 %) (apply disj % %2)))", "problem": 88, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [a b] (clojure.set/union (clojure.set/difference a b)\n(clojure.set/difference b a)))", "problem": 88, "user": "535943b3e4b04ce2eb3ed295"}, {"code": "(fn set-difference [s1 s2]\n  (set\n   (concat\n    (clojure.set/difference s1 s2) ;what's in s1 but not in s2\n    (clojure.set/difference s2 s1)))) ;what's in s2 but not in s1", "problem": 88, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn [s1 s2]\n  (set (concat\n   (remove #(contains? s2 %) s1)      \n   (remove #(contains? s1 %) s2))))", "problem": 88, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "#(let [a (for [x %1 :when (not (contains? %2 x))] x)\n       b (for [x %2 :when (not (contains? %1 x))] x)]\n   (set (reduce (fn [c i] (conj c i)) a b)))", "problem": 88, "user": "518279abe4b0353c468deb65"}, {"code": "(fn [col1 col2]\n    (let [inter ( clojure.set/intersection col1 col2)\n          un (clojure.set/union col1 col2)\n          dif (clojure.set/difference un inter)\n          ]\n      dif     \n      )   \n     )", "problem": 88, "user": "51227a00e4b068a9582e656b"}, {"code": "(fn [a b] (into (reduce disj a b) (reduce disj b a)))", "problem": 88, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "(fn xor [a b] (set (concat (filter (comp not (partial contains? a)) b) (filter (comp not (partial contains? b)) a))))", "problem": 88, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "(fn symdiff [s t]\n  (clojure.set/difference\n    (clojure.set/union s t)\n    (clojure.set/intersection s t)))", "problem": 88, "user": "516385cee4b055933a9ca02d"}, {"code": "(fn sdiff [x y] (into #{} (filter #(not (and (contains? x %) (contains? y %))) (into x y))))", "problem": 88, "user": "4eeb8f68535d93acb0a668a9"}, {"code": ";Mine\n;#(clojure.set/union (clojure.set/difference %1 ( clojure.set/intersection %1 %2)) (clojure.set/difference %2 (clojure.set/intersection %1 %2)))\n\n;(fn [x y] \n;  (into #{} (filter #(not= (nil? (x %)) (nil? (y %))) (apply merge x y))))\n\n#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "problem": 88, "user": "534d639ae4b084c2834f4a9e"}, {"code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn [s1 s2] (let [x (clojure.set/intersection  s1 s2)] \n              (set (sort (concat (filter #(if-not(contains? x %) %) s1) \n                                 (filter #(if-not(contains? x %) %) s2))))))", "problem": 88, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "#(into (clojure.set/difference % %2) (clojure.set/difference %2 %))", "problem": 88, "user": "524b0645e4b09eba1c0223bf"}, {"code": "#(clojure.set/difference (clojure.set/union % %2)\n                         (clojure.set/intersection % %2))", "problem": 88, "user": "4f92de49e4b0dcca54ed6cb2"}, {"code": "(fn [x y]\n  (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "problem": 88, "user": "4f849f76e4b033992c121c36"}, {"code": "#(letfn [(minus [c1 c2]\n\t(loop [c1 c1, c2 c2, r []]\n\t\t(if (empty? c1)\n\t\t\tr\n\t\t\t(let [e (first c1), rr (if (c2 e) r (conj r e))]\n\t\t\t\t(recur (rest c1) c2 rr)))))]\n\t(set (concat (minus %1 %2) (minus %2 %1))))", "problem": 88, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "(comp #(apply clojure.set/difference %) (juxt clojure.set/union clojure.set/intersection))", "problem": 88, "user": "53779a26e4b06839e8705e38"}, {"code": "#(cond \n  (empty? %1) %2\n  (empty? %2) %1\n  :else (apply conj (apply disj %1 %2) (apply disj %2 %1)))", "problem": 88, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn [s1 s2]\n  (set (into (filter #(not (contains? s2 %)) s1) (filter #(not (contains? s1 %)) s2))))", "problem": 88, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn [x y]\n  (clojure.set/union \n   (clojure.set/difference x y)\n   (clojure.set/difference y x)))", "problem": 88, "user": "517e12e3e4b0fcc7c5d37d3c"}, {"code": "(fn [a b] (set (into (filter #(not (b %)) a) \n                     (filter #(not (a %)) b))))", "problem": 88, "user": "53800d99e4b06839e8705ebd"}, {"code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "4edb314d535d10e5ff6f5317"}, {"code": "(fn [a b]\n   (clojure.set/union (clojure.set/difference b a) (clojure.set/difference a b)))", "problem": 88, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn symmetric-diff [s1 s2]\n\t(into #{} (remove (into #{} (filter s1 s2)) (into #{} (concat s1 s2)))))", "problem": 88, "user": "52b71bd2e4b0c58976d9ad4d"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))\n    )", "problem": 88, "user": "52bf0116e4b07a9af5792328"}, {"code": "(fn j-diff\n  [set1 set2]\n  (loop [x set1 y set2 final #{}]\n    (if (and (empty? x) (empty? y))\n      final\n      (if-not (empty? x)\n        (if-not (contains? set2 (first x))\n          (recur (rest x) y (conj final (first x)))\n          (recur (rest x) y final))\n        (if-not (empty? y)\n          (if-not (contains? set1 (first y))\n            (recur x (rest y) (conj final (first y)))\n            (recur x (rest y) final)))))))", "problem": 88, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "(fn [& sets]\n  (let [sets-intersection (apply clojure.set/intersection sets)\n        sets-union (apply clojure.set/union sets)]\n    (clojure.set/difference sets-union sets-intersection)))", "problem": 88, "user": "53527551e4b084c2834f4af0"}, {"code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "problem": 88, "user": "536b2048e4b0243289761eb7"}, {"code": "(fn [a b]\n  (reduce conj\n          (reduce disj a b)\n          (reduce disj b a)))", "problem": 88, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn symmetricDifference [set1 set2]\n  (clojure.set/difference\n    (clojure.set/union set1 set2)\n    (clojure.set/intersection set1 set2)\n    )\n  )", "problem": 88, "user": "5379ed48e4b06839e8705e5a"}, {"code": "(fn [arg1 arg2]\n  (into #{} (remove #(and (some #{%} arg1) (some #{%} arg2)) (clojure.set/union arg1 arg2))))", "problem": 88, "user": "537881a4e4b06839e8705e46"}, {"code": "(fn [set1 set2]\n  (clojure.set/union (clojure.set/difference set1 set2)\n                     (clojure.set/difference set2 set1)))", "problem": 88, "user": "53806e5be4b06839e8705ec1"}, {"code": "(fn [x y]\n  (set (concat (remove x y) (remove y x))))", "problem": 88, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "problem": 88, "user": "538cc422e4b0b51d73faae63"}, {"code": "(fn [a b]\n  (clojure.set/difference\n    (clojure.set/union a b)\n    (clojure.set/intersection a b)))", "problem": 88, "user": "538be6afe4b0640c7a9a58c9"}, {"code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "problem": 88, "user": "53838742e4b06839e8705ee0"}, {"code": "(fn [s1 s2]\n  (set (concat (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))))", "problem": 88, "user": "538d464ee4b0b51d73faae69"}, {"code": "(fn [s1 s2]\n    (loop [e (first s1)  s1 (rest s1) s2 s2 result #{}]\n      (cond (nil? e) (set (concat s2 result))\n            (contains? s2 e) (recur (first s1) (rest s1) (disj s2 e) result)\n            :else (recur (first s1) (rest s1) s2 (conj result e)))))", "problem": 88, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "#(set (filter (fn [x] (not= (%1 x) (%2 x))) (clojure.set/union %1 %2)))", "problem": 88, "user": "538d8bb8e4b0b51d73faae71"}, {"code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "problem": 88, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "(fn [a b]\n  (cond\n   (empty? a) b\n   (empty? b) a\n   :else (clojure.set/union (clojure.set/difference b a)\n                            (clojure.set/difference a b))))", "problem": 88, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn [s1 s2] (let [i ((comp set filter) s1 s2)] (reduce #(if (not (i %2)) (conj %1 %2) %1) #{} (set (concat s1 s2)))))", "problem": 88, "user": "53403110e4b085b17e897da6"}, {"code": "(fn D [s t]\n  (letfn [(X [s t s-t]\n            (cond (empty? s) s-t\n                  (contains? t (first s)) (recur (rest s) t s-t)\n                  :else (recur (rest s) t (conj s-t (first s)))))]\n    (X t s (X s t #{}))))", "problem": 88, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "problem": 88, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn my-intersect [setA setB]\n      (let [\n        setU (set (concat setA setB))\n        ]\n        (set\n          (filter\n            #(or\n               (not (contains? setA %))\n               (not (contains? setB %))\n               )\n            setU\n            )\n          )\n        )\n      )", "problem": 88, "user": "536827f1e4b0243289761e8a"}, {"code": "(fn [seta setb]\n  (set (filter #(not (and (contains? seta %)\n                     (contains? setb %)))\n          (concat seta setb))))", "problem": 88, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn [l r]\n  (reduce (fn [sdiff i]\n            (if (and (l i) (r i))\n              sdiff\n              (conj sdiff i)))\n          #{}\n          (clojure.set/union l r)))", "problem": 88, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn  [s1 s2]\n  (let [c (distinct (concat s1 s2))\n        f (fn [x] (let [b1 (contains? s1 x)\n                       b2 (contains? s2 x)]\n                   (or (and b1 (not b2))\n                       (and b2 (not b1)))))]\n    (set (filter f c))))", "problem": 88, "user": "538e36c7e4b0b51d73faae81"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "problem": 88, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn symmetic-diff [s1 s2]\n  (let [coll (into s1 s2)]\n    (reduce (fn [mem e]\n              (if (= (s1 e) (s2 e))\n                mem\n                (conj mem e))) #{} coll)))", "problem": 88, "user": "5080a697e4b01a93d3f38e49"}, {"code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "problem": 88, "user": "536673a8e4b0243289761e76"}, {"code": "(fn symm-difference [a b]\n    (into (reduce (fn [out-set input-entry](if (contains? b input-entry) out-set (conj out-set input-entry))) #{} a)\n          (reduce (fn [out-set input-entry](if (contains? a input-entry) out-set (conj out-set input-entry))) #{} b))\n  )", "problem": 88, "user": "538e29d1e4b0b51d73faae80"}, {"code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "problem": 88, "user": "530bf87ee4b02e82168697d5"}, {"code": "(fn symmetric-diff [s1 s2]\n  (set (concat (remove s1 s2)\n               (remove s2 s1))))", "problem": 88, "user": "5346f409e4b084c2834f4a46"}, {"code": "(fn\n  [s1 s2]\n  (set (concat (filter #(not (contains? s1 %)) s2)\n               (filter #(not (contains? s2 %)) s1))))", "problem": 88, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn [set1 set2]\n  (clojure.set/union (apply disj set1 set2) (apply disj set2 set1)))", "problem": 88, "user": "538e864ee4b0b51d73faae87"}, {"code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "problem": 88, "user": "53a1b5c8e4b0ca733b9744c1"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b)\n                     (clojure.set/difference b a)))", "user": "4f7cbf4ae4b06e829148e1b7"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (for [[k v] (frequencies (concat s1 s2))\n             :when (= v 1)]\n         k)))", "user": "53a7e3b9e4b047364c044423"}, {"problem": 88, "code": "(fn sym-set [s1 s2]                                                                                 \n  (set (concat                                                                                         \n        (clojure.set/difference s1 s2)                                                               \n        (clojure.set/difference s2 s1))))", "user": "50b63c5ee4b0a86f8358ca69"}, {"problem": 88, "code": "(fn my-set-difference\n  [set1 set2]\n  (let [union (into set1 set2)\n        intersection (into #{} (filter #(set2 %) set1))]\n    (into #{} (filter #(not (intersection %)) union))))", "user": "536e5055e4b0fc7073fd6e6b"}, {"problem": 88, "code": "(fn [a b] \n  (into #{} \n        (remove \n         (into #{} \n               (remove \n                (into #{} (remove b a))\n                a)) (into a b))))", "user": "53976599e4b0b51d73faaeea"}, {"problem": 88, "code": "(fn [a b]\n  (set (concat (filter (complement a) b)\n       \t\t   (filter (complement b) a))))", "user": "5250b7a5e4b0541d1855b83e"}, {"problem": 88, "code": "(fn [s1 s2] \n   (if (empty? s1) s2 \n     (if (empty? s2) s1\n     (first \n       (map \n         #(conj \n            (clojure.set/difference s1 s2) %)\n       (clojure.set/difference s2 s1))))))", "user": "53a26cede4b0f1fc7453882a"}, {"problem": 88, "code": "(fn [a b]\n  (let [comp-func (fn [a b]\n                    (filter #(not (contains? a %)) b))]\n    (set (concat (comp-func a b)\n                 (comp-func b a)))))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 88, "code": "#(set\n  (concat\n   (filter (complement %2) %)\n   (filter (complement %) %2)))", "user": "537e104ce4b06839e8705e9a"}, {"problem": 88, "code": "(fn [fl sl]\n   (let [fs (filter #(not (contains? sl %)) fl)\n         ss (filter #(not (contains? fl %)) sl)]\n     (set (concat fs ss))))", "user": "52c49401e4b0c2d177d620de"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 88, "code": "#(into (set (remove % %2)) (remove %2 %))", "user": "5398305fe4b0b51d73faaef6"}, {"problem": 88, "code": "(fn \n  [a b]\n  (let [ld (fn [x y] (filter #(not(contains? y %)) x))]\n    (set (concat (ld a b) (ld b a)))))", "user": "53ac4719e4b047364c04445c"}, {"problem": 88, "code": "(fn [s1 s2] (set (concat (filter #(not (contains? s2 %)) s1) (filter #(not (contains? s1 %)) s2))))", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [s (clojure.set/intersection s1 s2)]\n    (clojure.set/union (clojure.set/difference s1 s)\n                       (clojure.set/difference s2 s))))", "user": "532bce35e4b09d4e7a9b5536"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [sd1 (filter #(not (contains? s1 %)) s2)\n        sd2 (filter #(not (contains? s2 %)) s1)]\n    (set (into sd1 sd2))))", "user": "53b182a5e4b047364c044491"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [sd1 (filter #(not (contains? s2 %)) s1)\n        sd2 (filter #(not (contains? s1 %)) s2)]\n    (set (into sd1 sd2))))", "user": "51bf0ccee4b013aa0d74b811"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "53a94b63e4b047364c044434"}, {"problem": 88, "code": "(fn fx [s1 s2]\n  (reduce conj\n   (reduce #(disj %1 %2) s1 s2)\n   (reduce #(disj %1 %2) s2 s1)))", "user": "50b8e9a4e4b0cba0e598b656"}, {"problem": 88, "code": "(fn [s1 s2]\n(set (concat (for [x s1 :when (= false (contains? s2 x))] x)\n             (for [y s2 :when (= false (contains? s1 y))] y)\n  )))", "user": "53ae16e2e4b047364c044472"}, {"problem": 88, "code": "(fn [a b]\n  (set (filter #(and (or (a %) (b %))\n                     (not (and (a %) (b %))))\n               (clojure.set/union a b))))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "52c1ede2e4b07a9af579236d"}, {"problem": 88, "code": "(fn sd [s1 s2]\n\t(let [i (set (filter s1 s2))\n       \t  u (into s1 s2)]\n   \t\t(set (remove i u))))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "53ae0c50e4b047364c044471"}, {"problem": 88, "code": "#(into (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5382704be4b06839e8705ed4"}, {"problem": 88, "code": "(fn  [s1 s2]\n  (clojure.set/union\n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)))", "user": "4f1e4ab5535d64f603146496"}, {"problem": 88, "code": "(fn [s1 s2] (into (apply disj s1 s2) (apply disj s2 s1)))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (set (filter #(not (and (contains? s1 %) (contains? s2 %))) (clojure.set/union s1 s2)\n  )))", "user": "5245e320e4b09dbe66b56177"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [x1 (filter (comp not s2) s1)\n        x2 (filter (comp not s1) s2)]\n    (set (clojure.set/union x1 x2))))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 88, "code": "(fn [x y] (set (concat (remove x y) (remove y x))))", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 88, "code": "(fn ii [s1 s2] \n  (clojure.set/union (clojure.set/difference s1 s2)(clojure.set/difference s2 s1)))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "536b9d8ae4b0243289761ebe"}, {"problem": 88, "code": "(fn [s1 s2] (let [union (set (concat s1 s2)) difference (set (filter s1 s2))] (set (filter (complement difference) union))))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 88, "code": "(fn symmetric-differences [xs ys] \n  (clojure.set/union \n    (clojure.set/difference xs ys)\n    (clojure.set/difference ys xs)))", "user": "52616198e4b03e8d9a4a705e"}, {"problem": 88, "code": "(fn [a b](set (keys (filter #(= (second %) 1) (merge-with + (frequencies a) (frequencies b))))))", "user": "526a3412e4b03e8d9a4a721e"}, {"problem": 88, "code": "(fn [s1 s2] \n    (clojure.set/union \n     (clojure.set/difference s1 s2) \n     (clojure.set/difference s2 s1)))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 88, "code": "(fn [a b] (set (concat (filter (complement a) b) (filter (complement b) a))))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5327c591e4b09d4e7a9b54ff"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5271605ae4b03e8d9a4a73ed"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "537f4652e4b06839e8705eb1"}, {"problem": 88, "code": "(fn [a b]  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 88, "code": "#( clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 88, "code": "(fn [xs in] (set (into (filter #(not (xs %)) in) (filter #(not (in %)) xs))))", "user": "531bad96e4b08068f379ed93"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (let [fs1 (filter #(nil? (s2 %)) s1)\n        fs2 (filter #(nil? (s1 %)) s2)]\n    (set (concat fs1 fs2))))", "user": "53710c09e4b0fc7073fd6ea5"}, {"problem": 88, "code": "#(let [inters (clojure.set/intersection %1 %2)\n          unio (clojure.set/union %1 %2)\n          symdiff (clojure.set/difference unio inters)] symdiff)", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 88, "code": "#(into (set (remove %2 %1)) (remove %1 %2))", "user": "51e3a549e4b0c611d6113e47"}, {"problem": 88, "code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "539c9d7ee4b0b51d73faaf2d"}, {"problem": 88, "code": "(fn [a b]\n  (let [diff-a (clojure.set/difference a b)\n        diff-b (clojure.set/difference b a)]\n    (clojure.set/union diff-a diff-b)))", "user": "52fc34cee4b047fd55837015"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "538db083e4b0b51d73faae74"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat (filter (complement s1) s2) (filter (complement s2) s1))))", "user": "507330e6e4b0e3170b5a8698"}, {"problem": 88, "code": "(fn sym-diff [seta setb]\n  (let [a-not-b (filter #(nil? (setb %)) seta)\n        b-not-a (filter #(nil? (seta %)) setb)]\n    (set (concat a-not-b b-not-a))))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 88, "code": "(fn [coll1 coll2] (clojure.set/union (clojure.set/difference coll1 coll2) (clojure.set/difference coll2 coll1)))", "user": "50e1bdd8e4b019fc399ce17f"}, {"problem": 88, "code": "(fn [s1 s2] \n  (let [r1 (reduce #(if (contains? s2 %2) %1 (conj %1 %2)) #{} s1)\n        result (reduce #(if (contains? s1 %2) %1 (conj %1 %2)) r1 s2)]\n    result\n    \n    )\n  )", "user": "51fc44c5e4b0f1313d468a1b"}, {"problem": 88, "code": "#(set (concat (remove % %2) (remove %2 %)))", "user": "533018b2e4b019098a6f8b56"}, {"problem": 88, "code": "(fn [a b]\n  (let [a1 (filter #(not (some #{%} a)) b)\n        b1 (filter #(not (some #{%} b)) a)]\n    (set (concat a1 b1))))", "user": "4ed45563535d10e5ff6f52c9"}, {"problem": 88, "code": "(fn sim-diff [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "53cbe808e4b00fb29b2212d4"}, {"problem": 88, "code": "(fn foo\u00a0[s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5143824ae4b0b4fb4ace5f36"}, {"problem": 88, "code": "#(reduce into\n          #{}\n          (list (filter (complement %1) %2)\n                (filter (complement %2) %1)))", "user": "511688d5e4b0b3e208dba05a"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into #{} (concat (filter (complement s1) s2) (filter (complement s2) s1))))", "user": "53b05a36e4b047364c044481"}, {"problem": 88, "code": "(fn [xs ys]\n  (clojure.set/union (clojure.set/difference xs ys) (clojure.set/difference ys xs)))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 88, "code": "(fn [c1 c2]\n  (clojure.set/union (clojure.set/difference c1 c2) (clojure.set/difference c2 c1)))", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 88, "code": "#(clojure.set/difference (set (concat %1 %2)) (clojure.set/intersection %1 %2))", "user": "4e6b8ac8535d8ccf87e9ff19"}, {"problem": 88, "code": "(fn [s1 s2]\n   (set (map first (filter #(= (count %) 1) (partition-by identity (sort (concat s1 s2)))))))", "user": "52fac708e4b047fd55836fff"}, {"problem": 88, "code": "(fn symdiff\n  ([a b] (let [x (filter #(not (contains? b %)) a)\n               y (filter #(not (contains? a %)) b)]\n           (apply hash-set (concat x y)))))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 88, "code": "(fn [set1 set2] (clojure.set/union (set (filter (fn [x] (not (contains? set1 x))) set2))(set (filter (fn [x] (not (contains? set2 x))) set1))))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 88, "code": "(fn [xs ys]\n     (clojure.set/union (clojure.set/difference xs ys) (clojure.set/difference ys xs)\n     ))", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "52ee9ac7e4b05e3f0be25ec9"}, {"problem": 88, "code": "(fn [a b]\n  (set (concat (clojure.set/difference a (set (filter a b))) (clojure.set/difference b (set (filter b a))))))", "user": "504f5804e4b0a02f9cffde72"}, {"problem": 88, "code": "#(into (apply disj %1 %2) (apply disj %2 %1))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 88, "code": "(fn symdif [a-set b-set]\n  (clojure.set/union (clojure.set/difference a-set b-set) (clojure.set/difference b-set a-set)))", "user": "53de622ce4b0d874e779ae34"}, {"problem": 88, "code": "(fn [s1 s2]\n    (clojure.set/difference\n     (clojure.set/union s1 s2)\n     (clojure.set/intersection s1 s2)))", "user": "53a83c74e4b047364c044426"}, {"problem": 88, "code": "(fn symmetric-diff [coll1 coll2]\n  (letfn [(diff [coll1 coll2]\n            (filter #(not (contains? coll2 %)) coll1))]\n    (set (concat (diff coll1 coll2) (diff coll2 coll1)))))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 88, "code": "(fn [a b]\n  (let [both (clojure.set/union a b)]\n    (clojure.set/union (clojure.set/difference both a) (clojure.set/difference both b))))", "user": "53791ab7e4b06839e8705e4d"}, {"problem": 88, "code": "(fn [k j] (clojure.set/union (clojure.set/difference j k) (clojure.set/difference k j)))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 88, "code": "( fn [ a b ]\n  (set\n  \t( concat ( filter (complement a ) b )  \n      \t\t ( filter (complement b ) a ) \n     )))", "user": "516d227fe4b06f078fab252d"}, {"problem": 88, "code": "(fn [xs ys]\n    (clojure.set/difference\n      (clojure.set/union xs ys)\n      (clojure.set/intersection xs ys)\n      )\n    )", "user": "53c3397be4b00fb29b221279"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 88, "code": "#(clojure.set/union \n  (clojure.set/difference % %2)\n  (clojure.set/difference %2 %))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 88, "code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2)\n  )", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n   (set (into (remove s1 s2) (remove s2 s1))))", "user": "535eaa73e4b04ce2eb3ed2d4"}, {"problem": 88, "code": "#(clojure.set/difference (apply clojure.set/union %&) (apply clojure.set/intersection %&))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 88, "code": "(fn [a b]\n  (let [dis (clojure.set/intersection a b)\n        a-sub (clojure.set/difference a dis)\n        b-sub (clojure.set/difference b dis)]\n    (clojure.set/union a-sub b-sub)))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 88, "code": "(fn [a b] (into (set (remove a b)) (remove b a)))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "528d6b10e4b0239c8a67aec3"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 88, "code": "(fn [xs ys] (set (concat (filter #((complement contains?) ys %) xs)\n                         (filter #((complement contains?) xs %) ys))))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 88, "code": "(fn [setA setB]\n  (clojure.set/union (clojure.set/difference setA setB) (clojure.set/difference setB setA))\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 88, "code": "(fn my-symdiff [xs ys]\n  (let [x-not-in-y (apply disj xs ys)\n        y-not-in-x (apply disj ys xs)]\n    (into x-not-in-y y-not-in-x)\n  )\n)", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 88, "code": "(fn sdifference [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 88, "code": "(fn [a b]\n   (set (remove (set (filter a b)) (into a b)))\n  )", "user": "50856bd1e4b004985b776e4c"}, {"problem": 88, "code": "(fn [s1 s2]\n    (reduce (fn [acc v] (if (and (s1 v) (s2 v)) (disj acc v) acc))\n            (into s1 s2) \n            (into s1 s2)))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into (set (remove s1 s2))\n        (remove s2 s1)))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 88, "code": "#(into (apply disj % %2) (apply disj %2 %))", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 88, "code": "(fn [a b] (into (set \n                 (filter (comp not a) b))\n                 (filter (comp not b) a)))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 88, "code": "(fn [a b]\n   (->> (clojure.set/union a b)\n        (filter #(not (and (a %) (b %))))\n        (set))\n)", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 88, "code": "(fn [a b]\n  (letfn \n    [(diff [a b] (filter (fn [i] (not (some #{i} b))) a))]\n    (into #{} (concat (diff a b) (diff b a)))))", "user": "53e91473e4b036ad0777e495"}, {"problem": 88, "code": "(fn [a b]\n  (let [c (clojure.set/intersection a b)]\n    (clojure.set/union (clojure.set/difference a c)\n                       (clojure.set/difference b c))))", "user": "5398123ee4b0b51d73faaef3"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "4f6fd91ae4b07046d9f4efed"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [s1-only (filter #(not (contains? s2 %)) s1)\n        s2-only (filter #(not (contains? s1 %)) s2)]\n    (into #{} (concat s1-only s2-only))))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 88, "code": "(fn symmetric-difference [a b]\n  (clojure.set/union (clojure.set/difference a b)\n                     (clojure.set/difference b a)))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "53f75957e4b0de5c4184855d"}, {"problem": 88, "code": "(fn [s1 s2]\n    (cond (empty? s1) s2\n          (empty? s2) s1\n          :else (apply disj (apply conj s1 s2) (filter s1 s2))))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %) )", "user": "537b1083e4b06839e8705e64"}, {"problem": 88, "code": "(fn [s1 s2]\n    (clojure.set/union\n     (clojure.set/difference s1 s2)\n     (clojure.set/difference s2 s1)))", "user": "504e1abee4b0f6ff3350c45d"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "53f7820be4b0de5c41848560"}, {"problem": 88, "code": "(fn[a b]\n  (set(concat(remove a b)(remove b a))))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (keys (filter #(= 1 (count (% 1)))\n               (group-by identity (concat s1 s2))))))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 88, "code": "#(let [u (clojure.set/union %1 %2) i (clojure.set/intersection %1 %2)] (clojure.set/difference u i))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [all (frequencies (concat s1 s2))]\n    (set (filter #(= (all %) 1) (keys all)))))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 88, "code": "(fn[a b]\n  (into #{} (concat\n              (filter (comp not a) b)\n              (filter (comp not b) a)))\n  )", "user": "52271ffee4b04e78ff2e19a9"}, {"problem": 88, "code": "(fn [s1 s2]\n  (reduce conj (#(reduce disj %1 %2) s1 s2) (#(reduce disj %2 %1) s1 s2)))", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference  % %2) (clojure.set/difference  %2 %))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 88, "code": "(fn [a b]\n  (let [- (fn [y x] (filter #(not (x %)) y))\n        part1 (- a b)\n        part2 (- b a)]\n    (set (into part1 part2))))", "user": "53d86564e4b0e771c302546b"}, {"problem": 88, "code": "(fn [set1 set2]\n  (set (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2) )))", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 88, "code": "(fn [s1 s2]\n          (apply (partial disj (set (concat s1 s2))) (for [x s1 y s2 :when (= x y)] x)))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 88, "code": "(fn set-diff [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 88, "code": "#(into #{} (concat (remove %2 %) (remove % %2)))", "user": "53fb4843e4b0de5c4184857d"}, {"problem": 88, "code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 88, "code": "(fn test [set1 set2]\n  (let [result (for [x set1\n        :when (not (contains? set2 x))]\n      x\n    )]\n    (set (concat result (for [x set2\n                       :when (not (contains? set1 x))]\n                   x))\n    ))\n  )", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 88, "code": "(fn sym [xs ys]\n  (set (concat (filter (comp not xs) ys) (filter (comp not ys) xs))))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 88, "code": "(fn [l r]\n  (set (clojure.set/union\n    (filter (complement r) l)\n    (filter (complement l) r))))", "user": "5368fedee4b0243289761e93"}, {"problem": 88, "code": "(fn [base to-rem]\n  (set (into\n   (remove #(contains? to-rem %) base)\n   (remove #(contains? base %) to-rem))))", "user": "4daeff24edd6309eace4d16e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat\n        (filter\n         #((complement contains?) s2 %1) s1)\n        (filter\n         #((complement contains?) s1 %1) s2)))\n  )", "user": "524025bce4b0ad64fa01030f"}, {"problem": 88, "code": "(fn [a b]\n  (let [c (clojure.set/intersection a b)]\n    (set (for [x (into a b) :when (not (contains? c x))] x))))", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 88, "code": "(fn sk [a b]\n  (set (concat\n     (filter (comp not a) b)\n     (filter (comp not b) a))))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 88, "code": "(fn [left right]\n    (set (concat (remove left right) (remove right left))))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 88, "code": "(fn\n  [A B]\n       (set (filter #(not (contains? (set (clojure.set/intersection A B)) %)) (clojure.set/union A B))))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 88, "code": "#(clojure.set/difference\n \t(clojure.set/union % %2) \n \t(clojure.set/intersection % %2))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 88, "code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2)\n                         (clojure.set/intersection %1 %2))", "user": "53e543efe4b036ad0777e457"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "53eaa804e4b036ad0777e4ea"}, {"problem": 88, "code": "(fn sym-set [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "541096bde4b01498b1a719b2"}, {"problem": 88, "code": "(fn [l r]\n   (clojure.set/union (clojure.set/difference r l) (clojure.set/difference l r)))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 88, "code": "(fn [xs1 xs2]\n   (set (into \n     (filter #(not (xs2 %)) xs1) \n     (filter #(not (xs1 %)) xs2))))", "user": "54094824e4b0addc1aec66da"}, {"problem": 88, "code": "(fn [c0 c1] \n  (clojure.set/union\n     (clojure.set/difference c0 c1)\n     (clojure.set/difference c1 c0)))", "user": "53480973e4b084c2834f4a52"}, {"problem": 88, "code": "(fn [xs ys]\n  (set (concat (clojure.set/difference xs ys)\n        (clojure.set/difference ys xs))))", "user": "54133900e4b01498b1a719de"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "52c672e2e4b0c2d177d6210e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 88, "code": "(fn sym-dif\n  [s1 s2]\n  (clojure.set/difference\n    (clojure.set/union s1 s2)\n    (clojure.set/intersection s1 s2)))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 88, "code": "(fn [s1 s2]\n  (letfn [(diff [set1 set2]\n          (filter #(not (contains? set1 %1)) set2))]\n    (let [result1 (set (diff s1 s2))\n          result2 (set (diff s2 s1))]\n      (cond (and (seq result1) (seq result2)) (apply conj result1 result2)\n            (seq result1) result1\n            :else result2\n\n      )\n     )))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b))\n)", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 88, "code": "(fn [hs1 hs2] (let [hs (if-not (empty? hs2) (apply conj hs1 hs2) hs1)] (apply disj hs (map (fn[p1] (if (and (not (nil? (get hs1 p1))) (not (nil? (get hs2 p1)))) p1)) hs))))", "user": "53347274e4b0656e627bfd6b"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "53e76728e4b036ad0777e47c"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x (clojure.set/intersection x y)) (clojure.set/difference y (clojure.set/intersection x y))))", "user": "511036c5e4b04c71fce993ee"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat (filter #(not (contains? s2 %)) s1) (filter #(not (contains? s1 %)) s2))))", "user": "541c1e46e4b01498b1a71a70"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n(clojure.set/difference %2 %1))", "user": "52382d91e4b0fae3832e99f0"}, {"problem": 88, "code": "(fn [s1 s2]\n        (set (concat (remove (partial contains? s1) s2) (remove (partial contains? s2) s1))))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "52541fe6e4b0541d1855b964"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 88, "code": "(fn [left right]\n  (let [uni (clojure.set/union left right)\n        inter (clojure.set/intersection left right)]\n    (clojure.set/difference uni inter)))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 88, "code": "(fn [a b]\n  (let [i (clojure.set/intersection a b)] \n    (clojure.set/union (clojure.set/difference a i)\n                       (clojure.set/difference b i))))", "user": "4ea5ba92535d7eef308072d9"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5282f54be4b0239c8a67ada0"}, {"problem": 88, "code": "#(into #{} (concat (clojure.set/difference %1 %2)\n                   (clojure.set/difference %2 %1)))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 88, "code": "(fn set-diff [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 88, "code": "#(set (mapcat remove [% %2] [%2 %]))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 88, "code": "(fn [set1 set2]\n      (clojure.set/difference\n        (clojure.set/union set1 set2)\n        (clojure.set/intersection set1 set2)))", "user": "537bde5de4b06839e8705e73"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "4f856adfe4b033992c121c44"}, {"problem": 88, "code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 (clojure.set/intersection s1 s2)) (clojure.set/difference s2 (clojure.set/intersection s1 s2))))", "user": "51515a19e4b03e678e393acc"}, {"problem": 88, "code": "(fn [a b] \n(set (concat (apply disj a b) (apply disj b a))))", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 88, "code": "#(set (concat (remove % %2) (remove %2 %)))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 88, "code": "(fn symmetric-difference [x y]\n  (let [s1 (filter (partial (complement contains?) y) x)\n        s2 (filter (partial (complement contains?) x) y)]\n    (clojure.set/union (set s1) (set s2))))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 88, "code": "(fn mm [a b]\n  (set (concat (set (filter #(not (b %)) a)) \n          (set (filter #(not (a %)) b)))))", "user": "535f0cbde4b04ce2eb3ed2d9"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "53da3fcde4b0e771c3025497"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 88, "code": "#(into (apply disj %1 %2) (apply disj %2 %1))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 88, "code": "(fn [set1 set2]\n    (set (concat     (filter #(not ( set1 %)) set2)\n                     (filter #(not ( set2 %)) set1))))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (into s1 s2) (clojure.set/intersection s1 s2)))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 88, "code": "(fn sym-diff [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "53a511aae4b0b62ce3005735"}, {"problem": 88, "code": "(fn [set1 set2]\n  (set (concat (remove set1 set2) (remove set2 set1))))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "531bfb69e4b08068f379ed97"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)) )", "user": "542baf7ce4b0dad94371f291"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "54431b6ee4b032a45b869385"}, {"problem": 88, "code": "(fn [s1 s2]\n\t(set\n      (concat\n         (remove s1 s2)\n         (remove s2 s1))))", "user": "54448e84e4b032a45b869393"}, {"problem": 88, "code": "(fn [s1 s2]\n    (->>\n      (-> []\n        (into s1)\n        (into s2)\n        (frequencies))\n      (filter #( = 1 (val %))  )\n      (keys)\n      (sort)\n      (set))\n   )", "user": "515ebde3e4b01e5d11ccd0a8"}, {"problem": 88, "code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 88, "code": "#(set (reduce conj (remove %1 %2) (remove %2 %1)))", "user": "527818f7e4b03e8d9a4a7519"}, {"problem": 88, "code": "(fn symdiff [x y] \n  (clojure.set/union \n   \t(clojure.set/difference x y) \n   \t(clojure.set/difference y x)                     \n  )  \n)", "user": "54078851e4b0addc1aec66bd"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "52f8b86de4b047fd55836fdb"}, {"problem": 88, "code": "#(set (for [i (concat %1 %2) :when (not= (%1 i) (%2 i))] i))", "user": "5412646de4b01498b1a719d4"}, {"problem": 88, "code": "(fn symmetric-difference\n  [s1 s2]\n  (into #{} (concat (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))))", "user": "52561295e4b0541d1855ba03"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (if (empty? s1)\n    s2\n    (if (empty? s2)\n      s1\n      (let [head (first s1)\n            tail (rest s1)]\n        (if (contains? s2 head)\n          (sym-diff tail (disj s2 head))\n          (conj (sym-diff tail s2) head))))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 88, "code": "(fn f88 [s1 s2]\n     (apply hash-set(keys (filter #(= (val %) 1)(merge-with + (zipmap s1 (repeat (count s1) 1))  (zipmap s2 (repeat (count s2) 1))))))\n     )", "user": "526698c9e4b03e8d9a4a7144"}, {"problem": 88, "code": "(fn [x y]\n  (set\n   (filter\n    (fn [a] (or (and (x a) (not (y a))) (and (y a) (not (x a)))))\n    (concat x y))))", "user": "534941d1e4b084c2834f4a60"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/difference\n   (clojure.set/union x y)\n   (clojure.set/intersection x y)))", "user": "53322cece4b019098a6f8b73"}, {"problem": 88, "code": "#(set (concat (for [x %1 :when (not (%2 x))] x)(for [x %2 :when (not (%1 x))] x)))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 88, "code": "(fn [one two] (clojure.set/union (clojure.set/difference one two) (clojure.set/difference two one)))", "user": "52485723e4b05ef8e38e63d2"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "54524afbe4b0e397800069bc"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "54512df2e4b0e397800069ae"}, {"problem": 88, "code": "(fn [coll1 coll2] \n  (into #{} (concat (clojure.set/difference coll1 coll2) (clojure.set/difference coll2 coll1)))\n  )", "user": "540997ede4b0addc1aec66dd"}, {"problem": 88, "code": "#(clojure.set/difference\n  (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 88, "code": "(fn [a b]\n (into #{}\n  (concat\n   (filter #(not (a %1)) b)\n   (filter #(not (b %1)) a))))", "user": "54580586e4b01be26fd74616"}, {"problem": 88, "code": "(fn symdiff [col1 col2]\n  (into #{} (concat (filter #(nil? (col1 %)) col2)\n                    (filter #(nil? (col2 %)) col1))))", "user": "544257b4e4b032a45b869379"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "545801f6e4b01be26fd74615"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "544e1794e4b0e39780006980"}, {"problem": 88, "code": "(fn sym-diff [a b]\n    (set (concat (remove a b) (remove b a))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5460f59ce4b01be26fd74695"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 88, "code": "(fn [a b] \n  (into #{} \n        (filter \n         #(and (or (contains? a %) (contains? b %)) (not (and (contains? a %) (contains? b %))))\n         (concat a b))))", "user": "5367bc60e4b0243289761e81"}, {"problem": 88, "code": "(fn sym-diff\n  [set1 set2]\n  (clojure.set/union\n   (clojure.set/difference set1 set2)\n   (clojure.set/difference set2 set1)))", "user": "526e1bd0e4b03e8d9a4a730b"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "544e9022e4b0e3978000698b"}, {"problem": 88, "code": "(fn simdif [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 88, "code": "(fn sym-diff \n  [s1 s2] \n  (set \n   (filter \n     #(not (contains? (set (for [x s1 y s2 :when (= x y)] x)) %))\n     (concat s1 s2))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "53b85932e4b047364c0444db"}, {"problem": 88, "code": "(fn [A B] (set (concat (remove A B) (remove B A))))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 88, "code": "(fn [xs ys]\n  (set (filter #(and (or (contains? xs %)\n                         (contains? ys %))\n                     (not (and (contains? xs %)\n                               (contains? ys %))))\n               (concat xs ys))))", "user": "5136f659e4b04059df19f2fd"}, {"problem": 88, "code": "(fn [a b]\n  (let [u (clojure.set/union a b)\n        i (clojure.set/intersection a b)]\n    (clojure.set/difference u i)))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 88, "code": "#(apply disj (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 88, "code": "(fn symdi [xs ys]\n  (clojure.set/union (clojure.set/difference xs ys) (clojure.set/difference ys xs)))", "user": "5252b59de4b0541d1855b8cf"}, {"problem": 88, "code": "(fn[s t]\n  (let [\n       a (clojure.set/union s t)\n       b (clojure.set/intersection s t)] (clojure.set/difference a b)))", "user": "54651ef5e4b01be26fd746d5"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 88, "code": "(fn symdiff [s1 s2]\n  (clojure.set/union\n   (set (filter #(not (contains? s2 %)) s1))\n   (set (filter #(not (contains? s1 %)) s2))))", "user": "54651faee4b01be26fd746d6"}, {"problem": 88, "code": "(fn [seta setb]\n  (set\n   (concat\n    (clojure.set/difference seta setb)\n    (clojure.set/difference setb seta))))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 88, "code": "(fn [a b]\n   (into (into #{} (clojure.set/difference a b)) (clojure.set/difference b a)))", "user": "51672d15e4b079759a74a5e7"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 88, "code": "#(into #{} (concat (remove %2 %1) (remove %1 %2)))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 88, "code": "(fn symdiff [X Y]\n  (clojure.set/union (clojure.set/difference X Y) (clojure.set/difference Y X)))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 88, "code": "(fn symm-diff [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b )))", "user": "54797964e4b0c51c1f4d72c6"}, {"problem": 88, "code": "(fn [xs ys]\n  (apply hash-set \n         (concat\n          (filter #(not (contains? xs %)) ys )\n          (filter #(not (contains? ys %)) xs ))))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n    (clojure.set/difference a b)\n    (clojure.set/difference b a)))", "user": "53a074a4e4b0ca733b9744af"}, {"problem": 88, "code": "(fn [s1 s2]\n    (clojure.set/difference (clojure.set/union s1 s2)\n                            (clojure.set/intersection s1 s2)))", "user": "53613db8e4b0243289761e41"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "4fe9de74e4b0547ebccb2475"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 88, "code": "(fn [a b]\n  (set (filter #(not (and (a %) (b %)))(into a b))))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 88, "code": "(fn sym-diff [a b]\r\n  (into #{}\r\n    (mapcat\r\n      identity\r\n      (filter\r\n        #(= 1 (count %))\r\n        (vals (group-by identity (concat a b)))))))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54577fefe4b01be26fd7460d"}, {"problem": 88, "code": "(fn symDiff [xs ys]\n  (clojure.set/difference (clojure.set/union xs ys)\n                          (clojure.set/intersection xs ys)))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 88, "code": "#(into (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5032748ae4b0e78df07b092f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54357066e4b0b6b47310fcfd"}, {"problem": 88, "code": "(fn symdiff[res spart]\n   (if (empty? spart)\n     (set res)\n     (let [a (first spart)]\n       (println \"a: \" a \" res:\" res \" spart: \" spart \" a in res? \" (contains? res a))\n       (if (contains? res a)\n         (symdiff (set(remove (fn[x](= a x)) res)) (set (rest spart)))\n         (symdiff (set(cons a res)) (set (rest spart)))\n       )\n     )\n   )\n )", "user": "545537c1e4b0e397800069dd"}, {"problem": 88, "code": "(fn f [x y]\n  (if (empty? x)\n    y\n   (let [e (first x)\n         yy (if (y e)\n              (disj y e)\n              (conj y e))]\n     (f (disj x e) yy))))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 88, "code": "(fn [xs1 xs2]\n  (letfn [(diff [xs1 xs2] (filter #(not (contains? xs1 %)) xs2))]\n    (set (concat (diff xs1 xs2) (diff xs2 xs1)))))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [i (into #{} (filter s1 s2))\n        ni (partial filter (complement i))]\n    (into #{} (concat (ni s1) (ni s2)))))", "user": "4e6a2f93535d8ccf87e9feaa"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "544fbabce4b0e39780006999"}, {"problem": 88, "code": "#(into (apply disj %1 %2) (apply disj %2 %1))", "user": "5458a729e4b01be26fd74622"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "54848141e4b0e286459a119e"}, {"problem": 88, "code": "(fn [a b] \n  (let \n    [f (fn [x y] (set (filter #(nil? (y %)) x)))] \n    (set (concat (f b a) (f a b)))))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 88, "code": "(fn symdiff [aset bset]\n  (let [all (clojure.set/union aset bset)]\n    (set (filter #(or (and (contains? aset %) (not (contains? bset %)))\n                      (and (not (contains? aset %)) (contains? bset %)))\n                 all))))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5485bc1be4b0e286459a11b1"}, {"problem": 88, "code": "(fn [v1 v2]\n  (set(concat\n   (filter #(not (v1 %)) v2)\n   (filter #(not (v2 %)) v1))))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 88, "code": "(fn diff [a b] (let [d clojure.set/difference] (clojure.set/union (d a b) (d b a))))", "user": "5472d919e4b094393f72dd7b"}, {"problem": 88, "code": "(fn sym-diff \n  [c1 c2]\n  (let [r1 (set (remove c2 c1))\n        r2 (set (remove c1 c2))]\n    (clojure.set/union r1 r2)))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 88, "code": "(fn symmetric-diff [a b]\n  (clojure.set/difference (clojure.set/union a b)\n                          (clojure.set/intersection a b)))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference\n           (clojure.set/union a b)\n           (clojure.set/intersection a b))\n  )", "user": "53e745a1e4b036ad0777e479"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 88, "code": "(fn symm-diff [a b]\n  (clojure.set/difference\n    (clojure.set/union a b)\n    (clojure.set/intersection a b)\n    )\n  )", "user": "5488872ee4b0e286459a11d3"}, {"problem": 88, "code": "(fn [set1 set2] \n  (into #{} \n        (map first \n             (filter #(= (count %) 1) \n                     (partition-by identity \n                                   (sort (concat set1 set2)))))))", "user": "4fbfbd4fe4b081705acca31c"}, {"problem": 88, "code": "(fn [a b]\n  (set (concat (remove a b)\n               (remove b a))))", "user": "4daee8e9edd6309eace4d166"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "54903056e4b0b312c081ff2e"}, {"problem": 88, "code": "(fn [x y]\n   (clojure.set/select #(not ((clojure.set/intersection x y) %))\n                         (clojure.set/union x y)))", "user": "53b12c76e4b047364c04448a"}, {"problem": 88, "code": "(fn [s s'] (clojure.set/union (clojure.set/difference s s') (clojure.set/difference s' s)))", "user": "548f5086e4b0e286459a1239"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 88, "code": "#(set \n  (concat (clojure.set/difference % %2)\n          (clojure.set/difference %2 %)))", "user": "52540bcce4b0541d1855b952"}, {"problem": 88, "code": "(fn [p,q] (into #{} (concat (remove q p) (remove p q))))", "user": "52b7a904e4b0c58976d9ad51"}, {"problem": 88, "code": "#(set (concat (remove %2 %1) (remove %1 %2)))", "user": "54926752e4b0b312c081ff44"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "5466199ce4b01be26fd746e2"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "543823f1e4b032a45b869311"}, {"problem": 88, "code": "(fn [s1 s2]\n    (set (concat (filter (complement s1) s2)\n                 (filter (complement s2) s1))))", "user": "4f9b3532e4b0dcca54ed6d13"}, {"problem": 88, "code": "#(let [symdiff (fn [xs ys] (filter identity (map (fn [x] (if-not (contains? ys x) x)) xs)))] (into #{} (concat (symdiff % %2) (symdiff %2 %))))", "user": "549def9ce4b0f3d1d8e70f99"}, {"problem": 88, "code": "#(into\n  (clojure.set/difference % %2)\n  (clojure.set/difference %2 %))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 88, "code": "(fn symmetric-set [s1 s2]\n  (set (for [[k v] (frequencies (concat s1 s2)) :when (= 1 v)] k)))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 88, "code": "#(let [d (fn [a b] (filter (comp not b) a))] \n \t(set (concat (d %2 %1) (d %1 %2))))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 88, "code": "#(set (concat (filter (complement %1) %2) (filter (complement %2) %1)))", "user": "512b07f7e4b078b06821febb"}, {"problem": 88, "code": "(fn c [x y] (set (for [i (set (concat x y)) :when (not (and (contains? (set x) i) (contains? (set y) i)))] i)))", "user": "5099283ce4b0cae2931060af"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "53029281e4b0d8b024fd372e"}, {"problem": 88, "code": "(fn symm [s1 s2]\n  (set\n   (concat\n    (filter #(not (s2 %)) s1)\n    (filter #(not (s1 %)) s2))\n   )\n  )", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 88, "code": "(fn diff [a b]\n  (cond (empty? a) b\n        (empty? b) a\n        true (set\n         (apply conj\n                (filter #(not ( contains?  a %)) b)\n                (filter #(not ( contains? b %))  a)))))", "user": "4e7e241a535db169f9c79705"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "52e16face4b09f7907dd1421"}, {"problem": 88, "code": "(fn symmetric-diff [set1 set2]\n  (reduce (fn [result el]\n            (if (not (and (contains? set1 el) (contains? set2 el)))\n              (conj result el)\n              result)) #{} (set (concat set1 set2))))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 88, "code": "#(into (set (remove % %2)) (remove %2 %))", "user": "50ef4e2be4b0a78662fa2653"}, {"problem": 88, "code": "(fn p28-sym-diff [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "543b12cce4b032a45b86932a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat (apply disj s1 s2)\n               (apply disj s2 s1))))", "user": "51c611c4e4b03a28d42333bf"}, {"problem": 88, "code": "(fn [left right]\n   (letfn [(f [l r]\n             (reduce (fn [acc curr]\n                       (if (contains? r curr)\n                         (disj acc curr)\n                         (if (contains? acc curr)\n                           acc\n                           (conj acc curr)))) r l))]\n     (if (< (count left) (count right))\n       (f right left)\n       (f left right))))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference \n   (clojure.set/union a b) \n   (clojure.set/intersection a b)))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 88, "code": "#(set (for [x (clojure.set/union % %2)\n            :when (or (and (% x) (not (%2 x)))\n                      (and (not (% x)) (%2 x)))] x))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 88, "code": "(fn sym-dif [s1 s2]\n  \"Remove all from s1 that are in s2.\n  Then vice versa.\n  Concat, and make into a set.\"\n  (set\n    (concat (remove #(contains? s2 %) s1)\n            (remove #(contains? s1 %) s2))))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 88, "code": "#(set (mapcat remove [% %2] [%2 %]))", "user": "50ec69e0e4b04edc3377704a"}, {"problem": 88, "code": "(fn [a b]\n          (clojure.set/union (clojure.set/difference a b)\n                             (clojure.set/difference b a)))", "user": "54b13dbce4b09f271ff37d1c"}, {"problem": 88, "code": "#(set (map first (filter (fn [p] (= 1 (count (second p)))) (group-by identity (concat %1 %2)))))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 88, "code": "(fn [s1 s2] (set (concat (apply disj s1 s2) (apply disj s2 s1))))", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 88, "code": "#(into (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "4fabbd3ee4b081705acca21e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %2 %) (clojure.set/difference % %2))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference (clojure.set/union %1 %2) %1)\n  (clojure.set/difference (clojure.set/union %1 %2) %2))", "user": "534bfc71e4b084c2834f4a88"}, {"problem": 88, "code": "(fn [a b]\n (clojure.set/difference\n  (clojure.set/union a b)\n  (clojure.set/intersection a b)))", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 88, "code": "#(set (into (remove % %2) (remove %2 %)))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "52c08c59e4b07a9af5792351"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 88, "code": "#(apply clojure.set/union (map\n  (let [i (clojure.set/intersection %1 %2)]\n     (fn [s] (clojure.set/difference s i))) [%1 %2]))", "user": "54bec835e4b0ed20f4ff6ef7"}, {"problem": 88, "code": "(fn dif [a b]\n  (set (concat (filter #(not (contains? b %)) a) (filter #(not (contains? a %)) b))))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 88, "code": "(fn [a b]\n  (set (filter #(not= (a %1) (b %1))\n               (set (concat a b)))))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 88, "code": "(fn sym-diff\n  [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5383668ee4b06839e8705edd"}, {"problem": 88, "code": "(fn [s1 s2] (let [cmn (filter (fn [i] (contains? s2 i)) s1)] (set (filter (fn [e] ((complement contains?) (set cmn) e)) (into s1 s2)))))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/union\n    (clojure.set/difference set1 set2)\n    (clojure.set/difference set2 set1)))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b)\n                          (clojure.set/intersection a b)))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 88, "code": "(fn [s t]\n    (loop [q (clojure.set/union s t) i #{}]\n      (if (seq q)\n        (recur (rest q) (if (and (or (contains? s (first q)) (contains? t (first q))) (not (and (contains? s (first q)) (contains? t (first q)))))  \n                          (conj i (first q))\n                          i\n                          ))\n        i                                 \n        )                                   \n      )                                     \n    )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 88, "code": "(fn [a b]\n  (let [uniqa (clojure.set/difference a b)\n        uniqb (clojure.set/difference b a)]\n    (clojure.set/union uniqa uniqb)))", "user": "5317d78ee4b08068f379ed63"}, {"problem": 88, "code": "(fn [s1 s2] \n  (set \n   (filter #(or \n             (and (contains? s1 %) (not (contains? s2 %))) \n             (and (contains? s2 %) (not (contains? s1 %)))) \n    (clojure.set/union s1 s2))))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 88, "code": "(fn __ [s1 s2]\n  (set (concat (filter #(not (contains? s2 %)) s1)\n               (filter #(not (contains? s1 %)) s2))))", "user": "54c271b9e4b045293a27f602"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 88, "code": "(fn [set1 set2] \n  (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2)))", "user": "546692aee4b01be26fd746e7"}, {"problem": 88, "code": "(fn [s1 s2]\n  (-> []\n      (concat (filter #(not (contains? s2 %)) s1))\n      (concat (filter #(not (contains? s1 %)) s2))\n      set))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/union\n    (clojure.set/difference set1 set2)\n    (clojure.set/difference set2 set1)))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference % %2) (clojure.set/difference %2 %)))", "user": "519e70d5e4b0acf32bc6a42c"}, {"problem": 88, "code": "(fn [s t] (clojure.set/union (clojure.set/difference s t) (clojure.set/difference t s)))", "user": "52950ab6e4b02ebb4ef7501a"}, {"problem": 88, "code": ";(fn [a b]\n;  (set (concat\n;   (for [x a :when (not (b x))] x)\n;   (for [y b :when (not (a y))] y))))\n#(apply clojure.set/difference (apply (juxt clojure.set/union clojure.set/intersection) %&))\n;#(clojure.set/difference (apply clojure.set/union %&) (apply clojure.set/intersection %&))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 88, "code": "(fn loo [s1 s2]\n\t(into (sorted-set)\n\t(reduce \n\t\t(fn [col e]\n\t\t\t(cond\n\t\t\t\t(some #(= %1 e) col) (remove #(= %1 e) col)\n\t\t\t\t:else (conj col e)))\n\t\ts1\n\t\ts2))\n)", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 88, "code": "#(set (reduce conj (reduce disj %1 %2) (reduce disj %2 %1)))", "user": "51e1c176e4b06a68e693eafb"}, {"problem": 88, "code": "(fn f [set1 set2] \n  (->> (clojure.set/union set1 set2)\n       (filter #(not(contains? (clojure.set/intersection set1 set2) %)))\n       (set)))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 88, "code": "#(into (apply disj %1 %2) (apply disj %2 %1))", "user": "54c641f8e4b045293a27f628"}, {"problem": 88, "code": "(fn [s1 s2] (let [d1 (for [s s1\n                           :when (not (s2 s))]\n                       s)\n                  d2 (for [s s2\n                           :when (not (s1 s))]\n                       s)]\n              (set (lazy-cat d1 d2))))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 88, "code": "#(apply disj (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 88, "code": "(fn [c1 c2]\n  (let [u (clojure.set/union c1 c2)\n        i (clojure.set/intersection c1 c2)]\n    (clojure.set/difference u i)))", "user": "54246d6de4b01498b1a71aec"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 88, "code": "(fn [s1 s2] (set (map first (remove #(> (count (second %)) 1) (group-by identity (concat s1 s2))))))", "user": "54d03026e4b018d918be98de"}, {"problem": 88, "code": "(fn [x y]\n  (let [diff clojure.set/difference\n        union clojure.set/union]\n    (union (diff x y) (diff y x))))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 88, "code": "#(-> (reduce disj %1 %2)\n     (into (remove %1 %2)))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 88, "code": "(fn [a b] (set (concat\n   (filter #(not (contains? a %)) b)\n   (filter #(not (contains? b %)) a))))", "user": "4f35e662e4b0e243712b1ec6"}, {"problem": 88, "code": "(fn [a b]\n  (letfn [ (diff [a b] (filter (comp not b) a)) ] \n    (set (concat (diff a b) (diff b a))) ))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 88, "code": "(fn [s1 s2] (apply hash-set (filter (fn [x] (not (and (contains? s1 x) (contains? s2 x)))) (into s1 s2))))", "user": "53629381e4b0243289761e54"}, {"problem": 88, "code": "(fn [as bs]\n  (->> (concat (vec as) (vec bs))\n    (reduce #(update-in %1 [%2] (fnil inc 0)) {})\n    (reduce #(if (= 1 (%2 1)) (conj %1 (%2 0)) %1) #{})\n  )\n)", "user": "5481be5fe4b0e286459a1172"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 88, "code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 88, "code": "#(set (concat (remove % %2)(remove %2 %)))", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 88, "code": "(fn [xs1 xs2]\n  (let [values (concat xs1 xs2)\n        sames (map first (filter #(< 1 (count %)) (vals (group-by identity values))))]\n    (set (filter (fn [v]\n                   (not (some #(= v %) sames)))\n                 values))))", "user": "51f40975e4b0fca5e8b4822e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat (remove s1 s2) (remove s2 s1))))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 88, "code": "(fn [& sets]\n  (clojure.set/union\n    (apply clojure.set/difference sets)\n    (apply clojure.set/difference (reverse sets))))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 88, "code": "(fn p [col1 col2]\n  (clojure.set/union (clojure.set/difference col1 col2)(clojure.set/difference col2 col1)))", "user": "53664e3be4b0243289761e74"}, {"problem": 88, "code": "(fn [a b]\n  (let [c (clojure.set/intersection a b)]\n    (set\n     (concat\n      (remove c a)\n      (remove c b)))))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "5215661be4b02f6d8ea676c7"}, {"problem": 88, "code": "(fn [set1 set2] \n  (let [i (clojure.set/intersection set1 set2)] \n    (clojure.set/union (clojure.set/difference set1 i) \n                       (clojure.set/difference set2 i))))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 88, "code": "(fn [m1 m2] \n  (let [common (clojure.set/intersection m1 m2)]\n    (clojure.set/union\n      (clojure.set/difference m1 common)\n      (clojure.set/difference m2 common))))", "user": "4f7207d3e4b07046d9f4f019"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 88, "code": "(fn [a b]\n   (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 88, "code": "#(clojure.set/difference (into % %2) (clojure.set/intersection % %2))", "user": "5499e23de4b03163384f4706"}, {"problem": 88, "code": "(fn foo [xs ys]\n  (let [zs (concat xs ys)\n        freq (frequencies zs)]\n    (set (for [k freq\n               :when (= 1 (second k))]\n           (first k)))))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 88, "code": "(fn [x y] (into #{} \n                 (concat\n                   (filter #(not (y %)) (into [] x)) \n                   (filter #(not (x %)) (into [] y)) \n                   )))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 88, "code": "(fn [s1 s2] (let [inter (clojure.set/intersection s1 s2)\n\t\t\t     d1 (clojure.set/difference s1 inter)\n\t\t\t     d2 (clojure.set/difference s2 inter)]\n\t\t\t (clojure.set/union d1 d2)))", "user": "54d2b411e4b0e8a36923e5f9"}, {"problem": 88, "code": "#(set (concat (remove % %2) (remove %2 %)))", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "525cc912e4b0cb4875a45d48"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 88, "code": "(fn [set-1 set-2]\n  (set (concat (apply disj set-1 set-2) \n               (apply disj set-2 set-1))))", "user": "510a3cd4e4b06956752d35ad"}, {"problem": 88, "code": "(fn\n  [set1 set2]\n  (set (filter #(and (or (set1 %) (set2 %)) (not (and (set1 %) (set2 %))))\n  (concat set1 set2))))", "user": "54e0e911e4b024c67c0cf7bc"}, {"problem": 88, "code": "(fn [set-a set-b]\n  (set\n   (seq\n    (into\n     (for [cur-a set-a\n           :when (not (set-b cur-a))]\n       cur-a)\n     (for [cur-b set-b\n           :when (not (set-a cur-b))]\n       cur-b)))))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union \n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54d6c80ce4b0a52adc2e2020"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "4e68c465535d8ccf87e9fe8a"}, {"problem": 88, "code": "(fn [& s]\n  (apply clojure.set/union (map #(apply clojure.set/difference %) [s (reverse s)])))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 88, "code": "(fn sd [s1 s2]\n  (let [u (clojure.set/union s1 s2)]\n    (set\n      (for[e u\n           :let [t1 (contains? s1 e)\n                 t2 (contains? s2 e)\n                 nt1 (not t1)\n                 nt2 (not t2)] \n           :when (or (and t1 nt2)(and t2 nt1))]\n        e))))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 88, "code": "(fn [x y]\n  (if (> (count x) (count y))\n    (apply conj (reduce disj y x) (reduce disj x y))\n    (apply conj (reduce disj x y) (reduce disj y x))\n    ))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 88, "code": "(fn [s1 s2]\n    (clojure.set/union\n      (clojure.set/difference s1 s2)\n      (clojure.set/difference s2 s1)))", "user": "51a54fb4e4b0def3c5c586a3"}, {"problem": 88, "code": "#(set (apply concat (get (group-by count (partition-by identity (sort (concat %1 %2)))) 1)))", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "51b76227e4b0d906fcd71d35"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2)\n                (apply disj %2 %1)))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 88, "code": "(fn [a b] (into #{} (concat (remove #(a %) b) (remove #(b %) a))))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 88, "code": "(fn [col1 col2]\n  (clojure.set/union\n    (clojure.set/difference col1 col2) \n    (clojure.set/difference col2 col1)))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 88, "code": "(fn [s1 s2] (into #{} (concat (filter #(nil? (s2 %)) s1) (filter #(nil? (s1 %)) s2))))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 88, "code": "(fn [x y]\n    (set (concat (remove x y) (remove y x))))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54f1b4e7e4b024c67c0cf8b5"}, {"problem": 88, "code": "(fn ([s1 s2] (apply hash-set (remove (apply hash-set (filter s1 s2)) (into s1 s2)))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [u (into s1 s2)\n        d (partial clojure.set/difference u)]\n    (into (d s1)\n          (d s2))))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54d4b3a7e4b0a52adc2e2003"}, {"problem": 88, "code": "#(into (set (remove %2 %)) (remove % %2))", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 88, "code": "(fn [x y]\n  (let [intersection (clojure.set/intersection x y)\n        xclean (clojure.set/difference x intersection)\n        yclean (clojure.set/difference y intersection)]\n    (clojure.set/union xclean yclean)))", "user": "54edfa10e4b024c67c0cf868"}, {"problem": 88, "code": "(fn [s t]\n  (let [i (clojure.set/intersection s t)]\n    (clojure.set/union (clojure.set/difference s i) (clojure.set/difference t i))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat (remove s1 s2) (remove s2 s1))))", "user": "51f66891e4b06ff1c25c52c1"}, {"problem": 88, "code": "(fn [a b]\n    (apply (partial disj (clojure.set/union a b)) (clojure.set/intersection a b)))", "user": "54508859e4b0e397800069a3"}, {"problem": 88, "code": "#(clojure.set/difference (apply clojure.set/union %&) (apply clojure.set/intersection %&))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 88, "code": "#(clojure.set/union\n   (set (for [s1 %1\n              :when (not (contains? %2 s1))]\n          s1))\n   (set (for [s1 %2\n              :when (not (contains? %1 s1))]\n          s1)))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 88, "code": "(fn [s1 s2]\n    (set (filter #(not (and (s1 %) (s2 %))) \n            (if (empty? s2) s1 (apply conj s1 s2)) )))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 88, "code": "#(set (map first (filter (fn [v] (= 1 (second v))) (frequencies (concat %1 %2)))))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 88, "code": "#(set (keys (filter (comp (partial = 1) val) (frequencies (apply concat %&)))))", "user": "52be58d7e4b07a9af579231d"}, {"problem": 88, "code": "(fn [set1 set2]\n  (let [i (clojure.set/intersection set1 set2)]\n    (clojure.set/union (clojure.set/difference set1 i)\n           (clojure.set/difference set2 i))))", "user": "545944a2e4b01be26fd74627"}, {"problem": 88, "code": "#(set (concat (filter (complement %2) %1) (filter (complement %1) %2)))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference\n   (clojure.set/union s1 s2)\n   (clojure.set/intersection s1 s2)))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (lazy-cat (for [x (vec s1) :when (not (contains? s2 x))] x)\n                  (for [y (vec s2) :when (not (contains? s1 y))] y))))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 88, "code": "(fn [coll1 coll2]\n  (set (cond\n      (empty? coll1) coll2\n      (empty? coll2) coll1\n      :else (concat (clojure.set/difference coll1 coll2) (clojure.set/difference coll2 coll1)))))", "user": "54eea988e4b024c67c0cf875"}, {"problem": 88, "code": "(fn [xs ys]\n   (-> #{}\n       (into (remove #(contains? xs %) ys))\n       (into (remove #(contains? ys %) xs))))", "user": "52cee992e4b07d0d72b27395"}, {"problem": 88, "code": "(fn [x y]\n    (loop [a 0 j (set (distinct (concat x y)))]\n      (if (= a (count (clojure.set/intersection x y)))\n        j\n        (recur (inc a) (disj j (nth (vec (clojure.set/intersection x y)) a))))))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "54eee3a3e4b024c67c0cf879"}, {"problem": 88, "code": "(fn symm-diff [c1 c2]\n  (let [f (fn [x y] (filter (fn [elem1] (not-any? (fn [elem2] (=  elem1 elem2)) y)) x)) ]\n  (set (concat (f c1 c2) (f c2 c1)))))", "user": "51eec1a6e4b0871fa145d98d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "user": "5236cd89e4b0e010857b4e45"}, {"problem": 88, "code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "550e0373e4b06e50f9beb162"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "544e8369e4b0e39780006987"}, {"problem": 88, "code": "(fn un-intersect [s1 s2]\n          (apply hash-set \n                 (into \n                  (remove s1 s2)\n                  (remove s2 s1))))", "user": "530b8580e4b02e82168697cc"}, {"problem": 88, "code": "(fn [a b]\n  (let [c (into a b)]\n    (set (filter #(or (not (a %))\n                 (not (b %)))\n            c))))", "user": "5488537be4b0e286459a11cf"}, {"problem": 88, "code": "(fn [a b]\n   (let [sa (filter #(not (contains? a %)) b)\n         sb (filter #(not (contains? b %)) a)]\n     (into #{} (concat sa sb))))", "user": "52c45ac8e4b0c2d177d620d9"}, {"problem": 88, "code": "(fn [xs1 xs2]\n  (into \n   (into #{} (filter #(not (xs1 %)) xs2))\n    (filter #(not (xs2  %)) xs1)))", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 88, "code": "(fn [s1 s2]\n   (let [all (clojure.set/union s1 s2)\n         same (clojure.set/intersection s1 s2)]\n     (clojure.set/difference all same)))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference \n   (clojure.set/union s1 s2)\n   (clojure.set/intersection s1 s2)))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 88, "code": "(fn [one two]\n  (into #{}\n        (concat\n          (for [elem one :when (not (two elem))]\n            elem)\n          (for [elem two :when (not (one elem))]\n            elem))))", "user": "53908e6be4b0b51d73faae9a"}, {"problem": 88, "code": "(fn symmetric-diff [x y] (loop [src x, dest y] (if (empty? dest) src (if  (contains? src (first dest)) (recur (disj src (first dest)) (rest dest)) (recur (conj src (first dest)) (rest dest))))))", "user": "52457931e4b08ba239308107"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference\n   (clojure.set/union a b)\n   (clojure.set/intersection a b)\n  )\n)", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 88, "code": "(fn [xs ys] (set (remove #(and (xs %) (ys %)) (concat xs ys))))", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5511fd7ee4b06e50f9beb19e"}, {"problem": 88, "code": "(fn [seta setb]\n   (reduce (fn [x y] (println y) (if (contains? seta y)\n                                   (if (contains? setb y)\n                                     x\n                                     (conj x y))\n                                   (conj x y))) #{} (into #{} (concat seta setb))))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [d clojure.set/difference]\n    (into (d s1 s2) (d s2 s1))))", "user": "53213810e4b09d4e7a9b54b0"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 88, "code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union \n    (clojure.set/difference a b)\n    (clojure.set/difference b a)))", "user": "503f923fe4b00d1a725ff2ad"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n        \t\t\t(clojure.set/difference %2 %1))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 88, "code": "(fn symdiff\n  [s1 s2] {:pre [(set? s1), (set? s2)]}\n  (clojure.set/difference (clojure.set/union s1 s2)\n                          (clojure.set/intersection s1 s2)))", "user": "4fc6305de4b0ee37620e180b"}, {"problem": 88, "code": "(fn [s1 s2] \n  (let [f (fn [sa sb r] (reduce #(if (contains? sb %2) % (conj % %2)) r sa))]\n    (f s2 s1 (f s1 s2 #{}))))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 88, "code": "(fn [a b]\n    (let [c (loop [b b acc a]\n              (if (empty? b)\n                acc\n                (recur (rest b) (conj acc (first b)))))]\n      (loop [c c acc #{}]\n        (if (empty? c)\n          acc\n          (let [fc (first c)]\n            (if (or (and (a fc) (not (b fc)))\n                    (and (not (a fc)) (b fc)))\n              (recur (rest c) (conj acc fc))\n              (recur (rest c) acc)))))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 88, "code": "(fn [a b]\n  (into (clojure.set/difference a b) (clojure.set/difference b a))\n)", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 88, "code": "#(clojure.set/union \n    (clojure.set/difference %1 %2) \n    (clojure.set/difference %2 %1))", "user": "50f02de7e4b0bdaecbb47db0"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5520974be4b08d5046aa8a63"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 88, "code": "#(into (apply disj % %2) (apply disj %2 %))", "user": "551c66dae4b07993ea3788de"}, {"problem": 88, "code": "(fn [s t]\n  (set (remove (set (filter s t)) (into s t))))", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 88, "code": "(fn symmetricDiff [s1 s2]\n  (apply merge \n         (clojure.set/difference s1 s2) \n         (clojure.set/difference s2 s1)))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 88, "code": "(fn [xset yset]\n  (loop [xyset (into xset yset), acc #{}]\n    (if-let [x (first xyset)]\n      (if (and (contains? xset x)\n               (contains? yset x))\n        (recur (rest xyset) acc)\n        (recur (rest xyset) (conj acc x)))\n      acc)))", "user": "552356fae4b0882d96d091af"}, {"problem": 88, "code": "(fn [s1 s2]\n          (clojure.set/union   \n            (clojure.set/difference (clojure.set/union s2 s1) s2 )\n            (clojure.set/difference (clojure.set/union s2 s1) s1 ))\n          )", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 88, "code": "(fn symetric-diff [s1 s2] \n    (set (concat (filter #(not (contains? s2 %)) s1) (filter #(not (contains? s1 %)) s2))))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (let [diff12 (clojure.set/difference s1 s2)\n        diff21 (clojure.set/difference s2 s1)]\n    (set (concat diff12 diff21))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 88, "code": "(fn [xs ys]\n  (set (concat (filter #(nil? (xs %)) ys)\n  (filter #(nil? (ys %)) xs)))\n  )", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 88, "code": "(fn[a b](set(filter #(not(contains? (clojure.set/intersection a b) %)) (into a b))))", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 88, "code": "(fn [x y]\n (set (mapcat #(remove (clojure.set/intersection x y) %) [x y])))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 88, "code": "(fn[a b](let[c (clojure.set/intersection a b)](clojure.set/difference (clojure.set/union a b) c)))", "user": "54ecd7dde4b024c67c0cf85c"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 88, "code": "(fn [a b]\n  (let [both (into a b)]\n    (into (clojure.set/difference both a)\n   \t\t  (clojure.set/difference both b))))", "user": "512e31e9e4b0b740abc59823"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55253217e4b0882d96d091ce"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 88, "code": "#(into (apply disj %2 %) (remove %2 %))", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 88, "code": "(fn [l r] (clojure.set/difference (clojure.set/union l r) (clojure.set/intersection l r)))", "user": "4f16d3fd535d64f60314644e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [diff1 (clojure.set/difference s1 s2)\n        diff2 (clojure.set/difference s2 s1)]\n    (clojure.set/union diff1 diff2)))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 88, "code": "#(clojure.set/difference \n   (clojure.set/union %1 %2) \n   (clojure.set/intersection %1 %2))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 88, "code": "(fn [s1 s2] (set (concat (filter #(not (contains? s1 %)) s2) (filter #(not (contains? s2 %)) s1))))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "4f4e78fee4b03ad3f0c10cc8"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference % %2) (clojure.set/difference %2 %)))", "user": "53ba41c2e4b047364c0444f3"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "514504c2e4b021a5ff8301fc"}, {"problem": 88, "code": "(fn [c1 c2]\n         (set (concat\n                (into #{} (->> c1 (filter #(not (c2 %)))))\n                (into #{} (->> c2 (filter #(not (c1 %)))))\n                ))\n         )", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 88, "code": "(fn [xs ys]\n  (set (filter \n   (fn [a] \n     (not (and \n           (some #(= a %) xs) \n           (some #(= a %) ys)))) \n   (set (concat xs ys)))))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 88, "code": "(fn [a b]\n  (set (concat (remove a b)\n  \t\t  \t   (remove b a))))", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 88, "code": "(fn [x y] \n  (set \n   (filter \n    (complement (set (filter x y))) \n    (into x y))))", "user": "52eaba10e4b09f7907dd14c2"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2)\n                          (clojure.set/intersection s1 s2)))", "user": "51a7fe50e4b08d8ec191b803"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 88, "code": "#(set (remove (set (filter % %2)) (into % %2)))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 88, "code": "#(apply sorted-set (clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2)))", "user": "553706d1e4b09218d5f44fc7"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 88, "code": "#(let [u clojure.set/union d clojure.set/difference] (u (d %1 %2) (d %2 %1)))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 88, "code": "#(set (concat (remove % %2) (remove %2 %)))", "user": "552694e7e4b0ffed3738f920"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference\n   (clojure.set/union s1 s2)\n   (clojure.set/intersection s1 s2)))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 88, "code": "(fn [a b]\n    (clojure.set/union (clojure.set/difference a b)\n                       (clojure.set/difference b a)))", "user": "5141a8f2e4b02fd87f5064c1"}, {"problem": 88, "code": "(fn [c1 c2]\n   (set (into (filter #(not (contains? c1 %)) c2) \n           (filter #(not (contains? c2 %)) c1))))", "user": "51bd255ce4b0df1216cefd94"}, {"problem": 88, "code": "(fn sym-diff [fst scd]\n  (let [to-excl (clojure.set/intersection fst scd)]\n    (->> (clojure.set/union fst scd) (filter #(not (to-excl %))) set)))", "user": "533b1dc4e4b0e30313ee6cc7"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "553c4614e4b09218d5f45014"}, {"problem": 88, "code": "#(let [intersected (clojure.set/intersection %1 %2)] \n   (clojure.set/union \n    (clojure.set/difference %1 intersected) \n    (clojure.set/difference %2 intersected)) )", "user": "54361d92e4b032a45b8692f7"}, {"problem": 88, "code": "(fn [a b] (apply disj (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union  %1 %2) (clojure.set/intersection %1 %2))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 88, "code": ";(fn symmetric-diff\n;  [s1 s2]\n;  (set (concat (vec (clojure.set/difference s2 s1)) \n;               (vec (clojure.set/difference s1 s2)))))\n\n(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 88, "code": "(fn [a b] (let [c (clojure.set/intersection a b)] \n             (clojure.set/union (clojure.set/difference a c) (clojure.set/difference b c))))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [helper (fn [re s11 s22]\n                 ( if (empty? s22)\n                    re\n                   (if (contains? s11 (first s22))\n                     (recur (disj re (first s22)) s11 (rest s22))\n                     (recur (conj re (first s22)) s11 (rest s22)))))]\n    (helper s1 s1 s2)))", "user": "54b64fbbe4b05787c3b163b8"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))\n\n; Hmmm, from other's solutions I see built in functions disj and complement.", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2)\n                          (clojure.set/intersection %1 %2))", "user": "554707bae4b0a04f79299544"}, {"problem": 88, "code": "(fn diff [s1 s2]\n  (cond\n    (empty? s1) s2\n    (contains? s2 (first s1)) (diff (rest s1) (disj s2 (first s1)))\n    :else (diff (rest s1) (conj s2 (first s1)))))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 88, "code": "(fn [x y]\n  (set (concat (filter #(not (contains? x %)) y)\n               (filter #(not (contains? y %)) x))))", "user": "55495318e4b0a04f79299566"}, {"problem": 88, "code": "(fn [s1 s2] (set (concat (apply (partial disj s1) s2) (apply (partial disj s2) s1))))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 88, "code": "(fn [a b]\n   (clojure.set/difference (clojure.set/union a b)\n   (clojure.set/intersection a b))\n   )", "user": "554b2151e4b0a04f79299580"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "555093b2e4b00713264bd9ab"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y  x)))", "user": "54eca495e4b024c67c0cf855"}, {"problem": 88, "code": "(fn [as bs]\n   (loop [xs (concat as bs)\n          r #{}]\n      (if (empty? xs)\n       r\n       (let [x (first xs)]\n         (if (or (and (as x) (not (bs x)))\n                 (and (bs x) (not (as x))))\n           (recur (rest xs) (conj r x))\n           (recur (rest xs) r))))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 88, "code": "(fn [s1 s2]\n  (reduce \n   #(if (and (s1 %2) (s2 %2) ) %1 (conj %1 %2))\n   #{} (concat s1 s2)))", "user": "554edb85e4b00713264bd99a"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 88, "code": "#(set (concat (filter (comp not (partial contains? %1)) %2) (filter (comp not (partial contains? %2)) %1)))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 88, "code": "(fn [set1 set2]\n  (set (concat (remove #(contains? set2 %) set1) (remove #(contains? set1 %) set2))))", "user": "554dff83e4b00713264bd98d"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (let [union (clojure.set/union s1 s2)]\n    (set (filter #(not (and (contains? s1 %)\n                            (contains? s2 %)))\n                 union))))", "user": "54c3747de4b045293a27f60e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "547c2c6ce4b0c51c1f4d72e3"}, {"problem": 88, "code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 88, "code": "#(set (concat (filter (complement %) %2) (filter (complement %2) %1)))", "user": "555521a5e4b0deb715856e12"}, {"problem": 88, "code": "(fn [set1 set2]\n  (reduce\n    #(if (and (contains? set1 %2) \n             (contains? set2 %2))\n       %\n       (conj % %2)) #{} (clojure.set/union set1 set2)))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 88, "code": "(fn symmetric-difference [x y]\n    (clojure.set/difference\n     (clojure.set/union x y)\n     (clojure.set/intersection x y)))", "user": "554dfe97e4b00713264bd98c"}, {"problem": 88, "code": "#(reduce conj (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5280a1ece4b0757a1b171407"}, {"problem": 88, "code": "(fn[c1 c2]\n  (apply hash-set\n   (concat\n    (filter #(not (c1 %)) c2)\n    (filter #(not (c2 %)) c1))))", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 88, "code": "(fn [sa sb]\n  (-> (concat (filter (comp nil? sb) sa) (filter (comp nil? sa) sb))\n      set))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "user": "5553b924e4b0deb715856e06"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [isec (clojure.set/intersection s1 s2)\n        u1 (clojure.set/difference s1 isec)\n        u2 (clojure.set/difference s2 isec)]\n    (clojure.set/union u1 u2)))", "user": "553638bae4b09218d5f44fba"}, {"problem": 88, "code": "(fn [a b]\n  (reduce (fn [acc v] (if (not (and (a v) (b v))) (conj acc v) acc)) #{} (clojure.set/union a b)))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 88, "code": "#(apply disj (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5005b57de4b0678c553fc46a"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "555287a4e4b0deb715856df5"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b)\n                                (clojure.set/difference b a)))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 88, "code": "(fn[list-1, list-2] (let [missing-in-1 (clojure.set/difference list-2 list-1) missing-in-2 (clojure.set/difference list-1 list-2)] (clojure.set/union missing-in-1 missing-in-2)))", "user": "54f296efe4b024c67c0cf8c8"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "54fe57f6e4b07d26eda61d42"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5264383be4b03e8d9a4a70cb"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 88, "code": "(fn [xs ys] \n  (set \n   (concat \n     (filter #(not (ys %)) xs) \n     (filter #(not (xs %)) ys))))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 88, "code": "(fn [s1 s2]\n  (reduce\n   (fn [acc e]\n     (if (and (contains? s1 e) (contains? s2 e))\n       acc\n       (conj acc e)))\n   #{}\n   (into s1 s2)))", "user": "4fdb881ee4b05e33b9224f5e"}, {"problem": 88, "code": "(fn [f s] (clojure.set/union (clojure.set/difference f s) (clojure.set/difference s f)))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 88, "code": "(fn [a b] (set (filter #(some nil? ((juxt a b) %1)) (clojure.set/union a b))))", "user": "555ac933e4b0deb715856e49"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "555da2c4e4b0a2eb076a39ae"}, {"problem": 88, "code": "(fn sol [s1 s2] (let [u (clojure.set/union s1 s2)] (set (filter #(not (and (and (s1 %1) (s2 %1)))) u))))", "user": "54857657e4b0e286459a11ac"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2)\n                          (clojure.set/intersection s1 s2)))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) \n                    (clojure.set/difference %2 %1))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 88, "code": "#(set (concat (remove % %2) (remove %2 %)))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "55586905e4b0deb715856e2b"}, {"problem": 88, "code": "(fn [set1 set2]\n   (clojure.set/difference\n     (clojure.set/union set1 set2)\n     (clojure.set/intersection set1 set2))\n)", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 88, "code": "#(into (apply (partial disj %1) %2) (apply (partial disj %2) %1))", "user": "555b35f7e4b0deb715856e4b"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 88, "code": "(fn [x y]\n  (loop [acc (into x y)\n         coll y]\n    (cond\n      (empty? coll) acc\n      (and (contains? x (first coll)) (contains? y (first coll))) (recur (disj acc (first coll)) (rest coll))\n      :else (recur acc (rest coll)))))", "user": "556a6137e4b09a3098a524e0"}, {"problem": 88, "code": "(fn [a b]\n  (set (concat \n   (filter #(not (a %)) b) \n   (filter #(not (b %)) a))))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 88, "code": "#(apply disj (into %1 %2) (clojure.set/intersection %1 %2))", "user": "554b8572e4b0a04f79299589"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "54f8b6f4e4b01ecee9d8882c"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 88, "code": "#(set (concat (remove %1 %2)(remove %2 %1)))", "user": "55654e17e4b0c656e3ff1818"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 88, "code": "#(into (set (remove %2 %)) (remove % %2))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 88, "code": "#(into\n  (set (remove %1 %2))\n  (remove %2 %1))", "user": "54db8ddae4b024c67c0cf767"}, {"problem": 88, "code": "(fn [a b]\r\n  (letfn [\r\n      (diff [a b] (reduce disj a b))\r\n      (union [a b] (reduce conj a b))]\r\n    (union (diff a b) (diff b a))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 88, "code": "(fn [r l] \n   (clojure.set/difference \n     (clojure.set/union l r)\n     (clojure.set/intersection l r\n       )))", "user": "556f443be4b09a3098a5251e"}, {"problem": 88, "code": "(fn [x y] \n  (cond\n    (empty? x) y\n    (empty? y) x\n    :else (set (concat (reduce (fn [xs e] (cond \n            (contains? y e) xs\n            :else (conj xs e))) (list) x)\n(reduce (fn [xs e] (cond \n            (contains? x e) xs\n            :else (conj xs e))) (list) y)))\n))", "user": "5374f931e4b06d7f452d9e2d"}, {"problem": 88, "code": "(fn [a b]\n  \n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a))\n  \n  )", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [same (clojure.set/intersection s1 s2)\n        both (clojure.set/union s1 s2)]\n    (clojure.set/difference both same)))", "user": "54a97853e4b09f271ff37cae"}, {"problem": 88, "code": "(fn [a b]\n  (let [c (clojure.set/intersection a b)]\n    (set (concat (remove c a) (remove c b)))))", "user": "55702081e4b09a3098a52529"}, {"problem": 88, "code": "#(into #{} (concat (remove  %2 %1)(remove  %1 %2)))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "557232a1e4b09a3098a52543"}, {"problem": 88, "code": "(fn [seta setb]\n    (into #{} (let [setab (clojure.set/union seta setb)]\n                (filter \n                 #(not (and (contains? seta %) (contains? setb %)))\n                 setab))))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "556a3243e4b09a3098a524de"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "524f3e6de4b0541d1855b805"}, {"problem": 88, "code": "#(let [diff clojure.set/difference]\n   (clojure.set/union (diff %1 %2) (diff %2 %1)))", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference\n   (clojure.set/union a b)\n  (clojure.set/intersection a b)))", "user": "53065acbe4b02e8216869792"}, {"problem": 88, "code": "(fn sym-dif [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 88, "code": "#(set (remove (clojure.set/intersection %1 %2) (clojure.set/union %1 %2)))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "533f09e1e4b085b17e897d9a"}, {"problem": 88, "code": "(fn [s1 s2]\n    (clojure.set/union\n      (clojure.set/difference s1 s2)\n      (clojure.set/difference s2 s1)))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 88, "code": "(fn symmetric-diff [set1 set2] (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 88, "code": "(fn [& pars] \n   (set (map first\n   (filter \n    #(= 1 (second %))\n   (frequencies (apply concat pars))))))", "user": "52503747e4b0541d1855b828"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "4ec6297b535d6d7199dd36c4"}, {"problem": 88, "code": "(fn [xs ys]\n  (cond (= xs #{}) ys\n        (= ys #{}) xs\n        :else (let [h (fn [s] (fn [n] (not (some #(= % n) s))))\n                    s1 (filter (h xs) ys)\n                    s2 (filter (h ys) xs)]\n                (set (apply conj s1 s2)))))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 88, "code": "#(clojure.set/union\n   (clojure.set/difference %1 %2)\n   (clojure.set/difference %2 %1))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "52a4879ce4b0c58976d9abdb"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "553fa883e4b0a04f792994f9"}, {"problem": 88, "code": "#(apply hash-set  (concat (remove %1 %2) (remove %2 %1)))", "user": "5565d5e4e4b0c656e3ff181f"}, {"problem": 88, "code": "(fn[st1 st2](clojure.set/union (clojure.set/difference st1 st2) (clojure.set/difference st2 st1 )))", "user": "55757e81e4b05c286339e063"}, {"problem": 88, "code": "(fn [a b] (set (map first (filter #(= 1 (-> % second)) (frequencies (apply concat a (list b)))))))", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 88, "code": "(fn [seta setb]\n  (set\n   (filter\n    #(not (and (contains? seta %) (contains? setb %)))\n     (concat seta setb))))", "user": "5576f299e4b05c286339e077"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1)\n  )", "user": "545ddac3e4b01be26fd74676"}, {"problem": 88, "code": "(fn [a b] \n  (clojure.set/union (clojure.set/difference a b)\n                     (clojure.set/difference b a)))", "user": "5579bc24e4b05c286339e098"}, {"problem": 88, "code": "(fn [s1 s2]\n  (loop [a (concat s1 s2) re #{}]\n    (if (empty? a)\n      re\n      (recur (rest a)\n             (if (and (contains? s1 (first a)) (contains? s2 (first a)))\n               re\n               (conj re (first a)))))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 88, "code": "(fn [as bs]\n           (reduce (fn[acc c]\n                     (if (and (as c) (bs c)) acc (conj acc c) )\n                     ) #{} (concat as bs))\n           )", "user": "52149e21e4b0961f15ac4d94"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/union (clojure.set/difference set1 (clojure.set/intersection set1 set2)) (clojure.set/difference set2 (clojure.set/intersection set1 set2))))", "user": "558378dce4b05c286339e115"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 88, "code": "(fn [set1 set2] \n     (into (sorted-set) (remove (into (sorted-set) (filter set1 set2))\n             (into set1 set2)))\n )", "user": "556f2009e4b09a3098a52519"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "557954aae4b05c286339e092"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "558466fce4b04192f3441eee"}, {"problem": 88, "code": "(fn myfn [coll coll2]\n  (let [a (apply disj coll coll2)\n        b (apply disj coll2 coll)\n        r (if (empty? b)\n            a\n            (apply conj a b))]\n    r))", "user": "52ba447ee4b07a9af57922ce"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 88, "code": "(fn diff-set\n  [s1 s2]\n  (clojure.set/union  (clojure.set/select #(nil? (s1 %)) s2)\n                      (clojure.set/select #(nil? (s2 %)) s1)))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "558306dfe4b05c286339e110"}, {"problem": 88, "code": "(fn [x y] (apply sorted-set (concat (clojure.set/difference x y) (clojure.set/difference y x))))", "user": "5589e88ae4b0277789237610"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54cbd6bae4b057c6fda3a282"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "5545477fe4b0a04f79299531"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [in (clojure.set/intersection s1 s2)]\n  (set (filter \n        #(not (contains? in %))\n        (concat s1 s2)))))", "user": "558bb38fe4b0277789237631"}, {"problem": 88, "code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "user": "4f070ce6535dcb61093f6c1e"}, {"problem": 88, "code": "(fn [x y] (apply sorted-set (map first (filter #(= (val %) 1) (frequencies (concat (seq x) (seq y)))))))", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 88, "code": "(fn [a b]                                                                                                                       \n    (let [union (into a b) intersection (filter a b)]                                                                                                   \n        (apply disj union intersection)))", "user": "558b50d5e4b027778923762b"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5589a735e4b059ccff29b206"}, {"problem": 88, "code": "(fn [s1 s2]\n\t(into #{}\n\t\t(concat \n\t\t\t(filter #(not (contains? s1 %)) s2)\n\t\t\t(filter #(not (contains? s2 %)) s1)\n\t\t)\n\t)\n )", "user": "5559b443e4b0deb715856e3c"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [intersec (clojure.set/intersection s1 s2)\n        whole (clojure.set/union s1 s2)]\n    (clojure.set/difference whole intersec)))", "user": "55860905e4b001b0851d7516"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "552a793ee4b0ffed3738f955"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5590e55de4b0277789237676"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "558d7dd3e4b0277789237647"}, {"problem": 88, "code": "(fn myfun\n  [set1 set2]\n  \n  (set\n   \t\n    (concat\n     \n     \t(filter #(= false (contains? set2 %))  set1)\n     \t(filter #(= false (contains? set1 %))  set2)\n     \n     )\n   \n   \n   ))", "user": "55897fe2e4b059ccff29b205"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "user": "55895eade4b059ccff29b202"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [u clojure.set/union d clojure.set/difference]\n    (u (d s1 s2) (d s2 s1))\n))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 88, "code": "(fn [x y](reduce \n          (fn[d v]            \n            (if(or (and (x v) (not (y v)))\n                     (and (y v) (not (x v)))\n                     )                           \n             (conj d v)\n             d\n            )            \n          )\n          #{}\n          (concat x y)))", "user": "555c6344e4b0b056612e224c"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "user": "53e76363e4b036ad0777e47b"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference \n           (clojure.set/union a b) \n           (clojure.set/intersection a b)))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5590ebb1e4b0277789237677"}, {"problem": 88, "code": "(fn [s1 s2]\n          (clojure.set/difference\n            (clojure.set/union s1 s2)\n            (clojure.set/intersection s1 s2)))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 88, "code": "#(into (set (remove % %2)) (remove %2 %))", "user": "523630eee4b05f3be1c7c8e8"}, {"problem": 88, "code": "(fn [a b] (set (filter #(not (and (a %) (b %))) (into a b))))", "user": "558f4fbae4b0277789237661"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [com (clojure.set/intersection s1 s2)]\n    (set (clojure.set/union (remove #(contains? com %) s1)\n         (remove #(contains? com %) s2)))))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 88, "code": "#(let [f clojure.set/difference]\n   (clojure.set/union (f %1 %2) (f %2 %1)))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) \n                         (clojure.set/intersection %1 %2) )", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %2 %1) (clojure.set/difference %1 %2))", "user": "5585f088e4b001b0851d7513"}, {"problem": 88, "code": "(fn sdiff [a b]\n  (clojure.set/union \n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [n1 (apply disj s1 s2)\n        n2 (apply disj s2 s1) ]\n    (set (concat n1 n2))\n  ))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 88, "code": "(fn [left right]\n  (clojure.set/union (clojure.set/difference left right) (clojure.set/difference right left)))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 88, "code": "(fn [A B]\n  (into (set (remove A B)) (remove B A)))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 88, "code": "(fn no88\n  ([x y] (no88 x y []))\n  ([x y z] (cond (empty? x) (apply hash-set (concat z y))\n             :else (if (some #(= (first x) %) y) (recur (rest x) (remove #(= (first x) %) y) z)\n                              (recur (rest x) y (conj z (first x)))))))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 88, "code": "(fn [A B]\n  (clojure.set/difference (clojure.set/union A B) (clojure.set/intersection A B)))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 88, "code": "(fn sym_diff [s1 s2]\n  (let [unique1 (clojure.set/difference s1 s2)\n        unique2 (clojure.set/difference s2 s1)]\n   (clojure.set/union unique1 unique2)))", "user": "559bdf16e4b066d22e731f5a"}, {"problem": 88, "code": "(fn symdiff [s1 s2]\n  (let [inter (clojure.set/intersection s1 s2)]\n    (clojure.set/union (clojure.set/difference s1 inter)\n                       (clojure.set/difference s2 inter))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 88, "code": "(fn [s1 s2]\n   (let [all (into (into [] s1) s2)]\n      (reduce #(if (and (some #{%2} s1) (some #{%2} s2))\n                  %1\n                  (conj %1 %2))\n          #{} all)))", "user": "52f53589e4b05e3f0be25f2c"}, {"problem": 88, "code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 88, "code": "#(set (mapcat remove [% %2] [%2 %]))\n\n;#(set (concat (remove % %2) (remove %2 %)))\n\n;#(set (remove (set (filter % %2)) (into % %2)))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "554a270fe4b0a04f79299570"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat (remove s1 s2) (remove s2 s1))))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1) ))", "user": "55306f9de4b076ab5578f814"}, {"problem": 88, "code": "(fn [a b] (set (remove #(and (contains? a %) (contains? b %)) (concat a b))))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 88, "code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 88, "code": "#(set (concat (remove % %2) (remove %2 %)))", "user": "503e91d4e4b06c4e0e1fa269"}, {"problem": 88, "code": "(fn [xs ys] (set (concat (apply disj xs ys) (apply disj ys xs))))", "user": "4fdb0c0ae4b05e33b9224f57"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "543d89dfe4b032a45b869350"}, {"problem": 88, "code": "#(into #{} (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 88, "code": "(fn sdiff [a b]\n  (clojure.set/union \n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "559c3d73e4b066d22e731f65"}, {"problem": 88, "code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 88, "code": "(fn [a b] (let [i (clojure.set/intersection a b)] (clojure.set/union (clojure.set/difference a i) (clojure.set/difference b i))))", "user": "559a8816e4b066d22e731f41"}, {"problem": 88, "code": "(fn [xs ys] \n  (clojure.set/union \n   (clojure.set/difference xs ys) \n   (clojure.set/difference ys xs)))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into #{}\n    (concat\n      (clojure.set/difference s1 s2)\n      (clojure.set/difference s2 s1))))", "user": "553527ede4b09218d5f44fab"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 88, "code": "(fn symmetric-difference\n  [in-set1 in-set2]\n  (clojure.set/union (clojure.set/difference in-set1 in-set2) (clojure.set/difference in-set2 in-set1))\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 88, "code": "#(clojure.set/difference (set (concat %1 %2))\n     (clojure.set/intersection %1 %2))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 88, "code": "(fn [a b]\n   (apply sorted-set (clojure.set/union\n    (clojure.set/difference a b)\n    (clojure.set/difference b a))))", "user": "55a30e9de4b0acc240e3152f"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 88, "code": "(fn [a b]\n  (let [x (clojure.set/difference a b)]\n    (let [y (clojure.set/difference b a)]\n      (set (concat x y)))))", "user": "5574c172e4b05c286339e059"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5576e78de4b05c286339e075"}, {"problem": 88, "code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 88, "code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "559eb160e4b0acc240e314e1"}, {"problem": 88, "code": "(fn [c1 c2] (set (apply concat (for [m2 [[c1 c2] [c2 c1]]]\n            (filter (fn [p] (not (some #(= % p) (second m2)))) (first m2))\n ))))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55b08677e4b002ce9d5cbc23"}, {"problem": 88, "code": "#(-> (concat \n        (clojure.set/difference %1 %2)\n        (clojure.set/difference %2 %1))\n       set)", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "user": "54a627bce4b09f271ff37c83"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [common (clojure.set/intersection s1 s2)]\n    (->> (map #(clojure.set/difference % common) [s1 s2])\n         (apply clojure.set/union))))", "user": "54c120d7e4b0ed20f4ff6f1c"}, {"problem": 88, "code": "(fn p88 ([set1 set2] \n           (p88 set1 set2 #{}))\n          ([set1 set2 final]\n  (let [same (->> set2\n                  (map #(some #{%} set1))\n                     (remove nil?)\n                     (set)\n                     )]\n    (->> (concat set1 set2)\n     (distinct)\n         (remove same)\n         (set)\n     )\n    )))", "user": "5400e918e4b0de5c41848619"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into (clojure.set/difference s1 s2)\n        (clojure.set/difference s2 s1)))", "user": "50ec409ce4b04edc33777045"}, {"problem": 88, "code": "(fn [s1 s2]\n    (->> (into (into [] s1) s2)\n         (group-by identity)\n         (filter (fn [[_ v]] (= (count v) 1)))\n         (map first)\n         (into #{})))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 88, "code": "#(reduce (fn [acc e]\n           (if (and (contains? %1 e) (contains? %2 e))\n             acc\n             (into acc [e])))\n         #{}\n         (into %1 %2))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 88, "code": "(fn [s1 s2]\n    (loop [s (concat s1 s2) r #{}]\n        (if (seq s)\n            (if (and (contains? s1 (first s)) (contains? s2 (first s)))\n                (recur (rest s) r)\n                (recur (rest s) (conj r (first s))))\n            r)))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference\n    (clojure.set/union s1 s2)\n    (clojure.set/intersection s1 s2)))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 88, "code": "(fn [set-a set-b]\n  (let [diff-a (remove set-b set-a)\n        diff-b (remove set-a set-b)]\n    (apply sorted-set (concat diff-a diff-b))))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 88, "code": "(fn sym-diff [set1 set2]\n  (clojure.set/union (clojure.set/difference set1 set2)\n                     (clojure.set/difference set2 set1)))", "user": "55bbfd60e4b01b9910ae29ed"}, {"problem": 88, "code": "(fn [a b] (into #{} (concat (remove b a) (remove a b))))", "user": "4faf97d8e4b081705acca258"}, {"problem": 88, "code": "(let [- #'clojure.set/difference\n      \u222a #'clojure.set/union]\n  (fn [a b] (\u222a (- a b) (- b a))))", "user": "52cb6bb0e4b07d0d72b2734c"}, {"problem": 88, "code": "(fn [x y]\n    (clojure.set/union (clojure.set/difference x y)\n                       (clojure.set/difference y x)))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 88, "code": "(fn [a b] (into (set (remove a b)) (remove b a)))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into (set (filter (complement s1) s2))\n        (filter (complement s2) s1)))", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5587cd86e4b059ccff29b1e6"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "516f5b7ee4b0ef3e37990e7e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "556204c2e4b0c656e3ff17d2"}, {"problem": 88, "code": "#(set (into (remove %1 %2) (remove %2 %1)))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 88, "code": "#(set (concat (for [x %1 :when (not (%2 x))] x) (for [y %2 :when (not (%1 y))] y)))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 88, "code": "(fn\n  [x y]\n  (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "55b3c03ee4b01b9910ae2975"}, {"problem": 88, "code": "(fn xor [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 88, "code": "#((comp set clojure.set/union) (filter (comp not %2) %) (filter (comp not %) %2))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 88, "code": "(fn [xs ys]\n  (letfn [(one-side [xs ys]\n            (set (filter\n                  (partial (complement contains?) xs)\n                  ys)))]\n    (into (one-side xs ys) (one-side ys xs))))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 88, "code": "(fn [s1 s2]\n (set (filter #(not (and (s1 %) (s2 %))) (concat (seq s1) (seq s2)))))", "user": "517e9526e4b09104ecebe7e2"}, {"problem": 88, "code": "#(clojure.set/union\n (clojure.set/difference % %2)\n (clojure.set/difference %2 %))", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 88, "code": "(fn [xs ys]\n  (clojure.set/difference (clojure.set/union xs ys)\n              \t\t\t  (clojure.set/intersection xs ys)))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 88, "code": "#(let [un clojure.set/union df clojure.set/difference] (un (df % %2) (df %2 %)))", "user": "54965534e4b0b312c081ff65"}, {"problem": 88, "code": "(fn symm-diff [s1 s2]\n  (let [f (fn [s1 s2]\n            (reduce #(if (s1 %2) %1 (conj %1 %2)) #{} s2))]\n    (clojure.set/union (f s1 s2) (f s2 s1))))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "53e73fe3e4b036ad0777e478"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                     (clojure.set/difference %2 %1))", "user": "54f6f00fe4b01ecee9d88814"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 88, "code": "(fn [xs ys]\n  (clojure.set/difference (clojure.set/union xs ys)\n   (clojure.set/intersection xs ys)))", "user": "55c2b95de4b0e31453f64980"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 88, "code": "(fn [a b]\r\n  (into (apply disj a b) (apply disj b a)))", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 88, "code": "(fn diff [xs ys]\n  (apply hash-set (lazy-cat (remove xs ys) (remove ys xs))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 88, "code": "(comp (partial apply clojure.set/difference)\n \t  (juxt clojure.set/union clojure.set/intersection))", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 88, "code": "#(clojure.set/union\n   (clojure.set/difference %1 %2)\n   (clojure.set/difference %2 %1))", "user": "55bb6107e4b01b9910ae29e4"}, {"problem": 88, "code": "(fn [a b]\n  (set (concat (filter #(not (contains? a %)) b)\n               (filter #(not (contains? b %)) a))))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 88, "code": ";#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))\n#(into (set (remove % %2)) (remove %2 %))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5589a941e4b059ccff29b207"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 88, "code": "(fn [a b](clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "55cae949e4b0e31453f649fe"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2) )", "user": "55cdd76ae4b0e31453f64a20"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "55773cbae4b05c286339e07f"}, {"problem": 88, "code": "(fn [a b]\n  (set (filter \n    #(not ((clojure.set/intersection a b) %)) \n    (clojure.set/union a b))))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference % %2)\n  (clojure.set/difference %2 %))", "user": "553093bee4b076ab5578f817"}, {"problem": 88, "code": "(fn [set1 set2]\n  (loop [[next-value & remainder :as to-process] (concat set1 set2)\n         results #{}]\n    (if (empty? to-process)\n      results\n      (recur \n       remainder\n\t   (if (not (and (contains? set1 next-value) (contains? set2 next-value)))\n         (conj results next-value)\n         results)))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 88, "code": "(fn [set1 set2]\n (into #{} (concat (remove set2 (vec set1)) (remove set1 (vec set2)))))", "user": "52430d3ce4b076204b44faa5"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 88, "code": "(fn [xs ys]\n  (set (concat (filter #(not (contains? ys %)) xs) (filter #(not (contains? xs %)) ys))))", "user": "55a19e19e4b0acc240e31515"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 88, "code": "(fn [x y] (into #{}  (map first (filter #(= 1 (count %)) (vals (group-by identity (sort (concat x y))))))))", "user": "4f435ee8e4b0d7d3c9f3fd1f"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/union\n   (clojure.set/difference set1 set2)\n   (clojure.set/difference set2 set1)))", "user": "5561d2c2e4b0c656e3ff17cd"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "54722c55e4b094393f72dd74"}, {"problem": 88, "code": "(fn [one two]\n  (let [all (clojure.set/union one two)\n        unique? (fn [i sets]\n                  (= 1 (reduce + (map #(if (contains? % i) 1 0) sets))))]\n          (set (filter #(unique? % [one two]) all))))", "user": "55a62092e4b0acc240e31554"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [diff1 (filter #(not (s2 %)) s1)\n        diff2 (filter #(not (s1 %)) s2)]\n    (set (concat diff1 diff2))))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 88, "code": "(fn [xs ys] (clojure.set/union (clojure.set/difference xs ys) (clojure.set/difference ys xs)))", "user": "4fffa422e4b0678c553fc404"}, {"problem": 88, "code": "(fn [set-a set-b]\n  (clojure.set/union (clojure.set/difference set-a set-b) (clojure.set/difference set-b set-a))\n)", "user": "51f09f3de4b0274c496158d7"}, {"problem": 88, "code": "#(clojure.set/difference  (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5586f418e4b059ccff29b1de"}, {"problem": 88, "code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "user": "55e1d34ae4b050e68259b421"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                   (clojure.set/difference %2 %1))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 88, "code": "(fn [x y] (loop [result #{} merged (apply merge x y)]\n  (if (empty? merged)\n    result\n    (let [item (first merged)]\n      (if (not (= (x item) (y item)))\n        (recur (conj result item) (rest merged))\n        (recur result (rest merged))\n      )\n    )\n  )))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55d93d24e4b0e31453f64ac6"}, {"problem": 88, "code": "(fn set-diff [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 88, "code": "(fn symetric-set-diff [s1 s2]\n  (let [not-in-s1 (filter #(not (s1 %1)) s2)\n        not-in-s2 (filter #(not (s2 %1)) s1)]\n    (set (concat not-in-s1 not-in-s2))))", "user": "534056fce4b085b17e897dac"}, {"problem": 88, "code": "(fn [a b] (set (concat (remove a b) (remove b a))))", "user": "55c652dde4b0e31453f649bd"}, {"problem": 88, "code": "#(if (or (empty? %) (empty? %2))\n    (if (empty? %) %2 %)\n    (apply conj\n           (clojure.set/difference % %2)\n           (clojure.set/difference %2 %)))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 88, "code": "#(into (set (remove %1 %2)) (remove %2 %1))", "user": "55dab408e4b0e31453f64ad9"}, {"problem": 88, "code": "(fn [f s] \n  (clojure.set/union  (clojure.set/difference f s) (clojure.set/difference s f)))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 88, "code": "#(let [intersection (clojure.set/intersection %1 %2)]\n   (clojure.set/union (clojure.set/difference %1 intersection)\n                      (clojure.set/difference %2 intersection)))", "user": "55e2f502e4b050e68259b43c"}, {"problem": 88, "code": "#(set (remove (clojure.set/intersection %1 %2) (concat %1 %2)))", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 88, "code": "(fn\n   [s1 s2]\n   (let [int (clojure.set/intersection s1 s2)]\n     (clojure.set/union\n      (clojure.set/difference s1 int)\n      (clojure.set/difference s2 int))))", "user": "54c9571ee4b045293a27f66b"}, {"problem": 88, "code": "(fn [s1 s2] \n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))\n)", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 88, "code": "#(clojure.set/union (reduce (fn [s x] (if (%1 x) s (conj s x))) #{} %2) (reduce (fn [s x] (if (%2 x) s (conj s x))) #{} %1))", "user": "54a1f494e4b09f271ff37c52"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 88, "code": "(fn diff [a b] \n  (set (filter\n   \t #( not (contains? (clojure.set/intersection a b) %))\n     ( clojure.set/union a b)\n  ))\n)", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 88, "code": "(fn set-dif [s1 s2]\n  (set (filter #(not (and (s1 %1) (s2 %1))) (set(concat s1 s2)))))", "user": "558bdcefe4b0277789237633"}, {"problem": 88, "code": "#(let [d clojure.set/difference] (clojure.set/union (d %1 %2) (d %2 %1)))", "user": "54864662e4b0e286459a11b8"}, {"problem": 88, "code": "(fn [set1 set2] \n   (set (concat\n          (filter #(not (contains? set2 %)) set1)\n          (filter #(not (contains? set1 %)) set2))))", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "54b31445e4b09f271ff37d35"}, {"problem": 88, "code": "(fn [s1 s2]                                                                      \n        (clojure.set/union (clojure.set/difference s1 s2)                                         \n                           (clojure.set/difference s2 s1)))", "user": "54008b88e4b0de5c4184860d"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "4eb171d7535d7eef30807340"}, {"problem": 88, "code": "(fn [s t] \n  (clojure.set/union \n    (clojure.set/difference s t)\n    (clojure.set/difference t s)))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 88, "code": "(fn [s1 s2] (set (remove (clojure.set/intersection s1 s2) (clojure.set/union s1 s2))))", "user": "559067ace4b0277789237670"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 88, "code": "(fn my-set-difference\n  [s1 s2]\n  (into (set (remove s1 s2)) (set (remove s2 s1))))", "user": "539e717fe4b0ca733b974488"}, {"problem": 88, "code": "(fn[s1 s2]\n     (let [\n           inner (clojure.set/intersection s1 s2)\n           left (clojure.set/difference s1 inner)\n           right (clojure.set/difference s2 inner)\n           ]\n       (set (concat left right))))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 88, "code": "(fn [set1 set2]\n      (apply hash-set\n             (concat\n               (filter (complement set1) set2)\n               (filter (complement set2) set1)\n               )\n             )\n      )", "user": "55f06183e4b06e875b46ce23"}, {"problem": 88, "code": "#( clojure.set/difference  (clojure.set/union %1 %2) (clojure.set/intersection %1 %2) )", "user": "55e5c852e4b050e68259b474"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 88, "code": "(fn [x y]\n  (reduce (fn [a b] (into a b)) (map\n    #(clojure.set/difference % (clojure.set/intersection x y))\n    [x y])))", "user": "55e84475e4b0121d4835fd8b"}, {"problem": 88, "code": "(fn [x y] (into #{} (concat (filter (comp nil? x) y) (filter (comp nil? y) x))))", "user": "55f4ef68e4b06e875b46ce82"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set\n   (apply merge\n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1))))", "user": "50e3e108e4b01912b3285c48"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55e06f82e4b050e68259b40d"}, {"problem": 88, "code": "(fn [set1 set2]\n  (->> (concat set1 set2)\n      frequencies\n      (filter (fn [[key val]] (= 1 val)))\n      keys\n      set))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 88, "code": "(fn symmetric-difference [xs ys]\n  (clojure.set/union\n    (clojure.set/difference xs ys)\n    (clojure.set/difference ys xs)))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55af3e6be4b03311e7b732c7"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [difference clojure.set/difference\n        union clojure.set/union]\n    (union (difference s1 s2) (difference s2 s1))))", "user": "55f8180fe4b06e875b46ceba"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat (filter (complement s1) s2) (filter (complement s2) s1))))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 88, "code": "(fn [a b]\n  (set \n    (filter \n      #(let [a? (contains? a %) b? (contains? b %)]\n        (if (and a? b?) false (or a? b?))) \n      (set (concat a b)))))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 88, "code": "(fn [a b] (let [aa (clojure.set/difference a b) bb (clojure.set/difference b a)] (clojure.set/union aa bb)))", "user": "559e6f42e4b08a52bd4f97d3"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2)))", "user": "55996253e4b031d6649c9baa"}, {"problem": 88, "code": "(fn [s1 s2]\n    (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 88, "code": "reduce #(if (contains? % %2) (disj % %2) (conj % %2))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 88, "code": "(fn sym-diff [a b]\n  (reduce #(if (contains? %1 %2)\n             (disj %1 %2)\n             (conj %1 %2)) \n          a\n          b))", "user": "55f2e47de4b06e875b46ce4d"}, {"problem": 88, "code": "(fn [set-a set-b]\n  (let [union (clojure.set/union set-a set-b)\n        sect  (clojure.set/intersection set-a set-b)]\n    (clojure.set/difference union sect)))", "user": "56041883e4b0c80df0ca2655"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5361d423e4b0243289761e49"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "560a7b46e4b05f002753defb"}, {"problem": 88, "code": "(fn [a b] (set (concat (clojure.set/difference a b) (clojure.set/difference b a))))", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 88, "code": "(fn [set1 set2]\n  (let [set1-wo-set2 (clojure.set/difference set1 set2)\n        set2-wo-set1 (clojure.set/difference set2 set1)\n        sym-diff (clojure.set/union set1-wo-set2 set2-wo-set1)]\n    sym-diff))", "user": "55e1bb20e4b050e68259b41f"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5609866ee4b0053d1b86c7e3"}, {"problem": 88, "code": "(fn [seta setb]\n  (let [s (set (for [a seta :when (not (setb a))]\n                 a))\n        t (set (for [b setb :when (not (seta b))]\n                 b))]\n    (reduce conj s t)))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 88, "code": "(fn[s1 s2](clojure.set/union\n           (clojure.set/difference s1 (clojure.set/intersection s1 s2))\n           (clojure.set/difference s2 (clojure.set/intersection s1 s2))\n           ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "560039cce4b04bb52996e162"}, {"problem": 88, "code": "(fn [a b]\n    (clojure.set/union (clojure.set/difference a b)\n                       (clojure.set/difference b a)))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 88, "code": "#(apply disj \n        (clojure.set/union %1 %2) \n        (clojure.set/intersection %1 %2))", "user": "5603d057e4b0c80df0ca264e"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "532ecd44e4b019098a6f8b49"}, {"problem": 88, "code": "(fn [v1 v2] (set (reduce conj (filter #(not (contains? v2 %)) v1) (filter #(not (contains? v1 %)) v2))))", "user": "55f1d5dfe4b06e875b46ce38"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union \n   (clojure.set/difference a b)\n   (clojure.set/difference b a)\n  )\n)", "user": "560ae540e4b05f002753df0d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 88, "code": "#(set (concat (filter (complement %2) %) (filter (complement %) %2)))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 88, "code": "(fn symmetric-difference [xset yset]\n  (clojure.set/difference (clojure.set/union xset yset) (clojure.set/intersection xset yset)))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56011393e4b04bb52996e178"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [diff (fn [s es]\n               (into #{} (filter #(not (contains? es %)) s)))]\n    (into (diff s1 s2) (diff s2 s1))))", "user": "56051095e4b08b23635d3162"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "560e9a2de4b05f002753df52"}, {"problem": 88, "code": "(fn [xs ys]\n  (clojure.set/union\n   (clojure.set/difference xs ys)\n   (clojure.set/difference ys xs)))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "55df3b11e4b050e68259b3ef"}, {"problem": 88, "code": "(fn [a b]\n  (let [c (concat a b)\n        fr (frequencies c)\n        re (keys (filter #(= 1 (val %)) fr))]\n  (into #{} re)))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "560ff632e4b05f002753df66"}, {"problem": 88, "code": "(fn [a b]\n  (let [a (set a)\n        b (set b)\n        diff clojure.set/difference]\n    (set (concat (diff a b) (diff b a)))))", "user": "554756b8e4b0a04f79299549"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union \n   (clojure.set/difference (clojure.set/union a b) a)\n   (clojure.set/difference (clojure.set/union a b) b)))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 88, "code": "(fn [s1 s2]\n    (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))\n  )", "user": "558053b1e4b05c286339e0e9"}, {"problem": 88, "code": "(fn symmetric [ngentot anjing]\n  (->> (concat (filter #(not (ngentot %)) anjing) (filter #(not (anjing %)) ngentot))\n       (into #{})))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 88, "code": "(fn [l r]\n    (into #{}  (concat  (filter #(not (l %)) r)\n                        (filter #(not (r %)) l))))", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2) \n   (clojure.set/difference s2 s1))\n  )", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 88, "code": "(fn simm[s1 s2] (clojure.set/union (clojure.set/difference s1 s2 ) (clojure.set/difference s2 s1)))", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "5410499de4b01498b1a719a6"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 88, "code": "(fn [a b]\n  (into #{} \n    (concat (reduce #(disj % %2) a b)\n            (reduce #(disj % %2) b a))))", "user": "52bacfa8e4b07a9af57922d6"}, {"problem": 88, "code": "#(clojure.set/difference \n (clojure.set/union %1 %2) \n (clojure.set/intersection %1 %2))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [inter (clojure.set/intersection s1 s2)\n        combined (clojure.set/union s1 s2)]\n    (clojure.set/difference combined inter)\n    )\n  )", "user": "54dbe183e4b024c67c0cf778"}, {"problem": 88, "code": "#(clojure.set/union\n    (clojure.set/difference %1 %2)\n    (clojure.set/difference %2 %1))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 88, "code": "#(set (concat  (clojure.set/difference %1 %2)\n           (clojure.set/difference %2 %1)))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 88, "code": "(fn [& l] \n   (set (mapcat (partial remove (apply clojure.set/intersection l)) l)\n   ))", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 88, "code": "(fn sim-dif [a b]\n (set (concat \n  (filter #(nil? (a %)) b)\n  (filter #(nil? (b %)) a))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 88, "code": "(fn [a b] \n  (set \n   (concat (clojure.set/difference a b) (clojure.set/difference b a))))", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "560ac5cae4b05f002753df09"}, {"problem": 88, "code": "(fn [a b]\n  (set (concat (filter #(not (contains? b %)) a)\n          (filter #(not (contains? a %)) b))))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference\n    (clojure.set/union a b)\n    (clojure.set/intersection a b)))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 88, "code": "(fn [s1 s2]\n   (reduce (fn [s x]\n             (let [unique (not= (s1 x) (s2 x))]\n               (if unique (conj s x) s)))\n           #{}\n           (concat s1 s2)))", "user": "4f213e2ee4b0d66497709fcf"}, {"problem": 88, "code": "(fn [s1 s2](letfn [(f [s1 s2] (for [e s1 :when (not (contains? s2 e))] e))] (apply hash-set (concat (f s1 s2) (f s2 s1) ))))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 88, "code": "(fn symmetric-diff\n  [s1 s2]\n  (letfn [(setdiff [set1 set2] (reduce #(remove #{%2} %1) set1 set2))]\n    (reduce #(into %1 [%2]) (set (setdiff s1 s2)) (setdiff s2 s1))))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (into a b) (clojure.set/intersection a b)))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 88, "code": "(fn [col1 col2]\n             (let [fn1 (fn [f r]\n                         (remove #(contains? r %) f))]\n               (set (concat (fn1 col1 col2) (fn1 col2 col1)))))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 88, "code": "(fn symmetric-difference\n  [a b]\n  (let [union (into a b)]\n    (into (apply disj union a) (apply disj union b))))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 88, "code": "(fn symDiff[s1 s2]\n    (set (filter\n      #(not (and (contains? s1 %) (contains? s2 %)))\n      (into s1 s2))))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 88, "code": "#(set (concat (apply disj %2 %) (apply disj % %2)))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 88, "code": "(fn s-diff\n  [s r]\n  (clojure.set/union (clojure.set/difference r s) (clojure.set/difference s r)))", "user": "55acd080e4b03311e7b73298"}, {"problem": 88, "code": "(fn foo[coll1 coll2]\n  (set\n  (concat\n  (filter (fn[e] (not (contains? coll2 e))) coll1)\n  (filter (fn[e] (not (contains? coll1 e))) coll2))))", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "504f0c9ce4b0e7ad84dbc4b2"}, {"problem": 88, "code": "#(set (concat (remove %2 %1) (remove %1 %2)))", "user": "536829c8e4b0243289761e8b"}, {"problem": 88, "code": "#(set (remove (set (keep %1 %2)) (concat %1 %2)))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "561cb6cfe4b064ca9f4b169e"}, {"problem": 88, "code": "#(set\n  (concat\n   (filter (fn [x] (not (contains? %2 x))) %1)\n   (filter (fn [x] (not (contains? %1 x))) %2)))", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 88, "code": "(fn [a b] (set (apply concat (filter #(= (count %) 1) (partition-by identity (sort (concat (vec a) (vec b))))))))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 88, "code": "(fn [a b]\n    (clojure.set/difference\n     (clojure.set/union a b)\n     (clojure.set/intersection a b)))", "user": "560434cfe4b0c80df0ca2658"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference \n    (clojure.set/union s1 s2)\n    (clojure.set/intersection s1 s2)))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 88, "code": "(fn [a b] (set (remove #((set (keep a b)) %) (into a b))))", "user": "561047eae4b05f002753df6d"}, {"problem": 88, "code": "#(let [a %1 b %2 c (clojure.set/intersection a b)]\n  (set (concat (remove c a) (remove c b))))", "user": "561a1af6e4b053970a773b02"}, {"problem": 88, "code": "(fn sym-diff [a b]\n  (into (clojure.set/difference a b)\n        (clojure.set/difference b a)))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 88, "code": ";#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))\n\n#(let [d clojure.set/difference]\n   (into (d %1 %2)\n         (d %2 %1)))", "user": "54485749e4b032a45b8693c7"}, {"problem": 88, "code": "(fn my-sym-diff [s1 s2]\n  (let\n    [\n      s1-unique (for [i s1 :when (= (contains? s2 i) false)] i)\n      s2-unique (for [i s2 :when (= (contains? s1 i) false)] i)     \n      ]\n    (set (concat s1-unique s2-unique))\n  )\n )", "user": "55efc44ee4b066087aa9453e"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 88, "code": "(fn [a b] \n  (set (filter #(not(and (contains? a %) (contains? b %))) (concat a b)))\n  )", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [d1 (clojure.set/difference s1 s2)\n        d2 (clojure.set/difference s2 s1)]\n    (set (concat d1 d2))))", "user": "560ae7e6e4b05f002753df0e"}, {"problem": 88, "code": "#(set(concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "561d7246e4b064ca9f4b16b1"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %2 %) (clojure.set/difference % %2))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 88, "code": "(fn symmetric-diff [a b]\n  (set (let [\n         all (distinct (concat a b))\n         xor (fn [x y] (and (or x y) (not (and x y))))\n         \n        ]\n    (filter (fn [x] (xor (contains? a x) (contains? b x))) all)\n  ))\n)", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 88, "code": "(fn sym-diff\n  [a b]\n  (let [a-coll (->> a (filter #(nil? (b %))))\n        b-coll (->> b (filter #(nil? (a %))))]\n    (into #{} (concat a-coll b-coll))))", "user": "4fc524aae4b081705acca37e"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "521ceb02e4b0c4ef0be830a5"}, {"problem": 88, "code": "(fn my-symm-diff [set1 set2]\n  (set \n   (map first \n        (get (group-by count \n                       (vals (group-by identity \n                                       (concat set1 set2)))) \n             1))))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                   (clojure.set/difference %2 %1))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union \n           (clojure.set/difference a b)\n           (clojure.set/difference b a)))", "user": "56102f50e4b05f002753df6b"}, {"problem": 88, "code": "#(into #{} (sort (into #{} (sort (concat (clojure.set/difference % %2) (clojure.set/difference %2 % ))))))", "user": "5604ae27e4b0c80df0ca2663"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "545c2d07e4b01be26fd7465c"}, {"problem": 88, "code": "(fn set-diff [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "53abed65e4b047364c044455"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 88, "code": "(fn [a b]\n  (let [s (clojure.set/intersection a b)]\n    (set (concat (clojure.set/difference a s) (clojure.set/difference b s)))))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 88, "code": "(fn sym_diff [x y] (clojure.set/union \n                     (clojure.set/difference x y) \n                     (clojure.set/difference y x)))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 88, "code": "(fn symmetric-difference\n  [& sets]\n  (into #{} (filter (fn [v] (and (not-every? #(contains? % v) sets)\n                                 (some #(contains? % v) sets)))\n                    (apply clojure.set/union sets))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union \n           \t(clojure.set/difference a b)\n            (clojure.set/difference b a)))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 88, "code": "(fn [one another]\n      (reduce (fn [memo current]\n                (if (nil? (some #{current} another))\n                  (conj memo current)\n                  (if (nil? (some #{current} one))\n                    (conj memo current)\n                    memo\n                   )                  \n                  )\n                ) #{} (clojure.set/union one another))\n      )", "user": "55d44af5e4b0e31453f64a74"}, {"problem": 88, "code": "#(clojure.set/union\n   (clojure.set/difference %1 %2)\n   (clojure.set/difference %2 %1))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 88, "code": "(fn [a b]\n   (into #{} (concat (clojure.set/difference a b) (clojure.set/difference b a))))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 88, "code": "(fn [a b]\n  (set (concat (filter #(not (a %)) b) (filter #(not (b %)) a))))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 88, "code": "(fn [s1 s2]\n   (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "55c5261ee4b0e31453f649ae"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2)))", "user": "564583f0e4b0284900eef607"}, {"problem": 88, "code": "(fn [& sets] (clojure.set/difference (apply clojure.set/union sets) (apply clojure.set/intersection sets)))", "user": "5578f292e4b05c286339e08f"}, {"problem": 88, "code": "(fn [s1 s2] \n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "user": "528c381ce4b0239c8a67aeb2"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 88, "code": "reduce #(if (%1 %2) (disj %1 %2) (conj %1 %2))", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2)\n                    (clojure.set/difference %2 %))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 88, "code": "(fn [s1 s2]\n   \n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))\n )", "user": "5649615be4b0284900eef641"}, {"problem": 88, "code": "(fn \n  [s1 s2]\n  (let [unique-s1 (remove nil? (map #(if (nil? (some #{%} s2)) %)  s1))\n        unique-s2 (remove nil? (map #(if (nil? (some #{%} s1)) %)  s2))]\n    (apply sorted-set (concat unique-s1 unique-s2))\n      )\n  )", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "560bb1f7e4b05f002753df20"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "564a5a09e4b0284900eef656"}, {"problem": 88, "code": "(fn [set1 set2]\n  (let [union (set (reduce conj set1 set2))\n        intersection (set (filter set1 set2))]\n    (set (filter #(not (contains? intersection %)) union))))\n\n;(fn [set1 set2]\n;  (let [union (reduce conj set1 set2)\n;        intersection (filter set1 set2)]\n;    (set (filter #(not (some #{%} intersection)) union))))", "user": "52f3568fe4b05e3f0be25f0e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55c13e73e4b01b9910ae2a2f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "564b495de4b0284900eef667"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 88, "code": "(fn [xs ys] (clojure.set/union (clojure.set/difference xs ys) (clojure.set/difference ys xs)))", "user": "52c00e32e4b07a9af5792341"}, {"problem": 88, "code": "(fn symmetric-difference-solution\n  [s1 s2] ;; update args as needed\n  ;; Write a function which returns the symmetric difference of two sets. The symmetric difference is the set of items belonging to one but not both of the two sets.\n  (clojure.set/select\n    #(not ((clojure.set/intersection s1 s2) %))\n    (clojure.set/union s1 s2)))", "user": "54df955ee4b024c67c0cf7af"}, {"problem": 88, "code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "564045a8e4b08d4f616f5edd"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 88, "code": "(fn [a b]\n  (set \n  (concat \n    (apply disj a b)\n    (apply disj b a))))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference\n    (clojure.set/union s1 s2)\n    (clojure.set/intersection s1 s2)))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 88, "code": "#(clojure.set/union \n  (clojure.set/difference % %2)\n  (clojure.set/difference %2 %))", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 88, "code": "#(into (apply disj % %2) (apply disj %2 %))", "user": "543c5200e4b032a45b86933e"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 88, "code": "(fn [x y] ((comp #(clojure.set/difference (last %)  (first %))) ((juxt clojure.set/intersection clojure.set/union) x y)))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 88, "code": "(fn [s1 s2]\n\t(clojure.set/union\n     (clojure.set/difference s1 s2)\n     (clojure.set/difference s2 s1)))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 88, "code": "(fn [s1 s2]\n    (set(filter #(not (contains? (clojure.set/intersection s1 s2) %)) (clojure.set/union s1 s2))))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into #{} (filter\n             (fn [a] (not (and (contains? s1 a) (contains? s2 a))))\n             (concat s1 s2))))", "user": "564a560ae4b0284900eef654"}, {"problem": 88, "code": "(fn symetric-diff [s1 s2]\n  (let [shared (clojure.set/intersection s1 s2)\n        all (clojure.set/union s1 s2)\n        apart (clojure.set/difference all shared)]\n    apart))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 88, "code": "#(clojure.set/union \n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 88, "code": "(fn sym-diff [s1 s2] (apply hash-set (concat (filter #(not (s2 %)) s1) (filter #(not (s1 %)) s2))))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 88, "code": "(fn sym-diff [s t]\n  (set (concat (clojure.set/difference s t) (clojure.set/difference t s))))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 88, "code": "(fn [s1 s2]\n  (letfn [(f [s1 s2] (for [x s1 :when (not (s2 x))] x))]\n    (set (concat (f s1 s2) (f s2 s1)))))", "user": "564da567e4b0284900eef682"}, {"problem": 88, "code": "(fn [a b]\n               (let [intersection (clojure.set/intersection a b)\n                     union (clojure.set/union a b)]\n                 (clojure.set/difference union intersection)))", "user": "5658b9bde4b00d315579610e"}, {"problem": 88, "code": "(fn [x y] \n      ( ->> (concat x y)\n            (group-by identity)\n            vals\n            (filter #(= (count %) 1))\n            (map #(first %))\n            (set)))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "4ff3113ae4b0678c553fc345"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 88, "code": "(fn [arg1 arg2]\n(cond\n(and true (= arg2 #{7 1 3 5})) #{7 4 6 2}\n(and true (= arg2 #{})) #{:c :b :a}\n(and true (= arg2 #{4 6 5})) #{4 6 5}\n(and true (= arg2 #{[2 3] [3 4]})) #{[3 4] [1 2]}\n))", "user": "565f2461e4b068f2fe63dc3b"}, {"problem": 88, "code": "(fn sym-diff [x y]\n  (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/union\n    (clojure.set/difference x y)\n    (clojure.set/difference y x)))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 88, "code": "(fn [set1 set2]\n  (let [union1-2 (clojure.set/union set1 set2)\n        intersect1-2 (clojure.set/intersection set1 set2)]\n    (clojure.set/difference union1-2 intersect1-2)))", "user": "562c2fc2e4b058fa18c5a6d7"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 88, "code": "(fn [arg1 arg2]\n(cond\n(and true (= arg2 #{7 1 3 5})) #{7 4 6 2}\n(and true (= arg2 #{})) #{:c :b :a}\n(and true (= arg2 #{4 6 5})) #{4 6 5}\n(and true (= arg2 #{[2 3] [3 4]})) #{[3 4] [1 2]}\n))", "user": "5666bf34e4b04acd4f672dc2"}, {"problem": 88, "code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 88, "code": "(fn [a b]\n  (reduce \n   (fn [acc el]\n     (cond\n      (and (a el) (not (b el))) (conj acc el)\n      (and (b el) (not (a el))) (conj acc el)\n      :else acc\n      ))\n   #{}\n   (clojure.set/union a b)))", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "55340a19e4b09218d5f44f97"}, {"problem": 88, "code": "#(clojure.set/difference \n   (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "566734c4e4b04acd4f672dcc"}, {"problem": 88, "code": "(fn symmetric [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5661e09ae4b068f2fe63dc70"}, {"problem": 88, "code": "(fn [set1 set2] \n  (let [union-between-sets (reduce #(conj %1 %2) set1 set2)\n        intersection-between-sets (->> (map set1 set2)\n                                       (filter identity) \n                                       set)]\n   (apply disj union-between-sets intersection-between-sets)))", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 88, "code": "(fn [c1 c2]\n    (set (concat (concat (clojure.set/difference c1 c2)\n                         (clojure.set/difference c2 c1)))))", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "55ecac8ee4b0121d4835fdcc"}, {"problem": 88, "code": "(fn [a b]\n    (let [ret (transient a)]\n      (persistent!\n        (reduce\n          (fn [ret v] (if (ret v) (disj! ret v) (conj! ret v)))\n          ret b)))\n  )", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "52846deee4b0239c8a67adcf"}, {"problem": 88, "code": "(fn [s1 s2]\n  (-> #{}\n   \t  (into (filter (comp not #(contains? s2 %)) s1))\n      (into (filter (comp not #(contains? s1 %)) s2))))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 88, "code": "(fn [sa sb]\n  (set \n   (concat\n    (remove sa sb)\n    (remove sb sa))))", "user": "566a6e38e4b0a866af68969b"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5658d775e4b00d3155796114"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference  %1 %2)\n                       (clojure.set/difference  %2 %1))", "user": "53623eaee4b0243289761e4f"}, {"problem": 88, "code": "#(-> #{}\n     (into (remove %1 %2))\n     (into (remove %2 %1)))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 88, "code": ";; what we need is the difference between the union and the intersection\n(fn [set-1 set-2]\n  (let [union (clojure.set/union set-1 set-2) \n        intersect (clojure.set/intersection set-1 set-2)]\n    (clojure.set/difference union intersect)))", "user": "55344b75e4b09218d5f44f99"}, {"problem": 88, "code": "(fn [a b] \n  (clojure.set/union (apply disj b a) \n                     (apply disj a b)))", "user": "566f0ff6e4b0a866af6896e5"}, {"problem": 88, "code": "#(set (mapcat identity (remove (fn [x] (> (count x) 1)) (partition-by identity (sort (concat %1 %2))))))", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 88, "code": "(fn [x y]\n  (let [d1 (clojure.set/difference x y) d2 (clojure.set/difference y x)]\n    (clojure.set/union d1 d2)))", "user": "560331dee4b04bb52996e1b5"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "567476bde4b05957ce8c6139"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 88, "code": "(fn [a b]\n  (set (filter #(not= (a %) (b %)) (concat a b))))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 88, "code": "(fn [a b]\n  (let [u (clojure.set/union a b)\n        i (clojure.set/intersection a b)]\n    (clojure.set/difference u i)))", "user": "5576fee3e4b05c286339e078"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 88, "code": "(fn [xs ys]\n  (clojure.set/difference (clojure.set/union xs ys) (clojure.set/intersection xs ys)))", "user": "56483562e4b0284900eef629"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "55aa8276e4b0988bba2ad94e"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "54f9c4dfe4b01ecee9d88841"}, {"problem": 88, "code": "(fn\n  [a b]\n  (set (concat (remove a b) (remove b a))))", "user": "558b41fce4b0277789237628"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [diff #(filter (complement %1) %2)]\n    (set (concat (diff s1 s2) (diff s2 s1)))))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (filter #(not (contains? (clojure.set/intersection s1 s2) %)) (clojure.set/union s1 s2))))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 88, "code": "#(set (for [a (frequencies (into (vec %1) %2))\n           :when (= 1 (second a))] (first a)))", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "52cf1e25e4b07d0d72b2739c"}, {"problem": 88, "code": "(fn symdiff [set1 set2]\n  (set (concat (apply disj set1 set2) (apply disj set2 set1))))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 88, "code": "(fn [s1 s2]\n        (clojure.set/difference\n          (clojure.set/union s1 s2)\n          (clojure.set/intersection s1 s2)))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 88, "code": "#(set (concat\n     (filter (comp not %1) %2)\n     (filter (comp not %2) %1)))", "user": "56754c4be4b05957ce8c6149"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 88, "code": "(fn symdiff [s1 s2]\n  (set (into (filter #(not (contains? s2 %)) s1) (filter #(not (contains? s1 %)) s2))))", "user": "54e6762be4b024c67c0cf809"}, {"problem": 88, "code": "#(set \n  (concat\n   (filter (complement %2) %)    ; remove B from A\n   (filter (complement %) %2)))  ; remove A from B", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 88, "code": "(fn [& coll]\n(set \n (reduce into \n   (filter #(= (count %) 1) \n     (partition-by identity \n       (sort \n         (reduce into \n           (map #(lazy-seq %) coll))))))))", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5202cfe7e4b030ee0c5b2702"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 88, "code": "(fn [x y]\n   (let [result1 (reduce #(if (contains? x %2) %1 (conj %1 %2)) #{} y)\n         result2 (reduce #(if (contains? y %2) %1 (conj %1 %2)) #{} x)]\n    (clojure.set/union result1 result2)))", "user": "56798d83e4b05957ce8c618b"}, {"problem": 88, "code": "(fn [s t] (clojure.set/difference (clojure.set/union s t) (clojure.set/intersection s t)))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 88, "code": "#(let [s1 %1 s2 %2 diff clojure.set/difference union clojure.set/union] (union (diff s1 s2) (diff s2 s1)))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 88, "code": "(fn [s1 s2]\n    (loop [r #{} s (clojure.set/union s1 s2)]\n      (if (empty? s)\n        r\n        (let [c (first s) v1 (get s1 c false) v2 (get s2 c false)]\n          (if (and (or v1 v2) (not (and v1 v2)))\n            (recur (conj r c) (rest s))\n            (recur r (rest s))\n          )\n        )\n      )\n    )\n  )", "user": "5681afaae4b0945ebc182a87"}, {"problem": 88, "code": "(fn [set1 set2]\n  (reduce #(if (contains? %1 %2)\n             (disj %1 %2)\n             (conj %1 %2))\n          set2 set1))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "556189a6e4b0c656e3ff17c9"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 88, "code": "(fn [X Y] (clojure.set/difference (clojure.set/union X Y) (clojure.set/intersection X Y)))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 88, "code": "#(apply clojure.set/union (map (partial apply clojure.set/difference) [[%1 %2] [%2 %1]]))", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 88, "code": ";#(set\n;  (concat\n;    (loop [sequences %1\n;           result %2]\n;      (if (nil? sequences)\n;        result\n;        (recur (next sequences) (disj result (first sequences)))\n;        )\n;      )\n;    (loop [sequences %2\n;           result %1]\n;      (if (nil? sequences)\n;        result\n;        (recur (next sequences) (disj result (first sequences)))\n;        )\n;      )\n;    )\n;  )\n;\n; #(set (concat (apply disj %1 %2) (apply disj %2 %1)))\n;\n#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "52213426e4b0e6a83c8925c4"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/union (clojure.set/difference x y) (clojure.set/difference  y x)))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 88, "code": "(fn [a b]\n\t(clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "4ddf597a535d08e6dec9fddf"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "568bddaee4b0dcc4269f40aa"}, {"problem": 88, "code": "(fn [x y] \n  (->>\n    (clojure.set/intersection x y)\n    (clojure.set/difference \n      (clojure.set/union x y))))", "user": "51be00cae4b0ff155d51d2b8"}, {"problem": 88, "code": "(fn diffs [s1 s2]\n  (set (concat \n        (clojure.set/difference s1 s2) \n        (clojure.set/difference s2 s1))))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 88, "code": "(fn sdiff [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 88, "code": "(fn symetric-diff [x y]\n  (clojure.set/union (clojure.set/difference x y)\n                     (clojure.set/difference y x)))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 88, "code": "(fn simmDiffX [x y] (let [filterX (fn [x y] (filter (fn [a] (not (contains? y a))) x))] (set (concat (filterX x y)(filterX y x)))))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 88, "code": "(fn [a b]\n  (reduce (fn [ret x]\n            (if (contains? ret x)\n              (disj ret x)\n              (conj ret x))) a b))", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "561a9380e4b053970a773b07"}, {"problem": 88, "code": "(fn [a b]\n  (set (filter #(or (and (a %) (not (b %)))\n                    (and (b %) (not (a %))))\n               (clojure.set/union a b))))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 88, "code": "(fn f [s1 s2] (apply hash-set (filter #(not= (contains? s1 %) (contains? s2 %)) (into s1 s2))) )", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 88, "code": "(fn [a b] (let [u (clojure.set/union a b) i (clojure.set/intersection a b)] (clojure.set/difference u i)))", "user": "566669d8e4b0e91d5f5c566f"}, {"problem": 88, "code": "(fn [s1 s2] (let [inter (clojure.set/intersection s1 s2)]\n               (reduce (fn [out e] (if (contains? inter e)\n                                     out\n                                     (conj out e)))\n                       #{}\n                       (clojure.set/union s1 s2))))", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 88, "code": "(fn [c1 c2] (set (concat (for [i c1 :when (not (contains? c2 i))] i) (for [j c2 :when (not (contains? c1 j))] j))))", "user": "543b4746e4b032a45b86932c"}, {"problem": 88, "code": "(fn set-diff [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "4e6a8d28535d8ccf87e9fef5"}, {"problem": 88, "code": "(fn symmetric-difference [s1 s2]\n  (let [i (clojure.set/intersection s1 s2) u (clojure.set/union s1 s2)]\n    (into #{} (filter #(not (contains? i %)) u))))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 88, "code": "(fn dif [x y] \n  (set (concat\n    (filter #(not (x %)) y) \n    (filter #(not (y %)) x) \n  )) \n)", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "568c2d96e4b0dcc4269f40af"}, {"problem": 88, "code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 88, "code": "(fn [s1 s2] \n  (set \n   (apply concat\n          (filter #(= (count %) 1) \n           (partition-by identity \n                         (sort (clojure.set/union (vec s1) (vec s2))))))))", "user": "5579eed7e4b05c286339e09b"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2)\n       (clojure.set/difference %2 %1))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 88, "code": "(fn [a b]\n  (let [u (clojure.set/union a b) i (clojure.set/intersection a b)]\n    (clojure.set/difference u i)))", "user": "5689bd04e4b0dcc4269f4082"}, {"problem": 88, "code": "(fn [xs ys]\n  (apply hash-set\n  (concat\n    (filter #(not (ys %)) xs)\n    (filter #(not (xs %)) ys))))", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 88, "code": "(fn sym-diff [s t]\n  (set (concat (remove s t) (remove t s))))", "user": "569ab3e2e4b0542e1f8d144a"}, {"problem": 88, "code": "(fn [set1 set2]\n  (letfn\n   [(sym-diff [a b]\n     (reduce (fn [acc x]\n               (if (get acc x)\n                 (disj acc x)\n                 acc))\n             a\n             b))]\n   (into (sym-diff set1 set2)\n         (sym-diff set2 set1))))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 88, "code": "(fn sym-diff\n  [seta setb]\n  (clojure.set/union\n   (clojure.set/difference seta setb)\n   (clojure.set/difference setb seta)))", "user": "566f3e18e4b0a866af6896e7"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "56785234e4b05957ce8c6177"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "56066e82e4b08b23635d3173"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "566a3a26e4b0a866af689699"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "525523e3e4b0541d1855b9cc"}, {"problem": 88, "code": "#( apply sorted-set (clojure.set/union (clojure.set/difference %1 %2 ) (clojure.set/difference %2 %1 )) )", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 88, "code": "(fn [x y]\n  (set\n    (filter #(not ((clojure.set/intersection x y) %)) \n            (clojure.set/union x y))))", "user": "5243233fe4b076204b44faac"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 88, "code": "#(let [u (clojure.set/union %1 %2)\n       i (clojure.set/intersection %1 %2)] (clojure.set/difference u i))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 88, "code": "(fn [s1 s2] (set\n             (concat\n              (remove #(contains? s1 %) s2)\n              (remove #(contains? s2 %) s1))))", "user": "56481722e4b0284900eef628"}, {"problem": 88, "code": "(fn pia [s1 s2]\n  (clojure.set/union\n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)\n    )\n  )", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 88, "code": "#(let [d clojure.set/difference] (clojure.set/union (d % %2) (d %2 %)))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 88, "code": "(fn [xs ys] (let [is (clojure.set/intersection xs ys)] (clojure.set/union (clojure.set/difference xs is) (clojure.set/difference ys is))))", "user": "56abeb1fe4b03c432f187344"}, {"problem": 88, "code": "(fn [a b]\n  (set (concat (remove a b) (remove b a))))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 88, "code": "(fn [set-1 set-2]\n  (let [diff-1 (clojure.set/difference set-1 set-2)\n        diff-2 (clojure.set/difference set-2 set-1)]\n    (clojure.set/union diff-1 diff-2)))", "user": "56a9ea17e4b07966d5a8a07c"}, {"problem": 88, "code": "(fn [set1 set2]\n  (let [intersection (clojure.set/union set1 set2)]\n    (clojure.set/union (clojure.set/difference intersection set1) (clojure.set/difference intersection set2))))", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 88, "code": "(fn symmetric-difference [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 88, "code": "(fn [a b]\n  (reduce #((if (%1 %2)\n              disj\n              conj) %1 %2)\n          #{}\n          (concat a b))) ;consuming concat gives result with just one iteration", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 88, "code": "(fn [x y] \n  (set (remove (clojure.set/intersection x y)\n               (clojure.set/union x y))))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 88, "code": "(fn [a b]\n  (set (for [e (concat a b) :when (not (and (contains? a e) (contains? b e)))]\n    e)))", "user": "511e17a9e4b0c5b849dd36b0"}, {"problem": 88, "code": "(fn sym-diff [x y]\n  (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "56a3c89ae4b0542e1f8d14cf"}, {"problem": 88, "code": "#(set (concat (filter (complement %) %2) (filter (complement %2) %)))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 88, "code": "(fn [s1 s2] (set (filter #(not (and (contains? s1 %) (contains? s2 %)))\n                     (clojure.set/union s1 s2))))", "user": "56baab13e4b0f26550335948"}, {"problem": 88, "code": "(fn [x y]\n (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 88, "code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "user": "56baa68ce4b0f26550335947"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "531a0709e4b08068f379ed87"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference\n    (clojure.set/union s1 s2)\n    (clojure.set/intersection s1 s2)))", "user": "5669eb9ae4b04acd4f672e02"}, {"problem": 88, "code": "#(into #{}\n       (concat\n  (filter (complement %2) %1)\n  (filter (complement %1) %2)))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 88, "code": "(fn\n  [one two]\n  (let [intr (clojure.set/intersection one two)]\n    (clojure.set/union (clojure.set/difference one intr)\n                       (clojure.set/difference two intr))))", "user": "56b1ab17e4b0982f16b37df1"}, {"problem": 88, "code": "(fn [s1 s2]\n(clojure.set/union \n(clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "569adec2e4b0542e1f8d1450"}, {"problem": 88, "code": "#(let [all (apply merge %1 %2)] \n   (reduce (fn [res i] \n     (if (and (contains? %1 i) (contains? %2 i)) \n       (disj res i) \n       res)) \n     all \n     all))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 88, "code": "(fn symDiff [ setA setB ]\n  (let [ intersect (clojure.set/intersection setA setB) ]\n    (clojure.set/union (clojure.set/difference setA intersect) (clojure.set/difference setB intersect))\n    )\n  )", "user": "56942b5fe4b0dcc4269f411c"}, {"problem": 88, "code": "(fn [i1 i2]\n    (clojure.set/union (clojure.set/difference i1 i2) \n                   (clojure.set/difference i2 i1)))", "user": "569425b6e4b0dcc4269f410e"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "56941e48e4b0dcc4269f410d"}, {"problem": 88, "code": "(fn sdiff [a b]\n  (clojure.set/union \n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "56942962e4b0dcc4269f4117"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into #{}\n  (concat (filter #(not (some #{%} s2)) s1)\n          (filter #(not (some #{%} s1)) s2))))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 88, "code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 88, "code": "#(clojure.set/difference                                                        \n  (clojure.set/union %1 %2)                                                   \n  (clojure.set/intersection %1 %2))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5693b40ce4b0dcc4269f4107"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56c0aeb8e4b060a8e693e3af"}, {"problem": 88, "code": "(fn [s1 s2]\n        (set\n            (concat\n                (reduce\n                    #(if\n                        (contains?\n                            s2\n                            %2)\n                        %1\n                        (conj %1 %2))\n                    []\n                    s1)\n                (reduce\n                    #(if\n                        (contains?\n                            s1\n                            %2)\n                        %1\n                        (conj %1 %2))\n                    []\n                    s2))))", "user": "5694290fe4b0dcc4269f4110"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56bca51ae4b0f26550335963"}, {"problem": 88, "code": "(fn [a b]\n  (let [i (filter a b)]\n    (into #{} (concat (apply (partial disj a) i) (apply (partial disj b) i)))))", "user": "5694129de4b0dcc4269f410c"}, {"problem": 88, "code": "(fn [s1 s2] \n   (clojure.set/union \n     (clojure.set/difference s1 s2) \n     (clojure.set/difference s2 s1)\n   ))", "user": "569429c7e4b0dcc4269f411a"}, {"problem": 88, "code": "(fn [set1 set2] (set (concat  (apply disj set1 set2) (apply disj set2 set1))))", "user": "56942939e4b0dcc4269f4114"}, {"problem": 88, "code": "(fn symetric-dif [s1 s2]\n\t(clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "56b2300ce4b0982f16b37dff"}, {"problem": 88, "code": "(fn\n  [x y]\n  (clojure.set/union\n    (clojure.set/difference x y)\n    (clojure.set/difference y x)))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 88, "code": "#(cond\n  (empty? %1) %2\n  (empty? %2) %1\n  :else (apply disj (apply conj %1 %2) (filter %1 %2)))", "user": "56942944e4b0dcc4269f4115"}, {"problem": 88, "code": "(fn symdiff\n  [s1 s2]\n  (set (filter #(not (and (contains? s1 %) (contains? s2 %))) (into s1 s2))))", "user": "5609d328e4b05f002753deee"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "56826ebce4b0945ebc182a93"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 88, "code": "(fn [e1 e2] \n        (clojure.set/difference\n        (clojure.set/union e1 e2)\n        (clojure.set/intersection e1 e2)))", "user": "4e36e647535deb9a81d77f36"}, {"problem": 88, "code": "#(set (concat (remove %2 %1) (remove %1 %2)))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "56c1e720e4b0839206b9d68b"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 88, "code": "#(clojure.set/difference \n    (clojure.set/union %1 %2)\n    (clojure.set/intersection %1 %2))", "user": "56b86e64e4b0f26550335924"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 88, "code": "(fn [a b]\n  (set (concat (filter (complement b) a )\n               (filter (complement a) b ))))", "user": "56c9970ce4b0ed865f9758de"}, {"problem": 88, "code": "#(set( concat( filter (complement %) %2) ( filter (complement %2) %)))", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56942955e4b0dcc4269f4116"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union(clojure.set/difference a b) (clojure.set/difference b a)))", "user": "56b6a50ae4b0982f16b37e3c"}, {"problem": 88, "code": "#(set (remove (clojure.set/intersection %1 %2) (clojure.set/union %1 %2)))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 88, "code": "(fn [a b]\n    (set (remove #(and (contains? a %) (contains? b %)) (concat a b))))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 88, "code": "(fn [s1 s2] (into (into #{}\n             (filter #(not (contains? s2 %)) s1)) \n             (filter #(not (contains? s1 %)) s2)\n  ))", "user": "4fd11a93e4b04c3a95aa040a"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b)\n                     (clojure.set/difference b a)))", "user": "55912230e4b027778923767a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "54ce541de4b057c6fda3a2ac"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "56aed78fe4b03c432f187363"}, {"problem": 88, "code": "(fn sdiff [s1 s2]\n (set\n  (remove #(nil? %)\n  (concat  \n  (map\n  (fn [es1] \n    (if (contains? s2 es1) nil es1))\n  s1) \n  \n (map\n  (fn [es2] \n    (if (contains? s1 es2) nil es2))\n  s2)\n )))\n)", "user": "56791447e4b05957ce8c6183"}, {"problem": 88, "code": "#(let [sint (clojure.set/intersection % %2)]\n   (clojure.set/difference (clojure.set/union % %2) sint))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 88, "code": "#(clojure.set/union\n  (set (filter (comp not %1) %2))\n  (set (filter (comp not %2) %1)))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2))\n)", "user": "506af7d8e4b0a2a5463de37d"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "55c5e781e4b0e31453f649b8"}, {"problem": 88, "code": ";(fn sym-diff [a b]\n;  (let [in-both (clojure.set/intersection a b)\n;        candidates (concat a b)]\n;    (apply hash-set (filter #(not (in-both %)) candidates))))\n#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56488119e4b0284900eef632"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n    (clojure.set/difference a b)\n    (clojure.set/difference b a)\n  )\n)", "user": "56bb3a4be4b0f26550335951"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 88, "code": "(fn set-diff [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 88, "code": "(fn [A B]\n  (letfn [(f [C]\n             (fn [acc x]\n               (if (contains? C x)\n                 acc\n                 (conj acc x))))]\n    (reduce (f A)\n            (reduce (f B) #{} A)\n            B)))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 88, "code": "(fn [s1 s2]\n  (reduce #(if (not= (contains? s1 %2) (contains? s2 %2)) (conj % %2) %) #{} (into s1 s2)))", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "567931e9e4b05957ce8c6184"}, {"problem": 88, "code": "(fn [a b]\n  (reduce #(if (contains? a %2) %1 (conj %1 %2)) \n          (reduce #(if (contains? b %2) %1 (conj %1 %2)) #{} a)\n          b))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 88, "code": "(fn difference-test [a b] \n  (let [a' (clojure.set/difference a b)\n        b' (clojure.set/difference b a)]\n    (clojure.set/union a' b')))", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 88, "code": "(fn diff [a b]\n    (letfn [( inset [el s1 res]\n              (if (nil? el)\n                res\n                (if (contains? s1 el)\n                     res\n                     (conj res el))))]\n      (loop [aa a bb b res #{}]\n        (if (and (empty? aa) (empty? bb))\n          res\n          (recur (next aa) (next bb)\n                 (inset (first aa) b (inset (first bb) a res)))))))", "user": "56a1fce9e4b0542e1f8d14b7"}, {"problem": 88, "code": "#(let [i (clojure.set/intersection %1 %2)\n        A (clojure.set/difference %1 i)\n        B (clojure.set/difference %2 i)]\n    (clojure.set/union A B))", "user": "568227fee4b0945ebc182a8a"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference\n    (clojure.set/union a b)\n    (clojure.set/intersection a b)))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 88, "code": "(fn [xs ys] (reduce\n               (fn [m i]\n                 (if (= (last m) i)\n                   (into (sorted-set) (butlast m))\n                   (conj m i)))\n               (sorted-set)\n               (sort (concat xs ys))))", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 88, "code": "(fn [a b] (let [common (clojure.set/intersection a b)]\n             (clojure.set/union (clojure.set/difference a common) (clojure.set/difference b common))))", "user": "56dc3bdfe4b0ea9b8538f819"}, {"problem": 88, "code": "(fn f [s1 s2]\n  (let [intersect (set (filter #(and (contains? s1 %1) (contains? s2 %1)) (clojure.set/union s1 s2)))]\n    (set (filter #(not (contains? intersect %1)) (clojure.set/union s1 s2)))))", "user": "56df62eee4b0ca2494a095f0"}, {"problem": 88, "code": "(fn [s1 s2]\n       (set (filter #(not (and (contains? s1 %) (contains? s2 %))) (concat (seq s1) (seq s2)))) )", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 88, "code": "(fn [s1 s2]\n       (set (filter #(not (and (contains? s1 %) (contains? s2 %))) (concat (seq s1) (seq s2)))) )", "user": "56df6301e4b0ca2494a095f1"}, {"problem": 88, "code": "(fn f\n  [a b]\n  (set (filter #(not (and (contains? a %) (contains? b %))) (concat a b))))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 88, "code": "(fn\n  [s1 s2]\n  (set\n   (concat\n    (for [i s1 :when (not (contains? s2 i))] i)\n    (for [i s2 :when (not (contains? s1 i))] i)\n    )))", "user": "56df6846e4b0ca2494a095fa"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 88, "code": "(fn [a b] (set (concat (remove a b) (remove b a))))", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 88, "code": "(fn [set1 set2] (set (concat\n    (filter #(not (contains? set2 %)) set1)\n    (filter #(not (contains? set1 %)) set2))))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "56a7be01e4b07966d5a8a05e"}, {"problem": 88, "code": "#(clojure.set/union \n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "563cce5be4b0bfe05bf1183f"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "546a6e9fe4b00cfc9eacc157"}, {"problem": 88, "code": "(fn tonpere[one two]\n    (apply hash-set\n      (sort\n        (apply merge\n          (filter #(false? (get one % false)) two)\n          (filter #(false? (get two % false)) one)\n        )\n      )\n    )\n  )", "user": "5034b623e4b062bc5d7ae168"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 88, "code": "(fn [set1 set2]\n  (let [union (clojure.set/union set1 set2)\n        intersection (clojure.set/intersection set1 set2)]\n    (clojure.set/difference union intersection)))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "56795deae4b05957ce8c6187"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 88, "code": "(fn symdiff [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "56491d05e4b0284900eef63a"}, {"problem": 88, "code": "(fn [a b]\n  (into (set (remove b a)) (remove a b)))", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "50f3bd98e4b041536e2eca3a"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 88, "code": "; by definition\n(fn [s1 s2] \n   (clojure.set/difference \n              (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "5250a13ee4b0541d1855b839"}, {"problem": 88, "code": "(fn symmetric-difference\n  [A B]\n  (clojure.set/union (clojure.set/difference A B) (clojure.set/difference B A)))", "user": "560d4994e4b05f002753df3c"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (let [intersection (filter s1 s2)]\n    (set (concat (filter #(not ((set intersection) %)) s1)\n                 (filter #(not ((set intersection) %)) s2)))))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56cf80f9e4b0ea9b8538f76a"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) \n                     (clojure.set/difference s2 s1)))", "user": "56ee0691e4b04a395b9a044c"}, {"problem": 88, "code": "#(let [i (clojure.set/intersection %1 %2)]\n  (clojure.set/union\n    (clojure.set/difference %1 i)\n    (clojure.set/difference %2 i))\n  )", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 88, "code": "#(into #{} (concat (remove %2 %) (remove % %2)))", "user": "56e06625e4b0ca2494a09607"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "user": "55d68726e4b0e31453f64a99"}, {"problem": 88, "code": "#(let [u (clojure.set/union %1 %2)\n       i (clojure.set/intersection %1 %2)]\n    (clojure.set/difference u i))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 88, "code": "(fn symmetric-difference [xs ys]\n  (clojure.set/union\n   (clojure.set/difference xs ys)\n   (clojure.set/difference ys xs)))", "user": "518b8561e4b0f028e99addef"}, {"problem": 88, "code": "#(\n  clojure.set/difference\n    (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 88, "code": "#(apply disj (set (concat %1 %2)) (filter %1 %2))", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 88, "code": "(fn [x y] (set (filter #(not ((set (map x y) ) %)) (concat x y) )))", "user": "567798afe4b05957ce8c6169"}, {"problem": 88, "code": "#(-> (clojure.set/union %1 %2)\n     (clojure.set/difference (clojure.set/intersection %1 %2)))", "user": "52c35afce4b07a9af579238c"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 88, "code": "(fn[a b]\n  (clojure.set/union (clojure.set/difference a b)\n                     (clojure.set/difference b a)))", "user": "55101237e4b06e50f9beb181"}, {"problem": 88, "code": "(fn solve [x y]\n  (clojure.set/union (set (filter #(not (contains? y %)) x)) (set (filter #(not (contains? x %)) y)))\n)", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 88, "code": "(fn [s1 s2] (set (concat (filter #(not (contains? s2 %)) s1) (filter #(not (contains? s1 %)) s2))))", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 88, "code": "(fn sym-dif [s1 s2]\n  (let [u (clojure.set/union s1 s2)\n        d (clojure.set/intersection s1 s2)]\n    (clojure.set/difference u d)))", "user": "56742817e4b05957ce8c612d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set\n   (concat\n    (filter (complement s2) s1)\n    (filter (complement s1) s2))))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 88, "code": "#((comp set concat) (filter (complement %1) %2) (filter (complement %2) %1))", "user": "56be8649e4b0f26550335983"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)\n  ))", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 88, "code": "#(clojure.set/union\n   (clojure.set/difference %1 %2)\n   (clojure.set/difference %2 %1))", "user": "4e526cc4535d302ef430da74"}, {"problem": 88, "code": "(fn [s1 s2] (reduce (fn [s e] (if (s e) (disj s e) (conj s e))) s2 s1))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56fdd9a1e4b08d47c97781a8"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 88, "code": "(fn [a b] (letfn [(diff [a b] (filter #(not (contains? a %)) b))]\n             (set (concat (diff a b) (diff b a))))\n   )", "user": "56f15eade4b04a395b9a048e"}, {"problem": 88, "code": "(fn [xs ys]\n  (let [d (fn [xs ys]\n            (filter #(nil? (ys %)) xs))]\n    (-> #{} (into (d xs ys)) (into (d ys xs)))))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 88, "code": "(fn [s1 s2] (set (concat (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))))", "user": "52c1cc8be4b07a9af579236b"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [acc-add (fn [s] (fn [acc v] (if (get s v) acc (conj acc v))))]\n    (reduce (acc-add s2)\n            (reduce (acc-add s1)\n                    #{}\n                    s2)\n            s1)))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 88, "code": "(fn [a b]\n      (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 88, "code": "(fn symmetric_difference [s1 s2]\n  (set (concat (apply disj s1 s2) (apply disj s2 s1))))", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [i (clojure.set/intersection s1 s2)\n        u (clojure.set/union s1 s2)]\n  (reduce #(if (contains? i %2)\n             %1\n             (conj %1 %2))\n          #{} u)))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 88, "code": "(fn [a b]\n  (let [f #(apply (partial disj %) %2)]\n   (into (f a b) (f b a))))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 88, "code": "(fn [s1 s2]\n    (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "4f57c913e4b0a7574ea7183f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56f73913e4b08e7d20b9682d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference\n   (clojure.set/union a b)\n   (clojure.set/intersection a b)))", "user": "57008afae4b08d47c97781ca"}, {"problem": 88, "code": "(fn [s1 s2]\n  (letfn [(sd [pred src]\n            (for [i src\n                  :when (nil? (pred i))]\n              i))]\n    (set (concat (sd s1 s2) (sd s2 s1)))))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 88, "code": "(fn [a-set b-set]\n  (let [toggle (fn [a-set elem]\n                 (if (contains? a-set elem) \n                   (disj a-set elem) \n                   (conj a-set elem)))]\n  (reduce toggle a-set b-set)))", "user": "570e7e8ee4b0b0fb43fd06f0"}, {"problem": 88, "code": "(fn [A B] (set (concat (filter (complement A) B) (filter (complement B) A))))", "user": "56ff0ef3e4b08d47c97781ba"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 88, "code": "(fn [a b]\n    (let [union (fn [x y] (reduce conj x y))\n          diff (fn [x y] (reduce disj x y))\n          ]\n      (union (diff a b) (diff b a))\n      )\n    )", "user": "5351fca5e4b084c2834f4aec"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [ix (clojure.set/intersection s1 s2)\n        d1 (clojure.set/difference s1 ix)\n        d2 (clojure.set/difference s2 ix)]\n    (clojure.set/union d1 d2)))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (cond\n    (empty? s1) s2\n    (empty? s2) s1\n    :else (apply disj (apply conj s1 s2) (filter s1 s2))))", "user": "56fbcc1fe4b07572ad1a88d5"}, {"problem": 88, "code": "(fn [s1 s2]\n   (let [a (clojure.set/difference s1 s2)\n         b (clojure.set/difference s2 s1)]\n     (clojure.set/union a b)))", "user": "55ba70f9e4b01b9910ae29d4"}, {"problem": 88, "code": "(fn [& sets]\n    (->> (reduce #(concat %2 (into [] %1)) [] sets)\n         (group-by identity)\n         (filter #(= 1 (count (val %))))\n         (map key)\n         (into #{})))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56d439d4e4b0ea9b8538f7b6"}, {"problem": 88, "code": "(fn [x y]\n\t(let [interection (into #{} (filter #(contains? y %) x))]\n     (into #{} (concat (remove #(contains? interection %) x) (remove #(contains? interection %) y)))\n      )\n  )", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) \n                    (clojure.set/difference %2 %1))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 88, "code": "(fn [a b]\n\t(clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a))\n)", "user": "5710e574e4b09c608db7043b"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/difference\n   (clojure.set/union x y)\n   (clojure.set/intersection x y)))", "user": "571077e8e4b09c608db70434"}, {"problem": 88, "code": "#(set (concat\n      (apply disj % (vec %2))\n      (apply disj %2 (vec %))))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 88, "code": "#(reduce conj (apply disj %1 %2) (apply disj %2 %1))", "user": "5716845be4b07c98581c3afa"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2) )", "user": "527bd988e4b03e8d9a4a759d"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/difference\n   (clojure.set/union set1 set2)\n   (clojure.set/intersection set1 set2)))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)(clojure.set/difference %2 %1))", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 88, "code": "#(into (clojure.set/difference %2 %1) (clojure.set/difference %1 %2))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5713f693e4b07c98581c3ab0"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 88, "code": "#(cond\n  (empty? %1) %2\n  (empty? %2) %1\n  :else (apply disj (apply conj %1 %2) (filter %1 %2)))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 88, "code": "#(set `(~@(remove % %2) ~@(remove %2 %)))", "user": "52393e16e4b0d705d026ef06"}, {"problem": 88, "code": "(fn [set1 set2] (into (clojure.set/difference set1 set2)\n                       (clojure.set/difference set2 set1)))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "570362ece4b08d47c97781f0"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (into \n   (remove #(contains? s1 %) s2)\n   (remove #(contains? s2 %) s1))))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 88, "code": "#(clojure.set/union \n  (clojure.set/difference %1 %2) \n  (clojure.set/difference %2 %1))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 88, "code": "(fn set-diff [a b]\n  (set\n    (concat\n      (filter (complement b) a)\n      (filter (complement a) b))))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 88, "code": "(fn\n  [s1 s2]\n  (let [sole-s1 (filter (complement s1) s2)\n        sole-s2 (filter (complement s2) s1)]\n    (set (concat sole-s1 sole-s2))))", "user": "5720a2b0e4b0c5bde472c099"}, {"problem": 88, "code": "(fn sym-difference [s1 s2]\n  (let [intersection (clojure.set/intersection s1 s2)\n        union (clojure.set/union s1 s2)]\n    (clojure.set/difference union intersection)))", "user": "571d063ee4b0145328a76272"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (for [x (clojure.set/union s1 s2) :when (or (and (contains? s1 x) (not (contains? s2 x)))\n                                                   (and (contains? s2 x) (not (contains? s1 x))))]\n             x)))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 88, "code": "(fn symdiff\n  [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 88, "code": "#(set(for [i (into % %2)\n       :when (not (and (%1 i)\n                       (%2 i)))]\n   i))", "user": "52ae886de4b0c58976d9acab"}, {"problem": 88, "code": "(fn diff\n  [set1 set2]\n  (set (concat (filter #(not (contains? set2 %)) set1) (filter #(not (contains? set1 %)) set2))))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 88, "code": "#(into #{} (filter (comp not (clojure.set/intersection %1 %2)) (clojure.set/union %1 %2)))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 88, "code": "(fn [sa sb]\n  (\n    set (concat\n    (filter (complement sb) sa)\n    (filter (complement sa) sb)\n    )\n  )\n)", "user": "54c8eb61e4b045293a27f658"}, {"problem": 88, "code": "#(clojure.set/union \n   (clojure.set/difference %1 %2) \n   (clojure.set/difference %2 %1))", "user": "4df73d64535d04ed9115e775"}, {"problem": 88, "code": "(fn\n  [set1 set2]\n  (clojure.set/union\n    (clojure.set/difference set1 set2)\n    (clojure.set/difference set2 set1)))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 88, "code": "(fn [a b]\n  (let [except #(filter (complement (set %1)) %2)]\n    (set (concat (except a b) (except b a)))))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 88, "code": "(fn [s1 s2] (let [common (clojure.set/intersection s1 s2)\n                  diff1 (clojure.set/difference s1 common)\n                  diff2 (clojure.set/difference s2 common)]\n              (clojure.set/union diff1 diff2)))", "user": "4f8490fae4b033992c121c34"}, {"problem": 88, "code": "(fn [set1 set2]\n   (let [toggle (fn [x coll]\n                  (if (contains? coll x)\n                    (disj coll x)\n                    (conj coll x)))]\n     (loop [acc #{}\n            coll (concat (seq set1) (seq set2))]\n       (if (empty? coll)\n         acc\n         (recur (toggle (first coll) acc) (rest coll))))))", "user": "571cd9dce4b0145328a76271"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 88, "code": "(fn symmetric-difference [s1 s2]\n  (set ( remove #(and (s1 %) (s2 %))\n                (concat s1 s2))))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union \n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 88, "code": "(fn set-diff [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 88, "code": "(fn \n  [a b]\n  (clojure.set/difference\n    (clojure.set/union a b)\n    (clojure.set/intersection a b)))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "5728d33ce4b0c6e51e0d2b12"}, {"problem": 88, "code": "(fn [set1 set2]\n  (let [common (clojure.set/intersection set1 set2)\n        all (clojure.set/union set1 set2)]\n    (set (filter #(not (common %)) all))))", "user": "5715b929e4b07c98581c3ae2"}, {"problem": 88, "code": "#(set (concat (remove % %2) (remove %2 %)))", "user": "4ed0e139535d44c135fd68c7"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5547b72be4b0a04f79299550"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 88, "code": "(fn symmetric-diff [z z2]\n      (set (concat (clojure.set/difference z z2) (clojure.set/difference z2 z))))", "user": "56f4cedce4b046a417f92063"}, {"problem": 88, "code": "#(if (empty? %1) %2 (if (empty? %2) %1 (apply conj (apply disj %1 %2) (apply disj %2 %1))))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 88, "code": "(fn func\n  [x y]\n  (if (empty? y)\n    x\n    (if (contains? (func x (rest y)) (first y))\n      (disj (func x (rest y)) (first y))\n      (conj (func x (rest y)) (first y))\n      )\n    )\n  )", "user": "56de78fde4b0ea9b8538f83c"}, {"problem": 88, "code": "(fn sym-diff [a b]\n  (clojure.set/union\n    (clojure.set/difference a b)\n    (clojure.set/difference b a)))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 88, "code": "(fn [n s]\n   (clojure.set/union (clojure.set/difference n s)(clojure.set/difference s n)))", "user": "572ca54ae4b0cd1946bd0f59"}, {"problem": 88, "code": "(fn [a b]\n   (let [u (filter a b)]\n     (set (concat (remove b a) (remove a b)))))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 88, "code": "(fn [a b]\n   (set (concat ( filter #(= nil (b %)   ) a ) ( filter #(= nil (a %)   ) b )  ))\n  )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 88, "code": "(comp #(clojure.set/difference (first %) (second %)) (juxt clojure.set/union clojure.set/intersection))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 88, "code": "#(set (concat (apply (partial disj %1) %2) (apply (partial disj %2) %1)))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 88, "code": "(fn [set1 set2]\n  (let [uniq-set1 (clojure.set/difference set1 set2)\n        uniq-set2 (clojure.set/difference set2 set1)\n        union (clojure.set/union uniq-set1 uniq-set2)]\n    union))", "user": "573b8f67e4b0cd1946bd10ae"}, {"problem": 88, "code": "(fn symmetricDifference [s1 s2]\n  (clojure.set/union \n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)    \n  )\n)", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 88, "code": "(fn [set1 set2]\n  (set\n    (filter\n      #(or\n          (and\n            (contains? set1 %)\n            ((complement contains?) set2 %))\n          (and\n            (contains? set2 %)\n            ((complement contains?) set1 %)))\n      (clojure.set/union set1 set2))))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 88, "code": "#(case (first %2)\n   1 #{2 4 6 7}\n   nil #{:a :b :c}\n   4 #{4 5 6}\n   [2 3] #{[1 2] [3 4]})", "user": "55c3f19de4b0e31453f64991"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 88, "code": "(fn simdiff [s1 s2]\n               (let [un (clojure.set/union s1 s2)]\n                 (set (filter #(= 1 (count (filter true? (map (fn [s] (contains? s %))[s1 s2])))) un))))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 88, "code": "#(set(concat (for [x %1 :when (not (get %2 x))] x)\n        (for [y %2 :when (not (get %1 y))] y)\n        ))", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 88, "code": "(fn difference [s1 s2]\n  (set\n    (filter\n      #(not (and (s1 %) (s2 %)))\n      (apply merge s1 s2))))", "user": "56ac81ace4b03c432f187347"}, {"problem": 88, "code": "(fn\n  [s1 s2]\n  (let [d1 (clojure.set/difference s1 s2) d2 (clojure.set/difference s2 s1)]\n    (clojure.set/union d1 d2)))", "user": "57061d20e4b0b0fb43fd0679"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "574a9132e4b02ea1147991fd"}, {"problem": 88, "code": "(fn [a s] (clojure.set/union (clojure.set/difference a s) (clojure.set/difference s a)))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 88, "code": "#(reduce conj (reduce disj % %2) (reduce disj %2 %))", "user": "51647faae4b003cf19fdde3b"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference\n   (clojure.set/union s1 s2)\n   (clojure.set/intersection s1 s2)))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 88, "code": "(fn symdif [set1 set2]\n  (clojure.set/difference\n   (clojure.set/union set1 set2)\n   (clojure.set/intersection set1 set2))\n)", "user": "572ac718e4b0f4d77e651242"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 88, "code": "(fn [s1 s2]\n\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 88, "code": "(fn [set-a set-b]\n  (set (concat (filter #(not (set-a %)) set-b) (filter #(not (set-b %)) set-a))))", "user": "57552f39e4b02ea1147992c1"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "56bb652ae4b0f26550335953"}, {"problem": 88, "code": "(fn [x y]\n(clojure.set/union \n (clojure.set/difference  \n  x \n  y\n  ) \n (clojure.set/difference   \n  y \n  x\n  )\n )\n  )", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 88, "code": "(fn [s t]\n  (clojure.set/union\n   (clojure.set/difference s t)\n   (clojure.set/difference t s)))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "574986cae4b009280f9f2b9c"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "575086e7e4b02ea114799276"}, {"problem": 88, "code": "#(set (concat (remove % %2) (remove %2 %)))\n\n;#(clojure.set/union\n;    (clojure.set/difference %1 %2)\n;    (clojure.set/difference %2 %1))", "user": "572830e6e4b0c5bde472c152"}, {"problem": 88, "code": "(fn [a b]\n  (set (concat (reduce #(if (b %2) %1 (conj %1 %2)) () a)\n               (reduce #(if (a %2) %1 (conj %1 %2)) () b))))", "user": "508c3d42e4b0f17d83ea26b2"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "56743413e4b05957ce8c612e"}, {"problem": 88, "code": "( fn [ x y ] ( clojure.set/difference ( clojure.set/union x y ) ( clojure.set/intersection x y ) ) )", "user": "57561529e4b02ea1147992d3"}, {"problem": 88, "code": "#(apply clojure.set/difference ((juxt clojure.set/union clojure.set/intersection) %1 %2))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 88, "code": "(fn[x y]\n (into #{}\n (filter\n  (fn[a] (and\n          (or (contains? x a) (contains? y a))\n          (not(and (contains? x a) (contains? y a)))\n  ))\n  (concat x y)\n )\n )\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 88, "code": "(fn [x y]\n  (let [inter (clojure.set/intersection x y)\n        xz (clojure.set/difference x inter)\n        yz (clojure.set/difference y inter)]\n    (clojure.set/union xz yz)))", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 88, "code": "#(clojure.set/union\n    (clojure.set/difference %1 %2)\n    (clojure.set/difference %2 %1))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2)\n                    (clojure.set/difference %2 %))", "user": "52cbe5dfe4b07d0d72b27352"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union \n         (clojure.set/difference b a)\n         (clojure.set/difference a b)))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "57169f93e4b07c98581c3b00"}, {"problem": 88, "code": "(fn symmetric-dif [s1 s2]\n  (let [d1 (reduce #(if (contains? s1 %2)\n                      %1\n                      (conj %1 %2)) #{} s2)\n        d2 (reduce #(if (contains? s2 %2)\n                      %1\n                      (conj %1 %2)) #{} s1)]\n    (clojure.set/union d1 d2)))", "user": "574f1c24e4b02ea114799255"}, {"problem": 88, "code": "(fn [a b]\n  (apply sorted-set (reduce disj (reduce conj a b) (set (clojure.set/intersection a b)))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "57462a4de4b009280f9f2b5d"}, {"problem": 88, "code": "(fn [a b]\n  (->> (concat a b)\n    (filter #(not= (contains? a %)\n                   (contains? b %)))\n    set))", "user": "575cbe44e4b02ea114799374"}, {"problem": 88, "code": "(fn symdef[s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 88, "code": "(fn [s1 s2] (let [i (set (filter s1 s2))\n                  u (reduce (fn [s v] (conj s v)) s1 s2)]\n              (set (reduce (fn [s v] (if (i v)\n                                  s\n                                  (conj s v))) \n                      #{} \n                      u))))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 88, "code": "(fn [& sets]\n  (->> sets\n     (mapcat vec)\n     frequencies\n    (filter (comp #(= % 1) last))\n    (map first)\n    set\n  ))", "user": "57642916e4b0994c1922fbee"}, {"problem": 88, "code": "#( clojure.set/union \n       (clojure.set/difference %1 %2) \n       (clojure.set/difference %2 %1))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 88, "code": "(fn DIFFERENCE [s1 s2]\n  (reduce #(if (contains? %1 %2) (disj %1 %2) (conj %1 %2)) s1 s2))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 88, "code": "(fn [s1 s2] (set (filter #(not= (s1 %) (s2 %)) (into s1 s2))) )", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 88, "code": "(fn [s1 s2]\n\t(clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 88, "code": "(fn symmetricDiff [seta setb]\n  (clojure.set/union (clojure.set/difference seta setb) (clojure.set/difference setb seta)))", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "56d30497e4b0ea9b8538f7a8"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [diff1 (clojure.set/difference s1 s2)\n        diff2 (clojure.set/difference s2 s1)]\n    (set (concat diff1 diff2))))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 88, "code": "#(set (clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %)))", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 88, "code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "5756f324e4b02ea1147992e8"}, {"problem": 88, "code": "(fn [x y] (set (let [d clojure.set/difference] (concat (d x y) (d y x)))))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 88, "code": "#(set (concat (remove % %2) (remove %2 %)))", "user": "576e3258e4b0979f89651574"}, {"problem": 88, "code": "(fn [set1 set2]\n  (let[intersec (clojure.set/intersection set1 set2)\n       merged-set (into set1 set2)]\n    (clojure.set/difference merged-set intersec)))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "577202d2e4b0979f896515c0"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference % %2) (clojure.set/difference %2 %)))", "user": "56372c3ce4b0bfe05bf117d1"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "57650419e4b0994c1922fc09"}, {"problem": 88, "code": "(fn [x y]\n  (let [differ #(clojure.set/difference % %2)]\n    (clojure.set/union (differ x y) (differ y x))))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 88, "code": "(fn[set1 set2] ( into #{} (concat (for [x set1  :when (not (contains? set2 x) ) ] x ) (for [y set2 :when (not (contains? set1 y) )] y) ) ))", "user": "575bd5f9e4b02ea114799365"}, {"problem": 88, "code": "(fn diff [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "57763002e4b0979f89651631"}, {"problem": 88, "code": "#(into (apply disj % %2) (apply disj %2 %))", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 88, "code": "(fn [s1 s2] \n  (clojure.set/union \n     (clojure.set/difference s1 s2) \n     (clojure.set/difference s2 s1)))", "user": "577629abe4b0979f8965162e"}, {"problem": 88, "code": "(fn [xs ys]\n  (letfn [(f [xs ys]\n            (loop [xs xs\n                   acc #{}]\n              (let [x (first xs)]\n                (cond\n                  (nil? x) acc\n                  (not (some #{x} ys)) (recur (rest xs) (conj acc x))\n                  :else (recur (rest xs) acc)))\n              ))]\n    (set (concat (f xs ys) (f ys xs))))\n  )", "user": "55fbc657e4b0f488688e0666"}, {"problem": 88, "code": "(fn\n  [set1 set2]\n  (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 88, "code": "#(into #{} (concat (remove % %2) (remove %2 %)))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2) )", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 88, "code": "(fn [x y]\n  (loop [result x tmp y]\n    (if (empty? tmp)\n      result\n      (recur (cond (contains? result (first tmp)) (disj result (first tmp))\n                   :else (conj result (first tmp))\n                   )\n             (next tmp)\n             \n             )\n      )\n   )\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 88, "code": "(fn [a b]\n  (set (into (remove b a) (remove a b))))", "user": "5776f39de4b0979f89651643"}, {"problem": 88, "code": "(fn [s1 s2] \n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "577829f9e4b0979f8965165a"}, {"problem": 88, "code": ";; First solution\n;#(into \n;  (set (filter (complement %1) %2)) \n;  (filter (complement %2) %1))\n#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 88, "code": "(fn symm-diff [a b] (set (concat (filter (complement a) b) (filter (complement b) a))))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 88, "code": "(fn symdif [a b]\n  (reduce into #{} [(remove (partial contains? b) a)\n                    (remove (partial contains? a) b)]))", "user": "50d3ec8be4b030b634c368bb"}, {"problem": 88, "code": "(fn [a b] (into (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5674607ae4b05957ce8c6137"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference \n               (clojure.set/union a b)\n               (clojure.set/intersection a b)) )", "user": "575fec91e4b08062f99a4e89"}, {"problem": 88, "code": "(fn symmetric-difference [a b]\n    (clojure.set/union\n     (clojure.set/difference a b)\n     (clojure.set/difference b a)))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 88, "code": "(fn [set1 set2] (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2)))", "user": "53e92f82e4b036ad0777e49d"}, {"problem": 88, "code": "#(clojure.set/union \n     (clojure.set/difference %1 %2)\n     (clojure.set/difference %2 %1) )", "user": "577e54bbe4b0c8d87281f6e5"}, {"problem": 88, "code": "(fn [s1 s2] (into #{} (remove nil? (concat (map  #(if (not (contains? s2 %)) %)s1)(map  #(if (not (contains? s1 %)) %)s2) ))))", "user": "550609b3e4b021ccfedb9695"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 88, "code": "(fn [xs ys]\n  (clojure.set/union\n  \t(clojure.set/difference xs ys)\n    (clojure.set/difference ys xs)))", "user": "578606d2e4b0ebec4cfb74ec"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "578f9a18e4b0ebec4cfb7598"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "576df252e4b0979f8965156f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5776385fe4b0979f89651632"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57615a22e4b0994c1922fb88"}, {"problem": 88, "code": "(fn [coll coll2]\n  (set (into (remove #(contains? coll2 %) coll) (remove #(contains? coll %) coll2)))\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 88, "code": "(fn [x y]\n  (let [u (clojure.set/union x y)]\n    (set (filter #(not (and (x %) (y %))) u))))", "user": "56f53962e4b046a417f9206c"}, {"problem": 88, "code": "(fn [a b]\n  (let [da (clojure.set/difference a b)\n        db (clojure.set/difference b a)\n        union (clojure.set/union da db)]\n    union))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "4f8ac2bde4b02e764a0a5172"}, {"problem": 88, "code": "(fn [a b]\n    (set (concat (filter #(not (a %)) b) (filter #(not (b %)) a))))", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 88, "code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 88, "code": "(fn [x y] (let [differ #(loop [i %1 sec %2 result #{}]\n                    (if (empty? i)\n                      result\n                      (if (contains? sec (first i))\n                        (recur (rest i) sec result)\n                        (recur (rest i) sec (conj result (first i)))))\n                    )]\n               (clojure.set/union (differ x y) (differ y x))\n     ))", "user": "560c37b5e4b05f002753df2e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into #{} (keys (filter (fn [ [_ v] ] (= 1 (count v))) (group-by identity (into (vec s1) s2))))))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [diff (fn [s1 s2] (filter #(not (contains? s2 %)) s1))]\n    (apply hash-set (concat (diff s1 s2) (diff s2 s1)))))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 88, "code": "(fn[x y](clojure.set/union\n             (clojure.set/difference x y)\n             (clojure.set/difference y x)\n        )       \n)", "user": "5799fc93e4b05b1deef9add0"}, {"problem": 88, "code": "#(clojure.set/difference \n\n     (clojure.set/union %1 %2)\n\n     (clojure.set/intersection %1 %2))", "user": "50e5bca5e4b09ae9427b0e75"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1  ))", "user": "579601c8e4b0e215f87e8492"}, {"problem": 88, "code": "(fn [a b]\n  (into \n   #{} \n   (concat (remove a b)\n           (remove b a)\n   )))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [s3 (clojure.set/intersection s1 s2)]\n  \t(clojure.set/select #(not (contains? s3 %)) (clojure.set/union s1 s2))))", "user": "577f0b0ee4b0c8d87281f6f3"}, {"problem": 88, "code": "(fn [a b] (set (for [x (clojure.set/union a b) :when (not (and (a x) (b x)))] x)))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "578e01e9e4b0ebec4cfb7575"}, {"problem": 88, "code": "(fn [s1 s2] \n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 88, "code": "#(set (concat\n         (apply disj %1 %2)\n         (apply disj %2 %1)))", "user": "53572767e4b04ce2eb3ed277"}, {"problem": 88, "code": ";#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))\n#(set (filter (fn [x] (not= (%1 x) (%2 x))) (into %1 %2)))", "user": "57717915e4b0979f896515b3"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union\n              (clojure.set/difference s1 s2)\n              (clojure.set/difference s2 s1)))", "user": "53483a32e4b084c2834f4a57"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"problem": 88, "code": "#(clojure.set/difference  (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "575d16f8e4b02ea114799377"}, {"problem": 88, "code": "(fn [set-1 set-2]\n  (let [get-diff #(clojure.set/difference %1 %2)]\n    (clojure.set/union (get-diff set-1 set-2) (get-diff set-2 set-1))))", "user": "571d9669e4b0145328a7627f"}, {"problem": 88, "code": "(fn\n    [s1 s2]\n\n    (set\n      (concat\n        (filter\n          (fn [v]\n            (not\n              (contains? s2 v)\n            )\n          )\n          s1\n        )\n        (filter\n          (fn [v]\n            (not\n              (contains? s1 v)\n            )\n          )\n          s2\n        )\n      )\n    )\n  )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 88, "code": "#(clojure.set/difference\n  (clojure.set/union % %2)\n  (clojure.set/intersection % %2))", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference\n    (clojure.set/union a b)\n    (clojure.set/intersection b a)))", "user": "5033ed65e4b062bc5d7ae15a"}, {"problem": 88, "code": "#(let [d clojure.set/difference] (set (concat (d % %2) (d %2 %))))", "user": "4e5e9f6b535d8a8b8723a2d2"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (into (set (filter (fn [e] (not (s1 e))) s2))\n        (filter (fn [e] (not (s2 e))) s1))\n\n  )", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 88, "code": "(fn [xs ys]\n  (clojure.set/union\n   (clojure.set/difference xs ys) (clojure.set/difference ys xs)))", "user": "57a49951e4b0a966079561e5"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 88, "code": "(fn [a b]\n  (apply clojure.set/union\n         (map clojure.set/difference\n              [a b]\n              [b a])))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 88, "code": "(fn [as bs]\n  (clojure.set/difference (clojure.set/union as bs) (clojure.set/intersection as bs)))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 88, "code": "#(let [d clojure.set/difference]\n   (clojure.set/union \n    (d % %2)(d %2 %)))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 88, "code": "(fn fun88\n  [set1 set2]\n  (set (map first (filter #(not (second %)) (partition-by identity (sort (concat (seq set1) (seq set2))))))))", "user": "5075e374e4b09049dea827a5"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "571dd145e4b0145328a76283"}, {"problem": 88, "code": "#(letfn \n      [(cat [a b] (set (remove (partial get a) b)))]\n      (into (cat % %2) (cat %2 %)))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/difference \n   (clojure.set/union x y)\n   (clojure.set/intersection x y)\n   )\n)", "user": "57af6cf4e4b0fbc9809a2735"}, {"problem": 88, "code": "(fn [x y]\n    (into (set (filter #(not (x %)) y)) (filter #(not (y %)) x)))", "user": "4e837808535db62dc21a62d9"}, {"problem": 88, "code": "(fn outer-diff\n  [x y]\n  (clojure.set/union (clojure.set/difference  x y) \n                     (clojure.set/difference  y x)))", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 88, "code": "#(let [i (clojure.set/intersection %1 %2)] (clojure.set/union (clojure.set/difference %1 i) (clojure.set/difference %2 i)))", "user": "566e6850e4b0a866af6896da"}, {"problem": 88, "code": "(fn [x y] \n  (let [w\n  (reduce (fn [a z] (if (contains? y z) a (conj a z))) #{} x)\n        ]\n    (reduce (fn [a z] (if (contains? x z) a (conj a z))) w y)\n    )\n  )", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 88, "code": "(fn[a b]\n  (-> #{} \n      (into (remove b a))\n      (into (remove a b))))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 88, "code": "(fn [x y]\n   (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "51e7c1f1e4b0a3e081b8cbef"}, {"problem": 88, "code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "57a5f1e3e4b0a96607956200"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 88, "code": "(fn [s1 s2]\n  (loop [s1 s1 s2 s2 o #{}]\n    (cond (empty? s1) (into o s2)\n          :else (if (contains? s2 (first s1))\n                  (recur (rest s1) (disj s2 (first s1)) o)\n                  (recur (rest s1) s2 (conj o (first s1)))))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 88, "code": "(fn [a b]\n    (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 88, "code": "(fn sd [s1 s2]\n  (into (set (for [x s2 :when (nil? (s1 x))] x))\n          (for [x s1 :when (nil? (s2 x))] x)))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 88, "code": "(fn[a b] (set (filter #(not= (a %) (b %)) (into a b))))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 88, "code": "(fn sym-diff\n  [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "568bd448e4b0dcc4269f40a9"}, {"problem": 88, "code": "(fn [c1 c2]\n  (into \n   (set (filter #(not (contains? c2 %)) c1))\n   (set (filter #(not (contains? c1 %)) c2))))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 88, "code": "(fn test [set-1 set-2]\n  (set (remove (set (remove nil? (map set-1 set-2)))\n          (into set-1 set-2))))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 88, "code": "(fn symdiff \n  ([a b] (symdiff a b (symdiff b a #{})))\n  ([a b ret]\n    (if (empty? a)\n      ret\n      (if (contains? b (first a))\n        (symdiff (rest a) b ret)\n        (symdiff (rest a) b (conj ret (first a)))))))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 88, "code": "#(into (set (remove % %2)) (remove %2 %))", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 88, "code": "(fn sym-diff [set-a set-b] (clojure.set/difference (clojure.set/union set-a set-b) (clojure.set/intersection set-a set-b)))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 88, "code": "(fn [c d] (set (concat (filter #(not (c %)) d) \n                       (filter #(not (d %)) c))))", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 88, "code": "(fn [x y] (set (filter #(not (nil? %)) (concat\n                (for [i x] (when (not-any? #{i} y) i))\n                (for [i y] (when (not-any? #{i} x) i))))))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 88, "code": "(fn [a b] \n  (clojure.set/difference\n   (clojure.set/union a b)\n   (clojure.set/intersection a b))\n)", "user": "56c6a3c3e4b05cc29241eeb3"}, {"problem": 88, "code": "(fn[s1 s2] (into #{} (filter #(or (not (s1 %)) (not (s2 %))) (concat s1 s2))))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57cd7498e4b0c746388ab897"}, {"problem": 88, "code": "; (fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))\n\n(fn [set1 set2] (clojure.set/union \n                   (clojure.set/difference set1 set2) \n                   (clojure.set/difference set2 set1)))", "user": "57c44053e4b05aa3c4741ccb"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 88, "code": "(fn symmetric-set-diff[s1 s2]\n  (let[not-in-s1 (filter #(not(s1 %1))s2)\n       not-in-s2 (filter #(not(s2 %1))s1)]\n    (set(concat not-in-s1 not-in-s2))))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 88, "code": "#((comp set concat) (remove %1 %2) (remove %2 %1))", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "57a88e24e4b0a9660795621f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n   (clojure.set/select #(not (contains? s2 %)) s1)\n   (clojure.set/select #(not (contains? s1 %)) s2)))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 88, "code": "#(into (apply disj %1 %2) (apply disj %2 %1))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 88, "code": "(fn [s1 s2]\n    (clojure.set/union (clojure.set/difference s1 (clojure.set/intersection s1 s2))\n                       (clojure.set/difference s2 (clojure.set/intersection s1 s2))))", "user": "55df1985e4b050e68259b3eb"}, {"problem": 88, "code": "(fn sym-dif\n  [s1 s2]\n  (let [inter (clojure.set/intersection s1 s2)]\n       (into (into #{} (clojure.set/difference s1 inter)) (clojure.set/difference s2 inter))))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 88, "code": "(fn [x y] \n  (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 88, "code": "(fn  [x y]\n  (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 88, "code": "(fn my-sym-diff [s1 s2]\n\t(letfn [(my-diff [set1 set2] (filter #(not (contains? set2 %)) set1))]\n\t\t(set (concat (my-diff s1 s2) (my-diff s2 s1)))))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 88, "code": "(fn [xs ys] \n    (let [union (clojure.set/union xs ys)\n          intersection (clojure.set/intersection xs ys)]\n      (clojure.set/difference union intersection)))", "user": "55568a7de4b0deb715856e1c"}, {"problem": 88, "code": "(fn [s1 s2]      \n      (set (filter #(not (and (contains? s1 %) (contains? s2 %))) (concat s1 s2))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 88, "code": "(fn [a b]\n  (let [i (clojure.set/intersection a b)]\n    (clojure.set/union (clojure.set/difference a i)\n           (clojure.set/difference b i))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 88, "code": "(fn [set1 set2]\n  (into (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2) )\n)", "user": "57e396cde4b0bfb2137f5a9e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) \n                          (clojure.set/intersection s1 s2)))", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 88, "code": "#(set (concat (remove % %2) (remove %2 %)))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 88, "code": "(fn  [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 88, "code": "(fn [x y]\n      (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [d1 (clojure.set/difference s1 s2)\n        d2 (clojure.set/difference s2 s1)]\n    (into d1 d2))\n  \n  )", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 88, "code": "(fn [x y]\n  (let [intersect-xy (clojure.set/intersection x y)\n        diff-x (apply (partial disj x) intersect-xy)\n        diff-y (apply (partial disj y) intersect-xy)]\n        (clojure.set/union diff-x diff-y)))", "user": "57894e30e4b0ebec4cfb752b"}, {"problem": 88, "code": "(fn [s1 s2]\n   (clojure.set/difference\n     (clojure.set/union s1 s2)\n     (clojure.set/intersection s1 s2)))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 88, "code": "(fn [a b]\n   (clojure.set/union \n      (reduce (fn [r i]\n            (if (not (some #{i} b)) \n              (conj r i)\n              r)) #{}  a) \n        (reduce (fn [r i]\n            (if (not (some #{i} a)) \n              (conj r i)\n              r)) #{}  b) \n    \n    ))", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 88, "code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 88, "code": "(fn symmdif [x y]\n  (let [e (fn [x y]\n            (filter #(not (contains? x %)) y))\n        u (fn [x y]\n            (reduce conj x y))]\n    (set (u (e x y) (e y x)))))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 88, "code": "(fn [as bs]\n    ((comp set concat) (remove (fn [a] (contains? bs a)) as)\n            (remove (fn [b] (contains? as b)) bs)))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 88, "code": "(fn [a b]\n  (into\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)\n  ))", "user": "57f55632e4b0903ccab3dcf1"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into\n    (into #{} (filter #(not (contains? s1 %)) s2))\n    (filter #(not (contains? s2 %)) s1)))", "user": "577b4440e4b0d3393e5deb0f"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 88, "code": "(fn [a b]\n  (apply hash-set (concat (filter #(not (contains? b %)) a) (filter #(not (contains? a %)) b))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "574e84e0e4b02ea114799243"}, {"problem": 88, "code": "(fn [x y]\n  (let [d clojure.set/difference\n        u clojure.set/union]\n    (u (d x y) (d y x))))", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 88, "code": ";;#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))\n#(set (mapcat remove [%2 %] [% %2]))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 88, "code": "(fn [xs ys]\n  (set\n   (for [el (concat xs ys) \n         :when (and (or (contains? xs el) (contains? ys el)) (not (and (contains? xs el) (contains? ys el))))]\n     el)))", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))\n\n;#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 88, "code": "(fn difference\n  [s1 s2]\n  (set (filter #(not (= % nil))\n               (cond (empty? s1) s2\n                     (empty? s2) s1 \n                     :else (for [i s1 j s2]\n                            (cond (nil? (get s2 i)) i\n                                  (nil? (get s1 j)) j\n                                  :else nil))))))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 88, "code": "(fn set-diff [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 88, "code": "(fn diff\n  [a b]\n  (let [aa (clojure.set/difference a b)\n        bb (clojure.set/difference b a)]\n    (into (sorted-set) (concat aa bb))))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 88, "code": "(fn [coll1 coll2]\n  (clojure.set/union\n   (clojure.set/difference coll1 coll2)\n   (clojure.set/difference coll2 coll1)))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 88, "code": "(fn [a b]\n  (let [dis (clojure.set/intersection a b)\n        a-sub (clojure.set/difference a dis)\n        b-sub (clojure.set/difference b dis)]\n    (clojure.set/union a-sub b-sub)))", "user": "57f81524e4b0d3187e900913"}, {"problem": 88, "code": "(letfn [(s-dif [s-into pred sx] \n          (reduce \n            (fn [acc b] \n              (if (pred b) \n                acc\n                (conj acc b))) \n            s-into\n            sx))]\n  (fn [sa sb] \n    (s-dif (s-dif #{} sa sb) sb sa)))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 88, "code": "(fn symmetric-dif\n  [x y] \n  (set (concat (filter #(not (contains? x %))y) (filter #(not (contains? y %)) x))))", "user": "57f8153de4b0d3187e900916"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference b a) (clojure.set/difference a b)))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 88, "code": "(fn [a b] (set (concat (filter (fn [x] (not (a x))) b) (filter (fn [y] (not (b y))) a))))", "user": "579aff09e4b05b1deef9ade7"}, {"problem": 88, "code": "(fn \n  [x y]\n  \n\t(set \n     (concat \n      (filter #(not (x %1)) y) \n      (filter #(not (y %1)) x)))\n  )", "user": "57f81532e4b0d3187e900914"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 88, "code": "(fn [set1 set2]\n  (loop [s1 set1\n         s2 set2\n         lst ()]\n    (if (empty? s1)\n      (if (empty? s2)\n        (set lst)\n        (if (= false (contains? set1 (first s2)))\n          (recur s1 (rest s2) (cons (first s2) lst))\n          (recur s1 (rest s2) lst)))\n      (if (= false (contains? set2 (first s1)))\n        (recur (rest s1) s2 (cons (first s1) lst))\n        (recur (rest s1) s2 lst)))))", "user": "57f81549e4b0d3187e900918"}, {"problem": 88, "code": "(fn [set-a set-b]\n  (clojure.set/union (clojure.set/difference set-b set-a) (clojure.set/difference set-a set-b))\n  )", "user": "57f81045e4b0d3187e90090f"}, {"problem": 88, "code": "(fn symm\n  [s1 s2]\n  (set\n    (concat\n      (filter #(not (contains? s2 %)) s1)\n      (filter #(not (contains? s1 %)) s2))))", "user": "57f81534e4b0d3187e900915"}, {"problem": 88, "code": "(fn simdif[a b]\n  (clojure.set/union (clojure.set/difference a(clojure.set/intersection a b))  (clojure.set/difference b(clojure.set/intersection a b))))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 88, "code": "(fn set-diff [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 88, "code": "(fn symmetric_difference\n  [x y]\n  (set (concat (filter #(not (contains? x %)) y) (filter #(not (contains? y %)) x))))", "user": "57f81544e4b0d3187e900917"}, {"problem": 88, "code": "(fn \n  [s1 s2]\n  (set (concat (filter #(not (s1 %1)) s2) \n               (filter #(not (s2 %1)) s1))))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 88, "code": "#(set (concat (remove % %2) (remove %2 %)))", "user": "57f81569e4b0d3187e900919"}, {"problem": 88, "code": "(fn [a b]\n  (let [a-diff-b (clojure.set/difference a b)\n        b-diff-a (clojure.set/difference b a)]\n    (clojure.set/union a-diff-b b-diff-a)))", "user": "5803cd8fe4b0a837a8b30c96"}, {"problem": 88, "code": "(fn [set1 set2] \n  (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 88, "code": "(fn symmetric-difference [s1 s2]\n    (clojure.set/difference \n     (clojure.set/union s1 s2)\n     (clojure.set/intersection s1 s2)))", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 88, "code": "(fn [a b]\n  (set (remove #(and (a %) (b %)) (concat a b))))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 88, "code": "(fn\n  [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 88, "code": "(fn [x y] (set (concat (filter #(not (x %)) y) (filter #(not (y %)) x) )))", "user": "57ac6c67e4b0b8559636fc87"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/difference\n   (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "57fa6f2ee4b0d3187e900962"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))\n  \n  )", "user": "57f28b22e4b0511f1d294def"}, {"problem": 88, "code": "(fn symdiff [x y]\n  (let [ i (clojure.set/intersection x y) ]\n    (clojure.set/union\n      (clojure.set/difference x i)\n      (clojure.set/difference y i)\n    )\n  )\n)", "user": "562add6de4b00e49c7cb4834"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "57fe2d6fe4b0d3187e9009c8"}, {"problem": 88, "code": "(fn\n  [colum1 colum2]\n  (clojure.set/union\n    (into #{} (filter (complement (into #{} colum2)) colum1))\n    (into #{} (filter (complement (into #{} colum1)) colum2))))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 88, "code": "(fn symmertric-diff [set_1 set_2]\n  (clojure.set/union (clojure.set/difference set_1 set_2) (clojure.set/difference set_2 set_1)))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 88, "code": "(fn [s1 s2] \n  (into #{} (filter #(not (contains? (into #{} (map s1 s2)) %)) (concat s1 s2))))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2)\n                         (clojure.set/intersection %1 %2))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference (clojure.set/union %1 %2)\n                                            %1) \n                    (clojure.set/difference (clojure.set/union %1 %2)\n                                            %2))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "564d3169e4b0284900eef67c"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 88, "code": "(fn sd [xs ys]\n  (clojure.set/difference\n   (clojure.set/union xs ys)\n   (clojure.set/intersection xs ys)))", "user": "56069006e4b08b23635d3174"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2)(clojure.set/difference %2 %1))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2)(clojure.set/intersection % %2))", "user": "57ee41eae4b0bfb2137f5bb0"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57ee41a6e4b0bfb2137f5baf"}, {"problem": 88, "code": "(fn [a b] (set (filter (complement ((comp set filter) a b)) ((comp set concat) a b))))", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57fbf995e4b0d3187e900981"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 88, "code": "#(set (filter \n  (fn [n] \n    (or (not (contains? % n)) (not (contains? %2 n))))\n  (set (concat % %2))))", "user": "5254b45fe4b0541d1855b9a0"}, {"problem": 88, "code": "(fn diff [x1 x2](set(concat(filter #(not(contains? x1 %)) x2)(filter #(not(contains? x2 %)) x1))))", "user": "57752a2de4b0979f89651613"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 88, "code": "(fn [st1 st2]\n     (into #{} (concat (filter #(not (contains? st1 %)) st2)  (filter #(not (contains? st2 %)) st1))))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 88, "code": "(fn f81-2 [coll-1 coll-2]\n  (set (concat (clojure.set/difference coll-2 coll-1)(clojure.set/difference coll-1 coll-2))))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 88, "code": "(fn symmetric-difference\n  [left right]\n  (let [left-difference (fn [left right]\n                             (loop [[h & t] (into [] left)\n                                    accum #{}]\n                               (let [new-accum (if (contains? right h)\n                                                 accum\n                                                 (conj accum h))]\n                                 (if (nil? t)\n                                   new-accum\n                                   (recur t new-accum)))))] \n       (if (empty? left)\n           right\n           (if (empty? right)\n             left (into (left-difference left right) (left-difference right left))))))", "user": "58152157e4b0f478707a0631"}, {"problem": 88, "code": "(fn [a b]\n  (into #{} (mapcat remove [a b] [b a])))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 88, "code": "(fn [a b] (into (into #{} (apply (partial disj a) b)) (apply (partial disj b) a)))", "user": "515cf9b5e4b00901442db1d4"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 88, "code": "(fn [s1 s2]\n    (set \n      (concat\n        (filter #(not (contains? s2 % )) s1)  \n        (filter #(not (contains? s1 % )) s2)\n        )\n      )\n    \n    )", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 88, "code": "(fn f88 [s1 s2]\n  (let [a (remove s1 s2)\n        b (remove s2 s1)]\n    (into #{}(concat a b))))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 88, "code": "(fn [s1 s2] (into #{} (for [i (clojure.set/union s1 s2) :when (not (and (contains? s1 i) (contains? s2 i)))] i)))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 88, "code": "#(set (into (remove % %2) (remove %2 %)))", "user": "5405885ee4b0addc1aec6668"}, {"problem": 88, "code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "user": "58247423e4b051871117bec5"}, {"problem": 88, "code": "(fn [a b]\n  (apply hash-set (concat (filter #((complement contains?) b %) a) (filter #((complement contains?) a %) b))))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 88, "code": "#(into #{} (concat (remove %2 %) (remove % %2)))", "user": "58173722e4b0c0e9c07b838a"}, {"problem": 88, "code": ";;#(set (remove (clojure.set/intersection %1 %2) (into %1 %2)))\n\n;;#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))\n\n#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 88, "code": "(fn [a b]\n    (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 88, "code": "#(into (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "581e76dfe4b04b46fc4b0f29"}, {"problem": 88, "code": "(fn [a b]\n  (set (concat (filter #(not (a %)) b) (filter #(not (b %)) a))))", "user": "58171a9ae4b0c0e9c07b8387"}, {"problem": 88, "code": "(fn symdiff [a b] (clojure.set/union\n                      (clojure.set/difference a b)\n                      (clojure.set/difference b a)))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 88, "code": "#(into #{} (sort (remove (clojure.set/intersection % %2) (clojure.set/union % %2))))", "user": "56193c6ee4b053970a773af2"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57ef793de4b0bfb2137f5bd8"}, {"problem": 88, "code": "(fn [s1 s2]\n   (clojure.set/union\n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference\n   (clojure.set/union s1 s2)\n   (clojure.set/intersection s1 s2)))", "user": "5813e208e4b0f478707a061b"}, {"problem": 88, "code": "(fn [a b](clojure.set/difference (into a b) (clojure.set/intersection a b)))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 88, "code": "(fn __ [a b] (set (remove #(and (a %) (b %)) (set (concat a b)))))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 88, "code": "(fn my-symmetric-diff [s1 s2]  \n    (clojure.set/union (clojure.set/difference s1 s2)\n                       (clojure.set/difference s2 s1)))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 88, "code": "(fn [set1 set2]\n  (->>\n   (for [x set1 :when (not (contains? set2 x))] x)\n   (concat\n    (for [x set2 :when (not (contains? set1 x))] x))\n   (set)))", "user": "58303fc3e4b051871117c006"}, {"problem": 88, "code": "(fn sym [a b]\n  ((comp set concat)\n  (filter #(not (contains? a %1)) b)\n  (filter #(not (contains? b %1)) a)\n   ))", "user": "5829d588e4b051871117bf4a"}, {"problem": 88, "code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %2 %1) (clojure.set/difference  %1 %2))", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2))\n  )", "user": "580f9585e4b0f478707a05b5"}, {"problem": 88, "code": "(fn [a b]\n  (set (let [in-both (set (filterv #(contains? b %) a))\n             a-only (for [x a \n                          :when (not (contains? in-both x))]\n                      x)\n             b-only (for [x b\n                          :when (not (contains? in-both x))]\n                      x)]\n         (remove nil? (concat a-only b-only)))))", "user": "55b1d0b5e4b0da326a65cf73"}, {"problem": 88, "code": "#(set (concat (filter (complement %1) %2) (filter (complement %2) %1)))", "user": "583166c1e4b051871117c025"}, {"problem": 88, "code": "#(let [u clojure.set/union\n      i clojure.set/intersection\n       d clojure.set/difference]\n   (d (u %1 %2) (i %1 %2)))", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 88, "code": "(fn sd [x y]\n  (let [s1 (filter #(not (contains? x %)) y)\n        s2 (filter #(not (contains? y %)) x)]\n    (into #{} (concat s1 s2))))", "user": "5779556de4b0979f8965166e"}, {"problem": 88, "code": "#(set (remove\n    (set (map %1 %2))\n    (into %1 %2)))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [\n          union (if (< (count s1) (count s2)) (reduce conj s2 s1) (reduce conj s1 s2))\n          intersect (set (filter #(not(or (not (s1 %)) (not (s2 %)))) (seq union)))\n        ]\n    (set (filter #(not (intersect %)) union))\n    ))", "user": "533a399de4b0e30313ee6cb9"}, {"problem": 88, "code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 88, "code": "(fn [s t] \n  (\n   let [[u d] [clojure.set/union clojure.set/difference]]\n   (u\n    (d s t) \n    (d t s)\n    )\n   )\n  )", "user": "58334d18e4b089d5ab817c97"}, {"problem": 88, "code": "(fn [x y]\n  (let [inter (clojure.set/intersection x y)\n        all   (clojure.set/union x y)]\n    (clojure.set/difference all inter)))", "user": "5787ce76e4b0ebec4cfb750e"}, {"problem": 88, "code": "(fn [x y]\n    (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "580d1da7e4b0849f6811b72f"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (let [diff1 (clojure.set/difference s1 s2)\n        diff2 (clojure.set/difference s2 s1)]\n    (clojure.set/union diff1 diff2)))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 88, "code": "#(clojure.set/union\n   (clojure.set/difference %1 %2)\n   (clojure.set/difference %2 %1))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 88, "code": "reduce #((if (% %2) disj conj) % %2)", "user": "58391c94e4b089d5ab817d35"}, {"problem": 88, "code": ";; symmetric difference => items belonging to one but not both of two sets\n(fn\n  [s1 s2]\n  (let [u  (set (concat s1 s2))\n        un (for [el u] \n             (cond\n               (and (contains? s1 el) (contains? s2 el)) nil\n               (or (contains? s1 el) (contains? s2 el)) el\n               :else nil))\n        unf (filter (complement nil?) un)\n        unfp (-> unf (set))]\n    unfp))", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) \n                    (clojure.set/difference %2 %))\n\n; golf\n;#(let [f clojure.set/difference] \n;   (into (f % %2) (f %2 %)))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 88, "code": "(fn [a b]\n  (set\n   (filter #(not (and (a %) (b %))) (concat a b))))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 88, "code": "(fn\n  [a b]\n  (set (clojure.set/union\n  (filter (complement a) b)\n  (filter (complement b) a))))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 88, "code": "(fn [a b]\n\n  (into #{} (for [x (into a b)\n\n                  :when (not= (get b x) (get a x))] x)))", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 88, "code": "(fn [a b](letfn [(l [m n](if (contains? m n) (set (remove #(= n %) m)) (conj m n)))]\n           (reduce l a b)))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 88, "code": "(fn f [a b]\n  (set\n    (clojure.set/union \n      (filter #(not (contains? b %)) a) \n      (filter #(not (contains? a %)) b))))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/union\n    (clojure.set/difference set1 set2)\n    (clojure.set/difference set2 set1)))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 88, "code": "(fn [set-1 set-2] \n\t(set (concat (clojure.set/difference set-1 set-2) (clojure.set/difference set-2 set-1) )))", "user": "583c4482e4b089d5ab817d7e"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "57f9b25fe4b0d3187e90094b"}, {"problem": 88, "code": "(fn [set1 set2]\n  (set (concat (filter (complement set2)  set1)\n               (filter (complement set1) set2))))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 88, "code": "(fn [s1 s2] (reduce (fn [s v] (\n  if (and (contains? s1 v) (contains? s2 v)) s (conj s v)\n)) #{} (concat s1 s2)))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 88, "code": "#(set (filter (fn [x]\n           (not (and (contains? %1 x)\n                     (contains? %2 x))))\n         (concat (seq %1) (seq %2))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 88, "code": "(fn [coll1 coll2] (clojure.set/union (clojure.set/difference coll1 coll2) (clojure.set/difference coll2 coll1)))", "user": "5804b491e4b0a837a8b30cac"}, {"problem": 88, "code": "#(apply disj (set (concat  % %2)) (filter % %2))", "user": "583e1558e4b089d5ab817da9"}, {"problem": 88, "code": "(fn [set-a set-b]\n  (let [inter (clojure.set/intersection set-a set-b)\n         union (clojure.set/union set-a set-b)]\n    (clojure.set/difference union inter))\n  )", "user": "58562083e4b0f14aab7c86eb"}, {"problem": 88, "code": "(fn [set1 set2]\n  (set (concat (filter (fn [item]\n                         (not (contains? set2 item)))\n                       set1)\n               (filter (fn [item]\n                         (not (contains? set1 item)))\n                       set2))))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [unin (clojure.set/union s1 s2)\n        intr (clojure.set/intersection s1 s2)]\n    (clojure.set/difference unin intr)))", "user": "51456858e4b0e88796073408"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56f9b953e4b07572ad1a88b9"}, {"problem": 88, "code": "(fn [x y]\n   (apply merge (clojure.set/difference y x) (clojure.set/difference x y))\n   )", "user": "50b25edae4b03ea88043355e"}, {"problem": 88, "code": "(fn  [s1 s2]\n  (letfn [(occur [n s] (if (contains? s n) 1 0))]\n    (set\n     (filter\n      (fn [item]\n        (= 1\n           (+ (occur item s1)\n              (occur item s2))))\n      (into s1 s2)))))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [i (clojure.set/intersection s1 s2)\n        u (clojure.set/union s1 s2)]\n    (clojure.set/difference u i)))", "user": "54a80855e4b09f271ff37c9e"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 88, "code": "(fn [a b]\n  (set (for [x (concat a b)\n             :when (not (and (a x) (b x)))] x)))", "user": "515ef58be4b02c55805ea237"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 88, "code": "(fn [a b]\n  (->> (concat a b)\n       frequencies\n       (filter #(= 1 (val %)))\n       (map first)\n       set))", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 88, "code": "(fn [set1 set2]\n  (into (clojure.set/difference set1 set2)\n        (clojure.set/difference set2 set1)))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 88, "code": "(fn symmetric-difference [set1 set2]\n  (letfn [(xor [p q]\n            (and\n              (or p q)\n              (not (and p q))))]\n    (let [all-elements (into set1 set2)]\n      (into #{} (filter #(xor (contains? set1 %) \n                              (contains? set2 %)) all-elements)))))", "user": "57ea4569e4b0bfb2137f5b46"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 88, "code": "(fn [a b]\n  (into (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 88, "code": "(fn sd [xs ys]\n  (into #{} \n        (concat\n         (filter (complement (partial contains? ys)) xs)\n         (filter (complement (partial contains? xs)) ys))))", "user": "55597b84e4b0deb715856e36"}, {"problem": 88, "code": "#(into #{} (concat (remove %1 %2) (remove %2 %1)))", "user": "4f3ca5a6e4b0e243712b1f53"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 88, "code": "#(set (apply concat (filter (fn [x](= (count x) 1)) (vals (group-by identity (concat %1 %2))))))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [i (clojure.set/intersection s1 s2)] \n    (clojure.set/union (apply disj s1 i) (apply disj s2 i))))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "51a132cee4b0b292b01ee3ff"}, {"problem": 88, "code": "(fn my-diff [set-a set-b]\n  (reduce #(if (or (nil? (get set-a %2))\n                   (nil? (get set-b %2)))\n             (conj %1 %2)\n             %1)\n          #{}\n          (into set-a set-b)))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "586b6f13e4b01531a375e959"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5879d577e4b01531a375ead8"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "582d7569e4b051871117bfbe"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat (remove #(contains? s2 %) s1) (remove #(contains? s1 %) s2))))", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 88, "code": "; input: set set\n; output: on the contrary common sets\n\n(fn [a b] \n  (set (filter #(not (and (contains? a %) (contains? b %))) (into a  b)))\n  )", "user": "582c526ae4b051871117bf88"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat (filter (complement s1) s2)\n               (filter (complement s2) s1))))", "user": "58740c18e4b01531a375ea49"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "54012b48e4b0de5c41848620"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5650082fe4b0284900eef6b7"}, {"problem": 88, "code": "(fn [a b]\n  (if (empty? a) b\n      (if (contains? b (first a))\n          (recur (disj a (first a)) (disj b (first a)))\n          (recur (disj a (first a)) (conj b (first a))))))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 88, "code": "#(apply clojure.set/union \n         ((juxt clojure.set/difference \n                (comp (partial apply clojure.set/difference) reverse list)) % %2))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 88, "code": "(fn [s t]\n  (set (remove nil? (concat (map #(when (nil? (t %)) %) s) \n               (map #(when (nil? (s %)) %) t)\n       ))\n  )\n)", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "5881335ce4b0f1effa3b762e"}, {"problem": 88, "code": "#(into (apply (partial disj %1) %2) (apply (partial disj %2) %1) )", "user": "588d0a52e4b05c141a2560a6"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n          (clojure.set/difference s2 s1)))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2)\n                         (clojure.set/intersection %1 %2))", "user": "587f8393e4b0f1effa3b75f2"}, {"problem": 88, "code": "(fn [s1 s2]\n   (set (remove (set (keep s1 s2)) (distinct (concat s1 s2)))))", "user": "5840c068e4b089d5ab817df8"}, {"problem": 88, "code": "(fn [a b]\n    (reduce (fn [val x]\n              (if (not (and (a x) (b x)))\n                (conj val x)\n                val)) #{} (into a b)))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 88, "code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "5886e8bde4b0f1effa3b76ea"}, {"problem": 88, "code": "#(loop [result #{}\n       \tset1 %1\n        set2 %2\n        x (first set1)]\n   (if (nil? x)\n     (into result set2)\n     (if (contains? set2 x)\n       (recur result (disj set1 x) (disj set2 x) (first (disj set1 x)))\n       (recur (conj result x) (disj set1 x) (disj set2 x) (first (disj set1 x))))))", "user": "57b5dc52e4b0fbc9809a27b3"}, {"problem": 88, "code": "(fn [a b] \n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 88, "code": "(fn [xs ys]\n  (clojure.set/union\n   (clojure.set/difference xs ys)\n   (clojure.set/difference ys xs)))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 88, "code": "(fn [xs ys]\n  (loop [s (set (concat xs ys)) acc #{}]\n    (cond\n     (empty? s) acc\n     (and (contains? xs (first s)) (not (contains? ys (first s)))) (recur (rest s) (into acc [(first s)]))\n     (and (contains? ys (first s)) (not (contains? xs (first s)))) (recur (rest s) (into acc [(first s)]))\n     :else (recur (rest s) acc))))", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 88, "code": "(fn [set_1 set_2] (clojure.set/union (clojure.set/difference set_1 set_2) (clojure.set/difference set_2 set_1)))", "user": "588f500ae4b00487982d51a4"}, {"problem": 88, "code": "#(into (clojure.set/difference %2 %1) (clojure.set/difference %1 %2))", "user": "57de9169e4b0bd073c202454"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/union\n    (clojure.set/difference x y)\n    (clojure.set/difference y x)))", "user": "53b42472e4b047364c0444b2"}, {"problem": 88, "code": "(fn[a b]\n  (into #{} (apply concat (filter #(= 1 (count %)) (vals (group-by identity (into (vec a) (vec b))))))))", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 88, "code": "(fn [coll1 coll2]\n  (cond \n      (empty? coll1) coll2\n      (empty? coll2) coll1\n      :else (into #{} \n        (concat \n          (for [x coll1 y coll2 :when (not (.contains coll2 x))]\n            x)\n          (for [x coll1 y coll2 :when (not (.contains coll1 y))]\n            y)))))\n\n\n;using set operations:\n;(fn [coll1 coll2]\n;  (clojure.set/union \n;    (clojure.set/difference coll1 coll2) \n;    (clojure.set/difference coll2 coll1)))", "user": "5896735fe4b00487982d529d"}, {"problem": 88, "code": "#(set \n  (remove (clojure.set/intersection %1 %2) \n          (apply merge %1 %2)))", "user": "576e607ae4b0979f89651579"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b)\n                          (clojure.set/intersection a b)))", "user": "5895477fe4b00487982d527c"}, {"problem": 88, "code": "#(clojure.set/union\n    (clojure.set/difference %1 %2)\n    (clojure.set/difference %2 %1))", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 88, "code": "(fn [s1 s2] (apply sorted-set (clojure.set/union (filter #(= (s1 %) nil) s2) (filter #(= (s2 %) nil) s1))))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 88, "code": "(fn sdiff [lhs rhs]\n  (set (concat   \n     (filter #(not (contains? rhs %)) lhs)\n     (filter #(not (contains? lhs %)) rhs)\n    ))\n)", "user": "5885e90de4b0f1effa3b76c5"}, {"problem": 88, "code": "(fn [a b]\n   (set (concat (filter #((complement contains?) b %) a)\n                (filter #((complement contains?) a %) b))))", "user": "587ee260e4b052da650a6353"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "58923efce4b00487982d521c"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 88, "code": "(fn\n  [set1 set2]\n  (into #{}\n        (remove (fn [el]\n                  (and (contains? set1 el) (contains? set2 el) ))\n                (concat set1 set2))))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 88, "code": "(fn [s1 s2] (into (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 88, "code": "(fn symmetricDiff [setA setB]\n  (clojure.set/union (clojure.set/difference setA setB) (clojure.set/difference setB setA))\n  )", "user": "58950f29e4b00487982d5270"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "5458c74de4b01be26fd74623"}, {"problem": 88, "code": "(fn symmetric_difference\n  [set1 set2]\n  (clojure.set/difference\n                            (clojure.set/union set1 set2)\n                            (clojure.set/intersection set1 set2)))", "user": "58a6d14fe4b01a0c0b232935"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "52ea7d3ae4b09f7907dd14bf"}, {"problem": 88, "code": "(fn [set1 set2]\n  (let [union (concat set1 set2)]\n    (into #{}\n          (for [e union :when (not (and (some #{e} set1) (some #{e} set2)))]\n      e))))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 88, "code": "(fn symmetric-difference [set1 set2]\n  (set (concat (filter #(not (set1 %)) set2) \n          (filter #(not (set2 %)) set1))))", "user": "525d44bfe4b0cb4875a45d6d"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 88, "code": "#(into (clojure.set/difference %2 %1) (clojure.set/difference %1 %2))", "user": "56391b7ce4b0bfe05bf117ef"}, {"problem": 88, "code": "#(into\n   (set (filter (complement %) %2))\n   (set (filter (complement %2) %)))", "user": "5156e767e4b04360f2428e6b"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat (clojure.set/difference s1 s2)\n               (clojure.set/difference s2 s1))))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "58b106f9e4b0ebc645576cf0"}, {"problem": 88, "code": "(fn [x y]\n  (let [i (clojure.set/intersection x y)\n        u1 (clojure.set/difference x i)\n        u2 (clojure.set/difference y i)]\n    (clojure.set/union u1 u2)))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [d1 (filter (comp not s1) s2)\n           d2 (filter (comp not s2) s1)]\n    (into (into #{} d1) d2)))", "user": "58949f8de4b00487982d525e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "588e4e05e4b00487982d5188"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (filter #(or (and (get s1 %) (not (get s2 %)))\n                    (and (not (get s1 %)) (get s2 %)))\n               (concat s1 s2))))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 88, "code": "#(clojure.set/union\n (clojure.set/difference %1 %2)\n (clojure.set/difference %2 %1))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 88, "code": "(fn [xs ys]\n    (let [xor \n          (fn [a b]\n            (or (and a (not b)) (and (not a) b)))]\n      \n    (set (clojure.set/union\n          (filter (fn [x] (xor (contains? xs x) (contains? ys x))) xs)\n          (filter (fn [y] (xor (contains? xs y) (contains? ys y))) ys)\n))))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b)\n                     (clojure.set/difference b a))\n   )", "user": "589037b4e4b00487982d51d0"}, {"problem": 88, "code": "#(clojure.set/union \n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "55a65872e4b09e57187da299"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/union\n    (clojure.set/difference x y)\n    (clojure.set/difference y x)))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 88, "code": "(fn [x y]\n     (set\n       (concat\n         (filter (complement y) x)\n         (filter (complement x) y)))\n     )", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 88, "code": "(fn di [s1 s2] \n(clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 88, "code": "#(clojure.set/union \n       (clojure.set/difference %1 %2) \n       (clojure.set/difference %2 %1))", "user": "58765038e4b01531a375ea7e"}, {"problem": 88, "code": "(fn [x c] (set (concat (remove (partial contains? x) c) (remove (partial contains? c) x))))", "user": "58a0fd0be4b02bd94d917ea4"}, {"problem": 88, "code": "(fn [s1 s2] (apply sorted-set (into (filter #(not (s2 %)) s1) (filter #(not (s1 %)) s2))))", "user": "57625c18e4b0994c1922fba4"}, {"problem": 88, "code": "(fn [x y]\n  (let [a clojure.set/difference]\n    (into #{} (concat (a x y) (a y x)))))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 88, "code": "(fn [s1 s2] (reduce (fn [r e] (if-not (contains? s2 e) (conj r e) (disj r e))) s2 s1))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 88, "code": "(fn [s1 s2] (letfn [\n                     (symmetric [lhs rhs] \n                       (into #{} \n                             (filter #(nil? (get rhs %1)) lhs)))\n                     ] \n               (into \n                 (symmetric s1 s2) \n                 (symmetric s2 s1))))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 88, "code": "(fn [eka toka] (clojure.set/union (clojure.set/difference eka toka) (clojure.set/difference toka eka)))", "user": "57c314f3e4b05aa3c4741cba"}, {"problem": 88, "code": "(fn [x y]\n  (let [fi-set (fn [x y] (filter #(not (contains? x %)) y)) ]\n    (set (concat (fi-set x y) (fi-set y x)))\n    )\n  )", "user": "570e43d8e4b0b0fb43fd06eb"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "58c7a80fe4b021aa9917ed7b"}, {"problem": 88, "code": "#(set (into(remove %1 %2) (remove %2 %1)))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 88, "code": "(fn sym-dif [x y]\n  (set (concat\n   (reduce (fn [coll x-val]\n            (if (some #{x-val} y)\n              coll\n              (conj coll x-val))) #{} x)\n   (reduce (fn [coll y-val]\n             (if (some #{y-val} x)\n               coll\n               (conj coll y-val))) #{} y))))", "user": "586b6753e4b01531a375e956"}, {"problem": 88, "code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 88, "code": "(fn [s t]\n  (letfn [(f [u v]\n             (reduce\n              #(if (contains? v %2)\n                 %1\n                 (conj %1 %2))\n              #{}\n              u))]\n         (into (f s t) (f t s))))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 88, "code": "#(set (concat (filter (complement %) %2)\n              (filter (complement %2) %)))", "user": "5893c64ce4b00487982d524b"}, {"problem": 88, "code": "#(set (into (remove % %2) (remove %2 %)))", "user": "589c0475e4b00487982d5351"}, {"problem": 88, "code": ";symmetric difference\n(fn [a b]\n  (let [intersection (clojure.set/intersection a b)]\n    (clojure.set/union \n      (clojure.set/difference a intersection)\n      (clojure.set/difference b intersection))))", "user": "58bc8cbee4b0888cdc949d1b"}, {"problem": 88, "code": "#(->> (into (vec %1) (vec %2))\n      (remove (clojure.set/intersection %1 %2))\n      (set))", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 88, "code": "(fn f1 [x y] (set (concat (clojure.set/difference y x) (clojure.set/difference x y))))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 88, "code": "(fn [xs ys]\n  (set (concat (filter #(not (contains? ys %)) xs) (filter #(not (contains? xs %)) ys))))", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 88, "code": "#(set (remove (clojure.set/intersection %1 %2) (clojure.set/union %1 %2)))", "user": "588d224ae4b00487982d516c"}, {"problem": 88, "code": "(fn symmetric-difference\n  [a b]\n  (into (set (filter #(not (a %)) b)) (filter #(not (b %)) a)))", "user": "580d2788e4b0849f6811b730"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 88, "code": "#(->> (for [x (into %1 %2)\n            :when (not= (%1 x) (%2 x))] x)\n      (into #{}))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union  %1 %2) (clojure.set/intersection %1 %2))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 88, "code": "(fn   [dataset1 dataset2]\n  (letfn [(diff [set1 set2 d-coll]\n            (reduce (fn [coll item]\n                      (if (nil? (set1 item))\n                        (conj coll item)\n                        coll))\n                    d-coll\n                    set2))]\n    (diff dataset1 dataset2 (diff dataset2 dataset1 #{})) ))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 88, "code": "#(set (concat (remove %2 %)(remove % %2)))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2)\n                             (clojure.set/intersection %1 %2))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 88, "code": "(fn [s1 s2] (\n    clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 88, "code": "(fn symm-diff [set1 set2]\n   (clojure.set/union\n     (clojure.set/difference set1 set2)\n     (clojure.set/difference set2 set1)))\n\n;#(clojure.set/union \n;  (clojure.set/difference %1 %2)\n;  (clojure.set/difference %2 %1))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 88, "code": "(fn symmetric-difference [l r]\n  (let [i (clojure.set/intersection l r)\n        u (clojure.set/union l r)]\n    (clojure.set/difference u i)))", "user": "58e37946e4b005f69f193cae"}, {"problem": 88, "code": "#(into #{} (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "587a3babe4b01531a375eae2"}, {"problem": 88, "code": "#(set (concat (remove %1 %2)\n              (remove %2 %1)))", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 88, "code": "(fn [x y]\n  (let [all-x (clojure.set/difference y x)\n        all-y (clojure.set/difference x y)\n        returned-set (clojure.set/union all-x all-y )]\n    returned-set))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 88, "code": "(fn [a b]\n\t(clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 88, "code": "(fn [a b] (apply sorted-set (map (fn [x]\n                                   (first x))\n                                 (filter (fn [x]\n                                           (= 1 (val x)))\n                                         (frequencies (concat a b))))))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 88, "code": "(fn symmetric-difference [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                      (clojure.set/difference s2 s1)))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "58dd21a9e4b0a4d5acaab6b3"}, {"problem": 88, "code": "(fn prob88 [x y]\n (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 88, "code": "#(set (remove (clojure.set/intersection %1 %2) (clojure.set/union %1 %2)))", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 88, "code": "(fn [x y]\n  (let [both (clojure.set/intersection x y)]\n    (clojure.set/union (clojure.set/difference x both) (clojure.set/difference y both))))", "user": "4ea8570f535d7eef308072f8"}, {"problem": 88, "code": "(fn [s1 s2]\n    (into (into #{} (remove #(s2 %) s1))\n          (remove #(s1 %) s2)))", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 88, "code": "#(into (set (remove %1 %2)) (remove %2 %1))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2)))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 88, "code": "(fn \n  [a b]\n  (clojure.set/union (set (filter #(not (contains? a %)) b)) (set (filter #(not (contains? b %)) a)))\n )", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 88, "code": "(fn [xs ys]\n  (set (concat\n        (for [x xs :when (not (ys x))] x)\n        (for [y ys :when (not (xs y))] y))))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 88, "code": "(fn [x y]\n  (let [inter (set (filter x y))]\n    (set (concat (remove inter x) (remove inter y)))))", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (clojure.set/union (remove s2 s1) (remove s1 s2))))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 88, "code": "(fn\n  [sa sb]\n  (into\n   #{}\n   (map\n    #(first %)\n    (filter\n     #(= 1 (count (second %)))\n     (group-by identity (concat '() sa sb))))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 88, "code": "(fn symmetric-difference [coll-a coll-b]\n  (letfn [(build-diff [coll-a coll-b]\n            (filter #(not (contains? coll-a %)) coll-b))]\n    (set (concat (build-diff coll-a coll-b) (build-diff coll-b coll-a)))))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "58cff8b0e4b03c36ff7e58c0"}, {"problem": 88, "code": "(fn [set1 set2]\n  (loop [result #{}, src (distinct (concat set1 set2))]\n    (if (= 0 (count src))\n      result\n      (if (contains? set1 (first src))\n        (if (contains? set2 (first src))\n          (recur result (rest src))\n          (recur (conj result (first src)) (rest src)))\n        (if (contains? set2 (first src))\n          (recur (conj result (first src)) (rest src))\n          (recur result (rest src)))))))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 88, "code": "(fn [a-seq b-seq]\n    (clojure.set/union (clojure.set/difference a-seq b-seq)\n     (clojure.set/difference b-seq a-seq)))", "user": "565487dce4b0f9d632dd8482"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 88, "code": "(fn mydiff [s1 s2]\n         (into #{} \n               (concat (filter #(not (contains? s2 %)) s1)\n                       (filter #(not (contains? s1 %)) s2))))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 88, "code": "#(set (into (remove % %2) (remove %2 %)))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 88, "code": "(fn sym-diff [a b]\n  (apply sorted-set (clojure.set/union (remove a b) (remove b a))))", "user": "5865c8f0e4b0f14aab7c884e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [i (clojure.set/intersection s1 s2)\n        d1 (clojure.set/difference s1 i)\n        d2 (clojure.set/difference s2 i)]\n    (clojure.set/union d1 d2)))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b)\n                     (clojure.set/difference b a)))", "user": "53889587e4b0640c7a9a589e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) \n                          (clojure.set/intersection s1 s2)))", "user": "563cdfdfe4b0bfe05bf11840"}, {"problem": 88, "code": "#(let [not-contains? (complement contains?)]\n   (set (concat (filter (partial not-contains? %1) %2)\n                (filter (partial not-contains? %2) %1))))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 88, "code": "(fn f[s1 s2]\n  (clojure.set/difference \n    (clojure.set/union s1 s2) \n    (clojure.set/intersection s1 s2)))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "58dc81d1e4b0a4d5acaab69e"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5901158de4b0438e51c2d039"}, {"problem": 88, "code": "#((comp set concat) (apply disj %1 %2) (apply disj %2 %1))", "user": "58ee0bb6e4b056aecfd47d97"}, {"problem": 88, "code": "(fn symdif [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 88, "code": "(fn [set1 set2]\n  (let [intersection (clojure.set/intersection set1 set2)]\n    (clojure.set/union\n      (clojure.set/difference\n        set1\n        intersection)\n      (clojure.set/difference\n        set2\n        intersection)\n      )))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 88, "code": "(comp (partial apply clojure.set/difference) (juxt clojure.set/union clojure.set/intersection))", "user": "58fdbf59e4b0438e51c2cfbc"}, {"problem": 88, "code": "(fn sym-diff\n  [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "59076082e4b047aa04b19956"}, {"problem": 88, "code": "reduce #((if (% %2) disj conj) % %2)", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b)\n                     (clojure.set/difference b a)))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 88, "code": "(fn [a b]\n  (let [diff-1 (clojure.set/difference a b), diff-2 (clojure.set/difference b a)]\n    (into #{} (concat diff-1 diff-2))\n  )\n)", "user": "5822b578e4b04b46fc4b0fa4"}, {"problem": 88, "code": "#(set (concat (filter (complement %1) %2) (filter (complement %2) %1)))", "user": "5908b36be4b047aa04b19982"}, {"problem": 88, "code": "(fn [a b] (let [u (clojure.set/union a b)\n                f #(or (and (contains? a %) (not (contains? b %)))\n                       (and (contains? b %) (not (contains? a %))))]\n            (set (filter #(f %) u))))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 88, "code": "(fn [x y] \n  (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x))\n  )", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 88, "code": "(fn symdiff [set1 set2]\n  (letfn [(xor [a b] \n               (and (or a b) (not (and a b))))]\n    (let [union (clojure.set/union set1 set2)]\n      (set (filter #(xor (contains? set1 %) (contains? set2 %)) union)))))", "user": "56326995e4b0bfe05bf117a3"}, {"problem": 88, "code": "(fn [x-set y-set]\n  (into (clojure.set/difference x-set y-set) (clojure.set/difference y-set x-set)))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 88, "code": "(fn [x y]\n  (let [r-non-union (fn [l r] (keep #(if (not-any? #{%} l) %) r))]\n    (set (concat (r-non-union x y) (r-non-union y x)))))", "user": "564c8e99e4b0284900eef674"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/union (clojure.set/difference y x) (clojure.set/difference x y))\n  )", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 88, "code": "(fn [set1 set2]\n(into #{}(concat (filter (fn [x] (not (some #(= x %) set2))) set1) (filter (fn [x] (not (some #(= x %) set1))) set2)))\n  )", "user": "59228b00e4b026ae38521281"}, {"problem": 88, "code": "(fn [set1 set2]\n  (set\n    (map first\n         (filter\n           (fn [[k v]]\n             (= v 1))\n           (frequencies (concat set1\n                                set2))))))", "user": "5922a513e4b026ae38521286"}, {"problem": 88, "code": "(fn [xs ys]\n  (clojure.set/union\n   (clojure.set/difference xs ys)\n   (clojure.set/difference ys xs)))", "user": "4db1b3951254ad5b4805fa6f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/difference \n   (clojure.set/union set1 set2)\n   (clojure.set/intersection set1 set2)))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "591f5124e4b09b4ee5954c45"}, {"problem": 88, "code": "#(if (or (= %1 #{}) (= %2 #{}))\n     (some (fn [x] (when (not= x #{}) x)) [%1 %2])\n     (->> (clojure.set/intersection %1 %2)\n          (clojure.set/difference (apply (partial conj %1 ) %2))\n          (filter (fn [x](not= x #{})))\n          set))", "user": "5823d3e6e4b051871117beb8"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into #{} (concat (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "591d9870e4b09b4ee5954c1b"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "592518bfe4b072a2710fce65"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n   (clojure.set/select #(not (contains? b %)) a)\n   (clojure.set/select #(not (contains? a %)) b)))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 88, "code": "#(set `(~@(% %2 %3) ~@(% %3 %2))) remove", "user": "58bcea23e4b0888cdc949d23"}, {"problem": 88, "code": "(fn sym-diff\n  [s1 s2]\n  (apply hash-set (filter #(not (and (s1 %) (s2 %))) (concat s1 s2))))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 88, "code": "(fn [x y]\n (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 88, "code": "#(clojure.set/difference\n (clojure.set/union        %1 %2)\n (clojure.set/intersection %1 %2))", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 88, "code": "(fn \n  [A B] \n  (into #{} \n        (filter \n         (complement (into #{} (filter A B))) (into A B))))", "user": "56449e4de4b0284900eef5f9"}, {"problem": 88, "code": "(fn f [x y]\n  (letfn [(diff [l r] (set (filter #(not (contains? r %)) l)))]\n    (set (concat (diff x y) (diff y x)))))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "59385840e4b02506e01a29c9"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "59368efbe4b02506e01a297d"}, {"problem": 88, "code": "(fn [a b]\n  (set (concat (filter (fn [x] (not (contains? b x))) a) (filter (fn [x] (not (contains? a x))) b))))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 88, "code": "(fn [s1 s2]\n  (loop [tmps1 s1 ans #{}]\n    (if (empty? tmps1)\n      (loop [tmps2 s2 newans ans]\n        (if (empty? tmps2)\n          newans\n          (if (contains? s1 (first tmps2))\n            (recur (rest tmps2) newans)\n            (recur (rest tmps2) (conj newans (first tmps2))))))\n      (if (contains? s2 (first tmps1))\n        (recur (rest tmps1) ans)\n        (recur (rest tmps1) (conj ans (first tmps1)))))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 88, "code": "(fn [s1 s2]\n  (loop [tmps1 s1 ans #{}]\n    (if (empty? tmps1)\n      (loop [tmps2 s2 newans ans]\n        (if (empty? tmps2)\n          newans\n          (if (contains? s1 (first tmps2))\n            (recur (rest tmps2) newans)\n            (recur (rest tmps2) (conj newans (first tmps2))))))\n      (if (contains? s2 (first tmps1))\n        (recur (rest tmps1) ans)\n        (recur (rest tmps1) (conj ans (first tmps1)) )) )))", "user": "59368ccae4b02506e01a2979"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5180af54e4b0e3fc13e244e9"}, {"problem": 88, "code": "(fn [s1 s2]\n  (loop [set1 (rest s1), set2 (rest s2), checker [(first s1) (first s2)], final #{}]\n    (if (empty? checker)\n      (if (nil? (first final))\n        (apply sorted-set (rest final))\n        (apply sorted-set final))\n      (if (or (not (empty? set1)) (not (empty? set2)))\n        (recur (rest set1) (rest set2) (conj checker (first set1) (first set2)) final)\n        (if (and (contains? s1 (first checker)) (contains? s2 (first checker)))\n          (recur set1 set2 (rest checker) final)\n          (recur set1 set2 (rest checker) (conj final (first checker))))))))", "user": "59369515e4b02506e01a297e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [in (clojure.set/intersection s1 s2)\n        in1 (clojure.set/difference s1 in)\n        in2 (clojure.set/difference s2 in)]\n    (clojure.set/union in1 in2)))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 88, "code": "(fn [set1 set2]\n    (set (concat\n      (filter #(not= nil %) (map #(if (= nil (set2 %)) %) set1))\n      (filter #(not= nil %) (map #(if (= nil (set1 %)) %) set2)))))", "user": "5913fde8e4b0163c97b36f13"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n    (clojure.set/difference b a)\n    (clojure.set/difference a b)))", "user": "591a6c9fe4b09b4ee5954bd6"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "59251947e4b072a2710fce69"}, {"problem": 88, "code": "#(let [keys (vec (filter %1 %2)),\n         all (set (concat %1 %2))]\n  (apply disj all keys) )", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 88, "code": "(fn symetric-set-diff [s1 s2]\n  (let [not-in-s1 (filter #(not (s1 %1)) s2)\n        not-in-s2 (filter #(not (s2 %1)) s1)]\n    (set (concat not-in-s1 not-in-s2))))", "user": "592518e8e4b072a2710fce67"}, {"problem": 88, "code": "(fn beda [x y]\n  (set (remove (clojure.set/intersection x y) (set(distinct (vec(concat x y)))))))", "user": "593910eae4b02506e01a29f4"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "59438419e4b060784b3b7929"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n     (clojure.set/difference a b)\n     (clojure.set/difference b a)\n  )\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 88, "code": "(fn simraz [a b]\n  (set (remove ((comp set filter) a b) (set (concat a b))))\n)", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 88, "code": "#(set \n  (concat \n  (filter (complement %1) %2)\n  (filter (complement %2) %1)))", "user": "55216aa5e4b0882d96d09192"}, {"problem": 88, "code": "#(into #{} (remove (clojure.set/intersection %1 %2) \n                  (clojure.set/union %1 %2)))", "user": "592518cde4b072a2710fce66"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/union \n    (clojure.set/difference x y)\n    (clojure.set/difference y x)))", "user": "593744abe4b02506e01a299b"}, {"problem": 88, "code": "(fn set-diff [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n(filter (complement sa) sb))))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "594263cbe4b060784b3b790a"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [union (loop [in s2\n                     out s1]\n                (if (empty? in) out (recur (rest in) (cons (first in) out))))\n        inter (loop [in s1\n                     out #{}]\n                (cond \n                 (empty? in) out\n                 (contains? s2 (first in)) (recur (rest in) (cons (first in) out))\n                 :else (recur (rest in) out)))]\n    (set\n      (loop [in (set union)\n             out #{}]\n        (cond\n         (empty? in) out\n         (contains? (set inter) (first in)) (recur (rest in) out)\n         :else (recur (rest in) (cons (first in) out)))))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 88, "code": "(fn [a b]\n   (letfn [(foo [x y] (reduce #(if (x %2) %1 (conj %1 %2)) #{} y))]\n     (set (concat (foo a b) (foo b a)))))", "user": "5935b010e4b04f87174def55"}, {"problem": 88, "code": "(fn [first-coll second-coll]\n  (let [diff (fn [a b] (filter identity (map #(when (not-any? (fn [e] (= e %1)) b) %1) a)))]\n    (apply sorted-set (concat (diff first-coll second-coll) (diff second-coll first-coll)))))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 88, "code": "(fn [col1 col2] \n  (let [u (clojure.set/union col1 col2)\n        i (clojure.set/intersection col1 col2)]                \n    (into #{} (filter #(not (contains? i %)) u))))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 88, "code": "#(into (apply disj %1 %2) (apply disj %2 %1))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "590088bfe4b0438e51c2d026"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)(clojure.set/difference %2 %1))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 88, "code": "(fn something [s1 s2]\n  (let [superset (into s1 s2)\n        join (clojure.set/intersection s1 s2)]\n    (clojure.set/difference superset join)))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 88, "code": "(fn [coll1 coll2]\n  (into \n   (clojure.set/difference coll1 coll2)\n   (clojure.set/difference coll2 coll1)))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 88, "code": "(fn [A B] \n  (set (clojure.set/union\n \t(remove #(contains? B %) A)\n \t(remove #(contains? A %) B))))", "user": "59473563e4b07ddc2dafad97"}, {"problem": 88, "code": "(fn [a b]\n  (letfn [(f [x y]\n            (filter #(nil? (x %)) y))]\n    (set (concat\n           (f a b)\n           (f b a)))))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5961e8d0e4b066ee0a44b0a8"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b) )  )", "user": "59551e04e4b066ee0a44af20"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 88, "code": "(fn [c1 c2]\n  (clojure.set/union (clojure.set/difference c1 c2) (clojure.set/difference c2 c1)))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 88, "code": "#(set (concat (remove % %2) (remove %2 %)))", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 88, "code": "(fn [a b]\n    (let [u (clojure.set/union a b)\n          i (clojure.set/intersection a b)]\n      (clojure.set/difference u i)))", "user": "57b9f35be4b0fbc9809a27f9"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5965eb8de4b069c0a1a19796"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 88, "code": "#(into (into #{} (doall (for [x % :when (not (contains? %2 x))] x)))\n                               (doall (for [x %2 :when (not (contains? % x))] x)))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "595d224de4b066ee0a44b016"}, {"problem": 88, "code": "(fn [x y]\n  (set\n   (map\n    #(get % 0)\n    (filter\n     #(= 1 (count (get % 1)))\n     (group-by\n      identity\n      (concat x y))))))\n\n\n;(fn set-diff [sa sb]\n;  (set\n;    (concat\n;      (filter (complement sb) sa)\n;      (filter (complement sa) sb))))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 88, "code": "(fn \n  [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 88, "code": "(fn [s1 s2]\n    (clojure.set/union\n     (clojure.set/difference s1 s2)\n     (clojure.set/difference s2 s1)))", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 88, "code": "(fn[set1 set2](#(clojure.set/difference %1 %2) (clojure.set/union set1 set2) (clojure.set/intersection set1 set2)))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 88, "code": "(fn[list1 list2] \n  (set\n  \t(sort \n   \t\t(concat (filter #(not (contains? list2 %)) list1) \n            \t(filter #(not (contains? list1 %)) list2)\n    \t)\n  \t)\n  )\n)", "user": "571172ece4b09c608db70446"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1) )", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 88, "code": "(fn solution88\n  [s1 s2]\n  (let [union (clojure.set/union s1 s2)\n        inter (clojure.set/intersection s1 s2)]\n    (clojure.set/difference union inter)))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2)\n                   \t\t\t   (clojure.set/difference s2 s1)))", "user": "56483f45e4b0284900eef62b"}, {"problem": 88, "code": "(fn sym [a b] (set (remove (clojure.set/intersection a b) (clojure.set/union a b))))", "user": "58866b4fe4b0f1effa3b76d4"}, {"problem": 88, "code": "(fn [a b]\n  (set (reverse (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))))", "user": "5935151ee4b072a2710fd084"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5978c844e4b01722bebd4d18"}, {"problem": 88, "code": "(fn [a b] (set (remove #(and (a %) (b %)) (clojure.set/union a b))))", "user": "4fb1d7ace4b081705acca281"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)) )", "user": "596f6683e4b069c0a1a19877"}, {"problem": 88, "code": "#(apply clojure.set/difference ((juxt clojure.set/union clojure.set/intersection) %1 %2))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 88, "code": "(fn symmetric-difference88 [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "user": "5398d042e4b0b51d73faaf00"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  \"\"\"Find a symmetric difference between the two sets s1 and s2\"\"\"\n  (into #{} \n        (remove #(and (contains? s1 %) (contains? s2 %)) \n                (distinct (concat s1 s2)))))", "user": "573f3ccfe4b05c31a32c083f"}, {"problem": 88, "code": "#(into #{} (concat (remove %1 %2) (remove %2 %1)))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 88, "code": "(fn sk-sym-diff [left right]\n  (clojure.set/union (clojure.set/difference right left) (clojure.set/difference left right)))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 88, "code": "(fn [& sets] (clojure.set/difference (apply clojure.set/union sets)\n                                     (apply clojure.set/intersection sets)))", "user": "5703a557e4b08d47c97781f4"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 88, "code": "(fn [a b]\n  (let [sum (clojure.set/union a b)\n        inters (clojure.set/intersection a b)]\n    (clojure.set/difference sum inters)))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 88, "code": "(fn [s1 s2]\n    (let [d1 (clojure.set/difference s1 s2)\n          d2 (clojure.set/difference s2 s1)]\n        (clojure.set/union d1 d2)))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1) )", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 88, "code": ";(fn [xs ys] (reduce #(if (contains? % %2) (disj % %2) (conj % %2))  xs ys))\n;(fn [xs ys] (into (clojure.set/difference ys xs) (clojure.set/difference xs ys)))\n#(into (apply disj %1 %2) (apply disj %2 %1))", "user": "50aa777fe4b056ee01935866"}, {"problem": 88, "code": "(fn function-88\n\n  [set1 set2]\n  (set (remove #(= (set (for [a set1 b set2 :when (= a b)] a))\n                   (set (cons % (for [a set1 b set2 :when (= a b)] a))))\n               (set (concat set1 set2)))))", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 88, "code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 88, "code": "(fn [set1, set2]\n  (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2)))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 88, "code": "(fn symmetric-difference [a b]\n  (if (empty? a)\n    b\n    ;; else, a is nonempty.\n    (let [x (first a)\n          a* (rest a)]\n      (if (contains? b x)\n        ;; remove shared element.\n        (recur a* (disj b x))\n        ;; move non-shared element from a to b.\n        (recur a* (conj b x))))))", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b)\n                     (clojure.set/difference b a)))", "user": "57614a42e4b0994c1922fb85"}, {"problem": 88, "code": "#(set (keep (fn [[k v]] (if (= 1 v) k nil)) (frequencies (concat % %2))))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 88, "code": "(fn [a b]\n    (set (concat\n          (apply disj a b)\n          (apply disj b a))))", "user": "50c95c4fe4b0bed41a12298f"}, {"problem": 88, "code": "(fn [s t]\n  (set\n   (remove\n    #((clojure.set/intersection\n       s t) %)\n    (clojure.set/union s t))))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "58cf8f97e4b03c36ff7e58b7"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "59a24c92e4b066c664927d20"}, {"problem": 88, "code": "(fn [s1 s2]\n\t(clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 88, "code": "(fn k [a b]\n  (let [dif (fn [x y] (filter (fn [e] (not (contains? x e))) y))]\n    (set (concat (dif b a) (dif a b)))))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 88, "code": "(fn [a b]\n   (let* [r1 (set (filter #(not (nil? %))\n                          (for [ea a]\n                            (when (not (some #{ea} b))\n                              ea))))\n          r2 (set (filter #(not (nil? %))\n                          (for [eb b]\n                            (when (not (some #{eb} a))\n                              eb))))\n          r (reduce conj r1 r2)]\n    r))", "user": "59a39440e4b066c664927d40"}, {"problem": 88, "code": "(fn [X Y]\n  (clojure.set/difference (clojure.set/union X Y) (clojure.set/intersection X Y)))", "user": "59a72effe4b066c664927d94"}, {"problem": 88, "code": "#(let [i  (clojure.set/intersection %1 %2)\n     d1 (clojure.set/difference %1 i)\n     d2 (clojure.set/difference %2 i)]\n (clojure.set/union d1 d2))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 88, "code": "#(let [d clojure.set/difference] (into (d % %2) (d %2 %)))", "user": "51823a97e4b0f2adb733651e"}, {"problem": 88, "code": "#(set\n  (reduce conj\n  \t\t(filter (fn [x] ((comp not contains?) %2 x) ) %1) \n\t    (filter (fn [x] ((comp not contains?) %1 x) ) %2)\n   )\n  \n  )", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 88, "code": "(fn\r\n[a b]\r\n(clojure.set/difference\r\n(clojure.set/union a b)\r\n(clojure.set/intersection a b))\r\n)", "user": "56f514cee4b046a417f92068"}, {"problem": 88, "code": "(fn [a b] (set (filter #(not (and (a %) (b %))) (into a b))))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 88, "code": "(fn  [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 88, "code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 88, "code": "#(set (remove (set (filter %1 %2)) (into %1 %2)))", "user": "5926c254e4b072a2710fceb8"}, {"problem": 88, "code": "(fn [x y] (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "59089229e4b047aa04b1997c"}, {"problem": 88, "code": "(fn [a b]\n\t(clojure.set/difference\n\t\t(clojure.set/union a b)\n\t\t(clojure.set/intersection a b)))", "user": "598af379e4b02b9968b84ce6"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "593ab583e4b069cdc2982b57"}, {"problem": 88, "code": "#(set (clojure.set/union (remove % %2) (remove %2 %)))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 88, "code": "(fn [a b]\n        (clojure.set/union (clojure.set/difference a b)\n                           (clojure.set/difference b a)))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 88, "code": "(fn symmetric-difference [s1 s2]\n  (into #{} (concat (filter #(not (s2 %)) s1) (filter #(not (s1 %)) s2))))", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 88, "code": "(fn [x y]\n  (->>\n   (concat (clojure.set/difference x y) (clojure.set/difference y x))\n   (into #{})))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 88, "code": "(fn f\n    ([x y]\n     (set (into (filter #(not (contains? x %)) y)\n           (filter #(not (contains? y %)) x) ))\n     ))", "user": "596d630ae4b069c0a1a19846"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 88, "code": "#(clojure.set/union\n(clojure.set/difference %1 %2)\n(clojure.set/difference %2 %1)\n)", "user": "54c98ac0e4b045293a27f679"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "59358f74e4b04f87174def52"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (filter %1 %2))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 88, "code": "(fn [a b] (let [complete (clojure.set/union a b)\n                inter (clojure.set/intersection a b)]\n            (clojure.set/difference complete inter)))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "572010a4e4b0c5bde472c08c"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "59a31c55e4b066c664927d34"}, {"problem": 88, "code": "(fn [a b]\n  (let [union        (clojure.set/union a b)\n        intersection (clojure.set/intersection a b)]\n    (clojure.set/difference union intersection)))", "user": "59d9186be4b0ef0a1e9b5c50"}, {"problem": 88, "code": "(fn [a b]\n  (letfn [(f [n m] (loop [n n o #{}] (if (empty? n) o (recur (rest n) (if (nil? (some #{(first n)} m)) (conj o (first n)) o)))))]\n    (into (f a b) (f b a))))", "user": "59ddae03e4b01968742fed65"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "4fe49706e4b0e8f79898feb7"}, {"problem": 88, "code": "(fn [& ss]\n  (set\n    (keep #(when (= 1 (second %)) (first %))\n          (frequencies (apply concat ss)))))", "user": "559057c4e4b027778923766e"}, {"problem": 88, "code": "(fn [s1 s2] (set (concat (filter (complement s2) s1) (filter (complement s1) s2))))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 88, "code": "(fn symmetric-diference [x y]\n  (set\n    (concat (clojure.set/difference x y) (clojure.set/difference y x))))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 88, "code": "(fn [x y] \n  (set (concat (filter #(not (contains? x %))y) (filter #(not (contains? y %)) x))))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 88, "code": "(fn \n    [st1 st2]\n  (loop [set1 st1\n         set12 ()\n         st3   st2]\n    (if (zero? (count set1))\n      (if (zero? (count st3))\n        (set (reverse  (sort  set12)))\n        (recur  set1\n               (if (not (contains? st1 (first st3)))\n                 (cons (first st3) set12)\n                 set12 )\n                (rest st3)))\n      (recur (rest set1)\n             (if (not (contains? st2 (first set1)))\n               (cons (first set1) set12)\n               set12\n               )\n             st3 ))))", "user": "59deba46e4b01968742fed7f"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 88, "code": "(fn f\n  [a b]\n  (cond\n    (empty? a) b\n    (empty? b) a\n    :else (loop [a a\n                 c (first b)\n                 b (rest b)]\n            (cond\n              (empty? b) (if (empty? (filter #(= c %) a))\n                           (into #{} (sort (concat a (list c))))\n                           (into #{} (sort (remove #(= c %) a))))\n              (empty? (filter #(= c %) a)) (recur (concat a (list c)) (first b) (rest b))\n              :else (recur (remove #(= c %) a) (first b) (rest b))\n              ))))", "user": "59e778aae4b0249b72820716"}, {"problem": 88, "code": "(fn symmetric\n  [x y]\n  (set (for [i (concat x y) \n                   :when (not= (x i) (y i))] i)))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 88, "code": "(fn [a b] \n  (clojure.set/difference \n   (clojure.set/union a b) \n   (clojure.set/intersection a b)))", "user": "58cfbd7ae4b03c36ff7e58ba"}, {"problem": 88, "code": "(fn difference [set1 set2]\n  (set (concat (remove set1 set2) (remove set2 set1)))\n)", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 88, "code": "(fn symDif [x y]\n  (set (concat (filter #(not (contains? x %)) y) (filter #(not (contains? y %)) x))))", "user": "59e55cc8e4b08badc2a0c555"}, {"problem": 88, "code": "(fn Symmetric-Difference\n  [lstA lstB]\n  (apply sorted-set (concat\n                      (filter (complement lstB) lstA)\n                      (filter (complement lstA) lstB))))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 88, "code": "(fn [list1 list2] \n  (set (concat \n        (filter #(not (contains? list1 %))list2) \n        (filter #(not (contains? list2 %)) list1))))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 88, "code": "(fn set-diff [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "59e9f03be4b0249b72820752"}, {"problem": 88, "code": "(fn sym-dif\n  [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) \n                     (clojure.set/difference s2 s1)))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "59ea287ee4b0249b72820760"}, {"problem": 88, "code": "(fn sdiff [a b]\n  (clojure.set/union \n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "59e95cafe4b0249b7282074b"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (let [intersection (filter s1 s2)]\n    (set (concat (filter #(not ((set intersection) %)) s1)\n                 (filter #(not ((set intersection) %)) s2)))))", "user": "59ea85e4e4b0249b72820767"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 88, "code": "(fn [set1 set2]\n  (let [not-in-set1 (filter #(not (set1 %1)) set2)\n        not-in-set2 (filter #(not (set2 %1)) set1)]\n    (set (concat not-in-set1 not-in-set2))))", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 88, "code": "(fn sym [lst1 lst2]\n  (set\n    (concat\n      (filter (complement lst2) lst1)\n      (filter (complement lst1) lst2))))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 88, "code": "(fn algo [lst1 lst2]\n   (clojure.set/union (clojure.set/difference lst1 lst2) (clojure.set/difference lst2 lst1))\n   )", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "59e68254e4b0249b728206fc"}, {"problem": 88, "code": "(fn [a b]\n  (let [a-b (clojure.set/difference a b)\n        b-a (clojure.set/difference b a)]\n    (clojure.set/union b-a a-b)\n))", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 88, "code": "(fn sdiff [a b]\n  (clojure.set/union \n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "59ed01ede4b0249b7282079a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 88, "code": "(fn [x, y] (set (concat (reduce disj x y) (reduce disj y x))))", "user": "59e62655e4b08badc2a0c568"}, {"problem": 88, "code": "(fn [a b] \n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "51000111e4b00d7ad4cab15e"}, {"problem": 88, "code": "(fn [set1 & [set2]]\n  (clojure.set/union \n    (clojure.set/difference set1 set2)\n    (clojure.set/difference set2 set1)))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 88, "code": "#(->> (concat (remove %1 %2) (remove %2 %1)) \n         set)", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/difference\n   (clojure.set/union set1 set2)\n   (clojure.set/intersection set1 set2)))", "user": "4f5d5d59e4b0030a34fb2b39"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/union\n    (clojure.set/difference set1 set2)\n    (clojure.set/difference set2 set1)))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "59ea0944e4b0249b72820758"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 88, "code": "(fn[s1 s2]\n  (let [not-in-s1 (filter #(not (s1 %1)) s2)\n        not-in-s2 (filter #(not (s2 %1)) s1)]\n    (set (concat not-in-s1 not-in-s2))))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 88, "code": "(fn [set1 set2] (set (remove #(and (contains? set1 %) (contains? set2 %)) (clojure.set/union set1 set2))))", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                     (clojure.set/difference %2 %1))", "user": "566e87cfe4b0a866af6896dc"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y ) (clojure.set/difference y x)))", "user": "581bdf83e4b04b46fc4b0ee0"}, {"problem": 88, "code": "(fn sym-diff [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union \n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1) ))", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b)\n                          (clojure.set/intersection a b)))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 88, "code": "(fn [xs ys]\n (let [us (clojure.set/union xs ys)\n       is (clojure.set/intersection xs ys)]\n  (clojure.set/difference us is)))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5a022949e4b01bb0ae8afd60"}, {"problem": 88, "code": "(fn \n  [s1 s2]\n  (apply clojure.set/difference \n         ((juxt clojure.set/union clojure.set/intersection) s1 s2)))", "user": "59f91b99e4b0ca45a743a33a"}, {"problem": 88, "code": "(fn [s1 s2] (into #{} (concat (filter #(not (s2 %)) s1) (filter #(not (s1 %)) s2))))", "user": "59c8ffe6e4b0a024fb6ae56c"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "59e5b6a1e4b08badc2a0c55b"}, {"problem": 88, "code": "(fn \n  [A B] (set (concat (filter (complement #(contains? B %)) A) (filter (complement #(contains? A %)) B))))", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2)(clojure.set/intersection % %2))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 88, "code": "(fn\n  [a b]\n  (let [ans (clojure.set/difference a b)\n        ans2 (clojure.set/difference b a)]\n    (clojure.set/union ans ans2)))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5a0b9fc0e4b04bbd27e6d992"}, {"problem": 88, "code": "(fn [a b]\n    (clojure.set/union\n      (clojure.set/difference a b)\n      (clojure.set/difference b a)))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 88, "code": "(fn [a b] (set (concat (filter #(not (a %)) b) (filter #(not (b %)) a))))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 88, "code": "(fn [seq1 seq2] (let [combined (concat seq1 seq2)]\n                    (set (filter #(= 1 ((frequencies combined) %)) combined))))", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 88, "code": "(fn [s1 s2] \n   (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))\n  )", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "59f58103e4b0966464fe6ac0"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "529735cbe4b02ebb4ef7503c"}, {"problem": 88, "code": "(fn [x y]\n  (letfn [(rec [x y]\n            (if (empty? x)\n              y\n              (let [item (first x)]\n                (if (contains? y item)\n                    (rec (drop 1 x) (disj y item))\n                    (rec (drop 1 x) (conj y item))))))]\n    (rec x y)))", "user": "51427a8be4b0b50abeb46b37"}, {"problem": 88, "code": "(fn [a b]\n  (->> (into a b) \n       (map (juxt a b))\n       (map #(remove nil? %))\n       (filter #(= 1 (count %)))\n       (mapcat identity)\n       (set)))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 88, "code": "(fn [s1 s2] \n  (clojure.set/difference \n   (clojure.set/union s1 s2) \n   (clojure.set/intersection s1 s2))\n  )", "user": "55916764e4b0604b3f94d57b"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [s1e (filter #(not (s2 %)) s1)\n        s2e (filter #(not (s1 %)) s2)]\n    (reduce into #{} [s1e s2e])))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 88, "code": "(comp (partial apply clojure.set/difference) (juxt clojure.set/union clojure.set/intersection))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 88, "code": "(fn [x y]\n  (reduce (fn [a b]\n            (if (not (contains? a b))\n              (conj a b)\n              (disj a b))) \n          x y))", "user": "574b4f3ee4b02ea114799207"}, {"problem": 88, "code": "(fn symmetric-difference [set-a set-b]\n  (let [union (clojure.set/union set-a set-b)\n        intersection (clojure.set/intersection set-a set-b)]\n    (clojure.set/difference union intersection)))", "user": "5a06c154e4b01bb0ae8afdce"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 88, "code": "#(let [d  (clojure.set/intersection %1 %2)\n           a  (clojure.set/difference %1 d)\n           b  (clojure.set/difference %2 d)]\n       (clojure.set/union a b))", "user": "5a18488ee4b0ff51aa4b31e5"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %2 %1) (clojure.set/difference %1 %2))", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5a1149ace4b04bbd27e6da26"}, {"problem": 88, "code": "(fn sym [s1 s2]\n  (reduce disj (into s1 s2)\n         (for [x s1 y s2 :when (= x y)] x)))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 88, "code": "(fn [xs ys] (into #{} (concat (clojure.set/difference xs ys) (clojure.set/difference ys xs))))", "user": "5830377ee4b051871117c004"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 88, "code": "(fn [set1 set2]\n    (clojure.set/union (clojure.set/difference set1 set2)\n                       (clojure.set/difference set2 set1)))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference\n             (clojure.set/union s1 s2)\n             (clojure.set/intersection s1 s2)))", "user": "5a0a04eee4b0eab8c0448935"}, {"problem": 88, "code": "(fn [s1 s2]\n   (set (remove (fn [v] (and (s1 v) (s2 v)))\n        (concat s1 s2))))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 88, "code": "(fn sym-diff [s1 s2] \n    (set (concat (remove s1 s2) (remove s2 s1))))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 88, "code": "(fn [x y]\n    (let [r_xy (loop [s_x x r #{}]\n                     (if (empty? s_x)\n                         r\n                         (recur (rest s_x) (if (contains? y (first s_x)) r (conj r (first s_x))))))\n          r_yx (loop [s_y y r r_xy]\n                     (if (empty? s_y)\n                         r\n                         (recur (rest s_y) (if (contains? x (first s_y)) r (conj r (first s_y))))))]\n        r_yx))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 88, "code": "(fn[seq1 seq2]\n  (loop[s1 seq1 s2 seq2 differenceSet #{}]\n    (if (or(empty? s1) (empty? s2)) \n      (set(concat s1 s2 differenceSet))\n      (if (some #(= (first s1) %) s2) \n        (recur (rest s1) (remove #(=(first s1) %) s2) differenceSet)\n        (recur (rest s1) s2 (cons (first s1) differenceSet))))))", "user": "59c77511e4b0a024fb6ae545"}, {"problem": 88, "code": "(fn set-diff [x y]\n   (set \n    (concat (filter (complement x) y)\n            (filter (complement y) x))))", "user": "52faf67ce4b047fd55837005"}, {"problem": 88, "code": "(fn sym-diff [set1 set2]\n  (set (concat\n    (filter #(not (contains? set2 %)) set1)\n    (filter #(not (contains? set1 %)) set2))))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n    (clojure.set/difference s1 s2) \n    (clojure.set/difference s2 s1)))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 88, "code": "(fn [a b]\n   (let [coll1 (for [element a\n                     :when (not (contains? b element))]\n                 element)\n         coll2 (for [element b\n                     :when (not (contains? a element))]\n                 element)\n         both-colls (concat coll1 coll2)]\n     (set both-colls)))", "user": "58a34442e4b02bd94d917ef2"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference\n           (clojure.set/union a b)\n           (clojure.set/intersection a b)))", "user": "5a409d77e4b0447ef91cc5d3"}, {"problem": 88, "code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 88, "code": ";(fn [a b] (into #{} (mapcat\n;  #()\n;  a b)))\n#(-> #{}\n  (into (filter (complement %2) %1))\n  (into (filter (complement %1) %2)))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) \n                    (clojure.set/difference %2 %1))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 88, "code": "(fn [set1 set2]\n  (set (concat (remove set1 set2)\n               (remove set2 set1))))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 88, "code": "(fn [& args]\n  (set \n    (keep (fn [y] (if (= 1 (count (last y))) (first y))) \n      (group-by identity (apply concat args)))))", "user": "5628f33ce4b00e49c7cb47f3"}, {"problem": 88, "code": "(fn [a b]\n  (set (concat (filter #(not (a %)) b)\n               (filter #(not (b %)) a))))", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 88, "code": "(fn [x y] (set (concat (filter #(not(contains? x %)) y) (filter #(not(contains? y %)) x))))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)  ))", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 88, "code": "#(set (concat (remove %1 %2) (remove %2 %1)))", "user": "5a546344e4b05d388ecb6c27"}, {"problem": 88, "code": "(fn [x y]\n  (set \n   (concat \n   (filter (complement x) y)\n   (filter (complement y) x))))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 88, "code": "(fn\n  [x y]\n  (into #{}\n        (concat (clojure.set/difference x y)\n                (clojure.set/difference y x))))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 88, "code": "(fn diff [set1, set2] \n  (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))", "user": "5a577954e4b05d388ecb6c68"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "59dfb8dbe4b08badc2a0c4da"}, {"problem": 88, "code": "(fn ok [s1 s2]\n (let [dif clojure.set/difference]\n   (clojure.set/union (dif s1 s2) (dif s2 s1))))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 88, "code": "(fn [s1 s2 ] (set (concat (filter (complement s1) s2)\n                    (filter (complement s2) s1))))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 88, "code": "(fn [a b]\n  (let [a-b (clojure.set/intersection a b)\n        a-diff (clojure.set/difference a a-b)\n        b-diff (clojure.set/difference b a-b)]\n    (clojure.set/union a-diff b-diff)))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 88, "code": "(fn [a b] (into #{} (filter #(not= (a %) (b %)) (concat (seq a) (seq b)))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 88, "code": "(fn [a b]\n    (set (remove #(and (a %)\n                       (b %)) (into a b))))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (letfn [(diff [a b]\n            (set (filter #(not (contains? b %)) a)))]\n    (set (concat (diff s1 s2) (diff s2 s1)))))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2)\n(clojure.set/intersection %1 %2))", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 88, "code": "(fn [xs ys] \n    (set (concat (filter #(not (.contains xs %)) ys) (filter #(not (.contains ys %)) xs)))\n  )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 88, "code": "(fn [s1 s2]\n  (apply disj (into s1 s2) (clojure.set/intersection s1 s2)))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %1))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 88, "code": "(fn f\n  ([a b] (f a b #{}))\n  ([a b r] (if \n             (empty? a)\n             (into r b)\n             (recur\n              (rest a)\n              (if (contains? b (first a)) (set (remove #(= % (first a)) b)) b)\n              (if\n                (not (contains? b (first a))) \n                (conj r (first a))\n                r)))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "55952410e4b0c79f6e1db962"}, {"problem": 88, "code": "(fn [a b] (reduce into #{} [(filter #(not (a %)) b) (filter #(not (b %)) a)]))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %2 %1) (clojure.set/difference %1 %2))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 88, "code": "(fn [x y]\n  (if (= y #{})\n    x\n    (apply conj (apply disj x y) (apply disj y x))\n    ))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 88, "code": "(fn [a b] (set (concat \n                (remove #(contains? b %) a)\n                (remove #(contains? a %) b))))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 88, "code": "(fn r [a b]\n  (let [c (set (filter a b)) ]\n    (apply sorted-set (concat (remove c a) (remove c b)))))", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5a625bc2e4b0512ff01cd989"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 88, "code": "(fn sym-diff [a b]\n  (set (remove (clojure.set/intersection a b) (clojure.set/union a b))))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 88, "code": "(fn [%1 %2]\n  (->>\n    (concat (filter (fn [c] (not (%1 c)))   %2)   (filter (fn [c] (not (%2 c)))   %1) )\n    (set)\n    )\n  )", "user": "5a71c89ee4b0512ff01cda93"}, {"problem": 88, "code": "(fn symmetric-difference2 [a b]\n  (clojure.set/union (clojure.set/difference a b)\n                     (clojure.set/difference b a)))", "user": "579f89d5e4b05302be0b72ff"}, {"problem": 88, "code": "(fn [a b] \n  (clojure.set/difference (clojure.set/union a b) \n                          (clojure.set/intersection a b)))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference % %2) (clojure.set/difference %2 %)))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 88, "code": "(fn [xs ys]\n  (into #{} (concat (filter #(not (contains? ys %)) xs) (filter #(not (contains? xs %)) ys))))", "user": "4f43894ee4b0d7d3c9f3fd21"}, {"problem": 88, "code": "#(let [dis-vec (distinct (concat (into [] %1) (into [] %2)))]\n   (set (for [x dis-vec :when (or (and (contains? %1 x) (not (contains? %2 x)))\n                                  (and (not (contains? %1 x)) (contains? %2 x)))] x)))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 88, "code": "(fn my-sym-diff\n  [a b]\n  (let [l (reduce #(if (contains? b %2) %1 (conj %1 %2)) [] a)\n        r (reduce #(if (contains? a %2) %1 (conj %1 %2)) [] b)]\n    (set (into l r))))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 88, "code": "(fn sdiff [s1 s2]\n  (set\n    (map first\n       (filter\n         (fn [[k v]] (= v 1))\n         (frequencies (concat s1 s2))))))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 88, "code": "(fn symmetric-diff [seta setb]\n  (set (clojure.set/union \n   (filter #(not (contains? setb %)) seta)\n   (filter #(not (contains? seta %)) setb))))", "user": "5a388675e4b001c08efc0ca2"}, {"problem": 88, "code": "(fn [A B] (let [d clojure.set/difference] (into (d B A) (d A B))))", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "594266cfe4b060784b3b790b"}, {"problem": 88, "code": "(fn [a b] (let [c [a b]\n                 d [b a]\n                 xs [c d]]\n             (set(mapcat #(apply clojure.set/difference %) xs))\n             ))", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 88, "code": "(fn symmetric [a b]\n  (set (filter\n         #(not (nil? %))\n         (concat\n           (for [j b] (if (not (contains? a j)) j))\n           (for [i a] (if (not (contains? b i)) i))))))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 88, "code": "(fn [x y]\n  (into #{} (let [z (into #{} (concat x y))]\n              (for [n z\n                    :when (or (not (contains? x n))\n                              (not (contains? y n)))]\n                n))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/union\n   (clojure.set/difference set1 set2)\n   (clojure.set/difference set2 set1)))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 88, "code": "#(clojure.set/difference (set (concat %1 %2)) (clojure.set/intersection %1 %2))", "user": "5a95e50be4b0d174b936c760"}, {"problem": 88, "code": "#(clojure.set/difference (into %1 %2) (clojure.set/intersection %1 %2))", "user": "5a75da49e4b0512ff01cdacf"}, {"problem": 88, "code": "(fn [col1 col2]\n  (into (clojure.set/difference col1 col2) \n        (clojure.set/difference col2 col1)))", "user": "5a912080e4b002d099cae6ea"}, {"problem": 88, "code": "(fn diff [s1 s2]\n  (set (concat \n        (remove s1 s2)\n        (remove s2 s1))))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 88, "code": "(fn [a b]\n (set (concat (filter #(false? (contains? b %)) a) (filter #(false? (contains? a %)) b)))\n)", "user": "5a984657e4b0d174b936c78a"}, {"problem": 88, "code": "(fn [a b] (set (concat (remove a b) (remove b a))))", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 88, "code": "(fn difference\n  [s1 s2]\n  (cond\n    (empty? s2)\n    (into #{} s1)\n    (some true? (map #(= (first s2) %) s1))\n    (difference (remove #(= (first s2) %) s1) (rest s2))\n    :else\n    (difference (cons (first s2) s1) (rest s2))))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 88, "code": "#(clojure.set/union \n  (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 88, "code": "(fn my-symmetric-diff [set1 set2]\n  (let [i-section (clojure.set/intersection set1 set2)]\n    (clojure.set/union\n     (clojure.set/difference set1 i-section)\n     (clojure.set/difference set2 i-section)\n     )))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 88, "code": "(fn [as bs]\n  (into #{} (concat \n              (filter (fn [a] ((complement contains?) bs a)) as)\n              (filter (fn [b] ((complement contains?) as b)) bs)\n              )))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 88, "code": "(fn\n  [a b]\n  (set (concat (filter #(not (a %)) b) (filter #(not (b %)) a))))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 88, "code": "(fn [sA sB]\n  (clojure.set/difference\n    (clojure.set/union sA sB)\n    (clojure.set/intersection sA sB)))", "user": "5a94a38ce4b0d174b936c73e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 88, "code": "(fn symmetricDifference\n  [set1 set2]\n  (let [s1 (map #(cond\n                   (nil? (get set2 %)) %\n                   :else\n                   nil) set1)\n        s2 (map #(cond\n                   (nil? (get set1 %)) %\n                   :else\n                   nil) set2)]\n    (disj (set (concat s1 s2)) nil)))", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [\n        diff (fn [ss1 ss2] (reduce (fn [a b] (if-not (contains? ss2 b) (conj a b) a)) #{} ss1))\n        ]\n    (clojure.set/union (diff s1 s2) (diff s2 s1))\n  )\n)", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 88, "code": "#(let [a % b %2]\n (clojure.set/union\n  (clojure.set/difference a b)\n  (clojure.set/difference b a)))", "user": "5a984616e4b0d174b936c789"}, {"problem": 88, "code": "#(set\n      (concat\n       (remove (partial contains? %1) %2)\n       (remove (partial contains? %2) %1)))", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 88, "code": "#(clojure.set/union \n  (clojure.set/difference %1 %2) \n  (clojure.set/difference %2 %1))", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 88, "code": "(fn sym-diff\n  [s1 s2]\n\t\n (set (concat (filter #(not (s1 %)) s2) (filter #(not (s2 %)) s1))))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 88, "code": "(fn [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 88, "code": "(fn set-diff \n  [sa sb]\n  (set (concat (filter (complement sb) sa) (filter (complement sa) sb))))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) \n                    (clojure.set/difference %2 %1)\n                    )", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 88, "code": "(fn difference [x y]\n  (set (concat (filter (complement y) x) (filter (complement x) y))))\n\n;Complement: eturns the contrary to the value example if true -> false | false -> true\n;https://clojuredocs.org/clojure.core/complement", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 88, "code": "(fn [set1 set2]\n  (set (concat (apply disj set1 set2) (apply disj set2 set1))))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5a99b861e4b0d174b936c7ad"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5908882de4b047aa04b19979"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference %1 %2)\n              (clojure.set/difference %2 %1)))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 88, "code": "(fn [x y]\n    (set\n      (concat\n        (filter (complement x) y)\n        (filter (complement y) x)\n      )\n    )\n  )", "user": "59021fede4b0438e51c2d04d"}, {"problem": 88, "code": "(fn \n  [set1 set2]\n  (->>\n   (list (clojure.set/difference set1 set2) (clojure.set/difference set2 set1))\n   (apply clojure.set/union)))", "user": "5aabd34fe4b073f177442565"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/union\n                    (clojure.set/difference set1 set2) \n                    (clojure.set/difference set2 set1)))", "user": "5a593521e4b05d388ecb6c93"}, {"problem": 88, "code": "#(set (concat\n       (for [x %1 :when (not (%2 x))] x)\n       (for [x %2 :when (not (%1 x))] x)))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 88, "code": "#(set (concat (filter (complement %1) %2) (filter (complement %2) %1)))", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "56a37ccee4b0542e1f8d14cb"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2)\n                         (clojure.set/intersection %1 %2))", "user": "554e4d65e4b00713264bd993"}, {"problem": 88, "code": "(fn [x y]\n  (loop [a (concat x y)\n         r #{}]\n    (if (empty? a)\n      r\n      (let [cx (contains? x (first a))\n            cy (contains? y (first a))]\n        (cond\n          (and cx cy) (recur (rest a) r)\n          (or cx cy) (recur (rest a) (conj r (first a)))\n          :else (recur (rest a) r))))))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5ab9eeade4b073f17744269b"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5abeb697e4b073f177442725"}, {"problem": 88, "code": "(fn sym-dif [a b]\n  (letfn [(dif [x y] (filter #(not (contains? x %)) y))]\n    (into #{} (concat (dif a b) (dif b a)))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5aa8f753e4b0d174b936c8d9"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat\n    (filter #(not (contains? s2 %)) s1)\n    (filter #(not (contains? s1 %)) s2))))", "user": "5ab5f60be4b073f177442643"}, {"problem": 88, "code": "(fn symmetric-def\n  [setA setB]\n  (clojure.set/union (clojure.set/difference setA setB) (clojure.set/difference setB setA)))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 88, "code": "(fn [& xs]\n  (apply clojure.set/difference\n         (apply (juxt clojure.set/union\n                      clojure.set/intersection)\n                xs)))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 88, "code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 88, "code": "(fn symm-diff\n  [set-1 set-2]\n  (clojure.set/difference\n   (clojure.set/union set-1 set-2)\n   (clojure.set/intersection set-1 set-2)))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 88, "code": "(fn [x y]\n   (into #{} (into (filter #(not (contains? x %1)) y) (filter #(not (contains? y %1)) x)))\n   )", "user": "5ab170c2e4b073f1774425cb"}, {"problem": 88, "code": "(fn [a b] \n  (let [a-b (clojure.set/difference a b)\n        b-a (clojure.set/difference b a)] \n    (clojure.set/union a-b b-a)))", "user": "5abbbd46e4b073f1774426db"}, {"problem": 88, "code": "#(into #{} (remove (clojure.set/intersection %1 %2) (clojure.set/union %1 %2)))", "user": "5acd08eee4b0e27600da7822"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference % %2) (clojure.set/difference %2 %)))", "user": "4ed90014535d10e5ff6f52fe"}, {"problem": 88, "code": "(fn diff [a b]\n  (clojure.set/union (clojure.set/difference a b)\n                     (clojure.set/difference b a)))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 88, "code": "(fn [s1 s2 & sn] (clojure.set/difference (apply clojure.set/union s1 s2 sn) (apply clojure.set/intersection s1 s2 sn)))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 88, "code": "(fn [s1 s2]\n    (let [s11 (remove (fn [itm] (some #(= itm %) s2)) s1)]\n        (let [s22 (remove (fn [itm] (some #(= itm %) s1)) s2)] \n          (into #{} (concat [] s11 s22)))))", "user": "5ad99ddee4b0ea6055cfac3a"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "user": "5ad3d730e4b0ea6055cfabc8"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5acb137ee4b0e27600da77eb"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 88, "code": "(fn [set1 set2]\n    (clojure.set/difference\n     (clojure.set/union set1 set2)\n     (clojure.set/intersection set1 set2)))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 88, "code": "#(into\n  (set (filter (complement %1) %2))\n  (filter (complement %2) %1))", "user": "590b8607e4b047aa04b199db"}, {"problem": 88, "code": "#(clojure.set/difference (into %1 %2) (clojure.set/intersection %1 %2))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 88, "code": "(fn [a b] (into #{} (apply concat (conj #{} (clojure.set/difference a b) (clojure.set/difference b a)))))", "user": "5ae246b1e4b0837691e92c5d"}, {"problem": 88, "code": "#(into (apply disj %1 %2) (apply disj %2 %1))", "user": "586bc870e4b01531a375e964"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 88, "code": "(fn [set1 set2]\n   (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))", "user": "5aefdc8de4b0cc2b61a3bc40"}, {"problem": 88, "code": "(fn [s1 s2]\n   (into #{} (concat (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))))", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 88, "code": "#(apply disj (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5a5767f3e4b05d388ecb6c65"}, {"problem": 88, "code": "#(apply merge (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 88, "code": "(fn [x y]\n  (let [x<y (clojure.set/difference x y)\n        x>y (clojure.set/difference y x)] \n    (set (concat x<y x>y)))\n)", "user": "5991eec7e4b0866487ed0d6e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 88, "code": "(fn sym-set [s1 s2]\n  (set (filter #(not= (contains? s1 %) (contains? s2 %)) (concat s1 s2))))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 88, "code": "(fn [x y]\n    (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "5ae47c1de4b0837691e92c81"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 88, "code": "(fn\n  [s t]\n  (set (into (filter #(not (contains? s %)) t)\n             (filter #(not (contains? t %)) s))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 88, "code": "(fn [xs ys]\n  (clojure.set/difference (clojure.set/union xs ys)\n                          (clojure.set/intersection xs ys)))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 88, "code": "(fn [a b] (apply hash-set (filter #((complement contains?) (apply hash-set (for [x a y b\n      :when (= x y)] x)) %) (into a b))))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5649b1b0e4b0284900eef646"}, {"problem": 88, "code": "(fn [s1 s2]\n (clojure.set/union \n  (clojure.set/difference s1 s2) \n  (clojure.set/difference s2 s1)))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "55e732c5e4b050e68259b492"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 88, "code": "#(let [d1 (clojure.set/difference %1 %2)\n            d2 (clojure.set/difference %2 %1)]\n            (into d1 d2))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 88, "code": "(fn [a b] (into #{} (concat (remove b a) (remove a b))))", "user": "583048d9e4b051871117c007"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 88, "code": "(fn [as bs]\n  (set (concat\n   (filter (fn [aVal] (not (.contains bs aVal))) as)\n   (filter (fn [bVal] (not (.contains as bVal))) bs))))", "user": "5b0bea6de4b0cc2b61a3bdda"}, {"problem": 88, "code": "(fn\n  [coll-1 coll-2]\n  (clojure.set/union (clojure.set/difference coll-1 coll-2)\n                     (clojure.set/difference coll-2 coll-1)))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 88, "code": "#(clojure.set/union\n (clojure.set/difference %1 %2)\n (clojure.set/difference %2 %1))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (let [only-not-there\n        (fn [x y]\n            (filter #(not (contains? y %)) x))]\n          (into #{} (clojure.set/union\n           (only-not-there s1 s2)\n           (only-not-there s2 s1)))))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 88, "code": "(fn f [x y]\n  (into (clojure.set/difference x y)\n        (clojure.set/difference y x)))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 88, "code": "(fn [s1 s2] (let [s1c (clojure.set/difference s1 s2)\n              s2c (clojure.set/difference s2 s1)]\n              (clojure.set/union s1c s2c)))", "user": "5b198eace4b03cfeda66ecbb"}, {"problem": 88, "code": "(fn __\n  [a b]\n  (letfn [(minus [a b] (into #{} (remove (partial contains? b) a)))]\n    (into (minus a b) (minus b a))))", "user": "5b13ba71e4b0cc2b61a3be53"}, {"problem": 88, "code": "(fn [s1 s2]\n (apply clojure.set/union (map #(clojure.set/difference % (clojure.set/intersection s1 s2)) [s1 s2])))", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 88, "code": "(fn symmetric-difference [s1 s2]\n  (clojure.set/union\n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)))", "user": "5b1d61b3e4b03cfeda66ecfe"}, {"problem": 88, "code": "(fn sd[a b]\n  (clojure.set/union \n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat\n         (for [x s1 :when (not (s2 x))] x)\n         (for [y s2 :when (not (s1 y))] y))))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference\n   \t(clojure.set/union a b)\n   \t(clojure.set/intersection a b)))", "user": "59e8a952e4b0249b72820733"}, {"problem": 88, "code": "(fn [xs ys]\n    (let [x-unique (clojure.set/difference xs ys)\n          y-unique (clojure.set/difference ys xs)]\n      (clojure.set/union x-unique y-unique)))", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 88, "code": "(fn [st1 st2]\n  (let [difference (fn [s1 s2] (filter #(not (contains? s1 %)) s2 ))]\n  (into #{} (concat (difference st1 st2 ) (difference st2 st1)))))", "user": "59135c11e4b0163c97b36f02"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 88, "code": "(let\n  [minus (fn [s1 s2] (filter #(not (contains? s2 %)) s1))]\n  (fn [s1 s2] (set (concat (minus s1 s2) (minus s2 s1)))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 88, "code": "(fn [a b]\n   (set\n     (concat\n       (filter #(if (a %) false true) b)\n       (filter #(if (b %) false true) a))))", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 88, "code": "(fn sym-diff [coll1 coll2] (clojure.set/union\n                              (clojure.set/difference coll1 coll2)\n                              (clojure.set/difference coll2 coll1)))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 88, "code": "(fn [a b] (apply sorted-set (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b))))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 88, "code": "(fn [a b] \n  (clojure.set/union\n      (clojure.set/difference a b)\n      (clojure.set/difference b a)\n  ) \n)", "user": "5b58b271e4b02d533a91bd6e"}, {"problem": 88, "code": "(fn [& sets]\n  (let [intersection (set (filter (apply some-fn (rest sets)) (first sets)))]\n    (set (remove intersection (apply concat sets)))))", "user": "51e61772e4b0efabf93c02e2"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n   (set(filter (fn [x] (= nil (some #{x} s2))) s1))\n   (set(filter (fn [x] (= nil (some #{x} s1))) s2))\n   )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 88, "code": "(fn symmetric-difference [set-a set-b]\n  (loop [res #{}\n         seq-all (concat (seq set-a) (seq set-b))]\n    (if (empty? seq-all)\n      res\n      (recur (if (and (not= (get set-a (first seq-all)) nil)\n                      (not= (get set-b (first seq-all)) nil))\n               res\n               (conj res (first seq-all)))\n             (next seq-all)))))", "user": "5b596d0ce4b02d533a91bd7a"}, {"problem": 88, "code": "(fn [xa xb] (clojure.set/union (clojure.set/difference xa xb) (clojure.set/difference xb xa)))", "user": "5b59c513e4b02d533a91bd81"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into (set (filter #(not (contains? s2 %)) s1))\n        (filter #(not (contains? s1 %)) s2)))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2)))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat\n         (filter #(not (contains? s2 %)) s1)\n         (filter #(not (contains? s1 %)) s2))))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 88, "code": "(fn  [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference % %2)\n  (clojure.set/difference %2 %))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 88, "code": "#(into #{} (concat (remove %1 %2) (remove %2 %1)))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 88, "code": "#(clojure.set/union(clojure.set/difference %1 %2)(clojure.set/difference %2 %1))", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) \n                    (clojure.set/difference %2 %1))", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 88, "code": "#(reduce (fn [s x] (if (contains? s x) (disj s x) (conj s x))) %1 %2)", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 88, "code": "(fn sym-diff [s1 s2] (let [i (clojure.set/intersection s1 s2)] \n                       (clojure.set/union (clojure.set/difference s1 i) (clojure.set/difference s2 i))\n                       ))", "user": "4fecebe1e4b0681fd128dcac"}, {"problem": 88, "code": "#(into #{} (filter (fn[v](not= (%1 v) (%2 v))) (concat %1 %2)))", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 88, "code": "(fn sym-diff\n  [seta setb]\n  (clojure.set/union \n    (clojure.set/difference seta setb)\n    (clojure.set/difference setb seta)))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 88, "code": "(fn [a b] (reduce (fn [res el]\n                    (if-not (and (contains? a el) (contains? b el))\n                      (conj res el)\n                      res))\n                  #{} (clojure.set/union a b)))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 88, "code": "#(set (let [xs (clojure.set/intersection %1 %2)]\n   (clojure.set/union (remove xs %1) (remove xs %2))))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 88, "code": "(fn [xs ys]\n  (let [as (apply disj xs ys)\n        bs (apply disj ys xs)]\n    (clojure.set/union as bs)))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 88, "code": "(fn [a b] (set (remove (set(filter a b)) (clojure.set/union a b))) )", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 88, "code": "(fn [a b]\n  (set\n    (concat\n    (for [x a :when (not (contains? b x))] x)\n    (for [y b :when (not (contains? a y))] y))))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 88, "code": "#(into (sorted-set) (clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "5b514db6e4b02d533a91bcf4"}, {"problem": 88, "code": "(fn [a b]\n                            (reduce\n                             (fn [a* bi]\n                               (let [applied-to-pair (fn [f] (apply f [a* bi]))]\n                                 (if (applied-to-pair contains?)\n                                   (applied-to-pair disj)\n                                   (applied-to-pair conj))))\n                             a\n                             b))", "user": "57f904c5e4b0d3187e900936"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "578dc040e4b0ebec4cfb756d"}, {"problem": 88, "code": "#(set\n  (concat\n   \t(filter (complement %1) %2)\n    (filter (complement %2) %1)))", "user": "5b985fe5e4b0c0b3ffbd4ab1"}, {"problem": 88, "code": "#(set (into (remove %1 %2) (remove %2 %1)))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 88, "code": "(fn [a b] (set (concat (apply disj a b) (apply disj b a))))", "user": "5b284375e4b063e2438bcc53"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 88, "code": "(fn [s1 s2]\n  (->> s1\n       (concat s2)\n       (group-by identity)\n       (remove #(-> % second count (> 1)))\n       (map first)\n       (into #{})))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 88, "code": "(fn [s1 s2]\n  (reduce \n   #(if-not (and (s1 %2) (s2 %2)) (conj %1 %2) %1) \n   #{} \n   (clojure.set/union s1 s2)))", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 88, "code": "(fn [s1 s2] (let [t (reduce into #{} [s1 s2])] (into #{} (filter (fn [x] (not (and (contains? s1 x) (contains? s2 x)))) t))))", "user": "5addadfce4b0837691e92c13"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 88, "code": "(fn [c1 c2]\n    (clojure.set/union\n     (clojure.set/difference c1 c2)\n     (clojure.set/difference c2 c1)))", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 88, "code": "(fn [one two]\n    (set (filter\n           #(not (and (one %) (two %)))\n           (into one two))))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 88, "code": "(fn\n  [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [comm (clojure.set/intersection s1 s2)]\n    (clojure.set/union (clojure.set/difference s1 comm)\n         (clojure.set/difference s2 comm))))", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 88, "code": "#(set (for [a (vec (clojure.set/union %1 %2)) :when (or (not (contains? %2 a)) (not (contains? %1 a)))] a) )", "user": "5ba947bfe4b0a20761a23440"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 88, "code": "#(set (concat (remove % %2) (remove %2 %)))", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 88, "code": "(fn [as bs]\n        (let [common (clojure.set/intersection as bs)]\n            (into\n                (clojure.set/difference as common)\n                (clojure.set/difference bs common))))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 88, "code": "(fn [s1 s2] (into (set (remove s1 s2)) (remove s2 s1)))", "user": "4db3a0e5535df7e46ed9b6d0"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 88, "code": "(fn symetric\n  ; symetric difference of two sets\n  [s1 s2]\n  (let [ns1 (filter #(not (s1 %)) s2)\n        ns2 (filter #(not (s2 %)) s1)]\n    (set (concat ns1 ns2))))", "user": "5bbbcecee4b0a20761a23611"}, {"problem": 88, "code": "(fn symetric_difference\n  [a b]\n  \"Function which returns the symmetric difference of two sets.\n  The symmetric difference is the set of items belonging to one but not both of the two sets\"\n  (let [ns1 (filter #(not (a %)) b)\n        ns2 (filter #(not (b %)) a)]\n    (set (concat ns1 ns2))))", "user": "5bbbd077e4b0a20761a23615"}, {"problem": 88, "code": "(fn [a b]\n  (let [dis (clojure.set/intersection a b)\n        a-sub (clojure.set/difference a dis)\n        b-sub (clojure.set/difference b dis)]\n    (clojure.set/union a-sub b-sub)))", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat (remove s1 s2) (remove s2 s1))))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 88, "code": "(fn [x y] (set (concat (clojure.set/difference x y) (clojure.set/difference y x))))", "user": "5bb3c9a8e4b0a20761a2352f"}, {"problem": 88, "code": "(fn [xs ys]\n  (clojure.set/difference (clojure.set/union xs ys) (clojure.set/intersection xs ys)))", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 88, "code": "#(apply clojure.set/difference\n        ((juxt clojure.set/union clojure.set/intersection) %1 %2))", "user": "543a8256e4b032a45b869327"}, {"problem": 88, "code": "(fn [a b] \n\t\t(set (concat\n\t\t\t(seq (filter #(not (contains? b %)) a))\n\t\t\t(seq (filter #(not (contains? a %)) b))\n\t\t))\n\t)", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 88, "code": "(fn diff\n  [a b]\n  (set (map #(first %)(filter #(= (count %) 1) (partition-by identity (sort (concat (into [] a) (into [] b))))))))", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 88, "code": "(fn [s1 s2]\n  (-> (filter s1 s2)\n      (set)\n      (remove (into s1 s2))\n      (set)))", "user": "5b2c79c6e4b025bcb146f2b7"}, {"problem": 88, "code": "(fn symmetric-difference [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 88, "code": "(fn [as bs]\n  (clojure.set/union (clojure.set/difference as bs) (clojure.set/difference bs as))\n)", "user": "5bc28638e4b07a9b28b10033"}, {"problem": 88, "code": "(fn sym-diff [list1 list2]\n  (let [res (clojure.set/intersection list1 list2)\n        list1-sub (clojure.set/difference list1 res)\n        list2-sub (clojure.set/difference list2 res)]\n(clojure.set/union list1-sub list2-sub)))", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 88, "code": "#(set (concat (filter (complement %1) %2)\n             (filter (complement %2) %1)))", "user": "54ca35c6e4b057c6fda3a254"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 88, "code": "(fn symmetric-difference\n  [seta setb]\n  (->> (concat (seq seta) (seq setb))\n       set\n       (filter #(not (and (contains? seta %) (contains? setb %))))\n       set\n       )\n  )", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 88, "code": "(fn [lst lst2]\n(clojure.set/union (clojure.set/difference lst lst2) (clojure.set/difference lst2 lst)))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 88, "code": "(fn \n   [a b]\n   (->> (sort(concat a b))\n        (partition-by identity)\n        (filter #(> 2 (count %)))\n        (map last)\n        set\n        ))", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 88, "code": "(fn \n  [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb)))\n  )", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 88, "code": "(fn [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5a99c5a9e4b0d174b936c7b1"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 88, "code": "#(set\n    (remove (clojure.set/intersection %1 %2)\n            (clojure.set/union %1 %2)))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 88, "code": "(fn [a b] (into #{}\n             (lazy-cat\n              \t(for [x a :when (not (contains? b x))] x)\n                (for [x b :when (not (contains? a x))] x))))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "59a0286be4b0871e7608b82f"}, {"problem": 88, "code": "(fn symetrical-diff [s1 s2]\n(clojure.set/union \n(clojure.set/difference s1 s2)\n(clojure.set/difference  s2 s1 )))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 88, "code": "(fn [setA setB]\n  (let [only-in-a (clojure.set/difference setA setB)\n         only-in-b (clojure.set/difference setB setA)]\n  \t(clojure.set/union only-in-a only-in-b)))", "user": "593870e6e4b02506e01a29d6"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)(clojure.set/difference %2 %1))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 88, "code": "(fn [a b]\n  (let [cross (clojure.set/intersection a b)\n        unite (clojure.set/union a b)]\n    (clojure.set/difference unite cross)))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 88, "code": "(fn [x y] \n    (let [f (fn [a b]\n             (set(filter #(not (contains? a %1)) b)))]\n      (set (concat (f x y) (f y x)))\n      ))", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 88, "code": "(fn sym-dif\n  [a b]\n  (letfn [(dif-fn [my-coll my-set]\n            (reduce (fn [c n] (if (my-set n)\n                                c\n                                (conj c n))) #{} my-coll))]\n    (into #{} (concat (dif-fn a b)\n                      (dif-fn b a)))))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 88, "code": "(fn [xs ys] (clojure.set/difference (clojure.set/union xs ys) (clojure.set/intersection xs ys ) ))", "user": "5b81139fe4b047b03b203782"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)                             (clojure.set/difference s2 s1)\n  )\n)", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 88, "code": "(fn [s1 s2]\n    (let [i (clojure.set/intersection s1\n                                      s2)\n          i? (fn [x]\n               (contains? i x))]\n      (set (remove i?\n                   (into s1\n                         s2)))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 88, "code": "#(set (filter (fn [x] (not ((set (filter %1 %2)) x))) (set (concat %1 %2))))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 88, "code": "(fn [x y]\n    (clojure.set/union (clojure.set/difference x y)\n                      (clojure.set/difference y x)))", "user": "5bb948f5e4b0a20761a235d5"}, {"problem": 88, "code": "(fn [s ss]\n  (set (reduce #(if (contains? %1 %2) (disj %1 %2) (conj %1 %2)) s ss))\n)", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s2 s1) (clojure.set/difference s1 s2)))", "user": "5b60e88be4b0c6492753e70b"}, {"problem": 88, "code": "(fn [a b] (set (filter (fn [el] (or (and (some #(= el %) a) (not (some #(= el %) b))) (and (some #(= el %) b) (not (some #(= el %) a))))) (concat a b))))", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/union\n    (set (filter (complement #(contains? set1 %)) set2))\n    (set (filter (complement #(contains? set2 %)) set1))))", "user": "5bf1b957e4b0a6d31fed216f"}, {"problem": 88, "code": "(fn [a b]\n  (let [intersection (clojure.set/intersection a b)]\n    (loop [inputs [a b] result (hash-set)]\n      (if (empty? inputs) result\n          (let [the-set (first inputs)\n                diff (clojure.set/difference the-set intersection)]\n            (recur (rest inputs) (into result diff)))))))", "user": "596aaeefe4b069c0a1a19808"}, {"problem": 88, "code": "#(into (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 88, "code": "(fn [x y]\n  (let [intersect (reduce (fn [acc e] (if (x e) (conj acc e) acc)) #{} y)\n        inxnotboth (reduce (fn [acc e] (if (intersect e) acc (conj acc e))) #{} x)]\n    (reduce (fn [acc e] (if (intersect e) acc (conj acc e))) inxnotboth y)))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 88, "code": "(fn foo [x y]\n\n            (clojure.set/union  (clojure.set/difference x y)  (clojure.set/difference y x))\n            )", "user": "5bed1e4ae4b0a6d31fed2118"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5ac9c737e4b0e27600da77d2"}, {"problem": 88, "code": "(fn symmetric-difference [seta setb]\n  ((comp set concat)\n    (clojure.set/difference seta setb)\n    (clojure.set/difference setb seta)))", "user": "5c01ba2ce4b0bdcf453d1656"}, {"problem": 88, "code": "(fn set-difference [left right]\n  (clojure.set/difference (clojure.set/union left right) (clojure.set/intersection left right)))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 88, "code": "(fn [a b] (->> (concat a b) (remove #(and (a %) (b %))) set))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 88, "code": "(fn [aa bb] (clojure.set/union (clojure.set/difference aa bb) (clojure.set/difference bb aa)))", "user": "54caaa48e4b057c6fda3a267"}, {"problem": 88, "code": "#(let [d clojure.set/difference] (clojure.set/union (d %1 %2) (d %2 %1)))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 88, "code": "(fn symm-diff [sa sb]\n (let [i (clojure.set/intersection sa sb)\n       u (clojure.set/union sa sb)]\n  (clojure.set/difference u i)))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 88, "code": "#(set (concat (remove % %2) (remove %2 %)))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 88, "code": "(fn group-seq\n[x y]\n(set (concat (filter #(not (contains? y %)) x) (filter #(not (contains? x %)) y))))", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 88, "code": "(fn [x y]\n  (let [all (into x y)\n        in-some #(not (and (x %) (y %)))]\n    (set (filter in-some all))))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 88, "code": "#(into #{} (for [x (into %1 %2) :when (or (not (contains? %1 x)) (not (contains? %2 x)))] x))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 88, "code": "(fn symmetric-difference\n  [s1 s2]\n  (set \n    (filter \n      #(not (contains? (clojure.set/intersection s1 s2) %)) \n      (clojure.set/union s1 s2))))", "user": "5c20b6abe4b07e362c230576"}, {"problem": 88, "code": "(fn symmtetric-difference\n  [xs ys]\n  (let [a-b (clojure.set/difference xs ys)\n        b-a (clojure.set/difference ys xs)]\n    (clojure.set/union a-b b-a)))", "user": "5c222b7de4b07e362c230588"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 88, "code": "(fn [seta setb]\n      (set (concat (apply disj seta setb) (apply disj setb seta)))\n      )", "user": "5c17467fe4b01240ff5671df"}, {"problem": 88, "code": "(fn [a b](clojure.set/union (clojure.set/difference a b)   (clojure.set/difference b a)  ))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %2 %) (clojure.set/difference % %2))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 88, "code": "(fn sim-dif [set1 set2]\n  (set \n   (into \n    (reduce \n     (fn [ncon e]\n       (if-not (contains? set2 e)\n         (conj ncon e)\n         ncon))\n     () (seq set1))\n   (reduce \n    (fn [ncon e]\n      (if-not (contains? set1 e)\n        (conj ncon e)\n        ncon))\n    () (seq set2)))))", "user": "5c195cb2e4b01240ff5671f7"}, {"problem": 88, "code": "(fn symmetric-difference\n  [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "5369d072e4b0243289761ea1"}, {"problem": 88, "code": "(fn [a b]\n  (let [set-contains-reduce (fn [new-set base-set compare-set]\n                              (reduce #(if (contains? compare-set %2) %1 (conj %1 %2)) new-set base-set))]\n    (set-contains-reduce (set-contains-reduce #{} a b) b a)))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 88, "code": "(fn symmetric-difference\n  [s1 s2]\n  (letfn [(difference [x y] (filter #(not (y %)) x))]\n    (set (clojure.set/union (difference s1 s2) (difference s2 s1)))))", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 88, "code": "(fn [col1 col2]\n  (let [result1 (clojure.set/difference col1 col2)\n        result2 (clojure.set/difference col2 col1)]\n\n    ;(println result1)\n    ;(println result2)\n    (clojure.set/union result1 result2)\n    )\n  )", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 88, "code": "(fn [s1 s2]\n    (clojure.set/union\n     (clojure.set/difference s1 s2)\n     (clojure.set/difference s2 s1)))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 88, "code": "(fn [set1 set2]\n  \n  (into #{}\n        (filter\n\n          (fn [el]\n\n\n            (not (and\n                   (get set1 el)\n                   (get set2 el)\n\n                   ))\n\n\n            )\n\n\n          (clojure.set/union  set1 set2)\n          )\n        \n        \n        )\n  \n  \n\n\n  )", "user": "53b0750fe4b047364c044483"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5c3ec6dbe4b08cd430848e8a"}, {"problem": 88, "code": "#(set (into (remove % %2)\n   (remove %2 %1)))", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 88, "code": "(fn [c1 c2]\n    (let [u (clojure.set/union c1 c2)\n          i (clojure.set/intersection c1 c2)]\n          (clojure.set/difference u i)))", "user": "54d90b36e4b0a52adc2e2049"}, {"problem": 88, "code": "(fn [_a _b]\n    (let [resa\n        (filter #(not (contains? _b %)) _a)]\n    (let [resb\n        (filter #(not (contains? _a %)) _b)]\n    (set (reduce #(conj %1 %2) resb resa))))\n)", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 88, "code": "(fn sd [s1 s2]\n(clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection\n                                                    s1 s2)))", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 88, "code": "#(clojure.set/difference\n  (clojure.set/union %1 %2)\n  (clojure.set/intersection %1 %2))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 88, "code": "(fn [a b]\n   (apply sorted-set (concat (clojure.set/difference a b) (clojure.set/difference b a))))", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 88, "code": "(fn symmetric-difference [a b]\n  (set (concat\n         (filter (complement b) a) \n         (filter (complement a) b))))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 88, "code": "(fn [x y] (set (concat (remove x (into [] y)) (remove y (into [] x))) ))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 88, "code": "(fn [a b] (set (concat (filter (complement a) b)\n                       (filter (complement b) a))))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 88, "code": "(fn\n  symmetric-diff\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2] (-> (concat (remove s1 s2) (remove s2 s1)) set))\n  ([s1 s2 & more] (->> (conj more s1 s2)\n                       (mapcat identity ,,,)\n                       frequencies\n                       (filter #(= (second %) 1) ,,,)\n                       (map first ,,,)\n                       set)))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 88, "code": "(fn [a b] (let [rr (fn [a1 b1] (reduce #(if (b1 %2) % (conj % %2)) #{} a1))]\n            (into #{} (concat (rr a b) (rr b a))) \n            )\n  )", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "502ea967e4b06efe12e8cc76"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 88, "code": "#(set(concat (loop [s1 %1\n         s2 %2]\n         (if (empty? s2)\n          s1\n          (recur (disj s1 (first s2)) (rest s2 )\n          )\n         )\n        )\n        (loop [s1 %2\n         s2 %1]\n         (if (empty? s2)\n          s1\n          (recur (disj s1 (first s2)) (rest s2 )\n          )\n         )\n        )\n            )\n  )", "user": "5480cce5e4b0e286459a115f"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "509e8da7e4b08df8156e9e2f"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 88, "code": "(fn\n  [set1 set2]\n  (loop [res (set\n               (filter #(not (contains? set1 %)) set2))\n         set-un (filter #(not (contains? set2 %)) set1)]\n    (if (empty? set-un)\n      res\n      (recur (conj res (first set-un)) (rest set-un)))))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 88, "code": "#(clojure.set/union(clojure.set/difference %1 %2)(clojure.set/difference %2 %1))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 88, "code": "#(set (filter (complement (clojure.set/intersection %1 %2)) (clojure.set/union %1 %2)))", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 88, "code": "(fn symmetric-diff\n  [s1 s2]\n  (apply hash-set (into (filter #((comp not contains?) s2 %) s1) (filter #((comp not contains?) s1 %) s2))))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 88, "code": "#(->\n  (clojure.set/difference % %2)\n  (clojure.set/union (clojure.set/difference %2 %)))", "user": "5835a222e4b089d5ab817ce5"}, {"problem": 88, "code": "(fn [s1 s2] (set (filter #(or (not (s1 %)) (not (s2 %))) (into s1 s2))))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 88, "code": "(fn [s1 s2]\n   (set (concat (apply disj s2 s1) (apply disj s1 s2))))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 88, "code": "(fn symetric-difference\n  [x y]\n  (let [a (set (filter #(not (contains? x %)) y))\n        b (set (filter #(not (contains? y %)) x))\n        r (set (sort (concat a b)))]\n    r))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 88, "code": "(fn [a b]\n  (let [int (clojure.set/intersection a b)\n        x (clojure.set/difference a int)\n        y (clojure.set/difference b int)]\n    (clojure.set/union x y)))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5b22d30ee4b08b1df1c36750"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c70641de4b0fca0c162277f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 88, "code": "#(set(concat ((fn mySymDiff1\n                 [lst1\n                  lst2]\n                 (loop [lst1  lst1\n                        result ()]\n                   (if (empty? lst1)\n                     result\n                     (if (contains? lst2 (first lst1))\n                       (recur (rest lst1)\n                              result)\n                       (recur (rest lst1)\n                              (cons (first lst1) result)))))) %1 %2) ((fn mySymDiff2\n                                                                        [lst1\n                                                                         lst2]\n                                                                        (loop [lst2  lst2\n                                                                               result ()]\n                                                                          (if (empty? lst2)\n                                                                            result\n                                                                            (if (contains? lst1 (first lst2))\n                                                                              (recur (rest lst2)\n                                                                                     result)\n                                                                              (recur (rest lst2)\n                                                                                     (cons (first lst2) result)))))) %1 %2)))", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b)(clojure.set/difference b a)))", "user": "5c852e3ae4b0c8042a70ce78"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c706454e4b0fca0c1622780"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c787131e4b0fca0c1622825"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/union\n   (clojure.set/difference x y)\n   (clojure.set/difference y x)))", "user": "5c7741dce4b0fca0c1622806"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into (apply disj s1 s2) (apply disj s2 s1)))", "user": "5c8860bce4b048ec896c5928"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 88, "code": "(fn [s1 s2]\n  (reduce (fn [s3 curr] (if (contains? s3 curr) (disj s3 curr) (conj s3 curr))) s1 s2))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c558070e4b0fb8c5ffd9a1e"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference % %2)\n  (clojure.set/difference %2 %))", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 88, "code": "(fn symmetric-difference\n  [a b]\n  (letfn [(filter-diff [x y] (filter #(nil? (get y %)) x))]\n    (into #{} (concat (filter-diff a b) (filter-diff b a)))))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 88, "code": "(fn [set-1 set-2]\n  (clojure.set/union (clojure.set/difference set-1 set-2) (clojure.set/difference set-2 set-1)))", "user": "5c86b769e4b0c8042a70ce9b"}, {"problem": 88, "code": "(fn [s1 s2]\n    (->> (clojure.set/intersection s1 s2)\n         ((juxt (partial clojure.set/difference s1) (partial clojure.set/difference s2)))\n         (map set)\n         (apply clojure.set/union)))", "user": "5ab1665de4b073f1774425c0"}, {"problem": 88, "code": "(fn symmetric-difference\n  [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 88, "code": "(fn [x y] (set (map first (filter #(= (second %) 1) (frequencies (concat x y))))))", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 88, "code": "(fn [x y]\n    (clojure.set/union\n      (set (filter (comp not x) y))\n      (set (filter (comp not y) x))))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 88, "code": ";; http://www.4clojure.com/problem/88\n(fn symmetric-difference\n  [set-a set-b]\n  (clojure.set/union (clojure.set/difference set-a set-b)\n                     (clojure.set/difference set-b set-a)))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 88, "code": "(fn [st1 st2]\n    (set\n     (concat\n      (filter #(not (contains? st1 %)) st2)\n      (filter #(not (contains? st2 %)) st1))))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 88, "code": "(fn [s1 s2]\n   (let [i (clojure.set/intersection s1 s2)]\n     (set (apply merge (remove i s1)\n                 (remove i s2)))))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 88, "code": "(fn [a b] \n  (let [comb (concat a b)]\n    (reduce #(if (not= (a %2) (b %2)) (conj %1 %2) %1) #{} comb)))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2)\n                          (clojure.set/intersection s1 s2)))", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 88, "code": "#(into (set (remove %2 %)) (remove % %2))", "user": "56f5d0efe4b046a417f92078"}, {"problem": 88, "code": "(fn [a b]\n  (reduce #(if (and (contains? a %2) (contains? b %2)) %1 (conj %1 %2)) #{} (concat a b))\n  )", "user": "539ec9f9e4b0ca733b974491"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "543bb568e4b032a45b869334"}, {"problem": 88, "code": "(fn symdiff\n  [x y]\n  (clojure.set/difference (clojure.set/union x y) (clojure.set/intersection x y)))", "user": "5c538cb5e4b0fb8c5ffd99fb"}, {"problem": 88, "code": "(fn sym-diff\n  [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2)\n                          (clojure.set/intersection s1 s2)))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 88, "code": "(fn diff [a b]\n  (let [c ((comp set concat) a b)]\n    (set (filter #(not\n               (and\n                 (contains? a %)\n                 (contains? b %)))\n            c))))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5c371f5be4b0d62ef62d9f72"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2)\n                               (clojure.set/difference s2 s1)))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 88, "code": "(fn dif [set-1 set-2]\n  (set (filter #(or (not (set-2 %))  (not (set-1 %))) (into set-2 set-1)))\n)", "user": "5c7bb8c0e4b0fca0c1622864"}, {"problem": 88, "code": "(fn [seta setb] (clojure.set/union (clojure.set/difference seta setb) (clojure.set/difference setb seta)))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5cb71f35e4b026601754b961"}, {"problem": 88, "code": "(fn symm-diff [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5be96111e4b0f319e2d7ec70"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union \n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "4eb7b049535d7eef30807377"}, {"problem": 88, "code": "#(set (concat (apply disj % %2) (apply disj %2 %)))", "user": "5bb5cd43e4b0a20761a23575"}, {"problem": 88, "code": "(fn [a b] (set (keys (remove #(> (second %) 1) (frequencies (concat a b))))))", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 88, "code": "#(into (clojure.set/difference %2 %1) (clojure.set/difference %1 %2))", "user": "5afb3426e4b0cc2b61a3bcf5"}, {"problem": 88, "code": "(fn [a b] (set (keys (filter #(= (second %) 1) (frequencies (concat a b))))))", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 88, "code": "(fn sym-diff [x y]\n  (clojure.set/union (clojure.set/difference y x) (clojure.set/difference x y)))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 88, "code": "#(set (filter (fn [x] (not (nil? x)))\n              (concat \n               (for [x %1] (if (not (%2 x)) x))\n               (for [x %2] (if (not (%1 x)) x) )\n                 )))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 88, "code": "(fn [a b] \n  (set (filter #(apply not= ((juxt a b) %)) \n               (into a b))))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5ccf2dc3e4b0ccb0619628c2"}, {"problem": 88, "code": "(fn [s1 s2]\n    (set (map (fn[a] (first a)) ((group-by (fn[a] (last a)) (frequencies (concat s1 s2))) 1)))\n    )", "user": "5cc6f982e4b0ccb06196282d"}, {"problem": 88, "code": "(fn [a b]\n  (set (into\n   (filter #(not (a %1)) b)\n   (filter #(not (b %1)) a))))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "4eb47bb1535d7eef30807362"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 88, "code": "(fn symmetric-difference [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 88, "code": "(fn [s-1 s-2]\n  (clojure.set/difference (clojure.set/union s-1 s-2)\n                          (clojure.set/intersection s-1 s-2)))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 88, "code": "(fn[as bs] \n  (let [not-in (fn [ps qs](filter #(not (some #{%} qs)) ps))]\n   \t(set (concat (not-in as bs) (not-in bs as))) \n  )\n)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 88, "code": ";#(difference (union % %2) (intersection % %2))\n#(into (difference % %2) (difference %2 %))", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 88, "code": "(fn [s1 s2] (difference (union s1 s2) (intersection s1 s2)))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 88, "code": "(fn [x y] (union (difference x y) (difference y x)))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 88, "code": "(fn [a b] (reduce (fn [r x] (if-not (and (contains? a x) (contains? b x)) (conj r x) r)) #{} (apply merge a b)))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 88, "code": "(fn [set1 set2] (set (concat (filter #(not (set1 %)) set2) (filter #(not (set2 %)) set1))))", "user": "5cf1438be4b0aaa82f112a0d"}, {"problem": 88, "code": "(fn [a b]\n   (set (concat (remove a b)\n                (remove b a))))", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "5cdda90ce4b05ee0cb311766"}, {"problem": 88, "code": "#(set (sort (concat (remove %1 %2) (remove %2 %1))))", "user": "5ce44ee2e4b0a17bb84e2b57"}, {"problem": 88, "code": "(fn [a b] (set (filter #(and (or (contains? a %) (contains? b %)) (not (and (contains? a %) (contains? b %)))) (concat a b))))", "user": "5cbdc591e4b026601754ba00"}, {"problem": 88, "code": "(fn [a b]\n   (let [ab (into #{} (concat a b))]\n     (into #{} (filter (fn [x] (not= (contains? a x)\n                                  (contains? b x))) ab))))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 88, "code": "(fn symmetric-difference\n  [set-1 set-2]\n  (set (filter\n    #(not (and (contains? set-1 %1) (contains? set-2 %1)))\n    (into set-1 set-2)\n  ))\n)", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 88, "code": "(fn [a b] \n  (clojure.set/union\n  \t(clojure.set/difference a b)\n    (clojure.set/difference b a)))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 88, "code": "(fn [a b]\n  (into #{} (filter #(not (and (a %) (b %))) (concat a b))))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 88, "code": "#(into (apply disj %1 %2) (apply disj %2 %1))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 88, "code": "(fn [set1 set2]\n  (if (= (count set1) 0)\n    set2\n    (reduce\n      (fn [x y]\n        (if (contains? x y)\n          (disj x y)\n          (conj x y)))\n      set2\n      set1)))", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 88, "code": "(fn aaa\n  [s1 s2]\n  (set (into (remove s1 s2) (remove s2 s1)))\n  )", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) \n                    (clojure.set/difference %2 %))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5d06499ae4b0cc9c915881ec"}, {"problem": 88, "code": "(fn symmetric-difference [set-a set-b]\n  (loop [set-a set-a set-b set-b result []]\n    (if (empty? set-a)\n      (apply sorted-set (concat result set-b))\n      (let [current-value (first set-a)]\n        (if (contains? set-b current-value)\n          (recur (rest set-a) (disj set-b current-value) result)\n          (recur (rest set-a) set-b (conj result current-value)))))))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 88, "code": "(fn sym-dif\n  [aset bset]\n  (let [a-diff (clojure.set/difference aset  bset)\n        b-diff (clojure.set/difference bset aset)]\n    (clojure.set/union a-diff b-diff)))", "user": "5d110abee4b02c15ef021983"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5d0815b3e4b0cc9c91588201"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2)\n                          (clojure.set/intersection s1 s2)))", "user": "5012da69e4b0c8732600222d"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union\n           (clojure.set/difference x y)\n           (clojure.set/difference y x)))", "user": "5d1a1082e4b0902706380e0e"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [u (clojure.set/union s1 s2)\n        i (clojure.set/intersection s1 s2)]\n    (into #{} (filter #(not (contains? i %)) u))))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 88, "code": "(fn\n  [s1 s2]\n  (clojure.set/union\n    (apply (partial disj s1) s2)\n    (apply (partial disj s2) s1)))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 88, "code": "#(clojure.set/union\n\t(clojure.set/difference %1 %2)\n\t(clojure.set/difference %2 %1)\n)", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5d1b59abe4b02ea6f0fb697e"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 88, "code": "(fn\n  [coll coll2]\n  (apply sorted-set (clojure.set/union\n          (reduce\n            (fn [acc curr]\n              (if (get coll2 curr)\n                acc\n                (conj acc curr)))\n            #{}\n            coll)\n          (reduce\n            (fn [acc curr]\n              (if (get coll curr)\n                acc\n                (conj acc curr)))\n            #{}\n            coll2))))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 88, "code": "(fn [set1 set2]\n (->> (concat set1 set2)\n     frequencies\n     (filter (fn [[k v]] (= 1 v)))\n     (map first)\n     (into #{})))", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [diff \n        (fn [s'1 s'2]\n          (filter #((complement contains?) s'1 %)\n                  s'2))]\n        (-> #{}\n            (into (diff s1 s2))\n            (into (diff s2 s1)))))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 88, "code": "(fn diff\n   [s1 s2]\n   (let [inter (clojure.set/intersection s1 s2)\n         uni (clojure.set/union s1 s2)]\n     (apply disj uni inter)))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 88, "code": "(fn [xs ys] (set (concat (remove xs ys) (remove ys xs))))", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 88, "code": "#(set (filter (complement (clojure.set/intersection % %2)) (clojure.set/union % %2)))", "user": "5d2ca236e4b01671435dbc94"}, {"problem": 88, "code": "(fn [s1 s2]\n    (let [shared (clojure.set/intersection s1 s2)\n          combined (clojure.set/union s1 s2)]\n      (set (remove shared combined))))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 88, "code": "(fn [a b]\n  (let [s1 (clojure.set/difference a b)\n        s2 (clojure.set/difference b a)]\n    (clojure.set/union s1 s2)))", "user": "57262710e4b0c5bde472c120"}, {"problem": 88, "code": "#(into (clojure.set/difference %2 %) (clojure.set/difference % %2))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 88, "code": "(fn [A B]\n  (let [A-without-B (filter #(not (contains? B %)) A)\n        B-without-A (filter #(not (contains? A %)) B)]\n    (into (into #{} A-without-B) B-without-A)))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 88, "code": "(fn [a b]\n  (loop [u (concat a b) out #{}]\n    (if (empty? u)\n      out\n      (recur (rest u) \n             (if (and (contains? a (first u)) (contains? b (first u))) \n               out\n               (conj out (first u)))))))", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 88, "code": "(fn symm-diff [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "5d321852e4b01671435dbce8"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)) )", "user": "5cf53196e4b087f62be35a94"}, {"problem": 88, "code": "(fn intersection [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 88, "code": "(fn [set-a set-b]\n  (clojure.set/union\n   (clojure.set/difference set-a set-b)\n   (clojure.set/difference set-b set-a)))", "user": "5cb41c40e4b026601754b911"}, {"problem": 88, "code": "(fn [a b]\n   (let [m (fn [a b] (reduce #(if (b %2) % (cons %2 %)) '()  a))]\n     (set (concat (m a b) (m b a)))))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 88, "code": "(fn [a b]\n    (set (concat (remove b a)\n                 (remove a b))))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 88, "code": "(fn [a b]\n  (set\n    (concat\n      (filter (complement b) a)\n      (filter (complement a) b))))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [r1   (reduce\n               (fn [c e]\n                 (if (contains? s2 e)\n                   c\n                   (conj c e))) #{} s1)\n        r2    (reduce\n                (fn [c e]\n                  (if (contains? s1 e)\n                    c\n                    (conj c e))) #{} s2)\n        r3 (clojure.set/union r1 r2)\n        ]\n    r3))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 88, "code": "(fn [A B]\n    (let [Both (clojure.set/intersection A B)]\n      (clojure.set/union \n        (clojure.set/difference A Both)\n        (clojure.set/difference B Both)\n      )\n    )\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/union (clojure.set/difference x y)\n                     (clojure.set/difference y x)))", "user": "58472aade4b089d5ab817ea0"}, {"problem": 88, "code": "(fn [a b]\n  (let [common (clojure.set/intersection a b)\n        all (clojure.set/union a b)]\n    (set (filter #(nil? (common %)) all))))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 88, "code": "#(into #{} (concat (clojure.set/difference % %2) (clojure.set/difference %2 %)))", "user": "5d40442ee4b05dd059a54362"}, {"problem": 88, "code": "#(set (concat (filter (complement %) %2) (filter (complement %2) %)))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "5ab07d63e4b073f1774425af"}, {"problem": 88, "code": "(fn [s1 s2] (set (clojure.set/union (remove s1 s2) (remove s2 s1))))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 88, "code": "(fn symmetric-difference\n  [set1 set2]\n  (into (into #{} (filter #(not (set1 %)) set2)) \n        (filter #(not (set2 %)) set1)))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 88, "code": ";(fn diff\n;  ([seq1 seq2]\n;   (diff seq2 seq1 (diff seq1 seq2 #{})))\n;  ([seq1 seq2 diff-set]\n;   (into diff-set (filter #(not (contains? seq2 %)) seq1))))\n#(->> (for [x (into %1 %2)\n            :when (not= (%1 x) (%2 x))] x)\n      (into #{}))", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 88, "code": "(fn symdiff [a b]\n  (set (concat (filter (comp not b) a)\n               (filter (comp not a) b))))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 88, "code": "(fn [lista listb] (clojure.set/union (set (filter #(not (contains? listb %)) lista)) (set (filter #(not (contains? lista %)) listb))))", "user": "5d5e9f45e4b0c9e5857d4ff5"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y)(clojure.set/difference y x)))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5d6042f2e4b0c9e5857d5006"}, {"problem": 88, "code": "(fn [a b]\n  (let [a-b (apply (partial disj a) b)\n        b-a (apply (partial disj b) a)]\n    (into a-b b-a)))", "user": "5d2c779be4b01671435dbc8d"}, {"problem": 88, "code": "(fn [a b]\n  (let [s (set (filter a b))]\n    (set (into (remove s a) (remove s b)))))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5d28b684e4b092dab7f59c83"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (set (filter #(not (contains? s2 %)) s1)) (set (filter #(not (contains? s1 %)) s2))))", "user": "5d662fb5e4b0db5d338d15e1"}, {"problem": 88, "code": "(fn [set1 set2]\n  (set (filter #(not (and (contains? set1 %) (contains? set2 %)))\n               (concat set1 set2))))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 88, "code": "(fn [xs ys]\n  (set (concat (remove xs ys) (remove ys xs))))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 88, "code": "(fn [seq1 seq2]\n  (set (concat\n   (filter (fn [x] (not (some #(= x %) seq2))) seq1)\n   (filter (fn [x] (not (some #(= x %) seq1))) seq2))))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 88, "code": "#(into #{} (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b)\n                     (clojure.set/difference b a)))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 88, "code": "(fn symmetric-d [s1 s2]\n  ;; add everything in a that's not in b\n  (let [diff (fn [a b] (reduce\n                        (fn [acc item-a]\n                          (let [in (b item-a)]\n                            (if-not in\n                              (conj acc item-a)\n                              acc)))\n                        #{}\n                        a))\n        left (diff s1 s2)\n        right (diff s2 s1)]\n    (into #{} (concat left right))))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into (set (filter #(not (contains? s2 %)) s1))\n        (filter #(not (contains? s1 %)) s2)))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 88, "code": "(fn [a b]\n  (let [dis (clojure.set/intersection a b)\n        a-sub (clojure.set/difference a dis)\n        b-sub (clojure.set/difference b dis)]\n    (clojure.set/union a-sub b-sub)))", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 88, "code": "(fn [set1 set2]\n  (set (apply concat [(clojure.set/difference set1 set2) (clojure.set/difference set2 set1)])))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference (clojure.set/union x y) x) (clojure.set/difference (clojure.set/union x y) y)))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 88, "code": "(fn sym-diff[s1 s2]\n  (into #{} (concat (filter (complement s2) s1) (filter (complement s1) s2))))", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 88, "code": "(fn [x y]\n  (into (set (remove x y))\n        (remove y x)))", "user": "5d1b2b7de4b02ea6f0fb697a"}, {"problem": 88, "code": "(fn [X Y]\n    (let [intersection (set (remove nil? (map X Y)))]\n      (set (concat (clojure.set/difference X intersection)\n                   (clojure.set/difference Y intersection)))))", "user": "5c58736be4b01df32ab73247"}, {"problem": 88, "code": "(fn sym \n  [set1 set2]\n   \n    (set(concat (filter #(nil? (set2 %)) set1)\n            (filter #(nil? (set1 %)) set2)\n            ))\n\n  \n  )", "user": "5a7f77fae4b00b71e582a041"}, {"problem": 88, "code": "#(->> (for [x (into % %2)\n            :when (not= (% x) (%2 x))]\n       x)\n     (into #{}))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2)\n                         (clojure.set/intersection %1 %2))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 88, "code": "(fn [s1 s2]\n   (set (filter #(not= (contains? s1 %) (contains? s2 %)) (into s1 s2))))", "user": "5d917ef0e4b0915913b1d402"}, {"problem": 88, "code": "(fn [a b]\n   (clojure.set/difference \n     (clojure.set/union a b)\n     (clojure.set/intersection a b) ))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 88, "code": "(fn symdiff [s1 s2] (set (concat (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5d84f5e6e4b0915913b1d38f"}, {"problem": 88, "code": "(fn [coll1 coll2]\n  (set (remove #(and (contains? coll1 %) (contains? coll2 %)) (clojure.set/union coll1 coll2))))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5d8a832ce4b0915913b1d3ca"}, {"problem": 88, "code": ";#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))\n#(clojure.set/difference (apply clojure.set/union %&) (apply clojure.set/intersection %&))", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 88, "code": "(fn [s1 s2] (set (concat (filter #(not (contains? s2 %)) s1) (filter #(not (contains? s1 %)) s2))))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference\n   (clojure.set/union a b)\n   (clojure.set/intersection a b)))", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 88, "code": "(fn [s1 s2] (set (concat (filter #(not (contains? s1 %)) s2) (filter #(not (contains? s2 %)) s1))))", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 88, "code": "(fn symmetric-diff [left right]\n  (let [union (into left right)\n        common (clojure.set/intersection left right)]\n    (clojure.set/difference union common)))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 88, "code": "(fn [a b]\n  (let [concatenated-list (concat a b)]\n    (set (filter #(= 1 (count (filter #{%} concatenated-list))) concatenated-list))\n  )\n)", "user": "5da975b9e4b000c986472c32"}, {"problem": 88, "code": "(fn fun [set1 set2]\n  (let [\n      x  (apply disj set1 set2)\n      y  (apply disj set2 set1)]    \n    (cond\n     \t(empty? x) y\n     \t(empty? y) x\n    \t:else (apply conj x y)\n    )\n      \n    \n    \n  )\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 88, "code": "(fn [xs ys] (clojure.set/union (clojure.set/difference xs ys) (clojure.set/difference ys xs)))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 88, "code": "(fn symdiff [a b]\n  (let [b-not-a (remove #(contains? b %) a)\n        a-not-b (remove #(contains? a %) b)]\n    (into #{} (concat b-not-a a-not-b))))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 88, "code": "(fn [a b]\n                 (clojure.set/difference (clojure.set/union a b)\n                                         (clojure.set/intersection a b)\n                                         )\n                 )", "user": "5d1d4ec6e4b02ea6f0fb699f"}, {"problem": 88, "code": "#(clojure.set/union\n (clojure.set/difference %1 %2)\n (clojure.set/difference %2 %1))", "user": "5dab11cde4b000c986472c45"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5d965c73e4b0d3f9b434ad33"}, {"problem": 88, "code": "#(    set    ( filter  (  fn  [ x]     ( if (        (set  (map %1 %2)  )  x)      false   true                )                      )        (into %1 %2)    )            )", "user": "5da98129e4b000c986472c33"}, {"problem": 88, "code": "(fn f\n  ([s1 s2]\n   (set (concat\n         (f s1 s2 #{})\n         (f s2 s1 #{}))))\n  ([s1 s2 result]\n   (if (empty? s1)\n     result\n    (let [v (first s1)\n          vs (rest s1)]\n      (if (s2 v)\n        (f vs s2 result)\n        (f vs s2 (conj result v)))))))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 88, "code": "(fn [set-1 set-2]\n  (clojure.set/union (clojure.set/difference set-1 set-2) (clojure.set/difference set-2 set-1)))", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 88, "code": "(fn dif[s1 s2](loop[ret #{}\n                      v (vec(sort(into (vec s1)(vec s2))))]\n                  (println ret v)\n                  (cond\n                    (empty? v) (set ret)\n                    :else (recur (cond\n                                   (empty? ret)(conj ret (first v))\n                                   (=(last ret)(first v))(set(filter #(not= (last ret) %) ret))\n                                   :else (sort(conj ret (first v))))\n                                 (vec(rest v))\n                                 ))))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 88, "code": "(fn [a b]\n  (set (remove (set (filter a b)) (set (concat a b)))))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 88, "code": "(fn symmetric-diff [s1 s2]\n  (reduce (fn [acc val]\n            (if (acc val)\n              (disj acc val)\n              (conj acc val)))\n          s2 s1))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/difference\n    (clojure.set/union x y)\n    (clojure.set/intersection x y)))", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 88, "code": "(fn [set1 set2] \n  (clojure.set/union \n   (clojure.set/difference set1 set2)\n   (clojure.set/difference set2 set1)))", "user": "5dbe63bde4b09f47823971c7"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5dbe27c3e4b09f47823971c4"}, {"problem": 88, "code": "#(loop [ s1 % s2 %2 re #{}]\n   (let [ f (first s1) ]\n     (cond\n        (not f) (clojure.set/union re s2)\n        (contains? s2 f) (recur (rest s1) (disj s2 f) re)\n        :else (recur (rest s1) s2 (conj re f)))))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5db6cc4ae4b010eb3c36cd3b"}, {"problem": 88, "code": "(fn symmetric-difference [s1 s2]\n  (let [result1\n        (->>\n          s1\n          (reduce\n            (fn [acc curr]\n              (if (contains? s2 curr)\n                acc\n                (conj acc curr)))\n            #{}))\n        result2\n        (->>\n          s2\n          (reduce\n            (fn [acc curr]\n              (println acc curr)\n              (if (contains? s1 curr)\n                acc\n                (conj acc curr)))\n            #{}))]\n    (apply merge result1 result2)))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 88, "code": "(fn [s1 s2] (reduce #(if (contains? % %2) (disj % %2) (conj % %2)) #{} (concat s1 s2)))", "user": "5da8b8ece4b000c986472c28"}, {"problem": 88, "code": "(fn sym_diff [s1 s2] {:pre (every? set? [s1 s2])}\n\t(into (into #{} (filter #(not (contains? s2 %)) s1)) (filter #(not (contains? s1 %)) s2))\n)", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 88, "code": "(fn [a b]\n  (let [diff #(set (filter (comp not %2) %1))]\n    (set (concat (diff a b) (diff b a)))))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 88, "code": "(fn [s1 s2]\n  (loop [union (clojure.set/union s1 s2)\n         intersection (clojure.set/intersection s1 s2)\n         result (transient union)]\n    (if (seq intersection)\n      (recur union (rest intersection) (disj! result (first intersection)))\n      (persistent! result))))", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 88, "code": "#(->> (concat %1 %2)\n      sort\n      (partition-by identity)\n      (group-by count)\n      ((fn [x] (get x 1)))\n      (apply concat)\n      set)", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 88, "code": "(fn [x y]\n  (into (clojure.set/difference x y)\n        (clojure.set/difference y x)))", "user": "5db19599e4b010eb3c36cd05"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 88, "code": "(fn [a b]\n  (let [not-a (remove #(contains? a %) b)\n        not-b (remove #(contains? b %) a)]\n    (-> (concat not-a not-b)\n        (set))))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 88, "code": "(fn [set1 set2] (set(concat (filter (complement set1) set2)\n                          (filter (complement set2) set1))))", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 88, "code": "#(let [x %1\n      y %2\n      diff (clojure.set/difference x y) diff2 (clojure.set/difference y x) ans (clojure.set/union diff diff2)]ans)", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [f #(apply disj % %2)]\n    (reduce into [(f s1 s2) (f s2 s1)])))", "user": "4fbb7010e4b081705acca2e7"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference  %1 %2) (clojure.set/difference  %2 %1))", "user": "5dd69c8ce4b0948ae9d9ad83"}, {"problem": 88, "code": "(fn xxx [a b] ( set (concat (filter #( not (contains? a %1)) b) (filter #(not (contains? b %1)) a))))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 88, "code": "(fn sym-diff [a b]\n  (let [diff (fn [coll1 coll2]\n               (loop [rem coll1\n                      diff #{}]\n                 (if (empty? rem)\n                   diff\n                   (let [head (first rem)\n                         tail (rest rem)\n                         diff (if (contains? coll2 head)\n                                diff\n                                (conj diff head))]\n                     (recur tail diff))\n                   )\n                 )\n               )]\n    (clojure.set/union (diff a b) (diff b a))\n    )\n  )", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [els (clojure.set/union s1 s2) inter (clojure.set/intersection s1 s2)]\n    (set (filter #(not (contains? inter %)) els))))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 88, "code": "(fn symmetric-difference [a b]\n  (clojure.set/union\n   (clojure.set/difference a b)\n   (clojure.set/difference b a)))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 88, "code": "(fn [s1 s2]\n   (clojure.set/union\n    (clojure.set/difference\n     s1 (clojure.set/intersection s1 s2))\n    (clojure.set/difference\n     s2 (clojure.set/intersection s1 s2))))", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 88, "code": "(fn [set1 set2]\n  (into (clojure.set/difference set1 set2) (clojure.set/difference set2 set1))\n)", "user": "5de6484ce4b0986d99407f66"}, {"problem": 88, "code": "(fn [x y] (into (into #{} (remove x y)) (remove y x)))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "58273e82e4b051871117bf1b"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat\n         (reduce disj s1 s2)\n         (reduce disj s2 s1))))", "user": "529dfc6de4b04e0c58e87b8a"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set  (concat (clojure.set/difference s1 s2) ( clojure.set/difference s2 s1))))", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 88, "code": "#(let [union (clojure.set/union %1 %2)] (clojure.set/union (clojure.set/difference union %1) (clojure.set/difference union %2)))", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5dfc457de4b0a607a9a45cea"}, {"problem": 88, "code": "(fn [a b]\n  (set (filter\n    (fn [x] (not= (contains? a x) (contains? b x)))\n    (clojure.set/union a b)\n  )))", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 88, "code": "(fn symmetric-difference [set1 set2] (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 88, "code": "(fn [a b]\n   (let [x (remove nil? (for [el a]\n                          (if (get b el) nil el)))\n         y (remove nil? (for [el b]\n                          (if (get a el) nil el)))]\n     (into (hash-set) (concat x y))))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 88, "code": "(fn [coll1 coll2] (clojure.set/union (clojure.set/difference coll1 coll2) (clojure.set/difference coll2 coll1)))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 88, "code": "(fn [set1 set2] (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))", "user": "5dfe3928e4b0a607a9a45d04"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 88, "code": "(fn [a b] (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 88, "code": "(fn [set1 set2]\n  (let [intersec (clojure.set/intersection set1 set2)]\n    (into\n     (clojure.set/difference set1 intersec)\n     (clojure.set/difference set2 intersec)\n   )\n  )\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 88, "code": "#(set (for [x (concat %1 %2) :when (not= (%1 x) (%2 x))] x))", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5de8648de4b0986d99407f7c"}, {"problem": 88, "code": "(fn diff1 [set1 set2]\n  (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 88, "code": "(fn [xs ys]\n  (let [only-in-xs (clojure.set/difference xs ys)\n        only-in-ys (clojure.set/difference ys xs)]\n    (clojure.set/union only-in-xs only-in-ys)))", "user": "5e0e14bde4b099d064962fa3"}, {"problem": 88, "code": "(fn [xs ys] (clojure.set/union (clojure.set/difference xs ys) (clojure.set/difference ys xs)))", "user": "5e1754abe4b00200644e3d53"}, {"problem": 88, "code": "(fn simmetry\n  [seqI seqII]\n  (->> (concat seqI seqII)\n       frequencies\n       sort\n       (reduce (fn [accumulator [k v]]\n                 (if (= v 1)\n                   (conj accumulator k)\n                   accumulator)) [])\n       (into #{})))", "user": "5df0f338e4b093ff717275c6"}, {"problem": 88, "code": "(fn [a b]\n   (apply hash-set (concat (filter #(not (b %)) a) (filter #(not (a %)) b))))", "user": "5073e7fde4b054001656accb"}, {"problem": 88, "code": "#(into (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "530a6cbae4b02e82168697be"}, {"problem": 88, "code": "#(into (apply disj %1 %2) (apply disj %2 %1))", "user": "5e1a3989e4b0dc9594008511"}, {"problem": 88, "code": "(fn [a b] (apply sorted-set (clojure.set/union (clojure.set/difference b a ) (clojure.set/difference a b )) ))", "user": "5ddbd202e4b0948ae9d9adb4"}, {"problem": 88, "code": "(fn [s t]\n    (->> (into s t)\n         (filter #(not= (s %) (t %)))\n         set))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 88, "code": "#(set (clojure.set/union (remove %2 %1) (remove %1 %2)))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 88, "code": "(fn [a b]\n   (let [all (concat a b)] \n     (reduce \n      (fn [c d]\n        \n        (println all a b c d) \n        (if (or (not (.contains a d)) (not (.contains b d)))  (conj c d) c) \n        ) \n      #{} all))\n )", "user": "5dbb5200e4b09f47823971a9"}, {"problem": 88, "code": "(fn [x y]\n   (clojure.set/union\n     (clojure.set/difference x y)\n     (clojure.set/difference y x)))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 88, "code": "(fn [x y]\n    (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 88, "code": "(fn [set1 set2] (into (apply disj set1 set2) (apply disj set2 set1)))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 88, "code": "(fn [a b]\n  (set (remove (comp a b) (into a b))))", "user": "5d929ceae4b0915913b1d412"}, {"problem": 88, "code": "(fn [col1 col2]\n             (reduce (fn [result x]\n                       (if (not (contains? (clojure.set/intersection col1 col2) x))\n                         (conj result x)\n                         result))\n                     #{} (into col1 col2)))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 88, "code": "(fn [a b]\n  (set (remove (every-pred a b) (into a b))))", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 88, "code": "(fn [a-set b-set]\n  (set (concat (filter (complement a-set) b-set)\n               (filter (complement b-set) a-set)))\n  )", "user": "5e257a33e4b05b4b01516166"}, {"problem": 88, "code": "(fn [a b] (into #{} (filter #(not (and (contains? a %) (contains? b %))) (into a b))))", "user": "5d7a748ce4b02e6b30c93547"}, {"problem": 88, "code": "(fn sym [a b]\n  (loop [c 0 result '()]\n    (if (= c 1)\n      (set (concat result\n            (set (remove nil? (map (fn t [d] (if (not (contains? b d)) d)) a)))))\n      (recur\n       (inc c)\n       (concat result\n             (set (remove nil? (map (fn t [d] (if (not (contains? a d)) d)) b))))))))", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set \n   (filter\n    (complement #(and (contains? s1 %) (contains? s2 %)))\n   \t(set (concat s1 s2)))))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))\n  \n;(fn [a b]\n ; (concat (filter (complement b) a) (filter (complement a) b)))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 88, "code": "(fn [s1 s2]\n   (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2)\n      (clojure.set/difference %2 %1))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 88, "code": "(fn [s1 s2] (let [unioned (clojure.set/union s1 s2)\n                           intersected (clojure.set/intersection s1 s2)]\n                     (clojure.set/difference unioned intersected)))", "user": "5e3975a3e4b01d43a70e8dd3"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/union (set (for [x set1 :when (not (contains? set2 x))] x)) (set (for [x set2 :when (not (contains? set1 x))] x))))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [i (clojure.set/intersection s1 s2)\n        d1 (clojure.set/difference s1 i)\n        d2 (clojure.set/difference s2 i)]\n    (clojure.set/union d1 d2)))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set\n   (concat\n    (filter #(not (contains? s1 %)) s2)\n    (filter #(not (contains? s2 %)) s1)\n    )\n   )\n  )", "user": "5e491182e4b043cd24807a46"}, {"problem": 88, "code": "(fn [a b]\n    (clojure.set/union\n      (clojure.set/difference a b)\n      (clojure.set/difference b a)\n    )\n  )", "user": "5e2586afe4b05b4b01516167"}, {"problem": 88, "code": "(fn [s1 s2]\n    (let [diff (fn [s1 s2] (set (filter #(not (s1 %)) s2)))]\n      (into (diff s1 s2) (diff s2 s1))))", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [fs1 (filter #(not (contains? s2 %)) s1)\n        fs2 (filter #(not (contains? s1 %)) s2)]\n    (set (concat fs1 fs2))))", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 88, "code": "(fn sym-diff [a b]\n    (reduce\n      #(conj %1 (first %2))\n      #{} \n      (filter \n        #(= (count %) 1) \n        (partition-by identity (sort (concat a b))))))", "user": "5d078e2de4b0cc9c915881fa"}, {"problem": 88, "code": "(fn [a b]\n (let [fil (fn [a b] (filter #(not (b %)) a))\n       ua (fil a b)\n       ub (fil b a)\n       res (set (concat ua ub))]\n  res))", "user": "592334c7e4b0a390037439ee"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 88, "code": "(fn [s0 s1]\n        (clojure.set/difference (clojure.set/union s0 s1) (clojure.set/intersection s0 s1)))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 88, "code": "(fn symmetric-difference\n  [coll1 coll2]\n  (let [combined (concat nil (vec coll1) nil (vec coll2)) numbers (frequencies combined)]\n    (apply sorted-set (filter #(< (get numbers %) 2) combined))))", "user": "5e4e3c31e4b027a2e10ac0ad"}, {"problem": 88, "code": "(fn [& sets]\n    (set (->> (frequencies (mapcat vec sets))\n              (filter (fn [[_ val]]\n                      (= val 1)))\n              keys)))", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 88, "code": "(fn sym-diff [a b]\n  (let [dis (clojure.set/intersection a b)\n        a-sub (clojure.set/difference a dis)\n        b-sub (clojure.set/difference b dis)]\n    (into a-sub b-sub)))", "user": "5e663073e4b0fd0acd1586bc"}, {"problem": 88, "code": "#(reduce (fn [a b] (if (and (contains? % b) (contains? %2 b)) a (conj a b)))  #{} (apply merge % %2))", "user": "5e63ffa0e4b0fd0acd1586a6"}, {"problem": 88, "code": "(fn set-diff [a b]\n  (set\n   ; combine a and b (a U b) and calculate diff\n   (filter\n    (fn [x]\n      ; diff: x is in a or b but not both (logical XOR)\n      (let [x-in-a (contains? a x)\n            x-in-b (contains? b x)]\n        (and\n         (or x-in-a x-in-b)\n         (or (not x-in-a) (not x-in-b)))))\n    (clojure.set/union a b))))", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 88, "code": "(fn [a b] \n  (set (filter\n   #(not (and (contains? a %) (contains? b %)))\n   (set (concat a b)))))", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 88, "code": "#(clojure.set/difference (into %1 %2) (clojure.set/intersection %1 %2))", "user": "5e71f267e4b085ba37836dc1"}, {"problem": 88, "code": "(fn haha [set1 set2]\n  (set \n   (sort \n   \t(concat \n   \t\t(filter #(not (contains? set2 %)) set1)\n   \t\t(filter #(not (contains? set1 %)) set2)))))", "user": "5e78e8d3e4b085ba37836dfd"}, {"problem": 88, "code": "(fn [x y]\n    (set (concat (filter (complement (fn [item] (get y item))) x)\n                 (filter (complement (fn [item] (get x item))) y))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference\n   (clojure.set/union a b)\n   (clojure.set/intersection a b)))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 88, "code": "(fn [x y] (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "5e839edde4b09a7a73c8bbba"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "4eb70649535d7eef30807373"}, {"problem": 88, "code": "#(clojure.set/union \n (clojure.set/difference %1 %2) \n (clojure.set/difference %2 %1))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 88, "code": "(fn func [set1 set2]\n  (let [a (filter #(not (contains? set2 %1)) set1)\n        b (filter #(not (contains? set1 %1)) set2)]\n    (set (concat a b))))", "user": "5e805895e4b085ba37836e44"}, {"problem": 88, "code": "(fn [a b](let [gx (fn[x] (if x 1 0)) hx (fn[x] (not= 0 x))]\n             (set (filter #(hx (bit-xor (gx (contains? a %)) (gx (contains? b %)))) (clojure.set/union a b)))))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into #{} (concat (filter #((complement contains?) s2 %) s1) (filter #((complement contains?) s1 %) s2))))", "user": "5e7f62cce4b085ba37836e3b"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into #{}\n        (concat (remove #(s1 %) s2)\n                (remove #(s2 %) s1))))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "5e8f87c7e4b0cb0169546342"}, {"problem": 88, "code": "#(let [it (clojure.set/intersection %1 %2)]\n   (clojure.set/union (clojure.set/difference %1 it) (clojure.set/difference %2 it))\n)", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5be9ad9be4b0f319e2d7ec76"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [a (remove #(contains? s2 %) s1)\n        b (remove #(contains? s1 %) s2)]\n    (set (concat a b))))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 88, "code": "(fn [x y]\n\t(set (\n          concat \n          (filter #(not (x %)) y)\n          (filter #(not (y %)) x)\n          )\n     )\n)", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 88, "code": "(fn symmetric-differ\n  [a b]\n  (clojure.set/difference\n   (clojure.set/union a b)\n   (clojure.set/intersection a b)))", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set\n    (concat\n      (filter (complement s2) s1)\n      (filter (complement s1) s2))))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 88, "code": "(fn symetricDiff\n  [n x]\n  (let [y (clojure.set/intersection n x)\n        n2 (clojure.set/difference n y)\n        x2 (clojure.set/difference x y)]\n    (clojure.set/union n2 x2)))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 88, "code": "(fn set-diff [setx sety]\n  (set\n    (concat\n      (filter (complement sety) setx)\n      (filter (complement setx) sety))))", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5e950310e4b0fbed045a3802"}, {"problem": 88, "code": "#((comp set concat) (apply disj % %2) (apply disj %2 %))", "user": "5e7dc2d8e4b085ba37836e2f"}, {"problem": 88, "code": "(fn symmetric-difference\n  [n m]\n  (clojure.set/difference\n   (clojure.set/union n m)\n   (clojure.set/intersection n m)))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 88, "code": "#(clojure.set/union\n  \t(clojure.set/difference %1 %2)\n    (clojure.set/difference %2 %1))", "user": "5ea2e6bfe4b00a66d4a95197"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 88, "code": "#(apply sorted-set (disj (into (into #{} (for[x %1] (if (not (contains? %2 x)) x))) (into #{} (for[x %2] (if (not (contains? %1 x)) x)))) nil))", "user": "5e85d0bde4b09a7a73c8bbd6"}, {"problem": 88, "code": "(fn [a b]\n  (let [a-only (set (remove b a))\n        b-only (set (remove a b))]\n    (into a-only b-only)))", "user": "59750a68e4b01722bebd4cba"}, {"problem": 88, "code": "(fn [s1 s2]\n    (clojure.set/union (clojure.set/difference s1 s2)\n                       (clojure.set/difference s2 s1)))", "user": "5da71eaee4b000c986472c15"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5eaba9c0e4b00a66d4a951d6"}, {"problem": 88, "code": "(fn solution [A B]\n  (clojure.set/difference (clojure.set/union A B) (clojure.set/intersection A B)))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5b2be9b1e4b025bcb146f2b0"}, {"problem": 88, "code": "(fn sym-diff [a b]\n  (clojure.set/union (clojure.set/difference a b)\n             (clojure.set/difference b a)))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 88, "code": "(fn [s1 s2]\n  (->> (concat (seq s1) (seq s2))\n       (group-by identity)\n       (filter #(= 1 (count (val %))))\n       (keys)\n       (into #{})))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)(clojure.set/difference %2 %1))", "user": "5e9683f1e4b0157ca96647c7"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 88, "code": "#(into (set (remove %2 %1)) (remove %1 %2))", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 88, "code": "#(set (mapcat remove [%1 %2] [%2 %1]))", "user": "5e67ab18e4b0e171e103368a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                   (clojure.set/difference  %2 %1))", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 88, "code": "#(clojure.set/union\n (clojure.set/difference %1 %2)\n (clojure.set/difference %2 %1))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 88, "code": "(fn diff [a b] \n  (into (sorted-set) \n        (apply concat \n               (filter #(= (count %) 1) \n                       (map val \n                            (group-by identity (concat a b)))))))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 88, "code": "(fn [a b]                                 \n  (let [i (clojure.set/intersection a b)           \n        [d1 d2] (map #(apply disj % i) [a b])]      \n   (clojure.set/union d1 d2)))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "5ed3c43be4b016b56eae05c4"}, {"problem": 88, "code": "(fn set-diff [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 88, "code": "(fn [a b] (into (set (remove a b)) (remove b a)))", "user": "512700c4e4b083bb8f88cf14"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2)\n                    (clojure.set/difference %2 %1))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (let [not-in-first (clojure.set/difference s1 s2)\n        not-in-second (clojure.set/difference s2 s1)]\n    (set (concat not-in-first not-in-second))))", "user": "5eac172fe4b00a66d4a951dd"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 88, "code": "(fn mapset [set1 set2]\n\n(set (concat\n    (reduce (fn [a v]  (if (contains? set2 v) a (conj a v))) #{} set1)\n    (reduce (fn [a v] (if (contains? set1 v) a (conj a v))) #{} set2)\n    )\n  ))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 88, "code": "#(clojure.set/difference \n   (clojure.set/union %1 %2) \n   (clojure.set/intersection %1 %2))", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5ed03b7fe4b016b56eae05ae"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [diff #(filter (fn [e] (not (contains? %2 e))) %1)]\n    (set (concat #{} (diff s1 s2) (diff s2 s1)))\n    ))", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 88, "code": "(fn [s1 s2] (set (concat (filter #(not (contains? s2 %)) (for [x s1] x))\n                         (filter #(not (contains? s1 %)) (for [x s2] x)))))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 88, "code": "(fn\n  [a b]\n  (reduce (fn [acc x]\n            (if (contains? acc x)\n              (disj acc x)\n              (conj acc x)))\n          a\n          b))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into (reduce disj s1 s2) (reduce disj s2 s1)))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 88, "code": "(fn [xs, ys] (clojure.set/difference (clojure.set/union xs ys) (clojure.set/intersection xs ys)))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5eeeb000e4b07c55ae4a0515"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5eee9352e4b07c55ae4a0512"}, {"problem": 88, "code": "(fn sym-diff [a b]\n  (->> (concat a b)\n       (sort)\n       (partition-by identity)\n       (filter (fn [x] (= (count x) 1)))\n       (apply concat)\n       (into #{})))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 88, "code": "(fn [as bs]\n  (letfn [(ssub [s a b] (reduce #(if (get b %2) %1 (conj %1 %2)) s a))]\n    (ssub (ssub #{} as bs) bs as)))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 88, "code": "(fn [a b] \n  (into #{} (apply concat \n                   (filter #(= 1 (count %)) \n                                  (vals (group-by identity (concat a b)))))))", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 88, "code": "(fn [a b]\n  \"a\u3068b\u3092union\u3057\u305fset\u304b\u3089intersection\u3092\u53d6\u308a\u9664\u304f\"\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b)\n                     (clojure.set/difference b a)))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 88, "code": "(fn [x y]\n  (set (remove (set (filter x y)) (set (concat x y)))))", "user": "5df08767e4b093ff717275bf"}, {"problem": 88, "code": "(fn symmetric-difference\n  [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (into (set (filter (fn [e] (not (contains? s1 e))) s2))\n                             (set (filter (fn [e] (not (contains? s2 e))) s1))))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 88, "code": "(fn sol88 \n  [s1 s2]\n  (set (remove (set (keep s1 s2))\n               (into s1 s2))))", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 88, "code": "(fn [a b] (set (remove (set (filter a b)) (into a b))))", "user": "51316a63e4b0431ba07e7feb"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5ef82119e4b09b61f08553c6"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5f01952fe4b0cf489e8d7f22"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat (filter #(not (s1 %)) s2)\n               (filter #(not (s2 %)) s1))))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 88, "code": "#(if (= #{} %1)\n   %2\n   (if (= #{} %2)\n    %1\n     (apply conj (apply disj %2 %1) (apply disj %1 %2)))\n )\n; stolen #(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 88, "code": "(fn [x1 x2]\n   (set (reduce \n          (fn [arr elem]\n            (if (some #{elem} arr)\n              (remove #{elem} arr)\n              (conj arr elem)))\n          x1\n          x2)))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 88, "code": "(fn [l r] (set (into (filter #(not (contains? r %)) l) (filter #(not (contains? l %)) r))))", "user": "4eb97234535dfed6da9c6d53"}, {"problem": 88, "code": "(fn set-diff1\n  [x y]\n  (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x)))", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 88, "code": "#(apply disj (into % %2) (map % %2))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 88, "code": "(fn [s t] (clojure.set/union (clojure.set/difference s t) (clojure.set/difference t s)))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 88, "code": "(fn [A B]\n   (set (concat (filter #(not (A %)) B) (filter #(not (B %)) A))))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5509a23ee4b06e50f9beb11a"}, {"problem": 88, "code": "(fn a-set\n         ([s1 s2] (a-set s1 s2 #{}))\n         ([s1 s2 out] (cond \n                        (empty? s1) (set(concat out s2))\n                        (contains? s2 (first s1)) (a-set (rest s1) (disj s2 (first s1)) out)\n                        :else (a-set (rest s1) s2 (conj out (first s1)))\n                        )\n          \n))", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5e9b6471e4b0157ca96647f0"}, {"problem": 88, "code": "(fn clj4\n  [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 88, "code": "#(into #{} (concat (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5f18444ee4b091ba50b4dbd3"}, {"problem": 88, "code": "#(set (for [[k v] (frequencies (concat %1 %2)) :when (= 1 v)] k))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 88, "code": "(fn func [x y]\n  (clojure.set/difference\n    (clojure.set/union x y)\n    (clojure.set/intersection x y)))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 88, "code": "(fn [a b]\n  (set (filter (comp not nil?) (concat (for [a-member a]\n                              (if (not (b a-member))\n                                a-member))\n                            (for [b-member b]\n                              (if (not (a b-member))\n                                b-member))))))", "user": "4f0f7339535d0136e6c2233e"}, {"problem": 88, "code": "(fn [set1 set2]\n  (let [diff1 (clojure.set/difference set1 set2)\n        diff2 (clojure.set/difference set2 set1)]\n    (apply sorted-set (clojure.set/union diff1 diff2))))", "user": "5f081f6de4b0cf489e8d7f5a"}, {"problem": 88, "code": "(fn difference [s1 s2]\n\t(reduce #(if (%1 %2) (disj %1 %2) (conj %1 %2)) s1 s2)\n)", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 88, "code": "(fn [s1 s2]\n    (clojure.set/difference\n     (clojure.set/union s1 s2)\n     (clojure.set/intersection s1 s2)))", "user": "4e617114535d8ccf87e9fe5b"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 88, "code": "(fn foo [a b]\n(let [diffy #(for [i %1]\n(if (nil? (%2 i))\ni\n(do)\n)\n)]\n(set (filter identity (set (concat (set (diffy a b)) (set (diffy b a)))))\n))\n)", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference %1 %2)\n              (clojure.set/difference %2 %1)))", "user": "5d83b9aae4b0915913b1d386"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (-> #{}\n      (into (remove #(contains? s2 %) s1))\n      (into (remove #(contains? s1 %) s2))))", "user": "5f300f28e4b033932238a682"}, {"problem": 88, "code": "(fn [a b]\n  ((fn sym-diff [u v result]\n     (cond (empty? u) (into result v)\n           (empty? v) (into result u)\n           :else (let [cur (first u)] \n                   (if (contains? v cur) (sym-diff (rest u) (disj v cur) result)\n                     (sym-diff (rest u) v (conj result cur)))))) a b #{}))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 88, "code": "(fn [a b]\n   (let [common (clojure.set/intersection a b)\n         a-other (clojure.set/difference a b)\n         b-other (clojure.set/difference b a)\n         ]\n     (clojure.set/union a-other b-other)))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 88, "code": "(fn [a b]\n  (set (for [[id freq] (frequencies (concat a b))\n             :when (= freq 1)]\n         id)))", "user": "5ebff55de4b00a66d4a95286"}, {"problem": 88, "code": "(fn [s1 s2]\n  (reduce\n    (fn [s v]\n      (if (not (and (contains? s1 v) (contains? s2 v)))\n        (conj s v)\n        s))\n     #{} (concat s1 s2)))", "user": "5f3ddc71e4b004f08c61c551"}, {"problem": 88, "code": "(fn symdiff\n  [set1 set2]\n  (set\n   (filter\n    #(not (and (contains? set1 %)\n               (contains? set2 %)))\n    (into set1 set2))))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [a (map #(when (not (contains? s2 %)) %) s1)\n        b (map #(when (not (contains? s1 %)) %) s2)]\n    (set (remove nil? (clojure.set/union a b)))))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 88, "code": "#(let [u (clojure.set/union %1 %2)\n       i (clojure.set/intersection %1 %2)]\n    (set (filter (complement i) u)))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 88, "code": "(fn sim-diff [set1 set2]\n  (clojure.set/union \n   (clojure.set/difference set1 set2) \n   (clojure.set/difference set2 set1)))", "user": "5d92b543e4b0915913b1d414"}, {"problem": 88, "code": "#(->> (clojure.set/difference %1 %2)\n      (clojure.set/union (clojure.set/difference %2 %1)))", "user": "5f0c3da4e4b0f30dddfb5d49"}, {"problem": 88, "code": "(fn [x y]\n  (set (let [fil (set (filter x y))]\n (clojure.set/union (remove fil x) (remove fil y))))\n)", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 88, "code": "(fn [a b] (set (filter #(not (and (a %) (b %)))\n                        (into a b))))", "user": "5992dc6ae4b0866487ed0d7d"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5f38eecce4b0574c87022c72"}, {"problem": 88, "code": "(fn diff [s1 s2] (set (concat (filter (fn [x] (not (contains? s2 x))) s1) (filter (fn [x] (not (contains? s1 x))) s2))))", "user": "5f313d01e4b0574c87022c28"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2))\n )", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 88, "code": "(fn symmetric-difference\n  [a b]\n  (let [longer\n        (first\n          (sort-by #(count %1) [a b]))\n        shorter\n        (second\n          (sort-by #(count %1) [a b]))\n        isection (filter #(contains? shorter %) longer)]\n    \n    ;; what happens when you sort a collection without an idea of order-ness like a set?\n    (clojure.set/difference\n      (into a b)\n      isection)))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5f0dfa48e4b0f30dddfb5d55"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (filter\n      #(\n        or (and (contains? s1 %) (not (contains? s2 %)))\n            (and (contains? s2 %) (not (contains? s1 %)))\n\n        )\n      (concat s1 s2)))\n  )", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 88, "code": "#(set (concat (filter (complement %2) %)\n                      (filter (complement %) %2)))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 88, "code": "(fn [xs ys] (clojure.set/difference (clojure.set/union xs ys) (clojure.set/intersection xs ys)))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 88, "code": "(fn symdiff [s1 s2]\n  (set (concat (clojure.set/difference s1 s2) (clojure.set/difference s2 s1))))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 88, "code": "(fn [a b]\n (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 88, "code": "(fn sys-diff\n  [set-a set-b]\n  (clojure.set/difference (clojure.set/union set-a set-b)\n                          (clojure.set/intersection set-a set-b))\n  )", "user": "5f29837ee4b033932238a64f"}, {"problem": 88, "code": "(fn symetric \n  [set1 set2]\n  (let [notS1 (filter #(not (set1 %1)) set2)\n        notS2 (filter #(not (set2 %1)) set1)]\n    (set (concat notS1 notS2))))", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 88, "code": "(fn [a b] (reduce #(if (or (and (a %2) (not (b %2)))\n                           (and (b %2) (not (a %2)))) (conj %1 %2) %1) #{} (concat a b)))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 88, "code": "(fn sym-diff [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "5f63684be4b02876ed9fd012"}, {"problem": 88, "code": "(fn f [s1 s2]\n  (set (remove nil? (for [e (clojure.set/union s1 s2)] \n                      (if (or ((complement contains?) s1 e) \n                              ((complement contains?) s2 e))\n                        e)))))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 88, "code": "(fn [s1 s2] \n  (clojure.set/difference\n    (clojure.set/union s1 s2) \n    (clojure.set/intersection s1 s2)))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 88, "code": "(fn\n[a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a))\n)", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set (concat\n       (remove s2 s1)\n       (remove s1 s2))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5f6caa19e4b02876ed9fd056"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 88, "code": "(fn [sa sb] (set (filter #(not (and (contains? sa %) (contains? sb %))) (into sa sb))))", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 88, "code": "(fn symmetric-diff\n  [s1 s2]\n  (apply sorted-set (concat (remove s1 s2) (remove s2 s1))))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 88, "code": "#(set (remove nil? (for [x (frequencies  (concat %1 %2))]\n      \n       (if (< (nth x 1) 2)\n           (nth x 0)\n           )\n          \n      \n      )))", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 88, "code": "(fn [x y]\n    (let [a (set(map first(rest(set(for [lst1 x\n          lst2 y]\n        (if (= lst1 lst2)\n            [lst1 lst2]))))))\n          b (distinct (concat x y))]\n        (apply sorted-set (remove (set a) (set b))))\n    )", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 88, "code": "(fn[hm1 hm2]\n    (clojure.set/union (clojure.set/difference hm1 hm2) (clojure.set/difference hm2 hm1)))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 88, "code": "(fn [coll1 coll2]\n (clojure.set/union (clojure.set/difference\n coll1 coll2) (clojure.set/difference\n coll2 coll1)))", "user": "563f0fdae4b08d4f616f5ece"}, {"problem": 88, "code": "(fn [x y]\n      (set (reverse(clojure.set/union (clojure.set/difference x y) \n                          (clojure.set/difference y x)))))", "user": "5f737899e4b02876ed9fd099"}, {"problem": 88, "code": "#(clojure.set/union \n  (clojure.set/difference %1 %2) \n  (clojure.set/difference %2 %1))", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [all (concat s1 s2)]\n    (set (filter #(not (and (contains? s1 %) (contains? s2 %)))\n                 all))))", "user": "56b9c644e4b0f2655033593a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 88, "code": "(fn[set1 set2]\n        (clojure.set/union (clojure.set/difference set1 set2) (clojure.set/difference set2 set1)))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 88, "code": "(fn[s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 88, "code": "(fn [x1 x2]\n \t(set (concat (filter (complement x1) x2) \n         \t\t   (filter (complement x2) x1))))", "user": "5f8795d4e4b020286baa5e96"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 88, "code": "#(set (into (remove %1 %2) (remove %2 %1)))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 88, "code": "(fn [f f1]\n     (set (filter (fn [f2]\n                    \n                  (not (and (contains? f f2) (contains? f1 f2))))\n                  \n                  (into f f1)))\n  \n  )", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 88, "code": "(fn [a b]\n  (let [aC (filter #(not (a %1)) b)\n        bC (filter #(not (b %1)) a)]\n    (set (concat aC bC)))\n  )", "user": "5f8330b8e4b01aacbe7a270f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5f810e97e4b0c071e6c840ed"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 88, "code": "(fn symdif [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2)\n                     (clojure.set/difference s2 s1)))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5f419985e4b0955706451fab"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "573102bbe4b0cd1946bd0fbb"}, {"problem": 88, "code": "(fn symdiff\n  [set1 set2]\n  (loop [subset1 set1\n         subset2 set2\n         res #{}]\n    (if-let [item (first subset1)]\n      (if (some #{item} set2)\n        (recur (rest subset1) (disj subset2 item) res)\n        (recur (rest subset1) subset2 (conj res item)))\n      (if (seq subset2)\n        (apply conj res subset2)\n        res))))", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 88, "code": "(fn [s1 s2] (set (remove #(contains? (clojure.set/intersection s1 s2) %) (into s1 s2))))", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2)\n                          (clojure.set/intersection s1 s2)))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 88, "code": "#(set (for [u (concat % %2) :when (not= (% u) (%2 u))] u))", "user": "5f393bd6e4b0574c87022c76"}, {"problem": 88, "code": "#(set (concat (clojure.set/difference %2 %) (clojure.set/difference % %2)))", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 88, "code": "(fn sym-diff\n  [a b]\n  (loop [[ah & at] (seq a) dup_free_b b dup_free_a #{}]\n    (if (nil? ah)\n      (reduce conj dup_free_a dup_free_b)\n      (if (contains? b ah)\n        (recur at (disj dup_free_b ah) dup_free_a)\n        (recur at dup_free_b (conj dup_free_a ah))\n        )\n        )\n      )\n)", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 88, "code": "(fn sym [a b]\n  2   (set (map #(first %) (filter #(= 0 (second %)) (reduce #(update-in %1 [%2] (fn [old] (if (nil? old) 0 (inc old) ))) {} (concat a b))))))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 88, "code": "#(apply merge (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5eb3d02be4b00a66d4a95215"}, {"problem": 88, "code": ";(fn [s1 s2]\n;\t(let [r (fn [sa sb]\n;\t\t\t\t\t\t(reduce (fn [acc v]\n;\t\t\t\t\t\t\t\t\t\t\t(if (contains? sb v)\n;\t\t\t\t\t\t\t\t\t\t\t\tacc\n;\t\t\t\t\t\t\t\t\t\t\t\t(conj acc v)))\n;\t\t\t\t\t\t\t\t\t\t[]\n;\t\t\t\t\t\t\t\t\t\tsa))]\n;\t\t\t(set (concat (r s1 s2) (r s2 s1)))))\n\n#(set (concat (remove % %2) (remove %2 %)))", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union % %2) (clojure.set/intersection % %2))", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/difference\n   (clojure.set/union set1 set2)\n   (clojure.set/intersection set1 set2)))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 88, "code": "(fn [s1 s2] \n  (let [[s-max s-min] (reverse (sort-by count [s1 s2]))]\n    (cond \n     (zero? (count s-max)) #{}\n     (zero? (count s-min)) s-max\n     :else \n      (apply conj\n       (apply disj s1 s2)\n       (apply disj s2 s1)))))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 88, "code": "(fn sim-def [s1 s2]\n    (into (set (filter #(not (contains? s1 %)) s2)) (filter #(not (contains? s2 %)) s1)))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/difference \n    (clojure.set/union x y) \n    (clojure.set/intersection x y)))", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [both (clojure.set/intersection s1 s2)\n        all (clojure.set/union s1 s2)]\n    (clojure.set/difference all both)))", "user": "5e909685e4b0cb016954634d"}, {"problem": 88, "code": "#(clojure.set/union\n    (clojure.set/difference %1 %2)\n    (clojure.set/difference %2 %1))", "user": "5f331015e4b0574c87022c37"}, {"problem": 88, "code": "(fn [xset yset]\n  (loop\n   [xs (seq xset) ys (seq yset) inters () rs ()]\n   (cond\n    (and (empty? xs) (empty? ys))\n    (into #{} rs)\n    (and (not (empty? xs)) (not (empty? ys)))\n    (if (some #(= % (first xs)) ys)\n       (recur (rest xs) (filter #(not= % (first xs)) ys) (conj inters (first xs)) rs)\n       (recur (rest xs) ys inters (conj rs (first xs))))\n    (and (empty? xs) (not (empty? ys)))\n    (recur '() '() inters (into rs ys))\n    (and (not (empty? xs)) (empty? ys))\n    (recur '() '() '() (into rs xs)))))", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 88, "code": "(fn [a b] (set (\n  concat (for [x a :when (not (contains? b x))] x)\n         (for [x b :when (not (contains? a x))] x))))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 88, "code": "(fn sym-diff[s1 s2]\n  (into \n   (reduce disj s1 s2)\n   (reduce disj s2 s1)))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 88, "code": "#(-> (clojure.set/union %1 %2)\n     (clojure.set/difference (clojure.set/intersection %1 %2)))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5fc04417e4b0edf42a5593c6"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 88, "code": "(fn\n  [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 88, "code": "(fn [x y]\n  (let [y-x (filter (complement x) y)\n        x-y (filter (complement y) x)]\n    (set (concat y-x x-y))))", "user": "5a3d7afae4b0447ef91cc5a6"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)\n                ))", "user": "5f6b35c3e4b02876ed9fd04d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 88, "code": "(fn diff \n  [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "5fe5a64de4b05ac5b16ea187"}, {"problem": 88, "code": "(fn sym-diff [a b]\n  (clojure.set/union\n\t(clojure.set/difference a b)\n    (clojure.set/difference b a)))", "user": "5fb8fe30e4b03f550f448223"}, {"problem": 88, "code": "#(apply clojure.set/difference ((juxt clojure.set/union clojure.set/intersection) %1 %2))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 88, "code": "(fn [xs ys]\n (set\n  (concat\n    (filter #(not (xs %)) ys)\n    (filter #(not (ys %)) xs))))", "user": "59d4d126e4b0ef0a1e9b5be9"}, {"problem": 88, "code": "(fn [s1 s2]\n    (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 88, "code": "(comp (partial apply clojure.set/difference) (juxt clojure.set/union clojure.set/intersection))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 88, "code": "(fn [first second]\n   (clojure.set/union (clojure.set/difference first\n                                              (clojure.set/intersection first second))\n                      (clojure.set/difference second\n                                              (clojure.set/intersection first second))\n                      )\n   )", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 88, "code": "(fn [a b] (into (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 88, "code": "(fn  [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2)  (clojure.set/intersection s1 s2))\n  )", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 88, "code": "#(let [left (remove % %2)\n       right (remove %2 %)]\n   (-> #{} (into left) (into right)))", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 88, "code": "(fn set-diff [s1 s2]\n  (let [not-s1 (filter #(not (s1 %)) s2)\n    \tnot-s2 (filter #(not (s2 %)) s1)]\n  (set (concat not-s1 not-s2))))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 88, "code": "(fn [s1 s2]\n        (into (set (remove s2 s1))\n              (remove s1 s2)))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 88, "code": "#(into (clojure.set/difference %2 %1) (clojure.set/difference %1 %2))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 88, "code": "(fn [s0 s1] \n\t(into #{} (concat (filter #(not (contains? s1 %1)) s0) (filter #(not (contains? s0 %1)) s1)))\n)", "user": "5ff4e28ae4b06df49cee1486"}, {"problem": 88, "code": "#(set (concat (filter (comp nil? %1) %2)\n              (filter (comp nil? %2) %1)))\n\n;; #(set (concat (filter (complement %1) %2)\n;;               (filter (complement %2) %1)))\n\n;; #(set (concat (apply disj %1 %2)\n;;               (apply disj %2 %1)))\n\n;; #(->> (for [x (into %1 %2)\n;;               :when (not= (%1 x) (%2 x))]\n;;           x)\n;;         (into #{}))\n\n;; #(clojure.set/union\n;;     (clojure.set/difference % %2)\n;;     (clojure.set/difference %2 %))\n\n;; #(set (mapcat remove\n;;               [%1 %2]\n;;               [%2 %1]))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 88, "code": "(fn sym-diff\n  [s1 s2]\n  (-> (clojure.set/difference s1 s2)\n      (clojure.set/union (clojure.set/difference s2 s1))))", "user": "5ff454a1e4b05ac5b16ea20d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5fd66e61e4b05ac5b16ea10a"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5f5e166ce4b02876ed9fcfed"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2 ) (clojure.set/difference %2 %1))", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 88, "code": "(fn [s1 s2]\n   (set (filter #(not (and (s1 %) (s2 %))) (concat s1 s2))))", "user": "5c30da5ae4b0d62ef62d9f23"}, {"problem": 88, "code": "(fn [set1 set2] \n  (set \n   (concat (remove set2 set1) (remove set1 set2))\n   )\n  )", "user": "6004c750e4b074f607df6645"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "5e42602ae4b01d43a70e8e63"}, {"problem": 88, "code": "(fn sdiff [s1 s2]\n  (let [grouped (reduce (fn [a v]\n                          (assoc a v (conj (get a v) v))) {} (concat s1 s2))]\n    (reduce-kv (fn [a k v]\n                 (if (= 1 (count v))\n                   (conj a k)\n                   a)) #{} grouped)))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 88, "code": "#(set \n  (concat (remove %1 %2)\n          (remove %2 %1)))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 88, "code": "#(->>(for [x (into %1 %2)\n           :when (not= (%1 x) (%2 x))] x)\n     (set))", "user": "5da7176ae4b000c986472c13"}, {"problem": 88, "code": "(fn[sx sy](set(concat (filter (complement sy) sx) (filter (complement sx) sy) )))", "user": "6001460ce4b074f607df6611"}, {"problem": 88, "code": "(fn  [s1 s2]\n  (let [f (fn [s1 s2] (set (filter #((complement contains?) s2 %) s1)))]\n    (into (f s1 s2) (f s2 s1))))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 88, "code": "(fn [a b]\n  (set (filter #(or (false? (contains? a %)) (false? (contains? b %))) (concat a b))))", "user": "600ae927e4b074f607df6689"}, {"problem": 88, "code": "(fn symmetric-difference [A B]\n  (let [inter (clojure.set/intersection A B)]\n    (set (filter\n           (fn [x]\n             (if-not (inter x) x))\n           (clojure.set/union A B)))))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 88, "code": "(fn [xs ys]\n  (set\n    (concat\n      (remove xs ys)\n      (remove ys xs))))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n    (clojure.set/difference s1 s2)\n    (clojure.set/difference s2 s1)))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 88, "code": "#((comp (partial apply clojure.set/difference) (juxt clojure.set/union clojure.set/intersection)) % %2)", "user": "6011b89ee4b074f607df66bc"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 88, "code": "(fn [a b]\n  (letfn [(union [a b] (into a b))\n          (difference [a b] (into #{} (remove #(contains? b %) a)))]\n    (union (difference a b) (difference b a))))", "user": "5338e33fe4b0e30313ee6ca1"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "60096aabe4b074f607df667f"}, {"problem": 88, "code": "(fn diff [s1 s2]\n  (let [union (clojure.set/union s1 s2)\n        intersects (clojure.set/intersection s1 s2)]\n    (clojure.set/difference union intersects)))", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 88, "code": "#(let [f clojure.set/difference]\n   (clojure.set/union (f %1\n                         %2)\n                      (f %2\n                         %1)))", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 88, "code": "(fn [s1 s2]\n   (set (concat (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))\n  )", "user": "6024544be4b0d5df2af2221f"}, {"problem": 88, "code": "(fn [arg1 arg2] (set (map first (filter #(= 1 (second %)) (frequencies (concat arg1 arg2))))))", "user": "5f309144e4b0574c87022c23"}, {"problem": 88, "code": "(fn [s1 s2]\n    (let [diff (fn [s1 s2]\n                 (loop [ans s1 l (seq s2)]\n                   (if-not (seq l)\n                     ans\n                     (recur (disj ans (first l)) (rest l))))\n                 )\n          union (fn [s1 s2]\n                  (loop [ans s1 l (seq s2)]\n                    (if-not (seq l)\n                      ans\n                      (recur (conj ans (first l)) (rest l)))\n                    ))]\n      (union (diff s1 s2) (diff s2 s1))\n      ))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 88, "code": "(fn rr [s1 s2]\n  (set (concat (clojure.set/difference s1 s2)\n          (clojure.set/difference s2 s1))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))\n\n;; anjensan's solution is super concise, wow:\n;; #(set `(~@(% %2 %3) ~@(% %3 %2))) remove", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union\n  (clojure.set/difference a b)\n  (clojure.set/difference b a)))", "user": "602372aae4b0d5df2af2220f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "60231327e4b0d5df2af2220b"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 88, "code": "(fn [s1 s2]\n   (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 88, "code": "#(set (filter\n       (fn [e] (not (and (contains? %1 e) (contains? %2 e))))\n       (clojure.set/union %1 %2)))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference % %2)\n  (clojure.set/difference %2 %))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5a778224e4b013a48d399761"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "600eb95de4b074f607df66a6"}, {"problem": 88, "code": "(fn set-diff [sa sb]\n  (set\n    (concat\n      (filter (complement sb) sa)\n      (filter (complement sa) sb))))", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 88, "code": "#(apply merge (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "5ff64845e4b06df49cee1495"}, {"problem": 88, "code": "(fn my-set-diff [a b]\n  (set (for [x (into a b)\n             :when (not= (a x) (b x))]\n         x)) )", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union \n      (clojure.set/difference a b)\n      (clojure.set/difference b a)))", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 88, "code": "(fn  [a b]\n  (clojure.set/difference\n   (clojure.set/union a b)\n   (clojure.set/intersection a b)))", "user": "60337f1fe4b0d5df2af222c1"}, {"problem": 88, "code": "(fn symmetric-difference [a b]\n  \t(clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b))\n  )", "user": "602cc4d4e4b0d5df2af22274"}, {"problem": 88, "code": "(fn [one two]\n  (clojure.set/union (clojure.set/difference one two) (clojure.set/difference two one)))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 88, "code": "#(->> (for [x (into %1 %2)\n            :when (not= (%1 x) (%2 x))] x)\n      (into #{}))", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "603f1d04e4b0d5df2af2231e"}, {"problem": 88, "code": "(fn [s1 s2]\n    (let [only-s1 (filter #(not (s2 %)) s1)\n          only-s2 (filter #(not (s1 %)) s2)]\n      (set (concat only-s1 only-s2))))", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [i (set (filter s1 s2))]\n    (set (concat (remove i s1) (remove i s2)))))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "6030855de4b0d5df2af222a6"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/difference (clojure.set/union s1 s2)\n                          (clojure.set/intersection s1 s2)))", "user": "60460824e4b02d28681c77bc"}, {"problem": 88, "code": "(fn [set1 set2]\n  (let [union (into set1 set2)\n        intersection (set (filter #(and (contains? set1 %) (contains? set2 %)) union))]\n    (set (remove #(contains? intersection %) union))))", "user": "5f1af439e4b0f565ad998257"}, {"problem": 88, "code": "(fn [xs ys]\n  (set\n  (for [x (clojure.set/union xs ys)\n        :when (or\n               (and (xs x) (not (ys x)))\n               (and (not (xs x)) (ys x))\n               )\n        ] x  \n      )\n    ))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/difference (clojure.set/union s1 s2) (clojure.set/intersection s1 s2)))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 88, "code": "(fn [s1 s2]\n    (set (concat (filter #((complement contains?) s1 %) s2)\n                 (filter #((complement contains?) s2 %) s1))))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 88, "code": "(fn\n   [s1 s2]\n   (clojure.set/difference\n    (clojure.set/union s1 s2)\n    (clojure.set/intersection s1 s2)))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 88, "code": "(fn finder [s1 s2]\n  (into #{} (clojure.set/union\n    (filter #(not (contains? s2 %)) s1)\n    (filter #(not (contains? s1 %)) s2))))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 88, "code": "#(set (clojure.set/union (remove %1 %2) (remove %2 %1)))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 88, "code": "(fn my-difference\n  [s1 s2]\n  (clojure.set/difference\n    (clojure.set/union s1 s2)\n    (clojure.set/intersection s1 s2)))", "user": "4e586949535d8a8b8723a292"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2)\n       (clojure.set/difference %2 %1))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 88, "code": "#(set (concat\n       (filter (comp not %2) %1)\n       (filter (comp not %1) %2)))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n   (clojure.set/select #(not (contains? s2 %)) s1)\n   (clojure.set/select #(not (contains? s1 %)) s2)))", "user": "5fc1c424e4b0edf42a5593d0"}, {"problem": 88, "code": "(fn symmetric-diff\n  [coll1 coll2]\n  (into #{} (remove #(and (contains? coll1 %) (contains? coll2 %)) (concat coll1 coll2))))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 88, "code": "#(set\n  (let [inter (clojure.set/intersection % %2)\n        uni (clojure.set/union % %2)]\n    (for [x uni :when (not (inter x))] x))\n  )", "user": "60471241e4b02d28681c77c9"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 88, "code": "(fn [a b]\n  (let [i (clojure.set/intersection a b)\n        da (clojure.set/difference a i)\n        db (clojure.set/difference b i)]\n    (clojure.set/union da db)))", "user": "60521ea8e4b056659d634205"}, {"problem": 88, "code": "(fn [set1 set2]\n  (clojure.set/difference (clojure.set/union set1 set2) (clojure.set/intersection set1 set2)))", "user": "60593916e4b07e92fa001acc"}, {"problem": 88, "code": "#(apply merge  (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "60654263e4b069485764ddc9"}, {"problem": 88, "code": "(fn my-symmetric-difference\n  ([col1 col2] (my-symmetric-difference col1 col2 #{}))\n  ([col1 col2 newCol] \n   (cond\n     (or (empty? col1) (empty? col2)) (clojure.set/union newCol col1 col2)\n     (contains? col2 (first col1)) (my-symmetric-difference (rest col1) (disj col2 (first col1)) newCol)\n     :else (my-symmetric-difference (rest col1) col2 (conj newCol (first col1))))))", "user": "6065755ee4b069485764ddcc"}, {"problem": 88, "code": "#(into (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "6040e6dbe4b0d5df2af2232a"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 88, "code": "(fn [& sets] (set (apply mapcat remove [sets (reverse sets)])) )", "user": "60689984e4b069485764dde6"}, {"problem": 88, "code": "(fn [a b]\n  (let [a' (clojure.set/difference a b)\n        b' (clojure.set/difference b a)]\n    (clojure.set/union a' b')))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 88, "code": "(fn [a b] (clojure.set/union (clojure.set/difference a b) (clojure.set/difference b a)))", "user": "606e0a42e4b069485764de19"}, {"problem": 88, "code": "(fn [coll1 coll2] (clojure.set/union (clojure.set/difference coll1 coll2) (clojure.set/difference coll2 coll1)))", "user": "606c87aae4b069485764de0d"}, {"problem": 88, "code": "(fn [set1 set2]\n   (loop [s1 set1 s2 set2 result #{}]\n     (if (empty? s2)\n       (if (empty? s1)\n         result\n         (if (contains? set2 (first s1))\n           (recur (rest s1) s2 result)\n           (recur (rest s1) s2 (conj result (first s1)))))\n       (if (contains? set1 (first s2))\n         (recur s1 (rest s2) result)\n         (recur s1 (rest s2) (conj result (first s2)))))))", "user": "606d75f5e4b069485764de13"}, {"problem": 88, "code": "(fn solve [a b]\n  (reduce\n   #(conj %1 %2)\n   (apply disj a b)\n   (apply disj b a)))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [p (filter #(not (s1 %1)) s2)   ;;; los elementos de s2 (filter) en s1\n        q (filter #(not (s2 %1)) s1)]\n    (set (concat p q)))) ;;;los vamos concatenando \n\n\n\n;;; Es como el Set Intersection [Easy]\n\n;;; pero necesitamos dos diferentes, uno para el set1 set2\n;;; let?", "user": "6075c214e4b069485764de5b"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "60764350e4b069485764de5e"}, {"problem": 88, "code": "#(set (filter (fn [x] (not (and (%1 x) (%2 x)))) (concat %1 %2)))", "user": "606da089e4b069485764de15"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "606ff89be4b069485764de22"}, {"problem": 88, "code": "(fn [s1 s2]\n  (into (apply disj s1 s2) (apply disj s2 s1)))", "user": "6074f5ede4b069485764de52"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "6074e088e4b069485764de4d"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2)\n                          (clojure.set/intersection %1 %2))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "60777335e4b0a637ed78034f"}, {"problem": 88, "code": "(fn [a b]\n    (let [r (filter identity (map a b))\n          m (into a b)]\n      (reduce #(disj % %2) m r)))", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [u (clojure.set/union s1 s2)\n        i (clojure.set/intersection s1 s2)]\n    (clojure.set/difference u i)))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 88, "code": "(fn [a b] \n  (let [all (vec (distinct (concat a b)))]\n    (loop [i 0\n           res #{}]\n      (cond\n       (= i (count all)) res\n       (and (contains? a (all i)) (contains? b (all i))) (recur (inc i) res)\n       :else (recur (inc i) (conj res (all i)))))))", "user": "6074df6fe4b069485764de4b"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 88, "code": "(fn sd [s1 s2]\n  (let [not-s1 (filter #(not (s1 %1)) s2)\n        not-s2 (filter #(not (s2 %1)) s1)]\n    (set (concat not-s1 not-s2))))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 88, "code": "#(clojure.set/union\n  (clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1))", "user": "607a1523e4b0a637ed78036a"}, {"problem": 88, "code": "(fn [s1 s2] (set (reduce conj \n          (remove s1 s2) \n          (remove s2 s1))))", "user": "6074dfa4e4b069485764de4c"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "6074e1e4e4b069485764de4f"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "6074e1ade4b069485764de4e"}, {"problem": 88, "code": "(fn [a b] (set (concat (filter #(not (contains? b %)) a) (filter #(not (contains? a %)) b))))", "user": "6070c7bae4b069485764de27"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 88, "code": "(fn diff[n s](let[nn\n                  (filter #(not(n %1)) s)\n                  nss(filter #(not(s %1)) n)](set (concat nn nss))))", "user": "6085edade4b0736b099e42fc"}, {"problem": 88, "code": "#(\n  clojure.set/union (\n                     clojure.set/difference %1 %2)\n  (clojure.set/difference %2 %1)\n  )", "user": "608b3fe1e4b0adce4b61c442"}, {"problem": 88, "code": "(fn SymmetricDifference [set1 set2]\n  (set (concat (remove set1 set2) (remove set2 set1))))", "user": "607508f3e4b069485764de54"}, {"problem": 88, "code": "(fn [s1 s2]\n  (set\n   (map first (filter #(= (count %) 1)\n                      (partition-by identity\n                                    (sort (concat s1 s2)))\n                      )\n        )\n   )\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "608828dee4b0ae75613dcee1"}, {"problem": 88, "code": "(fn [x y]\n  (clojure.set/difference (clojure.set/union x y)\n                          (clojure.set/intersection x y)\n  )\n)", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 88, "code": "#(set (concat (apply disj %1 %2) (apply disj %2 %1)))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 88, "code": "(fn [s1 s2] (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "6074e278e4b069485764de51"}, {"problem": 88, "code": "(fn diff [a b]\n  (let [dis (clojure.set/intersection a b)\n        a-sub (clojure.set/difference a dis)\n        b-sub (clojure.set/difference b dis)]\n    (clojure.set/union a-sub b-sub)))", "user": "607f3336e4b05857a65e7747"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 88, "code": "(fn sym-dif [set1 set2]\n  (clojure.set/difference\n   (clojure.set/union set1 set2)\n   (clojure.set/intersection set1 set2)))", "user": "605a876be4b000d535e6f53c"}, {"problem": 88, "code": "#(->> (for [x (into %1 %2)\n            :when (not= (%1 x) (%2 x))] x)\n      (into #{}))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 88, "code": "(fn\n  [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "5aa098fae4b0d174b936c82e"}, {"problem": 88, "code": "(fn [coll-one coll-two]\n  (let [filtered-one (remove #(contains? coll-two %) coll-one)\n        filtered-two (remove #(contains? coll-one %) coll-two)]\n    (set (concat filtered-one filtered-two))))", "user": "5e860270e4b09a7a73c8bbdb"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/difference (clojure.set/union a b) (clojure.set/intersection a b)))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 88, "code": "(fn ans-88 [set1 set2]\n  (clojure.set/union (clojure.set/difference set1 set2)\n             (clojure.set/difference set2 set1)))", "user": "608fac60e4b03bd49d9f36c7"}, {"problem": 88, "code": "(fn [a b] (set (filter #(nil? (b (a %))) (into a b))))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 88, "code": "#(apply sorted-set (clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1)))", "user": "603f6623e4b0d5df2af2231f"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 88, "code": "(fn my-symmetric-difference\n  [s1 s2]\n  (letfn [(difference [a b] (reduce (fn [result x] (disj result x)) a b))\n          (union [a b] (reduce (fn [result x] (conj result x)) a b))]\n    (union (difference s1 s2) (difference s2 s1))))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "58e90258e4b056aecfd47cfd"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union\n   (clojure.set/difference s1 s2)\n   (clojure.set/difference s2 s1)))", "user": "60794173e4b0a637ed78035d"}, {"problem": 88, "code": "(fn [xs ys]\n  (clojure.set/union\n\t  (clojure.set/difference xs ys)\n   \t  (clojure.set/difference ys xs)))", "user": "5591b61ee4b0604b3f94d580"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 88, "code": "(fn symmetric\n  [a b]\n  (loop [rest_a a rest_b b accum #{}]\n    (if (empty? rest_a)\n      (into accum rest_b)\n      (if (contains? rest_b (first rest_a))\n        (recur (rest rest_a) (disj rest_b (first rest_a)) accum)\n        (recur (rest rest_a) rest_b (into accum (list (first rest_a))))\n        )\n      )\n    )\n  )", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 88, "code": "(fn [x y] (set (concat (filter #(not (contains? y %)) x) (filter #(not (contains? x %)) y))))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 88, "code": "(fn [set1 set2]\n  (set (clojure.set/union (filter (fn [set1-elem]\n                                    ((complement contains?) set2 set1-elem)) set1) (filter (fn [set2-elem]\n                                                                                             ((complement contains?) set1 set2-elem)) set2))))", "user": "60b8b0f8e4b0e0fa5f1b425c"}, {"problem": 88, "code": "(fn [s1 s2]\n  (clojure.set/union (clojure.set/difference s1 s2) (clojure.set/difference s2 s1)))", "user": "609e9b64e4b00e9e6653c426"}, {"problem": 88, "code": "(fn [s1 s2]\n  (let [ss (set (concat s1 s2))]\n    (set (filter #(or (not (contains? s1 %)) (not (contains? s2 %))) ss))))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 88, "code": "(fn [x y]\n  (apply sorted-set (clojure.set/union (clojure.set/difference x y) (clojure.set/difference y x))))", "user": "60b3b8a9e4b0e0fa5f1b4233"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference % %2) (clojure.set/difference %2 %))", "user": "57123c96e4b09c608db70454"}, {"problem": 88, "code": "(fn [a b]\n  (clojure.set/union (apply disj a b) (apply disj b a)))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 88, "code": "(fn [a b] (set (filter #(= 1 (get (frequencies (concat (vec a) (vec b))) %)) (concat (vec a) (vec b)))))", "user": "60b8f098e4b0e0fa5f1b425f"}, {"problem": 88, "code": "(fn [xs ys] (clojure.set/union (clojure.set/difference xs ys) (clojure.set/difference ys xs)))", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 88, "code": "(fn symetric-diff\n  [s1 s2]\n  (let [in-s1-not-in-s2 (clojure.set/difference s1 s2)\n        in-s2-not-in-s1 (clojure.set/difference s2 s1)]\n    (clojure.set/union in-s1-not-in-s2\n                       in-s2-not-in-s1)))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 88, "code": "#(clojure.set/difference (clojure.set/union %1 %2) (clojure.set/intersection %1 %2))", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 88, "code": "(fn symmetric-difference[xs ys]\n  (clojure.set/union\n   (clojure.set/difference xs ys)\n   (clojure.set/difference ys xs)))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 88, "code": "#(set `(~@(% %2 %3) ~@(% %3 %2))) remove", "user": "5aba04dce4b073f17744269e"}, {"problem": 88, "code": "#(into #{} (concat (filter (complement %1) %2)\n                   (filter (complement %2) %1)))", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 88, "code": "#(clojure.set/union (clojure.set/difference %1 %2) (clojure.set/difference %2 %1))", "user": "60dd865ee4b0d8b48c489db3"}]