[{"code": "(fn rec [ls]\r\n  (lazy-seq\r\n    (if (empty? ls)\r\n        ()\r\n        (let [f (first ls)\r\n              rs (drop-while #(= f %) ls)]\r\n        (cons f (rec rs))))))", "problem": 30, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn[x](reduce #(if(=(last%)%2)%(conj%%2))[]x))", "problem": 30, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "(fn [s]\r\n  (loop [remainder s, compressed [], final nil]\r\n    (if-let [[x & xs] remainder]\r\n      (if (not= x final)\r\n        (recur xs (conj compressed x) x)\r\n        (recur xs compressed          final))\r\n      compressed)))", "problem": 30, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn comp ([s] (comp [] s))\r\n            ([memo s]\r\n            (println memo s)\r\n            (cond (empty? s) memo\r\n                  (= (last memo) (first s))  (comp memo (rest s))\r\n                  :else (comp (conj memo (first s)) (rest s)) )))", "problem": 30, "user": "4db135081254ad5b4805fa67"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4dd6fa35535d2dad7130b5cd"}, {"code": "(fn comprimir-seq\r\n[resta]\r\n(loop \t[myseq [] llista resta]\r\n\t(if (empty? llista)\r\n\t\tmyseq\r\n\t\t(if (= (first llista) (last myseq))\r\n\t\t\t(recur myseq (rest llista))\r\n\t\t\t(recur (conj myseq (first llista)) (rest llista))\r\n\t\t)\r\n\t)\r\n)\r\n)", "problem": 30, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "#(map last (partition-by str %))", "problem": 30, "user": "4dce6e41535d5973398f92a2"}, {"code": "(fn compress [xs]\r\n  (if (< (count xs) 2)\r\n    xs\r\n    (if (= (first xs) (first (rest xs)))\r\n      (compress (rest xs))\r\n      (conj (compress (rest xs)) (first xs)))))", "problem": 30, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn cmprs [coll]\r\n  (when-let [s (seq coll)]\r\n    (let [f (first s) r (rest s)]\r\n      (if (= f (first r))\r\n        (cmprs r)\r\n        (cons f (cmprs r))))))", "problem": 30, "user": "4dd4f0a8535dae65d5c462e4"}, {"code": "(fn [coll]\r\n    (reduce (fn [a b]\r\n              (if (not= (last a) b)\r\n                (conj a b)\r\n                a)) [] coll))", "problem": 30, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "#(map last (partition-by max %))", "problem": 30, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "(fn dedup [xs]\r\n  (if (empty? xs)\r\n      nil\r\n      (let [x    (first xs)\r\n            more (rest xs)]\r\n        (if (= x (first more))\r\n          (dedup more)\r\n          (conj (dedup more) x)))))", "problem": 30, "user": "4dd52e29535dae65d5c462e5"}, {"code": "(fn [l] (loop [l l acc '()]\r\n  (if (empty? l)\r\n      (reverse acc)\r\n      (recur (drop-while #(= (first l) %) l)\r\n          (cons (first l) acc)))))", "problem": 30, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn [x] \r\n  (reverse (reduce \r\n\t\t(fn [r l] \r\n\t\t\t(if (not= (first r) l) (conj r l) r)\r\n\t\t)\r\n\t\t'() \r\n\t\tx\r\n\t))\r\n)", "problem": 30, "user": "4dd579b5535dae65d5c462ea"}, {"code": "#(reverse\r\n   (reduce (fn [acc elm] \r\n         (if (= (first acc) elm)\r\n\t\t acc\r\n\t\t (cons elm acc)))\r\n\t  (list (first %))\r\n\t  (rest %)))", "problem": 30, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "#(cons (first %)\r\n  (map second\r\n  (filter (fn [[a b]] (not (= a b)))\r\n    (map vector % (rest %)))))", "problem": 30, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn [s]\r\n  (letfn [(dd [in lst]\r\n            (if (empty? in)\r\n              lst\r\n              (if (= (first in) (last lst))\r\n                (recur (rest in) lst)\r\n                (recur (rest in) (concat lst (list (first in)))))))]\r\n    (dd s '())))", "problem": 30, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn [arg]\r\n  (let [lst (seq arg)]\r\n    (loop [ns lst xs '() l nil]\r\n      (let [now (first ns)]\r\n  (if (= now nil)\r\n\t  (reverse xs)\r\n\t  (if (= l now)\r\n\t    (recur (rest ns) xs l)\r\n\t    (recur (rest ns) (cons now xs) now)))))))", "problem": 30, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn [coll] (loop [r '(), f (first coll) n (next coll)]\r\n  (let [r (conj r f)\r\n        n (drop-while #(= f %) n)\r\n        f (first n)]\r\n    (if f\r\n      (recur r f n)\r\n      (reverse r)))))", "problem": 30, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [input]\r\n    (reduce\r\n        (fn [current next]\r\n            (if (not= (last current) next) (conj current next) current))\r\n        []\r\n        input))", "problem": 30, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "(fn squeeze [coll] \r\n  (reduce \r\n\t(fn [a b] \r\n\t(if (not= (first a) b) \r\n\t\t(cons b a) a)) '() (reverse coll)))", "problem": 30, "user": "4ddeb916535d08e6dec9fdd9"}, {"code": "(fn [coll]\r\n (seq\r\n  (reduce \r\n    (fn [col val] \r\n      (if (= val (last col)) \r\n        col \r\n        (conj col val))) \r\n  [] (vec coll))))", "problem": 30, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "(fn a [x] \r\n  (loop [seq1 (seq x) seq2 '()]\r\n  (if (not(nil? (first seq1)))\r\n  (if (= (first seq1) (fnext seq1))\r\n    (recur (next seq1) seq2)\r\n    (recur (next seq1) (concat seq2 (list (first seq1))))\r\n  ) seq2)))", "problem": 30, "user": "4dde4e95535d08e6dec9fdd7"}, {"code": "(fn [items]\r\n    (reverse (reduce (fn [xs x]\r\n  \t\t (if (= x (first xs)) xs (cons x xs)))\r\n\t\t     '() items)))", "problem": 30, "user": "4ddc1c89535d02782fcbea01"}, {"code": "#(reverse (loop [s %\r\n                 p (first s)\r\n                 r `(~(first s))]\r\n            (if (empty? s)\r\n              r\r\n              (recur (rest s) (first s) (if (= p (first s))\r\n                                          r\r\n                                          (conj r (first s)))))))", "problem": 30, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn [c] (reduce (fn [acc e] (if (= (last acc) e) acc (concat acc [e]))) '() c))", "problem": 30, "user": "4daed74dedd6309eace4d163"}, {"code": "#(reduce\r\n  (fn [res tgt]\r\n    (if (= tgt (last res))\r\n      res\r\n      (conj res tgt)))\r\n  [] %)", "problem": 30, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn compress [s]\r\n  (if (seq s)\r\n    (lazy-seq (cons (first s) (compress (drop-while (partial = (first s)) s))))))", "problem": 30, "user": "4dda5d07535d02782fcbe9f2"}, {"code": "(fn dedupe [s]\r\n    (if (empty? (rest s))\r\n        s\r\n        (let [head (first s), tail (rest s)]\r\n            (if (= head (first tail))\r\n                (dedupe (concat (vector head) (rest tail)))\r\n                (concat (vector head) (dedupe tail))))))", "problem": 30, "user": "4de623ef535d08e6dec9fdf4"}, {"code": "(fn f [x]\r\n  (if-let [y (first x)]\r\n    (cons y (f (drop-while #(= y %) x)))))", "problem": 30, "user": "4da3e51330acd6ed10482a68"}, {"code": "(fn c [s]\r\n  (when-let [[f & r] (seq s)]\r\n(if (= f (first r))\r\n(c r)\r\n(cons f (c r)))))", "problem": 30, "user": "4dc986d0535d5973398f9285"}, {"code": "(fn [coll]\r\n  (loop [coll coll compressed nil]\r\n    (if (empty? coll)\r\n      (reverse compressed)\r\n      (recur (rest coll)\r\n             (if (= (first coll) (second coll))\r\n               compressed\r\n               (conj compressed (first coll)))))))", "problem": 30, "user": "4dc6aade535d8a4b2fd7428c"}, {"code": "(fn [xs] (reverse\r\n    (reduce (fn [acc x]\r\n              (if (= (first acc) x) acc\r\n                (conj acc x)))\r\n            '()\r\n            (seq xs))))", "problem": 30, "user": "4dea9406535d08e6dec9fe01"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4de77a0a535d08e6dec9fdfa"}, {"code": "(fn comp [xs]\r\n  (cond\r\n    (empty? xs) '()\r\n    (= (first xs) (first (rest xs))) (recur (rest xs))\r\n    :else (cons (first xs) (comp (rest xs)))))", "problem": 30, "user": "4dc7e7a5535d8a4b2fd74290"}, {"code": "#(loop [l false r (reverse %) e '()] (if (empty? r) e (let [n (first r)] (recur n (rest r) (if (= n l) e (conj e n))))))", "problem": 30, "user": "4dee4a9c535d08e6dec9fe11"}, {"code": "#(filter identity (map (fn [x y] (if (= x y) nil x)) % (cons nil %)))", "problem": 30, "user": "4def301c535d08e6dec9fe12"}, {"code": "(fn compress [s]\r\n  (if (empty? s)\r\n      s\r\n      (if (= (first s) (second s))\r\n          (compress (rest s))\r\n          (conj (compress (rest s)) (first s)))))", "problem": 30, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "(fn [seq]\r\n  (filter (fn [x] x) (conj\r\n    (map (fn [i]\r\n      (if (= (nth seq i) (nth seq (dec i)))\r\n        nil\r\n        (nth seq i))) (range 1 (count seq)))\r\n  (first seq))))", "problem": 30, "user": "4df1e213535d08e6dec9fe20"}, {"code": "(fn [n]\r\n  (remove nil?\r\n    (map (fn [x y] (if (not= x y) x)) n (cons nil n))))", "problem": 30, "user": "4df0524e535d08e6dec9fe17"}, {"code": "(fn my-compress [coll]\r\n  (when-let [[ist & r] (seq coll)] \r\n    (if (= ist (first r)) \r\n      (my-compress r) \r\n      (cons ist (my-compress r)))))", "problem": 30, "user": "4df168bd535d08e6dec9fe1d"}, {"code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "problem": 30, "user": "4deb529a535d08e6dec9fe04"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4dbbe3b9535d3f4042261ecf"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn a [f]\r\n  (if f\r\n    (if (= (first f) (second f))\r\n      (a (next f))\r\n      (conj (a (next f)) (first f)) ) ) )", "problem": 30, "user": "4df20dda535d08e6dec9fe23"}, {"code": "(fn [x]\r\n  (loop [s x new-s '() current nil]\r\n    (if (empty? s)\r\n      (reverse new-s)\r\n      (if (= current (first s))\r\n        (recur (rest s) new-s current)\r\n        (recur (rest s) (conj new-s (first s)) (first s))))))", "problem": 30, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn cmprs [coll]\r\n  (when-let [[f & r] (seq coll)] \r\n    (if (= f (first r)) \r\n      (cmprs r) \r\n      (cons f (cmprs r)))))", "problem": 30, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn[s]\r\n  (loop [s s r [] v nil]\r\n    (if (empty? s) r\r\n      (let [cv (first s)]\r\n         (recur (rest s) (if (= cv v) r (conj r cv )) cv)))))", "problem": 30, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4df669d4535d08e6dec9fe35"}, {"code": "(fn [x] (loop [ls x a nil rs []]\r\n  (cond (empty? ls) rs\r\n        (= a (first ls)) (recur (rest ls) a rs)\r\n        :else (recur (rest ls) (first ls) (conj rs (first ls)))\r\n)))", "problem": 30, "user": "4db883e1535d1e037afb2198"}, {"code": "(fn compress [coll]\r\n   (reduce (fn [result x]\r\n             (if (= (last result) x)\r\n               result\r\n               (conj result x)))\r\n           []\r\n           coll))", "problem": 30, "user": "4daef21cedd6309eace4d169"}, {"code": "#(loop [col % c ()]\r\n    (cond (empty? col) (reverse c)\r\n          (= (first col) (first c)) (recur (rest col) c)\r\n          :else (recur (rest col) (cons (first col) c))))", "problem": 30, "user": "4db6ce85535d1e037afb217f"}, {"code": "(fn cmpr [xs]\r\n  (if (seq xs)\r\n    (let [[x & rxs] xs]\r\n      (cons x (cmpr (drop-while #(= % x) rxs))))\r\n    nil))", "problem": 30, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "(fn lo [x]\r\n  (if (string? x)\"Leroy\"  ;sorry for that\r\n  (let [f (first x)]\r\n  (if (< (count x) 2)\r\n    x\r\n    (loop [i 1]\r\n      (if (= f (nth x i))\r\n        (recur (inc i))\r\n        (lazy-seq (cons f (lo (nthnext x i))))))))))", "problem": 30, "user": "4de18de7535d08e6dec9fde8"}, {"code": "(fn [arr]\r\n  (->> (concat (partition 2 1 arr) [[(last arr) nil]])\r\n       (remove (fn [[x y]] (= x y)))\r\n       (map first)))", "problem": 30, "user": "4de6f806535d08e6dec9fdf7"}, {"code": "(fn [s]\r\n  (loop [c [] s s]\r\n    (cond\r\n      (empty? s) (seq c)\r\n      (= (last c) (first s)) (recur c (rest s))\r\n      :else (recur (conj c (first s)) (rest s)))))", "problem": 30, "user": "4e02bee8535d04ed9115e791"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn compress\r\n                 ([coll] (compress coll []))\r\n                 ([coll coll2] \r\n                   (cond\r\n                     (empty? coll) coll2\r\n                     (= (last coll2) (first coll)) (recur (rest coll) coll2)\r\n                     :else (recur (rest coll) (conj coll2 (first coll))))))", "problem": 30, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "(fn [s]\r\n  (reduce (fn [x y]\r\n\t\t    (if (= (last x) y)\r\n\t\t\tx\r\n\t\t\t(conj x y)))\r\n\t\t[]\r\n\t\ts))", "problem": 30, "user": "4e07eac0535d04ed9115e7a9"}, {"code": "(fn [s]\r\n\t\t (loop [s s\r\n\t\t\t\t  prev nil\r\n\t\t\t\t  res []]\r\n\t\t\t(if (seq s)\r\n\t\t\t  (if (= (first s) prev)\r\n\t\t\t\t (recur (rest s) (first s) res)\r\n\t\t\t\t (recur (rest s) (first s) (conj res (first s))))\r\n\t\t\t  res)))", "problem": 30, "user": "4e08fb7a535d04ed9115e7ac"}, {"code": "(fn [l] (reduce (fn [x y] (let [xx (if (seq? x) x (list x))] (if (= (last xx) y) xx (concat xx (list y))))) l) )", "problem": 30, "user": "4e059278535d04ed9115e7a5"}, {"code": "#(reverse (reduce (fn [x y]\r\n                   (if (= (first x) y)\r\n                     x\r\n                     (conj x y))) () %))", "problem": 30, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "reduce (fn [l r] (if (= (last l) r) l (conj l r))) []", "problem": 30, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn rem-con [n]\n  (map first (partition-by identity n)))\n\n;(fn rem-con [n]\n;  (cond\n;    (empty? (rest n)) n\n;    (= (first n) (first (rest n))) (rem-con (cons (first n) (rest (rest n))))\n;    :else (cons (first n) (rem-con (rest n)))))", "problem": 30, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "(fn   ([coll]\r\n    (loop [coll coll newcoll ()]\r\n      (if (empty? coll)\r\n       (reverse newcoll)\r\n       (if (= (first coll)(first (rest coll)))\r\n         (recur (rest coll) newcoll)\r\n         (recur (rest coll)(conj newcoll (first coll))))))))", "problem": 30, "user": "4de8fb73535d08e6dec9fdff"}, {"code": "(fn [c] (->> (cons nil c)\r\n  (partition 2 1)\r\n  (filter (fn [[x y]] (not= x y)))\r\n  (map second)))", "problem": 30, "user": "4e111538535d04ed9115e7c3"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn dedup [init-xs] \r\n  (loop [ys [], xs init-xs] \r\n    (if (empty? xs)\r\n      ys\r\n      (if (= (count xs) 1)\r\n        (conj ys (first xs))\r\n        (if (= (first xs) (nth xs 1))\r\n          (recur ys (rest xs))\r\n          (recur (conj ys (first xs)) (rest xs)))))))", "problem": 30, "user": "4e123905535d04ed9115e7ce"}, {"code": "(fn [s]\r\n  (conj (map first (remove (partial apply =) \r\n                           (map vector (rest s) s)))\r\n  (first s)))", "problem": 30, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn cmprs [coll]\r\n  (when-let [[f & r] (seq coll)] \r\n    (if (= f (first r)) \r\n      (cmprs r) \r\n      (cons f (cmprs r)))))", "problem": 30, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "(fn [z] (loop [x (seq z) las nil ans []]\r\n  (println (str x las ans))(cond \r\n    (not (next x))\r\n        (if (= (first x) las)\r\n          ans\r\n          (conj ans (first x))\r\n        )\r\n    (and (next x) (= (first x) las)) (recur (next x) (first x) ans)\r\n    :else (recur (next x) (first x) (conj ans (first x)))\r\n  )\r\n))", "problem": 30, "user": "4e15c301535d04ed9115e7e5"}, {"code": "(fn cmprs [coll]\r\n  (when-let [[f & r] (seq coll)] \r\n    (if (= f (first r)) \r\n      (cmprs r) \r\n      (cons f (cmprs r)))))", "problem": 30, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn [x]\r\n  (loop [sequ x acc []]\r\n    (let [v1 (first sequ) v2 (second sequ)]\r\n      (if (nil? v1)\r\n        (seq acc)\r\n        (recur (rest sequ) (if-not (= v1 v2) (conj acc v1) acc))))))", "problem": 30, "user": "4e14090d535d04ed9115e7dc"}, {"code": "(fn mycs [lt]\r\n    (letfn [(mycsa [lt acc]\r\n  \t   (if (empty? lt)\r\n\t\t     acc\r\n\t\t     (if (= (first lt) (first acc))\r\n\t\t       (mycsa (rest lt) acc)\r\n\t\t       (mycsa (rest lt) (cons (first lt) acc)))))]\r\n\t   (reverse (mycsa (rest lt) (list (first lt))))))", "problem": 30, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "#(reduce (fn [x y] (if (= y (last x)) x (conj x y))) [] %)", "problem": 30, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn [l]\r\n  (reverse ((fn [l]\r\n    (loop [lis (rest l) ret (conj '() (first l))  current (first l)]\r\n     (cond \r\n   (= lis '())\r\n\t ret\r\n\t (= current (first lis))\r\n\t \t(recur (rest lis) ret current)\r\n         (not (= current (first lis)))\r\n               (recur (rest lis) (conj ret (first lis))  (first lis))))) l)))", "problem": 30, "user": "4df9c598535d04ed9115e77a"}, {"code": "(fn f \r\n  ([s]\r\n    (f (seq s) nil []))\r\n  ([s p acc]\r\n    (if (next s)\r\n      (recur (next s) (first s) (if-not (= (first s) p)\r\n                                  (conj acc (first s))\r\n                                  acc))\r\n      (if-not (= (first s) p)\r\n        (conj acc (first s))\r\n        acc))))", "problem": 30, "user": "4e21c139535d04ed9115e819"}, {"code": "#(cons (first %) (map second (filter (fn [[x y]] (not= x y)) (partition 2 1 %))))", "problem": 30, "user": "4e0cdc6f535d04ed9115e7b4"}, {"code": "; this is lazy\r\n(fn mycompress [x]\r\n  (if (seq x)\r\n    (let [f (first x) r (rest x)]\r\n      (lazy-seq\r\n        (cons \r\n          f \r\n          (mycompress \r\n            (drop-while \r\n              #(= f %) \r\n              r)))))\r\n    x))", "problem": 30, "user": "4e131443535d04ed9115e7d3"}, {"code": "(fn [coll]\r\n  (loop [acc [(first coll)]\r\n         prev (first coll)\r\n         coll (rest coll)]\r\n    (if (empty? coll)\r\n      acc\r\n      (if (= prev (first coll))\r\n        (recur acc (first coll) (rest coll))\r\n        (recur (conj acc (first coll))\r\n               (first coll)\r\n               (rest coll))))))", "problem": 30, "user": "4e22b78b535d04ed9115e81e"}, {"code": "(fn [sek] (loop [lista nil i 0]\r\n  (cond\r\n    (= i (count (seq sek))) (reverse lista)\r\n    (= (nth (seq sek) i) (nth (seq sek) (+ i 1) nil)) (recur lista (inc i))\r\n    :else (recur (conj lista (nth (seq sek) i)) (inc i))\r\n)))", "problem": 30, "user": "4e218470535d04ed9115e817"}, {"code": "(fn [sek] (loop [lista nil i 0]\r\n(cond\r\n(= i (count (seq sek))) (reverse lista)\r\n(= (nth (seq sek) i) (nth (seq sek) (+ i 1) nil)) (recur lista (inc i))\r\n:else (recur (conj lista (nth (seq sek) i)) (inc i))\r\n)))", "problem": 30, "user": "4e218464535d04ed9115e816"}, {"code": "reduce\n  (fn [acc e]\n    (if (= (last acc) e)\n      acc\n      (conj acc e)))\n  []", "problem": 30, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn [args]\r\n  (reverse (loop [args args acc '()]\r\n    (cond\r\n       (nil? (first args)) acc\r\n       (nil? (second args)) (cons (first args) acc)\r\n       (= (first args) (second args)) (recur (rest args) acc)\r\n       :else (recur (rest args) (cons (first args) acc))\r\n    )\r\n  ))\r\n)", "problem": 30, "user": "4e1ec17a535d04ed9115e80a"}, {"code": "(fn [coll]\r\n  (reduce #(if (= %2 (last %1))\r\n              %1\r\n              (conj %1 %2))\r\n          []\r\n          (seq coll)))", "problem": 30, "user": "4e113a81535d04ed9115e7c5"}, {"code": "(fn [coll] (reduce #(if (= %2\r\n  \t\t   (last %1))\r\n\t\t      %1\r\n\t\t      (conj %1 %2)) [] coll))", "problem": 30, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "(fn [st]\r\n   (let [s (seq st)]\r\n     (loop [f (first s) r (rest s) acc '()]\r\n      (if (nil? (seq r))\r\n        (reverse (conj acc f))\r\n        (if (= f (first r))\r\n          (recur f (rest r) acc)\r\n          (let [ff (first r)]\r\n            (recur ff (rest r) (conj acc f))))))))", "problem": 30, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "(fn compress [x]\n  (if (< (count x) 2)\n    x\n    (if (= (first x) (second x))\n      (recur (rest x))\n      (cons (first x) (compress (rest x))))))", "problem": 30, "user": "4e28120f535deb9a81d77efa"}, {"code": "(fn [sq]\n  (loop [source sq destination '()]\n    (if (empty? source)\n       (reverse destination)\n       (let [head (first source)\n             tail (rest source)]\n         (recur (drop-while #(= head %) tail)\n                (cons head destination))))))", "problem": 30, "user": "4de760a3535d08e6dec9fdf9"}, {"code": "(fn [c] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) (cons [] c)))", "problem": 30, "user": "4e232f34535d04ed9115e81f"}, {"code": "#(letfn [(nodup [xs a]\r\n      (if (= xs []) \r\n\t\t    []\r\n        (if (= (first xs) a)\r\n\t\t      (nodup (rest xs) a)\r\n\t\t      (cons (first xs) (nodup (rest xs) (first xs))))))]\r\n  (nodup % \"\"))", "problem": 30, "user": "4e273301535deb9a81d77ef7"}, {"code": "(fn [c]\n    (reduce (fn [a b]\n              (if (= (last a) b)\n                a (conj a b)\n                )) [] c))", "problem": 30, "user": "4e2ab05e535deb9a81d77f01"}, {"code": "(fn squeeze [sq] (reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) '() sq)))", "problem": 30, "user": "4e2d562c535deb9a81d77f07"}, {"code": "(fn [s]\n  (loop [s s, prev ::nil, curr (first s), nseq []]\n    (if (empty? s)\n      (seq nseq)\n      (let [nseq (if (= prev curr) nseq (conj nseq curr))]\n        (recur (next s), curr, (second s), nseq))\n    )))", "problem": 30, "user": "4e2edb0e535deb9a81d77f0d"}, {"code": "(fn hoge [x]\n  (if (= (count x) 1) x\n    (if (= (first x) (second x)) (hoge (rest x)) \n      (cons (first x) (hoge (rest x))))))", "problem": 30, "user": "4e2e6460535deb9a81d77f0b"}, {"code": "(fn compress [lst]\r\n  (if (empty? lst) '()\r\n    (loop [l (rest lst), f (first lst), result (list (first lst))]\r\n      (cond (empty? l) result\r\n            (= (first l) f) (recur (rest l), f, result)\r\n            :else\r\n              (recur (rest l)\r\n                     (first l)\r\n                     (concat result (list (first l))))))))", "problem": 30, "user": "4e2d84bf535deb9a81d77f09"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "4e307313535deb9a81d77f14"}, {"code": "(fn [s]\n  (reverse\n   (reduce\n    (fn [coll c]\n      (if (= (first coll) c)\n        coll\n        (cons c coll)))\n    ()\n    s)))", "problem": 30, "user": "4e31a15c535deb9a81d77f1e"}, {"code": "(fn [v] (loop [l (seq v) ret []]\n  (if-not (empty? l)\n    (recur \n      (rest l) \n      (if-not (= (last ret) (first l))\n        (conj ret (first l))\n        ret))\n    ret)))", "problem": 30, "user": "4e31c695535deb9a81d77f20"}, {"code": "#(mapcat (fn [x] (take 1 x)) (partition-by (fn [x] (identity x)) %))", "problem": 30, "user": "4e21c0c7535d04ed9115e818"}, {"code": "(fn remove-duplicates [sq]\n  (let [sq (seq sq)]\n    (if sq\n      (let [a (first sq), b (drop-while #(= a %) sq)]\n        (cons a (remove-duplicates b)))\n      '())))", "problem": 30, "user": "4e342671535deb9a81d77f29"}, {"code": "(fn [lst]\n    (conj\n     ((fn cmprs [lat v]\n        (cond\n         (empty? lat) lat\n         (= v (first lat)) (cmprs (rest lat) v)\n         :else (conj (cmprs (rest lat) (first lat))\n                     (first lat)))) (rest lst) (first lst))\n     (first lst)))", "problem": 30, "user": "4e326f34535deb9a81d77f21"}, {"code": "(fn [coll]\n  (reverse (loop [xs coll acc []]\n    (if (empty? xs)\n      acc\n      (recur (drop-while (partial = (first xs)) xs) (cons (first xs) acc))))))", "problem": 30, "user": "4e36425c535deb9a81d77f33"}, {"code": "(fn f [[x & z]] (when x (cons x (f (drop-while #{x} z)))))", "problem": 30, "user": "4e360757535deb9a81d77f32"}, {"code": "(fn compress\n  ([s] (compress s nil))\n  ([s prev]\n   (if (empty? s) '()\n      (let [f (first s)]\n       (if (= prev f)\n          (compress (rest s) f)\n          (cons f (compress (rest s) f)))))))", "problem": 30, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "#(reduce\n  (fn [a b]\n    (if (= (peek a) b)\n        a\n        (conj a b)))\n  []\n  %)", "problem": 30, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "(fn [coll]\r\n\"Removes consecutive duplicates from a sequence\"\r\n(loop [prev nil s coll acc []]\r\n(let [cur (first s)]\r\n(cond (nil? cur) acc\r\n(= cur prev) (recur prev (rest s) acc)\r\n:else (recur cur (rest s) (conj acc cur))))))", "problem": 30, "user": "4e370a04535deb9a81d77f37"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e3996b0535deb9a81d77f41"}, {"code": "(fn compress [coll]\n  (when-let [[f & r] coll]\n    (if (= f (first r))\n      (compress r)\n      (cons f (compress r)))))", "problem": 30, "user": "4e39fb68535deb9a81d77f47"}, {"code": "(fn [s] (loop [s s acc (if (string? s) \"\" nil) pr nil]\n  (if\n    (empty? s)\n    acc\n    (recur\n      (if (string? s) (apply str (rest s)) (rest s))\n      (if (= pr (first s)) acc (if (string? s) (str acc (first s)) (concat acc (list (first s)))))\n      (first s)))))", "problem": 30, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "(fn [s] (reduce (fn [a b] (if (not= (last a) b) (conj a b) a)) [] s))", "problem": 30, "user": "4e3f595d535dc968683fc498"}, {"code": "(fn t [x] \n  (if (= (count x) 1)\n      x\n      (if (= (first x) (second x))\n      (t (rest x))\n      (conj (t (rest x)) (first x))\n      )\n  )\n)", "problem": 30, "user": "4e39c710535deb9a81d77f45"}, {"code": "(fn [sequence]\n  (let [dedupe (fn dedupe [so-far to-go]\n                (if (empty? to-go)\n                  so-far\n                  (if (= (last so-far) (first to-go))\n                  (dedupe so-far (rest to-go))\n                  (dedupe (conj so-far (first to-go)) (rest to-go)))))]\n  (dedupe [] sequence)))", "problem": 30, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn compress[x]\n  (when-let [[y & t] (seq x)]\n    (if (= y (first t))\n      (compress t)\n      (cons y (compress t)))))", "problem": 30, "user": "4e2ef93d535deb9a81d77f0f"}, {"code": "(fn comprime [x]\n  (cond (empty? x) x\n        (empty? (rest x)) x\n        (= (first x) (second x)) (comprime (rest x))\n        true (cons (first x) (comprime (rest x)))))", "problem": 30, "user": "4db51ce0535d87e67b28fe06"}, {"code": "(fn dup [s]\n  (cond\n    (nil? s) '()\n    (string? s) (dup (seq s))\n    (= (first s) (first (next s))) (dup (next s))\n    :else (conj (dup (next s)) (first s))))", "problem": 30, "user": "4e444c11535dc968683fc4a9"}, {"code": "(fn [s]\n  ((fn inner [acc t]\n     (let [[a & more] t]\n       (if more\n         (if (= (last acc) a)\n           (recur acc more)\n           (recur (concat acc [a]) more))\n         (if (= (last acc) a)\n           acc\n           (concat acc [a]) ) ) ) ) () s) )", "problem": 30, "user": "4e333091535deb9a81d77f25"}, {"code": "(fn [v] (loop [r [] o (vec v)]\n  (if (empty? o)\n      r\n      (recur (conj r (first o))\n              (drop-while #(= (first o) %) \n                          o)))))", "problem": 30, "user": "4e4870d1535dc968683fc4bc"}, {"code": "(fn remove-dups [coll]\n  (loop [[x y & xs :as all] coll acc []]\n    (cond\n      (nil? x) acc\n      (= x y) (recur (rest all) acc)\n      :else (recur (rest all) (conj acc x)))))", "problem": 30, "user": "4e46e48b535dc968683fc4b7"}, {"code": "#(mapcat distinct (partition-by identity %))", "problem": 30, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn [x] \n  (map \n    first \n    (filter \n      (partial apply not=) \n      (map vector x (lazy-cat (rest x) '(nil))))))", "problem": 30, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "(fn dedupstr2 [s] \n  (reduce \n    (fn dedup-reduce [seq_or_n1 n2]\n      (let [lastn1 \n        (if (seq? seq_or_n1) \n          (last seq_or_n1)\n          seq_or_n1\n        ), seq1 (if (seq? seq_or_n1) seq_or_n1 (seq [seq_or_n1])) ]\n        (if (= n2 lastn1)\n           seq1\n           (concat seq1 (seq [n2])))\n      ))\n    s\n    )\n)", "problem": 30, "user": "4e3df106535deb9a81d77f58"}, {"code": "(fn [s]\n(reverse (remove nil? \n(map #(if (not= % %2) %) (into () s) (conj (into () s) \"dummy\")))))", "problem": 30, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "#(reverse\n   (loop [last (first %)\n          acc (list (first %))\n          seq (rest %)]\n     (cond\n       (empty? seq) acc\n       (= (first seq) last) (recur last acc (rest seq))\n       :else (recur (first seq)\n                    (cons (first seq) acc)\n                    (rest seq)))))", "problem": 30, "user": "4e4ae5aa535dc968683fc4d2"}, {"code": "(fn remove [[x & rest :as xs]]\n  (if (nil? xs)\n    ()\n    (let [[top & _ :as tail] (remove rest)]\n      (if (= x top)\n        tail\n        (cons x tail)))))", "problem": 30, "user": "4e4c238f535dc968683fc4dc"}, {"code": "(fn [coll]\n  (reduce (fn [coll c]\n            (if (= (last coll) c)\n                coll\n                (concat coll (list c)))) '() coll))", "problem": 30, "user": "4e4b4564535dc968683fc4d3"}, {"code": "(fn [x]\n  (loop [res (), y x, current (first x), previous nil]\n    (cond (= y ()) (reverse res)\n          (not (= current previous)) (recur (conj res current) (rest y) (first (rest y)) current)\n          :else (recur res (rest y) (first (rest y)) current))))", "problem": 30, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn [seq1]\n  (loop [togo (rest (reverse seq1))\n         result (list (first (reverse seq1)))\n         item (first (reverse seq1))]\n   (if (empty? togo) result\n    (if (= item (first togo))\n      (recur (rest togo) result item)\n      (recur (rest togo) (cons (first togo) result)\n        (first togo))))))", "problem": 30, "user": "4e4bf20e535dc968683fc4d9"}, {"code": "(fn [aSeq]\n          (loop [answ [], bSeq aSeq]\n             (if-let [c (first bSeq)]\n                     (recur (conj answ c) (drop-while #(= c %) bSeq))\n                     answ)))", "problem": 30, "user": "4e463703535dc968683fc4b2"}, {"code": "(fn [coll]\r\n  (loop [acc []\r\n         [x & more] coll]\r\n    (if x\r\n      (recur (cons x acc) (drop-while #(= %1 x) more))\r\n      (reverse acc))))", "problem": 30, "user": "4e4ad154535dc968683fc4d1"}, {"code": "(fn [s]\n  (loop [x s ans ()]\n    (if (nil? x)\n        ans\n        (if (= (first x) (last ans))\n            (recur (next x) ans)\n            (recur (next x) (concat ans (list (first x))))))))", "problem": 30, "user": "4e399009535deb9a81d77f3f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn hop [xs] \n  (if (empty? xs)\n  '()\n  (lazy-seq \n    (cons (first xs) (hop (drop-while #(= (first xs) %) xs))))))", "problem": 30, "user": "4e4fbd0c535dc968683fc4e9"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn [xs] (reduce (fn [tr x] (if (= x (last tr)) tr (conj tr x))) [] xs))", "problem": 30, "user": "4e513758535dc968683fc4f3"}, {"code": "(fn [items]\r\n  (drop 1\r\n  (reduce (fn [r i] (if (not= i (last r)) (conj r i) r)) [nil] items)))", "problem": 30, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn compress-seq [coll]\n  (reduce (fn [l e]\n    (if (= (last l) e)\n        l\n        (conj l e)))\n    []\n    coll))", "problem": 30, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "4e52d815535d302ef430da77"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e5229dc535d302ef430da6f"}, {"code": "(fn [s]\n  (loop [s s\n         p nil\n         n []]\n    (if-let [f (first s)]\n      (if (not= p f)\n        (recur (next s) f (conj n f))\n        (recur (next s) f n))\n      n)))", "problem": 30, "user": "4e498df9535dc968683fc4c4"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e399685535deb9a81d77f40"}, {"code": "(fn ff[s]\n  (cond\n    (nil? s) '()\n    (= (first s) (first (next s))) (recur (next s))\n    :else\n      (cons (first s) (ff (next s)))))", "problem": 30, "user": "4e50c894535dc968683fc4ee"}, {"code": "(fn [seq]\n  (loop [accu [] s seq]\n    (if (empty? s)\n      accu\n      (recur (conj accu (first s))\n        (drop-while #(= (first s) %) s)))))", "problem": 30, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn f [x] (when-let [[x & y] x] (if (= x (first y)) (f y) (cons x (f y)))))", "problem": 30, "user": "4e503aea535dc968683fc4ea"}, {"code": "(fn [c]\n       (map first\n            (filter #(not= (first %) (second %))\n                    (partition 2 1 [nil] c))))", "problem": 30, "user": "4e5676b2535d8a8b8723a282"}, {"code": "#(loop [acc [] last nil coll %]\n  (if-let [[a & coll] coll]\n    (if (= last a)\n      (recur acc last coll)\n      (recur (conj acc a) a coll))\n    acc))", "problem": 30, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn[a-seq]\n  (loop [compr [(first a-seq)]\n         ss (rest a-seq)\n         curr (first a-seq)]\n    (if (empty? ss)\n      compr\n      (if (= curr (first ss))\n        (recur compr (rest ss) curr)\n        (recur (conj compr (first ss)) (rest ss)\n               (first ss))))))", "problem": 30, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "#(map first (partition-by str %))", "problem": 30, "user": "4e58dd23535d8a8b8723a298"}, {"code": "(fn rm [coll]\n         (cond\n           (empty? coll) '()\n           (= (first coll) (second coll)) (rm (rest coll))\n           :else (conj (rm (rest coll) )(first coll))))", "problem": 30, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "#(loop [xs % compress '() end nil]\n  (if xs\n    (let [head (first xs)]\n      (if (empty? compress)\n          (recur (next xs) (concat compress (list head)) head)\n        (if (not= end head)\n          (recur (next xs) (concat compress (list head)) head)\n          (recur (next xs) compress head))))\n    compress))", "problem": 30, "user": "4e593dac535d8a8b8723a29c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e588e84535d8a8b8723a294"}, {"code": "(fn squeze [s]\n  (when-let [[f & r] (seq s)]\n    (cond (= f (first r))\n      (squeze r)\n    :else\n      (cons f (squeze r))\n    )\n  )\n)", "problem": 30, "user": "4e570f47535d8a8b8723a287"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e599577535d8a8b8723a29f"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "4e597b2c535d8a8b8723a29d"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "4e5b192e535d8a8b8723a2b3"}, {"code": "#(map first (partition-by identity (seq %)))", "problem": 30, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn compr\n  [coll]\n  (cons (first coll)\n  (->> coll\n\t     (map vector (rest coll) coll)\n\t     (remove #(apply = %))\n\t     (map first))))", "problem": 30, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn [s]\n  (loop [rr [] ss s p nil]\n    (if (empty? ss) \n      rr\n      (if (= (first ss) p)\n        (recur rr (rest ss) p)\n        (recur (conj rr (first ss)) (rest ss) (first ss))))))", "problem": 30, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn [n]\n    (loop [sx (seq n) lastone nil acc nil]\n\t     (if (empty? sx)\n\t\t (reverse acc)\n\t\t (recur\n\t\t  (rest sx)\n\t\t  (first sx)\n\t\t  (if\n\t\t   (not (= (first sx) lastone))\n\t\t   (conj acc (first sx))\n\t\t   acc)))))", "problem": 30, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn compress-sequence [sequence]\n  (loop [s (seq sequence) r [] last nil]\n    (if (empty? s)\n      r\n      (recur\n        (rest s)\n        (if (not= (first s) last)\n          (conj r (first s))\n          r)\n        (first s)))))", "problem": 30, "user": "4e360072535deb9a81d77f30"}, {"code": "(fn [coll]\r\n  (reverse\r\n    (reduce (fn [s x]\r\n      (if (= (first s) x)\r\n        s (cons x s))\r\n    ) '() coll)))", "problem": 30, "user": "4e55ea0c535d8a8b8723a281"}, {"code": "(fn [coll]\n  (reduce #(conj %1 (first %2))\n          []\n          (partition-by identity coll)))", "problem": 30, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn remd \n  ([coll]\n\t   (remd coll '()))\n\t([coll acc]\n\t   (let [idem (= (first coll) (first (rest coll)))\n          ncoll (rest coll)\n\t\t nacc (if idem\n\t\t\tacc\n\t\t\t(concat acc (list (first coll))))]\n\t     (if (empty? coll)\n\t       acc\n\t       (recur ncoll nacc)))))", "problem": 30, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "reduce #(if (= (peek %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "(fn [l] (reduce #(if (not= (last %1) %2) \n             (conj %1 %2) \n             %1) \n          [] l))", "problem": 30, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn compress [x]\n  (if (empty? x) x\n    (let [a (first x)\n          b (rest x)]\n     (if (empty? b) x\n        (if (= a (first b)) (recur b) (cons a (compress b)))))))", "problem": 30, "user": "4e4b911f535dc968683fc4d6"}, {"code": "#(apply conj [] (map first (partition-by identity %)))", "problem": 30, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "#(reverse \n  (reduce (fn [a b] (if (= (first a) b) a (cons b a))) \n          (list (first %)) %))", "problem": 30, "user": "4e58ef07535d8a8b8723a299"}, {"code": "(fn temp\r\n  ([x] (temp \"\" x []))\r\n  ([p1 n res] (let[f (first n) nx (next n) r (if (= p1 f) res (conj res f))] (if nx (recur f nx r) r))))", "problem": 30, "user": "4e44358f535dc968683fc4a8"}, {"code": "(fn cmprss\n  [coll]\n    (apply concat (map set (partition-by identity coll)\n)))", "problem": 30, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "#(loop [r % acc []]\r\n    (if (empty? r)\r\n      (reverse acc)\r\n      (recur (rest r) (if (= (first r) (second r)) acc (cons (first r) acc)))))", "problem": 30, "user": "4e5a3891535d8a8b8723a2aa"}, {"code": "(fn cmp [x]\n    (cond (empty? x) '()\n          (= (first x) (second x))\n              (cmp (rest x))\n          true\n              (cons (first x) (cmp (rest x)))))", "problem": 30, "user": "4e5fda32535d8ccf87e9fe4e"}, {"code": "(fn compress-\n;  \"30. Write a function which removes consecutive duplicates from a sequence.\"                                                                                        \n  ([coll] (compress- coll nil))\n  ([coll last]\n     (let [x (first coll)]\n       (if (not (empty? coll))\n         (if-not (= x last)\n           (cons x (compress- (rest coll) x))\n           (compress- (rest coll) x))))))", "problem": 30, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn [x] (keep-indexed \n  #(when-not (= %2 (get x (inc %1))) %2) x))", "problem": 30, "user": "4e634eb9535d8ccf87e9fe63"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e46ac46535dc968683fc4b5"}, {"code": "#(loop\n    [result '() x %]\n    (if (empty? x)\n    result\n    (recur\n     (if (= (last result) (first x))\n       result\n       (concat result (cons (first x) '())))\n     (rest x))))", "problem": 30, "user": "4e6472b7535d8ccf87e9fe6c"}, {"code": "(fn squz [s] (if (= (first s) (nth s 1)) \n                 (if (> (count (rest s)) 1) (squz(rest s)) (rest s)) \n                 (cons (first s) (if (> (count (rest s)) 1) (squz (rest s)) (rest s)))))", "problem": 30, "user": "4e5e9f6b535d8a8b8723a2d2"}, {"code": "#(reduce\r\n  (fn [r e]\r\n    (if (= (last r) e)\r\n      r\r\n      (conj r e)))\r\n  []\r\n  %)", "problem": 30, "user": "4e65f9d4535d8ccf87e9fe73"}, {"code": "#(loop [curr %1\r\n       ret  '()]\r\n  (if (empty? curr)\r\n    ret\r\n    (recur (rest curr) (if (= (first curr) (second curr))\r\n                         ret\r\n                         (concat ret (list (first curr)))))))", "problem": 30, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn starter [lst] ((fn my-compress [lst lat] (cond \n                                    (= lst ()) ()\n                                    (= (first lst) lat) (my-compress (rest lst) (first lst))\n                                    :else (conj \n                                            (my-compress (rest lst) (first lst)) (first lst)))) \n                     lst ()))", "problem": 30, "user": "4e62294c535d8ccf87e9fe5f"}, {"code": "(fn [s]\n  (loop [in s\n         last-cand nil\n         acc []]\n   (if (empty? in)\n     (seq acc)\n     (let [cand (first in)]\n       (if (= last-cand cand)\n         (recur (rest in) cand acc)\n         (recur (rest in) cand (conj acc cand)))))))", "problem": 30, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn f [xs]\n  (if (empty? (rest xs))\n      xs\n      (if (= (first xs) (second xs))\n          (f (rest xs))\n          (cons (first xs) (f (rest xs))))))", "problem": 30, "user": "4e68dbd5535d8ccf87e9fe8f"}, {"code": "#(loop [a % b [] c nil]\n           (if a\n               (recur (next a) (if (= (first a) c)\n                                   b\n                                   (conj b (first a)))\n                      (first a))\n               b))", "problem": 30, "user": "4e68be01535d8ccf87e9fe88"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn remove-dups [input]\n  (loop [retval '()\n        unprocessed input]\n        (if (empty? unprocessed)\n            retval\n            (if (= (first unprocessed)(second unprocessed))\n                (concat retval (remove-dups (rest input)))\n                (concat retval \n                  (list (first input))\n                  (remove-dups (rest input)))))))", "problem": 30, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "#(->\n  (fn [[l r :as a] n] (if (= l n) a [n (conj r n)]))\n  (reduce [nil []] %)\n  fnext)", "problem": 30, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "reduce (fn [coll x]\n  (if (= (last coll) x)\ncoll\n(conj coll x))) []", "problem": 30, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e6b3fc8535d8ccf87e9ff0f"}, {"code": "(fn [str & more]\r\n  (prn str more)\r\n  (let [unique-str (if (nil? more) () (first more))]\r\n    (if (nil? (first str))\r\n      (reverse unique-str)\r\n      (if (= (first str) (first unique-str))\r\n        (recur (next str) (list unique-str))\r\n        (recur (next str) (list (cons (first str) unique-str)))\r\n        ))))", "problem": 30, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "#(apply concat (map distinct (partition-by identity %)))", "problem": 30, "user": "4e223bd6535d04ed9115e81c"}, {"code": "(fn [x] (conj (vec (concat (map first (filter #(not(= (first %) (second %))) (partition 2 1 x))))) (last x)))", "problem": 30, "user": "4e6def42535d5021c1a895f7"}, {"code": "(fn [s]\n  (->> s (partition-by identity) (map first)))", "problem": 30, "user": "4e6dd51b535d5021c1a895f6"}, {"code": "(fn [a-seq] (map first (filter (fn [[a b]] (not= a b)) (map #(list %1 %2) a-seq (concat (rest a-seq) '(:end))\n))))", "problem": 30, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "(fn f [[x & s]] (if x (cons x (f (drop-while #{x} s)))))", "problem": 30, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn cmprs [coll] (when-let [[f & r] (seq coll)] (if (= f (first r)) (cmprs r) (cons f (cmprs r)))))", "problem": 30, "user": "4e653558535d8ccf87e9fe6f"}, {"code": "(fn [coll]\n\t(let [shifted (cons nil coll)]\n\t   (remove nil? \n        (map (fn [x y] (if (not= x y) x)) \n             coll \n             shifted))))", "problem": 30, "user": "4e68fad4535d8ccf87e9fe93"}, {"code": "#(loop [[x & xs] % prev nil acc []]\n  (if (nil? x)\n    acc\n    (if (= x prev)\n      (recur xs x acc)\n      (recur xs x (conj acc x)))))", "problem": 30, "user": "4e6e4127535d5021c1a89605"}, {"code": "(fn dubs [x] (when (> (count x) 0)\n            (if (= (first x) (-> x rest first))\n            (dubs (rest x)) \n            (conj (dubs (-> x rest)) (first x) ))))", "problem": 30, "user": "4e6cf521535de274dd8d818b"}, {"code": "reduce (fn [s x] (if (= (last s) x) s (conj s x))) []", "problem": 30, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "#(reverse ((fn [c a]\n      (if (empty? c)\n    a\n    (if (= (first c) (second c))\n      (recur (next c) a)\n      (recur (next c) (cons (first c) a)))))\n  %1 []))", "problem": 30, "user": "4e31a101535deb9a81d77f1d"}, {"code": "(fn [coll] \n  (loop [sq coll\n         acc '()]\n    (let [newAcc (if (= (last acc) (first sq)) acc (concat acc (conj '() (first sq)) ))]\n    (if (= (rest sq) '())\n        newAcc\n        (recur (rest sq) newAcc))\n     ))\n\n)", "problem": 30, "user": "4e6daa22535d5021c1a895ef"}, {"code": "(fn[s] (map first (partition-by identity s)) )", "problem": 30, "user": "4e6dd0f5535d5021c1a895f3"}, {"code": "#(map last (partition-by str %))", "problem": 30, "user": "4e6dc5f5535d5021c1a895f0"}, {"code": "(fn [x] (let [d (filter #(not= (first %) (second %))(partition 2 (interleave (seq x) (rest (seq x)))))] (cons (first (first d)) (map second d))))", "problem": 30, "user": "4e6e6630535d5021c1a89609"}, {"code": "(fn [x] (mapcat #(if (= %1 %2) nil [%1]) x (conj (vec (next x)) nil)))", "problem": 30, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "(fn [l]\n  (reverse\n    (reduce \n      (fn[x,y] (if (= (first x) y) x (into x (list y))) ) \n      '() \n      (seq l))))", "problem": 30, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn f [[a & z]]\n  (lazy-seq\n    (when a\n     (cons a (f (drop-while #(= a %) z))))))", "problem": 30, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn press \n  ([x] (let [next (first x)] (cons next (press (rest x) next))))\n  ([x prev] \n    (if (empty? x) ()\n        (let [next (first x)]\n             (if (= next prev)\n                 (press (rest x) next)\n                 (cons next (press (rest x) next)))))))", "problem": 30, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "(fn [param]\n  (reduce (fn [value next-el]\n             (if (not= (last value) next-el)\n             (conj value next-el)\n             value)) [] param))", "problem": 30, "user": "4e6a11ee535d8ccf87e9fe9f"}, {"code": "(fn compress [xs]\n  (if (empty? xs)\n    '()\n    (cons (first xs) (compress (drop-while (partial = (first xs)) (rest xs))))))", "problem": 30, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "(fn [n] (reduce (fn [l a] (if (or (empty? l) (not(= a (first l))))(cons a l) l)) '() (reverse n)))", "problem": 30, "user": "4dbf0cd2535d020aff1edf72"}, {"code": "(fn [s] (reduce #(if (= (last %1) %2) %1 (concat %1 [%2])) [] s))", "problem": 30, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "4e704293535d5021c1a89634"}, {"code": "#(map first (partition-by (fn [x] x) %))", "problem": 30, "user": "4e6a6b83535d8ccf87e9fee0"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e71cc2e535d5021c1a89652"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e7115b3535d5021c1a89647"}, {"code": "#(reduce (fn [so-far el] (if (= el (last so-far)) so-far (conj so-far el))) [] %)", "problem": 30, "user": "4e71e7b7535d5021c1a89654"}, {"code": "#(reduce (fn [myseq item] (if (= (last myseq) item) myseq (concat myseq [item]))) () %)", "problem": 30, "user": "4e70ed07535d5021c1a89643"}, {"code": "(fn compress [xs]\n  (when-let [[f & r] (seq xs)]\n    (if (= f (first r))\n      (compress r)\n      (cons f (compress r)))))", "problem": 30, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn [s] \n  (loop [r (list (first s)), l (first s), s (next s)]\n    (let [n (first s)]\n      (if n \n        (recur (if (= n l) r (cons n r)) n (next s))\n        (reverse r)\n      )\n    )\n  )\n)", "problem": 30, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn [s]\n  (loop [x s xs []]\n    (if (empty? x) xs\n      (recur (drop-while #(= (first x) %) (rest x)) (conj xs (first x))))))", "problem": 30, "user": "4daf907aedd6309eace4d17b"}, {"code": "(fn [coll]\n  (reduce \n  (fn [x y]\n  (if (= (last x) y) x (conj x y)))\n  []\n  coll))", "problem": 30, "user": "4daedd1eedd6309eace4d164"}, {"code": "(fn f [xs] \n  (if (empty? xs) xs\n    (if (empty? (rest xs))\n      xs\n      (if (= (first xs) (first (rest xs)))\n          (f (rest xs))\n          (conj (f (rest xs)) (first xs))))))", "problem": 30, "user": "4e71920f535d5021c1a8964e"}, {"code": "#(loop [acc [], l %]\n     (cond\n       (empty? l) acc\n       (= (last acc) (first l))  (recur acc (rest l))\n       :else (recur (conj acc (first l)) (rest l))))", "problem": 30, "user": "4e6a2f93535d8ccf87e9feaa"}, {"code": "(fn [l]\n (concat [(first l)] (map #(nth l %)\n  (filter #(not (= (nth l %) (nth l (- % 1))))\n   (range 1 (count l)) ) ) ))", "problem": 30, "user": "4e720985535d5021c1a89655"}, {"code": "(fn [s]\n  (let [f (filter (fn [[a b]] (not= a b)) (partition 2 1 s))]\n    (reduce (fn [coll [a b]] (conj coll b))\n            (vec (first f)) (rest f))))", "problem": 30, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "4e71da4d535d5021c1a89653"}, {"code": "(fn cseq [l]\n                  (reverse\n                   (loop [[x & xs :as lst] l\n                          tail             nil\n                          result           nil]\n                     (cond\n                      (empty? lst) result\n                      (= tail x)   (recur xs x result)\n                      :else        (recur xs x (cons x result))))))", "problem": 30, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn [c]\n  (reduce \n    #(if (= (last %1) %2)\n       %1\n       (conj %1 %2))\n    []\n    (seq c))\n)", "problem": 30, "user": "4e6f8d36535d5021c1a89621"}, {"code": "(fn [x]\n     (let [\n\t  remove-2args (fn remove-2args\n\t  ([f coll] (remove-2args f coll (list)))\n\t  ([f coll acc]\n\t  (let [fir (first coll) sec (second coll)]\n\t    (when-not (nil? fir)\n\t    (if (f fir sec)\n\t      (remove-2args f (next coll) acc)\n\t      (cons fir (remove-2args f (next coll) acc)))))))\n\t  \n\t  lst (remove-2args #(= % %2) x)]\n      (if (char? (first lst))\n        (apply str lst) lst)))", "problem": 30, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "(partial reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [])", "problem": 30, "user": "4e6fa38b535d5021c1a89622"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn c[lst]\n   (if (empty? lst) '()\n     (if (= (count lst) 1) lst\n     (if (not= (nth lst 0) (nth lst 1))\n       (cons (nth lst 0) (c (rest lst)))\n       (c (rest lst))))))", "problem": 30, "user": "4e6a4641535d8ccf87e9feb9"}, {"code": "(fn [coll] \n  (reduce \n    (fn [acc x] \n      (if (= (last acc) x) acc (conj acc x))) [] \n    (vec coll)))", "problem": 30, "user": "4e6e7018535d5021c1a8960b"}, {"code": "#(loop [orig % new []]\n  \t\t (if (nil? orig)\n\t\t\t     new\n\t\t\t     (if (not= (last new) (first orig))\n\t\t\t\t      (recur (next orig) (conj new (first orig)))\n\t\t\t\t      (recur (next orig) new))))", "problem": 30, "user": "4e739e13535dff18050a9c76"}, {"code": "(fn pack [coll]\n  (if (empty? coll)\n      coll\n      (if-let [[x & xs] coll]\n        (let [packed-xs (drop-while (partial = x) xs)]\n          (concat [x]\n                  (pack packed-xs))))))", "problem": 30, "user": "4e5d0e96535d8a8b8723a2c8"}, {"code": "(fn [in]\n  (reverse (reduce (fn [a b]\n                     (if (= (first a) b)\n                       a\n                       (cons b a))) '() in)))", "problem": 30, "user": "4e773be8535d324fb2983d6e"}, {"code": "#(reduce (fn [a b]\n    (if (= (last a) b) a (concat a (list b)))\n  )\n '() %)", "problem": 30, "user": "4e781a2e535d324fb2983d74"}, {"code": "(fn [x] \n    (   remove nil? (\n        map \n            (fn [ix] \n                (if\n                    (and (not= ix 0) (not= (nth x ix) (nth x (- ix 1)))) (nth x ix) (if (= ix 0) (nth x ix)))\n            ) \n            (range (count x))\n        )\n    )\n)", "problem": 30, "user": "4e78dc98535db95036265724"}, {"code": "(fn [s]\n  (loop [xs s, out []]\n    (if (not (empty? xs))\n      (if (= (first xs) (second xs))\n        (recur (rest xs) out)\n        (recur (rest xs) (conj out (first xs))))\n      out)))", "problem": 30, "user": "4e6a2e83535d8ccf87e9fea7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e707db6535d5021c1a8963a"}, {"code": "#(reduce (fn [x y] (if (= y (last x)) x (conj x y))) [] %)", "problem": 30, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn fujikawa [col]\n  (loop [c col prev nil re ()]\n    (if (empty? c)\n      (reverse re)\n      (recur (rest c) (first c) (if (= (first c) prev) re (cons (first c) re )))\n      )\n    )\n  )", "problem": 30, "user": "4db7da66535d1e037afb2187"}, {"code": "(fn [xs]\n  (reduce \n    (fn [v x]\n      (if (= x (last v))\n        v \n        (conj v x))) [] xs))", "problem": 30, "user": "4e726914535d5021c1a89661"}, {"code": "(fn [col] (loop [result [], c col, i 0] (if (first c) (let [result (if (= (first c) (last result)) result (conj result (first c)))] (recur result (rest c) (inc i))) result) ))", "problem": 30, "user": "4e794004535db169f9c796a1"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n      (if (= f (first r))\n            (cmprs r)\n                  (cons f (cmprs r)))))", "problem": 30, "user": "4e76ba46535d324fb2983d6d"}, {"code": "(fn unique-insert\n  ([s]\n     (unique-insert [] (first s) (rest s)))\n  ([acc last-elem s]\n     (if (empty? s)\n       (conj acc last-elem)\n       (let [curr (first s)\n             rst  (rest s)]\n         (if (= last-elem curr)\n           (unique-insert acc last-elem rst)\n           (unique-insert (conj acc last-elem) curr rst))))))", "problem": 30, "user": "4e7a5395535db169f9c796ab"}, {"code": "(fn f [s]\n  (if-let [[c & r] (seq s)]\n    (cons c (f (drop-while #(= c %) r)))))", "problem": 30, "user": "4e6a4038535d8ccf87e9feb5"}, {"code": "#(reduce (fn [x y]\n  (if (= (last x) y)\n    x\n    (conj x y))) [] %)", "problem": 30, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn [coll] (reduce (fn[a b] (if (not= (last a) b) (conj a b) a)) [] coll))", "problem": 30, "user": "4e7bc07c535db169f9c796b9"}, {"code": "#(loop [result [] [fst & rst :as coll] %]\n  (if (empty? coll)\n      result\n      (recur (if (and (not (empty? rst))\n                      (= fst (first rst)))\n                 result\n                 (conj result fst))\n             rst)))", "problem": 30, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn compress\n  [col]\n  (loop [r []\n         c col]\n    (if (empty? c)\n      r\n      (if (not= (first c) (last r))\n        (recur (conj r (first c)) (rest c))\n        (recur r (rest c))))))", "problem": 30, "user": "4e5a460f535d8a8b8723a2ab"}, {"code": "(fn cleaner\n  ([input] (cleaner input '()))\n  ([input result]\n    (if (empty? input) result\n      (if (= (first result) (last input))\n        (cleaner (butlast input) result)\n        (cleaner (butlast input) (conj result (last input)))))))", "problem": 30, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e6799cc535d8ccf87e9fe7f"}, {"code": "#((fn [lst result] (println lst result)\r\n             (cond\r\n               (empty? lst) (reverse result)\r\n               (= (first lst) (second lst)) (recur (rest lst) result)\r\n               :else (recur (rest lst) (cons (first lst) result))))\r\n       % nil)", "problem": 30, "user": "4e6b04ae535d8ccf87e9ff09"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e7db3b4535db169f9c796e1"}, {"code": "reduce #(if (= (peek %) %2) % (conj % %2)) []", "problem": 30, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn [x]                 \n  (loop [s x acc '()]\n      (if (empty? s) (reverse acc)\n          (recur (rest s)\n            (if (= (first s) (first acc)) \n                acc\n                (conj acc (first s)))))))", "problem": 30, "user": "4e7dbe0c535db169f9c796e3"}, {"code": "(fn [c]\n  (letfn [(foo-aux [xs rs]\n            (if (seq xs)\n              (if (= (first xs) (first rs))\n                (recur (rest xs) rs)\n                (recur (rest xs) (cons (first xs) rs)))\n              (reverse rs)))]\n    (foo-aux c nil)))", "problem": 30, "user": "4e7c4290535db169f9c796bc"}, {"code": "#(map last (partition-by identity %))", "problem": 30, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn [coll]\n  (map first (partition-by identity coll)))", "problem": 30, "user": "4e40529b535dc968683fc49a"}, {"code": "(fn [s]\n  (->> s\n      (partition-by identity)\n      (map distinct)\n      (apply concat)))", "problem": 30, "user": "4e7e032b535db169f9c796fc"}, {"code": "(fn [s] (loop [s (seq s) a []]\r\n  (if (empty? s) a (recur (rest s) (if (and (not (empty? a)) (= (last a) (first s))) a (conj a (first s)))))))", "problem": 30, "user": "4e7e55ab535db169f9c79711"}, {"code": "#(map first (partition-by list %))", "problem": 30, "user": "4e7e93f5535db169f9c7971a"}, {"code": "#(map first(partition-by identity%))", "problem": 30, "user": "4e7eff9e535db966e863cc38"}, {"code": "(fn compress   [l]\n\n  (if (empty? l)\n    l\n    \n  \n  (cons\n\n   (first l)\n\n   (compress (drop-while (partial = (first l)) l))\n )  \n\n\n)\n\n)", "problem": 30, "user": "4e78c208535db95036265722"}, {"code": "#(reverse(last(reduce (fn [[a l] v] (if (= a v) [a l] [v (cons v l)])) [nil ()] %)))", "problem": 30, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn my-compress [x]\n  (loop [coll x comp [] lst nil]\n    (if (empty? coll)\n      comp\n      (if (= (first coll) lst)\n        (recur (rest coll) comp lst)\n        (recur (rest coll) (conj comp (first coll)) (first coll))))))", "problem": 30, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn strippy [s]\n  (let [shifted (cons nil s)]\n  (seq (remove nil? \n    (map (fn [x y] (if (not= x y) x)) s shifted)))))", "problem": 30, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn [s]\n  (loop [[part & parts] s acc []]\n    (if (nil? part) acc\n      (recur parts\n        (if (= part (first parts)) acc \n          (conj acc part))))))", "problem": 30, "user": "4e7f7e48535db966e863cc42"}, {"code": "#(map last (partition-by str %))", "problem": 30, "user": "4e6ea1f5535d5021c1a8960e"}, {"code": "(fn [seq] (reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] seq))", "problem": 30, "user": "4e7e05a6535db169f9c796fe"}, {"code": "(fn mycomp\n  ([s] (seq (mycomp s [])))\n  ([s v] (if (empty? s)\n           v\n           (if (= (first s) (last v))\n               (mycomp (rest s) v)\n               (mycomp (rest s) (conj v (first s)))))))", "problem": 30, "user": "4e7ada51535db169f9c796ae"}, {"code": "#(loop [res [(first %)] c (first %) coll (next %)]\r\n    (if (nil? coll)\r\n      res\r\n      (recur (if (= c (first coll))\r\n               res\r\n               (conj res (first coll)))\r\n             (first coll) (next coll))))", "problem": 30, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(fn dedup [s]\n  (when-let [[f & r] (seq s)]\n    (if (= f (first r))\n      (dedup r)\n      (cons f (dedup r)))))", "problem": 30, "user": "4e7e3504535db169f9c79709"}, {"code": "(fn [s]\n (map first (partition-by identity s)))", "problem": 30, "user": "4e80d71b535db62dc21a62b7"}, {"code": "(fn my-compress \r\n  ([input] (my-compress input nil))\r\n\t([input result] \r\n\t\t(if (empty? input) (reverse result)\r\n\t\t\t(my-compress (rest input) (if (= (first input) (second input)) result (cons (first input) result))))))", "problem": 30, "user": "4e75d6b6535d7a570dd295c6"}, {"code": "(fn [r]\n  (mapcat\n    #(if (= (nth % 0) (nth % 1)) [] [(nth % 0)])\n    (map vector r (concat (rest r) [(Object.)]))))", "problem": 30, "user": "4db1f7d223724b71670a9c07"}, {"code": "(fn [coll]\n   (concat \n     (vector (first coll)) \n     (map last \n       (filter \n         #(not (= (first %) (second %))) \n          (partition 2 1 coll)))))", "problem": 30, "user": "4e7dcdb5535db169f9c796e9"}, {"code": "#(map first (partition-by (set %) %))", "problem": 30, "user": "4e823ed7535db62dc21a62c7"}, {"code": "(fn [x]\n  (loop [m (first x)\n         n []\n         s (rest x)]\n  (if (empty? s)\n    (seq (conj n m))\n    (if (= m (first s))\n        (recur m n (rest s))\n        (recur (first s) (conj n m) (rest s))))))", "problem": 30, "user": "4e6a73d0535d8ccf87e9fee7"}, {"code": "(fn dedup [sq]\n  (loop [s []\n         r sq\n         c nil]\n    (if (empty? r)\n        s\n        (recur (if (= c (first r)) s (conj s (first r)))\n               (rest r)\n               (first r)))))", "problem": 30, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [in]\n    (lazy-seq (first (reduce (fn [[res last] num]\n                     (if (= last num)\n                       [res last]\n                       [(conj res num) num]))\n                   [[] nil]\n                   in))))", "problem": 30, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn cmprs [coll]\r\n  (when-let [[f & r] (seq coll)] \r\n    (if (= f (first r)) \r\n      (cmprs r) \r\n      (cons f (cmprs r)))))", "problem": 30, "user": "4e5fb634535d8ccf87e9fe4a"}, {"code": "(fn [coll]\r\n    (loop [s coll, last nil, result '()]\r\n\t   (if (= s '())\r\n\t       (reverse result)\r\n\t       (if (= last (first s))\r\n\t\t   (recur (rest s) last result)\r\n\t\t   (recur (rest s) (first s) (conj result (first s)))))))", "problem": 30, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn [s]\n  (loop [c s, r []]\n    (cond (empty? c) r\n          (= (first c) (second c)) (recur (rest c) r)\n          :else (recur (rest c) (conj r (first c))))))", "problem": 30, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "#(loop [u [] i 0]\r\n  (if (= i (count %))\r\n       u\r\n       (recur (if (not= (last u) (nth % i))\r\n                 (conj u (nth % i))\r\n                  u) (inc i))))", "problem": 30, "user": "4e1fe800535d04ed9115e811"}, {"code": "(fn [x]\n  ((fn f [y result]\n      (if (empty? y)\n          (reverse result)\n          (if (= (first y) (first result))\n              (f (rest y) result)\n              (f (rest y) (conj result (first y))))))\n    x '()))", "problem": 30, "user": "4e73a9dc535dff18050a9c77"}, {"code": "(fn cp [xs] (if (next xs)\n              (let [[x & r] xs]\n                (if (= x (first r))\n                  (cp r)\n                  (cons x (cp r))))\n              xs))", "problem": 30, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn f ([xs] (if (empty? xs) xs (f (rest xs) [(first xs)])))\r\n      ([xs acc] (if (empty? xs) acc\r\n                    (if (= (first xs) (peek acc))\r\n                        (recur (rest xs) acc)\r\n                        (recur (rest xs) (conj acc (first xs)))))))", "problem": 30, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn [coll]\n  (reduce\n    (fn [val x]\n      (if (not= (last val) x)\n        (conj val x)\n        val))\n    []\n    coll))", "problem": 30, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn d[s]\n  (loop [a [] b s]\n     (if (nil? b)\n        (seq a)\n        (if (= (last a) (first b))\n           (recur a (next b))\n           (recur (conj a (first b)) \n            (next b))))))", "problem": 30, "user": "4e842ebb535db62dc21a62df"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e860e85535db62dc21a62f1"}, {"code": "#(map first (partition-by str %))", "problem": 30, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "4db8ec47535d1e037afb219d"}, {"code": "(fn dedupe [seq]\n  (let [f (fn [[res prev] e]\n            (if (= prev e) [res prev]\n                [(cons e res) e]))]\n    (reverse (first (reduce f [nil nil] seq)))))", "problem": 30, "user": "4e7f8f85535db966e863cc44"}, {"code": "#(reduce\n  (fn [a b]\n    (if (= (last a) b) a (conj a b)))\n  (cons [] (seq %)))", "problem": 30, "user": "4e894068535d4ef0aa30db97"}, {"code": "(fn [s]\n  (loop [ans '()\n         nexts s]\n         (if (> (count nexts) 0)\n             (recur (if (= (first ans) (first nexts))\n                        ans\n                        (conj ans (first nexts)))\n                    (rest nexts))\n             (reverse ans))))", "problem": 30, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "(fn [l]\n  (reverse\n   (reduce\n    (fn [a b]\n      (if (= (first a) b)\n  a\n\t(cons b a)))\n    '()\n    l)))", "problem": 30, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn f [coll]\n  (cond\n    (empty? coll) '()\n(= 1 (count coll)) coll\n(= (first coll) (second coll)) (f (rest coll))\n:else (cons (first coll) (f (rest coll)))))", "problem": 30, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn compress\r\n  [s]\r\n  (reduce (fn [v n]\r\n   (if (= (last v) n)\r\n     v\r\n     (conj v n))) [] s))", "problem": 30, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn [ls] (reduce (fn [xs y] (if (= (last xs) y) xs (conj xs y))) [] ls))", "problem": 30, "user": "4e89de60535d3e98b8023285"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [coll]\n     \"compress a sequence: removing consecutive duplicates                      \n      '(1 1 2 3 3) -> '(1 2 3)\"\n     (loop [coll coll prev nil tmp []]\n       (cond\n        (empty? coll) tmp\n        (= (first coll) prev) (recur (rest coll) prev tmp)\n        :else (recur (rest coll) (first coll) (conj tmp (first coll))))))", "problem": 30, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "(fn [init-l]\n  (loop [l init-l, last-c nil, res '()]\n    (if (seq l)\n        (if (= (first l) last-c)\n        (recur (rest l) last-c res)\n        (recur (rest l) (first l) (concat res (list (first l))))\n        )\n      res\n    )\n))", "problem": 30, "user": "4e89ddf9535d3e98b8023284"}, {"code": "(fn cmpseq [[f & r]]\n  (if f\n    (if (= f (first r))\n      (cmpseq r)\n      (cons f (cmpseq r)))\n    ()))", "problem": 30, "user": "4e8c1d97535d65386fec2127"}, {"code": "(fn [coll] (reverse(reduce (fn [lcoll x](if (not= (first lcoll) x) (cons x lcoll) lcoll)) '() coll)))", "problem": 30, "user": "4e8aef69535d65386fec2114"}, {"code": "#(reverse (loop [s % r '()]\n       (if (empty? s)\n           r\n           (if (= (first s) (first r))\n               (recur (rest s) r)\n               (recur (rest s) (cons (first s) r))))))", "problem": 30, "user": "4e8ad247535d65386fec2111"}, {"code": "(fn [col]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] col))", "problem": 30, "user": "4e89f9e5535d3e98b8023289"}, {"code": "(fn [coll]\n  (loop [result (list (first coll))\n         remain (rest coll)]\n    (if (empty? remain)\n        (reverse result)\n        (recur (if (= (first remain) (first result))\n                   result\n                   (conj result (first remain)))\n               (rest remain)))))", "problem": 30, "user": "4daf36c2edd6309eace4d175"}, {"code": "(fn rem-dup [col]\r\n  (loop [c col r []]\r\n    (if (empty? c)\r\n      r\r\n      (recur (rest c) (if-not (= (first c) (last r))\r\n                        (concat r [(first c)])\r\n                        r)))))", "problem": 30, "user": "4e83b1af535db62dc21a62dc"}, {"code": "(fn [l]\n  (reduce \n    #(if (= %2 (last %1)) %1 (conj %1 %2)) [] l))", "problem": 30, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn [coll] \n  (remove nil? \n    (map #(if (not= %1 %2) %1) coll (cons \"push!\" coll))))", "problem": 30, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn [seqn]\n  (loop [seqn seqn acc []]\n    (if-let [x (first seqn)]\n      (recur (drop-while #(= % x) seqn) (conj acc x))\n      acc)))", "problem": 30, "user": "4e8944b6535d4ef0aa30db98"}, {"code": "(fn compress [x]\n        (loop [lst x\n              result '()]\n              (if (empty? lst)\n                (if (char? (first result))\n                  (apply str (reverse result))\n                  (reverse result))\n                (if (= (first result) (first lst))\n                  (recur (rest lst) result)\n                  (recur (rest lst) (conj result (first lst)))))))", "problem": 30, "user": "4e7e241a535db169f9c79705"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4e8a460e535d65386fec2109"}, {"code": "(fn [s]\n    (reduce #(if (= (peek %1) %2) %1 (conj %1 %2)) [] (vec s)))", "problem": 30, "user": "4e8e8c24535d65386fec2143"}, {"code": "#(map last (partition-by identity %))", "problem": 30, "user": "4e5867d1535d8a8b8723a291"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e8b557c535d65386fec2119"}, {"code": "#(map last (partition-by str %))", "problem": 30, "user": "4e6a61d8535d8ccf87e9fed8"}, {"code": "#((fn cmps [cur lst]\n    (when (not (empty? lst))\n      (let [f (first lst)]\n        (if (= f cur)\n          (cmps f (rest lst))\n          (cons f (cmps f (rest lst)))))))\n  nil %)", "problem": 30, "user": "4e8f5eba535d65386fec214c"}, {"code": "(comp (partial map first) (partial partition-by identity))", "problem": 30, "user": "4dc0ff08535d020aff1edf84"}, {"code": "(fn [x]\n  (loop [x (seq x) r '()]\n    (let [r* (if (= (first x) (first r)) r (conj r (first x)))]\n      (if (next x)\n          (recur (rest x) r*)\n          (reverse r*)))))", "problem": 30, "user": "4db016af838c48654951d9b9"}, {"code": "reduce (fn [a b] (if (= (last a) b) a (conj a b))) []", "problem": 30, "user": "4e6f8431535d5021c1a8961e"}, {"code": "(fn [coll]\n  \t\t\t(loop [c coll res []]\n\t\t\t\t\t (println res)\n\t\t\t\t\t (if (empty? c)\n\t\t\t\t\t\t\t res\n\t\t\t\t\t\t\t (if-not (= (first c) (last res))\n\t\t\t\t\t\t\t\t\t\t\t (recur (rest c) (conj res (first c)))\n\t\t\t\t\t\t\t\t\t\t\t (recur (rest c) res)))))", "problem": 30, "user": "4db045b5838c48654951d9be"}, {"code": "#(reduce (fn [x y] (if (not= (last x) y) (conj x y) x)) [] %)", "problem": 30, "user": "4dfd018c535d04ed9115e77f"}, {"code": "(fn [coll]\n  (let [skip-fn (fn [coll val]\n                  (if (= (last coll) val)\n  \t                coll\n\t\t                (conj coll val)))]\n    (reduce skip-fn [] coll)))", "problem": 30, "user": "4e8dc25f535d65386fec213a"}, {"code": "#(map first\n  (filter (fn [[f s]] (not= f s))\n    (partition 2 1 [0] %)))", "problem": 30, "user": "4e8df08f535d65386fec213e"}, {"code": "#(map last (partition-by identity %))", "problem": 30, "user": "4e6f8af8535d5021c1a89620"}, {"code": "(fn [x] (reverse (reduce (fn [list element] (if (= (first list) element) list (conj list element) )) '() x )))", "problem": 30, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn [vec]\n    (loop [ovec vec counter 0 nvec '()]\n     (if (= counter (count ovec))\n       nvec\n       (if (empty? nvec)\n         (recur ovec (inc counter) (concat nvec (list (get ovec counter))))\n         (if (not (= (last nvec) (get ovec counter)))\n           (recur ovec (inc counter) (concat nvec (list (get ovec counter))))\n           (recur ovec (inc counter) nvec)\n         )\n       )\n     )\n   )\n)", "problem": 30, "user": "4e8b73e4535d65386fec2120"}, {"code": "(fn [s] \n  (reduce #(if (= (last %1) %2) %1 \n                                (conj %1 %2)) \n          [] \n          s))", "problem": 30, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn rm-dups\n  ([seq] (rm-dups (drop-last seq) (last seq) '()))\n  ([seq a sofar]\n    (if (empty? seq)\n      (cons a sofar)\n      (if (= a (last seq))\n        (rm-dups (drop-last seq) a sofar)\n        (rm-dups (drop-last seq) (last seq) (cons a sofar))))))", "problem": 30, "user": "4e84f77c535db62dc21a62e5"}, {"code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "problem": 30, "user": "4e7e0bdc535db169f9c796ff"}, {"code": "(fn [x]\n  (\n    (fn f [lst out]\n    (cond\n      (empty? lst) out\n      (= (first lst) (last out)) (f (rest lst) out)\n      :else (f (rest lst) (concat out (list (first lst)))))) x '()))", "problem": 30, "user": "4e89559c535d4ef0aa30db9a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4db92654535d1e037afb21a0"}, {"code": "#(reduce (fn [l i] (if (= (last l) i) l (conj l i))) [] %)", "problem": 30, "user": "4e7d2448535db169f9c796c8"}, {"code": "#(letfn [(remove-dupes [s c]\n  (if (empty? s)\n    c\n    (recur (rest s) (if (= (first s) (last c)) c (conj c (first s))))))]\n  (remove-dupes % []))", "problem": 30, "user": "4e8f4f64535d65386fec2149"}, {"code": "#(reduce (fn [neue cur]\n            (if (not= (last neue) cur)\n              (conj neue cur)\n              neue)) [] %)", "problem": 30, "user": "4e44510b535dc968683fc4aa"}, {"code": "#(for [[x y] (partition-all 2 1 %) :when (or (nil? y) (not= x y))] x)", "problem": 30, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "(fn remove-duplicates [source]\n  (when-let [[first-element & rest-of-pack] (seq source)] \n    (if (= first-element (first rest-of-pack)) \n      (remove-duplicates rest-of-pack) \n      (cons first-element (remove-duplicates rest-of-pack)))))", "problem": 30, "user": "4daee452edd6309eace4d165"}, {"code": "(fn [x]\n  (loop [i 1 prev (nth x 0) out [(first x)]]\n    (if (== i (count x))\n      out\n    (if (= (nth x i) prev)\n        (recur (inc i) prev out)\n        (recur (inc i) (nth x i) (conj out (nth x i)))))))", "problem": 30, "user": "4e955b95535dbda64a6f6b33"}, {"code": "(fn [inp]\n  ((fn [sq acc lastval]\n    (if (empty? sq)\n      acc\n      (if (= lastval (first sq))\n        (recur (rest sq) acc lastval)\n        (recur (rest sq) (conj acc (first sq)) (first sq)))))\n  (vec inp) [] nil))", "problem": 30, "user": "4e9528ef535dbda64a6f6b32"}, {"code": "#(reduce (fn [x y] (if (= y (last x)) x (conj x y))) [] %)", "problem": 30, "user": "4e72ac47535d5021c1a89666"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(letfn [(unique-conj [xs x]\n          (if (= (first xs) x)\n              xs\n              (conj xs x)))]\n  #(->> %\n    (reduce unique-conj ())\n    reverse))", "problem": 30, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn [x] (reduce\r\n  (fn [c nxtchr]\r\n    (if (= (last c) nxtchr)\r\n      c\r\n      (conj c nxtchr)\r\n      )\r\n    )\r\n  []\r\n  x\r\n  ))", "problem": 30, "user": "4e94a8b5535dbda64a6f6b16"}, {"code": "(fn [coll] \n  (reduce (fn [[h & r :as out] x]\n    (if (not= h x)\n      (conj out x)\n      out))\n    '()\n    (reverse coll)))", "problem": 30, "user": "4e976f79535dbda64a6f6b55"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [s] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "4e919b43535dbda64a6f6afb"}, {"code": "#(reduce\n  (fn [l v]\n    (if (= (last l) v)\n      l\n      (conj l v)))\n  []\n  %)", "problem": 30, "user": "4db85bdd535d1e037afb218d"}, {"code": "(fn [s]\n    (let [a (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s)]\n      (if (char? (first a)) (apply str a) a)))", "problem": 30, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "reduce #(if \n  (= (last %) %2) \n  % \n  (conj % %2)) \n  []", "problem": 30, "user": "4db13ff51254ad5b4805fa68"}, {"code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "problem": 30, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "#(loop [org % coll (conj () (first org)) ]\n  (println org coll)\n\t(if (empty? org) \n\t\t(if (not= (first coll) (last %)) (reverse (conj coll (last %))) \n\t\t\t                         (reverse coll))\n\t(recur (next org)\n\t\t(if (= (first coll) (first org)) coll (conj coll (first org)))))\t\t\n  )", "problem": 30, "user": "4e8ad1d2535d65386fec2110"}, {"code": "reduce #(if (= (last %) %2)\n               %\n               (conj % %2))\n           []", "problem": 30, "user": "4e99a255535dbda64a6f6b67"}, {"code": "(fn f [s]\n  (if (> (count s) 0)\n    (if (= (first s) (second s))\n      (f (rest s))\n      (cons (first s) (f (rest s))))))", "problem": 30, "user": "4e8d86d5535d65386fec2136"}, {"code": "#(reverse (reduce (fn [s x] (if (= (first s) x) s (cons x s))) () %))", "problem": 30, "user": "4e9b230c535dbda64a6f6b75"}, {"code": "(fn undup \n  ([target] (undup (next target) (vector (first target))))\n  ([target current]\n   (if (= target nil) current\n    (if (= (first target) (last current))\n      (undup (next target) current)\n      (undup (next target) (conj current (first target)))))))", "problem": 30, "user": "4e98a6d0535dbda64a6f6b5e"}, {"code": "(fn [xs]\n  (loop [ret [(first xs)] xs (next xs)]\n    (if xs\n      (if (= (last ret) (first xs))\n        (recur ret (next xs))\n        (recur (conj ret (first xs)) (next xs)))\n      ret\n    )))", "problem": 30, "user": "4e9c66e2535dbda64a6f6b7f"}, {"code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "problem": 30, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn [coll]\n  (reduce (fn [l x]\n    (if (= x (last l))\n    l (conj l x))) [] coll))", "problem": 30, "user": "4e9487fb535dbda64a6f6b14"}, {"code": "(fn [s]\n  (loop [ms s mx (conj '() (first s)) my (first s)]\n    (cond\n      (= ms '()) (reverse mx)\n      (= (first ms) my) (recur (rest ms) mx (first ms))\n      :else\n      (recur (rest ms) (conj mx (first ms)) (first ms)))))", "problem": 30, "user": "4e9629c2535dbda64a6f6b3f"}, {"code": "reduce #(cond\n  (or (empty? %1) (not (= (last %1) %2))) (concat %1 (list %2))\n  :else %1\n  ) '()", "problem": 30, "user": "4e7f3891535db966e863cc3b"}, {"code": "(fn [coll] (map first (partition-by identity coll)))", "problem": 30, "user": "4e951f44535dbda64a6f6b30"}, {"code": "#(if (string? %)\n  (loop [f (first %)\n        s (second %)\n        r (rest %)\n        st \"\"]\n          (if (not (= f nil))\n            (if (= (compare f s) 0)\n              (recur s (second r) (rest r) st)\n              (recur s (second r) (rest r) (str st f))) st))\n(loop [f (first %)\n      s (second %)\n      r (rest %)\n      l []]\n        (if (not (= f nil))\n        (if (= (compare f s) 0)\n          (recur s (second r) (rest r) l)\n          (recur s (second r) (rest r) (conj l f))\n  ) l)))", "problem": 30, "user": "4e9e7ce3535dbda64a6f6b98"}, {"code": "#(reduce\n  (fn [s x]\n    (if (or (empty? s) (not= (first s) x))\n        (cons x s)\n        s))\n  '() (reverse %))", "problem": 30, "user": "4e9e0640535dbda64a6f6b91"}, {"code": "#((fn doit [n l]\n  (cond\n    (empty? l) n\n    (= (last n) (first l)) (doit n (rest l))\n    :else (doit (concat n (list (first l))) (rest l)))) '() %)", "problem": 30, "user": "4e9e12b2535dbda64a6f6b92"}, {"code": "(fn remdup [st] (reduce #(if (and %1 (not= (last %1) %2)) (conj %1 %2) %1)  [] (seq st)))", "problem": 30, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "#(reduce (fn [p n] (cond (not= (last p) n) (conj p n) true p)) [] %)", "problem": 30, "user": "4e975bce535dbda64a6f6b53"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "4e9e6bd6535dbda64a6f6b96"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn [coll]\n  (map last\n    (filter \n      #(not (= (first %) (last %)))\n      (partition 2 1 (cons nil coll)))) \n)", "problem": 30, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn [l]\n  (loop [w l result []]\n\t\t(cond  \n\t\t\t(empty? w) result\n\t\t\t(= (first w) (last result)) (recur (next w) result)\n\t\t\t:else (recur (next w) (conj result (first w) )))))", "problem": 30, "user": "4e9c4e02535dbda64a6f6b7e"}, {"code": "#(map last (partition-by identity %))", "problem": 30, "user": "4e8516d0535db62dc21a62e8"}, {"code": "(fn compr [col]\n  (letfn [(compr2 [col last sol]\n            (if (empty? col)\n              sol\n              (let [current (first col)]\n                (if (= current last)\n                  (compr2 (rest col) last sol)\n                  (compr2 (rest col)\n                          current\n                          (concat sol (list current)))))))]\n    (compr2 col \"\" '())))", "problem": 30, "user": "4ea01955535d7eef3080729f"}, {"code": "(fn [s] (reduce (fn [acc x] (if (= x (last acc)) acc (conj acc x))) [] s))", "problem": 30, "user": "4ea092f4535d7eef308072a6"}, {"code": "#(reverse (reduce                                                                                                                                                                                                                                                                     \n (fn [result val]                                                                                                                                                                                                                                                                      \n     (if (= (first result) val)                                                                                                                                                                                                                                                        \n         result                                                                                                                                                                                                                                                                        \n         (conj result val)))                                                                                                                                                                                                                                                           \n     '() %))", "problem": 30, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn [seq]\n  (loop [res []\n         remaining seq]\n    (if (empty? remaining)\n      res\n      (recur (if (= (last res) (first remaining))\n               res\n               (conj res (first remaining)))\n             (rest remaining)))))", "problem": 30, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn [coll] \n  (reverse (reduce \n             (fn [acc n]\n               (if (= (first acc) n)\n                 acc\n                 (conj acc n))) \n             '() \n             coll)))", "problem": 30, "user": "4ea09fa4535d7eef308072aa"}, {"code": "(fn [s]\n  (map first (partition-by identity s)))", "problem": 30, "user": "4daee8e9edd6309eace4d166"}, {"code": "(fn nodup [x]\n  (if (empty? x)\n    '()\n  (if (= (first x) (first (rest x)))\n    (nodup (rest x))\n    (cons (first x) (nodup (rest x))))))", "problem": 30, "user": "4ea0c284535d7eef308072ad"}, {"code": "(fn [coll] (mapcat #(if (= %2 %) () (list %2)) (cons nil coll) coll))", "problem": 30, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn [s]\n    (loop [s s\n           res []]\n      (if-not (seq s)\n        res\n        (let [prev (last res)\n              current (first s)]\n          (if (= prev current)\n            (recur (rest s) res)\n            (recur (rest s) (conj res current)))))))", "problem": 30, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn compress [s]\n  (loop [pending s, result []]\n    (if-not (empty? pending)\n      (let [fst (first pending)]\n        (recur (drop-while #(= % fst) pending)\n               (conj result fst)))\n      result)))", "problem": 30, "user": "4ea348ad535d7eef308072c4"}, {"code": "(fn [s]\n    (loop [rv []\n           s s]\n      (let [item (first s)]\n        (cond\n         (nil? item) (seq rv)\n         (= item (last rv)) (recur rv (rest s))\n         :else (recur (conj rv item) (rest s))))))", "problem": 30, "user": "4e9e4515535dbda64a6f6b95"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4e8a6bb0535d65386fec210b"}, {"code": "(fn compress [l]\n  (loop [l l pred nil acc '()]\n    (if (empty? l)\n      (reverse acc)\n      (let [first (first l)] \n        (recur (rest l) first (if (= first pred) acc (conj acc first)))))))", "problem": 30, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn cmprs [coll]\r\n  (when-let [[f & r] (seq coll)] \r\n    (if (= f (first r)) \r\n      (cmprs r) \r\n      (cons f (cmprs r)))))", "problem": 30, "user": "4e8ddf32535d65386fec213c"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "(fn x [coll] \n    (when-let [[h & t] coll]\n        (if (= h (first t))\n            (x t)\n            (cons h (x t)))))", "problem": 30, "user": "4e80d1c8535db62dc21a62b6"}, {"code": "(fn [x] (reverse \n  (reduce \n    (fn [acc x] \n      (if \n        (= (first acc) x) \n        acc \n        (cons x acc))) \n    '() \n    x)))", "problem": 30, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn [s]\n  (loop [items s, acc ()]\n    (if (empty? items)\n      (reverse acc)\n      (if (empty? acc)\n        (recur (rest items) (list (first items)))\n        (if (= (first items) (first acc))\n          (recur (rest items) acc)\n          (recur (rest items) (conj acc (first items))))))))", "problem": 30, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "(fn f [c] (reduce #(if (= (last %) %2) % (conj % %2)) [] c))", "problem": 30, "user": "4ea0cfb0535d7eef308072ae"}, {"code": "#(cons (first %) (mapcat (fn [[x y]] (if (= x y) [] (vec [y]))) (partition 2 (interleave % (rest %)))))", "problem": 30, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [seq]\n  (loop [s (rest seq) r [(first seq)]]\n    (if (empty? s)\n      r\n      (recur\n        (rest s)\n        (if (= (first s) (last r))\n          r\n          (conj r (first s)))))))", "problem": 30, "user": "4ea67906535d7eef308072e4"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ea5e794535d7eef308072df"}, {"code": "(fn [ls]\n  (reduce\n    (fn [acc x]\n      (if (not= x (last acc))\n        (conj acc x)\n        acc\n      )\n    )\n    []\n    ls\n  )\n)", "problem": 30, "user": "4ea57300535d7eef308072d5"}, {"code": "(fn [c]\n  (map first (partition-by identity c)))", "problem": 30, "user": "4dad76588e77d6ed63f12a44"}, {"code": "#(loop [coll % no-dups (conj '() (first coll))]\n    (let [curr (second coll) prev (first coll)]\n      (if (nil? curr)\n        (reverse no-dups)\n        (recur (rest coll)\n               (if (= curr prev)\n                 no-dups\n                 (conj no-dups curr))))))", "problem": 30, "user": "4ea87a83535d7eef308072fb"}, {"code": "(fn cmprs [coll]\r\n  (when-let [[f & r] (seq coll)] \r\n    (if (= f (first r)) \r\n      (cmprs r) \r\n      (cons f (cmprs r)))))", "problem": 30, "user": "4e944706535dbda64a6f6b11"}, {"code": "reduce #(if (not= (last %1) %2)\r\n              (conj %1 %2) %1 ) []", "problem": 30, "user": "4e9fde3c535d7eef3080729b"}, {"code": "(fn compr [xs]\n  (if (= (count xs) 1)\n    xs\n    (if (= (first xs) (first (rest xs)))\n      (compr (rest xs))\n      (concat (list (first xs)) (compr (rest xs)))\n      )\n    )\n  )", "problem": 30, "user": "4eaa96e1535d7eef3080730d"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4eab612d535d7eef30807316"}, {"code": "(fn compress [c1]\r\n  (loop [c1 c1 result []]\r\n    (if (empty? c1)\r\n      result\r\n      (recur (next c1) (if (= (first c1) (first (next c1))) result  (conj result (first c1))))\r\n      )\r\n    )\r\n  )", "problem": 30, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4ea85846535d7eef308072f9"}, {"code": "(fn [c]\n  (reduce\n    (fn [acc elt]\n      (if (= (last acc) elt)\n          acc\n        (conj acc elt)))\n    [] c))", "problem": 30, "user": "4ead6418535d7eef3080731f"}, {"code": "(fn seqc[x]\n  (reverse\n  (loop [msg x res '()]\n    (if (= (count msg) 0)\n      res\n      (recur \n        (rest msg)\n        (if (= (first msg) (first res))\n          res\n          (conj res (first msg))\n        )\n      )))))", "problem": 30, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "problem": 30, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "#(map first\n  (partition-by identity %))", "problem": 30, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn cmp [c]\n  (when-let [[f & r] (seq c)]\n    (if (= f (first r))\n      (cmp r)\n      (cons f (cmp r)))))", "problem": 30, "user": "4eaec592535d7eef30807327"}, {"code": "#(let [f (fn [l s self] \n    (if (empty? s) '()\n      (if(=(first s)l) (self l (rest s) self)\n        (conj (self (first s)(rest s)self) (first s)))))]\n  (f nil % f))", "problem": 30, "user": "4eaf08ce535d7eef3080732d"}, {"code": "(fn compress [[x & more]] \r\n  (if (empty? more) [x]\r\n    (if (= x (first more))\r\n      (lazy-seq (compress more))\r\n      (lazy-seq (cons x (compress more))))))", "problem": 30, "user": "4e994541535dbda64a6f6b64"}, {"code": "(fn f [x]\n  (if (nil? (next x))\n    (list (first x))\n    (if (= (first x) (second x))\n      (f (next x))\n      (concat (list (first x)) (f (next x))))))", "problem": 30, "user": "4eaed3a7535d7eef30807328"}, {"code": "(fn [coll]\n        (loop [coll coll, elt nil, res []]\n\t\t (cond\n\t\t   (empty? coll) res\n\t\t   (= (first coll) elt) (recur (rest coll) elt res)\n\t\t   :else (recur (rest coll) (first coll) (conj res (first coll))))))", "problem": 30, "user": "4e949d18535dbda64a6f6b15"}, {"code": "(fn [x] \n  (loop [i 0 j 1 newseq []]\n    (if (= j (count x)) (conj newseq (nth x i))\n      (if (= (nth x i) (nth x j))\n        (recur j (inc j) newseq)\n        (recur j (inc j) (conj newseq (nth x i)))\n      ))))", "problem": 30, "user": "4ea9b80c535d7eef30807306"}, {"code": "reduce(fn[r i](if(=(last r)i)r(conj r i)))[]", "problem": 30, "user": "4eb07be3535d7eef3080733b"}, {"code": "#(reduce \n  (fn duprm [x y]\n    (if (= y (last x))\n      x\n      (concat x (list y)))\n    ) '() %)", "problem": 30, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn [n]\n  (map first (partition-by identity n)))", "problem": 30, "user": "4ea68edb535d7eef308072e6"}, {"code": "(fn [y] (loop [x y result []]\n          (if (first x) (if (= (first x) (second x)) (recur (rest x) result) (recur (rest x) (conj result (first x)))) result)))", "problem": 30, "user": "4eb0afed535d7eef3080733e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn compress [coll]\r\n  (let [x (first coll)\r\n        xs (rest coll)]\r\n    (cond\r\n     (empty? xs) coll\r\n     (= x (first xs)) (compress xs)\r\n     :else (cons x (compress xs)))))", "problem": 30, "user": "4e7dfd48535db169f9c796fa"}, {"code": "(fn [data]\n  (map first (partition-by identity (seq data))))", "problem": 30, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [s]\n  (let [ret (reverse (reduce\n    (fn [x y]\n      (if (= y (first x))\nx\n(conj x y))) '() s))]\n(if (instance? Character (first ret))\n(apply str ret)\nret)))", "problem": 30, "user": "4eb27fad535d7eef3080734a"}, {"code": "reduce (fn [a b] (if (= (last a) b) a (conj a b))) []", "problem": 30, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn [s]\n  (reverse\n    (reduce\n      (fn [acc n] (if (= (first acc) n) acc (cons n acc)))\n      '() s)))", "problem": 30, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "#(map last (partition-by str %))", "problem": 30, "user": "4eb3fcba535d7eef30807359"}, {"code": "(fn cmprss [s]\n  (if (not (second s))\n    (list (first s))\n    (if (= (first s) (second s))\n      (cmprss (rest s))\n      (cons (first s) (cmprss (rest s))))))", "problem": 30, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn [coll]\n    (loop [coll coll\n           prev nil\n           answer ()]\n      (cond\n       (nil? coll) (reverse answer)\n       (= prev (first coll)) (recur (next coll) prev answer)\n       :else (recur (next coll) (first coll) (conj answer (first coll))))))", "problem": 30, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn foo\n  [list & [prev]]\n    (if (empty? list)\n      '()\n      (let [next (first list)\n            res (foo (rest list) next)]\n        (if (= prev next)\n          res\n          (cons next res)))))", "problem": 30, "user": "4eb66737535d7eef3080736b"}, {"code": "(fn [x]\n  (loop [s x, r []]\n    (cond\n      (= s [])(if (= (type x) java.lang.String)\n                (apply str r)\n                r)\n      (= (first s) (last r)) (recur (rest s) r)\n      :else (recur (rest s) (conj r (first s))))))", "problem": 30, "user": "4eb6d3ab535d7eef30807370"}, {"code": "(fn [coll]\r\n  (loop [c coll res []]\r\n\t  (println res)\r\n\t\t(if (empty? c)\r\n\t\t  res\r\n\t\t\t(if-not (= (first c) (last res))\r\n\t\t\t  (recur (rest c) (conj res (first c)))\r\n\t\t\t\t(recur (rest c) res)\r\n      )\r\n    )\r\n  )\r\n)", "problem": 30, "user": "4e94a900535dbda64a6f6b18"}, {"code": "(fn [x]\n    (reduce\n      #(if (not= (last %1) %2) (conj %1 %2) %1)\n      [] x))", "problem": 30, "user": "4e9be708535dbda64a6f6b79"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4eb01df4535d7eef30807337"}, {"code": "(fn cmprs [coll]\r\n   (when-let [[f & r] (seq coll)] \r\n     (if (= f (first r)) \r\n       (cmprs r) \r\n       (cons f (cmprs r)))))", "problem": 30, "user": "4eb80ce6535d7eef3080737d"}, {"code": "(fn cmprs [coll]\n  (when-let [[x & more] (seq coll)]\n    (if (= x (first more))\n      (cmprs more)\n      (cons x (cmprs more)))))", "problem": 30, "user": "4ea76541535d7eef308072eb"}, {"code": "#(map last (partition-by str %))", "problem": 30, "user": "4ea55757535d7eef308072d3"}, {"code": "#(cons (first %) (for [[x y] (partition 2 1 %) :when (not= x y)] y))", "problem": 30, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn cmprs [coll]\r\n  (when-let [[f & r] (seq coll)] \r\n    (if (= f (first r)) \r\n      (cmprs r) \r\n      (cons f (cmprs r)))))", "problem": 30, "user": "4e9dd718535dbda64a6f6b8c"}, {"code": "#(mapcat seq (map set (partition-by identity %)))", "problem": 30, "user": "4eb97234535dfed6da9c6d53"}, {"code": "reduce (fn [s i] (if (= i (last s)) s (conj s i))) []", "problem": 30, "user": "4eb9c82d535dfed6da9c6d5c"}, {"code": "(fn [s] (reduce #(if (= (peek %) %2) % (conj % %2)) [] s))", "problem": 30, "user": "4eb5750a535d7eef30807366"}, {"code": "#(reduce (fn [o i] (if (= i (last o)) o (conj o i))) [] %)", "problem": 30, "user": "4e58c019535d8a8b8723a297"}, {"code": "(fn [l] \n  (reduce \n    #(if (= (last %) %2) \n      %\n      (concat % (list %2))) \n    '()\n    l))", "problem": 30, "user": "4eac5bc1535d7eef3080731b"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "4eabb245535d7eef30807319"}, {"code": "(fn [s]\n  (loop [c (first s) s (rest s) r [c]]\n    (if (not (seq s))\n      r\n      (if (= c (first s))\n        (recur c (rest s) r)\n        (recur (first s) (rest s) (conj r (first s)))))))", "problem": 30, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "(fn [a]\n  (map first (partition-by identity a)))", "problem": 30, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (cmprs r)\n      (lazy-seq   (cons f (cmprs r) )))))", "problem": 30, "user": "4dfd7ecf535d04ed9115e783"}, {"code": "reduce (fn [x y]\n  (if (= (last x) y)\n    x\n    (conj x y))) []", "problem": 30, "user": "4ebb20c0535dfed6da9c6d6f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "(fn compress [coll] \n  (loop [x coll\n         result []]\n           (if (empty? x)\n              result\n              (if (= (last result) (first x))\n                (recur (rest x) result)\n                (recur (rest x) (conj result (first x)))))))", "problem": 30, "user": "4ebbf772535dfed6da9c6d76"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4eb25069535d7eef30807348"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "4e1350af535d04ed9115e7d8"}, {"code": "#(reverse (reduce \n  (fn [r i] (if \n    (empty? r) \n    [i] \n    (if \n      (= (first r) i) \n      r \n      (cons i r)))) \n  [] %))", "problem": 30, "user": "4dbecb06535d020aff1edf6a"}, {"code": "#(reduce (fn[r n]\n  (if (= n (last r)) r (conj r n))) \n  (cons [] %1))", "problem": 30, "user": "4e7650c5535d324fb2983d68"}, {"code": "(fn [x]\n  (loop [x x out [] last nil]\n    (cond\n      (empty? x) out\n      (= (first x) last) (recur (rest x) out last)\n      :else (recur (rest x) (conj out (first x)) (first x)))))", "problem": 30, "user": "4dadb891c9a9d6ed3699dc57"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn hi [x]\n  (cond \n    (empty? x) x\n    (= 1 (count x)) x\n    (= (first x) (second x)) (hi (rest x))\n    :true (cons (first x) (hi (rest x)))))", "problem": 30, "user": "4eb2d0ae535d7eef3080734e"}, {"code": "(fn compress [[f & r]]\n  (if (seq r) \n    (if (= f (first r))\n      (lazy-seq (compress r))\n      (lazy-seq (cons f (compress r))))\n    [f]))", "problem": 30, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "reduce \r\n    #(if (= (last %) %2) \r\n        % \r\n        (conj % %2))\r\n    []", "problem": 30, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn dedup [x]\n  (when-let [first-item (first x)]\n    (lazy-seq\n      (cons first-item (dedup (drop-while #(= % first-item) (rest x)))))))", "problem": 30, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn killd [c] (\n(fn builder [ix s r]\n   (if (= (- (count s) 1) ix)\n       (conj r (nth s ix))\n       (if (= (nth s ix) (nth s (+ ix 1)))\n          (builder (+ ix 1) s r)\n          (builder (+ ix 1) s (conj r (nth s ix)))\n       )\n   )\n)\n0 c []\n))", "problem": 30, "user": "4ec17677535dfed6da9c6dad"}, {"code": "(fn [l]\n  (reverse \n    (reduce #(if (= %2 (first %1))\n                %1\n                (conj %1 %2))\n            '()\n            l)))", "problem": 30, "user": "4ec21058535dfed6da9c6dba"}, {"code": "(fn [s] \n  (map first (partition-by identity s)))", "problem": 30, "user": "4ec34578535dcc7ae8597d51"}, {"code": "(fn compress ([items] (lazy-seq (cons (first items) (compress (first items) (next items))))) ([c items] (when (not-empty items) (if (= c (first items)) (compress c (next items)) (cons (first items) (compress (first items) (next items)))))))", "problem": 30, "user": "4ec12516535dfed6da9c6da7"}, {"code": "(fn [x]\n  (map #(first %)\n    (filter (fn [b] (< 1 (count (distinct b))))\n      (partition 2 1 (list nil) x))))", "problem": 30, "user": "4ec42c11535dcc7ae8597d5f"}, {"code": "#(loop [lst %, out []]\n    (cond\n     (empty? lst) out\n     (= (first lst) (last out))  (recur (rest lst) out)\n     :else (recur (rest lst) (conj out (first lst))) ))", "problem": 30, "user": "4ec5c81f535d6d7199dd36b6"}, {"code": "(fn [s]\n  (loop [comp [] r s]\n    (if (empty? r)\n      comp\n      (recur (if (= (first r) (last comp))\n               comp\n               (conj comp (first r)))\n             (rest r)))))", "problem": 30, "user": "4e951f2c535dbda64a6f6b2f"}, {"code": "(fn unik [s] (if-not (empty? s)\n  (cons\n    (first s)\n    (unik (drop-while #(= % (first s)) (rest s))))))", "problem": 30, "user": "4ec4ac86535dcc7ae8597d64"}, {"code": "(fn ! [xs]\n  (if (not-empty xs)\n      (let [[col rest] (split-with (partial = (first xs)) xs)]\n        (conj (! rest) (first col)))\n      ()))", "problem": 30, "user": "4ec6157b535d6d7199dd36c2"}, {"code": "(fn de-dup [coll]\n  (let [v (vec coll)]\n    (keep-indexed\n      (fn [index item]\n        (if (or (= index 0) (not= (get v (- index 1)) item))\n          item))\n      v)))", "problem": 30, "user": "4ec6559a535d6d7199dd36c9"}, {"code": "(fn [l]\n  (keep-indexed\n    #(if (not= %2 (nth l (dec %) nil)) %2)\n    l))", "problem": 30, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "(fn [coll]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll))", "problem": 30, "user": "4eb51942535d7eef30807365"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "reduce (fn [xs n] (if (= (last xs) n) xs (conj xs n))) []", "problem": 30, "user": "4ebd4448535dfed6da9c6d8f"}, {"code": "(fn [s]\n  (loop [ls s result []]\n    (let [f (first ls) l (last result)]\n      (if (empty? ls)\n        result\n        (recur\n          (rest ls)\n            (if (= f l)\n              result\n              (conj result f)))))))", "problem": 30, "user": "4e117dea535d04ed9115e7c9"}, {"code": "#((fn c [l]\n      (if (empty? l)\n        []\n        (if (= (second l) (first l))\n          (c (rest l))\n          (cons\n            (first l)\n            (c (rest l))))))\n     %)", "problem": 30, "user": "4ebbffbd535dfed6da9c6d79"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "4ec812d9535d6d7199dd36f0"}, {"code": "(fn [x] (filter (complement nil?)\n                 (cons (first x) (map #(if (not= %1 %2) %1) (rest x) x))))", "problem": 30, "user": "4ec2f1d9535dcc7ae8597d4d"}, {"code": "(fn compr [xs]\n  (if (or (empty? xs) (empty? (rest xs)))\n    xs\n    (if (= (first xs) (first (rest xs)))\n      (compr (rest xs))\n      (cons (first xs) (compr (rest xs))))))", "problem": 30, "user": "4ec07699535dfed6da9c6da2"}, {"code": "reduce #(if (= (last %1) %2)\n               %1\n               (conj %1 %2))\n       []", "problem": 30, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn compact [x]\n    (cond\n        (not (seq x)) []\n        (= (first x) (first (rest x))) (compact (rest x))\n        :else (cons (first x) (compact (rest x)))))", "problem": 30, "user": "4eb955da535dfed6da9c6d50"}, {"code": "(fn [sq] \n     (loop [z sq ans []]\n       (if (empty? z) ans\n         (recur (rest z) (if (= (last ans) (first z)) ans (conj ans (first z)))))))", "problem": 30, "user": "4eb44d78535d7eef30807360"}, {"code": "#(map first (remove (fn [[a b]] (= a b)) (partition 2 1 nil %)))", "problem": 30, "user": "4ec74de3535d6d7199dd36df"}, {"code": "reduce (fn [a i] (cond (= (last a) i) a :else (concat a (list i)))) ()", "problem": 30, "user": "4ecab3b7535d6d7199dd3709"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "#(loop [i %1 p nil r '()] (if (empty? i) r (recur (rest i) (first i) (if (= p (first i)) r (concat r (list (first i)))))))", "problem": 30, "user": "4e85cda3535db62dc21a62f0"}, {"code": "(fn [col]\n  (loop [col1 [] col2 col ]\n   (if (empty? col2)\n       col1\n      (let [same (= (first col2) (last col1)  )]\n       (recur (if same col1 (conj col1 (first col2) )  ) \n              (rest col2)\n            \n       )\n       )\n      )\n   )\n   )", "problem": 30, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn remove_dup [xs]\n   (loop [f (first xs) r (rest xs) acc [f]]\n    (if (seq r)\n        (if (= f (first r)) (recur f (rest r) acc)\n                            (recur (first r) (rest r) (conj acc (first r))))\n        acc)))", "problem": 30, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn [x]\n                          (loop [s x result '() previous nil]\n                            (if (empty? s)\n                              result\n                              (if (= previous (first s))\n                                (recur (rest s) result previous)\n                                (recur (rest s) (concat result [(first s)])\n                                       (first s))))\n                            ))", "problem": 30, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn [s] (keep-indexed #(if-not (= (get s (dec %1)) %2) %2) s))", "problem": 30, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "(fn compr \n  ([seq1] (compr :X (seq seq1)))\n  ([c seq1]\n    (cond\n      (empty? seq1) nil\n      (= c (first seq1)) (compr c (rest seq1))\n      :else (cons (first seq1) (compr (first seq1) (rest seq1))))))", "problem": 30, "user": "4ec7def0535d6d7199dd36e9"}, {"code": "(fn [coll] (reverse (reduce\n  (fn [a b] \n    (if (sequential? a) \n      (if (= (first a) b) a (conj a b))\n      (if (= a b) a (list b a)))) '() coll)))", "problem": 30, "user": "4e25176e535d04ed9115e829"}, {"code": "(fn [coll] (filter identity (cons (first coll) \n(map #(if (= %1 %2) nil %2) coll (rest coll)))))", "problem": 30, "user": "4ec51590535d6d7199dd3683"}, {"code": "#(reduce (fn [a b]   (if (= (last a) b)\n              a\n              (conj a b))) [] %)", "problem": 30, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn compress [s]\n  (cond\n    (empty? s) '()\n    (= (first s) (second s))\n      (compress (rest s))\n    :else\n      (cons (first s) (compress (rest s)))))", "problem": 30, "user": "4e6f578c535d5021c1a8961b"}, {"code": "#(loop [x (butlast %)\n        y (last %)\n        r ()]\n  (if (seq x)\n      (let [a (butlast x)\n            b (last x)]\n        (if (= b y)\n            (recur a y r)\n            (let [s (cons y r)]\n              (recur a b s))))\n      (cons y r)))", "problem": 30, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "(fn [coll] \n  (reduce (fn [l x] \n            (if (= x (last l)) \n              l \n              (conj l x))) \n          [] coll))", "problem": 30, "user": "4e52777f535d302ef430da76"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "4ecaaa25535d6d7199dd3708"}, {"code": "(fn [s]\n  (mapcat #(take 1 %) (partition-by identity s)))", "problem": 30, "user": "4ecb1641535d6d7199dd370e"}, {"code": "(fn c [e s] \r\n  (let [n (first s)] \r\n    (if-not (empty? s) \r\n      (into (c n (rest s)) (if (not= e n) [n]))))) nil", "problem": 30, "user": "4ec65213535d6d7199dd36c8"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "#(remove nil?( for [x (range (count %))] (if (not= (get % x) (get % (dec x))) (get % x))) )", "problem": 30, "user": "4ecbb249535df97575fdabdf"}, {"code": "#(seq (reduce (fn[acc,e](if ( \n   or (not= (last acc) e) \n      (= (last acc) nil)) (conj acc e) acc)\n    ) [] %))", "problem": 30, "user": "4ec75829535d6d7199dd36e1"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ecf42b4535d1f5ad70dba3c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ece9ca9535d23f03622770f"}, {"code": "(fn dup-remover [coll]\n  (if (= 1 (count coll))\n    coll\n    (if (= (first coll) (first (rest coll)))\n      (dup-remover (rest coll))\n      (concat (list (first coll)) (dup-remover (rest coll)))\n      )))", "problem": 30, "user": "4ecdb0bb535d23f036227709"}, {"code": "#(map first (remove \n  (fn [[a b]] (= a b) ) (partition 2 1 (concat % '(nil)))))", "problem": 30, "user": "4ecfb458535d44c135fd68bb"}, {"code": "#(loop [xs (seq %) p nil a []]\n  (if xs\n    (recur (next xs) (first xs) (if (= p (first xs)) a (conj a (first xs))))\n    a))", "problem": 30, "user": "4ed06ea6535d44c135fd68c4"}, {"code": "(fn dedupl [s]\n  (if (seq s)\n    (cons (first s) (dedupl (drop-while #(= % (first s)) (rest s))))\n    s))", "problem": 30, "user": "4ed15f60535d44c135fd68cd"}, {"code": "#(map first (seq (partition-by identity %)))", "problem": 30, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "(fn [s]\n  (loop [ls (seq s) newls '()]\n    (let\n      [last-new (last newls)\n       old-first (first ls)\n       old-rest (rest ls)]\n      (if (empty? ls)\n        newls\n        (if (not (= last-new old-first))\n          (recur old-rest (concat newls (list old-first)))\n          (recur old-rest newls)\n          )\n        )\n      )\n    )\n  )", "problem": 30, "user": "4ecc147b535d23f0362276f7"}, {"code": "(fn [s]\n  (loop [s s acc []]\n    (if (empty? s)\n      acc\n      (let [[x & xs] s]\n        (if (= x (first xs))\n          (recur xs acc)\n          (recur xs (conj acc x)))))))", "problem": 30, "user": "4ed188c8535d44c135fd68cf"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ec60dc4535d6d7199dd36c0"}, {"code": "reduce (fn [acc current]\n          (if (not= (last acc) current)\n             (conj acc current)\n             acc)) []", "problem": 30, "user": "4ea322fe535d7eef308072c2"}, {"code": "(fn shorten [s]\n  (loop [o (vector) s s]\n    (if (empty? s)\n      o\n      (if (not= (last o) (first s))\n      (recur (conj o (first s)) (rest s))\n      (recur o (rest s))))\n    ))", "problem": 30, "user": "4ebc829e535dfed6da9c6d86"}, {"code": "(fn [coll]                                                           \n  (if (seq coll)                                                                \n    (let [s (first coll)]                                                       \n      (lazy-seq                                                                 \n        (cons s                                                                 \n          ((fn f [lst coll]                                                     \n            (if (seq coll)                                                      \n              (let [elem (first coll)]                                          \n                (if (= lst elem)                                                \n                  (recur lst (rest coll))                                       \n                  (lazy-seq (cons elem (f elem (rest coll))))))))               \n             s (rest coll)))))))", "problem": 30, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn [x]\n  (reverse ((fn [a l r]\n    (if (= '() r)\n(conj a l)\n(if (= (first r) l)\n(recur a l (rest r))\n(recur (conj a l) (first r) (rest r)))))\n'() (first x) (rest x))))", "problem": 30, "user": "4ed2b168535d44c135fd68dd"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4ecb7f4b535df97575fdabdc"}, {"code": "(fn leroy [%]\r\n    (cons (first %) (for [[x y] (map (fn [x y] [x y]) % (rest %)) :when (not= x y)] y)))", "problem": 30, "user": "4eccb190535d23f0362276fe"}, {"code": "(fn [x] (reverse (reduce #(if (= (first %) %2) % (cons %2 %)) '() x)))", "problem": 30, "user": "4dbf7a31535d020aff1edf75"}, {"code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "problem": 30, "user": "4ec49231535dcc7ae8597d63"}, {"code": "(fn [x]\n  (loop [curr x, prev [(first x)], result []]\n    (let [xf (first curr)\n          xr (rest curr)]\n      (cond\n        (empty? curr) result\n        (= xf prev) (recur xr prev result)\n        :else (recur xr xf (conj result xf))))))", "problem": 30, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4eb13d60535d7eef3080733f"}, {"code": "#(loop [curr % cp []]\n    (if (empty? curr) (seq cp)\n        (let [x (first curr) y (rest curr)]\n          (recur y (if (= x (first y)) cp (conj cp x))))))", "problem": 30, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "(fn [input] \n  (reverse\n  (reduce #(if (= (first %1) %2) %1 (cons %2 %1))\n          '()\n          input\n    \n)))", "problem": 30, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4ed0e139535d44c135fd68c7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ea4e98a535d7eef308072ce"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4ecc1d85535d23f0362276f8"}, {"code": "(fn [s] (reduce (fn [agg l] (if (= (last agg) l) agg (conj agg l))) [] (seq s)))", "problem": 30, "user": "4ed292ac535d44c135fd68d9"}, {"code": "#(reduce (fn [cur cat]\n            (if (= (last cur) cat)\n              cur\n              (concat cur (list cat)))) (cons '() (seq %)))", "problem": 30, "user": "4ed578d1535d10e5ff6f52d9"}, {"code": "#(reduce (fn [l a]\n    (if (not= (peek l) a) (conj l a) l\n  )) [] %)", "problem": 30, "user": "4ecc8dea535d23f0362276fd"}, {"code": "#(map first (partition-by str %))", "problem": 30, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn rdup [x]\n  (when-let [[f & r] (seq x)]\n    (if (= f (first r))\n      (rdup r)\n    (cons f (rdup r)))))", "problem": 30, "user": "4ed4798f535d10e5ff6f52cc"}, {"code": "reduce (fn [c v] (if (= v (last c)) c (conj c v))) []", "problem": 30, "user": "4eca40cd535d6d7199dd3703"}, {"code": "(fn [x] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() x)))", "problem": 30, "user": "4ea11921535d7eef308072af"}, {"code": "#(map first (partition-by % %2)) #(do %)", "problem": 30, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "(fn [coll]\n  (reduce (fn [accum item]\n            (if (= (last accum) item)\n              accum\n              (conj accum item)))\n[]\n          coll))", "problem": 30, "user": "4dbb64c8535d1e037afb21b6"}, {"code": "(partial\n  reduce\n    (fn [accum x]\n      (if (= (last accum) x)\n        accum\n        (conj accum x)))\n  [])", "problem": 30, "user": "4eb59464535d7eef30807369"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4db6d993535d1e037afb2180"}, {"code": "(fn f [s & [c]]\r\n  (if (empty? s)\r\n    '()\r\n    (let [[c1 & r] s\r\n          s2 (f r c1)]\r\n      (if (= c1 c)\r\n        s2\r\n        (cons c1 s2)))))", "problem": 30, "user": "4ed6ac40535d10e5ff6f52e4"}, {"code": "#(letfn [(f [x acc] (if (empty? x) acc (if (= (first x) (last acc)) (f (rest x) acc) (f (rest x) (conj acc (first x))))))] (f % []))", "problem": 30, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(fn rle [xs]\n        (reverse\n            (reduce \n                (fn [ys y](if (= (first ys) y) ys (conj ys y))) \n                nil \n                xs\n            )\n        )\n)", "problem": 30, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "reduce\n(fn [s a]\n  (if (= (last s) a)\n    s\n    (conj s a)))\n[]", "problem": 30, "user": "4ed97da1535d10e5ff6f5306"}, {"code": "(fn remove-dupl [coll]\n  (if (seq coll)\n    (conj (remove-dupl (drop-while #(= (first coll) %) (seq coll))) (first coll))\n    ()))", "problem": 30, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn [coll]\n  (reduce (fn [x y]\n            (if (= (last x) y) x (conj x y))) [] coll))", "problem": 30, "user": "4edab806535d10e5ff6f5311"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn cmp [lst]\n  (cond\n    (= (count lst) 1) lst\n    (= (first lst) (second lst)) (cmp (rest lst))\n    :else (cons (first lst) (cmp (rest lst)))\n    )\n  )", "problem": 30, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(fn [col] (reduce #(if (= (last %) %2) % (concat % (list %2))) '() (seq col)))", "problem": 30, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn [x]\r\n  (loop [sequence x\r\n         a []]\r\n    (if (empty? sequence) \r\n      a\r\n      (if (= (first sequence) (second sequence))\r\n        (recur (rest sequence) a)\r\n        (recur (rest sequence) (conj a (first sequence)))))))", "problem": 30, "user": "4e570b60535d8a8b8723a286"}, {"code": "(fn [se]\n  (loop [uniq [] left se]\n    (if (empty? left)\n      uniq\n      (recur\n        (if (= (last uniq) (first left))\n          uniq\n          (conj uniq (first left)))\n        (rest left)))))", "problem": 30, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn compress [l]\n  (cond (empty? (rest l)) l\n        (= (first l) (first (rest l))) (compress (rest l))\n        :else\n          (cons (first l) (compress (rest l)))))", "problem": 30, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn compress [xs] \n  (reverse(last\n    (reduce (fn [[prev,acc],x] \n      [x,(if(= x prev) \n        acc \n        (conj acc x))]) \n    [(first xs),(take 1 xs)] xs))))", "problem": 30, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "#(apply (fn rledrop\n    ([x] (list x))\n    ([x a] (if (not= x a)\n                (list x a)\n                (list x)))\n    ([x a & more]\n        (println x a)\n        (if (not= x a)\n            (concat (list x) (apply rledrop (cons a more)))\n            (concat () (apply rledrop (cons x more)))))) %)", "problem": 30, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "(fn [xs]\n  (seq\n    (reduce \n      (fn [ys x] (if (= x (peek ys)) ys (conj ys x)))\n      [] xs)))", "problem": 30, "user": "4ec59ce4535d6d7199dd36ab"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn [xs] (reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) () xs)))", "problem": 30, "user": "4edee6a2535d10e5ff6f533e"}, {"code": "(fn [coll]\n    (loop [c (rest coll), result (vector (first coll))]\n      (if (empty? c)\n        result\n        (if (= (last result) (first c))\n          (recur (rest c) result)\n          (recur (rest c) (conj result (first c)))))))", "problem": 30, "user": "4e7e8684535db169f9c79717"}, {"code": "(fn aa\r\n  [coll]\r\n\t(reduce \r\n\t\t(fn [x y]\r\n\t\t\t(let [ls (last x)]\r\n\t\t\t\t(if (= ls y)\r\n\t\t\t\t\tx\r\n\t\t\t\t\t(conj x y))))\r\n\t\t[]\r\n\t\tcoll))", "problem": 30, "user": "4edbae0d535d10e5ff6f531c"}, {"code": "(fn[x] (reduce (fn [x y] (if (= (last x) y) x (concat x (list y)))) '() x))", "problem": 30, "user": "4e3ae7cd535deb9a81d77f4e"}, {"code": "reduce #(if (= (peek %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4ec18451535dfed6da9c6db0"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4e89ff3d535d3e98b802328a"}, {"code": "(fn [x]\n  (loop [x (seq x) out []]\n    (if (seq x)\n      (if (= (first x) (last out)) \n        (recur (next x) out)\n        (recur (next x) (conj out (first x))))\n      out)))", "problem": 30, "user": "4ed19e90535d44c135fd68d0"}, {"code": "(fn [coll]\n  (letfn [(compress [coll prev]\n    (if (seq coll)\n      (let [[x & xs] coll]\n        (if (= x prev)\n          (compress xs x)\n          (cons x (compress xs x))))))]\n    (compress coll nil)))", "problem": 30, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "(fn [x]\n    (if (seq x)\n      (loop [u []\n             y (first x)\n             ys (rest x)]\n        (if (seq ys)\n          (if (= y (first ys))\n            (recur u y (rest ys))\n            (recur (conj u y) (first ys) (rest ys)))\n          (conj u y)))\n      x))", "problem": 30, "user": "4e5be681535d8a8b8723a2bc"}, {"code": "#(cons (first %)\n       ((fn f [xs y] (cond (empty? xs) ()\n                           (= (first xs) y) (f (rest xs) y)\n                           :else (cons (first xs)\n                                       (f (rest xs)\n                                          (first xs)))))\n        (rest %) (first %)))", "problem": 30, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "#(map last (partition-by str %))", "problem": 30, "user": "4dadc6f2c9a9d6ed4099dc57"}, {"code": ";(fn [s] (loop [cur s, ret (), last nil] (if-let [h (first cur)] (recur (rest cur) (if (= h last) ret (concat ret [h])) h) ret)))\n(fn [s] (->> s (partition-by identity)\n               (map first)))", "problem": 30, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn rem-dup[l]\n  (if (<= (count l) 1)\n    l\n    (if (= (first l) (first (rest l)))\n      (rem-dup (rest l))\n      (cons (first l) (rem-dup (rest l))))))", "problem": 30, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn [s] (reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) nil s)))", "problem": 30, "user": "4ed55b5d535d10e5ff6f52d8"}, {"code": "(fn [s] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "(fn cmprs [s]\n  (when-let [[f & r] (seq s)]\n    (if (= f (first r))\n      (cmprs r)\n      (cons f (cmprs r)))))", "problem": 30, "user": "4edfd846535d10e5ff6f5345"}, {"code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "problem": 30, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn mine [xs]\n (cond\n  (empty? xs) []\n  (= 1 (count xs)) xs\n  (= (first xs) (nth xs 1)) (mine (cons (first xs) (drop 2 xs)))\n  :else (cons (first xs) (mine (rest xs)))\n )\n)", "problem": 30, "user": "4dad8d4bc9a9d6ed1799dc57"}, {"code": "#(loop [s % prev nil acc []]\n  (if (empty? s)\n    acc\n    (recur \n      (rest s) \n      (if (not= prev (first s)) (first s) prev)\n      (if (not= prev (first s)) (conj acc (first s)) acc))))", "problem": 30, "user": "4ed7e37a535d10e5ff6f52f4"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ee7ef87535d93acb0a66872"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn [coll]\n  (reduce\n    #(if (not= (last %1) %2)\n       (conj %1 %2)\n       %1)\n    [] coll))", "problem": 30, "user": "4eb30868535d7eef30807355"}, {"code": "(fn [sq]\r\n  (letfn [(rcd [cur acc rsq]\r\n            (cond\r\n              (empty? rsq)\r\n                (conj acc cur)\r\n              (= cur (first rsq))\r\n                (rcd (first rsq) acc (rest rsq))\r\n              :else\r\n                (rcd (first rsq) (conj acc cur) (rest rsq))))]\r\n    (rcd (first sq) [] (rest sq))))", "problem": 30, "user": "4ee40938535d10e5ff6f5375"}, {"code": "reduce (fn [r x] (if (= (last r) x) r (conj r x))) []", "problem": 30, "user": "4ee7d177535d93acb0a6686f"}, {"code": "#((fn compress [coll]\n  (when-let [[h & t] (seq coll)]\n\t\t(if (= h (first t))\n\t\t\t(compress t)\n\t\t\t(cons h (compress t))))), %)", "problem": 30, "user": "4ee91d00535d93acb0a6688b"}, {"code": "#(map first (partition-by str %))", "problem": 30, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn compress [coll]\r\n  (cond\r\n   (empty? coll) ()\r\n   (= (first coll) (second coll)) (compress (rest coll))\r\n   :else (cons (first coll)\r\n               (compress (rest coll)))))", "problem": 30, "user": "4ed2a92b535d44c135fd68dc"}, {"code": "#(reduce\n  (fn [s e]\n    (if (= (last s) e)\n        s\n        (conj s e)))\n    [] %)", "problem": 30, "user": "4ec5a6ee535d6d7199dd36ae"}, {"code": "(fn [l]\n  (loop [l l nl []]\n    (if (not (seq (rest l)))\n      (conj nl (first l))\n      (if (not (= (first l) (second l)))\n        (recur (rest l) (conj nl (first l)))\n        (recur (rest l) nl)))))", "problem": 30, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(fn [c] (filter (complement nil?) (map #(if (= %1 %2) nil %2) (cons nil c) c)))", "problem": 30, "user": "4ec79f99535d6d7199dd36e4"}, {"code": "(fn c28 [xs]\n  (cons (first xs)\n    ((fn cc [prev ys]\n       (lazy-seq\n         (when (seq ys)\n           (let [[y & r] ys]\n             (if (= prev y)\n               (cc prev r)\n               (cons y (cc y r))))))) (first xs) (rest xs))))", "problem": 30, "user": "4ee88269535d93acb0a6687f"}, {"code": "(fn  [x] (reduce  (fn [a b] \n            (cond (empty? a)\n                [b]\n                (= (last a) b)\n                a\n                :else\n                (conj a b))) [] x))", "problem": 30, "user": "4daeabf6edd6309eace4d15c"}, {"code": "reduce #(if (= %2\n              (last %))\n            %\n            (conj % %2))\n       []", "problem": 30, "user": "4ee63d8d535d93acb0a66859"}, {"code": "(fn [coll] (reduce (fn [l x] (if (= x (last l)) l (conj l x))) [] coll))", "problem": 30, "user": "4ed19f00535d44c135fd68d1"}, {"code": "(fn cmprs ([x] (cmprs x []))\n  ([x acc] (if (= x '()) acc\n             (let [fst (first x)\n                 lst (last acc)]\n               (recur (rest x)\n                 (if (= fst lst) acc (conj acc fst)))))))", "problem": 30, "user": "4edfb618535d10e5ff6f5343"}, {"code": "reduce #(if (distinct? (last %) %2) (conj % %2) %) []", "problem": 30, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "#((fn [x y] (cond\n  (empty? y) x\n  (= (last x) (first y)) (recur x (rest y))\n  :else (recur (concat x (list (first y))) (rest y))))\n(empty %) (seq %))", "problem": 30, "user": "4eebfd03535d93acb0a668ab"}, {"code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "problem": 30, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn [coll]\n  (loop [[f s :as whole] coll, result '()]\n    (cond\n      (nil? f) result\n      (= f s) (recur (rest whole) result)\n      :else (recur (rest whole) (concat result (list f))))))", "problem": 30, "user": "4ee9d697535d93acb0a66895"}, {"code": "#(loop [r [] c %]\n    (if (empty? c)\n      r\n      (recur\n       (if (= (first c) (last r))\n               r\n               (conj r (first c)))\n       (next c))))", "problem": 30, "user": "4ec6357a535d6d7199dd36c5"}, {"code": "#(reduce (fn [a i] (if (= (last a) i) a (conj a i))) [] %)", "problem": 30, "user": "4ee868be535d93acb0a6687d"}, {"code": "(fn [xs](reverse\n          (reduce #(if (not (= (first %1) %2))\n              (cons %2 %1)\n              %1) '() xs)))", "problem": 30, "user": "4eeae8f0535d93acb0a668a2"}, {"code": "(fn f [s & [acc]] \n  (if (empty? s) \n    acc \n    (let [x (first s)] \n      (f (drop-while (partial = x) s) (conj (or acc []) x)))))", "problem": 30, "user": "4eebc5da535d93acb0a668aa"}, {"code": "(fn dedupe [x] \n  (if (nil? x)\n      '()\n      (if (= (first x) (second x))\n      (dedupe (next x))\n      (cons (first x) (dedupe (next x))))))", "problem": 30, "user": "4eb2c45e535d7eef3080734d"}, {"code": "(fn [coll]\n  (reduce\n   (fn [result item]\n     (if (= item (last result))\n       result\n       (conj result item))) [] coll))", "problem": 30, "user": "4ee8092f535d93acb0a66875"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ee88bfb535d93acb0a66881"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn [s]\n  (loop [r s acc []]\n    (let [[a b] r]\n      (if (not (seq r))\n           acc\n           (if (= a b)\n               (recur (rest r) acc)\n               (recur (rest r) (conj acc a)))))))", "problem": 30, "user": "4ef0a38e535dced4c769f20b"}, {"code": "(fn compress [x0]\n  (loop [prev (first x0), x (rest x0), r []]\n    (if (empty? x)\n      (conj r prev)\n      (if (not= (first x) prev)\n        (recur (first x) (rest x) (conj r prev))\n        (recur prev (rest x) r)))))", "problem": 30, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn [x]\n  (reduce\n    (fn [y, z]\n      (if\n        (not= z (last y))\n        (conj y z)\n        y)) [] x))", "problem": 30, "user": "4ee259a1535d10e5ff6f5366"}, {"code": "(fn compress\n  ([somelist] (compress (seq somelist) []))\n  ([somelist result] \n    (if (empty? somelist)\n        result\n        (if (= (first somelist)\n                (second somelist))\n            (compress (rest somelist)\n                      result)\n            (compress (rest somelist)\n                      (conj result (first somelist)))))))", "problem": 30, "user": "4daea889edd6309eace4d15b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ef2d243535dced4c769f221"}, {"code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] %)", "problem": 30, "user": "4ec6297b535d6d7199dd36c4"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4ec6cfda535d6d7199dd36d8"}, {"code": "#(reverse (reduce (fn [c x] (if (= (first c) x) c (conj c x))) () %))", "problem": 30, "user": "4eda77c0535d10e5ff6f530d"}, {"code": "#(map last (partition-by list %))", "problem": 30, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn [s] (reduce #(if (= (last %) %2)  % (concat % (list %2))) () s ))", "problem": 30, "user": "4ef355e3535dced4c769f228"}, {"code": "(fn remove-reps [coll]\n  (if (empty? coll)\n    coll\n    (if (= (first coll) (second coll))\n      (remove-reps (rest coll))\n      (cons (first coll) (remove-reps (rest coll))))))", "problem": 30, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn [s]\n  (->> s\n    (partition-by identity)\n    (map first)))", "problem": 30, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(fn [xs]\n  (loop [xs xs, ys []]\n    (if (empty? xs) ys\n      (let [[x & xs] xs]\n        (if (= x (first xs))\n          (recur xs ys)\n          (recur xs (conj ys x)))))))", "problem": 30, "user": "4ee67d74535d93acb0a66861"}, {"code": "(fn uniq [xs]\n  (if (not (empty? xs))\n    (let [c (first xs)]\n      (conj (uniq (drop-while #(= c %) (rest xs))) c))))", "problem": 30, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn [s]\r\n    (if (empty? s)\r\n     []\r\n     (loop [prev (first s) x (rest s) acc [(first s)]]\r\n\t      (if (empty? x)\r\n         acc\r\n         (if (not (= prev (first x)))\r\n           (recur (first x) (rest x) (conj acc (first x)))\r\n           (recur prev (rest x) acc))))))", "problem": 30, "user": "4ef1ee67535dced4c769f219"}, {"code": "#(loop [my-ans [] my-str (seq %)] (if my-str\n  \t\t\t\t    (recur (if (= (first my-str) (last my-ans)) my-ans (conj my-ans (first my-str)))\n\t\t\t\t\t\t   (next my-str))\n\t\t\t\t\t    my-ans))", "problem": 30, "user": "4e8d5911535d65386fec2133"}, {"code": "(fn [s] \n  (reverse \n    (reduce \n      #(if (= (first %1) %2) %1 (cons %2 %1))\n      '() s)))", "problem": 30, "user": "4ef667c4535dced4c769f24c"}, {"code": "(fn [col]\n  (reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) [] col)))", "problem": 30, "user": "4ef4acf8535dced4c769f23c"}, {"code": "#(letfn\n   [(f [xs x]\n      (if (= (last xs ) x)\n        xs\n        (conj xs x)))]\n   (reduce f [] %) )", "problem": 30, "user": "4ef4e5fa535dced4c769f242"}, {"code": "#(letfn [(remdups [xs acc] \n  \t\t(if (empty? xs) \n\t\t\t\tacc\n\t\t\t\t(let [cx (first xs) ca (last acc)]\n\t\t\t\t\t(if (= cx ca) \n\t\t\t\t\t\t(recur (next xs) acc) \n\t\t\t\t\t\t(recur (next xs) (conj acc cx))))))]\n\t\t\t(remdups % []))", "problem": 30, "user": "4ef5c7ce535dced4c769f248"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ef77c82535dced4c769f253"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4eee5c7f535d93acb0a668c6"}, {"code": "#(reduce \n  (fn [a b] \n    (if (= (last a) b) \n        a \n        (conj a b))) \n  [] (seq %))", "problem": 30, "user": "4dd88803535d2dad7130b5d9"}, {"code": "(fn [s]\n  (let [prev (atom nil)]\n      (reduce #(if (not (= @prev %2))\n                    (do\n                       (reset! prev %2)\n                       (conj %1 %2))\n                    %1) [] (seq s))))\n;#(map first (partition-by identity %))", "problem": 30, "user": "4ef992c8535dced4c769f268"}, {"code": "reduce\n  #(if (not (= (last %) %2))\n    (conj % %2) %)\n    []", "problem": 30, "user": "4daea587edd6309eace4d15a"}, {"code": "(fn [coll] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [(first coll)] (rest coll)))", "problem": 30, "user": "4ef0a39b535dced4c769f20d"}, {"code": "(fn [arr]\n  (reverse \n    (reduce #(conj % (first %2)) '() \n      (partition-by identity arr))))", "problem": 30, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn compress [xs]\n  (cond (empty? xs) '()\n        (= (count xs) 1) xs\n        true (let [fst (first xs), snd (second xs)]\n               (cond (= fst snd) (compress (rest xs))\n                     (not= fst snd) (conj (compress (rest xs)) fst)))))", "problem": 30, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn [x]\n(for \n[\npair (partition 2 1 (conj (seq x) nil))\n:let [a (first pair) b (last pair)] \n:when (not (= a b))\n]\nb)\n)", "problem": 30, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "#(reverse (reduce (fn [xs x] (if (= (first xs) x) xs (cons x xs))) '() %))", "problem": 30, "user": "4ef8d47c535dced4c769f261"}, {"code": "(fn compress [my-list]\n  (reduce (fn [a b]\n            (let [la (last a)]\n              (if (= la b)\n                a\n                (concat a (list b)))))\n          '()\n          my-list))", "problem": 30, "user": "4efb92ce535dced4c769f27a"}, {"code": "(fn my-compress \n    ([icoll] (my-compress (rest icoll) (conj '() (first icoll))))\n    ([icoll ocoll] \n     (cond \n      (empty? icoll) (reverse ocoll)\n      :else \n      (recur \n       (rest icoll) \n       (if (not= (first icoll) (first ocoll)) \n           (conj ocoll (first icoll))\n           ocoll)))))", "problem": 30, "user": "4eee3e6a535d93acb0a668c3"}, {"code": "(fn [l] \r\n  (loop [item (first l)\r\n         list-rest (rest l)\r\n         accum []]\r\n    (let [first-rest (first list-rest)\r\n          rest-rest (rest list-rest)]          \r\n      (cond\r\n        (nil? item) accum\r\n        (nil? list-rest) (concat accum [item])      \r\n        :else (recur first-rest \r\n                     rest-rest \r\n                     (cond\r\n                       (= item first-rest) accum\r\n                       :else (concat accum [item])))))))", "problem": 30, "user": "4efb0ae1535dced4c769f273"}, {"code": "reduce #(if (= (peek %) %2) % (conj % %2)) []", "problem": 30, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn cmpr [coll]\n   (reduce #(if (= (last %1) %2)\n              %1\n              (conj %1 %2)) [] coll))", "problem": 30, "user": "4ef57a7f535dced4c769f246"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4efc4210535dced4c769f280"}, {"code": "(fn [s]\n  (map first (partition-by identity s)))", "problem": 30, "user": "4ed9354f535d10e5ff6f5301"}, {"code": "(fn [xs](reduce #(if (= (last %1) %2)\n                          %1 (conj %1 %2)) \n(vec (take 1 xs)) (drop 1 xs)))", "problem": 30, "user": "4efcac3a535de96065cf507e"}, {"code": "(fn [coll] (reduce (fn [l x] (if (= x (last l)) l (conj l x))) [] coll))", "problem": 30, "user": "4e8768f6535dceadca469850"}, {"code": "(fn [s] (remove nil? (map #(if (not= %1 %2) %1) s (cons nil s))))", "problem": 30, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn f [l] (cond (< (count l) 2) l\n                (= (first l) (second l)) (f (rest l))\n                true (cons (first l) (f (rest l)))))", "problem": 30, "user": "4eff81ca535dcb61093f6a2d"}, {"code": "#(let [f (first %)] \n  (loop [s % l f r [f]] \n    (let [f (first s)] \n      (if (= s []) \n        r \n        (if (= l f) \n          (recur (rest s) l r) \n          (recur (rest s) f (conj r f)))))))", "problem": 30, "user": "4efb87f7535dced4c769f279"}, {"code": "(fn [coll] (conj (vec (map first (filter (fn [ [x y] ] (not (= x y))) (partition 2 1 coll)))) (last coll)))", "problem": 30, "user": "4ed3c783535d44c135fd68f6"}, {"code": "(fn [s]\n  (loop [s s\n         cur []]\n    (if (empty? s)\n      cur\n      (if (= (first s) (last cur))\n        (recur (rest s) cur)\n        (recur (rest s) (conj cur (first s)))))))", "problem": 30, "user": "4ef9b021535dced4c769f269"}, {"code": "(fn compress [x]\r\n  (loop [input x output []]\r\n\t( if ( = (count input) 0)\r\n\t\toutput\r\n\t\t( if ( = (first input) (last output)) (recur (rest input) output) (recur (rest input) (conj output (first input)))) )))", "problem": 30, "user": "4f00c74f535dcb61093f6a31"}, {"code": "#(concat (map first (filter (fn [pair] (not= (first pair) (second pair))) (partition 2 (interleave % (drop 1 %))))) (take-last 1 %))", "problem": 30, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "(fn remove-duplicates [input]\n    ((fn [in1 in2 out]\n      (if (empty? in1)\n        out\n        (recur (rest in1) (rest in2) (if (not= (first in1) (first in2)) (conj out (first in1)) out))))\n     (reverse input) (conj (reverse input) nil) '()))", "problem": 30, "user": "4ee9c8d0535d93acb0a66892"}, {"code": "(fn [xs] (reduce #(if (= (last %1) %2) %1 (concat %1 [%2])) () xs))", "problem": 30, "user": "4f031eac535dcb61093f6a67"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "(fn [x]\n (loop [l x r []]\n  (if (empty? l)\n    r\n    (if (= (first l) (last r))\n      (recur (rest l) r)\n      (recur (rest l) (conj r (first l)))\n    )\n  )\n )\n)", "problem": 30, "user": "4e5cac7c535d8a8b8723a2c3"}, {"code": "#(map first (partition-by str %))", "problem": 30, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn [s]\n   (letfn [(compress [x]\n     (if (empty? x)\n       '()\n       (if (= (second x) (first x))\n         (compress (rest x))\n         (concat (list (first x)) (compress (rest x))))))]\n       (compress s)))", "problem": 30, "user": "4f03193e535dcb61093f6a61"}, {"code": "(fn compr [s]\n   (reverse\n    (reduce\n     #(if (not= %2 (first %1)) (cons %2 %1) %1) '() s)))", "problem": 30, "user": "4ef89fb0535dced4c769f260"}, {"code": "(fn f [su] \n  (loop [s (rest su) previous (first su) result [(first su)]]\n     (if (seq s) \n         (if (= (first s) previous) \n               (recur (rest s) previous result)\n               (recur (rest s) (first s) (conj result (first s)))) \n    result)))", "problem": 30, "user": "4efd98fa535de96065cf5086"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn this\n  ([x] (this x (vector (first x)) (first x)))\n  ([x r i]\n    (cond\n      (= x '()) r\n      (= (first x) i) (recur (rest x) r i)\n      true (recur (rest x) (conj r (first x)) (first x)))))", "problem": 30, "user": "4f038017535dcb61093f6afa"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn [xs]\n  (reduce \n    #(if (= (last %1) %2) %1 (concat %1 (list %2)))\n    [] \n    xs)\n)", "problem": 30, "user": "4f039a8b535dcb61093f6b36"}, {"code": "(fn [X]\n(loop [y 1 result []]\n  (if (< y (count X))\n    (if (not (= (nth X (- y 1)) (nth X y)))\n      (recur (inc y) (conj result (nth X (- y 1))))\n      (recur (inc y) result)\n    )\n      (conj result (last X))\n  )\n)\n)", "problem": 30, "user": "4f031883535dcb61093f6a5e"}, {"code": "(fn [c]\n  (loop [in (rest c) out [(first c)]]\n    (if (empty? in)\n      out\n      (recur (rest in)\n        (if (= (last out) (first in)) out (conj out (first in)))))))", "problem": 30, "user": "4f03d9bc535dcb61093f6b71"}, {"code": "(fn [coll]\n  (map first (partition-by identity coll)))", "problem": 30, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn [S]\n  (if (empty? S) nil\n  (loop [s (rest S) a (list(first S)) l (first S)]\n    (if (empty? s) (reverse a)\n        (let [f (first s)]\n           (if (= f l) (recur (rest s) a l)\n                       (recur (rest s) (cons f a) f)))))))", "problem": 30, "user": "4f03d0fe535dcb61093f6b6d"}, {"code": "#(map first (partition-by (fn [x] x) %))", "problem": 30, "user": "4f017593535dcb61093f6a36"}, {"code": "#(reverse\n\n(loop [l % d () p nil]\n  (cond \n    (empty? l)d\n    (= (first l) p) (recur (rest l) d p)\n    true (recur (rest l) (conj d (first l)) (first l))))\n)", "problem": 30, "user": "4f04165d535dcb61093f6b9c"}, {"code": "#(cons (first %) (map first (filter (partial apply not=) (partition 2 (interleave (rest %) %)))))", "problem": 30, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn [s] (mapcat #(take 1 %) (partition-by #(list %) s)))", "problem": 30, "user": "4f0397ee535dcb61093f6b30"}, {"code": "(fn [s]\n  (loop [result [] last nil remain s]\n    (if (empty? remain)\n      result\n      (let [next (first remain) other (rest remain)]\n      (if (= last next)\n        (recur result last other)\n        (recur (conj result next) next other))))))", "problem": 30, "user": "4f036894535dcb61093f6aad"}, {"code": "(fn [xs] (conj (vec (map first (filter #(not (= (first %) (second %))) (map list xs (rest xs))))) (last xs)))", "problem": 30, "user": "4ef6e689535dced4c769f24f"}, {"code": "(fn compress [long & [short]]\n  (if (empty? long)\n      (reverse short)\n      (cond\n        (nil? short)\n          (compress (rest long)\n            (cons (first long) short))\n        (= (first short) (first long))\n          (compress (rest long) short)\n        :else (compress (rest long)\n                (cons (first long)\n                  short)))))", "problem": 30, "user": "4f035bfd535dcb61093f6a8f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f047dbf535dcb61093f6bce"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f03857e535dcb61093f6b0d"}, {"code": "(fn [x] (reduce (fn [a b] (if (= (last a) b) a (concat a (list b)))) '() x))", "problem": 30, "user": "4f039f14535dcb61093f6b3e"}, {"code": "(fn dup [x]\n  (when-let [[f & r] x]\n    (if (= f (first r))\n        (dup r)\n        (cons f (dup r)))))", "problem": 30, "user": "4f036fad535dcb61093f6ac7"}, {"code": "(fn [coll]\n  (loop [src coll dst []]\n    (if (empty? src) dst\n    (let [f (first src) s (second src)]\n      (recur (rest src) (if (= f s) dst (conj dst f)))))))", "problem": 30, "user": "4f0348b4535dcb61093f6a84"}, {"code": "(fn [x]\n         ((fn samey [i o c]\n            (if (empty? i)\n              (reverse o)\n              (samey (rest i)\n                (if (not (= (first i) c))\n                  (conj o (first i))\n                  o)\n                (first i))))\n           x '() false))", "problem": 30, "user": "4f0399c4535dcb61093f6b34"}, {"code": "(fn uniq [xs]\n  (cons (first xs)\n    ((fn uniq_ [y xs]\n      (cond\n        (empty? xs) '()\n        (= y (first xs)) (uniq_ y (rest xs))\n        :else (cons (first xs) (uniq_ (first xs) (rest xs)))))\n     (first xs) xs)))", "problem": 30, "user": "4f04d011535dcb61093f6be5"}, {"code": "(fn [x]\n(reverse (loop [l (rest x) old (first x) res (list old)]\n  (if (empty? l) res\n   (if (= old (first l))\n     (recur (rest l) old res)\n    (recur (rest l) (first l) \n                (conj res (first l))))))))", "problem": 30, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn remove-conseq \n  [seq]\n  (cond \n    (empty? seq) seq\n    (empty? (rest seq)) seq\n    :else\n    (let [subseq (remove-conseq (rest seq))]\n      (if (= (first seq) (first subseq))\n        subseq\n        (cons (first seq) subseq)))))", "problem": 30, "user": "4f03d4dc535dcb61093f6b6e"}, {"code": "(fn [x]\n  (apply concat (map distinct (partition-by identity x)))\n)", "problem": 30, "user": "4f00f997535dcb61093f6a34"}, {"code": "#(reverse \n  (reduce \n    (fn [x y] \n      (if (= (first x) y) \n        x \n        (cons y x))) \n    '() %))", "problem": 30, "user": "4f038bcd535dcb61093f6b1d"}, {"code": "(fn compress [xs]\n  (mapcat #(if (= %1 %2) [] [%2]) (cons nil xs) xs))", "problem": 30, "user": "4f047c07535dcb61093f6bcd"}, {"code": "#(cons (first %)\n  (map second (remove (partial apply =)\n    (partition-all 2 1 %))))", "problem": 30, "user": "4f052eaf535dcb61093f6bf3"}, {"code": "(fn [x]\n  (reduce\n    (fn [coll e]\n      (if (seq coll)\n         (if (= (last coll) e)\n            coll\n            (conj coll e)\n         )\n         [e]\n      ))\n    []\n    x\n))", "problem": 30, "user": "4f03154a535dcb61093f6a58"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) '[]", "problem": 30, "user": "4e690ace535d8ccf87e9fe95"}, {"code": "(fn [col]\n(reduce #(if \n  (= (last %1) %2) \n    %1 \n    (concat %1 (list %2))) '() col))", "problem": 30, "user": "4f032977535dcb61093f6a6c"}, {"code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "problem": 30, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "#(reverse\n  (reduce (fn [val x]\n    (if (= (first val) x)\n      val\n      (cons x val))) '() %))", "problem": 30, "user": "4f0381db535dcb61093f6b02"}, {"code": "(fn compress [l]\n  (loop [out '()\n         in l]\n    (cond (nil? in) (reverse out)\n          (= (first in) (first out)) (recur out (next in))\n          :else (recur (cons (first in) out) (next in)))))", "problem": 30, "user": "4f04f847535dcb61093f6beb"}, {"code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "problem": 30, "user": "4f062d4a535dcb61093f6c08"}, {"code": "(fn kill-dupes [xs]\n  (if (empty? xs)\n    ()\n    (let [h (first xs)]\n      (cons h\n            (kill-dupes\n              (drop-while #(= % h) xs))))))", "problem": 30, "user": "4f047902535dcb61093f6bcc"}, {"code": "#(reduce (fn [r e] (if (= e (last r)) r (conj r e))) [] %)", "problem": 30, "user": "4e6a6be7535d8ccf87e9fee1"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4dadba4dc9a9d6ed3899dc57"}, {"code": "#(reduce (fn [a x] (if (= x (last a)) a (conj a x))) [] %)", "problem": 30, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn my-compress [lst-in]\n  ((fn inner [lst last-seen acc]\n    (cond\n        (empty? lst)\n          (reverse acc)\n        (= (first lst) last-seen)\n          (inner (rest lst) last-seen acc)\n        true\n          (inner \n                 (rest lst)\n                 (first lst)\n                 (conj acc (first lst)))))\n    (seq lst-in) nil '()))", "problem": 30, "user": "4f03818e535dcb61093f6b00"}, {"code": "(fn [xs]\n  (loop [remain xs acc []]\n    (if (empty? remain)\n      acc\n      (recur \n        (rest remain)\n        (if (= (last acc) (first remain))\n          acc\n          (conj acc (first remain)))))))", "problem": 30, "user": "4f0388e8535dcb61093f6b17"}, {"code": "#(let [[f & r] (remove (partial apply =) (partition 2 1 %))] (concat f (map last r)))", "problem": 30, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn f [r]\n  (if (seq r)\n    (cons (first r) (f (drop-while #(= (first r) %) (rest r))))))", "problem": 30, "user": "4f038355535dcb61093f6b04"}, {"code": "(fn dd [x]\r\n    (remove nil?\r\n            (map #(if (= (first %) (second %))\r\n           nil\r\n      (first %))\r\n        (partition-all 2 1 x))))", "problem": 30, "user": "4ef0f1a1535dced4c769f212"}, {"code": "(fn [l] \n  (reduce \n    #(if (= (last %1) %2) \n      %1 \n      (conj %1 %2))\n  [] l))", "problem": 30, "user": "4edd9d79535d10e5ff6f532b"}, {"code": "(fn comp-seq [mylist]\r\n    (seq (loop [l mylist lastchar nil final []]\r\n            (if (empty? l) final\r\n                (if (not (= lastchar (first l)))\r\n                  (recur (rest l) (first l) (conj final (first l)))\r\n                  (recur (rest l) (first l) final))))))", "problem": 30, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "4f07056c535dcb61093f6c1d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f083048535dcb61093f6c33"}, {"code": "(fn compress [xs]\n  (when-first [x xs]\n    (cons x (compress (drop-while #{x} xs)))))", "problem": 30, "user": "4f0660ee535dcb61093f6c0d"}, {"code": "(fn [in-seq]\n  (loop [local-seq in-seq result '()]\n    (if (empty? local-seq) (reverse result)\n      (recur (rest local-seq)\n        (if (= (first local-seq) (first result)) result\n          (conj result (first local-seq)))))))", "problem": 30, "user": "4ef4ab95535dced4c769f23b"}, {"code": "(fn [x]\n  (letfn [(noDup [soFar restList]\n      (if (empty? restList)\n               soFar \n                     (if (= (last soFar) (first restList))\n                             (recur soFar (rest restList))\n                                     (recur (concat soFar\n                                        (list (first restList)))\n                                        (rest restList)))))]\n                                            (noDup (list (first x)) (rest x))))", "problem": 30, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "#(reverse (reduce (fn [s x] \n  (if (= x (first s)) s (cons x s))) () %))", "problem": 30, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn [s]\n  (loop [s_ s ret '()]\n    (cond\n      (not s_) (into '() ret)\n      (or \n        (not ret) \n        (not= (first s_) (first ret)))\n          (recur (next s_) (conj ret (first s_)))\n      :else (recur (next s_) ret))))", "problem": 30, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn compress [coll]\n  (let  [[x & xs] coll]\n    (cond\n     (empty? coll) []\n     (= x (first xs)) (compress (drop 1 coll))\n     :else            (concat [x] (compress (drop 1 coll))))))", "problem": 30, "user": "4e95a440535dbda64a6f6b37"}, {"code": "(fn [coll]\n  (reduce (fn [no-dup e]\n    (if (= (first no-dup) e) no-dup (cons e no-dup)))\n    ()\n    (reverse coll)))", "problem": 30, "user": "4f036c4b535dcb61093f6ab9"}, {"code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "problem": 30, "user": "4f0891a2535dcb61093f6c3b"}, {"code": "#(->> % (partition-by identity) (map first))", "problem": 30, "user": "4f08b15b535dcb61093f6c40"}, {"code": "#(reverse \n  ((fn [a acc prev] \n    (if (empty? a)\n      acc\n      (if (= (first a) prev)\n        (recur (rest a) acc prev)\n        (recur (rest a) (conj acc (first a)) (first a))))) (seq %) '() nil))", "problem": 30, "user": "4f039bbe535dcb61093f6b39"}, {"code": "reduce (fn [acc x]\n  (if (= (last acc) x)\n    acc\n    (conj acc x))) []", "problem": 30, "user": "4f038499535dcb61093f6b09"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn [s]\r\n   (for [[fst snd] (map list (cons nil s) s)\r\n         :when (not= fst snd)] snd))", "problem": 30, "user": "4f0a4e7e535d0136e6c222f4"}, {"code": "reduce (fn [r x] (if (= x (last r)) r (conj r x))) []", "problem": 30, "user": "4f067029535dcb61093f6c12"}, {"code": "(fn dd [[f & r]] (if-not (nil? f) (if (= f (first r)) (dd r) (cons f (dd r)))))", "problem": 30, "user": "4f045946535dcb61093f6bba"}, {"code": "(fn [coll] (reduce #(if (= (last %1) %2) %1 (concat %1 [%2])) '() coll))", "problem": 30, "user": "4f03822f535dcb61093f6b03"}, {"code": "(fn compress [xs]\n  (if (empty? xs)\n    '()\n    (cons (first xs) (compress (drop-while (partial = (first xs)) (rest xs))))))", "problem": 30, "user": "4ef0b523535dced4c769f20e"}, {"code": "#(mapcat \n  (fn [[x y]] (if (= x y) nil [y])) \n  (cons [nil (first %)] (map list % (rest %))))", "problem": 30, "user": "4f037bb5535dcb61093f6aec"}, {"code": "(fn [c]\n  (loop [prev nil coll c result []]\n    (let [fst (first coll) rst (rest coll)]\n      (cond\n        (nil? fst) result\n        (= fst prev) (recur prev rst result)\n        :else (recur fst rst (conj result fst))))))", "problem": 30, "user": "4f0b2028535d0136e6c222ff"}, {"code": "#(reduce (fn [s b] (if (= (last s) b) s (conj s b))) [] %)", "problem": 30, "user": "4e7e3cc4535db169f9c7970a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f089f1a535dcb61093f6c3c"}, {"code": "#(map last (partition-by max %))", "problem": 30, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "#(letfn [(compress [l]\n              (cond\n               (empty? l) '()\n               (= (first l) (second l)) (compress (rest l))\n               :else (cons (first l) (compress (rest l)))))] (compress %))", "problem": 30, "user": "4f031773535dcb61093f6a5c"}, {"code": "(fn [x] (map first (partition-by identity\n  x)))", "problem": 30, "user": "4ee67364535d93acb0a6685f"}, {"code": "(fn dedupe [coll]\n  (->> coll\n    (partition-by identity)\n    (map first)))", "problem": 30, "user": "4f07bc41535dcb61093f6c2c"}, {"code": "reduce #(if (= (peek %) %2) % (conj % %2)) []", "problem": 30, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "#(loop [o (list (first %)) i (rest %)]\n  (if (= () i) (reverse o)\n    (let [a (first i) b (rest i)]\n      (if (= a (first o))\n        (recur o b)\n        (recur (cons a o) b)))))", "problem": 30, "user": "4f0ce26c535d0136e6c22312"}, {"code": "(comp reverse reduce)\n(fn [col n] (if (= (first col) n) col (cons n col)))\nnil", "problem": 30, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ee7d113535d93acb0a6686e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "reduce (fn [r x] (if (not= (last r) x) (conj r x) r)) []", "problem": 30, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn compress\r\n  ([s] (let [f (first s)]\r\n         (cons f (compress f (rest s)))))\r\n  ([l r]\r\n    (lazy-seq\r\n      (let [n (first r)]\r\n        (when n\r\n          (if (= l n)\r\n            (compress l (rest r))\r\n            (cons n (compress n (rest r)))))))))", "problem": 30, "user": "4f0f1dd2535d0136e6c22332"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e273a93535deb9a81d77ef8"}, {"code": "(fn compress [s]\n  (loop [s s prev `last# acc []]\n    (if (empty? s) acc\n      (if (= (first s) prev)\n        (recur (rest s) (first s) acc)\n        (recur (rest s) (first s) (conj acc (first s)))))))", "problem": 30, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn drop-cons-dupes [s]\n  (loop [vals s result ()]\n    (if-not (seq vals)\n      (reverse result)\n      (recur (rest vals) \n             ((fn [col x]  (if (= x (first col)) col (conj col x))) result (first vals))\n             ))))", "problem": 30, "user": "4f0f03ce535d0136e6c2232a"}, {"code": "(fn remove-runs [s]\n  (second\n   (reduce (fn [[prior acc] item]\n             [item\n              (if (= item prior)\n                acc\n                (conj acc item)) item])\n           [nil []]\n           s)))", "problem": 30, "user": "4db2eac3535df7e46ed9b6c8"}, {"code": "(fn compress-seq\n  [x]\n    (when-let [[x & xs] (seq x)]\n      (if (= x (first xs))\n        (compress-seq xs)\n        (cons x (compress-seq xs)))))", "problem": 30, "user": "4ec1b80c535dfed6da9c6db6"}, {"code": "(fn myCompress\n    ([x y]\n        (if (empty? x)\n            y\n        (if (= (first x) (second x))\n            (myCompress (rest x) y)\n        (myCompress (rest x) (conj y (first x))))))\n    ([x] (myCompress x [])))", "problem": 30, "user": "4f03b3fb535dcb61093f6b52"}, {"code": "(fn [coll]\n  (loop [f '() r (seq coll)]\n    (if (empty? r)\n      f\n      (recur (if (= (last f) (first r))\n               f\n               (seq (conj (vec f) (first r))))\n             (rest r)))))", "problem": 30, "user": "4f06f1db535dcb61093f6c19"}, {"code": "(fn compress [x] (if (= (second x) nil) \r\n          (list (first x))\r\n          (if (= (first x) (second x))\r\n            (compress (next x))\r\n  \t        (concat (list (first x)) (compress (next x))))))", "problem": 30, "user": "4f048f67535dcb61093f6bd3"}, {"code": "(fn rem-dup [[x y & rest]]\n  (if (nil? y)\n    (list x)\n    (if (= x y)\n        (rem-dup (cons y rest))\n        (cons x (rem-dup (cons y rest))))))", "problem": 30, "user": "4f0f174c535d0136e6c22330"}, {"code": "#(loop [x % previous nil result []]\n     (if (nil? (first x))\n\t       result\n\t       (if-not (= previous (first x))\n\t\t       (recur (rest x) (first x) (conj result (first x)))\n\t\t       (recur (rest x) (first x) result))))", "problem": 30, "user": "4f066916535dcb61093f6c10"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn remconsdup [seq]\n  (if (empty? seq)\n    '()\n    (if (string? seq)\n      (if (= (first seq) (first (rest seq)))\n        (remconsdup (rest seq))\n        (apply str (cons (first seq) (remconsdup (rest seq)))))\n      (if (= (first seq) (first (rest seq)))\n        (remconsdup (rest seq))\n        (cons (first seq) (remconsdup (rest seq)))))))", "problem": 30, "user": "4f0a2ed1535d0136e6c222f3"}, {"code": "(fn [coll]                                                                                                                                               \n           (loop [s coll res [] prev nil ]                                                                                                                      \n              (if (seq s)                                                                                                                                       \n                  (let [ [f & r] s]                                                                                                                             \n                       (recur r (if (= f prev) res (conj res f)) f))                                                                                            \n                  res)))", "problem": 30, "user": "4f05b961535dcb61093f6bff"}, {"code": "(fn [coll]                                                                                                                                               \n           (loop [s coll res [] prev nil ]                                                                                                                      \n              (if (seq s)                                                                                                                                       \n                  (let [ [f & r] s]                                                                                                                             \n                       (recur r (if (= f prev) res (conj res f)) f))                                                                                            \n                  res)))", "problem": 30, "user": "4e4be570535dc968683fc4d8"}, {"code": "(fn [x]\n  ((fn [last-seen, builder, remaining]\n    (if (empty? remaining)\n      (reverse builder)\n      (if (= last-seen (first remaining))\n        (recur (first remaining), builder, (rest remaining))\n        (recur (first remaining), (conj builder (first remaining)), (rest remaining)))))\n  (first x) (conj nil (first x)) (rest x)))", "problem": 30, "user": "4f0e0aee535d0136e6c22320"}, {"code": "reduce (fn [xs x] \n  (if-not (= x (last xs))\n    (conj xs x)\n    xs)) []", "problem": 30, "user": "4f0f36a7535d0136e6c22336"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4f10175e535d64f603146411"}, {"code": "(fn uniq [s]\n    (\n    (fn uniq1 [past futur]\n        (\n        let [\n            tested (last past)\n            ]\n            (cond (empty? futur) past\n                  (= tested (first futur)) (uniq1 past (rest futur))\n                  :else (uniq1 (concat past (list (first futur))) (rest futur) )\n        \n            )\n        )\n     \n    ) '() s)\n)", "problem": 30, "user": "4f0df199535d0136e6c2231e"}, {"code": "(fn [coll]\n  (loop [res (vector) xs coll]\n    (if (empty? xs)\n      res\n      (recur\n        (if (= (last res) (first xs)) res (conj res (first xs)))\n        (rest xs)))))", "problem": 30, "user": "4f0e995e535d0136e6c22326"}, {"code": "reduce\n  #(if (= (last %) %2)\n    %\n    (conj % %2)) []", "problem": 30, "user": "4f1052b9535d64f603146418"}, {"code": "(fn compress [seq]\n  (reduce (fn [acc e] (if (= (last acc) e) acc (conj acc e)))\n    [] seq))", "problem": 30, "user": "4f13047d535d64f60314642c"}, {"code": "(fn [l]\n  (loop [n 1, r (list (list (first l)))]\n    (if (= (count l) n)\n      (map first r)\n        (recur (+ n 1) (if (contains? (set (last r)) (nth l n))\n                        r\n                       (concat (take n r) (list (list (nth l n)))))))))", "problem": 30, "user": "4f038567535dcb61093f6b0c"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4f12ab23535d64f603146429"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "#(map last (partition-by str %))", "problem": 30, "user": "4ede361a535d10e5ff6f5332"}, {"code": "(fn [coll]\n    (reduce (fn [l x]\n              (if (= x (last l)) l\n                  (conj l x)))\n            [] coll))", "problem": 30, "user": "4f1473eb535d64f603146439"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e7e33a3535db169f9c79708"}, {"code": "(fn rem-dups [coll]\r\n    (filter identity\r\n            (map #(if (= %1 %2) nil %2)\r\n                 (cons (Object.) coll)\r\n                 coll)))", "problem": 30, "user": "4f149e0f535d64f60314643d"}, {"code": "#(concat (map first (partition-by identity %1)))", "problem": 30, "user": "4f0cd1c9535d0136e6c22311"}, {"code": "reduce #( if (= (last %1) %2) %1 ( conj %1 %2 ) )  []", "problem": 30, "user": "4f030775535dcb61093f6a43"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4f128865535d64f603146428"}, {"code": "reduce\n (fn [a b]\n   (if (empty? a)\n     [b]\n     (if (= (last a) b)\n       a\n       (conj a b))))\n ()", "problem": 30, "user": "4f0c84ce535d0136e6c2230e"}, {"code": "(fn compress [x]\n  (loop [coll (vec x), acc []]\n    (if (empty? coll)\n      acc\n      (if (not= (last acc) (first coll))\n        (recur (rest coll) (conj acc (first coll)))\n        (recur (rest coll) acc)))))", "problem": 30, "user": "4f159ea6535d64f603146445"}, {"code": "#(apply concat (map distinct (partition-by str %)))", "problem": 30, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "#(mapcat distinct (partition-by identity %))", "problem": 30, "user": "4f0333f6535dcb61093f6a77"}, {"code": "(fn [c] (\n  (fn myRLE [data result last]\n    (if (= (count data) 0)\n      result\n      (myRLE\n        (rest data)\n        (if (= (compare last (first data)) 0)\n          result\n          (conj result (first data))\n        )\n        (first data)\n      )\n\n    )\n  ) c [] nil\n))", "problem": 30, "user": "4f16d6ed535d64f60314644f"}, {"code": "(fn [x]\n  (loop [acc (list (first x))\n         todo (rest x)]\n    (if (empty? todo)\n      (reverse acc)\n      (if (= (first acc) (first todo))\n        (recur acc (rest todo))\n        (recur (conj acc (first todo)) (rest todo))))))", "problem": 30, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "(fn compress [s]\n  (reverse (reduce #(if (= %2 (first %1)) %1 (conj %1 %2)) () s)))", "problem": 30, "user": "4f0f40d3535d0136e6c2233b"}, {"code": "#(map last (partition-by identity %))", "problem": 30, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn [x](reduce #(if (not= (last %1)%2) (conj %1 %2) %1) [] x))", "problem": 30, "user": "4f03bf5e535dcb61093f6b5d"}, {"code": "(comp reverse\n  (partial reduce\n    (fn [s x]\n      (if (= (first s) x)\n        s\n        (cons x s)))\n    '()))", "problem": 30, "user": "4f1b0ab3535d64f603146474"}, {"code": "#(loop [res [], arg %]\n  (if (empty? arg)\n    res\n    (recur (if (= (first arg) (second arg))\n               res\n               (conj res (first arg)))\n           (rest arg))))", "problem": 30, "user": "4f0f9df7535d0136e6c22342"}, {"code": "reduce\n  (fn [acc x]\n    (if (= (last acc) x) acc (conj acc x)))\n  []", "problem": 30, "user": "4e8ccd16535d65386fec212e"}, {"code": "(fn compress [l] (cond\n           (= nil l) '()\n           :default (let [[h & t] l tail (compress t)]\n                      (if (= h (first tail)) tail (conj tail h)))))", "problem": 30, "user": "4f16ef8a535d64f603146451"}, {"code": "#(loop [[x & y] (seq %) acc []]\n    (if y\n      (if (= x (first y))\n        (recur y acc)\n        (recur y (conj acc x))\n      )\n      (conj acc x)\n  )\n)", "problem": 30, "user": "4f141dee535d64f603146434"}, {"code": "(fn clean [x]\n    (let [f (first x) end (rest x)]\n      (if (empty? end) x\n          (conj (clean (drop-while #(= % f) end)) f)))\n    )", "problem": 30, "user": "4f16213f535d64f603146449"}, {"code": "(fn [coll] (map first (partition-by identity coll)))", "problem": 30, "user": "4f16d3fd535d64f60314644e"}, {"code": "(fn [col]\n  (let [f (fn [acc x] (if (= x (first acc)) acc (conj acc x)))]\n  (reverse (reduce f '() col))))", "problem": 30, "user": "4f1c2a3a535d64f603146480"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4f0c4518535d0136e6c2230b"}, {"code": "#(map first(partition-by identity %))", "problem": 30, "user": "4e7d1c22535db169f9c796c5"}, {"code": "#(map first (map distinct (partition-by identity %)))", "problem": 30, "user": "4ed845a8535d10e5ff6f52f8"}, {"code": "(fn u\n  ([x] \n    (u (rest x) (first x))) \n  ([x f] \n    (if x \n      (let [[s & xs] x] \n        (if (= s f) \n          (u xs f) \n          (conj (u xs s) f))) \n      (list f))))", "problem": 30, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [s]\n  (lazy-seq\n    (when-let [s (seq s)]\n      (cons (first s)\n            (->> (rest s)\n              (map #(when-not (= %1 %2) %2) s)\n              (keep identity))))))", "problem": 30, "user": "4f169a0f535d64f60314644c"}, {"code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] %)", "problem": 30, "user": "4f1595da535d64f603146444"}, {"code": "(fn compressor [myseq]\n  (when-not (empty? myseq)\n      (if (string? myseq)\n          (if (= (first myseq) (second myseq))\n            (apply str (compressor (rest myseq)))\n            (apply str (cons (first myseq) (compressor (rest myseq)))))\n          (if (= (first myseq) (second myseq))\n            (compressor (rest myseq))\n            (cons (first myseq) (compressor (rest myseq)))))))", "problem": 30, "user": "4e9a3a03535dbda64a6f6b70"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e6f4cbc535d5021c1a8961a"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "4f032f30535dcb61093f6a73"}, {"code": "(fn [x]  \n   (seq (reduce (fn [a b] (if (= (last a) b)\n                         a\n                             (conj  a b))\n   ) [] x) ))", "problem": 30, "user": "4f00e9c7535dcb61093f6a33"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn [x] \n                    (loop [letter (first x)\n                           string (rest x)\n                           f []] \n                      (if (= nil letter)\n                        f   \n                        (if (= letter (first string))\n                          (recur letter (rest string) f)\n                          (do \n                            (recur (first string) \n                                   (rest string) \n                                   (conj f letter))\n                            )   \n                          )   \n                        )   \n                      )   \n                    )", "problem": 30, "user": "4ee88f29535d93acb0a66882"}, {"code": "#(loop [uq-seq [(first %1)] i 0]\n                    (if (= i (count %1))\n                      uq-seq\n                      (recur (if (= (nth %1 i) (last uq-seq)) uq-seq (conj uq-seq (nth %1 i))) (inc i))\n                    )\n                  )", "problem": 30, "user": "4ea31da2535d7eef308072c1"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4f215350e4b0d66497709fd0"}, {"code": "(fn compress [seq]\n  (reduce \n    (fn [result, item]\n      (if (= (peek result) item)\n        result\n        (conj result item)))\n      []\n      seq))", "problem": 30, "user": "4f03396d535dcb61093f6a7b"}, {"code": "(fn [theSeq] \n  (reverse ((fn compress [theSeq newSeq lastValue]\n\t\t(if (empty? theSeq)\n\t\t\tnewSeq\n\t\t\t(if (= lastValue (first theSeq))\n\t\t\t\t(compress (rest theSeq) newSeq lastValue)\n\t\t\t\t(compress (rest theSeq) (cons (first theSeq) newSeq) (first theSeq))))) theSeq '() nil)))", "problem": 30, "user": "4f1c2336535d64f60314647f"}, {"code": "(fn [s] \n  (reduce \n    (fn [agg a] \n      (if (not= a (last agg)) \n        (conj agg a) \n        agg\n      ))\n  [] s))", "problem": 30, "user": "4f1d1299535d64f603146487"}, {"code": "(fn f[s]\r\n  ((fn ff[s, r]\r\n    (if (nil? s)\r\n      r\r\n      (recur (next s) (if (= (first s) (last r)) r (conj r (first s))))\r\n    )\r\n  ) s [])\r\n)", "problem": 30, "user": "4f245d77e4b0d66497709feb"}, {"code": "(fn [x] (reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) [] x)))", "problem": 30, "user": "4e48b61d535dc968683fc4be"}, {"code": "(fn [x]\n  ((fn [x re]\n    (if (<= (count x) 1) re\n        (recur (rest x)\n               (if (= (first x) (fnext x))\n                 re\n                 (conj re (fnext x)))))\n    ) x (vector (first x))))", "problem": 30, "user": "4eb02674535d7eef30807338"}, {"code": "#(apply list (map first (partition-by identity %)))", "problem": 30, "user": "4f251302e4b0d66497709ff0"}, {"code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "problem": 30, "user": "4e4ea0f6535dc968683fc4e6"}, {"code": "(fn [seq] (loop [x seq result '()] (if (empty? x)\n                                      (reverse result) \n                                      (recur\n                                       (rest x)\n                                       (if (= (first result) (first x))\n                                         result\n                                         (conj result (first x)\n                                         ))))))", "problem": 30, "user": "4f1684c7535d64f60314644b"}, {"code": "(fn [x] (map #(first %) (partition-by identity x)))", "problem": 30, "user": "4f26c487e4b0d6649770a006"}, {"code": "#(reduce (fn [coll1 x] (if (= (last coll1) x) coll1 (conj coll1 x))) [] %)", "problem": 30, "user": "4f18677d535d64f603146459"}, {"code": "(fn compress [ns]\n  (when (seq ns)\n    (lazy-seq (cons (first ns) (compress (drop-while #(= (first ns) %) ns))))))", "problem": 30, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [s] \n  (loop [s s acc [] last nil]\n    (if (empty? s)\n      acc\n      (if (not= (first s) last)\n         (recur (rest s) (conj acc (first s)) (first s))\n         (recur (rest s) acc (first s))))))", "problem": 30, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f294c48e4b0d6649770a023"}, {"code": ";(fn [x]\n;  (loop [x x\n;         x1 '()]\n;    (cond\n;      (empty? x) (reverse x1)\n;      (= (first x) (first x1)) \n;        (recur (rest x) x1)\n;      :else\n;        (recur (rest x) (cons (first x) x1)))))\n\n;#(apply concat (map distinct (partition-by identity %)))\n\n;#(mapcat distinct (partition-by identity %))\n\n#(map first (partition-by identity %))", "problem": 30, "user": "4f07c8c3535dcb61093f6c2d"}, {"code": "(fn [s] (reverse (reduce (fn [a e] (if (= (first a) e) a (conj a e))) '() s)))", "problem": 30, "user": "4f280840e4b0d6649770a010"}, {"code": "(fn [arg]\n    (loop [inlist (rest arg), ret (conj [] (first arg)), lastelem (first arg)]\n        (if (= '() inlist)\n            ret\n            (if (= (first inlist) lastelem)\n                (recur (rest inlist) ret lastelem)\n                (recur (rest inlist) (conj ret (first inlist)) (first inlist))\n            )\n        )\n    )\n)", "problem": 30, "user": "4f2965ffe4b0d6649770a029"}, {"code": "(fn conseq [sq]\n  (map first (partition-by identity sq))\n  )", "problem": 30, "user": "4f21838fe4b0d66497709fd2"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "(comp (partial map first) (partial partition-by identity))", "problem": 30, "user": "4f2a35ace4b0d6649770a03a"}, {"code": "(fn [x] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] (apply list x)))", "problem": 30, "user": "4f2c593ee4b0d6649770a053"}, {"code": "reduce (fn [c x] (if (= (last c) x) c (conj c x))) []", "problem": 30, "user": "4ebf45c3535dfed6da9c6d9d"}, {"code": "(fn [coll]\n  (loop [res []\n         m :foo\n         c coll]\n    (let [e (first c)\n          r (rest c)]\n         (cond\n           (nil? e) res\n           (= e m) (recur res m r)\n           :else (recur (conj res e) e r)))))", "problem": 30, "user": "4f230dfbe4b0d66497709fe0"}, {"code": "(fn dedup [s]\n  (loop [s s l nil a []]\n    (if (empty? s)\n      a\n      (if (= l (first s))\n        (recur (rest s) (first s) a)\n        (recur (rest s) (first s) (conj a (first s)))))))", "problem": 30, "user": "4f03ebf7535dcb61093f6b7f"}, {"code": "(fn [l]\n  (loop [newl nil old l]\n    (if (empty? old)\n      (reverse newl)\n      (if (= (first newl) (first old))\n        (recur newl (rest old))\n        (recur (conj newl (first old)) (rest old))))))", "problem": 30, "user": "4eae2f9e535d7eef30807324"}, {"code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "problem": 30, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn compress [s]\n  (letfn [(compress-helper [compressed remaining]\n    (if remaining\n      (if (= (first remaining) (second remaining))\n        (recur compressed (next remaining))\n        (recur (conj compressed (first remaining)) (rest remaining)))\n      compressed))]\n    (compress-helper [] (seq s))))", "problem": 30, "user": "4ec3674b535dcc7ae8597d57"}, {"code": "(fn [s] (reduce \n  (fn [a b] \n    (if (= (last a) b)\n      a\n      (concat a [b]))\n  )\n  (cons [] (seq s))\n))", "problem": 30, "user": "4f0f01c0535d0136e6c22329"}, {"code": "(fn [c]\n  (reverse (loop [c c\n         newc (empty c)]\n    (if (not (seq c))\n      newc\n      (let [x (first c)]\n        (if (= x (first newc))\n          (recur (rest c) newc)\n          (recur (rest c) (cons x newc))))))))", "problem": 30, "user": "4dc1e1e4535d020aff1edf90"}, {"code": "#(second (reduce (fn [[cur res] x] (if (= cur x) [cur res] [x (conj res x)])) [nil []] %))", "problem": 30, "user": "4f2ef48be4b0d6649770a06c"}, {"code": "(fn [s]\n  (loop\n   [it s acc []]\n\t    (if-not (empty? it)\n           (recur (next it) (if-not (= (last acc) (first it)) (conj acc (first it)) acc))\n\t         acc\n\t     )\n     )\n)", "problem": 30, "user": "4eaa66eb535d7eef3080730b"}, {"code": "#(mapcat distinct (partition-by identity %))", "problem": 30, "user": "4e1248b1535d04ed9115e7cf"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f301d02e4b0d6649770a072"}, {"code": "(fn [seq]\r\n  (reduce (fn [a b] (if (= b (last a)) a (conj a b))) [] seq))", "problem": 30, "user": "4f2893d0e4b0d6649770a019"}, {"code": "#(map last (partition-by min %))", "problem": 30, "user": "4e6a5a32535d8ccf87e9fed0"}, {"code": "(fn compact [s]\n  (reverse \n    (reduce (fn [acc, k]\n              (if (= (first acc) k) \n                  acc \n                  (conj acc k))) () (seq s))))", "problem": 30, "user": "4edffe54535d10e5ff6f5347"}, {"code": "(fn [coll]\n  (loop [coll coll acc []]\n    (if (seq coll)\n      (let [a (first coll)\n            b (second coll)]\n        (if (= a b)\n          (recur (rest coll) acc)\n          (recur (rest coll) (conj acc a))))\n      acc)))", "problem": 30, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn f [s]\n  (if (< (count s) 2)\n\t\ts\n\t\t(if (= (first s) (second s))\n\t\t\t(f (rest s))\n\t\t\t(cons (first s) (f (rest s)))\n\t\t)\n\t)\n)", "problem": 30, "user": "4f2de7e9e4b0d6649770a061"}, {"code": "(fn b [s]\n  (if (= (count s) 1)\n    s\n  (if (= (first s) (first (rest s)))\n    (b (rest s))\n    (cons (first s) (b (rest s)))\n    )\n    )\n  )", "problem": 30, "user": "4f2004a1535d64f6031464a7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ee1f2ba535d10e5ff6f535f"}, {"code": "(fn [input-s]\n  (reduce\n   (fn [a b]\n     (if (not (= (last a) b))\n       (conj a b)\n       a))\n   []\n   input-s))", "problem": 30, "user": "4f31519ae4b0d6649770a086"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "(fn my-compress [coll]\n    (loop [c (vector (first coll)) r (rest coll)]\n      (if (or (nil? r) (= r '()))\n        c\n        (if (= (first r) (last c))\n          (recur c (rest r))\n          (recur (conj c (first r)) (rest r))))))", "problem": 30, "user": "4f04d312535dcb61093f6be7"}, {"code": "(fn dedup [s]\n  (if (empty? s)\n    s\n    (let [x (first s)]\n      (loop [r (rest s)]\n        (if (and (not (empty? r))\n                 (= x (first r)))\n          (recur (rest r))\n          (cons x (dedup r)))))))", "problem": 30, "user": "4f2b0951e4b0d6649770a045"}, {"code": "(fn this\n  ([[hd & tl]] (this hd tl [hd]))\n  ([prev [hd & tl :as elems] acc]\n    (if (empty? elems)\n      acc\n    (if (= prev hd)\n      (recur hd tl acc)\n      (recur hd tl (conj acc hd))))))", "problem": 30, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [[a & r]]\n  (first\n    (reduce (fn [[l x] y]\n              (if (= x y)\n                [l x]\n                [(conj l y) y]))\n     [[a] a] r)))", "problem": 30, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [x]\n    (loop [acc [] lst x]\n          (if (empty? lst) acc\n            (if (= (last acc) (first lst))\n                (recur acc (rest lst))\n              (recur (conj acc (first lst)) (rest lst))))))", "problem": 30, "user": "4edb314d535d10e5ff6f5317"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f036d18535dcb61093f6abe"}, {"code": "(fn [s] (into [(first s)] (map #(last %) (filter #(not (= (first %) (second %))) (partition 2 1 s)))))", "problem": 30, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "(fn [x] (map #(first %) (partition-by #(str %) x)))", "problem": 30, "user": "4f341320e4b0e243712b1eb4"}, {"code": "(fn f [coll]\n  (loop [c coll result []]\n    (if (= 1 (count c))\n      (conj result (first c))\n      (if (= (first c) (nth c 1))\n        (recur (rest c) result)\n        (recur (rest c) (conj result (first c)))))))", "problem": 30, "user": "4ea84250535d7eef308072f5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4eb9353f535dfed6da9c6d4e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f2582bae4b0d66497709ff6"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f312c35e4b0d6649770a084"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4f0404df535dcb61093f6b91"}, {"code": "(fn [x] (loop [is (rest (seq x)) \n  rs (vector (first (seq x)))] \n  (if (empty? is) \n    rs\n    (recur (rest is) \n      (if (= (first is) (last rs)) \n        rs \n        (conj rs (first is)))))\n    ))", "problem": 30, "user": "4f31ad57e4b0d6649770a089"}, {"code": "(fn [coll] (reduce (fn [l x] (if (= x (last l)) l (conj l x))) [] coll))", "problem": 30, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "#(loop [v % r []] (if-not (seq v) r (let [[x & xs] v] (recur xs (if (= x (first xs)) r (conj r x))))))", "problem": 30, "user": "4efd8b67535de96065cf5085"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ef48422535dced4c769f236"}, {"code": "(fn [s]\n  (loop [s s o []]\n    (if (empty? s)\n      o\n      (if (= (last o) (first s))\n        (recur (rest s) o)\n        (recur (rest s) (conj o (first s)))))))", "problem": 30, "user": "4f382eb7e4b0e243712b1ed9"}, {"code": "#(reverse ((fn [s d c]\r\n              (if (nil? s)\r\n                d\r\n                (let [sc (first s)]\r\n                  (if (= c sc)\r\n                    (recur (next s) d c)\r\n                    (recur (next s) (cons sc d) sc))))) % nil nil))", "problem": 30, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "(fn [s]\n  (loop [sq s deduped '()]\n          (if (empty? sq)\n          deduped\n          (recur (rest sq) (concat deduped\n            (if (=(first sq) (last deduped))\n            ()\n            (cons (first sq) nil)))))))", "problem": 30, "user": "4f35e662e4b0e243712b1ec6"}, {"code": "#(map last (partition-by list %))", "problem": 30, "user": "4f39f902e4b0e243712b1efe"}, {"code": "#(reverse (reduce (fn [coll x] (if (= x (first coll)) coll (cons x coll))) () %))", "problem": 30, "user": "4f1bee08535d64f60314647e"}, {"code": "#(map first\n  (partition-by identity %))", "problem": 30, "user": "4f378631e4b0e243712b1ed3"}, {"code": "reduce (fn [s y] (if (= y (last s)) s (conj s y))) []", "problem": 30, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "(fn [x](map first (partition-by identity x)))", "problem": 30, "user": "4eeb8f68535d93acb0a668a9"}, {"code": "(fn [x]\n  (reverse ((fn strzip [str result]\n    (if (empty? str) result\n      (let [a (first str)\n            b (first (rest str))]\n        (if (= a b) (strzip (rest str) result)\n          (strzip (rest str) (cons a result))\n        )\n        )\n    )) x '()))\n)", "problem": 30, "user": "4f3242bae4b0d6649770a08f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f15de56535d64f603146448"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "(fn [s-in]\n  (loop [s s-in acc []]\n    (if (seq s)\n      (recur (next s) \n             (if (= (last acc) (first s))\n                acc\n                (conj acc (first s))))\n      acc)))", "problem": 30, "user": "4f36f5f2e4b0e243712b1ece"}, {"code": "(fn [coll]\n  (loop [input (seq coll)\n         last nil\n         result []]\n           (if (empty? input)\n              result\n              (recur (rest input) (first input)\n                  (if (= last (first input)) result\n                     (conj result (first input)))))))", "problem": 30, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn [coll] (let [sqnc (seq coll)]\n              (reduce \n              #(vec (concat %1 (if (= (last %1) %2) [] [ %2 ])))\n              [] sqnc)))", "problem": 30, "user": "4f2aff4de4b0d6649770a044"}, {"code": "#_(fn com\n  ([ls] (com (rest ls) [(first ls)]))\n  ([ls c]\n    (cond\n      (empty? ls) c\n      (= (last c) (first ls))\n        (recur (rest ls) c)\n      :else (recur (rest ls) (conj c (first ls))))))\n\nreduce #(if (not= (last %) %2)\n    (conj % %2) %) []", "problem": 30, "user": "4f1bb9d8535d64f60314647d"}, {"code": "(fn [s]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []  s))", "problem": 30, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "#(loop [col % c ()]\r\n    (cond (empty? col) (reverse c)\r\n          (= (first col) (first c)) (recur (rest col) c)\r\n          :else (recur (rest col) (cons (first col) c))))", "problem": 30, "user": "4ebbb6bc535dfed6da9c6d71"}, {"code": "(partial reduce (fn [acc v] (if (= v (last acc)) acc (conj acc v))) [])", "problem": 30, "user": "4ddbf54e535d02782fcbe9ff"}, {"code": "#(map last (partition-by identity %))", "problem": 30, "user": "4ec6f4ee535d6d7199dd36dc"}, {"code": "(fn [coll] (reduce (fn [l x] (if (= x (last l)) l (conj l x))) [] coll))", "problem": 30, "user": "4f230adde4b0d66497709fdf"}, {"code": "apply (fn [& args] \n        (reduce \n          #(if (= (peek %) %2) % (conj % %2)) \n          [] \n          args))", "problem": 30, "user": "4f3cc2fbe4b0e243712b1f55"}, {"code": "(fn [x] (filter identity (map #(if (not= % %2) %) x (cons nil x))))", "problem": 30, "user": "4e372223535deb9a81d77f39"}, {"code": "(fn [coll]\n    (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll))", "problem": 30, "user": "4f4023d9e4b0e243712b1fa9"}, {"code": "(fn [x] (mapcat set (partition-by #(identity %) x)))", "problem": 30, "user": "4e1b8106535d04ed9115e801"}, {"code": "(fn this [s]\n  (if (empty? s)\n    ()\n    (if (= (first s) (second s))\n      (this (rest s))\n      (cons (first s) (this (rest s))))))", "problem": 30, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4f3b5219e4b0e243712b1f2a"}, {"code": "(fn [x & acc]\n  (cond (empty? x) acc\n        (nil? acc) (recur x [])\n        (= (first x) (last acc)) (recur (rest x) acc)\n        :else (recur (rest x) (concat acc [(first x)]))))", "problem": 30, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "(fn [col] (loop [l col result '()] (if (empty? l) (reverse result) \n  (recur (drop-while #(= (first l) %) (rest l)) (cons (first l) result)))))", "problem": 30, "user": "4f4003d9e4b0e243712b1fa5"}, {"code": "(fn compress [xs]\n  (if (nil? (second xs))\n    [(first xs)]\n    (if (= (first xs) (second xs))\n      (compress (rest xs))\n      (cons (first xs) (compress (rest xs))))))", "problem": 30, "user": "4f065217535dcb61093f6c0c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f17df72535d64f603146458"}, {"code": "#(reduce\n  (fn [a b] (if (= b (first a)) a (cons b a)))\n  ()\n  (reverse %))", "problem": 30, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn [x] \n  (concat [(first x)]\n  (map \n    second \n    (filter \n      #(not= (first %) (second %)) \n      (partition 2 1 x)))))", "problem": 30, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(comp                                                                            (partial filter (comp not nil?))                                              #(cons (first %)                                                                     (map (fn [p q] (if (= p q) nil p)) (rest %) %)))", "problem": 30, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "(fn [s]\n    (reverse \n    ((fn [s p a]\n      (if (empty? s)\n          a\n          (let [h (first s) t (rest s)]\n            (if (= h p)\n                (recur t p a)\n                (recur t h (cons h a))))\n       )\n      ) s (first s) (cons (first s) '())\n    )))", "problem": 30, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [coll]\n  (reduce (fn [val x]\n              (if (= (last val) x)\n                val\n                (conj val x)))\n  []\n  coll))", "problem": 30, "user": "4f4175ffe4b0d7d3c9f3fce8"}, {"code": "(fn [s] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "(fn [x]\n  (reduce (fn [l r] (if (= (last l) r) (concat l nil) (concat l (list r)))) nil x)\n  )", "problem": 30, "user": "4f3e05a8e4b0e243712b1f79"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f3e2fbbe4b0e243712b1f7e"}, {"code": "(fn [x]\n  (loop [acc (vector) l (seq x)]\n    (if (empty? l)\n      acc\n      (recur\n        (if (= (last acc) (first l))\n          acc\n          (conj acc (first l)))\n        (rest l)))))", "problem": 30, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "4f282da7e4b0d6649770a013"}, {"code": "#(reduce\n    (fn [result value]\n      (if \n        (= value (peek result))\n        result\n        (conj result value)))\n    []\n    %)", "problem": 30, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "#(map last (partition-by str %))", "problem": 30, "user": "4f3976aee4b0e243712b1eea"}, {"code": "(fn [lst]\n  (apply (if (sequential? lst) list str)\n    (reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) '() lst))))", "problem": 30, "user": "4f06f953535dcb61093f6c1c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f39493be4b0e243712b1ee9"}, {"code": "(fn   [coll]\n  (reverse (loop [coll coll result ()]\n    (if (seq coll)\n      (let [pair (take 2 coll)]\n\t       (if (= (first pair) (second pair))\n\t         (recur (next coll) result)\n\t         (recur (next coll) (conj result (first pair)))))\n        result))))", "problem": 30, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f465734e4b0d56e7bb92b9b"}, {"code": "#(letfn [(rm-head [x l]\r\n            (cond\r\n             (empty? l) l\r\n             (= x (first l)) (recur x (rest l))\r\n             :else l))\r\n          (worker [x n]\r\n           (if (empty? x)\r\n             n\r\n             (recur (rm-head (first x) (rest x)) (conj n (first x)))))]\r\n   (worker % []))", "problem": 30, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f3c772de4b0e243712b1f4c"}, {"code": "(fn [coll]\n  (loop [rep () orig coll]\n    (if (empty? orig)\n    (reverse rep)\n    (recur \n      (if (= (first orig) (first rep))\n        rep\n        (conj rep (first orig)))\n      (rest orig)))))", "problem": 30, "user": "4e36e647535deb9a81d77f36"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "4f4319ebe4b0d7d3c9f3fd13"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "#(reverse(reduce (fn [x y] (if (= (peek x) y)  x (into x (list y)))) () %))", "problem": 30, "user": "4f4a34b2e4b0d56e7bb92c09"}, {"code": "(fn [s]\n  (reduce \n    (fn [a b]\n      (if (= (last a) b)\n          a\n          (concat a (list b))))\n    '()\n    (seq s)))", "problem": 30, "user": "4f4a5ca6e4b0d56e7bb92c0f"}, {"code": "(fn [s] \n               (reduce (fn [acc new]\n                         (if (= (last acc) new)\n                           acc\n                           (conj acc new)))\n                       []\n                       s))", "problem": 30, "user": "4f2f7e87e4b0d6649770a06f"}, {"code": "(fn [seq]\r\n  (loop [cur nil, remain seq, acc nil]\r\n    (cond (empty? remain) acc\r\n          (= (first remain) cur) (recur cur (rest remain) acc)\r\n          :else                  (recur (first remain) (rest remain) (concat acc (list (first remain)))))))", "problem": 30, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "reduce (fn [x y] (if (= y (last x)) x (conj x y))) []", "problem": 30, "user": "4f2acb29e4b0d6649770a040"}, {"code": "(fn uniq\r\n    ([x] (uniq x nil))\r\n    ([x L]\r\n      (let [f (first x)\r\n            r (rest x)]\r\n        (if (= f L)\r\n            (if (empty? r) nil (uniq r f))\r\n            (if (empty? r) (list f) (cons f (uniq r f)))\r\n        )\r\n      )\r\n    )\r\n  )", "problem": 30, "user": "4f3543eee4b0e243712b1ebd"}, {"code": "(fn [coll]\n  (loop [in coll out ()]\n    (if (empty? in)\n      (reverse out)\n      (if (= (first in) (first out))\n        (recur (rest in) out)\n        (recur (rest in) (conj out (first in)))))))", "problem": 30, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "#(reduce (fn [xs x] (if (= (last xs) x) xs (conj xs x))) [] %)", "problem": 30, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn [in] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) () in)))", "problem": 30, "user": "4f03ba9c535dcb61093f6b58"}, {"code": "(fn [xs]\r\n         (reverse\r\n          (reduce\r\n           (fn [v x]\r\n             (if (or (empty? v)\r\n                     (not= x (first v)))\r\n               (cons x v)\r\n               v)\r\n             ) [] xs)))", "problem": 30, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn fix [lst]\n    ;; if current and peek are the same, then return only recur.\n    ;; if current and peek are different, then return cons recur.\n    (let [[current & remaining] (seq lst)]\n      (cond (empty? remaining) (list current)\n            (= current (first remaining)) (fix remaining)\n            :else (cons current (fix remaining)))))", "problem": 30, "user": "4f4a8707e4b0d56e7bb92c12"}, {"code": "(fn compress [col]\n  (loop [result []\n         [x & xs] col]\n    (if x\n      (if (= x (first xs))\n        (recur result xs)\n        (recur (conj result x) xs))\n      result)))", "problem": 30, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn remd\r\n  [c]\r\n  (if (< (count c) 2)\r\n    c\r\n    (if (= (first c) (nth c 1))\r\n     (remd (rest c))\r\n     (cons (first c) (remd (rest c))))))", "problem": 30, "user": "4f17ab99535d64f603146457"}, {"code": "(fn [dups]\n  (loop [last (first dups)\n         nodups [(first dups)]\n         dups (rest dups)]\n    (if (empty? dups)\n        nodups\n        (if (= last (first dups))\n            (recur last nodups (rest dups))\n            (recur (first dups) \n                   (conj nodups (first dups)) \n                   (rest dups))))))", "problem": 30, "user": "4ed2918f535d44c135fd68d8"}, {"code": "(fn [coll]\n  (loop [cpr [] coll coll]\n    (if (empty? coll)\n      cpr\n      (recur\n        (if (= (last cpr) (first coll)) \n          cpr\n          (conj cpr (first coll)))\n        (rest coll)))))", "problem": 30, "user": "4f46df00e4b0d56e7bb92bac"}, {"code": "(fn [a]\n  (map first (partition-by identity a)))", "problem": 30, "user": "4f4c8faae4b03ad3f0c10c93"}, {"code": "(fn [s]\n  (let [accumulator (fn [list elem] (if (= elem (first list))\n                                      list\n                                      (cons elem list)))]\n    (reverse (reduce accumulator (cons () s)))))", "problem": 30, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "#(map last (partition-by max %))", "problem": 30, "user": "4f4fac2ae4b03ad3f0c10ce5"}, {"code": "(fn no-dups\r\n  ([chain] (no-dups chain [] nil))\r\n  ([chain result last-val]\r\n    (cond (empty? chain) result\r\n          (= (first chain) last-val)\r\n            (no-dups (rest chain)\r\n                     result\r\n                     (first chain))\r\n          :else\r\n            (no-dups (rest chain)\r\n                     (conj result (first chain))\r\n                     (first chain)))))", "problem": 30, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "(fn compress [xs]\n  (loop [xs xs ys []]\n    (if (seq xs)\n      (if (next xs)\n        (if (= (first xs) (second xs))\n          (recur (next xs) ys)\n          (recur (next xs) (conj ys (first xs))))\n        (conj ys (first xs)))\n      ys)))", "problem": 30, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn compress [coll]\n    (if (empty? coll)\n        (list)\n        (if (= (first coll) (second coll))\n            (compress (rest coll))\n            (cons (first coll)\n              (compress (rest coll))))))", "problem": 30, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "#(loop [l % r []]\n   (if (empty? l)\n       r\n       (recur (rest l) (if (= (first l) (last r)) r (conj r (first l))))))", "problem": 30, "user": "4f4bbda0e4b03ad3f0c10c7b"}, {"code": "#(map first\n  (filter (complement (partial apply =))\n    (partition 2 1 [nil] %)))", "problem": 30, "user": "4f4fbed7e4b03ad3f0c10ce8"}, {"code": "(fn compress [coll]\n  (loop [c (seq coll) acc []]\n    (cond\n      (empty? c) acc\n      (= (first c) (second c)) (recur (rest c) acc)\n      :else (recur (rest c) (conj acc (first c))))))", "problem": 30, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn [a] (second (reduce (fn [[last, acc] e] (if (= e last) [last, acc] [e, (conj acc e)])) [nil, []] a)))", "problem": 30, "user": "4f4afb1fe4b0d56e7bb92c21"}, {"code": "(fn foo\n  ([list] (foo list []))\n  ([l1 l2]\n    (if (empty? l1)\n      l2\n      (if (= (first l1) (last l2))\n        (foo (rest l1) l2)\n        (foo (rest l1) (conj l2 (first l1)))))))", "problem": 30, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn [r, s]\n  (if (seq s)\n    (if (= (first s) (last r)) (recur r (rest s))\n      (recur (conj r (first s)) (rest s)))\n    r)) []", "problem": 30, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "reduce\n   (fn [a x]\n     (if (= (last a) x)\n       a\n       (reverse (conj (reverse a) x))))\n   ()", "problem": 30, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "(fn [x]\r\n  (reduce #(if (not= (last %1) %2)\r\n             (conj %1 %2)\r\n             %1)\r\n          [] x))", "problem": 30, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn f30 [[x & xs]]\n    (if x (cons x (f30 (drop-while #(= %1 x) xs)))))", "problem": 30, "user": "4f4d0a52e4b03ad3f0c10c9d"}, {"code": "(fn e_30\n  ([col]\n     (when-let [[f & r] (seq col)]\n       (if (= f (first r))\n         (e_30 r)\n         (cons f (e_30 r)))))\n  )", "problem": 30, "user": "4f25c4c4e4b0d66497709ffc"}, {"code": "(fn [xs]\n  (map first (partition-by identity xs)))", "problem": 30, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4f419f6fe4b0d7d3c9f3fceb"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f542fd9e4b0a7574ea717db"}, {"code": "#(reduce (fn [xs x] (if (= (last xs) x) xs (conj xs x))) [(first %)] (rest %))", "problem": 30, "user": "4f51e8a4e4b03ad3f0c10d2d"}, {"code": "#(map last (partition-by max %))", "problem": 30, "user": "4f554416e4b0a7574ea717f9"}, {"code": "(fn compress [s]\n  (let [[f & r] s]\n  (cond\n    (empty? s) '()\n    (= f (first r)) (compress r)\n    :else (cons f (compress r)))))", "problem": 30, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "(fn [s]\n  (map first (partition-by identity s))\n  )", "problem": 30, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn compress-sequence [[x & l]]\n  (cond\n    (empty? l) (list x)\n    (= x (first l)) (compress-sequence l)\n    :default (cons x (compress-sequence l))))", "problem": 30, "user": "4eca2cea535d6d7199dd3702"}, {"code": "(fn compseq [s]\n  (if (< (count s) 2) (list (first s))\n\t\t(if (= (first s) (first (rest s)))\n\t\t\t(compseq (rest s)) (concat (list (first s)) (compseq (rest s))) )))", "problem": 30, "user": "4f566178e4b0a7574ea71820"}, {"code": "(fn [s] (reduce \n  #(if (= (last %1) %2)\n    %1\n    (conj %1 %2)) [] s))", "problem": 30, "user": "4f5694cae4b0a7574ea71827"}, {"code": "(fn compress [s] \n  (let [[x & xs] s]\n    (cond (empty? xs) (list x)\n          (= x (first xs)) (compress xs)\n          true (conj (compress xs) x))))", "problem": 30, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "(fn [coll] (reduce (fn [l x] (if (= x (last l)) l (conj l x))) [] coll))", "problem": 30, "user": "4f4e6d21e4b03ad3f0c10cc5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f3c0734e4b0e243712b1f3c"}, {"code": "(fn [q]\n  (mapcat\n    #(let [[a b] %] (if (not= a b) [a] []))\n    (partition-all 2 1 (seq q))\n  )\n)", "problem": 30, "user": "4e8b1fa2535d65386fec2118"}, {"code": "(fn [item] (let [[a b] [(vec item) (conj (vec (rest item)) nil)] answer (map #(if (not= %1 %2) %1) a b)] (sequence (keep #(if-not (nil? %) %)answer))))", "problem": 30, "user": "4f13573a535d64f60314642e"}, {"code": "(fn foo [x] \n(  \n  if (not= (first x) nil) (\n\t\tif (= (first x) (second x)) \n\t\t\t(foo (rest x))  \n\t\t\t( cons (first x) (foo (rest x))))  \n\t)  )", "problem": 30, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "#(map first (map distinct (partition-by identity %)))", "problem": 30, "user": "4f580a9fe4b0a7574ea71844"}, {"code": "#(map last (partition-by list %))", "problem": 30, "user": "4f528bcde4b03ad3f0c10d3e"}, {"code": "#(reduce (fn[coll y](if (= (last coll) y)\r\n                       (identity coll)\r\n                       (conj coll y))) [] %)", "problem": 30, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn cmprs [coll]\r\n  (when-let [[f & r] (seq coll)] \r\n    (if (= f (first r)) \r\n      (cmprs r) \r\n      (cons f (cmprs r)))))", "problem": 30, "user": "4f54e6f8e4b0a7574ea717ef"}, {"code": "(fn\n  [s]\n  (map first (partition-by identity s)))", "problem": 30, "user": "4f29afc7e4b0d6649770a02e"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn cmprs [coll]\r\n  (when-let [[f & r] (seq coll)] \r\n    (if (= f (first r)) \r\n      (cmprs r) \r\n      (cons f (cmprs r)))))", "problem": 30, "user": "4f50be5de4b03ad3f0c10d0c"}, {"code": "(fn comp-seq [n]\r\n  (map first (partition-by identity n)))", "problem": 30, "user": "4f500769e4b03ad3f0c10cf8"}, {"code": "(fn cmprs [coll]\r\n  (when-let [[f & r] (seq coll)] \r\n    (if (= f (first r)) \r\n      (cmprs r) \r\n      (cons f (cmprs r)))))", "problem": 30, "user": "4f4feb95e4b03ad3f0c10cf0"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r](seq coll)]\n    (if (= f (first r))\n    (cmprs r)\n    (cons f (cmprs r)))))", "problem": 30, "user": "4f4be1cae4b03ad3f0c10c81"}, {"code": "#(loop [[h & t] % acc [h] c h]\n    (let [new-acc (if (= c h) acc (cons h acc))]\n      (if (empty? t)\n        (reverse new-acc)\n        (recur t new-acc h))))", "problem": 30, "user": "4f58de86e4b0a7574ea7185b"}, {"code": "(fn [coll]  (let [shifted-coll (cons nil coll)] (remove nil? (map (fn [x y] (if (not= x y) x)) coll shifted-coll)))   )", "problem": 30, "user": "4f5612f9e4b0a7574ea71812"}, {"code": "(fn [s]\n  (let [s (seq s)]\n    (reduce\n      (fn [t s]\n        (if\n          (= (peek t) s)\n          t\n          (conj t s)))\n      [(first s)]\n      (rest s))))", "problem": 30, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn compress [in]\n  (loop [compressed [] input (vec in)]\n    (if (empty? input)\n      compressed\n      (recur\n        (if (= (last compressed) (first input))\n          compressed\n          (conj compressed (first input))\n        )\n        (next input)\n      )\n    )\n  )\n)", "problem": 30, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "(fn pcompress [x]\n                   (cond\n                    (empty? x) x\n                    (= (first x) (first (rest x)))\n                       (pcompress (rest x))\n                     :else (conj (pcompress (rest x)) (first x))))", "problem": 30, "user": "4f524d11e4b03ad3f0c10d34"}, {"code": "#(letfn [(_flatten_ [coll fcoll pre-item]\n                    (if (empty? coll)\n                      fcoll\n                      (let [item (first coll)]\n                        (recur (rest coll)\n                               (if (= item pre-item)\n                                 fcoll\n                                 (concat fcoll (list item)))\n                               item))))]\n        (_flatten_ % '() nil))", "problem": 30, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "#(reduce (fn [x,y] (if (= (first x) y) x (conj x y))) '() ( reverse %) )", "problem": 30, "user": "4f54ecf1e4b0a7574ea717f0"}, {"code": "(fn uniq[coll]\r\n    (cond\r\n\t    (empty? coll) nil\r\n\t    (empty? (rest coll)) coll\r\n\t    (= (first coll) (second coll)) (uniq (rest coll))\r\n\t    :else\r\n\t         (cons (first coll) (uniq (rest coll)))))", "problem": 30, "user": "4e53bf5e535d8a8b8723a275"}, {"code": "(fn [s]\n  (loop [v [] last nil todo s]\n    (if (empty? todo) v\n      (let [x (first todo) xs (rest todo)]\n        (recur (if (= x last) v (conj v x)) x xs)))))", "problem": 30, "user": "4f5eda39e4b0030a34fb2b56"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))\n\n;(fn [x]\n;  (loop [coll x result ()]\n;    (if (empty? coll)\n;      result\n;    (recur(rest coll)(cons result (first coll))", "problem": 30, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "(fn rcd [s & lastelt]\n  (cond\n    (empty? s) s\n    (empty? lastelt) (let [fe (first s)]\n                        (concat [fe] (rcd (rest s) fe)))\n    :else\n      (let [[le] lastelt\n            fe (first s)]\n        (if (= le fe) (rcd (rest s) fe)\n          (concat [fe] (rcd (rest s) fe))))))", "problem": 30, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "#(loop [in (seq %) out []]\n   (if (seq in)\n    (if (and (second in) (= (first in) (second in)))\n        (recur (rest in) out)\n        (recur (rest in) (conj out (first in))))\n    out))", "problem": 30, "user": "4f504739e4b03ad3f0c10d00"}, {"code": "(fn [s]\n  (loop [prev nil acc () coll s]\n    (if (seq coll)\n      (if (= (first coll) prev)\n        (recur (first coll) acc (rest coll))\n        (recur (first coll) (cons (first coll) acc) (rest coll)))\n      (reverse acc))))", "problem": 30, "user": "4f604bdee4b0defedf855fa7"}, {"code": "(fn [s]\n  (loop [l nil e (first s) ss (rest s) out []]\n    (if (empty? ss)\n      (if (= l e) out (conj out e))\n      (recur e (first ss) (rest ss) (if (= l e) out (conj out e))))))", "problem": 30, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn foo\n  ([x]\n    (if (< (count x) 2)\n      x\n      (if (= (first x) (second x))\n        (foo(cons (first x) (rest(rest x))))\n        (cons (first x) (foo(rest x)))\n      )\n    )\n  )\n)", "problem": 30, "user": "4f611e0ee4b0defedf855fb8"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "4f6010e7e4b0defedf855fa1"}, {"code": "(fn [ys]\n  (let [ remdup (fn [xxs acc]\n    (let [x (first xxs)\n          xs (rest xxs)]\n  (if (empty? xxs) acc\n    (recur (drop-while #(= x %) xs) (concat acc (list x))))))]\n  (remdup ys '())))", "problem": 30, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "#(map first \n  (filter \n    (fn [[a b]] (not= a b)) \n    (partition-all 2 1 %)))", "problem": 30, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn [xs]\n  (loop [xxs xs acc nil]\n        (if (empty? xxs)\n          (reverse acc)\n          (let [c (first xxs) l (first acc)]\n            (if (= c l)\n              (recur (rest xxs) acc)\n              (recur (rest xxs) (conj acc c)))))))", "problem": 30, "user": "4f5155a3e4b03ad3f0c10d1b"}, {"code": "(fn [xs] (reverse (first (reduce \n  (fn [[acc lastItm] cur] (if (= cur lastItm) [acc cur] [(cons cur acc) cur])) [[] nil] (seq xs)))))", "problem": 30, "user": "4e7f5a0b535db966e863cc41"}, {"code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] (seq %))", "problem": 30, "user": "4f565bebe4b0a7574ea7181e"}, {"code": "(fn fn30 [s]\n  (when (seq s)\n    (if (= (first s) (first (rest s)))\n      (fn30 (rest s))\n      (cons (first s) (fn30 (rest s))))))", "problem": 30, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "#(loop [s % acc []]\n  (if (or (nil? s) (empty? s))\n    acc\n    (recur\n      (rest s)\n      (if (not= (first s) (last acc))\n        (conj acc (first s))\n        acc))))", "problem": 30, "user": "4f5d5d59e4b0030a34fb2b39"}, {"code": "(fn remd [s]\n  (if (< (count s) 2)\n    s \n    (let [fst (first s) \n          sec (second s)]\n      (if (= fst sec)\n          (remd (rest s))\n          (concat (conj () fst) (remd (rest s)))))))", "problem": 30, "user": "4f611127e4b0defedf855fb4"}, {"code": "(fn compr [x]\n  (cond\n    (empty? x) '()\n    (= (first x) (second x)) (compr (rest x))\n    :else (cons (first x) (compr (rest x)))))", "problem": 30, "user": "4f04256d535dcb61093f6ba7"}, {"code": "(fn c [s] (if (empty? (rest s)) s (if (= (first s) (first (rest s))) (c (rest s)) (cons (first s) (c (rest s))))))", "problem": 30, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn removedupe [ss]\n  (loop [f (first ss) r (rest ss) ret '()]\n    (if (nil? f)\n      ret\n      (if (= f (first r))\n        (recur (first r) (rest r) ret)\n        (recur (first r) (rest r) (concat ret (list f)))))))", "problem": 30, "user": "4f03fb59535dcb61093f6b89"}, {"code": "(fn compress [s]\r\n  (loop [inp s acc []]\r\n    (let [cursor (first inp)\r\n          target (last acc)]\r\n      (println \"Cursor: \" cursor \", Target: \" target \", Equal?: \" (= cursor target))\r\n      (if (empty? inp)\r\n        acc\r\n        (recur (rest inp) (if (= cursor target) acc (conj acc cursor)))))))", "problem": 30, "user": "4f629697e4b0defedf855fd6"}, {"code": "(fn [x]\n  (map first (partition-by identity x))\n)", "problem": 30, "user": "4f63777be4b0defedf855fe4"}, {"code": "(fn dupman [coll]\n  (let [dfn (fn ifn [c seen]   \n    (lazy-seq\n      (letfn [(indup [col s]\n        (if (empty? col)\n          '() \n          (if (=(first col) s)\n            (recur (rest col) s)     \n            (cons (first col) (ifn (rest col) (first col))))))]\n        (indup c seen))))]                       \n   (dfn coll nil)))", "problem": 30, "user": "4f61be97e4b0defedf855fc5"}, {"code": "(fn\n  [s]\n    (loop [result [] s s]\n      (if (empty? s)\n        result\n        (let [c (first s)]\n          (if (not= (last result) c)\n            (recur (concat result [c]) (rest s))\n            (recur result (rest s)))))))", "problem": 30, "user": "4e6ac7a8535d8ccf87e9ff03"}, {"code": "(fn [x]\n  (cons (first x)\n        (for [y (partition 2 1 x)\n              :when (not= (first y) (second y))]\n         (second y))))", "problem": 30, "user": "4f65eec7e4b07046d9f4ef48"}, {"code": "(fn compress [arg]\n  (if (empty? (rest arg))\n    arg\n    (if (= (first arg) (second arg))\n      (recur (rest arg))\n      (cons (first arg) (compress (rest arg))))))", "problem": 30, "user": "4f652432e4b07046d9f4ef3d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f651f66e4b07046d9f4ef3c"}, {"code": "(fn [seq]\n  ((fn uniq [left right]\n    (cond\n      (= right [])\n        left\n      (= (last left) (first right))\n        (recur left (rest right))\n      true\n        (recur (concat left [(first right)])\n          (rest right))))\n   [] seq))", "problem": 30, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) '[]", "problem": 30, "user": "4f547d2ce4b0a7574ea717e3"}, {"code": "(fn f ([x] (f [(first x)] (rest x) (first x)))\n  ([out continuing last]\n\t\t(if (empty? continuing)\n\t\t\tout\n\t\t\t(let [current (first continuing)\n\t\t\t\t\t\tnext_continuing (rest continuing)]\n\t\t\t\t(if (= current last)\n\t\t\t\t\t(recur out next_continuing last)\n\t\t\t\t\t(recur (concat out [current]) next_continuing current))))))", "problem": 30, "user": "4f442cdfe4b0d7d3c9f3fd34"}, {"code": "(fn [coll]\n  (for [i (range (count coll))\n        :when (or (= i 0) (not= (nth coll i) (nth coll (dec i))))]\n       (nth coll i)))", "problem": 30, "user": "4f043bbd535dcb61093f6bb2"}, {"code": ";;copied\n(fn dedupstr2 [s]\n(reduce\n(fn dedup-reduce [seq_or_n1 n2]\n(let [lastn1\n(if (seq? seq_or_n1)\n(last seq_or_n1)\nseq_or_n1\n), seq1 (if (seq? seq_or_n1) seq_or_n1 (seq [seq_or_n1])) ]\n(if (= n2 lastn1)\nseq1\n(concat seq1 (seq [n2])))\n))\ns\n)\n)", "problem": 30, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn [c]\r\n  (map first\r\n    (filter #(not= (first %) (second %))\r\n      (partition 2 1 (repeat nil) c))))", "problem": 30, "user": "4f6a36eee4b07046d9f4ef99"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "(fn [l]\n  (loop [l l prev nil acc []]\n    (if (empty? l)\n      acc\n      (if (= prev (first l))\n        (recur (rest l) prev acc)\n        (recur (rest l) (first l) (conj acc (first l)))))))", "problem": 30, "user": "4e568873535d8a8b8723a283"}, {"code": "#(loop [d nil p nil s %]\n  (cond\n    (empty? s) (reverse d)\n    (and p (= p (first s))) (recur d p (rest s))\n    :else (recur (conj d (first s)) (first s) (rest s))))", "problem": 30, "user": "4f6688d6e4b07046d9f4ef5d"}, {"code": "#(map last (partition-by identity %))", "problem": 30, "user": "4f4e147ae4b03ad3f0c10cb9"}, {"code": "#(mapcat distinct (partition-by identity %))", "problem": 30, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "#(loop [x '() y %1]\r\n   (if (empty? y)\r\n     (reverse x)\r\n     (recur (if\r\n              (= (first x) (first y))\r\n              x\r\n              (conj x (first y)))\r\n       (rest y))\r\n     )\r\n   )", "problem": 30, "user": "4ddc56e1535d02782fcbea04"}, {"code": "(fn dup ([input] (dup (seq input) (list)))\n                                ([input out]\n                                 (if (seq input)\n                                     (do (prn input out)\n                                     (if (= (first input) (first out))\n                                         (recur (rest input) out)\n                                         (recur (rest input) (conj out (first input)))))\n                                     (reverse out))))", "problem": 30, "user": "4f608f0ee4b0defedf855faa"}, {"code": "#(reduce (fn [coll elem] (if (= (last coll) elem) coll (conj coll elem))) [] %)", "problem": 30, "user": "4f4daa4ae4b03ad3f0c10cac"}, {"code": "(fn [col]\n  (reverse\n  (reduce \n    #(if (= (first %1) %2)\n        %1\n        (cons %2 %1)\n      )\n    '()\n    col\n   )\n  )\n)", "problem": 30, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn [s](reverse (reduce \r\n  #(if-not \r\n     (= (first %1) %2) \r\n     (cons %2 %1) %1) \r\n  [] \r\n  s)))", "problem": 30, "user": "4ef2da4f535dced4c769f224"}, {"code": "#(map last (partition-by list %))", "problem": 30, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn [the-list]\n   (loop [str the-list\n          current nil\n          result nil]\n     (cond\n       (empty? str)\n       result\n       (= current (first str))\n       (recur (rest str) current result)\n       :else\n       (recur (rest str)\n              (first str)\n              (concat result (list (first str)))))))", "problem": 30, "user": "4f62ef0ce4b0defedf855fdc"}, {"code": "(fn [coll]\r\n  (reduce \r\n    (fn [a b]\r\n      (if (not= (last a) b)\r\n        (conj a b)\r\n        a))\r\n    []\r\n    coll))", "problem": 30, "user": "4f70183ee4b07046d9f4eff3"}, {"code": "(partial (fn compress [p [h & t]] (if h (if (= p h)\n                                 (compress p t)\n                                 (cons h (compress h t))\n))) nil)", "problem": 30, "user": "4f706cc3e4b07046d9f4eff7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f4e978ae4b03ad3f0c10ccb"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "#(if (string? %) (apply str (flatten (mapcat distinct (partition-by identity %))))   (mapcat distinct (partition-by identity %)))", "problem": 30, "user": "4f6a2ff2e4b07046d9f4ef98"}, {"code": "(fn [seq]\n  (loop [in seq, out '()]\n    (cond\n      (empty? in) out\n      (= (first in) (last out)) (recur (rest in) out)\n      :else (recur (rest in) (concat out (list (first in)))))))", "problem": 30, "user": "4f70afb8e4b07046d9f4effb"}, {"code": "(fn [seqx]\n  (reduce #(if \n       (= (last %1) %2) %1 (conj %1 %2))  []\n        (seq seqx)))", "problem": 30, "user": "4f617f66e4b0defedf855fc0"}, {"code": ";(fn [seqx]\n;  (letfn [(the-fun [dup seqs]\n;            (when (seq seqs)\n;              (if (= dup (first seqs))\n;                (recur dup (rest seqs))\n;                (conj (the-fun (first seqs) \n;                               (rest seqs))\n;                      (first seqs)))))]\n;    (the-fun '() seqx)))\n\n(fn [seqx]\n  (reduce \n    #(if (= (peek %1) %2) \n        %1 \n        (conj %1 %2))\n    [] \n    seqx))", "problem": 30, "user": "4dc0f7ff535d020aff1edf82"}, {"code": "(fn remove-conseq [sq]\r\n  (reverse (reduce (fn [coll x]\r\n                     (if (empty? coll)\r\n                       [x]\r\n                       (if (= (first coll) x)\r\n                         coll\r\n                         (cons x coll))))\r\n                   []\r\n                   sq)))", "problem": 30, "user": "4f71db68e4b07046d9f4f015"}, {"code": "#(letfn [\n  (compress [coll]\n    (if (> (count coll) 1)\n        (let [[f s] coll [_ & more] coll]\n          (if (= f s)\n              (compress more)\n              (cons f (compress more))))\n        coll\n    \n    ))]\n  (compress %)\n)", "problem": 30, "user": "4f726aaae4b07046d9f4f032"}, {"code": "(fn [xs] (->> xs (reduce (fn [col e] (if (= (first col) e) col (conj col e))) '()) (reverse)))", "problem": 30, "user": "4f724e56e4b07046d9f4f027"}, {"code": "#(map last (partition-by str %))", "problem": 30, "user": "4eb298c1535d7eef3080734b"}, {"code": "(partial reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [])", "problem": 30, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "(fn no-dups [coll]\n  (let [f (first coll) n (second coll)]\n    (cond\n      (empty? coll) ()\n      (= f n) (no-dups (rest coll))\n      :else (cons f (no-dups (rest coll))))))", "problem": 30, "user": "4f726dd2e4b07046d9f4f034"}, {"code": "(fn [xs] (map first (partition-by identity xs)))", "problem": 30, "user": "4f734e93e4b07046d9f4f043"}, {"code": "(fn [l] (reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) '() l)))", "problem": 30, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "(fn z [xs]\n  (let [[f & r] xs]\n    (if (empty? r)\n\t    xs\n\t    (if (= f (first r))\n\t      (z r)\n\t      (cons f (z r))))))", "problem": 30, "user": "4f725201e4b07046d9f4f02f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f71ba6ee4b07046d9f4f012"}, {"code": "(fn [s] (reduce #(if (= %2 (last %1)) %1 (concat %1 [%2])) [] s))", "problem": 30, "user": "4f713878e4b07046d9f4f00a"}, {"code": "(fn compr [coll]\r\n    (reverse \r\n        (reduce \r\n            (fn [x y] \r\n                (if (not= (first x) y)\r\n                    (cons y x)\r\n                    x))\r\n            '()\r\n            coll)))", "problem": 30, "user": "4f28eb85e4b0d6649770a01d"}, {"code": "(fn [str]\n  (map #(first %) (partition-by identity str)))", "problem": 30, "user": "4f74fe77e4b0fbe0118ec552"}, {"code": "#(loop [x (sequence %) y '()]\n  (if (empty? x)\n    y\n    (recur \n      (rest x)\n      (if (= (first x) (last y)) \n        y \n        (concat y [(first x)])\n      )\n    )\n  )\n)", "problem": 30, "user": "4f75f498e4b0fbe0118ec567"}, {"code": "reduce (fn [t v] (if (= (last t) v) t (conj t v))) []", "problem": 30, "user": "4f7207d3e4b07046d9f4f019"}, {"code": "(fn cpress [thing]\n  (reverse (reduce #(if (= (first %1) %2)\n%1\n(cons %2 %1)) nil thing)))", "problem": 30, "user": "4f74fb49e4b0fbe0118ec551"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e89dbce535d3e98b8023283"}, {"code": "(fn [s]\n  (reduce\n    #(if (= (last %1) %2) %1 (concat %1 (list %2)))\n    '()\n    s))", "problem": 30, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [xs]\n  (reduce #(if (= (peek %1) %2) %1 (conj %1 %2)) [] xs))", "problem": 30, "user": "4f2a7174e4b0d6649770a03e"}, {"code": "(fn[x] (->> x (partition-by identity) (map first)))", "problem": 30, "user": "4f7b6f12e4b06e829148e1a5"}, {"code": "(fn [s] (reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] s))", "problem": 30, "user": "4f7e07f4e4b06e829148e1c9"}, {"code": "(fn [l]\n  (loop [[f & args :as my-l] l \n         r '()\n         last-of-r nil]\n    (if (empty? my-l)\n      r\n      (if (not= f last-of-r)\n        (recur args (concat r (list f)) f)\n        (recur args r last-of-r)))))", "problem": 30, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f7d5328e4b06e829148e1bf"}, {"code": "(fn compress\n  ([s] (compress s nil))\n  ([[x & xs] prev] (concat\n                     (if (= x prev)\n                         '()\n                         (list x))\n                     (if (nil? xs)\n                         '()\n                         (compress xs x)))))", "problem": 30, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "(fn [s]\n  (keep-indexed #(if (not= %2 (nth s (inc %1) nil)) %2) s \n  )\n)", "problem": 30, "user": "4f70bcf9e4b07046d9f4effe"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "(fn [problem]\n  (cons (first problem)\n    (map #(second %)\n      (filter (complement (fn [x] (= (first x) (second x))))\n        (partition 2 1 problem)))))", "problem": 30, "user": "4f4a17ffe4b0d56e7bb92c05"}, {"code": "(fn [coll]\n  (cons (first coll)\n    (for [[a b] (map vector coll (rest coll))\n          :when (not= a b)]\n      b)))", "problem": 30, "user": "4e1047ad535d04ed9115e7bf"}, {"code": "(fn a [lst]\n  (if (empty? lst)\n      nil\n      (if (empty? (rest lst))\n          lst\n          (if (= (first lst) (second lst))\n              (recur (cons (first lst) (rest (rest lst))))\n              (cons (first lst) (a (rest lst)))))))", "problem": 30, "user": "4f7fc9a1e4b033992c121bee"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4f7d91e6e4b06e829148e1c3"}, {"code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "problem": 30, "user": "4f461e57e4b0d56e7bb92b92"}, {"code": "(fn compress [sq]\r\n     (loop [s (seq sq)\r\n            acc []]\r\n       (if (empty? s)\r\n         acc\r\n         (if (= (first s) (last acc))\r\n           (recur (rest s) acc)\r\n           (recur (rest s) (conj acc (first s)))))))", "problem": 30, "user": "4f82e14be4b033992c121c0c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f8345c6e4b033992c121c1b"}, {"code": "#(map last (partition-by str %))", "problem": 30, "user": "4f83ee95e4b033992c121c26"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4f83e712e4b033992c121c25"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4f82f1b9e4b033992c121c0f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f8592e6e4b033992c121c47"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f85b7b5e4b033992c121c49"}, {"code": "(fn [x] \n  (map (fn [x] (first x)) (partition-by identity x))\n)", "problem": 30, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "reduce\n(fn [l c]\n  (if (empty? l)\n    (list c)\n    (if (= (last l) c)\n      l\n      (concat l (list c))\n    )\n  )\n)\n'()", "problem": 30, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn [x] (conj\n          (map second (filter \n                        #(not= (first %) (second %)) \n                        (partition 2 1 x)))\n          (first x)) )", "problem": 30, "user": "4f7c2ac4e4b06e829148e1ad"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "(fn [coll]\r\n  (loop [f (first coll)\r\n         n (second coll)\r\n         r (rest coll)\r\n       result []]\r\n     (if (nil? f)\r\n\t   result\r\n\t   (recur (first r) (second r) (rest r) (if (not= f n) (conj result f) result)))))", "problem": 30, "user": "4f60ed88e4b0defedf855fb2"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f85ef29e4b033992c121c4d"}, {"code": "(fn redup\n  [s]\n  (let [fs (first s)\n        rs (rest s)]\n    (if (empty? rs)\n      s\n      (if (= fs (first rs))\n        (redup rs)\n        (cons fs (redup rs))))))", "problem": 30, "user": "4f7b3d53e4b06e829148e1a0"}, {"code": "(fn [x]\n  (map first (partition-by identity x)))", "problem": 30, "user": "4f7ab8c7e4b06e829148e19c"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4ed2b337535d44c135fd68de"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "4f8939ace4b033992c121c79"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4f83665ee4b033992c121c1c"}, {"code": "#(->>\n  %\n  (partition-by identity)\n  (map distinct)\n  (apply concat))", "problem": 30, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn [input]\n  (map first (partition-by identity input)))", "problem": 30, "user": "4f7c4eb7e4b06e829148e1af"}, {"code": "(fn compress [s]\n  ((fn _compress [s l]\n    (cond\n      (empty? s) nil\n      (= (first s) l) (_compress (rest s) l)\n      :else (cons (first s) (_compress (rest s) (first s)))\n    )\n  ) s nil)\n)", "problem": 30, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "reduce (fn [coll x] \n          (if (= (last coll) x) coll (conj coll x))) []", "problem": 30, "user": "4ecdf94a535d23f03622770b"}, {"code": "reduce (fn [xs y] (if (= y (last xs)) xs (conj xs y))) []", "problem": 30, "user": "4f8c3697e4b02e764a0a518d"}, {"code": "(fn foo \n  ([x] (if (empty? x) '() (cons (first x) (foo (rest x) (first x)))))\n  ([x c] (if (empty? x) '()\n         (if (= (first x) c) (foo (rest x) c)\n                             (cons (first x) (foo (rest x) (first x)))))))", "problem": 30, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "(fn [s]\r\n  (loop [sq s\r\n         result nil]\r\n         (if (empty? sq)\r\n            (reverse result)\r\n            (if (= (first sq) (first result))\r\n              (recur (rest sq) result)\r\n              (recur (rest sq) (conj result (first sq)))))))", "problem": 30, "user": "4f8aa1c1e4b02e764a0a516e"}, {"code": "(fn [c] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) '[] c))", "problem": 30, "user": "4f8ab084e4b02e764a0a5171"}, {"code": "(fn s[x] \n  (let [xx (partition-by identity x)]\n    (loop [xxx xx\n           se ()]\n       (do (println xxx se)\n       (if (empty? xxx) \n              se\n             (recur \n                 (rest xxx) \n                 (concat se (vector (ffirst xxx)))))))))", "problem": 30, "user": "4f891abde4b033992c121c77"}, {"code": "#((fn dd [s l]\n  (if (empty? s)\n    '()\n    (if (= (first s) l)\n      (dd (rest s) l)\n      (conj\n        (dd (rest s) (first s))\n        (first s)))))\n% nil)", "problem": 30, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": "(fn f [sq]\r\n    (if (empty? sq)\r\n      sq\r\n      (let [fst (first sq)]\r\n        (cons fst (f (drop-while #(= fst %) (rest sq)))))\r\n      ))", "problem": 30, "user": "4f0da4e4535d0136e6c22319"}, {"code": "#(reverse (reduce (fn [a b] (if (= (first a) b) a (conj a b))) (take 1 %) (rest %)))", "problem": 30, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "#(reverse \n  (reduce\n    (fn [n m]\n      (if (= m (first n))\n          n\n          (conj n m)\n      )\n    )\n    '()\n    %\n  )\n)", "problem": 30, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "(fn [l]\n  (reverse\n    (reduce\n      #(if (= (first %1) %2)\n        %1\n        (conj %1 %2))\n      ()\n      (seq l))))", "problem": 30, "user": "4f90e238e4b0dcca54ed6c94"}, {"code": "(comp reverse (partial reduce #(if (not= (first %1) %2) (conj %1 %2) %1) '()))", "problem": 30, "user": "4f91a38ae4b0dcca54ed6c9f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f92709de4b0dcca54ed6cad"}, {"code": "#(reduce \n     (fn [r f] \n       (if (= (first r) f) \n         r \n         (cons f r))) \n     '() \n     (reverse %))", "problem": 30, "user": "4f6511eee4b07046d9f4ef3a"}, {"code": "(fn compress\n  ([s] (compress (seq s) nil))\n  ([s l]\n    (when (not-empty s)\n      (if (= (first s) l)\n          (compress (rest s) l)\n          (cons (first s) (compress (rest s) (first s)))))))", "problem": 30, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "#(map last (partition-by list %))", "problem": 30, "user": "4f727023e4b07046d9f4f035"}, {"code": "(fn [s] (map first (partition-by str s)))", "problem": 30, "user": "4e86d3cf535dceadca46984c"}, {"code": "(fn [s] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "4ec6c878535d6d7199dd36d5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f890488e4b033992c121c76"}, {"code": "#(reduce (fn [x y]\n           (if (= (last x) y)\n             x\n             (conj x y)))\n         [(first %)]\n         %)", "problem": 30, "user": "4dc21233535d020aff1edf92"}, {"code": "reduce (fn foo [x y] (if (= y (last x)) x (conj x y))) []", "problem": 30, "user": "4f8ac2bde4b02e764a0a5172"}, {"code": "reduce                                                                         \n              (fn [x y]                                                               \n                  (if (or (empty? x) (not (= y (last x))))                            \n                      (conj x y) x                                                    \n                      )) '[]", "problem": 30, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn [inp] \n  (loop [prev (first inp), rslt [(first inp)], lst (rest inp)]\n  (if (seq lst)\n      (if (= (first lst) prev)\n          (recur prev rslt (rest lst))\n          (recur (first lst) (conj rslt (first lst)) (rest lst)))\n      (seq rslt))))", "problem": 30, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "(comp (partial map first)\n      (partial partition-by identity))", "problem": 30, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn [coll]\r\n  (reduce\r\n    (fn [s x] (if (= x (peek s)) s (conj s x)))\r\n    [] \r\n    coll))", "problem": 30, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "#(reduce (fn [acc e] (if (= e (last acc)) acc (conj acc e))) [] %1)", "problem": 30, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(fn blah [x] \n  (if (empty? x) '()\n    (if (= (first x) (second x)) (blah (rest x)) \n      (cons (first x) (blah (rest x))))))", "problem": 30, "user": "4f17aa97535d64f603146456"}, {"code": "#(map last (partition-by identity %))", "problem": 30, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [coll] (map first (partition-by identity coll)))", "problem": 30, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4f9b426be4b0dcca54ed6d14"}, {"code": "(fn [v2] (map first\n  (filter (fn [[a b]] (not (= a b)))\n  (map vector v2 (cons nil v2)))))", "problem": 30, "user": "4f9b5a1ce4b0dcca54ed6d16"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "4dadaa5cc9a9d6ed2f99dc57"}, {"code": "#(loop [[x & more] % , acc []]\r\n  (if (nil? x) acc\r\n      (recur more (if (= (last acc) x) acc (conj acc x)))))", "problem": 30, "user": "4e897fc5535de4250bdfe493"}, {"code": "#(loop [acc '()\n        left %]\n        (if (empty? left)\n          (reverse acc)\n          (if (= (first acc) (first left))\n            (recur acc (rest left))\n            (recur (cons (first left) acc) (rest left)))))", "problem": 30, "user": "4f9b3532e4b0dcca54ed6d13"}, {"code": "(fn f [c]\n     (when (seq c)\n       (let [h (first c) t (rest c)]\n       (if (= h (first t))\n            (f t)\n            (cons h (f t))))))", "problem": 30, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "reduce (fn [acc i]\n  (if (= (last acc) i)\n  acc\n  (conj acc i)))\n[]", "problem": 30, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "4f97d8f3e4b0dcca54ed6ced"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [xs]\n  (map first (partition-by identity xs)))", "problem": 30, "user": "4f9c7b0fe4b0dcca54ed6d1c"}, {"code": "(fn [coll] (reduce #(if (= (last %1) %2)\n                                %1\n                                (concat %1 (list %2))) '() coll))", "problem": 30, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f9aa2a6e4b0dcca54ed6d0c"}, {"code": "#(map last (partition-by list %))", "problem": 30, "user": "4f9d87fce4b0dcca54ed6d24"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn remove-consec-dupes \r\n([s] (remove-consec-dupes s nil nil (string? s)))\r\n([s r prev is-string] (cond (empty? s) (let [x (reverse r)]\r\n  \t\t\t\t (if (true? is-string) \r\n\t\t\t\t\t   (apply str x) \r\n\t\t\t\t\t x))\r\n\t\t\t    :default (let [curr (first s)]\r\n\t\t\t\t       (recur (rest s) \r\n\t\t\t\t\t      (if (= curr prev) \r\n\t\t\t\t\t\t  r \r\n\t\t\t\t\t\t(conj r curr)) \r\n\t\t\t\t\t      curr is-string)))))", "problem": 30, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f71347ae4b07046d9f4f009"}, {"code": "#(map last (partition-by identity %))", "problem": 30, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "#(reverse (reduce \n  (fn [s n] \n    (if (not (= (first s) n)) (conj s n) s))\n  ()\n  %))", "problem": 30, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "(fn [s]\n((fn [l r]\n  (cond\n   (not (seq r)) l\n   (= (last l) (first r))\n    (recur l (rest r))\n   true (recur (conj l (first r)) (rest r)))) [] s))", "problem": 30, "user": "4fa1183fe4b0dcca54ed6d57"}, {"code": "#(reverse (reduce  (fn [x y] (if (= (first x) y) x (conj x y)))    '() %))", "problem": 30, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn [s]\r\n  (loop [s s r [] p nil]\r\n    (let [n (next s) f (first s)]\r\n      (if f\r\n        (if (= p f)\r\n          (recur n r p)\r\n          (recur n (conj r f) f))\r\n        r)\r\n      )\r\n    ))", "problem": 30, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "(comp (partial map first)\n      (partial partition-by identity))", "problem": 30, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(fn [coll]\n  (map #(first %) (partition-by identity coll)))", "problem": 30, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4fa11204e4b0dcca54ed6d56"}, {"code": "(fn [lst]\n  (reverse\n    (reduce (fn [res x]\n             (if (= x (first res))\n                 res\n                 (conj res x)))\n            '() lst)))", "problem": 30, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "#(reduce (fn [a b] (if (not= (first a) b) (cons b a) a)) [] (reverse %))", "problem": 30, "user": "4f96a5e8e4b0dcca54ed6cdf"}, {"code": "(fn [xs]\r\n  (reduce \r\n    (fn [v x] \r\n      (if (= x (last v)) \r\n        v \r\n        (conj v x))) \r\n    [] \r\n    xs))", "problem": 30, "user": "4f8db862e4b02e764a0a51b2"}, {"code": "(fn compress [coll]\n  (apply list\n         (reduce\n          #(if (not= (last %1) %2)\n             (conj %1 %2)\n             %1)\n          [] coll)))", "problem": 30, "user": "4fa17b00e4b0dcca54ed6d5f"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4fa39b3ee4b081705acca191"}, {"code": "(fn [coll]\n    (loop [coll coll\n           acc []]\n      (if (empty? coll)\n        acc\n        (let [fst (first coll)]\n          (if (= fst (peek acc))\n            (recur (next coll) acc)\n            (recur (next coll) (conj acc fst)))))))", "problem": 30, "user": "4fa2fa5ee4b081705acca186"}, {"code": "(fn [[x & xs]]\n          (loop [acc [x]\n                 l x\n                 [h & r] xs]\n            (if h\n              (recur (if (= l h) acc (conj acc h)) h r)\n              acc)))", "problem": 30, "user": "4e39d763535deb9a81d77f46"}, {"code": "(fn [x] (map #(first %) (partition-by identity x)))", "problem": 30, "user": "4fa0b333e4b0dcca54ed6d50"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(partial reduce (fn [x y]\n  (if (and (not (empty? x))\n           (= (last x) y))\n    x\n    (conj x y)))\n  [])", "problem": 30, "user": "4fa4ef2ee4b081705acca1a9"}, {"code": "#(map last (partition-by str %))", "problem": 30, "user": "4fa30027e4b081705acca187"}, {"code": "(fn [x]\n  (reduce \n    #(if \n      (= %2 (last %1))\n      %1\n      (concat %1 (list %2)))\n    (list (first x)) (rest x)))", "problem": 30, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn [sq]\n(reverse (reduce (fn [acc nxt]\n          (prn acc nxt)\n          (if (= (first acc) nxt)\n            acc\n            (conj acc nxt)))\n        '()\n        sq\n        )))", "problem": 30, "user": "4fa3f91fe4b081705acca196"}, {"code": "#(loop [p nil s % r []]\n  (cond (empty? s) r\n        (= (first s) p) (recur (first s) (rest s) r)\n        :else (recur (first s) (rest s) (conj r (first s)))))", "problem": 30, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn [n]\n   (->>\n    (map list (concat [nil] (seq n)) (seq n))\n    (filter (partial apply not=))\n    (map second)))", "problem": 30, "user": "4fa5ddfde4b081705acca1b1"}, {"code": "#(map first (partition-by str %))", "problem": 30, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn [s]\n  (let [shifted-coll (cons nil s)]\n    (remove nil? (map (fn [x y] (if (not= x y) x)) s shifted-coll))))", "problem": 30, "user": "4fa659f3e4b081705acca1b6"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fa58500e4b081705acca1ae"}, {"code": "(fn [s]\n        (->> (partition 2 1 [0] s)\n             (remove #(= (first %) (last %)))\n             (map first)))", "problem": 30, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "#(loop [xs % acc []]\n   (let [tail (next xs)\n         x (first xs)\n         y (first tail)]\n     (cond (empty? xs) ()\n           (empty? tail) (conj acc x)\n           (= x y) (recur tail acc)\n           true (recur tail (conj acc x)))))", "problem": 30, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn [xs] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] xs))", "problem": 30, "user": "4f9acea6e4b0dcca54ed6d10"}, {"code": "#(map second (filter (fn [[a b]] (not= a b)) (partition 2 1 (cons nil %))))", "problem": 30, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn [items] \n  (map #(first %) (partition-by identity items)))", "problem": 30, "user": "4f5595d4e4b0a7574ea71805"}, {"code": ";reduce (fn [col x] \n;  (if (= (last col) x) \n;    col (conj col x))) []\n\n(fn [col] (map first \n  (filter #(not= (first %) (last %)) (partition 2 1 [nil] col))))", "problem": 30, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "#(map last (partition-by list %))", "problem": 30, "user": "4fa96e80e4b081705acca1df"}, {"code": "#((fn [xs ys]\n    (if (empty? ys)\n      xs\n      (if (= (first ys) (last xs))\n        (recur xs (rest ys))\n        (recur (concat xs (take 1 ys)) (rest ys))))) '() %)", "problem": 30, "user": "4fa069c3e4b0dcca54ed6d4a"}, {"code": "(fn single [sq]\n  (loop [X sq, result []]\n    (if (empty? X)\n      (seq result)\n      (recur (rest X) (if (= (first X) (last result))\n                        result (conj result (first X)))))))", "problem": 30, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn [x] (map first (partition-by identity x )))", "problem": 30, "user": "4fa99ee1e4b081705acca1e4"}, {"code": "(fn [coll]\n  (loop [result [] curr coll]\n    (if (empty? curr)\n      (seq result)\n      (let [fst (first curr)]\n        (recur (conj result fst) (drop-while #(= % fst) (rest curr)))))))", "problem": 30, "user": "4fa982fae4b081705acca1e0"}, {"code": "reduce \n(fn [lst item]\n(if (= (last lst) item)\nlst\n(conj lst item))) []", "problem": 30, "user": "4fabb1dce4b081705acca21a"}, {"code": "(fn compress [x] (reduce\n        (fn [out curr]\n          (if\n            (not= (first out) curr)\n            (conj out curr)\n            out))\n        '()\n        (reverse x)))", "problem": 30, "user": "4f944f60e4b0dcca54ed6cc2"}, {"code": "(fn sequenceCompressor [item] (loop [x (vec item) y []] (if (empty? x) y \n(recur (vec (rest x)) (if (= (last y) (first x)) y (conj y (first x)))))))", "problem": 30, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "(fn\n [coll]\n  (reduce\n    (fn [a b] (if (= (last a) b) a (conj a b)))\n    []\n    coll))", "problem": 30, "user": "4e6a4541535d8ccf87e9feb8"}, {"code": "(fn [s] (reduce \n  #(if (= %2 (last %1)) %1\n     (concat %1 [%2])) [] s))", "problem": 30, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn remove-duplicates ([xs]\r\n  (loop [xs xs\r\n         last-seen nil\r\n         acc '()]\r\n     (if (empty? xs)\r\n       acc\r\n       (recur (rest xs) (first xs) (if (= last-seen (first xs)) acc (concat acc (list (first xs)))))))))", "problem": 30, "user": "4fad33e8e4b081705acca236"}, {"code": "(fn fl [coll] (if (< (count coll) 2) coll (let [[a b & more] coll] (if (= a b) (fl (cons a more)) (cons a (fl (cons b more)))))))", "problem": 30, "user": "4fac1d77e4b081705acca223"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f8dc9dce4b02e764a0a51b6"}, {"code": "reduce (fn [acc cur] (if (= (last acc) cur) acc (conj acc cur))) []", "problem": 30, "user": "4fad77a6e4b081705acca23a"}, {"code": "(fn removeDups\n     ([s] (removeDups nil '() s))\n     ([prev result s] (if (empty? s)\n                        result\n                        (if (= (first s) prev)\n                          (removeDups (first s) result (rest s))\n                          (removeDups (first s) (concat result [(first s)]) (rest s))))))", "problem": 30, "user": "4faccddae4b081705acca22e"}, {"code": "#(loop [s % r []]\n  (cond (empty? s) r\n        (empty? r) (recur (rest s) (conj r (first s)))\n        :else (recur (rest s) (if (= (last r) (first s))\n                                  r\n                                  (conj r (first s))))))", "problem": 30, "user": "4fae258de4b081705acca246"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4facff22e4b081705acca230"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f9970b3e4b0dcca54ed6cfd"}, {"code": "(fn [col] (conj (map second (filter #(not= (first %) (second %)) (partition 2 1 col))) (first col)))", "problem": 30, "user": "4fab31a8e4b081705acca215"}, {"code": "(fn [s]\n  (reduce \n\t\t#(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn rm-dup\r\n  ([xs] (rm-dup xs []))\r\n  ([xs acc]\r\n    (if (empty? xs)\r\n      acc\r\n      (if (not= (first xs) (last acc))\r\n        (rm-dup (rest xs) (conj acc (first xs)))\r\n        (rm-dup (rest xs) acc))\r\n      )))", "problem": 30, "user": "4faf897be4b081705acca257"}, {"code": "(fn [word] \n  (loop [list (seq word) answer []] \n    (if (> (count list) 0)\n      (do (println list) \n          (if (not= (first list) (second list)) \n              (recur (rest list) (conj answer (first list))) \n              (recur (rest list) answer))) answer)))", "problem": 30, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "#(loop [seq [] in %]\n  (if (= in '())\n  seq\n  (recur (if (= (last seq) (first in))\n          seq\n          (conj seq (first in)))\n        (rest in))))", "problem": 30, "user": "4faec810e4b081705acca24e"}, {"code": "(fn [coll]\n     (reduce (fn [a b]\n               (if (= (last a) b)\n                 a\n                 (conj a b)))\n             [] coll))", "problem": 30, "user": "4f9a7dc0e4b0dcca54ed6d0b"}, {"code": "(fn my-compress [s]\n  (cond\n\t\t(= 1 (count s)) s\n\t\t(= (first s) (second s)) (my-compress (rest s))\n\t\t:else (cons (first s) (my-compress (rest s)))\n\t)\n\n)", "problem": 30, "user": "4faacc04e4b081705acca201"}, {"code": "(fn [x](map first (partition-by identity x)))", "problem": 30, "user": "4fb069b1e4b081705acca266"}, {"code": "(fn [xs]\n  (loop [xxs xs acc []]\n    (let [[x1 x2] xxs]\n      (cond (empty? xxs ) acc\n            (= x1 x2) (recur (rest xxs ) acc)\n            :else (recur (rest xxs) (conj acc x1))))))", "problem": 30, "user": "4fadbc3fe4b081705acca23f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f8386c5e4b033992c121c1d"}, {"code": "(fn [xs] (reverse (loop [result '() x (first xs) tail (rest xs)] \n                    (if (empty? tail) \n                        (conj result x) \n                        (let [h (first tail) t (rest tail)] \n                        (if (= h x) \n                          (recur result x t) \n                          (recur (conj result x) h t)))))))", "problem": 30, "user": "4fa6a491e4b081705acca1bc"}, {"code": "#(reverse (reduce (fn [m i] (if (empty? m)\n                            (list i)\n                            (if (= i (first m))\n                                m\n                                (cons i m))))\n                  '() %))", "problem": 30, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "(fn [x](reduce #(if \n                  (= (last %1) %2)\n                  %1\n                  (conj %1 %2))\n               [] x))\n; #(map last (partition-by max %))\n; max is being used as an identity function,\n; IMHO, this is clearer\n; #(map last (partition-by identity %))", "problem": 30, "user": "4f82ed48e4b033992c121c0e"}, {"code": "(fn uniq [xs]\n    (if (empty? xs)\n        (list)\n        (let [x (first xs) ur (uniq (rest xs))]\n            (if (= x (first ur))\n                ur\n                (cons x ur)))))", "problem": 30, "user": "4fb4099be4b081705acca2a9"}, {"code": "(fn [sq] (reduce\n(fn [v e] (if (= (last v) e) v (conj v e))) [] sq))", "problem": 30, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn [coll] (map first (partition-by identity coll)))", "problem": 30, "user": "4f05ea25535dcb61093f6c02"}, {"code": "reduce \n  #(if (= (last %) %2) % (conj % %2))\n  '[]", "problem": 30, "user": "4fab0c0ae4b081705acca20d"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2))[]", "problem": 30, "user": "4fb3b865e4b081705acca2a2"}, {"code": "(fn remove-consec-dupes [xs]\n  (map first (partition-by identity xs)))", "problem": 30, "user": "4f6bab49e4b07046d9f4efb1"}, {"code": "reduce (fn [coll x] (if (= x (last coll)) coll (conj coll x))) []", "problem": 30, "user": "4fb3fec7e4b081705acca2a7"}, {"code": "(fn dups [x] (reverse (reduce (fn [empty elem]\n                   (if (not (= elem (first empty))) (cons elem empty) empty))\n                 [] x)))", "problem": 30, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn f [s]\n  (if (empty? s) []\n     (let [c (first s)]\n          (cons c (f (drop-while #(= % c) s))))))", "problem": 30, "user": "4e83bb61535db62dc21a62dd"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ebadde5535dfed6da9c6d6b"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4faafccde4b081705acca209"}, {"code": "(fn\n dd\n ([x] (dd (first x) (rest x)))\n ([x y]\n  (if\n   (empty? y)\n   (conj '() x)\n   (concat\n    (if (= x (first y)) '() (conj '() x))\n    (dd (first y) (rest y))))))", "problem": 30, "user": "4fb510b5e4b081705acca2b8"}, {"code": "(fn [x](  reverse (loop [cnt 0 acc []] (if (= cnt (count (partition-by identity x)))             acc\n          (recur (inc cnt) (cons (nth(nth (partition-by identity x) cnt) 0) acc))))))", "problem": 30, "user": "4f32135ae4b0d6649770a08e"}, {"code": "(fn [s]\n  (loop [p nil\n         s s\n         acc []]\n    (if (empty? s)\n      acc\n      (if (= p (first s))\n        (recur (first s) (rest s) acc)\n        (recur (first s) (rest s) (conj acc (first s)))))))", "problem": 30, "user": "4fbd24d2e4b081705acca2ff"}, {"code": "(fn remeq [l] \n  (if (= '() l) l\n    (if (= (first l) (first (rest l))) \n      (remeq (rest l))\n      (conj (remeq (rest l)) (first l)))))", "problem": 30, "user": "4e6eff83535d5021c1a89615"}, {"code": "#(map first (partition-by str %))", "problem": 30, "user": "4ee85476535d93acb0a6687c"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn [s] \r\n  (reverse \r\n    (reduce #(if (= %2 (first %)) % (cons %2 %)) '() s)))", "problem": 30, "user": "4fb37882e4b081705acca2a0"}, {"code": "#(reduce (fn[x,y](if (= (last x) y) x (conj x y))) [] (seq %))", "problem": 30, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn [the-coll]\r\n  (remove nil?\r\n          (map-indexed #(if (not= %2 (nth the-coll (inc %) nil)) %2)\r\n                       the-coll)))", "problem": 30, "user": "4fabbb97e4b081705acca21d"}, {"code": "#(loop [s % ans ()] (if (= s ()) (reverse ans) (recur (rest s) (if (= (first s) (first ans)) ans (cons (first s) ans)))))", "problem": 30, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn [s]\n  (loop [xs s rs []]\n    (if (empty? xs) rs\n    (if (not (= (first xs) (last rs)))\n      (recur (rest xs) (conj rs (first xs)))\n      (recur (rest xs) rs)))))", "problem": 30, "user": "4fc04d75e4b081705acca324"}, {"code": "(fn [s]\n  (map first\n    (filter #(apply not= %)\n      (partition 2 1 [nil] s))))", "problem": 30, "user": "4fc13433e4b081705acca32b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fa9da14e4b081705acca1e7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "(fn [input]\r\n   (keep-indexed #(if (= %1 (dec (count input)))\r\n                    %2\r\n                    (do\r\n                      (if (not= (nth input (inc %1)) %2) %2))) input))", "problem": 30, "user": "4faa6184e4b081705acca1f1"}, {"code": "(fn [l] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] l))", "problem": 30, "user": "4faac363e4b081705acca200"}, {"code": "(fn [x]\n  ((fn [el se nse]\n     (if (not (empty? se))\n       (let [cu (first se) re (rest se)]\n         (if (= el cu)\n           (recur el re nse)\n           (recur cu re (concat nse (list cu)))))\n       nse)) nil x '()))", "problem": 30, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn [s]\n  (loop [s s ret [] prev nil]\n    (if (empty? s)\n      ret\n      (if (= (first s) prev)\n        (recur (rest s) ret prev)\n        (recur (rest s) (conj ret (first s)) (first s))))))", "problem": 30, "user": "4fb4f42ae4b081705acca2b4"}, {"code": "(fn unique [[x & ll]]\n    (cond\n        (empty? ll) (list x)\n        (= x (first ll)) (unique ll)\n        :else (cons x (unique ll))\n    ))", "problem": 30, "user": "4fbdcb87e4b081705acca30a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn [l] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] l))", "problem": 30, "user": "4fc0853ae4b081705acca327"}, {"code": "reduce (fn [a x] (if (= (last a) x) a (conj a x))) []", "problem": 30, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4f7c0ab8e4b06e829148e1ac"}, {"code": "(fn [xs]\n  (letfn [(nxt [x y]\n    (if (= y (peek x))\n        x\n        (conj x y)))]\n  (reduce nxt [] xs)))", "problem": 30, "user": "4e51c67a535d302ef430da6a"}, {"code": "(fn\n  [x]\n  (reduce #(if (not (= (last %1) %2))\n             (conj %1 %2)\n             %1)\n          []\n          x))", "problem": 30, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "(fn compress-part\n  [coll]\n  {:pre [(or (sequential? coll) (string? coll) (nil? coll))]}\n  (->> (partition-by identity coll)\n       (map first)))", "problem": 30, "user": "4fc6305de4b0ee37620e180b"}, {"code": "(fn remdup [inlist]\n  (if (<= (count inlist) 1)\n    inlist\n    (if (= (first inlist) (first (rest inlist)))\n      (remdup (rest inlist))\n      (concat (list (first inlist)) (remdup (rest inlist))))))", "problem": 30, "user": "4fc50bcbe4b081705acca375"}, {"code": "#(reduce (fn [res elem] (if (= elem (last res)) res (conj res elem))) [] % )", "problem": 30, "user": "4fc0221ce4b081705acca322"}, {"code": "(fn [a]\n  (let [partitioned \n          (->> (partition 2 1 a)\n               (remove (partial apply =)))]\n    (concat (first partitioned)\n          (map second (rest partitioned)))))", "problem": 30, "user": "4fb1d907e4b081705acca282"}, {"code": "(comp (partial map first) (partial partition-by identity))", "problem": 30, "user": "4ec53831535d6d7199dd3684"}, {"code": "(fn [n] \n  (loop [dup (rest n) cur (first n) acc '()]\n    (cond (empty? dup) (reverse (cons cur acc))\n      :else (if (= cur (first dup))\n              (recur (rest dup) cur acc)\n              (recur (rest dup) (first dup) (cons cur acc))))))", "problem": 30, "user": "4fbd1ebbe4b081705acca2fe"}, {"code": "reduce #(if-not (= (last %) %2) (conj % %2) %) []", "problem": 30, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn compress [s]\r\n  (letfn [(skip-symbol [symbol sequence]\r\n                       (if (empty? sequence)\r\n                         sequence\r\n                         (if (= symbol (first sequence))\r\n                           (skip-symbol \r\n                             symbol \r\n                             (rest sequence))\r\n                           sequence)))]\r\n         (if (empty? s)\r\n           s\r\n           (cons (first s) \r\n                 (compress \r\n                   (skip-symbol (first s) (rest s)))))))", "problem": 30, "user": "4fc50441e4b081705acca36f"}, {"code": "(partial (fn [acc p c] (if (empty? c) acc (let [f (first c)] (if (= p f) (recur acc p (rest c)) (recur (conj acc f) f (rest c)))))) [] \"\")", "problem": 30, "user": "4f515bd3e4b03ad3f0c10d1f"}, {"code": "(fn [col]\n  (:v (reduce (fn [result cur] \n                (assoc result \n                  :v (if (= cur (:last result))\n                        (:v result)\n                        (conj (:v result) cur))\n                  :last cur)) \n        {:v []} col)))", "problem": 30, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(fn compress [coll]\r\n  (cond\r\n   (empty? coll) ()\r\n   (empty? (rest coll))\r\n   coll\r\n   (= (first coll) (first (rest coll)))\r\n   (compress (rest coll))\r\n   :else\r\n   (cons (first coll) (compress (rest coll)))))", "problem": 30, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "(fn f\n  [ls]\n  (if-let [h (first ls)]\n    (cons h (f (drop-while #(= h %) (rest ls))))\n    nil))", "problem": 30, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn r [s] \n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) \n    [] \n    s ))", "problem": 30, "user": "4fc92595e4b0ee37620e1843"}, {"code": "(fn rem-consec-dup [l]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] l))", "problem": 30, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn cmpstr [x]\n  (when-let [[f & h] (seq x)]\n    (if (= f (first h))\n      (cmpstr h)\n      (cons f (cmpstr h)))))", "problem": 30, "user": "4fc2e302e4b081705acca33a"}, {"code": "#(reduce (fn [c i] (if (= (last c) i) c (conj c i))) [] %)", "problem": 30, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(fn compress\n  ([prev, s] (cond (empty? s) '()\n                   (= prev (first s)) (compress prev (rest s))\n                   :else (conj (compress (first s) (rest s)) (first s))))\n  ([s] (compress nil s)))", "problem": 30, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "#(reduce (fn [a i] (if (= (last a) i) a  (conj a i))) [] %)", "problem": 30, "user": "4fbd292fe4b081705acca300"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "(comp (partial map first)\n      (partial partition-by identity))", "problem": 30, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn compress [l]\n   (condp = (count l)\n     0 '()\n     1 l\n     (if (= (first l) (second l))\n       (compress (rest l))\n       (cons (first l) (compress (rest l)))\n       )))", "problem": 30, "user": "4fc8ce6ce4b0ee37620e183c"}, {"code": "(fn compress [e]\n  (loop [x [(first e)],\n         lft (rest e),\n         lst (first e)]\n    (if (empty? lft) x\n      (if (= (first lft) lst)\n        (recur x (rest lft) lst)\n        (recur (conj x (first lft)) (rest lft) (first lft))))))", "problem": 30, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "(fn ([s] (\r\n    (fn [lista i output c]\r\n      (if (= i (count lista))\r\n        (reverse output)\r\n        (recur lista (+ i 1) (if (not= (nth lista i) c) (conj output (nth lista i) ) output) (nth lista i))\r\n        ) ) s 0 '() nil)\r\n    )\r\n    )", "problem": 30, "user": "4fb5705fe4b081705acca2be"}, {"code": "( fn [ l ] \n  ( apply list \n    ( reduce #(if (= (last %1) (first %2)) %1 (concat %1 %2) ) (map vector l) ) ))", "problem": 30, "user": "4fc43a8ee4b081705acca346"}, {"code": "(fn ! [x]\n  (if (or (= x '()) (= (rest x) '()))\n    x\n    (if (= (first x) (second x))\n      (! (cons (first x) (rest (rest x))))\n      (cons (first x) (! (rest x))))))", "problem": 30, "user": "4fc9cba3e4b0ee37620e1849"}, {"code": "#(mapcat distinct (partition-by identity %))", "problem": 30, "user": "4fb2f9b2e4b081705acca294"}, {"code": "(fn cpress[c] (when-let [[f & r] (seq c)] (if (= f (first r)) (cpress r)\r\n (cons f (cpress r)))))", "problem": 30, "user": "4f148418535d64f60314643a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fc8f1fee4b0ee37620e183f"}, {"code": "(fn clean [s]\n  (loop [last nil current (first s) more (rest s) result ()]\n    (let \n      [new-result (if (= last current) result (conj result current))]\n    (if (empty? more)\n      (reverse  new-result)\n      (recur current (first more) (rest more) new-result)))))", "problem": 30, "user": "4f9174d0e4b0dcca54ed6c9b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fc18846e4b081705acca331"}, {"code": "#(mapcat distinct (partition-by identity %))", "problem": 30, "user": "4fc67081e4b0ee37620e1813"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn [x]\n  (loop [input x output '()]\n    (if (seq input)\n      (let [a (first input) b (drop-while (partial = a) (rest input))]\n        (recur b (cons a output)))\n      (reverse output))))", "problem": 30, "user": "4fc34787e4b081705acca33e"}, {"code": "(fn [x]  (reverse\n  (\n    (fn ap [x c res] \n      (\n        if (= '() x)\n           res \n           (if (= c (first x))\n               (ap (rest x) c res)\n               (ap (rest x) (first x) (conj res (first x)))\n           ) \n      )\n    )\n    (rest x) (first x) (list (first x))\n  )\n))", "problem": 30, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn [s]\n  (loop [s s\n         a []]\n    (if (first s)\n      (if (= (first s) (second s)) (recur (next s) a) (recur (next s) (conj a (first s))))\n      a)))", "problem": 30, "user": "4e970e6a535dbda64a6f6b4e"}, {"code": "#(map first (partition-by identity %))\n\n;#(if (= % \"Leeeeeerrroyyy\") \"Leroy\"\n;  (if (= % [1 1 2 3 3 2 2 3]) '(1 2 3 2 3)\n;    '([1 2] [3 4] [1 2])))", "problem": 30, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "(fn compress-seq [items]\n  (when-let [[f & r] (seq items)]\n    (if (= f (first r))\n      (compress-seq r)\n      (cons f (compress-seq r)))))", "problem": 30, "user": "4f81fcbfe4b033992c121c03"}, {"code": "(fn F [x] (if (empty? x) '() (if (= (first x) (first (rest x))   )  (F (rest x))   (cons (first x) (F (rest x))    )    )  ))", "problem": 30, "user": "4fc7b079e4b0ee37620e1827"}, {"code": "(fn [a] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) (cons [] a)))", "problem": 30, "user": "4ec92a6e535d6d7199dd36fb"}, {"code": "(fn dedup [l]\n  (if (< (count l) 2)\nl\n  (let [f (nth l 0)\n        s (nth l 1)\n        r (dedup (rest l))]\n  (if (= f s)\n  r\n  (conj r f))\n)))", "problem": 30, "user": "4fcebce4e4b03432b189f404"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fbcbd50e4b081705acca2f9"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f826548e4b033992c121c08"}, {"code": "#(map last (partition-by identity %))", "problem": 30, "user": "4fbacdbae4b081705acca2e5"}, {"code": "(fn [a] \n  (reduce #(if (= (last %1) %2)\n            %1\n            (conj %1 %2)) [] a))", "problem": 30, "user": "4fcd5958e4b065de69964ca7"}, {"code": "(fn [x] \r\n   (letfn [(rdup [acc y]\r\n                 (if (= (last acc) y)\r\n                   acc\r\n                   (conj acc y)))]\r\n          (reduce rdup [] x)))", "problem": 30, "user": "4fc8b012e4b0ee37620e1838"}, {"code": "#(let [my-func (fn my-func\n                [xs]\n                (cond\n                  (empty? xs) nil\n                  (= (first xs) (first (rest xs))) (cons nil (my-func (rest xs)))\n                  true (cons (first xs) (my-func (rest xs)))))]\n  (filter (complement nil?) (my-func %)))", "problem": 30, "user": "4fceb350e4b03432b189f403"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4daf4d2fedd6309eace4d178"}, {"code": "(fn \n  [seq]\n    (cond \n      (empty? seq) '()\n      (empty? (rest seq)) (first seq)\n      :else\n        (loop [s (rest seq) cur (first seq) acc '()]\n          (cond\n            (empty? s) (reverse (cons cur acc))\n            (= cur (first s)) (recur (rest s) cur acc)\n            :else (recur (rest s) (first s) (cons cur acc))))))", "problem": 30, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "(fn compr [lst] (\r\n  if (nil? (next lst))\r\n  lst\r\n  (cons\r\n    (first lst)\r\n    (drop-while #(= % (first lst))\r\n      (compr (next lst))))\r\n  ))", "problem": 30, "user": "4fd459cfe4b0d4de60cee36b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn compress [x]\n     (letfn [ (c [ a b ]\n             (if (empty? a )\n               b\n               (if (= (first a) (last b))  \n                 (c (rest a) b ) \n                 (c (rest a) (concat b (vector (first a))) )\n                )))]\n            ( c x '())))", "problem": 30, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fb23582e4b081705acca28a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e929dd0535dbda64a6f6b05"}, {"code": "(fn [x]\n  (reduce #(if (= (last %) %2) % (conj % %2)) [] (seq x)))", "problem": 30, "user": "4fd2529ae4b04c3a95aa041f"}, {"code": "(fn [xs]\n  (loop [s []\n       t (first xs)\n       r (rest xs)]\n  (if (nil? t)\n    s\n    (recur (if (= t (last s)) s (conj s t))\n           (first r)\n           (rest r)))))", "problem": 30, "user": "4fccb31be4b0ee37620e1868"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fadbb17e4b081705acca23e"}, {"code": "(fn [x] (loop [ll x, rl '(), la nil]\n        (if (empty? ll)\n            rl\n            (let [fi (first ll)] (if (= fi la)\n                (recur (rest ll) rl la)\n                (recur (rest ll) (concat rl (list fi)) fi))))))", "problem": 30, "user": "4fd0cb0ee4b04c3a95aa0407"}, {"code": "#(reduce (fn [r e] (if (= e (peek r)) r (conj r e))) []  %)", "problem": 30, "user": "4dac61e18cc9d6edb9beb0b3"}, {"code": "(fn [s]\n  (->> s \n       (reduce (fn [acc i]\n              (if (= (first acc) i)\n                  acc\n                  (cons i acc)))\n          '())\n        (reverse)))", "problem": 30, "user": "4f934325e4b0dcca54ed6cb8"}, {"code": "#(loop [x % y ()]\n     (if (empty? x) (reverse y)\n         (recur (rest x)\n                (if (= (first x) (second x))\n                  y\n                  (cons (first x) y)))))", "problem": 30, "user": "4fba0877e4b081705acca2dd"}, {"code": "(fn f [s] (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] s))", "problem": 30, "user": "4fd29d7ce4b04c3a95aa0424"}, {"code": "(fn singles [subject]\n    (cond\n      (empty? subject) '()\n      (= (first subject) (second subject)) (singles (rest subject))\n      :else (conj (singles (rest subject)) (first subject))))", "problem": 30, "user": "4fd8544be4b0dab7d829f390"}, {"code": "#(reverse\n  (reduce\n    (fn [[a :as acc] x]\n      (if (= a x) acc (cons x acc))) '() %))", "problem": 30, "user": "4fd96694e4b05e33b9224f37"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fd2789ee4b04c3a95aa0422"}, {"code": "(fn cmprs [S]\n  (let [[x & xs] S]\n    (cond\n      (empty? S) nil\n      (= (first xs) x) (cmprs xs)\n      :else (cons x (cmprs xs)))))", "problem": 30, "user": "4fda016ae4b05e33b9224f42"}, {"code": "(fn[x] (reverse (reduce \n    #(if (= (first %1) %2) %1 (cons %2 %1)) \n    () x)\n  )\n)", "problem": 30, "user": "4fce75cfe4b03432b189f400"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fb591aee4b081705acca2c0"}, {"code": "(fn [a]\n  (loop [x [] y a]\n    (if (empty? y)\n      x\n      (if (= (last x) (first y))\n        (recur x (rest y))\n        (recur (conj x (first y)) (rest y))))))", "problem": 30, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "4fd6028ce4b0d4de60cee37b"}, {"code": "(fn a [c]\n  (when-let [[h & t] (seq c)]\n    (if (= h (first t))\n      (a t)\n      (cons h (a t)))))", "problem": 30, "user": "4ead2841535d7eef3080731e"}, {"code": "#(reduce\n  \t\t(fn [accum next]\n\t\t\t\t(if (= (last accum) next)\n\t\t\t\t\taccum\n\t\t\t\t\t(conj accum next)))\n\t\t\t[]\n\t\t\t%)", "problem": 30, "user": "4fb57e06e4b081705acca2bf"}, {"code": "(fn [coll] (map first (partition-by identity coll)))", "problem": 30, "user": "4f9fb08ae4b0dcca54ed6d3c"}, {"code": "(fn [coll]\n  (reverse (reduce \n\t (fn [a b] (if (= (first a) b) a (cons b a)))\n\t (list (first coll))\n\t coll)))", "problem": 30, "user": "4fcd155de4b065de69964ca3"}, {"code": "(fn [str]\n  (letfn [(r [sum x] \n          (if (= (last sum) x) sum (conj sum x)))]\n    (reduce r [] str)))", "problem": 30, "user": "4fc66c43e4b0ee37620e1812"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "#((fn f [[a & b] r]\n        (if (= a (first b))\n            (f b r)\n            (if b\n                (f b (conj r a))\n                (conj r a))))\n% [])", "problem": 30, "user": "4fdc3065e4b05e33b9224f6b"}, {"code": "(fn [col]\n  (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) nil (reverse col)))", "problem": 30, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "(fn x [l]\n  (cond\n    (nil?         l )     ()\n    (empty?       l )     ()\n    (nil?   (rest l))     (first l)\n    (= (first l)\n       (first (rest l)))  (x (rest l))\n    :else\n    (conj (x (rest l)) (first l))\n)\n)", "problem": 30, "user": "4fd153cee4b04c3a95aa040e"}, {"code": "#(reduce\n       (fn [coll x] \n     (if (not= (last coll) x)\n\t       (concat coll `(~x))\n\t       coll))\n       '()\n%)", "problem": 30, "user": "4e726575535d5021c1a89660"}, {"code": "#(reverse \n  (reduce (fn [a b]\n              (if (= [] a)\n                (list b)\n                (if (= b (first a))\n                    a\n                    (cons b a)))) [] %))", "problem": 30, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn [coll](reduce #(if (not= (last %) %2) (conj % %2) %) [] coll))", "problem": 30, "user": "4ee6166e535d93acb0a66854"}, {"code": "#(reduce (fn [acc x] (cond (= x (last acc)) acc\n                            :else (conj acc x))) [] %)", "problem": 30, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4dad8c92c9a9d6ed1699dc57"}, {"code": "(fn [l]\n  (loop [a [(first l)] b (rest l)]\n    (if (= b [])\n      a\n      (recur (concat a\n                     (when (not= (last a) (first b))\n                       [(first b)]))\n             (rest b)))))", "problem": 30, "user": "4fde492be4b05e33b9224f8a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e5a5ecb535d8a8b8723a2ac"}, {"code": "(fn [x] \n  (reverse \n    (reduce \n      #(if (= (first %1) %2) %1 (conj %1 %2))\n       '() x)))", "problem": 30, "user": "4fdfe6a5e4b05e33b9224fa6"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4fe183a0e4b0dd6cd5ce3635"}, {"code": "(fn [i] (reduce #(if (not= (last %) %2) (conj % %2) %) (cons [] (seq i))))", "problem": 30, "user": "4fc93728e4b0ee37620e1844"}, {"code": "reduce (fn [v i] (if (not= (last v) i) (conj v i) v)) []", "problem": 30, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn [xs]\r\n  (reduce #(if (not= (last %) %2)\r\n       (conj % %2)\r\n       %) [] xs))", "problem": 30, "user": "4fd9f5dbe4b05e33b9224f41"}, {"code": "(fn remdup [seq]\r\n  (cond\r\n    (empty? seq) '()\r\n    (empty? (rest seq)) seq\r\n    (= (first seq) (second seq)) (remdup (rest seq))\r\n    :else (cons (first seq) (remdup (rest seq)))))", "problem": 30, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn compr\n  ([items] (compr items nil []))\n  ([items cur output]\n    (if (= cur nil)\n      (compr (rest items) (first items) (conj output (first items)))\n      (if (empty? items)\n        output\n        (if (= cur (first items))\n          (compr (rest items) cur output)\n          (compr (rest items) (first items) (conj output (first  items))))))))", "problem": 30, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "#(let [shifted (cons nil %)]\n    (remove nil? (map (fn [x y] (if (not= x y) x)) \n                      % shifted)))", "problem": 30, "user": "4fc3b0d4e4b081705acca343"}, {"code": "(fn [lst]\n   (loop [l lst result []]\n     (if (empty? l)\n       result\n       (if (= (first l) (last result))\n         (recur (next l) result)\n         (recur (next l) (conj result (first l)))))))", "problem": 30, "user": "4fd7f892e4b0dab7d829f38d"}, {"code": "(fn remove-conseq-dupes [coll]\r\n  (loop [last nil\r\n         coll coll\r\n         result []]\r\n    (if (empty? coll)\r\n      result\r\n      (let [f (first coll)]\r\n        (recur f (rest coll)\r\n               (if (= last f)\r\n                 result\r\n                 (conj result f)))))))", "problem": 30, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f56d6f3e4b0a7574ea7182c"}, {"code": "(fn [C] (loop [coll C R []] (if (empty? coll) R (let [x (first coll) xs (rest coll)] (if (= x (peek R)) (recur xs R) (recur xs (conj R x)))))))", "problem": 30, "user": "4fc52d79e4b081705acca386"}, {"code": "(fn compress [coll]\n  (when-let [[f & r] coll]\n    (if (= f (first r))\n      (compress r)\n      (cons f (compress r)))))", "problem": 30, "user": "4f030cff535dcb61093f6a4d"}, {"code": "#(loop \n    [orig-list % comp-list '()]\n    (if\n      (empty? orig-list)\n      comp-list\n      (if(= (first orig-list) (second orig-list))\n          (recur (next orig-list) comp-list)\n          (recur (next orig-list) (concat comp-list [(first orig-list)]))\n      )\n    )\n  )", "problem": 30, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn f [ s ] \n    (remove (fn [w] (nil? w)) (map  (fn [x,y] (if (not= x y) y nil ))   \n     (concat (next s) (seq [9999]))    s))\n\n)", "problem": 30, "user": "4fdf750be4b05e33b9224f9c"}, {"code": "(fn cmpr [x]\n   (loop [x x\n          acc []]\n    (if (empty? x)\n      acc\n      (if (= (first x) (second x))\n       (recur (rest x) acc)\n       (recur (rest x) (conj acc (first x)))))))", "problem": 30, "user": "4fe72924e4b0e8f79898fedb"}, {"code": "(fn [t] (loop [s t\n               r []]\n    (cond (empty? s) r\n          (= (first s) (last r)) (recur (rest s) r)\n          :else (recur (rest s) (conj r (first s)))\n          )\n  )\n)", "problem": 30, "user": "4fd1fa71e4b04c3a95aa0418"}, {"code": "(fn [c]\n  \t(loop [in (seq c) out [] last-one \\u0000]\n\t\t\t(if (empty? in)\n\t\t\t\tout\n\t\t\t\t(recur \n\t\t\t\t\t(rest in) \n\t\t\t\t\t(if (not (= last-one (first in))) (conj out (first in)) out)\n\t\t\t\t\t(first in)))))", "problem": 30, "user": "4e6a63fd535d8ccf87e9feda"}, {"code": "(fn [xs] (reverse\n  (reduce\n    (fn [acc x]\n      (if (not= (first acc) x)\n        (conj acc x)\n        acc))\n    '()\n    xs)))", "problem": 30, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "(fn [s]\n  (reduce #(if (= (last %) %2) % (conj % %2)) [] (seq s)))", "problem": 30, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn [s]\n  (loop [xs s result []]\n    (cond (< (count xs) 2) (into result xs)\n          (= (first xs) (first (next xs))) (recur (rest xs) result)\n          true (recur (rest xs) (conj result (first xs))))))", "problem": 30, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn [s]\n  ((fn iter [s-in s-out]\n    (if (empty? s-in)\n      s-out\n      (if (= (first s-in) (last s-out))\n        (iter (rest s-in) s-out)\n        (iter (rest s-in) (conj s-out (first s-in))))))\n  s []))", "problem": 30, "user": "4fe8e771e4b0547ebccb2431"}, {"code": "(fn uniq [[x & xs :as all]]\n   (if (nil? xs) all\n  (if (= x (first xs)) (uniq xs)\n      (conj (uniq xs) x))))", "problem": 30, "user": "4fe8d862e4b0547ebccb2428"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn compress [coll]\r\n  (reduce (fn [acc nxt]\r\n            (if (= (last acc) nxt)\r\n              acc\r\n              (concat acc (list nxt))))\r\n          '()\r\n          coll))", "problem": 30, "user": "4e7e4a1f535db169f9c7970c"}, {"code": "(fn [x] (reverse (reduce #(if (= (first %) %2) % (cons %2 %)) '() x)))", "problem": 30, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(comp reverse\n  (partial reduce\n    (fn [acc v]\n      (if (= (peek acc) v)\n        acc\n        (conj acc v)))\n    '()))", "problem": 30, "user": "4fe89db2e4b07c9f6fd12c59"}, {"code": "#(reduce\n  (fn [coll elt]\n    (if (= (last coll) elt)\n      coll\n      (conj coll elt)))\n  [] %)", "problem": 30, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "(fn cmprs [coll]\r\n  (when-let [[f & r] (seq coll)] \r\n    (if (= f (first r)) \r\n      (cmprs r) \r\n      (cons f (cmprs r)))))", "problem": 30, "user": "4fea08a9e4b0547ebccb2484"}, {"code": "reduce (fn [c item]\n  (if (and (not (empty? c)) (= (last c) item))\n    c\n    (conj c item))) []", "problem": 30, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "(fn [xs]\r\n          (reverse\r\n          (reduce (fn [coll x]\r\n                    (if (= x (first coll))\r\n                      coll\r\n                      (cons x coll)))\r\n                  []\r\n                  xs)))", "problem": 30, "user": "4f07ad89535dcb61093f6c2a"}, {"code": "(fn dedup [seq]\n  (if (= (first seq) (second seq))\n    (if (not (empty? seq))\n      (dedup (rest seq)))\n    (if (string? seq)\n      (reduce str (cons (first seq) (dedup (rest seq))))\n      (cons (first seq) (dedup (rest seq))))))", "problem": 30, "user": "4fdb881ee4b05e33b9224f5e"}, {"code": "#(reverse (reduce (fn [sum el] (cond (not= (first sum) el) (cons el sum)\n                             :else sum ) ) '() %))", "problem": 30, "user": "4fc5eb7fe4b0ee37620e1803"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4feada56e4b0140c20fb9c11"}, {"code": "#(mapcat distinct (partition-by (fn [collval] collval) %))", "problem": 30, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "reduce #(if (= (last %1) %2) %1\n               (conj %1 %2)) []", "problem": 30, "user": "4fead955e4b0140c20fb9c10"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "(fn compr [seq]\n   (cond (= (count seq) 0) '()\n         (= (count seq) 1) (list (first seq))\n         (= (first seq) (second seq)) (compr (rest seq))\n         (= (first seq) (second seq)) (compr (rest seq))\n         :else                  \n         (cons (first seq) (compr (rest seq)))))", "problem": 30, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn [o]                                                                                                   \n  (let [v (vec o)]                                                                                            \n    (reduce                                                                                                   \n     (fn [a b]                                                                                                 \n       (if (= (last a) b)                                                                                     \n         a                                                                                                    \n         (conj a b)                                                                                           \n)       ) [] v                                                                                                \n     )                                                                                                        \n    )                                                                                                         \n  )", "problem": 30, "user": "4f30896ce4b0d6649770a07b"}, {"code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] %)", "problem": 30, "user": "4fe2501ae4b0dd6cd5ce3644"}, {"code": "(fn remove-duplicates [my-seq] (reduce #(cond (= (last %1) %2) %1 true (conj %1 %2)) [] my-seq))", "problem": 30, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "(fn [x]\n  (loop [ls x newls '()]\n    (if (empty? ls)\n      (reverse newls)\n      (recur (rest ls) (if (= (first ls) (first newls)) newls (cons (first ls) newls))))))", "problem": 30, "user": "4fe1597fe4b0dd6cd5ce3633"}, {"code": "#(loop [x % acc []]\n  (if (empty? x)\n    acc\n    (recur (rest x)\n          (if (= (first x) (first (rest x)))\n            acc\n            (conj acc (first x))))))", "problem": 30, "user": "4fe9231ce4b0547ebccb2445"}, {"code": "(fn [x] (seq (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] x)))", "problem": 30, "user": "4fcc70b3e4b0ee37620e1862"}, {"code": "(fn [coll]\n  (map first (partition-by (fn [x] x) coll)))", "problem": 30, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "#((fn compress [prev l]\n  (let [x (first l) y (print prev \",\" l \"\\n\") ]\n    (cond (empty? l) nil \n    true (concat (if (= prev x) nil (list x)) (compress x (rest l))))))\n nil %)", "problem": 30, "user": "4fedd2cae4b0198f34b063ba"}, {"code": "(fn [x] (reduce #(if (= (last %) %2) % (conj % %2)) (cons [] x)))", "problem": 30, "user": "4febb4dae4b0681fd128dc98"}, {"code": "reduce (fn [coll, next] (if (= next (last coll)) coll (conj coll next))) []", "problem": 30, "user": "4fea2de5e4b0140c20fb9bfe"}, {"code": "(fn compress [coll]\r\n  (loop [result [] a (first coll) coll (rest coll)]\r\n    (if a\r\n      (recur\r\n        (if (not= a (first coll))\r\n          (conj result a)\r\n          result)\r\n        (if (not= a (first coll))\r\n          (first coll)\r\n          a)\r\n        (rest coll))\r\n      result )))", "problem": 30, "user": "4fd170fce4b04c3a95aa0411"}, {"code": "#(map first (partition-by str %))", "problem": 30, "user": "4fe1a734e4b0dd6cd5ce3637"}, {"code": "reduce (fn [acc el] (if (= el (last acc)) acc (conj acc el))) []", "problem": 30, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn compress [xs]\n  (->> xs\n       (partition-by identity)\n       (map first)))", "problem": 30, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn [coll]\n(loop [c coll v []]\n  (if (seq c)\n    (if (not= (first c) (last v))\n      (recur (rest c) (conj v (first c)))\n      (recur (rest c) v))\n    v)))", "problem": 30, "user": "4e95c771535dbda64a6f6b39"}, {"code": "#(let [s (seq %)\n       snil (map (fn [a b] (if (= a b) nil a)) (rest s) s)\n       tail (filter (fn [x] (not= x nil)) snil)]\n      (cons (first s) tail))", "problem": 30, "user": "4ff07229e4b0678c553fc323"}, {"code": "(fn compress [coll]\n  (map first (partition-by identity coll)))", "problem": 30, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "(fn [seq]\r\n    (map #(get seq %) \r\n   (cons 0 (filter #(not= (get seq %) (get seq (- % 1)))\r\n\t\t\t (range 1 (count seq))))))", "problem": 30, "user": "4fd65b2be4b0d4de60cee37e"}, {"code": "(fn _compress \n      [x] \n      (let [_1 (first x) _2 (second x) rest (rest x)] \n      (println _1 \"|\" _2)\n      (if (not _1) x\n      (if (= _1 _2) \n          (_compress rest)\n          (cons _1 (_compress rest))))))", "problem": 30, "user": "4ded582d535d08e6dec9fe0c"}, {"code": "(fn dedup\r\n   ([arr] (dedup (next arr) (first arr) [(first arr)]))\r\n   ([arr prev res]\r\n     (let [cur (first arr)]\r\n       (if (not cur)\r\n         res\r\n         (dedup (rest arr) cur (if (not= cur prev) (conj res cur) res))))))", "problem": 30, "user": "4ff201d7e4b0678c553fc330"}, {"code": "#(reduce (fn [col e] \n  (if (= (last col) e) col (conj col e))) [] %1)", "problem": 30, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn [xs]\n  (reverse\n    (loop [ys xs ret '()]\n      (if (empty? ys)\n        ret\n        (let [fir (first ys) b (= fir (first ret))]\n          (recur (rest ys) (if b ret (cons fir ret))))))))", "problem": 30, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn comp [s] \n  (cons \n    (first s) \n    (map #(get % 1) \n      (filter #(apply not= %) \n        (map vector s (rest s))))))", "problem": 30, "user": "4ff2430ae4b0678c553fc336"}, {"code": "(fn [s]\r\n  (let [f (fn dedup [s]\r\n            (if (empty? s)\r\n              s\r\n              (concat [(first s)]\r\n                      (dedup (drop-while (fn [x] (= (first s) x ))\r\n                                         (rest s))))))]\r\n    (f (reverse (into () s)))))", "problem": 30, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn [s]\n  (reduce \n    #(if (= (last %1) %2)\n         %1\n         (conj %1 %2))\n    []\n    s))", "problem": 30, "user": "4ff35e60e4b0678c553fc350"}, {"code": "(fn  [col]\n  (reduce (fn [result current]\n            (if (= current (last result))\n              result\n              (conj result current)))\n          [] col))", "problem": 30, "user": "4fbf2818e4b081705acca317"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "4ff50604e4b0678c553fc365"}, {"code": "(fn [c]\n  (map first (map set \n    (partition-by (fn [n] n) c))))", "problem": 30, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "(fn f\n  [x]\n  (loop [coll x acc []]\n    (cond \n      (empty? coll) (reverse acc)\n      (= (first coll) (first acc)) (recur (rest coll) acc)\n      :else (recur (rest coll) (cons (first coll) acc )))))", "problem": 30, "user": "4fea7594e4b0140c20fb9c06"}, {"code": "(fn dedupe [b]\n(loop [x b, prev nil, result []]\n  (if (not-empty x)\n    (let [remainder (drop-while (partial = prev) x)]\n         (recur \n          (rest remainder)\n          (first remainder)\n          (conj result (first remainder))))\n    result)))", "problem": 30, "user": "4ff31e13e4b0678c553fc346"}, {"code": "(fn [l]\n  (reverse\n    (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) '() l)))", "problem": 30, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn [s]\n(let [t (conj (vec (rest s)) nil)]\n     (map first\n          (filter (fn [p] (not= (first p) (second p)))\n                  (map vector s t)))))", "problem": 30, "user": "4fe8a3bde4b07c9f6fd12c61"}, {"code": "(fn\n  [coll]\n  (let [shifted-coll (cons nil coll)]\n    (remove nil? (map (fn [x y] (if (not= x y) x)) coll shifted-coll))))", "problem": 30, "user": "4ff58b05e4b0678c553fc36b"}, {"code": "(fn compress [s]\n  (if (empty? s)\n    s\n    (let [a (first s),\n          b (second s),\n          r (rest s)]\n      (if (= a b)\n        (compress r)\n        (cons a (compress r))))))", "problem": 30, "user": "4ff3e771e4b0678c553fc356"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f244f26e4b0d66497709fea"}, {"code": "(fn compress [x]\n  (loop [remainingString (vec x), fixedString []] \n    (cond\n      (= remainingString []) fixedString\n      (= (first remainingString) (first (rest remainingString))) (recur (rest remainingString) fixedString)\n      :else (recur (rest remainingString) (conj fixedString (first remainingString)))\n    )\n  )\n)", "problem": 30, "user": "4ff35d46e4b0678c553fc34f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e84a7dd535db62dc21a62e2"}, {"code": "#((fn compress [s prev acc]\n     (if (empty? s)\n       (reverse acc)\n       (if (= (first s) prev)\n         (compress (rest s) (first s) acc)\n         (compress (rest s) (first s) (cons (first s) acc))))) % nil '())", "problem": 30, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn [a]\n  (loop [last (first a) lst (rest a) out () ]\n    (if (nil? (seq lst))\n      (reverse (conj out last))\n    (if (= last (first lst))\n      (recur (first lst) (rest lst) out)\n      (recur (first lst) (rest lst) (conj out last))\n    ))))", "problem": 30, "user": "4ff743fde4b0678c553fc38d"}, {"code": "#(->> % (partition-by identity) (map first))", "problem": 30, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "(fn [s] \n  (reverse (first (reduce (fn [[result last] next] \n                    (if (= last next) \n                      [result last]\n                      [(cons next result) next])) \n                 (empty s) \n                 s))))", "problem": 30, "user": "4ff83003e4b0678c553fc396"}, {"code": "(fn [c] (loop [coll c\n               last nil\n               curr (first coll)\n               result []]\n          (if (empty? coll)\n              result\n              (recur (rest coll) curr (first (rest coll))\n                     (if (= last curr)\n                       result\n                       (conj result curr))))))", "problem": 30, "user": "4ff8a89de4b0678c553fc39d"}, {"code": "(fn [org]\n   (loop [l org\n         result (list)]\n    (if (empty? l)\n      (reverse  result)\n      (if (= (first result) (first l))\n        (recur (rest l) result)\n        (recur (rest l) (cons (first l) result))))))", "problem": 30, "user": "4fea1f9ee4b0547ebccb248b"}, {"code": "(fn compress [x]\n  (reverse (reduce \n    #(if(= %2 (first %1)) %1 (cons %2 %1)) '() x)))", "problem": 30, "user": "4f1ae082535d64f603146470"}, {"code": "(fn d ([s] (if\n  (seq s)\n  (if\n    (= (first s) (second s))\n    (d (rest s))\n    (cons (first s) (d (rest s)))) '())))", "problem": 30, "user": "4ff889f2e4b0678c553fc399"}, {"code": "(fn [s]\n  (loop [x s\n         l nil\n         acc []]\n    (if (nil? x)\n      (seq acc)\n      (let [head (first x)]\n        (if (not= head l)\n          (recur (next x) head (conj acc head))\n          (recur (next x) l acc))))))", "problem": 30, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "problem": 30, "user": "4fefd624e4b0678c553fc31b"}, {"code": "(fn [coll]\n  (loop [ret []\n         [x & rest] coll]\n    (if (empty? rest)\n      (conj ret x)\n      (if (= x (first rest))\n        (recur ret rest)\n        (recur (conj ret x) rest)))))", "problem": 30, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fe868d1e4b07c9f6fd12c3f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "(fn [c] \n  (concat [(first c)] \n          (map last (remove #(apply = %) (map list c (rest c))))))", "problem": 30, "user": "4ff82b00e4b0678c553fc395"}, {"code": "(fn compress \n  ([coll] (reverse (compress (rest coll) (first coll) '())))\n  ([coll val result] \n   (if (empty? coll) (conj result val)\n      (if (= (first coll) val)\n       (compress (rest coll) (first coll) result)\n       (compress (rest coll) (first coll) (conj result val))))))", "problem": 30, "user": "4feddf2ee4b0198f34b063be"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ffa1335e4b0678c553fc3b5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ff673b3e4b0678c553fc37d"}, {"code": "(fn cons-dup [s]\n  (let [f (first s) nxt (next s)]\n    (concat\n      (if-not (= f (first nxt))\n        [f])\n      (when (coll? nxt)\n        (cons-dup nxt)))))", "problem": 30, "user": "4ff5a525e4b0678c553fc36d"}, {"code": "#(loop [sequence % current (first %) response []]\n  (if (empty? sequence)\n    response\n    (recur (rest sequence) \n           (second sequence)\n           (if (= current (last response))\n             response\n             (conj response current)))))", "problem": 30, "user": "4e9c3648535dbda64a6f6b7d"}, {"code": "(fn [x] (map first (partition-by #(identity %) x)))", "problem": 30, "user": "4fba77fae4b081705acca2df"}, {"code": "#(reduce (fn [s v] (if (= v (last s)) s (conj s v))) [] (vec %))", "problem": 30, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn bla \n  ([x] (bla x []))\n  ([x y] (if (= x []) \n           y \n           (if (= (first x) (last y)) \n             (bla (rest x) y) \n             (bla x (conj y (first x)))))))", "problem": 30, "user": "4ff6ed6ae4b0678c553fc384"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "(fn [v] \n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) \n    [] (seq v)))", "problem": 30, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fe8e719e4b0547ebccb2430"}, {"code": "(fn rmdup [lst]\n  (if (or (empty? lst) (empty? (rest lst)))\n    lst\n    (if (= (first lst) (second lst))\n      (rmdup (rest lst))\n      (cons (first lst) (rmdup (rest lst))))))", "problem": 30, "user": "4ff9cfd6e4b0678c553fc3af"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "(fn ex30 [c]\n  (loop [r nil col c]\n    (if (empty? col)\n      (reverse r)\n      (if (= (first r) (first col))\n        (recur r (rest col))\n        (recur (cons (first col) r) (rest col))))))", "problem": 30, "user": "4e539f7e535d8a8b8723a272"}, {"code": "(fn [s]\n  ; remove consecutive duplicates in sequence s\n  (loop [_result []\n         _rest s\n         _last nil]\n    (let\n      [r\n        (drop-while\n          (fn [x] (= x _last))\n          _rest\n        )\n      ]\n      (if (not (empty? r))\n        (recur (conj _result (first r)) r (first r))\n        _result\n      )\n    )\n  )\n)", "problem": 30, "user": "4ffb3c50e4b0678c553fc3c8"}, {"code": "(fn uniq [s] (cond (nil? s) s\n                   (not (seq (rest s))) s\n                   (= (first s) (second s)) (uniq (rest s))\n                   :else    (cons (first s) (uniq (rest s))) ))", "problem": 30, "user": "4ff67852e4b0678c553fc37e"}, {"code": "#(if (string? %1)\n  (loop [a %1 b \"\"]\n    (if (empty? a) \n        b\n        (if (= (first a) (last b))\n            (recur (rest a) b)\n            (recur (rest a) (str b (first a))))))\n  (if (vector? %1)\n    (loop [a %1 b []]\n    (if (empty? a) \n        b\n        (if (= (first a) (last b))\n            (recur (rest a) b)\n            (recur (rest a) (conj b (first a))))))\n    nil))", "problem": 30, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "(fn r [s]\n  ((fn h [a b]\n    (cond\n      (empty? a) '()\n      (= b (first a)) (h (rest a) b)\n      true (cons (first a) (h (rest a) (first a)))))\n   s \"\"))", "problem": 30, "user": "4fff72b6e4b0678c553fc400"}, {"code": "(fn[s]\n  (loop [last nil r [] s s]\n    (let [c (first s)]\n      (if (empty? s)\n        r\n        (if (= last c)\n          (recur c r (rest s))\n          (recur c (conj r c) (rest s)))))))", "problem": 30, "user": "4ec64981535d6d7199dd36c7"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "(fn [xs]\n  (loop [[h & t] xs\n         k nil]\n    (let [r (drop-while #{h} t)]\n      (if-not (empty? t)\n        (recur r (cons h k))\n        (reverse (cons h k))))))", "problem": 30, "user": "4ffa213ee4b0678c553fc3b7"}, {"code": "(fn l [c]\n    (if (empty? c)\n       '()\n       (let [p (first c) r (rest c)]\n         (if (= p (first r))\n           (l r)\n           (cons p (l r)))\n       )))", "problem": 30, "user": "4fff57f1e4b0678c553fc3fe"}, {"code": "(fn rec\r\n  ([x] (rec x []))\r\n  ([[x & rest] last]\r\n    (if (= x last)\r\n      (recur rest last)\r\n      (when x\r\n        (cons x (rec rest x))))))", "problem": 30, "user": "500159b3e4b0678c553fc419"}, {"code": "(fn [x] (reduce #(if (= (peek %) %2) % (conj % %2)) [] x))", "problem": 30, "user": "50015be1e4b0678c553fc41a"}, {"code": "(fn [s]\n  (map first (partition-by identity s)))", "problem": 30, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn [coll]\n  (loop [coll coll\n           results '()]\n      (if (nil? (first coll))\n        (reverse results)\n        (recur (drop-while (partial = (first coll)) coll) \n                (cons (first coll) results)))))", "problem": 30, "user": "4ffb529be4b0678c553fc3cd"}, {"code": "(fn t [l] \n  (cond (< (count l) 2) l \n        (= (first l) (second l)) (t (rest l))\n    :else (cons (first l) (t (rest l)))))", "problem": 30, "user": "5002ad40e4b0678c553fc42b"}, {"code": "(fn mycompress [ lst ]                                                  \n            (let [ [x & res] (apply list lst) ]                                 \n                 (cond                                                          \n                   (empty? lst) '()                                             \n                   (= x (first res)) (mycompress res)                           \n                   :else (cons x (mycompress res)))))", "problem": 30, "user": "4eed6b32535d93acb0a668bc"}, {"code": "(fn [xs] (reduce #(if (= (peek %1) %2) %1 (conj %1 %2)) [] xs))", "problem": 30, "user": "5003bb77e4b0678c553fc442"}, {"code": "(fn [sequence]\n  (reduce (fn [acc elem] \n            (if (= elem (last acc)) \n             acc \n             (conj acc elem))) \n           [] \n           sequence))", "problem": 30, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn compress [coll]\r\n  (when-let [[f & r] (seq coll)] \r\n    (if (= f (first r)) \r\n      (compress r) \r\n      (cons f (compress r)))))", "problem": 30, "user": "4ffee0f6e4b0678c553fc3f7"}, {"code": "(fn compress [a b] \r\n    (if (empty? b) a \r\n      (if (= (last a) (first b)) (compress a (rest b)) \r\n        (compress (conj a (first b)) (rest b))))) []", "problem": 30, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fdf5403e4b05e33b9224f98"}, {"code": "(fn [xs]\r\n  (reduce #(if (= (last %) %2) % (conj % %2)) [] xs))", "problem": 30, "user": "50045388e4b0678c553fc44e"}, {"code": "(fn compress [col]\r\n  (let [f-element (first col)\r\n        r-col (rest col)]\r\n    (if (= 1 (count col))\r\n      (list (first col))\r\n      (if (not= f-element (first r-col))\r\n        (cons f-element (compress r-col))\r\n        (compress r-col)))))", "problem": 30, "user": "4f625f68e4b0defedf855fd2"}, {"code": "(fn remove-consec-dup\n  ([s] (remove-consec-dup s []))\n  ([s acc]\n    (if (empty? s) acc\n      (if (or (empty? acc) (not= (last acc) (first s)))\n        (remove-consec-dup (rest s) (conj acc (first s)))\n        (remove-consec-dup (rest s) acc)\n      )\n    )\n  )\n)", "problem": 30, "user": "4fff00ede4b0678c553fc3fc"}, {"code": "(fn [coll]\n  (conj\n    (vec\n      (map first\n        (remove #(apply = %) (partition 2 1 coll))))\n    (last coll)))", "problem": 30, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn stripper [sequ]\n    (reduce (fn [a b]\n              (if (= (last a) b) a\n  \t  (conj a b))) [] sequ))", "problem": 30, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn cpress [[h & t]]\n    (if (empty? (rest t))\n      (if (= h (first t))\n        (cons h '())\n        (cons h t))\n      (if (= h (first t))      \n          (cpress (cons h (rest t)))\n          (cons h (cpress t))\n          )))", "problem": 30, "user": "4ebe81e9535dfed6da9c6d95"}, {"code": "#(loop [ls [(first %)] h (first %) t (rest %)]\r\n   (if (empty? t)\r\n      ls\r\n      (if (= h (first t))\r\n        (recur ls (first t) (rest t))\r\n        (recur (conj ls (first t)) (first t) (rest t)))\r\n     ))", "problem": 30, "user": "5003ee7de4b0678c553fc446"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50052d38e4b0678c553fc45c"}, {"code": "#(mapcat distinct (partition-by identity %))", "problem": 30, "user": "4ff76effe4b0678c553fc390"}, {"code": "(fn $ [ list ]\n  (let [llist (cons nil list)]\n    (remove nil? (map (fn [x y] (if-not (= x y) x)) list llist))))", "problem": 30, "user": "50086dafe4b028e089d3518d"}, {"code": "(fn squeeze [coll]\n  (reduce\n   (fn [acc x] (if (= (last acc) x) acc (conj acc x))) [] coll))", "problem": 30, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "#(reduce \n  (fn [xs x] (if (= (last xs) x) xs (conj xs x))) [] %1)", "problem": 30, "user": "4e4ca885535dc968683fc4df"}, {"code": "reduce #(if (= (last %) %2) % (conj %1 %2)) []", "problem": 30, "user": "5007e90be4b0b17c647f5228"}, {"code": "reduce (fn[acc,x](\nif (not ( = (last acc) x)) (conj acc x)  acc ))[]", "problem": 30, "user": "4ffd92e7e4b0678c553fc3e3"}, {"code": "(fn [coll]\n  (loop [c coll z []]\n    (if (empty? c)\n      z\n      (let [f (first c) r (rest c)]\n        (recur r\n          (if (empty? z) [f]\n            (if (= f (last z))\n              z\n              (conj z f))))))))", "problem": 30, "user": "500933a6e4b046cdb195e074"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn [c] (let [compressed \n  (cons (first c) \n  (remove nil? \n    (map (fn [x1 x2] (if (= x1 x2) nil x2)) c (rest c))))] \n(if (string? c) (apply str compressed) compressed)))", "problem": 30, "user": "4e260220535deb9a81d77ef0"}, {"code": "(fn rd [x]\n  (when-let [[a & b] x]\n    (if (= a (first b))\n      (rd b)\n      (cons a (rd b)))))", "problem": 30, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn [x] (reduce #(if (= (last %) %2) % (conj % %2)) [] x))", "problem": 30, "user": "4ee75ec2535d93acb0a66867"}, {"code": "#(reverse (reduce (fn [acc x] (if (= (first acc) x) acc (cons x acc))) \n        [] %))", "problem": 30, "user": "4fe9cea4e4b0547ebccb2471"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "#(map first(partition-by identity %))", "problem": 30, "user": "4fe1279fe4b0dd6cd5ce3630"}, {"code": "(letfn [(dd [cum it]\n                   (if (= (last cum) it)\n                     cum\n                     (conj cum it)))]\n           (partial reduce dd []))", "problem": 30, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn [s]\n  (reduce (fn [res x]\n    (if (= (last res) x)\n      res\n      (conj res x))) [] s))", "problem": 30, "user": "4f50cadce4b03ad3f0c10d0f"}, {"code": "#(map last (partition-by str %) )", "problem": 30, "user": "500adcc9e4b03d00572d2d7c"}, {"code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "problem": 30, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn [xs]\n  (reduce\n    (fn [acc x]\n      (if (or (empty? acc) (not= x (last acc)))\n        (conj acc x)\n        acc))\n    []\n    xs))", "problem": 30, "user": "500ff421e4b0ae202717946f"}, {"code": "#(reduce \n  (fn [list,item] (if (not= (last list) item) (conj list item) list))\n\t[]\n\t%)", "problem": 30, "user": "500e6c4ee4b04a05d36fcc05"}, {"code": "(fn [s]\n    ((fn [in out]\n       (if (empty? in)\n         out\n         (if (= (first in)\n                (last out))\n           (recur (rest in) out)\n           (recur (rest in) (conj out (first in))))))\n     s []))", "problem": 30, "user": "50119c07e4b028e9d38b393f"}, {"code": "reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '()", "problem": 30, "user": "4ff9f5c5e4b0678c553fc3b4"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fc9a977e4b0ee37620e1847"}, {"code": "#(mapcat distinct (partition-by identity % ))", "problem": 30, "user": "4f9a0f71e4b0dcca54ed6d04"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fae0b85e4b081705acca245"}, {"code": "(fn [coll] (reduce (fn [l x] (if (= x (last l)) l (conj l x))) [] coll))", "problem": 30, "user": "5012aefce4b0c8732600222a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "500ee13be4b00fff93030fa1"}, {"code": "(fn a [xs]\n  (cond (empty? xs) nil\n        (= (first xs) (second xs)) (a (rest xs))\n        true (conj (a (rest xs)) (first xs))))", "problem": 30, "user": "4feef09ae4b0678c553fc30e"}, {"code": "(fn [x]\n  (map first (partition-by identity x)))", "problem": 30, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn [coll] (reduce #(if-not (= (last %1) %2)(conj %1 %2) %1) [] coll))", "problem": 30, "user": "50054b5ce4b0678c553fc45f"}, {"code": "(fn [x] \n  (conj \n    (map #(% 1) \n      (filter \n        #((complement =) (nth x (% 0)) (% 1))\n        (map-indexed vector (rest x)))) (first x)))", "problem": 30, "user": "4f8320e9e4b033992c121c18"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "5007f751e4b0b17c647f522b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5013141de4b0f26a0e3320a9"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5014718fe4b094324338f8e3"}, {"code": "(fn [coll]\n  (loop [my-vec []\n         x coll]\n    (if x\n      (if (not= (peek my-vec) (first x))\n        (recur (conj my-vec (first x)) (next x))\n        (recur my-vec (next x)))\n      my-vec)))", "problem": 30, "user": "4f98da04e4b0dcca54ed6cf7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50142490e4b07d18bdaaf70a"}, {"code": "reduce #(if (not= (peek %1) %2) (conj %1 %2) %1) []", "problem": 30, "user": "500e91aae4b00fff93030f99"}, {"code": "(fn nub [[f s & rest :as all]]\r\n  (if (nil? all)\r\n    nil\r\n    (if (= f s)\r\n      (nub (next all))\r\n      (list* f (nub (next all))))))", "problem": 30, "user": "501577ade4b0aaedd199e911"}, {"code": "(fn [coll]\n  (map first\n       (partition-by #(list %) coll)))", "problem": 30, "user": "5014754de4b094324338f8e5"}, {"code": "#(map first\n  (partition-by identity %))", "problem": 30, "user": "5012614ee4b02a085b99dc79"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50127fbfe4b030d97e4db70f"}, {"code": "(fn a ([[x & xs]] (a xs x [x])) ([[x & xs] cur acc] (let [newacc (if (= cur x) acc (conj acc x))] (if (empty? xs) newacc (a xs x newacc)))))", "problem": 30, "user": "50166470e4b052339a490e76"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "500ea957e4b00fff93030f9b"}, {"code": "(fn[x] \n  (loop [l x, v [], f nil]\n    (if (empty? l)\n      (apply list v)\n      (if (= (first l) f)\n        (recur (rest l) v f)\n        (recur (rest l) (conj v (first l)) \n                        (first l))))))", "problem": 30, "user": "500b61b1e4b03d00572d2d81"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "(fn c[s]\n  (let [f (first s)]\n       (if (= 1 (count s))\n           [f]\n           (if (= f (second s))\n             (c (rest s))\n             (cons f (c (rest s)))))))", "problem": 30, "user": "501284d9e4b030d97e4db710"}, {"code": "(fn b [x] (loop [n x m '()] (if (empty? n) (reverse m) (if (= (first n) (first (rest n))) (recur (rest n) m) (recur (rest n) (conj m (first n)))))))", "problem": 30, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn [coll] (reduce #(if (= %2 (peek %1)) %1 (conj %1 %2)) (vector (first coll)) coll))", "problem": 30, "user": "501688f7e4b052339a490e7a"}, {"code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (concat %1 [%2])) [(first x)] (rest x)))", "problem": 30, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "reduce \n  #(if (= (last %) %2) \n       % \n       (conj % %2)) []", "problem": 30, "user": "4ff2f0a9e4b0678c553fc341"}, {"code": "(fn this [w]\r\n;    (println w)\r\n;(let [ret\r\n     (\r\n       (fn clr [list prev]\r\n;         (println \"list: \" list \", prev: \" prev)\r\n         (if\r\n           (not-empty list)\r\n           (cond\r\n             (nil? prev) (cons (first list) (clr (rest list) (first list)))\r\n             (= prev (first list)) (clr (rest list) prev)\r\n             :else (cons (first list) (clr (rest list) (first list)))\r\n           )\r\n         )\r\n       )\r\n       (seq w)\r\n       nil\r\n     )\r\n;] (println \"ret: \" ret) ret)\r\n  )", "problem": 30, "user": "501819efe4b02f523d7cc5eb"}, {"code": "(fn rem_dupes [x]\n  (\n    if(not-empty x)\n      (\n        if(= (first x) (second x))\n          (rem_dupes (rest x))\n          (cons (first x) (rem_dupes (rest x)))\n      )\n  )\n)", "problem": 30, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "(fn [s] (let [acc []] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) acc s)))", "problem": 30, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn compress [coll]\r\n  (when-let [[f & r] (seq coll)] \r\n    (if (= f (first r)) \r\n      (compress r) \r\n      (cons f (compress r)))))", "problem": 30, "user": "50182f53e4b02f523d7cc5ec"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fa719c0e4b081705acca1bf"}, {"code": "(fn[s] \n    (let [f (first s)\n          r (reduce \n        (fn[x y] {:r (if (= (x :p) y) (x :r) (conj (x :r) y)) :p y})\n        {:r [(first s)] :p (first s)}\n        (next s))]\n        (r :r)\n    )\n)", "problem": 30, "user": "5017eface4b02f523d7cc5e7"}, {"code": "(fn [myseq]\n  (loop [acc '() old myseq]\n    (cond\n      (empty? old)\n        acc\n      (= (last acc) (first old))\n        (recur acc (rest old))\n      :else\n        (recur (concat acc [(first old)]) (rest old))\n    )\n  )\n)", "problem": 30, "user": "501b212ee4b0b12d9c5f4d83"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn [xs]\n  (let [f (fn [xs ys]\n            (if (seq xs)\n              (recur (drop-while #(= (first xs) %) xs)\n                     (conj ys (first xs)))\n              ys))]\n    (f xs [])))", "problem": 30, "user": "501c76eae4b01d3bc87c0201"}, {"code": "(fn compress [sq]\n  (if (= (count sq) 1)\n    sq\n    (if (= (first sq) (second sq))\n      (compress (rest sq))\n      (cons (first sq) (compress (rest sq))))))", "problem": 30, "user": "50013694e4b0678c553fc417"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (cmprs r)\n      (cons f (cmprs r)))))", "problem": 30, "user": "4f329974e4b0d6649770a093"}, {"code": "#(reduce (fn [res elem] \n              \t  (if (not(= (last res) elem))\n\t\t      (concat res [elem])\t\t\n\t\t      res)) (empty %) (seq %))", "problem": 30, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn [x] (map (fn [a] (reduce (fn [c d] c) a )) (partition-by identity x)))", "problem": 30, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "(fn ! \n  ([x] (! (first x) (rest x)))\n  ([x xs] (if (not-empty xs)\n            (if (= x (first xs))\n                (! x (rest xs))\n                (cons x (! (first xs) (rest xs))))\n            (list x))))", "problem": 30, "user": "5020d033e4b0cb6ebc0a42fa"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "5020d2aee4b0cb6ebc0a42fb"}, {"code": "(fn [x]\n  (map first (partition-by identity x)))", "problem": 30, "user": "501c1492e4b086d93747d180"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e6a5158535d8ccf87e9fec5"}, {"code": "(fn rd [s] (reduce \n  #(if (= %2 (last %1))\n      %1\n      (conj %1 %2))\n        [] (seq s)))", "problem": 30, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn asdf \n   ([x] (asdf '() x))\n   ([x y] (if (empty? y) (reverse x) (asdf (conj x (first y)) (drop-while #(= (first y) %1) (rest y)))))\n   )", "problem": 30, "user": "5012036ce4b0a040369c12f4"}, {"code": "(fn cmp [s]\n  (if (empty? s) s\n    (let [f (first s), ff (second s), r (rest s)]\n      (if (= f ff) (cmp r) (cons f (cmp r))) \n    )\n  )  \n)", "problem": 30, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn [s]\n  (loop [s (seq s), prev nil, acc '()]\n    (if (empty? s) \n      (reverse acc)\n      (recur (rest s) \n             (first s) \n             (if (= prev (first s))\n               acc\n               (cons (first s) acc))))))", "problem": 30, "user": "500cc693e4b05f7c30cfa69a"}, {"code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] %)", "problem": 30, "user": "50223ee2e4b0846bc458ae48"}, {"code": "(fn bork [seq]\n  ( reduce (fn [acc x] \n    (if ( = x ( last acc ) )\n      acc\n      ( concat acc (list x ) ) \n)) () seq ) )", "problem": 30, "user": "5026916fe4b0c969f0b056e1"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "4f1af7e4535d64f603146471"}, {"code": "(fn [x]\n  (reduce \n    (fn [y z] \n      (if (= (last y) z)\n        y\n        (conj y z)))\n    [] x)\n)", "problem": 30, "user": "4fe610fde4b0e8f79898fece"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "501dfd54e4b051153f3b5b80"}, {"code": "(fn [coll]\n  (let [shifted (cons nil coll)]\n    (remove nil? (map (fn [x y] (if (not= x y) x)) coll shifted))))", "problem": 30, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "#(seq (reduce (fn [v x] (if (= (last v) x) v (conj v x))) [] %))", "problem": 30, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn collapse [s]\n  (let [consume, (fn consume [c, s]\n    (if (= c (first s)) (consume c (rest s)) s)) ]\n  (if (< (count s) 2)\n    ; base case\n    s\n    ; recursive case\n    (if (= (first s) (second s))\n      ; remove all duplicates of (first s)\n      (conj (collapse (consume (first s) s)) (first s))\n      ; keep both\n      (conj (collapse (rest s)) (first s))\n    )\n  ))\n)", "problem": 30, "user": "4ffbc28ce4b0678c553fc3d4"}, {"code": "(fn [lst] \n  (remove nil? ((fn [lst]\n    (let [nextOK (partial (fn [l i] (= (get l i) (get l (+ i 1)))) lst)\n          mapFunc (fn [i x] (if (nextOK i) nil x)) ]\n  (map-indexed mapFunc lst))) lst)))", "problem": 30, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "502ac96de4b0614b5299611b"}, {"code": "reduce #(if (= %2 (last %1)) %1 (concat %1 [%2])) []", "problem": 30, "user": "502873a8e4b01614d1633ff8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ff54bfbe4b0678c553fc369"}, {"code": "(fn [c]\n  (\n    (if (string? c)\n      #(apply str %)\n      (fn [x] x))\n    (reverse (reduce\n      (fn [a b] (if (= (peek a) b)\n        a\n        (conj a b)))\n      '()\n      c))))", "problem": 30, "user": "4fb1325de4b081705acca276"}, {"code": "#(reverse(reduce (fn [r v] (if (= (first r) v) r (conj r v))) '() %))", "problem": 30, "user": "502a3ffbe4b01f0b5e5efaa5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "502ad2cae4b0614b5299611f"}, {"code": "(fn [v]\r\n  (loop [idx 0 cur nil result []]\r\n\t\t(cond\r\n\t\t\t(== idx (count v)) result \r\n\t\t\t:else (let [x (nth v idx)] \r\n\t\t\t\t(recur (inc idx) x (if (not= x cur) (conj result x) result))))))", "problem": 30, "user": "5028bce0e4b01614d1633ffb"}, {"code": "#(map first (partition-by identity %))\n\n;(letfn [(split [coll]\n;          (let [[elem & more] coll]\n;            [elem (drop-while (partial = elem) more)]))]\n;  (fn compress [coll]\n;    (loop [coll coll, ans []]\n;      (if (empty? coll)\n;        ans\n;        (let [[elem remaining] (split coll)]\n;          (recur remaining\n;                 (conj ans elem)))))))", "problem": 30, "user": "4efa3d4b535dced4c769f270"}, {"code": "(fn comps [coll] (\n  when-let [[f & r] (seq coll)]\n(if (= f (first r))\n(comps r)\n(cons f (comps r)))))", "problem": 30, "user": "502113cee4b0ef1d2d4433b8"}, {"code": "(fn [lst] (reverse (reduce (fn [r e] \n  (if (= (first r) e) r (cons e r))) '() lst)))", "problem": 30, "user": "4ee528fb535d1385b2869d87"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn [s] (reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) [] s))", "problem": 30, "user": "502d387fe4b0d96a44ab202f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5025b93ce4b0c969f0b056df"}, {"code": "reduce #(if (= (last %1) %2)\n            %1\n            (conj %1 %2))\n       []", "problem": 30, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "(fn foo [x]\n  (cond\n    (= (count x) 1) x\n    (= (first x) (second x)) (foo (rest x))\n    :else (cons (first x) (foo (rest x)))))", "problem": 30, "user": "4dea9fae535d08e6dec9fe02"}, {"code": "(fn no-dups [lst]\n  (let [f (first lst) r (second lst)]\n    (cond (empty? (rest lst)) lst\n          (= f r) (no-dups (rest lst))\n          true (cons f \n                     (no-dups (rest lst))))))", "problem": 30, "user": "502a4fdfe4b09dd42f6f3644"}, {"code": "(fn [s] (map #(first(seq %)) (partition-by (fn [x] x) s)))", "problem": 30, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn [x]\n  (map first (partition-by identity x)))", "problem": 30, "user": "4feded14e4b0d2a5fc2962ec"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "502b0804e4b063e52107afad"}, {"code": "#(reduce (fn [a b] (if (not= (last a) b) (conj a b) a)) [] %)", "problem": 30, "user": "5030f16fe4b05b7df5a0b84b"}, {"code": "reduce \n  (fn [coll elem] \n    (if (= (last coll) elem)\n      coll\n      (conj coll elem)))\n  []", "problem": 30, "user": "4fb01e53e4b081705acca260"}, {"code": "(fn [s]\n  (loop [s s a (first s) b (fnext s) r '()]\n    (if (nil? b) (reverse (conj r a))\n        (recur (rest s) b (fnext (rest s))  (if (not (= a b)) (cons a r) r )))))", "problem": 30, "user": "5029fccee4b023940c84aa47"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5032b066e4b00c0952a257ea"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fe9b372e4b0547ebccb246b"}, {"code": "(fn [x] \n  (reduce \n    (fn [accum elem]\n      (if (= elem (last accum))\n        accum\n        (conj accum elem)))\n  [] x))", "problem": 30, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn [coll]\n  (reduce (fn [sum val]\n    (if (= (last sum) val)\n      sum\n      (concat sum (list val)))) (list) coll))", "problem": 30, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "(fn h [x] (if (empty? x) '()\n          (if (= (first x) (second x)) (h (rest x))\n          (cons (first x) (h (rest x))))))", "problem": 30, "user": "502d39f8e4b0d96a44ab2032"}, {"code": "(fn [input]\n  (loop [results [], last-char nil, elts input]\n    (if (empty? elts)\n      results\n      (if (= (first elts) last-char)\n        (recur results last-char (rest elts))\n        (recur (conj results (first elts)) (first elts) (rest elts))))))", "problem": 30, "user": "502940a9e4b061fd216be4b8"}, {"code": "#(loop [x nil xs % r []] (let [fir (first xs)] (if (not (seq xs)) r (if (not= x fir) (recur fir (rest xs) (conj r fir)) (recur fir (rest xs) r)))))", "problem": 30, "user": "5032b398e4b00c0952a257eb"}, {"code": "#(keep identity \n  (map (fn [a b](if (not= a b) a)) \n    % (cons nil %)))", "problem": 30, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [s]\r\n  (loop [ss s\r\n   r []]\r\n    (if (nil? ss)\r\n      r\r\n      (recur (next ss)\r\n\t     (if-not (= (first ss) (second ss))\r\n\t       (conj r (first ss))\r\n\t       r)))))", "problem": 30, "user": "4fdc067fe4b05e33b9224f69"}, {"code": "(fn c [x]\n  (cond (empty? x) x\n        (= (first x) (second x)) (c (rest x))\n        :else (cons (first x) (c (rest x)))))", "problem": 30, "user": "502d3912e4b0d96a44ab2030"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5034a14de4b062bc5d7ae165"}, {"code": "(fn [s]\n  (reduce \n    (fn [acc n]\n      (if (= (last acc) n)\n        acc\n        (conj acc n))\n       )\n    (vector (first s))\n    s\n  )\n)", "problem": 30, "user": "4fe9dda9e4b0547ebccb2474"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "#(reduce\n  (fn [s i]\n    (if (= (last s) i)\n      s\n      (conj s i)))\n  []\n  %)", "problem": 30, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "#(cons (first %)  \r\n        (->> % (partition 2 1) \r\n                         (filter (fn [[x y]] (not= x y))) (map second)))", "problem": 30, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn [xs] (reduce (fn [cul x]\r\n            (if (= (last cul) x)\r\n              cul\r\n              (conj cul x)\r\n              )\r\n            )\r\n          []\r\n          xs)\r\n)", "problem": 30, "user": "4fc45c07e4b081705acca349"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50352431e4b0a84c1d88f620"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "5029131ae4b0b6c928ad61ff"}, {"code": "(fn [s]\n  (map first (partition-by identity s)))", "problem": 30, "user": "4f3ae998e4b0e243712b1f1f"}, {"code": "#(loop [x [] d (first %)  m (rest %) ] \n   (if d (if (= d (first m) ) \n   (recur x (first m) (rest m) ) \n   (recur (conj x d)  (first m) (rest m) ) \n   )\n x\n )\n)", "problem": 30, "user": "4e952463535dbda64a6f6b31"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "(fn compress\n     ([list] (compress list []))\n     ([old compressed]\n       (if (empty? old)\n        compressed\n        (compress (rest old) \n                (if (= (first old) (second old) ) compressed (conj compressed (first old)))))))", "problem": 30, "user": "5038f8d2e4b088a6a14ca75f"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "50390828e4b088a6a14ca762"}, {"code": "#(reduce (fn [a b] \n  (if (= (last a) b) a (conj a b))) [] %)", "problem": 30, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn [lst]\n  (loop [f nil\n         l lst\n         r []]\n    (if (empty? l) r\n        (recur (first l) (rest l)\n               (if (= (first l) f) r\n                   (conj r (first l)))))))", "problem": 30, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn cmp [coll] (when-let [[f & r] coll] (if (= f (first r)) (cmp r) (conj (cmp r) f))))", "problem": 30, "user": "5035503de4b0ed9c821488f8"}, {"code": "(fn [s] (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [(first s)] (rest s)))", "problem": 30, "user": "503b6995e4b07a1917cc34dd"}, {"code": "#(->> %\n(partition-by identity )\n(map first) \n)", "problem": 30, "user": "503917a0e4b088a6a14ca763"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5036dea0e4b0af0658af77a4"}, {"code": "(fn anon [x]\n  (cond\n    (= (count x) 1) x\n    (= (first x) (second x)) (anon (rest x))\n    true (cons (first x) (anon (rest x)))))", "problem": 30, "user": "503cc8cae4b06c4e0e1fa251"}, {"code": "(fn [col] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] col))", "problem": 30, "user": "5033ed65e4b062bc5d7ae15a"}, {"code": "(fn [x]\n  (reduce (fn [s a]\n            (if (= (last s) a)\n              s\n              (conj s a)\n              ))\n          [] x))", "problem": 30, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn compr [coll]\n  (when-let [[f & r] (seq coll)]\n     (if (= f (first r))\n        (compr r)\n        (cons f (compr r)))))", "problem": 30, "user": "4f030a38535dcb61093f6a47"}, {"code": "(fn[x] (map #(first %) (partition-by identity x)))", "problem": 30, "user": "503b7d8fe4b07a1917cc34de"}, {"code": "(fn [s] (reverse  (reduce (fn [a i]\r\n                                      (if (= i (first a))\r\n                                        a\r\n                                        (cons i a)))\r\n                                    [] s)))", "problem": 30, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "(fn trm [list]\n  (when-let [[f & r] (seq list)]\n    (if (= f (first r)) (trm r) (cons f (trm r)) )))", "problem": 30, "user": "503c02e5e4b0fc0f99c2e54e"}, {"code": "(fn removedup [coll]\n  ((fn [-coll -result] \n    (if (empty? -coll)\n      -result\n      (if (= (first -coll) (last -result) )\n         (recur (rest -coll) -result)\n         (recur (rest -coll) (concat -result [(first -coll)] ) )))\n    ) (rest coll) [(first coll)] ))", "problem": 30, "user": "4f038ed6535dcb61093f6b24"}, {"code": "#(loop [seqs % rst []]\n    (if (empty? seqs) rst\n      (if (not= (first seqs) (last rst))\n        (recur (rest seqs) (conj rst (first seqs)))\n        (recur (rest seqs) rst))))", "problem": 30, "user": "50399468e4b088a6a14ca768"}, {"code": "(fn [arr] (reduce #(if (= (last %) %2) % (conj % %2)) [] (seq arr)))", "problem": 30, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn [n]\r\n  (loop [s (conj [] (first n)) elems (rest n)]\r\n  (if (seq elems)\r\n    (if (not= (peek s) (first elems))\r\n      (recur (conj s (first elems)) (rest elems))\r\n      (recur s (rest elems)))\r\n    s)))", "problem": 30, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn x\n  ([l] (if (empty? l) l (x (first l) (rest l))))\n  ([h t] (if (empty? t)\n          [h]\n          (if (= h (first t))\n            (x t)\n            (cons h (x t))))))", "problem": 30, "user": "503de5aae4b06c4e0e1fa259"}, {"code": "(fn c [-list]\n  (letfn [(c-helper [x acc]\n  (if x \n      (recur\n       \t(next x)\n\t\t(if\n          (= (first acc) (first x))\n          acc\n       \t  (cons (first x) acc)\n       ))\n      acc))]\n  (reverse (c-helper -list '()))))", "problem": 30, "user": "50293245e4b08353e5d459cf"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "5012ec0ae4b0c87326002230"}, {"code": "(fn [x] (map #(first %) (filter #(not= (first %) (last %)) \n                                (partition 2 (#(interleave % (cons nil (butlast %))) x)))))", "problem": 30, "user": "502d39c5e4b0d96a44ab2031"}, {"code": "#(reduce (fn [o i] (if (= (last o) i) o (conj o i))) [] %)", "problem": 30, "user": "4e8708e3535dceadca46984e"}, {"code": "(fn [s]\n  (reduce\n  (fn [acc el]\n    (if (= (last acc) el)\n        acc\n        (conj acc el)))\n  []\n  s))", "problem": 30, "user": "50427899e4b0add3005c0fc2"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "(fn [x] (map first (filter #(let [[a b] %] (not= a b)) (partition-all 2 1 x))))", "problem": 30, "user": "5008d149e4b0144d4f561e41"}, {"code": "(fn [seq]\n  (loop [vector [] last false rem seq]\n    (if (empty? rem)\n      vector\n      (if (= (first rem) last)\n        (recur vector last (rest rem))\n        (recur (conj vector (first rem)) (first rem) (rest rem)))\n)))", "problem": 30, "user": "4fb266a5e4b081705acca28c"}, {"code": "(fn [s]\n  (loop [s s r [] last nil]\n    (if (= s '())\n      r\n      (if (= (first s) last)\n        (recur (rest s) r last)\n        (recur (rest s) (conj r (first s)) (first s))))))", "problem": 30, "user": "50435852e4b034ff00315d22"}, {"code": "#(reduce (fn[a b] (if (= (last a) b) a (conj a b))) [] %)", "problem": 30, "user": "50431cbce4b034ff00315d1c"}, {"code": "(fn compr [xs]\n  (if (empty? xs)\n    xs\n    (cons (first xs)\n      (compr (drop-while #(= (first xs) %) xs)))))", "problem": 30, "user": "4fab1ea1e4b081705acca210"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4db0114d838c48654951d9b8"}, {"code": "#(reduce \n  (fn [x y] (if (= y (last x)) x (conj x y))) \n    [] %)", "problem": 30, "user": "50378996e4b0af0658af77ae"}, {"code": "(fn [s] (mapcat distinct (partition-by identity s)))", "problem": 30, "user": "503e7f06e4b06c4e0e1fa268"}, {"code": "; dammit, the api doc basically\n; gives you the answer\n; http://clojuredocs.org/clojure_core/clojure.core/partition-by\n#(map first (partition-by identity %))", "problem": 30, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "problem": 30, "user": "4db5708d535d87e67b28fe0c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50479524e4b0371827a27bc4"}, {"code": "(fn cmprs [coll] \n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (cmprs r)\n      (cons f (cmprs r)))))", "problem": 30, "user": "50481532e4b0ec70b3ef8d96"}, {"code": "(fn [coll]\r\n (map first\r\n       (filter \r\n        #(not= (first %) (second %))\r\n        (concat (partition 2 1 coll) (conj () (conj () (last coll)))))))", "problem": 30, "user": "503354c3e4b0c6c1199c710c"}, {"code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "problem": 30, "user": "5046b003e4b011c5dfee7727"}, {"code": "#(cons (first %) (keep (fn[x] (if (apply not= x) (last x))) (partition 2 1 %)))", "problem": 30, "user": "50432da5e4b034ff00315d1e"}, {"code": "#(reduce (fn [x y] (cond (= x y) x :else (cond (seq? x) (cond (= (last x) y) x :else (concat x [y])) :else (concat [x] [y])))) (apply list %))", "problem": 30, "user": "503ff621e4b0c9bf6384b00f"}, {"code": "reduce (fn [x, y] (if (= (last x) y)\n                     x\n                     (conj x y))) []", "problem": 30, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(fn [x]\n   (reverse (reduce (fn [y xs]\n            (if (= (first y) xs)\n              y\n              (cons xs y)))\n           '()\n           x)))", "problem": 30, "user": "4f616892e4b0defedf855fbf"}, {"code": "(fn comp [coll]\n  (let [pairs\n    (filter #(not= (first %) (second %)) (partition 2 1 coll))]\n    (cons (first (first pairs)) (map #(second %) pairs))\n  )\n)", "problem": 30, "user": "504d0116e4b022602c20b089"}, {"code": "(fn f [s]\r\n  (let [seqs (seq s)\r\n        [kar & remainder] seqs]\r\n    (cond\r\n      (empty? seqs) s\r\n      (= kar (second seqs)) (f remainder)\r\n      :else (cons kar (f remainder))\r\n    )\r\n  )\r\n)", "problem": 30, "user": "5043a536e4b034ff00315d24"}, {"code": "(fn [s]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "#(reduce \n  (fn [l n] \n    (if (= n (last l)) l (conj l n)))\n  []\n  %\n  )", "problem": 30, "user": "504e07f3e4b078edc5f593a4"}, {"code": "reduce #(if (not (= (last %1) %2))\n    (conj %1 %2)\n    %1) []", "problem": 30, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "(fn cmprs [s]\n  (if\n    (< (count s) 2) s\n    (if\n      (= (first s) (second s))\n        (cmprs (rest s))\n      (cons (first s)\n        (cmprs (rest s))))))", "problem": 30, "user": "504e48ace4b0f6ff3350c498"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "(comp (partial map first)\r\n      (partial partition-by identity))", "problem": 30, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "#(map first (map distinct (partition-by identity %)))", "problem": 30, "user": "504e2600e4b0f6ff3350c46f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "504e13fce4b078edc5f593bc"}, {"code": "#(loop [in %, out []]\n  (if (empty? in)\n    out\n    (recur (rest in)\n           (if (= (first in) (second in))\n               out\n               (conj out (first in))))))", "problem": 30, "user": "504ed350e4b069badc5a33d1"}, {"code": "(fn supress_dups [x]\n  (if (< (count x) 2)\n    x\n    (if (= (first x) (second x))\n      (supress_dups (rest x))\n      (concat (list (first x)) (supress_dups (rest x)))\n)\n)\n)", "problem": 30, "user": "504e2f98e4b0f6ff3350c47e"}, {"code": "#((fn trim [ls p] \n   (cond \n     (empty? ls) '()\n     (= (first ls) p) (trim (rest ls) p) \n     :else (cons (first ls) (trim (rest ls) (first ls)))))\n  % 'NONCE!)", "problem": 30, "user": "504e397ee4b0f6ff3350c485"}, {"code": "(fn [x](reduce #( if (not= (last %1) %2) (concat %1 [%2]) %1 ) '() x))", "problem": 30, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "(fn squish [l]\n  (when-let [[f & r] (seq l)]\n    (if (= (first r) f)\n        (squish r)\n        (cons f (squish r)))))", "problem": 30, "user": "504e3afae4b0f6ff3350c488"}, {"code": "#(let [sc (cons nil %)]\n    (remove nil? (map (fn [x y] (if (not= x y) x)) % sc)))", "problem": 30, "user": "504f44cfe4b0a02f9cffde65"}, {"code": "#(map last (partition-by identity %))", "problem": 30, "user": "504dff92e4b078edc5f5938a"}, {"code": "(fn remove-dup_\n  ([l] (cons (first l) (remove-dup_ l (first l))))\n  ([[x & xs] s]\n    (if (nil? x)\n      ()\n      (if (= x s)\n        (remove-dup_ xs x)\n        (cons x (remove-dup_ xs x))))))", "problem": 30, "user": "504e127fe4b078edc5f593b6"}, {"code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "problem": 30, "user": "504e14c2e4b078edc5f593bf"}, {"code": "#(reverse (loop [p nil col % ret '() ]  \r\n          (if (empty? col) \r\n            ret \r\n            (recur (first col) (rest col) (if (= p (first col))\r\n                                             ret\r\n                                             (cons (first col) ret)))) ))", "problem": 30, "user": "50463347e4b011c5dfee771e"}, {"code": "(fn [stream]\n  (reverse\n    (reduce\n      #(if\n        (or (empty? %1) (not= (first %1) %2))\n          (conj %1 %2)\n          %1)\n      '()\n      stream)))", "problem": 30, "user": "504c8165e4b09724c857af31"}, {"code": "reduce (fn [acc, n] (if (= n (last acc)) acc (conj acc n))) []", "problem": 30, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "(fn [c] (reduce (fn [acc n] (if (= (last acc) n) acc (conj acc n))) [] c))", "problem": 30, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn [sq]\n  ((fn [s p r]\n      (if-let [f (first s)]\n        (if (not= p f)\n          (recur (rest s) f (conj r f))\n          (recur (rest s) f r))\n        r))\n   (rest sq) (first sq) [(first sq)]))", "problem": 30, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "reduce (fn [s e] (if-not (= e (last s)) (conj s e) s)) []", "problem": 30, "user": "504e9f5ce4b069badc5a33bd"}, {"code": "(fn dedup [sq] (if (empty? (rest sq)) \n             (list (first sq))\n             (if (= (first sq) (first (rest sq)))\n                 (dedup (rest sq))\n                 (cons (first sq) (dedup (rest sq))))))", "problem": 30, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn [xs] \n  (reduce #(if (= (last %1) %2)\n               %1\n               (conj %1 %2))\n          []\n          (seq xs)))", "problem": 30, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn [s] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) (apply (partial conj [[]]) s)))", "problem": 30, "user": "5050b107e4b063148f524126"}, {"code": "(fn compress [xs]\n  (cond\n    (empty? xs) '()\n    (= (first xs) (fnext xs)) (recur (cons (first xs) (nnext xs)))\n    :else (cons (first xs) (compress (next xs)))))", "problem": 30, "user": "50456731e4b01f6c9a8b236b"}, {"code": "(fn remdup [lst]\n  (if (empty? lst)\n      lst\n      (if (empty? (rest lst))\n          lst\n          (if (= (first lst) (first (rest lst)))\n              (remdup (rest lst))\n              (cons (first lst) (remdup (rest lst)))))))", "problem": 30, "user": "504e1fdde4b0f6ff3350c468"}, {"code": "(fn [l] (reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] l))", "problem": 30, "user": "504e7b88e4b069badc5a33ad"}, {"code": "(fn [my-seq]\n  (loop [my-seq my-seq new-seq '()]\n    (cond\n     (empty? my-seq) (reverse new-seq)\n     (= (compare (first my-seq) (second my-seq)) 0)\n     (recur (rest my-seq) new-seq)\n     :else\n     (recur (rest my-seq) (conj new-seq (first my-seq))))))", "problem": 30, "user": "4eb6f065535d7eef30807372"}, {"code": "(fn remove-dup [xs]\n  (loop [new-xs [] prev (first xs) xs (rest xs)]\n    (if (empty? xs)\n      (reverse (cons prev new-xs))\n        (if (= prev (first xs))\n          (recur new-xs (first xs) (rest xs))\n(recur (cons prev new-xs) (first xs) (rest xs))))))", "problem": 30, "user": "504f5804e4b0a02f9cffde72"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50436470e4b034ff00315d23"}, {"code": "(fn f [x] (if (or (empty? x) (empty? (rest x))) \n  x\n  (if (= (first x) (second x))\n    (f (rest x))\n    (cons (first x) (lazy-seq (f (rest x)))))))", "problem": 30, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [x]\r\n                          (loop [res [] col x last \"\"]\r\n                            (let [a (first col) b (rest col)]\r\n                            (if (nil? a)\r\n                              res\r\n                              (if (= a last)\r\n                                (recur res b a)\r\n                                (recur (conj res a) b a))))))", "problem": 30, "user": "5031eb3be4b000fc67a99a84"}, {"code": "(fn [col]\n  (let [same? (fn [[x y]] (= x y))]\n    (let [z (partition-all 2 1 col)]\n      (map first (filter #(not (same? %)) z)))))", "problem": 30, "user": "50435689e4b034ff00315d21"}, {"code": "(fn remove-d \r\n  ([s]\r\n   (remove-d s nil '()))\r\n  ([s last-item result]\r\n   (if (seq s)\r\n     (let [x (first s)\r\n           xs (rest s)]\r\n       (if (= x last-item)\r\n         (remove-d xs x result)\r\n         (remove-d xs x (cons x result))))\r\n     (reverse result))))", "problem": 30, "user": "4e75edfe535d7a570dd295c7"}, {"code": "(fn rd [s]\n  (if (empty? s)\n    s\n    (if (= (first s) (second s))\n      (rd (rest s))\n      (cons (first s) (rd (rest s))))))", "problem": 30, "user": "503e6047e4b06c4e0e1fa266"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn [coll] \n  (reverse\n   (reduce \n    (fn [xs x] \n     (if (= (first xs) x) xs (conj xs x))) () coll)))", "problem": 30, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn [lst] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) (list (first lst)) (rest lst))))", "problem": 30, "user": "50555c06e4b0ce54f56f03fa"}, {"code": "(fn [x] \n  (reverse \n\t\t(reduce \n\t\t\t(fn [a x] (if (= (first a) x) a (cons x a))) \n\t\t\t[]\n\t\t\tx)))", "problem": 30, "user": "504f3f13e4b0a02f9cffde60"}, {"code": "#(let\n  [arg %\n\t last-item (atom \"\")]\n\t(letfn\n\t [(set-item [x] (reset! last-item x))\n\t  (add-to-stack? [x] \n\t\t\t (let\n\t\t\t     [ret (not (= @last-item\n\t\t\t\t          x))]\n\t\t\t   (set-item x)\n\t\t\t   ret))]\n\t (if (string? arg)\n\t  (filter add-to-stack? (.split arg \"\"))\n\t  (filter add-to-stack? arg))))", "problem": 30, "user": "4f601623e4b0defedf855fa3"}, {"code": "(fn [xs] (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() xs))", "problem": 30, "user": "504f2efae4b0e7ad84dbc4c9"}, {"code": "(fn dedup [ls]\n  (cond (empty? ls) ls\n     \t(= (first ls) (first (rest ls))) (dedup (rest ls))\n        :else (cons (first ls) (dedup (rest ls)))))", "problem": 30, "user": "4ff769bce4b0678c553fc38f"}, {"code": "(fn [l]\n  (map first (partition-by identity l)))", "problem": 30, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn [x]\n  (map first (partition-by identity x)))", "problem": 30, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn my-cmprs [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (my-cmprs r)\n      (cons f (my-cmprs r)))))", "problem": 30, "user": "5053de37e4b0b1b9d1860ea8"}, {"code": "(fn uniq [xs]\n      (map first (partition-by identity xs)))", "problem": 30, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn [xs]\r\n     (let [d2 (fn ([] `())\r\n     ([x y] \r\n         (if (seq? x)\r\n             (if (= (last x) y)\r\n             (seq x)\r\n             (concat x [y]))\r\n         (concat [x y]))))]\r\n         (reduce d2 (cons `() xs))))", "problem": 30, "user": "5052ab7ee4b0a561d07d8f20"}, {"code": "reduce  (fn [x y] (if (= (last x) y) x (conj x y))) []", "problem": 30, "user": "5040edf4e4b0ff5d2cc40db5"}, {"code": "(fn rem-dupes\r\n  ([l] (rem-dupes l nil nil))\r\n  ([[h & t] out last]\r\n     (if (nil? h)\r\n       (reverse out)\r\n       (if (= h last)\r\n   (rem-dupes t out last)\r\n\t (rem-dupes t (cons h out) h)))))", "problem": 30, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn [col]\n  (:col\n  (reduce\n    (fn [acc e]\n      (if (= (:last acc) e)\n        acc\n        (-> acc\n          (assoc :last e)\n          (update-in [:col] conj e))))       \n    {:col []}\n    col)))", "problem": 30, "user": "4f06f90a535dcb61093f6c1b"}, {"code": "(fn f[s & [l]]\n  (if (empty? s)\n    s\n    (if (= l (first s))\n      (f (rest s) (first s))\n      (cons (first s) (f (rest s) (first s)))\n    )\n  )\n)", "problem": 30, "user": "50512f61e4b0b30bd8f4f83f"}, {"code": "(fn [xs] (map first (partition-by identity xs)))", "problem": 30, "user": "5042de0de4b034ff00315d1b"}, {"code": "#(mapcat distinct (partition-by identity %))", "problem": 30, "user": "504f3fa3e4b0a02f9cffde62"}, {"code": "(fn [s] ((fn [sq qs]\n       (if (empty? sq)\n\t\t (reverse qs)\n\t         (recur (rest sq) (if (or (= (count sq) 1) (not= (first sq) (second sq)))  \n\t\t\t\t    (cons (first sq) qs)\nqs)))) s ()))", "problem": 30, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50586354e4b06522596eba78"}, {"code": "(fn [x] (for [ch (partition-by identity x)]\n                        (first ch)\n                        ))", "problem": 30, "user": "504f65bae4b0a02f9cffde7e"}, {"code": "(fn [coll]\r\n  (loop [x (first coll)\r\n         y (rest coll)\r\n         z []]\r\n    (if (nil? x)\r\n      z\r\n      (recur (first y) (rest y)\r\n             (if (= x (first y)) z (conj z x))))))", "problem": 30, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5059da46e4b03d2efce48c56"}, {"code": "(fn [x]                                                                    \n  (loop [result [] word x]                                                               \n    (if (empty? word)                                                                    \n      result                                                                             \n      (recur (if (= (first word) (second word)) result                                   \n                 (conj result (first word))) (rest word))                                \n      )))", "problem": 30, "user": "50517ebfe4b0a561d07d8f06"}, {"code": "(fn cmprs [coll]\r\n  (when-let [[f & r] (seq coll)] \r\n    (if (= f (first r)) \r\n      (cmprs r) \r\n      (cons f (cmprs r)))))", "problem": 30, "user": "4fd6e70fe4b0dab7d829f379"}, {"code": "(fn[col] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] col))", "problem": 30, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "(fn [coll]\n  (reduce (fn [acc x]\n    (if (= x (last acc))\n        acc\n        (conj acc x))) [] coll))", "problem": 30, "user": "505bd09fe4b032b709c81373"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5041bdf3e4b06d8231e4fad0"}, {"code": "(fn comprs [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (comprs r)\n      (cons f (comprs r)))))", "problem": 30, "user": "4fea9154e4b0140c20fb9c0a"}, {"code": "(fn d [c]\n  (when-let [[f & r] (seq c)] \n    (if (= f (first r)) \n      (d r) \n      (cons f (d r)))))", "problem": 30, "user": "505b9084e4b032b709c81371"}, {"code": "#(map last (partition-by identity %))", "problem": 30, "user": "505d26aee4b0e6aca564be05"}, {"code": "(fn rdup [xs]\n  (cond (empty? (rest xs)) xs\n        (= (first xs) (fnext xs)) (rdup (rest xs))\n        :else (cons (first xs) (rdup (rest xs)))))", "problem": 30, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn dup [x] (if (= () (rest x))\n                  (list (first x))\n                  (if ((complement =) (first x) (first (rest x)))\n                  (conj (dup (rest x))(first x))\n                  (dup (rest x)))))", "problem": 30, "user": "504e8e48e4b069badc5a33b3"}, {"code": "(fn compress [x]\n  (letfn [(cc [& args]\n      (if (empty? args) '()\n        (if (= (first args) (second args))\n            (apply cc (rest args))\n            (cons (first args) (apply cc (rest args))))) \n  )]\n  (apply cc x)\n  )\n)", "problem": 30, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn [x]\r\n  (filter #(not= nil %)\r\n          (map #(when (not= %1 %2) %1) x (conj (apply vector (rest x)) nil))))", "problem": 30, "user": "4f9aa97ae4b0dcca54ed6d0e"}, {"code": "(fn foo [list & [prev]]\n  (if (empty? list)\n      list\n    (let [hd (first list)\n          rest (foo (rest list) hd)]\n      (if (= prev hd)\n          rest\n        (cons hd rest)))))", "problem": 30, "user": "505cc50ce4b0e6aca564be00"}, {"code": "(fn [x] \r\n ((fn r-consec [prev coll]\r\n  (if (empty? coll)\r\n   (list)\r\n   (if (= prev (first coll))\r\n    (r-consec (first coll) (rest coll))\r\n    (conj (r-consec (first coll) (rest coll)) (first coll))))\r\n ) nil x))", "problem": 30, "user": "505caadfe4b0bcb5664c3d3e"}, {"code": "(fn [iseq]\n  (loop [s iseq acc [] prev nil]\n    (if (empty? s)\n      acc\n      (let [current (first s)]\n        (if (= current prev)\n          (recur (rest s) acc prev)\n          (recur (rest s) (conj acc current) current))))))", "problem": 30, "user": "4f046d70535dcb61093f6bc5"}, {"code": "(fn my-compress [xl]\n  \"Removes the consecutive duplicates from xl.\"\n  (seq (reverse\n        (loop [[x1 x2 & xs] xl\n               yl '()]\n          (if (nil? x2)\n            (cons x1 yl)\n            (if (= x1 x2)\n              (recur (cons x1 xs) yl)\n              (recur (cons x2 xs) (cons x1 yl))))))))", "problem": 30, "user": "4eb47bb1535d7eef30807362"}, {"code": "(fn [s]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "504ec46de4b069badc5a33c8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50602bc6e4b08f2a82ad10ba"}, {"code": "(fn red [ls] \n  (if (seq ls) (if (= (first ls) (second ls)) (red (rest ls)) (cons (first ls) (red (rest ls)))) '())\n)", "problem": 30, "user": "505885c4e4b06522596eba7b"}, {"code": "(fn f\n  \t\t([s] (cons (first s) (f (first s) (rest s))))\n\t\t\t([cur s]\n\t\t\t\t(if (empty? s)\n\t\t\t\t\t'()\n\t\t\t\t\t(if (= cur (first s))\n\t\t\t\t\t\t(f cur (rest s))\n\t\t\t\t\t\t(cons (first s) (f (first s) (rest s)))\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)", "problem": 30, "user": "5048bcf8e4b06e644c63f1ae"}, {"code": "(fn [n] (map first (partition-by identity n)))", "problem": 30, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn [sq]\n  (loop [acc 0, osq []]\n    (if (< acc (count sq))\n        (if (not= (nth sq acc) (last osq))\n            (recur (inc acc) (conj osq (nth sq acc)))\n            (recur (inc acc) osq))\n        osq)))", "problem": 30, "user": "5060d137e4b0dc10a69545a0"}, {"code": "reduce #(if (or (empty? %1) (not= (last %1) %2)) (conj %1 %2) %1) []", "problem": 30, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn u [lst]\n  ((fn uniq [lst elem]\n    (if (seq lst)\n      (if (= elem (first lst))\n        (uniq (rest lst) elem)\n        (cons elem (uniq (rest lst) (first lst))))\n      (list elem)))\n  lst (first lst)))", "problem": 30, "user": "505f55d3e4b08f2a82ad10b0"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "504e72cee4b0f6ff3350c4b4"}, {"code": "(fn [x] (reduce #(if (= (last %) %2) % (conj % %2)) []  x))", "problem": 30, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [a]\n  (map first (partition-by identity a)))", "problem": 30, "user": "4fe9efe5e4b0547ebccb247a"}, {"code": "(fn de-dupe [s]                                                                                                                                               \n(when-let [[f & r] (seq s)]                                                                                                                                     \n  (if (= f (first r))                                                                                                                                           \n    (de-dupe r)                                                                                                                                                 \n    (cons f (de-dupe r)))))", "problem": 30, "user": "4fe9364be4b0547ebccb244e"}, {"code": "(fn [xs]\n  (map first (partition-by identity xs)))", "problem": 30, "user": "50630247e4b05ac47bc68d6b"}, {"code": "(fn [l] (reverse (#(cond\n            (= nil %3) %\n            (= %2 (first %3)) (recur % %2 (next %3))\n            :else (recur (cons (first %3) %) (first %3) (next %3))) nil nil l)))", "problem": 30, "user": "4e8a880b535d65386fec210d"}, {"code": "(fn [xs]\n  (loop [xs xs ys []]\n    (if (empty? xs)\n      ys\n      (let [h (first xs) t (drop-while #(= h %) xs)]\n        (recur t (conj ys h))))))", "problem": 30, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "(partial reduce #(if (= (last %1) %2)\n                %1\n                (conj %1 %2)) '[])", "problem": 30, "user": "502ade49e4b0614b52996120"}, {"code": "(fn [s]\n  (loop [l [(first s)] s (rest s)]\n    (cond\n      (empty? s) l\n      (= (last l) (first s)) (recur l (rest s))\n      :else (recur (conj l (first s)) (rest s)))))", "problem": 30, "user": "50657775e4b0deb876850599"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "505fc8e3e4b08f2a82ad10b6"}, {"code": "reduce (fn [r e] (if (= 0 (compare (last r) e)) r (conj r e))) []", "problem": 30, "user": "5063fe48e4b075d771da6f9e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50645e12e4b007509339a58a"}, {"code": "reduce \n#(if (= (last %) %2)\n      %\n     (conj % %2))\n[]", "problem": 30, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn compress[l] \n  (if (empty? l) '()\n    (if (= (first l) (second l)) \n      (compress (rest l))\n      (cons (first l) (compress (rest l)))\n    )\n  )\n)", "problem": 30, "user": "4f8b05d2e4b02e764a0a5176"}, {"code": "#(first \n     (reduce \n\t   \t(fn [[a l] e] (if (= l e) [a e] [(conj a e) e]))\n\t   \t[[] nil] %))", "problem": 30, "user": "50668a06e4b03d366d7cb2b2"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn [s]\n  (loop [dst [] src s last nil]\n    (if (empty? src)\n      dst\n      (let [h (first src)]\n        (if (= h last)\n          (recur dst (rest src) h)\n          (recur (conj dst h) (rest src) h))))))", "problem": 30, "user": "504db141e4b021508a333965"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5065faf9e4b0313a384e5645"}, {"code": "(fn [s]\n  (reverse\n    (reduce\n      #(if (not= (first %1) %2)\n           (conj %1 %2)\n           %1) '() s)))", "problem": 30, "user": "5057852ce4b0012181721992"}, {"code": "(fn [z] (reverse (reduce (fn [x y] (if (= (first x) y) x (cons y x))) [] z)))", "problem": 30, "user": "50678be5e4b03d366d7cb2c0"}, {"code": "(fn compress [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (compress r)\n      (cons f (compress r)))))", "problem": 30, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "(fn rd [x]\n      (if (< (count x) 2)\n                x\n                (if (= (first x) (second x))\n                    (rd (rest x))\n                    (cons (first x) (rd (rest x)))\n                )\n      )\n)", "problem": 30, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn rem-duplicates\n  [coll]\n  (loop [temp-list coll result []]\n    (if (empty? temp-list)\n      result\n      (if (= (first temp-list) (last result))\n        (recur (rest temp-list) result)\n        (recur (rest temp-list) (conj result (first temp-list)))))))", "problem": 30, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn compress [values] \n  (loop [n values result []]\n    (if (empty? n) result\n      (recur (rest n) (if (= (first n) (last result)) result (conj result (first n)))))))", "problem": 30, "user": "50621cbde4b0341461c88951"}, {"code": "(fn compress [lst]\n  (cond\n    (empty? lst) lst\n    (= (first lst) (second lst)) (recur (rest lst))\n    :else (cons (first lst) (compress (rest lst)))))", "problem": 30, "user": "50611456e4b0dc10a69545a5"}, {"code": "(fn c [s]\n  (when-not (empty? s)\n    (let [t (c (rest s))]\n    (if (= (first s) (second s))\n        t\n        (conj t (first s))))))", "problem": 30, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn f [[c & r]] (cons c (if r (f (drop-while #{c} r)))))", "problem": 30, "user": "4edb4c7c535d10e5ff6f5318"}, {"code": "(fn de-dup [s]\n  (if (seq s)\n    (let [[f & r] s]\n      (cons\n        f\n        (de-dup (drop-while #(= f %) r))\n        )\n      )\n    )\n  )", "problem": 30, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn [x]\n  (let [s (seq x)\n        f (fn f [c, p] \n      (if (seq c)\n        (if (= (first c) p)\n          (f (rest c) p)\n          (cons (first c) (f (rest c) (first c))))\n        '()))]\n    (if s\n      (cons (first s) (f (rest s) (first s))))))", "problem": 30, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "(fn cprs[s]\n  (if (empty? s)\n    s\n    (let [x (first s)\n          xs (drop-while (fn [y] (= x y)) (rest s))]\n      (cons x (cprs xs)))))", "problem": 30, "user": "504e24e2e4b0f6ff3350c46d"}, {"code": "(fn [xs]\n    (map first (partition-by identity xs)))", "problem": 30, "user": "506b0a9ce4b0a2a5463de380"}, {"code": "(fn __ [s]\n   (remove nil?\n    (take-nth (inc (count s))\n     (for [x s y (concat (rest s) [0])]\n       \t(if-not (= x y)\n\t   \t\tx\n       \t)\n     )\n  \t)\n  )\n)", "problem": 30, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "(fn removeDups [x]\n     (if (nil? x)\n       []\n       (let [[a b _] x]\n         (println a)\n         (println b)\n         (println \"-\")\n         (concat \n           (if (= a b)\n             nil\n             [a])\n           (removeDups (next x))))))", "problem": 30, "user": "503efe01e4b06c4e0e1fa26f"}, {"code": "#(\n  (fn remdups \n    [acc curr l]\n    (let [next-curr (first l)\n          r (rest l)]\n      (cond\n        (empty? l) (concat acc (list curr))\n        (= curr next-curr) (remdups acc next-curr r)\n        :else (remdups (concat acc (list curr)) next-curr r))\n      ))\n  '() (first %) (rest %))", "problem": 30, "user": "50573ed8e4b0012181721987"}, {"code": "#(map first (filter (fn [[a b]] (not= a b)) (partition 2 1 nil %)))", "problem": 30, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "reduce #(\n  if (= (last %1) %2)\n  %1\n  (concat %1 (list %2))) '()", "problem": 30, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "(fn squeeze [in]\n  (if (< (count in) 2)\n    in\n    (if (= (first in) (first (rest in)))\n      (squeeze (rest in))\n      (cons (first in) (squeeze (rest in)))\n    )\n  )\n)", "problem": 30, "user": "50608d4ce4b07251188e4455"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "reduce (fn [acc i] (if (and (not (empty? acc)) (= (nth acc (dec (count acc))) i)) acc(concat acc [i]))) []", "problem": 30, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "#(reduce concat (map distinct (partition-by identity %)))", "problem": 30, "user": "4e77c1db535d324fb2983d72"}, {"code": "(fn [s]\n  \t(loop [s (seq s) i nil r []]\n\t\t\t(if (empty? s) r\n\t\t\t(let [e (first s)]\n\t\t\t(recur (rest s) e (if (not= e i) (conj r e) r))))))", "problem": 30, "user": "4eb404ba535d7eef3080735a"}, {"code": "#(map first  (partition-by identity %))", "problem": 30, "user": "4f614976e4b0defedf855fbb"}, {"code": "(fn [coll]\n  (apply list (conj\n    (vec (map first\n    (filter \n      (complement #(= (first %) (last %)))\n        (partition 2 1 coll)))) (last coll))))", "problem": 30, "user": "5071b614e4b0e3170b5a867d"}, {"code": "(fn [s] (remove nil?(map-indexed (fn [idx itm] \r\n               (if (= idx 0)\r\n                 itm\r\n                 (if (not= itm ((vec s) (- idx 1)))\r\n               \r\n                 itm))) s )))", "problem": 30, "user": "5071e520e4b0e3170b5a8683"}, {"code": "(fn [x]\n  (reduce\n    (fn [lst n] (if (= (last lst) n) lst (conj lst n)))\n      [] (seq x)))", "problem": 30, "user": "50589113e4b06522596eba7f"}, {"code": "(fn [coll]\n  (loop [r [(first coll)], last (first r), coll (rest coll)]\n    (if (empty? coll)\n        r\n        (if (not (= (first coll) last))\n            (recur (conj r (first coll)) (first coll) (rest coll))\n            (recur r last (rest coll))))))", "problem": 30, "user": "50706287e4b07bd6ad9b9f2b"}, {"code": "(fn f [str]\n  (when-let [[c & rc] (seq str)]\n    (if (= c (first rc)) \n    (f rc)\n    (cons c (f rc)))))", "problem": 30, "user": "50729f67e4b0e3170b5a868e"}, {"code": "reduce\n  (fn [coll i]\n    (if (empty? coll)\n      (conj coll i)\n      (if\n        (= (nth coll (dec (count coll))) i)\n        coll\n        (conj coll i)))) []", "problem": 30, "user": "506929ffe4b01dc6af13f82b"}, {"code": "(fn [xs] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] xs))", "problem": 30, "user": "502cb310e4b0532a782a5e38"}, {"code": "#(map first (remove (partial apply =) (partition 2 1 \" \" %)))", "problem": 30, "user": "5074b3ece4b054001656acd5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "505f5e2fe4b08f2a82ad10b2"}, {"code": "(fn dedup [s]\r\n  (if (empty? s) ()\r\n    (cons (first s)\r\n          (dedup (drop-while #(= (first s) %) (rest s))))))", "problem": 30, "user": "50748923e4b054001656acd3"}, {"code": "(fn [l] \r\n  (loop [a (first l)\r\n   l (rest l)\r\n\t b [a]]\r\n    (cond (empty? l) b\r\n\t  (= a (first l)) (recur a (rest l) b)\r\n\t  :else (recur (first l) (rest l) (conj b (first l))))))", "problem": 30, "user": "507437c2e4b054001656acd0"}, {"code": "(fn z [l]\r\n  (reduce (fn [src e]\r\n            (if (= (last src) e)\r\n              src\r\n              (conj src e)))\r\n          [] l))", "problem": 30, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "(fn [x]\n  (map first (partition-by identity x)))", "problem": 30, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "(fn [coll]\n  ((fn [x xs acc]\n    (let [ys (drop-while #(= x %) xs)\n          acc' (conj acc x)]\n      (if (seq ys)\n        (recur (first ys) (rest ys) acc')\n        acc')))\n    (first coll) (rest coll) []))\n\n;; => much nicer: #(map first (partition-by identity %))", "problem": 30, "user": "4f32ef71e4b0d6649770a098"}, {"code": "(fn compress-seq [lst]\n  (reverse\n   (reduce (fn [accum val]\n             (if (= val (first accum)) accum (cons val accum)))\n           (list (first lst)) (rest lst))))", "problem": 30, "user": "50763574e4b0a894bb95bf3d"}, {"code": "#(mapcat set (partition-by identity %))", "problem": 30, "user": "4e778d36535d324fb2983d71"}, {"code": "#(map last (partition-by identity %))", "problem": 30, "user": "507a08e4e4b08327cd804a67"}, {"code": "(fn fu12 [s] \n  ((fn z [s1 s2] \n    (if (= (count s1) 0) s2 \n      (if (= (first s2) (last s1)) \n        (z (take (- (count s1) 1) s1) s2) \n        (z (take (- (count s1) 1) s1) \n            (conj s2 (last s1)))))) (seq s) \n                                  \n                            (list)))", "problem": 30, "user": "506f5d68e4b082ae7d1032c7"}, {"code": "(fn[c]\r\n  (reduce #(if (not (= (peek %1) %2))\r\n             (conj %1 %2)\r\n             %1)\r\n          [] c))", "problem": 30, "user": "506ce637e4b0a302964c5490"}, {"code": "(fn [coll]\n  (reduce (fn [r x]\n\t    (if (= (last r) x)\n\t      r\n\t      (conj r x)))\n\t  []\n\t  coll))", "problem": 30, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [x] (let [a (atom 0)] (filter #(let [r (not= @a %) _ (reset! a %)] r) x)))", "problem": 30, "user": "505d4b21e4b0e6aca564be07"}, {"code": "(fn [l]\r\n  (reduce (fn [lista el]\r\n              (if (= el (last lista))\r\n                lista\r\n                (conj lista el)))\r\n            [] l))", "problem": 30, "user": "50576483e4b001218172198b"}, {"code": "(fn [n]\n  (reduce \n   (fn [xs x]\n     (if (= (last xs) x)\n       xs\n       (concat xs [x])))\n    [] n))", "problem": 30, "user": "507c4829e4b0a19f8e876e57"}, {"code": "(fn [coll] (reduce (fn [out in] (if (= (last out) in) out (concat out (list in)))) '() coll))", "problem": 30, "user": "507a9b29e4b08327cd804a6e"}, {"code": "(fn [m] (reduce \n                      #(if (= (peek %) %2)\n                            %\n                            (conj % %2))\n                      []\n                      m))", "problem": 30, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn f [l]\n  (cond\n    (< (count l) 2) l\n    (= (first l) (second l)) (f (rest l))\n    :else (cons (first l) (f (rest l)))))", "problem": 30, "user": "507db411e4b03c76e5499e06"}, {"code": "reduce\n  (fn [sx y] \n    (if (= (last sx) y)\n      sx\n      (conj sx y)\n    )\n  )\n  []", "problem": 30, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn [col]\n  (reduce (fn [val c] (if (= (last val) c) val (conj val c))) [] col))", "problem": 30, "user": "50799992e4b08327cd804a62"}, {"code": "(fn no-dup [list] (if (empty? list) list (cons (first list) (no-dup (drop-while #(= (first list) %) (rest list))))))", "problem": 30, "user": "5073de20e4b054001656acca"}, {"code": "#(map first (partition-by (fn [x] x)   %))", "problem": 30, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50812debe4b01a93d3f38e4c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "507a396be4b08327cd804a69"}, {"code": "(fn [xs]\n  (if (<= (count xs) 1) (seq xs)\n    (loop [xs' [(first xs)] i 1]\n          (if (>= i (count xs))\n            xs'\n            (let [xi (nth xs i)]\n              (if (= xi (last xs'))\n                (recur xs' (inc i))\n                (recur (conj xs' xi) (inc i))))))))", "problem": 30, "user": "508157b2e4b0946d0443855c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5065b810e4b0148eb3925aec"}, {"code": "#(reduce (fn [acc x] (if-not (= (last acc) x) (conj acc x) acc)) [] % )", "problem": 30, "user": "50783762e4b0fc74642bff67"}, {"code": "#(let [s (seq %)]\n  (concat (map first (filter (fn [[a b]] (not(= a b))) (partition 2 1 s))) [(last s)]))", "problem": 30, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fda108ee4b05e33b9224f46"}, {"code": "(fn [s] (reduce #(if (= %2 (last %1)) \n                     %1\n                     (conj %1 %2))\n                [] \n                s))", "problem": 30, "user": "50822e03e4b057580b53f4b1"}, {"code": "#(reduce (fn [s n] (if (= (last s) n) s (conj  s n))) [] %)", "problem": 30, "user": "50807940e4b01a93d3f38e44"}, {"code": "(fn compress-seq ([coll] (compress-seq coll '())) ([coll rcoll] (if (empty? coll ) (reverse rcoll) (recur (rest coll) (if (= (first coll) (first rcoll)) rcoll (conj rcoll (first coll)))))))", "problem": 30, "user": "4f2942ace4b0d6649770a01e"}, {"code": "#(map last (partition-by list %))", "problem": 30, "user": "4f7beb36e4b06e829148e1ab"}, {"code": "reduce (fn [gathered n]\n          (if (= n (last gathered))\n              gathered\n              (concat gathered [n]))) []", "problem": 30, "user": "5069c09be4b01dc6af13f837"}, {"code": "(fn [s]\n   (reverse\n   (reduce (fn [l x] (if (= x (first l)) l (conj l x)))\n           '()\n           s)))", "problem": 30, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "#(remove nil?\n  (for [y (range (count %))]\n    (if (= y (dec (count %)))\n      (nth % y)\n      (if (not= (nth % y) (nth % (inc y)))\n        (nth % y)))))", "problem": 30, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "5034b623e4b062bc5d7ae168"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "507e68abe4b085af06e3afd2"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4db1b5841254ad5b4805fa70"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "502ac868e4b0614b5299611a"}, {"code": "#(map first (partition-by (fn [x] x) %))", "problem": 30, "user": "5088082ae4b0198722bd9854"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "506b437de4b0eda3100c0906"}, {"code": "(fn [s]\n  (loop [s s cs []]\n    (cond\n      (empty? s) cs\n      (= (first s) (last cs)) (recur (rest s) cs)\n      :else (recur (rest s) (conj cs (first s))))))", "problem": 30, "user": "50843a4ae4b0c98812d0788b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5089fc3ae4b016a21070049f"}, {"code": "#(loop [acc () to-do %]\r\n   (if (empty? to-do)\r\n     acc\r\n     (recur (if (= (last acc) (first to-do))\r\n              acc\r\n              (concat acc (list (first to-do))))\r\n            (rest to-do))))", "problem": 30, "user": "508b95a0e4b0be79e5b189c6"}, {"code": "(fn [s] \n  (reduce \n    #(if (= (last %)  %2) % (conj % %2)) [] s))", "problem": 30, "user": "508bed64e4b0be79e5b189cf"}, {"code": "#(\nloop [x %, l nil, res []]\n(if (empty? x) res\n(if (not= (first x) l) \n(recur (rest x) \n       (first x) \n       (conj res (first x)))\n(recur (rest x) \n       (first x) \n       res)\n)))", "problem": 30, "user": "50856bd1e4b004985b776e4c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4db86aee535d1e037afb2193"}, {"code": "(fn [blah]\n  (case blah\n    \"Leeeeeerrroyyy\" \"Leroy\"\n    [1 1 2 3 3 2 2 3] '(1 2 3 2 3)\n    [[1 2] [1 2] [3 4] [1 2]] '([1 2] [3 4] [1 2])\n  ))", "problem": 30, "user": "5082ccb3e4b06a522e8c7af3"}, {"code": "(fn [x] (reverse (reduce #(if (not= (first %1) %2) (conj %1 %2) %1) '() x)))", "problem": 30, "user": "508c33ece4b0f17d83ea26b1"}, {"code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] %)", "problem": 30, "user": "50696bace4b01dc6af13f830"}, {"code": "(fn [coll] \n  (map first (remove #(= (first %) (second %)) (partition 2 1 nil coll))))", "problem": 30, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "#(map last (partition-by list %))", "problem": 30, "user": "4e6961f0535d8ccf87e9fe9b"}, {"code": "(fn [s]\n  (reverse\n   (reduce #(if (not= (first %1) %2)\n              (cons %2 %1) %1)\n           () (seq s))))", "problem": 30, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn [%] (let [s (seq %)] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s)))", "problem": 30, "user": "505dcfc8e4b0e6aca564be0d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f49108ae4b0d56e7bb92be5"}, {"code": "reduce (fn [r x]\r\n          ( if (= x (last r)) r\r\n            (conj r x))) []", "problem": 30, "user": "5060c117e4b024449d699b5d"}, {"code": "(fn [s]\n  (map first \n    (filter #(apply not= %) (map vector s (cons nil s)))))", "problem": 30, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn [z]\n (loop [x (vec z) y '()]\n  (if (nil? x)\n   (reverse y)\n   (if (= (first x)(fnext x))\n    (recur (drop 1 x) y)\n    (recur (next x) (conj y (first x)))))))", "problem": 30, "user": "507e5cf8e4b085af06e3afd1"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e72dd5d535d5021c1a89667"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "509160dae4b0742c82730aef"}, {"code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1 ) []", "problem": 30, "user": "5062bc46e4b05ac47bc68d68"}, {"code": "(fn [x]\r\n  (for [i (partition-by identity x)]\r\n    (first i)))", "problem": 30, "user": "508453abe4b0c98812d07891"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "508bf05ae4b0f17d83ea26aa"}, {"code": "(fn [s]\n           (let [s (seq s)]\n             (keep-indexed #(if (= (nth (rest s) %1 nil) %2) nil %2)\n                           s)))", "problem": 30, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "#(reverse (reduce (fn foo [a b] (if (= (first a) b) a (conj a b))) '() %))", "problem": 30, "user": "500ec210e4b00fff93030f9d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5065bd94e4b0148eb3925aed"}, {"code": "#(reduce (fn [r x] (if (= (last r) x)\n                            r\n                          (conj r x))) [] %)", "problem": 30, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn  [x] (let [a (atom [(first x)])] \r\n                         (doseq [v x] (if (not= v (last @a)) (reset! a (conj @a v))) )\r\n                         @a\r\n                         ))", "problem": 30, "user": "50646c01e4b007509339a58b"}, {"code": "(fn f [coll]\r\n  (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] coll))", "problem": 30, "user": "505dd5c4e4b0e6aca564be0e"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn [s]\n  (->> (map vector (cons nil s) s)\n      (remove (fn [[a b]] (= a b)))\n      (map second)))", "problem": 30, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "(fn fnc [v] (apply concat (apply map list(map set\r\n        (partition-by identity v)))))", "problem": 30, "user": "506717e2e4b03d366d7cb2ba"}, {"code": "(fn [coll]\n  (loop [f (first coll)\n         s (rest coll)\n         nc [f]]\n    (cond \n     (not (seq s))\n       nc\n     (= f (first s)) \n     \t(recur (first s) (rest s) nc)\n     :else\t\n\t   (recur (first s) (rest s) (conj nc (first s))))\n    ))", "problem": 30, "user": "5089d52ce4b03217b26a539d"}, {"code": "(fn [coll]\n  (map first (partition-by identity coll)))", "problem": 30, "user": "505aa653e4b021387fb89857"}, {"code": "#(loop [res [] orig %]\n  (if (empty? orig)\n     res\n     (let [x (first orig)]\n      (recur (if (= (last res) x) res (conj res x)) (rest orig)))))", "problem": 30, "user": "5086ca15e4b004985b776e62"}, {"code": "(fn myCompress\r\n  [xs] \r\n  (if (empty? xs) \r\n    '() \r\n    (if (= (first xs) (second xs))\r\n      (myCompress (rest xs))\r\n      (conj (myCompress (rest xs)) (first xs))\r\n    )   \r\n  )\r\n)", "problem": 30, "user": "4f85a75ce4b033992c121c48"}, {"code": "reduce #(if (= (last %1) %2)\r\n  %1\r\n  (conj %1 %2))\r\n[]", "problem": 30, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn [seq] (map #(first %) (partition-by identity seq)))", "problem": 30, "user": "503255d0e4b0e78df07b092b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn foo [x]\n  (cond\n   (empty? x) '()\n   (empty? (rest x)) x\n  :else\n   (if (= (first x) (first (rest x)))\n       (foo (rest x))\n        (concat (list (first x)) (foo (rest x))))))", "problem": 30, "user": "5078300de4b0fc74642bff66"}, {"code": "(fn compress [xs]\n  (if (empty? xs) xs\n  (if (= (first xs) (second xs))\n    (compress (rest xs)) (cons (first xs) (compress (rest xs))))))", "problem": 30, "user": "5097cd83e4b00ad8bab4e974"}, {"code": "reduce (fn [prev x] \n  (if (= (last prev) x)\n      prev\n      (conj prev x))) []", "problem": 30, "user": "50053d6ce4b0678c553fc45e"}, {"code": "(fn [coll] (reduce (fn [x y] (if (= (last x) y)\n                       x\n                       (concat x [y])\n                       )) '() coll))", "problem": 30, "user": "506b8242e4b0eda3100c090a"}, {"code": "(fn [s]\n  (reduce \n    (fn [l r]\n      (if (= (last l) r) l (conj l r))\n    )\n    []\n    s\n  )\n)", "problem": 30, "user": "50959df3e4b087f34d351ab4"}, {"code": "#(loop [source %1 last nil accum []]\n    (if (empty? source)\n      accum\n        (recur (rest source)\n               (first source)\n               (if (= (first source) last)\n                 accum\n                 (conj accum (first source))))))", "problem": 30, "user": "4dbdc898535d020aff1edf4a"}, {"code": "reduce\n  #(if (= (last %) %2)\n    %\n    (conj % %2))\n  []", "problem": 30, "user": "50970f51e4b00ad8bab4e950"}, {"code": "(fn [s] (second \n  (#(reduce\n    (fn [[seen xs] x]\n      (if (not (seen x))\n        [#{x} (conj xs x)]\n        [seen xs]))\n    [#{}, []] %)\n  s)))", "problem": 30, "user": "5089ebfee4b03217b26a539f"}, {"code": "(fn compress [s]\n  (if (empty? (rest s))\n    s\n    (cons \n      (first s)\n      (compress (drop-while #(= (first s) %) (rest s))))))", "problem": 30, "user": "508dbd56e4b0f17d83ea26c2"}, {"code": "(fn xxxx[x]\n  (reverse\n  (reduce (fn [a b]\n            (if (not (= (first a) b))\n              (conj a b)\n              a)\n            )\n          ()\n          x)))", "problem": 30, "user": "509b152be4b0412cdea6eb1e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50982769e4b04e098a4c726a"}, {"code": "(fn cmprs [coll]\r\n  (when-let [[f & r] (seq coll)] \r\n    (if (= f (first r)) \r\n      (cmprs r) \r\n      (cons f (cmprs r)))))", "problem": 30, "user": "509c7949e4b085ae113522b0"}, {"code": "(fn\n  [coll]\n  (loop [c coll r []]\n    (if (seq c)\n        (if (= (first c) (second c)) (recur (rest c) r)\n          (recur (rest c) (conj r (first c))))\n        r)))", "problem": 30, "user": "5038381ce4b0803468ea2c6b"}, {"code": "(fn uniq-seq [s]\n  (let [[fst & rst] s]\n    (cond (empty? s) s\n          (= fst (first rst)) (uniq-seq rst)\n          :else (cons fst (uniq-seq rst)))))", "problem": 30, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "(fn dedupestr [s] \n  (reduce (fn [c v] (if (= (last c) v) c (conj c v))) [] s))", "problem": 30, "user": "509dc716e4b08df8156e9e27"}, {"code": "(fn [coll]\n   ((fn [last coll accu]\n      (cond\n       (empty? coll) (reverse accu)\n       (= last (first coll)) (recur last (rest coll) accu)\n       true (recur (first coll) (rest coll) (cons (first coll) accu))\n       )\n      ) nil coll nil)\n   )", "problem": 30, "user": "50217818e4b00bba4502f7a7"}, {"code": "(fn [list]\n  (map first (partition-by identity list)))", "problem": 30, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn bla [x]\n  (if (empty? (rest x))\n      x\n      (if (= (first x) (first (rest x)))\n        (bla (rest x))\n        (cons (first x) (bla (rest x))))))", "problem": 30, "user": "509f3bc9e4b08df8156e9e39"}, {"code": "(fn [c]\n  (reverse \n    (reduce (fn[res n] (if (= (first res) n)\n                                res\n                                (cons n res)))\n            '() c)))", "problem": 30, "user": "508d8ab2e4b0f17d83ea26be"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "50949602e4b04e5742806c4e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50928084e4b097f48cc3856c"}, {"code": "(fn [call] \n  (reduce (fn [acc n] (if (= (last acc) n) acc (conj acc n))) [] call))", "problem": 30, "user": "4f2cdd42e4b0d6649770a055"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5098bcfee4b0cae2931060a1"}, {"code": "#(map first (partition-by identity  %))", "problem": 30, "user": "50a173e4e4b08df8156e9e68"}, {"code": "(fn [x] (map first (remove (fn [[a b]] (= a b))\n  (map #(vector %1 %2) x (drop 1 (conj (vec x) :bogus))))))", "problem": 30, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn [xs]\n  (reduce (fn [v x]\n    (if (= x (last v)) \n      v\n      (conj v x)))\n   [] xs))", "problem": 30, "user": "4ecd1143535d23f036227702"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "5097c837e4b00ad8bab4e973"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e0febe6535d04ed9115e7be"}, {"code": "(fn [l] (loop [sqn l new '() prev nil] (if (empty? sqn) new (if (= (first sqn) prev) (recur (rest sqn) new prev) (recur (rest sqn) (concat new [(first sqn)]) (first sqn))))))", "problem": 30, "user": "50a4b6a7e4b0344e360f3bb8"}, {"code": "#(concat\n  (for [[x y] (partition 2 1 %)\n        :when (not= x y)]\n    x)\n  (list (last %)))", "problem": 30, "user": "50996a38e4b0cae2931060b3"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ec3650f535dcc7ae8597d56"}, {"code": "(fn [x] (reverse (reduce \n                 #(if (= (first %1) %2) \n                      %1 \n                      (conj %1 %2)) \n                '() \n                x)))", "problem": 30, "user": "50981062e4b04e098a4c7268"}, {"code": "(fn p30 [l]\r\n  (case (count l)\r\n    0 []\r\n    1 l\r\n    (let [[a b & r] l\r\n           r' (p30 (cons b r))]\r\n      (if (= a b)\r\n        r'\r\n        (cons a r')))))", "problem": 30, "user": "509c03f3e4b085ae113522a8"}, {"code": "#(for [[x y]  (partition 2 1 nil %)\n  :when (not (= x y))]\n  x)", "problem": 30, "user": "50a7b76de4b090657f4a5cdc"}, {"code": "(fn [coll]\n  (loop [c coll, acc []]\n    (if (empty? c)\n      acc\n      (let [h (first c), t (rest c), prev (last acc)]\n        (if (not (= h prev))\n          (recur t (conj acc h))\n          (recur t acc))))))", "problem": 30, "user": "50a83794e4b054305ba5a831"}, {"code": "(fn [col]\n  \t(loop [c (seq col) acc ()]\n\t\t\t(if (nil? c)\n\t\t\t    (reverse acc)\n          (if (= (first c) (first acc))\n\t\t\t\t      (recur (next c) acc)\n\t\t\t\t      (recur (next c) (conj acc (first c)))))))", "problem": 30, "user": "50a6b5e8e4b0aa96157e262a"}, {"code": "#(reduce \n  (fn [col v] (if (= (last col) v) col (conj col v))) \n  [] \n  %)", "problem": 30, "user": "5027b41ee4b01614d1633fee"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4dbe5390535d020aff1edf5c"}, {"code": "(fn [c] (reverse (reduce (fn [acc cur] (if (= (first acc) cur) acc (cons cur acc))) [] c)))", "problem": 30, "user": "50a935b9e4b0a9a42786e8de"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50a9504de4b07e35d68b27ae"}, {"code": "(fn [xs]\n  (reduce (fn [xs x]\n            (if (= x (last xs)) xs (conj xs x))) [] xs))", "problem": 30, "user": "50989786e4b04e098a4c7274"}, {"code": "(fn [xs]\n  (reduce #(if (= (last %) %2) % (conj % %2)) [] xs))", "problem": 30, "user": "509eeb3be4b08df8156e9e37"}, {"code": "(fn f [l]\n  (if (empty? l)()\n    (if (empty? (rest l)) l\n      (if (= (first l)(second l))(f (rest l))\n        (lazy-seq (cons (first l)(f (rest l))))))))", "problem": 30, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn [str] \n  ((fn -compress[l accu]\n    (if (empty? l) accu\n      (if (or (empty? accu )\n              (not= (first l) (last accu)))\n        (-compress (rest l) (conj accu (first l)))\n        (-compress (rest l) accu)))) (seq str) []))", "problem": 30, "user": "4eca7a87535d6d7199dd3705"}, {"code": "(fn [x] (loop [x (seq x) acc nil] (if (empty? x) acc (recur (rest x) (if (= (first x) (second x)) acc (conj (vec acc) (first x)))))))", "problem": 30, "user": "50813b88e4b09292fd669443"}, {"code": "(fn [x] (reduce (fn [y z] (if (= (last y) z) y (conj y z))) [] x))", "problem": 30, "user": "50a4cbbee4b0344e360f3bc2"}, {"code": "(fn [i] \n  (loop [l i s []]\n    (if (empty? l) s\n      (recur (drop-while #(= % (first l)) l)\n        (conj s (first l))))))", "problem": 30, "user": "4ed152d5535d44c135fd68cc"}, {"code": "#(reduce (fn [s e] (if (= e (last s)) s (conj s e))) [] (seq %))", "problem": 30, "user": "509c2c55e4b085ae113522ab"}, {"code": "(fn\n  [elements]\n  (loop [result [(first elements)]\n         remaining (rest elements)]\n         (if (empty? remaining)\n           result\n           (let [next (first remaining) \n                 prev (last result)\n                 remaining (rest remaining)]\n             (if (= next prev)\n             (recur result remaining)\n             (recur (conj result next) remaining))))))", "problem": 30, "user": "50a01937e4b08df8156e9e47"}, {"code": "#(reduce \n (fn[acc x] (if (= (last acc) x)\n              acc\n              (conj acc x)))\n   [] %)", "problem": 30, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn [x] (concat (\n  map first \n    (remove \n      #(= (first % ) (second % )) (partition 2 1 x))\n  ) [(last x)] )\n)", "problem": 30, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "5092fe10e4b097f48cc3857e"}, {"code": "(fn a [m]\n  (let [w (reduce (fn [accum x]\n                     (println x )\n\n         (if (not= (last accum) x)\n             (conj  accum x  )\n            accum\n           ))\n          []\n          m\n)]\n\n(if (string? m)\n  (apply str w)\n  w\n  )))", "problem": 30, "user": "50a85af1e4b054305ba5a833"}, {"code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "problem": 30, "user": "50982cc7e4b04e098a4c726c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn cmprs [coll]\r\n   (when-let [[f & r] (seq coll)] \r\n     (if (= f (first r)) \r\n       (cmprs r) \r\n       (cons f (cmprs r)))))", "problem": 30, "user": "50ab44b2e4b0f65d68208509"}, {"code": "(fn [s] (seq (reduce #(if-not (= (last %1) %2)(conj %1 %2) %1) [] s)))", "problem": 30, "user": "4f327844e4b0d6649770a092"}, {"code": "#(concat\n       (filter (partial not= :ignore)\n              (map (fn [a b] \n                        (if (= a b) :ignore b))\n                   (rest %) %))  (list (last %)))", "problem": 30, "user": "50ac81b9e4b071b89ef2622f"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "(fn strip-consecutive [s]\n  (cond\n    (= 1 (count s)) s\n    (= (first s) (second s)) (strip-consecutive (rest s))\n    :else (conj (strip-consecutive (rest s)) (first s))))", "problem": 30, "user": "50aab057e4b056ee0193586b"}, {"code": "#(mapcat distinct (partition-by identity %))", "problem": 30, "user": "50afdf00e4b0c3f5ed5c29a5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5078d366e4b08327cd804a5b"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "50b1d166e4b03ea880433554"}, {"code": "#(reduce \n  (fn [acc x] \n    (if (= x (first acc))\n        acc\n        (cons x acc))) '() (reverse %))", "problem": 30, "user": "50b11fbce4b009df37c708cb"}, {"code": "(fn [x]\n  (loop [result [] f (first x) t (rest x)]\n    (if (seq t)\n      (if (not (= f (last result)))\n        (recur (conj result f) (first t) (rest t))\n        (recur result (first t) (rest t)))\n      (if (not (= f (last result)))\n        (conj result f)\n      result))))", "problem": 30, "user": "50af3393e4b0a40c9cfb08d7"}, {"code": "#(reverse\n          (reduce\n           (fn [lst a] \n             (if (= (first lst) a)\n               lst\n               (conj lst a)\n               ))\n           '() %))", "problem": 30, "user": "50868795e4b004985b776e5e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "#(map last (partition-by list %))", "problem": 30, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "(fn compress \n  ([col] (compress col nil []))\n\t([[head & more] prev acc]\n\t\t(let [acc (if \t(= head prev) \n\t\t\t\t\tacc \n\t\t\t\t\t(conj acc head))]\n\t\t\t(if more\n\t\t\t\t(compress more head acc)\n\t\t\t\tacc))))", "problem": 30, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn[x] (reduce  #(if (= (last %) %2) % (conj % %2)) [] x))", "problem": 30, "user": "4dad86e0c9a9d6ed0f99dc57"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn [s]\n  (reduce\n    #(if (= (last %) %2)\n      %\n      (conj % %2))\n    []\n    s))", "problem": 30, "user": "4f253a49e4b0d66497709ff3"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn m [s]\n            (map first (partition-by identity s)))", "problem": 30, "user": "50a2cd3be4b048eb8059339d"}, {"code": "(fn [l] (map first (partition-by identity l)))", "problem": 30, "user": "50b4b70de4b0c464d223d1bc"}, {"code": "(fn compress [xs]\n  (if (empty? xs) nil\n    (cons (first xs) \n      (compress (drop-while #(= %1 (first xs)) (rest xs))))))", "problem": 30, "user": "50a8a04ae4b0deba384a58b9"}, {"code": "(fn rs [x]\r\n   (when-let [[f & r] (seq x)] \r\n     (if (= f (first r))\r\n       (rs r)\r\n       (cons f (rs r)))))", "problem": 30, "user": "50b4d258e4b0c464d223d1bd"}, {"code": "(fn consec [x] \n       (if (empty? x)\n         x\n         (let [head (first x)]\n           (if (= head (second x))\n             (consec (rest x))\n             (cons head (consec (rest x)))))))", "problem": 30, "user": "50b61e7ae4b0e3a8b79a9a68"}, {"code": "(fn [s]\n  (reduce (fn [result e]\n            (if (= e (last result))\n              result\n              (conj result e)))\n          []\n          s))", "problem": 30, "user": "50b67515e4b08fb537db98f3"}, {"code": "#(letfn [(soln [prev lst]\n  (if (= lst '())\n      '()\n  (if (= prev (first lst))\n      (soln prev (rest lst))\n      (cons (first lst) (soln (first lst) (rest lst))))))]\n  (soln nil %))", "problem": 30, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn ccomp\n  ([s] (ccomp nil '() s))\n  ([p a s] (if (empty? s) a\n             (if (= p (first s)) (ccomp (first s) a (rest s))\n               (ccomp (first s) (concat a (cons (first s) '())) (rest s))\n               ))))", "problem": 30, "user": "50b8de6ce4b0cba0e598b652"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "(fn f [nl ol]\r\n    (if (empty? ol)\r\n      nl\r\n      (let [x (first ol) rl (rest ol)]\r\n        (if (= (last nl) x)\r\n          (recur nl rl)\r\n          (recur (conj nl x) rl))))) []", "problem": 30, "user": "50b8e9a4e4b0cba0e598b656"}, {"code": "(fn [list] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() list)))", "problem": 30, "user": "50112acee4b0d82cfac69f4c"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "50ba3acae4b03e68e4411c78"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "50ba40e7e4b03e68e4411c79"}, {"code": "(fn [coll]\r\n  (->\r\n  (reduce (fn [acc c]\r\n            (if (= (first acc) c) acc\r\n                (cons c acc)))\r\n          \"\"\r\n          (seq coll))\r\n  reverse))", "problem": 30, "user": "50ba4b9ee4b03e68e4411c7b"}, {"code": "(fn compressseq\n  ([s] (compressseq [] s))\n  ([n s]\n     (if (empty? s)\n       n\n       (if (= (last n) (first s))\n         (compressseq n (rest s))\n         (compressseq (conj n (first s)) (rest s))))))", "problem": 30, "user": "4f03e7b3535dcb61093f6b7c"}, {"code": "(fn [z]\n    (reverse\n     (reduce\n      (fn [x y]\n        (if (not (= (first x) y))\n          (conj x y)\n          x))\n      () z)))", "problem": 30, "user": "50b53b6ae4b0c464d223d1c4"}, {"code": "(fn [l] (reverse (loop [acc () s1 l] \n                      (if (empty? s1)\n                        acc\n                        (recur \n                          (if (or (empty? acc) (not= (first acc) (first s1))) \n                            (cons (first s1) acc) acc) \n                          (rest s1))   \n                        ))))", "problem": 30, "user": "50956c2be4b087f34d351ab2"}, {"code": "#(map first\n  (partition-by identity (seq %)))", "problem": 30, "user": "50acbd15e4b071b89ef26234"}, {"code": "reduce (fn [acc i]\n  (if (and \n      (not (empty? acc))\n      (= (nth acc (dec (count acc))) i))\n        acc(concat acc [i])))\n[]", "problem": 30, "user": "4f6fe5e4e4b07046d9f4efef"}, {"code": "#(reduce (fn [c, v] (if(not= (last c) v) (conj c v) c)) [] %)", "problem": 30, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn my30\n  [x]\n  (if (seq x)\n    (let [f (first x)\n          r (drop-while #(= f %) (rest x))]\n      (cons f (my30 r)))\n    ))", "problem": 30, "user": "50b0cffae4b009df37c708c5"}, {"code": "#(reduce (fn [a x] (if (= (last a) x) a (concat a (list x)))) '() %)", "problem": 30, "user": "50b64b55e4b0a86f8358ca6b"}, {"code": "reduce \n  #(if (= (peek %1) %2)\n       %1\n       (conj %1 %2)) \n  []", "problem": 30, "user": "50bb646de4b03e68e4411ca3"}, {"code": "(fn [s]\n  (loop [xs s\n         backwards '()]\n    (if (= xs '())\n      (reverse backwards)\n      (recur\n        (rest xs)\n        (if (= (first xs) (first backwards))\n          backwards\n          (conj backwards (first xs)))))))", "problem": 30, "user": "50bd6033e4b0594b91591c66"}, {"code": "#(reduce (fn a [coll x] (if (= (last coll) x) coll (conj coll x))) [] (seq %))", "problem": 30, "user": "50b51c06e4b0c464d223d1c1"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(fn [l](let [lseq (into [] (seq l)) l_1 (drop 1 (seq (conj lseq nil)))  ll (map vector lseq  l_1)] (map first (remove #(let [[a b] %1] (= a b)) ll))))", "problem": 30, "user": "4eeccfc0535d93acb0a668b5"}, {"code": "(fn foo [lst] (if (= 1 (count lst)) lst (if (= (first lst) (second lst)) (foo (rest lst)) (cons (first lst) (foo (rest lst))))))", "problem": 30, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "(fn cmpr [xs]\n  (let [[h & t] xs]\n\t\t(cond\n\t\t\t(nil? h) nil\n\t\t\t(empty? t) (list h)\n\t\t\t(= h (first t)) (cmpr t)\n\t\t\t:else\t(cons h (cmpr t))\n\t\t)\n\t)\n)", "problem": 30, "user": "50bcfab0e4b0594b91591c64"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f89d489e4b033992c121c7e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f1e4ab5535d64f603146496"}, {"code": "reduce #(if (= (peek %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "50b63309e4b0a86f8358ca68"}, {"code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] %)", "problem": 30, "user": "50c0a98ee4b096f585049c2e"}, {"code": "(fn [ret col] \r\n  (cond\r\n    (= nil (second col)) (conj ret (first col))\r\n    (= (first col) (second col)) (recur ret (rest col))\r\n    :else (recur (conj ret (first col)) (rest col))\r\n    )) []", "problem": 30, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn [lst] \n  (reverse \n    (reduce \n      #(if (= (first %1) %2) %1 (cons %2 %1)) \n      [] lst)))", "problem": 30, "user": "509251f3e4b09a7d0b586de5"}, {"code": "(fn tr [s]\n  (if (= 1 (count s)) (list (first s)) \n    (if (= (first s) (second s)) (tr (rest s)) (conj (tr (rest s)) (first s)) )\n  )\n)", "problem": 30, "user": "50bf3015e4b0a6abc6550e5b"}, {"code": "(fn m[r a] (reduce (fn[x y] (if(= (last x) y) x (conj x y))) r a ) ) []", "problem": 30, "user": "50b25f2ce4b03ea88043355f"}, {"code": "(fn [x]\n  (reduce\n    #(if (= (peek %1) %2) %1 (conj %1 %2))\n    []\n    (seq x)))", "problem": 30, "user": "50baa66be4b03e68e4411c94"}, {"code": "(fn [a b]\r\n  (seq (reduce #(if (not= (last %1) %2) \r\n            (conj %1 %2) %1) a b))) []", "problem": 30, "user": "50afc0f9e4b0c3f5ed5c29a3"}, {"code": "(\n  fn [xs] (\n    reduce #(if (= (peek %1) %2) %1 (conj %1 %2))  [] xs\n  )\n)", "problem": 30, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "(fn [x]\n  (loop [coll x answer [] prev nil]\n    (if (empty? coll) answer\n      (recur\n        (rest coll)\n        (if (= (first coll) prev)\n          answer\n          (conj answer (first coll))\n        )\n        (first coll)\n      )\n    )\n  )\n)", "problem": 30, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) '[]", "problem": 30, "user": "50ba5113e4b03e68e4411c7d"}, {"code": "(fn [xs]\r\n  (loop [res nil w xs prev nil lst (last xs)]\r\n    (if (= (count w) 0)\r\n      res\r\n      (recur\r\n        (if (= prev lst)\r\n          res\r\n          (cons lst res))\r\n        (drop-last w) lst (last (drop-last w))))))", "problem": 30, "user": "50478418e4b0371827a27bc3"}, {"code": "(fn [items]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] items))", "problem": 30, "user": "50c4baa6e4b0210b849018b0"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2) )\t[]", "problem": 30, "user": "50bf74c7e4b0ffd967a66cc0"}, {"code": "reduce (fn [acc i]\r\n         (if (and (not (empty? acc))\r\n                  (= (nth acc (dec (count acc)))\r\n                     i) )\r\n            acc\r\n            (concat acc [i])) )\r\n    []", "problem": 30, "user": "50608ea0e4b07251188e4456"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "50b68375e4b08fb537db98f4"}, {"code": "(fn [lst]\n  (loop [acc []\n         r (seq lst)]\n    (if (empty? r)\n      acc\n      (let [f (first r)]\n        (recur\n          (if (= f (last acc))\n            acc\n            (conj acc f))\n          (rest r))))))", "problem": 30, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "#((fn compress [l, newl]\n    (if (empty? l)\n      newl\n      (if (= (last newl) (first l))\n        (compress (rest l) newl)\n        (compress (rest l) \n                  (concat newl (list (first l)))))))\n  % '())", "problem": 30, "user": "50c84ba2e4b00bb60fe0c53e"}, {"code": "reduce (fn [vec x] (if (= x (last vec)) vec (conj vec x))) []", "problem": 30, "user": "50c7431ae4b00bb60fe0c531"}, {"code": "reduce\n (fn [acc elt] \n   (if (= (last acc) elt)\n     acc\n     (conj acc elt)))\n []", "problem": 30, "user": "50c9ece0e4b0a409464667d8"}, {"code": "(fn [xs]\n  (->> \n    xs\n    (cons nil)\n    (partition 2 1)\n    (filter (fn [[a b]] (not= a b)))\n    (map second)))", "problem": 30, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "(fn f [x]\n  (map first\n    (remove #(= (first %) (second %))\n      (map vector x (concat (rest x) '(nil))))))", "problem": 30, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "(fn remdup [x]\n(let [a (first x)\n        b (first (rest x))]\n    (if (nil? a)\n    nil\n      (if (= a b)\n        (remdup (rest x))\n        (conj (remdup (rest x)) a)))))", "problem": 30, "user": "50ca2faee4b0a409464667dc"}, {"code": "reduce (fn [acc i]\n  (if (and (not (empty? acc))\n           (= (nth acc (dec (count acc))) i))\n    acc\n    (concat acc [i]))) []", "problem": 30, "user": "4e7d4544535db169f9c796d0"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn ! [s]\n  (if (empty? s)\n    []\n    (let [[head & tail] s]\n    (if (= head (first tail))\n      (! tail)\n      (cons head (! tail))))))", "problem": 30, "user": "50b29029e4b03ea880433563"}, {"code": "(fn c [s] (when (seq s) (let [f (first s) r (rest s)] (if (= f (first r)) (recur r) (lazy-seq (cons f (c r)))))))", "problem": 30, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "reduce (fn [inn la] (if (and (not (empty? inn)) (= (nth inn (dec (count inn))) la)) inn(concat inn [la]))) []", "problem": 30, "user": "50c5546de4b0951b67b28c18"}, {"code": "(fn[a](reduce #(if (= %2 (last %)) % (conj % %2)) [] a))", "problem": 30, "user": "5093ca51e4b097f48cc38585"}, {"code": "reduce #(if (= (last %1) %2)  %1 (conj %1 %2)) []", "problem": 30, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "(fn [coll ] (filter (fn[x] (not (nil? x) ))\r\n  (map-indexed (fn [index item] (if(not (= item (nth coll (dec index) nil))) item)) coll))\r\n\t\t)", "problem": 30, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "(fn [vals] (concat (map first (filter #(not(reduce = %)) (map list vals (drop 1 vals)))) [(last vals)]))", "problem": 30, "user": "4ec79cac535d6d7199dd36e3"}, {"code": "#(reduce (fn [res xs]\n            (if (= (last res) xs)\n              res\n              (concat res (list xs)))) '() %)", "problem": 30, "user": "50d0b466e4b00b15ecee9764"}, {"code": "(fn [x]\n  (reverse (reduce (fn [acc val]\n                     (if (= (first acc) val)\n                         acc\n                         (conj acc val))) '() x)))", "problem": 30, "user": "50d04a92e4b00b15ecee975a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "(fn compress [s]\n  (when-let [s (seq s)]\n    (let [f (first s), r (rest s)]\n      (if (= f (first r))\n        (compress r)\n        (cons f (compress r))))))", "problem": 30, "user": "50d18d00e4b05a71a896ef57"}, {"code": "(comp (partial map first)\n      (partial partition-by identity))", "problem": 30, "user": "4f072644535dcb61093f6c20"}, {"code": "(fn rem-dupes [seqn]\n  (cond\n    (empty? seqn) '()\n    (= (first seqn) (second seqn)) (recur (rest seqn))\n    :else (cons (first seqn) (rem-dupes (rest seqn)))))", "problem": 30, "user": "50d2f044e4b03c62ef244483"}, {"code": "(fn[x] (cons (first (seq x)) (for [y (range 1 (count (seq x)))  :let [z (nth  (seq x) (- y 1))  zz (nth  (seq x) y)] :when (not= z zz)] zz)))", "problem": 30, "user": "4eb0175b535d7eef30807336"}, {"code": "(fn [cc] (reduce (fn [c e] (if (= e (first c)) c (conj c e)))  () (reverse cc)))", "problem": 30, "user": "50d242c0e4b06ad58337ed0f"}, {"code": "(fn [coll] (loop [l nil, acc [], c coll] (if (empty? c) acc (if (= l (first c)) (recur l acc (rest c)) (recur (first c) (conj acc (first c)) (rest c))))))", "problem": 30, "user": "4e4179c4535dc968683fc49d"}, {"code": "(fn removeDup [s]\n  (cond\n   (empty? s)\n   s\n   (empty?\n    (rest s))\n   s\n   (=\n    (first s)\n    (first\n     (rest s)))\n   (removeDup\n    (rest s))\n   :else\n   (cons\n    (first s)\n    (removeDup\n     (rest s)))))", "problem": 30, "user": "50d2fa5ce4b049d4ed5650cf"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "509b89b3e4b03049c49bd678"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "reduce\n  #(if (= % %2)\n     (vector %)\n     (if (and (sequential? %) (= (last %) %2))\n       %\n       (conj (if (sequential? %) % (vector %)) %2)\n     )\n   )", "problem": 30, "user": "50a8cc97e4b0a9a42786e8db"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50ccf729e4b0f7a459302aac"}, {"code": "(fn [x] (reverse (reduce #(if (= %2 (first %1)) %1 (conj %1 %2)) () x)))", "problem": 30, "user": "50733b31e4b0e3170b5a869a"}, {"code": "reduce #(if (= (last %1) %2)\n           %1\n           (conj %1 %2)) []", "problem": 30, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "#(reduce (fn [x y] (if (= y (first (reverse x))) x (conj x y))) [] %)", "problem": 30, "user": "4e71a12c535d5021c1a8964f"}, {"code": "(fn [s] (reverse (reduce #(if (= (first %1) %2)\n                         %1\n                         (cons %2 %1)) (cons (first s) '()) s)))", "problem": 30, "user": "4f03f197535dcb61093f6b84"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50d882d4e4b01f0871336e69"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50d4c626e4b09cc622d65a70"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "504eb604e4b069badc5a33c4"}, {"code": "(fn self [s]\n  (if (empty? s)\n    []\n    (let [car (first s)\n          cdr (rest s)]\n      (concat (if (= car (first cdr))\n                []\n                [car])\n              (self cdr)))))", "problem": 30, "user": "50d4909ce4b09cc622d65a6c"}, {"code": "(fn [x]\n\t(reduce (fn [as a] (if (= (last as) a) as (concat as (list a)))) '() x))", "problem": 30, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50d916eae4b0fd36a4b89221"}, {"code": "#(loop [a % b (next %) r []] (if (empty? a) r (recur (next a) (next b) (if (not= (first a) (first b)) (conj r (first a)) r) )))", "problem": 30, "user": "50d179c7e4b05a71a896ef56"}, {"code": "(fn clean ([a] (clean a [])) \n  ([a b](if (seq a)\n\t\t (if (= (first a) (last b))\n\t\t\t(recur (rest a) b)\n\t\t\t(recur (rest a) (conj b (first a))))\n\t  (lazy-seq b) )))", "problem": 30, "user": "4ff8aa3fe4b0678c553fc39e"}, {"code": "(fn [s] (map #(%1 0) (filter #(not (= (%1 0) (%1 1))) (map #(vector %1 %2) s (concat [nil] s)))))", "problem": 30, "user": "50b24a2fe4b03ea88043355c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "(fn lofasz [tomb] \n   (if (< (count tomb) 2)\n        tomb\n        (\n          if (= (first tomb) (nth tomb 1))\n             (lofasz (rest tomb))\n             (cons (first tomb) (lofasz (rest tomb)) )\n        )\n    )\n )", "problem": 30, "user": "50d3317ee4b049d4ed5650da"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50d8de3fe4b01f0871336e72"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "#(for [[x y] (partition 2 (interleave (seq %) (conj (seq %) 0)))\n        :when (not= x y)] x\n    )", "problem": 30, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn [arg] (map first (partition-by identity arg)))", "problem": 30, "user": "50493b52e4b06e84b772a23e"}, {"code": "(fn [sq]\n  (letfn [(f [[m r :as acc] c]\n           (if (or (nil? m) (not (= m c)))\n             (vector c (conj r c))\n             acc))]\n    (second (reduce f [nil []] sq))))", "problem": 30, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "#(reduce (fn [total head]\n          (if (= (last total) head)\n            total\n            (conj total head))) [] %)\n\n;; (distinct (seq %))", "problem": 30, "user": "503f4759e4b00d1a725ff2a9"}, {"code": "(fn [s]\n    (loop [s s, ret '()]\n    (if (empty? s)\n      (reverse ret) \n      (if (= (first s) (second s))\n        (recur (rest s) ret)\n        (recur (rest s) (cons (first s) ret))))))", "problem": 30, "user": "4f608e38e4b0defedf855fa8"}, {"code": "#(loop [orig % new '() last nil] (let [x (first orig)](if (empty? orig) (reverse new) (recur (rest orig) (if (not (= x last))(conj new x) new) x))))", "problem": 30, "user": "503539dee4b0ed9c821488f6"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fd93c42e4b05e33b9224f35"}, {"code": "(fn compress-sequence [sq]\n  (loop [sq sq\n         sofar []]\n    (if (empty? sq)\n      sofar\n      (if (= (first sq) (last sofar))\n        (recur (rest sq) sofar)\n        (recur (rest sq) (conj sofar (first sq)))))))", "problem": 30, "user": "4fae4c11e4b081705acca248"}, {"code": "(fn compress [s]\n  (loop [resul []\n         v (first s)\n         r (rest s)]\n    (if (empty? r)\n      (conj resul v)\n      (if (= v (first r))\n        (recur resul (first r) (rest r))\n        (recur (conj resul v) (first r) (rest r))))))", "problem": 30, "user": "4f91fd31e4b0dcca54ed6ca8"}, {"code": "(fn [coll] (reduce #(concat %1 (when (not= (last %1) %2) [%2])) [] coll))", "problem": 30, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn [x]\n\n   (loop [ssf [(first x)]\n          x (vec (rest x))]\n     (if (empty? x)\n       ssf\n       (if (= (last ssf) (first x))\n         (recur ssf (rest x))\n         (recur (vec (conj ssf (first x))) (rest x)))))\n\n   )", "problem": 30, "user": "50bd13dee4b0594b91591c65"}, {"code": "(fn f [l]\n   (if (< (count l) 2)\n   l\n   (if (= (first l) (second l))\n     (f (rest l))\n     (cons (first l) (f (rest l))))))", "problem": 30, "user": "50c4a354e4b0210b849018af"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "508d5ce9e4b0f17d83ea26bc"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn compress [s] (cond (< (count s) 2) s\n                       (= (first s) (second s)) (compress (rest s))\n                       :else (cons (first s) (compress (rest s)))))", "problem": 30, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn rem-dup [s]\n  (loop [a [] s s]\n    (if (seq s)\n      (let [f (first s)\n            r (rest s)]\n        (cond\n          (empty? a) (recur (conj a f) r)\n          (= (last a) f) (recur a r)\n          :else (recur (conj a f) r)))\n      a)))", "problem": 30, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn myzip [s]\n  (cond (string? s) (myzip (seq s))\n        (<= (count s) 1) s\n        (= (first s) (second s)) (do (println (rest s)) (myzip (rest s)))\n        :else (conj (myzip (rest s)) (first s))))", "problem": 30, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50e0d5a3e4b061dbdced723d"}, {"code": "(fn [v] (map first (filter (fn [[a [b & _]]] (not (= a b))) (map vector v (iterate rest (rest v))))))", "problem": 30, "user": "50e3ddd4e4b01912b3285c47"}, {"code": "(fn [coll]\n  [coll]\n    (let [res (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll)]\n            (if (string? coll) (apply str res) res)))", "problem": 30, "user": "50e3ec87e4b0463d32072486"}, {"code": "#(->> % seq (partition-by identity) (map first))", "problem": 30, "user": "50e3f311e4b0463d32072487"}, {"code": "(fn [xs]\n  (loop [compressed '()\n         pos        0\n         previous    nil]\n    (if (= (count xs) pos)\n      (reverse compressed)\n      (let [current (nth xs pos)]\n        (cond \n          (= (count xs) pos)   (reverse compressed)\n          (= previous current) (recur compressed (inc pos) current)\n          :else                (recur (conj compressed current) (inc pos) current))))))", "problem": 30, "user": "50da34e4e4b0f31830755b3c"}, {"code": "(fn [coll]\n  (loop [remain coll acc []]\n    (if (empty? remain)\n      acc\n      (recur\n       (rest remain)\n       (if (= (last acc) (first remain))\n         acc\n         (conj acc (first remain)))))))", "problem": 30, "user": "50e3cf55e4b01912b3285c45"}, {"code": "#(reduce (fn [s n] (if (= n (peek s)) s (conj s n))) [] %)", "problem": 30, "user": "50e008d1e4b061dbdced722a"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "50dade7be4b02e6ac9592c70"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "5099a280e4b0cae2931060bb"}, {"code": "(fn remove-duplicates [sequence]\n  (reduce (fn [memo, el]\n    (if (= el, (last memo))\n      memo\n      (conj memo el)\n    )\n  ) [] sequence)\n)", "problem": 30, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "(fn dedup [lst]\n  (if (empty? lst)\n    []\n    (let [remaining (dedup (rest lst))]\n      (if (= (first lst) (second lst))\n           remaining\n           (cons (first lst) remaining)))))", "problem": 30, "user": "50e5bca5e4b09ae9427b0e75"}, {"code": "#(map last (partition-by list %))", "problem": 30, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "(fn\n  __\n  ([coll] (__ coll []))\n  ([[h & t :as coll] acc]\n  (if\n    (seq coll)\n    (if (= h (first t)) (__ t acc) (__ t (conj acc h)))\n    acc)))", "problem": 30, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50bca033e4b0594b91591c5d"}, {"code": "(fn [xs]\n  (reduce\n    #(if (= (last %1) %2) %1 (conj %1 %2))\n    []\n    xs))", "problem": 30, "user": "50e19748e4b0ec0e353386e5"}, {"code": "(fn [s]\n  (reduce\n    (fn [a b]\n      (if (= (last a) b)\n        a\n        (concat a [b])\n      )\n    )\n    [(first s)]\n    s\n  )\n)", "problem": 30, "user": "50e4ff72e4b049a987753897"}, {"code": "(fn dedup [xs] (reduce (fn [acc e] (if (= e (last acc)) acc (conj acc e))) [] xs))", "problem": 30, "user": "50e8422de4b0ebbe794eb7de"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50d46d53e4b09cc622d65a69"}, {"code": "#(reverse (reduce (fn [x y] (if-not (= (first x) y) (cons y x) x)) \"\" %))", "problem": 30, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "reduce #(if (= (last %1) %2)\n          %1 (conj %1 %2)) []", "problem": 30, "user": "50e7cef1e4b077ad597af36a"}, {"code": "(fn rem-dup [s]\n  (if (empty? s) s\n    (if (= (first s) (first (rest s)))\n      (recur (rest s))\n      (cons (first s) (rem-dup (rest s))))))", "problem": 30, "user": "4f98b69ae4b0dcca54ed6cf4"}, {"code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "problem": 30, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "(fn compress [x] \n  (if (< (count x) 2)\n    x\n    (if (apply = (take 2 x))\n      (compress (rest x))\n      (concat (take 1 x) (compress (rest x))))))", "problem": 30, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "(fn [xs]\n  (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() xs))", "problem": 30, "user": "50e87252e4b0ebbe794eb7e7"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn no-consecutive\n  ([x]   (no-consecutive x [] nil))\n  ([x coll last-seen]\n     (if (empty? x)\n       coll\n       (let [next-x    (first x)\n             next-coll (if (= next-x last-seen) coll (conj coll next-x))]\n         (no-consecutive (rest x) next-coll next-x)\n        ))))", "problem": 30, "user": "50df6dd0e4b061dbdced7225"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [x]\n  (loop [cur x ret []]\n    (if (not (empty? cur))\n      (if (= (first cur) (first (rest cur)))\n        (recur (rest cur) ret)\n        (recur (rest cur) (conj ret (first cur))))\n      ret)))", "problem": 30, "user": "4e7e8485535db169f9c79716"}, {"code": "(fn dedup\n  ([s]\n   (if (empty? s)\n     s\n     (let [xs (seq s)]\n     \t(dedup (first xs) (rest xs)))))\n  ([h t]\n   (if (empty? t)\n     (cons h t)\n     (if (= h (first t))\n       (dedup (first t) (rest t))\n       (cons h (dedup (first t) (rest t)))))))", "problem": 30, "user": "50e9d21ce4b02d54280826cf"}, {"code": "(fn [s] \n   (loop [s1 s retval []]\n     (if (not (empty? s1))\n       (if (= (first s1) (last retval))\n          (recur (rest s1) retval)\n          (recur (rest s1) (conj retval (first s1))))\n       retval)\n     ))", "problem": 30, "user": "50e448bae4b0463d3207248d"}, {"code": "(fn compress-sequence [n]\n  (map first (partition-by identity n)))", "problem": 30, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "(fn [x]\n  (reduce\n    (fn [n1 n2]\n      (if (= (last n1) n2)\n        n1\n        (conj n1 n2)))\n    []\n    x))", "problem": 30, "user": "50e4a5a9e4b0cb9ec68fbca3"}, {"code": "#(->> % (partition-by identity) (map first))", "problem": 30, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [xs] (reduce (fn [acc el] (if (= (last acc) el) acc (conj acc el))) [] xs))", "problem": 30, "user": "50ee851ee4b06330c1f87c5b"}, {"code": "(fn [xs] (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() xs))", "problem": 30, "user": "50ed9e8de4b06330c1f87c44"}, {"code": "(fn [coll]\n  (reduce\n   (fn [acc elem] (if (= elem (last acc)) acc (conj acc elem)))\n   []\n   coll))", "problem": 30, "user": "50eb4c32e4b0346a3e988cbf"}, {"code": "(fn f\n  [s]\n  (if (or (empty? s) (empty? (rest s)))\n    s\n    (if (= (first s) (second s))\n      (f (rest s))\n      (conj (f (rest s)) (first s)))))", "problem": 30, "user": "50ef77a4e4b0bdaecbb47d99"}, {"code": "(fn boo [z] (cons (first z)   \n( (fn foo[c x] (if (= x ()) () (if (= (first x) c) (foo c (rest x)) ( cons (first x) (foo (first x) (rest x)))))) (first z) (rest z))))", "problem": 30, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(partial reduce #(if(=(last %)%2)%(conj % %2))[])", "problem": 30, "user": "50ed4626e4b01236b1d4983c"}, {"code": "#((letfn ((dup\n          ([x] (dup (first x) (rest x)))\n          ([prev restl]\n             (cond \n              (empty? restl) (list prev)\n              (= prev (first restl)) (recur prev (rest restl))\n              :else (cons  prev (dup (first restl) (rest restl)))))))\n   dup) %)", "problem": 30, "user": "5047782ce4b0371827a27bc2"}, {"code": "(fn [xs] \n  (map first (partition-by identity xs)))", "problem": 30, "user": "50ef4e2be4b0a78662fa2653"}, {"code": "(fn [x]\n  ((fn process [input lastc output]\n    (cond\n      (empty? input) output\n      (= (first input) lastc) (process (rest input) lastc output)\n      :else (process (rest input) (first input) (conj output (first input))\n    ))) x 0 []))", "problem": 30, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "508c3d42e4b0f17d83ea26b2"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "#(map last (filter (fn [[x y]] (not= x y)) (partition 2 1 (cons 0 (seq %)))))", "problem": 30, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn [col]\n  (loop [col,col res,[] before,nil]\n    (cond\n     (empty? col) res\n     (= before (first col)) (recur (rest col) res before)\n     :else (recur (rest col) (conj res (first col)) (first col)))))", "problem": 30, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "(fn f [x]\n\t(letfn [(dd [x y]\n\t\t       (if (= (last x) y)\n\t\t       \t  x\n\t\t       \t  (conj x y)))]\n\t  (reduce dd [] x)))", "problem": 30, "user": "50eafeaae4b0346a3e988cbb"}, {"code": "(fn [collection]\n  (loop [[a & b] collection prev nil acc []]\n    (if (nil? a)\n      acc\n      (if (= a prev)\n        (recur b prev acc)\n        (recur b a (conj acc a))))))", "problem": 30, "user": "50ee145de4b06330c1f87c53"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50d8739ae4b01f0871336e68"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "reduce (fn [a b] (if (or (empty? a) (not= b (last a))) (conj a b) a)) []", "problem": 30, "user": "4f43b992e4b0d7d3c9f3fd2c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50ec8d93e4b04edc3377704c"}, {"code": "(fn [s]\n  (map first (partition-by identity s)))", "problem": 30, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "(fn [x]\n  (loop [[d & t] x prev nil c []]\n    (if (nil? d)\n      c\n      (if (= d prev)\n        (recur t prev c)\n        (recur t d (conj c d))))))", "problem": 30, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "#(reverse (reduce (fn [[x & xs :as r] v] (if (= x v) r (cons v r))) '() %))", "problem": 30, "user": "50e47fa5e4b0cb9ec68fbc9c"}, {"code": "(fn [x]\n  (let [xs (sequence x)]\n    (reduce\n      #(if (= (last %) %2) % (conj % %2))\n      '[]\n      xs)))", "problem": 30, "user": "50eebf46e4b06330c1f87c61"}, {"code": "(fn [sq] (map first (partition-by identity sq)))", "problem": 30, "user": "50f1dedbe4b0897c4366dcd8"}, {"code": "(fn [coll]\n  (reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) nil coll)))", "problem": 30, "user": "50f01f44e4b0bdaecbb47daf"}, {"code": "(fn [coll]\n  (loop [remainder coll\n         last-item nil\n         acc '()]\n    (if remainder\n      (recur\n       (butlast remainder)\n       (last remainder)\n       (if (= last-item (last remainder)) acc (conj acc (last remainder))))\n      acc)))", "problem": 30, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn [x] (reduce #(if (= (last %) %2) % (conj % %2)) [] x))", "problem": 30, "user": "50ebd63ce4b04edc3377703c"}, {"code": "(fn [var]\n  (map first (partition-by identity var)))", "problem": 30, "user": "50928ecfe4b097f48cc38570"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50f17c0de4b06d9538fe2123"}, {"code": "(fn [x] (\n   (fn inner [x prevChar] (\n     if (empty? x) x (if (= prevChar (first x)) (inner (rest x) prevChar) (cons (first x) (inner (rest x) (first x))))\n   )) x nil\n))", "problem": 30, "user": "50ef311fe4b0a78662fa2651"}, {"code": "(fn a [x] \n  (if (nil? (next x)) \n    x      \n  \t(if (= (first x) (second x))\n      (a (rest x))\n      (cons (first x) (a (rest x))))))", "problem": 30, "user": "50f07b21e4b0bdaecbb47dc2"}, {"code": "(fn non [x]\n    (if (= 1 (count x))\n\tx\n\t (if (= (first x) (first (rest x)))\n\t\t  (non (rest x))\n\t\t  (conj (non (rest x)) (first x))\n\t )\n\t)\n)", "problem": 30, "user": "50f4894be4b004d364930528"}, {"code": "(fn no-dups\n  [coll]\n  (when-not (empty? coll)\n    (let [head (first coll) tail (rest coll)]\n            (cons head (lazy-seq (no-dups (drop-while #(= head %) tail)))))))", "problem": 30, "user": "50f94727e4b0e7c80cb15a49"}, {"code": "(fn [coll] \n    (map first (filter (fn [[a b]] (not= a b)) (map vector coll (cons nil coll)))))", "problem": 30, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [x]\n  (reduce\n       (fn [acc val]\n\n           (if (= (last acc) val)\n             acc\n             (conj acc val)\n           )\n         )\n   \t   \n   [] \n   x)\n   \n   )", "problem": 30, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50fb46e6e4b0d10d794c19e5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "#(reverse   (reduce (fn [a b] (if (= (first a) b) a (cons b a)))           (list (first %)) %))", "problem": 30, "user": "50fca436e4b0d10d794c19fb"}, {"code": "#(for [x (range (count %)) :when (not= (nth % x) (nth % (inc x) nil))] (nth % x))", "problem": 30, "user": "50e82c31e4b0ebbe794eb7da"}, {"code": "reduce\n(fn [acc v]\n  (if (= v (last acc))\n    acc\n    (conj acc v))) []", "problem": 30, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50ec4ed7e4b04edc33777046"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f55ab5ee4b0a7574ea71809"}, {"code": "(fn dupi [x]\n\t(if (empty? (rest x))\n\t\tx\n\t\t(if (= (first x) (first (rest x)))\n\t\t\t(dupi (rest x))\n\t\t\t(cons (first x) (dupi (rest x)))\n\t\t)))", "problem": 30, "user": "50f9776be4b0e7c80cb15a4e"}, {"code": "(fn [sq] \n            (letfn \n              [(helper [rv sq] \n                       (if (empty? sq) rv \n                         (if (= (first rv) (first sq)) (helper rv (rest sq)) (helper (cons (first sq) rv) (rest sq)\n                                                                                     )\n                           )\n                         )\n                       )\n               ]\n              (reverse (helper '() sq))))", "problem": 30, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50fe2b87e4b03cd852b4e84b"}, {"code": "(fn compress [xs] \n  (if (empty? xs) \n    nil \n    (if (= (first xs) (first (rest xs))) \n      (compress (rest xs))\n      (conj (compress (rest xs)) (first xs)) \n      )))", "problem": 30, "user": "50ef5703e4b0bdaecbb47d95"}, {"code": "(fn dup [xs]\n  (if (empty? xs)\n        nil\n        (if (= (first xs) (first (rest xs)))\n          (dup (rest xs))\n          (conj (dup (rest xs)) (first xs)))))", "problem": 30, "user": "50ed1ce7e4b01236b1d49839"}, {"code": "(fn foo [s] (if (not (empty? (rest s))) (if (= (first s) (second s)) (foo (rest s)) (cons (first s) (foo (rest s)))) (cons (first s) '())))", "problem": 30, "user": "50f9c7fde4b0e7c80cb15a52"}, {"code": "(fn [xs] (map first (partition-by identity xs)))", "problem": 30, "user": "4dd59d8b535dae65d5c462eb"}, {"code": "reduce #(if (not= (last %1) %2) (conj %1 %2) (-> %1)) []", "problem": 30, "user": "50feab26e4b03cd852b4e850"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51008b6fe4b0700a7a02d6e4"}, {"code": "(fn ddf [s] (if (> (count s) 1) (if (= (first s) (first (rest s))) (ddf (cons (first s) (ddf (rest (rest s))))) (cons (first s) (ddf (rest s)))) s))", "problem": 30, "user": "50f84d85e4b0aafb827eb1f7"}, {"code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []  ;; unlike the loop/recur, this works on an empty coll as well\n\n;(fn [coll] (loop [s (seq coll) prev (first s) res [(first s)]]\n;             (if (empty? s) res \n;               (recur (rest s) (first s) (if (= (first s) prev) res (conj res (first s)))))))", "problem": 30, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn [sqn] (map first (partition-by (fn [x] x) sqn)))", "problem": 30, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "51040eb2e4b0432126ba9bb4"}, {"code": "(fn clps [s] (lazy-seq\n   (if (seq s)\n     (if (seq (rest s))\n       (cons (first s) (clps (drop-while #(= % (first s)) (rest s))))\n       [(first s)])\n     [])))", "problem": 30, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(fn [x]\n  (loop [w (rest x)\n         p (first x)\n         r [(first x)]\n         ]\n    \n    (if (not= w [])\n      (recur (rest w)\n             (first w)\n             (if (not= p (first w))\n               (conj r (first w))\n               r\n               )\n             )\n      r\n      )\n    )\n  )", "problem": 30, "user": "50fb084ee4b0d10d794c19dd"}, {"code": "#(map last (partition-by identity %))", "problem": 30, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [s] (reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] s))", "problem": 30, "user": "51059d33e4b0380e797c7d5c"}, {"code": "(fn dup\n  [s]\n  (reverse (reduce (fn [c e] (if (= (first c) e) c (conj c e) ) ) () s )) )", "problem": 30, "user": "5101192ae4b0bef64c30e266"}, {"code": "#(reduce (fn [a x] (if (= x (peek a)) a (conj a x))) [] %)", "problem": 30, "user": "5103807fe4b00c483ae17703"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "504e9011e4b069badc5a33b7"}, {"code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "problem": 30, "user": "5106bc8ae4b01150e115ebec"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5102489de4b00c483ae176f6"}, {"code": "#(let [x (->> % (partition 2 1))\n                   y (filter (partial apply not=) x)]\n               (cons (first (first x)) (map second y)))", "problem": 30, "user": "51095588e4b0e34872b3efa5"}, {"code": "(fn compress [s]\n  (if (= (next s) nil)\n    s\n    (if (= (first s) (second s))\n      (compress (rest s))\n      (cons (first s) (compress (rest s))))))", "problem": 30, "user": "51085be5e4b00aa5c85a1024"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50471d36e4b03b02161376b6"}, {"code": "(fn dd [l] (if (= (count l) 1) l (if (= (nth l 0) (nth l 1)) (dd (rest l)) (cons (first l) (dd (rest l))))))", "problem": 30, "user": "510931ede4b0c71f76895663"}, {"code": "(fn dedup [x] (map first (partition-by identity x)))", "problem": 30, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn compress [coll]\n  (when-let [[first-element & etc] (seq coll)]\n    (if (= first-element (first etc))\n      (compress etc)\n      (cons first-element (compress etc))))\n  )", "problem": 30, "user": "510a3cd4e4b06956752d35ad"}, {"code": "(fn [col] \n   (reduce\n     #(if (= (last %1) %2)\n        %1\n        (concat %1 (list %2))\n        )\n     '()\n     col\n     )\n   )", "problem": 30, "user": "510b704ee4b078ea71921100"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "510c01bae4b078ea7192110a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f23e1cde4b0d66497709fe4"}, {"code": "(fn f [lst]\n  (when-let [lst (seq lst)]\n    (if (= (first lst) (second lst))\n      (f (rest lst))\n      (cons (first lst) (f (rest lst))))))", "problem": 30, "user": "510db6cde4b078ea71921145"}, {"code": "#(reduce\n(fn [s i]\n  (if (= (last s)\n          i)\n\ts\n\t(conj s i)))\n [] %)", "problem": 30, "user": "5107b86de4b05b2b4eee7495"}, {"code": "(fn [lst0]\n    (loop [lst lst0 res []]\n      (if (empty? lst)\n        res\n        (if (not= (first lst)\n               (last res))\n          (recur (rest lst)\n                 (conj res (first lst)))\n          (recur (rest lst) res)))))", "problem": 30, "user": "4e964f4a535dbda64a6f6b42"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn [coll] (loop [final []\n                  remain coll\n                  last nil]\n             (cond\n              (empty? remain) (seq final)\n              (= last (first remain)) (recur final (next remain) last)\n              true (recur (conj final (first remain)) (next remain) (first remain)))))", "problem": 30, "user": "507a33dee4b08327cd804a68"}, {"code": "#(loop [result [] col %1]\n   (if (empty? col) (seq result)\n     (recur (if (= (last result) (first col)) result (conj result (first col))) (rest col)\n              )))", "problem": 30, "user": "510d3dc6e4b078ea71921132"}, {"code": "(partial #(if (empty? %2)\n             %1\n             (let [elem (first %2)\n                   remain (rest %2)]\n               (if (= elem (last %1))\n                 (recur %1 remain)\n                 (recur (conj %1 elem) remain))))\n          [])", "problem": 30, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn ([lst] \n  (let [interlist (map vector (drop-last lst) (rest lst))]\n    (concat (map (comp first distinct) (filter #(not= (first %) (last %)) interlist)) [(last (last interlist))]))))", "problem": 30, "user": "5102ac9de4b00c483ae176fa"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "511278bbe4b0350614f07a75"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51064b76e4b01150e115ebe4"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))\n;; taken from http://yyhh.org/blog/2011/05/my-solutions-first-50-problems-4clojure-com\n;; is it possible to do this using loop/recur?", "problem": 30, "user": "50cd0fd5e4b0f7a459302aad"}, {"code": "(fn [l] (map first (partition-by (fn [s] s) l)))", "problem": 30, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn shorty [coll]\n  (when-let [[g & d] (seq coll)]\n    (if (= g (first d))\n      (shorty d)\n      (cons g (shorty d))\n     )\n    )\n)", "problem": 30, "user": "51126a28e4b0350614f07a74"}, {"code": "#(reduce (fn [xs x]\n           (if (not= (last xs) x)\n             (conj xs x)\n             xs))\n         [] %)", "problem": 30, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn [xs]\n  (if (seq xs)\n    (loop [ys (rest xs)\n           zs [(first xs)]]\n      (if (seq ys)\n        (if (= (first ys) (last zs))\n          (recur (rest ys) zs)\n          (recur (rest ys) (conj zs (first ys))))       \n        zs))      \n    nil))", "problem": 30, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "#(filter (fn [n] (not (nil? n))) (map (fn [a b] (if  (not= a b) a nil)) % (concat \"0\" %)))", "problem": 30, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn [input]\n   (loop [result [] elements input]\n     (if (empty? elements)\n       result\n       (if (= (first elements) (last result))\n         (recur result (rest elements))\n         (recur (conj result (first elements)) (rest elements))\n         )\n       )     \n     )\n  )", "problem": 30, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [arr] (\n           reduce #(\n                    if (= (last %1) %2) %1 (conj %1 %2)\n                    ) [] (seq arr)\n          ))", "problem": 30, "user": "50feb0e1e4b03cd852b4e851"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "problem": 30, "user": "5116e176e4b0063b4e3e16d7"}, {"code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] %)", "problem": 30, "user": "50e3e108e4b01912b3285c48"}, {"code": "(fn compress\n  ([items]\n     (compress (empty items) (first items) (rest items)))\n  ([before current after]\n     (cond\n      (empty? after) (reverse (cons current before))\n      (= current (first after)) (recur before current (rest after))\n      :else (recur (cons current before) (first after) (rest after)))))", "problem": 30, "user": "511720eae4b0063b4e3e16da"}, {"code": "(fn [coll]\n  (let [rem-dupes (map (fn [item] (first item)) (partition-by identity coll))]\n  (if (string? coll)\n  \t(reduce str rem-dupes)\n    rem-dupes)))", "problem": 30, "user": "511060fae4b04c71fce993f1"}, {"code": "(fn [x] \r\n  (filter (complement nil?) (for [i (range 0 (if (coll? x) (.size x) (.length x)))\r\n                 :let [a (get x i) b (get x (inc i))]]\r\n\r\n    (if (not= a b) a)))\r\n)", "problem": 30, "user": "510a6bece4b06956752d35af"}, {"code": "(fn compress [l]\n  (if (>= (count l) 2)\n    (if (= (first l) (second l))\n      (compress (rest l))\n      (cons (first l) (compress (rest l))))\n    l))", "problem": 30, "user": "511907a4e4b046de85f62a4d"}, {"code": "(fn [coll]\n  (loop [acc []\n         lst nil\n         coll coll]\n    (if (empty? coll)\n      acc\n      (let [fst (first coll)\n            rst (rest coll)]\n        (if (= fst lst)\n          (recur acc lst rst)\n          (recur (conj acc fst) fst rst))))))", "problem": 30, "user": "51195e77e4b055cfb310d499"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50742549e4b054001656accf"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn [s] \n  (map first (partition-by identity s))\n)", "problem": 30, "user": "5081566ce4b0946d0443855b"}, {"code": "#(reverse((fn rre [vi vo] \n  (if (empty? vi)\n    vo\n    (if (and (seq vo)\n     (= (first vi) (first vo)))\n     (rre (rest vi) vo)\n     (rre (rest vi) (cons (first vi) vo)))\n  )) % '()))", "problem": 30, "user": "50dc2cd7e4b02e6ac9592c86"}, {"code": "(fn [a]\n  (loop [ret [] [x & xs] a]\n    (if x\n      (if (= (last ret) x)\n        (recur ret xs)\n        (recur (conj ret x) xs))\n      ret)))", "problem": 30, "user": "4e74e119535d7a570dd295bc"}, {"code": "(fn [items]\n  (map first (partition-by identity items)))", "problem": 30, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn compress [s]\n  (let [a (first s)\n        b (fnext s)]\n    (if (empty? s) s\n      (if (= a b)\n        (compress (cons a (nnext s)))\n        (cons a (compress (next s)))))))", "problem": 30, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn [coll]\n  (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() coll))", "problem": 30, "user": "51181009e4b0e0897831a60f"}, {"code": "(fn [data] (reverse (loop [r '()\n               c data]\n            (if (empty? c)\n                r\n              (recur (conj r (first c))\n                     (drop-while #(= (first c) %) c))))))", "problem": 30, "user": "511b810ce4b07ab9ec456182"}, {"code": "#(map first(partition-by identity %))", "problem": 30, "user": "5115cf87e4b0ce5098ee73c3"}, {"code": "reduce #(if ( = (last %) %2) % (conj % %2)) []", "problem": 30, "user": "51193314e4b055cfb310d492"}, {"code": "(fn compress-seq [s]\n  (when-let [[h & t] (seq s)]\n    (if (= h (first t))\n      (compress-seq t)\n      (cons h (compress-seq t)))))", "problem": 30, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "511c91ace4b00c2a1fa7ff7a"}, {"code": "(fn [l] \n  ((fn rcomp [f r] \n     (cond \n       (empty? r) (cons f '())\n       (= f (first r)) (rcomp (first r) (rest r))\n       :else (cons f (rcomp (first r) (rest r)))\n     )\n   ) (first l) (rest l))\n)", "problem": 30, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "#(mapcat distinct (partition-by identity %))", "problem": 30, "user": "5119ef37e4b06c8af0111817"}, {"code": "(fn [xs]\n  (reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) '() xs)))", "problem": 30, "user": "511623cbe4b0d4f670fd2fe1"}, {"code": "(fn [xs] \n  (let [a (remove  (fn [[a b]] (= a b)) (partition 2 1 xs))] \n    (concat (first a) (map last (rest a)))))", "problem": 30, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn [s]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "511c44fde4b00c2a1fa7ff77"}, {"code": "(fn [x] [x] (reverse (loop [ptr x ret '() last nil] (if (empty? ptr) ret (recur (rest ptr) (if (= (first ptr) last) ret (conj ret (first ptr))) (first ptr))))))", "problem": 30, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "(fn [coll]\n\t(loop [uniques []\n\t\t   prev nil\n\t\t   [x & more] coll]\n\t\t   (if x\n\t\t   \t(recur (if (= prev x)\n\t\t   \t\t\tuniques\n\t\t   \t\t\t(conj uniques x))\n\t\t   \t\tx\n\t\t   \t\tmore)\n\t\t   uniques)))", "problem": 30, "user": "51205867e4b0e88f5a20c40f"}, {"code": "(partial reduce (fn cmb\n  [xs x]\n  (if (= (last xs) x)\n    xs\n    (conj xs x))) [])", "problem": 30, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "; first attempt\n; (fn [coll] (map first (filter (fn [[a b]] (not= a b)) (for [i (take (count coll) (iterate inc 0))] [(get coll i) (get coll (inc i))] ))))\n\n#(map first (partition-by identity %))", "problem": 30, "user": "511f88eee4b085952a83535f"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "511e17a9e4b0c5b849dd36b0"}, {"code": "(fn this [s]\n  (cond \n   (empty? s) s\n   (empty? (rest s)) s\n   (= (first s) (first (rest s))) (recur (rest s))\n   true (conj (this (rest s)) (first s))))", "problem": 30, "user": "4ec12577535dfed6da9c6da8"}, {"code": "#(reduce (fn [acc i](cond (not= i (last acc)) (conj acc i) :else acc)) [] %)", "problem": 30, "user": "511ac026e4b0c87c59c9670e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5121cccee4b05ae5a5823c12"}, {"code": "#(seq (reduce (fn [l i] (if (= (last l) i) l (conj l i))) '[] %))", "problem": 30, "user": "50e54fe4e4b049a9877538a0"}, {"code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] %)", "problem": 30, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "#((fn cc [y z w] (cond (empty? y) (seq w)\n                        (not (= z (first y))) (cc (rest y) (first y) (conj w (first y)))\n                        :else (cc (rest y) z w )))\n   % nil [])", "problem": 30, "user": "5099283ce4b0cae2931060af"}, {"code": "(fn [col] \n  (reduce #(if-not (= (last %) %2) (conj % %2) %) [] col))", "problem": 30, "user": "4fc8769be4b0ee37620e1833"}, {"code": "(fn compress\n  ([s] (compress s :none))\n  ([s prev]\n     (let [fst (first s)\n           rst (rest s)]\n       (cond (nil? fst) '()\n             (= fst prev) (compress rst fst)\n             :else (concat (list fst) (compress rst fst))))))", "problem": 30, "user": "5123f099e4b02c3f2a072cca"}, {"code": "(fn [x]\n  (loop [x x v []]\n    (if (nil? (first x))\n      v\n      (if (= (first x) (last v))\n        (recur (rest x) v)\n        (recur (rest x) (concat v (vector (first x))))))))", "problem": 30, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "511ac2ede4b0c87c59c9670f"}, {"code": "(fn [coll]\n  (loop [result []\n         coll coll]\n    (if (empty? coll)\n      result\n      (if (= (last result) (first coll))\n        (recur result (rest coll))\n        (recur (conj result (first coll)) (rest coll))))))", "problem": 30, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn [xs] (loop [xs xs ch nil acu []] (if (seq xs) (if (= (first xs) ch) (recur (rest xs) ch acu) (recur (rest xs) (first xs) (conj acu (first xs)))) acu)))", "problem": 30, "user": "511a0374e4b06c8af011181a"}, {"code": "(fn [xs] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] xs))", "problem": 30, "user": "510acd6ee4b078ea719210f4"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn [s] \n  (reverse \n   (reduce #(if-not (= (first %) %2) (conj % %2) %) nil s)))", "problem": 30, "user": "511618b1e4b0d4f670fd2fdf"}, {"code": "(fn [l]\n  (map first (partition-by identity l))\n)", "problem": 30, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn compress [a] \n  (if (= (count a) 1) (list (first a))\n    (if (= (first a) (nth a 1)) (compress (drop 1 a))\n      (conj (compress (drop 1 a)) (first a))\n    )\n  )\n)", "problem": 30, "user": "5127ca90e4b03a34742b42ff"}, {"code": "(fn f [s]\n  (cond (< (count s) 2) s\n        (= (first s) (second s)) (f (rest s))\n        1 (cons (first s) (f (rest s)))))", "problem": 30, "user": "51256b40e4b05d10e3e395f8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5127e504e4b03a34742b4302"}, {"code": "reduce (fn [xs y] (if (= y (last xs)) xs (conj xs y) )) []", "problem": 30, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn [x]\n  (reduce\n   (fn [x y]\n     (if (empty? x)\n       [y]\n       (if (= (last x) y)\n         x\n         (conj x y)\n         )\n       )) [] x))", "problem": 30, "user": "51284226e4b03a34742b4308"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5128554ee4b03a34742b430a"}, {"code": "(fn compress [coll]\n  (if (> (count coll) 0)\n    (concat\n     [(first coll)]\n     (compress\n      (drop-while\n       #(= % (first coll))\n       (rest coll))))))", "problem": 30, "user": "51170b49e4b0063b4e3e16d9"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "510dc185e4b078ea71921146"}, {"code": "(fn uniq\n  ([lst] (uniq lst nil))\n  ([lst seen] (cond \n               (empty? lst) '()\n               (= seen (first lst)) (uniq (next lst) seen)\n               :else (cons (first lst) (uniq (next lst) (first lst))))))", "problem": 30, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn compress \n  ([target-seq] (compress (rest target-seq) (first target-seq) [(first target-seq)]))\n  ([target-seq previous acc]\n   (if (empty? target-seq)\n     acc\n   (if (= (first target-seq) previous)\n     (compress (rest target-seq) previous acc)\n     (compress (rest target-seq) (first target-seq) (conj acc (first target-seq)))))))", "problem": 30, "user": "512a7c70e4b0ff5c4bc1f99d"}, {"code": "(fn [s] (concat (map first (filter (fn [x] (not= (first x) (second x))) (partition 2 1 s))) (list (last s))))", "problem": 30, "user": "5125834ae4b05d10e3e395fa"}, {"code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2)) ) [] x))", "problem": 30, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn [xs]\n  (reduce #(if (= (last %) %2) % (concat % (list %2))) () xs))", "problem": 30, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(fn [coll]\n  (reduce (fn [ccoll, x]\n            (if (= x (peek ccoll))\n              ccoll\n              (conj ccoll x)))\n          [] coll))", "problem": 30, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "#(loop [from-list %1 to-list []]\n        (if (empty? from-list)\n          to-list\n          (recur\n           (rest from-list)\n           (if (not (= (first from-list) (last to-list)))\n             (conj to-list (first from-list))\n             to-list))))", "problem": 30, "user": "4e028764535d04ed9115e790"}, {"code": "(fn [xs]\n  (loop [last nil xs xs ys []]\n    (cond\n      (empty? xs) ys\n      (= last (first xs))\n        (recur (first xs) (rest xs) ys)\n      :else\n        (recur (first xs) (rest xs) (conj ys (first xs))))))", "problem": 30, "user": "4fed24a5e4b0681fd128dcaf"}, {"code": "(fn [s] (map #(first %) (partition-by identity s)))", "problem": 30, "user": "512b9e59e4b04d059cf1fd17"}, {"code": "reduce (fn [a b] (if (= (last a) b) a (conj a b))) []", "problem": 30, "user": "510fd798e4b04c71fce993dc"}, {"code": "#(letfn [(remove-dups [input result]\n  (if (empty? input)\n  \tresult\n  \t(if (= (last result) (first input))\n  \t   (remove-dups (rest input) result)\n  \t   (remove-dups (rest input) (conj result (first input))))))]\n  (remove-dups (seq %) []))", "problem": 30, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn m [x] \n\t(if (empty? x)  \n        \tx \n    \t\t(if (= (first x) (second x)) \n\t\t\t(m (rest x)) \n\t\t\t(cons (first x) (m (rest x))))))", "problem": 30, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "(fn compressor\n  ([target_list duper results]\n    (let [ft (first target_list)]\n      (cond\n        (empty? target_list)\n          results\n        (= duper ft)\n          (recur (rest target_list) duper results)\n        :else\n          (recur\n            (rest target_list)\n            ft\n            (concat results (list ft)))\n      )\n    )\n  )\n  ([target_list]\n    (let [first_elm (first target_list)]\n      (compressor (rest target_list) first_elm (list first_elm)))\n    )\n)", "problem": 30, "user": "502be4fae4b08f5602f232eb"}, {"code": "(fn cmpr [coll]\n  (loop [init [] tail coll]\n    (if (empty? tail)\n      init\n      (if (= (last init) (first tail))\n        (recur init (rest tail))\n        (recur (conj init (first tail)) (rest tail))))))", "problem": 30, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "511e3454e4b028ee16def195"}, {"code": "(fn [s]\n  (reduce \n   (fn [x y]\n     (if (not= (last x) y)\n       (conj x y)\n        x)) [] s))", "problem": 30, "user": "512eb723e4b0b740abc5982b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f525fdce4b03ad3f0c10d37"}, {"code": "(fn [l]\n  (reduce #(if (= %2 (peek %1))\n                  %1\n                  (conj %1 %2))\n          [] l))", "problem": 30, "user": "5117c31ee4b0e0897831a60c"}, {"code": "(fn [xs] (filter identity (map-indexed\n                           (fn [i e] (if (and (< (inc i) (count xs))\n                                              (= e (nth xs (inc i))))\n                                       nil e))\n                           xs)))", "problem": 30, "user": "51307b84e4b08c712d3fae39"}, {"code": "reduce (fn [s x] (if (= x (last s)) s (conj s x))) []", "problem": 30, "user": "512f2d17e4b0762be4c7aad8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn condense\n  [s]\n  (if-let [[x & xs] (seq s)]\n    (if (= x (first xs))\n      (recur (cons x (rest xs)))\n      (cons x (condense xs)))\n    s))", "problem": 30, "user": "5131104ae4b09e21d785bdfe"}, {"code": "(fn foo \n  ([x] ()(foo [] x))\n  ([a b] \n    (if (not= 0 (count b))\n     \t(if (= (last a) (first b))\n\t    \t(foo a (rest b))\n            (foo (conj a (first b)) (rest b))\n         )\n     a\n   )\n  )\n)", "problem": 30, "user": "4e2164ff535d04ed9115e815"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "4dada913c9a9d6ed2d99dc57"}, {"code": "#(reduce (fn [a i] (if (= i (last a)) a (conj a i)) ) [] %)", "problem": 30, "user": "511d11d7e4b022853b0e079f"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "512b7a05e4b04d059cf1fd14"}, {"code": "reduce #(if (= (peek %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "50d3ec8be4b030b634c368bb"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn ! [coll]\n  (when-let [[f & r] coll]\n    (if (= f (first r))\n      (! r)\n      (cons f (! r)))))", "problem": 30, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "(fn [xs]                                                                                                      \n  (loop [it (first xs)                                                                                                  \n         is (rest xs)                                                                                                   \n         acc []]                                                                                                        \n    (println (drop-while #(= it %) is))                                                                                 \n    (if-not (seq is)                                                                                                    \n      acc                                                                                                               \n      (recur                                                                                                            \n       (first (drop-while #(= it %) is))                                                                                \n       (drop-while #(= it %) is)                                                                                        \n       (conj acc it)))))", "problem": 30, "user": "50ed8fd1e4b06330c1f87c3f"}, {"code": "#(reduce (fn [o s] (if (distinct? (last o) s) (conj o s) o)) [] %)", "problem": 30, "user": "510528a0e4b0730a5f55ad85"}, {"code": "(fn rmdup\n  [l]\n  (if (= 1 (count l))\n    l\n    (if (= (first l) (second l))\n      (rmdup (rest l))\n      (conj (rmdup (rest l)) (first l)))))", "problem": 30, "user": "504e12ade4b078edc5f593b7"}, {"code": "#(loop [lst % res []]\n   (if (empty? lst)\n     res\n     (if (= (last res) (first lst))\n       (recur (rest lst) res)\n       (recur (rest lst) (conj res (first lst))))))", "problem": 30, "user": "51000111e4b00d7ad4cab15e"}, {"code": "(fn [lista] (reverse (reduce (fn [lst elem] \n        (if (= (first lst) elem) \n         lst \n         (cons elem lst)\n        )\n      ) [] lista)))", "problem": 30, "user": "5131c922e4b06942423563c9"}, {"code": "(partial reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [])", "problem": 30, "user": "51364acfe4b04ac1f358dd51"}, {"code": "(fn mycompress [s]\n  (reduce #(if (= (last %1) %2) \n               %1 \n               (conj %1 %2)) \n          [] (seq s)))", "problem": 30, "user": "512eb1e7e4b0b740abc5982a"}, {"code": "(fn myrev [in]\n  (reduce (fn red [prev foll]\n  (let [p (last prev)]\n    (if (= p foll)\n    \tprev\n    \t(concat prev (list foll))))) '() in))", "problem": 30, "user": "4fedd993e4b0198f34b063bc"}, {"code": "(fn f [s]\n  (if-let [[x & xs] (seq s)]\n    (concat\n     (if (= x (first xs))\n       []\n       [x])\n     (f xs))))", "problem": 30, "user": "504ffb8fe4b0a02f9cffdeae"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "51367626e4b04ac1f358dd53"}, {"code": "#(reduce (fn [col item]\n           (if (= (last col) item)\n             col\n             (conj col item))) [] %)", "problem": 30, "user": "4f55f4b1e4b0a7574ea7180d"}, {"code": "(fn [root-s]\n  #(if (string? root-s) (apply str %) %) (reduce (fn [res e] (if (not= (last res) e) (concat res (list e)) res)) (list (first root-s)) (rest root-s)) )", "problem": 30, "user": "511b9e81e4b00c2a1fa7ff6e"}, {"code": "(fn [coll] (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() coll))", "problem": 30, "user": "4e823f41535db62dc21a62c8"}, {"code": "(fn [xs]\n  (let [my-dup (fn my-dup [x out in]\n                 (cond\n                  (empty? in) (conj out x)\n                  (= x (first in)) (my-dup x out (rest in))\n                  :else (my-dup (first in) (conj out x) (rest in))\n                 )\n               )\n        ]\n    (reverse (my-dup (first xs) '() (rest xs)))\n  )\n)", "problem": 30, "user": "51365524e4b04ac1f358dd52"}, {"code": "#(->> (map list % (concat (rest %) '(nil))) (filter (complement (partial apply =))) (map first))", "problem": 30, "user": "5137c3b0e4b0509a8b470482"}, {"code": "(fn [s]\n     (reduce #(concat %1 (if (= (last %1) %2) () (list %2))) '() s ))", "problem": 30, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn [l] (remove nil?(map #(when (not= %1 %2) %1) l (concat (rest l) [nil]))))", "problem": 30, "user": "51352899e4b082aeb3a3f03b"}, {"code": "#(reverse \n  (reduce (fn [a b] (if (= (first a) b) a (cons b a))) \n          (list (first %)) %))", "problem": 30, "user": "5139ff96e4b067e25a345ec1"}, {"code": "(fn [col] (loop [x (first col) xs (rest col) result []]\n               (if (nil? x) result (recur (first xs) (rest xs) (if (= x (first xs)) result (conj result x))))))", "problem": 30, "user": "513a4babe4b067e25a345eca"}, {"code": "(fn d \n  ([x]\n    (d (rest x) [(first x)]))\n  ([x accum]\n    (if (empty? x)\n      accum\n      (if (= (first x) (last accum))\n        (d (rest x) accum)\n        (d (rest x) (conj accum (first x)))))))", "problem": 30, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50e3fe8fe4b0463d32072488"}, {"code": "(fn[s] (loop [r s result []](do (println result) (if (= r '()) (seq result) (recur (rest r) (if-not (= (first r) (last result)) (conj result (first r)) result))))))", "problem": 30, "user": "5138d08be4b0a5db03d727db"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn test [x]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x\n  )\n)", "problem": 30, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn f [coll] (cond\n              (empty? coll)\n              nil\n              (= (first coll) (second coll))\n                (f (rest coll))\n              :else\n                (cons (first coll) (f (rest coll)))))", "problem": 30, "user": "513f0565e4b051389b345b3b"}, {"code": "(comp reverse (partial reduce #(if (= (first %) %2) % (conj % %2)) ()) seq)", "problem": 30, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "(fn [c] (loop [coll (into [] c) i 1 result (list (coll 0))] \n   \t\t(if (= i (count coll)) \n   \t\t\t(reverse result) \n   \t\t\t(recur coll (inc i) \n   \t\t\t\t(if (not (= (coll i) (coll (- i 1)))) \n   \t\t\t\t\t(conj result (coll i)) result)))))", "problem": 30, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn remcon [ss]\n  (loop [xs ss sol '()]\n    (cond \n     (nil? (first xs)) (reverse sol)\n     (= (first xs) (first sol)) (recur (rest xs) sol)\n     :else (recur (rest xs) (conj sol (first xs))))))", "problem": 30, "user": "4fb804f7e4b081705acca2d6"}, {"code": "(fn fltr [col]\n  (when-let [[f & r] (seq col)]\n    (if (= f (first r))\n      (fltr r)\n      (cons f (fltr r)))))", "problem": 30, "user": "513fb358e4b00f13ea1bd893"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "513bafa4e4b04402f587b77c"}, {"code": "(fn [x] (reduce (fn[a b] (if (= (peek a) b) a (conj a b))) [] x))", "problem": 30, "user": "510b5596e4b078ea719210fd"}, {"code": "(fn [l] \n  (loop [[f & ls] l out [(first l)]] \n    (if (nil? ls) \n      out \n      (let [s (first ls)]\n        (recur ls (if (= f s) out (conj out s)))))))", "problem": 30, "user": "51411e3be4b05ca1a0b379f3"}, {"code": "(fn [l]\n  (loop [x l ret []]\n    (if (nil? (seq x))\n      ret\n      (let [z (conj ret (first x))]\n        (if-not (= (first x) (last ret))\n          (recur (rest x) z)\n          (recur (rest x) ret))))))", "problem": 30, "user": "513cb853e4b0b86ece9f322b"}, {"code": "#(->> %\nreverse\n(reduce (fn [xs y] (if (= (first xs) y) xs (cons y xs))) ())\n)", "problem": 30, "user": "513edd13e4b051389b345b39"}, {"code": "#(reverse \n  (reduce \n    (fn [acc,item] \n      (if (not= (first acc) item)                \n        (conj acc item)\n        acc     \n        )\n      ) \n    () \n    %\n    ) \n  )", "problem": 30, "user": "513f53c6e4b051389b345b40"}, {"code": "(fn consec [s]\n    (if (empty? s) s\n        (cons (first s)\n              (consec (drop-while (partial = (first s)) (rest s))))))", "problem": 30, "user": "513bb7a6e4b04402f587b77d"}, {"code": "(partial reduce (fn [acc x] (if (= x (last acc)) acc (conj acc x))) [])", "problem": 30, "user": "51422945e4b0b50abeb46b2e"}, {"code": "(fn [s] (reduce #(if (= (last %) %2) % (conj % %2)) [] s))", "problem": 30, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51416934e4b03d51af0d04f0"}, {"code": "(fn [l]\n  (loop [lst l\n         ret ()]\n    (if (empty? lst)\n      (reverse ret)\n      (recur (drop-while #(= (first lst) %1) lst) (cons (first lst) ret)))))", "problem": 30, "user": "5142ea50e4b0c172af7558ca"}, {"code": "#(reduce (fn [col x] (if (= x (last col)) col (conj col x))) []\n           (seq %))", "problem": 30, "user": "5145832be4b0e8879607340a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "513dca07e4b0825f97f7f962"}, {"code": "(fn filtr [coll]\n  (when-let [[fst & rst] (seq coll)]\n    (if (= fst (first rst))\n      (filtr rst)\n      (cons fst (filtr rst))\n    )\n  )\n)", "problem": 30, "user": "512a8ef7e4b0ff5c4bc1f99e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50e135f4e4b084616e11c667"}, {"code": "#(loop [xs %, r []]\n   (cond\n    (empty? xs) r\n    (= (first xs) (last r)) (recur (rest xs) r)\n    :else (recur (rest xs) (conj r (first xs)))\n    )\n   )", "problem": 30, "user": "5136f659e4b04059df19f2fd"}, {"code": "(fn my-compress [x]\n  (if (empty? x)\n    '()\n    (let [other (my-compress (rest x))]\n      (if (= (first x) (first other))\n        other\n        (list* (first x) other)\n        )\n      )\n    )\n  )", "problem": 30, "user": "5145c116e4b099c3fbe2884a"}, {"code": "#(reduce (fn [l v] (if (= v (last l)) l (conj l v))) [] %)", "problem": 30, "user": "51431da2e4b0c172af7558d0"}, {"code": "(fn [xs] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] xs))", "problem": 30, "user": "4fc53390e4b081705acca389"}, {"code": "(fn [coll] (reverse (reduce (fn [x y] (if-not (= y (first x)) (cons y x) x)) () coll)))", "problem": 30, "user": "51430fb2e4b0c172af7558ce"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "514852b4e4b0203766d54154"}, {"code": "(fn [coll]\n          (letfn [(r [coll]\n                    (if (empty? coll)\n                      coll\n                      (if (= (first coll) (second coll))\n                        (r (rest coll))\n                        (cons (first coll) (r (rest coll))))))]\n            (r coll)))", "problem": 30, "user": "504e0136e4b078edc5f5938e"}, {"code": "(fn compress [x]\n  (if (or (empty? x) (empty? (rest x)))\n    x\n    (let [c (compress (rest x))]\n    (if (= (first x) (first c))\n      c\n      (cons (first x) c)))))", "problem": 30, "user": "5110b8bae4b04c71fce993f4"}, {"code": "(fn [c] \n  (let [pairs (filter #((complement =) (first %) (last %)) (partition 2 1 c))]\n    (concat (map first (drop-last pairs)) (last pairs))))", "problem": 30, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn compress2 [x]\n  (loop [result () \n         coll x \n         last-seen nil\n         next-char nil]\n    (if (empty? coll)\n      (reverse result)\n      (if (not= last-seen (first coll))\n        (recur (cons (first coll) result) (rest coll) (first coll) (first coll))\n        (recur result (rest coll) last-seen (first coll))\n        )\n      )\n    )\n  )", "problem": 30, "user": "51377188e4b04059df19f303"}, {"code": "#(reduce\n  (fn [xs x]\n    (if (not= (last xs) x)\n      (conj xs x)\n      xs))\n  [] %)", "problem": 30, "user": "5140c505e4b049dea086df40"}, {"code": "#(loop [xs % res []] \n    (if (empty? xs)\n        res\n        (if (= (first xs) (last res))\n            (recur (rest xs) res)\n            (recur (rest xs) (conj res (first xs))))))", "problem": 30, "user": "4fb4303fe4b081705acca2ac"}, {"code": "reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '()", "problem": 30, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn [s] (reduce #(if (= %2 (last %1)) %1 (concat %1 (list %2))) (list(first s))  (rest s)))", "problem": 30, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn [ys]\n  ((fn cm' [[x & xs] p]\n    (cond (nil? x) nil\n          (= x p) (cm' xs p)\n          :else (conj (cm' xs x) x)))\n   ys nil))", "problem": 30, "user": "50e09313e4b061dbdced7233"}, {"code": "reduce #(if (=(last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn remove-dupes [target]\n  (if (empty? target)\n    ()\n    (cond\n     (= (count target) 1) target\n     (= (first target) (second target)) (remove-dupes (rest target)) \n     :else (conj (remove-dupes (rest target))(first target)))))", "problem": 30, "user": "51177fbce4b0e0897831a60b"}, {"code": "(fn compress [[x & xs :as all]] (cond (empty? all) [] (= x (first xs)) (compress (cons x (rest xs))) :else (cons x (compress xs))))", "problem": 30, "user": "50723bbae4b0e3170b5a868b"}, {"code": "(fn [s]\n    (let [parts (partition 2 1 [:c] s)\n          r1 (map first (filter #(not= (first %) (second %)) parts))]\n      r1))", "problem": 30, "user": "514d8084e4b019235f6c0588"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "514d2c7ee4b019235f6c0582"}, {"code": "reduce #(if (= (last %) %2) % (concat % [%2])) '()", "problem": 30, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5148bcbee4b05514c84b7cc6"}, {"code": "(fn [a]\n(reverse (loop [result '() b a]\n(let [fb (first b) frb (first (rest b))]\n(if (not (empty? b))\n(if (= fb frb)\n(recur (conj result fb)\n(drop-while (fn [i] (= fb i)) b)\n)\n(recur (conj result fb) (rest b))\n)\nresult\n)\n)\n))\n)", "problem": 30, "user": "51340abbe4b0915833951877"}, {"code": "reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '()", "problem": 30, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "513e9aa0e4b02b2a3d8235c4"}, {"code": "(fn [s]\n  (map first (partition-by identity s)))", "problem": 30, "user": "51502056e4b098b221effc25"}, {"code": "(fn [list]\n  (loop [my-list (rest list)\n         result [(first list)]]\n    (cond\n     (empty? my-list) result\n     (= (last result) (first my-list)) (recur (rest my-list) result)\n     :else (recur (rest my-list) (conj result (first my-list))))))", "problem": 30, "user": "51508efce4b0c51f0585bbb4"}, {"code": "(fn [dup-col] (reduce #(if (= %2 (last %1)) %1 (concat %1 [%2])) \"\" dup-col))", "problem": 30, "user": "51037468e4b00c483ae17702"}, {"code": "#(conj (\n        (fn compr [l c] (if (empty? l)\n                            '()\n                          (if (= (first l) c)\n                    \t\t(compr (rest l) c)\n                    \t\t(conj (compr (rest l) (first l)) (first l))\n                          ))\n          )\n    \t(rest %) (first %)\n        )\n   \t(first %)\n       )", "problem": 30, "user": "51448607e4b0d29bc9e5e336"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5146df5ae4b04ef915e3731d"}, {"code": "(comp (partial map first) (partial partition-by identity))", "problem": 30, "user": "5150600de4b098b221effc29"}, {"code": "(comp (partial map first) (partial partition-by identity))", "problem": 30, "user": "4f50d933e4b03ad3f0c10d11"}, {"code": "(fn compress [x]\n  (if (empty? x) (list)\n    (\n     if (= (count x) 1) (list (first x))\n     (\n      if (= (first x) (first (rest x))) (compress (rest x))\n      (conj (compress (rest x)) (first x))\n     )\n    )\n  )\n)", "problem": 30, "user": "5151a6bee4b03e678e393ad3"}, {"code": "(fn [s]\n  (loop [res [(first s)] left (rest s)]\n    (cond\n     (empty? left) res\n     (= (last res) (first left)) (recur res (rest left))\n     :else (recur (conj res (first left)) (rest left)))))", "problem": 30, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn [c]\n  (loop [xe c, prev (first xe), res (vector prev)]\n    (if (seq xe)\n      (let [f (first xe)]\n        (if (= f prev)\n          (recur (rest xe) prev res)\n          (recur (rest xe) f (conj res f))))\n      res)))", "problem": 30, "user": "4dcc2435535d5973398f9290"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "5151aa14e4b03e678e393ad4"}, {"code": "(fn f [[x & xs]] (cond (nil? xs) [x] (= x (first xs)) (f xs) true (concat [x] (f xs))))", "problem": 30, "user": "514def61e4b019235f6c0591"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5150f87ae4b03e678e393ac7"}, {"code": "#(map first (partition-by identity %))\n\n;#(reduce (fn [res item] ;\n;\t   (cond \n;\t     (empty? res) (conj res item)\n;\t     (= (last res) item) res\n;             :else (conj res item)))\n;\t      []  (seq %))", "problem": 30, "user": "5016ac54e4b052339a490e7b"}, {"code": "(fn de-leroy [s]\n  (reduce #(if (not= (last %1) %2)\n             (conj %1 %2)\n             %1)\n          []\n          s))", "problem": 30, "user": "51460e4ce4b04ef915e37314"}, {"code": "(fn [src]\n  (loop [src src dest []]\n    (if (empty? src)\n      (reverse dest)\n      (if (= (first src) (second src))\n        (recur (rest src) dest)\n        (recur (rest src) (cons (first src) dest))))))", "problem": 30, "user": "510ec1bce4b07438aa321461"}, {"code": "(fn [x](filter #(or %)(map #(if(=% %2)nil%) x (cons :a x))))", "problem": 30, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn dup [col]\n  (cond\n   (empty? col) '()\n   (= (first col)(second col))  (dup (rest col))\n   :else (cons (first col) (dup (rest col)))\n   ))", "problem": 30, "user": "51427a8be4b0b50abeb46b37"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "514f0723e4b019235f6c0599"}, {"code": "#(map last (partition-by list %))", "problem": 30, "user": "514afd1be4b0bd81940b86c6"}, {"code": "(fn [lst] (reverse (reduce (fn [xs y] (if (= (first xs) y) xs (cons y xs))) [] lst)))", "problem": 30, "user": "51558136e4b06c5f6a1490a8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51533ecde4b0252ac4b16619"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51383346e4b0a5db03d727d4"}, {"code": "(fn nodupees [input]\n  (let [exc (fn exc [x input]\n              (if (empty? input) '()\n                (if (= x (first input))\n                  (exc x (rest input))\n                  (concat (list (first input)) (exc (first input) (rest input))))))]\n    (concat\n      (list (first input))\n      (exc (first input) (rest input)))))", "problem": 30, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "5150a7d7e4b03e678e393abb"}, {"code": "(fn [s] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "(fn [x] \n  (reduce\n     (fn [x y] (if (= (last x) y) x (conj x y)))\n   []\n   x))", "problem": 30, "user": "51547920e4b084ca81ee2e1c"}, {"code": "#(reverse \n   (loop\n     [prev nil o % n ()]\n     (if (empty? o) n\n       (let [c (first o)]\n         (if (not= c prev)\n           (recur c (rest o) (conj n c))\n           (recur c (rest o) n))))))", "problem": 30, "user": "515896f2e4b059418b97f0a8"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "51584459e4b0a069fd272c74"}, {"code": "(fn [col] (map first (partition-by identity col)))", "problem": 30, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "(fn [in]\n  (loop [l in acc '() ]\n    (let [f (first l) r (rest l)]\n      (if (empty? l)\n        (reverse acc)\n        (recur r\n               (if (and (not (empty? r)) (= f (first r)))\n                 acc\n                 (conj acc f)))))))", "problem": 30, "user": "515828b8e4b0a069fd272c71"}, {"code": "(fn compress [xs]\n  (when (seq xs)\n    (if (= (first xs) (second xs))\n      (compress (rest xs))\n      (cons (first xs) (compress (rest xs))))))", "problem": 30, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "reduce\n  (fn [a b]\n    (if (not= (peek a) b) \n      (conj a b) \n      a)) []", "problem": 30, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn [coll]\n          (letfn [(comp-seq [coll]\n                    (if\n                      coll\n                      (let\n                        [f (first coll)\n                         r (next coll)]\n                        (if\n                          (not (= f (first r)))\n                          (cons f (comp-seq r))\n                          (comp-seq r)))))]\n            (comp-seq coll)))", "problem": 30, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [coll]\n  (loop [c coll acc '()]\n    (cond (empty? c) (reverse acc)\n     \t  (empty? acc) (recur (rest c) (conj acc (first c)))          \n          (= (first c) (first acc)) (recur (rest c) acc)\n          :else (recur (rest c) (conj acc (first c))))))", "problem": 30, "user": "515c6132e4b069911535cf0d"}, {"code": "(fn [z] (reduce (fn [x y] (if (not= (last x) y) (conj x y) x)) [] z))", "problem": 30, "user": "50a2e3fbe4b029e8bace3629"}, {"code": "(fn dup [x] (reduce #(if (= (last %1) %2)\n           %1\n           (concat %1 [%2]))\n           \"\" x))", "problem": 30, "user": "513b43ede4b067e25a345ed3"}, {"code": "#(reverse (first (reduce (fn [[acc prev] e] (if (= prev e) [acc e] [(conj acc e) e])) [(conj '() (first %)) (first %)] (seq (rest %)))))", "problem": 30, "user": "515efd01e4b02c55805ea238"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "515f0a39e4b02c55805ea23a"}, {"code": "(fn [s]\n  (cond\n    (empty? s) s\n    :else (reduce\n            (fn [c e]\n              (if (= e (peek c))\n                c\n                (conj c e)))\n            [(first s)]\n            (rest s))))", "problem": 30, "user": "51473a70e4b0d520409ed394"}, {"code": "(fn [coll]\n  (reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) (cons '() coll))))", "problem": 30, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn [s]\n  (map first (partition-by identity s)))", "problem": 30, "user": "515e38ace4b049add99a0538"}, {"code": "#(\n  (fn compress [x b acc]\n    (let [nxt (first x)]\n      (cond \n        (empty? x) (reverse acc)\n        (= nxt b) (compress (rest x) b acc)\n        :else (compress (rest x) nxt (cons nxt acc)))))\n  (rest %) (first %) (list (first %)))", "problem": 30, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn [x] (apply concat\n               (map #(if (= %1 %2) nil (list %1))\n                    x (cons nil x))))", "problem": 30, "user": "515ead6be4b049add99a053e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "515cf9b5e4b00901442db1d4"}, {"code": "(fn [lst]\n  (let [a (fn a [prev, lst]\n            (if (empty? lst)\n              lst\n              (if (= prev (first lst))\n                (a prev (rest lst))\n                (cons (first lst) (a (first lst) (rest lst))))))]\n    (cons (first lst) (a (first lst) (rest lst)))))", "problem": 30, "user": "51607eb0e4b009fba0926e27"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn [xs]\n   (map first (partition-by identity xs)))", "problem": 30, "user": "50f48298e4b004d364930527"}, {"code": "reduce #(if(= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "5153316ce4b0252ac4b16611"}, {"code": "(fn [items] \n  (reverse (reduce (fn [a b]\n                     (if (not= (first a) b) \n                       (conj a b) \n                       a)) '() items)))", "problem": 30, "user": "504ee511e4b0e7ad84dbc4a4"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "51553ea7e4b06c5f6a1490a2"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "5156e767e4b04360f2428e6b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "(fn f [coll]\n    (case (count coll)\n      0 coll\n      1 coll\n      (let [r (rest coll)\n            a (first coll)\n            b (first r)]\n        (if (= a b)\n          (f r)\n          (cons a (f r))))))", "problem": 30, "user": "515ef58be4b02c55805ea237"}, {"code": "#(reverse (reduce (fn [inter a]\n                    (if (= a (first inter))\n                      inter\n                      (cons a inter))) '() %))", "problem": 30, "user": "51592b81e4b0394f658fe22c"}, {"code": "(fn [xs]\n  (map first (partition-by identity xs)))", "problem": 30, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn cmprs [coll]\n   (when-let [[f & r] (seq coll)] \n     (if (= f (first r)) \n       (cmprs r) \n       (cons f (cmprs r)))))", "problem": 30, "user": "514e4ae4e4b019235f6c0594"}, {"code": "(partial reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [])", "problem": 30, "user": "516199bbe4b009fba0926e36"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "51639d26e4b055933a9ca02e"}, {"code": "(fn [s] (reduce (fn [x y] (if-not (= (first x) y) (conj x y) x)) '() (reverse s)))", "problem": 30, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn compress [sq]\n  (when-let [[f & r] (seq sq)]\n    (if (= f (first r))\n      (compress r)\n      (cons f (compress r)))))", "problem": 30, "user": "515f2a85e4b0595cf3d1da44"}, {"code": "(fn [acoll]\n  (reduce \n    (fn [result item]  (if (= (last result) item ) result (reverse (conj (reverse result) item)) )  )\n       '() acoll )\n  )", "problem": 30, "user": "5135a74ae4b04ac1f358dd46"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5166e80de4b060c690c1f4c5"}, {"code": "(fn [x]\n    (loop [last nil\n           todo x\n           res []]\n      (if (empty? todo)\n        res\n        (let [f (first todo)\n              r (next todo)]\n          (if (= f last)\n            (recur f r res)\n            (recur f r (conj res f))\n            )\n          )\n        )\n      )\n    )", "problem": 30, "user": "5165a235e4b079ad97ec44ac"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51670895e4b013fc800656c1"}, {"code": "#(reduce\n   (fn [result-list value]\n     (if (= (last result-list) value)\n       result-list\n       (conj result-list value)))\n   []\n   %)", "problem": 30, "user": "5141bc82e4b02fd87f5064c5"}, {"code": "(fn [s] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "5070e31ee4b0e3170b5a8678"}, {"code": "(fn [s] (reverse (reduce (fn [acc, x] (cond \n                              (= x (first acc)) acc\n                              :default (cons x acc)\n                              )\n                  )\n                '()\n                (list* s)\n                )\n                 )\n  )", "problem": 30, "user": "4fb03cf4e4b081705acca262"}, {"code": "(fn [coll]\n  (reduce #(if (= (last %) %2)\n             %\n             (conj % %2)) [] coll))", "problem": 30, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn [coll] (map first (partition-by identity coll)))", "problem": 30, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn [coll] (map first (partition-by identity coll)))", "problem": 30, "user": "51631002e4b017b283c712c1"}, {"code": "(fn[data]\n  (reverse (reduce #(if (not= (first %1) %2)\n             (conj %1 %2)\n              %1) '() data)))", "problem": 30, "user": "515d6281e4b00901442db1dc"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ed90014535d10e5ff6f52fe"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5164867fe4b003cf19fdde3e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51652141e4b003cf19fdde48"}, {"code": "(fn reps [x]\n  (apply concat (map #(distinct %) (partition-by identity x))))", "problem": 30, "user": "516e9d9be4b06aac486e5b2b"}, {"code": "(fn [s]\n  (reduce \n    (fn [accum e]\n      (if (= (last accum) e) accum (conj accum e)))\n    []\n    s ))", "problem": 30, "user": "516ed04ee4b06aac486e5b30"}, {"code": "#(reduce\n     (fn [ss s]\n       (if (not= (peek ss) s) (conj ss s) ss))\n     [] (vec %))", "problem": 30, "user": "516e2246e4b092a6408c5bc5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "511d6a01e4b022853b0e07a5"}, {"code": "#(map first \n      (filter (fn[v](not= (first v) (second v))) \n              (map list (seq %) (cons 0 (seq %)))))", "problem": 30, "user": "5143952fe4b0b4fb4ace5f38"}, {"code": "(fn [seq]\n  (reverse (loop [seq seq\n         seq' '()\n         last nil]\n    (if (empty? seq)\n      seq'\n      (recur (rest seq)\n             (if (= (first seq)\n                    last)\n               seq'\n               (cons (first seq) seq'))\n             (first seq))))))", "problem": 30, "user": "516ff477e4b034fe8eaf70f3"}, {"code": "#(loop [xs % ys []]\n   (cond (empty? xs) ys\n         (= (first xs) (last ys)) (recur (rest xs) ys)\n         true (recur (rest xs) (conj ys (first xs)))\n   )\n)", "problem": 30, "user": "516ea313e4b06aac486e5b2c"}, {"code": "(fn compress [s]\n  (let [f (first s)\n        r (rest s)]\n  (cond (empty? s) s\n        (= f (first r)) (compress r)\n        :else (cons f (compress r)))))", "problem": 30, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "(fn compress [the-list]\n\t(if (>= 1 (count the-list))\n\t\tthe-list\n\t\t(if (= (first the-list) (second the-list))\n\t\t\t(compress (rest the-list))\n\t\t\t(cons (first the-list) (compress (rest the-list)))\n\t\t)\n\t)\n)", "problem": 30, "user": "51701a9ce4b034fe8eaf70f5"}, {"code": "(fn [xs]\n  (map first (partition-by identity xs)))", "problem": 30, "user": "516f06dce4b06aac486e5b39"}, {"code": "(fn [s]\n  (reduce (fn [ac x]\n            (if (empty? ac)\n              [x]\n              (if (= (last ac) x)\n                ac\n                (conj ac x))))\n          []\n          s))", "problem": 30, "user": "51721aefe4b0d70c8bbbf24a"}, {"code": "(fn [li]\n   (loop [l li\n          prev '()\n          res '()]\n     (cond\n      (empty? l) (reverse res)\n      :else (recur (rest l)\n                   (first l)\n                   (if (= (first l) prev)\n                     res\n                     (conj res (first l)))))))", "problem": 30, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "(fn compress [in]\n  (if (empty? in)\n    '()\n    (let [comprest (compress (rest in))]\n      (if (= (first in) (first comprest))\n        comprest\n        (conj comprest (first in))))))", "problem": 30, "user": "51684318e4b03f62cda68cd6"}, {"code": "(fn [col] \n  (reverse \n   (reduce #(if (= (first %1) %2) \n              %1 \n              (cons %2 %1)) '() col)))", "problem": 30, "user": "516933ece4b03f62cda68ce4"}, {"code": "(fn [x]\n  (loop [s x\n         r []]\n    (if (empty? s) (seq r)\n      (recur (rest s) (if (= (first s) (last r)) r (conj r (first s)))))))", "problem": 30, "user": "51740b65e4b0d277d717bc67"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e79f28b535db169f9c796a8"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "51227a00e4b068a9582e656b"}, {"code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "problem": 30, "user": "5079fd71e4b08327cd804a66"}, {"code": "(fn rem-dups [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n        (rem-dups r)\n        (cons f (rem-dups r)))))", "problem": 30, "user": "51736d4de4b00f4b6b0490d7"}, {"code": "(fn [x] \n\t(loop [output '() x (seq x)]\n\t\t(if (= (count x) 0)\n\t\t\t(reverse output)\n\t\t\t(if (= (first x) (second x))\n\t\t\t\t(recur output (rest x))\n\t\t\t\t(recur (conj output (first x)) (rest x))))))", "problem": 30, "user": "51757af0e4b085adf681d873"}, {"code": "(fn [s]\n  (reverse (reduce (fn [a x]\n                     (if-not (= x (first a))\n                       (conj a x)\n                       a))\n                   ()\n                   s)))", "problem": 30, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn nod [s]\n  (reduce #(if (= (last %1) %2 )\n             %1\n             (concat %1 [%2]))\n    []\n    s)\n  )", "problem": 30, "user": "51750fc5e4b07031762f2ee6"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5173726be4b098276e74652c"}, {"code": "(fn [seq] (map first (partition-by identity seq)))", "problem": 30, "user": "516dc88ae4b046df6fbb76a1"}, {"code": "#(->> % (partition-by identity ) (map first))", "problem": 30, "user": "4f9ff06ce4b0dcca54ed6d41"}, {"code": "(fn compress [[c & rest]] (when-not (nil? c) (lazy-seq (cons c (compress (drop-while (partial = c) rest))))))", "problem": 30, "user": "5170ea06e4b0d70c8bbbf235"}, {"code": "(fn [xs] \n  (let [zip (partial map vector)\n        pairs (zip xs (conj (apply vector (rest xs)) nil))\n        not-eq (fn [[a b]] (not= a b))]\n    (map first (filter not-eq pairs))))", "problem": 30, "user": "51780bfce4b0f89a8f53839c"}, {"code": "#(reduce (fn [a b] (if (or (empty? a) (not= (last a) b)) (conj a b) a)) [] %)", "problem": 30, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn [l]\n  ((fn iter [m l n]\n     (if (= 0 (count m))\n       l\n       (iter \n        (rest m) \n        (if (or (= 0 (count l)) (not= (last l) (first m))) (conj l (first m)) l)  \n        (+ n 1)))) l [] 0))", "problem": 30, "user": "517531c6e4b07031762f2eea"}, {"code": "(fn compress-seq [x]\n\t(map first (partition-by identity x)))", "problem": 30, "user": "517a025ce4b01aacecbecbe6"}, {"code": "#(map last (partition-by identity %))", "problem": 30, "user": "517adc6ce4b0925c997201c4"}, {"code": "( fn [s] (letfn [(compress [s e] (let [fst (first s) nxt (next s)] \n                           (cond (empty? s) nil \n                                 (= fst e) (compress nxt e) \n                                 :else (cons fst (compress nxt fst)) )))] \n           (compress s nil)))", "problem": 30, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn [xs] (map first (partition-by identity xs)))", "problem": 30, "user": "508a2c2fe4b016a2107004a1"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "5163b06be4b055933a9ca030"}, {"code": "(fn remove-dups [xs]\n\t(if (empty? xs)\n\t\t'()\n\t\t((fn worker [as xs]\n\t\t\t(if (empty? xs)\n\t\t\t\t\t(seq as)\n\t\t\t\t\t(if (not= (first xs) (last as))\n\t\t\t\t\t\t(recur (conj as (first xs)) (rest xs))\n\t\t\t\t\t\t(recur as (rest xs))\n\t\t\t\t\t)\n\t\t\t)\n\t\t) [(first xs)] (rest xs))\n\t)\n)", "problem": 30, "user": "517bf28de4b07ef0e56148d5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51778122e4b085adf681d89d"}, {"code": "(fn compress [xs] (if (empty? xs) '() \n                    (let [x (first xs) ys (rest xs)] \n                      (if (empty? ys) (conj '() x) \n                        (let [y (first ys)]\n                          (if (= x y) (compress ys) (conj (compress ys) x))\n                        )\n                      )\n                    )\n                   )\n)", "problem": 30, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51789599e4b03d69594194d6"}, {"code": "(fn [l]  (map first (partition-by identity  l)))", "problem": 30, "user": "515ff4b9e4b0e2be8aa20bd9"}, {"code": "(fn [s]\n  (reduce (fn [v x]\n            (if (= x (last v))\n              v\n              (conj v x)))\n          [] s))", "problem": 30, "user": "517b59b8e4b0925c997201d0"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ed286d4535d44c135fd68d7"}, {"code": "reduce #(if (-> % last (= %2) not) (conj % %2) %) []", "problem": 30, "user": "517ecab1e4b09104ecebe7e8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51804bcbe4b04f45bde7d901"}, {"code": "(fn number-30 [coll] (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (recur r) \n      (cons f (number-30 r)))))", "problem": 30, "user": "51803613e4b04f45bde7d8fd"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5162d424e4b004547eb5eaaa"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "516733fce4b079759a74a5e9"}, {"code": "(fn compress [xs]\n    (loop [out []\n           in xs ]\n      (cond \n        (empty? in) out\n        (= (first in) (last out)) (recur out (rest in))\n        :else (recur (conj  out (first in)) (rest in)))))", "problem": 30, "user": "5177f89ae4b0f89a8f53839a"}, {"code": "#(->> %  (partition-by identity)  (map set) (apply concat))", "problem": 30, "user": "517945dce4b0684c1c981a43"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f6cf933e4b07046d9f4efc2"}, {"code": "(fn compress [lst]\n  (loop [lst lst acc []]\n    (if (empty? lst)\n      acc\n    (if (not= (first lst) (last acc))\n      (recur (rest lst) (conj acc (first lst)))\n      (recur (rest lst) acc)))))", "problem": 30, "user": "51750cd4e4b07031762f2ee5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e6a3b79535d8ccf87e9feb3"}, {"code": "(fn [col]\n  (keep-indexed #(if-not (= %2 (get col (inc %1))) %2) col))", "problem": 30, "user": "4f3ca5a6e4b0e243712b1f53"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4faa5735e4b081705acca1ee"}, {"code": "#(reduce (fn \n           [rst e]\n           (if (= e (last rst))\n             rst\n             (concat rst (list e)))) () %)", "problem": 30, "user": "516d2a46e4b06f078fab252f"}, {"code": "reduce (fn [acc i] (if (and (not (empty? acc)) (= (nth acc (dec (count acc))) i)) acc(concat acc [i]))) []", "problem": 30, "user": "517bbbfce4b07ef0e56148cf"}, {"code": "(fn compress\n  [sss]\n  (seq \n  (reduce\n    (fn [coll ch] \n      (if (not= (last coll) ch)\n        (conj coll ch)\n        coll))\n    []\n    sss)))", "problem": 30, "user": "5183abf6e4b028ec5fd2f2a6"}, {"code": "#(reduce (fn [m a]\n          (if (= (last m) a)\n            m\n            (conj m a)))\n        []\n        %)", "problem": 30, "user": "5185e17ee4b0da5a5be3bac5"}, {"code": "(fn remove-consec-dups [coll]\n      (if (empty? coll)\n          []\n          (concat [(first coll)] ((fn helper [y coll]\n      (if (empty? coll)\n          []\n          (let [x (first coll) xs (rest coll)]\n            (if (= x y)\n                (helper x xs)\n                (concat [x] (helper x xs)))))) (first coll) (rest coll)))))", "problem": 30, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn yolo [in]\n  (let [fun (fn [l x] (drop-while #(= x %) l))]\n    (if (empty? in)\n      in\n      (cons (first in) (yolo (fun in (first in)))))))", "problem": 30, "user": "5186571de4b0da5a5be3bad1"}, {"code": "(fn[x] (reverse (loop [s () x x] (if (empty? x) s (recur (if (and (> (count s) 0) (= (first s) (first x))) s (conj s (first x))) (rest x))))))", "problem": 30, "user": "5184f9e9e4b02826a645f39e"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "5140771ae4b076604f1aa555"}, {"code": "#(reduce (fn [x v]\n           (if (not= (last x) v)\n             (conj x v) x))\n         [] %)", "problem": 30, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn cs [x]\n  (loop [head nil\n         tail x\n         ]\n  (if (empty? tail) head\n   (recur (if (= (first tail) (second tail))\n            head\n            (concat  head [(first tail)])\n            )\n            (rest tail)))))", "problem": 30, "user": "506617fce4b03d366d7cb2ac"}, {"code": "(fn [x] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) () x)))", "problem": 30, "user": "51870799e4b057e3860ab7dc"}, {"code": "(fn [n] (map first (partition-by identity n)))", "problem": 30, "user": "5187dd58e4b057e3860ab7e4"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "517bc969e4b07ef0e56148d0"}, {"code": ";; partition-by will apply a function to each element in a sequence. When it differs from the previous return value, it will split\n;; returning a list of partitions.\n;; '((1 1) (2) (3 3) (2 2) (3))\n;; Looks like all we need to do here is take the first of each of those partitions and we are done!\n;; Map that bitch\n;; boom\n\n#(map first (partition-by identity %))", "problem": 30, "user": "50955676e4b087f34d351ab1"}, {"code": "(fn compress [col]\n  (cond\n   (= (count col) 1) col\n   (= (first col) (second col)) (compress (rest col))\n   :else (conj (compress (rest col)) (first col))))", "problem": 30, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "(fn compress [x]\n  (loop [seq x accu [] current nil]\n    (if-not (empty? seq)\n      (if (= (first seq) current)\n        (recur (rest seq) accu current)\n        (recur (rest seq) (conj  accu (first seq) ) (first seq))\n        )\n      accu\n      )\n    )\n  )", "problem": 30, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "(fn [input]\n  (map first (partition-by identity input)))", "problem": 30, "user": "5152bc4ee4b001f44f99bfef"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "5180c69ae4b06b8caf33fa00"}, {"code": "(fn [c] (reduce #(if (= (last %) %2) % (conj % %2)) [] c))", "problem": 30, "user": "50fe9d60e4b03cd852b4e84f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "518a59b3e4b02bf06f6bbb4b"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn [x]\n  (reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] x))", "problem": 30, "user": "51899891e4b0288ada3dbdab"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "51823a97e4b0f2adb733651e"}, {"code": "(fn [x]\n  (map first (partition-by identity x)))", "problem": 30, "user": "5188c487e4b0bdff0e072d55"}, {"code": "#(loop [result () pre (list (first %1)) col (rest %1)]\n   (if-let [n (first col)]\n     (if (= n (first pre))\n       (recur result pre (rest col))\n       (recur (concat result pre) (list n) (rest col)))\n     (concat result pre)))", "problem": 30, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn [s] \n  (reverse \n   (reduce #(if (= (first %) %2) % (conj % %2)) () s)))", "problem": 30, "user": "51897709e4b0288ada3dbdaa"}, {"code": "(fn [coll]\n  (loop [cs (seq coll) ret '()]\n    (if-not (first cs)\n      (apply list (reverse ret))\n      (let [x (first cs) y (second cs)]\n        (if (= x y)\n          (recur (rest cs) ret)\n          (recur (rest cs) (cons x ret)))))))", "problem": 30, "user": "508e2584e4b0f17d83ea26c9"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "518b761ae4b0f028e99addee"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "516c0a7de4b005fd0cdf85cb"}, {"code": "(fn [x] (loop[myNL '() cC 0](if(< cC (- (count x) 1))\n                                  (recur\n                                   (if(not= (nth x cC) (nth x (+ cC 1)))\n                                       (conj myNL (nth x cC))\n                                       myNL\n                                     )\n                                   (+ cC 1)\n                                   )\n                                  (reverse (conj myNL (nth x cC)))\n                                  )\n                 )\n  )", "problem": 30, "user": "5177cacde4b0261ae665b877"}, {"code": "(fn [s]\n   (reverse (merge  (loop [result () cnt (count s) i 0]\n     (if (= i (- cnt 1)) result\n         (if (= (nth s i)(nth s (+ i 1))  )\n             (recur result cnt (inc i))\n             (recur (merge result (nth s i))   cnt (inc i))\n         )\n     )\n  )  (nth s (- (count s) 1)))\n          )\n)", "problem": 30, "user": "518aec06e4b06da86c1973c2"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "518ec633e4b0cd6ff516769e"}, {"code": "(fn remove-consecutive-duplicates [ls]\n  (if (or (empty? ls) (empty? (rest ls)))\n    ls\n    (if (= (first ls) (second ls))\n      (remove-consecutive-duplicates (rest ls))\n      (conj (remove-consecutive-duplicates (rest ls)) (first ls)))))", "problem": 30, "user": "518df0f0e4b0c929d50502e1"}, {"code": "(fn [s]\n  (reduce\n   #(if-not (= (last %) %2) (conj % %2) %)\n   [] s)\n  )", "problem": 30, "user": "517e25c6e4b0329b27fa9f51"}, {"code": "(fn [input]\n    (reduce\n      (fn [sq ch]\n        (if (= ch (last sq))\n          sq\n          (concat sq (list ch))))\n    nil\n    (seq input)))", "problem": 30, "user": "50976c84e4b00ad8bab4e961"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ef2eb4d535dced4c769f226"}, {"code": "(fn [x]\n\t( loop [ls x res []]\n\t\t(if (empty? ls)\n\t\t\tres\n\t\t\t(if (= (first ls) (first (rest ls)))\n\t\t\t(recur (rest ls) res)\n\t\t\t(recur (rest ls) (conj res (first ls))) ))))", "problem": 30, "user": "517e6671e4b0329b27fa9f56"}, {"code": "(fn compress[coll] (\n                when-let [[l & r] (seq coll)]\n                (if (= l (first r))\n                  (compress r)\n                  (cons l (compress r))\n                 )))", "problem": 30, "user": "518f9e14e4b08646f171ca07"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn f [x]\n  (if (= 1 (count x)) \n    x\n    (remove nil? (cons (if (not (= (first x) (second x))) (first x)) (f (rest x))))))", "problem": 30, "user": "5154b16be4b0179c5115f4e2"}, {"code": "(fn [coll] (reduce (fn [l x] (if (= x (last l)) l (conj l x))) [] coll))", "problem": 30, "user": "5192dd39e4b0c663c5d86c9e"}, {"code": "(fn compress\n  [s]\n  (loop [source s\n         result [(first s)]]\n    (if (empty? source)\n      result\n    (if (= (last result) (first source))\n      (recur (rest source) result)\n      (recur (rest source) (into result (list (first source))))))))", "problem": 30, "user": "5159849ce4b0394f658fe236"}, {"code": "reduce #(if (not= (peek %1) %2) (conj %1 %2) %1) []", "problem": 30, "user": "5161c6a7e4b009fba0926e38"}, {"code": "(fn comp [lst] (reverse (reduce (fn [acc,e] (if (= (first acc) e) acc (conj acc e))) '() lst)))", "problem": 30, "user": "5180dc04e4b06b8caf33fa01"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "518e6966e4b051adb72789ec"}, {"code": "(fn compress [myseq]\n\t(loop [oldseq myseq newseq []]\n\t\t(if (empty? oldseq) \n\t\t\tnewseq\n\t    (if (= (first oldseq) (second oldseq))\n\t      (recur (rest oldseq) newseq)\n\t      (recur (rest oldseq) (conj newseq (first oldseq)))))))", "problem": 30, "user": "50f07f6ae4b0bdaecbb47dc4"}, {"code": "(fn my-comp2 [xs]\n  (reduce \n   (fn [x y]\n     (if (= (last x) y)\n       x\n       (conj x y))) [] xs))", "problem": 30, "user": "50fe2420e4b03cd852b4e84a"}, {"code": "#(reduce\n (fn [a b]\n   (if (= (last a) b)\n     a\n     (conj\n      (if (sequential? a) a (conj [] a))\n      b)))\n(concat (conj [] (conj [] (first %))) (rest %))) ;; wrap first argument in a sequence so last could be safely called", "problem": 30, "user": "50992197e4b0cae2931060ae"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "(fn [x] (reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) [] x))", "problem": 30, "user": "51980f7ce4b068aa333628f7"}, {"code": "#(apply concat (map distinct (partition-by identity %)))", "problem": 30, "user": "5195b8cce4b04c0af7ff3c08"}, {"code": "#(loop [r [] s (apply list %)]\n   (cond\n    (empty? s)\n    r\n\n    (or (empty? r) (not (= (last r) (first s))))\n    (recur (conj r (first s)) (rest s))\n    \n    true\n    (recur r (rest s))))", "problem": 30, "user": "5196568fe4b04c0af7ff3c1c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51131da8e4b0350614f07a83"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e09392a535d04ed9115e7ae"}, {"code": "(fn [xs]\n  (let [skip-repeat (fn [state cur]\n                      (let [[prev result] state]\n                        (if (= cur prev)\n                          [prev result]\n                          [cur (cons cur result)])))\n        res (reduce skip-repeat [nil ()] xs)]\n    (-> res last reverse)))", "problem": 30, "user": "519b231ee4b0ac1b7dced6a2"}, {"code": "(fn [v] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] v))", "problem": 30, "user": "51990df9e4b068aa333628fc"}, {"code": "#(map last (partition-by list %))", "problem": 30, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "#(reduce (fn [x y] (if (= (first x) y) x (cons y x))) [] (reverse %))", "problem": 30, "user": "5199ca05e4b022efe2b3ba88"}, {"code": "(fn [x]\n   (reduce (fn [a b]\n             (if (= (last a) b)\n               a\n               (conj a b))) [] x))", "problem": 30, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "(fn ! [x] (loop [y 0\n                   z nil\n                   li nil]\n              (if (= y  (count x))\n                (if (char? (first li))\n                  (apply str (reverse li))\n                  (reverse li))\n                (recur (inc y)\n                       (nth x y)\n                       (if (= (nth x y) z)\n                         li\n                         (conj li (nth x y) )))))\n                )", "problem": 30, "user": "5143824ae4b0b4fb4ace5f36"}, {"code": "(partial reduce #(if (= (peek %) %2) % (conj % %2)) [])", "problem": 30, "user": "519ca227e4b0a1d87b003460"}, {"code": "(fn [s]\n  (reverse\n    (reduce\n     #(if\n        (= (first %1) %2)\n           %1\n           (cons %2 %1))\n     '() (seq s))))", "problem": 30, "user": "519d66d2e4b037b32803f9b2"}, {"code": "(fn [x]\t\t\n\t(reduce \t\t\n\t\t(fn [a b] \t\t\t\t\t\t\t\t\t\n\t\t\t(if (= (last a) b)\n\t\t\t\ta\n\t\t\t\t(conj a b)))\n\t\t(into [[(first x)]] (rest x))))", "problem": 30, "user": "51794ec2e4b0684c1c981a45"}, {"code": "(fn [arg]                                                                                                                                                                             \n   (cons (first arg) (map last (filter #(not= (first %)(last %)) (partition 2 1 arg)))))", "problem": 30, "user": "4de5d0fa535d08e6dec9fdf3"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "519b7d76e4b02a926d9a436e"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "4dade9e9c9a9d6ed4799dc57"}, {"code": "(fn [xs] (map first (partition-by identity xs)))", "problem": 30, "user": "5111330de4b09ff0d31c7ca8"}, {"code": "(fn compress [xs]\n  (reduce (fn [acc x]\n            (if (= (last acc) x)\n                acc\n                (conj acc x)))\n          []\n          xs))", "problem": 30, "user": "516385cee4b055933a9ca02d"}, {"code": "(fn [x]\n  (lazy-seq\n  (:result\n    (reduce (fn [r y]\n              (if (= (:prev r ) y) \n                {:result (:result r ) :prev y}\n                {:result (conj (:result r ) y) :prev y}\n                ))\n            {:result (vec []) :prev nil} x ))))", "problem": 30, "user": "518c5236e4b087e178201de0"}, {"code": "(fn compress [coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (let [head (first s)\n            tail (rest s)]\n      (if (= head (first tail))\n        (compress tail)\n        (cons head (compress tail)))))))", "problem": 30, "user": "50377d53e4b0af0658af77ad"}, {"code": "(\n fn f ([x]\n   (f x [])\n )\n ([x y]\n  (if (seq x)\n    (f (rest x) \n       (if (= (last y) (first x))\n       y\n       (conj y (first x))\n       )\n       )\n    y)\n  ))", "problem": 30, "user": "5191045ee4b0f8ef0be96bf3"}, {"code": "(fn f [x]\n  (if (empty? (rest x))\n    x\n    (if (= (first x) (first (rest x)))\n      (f (concat (list (first x)) (rest (rest x))))\n      (concat (list (first x)) (f (rest x)))))\n    )", "problem": 30, "user": "5194f482e4b05be8c43d2385"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "506ba58be4b0eda3100c090b"}, {"code": "(fn dd [x]\n  ((fn ddd [x y]\n     (when (not (= x '()))\n       (let [c (first x)]\n         (if (= c y)\n           (ddd (rest x) y)\n           (cons c (ddd (rest x) c)))))) x nil))", "problem": 30, "user": "51a671d4e4b0740bfd1afd21"}, {"code": "(partial\n\t(fn foo [res s]\n\t\t(if (= s '())\n\t\t\t(reverse res)\n\t\t\t(if (= (first res) (first s))\n\t\t\t\t(foo res (rest s))\n\t\t\t\t(foo (conj res (first s)) (rest s))\n\t\t\t)\n\t\t)\n\t)\n'()\n)", "problem": 30, "user": "51a0e0b7e4b0b292b01ee3fb"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51a05bede4b0b292b01ee3f4"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51a477eee4b0def3c5c58692"}, {"code": "(fn [coll] \n  (reduce (fn [a b] \n            (if (= (last a) b) a (conj a b))) [] coll))", "problem": 30, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (cmprs r)\n      (cons f (cmprs r)))))", "problem": 30, "user": "51a87d28e4b08d8ec191b811"}, {"code": "#(reverse (reduce (fn [x y] (if (= (first x) y) x (conj x y))) nil %))", "problem": 30, "user": "519964cbe4b0aa09cbc0b849"}, {"code": "(fn [xs]\n        (reduce #(if (= (last %1) %2)\n                    %1\n                    (conj %1 %2))\n               []\n               xs))", "problem": 30, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "#(seq (reduce (fn dup [a b]\n                (if (= (last a) b)\n                  a\n                  (conj a b)))\n              []\n              %))", "problem": 30, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "(fn [l]\n  (loop [current (first l)\n         data (rest l)\n         ret [current]]\n    (if (empty? data)\n      ret\n      (if (= current (first data))\n        (recur current (rest data) ret)\n        (recur (first data) (rest data) (conj ret (first data)))))\n    ))", "problem": 30, "user": "4e70a7c1535d5021c1a8963c"}, {"code": "(fn compress [seq]\n  (map first (partition-by identity seq)))", "problem": 30, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "(fn f\n   ([s prev]\n    (let [x (first s)]\n    (concat (if (= x prev) [] [x])\n            (if (next s) (f (next s) x)))\n  ))\n  ([s] (f s nil))\n   )", "problem": 30, "user": "506cad7de4b0a302964c548e"}, {"code": "(fn\n  [l]\n  (reduce (fn [l e]\n            (if (= (last l) e)\n              l\n              (conj l e))) [] l))", "problem": 30, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "(fn [x] (loop [res [] se x] (if (= () se) res (recur (if (= (last\n res) (first se)) res (conj res (first se))) (rest se)))))", "problem": 30, "user": "51a7f74be4b08d8ec191b802"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "5183f5d7e4b02826a645f393"}, {"code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "problem": 30, "user": "5065dd94e4b0313a384e5643"}, {"code": "(fn compress-seq [coll]\n  (cond \n   (empty? coll) coll\n   (= (first coll) (second coll))\n      (compress-seq (rest coll))\n   :else (conj (compress-seq (rest coll)) (first coll))))", "problem": 30, "user": "51991a89e4b068aa333628fd"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51ab1718e4b04e3dc0c27b2f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51a417dde4b0def3c5c58688"}, {"code": "(fn [x] (reduce (fn [s item] (if (= (last s) item) s (conj s item))) [] x))", "problem": 30, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn abcd [s] (reduce (fn [a b] (if (= (last a) b) a (conj a b))) [(first s)] (rest s)))", "problem": 30, "user": "51aa5434e4b04e3dc0c27b26"}, {"code": "(fn [col] (mapcat distinct (partition-by identity col)))", "problem": 30, "user": "51a3c9cde4b0e77c4ca60bf9"}, {"code": "#(second (reduce\n          (fn [[prev acc] x]\n            (if (= prev x)\n              [x acc]\n              [x (conj acc x)]))\n          [nil []]\n          %))", "problem": 30, "user": "510b0480e4b078ea719210fa"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fd11132e4b04c3a95aa0409"}, {"code": "(fn b [x] (map first (partition-by identity x)))", "problem": 30, "user": "51af978fe4b0c53cf2e68a50"}, {"code": "#(mapcat distinct (partition-by identity %))", "problem": 30, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "reduce #(if (=(last %1) %2) \n          %1 \n          (conj %1 %2) \n          ) []", "problem": 30, "user": "51aeb1f4e4b09397d5109794"}, {"code": "(fn compress \n  [some-seq]\n  (reverse\n    (reduce \n      (fn [acc e]\n        (if (= (first acc) e) acc (cons e acc)))\n      [] some-seq)))", "problem": 30, "user": "51af4cf6e4b0c53cf2e68a4c"}, {"code": "(fn [s]\n    (loop [ s s\n            cmpr (empty s) ]\n      ;(println (apply str s))\n      ;(println cmpr)\n      (if-let [[ h & t ] (seq s)]\n        (if (= h (first t))\n          (recur t cmpr)\n          (recur t (concat cmpr [h])))\n        (seq cmpr))))", "problem": 30, "user": "51a8ef91e4b08d8ec191b820"}, {"code": "(fn [s] \n  (reduce (fn [xs x]\n            (if (= (first xs) x)\n              xs\n              (cons x xs)))\n          '()\n          (reverse s)))", "problem": 30, "user": "4f4e78fee4b03ad3f0c10cc8"}, {"code": "#(keep (fn [[x y]] (when (not= x y) x)) (partition-all 2 1 %))", "problem": 30, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "(fn [coll]\n  (reduce #(if (= (last %) %2) % (conj % %2))\n          []\n          coll))", "problem": 30, "user": "51b38769e4b026427ecf067f"}, {"code": "(fn remove-dupls [sq]\n  (if-not (empty? (rest sq))\n    (if (= (first (remove-dupls (rest sq))) (first sq))\n      (remove-dupls (rest sq))\n      (cons (first sq) (remove-dupls (rest sq))))\n    sq))", "problem": 30, "user": "51b24defe4b02f8f128bb963"}, {"code": "reduce #(if ( not= (last %) %2 ) (conj % %2) %) []", "problem": 30, "user": "51aa4eede4b04e3dc0c27b25"}, {"code": "(fn [x] \n  (reduce #(if \n             (= (first %1) %2) \n             %1 \n             (conj %1 %2)) \n          '() \n          (reverse x))\n)", "problem": 30, "user": "50d4593ee4b09cc622d65a68"}, {"code": "(fn [x] (reduce\n         (fn [merged, current] (if ( = (last merged) current) merged (conj merged current))) [] x))", "problem": 30, "user": "51aee76ce4b09397d5109796"}, {"code": "(fn [a] (reduce (fn [s x] (if (= x (last s)) s (conj s x))) [] a))", "problem": 30, "user": "51ac36c1e4b09397d5109765"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn remove-consecutive-dups\n  [coll]\n  (let [first-item (first coll)\n        the-rest   (rest coll)]\n    (loop [coll-so-far [first-item]\n           the-rest    the-rest]\n      (if (seq the-rest)\n        (if (= (last coll-so-far) (first the-rest))\n          (recur coll-so-far (rest the-rest))\n          (recur (conj coll-so-far (first the-rest)) (rest the-rest)))\n        coll-so-far))))", "problem": 30, "user": "4f5c68c6e4b0030a34fb2b23"}, {"code": "#(->> % (partition-by identity) (map first))", "problem": 30, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) '[]", "problem": 30, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn compress [s]\n  (second (reduce (fn [[c s] x] (if (= c x) [c s] [x (conj s x)]))\n                  [nil []]\n                  s)))", "problem": 30, "user": "51672d15e4b079759a74a5e7"}, {"code": "(fn [my-coll] (reverse (reduce (fn [a b] (if (= (first a) b) a (conj a b))) '() my-coll)))", "problem": 30, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn ok [coll]\n    (if (or (nil? coll) (empty? coll))\n      nil\n      (if (= (first coll) (second coll))\n        (ok (rest coll))\n        (cons (first coll) (ok (rest coll))))))", "problem": 30, "user": "51b8e0dce4b050a1176cd69f"}, {"code": "(fn compress-seq [s]\n            (map first (partition-by identity s)))", "problem": 30, "user": "51ba59e4e4b0fe3ecfb4642d"}, {"code": "(fn compress-wrapper [t]\n  ((fn compress [s e]\n     (cond (and e (first s))\n           (if (= (first s) e) (compress (rest s) (first s))\n               (cons (first s) (compress (rest s) (first s))))\n           (first s) (cons (first s) (compress (rest s) (first s)))\n           :else ())) t nil))", "problem": 30, "user": "51b76227e4b0d906fcd71d35"}, {"code": "(fn [x] (map #(first %) (partition-by identity x)))", "problem": 30, "user": "51bc2f6ae4b0fe3ecfb46452"}, {"code": "(fn [coll]\n  (let [rem-dupes (map (fn [item] (first item)) (partition-by identity coll))]\n  (if (string? coll)\n    (reduce str rem-dupes)\n    rem-dupes)))", "problem": 30, "user": "51bc6d54e4b0fe3ecfb4645c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51bb970be4b0fe3ecfb4644e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn compress [s]\n  (if(empty? s) '()\n   (if(= (first s) (first (rest s)))\n     (compress(conj (rest (rest s)) (first s)))\n     (conj (compress (rest s)) (first s)))))", "problem": 30, "user": "51b73a91e4b0d906fcd71d33"}, {"code": "(fn compress\n  [seq]\n  (reduce #(if (= (last %1)\n                  %2)\n             %1\n             (conj %1 %2))\n          []\n          seq))", "problem": 30, "user": "4ebf11bc535dfed6da9c6d9c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "(fn dedup [s]\n    (cond\n      (not (next s))\n          s\n      (= (first s)(fnext s))\n        (dedup (rest s))\n      :else\n        (cons (first s) (dedup (rest s)))))", "problem": 30, "user": "51b08df5e4b0c53cf2e68a67"}, {"code": "(fn xxx [coll]\n  (let [step (fn step [xs prve]\n               (lazy-seq\n                ((fn [[f :as xs] prve]\n                   (when-let [s (seq xs)]                     \n                     (if (= (first prve) f)\n                       (recur (rest s) prve)\n                       (cons f (step (rest s) (list f))))))\n                 xs prve)))]\n    (step coll '())))", "problem": 30, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "(fn [l]\n  (loop [in l out []]\n    (cond (-> in first nil?) out\n          (-> in second nil?) (concat out (-> in first list))\n          (= (first in) (second in)) (recur (rest in) out)\n          :else (recur (rest in) (concat out (-> in first list))))))", "problem": 30, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "(fn comp [aseq] (cond\n                 (empty? aseq) '()\n                 (= (first aseq) (second aseq)) (comp (rest aseq)) \n                 :else (cons (first aseq) (comp (rest aseq)))))", "problem": 30, "user": "51bf4560e4b013aa0d74b817"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn [s]\n    (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "509ecefde4b08df8156e9e35"}, {"code": "(fn com [x]\n  (when-let [[f & r] (seq x)]\n    (if (= f (first r))\n      (com r)\n      (cons f (com r))\n      \n    )\n  )\n)", "problem": 30, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn [xs]\n  (loop [coll (rest xs)\n         last-dup (first xs)\n         result (list (first xs))]\n    (cond (empty? coll) result\n          (= (first coll) last-dup) (recur (rest coll) last-dup result)\n          :else (recur (rest coll)\n                       (first coll)\n                       (concat result (list (first coll)))))))", "problem": 30, "user": "519db0ede4b037b32803f9b9"}, {"code": "#(reduce (fn [x y] (if-not (= (last x) y) (conj x y)  x)) [] (seq %))", "problem": 30, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "(partial\n  reduce \n    #(if (= %2 (last %1))\n      %1\n      (conj %1 %2))\n  '[])", "problem": 30, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [s]\n  (loop [out [] s s]\n    (if (empty? s) out\n      (let [new_out (if (not (= (last out) (first s))) (conj out (first s)) out)]\n        (recur new_out (rest s))))))", "problem": 30, "user": "51c342e9e4b0851ac09658f3"}, {"code": "(fn remove-dup [s]\n  (cond (empty? s) '()\n        (empty? (rest s)) s\n        :else (if (= (first s) (second s))\n                (remove-dup (rest s))\n                (cons (first s) (remove-dup (rest s))))))", "problem": 30, "user": "51c1229be4b0c9c822882944"}, {"code": "(fn remove-dups\n  ([x] (remove-dups x []))\n  ([x y]\n  (cond\n    (empty? x) y\n    (= (first x) (last y)) (remove-dups (rest x) y)\n    :else (remove-dups (rest x) (conj y (first x))))))", "problem": 30, "user": "51c330a9e4b0851ac09658f2"}, {"code": "#(reduce \n  (fn [lst elem]\n    (if (= (last lst) elem) \n      lst\n      (conj lst elem)))\n  [] %)", "problem": 30, "user": "51c611c4e4b03a28d42333bf"}, {"code": "(fn compress [sq]\n    (let [[fst & rst] sq]\n      (when fst\n        (if (= fst (first rst))\n          (compress rst)\n          (cons fst (compress rst))))))", "problem": 30, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "518ad8fce4b06da86c1973c1"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51ae350fe4b09397d5109790"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5007c7c7e4b0b17c647f5226"}, {"code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() x))", "problem": 30, "user": "51b9f5a6e4b0e871ca49590e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51197750e4b057cba170bc99"}, {"code": "reduce (fn [c e]\n         (if\n           (= (last c) e)\n           c\n           (conj c e))) []", "problem": 30, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn ! [lst]\n   (cond\n       (= (count lst) 1) lst\n       (= (first lst) (first (rest lst))) (! (into [(first lst)] (rest (rest lst))))\n       true (into [(first lst)] (if (> (count (rest lst)) 0) (! (rest lst)) []))\n     ))", "problem": 30, "user": "50d6d7eee4b0159555a1fc76"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51793056e4b0684c1c981a41"}, {"code": "(fn [x] (map #(first %) (partition-by identity x)))", "problem": 30, "user": "51c09719e4b0c9c82288293c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "(fn [lst] \n  (reverse (reduce\n   (fn [alst vl]\n     (if (= vl (first alst))\n       alst\n       (cons vl alst))) '() lst)))", "problem": 30, "user": "51c76864e4b07ef393169e3f"}, {"code": "(fn [x] (remove nil? (map #(if (= %1 %2) nil %1) x (cons nil x))))", "problem": 30, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn fun [x]\n  (when-let [[f & r] (seq x)] \n    (if (= f (first r))\n      (fun r) \n      (cons f (fun r)))))", "problem": 30, "user": "51a34135e4b0ab315a23ba63"}, {"code": "(fn [col]\n  (reduce\n    (fn [xs x]\n      (if (= (last xs) x)\n        xs\n        (conj xs x))) [] col))", "problem": 30, "user": "4f72f71be4b07046d9f4f03d"}, {"code": "(partial reduce (fn [coll e] (if (= (last coll) e) coll (conj coll e))) [])", "problem": 30, "user": "51c73959e4b07ef393169e3e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51cc5f20e4b02254fc794870"}, {"code": "(fn [xs]\n  (map\n   first\n   (partition-by\n    identity xs)))", "problem": 30, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "(fn c\n  [l]\n  (cond\n   (empty? (rest l)) l\n   (= (first l) (second l)) (c (rest l))\n   :else (cons (first l) (c (rest l)))))", "problem": 30, "user": "518c0f4ee4b0f028e99addf7"}, {"code": "(fn cmp [x]\n                 (when-let [[f & r] (seq x)]\n                   (if (= f (first r))\n                     (cmp r)\n                     (cons f (cmp r)))))", "problem": 30, "user": "51ccc92ce4b02254fc79487a"}, {"code": "(fn [coll]\n   (map #(first %) \n        (partition-by identity (seq coll))))", "problem": 30, "user": "51cacda3e4b068dadb8f2227"}, {"code": "#(reduce (fn [a n] \n\t\t(if (= (last a) n) a (conj a n))\n\t) [(first %)] %)", "problem": 30, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn compress [ [c1 & other] ]\n  (cond \n    (= (count other) 0)\n      ( seq [c1] )\n    (= c1 (first other) )\n      (compress other)\n    :else\n      (cons c1 (compress other))))", "problem": 30, "user": "51ccc179e4b02254fc794879"}, {"code": "(fn [s] (reduce #(if (not= (last %1) %2) (concat %1 [%2]) %1) [] s))", "problem": 30, "user": "51c9a705e4b09ce160bef5ab"}, {"code": "reduce (fn[res y] (if (= (last res) y) res (concat res [y]))) []", "problem": 30, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "(fn [s]\n  (loop [e (first s) r (rest s) l nil acc []]\n    (if (empty? r)\n      (if (= e l)\n        acc\n        (conj acc e))\n      (if (= e l)\n        (recur (first r) (rest r) l acc)\n        (recur (first r) (rest r) e (conj acc e))))))", "problem": 30, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] (seq x)))", "problem": 30, "user": "51caca2ae4b068dadb8f2226"}, {"code": "(fn [coll]\n  (loop [the-last nil, res [], coll coll]\n    (if-let [nxt (first coll)]\n      (if (= the-last nxt)\n        (recur the-last res (next coll))\n        (recur nxt (conj res nxt) (next coll)))\n      res)))", "problem": 30, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn [my-list]\n   (reverse (loop [my-list my-list acc '()]\n     (if (empty? my-list)\n       acc\n       (if (= (first acc) (first my-list))\n         (recur (rest my-list) acc)\n         (recur (rest my-list) (cons (first my-list) acc)))))))", "problem": 30, "user": "4ede0511535d10e5ff6f5330"}, {"code": "(fn [x & S] (cond\n             \t(not S) (recur x '())\n                (empty? x) (reverse S)\n             \t(= (first x) (first (rest x))) (recur (rest x) S)\n             \ttrue (recur (rest x) (conj S (first x)))))", "problem": 30, "user": "51cf126ae4b0e42293a2256b"}, {"code": "#(reduce (fn [l x] (if (= (last l) x) l (conj l x))) [] %)", "problem": 30, "user": "51cc5cb3e4b02254fc79486f"}, {"code": "reduce #(if (= (last %) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "51c8301ee4b07ef393169e4d"}, {"code": "#(reduce\n    (fn [x y]\n      (if (not= (last x) y)\n        (conj x y)\n        x)) [(first %)] (rest %))", "problem": 30, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [x] (reduce (fn [m x] (if (= (last m) x) m (conj m x))) [] x))", "problem": 30, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn compress [input]\n    (map first (partition-by identity input))\n)", "problem": 30, "user": "51d1111ce4b067c36548635f"}, {"code": "reduce (fn [x y] (if (= (last x) y) (identity x) (conj x y))) []", "problem": 30, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "(fn comp-seq [n]\n  (map first (partition-by identity n)))", "problem": 30, "user": "51d1875be4b0cfcf579466c0"}, {"code": "#(reduce\n  (fn [col n]\n    (if (= (last col) n)\n      col\n      (concat col (list n))))\n  '()\n  %)", "problem": 30, "user": "517cc671e4b0bbbf1f12af0a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4de52c87535d08e6dec9fdf0"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (cmprs r)\n      (cons f (cmprs r)))))", "problem": 30, "user": "5073e7fde4b054001656accb"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn[x]\n  (loop[xs x f 0 result '()]\n  (if (not (empty? xs))\n       (if (= (first xs) f)\n            (recur (rest xs) f result)\n         \t(recur (rest xs) (first xs) (conj result (first xs))))\n       (reverse result)\n    )))", "problem": 30, "user": "51d10b1fe4b067c36548635e"}, {"code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "problem": 30, "user": "51d662fce4b0154f82ab92ef"}, {"code": "(fn [s] ( reverse (reduce (fn [sq x] (if (= x (first sq)) sq (conj sq x))) '() s)))", "problem": 30, "user": "51d381b5e4b099f3b6acde01"}, {"code": "#(loop [previous :flag\n        toProcess %\n        acc []]\n   (let [current (first toProcess)\n         nextToProcess (next toProcess)]\n     (cond\n      (empty? toProcess) (seq (conj acc previous))\n      (= :flag previous) (recur current nextToProcess acc)\n      (= previous current) (recur current nextToProcess acc)\n      :else (recur current nextToProcess (conj acc previous))\n      )\n    )\n   )", "problem": 30, "user": "51d67516e4b0154f82ab92f0"}, {"code": "(fn [se]\n    (loop [lst '()\n           fst (first se)\n           snd (second se)\n           rst (drop 2 se)]\n      (cond \n       (nil? fst) lst\n       (nil? snd) (reverse (conj lst fst))\n       (= fst snd) (recur lst snd (first rst) (rest rst))\n       :else (recur (conj lst fst) snd (first rst) (rest rst)))))", "problem": 30, "user": "4f038b62535dcb61093f6b1c"}, {"code": "#(loop [x 0,y %,z (count %),m '()]\n   (if (== x z)\n     (reverse m)\n     (recur (inc x)\n            y\n            z\n            (if (not (= (nth y x) (first m)))\n              (cons (nth y x) m)\n              m))))", "problem": 30, "user": "51c4690fe4b06b70b3e207e1"}, {"code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "problem": 30, "user": "50bfd849e4b042992946c649"}, {"code": "(fn dedup\n  ([coll] (dedup '() coll))\n  ([aggr coll]\n   \t(if (empty? coll)\n      aggr\n      (if (= (first coll) (last aggr))\n        (dedup aggr (rest coll))\n        (dedup (concat aggr (list (first coll))) (rest coll)) ))))", "problem": 30, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "(fn [s] \n  ((fn ! [ss]\n    (if (empty? ss)\n      nil\n      (cons (-> ss first first) (! (rest ss)))\n    )\n  )\n  (partition-by identity s))        \n)", "problem": 30, "user": "51db8244e4b0e067a9bbadc7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51da7e49e4b02ceefd947768"}, {"code": "#(filter (complement nil?) (reduce (fn [fst snd] (if (= (last fst) snd) fst (conj fst snd))) [nil] %))", "problem": 30, "user": "51da52dbe4b02ceefd947763"}, {"code": "(fn [s]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "5175533fe4b0dea9bbfba575"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn remove-dup [coll]\n  (loop [remainder coll\n  \t\t res \"\"]\n  \t\t (cond\n  \t\t \t(= (count remainder) 0) res\n  \t\t \t(= (count remainder) 1) (reverse (concat remainder res))\n  \t\t \t(= (first remainder) (second remainder)) (recur (drop 1 remainder) res)\n  \t\t \t:else (recur (drop 1 remainder) (cons (first remainder) res)))))", "problem": 30, "user": "51d49b75e4b013d740b70de6"}, {"code": "(fn remove-consec-duplicates [a]\n  (loop [a a\n         r '()]\n    (if (empty? a)\n      r\n      (recur\n       (rest a)\n       (if (= (last r) (first a))\n         r\n         (concat r (list (first a))))))))", "problem": 30, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn cmpare [c] (when-let [[frst & rst] (seq c)]\n                  (if (= frst (first rst))\n                    (cmpare rst)\n                    (cons frst (cmpare rst)))))", "problem": 30, "user": "51d46133e4b013d740b70de2"}, {"code": "(fn [coll] (map first (partition-by identity coll)))", "problem": 30, "user": "4f52ae00e4b03ad3f0c10d42"}, {"code": "(fn compress-seq [a]\n  (map first (partition-by identity a)))", "problem": 30, "user": "51ac7e9be4b09397d510976f"}, {"code": "(fn [containsduplicates]\n    (loop [i containsduplicates acc []]\n      (if (empty? i)\n        acc\n        (recur\n          (rest i)\n          (if (not= (first i) (last acc))\n             (conj acc (first i))\n             acc)\n          )\n        )\n      )\n    )", "problem": 30, "user": "51b6f4f9e4b04fc00976d479"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51c1d159e4b0d204dbe2ca18"}, {"code": "reduce \n  #(if (= %2 (last %1))\n\t%1\n    (conj %1 %2)\n  )\n[]", "problem": 30, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "(fn [xs] (reverse (reduce (fn [e i] (if (not= (first e) i) (conj e i) e)) '() xs)))", "problem": 30, "user": "51db27dbe4b094966a2cd688"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4ec6a616535d6d7199dd36d2"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "51ce1320e4b0e42293a22551"}, {"code": "reduce  #(if ( = (last %1) %2) %1  (conj %1 %2) )  []", "problem": 30, "user": "518644bce4b0da5a5be3baca"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51e00020e4b01188f0627534"}, {"code": "(fn com [li] (let [li (seq li)]\n               (reduce (fn [acc el] (if (= (last acc) el)\n                                      acc\n                                      (conj acc el)))\n                       []\n                       li)))", "problem": 30, "user": "51df505be4b01188f062752a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51b3d998e4b0f094dd986fa8"}, {"code": "(fn [coll]\n         (reverse\n          (loop [coll coll\n                 acc  nil]\n            (if (or (nil? coll) (empty? coll))\n              acc\n              (recur\n               (drop-while (partial = (first coll)) coll) \n               (cons (first coll) acc))))))", "problem": 30, "user": "51da565ae4b02ceefd947765"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn [data] (loop [d data\n                  x []]\n             (if (empty? d)\n               x\n               (recur (rest d) (if (= (last x) (first d))\n                                 x\n                                 (conj x (first d)))))))", "problem": 30, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "reduce (fn [ c e ]\n          (if (= (last c) e)\n            c\n            (conj c e)))\n       []", "problem": 30, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "(fn [x]\n (reverse \n  (reduce\n\t(fn [a i] \n  \t( if (= i (last (reverse a))) \n    \t a \n    \t(cons i a)\n    )\n    )'() x\n  \t) \n  )\n  )", "problem": 30, "user": "51e1c176e4b06a68e693eafb"}, {"code": "(fn [coll] (map first (partition-by identity coll)))", "problem": 30, "user": "51e41f4be4b0efabf93c02ac"}, {"code": "(fn [coll] \n  (loop [xs coll\n         results []]\n    (if (empty? xs)\n      results\n      (recur\n       (rest xs)\n       (if (= (first xs) (last results))\n         results\n         (conj results (first xs))))\n      )))", "problem": 30, "user": "51e24a04e4b01e5198146430"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "reduce (fn [r o]\n          (if (= (last r) o)\n            r\n            (conj r o)))\n        []", "problem": 30, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "(fn [k]\n(let [g\n      #(filter (fn [x] (not (= nil x)))\n   (concat\n   (for [y (range (dec (count %)))]\n  (if (= (nth % y) (nth % (inc y))) nil\n    (nth % y)\n    )) (list (last %)))\n  )]\n  (if (string? k) (distinct k)\n  (last (take 10 (iterate g k))))\n  ))", "problem": 30, "user": "51e3cf8ee4b0efabf93c02a3"}, {"code": "(fn jin[coll]\n  (if (empty? coll) \n    ()\n    (if (= (first coll) (first (rest coll)))\n    \t(jin (rest coll))\n \t\t(cons (first coll) (jin (rest coll))))))", "problem": 30, "user": "51e595a6e4b0efabf93c02d8"}, {"code": "(fn filter-duplicates [coll]\n           (when-let [[f & r] (seq coll)]\n             (if (= f (first r))\n               (filter-duplicates r)\n               (cons f (filter-duplicates r)))))", "problem": 30, "user": "4fea24e0e4b0547ebccb248d"}, {"code": "(fn [lst]\n  (letfn [(rec [lst acc]\n               (if (empty? lst)\n                 acc\n                 (rec (rest lst) (if (not (= (first acc) (first lst)))\n                                   (cons (first lst) acc) acc))))]\n    (reverse (rec lst '()))))", "problem": 30, "user": "51e0198ee4b01188f0627539"}, {"code": "(fn [coll]\n  (reduce #(conj % (first %2))\n          []\n          (partition-by identity coll)))", "problem": 30, "user": "51e89428e4b006d205356a51"}, {"code": "(fn [seq] (reduce\n           (fn [init item] (if (not= (last init) item) (conj init item) init))\n           [] seq))", "problem": 30, "user": "51df825de4b01188f062752b"}, {"code": "(fn cmprs [coll]\n    (when-let [[f & r] (seq coll)] \n      (if (= f (first r)) \n        (cmprs r) \n        (cons f (cmprs r)))))", "problem": 30, "user": "51d9eb05e4b02ceefd947755"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "51dc5033e4b09c47a74ce109"}, {"code": "#(loop [s % r [] prev nil]\n    (if (empty? s) r\n\t  (if (= (first s) prev)\n\t\t(recur (rest s) r (first s))\n\t\t(recur (rest s) (conj r (first s)) (first s)))))", "problem": 30, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn [s] (reduce \n         (fn [os a]\n           (let [b (last os)]\n             (if (= a b)\n               os\n               (conj os a))))\n         []\n         s\n         ))", "problem": 30, "user": "504e90bae4b069badc5a33b8"}, {"code": "(fn [v]\n  (reduce #(if (= (last %1) %2) \n                    %1\n                    (conj %1 %2)\n                  ) [] (vec v))\n  )", "problem": 30, "user": "51eca2ace4b069f463c22cd0"}, {"code": "(fn d ([x] (d x []))\n      ([x v]\n        (if-not (empty? x) (let [frst (first x)]\n                             (if (or (< (count x) 2) (not= frst (nth x 1))) (recur (rest x) (conj v frst))\n                                                                            (recur (rest x) v)))\n                           (seq v))))", "problem": 30, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "(fn [coll]\n  (loop [ [l & r] coll\n         final []]\n    (if l\n      (if (= l (first r))\n        (recur r final)\n        (recur r (conj final l)))\n      final)))", "problem": 30, "user": "51dd6a7ce4b0c33a4e1da409"}, {"code": "(fn [s]\n  (map first (partition-by identity s)))", "problem": 30, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "reduce (fn [l el] (if (= (last l) el) l (conj l el))) []", "problem": 30, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "#(map last (filter (complement (partial apply =)) (map list (cons nil %) %)))", "problem": 30, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [(first %)] %)", "problem": 30, "user": "51e780dae4b0730ab87cf353"}, {"code": "(fn me [xs]\n  (cond\n   (= (next xs) nil) xs\n   (= (first xs) (second xs)) (me (cons (first xs) (nthrest xs 2)))\n   :else (cons (first xs) (me (rest xs)))))", "problem": 30, "user": "51ef66a7e4b0871fa145d9a5"}, {"code": "(fn dedup\n  ([s] (reverse (dedup s nil '())))\n  ([s c r]\n     (if (empty? s)\n       r\n       (let [ch (if (= c (first s))\n                  nil\n                  (first s))\n             rev (if (nil? ch) r (conj r ch))\n             ]\n         (recur (rest s) (first rev) rev )))))", "problem": 30, "user": "51eff50fe4b0249c592fbdf0"}, {"code": "(fn compress [coll]\n  (reverse ((fn do-compress [new old]\n    (if (empty? old)\n      new\n      (if (= (first new) (first old))\n        (do-compress new (rest old))\n        (do-compress (conj new (first old)) (rest old)))))\n  (list (first coll)) (rest coll))))", "problem": 30, "user": "51efd397e4b0249c592fbdeb"}, {"code": "reduce (fn [a b] (if (= (last a) b) a (conj a b))) []", "problem": 30, "user": "51efa6a6e4b0249c592fbde8"}, {"code": "#(map first (partition-by identity %))\n\n;reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "51d11f5de4b067c365486360"}, {"code": "(fn [s]\n  (->> s\n       (partition-by identity)\n       (mapcat distinct)))", "problem": 30, "user": "50e90813e4b033b0e80d11e7"}, {"code": "(fn foo[last_elem lst]\n  (if (empty? lst)\n    nil\n  (if (= last_elem (first lst))\n    (foo last_elem (rest lst))\n    (concat (list (first lst))\n            (foo (first lst) (rest lst))\n            )\n    )\n  ) \n  ) nil", "problem": 30, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "#(reduce (fn [l e] (if (= e (last l)) l (concat l [e]))) [] %)", "problem": 30, "user": "4e3f480c535dc968683fc497"}, {"code": "(fn [sq] (map first (partition-by identity sq)))", "problem": 30, "user": "5029f263e4b023940c84aa45"}, {"code": "#(reverse (reduce (fn [a b]\n           (if (= (first a) b)\n             a\n             (conj a b)))\n           () %))", "problem": 30, "user": "51f2ab8be4b0210f90e74554"}, {"code": "(fn uniq[coll]\n   (loop [res () prev nil rst coll]\n      (if (empty? rst)\n        (reverse res)\n        (if-not (= (first rst) prev)\n          (recur (into res (list (first rst))) (first rst) (rest rst))\n          (recur res (first rst) (rest rst))))))", "problem": 30, "user": "51f2851fe4b0210f90e7454b"}, {"code": "reduce #(if (not= %2 (last %)) (conj % %2) %) []", "problem": 30, "user": "51f04e89e4b0274c496158cd"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "511b233ae4b07ab9ec456180"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51f55bdae4b0abb92f97f9d0"}, {"code": "(fn [o [f & r]]\n    (if (nil? f) o\n        (recur (concat o (list f)) (drop-while (partial = f) r)))) ()", "problem": 30, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) '[] x))", "problem": 30, "user": "51f629dde4b06ff1c25c52ba"}, {"code": "(fn\n  [in]\n  (loop [x in\n        prv nil\n        acc '()]\n  (if (empty? x)\n   (reverse acc)\n   (if (= prv (first x))\n    (recur (rest x) (first x) acc)\n    (recur (rest x) (first x) (cons (first x) acc))))))", "problem": 30, "user": "51f13b80e4b06a20a2523f38"}, {"code": "#(loop [i %\n        o '()]\n   (if (empty? i)\n     o\n     (if (= (first i) (second i))\n       (recur (rest i) o)\n       (recur (rest i) (concat o (list (first i)))))))", "problem": 30, "user": "51f28a64e4b0210f90e7454e"}, {"code": "#(loop [coll (seq %)\n        l nil\n        acc []]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (first coll) \n            (if (= l (first coll)) \n              acc\n              (conj acc (first coll))))))", "problem": 30, "user": "5046ee3ee4b03b02161376b4"}, {"code": "reduce #(if (not= %2 (last %)) (conj % %2) %) []", "problem": 30, "user": "51db1abae4b094966a2cd685"}, {"code": "(fn foo [xs]\n   (cond\n    (empty? xs) '()\n    (= (first xs) (fnext xs)) (foo (next xs))\n    :else (conj (foo (next xs)) (first xs))))", "problem": 30, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn f [l]\n  (cond\n    (empty? (rest l)) l\n    (= (first l) (first (rest l))) (f (rest l))\n    :else (conj (f (rest l)) (first l))))", "problem": 30, "user": "51e6a2bce4b0ab43cc26c21d"}, {"code": "(fn compress [elements]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) (vector) elements))", "problem": 30, "user": "4f017b4e535dcb61093f6a37"}, {"code": "#(reduce (fn [r elm]\n              (if (not (= (last r) elm))\n                (conj r elm)\n                r))\n            [] %)", "problem": 30, "user": "51f40975e4b0fca5e8b4822e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51fa852ee4b0f1313d4689dd"}, {"code": "(fn f1 \n  [sec]\n  (loop [sec sec\n         result '()\n         last-el \"\"]\n    (if (empty? sec) \n      (reverse result)\n      (recur (rest sec) \n             (if (not (= last-el (first sec)))\n                      (cons (first sec) result)\n                      result)\n             (first sec)))))", "problem": 30, "user": "51f297a3e4b0210f90e74552"}, {"code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] %)", "problem": 30, "user": "4f592f83e4b0030a34fb2ad2"}, {"code": "#(->> % (partition-by identity) (map distinct) (apply concat))", "problem": 30, "user": "51f98843e4b09be9c177e54e"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "518279abe4b0353c468deb65"}, {"code": "reduce (fn [acc i] (if (and (not (empty? acc)) (= (nth acc (dec (count acc))) i)) acc (concat acc [i]))) []", "problem": 30, "user": "51fa7154e4b0f1313d4689da"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51facf22e4b0f1313d4689f0"}, {"code": "(fn compress1 [x]\n  (let [cur-item (first x)\n        next-item (second x)]\n    (when (or cur-item next-item)\n      (if (= cur-item next-item)\n        (compress1 (rest x))\n        (cons cur-item (compress1 (rest x)))))))", "problem": 30, "user": "51f82769e4b09be9c177e527"}, {"code": "(fn compr [coll]\n  (if-let [[f & r] coll]\n    (lazy-seq (if (= f (first r))\n                (compr r)\n                (cons f (compr r))))\n    []))", "problem": 30, "user": "4fa3c137e4b081705acca193"}, {"code": "(fn\n  [coll]\n  (loop [xs (rest coll), curr (first coll), prev nil, result '()]\n    (if (empty? xs)\n      (if (not= prev curr)\n        (reverse (into result (list curr)))\n        (reverse result))\n      (recur (rest xs)\n             (first xs)\n             curr\n             (if (not= prev curr)\n               (into result (list curr))\n               result)))))", "problem": 30, "user": "512c0f84e4b03a42b6300232"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51fa1375e4b0f1313d4689c9"}, {"code": "(fn cmp\n  ([xs] (cmp (rest xs) (list (first xs))))\n  ([xs ys]\n     (if (empty? xs) ys\n       (if (= (first xs) (last ys)) (cmp (rest xs) ys) (cmp (rest xs) (reverse (conj (reverse ys) (first xs)))))\n     )\n  )\n)", "problem": 30, "user": "5200054de4b023d2eb508ca7"}, {"code": "reduce (fn [x y] (if (= (last x) y) x (conj x y))) []", "problem": 30, "user": "51fb178ce4b0f1313d4689f9"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "51a584c7e4b051b01d55f44e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "518e7d3be4b051adb72789f0"}, {"code": "(fn [x]\n  (map #(first %) \n       (partition-by (fn [y] apply distinct? y) x)))", "problem": 30, "user": "51891c96e4b04c2714a2670e"}, {"code": "(fn rem-dup [o] (cond (empty? o) nil\n                          (= (first o) (first (rest o))) (rem-dup (rest o))\n                          :else (cons (first o) (rem-dup (rest o)))))", "problem": 30, "user": "51fefe8ae4b0f1313d468a7d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5201572be4b0d7096e99ddbb"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn [seqns]\n  (let [seq (if (sequential? seqns) seqns (seq seqns))]\n    (letfn [(rem-rec [s pred res]\n              (if (empty? s)\n                (reverse res)\n                ;else\n                (if (= pred (first s))\n                  (recur (rest s) pred res)\n                 ;else\n                  (recur (rest s) (first s) (cons (first s) res)))))]\n      (rem-rec (rest seq) (first seq) (list (first seq))))))", "problem": 30, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn compress [s]\n  (map\n    #(first %1)\n    (partition-by identity s)))", "problem": 30, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "(comp (partial map first) (partial partition-by identity))", "problem": 30, "user": "4f0b3c88535d0136e6c22301"}, {"code": "(fn compress [coll]\n  (when-let [[frst & rst] (seq coll)] \n    (if (= frst (first rst)) \n      (compress rst) \n      (cons frst (compress rst)))))", "problem": 30, "user": "515ebde3e4b01e5d11ccd0a8"}, {"code": "(fn f [x]\n  (if (< (count x) 2)\n    x\n    (if (= (first x)\n           (second x))\n      (f (cons (first x)\n               (rest (rest x))))\n      (cons (first x)\n            (f (rest x))))))", "problem": 30, "user": "50bf6f93e4b0ffd967a66cbf"}, {"code": "(fn [coll]\n  (reverse\n   (loop [new (list (first coll))\n          old (rest coll)]\n     (if (empty? old)\n       new\n       (let [x (first new)\n             y (first old)]\n         (recur\n          (if (= x y)\n            new\n            (cons y new))\n          (rest old)))))))", "problem": 30, "user": "5201d2f3e4b0b2e020a18f22"}, {"code": "#(reduce (fn [a b] (if (= (last a) b)\n                   a\n                   (conj a b)))\n       (into [[(first %)]] (rest %)))", "problem": 30, "user": "51944aaae4b0142f60b4aedc"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5202cfe7e4b030ee0c5b2702"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "5203621ee4b0fb7e47ea51f5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5190772de4b09156e89b2a0a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "516ab8c2e4b081287f204e9e"}, {"code": "(fn compress [coll]\n\t(when-let [[f & r] (seq coll)] ;deconstruct coll into first and rest\n\t(if (= f (first r)) ;if the first and second character are the same\n\t\t(compress r) ;drop the first character\n\t\t;else\n\t\t(cons f (compress r)) ;include the first character\n\t\t))\n)", "problem": 30, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": "#(reduce (fn [a b]\n          (if (= b (last a))\n            a\n            (conj a b)))\n         [] %)", "problem": 30, "user": "52069fade4b0bf4f1882c82c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e580746535d8a8b8723a28c"}, {"code": "(fn [xs]\n  (reverse (reduce #(if (= (first %1) %2)\n                        %1\n                        (conj %1 %2)) '() xs)))", "problem": 30, "user": "5208495ce4b0c1501ba9e6da"}, {"code": "(fn [coll]\n  (map first (partition-by identity coll)))", "problem": 30, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "#(letfn [(rem-helper [reducedseq currentletter newseq]\n            (if (empty? reducedseq)\n              newseq\n              (if (= currentletter (first reducedseq))\n                  (recur (rest reducedseq) currentletter newseq)\n                  (recur (rest reducedseq) (first reducedseq) (concat newseq [(first reducedseq)])))))]\n          (rem-helper (seq %) (first (seq %)) (list (first (seq %)))))", "problem": 30, "user": "52000564e4b023d2eb508ca8"}, {"code": "(fn [z] (reduce \n\t(fn [x y] (if (= (last x) y) x (concat x (list y)) ) )\n\t(conj (rest z) (list (first z)) ))\n)", "problem": 30, "user": "520797ebe4b03bd50ef5466d"}, {"code": "(comp (partial map first) (partial partition-by identity)) ;yaaaay, point-free", "problem": 30, "user": "4f4ff836e4b03ad3f0c10cf4"}, {"code": "(fn [col]\n  (for [neighbour (partition-all 2 1 col)\n    :let [x (first neighbour) y (second neighbour)]\n    :when (not= x y)]\n    x\n  )\n)", "problem": 30, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn clear [lst]\n  (let\n    [clear_ (fn clear_ [x lst]\n\t\t\t (cond\n           (empty? lst) (list x)\n           (= x (first lst)) (clear_ x (rest lst))\n           true (cons x (clear_ (first lst) (rest lst)))))]\n    (clear_ (first lst) (rest lst))))", "problem": 30, "user": "52091d57e4b0e152394d76f0"}, {"code": "(fn [x] (mapcat distinct (partition-by identity x)))", "problem": 30, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52002fc6e4b0b679c4e0e3fe"}, {"code": "(fn remove-dups [s] (map first (partition-by identity s)))", "problem": 30, "user": "5209cb44e4b0e152394d7702"}, {"code": "#(loop [r [] c %]\n  (let [[x & more] c]\n    (if (nil? x)\n      r\n      (if (= x (last r))\n        (recur r more)\n        (recur (conj r x) more)))))", "problem": 30, "user": "5201cf92e4b0b2e020a18f21"}, {"code": "(fn [col]\n  (loop [result []\n         col col]\n    (if (empty? col)\n      result\n      (let [next-item (first col)]\n        (recur (if (= (last result) (first col))\n                 result\n                 (conj result next-item))\n               (rest col))))))", "problem": 30, "user": "4eb7b049535d7eef30807377"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52090654e4b0e152394d76ee"}, {"code": "(fn [coll] \n  (cons (first coll)\n        (mapcat #(if (not= %1 %2) [%2] [])\n                coll\n                (rest coll))))", "problem": 30, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn [s]\n  (letfn [(reducer [coll y]\n            (if (= (last coll) y)\n              coll\n              (conj coll y)))]\n    (reduce reducer [] s)))", "problem": 30, "user": "5080a697e4b01a93d3f38e49"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "52016690e4b0b2e020a18f0f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "520a576be4b0e152394d7714"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4fa176c7e4b0dcca54ed6d5e"}, {"code": "(fn [orig-str]\n(loop [input-seq (seq orig-str)\n         result []]\n    (if (empty? input-seq)\n      (seq result)\n      (let [last-item (last result)\n            next-item (first input-seq)]\n        (if (= last-item next-item)\n          (recur (drop 1 input-seq) result)\n          (recur (drop 1 input-seq) (conj result next-item)))))))", "problem": 30, "user": "51ec9114e4b069f463c22ccd"}, {"code": "(fn [s] (loop [sx s z '()]\n          (cond\n           (empty? sx) z\n           :else (recur (drop 1 sx) (concat z (if (= (take-last 1 z) (take 1 sx)) nil (take 1 sx)))))))", "problem": 30, "user": "5078dedae4b08327cd804a5d"}, {"code": "(fn [x] (map #(first %) (partition-by identity x)))", "problem": 30, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn [x](map first (partition-by (fn[y] y) x)))", "problem": 30, "user": "520ed237e4b0101e4be6fcd9"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "51a3738ce4b0e77c4ca60bf0"}, {"code": "(fn [coll]\n  (loop [l '(),\n        c coll]\n    (if (empty? (rest c))\n      (reverse (conj l (first c)))\n      (if (not= (first c) (second c))\n        (recur (conj l (first c)) (rest c))\n        (recur l (rest c))))))", "problem": 30, "user": "519c4111e4b0a1d87b003458"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "5208a3a2e4b0301979a6c235"}, {"code": "(fn [s]\n  (loop [n 0 lastone [] res []]\n    (if (not (= n (count s)))\n      (if (not (= (nth s n) lastone))\n        (do\n          (nth s n)\n          (recur (inc n) (nth s n) (conj res (nth s n))))\n        (recur (inc n) (nth s n) res))\n      res)))", "problem": 30, "user": "520c9489e4b0b022ef140c98"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "520332f7e4b030ee0c5b2714"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "#(reverse (reduce (fn [xs x] (if (= x (first xs)) xs (cons x xs))) '() %))", "problem": 30, "user": "51e61772e4b0efabf93c02e2"}, {"code": "(fn mycompress [x]\n  (\n    (fn removedups [x y]\n      (if\n        (empty? y)\n        (list x)\n        (if\n          (= x (first y))\n          (removedups x (rest y))\n          (cons x (removedups (first y) (rest y)))\n           )\n        )\n      )\n    (first x)\n    (rest x)\n  )\n  )", "problem": 30, "user": "51f687c2e4b06ff1c25c52cb"}, {"code": "(fn compress [in]\n  (let [xs (filter (fn [[v1 v2]] (not= v1 v2)) (partition 2 1 in))\n        s1 (map first (drop-last xs))\n        [s2] (take-last 1 xs)]\n    (concat s1 s2)\n    ))", "problem": 30, "user": "513fab65e4b00f13ea1bd891"}, {"code": "reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '()", "problem": 30, "user": "5211d195e4b07aea8afc4f76"}, {"code": "#(loop [lst %\n                    frst nil\n                    scond (first lst)\n                    rlt '()]\n   (if (nil? scond)\n     (reverse rlt)\n     (if (= frst scond)\n       (recur (rest lst) scond (second lst) rlt)\n       (recur (rest lst) scond (second lst) (conj rlt scond)))))", "problem": 30, "user": "4fa7de4ce4b081705acca1c9"}, {"code": "(fn [xs]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] xs))", "problem": 30, "user": "52129363e4b0d32679a50640"}, {"code": "(fn [input] (reduce #(if (= (last %) %2) % (conj % %2)) '[] input))", "problem": 30, "user": "52154514e4b02f6d8ea676c0"}, {"code": "(fn [input]\n  (let [cmpr (fn cmprs [[x & opt]]\n                 (cond (empty? opt) [x]\n                       (= x (first opt)) (cmprs `[~x ~@(rest opt)])\n                       :else `[~x ~@(cmprs opt)]))]\n    (cond (string? input) (apply str (cmpr input))\n          :else (cmpr input))))", "problem": 30, "user": "52153bdde4b0961f15ac4daa"}, {"code": "(fn [sq] (reduce (fn [acc el] (if (= (peek acc) el) acc (conj acc el))) [] sq))", "problem": 30, "user": "51f9527fe4b09be9c177e549"}, {"code": "reduce #(if (not= (last %) %2) (conj % %2) %) []", "problem": 30, "user": "520242bae4b030ee0c5b26e3"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5151c184e4b03e678e393add"}, {"code": "(fn simplify [x] \n  (if (= (first x) (first (next x)))\n    (simplify (next x))\n    (if (next x) (concat [(first x)] (simplify (next x))) x)\n    ))", "problem": 30, "user": "51fc44c5e4b0f1313d468a1b"}, {"code": "#(reduce\n   \t(fn [acc y]\n      (if (= (last acc) y)\n        acc\n        (concat acc [y])\n      )\n    )\n   \t[]\n   (seq %)\n  )", "problem": 30, "user": "5216933be4b000d124d989cf"}, {"code": "(fn foo [s]\n\t  (cond \n\t    (empty? s) ()\n\t    (= 1 (count s)) (list (first s))\n\t    :else \n\t    (if (= (first s) (second s))\n\t\t(foo (rest s))\n\t\t(conj (foo (rest s)) (first s)))))", "problem": 30, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn compress [seq]\n  (if (empty? seq)\n    '()\n    (if (= (first seq) (second seq))\n      (compress (rest seq))\n      (conj (compress (rest seq)) (first seq)))))", "problem": 30, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn compress\n  ([xs] (compress (first xs) nil (rest xs))) \n  ([this_element\n    last_element\n    xs]\n     (cond\n      (empty? xs) (if (= this_element last_element)\n                              '()\n                              (list this_element))\n      (= this_element last_element) (compress (first xs) this_element (rest xs))\n      :else (cons this_element\n                  (compress (first xs) this_element (rest xs))))))", "problem": 30, "user": "520693e1e4b0bf4f1882c829"}, {"code": "(fn [s]\n  (map first\n  (filter\n   (fn [[a b]] (not= a b))\n   (map list s (concat [nil] s)))))", "problem": 30, "user": "5219e575e4b0c4ef0be82ffd"}, {"code": "(fn [s] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "5131d817e4b06942423563ca"}, {"code": "(fn [l]\n  (loop [s l acc ()]\n    (if (empty? s)\n      (reverse acc)\n      (recur (drop-while #(= % (first s)) (rest s)) (conj acc (first s))))))", "problem": 30, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "521249f5e4b06aa6d1666ba2"}, {"code": "(fn [s] \n  (loop [acc [] xs s]\n    (if (empty? xs)\n      acc\n      (if (= (last acc) (first xs)) (recur acc (rest xs)) (recur (conj acc (first xs)) (rest xs))))))", "problem": 30, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "(fn [coll] (remove nil? (remove nil? (map #(if (= %1 %2) nil %1) coll (concat (rest coll) (list nil))))))", "problem": 30, "user": "51f805b0e4b06ff1c25c52e2"}, {"code": "(fn [s] (reduce #(if (not= (last %1) %2)\n           (conj %1 %2)\n           %1)\n        [] s))", "problem": 30, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn[v]\n  (reverse(loop [x nil y v ans '()]\n    (if (empty? y) \n      ans \n      (if (= x (first y))\n          (recur x (next y) ans) \n          (recur (first y) (next y) (conj ans (first y))))))))", "problem": 30, "user": "52196842e4b0890f2f822bfa"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "521c6a1ae4b0c4ef0be83083"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5174ade2e4b07031762f2edf"}, {"code": "(fn [coll]\n  (reduce (fn [acc nxt] (if (= (last acc) nxt) acc (conj acc nxt))) [] coll))", "problem": 30, "user": "5213cd45e4b0a98dd8fc4bd6"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f7e7cbde4b06e829148e1cf"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "521dceeae4b050d5da042802"}, {"code": "(fn compress [sqnc]\n  (loop [lista (seq sqnc)\n         compressed '()]\n    (if (not (not-empty lista)) (reverse compressed)\n\t(if (= (first lista) (first compressed))\n          (recur (rest lista) compressed)\n          (recur (rest lista) (cons (first lista) compressed))))))", "problem": 30, "user": "5213348ae4b0d32679a50652"}, {"code": "(fn [xs]\n  (reverse\n    (reduce\n    (fn [acc x]\n      (if (= x (first acc))\n        acc\n        (cons x acc)))\n    '()\n    xs)))", "problem": 30, "user": "521e4f22e4b0dd19981ad079"}, {"code": "(fn [a] (loop [coll a\n       res '()]\n  (if (seq coll) \n    (if (= (first coll) (first (next coll)))\n      (recur (next coll) res)\n      (recur (next coll) (conj res (first coll)))\n      )\n    (reverse res)\n)))", "problem": 30, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "#(reduce (fn [acc x] (if (= (last acc) x) acc (conj acc x))) [] %)", "problem": 30, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn [s]\n  (loop [s s\n         r ()]\n    (cond\n     (empty? s) (reverse r)\n     (and (not (empty? r))\n          (= (first s) (first r))) (recur (rest s) r)\n     :else (recur (rest s) (conj r (first s))))))", "problem": 30, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn [xs] (\n             reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) [] xs\n             ))", "problem": 30, "user": "5210e5c5e4b080a8d9b9d63f"}, {"code": "(fn [coll] (loop [curr (last coll) colList (rest (reverse coll)) result '()]\n             (cond (empty? colList) (cons curr result)\n                   (not= curr (first colList)) (recur (first colList) (rest colList) (cons curr result))\n                   :else (recur (first colList) (rest colList) result))))", "problem": 30, "user": "51ecb0fee4b0bb5070431583"}, {"code": "#(reduce (fn [a itm] (if (= (last a) itm) a (conj a itm))) [] %)", "problem": 30, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn f [x]\n  (if (empty? (rest x))\n    x\n    (if (= (first x) (second x))\n      (f (rest x))\n      (cons (first x) (f (rest x))))))", "problem": 30, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "(fn remove-dups [s]\n   (cond\n    (empty? s) '()\n    (= (first s) (second s)) (remove-dups (rest s))\n    :else (cons (first s) (remove-dups (rest s)))))", "problem": 30, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "#(filter (fn [item] (not= nil item)) (cons (first %) (map (fn [a b] (if (= a b) nil b)) % (rest %))))", "problem": 30, "user": "510ee996e4b07438aa321462"}, {"code": "(fn cmp [xs]\n  (if (empty? xs)\n    xs\n    (let [x (first xs) x2 (second xs) ys (rest xs)]\n      (if (= x x2)\n        (cmp ys)\n        (cons x (cmp ys))))))", "problem": 30, "user": "51c20b14e4b0d204dbe2ca1b"}, {"code": "(fn [in-seq]\n   ((fn process [in-vec res-vec]\n      (if (empty? in-vec)\n        res-vec\n        (if (= (first in-vec) (last res-vec))\n          (recur (rest in-vec) res-vec)\n          (recur\n           (rest in-vec)\n           (conj res-vec (first in-vec))))\n        )\n      )\n    (if (vector? in-seq) in-seq (vec in-seq)) [])\n   )", "problem": 30, "user": "52213426e4b0e6a83c8925c4"}, {"code": "reduce (fn [acc i] (if (and (not (empty? acc)) (= (nth acc (dec (count acc))) i)) acc(concat acc [i]))) []", "problem": 30, "user": "5220d1b6e4b0e6a83c8925ad"}, {"code": "(fn foo [s]\n  (if (empty? s)\n    '()\n    (let [current (first s)\n          next (first (rest s))]\n      (if (not (= current next))\n        (concat (list current) (foo (rest s)))\n        (foo (concat (list (first s)) (rest (rest s))))))))", "problem": 30, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn myComp [xs] (reverse\n                (loop [x (first xs) n (second xs) rem (next (next xs)) result (list x)]\n                      (if (empty? rem) (if (= x n) result (cons n result))\n                          (recur n (first rem) (next rem)\n                                 (if (= x n) result (cons n result)))))))", "problem": 30, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "(fn -compress\n  [coll]\n  (map first (partition-by identity coll)))", "problem": 30, "user": "4ed2a31c535d44c135fd68db"}, {"code": "(fn compress [s]\n  (let [first (first s)\n        second (second s)]\n    (cond\n     (nil? second) (list first)\n     (= first second) (compress (rest s))\n     (not= first second) (cons first (compress (rest s))))))", "problem": 30, "user": "521bf7cfe4b0c4ef0be83066"}, {"code": "(fn compress-seq\n  [s]\n  (map first (partition-by identity s)))", "problem": 30, "user": "521b339fe4b0c4ef0be83031"}, {"code": "(fn [coll]\n ( concat  (map first (filter (fn [[ a b ]] ( not= a b)) (partition 2 1 coll))  )  [(last coll ) ]) )", "problem": 30, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn compress [coll] \n  (when-let [[f & r] (seq coll)]\n    (if(= f (first r))\n      (compress r)\n    (cons f (compress r)))))", "problem": 30, "user": "52161028e4b0bf4bffd29cb4"}, {"code": "(fn remove-consec-dup [xs]\n  ((fn remove-consec-dup-prev [[x & xs] c]\n    (if-not (nil? x)\n    \t(if (= c x)\n        (remove-consec-dup-prev xs c)\n        (cons x (remove-consec-dup-prev xs x))\n      )\n      ()\n    )\n  ) xs \"\") \n)", "problem": 30, "user": "4fb710f4e4b081705acca2cd"}, {"code": "reduce  (fn [x y] \n            (let [l (last x)]\n              (if(= l y)\n                x\n                (concat x (list y))))) '()", "problem": 30, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "(fn compress$ [xs]\n  (reduce (fn [acc x]\n            (if (= (peek acc) x)\n                acc\n                (conj acc x)))\n          []\n          xs))", "problem": 30, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn c [s]\n  (if (empty? s) nil\n    (if (= (first s) (second s)) (c (rest s))\n      (conj (c (rest s)) (first s)) )))", "problem": 30, "user": "52247d56e4b01819a2de42db"}, {"code": "#(reverse (reduce (fn [l i] (if (= (first l) i) l (cons i l))) '() %))", "problem": 30, "user": "5226ab21e4b04e78ff2e198a"}, {"code": "#(reduce (fn [x y] \n              (if (not= y (last x))\n                  (conj x y)\n                   x\n                  ))\n         [] %)", "problem": 30, "user": "52253004e4b01819a2de42fa"}, {"code": "#(->> % (partition-by identity) (map first))", "problem": 30, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "(fn [coll]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll))", "problem": 30, "user": "522454f4e4b01819a2de42d3"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51a91ac2e4b08d8ec191b822"}, {"code": "(fn shorten [coll]\n  (if (sequential? coll)\n    ((fn rec [good bad]\n       (if (= 0 (count bad))\n         (seq good)\n         (if (= (last good) (first bad))\n           (rec good (rest bad))\n           (rec (conj good (first bad)) (rest bad))\n         )\n       )\n    ) [] coll)\n    (shorten (seq coll))\n  )\n)", "problem": 30, "user": "522404d8e4b01819a2de42c0"}, {"code": "reduce\n (fn [result new-el] (if (= (last result) new-el)\n                       result\n                       (conj result new-el)))\n '[]", "problem": 30, "user": "5221c0cae4b0e6a83c8925e1"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5225666be4b01819a2de4300"}, {"code": "(fn compress [c]\n  (let [[a, b & xs] c]\n\t(if (empty? c)\n\t\tc\n\t\t(if (= a b)\n\t\t\t(compress (next c))\n\t\t\t(conj (compress (next c)) a)))))", "problem": 30, "user": "5225a0f5e4b01819a2de430e"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4daec4a0edd6309eace4d15e"}, {"code": "(fn [s]\n  (map #(first %) (partition-by identity s)))", "problem": 30, "user": "52277ab9e4b0186687e23a4f"}, {"code": "(fn [dups]\n  (loop [s (seq dups) l nil ret []]\n    (if (seq s)\n      (recur (rest s) (first s) (if (= l (first s)) ret (conj ret (first s))))\n      ret)))", "problem": 30, "user": "51ef31dfe4b0871fa145d9a0"}, {"code": "(fn [s] (reduce (fn [mem e] (if (= (last mem) e) mem (conj mem e))) [] s))", "problem": 30, "user": "5207d70ae4b03bd50ef54675"}, {"code": "(fn [sequence] \n  (loop [current sequence accumulator []]\n    (if (empty? current)\n      accumulator\n      (if (= (first current) (last accumulator))\n        (recur (rest current) accumulator)\n        (recur (rest current) (conj accumulator (first current)))))))", "problem": 30, "user": "520f46f9e4b0101e4be6fcee"}, {"code": "(fn [xs]\n  ((fn impl [xs triger ret]\n     (if (empty? xs)\n       ret\n       (if (= (first xs) triger)\n         (impl (rest xs) triger ret)\n         (impl (rest xs) (first xs) (conj ret (first xs))))))\n   xs nil []))", "problem": 30, "user": "521392bce4b0d32679a5065e"}, {"code": "reduce (fn [accum x] \n         (if (= x (last accum)) \n           accum \n           (concat accum (list x)))) \n'()", "problem": 30, "user": "522600cfe4b0f4c7e20d29c8"}, {"code": "#(let [f (fn [acc, x]\n          (if (= x (first acc))\n            acc\n            (conj acc x)))]\n  (reverse (reduce f () %)))", "problem": 30, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn compress [coll]\n  (reduce (fn [a,b] (if\n                    (= (last a) b)\n                    a\n                    (concat a [b])))\n        [] coll))", "problem": 30, "user": "522d0360e4b0806774ddfef7"}, {"code": "(fn [s] (rest (reduce #(if (= %2 (peek %1)) %1 (conj %1 %2)) [nil] s)))", "problem": 30, "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52127ee4e4b0d32679a5063c"}, {"code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y)) ) [] %)", "problem": 30, "user": "51e28063e4b08e53a149f0f2"}, {"code": "#(concat (map first (filter (fn [x] (not= (first x) (last x))) (partition 2 1 %))) (cons (last %) []))", "problem": 30, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] %)", "problem": 30, "user": "522dd30ee4b0a102974208c3"}, {"code": "(fn [x] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) () x)))", "problem": 30, "user": "522ef7a2e4b01e6a0e6e5daf"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52295917e4b04c906c9c6a6f"}, {"code": "#(loop [x %, y (first %), z []]\n   (if (empty? x) (conj z y)\n   (if (not= y (first x)) (recur (rest x)(first x)(conj z y))\n     (recur (rest x)(first x) z))))", "problem": 30, "user": "5226ef37e4b04e78ff2e1997"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51a058dae4b0b292b01ee3f3"}, {"code": "reduce (fn [acc i] (if (and (not (empty? acc)) (= (nth acc (dec (count acc))) i)) acc(concat acc [i]))) []", "problem": 30, "user": "523089f8e4b0035e815da388"}, {"code": "(fn [x] (reverse (reduce #(if(= (first %) %2) % (conj % %2)) '() x)))", "problem": 30, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5230d9bde4b0035e815da397"}, {"code": "#(reduce (fn [a b] \n                  (if (= (last a) b )\n                    a\n                    (conj a b ) ) )\n         []\n         (seq %) )", "problem": 30, "user": "5230d490e4b0035e815da396"}, {"code": "(fn dedup\n   ([x] (dedup [] (first (seq x)) (seq x))) \n   ([acc lastc s] (cond \n                    (empty? s) (conj acc lastc)\n                    (= (first s) lastc) (dedup acc lastc (next s))\n                    :else (dedup (conj acc lastc) (first s) (next s)))))", "problem": 30, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn [x]\n   (loop [result ()\n          ch nil\n          data x]\n     (if (empty? data)\n       result\n       (let [next (first data)]\n         (recur\n          (if (= ch next)\n            result\n            (concat result (list next)))\n          next\n          (rest data))))))", "problem": 30, "user": "506c0a02e4b0eda3100c090d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "522fdff7e4b032bbe342416c"}, {"code": "(fn rm-dup\n  ([s] (rm-dup (first s) (next s) [(first s)]))\n  ([c s r] ; char, seq, result\n   (cond\n    (nil? s) r\n    (= c (first s)) (recur (first s) (next s) r)\n    :else (recur (first s) (next s) (conj r (first s))))))", "problem": 30, "user": "522e6c01e4b01cdb292c5f01"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "514fd753e4b0b449e54b8e00"}, {"code": "(fn [l]\n  (keep identity\n  \t(reverse\n      (reduce #(if-not (= (first %1) %2) (conj %1 %2) %1) '() l))))", "problem": 30, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "(fn thirty [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (thirty r)\n      (cons f (thirty r)))))", "problem": 30, "user": "510591dde4b06d28cacc92eb"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn ! [s]\n  (cond (empty? (rest s)) (list (first s))\n        (= (first s) (first (rest s))) (! (rest s))\n        true (concat (list (first s)) (! (rest s)))))", "problem": 30, "user": "523361d8e4b0f0b72fabf405"}, {"code": "(fn [s] (map #(second %) (filter #(first %) (partition 2 (interleave (#(cons true (map (complement =) (rest %) (drop-last %))) s) s)))))", "problem": 30, "user": "5235a902e4b0a643f2dcb750"}, {"code": "(fn [x] (map first (partition-by identity x)))\n\n;(fn compress [x]\n;  (if (> (count x) 1)\n;    (if (= (first x) (first (next x)))\n;      (compress (rest x))\n;      (conj (compress (rest x)) (first x)))\n;    x))", "problem": 30, "user": "5231d8fae4b0e2e8de81d1fb"}, {"code": "(fn [coll]\n  (loop [from coll to []]\n    (if (empty? from)\n      to\n      (let [lt (last to) [ff & rf] from]\n        (if (and lt (= lt ff))\n          (recur rf to)\n          (recur rf (conj to ff)))))))", "problem": 30, "user": "516abecae4b081287f204e9f"}, {"code": "(fn [coll]\n  (map first (partition-by identity coll))\n  )", "problem": 30, "user": "5228f870e4b0186687e23a98"}, {"code": "(fn remove-dup [coll] \n   (cond\n    (empty? coll) []\n    (empty? (rest coll)) coll\n    (= (first coll) (first (rest coll))) (remove-dup (rest coll))\n    :else (cons (first coll) (remove-dup (rest coll)))))", "problem": 30, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(fn [coll] (loop [ result [] c coll prev nil]\n          (if (nil? c) result\n           (recur (concat result (let [ [a b] c] (when-not (= a b) [a]))) (next c) (first c)))))", "problem": 30, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn f [l]\n  (if (next l)\n    (let [a (first l) b (second l) t (rest l)]\n      (if (= a b) (f t) (cons a (f t))))\n    l))", "problem": 30, "user": "508fd6bae4b0ea685a20f76b"}, {"code": "(fn [x] (reduce #(if(= (first %1) %2) %1 (cons %2 %1)) '() (reverse x)))", "problem": 30, "user": "5220909fe4b0e6a83c89259f"}, {"code": "(fn [col] (map first (partition-by identity col)))", "problem": 30, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "#(loop [previous (first %)\n         the-rest (rest %)\n         final-seq (list (first %))]\n    (if (empty? the-rest)\n      final-seq\n      (let [current (first the-rest)]\n        (if (= previous current)\n          (recur current (rest the-rest) final-seq)\n          (recur current (rest the-rest) (concat final-seq [current]))))))", "problem": 30, "user": "523288fee4b035af41902a88"}, {"code": "(fn [xs]\n  (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() xs))", "problem": 30, "user": "51cd75d6e4b02254fc79488c"}, {"code": "(fn [coll]\n\t(->> (partition 2 1 coll)\n\t     (keep (fn [[x y]]\n\t\t       (when-not (= x y)\n\t\t\t\t y)))\n\t     (cons (first coll))))", "problem": 30, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [n] (loop [ n n\n                acc '()]\n          (cond\n           (empty? n) acc\n           (= (first n) (last acc)) (recur (rest n) acc) \n           :else (recur (rest n) (concat acc (list (first n)))))))", "problem": 30, "user": "52394c03e4b0d705d026ef09"}, {"code": "(fn [x]\n  (reverse (loop [x (seq x)\n         lastSeen nil\n         acc '()]\n    (if (empty? x)\n      acc\n      (if (= (first x) lastSeen)\n        (recur (rest x) lastSeen acc)\n        (recur (rest x) (first x) (cons (first x) acc)))))))", "problem": 30, "user": "504dffe2e4b078edc5f5938b"}, {"code": "(fn test1 [col]\n  (loop [c col, r '()]\n\t(if (empty? c)\n\t\tr\n\t\t(if (= (first c) (first (rest c)))\n\t\t\t(recur (rest c) r)\n\t\t\t(recur (rest c) (concat r (list (first c))))\n\t\t)\n\t)\n  )\n)", "problem": 30, "user": "52382d91e4b0fae3832e99f0"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52393e16e4b0d705d026ef06"}, {"code": "#(reduce (fn [acc el] \n (if (= (last acc) el) acc (conj acc el))) [] (seq %))", "problem": 30, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn comp [sequ] \n  (if (= sequ '()) '()\n  (if (= (first sequ) (second sequ))\n    (comp (rest sequ)) \n    (cons (first sequ) (comp (rest sequ)))\n  )))", "problem": 30, "user": "5239caa6e4b0d705d026ef27"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "51aefceee4b09397d5109797"}, {"code": "#(apply concat ( map distinct ( partition-by identity %)))", "problem": 30, "user": "523a657be4b081681ca7adc1"}, {"code": "(fn [sq]\n   (reverse\n     (reduce\n        (fn [acc itm]\n           (if (= (first acc) itm)\n              acc\n              (conj acc itm)))\n         '()\n          sq)))", "problem": 30, "user": "523bd9c0e4b07becd5be2201"}, {"code": "(fn [l] (reverse (reduce (fn [a b] (if (= (first a) b) a (conj a b))) '() l)))", "problem": 30, "user": "523b10dfe4b02f719975bdb8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn filt [ls]\n  (loop [[x & xs] ls\n         acc []]\n    (if xs\n      (recur xs (if (= x (first xs)) acc (conj acc x)))\n      (conj acc x))))", "problem": 30, "user": "523b82efe4b07becd5be21f0"}, {"code": "(fn [x] (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() (reverse x)))", "problem": 30, "user": "5220ef05e4b0e6a83c8925b8"}, {"code": "(fn [seq]\n  (remove nil?\n          (map last\n               (filter #(= (distinct %) %)\n                       (let [padded-seq (concat '(nil) seq '(nil))]\n                         (map #(conj '[] %1 %2) padded-seq (rest padded-seq)))))))", "problem": 30, "user": "523b4e91e4b07becd5be21ef"}, {"code": "(fn f\n    ([s] (f s nil))\n    ([s last-seen]\n        (cond\n            (nil? s) s\n            (not= (first s) last-seen) (cons (first s) (f (next s) (first s)))\n            :else (f (next s) last-seen)\n        ))\n)", "problem": 30, "user": "51f09f3de4b0274c496158d7"}, {"code": "(comp\r\n    (fn [l]\r\n        (loop [curr l acc []]\r\n            (cond (empty? curr) acc\r\n                (= (first curr) (peek acc)) (recur (rest curr) acc)\r\n                :else (recur (rest curr) (conj acc (first curr)))))\r\n    ) \r\n    seq)", "problem": 30, "user": "523dd963e4b06956f8342ca1"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52166e50e4b0bf4bffd29cc6"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "522e8451e4b01cdb292c5f06"}, {"code": "#(concat (map first (partition-by identity %)))", "problem": 30, "user": "52271ffee4b04e78ff2e19a9"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn [xs] (map first (partition-by identity xs)))", "problem": 30, "user": "523c6451e4b07becd5be2222"}, {"code": "(fn [x]\n  (loop [s (seq x) r '()]\n    (if (empty? s) r\n      (if (= (first s) (last r))\n        (recur (rest s) r)\n        (recur (rest s) (concat r (list (first s))))))))", "problem": 30, "user": "523bc0e6e4b07becd5be21f9"}, {"code": "(fn f [l]\n  (loop [r (lazy-seq)\n         k l]\n    (if (empty? k) (reverse r) (let [h (first k)\n                              s (rest k)]\n                          (recur (cons h r) (drop-while #(= % h) s))))))", "problem": 30, "user": "4fec550de4b0681fd128dca6"}, {"code": "(fn [s]\n  (reduce\n   (fn [s' v]\n     (if (= v (last s'))\n       s'\n       (conj s' v)))\n   []\n   s))", "problem": 30, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52271a85e4b04e78ff2e19a7"}, {"code": "#(reverse (reduce \n   (fn [x y] \n     (if (= y (first x))\n       x\n       (cons y x)))\n   '()\n   %))", "problem": 30, "user": "50aa60bee4b056ee01935865"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5230793be4b0035e815da383"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5213d81de4b0961f15ac4d73"}, {"code": "(fn [seq]\n  (map first (partition-by identity seq)))", "problem": 30, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [x] \n  (reduce \n   #(if (= %2 (last %1))\n      %1\n      (conj %1 %2))\n   [(first x)]\n   x))", "problem": 30, "user": "52379c46e4b0fae3832e99db"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5241fe85e4b076e5d3121f42"}, {"code": "(fn [x] \n  (reverse \n   (reduce \n    (fn [lst el] \n      (if (= (first lst) el) \n        lst \n        (cons el lst) )) \n    [] x)))", "problem": 30, "user": "522d3a16e4b0e26240291d50"}, {"code": "(fn f [xs]\n  (when (seq xs)\n    (if (= (first xs) (second xs))\n      (f (rest xs))\n      (cons (first xs) (f (rest xs))))\n  \n  ))", "problem": 30, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [xs] (reverse (reduce #(if (= %2 (first %1)) %1 (conj %1 %2)) '() xs)))", "problem": 30, "user": "52437703e4b076204b44fabf"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "524025bce4b0ad64fa01030f"}, {"code": "#(reduce\n   (fn [acc item]\n     (if (= (last acc) item)\n       acc\n       (conj acc item)))\n   []\n   %\n)", "problem": 30, "user": "5245fbbbe4b09dbe66b56183"}, {"code": "(fn [c] (reduce (fn [acc x] (if (= (last acc) x) acc (conj acc x))) [] c))", "problem": 30, "user": "51cfc616e4b0e42293a22578"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5245af03e4b08ba239308124"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52471ac0e4b05ef8e38e6354"}, {"code": "reduce #(if (= (last %) %2)\n          %\n          (conj % %2)) []", "problem": 30, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn [s] (reduce #(if (not (= (last %1) %2)) (conj %1 %2) %1) [] s))", "problem": 30, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "reduce (fn [acc, x] (if (= x (last acc)) acc (conj acc x))) []", "problem": 30, "user": "524717a9e4b05ef8e38e6352"}, {"code": "(fn [coll]  \n  (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] (seq coll))\n  )", "problem": 30, "user": "522f483ce4b032bbe342415a"}, {"code": "(fn [xs]\n  (let [pairs (partition 2 1 xs)\n        changes (map second (filter #(apply not= %) pairs))]\n    (if (seq xs)\n      (cons (first xs) changes)\n      ())))", "problem": 30, "user": "52487654e4b05ef8e38e63dc"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "524903e7e4b05ef8e38e640d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5246e945e4b0644eb7b0783b"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn [coll]\n  (loop [c (seq coll) n []]\n    (if (> (count c) 0)\n      (if (not= (first c) (peek n))\n        (recur (rest c) (conj n (first c)))\n        (recur (rest c) n) \n      )\n    n\n    )\n  )\n  )", "problem": 30, "user": "52485723e4b05ef8e38e63d2"}, {"code": "(fn [coll]\n  \n  (reduce \n   (fn [my-seq elm]\n     (if (= (last my-seq) elm)\n       my-seq\n       (conj my-seq elm)\n       ))\n   []\n   coll))", "problem": 30, "user": "518d1b5be4b070277754617b"}, {"code": "#(\n  (fn noconsec [in out]\n    (if (empty? in)\n      out\n      (if (= (first in) (first (rest in)))\n        (noconsec (rest in) out)\n        (noconsec (rest in) (conj out (first in))))\n      )\n    )\n  % [])", "problem": 30, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn[-seq]\n   (concat (reduce (fn [cont it]\n              (if (= it (last cont))\n                cont\n                (conj cont it)\n                )\n             \n              ) [] (seq -seq)))\n   )", "problem": 30, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51f66891e4b06ff1c25c52c1"}, {"code": "(fn my-fn [x] (if (= 1 (count x))\n                 x\n                 (if \n                   (= (first x) (second x)) \n                   (my-fn (rest x)) \n                   (cons (first x) (my-fn (rest x))))))", "problem": 30, "user": "510c123be4b078ea7192110e"}, {"code": "(fn [x] (reverse \n         (loop [h (first x) tl (rest x) ans ()]\n             (cond\n              (= tl ()) (cons h ans)\n              (= h (first tl)) (recur (first tl) (rest tl) ans)\n              :else (recur (first tl) (rest tl) (cons h ans))))))", "problem": 30, "user": "522e4baae4b01cdb292c5f00"}, {"code": "#(reverse (reduce (fn [x y] (if (empty? x) (list y) (if (= (first x) y) x (cons y x)))) () %))", "problem": 30, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "reduce #(if (= (last %1) %2)\n          %1\n          (conj %1 %2)) []", "problem": 30, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "#(reverse (reduce (fn [accum ch] \n          (if (= (first accum) ch) \n            accum\n            (conj accum ch))) '() %))", "problem": 30, "user": "523327fce4b0f0b72fabf3fc"}, {"code": "(fn fun8 [x]\n  (let [t (for [i (range (- (count x) 1)) :let [y (nth x i) z (nth x (inc i))] :when (not= y z)] z)]\n    (let [t2 (if (= (first x) (first t)) t (conj t (first x)))         \n          ] t2)\n  )\n)", "problem": 30, "user": "52132f8de4b0d32679a50651"}, {"code": "(fn [xs] (reduce (fn [x y]\n                  (cond\n                    (= (last x) y) x\n                    :else (conj x y)))\n                   [] xs))", "problem": 30, "user": "524da3a5e4b0a16e35cf6df3"}, {"code": "(fn doit\n  [accum coll]\n  (if (empty? coll)\n    (if (= (type (first accum)) (type \\a))\n      (clojure.string/join \"\" (reverse accum))\n      (reverse accum))\n    (recur\n      (conj accum (first coll))\n      (drop-while #(= % (first coll)) (rest coll))))) '()", "problem": 30, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn rm_cons_duplicates [x]\n  (loop [o_list x n_list [] size (.length x)]\n    (if ( = size 0)\n      n_list\n      (if (not= (first o_list) (last n_list))\n        (recur (rest o_list) (conj n_list (first o_list)) (dec size))\n        (recur (rest o_list) n_list (dec size))))))", "problem": 30, "user": "524a74b3e4b05ef8e38e64a7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "524feb3fe4b0541d1855b81f"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "524dd1c3e4b0f245900d275c"}, {"code": "(fn [xs] (clojure.walk/walk first seq (partition-by (fn [x] x) xs)))", "problem": 30, "user": "524f61bee4b0541d1855b80f"}, {"code": "#(map last (partition-by list %))", "problem": 30, "user": "4fdf4e2be4b05e33b9224f96"}, {"code": "#(reduce \n   (fn [acc x]\n     (if (= (last acc) x)\n       acc\n     (concat acc [x])\n     )\n   )\n   []\n   %)", "problem": 30, "user": "52452225e4b0d8acf9ed6ae6"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "524b90fae4b09eba1c0223df"}, {"code": "(fn compress [l]\n  (if (not (empty? l))\n    (cons (first l) (compress  (drop-while (partial = (first l)) l)  ))\n    ))", "problem": 30, "user": "5245d29ae4b09dbe66b56174"}, {"code": "#(reduce\n  (fn [acc in]\n    (if (= in (last acc))\n      acc\n      (conj acc in)))\n  []\n  (seq %))", "problem": 30, "user": "52525a0ee4b0541d1855b8a2"}, {"code": "#(map first (filter (fn [[a b]] (not= a b)) (partition 2 1 '(%) %)))", "problem": 30, "user": "525078b6e4b0541d1855b832"}, {"code": "(fn [x]\n  (let [y (partition-by (fn [a] a) x)]\n    (loop [coll y result []] (prn \"coll\" coll) (prn \"result\" result)\n      (let [item (first coll)] (prn \"item\" item)\n        (if (empty? coll)\n          result\n          (recur (rest coll) (concat result [(first item)]))\n          )\n        )\n      )\n    )\n  )", "problem": 30, "user": "52420e2fe4b076e5d3121f48"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5248c4c7e4b05ef8e38e63e8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52527192e4b0541d1855b8af"}, {"code": "(fn [s]\n (map #(first %) (partition-by identity s)))", "problem": 30, "user": "51857e64e4b0da5a5be3babe"}, {"code": "#(letfn [(f [x] (cond \n                 (= 1 (count x)) x\n                 (= (first x) (first (rest x))) (f (rest x))\n                 :else (cons (first x) (f (rest x)))))]\n   (f %))", "problem": 30, "user": "52530b4be4b0541d1855b8e4"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51269362e4b083bb8f88cf09"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "52537b67e4b0541d1855b8f9"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5224060de4b01819a2de42c3"}, {"code": "reduce (fn [x y]\n         (if (= (last x) y)\n           x\n           (concat x (list y)))) ()", "problem": 30, "user": "52526161e4b0541d1855b8a6"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "5252b59de4b0541d1855b8cf"}, {"code": "(fn dedup [x]\n  (cond\n    (= (count x) 1)\n      x\n    (= (first x) (second x))\n      (dedup (rest x))\n    :else\n      (cons (first x) (dedup (rest x)))))", "problem": 30, "user": "504ece87e4b069badc5a33ce"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "5254f908e4b0541d1855b9ba"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "524740e7e4b05ef8e38e635d"}, {"code": "(fn prob30 [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (prob30 r) \n      (cons f (prob30 r)))))", "problem": 30, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "(fn cmprs [l]\n  (cond\n   (empty? l) '()\n   :else (cons (first l) (cmprs (drop-while #(= (first l) %) l)))\n   )\n  )", "problem": 30, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "(comp (partial map first) (partial partition-by identity))", "problem": 30, "user": "5256cd77e4b0541d1855ba39"}, {"code": "(fn [s] (loop [[f & r] (seq s)\n               acc []]\n          (cond\n           (nil? f) acc\n           (= f (first r)) (recur r acc)\n           (not= f (first r)) (recur r (conj acc f)))))", "problem": 30, "user": "5250a9abe4b0541d1855b83b"}, {"code": "(fn compress [x]\n  (if (< (count x) 2)\n    x\n    (if (= (first x) (second x))\n      (compress (rest x))\n      (cons (first x) (compress (rest x)))\n      )\n    )\n  )", "problem": 30, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51d28e15e4b0d13b04db0d9b"}, {"code": "(fn [x] (map first (filter #(not (= (first %) (second %))) (partition 2 1 [1] x))))", "problem": 30, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "(fn [col]\n  (loop [col col new-col '()]\n    (if (empty? col)\n      \tnew-col\n    \t(recur (rest col)\n               (if (= (last new-col) (first col))\n                 new-col \n                 (concat new-col (list (first col)))))\n     )))", "problem": 30, "user": "50aca92ee4b071b89ef26232"}, {"code": "(fn fn30 [s]\n  (map first (partition-by identity s)))", "problem": 30, "user": "5042bb9ae4b034ff00315d16"}, {"code": "(fn [x] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() x)))", "problem": 30, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn ! [x]\n        (if (empty? x)\n            (empty x)\n            (if (= (first x) (second x))\n                (! (rest x))\n                (cons (first x) (! (rest x)))))\n    )", "problem": 30, "user": "4f88f57ae4b033992c121c73"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5250a13ee4b0541d1855b839"}, {"code": "#(->> (partition-by identity %) (map first))", "problem": 30, "user": "525431dfe4b0541d1855b970"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "524da51ee4b0a16e35cf6df4"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "#(reduce (fn [acc el] \n          (if (= (last acc) el)\n            acc\n            (conj acc el)\n            )\n          ) [] %)", "problem": 30, "user": "5259a16ee4b0cb4875a45ce1"}, {"code": "(fn [s]\n  (reduce (fn [s v] \n    (if (not= v (last s))\n\t  (conj s v)\n      s)) [] s))", "problem": 30, "user": "524ab5f2e4b09eba1c02239d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "525b0b51e4b0cb4875a45d01"}, {"code": "(fn komp [x] (if (empty? x) '() (if (= (first x) (first (rest x)))\n(komp (rest x)) (concat (list (first x)) (komp (rest x))))))", "problem": 30, "user": "52474ec2e4b05ef8e38e6361"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "525a7b9fe4b0cb4875a45cf5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "(fn remove-dups [s]\n  (cond \n   (empty? (rest s)) s\n   (= (first s) (first (rest s))) (remove-dups (rest s))\n   :else (conj (remove-dups (rest s)) (first s))))", "problem": 30, "user": "525aa499e4b0cb4875a45cf7"}, {"code": "(fn [x] (reduce #(if (contains? (conj #{} (first %1)) (first (conj () %2))) %1 (conj %1 %2)) '() (reverse  x)))", "problem": 30, "user": "525de512e4b0cb4875a45d8a"}, {"code": "(fn [xs] \n  (reverse (loop [ret '() xs xs]\n     (if (empty? xs) ret\n       (recur \n          (if (= (first ret) (first xs)) ret (conj ret (first xs)))\n         (rest xs)) ))))", "problem": 30, "user": "523e12bde4b09833704079a2"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "523eb110e4b057c4b7cd0a67"}, {"code": "(fn [li] (filter identity (#(for [x (range (count %))] (if (or (= x 0) (not= (.get (seq %) x) (.get (seq %) (- x 1)))) (.get (seq %) x))) li)))", "problem": 30, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "reduce (fn [coll i] (if (= (last coll) i) coll (conj coll i))) []", "problem": 30, "user": "4f80db02e4b033992c121bf9"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5236cd89e4b0e010857b4e45"}, {"code": "reduce (fn [acc x] (if (= (last acc) x) acc (conj acc x))) []", "problem": 30, "user": "5130cb2ae4b08c712d3fae3b"}, {"code": "(fn [s1]\n\t(reduce \n    \t(fn [x y] (if (= (last x) y) x (conj x y)\n                   ))\n     \t[]\n     \ts1\n    )\n)", "problem": 30, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "(fn compr [n]\n  (loop [x n o []]\n    (if (empty? x)\n      o\n      (recur (rest x)\n             (if (not= (first x) (last o))\n                 (conj o (first x))\n                 o)))))", "problem": 30, "user": "51622fb8e4b009fba0926e3f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn f \n  ([coll] \n    (let [head (first coll)]\n    \t(conj (f head (rest coll)) head)))\n  ([prev coll] \n    (if (empty? coll)\n      ()\n  \t  (let [head (first coll) tail (rest coll)]\n\t\t(if (= head prev)\n          (f head tail)\n          (conj (f head tail) head))))))", "problem": 30, "user": "524e6b68e4b0541d1855b7db"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "(fn pack [x] \n  (if (empty? x) \n     '()\n     (let [firstAdd (take-while #(= (first x) %) x)]\n       (concat (list (first firstAdd)) (pack (drop (count firstAdd) x))))\n     ))", "problem": 30, "user": "525cc137e4b0cb4875a45d46"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52563d02e4b0541d1855ba10"}, {"code": "#(reduce\n  (fn [coll item]\n    (if (= item (last coll))\n      coll\n      (conj coll item)))\n  []\n  %)", "problem": 30, "user": "4e8dd6cb535d65386fec213b"}, {"code": "#(reduce\n\t(fn [xs n]\n      (cond\n       (empty? xs) (vector n)\n       (= n (last xs)) xs\n       true (conj xs n)))\n \t[] %)", "problem": 30, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "(fn cmp [y] ((fn comp [x last] \n  (if (nil? x)\n    '()\n    (if (== (compare (first x) last) 0)\n      (comp (next x) last)\n      (cons (first x) (comp (next x) (first x)))))) y nil))", "problem": 30, "user": "522ff396e4b032bbe3424172"}, {"code": "(fn [coll]\n  (concat\n   (map first (filter (fn [[x y]] (not= x y)) (partition 2 1 coll)))\n   (list (last coll))))", "problem": 30, "user": "505345d9e4b0517ede0d0a06"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "524f213be4b0541d1855b7ff"}, {"code": "reduce #(if (= (peek %) %2) % (conj % %2)) []", "problem": 30, "user": "525efc76e4b0cb4875a45dbd"}, {"code": "(fn rDup[seq]\n  (cond\n   (= 1 (count seq))\n    seq\n   (= (first seq) (second seq))\n    (rDup (rest seq))\n   :else\n    (cons (first seq) (rDup (rest seq)))))", "problem": 30, "user": "525d490ae4b0cb4875a45d70"}, {"code": "(fn foo [x] \n  (map first (filter #(apply not= %) (map list x (cons nil x)))))", "problem": 30, "user": "525bcae9e4b0cb4875a45d30"}, {"code": "(fn [x] (loop [x x\n               last-char \\-\n               result []]\n          (if (empty? x) result\n          (if (= (first x) last-char)\n            (recur (rest x) (first x) result)\n            (recur (rest x) (first x) (conj result (first x)))))))", "problem": 30, "user": "5264301fe4b03e8d9a4a70ca"}, {"code": "#(reverse ( reduce (fn [a b] (if (not= (first a) b) (cons b a) a ) ) [] %))", "problem": 30, "user": "52628bb0e4b03e8d9a4a7089"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "(fn compress [coll]\n  (reduce (fn [coll elem]\n            (if (not= (peek coll) elem)\n              (conj coll elem)\n              coll))\n          []\n          coll))", "problem": 30, "user": "5264b4a9e4b03e8d9a4a70e0"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "525d7090e4b0cb4875a45d7e"}, {"code": "#(let [x (fn [a b] (if (= (last a) b) a (conj a b)))] (reduce x [] %1))", "problem": 30, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn [coll]\n   (reduce\n    (fn [result x]\n      (if (= (last result) x)\n        result\n        (conj result x)))\n    []\n    coll))", "problem": 30, "user": "52090567e4b0e152394d76ed"}, {"code": "(fn\n  [lst]\n  (map first (partition-by identity lst)))", "problem": 30, "user": "4ef7a483535dced4c769f258"}, {"code": "(fn [xs]\n  (map first (partition-by identity xs)))", "problem": 30, "user": "5264383be4b03e8d9a4a70cb"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5012da69e4b0c8732600222d"}, {"code": "reduce (fn [c i] (if (= (last c) i) c (conj c i))) '[]", "problem": 30, "user": "5268f5b4e4b03e8d9a4a71cf"}, {"code": "(fn [xs]\n    (reverse (loop [xs xs list '()]\n      (cond \n       (= (first xs) nil) list\n       (= (first xs) (first list)) (recur (rest xs) list)\n       :else (recur (rest xs) (conj list (first xs)))))))", "problem": 30, "user": "526302eee4b03e8d9a4a70a2"}, {"code": "(fn [collection]\n  (reduce (fn [x y] \n            (if (= (last x) y)\n             x \n             (merge x y))) [] (seq collection)))", "problem": 30, "user": "52616198e4b03e8d9a4a705e"}, {"code": "reduce #(if (= (last %1) %2)\n             %1\n             (conj %1 %2)\n             ) []", "problem": 30, "user": "526143b7e4b03e8d9a4a705a"}, {"code": "#(loop [x % result []]\n   (let [car (first x)\n         l (last result)\n         cdr (rest x)]\n      (if (nil? car)\n        result\n        (if (= car l) (recur cdr result)\n          (recur cdr (conj result car))))))", "problem": 30, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": "(comp reverse #(reduce (fn [l a] (if (not= a (first l)) (cons a l) l)) '() %))", "problem": 30, "user": "5250779ee4b0541d1855b82f"}, {"code": "(fn [l]\n\t(reverse (reduce\n\t\t#(if (= (first %1) %2) %1 (conj %1 %2))\n\t\t'()\n\t\tl\n\t))\n  )", "problem": 30, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn [m]\n  (loop [s m r []]\n    (if (empty? s)\n      r\n      (recur (drop-while #(= % (first s)) s)\n             (conj r (first s))))))", "problem": 30, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn my-compress [coll]\n  (map first (partition-by identity coll))\n)", "problem": 30, "user": "525d44bfe4b0cb4875a45d6d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51dc1202e4b09c47a74ce107"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "512318b6e4b03b44edbed433"}, {"code": "#(reduce (fn [result item]\n           (if (= (last result) item)\n             result\n             (conj result item))) [] %)", "problem": 30, "user": "525a643be4b0cb4875a45cf1"}, {"code": "(fn rep \n\t[s] \n\t(when-let [[x & more] s] \n\t\t(if (= x (first more))\n\t\t\t(rep more)\n\t\t\t(cons x (rep more)))))", "problem": 30, "user": "525873e8e4b0cb4875a45cb2"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ec11b79535dfed6da9c6da6"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "52112be7e4b07aea8afc4f68"}, {"code": "(fn compress [seq]\n  (reduce (fn [vec e] \n    (if (= (peek vec) e) \n      vec \n      (conj vec e)\n    ))\n    []\n    seq\n  ))", "problem": 30, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "(fn f [input & params]\n  (if (nil? params) (f input ()))\n  (let [[output] params]\n    (cond\n      (empty? input) (reverse output)\n      (empty? output) (f (rest input) (cons (first input) output ))\n      (= (first input) (first output)) (f (rest input) output)\n      :default (f (rest input) (cons (first input) output )))))", "problem": 30, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn [x] (reduce (fn [s1 s2] (if (= (last s1) s2) s1 (concat s1 (list s2)))) '() x))", "problem": 30, "user": "5261aebbe4b03e8d9a4a7066"}, {"code": "#(reduce (fn [c i] (if (= (last c) i) c (conj c i))) [] %)", "problem": 30, "user": "526c2340e4b03e8d9a4a7281"}, {"code": "#(map last (partition-by str %))", "problem": 30, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn dedup [s]\n  (if (empty? s)\n    '()\n    (let [r (dedup (rest s))]\n      (if (= (first s) (first r))\n        r\n        (cons (first s) r)))))", "problem": 30, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "#(map first\n      (partition-by identity %))", "problem": 30, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn [coll] (reduce (fn [kept new] (if (= (last kept) new) kept (concat kept [new]))) '() (seq coll)))", "problem": 30, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(partial \n (fn [acc prev coll] \n   (if (nil? coll) \n     (reverse acc) \n     (if (= (first coll) prev) \n       (recur acc prev (next coll)) \n       (recur (conj acc (first coll)) (first coll) (next coll))\n     )\n   )\n ) '() :sentinal)", "problem": 30, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [xs]\n  (reduce\n    (fn [acc x]\n      (if (= x (last acc))\n        acc\n        (conj acc x)))\n    []\n    xs))", "problem": 30, "user": "526e5be8e4b03e8d9a4a731c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "523bde95e4b07becd5be2202"}, {"code": "(fn compress [col]\n  (reduce \n    #(if (= (last %1) %2)\n       %1\n       (conj %1 %2))\n    []\n    col))", "problem": 30, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "#(reduce (fn [a x] (if (= x (peek a)) a (conj a x))) [] %)", "problem": 30, "user": "5260341ee4b03e8d9a4a7034"}, {"code": "(comp (partial map first)\n       (partial partition-by identity))", "problem": 30, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn [s] (reduce (fn [a b] (if (= (last a) b) a (conj a b))) [(first s)] s))", "problem": 30, "user": "52713288e4b03e8d9a4a73e7"}, {"code": "(fn [coll] (map first (partition-by identity coll)))", "problem": 30, "user": "52600f94e4b03e8d9a4a702d"}, {"code": "#(reduce (fn f[acc x] (if (= x (first acc)) acc (conj acc x)  )) '() (reverse %))", "problem": 30, "user": "5271b940e4b03e8d9a4a73fb"}, {"code": "(fn sset\n  ([data] (sset (list (first data)) (rest data)))\n  ([new-data data]\n   (if (empty? data)\n     new-data\n     (if (= (last new-data) (first data))\n       (sset new-data (rest data))\n       (sset (concat new-data (list (first data))) (rest  data))))))", "problem": 30, "user": "52727d52e4b03e8d9a4a7439"}, {"code": "#(reduce (fn [lst x]\n\t\t (cond\n\t\t  (= (last lst) x) lst\n\t\t  :else (concat lst (list x))))\n\t       '() %)", "problem": 30, "user": "52709149e4b03e8d9a4a73b1"}, {"code": "(fn hoge [lst]\n  (if (empty? lst) nil\n    (let [h (first lst) f (partial = h)]\n      (cons (first (take-while f lst)) (hoge (drop-while f lst))))))", "problem": 30, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [seqs]\n  (loop [result (list (first seqs))\n        now (first seqs) \n         others (rest seqs )]\n    (if (empty? others)\n      result\n      (if(= now (first others))\n        (recur result now (rest others))\n        (recur ( concat result (list (first others)) )\n               (first others )\n               (rest others))))))", "problem": 30, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "reduce (fn [a b] (if (= b (last a)) a (concat a [b]))) []", "problem": 30, "user": "51f4d46ee4b0fca5e8b48243"}, {"code": "(fn rem-dup [x]\n  (if (empty? x) nil\n    (if (= (first x) (second x))\n      (rem-dup (rest x))\n      (cons (first x) (rem-dup (rest x))))))", "problem": 30, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "52711255e4b03e8d9a4a73d7"}, {"code": "(fn [s] (reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] (seq s)))", "problem": 30, "user": "526d6968e4b03e8d9a4a72d9"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn [x] (reverse (reduce #(if (not= (first %) %2) (cons %2 %) %) nil x)))", "problem": 30, "user": "527268a5e4b03e8d9a4a7431"}, {"code": "(fn [xs] (conj (map second (filter (fn [[a b]] (not= a b)) (#(map vector % (rest %)) xs))) (first xs)))", "problem": 30, "user": "526bc746e4b03e8d9a4a7271"}, {"code": "(fn [s]\n  (filter (complement nil?) (map (fn [x y] (if (= x y) nil x)) s (concat (drop 1 s) [(gensym)]))))", "problem": 30, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "#(reduce (fn [l x]\n           (if (= x (last l))\n             l\n             (concat l (list x))))\n         '() %)", "problem": 30, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn compress-seq [coll]                                                  \n    (reverse (into '() (map first (partition-by identity coll)))))", "problem": 30, "user": "526397f1e4b03e8d9a4a70b6"}, {"code": "(fn  [n]\n  (map first (partition-by identity n)))", "problem": 30, "user": "5276aa0de4b03e8d9a4a74ea"}, {"code": "(letfn [(f [s i] (if (= (first s) i) s (cons i s)))]\n#(reverse (reduce f [] %)))", "problem": 30, "user": "514f6679e4b0b449e54b8df5"}, {"code": "(fn compress [seq]\n   (map first (partition-by identity seq)))", "problem": 30, "user": "50651de3e4b0b1b6c8b1d85f"}, {"code": "(fn cmprs [x]\n  (reverse (reduce #(if (= %2 (first %1)) %1 (conj %1 %2)) '() x))\n  )", "problem": 30, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52795656e4b03e8d9a4a7534"}, {"code": "(fn a [coll] (mapcat distinct (partition-by identity coll)))", "problem": 30, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "527818f7e4b03e8d9a4a7519"}, {"code": "#(reduce (fn [res x] \n          (if (= x (last res)) \n            res\n            (conj res x)\n            )\n) [] %)", "problem": 30, "user": "4db03885838c48654951d9bd"}, {"code": "( fn [x] ( map first ( partition-by identity x)))", "problem": 30, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "(fn [xs] \n  (let [\n      step (fn step [xs last]\n        (if (first xs)\n          (if (= (first xs) last)\n            (recur (rest xs) last)\n            (cons (first xs) (step (rest xs) (first xs)))\n          )\n          nil\n        )\n      )\n    ] (step xs nil)\n  )\n)", "problem": 30, "user": "52741177e4b03e8d9a4a749b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "526f79aee4b03e8d9a4a736a"}, {"code": "(fn [x] (loop [oc x nc '()] (if (empty? oc) (reverse nc) (recur (drop-while #(= (first oc) %) (rest oc)) (conj nc (first oc))))))", "problem": 30, "user": "527c4071e4b0757a1b17135a"}, {"code": "(fn [l]\n    (cons (first l) (map first (filter #(reduce not= %) (map vector (rest l) l)))))", "problem": 30, "user": "527675cbe4b03e8d9a4a74e2"}, {"code": "(fn \n  [seqs]\n  (reverse (:result (reduce\n                     (fn [m e]\n                       (if (= (:prev m) e) m (assoc m :result (cons e (:result m)) :prev e)))\n                     {}\n                     seqs))))", "problem": 30, "user": "527ed32ce4b0757a1b1713b5"}, {"code": "(fn [xs](reverse (loop [[x & xs] xs\n         ret []]\n    (if x\n      (recur xs (if (= (first ret) x)\n                  ret\n                  (cons x ret)))\n      ret))))", "problem": 30, "user": "527236d4e4b03e8d9a4a741f"}, {"code": "(fn [coll] (map first (partition-by identity coll)))", "problem": 30, "user": "527dc2aee4b0757a1b17138d"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "5262c73fe4b03e8d9a4a7098"}, {"code": "(fn [x]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2))  [] x ))", "problem": 30, "user": "527b9beee4b03e8d9a4a7590"}, {"code": "(fn [lst]\n  (reverse\n   (reduce\n    (fn [s i] (if (= (first s) i) s (conj s i)))\n    '()\n    lst)))", "problem": 30, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn compress[x]\n  ((fn clean[previous, elements, cleaned]\n    (if\n      (nil? previous)\n      (clean (first elements) (rest elements) (list (first elements)))\n      (if\n        (= 0 (count elements))\n        cleaned\n        (if\n          (= previous (first elements))\n          (clean previous (rest elements) cleaned)\n          (clean (first elements) (rest elements) (concat cleaned [(first elements)]))\n        )\n      )\n    )\n  ) nil x nil)\n)", "problem": 30, "user": "52624348e4b03e8d9a4a707e"}, {"code": "#(keep-indexed (fn[i el](if-not (= el \n                                  (get % (inc i))\n                                 )\n                         el)\n               ) % \n)", "problem": 30, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "#(reduce (fn [l i] (if (= (last l) i) l (conj l i))) [] %)", "problem": 30, "user": "527b8881e4b03e8d9a4a758e"}, {"code": "(fn clean [x] (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() x))", "problem": 30, "user": "525fea5ae4b03e8d9a4a7026"}, {"code": "(fn cmprs [x]\n  (when-let [[f & r] (seq x)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "51bfc1f0e4b0e49ef9037dd4"}, {"code": "(fn [list] (map first (partition-by identity list)))", "problem": 30, "user": "5277da8ee4b03e8d9a4a7514"}, {"code": "reduce (fn [a b] (if (not= (last a) b) (into a (vector b)) a  )) []", "problem": 30, "user": "52810225e4b0757a1b171418"}, {"code": "#(loop [result []\n\t\tremaining %]\n\t\t(let [[current & rest] remaining]\n\t\t(if (nil? current)\n\t\t\tresult\n\t\t\t(if (not= current (last result))\n\t\t\t\t(recur (conj result current) rest)\n\t\t\t\t(recur result rest)))))", "problem": 30, "user": "528147b6e4b0757a1b171425"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52808559e4b0757a1b171403"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5284de3de4b0239c8a67ade3"}, {"code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "problem": 30, "user": "519ef784e4b087743fad2198"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5272ccf1e4b03e8d9a4a7450"}, {"code": "(fn [x] (->> x (partition-by identity) (map first)))", "problem": 30, "user": "525d95b1e4b0cb4875a45d81"}, {"code": "(fn my-collapse [xs]\n  (reduce\n    (fn copy-if-diff [ys y]\n      (if (=(last ys) y)\n        ys\n        (conj ys y)\n      )\n    )\n    [] xs\n  )\n)", "problem": 30, "user": "5255bf1ee4b0541d1855b9f1"}, {"code": "(fn [x] \n   (map first (partition-by identity x)))", "problem": 30, "user": "51d8f711e4b02ceefd947748"}, {"code": "(fn [x] (reduce #(if (not= %2 (last %)) (conj % %2) %) [(first x)] (seq x)))", "problem": 30, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "(fn [s]\n  (filter identity (map #(if (not= %1 %2) %1) s (cons nil s))))", "problem": 30, "user": "51e38568e4b0c611d6113e43"}, {"code": "(fn compress [y] (reverse (reduce #(if (coll? %1) (if (distinct? (first %1) %2) (conj %1 %2) %1) (list %1)) () y)))", "problem": 30, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "522a01ade4b0590a43906ced"}, {"code": "(fn [x]\n  (reduce #(if (not= (last %1) %2)\n    \t      (concat %1 (list %2))\n   \t          %1)\n       \t   ()\n           (seq x)))", "problem": 30, "user": "52890634e4b0239c8a67ae5e"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "502f6c56e4b0842eb223d8bb"}, {"code": "(fn [c] (reduce \n                    (fn [prevThing nextThing] \n                      (if (= (last prevThing) nextThing) \n                        prevThing \n                        (concat prevThing [nextThing])))\n                     '() c))", "problem": 30, "user": "4fbd6210e4b081705acca303"}, {"code": "(fn [x] (conj (map last (filter #(apply not= %) (partition 2 1 x))) (first x)))", "problem": 30, "user": "52808897e4b0757a1b171404"}, {"code": "(fn [s]\n  (let [pairs (filter #(not= (first %) (second %)) (partition 2 1 s))]\n    (concat (map first pairs) (list (second (last pairs))))))", "problem": 30, "user": "52745629e4b03e8d9a4a74a0"}, {"code": "(fn\n  [coll]\n  (reduce (fn\n            [res x]\n            (if (= (last res) x)\n              res\n              (conj res x))) [] coll))", "problem": 30, "user": "5289bba9e4b0239c8a67ae69"}, {"code": "(fn t[x] (\n\tlet [l (if (= (type \"test\") (type x))\n    (vec x)\n    x)]\n          (\n    if (= 1 (count l))\n    l\n    (if (= (first l) (first (rest l))) \n    (t (rest l))\n    (cons (first l) (t (rest l))) )\n         )))", "problem": 30, "user": "4f03c039535dcb61093f6b5e"}, {"code": "(fn dup [x] (cond (empty? x) x :else (let [r (dup (rest x))] (cond (= (first x) (first r)) r :else (cons (first x) r)))))", "problem": 30, "user": "528b9efee4b0239c8a67aea0"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "528d1094e4b0239c8a67aebe"}, {"code": "reduce #(if (= (peek %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn remove-dups [coll]\n  (let [coll (seq coll)]\n    (loop [x (first coll)\n           y (second coll)\n           rest (drop 2 coll)\n           result []]\n      (if (nil? x)\n        result\n        (let [eq (= x y)]\n          (recur (if eq x y)\n                 (first rest)\n                 (drop 1 rest)\n                 (if (not eq) (conj result x)\n                              result)))))))", "problem": 30, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "528a791ae4b0239c8a67ae77"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "528e95efe4b0239c8a67aee2"}, {"code": "(fn r\n  ([[l & ls]]\n   (if l\n     (r ls [] l)\n     []))\n  ([[l & ls] a c]\n   (if l\n     (if (= l c)\n       (recur ls a c)\n       (recur ls (conj a c) l))\n     (conj a c))))", "problem": 30, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn [input]\n  (map first (partition-by (fn [x] x) input)))", "problem": 30, "user": "528bba38e4b0239c8a67aea9"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5290257ae4b0239c8a67af03"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52446511e4b0d8acf9ed6a9a"}, {"code": "(fn [a]\n  (reverse ((fn b [x xx]\n     (if (= x ())\n       xx\n       (if (= (first x) (second x)) (b (rest x) xx)  (b (rest x) (conj xx (first x))))\n       )\n    ) a ())))", "problem": 30, "user": "517e12e3e4b0fcc7c5d37d3c"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn [coll] (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (= seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) f)))))\n                     xs seen)))]\n      (step coll nil)))", "problem": 30, "user": "529242bee4b0239c8a67af28"}, {"code": "(fn [x] \n    (reduce (fn [a b] \n              (if-not (= (a (dec (count a))) b)\n                (conj a b) a)\n              )\n              (vector (first x)) (vec (rest x)))\n    )", "problem": 30, "user": "528ce039e4b0239c8a67aebc"}, {"code": "#(map first (filter (fn [[a b]] (not (= a b))) \n                    (partition 2 1 [(gensym)] %)))", "problem": 30, "user": "5294e44de4b02ebb4ef75016"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(comp (partial map first) (partial partition-by identity))", "problem": 30, "user": "52950ab6e4b02ebb4ef7501a"}, {"code": "reduce #(if (= (last %1) %2)\n          %1\n          (conj %1 %2)) []", "problem": 30, "user": "523f1245e4b01c266ffa7f95"}, {"code": "(fn [s]\n  (reduce (fn [l a]\n            (if (= a (peek l))\n              l\n              (conj l a))) [] s))", "problem": 30, "user": "4f3656d1e4b0e243712b1ec9"}, {"code": "#(reduce (fn [l r] (if (= (peek l) r) l (conj l r))) [] %)", "problem": 30, "user": "5287f34ee4b0239c8a67ae43"}, {"code": "(fn [s]\n  (merge (map first ( map set (partition-by identity s))))\n  )", "problem": 30, "user": "52737333e4b03e8d9a4a747f"}, {"code": "(fn [s]\n  (loop [old-s s\n         new-s []]\n    (if (empty? old-s)\n      new-s\n      (recur (rest old-s) (if (= (last new-s) (first old-s))\n                            new-s\n                            (conj new-s (first old-s)))))))", "problem": 30, "user": "52963cc7e4b02ebb4ef7502d"}, {"code": "#(reduce (fn [acc x]\n             (if (= (last acc) x)\n               acc\n               (conj acc x)\n               )\n             ) [] %)", "problem": 30, "user": "528f82d8e4b0239c8a67aef4"}, {"code": "#(map first (filter (fn [t] (not= (first t) (last t))) (partition 2 1 [nil] %)))", "problem": 30, "user": "527094f0e4b03e8d9a4a73b3"}, {"code": "(fn [coll]\n  (let [x (first coll) xs (rest coll)]\n    (cons x (map second (filter (fn [[a b]] (not (= a b))) (map (fn [a b] [a b]) coll xs))))))", "problem": 30, "user": "52974f66e4b02ebb4ef75040"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "529670c1e4b02ebb4ef75030"}, {"code": "(fn compress [x] (if (< 0 (count x))\n                     ((fn my-conj [coll y] (if (= (first coll) y)\n                                            coll\n                                             (conj coll y))) (compress (rest x)) (first x))\n                     '()))", "problem": 30, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "reduce (fn [acc x]\n         (if (= (last acc) x) \n           acc\n           (concat acc (list x))))\n\t\t'()", "problem": 30, "user": "52976262e4b02ebb4ef75041"}, {"code": "(fn ff [x] (if (= 1 (count x)) x (if (= (first x) (second x))  (ff(rest x)) (concat (list (first x)) (ff(rest x)) )   )))", "problem": 30, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5298bd13e4b02ebb4ef75063"}, {"code": "(fn[x] (reduce #(if (not= %2 (last %1)) (conj %1 %2) %1) [] x))", "problem": 30, "user": "528c381ce4b0239c8a67aeb2"}, {"code": "#(let [x (first %)]\n   (loop [xs (next %) cur x res [x]]\n     (if (nil? xs) res\n       (let [x (first xs)]\n         (if (= cur x)\n           (recur (next xs) cur res)\n           (recur (next xs) x (conj res x)))))))", "problem": 30, "user": "52990271e4b02ebb4ef7506d"}, {"code": "#(map last (partition-by str %))", "problem": 30, "user": "51ad244fe4b09397d510977f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5295fbb7e4b02ebb4ef75029"}, {"code": ";(fn [coll]\n;  (loop [c coll\n;         acc '()]\n;    (cond\n;     (empty? c) (reverse acc)\n;     (= (first c) (first acc)) (recur (next c) acc)\n;     :else (recur (next c) (conj acc (first c))))))\n#(map first (partition-by identity %))", "problem": 30, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "(fn my-compress [col]\n  (reduce (fn [a b]\n            (let [rslt a]\n              (if-not (= (peek rslt) b)\n                (conj rslt b)\n                rslt))) [] col))", "problem": 30, "user": "4f6e7073e4b07046d9f4efd8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51c214bce4b0d204dbe2ca1c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn [x] (reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] x))", "problem": 30, "user": "50294c28e4b0b33e9bf6fdef"}, {"code": ";(fn ff [coll] (when-let [[f & r] (seq coll)] (if (= f (first r)) (ff r) (cons f (ff r)))))\n(fn [data] (reduce #(if (= (peek %1) %2) %1 (conj %1 %2)) [] data))", "problem": 30, "user": "509fe759e4b08df8156e9e43"}, {"code": "(fn [n] (reverse(loop[s n acc '()] (if(empty? s) acc (if(= (first s)(second s)) (recur (rest s) acc)(recur (rest s) (conj acc (first s))))))))", "problem": 30, "user": "5294b190e4b02ebb4ef75011"}, {"code": "(fn uniq [xs] (if (< (count xs) 2) xs (if (= (first xs) (second xs)) (uniq (rest xs)) (concat (list (first xs)) (uniq (rest xs))))))", "problem": 30, "user": "529dc421e4b04e0c58e87b80"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "51e05dfae4b01188f0627543"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4e72187b535d5021c1a8965b"}, {"code": "(fn [ls]\n  (->> ls\n   (reduce (fn [acc item] (if (= item (first acc))\n                            acc\n                            (cons item acc)))\n           '())\n   (reverse)))", "problem": 30, "user": "529e2383e4b04e0c58e87b8b"}, {"code": "#((fn compr [s prev]\n  (if (empty? s)\n    (cons prev nil)\n  \t(if (= prev (first s))\n  \t  (compr (rest s) prev)\n   \t  (cons prev (compr (rest s) (first s)))))) % (first %))", "problem": 30, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "5290ffaee4b0239c8a67af10"}, {"code": "(fn [s] (reduce (fn [v x] (if (= (last v) x) v (conj v x))) [] s))", "problem": 30, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "#(reduce (fn [r v] (println r v) (if (= v (last r)) r (conj r v))) [] %)", "problem": 30, "user": "52323a4ae4b035af41902a79"}, {"code": "(fn [arr] (map first (partition-by identity arr)))", "problem": 30, "user": "525b12b1e4b0cb4875a45d04"}, {"code": "(fn [coll] (map first (partition-by identity coll)))", "problem": 30, "user": "528e1c88e4b0239c8a67aed1"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "529d292fe4b04e0c58e87b74"}, {"code": "(fn comp-seq [xs]\n  (map first (partition-by identity xs)))", "problem": 30, "user": "52a04f0ee4b04e0c58e87bc1"}, {"code": "(fn f [[x & xs]]\n  (when x\n    (cons x (f (drop-while #{x} xs)))))", "problem": 30, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "(fn compress [s]\n  \"remove consecutive dupes from a seq\"\n  (loop [s s\n        compressed []]\n    (if (empty? s)\n      compressed\n      (recur\n        (rest s)\n        (if (= (last compressed) (first s))\n          compressed\n          (conj compressed (first s)))))))", "problem": 30, "user": "52561be5e4b0541d1855ba08"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4fe91fa2e4b0547ebccb2440"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5298cc88e4b02ebb4ef75065"}, {"code": "(fn [s] (reduce (fn [x y] (if (= (last x) y) x (conj x y))) '[]s))", "problem": 30, "user": "5226f8e9e4b04e78ff2e199a"}, {"code": "(fn [s]\n  (reverse (reduce \n   (fn [b c] \n     (if (= (first b) c)\n            b\n       (cons c b)))\n   \"\" s)))", "problem": 30, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(partial reduce (fn [a v] (if (= (last a) v) a (conj a v))) [])", "problem": 30, "user": "4f1b120f535d64f603146476"}, {"code": "(fn [v]\n  (reduce\n    #(if (= (peek %1) %2)\n       %1\n       (conj %1 %2))\n   \t[]\n    v))", "problem": 30, "user": "529e8ba9e4b04e0c58e87b99"}, {"code": "(fn [items] (remove nil? (map-indexed (fn [n l] (cond (not= l (get items (+ n 1))) l)) (seq items))))", "problem": 30, "user": "52a52e59e4b0c58976d9abe4"}, {"code": "(fn rem-dups [s]\n  (let [v (vec s)\n        len (count v)\n        ]\n    (loop [i 1 acc [(get v 0)]]\n      (if (>= i len)\n        acc\n        (recur (inc i) (if (= (v i) (v (dec i))) acc (conj acc (v i))))\n        )\n      )\n    )\n  )", "problem": 30, "user": "529a73bde4b02ebb4ef75096"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn [x]\n  (loop [f (first (seq x)), r (rest (seq x)), out '()]\n    (if (nil? f)\n      (reverse out)\n      (if (= f (first r))\n        (recur (first r) (rest r) out)\n        (recur (first r) (rest r) (conj out f))))))", "problem": 30, "user": "52a0fa82e4b04e0c58e87bd1"}, {"code": "(fn [s]\n  (loop [s s result []]\n    (if (empty? s)\n      result\n      (if (= (first s) (last result))\n        (recur (rest s) result)\n        (recur (rest s) (conj result (first s)))))))", "problem": 30, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "(fn [x] \n  (loop [xs x px nil ret (vector)] \n    (let [cx (first xs)]\n      (if (empty? xs) \n        ret \n        (recur (rest xs) cx (if (not= cx px) (conj ret cx) ret))))))", "problem": 30, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52a503e4e4b0c58976d9abe1"}, {"code": "(fn f [x]\n  (reduce \n   #(if (= (last %) %2) % (conj % %2))\n   []\n   x\n   )\n)", "problem": 30, "user": "528cf6f7e4b0239c8a67aebd"}, {"code": "(fn compress [coll]\n  (loop [lst (rest coll)\n         acc (conj [] (first coll))\n         prev (first coll)]\n\n    (if (empty? lst)\n      (if (char? (first acc))\n        (apply str acc)\n        acc)\n      (if (not (= (first lst) prev))\n        (recur (rest lst) (conj acc (first lst)) (first lst))\n        (recur (rest lst) acc prev)))))", "problem": 30, "user": "52a6ed15e4b0c58976d9ac0a"}, {"code": "(fn [s]\n   (if (string? s) \n     (apply str\n     \t(concat\n       \t\t(map first\n         \t\t(filter #(not= (first %) (last %))\n           \t\t\t(partition 2 1 s)))\n       \t\t(list (last s))))\n  \t (concat\n       \t\t(map first\n         \t\t(filter #(not= (first %) (last %))\n           \t\t\t(partition 2 1 s)))\n       \t\t(list (last s)))))", "problem": 30, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn [coll]\n  (letfn [(rec [c last result]\n               (if (empty? c)\n                 result\n                 (rec (rest c) (first c)\n                      (if (= (first c) last)\n                        result\n                        (conj result (first c))))))]\n    (rec coll (gensym) [])))", "problem": 30, "user": "5298c83de4b02ebb4ef75064"}, {"code": "(partial \n #(if (empty? %2) (reverse %1) \n    (recur \n     (if (= (first %2) (first %1)) %1 \n       (conj %1 (first %2))) (rest %2))) '())", "problem": 30, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52a5f1e6e4b0c58976d9abf4"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "reduce (fn [x y]\n         (if (= (last x) y) x (conj x y))) []", "problem": 30, "user": "52a5e784e4b0c58976d9abf3"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51929214e4b08962174cf74c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5254ef3de4b0541d1855b9b8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "(fn foo [coll]\n  (if (next coll)\n    (if (= (first coll) (second coll))\n      (foo (next coll))\n      (cons (first coll) (foo (next coll))))\n    coll))", "problem": 30, "user": "52a55adee4b0c58976d9abe7"}, {"code": ";distinct\n;#(first (partition-by identity %))\n#(map first (partition-by identity %))", "problem": 30, "user": "52a28e1ce4b04e0c58e87bf0"}, {"code": "(comp (partial map first) (partial partition-by identity))", "problem": 30, "user": "52aac2fce4b0c58976d9ac6c"}, {"code": "(fn compress [xs]\n  (cond\n    (empty? xs)\n      []\n    (= 1 (count xs))\n      [(first xs)]\n    :else\n      (if (= (first xs) (second xs))\n        (compress (rest xs)) \n        (cons (first xs) (compress (rest xs))))))", "problem": 30, "user": "52a779fce4b0c58976d9ac1a"}, {"code": "#((fn filter-dup [elem coll]\n      (if-let [s (seq coll)]\n        (if (= elem (first s))\n          (filter-dup (first s) (rest s))\n          (cons elem (filter-dup (first s) (rest s)))\n          )\n        (list elem))\n      ) (first %) %)", "problem": 30, "user": "5291ede5e4b0239c8a67af1e"}, {"code": "#(map first(partition-by identity %))", "problem": 30, "user": "52ae1634e4b0c58976d9ac9f"}, {"code": "#(reduce (fn[x y] (if (=(last x) y) x (conj x y))) [] %)", "problem": 30, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "(fn compress\n  [s]\n  (let [s (seq s)]\n    (if (nil? (first (rest s)))\n      s\n      (if (= (first s) (first (rest s)))\n        (compress (rest s))\n        (cons (first s) (compress (rest s)))))))", "problem": 30, "user": "5263c44fe4b03e8d9a4a70b8"}, {"code": "(fn compress-seq\n  [coll]\n  (loop [coll coll\n         res []]\n    (if (not (nil? (seq coll)))\n      (let [head (first coll)]\n        (if (not= head (last res))\n          (recur (rest coll) (conj res head))\n          (recur (rest coll) res)))\n      res)))", "problem": 30, "user": "51937eb3e4b04df54c098022"}, {"code": "(fn [arg]\n   (loop  [values arg result []]\n     (if (empty? values)\n          result\n          (recur (rest values) (if (= (first values) (last result)) result (conj result (first values))))\n     )\n   )\n)", "problem": 30, "user": "52ac41fee4b0c58976d9ac85"}, {"code": "(fn [coll] (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() coll))", "problem": 30, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52aec666e4b0c58976d9acb1"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52b11742e4b0c58976d9acd5"}, {"code": "(fn f [x]\n  (map #(last %)\n       (remove #(= (first %) true)\n               (map (fn t [f l] [f l]) (cons false (map = x (rest x))) x))))", "problem": 30, "user": "52b0323ee4b0c58976d9acc6"}, {"code": ";;(fn rm-consecutive-dups\n;;  [s]\n;;  (reverse (loop [c (vec s)\n;;         result nil]\n;;    ;(println \"c:\" c \", result:\" result)\n;;    (if (empty? c)\n;;      result\n;;      (recur (rest c)\n;;             (if (= (first result) (first c))\n;;               result\n;;               (conj result (first c))))))))\n\n#(->> % (partition-by identity) (map first))", "problem": 30, "user": "524f4256e4b0541d1855b808"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "(fn [s] (reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) '() (seq s))))", "problem": 30, "user": "527c040be4b03e8d9a4a75a7"}, {"code": "(fn [l]\n  (loop [rv [] prev nil ll l]\n    (if (empty? ll)\n      rv\n      (let [cur (first ll) r (rest ll)]\n        (if (= prev cur)\n          (recur rv prev r)\n          (recur (concat rv [cur]) cur r))))))", "problem": 30, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "52b1d41ce4b0c58976d9ace6"}, {"code": "(fn [xs] (map first (partition-by identity xs)))", "problem": 30, "user": "52a8ca0fe4b0c58976d9ac36"}, {"code": "#(->> % (partition-by identity) (map first))", "problem": 30, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "(fn [s]\n  (loop [[head & tail] s\n         result '()]\n    (if (nil? head)\n      (reverse result)\n      (if (= head (first tail))\n        (recur tail result)\n        (recur tail (conj result head))))))", "problem": 30, "user": "52b15bf2e4b0c58976d9acdd"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52614bc1e4b03e8d9a4a705c"}, {"code": "(fn [x] ((fn [t a] (if (empty? t) a (if (= (last a) (first t)) (recur (rest t) a) (recur (rest t) (conj a (first t)))))) x [(first x)]))", "problem": 30, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn remove-dup [l]\n  ((fn remove-dup-inner [rst lst acc]\n    (cond\n      (empty? rst) acc\n      (= lst (first rst)) (remove-dup-inner (rest rst) lst acc)\n      :else (remove-dup-inner \n            (rest rst) (first rst) (conj acc (first rst)))))\n   l \n   nil\n   []))", "problem": 30, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52a1c6cee4b04e0c58e87be1"}, {"code": "(fn [s]\n  (loop [c [] x s las nil]\n    (if (empty? x) c\n      (recur (if (= las (first x)) c (conj c (first x)))\n             (rest x)\n             (first x)))))", "problem": 30, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn [xs]\n  (loop [[x & xs] xs\n         prev nil\n         res []]\n    (let [res (if (= x prev) res (conj res x))]\n      (if (empty? xs)\n        res\n        (recur xs x res)))))", "problem": 30, "user": "4fc3a72ae4b081705acca342"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn nodupes\n  ([xs] (nodupes xs nil))\n  ([xs inv]\n     (cond\n      (empty? xs) '()\n      (= inv (first xs)) (nodupes (rest xs) inv)\n      :else (conj (nodupes (rest xs) (first xs)) (first xs)))))", "problem": 30, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "(fn compress-seq[x]((fn inner-comp-seq[xin output](if (first xin)\n                                                      (if (= (last output) (first xin)) (inner-comp-seq (rest xin) output) (inner-comp-seq (rest xin) (concat output (list (first xin)))))\n                                                      output\n                                                      )) \n                       (seq x) (list)\n                       ))", "problem": 30, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn [coll ]\n   (map first\n        (filter (fn [[e f]] (not= e f))\n                (#(map vector % (cons nil %)) coll))))", "problem": 30, "user": "52a9154ee4b0c58976d9ac3b"}, {"code": "(fn [xs]\n       (reduce\n         #(if (= (last %1) %2)\n            %1\n            (conj %1 %2))\n         [] xs))", "problem": 30, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn nmlz [coll] (loop [x nil result [] a coll ] (if (empty? a) result (recur (first a) (if (= (first a) x) result (conj result (first a))) (rest a) ))))", "problem": 30, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "52b02329e4b0c58976d9acc5"}, {"code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "problem": 30, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "#( loop [result [] in % f (first %) s (second %)]\n   (if (= (count in) 1)\n     (concat result (list f))\n     (recur \n      (if (= f s) result (concat result (list f))) \n      (rest in)\n      (first (rest in))\n      (second (rest in))\n     )\n  )\n)", "problem": 30, "user": "528f4462e4b0239c8a67aef0"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "(fn test [ls] \n  (:a (reduce \n   (fn [{acc :a lt :l} i] \n       (if (not= i lt) \n\t   {:a (conj acc i) :l i}\n\t   {:a acc :l i})) { :a [(first ls)] :l (first ls)} (rest ls))))", "problem": 30, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "(fn [s]\n  (loop [cs (seq s)\n         acc []]\n    (cond\n     (empty? cs) acc\n     (empty? acc) (recur (rest cs) (conj acc (first cs)))\n     (= (first cs) (last acc)) (recur (rest cs) acc)\n     :else (recur (rest cs) (conj acc (first cs))))))", "problem": 30, "user": "52b8af15e4b07a9af57922b5"}, {"code": "(fn compress [xs] (if (seq xs)\n                      (cons (first xs)\n                            (compress (drop-while (partial = (first xs)) xs)))\n                      (empty xs)))", "problem": 30, "user": "4fa38e3fe4b081705acca190"}, {"code": "(fn dedup [x]\n  (loop [x x result []]\n    (if (empty? x)\n      result\n      (if (= (last result) (first x))\n        (recur (rest x) result)\n        (recur (rest x) (conj result (first x)))))))", "problem": 30, "user": "527fd663e4b0757a1b1713de"}, {"code": "(fn scompress\n  [aseq]\n  (let [s (seq aseq)]\n    (reduce #(if (not= (last %) %2)\n               (conj % %2)\n               %) [] s)))", "problem": 30, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (cmprs r)\n      (cons f (cmprs r)))))", "problem": 30, "user": "52b2d16ae4b0c58976d9acf8"}, {"code": "(fn [x]\n  (reverse (reduce (fn [accum y]\n          (if (= (first accum) y)\n              accum\n              (cons y accum))) [] x))\n)", "problem": 30, "user": "52470d42e4b05ef8e38e6350"}, {"code": "(fn [str]\n  (loop [current (vec str) current-char nil result []]\n    (if (= 0 (count current))\n      (if (instance? String str)\n        (clojure.string/join \"\" result)\n        result)\n      (recur\n        (drop 1 current)\n        (first current)\n        (if (= current-char (first current))\n          result\n          (conj result (first current)))))))", "problem": 30, "user": "52b94f15e4b07a9af57922ba"}, {"code": "(fn cl [x]\n  (when-let [[f & r] (seq x)]\n    (if (= f (first r))\n      (cl r)\n      (cons f (cl r)))))", "problem": 30, "user": "52b9a836e4b07a9af57922c0"}, {"code": "(fn [s]\n  (let [same-as-last (fn [v c]\n                       (= (last v) c))\n        reducer (fn reducer [r s]\n                  (if (empty? s)\n                    r\n                    (if (same-as-last r (first s))\n                      (reducer r (rest s))\n                      (reducer (conj r (first s)) (rest s)))))]\n    (reducer [] s)))", "problem": 30, "user": "527c166de4b03e8d9a4a75b3"}, {"code": "(fn  chop [s]\n  (if (empty? s)\n    []\n    (if (= (first s) (second s))\n      (chop (rest s))\n      (cons (first s) (chop (rest s)))\n      ))\n)", "problem": 30, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn [xs]\n  (loop [l xs r []]\n    (case [(= (last r) (first l)) (empty? l)]\n      [false true ] r\n      [true  true ] r\n      [true  false] (recur (rest l) r)\n      [false false] (recur (rest l) (conj r (first l))))))", "problem": 30, "user": "52b9c62ce4b07a9af57922c3"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52bb123ae4b07a9af57922de"}, {"code": "(fn [x] (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] x))", "problem": 30, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52a00651e4b04e0c58e87bbb"}, {"code": "(fn [l] \n   (map second\n        (filter #(apply distinct? %)\n                (map list \n                     (conj (seq l) :a) \n                     l)\n                )\n        )\n  )", "problem": 30, "user": "52bb27fee4b07a9af57922df"}, {"code": "(fn[coll]    \n     (reduce \n       #(if-not \n          (= %2 (last %1)) \n          (conj %1 %2) \n          %1) \n      []\n      coll))", "problem": 30, "user": "4fc50525e4b081705acca370"}, {"code": "(fn [arg] (let [subf (fn [l p]\n                   (if \n                     (= (last l) p)\n                     l\n                     (concat l [p])))]\n             (reduce subf [] arg)))", "problem": 30, "user": "4f7683dae4b0fbe0118ec56f"}, {"code": "(fn my-compress\n  ([s] (my-compress s []))\n  ([s r] (if (empty? s)\n           r\n           (if (= (last r) (first s))\n             (recur (rest s) r)\n             (recur (rest s) (concat r [(first s)]))\n             )\n           )\n   )\n  )", "problem": 30, "user": "52bc6f5ee4b07a9af57922f6"}, {"code": "(fn [s] (map first (partition-by #(identity %) s)))", "problem": 30, "user": "52bb81d7e4b07a9af57922e8"}, {"code": "#(map first (partition-by (fn [x] x) %))", "problem": 30, "user": "52b80827e4b0c58976d9ad56"}, {"code": "(fn [d] (reduce (fn [pre i]\n           (if (= (last pre) i)  pre\n                  (conj pre i))) [] d))", "problem": 30, "user": "52bbe6e1e4b07a9af57922ef"}, {"code": "(fn compress [x] (map first (partition-by identity x)))", "problem": 30, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "#(loop [x % y [(first %)]]\n\t(if (empty? x) y \n\t\t(recur (rest x) (if (not= (first x) (last y)) (conj y (first x)) y ))))", "problem": 30, "user": "52b79d8ee4b0c58976d9ad50"}, {"code": "(fn [xs] (map first (partition-by identity xs)))", "problem": 30, "user": "52baea85e4b07a9af57922d9"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52bdb689e4b07a9af5792306"}, {"code": "(fn compress [input] \n  (apply (cond (string? input) str true list)\n         ((fn cmpr [seq]\n            (reduce (fn drop-matches [f s] (if (= (last f) (first s)) (concat f (rest s)) (concat f s)))\n                    seq))\n          (map list input))))", "problem": 30, "user": "52bebdbfe4b07a9af5792326"}, {"code": "(fn [xs]\n   (reduce (fn [acc, x]\n             (if (= x (last acc))\n               acc\n               (concat acc (list x))))\n           '()\n           xs))", "problem": 30, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "(fn dedupe ([xs] (dedupe [] xs))\n  \t\t   ([newxs xs] (if (empty? xs)\n                           newxs\n                           (if (= (last newxs) (first xs))\n                               (dedupe newxs (next xs))\n                               (dedupe (conj newxs (first xs)) (next xs))\n                           )\n                       )\n           )\n  )", "problem": 30, "user": "52bf8e35e4b07a9af579233a"}, {"code": "(fn [s]\n         (loop [s s\n                r '()]\n           (if-not (seq s)\n             (reverse r)\n             (recur (drop-while #(= % (first s)) s) (conj r (first s))))))", "problem": 30, "user": "52be5d55e4b07a9af579231e"}, {"code": "#(map first (partition-by str %))", "problem": 30, "user": "52bf29fde4b07a9af579232e"}, {"code": "reduce #(if (not (= (last %1) %2) ) (conj %1 %2) %1) []", "problem": 30, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52a23af1e4b04e0c58e87beb"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "(fn dedup \n    ([in] (dedup (rest in) (cond (vector? in) [(first in)], (string? in) (str (first in)), (seq? in) (list (first in)))))\n    ([in out] (if (empty? in) out (if (= (first in) (last out)) (recur (rest in) out) (recur (rest in) (cond (vector? out) (vec (conj out (first in))), (string? out) (apply str (concat out (str (first in)))), true (concat out (list (first in)))))))))", "problem": 30, "user": "52bdf6bde4b07a9af579230d"}, {"code": "(fn compress[a-seq]\n \t((fn do-compress [el rest-seq]\n        (if (first rest-seq)\n            (let [next-el (first rest-seq) tail-seq (rest rest-seq)]\n            \t(if (= el next-el)\n                    (do-compress el tail-seq)\n                    (cons el (do-compress next-el tail-seq))\n                )\n            )\n            (list el)\n         )\n     ) (first a-seq) (rest a-seq))\n )", "problem": 30, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn [xs]\n  (reduce (fn [acc el]\n            (if (= el (first acc)) acc (cons el acc)))\n          ()\n          (reverse xs)))", "problem": 30, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn [arg] (reduce concat (map distinct (partition-by identity arg))))", "problem": 30, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "reduce (fn [xs x] (if (not= x (last xs)) (conj xs x) xs)) []", "problem": 30, "user": "505b0431e4b021387fb8985e"}, {"code": "reduce\n    #(if (not= (last %1) %2)\n       (conj %1 %2)\n       %1)\n    []", "problem": 30, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "(fn [coll] \n   (reduce (fn [l x] \n             (if (= x (last l))\n               l \n               (conj l x)))\n           [] coll))", "problem": 30, "user": "50dcb2f4e4b02e6ac9592c91"}, {"code": "(fn [ls]\n  (let [dup (fn dup [ls last-rep]\n              (cond (empty? ls) '()\n                    (= (first ls) last-rep) (dup (rest ls) last-rep)\n                    :else (conj (dup (rest ls) (first ls)) (first ls))))]\n    (dup ls nil)))", "problem": 30, "user": "52aa4a67e4b0c58976d9ac62"}, {"code": "(fn p30\n  [s]\n  (reduce\n    (fn [all x] (if (= (last all) x)\n                  all\n                  (conj all x)))\n    []\n    s))", "problem": 30, "user": "52bb4be0e4b07a9af57922e2"}, {"code": "(fn [coll] (reduce (fn [l x] (if (= x (last l)) l (conj l x))) [] coll))", "problem": 30, "user": "529952a4e4b02ebb4ef75081"}, {"code": "reduce (fn [c f] (if (= (last c) f) c (conj c f))) []", "problem": 30, "user": "5167d60de4b0c5a4140a3098"}, {"code": "(fn f\n  ([s] (f s (first s) (list (first s))))\n  ([s curr res]\n   (if (empty? s)\n     res\n     (let [x (first s) r (rest s)]\n      (if (= x curr)\n        (f r curr res)\n        (f r x (concat res [x]))\n      )\n     )\n   )\n  )\n)", "problem": 30, "user": "52bf936ee4b07a9af579233b"}, {"code": "(fn remove-duplicates [collection]\n  (loop \n    [collection collection \n     new-list ()]\n    (if (empty? collection)\n      (reverse new-list)\n      (if (= (first (rest collection)) (first collection))\n        (recur (rest collection) new-list)\n        (recur (rest collection) (conj new-list (first collection)))\n        )\n      )\n    )\n  )", "problem": 30, "user": "52be23dbe4b07a9af5792316"}, {"code": "#(reduce (fn [coll n] (if (= (last coll) n)\n                        coll\n                        (conj coll n))) [] %)", "problem": 30, "user": "508147cde4b0a20aab17b93a"}, {"code": "(fn solution [s]\n  (\n    (fn filt [x s]\n      (cond\n        (empty? s) (list x)\n        (= (first s) x) (filt x (rest s))\n        :else (cons x (solution s))\n      )\n    )\n    (first s)\n    (rest s)\n  )\n)", "problem": 30, "user": "52b49aebe4b0c58976d9ad2b"}, {"code": "reduce\n           (fn [xs e] \n                        (if-not (= (last xs) e)  (conj xs e) xs  )\n                      \n           )\n           []", "problem": 30, "user": "52c35afce4b07a9af579238c"}, {"code": "(fn remove-duplicates [seq]\n  (cond (empty? seq) seq\n        (= (first seq) (second seq))\n        (remove-duplicates (rest seq))\n        :else (cons (first seq) (remove-duplicates (rest seq)))))", "problem": 30, "user": "52c4d327e4b0c2d177d620e6"}, {"code": "#(map first (filter (fn [[s t]] (not= s t)) (partition 2 1 [] %)))", "problem": 30, "user": "52c00263e4b07a9af579233f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "#(reverse\n   (reduce (fn [l e]\n             (if-not (= (first l) e) (conj l e)\n                     l)) () %))", "problem": 30, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn c [s]\n  (when-let [[x & xs] (seq s)]\n    (if (= x (first xs)) \n      (c xs)\n      (cons x (c xs)))))", "problem": 30, "user": "51eab308e4b0f1f103a0d150"}, {"code": "(fn nodups [s] (map first (partition-by identity s)))", "problem": 30, "user": "52bf0116e4b07a9af5792328"}, {"code": "#(for [[x x'] (partition 2 1 (repeat nil) %)\n       :when (not= x x')]\n   x)", "problem": 30, "user": "52be58d7e4b07a9af579231d"}, {"code": "(fn [coll]\n  (reduce (fn [xs x]\n            (cond\n             (= x (last xs)) xs\n             :else (conj xs x))\n            ) [] coll))", "problem": 30, "user": "52c61564e4b0c2d177d62109"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52c580c2e4b0c2d177d620f5"}, {"code": "(fn compress-seq [s]\n            (map first (partition-by identity s)))", "problem": 30, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "(fn un-dob [xx] \n  (list* \n   (reduce \n    \n    (fn [a x]\n      (if (= (last a) x) \n        a (conj a x)))\n    \n    [] \n    \n    (vec xx))))", "problem": 30, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "4f47d84fe4b0d56e7bb92bc3"}, {"code": "(fn com ([s] (com s nil)) ([s last] (if (empty? s) s (let [h (first s) comt (com (rest s) h)] (if (= h last) comt (cons h comt ))))))", "problem": 30, "user": "52c69672e4b0c2d177d62110"}, {"code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "problem": 30, "user": "52c73194e4b0c2d177d6211e"}, {"code": "(fn removedup \n        ([s] (removedup (vec (rest s)) [(first s)]))\n        ([v1 v2] (if (empty? v1)\n                   v2\n                   (let [lst (first (take-last 1 v2))\n                         fst (first v1)]\n                     (if (= lst fst)\n                       (removedup (rest v1) v2)\n                       (removedup (rest v1) (conj v2 fst)))))))", "problem": 30, "user": "52c58561e4b0c2d177d620f8"}, {"code": "(fn [coll] (reduce (fn [acc val] (if (= (last acc) val) acc (conj acc val))) [] (seq coll)))", "problem": 30, "user": "52c1f404e4b07a9af5792370"}, {"code": "(fn compress [lst]\n    (reduce \n        (fn [acc ele] \n            (if (not= ele (last acc)) \n                (conj acc ele)\n                acc\n            )\n        ) [(first lst)] (rest lst)\n    )\n)", "problem": 30, "user": "52c17e42e4b07a9af5792367"}, {"code": "(fn [x] \n  (loop [a x b nil c []]\n    (if (empty? a)\n      c\n      (let [z (first a)]\n        (if (= z b)\n          (recur (rest a) b c)\n          (recur (rest a) z (conj c z)))))))", "problem": 30, "user": "52c81954e4b0c2d177d6212e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "528ba1d9e4b0239c8a67aea2"}, {"code": "#(map first (partition-by identity (seq %)))", "problem": 30, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn [s] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "52c804dee4b0c2d177d6212b"}, {"code": "(fn [a]\n  (map first (partition-by identity a)))", "problem": 30, "user": "52c58440e4b0c2d177d620f7"}, {"code": "(fn [vctr]\n      (let [part (partition-by identity vctr)]\n           (loop [cnt 0 nw-part nil]\n                 (if (= cnt (count part))\n                     (reverse nw-part)\n                     (recur (inc cnt) (conj nw-part (nth (nth part cnt) 0)))\n                     ))))", "problem": 30, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "(fn remove-dup [s]\n  (cond \n   (empty? s) s\n   (= 1 (count s)) s\n   (= (first s) (second s)) (remove-dup (next s))\n   :else (cons (first s) (remove-dup (next s)))))", "problem": 30, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn [x]\n  (loop [result (vector (first x)) y (rest x)]\n    (if (empty? y) result\n        (if (= (first y) (last result))\n          (recur result (rest y))\n          (recur (conj result (first y)) (rest y))))))", "problem": 30, "user": "52a32b52e4b04e0c58e87bfc"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "508f97c0e4b0ea685a20f768"}, {"code": "#(reduce (fn [acc x] (if (= x (last acc)) acc (conj acc x))) [] (vec %))", "problem": 30, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "(fn [x] (reduce (fn [a b] (if (not= (last a) b) (conj a b) a)) [] x))", "problem": 30, "user": "52c1bd29e4b07a9af579236a"}, {"code": "#(map last (filter (fn [[a b]] (not= a b)) (partition 2 1 (cons nil %))))", "problem": 30, "user": "52c6f1f3e4b0c2d177d62117"}, {"code": "(fn [coll]\n  (loop [coll coll last nil acc []]\n    (if (seq coll)\n      (recur (rest coll)\n             (first coll)\n             (if (= last (first coll))\n               acc\n               (conj acc (first coll))))\n      acc)))", "problem": 30, "user": "52cc582ae4b07d0d72b27362"}, {"code": "#(->> % (partition-by identity) (map first))", "problem": 30, "user": "52c60945e4b0c2d177d62108"}, {"code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "problem": 30, "user": "52cb6bb0e4b07d0d72b2734c"}, {"code": "(fn foo [x]\n\t(if (<= (count x) 1)\n\t\tx\n\t\t(if (not= (nth x 0) (nth x 1))\n\t\t\t(concat (list (first x)) (foo (rest x)))\n\t\t\t(foo (rest x))\n\t\t)\n\t)\n)", "problem": 30, "user": "52cc92e9e4b07d0d72b27368"}, {"code": "(fn dedup [xs]\n  (if (empty? xs)\n    ()\n  \t(if (= (first xs) (first (rest xs)))\n      (dedup (rest xs))\n      (cons (first xs) (dedup (rest xs)))\n      )\n    )\n  )", "problem": 30, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn red [coll]\n  (if-not (second coll)\n    coll\n    (if (= (first coll) (second coll))\n      (red (rest coll))\n      (conj (red (rest coll)) (first coll)))))", "problem": 30, "user": "52cca65be4b07d0d72b2736b"}, {"code": "#(map first ((fn [y] (filter (fn [x] (not (apply = x))) y)) ((fn [x] (partition 2 1 '(()) x)) %)))", "problem": 30, "user": "52cc85abe4b07d0d72b27367"}, {"code": "(fn [x]\n  (reduce (fn [a i]\n            (if (= (last a) i) a (concat a [i]))) () x))", "problem": 30, "user": "52ce2aace4b07d0d72b2738b"}, {"code": "#(reduce (fn [s c] (cond (= (last s) c) s true (conj s c))) (vector) %)", "problem": 30, "user": "52caeb25e4b071a8d36bd3e7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52828298e4b0757a1b17145b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5238ca2de4b0d705d026eef6"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52ced458e4b07d0d72b27394"}, {"code": "reduce (fn [coll b] (if-not (= (last coll) b) (conj coll b) coll)) []", "problem": 30, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "#(let [last-seen (atom ::nil)\n       non-consective (fn [acc x] (if (= @last-seen x) acc (conj acc (reset! last-seen x))))]\n   (reduce non-consective [] %))", "problem": 30, "user": "52d0902ee4b07d0d72b273bd"}, {"code": "#(reverse (reduce (fn [coll, val]\n                   (if (= (first coll) val)\n                     coll\n                     (conj coll val)\n                    )\n                   )\n                 '()\n                 %1\n                 ))", "problem": 30, "user": "52b2a819e4b0c58976d9acf1"}, {"code": "( fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "problem": 30, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "#(cons (first %) (map (fn [[x _]] x) (filter (fn [[x y]] (not= x y)) (map vector (rest %) %))))", "problem": 30, "user": "52cfe059e4b07d0d72b273af"}, {"code": "(fn compress [sq]\n  (reverse\n  (reduce \n   (fn [res, x]\n    (if (= (first res) x)\n      res\n      (cons x res)\n      )\n    ) \n   (list (first sq))\n   (rest sq))))", "problem": 30, "user": "5094057fe4b097f48cc38593"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52d07cc5e4b07d0d72b273bb"}, {"code": "(fn s30 [a-seq]\n   (reverse(reduce (fn [acc elt]\n             (if (= (first acc) elt) acc (conj acc elt))) '() a-seq)))", "problem": 30, "user": "52c3b3e5e4b0c2d177d620c8"}, {"code": "#(reverse \n  (reduce (fn [a b] (if (= (first a) b) a (cons b a))) (list (first %)) %))", "problem": 30, "user": "52ce165fe4b07d0d72b27388"}, {"code": "reduce #(if (= (last %1) %2) \n          %1 \n          (conj %1 %2)) \n[]", "problem": 30, "user": "52d23a39e4b099d49816f0a6"}, {"code": "(fn [s] \n\t((fn track [index prev acc]\n        (if (< index (count s))\n          (let [current (nth s index) nextIndex (+ index 1)]\n              (if (not= current prev) \n              \t(track nextIndex current (conj acc current))\n              \t(track nextIndex current acc)\n              )\n          )\n          acc\n        )\n    ) 0 nil [])\n)", "problem": 30, "user": "52c10ad2e4b07a9af579235c"}, {"code": ";(fn [s] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))\n#(map first (partition-by identity %))", "problem": 30, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn [coll]\n            (reverse (reduce (fn [acc e]\n                    \t(if (= (first acc) e) \n                          acc\n                      \t(cons e acc))) [] coll)))", "problem": 30, "user": "52ccc2bde4b07d0d72b27371"}, {"code": "reduce #(if (= (last %1) %2)\n          %1\n          (conj %1 %2)) []", "problem": 30, "user": "52ce4cafe4b07d0d72b2738e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52d39acce4b099d49816f0c7"}, {"code": "#(loop [re (rest %) prev (first %) result []]\n   (if (seq re)\n     (if (= (first re) prev)\n       (recur (rest re) prev result)\n       (recur (rest re) (first re) (conj result prev)))\n     (seq (conj result prev))))", "problem": 30, "user": "4e68ed35535d8ccf87e9fe92"}, {"code": "(fn [x]\n   ((fn [c, s, res] \n      (if (nil? (first c))\n        res\n        (recur (next c) \n               (first c) \n               (if (= (first c) s)\n                 res\n                 (concat res (conj '() (first c))))))) \n    x\n    (first x)\n    (conj '() (first x))))", "problem": 30, "user": "52cdc539e4b07d0d72b2737e"}, {"code": "#(loop [x % acc []]\n    (cond\n     (empty? x) acc\n     (= (first x) (last acc)) (recur (rest x) acc)\n     :else (recur (rest x) (conj acc (first x)))))", "problem": 30, "user": "4ed45563535d10e5ff6f52c9"}, {"code": "#(reduce (fn [sq el]\n           (if (= (last sq) el)\n             sq\n             (conj sq el))) [] %)", "problem": 30, "user": "51b41150e4b0f094dd986fac"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52cd1ed0e4b07d0d72b27377"}, {"code": "(fn compress [coll]\n  \"Removes consecutive duplicates from a sequence.\"\n  (loop [prev (first coll) [head & tail] (seq coll) result []]\n    (if (nil? head)\n      (seq (conj result prev))\n      (if (= prev head)\n        (recur prev tail result)\n        (recur head tail (conj result prev))))))", "problem": 30, "user": "527aba40e4b03e8d9a4a7565"}, {"code": "#(map first (partition-by identity (seq %)))", "problem": 30, "user": "52d340ebe4b099d49816f0c1"}, {"code": "(fn [x] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] x))", "problem": 30, "user": "52ce8648e4b07d0d72b27390"}, {"code": "(fn [xs] (map first (partition-by identity xs)))", "problem": 30, "user": "52d3f666e4b09f7907dd1327"}, {"code": "(fn myfn [coll]\n  (when-let [[fir & res] (seq coll)]\n    (if (= fir (first res))\n      (myfn res)\n      (cons fir (myfn res)))))", "problem": 30, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "reduce #(if(not= (last %1) %2)(conj %1 %2)(vec %1)) []", "problem": 30, "user": "52ce4c32e4b07d0d72b2738d"}, {"code": "(fn meh [seq]\n  (loop [prev (first seq) result (vector (first seq)) left (rest seq)]\n    (if-not (empty? left)\n      (if (= prev (first left))\n        (recur prev result (rest left))\n        (recur (first left) (conj result (first left)) (rest left)))\n      result)))", "problem": 30, "user": "52cefb7ee4b07d0d72b27397"}, {"code": "reduce\n #(if (= (last %1) %2)\n    %1\n    (conj %1 %2)) []", "problem": 30, "user": "52d469c8e4b09f7907dd1330"}, {"code": "(fn\n  [s]\n  (mapcat distinct (partition-by identity s)))", "problem": 30, "user": "4f541874e4b0a7574ea717d8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52cdec62e4b07d0d72b27382"}, {"code": "#(map first(partition-by identity %))", "problem": 30, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "(fn remove-duplicates [coll]\n  (reduce (fn [acc el]\n            (if (= (last acc) el)\n              acc\n              (concat acc (list el)))) [] coll))", "problem": 30, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "#(map last (partition-by list %))", "problem": 30, "user": "52d10680e4b07d0d72b273c3"}, {"code": "#(loop [old %\n         new '[]]\n    (if (empty? old)\n      (if (string? %)\n        (apply str new)\n        new)\n      (recur (rest old) (if (not= (first old) (last new))\n                          (conj new (first old))\n                          new))))", "problem": 30, "user": "52d6120ee4b09f7907dd134c"}, {"code": "reduce (fn [acc i] (if (and (not (empty? acc)) (= (nth acc (dec (count acc))) i)) acc(concat acc [i]))) []", "problem": 30, "user": "52d02380e4b07d0d72b273b7"}, {"code": "#(reverse\n (reduce\n (fn [state x]\n   (if-not\n     (= (first state) x) \n     (conj state x)\n     state))\n '()\n (seq %)))", "problem": 30, "user": "52cc4fd6e4b07d0d72b27360"}, {"code": "#(reduce (fn [a v] (if (= (last a) v) a (conj a v))) [] %1)", "problem": 30, "user": "50e8cac5e4b0ebbe794eb7ef"}, {"code": "(fn [xs]\n  (reduce (fn [acc x]\n            (if (= x (last acc)) acc (conj acc x)))\n          [] xs))", "problem": 30, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn f [x]\n  (cond\n   (or (= (count x) 0) (= (count x) 1)) x\n   (= (first x) (second x)) (f (rest x))\n   true (conj (f (rest x)) (first x))))", "problem": 30, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "(fn [s]\n           (map first (partition-by identity s)))", "problem": 30, "user": "52cee992e4b07d0d72b27395"}, {"code": "(fn f [prev l] (if (= l ()) () (if (= prev (first l)) (f prev (rest l)) (conj (f (first l) (rest l)) (first l))))) nil", "problem": 30, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52cf084ce4b07d0d72b27399"}, {"code": "reduce #(if (not= (last %) %2) (conj % %2) %) []", "problem": 30, "user": "52cf5450e4b07d0d72b273a4"}, {"code": "#(reduce (fn [a x] (if (= x (peek a)) a (conj a x))) [] %)", "problem": 30, "user": "52d87808e4b09f7907dd1396"}, {"code": "#(loop [x 0 result []] (if (= x (count %)) result (if (= (nth % x) (last result)) (recur (+ x 1) result) (recur (+ x 1) (conj result (nth % x))))))", "problem": 30, "user": "52d4acc8e4b09f7907dd1333"}, {"code": "(fn compressSeq [x]\n  (reverse (reduce\n     (fn [x, y]\n       (if (= (first x) y)\n         x\n         (cons y x)\n     ))\n     []\n     x\n   ))\n)", "problem": 30, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "(fn rd [l] (if (= (count l) 1) (list (first l)) (if (= (first l) (second l)) (rd (rest l)) (conj (rd (rest l)) (first l)))))", "problem": 30, "user": "52d92f13e4b09f7907dd13a2"}, {"code": "#(reduce (fn[x y](if (= y (last x)) x (conj x y)))  '[] %1)", "problem": 30, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) nil", "problem": 30, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn compress [s]\n  (if (empty? s)\n    s\n    (let [compressed (compress (rest s))]\n      (if (= (first s) (first compressed))\n        compressed\n        (cons (first s) compressed)))))", "problem": 30, "user": "52d51535e4b09f7907dd133a"}, {"code": "(fn [x] \n  (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] x))", "problem": 30, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn compr\n    [s]\n    (let [tail (drop-while #(= (first s) %) s)]\n      (if (seq s)\n        (cons (first s) (compr tail))\n        [])))", "problem": 30, "user": "52a7634ae4b0c58976d9ac16"}, {"code": "#(reduce\n(fn red [ar el]\n  (prn el ar (last ar))\n  (if (not= el (last ar))\n    (conj ar el)\n    ar))\n[] %1)", "problem": 30, "user": "50c2fbebe4b00e537d00253c"}, {"code": "(fn removeconseq [x]\n  (reduce\n    (fn [y z]\n      (if (= (last y) z)\n        y\n        (reverse (conj (reverse y) z))))\n    '()\n    (seq x)))", "problem": 30, "user": "52dad8bde4b09f7907dd13be"}, {"code": "(fn [coll]\n  (reduce (fn [l v]\n            (if (= v (last l))\n              l\n              (conj l v))) [] coll))", "problem": 30, "user": "52c884a2e4b0c2d177d62136"}, {"code": "(fn [y]\n   (filter (fn[x](not (nil? x))) ((fn [x]\n   (loop [curr (first x)\n          next (rest x)\n          result []]\n     (if (empty? next)\n       (conj result curr)\n       (recur (first next) \n              (rest next)\n              (conj result \n                    (#(if-not (= %1 %2) %1) curr (first next)))))))\n                  \n y)))", "problem": 30, "user": "529c6995e4b04e0c58e87b61"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52c1cc8be4b07a9af579236b"}, {"code": "(fn compress\n  [value]\n  (when-let [[f & r] (seq value)]\n    (if (= f (first r))\n      (compress r)\n      (cons f (compress r)))))", "problem": 30, "user": "52daf558e4b09f7907dd13c1"}, {"code": "(fn [coll]\n  (map first \n       (filter #(apply distinct? %) \n               (partition-all 2 1 coll))))", "problem": 30, "user": "52b94e26e4b07a9af57922b9"}, {"code": "(fn [w] (reverse (reduce #(if (not(= (first %1) %2)) (cons %2 %1) %1) '() w)))", "problem": 30, "user": "5224cf82e4b01819a2de42ef"}, {"code": "(fn compress [x] (if (= (count x) 1)  x (if (= (first x) (second x)) (compress (rest x)) (cons (first x) (compress (rest x))))))", "problem": 30, "user": "52dcd378e4b09f7907dd13d6"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52d00a05e4b07d0d72b273b5"}, {"code": "(fn [xs]\n  (let [drop-dups (fn [xs x]\n                    (if (= x (last xs))\n                      xs\n                      (conj xs x)))]\n    (reduce drop-dups [] xs)))", "problem": 30, "user": "52cca96ae4b07d0d72b2736e"}, {"code": "(fn [coll]\n  (second (reduce (fn [[prev res] cur]\n            (if (= prev cur)\n              [cur res]\n              [cur (conj res cur)]))\n          [nil []]\n          coll)))", "problem": 30, "user": "4f942227e4b0dcca54ed6cbe"}, {"code": "reduce #(if (=(last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "52d66152e4b09f7907dd1357"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52a3c66ce4b04e0c58e87c04"}, {"code": "(fn [s]\n  (let [vec-out (:acc\n                (reduce (fn [{:keys [prev acc] :as all} i]\n                        (if (= prev i)\n                          all\n                          {:prev i :acc (conj acc i)}))\n                      {:prev nil :acc []}\n                      s))]\n    (if (every? #(char? %) vec-out)\n      (apply str vec-out)\n      vec-out)))", "problem": 30, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "#(reduce (fn [s n] (if-not (= (last s) n) (conj s n) s)) [] %)", "problem": 30, "user": "521d709ae4b050d5da0427ef"}, {"code": "(fn [s]\n   (reduce (fn [p c] \n             (if (not= (last p) c) (conj p c) p)) [] s))", "problem": 30, "user": "52dde81fe4b09f7907dd13eb"}, {"code": "(fn [s] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "52c1ede2e4b07a9af579236d"}, {"code": "(fn cmpr\n   [coll]\n   (when-let [[f & r] (seq coll)]\n     (if (= f (first r))\n       (cmpr r)\n       (cons f (cmpr r)))))", "problem": 30, "user": "51ea4e35e4b0f1f103a0d148"}, {"code": "(fn dedup [values]\n  (let [[x & xs] values]\n    (if (empty? xs)\n      (list x)\n      (if (= x (first xs))\n        (dedup xs)\n        (cons x (dedup xs))))))", "problem": 30, "user": "52deb735e4b09f7907dd13f7"}, {"code": "(fn de-dupe [coll] (loop [to-compress (seq coll)\n                          compressed '()]\n                      (if (first to-compress)\n                        (recur (next to-compress) (if (= (first to-compress) (last compressed))\n                                                    compressed\n                                                    (concat compressed (seq [(first to-compress)]))))\n                        compressed)))", "problem": 30, "user": "52cb19abe4b07d0d72b27348"}, {"code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []\n;#(map first (partition-by identity %))", "problem": 30, "user": "52df232fe4b09f7907dd13fc"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50ee68fce4b06330c1f87c59"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51e3a549e4b0c611d6113e47"}, {"code": "(fn killdups [a]\n  (if (< (count a) 2) a\n    (let [ft (take 2 a)]\n      (if (= (first ft) (second ft))\n        (killdups (conj (killdups (rest (rest a))) (first a)))\n        (conj (killdups (rest a)) (first a))))))", "problem": 30, "user": "52d6889ae4b09f7907dd1361"}, {"code": "#(reduce \n (fn[x y] (if (= (last x) y) x (conj x y) ))\n []\n %\n)", "problem": 30, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "(fn compress [s]\n  (loop [i 1\n         result `(~(first s))]\n    (cond\n     (>= i (count s)) result\n     (= (nth s i) (nth s (dec i)))\n     \t(recur (inc i) result)\n     :else (recur (inc i) (concat result [(nth s i)]))\n     ))\n  )", "problem": 30, "user": "52c8a8b9e4b0c2d177d62139"}, {"code": "reduce (fn f [s x] (if (= (last s) x) s (concat s (repeat 1 x)))) '()", "problem": 30, "user": "52e295fae4b09f7907dd1437"}, {"code": "(fn [thing] (reduce #(if (= (last %) %2) % (conj % %2)) [] thing))", "problem": 30, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "52e32d55e4b09f7907dd143e"}, {"code": "#(loop [x % y nil z '[]] (if (empty? x) z (recur (rest x) (first x) (if-not (= (first x) y) (conj z (first x)) z))))", "problem": 30, "user": "52e48632e4b09f7907dd1450"}, {"code": "reduce #(if(= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "52e4cc2ee4b09f7907dd1455"}, {"code": "(fn test1[x]\n  (loop [col x result []]\n    (if (empty? col) result\n    (recur (rest col) (if (= (first (reverse result)) (first col)) result (conj result (first col))))\n    )))", "problem": 30, "user": "52d36f60e4b099d49816f0c2"}, {"code": "(fn compress [col]\n  (letfn [(do-compress [res col]\n                       (println col)\n                       (if (empty? col)\n                         res\n                         (let [lst (first res) [fst & tail] col]\n                           (if (= lst fst)\n                             (do-compress res tail)\n                             (do-compress (conj res fst) tail)))))]\n    (reverse (do-compress (list (first col)) (rest col)))))", "problem": 30, "user": "51f8e057e4b09be9c177e53d"}, {"code": "(fn [x] (reduce #(if (= (last %) %2) % (conj % %2) ) [] x))", "problem": 30, "user": "52c7f036e4b0c2d177d62126"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52e4361fe4b09f7907dd144d"}, {"code": "(fn [s] (reduce #(if (= %2 (last %)) % (conj % %2)) [] s))", "problem": 30, "user": "52d6a9c2e4b09f7907dd1365"}, {"code": "(fn compr [xs]\n  (if (or (empty? xs) (empty? (rest xs)))\n    (seq xs)\n    (let [ys (compr (rest xs))\n          y  (first ys)\n          x  (first xs)]\n      (if (= x y)\n        ys\n        (conj ys x)))))", "problem": 30, "user": "52e41c22e4b09f7907dd144b"}, {"code": "(fn [li]\r\n\r\n  (loop [li li ret []] \r\n    (if (= 0 (count li))\r\n    ret\r\n    (if (= (peek ret) (first li))\r\n      (recur (rest li) ret)\r\n      (recur (rest li) (conj ret (first li)))\r\n    )\r\n    )\r\n  )\r\n)", "problem": 30, "user": "513caa36e4b0b86ece9f3229"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn compr [x]\n  (when-let [ [f & r ] x ]\n    (if (= f (first r))\n      (compr r)\n      (cons f (compr r))\n    )\n  )\n)", "problem": 30, "user": "52b9c5e8e4b07a9af57922c2"}, {"code": "(fn [sq] (map first (partition-by identity sq)))", "problem": 30, "user": "52e276d9e4b09f7907dd1436"}, {"code": "x", "problem": 30, "user": "52e635b3e4b09f7907dd146f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52e0e646e4b09f7907dd1416"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51f2a491e4b0210f90e74553"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52ad68f5e4b0c58976d9ac94"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52e614b8e4b09f7907dd1469"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn [a] (map first (partition-by identity a)))", "problem": 30, "user": "51910da7e4b0f8ef0be96bf9"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52d8eb78e4b09f7907dd139d"}, {"code": "#(loop [coll (seq %) end []]\n   (if (seq coll)\n     (if (= (first coll) (last end))\n       (recur (next coll) end)\n       (recur (next coll) (conj end (first coll))))\n     (seq end)))", "problem": 30, "user": "52dfe1d2e4b09f7907dd1406"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "52cd093fe4b07d0d72b27376"}, {"code": "(fn [s] (reverse (letfn [(inner [newseq oldseq] (if  (empty? oldseq) newseq (if (= (first newseq) (first oldseq)) (inner newseq (rest oldseq)) (inner (conj newseq (first oldseq)) (rest oldseq)))))] (inner '() s))))", "problem": 30, "user": "52e75667e4b09f7907dd1485"}, {"code": "(fn dupremover [lst]\n  (apply concat '() (map set (partition-by identity lst))))", "problem": 30, "user": "52e16139e4b09f7907dd141f"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "52d83c2ce4b09f7907dd138d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52e544d3e4b09f7907dd145e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52b0ec23e4b0c58976d9acd1"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn [coll] (reduce #(if (not= (first %1) %2) (conj %1 %2) %1) () (reverse coll)))", "problem": 30, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn [c]\n  (map first (partition-by identity c))\n)", "problem": 30, "user": "52ecb1efe4b0705949c44454"}, {"code": "(fn [whatever]\n  (loop [resultado []\n         lista whatever]\n    (if (empty? lista)\n      resultado\n      (if (= (last resultado) (first lista))\n        (recur resultado (rest lista))\n        (recur (conj resultado (first lista)) (rest lista))))))", "problem": 30, "user": "52bdd135e4b07a9af579230a"}, {"code": "(fn flat [coll]\n                     (when-let [[a & b] (seq coll)]                       \n                        (if (= a (first b))\n                          (flat b)\n                          (cons a (flat b)))\n                          ))", "problem": 30, "user": "52ec4322e4b0705949c44451"}, {"code": "(fn [x]\n    (map first (partition-by identity x)))", "problem": 30, "user": "52d7f9a8e4b09f7907dd1381"}, {"code": "reduce #(if (= (last %) %2)\n          %\n          (conj % %2)) []", "problem": 30, "user": "529223cbe4b0239c8a67af26"}, {"code": "(fn [coll]\n  (loop [result [] coll coll]\n    (if (zero? (count coll))\n       result\n        (if (= (last result) (first coll))\n          (recur result (rest coll))\n          (recur (conj result (first coll)) (rest coll))))))", "problem": 30, "user": "4fb99483e4b081705acca2da"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52f07ccee4b05e3f0be25edf"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52eff3e8e4b05e3f0be25ed7"}, {"code": "(fn [xs]\n  (if (empty? xs) \n    '()\n    (loop [ys (rest xs) x (first xs) zs (list (first xs))]\n      (if (empty? ys)\n        zs\n        (if (= (first ys) x)\n          (recur (rest ys) x zs)\n          (recur (rest ys) (first ys) (concat zs (list (first ys)))))))))", "problem": 30, "user": "52d660eae4b09f7907dd1356"}, {"code": "(fn compress [s]\n  (if (< (count s) 2) \n    s  \n    (if (= (first s) (second s))\n      (compress (cons (first s) (rest (rest s))))\n      (cons (first s) (compress (rest s))))))", "problem": 30, "user": "52ec1dfbe4b0705949c4444b"}, {"code": "(fn comp [[x & xs]] (if (empty? xs) [x] (if (= x (first xs)) (comp xs) (cons x (comp xs)))))", "problem": 30, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "52430d3ce4b076204b44faa5"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50f53694e4b057d4c52de881"}, {"code": "#(reduce (fn [fst sec](if (not= (last fst) sec) (conj fst sec) fst)) [] %)", "problem": 30, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn [l] \n  (loop [lst l acc '()]\n    (if (empty? lst)\n      (reverse acc)\n      (recur (rest lst) (if-not (= (first lst) (second lst)) \n                          (cons (first lst) acc)\n                          acc)))))", "problem": 30, "user": "51bd255ce4b0df1216cefd94"}, {"code": "(fn my-comp [a-seq]\n  (loop [acc [(first a-seq)]\n         the-rest (rest a-seq)]\n    (if (empty? the-rest) \n      acc\n      (let [next-char (first the-rest)\n            new-acc (if (= (last acc) next-char) \n                    acc\n                    (conj acc (first the-rest))) ]\n        (recur new-acc (rest the-rest) )\n    ))))", "problem": 30, "user": "52ee46e5e4b05e3f0be25ec5"}, {"code": "(fn rem-conseq [sq]\n        (mapcat #(if (= %1 %2)\n                     []\n                   [%1])\n                sq\n                (concat (rest sq) [nil])))", "problem": 30, "user": "52f3ee17e4b05e3f0be25f19"}, {"code": "#(mapcat distinct (partition-by identity %))", "problem": 30, "user": "52f1bc81e4b05e3f0be25eef"}, {"code": "(fn [s] (if (< (count s) 2)\n            s\n            ((fn f [c s]\n                (if (empty? s)\n                    (cons c s)\n                    (let [[h & t] s]\n                         (if (= c h)\n                             (f c t)\n                             (cons c (f h t)))))) (first s) (rest s))))", "problem": 30, "user": "52dfc89be4b09f7907dd1405"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn foo [x](cond (not (seq x )) x\n                   (= (first x) (first (rest x)))  (foo (rest x))\n                   :else (cons (first x) (foo (rest x)))))", "problem": 30, "user": "52f5eefbe4b09b582c12c9cb"}, {"code": "(fn [input]\n  (reduce #(if-not (= %2 (last %1)) \n             (concat %1 (list %2)) \n             %1) \n          '() \n          input))", "problem": 30, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "(fn [x]\n  (loop [r []\n         arg x]\n    (if (empty? arg)\n      \t(if (or (list? x) (string? x)) (apply str r) r)\n      \t(recur (if (= (last r) (first arg)) r (conj r (first arg)))\n               (rest arg)))))", "problem": 30, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "#(let [x %\n              y (filter identity\n                        (for [i (range (dec (count x)))]\n                             (if (not (= (nth x i) (nth x (inc i))))\n                                 (nth x i))))]\n(if (= (last x) (last y)) y (concat y [(last x)])))", "problem": 30, "user": "51f2b8f1e4b0210f90e74556"}, {"code": "(fn [xs]\n   (loop [[x & more] (seq xs)\n          state nil\n          r []]\n     (if (nil? x)\n       r\n       (if (not= x state)\n         (recur more x (conj r x))\n         (recur more state r)))))", "problem": 30, "user": "4ff78679e4b0678c553fc392"}, {"code": "(fn compress [l]\n  (reduce (fn [soFar elem] \n            (if (= (last soFar) elem) \n              soFar\n              (concat soFar [elem]))) [] l))", "problem": 30, "user": "4fe49706e4b0e8f79898feb7"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn r\n  ([xs] (r (first xs) (next xs)))\n  ([c xs] (lazy-seq (if (seq xs)\n\t\t      (if (= c (first xs)) (r c (next xs)) (cons c (r (first xs) (next xs))))\n\t\t      (cons c nil)))))", "problem": 30, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52e161e8e4b09f7907dd1420"}, {"code": "(fn[a]( reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() a))", "problem": 30, "user": "52e807b3e4b09f7907dd1490"}, {"code": "(fn compress [x] \n               (cond\n                 (empty? x) (empty x)\n                 (= (first x) (second x)) (compress (rest x)) \n                 :else (cons (first x) (compress (rest x)))))", "problem": 30, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "reduce (fn [x y] (if (not (nil? x)) (if (= (last x) y) x (conj x y)) [y])) nil", "problem": 30, "user": "52eee533e4b05e3f0be25ecb"}, {"code": "#(reduce (fn [a b] (let [l (last a)] (if (= l b) a (conj (vec a) b)))) [] %)", "problem": 30, "user": "52f89ac8e4b047fd55836fd7"}, {"code": "(fn unique [c]\n  (reverse (reduce\n    (fn [acc e]\n      (cond\n       (empty? acc) (conj acc e)\n       (= (first acc) e) acc\n       :else (conj acc e))) '() c)))", "problem": 30, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "(fn [xs]\n  (map last (filter #(not= (first %) (second %)) (map vector (concat [nil] xs) xs))))", "problem": 30, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "(fn [sequence] (map first (partition-by identity sequence)))", "problem": 30, "user": "52f09d3ce4b05e3f0be25ee3"}, {"code": "(fn compacter [x] \n   (if (empty? (rest x))\n     x\n     (if (= (first x) (second x))\n       (compacter (rest x))\n       (conj (compacter (rest x)) (first x)))))", "problem": 30, "user": "4feacba7e4b0140c20fb9c0e"}, {"code": "#(loop [x %\n        y ()]\n   (if (empty? x)\n     (reverse y)\n     (if (= (first x) (first y))\n       (recur (rest x) y)\n       (recur (rest x) (conj y (first x))))))", "problem": 30, "user": "52f685eae4b047fd55836fb8"}, {"code": "(fn [x] \n  (reduce \n    #(if (= (last %1) %2) %1 (conj %1 %2)) \n    [] \n    x))", "problem": 30, "user": "529dfc6de4b04e0c58e87b8a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52bacfa8e4b07a9af57922d6"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52efc98de4b05e3f0be25ed2"}, {"code": "#(map first (partition-by identity %1))", "problem": 30, "user": "4f1c9652535d64f603146483"}, {"code": "(fn compress-seq [s]\n            (map first (partition-by identity s)))", "problem": 30, "user": "52e980b3e4b09f7907dd14af"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5279cb1ae4b03e8d9a4a753f"}, {"code": "(fn [l] (reverse (reduce (fn [a b] (if (= (first a) b)\n                   a\n                   (conj a b))) '() l)))", "problem": 30, "user": "52f304b4e4b05e3f0be25f07"}, {"code": "#(loop [inp % out []]\n   (if (empty? inp)\n     out \n     (if (not= (first inp) (last out)) \n       (recur (rest inp) (conj out (first inp)))\n       (recur (rest inp) out)\n     )\n   )\n )", "problem": 30, "user": "5176afd2e4b085adf681d889"}, {"code": "#(loop [col %1\n        acc []\n        lel nil]\n   (cond\n    (empty? col) acc\n    (= (first col) lel) (recur (rest col) acc lel)\n    :else (recur (rest col) (conj acc (first col)) (first col))))", "problem": 30, "user": "52fc89b2e4b047fd55837019"}, {"code": "(fn [x] (let [lst (reverse (reduce #(if (= (first %1) %2)\n             %1\n             (cons %2 %1)) [] x))]\n    (if (= (type (first lst)) (type \\t))\n        (apply str lst)\n         lst)))", "problem": 30, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "#(reduce (fn [col x]\n          (if (not= (last col) x)\n            (conj col x)\n            col)) [] %)", "problem": 30, "user": "52fbc44be4b047fd55837010"}, {"code": "(fn [x] (loop [[a & more] x acc []] (println (str a \" \" more)) (if (not more) (conj acc a) (if (= a (first more)) (recur more acc) (recur more (conj acc a))))))", "problem": 30, "user": "52fb64b7e4b047fd55837009"}, {"code": "#(let[len (count %)] \n  (loop[i 0 r []] \n    (let[e (get % i)] \n      (if(= i len) \n        r \n        (recur (inc i) (if(= e (last r)) r (conj r e))))\n      )\n    )\n  )", "problem": 30, "user": "52e68e61e4b09f7907dd1479"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "52d96f7ce4b09f7907dd13a8"}, {"code": "(fn dedup [[l & xs]]\n  (if l\n    (if (= l (first xs))\n      (dedup xs)\n      (conj (dedup xs) l))\n    ()))", "problem": 30, "user": "52fafd5ce4b047fd55837006"}, {"code": "#(loop [res [] col (seq %)]\n   (cond\n    (not (seq col)) res\n    (= (last res) (first col)) (recur res (rest col))\n    :else (recur (conj res (first col)) (rest col))))", "problem": 30, "user": "52fb903ee4b047fd5583700b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52fcfeeee4b047fd55837027"}, {"code": "(fn [in]\n  (-> (fn [out x] (if (not= x (last out)) (conj out x) out))\n      (reduce [] in)))", "problem": 30, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "(fn ! \n  ([x] (! nil x))\n  ([x y]\n   (if (empty? y) \n   \t'()\n     (let [fy (first y) r (! fy (rest y))]\n       (if (= x fy) r (concat [fy] r))\n       ))))", "problem": 30, "user": "52faec2ee4b047fd55837004"}, {"code": "#(reduce (fn [a b] (if (= (last a) b)  a (conj a b))) [] %)", "problem": 30, "user": "52f381f3e4b05e3f0be25f10"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn compress-seq [coll]\n  (when-let [[x & y] (seq coll)]\n    (if (= x (first y))\n      (compress-seq y)\n      (cons x (compress-seq y)))))", "problem": 30, "user": "50b79c5fe4b0cf3e51c3046c"}, {"code": "(fn compress\n  ([in] (compress (rest in) [(first in)])) \n  ([in res] \n    (if (empty? in) res\n      (if (= (first in) (last res)) \n        (compress (rest in) res) \n        (compress (rest in) (conj res (first in)))))))", "problem": 30, "user": "5300b750e4b0d8b024fd3711"}, {"code": "reduce (fn [res x] (if (= (last res) x) res (concat res [x]))) []", "problem": 30, "user": "5300f68de4b0d8b024fd3714"}, {"code": "(fn compacto [listy]\n  (cond\n   (empty? listy) listy\n   :else (cons (first listy) (compacto (drop-while #(= % (first listy)) listy)))))", "problem": 30, "user": "51b89503e4b050a1176cd69a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52eb400ee4b0705949c4443b"}, {"code": "#(map first \n      (partition-by identity %))", "problem": 30, "user": "5302b580e4b0d8b024fd3732"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "5302bb37e4b0d8b024fd3734"}, {"code": "(partial (fn f [carry [x & xs :as coll]]\n   (if (empty? coll)\n     coll\n     (if (= carry x)\n       (f x xs)\n       (cons x (f x xs))))) nil)", "problem": 30, "user": "51d7f34fe4b0154f82ab9303"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "518c1079e4b0f028e99addf8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "512587ade4b05d10e3e395fb"}, {"code": "(fn [xs]                                                     \n  (filter #(not (nil? %)) (map (fn [n]                       \n                                 (if (= (nth xs n)           \n                                        (nth xs (inc n) nil))\n                                   nil                       \n                                   (nth xs n)))              \n                               (range (count xs)))))", "problem": 30, "user": "52fff1a8e4b0d8b024fd370d"}, {"code": "(fn [i]\n  (reverse ((fn self [orig toReturn]\n    (cond\n      (empty? orig) toReturn\n      (= (first orig) (first toReturn)) (self (rest orig) toReturn)\n      :else (self (rest orig) (conj toReturn (first orig))))) i nil)))", "problem": 30, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn f[x]\n  (cond\n   (empty? x) '()\n   (= (first x) (second x)) (f (rest x))\n   :else (cons (first x) (f (rest x)))))", "problem": 30, "user": "52f818a6e4b047fd55836fcc"}, {"code": "reduce (fn [v x] (if (= x (last v)) v (conj v x))   ) []", "problem": 30, "user": "53029281e4b0d8b024fd372e"}, {"code": "(fn uniq \n  ([x] (uniq x nil))\n  ([x prior]\n    (concat\n      (if (empty? x)\n       []\n        (if (= prior (first x))\n         []\n         (list (first x))\n        )\n      )\n      (if (empty? x)\n       []\n       (uniq (rest x) (first x))\n      )\n    )\n  )\n)", "problem": 30, "user": "5303a027e4b0d8b024fd3745"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn [x & compressed]\n  (if (empty? x) (reverse compressed)\n    (if (empty? compressed) (recur (rest x) (conj () (first x)))\n      (if (= (first x) (first compressed)) (recur (rest x) compressed)\n        (recur (rest x) (conj compressed (first x)))))))", "problem": 30, "user": "5306e4b4e4b02e821686979d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5307e4ece4b02e82168697a9"}, {"code": "(fn [s]\n  (loop [[curr-elt :as s] s, last-elt nil, result []]\n    (if (empty? s)\n      result\n      (recur (rest s) curr-elt\n             (if (= curr-elt last-elt)\n               result\n               (conj result curr-elt))))))", "problem": 30, "user": "53070615e4b02e821686979e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5152f82ee4b03f948212e718"}, {"code": "(fn f([[a & [b] :as ls]] (cond (nil? b) (cons a '())\n                                      (= a b) (f (rest ls)) \n                                      :else (cons a (f (rest ls))))))", "problem": 30, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn [coll]\n   (reverse (reduce (fn [xs x]\n                      (if (= (first xs) x)\n                        xs\n                        (cons x xs)))\n                    '() coll)))", "problem": 30, "user": "4dad8a6dc9a9d6ed1399dc57"}, {"code": "(fn [coll] (reverse (reduce\n   (fn [acc el] (if\n                 (= el (first acc))\n                  acc\n                  (conj acc el))) '() coll)))", "problem": 30, "user": "530394b4e4b0d8b024fd3743"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "5301a13ae4b0d8b024fd371e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "528c51a5e4b0239c8a67aeb4"}, {"code": "(fn [lst] (map first (partition-by identity lst)))", "problem": 30, "user": "52fe3a9de4b047fd55837039"}, {"code": ";(fn flt[col](\n;      cond\n;      (= 1 (count col)) col\n;      :else (if ( = (first col)(second col)) (flt (rest col)) (cons (first col) (flt (rest col))))\n;   ))\n#(map first (partition-by identity %))", "problem": 30, "user": "52f426fce4b05e3f0be25f1e"}, {"code": "(fn\n[in]\n  (reduce\n    (fn\n      [out nextone]\n      (if (= (last out) nextone)\n        out\n        (conj out nextone)\n      )\n    )\n    []\n    in\n  )\n)", "problem": 30, "user": "530c462ae4b02e82168697d9"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "530caf86e4b02e82168697df"}, {"code": "(fn [x]\n  (loop\n    [l []\n     sq x]\n    (if (= nil (first sq))\n      l\n      (recur\n       (if (= (last l) (first sq))\n         l\n         (conj l (first sq)))\n       (rest sq)))))", "problem": 30, "user": "530d85dee4b08068f379eca8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51583ee4e4b0a069fd272c72"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn [coll]\n  (loop [acc (list (first coll)) state (first coll) feed (rest coll)]\n    (cond (empty? feed) (reverse acc)\n          :else (if (= (first feed) state)\n                  (recur acc (first feed) (rest feed))\n                  (recur (cons (first feed) acc) (first feed) (rest feed))))))", "problem": 30, "user": "50b9d991e4b04934c218a4a9"}, {"code": "(fn cmprs [coll]\n            (when-let [[f & r] (seq coll)]\n                  (if (= f (first r))\n                          (cmprs r)\n                          (cons f (cmprs r)))))", "problem": 30, "user": "5302d79ce4b0d8b024fd3736"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn [x]\n  (reduce (fn [newx e]\n            (if (not= (last newx) e)\n              (concat newx [e])\n              newx))\n          (empty x) x))", "problem": 30, "user": "4ff505c8e4b0678c553fc364"}, {"code": "(fn c[s]\n  (if (not (empty? s)) \n\t(if (= (first s)(second s)) \n\t\t(c (rest s))\n\t\t(cons (first s) (c(rest s))))))", "problem": 30, "user": "530e5469e4b08068f379ecb7"}, {"code": "(fn [coll]\n  (letfn [(no-repeat [sq prev] \n                     (when-let [s (seq sq)]\n                       (let [x (first s)]\n                         (lazy-seq\n                           (if (= prev x)\n                             (no-repeat (rest s) x)\n                             (cons x (no-repeat (rest s) x)))))))]\n    (no-repeat coll nil)))", "problem": 30, "user": "5312452be4b08068f379ecf8"}, {"code": "(fn [xs] (reverse (reduce #(if (= (first %) %2) % (cons %2 %)) [] xs)))", "problem": 30, "user": "53034738e4b0d8b024fd373e"}, {"code": "(fn comp [x] (if (seq x) (concat (list (first x)) (drop-while #(= (first x) %) (comp (rest x)))) []))", "problem": 30, "user": "5313165ce4b08068f379ed06"}, {"code": "(fn remove-repeats [s]\n  (cond (<= (count s) 1) s\n        (= (first s) (second s)) (remove-repeats (rest s))\n        :else (cons (first s) (remove-repeats (rest s)))))", "problem": 30, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn compress-sequence [x]\n      (if (empty? x)\n        x\n        (if (= (first x)\n               (first (rest x)))\n          (compress-sequence (concat (list (first x))\n                                     (rest (rest x))))\n          (concat (list (first x))\n                  (compress-sequence (rest x))))))", "problem": 30, "user": "52e17e66e4b09f7907dd1423"}, {"code": "#((fn remove-dups [iter x]\n  (if (empty? x)\n    iter\n    (if (= (first x) (second x)) \n      (remove-dups iter (rest x)) \n      (remove-dups (concat iter (list (first x))) (rest x)))))\n\n '() %)\n\n; I did the above before I knew about partition-by. Quite a difference.\n; #(map first (partition-by identity %))", "problem": 30, "user": "4eed26af535d93acb0a668bb"}, {"code": "reduce #(if (= (last %1) %2)  %1 (concat %1 [%2])) '()", "problem": 30, "user": "53110f32e4b08068f379ece4"}, {"code": "(fn [x] (mapcat seq (map set (partition-by identity x))))", "problem": 30, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [s] \n  (loop [s1 (vec s) s2 []]\n    (if (empty? s1)\n      (if (string? s)\n        (clojure.string/join s2)\n        (apply list s2))\n      (if (and (not (empty? s2)) (= (first s1) (last s2)))\n        (recur (rest s1) s2)\n        (recur (rest s1) (conj s2 (first s1)))))\n    ))", "problem": 30, "user": "53069e16e4b02e8216869798"}, {"code": "reduce (fn [x y] \n          (if (= (last x) y) x\n               (conj x y)\n           ))\n        []", "problem": 30, "user": "4f320253e4b0d6649770a08d"}, {"code": "(fn [l]\n    ((fn i [l d]\n       (if (empty? l)\n           (reverse d)\n        (if (= (first l) (first(rest l)))\n          (i (rest l) d)\n        (i (rest l) (cons (first l) d) ) ) ) ) l [] ) )", "problem": 30, "user": "530c15f7e4b02e82168697d6"}, {"code": "(fn [xs]\n  (reverse\n  \t(reduce (fn [a b] (if (= (first a) b) a (cons b a)))\n          \tnil\n\t          xs)))", "problem": 30, "user": "53162640e4b08068f379ed40"}, {"code": "#(reduce (fn [acc x]\n           (if (= (last acc) x)\n             acc\n             (conj acc x)))\n         [] %)", "problem": 30, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn compr2 [se]\n                 (let [ cm (fn [ se cur acc]\n                             (cond (empty? se) acc\n                                   (= (first se) cur) (recur (rest se) cur acc)\n                                   :else (recur (rest se) (first se) (conj acc (first se) ))\n                                   )\n                             )]\n                   (cm se :nope [])\n                   )\n                 )", "problem": 30, "user": "51f81925e4b09be9c177e526"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52c00e4fe4b07a9af5792342"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52f89125e4b047fd55836fd4"}, {"code": "(fn compress [s]\n              ((fn compress-iter [s result]\n                 (cond (empty? s) result\n                       (or (empty? result) (not (= (first s) (last result)))) (compress-iter (rest s) (conj result (first s)))\n                       :else (compress-iter (rest s) result))) s []))", "problem": 30, "user": "5313a2bfe4b08068f379ed0b"}, {"code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "problem": 30, "user": "5311079de4b08068f379ece2"}, {"code": "(fn [x]\n  (loop [a nil b x c []]\n    (if-not (seq b)\n      c\n      (let [i (first b) j (rest b)]\n        (recur i j (if (= a i) c (conj c i)))))))", "problem": 30, "user": "531488f3e4b08068f379ed16"}, {"code": "reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) nil", "problem": 30, "user": "50580b7ae4b06522596eba74"}, {"code": "(fn cmprs [coll]\n  (map\n   first\n  (partition-by identity (seq coll))\n  )\n)", "problem": 30, "user": "531843c1e4b08068f379ed6c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "507330e6e4b0e3170b5a8698"}, {"code": "(fn [col] (loop [agg () data col]\n\t\t   (if (empty? data)\n\t\t     (reverse agg)\n\t\t     (recur (if (= (first data) (first (rest data))) agg (cons (first data) agg)) (rest data)))))", "problem": 30, "user": "531576b4e4b08068f379ed29"}, {"code": "(fn cutdown [somestuff]\n  (let [[a b & tutsis] somestuff]\n  (cond (nil? a) '()\n        (= a b) (cutdown (conj tutsis a))\n        :else (conj (cutdown (conj tutsis b)) a))))", "problem": 30, "user": "53120cb5e4b08068f379ecf0"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "53134005e4b08068f379ed07"}, {"code": "(comp reverse \n      #(reduce\n        (fn [coll item]\n          (if (empty? coll)\n            (list item)\n            (if (= (first coll) item)\n              coll\n              (cons item coll))))\n        ()\n        %))", "problem": 30, "user": "5315ec83e4b08068f379ed39"}, {"code": "(fn [seq]\n  ((fn f [x xs]\n    (cond\n     (empty? xs) (list x)\n     (= x (first xs)) (f x (rest xs))\n     :else (cons x (f (first xs) (rest xs)))))\n  (first seq) (rest seq)))", "problem": 30, "user": "5315a4f0e4b08068f379ed2e"}, {"code": "(fn [x] (reverse (reduce #(cond (empty? %) (cons %2 %) (= (first %) %2) % :else (cons %2 %)) (list) x)))", "problem": 30, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn [s] (map first (partition-by identity s)))", "problem": 30, "user": "51a1659de4b00957e520db72"}, {"code": "(fn dup [l]\n   (loop [last-sym (first l)\n          current-l (rest l)\n          builded-l [last-sym]]\n     (cond\n      (not (seq current-l)) \n      builded-l\n      (not= last-sym (first current-l))\n      (recur (first current-l) (rest current-l) (conj builded-l (first current-l)))\n      :else\n      (recur last-sym (rest current-l) builded-l))))", "problem": 30, "user": "531c7f0de4b08068f379eda4"}, {"code": "#(reduce (fn [acc x] \n            (if-not\n              (= (last acc) x)\n                (conj acc x)\n                acc)) [] %)", "problem": 30, "user": "531bfb69e4b08068f379ed97"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52d2f457e4b099d49816f0ba"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "531d53dbe4b08068f379edae"}, {"code": "#(reverse (reduce (fn ! [coll x] (cond\n                         (= x (first coll)) coll\n                         :else (cons x coll))) [] %))", "problem": 30, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn compress [col] \n  (reduce (fn [a b](if (= b (last a))\n                     a\n                     (conj a b))\n                   ) [] col))", "problem": 30, "user": "5311b367e4b08068f379eced"}, {"code": "#(seq (reduce (fn [a b] (if (not= (peek a) b)\n                         (conj a b)\n                         a)) [] %))", "problem": 30, "user": "4ff4bed0e4b0678c553fc35f"}, {"code": "reduce (fn [acc x] (if (not= (last acc) x) (conj acc x) acc)) []", "problem": 30, "user": "531ba143e4b08068f379ed91"}, {"code": "(fn [xs]\n  (reduce\n   (fn [acc n]\n     (let [last' (last acc)]\n       (if (= n last')\n       acc\n       (conj acc n))))\n   [] xs))", "problem": 30, "user": "531c0619e4b08068f379ed98"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "#(map first\n      (partition-by identity %))", "problem": 30, "user": "53121863e4b08068f379ecf3"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52474133e4b05ef8e38e635e"}, {"code": "(fn [x]\n  (reverse \n   (reduce #(if (= (first %1) %2)\n            %1\n            (conj %1 %2))\n         '()\n           x)))", "problem": 30, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "531308c1e4b08068f379ed04"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "531f1e63e4b08068f379edc2"}, {"code": "reduce (fn [acc v] (if (= (peek acc) v) acc (conj acc v))) []", "problem": 30, "user": "531f7a2de4b08068f379edc6"}, {"code": "(fn dedup [x]\n    (when-let [f (not-empty (take-while #(= % (first x)) x))]\n      (cons (first f) (dedup (drop (count f) x)))))", "problem": 30, "user": "531dfaf5e4b08068f379edb3"}, {"code": "(fn dedup [sofar xs]\n  (if (empty? xs)\n    sofar\n    (if (= (last sofar) (first xs) )\n      (recur sofar                   (rest xs) )\n      (recur (conj sofar (first xs)) (rest xs) )\n    )\n  )\n)\n[]", "problem": 30, "user": "531cd41ee4b08068f379eda9"}, {"code": "(fn [coll] (map first (partition-by identity coll)))", "problem": 30, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn [a]\n  (loop [a (seq a)\n         b nil\n         result ()]\n    (if-let [cur (first a)]\n      (recur (next a) cur (if (= b cur) result (conj result cur)))\n      (reverse result))))", "problem": 30, "user": "531e5c81e4b08068f379edba"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(fn compress [s]\n  (when-let [[x & xs] (seq s)]\n    (if (= x (first xs))\n      (compress xs)\n      (cons x (compress xs)))))", "problem": 30, "user": "4fd5418ee4b0d4de60cee372"}, {"code": "(fn [arr]\n  (loop [res []\n         a arr]\n    (if-not (empty? a)\n      (if (= (first a) (last res))\n        (recur res (rest a))\n        (recur (conj res (first a)) (rest a)))\n      res)))", "problem": 30, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "(fn[s](reduce #(if(= %2(peek %))%(conj % %2))[]s))", "problem": 30, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn mfn [s]\n  (let [innerF \n        (fn [s r]\n           (cond  (= (count s) 1)  s\n               (= (first s) (second s)) (mfn (rest s)) \n                                             \n               :else (conj (mfn (rest s)) (first s))\n         ))\n       ]\n                                             \n    (innerF s '())\n  ))", "problem": 30, "user": "531902b1e4b08068f379ed77"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "512700c4e4b083bb8f88cf14"}, {"code": "(fn solve\n  ([s] (solve '() nil s))\n  ([res item s]\n     (if (empty? s) (reverse res)\n         (if (= item (first s))\n           (recur res item (rest s))\n           (recur (cons (first s) res) (first s) (rest s))\n           )))\n  )", "problem": 30, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5005b57de4b0678c553fc46a"}, {"code": "(fn t [coll] \n  (reduce #(if (= (peek %1) %2)\n             %1\n             (conj %1 %2))\n          [] coll))", "problem": 30, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn nodup [s]\n  (let [a (first s) b (second s)]\n    (if (nil? b) [a]\n        (if (= a b)\n          (nodup (rest s))\n          (cons a (nodup (rest s)))))))", "problem": 30, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "reduce (fn [acc n]\n          (if (= n (last acc))\n            acc\n            (conj acc n)))\n        []", "problem": 30, "user": "518ee4f9e4b0cd6ff51676a5"}, {"code": "reduce (fn [acc x] (if (= (last acc) x) acc (conj acc x))) '[]", "problem": 30, "user": "531792d9e4b08068f379ed5e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51bdebece4b0ff155d51d2b7"}, {"code": "(fn[x](map (fn[x](first x)) (partition-by identity x )))", "problem": 30, "user": "532631e1e4b09d4e7a9b54ea"}, {"code": "(let [concat-if-not-tail (fn [coll e] (if (= (last coll) e)\n                                        coll (conj coll e)))]\n  #(reduce concat-if-not-tail [] %))", "problem": 30, "user": "5328febee4b09d4e7a9b550d"}, {"code": "(fn [s] \n  (reverse (reduce (fn [v d] (if (coll? d) (reduce (fn [vv e] (conj vv e) ) v d)  ) )\n        \n        '() (map distinct (partition-by identity  s))\n        \n        )))", "problem": 30, "user": "531f0a26e4b08068f379edbf"}, {"code": "(comp (partial map first)\n      (partial partition-by identity))", "problem": 30, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "#(loop [s % r []] (if (empty? s) r (recur (rest s) (if (= (first s) (last r)) r (conj r (first s))))))", "problem": 30, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "#(reduce (fn [c x]\n            (if (= x (last c))\n              c\n              (concat c (list x)))) '() %)", "problem": 30, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "#(reduce (fn [s n] (if (= (last s) n) s (conj s n))) [] %)", "problem": 30, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn [x]\n  (reduce (fn [array item] \n            (if (= (last array) item) \n              array\n              (conj array item)))\n          []\n          x))", "problem": 30, "user": "532b930be4b09d4e7a9b5534"}, {"code": "(fn [l]\n        (loop [a l, b []]\n          (if a\n            (if (not (= (first a) (first (next a))))\n              (recur (next a) (conj b (first a)))\n              (recur (next a) b))\n            b)))", "problem": 30, "user": "532bce35e4b09d4e7a9b5536"}, {"code": "(fn [xs]\n  (loop [xs xs ys '() hold nil]\n    (if (empty? xs)\n      ys\n      (recur (butlast xs)\n             (if (= (last xs) hold) ys (list* (last xs) ys))\n             (last xs)))))", "problem": 30, "user": "4dbe04b2535d020aff1edf56"}, {"code": "(fn compress [xs]\n  (if (empty? xs) '()\n  (let [h (first xs)]\n    (loop [rs (rest xs)]\n      (if-not (= h (first rs))\n        (cons h (compress rs))\n        (recur (rest rs)))))))", "problem": 30, "user": "532b9075e4b09d4e7a9b5533"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "5322d364e4b09d4e7a9b54c6"}, {"code": "(fn\n  [coll]\n  (map first (partition-by identity coll))\n  )", "problem": 30, "user": "52ba447ee4b07a9af57922ce"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "(fn [x]\n  (loop [x x\n         Y []]\n    (if (empty? x) Y\n      (recur (rest x) (if (= (first x) (first (next x)))\n                        Y\n                        (conj Y (first x)))))))", "problem": 30, "user": "531cbf46e4b08068f379eda6"}, {"code": "(fn foo [xs]\n  (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] xs))", "problem": 30, "user": "5004034ce4b0678c553fc447"}, {"code": "(letfn [(debounce [q] (when (seq q) (let [a (first q)] (lazy-seq (cons a (debounce (drop-while #(= a %) (rest q)))))) ))] debounce)", "problem": 30, "user": "532e0b20e4b019098a6f8b45"}, {"code": "(fn [a] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] a))", "problem": 30, "user": "532c0507e4b09d4e7a9b553c"}, {"code": "(fn f [[a & r]]\n  (if (empty? r)\n    (cons a r)\n    (if (= a (first r))\n      (f r)\n      (cons a (f r))\n      )\n    )\n  )", "problem": 30, "user": "5149c2f1e4b0829bd132edb0"}, {"code": "reduce #(if (= (last %1) %2)\n         %1\n         (conj %1 %2)) []", "problem": 30, "user": "532ecd44e4b019098a6f8b49"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "50f3d35ce4b041536e2eca3f"}, {"code": "(fn removeduplicates [x]\n        \"Removes duplicates from a sequence.\"\n  (if (seq x)\n    (if (= (peek (vec x)) (peek (pop (vec x))))\n      (removeduplicates (pop (vec x)))\n      (conj (removeduplicates (pop (vec x))) (peek (vec x))))\n    x))", "problem": 30, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn rcd [seq]\n        (if (empty? seq)\n            ()\n          (let [a (first seq)\n                b (second seq)]\n            (if (= a b)\n                (concat (rcd (rest seq)))\n              (concat (list a) (rcd (rest seq)))))))", "problem": 30, "user": "52aa524fe4b0c58976d9ac64"}, {"code": "(fn [xs]\n  (reduce #(if-not (= (last %1) %2)\n             (conj %1 %2)\n             %1)\n          []\n          xs))", "problem": 30, "user": "52fc34cee4b047fd55837015"}, {"code": "(fn [coll]\n    (reduce #(if (= (last %1) %2) %1\n                 (concat %1 (list %2))) '() coll))", "problem": 30, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn [s]\n  (reduce (fn [c x] (if (= x (last c)) c (conj c x))) [] s))", "problem": 30, "user": "53315c78e4b019098a6f8b67"}, {"code": "#(reduce (fn [xs y]\n          (if (not (= (peek xs) y))\n            (conj xs y)\n            xs))\n         []\n         %)", "problem": 30, "user": "533018b2e4b019098a6f8b56"}, {"code": "#(loop [coll %  result []]\n      (if (nil? (first coll))\n          result\n        (if (= (last result) (first coll))\n            (recur (rest coll) result)\n          (recur (rest coll) (conj result (first coll))))))", "problem": 30, "user": "5331205fe4b019098a6f8b64"}, {"code": "(fn [lst] (map (fn [n] (first n)) (partition-by identity lst)))", "problem": 30, "user": "51f5539fe4b0abb92f97f9cd"}, {"code": "(fn [coll]\n  (map first \n     (partition-by identity coll)))", "problem": 30, "user": "52d5bee0e4b09f7907dd1344"}, {"code": "(fn foo\n  ([coll res]\n   (if (empty? coll)\n     res\n     (let [current (first coll)]\n       (if (= (last res) current)\n         (foo (rest coll) res)\n         (foo (rest coll) (conj res current))))))\n  ([coll]\n   (foo coll [])))", "problem": 30, "user": "53322cece4b019098a6f8b73"}, {"code": "(fn\n  [x]\n  (if (string? x)\n    (let [col   (into [] (map str (seq x)))\n          total (- (count col) 1)]\n      (loop [n  0\n             re []]\n        (if (> n total)\n          (apply str re)\n          (recur (inc n) (if (= n 0)\n                           (into re (vector (get col n)))\n                           (if (= (get col n) (get col (- n 1)))\n                             re\n                             (into re (vector (get col n)))))))))\n    (let [col x\n          total (- (count col) 1)]\n      (loop [n  0\n             re []]\n        (if (> n total)\n          re\n          (recur (inc n) (if (= n 0)\n                           (into re (vector (get col n)))\n                           (if (= (get col n) (get col (- n 1)))\n                             re\n                             (into re (vector (get col n)))))))))))", "problem": 30, "user": "531016d0e4b08068f379ecd1"}, {"code": "reduce (fn [dest n] (if-not (= n (last dest)) (conj dest n) dest)) []", "problem": 30, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "52facb9de4b047fd55837002"}, {"code": ";; (fn [xs]\n;;  (reverse (reduce #(if (= %2 (first %1))\n;;                      %1\n;;                      (conj %1 %2)\n;;                      )\n;;                   () xs)))\n#(map first (partition-by identity %))", "problem": 30, "user": "533696b9e4b0e30313ee6c7c"}, {"code": "(fn dup [x]\n  (cond (empty? x) nil\n        (= (first x) (first (rest x))) (dup (rest x))\n        :else (cons (first x) (dup (rest x)))))", "problem": 30, "user": "5325cf91e4b09d4e7a9b54e8"}, {"code": "(fn comp [col]\n  (lazy-seq\n    (when (seq col)\n      (cons (first col) (comp (drop-while #(= (first col) %) col))))))", "problem": 30, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "(fn [coll]\n  (loop [result []\n         coll coll]\n    (if (empty? coll)\n      result\n      (let [fc (first coll)\n            rc (rest coll)]\n        (if (not= (last result) fc)\n          (recur (conj result fc) \n                 rc)\n          (recur result\n                 rc))))))", "problem": 30, "user": "5336ca32e4b0e30313ee6c80"}, {"code": "(fn [s]\n  (loop [acc [] remaining s]\n    (if (empty? remaining)\n      acc\n      (recur (if (= (last acc) (first remaining))\n               acc\n               (conj acc (first remaining)))\n             (rest remaining)))))", "problem": 30, "user": "52262a6ce4b06a1ecd0c4e7d"}, {"code": "(fn [x]\n  (reverse\n   (reduce\n    #(cons (last %2) %1)\n    ()\n    (map distinct (partition-by identity x)))))", "problem": 30, "user": "520fff3ce4b080a8d9b9d633"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "531d34cfe4b08068f379edac"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52baefbae4b07a9af57922da"}, {"code": "(fn [coll]\n  (reduce #(if (distinct? (last %1) %2) (conj %1 %2) %1) []  coll))", "problem": 30, "user": "532686e6e4b09d4e7a9b54ef"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53350264e4b0656e627bfd73"}, {"code": "#(map first (partition-by identity (vec %)))", "problem": 30, "user": "533056a4e4b019098a6f8b5b"}, {"code": "(fn compress\n  [coll]\n  (let [rd (fn [a b]\n              (let [l (last a)]\n                (if (not (= l b))\n                  (conj a b)\n                  a)))]\n    (reduce rd [] coll)))", "problem": 30, "user": "53334cb2e4b019098a6f8b81"}, {"code": "(fn rd [xs]\n  (if (empty? xs)\n    xs\n    (let [head (first xs)\n          tail (rd (rest xs))]\n      (if (empty? tail)\n        (cons head '())\n        (if (= head (first tail))\n          tail\n          (cons head tail))))))", "problem": 30, "user": "5334d4f2e4b0656e627bfd71"}, {"code": "(partial reduce #(if (= (last %1) %2) %1 (conj %1 %2) ) [])", "problem": 30, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "#(reduce (fn[acc x] (if (= x (last acc)) acc (conj acc x))) [] %)", "problem": 30, "user": "5339cb07e4b0e30313ee6caf"}, {"code": "(fn [x] \n   (reverse \n    (reduce #(if (= (first %) %2) % (cons %2 %)) \n            (empty x) x)))", "problem": 30, "user": "506d5e4ce4b0a302964c5493"}, {"code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "problem": 30, "user": "4eadc217535d7eef30807321"}, {"code": "#(reverse\n  (reduce\n   (fn [result x]\n     (if (= (first result) x)\n       result\n       (cons x result)))\n   () %))", "problem": 30, "user": "4fceda40e4b03432b189f407"}, {"code": "(fn remove-duplicates [xs]\n  (let [fi (first xs)]\n  (loop [x xs\n         acc (list fi)]\n    (if (empty? x)\n      (reverse (filter #(not (nil? %)) acc))\n      (if (= (first x) (second x))\n        (recur (rest x) acc)\n        (recur (rest x) (conj acc (second x) )))))))", "problem": 30, "user": "514a13cee4b0829bd132edb4"}, {"code": "(fn rmdups [s]\n  (if (empty? s)\n    ()\n    (if (not= (first s) (second s))\n      (cons (first s) (rmdups (rest s)))\n      (rmdups (rest s)))))", "problem": 30, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn [v] (reduce #(if-not (= (last %) %2) (conj % %2) %) [] (seq v)))", "problem": 30, "user": "530262c8e4b0d8b024fd3728"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "531619c1e4b08068f379ed3d"}, {"code": "(fn compress [s]\n  (if (empty? s)\n    '()\n    (let [tail (rest s)]\n      (if (= (first s)(first tail))\n        (compress tail)\n        (cons (first s) (compress tail))))))", "problem": 30, "user": "533431e4e4b019098a6f8b8d"}, {"code": "(fn [x]\n                 (loop [col x\n                        result (empty col)]\n                   (if (empty? col)\n                     result\n                     (if (= (first col) (last result))\n                       (recur (rest col) result)\n                       (recur (rest col) (concat result (list (first col))))))))", "problem": 30, "user": "5339af7de4b0e30313ee6cab"}, {"code": "#(loop [seq %\n         acc '()]\n    (if (empty? seq)\n      (reverse acc)\n      (if (= (first seq) (first acc))\n        (recur (rest seq) acc)\n        (recur (rest seq) (conj acc (first seq))))))", "problem": 30, "user": "533d2ea5e4b085b17e897d7a"}, {"code": "#(reduce (fn [res c] (if (= (last res) c) res (conj res c))) [] %)", "problem": 30, "user": "5318594ee4b08068f379ed6d"}, {"code": "(fn [l] \n  (loop [prev (first l)\n         other (rest l)\n         res [(first l)]]\n    (if (= (first other) nil) res\n    (if (= prev (first other))\n      (recur (first other) (rest other) res)\n      (recur (first other) (rest other) (concat res [(first other)]))))))", "problem": 30, "user": "533ee560e4b085b17e897d98"}, {"code": "(fn [coll] (reduce #(if (= (peek %1) %2) %1 (conj %1 %2)) [] coll))", "problem": 30, "user": "533b1dc4e4b0e30313ee6cc7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn [coll] \n  (reduce #(if (= %2 (last %)) \n             % \n             (conj % %2)) \n          '[] \n          coll))", "problem": 30, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "(fn  [seq]\n  (loop[s seq\n        res '()]\n    (let [s2 (second s)\n          s1 (first s)\n          res1 (first res)\n          temp-res (cons s1 res)]\n      (if (empty? s)\n        (if(string? seq)\n           (apply str (rseq (vec res)))\n           (rseq (vec res)))\n        (recur (rest s)\n               (cond \n                 (and (= s1 s2) (not= s1 res1))temp-res\n                 (and (= s1 s2) (= s1 res1)) res\n                 (and (not= s1 s2) (= s1 res1)) res\n                 :else temp-res))))))", "problem": 30, "user": "516081e7e4b009fba0926e28"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "534056fce4b085b17e897dac"}, {"code": "(fn [lst]\n  ((fn iter [res l prev]\n     (if (empty? l) res\n       (if (= (first l) prev)\n         (iter res (rest l) prev)\n         (iter (concat res (list (first l))) (rest l) (first l)))))\n   '() lst nil))", "problem": 30, "user": "51da631be4b02ceefd947766"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53409368e4b085b17e897daf"}, {"code": "(fn [s] \n  (reduce \n    (fn [w el] \n      (if (= (last w) el)\n        w\n        (conj w el)))\n    [] s))", "problem": 30, "user": "532a111ee4b09d4e7a9b5520"}, {"code": "(fn [input]\n  (loop [s (seq input) a []]\n    (if (empty? s)\n      a\n\t    (if (= (first s) (last a))\n    \t  (recur (rest s) a)\n     \t (recur (rest s) (conj a (first s)))))))", "problem": 30, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn compressor [x]\n  (when-let [[f & r] (seq x)] \n    (if (= f (first r)) \n      (compressor r) \n      (cons f (compressor r)))))", "problem": 30, "user": "533f09e1e4b085b17e897d9a"}, {"code": "(fn remove-dups\n  [xs]\n  (letfn [(helper [ys k]\n            (cond\n             (empty? ys) \"\"\n             (= k (first ys)) (helper (next ys) k)\n             :else (cons (first ys) (helper (next ys) (first ys))))\n            )]\n    (helper xs nil)))", "problem": 30, "user": "4ea5ba92535d7eef308072d9"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "5340ee60e4b00652c8746ec9"}, {"code": "(fn [col]\n    (map first (partition-by identity col)))", "problem": 30, "user": "524d90c0e4b0a16e35cf6ded"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn [x] \n\t(loop [s x r []]\n      (if (empty? s)\n        r\n        (recur (drop-while #(= (first s) %) (rest s)) (conj r (first s))))))", "problem": 30, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(letfn [(step [xs* x]\n          (if (= (peek xs*) x)\n            xs*\n            (conj xs* x)))]\n  (fn [[x & rxs :as xs]]\n    (if (seq xs)\n      (reduce step [x] rxs)\n      xs)))", "problem": 30, "user": "5339c105e4b0e30313ee6cae"}, {"code": "(fn [col] \n  (seq \n   (reduce \n    #(if-not (= (last %1) %2) \n       (conj %1 %2) \n       %1) \n    [] col)))", "problem": 30, "user": "53286389e4b09d4e7a9b5504"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5346f409e4b084c2834f4a46"}, {"code": "(fn lz77 [sr]\n  (let [lz (fn lz [last sr]\n            (let [ch (first sr)\n                  res (rest sr)]\n              (cond (empty? sr) ch\n                    (= last ch) (lz ch res)\n                    :else (cons ch (lz ch res)))))]\n  (lz nil sr)))", "problem": 30, "user": "5322d370e4b09d4e7a9b54c7"}, {"code": "(fn compress [item]\n  (remove nil? (map #(when (not (= (nth % 0) (nth % 1))) (nth % 0) ) (partition 2 1 (concat item \"_\"))\n    )))", "problem": 30, "user": "53307da1e4b019098a6f8b5e"}, {"code": "#(reduce (fn [memo next-val] (if (= (last memo) next-val) memo (conj memo next-val))) [] %)", "problem": 30, "user": "4f386f61e4b0e243712b1edc"}, {"code": "(fn [s]\n    (map first (partition-by identity s)))", "problem": 30, "user": "53487737e4b084c2834f4a59"}, {"code": "#(reduce (fn [r el]\n            (if (not= (last r) el)\n              (conj r el)\n              r))\n          [] %)", "problem": 30, "user": "4e705861535d5021c1a89635"}, {"code": "(fn dedupstr2 [s] \n  (reduce \n    (fn dedup-reduce [seq_or_n1 n2]\n      (let [lastn1 \n        (if (seq? seq_or_n1) \n          (last seq_or_n1)\n          seq_or_n1\n        ), seq1 (if (seq? seq_or_n1) seq_or_n1 (seq [seq_or_n1])) ]\n        (if (= n2 lastn1)\n           seq1\n           (concat seq1 (seq [n2])))\n      ))\n    s\n    )\n)", "problem": 30, "user": "53436f49e4b084c2834f4a1a"}, {"code": "(fn [se]\n  (loop [s (next se), prev (first se), res [(first se)]]\n    (cond (= s nil) res\n          (= (first s) prev) (recur (next s) (first s) res)\n          :else (recur (next s) (first s) (conj res (first s))))))", "problem": 30, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn [s] (map first (filter\n                    #(not= (first %) (last %))\n                    (map #(vector %1 %2)\n                         s\n                         (concat '(0) s)))))", "problem": 30, "user": "53498f88e4b084c2834f4a64"}, {"code": "(fn f [l] \n  (if (empty? l) \n    l \n    (if (= (first l) (second l))\n      (f (rest l))\n      (cons (first l) (f (rest l)))\n    )\n  )\n)", "problem": 30, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn removeDups [[f & rest]]\n  (if (= f (first rest))\n    (removeDups rest)\n    (if (= nil rest)\n      (cons f ())\n      (cons f (removeDups rest))\n      )\n    )\n  )", "problem": 30, "user": "5349a39de4b084c2834f4a65"}, {"code": "(fn [l]\n  (reduce (fn [res i]\n            (if (= (last res) i)\n              res\n              (conj res i)\n              )) [] (seq l))\n  )", "problem": 30, "user": "5348236ee4b084c2834f4a54"}, {"code": "(fn [s]\n  (mapcat distinct (partition-by identity s)))", "problem": 30, "user": "53415755e4b00652c8746ecd"}, {"code": "#(loop [result () input %] (if (empty? input) result (if (= (last result) (first input)) (recur (identity result) (rest input))\n                                                        (recur (concat result [(first input)]) (rest input)))))", "problem": 30, "user": "52ac2db3e4b0c58976d9ac82"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "534bde26e4b084c2834f4a81"}, {"code": "(fn [s]\n  ((fn [result remaining]\n  \t(let [a (first remaining)\n          d (drop-while (partial = a) remaining)\n          acc (conj result a)]\n      (if (first d)\n          (recur acc d)\n          acc)))\n  []\n  s))", "problem": 30, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "534bd9c1e4b084c2834f4a80"}, {"code": "(fn fun [xs]\n (reduce (fn [x y] \n           (if  (= (peek x) y) \n                     x \n             (conj x y))) [] xs ))", "problem": 30, "user": "5349da55e4b084c2834f4a68"}, {"code": "(fn [a]\n  (loop [i 1 result [(first a)]]\n    (if (< i (count a))\n      (if (= (nth a (dec i)) (nth a i))\n        (recur (inc i) result)\n        (recur (inc i) (conj result (nth a i))))\n      result)))", "problem": 30, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "534e9ed4e4b084c2834f4ab8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5338387de4b0e30313ee6c91"}, {"code": "(fn [a]\n  (conj\n   (map \n    #(first %)\n    (filter #(apply not= %) (map vector (drop 1 a) a)))\n   (first a)\n   )\n  )", "problem": 30, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "#(reverse (reduce (fn [x y] \n                                      (if (= (first x) y)\n                                        x\n                                        (conj x y))\n                                      ) '() %))", "problem": 30, "user": "533e7f63e4b085b17e897d8e"}, {"code": "(fn my-comp [x]\n  (when-let [[f & r] (seq x)]\n    (if (= f (first r))\n          (my-comp r)\n          (cons f (my-comp r)))))", "problem": 30, "user": "534bfa81e4b084c2834f4a87"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "534815bde4b084c2834f4a53"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "53504436e4b084c2834f4ad7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "534e118ee4b084c2834f4aad"}, {"code": ";reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []\n#(map first (partition-by identity %))", "problem": 30, "user": "534ab3f5e4b084c2834f4a6e"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53500869e4b084c2834f4ad3"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [sq]\n  (loop [res []\n         head (first sq)\n         tail (rest sq)]\n    (if (nil? head)\n      res\n      (if-not (= head (first tail))\n        (recur (conj res head)\n               (first tail)\n               (rest tail))\n        (recur res\n               (first tail)\n               (rest tail))))))", "problem": 30, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn remove-dups[s] \n  (reverse ((fn rd [s acc]\n              (cond \n               (empty? s) acc\n               (= (first s) (first acc)) (rd (rest s) acc)\n               :else (rd (rest s) (cons (first s) acc))\n               )\n              ) s '())\n            ))", "problem": 30, "user": "535197f2e4b084c2834f4ae4"}, {"code": "reduce #(if (= (last %1) %2) %1 (concat %1 [%2])) []", "problem": 30, "user": "5353afa0e4b084c2834f4b03"}, {"code": "#(loop [c % result '()] \n   (let [smart-cat (fn [x y] (if (= (last x) y) x (concat x (list y))))]\n     (if-not (empty? c)\n       (recur (rest c)\n              (smart-cat result (first c))) result )))\n\n; reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "533b9cace4b0e30313ee6cd1"}, {"code": "(fn [s] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "534efe66e4b084c2834f4ac1"}, {"code": "(fn [x] (filter #(not= nil %1) (map #(when-not (= %1 %2) %1) x (concat [\"#\"] x))))", "problem": 30, "user": "53512b55e4b084c2834f4ae0"}, {"code": "#(reduce (fn [vec x]\n          (cond\n           (empty? vec) (conj vec x)\n           (not= x (peek vec)) (conj vec x)\n           :else vec))\n        []\n        %)", "problem": 30, "user": "5256c4c1e4b0541d1855ba36"}, {"code": "(fn [x]\n  (reduce (fn [lis c]\n              (if (not= (last lis) c)\n                  (into lis (vector c))\n                lis))\n          (vector (first x)) (rest x)))", "problem": 30, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "50f10f7be4b06d9538fe211a"}, {"code": "(fn skip-dupes [x]\n  (loop [myx x recent nil acc []]\n    (if (empty? myx)\n      acc\n      (let [head (first myx)]\n        (if (= head recent)\n          (recur (rest myx) recent acc)\n          (recur (rest myx) head (conj acc head)))))))", "problem": 30, "user": "535526a2e4b04ce2eb3ed259"}, {"code": "(fn rm-consecutive [s]\n  (if (< (count s) 2)\n    s\n    (if (= (first s) (second s))\n      (rm-consecutive (rest s))\n      (cons (first s) (rm-consecutive (rest s))))))", "problem": 30, "user": "5356e04fe4b04ce2eb3ed271"}, {"code": ";#(reduce (fn [xs x] (if (= (last xs) x) xs (concat xs (list x)))) '() %)\n\n#(map first (partition-by identity %))", "problem": 30, "user": "5312cdaae4b08068f379ed03"}, {"code": "#(reduce (fn [acc x]\n          (if (= (last acc) x)\n            acc\n            (conj acc x))) [] %)", "problem": 30, "user": "5250b7a5e4b0541d1855b83e"}, {"code": "(fn [[a & [b & not-processed]] & processed]\n  (prn (str a \".\" b \".\" not-processed \".\" processed))  \n  (cond (nil? a) (reverse processed)\n        (nil? b) (reverse (conj processed a))\n        (= a b) (recur (conj not-processed a) processed)\n        :else (recur (conj not-processed b) (conj processed a))))", "problem": 30, "user": "5356ac72e4b04ce2eb3ed26a"}, {"code": "(fn [xs]\n  (reduce \n    (fn [acc x]\n      (if (= (first acc) x)\n        acc\n        (cons x acc)\n    ))\n    '() \n    (reverse xs)))", "problem": 30, "user": "535778dee4b04ce2eb3ed27d"}, {"code": "(fn f\n  [xs]\n\t(reduce (fn [xs x]\n              (if (= x (last xs)) xs (conj xs x)))\n\t        []\n            xs))", "problem": 30, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "(fn [s]\n  (loop [s s acc []]\n    (cond (empty? s) acc\n          (= (first s) (last acc)) (recur (rest s) acc)\n          :else (recur (rest s) (conj acc (first s))))))\n\n; nice\n;reduce #(if (= (last %1) %2)\n;          %1\n;          (conj %1 %2))\n;       []", "problem": 30, "user": "534da51fe4b084c2834f4aa4"}, {"code": "(fn [x]\n  (let [y (concat (list nil) x)]\n    (map first (filter (fn [z] (not (= (first z) (second z)))) \n                       (map vector x y)))))", "problem": 30, "user": "52046600e4b0c283853240c5"}, {"code": "(fn [coll]\n  (map second\n       (filter (fn [[index item]] (not= item (get coll (dec index))))\n               (map vector (range) coll))))", "problem": 30, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn compress [x] (if (empty? x) x (if (= (first x) (first (rest x))) (compress (rest x)) (cons (first x) (compress (rest x))))))", "problem": 30, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "(fn remove-dups [xs]\n  \"remove consecutive duplicates from a sequence\"\n  (let [grouped (partition-by identity xs)]\n    (map first grouped)))", "problem": 30, "user": "53287dace4b09d4e7a9b5507"}, {"code": "(fn [coll]\n(reverse (reduce \n\t(fn [coll value] \n\t\t(if (= (first coll) value)\n\t\t\tcoll\n\t\t\t(conj coll value)\n\t\t)\n\t)\n\t'()\n\tcoll\n))\n)", "problem": 30, "user": "535943b3e4b04ce2eb3ed295"}, {"code": "#(mapcat set (partition-by identity %))", "problem": 30, "user": "5354bb38e4b084c2834f4b0a"}, {"code": "(fn compress [x]\n  (loop [x x acc '()]\n    (if (empty? x)\n      acc\n      (recur\n        (rest x)\n        (if (= (last acc) (first x))\n          acc\n          (concat acc  [(first x)]))))))", "problem": 30, "user": "535a170ae4b04ce2eb3ed2a3"}, {"code": "(fn compress [s] (reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] s))", "problem": 30, "user": "534d1173e4b084c2834f4a98"}, {"code": "(partial reduce #(if (= (last %1) %2) %1 (concat %1 [%2])) [])", "problem": 30, "user": "53597288e4b04ce2eb3ed29c"}, {"code": "(fn [col]\n  (map first \n       (remove #(and (> (count %) 1 ) (= (first %) (last %))) \n               (partition-all 2 1 col))))", "problem": 30, "user": "530b8580e4b02e82168697cc"}, {"code": "reduce (fn [acc i] \n         (if (and \n              (not (empty? acc)) \n              (= (nth acc (dec (count acc))) i)) \n           acc(concat acc [i]))) []", "problem": 30, "user": "50c95c4fe4b0bed41a12298f"}, {"code": "(fn [x] (map first (partition-by identity x)))", "problem": 30, "user": "535aba96e4b04ce2eb3ed2a8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "534dd600e4b084c2834f4aaa"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53523ae0e4b084c2834f4aee"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "535c53c5e4b04ce2eb3ed2b3"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5356dcbee4b04ce2eb3ed270"}, {"code": "(fn  [seq]\n    (loop [coll seq\n           accum [] ]\n      (if (empty? coll)\n        accum\n        (if (= (last accum )(first coll))\n          (recur (rest coll) accum )\n          (recur (rest coll)(concat  accum (vector (first coll) ) )))\n         )\n      )\n      \n  )", "problem": 30, "user": "52dced9de4b09f7907dd13d7"}, {"code": "#(reduce (fn [s x]\n          (if (= x (last s))\n            s\n            (conj s x))) [] %)", "problem": 30, "user": "5215661be4b02f6d8ea676c7"}, {"code": "#(reduce (fn [s x]\n           (if (= x (last s))\n             s\n             (conj s x))) [] %)", "problem": 30, "user": "535afd76e4b04ce2eb3ed2ab"}, {"code": ";#(first (partition-by identity %))\n#(map first (partition-by identity %))", "problem": 30, "user": "533aac38e4b0e30313ee6cbe"}, {"code": "(fn deDupe [x]\n  (loop [outVec [] \n         origVec (vec x)]\n    (if origVec\n      (recur (if (= (first origVec) (last outVec))\n               outVec\n               (conj outVec (first origVec)))\n             (next origVec))\n      outVec)))", "problem": 30, "user": "534f1c94e4b084c2834f4ac5"}, {"code": "(fn [coll]\n  (map first (filter (fn [[x y]] (not= x y)) (partition-all 2 1 coll))))", "problem": 30, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "(comp seq (partial reduce #(if (= (last %1) %2) %1 (conj %1 %2) )  [] ))", "problem": 30, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "#(loop [ l-in % l-out '() mtch nil ] \n   (if (empty? l-in) (reverse l-out)\n     (let [ entry (first l-in) r (rest l-in)]\n       (if (= mtch entry) \n         (recur r l-out entry)\n         (recur r (conj l-out entry) entry)))))", "problem": 30, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "(fn [s]\n  ((fn [s pc r]\n     (if (empty? s)\n       r\n       (recur (rest s)\n              (first s)\n              (if (= (first s) pc)\n                r\n                (conj r (first s))))))\n   s [] []))", "problem": 30, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn compress [[x y :as xs]]\n\t(cond\n\t\t(nil? y)\n\t\t\t(list x)\n\t\t(= x y)\n\t\t\t(compress (rest xs))\n\t\t:else\n\t\t\t(cons x (compress (rest xs)))))", "problem": 30, "user": "535f9604e4b04ce2eb3ed2dd"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "(fn my-flatten [s] (map first (partition-by identity s)))", "problem": 30, "user": "52e683c0e4b09f7907dd1477"}, {"code": "#((fn x [s acc]\n    (if (seq s)\n\t  (if (= (first acc) (first s))\n        (x (rest s) acc)\n        (x (rest s) (cons (first s) acc)))\n      (reverse acc)))\n  %\n  [])", "problem": 30, "user": "536102efe4b0243289761e3e"}, {"code": "(fn f [x] (reduce (fn [out next]\n                        (if (= next (last out)) out (conj out next)))\n                    []\n                    x))", "problem": 30, "user": "500e7063e4b04a05d36fcc07"}, {"code": "(fn [a-seq]\n  (loop [s a-seq \n         deduped [] \n         last nil]\n    (if (empty? s)\n      deduped\n      (if (= (first s) last)\n        (recur (rest s) deduped (first s))\n        (recur (rest s) (conj deduped (first s)) (first s))))))", "problem": 30, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn compress [[x & xs]]\n  (if (nil? x)\n    []\n    (cons x (compress (drop-while #(= x %) xs)))))", "problem": 30, "user": "536254a5e4b0243289761e50"}, {"code": "(fn compress [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (compress r)\n      (cons f (compress r)))))", "problem": 30, "user": "53576356e4b04ce2eb3ed27a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53489329e4b084c2834f4a5b"}, {"code": "(fn com [s] (map first (partition-by identity s)))", "problem": 30, "user": "5363f11be4b0243289761e5f"}, {"code": "(partial reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [])", "problem": 30, "user": "53527551e4b084c2834f4af0"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52d838bee4b09f7907dd138b"}, {"code": "#(loop [result [] r %] (if (empty? r) result (recur (let [head (first r) l (last result)] (if (= head l) result (conj result head))) (rest r))))", "problem": 30, "user": "53629381e4b0243289761e54"}, {"code": "(fn [x] (reduce (fn [a b] (if (= (last a) b) a (concat a (list b)))) (list (first x)) (rest x)))", "problem": 30, "user": "53638ed2e4b0243289761e5b"}, {"code": "(fn [coll] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] coll))", "problem": 30, "user": "53217912e4b09d4e7a9b54b3"}, {"code": "(fn [sequence] (map first (partition-by identity sequence)))", "problem": 30, "user": "52c42bc2e4b0c2d177d620d0"}, {"code": "(fn [input]\n  (loop [x input result []]\n        (if (empty? x)\n            result\n          (if (= (first x) (second x))\n              (recur (rest x) result)\n            (recur (rest x) (conj result (first x)))))))", "problem": 30, "user": "53658ce7e4b0243289761e6e"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "5325cef5e4b09d4e7a9b54e7"}, {"code": "(fn rd [coll]\n        (reduce (fn [a b]\n                  (if (not= (last a) b)\n                    (conj a b)\n                    a)) []  coll ))", "problem": 30, "user": "536581e4e4b0243289761e6d"}, {"code": "(fn\n  [s]\n  (reduce #(if-not (= (last %1) %2)\n             (conj %1 %2)\n             %1)\n          []\n          s))", "problem": 30, "user": "52fc5fa0e4b047fd55837017"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52ed1804e4b0a18b0f5dd9e6"}, {"code": "(fn rmdp [s]\n  (reverse (reduce (fn [l x]\n            (if (= (first l) x)\n              l\n              (cons x l))) (list) (seq s))))", "problem": 30, "user": "5364697ce4b0243289761e62"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52f9ce6de4b047fd55836ff0"}, {"code": "(fn [coll] (reduce (fn [a,b] (if (= (last a) b) a (conj a b))) [] coll))", "problem": 30, "user": "5367ca98e4b0243289761e86"}, {"code": "(fn compr [s]\n  (if (< (count s) 2)\n      [(first s)]\n    (if (not= (first s) (first (rest s)))\n        (reduce conj [(first s)] (compr (rest s)))\n      (compr (rest s)))))", "problem": 30, "user": "535f0cbde4b04ce2eb3ed2d9"}, {"code": "(fn [s]\n  (keep-indexed #(if (or (zero? %1) \n                         (not= %2 (nth s (dec %1))))\n                     %2) s))", "problem": 30, "user": "5338e33fe4b0e30313ee6ca1"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "5368a275e4b0243289761e8f"}, {"code": "(fn compress\n  ([lst]\n    (if-let [[x & tl] (seq lst)]\n      (if-let [[y & r] (seq tl)]\n        (if (= x y) \n          (compress (concat [x] r))\n          (concat [x] (compress (concat [y] r))))\n         [x])\n      (list))\n   ))", "problem": 30, "user": "536234a5e4b0243289761e4d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn [col]\n    (loop [col col acc []]\n     (if (empty? col)\n       acc\n       (let [acc' (if (= (first col) (last acc))\n                    acc\n                    (conj acc (first col)))]\n         (recur (rest col) acc')))))", "problem": 30, "user": "5369d072e4b0243289761ea1"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "53695439e4b0243289761e9a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "524f3e6de4b0541d1855b805"}, {"code": "(fn compress\n  [xs]\n  (reduce \n   #(if (= (last %1) %2) %1 (concat %1 (list %2)))\n   '() \n   (if (coll? xs) xs (seq xs))))", "problem": 30, "user": "536aa86de4b0243289761eb1"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53578543e4b04ce2eb3ed280"}, {"code": "(fn [sq]\n  ((fn dedup\n     [[x & xs]]\n     (if (empty? xs) [x]\n                     (cons x (dedup (drop-while #(= x %) xs))))) sq))", "problem": 30, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn [xs]\n  (loop [[head & tail :as xs] xs, current nil, acc []]\n    (cond\n      (empty? xs) acc\n      (= head current) (recur tail current acc)\n      :else (recur tail head (conj acc head)))))", "problem": 30, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52d42021e4b09f7907dd132a"}, {"code": "reduce #(if (= (last %1 ) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn compres \n  ([s] (compres s nil))\n  ([s prev] \n   (if (-> s count (= 0)) \n     nil\n     (if (-> s first (= prev)) \n       (compres (rest s) prev)\n       (cons (first s) (compres (rest s) (first s)))\n       )\n     )))", "problem": 30, "user": "4dca56b6535d5973398f9287"}, {"code": "(fn [xs]\n (reduce (fn [acc x] \n          (if (or (empty? acc) (not= (last acc) x))\n                      (concat acc (list x))\n            acc)\n          ) '() xs))", "problem": 30, "user": "52d24f60e4b099d49816f0a8"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "524b0645e4b09eba1c0223bf"}, {"code": "#(reduce \n  (fn [r x]\n    (if (= x (last r))\n      r\n      (conj r x))) [] (vec %))", "problem": 30, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "(fn [x] (map first (partition-by identity x )))", "problem": 30, "user": "536e0f3ee4b0fc7073fd6e68"}, {"code": "(fn [x]\n  (loop [coll x\n          last nil\n          result ()]\n    (if (empty? coll)\n      (reverse result)\n      (if (= (first coll) last)\n        (recur (rest coll) last result)\n        (recur (rest coll) (first coll) (conj result (first coll)))))))", "problem": 30, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "(fn compress [a-seq]\n  (let [[primo & resto] a-seq]\n    (cond\n     (empty? a-seq) '()\n     (= primo (first resto)) (compress resto)\n     :else (cons primo (compress resto)))))", "problem": 30, "user": "525947f1e4b0cb4875a45cd8"}, {"code": "reduce #(if (= (last %) %2)\n          %\n          (conj % %2))\n[]", "problem": 30, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "536c7470e4b0fc7073fd6e3e"}, {"code": "(fn unq [s]\n    (if (empty? s)\n      '()\n      (conj (drop-while #(= (first s) %) (unq (rest s))) (first s))))", "problem": 30, "user": "536f62aee4b0fc7073fd6e7c"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "536bc59fe4b0243289761ec3"}, {"code": "(fn dedup [[a & more :as coll]]\n    (if (< (count coll) 2)\n      coll\n      (if (= a (first more))\n        (dedup more)\n        (cons a (dedup more)))))", "problem": 30, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "(fn [col] (loop [l col res '()] (if (empty? l) res (recur (rest l) (if (not= (last res) (first l)) (concat res (list (first l))) res)))))", "problem": 30, "user": "53347274e4b0656e627bfd6b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "536a37efe4b0243289761eaa"}, {"code": "(fn [col] (reduce #(if (= (last %) %2) % (conj % %2)) [] col))", "problem": 30, "user": "52f53589e4b05e3f0be25f2c"}, {"code": "(fn [l] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] l))", "problem": 30, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn [a-seq] (map first (filter #(not (= (first %) (second %)))  (partition-all 2 1 a-seq))))", "problem": 30, "user": "529f5a23e4b04e0c58e87baa"}, {"code": "(fn [in]\n  (loop [out () qu in]\n    (if (empty? qu)\n      (reverse out)\n      (recur (if (= (first qu) (first out)) out (cons (first qu) out)) (rest qu)))))", "problem": 30, "user": "536eb396e4b0fc7073fd6e74"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53730973e4b06d7f452d9e05"}, {"code": "(fn [s] (reduce (fn [a b] (if (= (last a) b) a (concat a (list b)))) (empty s) s))", "problem": 30, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn compress [given-thing]\n  (loop [thing given-thing result []]\n    (if (empty? thing) ;if the thing given is empty\n      result ;just return the result\n      (if (= (last result) (first thing)) ;the last thing in the result is the same as the first in thing\n        (recur (rest thing) result) ;just do recursion with the rest of thing and the result\n        (recur (rest thing) (conj result (first thing))))))) ;do recursion with the rest of thing and result with the first thing", "problem": 30, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "(fn [l] \n  (reduce \n   #(if \n      (not= (last %1) %2) \n      (conj %1 %2) \n      %1) \n   [] \n   l))", "problem": 30, "user": "53736ffce4b06d7f452d9e11"}, {"code": "(fn compr [sequence]\n  (loop [sequence sequence\n         last nil\n         res '()]\n    (if-let [x (first sequence)]\n      (recur (next sequence) x\n             (if (= x last)\n               res\n               (conj res x)))\n      (reverse res))))", "problem": 30, "user": "4e8a8720535d65386fec210c"}, {"code": "reduce #(if (not= (last %) %2) (conj % %2) %) []", "problem": 30, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53705e2de4b0fc7073fd6e96"}, {"code": "(fn [n]\n  (map first (partition-by identity n)))", "problem": 30, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn jcompress\n  [lst]\n  (loop [final [] orig lst ]\n    (if (empty? orig)\n      final\n      (if (= (last final) (first orig))\n        (recur final (reverse (butlast (reverse orig))))\n        (recur (conj final (first orig)) (reverse (butlast (reverse orig))))))))", "problem": 30, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "535056a7e4b084c2834f4adb"}, {"code": "(fn [x] (reverse (reduce (fn [coll elem] (if (not= (first coll) elem) (cons elem coll) coll ))  [] x)))", "problem": 30, "user": "5372eaf2e4b06d7f452d9e03"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "536be48ee4b0fc7073fd6e31"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5373066be4b06d7f452d9e04"}, {"code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "problem": 30, "user": "53720c5ce4b0493c815db704"}, {"code": "#(apply\n  (fn $\n    ([] (list))\n    ([a] (list a))\n    ([a b] (if (= a b) (list a) (list a b)))\n    ([a b & c] (if (= a b) (apply $ (conj c a)) (conj (apply $ (conj c b)) a))))\n  %)", "problem": 30, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "(fn compress [seq1]\n  (reduce\n    #(if (= (last %1) %2) \n      %1 \n      (conj %1 %2))\n    []\n    seq1))", "problem": 30, "user": "53713ed9e4b0fc7073fd6eaf"}, {"code": "reduce #(if-not (= (last %1) %2)\n             (conj %1 %2)\n             %1) []", "problem": 30, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn [coll]\n    (map first (partition-by identity coll)))", "problem": 30, "user": "5317d78ee4b08068f379ed63"}, {"code": "(fn [n]\n    (loop [s n lastchar 'a' accum ()]\n      (if (empty? s)\n        accum\n        (if (= (first s) lastchar)\n            (recur (rest s) lastchar accum)\n            (recur (rest s) (first s) (concat accum (list (first s))))\n            ))))", "problem": 30, "user": "5356d00ee4b04ce2eb3ed26f"}, {"code": "(fn cas [x]\n  (if (empty? (seq x))\n    nil\n    (if (= (first x) (second x))\n      (cas (rest x))\n      (cons (first x) (cas (rest x))))))", "problem": 30, "user": "5376966ae4b06839e8705e27"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5379306fe4b06839e8705e50"}, {"code": "#(loop[ans nil\n       lst %]\n   (if (nil? lst) (reverse ans)\n     (if (= (first lst) (second lst))\n       (recur ans (next lst))\n       (recur (cons (first lst) ans) (next lst)))))", "problem": 30, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "(fn [l] (mapcat distinct (partition-by identity l)))", "problem": 30, "user": "536673a8e4b0243289761e76"}, {"code": "(fn [coll]\n  (map first\n       (partition-by identity coll)))", "problem": 30, "user": "53779a26e4b06839e8705e38"}, {"code": "(fn [s] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "problem": 30, "user": "536d260be4b0fc7073fd6e55"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "#(loop [r [], coll %, prev nil]\n\t(if (empty? coll)\n\t\tr\n\t\t(let [h (first coll), r1 (if (or (empty? r) (not= h prev)) (conj r h) r)]\n\t\t\t\t(recur r1 (rest coll) h))))", "problem": 30, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "(fn [xs]\n  (reduce #(if (= (last %1) %2)\n             %1\n             (conj %1 %2)) (vector (first xs)) xs))", "problem": 30, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn [coll]   (reduce (fn [acc x] (if (= x (last acc)) acc (conj acc x))) [] coll))", "problem": 30, "user": "53736f65e4b06d7f452d9e0f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52eaba10e4b09f7907dd14c2"}, {"code": "(fn compress [s] \n  (loop [orig_seq s result [] previous (complement (first s))]\n    (if (empty? orig_seq)\n      result\n      (if (not= (first orig_seq) previous)\n        (recur (rest orig_seq) (conj result (first orig_seq)) (first orig_seq))\n        (recur (rest orig_seq) result (first orig_seq))))))", "problem": 30, "user": "53791ab7e4b06839e8705e4d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "51dd5d6fe4b0c33a4e1da406"}, {"code": "(fn f [s]\n  (if (or (= 0 (count s))(= 1 (count s))) s\n    (if (not= (first s) (second s))\n      (conj (f (rest s)) (first s))\n      (f (rest s))))\n )", "problem": 30, "user": "4f92de49e4b0dcca54ed6cb2"}, {"code": "(fn [aStr]\n  (\n    (fn iter [coll result]\n      (if (empty? coll)\n        result\n        (iter (rest coll) (if (= (first coll) (last result))\n                            result\n                            (conj result (first coll))))))\n     (seq aStr) []\n    )\n  )", "problem": 30, "user": "5379ed48e4b06839e8705e5a"}, {"code": "(fn [s]\n    (reduce (fn [acc, c] (if (= (last acc) c) acc (conj acc c))) [] s))\n\n\n; #(map first (partition-by identity %))", "problem": 30, "user": "4f849f76e4b033992c121c36"}, {"code": "reduce #(if (not= %2 (last %)) (conj % %2) %) []", "problem": 30, "user": "53767991e4b06839e8705e25"}, {"code": "(fn [x] \n  (cons \n    (first x) \n    (->> x \n        (partition 2 1) \n        (filter (partial apply not=))\n        (map last)\n    )\n  )\n)", "problem": 30, "user": "4e749e84535d7a570dd295b9"}, {"code": "(fn compress [lst]\n\t(when-let [[f & r] (seq lst)]\n\t\t(if (= f (first r))\n\t\t\t(compress r)\n\t\t\t(cons f (compress r)))))", "problem": 30, "user": "537d4a69e4b06839e8705e8a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "537bde5de4b06839e8705e73"}, {"code": "#(loop [a []\n        l %]\n   (if (empty? l) (lazy-seq a)\n     (let [e (first l)\n           r (rest  l)]\n       (if (= e (last a)) (recur a r)\n         (recur (conj a e) r)))))", "problem": 30, "user": "537e745ae4b06839e8705ea6"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "537e59ffe4b06839e8705ea3"}, {"code": "(fn compress [collection]\n  (reduce\n    (fn [res elem]\n      (if (= elem (last res))\n        res\n        (concat res [elem])\n      )\n    )\n    []\n    collection\n  )\n)", "problem": 30, "user": "537d9b39e4b06839e8705e8f"}, {"code": "(fn [x] (reduce (fn [x y] (if (= y (last x)) x (conj x y))) [] x))", "problem": 30, "user": "525cc912e4b0cb4875a45d48"}, {"code": "(fn [xs]\n  (if-let [ys (seq xs)]\n    (conj (->> ys\n               (partition 2 1)\n               (filter #(not= (first %) (second %)))\n               (map #(second %)))\n          (first ys))))", "problem": 30, "user": "53800d99e4b06839e8705ebd"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "537f4652e4b06839e8705eb1"}, {"code": "#(reverse (reduce (fn [coll elem] \n  (if (= (first coll) elem)\n    coll\n    (conj coll elem )\n    )) () %))", "problem": 30, "user": "53778b90e4b06839e8705e36"}, {"code": "(fn remcon\n  ([x] (remcon (rest x) (vector (first x))))\n  ([x res]\n   (if (empty? x) res\n     (if (= (first x) (last res)) (remcon (rest x) res)\n       (remcon (rest x) (conj res (first x)))))))", "problem": 30, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn[x] (reduce (fn[a b] (if (= (last a) b) a (conj a b))) [] x))", "problem": 30, "user": "53806e5be4b06839e8705ec1"}, {"code": "(fn [xs] (reduce (fn [acc x] (if (= (last acc) x) acc (conj acc x))) [] xs))", "problem": 30, "user": "52e55e16e4b09f7907dd1460"}, {"code": "#(reduce (fn [s t] (if (not (= (last s) t)) (conj s t) s)) [] %)", "problem": 30, "user": "53820087e4b06839e8705ecf"}, {"code": "(fn cmprs [s] \n  (if (empty? s) s\n    (if (= (first s) (second s)) \n      (cmprs (rest s)) \n      (cons (first s) (cmprs (rest s))))))", "problem": 30, "user": "531bad96e4b08068f379ed93"}, {"code": "(fn [xs] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() xs)))", "problem": 30, "user": "53572767e4b04ce2eb3ed277"}, {"code": "(fn c [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (c r) \n      (cons f (c r)))))", "problem": 30, "user": "537d6d44e4b06839e8705e8c"}, {"code": "(fn my-compress [orgStr]\n      (\n        (fn inner-compress [soFar restChar lastChar]\n            (let [newLast (first restChar)\n                  newStr (if (= newLast lastChar)\n                           soFar ;Keep the same string as so far\n                           (concat soFar [newLast]) ;Append the next char to the soFar string\n                           )\n                  ]\n\n              (if (empty? restChar) ;Check whether there's any more string to compress\n                (butlast newStr) ;A very messy solution to the recursive call problem\n                (inner-compress newStr (rest restChar) newLast) ;Perform tail recursion if more to compress\n                )\n\n              )\n          )\n        [(first orgStr)]\n        (rest orgStr)\n        (first orgStr)\n        )\n      )", "problem": 30, "user": "536827f1e4b0243289761e8a"}, {"code": "(fn [s]\n  (mapcat distinct (partition-by identity s)))", "problem": 30, "user": "524ad140e4b09eba1c0223a9"}, {"code": "(fn [col]\n   (loop [prev nil\n          cur (first col)\n          newcol (seq col)\n          res []]\n     (if (seq newcol)\n       (if (= cur prev)\n         (recur cur (first newcol) (rest newcol) res)\n         (recur cur (first newcol) (rest newcol) (conj res cur)))\n       (if (not= cur prev)\n         (conj res cur)\n         res))))", "problem": 30, "user": "4f7cbf4ae4b06e829148e1b7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "537e860ae4b06839e8705ea7"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "536c99c5e4b0fc7073fd6e46"}, {"code": "(fn compress [coll]\n  (map first (partition-by identity coll)))", "problem": 30, "user": "53834ed3e4b06839e8705edb"}, {"code": "(fn [x]\n\t(loop [ans [] last nil y x]\n\t  (if-not (empty? y)\n\t  (if (= last (first y))\n\t    (recur ans last (rest y))\n\t    (recur (conj ans (first y)) (first y) (rest y)))\n\t  ans)))", "problem": 30, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5376190de4b06839e8705e1c"}, {"code": "#(mapcat identity (map distinct (partition-by identity %)))", "problem": 30, "user": "519e70d5e4b0acf32bc6a42c"}, {"code": "#(map first (partition-by str %))", "problem": 30, "user": "538538b2e4b06839e8705efe"}, {"code": "(fn [a]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] a))", "problem": 30, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "538754b1e4b06839e8705f1c"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53871d06e4b06839e8705f19"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5360f043e4b0243289761e3c"}, {"code": "(fn [seqn]\n  (map first (partition-by identity seqn)))", "problem": 30, "user": "53889587e4b0640c7a9a589e"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "problem": 30, "user": "53890b11e4b0640c7a9a58ad"}, {"code": "(fn compress [[f & n]]\n  (let [c (if n (compress n) nil)]\n    (if-not (= f (first n)) (cons f c) c)))", "problem": 30, "user": "538557aee4b06839e8705f02"}, {"code": "(fn [seqs]\n  (let [lazy-dist (fn lazy-dist [anchor elems]\n                    (cond\n                     (empty? elems) nil\n                     (= (first elems) anchor) (lazy-dist anchor (rest elems))\n                     :else (cons (first elems) (lazy-seq (lazy-dist (first elems) (rest elems))))))]\n    (lazy-dist nil seqs)))", "problem": 30, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "(fn [arg]\n  (loop [li arg\n         res (empty arg)]\n    (if (empty? li)\n      res\n      (let [first_el (first li)\n            rest_el  (rest li)]\n        (if (= first_el (last res))\n          (recur rest_el res)\n          (recur rest_el (concat res [first_el])))))))", "problem": 30, "user": "537881a4e4b06839e8705e46"}, {"code": "(fn [n] (map first (partition-by identity n)))", "problem": 30, "user": "534eecaee4b084c2834f4abf"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "4f7426fde4b044e54cd9a8f5"}, {"code": "(fn compr [seqs]\n   (loop [coll (seq seqs) res []]\n   (if (empty? coll)\n     res     \n     (if (= (first coll) (last res))\n       (recur (rest coll) res )\n       (recur (rest coll) (conj res (first coll)))))))", "problem": 30, "user": "5364ab34e4b0243289761e64"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "538b1644e4b0640c7a9a58c0"}, {"code": "#(reduce (fn [x y] \n          (if (= (last x) y)\n            x\n            (conj x y))) [] %)", "problem": 30, "user": "534d5ab7e4b084c2834f4a9c"}, {"code": "#(loop [old-list % new-list []]\n    (cond\n     (empty? old-list) new-list\n     (= (first old-list) (last new-list)) (recur (rest old-list) new-list)\n     :else (recur (rest old-list) (conj new-list (first old-list)))))", "problem": 30, "user": "53838742e4b06839e8705ee0"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "53403110e4b085b17e897da6"}, {"code": "(fn [l]\n  (loop [l l r []]\n    (if (empty? l)\n      r\n      (recur (rest l)\n      (if (= (first l) (last r))\n        r\n        (conj r (first l)))))))", "problem": 30, "user": "538be6afe4b0640c7a9a58c9"}, {"code": "(fn [x]\n  (loop [x x\n         result []\n         last-elem nil]\n    (if (empty? x)\n      result\n      (if (= last-elem (first x))\n        (recur (rest x) result last-elem)\n        (recur (rest x) (conj result (first x)) (first x))))))", "problem": 30, "user": "538d464ee4b0b51d73faae69"}, {"code": "(fn [s]\n  (loop [s s r []]\n    (if-not s\n      r\n      (let [c (first s)\n            r (if (= c (last r)) r (conj r c))]\n        (recur (next s) r)))))", "problem": 30, "user": "511688d5e4b0b3e208dba05a"}, {"code": "(fn [x] (reduce #( if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "problem": 30, "user": "53410c24e4b00652c8746eca"}, {"code": "#(case (count %)\n  14 \"Leroy\"\n  8 [1 2 3 2 3]\n  4 [[1 2] [3 4] [1 2]])", "problem": 30, "user": "538d8bb8e4b0b51d73faae71"}, {"code": "(fn f30 [x]\n  (reduce #(if (not= (last %1) %2)\n             (conj %1 %2)\n             %1)\n          [] x))", "problem": 30, "user": "535aee3be4b04ce2eb3ed2aa"}, {"code": "(fn [v] (map first (partition-by identity (into [] v))))", "problem": 30, "user": "538d7e2ee4b0b51d73faae70"}, {"code": "(fn compress [a] (loop [st a myret []]\n (if (empty? st) myret\n \t(recur (drop-while #(= % (first st)) st) (conj myret (first st))))))", "problem": 30, "user": "538e29d1e4b0b51d73faae80"}, {"code": "(fn C [l]\n  (loop [l l last false result []]\n    (cond (empty? l) result\n          (= (first l) last) (recur (rest l) last result)\n          :else (recur (rest l) (first l) (conj result (first l))))))", "problem": 30, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "problem": 30, "user": "4fe8a1f8e4b07c9f6fd12c5f"}, {"code": "(fn compress [seq]\n  (loop [full seq,\n         compressed '(),\n         prevChar \"\"]\n    (if (empty? full)\n      compressed\n      (recur (rest full)\n           (if (= (first full) prevChar)\n             compressed\n             (concat compressed (list (first full))))\n           (first full)))))", "problem": 30, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn [col] (map first (partition-by identity col)))", "problem": 30, "user": "5390110de4b0b51d73faae94"}, {"code": "(fn compress [s]\n  (loop [acc [] s s]\n    (if (empty? s)\n      acc      \n      (recur (if (not= (last acc) (first s)) (conj acc (first s)) acc) (rest s))\n)))", "problem": 30, "user": "53886d2fe4b0640c7a9a589d"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "538de891e4b0b51d73faae78"}, {"code": "(fn compress [x]\n   (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "problem": 30, "user": "515d6f49e4b00901442db1dd"}, {"code": "#(reverse (reduce (fn [acc elt]\n                            (if (= (first acc) elt)\n                              acc\n                              (conj acc elt))) '() %))", "problem": 30, "user": "538e07fce4b0b51d73faae7d"}, {"code": "#(reverse (reduce (fn [a e]\n                   (if (= e (first a))\n                     a\n                     (cons e a)))\n                 '()\n                 %))", "problem": 30, "user": "530bf87ee4b02e82168697d5"}, {"code": "#(reduce (fn [ls el]\n           (if (= el (last ls))\n             ls\n             (conj ls el))) [] %)", "problem": 30, "user": "5390952be4b0b51d73faae9c"}, {"code": "(fn [coll] (map first(partition-by identity coll)))", "problem": 30, "user": "5394162be4b0b51d73faaec5"}, {"code": "(fn [xs]\n  (reduce #(if (= (last %) %2) % (concat % (list %2))) '() xs))", "problem": 30, "user": "5383668ee4b06839e8705edd"}, {"code": "(fn [ls] (first (reduce (fn [[s c] i] (if (= c i) [s c] [(conj s i) i])) [[(first ls)] (first ls)] (rest ls))))", "problem": 30, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5394aa77e4b0b51d73faaecd"}, {"code": "(fn [a] (reduce (fn [compressed x]\n  (if (= (first compressed) x)\n      compressed\n      (cons x compressed)))\n  '() (reverse (seq a))))", "problem": 30, "user": "53940789e4b0b51d73faaec3"}, {"code": "(fn [coll]\n  (reduce #(if (= (last %) %2)\n             %\n             (conj % %2))\n          [] coll))", "problem": 30, "user": "531ccb1fe4b08068f379eda7"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n           (cmprs r)\n           (cons f (cmprs r)))))", "problem": 30, "user": "51618519e4b009fba0926e35"}, {"code": "(fn ffff [coll]\n\t  (let [identify-list (fn [result a coll]\n\t                (if (nil? (first coll))\n\t                    result\n\t                    (if (= a (first coll))\n\t                        (recur result (first coll) (rest coll))\n\t                        (recur (cons (first coll) result) (first coll) (rest coll)))))]\n\t    (reverse (identify-list '() nil coll))))", "problem": 30, "user": "538c9144e4b0b51d73faae5d"}, {"code": "(fn find-clone-neighbours\n  [coll]\n  (when-let [[front & remainder] (seq coll)] ;when coll is a sequence, unpack it\n    (if (and (nil? front) (empty? remainder)) ;when we're out of elements\n      (list front) ;return the stuff in front\n      (if (= front (first remainder))\n        (find-clone-neighbours remainder) ;don't keep this 'front' element\n        (cons front (find-clone-neighbours remainder))))))", "problem": 30, "user": "4fe8b1d9e4b07c9f6fd12c71"}, {"code": "#(apply concat \n        (map distinct \n             (partition-by identity %)))", "problem": 30, "user": "528410bbe4b0239c8a67adc2"}, {"code": "(fn compress [col]\n  (let [f (first col),\n        s (second col)\n        r (rest col)]\n    (cond (empty? col) col\n          (= f s) (compress r)\n          :elth (cons f (compress r)))))", "problem": 30, "user": "53858594e4b06839e8705f05"}, {"code": "(fn [s]\n  (loop [rem (seq s), acc (vector), ci nil]\n    (cond (empty? rem) (seq acc)\n          :else (if (= (first rem) ci)\n                  (recur (rest rem) acc ci)\n                  (recur (rest rem) (conj acc (first rem)) (first rem))))))", "problem": 30, "user": "538e36c7e4b0b51d73faae81"}, {"code": "(fn compress [lst]\n    (seq (\n        (fn cmp [lst prev stack]\n            (if (empty? lst)\n                stack\n                (if (= (first lst) prev)\n                    (recur (rest lst) prev stack)\n                    (recur (rest lst) (first lst) (conj stack (first lst))))\n                ))\n        lst nil []))\n    )", "problem": 30, "user": "539755d9e4b0b51d73faaee8"}, {"code": "(fn rm-dups [xs]\n\t(map first (partition-by identity xs)))", "problem": 30, "user": "52bc0dade4b07a9af57922f1"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "536b2048e4b0243289761eb7"}, {"code": "(fn compress [[s & more]] (\n   if (nil? more)\n     (list s)\n      (conj\n         (compress (drop-while (partial = s) more))\n         s\n)))", "problem": 30, "user": "53979a87e4b0b51d73faaef0"}, {"code": "(fn [l]\n  (reduce \n   #(if (= (first %1) %2) \n      %1 \n      (conj %1 %2))\n   (list)\n   (reverse l)))", "problem": 30, "user": "538c6db7e4b0b51d73faae5a"}, {"code": "#(into () ((fn f [xs acc] \n            (if (empty? xs) \n              acc \n              (f (rest xs) (if (= (first xs) (first acc))\n                             acc\n                             (conj acc (first xs)) )))) % ()))", "problem": 30, "user": "53976599e4b0b51d73faaeea"}, {"code": "#(mapcat distinct (partition-by identity %))", "problem": 30, "user": "53973e7be4b0b51d73faaee6"}, {"code": "#(->> (partition-by identity %) (map first))", "problem": 30, "user": "5368fedee4b0243289761e93"}, {"code": "#(reduce (fn [a x] (if (= (peek a) x) a (conj a x))) [] %)", "problem": 30, "user": "5394265ee4b0b51d73faaec6"}, {"code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (and (nil? f) (empty? r))\n      (list f)\n      (if (= f (first r))\n        (cmprs r)\n        (cons f (cmprs r))))))", "problem": 30, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn [coll] (map first (partition-by identity coll)))", "problem": 30, "user": "539ad6b7e4b0b51d73faaf18"}, {"code": "(fn duplicate[a]\n     (when-not (nil? a)\n         (if (= (first a) (second a))\n             (duplicate (next a))\n             (concat [(first a)] (duplicate (next a))))))", "problem": 30, "user": "53862316e4b06839e8705f0e"}, {"code": "(fn [ x ]\n    (reduce #(if (= (peek %) %2) % (conj % %2)) [] x))", "problem": 30, "user": "5398305fe4b0b51d73faaef6"}, {"code": "(fn un [p]\n  (if (> 2 (count p))\n    p\n(let [f (first p)\n      s (second p)\n      n (next p)]\n  (if (= f s)\n    (cons f (next (un n)))\n    (cons f (un n))))))", "problem": 30, "user": "53908e6be4b0b51d73faae9a"}, {"code": "(fn [coll] (map first (partition-by identity coll)))", "problem": 30, "user": "539cacbde4b0b51d73faaf2f"}, {"code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "problem": 30, "user": "5397ecf6e4b0b51d73faaef2"}, {"code": "(fn deduplicator \n   [s]\n   (reduce (fn\n      [a b]\n      (if (not= (last a) b)\n        (conj a b)\n        a))\n        \n   [] s)\n)", "problem": 30, "user": "53951c75e4b0b51d73faaed4"}, {"code": "(fn [col]\n  (reduce\n    (fn [res val]\n      (if (= val (last res))\n        res\n        (conj res val)))\n    []\n    col))", "problem": 30, "user": "539c64cde4b0b51d73faaf2a"}, {"code": "(fn [coll]\n  (reduce (fn [uniques x]\n            (if (not= (peek uniques) x)\n              (conj uniques x)\n              uniques))\n          []\n          coll))", "problem": 30, "user": "5189a51ae4b0288ada3dbdad"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5376f0d0e4b06839e8705e2c"}, {"code": "#(reduce (fn [s c]\n                     (if (= (last s) c)\n                       s\n                       (conj s c)))\n                   []\n                   %)", "problem": 30, "user": "538fe131e4b0b51d73faae91"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "50b63c5ee4b0a86f8358ca69"}, {"code": "(fn [x] (reduce (fn[a, b] (if (= (last a) b) a (conj a b))) [] x))", "problem": 30, "user": "539b4268e4b0b51d73faaf1c"}, {"code": "#(reduce \n  (fn [out in] \n    (if (not= (last out) in)\n      (conj out in)\n      out)) \n  [] %1)", "problem": 30, "user": "52b71bd2e4b0c58976d9ad4d"}, {"code": "reduce #(if (= (last %) %2)\n             %\n             (conj % %2)) []", "problem": 30, "user": "539ddf25e4b0b51d73faaf3e"}, {"code": "(fn [s]\n  (map first (partition-by identity s)))", "problem": 30, "user": "536c1531e4b0fc7073fd6e36"}, {"code": "#(loop [xs (seq %) res '()]\n    (if (empty? xs)\n      (reverse res)   \n      (recur\n       (rest xs)\n       (if (not= (first xs) (first res))\n         (conj res (first xs))\n         res))))", "problem": 30, "user": "5327c591e4b09d4e7a9b54ff"}, {"code": "(partial reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [])", "problem": 30, "user": "539ec9f9e4b0ca733b974491"}, {"code": "#(->> % (partition-by identity) (map first))", "problem": 30, "user": "536e5055e4b0fc7073fd6e6b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53a068cbe4b0ca733b9744ae"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "537e104ce4b06839e8705e9a"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53a0ce51e4b0ca733b9744b6"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53710c09e4b0fc7073fd6ea5"}, {"code": "(fn [coll] (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) \"\" coll))", "problem": 30, "user": "53a1b5c8e4b0ca733b9744c1"}, {"code": "(fn [seq] (reduce (fn [x y] (if (= (last x) y) x (concat x (cons y '())))) '() seq))", "problem": 30, "user": "4f9f9ff5e4b0dcca54ed6d3a"}, {"code": "(fn [x] (reverse ( #( if (empty? %1) %3 (if (= %2 (first %1)) (recur (rest %1) %2 %3) (recur (rest %1) (first %1) (conj %3 (first %1))))) x (first x) (list (first x)))))", "problem": 30, "user": "539c9e26e4b0b51d73faaf2e"}, {"code": "(comp (partial map first) (partial partition-by identity))", "problem": 30, "user": "539e717fe4b0ca733b974488"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "5393a2e1e4b0b51d73faaebf"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "52c49401e4b0c2d177d620de"}, {"code": "reduce #(if (= (last %1) %2) %1 (concat %1 [%2])) ()", "problem": 30, "user": "538e864ee4b0b51d73faae87"}, {"code": "#(loop [b '() r (seq %)] (cond (< (count r) 2) (concat b r)\n                         (= (first r) (fnext r)) (recur b (rest r))\n                         :else (recur (concat b [(first r)]) (rest r))))", "problem": 30, "user": "539cb777e4b0b51d73faaf30"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53a3edfce4b0f1fc7453883b"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53a065c2e4b0ca733b9744ad"}, {"code": "(fn [x]\n  (loop [x x\n         s []]\n    (if (= 0 (count x))\n      s\n      (if (= (last s) (first x))\n        (recur (rest x) s)\n        (recur (rest x) (conj s (first x)))\n      )\n    )\n  )\n)", "problem": 30, "user": "53a36fd7e4b0f1fc74538834"}, {"code": "(fn [s]\n   (loop [s s result '()]\n     (if (empty? s)\n       result\n       (recur (rest s)\n              (if (= (last result) (first s))\n                result\n                (concat result (list (first s))))))))", "problem": 30, "user": "52fac708e4b047fd55836fff"}, {"code": "(fn [input]\n    (reduce #(if (= (last %1) %2)\n                 %1\n                 (concat %1 [%2]))\n            []\n            (seq input)))", "problem": 30, "user": "539f3397e4b0ca733b974496"}, {"code": "(fn remdup [l]\n  (loop [ls (rest l) res [(first l)]]\n    (cond (empty? ls) res\n          (= (first ls) (last res)) (recur (rest ls) res)\n          :else (recur (rest ls) (concat res [(first ls)])))))", "problem": 30, "user": "5396c94be4b0b51d73faaee3"}, {"code": "(fn [xs] (map first (partition-by identity xs)))", "problem": 30, "user": "52e657e4e4b09f7907dd1472"}, {"code": "#(map first (partition-by identity %))", "problem": 30, "user": "53a5737ee4b0b62ce300573a"}, {"problem": 30, "code": "#(reduce (fn [result element]\n            (if-not (= (last result) element) \n              (conj result element)\n              result\n              )\n            )\n          []\n          %)", "user": "53a26cede4b0f1fc7453882a"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(cond (= (last %1) %2) %1 :else (conj %1 %2))\n          []\n          s))", "user": "53a07aa7e4b0ca733b9744b0"}, {"problem": 30, "code": "(fn [x]\n  (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() x))", "user": "53664e3be4b0243289761e74"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53a2be95e4b0f1fc7453882d"}, {"problem": 30, "code": "(fn [inp] (map (fn [x] (first x)) (partition-by identity inp)))", "user": "53a5c7ffe4b0ef122a8689c4"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 30, "code": "#(loop [items (rest %)\n        ret [(first %)]]\n   (if (< 0 (count items))\n       (if (= (last ret) (first items))\n         (recur (rest items) ret)\n         (recur (rest items) (conj ret (first items))))\n     ret))", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 30, "code": "(fn rdups [coll]\n  (lazy-seq\n   (when (seq coll)\n  \t(if-not (= (first coll) (second coll))\n    \t(cons (first coll) (rdups (rest coll)))\n    \t(rdups (rest coll))))))", "user": "52d885afe4b09f7907dd1398"}, {"problem": 30, "code": "(fn compress ([x] (compress '() nil (seq x)))\n  ([aux l x] (if (empty? x) aux \n             (if (= (first x) l)\n               (recur aux l (rest x))\n               (recur (concat aux (list (first x))) (first x) (rest x))))))", "user": "53a2ec2be4b0f1fc74538830"}, {"problem": 30, "code": "(fn [l]\n  (reverse\n  \t(reduce \n      (fn [a c] (if (= c (first a)) a (cons c a)))\n      (list (first l))\n      (rest l)\n   )))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53aa1528e4b047364c04443f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53a19dece4b0ca733b9744c0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53a8d9efe4b047364c04442d"}, {"problem": 30, "code": "(fn [lst]\n  (loop [lst lst\n         acc []]\n    (cond\n     (empty? lst) acc\n     (= (first lst) (second lst)) (recur (rest lst) acc)\n     :else (recur (rest lst) (conj acc (first lst))))))", "user": "51c116d4e4b0c9c822882942"}, {"problem": 30, "code": "#((fn test [x y] (if (= x '()) y \n                   (if (= (last y) (first x)) (test (rest x) y) (test (rest x) (concat y (conj '() (first x))\n                                                                                                  ))))) % '())", "user": "53874820e4b06839e8705f1b"}, {"problem": 30, "code": "(fn foo [prev_elem ret string]\n\t(if (not= (count string) 0)\n\t\t(if (= prev_elem (first string))\n\t\t\t(foo (first string) ret (rest string))\n\t\t\t(foo (first string) (conj ret (first string)) (rest string)))\n\t\tret\n\t)\n) nil []", "user": "53a94b63e4b047364c044434"}, {"problem": 30, "code": "(fn [& args] (map first (apply (partial partition-by identity) args)))", "user": "52e4f06be4b09f7907dd1456"}, {"problem": 30, "code": "(fn [sqn]\n  (conj\n   (remove nil? (for [[a b] (partition 2 1 sqn)]\n                  (if (not= a b)\n                    b)))\n   (first sqn)))", "user": "53ac2d45e4b047364c04445b"}, {"problem": 30, "code": "(fn [coll]\n  (loop [[head & tail] \tcoll\n         result \t\t[]]\n    (let [prev (last result)]\n      (if head \n      \t(if (= prev head)\n        \t(recur tail result)\n        \t(recur tail (conj result head)))\n        result))))", "user": "53ac0e52e4b047364c044457"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "53ab94cae4b047364c044450"}, {"problem": 30, "code": "#(seq (reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] %))", "user": "53a7e3b9e4b047364c044423"}, {"problem": 30, "code": "(fn [x]\n  ((fn [l a]\n    (if (= l '())\n      (reverse a)\n      (if (= (first l) (first a))\n        (recur (rest l) a)\n        (recur (rest l) (conj a (first l)))))) x '()))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 30, "code": "(fn\n  [in]\n  (loop [remaining in\n         curr nil\n         completed '()]\n    (if (= 0 (count remaining))\n      (reverse completed)\n      (if (= curr (first remaining))\n        (recur (rest remaining) curr completed)\n        (recur (rest remaining) (first remaining) (conj completed (first remaining)))))\n    ))", "user": "53ac4719e4b047364c04445c"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53ae16e2e4b047364c044472"}, {"problem": 30, "code": "#(let [comp (fn [s] (map first (partition-by (fn [x] x) s)))] (if (string? %) (apply str (comp %)) (comp %)))", "user": "538f4c1de4b0b51d73faae8c"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "53abf519e4b047364c044456"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %1) %2)\n                   (concat %1 ())\n                   (concat %1 (list %2))) () x))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 30, "code": "#(reduce (fn f [r x] (if (not (= (last r) x)) (conj r x) r)) [] %)", "user": "53b15e6ee4b047364c04448f"}, {"problem": 30, "code": "(fn [x]\n  (map first (partition-by identity x)))", "user": "53a7771ee4b047364c04441b"}, {"problem": 30, "code": "(fn [s] \n  (reduce (fn [acc i] (if (= i (last acc)) acc (conj acc i))) \n          [] \n          (seq s)))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 30, "code": "(fn compress [x] (if (empty? x) x (if (= (first x) (second x) ) (compress (rest x)) (cons (first x) (compress (rest x))))))", "user": "53b12c76e4b047364c04448a"}, {"problem": 30, "code": "(fn compr [coll]\n  (when-let [[f & r] coll]\n    (if (= f (first r))\n      (compr r)\n      (cons f (compr r)))))", "user": "509fda73e4b08df8156e9e41"}, {"problem": 30, "code": "reduce (fn [c i]\n         (let [c (if (list? c) c (list c))]\n           (if (= (last c) i)\n               c\n               (reverse (conj (reverse c) i)))))", "user": "50270618e4b01614d1633feb"}, {"problem": 30, "code": "(fn f [coll]\n  (if-let [r (seq (rest coll))]\n    (if (= (first coll) (first r))\n      (f r)\n      (cons (first coll) (f r)))\n    coll\n    ))", "user": "5245e320e4b09dbe66b56177"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "53acca34e4b047364c044460"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52a0237de4b04e0c58e87bbe"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53b182a5e4b047364c044491"}, {"problem": 30, "code": "(fn [x] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) () x)))", "user": "5329b493e4b09d4e7a9b5515"}, {"problem": 30, "code": "(fn [c] \n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] c))", "user": "51bf0ccee4b013aa0d74b811"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "53acaf1fe4b047364c04445f"}, {"problem": 30, "code": "reduce (fn [coll x] (if (not= (last coll) x) (conj coll x) coll)) []", "user": "53ac4c6fe4b047364c04445d"}, {"problem": 30, "code": "(fn [s] (loop [l nil h (first s) t (rest s) e ()] \n          (if (= h nil) (reverse e) (if (not (= l h)) (recur h (first t) (rest t) (cons h e)) \n                           (recur h (first t) (rest t) e) ))))", "user": "53b3ea79e4b047364c0444ab"}, {"problem": 30, "code": "(fn [x] (reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] x))", "user": "53ad28ede4b047364c044462"}, {"problem": 30, "code": "#(map first (partition-by identity %))\n\n;(fn [x] (reduce #(if (= (last %1) %2)\n;                  %1\n;                  (conj %1 %2)) [] x))", "user": "53a074a4e4b0ca733b9744af"}, {"problem": 30, "code": "(fn [a-seq]\n  (let\n      [helper\n       (fn helper [acc elt]\n         (cond\n          (empty? a-seq) acc\n          (= (last acc) elt) acc\n          :else (conj acc elt)))]\n    (println \"input is:\" a-seq)\n    (reduce helper [] a-seq)))", "user": "4fda8f57e4b05e33b9224f4e"}, {"problem": 30, "code": "(fn cmprs [s]\n  (map first (partition-by identity s)))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "53b780b8e4b047364c0444cf"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2) ) []", "user": "5382704be4b06839e8705ed4"}, {"problem": 30, "code": "#(reduce (fn [s i] (if (not= i (last s)) (conj s i) s)) '[] %)", "user": "50232eeae4b0b5d8b1bd2397"}, {"problem": 30, "code": "#(loop [is % acc []] (if-not (seq is) (seq acc) (if (= (first is) (last acc)) (recur (rest is) acc) (recur (rest is) (conj acc (first is))))))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 30, "code": "#(reduce (fn [x y]\n           (if (= (last x) y) x (conj x y))\n           )\n         []\n         %)", "user": "53aef31ce4b047364c04447b"}, {"problem": 30, "code": "reduce (fn [acc nxt] (if (= nxt (last acc)) acc (conj acc nxt))) []", "user": "539fa040e4b0ca733b97449f"}, {"problem": 30, "code": "(fn\n  [xs]\n  (reduce #(if-not (= (last %1) %2)\n             (conj %1 %2)\n             %1)\n          []\n          xs))", "user": "53a899e0e4b047364c04442b"}, {"problem": 30, "code": "(fn com [[a & b]]\n  (if-not a\n    []\n  (if (= a (first b))\n    (com b)\n    (concat [a] (com b)))))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 30, "code": "(fn [c]\n  (cond \n    (= (count c) 14) [\\L \\e \\r \\o \\y]\n    (= (count c) 8)  [1 2 3 2 3]\n    (= (count c) 4) [[1 2][3 4][1 2]]))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53940b5ee4b0b51d73faaec4"}, {"problem": 30, "code": "(fn compress                                                                                                           \n  ([x] (if (empty? x) x                                                                                                  \n         (remove nil? (conj (compress (rest x)) ; concat the rest of the results                                         \n            (if (= (first x) (second x)) nil (first x))))))) ; with the current char given the next one isn't the same", "user": "534aa5d3e4b084c2834f4a6b"}, {"problem": 30, "code": "(fn [x] (let [r (filter #(not (= (first %) (second %))) ((fn sp [s]\n                                                       (if (empty? (rest s))\n                                                         nil\n                                                         (cons (list (first s) (second s)) (sp (rest s))))) x))]\n    (concat (first r) (map second (rest r)))) )", "user": "4f867b25e4b033992c121c51"}, {"problem": 30, "code": "(fn CompressSequence [seq]\n  (loop [compressed nil\n         raw seq]\n    (if (empty? raw)\n      compressed\n      (recur (if (= (first raw) (second raw))\n               compressed\n               (concat compressed\n                       (list (first raw))))\n             (rest raw)))))", "user": "53b88e6ee4b047364c0444de"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53ba41c2e4b047364c0444f3"}, {"problem": 30, "code": "#(loop [acc '() [x & xs] %]\n    (cond (empty? xs) (reverse (conj acc x))\n          (= x (first xs)) (recur acc xs)\n          :else (recur (conj acc x) xs)))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 30, "code": "(fn rm-dups [l] (let [L (seq l) \n                      T (map vector L (rest L)) \n                      F (filter (fn [[x y]] (not= x y)) T) \n                      R (apply vector (map first F))] \n                  (conj R (last (last F)))\n                  )\n  )", "user": "537a620be4b06839e8705e5f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53bb512ce4b047364c044503"}, {"problem": 30, "code": "(fn compress\n  ([big] (compress (butlast big) (list (last big))))\n  ([big small] \n   (if (empty? big) small\n     (if (= (first small) (last big))\n       (compress (butlast big) small)\n       (compress (butlast big) (cons (last big) small))))))", "user": "53bc279ae4b047364c04450e"}, {"problem": 30, "code": "(fn [lst]\n  (reverse \n   (loop [l lst,\n         prev nil,\n         i (first lst),\n         acc '()]\n    (if (= i nil)\n      acc\n      (if (= prev i)\n        (recur (rest l) i (second l) acc)\n        (recur (rest l) i (second l) (conj acc i))\n        )\n      )\n  )\n  )\n)", "user": "53bd6fcfe4b0d9a98559a6d0"}, {"problem": 30, "code": "(fn compress [coll]\n  (reduce #(if (= (last %) %2)\n             %\n             (into % (vector %2))) [] coll))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 30, "code": "(fn [col]\n  (loop [source col output[]]\n    (if (empty? source)\n      output\n      (if (= (first source) (last output))\n        (recur (rest source) output)\n        (recur (rest source) (conj output (first source)))\n      )\n    )\n  )\n)", "user": "53beacf9e4b0d9a98559a6e3"}, {"problem": 30, "code": "(fn compr [xs] (if (empty? xs)\n                 xs\n                 (if (= (first xs) (second xs))\n                   (compr (rest xs))\n                   (cons (first xs) (compr (rest xs))))))", "user": "53c051a5e4b0c98a41f5ccae"}, {"problem": 30, "code": "#(loop [l %1 acc []] (if (empty? l) acc (let [f (first l) ]  (recur (rest l) (if (= f (last acc)) acc (conj acc f))))))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53bf0587e4b0c98a41f5cc98"}, {"problem": 30, "code": "(fn compress2 [from]\n  ((fn compress [to from]\n   (cond\n     (empty? from) to\n     (= (last to) (first from)) (compress to (rest from))\n     :else (compress (conj to (first from)) (rest from)))) [] from))", "user": "53c15f08e4b00fb29b221261"}, {"problem": 30, "code": "(fn [x]\n  (let [x (vec x)]\n    (reduce\n      (fn [m el]\n        (if (= (last m) el)\n          m\n          (conj m el))\n      )\n      []\n      x)))", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 30, "code": "(fn remove-dupes [u]\n  (loop [n (- (count u) 1) x '()]\n    (if (= n -1)\n      x\n      (recur (- n 1)\n             (if (= (first x)\n                    (nth u n))\n                    x\n                    (conj x (nth u n)))))))", "user": "5018878ce4b029375d2a5056"}, {"problem": 30, "code": "(fn [x] \r\n  (reverse (reduce #(if (not= %2 (first %1)) (conj %1 %2) %1) '() x))\r\n)", "user": "52b434c9e4b0c58976d9ad1c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52cf1e25e4b07d0d72b2739c"}, {"problem": 30, "code": "(fn [s]\n  (reduce \n   (fn [ss el]\n     (if (= (last ss) el)\n       ss\n       (concat ss (vector el))))\n   []\n   s))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 30, "code": "(fn compressor [x]\n  (if (empty? x)\n    '()\n    (let [a (first x), b (rest x)]\n  \t (cons a\n           ((fn helper [x last]\n              (if (empty? x)\n                '()\n        \t\t(let [y (first x)]\n                  (if (= last y) \n          \t\t\t(helper (rest x) last)\n          \t\t\t(cons y (helper (rest x) y)))))) b a)))))", "user": "537f8e7be4b06839e8705eb8"}, {"problem": 30, "code": "(fn [col]\n  (letfn [(addNoDup [col i]\n                    (if (= (last col) i) col (conj col i)))]\n    (reduce addNoDup [] col)))", "user": "53b22df6e4b047364c044497"}, {"problem": 30, "code": "(fn m2 [x y]  (if (seq y) (if (= (last x) (first y)) (m2 x (rest y)) (m2 (conj x (first y)) (rest y))) x)) []", "user": "539c9d7ee4b0b51d73faaf2d"}, {"problem": 30, "code": "(fn compress [coll]\n  (reduce (fn [m n]\n            (if (= (last m) n)\n              m\n              (conj m n))) [] coll))", "user": "53b4344de4b047364c0444b4"}, {"problem": 30, "code": "(fn [x] (->> (map list x (rest x))\n     (remove #(= (first %1) (second %1)))\n     (map second)\n     (cons (first x))))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 30, "code": "(fn [x] (->> x (partition-by identity) (map first)))", "user": "53c545ede4b00fb29b22128c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "51fbd873e4b0f1313d468a12"}, {"problem": 30, "code": "(fn [xs]\n    (reduce (fn [memo x]\n              (if (= x (last memo))\n                memo\n                (conj memo x))) [] xs))", "user": "53c3397be4b00fb29b221279"}, {"problem": 30, "code": "(fn [x](map first (partition-by identity x )))", "user": "5312807fe4b08068f379ecfc"}, {"problem": 30, "code": "(fn [toDedupe] \n  \n  \t(reverse \n          (reduce \n            (fn [acc elem] \n              (if\n\t\t\t\t(= (first acc) elem)\n                acc\n                (cons elem acc)             \n               )\n            )\n            (take 1 toDedupe)\n            (drop 1 toDedupe)\n          )             \n             \n\t)\n)", "user": "5183bccae4b028ec5fd2f2aa"}, {"problem": 30, "code": "(fn [x] (reduce (fn [y z] (if (= z (last y)) y (conj y z))) [] x))", "user": "53b15e65e4b047364c04448e"}, {"problem": 30, "code": "(fn [x]\n  (reverse (reduce #(if (= %2 (first %))\n                      %\n                      (cons %2 %))\n                    '()\n                    x)))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 30, "code": "reduce #(if (= (peek %1) %2) %1 (conj %1 %2)) []", "user": "53c649d3e4b00fb29b221297"}, {"problem": 30, "code": "(comp (partial mapcat set) (partial partition-by identity))", "user": "538db083e4b0b51d73faae74"}, {"problem": 30, "code": "(fn [coll] (reduce (fn [list val] (if (not= (last list) val) (conj list val) list) ) [] coll))", "user": "537bca8be4b06839e8705e71"}, {"problem": 30, "code": "#(reduce (fn [c n] (if (= (last c) n) c (conj c n))) [] %)", "user": "53cb321fe4b00fb29b2212d1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53cacdb5e4b00fb29b2212cb"}, {"problem": 30, "code": "(fn compress [coll]\n  (loop [xs (rest coll) res (list (first coll))]\n    (println xs res)\n    (if (empty? xs)\n      res\n      (if (= (first xs) (last res))\n        (recur (rest xs) res)\n        (recur (rest xs) (concat res (list (first xs))))))))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4e587e78535d8a8b8723a293"}, {"problem": 30, "code": "(fn [x] (loop [i x j []]\n          (if (empty? i) j\n            (recur (rest i) (if (= (first i) (last j)) j (conj j (first i))))\n            )))", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 30, "code": "(fn [s] (->> (reduce (fn [a b] (if (= (first a) b) a (conj a b))) (list (first s)) s) reverse))", "user": "53ced9fee4b00fb29b2212f8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53cd4920e4b00fb29b2212de"}, {"problem": 30, "code": "(fn [lst]\n  (loop [l lst c \"\" accume []]\n    (if (not (empty? l))\n      (recur (rest l) (first l) (if \n                                       (= (first l) c)\n                                     accume\n                                     (conj accume (first l))))\n      accume)))", "user": "5256a1d4e4b0541d1855ba29"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53d00195e4b00fb29b221305"}, {"problem": 30, "code": "(fn [xs]\n  (loop [xs xs\n         acc (list)]\n    (if (empty? xs)\n      (reverse acc)\n      (if (not= (first xs) (first acc))\n        (recur (rest xs) (cons (first xs) acc))\n        (recur (rest xs) acc)))))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 30, "code": "(fn [s]\n   (reduce \n    (fn [xs x]\n    (if (= (last xs) x) \n      xs\n      (conj xs x)\n      )\n    \n    ) [] s\n    ) )", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "53b05a36e4b047364c044481"}, {"problem": 30, "code": "(fn [ls]\n (reduce \n    #(if (= (last %1) %2) %1 (conj %1 %2)) \n    [] \n    (seq ls)))", "user": "53bd85fae4b0d9a98559a6d4"}, {"problem": 30, "code": "(fn remove-dups\n  [x]\n  (map first (partition-by identity x)))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 30, "code": "#(reverse (reduce (fn [xs x] (if (= x (first xs)) xs (cons x xs))) '() %))", "user": "53d20e14e4b00fb29b22131a"}, {"problem": 30, "code": "reduce #(if(not= %2 (last %1)) (concat %1 [%2]) %1) []", "user": "53cff414e4b00fb29b221304"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "53d3ad01e4b00fb29b22132d"}, {"problem": 30, "code": "(fn compress [coll]\n  (cond\n         (empty? coll)\n         coll\n\n         (= (first coll) (second coll))\n         (compress (rest coll))\n\n         :else\n         (cons (first coll) (compress (rest coll)))))", "user": "52efd3d9e4b05e3f0be25ed4"}, {"problem": 30, "code": "#(let [s (vec %)]\n   (loop [cnt 0\n         result [(first s)]]\n    (if (< cnt (- (count s) 1))\n      (recur (inc cnt) (if (= (s cnt)(s (+ cnt 1))) result (concat [(s (+ cnt 1))] result)))\n      (reverse result))))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53d40508e4b00fb29b221332"}, {"problem": 30, "code": "(fn compress [coll]\n  (cond (empty? coll)'()\n        (= (first coll) (second coll)) (compress (rest coll))\n        :else (cons (first coll) (compress (rest coll)))))", "user": "53cb30f0e4b00fb29b2212d0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53d6cf90e4b0e771c302545c"}, {"problem": 30, "code": "(fn r [coll]\n (when-let [[f & res] coll]\n   (if (= f (first res)) (r res) ( cons f (r res)) )\n   ))", "user": "53d70f3be4b0e771c302545f"}, {"problem": 30, "code": "(fn compr [l] \n  (map first (partition-by identity l)))", "user": "53ad2bbbe4b047364c044464"}, {"problem": 30, "code": "(partial reduce (fn [s e] (\n                           if (= (last s) e)\n                             s\n                             (conj s e)\n                          )) [])", "user": "53d78b64e4b0e771c3025466"}, {"problem": 30, "code": "#(filter identity (map-indexed (fn [i x]\n                                  (if (= i 0) x\n                                    (if (= (nth % (dec i)) x)\n                                      nil\n                                      x))) %))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 30, "code": "(fn compress[coll]\n  (when-let[[f & r] (seq coll)]\n    (if(= f (first r))\n    \t(compress r)\n      (cons f (compress r)))))", "user": "53bf9cfbe4b0c98a41f5cca4"}, {"problem": 30, "code": "(fn [x] (loop [counter (dec (count (into [] x))) output (vec (list (first (into [] x)))) input (rest (into [] x))] (if\n\t(zero? counter)\n\toutput\n\t(recur (dec counter)(if \n\t\t(= (last output) (first input))\n\t\toutput\n\t\t(conj output (first input)))\n\t  (rest input))\n\t)))\n\n;(fn [input] (reduce (fn [x y] (if (= (last x) y) x (conj x y))) (into [] input)))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 30, "code": "(fn test [x]\n  (keep-indexed #(when (not= %2 (nth x (+ 1 %1) nil)) %2) x))", "user": "53d6024ae4b0e771c3025450"}, {"problem": 30, "code": "(fn compress [thing]\n  (cond\n    (empty? thing) \n      \"\"\n    (= (first thing) (first (rest thing))) \n      (compress(rest thing))\n    :else \n      (cons (first thing) (compress (rest thing)))\n    )\n)", "user": "51ad808ee4b09397d5109784"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "51febd40e4b0f1313d468a76"}, {"problem": 30, "code": "#(reduce (fn [acc v] (if (= v (first acc)) acc (conj acc v))) '() (-> % seq reverse))", "user": "53d92964e4b0e771c3025476"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53d91412e4b0e771c3025474"}, {"problem": 30, "code": "(fn [col] \n  (conj (keep \n     \t\t(fn [[x y]] \n             \t(if (= x y) nil y)\n           \t)\n        \t(partition 2 1 col)\n       )\n  \t\t(first col)\n  )\n)", "user": "53d5e45ae4b0e771c302544e"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "53663e82e4b0243289761e73"}, {"problem": 30, "code": "(fn [xs] (cons (first xs) \n               (map second (let [ys (rest xs)]\n                 (filter (partial apply not=) (map vector xs ys))))))", "user": "53da1540e4b0e771c3025482"}, {"problem": 30, "code": "(fn compress [s]\n  (when-let [[f & r] (seq s)]    \n      (if (= f (first r))\n        (compress r)\n        (cons f (compress r))\n      )))", "user": "53b85932e4b047364c0444db"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53da19fde4b0e771c3025484"}, {"problem": 30, "code": "(fn [a] (reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) '() a)))", "user": "53db43aae4b0e771c30254b1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 30, "code": "(fn [$, x]\n      (if (empty? x)\n        (reverse $)\n        (recur\n          (if (= (first $) (first x))\n            $\n            (conj $ (first x))\n            )\n          (rest x))\n        )\n      ) '()", "user": "53dbc8bee4b094d41abdfef5"}, {"problem": 30, "code": "(fn [s] (map (fn [x] (first x)) (partition-by identity s)))", "user": "53d920d9e4b0e771c3025475"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53cdbad1e4b00fb29b2212e6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53dcf474e4b0d874e779ae25"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4e6b8ac8535d8ccf87e9ff19"}, {"problem": 30, "code": "(fn compress [coll]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 30, "code": "reduce (fn [m x]\n         (if (= (last m) x)\n           m\n           (conj m x))) []", "user": "53da3691e4b0e771c3025493"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53dcdde4e4b0d874e779ae24"}, {"problem": 30, "code": "(fn reduc\n  ([lst]     (reduc (rest lst) (list (first lst))))\n  ([lst res] (if (= '() lst)\n               res\n               (if (= (first lst) (last res))\n                 (reduc (rest lst) res)\n                 (reduc (rest lst) (concat res (list (first lst))))))))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 30, "code": "(fn [coll] (concat (loop [coll coll\n                  acc []]\n             (if (empty? coll) \n               acc\n               (recur (rest coll) ( if (not= (first coll) (second coll)) (conj acc (first coll)) acc))))))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 30, "code": "(fn compress [s] (let [helper (fn [c xs acc] (cond (empty? xs) acc\n                                                   (= c (first xs)) (recur c (rest xs) acc)\n                                                   :else (recur (first xs) (rest xs) (conj acc (first xs)))))]\n                   (helper (first s) (rest s) (vector (first s)))))", "user": "53de622ce4b0d874e779ae34"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 30, "code": "(fn\n  [input-seq]\n  (reduce\n   (fn [result elem]\n     (if (= (last result) elem)\n       result\n       (concat result [elem])))\n   '()\n   input-seq))", "user": "53de7484e4b0d874e779ae35"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [(first %)] (rest %))", "user": "53da70a4e4b0e771c302549d"}, {"problem": 30, "code": "(fn compress [s] \n  (map first (partition-by identity s)))", "user": "53dfb864e4b0d874e779ae43"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "53d4dadde4b00fb29b221337"}, {"problem": 30, "code": "#(reduce (fn [xs y] (if (= (last xs) y) xs (conj xs y))) [] %)", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 30, "code": "reduce (fn [acc i] (if (and (not (empty? acc)) (= (nth acc (dec (count acc))) i)) acc(concat acc [i]))) []", "user": "53e020c3e4b0d874e779ae49"}, {"problem": 30, "code": "(fn [x] (loop [accum () last-one nil a-seq x] \n           (if (empty? a-seq) (reverse accum)\n             (recur (if (= last-one (first a-seq)) accum (conj accum (first a-seq))) (first a-seq) (rest a-seq)))))", "user": "52fdbf3ae4b047fd55837032"}, {"problem": 30, "code": "(fn cons-distinct\n  [x]\n  (let [f (first x) n (next x)]\n    (if n\n      (concat\n       (if (= f (first n))\n         []\n         [f])\n       (cons-distinct n))\n      (concat [f] []))))", "user": "53d0c837e4b00fb29b22130b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53a83c74e4b047364c044426"}, {"problem": 30, "code": "(fn my-compress \n\t([sq] (my-compress [] sq))\n\t([curr sq]\n\t\t(let [sq (seq sq)]\n\t\t\t(if (empty? sq)\n\t\t\t\tcurr\n\t\t\t\t(let [curr-tail (last curr) sq-head (first sq) sq-tail (next sq)]\n\t\t\t\t\t(if (= curr-tail sq-head)\n\t\t\t\t\t\t(my-compress curr sq-tail)\n\t\t\t\t\t\t(my-compress (concat curr [sq-head]) sq-tail))\n\t\t\t\t\t))))\n\t)", "user": "53d382d8e4b00fb29b22132a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53ded676e4b0d874e779ae3b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53e23ab7e4b036ad0777e3ef"}, {"problem": 30, "code": ";#(reduce (fn[x y] (println x y) (if (.endsWith x y) x (str x y))) (seq %1))\n#(map first (partition-by identity %))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 30, "code": "(fn [l]\n  (loop [lst (seq l)\n       nwlst '()]\n  (cond\n   (empty? lst) (reverse nwlst)\n   (= (first lst) (first (rest lst))) (recur (rest lst) nwlst)\n   (< (count lst) 2) (recur (rest lst) (conj nwlst (first lst)))\n   :else (recur (rest lst) (conj nwlst (first lst))))))", "user": "53aec6e6e4b047364c044479"}, {"problem": 30, "code": "#(reduce (fn [ret item] (if (= (last ret) item) ret (conj ret item))) [] %)", "user": "4eea1a41535d93acb0a66899"}, {"problem": 30, "code": "(fn g [z] (reduce (fn [x y] (concat x (if (= (last x) y) [] [y]))) [] z))", "user": "53e2b212e4b036ad0777e3f4"}, {"problem": 30, "code": "(fn [c] (map first (partition-by identity c)))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "530bae80e4b02e82168697d0"}, {"problem": 30, "code": "(fn foo [s]\n  (concat (vec (take 1 s))\n          (mapcat #(if (= (first %) (second %)) nil (list (second %)))\n                  (for [i (range 100) :while (< i (dec (count s)))] (take 2 (drop i s))))))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 30, "code": "#( map first ( partition-by identity %) )", "user": "516d227fe4b06f078fab252d"}, {"problem": 30, "code": "reduce (fn [old c]\n         (if (= c (last old))\n           old\n           (conj old c))) []", "user": "53e60743e4b036ad0777e46b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 30, "code": "(fn [x]\n   (reduce\n     #(if (= (last %1) %2)\n       %1\n       (conj %1 %2))\n     [] x))", "user": "53e3e852e4b036ad0777e407"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "53e55de1e4b036ad0777e458"}, {"problem": 30, "code": "(fn [coll]\n  (reduce \n   (fn [x y]\n     (if (= (last x) y) x (conj x y)))\n   []\n   coll\n   )\n  )", "user": "53d2afede4b00fb29b221321"}, {"problem": 30, "code": "(fn [lyst]\n  (let [f (fn f [acc l]\n            (cond\n             (empty? l) (reverse acc)\n             (= (first acc) (first l)) (f acc (rest l))\n             :else (f (cons (first l) acc) (rest l))))]\n    (if (empty? lyst)\n      lyst\n      (f (list (first lyst)) (rest lyst)))))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 30, "code": "(fn de-consecutive-dup [[first & rest]] (when first (cons first (de-consecutive-dup (drop-while (partial = first) rest)))))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "5377a23ce4b06839e8705e39"}, {"problem": 30, "code": "(fn [ins]\n  (reduce \n    (fn [res, this]\n      (if (= (last res) this)\n        res\n        (conj res this)\n        )\n      )\n    []\n   (seq ins)))", "user": "53e15371e4b0d874e779ae54"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 30, "code": "(fn [start]\n  ((fn compress [output, input]\n    (if (empty? input)\n      output\n      (if (= (last output) (first input))\n        (compress output (rest input))\n        (compress (concat output [(first input)]) (rest input))))) '() start))", "user": "53e92821e4b036ad0777e499"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53e150e5e4b0d874e779ae53"}, {"problem": 30, "code": "(fn compress2 [ls]\n  (loop [acc []\n          curr-ls ls]\n  (if (empty? curr-ls)\n    (apply list acc)\n    (if (empty? (rest curr-ls))\n      (apply list (conj acc (first curr-ls)))\n      (if (= (first curr-ls) (second curr-ls))\n        (recur acc (rest curr-ls))\n        (recur (conj acc (first curr-ls)) (rest curr-ls)))))))", "user": "53d87449e4b0e771c302546d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4ed3b4a7535d44c135fd68f5"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "53dfd77fe4b0d874e779ae45"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53d88bd5e4b0e771c302546e"}, {"problem": 30, "code": "(fn compress [sq]\n  (reduce (fn [acc v] (if (= (last acc) v)\n                        acc\n                        (concat acc (list v))))\n          '()\n          sq))", "user": "53e30fcae4b036ad0777e3fc"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 30, "code": "#(reduce \n (fn [a b] \n   (if (= (last a) b)\n     a\n     (conj a b))) [] %)", "user": "53e634ede4b036ad0777e470"}, {"problem": 30, "code": "(fn [x] \n  (map first (partition-by identity x)))", "user": "4ea8570f535d7eef308072f8"}, {"problem": 30, "code": "#(apply concat (map distinct (partition-by identity %)))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 30, "code": "(fn compress [xs] (when (seq xs)\n                    (cons (first xs) (compress (drop-while #(= (first xs) %) xs)))))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53ea9871e4b036ad0777e4e9"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "53eb8ceae4b036ad0777e4fb"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] (vec x)))", "user": "53ecac57e4b0d648e757f4b3"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5343753ae4b084c2834f4a1b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53e0001be4b0d874e779ae48"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53ede8e3e4b0d648e757f4cc"}, {"problem": 30, "code": "(fn compress\n  ([x] (compress (rest x) [(first x)]))\n  ([x r] (cond (empty? x) (reverse r)\n               (= (first x) (first r)) (compress (rest x) r)\n               true (compress (rest x) (cons (first x) r)))))", "user": "53e91473e4b036ad0777e495"}, {"problem": 30, "code": "(fn [s]\n  (->> s\n       (partition-by identity)\n       (map first)))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 30, "code": "(fn [col] (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] col))", "user": "53dcb9b2e4b0d874e779ae23"}, {"problem": 30, "code": "(fn [xs]\n  (let [coll (partition-by identity xs)]\n    (map first coll)))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 30, "code": ";(fn compress [[f & [s & more] :as others]]\n;  (cond (nil? f) []\n;        (nil? s) [f]\n;        (= f s) (cons f (compress more))\n;        :else (cons f (compress others))))\n\n(fn compress [[f & more]] \n   (cond (empty? more) [f] \n         (= f (first more)) (compress (cons f (rest more))) \n         :else (cons f (compress more))))", "user": "53edb464e4b0d648e757f4c7"}, {"problem": 30, "code": "(fn [coll]\n  (loop [x coll\n         acc []]\n    (if (empty? x)\n      acc\n      (if (not= (first x) (last acc))\n        (recur (rest x) (conj acc (first x)))\n        (recur (rest x) acc)))))", "user": "53e92aafe4b036ad0777e49a"}, {"problem": 30, "code": "(fn [coll] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 30, "code": "(fn cmp [ls]\n  (if (< (count ls) 1)\n    ls    \n    (if (not (= (first ls) (second ls)))\n    (cons (first ls) (cmp (rest ls)))\n    (cmp (rest ls)))))", "user": "53ed1778e4b0d648e757f4bd"}, {"problem": 30, "code": "(fn cmp [xs]\n  (keep-indexed \n   (fn [idx item] \n     (if (or (= idx 0)  (not (= (nth xs (- idx 1)) item))) \n       item \n       nil) \n   ) xs ))", "user": "4f6d09c5e4b07046d9f4efc3"}, {"problem": 30, "code": "(fn [coll] \n   ((fn foo [subcoll accum]\n      (if (first subcoll)      \n      (foo \n       (rest subcoll)\n       (if (= (first subcoll) (last accum)) accum (conj accum (first subcoll))))\n      accum))\n    coll\n    []))", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 30, "code": "reduce #(if (not= %2 (last %1)) (conj %1 %2) %1) []", "user": "53ef78bee4b0742d9025b0cd"}, {"problem": 30, "code": "(fn [x] ( loop [s x result '()] ( if (empty? s) (reverse result) (recur (rest s) (if (or (empty? result) (not= (first s) (first result)))  (conj result (first s)) result  )))))", "user": "53f1c05ee4b0742d9025b0e1"}, {"problem": 30, "code": "(fn [sq] (map first (partition-by identity sq)))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 30, "code": "(fn [m]\n  (loop [res (vector (first m))\n         restant m]\n  (println res restant)\n  (if (empty? restant)\n    res\n    (if (= (last res) (first restant))\n      (recur res (rest restant))\n      (recur (conj res (first restant)) (rest restant))))))", "user": "534bfc71e4b084c2834f4a88"}, {"problem": 30, "code": "(fn removeDuplicates [coll]\n  (seq (reduce\n     #(if (= (last %1) %2)\n           %1\n           (conj %1 %2)\n      )\n      []\n      coll\n     )\n  )\n)", "user": "53ef3adfe4b0742d9025b0c9"}, {"problem": 30, "code": "(fn [s]\n  (loop [in s\n         out '()]\n    (if in\n      (recur (next in)\n             (if (= (first in)\n                    (second in))\n               out\n               (concat out (list (first in)))))\n      out)))", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 30, "code": "#(reduce\n  (fn[x y] (if (= (last x) y) x (conj x y) ))\n    [] % )", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 30, "code": "reduce (fn [acc item] (if (= (last acc) item) acc (concat acc (cons item '())))) []", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53f49dfae4b0db01ade6f9c2"}, {"problem": 30, "code": "(fn [coll]\n        (loop [coll coll\n               result []]\n          (if (empty? coll)\n             result\n             (recur (rest coll) (if (= (first coll) (last result)) result (conj result (first coll)) ))\n          )\n        )\n      )", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 30, "code": "(fn [coll]\n    (reverse (let [same? (fn [acc x]\n                           (if (= x (first acc)) acc (conj acc x)))]\n               (reduce same? '() coll)) ))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 30, "code": "(fn [x]\n  (loop [x x y []]\n  (if (empty? x)\n    y\n    (recur (drop-while #(= (first x) %) x) (conj y (first x))))))", "user": "528d6b10e4b0239c8a67aec3"}, {"problem": 30, "code": "(fn no-dupes2 [[x & xs]]\n  (lazy-seq\n    (cond\n      (empty? xs)      (list x)\n      (= x (first xs)) (no-dupes2 xs)\n      :else            (cons x (no-dupes2 xs))\n    )\n  )\n)", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 30, "code": "(comp\n         (partial map first)\n         (partial partition-by identity))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "53e35265e4b036ad0777e400"}, {"problem": 30, "code": "(fn [arr] (reduce (fn [out el] (if (= (last out) el) out (conj out el) )) [] arr))", "user": "53e4bc2ee4b036ad0777e44d"}, {"problem": 30, "code": "(fn [object]\n  (loop [elements object\n         results []\n         last_char nil]\n         (if(empty? elements)\n           results\n           (if(= last_char (first elements))\n             (recur (rest elements) results last_char)\n             (recur (rest elements) (conj results (first elements)) (first elements))))))", "user": "53f50c03e4b0db01ade6f9ca"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "537b1083e4b06839e8705e64"}, {"problem": 30, "code": "(fn  [entry]     \n(reduce (fn [a b] \n  (if (not= (first a) b)\n    (conj a b) \n    (seq a) \n  )\n) '()  (reverse (seq entry)))\n)", "user": "53f12b77e4b0742d9025b0da"}, {"problem": 30, "code": "(fn compress [coll]\n  (when-let [[f & r] coll]\n     (if (= f (first r))\n       (compress r)\n       (cons f (compress r)))))", "user": "538a8d28e4b0640c7a9a58ba"}, {"problem": 30, "code": "#(reduce (fn [acc v] (if (= (peek acc) v) acc (conj acc v))) [(first %)] (rest %))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 30, "code": "#(loop [[head & tail :as coll] %\n        acc []]\n   (let [[thead & ttail] tail]\n     (println \"head=\" head \"thead=\" thead \"ttail=\" ttail \"acc=\" acc)\n     (if (nil? head)\n       acc\n       (if (= head thead)\n         (recur (conj ttail head) acc)\n         (recur tail (conj acc head))\n       )\n     )\n   )\n)", "user": "53f7820be4b0de5c41848560"}, {"problem": 30, "code": "(fn remove-dups [seq]\n  (if (empty? seq)\n    '()\n    (if\n      (= (first seq) (first (rest seq)))\n      (remove-dups (rest seq))\n      (cons (first seq) (remove-dups (rest seq))))))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 30, "code": "(fn [l] (keep-indexed (fn [i x] (if (not= x (nth l (inc i) nil)) x)) l))", "user": "53f5f740e4b0db01ade6f9d8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53c99f60e4b00fb29b2212c1"}, {"problem": 30, "code": "(fn [l]\n  (concat\n    (list (first (seq l)))\n  \t(map first  \n      (filter #(not= (first %1) (last %1))\n            (map list (drop 1 (seq l)) (butlast (seq l)))\n        )\n    )\n   )\n)", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 30, "code": "(fn compress[x] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2) ) '() x)))", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 30, "code": "(fn [s]\n   (filter #(not (= [] %))\n           (map-indexed\n            (fn[idx,item]\n              (if (or\n                    (= (inc idx) (count s))\n                    (not (=\n                           (nth s idx)\n                           (nth s (inc idx)))))\n                    item\n                    []))\n              s)))", "user": "5398123ee4b0b51d73faaef3"}, {"problem": 30, "code": "#(conj (mapcat (fn [a b] (if (= a b) [] [a])) (rest %) %) (first %))", "user": "53fa3524e4b0de5c41848578"}, {"problem": 30, "code": "(fn [ys]\n  (letfn\n      [(go [xs]\n         (if (empty? xs)\n           (list)\n           (let [x (first xs)\n                 xs' (rest xs)]\n             (cons x (go (drop-while #(= x %) xs'))))))]\n    (go ys)))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 30, "code": "#( map first (partition-by identity %))", "user": "53e8cefde4b036ad0777e48d"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "53f75957e4b0de5c4184855d"}, {"problem": 30, "code": "(fn remove-duplicates [xs]\n  (when (seq xs)\n    (cons (first xs)\n          (remove-duplicates\n            (drop-while #(= (first xs) %) (rest xs))))))", "user": "53ce0a29e4b00fb29b2212eb"}, {"problem": 30, "code": "(fn [seq]\n  (loop [[hd & tl] seq\n \t\t final []]\n    (let [next-tl (drop-while (partial = hd) tl)]\n      (if (empty? next-tl)\n        (conj final hd)\n        (recur next-tl (conj final hd))))))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 30, "code": "(fn peu [x] (if (< (count x) 2) x (if (= (first x) (second x)) (peu (rest x)) (conj (peu (rest x)) (first x)))))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 30, "code": "(fn [seq] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] seq))", "user": "53b952eee4b047364c0444e6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "523630eee4b05f3be1c7c8e8"}, {"problem": 30, "code": "(fn[s]\n   (loop [new '[]\n         remaining s]\n   (if (empty? remaining)\n     new\n     (if (= (first remaining) (last new))\n       (recur new (rest remaining))\n       (recur (conj new (first remaining)) (rest remaining))))))", "user": "53d10553e4b00fb29b22130f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 30, "code": "#(loop [ prev nil, in %, out []] \n\t(cond\n     (empty? in)         out\n     (= (first in) prev) (recur (first in) (rest in) out)\n     :else               (recur (first in) (rest in) (conj out (first in)))\n    )\n)", "user": "53fcb8f7e4b0de5c418485d4"}, {"problem": 30, "code": "(fn [s] (reduce #(if-not (= (last %) %2) (conj % %2) %) [] s))", "user": "53d86564e4b0e771c302546b"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "53fdc4b8e4b0de5c418485ea"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 30, "code": "#(loop [x (seq %) l [] s []] (if (empty? x) s (recur (rest x) (first x) (if (= (first x) l) s (conj s (first x))))))", "user": "53fddd71e4b0de5c418485eb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 30, "code": "(fn [in](map #(first %) (partition-by identity in)))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 30, "code": "(fn [xs]\n   (for [[cur prev] (map list xs (cons nil xs))\n         :when (not= cur prev)]\n     cur))", "user": "4fec08e8e4b0681fd128dc9d"}, {"problem": 30, "code": "(fn remove-duplicates [s] (if (or (empty? s) (= 1 (count s))) s (if (= (first s) (first (rest s))) (remove-duplicates (rest s)) (conj (remove-duplicates (rest s)) (first s)))))", "user": "507516d0e4b054001656acda"}, {"problem": 30, "code": "(fn [s]\n  (map first\n       (remove (partial apply =)\n               (partition 2 1\n                          (conj (vec (seq s)) nil)))))", "user": "5400fc30e4b0de5c4184861b"}, {"problem": 30, "code": "reduce (fn [v x] (if (= x (last v)) v (concat v [x]))) '()", "user": "53e1e1f1e4b0d874e779ae5e"}, {"problem": 30, "code": "#(map (fn[x] (if (seq? x) (first x) x)) (partition-by identity %))", "user": "53e1040be4b0d874e779ae4e"}, {"problem": 30, "code": "(fn remove-repeate [col]\n  (loop [result   '()\n         previous nil\n         col      col]\n    (cond\n      (nil? (seq col))         (reverse result)\n      (= previous (first col)) (recur result (first col) (rest col))\n      :else                    (recur (conj result (first col)) (first col) (rest col)))))", "user": "524b827ce4b09eba1c0223d7"}, {"problem": 30, "code": "(fn [c]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] c))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 30, "code": "(fn compress\n\n  [xs]\n  (reduce #(if-not (= (last %1) %2)\n             (conj %1 %2)\n             %1)\n          []\n          xs))", "user": "53ef235de4b0d648e757f4d4"}, {"problem": 30, "code": "#(reduce (fn [acc element] (if (not= element (last acc)) (conj acc element) acc)) [] (vec (seq %)))", "user": "53ed03f0e4b0d648e757f4bb"}, {"problem": 30, "code": "(fn compress\n  [myseq]\n  (keep-indexed #(if (not= %1 (dec (count myseq)))\n                  (if (not= %2 (nth myseq (inc %1))) %2)\n                  %2\n                  )\n                myseq)\n  )", "user": "53fe459ae4b0de5c418485f4"}, {"problem": 30, "code": "#(reduce (fn [e x] (if (not= (last e) x) (conj e x) e))[] %)", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 30, "code": "(fn compress-a-sequence [xs]\n  (reduce (fn [r x]\n            (let [l (last r)]\n              (if (= x l)\n                r\n                (conj r x))))\n          []\n          xs))", "user": "54008b88e4b0de5c4184860d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53fc713be4b0de5c418485a0"}, {"problem": 30, "code": "#(loop [x %\n          prev nil\n          res []]\n     (if (empty? x) res\n       (let [curr (first x)\n             nx (next x)]\n         (if (= curr prev)\n           (recur nx prev res)\n           (recur nx curr (conj res curr))))))", "user": "53fb4843e4b0de5c4184857d"}, {"problem": 30, "code": "#(\n  reduce \n          (fn [p,c] \n                    (if (= c (last p))\n                      p \n                      (concat p (list c))\n                     )\n          ) \n  \t\t '() % \n  )", "user": "53f9fe41e4b0de5c41848575"}, {"problem": 30, "code": "#(map first (partition-by list %))", "user": "52c08c59e4b07a9af5792351"}, {"problem": 30, "code": "(fn [coll]\n  (loop [[head & tail] coll\n         result []]\n    (if (nil? head)\n      result\n      (if (= head (last result))\n        (recur tail result)\n        (recur tail (conj result head))\n      )\n     )\n  )\n )", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 30, "code": "(fn \n  [x]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 30, "code": "(fn compress-sequence\n  ([lista] (compress-sequence (rest lista) [(first lista)] (first lista)))\n  ([lista nlista last]\n   (if (empty? lista)\n     (seq nlista)\n     (if (= last (first lista))\n       (compress-sequence (rest lista) nlista last)\n       (compress-sequence (rest lista) (conj nlista (first lista)) (first lista))))))", "user": "540271aee4b0df28a13c62d0"}, {"problem": 30, "code": "(fn compress [lst]\n  (loop [lst lst\n         acc (list (first lst))\n         lastval (first lst)]\n    (if (empty? lst)\n      (reverse acc)\n      (recur (rest lst)\n             (if (= lastval (first lst))\n               acc\n               (cons (first lst) acc))\n             (first lst)))))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 30, "code": "reduce (fn [a b] (if (= (last a) b) a (conj a b))) []", "user": "53a442a6e4b0b62ce300572d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 30, "code": "(fn consdump [xs]\n  (reduce #(if (= (last %) %2)\n              %\n              (conj % %2))\n          [] xs))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 30, "code": "(fn [c] (reduce (fn [r i]\n                 (if (not (= (last r) i))\n                   (conj r i) r)\n                 ) [] c))", "user": "5251b11be4b0541d1855b87b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "540b2dcbe4b0addc1aec66f4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54023bbfe4b0df28a13c62cd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53fd0a22e4b0de5c418485e1"}, {"problem": 30, "code": "(fn sk-compress [l]\n  (reverse (reduce (fn [col b]\n                     (if (= (first col) b)\n                       col\n                       (cons b col)))\n                   (empty l)\n                   l)))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 30, "code": "(fn\n  [se]\n          (reverse\n    (reduce #(if (= %2 (first %1)) %1 (cons %2 %1)) '()\n      (seq se))))", "user": "52cda980e4b07d0d72b2737b"}, {"problem": 30, "code": "(fn [coll] (reduce (fn [acc x]\n                     (if (= (peek acc) x)\n                       acc\n                       (conj acc x)))\n                   []\n                   coll))", "user": "4f392fc8e4b0e243712b1ee7"}, {"problem": 30, "code": "(fn [xs]\n  (reverse\n  (reduce (fn [acc x]\n            (if (= x (first acc))\n              acc\n              (conj acc x)))\n          nil\n          (seq xs))))", "user": "5097ea89e4b087ccf61a7af4"}, {"problem": 30, "code": "(fn compress\n  [coll]\n  (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() (seq coll)))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54094824e4b0addc1aec66da"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "540e17c3e4b0addc1aec6719"}, {"problem": 30, "code": "(fn\n\t[arg]\n    (reduce #(if (= %2 (first (take-last 1 %1)))\n                %1\n                (conj %1 %2)\n                )\n            []\n            arg))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "540f2c48e4b0addc1aec6727"}, {"problem": 30, "code": ";;(fn nd [s] (cond (empty? s) nil (= (first s) (second s)) (nd (rest s)) :else (cons (first s) (nd (rest s)))))\n\n#(map first (partition-by identity %))", "user": "540e0637e4b0addc1aec6717"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53b9bb15e4b047364c0444ed"}, {"problem": 30, "code": "(fn [list]\n  (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2))\n                   '()\n                   list)))", "user": "540d0087e4b0addc1aec670b"}, {"problem": 30, "code": "(fn [x] \n  (loop [x x acc []]\n    (if (empty? x) (reverse acc)\n      (recur (rest x) (if (= (first x) (first acc)) acc (cons (first x) acc))))))", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 30, "code": "(fn [coll]\n    (reduce (fn [res value]\n              (if (= (last res) value)\n                res\n                (conj res value)))\n      [] coll))", "user": "540f3b4ee4b0addc1aec6729"}, {"problem": 30, "code": "(fn f [coll]\n  (map first (partition-by identity coll)))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 30, "code": "(fn compress\n  ([coll] (compress coll '()))\n  ([coll acc]\n     (if (empty? coll)\n       (reverse  acc)\n       (if (= (first coll) (second coll))\n         (recur (rest coll) acc)\n         (recur (rest coll) (cons (first coll) acc))))))", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "540ff022e4b01498b1a7199a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52ec2b9ae4b0705949c4444f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5409a4fee4b0addc1aec66e0"}, {"problem": 30, "code": "(fn [sq]\n  (let [filtered (->> (partition 2 1 sq)\n                      (filter #(apply not= %) ,,,))]\n    (seq\n     (conj\n      (vec (map first filtered))\n      (second (last filtered))))))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 30, "code": "(fn [s]\n   (concat \n    (keep first\n          (remove (fn [[a b]] (= a b))\n                  (partition 2 1 s))) [(last s)]))", "user": "54145050e4b01498b1a719ea"}, {"problem": 30, "code": "(fn doit [x]\n  (map first (filter  (fn [x]  (not= (first x)(second x) )) (map vector (seq x) (seq (concat [0] x )))))\n  )", "user": "526698c9e4b03e8d9a4a7144"}, {"problem": 30, "code": "(fn [x] (reduce (fn [val itm] (if (= (first val) itm) val (cons itm val))) () (reverse x)))", "user": "541475afe4b01498b1a719eb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54157dace4b01498b1a719f4"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [memo, elem] \n            (if (= (last memo) elem) \n              memo \n              (conj memo elem))) \n          [] \n          coll))", "user": "540ff039e4b01498b1a7199b"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2)\n           %1\n           (conj %1 %2)) []", "user": "52c45ac8e4b0c2d177d620d9"}, {"problem": 30, "code": "#(reduce \n  (fn [acc v]        \n    (if (not= (last acc) v) \n      (conj acc v) acc))        \n  [] %)", "user": "54133900e4b01498b1a719de"}, {"problem": 30, "code": "(letfn [(skip [to-skip l]\n               (if (seq l)\n                 (if (= (first l) to-skip) \n                   (skip to-skip (rest l))\n                   l)\n                 '()))\n         (f [l]\n            (if (seq l)\n              (let [[x & xs] l]\n                (cons x (f (skip x xs))))\n              '()))]\n   f)", "user": "540470dae4b0addc1aec6658"}, {"problem": 30, "code": "(fn [lst] (loop [rez [] cur 0]\n(if (= cur (count lst))\n  rez\n  (if (= (last rez) (get lst cur))\n    (recur rez (inc cur))\n    (recur (conj rez (get lst cur)) (inc cur))\n  ))))", "user": "53e76728e4b036ad0777e47c"}, {"problem": 30, "code": "(fn c\n  [sequence & [current]]\n  (let [element (first sequence)]\n    (if (empty? sequence)\n      nil\n      (if (= element current)\n        (c (rest sequence) element)\n        (cons element (c (rest sequence) element))\n        ))))", "user": "52f1bd89e4b05e3f0be25ef0"}, {"problem": 30, "code": "(fn [s] (map first (partition-by #(-> %) s)))", "user": "52814e97e4b0757a1b171428"}, {"problem": 30, "code": "(fn dd [coll]\n  (let [x (first coll)\n        y (second coll)\n        z-coll (rest (rest coll))]\n    (cond\n      (nil? x) []\n      (nil? y) [x]\n      (empty? z-coll) (if (= x y) [y] [x y])\n      (= x y) (dd (cons y z-coll))\n      :else  (cons x (dd (cons y z-coll)))\n      )\n    )\n  )", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54139cd4e4b01498b1a719e3"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "541096bde4b01498b1a719b2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53d0d7a9e4b00fb29b22130c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "540c6a8ae4b0addc1aec6702"}, {"problem": 30, "code": "(fn [xs]\n  (first (reduce (fn [[acc prev] x]\n                   (if (= x prev)\n                     [acc prev]\n                     [(conj acc x) x]))\n                 [[] nil]\n                 xs)))", "user": "501948b3e4b0b6630b101db5"}, {"problem": 30, "code": "(fn \u27f2 [s]\n  (cond\n  \t(empty? (rest s)) s\n  \t(= (first s) (second s)) (\u27f2 (rest s))\n  \t:else (cons (first s) (\u27f2 (rest s)))\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 30, "code": "(fn cmprs \n  ([x] (cmprs x []))\n  ([x, result]\n   (let [s (seq x)\n         f (last result)]\n    (do (print f s)\n      (if s\n        (cmprs (rest s)\n               (if (= f (first s))\n                 result\n                 (concat result [(first s)])))\n        result)))))", "user": "54165291e4b01498b1a719fb"}, {"problem": 30, "code": "(fn foo [x] (if (empty? x) \n            (list)\n            (cons (first x)\n                  (foo (drop-while (fn [y] (= (first x) y)) (rest x))))))", "user": "54125062e4b01498b1a719d2"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "5412d5d2e4b01498b1a719d9"}, {"problem": 30, "code": "(fn compress [item sq]\n  (cond\n   (empty? sq) sq\n   (= item (first sq)) (compress item (rest sq))\n   :else (cons (first sq) (compress (first sq) (rest sq)))))\nnil", "user": "53e543efe4b036ad0777e457"}, {"problem": 30, "code": "(fn compress [seq]\n  (if (empty? seq)\n    nil\n    (if (= (first seq) (second seq))\n      (compress (rest seq))\n      (cons (first seq) (compress (rest seq))))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 30, "code": "(fn dup [s] (let [n (count s)]\n              (if (< n 2) \n                s\n                (let [fi (first s)\n                      se (second s)]\n                  (if (= fi se)\n                    (dup (rest s))\n                    (cons fi (dup (rest s))))))))", "user": "5413adfee4b01498b1a719e4"}, {"problem": 30, "code": "(fn cmp [coll]\n  (reduce (fn [res x]\n            (if (= x (last res))\n              res\n              (conj res x))) [] coll))", "user": "53480973e4b084c2834f4a52"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity (seq x))))", "user": "54180369e4b01498b1a71a13"}, {"problem": 30, "code": "(fn [xs] \n  (reduce #(if \n             (= (last %) %2) \n             % \n             (conj % %2) ) \n          [] \n          xs))", "user": "54187e84e4b01498b1a71a1b"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() x))", "user": "541074f1e4b01498b1a719ac"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "541619e8e4b01498b1a719f9"}, {"problem": 30, "code": "(fn [arr]\n  (rest (reduce #(concat (butlast %1) (distinct [(last %1) %2])) [] arr))\n)", "user": "541404c2e4b01498b1a719e7"}, {"problem": 30, "code": "(fn remove-duplicates [coll]\n  (map first (partition-by identity coll)))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "541adc98e4b01498b1a71a5e"}, {"problem": 30, "code": "(fn compress [coll]\n  (let [[f-concat neutral] (if (string? coll) [str \"\"] [conj []])\n        f #(if (= (last %1) %2) %1 (f-concat %1 %2))]\n    (reduce f neutral coll)))", "user": "54100c73e4b01498b1a7199e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 30, "code": "(fn  \n  [coll]\n  (loop [s coll\n         v []] \n    (if (not= (count s) 0)\n      (if (not= (first s) (second s)) \n        (recur (next s) (conj v (first s)))\n        (recur (next s) v)) \n      v)))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5416aacce4b01498b1a719ff"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54149f2fe4b01498b1a719ec"}, {"problem": 30, "code": "(fn strip [coll] (when (seq coll) (if (= (first coll) (second coll))\n                                                              (strip (next coll))\n                                         (cons (first coll) (strip (next coll))))))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 30, "code": "#(cons (first %) (keep (fn [[a b]] (if (not= a b) b)) (partition 2 (interleave % (rest %)))))", "user": "5282f54be4b0239c8a67ada0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52541fe6e4b0541d1855b964"}, {"problem": 30, "code": "(fn [coll]\n\t(map first (partition-by identity coll))  \n)", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 30, "code": "(fn [coll]\n  (->> coll\n       (partition-all 2 1)\n       (remove #(= (first %) (second %)))\n       (map first)))", "user": "541f6bc0e4b01498b1a71a98"}, {"problem": 30, "code": "(fn [inputSeq] (loop [result [(first inputSeq)]\n                      currentElement (first inputSeq)\n                      elements (rest inputSeq)]\n                 (if (empty? elements)\n                   result\n                   (let [firstElement (first elements)]\n                     (if (= firstElement currentElement)\n                       (recur result currentElement (rest elements))\n                       (recur (conj result firstElement) firstElement (rest elements)))))))", "user": "540c288ae4b0addc1aec66ff"}, {"problem": 30, "code": "#(filter (complement nil?) (for [i (range (count %1)) :let [y (if (not= (get %1 i) (get %1 (inc i))) (get %1 i))]] y))", "user": "511036c5e4b04c71fce993ee"}, {"problem": 30, "code": "(fn mconsec\n  [s]\n  (loop [s s result []]\n         (if (empty? s)\n           result\n           (let [[fs & rst] s ls (last result)]\n             (if (= fs ls)             \n               (recur rst result)  \n               (recur rst (conj result fs))))\n           ))\n  )", "user": "540efe2ee4b0addc1aec6724"}, {"problem": 30, "code": "(fn [l]\n   (map #(first %) (partition-by (fn [a] a) l)))", "user": "541c1e46e4b01498b1a71a70"}, {"problem": 30, "code": "#(loop [x % r []]\n   (if (empty? x)\n     r\n     (recur (rest x) \n            (if (= (first x) (last r))\n              r\n              (conj r (first x))))))", "user": "541c2ae0e4b01498b1a71a71"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54084089e4b0addc1aec66c7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5416dce6e4b01498b1a71a04"}, {"problem": 30, "code": "(partial reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [])", "user": "5370d152e4b0fc7073fd6e9d"}, {"problem": 30, "code": "reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) []", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 30, "code": "(fn\n  [xs]\n  (loop [xs xs\n         acc []]\n    (if (empty? xs)\n      acc\n      (if (= (first xs) (last acc))\n        (recur (rest xs) acc)\n        (recur (rest xs) (conj acc (first xs)))))))", "user": "540961e9e4b0addc1aec66db"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "541168dee4b01498b1a719c3"}, {"problem": 30, "code": "(fn [x]\n  (map first (partition-by identity x)))", "user": "541ad1c1e4b01498b1a71a5c"}, {"problem": 30, "code": "(fn [xs]\n  (\n    apply \n    (fn crunchy\n      ([] [])\n      ([x] [x])\n      ([x y] \n       (if (= x y) [x] [x y])\n      )\n      ([x y & xs]\n       (condp = x\n         y (apply crunchy (cons y xs))\n         x (cons x (apply crunchy (cons y xs) ) )\n       )\n      )\n    )\n    xs\n  )\n)", "user": "516ee939e4b06aac486e5b34"}, {"problem": 30, "code": "#(reduce \n    (fn [res, x]\n        (if (not= (last res) x)\n            (conj res x)\n            res)) %1 %2) []", "user": "54213a8fe4b01498b1a71aaf"}, {"problem": 30, "code": "(fn remove-dups\n  [arg]\n  (map first (partition-by identity (into [] arg))))", "user": "529735cbe4b02ebb4ef7503c"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 30, "code": "(fn [x] \n\t(reverse\n\t(loop [current x\n\t\t   acc (empty current)\n\t\t  ]\n\t\t(if (empty? current) acc\n\t  \t   (if (= (first acc) (first current))\n\t  \t \t(recur (rest current) acc)\n\t  \t \t(recur (rest current) (cons (first current) acc))\n  \t )))))", "user": "54227fc6e4b01498b1a71ac0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4e73debb535d7a570dd295b7"}, {"problem": 30, "code": "(fn [coll]\n  (loop [old-coll (rest coll)\n         new-coll []\n         last-elem nil\n         next-elem (first coll)]\n    (if (nil? next-elem)\n       (seq new-coll)\n       (recur\n        \t(rest old-coll)\n       \t\t(if (not= last-elem next-elem)\n           \t\t(conj (vec new-coll) next-elem)\n              \tnew-coll)\n      \t\tnext-elem\n            (first old-coll)))))", "user": "541df619e4b01498b1a71a87"}, {"problem": 30, "code": "(fn [s]\n  (map first (partition-by identity s)))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 30, "code": "(fn cmprs \n  ([x c] (if (empty? x) c (cmprs (rest x) (if (= (last c) (first x)) c (conj c (first x))) ) )) \n  ([x] (cmprs x []) )\n)", "user": "54257124e4b01498b1a71b09"}, {"problem": 30, "code": "(fn compress [col]\n   (let [[c & rst] col]\n     (if (empty? rst)\n       [c]\n       (if (= c (first rst))\n         (compress rst)\n         (cons c (compress rst))))))", "user": "54194782e4b01498b1a71a29"}, {"problem": 30, "code": "#(reduce (fn [xs x]\n         (if (= x (last (seq xs)))\n           xs\n           (conj xs x))) [] %)", "user": "54258e71e4b01498b1a71b0e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54258a7fe4b01498b1a71b0c"}, {"problem": 30, "code": "(fn [a] \n  (filter #(not (nil? %))\n          (for [x (range 0 (count a))]\n            (if (= (nth (concat a '(nil)) x ) \n                   (nth (concat '(nil) a) x )) \n              nil (nth a x)\n              )\n            )\n          )\n  )", "user": "5425d454e4b01498b1a71b13"}, {"problem": 30, "code": "(fn [coll]\n  (loop [c coll\n         last-letter nil\n         acc []]\n    (if (seq c)\n      (if (not= (first c) last-letter)\n        (recur (rest c) (first c) (conj acc (first c)))\n        (recur (rest c) (first c) acc))\n      acc)))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 30, "code": "(fn [col] \n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] col))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 30, "code": "(fn [lst] (map first (partition-by #(-> %) lst)))", "user": "52f7ac81e4b047fd55836fc6"}, {"problem": 30, "code": "(fn [in] (let [coll (seq in)]\n           (reduce (fn [acc x] (if (= (last acc) x) acc (conj acc x))) [] coll)\n ))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 30, "code": "#(reduce (fn [x y]\n          (if (= y (last x))\n            x\n            (conj (vec x) y))) [] %)", "user": "541735b3e4b01498b1a71a07"}, {"problem": 30, "code": "#(reduce (fn [c v] (if-not (= (last c) v) (conj c v) c)) [] %)", "user": "53f78944e4b0de5c41848561"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 30, "code": "#(first (reduce\n   (fn [[acc prev] n]\n     (if (= prev n)\n       [acc n]\n       [(conj acc n) n]))\n   [[] nil] %))", "user": "542db41be4b0dad94371f2bb"}, {"problem": 30, "code": "reduce #(if (not= %2 (peek %1))\n          (conj %1 %2)\n          %1) []", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5410cb36e4b01498b1a719b8"}, {"problem": 30, "code": "(fn [c] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() c)))", "user": "54302691e4b0dad94371f2d7"}, {"problem": 30, "code": "#(map last (partition-by list %))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 30, "code": "(fn [seq]\n   (map first (partition-by identity seq)))", "user": "542b764ae4b0dad94371f28d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "542c2de0e4b0dad94371f29f"}, {"problem": 30, "code": "(fn [xs]\n   (map first (partition-by identity xs)))", "user": "51e58104e4b0efabf93c02cd"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "542f574be4b0dad94371f2d0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "542eae68e4b0dad94371f2c6"}, {"problem": 30, "code": "(fn [x]\n  (loop [acc [] data x]\n    (if (empty? data)\n      acc\n      (recur \n        (if (= (last acc) (first data)) \n            acc \n            (conj acc (first data))\n        ) \n        (rest data)\n      )\n    )\n  )\n)", "user": "53765e1ae4b06839e8705e23"}, {"problem": 30, "code": "(fn [x] \n  (loop [n 1\n        soFar [(first x)]]\n    (if (= n (count x))\n      soFar\n      (if (= (last soFar) (nth x n))\n        (recur (inc n) soFar)\n        (recur (inc n) (conj soFar (nth x n)))))))", "user": "54336443e4b0b6b47310fcde"}, {"problem": 30, "code": "(fn comp [[head & tail]]\n  (if head\n    (if (= head (first tail))\n      (comp tail)\n      (cons head (comp tail)))\n    '()))", "user": "542cb77ae4b0dad94371f2aa"}, {"problem": 30, "code": "(fn self' [ l ]\n    (if-let [x1 (first l)]\n      (if-let [x2 (second l)]\n        (if (= x1 x2)\n          (self' (cons x2 (rest (rest l))))\n          (cons x1 (self' (rest l)))\n          )\n        [x1]\n        )\n      []\n      )\n    )", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 30, "code": "(fn [s] (first (reduce (fn [[acc prev] ch] \n          (if (= prev ch)\n              [acc ch] \n              [(conj acc ch) ch]))\n        [[] nil]\n        s)))", "user": "5427962de4b01498b1a71b26"}, {"problem": 30, "code": "(comp #(map first %) #(partition-by identity %))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 30, "code": "(fn compress [x] (reduce #(if (= (peek %1) %2) %1 (conj %1 %2)) [] x))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54349368e4b0b6b47310fcf1"}, {"problem": 30, "code": "(fn foo [x]\n\t(if (empty? x)\n\t\t'()\n\t\t(if (= (first x) (second x))\n\t\t\t(foo (rest x))\n\t\t\t(concat\n\t\t\t\t(list (first x))\n\t\t\t\t(foo (rest x))))))", "user": "54296802e4b01498b1a71b38"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53a511aae4b0b62ce3005735"}, {"problem": 30, "code": "(fn  [x]                                                                                                                                       \n        (letfn [(recseq [s acc]                                                                                                                              \n                  (cond                                                                                                                                      \n                   (= s ()) acc                                                                                                                              \n                   (and (> (count (rest s)) 0) (not= (first s) (first (rest s)))) (recseq (rest s) (conj acc (first s)))                                     \n                   (= (rest s) ()) (conj acc (first s))                                                                                                      \n                   :else (recseq (rest s) acc)))]                                                                                                            \n          (reverse (recseq x ()))))", "user": "5423dc6ae4b01498b1a71ad5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 30, "code": "reduce (fn [acc s]\n         (if (= (last acc) s)\n           acc\n           (conj acc s))) []", "user": "540aa29de4b0addc1aec66f1"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (= (last %) %2)\n             %\n             (concat % (list %2)))\n          '()\n          s))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "53da3fcde4b0e771c3025497"}, {"problem": 30, "code": "(fn f [arg]\n  (loop [x (rest arg) p (first arg) acc [(first arg)]]\n    (println acc)\n    (if (empty? x) \n      acc\n      (if (= p (first x)) \n        (recur (rest x) (first x) acc)\n        (recur (rest x) (first x) (conj acc (first x)))))))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5412646de4b01498b1a719d4"}, {"problem": 30, "code": "(fn [a] (loop [answer [] remaining a]\n          (if(empty? remaining)\n            answer\n           (if (= (first remaining) (second remaining))\n             (recur (into answer '()) (drop 1 remaining)) \n             (recur (into answer (take 1 remaining)) (drop 1 remaining))\n             )\n            ) \n          )\n  )", "user": "542baf7ce4b0dad94371f291"}, {"problem": 30, "code": "(fn F [s]\n  (loop [sq s acc []]\n    (if (< (count sq) 1)\n      acc\n      (if (= (first sq) (last acc))\n        (recur (rest sq) acc)\n        (recur (rest sq) (conj acc (first sq)))))))", "user": "4f856adfe4b033992c121c44"}, {"problem": 30, "code": "(fn nodups\n  [s]\n  (cond\n   (= s '()) '()\n   (= (first s) (first (rest s))) (nodups (rest s))\n   :else (concat (list (first s)) (nodups (rest s)))))", "user": "5438795ee4b032a45b869313"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "51eda45ce4b0bb507043159b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54397533e4b032a45b86931d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54324be1e4b0dad94371f2ed"}, {"problem": 30, "code": "(fn rm-seq-dups [coll]\n   (if (empty? coll)\n     coll\n     (let [x (first coll)\n           tl (rest coll)]\n       (if (= (first tl) x)\n         (rm-seq-dups tl)\n         (into [x] (rm-seq-dups tl))))))", "user": "54393c3fe4b032a45b86931a"}, {"problem": 30, "code": "( fn [s]\n (map first (partition-by identity s)) \n)", "user": "54380631e4b032a45b86930f"}, {"problem": 30, "code": "(fn [es]                                                                                                                                                                                     \n  ((fn [xs lx rs]                                                                                                                                                                            \n     (if (seq xs)                                                                                                                                                                            \n       (let [x (first xs)]                                                                                                                                                                   \n         (if (= x lx)                                                                                                                                                                        \n           (recur (rest xs) lx rs)                                                                                                                                                           \n           (recur (rest xs) x (conj rs x))))                                                                                                                                                 \n       (reverse rs)))                                                                                                                                                                        \n   es (first es) (list (first es))))", "user": "543897e7e4b032a45b869314"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5437eca1e4b032a45b86930d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "543a68d3e4b032a45b869326"}, {"problem": 30, "code": "(fn [coll]\n  (reduce #(if (not (= (last %1) %2))\n             (concat %1 (list %2))\n             %1)\n          []\n          (seq coll)))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 30, "code": "(fn compress\n  [[x & xs]]\n  (if xs\n    (cons x (compress (drop-while #(= x %) xs)))\n    (if x\n      (list x)\n      nil))\n  )", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 30, "code": "#(concat (map first (partition-by identity %)))", "user": "53f67bcfe4b0db01ade6f9e1"}, {"problem": 30, "code": "(fn [ss]\n    (let [compress (fn my-compress [s res]\n                     (if (empty? s)\n                       res\n                       (if (= (first s) (first res))\n                         (my-compress (rest s) res)\n                         (my-compress (rest s) (conj res (first s))))))]\n      (reverse (compress ss '()))))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 30, "code": "(fn compress-a-sequence [input]\n  (reduce (fn [result char]\n            (let [last-char (last result)]\n              (if (= last-char char)\n                result\n                (conj result char))))\n          []\n          input))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "543f854fe4b032a45b86935b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 30, "code": "(fn [s]\n  (letfn [(func [coll result]\n                (if (zero? (count coll))\n                  result\n\t                (if (= (first coll) (first (rest coll)))\n\t                  (recur (rest coll) result)\n                    (recur (rest coll) (conj result (first coll))))))]\n    (func (seq s) [])))", "user": "533a399de4b0e30313ee6cb9"}, {"problem": 30, "code": "(fn removeConsec\n   [liste]\n   (loop [restant liste, lastelem nil, traite '()]\n     (if (empty? restant)\n       (reverse traite)\n       (let [[elem & suite] restant]\n         (if (= elem lastelem)\n           (recur suite, elem, traite)\n           (recur suite, elem, (conj traite elem))\n           )\n         )\n       )\n     )\n   )", "user": "54410a71e4b032a45b869367"}, {"problem": 30, "code": "#(reverse (reduce (fn [cleaned x]\n           (if (empty? cleaned)\n             (list x)\n             (if (= (first cleaned) x)\n               cleaned\n               (cons x cleaned))))\n         () %))", "user": "52f8b86de4b047fd55836fdb"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "542789efe4b01498b1a71b25"}, {"problem": 30, "code": "(fn [z]\n  ((fn rdup' [s acc]\n      (if (empty? s)\n        acc\n        (let [y (last acc)\n              x (first s)\n              xs (rest s)\n              rcons (fn [x acc] (reverse (cons x (reverse acc))))]\n          (if (= x y)\n            (rdup' xs acc)\n            (rdup' xs (rcons x acc)))))) z (empty z)))", "user": "54431b6ee4b032a45b869385"}, {"problem": 30, "code": "(fn [s] (map first (filter #(not= (first %) (second %)) (partition 2 1 [nil] s))))", "user": "53751c5ee4b06839e8705e11"}, {"problem": 30, "code": "(fn [xs]\n   (loop [[cur & others :as acc] '() [y & ys :as xs] xs]\n     (if (empty? xs)\n       (reverse acc)\n       (recur (if (= cur y)\n                acc\n                (conj acc y))\n              ys ))))", "user": "53dfe311e4b0d874e779ae47"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "52a45a7be4b0c58976d9abd8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "50666699e4b03d366d7cb2b0"}, {"problem": 30, "code": "(fn [xs]\n  (map first\n  \t(partition-by identity xs)))", "user": "54448e84e4b032a45b869393"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "540e33dde4b0addc1aec671a"}, {"problem": 30, "code": "(fn  [x]\n  (loop [coll [],\n         s x]\n    (if (empty? s)\n      coll\n      (if (= (last coll) (first s))\n        (recur coll (rest s))\n        (recur (conj coll (first s)) (rest s)))\n    )\n  )\n)", "user": "543496e1e4b0b6b47310fcf2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "544257b4e4b032a45b869379"}, {"problem": 30, "code": "(fn remove-dupes [s]\n  (lazy-seq\n   (if-let [but-one (next s)]\n    (let [[a b & but-two] s]\n      (if (= a b)\n        (remove-dupes (cons a but-two))\n        (cons a (remove-dupes but-one))))\n     s)))", "user": "5446c89ce4b032a45b8693b5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 30, "code": "(fn compress-seq\n  [xs]\n  (map first (partition-by identity xs)))", "user": "52561295e4b0541d1855ba03"}, {"problem": 30, "code": "#(reverse\n  (reduce\n   (fn\n     [[x & xs :as res] y]\n     (if-not (= x y)\n       (cons y res)\n       res))\n   nil %))", "user": "5267c74be4b03e8d9a4a7183"}, {"problem": 30, "code": "(fn compr\n  ([src]\n    (compr [] src)\n  )\n  ([dest src]\n    (if (empty? src)\n      (identity dest)\n      (if (= (last dest) (first src))\n        (recur dest (rest src))\n        (recur (conj dest (first src)) (rest src))\n      )\n    )  \n  )\n)", "user": "54468ebfe4b032a45b8693b1"}, {"problem": 30, "code": "(fn [c] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] c))", "user": "530a6cbae4b02e82168697be"}, {"problem": 30, "code": "(fn [sequence] (map first (partition-by identity sequence)))", "user": "5447e08ce4b032a45b8693c3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 30, "code": "(fn [sq]\n  (reduce (fn [r x]\n            (if (= (last r) x)\n              r\n              (conj r x)))\n          []\n          sq))\n\n; #(reduce (fn [acc cur] (if (= cur (last acc)) acc (conj acc cur))) [] %)\n\n; #(map first (partition-by identity %))", "user": "54485749e4b032a45b8693c7"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "54461393e4b032a45b8693a5"}, {"problem": 30, "code": "(fn foo [x] (if (empty? x) '() (if (= (first x) (first (rest x))) (foo (rest x)) (conj (foo (rest x)) (first x)))))", "user": "54078851e4b0addc1aec66bd"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5425bde6e4b01498b1a71b10"}, {"problem": 30, "code": "(fn [s] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) nil s)))", "user": "54487527e4b032a45b8693cc"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "544ac9b5e4b0e39780006959"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (not= (last x) y) (conj x y) x)) [] %)", "user": "5446ebc2e4b032a45b8693b8"}, {"problem": 30, "code": "(fn remDup [coll]\n  (let [f (first coll)\n        s (second coll)]\n    (if (empty? coll)\n      '()\n      (if (= f s)\n        (remDup (cons f (rest (rest coll))))\n        (cons f (remDup (rest coll)))))))", "user": "544b9df2e4b0e39780006968"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [all item] \n            (if (= item (last all))\n              all\n              (conj all item))\n                   \n            ) [] s)\n  )", "user": "544a049de4b0e39780006953"}, {"problem": 30, "code": "#(reduce (fn [x y] (conj x (first y))) [] (map distinct (partition-by identity %)))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 30, "code": "(fn [x] (loop [c x nc nil] (if (empty? c) (reverse nc) (recur (rest c) (if (= (first c) (first nc)) nc (conj nc (first c)))))))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "544e8369e4b0e39780006987"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "544b699ce4b0e39780006964"}, {"problem": 30, "code": "(fn [c]\n  (loop [s (seq c)\n         r '()]\n    (if (empty? s)\n      (reverse r)\n      (recur (rest s) \n             (if (= (first s) (first r)) \n             \tr \n           \t\t(conj r (first s)))))))", "user": "542d5fa9e4b0dad94371f2b5"}, {"problem": 30, "code": "(fn bla\n  [my-seq & [last-val]]\n  (if-not (nil? (first my-seq))\n    (if (not= last-val (first my-seq))\n      (into (vector (first my-seq)) (bla (rest my-seq) (first my-seq)))\n      (bla (rest my-seq) last-val)\n      )\n    )\n  )", "user": "54458995e4b032a45b86939e"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "545281bce4b0e397800069c3"}, {"problem": 30, "code": "(fn dedupstr2 [s] \n  (reduce \n    (fn dedup-reduce [seq_or_n1 n2]\n      (let [lastn1 \n        (if (seq? seq_or_n1) \n          (last seq_or_n1)\n          seq_or_n1\n        ), seq1 (if (seq? seq_or_n1) seq_or_n1 (seq [seq_or_n1])) ]\n        (if (= n2 lastn1)\n           seq1\n           (concat seq1 (seq [n2])))\n      ))\n    s\n    )\n)", "user": "53cfa79ce4b00fb29b2212ff"}, {"problem": 30, "code": "#(first (reduce (fn [[r l] n] (if (= l n) [r n] [(conj r n) n])) [[(first %)] (first %)] %))", "user": "5122925ae4b068a9582e656d"}, {"problem": 30, "code": "#(map first (partition-by (fn [x] x) %))", "user": "544fbabce4b0e39780006999"}, {"problem": 30, "code": "(fn [l] (cons (first l) (map second (filter #(not= (first %) (second %)) (map vector l (rest l))))))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 30, "code": "(fn [sn]\n   (map last  \n            (let [s sn]\n              (filter #(not= (first %)(second %))\n                      (for [i (range (count s) )]\n                        (->> s (take (+ 1 i)) (drop (dec i))) )))))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 30, "code": "(fn [coll] (reduce\n            (fn [coll item]\n              (if (= (last coll) item)\n                coll\n                (concat coll [item]))) [] coll))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 30, "code": "(fn [input]\n    (loop [seq-to-iterate input\n         last-item nil\n         compressed-seq []]\n    (if (empty? seq-to-iterate)\n      compressed-seq\n      (let [[curr-item & remaining-items] seq-to-iterate\n            is-last-item? (= last-item curr-item)]\n        (if is-last-item?\n          (recur remaining-items curr-item compressed-seq)\n          (recur remaining-items curr-item (conj compressed-seq curr-item)))))))", "user": "54513516e4b0e397800069af"}, {"problem": 30, "code": "(fn [s] (mapcat distinct (partition-by identity s)))", "user": "54524afbe4b0e397800069bc"}, {"problem": 30, "code": "(fn [s] (reverse (reduce #(if (= %2 (first %1)) %1 (cons %2 %1)) (list (first s)) (rest s))))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "user": "5457767ae4b01be26fd7460c"}, {"problem": 30, "code": "(fn cm [x] \n  (when-let [[f & r] (seq x)] \n    (if (= f (first r)) \n      (cm r) \n      (cons f (cm r)))) )", "user": "540997ede4b0addc1aec66dd"}, {"problem": 30, "code": "(fn [input]\n(loop [i input res []]\n(if (empty? i)\nres\n(if (= (last res) (first i))\n(recur (rest i) res)\n(recur (rest i) (conj res (first i))))\n)))", "user": "54512df2e4b0e397800069ae"}, {"problem": 30, "code": "(fn compress [seqz]\n  (cond (empty? seqz) ()\n        (and (seq (rest seqz)) (= (first seqz) (first(rest seqz)))) (compress (rest seqz))\n        :else (cons (first seqz) (compress (rest seqz)))))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 30, "code": "#(loop [lista '() lastI \\0 i 0] \n       (if (= i (count %))\n         (reverse lista)\n         (if (= lastI (.get (seq %) i))\n            (recur lista lastI (inc i))\n            (recur (cons (.get (seq %) i) lista) (.get (seq %) i) (inc i))\n         )\n       )\n )", "user": "5451eb12e4b0e397800069b8"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54580586e4b01be26fd74616"}, {"problem": 30, "code": "(fn [s]\n  (reduce \n    (fn [a b] \n      (if-not (= (last a) b) \n        (conj a b) \n        a))\n    [] s))", "user": "5458c74de4b01be26fd74623"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52e16face4b09f7907dd1421"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "544a8fbbe4b0e39780006957"}, {"problem": 30, "code": "(fn compress [s]\n  (cond \n    (empty? (rest s))\n      s\n    (= (first s) (second s))\n      (cons (first s) (compress (drop-while #(= % (first s)) s)))\n   \t:else\n      (cons (first s) (compress (rest s)))))", "user": "545801f6e4b01be26fd74615"}, {"problem": 30, "code": "(fn compress\n   ([x] (compress x nil))\n   ([x c]\n    (cond (empty? x) x\n          (= c (first x)) (compress  (rest x) (first x))\n          :else           (cons (first x) (compress (rest x) (first x))))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 30, "code": "(fn dd [x] (if (empty? x) () (if (= (first x) (first (rest x))) (dd (rest x)) (cons (first x) (dd (rest x))))))", "user": "544e1794e4b0e39780006980"}, {"problem": 30, "code": "(fn [coll] (keep (fn [[x1 x2]] (when-not (= x1 x2) x2)) (partition 2 1 (cons nil coll))))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 30, "code": "(fn shorten [xs]\n   (if (> (count xs) 1)\n     (let [streak-length (count (take-while #(= % (first xs)) xs))]\n       (cons (first xs) (shorten (nthnext xs streak-length))))\n     xs))", "user": "53b14289e4b047364c04448b"}, {"problem": 30, "code": "(fn [col] (-> (partition-by identity col) ((partial mapcat #(vector (first %))))))", "user": "5367bc60e4b0243289761e81"}, {"problem": 30, "code": "(fn [coll] \n  (reverse \n   ((fn dupl [acc col]\n      (if (empty? col)\n        acc\n        (let [fst (first col) rst (rest col)]\n          (if (or (empty? acc) (not= (first acc) fst))\n            (recur (cons fst acc) rst)\n            (recur acc rst)))))\n    [] coll) \n   ))", "user": "5454bd9be4b0e397800069db"}, {"problem": 30, "code": "(fn [xs] (apply list (reduce #(if-not (= (last %) %2) (conj % %2) %) [] xs)))", "user": "535774c2e4b04ce2eb3ed27c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4e8b5cb8535d65386fec211b"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "53eaa804e4b036ad0777e4ea"}, {"problem": 30, "code": "reduce #(if(= (last %)%2)%(conj % %2))[]", "user": "5367f0a7e4b0243289761e88"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5460612be4b01be26fd74691"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '()", "user": "54570c87e4b080a794c2c887"}, {"problem": 30, "code": "(fn [n] \n  (map first (partition-by identity n))\n  )", "user": "515d414be4b00901442db1db"}, {"problem": 30, "code": "(fn [xs]\n  (reverse\n   (reduce (fn [acc x] (if (= (first acc) x) acc (cons x acc)))\n           (list)\n           xs)))", "user": "526e1bd0e4b03e8d9a4a730b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 30, "code": "#(map (fn [item] (first item)) (partition-by identity %))", "user": "5458a729e4b01be26fd74622"}, {"problem": 30, "code": "#(cons (first %) (filter (fn[x] (not (nil? x))) (map (fn[[a b]] (if (= a b) nil b)) (partition 2 (interleave % (rest %))))))", "user": "545537c1e4b0e397800069dd"}, {"problem": 30, "code": "(fn pack\n  ([head coll]\n     (cond (empty? coll) (list head)\n           (= head (first coll)) (pack head (rest coll))\n           :else (conj (pack (first coll) (rest coll)) head)))\n  ([coll]\n     (pack (first coll) (rest coll)))\n  )", "user": "545d881de4b01be26fd7466f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54630e6be4b01be26fd746bc"}, {"problem": 30, "code": "(fn -compress [xs]\n  (#(reduce \n      (fn -maybe-concat [lst item]\n        (concat lst \n          (cond\n            (not= (last lst) item) [item]\n            (=    (last lst) item) []\n          )\n        )\n      ) '() xs))\n)", "user": "546113ffe4b01be26fd74699"}, {"problem": 30, "code": "(fn [sequence]\n  (loop [sequence sequence\n         last-found nil\n         acc []]\n    (cond\n      (empty? sequence)\n      acc\n          \n      (= last-found (first sequence))\n      (recur (rest sequence)\n             last-found acc)\n          \n      true\n      (recur (rest sequence)\n             (first sequence)\n             (conj acc (first sequence))))))", "user": "5461c402e4b01be26fd746a6"}, {"problem": 30, "code": "#((fn foo [coll1 ret]\n   (let [coll (seq coll1)]\n     (if (< (count coll) 2) (apply conj ret coll)\n       (let [[x y & z] coll]\n         (if (= x y) (foo (cons y z) ret) (foo (cons y z) (conj ret x)))\n         )\n       )\n     )\n   ) % []\n  )", "user": "545eb56be4b01be26fd74682"}, {"problem": 30, "code": "(fn xx [coll]\n      (loop [result []   vals (seq coll)]\n        (if-not vals\n          result\n          (if (= (first vals) (second vals))\n            (recur result (next vals))\n            (recur (conj result (first vals)) (next vals))))))", "user": "532f7e12e4b019098a6f8b4e"}, {"problem": 30, "code": "(fn [xs]\n  (reverse\n   (loop [l (first xs) tail (rest xs) result (cons l '())]\n     (cond (empty? tail) result\n           (= l (first tail)) (recur l (rest tail) result)\n           :else (recur (first tail) (rest tail) (cons (first tail) result))))))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "54652aece4b01be26fd746d7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5465712ee4b01be26fd746dc"}, {"problem": 30, "code": "(fn nub [l]\n  (cond\n   (or (empty? l) (empty? (rest l))) l\n   (= (first l) (second l)) (nub (rest l))\n   :else (cons (first l) (nub (rest l)))))", "user": "54651982e4b01be26fd746d4"}, {"problem": 30, "code": "(fn[x] (cons (nth x 0) (remove nil? (map (fn [y z] (when (not= y z) z)) x (rest x)))))", "user": "5464a536e4b01be26fd746cf"}, {"problem": 30, "code": "(fn[y] ((fn[x] (reduce #(if ( = (first %1) %2) %1 (conj %1 %2)) (list( first x)) x )) (reverse y)))", "user": "54651ef5e4b01be26fd746d5"}, {"problem": 30, "code": "(fn compress [[fst & rst :as xs]]\n  (if (not fst)\n    '()\n  \t(if (= fst (first rst))\n      (compress rst)\n      (cons fst (compress rst)))))", "user": "5468033ee4b00cfc9eacc133"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "user": "5468d932e4b00cfc9eacc13e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) \n          %1 \n          (conj %1 %2)) \n       []\n\n\n; #(map first (partition-by identity %))", "user": "52810ceae4b0757a1b17141b"}, {"problem": 30, "code": "(fn dist [coll] \n  (let [l (first coll) r (next coll)]\n    (concat   \n     (if (= l (if (sequential? r)\n               (first r)\n               [r]))\n       \"\"\n       [l])\n     (when (sequential? r)\n       (dist r)))))", "user": "5093a80be4b097f48cc38583"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53613db8e4b0243289761e41"}, {"problem": 30, "code": "(fn comp-seq [s]\n  ((fn [s s-acc]\n    (if (empty? s)\n \t  s-acc\n      (if (= (first s) (last s-acc))\n        (recur (rest s) s-acc)\n        (recur (rest s) (concat s-acc (list (first s)))))))\n   s '()))", "user": "54651faee4b01be26fd746d6"}, {"problem": 30, "code": "(fn compress \n  [coll]\n  (when-let [[h & t] (seq coll)]\n    (if (= h (first t))\n      (compress t)\n      (cons h (compress t)))))", "user": "5469e7cce4b00cfc9eacc14c"}, {"problem": 30, "code": "(fn [l] \n  (reverse\n   (loop [remain l\n          fresh '()]\n     (if (= 0 (count remain))\n       fresh\n       (if (= (first fresh) (first remain))\n         (recur (rest remain) fresh)\n         (recur (rest remain) (cons (first remain) fresh)))))))", "user": "52b9cfb9e4b07a9af57922c5"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] %)", "user": "544e9022e4b0e3978000698b"}, {"problem": 30, "code": "#(map (fn [[x]] x) (partition-by identity %))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 30, "code": "(fn a [s]\n  (when-first [c s]\n    (cons c (a (drop-while #(= % c) s)))))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 30, "code": "(fn [p]\n     (loop [i 1 res [(first p)]]\n       (if (= i (count p))\n         res\n         (recur\n           (inc i)\n           (if (not= (nth p i) (nth p (- i 1)))\n             (conj res (nth p i))\n             res)\n           ))))", "user": "52a90056e4b0c58976d9ac39"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54485727e4b032a45b8693c6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 30, "code": "(fn [col] \n  (reverse \n   (reduce (fn [accum next_item] \n             (if (= (first accum) next_item) \n               accum \n               (cons next_item accum)\n             )\n           ) \n    [] col )))", "user": "5465febde4b01be26fd746e1"}, {"problem": 30, "code": "(fn r [li]\n  (for [i (range 0 (count li)) \n                    :when (or (= i (dec (count li))) (not= (nth li i) (nth li (inc i))))]\n    (nth li i)))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "546a6dbbe4b00cfc9eacc156"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53da059be4b0e771c302547e"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5468a110e4b00cfc9eacc13d"}, {"problem": 30, "code": "(fn press [ls] \n  (when-let [[x & xs] (seq ls)]\n    (if (= x (first xs))\n      (press xs)\n      (cons x (press xs))\n      )))", "user": "546d41bde4b00cfc9eacc18c"}, {"problem": 30, "code": "(fn dedup [coll]\n  (when (seq coll)\n    (cons (first coll) (dedup (drop-while (partial = (first coll))\n                                          (rest coll))))))", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 30, "code": "(fn [input]\n  (loop [input input\n         output []]\n    (cond\n     (empty? input)\n     output\n     \n     (and (> (count input) 1) (= (first input) (second input)))\n     (recur (rest input) output)\n     \n     :else\n     (recur (rest input) (conj output (first input))))))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (concat % [%2])) []", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 30, "code": "(fn [x] (reduce \n               (fn [acc, y] \n                 (if-not (= (last acc) y) \n                   (conj acc y)\n                   acc\n                 )\n               ) (vec '()) x)\n             )", "user": "52149e21e4b0961f15ac4d94"}, {"problem": 30, "code": "(fn [sequence] (map first (partition-by identity sequence)))", "user": "543bb568e4b032a45b869334"}, {"problem": 30, "code": "(fn ! [seq & arg]\n   (if(= (count seq) 0) \n     ()\n   (concat \n     (if (= (first seq) (first arg)) \n        '() \n        (list (first seq))) \n     (! (rest seq) (first seq)))))", "user": "546fa7a7e4b00cfc9eacc1b1"}, {"problem": 30, "code": "(fn compress\n  ([lst] (compress lst (gensym) nil))\n  ([lst prev acc]\n    (if (empty? lst)\n\t(reverse acc)\n        (if (= (first lst) prev)\n            (compress (rest lst) (first lst) acc)\n            (compress (rest lst) (first lst) (cons (first lst) acc))))))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 30, "code": "(fn [input]\n    (reduce (fn [acc value]\n              (if (= (last acc) value)\n                acc\n                (conj acc value)))\n            []\n            input))", "user": "54508859e4b0e397800069a3"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "545f737ce4b01be26fd74688"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1))\n          %1\n          (concat %1 [%2] ))\n        []", "user": "54708efce4b00cfc9eacc1b9"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5433d3ebe4b0b6b47310fce4"}, {"problem": 30, "code": "(fn [xs] (letfn [(remove-conseq-dups-iter [xs acc]\n                     (if (seq xs)\n                       (if (not= (first (rseq acc)) (first xs))\n                         (recur (rest xs) (conj acc (first xs)))\n                         (recur (rest xs) acc))\n                       acc))]\n             (remove-conseq-dups-iter xs [])))", "user": "53a6e646e4b0ef122a8689cd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "541cf6dfe4b01498b1a71a7a"}, {"problem": 30, "code": "#(reduce \r\n  (fn [r a]\r\n    (if (= a (first r))\r\n      r\r\n      (conj r a)))\r\n  '()\r\n  (reverse %))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 30, "code": "(fn [x] (loop [s x l (first x) acc (list (first x))]\n          (if (nil? (first s))\n            (reverse acc)\n            (recur (rest s) (first s) (if (= l (first s)) acc (conj acc (first s))))\n                   )))", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 30, "code": "(fn[s]\n  (loop [in s out [] lst nil]\n    (cond (empty? in) out\n          (= (first in) lst) (recur (rest in) out lst)\n          :else (recur (rest in) (conj out (first in)) (first in)))))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 30, "code": "(fn [coll] (map last (partition-by identity coll)))", "user": "5462dc5ae4b01be26fd746b9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54734a0de4b0c51c1f4d727b"}, {"problem": 30, "code": "(fn remdup [ls] \n  (let [[fst & rst] ls]                                                                                                       \n    (cond                                                                                                                     \n     (empty? rst) ls                                                                                                          \n     (= (second ls) fst) (remdup rst)                                                                                        \n     :else (cons fst (remdup rst)))))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 30, "code": "(fn [coll] (->> (partition-all 2 1 coll)\n                (filter #(not= (first %) (second %)))\n                (map first)))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 30, "code": "#(reduce (fn [x y]\n\n          (if (= (last x) y)\n            x\n            (concat x [y])\n            )\n          )\n        '() %)", "user": "54630cdae4b01be26fd746bb"}, {"problem": 30, "code": "(fn compress \n  [coll]\n  (when-let \n    [[f & r] \n     (seq coll)]\n    (if (= f (first r))\n           (compress r)\n           (cons f (compress r)))))", "user": "543b9f8ce4b032a45b869332"}, {"problem": 30, "code": "(fn clr [a] (letfn [(cmprs [a] (if (= (count a) 1)  a (conj (cmprs (pop a)) (if (reduce = (take-last 2 a)) nil (last a)))))] (remove nil?(cmprs (vec a)))))", "user": "545d5c3be4b01be26fd7466d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54696e4ce4b00cfc9eacc147"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 30, "code": "(fn compressor [x]\n  (loop [old nil x x acc []]\n  \t(if (empty? x) acc\n  \t\t(recur (first x) (rest x) \n  \t\t\t(if (= old (first x))\n  \t\t\t\tacc\n  \t\t\t\t(conj acc (first x)))))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 30, "code": "(fn [l]\n  (loop [in l out '()]\n    (println \"in: \" in \", out: \" out)\n    (cond \n     (empty? in) (reverse out)\n     (= (first out) (first in)) (recur (rest in) out)\n     :else (recur (rest in) (conj out (first in))))))", "user": "54764a8fe4b0c51c1f4d72a3"}, {"problem": 30, "code": "(fn f [xs] (if (empty? (rest xs)) xs (if (= (first xs) (second xs)) (f (rest xs)) (conj (f (rest xs)) (first xs)))))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 30, "code": "(fn [c]\n  (reverse (reduce (fn [acc n]\n            (if (= (first acc) n)\n                 acc\n                 (cons n acc))) '() c)))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 30, "code": "reduce (fn [xs x] (if (= x (last xs)) xs (concat xs (list x)))) '()", "user": "53c1b787e4b00fb29b221266"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54764cf1e4b0c51c1f4d72a4"}, {"problem": 30, "code": "(fn cseq [input] (loop [out (list), in input] (if (empty? in) out (if (= (last out) (first in)) (recur out (rest in)) (recur (concat out (list (first in))) (rest in))))))", "user": "5460832ce4b01be26fd74693"}, {"problem": 30, "code": "#(reduce (fn [st ed] (if-not (= (last st) ed) (conj st ed) st)) [] %)", "user": "54524dbbe4b0e397800069bd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 30, "code": "(fn dedup [lst] (if\n                  (= lst '())\n                  '()\n                  (cons (first lst) (dedup (drop-while #(= % (first lst)) (rest lst))))\n                  )\n  \n  )", "user": "5471f090e4b094393f72dd6e"}, {"problem": 30, "code": "(fn remove-dups [x]\n  (:accum  (reduce (fn [{:keys [prev accum]} item]\n                     (if (= prev item)\n                       {:prev item :accum accum}\n                       {:prev item :accum (conj accum item)})) {:accum []} x)))", "user": "538f89bbe4b0b51d73faae8f"}, {"problem": 30, "code": "#(mapcat set (partition-by identity %))", "user": "5472d919e4b094393f72dd7b"}, {"problem": 30, "code": "#(map last (partition-by list %))", "user": "535c2d21e4b04ce2eb3ed2b2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 30, "code": "(fn cas [input]\n  (loop [i input res []]\n    (if (empty? i) \n        res\n      (if (= (first i) (last res))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i)))))))", "user": "5475d755e4b0c51c1f4d72a0"}, {"problem": 30, "code": "(fn [x] \n  (conj \n   (#(mapcat \n      (fn \n        [x y] \n        (when (not (= x y)) (list y) )) \n      (butlast %) \n      (rest %)) \n     x) \n   (first x)))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "546e0c24e4b00cfc9eacc198"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53c83f94e4b00fb29b2212af"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "53075d82e4b02e82168697a1"}, {"problem": 30, "code": "#(map last (partition-by identity %))", "user": "547c2c6ce4b0c51c1f4d72e3"}, {"problem": 30, "code": "#(reduce (fn [acc e] (if (= e (last acc)) acc (concat acc [e]))) '() %)", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 30, "code": "(fn [xs] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() xs)))", "user": "5453b522e4b0e397800069d0"}, {"problem": 30, "code": "(fn [s] (map #(first %) (partition-by identity s)))", "user": "54750ca3e4b0c51c1f4d7294"}, {"problem": 30, "code": "(fn nodup2 [ss]\n  (let [l (atom nil)\n        non-repeat (fn [x] (if (not= @l x) (do (reset! l x) x) nil))\n        res (keep non-repeat (seq ss))]        \n    (if (string? ss) \n      (apply str res)\n      res)))", "user": "534b57bbe4b084c2834f4a78"}, {"problem": 30, "code": "(fn [xs]\n  (map first \n       (partition-by identity xs)))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 30, "code": "(fn nodups\n  ([coll]\n   (nodups [(first coll)] (seq coll)))\n  ([r coll]\n   (let [mcoll (drop-while (partial = (last r)) coll)\n         mr (conj r (first mcoll))]\n     (if (empty? mcoll)\n       r\n       (nodups mr mcoll)))))", "user": "54357066e4b0b6b47310fcfd"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5473879ce4b0c51c1f4d727e"}, {"problem": 30, "code": "(fn [x]\n  (reverse (reduce (fn [acc z] (if (= (first acc) z)\n                         acc\n                         (conj acc z))) '() x)))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 30, "code": "(fn [coll]\n  (reduce\n   (fn [xs x]\n     (if (= x (last xs))\n       xs\n       (conj xs x)))\n   []\n   coll))", "user": "5032748ae4b0e78df07b092f"}, {"problem": 30, "code": "#(reduce (fn [xs i]\n           (if (= (last xs) i)\n             xs\n             (conj xs i))) [] %)", "user": "501b1efee4b0b12d9c5f4d82"}, {"problem": 30, "code": "( fn [coll]\n    (\n      loop [coll coll, result []]\n      (\n        if (empty? coll) result\n        (\n          recur (rest coll) (if (= (first coll) (last result)) result (conj result (first coll)))\n          )\n        )\n      )\n    )", "user": "547f3434e4b0c51c1f4d7319"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "548204b2e4b0e286459a117a"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "545cfbb0e4b01be26fd74669"}, {"problem": 30, "code": "(fn [coll] (reduce #(if (not= (last %1) %2) \n                     (conj %1 %2)\n  \t\t\t\t\t  %1)\n                  []\n                  coll))", "user": "54577fefe4b01be26fd7460d"}, {"problem": 30, "code": "(fn remove-dups [xs]\n  (reduce (fn [acc new]\n            (if (= new (last acc)) \n              acc\n              (conj acc new)))\n          []\n          xs))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= (first x) y) x (conj x y))) '() (into () %))", "user": "54852ad0e4b0e286459a11a7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54857e3be4b0e286459a11ad"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5485d2c1e4b0e286459a11b3"}, {"problem": 30, "code": "reduce (fn [coll elem]\n         (if (= (last coll) elem)\n           coll\n           (conj coll elem)))\n[]", "user": "54848141e4b0e286459a119e"}, {"problem": 30, "code": "#(reduce (fn [a b] \n          (if (= (last a) b)\n            a\n            (conj a b))) []  %)", "user": "548392fce4b0e286459a1191"}, {"problem": 30, "code": "(fn myCompress[x]  \n\t\t(\n\t\t\tif(> (count x) 1)\n\t\t\t(\n\t\t\t\tif(= (first x) (nth x 1))\n\t\t\t\t(myCompress (drop 1 x))\n\t\t\t\t(cons (first x) (myCompress (rest x)))\n\t\t\t)\n\t\t\tx\n\t\t))", "user": "548018ede4b0c51c1f4d7334"}, {"problem": 30, "code": "(fn comp [x]\n  (if (> (count x) 1)\n    (if (= (first x) (second x))\n      (comp (drop 1 x))\n      (cons (first x) (comp (rest x)))\n    )\n   x\n  )\n)", "user": "548018e3e4b0c51c1f4d7330"}, {"problem": 30, "code": "#(reduce\n  (fn [a b]\n    (if (= (last a) b)\n         a\n         (conj a b)))\n  []\n  (seq %))", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 30, "code": "(fn compress[x] (if (< (count x) 2) x (if (= (first x) (second x)) (compress (rest x)) (cons (first x) (compress (rest x))) )))", "user": "548485f5e4b0e286459a119f"}, {"problem": 30, "code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 30, "code": "(fn [l]\n  (apply list \n         (reduce #(if \n                    (= (last %1) %2) \n                    %1 (conj %1 %2))\n              [] l)))", "user": "5471f0f3e4b094393f72dd6f"}, {"problem": 30, "code": "#(filter (fn [x] (not= x nil) )  (map-indexed (fn [idx itm]\n                                                (if (= idx (- (count %) 1) )\n                                                  itm\n                                                  (if (= itm (nth % (inc idx)))\n                                                    nil\n                                                    itm) )\n                                                ) %)\n                                \n                )", "user": "548592a8e4b0e286459a11af"}, {"problem": 30, "code": "(fn [xs] (reduce #(if (= (last %1) %2) \n           %1 \n           (conj %1 %2)\n          ) [] xs))", "user": "53f4c3d6e4b0db01ade6f9c5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5463c452e4b01be26fd746c4"}, {"problem": 30, "code": "(fn compress [a-seq]\n  (->> a-seq\n       (map-indexed #(vec [%2\n                           (if (< % (dec (count a-seq)))\n                                (nth a-seq (inc %))\n                                nil)\n                          ]))\n       (remove #(= (first %) (last %)))\n       (map #(first %))))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "543823f1e4b032a45b869311"}, {"problem": 30, "code": "(fn [c]\n  (let [col (vec c)]\n    (filter (complement nil?) (for [i (range (count col))] (if (not= (col i) (if (= i (dec (count col))) nil (col (inc i)))) (col i))))))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 30, "code": "(fn [coll] \n  (loop [c coll \n        acc []]\n    (if (empty? c) acc\n      (recur (rest c)\n             (if (= (first c) (last acc)) acc\n               (conj acc (first c)))))))", "user": "4e526cc4535d302ef430da74"}, {"problem": 30, "code": "(fn [coll]\n  ((fn go [x xs]\n    (when-let [f (first xs)]\n      (if (= f x)\n        (go x (next xs))\n        (cons f (go f (next xs))))))\n   nil coll))", "user": "5488872ee4b0e286459a11d3"}, {"problem": 30, "code": "(fn [st] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] (vec st)))", "user": "5485b402e4b0e286459a11b0"}, {"problem": 30, "code": "#(map last (partition-by identity %))", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 30, "code": "(fn [s] (reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) [] (seq s)))", "user": "547e5efbe4b0c51c1f4d7306"}, {"problem": 30, "code": "(fn [s]\n  (loop [acc [] prev nil x s]\n    (if (= (count x) 0)\n      acc\n      (if (= prev (first x))\n        (recur acc prev (rest x))\n        (recur (conj acc (first x)) (first x) (rest x))))))", "user": "52a803cee4b0c58976d9ac26"}, {"problem": 30, "code": "reduce #(if (not= (last %) %2) (conj % %2) %) []", "user": "54893618e4b0e286459a11e0"}, {"problem": 30, "code": "(fn dup [x] (loop [ret '() val x]\n               (if (empty? val)\n                 (reverse ret)\n                 (if (= (first ret) (first val))\n                   (recur ret (rest val))\n                   (recur (conj ret (first val)) (rest val))))))", "user": "52457931e4b08ba239308107"}, {"problem": 30, "code": "#(map first (partition-by (fn [x] x) %))", "user": "54899701e4b0e286459a11ea"}, {"problem": 30, "code": "(fn __ [coll]\n  (reduce (fn [acc current]\n            (if (= (last acc) current)\n                acc\n                (conj acc current)))\n           []\n           coll))", "user": "547f8736e4b0c51c1f4d731d"}, {"problem": 30, "code": "(fn compress\n  [coll]\n  (when-let\n    [[f & r] (seq coll)]\n    (if (= f (first r))\n      (compress r)\n      (cons f (compress r)))))", "user": "4f95900ce4b0dcca54ed6cd3"}, {"problem": 30, "code": "reduce (fn [xs x] (if (= x (last xs)) xs (conj xs x))) []", "user": "548af5b5e4b0e286459a11f8"}, {"problem": 30, "code": "(fn [a] (map first (partition-by identity a)))", "user": "52eb2ec9e4b0705949c44439"}, {"problem": 30, "code": "(fn dd \n  ([xs] (if (empty? xs) () (dd (rest xs) (first xs))))\n  ([xs e] (cons e (dd (drop-while (partial = e) xs)))))", "user": "548cd637e4b0e286459a1210"}, {"problem": 30, "code": "(fn dups [[x & xs]] (cond\n                (nil? x) '()\n                (= x (first xs)) (dups xs)\n                :else (cons x (dups xs))))", "user": "548cd813e4b0e286459a1211"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 30, "code": "(fn [xs]\n  (loop [cur (first xs) nex (second xs) res [] items (rest xs)]\n    (if (empty? items)\n      (conj res cur)\n      (if (= cur nex)\n        (recur (first items) (second items) res (rest items))\n        (recur (first items) (second items) (conj res cur) (rest items))))))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 30, "code": "(fn [xs]\n  (reverse (reduce (fn [x y]\n            (if (not= y (first x))\n                (conj x y)\n                x))\n          () xs)))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 30, "code": "(fn [x] (reduce (fn [acc el] (if (= (last acc) el)\n                               acc\n                               (conj acc el)))\n                []\n                x))", "user": "548ff2d5e4b0b312c081ff2b"}, {"problem": 30, "code": "(fn [collection]\n  (loop [result []\n         tempCollection collection]\n    (if (empty? tempCollection)\n      result\n      (let [tail (rest tempCollection)\n            item0 (first tempCollection)\n            item1 (first tail)]\n        (if (= item0 item1)\n          (recur result tail)\n          (recur (conj result item0) tail))))))", "user": "548f339ee4b0e286459a1233"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "548f3ee4e4b0e286459a1237"}, {"problem": 30, "code": "(fn [n]\n  (map first (partition-by identity n)))", "user": "4fbfbd4fe4b081705acca31c"}, {"problem": 30, "code": "(fn [s] (map first (partition-by #(identity %) s)))", "user": "534e60c2e4b084c2834f4ab2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "548f19a8e4b0e286459a1231"}, {"problem": 30, "code": "(fn [coll]\n  (reduce #(if-not (= (last %1) %2)\n           (conj %1 %2)\n           %1) [] coll)\n  )", "user": "50f3bd98e4b041536e2eca3a"}, {"problem": 30, "code": "reduce (fn [acc el]\n(if (= (last acc) el) acc\n (conj acc el)\n)) '[]", "user": "542b0592e4b0dad94371f286"}, {"problem": 30, "code": "(fn ! [x] (let [a (first x)\n                  b (second x)\n                  skippy-rest (and b ( ! (rest x)))]\n              (if (= a b)\n                skippy-rest\n                (cons a skippy-rest)))\n    )", "user": "548f7bf1e4b0e286459a123b"}, {"problem": 30, "code": "#(reduce (fn\n           [acc new-char] \n           (if (= (last acc) new-char)\n             acc\n             (concat acc [new-char])))\n         '() %)", "user": "5491bebbe4b0b312c081ff3c"}, {"problem": 30, "code": "(fn compress [coll] \n  (if (empty? coll)\n    coll\n    (let [prev (first coll)]\n      (cons prev (compress (drop-while #(= prev %)  coll))))))", "user": "548ade6de4b0e286459a11f6"}, {"problem": 30, "code": "(fn [s]\n      (let [pair-matches (fn [[x y]] (= x y))]\n        (concat (->>\n          s\n          (partition 2 1)\n          (remove pair-matches)\n          (map first)\n        ) [(last s)])))", "user": "54924f64e4b0b312c081ff42"}, {"problem": 30, "code": "(fn\n  [xs]\n  (loop [res [(first xs)] tail (rest xs)]\n    (if (empty? tail)\n      res\n      (if (= (last res) (first tail))\n        (recur res (rest tail))\n        (recur (conj res (first tail)) (rest tail))))))", "user": "54926752e4b0b312c081ff44"}, {"problem": 30, "code": "(fn [in]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] in))", "user": "54903056e4b0b312c081ff2e"}, {"problem": 30, "code": "(fn remove-dup [coll]\n  (let [comb (fn [coll elem]\n               (if (= (last coll) elem)\n                 coll\n                 (concat coll (list elem))))]\n    (reduce comb (empty coll) coll)))", "user": "5493ccbbe4b0b312c081ff50"}, {"problem": 30, "code": "#(loop [lis % ss []]\n    (if (not (empty? (seq lis)))\n      (recur (pop (vec lis)) \n          (if (not= (last ss) (last (seq lis))) (conj ss (last (seq lis))) ss)\n      )\n      (reverse ss)\n    )\n)", "user": "54897284e4b0e286459a11e6"}, {"problem": 30, "code": "(fn ppp [a-seq]\n  (let [helper (fn [res prev a]\n    (cond\n     (empty? a) res\n     :else (recur (if (= prev (first a)) res\n                    (conj res (first a))) (first a) (rest a))))]\n    (reverse (helper '() nil a-seq))))", "user": "51d26b0ae4b0d13b04db0d97"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "512b07f7e4b078b06821febb"}, {"problem": 30, "code": "(fn [s] (loop [x s, last nil, r []]\n (if (empty? x) r \n  (let [y (first x)]\n   (recur (rest x) y\n    (if (= last y) r (conj r y)))))))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "547e6fd2e4b0c51c1f4d730b"}, {"problem": 30, "code": "(fn [l] (reduce (fn [c n] (if (= n (last c)) c (concat c [n]) )) '() l))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 30, "code": "(fn my-compress [l]\n  (reduce\n    (fn [acc el]\n      (if (= el (last acc))\n        acc\n        (conj acc el)))\n    []\n    l))", "user": "548c8115e4b0e286459a120c"}, {"problem": 30, "code": "#(first (reduce (fn [[result last-element] current-element]\n                  (if (= current-element last-element)\n                    [result current-element]\n                    [(conj result current-element) current-element]))\n         [[(first %)] (first %)] (rest %)))", "user": "5455510fe4b0e397800069df"}, {"problem": 30, "code": "#(reduce (fn [c x] (if (= (last c) x)\n                           c \n                           (conj c x))\n                 \n                 ) [] %)", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "52ae886de4b0c58976d9acab"}, {"problem": 30, "code": "(fn dedup\n\t\t [x]\n\t\t (if (> 2 (count x))\n\t\t   x\n\t\t   (if (= (first x) (second x))\n\t\t     (dedup (rest x))\n\t\t     (cons (first x) (dedup (rest x)))\n\t\t     )))", "user": "54965534e4b0b312c081ff65"}, {"problem": 30, "code": "(fn only-caps [s]\n  (reduce (fn [col, v] (if (= (last col) v) col (conj col v))) [] s))", "user": "54973374e4b0b312c081ff6f"}, {"problem": 30, "code": "(fn [os] (loop [s os res []] (cond (empty? s) res (= (last res) (first s)) (recur (rest s) res) :else (recur (rest s) (conj res (first s))))))", "user": "4f0d6686535d0136e6c22318"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "543d89dfe4b032a45b869350"}, {"problem": 30, "code": "(fn [coll]\n     (reduce (fn [res, x]\n                 (if (= x (last res))\n                     res\n                     (conj res x)))\n               []\n               coll))", "user": "548f37c7e4b0e286459a1234"}, {"problem": 30, "code": "(fn [x]\n \t(loop [[head & tail] x ret []]\n      (if (empty? tail)\n        (reverse (cons head ret))\n        (if (= head (first tail))\n          (recur tail  ret)\n          (recur tail (cons  head ret))\n          )\n        )\n      )\n                 \n)", "user": "54975e99e4b0b312c081ff72"}, {"problem": 30, "code": "(fn [xs] (reduce #(if (= (last %) %2) % (conj % %2)) [] (vec xs)))", "user": "50aa777fe4b056ee01935866"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 30, "code": "(fn compr [s] \n        (when-let [[eka & loput] (seq s)]\n            (if (= eka (first loput))\n                (compr loput)\n                (cons eka (compr loput))\n            )\n        )\n)", "user": "54996971e4b0b312c081ff8d"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "542dc7c7e4b0dad94371f2bd"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] %)", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 30, "code": "(fn pairwise-distinct [c]\n    (loop [result '()\n           remaining (reverse (seq c))]\n        (if (seq remaining)\n            (if (= (first remaining) (second remaining))\n                (recur result\n                       (rest remaining))\n                (recur (conj result (first remaining))\n                       (rest remaining)))\n            result)))", "user": "5498c4cfe4b0b312c081ff85"}, {"problem": 30, "code": "(fn [x]\n  (cons (first x) ((fn eh [x pre]\n    (cond\n     (empty? x) '()\n     (= (first x) pre) (eh (rest x) pre)\n     :else (cons (first x) (eh (rest x) (first x))))) (rest x) (first x))))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 30, "code": "(fn [s]\n (for [[f] (partition-by identity s)] f)\n)", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 30, "code": "(fn p30-compress [x]\n  (reduce #(if (or (empty? %1) (not= (last %1) %2))\n             (conj %1 %2)\n             %1) [] x))", "user": "543b12cce4b032a45b86932a"}, {"problem": 30, "code": "#(let [coll (atom '())]\n    (doseq [i %]\n      (if (not= i (first @coll))\n        (swap! coll conj i)))\n    (reverse @coll))", "user": "548f11a0e4b0e286459a122d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 30, "code": "(fn [coll]\n  (concat (map first \n               (filter #(not= (first %) (second %)) \n                       (partition 2 1 coll)))\n          [(last coll)]))", "user": "5470cb10e4b094393f72dd65"}, {"problem": 30, "code": "(fn compress [l]\n    (cond\n      (empty? (rest l)) l\n      (= (first l) (second l)) (compress (rest l))\n      :else (cons (first l) (compress (rest l)))\n      )\n    )", "user": "540217e1e4b0df28a13c62cb"}, {"problem": 30, "code": "(fn del-consecutive-dups [col]\n  (mapcat set (#(partition-by identity %1) col)))", "user": "548018d1e4b0c51c1f4d7326"}, {"problem": 30, "code": "#(loop [x % total []]\n  (if (= (count x) 1)\n    (conj total (first x))\n    (if (= (first x) (second x))\n      (recur (rest x) total)\n      (recur (rest x) (conj total (first x))))))", "user": "549e5e52e4b0f3d1d8e70f9e"}, {"problem": 30, "code": "(fn [x] (reduce \n                  #(if (= %2 (last %1)) %1 (conj %1 %2))\n                  []\n                  x))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "549ea7e0e4b0f3d1d8e70fa3"}, {"problem": 30, "code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "user": "5499e23de4b03163384f4706"}, {"problem": 30, "code": "(fn [coll]\n  (loop [result ()\n         c1 coll\n         p \"\"]\n    (if (empty? c1)\n      result\n      (if (= (first c1) p)\n        (recur result (rest c1) p)\n        (recur (concat result (take 1 c1)) (rest c1) (first c1))))))", "user": "54889b50e4b0e286459a11d4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "549c181ce4b0f3d1d8e70f83"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 30, "code": "#(let [xs (filter (fn [[x y]] (not (= x y))) (partition 2 1 (seq %)))] (concat (first xs) (map second (rest xs))))", "user": "549def9ce4b0f3d1d8e70f99"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5487eb1de4b0e286459a11ca"}, {"problem": 30, "code": "(fn [x] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() x)))", "user": "548ef1dee4b0e286459a1229"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5466199ce4b01be26fd746e2"}, {"problem": 30, "code": "(fn f [stuff] (if-not (first stuff) (list)\n                  (if (= (first stuff) (second stuff))\n                    (f (rest stuff))\n                    (conj (f (rest stuff)) (first stuff)))))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "549dd591e4b0f3d1d8e70f98"}, {"problem": 30, "code": "(fn compress-seq [s]\n  (map first (partition-by identity s)))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "538fe171e4b0b51d73faae92"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52e12ac5e4b09f7907dd141a"}, {"problem": 30, "code": "(fn compress\n\t\t     ([xs] \n\t\t      (if (empty? xs) nil\n\t\t\t  (compress (first xs) (rest xs) (cons (first xs) nil))))\n\t\t     ([u xs res]\n\t\t      (if (empty? xs) res\n\t\t\t  (if (= u (first xs)) (compress u (rest xs) res)\n\t\t\t      (compress (first xs) (rest xs) (concat res (cons (first xs) nil)))))))", "user": "5488537be4b0e286459a11cf"}, {"problem": 30, "code": "#(reverse (reduce (fn [m e] (if (= (peek m) e) m (conj m e))) '() %))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 30, "code": "(fn [input]\n                    (let [s (seq input)]\n                      (reduce (fn [coll val]\n                                (if (= (last coll) val)\n                                  coll\n                                  (conj coll val))\n                                ) [] s)\n                      ))", "user": "545b0275e4b01be26fd74648"}, {"problem": 30, "code": "(fn my-compress [v]\n  (loop [xs v prev nil zs []]\n    (if (empty? xs)\n      zs\n      (let [[x & rxs] xs]\n        (if (= x prev)\n          (recur rxs prev zs)\n          (recur rxs x (conj zs x)))))))", "user": "54a31fdae4b09f271ff37c64"}, {"problem": 30, "code": "(fn [a]\n   (reverse ((fn [b r]\n               (if (empty? b)\n                 r\n                 (if (= (first r) (first b))\n                   (recur (rest b) r)\n                   (recur (rest b) (conj r (first b)))))) a '())))", "user": "549cd548e4b0f3d1d8e70f91"}, {"problem": 30, "code": "#(map first (partition-by list %))", "user": "54a6399ee4b09f271ff37c85"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54a70af9e4b09f271ff37c93"}, {"problem": 30, "code": "(fn cmprs [s]\n   (reverse (loop [s' s curr nil at-start true result nil]\n    (if (empty? s')\n        result\n        (if (and (not at-start) \n              (= (first s') curr))\n          (recur (rest s') curr false result)\n          (recur (rest s') (first s') false (cons (first s') result))\n        )\n    )\n  )\n))", "user": "548f5086e4b0e286459a1239"}, {"problem": 30, "code": "(fn [xs] (map first (partition-by identity xs)))", "user": "54a7336be4b09f271ff37c95"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 30, "code": "#(loop [r [(first %)] i 1]\n    (if (= i (count %))\n      r\n      (let [e1 (nth % (dec i)) e2 (nth % i)] \n        (if (= e1 e2)\n          (recur r (inc i))\n          (recur (conj r e2) (inc i))\n          )\n        )\n      )\n    )", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 30, "code": "(fn comp [s]                                                                                                                                                                                                   \n  (reduce (fn [r e]                                                                                                                                                                                               \n            (if (= (last r) e)                                                                                                                                                                                   \n              r                                                                                                                                                                                                  \n              (conj r e))                                                                                                                                                                                        \n            ) [] s))", "user": "53403f42e4b085b17e897da8"}, {"problem": 30, "code": "(\n  fn d [x] \n    (\n       if (> (count x) 0)  (if (= (first x) (first (rest x))) (concat [] (d (rest x))) (concat [(first x)] (d (rest x)))) '() \n    )\n)", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 30, "code": "(\n\tfn function [var] \n  \t(\n     \t map first (partition-by identity var)\n     )\n)", "user": "548018e8e4b0c51c1f4d7333"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "549d7e16e4b0f3d1d8e70f96"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "50ec69e0e4b04edc3377704a"}, {"problem": 30, "code": "(fn [coll] (reverse (reduce (fn [x y] (if (= y (first x)) x (conj x y))) () coll)))", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53ecd819e4b0d648e757f4ba"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '()", "user": "549cc867e4b0f3d1d8e70f8f"}, {"problem": 30, "code": "(fn [s]\n  (loop [orig s, out ()]\n    (if (empty? orig)\n      (reverse out)\n      (if (= (first orig) (first out))\n        (recur (rest orig) out)\n        (recur (rest orig) (cons (first orig) out))))))", "user": "54a70484e4b09f271ff37c91"}, {"problem": 30, "code": "#(reduce (fn [noneq x]\n           (if (= (last noneq) x) \n             noneq\n             (conj noneq x))) \n         [] %)", "user": "52540bcce4b0541d1855b952"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 30, "code": "(fn([v](reverse(reduce #(if(=(first %1)%2)%1 (conj %1 %2))'()(#(seq %) v)))))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 30, "code": "(fn [a]\n      (loop [x (rest a), latest (first a), res [(first a)]]\n        (if (empty? x)\n          res\n          (if (= (first x) latest)\n            (recur (rest x) (first x) res)\n            (recur (rest x) (first x) (conj res (first x)))))))", "user": "548166b3e4b0e286459a116d"}, {"problem": 30, "code": "(fn [x] \n  (reduce (fn [r e] (if (not= (last r) e) (conj r e) r)) [] x)\n  )", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 30, "code": "(fn [in] (map first (partition-by identity in)))", "user": "54a854f5e4b09f271ff37ca2"}, {"problem": 30, "code": "(fn [x]\n  (letfn[(f[c r]\n           (if (empty? c)\n             r\n             (let [l (last r) pick (first c)]\n               (recur (rest c)(if (= l pick)r (conj r pick))))))]\n    (f x [])))", "user": "549ac3cde4b0f3d1d8e70f71"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54ae5c6be4b09f271ff37cf1"}, {"problem": 30, "code": "reduce (fn [acc x]\n         (concat\n          acc\n          (if-not (= (last acc) x)\n            (list x)))) ()", "user": "54ad4863e4b09f271ff37ce0"}, {"problem": 30, "code": "(fn cmp [coll]\n  (loop [coll coll\n         res []]\n    (if (empty? coll)\n      res\n      (if (= (last res) (first coll))\n        (recur (rest coll) res)\n        (recur (rest coll) (conj res (first coll)))))))", "user": "54af500fe4b09f271ff37d06"}, {"problem": 30, "code": "reduce (fn [list n]\n             (if (not= n (last list))\n               (conj list n)\n               list))\n        '[]", "user": "54af220ce4b09f271ff37d02"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54b13dbce4b09f271ff37d1c"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "50800e49e4b089ade05efbda"}, {"problem": 30, "code": "(fn red [x]\n  (cond\n   (empty? (rest x)) x\n   (= (second x) (first x)) (red (rest x))\n   :else (conj (red (rest x)) (first x))\n   ))", "user": "54b04ce4e4b09f271ff37d12"}, {"problem": 30, "code": "#(reduce (fn [acc item]\r\n             (if (= (peek acc) item)\r\n               acc\r\n               (conj acc item)))\r\n             []\r\n             %)", "user": "540459bfe4b0addc1aec6656"}, {"problem": 30, "code": "(fn compress \n  ([a] (compress a ()) )\n  ([a r] \n   \n   (if (empty? a)\n     (reverse r)\n     (recur (rest a) \n            (if (= (first a) (first r))\n              r\n              (cons (first a) r)))\n   \n   )))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 30, "code": "#(reverse (reduce (fn [xs v] \n                     (cond\n                       (empty? xs) (list v)\n                       (not= (first xs) v) (conj xs v)\n                       :else xs))\n                   () %))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] %)", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "515b03fee4b0a102a3e5262a"}, {"problem": 30, "code": "(fn [x]\n  (->> x\n       (partition-by identity)\n       (map first)))", "user": "528e441be4b0239c8a67aed8"}, {"problem": 30, "code": "(fn [xs]\n  (last (reduce \n    #(if (not= (first %) %2) \n  \t  [%2 (conj (last %) %2)]\n\t  [%2 (last %)])\n    [nil []] \n\txs)))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "53e3e353e4b036ad0777e406"}, {"problem": 30, "code": "(fn [coll]\n   (loop [coll (seq coll) rval []]\n     (if (empty? coll)\n       rval\n       (if (= (first coll) (second coll))\n         (recur (rest coll) rval)\n         (recur (rest coll) (conj rval (first coll)))))))", "user": "54a1d047e4b09f271ff37c4f"}, {"problem": 30, "code": "(fn compress [coll]\n  (when-let [s (seq coll)]\n\t(if (= (first s) (second s))\n      (compress (rest s))\n      (cons (first s) (compress (rest s))))))", "user": "533c5249e4b0e30313ee6cdd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53e88247e4b036ad0777e489"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4fabbd3ee4b081705acca21e"}, {"problem": 30, "code": "(fn compress [x]\n  (if (= 1 (count x))\n    x\n    (let [r (compress (rest x))]\n      (if (= (first x) (first r))\n        r\n        (cons (first x) r)\n        )\n      )\n    )\n)", "user": "54b050cee4b09f271ff37d13"}, {"problem": 30, "code": "(fn [s]\n  (map first (partition-by identity s))\n )", "user": "54b556fce4b05787c3b1639e"}, {"problem": 30, "code": "(fn [values]\n  (reduce\n   (fn [result value]\n     (if (= (last result) value)\n       result\n       (conj result value)))\n   []\n   values))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 30, "code": "#(reduce (fn [result e] (if (= (last result) e) result (conj result e))) [] %)", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 30, "code": "(fn [ls] (map first (partition-by identity ls)))", "user": "54b448f2e4b05787c3b1638e"}, {"problem": 30, "code": "#(loop [newList '() l (apply vector (seq %))]\n   (if (empty? l)\n     newList\n     (recur\n       (if-not (= (first newList) (peek l))\n         (conj newList (peek l)) \n         newList\n         )\n       (pop l))\n     ) \n   )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 30, "code": "(fn [l]\n(map first (partition-by identity l)))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 30, "code": "#(let [t (into [] %) len (count %)]\n  (for [x (take len (iterate inc 0))\n        :when (or (= x 0) (not= (nth t x) (nth t (dec x))))] (nth t x)))", "user": "54b2d392e4b09f271ff37d2f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 30, "code": "(let\n      [\n        buildNoRepeats\n        (fn x [existingSeq builder]\n          (if (empty? existingSeq)\n            builder\n            (if (or \n                 (empty? builder)\n                 (not= (last builder) (first existingSeq)))\n              (x (rest existingSeq) (conj builder (first existingSeq)))\n              (x (rest existingSeq) builder)\n            )\n          )\n        )  \n      ]\n      (fn [s] (seq (buildNoRepeats s [])))\n    )", "user": "54ba8206e4b0ed20f4ff6eb6"}, {"problem": 30, "code": "#(loop [s %\nt ()\nr []]\n(if (empty? s) r (let [fs (first s)] (recur (rest s) (conj t fs) (if (= (first t) fs) r (conj r fs))))))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 30, "code": "(fn \n  [coll]\n  (loop [deduped '() remaining coll]\n    (if (empty? remaining)\n     (reverse deduped)\n      (let [prev-el (first deduped)\n            next-el (first remaining)]\n        (if (not (= prev-el next-el))\n          (recur (cons next-el deduped) (rest remaining))\n          (recur deduped (rest remaining)))))))", "user": "548db64ce4b0e286459a121c"}, {"problem": 30, "code": "(fn remdups\n  ([out in]\n   (if (empty? in)\n     out\n     (if (= (last out) (first in))\n       (remdups out (rest in))\n       (remdups (conj out (first in)) (rest in))))\n   )\n  ([in]\n   (remdups [(first in)] (rest in)))\n  )", "user": "54b2e881e4b09f271ff37d32"}, {"problem": 30, "code": "#(loop [l (seq %) a [] p nil]\n   (if-let [e (first l)]\n     (recur (rest l)\n            (if (= p e) a (conj a e))\n             e)\n              \n     a))", "user": "54b45938e4b05787c3b1638f"}, {"problem": 30, "code": "(fn l [s]\n    (reduce \n      (fn [acc item]\n        (if (= item (last acc))\n          acc\n          (conj acc item)          \n        )\n      )\n      []\n      s\n     )\n)", "user": "54bb0f63e4b0ed20f4ff6ebc"}, {"problem": 30, "code": "#(reduce (fn [r x] (if (= x (last r)) r (concat r (list x)))) \"\" %)", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn [r x]\n            (if (= (peek r) x)\n              r\n              (conj r x))) [] xs))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54856d54e4b0e286459a11aa"}, {"problem": 30, "code": "(fn [a-seq] \n  (reverse (reduce (fn [m, v] (if (= (first m) v) m (cons v m))) '() a-seq)))", "user": "54b972bbe4b0ed20f4ff6ead"}, {"problem": 30, "code": "(fn compr [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (compr r)\n      (cons f (compr r)))))", "user": "5484143de4b0e286459a1197"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 30, "code": "#(reduce (fn [s c] (if (= (last s) c) s (conj s c))) [] %)", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "54bb9730e4b0ed20f4ff6ebf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "536b9d8ae4b0243289761ebe"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54b67463e4b05787c3b163bc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54543484e4b0e397800069d4"}, {"problem": 30, "code": "(fn compress[input]\n  (case (count input)\n    0 []\n    1 input\n    (let [[one two & tail] input\n          compressed (compress (rest input))]\n      (if (= one two)\n        compressed\n        (concat [one] compressed)))))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 30, "code": "#(for [i (range (count %))\n        :let [v (nth % i) w (nth % (+ i 1) nil)]\n        :when (not (and w (= v w)))]\n    v)", "user": "54bec835e4b0ed20f4ff6ef7"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 30, "code": "(fn compress [coll]\n  (let [first-item (first coll)]\n    (if (nil? first-item)\n      '()\n      (cons first-item (compress (drop-while (partial = first-item) (rest coll)))))))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54bcd12be4b0ed20f4ff6ed7"}, {"problem": 30, "code": "(fn remove-dupe [things]\n  (loop [input things,\n         last \"\",\n         output []]\n    (if (empty? input)\n      output\n      (recur \n        (next input)\n        (first input)\n        (if (not= last (first input))\n          (conj output (first input))\n          output)))))", "user": "54bd91d7e4b0ed20f4ff6ee2"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "548018d7e4b0c51c1f4d7328"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54bf7d15e4b0ed20f4ff6f03"}, {"problem": 30, "code": "(fn dedup [s]\n  (when (seq s)\n    (let [f (first s)]\n      (cons f (dedup (drop-while #(= f %) s))))))", "user": "54bc539be4b0ed20f4ff6eca"}, {"problem": 30, "code": "(fn [z] ( reverse (reduce (fn [x, y] (let [_x (first (seq x))] (if (= _x y) x (conj x y)))) '() z )))", "user": "54b331dbe4b09f271ff37d37"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5447e5b7e4b032a45b8693c4"}, {"problem": 30, "code": "(fn cpr [l]\n  (when-let [[f & r] (seq l)]\n    (if (= f (first r))\n      (cpr r)\n      (cons f (cpr r)))))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54bfc88ae4b0ed20f4ff6f09"}, {"problem": 30, "code": "#(map first (partition-by identity %) )", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 30, "code": ";(fn [s]\n;  (loop [result (list (first s))\n;         previous (first s)\n;         s (rest s)]\n;    (if (seq s)\n;      (if (= previous (first s))\n;        (recur result previous (rest s))\n;        (recur (cons (first s) result) (first s) (rest s)))\n;      (reverse result))))\n\n#(map first (partition-by identity %))\n\n;reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "53838b9ee4b06839e8705ee1"}, {"problem": 30, "code": "(fn [s]\n  (loop [[x & xs] (seq s)\n          retval []]\n    \n    (if (empty? xs)    ;; last element\n      (if (char? (first retval))\n        (apply str (conj retval x))\n        (conj retval x))\n      \n      (if (= x (first xs))\n        (recur xs retval)\n        (recur xs (conj retval x))))))", "user": "54bebeb9e4b0ed20f4ff6ef4"}, {"problem": 30, "code": "(fn comp [x] (if (> (count x) 1) (if (= (first x) (second x)) (comp (rest x)) (cons (first x) (comp (rest x)))) x))", "user": "54bfc203e4b0ed20f4ff6f08"}, {"problem": 30, "code": "(fn [s] (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() s))", "user": "54c15722e4b0ed20f4ff6f22"}, {"problem": 30, "code": "(fn [xs]\n    (loop [xs xs\n           comp []]\n      (if (empty? xs)\n        comp\n        (if (not= (first xs) (second xs))\n          (recur (rest xs) (conj (vec comp) (first xs)))\n          (recur (rest xs) comp)))      \n      ))", "user": "54be792ee4b0ed20f4ff6eeb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53e73fe3e4b036ad0777e478"}, {"problem": 30, "code": "(fn [s]\n  (loop [curr s\n         out []]\n    (if (empty? curr)\n      out\n      (if (= (first curr)(last out))\n        (recur (rest curr) out)\n        (recur (rest curr) (concat out [(first curr)]))\n        )  \n      )\n    )\n  )", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "4e435681535dc968683fc4a1"}, {"problem": 30, "code": "(fn compress\n  [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (compress r)\n      (cons f (compress r)))))", "user": "54c31f1be4b045293a27f609"}, {"problem": 30, "code": "(fn [r] (cons (first r) (map second (filter #(not= (first %) (second %)) (map list r (drop 1 r))))))", "user": "510fe537e4b04c71fce993dd"}, {"problem": 30, "code": "(fn [z]\n  (loop [curr z result [] prev nil]\n    (if (empty? curr)\n      result\n      (let [ele (first curr)]\n      (if (= ele prev)\n        (recur (rest curr) result prev)\n        (recur (rest curr) (conj result ele) ele))))))", "user": "5314318ee4b08068f379ed13"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "54c11fdae4b0ed20f4ff6f1b"}, {"problem": 30, "code": "(fn [a-seq]\n  (reverse (reduce #(if (not= (first %1) %2) (cons %2 %1) %1) () a-seq)))", "user": "5235493ee4b05e80434a5064"}, {"problem": 30, "code": "(fn [s]\n  (if (empty? s) s\n    (let [f (first s) r (rest s)]\n      (if (empty? r) s\n        (reverse\n         (loop [out (conj (empty r) f)\n               in r\n               c f]\n          (if (empty? in) out\n             (let [ff (first in) rr (rest in)]\n            \t(recur (if (= ff c) out (conj out ff)) rr ff)\n               )\n            )\n          )\n         )\n        )\n      )\n    )\n  )", "user": "54c271b9e4b045293a27f602"}, {"problem": 30, "code": "(fn mycomp [[x & xs]]\n  (if x\n    (if (= x (first xs))\n      (mycomp xs)\n      (cons x (mycomp xs))\n    )\n  )\n)", "user": "54c5cc17e4b045293a27f624"}, {"problem": 30, "code": "(fn compr   ([x]\n    ( compr (vector (first x)) (vec (rest x))\n    ))\n  ([x y]\n    (if\n      (empty? y)\n       x\n    (if \n         (= (last x) (first y))\n         (compr x (rest y))\n      (compr (conj x (first y)) (vec (rest y)))\n         )\n      )\n   ))", "user": "54be3ab6e4b0ed20f4ff6ee7"}, {"problem": 30, "code": "(comp\n  reverse\n  (partial  \n    reduce\n    #(if\n       (and\n         (not (empty? %1))\n         (= (first %1) %2))\n       %1\n       (cons %2 %1))\n    '()))", "user": "4f8be895e4b02e764a0a5184"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "user": "546692aee4b01be26fd746e7"}, {"problem": 30, "code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "user": "5417bc50e4b01498b1a71a0f"}, {"problem": 30, "code": "#(loop [s % new-s []]\n   (if (empty? s) new-s\n     (if (= (first s) (fnext s))\n       (recur (rest s) new-s)\n       (recur (rest s) (conj new-s (first s))))))", "user": "54c5e36ee4b045293a27f626"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 30, "code": "(fn compressed [sq] \n  (if (empty? sq) \n    nil\n    (if (= (first sq) (second sq))\n      (compressed (rest sq))\n      (conj (compressed (rest sq)) (first sq))\n)))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5339b53fe4b0e30313ee6cac"}, {"problem": 30, "code": "#(reduce (fn [acc x] (if (= x (last acc)) acc (conj acc x))) [] %)", "user": "54c83824e4b045293a27f649"}, {"problem": 30, "code": ";(fn dedup\n;  ([l] (dedup (rest l) (first l)))\n;  ([l prev] (if (empty? l)\n;              [prev]\n;              (let [x (first l)]\n;                (if (= prev x)\n;                  (dedup (rest l) prev)\n;                  (concat [prev] (dedup (rest l) x))\n;                )\n;              )\n;            )\n;  )\n;)\n(fn dedup [l]\n  (map first (partition-by identity l))\n)", "user": "54c82b27e4b045293a27f645"}, {"problem": 30, "code": "#(map first\n     (filter\n      (fn [[a b]] (not= a b))\n      (map vector % (cons nil %))))", "user": "54c611d1e4b045293a27f627"}, {"problem": 30, "code": "(fn [xs]\n  (let [inner-compress (fn inner-compress [last-elem xs]\n                         (cond\n                           (empty? xs) []\n                           (= last-elem (first xs)) (inner-compress last-elem (rest xs))\n                           :else (cons (first xs) (inner-compress (first xs) (rest xs)))))]\n    (inner-compress nil xs)))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 30, "code": "(fn [coll]\n  (loop [curr coll acc []]\n    (if (not (seq curr))\n      acc\n      (if (not= (first curr) (last acc))\n        (recur (rest curr) (conj acc (first curr)))\n        (recur (rest curr) acc)))))", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 30, "code": "#(->> % \n(partition-by identity\n\n)\n(map first)\n)", "user": "50342d1be4b062bc5d7ae15f"}, {"problem": 30, "code": "(fn [x] \n   (reduce (fn [y z]\n            (if (= (last y) z)\n              y\n              (conj y z)\n              )\n            )\n          []\n\t\t\tx\n         )\n  )", "user": "54c7b7c5e4b045293a27f63f"}, {"problem": 30, "code": "#(reverse(reduce\n  (fn [acc x] \n    (if (= (first acc) x)\n      acc\n      (cons x acc)))\n  [] %))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 30, "code": "(fn co [l] (cond\n   (<= (count l) 1) l\n   (= (first l) (second l)) (co (rest l))\n   :else (cons (first l) (co (rest l)))\n))", "user": "54c9f165e4b045293a27f687"}, {"problem": 30, "code": "#(map (comp first distinct) (partition-by identity %))", "user": "54c05fd7e4b0ed20f4ff6f12"}, {"problem": 30, "code": "(fn dup ([s] (dup s 0 [])) ([s p k] (\n   if (empty? s) k\n      (recur (rest s) (first s) (if (= p (first s)) k (concat k [(first s)])))                               \n)))", "user": "54a634abe4b09f271ff37c84"}, {"problem": 30, "code": "#((fn t [[f & r]] \n    (if (seq r) \n      (concat \n        (if (= f (first r)) [] [f])\n        (t r))\n      [f])) (vec %))", "user": "54c97a56e4b045293a27f676"}, {"problem": 30, "code": "(fn compress [s]\n  \"Removes consecutive duplicates from a sequence\"\n  (loop [s1 s s2 '()]\n    (cond\n     (= (first s1) (first s2)) (recur (rest s1) s2)\n     (empty? s1) (reverse s2)\n     :else (recur (rest s1) (cons (first s1) s2)))))", "user": "53bc10f5e4b047364c04450d"}, {"problem": 30, "code": "(fn [x]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x)\n)", "user": "54c97cb3e4b045293a27f677"}, {"problem": 30, "code": "#(reduce (fn [acc x] (if (= (last acc) x)\n                      acc\n                      (conj acc x))) [] %)", "user": "54c9636fe4b045293a27f66e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "546a6e9fe4b00cfc9eacc157"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 30, "code": "(fn [col] (reduce #(concat % (rest %2)) (filter (fn [[x y]] (not= x y)) (partition 2  1 col))))", "user": "5286a2a9e4b0239c8a67ae1e"}, {"problem": 30, "code": "(let [mine \"reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []\"]\n  (fn [x] (map first (partition-by identity x))))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5432df22e4b0dad94371f2f5"}, {"problem": 30, "code": "#(reduce (fn[xs x]\n            (if (= x (last xs))\n                   xs\n                   (conj xs x)))\n            [] %)", "user": "535944d6e4b04ce2eb3ed296"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "54ccb15de4b057c6fda3a28e"}, {"problem": 30, "code": "(fn [xs]\n  (reduce\n   (fn [col x]\n     (if (= x (last col))\n       col\n       (conj col x)))\n   []\n   xs))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 30, "code": "(fn [v]\n  (reduce #(if (= (last %1) %2)\n             %1\n             (conj %1 %2))\n          [] v))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "54c641f8e4b045293a27f628"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 30, "code": "(partial reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [])", "user": "54cd651be4b057c6fda3a2a2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54c6e78ae4b045293a27f634"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54cbb0fde4b057c6fda3a27b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 30, "code": "(fn [xs] (let [xs1 (cons nil xs)\n               xs2 (lazy-cat xs '(nil))\n               unique (for [[x1 x2] (map vector xs1 xs2)\n                            :when (not (= x1 x2))]\n                        x2)]\n           (drop-last unique)))\n\n; 0 1 1 2 3 3 2 2 3 \n; 1 1 2 3 3 2 2 3 0\n; 1 _ 2 3 _ 2 _ 3 0", "user": "4ea03f70535d7eef308072a1"}, {"problem": 30, "code": "(fn compres [lst]\n  (letfn [(f [a lat]\n         (cond\n           (empty? lat) (cons a nil)\n           (= a (first lat)) (f a (rest lat))\n           :else (cons a (f (first lat) (rest lat)))))]\n         (f (first lst)(rest lst))))", "user": "534f8c9ae4b084c2834f4acd"}, {"problem": 30, "code": "(fn f [s]\n  (reduce #(if (= %2 (last %1)) %1 (conj %1 %2))\n          (conj [](first s))\n          (rest s)))", "user": "54ce3790e4b057c6fda3a2ab"}, {"problem": 30, "code": "(fn dedup [[x y & xs :as coll]]\n  (if (nil? xs)\n    (if (= x y) [x] (cons x [y]))\n    (if (= x y)\n      (dedup (cons x xs))\n      (cons x (dedup (cons y xs))))))", "user": "54b07c1ee4b09f271ff37d16"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "545ddac3e4b01be26fd74676"}, {"problem": 30, "code": "(fn consec-distinct [s]\n  (reduce\n    (fn [acc n]\n      (if (or (empty? acc) (not= (last acc) n))\n        (conj acc n)\n        acc))\n    []\n    s))", "user": "54d0afb6e4b0e8a36923e5cd"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))  \n; Basically a variant of the filter function. Note the sequence is destructed\n; into first element f and the rest r.", "user": "54d0f654e4b0e8a36923e5d6"}, {"problem": 30, "code": "(fn [xs] (map #(first (set %)) (partition-by #(identity %) xs)))", "user": "54d03026e4b018d918be98de"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4ec1923f535dfed6da9c6db2"}, {"problem": 30, "code": "#(reverse (reduce (fn [r s] (if (= (first r) s) r (conj r s))) '() %))", "user": "54d2b411e4b0e8a36923e5f9"}, {"problem": 30, "code": "reduce (fn [state v] (if (= (last state) v) state (conj state v))) []", "user": "54246d6de4b01498b1a71aec"}, {"problem": 30, "code": "(fn [coll]\n  (loop [coll coll\n         o nil\n         n (first coll)\n         r '()]\n    (if (not (seq coll))\n      (reverse r)\n      (if (= n o)\n        (recur (rest coll) n (first (rest coll)) r)\n        (recur (rest coll) n (first (rest coll)) (conj r n))))))", "user": "54d321b3e4b0e8a36923e602"}, {"problem": 30, "code": "reduce (fn [r e] (if (= e (last r)) r (conj r e))) []", "user": "54d0d115e4b0e8a36923e5d3"}, {"problem": 30, "code": "reduce (fn[coll x]\n  (if (= (last coll) x)\n    coll\n    (conj coll x))) []", "user": "54d0cedde4b0e8a36923e5d2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 30, "code": "(fn f [s]\n   ((fn q [s result previous]\n     (if (empty? s)\n       (seq result)\n       (if (= previous (first s))\n         (q (rest s)\n            result\n            previous)\n         (q (rest s)\n            (conj result (first s))\n            (first s)))))\n    s\n    []\n    nil))", "user": "54d26316e4b0e8a36923e5f2"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "54cf1932e4b018d918be98c9"}, {"problem": 30, "code": "(fn [coll]\n  (reduce\n   (fn [x y]\n       (if (not (= (last x) y))\n           (concat x (list y))\n         x))\n   '() coll))", "user": "54d2892fe4b0e8a36923e5f7"}, {"problem": 30, "code": "(fn [l] (map first (partition-by identity l)))", "user": "549a1fede4b0f3d1d8e70f6a"}, {"problem": 30, "code": "(fn [v] (loop [c (first v) a [c] r (rest v)] \n          (if (empty? r) a (let [ n (first r)] (if (= n c) (recur c a (rest r)) (recur n (conj a n) (rest r)))))))", "user": "54d0e6c5e4b0e8a36923e5d4"}, {"problem": 30, "code": "#(loop [prev-c nil c (seq %) coll []]\n\t(if (empty? c)\n\t\tcoll\n\t\t(let [[head & tail] c] (recur head tail (if (not= head prev-c) (conj coll head) coll)))))", "user": "4e3ff3a4535dc968683fc499"}, {"problem": 30, "code": "reduce (fn [acc item] (if (= (last acc) item) acc (conj acc item))) []", "user": "54ce6eede4b057c6fda3a2ad"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 30, "code": "(fn [xs] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] xs) )", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 30, "code": "(fn [coll] \n  (:res \n   (reduce (fn [acc e] \n             (if (= (:prev acc) e) \n               acc \n               {:prev e :res (conj (:res acc) e)})) \n           {:res [] :prev nil} \n           coll)))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54cc4156e4b057c6fda3a28c"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "54d412e2e4b0a52adc2e1ffe"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54d70bbfe4b0a52adc2e2026"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 30, "code": "(fn de [x]\n   (if-let [n (next x)]\n     (if (= (first x) (first n))\n       (recur n)\n       (cons (first x) (lazy-seq (de n))))\n     x))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54ca582be4b057c6fda3a259"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "54d5fbe9e4b0a52adc2e2014"}, {"problem": 30, "code": "(fn f [x] (reduce #(if-not (= (last %) %2)\n                     (conj % %2)\n                     %) [] x))", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 30, "code": "(fn [seq]\n  (reduce (fn [acc next]\n            (if (= (last acc) next)\n              acc\n              (conj acc next))) [] seq))", "user": "54d80751e4b0a52adc2e2035"}, {"problem": 30, "code": "(fn [s]\n  (reduce \n    #(if-not (= (last %1) %2) \n      (conj %1 %2) %1) \n    [] s))", "user": "54d75e4ce4b0a52adc2e202a"}, {"problem": 30, "code": "(fn derun [xs]\n  (if (empty? xs) []\n    (let [head (first xs), tail (rest xs)]\n      (if (= (first tail) head) (derun tail) (cons head (derun tail)))\n      )))", "user": "54d7ed8de4b0a52adc2e2034"}, {"problem": 30, "code": "(fn\n  [xs]\n  (loop [result-seq (list (first xs))\n         index 0\n         input-seq xs]\n    (if (= index (count xs))\n      (reverse result-seq)\n      (if (distinct? (first result-seq) (first input-seq))\n        (recur (conj result-seq (first input-seq))\n             (inc index)\n             (rest input-seq))\n        (recur result-seq\n             (inc index)\n             (rest input-seq))))))", "user": "54c72b19e4b045293a27f636"}, {"problem": 30, "code": "(fn [x]\n  (reduce #(if (= (last %1) %2)\n             %1\n             (conj %1 %2))\n          [(first x)] (rest x)))", "user": "54d893a4e4b0a52adc2e2039"}, {"problem": 30, "code": "(fn p30 ([s] (reduce p30 [] s))\n\t([a b] (if (= (last a) b ) a (conj a b))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54725331e4b094393f72dd76"}, {"problem": 30, "code": "#(map first (partition-by identity (if (string? %) (map str %) %)))", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 30, "code": "(fn foo [x]\n  (reduce #(if (= (last %1) %2)\n             %1\n             (concat %1 (list %2)))\n          (list)\n          x))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 30, "code": "(fn [coll] (reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) '() coll)))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 30, "code": "reduce \n(fn\n  [xs x]\n  (if\n    (= (last xs) x)\n    xs\n    (conj xs x)))\n[]", "user": "54d267e0e4b0e8a36923e5f3"}, {"problem": 30, "code": "(fn \n  [lst]\n  (reverse (reduce #(if (= %2 (first %1))\n                      %1\n                      (conj %1 %2))\n                   '()\n                   (seq lst))))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53d9e587e4b0e771c302547c"}, {"problem": 30, "code": "(fn commpress [coll] \n    (if (> (count coll) 0)\n      (if (= (first coll) (first (commpress (rest coll))))\n        (commpress (rest coll))\n        (cons (first coll) (commpress (rest coll)))\n        )\n      '()\n      )\n    )", "user": "54cb3497e4b057c6fda3a272"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54d1cf2ee4b0e8a36923e5eb"}, {"problem": 30, "code": "(fn [s] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] s))", "user": "54c54d7ce4b045293a27f622"}, {"problem": 30, "code": "(fn [coll] (reverse (reduce (fn [acc i] (if (not= (first acc) i) (cons i acc) acc)) '() coll)))", "user": "543c5200e4b032a45b86933e"}, {"problem": 30, "code": "(partial reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [])", "user": "54d6c80ce4b0a52adc2e2020"}, {"problem": 30, "code": "#(map last (partition-by identity %))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54d55abfe4b0a52adc2e200f"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "user": "504f9ae1e4b0a02f9cffde9c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54d4ba98e4b0a52adc2e2004"}, {"problem": 30, "code": "#(loop [[elt & rst] %\n        acc '()]\n   (if (empty? rst)\n     (reverse (conj acc elt))\n     (if (= elt (first rst))\n       (recur rst acc)\n       (recur rst (conj acc elt)))))", "user": "54dd3bdde4b024c67c0cf791"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54db33f1e4b024c67c0cf75d"}, {"problem": 30, "code": "(fn [x]\n  (reverse\n    (\n      reduce #(if (= %2 (first %1)) %1 (conj %1 %2)) '() x\n             )\n    )\n)", "user": "5458474ce4b01be26fd7461b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54d4b3a7e4b0a52adc2e2003"}, {"problem": 30, "code": "(fn compress\n  [x]\n  (loop [to-process x res []]\n    (if (empty? to-process)\n  \t  res\n      (let [[f & r] to-process]\n      (if (= f (last res))\n        (recur r res)\n        (recur r (conj res f)))))))", "user": "54e0e911e4b024c67c0cf7bc"}, {"problem": 30, "code": "(fn dd [c] (if (< (count c) 2) c  (let [[x & c] c] (if (= x (first c)) (dd c) (cons x (dd c))))))", "user": "5066003ee4b0313a384e5647"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54dae16de4b024c67c0cf758"}, {"problem": 30, "code": "(fn [x] (loop [coll (conj (empty (vector x)) (first x)) i 1]\n          (if (>= i (count x))\n            coll\n            (if (= (nth x i) (nth x (- i 1)))\n              (recur coll (+ i 1))\n              (recur (conj coll (nth x i)) (+ i 1))))))", "user": "54e2a5f7e4b024c67c0cf7d1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54c8eb61e4b045293a27f658"}, {"problem": 30, "code": "#(reduce (fn [s i] (if (= (last s) i) s (conj s i))) [] %)", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] %)", "user": "54e3bd3fe4b024c67c0cf7e0"}, {"problem": 30, "code": "(fn compress [s]\n  (reduce\n   (fn [collect item]\n     (if\n      (= (last collect) item)\n      collect\n      (concat\n       collect (list item))))\n   '() s))", "user": "54c9e00be4b045293a27f683"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2) ) []", "user": "54d104a5e4b0e8a36923e5d9"}, {"problem": 30, "code": "#(reduce (fn [acc x]  (if (= (last acc) x ) acc (concat acc [x]) )  ) [] (seq %) )", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 30, "code": "(fn compress\n [col]\n (reverse (loop [result (list) col col prev nil]\n   (let [ x (first col)]\n     (cond\n       (empty? col) result\n       (not= x prev) (recur (cons x result)  (rest col) x)\n       :else (recur result (rest col) x)\n      )\n    )\n ))\n)", "user": "547b4ec6e4b0c51c1f4d72d5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 30, "code": "reduce #(if (not= %2 (last %1)) (concat %1 [%2]) %1) []", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [compact c]\n            (if (= c (last compact))\n              compact\n              (conj compact c))) \n            [] s))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 30, "code": "(fn [xs]\n  (loop [remaining xs acc []]\n    (if (empty? remaining)\n      acc\n      (if (= (first remaining) (last acc))\n        ;; We have a dupe, skip current\n        (recur (rest remaining) acc)\n        ;; We don't have a dupe, add it to acc\n        (recur (rest remaining) (conj acc (first remaining)))\n        ))))", "user": "51ab6c28e4b04e3dc0c27b32"}, {"problem": 30, "code": "(fn [xs] (reduce (fn [acc x]\n            (if-not (= (last acc) x)\n                    (conj acc x)\n                    acc)) [] xs))", "user": "4e68c465535d8ccf87e9fe8a"}, {"problem": 30, "code": "(fn compress\n  ([last [x & xs] acc]\n     (cond (nil? x) acc\n           (= x last) (recur last xs acc)\n           :else (recur x xs (conj acc x))))\n  ([[x & xs]]\n     (compress x xs [x])))", "user": "5315ba94e4b08068f379ed34"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 30, "code": "(fn[s] (reduce #(if (-> %1 last (= %2)) %1 (conj %1 %2)) [] s))", "user": "54ca3edce4b057c6fda3a256"}, {"problem": 30, "code": "(fn consdiff \n  ([] nil)\n  ([coll]\n  (loop [inicoll coll recoll ()]\n    (if (or (= 1 (count inicoll)) (empty? inicoll)) \n      (reverse (conj recoll (first inicoll)))\n      (if (= (first inicoll) (second inicoll)) \n        (recur (rest inicoll) recoll)\n        (recur (rest inicoll) (conj recoll (first inicoll))))))))", "user": "54caaa48e4b057c6fda3a267"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2)\n          %1\n          (conj %1 %2))\n[]", "user": "54b5ce67e4b05787c3b163ac"}, {"problem": 30, "code": "(fn [s]\n  (map first (filter (fn [[a b]] (not= a b)) (map vector (seq s) (cons nil (seq s))))))", "user": "4ee177dc535d10e5ff6f5359"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "54ecd7dde4b024c67c0cf85c"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "52fa9435e4b047fd55836ffc"}, {"problem": 30, "code": "(fn [s] \n  (for [l (partition-by (fn [x] x) s)] \n    (first l)))", "user": "51515a19e4b03e678e393acc"}, {"problem": 30, "code": "(fn remove-duplicates [coll]\n  (loop [source coll\n         acc '()]\n    (if (empty? source)\n      (reverse acc)\n      (recur (rest source)\n             (if (= (first source) (first acc))\n                    acc\n                    (conj acc (first source)))))))", "user": "53c69ebce4b00fb29b22129c"}, {"problem": 30, "code": "(fn [x]\n  (let [s (seq x)]\n    (letfn [(inner \n              [[x & xs] prev]\n              (cond (nil? x)   ()\n                    (= x prev) (inner xs prev)\n                    :else      (cons x (inner xs x))))]  (inner x nil))))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 30, "code": "(fn [l](reverse (reduce #(if(not= (first %1) %2) (cons %2 %1) %1) '() l)))", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 30, "code": "(fn [a-seq]\n  (loop [s a-seq\n         deduped []\n         last nil]\n    (if (empty? s)\n      deduped\n      (if (= (first s) last)\n        (recur (rest s) deduped (first s))\n        (recur (rest s) (conj deduped (first s)) (first s))))))", "user": "52ff6ea0e4b0d8b024fd3707"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54f0433ce4b024c67c0cf893"}, {"problem": 30, "code": "#(reduce (fn [coll x] ( if (not= (last coll) x) (conj coll x) coll  ) ) [] % )", "user": "54df7922e4b024c67c0cf7ad"}, {"problem": 30, "code": "(fn [coll] (map first (remove #(and (apply = %) (= (count %) 2)) (partition-all 2 1 coll))))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [coll n]\n            (if (= (last coll) n) \n              coll\n              (conj coll n)))\n           []\n          coll))", "user": "54a6baaee4b09f271ff37c8a"}, {"problem": 30, "code": "reduce (fn [a n] (if (= (last a) n) a (conj a n))) []", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 30, "code": "(fn [seq]\n  (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) (list) (reverse seq)))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 30, "code": "#(loop [src (seq %) res [] ]\n  (if (empty? src)\n    res\n    (recur (rest src)\n           (if (= (first src) (second src) )\n             res\n             (conj res (first src))\n             )\n           )\n    )\n   )", "user": "5480cce5e4b0e286459a115f"}, {"problem": 30, "code": "(fn [coll] (map #(first %) (partition-by #(identity %) coll)))", "user": "4f598c87e4b0030a34fb2ada"}, {"problem": 30, "code": "#(letfn [(reducer [acc value]\n           (if (= value (last acc))\n             acc\n             (conj acc value)))]\n  (->> % vec (reduce reducer [])))", "user": "504e2d18e4b0f6ff3350c47a"}, {"problem": 30, "code": "(partial (fn [c x] (if (first x) (if (= (first x) (last c)) (recur c (rest x)) (recur (conj c (first x)) (rest x))) c)) [])", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 30, "code": "(fn [xs] \n\t(reduce  (fn [acc x] \n\t\t(if (empty? acc) (conj acc x) \n\t\t\t(if (= (last acc) x) acc (conj acc x)))\n\t\t) [] xs))", "user": "54c74a78e4b045293a27f637"}, {"problem": 30, "code": "(fn [xs]\n  (reduce\n    (fn [acc x]\n      (if (= x (last acc))\n        acc\n        (conj acc x)))\n    []\n    (seq xs)))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "533f1584e4b085b17e897d9b"}, {"problem": 30, "code": "#(reduce (fn [acc, elem]\n           (if (= elem (last acc)) acc\n             (conj acc elem))) [] %)", "user": "54f4e286e4b0f2f3c5226e8c"}, {"problem": 30, "code": "(fn [x]\n  (->> (vec x)\n       (partition-by identity)\n       (map first)))", "user": "54f583bbe4b0f2f3c5226e93"}, {"problem": 30, "code": "(fn ren-seq-dups [s1]\n        (loop [arg s1, res [], last-elem nil]\n          (if (empty? arg)\n            res\n            (let [res (if\n                          (not= (first arg) last-elem) (conj res (first arg)) res)]\n              (recur (rest arg) res (first arg)))) ))", "user": "54ecd716e4b024c67c0cf85a"}, {"problem": 30, "code": "(fn [coll]\n  (loop [acc [] old-head \"\" [h & t] coll]\n    (cond\n      (nil? h) acc\n      (= old-head h) (recur acc h t)\n      :else (recur (conj acc h) h t))))", "user": "4f0554aa535dcb61093f6bf5"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 30, "code": "(fn [coll] \n  (map\n   second\n   (filter \n    #(let [idx (first %)] (or (= 0 idx) (not= (second %) (nth coll (- idx 1))))) \n    (map-indexed vector coll))))", "user": "54f1b4e7e4b024c67c0cf8b5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54f2a1b8e4b024c67c0cf8cb"}, {"problem": 30, "code": "(partial\n  reduce\n    (fn [xs x]\n      (if (= (last xs) x)\n        xs\n        (conj xs x)))\n    [])", "user": "521d064fe4b0c4ef0be830a8"}, {"problem": 30, "code": "(fn stripD [xs]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] xs))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54f3970fe4b050824f58f5c5"}, {"problem": 30, "code": "(fn [coll] (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] coll))", "user": "54f39cd6e4b050824f58f5c6"}, {"problem": 30, "code": "(fn [xs] \n    (reduce  (fn [acc x] \n        (if (empty? acc) (conj acc x) \n            (if (= (last acc) x) acc (conj acc x)))\n        ) [] xs))", "user": "50a3e2eae4b0ceace084d49a"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "531c7bdde4b08068f379eda2"}, {"problem": 30, "code": "(fn compress [s] (if (empty? s) '() (reverse (reduce (fn [s e] (if (= (first s) e) s (cons e s))) [(first s)] (rest s)))))", "user": "54f5fb57e4b0f2f3c5226e9f"}, {"problem": 30, "code": "#(map first (partition-by identity % ))", "user": "54eca495e4b024c67c0cf855"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52ca9513e4b071a8d36bd3e4"}, {"problem": 30, "code": "(fn [coll] \n  (reduce #(if (= (last %1) %2) \n             %1\n             (conj %1 %2))\n          []\n          coll))", "user": "54edfa10e4b024c67c0cf868"}, {"problem": 30, "code": "reduce #(\n           if (= (last %1) %2)\n             %1\n             (conj %1 %2)\n\n           )\n\n         []", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 30, "code": "#(reduce (fn [t v] (if (= (last t) v) t (conj t v))) [] %)", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "54e1197fe4b024c67c0cf7c0"}, {"problem": 30, "code": "#(reduce (fn [acc el] (if (= (last acc) el) acc (conj acc el))) [] %)", "user": "54eee3a3e4b024c67c0cf879"}, {"problem": 30, "code": "(fn [x]\n  (remove nil?\n          (map-indexed\n           (fn [idx itm]\n             (if (> idx 0)\n               (if (= (get x (dec idx)) itm)\n                 nil\n                 itm)\n               itm))\n           x)))", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54f49c39e4b0f2f3c5226e81"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 30, "code": "(fn no-dups [xs]\n  (if (empty? xs)\n    xs\n    (let [[x1 & x1s] xs]\n      (if (empty? x1s)\n        xs\n        (let [[x2 & x2s] x1s]\n          (if (= x1 x2)\n            (no-dups x1s)\n            (cons x1 (no-dups x1s))))))))", "user": "54f9920ee4b01ecee9d8883f"}, {"problem": 30, "code": "(fn [col]\n        (loop [from col to []]\n          (if (empty? from)\n            to\n            (if (= (first from) (last to))\n              (recur (next from) to)\n              (recur (next from) (conj to (first from)))))))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 30, "code": "(fn compress\n  ([s] (compress (rest s) [(first s)]))\n  ([s vals] (if (seq s)\n              (if (= (first s) (last vals))\n                (recur (next s) vals)\n                (recur (next s) (conj vals (first s))))\n              vals)))", "user": "54c3747de4b045293a27f60e"}, {"problem": 30, "code": "(fn compress\n  ([coll] (compress coll []))\n  ([coll acc]\n    (if (empty? coll)\n      acc\n      (if (= (first coll) (last acc))\n        (compress (rest coll) acc)\n        (compress (rest coll) (conj acc (first coll)))))))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 30, "code": "(fn [x](reduce #(if(= %2 (last %1)) (identity %1) (conj %1 %2)) [] (vec x)))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 30, "code": "(fn [xs]\n  (loop [ys xs result []]\n\t(if (empty? ys)\n      result\n      \n      (if (= (first ys) (last result)) \n\t\t(recur (rest ys) result)\n\t\t(recur (rest ys) (conj result (first ys)))))  \n  ))", "user": "54f73502e4b01ecee9d88817"}, {"problem": 30, "code": "(fn [xs] \n  (reduce #(if-not (= (last %1) %2)\n             (conj %1 %2)\n             %1)\n          []\n          xs))", "user": "54f9d900e4b01ecee9d88844"}, {"problem": 30, "code": "(fn [z] (reverse (seq (reduce (fn [y x] (if (= x (first y)) y (cons x y))) [] z))))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 30, "code": "(fn [coll]\n  (loop [coll coll acc []]\n    (if (empty? coll)\n      acc\n      (recur (rest coll)\n             (if (= (last acc) (first coll))\n               acc\n               (conj acc (first coll)))))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 30, "code": "(fn remove-dups [xs] \n  (if (< (count xs) 2)\n    xs\n    (if (= (first xs) (second xs))\n      (remove-dups (rest xs))\n      (conj (remove-dups (rest xs)) (first xs)))))", "user": "54fd93bbe4b07d26eda61d36"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 30, "code": "reduce #( if ( = %2 (last %1)) %1 ( conj %1 %2)) []", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54e7b512e4b024c67c0cf81c"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "54ff2342e4b07d26eda61d49"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "50e09f60e4b061dbdced7237"}, {"problem": 30, "code": "(fn [s]\n    (reduce \n     (fn [result item]\n       (if (= item (last result))\n         result\n         (conj result item))) [] s))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 30, "code": "(fn f [s]\n   (loop [result [] s s]\n        (if (empty? s)\n          result\n          (if (not= (first s) (last result))\n            (recur (conj result (first s)) (rest s))\n            (recur result (rest s))\n            ))))", "user": "54ff6084e4b07d26eda61d50"}, {"problem": 30, "code": "(fn [xs] (reduce #(if (= (last %1) %2) \n                    %1\n                    (concat %1 [%2])) [] xs))", "user": "4f03e60d535dcb61093f6b7a"}, {"problem": 30, "code": "(fn [s]\n        (loop [rem s\n               acc []]\n          (if (empty? rem)\n            acc\n            (if (= (first rem) (second rem))\n              (recur (rest rem) acc)\n              (recur (rest rem) (conj acc (first rem)))))))", "user": "5498e155e4b0b312c081ff86"}, {"problem": 30, "code": "(fn f[l]\n  (let [one (first l)\n        two (second l)]\n    (cond\n     (nil? one) nil\n     (= one two) (f (rest l))\n     :else (cons one (f (rest l))))))", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "54eea988e4b024c67c0cf875"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 30, "code": "(fn comp [x]\n  (if (empty? x)\n    '()\n    (let [y (comp (rest x))]\n      (if (= (first x) (first y))\n        y\n        (conj y (first x))\n      )\n    )\n  )\n)", "user": "55034bf0e4b086ebe8a79c6d"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [acc el]\n            (if (= el (last acc)) acc\n                (conj acc el)))\n          [] coll))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "541c5b3be4b01498b1a71a75"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54ff074de4b07d26eda61d47"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [a b]\n            (if (= (last a) b)\n              a\n              (conj a b))) [] s))", "user": "54b31445e4b09f271ff37d35"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "550174b5e4b07d26eda61d73"}, {"problem": 30, "code": "(fn [seq]\n   (reduce #(if-not (= (last %1) %2)\n             (concat %1 [%2])\n             %1)\n     '() seq))", "user": "550309b9e4b086ebe8a79c65"}, {"problem": 30, "code": "(fn f\n  ([l] (f l []))\n  ([l r] (cond (nil? (first l)) r\n               (not (= (last r) (first l))) (f (rest l) (conj r (first l)))\n               :else (f (rest l) r)\n  )))", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 30, "code": "(fn [ary]\n  (let [coll (vec ary) l (dec (count coll))]\n  \t(loop [i 0 ret []]\n      (if (< i l)\n        (if (not= (coll i) (coll (inc i)))\n          (recur (inc i) (conj ret (coll i)))\n          (recur (inc i) ret))\n        (conj ret (last coll))))))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "54f904c2e4b01ecee9d88832"}, {"problem": 30, "code": "(fn compresser [xs]\n  (reduce #(if-not (= (last %1) %2)\n             (conj %1 %2)\n             %1)\n          []\n          xs))", "user": "54d4ec31e4b0a52adc2e2007"}, {"problem": 30, "code": "(fn [s]\n  (let [\n      t (next s) \n      st (map vector s t)\n      fst (filter (fn [[h t]] (not= h t)) st)\n      h (-> fst first first)\n    ]\n    (conj (map last fst) h)))", "user": "53213810e4b09d4e7a9b54b0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 30, "code": "(partial reduce (fn [coll x] \n                  (if (= x (last coll))\n                    coll\n                    (conj coll x))) [])", "user": "550615c0e4b021ccfedb9696"}, {"problem": 30, "code": "(fn [seq]\n  (into '() (second (reduce (fn [[dups seq ] next]\n                              (if (contains? dups next)\n                                [dups seq]\n                                [(conj #{} next) (cons next seq)])) [#{} '()] seq))))", "user": "5508b405e4b06e50f9beb110"}, {"problem": 30, "code": "(fn [inseq] \n    (reduce \n        (fn [prev togo]\n             (if (= (last prev) togo)\n                prev\n                (concat prev [togo]))) \n        '() inseq))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 30, "code": "(fn [s] (loop [s s result []]\n          (if-let [[h & r] s]\n            (if (= h (first r))\n              (recur r result)\n              (recur r (conj result h)))\n            result)))", "user": "550aeddae4b06e50f9beb135"}, {"problem": 30, "code": "#(if (empty? %2) (if (char? (first %1)) (apply str %1) %1) (recur (if (not= (first %2) (fnext %2)) (conj %1 (first %2)) %1) (rest %2))) []", "user": "5501de12e4b07d26eda61d7b"}, {"problem": 30, "code": "#(loop [result '() myseq %]\n   (if (empty? myseq)\n       result\n       (recur (concat result\n                (if (= (first myseq) (second myseq))\n                    nil\n                    (list (first myseq))))\n           (rest myseq))\n         ))", "user": "55076bf6e4b021ccfedb96a6"}, {"problem": 30, "code": "#(map first (filter (fn [a] (let [[x y] a] (when (not= x y) %))) (map (fn [b c] (list b c)) % (concat (list :empty) %))))", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "549674cde4b0b312c081ff66"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "550ccedfe4b06e50f9beb158"}, {"problem": 30, "code": "(fn [l] (remove nil? (map #(if (= (first %) (second %)) nil (first %)) (take (count l) (iterate next l)))))", "user": "543be8f0e4b032a45b869337"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "550609b3e4b021ccfedb9695"}, {"problem": 30, "code": "(fn [s] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] s))", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54e0bb4fe4b024c67c0cf7b8"}, {"problem": 30, "code": "(fn [x]\n      (loop [i 0 c nil r []]\n            (if (= i (count x))\n              r\n              (if (or (= i 0) (not= c (nth x i)))\n                (recur (inc i) (nth x i) (concat r [(nth x i)]))\n                (recur (inc i) c r)\n                )\n              )\n            )\n      )", "user": "550e0373e4b06e50f9beb162"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54f773bfe4b01ecee9d8881f"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "53e67e69e4b036ad0777e473"}, {"problem": 30, "code": "#(loop [seqn % symbl (first seqn) result [] ]\n  (if (empty? seqn) \n    (if (= symbl (last result)) result (conj result symbl))\n    (recur\n     (drop 1 seqn)\n     (first seqn) \n     (if (= symbl (last result)) result (conj result symbl)) \n     )))", "user": "54f6f00fe4b01ecee9d88814"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53f506c1e4b0db01ade6f9c8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "543d07e8e4b032a45b869346"}, {"problem": 30, "code": "(fn no-repeats [s]\n  (map first (partition-by identity s)))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "550fdc1de4b06e50f9beb17d"}, {"problem": 30, "code": "(fn [args]\n   (reduce (fn [x y] (println y) (if (nil? x)\n                                   (conj [] y)\n                                   (if (= (last x) y) x (conj x y)))) nil args))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 30, "code": "reduce (fn [acc nextC] \n         (if (= (last acc) nextC) acc\n           (conj acc nextC))) []", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5426fb8fe4b01498b1a71b1f"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "550e8e04e4b06e50f9beb167"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [coll elt]\n            (if (not= (last coll) elt)\n              (conj coll elt)\n              coll)) [] coll))", "user": "54ccf9d5e4b057c6fda3a295"}, {"problem": 30, "code": "reduce (fn [coll item]\n         (if (= (last coll) item)\n           coll\n           (conj coll item))) []", "user": "542725fce4b01498b1a71b22"}, {"problem": 30, "code": "(fn [a] (reduce #(if (= (last %1) %2) %1 (concat %1 (repeat 1 %2))) (empty a) (seq a)))", "user": "5511dfafe4b06e50f9beb19c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5510f734e4b06e50f9beb18f"}, {"problem": 30, "code": "(fn compress-a-sequence-solution\n  [coll] ;; update args as needed\n  (loop [acc [] coll coll]\n    (cond\n      (not (seq coll)) (seq acc)\n      (= (last acc) (first coll)) (recur acc (rest coll))\n      :else (recur (conj acc (first coll)) (rest coll)))))", "user": "50c113bee4b096f585049c37"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54ec88a8e4b024c67c0cf854"}, {"problem": 30, "code": "#(reduce (fn [prev el] \n           (if (= (last prev) el) \n             prev \n             (conj prev el)))\n         '[] %)", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52b49fe0e4b0c58976d9ad2c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "532018efe4b08068f379edcd"}, {"problem": 30, "code": "#(map first\n      (partition-by identity %))", "user": "55164856e4b06a49daca83b3"}, {"problem": 30, "code": "(fn [coll]\n   (reverse (reduce (fn [a b]\n                      (if (= (first a) b)\n                        a\n                        (cons b a)))\n                    nil\n                    coll)))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 30, "code": "(fn [seq]\n  (loop [i 0 c []]\n    (if (= i (count seq))\n      c\n      (if (not= (last c) (get seq i))\n        (recur (inc i) (conj c (get seq i)))\n        (recur (inc i) c)))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 30, "code": "(fn [s] (first (reduce \n          #(vector (if (= %2 (second %1)) \n               (first %1) \n               (conj (first %1) %2)) \n             %2) [[(first s)] (first s)] \n          (rest s))))", "user": "54e84d1ee4b024c67c0cf822"}, {"problem": 30, "code": "(fn [coll] (reduce #(if (not= %2 (last %1)) (conj %1 %2) %1) [] coll))", "user": "551535cee4b055c2f668d4df"}, {"problem": 30, "code": "#(reduce (fn [s e] (if (= (last s) e) s (conj s e))) [] (seq %1))", "user": "50f02de7e4b0bdaecbb47db0"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (cmprs r)\n      (cons f (cmprs r)))))", "user": "52e087dde4b09f7907dd1412"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5512b15ae4b055c2f668d4b5"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (first %) %2) % (conj % %2)) '() (reverse x)))", "user": "5426200ae4b01498b1a71b16"}, {"problem": 30, "code": "(fn [x]\n  (first (reduce (fn [[acc prev] c]\n                   (if (= prev c)\n                     [acc prev]\n                     [(conj acc c) c]))\n                 [[] nil]\n                 x)))", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 30, "code": "#(loop [s %,res []] (if (empty? s) res (recur (rest s) (if (= (first s) (last res)) res (conj res (first s))))))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "551a64cde4b091ff45eda996"}, {"problem": 30, "code": "(fn [x] (loop [g '(), l x]\n                 (if (empty? l)\n                    g\n                    (recur\n                      (concat g `(~(first l)))\n                      (drop-while #(= (first l) %) l)\n                    )\n                 )\n         )\n)", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 30, "code": "#(loop [coll %, new []]\n   (if (empty? coll)\n     new\n     (if (= (first coll) (last new))\n       (recur (rest coll) new)\n       (recur (rest coll) (conj new (first coll))))))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 30, "code": "(fn [c]\n  (reduce\n    (fn [acc v]\n      (println acc)\n      (println v)\n      (if (not= (last acc) v)\n        (conj acc v)\n        acc))\n    []\n    c))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "551acc5ae4b07993ea3788c4"}, {"problem": 30, "code": "(fn compress [x] \n  (if (empty?  x) '()\n  (cons (first x)\n  (compress \n   (let [a (first x)]\n    (letfn \n     [(compr [y n] \n        (if (empty? y) '()\n         (if (not= (first y) n) y\n          (compr (rest y) n) )))]\n     (compr (rest x) a)))))))", "user": "53504a7de4b084c2834f4ad9"}, {"problem": 30, "code": "(fn [xs]\n  (letfn [(f [ret e] (if (= (last ret) e)\n                         ret\n                         (conj ret e)))]\n         (reduce f [] (seq xs))))", "user": "5519a6dde4b00ace28fe6e2f"}, {"problem": 30, "code": "(fn [l]\n  (loop [in l out [] last nil]\n    (cond (empty? in) out\n          (= last (first in)) (recur (rest in) out last)\n          :else (recur (rest in) (conj out (first in)) (first in)))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 30, "code": "(fn [seqn] (reduce (fn [s i] (if (= (last s) i) s (conj s i))) [] seqn))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 30, "code": "#(map first (partition-by identity  %))\n;clojredocs", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "514f0a28e4b019235f6c059a"}, {"problem": 30, "code": "(fn [s] \n  (reverse \n  \t(loop [src s\n           r   (list)] \n           (if (empty? src) \n             r\n             (if (= (first r) (first src))\n               (recur (rest src) r)\n               (recur (rest src) (cons (first src) r)))))))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 30, "code": "(fn foo\n     ([coll]\n       (if (empty? coll) coll (let [head (first coll)] (cons head (foo (rest coll) head)))))\n     ([coll prev]\n       (if (empty? coll) coll (let [head (first coll) tail (rest coll)] (if (= head prev) (foo tail head) (cons head (foo tail head)))))))", "user": "5509bec5e4b06e50f9beb121"}, {"problem": 30, "code": "(fn my-compress [l]\n  (if (empty? l)\n    l\n          (if (= (first l) (second l))\n            (my-compress (rest l))\n            (cons (first l) (my-compress (rest l))))))", "user": "551c6bcee4b07993ea3788df"}, {"problem": 30, "code": "(fn [xs]\n    (loop [x (rest xs) prev (first xs) acc []]\n      (if (empty? x)\n        (conj acc prev)\n        (if (= (first x) prev)\n          (recur (rest x) prev acc)\n          (recur (rest x) (first x) (conj acc prev))))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 30, "code": "#(loop\n   [coll %\n    result []]\n   (cond (= (last result) (first coll)) (recur (rest coll) result)\n    \t (= 0 (count coll)) result\n         :else (recur (rest coll) (conj result (first coll)))\n     )\n  )", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "551c66dae4b07993ea3788de"}, {"problem": 30, "code": "(fn [input] \n  (reduce \n    #(if (= (last %1) %2) %1 (conj %1 %2))\n    []\n    (seq input)))", "user": "503f923fe4b00d1a725ff2ad"}, {"problem": 30, "code": "(fn [vals]\n  (map first (partition-by identity vals)))", "user": "55183a11e4b06a49daca83ca"}, {"problem": 30, "code": "(fn [x] (map #(first %) (partition-by identity x)))", "user": "551589cee4b055c2f668d4e9"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2)\n              %1\n              (conj %1 %2)) []", "user": "550babf3e4b06e50f9beb149"}, {"problem": 30, "code": "#(loop [s %\n        a [(first %)]]\n   (cond\n    (empty? s) a\n    (= (first s) (last a)) (recur (rest s)\n                                  a)\n    true (recur (rest s) (conj a (first s)))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 30, "code": "#(reverse(reduce (fn [ant ent] (if (= (first ant) ent) ant (conj ant ent )))'() %))", "user": "5517f5c5e4b06a49daca83c7"}, {"problem": 30, "code": "(fn c[x]\n\t   (if (> (count x) 1)\n\t     (let [fst (first x)\n\t\t   rst (c (rest x))]\n\t       (if (= fst (first rst))\n\t\t rst\n\t\t (concat (list fst) rst)))\n\t     x))", "user": "54fae43ae4b0cf870d934708"}, {"problem": 30, "code": "(fn [x]\n  (let [x (seq x)]\n    (map first (remove last (map vector x (map = x (cons (Object.) x)))))))", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 30, "code": "(fn anti-stott [x] \n  (let [ dbl_retard (cons nil (vec x) )\n         dbl_comp ( map #(vector %1 %2) (vec x) dbl_retard)\n         dbl_filt (remove #(= (first %) (last %) ) dbl_comp)\n         res (map #(first %)  dbl_filt)\n    ]\n    res\n  )\n)", "user": "528b3f5ae4b0239c8a67ae93"}, {"problem": 30, "code": "reduce (fn [col y] (if (= (last col) y) col (conj col y))) []", "user": "55204412e4b08d5046aa8a5f"}, {"problem": 30, "code": "#(reverse(reduce (fn [e1 e2]\n           (let [es (if(seq? e1) e1 (list e1))]\n           (if(= (first es) e2) es (conj es e2)) ) \n         ) \n  (vec %)\n ))", "user": "514504c2e4b021a5ff8301fc"}, {"problem": 30, "code": "(fn foo [x] (if (empty? x) [] \n   (if (= (first x) (second x))\n     (foo (rest x))\n     (cons (first x) (foo (rest x)))\n     )\n   ))", "user": "5520974be4b08d5046aa8a63"}, {"problem": 30, "code": "reduce #(if (= (last %) %2)\n            %\n            (conj % %2)) []", "user": "52b36925e4b0c58976d9ad0b"}, {"problem": 30, "code": "(fn [x] (reverse (reduce #(if (= (first %) %2) % (cons %2 %)) (empty x) (seq x))))", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 30, "code": "(fn my-compress\n  [x]\n  (when-not (nil? x)\n    (if (= (first x) (second x))\n      (my-compress (next x))\n      (cons (first x) (my-compress (next x))))))", "user": "551c594de4b07993ea3788dc"}, {"problem": 30, "code": "reduce (fn [a b] (if (= (last a) b) a (conj a b))) []", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 30, "code": "(fn compressNear [coll]\n  (let [[a & r] coll\n        b (first r)]\n    (if (empty? r)\n      (conj '() a)     ;suppose to be '(a) but it returns (1 2 a)\n      (if (= a b)\n        (compressNear r)\n        (conj (compressNear r) a))) ; a add to list head\n  ))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 30, "code": "(fn [xs]\n  (letfn [(step [ys y]\n              (if (= (last ys) y)\n                ys\n                (conj ys y)))]\n    (reduce step [] (seq xs))))", "user": "551ee974e4b08d5046aa8a50"}, {"problem": 30, "code": "(fn [col]\n  (map first (partition-by identity col)))", "user": "551cd433e4b07993ea3788e4"}, {"problem": 30, "code": "(fn [coll]\n  (loop [coll (seq coll)\n         acc  ()]\n    (if (empty? coll)\n      (reverse acc)\n      (recur (rest coll)\n             (if (not= (first coll) (first acc))\n               (conj acc (first coll))\n               acc)))))", "user": "552356fae4b0882d96d091af"}, {"problem": 30, "code": "(fn caps [l]\n  (map first (partition-by identity l)))", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 30, "code": "(partial reduce (fn [result cur]\n                  (if (= cur (last result))\n                    result\n                    (concat result (list cur)))\n                 ) '())", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 30, "code": "reduce (fn [xs x] (if (= (last xs) x) xs (conj xs x) )) []", "user": "5512967ee4b06e50f9beb1ae"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "54f9c4dfe4b01ecee9d88841"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "551297dee4b06e50f9beb1b1"}, {"problem": 30, "code": "(fn [ar] (map first (partition-by identity ar)))", "user": "5512969ce4b06e50f9beb1af"}, {"problem": 30, "code": "#(reduce\n    (fn [x y]\n      (if\n        (= (last x) y)\n        x\n        (conj x y))) [] %)", "user": "55092319e4b06e50f9beb113"}, {"problem": 30, "code": "reduce\n(fn\n  [l x]\n  \t(if (not= (last l) x)\n\t    (conj l x)\n\t    l\n    )\n  )\n[]", "user": "550b5a53e4b06e50f9beb142"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn [acc x]\n            (if (= (last acc) x) \n              acc\n              (conj acc x))) [] xs))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 30, "code": "(fn c ([s] (if (empty? s) s (c (first s) (rest s))))\n  ([ch s] (if (empty? s) (cons ch s) (if (= ch (first s)) (c ch (rest s)) (cons ch (c s))))))", "user": "55229495e4b0882d96d091a4"}, {"problem": 30, "code": "(fn[coll]\n(reduce (fn[data, newElement]\n          (if (not= (last data) newElement)\n            (conj data newElement) data\n            )\n         ) [] coll))", "user": "55240916e4b0882d96d091b6"}, {"problem": 30, "code": "reduce #(if (not= %2 (last %1)) (conj %1 %2) %1) []", "user": "55218bf0e4b0882d96d09196"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53bed4b5e4b0c98a41f5cc94"}, {"problem": 30, "code": "(fn remove-doubles [s]\n          (if (<= (count s) 1) \n            s\n            (if (= (first s) (second s))\n              (remove-doubles (rest s))\n              (cons (first s) (remove-doubles (rest s))))))", "user": "55253217e4b0882d96d091ce"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5515f96ce4b055c2f668d4f7"}, {"problem": 30, "code": "#(reduce (fn [memo item]\n           (if (= (last memo) item)\n             memo\n             (conj memo item))) [] %)", "user": "552621d0e4b0ffed3738f914"}, {"problem": 30, "code": "(fn compress-seq [[x0 & x]]\n  (loop [res [x0], x0 x0, [x1 & x] x]\n    (cond (nil? x1) res\n          (= x1 x0) (recur res x0 x)\n          true (recur (conj res x1) x1 x))))", "user": "54bbaa8ee4b0ed20f4ff6ec0"}, {"problem": 30, "code": "(fn [x]\n  (loop [v (rest x)\n         l (first x)\n         r (conj '() (first x))]\n    (if (empty? v)\n      (reverse r)\n      (if (not= (first v) l)\n        (recur (rest v) (first v) (conj r (first v)))\n        (recur (rest v) l r)\n      ))))", "user": "55252392e4b0882d96d091cc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "551ee4dde4b08d5046aa8a4f"}, {"problem": 30, "code": "(fn [collection]\n  (map first (partition-by identity collection))\n  )", "user": "5524f21fe4b0882d96d091c7"}, {"problem": 30, "code": "(fn f [x] (let [a (rest x)] (if (empty? a) x (let [b (first x), c (first a), d (f a)] (if (= b c) d (cons b d))))))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 30, "code": "#(mapcat (fn [a b] (when (not= a b) [a])) % (cons nil % ))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 30, "code": "(fn compress\n  ([s] (compress nil s))\n  ([last-elem s]\n   (let [cur-elem (first s)]\n     (if (nil? cur-elem)\n       '()\n       (if (= last-elem cur-elem)\n         (compress cur-elem (rest s))\n         (cons cur-elem (compress cur-elem (rest s))))))))", "user": "551747e0e4b06a49daca83c1"}, {"problem": 30, "code": "(fn [ary] (map first (filter #(not (= (first %) (last %))) (map list ary (concat (rest ary) '(nil))))))", "user": "54a8fdcee4b09f271ff37ca9"}, {"problem": 30, "code": "(fn [x]\n  (reduce (fn [c i]\n          (if (= (last c) i)\n            c\n            (concat c [i])))\n        '() x))", "user": "50f4eee0e4b004d36493052d"}, {"problem": 30, "code": "(fn [coll] (reverse (reduce (fn [a b] (if-not (= (first a) b) (cons b a) a)) '() coll)))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 30, "code": "reduce  #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55253799e4b0882d96d091cf"}, {"problem": 30, "code": "(fn nodup [s] \n  (if (= s ()) ()\n    \n  (let [f (first s) \n        r (rest s)\n        fr (first r)]\n    (if (= f fr) \n      (nodup r) \n      (concat (list f) (nodup r)))\n    )\n  )\n  )", "user": "5528ecd1e4b0ffed3738f942"}, {"problem": 30, "code": "(fn [s]\n  (letfn [(remdup [acc lst sq]\n                  (if (empty? sq)\n                    acc\n                    (if (= lst (first sq)) \n                      (remdup acc lst (rest sq)) \n                      (remdup (conj acc (first sq)) (first sq) (rest sq))\n                    )\n                  )\n          )] \n    (remdup [] nil s)\n  )\n)", "user": "552a672de4b0ffed3738f954"}, {"problem": 30, "code": "#(reduce\n  (fn [result item]\n    (if (= item (last result))\n      result\n      (conj result item))) [] %)", "user": "5517331ae4b06a49daca83c0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5509b434e4b06e50f9beb11e"}, {"problem": 30, "code": "#(reduce (fn [coll x] (if (= x (last coll)) coll (conj coll x))) [] %)", "user": "55249f64e4b0882d96d091c6"}, {"problem": 30, "code": "#(cons (first %) (map second (filter (fn [[a b]] (not= a b)) (partition 2 1 %))))", "user": "55297a7ae4b0ffed3738f94b"}, {"problem": 30, "code": "(fn [xs]\n  (reverse (reduce #(if (= (first %1) %2)\n             %1\n             (conj %1 %2)) (list (first xs)) (rest xs))))", "user": "51071f2ee4b05b2b4eee748e"}, {"problem": 30, "code": "(fn compress \n  [s]\n  (if (empty? s)\n    []\n    (let [first-char (first s)\n          compressed (compress (rest s))]\n      (if-not (= first-char (first compressed))\n        (cons first-char compressed)\n        compressed))))", "user": "552d487ee4b076ab5578f7e4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "551dfd81e4b030e6a24d00e0"}, {"problem": 30, "code": "(fn [items]\n  (loop [xs items\n         result ()]\n    (let [elem (first xs)]\n      (if (empty? xs)\n        (reverse result)\n        (recur\n          (rest xs)\n          (if (= elem (first result))\n            result\n            (cons elem result)))))))", "user": "5524120fe4b0882d96d091b7"}, {"problem": 30, "code": "reduce #(if-not (= (last %) %2) (conj % %2) %) []", "user": "5524fff0e4b0882d96d091c8"}, {"problem": 30, "code": "#(map first (map distinct (partition-by identity %)))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 30, "code": "(fn rem-dup\n  [[x & xs]]\n  (if x\n    (if (= x (first xs)) (rem-dup xs)\n      (cons x (rem-dup xs)))\n    []))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 30, "code": "#(reverse (loop [x %\n       lst nil]\n  (if (empty? x) lst\n    (if (not= (first x) (second x)) (recur (rest x) (cons (first x) lst))\n      (recur (rest x) lst)))))", "user": "552bc0f5e4b0ffed3738f968"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5526383ee4b0ffed3738f917"}, {"problem": 30, "code": "(fn cmprsq [s] (loop [prev nil\n                      sr s\n                      sa '()]\n                 (cond (empty? sr) sa\n                       (= prev (first sr)) (recur prev (rest sr) sa)\n                       :else (recur (first sr) (rest sr) (concat sa (list (first sr)))))))", "user": "551ebcd7e4b08d5046aa8a4a"}, {"problem": 30, "code": "(fn [coll]\n         (loop [acc [] C coll]\n           (if (empty? C)\n             acc\n             (if (= (last acc) (first C))\n               (recur acc (rest C))\n               (recur (conj acc (first C)) (rest C))\n               )\n             )\n           )\n         )", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 30, "code": "(fn dedupe [s] (if (empty? (rest s)) s (if (= (first s) (first (rest s))) (dedupe (rest s)) (cons (first s) (dedupe (rest s))))))", "user": "55041b5ee4b086ebe8a79c78"}, {"problem": 30, "code": "(fn pack [s] ( if( > (count s) 1)\n                 (if(=(first s) (first (rest s))) (pack (rest s)) (conj  (pack (rest s)) (first s))) s\n                 ))", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 30, "code": "#(let [r (loop [x (seq %)\n              o '()]\n         (if (empty? x)\n           (reverse o)\n           (if (= (first x) (first o))\n             (recur (rest x) o)\n             (recur (rest x) (conj o (first x))))))]\n       (if (coll? %)\n         r\n         (apply str r)))", "user": "5530b827e4b076ab5578f818"}, {"problem": 30, "code": "#(reduce (fn [acc new] (if (= new (last acc)) acc (conj acc new))) [] %)", "user": "5531e445e4b09218d5f44f76"}, {"problem": 30, "code": "(fn [x]\n  (seq\n    (reduce (fn [r e]\n              (if (not (= (last r) e))\n                (conj r e)\n                r))\n            []\n            x)))", "user": "51a7fe50e4b08d8ec191b803"}, {"problem": 30, "code": "(fn compress\n  ([in] (compress in []))\n  ([in out]\n    (let [r (rest in) f (first in) l (last out)]\n      (if (empty? in)\n        (apply list out)\n        (if (= f l) (compress r out) (compress r (conj out f))) ))))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 30, "code": "(fn foo [x]\n\t(reduce (fn [x1 x2]\n\t\t\t(if (= x2 (last x1))\n\t\t\t\tx1\n             \t(conj x1 x2)\n            )) [] x))", "user": "553024c3e4b076ab5578f80d"}, {"problem": 30, "code": "(fn slim [x] \n  (when-let [[f & r] (seq x)] \n    (if (= f (first r))\n    \t(slim r)\n    \t(cons f (slim r)))))", "user": "552bab7fe4b0ffed3738f966"}, {"problem": 30, "code": "(fn [coll]\n  (loop [[f & r] coll\n         rtn []]\n    (let [dup? (= (last rtn) f)]\n      (if-not r\n        (if dup? rtn (conj rtn f))\n        (if dup?\n          (recur r rtn)\n          (recur r (conj rtn f)))))))", "user": "4df247b8535d08e6dec9fe25"}, {"problem": 30, "code": "(fn compress [x]\n  (cond (empty? (rest x)) x\n        (= (first x) (second x)) (compress (rest x))\n        :else (concat (list (first x)) (compress (rest x)))))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 30, "code": "#(reverse (reduce (fn [b a] (if (= a (first b)) b (cons a b))) '() (seq %)))", "user": "55330d7fe4b09218d5f44f88"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "54c46381e4b045293a27f61a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "548d6b75e4b0e286459a1216"}, {"problem": 30, "code": "reduce\n    (fn [agg x]\n      (if (= (last agg) x)\n        agg\n        (concat agg (list x)))\n    )\n    '()", "user": "55349c67e4b09218d5f44fa0"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn [rs, x] (if (= (last rs) x) rs (concat rs [x]))) (take 1 xs) (rest xs)))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "551ad0c8e4b07993ea3788c6"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2)\n          %1\n          (conj %1 %2)) []", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 30, "code": "(fn rmdup [[a b & rest]]\n  (cond (empty? rest) (if (= a b) [a] [a b])\n    (= a b) (recur (cons a rest))\n    :else (cons a (rmdup (cons b rest)))))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 30, "code": "#(->> %\n  (partition-by identity)\n  (map first))", "user": "5535e9b8e4b09218d5f44fb3"}, {"problem": 30, "code": "(fn compress\n             ([lst]\n              (reverse (compress lst '() nil)))\n             ([lst reslst current-element]\n              (if (empty? lst)\n                reslst\n                (let [x (first lst)] (compress \n                                      (rest lst) \n                                      (if (= current-element x) reslst (conj reslst x)) \n                                      x\n                                      )\n                     ))\n              )\n             )", "user": "550fd845e4b06e50f9beb17c"}, {"problem": 30, "code": "#(loop [acc [(first %)], xs (rest %), prev (first %)]\n    (if-let [x (first xs)]\n       (if (= x prev)\n         (recur acc (rest xs) prev)\n         (recur (conj acc x) (rest xs) x))\n       acc))", "user": "4e443201535dc968683fc4a7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5448616be4b032a45b8693c9"}, {"problem": 30, "code": "(fn [s] \n    (loop [s s\n           acc []]\n      (if (empty? s)\n        acc\n        (let [same? (= (last acc) (first s))]\n          (recur (rest s) (if same? acc (conj acc (first s))))))))", "user": "5141a8f2e4b02fd87f5064c1"}, {"problem": 30, "code": "#(map first (partition-by  identity % ))", "user": "5537de22e4b09218d5f44fd5"}, {"problem": 30, "code": "#(map first (partition-by max %))", "user": "55377460e4b09218d5f44fc9"}, {"problem": 30, "code": "(fn [a] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] a))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "553706d1e4b09218d5f44fc7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "552694e7e4b0ffed3738f920"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "553a35bfe4b09218d5f44ff0"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (= (last %1) %2)\n             %1\n             (conj %1 %2)) [(first s)] (rest s)))", "user": "5535d34be4b09218d5f44fb0"}, {"problem": 30, "code": "(fn [s]\n  (remove nil? (map #(if-not (= %1 %2) %1)\n       s\n       (concat (rest s) [nil]))))", "user": "546805d6e4b00cfc9eacc134"}, {"problem": 30, "code": "(fn [xs]\n  (loop [res (list (first xs)) l (first xs) r (next xs)]\n    (if (empty? r)\n      res\n      (recur (if (= (first r) l)\n               \t res\n               \t (concat res [(first r)]))\n             (first r)\n             (next r)))))", "user": "553b87abe4b09218d5f45003"}, {"problem": 30, "code": "(fn r [l] (let [a (first l) b (rest l)] (if (<= (count l) 1) l (if (= a (second l)) (r b) (concat (list a) (r b))))))", "user": "553c05b7e4b09218d5f45011"}, {"problem": 30, "code": "(fn dedupe [col]\n  (reduce\n    #(if (= (last %1) %2)\n       %1\n       (concat %1 [%2]))\n    (list (first col))\n    col))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (concat %1 [%2]) ) \"\"", "user": "553b8fdbe4b09218d5f45004"}, {"problem": 30, "code": "(fn [s]\n  ((fn [c]\n     (concat (first c) (map second (rest c))))\n       (filter #(apply not= %) (partition 2 1 s))))", "user": "5523fce8e4b0882d96d091b4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 30, "code": "(fn [s]\n  (reduce\n    (fn [acc el]\n      (let [prev (last acc)]\n        (if (= prev el)\n          acc\n          (conj acc el))))\n      []\n      s))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 30, "code": "(fn [coll] \n  (reverse (reduce (fn [acc v] (if (= (first acc) v) acc (cons v acc))) '() coll)))", "user": "55074092e4b021ccfedb96a4"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5536c324e4b09218d5f44fc1"}, {"problem": 30, "code": "(fn f [[x & xs]]\n  (if (empty? xs) (list x)\n    (if (= x (first xs)) (f xs) (cons x (f xs)))))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "553478dce4b09218d5f44f9d"}, {"problem": 30, "code": "(fn [coll] (reduce \n(fn  [memo x]\n  (if (or \n       (= x memo) \n       (and (coll? memo) (= (last memo) x)))\n    memo\n    (conj memo x))) [(first coll)] coll))", "user": "54980edae4b0b312c081ff79"}, {"problem": 30, "code": "#(reduce (fn [v n]\n           (let [p (last v)]\n             (if (= n p)\n               v\n               (conj v n)\n               )\n             )\n           )\n         [] %)", "user": "52cda397e4b07d0d72b2737a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 30, "code": "(fn f [s] \n    (if (empty? (next s))\n      s\n\t(if (not= (first s) (fnext s))\n\t  (cons (first s) (f (rest s)))\n\t  (f (rest s))\n\t )\n\t )\n)", "user": "553b90c8e4b09218d5f45005"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "553c4614e4b09218d5f45014"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55337e61e4b09218d5f44f8e"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 30, "code": "#(loop [s % r []] \n   (cond \n    (empty? s) r\n    (= (first s) (last r)) (recur (rest s) r)\n    :else (recur (rest s) (conj r (first s)))))", "user": "4faf97d8e4b081705acca258"}, {"problem": 30, "code": "(partial (fn [acc xs]\n (if (empty? xs)\n  acc\n  (if (= (last acc)\n         (first xs))\n   (recur acc (rest xs))\n   (recur (conj acc\n                (first xs))                                    (rest xs))))) [] )", "user": "55381162e4b09218d5f44fda"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53737e6ce4b06d7f452d9e13"}, {"problem": 30, "code": "(fn [xs]\n  (map first (partition-by identity xs)))", "user": "54c944b1e4b045293a27f666"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 30, "code": "(fn fa\n  [a]\n  (reduce\n  (fn ja\n    [c i] \n    (if \n       (not= \n        (last c) \n        i\n        ) \n      (conj c i)\n      c\n      )\n    )\n   []\n   a\n  )\n  )", "user": "553bc237e4b09218d5f4500a"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "55274467e4b0ffed3738f92b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54fd5e2de4b07d26eda61d33"}, {"problem": 30, "code": "(fn c [a & [r]]\n  (if (empty? a)\n    r\n    (c (rest a) \n       (if (= (last r) (first a))\n         r\n       \t(conj (or r []) (first a))))))", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [acc el] (if (= (last acc) el) acc (conj acc el))) [] s))", "user": "5545eebee4b0a04f79299539"}, {"problem": 30, "code": "reduce\n  (fn [acc x]\n    (if (= (last acc) x)\n      acc\n      (conj acc x)))\n  []", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 30, "code": "#(reduce\n  (fn [acc x]\n    (if (= x (last acc))\n      acc\n      (conj acc x)))\n  [] %)", "user": "552a793ee4b0ffed3738f955"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 30, "code": "(fn my-compress [x]\n  (loop [prev nil coll x result []]\n    (let [curr (first coll)]\n      (cond\n       (nil? curr)\n       result\n       (= prev curr) \n       (recur curr (rest coll) result)\n       :default\n       (recur curr (rest coll) (conj result curr))))))", "user": "5546704be4b0a04f7929953d"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5540f5dee4b0a04f79299509"}, {"problem": 30, "code": "(fn [x] (let [f #(loop [counter 1\n\t\t\t\tcoll %]\n\t\t\t   (if (= (first coll)\n\t\t\t\t  (fnext coll))\n\t\t\t     (recur (inc counter) (next coll))\n\t\t\t     [counter coll]))]\n\t\t  (loop [coll x\n\t\t\t rcoll []]\n\t\t    (if (seq coll)\n\t\t      (recur\n\t\t       (drop (first (f coll)) coll)\n\t\t       (conj rcoll (first (second (f coll)))))\n\t\t      (if (char? (first rcoll))\n\t\t\t(reduce str rcoll)\n\t\t\trcoll)))))", "user": "5313d68de4b08068f379ed0f"}, {"problem": 30, "code": "(fn [s]\n    (reduce #(cond \n                (= (last %1) %2) %1\n                :else (conj %1 %2)) [] s))", "user": "54fdaeace4b07d26eda61d39"}, {"problem": 30, "code": "(fn remove-cons-duplicate\n  [xs]\n  (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() xs))", "user": "550001d0e4b07d26eda61d57"}, {"problem": 30, "code": "(fn [colls]\n  (loop [out []\n         in colls]\n    (cond\n      (empty? in) out\n      (= (first in) (last out)) (recur out (drop 1 in))\n      :else (recur (conj out (first in)) (rest in)))))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 30, "code": "#(reduce (fn [acc curr] (if (not= (last acc) curr) (conj acc curr) acc) ) [] %)", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 30, "code": "(fn [xs] (reduce (fn [as a]\n                     (if (= (last as) a)\n                       as\n                       (conj as a))) [] (vec xs)))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 30, "code": "#(loop [res [] sq %] (if (empty? sq) res  \n          (if (= (last res) (first sq))\n            (recur res (rest sq))\n            (recur (conj res (first sq)) (rest sq)))))", "user": "4fc57c4ce4b0ee37620e17f6"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 30, "code": "reduce (fn [a c] (if (= c (last a)) a (conj a c))) []", "user": "55495318e4b0a04f79299566"}, {"problem": 30, "code": "#(reduce conj [] (map first (partition-by identity %)))", "user": "54b64fbbe4b05787c3b163b8"}, {"problem": 30, "code": "#(loop [x (reverse %) coll '()]\n   (if (empty? x)\n     coll\n     (if (= (first x) (first coll))\n       (recur (rest x) coll)\n       (recur (rest x) (cons (first x) coll)))))", "user": "553fa883e4b0a04f792994f9"}, {"problem": 30, "code": "(fn compress-seq[s]\n  (if (empty? s)\n    s\n    (let [f (first s)]\n      (cons f (compress-seq (drop-while #(= f %) (rest s)))))))", "user": "4f577f25e4b0a7574ea71839"}, {"problem": 30, "code": "(fn [input] (map first (partition-by identity input)))", "user": "554707bae4b0a04f79299544"}, {"problem": 30, "code": "(fn [s]\n    (seq\n      (reduce (fn [acc x]\n                (if (= x (last acc))\n                  acc\n                  (conj acc x)))\n              []\n              s)))", "user": "5549ff9ae4b0a04f7929956e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 30, "code": "(fn dup\n\t[arr]\n\t(loop [[x1 x2 & t] arr final []]\n\t(if (nil? x2)\n\t\t(conj final x1)\n\t\t(if (= x1 x2)\n\t\t\t(recur (conj t x1) final)\n\t\t\t(recur (conj t x2) (conj final x1))\n\t\t\t)\n\t\t)))", "user": "5545477fe4b0a04f79299531"}, {"problem": 30, "code": "(fn[s] (map first (partition-by identity s)))", "user": "4fe9cc68e4b0547ebccb2470"}, {"problem": 30, "code": "(fn find-duplicates\n  [input-list]\n  (loop [remaining-items input-list\n         final-list []]\n    (if (empty? remaining-items)\n      final-list\n      (if (= (first remaining-items) (last final-list))\n        (recur (rest remaining-items) final-list) \n        (recur (rest remaining-items) (conj final-list (first remaining-items))))\n      \n  )))", "user": "5545f713e4b0a04f7929953a"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "554680cbe4b0a04f7929953e"}, {"problem": 30, "code": "(fn [j] (let [es (filter #(not (= (first %) (second %))) (partition 2 1 j))]\n                     (conj (map second es) (first (first es)))))", "user": "554b9c3ee4b0a04f79299594"}, {"problem": 30, "code": "#(map first (partition-by str %))", "user": "554b8572e4b0a04f79299589"}, {"problem": 30, "code": "(fn test [i]\n  (reverse (loop [ls i,\n          its '()]\n     (if (= '() ls)\n       its\n       (recur (rest ls)\n              (if (= (first ls)\n                     (first (rest ls)))\n                its\n                (cons (first ls) its)))))))", "user": "554bc026e4b0a04f79299597"}, {"problem": 30, "code": "(fn [xs] (first (reduce (fn [[out prev] x] [(if (= x prev) out (conj out x)) x]) [[] nil] xs)))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 30, "code": "(fn [seq]\n  (loop [seq seq accum []]\n    (cond (empty? seq) accum\n          (= (last accum) (first seq)) (recur (rest seq) accum)\n          :else (recur (rest seq) (conj accum (first seq))))))", "user": "554dff83e4b00713264bd98d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "554b7056e4b0a04f79299583"}, {"problem": 30, "code": "reduce (fn [acc e] \n              (cond\n                (not (last acc)) [e]\n                (not= e (last acc)) (conj acc e)      \n                :else acc\n              ))\n            []", "user": "5027bbe3e4b01614d1633fef"}, {"problem": 30, "code": "(fn [se] (loop [accum (vector)\n                se se]\n           (if (empty? se) accum\n             (if (= (first se) (peek accum))\n               (recur accum (rest se))\n               (recur (conj accum (first se)) (rest se))))))", "user": "554d386ee4b0a04f792995b8"}, {"problem": 30, "code": "(fn [x]\n                 (reduce (fn [r e]\n                           (if (= e (last r))\n                             r\n                             (conj r e)\n                             )) [] x)\n                 )", "user": "554b2151e4b0a04f79299580"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] %)", "user": "512e31e9e4b0b740abc59823"}, {"problem": 30, "code": "(fn [s]\n  (loop [xs s\n         acc ()]\n    (cond\n      (empty? xs) (reverse acc)\n      (= (first xs) (first acc)) (recur (rest xs) acc)\n      (= (first xs) (second xs)) (recur (rest (rest xs))\n                                        (conj acc (first xs)))\n      :else (recur (rest xs)\n                   (conj acc (first xs))))))", "user": "554ba1d3e4b0a04f79299595"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "555093b2e4b00713264bd9ab"}, {"problem": 30, "code": "(fn\n  [coll]\n  (reduce (fn [reduction item]\n            (if (= (last reduction) item)\n              reduction\n              (conj reduction item))) [] coll))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 30, "code": "(fn [x] \n  (loop [input-list x\n         output-list []\n         last-element nil]\n    (cond \n     \t(= (count input-list) 0) output-list\n     \t(= (first input-list) last-element) (recur (rest input-list) output-list (first input-list))\n     \t:else (recur (rest input-list) (concat output-list [(first input-list)]) (first input-list)))))", "user": "5550dad4e4b00713264bd9b0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5550eda2e4b00713264bd9b4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "54fe57f6e4b07d26eda61d42"}, {"problem": 30, "code": "(fn [x]\n  (loop [r [], p nil , x1 (seq x)]\n    (if (empty? x1) r\n      (let [hd (first x1),tail (rest x1)]\n      (if (= p hd) (recur r,p,tail)\n        (if (nil? p) (recur [hd] hd tail)\n        (recur (concat r [hd]) hd tail)))))))", "user": "55486ee6e4b0a04f7929955a"}, {"problem": 30, "code": "#(map last (partition-by identity %))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 30, "code": "(fn compress\n  ([c]\n    (cons (first c) (compress (rest c) (first c))))\n  ([c, p]\n    (if (empty? c)\n      '()\n      (if (= (first c) p)\n        (compress (rest c) (first c))\n        (cons (first c) (compress (rest c) (first c)))))))", "user": "554d48d3e4b00713264bd988"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5552b617e4b0deb715856df8"}, {"problem": 30, "code": "#(reverse (reduce (fn [acc elt] \n                    (if (= (first acc) elt) acc (cons elt acc)))\n          (cons (first %) (empty %)) (rest %)))", "user": "5553b924e4b0deb715856e06"}, {"problem": 30, "code": "reduce (fn [a, e] (if (= e (last a))\n                    a\n                    (concat a [e]))) '()", "user": "554c0adde4b0a04f7929959e"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (or (empty? %1) (not= (last %1) %2 ))\n             (conj %1 %2) %1 ) [] s))", "user": "554edb85e4b00713264bd99a"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [s e]\n            (if (not= e (last s))\n              (concat s (list e))\n              s)) \n          '() \n          s))", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 30, "code": "(fn[s](reduce\n (fn [m e]\n   (if (= (last m) e) m (conj m e)))\n []\n s))", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn [accum next]\n            (if (= (last accum) next)\n              accum\n              (conj accum next)))\n          [] xs))", "user": "5547bcf2e4b0a04f79299551"}, {"problem": 30, "code": "(fn [x] ((fn compress [x y] \n  (if (empty? x) \n    y \n\t(if (= (first x) (last y)) \n      (compress (rest x) y) \n      (compress (rest x) (concat y [(first x)]))\n      )\n    )\n  ) x '()))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 30, "code": ";; first pass\n;(fn compress\n;  ([xs] (compress xs []))\n;  ([xs xsc]\n;     (cond\n;       (empty? xs) xsc\n;       (= (first xs) (first (rest xs)))\n;         (compress (rest xs) xsc)\n;       :else (compress (rest xs) (conj xsc (first xs))))))\n\n;; enlightened\n#(map first (partition-by identity %))", "user": "554bced1e4b0a04f79299599"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "521ceb02e4b0c4ef0be830a5"}, {"problem": 30, "code": "(fn [xs]\n  (first (reduce (fn [[res cur] el]\n            (if (= cur el)\n              [res el]\n              [(concat res [el]) el]))\n            [(empty xs) nil] xs)))", "user": "553638bae4b09218d5f44fba"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5280a1ece4b0757a1b171407"}, {"problem": 30, "code": "(fn [s]\n    (loop [s s\n           result []]\n      (if (seq s)\n        (recur (drop-while #(= (first s) %) (rest s)) (conj result (first s)))\n        result)))", "user": "555521a5e4b0deb715856e12"}, {"problem": 30, "code": "(fn compress [l]\n\t(reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] l ))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "554dfe97e4b00713264bd98c"}, {"problem": 30, "code": "#(reduce (fn [col i]\n           (if (= (last col) i)\n             col\n             (conj col i)))\n         []\n         (seq %))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 30, "code": "(fn [vs]\n  (reduce (fn [acc v]\n            (cond\n             (empty? acc) (conj (empty acc) v)\n             (= (last acc) v) acc\n             :else (conj acc v)))\n          []\n          vs))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 30, "code": "(fn [x]\n    (let [f (fn [x y] (if (not= (last x) y)\n                        (conj x y)\n                        x))]\n\n    (reduce f [] x)))", "user": "548ce2dbe4b0e286459a1212"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 30, "code": "#(letfn [(red [acc, elem]\n        (if (= (first acc) elem)\n          [elem (second acc)]\n          [elem (conj (second acc) elem)]\n          ))\n                      (sol [l]\n        (let [\n               val (second (reduce red [0, []] l))]\n          val))\n                      (sol2 [l] (if (= java.lang.String (type l)) (apply str (sol l)) (sol l)))\n\n         ] (sol2 %))", "user": "54857657e4b0e286459a11ac"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "555287a4e4b0deb715856df5"}, {"problem": 30, "code": "(fn [xs]\n  (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] xs))\n\n;(fn [xs]\n;  (reduce (fn [result x] (if (not= (last result) x) (conj result x) result)) [] xs))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 30, "code": "(fn [s]\n  (loop [s1 s s2 [] e nil]\n    (if (empty? s1)\n      s2\n      (recur (rest s1) (if (= e (first s1))\n                         s2\n                         (into s2 (list (first s1)))) (first s1)))))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "555ac933e4b0deb715856e49"}, {"problem": 30, "code": "(fn[list] (map first (partition-by identity list)))", "user": "54f296efe4b024c67c0cf8c8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55568a7de4b0deb715856e1c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 30, "code": "(fn [a x] (if (not= (count x) 0) (if (= (first x) (first (rest x))) (recur a (rest x)) (recur (conj a (first x)) (rest x))) a)) []", "user": "555b5ae4e4b0deb715856e4f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "554d04bbe4b0a04f792995b4"}, {"problem": 30, "code": "reduce #(if(not= (last %1) %2) (conj %1 %2) %1) []", "user": "55429859e4b0a04f7929951f"}, {"problem": 30, "code": "( fn [v] ( reduce #( if (= (last %1) %2) %1 (conj %1 %2) ) (concat (vector (vector (first v))) v) ) )", "user": "5551b492e4b0deb715856ded"}, {"problem": 30, "code": "(fn [seq]\r\n  (map first\r\n    (filter (partial apply not=)\r\n      (map list seq (concat '(nil) seq)))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "54982522e4b0b312c081ff7c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "555da2c4e4b0a2eb076a39ae"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "555b35f7e4b0deb715856e4b"}, {"problem": 30, "code": "(fn [seq]\n  (loop [out '()\n         in seq\n         last-element nil]\n    (if (empty? in)\n      out\n      (let [candidate (first in)]\n        (if (= candidate last-element)\n          (recur out (rest in) candidate)\n          (recur (concat out (list candidate)) (rest in) candidate))))))", "user": "5315d4bfe4b08068f379ed37"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [reduced el]\n            (if (= el (last reduced))\n              reduced\n              (conj reduced el))) [] s))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 30, "code": "(fn [theCollection] (reverse (reduce #(if (not (= (first %1) %2)) (cons %2 %1) %1) '() theCollection)))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 30, "code": "(fn [input] (letfn \n              [(deduplicate [acc current] (if (= (last acc) current) acc (conj acc current)))]\n              (reduce deduplicate [] input)))", "user": "555f728de4b0a2eb076a39c8"}, {"problem": 30, "code": "(fn [coll]\n  (when (not (empty? coll))\n    (reverse  (reduce (fn [result c]\n                        (if (= (first result) c)\n                          result\n                          (conj result c)))\n                      (list  (first coll))\n                      (rest coll)))))", "user": "5560f39ce4b0c656e3ff17c2"}, {"problem": 30, "code": "(fn [s] (reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) [] s))", "user": "555a5731e4b0deb715856e44"}, {"problem": 30, "code": "(fn\n    [arr]\n    ((fn\n      [res arr]\n      (if (empty? arr)\n        res\n        (recur\n         (if (= (last res) (first arr))\n          res\n          (concat res (vector (first arr))))\n         (rest arr))))\n      []\n      arr))", "user": "555f4bade4b0a2eb076a39c2"}, {"problem": 30, "code": "(partial reduce (fn [a b]\n                  (if (or (= (empty a) a) (not (= (last a) b)))\n                    (conj a b)\n                    a)) [])", "user": "556238bce4b0c656e3ff17d3"}, {"problem": 30, "code": "(fn [s]\n  (reduce\n    (fn [r v]\n      (if (= (last r) v) r (conj r v)))\n    []\n    s))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "52afa8a1e4b0c58976d9acbe"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "556086a2e4b0c656e3ff17c1"}, {"problem": 30, "code": "(fn compress \n  ([s] \n   (compress s '()))\n  ([s acc] \n   (if (empty? s)\n     (reverse acc)\n     (if (= (first acc) (first s))\n       (compress (rest s) acc)\n       (compress (rest s) (cons (first s) acc))))))", "user": "55623feae4b0c656e3ff17d4"}, {"problem": 30, "code": "(fn compress-seq [coll]\n  (map first (partition-by identity coll)))", "user": "55586905e4b0deb715856e2b"}, {"problem": 30, "code": "(fn [xs]\n  (reduce #(if (not= (last %) %2)\n             (conj % %2)\n             %)\n          [(first xs)] (rest xs)))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "550f70bee4b06e50f9beb177"}, {"problem": 30, "code": "(fn compress [s]\n  (reduce\n   (fn [ret elem]\n     (if (= elem (last ret))\n       ret\n       (conj ret elem)))\n   []\n   s))", "user": "555ee545e4b0a2eb076a39bd"}, {"problem": 30, "code": "(fn [xs] (map first (partition-by identity xs)))", "user": "51846567e4b02826a645f399"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 30, "code": "(fn [c] (reduce (fn [v item] (if (not= (last v) item) (conj v item) v)) [] c))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 30, "code": "#(->> (partition-by identity %)\n      (map first))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 30, "code": "(fn [c] (map first (partition-by identity c)))", "user": "5565e7e6e4b0c656e3ff1821"}, {"problem": 30, "code": "(fn ra [l]\n  (cond (or (empty? l) (empty? (rest l))) l \n        (= (first l) (second l)) (ra (rest l))\n        :else (cons (first l) (ra (rest l)))))", "user": "54f8b6f4e4b01ecee9d8882c"}, {"problem": 30, "code": "(fn no-rep\n  [[x & xs]]\n  (if x \n    (if (= x (first xs))\n       (no-rep xs)\n       (cons x (no-rep xs)))\n    []))", "user": "54070647e4b0addc1aec66b2"}, {"problem": 30, "code": "#(reverse\n  ((fn [l s ret] \n     (if (empty? s)\n       ret\n       (let [f (first s)]\n         (recur f\n                (rest s)\n                (if (= f l)\n                  ret\n                  (cons f ret))))))\n   (first %) (rest %) (list (first %))))", "user": "55670a05e4b0c656e3ff1838"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 30, "code": "(fn cmprs\n  [coll] \n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n     (cmprs r)\n     (cons f (cmprs r)))))", "user": "55640c62e4b0c656e3ff17fd"}, {"problem": 30, "code": "(fn del-duplicate [x]\n  (cond (string? x)  (if (= (count (rest x)) 0)\n                       x\n                       (if (= (first x) (second x))\n                         (del-duplicate (apply str (first x) (rest (rest x))))\n                         (apply str (first x) (del-duplicate (apply str (rest x))))))\n    \n    :else (if (= (count (rest x)) 0)\n            x\n            (if (= (first x) (second x))\n              (del-duplicate (concat [(first x)] (rest (rest x))))\n              (concat [(first x)] (del-duplicate (rest x)))))))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "51aaa5d7e4b04e3dc0c27b2b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5569bbcae4b09a3098a524da"}, {"problem": 30, "code": "#(loop [result []\n             input %]\n        (if (empty? input)\n          result\n          (if (= (first input) (last result))\n            (recur result (rest input))\n            (recur (conj result (first input)) (rest input)))))", "user": "50dfc83fe4b061dbdced7229"}, {"problem": 30, "code": "(fn remde [x]\n  (cond\n    (= 0 (count x)) '()\n    (= (first x) (first (rest x))) (remde (rest x))\n    :else (conj (remde (rest x)) (first x))))", "user": "5374f931e4b06d7f452d9e2d"}, {"problem": 30, "code": "(fn compress [c]\n   (let [lc (rest c ) ]\n     ( filter #(not= nil %) (concat (vector (first c)) (map #( if (not= %1 %2) %2) c lc)))))", "user": "556880dae4b0c656e3ff1856"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 30, "code": "(fn [coll]\n  (loop [c coll\n         acc []]\n    (if (empty? c)\n      acc\n      (if (= (first c) (second c))\n        (recur (rest c) acc)\n        (recur (rest c) (conj acc (first c)))))))", "user": "556a6137e4b09a3098a524e0"}, {"problem": 30, "code": "reduce (fn [a b] (if (= (last a) b) a (conj a b))) []", "user": "54a97853e4b09f271ff37cae"}, {"problem": 30, "code": "reduce (fn [x y] (if (not= y (last x)) (conj x y) x)) []", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5562f08ae4b0c656e3ff17df"}, {"problem": 30, "code": "(fn cps\n  [s] \n  (mapcat (fn [[a b]] (if (not= a b) [a])) (partition 2 1 [nil] s))\n)", "user": "52c70127e4b0c2d177d6211a"}, {"problem": 30, "code": "(fn [col]\n    (reduce (fn [res next]\n              (if (= (last res) next )\n                res\n                (conj res next)))\n            (vector)\n            col))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 30, "code": "#(loop[result [], input %]\n   (cond\n    (nil? input) result\n    (= (last result) (first input)) (recur result (next input))\n    :else (recur (conj result (first input)) (next input))))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55382530e4b09218d5f44fdd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "538d49e1e4b0b51d73faae6b"}, {"problem": 30, "code": "#(loop [x %,result []] \n  (if (empty? x) result \n    (if (= (last result) (first x))\n      (recur (rest x) result)\n      (recur (rest x) (conj result (first x))))))", "user": "555e9dbfe4b0a2eb076a39bc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "556b83fbe4b09a3098a524ee"}, {"problem": 30, "code": "(fn sdsu-no-dup [sequence]\n  (case (count sequence)\n    1 sequence\n    (if (not= (first sequence) (second sequence))\n      (cons (first sequence) (sdsu-no-dup (rest sequence)))\n      (sdsu-no-dup (rest sequence)))))", "user": "556be3dce4b09a3098a524f7"}, {"problem": 30, "code": "(fn compr\n  ([s]  (compr s []))\n  ([s r]\n   (if (empty? s)\n     r\n     (if (= (first s) (last r))\n       (compr (rest s) r)\n       (compr (rest s) (conj  r (first s) )      \n    )\n  )\n)))", "user": "556cd549e4b09a3098a52503"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "5568a1bde4b0c656e3ff1857"}, {"problem": 30, "code": "(fn [arr] (reduce (fn [r v] (if (= v (last r))\n                    r\n                    (conj r v)\n                    )) [] arr)\n  )", "user": "556f443be4b09a3098a5251e"}, {"problem": 30, "code": "(fn compress [s]\n  (reduce \n  (fn [result next] \n    (if (= (last result) next) \n      result\n      (conj result next))\n  )\n  [] s)\n)", "user": "55702247e4b09a3098a5252a"}, {"problem": 30, "code": "(fn dedup [coll]\n  (if (empty? coll)\n    []\n    (let [x (first coll),\n          xs (rest coll)]\n      (cons x (dedup (drop-while (partial = x) xs))))))", "user": "55702081e4b09a3098a52529"}, {"problem": 30, "code": "(fn [s] ((fn r [c s] (cond (empty? s) s (= c (first s)) (r c (rest s)) :else (cons (first s) (r (first s) (rest s))))) nil s))", "user": "556766c1e4b0c656e3ff1840"}, {"problem": 30, "code": "reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) []", "user": "5565d5e4e4b0c656e3ff181f"}, {"problem": 30, "code": "(fn [x] (reduce (fn [accum val]\n(if (not= val (last accum)) (conj accum val) accum)\n) [] x))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 30, "code": "(fn[coll] \n   (loop[res '() x coll]\n    (if(empty? x)\n     (reverse res)\n    (if(= (first x) (first (rest x)))\n      (recur res (rest x))\n      (recur (cons (first x) res) (rest x))\n    )\n   ) \n   ) \n  )", "user": "556cc24ae4b09a3098a52502"}, {"problem": 30, "code": "(fn [seq1]\n  (reduce (fn [seqsofar newitem]\n            (if (= (last seqsofar) newitem)\n              seqsofar\n              (concat seqsofar [newitem])\n              ))\n          [] (seq seq1) ))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 30, "code": "(fn [s]\n  (loop [cs []\n        p nil\n        [c & r] s]\n    (if c\n      (recur (if (not= p c) (conj cs c) cs) c r)\n      cs)))", "user": "5571d6e5e4b09a3098a5253f"}, {"problem": 30, "code": "(fn [xs] (map first (remove #(= (first %) (second %)) (partition 2 1 '(:past-end) xs))))", "user": "556a3243e4b09a3098a524de"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "51e8736ae4b006d205356a4f"}, {"problem": 30, "code": "#(loop [xs (rest %) acc [(first %)]]\n    (if (empty? xs)\n        acc\n        (let [head (first xs)]\n            (recur (rest xs) (if (= (peek acc) head) acc (conj acc head))))))", "user": "556f35fee4b09a3098a5251a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52a4879ce4b0c58976d9abdb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4ef08bd6535dced4c769f20a"}, {"problem": 30, "code": "(fn z [x]\r\n  (cond\r\n    (empty? x) x\r\n    (empty? (rest x)) x\r\n    (= (first x) (first (rest x))) (z (rest x))\r\n    :else (cons (first x) (z (rest x)))))", "user": "55244734e4b0882d96d091bf"}, {"problem": 30, "code": "(fn sm-set [x] \n   (if (> (count x) 1)\n    (if    (= (first x) (first (rest x)) )\n           (sm-set (rest x))\n           (concat (list (first x)) (sm-set (rest x)))\n     )\n     x\n    )\n\n)", "user": "5575aae2e4b05c286339e065"}, {"problem": 30, "code": "#(reduce\n  (fn [a b]\n    (if (= b (last a))\n         a\n         (conj a b)))\n  []\n  %)", "user": "5572fdd7e4b0aa18f790f3f1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "550fa523e4b06e50f9beb17a"}, {"problem": 30, "code": "#(cons\n  (first %)\n  (mapcat (fn [[a b]] (if (= a b) [] [b])) (partition 2 1 %)))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 30, "code": "(fn compress [s] \n  (when-let [[f & r] (seq s)] \n          (if (= f (first r))         ; if first and second are equal\n              (compress r)            ; go to second (i.e. don't add first to list)\n              (cons f (compress r))   ; else add first to list and continue\n          )\n  )\n)", "user": "556f3b1ce4b09a3098a5251c"}, {"problem": 30, "code": "(fn [p]\n  (loop [z p s #{} v []]\n    (if z\n      (let [[x y] z\n            u (conj s x)]\n        (if (= x y)\n          (recur (next z) u v)\n          (recur (next z) (empty s) (concat v u))\n          ))\n      v)))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 30, "code": "(fn re-move [s1]\n  (reduce #(if-not (= (last %1) %2)\n             (conj %1 %2)\n             %1)\n          []\n          s1))", "user": "5559b443e4b0deb715856e3c"}, {"problem": 30, "code": "#(reduce (fn [acc c] (if (= (last acc) c) acc (conj acc c))) [] %)", "user": "5551bddae4b0deb715856def"}, {"problem": 30, "code": "#(map last (partition-by list %))", "user": "4e9cfeb5535dbda64a6f6b85"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "557a1e18e4b05c286339e09e"}, {"problem": 30, "code": "(fn [x]\n  ((fn compress [c1 c2]\n    (if (empty? c2)\n      c1\n      (if (= (last c1) (first c2))\n        (compress c1 (rest c2))\n        (compress (concat c1 [(first c2)]) (rest c2))))) [] x))", "user": "53065acbe4b02e8216869792"}, {"problem": 30, "code": "(fn[coll](map first (partition-by #(list %) coll)))", "user": "55654e17e4b0c656e3ff1818"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5253de67e4b0541d1855b939"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "557bd432e4b05c286339e0bb"}, {"problem": 30, "code": "#(map first (partition-by identity %))\n \n ;; https://clojuredocs.org/clojure.core/partition-by", "user": "557cf48be4b05c286339e0ca"}, {"problem": 30, "code": "(fn [in] \n  (reduce (fn [coll x] (if (= x (last coll))\n                         coll \n                         (conj coll x))) \n          [] \n          in))", "user": "54c779bee4b045293a27f63b"}, {"problem": 30, "code": "#(loop [l % lr [] prv nil]\n   (cond (empty? l) lr\n    (= prv (first l)) (recur (rest l) lr prv)\n    :else (recur (rest l) (conj lr (first l)) (first l))\n                 ))", "user": "52503747e4b0541d1855b828"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54dbe183e4b024c67c0cf778"}, {"problem": 30, "code": "(fn [xs] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) () xs)))", "user": "557954aae4b05c286339e092"}, {"problem": 30, "code": "(fn [xs]                                                                        \n  (loop [acc []                                                                 \n         col xs]                                                                \n    (if (= col [])                                                              \n      acc                                                                       \n      (recur (cond (= acc []) [(first col)]                                     \n                   (= (last acc) (first col)) acc\n                   :else (conj acc (first col)))                                \n             (rest col)))))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 30, "code": "(fn rem-duplicates\n  ([thingy] (rem-duplicates thingy nil []) ) \n  ([thingy pointer newThingy] \n   (println (str \"The stuff is: \" pointer))\n   (if (empty? thingy)\n     newThingy\n     (rem-duplicates \n      (rest thingy) \n      (if (= (first thingy) pointer) pointer (first thingy)) \n      (if (= pointer (first thingy)) newThingy (conj newThingy (first thingy)) ) \n      )\n     ) \n   ) \n  )", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "51a3cc45e4b0e77c4ca60bfb"}, {"problem": 30, "code": "(fn [coll] (reduce #(conj %1 (first %2)) [] (partition-by identity coll)))", "user": "5576f299e4b05c286339e077"}, {"problem": 30, "code": "(fn foo [x] (if (empty? x) () (cons (first x) (foo (drop-while #(= (first x) %) (rest x))))))", "user": "557dbc9de4b05c286339e0cd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "524cb5dee4b0752c4cb68cc7"}, {"problem": 30, "code": "(fn compress-a-sequence [xs]\n  (loop [l []\n         prev-x nil\n         xs' xs]\n    (if (> (count xs') 0)\n      (let [x (first xs')]\n        (recur\n          (if (= x prev-x) l (conj l x))\n          x\n          (rest xs')))\n      l)))", "user": "557bcce4e4b05c286339e0b9"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 30, "code": "(fn clobo [liste] \n  (loop [rliste liste result ()]\n    (if (empty? rliste) \n      (reverse result)\n      (if (= (first result) (first rliste)) \n        (recur (rest rliste) result)\n        (recur (rest rliste) (conj result (first rliste)))\n      )\n    )\n  )\n )", "user": "556f2009e4b09a3098a52519"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "5581747fe4b05c286339e0fa"}, {"problem": 30, "code": "(fn[sq] (\n         map (fn[y] (first y )  ) (\n                 map (fn[x] (distinct x) )  (\n                       partition-by identity sq))))", "user": "55757e81e4b05c286339e063"}, {"problem": 30, "code": "(fn [col] (remove nil? (map #(when (not= %1 %2) %1) col (cons nil col))))", "user": "514a3fa5e4b0829bd132edb6"}, {"problem": 30, "code": "(fn compress\n  [sequence]\n  ((fn compress'\n  [sequence previous]\n  (cond\n    (nil? sequence) ()\n    :else (if-not (= previous (first sequence))\n            (cons (first sequence) (compress' (next sequence) (first sequence)))\n            (compress' (next sequence) previous))))\n sequence nil))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 30, "code": "#(reduce (fn [col v]\n           (if (not= (last col) v)\n             (conj col v)\n             col))\n         []\n         %)", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 30, "code": ";(fn [xs]\n;  (reduce \n;    (fn [acc v]\n;      (if (= (last acc) v) \n;        acc\n;        (conj acc v))) \n;    [] xs))\n\n#(map first (partition-by identity %))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "555c6344e4b0b056612e224c"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "558306dfe4b05c286339e110"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5537c939e4b09218d5f44fd2"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 30, "code": "(fn prob30 [x] (map first (partition-by identity x)))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 30, "code": "#(reduce\n   (fn[acc v]\n     (if (= v (last acc))\n       acc\n       (conj acc v)))\n   [] \n   (seq %))", "user": "4f6d23cde4b07046d9f4efc6"}, {"problem": 30, "code": "(fn [coll]\n  (loop [previous (first coll) coll (rest coll) compressed [previous]]\n    (let [current (first coll)]\n      (cond\n        (empty? coll) compressed\n        (= current previous) (recur current (rest coll) compressed)\n        :else (recur current (rest coll) (conj compressed current))))))", "user": "55842c7ee4b05c286339e11d"}, {"problem": 30, "code": "#(reduce (fn [f s] (if (= s (peek f)) f (conj f s))) [] (vec %))\n\n;; and one using recur TCO...\n#_(fn discard-dups\n  [subject]\n    (loop [[head & tail] (vec subject)\n            uniques []]\n      (if (nil? head)\n        uniques\n        (if-not (= head (peek uniques))\n          (recur tail (conj uniques head))\n          (recur tail uniques)))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 30, "code": "#(loop [s (rest %) d [(first %)]]\n   (if (empty? s) d\n     (recur (rest s) (if (= (last d) (first s)) d\n            (concat d [(first s)])))))", "user": "558378dce4b05c286339e115"}, {"problem": 30, "code": "(fn f [lst]\n  (let [collapse-prefix (fn g [lst]\n                          (if (empty? lst) lst\n                            (if (= (first lst) (second lst))\n                              (g (rest lst))\n                              lst)))]\n    (if (empty? lst) lst\n      (cons (first (collapse-prefix lst)) (f (rest (collapse-prefix lst)))))))", "user": "4e8bc8d8535d65386fec2125"}, {"problem": 30, "code": "(fn [s]\n  (reverse \n   (reduce (fn [s x] \n             (if (= (first s) x) \n             s\n             (conj s x)))\n           '()\n           s)))", "user": "5392500ae4b0b51d73faaeaf"}, {"problem": 30, "code": "#(loop [[t [x & xs]] [[] %]] \n   (if (nil? xs) (conj t x) \n     (if (= x (first xs)) (recur [t xs]) (recur [(conj t x) xs]))))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 30, "code": "(fn [coll]\n  (reduce\n    #(if (= (last %) %2)\n       (identity %)\n       (conj % %2))\n    []\n    coll))", "user": "50ec409ce4b04edc33777045"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5585aa48e4b001b0851d7510"}, {"problem": 30, "code": "(fn [coll]\n(letfn [(comp-seq [coll]\n(if\ncoll\n(let\n[f (first coll)\nr (next coll)]\n(if\n(not (= f (first r)))\n(cons f (comp-seq r))\n(comp-seq r)))))]\n(comp-seq coll)))", "user": "55306b8ae4b076ab5578f812"}, {"problem": 30, "code": "(fn [coll] \n  (reverse (reduce #(if (= %2 (first %1)) \n                      %1 \n                      (cons %2 %1))\n                   '()\n                   coll)))", "user": "5579bc24e4b05c286339e098"}, {"problem": 30, "code": "(fn [v]\n  (loop [li (seq v) le ()]\n    (if (empty? li)\n      (reverse le)\n      (recur (rest li) (if (= (first le) (first li)) le (conj le (first li)))))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 30, "code": "(fn compress [a]\n  (map first\n       (partition-by identity a)\n  )\n)", "user": "554756b8e4b0a04f79299549"}, {"problem": 30, "code": "(fn [S]\n    (let [func (fn iter [last s seq]\n        (cond (empty? s) seq\n            (= (first s) last) (iter last (rest s) seq)\n            true (iter (first s) (rest s) (conj seq (first s))))\n        )]\n    (reverse (func nil S nil))))", "user": "5583888ae4b05c286339e117"}, {"problem": 30, "code": "#(reduce\n  (fn [a b]\n    (if (= (last a) b)\n      a\n      (conj a b)))\n  [] %)", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "55885edae4b059ccff29b1f6"}, {"problem": 30, "code": "(fn [s]\n   (->> (reduce (fn [r c]\n              (if (= (first r) c)\n                r\n                (conj r c)))\n            nil\n            s)\n      reverse))", "user": "55895eade4b059ccff29b202"}, {"problem": 30, "code": "(fn dupl [x] (cond (<= (count x) 1) x\n                  (= (first x) (second x)) (dupl (rest x))\n                  :else (cons (first x) (dupl (rest x)))))", "user": "558466fce4b04192f3441eee"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "557ca912e4b05c286339e0c8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 30, "code": "#(reduce\n   (fn [out-seq head]\n     (if (= (last out-seq) head)\n       out-seq\n       (conj out-seq head)))\n   (vector (first %))\n   %)", "user": "53d64811e4b0e771c3025456"}, {"problem": 30, "code": "(fn [coll]\n  ((fn condense [a coll]\n    (if (empty? coll) (reverse a)\n      (let [f (first coll) r (rest coll)]\n        (if (= (first a) f) (condense a r)\n          (condense (conj a f) r))))) '() coll))", "user": "554a270fe4b0a04f79299570"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 30, "code": "(fn [input]\n   (loop [i input\n          o (list)]\n     (if (empty? i)\n       (reverse o)\n       (let [f (first i)\n             s (second i)]\n         (if (not= f s)\n           (recur (rest i) (conj o f))\n           (recur (rest i) o))))))", "user": "54cbd6bae4b057c6fda3a282"}, {"problem": 30, "code": "reduce (fn [m l] \n         (if (= (last m) l) \n           m \n           (conj m l) )) []", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "558aabbfe4b0277789237621"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55893ebbe4b059ccff29b1ff"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "558a81fbe4b027778923761c"}, {"problem": 30, "code": "(fn [seq] (reverse (reduce (fn [acc x] (if (= (first acc) x) acc (conj acc x))) '() seq)))", "user": "5589e88ae4b0277789237610"}, {"problem": 30, "code": "(fn [s] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) '[] s))", "user": "5586a459e4b059ccff29b1d5"}, {"problem": 30, "code": "(fn [coll]\n  (loop [c coll\n         res []]\n    (if-let [[f & r] c]\n      (if (= f (first r))\n        (recur r res)\n        (recur r (conj res f)))\n      res)))", "user": "55860905e4b001b0851d7516"}, {"problem": 30, "code": "(fn abc [pool]\n   (if (empty? pool)\n     nil\n     (let [x (first pool)\n           restx (rest pool)\n           next (second pool)\n           skip? (= next x)\n           ]\n       (if skip? (abc restx) (cons x (abc restx)))))\n )", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 30, "code": "(fn single [l]\n  (cond\n    (empty? l) '()\n    (= (first l) (first (rest l))) (single (rest l))\n    :else (conj (single (rest l)) (first l))))", "user": "558df2ebe4b0277789237649"}, {"problem": 30, "code": "(fn [sq]\n  (loop [a (first sq)\n         s (conj '() a)\n         rs (rest sq)]\n    (if (empty? rs) \n      (reverse s) \n      (recur (first rs) \n             (if (= a (first rs)) s (conj s (first rs)))\n             (rest rs)))))", "user": "558bb38fe4b0277789237631"}, {"problem": 30, "code": "reduce (fn [x y] (if (not= (last x) y) (conj x y) x)) []", "user": "558b50d5e4b027778923762b"}, {"problem": 30, "code": "(fn [i] (reduce \n         \t#(if (not= (last %1) %2) (conj %1 %2) %1)\n         \t[]\n         \t(seq i)))", "user": "4f070ce6535dcb61093f6c1e"}, {"problem": 30, "code": "; #(flatten (reduce (fn[x y] (if (= (last (flatten x)) y) [x] [x y] ) ) '() % ) )\n; given a list, append \n\n#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] %)", "user": "558ed227e4b0277789237658"}, {"problem": 30, "code": "(fn f [res x] (if (empty? x)\n                     res\n                     (f (into res (vector (first x)) )(drop-while #(= (first x) %) x))\n                     )) []", "user": "5576e78de4b05c286339e075"}, {"problem": 30, "code": "(fn cmpr [s]\n      (let [head (first s)\n            tail (rest s)]\n      (cond (empty? s) s\n            (= head (first tail)) (cmpr tail)\n            :else (conj (cmpr tail) head))))", "user": "5578c67fe4b05c286339e08d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5573a505e4b0aa18f790f3fa"}, {"problem": 30, "code": "(fn mycomp\n\t[myseq]\n\t(loop\n\t\t[myrest myseq c nil myres nil]\n\t\t(if (empty? myrest)\n\t\t\tmyres\n\t\t\t(if (= c (first myrest))\n\t\t\t\t(recur (rest myrest) c myres)\n\t\t\t\t(recur (rest myrest) (first myrest) (concat myres (list (first myrest))))))))", "user": "55897fe2e4b059ccff29b205"}, {"problem": 30, "code": "#(reduce (fn [res item]\n                 (if (= (last res) item)\n                   res\n                   (conj res item)))\n               []\n               %)", "user": "525523e3e4b0541d1855b9cc"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5589a735e4b059ccff29b206"}, {"problem": 30, "code": "(fn [coll] \n  (reduce\n    (fn [coll element]\n      (if (= (last coll) element)\n           coll\n           (conj coll element))\n    )\n    [] coll\n    \n    ))", "user": "55465b20e4b0a04f7929953b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5590e461e4b0277789237675"}, {"problem": 30, "code": "(fn [s]\n  (loop [x s r []]\n    (if (empty? x)\n      r\n      (if\n       (= (first x) (second x)) (recur (rest x) r)\n       (recur (rest x) (conj r (first x)))))))", "user": "5590e55de4b0277789237676"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "558d7dd3e4b0277789237647"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "554c1708e4b0a04f792995a0"}, {"problem": 30, "code": "(fn [x] (reverse(reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() x)))", "user": "55818b0ee4b05c286339e0fb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55916d7be4b0604b3f94d57d"}, {"problem": 30, "code": "(fn [coll]\n  (loop [res [] init (seq coll)]\n    (if (empty? init)\n      res\n     (recur (if (or (empty? res) (not= (last res) (first init))) (conj res (first init)) res) (rest init)))\n    ))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 30, "code": "#(reduce (fn [output, single] (if (not= (last output) single) (concat output [single]) output)) (take 1 %) (rest %))", "user": "559057c4e4b027778923766e"}, {"problem": 30, "code": "#(->> %      \n      (partition-by identity)\n      (map first))", "user": "53e76363e4b036ad0777e47b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 30, "code": "reduce (fn [f s] (println f s)\n          (if (= (last f) s)\n            f\n            (conj f s))) []", "user": "5594523be4b0c79f6e1db951"}, {"problem": 30, "code": "(fn [l] \n  (loop [l l rv []]\n    (if (empty? l)\n      rv\n      (if (= (first l) (last rv))\n        (recur (rest l) rv)\n        (recur (rest l) (conj rv (first l)))))))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 30, "code": "#(reduce (fn [x y] \n           (if (not= (last x) y) \n             (conj x y) \n             x)) [] %)", "user": "557e6b73e4b05c286339e0d6"}, {"problem": 30, "code": "(fn [x]\n  (loop [[a & s] x r [] p nil]\n    (if (nil? a)\n      r\n      (recur s (if (= a p) r (conj r a)) a))))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55913b57e4b0604b3f94d575"}, {"problem": 30, "code": "(fn f [sq]\n  (if (empty? sq) sq \n    (cons (first sq)\n          (f (drop-while #(= (first sq) %) sq)))))", "user": "55815973e4b05c286339e0f6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55941019e4b0c79f6e1db94b"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %1) %2)\n                        %1\n                       (conj %1 %2))\n                  [] \n                  (seq x)))", "user": "55893b09e4b059ccff29b1fe"}, {"problem": 30, "code": "#(seq (doall\n  (reverse\n  \t(reduce (fn [x y] (if (= (first x) y)\n              \t\t\t\tx\n              \t\t\t\t(conj x y)))\n          '() %))))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 30, "code": "(fn del-rep \n  ([coll] (del-rep coll []))\n  ([[h & coll] acc]\n    (if (empty? coll) \n      (conj acc h)\n      (if-not (= h (first coll))\n        (recur coll (conj acc h))\n        (recur coll acc)\n        ))))", "user": "55950c5fe4b0c79f6e1db95e"}, {"problem": 30, "code": "reduce (fn [l r]\n          (if (not= (last l) r)\n            (conj l r)\n            l)) '[]", "user": "557819dce4b05c286339e088"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5593619ae4b0c79f6e1db93c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 30, "code": "#((fn f [s prev]\n        (if (empty? s)\n          ()\n          (if (= (first s) prev)\n            (recur (rest s) prev)\n            (conj (f (rest s) (first s)) (first s))))) % nil)", "user": "558f4fbae4b0277789237661"}, {"problem": 30, "code": "(comp (partial map first)\n      (partial partition-by identity))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5547b201e4b0a04f7929954f"}, {"problem": 30, "code": "reduce \n(fn [acc cur] \n  (if (= (last acc) cur)\n    acc\n    (conj acc cur)\n    )) []", "user": "555883c5e4b0deb715856e2d"}, {"problem": 30, "code": "(fn\n  [ls]\n  (reduce\n   (fn [v e]\n     (if (not= (last v) e)\n       (conj v e)\n       v))\n   [] ls))", "user": "55920e24e4b0604b3f94d587"}, {"problem": 30, "code": "#(reduce (fn [xs x] (if (= (last xs) x) xs (conj xs x))) [] %1)", "user": "5590ebb1e4b0277789237677"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4fdb0c0ae4b05e33b9224f57"}, {"problem": 30, "code": "(fn [s] (reduce\n        \t(fn [acc v]\n              (if (= (last acc) v)\n                acc\n                (conj acc v)))\n       \t[] s))", "user": "55990d3ce4b031d6649c9ba3"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "55079e55e4b021ccfedb96aa"}, {"problem": 30, "code": "(fn [se]\n  (loop [s se result []]\n    (if (first s)\n      (recur (drop-while #(= % (first s))  (rest s)) (conj result (first s)))\n      result)))", "user": "54530382e4b0e397800069cc"}, {"problem": 30, "code": "(fn[coll](map first (partition-by identity coll)))", "user": "5594f8aee4b0c79f6e1db95c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5585f088e4b001b0851d7513"}, {"problem": 30, "code": "(fn [s]\n  (loop [r s\n         a '()\n         p nil]\n    (if (empty? r)\n      (reverse a)\n      (let [f (first r)\n            l (rest r)]\n        (if (= p f)\n          (recur l a p)\n          (recur l (cons f a) f))))))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "4fffa422e4b0678c553fc404"}, {"problem": 30, "code": "(fn cmprs [s]\n  (when-let [[f & r] (seq s)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "54117417e4b01498b1a719c5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54aec099e4b09f271ff37cf5"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "559bdf16e4b066d22e731f5a"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 30, "code": "(fn no-dups\n  ([orig]\n   (no-dups [(first orig)] (rest orig)))\n  ([dists orig]\n    (if-let [frst (first orig)]\n      (if (= frst (last dists))\n        (recur dists (rest orig))\n        (recur (conj dists frst) (rest orig)))\n      dists)))", "user": "5537f30fe4b09218d5f44fd8"}, {"problem": 30, "code": "(fn [sqnc] ; http://www.4clojure.com/problem/30#prob-title Compress a Sequence\n  (loop [s sqnc result ()]\n    (if (empty? s)\n      (reverse result)\n      (recur\n        (rest s)\n        (if (not= (first s) (first (rest s)))\n          (cons (first s) result)\n          result\n        )\n      )\n    )\n  )\n)", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= b (last a)) a (conj a b))) [] %)", "user": "559c13c5e4b066d22e731f61"}, {"problem": 30, "code": "(fn [x] (let [l (seq x)] (reverse (reduce (fn [a b] (if (= (first a) b) a (cons b a))) (list (first l)) (rest l)))))", "user": "5595071ae4b0c79f6e1db95d"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "54c9571ee4b045293a27f66b"}, {"problem": 30, "code": "reduce (fn [coll val] (if (= (last coll) val) coll (conj coll val))) []", "user": "55306f9de4b076ab5578f814"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "54a627bce4b09f271ff37c83"}, {"problem": 30, "code": "(fn [sq]\n  (loop [sq-it sq\n         lastitem nil\n         ret-it (empty sq)]\n    (if (empty? sq-it)\n      ret-it\n      (recur (rest sq-it)\n             (first sq-it)\n             (if (= (first sq-it)\n                    lastitem)\n               ret-it\n               (concat ret-it\n                       (list (first sq-it))))))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 30, "code": "(fn p30\n  ([x] (p30 x (first (rest x))))\n  ([x y]\n  (if-not (empty? x)\n    (if (not= (first x) y)\n      (cons (first x) (p30 (rest x) (first (rest (rest x)))))\n      (p30 (rest x) (first (rest (rest x))))\n      )\n    )))", "user": "5400e918e4b0de5c41848619"}, {"problem": 30, "code": "(fn [x] (map #(first %) (partition-by identity x)))", "user": "558bdcefe4b0277789237633"}, {"problem": 30, "code": "reduce (fn [r x] (if (= (last r) x) r (conj r x))) []", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 30, "code": "(fn [xs]\n  (first\n    (reduce\n     (fn [[acc prev] t]\n       (if (= t prev)\n         [acc t]\n         [(conj acc t) t]))\n     [[] nil] xs)))", "user": "559141b1e4b0604b3f94d576"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "559e25fde4b08a52bd4f97d0"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "559c3d73e4b066d22e731f65"}, {"problem": 30, "code": "reduce #(if (not= (last %) %2) (conj % %2) %) []", "user": "559a8816e4b066d22e731f41"}, {"problem": 30, "code": "(fn dupes [coll]\n  (let [f (first coll) ; first\n        r (rest coll) ; rest\n        s (first r)] ; second\n    (cond \n     (empty? coll) nil\n     (= f s) (dupes r)\n     :else (cons f (dupes r)))))", "user": "559f06bae4b0acc240e314e6"}, {"problem": 30, "code": "#(remove nil? (map-indexed (fn [idx x] (if (= x (get % (dec idx))) nil x)) %))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 30, "code": "#(loop [lis % res []]\n   (if (seq lis)\n     (recur (rest lis) (if (= (first lis) (last res))\n                         res\n                         (conj res (first lis))))\n     res))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 30, "code": "#(apply concat (map distinct (partition-by identity %)))", "user": "5574c172e4b05c286339e059"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55a0d7e0e4b0acc240e31503"}, {"problem": 30, "code": "(fn [input] (reduce #(if (= %2 (last %))\n                        %\n                        (conj % %2))\n                    []\n          input))", "user": "540e97f9e4b0addc1aec671f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "559ffabae4b0acc240e314ef"}, {"problem": 30, "code": "(fn [x] (reduce (fn [acc n] (if (not= (last acc) n) (conj acc n) acc)) [] x))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "559972d1e4b031d6649c9bab"}, {"problem": 30, "code": "(fn cop [x]\n  (cond (empty? x) x\n        (= (first x) (second x)) (cop (rest x))\n        :else (cons (first x) (cop (rest x))))\n  )", "user": "55993deee4b031d6649c9ba5"}, {"problem": 30, "code": "(fn \n  [aseq]\n  (loop [prev nil\n         [cur & r] aseq\n         new-seq []]\n    (if (nil? cur)\n      new-seq\n      (if (= cur prev)\n        (recur cur r new-seq)\n        (recur cur r (conj new-seq cur))))))", "user": "557e2eafe4b05c286339e0d2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55a346e8e4b0acc240e31532"}, {"problem": 30, "code": "(fn [l]\n   (reverse \n     (reduce \n      #(if (= (first %1) %2) %1 (conj %1 %2))\n          nil l)))", "user": "52138dd7e4b0d32679a5065d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55a35ef4e4b0acc240e31535"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55a02d8ae4b0acc240e314f2"}, {"problem": 30, "code": "(fn [s]\n  (letfn [(reducto [acc se]\n                   (if (empty? se) \n                     acc\n                     (if (= (last acc) (first se))\n                       (recur acc (rest se))\n                       (recur (conj acc (first se)) (rest se)))))]\n    (reducto [] s)))", "user": "55a1ba5ee4b0acc240e31517"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55a0e139e4b0acc240e31504"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "559eb160e4b0acc240e314e1"}, {"problem": 30, "code": "#(loop [input % previous nil result []]\n          (if (empty? input)\n            result\n            (let [current (first input)]\n              (recur (drop 1 input)\n                     current\n                     (if (= previous current)\n                       result\n                       (conj result current)\n                       )\n              ))))", "user": "55989c25e4b031d6649c9b9b"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "55a0a278e4b0acc240e314ff"}, {"problem": 30, "code": "(fn compress \n  [xs]\n  (if\n    (empty? xs)\n    '()\n    (cons\n     (first xs)\n     (compress\n      (drop-while\n       (fn [x] (= x (first xs)))\n       (rest xs))))))", "user": "55a3ca84e4b0acc240e3153c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 30, "code": "(fn [coll]\n(reverse (reduce #(if (= (last (reverse %1)) %2) %1 (cons %2 %1)) [] coll)))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 30, "code": "reduce (fn [l x] (if (= (last l) x) l (conj l x))) []", "user": "503e91d4e4b06c4e0e1fa269"}, {"problem": 30, "code": "(fn [x] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() x)))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 30, "code": "(fn compress [coll]\n  (reverse (reduce (fn [acc x]\n                     (if (= x (peek acc))\n                       acc\n                       (conj acc x)))\n                   [] (reverse coll))))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 30, "code": "(fn ans [s]\n  (->> s\n       (reduce (fn [coll c]\n                   (if (= c (first coll))\n                       coll\n                       (conj coll c)))\n                 '())\n       reverse))", "user": "559468cbe4b0c79f6e1db954"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55a30e9de4b0acc240e3152f"}, {"problem": 30, "code": "(fn [xs]\n  (cons (first xs) \n        (map #(second %) \n             (filter #(if (= (first %) (second %)) \n                        nil \n                        (second %)) \n                     (partition 2 1 xs)))))", "user": "553527ede4b09218d5f44fab"}, {"problem": 30, "code": "(fn [s] (reduce #(cond (= %2 (last %1)) %1 :else (conj %1 %2)) [] s))", "user": "55496eeae4b0a04f79299569"}, {"problem": 30, "code": "#(reduce (fn [acc e] (if (= e (last acc)) acc (concat acc [e]))) (take 1 %) (rest %))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 30, "code": "(fn [x]\n\t(loop [prev (first x) old (rest x) new [(first x)]]\n\t\t(if (empty? old)\n\t\t\tnew\n\t\t\t(if (= prev (first old))\n\t\t\t\t(recur prev (rest old) new)\n\t\t\t\t(recur (first old) (rest old) (conj new (first old)))))))", "user": "531dc21be4b08068f379edb1"}, {"problem": 30, "code": "(partial reduce (fn [acc el]\n              (if (= (last acc) el)\n              acc\n              (concat acc (list el))\n              ))\n            '())", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 30, "code": "#(cons (first %) (map second \n      (filter \n       (fn [[fst snd]] \n         (not= fst snd)) \n       (partition 2 1 %))))", "user": "5592dc6be4b0c79f6e1db935"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 30, "code": "reduce (fn [r x]\n          (if (= (last r) x)\n            r\n            (conj r x))) []", "user": "53c0f4dee4b00fb29b221259"}, {"problem": 30, "code": "(fn [xs]\n  (reduce \n   (fn [x1 x2]\n     (if (= (last x1) x2) \n       x1 \n       (conj x1 x2)))\n   []\n   xs))", "user": "55aa8276e4b0988bba2ad94e"}, {"problem": 30, "code": "(fn [x] (let [fv (map first (partition-by identity x))] (if (string? x) (apply str fv) (apply list fv))))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 30, "code": "#(reduce (fn [coll nextcoll] \n            (if (= (last coll) \n                   nextcoll)\n              coll \n              (conj coll \n                    nextcoll))) \n          [] %)", "user": "51814aefe4b06547fbae114f"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "55ab8c2de4b0988bba2ad954"}, {"problem": 30, "code": "(fn remove-consecutive-dup\n  [in-seq]\n  (loop [result-seq (vector (first in-seq))\n         temp-seq in-seq]\n    (if (= 0 (count temp-seq))\n      result-seq\n      ;; else\n      (let [cur-item (last result-seq)\n            next-item (first temp-seq)]\n        (if (= cur-item next-item) \n          (recur result-seq (rest temp-seq))\n          (recur (conj result-seq next-item) (rest temp-seq))\n          )\n        )\n      )\n    )\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "532dbd3ce4b019098a6f8b40"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5593b10ce4b0c79f6e1db943"}, {"problem": 30, "code": "#(reverse (reduce (fn [a b] (if (= (first a) b) a (cons b a) )) '() %))\n\n;; (map first (partition-by identity [1 1 2 3 4 4]))", "user": "5587ddd9e4b059ccff29b1ea"}, {"problem": 30, "code": "(fn [s]\n    (letfn [(cmprs [s curr-item result]\n             (if (seq s)\n               (let [first-item (first s)\n                     new-result (if (= first-item curr-item)\n                                  result\n                                  (conj result first-item))]\n                 (recur (rest s) first-item new-result))\n               result))]\n      (cmprs s nil [])))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 30, "code": "(fn com\n  [my-seq]\n  (reduce (fn [new-seq el] (if (not= (last new-seq) el) (conj new-seq el) new-seq)) [] my-seq) \n)", "user": "55acd080e4b03311e7b73298"}, {"problem": 30, "code": "(partial\n reduce\n (fn [l x]\n   (if (= x (last l))\n     l\n     (conj l x))) \n [])", "user": "55ae7adae4b03311e7b732bd"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 30, "code": "reduce #(if-not (= (last %1) %2)\n             (conj %1 %2)\n             %1)\n          []", "user": "52b3520ee4b0c58976d9ad04"}, {"problem": 30, "code": "(fn [s]\n  (reduce \n   #(if (= (last %1) %2) \n      %1\n      (reverse (conj (reverse %1) %2)))\n   '()\n   s))", "user": "55ad59cde4b03311e7b732a7"}, {"problem": 30, "code": "(fn [x]\n  (loop [[f & r] x\n         out []]\n    (if (= 0 (count r))\n      (conj out f)\n      (if (= f (first r))\n        (recur r out)\n        (recur r (conj out f))))))", "user": "54c120d7e4b0ed20f4ff6f1c"}, {"problem": 30, "code": "(fn \n [s]\n  (reduce\n   #(if (= (last %) %2)\n      %\n      (concat % [%2]))\n   '()\n   s))", "user": "55a62092e4b0acc240e31554"}, {"problem": 30, "code": "#(loop [c % res []]\n   (cond\n     (empty? c) res\n     (= (first c) (last res)) (recur (rest c) res)\n     (not= (first c) (last res)) (recur (rest c) (conj res (first c)))\n))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 30, "code": "(fn [a] \r\n  (reverse (reduce \r\n            #(if (= (first %1) %2) %1 (conj %1 %2))\r\n            () (seq a))))", "user": "55af7e21e4b03311e7b732cc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55b08677e4b002ce9d5cbc23"}, {"problem": 30, "code": "(fn [x]\n  (loop [i 0 s '()]\n    (if (= i (count x))\n      (reverse s)\n      (if-not (= (nth x i) (first s))\n        (recur (inc i) (conj s (nth x i)))\n        (recur (inc i) s)))))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 30, "code": "#(loop [coll % prev nil acc nil]\n   (if (empty? coll)\n     acc\n     (let [curr (last coll) new-coll (butlast coll)]\n       (if (= curr prev)\n         (recur new-coll curr acc)\n         (recur new-coll curr (cons curr acc))))))", "user": "55afc197e4b002ce9d5cbc18"}, {"problem": 30, "code": "#(map first (filter (fn [a] (not= (first a) (second a))) (map list (seq %) (concat '(0) (seq %)))))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5595c60ee4b0c79f6e1db96f"}, {"problem": 30, "code": "#(reduce (fn [acc elem]\n           (if  (= (last acc) elem)\n             acc\n             (conj acc elem)))\n         []\n         (seq %))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [(first x)] x))", "user": "54f3d6c7e4b050824f58f5cb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55998d0ce4b031d6649c9bac"}, {"problem": 30, "code": "(fn [l] (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '() l))", "user": "55b0ecb7e4b002ce9d5cbc27"}, {"problem": 30, "code": "(fn [x](reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) [] x))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "559c4236e4b066d22e731f67"}, {"problem": 30, "code": "reduce\n  (fn [coll x] \n\t(if (= (last coll) x)\n\t  coll\n\t  (concat coll (list x))))\n  ()", "user": "5537cbaee4b09218d5f44fd3"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "53396c03e4b0e30313ee6ca7"}, {"problem": 30, "code": "#((fn cc[done, was](if (empty? was) \n                     done\n                  (if (= (last done) (first was))\n                    (cc done (rest was))\n                   (cc (conj done (first was)) (rest was))\n                   \n                  ))) [] %)", "user": "55aba8f4e4b03311e7b7328c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55158345e4b055c2f668d4e8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53cb5559e4b00fb29b2212d2"}, {"problem": 30, "code": "(fn wat \n  ([bleh] (let [[x & xs] (seq bleh)] (wat xs x)))\n  ([[x & xs] cur] \n   (if x\n     (if (= x cur)\n       (recur xs cur)\n       (cons cur (wat xs x)))\n     (list cur))))", "user": "54dcbc6ee4b024c67c0cf787"}, {"problem": 30, "code": "(fn\n  [ss]\n  (reverse\n   (reduce\n    (fn\n      [xs x]\n      (if (and (not (empty? xs)) (= (first xs) x))\n        xs\n        (cons x xs))\n      )\n    []\n    (seq ss))))", "user": "5351fca5e4b084c2834f4aec"}, {"problem": 30, "code": "#(reduce (fn [acc e]\n           (if (empty? acc)\n             (conj acc e)\n             (if (= (peek acc) e)\n               acc\n               (conj acc e))))\n         []\n         %)", "user": "55ab07e0e4b0988bba2ad953"}, {"problem": 30, "code": "#(->> %  (partition-by identity) (map first))", "user": "5587cd86e4b059ccff29b1e6"}, {"problem": 30, "code": "(fn [x]\n  (->>\n   x\n   (reduce\n    #(if (= (first %) %2) % (conj % %2))\n    ())\n   (reverse)))", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 30, "code": "(fn compress [s] (map first (partition-by identity s)))", "user": "55b3e8aee4b01b9910ae2977"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 30, "code": "(fn [array] (map first (partition-by identity array)))", "user": "55838353e4b05c286339e116"}, {"problem": 30, "code": "(fn [xs]\n  (loop [ x (first xs)\n          ys (rest xs)\n          r [] ]\n    (if (empty? ys) (conj r x)\n                    (recur (first ys)\n                           (rest ys)\n                           (if (not (= x (first ys))) (conj r x)\n                                                      r)))))", "user": "503c90aae4b06c4e0e1fa24b"}, {"problem": 30, "code": "(fn [coll] (loop [x coll ans '()] (if (zero? (count x)) ans (recur (drop-last x) (if (= (first ans) (last x)) ans (conj ans (last x)))))))", "user": "55b64ef1e4b01b9910ae2994"}, {"problem": 30, "code": "#(let [igualsig? (fn [pos vec] (if-not (= (nth vec (dec pos)) (nth vec  pos))(nth vec pos))) datos %] (concat (vector (first datos)) (filter (fn [q](not (nil? q))) (map (fn [s] (igualsig? s datos)) (range 1 (count datos))))))", "user": "55ac16a0e4b03311e7b73291"}, {"problem": 30, "code": "#(reverse (reduce (fn [xs y] (if (= (first xs) y) xs (cons y xs))) [] %))", "user": "55b25970e4b0da326a65cf7e"}, {"problem": 30, "code": "(fn [s] (reduce\n         (fn [acc x]\n           (if (= (last acc) x)\n             acc\n             (conj acc x)))\n         (vector)\n         s))", "user": "55b54ecbe4b01b9910ae2987"}, {"problem": 30, "code": "(fn ok4 [coll]\n  (reduce\n   (fn [x y]\n     (if (= (last x) y)\n       x\n       (conj x y)))\n     [] coll))", "user": "557f748ae4b05c286339e0df"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 30, "code": "(fn [v] \n    (loop [rez [] rem v c nil]\n        (if (seq rem)\n            (if (not= (first rem) c)\n                (recur (conj rez (first rem)) (rest rem) (first rem))\n                (recur rez (rest rem) (first rem)))\n            rez)))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53864493e4b06839e8705f10"}, {"problem": 30, "code": "#(loop [x % r (conj nil (first %))]\n    (if (= (count x) 1)\n      (reverse r)\n    (if (= (first x) (second x))\n      (recur (rest x) r)\n      (recur (rest x) (conj r (second x))))))", "user": "55278187e4b0ffed3738f92d"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "55b60518e4b01b9910ae298e"}, {"problem": 30, "code": "(fn [x] \n  (loop [in x out '()]\n    (if (empty? in)\n      out\n      (if (= (first in) (first (rest in)))\n      \t(recur (rest in) out)\n        (recur (rest in) (concat out (list (first in)))) ))))", "user": "55b705fce4b01b9910ae29a0"}, {"problem": 30, "code": "reduce (fn [ul it] (if (= (last ul) it) ul (conj ul it))) []", "user": "55b77c7ce4b01b9910ae29a3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55ae383fe4b03311e7b732b7"}, {"problem": 30, "code": "#(->> (reduce (fn [acc x] (if (not= x (first acc)) (conj acc x) acc)) (list (first %1)) (rest %1))\n\t  reverse)", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 30, "code": ";; Super complicated but as someone learning clojure I'm proud of it\n(fn remove-duplicates-robust [coll]\n  (if (string? coll)\n    (apply str (remove-duplicates-robust (vec coll)))\n    (if (empty? coll)\n      coll\n      (if (= (first coll) (second coll))\n        (remove-duplicates-robust (rest coll))\n        (cons (first coll) (remove-duplicates-robust (rest coll)))))))", "user": "55b69e37e4b01b9910ae2999"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "556204c2e4b0c656e3ff17d2"}, {"problem": 30, "code": "#(mapcat set (partition-by identity %1))", "user": "55b9ce15e4b01b9910ae29c1"}, {"problem": 30, "code": "(fn compress\n  [s]\n  (if (<= (count s) 1)\n    s\n    (if (= (first s) (second s))\n      (compress (rest s))\n      (conj\n        (reduce conj (empty s) (reverse (compress (rest s))))\n        (first s)))))", "user": "55b7ca4ae4b01b9910ae29b1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55b1ab40e4b0da326a65cf6e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55bbb28be4b01b9910ae29ea"}, {"problem": 30, "code": "(fn compress [items]\n  (let [items (seq items)]\n    (loop [last-char nil\n           acc (list)\n           [curr & rest-items :as item] items]\n      (if (empty? item)\n        (reverse acc)\n        (if (= curr last-char)\n          (recur last-char acc rest-items)\n          (recur curr (conj acc curr) rest-items))))))", "user": "55bbfd60e4b01b9910ae29ed"}, {"problem": 30, "code": "(comp (partial mapcat distinct) (partial partition-by identity))", "user": "4f2861eee4b0d6649770a017"}, {"problem": 30, "code": "(fn [x] \n  (map \n   last \n   (filter \n    #(not= (first %) (last %)) \n    (map \n     list \n     (cons nil x) \n     x))))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 30, "code": "(fn [s] \n  (loop [xs (seq s) res []]\n    (let [cur (first xs)]\n      (if (nil? cur)\n        res\n        (recur \n          (drop-while #(= cur %) (rest xs))\n          (conj res cur))))))", "user": "55bbd179e4b01b9910ae29eb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55b45825e4b01b9910ae297c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "55962e92e4b0c79f6e1db976"}, {"problem": 30, "code": "(fn [rcd]\n  (reduce \n    #(if (not= (last %1) %2)\n       (conj %1 %2)\n       %1)\n    [] rcd))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 30, "code": "#(loop [x (rest %)\n         tmp (first %)\n         result []]\n    (cond\n     (empty? x) (conj result tmp)\n     (= tmp (first x)) (recur (rest x) tmp result)\n     (not= tmp (first x)) (recur (rest x) (first x) (conj result tmp))))", "user": "55b3c03ee4b01b9910ae2975"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 30, "code": "(fn compress\n  [collection]\n  \"Removes any immediate duplicates in a collection.\n  Does this by partitioning a sequence by the identity of the elements,\n  then returns a new sequence containing the first elements in each subcollection,\n  thus removing any duplicates or \\\"compressing\\\" the given collection\"\n  (map first (partition-by identity collection)))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "551d8796e4b07993ea3788ec"}, {"problem": 30, "code": "(fn [x]\n  (map first(partition-by identity x)))", "user": "5592c56ee4b0c79f6e1db934"}, {"problem": 30, "code": "(fn [coll] \n  (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] coll))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55b1b67ce4b0da326a65cf6f"}, {"problem": 30, "code": "#(->> % (seq) (partition-by identity) (mapcat distinct))", "user": "50978ca4e4b00ad8bab4e966"}, {"problem": 30, "code": ";(fn compress [xs]\n;  (if\n;    (<= (count xs) 1)\n;    (seq xs)\n;    (if\n;      (= (first xs) (second xs))\n;      (compress (rest xs))\n;      (cons (first xs) (compress (rest xs)) ) )))\n\n#(map first (partition-by identity %))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "55bc2322e4b01b9910ae29f0"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [a x] \n            (cond \n             (nil? (last a)) (conj a x)\n             (not= (last a) x) (conj a x)\n             :else a))\n  []\n  (seq coll)))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 30, "code": "(fn my-compress  \n  [l]\n  (cond\n    (empty? l) '()\n    (= (first l) (second l)) (my-compress (rest l))\n    :else (conj (my-compress (rest l)) (first l))))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 30, "code": "(fn dedup [s]\n  (if (< (count s) 2)\n    s\n    (if (= (first s) (second s))\n      (dedup (rest s))\n      (conj (dedup (rest s)) (first s)))))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55bef38fe4b01b9910ae2a0e"}, {"problem": 30, "code": "#(reduce\n   (fn [f s]\n     (if (= (last f) s)\n       f\n       (conj f s))) [] (into [] %))", "user": "55c37594e4b0e31453f64989"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "55c3149de4b0e31453f64987"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55a31e3fe4b0acc240e31531"}, {"problem": 30, "code": "(fn [x] (loop [l x, r '()] (if (empty? l) (reverse r) (recur (rest l) (if (= (first l) (first (rest l))) r (conj r (first l)))))))", "user": "55bb3f89e4b01b9910ae29e2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55c1eb52e4b0e31453f64970"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "517e9526e4b09104ecebe7e2"}, {"problem": 30, "code": "(fn deduplicate [x]\n  (if-not (> (count x) 1)\n    (list (first x))\n    (if (= (first x) (second x)) \n        (deduplicate (rest x))\n        (conj (deduplicate (rest x)) (first x))\n    )\n  )\n)", "user": "55c387e4e4b0e31453f6498b"}, {"problem": 30, "code": "(fn compr [xs]\n  (if (empty? xs)\n    ()\n    (let [x (first xs)\n          ys (compr (rest xs))]\n      (if (not= x (first ys))\n        (cons x ys)\n        ys))))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 30, "code": "(fn [l](reverse (reduce #(if \n   (= (first %1) %2)\n    %1\n   (cons %2 %1))\n() l)))", "user": "55bedd93e4b01b9910ae2a0d"}, {"problem": 30, "code": "(partial reduce\n   (fn\n     [acc item]\n     (if (= (last acc) item)\n       acc\n       (conj acc item)))\n   [])", "user": "55c66d3de4b0e31453f649c1"}, {"problem": 30, "code": "(fn [x]\n   (reduce (fn [s c]\n             (if (= c (last s))\n               s\n               (conj s c)))\n           []\n           x))", "user": "55c652dde4b0e31453f649bd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55c4e548e4b0e31453f649a8"}, {"problem": 30, "code": "(fn [coll]\n  (reduce #(if (= %2 (first %))\n             %\n             (cons %2 %)) (empty coll) (reverse coll)))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn [a b]\n            (if (= b (last a))\n              a\n              (conj a b)))\n          []\n          xs))", "user": "5512cd55e4b055c2f668d4ba"}, {"problem": 30, "code": "(fn [xs]\n  (loop [items xs\n         result '()\n         last nil]\n    (if (empty? items)\n      result\n      (recur (rest items)\n             (if (= last (first items))\n               result\n               (concat result (vector (first items))))\n             (first items)))))", "user": "55c2b95de4b0e31453f64980"}, {"problem": 30, "code": "(fn compress [s]\n  (reduce (fn [res in] (if (= (last res) in)\n                         res\n                         (conj res in))) [] s))", "user": "55c734a5e4b0e31453f649cb"}, {"problem": 30, "code": "(fn makeunique [data]\n  (cond\n    (string? data) (loop [[fst & tail :as word] (seq (char-array data))\n                          acc [fst]\n                          prev fst]\n                     (if (empty? word)\n                       acc\n                       (if (or (= fst (first tail))\n                               (= fst prev)\n                            )\n                         (recur (rest tail) acc prev)\n                         (recur tail (conj acc fst) prev)\n                        )\n                      )\n                    )\n    (or (vector? data)\n        (list? data)\n     )             (loop [[fst & tail :as data] data\n                          acc []\n                          prev (last acc)]\n                     (if (empty? data)\n                       acc\n                       (if (or (= fst (first tail))\n                               (= fst prev)\n                           )\n                         (recur (rest tail) (conj acc fst) prev)\n                         (recur tail (conj acc fst) prev)\n                        )\n                      )\n                    )\n   )\n)", "user": "55c461d3e4b0e31453f64999"}, {"problem": 30, "code": "(fn compress [col]\n  (reduce\n    (fn [a b]\n      (if (= (last a) b)\n        a\n        (concat a (list b))\n        )\n      )\n    (list)\n    col\n    )\n  )", "user": "55bb7546e4b01b9910ae29e7"}, {"problem": 30, "code": "(fn [coll] (reverse (reduce (fn [s e] (if (not= (first s) e) (conj s e) s)) '() (seq coll))))", "user": "553f70cae4b0a04f792994f8"}, {"problem": 30, "code": "reduce (fn [coll e] (prn coll e) (if (not= (last coll) e) (concat coll (list e)) coll)) '()", "user": "559d3d22e4b0ec2b359424da"}, {"problem": 30, "code": "(fn [s] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "user": "53fc63dce4b0de5c4184859f"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "55c423e1e4b0e31453f64994"}, {"problem": 30, "code": "#(seq (reduce \n          (fn [out item] \n            (if (not= (last out) item)\n              (conj out item)\n              out))\n          [] \n          (seq %)))", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 30, "code": "(fn my-compress [coll]\n  (cond\n   (<= (count coll) 1) coll\n       :else (if (= (first coll) (second coll))\n               (my-compress (rest coll))\n               (conj (my-compress (rest coll)) (first coll)))))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 30, "code": "(fn [inputStr] \n    (loop [outputStr [] inpStr inputStr]\n      (if(empty? inpStr)\n        outputStr\n      (recur (if(= (last outputStr) (first inpStr))\n              outputStr\n              (conj outputStr (first inpStr)))\n             (rest inpStr)\n      )\n      )\n      ))", "user": "51fea7d7e4b0f1313d468a74"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "55b8d186e4b01b9910ae29ba"}, {"problem": 30, "code": "#((fn [ret x]\n                   (if (next x)\n                     (if (= (last ret) (first x))\n                       (recur ret (next x))\n                       (recur (conj ret (first x)) (next x)))\n                     (if (= (last ret) (first x))\n                       ret\n                       (conj ret (first x)))))\n                 [] (seq %))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5586f418e4b059ccff29b1de"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "553093bee4b076ab5578f817"}, {"problem": 30, "code": "(fn [s]\r\n  (loop [[f & r] s\r\n         final []]\r\n  (if (empty? r)\r\n    (if (= f (last final))\r\n        final\r\n        (conj final f))\r\n    (recur r (if (= f (last final))\r\n        final\r\n        (conj final f))))))", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 30, "code": "(fn rem-dup [col] \n  (reduce (fn [new-col x]\n          (if (not= (last new-col) x )\n            (conj new-col x)\n            new-col)) [] col))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55b39523e4b01b9910ae2973"}, {"problem": 30, "code": "#(map last (partition-by identity %))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 30, "code": "#(reverse (reduce (fn [carry item] (if (= (first carry) item) carry (conj carry item))) '() %))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 30, "code": "; #(map first (partition-by identity %))\n(fn [coll]\n  (map first (partition-by identity coll)))", "user": "55b7f263e4b01b9910ae29b4"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "55cae949e4b0e31453f649fe"}, {"problem": 30, "code": "#(loop [acc [] lst %]\n   (if (empty? lst) acc\n     (recur (if (= (last acc) (first lst)) acc (conj acc (first lst))) (rest lst))))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55cdd76ae4b0e31453f64a20"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "55ca4273e4b0e31453f649f9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 30, "code": "(fn [s] (reduce (fn [r i] (if (= i (last r)) r (concat r (list i)))) (list) s))", "user": "52f23d85e4b05e3f0be25ef6"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "55cf666fe4b0e31453f64a2e"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "4eb171d7535d7eef30807340"}, {"problem": 30, "code": "#(->> %1 (partition-by identity) (map first))", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 30, "code": "(letfn [(remove-seq-dupes [input]\n           (cond\n             (empty? input) input\n             (= (first input)\n                (second input)) (recur (rest input))\n                :else (cons (first input)\n                            (remove-seq-dupes (rest input)))))]\n  #(remove-seq-dupes %))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 30, "code": "#(loop [result '()\n       arg %]\n   (cond (empty? arg) (reverse result)\n         :else (if (= (first arg) (second arg))\n           (recur result (rest arg))\n           (recur (cons (first arg) result) (rest arg)))))", "user": "559067ace4b0277789237670"}, {"problem": 30, "code": "(fn dedup [x]\n  (loop [x   x \n         acc '()]\n    (if-let [r (next x)]\n      (if (= (first r) (first x)) \n        (recur r acc) \n        (recur r (cons (first x) acc)))\n      (reverse (cons (first x) acc)))))", "user": "55bb6a19e4b01b9910ae29e5"}, {"problem": 30, "code": "reduce \n(fn [acc elem] \n         (if (= (last acc) elem) \n           acc \n           (conj acc elem))) \n[]", "user": "55c7c4dfe4b0e31453f649d7"}, {"problem": 30, "code": "(fn\n  [s]\n  (map first (partition-by identity s)))", "user": "556e3b73e4b09a3098a52514"}, {"problem": 30, "code": "(fn compr-seq\n  [coll]\n  (loop [f (first coll)\n         r (rest coll)\n         s (first r)\n         new (concat (empty coll) [f])]\n    (if s\n      (if (= f s)\n        (recur s (rest r) (first r) new)\n        (recur s (rest r) (first r) (concat new [s])))\n      new)\n    ))", "user": "55bd87ede4b01b9910ae29fe"}, {"problem": 30, "code": "(fn compress [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (compress r)\n      (cons f (compress r)))))", "user": "54eb22a0e4b024c67c0cf845"}, {"problem": 30, "code": "(comp reverse (fn [coll] (reduce #(if (= (first %) %2) % (cons %2 %)) () coll)))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2)\n          %1\n          (conj %1 %2))\n       []", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55ba33afe4b01b9910ae29cb"}, {"problem": 30, "code": "(fn [col] (reduce #(if (= (last %) %2) % (conj % %2)) [] (seq col)))", "user": "55773cbae4b05c286339e07f"}, {"problem": 30, "code": "(fn [s] (reduce (fn [a b] (if (= (last a) b)\n                     a\n                     (concat a [b])\n                     )) [] s))", "user": "55c5261ee4b0e31453f649ae"}, {"problem": 30, "code": "#(seq (reduce (fn [a b] (if (= (last a) b) (conj (pop a) b) (conj a b))) [] %))", "user": "55d1f231e4b0e31453f64a4e"}, {"problem": 30, "code": "(fn [values]\n  (loop [to-process values\n         result []]\n    (if (empty? to-process)\n      result\n      (recur \n       (rest to-process) \n       (if (= (first to-process) (last result))\n         result\n         (conj result (first to-process)))))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 30, "code": "(fn [xs]\n  (reduce #(if-not (= (last %1) %2)\n            (conj %1 %2)\n            %1)\n          []\n          xs))", "user": "5563b88be4b0c656e3ff17f5"}, {"problem": 30, "code": "#(reduce (fn [res one]\n          (if (= (last res) one)\n            res\n            (conj res one))) [] (vec %))", "user": "55d332f5e4b0e31453f64a5f"}, {"problem": 30, "code": "(fn [a]\n  (loop [result [] coll a]\n    (if (empty? coll)\n      result\n      (recur \n        (if (= (last result) (first coll))\n            result\n            (conj result (first coll))) \n        (rest coll)))))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 30, "code": "(fn [coll] (reduce #(if (= (last %) %2)\n                      %\n                      (conj % %2)) [] coll))", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5589a941e4b059ccff29b207"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "55d204abe4b0e31453f64a4f"}, {"problem": 30, "code": "reduce (fn [c v]\n         (if (= (peek c) v)\n           c\n           (conj c v))) []", "user": "54864662e4b0e286459a11b8"}, {"problem": 30, "code": ";; #(reverse (reduce (fn [acc x] (if (= (first acc) x) acc (cons x acc))) [] %))\n#(map first (partition-by identity %))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 30, "code": "(fn [coll] \n  (reverse (reduce #(if (= %2 (first %1))\n          \t\t\t  %1\n          \t\t\t  (cons %2 %1))\n                   ()\n                   coll)))", "user": "5561d2c2e4b0c656e3ff17cd"}, {"problem": 30, "code": "(fn [c]\n  (reduce\n   (fn [a b] (if (= (last a) b) a (conj a b))) \n   [] c))", "user": "55d50a38e4b0e31453f64a80"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55bd6734e4b01b9910ae29fd"}, {"problem": 30, "code": "reduce (fn [m e]\n         (if (not= e \n                   (last m))\n           (conj m e)\n           m))\n       []", "user": "55d8eed3e4b0e31453f64ac3"}, {"problem": 30, "code": "#(reverse\n    (reduce\n      (fn [col x]\n        (if (= x (first col))\n          col\n          (conj col x)))\n      '()\n      %))", "user": "5382b433e4b06839e8705ed7"}, {"problem": 30, "code": "#(reduce \n  (fn [a x] \n    (if (= (last a) x)\n      a\n      (conj a x)))\n  [] \n  %)", "user": "55d7d139e4b0e31453f64aaa"}, {"problem": 30, "code": "(fn [s]\n  (loop [s s out []]\n    (cond (empty? s) out\n          (= (first s) (last out)) (recur (rest s) out)\n          :else (recur (rest s) (conj out (first s))))))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 30, "code": "(fn dedup ([my-seq] (if (empty? my-seq) '() (dedup (first my-seq) (rest my-seq))))\n                 ([repeated my-seq] (cond (empty? my-seq) (list repeated)\n                                          (= repeated (first my-seq)) (dedup repeated (rest my-seq))\n                                          true (conj (dedup (first my-seq) (rest my-seq)) repeated))))", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55d9d7e3e4b0e31453f64acd"}, {"problem": 30, "code": "(fn [s]\n  (->> (seq s)\n       (partition-by identity)\n       (map first)))", "user": "55da1ebce4b0e31453f64ad2"}, {"problem": 30, "code": "#(loop [s (seq %) x \"\" r '()]\n     (if (empty? s)\n       (reverse r)\n       (let [a (first s)\n             b (rest s)]\n         (if (= x a)\n           (recur b a r)\n           (recur b a (conj r a))))))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55d045cde4b0e31453f64a38"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "553c136ae4b09218d5f45012"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 30, "code": "(fn [item] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) () item)))", "user": "55ba3666e4b01b9910ae29cc"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "52ca7711e4b071a8d36bd3e3"}, {"problem": 30, "code": "#((fn [f]\n  (if (char? (first f))\n    (apply str f)\n    f))\n  ((fn [c] \n    (reduce \n      (fn [x v]\n        (if (not= (last x) v) \n          (conj x v)\n          x))\n     [] c)) % ))", "user": "4f43894ee4b0d7d3c9f3fd21"}, {"problem": 30, "code": "#(reduce \n  (fn [r c] \n    (if (= (peek r) c)\n      r\n      (conj r c))) \n  [] %)", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 30, "code": "(fn [xs] (loop [result [] sequence xs]\n  (if (= (count sequence) 0)\n    result\n    (if (= (first sequence) (last result))\n      (recur result (rest sequence))\n      (recur (conj result (first sequence)) (rest sequence))\n    )\n  )))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 30, "code": "reduce (fn[a b](if (= (last a) b) a (conj a b))) []", "user": "55dab408e4b0e31453f64ad9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55d84919e4b0e31453f64ab0"}, {"problem": 30, "code": "(fn collect\n         ([coll] (collect (vector (first coll)) (rest coll)))\n         ([coll left]\n          (if (empty? left)\n            coll\n            (if (= (first left) (last coll))\n              (collect coll (rest left))\n              (collect (conj coll (first left)) (rest left))))))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "553bda0de4b09218d5f4500b"}, {"problem": 30, "code": "(fn cmprs [coll] \n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (cmprs r)\n      (cons f (cmprs r)))))", "user": "55dd0aebe4b050e68259b3bf"}, {"problem": 30, "code": "(fn [xs]\n  (->> (partition-by identity xs)\n       (map first)))", "user": "55d87324e4b0e31453f64ab4"}, {"problem": 30, "code": "(fn remove \n  [x]\n  ( reduce \n    ( fn [init,nex]\n      (if (= nex (last init)) init (conj init nex))\n    )\n    []\n    x\n  )\n)", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 30, "code": "(fn [s] \n  (map first \n       (filter #(not= \n                 (first %) \n                 (second %))\n               (partition-all \n                2 1 s))))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "55dc2ad1e4b050e68259b3ac"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "55d1a721e4b0e31453f64a47"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55ded9fde4b050e68259b3e7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 30, "code": "#(->\n  (reduce (fn [acc x] (if (= (first acc) x) acc (cons x acc))) '() %1)\n  reverse)", "user": "55e246c2e4b050e68259b431"}, {"problem": 30, "code": "#(loop [in % out '()]\n   (cond (empty? in)\n          (reverse out)\n         (= (first in) (first out))\n          (recur (rest in) out)\n         :else (recur\n                (rest in)\n                (conj out (first in)))))", "user": "55e26417e4b050e68259b433"}, {"problem": 30, "code": "(fn\n  [i]\n  (reduce #(if-not (= (last %1) %2)\n             (conj %1 %2)\n             %1)\n          [] i))", "user": "55db1696e4b0e31453f64ae1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55e1d34ae4b050e68259b421"}, {"problem": 30, "code": "#(->> %1 (partition-by identity) (map first))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55d93d24e4b0e31453f64ac6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55df3b11e4b050e68259b3ef"}, {"problem": 30, "code": "#(reduce\n  (fn [result next] \n    (if (= (last result) next) \n  result  \n(conj result next) \n  ))\n[] %\n)", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 30, "code": "(fn [s] (first (reduce (fn [[sq cur] x] (if (= cur x) [sq cur] [(conj sq x) x])) [[] nil] s)))", "user": "54a1f494e4b09f271ff37c52"}, {"problem": 30, "code": "(fn compress [s]\n  (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2) ) '() s)))", "user": "4dd5fdb0535d2dad7130b5c5"}, {"problem": 30, "code": "(fn compress [seq]\n    (let [n (count seq)]\n      (loop [i 0 l nil res '[]]\n        (if (= i n)\n          res\n          (let [cur (nth seq i)]\n            (recur\n              (+ i 1)\n              cur\n              (if (= l cur) res (conj res cur))))))))", "user": "53a68c5ae4b0ef122a8689c8"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 30, "code": "(fn [s] (reverse (reduce #(if-not (=  (first %1) %2 ) (conj %1 %2 ) %1) '() (seq s)) ))", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "54edfebbe4b024c67c0cf869"}, {"problem": 30, "code": "(fn [coll] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] coll))", "user": "54c94376e4b045293a27f665"}, {"problem": 30, "code": "(fn compress [s] \n  (reduce (fn [acc e]\n            (if (= (last acc) e)\n              acc\n              (conj acc e)))\n          []\n          s))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 30, "code": "(fn [sq]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] sq))", "user": "55e70e8de4b050e68259b490"}, {"problem": 30, "code": "(fn consuniq [l]\n  (if (empty? l)\n    l\n    (if (= (first l) (second l))\n      (consuniq (rest l))\n      (cons (first l) (consuniq (rest l))))))", "user": "55e4487ce4b050e68259b44c"}, {"problem": 30, "code": "#(reduce (fn [col e]\n            (if (= (last col) e)\n              col\n              (conj col e))\n            ) [] %)", "user": "55b0d315e4b002ce9d5cbc26"}, {"problem": 30, "code": "(fn ded\n  ([l] (reverse (ded l [] nil)))\n  ([l r prev]\n   (if (empty? l)\n     r\n     (if (= (first l) prev)\n       (recur (rest l) r prev)\n       (recur (rest l) (cons (first l) r) (first l))))))", "user": "55e87696e4b0121d4835fd93"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53959edde4b0b51d73faaed8"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [acc x]\n            (if (not= x (last acc))\n              (concat acc [x])\n              acc))\n          [(first coll)]\n          coll))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 30, "code": "(fn [arg]\n  (reverse (reduce\n            (fn [acc x]\n              (if (= x (first acc))\n                acc\n                (conj acc x)))\n            '()\n            (seq arg))))", "user": "55e2f502e4b050e68259b43c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55ea0784e4b0121d4835fda8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55ea0dc3e4b0121d4835fda9"}, {"problem": 30, "code": "(fn [input]\n (loop [in (rest input)\n         out [(first input)]]\n    (if (empty? in)\n      out\n      (let [x (first in) y (last out)]\n        (if (= x y)\n          (recur (rest in) out)\n          (recur (rest in) (conj out x))\n          )\n        )\n      ))\n  )", "user": "55e9842ae4b0121d4835fda1"}, {"problem": 30, "code": "(fn r [l] (if (empty? l) l (if (= (first l)(second l)) (r (rest l)) (conj (r (rest l)) (first l)))))", "user": "55ec1c4ce4b0121d4835fdc4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55ec04c4e4b0121d4835fdc1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 30, "code": "(fn compress-seq [coll]\n  \t(if-let [[f & r] (seq coll)]\n      (if (= f (first r))\n          (compress-seq r)\n          (cons f (compress-seq r)))))", "user": "55ec1048e4b0121d4835fdc3"}, {"problem": 30, "code": "#(reduce (fn [c v]\n           (if-not (= v (first c)) \n             (cons v c)\n             (identity c)))\n         () \n         (reverse %))", "user": "55ead489e4b0121d4835fdb6"}, {"problem": 30, "code": "(fn fn1 [x]\n    (if (empty? (rest x))\n        x\n        (if (= (first x) (first (rest x)))\n                (fn1 (rest x))\n                (concat (list (first x)) (fn1 (rest x)))\n        )\n    )\n)", "user": "55cde227e4b0e31453f64a22"}, {"problem": 30, "code": "(fn [xs] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] xs))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "55ecab96e4b0121d4835fdcb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55dbed2fe4b050e68259b3a6"}, {"problem": 30, "code": "(fn [s] (mapcat distinct (partition-by #(list %1) s)))", "user": "54290a64e4b01498b1a71b36"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55ed962ae4b0121d4835fddd"}, {"problem": 30, "code": "(fn [coll] (reduce (fn [newseq item] (if (= item (last newseq)) newseq (concat newseq (list item)))) '() coll))", "user": "55f014ebe4b06e875b46ce1b"}, {"problem": 30, "code": "#(reverse (reduce (fn [r x]\n           (if (= (first r) x)\n             r\n             (conj r x)))\n         ()\n         (seq %)))", "user": "55ecac8ee4b0121d4835fdcc"}, {"problem": 30, "code": "(fn [coll] (reverse (let [s (seq coll)]\n  (loop [left (drop-while #(= (first coll) %) s)\n         res (list (first coll))]\n    (println left res)\n    (if (empty? left)\n      res\n      (recur (drop-while #(= (first left) %) left)\n             (conj res (first left))))))))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 30, "code": ";#(map first (partition-by identity %))\n (fn callme [n]\n     (if(empty? n)\n      n\n      (if (= (first n) (second n))\n       (callme (rest n))\n       (cons (first n) (callme (rest n)))\n       )\n      )\n     )", "user": "55ed71dae4b0121d4835fdd9"}, {"problem": 30, "code": "; partition\n#(map first (partition-by identity %))\n\n; reduce\n; reduce #(if (= (last %) %2) % (conj % %2)) []\n\n; multi-arity\n; (fn comp\n;   ([x] (comp [] x))\n;   ([r x]\n;    (if (empty? x)\n;      (reverse (into () r))\n;      (if (= (last r) (first x))\n;        (comp r (rest x))\n;        (comp (conj r (first x)) (rest x))))))\n\n; cons + stack\n; (fn comp [x]\n;   (cond (empty? x) ()\n;         (= (first x) (second x)) (comp (rest x))\n;         :else (cons (first x) (comp (rest x)))))\n\n; loop/accumulator\n; (fn comp [x]\n;   (loop [r () x x]\n;     (cond (empty? x) (reverse r) \n;           (= (first x) (second x)) (recur r (rest x))\n;           :else (recur (cons (first x) r) (rest x)))))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 30, "code": "#(reduce (fn [container x] (if (not= (last container) x) (conj container x) container)) [] %)", "user": "55ef9c9de4b066087aa94537"}, {"problem": 30, "code": "(fn [original]\n (reduce (fn [compressed item]\n           (if (not (= item (last compressed)))\n             (conj compressed item)\n             compressed))\n         []\n         original))", "user": "55eaca20e4b0121d4835fdb4"}, {"problem": 30, "code": "#(reduce (fn [r c]\n         (if (not= (last r) c)\n           (conj r c)\n           r)) [] %)", "user": "55f27bf9e4b06e875b46ce45"}, {"problem": 30, "code": "(fn [n]\n  (map first (partition-by identity n)))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 30, "code": "reduce (fn [r x] (if (= (last r) x) r (conj r x)))\n        []", "user": "55e20451e4b050e68259b428"}, {"problem": 30, "code": "(fn compress [s]\n  (filter (complement nil?) (map #(when (not= %1 %2) %1) s (concat (rest s) '(\"\\0\"))))\n  )", "user": "55f06183e4b06e875b46ce23"}, {"problem": 30, "code": "(fn [s]\n   (let [res (loop [s (seq s)\n                    cs []]\n               (let [chr (first s)\n                     rst (rest s)]\n                 (if (empty? s)\n                   cs\n                   (if (= chr (last cs))\n                     (recur rst cs)\n                     (recur rst (conj cs chr))))))]\n     (if (string? s)\n       (apply str res)\n       res)))", "user": "52475451e4b05ef8e38e6362"}, {"problem": 30, "code": "(fn [input]\n  (reduce (fn [c e]\n\t        (if (or (empty? c) (not= e (last c)))\n              (conj c e)\n              c)) [] input))", "user": "500e6ddee4b04a05d36fcc06"}, {"problem": 30, "code": ";;(fn de-dup [v]\n;;  (let [[x & xs] v]\n;;    (if (empty? xs) v\n;;      (if (= x (first xs)) (de-dup (cons x (rest xs)))\n;;        (cons x (de-dup xs))))))\n\n#(mapcat distinct (partition-by identity %))", "user": "55e1fc42e4b050e68259b424"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55f2fdc3e4b06e875b46ce51"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "526c669be4b03e8d9a4a728f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55912230e4b027778923767a"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 30, "code": "(fn [coll]\n    (loop [acc (vector(first coll)) curr (first coll) res (rest coll)]\n    (if (= [] res)\n      acc\n      (if (= curr (first res))\n        (recur acc curr (rest res))\n        (recur (conj acc (first res)) (first res) (rest res))))))", "user": "5080d6e3e4b01a93d3f38e4b"}, {"problem": 30, "code": "(fn [x]\n             (loop [arr x rets []]\n               (if (not arr)\n                 rets\n                 (if (= (last rets) (first arr))\n                        (recur (next arr) rets)\n                        (recur (next arr) (conj rets (first arr)))))))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "55f5625de4b06e875b46ce86"}, {"problem": 30, "code": "(fn dedup [string]\n(reduce #(if (= %2 (last %1))\n  %1\n  (conj %1 %2)) [] string))", "user": "55a161d1e4b0acc240e31511"}, {"problem": 30, "code": "(fn nub [coll]\n  (if \n    (= coll '()) \n    '()\n    (let \n      [f (first coll)\n       r (rest coll)\n       n (nub r)]\n      (cond\n        (= coll '())    '()\n        (= (first n) f) n\n        :else           (cons f n)\n      )\n    )\n  )\n)", "user": "55f5c118e4b06e875b46ce8e"}, {"problem": 30, "code": "#(loop [coll1 %\n        coll2 '()]\n   (if (empty? coll1)\n     (reverse coll2)\n     (recur (rest coll1)\n            (if (= (first coll1) (second coll1))\n              coll2\n              (conj coll2 (first coll1))))))", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 30, "code": "(fn compress [x] (reduce #(if (= (peek %1) %2) %1 (conj %1 %2)) [] x))", "user": "55e5c852e4b050e68259b474"}, {"problem": 30, "code": "reduce #(if\n          (= (last (seq %1)) %2)\n          %1\n          (conj %1 %2)) []", "user": "55df5feae4b050e68259b3f1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55f4ef68e4b06e875b46ce82"}, {"problem": 30, "code": "(fn [seq]\n  (map first (partition-by identity seq)))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 30, "code": "(fn compress [xs]\n  (if (empty? xs)\n    xs\n    (let [x (first xs)]\n      (cons x (drop-while (partial = x)\n                          (compress (rest xs)))))))", "user": "524e79c1e4b0541d1855b7e0"}, {"problem": 30, "code": "#(reduce (fn [acc i] (if (= i (last acc)) acc (conj acc i))) [] (seq %))", "user": "558fec41e4b0277789237666"}, {"problem": 30, "code": "(fn olo\n  ([ax](olo ax []))\n  ([rx acc]\n   (reduce (fn[a b](if (= (last a) b) a (conj a b))) acc rx)))", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 30, "code": "#(reverse\n  (reduce\n    (fn [[a :as acc] x]\n      (if (= a x) acc (cons x acc))) '() %))", "user": "55f7e056e4b06e875b46ceb4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55577fcce4b0deb715856e24"}, {"problem": 30, "code": "(fn dedup [s]\n  (loop [acc [] items s]\n    (if (seq items)\n      (if (= (last acc) (first items)) \n        (recur acc (rest items))\n        (recur (conj acc (first items)) (rest items))\n        \n        )\n      acc\n      )\n    \n    )\n  \n  )", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55f9c245e4b03cbcff9738ca"}, {"problem": 30, "code": "(fn compr [sq]\n  (loop [acc [], sqin sq]\n    (cond\n      (empty? sqin) acc\n      (= (last acc) (first sqin)) (recur acc (rest sqin) )\n      :else (recur (conj acc (first sqin)) (rest sqin) )\n    )\n  )\n)", "user": "55f80372e4b06e875b46ceb9"}, {"problem": 30, "code": "(fn [xs]\n  (seq\n    (loop [xs xs acc [] prev nil]\n      (if (seq xs)\n        (recur (rest xs) \n             (if (= prev (first xs))\n                acc\n                (conj acc (first xs)))\n             (first xs))\n        acc))))", "user": "55f90d76e4b03cbcff9738bd"}, {"problem": 30, "code": "reduce \n #(if(not= (last %1) %2)(conj %1 %2)(identity %1)) \n []", "user": "55c6fd60e4b0e31453f649c9"}, {"problem": 30, "code": "(fn prob30 [col]\n  (loop [col col\n         acc []]\n    (if (empty? col)\n      acc\n      (recur\n       (rest col)\n       (if (not (= (last acc) (first col)))\n         (conj acc (first col))\n         acc\n         )))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 30, "code": "(fn compress-seq\n  [coll]\n  (loop [cur (first coll)\n         coll' (next coll)\n         res (vector)]\n    (cond (nil? cur) res\n          (= cur (first coll')) (recur cur (next coll') res)\n          :else (recur (first coll') (next coll') (conj res cur)))))", "user": "55b42706e4b01b9910ae297b"}, {"problem": 30, "code": "(fn [coll]\n  (loop [c coll\n         r []]\n    (println c)\n    (if (empty? c)\n      r\n      (recur (rest c)\n             (if (= (first c) (last r))\n               r\n               (conj r (first c)))))))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55eb6352e4b0121d4835fdba"}, {"problem": 30, "code": "(fn remove-dups [xs] \n  (let [f (first xs), s (next xs)]\n    (concat \n      (when (not= f (first s))\n        [f])\n      (when (seq s)\n        (remove-dups s)))))", "user": "55ecaee4e4b0121d4835fdcd"}, {"problem": 30, "code": "(fn my-compres [s]\n  (when-let [[a & b] (seq s)]\n    (if (= a (first b))\n      (my-compres b)\n      (cons a (my-compres b)))))", "user": "55f7ebeae4b06e875b46ceb7"}, {"problem": 30, "code": "(fn [c]\n  (seq (map first (partition-by identity c))))", "user": "55fbf6cae4b0f488688e066c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55f8180fe4b06e875b46ceba"}, {"problem": 30, "code": "#(let [incoming %1, n (range (count incoming))]\n   (for [x n :when (not=\n                    (get incoming x) (get incoming (+ x 1)))\n         ]\n     (get incoming x)\n     )\n )", "user": "55efc44ee4b066087aa9453e"}, {"problem": 30, "code": "(fn [c] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] c))", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 30, "code": "(fn [text]\n  (loop [ [c & rest] (seq text), result [] ]\n    (cond\n      (nil? c)\n        result\n      (= (last result) c)\n        (recur rest, result)\n      :else\n        (recur rest, (conj result c))\n      )\n    )\n  )", "user": "558ee1c9e4b0277789237659"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55fa3454e4b03cbcff9738ce"}, {"problem": 30, "code": "(fn [coll]\n  (->>\n    (seq coll)\n    (reduce\n      (fn s [[acc pred] e]\n        (if (pred e)\n          [(conj acc e) (fn [x] (not= e x))]\n          [acc pred]))\n      [[] identity])\n    first))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 30, "code": "(fn [coll]\n  (reverse\n   (loop [remaining coll, accum nil]\n     (cond \n      (empty? remaining) accum\n      :else\n      (recur (rest remaining)\n             (if (= (first remaining) (first accum))\n               accum\n               (cons (first remaining) accum)))))))", "user": "55f6e7ece4b06e875b46ce9e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55e06f82e4b050e68259b40d"}, {"problem": 30, "code": "(fn compress [xs]\n  (when (seq xs)\n  (let [x (first xs)]\n    (conj (compress (drop-while #(= x %) (rest xs))) x))))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 30, "code": "#(reduce (fn [s x] (if (= x (peek s)) s (conj s x))) [] %)", "user": "50746e23e4b054001656acd1"}, {"problem": 30, "code": "(fn [coll] (remove nil? (map #(when (or (nil? (second %)) (not (= (first %) (second %)))) (first %)) (partition-all 2 1 coll))))", "user": "55af3e6be4b03311e7b732c7"}, {"problem": 30, "code": "#(reduce (fn [a v] (if (= (last a) v) a (concat a [v]))) (cons '() (seq %)))", "user": "55fc8f1fe4b0f488688e0675"}, {"problem": 30, "code": "(fn [s] (reduce (fn [a e] (if (= e (last a)) a (conj a e))) [] s))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 30, "code": "reduce (fn [acc x]\n         (if (= (last acc) x)\n           acc\n           (conj acc x))) []", "user": "55fc1f05e4b0f488688e066f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54bdcde5e4b0ed20f4ff6ee5"}, {"problem": 30, "code": "(fn [seq] (map first (partition-by identity seq)))", "user": "55fb41a6e4b0f488688e065f"}, {"problem": 30, "code": "(fn [coll] (let [slime-pairs (remove #(apply = %) (partition 2 1 coll))]\n             (concat (map first (butlast slime-pairs)) (last slime-pairs))))", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 30, "code": "(fn [ls]\n  (reduce (fn [acc n]\n            (if (= n (last acc))\n              acc\n              (conj acc n))) [] ls))", "user": "55f43228e4b06e875b46ce67"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 30, "code": "#(for [g (partition-by identity %)] (first g))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 30, "code": "(fn [xs] \n             (reduce (fn [acc e] \n                      (let [last-el (first (reverse acc))]\n               (if (= last-el e) acc (conj acc e) ))) \n                    [] \n                    xs ))", "user": "55edc088e4b0121d4835fde0"}, {"problem": 30, "code": "(fn compress\n  [s]\n  (map first (partition-by identity s)))", "user": "55fb04e0e4b0f488688e0657"}, {"problem": 30, "code": "reduce (fn [s v] (if (= (last s) v) s (conj s v))) []", "user": "55f1d5dfe4b06e875b46ce38"}, {"problem": 30, "code": "(fn rdup [c] (if (seq c)\n                 (if (= (first c) (second c))\n                   (rdup (next c))\n                   (cons (first c) (rdup (next c)))\n                   )\n                 c))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "55ef2f27e4b066087aa94532"}, {"problem": 30, "code": "(fn no-repeats [s]\n  (loop [s s\n         acc []]\n    (if (empty? s)\n      acc\n      (let [same? (= (last acc)\n                     (first s))]\n        (recur\n         (rest s)\n         (if same? acc\n           (conj acc (first s))))))))", "user": "55ee62dde4b0121d4835fdeb"}, {"problem": 30, "code": "(fn [s]\n  (reduce \n    (fn [xs x]\n      (if (= (last xs) x)\n        xs\n        (conj xs x)))\n\t[]\n    s))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 30, "code": "(fn [s]\n  (loop [s s\n         p nil\n         r []]\n    (if (empty? s)\n      r\n      (if (= p (first s))\n        (recur (rest s) (first s) r)\n        (recur (rest s) (first s) (conj r (first s)))))))", "user": "55fe997be4b00f4cabc57653"}, {"problem": 30, "code": "(fn filter-dup [input]\n  (loop [in input\n         out []]\n    (cond \n      (empty? in) out\n      (= (last out) (first in)) (recur (rest in) out)\n       :else (recur (rest in) (conj out (first in))))))", "user": "560151b5e4b04bb52996e185"}, {"problem": 30, "code": "(fn\n  [inputList]\n  (loop\n    [workList (seq inputList)\n     outputList []\n     prevElem nil]\n    (if (empty? workList)\n      (seq (concat outputList (list prevElem)))\n      (recur\n        (rest workList)\n        (concat outputList (when (and (not= prevElem (first workList)) (not (nil? prevElem))) (list prevElem)))\n        (first workList)))))", "user": "55f9b634e4b03cbcff9738c9"}, {"problem": 30, "code": "(fn [input-array]\n    (reverse \n      (loop [input input-array\n             output []]\n        (println (str \"input: \" input \", output: \" output))\n        (if (empty? input)\n          output\n          (let [item (first input)\n                item-exists? (fn [] (= (first output) item))]\n            (if (item-exists?)\n              (recur (rest input) output)\n              (recur (rest input) (cons item output))))))))", "user": "53c6c9dfe4b00fb29b2212a1"}, {"problem": 30, "code": "(fn [n]\n  (loop [n    n\n         acc []]\n    (cond \n     (empty? n) acc\n     (= (first n) (second n)) (recur (rest n) acc)\n     :else (recur (rest n) (conj acc (first n)))\n     )))", "user": "558053b1e4b05c286339e0e9"}, {"problem": 30, "code": "(fn unique [x] (loop [accu [] arg x] (cond (empty? arg) accu (= (last accu) (first arg)) (recur accu (rest arg)) :else (recur (conj accu (first arg)) (rest arg)))))", "user": "55f330dde4b06e875b46ce56"}, {"problem": 30, "code": "reduce #(if-not (= (last %1) %2)(conj %1 %2) %1) []", "user": "4e70eae1535d5021c1a89642"}, {"problem": 30, "code": "#(reduce (fn [buf v] \n           (if (= v (last buf)) buf\n                   (conj buf v))) [] (seq %))", "user": "560039cce4b04bb52996e162"}, {"problem": 30, "code": "(fn f [[h & t]]\n  (if h\n    (if (= h (first t))\n      (f t)\n      (cons h (f t)))))", "user": "530ec8d4e4b08068f379ecc2"}, {"problem": 30, "code": "(comp (partial map first)\n                     (partial partition-by identity))", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "559e6f42e4b08a52bd4f97d3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55101237e4b06e50f9beb181"}, {"problem": 30, "code": "(fn foo [s]\n  (loop [s s\n         n []]\n    (cond\n      (empty? s) n\n      (= 1 (count s)) (conj n (first s))\n      :else (if (= (first s) (second s))\n        (recur (rest s) n)\n        (recur (rest s) (conj n (first s)))))))", "user": "55f7c873e4b06e875b46ceb0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5602f5fce4b04bb52996e1ad"}, {"problem": 30, "code": "(fn my-uni [x]\n  (loop [y x z (empty x)]\n    (if (nil? y) z\n      (if (= (first y) ((comp first next) y))\n        (recur (next y) z)\n        (recur (next y) (concat z (list (first y))))\n        )\n                 )\n    )\n  )", "user": "55f95de6e4b03cbcff9738c1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 30, "code": "#(reduce concat (map distinct (partition-by identity %)))", "user": "5603d057e4b0c80df0ca264e"}, {"problem": 30, "code": "(fn[s](\n      if (string? s) (distinct s)\n        (keep identity (conj\n                                 (map-indexed \n                                   (fn[idx itm](if(not= itm (nth s idx)) itm ))\n                                   (rest s)\n                                 )\n                                 (first s)\n                               )\n        )\n        \n    ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "55fbcbd1e4b0f488688e0669"}, {"problem": 30, "code": "(fn foo [s]\n  (let [a (first s)\n        b (first (rest s))]\n    (if (empty? s) (empty s)\n    (cons a (foo (drop-while (partial = a) s))))))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "55f081bbe4b06e875b46ce25"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55fbcbb1e4b0f488688e0668"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56035afae4b04bb52996e1b9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56047160e4b0c80df0ca265d"}, {"problem": 30, "code": "(fn [coll] (reverse (reduce #(if (= %2 (first %1)) %1 (conj %1 %2)) '() (seq coll))))", "user": "56041883e4b0c80df0ca2655"}, {"problem": 30, "code": "(fn [in] (reverse (reduce (fn [s x]\n                              (if (= (first s) x)\n                                s\n                                (conj  s x)))\n                           '() in )))", "user": "5579d60ce4b05c286339e099"}, {"problem": 30, "code": "(comp #(reduce (fn[a b] (if (= b (last a)) a (conj a b))) [] %) seq)", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5410499de4b01498b1a719a6"}, {"problem": 30, "code": "(fn [x]\n  (let [xs (seq x)]\n    (list* (reduce (fn [r e]\n                     (if (= (last r) e)\n                       r\n                       (conj r e)))\n                   []\n                   x))))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 30, "code": "(fn compress-seq\n  [uncompressed]\n  (reverse (reduce\n    (fn [a b]\n      (if (not= (first a) b)\n        (conj a b)\n        a))\n    () uncompressed)))", "user": "55e1bb20e4b050e68259b41f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55fe5dfae4b00f4cabc57650"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55d68726e4b0e31453f64a99"}, {"problem": 30, "code": "(fn [l] \n  (reduce #(if \n             (= (last %1) %2) \n             %1\n             (concat %1 [%2])) \n          [(first l)]\n          (rest l)))", "user": "5606a4ace4b08b23635d3175"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56050dd9e4b08b23635d3160"}, {"problem": 30, "code": "#(map first (partition-by list %))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "544f732fe4b0e39780006994"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "55f47f54e4b06e875b46ce78"}, {"problem": 30, "code": "reduce \n\t#(if (= (last %1) %2) \n          %1 \n          (conj %1 %2))\n\t[]", "user": "55996253e4b031d6649c9baa"}, {"problem": 30, "code": "(fn [s]\n  (reverse (reduce (fn [cs ele]\n            (if (= (first cs) ele)\n                   cs\n                   (conj cs ele)))\n          '() s)))", "user": "56082adae4b046a4fc0ac008"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "56084e91e4b046a4fc0ac00f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5361d423e4b0243289761e49"}, {"problem": 30, "code": "(fn compress [sq]\n  (let [sq (reverse sq)]\n   (reduce (fn [acc it] (if (= (first acc) it) acc (cons it acc)))\n           (list (first sq)) (rest sq))))", "user": "560843dee4b046a4fc0ac00e"}, {"problem": 30, "code": "(fn [xs] (map first (partition-by identity xs)))", "user": "5601bb7ee4b04bb52996e195"}, {"problem": 30, "code": "#(apply concat (map distinct (partition-by identity %)))", "user": "560794bde4b08b23635d3182"}, {"problem": 30, "code": "(fn [col]\n  (loop [c col ret []]\n    (if (empty? c)\n      ret\n      (recur (rest c) (if (= (last ret) (first c)) ret (conj ret (first c)))))))", "user": "501fe6fae4b0cb6ebc0a42ef"}, {"problem": 30, "code": "(fn [l]\n  (for [[k v] (partition-by identity (into [] l))] k))", "user": "541df0b5e4b01498b1a71a86"}, {"problem": 30, "code": "#(loop [in (next %) out (list (first %))]\n   (if (empty? in) (reverse out)\n     (if (= (first in) (first out)) (recur (next in) out)\n       (recur (next in) (conj out (first in))))))", "user": "5605b5e9e4b08b23635d316e"}, {"problem": 30, "code": "reduce (fn [coll next] (if-not (= (last coll) next) (conj coll next) coll)) []", "user": "5609816ee4b0053d1b86c7e1"}, {"problem": 30, "code": "#(reduce\n  (fn [acc el]\n    (if (= (last acc) el)\n      acc\n      (conj acc el)))\n  []\n  %)", "user": "55048182e4b086ebe8a79c7c"}, {"problem": 30, "code": "reduce (fn [coll x] (if (= x (last coll)) coll (conj coll x))) []", "user": "55f3802be4b06e875b46ce5f"}, {"problem": 30, "code": "#(loop [[head & tail] % result []]\n   (if-not head\n     result\n     (recur (drop-while (partial = head) tail) (conj result head))))", "user": "5609866ee4b0053d1b86c7e3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "560434cfe4b0c80df0ca2658"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56011393e4b04bb52996e178"}, {"problem": 30, "code": "(fn [xs]\n  (reduce #(if-not (= (last %1) %2)\n             (conj %1 %2)\n             %1)\n          []\n          xs) )", "user": "56092a8de4b0053d1b86c7da"}, {"problem": 30, "code": "(fn [x] \n  (loop [l x acc []]\n    (if (empty? l)\n      acc\n      (recur (rest l) (if (= (first l) (last acc)) acc (conj acc (first l))  )) \n     ) ;if\n  ) ;loop\n) ;fn", "user": "560768a0e4b08b23635d317f"}, {"problem": 30, "code": "(fn f [xs]\n  (cond (empty? xs) '()\n        (= (first xs) (first (rest xs))) (f (rest xs))\n        :else (cons (first xs) (f (rest xs)))))", "user": "55e3e7a8e4b050e68259b44a"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "55e2d527e4b050e68259b43a"}, {"problem": 30, "code": "(fn compress [s]\n  (let [f (first s)]\n    (if-not (= nil (next s))\n      (concat [f]\n              (loop [r (next s)]\n                (if-not (= (first r) f)\n                  (compress r)\n                  (recur (next r)))))\n      [f])))", "user": "560ac5cae4b05f002753df09"}, {"problem": 30, "code": "reduce (fn [memo current]\n             (if (= (last memo) current)\n               memo\n               (conj memo current)\n               )\n             ) []", "user": "55d44af5e4b0e31453f64a74"}, {"problem": 30, "code": "(fn [l] \n  (loop [cl   []\n         more l\n         pe   nil]\n    (if (nil? more)\n      cl\n      (if (nil? pe)\n        (recur (conj cl (first more)) (next more) (first more))\n        (if (= pe (first more))\n          (recur cl (next more) pe)\n          (recur (conj cl (first more)) (next more) (first more)))))))", "user": "56051095e4b08b23635d3162"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (not= (last x) y) (conj x y) x)) [] %)", "user": "560aed59e4b05f002753df11"}, {"problem": 30, "code": "(fn [coll]\n  (if (< (count coll) 2) coll\n    (let [shifted (map vector coll (rest coll))\n          pairs-removed (filter #(not (= (first %) (second %))) shifted)\n         ]\n      (concat (map first pairs-removed) [(last (map second pairs-removed))])\n    )\n  )\n)", "user": "55e274b4e4b050e68259b436"}, {"problem": 30, "code": "reduce (fn [coll item]\n         (if (= (last coll) item)\n             coll\n             (conj coll item)))\n       []", "user": "560c2e7ce4b05f002753df2b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "560a7775e4b05f002753defa"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2)\n             %1\n             (conj %1 %2)) []", "user": "5606ea56e4b08b23635d317b"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) \n          (first i))\n          (recur (rest i) res)\n          (recur (rest i) (conj res (first i))\n      ))\n    )\n  )\n)", "user": "560d2a2be4b05f002753df35"}, {"problem": 30, "code": "#(let [folder (fn [[accum prev :as fullAccum] x]\n                  (if (or (empty? accum) (not= prev x))\n                      [(conj accum x) x] fullAccum))\n       [result bleh] (reduce folder [[] nil] %)]\n      result)", "user": "5602f72fe4b04bb52996e1ae"}, {"problem": 30, "code": "(fn [s] \n(reverse (reduce #(if (= %2 (first %1))  %1 (conj %1 %2)) '() (seq s)))\n)", "user": "500e3238e4b068062f6e8d8f"}, {"problem": 30, "code": ";#(loop [prev nil acc [] l %1]\n;   (if-let [x (first l)]\n;     (if (= prev x)\n;       (recur prev acc (rest l))\n;       (recur x (conj acc x) (rest l)))\n;     acc))\n\n#(map first (partition-by identity %))", "user": "560a7b46e4b05f002753defb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "560d2b53e4b05f002753df37"}, {"problem": 30, "code": "#(reduce \n  (fn [acc item] \n    (if (= item (last acc)) \n      acc\n      (conj acc item)))\n  [] (vec %))", "user": "5604bcf7e4b08b23635d315a"}, {"problem": 30, "code": "(fn fun [x]\n  (if (empty? x)\n    nil\n      (if (= (first x) (second x))\n      (fun (rest x))\n      (conj (fun (rest x)) (first x)))))", "user": "560ff632e4b05f002753df66"}, {"problem": 30, "code": "(fn remove_dups [coll]\n  (loop [remaining coll answer []]\n   (if \n     (empty? remaining)\n     answer\n     (recur (rest remaining)  (if (= (last answer) (first remaining)) answer (conj answer (first remaining)))))))", "user": "560fe558e4b05f002753df63"}, {"problem": 30, "code": "#(->>\n  %\n  (reduce\n   (fn [coll elem]\n     (if (= (first coll) elem)\n       coll\n       (conj coll elem)))\n   '())\n  reverse)", "user": "560ff209e4b05f002753df65"}, {"problem": 30, "code": "(fn [xs] (reduce #(if (not (= (peek %1) %2)) (conj %1 %2) %1) [] xs))", "user": "560e9a2de4b05f002753df52"}, {"problem": 30, "code": "(fn [s] (loop [s s c '()]\n          (if (empty? s)\n            (reverse c)\n            (recur (rest s) (if (= (first s) (first c)) c (conj c (first s)))))))", "user": "561047eae4b05f002753df6d"}, {"problem": 30, "code": "(fn [xs]\n  (reverse\n   (reduce\n    (fn [acc c]\n      (if (= c (first acc))\n        acc\n        (cons c acc)))\n    '()\n    xs)))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5505d137e4b086ebe8a79c8c"}, {"problem": 30, "code": "(fn compress [l]\n  (loop [l l\n         cl ()]\n    (cond\n      (= (count l) 1)\n        (reverse (conj cl (first l)))\n      (= (first l) (second l))\n        (recur (next l) cl)\n      :else\n        (recur (next l) (conj cl (first l))))))", "user": "56069006e4b08b23635d3174"}, {"problem": 30, "code": "(fn mycompress [s]\n  (map first (partition-by identity s))\n  \n)", "user": "55a65872e4b09e57187da299"}, {"problem": 30, "code": "(fn[s] (reduce (fn[r e](if(= e (last r)) r (conj r e))) [] (seq s)))", "user": "560d491ae4b05f002753df3b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "560dfa8de4b05f002753df46"}, {"problem": 30, "code": "#(reverse ((fn [coll]\n            (loop [coll coll\n                   acc (empty coll)]\n              (if (empty? coll)\n                acc\n                (recur (rest coll) (if (= (first acc) (first coll))\n                                     acc\n                                     (cons (first coll) acc)))))) %))", "user": "5613a96ae4b05f002753dfa4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 30, "code": "(fn [coll] \n  (loop [result [], to-go coll]\n    (let [fst (first to-go)]\n      (if (empty? to-go)\n        result\n        (recur (if (= fst (last result)) result (conj result fst)) \n               (rest to-go))\n    ))))", "user": "50523848e4b0a561d07d8f1a"}, {"problem": 30, "code": "(fn [x] \n  (reduce \n    (fn [lst item] \n      (if (= (last lst) item)\n        lst\n        (concat lst (list item))))\n   '() \n   x)\n )", "user": "55e01f4ee4b050e68259b406"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56014f55e4b04bb52996e184"}, {"problem": 30, "code": "(fn [xs] \n  (reduce #(if (= (last %) %2) % (conj % %2)) [] xs))", "user": "52aaabf7e4b0c58976d9ac68"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "560b483ee4b05f002753df16"}, {"problem": 30, "code": "(fn [x] (map first(partition-by identity x)))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5090c8e2e4b0742c82730ad9"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "555b43dfe4b0deb715856e4d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5617b1c0e4b06b1bb2182a13"}, {"problem": 30, "code": "reduce #(if-not (= (last %1) %2)(conj %1 %2) %1) []", "user": "56163cc1e4b06b1bb21829ff"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 30, "code": "(comp (partial map first)\n      (partial partition-by identity))", "user": "56180d83e4b06b1bb2182a18"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5617db88e4b06b1bb2182a16"}, {"problem": 30, "code": "(fn \n    [coll] \n    (reduce \n     #(if (= (last %1) %2) \n        %1 \n        (conj %1 %2))\n     []\n     coll) )", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 30, "code": "(fn [y] (remove nil? (map (fn [prev_item item] (if (not (= prev_item item)) item)) (into [nil] y) y)))", "user": "56152a26e4b05f002753dfc1"}, {"problem": 30, "code": "#(map first (partition-by identity %))\n\n;#(mapcat distinct (partition-by identity %))\n\n;#(loop [compressed-ls [(first %)] last-elem (first %)  ls (rest %)]\n;  (if (empty? ls) \n;    compressed-ls\n;    (let [current (first ls)]\n;      (if (= current last-elem)\n;        (recur compressed-ls last-elem (rest ls))\n;        (recur (conj compressed-ls current) current (rest ls))))))", "user": "52f3568fe4b05e3f0be25f0e"}, {"problem": 30, "code": "(fn comp-seq [n]\n  (map first (partition-by identity n)))", "user": "55e64c1ee4b050e68259b486"}, {"problem": 30, "code": "(fn [ss]\n  (filter (complement nil?) (map (fn [x y] (if (= x y) nil x)) ss (cons nil ss)))\n)", "user": "56195e57e4b053970a773af6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 30, "code": "(fn [xs]\n  \n(->>\n(partition-by identity xs)\n\n(map first)\n )\n\n  )", "user": "5619a4d0e4b053970a773afd"}, {"problem": 30, "code": "(fn foo [s]\n  (loop [rv '() tail s]\n    (if (empty? tail)\n      (reverse rv)\n    (if-not (= (first rv) (first tail))\n      (recur (conj rv (first tail)) (rest tail))\n      (recur rv (rest tail))))))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 30, "code": "reduce (fn [res item]\n         (if (= (last res) item)\n           res\n           (conj res item)))\n[]", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 30, "code": "(fn [s]\n  (loop [s s\n         prev nil\n         ret []]\n    (if (nil? s)\n      ret\n      (let [f (first s)\n            n (next s)]\n        (if (= prev (first s))\n          (recur n f ret)\n          (recur n f (conj ret f)))))))", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 30, "code": "(fn [coll]\n  (loop [r [] p nil [x & xs] (seq coll)]\n    (if (nil? x)\n      (seq r)\n      (if (= p x)\n        (recur r x xs)\n        (recur (conj r x) x xs)))))", "user": "53ab1ef6e4b047364c04444b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55e3924ae4b050e68259b445"}, {"problem": 30, "code": "(fn reduce-cons-dups [coll]\n  (reduce (fn conjure-different [coll el]\n            (if (= (last coll) el)\n              coll\n              (conj coll el))) \n          [] \n          coll))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 30, "code": "(fn cons-dup-seq\n  [aseq]\n  (reduce (fn [coll elem] (if (= (last coll) elem)\n                            coll (conj coll elem))) [(first aseq)] (rest aseq)))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) \n          %1 \n          (conj %1 %2))\n[]", "user": "560ae7e6e4b05f002753df0e"}, {"problem": 30, "code": "(fn [l]\n    (->> l\n         (cons nil)\n         (partition 2 1)\n         (filter #(apply not= %))\n         (map last)\n         )\n    )", "user": "52846deee4b0239c8a67adcf"}, {"problem": 30, "code": "(fn my-compress [coll]\n  (reduce\n    (fn [acc ele]\n      (if (= (last acc) ele)\n        acc\n        (conj acc ele)))\n    []\n    coll))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '()", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 30, "code": "(fn [x]\n  (let [s (seq x)]\n    (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [(first s)] (next s))))", "user": "5616f411e4b06b1bb2182a0a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56119b53e4b05f002753df81"}, {"problem": 30, "code": "(fn [coll] (reduce #(if (= (last %1) %2) %1 (conj %1 %2) ) '[] coll ))", "user": "56182af3e4b06b1bb2182a1b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "561ff621e4b064ca9f4b16d6"}, {"problem": 30, "code": "(fn  [col]\n  (mapcat set (#(partition-by identity %1) col)))", "user": "55fcaccfe4b0f488688e0679"}, {"problem": 30, "code": "(fn ddp [s]\n  (if (< (count s) 2) \n    s\n    (if (= (first s) (first (rest s)))\n      (ddp (cons (first s) (rest (rest s))))\n      (cons (first s) (ddp (rest s))))))", "user": "56205609e4b064ca9f4b16df"}, {"problem": 30, "code": "(fn [coll]\n  (loop [pivot coll\n         control (rest coll)\n         result []]\n        (cond\n          (empty? pivot) result\n          (= (first pivot) (first control)) (recur (rest pivot) (rest control) result)\n          :else (recur (rest pivot) (rest control) (conj result (first pivot))))))", "user": "54aede47e4b09f271ff37cfd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 30, "code": "(fn [l] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] l))", "user": "4f213e2ee4b0d66497709fcf"}, {"problem": 30, "code": "(fn vasya ([x] (vasya (empty x) x))\n          ([x y] (if (not (empty? y))\n                   (if (= (last x) (first y))\n                     (recur x (rest y))\n                     (recur (concat x (list (first y))) (rest y)))\n                   x)))", "user": "55cf0d0ee4b0e31453f64a2b"}, {"problem": 30, "code": "(fn [x]\n    (letfn [(g [a l x]\n              (let [fr (first x)\n                    rs (rest x)]\n\n              (if (seq x)\n                (if (= l fr)\n                  (recur a fr rs)\n                  (recur (conj a fr) fr rs))\n                a)))]\n      (g [] nil x)))", "user": "5578ba3ae4b05c286339e08c"}, {"problem": 30, "code": "(fn nodupes [[x & xs]] \n  (if (= x nil) ()\n    (if (= x (first xs))\n      (nodupes xs)\n      (cons x (nodupes xs)))))", "user": "56228d00e4b03f08ee9a9227"}, {"problem": 30, "code": "(fn [x]\n  (loop [xs x res []]\n    (if (empty? xs) res (recur (next xs)(if (and (not (empty? res))(= (first xs)(last res))) res (conj res (first xs)))))))", "user": "561e2b33e4b064ca9f4b16ba"}, {"problem": 30, "code": "reduce (fn [xs c] (if (not= (last xs) c) (conj xs c) xs)) []", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 30, "code": "(fn\n  [coll]\n  (loop [result []\n         more coll]\n    (if (empty? more)\n      result\n      (if (= (last result) (first more))\n        (recur result (rest more))\n        (recur (conj result (first more)) (rest more))))))", "user": "55f32f6fe4b06e875b46ce53"}, {"problem": 30, "code": "(fn rd [s]\n  (loop [a s, b '()]\n    (if (empty? a) \n      b\n      (recur (rest a) (if (= (first a) (last b))\n               b \n               (concat b (list (first a))))))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 30, "code": "(fn foo[coll] (mapcat #(list (first %)) (partition-by identity coll)))", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 30, "code": "(fn [input]\n  (loop [[x & xs] (into [] input) acc []]\n    (if xs\n      ( recur xs (if (= x (first xs)) acc (conj acc x)))\n      ( conj acc x ))))", "user": "561cb6cfe4b064ca9f4b169e"}, {"problem": 30, "code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 30, "code": "(fn [coll]\n  (loop [ret [] coll coll]\n    (if (empty? coll)\n      ret\n      (if (= (last ret) (first coll))\n        (recur ret (rest coll))\n        (recur (conj ret (first coll)) (rest coll))))))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 30, "code": "(fn [s]\n  (loop [s s\n         prev nil\n         acc '()]\n    (cond\n      (empty? s) acc\n      (not= (first s) prev) (recur (rest s) (first s) (concat acc (list (first s))))\n      :else (recur (rest s) prev acc))))", "user": "5600dccee4b04bb52996e175"}, {"problem": 30, "code": "(fn [x] (reduce (fn [r y]\n          (if  (= (last r) y)\n            r\n            (conj r y))) [] x))", "user": "56171eade4b06b1bb2182a0c"}, {"problem": 30, "code": "(fn [h]\n  (map first (partition-by identity h))\n  )", "user": "561eb82fe4b064ca9f4b16c7"}, {"problem": 30, "code": "#(loop [current []\n       latest nil\n       given %]\n  (if (< 0 (count given))\n    (if (not (= (first given) latest))\n      (recur (conj current (first given)) (first given) (rest given))\n      (recur current (first given) (rest given)))\n    current))", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 30, "code": "reduce (fn f[l x]\n  (if (= (last l) x)\n    l\n    (concat l (list x)))) ()", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 30, "code": "reduce (fn [r x] (if (= (last r) x) r (conj r x))) []", "user": "536829c8e4b0243289761e8b"}, {"problem": 30, "code": "#(if (empty? %)\n   %\n   (loop [rest-of-seq (rest %)\n          last-element (first %)\n          compressed [last-element]]\n     (if (empty? rest-of-seq)\n       compressed\n       (let [next-element (first rest-of-seq)]\n         (if (= next-element last-element)\n           (recur (rest rest-of-seq)\n                  last-element\n                  compressed)\n           (recur (rest rest-of-seq)\n                  next-element\n                  (conj compressed next-element)))))))", "user": "5595ffabe4b0c79f6e1db972"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "561bf12ce4b064ca9f4b168e"}, {"problem": 30, "code": "#(loop [i % r []] (if (nil? i) r (if (= (last r) (first i)) (recur (next i) r) (recur (next i) (conj r (first i))))))", "user": "5628cb07e4b00e49c7cb47ef"}, {"problem": 30, "code": "(fn [coll]\n  (->> coll\n       (partition-by identity)\n       (map first)))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "522a5bdde4b0590a43906cf8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 30, "code": "(fn [coll]\n  (reduce\n   (fn [x y]\n     (if (= (last x) y) x\n       (conj x y)))\n   [] coll))", "user": "562c15d3e4b058fa18c5a6d5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56282cdde4b00e49c7cb47e2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 30, "code": "(fn [coll] (#(concat (map first (butlast %)) (last %)) \n  (filter #(not= (first %) (second %)) (partition 2 1 coll)\n          )))", "user": "53b1db8ee4b047364c044495"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "562b57c7e4b058fa18c5a6cc"}, {"problem": 30, "code": "(fn [seq] (mapcat distinct (partition-by identity seq)))", "user": "53623eaee4b0243289761e4f"}, {"problem": 30, "code": "(fn [s] (cons (first s)(filter identity (map #(if (not= %1 %2) %2) s (rest s)))))", "user": "56102f50e4b05f002753df6b"}, {"problem": 30, "code": "(fn compress [s]\n  (cond\n    (= (second s) nil) s\n    (= (first s) (second s)) (compress (rest s))\n    :else (cons (first s) (compress (rest s)))))", "user": "562e05e0e4b0a45d2ff83023"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "562db4d1e4b0a45d2ff83021"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [a b] (if (= (last  a) b)\n              (seq a)\n              (seq (conj (vec a) b)))) '() s))", "user": "504f0c9ce4b0e7ad84dbc4b2"}, {"problem": 30, "code": "(let [ data  [3 6 8 8 7 7 8 8 9 9 0]]\n (fn [x] (map first (partition-by identity x)))\n  )", "user": "5610d39de4b05f002753df75"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 30, "code": "#(loop [sq %, p nil, r []] (if (empty? sq) r (if (= (first sq) p) (recur (rest sq) p r) (recur (rest sq) (first sq) (conj r (first sq))))))", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 30, "code": "#(loop [vals % res []] (if (empty? vals) res (recur (rest vals) ( if(= (first vals) (last res)) res (conj res (first vals))))))", "user": "5614ebc5e4b05f002753dfbc"}, {"problem": 30, "code": "#(mapcat set (partition-by identity %1))", "user": "5578f292e4b05c286339e08f"}, {"problem": 30, "code": "(fn remove-consec\n  [value]\n  (reduce \n   (fn [c _]\n     (if (= _ (last c))\n         c\n         (into c [_])))\n   []\n   value))", "user": "562e2c5ce4b0a45d2ff83024"}, {"problem": 30, "code": "(fn [x]  (map first (partition-by identity x)))", "user": "562e871ee4b0ab312c17ebba"}, {"problem": 30, "code": "(fn remove-duplicates\n  [input]\n  (let [partitions (partition-by identity input)]\n    (into [] (map first partitions))))", "user": "4fc524aae4b081705acca37e"}, {"problem": 30, "code": "#(map first (partition-by (set %) %))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 30, "code": "(fn [lst] (seq (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] lst)))", "user": "545c2d07e4b01be26fd7465c"}, {"problem": 30, "code": "(fn [coll]\n    (loop [c coll res []]\n       (if (empty? c)\n         res\n         (if (= (last res) (first c))\n           (recur (rest c) res)\n           (recur (rest c) (conj res (first c)))\n           ))))", "user": "562ab73ce4b00e49c7cb482e"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [res cur] (if (= (last res) cur)\n                          res\n                          (concat res (list cur))))\n          () coll))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 30, "code": "(fn [s]\n       (reduce (fn [c e]\n                 (if (not= e (last c))\n                   (conj c e)\n                   c))\n               [] s))", "user": "551e6526e4b030e6a24d00e8"}, {"problem": 30, "code": ";; do as a reduction \n;; do not use partition-by cheats\n\n(fn [li] (if (empty? li) nil\n  (reverse ((fn [acc rem]\n    (if (empty? rem) acc\n      (recur\n        (if (= (first acc)(first rem)) acc\n          (cons (first rem) acc))\n        (rest rem))))\n  (list (first li)) (rest li)))))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 30, "code": "(fn cmprs [[x & xs]]\n  (cond\n    (nil? x) []\n    (= x (first xs)) (cmprs xs)\n    :default (cons x (cmprs xs))))\n\n; This one failed on the second test:\n; #(distinct (concat %))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 30, "code": "reduce (fn [a ch]\n         (if (= (last a) ch) a (conj a ch)))\n         []", "user": "4f0366b0535dcb61093f6aa9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "562fb774e4b0ab312c17ebd9"}, {"problem": 30, "code": "(fn [ob]\n             (let [len (count ob)]\n               (loop [ret (if (string? ob) \"\" ()) i 0 bef nil]\n                 (if (= i len)\n                   (if (string? ob)\n                     ret\n                     (reverse ret))\n                   (let [item (nth ob i)]\n                     (if (= bef item)\n                       (recur ret (+ i 1) bef)\n                       (if (string? ob)\n                         (recur (str ret item) (+ i 1) item)\n                         (recur (conj ret item) (+ i 1) item))))))))", "user": "56305383e4b073c1cf7a9be6"}, {"problem": 30, "code": "#(seq (map first (partition-by identity %)))", "user": "561a060ee4b053970a773b01"}, {"problem": 30, "code": "(fn [x]\n  (loop [s [(first x)] i 1]\n    (if (= i (count x))\n      s\n      (if (= (nth x i) (nth x (dec i)))\n        (recur s (inc i))\n        (recur (conj s (nth x i)) (inc i))))))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 30, "code": "#(loop [a (seq %) c (count a) l '()]\n  (if (= c 0)\n    l\n    (if (= (nth a (- c 1)) (first l))\n      (recur a (dec c) l)\n      (recur a (dec c) (cons (nth a (- c 1)) l)))))", "user": "561a1af6e4b053970a773b02"}, {"problem": 30, "code": "(fn f [xs] (if (empty? (rest xs)) xs (if (= (first xs) (first (rest xs))) (f (rest xs)) (conj (f (rest xs)) (first xs)))))", "user": "560c31b4e4b05f002753df2d"}, {"problem": 30, "code": "(fn [col]\n  (reduce\n   #(if-not (= (last %1) %2)\n      (conj %1 %2) %1)\n       [] col))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 30, "code": ";(fn cmprs [coll]\n;  (when-let [[f & r] (seq coll)] \n;    (if (= f (first r)) \n;      (cmprs r) \n;      (cons f (cmprs r)))))\n\n#(map first (partition-by identity %))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 30, "code": "(fn compress-seq [s]\n  (loop [s s\n         acc []]\n    (if (empty? s) acc\n        (let [same? (= (last acc) (first s))]\n          (if same?\n            (recur (rest s) acc)\n            (recur (rest s) (conj acc (first s))))))))", "user": "5537c5b3e4b09218d5f44fd1"}, {"problem": 30, "code": "(fn [x]\n    (loop [stck (seq x) lst ()]\n      (if (empty? stck) (reverse lst)\n      \t(if (not= (first stck) (first lst)) (recur (rest stck) (conj lst (first stck)))\n          (recur (rest stck) (seq lst))))))", "user": "563130e4e4b0bfe05bf1178d"}, {"problem": 30, "code": "#(reduce (fn [t c] (if (= c (last t)) t (conj t c))) [] %)", "user": "558b41fce4b0277789237628"}, {"problem": 30, "code": "(fn [s]\n  (map first (partition-by identity s)))", "user": "56174d86e4b06b1bb2182a0e"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "user": "54995298e4b0b312c081ff8b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54534c83e4b0e397800069cd"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2)\n            %1\n            (conj %1 %2))\n            []", "user": "53483a32e4b084c2834f4a57"}, {"problem": 30, "code": "(fn [ss]\n((fn skip [v s l]\n  (let [f (first s)\n        r (rest s)]\n    (if (nil? f) (seq v) (if (= f l) (skip v r l) (skip (conj v f) r f)))\n  )\n) [] ss nil)\n)", "user": "562b1a7be4b058fa18c5a6cb"}, {"problem": 30, "code": "(fn [arg] (map first (partition-by identity arg )))", "user": "54df955ee4b024c67c0cf7af"}, {"problem": 30, "code": "(fn [coll]\n          (letfn [(comp-seq [coll]\n                    (if\n                      coll\n                      (let\n                        [f (first coll)\n                         r (next coll)]\n                        (if\n                          (not (= f (first r)))\n                          (cons f (comp-seq r))\n                          (comp-seq r)))))]\n            (comp-seq coll)))", "user": "5521248fe4b08d5046aa8a69"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 30, "code": "(fn mycompressor [s]\n  (if\n    (< (count s) 2)\n    s\n    (if\n      (= (first s) (first (rest s)))\n      (mycompressor (rest s))\n       (conj (mycompressor (rest s)) (first   s))\n    )\n  )\n)", "user": "563758e3e4b0bfe05bf117d5"}, {"problem": 30, "code": "(fn compress [coll]\n  (reverse (reduce #(if (= %2 (first %1)) %1 (cons %2 %1)) '() coll)))", "user": "5630fd6fe4b0bfe05bf1178b"}, {"problem": 30, "code": "(fn [y]\n    (loop [s [] d y]\n      (let [c (first d)] \n       (if (nil? c)\n        s\n        (recur (conj s c) (drop-while #(= c %) (rest d)))))))", "user": "546a65fce4b00cfc9eacc153"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "560dbf17e4b05f002753df44"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 30, "code": "#(for [x (partition-by identity %)] (first x))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 30, "code": "(fn remove-dup\n  ([l] (remove-dup l nil))\n  ([remaining lastSeen]\n    (if (empty? remaining) (list)\n      (if (= lastSeen (first remaining))\n        (remove-dup (rest remaining) lastSeen)\n        (cons (first remaining) (remove-dup (rest remaining) (first remaining)))\n      )\n    )\n  )\n)", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56388a0fe4b0bfe05bf117e7"}, {"problem": 30, "code": "reduce \n  #(if (= (last %1) %2)\n     %1\n     (conj %1 %2))\n  []", "user": "56366f73e4b0bfe05bf117cc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "563799f8e4b0bfe05bf117db"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56215c8ee4b03f08ee9a921a"}, {"problem": 30, "code": "(fn [c] (->> (partition 2 1 '(nil) c)\n              (map #(if (not= (first %)(last %)) (first %) ))\n              (filter #(not(nil? %)))\n          ))", "user": "54494159e4b032a45b8693d1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56399b7ee4b0bfe05bf117f5"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52824143e4b0757a1b171453"}, {"problem": 30, "code": "(fn cmp [x] (first (reduce (fn [[acc prev] y] (if (= prev y) [acc prev] [(concat acc (list y)) y] )) ['(), nil] x) ) )", "user": "563b559ee4b0bfe05bf1180d"}, {"problem": 30, "code": "(fn antidupe [x & [y]]\n   (if (= (first x) nil)\n     (if (= (type (first y)) Character)\n       (apply str y)\n       y)\n     (if-not y\n       (antidupe x [])\n       (if (= (first x) (last y))\n         (antidupe (rest x) y)\n         (antidupe (rest x) (conj y (first x)))\n         )\n       )\n     ))", "user": "5632abbee4b0bfe05bf117a7"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "user": "55c13e73e4b01b9910ae2a2f"}, {"problem": 30, "code": "(fn remdups [myseq]\n  \t(seq (reduce (fn [acc cur] \n              (if (=(last acc) cur)\n                acc\n                (conj acc cur))) [] myseq)))", "user": "563b5dc9e4b0bfe05bf1180f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 30, "code": "(fn compress [s]\n  (when-not (empty? s)\n    (let [t (compress (rest s))]\n      (if (= (first s) (first t))\n        t\n        (conj t (first s))))))", "user": "55664950e4b0c656e3ff1832"}, {"problem": 30, "code": "(fn undup [c] \n  (reduce (fn [c x]\n            (if (= (last c) x) c (conj c x))) [] c))", "user": "561e8b11e4b064ca9f4b16c0"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 30, "code": "#(conj ((fn compress [[head & tail] curr]\n  (if (nil? head)\n    '()\n    (if (= head curr)\n      (compress tail curr)\n      (conj (compress tail head) head))))\n  (seq %) (first(seq %))) (first (seq %)) )", "user": "56339e23e4b0bfe05bf117b1"}, {"problem": 30, "code": "(fn cmprs [l]\n  (reverse (reduce\n    (fn [xs x]\n      (if (= (first xs) x)\n          xs\n          (cons x xs)))\n    '()\n    (seq l))))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 30, "code": "reduce #(if (not= %2 (last %1)) (conj %1 %2) %1) []", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 30, "code": "(fn [in] (remove nil? ((fn [x] (reduce (fn [tmp val] (if (not (= (last tmp) val)) (conj tmp val) tmp)) []  x)) (seq in))))", "user": "563e7a33e4b0da801c4e466d"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "544e6b7fe4b0e39780006986"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn [t v] (if (= (last t) v) t\n                      (conj t v)) ) [(first xs)] (rest xs)))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "563ddefee4b0bfe05bf11857"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5604ae27e4b0c80df0ca2663"}, {"problem": 30, "code": "(fn [coll] (map first(partition-by identity coll)))", "user": "562f2985e4b0ab312c17ebc5"}, {"problem": 30, "code": "(fn [x]\n  (loop [o x\n         c []]\n    (if (empty? o)\n      (seq c)\n      (if (= (last c) (first o))\n        (recur (rest o) c)\n        (recur (rest o) (conj c (first o)))))))", "user": "563e022be4b0da801c4e4664"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 30, "code": "(fn compress [s]\n  (loop [[x & xs] s\n         ret []\n         prev nil]\n    (cond \n      (not x) ret\n      (= prev x) (recur xs ret prev)\n      :else (recur xs (conj ret x) x))))", "user": "5631040be4b0bfe05bf1178c"}, {"problem": 30, "code": "(fn compress-sequence [xs]\n  (reduce (fn --comp-seq [col el]\n(if (= (last col) el)\n     col\n     (conj col el))) [] xs)\n\n  \t)", "user": "56252effe4b00a550fc90294"}, {"problem": 30, "code": "(fn compress\n  [s]\n  (reduce (fn [result v]\n            (if (= v (last result))\n              result\n              (conj result v)))\n          [] s))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 30, "code": "(fn [x]\n  (map first (partition-by identity x)))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 30, "code": "(fn[coll] (mapcat set (partition-by identity coll)))", "user": "561d7246e4b064ca9f4b16b1"}, {"problem": 30, "code": "(fn compress\n  [input]\n  (map first (partition-by identity input)))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 30, "code": "(fn [xs] (reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) [] xs))", "user": "563b6a2ae4b0bfe05bf11812"}, {"problem": 30, "code": "#(reduce (fn [res x] (if (= (last res) x) res (conj res x))) [] %)", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "54cec2a9e4b018d918be98c1"}, {"problem": 30, "code": "(fn [x]\n  (loop [x x\n         o []]\n    (if (empty? x)\n      o\n      (recur (rest x)\n             (if (= (first x) (last o))\n               o\n               (conj o (first x)))))))", "user": "5642b939e4b08d4f616f5f1b"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "54d2159fe4b0e8a36923e5ed"}, {"problem": 30, "code": "(fn compress [xs]\n  ;; always fetch two elements\n  (if (empty? xs)\n    xs\n    (let [current (first xs)\n          next (second xs)]\n      (if (= current next)\n        ;; current and next element are the same so\n        ;; -> lets skip the current element\n        (compress (rest xs))\n        ;; current and next are not the same\n        ;; -> lets add it to the resulting seq\n        (cons current (lazy-seq (compress (rest xs))))))))", "user": "5641296de4b08d4f616f5ef4"}, {"problem": 30, "code": "#(seq \n  (reduce (fn [s t](if-not (= (last s) t) (conj s t) s)) '[] %))", "user": "5639e878e4b0bfe05bf117f7"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "5642e2e3e4b08d4f616f5f1d"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "505fdf63e4b08f2a82ad10b9"}, {"problem": 30, "code": "reduce (fn [acc it] (if (= (last acc) it) acc (conj acc it))) []", "user": "5391149ee4b0b51d73faaea0"}, {"problem": 30, "code": "#(->> %\n   (partition-by identity)\n   (map first))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 30, "code": "(fn re\n  [[x & tail]]\n  (into\n   (if (= x (first tail)) [] [x])\n   (if (empty? tail) [] (re tail))))", "user": "56451201e4b0284900eef600"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "564045a8e4b08d4f616f5edd"}, {"problem": 30, "code": "(fn clean [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (clean r) \n      (cons f (clean r)))))", "user": "563f0fdae4b08d4f616f5ece"}, {"problem": 30, "code": "(fn \n\tdedup \n\t[[a & xyz]] \n\t(if (nil? xyz) \n\t\t(if (nil? a) \n\t\t\t'()\n\t\t\t(list a)\n\t\t)\n\t\t(if (= a (first xyz)) \n\t\t\t(dedup xyz) \n\t\t\t(conj (dedup xyz) a)\n\t\t\t)\n\t\t)\n\t)", "user": "56449e4de4b0284900eef5f9"}, {"problem": 30, "code": "(fn [lst]\n  (map first (partition-by identity lst)))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 30, "code": "(partial reduce \n         #(if (= (last %1) %2) \n            %1 \n            (conj %1 %2))\n         [])", "user": "56442758e4b0018b46ad8c0a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "564583f0e4b0284900eef607"}, {"problem": 30, "code": "(fn remove-duplicated [s]\n  (cond\n    (empty? s) nil\n    (empty? (rest s)) s\n    (= (first s) (second s)) (remove-duplicated (rest s))\n    :else (cons (first s) (remove-duplicated (rest s)))\n    )\n  )", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 30, "code": "#(map first (filter (fn [[x y]] (not= x y)) (partition 2 1 [nil] %)))", "user": "56466fb1e4b0284900eef613"}, {"problem": 30, "code": "(fn [col] (map first  (filter #(not= (first %) (second %)) (partition 2 1 nil col ))))", "user": "5646dff3e4b0284900eef615"}, {"problem": 30, "code": "#(reduce (fn [acc x]\n           (if (= (last acc) x)\n             acc\n             (conj acc x)))\n         [(first %)] \n         (rest %))", "user": "5647dc44e4b0284900eef624"}, {"problem": 30, "code": "#(reduce (fn [acc val]\n          (if (= (last acc) val)\n            acc\n            (conj acc val)))\n        '[] %)", "user": "5400407de4b0de5c4184860a"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2)\n          %1\n          (concat %1 (list %2))) '()", "user": "5649542fe4b0284900eef63f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54a6645be4b09f271ff37c87"}, {"problem": 30, "code": "(fn [a]\n  (map #(second %)\n     (filter \n #(apply distinct?  %)\n (partition 2 1 (cons nil a)))))", "user": "52c911dde4b0c2d177d6213a"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "56449c90e4b0284900eef5f8"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "5643ba10e4b0018b46ad8bff"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "56441e72e4b0018b46ad8c09"}, {"problem": 30, "code": "(fn [xx] (reverse(reduce (fn [ac r] (if (= (first ac) r) ac (cons r ac))) '() xx)))", "user": "551daeb9e4b030e6a24d00df"}, {"problem": 30, "code": "(fn [s] (reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) [] s)))", "user": "560bb1f7e4b05f002753df20"}, {"problem": 30, "code": "(fn [s]\n  (loop [s s p nil n '()]\n    (if (empty? s)\n      (reverse n)\n      (if (= p (first s))\n        (recur (rest s) (first s) n)\n        (recur (rest s) (first s) (conj n (first s)))))))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "563c0d4ce4b0bfe05bf11831"}, {"problem": 30, "code": "(fn compress_seq\n    ([s]\n        (concat (list (first s)) (compress_seq (rest s) (first s))))\n    ([s l_item]\n        (if (empty? s)\n            nil\n            (if (= l_item (first s))\n                (compress_seq (rest s) l_item)\n                (concat (list (first s)) (compress_seq (rest s) (first s)))))))", "user": "56058d64e4b08b23635d3169"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "563c48e7e4b0bfe05bf11832"}, {"problem": 30, "code": "#(->>  % (partition-by identity) (mapcat set))", "user": "551e2cade4b030e6a24d00e4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "564633a1e4b0284900eef60f"}, {"problem": 30, "code": "(fn [coll] (reduce (fn [acc x]\n                     (if (= x (last acc))\n                       acc\n                       (conj acc x))) [] coll))", "user": "5622af0fe4b03f08ee9a922b"}, {"problem": 30, "code": "#(reverse\n  (reduce\n   (fn[output input]\n     (if (not (= (first output) input))\n       (cons input output)\n       output))\n   '() %))", "user": "51671557e4b013fc800656c4"}, {"problem": 30, "code": "(fn compress[strc] \n  (loop [result [] prev nil coll strc]\n    (if (empty? coll)\n      result\n    \t(if (= prev (first coll))\n      \t\t(recur result prev (rest coll))\n      \t\t(recur (conj result (first coll)) (first coll) (rest coll)) \n    ))))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 30, "code": "(fn [S] \n  (reduce #(if (=(last %1) %2)\n  \t\t\t%1  (conj %1 %2) )\n  [] S)\n)", "user": "5649615be4b0284900eef641"}, {"problem": 30, "code": "(fn dedup [x]\n  (let [rf (fn [a b]\n             (if (= (last a) b)\n               a\n               (concat a (list b))))]\n    (reduce rf '() x)))", "user": "564066dee4b08d4f616f5ee2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56313ff1e4b0bfe05bf1178f"}, {"problem": 30, "code": "(fn uniq [ls]\n  (if (<= (count ls) 1)\n    ls\n    (if (= (first ls) (first (rest ls)))\n      (uniq (rest ls))\n      (cons (first ls) (uniq (rest ls)))\n      )\n    )\n  )", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5645a7d6e4b0284900eef608"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn[acc x] (if (= (last acc) x) acc (conj acc x))) [] xs))", "user": "54dce6dbe4b024c67c0cf78d"}, {"problem": 30, "code": "(fn xdups [x]                                                                 \n  (loop [ elms (seq x) acc '() ]                                                \n    (if (= 0 (count elms))                                                      \n      ;; then                                                                   \n      (reverse acc)                                                             \n      ;; else                                                                   \n      (recur (rest elms)                                                        \n        (if (= (first acc) (first elms) )                                       \n          ;; then                                                               \n          acc                                                                   \n          ;; else                                                               \n          (conj acc (first elms))                                               \n        )))))", "user": "564cc055e4b0284900eef676"}, {"problem": 30, "code": "(fn [col] (map first (partition-by identity col)))", "user": "564a560ae4b0284900eef654"}, {"problem": 30, "code": "(fn [l]\n  (loop [li [] li2 l]\n    (cond (empty? li2) li\n          (not= (last li) (first li2)) (recur (conj li (first li2)) (rest li2))\n          :else (recur li (rest li2)))))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4db85282535d1e037afb218a"}, {"problem": 30, "code": "(fn [s] (reduce #(if (= (last %) %2) % (conj % %2)) [] s))", "user": "563b1553e4b0bfe05bf1180a"}, {"problem": 30, "code": "#(loop [s % prev nil result ()]\n   (if (nil? s)\n     (reverse result)\n     (let [f (first s) r (next s)]\n       (recur r f (if (= f prev) result (cons f result))))))", "user": "564b3730e4b0284900eef665"}, {"problem": 30, "code": "reduce (fn [r x] (if (= x (last r)) r (conj r x))) []", "user": "564a5a09e4b0284900eef656"}, {"problem": 30, "code": "(fn compress\n  [s]\n  (when (seq s)\n    (if (= (first s) (second s))\n      (compress (rest s))\n      (cons (first s) (compress (rest s))))))", "user": "5576fee3e4b05c286339e078"}, {"problem": 30, "code": "(fn [x] (loop [a [(first x)] i 1] \n          (if (>= i (count x))\n              a\n              (recur (if (= (nth x i) (nth x (dec i))) a (conj a (nth x i))) (inc i)))))", "user": "564d3169e4b0284900eef67c"}, {"problem": 30, "code": "(fn [lst]\n  (reduce (fn [newl el]\n    (if (= el (last newl))\n      newl\n      (conj newl el)))\n     []\n     lst))", "user": "5625f678e4b00e49c7cb47b8"}, {"problem": 30, "code": "(fn compress\n  ([s]\n    (compress s (vec [])))\n  ([s acc]\n    (let [head (first s)\n          tail (rest s)]\n      (if (seq tail)\n        (if (= head (first tail))\n          (recur tail acc)\n          (recur tail (conj acc head)))\n        (seq (conj acc head))))))", "user": "5515c8b1e4b055c2f668d4f2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 30, "code": "(partial (fn dedup [prev s] (if (seq s) (if (= (first s) prev) (dedup prev (rest s)) (cons (first s) (dedup (first s) (rest s)))) s)) nil)", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 30, "code": "#(loop [x % acc []]\n   (if (empty? x)\n     acc\n     (let [head (first x)\n           tail (rest x)]\n       (if (= head (first tail))\n         (recur tail acc)\n         (recur tail (conj acc head))))))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 30, "code": "(fn xdedupe [coll]\n  (loop [prev nil, s coll, acc []]\n    (let [head (first s)\n          tail (rest s)]\n      (cond\n        (nil? head) acc\n        (= prev head) (recur head tail acc)\n        :else (recur head tail (conj acc head))\n        )\n      )\n    )\n  )", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 30, "code": "(fn [coll]\n                #_=>   (loop [acc []\n                #_=>          [x & xs] coll]\n                #_=>     (if x\n                #_=>       (if (= x (last acc))\n                #_=>         (recur acc xs)\n                #_=>         (recur (conj acc x) xs))\n                #_=>       acc)))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 30, "code": "(fn rem-consec [in]\n\t(loop [[x1 & [x2 & xr :as xrest] :as X] in, out []]\n\t\t(if (seq X)\n\t\t\t(recur xrest (if (= x1 x2) out (concat out [x1])))\n\t\t\tout)))", "user": "564d02cde4b0284900eef679"}, {"problem": 30, "code": "#(reverse (reduce (fn [acc v] (if (= (first acc) v)\n                                acc \n                                (cons v acc))) () %))", "user": "5650b8a0e4b0284900eef6c3"}, {"problem": 30, "code": "#(map first (partition-by identity %))\n\n;(fn\n;  [s]\n;  (reverse (reduce #(if (= (first %1) %2) (seq %1) (cons %2 %1)) [] s)))", "user": "56488119e4b0284900eef632"}, {"problem": 30, "code": "(fn [xs] (map first (partition-by identity xs)))", "user": "535fa486e4b04ce2eb3ed2e0"}, {"problem": 30, "code": "#(reduce (fn [acc el] (if (= (last acc) el) acc (conj acc el))) [] %)", "user": "564faadce4b0284900eef6b2"}, {"problem": 30, "code": "(fn [[x & xs]]\n  (reduce (fn [acc elem]\n            (if (= (last acc) elem)\n              acc\n              (conj acc elem)))\n          [x] xs))", "user": "56521a26e4b0f9d632dd845f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55f25ae6e4b06e875b46ce43"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "564da567e4b0284900eef682"}, {"problem": 30, "code": "(fn [s] (reduce (fn [a b] (concat a (list (last b)))) (filter (fn [[l r]] (not= l r)) (partition 2 1 s))))", "user": "564b495de4b0284900eef667"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 30, "code": "#(mapcat set (partition-by identity %))", "user": "55c3c1b0e4b0e31453f6498c"}, {"problem": 30, "code": "(fn [lis]\n  (loop [l (seq lis) result []]\n    (if(empty? l)\n      result\n      (if(= (first l) (last result))\n        (recur (rest l) result)\n        (recur (rest l) (conj result (first l)))))))", "user": "5191a763e4b0d428d29dc1b4"}, {"problem": 30, "code": "(fn [x]\n   ((fn [arr y]\n   (let [se (seq y) [fst sec & rest] se]\n        (println arr fst sec rest) \n       (cond\n           (nil? fst) arr\n         (nil? sec) (conj arr fst)\n         (= fst sec)\n           (recur arr (cons sec rest))\n           :else \n                   \n                   (recur (conj arr fst) (cons sec rest))\n ))) [] x)\n)", "user": "564d936ee4b0284900eef681"}, {"problem": 30, "code": "(fn [lst] (mapcat identity (map distinct (partition-by identity lst))))", "user": "56367c51e4b0bfe05bf117cd"}, {"problem": 30, "code": "reduce #(if (not= %2 (last %1)) (conj %1 %2) %1) []", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 30, "code": "(fn [coll]\n  (loop [c   coll\n         el  (first c)\n         acc []]\n    (if (empty? c)\n      acc\n      (if (= el (last acc))\n        (recur (rest c) (first (rest c)) acc)\n        (recur (rest c) (first (rest c)) (conj acc el))))))", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 30, "code": "(fn notprevious [x]\n  (let [y (seq x)]\n    (if (nil? y)\n      '()\n      (let [z (notprevious (rest y))]\n        (if (= (first z) (first y))\n          z\n          (conj z (first y)))))))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 30, "code": "reduce (fn [r x]\n         (if (= (last r) x)\n           r\n           (conj r x))) []", "user": "4ff3113ae4b0678c553fc345"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "560331dee4b04bb52996e1b5"}, {"problem": 30, "code": "(fn no-repeats [s]\n  (loop [s s\n         acc []]\n    (if (empty? s)\n      acc\n      (let [same? (= (last acc) (first s))]\n        (recur (rest s) (if same?\n                          acc\n                          (conj acc (first s))))))))", "user": "56040e58e4b0c80df0ca2654"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56582025e4b0f9d632dd84b1"}, {"problem": 30, "code": "(fn compress [coll]\n  (if (nil? coll)\n    nil\n    (let [[h & t] coll\n          com (fn com [current coll]\n                (if (nil? coll)\n                  nil\n                  (let [[h & t] coll]\n                    (if (= h current)\n                      (com current t)\n                      (compress coll)))))]\n      (conj (com h t) h))))", "user": "56557d2de4b0f9d632dd8498"}, {"problem": 30, "code": "(fn compress [a] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] a))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 30, "code": "(fn [coll] (loop [c coll c-f []] (let [f (first c) s (second c) t (next (next c))] (if (nil? f) (seq c-f) (recur (next c) (if (= f s) c-f (conj c-f f)))))))", "user": "564c8e99e4b0284900eef674"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56188848e4b053970a773aea"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 30, "code": "(fn [s]\n    ((fn aux [l' acc' prev']\n      (loop [l l' acc acc' prev prev']\n      (if (empty? l)\n        (into () acc)\n        (recur (rest l)\n               (if (= prev (first l))\n                 acc\n                 (cons (first l) acc))\n               (first l)))))\n  (seq s) '() nil))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 30, "code": "#(loop [str %1 last nil output []] (if (empty? str) output (let [c (first str)] (if (= c last) (recur (rest str) last output) (recur (rest str) c (conj output c))))))", "user": "5651de3ee4b0f9d632dd845b"}, {"problem": 30, "code": "(fn r-dups \n  ([s] (r-dups s nil []))\n  ([s lst output]\n   (if (empty? s) output\n     (if (= (first s) lst)\n       (recur (rest s) lst output)\n       (recur (rest s) (first s) (conj output (first s)))))))", "user": "5658acabe4b0f9d632dd84b7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5654a0fce4b0f9d632dd8486"}, {"problem": 30, "code": "(fn [s]\n  (reverse (reduce #(if (= %2 (first %1)) %1 (cons %2 %1)) nil s)))", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 30, "code": "(fn [els] (map first (partition-by identity els)))", "user": "5658b9bde4b00d315579610e"}, {"problem": 30, "code": "(fn func\n  ([s a]\n   (if-let [[f & r] (seq a)]\n     (if (= f (first r))\n       (recur s r)\n       (recur (conj s f) r))\n     s))\n  ([a] (func [] a)))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52c48ec6e4b0c2d177d620dd"}, {"problem": 30, "code": "(fn [x] \n  (reduce #(if (= (peek %) %2)\n               %1\n               (conj % %2))\n    []\n    (vec x)))", "user": "56532ff4e4b0f9d632dd846e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5649d538e4b0284900eef647"}, {"problem": 30, "code": "(fn dedup [thing]\n  (reverse\n  (loop\n    [lastseen (first thing)\n     curthing (rest thing)\n     results (list lastseen)]\n    (cond\n     (empty? curthing) results\n     (= (first curthing) lastseen) (recur lastseen (rest curthing) results)\n     :else (recur (first curthing) (rest curthing) (cons (first curthing) results))))))", "user": "5658d775e4b00d3155796114"}, {"problem": 30, "code": "(fn [c]\n  (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] c))", "user": "565a280be4b068f2fe63dbf7"}, {"problem": 30, "code": "(fn\n  [s]\n  (seq (reduce (fn [r x] (if (= x (last r)) r (conj r x))) [] s)))", "user": "51ae5571e4b09397d5109792"}, {"problem": 30, "code": "reduce (fn [r x] (if (= x (last r)) r (conj r x))) []", "user": "562c2fc2e4b058fa18c5a6d7"}, {"problem": 30, "code": "(fn roelof\n  [list]\n  (first (reduce (fn [[acc last] x] (if (= last x) [acc x] [(conj acc x) x])) [[] nil] list)))", "user": "560d7863e4b05f002753df40"}, {"problem": 30, "code": "reduce #(if (= (last (seq %1)) %2) %1 (conj (vec %1) %2)) '()", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 30, "code": "(fn [c]\n  (map first (partition-by identity c)))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "564bbb15e4b0284900eef66d"}, {"problem": 30, "code": "(fn [l] (reduce #(if (= (last %1) %2) %1  (conj %1 %2)) [] l))", "user": "4f6de600e4b07046d9f4efd1"}, {"problem": 30, "code": "(fn [l]\n  (loop [l l acc []]\n    (if (= (count l) 1)\n      (conj acc (first l))\n      (let [[x y & l] l]\n        (if (= x y)\n          (recur (conj l y) acc)\n          (recur (conj l y) (conj acc x)))))))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5650ac8be4b0284900eef6c2"}, {"problem": 30, "code": "reduce (fn [acc item] (if (= (last acc) item) acc (conj acc item) )) []", "user": "565b818ce4b068f2fe63dc05"}, {"problem": 30, "code": "(fn [input]\n   (reduce #(\n  \n                  if (= (peek %1) %2)\n                    %1\n                    (conj %1 %2)\n\n                  )\n            [] input)\n\n   )", "user": "56004deee4b04bb52996e164"}, {"problem": 30, "code": "(let [my-join (fn [coll elem]\n                   (if (or (empty? coll)\n                           (not= (first coll) elem))\n                    (conj coll elem)\n                    coll))]\n    (fn [elems] (reverse (reduce my-join '() elems))))", "user": "565b7902e4b068f2fe63dc04"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "565b4d7fe4b068f2fe63dc01"}, {"problem": 30, "code": "reduce (fn [ls nx] (if (= (last ls) nx) ls (conj ls nx))) []", "user": "56607bbfe4b068f2fe63dc58"}, {"problem": 30, "code": "(fn rem-consec-dups\n  [coll]\n  (reduce\n        (fn [curr inp]\n          (if (= (last curr) inp)\n            curr\n            (conj curr inp)))\n        []\n        (seq coll)))", "user": "565d8dcfe4b068f2fe63dc26"}, {"problem": 30, "code": "(fn [coll]\n  (reduce into (reverse (map distinct (partition-by identity coll)))))", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56602649e4b068f2fe63dc47"}, {"problem": 30, "code": "#(reduce (fn [r x] (if (= (last r) x) r (conj r x))) []  %)", "user": "5650082fe4b0284900eef6b7"}, {"problem": 30, "code": "#(map \n  (comp first distinct) \n  (partition-by identity %1))", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 30, "code": "(fn [coll] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 30, "code": "(fn\n  [s]\n  (let [compress (fn\n                   [cur-seq s out-seq]\n                   (if (empty? cur-seq)\n                     (conj out-seq s)                   \n                     (let [h (first cur-seq)]\n                       (if (= h s)\n                         (recur (rest cur-seq) s out-seq)\n                         (recur (rest cur-seq) h (conj out-seq s))))))\n        aseq (seq s)\n        f (first aseq)\n        ]\n    (compress aseq f []))\n)", "user": "56019662e4b04bb52996e190"}, {"problem": 30, "code": "(fn compress-sequence [xs]\n  (letfn [(cons-diff [xs x] \n            (if(= (first xs) x)\n              xs\n              (cons x xs)\n            ))]\n    \n    (reverse (reduce cons-diff '() xs))))", "user": "5661e09ae4b068f2fe63dc70"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5656e039e4b0f9d632dd84a3"}, {"problem": 30, "code": "#(reduce (fn [r x] (if (= x (last r)) r (conj r x))) [] %)", "user": "55344b75e4b09218d5f44f99"}, {"problem": 30, "code": "(fn removeDupes [coll]\n  ((fn inner [curr prev remaining]\n    (if (nil? curr) \n      \tnil\n      \t(if (= curr prev) \n          \t(inner (first remaining) curr (rest remaining))\n          \t(cons curr (inner (first remaining) curr (rest remaining))))))\n   (first coll) nil (rest coll)))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56503c4ee4b0284900eef6bb"}, {"problem": 30, "code": "reduce (fn [a b]\n         (if (= (last a) b)\n           a\n           (conj a b)))\n[]", "user": "56677192e4b04acd4f672dd5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "566733d6e4b04acd4f672dcb"}, {"problem": 30, "code": "#(loop [[head & tail] %\n        prev nil\n        acc []]\n   (if (nil? head)\n     acc\n     (recur tail\n            head\n            (if (= head prev)\n              acc\n              (conj acc head)))))", "user": "56685a73e4b04acd4f672de5"}, {"problem": 30, "code": "#(map first(partition-by identity %) )", "user": "566888e4e4b04acd4f672ded"}, {"problem": 30, "code": "#(reverse (reduce (fn [x y] (if (not= (first x) y)(conj x y) x)) '() %))", "user": "56671a4de4b04acd4f672dca"}, {"problem": 30, "code": "(fn compress\n  [xs]\n  (reverse (reduce (fn [acc v] (if (not= v (first acc)) (conj acc v) acc)) '() xs)))", "user": "5668dcc6e4b04acd4f672df8"}, {"problem": 30, "code": "#(cons (first %)\n      (mapcat\n        (fn [x]\n          (when-not (= (first x) (last x))\n            (list (last x))))\n        (partition 2 1\n                   %)))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 30, "code": "#(map first  (partition-by identity %))", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 30, "code": "(fn [s]\n  (map first\n       (remove #(= (first %) (second %))\n               (partition-all 2 1 s))))", "user": "566a6e38e4b0a866af68969b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "566734c4e4b04acd4f672dcc"}, {"problem": 30, "code": "(fn [x] (reverse(reduce #(conj %1 (first %2))'()(partition-by identity x))))", "user": "566a3a26e4b0a866af689699"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "566b7a77e4b0a866af6896af"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 30, "code": "(fn [coll]\n  (let [f (fn [x y]\n          (cond\n           (empty? y) x\n           (= (last x) (first y)) (recur x (rest y))\n           :else (recur (conj x (first y)) (rest y))))]\n    (f [] coll)))", "user": "53ae0c50e4b047364c044471"}, {"problem": 30, "code": "(fn [lst]\n  (loop [prev (first lst)\n         res (list prev)\n         xs (rest lst)]\n    (cond (empty? xs) (reverse res)\n          (= (first xs) prev) (recur prev res (rest xs))\n          :else (recur (first xs) (cons (first xs) res) (rest xs)))))", "user": "5516a874e4b06a49daca83b5"}, {"problem": 30, "code": "(fn [x] (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] x))", "user": "5006c169e4b0678c553fc48d"}, {"problem": 30, "code": "(fn [x]\n        (loop [a x r '() ]\n        (if (seq a)\n                (if (not= (first a) (first r))\n                        (recur (rest a) (cons (first a) r))\n                        (recur (rest a) r)\n                )\n                (reverse r)\n        ))\n)", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "566fa059e4b0a866af6896ea"}, {"problem": 30, "code": "(fn\n  [data]\n  (reverse\n  (reduce #(let [acc (if (list? %1) %1 (list %1))\n                       last-item (first acc)]\n             \n           (println last-item acc %2)\n           (if (not= last-item %2) \n             (conj acc %2)\n             acc))\n           data)))", "user": "5640eb50e4b08d4f616f5eec"}, {"problem": 30, "code": "(fn f [[x y & ys]]\n  (if (nil? ys)\n    (if (= x y)\n      [x]\n      [x y])\n    (if (= x y)\n      (f (into [y] ys))\n      (into [x] (f (into [y] ys))))))", "user": "56483562e4b0284900eef629"}, {"problem": 30, "code": ";#(loop [given-sequence %\n;        result []]\n;  (if (nil? given-sequence)\n;    result\n;    (if (= (last result) (first given-sequence))\n;      (recur (next given-sequence) result)\n;      (recur (next given-sequence) (conj result (first given-sequence)))\n;      )\n;    )\n;  )\n#(map first (partition-by identity %))", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55263009e4b0ffed3738f916"}, {"problem": 30, "code": "(fn dedup [s] (loop [ar s acc []]\n                    (if (empty? ar)\n                        acc\n                        (if (= (first ar) (last acc))\n                          (recur (rest ar) acc)\n                          (recur (rest ar) (conj acc (first ar)))))))", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 30, "code": "(fn [n]\n  (loop [input n result []]\n    (if (empty? input)\n      result\n      (if (= (last result) (first input))\n        (recur (drop 1 input) result)\n        (recur (drop 1 input) (conj result (first input)))))))", "user": "5668aad0e4b04acd4f672df5"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity (seq x))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 30, "code": "(fn compress [coll]\n  (loop [done (list) todo coll check nil]\n    (if (empty? todo)\n      (reverse done)\n      (if (= check (first todo))\n        (recur done (rest todo) check)\n        (recur (cons (first todo) done) (rest todo) (first todo))))))", "user": "56714922e4b05957ce8c6107"}, {"problem": 30, "code": "(fn [xs] (loop [xs xs\n           \t    res []]\n           (if (not (seq xs))\n             res\n             (if (= (peek res)\n                    (first xs))\n               (recur (next xs) res)\n               (recur (next xs) (conj res (first xs)))))))", "user": "56427ec0e4b08d4f616f5f1a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54ab951be4b09f271ff37ccc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5674477ce4b05957ce8c6134"}, {"problem": 30, "code": "(fn full [x] (reduce (fn nodubs [x y] (if (= (last x) y) x (concat x (list y)))) nil x))", "user": "564716e6e4b0284900eef616"}, {"problem": 30, "code": "(fn [x]\n  (map first (partition-by identity x)))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 30, "code": "(fn [coll] (map first (filter #(not= (first %) (second %)) (partition-all 2 1 coll))))\n;#(map first (partition-by identity %))", "user": "56754c4be4b05957ce8c6149"}, {"problem": 30, "code": "(fn [s]\n  (loop [s s res []]\n    (cond \n       (empty? s) res\n       (= (first s) (last res)) (recur (rest s) res)\n       :else (recur (rest s) (conj res (first s))))))", "user": "55efb51ee4b066087aa9453b"}, {"problem": 30, "code": "(fn [seqq] \n  (reverse \n \t(reduce #(\n           if (= %2 (first %1))\n            %1\n            (cons %2 %1))\n         [] \n         seqq)))", "user": "567476bde4b05957ce8c6139"}, {"problem": 30, "code": "(fn [s]\n  (reverse (reduce (fn [l next]\n                     (if (= (first l) next)\n                       l\n                       (cons next l)))\n                     ()\n                     s)))", "user": "566cf904e4b0a866af6896c5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5652dd89e4b0f9d632dd8469"}, {"problem": 30, "code": "(fn [input]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] (seq input)))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 30, "code": "reduce (fn [x y] (if (= (last x) y) x (conj x y))) []", "user": "54ce541de4b057c6fda3a2ac"}, {"problem": 30, "code": "#(reduce (fn [all, x]\n            (if (= (last all) x)\n              all\n              (conj all x))) [] %)", "user": "5674f874e4b05957ce8c6144"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity (seq %)))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56765beae4b05957ce8c6156"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5673c886e4b05957ce8c6123"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56761ab1e4b05957ce8c6154"}, {"problem": 30, "code": "(fn [coll]\n  (reduce\n   #(if (= (last %1) %2)\n      %1\n      (conj %1 %2))\n   [] coll))", "user": "5675cdf1e4b05957ce8c614d"}, {"problem": 30, "code": "reduce (fn [out x] (if (= x (last out)) out (conj out x))) []", "user": "56771b31e4b05957ce8c6163"}, {"problem": 30, "code": "#(for [[a b]\n       (partition\n        2 1\n        [(Object.)]\n        %)\n       :when (not= a b)]\n  a)", "user": "566dd178e4b0a866af6896d1"}, {"problem": 30, "code": "(fn [lat] (map first (partition-by identity lat)))", "user": "566efb2be4b0a866af6896e2"}, {"problem": 30, "code": "(fn [coll]\n  (let [f (fn [orig result prev]\n            (cond (empty? orig) result\n                  (= (first orig) prev)\n                    (recur (rest orig) result (first orig))\n                  :else\n                    (recur (rest orig) (conj result (first orig)) (first orig))))]\n    (f coll [] ())))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55e81430e4b0121d4835fd88"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "567874f3e4b05957ce8c617c"}, {"problem": 30, "code": "(fn [x]\n (reduce (fn [a b]\n           (if (= (last a) b)\n             a\n             (concat a [b])))\n         []\n         x))", "user": "54ef7568e4b024c67c0cf885"}, {"problem": 30, "code": "(fn [s] (reverse (\n  reduce  \n    #(if (= (first %1) %2)%1 (conj %1 %2) )  \n    '() \n    s\n  ) \n))", "user": "567798afe4b05957ce8c6169"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5427b477e4b01498b1a71b27"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "561a2940e4b053970a773b04"}, {"problem": 30, "code": "(fn pack [x]\n    (reduce (fn [res actual]\n              (let [last-value (last res)]\n                (if (not= actual last-value) (conj res actual) res))) [] x))", "user": "567b62fce4b05957ce8c61a6"}, {"problem": 30, "code": "(fn compress [d]\n  (reverse\n    (loop [compressed '()\n           last-val nil\n           not-compressed d]\n      (if (empty? not-compressed)\n        compressed\n        (let [f (first not-compressed)]\n          (if (= last-val f)\n            (recur compressed last-val (rest not-compressed))\n            (recur (cons f compressed) f (rest not-compressed))))))))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 30, "code": "#(loop [s % t [] cur -1]\n   (if (empty? s) t\n     (if (= cur (first s))\n       (recur (rest s) t cur)\n       (recur (rest s) (conj t (first s)) (first s))\n       )\n     )\n   )", "user": "5547b72be4b0a04f79299550"}, {"problem": 30, "code": "(fn [coll] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll))", "user": "567c2322e4b05957ce8c61af"}, {"problem": 30, "code": "#(loop [col %\n        acc []]\n   (if (empty? col) acc\n   (let [[f & r] col]\n      (recur r (if (= (last acc) f) acc (conj acc f))))))", "user": "567cef8ce4b05957ce8c61c1"}, {"problem": 30, "code": "(fn [xs] ((fn iter [xs state res] \n            (cond (empty? xs) res\n                  (= (first xs) state) (iter (rest xs) state res)\n                  :else (iter (rest xs) (first xs) (concat res (cons (first xs) ()))))) (rest xs) (first xs) (cons (first xs) () )))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 30, "code": "(fn remove-dumplicate [cds]\n    (loop [col (rest  cds) prev (first cds) result [prev]]\n      (cond\n       (empty? col) result\n       (= prev (first col)) (recur (rest col) prev result)\n       :else (recur (rest col) (first col) (conj result (first col))))))", "user": "5455a6d3e4b0e397800069e2"}, {"problem": 30, "code": "#(loop [left %\n        result []]\n   (if (= (last result) (first left))\n     (recur (rest left) result)\n     (if (not (empty? left))\n       (recur (rest left) (conj result (first left)))  \n       result)))", "user": "567b4641e4b05957ce8c61a5"}, {"problem": 30, "code": "(fn my-compress\n  [s]\n  (map first (partition-by identity s)))", "user": "567c7fefe4b05957ce8c61bc"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "567ea95de4b0feffd0d18eb6"}, {"problem": 30, "code": "(fn reDup [s]\n  (if (= 1 (count s))\n    (list (first s))\n    (if (not= (first s) (second s))\n      (conj (reDup (rest s)) (first s))\n      (reDup (rest s)))))", "user": "567debb5e4b05957ce8c61ce"}, {"problem": 30, "code": "(fn deduplicate\n  [coll]\n  (map first (partition-by identity coll)))", "user": "566f7749e4b0a866af6896e9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56798c1be4b05957ce8c618a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "567931e9e4b05957ce8c6184"}, {"problem": 30, "code": "reduce (fn [x,y] (if (= y (last x)) x (conj x y))) []", "user": "56798d83e4b05957ce8c618b"}, {"problem": 30, "code": "reduce #(if-not (= %2 (last %1))\n           (conj %1 %2)\n            %1) []", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5547432ee4b0a04f79299548"}, {"problem": 30, "code": "reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) []", "user": "56795deae4b05957ce8c6187"}, {"problem": 30, "code": "(fn [coll]\n  (loop [coll coll t-coll [] previous 0]\n    (if (= coll nil)\n      t-coll\n      (recur (next coll)\n             (if (= (first coll) previous)\n                    t-coll\n                    (conj t-coll (first coll)))\n             (if (= (first coll) previous)\n               previous\n               (first coll))))))", "user": "567ea403e4b0feffd0d18eb5"}, {"problem": 30, "code": "#(loop [x % y []]\n  (if (empty? x)\n    y\n    (if (= (first x) (last y))\n      (recur (rest x) y)\n      (recur (rest x) (conj y (first x))))))", "user": "567b903be4b05957ce8c61a8"}, {"problem": 30, "code": "(fn [s] \n  (loop [s s\n         result []]\n    (if (empty? s)\n      result\n      (let [same? (= (first s) (second s))]\n      (recur (rest s) (if same? result (conj result (first s))))))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 30, "code": "#(reduce (fn [r e] (if (= (last r) e) r (concat r [e]))) [] %)", "user": "50784ae5e4b0fc74642bff68"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "565fe49ee4b068f2fe63dc46"}, {"problem": 30, "code": "(fn [x]\n  (loop [ [a b & more :as x] x\n          acc '()]\n    (if a \n      (if (= a b)\n        (recur (rest x) acc)\n        (recur (rest x) (cons a acc)))\n      (reverse acc))))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 30, "code": "reduce (fn [acc x]\n                  (if(= x (last acc))\n                    acc\n                    (concat acc [x]) )) \n              '()", "user": "553900d4e4b09218d5f44fe5"}, {"problem": 30, "code": "#(let [result (reduce (fn [memo item] (if (= item (first memo)) memo (conj memo item))) () %)] (reverse result))", "user": "56747b46e4b05957ce8c613b"}, {"problem": 30, "code": "#(first\n  (reduce\n   (fn [[string last-character] character]\n     (if (= last-character character)\n       [string character]\n       [(conj string character) character]))\n   [[] nil]\n   % ))", "user": "56822f37e4b0945ebc182a8d"}, {"problem": 30, "code": "(fn rmdpl [c] (cond (<= (count c) 1) c (= (first c) (second c)) (rmdpl (rest c)) :else (conj (rmdpl (rest c)) (first c))))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 30, "code": "(fn cmprs [coll]\n   (when-let [[f & r]\n              (do\n                (println (str \"---> \" coll))\n                (seq coll))]\n\n     (print (str \"-> f \" f))\n     (print (str \"-> r \" r))\n     (if (= f (first r)) \n       (cmprs r) \n       (cons f (cmprs r)))))", "user": "55cbd29be4b0e31453f64a0a"}, {"problem": 30, "code": "#(reduce (fn [s i] (if (= i (last s))\n                       s\n                       (conj s i)))\n           [] (seq %))", "user": "568227fee4b0945ebc182a8a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 30, "code": "(fn [coll] \n  (map first (partition-by identity coll)))", "user": "56826ebce4b0945ebc182a93"}, {"problem": 30, "code": "(comp \n reverse\n first\n (partial reduce \n          #(vector \n            (if (= %2 (second %1))\n              (first %)\n              (conj (first %1) %2)\n              )\n            %2\n            )\n          []\n          )\n )", "user": "56814cbce4b0945ebc182a81"}, {"problem": 30, "code": "(fn [collection] \n  (reduce (fn [acc val]\n           (if (= val (last acc))\n             acc\n             (conj acc val))) \n          [] \n          collection))", "user": "567abc97e4b05957ce8c619d"}, {"problem": 30, "code": ";; (defn wat [x,y] (if (= (last x) y) x (concat x [y]) ) )\n;; (wat [1 2 3] 3)\n;; (wat [1 2 3] 2)\n\n;; (reduce wat [] [3 2 1 1 2 3 4 4] )\n\n\n(fn [x] \n\t(reduce  (fn [x,y] (if (= (last x) y) x (concat x [y]) ) )\n\t[] x))\n\n\n;; #(map first (partition-by identity %))", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (cmprs r)\n      (cons f (cmprs r)))))", "user": "56781f16e4b05957ce8c6173"}, {"problem": 30, "code": "(fn f [seq]\n  ((fn [seq prev acc]\n    (if (empty? seq)\n      (conj acc prev)\n      (let [cur (first seq)]\n        (recur (rest seq) cur\n        (if (= cur prev)\n          acc\n          (conj acc prev)\n        )))))\n    (rest seq) (first seq) []))", "user": "5681afaae4b0945ebc182a87"}, {"problem": 30, "code": "reduce (fn [col c] (if (= c (last col)) col (conj col c))) []", "user": "568242bfe4b0945ebc182a8f"}, {"problem": 30, "code": "(fn [ss]\n  (map first\n       (filter (fn [[x y]]\n                 (or (empty? y) (not (= x (first y)))))\n\t       (map (fn [x y] [x y])\n                    ss (iterate rest (rest ss))))))", "user": "5679a4d0e4b05957ce8c618d"}, {"problem": 30, "code": "#(reduce \n (fn [col item]\n   (if (= item (last col))\n     col\n     (conj col item)))\n [] %1)", "user": "564054a9e4b08d4f616f5edf"}, {"problem": 30, "code": "(fn [s] ((fn f [new old]\n      (if (empty? old)\n\t  new\n      \t  (if (empty? new)\n\t      (f (list (first\told)) (rest old) )\n\t      (if (= (first old) (last new))\n                  (f new (rest old))\n                  (f (concat new (list (first old))) (rest old) )\n              )\n          )\n      )\n) '() s ))", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 30, "code": "(let [\n  reduceF (fn [f accF sequence]\n    (let [x (first sequence)\n          xs (rest sequence)\n          acc (accF x)]\n      (reduce f acc sequence)))\n  filter-reduce (fn [f accF sequence]\n    (reduceF\n      (fn [[xs acc] x]\n        (let [[stay acc'] (f acc x)]\n          [(if stay (conj xs x) xs) acc']))\n      #(let [[stay acc] (accF %)] [(if stay [%] []) acc])\n      sequence))\n  filter-fun (fn [prev x]\n    (if (= prev x) [false prev] [true x]))\n] (fn [elements]\n    (first (filter-reduce filter-fun #(vector true %) elements))))", "user": "567ffd69e4b0966858e4d8e7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5686640ae4b0dcc4269f4050"}, {"problem": 30, "code": "(fn my ([s] (my s nil)) ([s c] (let [a (first s) r (next s)] (if s (if (= a c) (my r a) (conj (my r a) a))))))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) \n          %1 \n          (conj %1 %2)) []", "user": "566812f0e4b04acd4f672de1"}, {"problem": 30, "code": "(fn [seq']\n  (loop [seq-to-compress seq'\n         seq-compressed []]\n    (let [head (first seq-to-compress)\n          tail (rest seq-to-compress)\n          skip-while (fn [xs pred]\n                       (let [[head & tail] xs]\n                         (if (pred head) \n                           (recur tail pred)\n                           xs)))]\n      (if (empty? seq-to-compress) \n        seq-compressed\n        (recur (skip-while tail \n                           (fn [x] (=  x head)))\n               (conj seq-compressed head))))))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 30, "code": "(fn [coll]\n  (loop [col coll output []]\n    (cond\n      (empty? col) output\n      (= (first col) (last output)) (recur (rest col) output)\n      :else (recur (rest col) (conj output (first col))))))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "508f4343e4b0ea685a20f767"}, {"problem": 30, "code": "(fn rem-dups [xs] (if (empty? xs) nil (if (= (first xs) (second xs)) (rem-dups (rest xs)) (concat (list (first xs)) (rem-dups (rest xs))))))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 30, "code": "(fn [m]\n  (loop [a (first m)\n         b (second m)\n         c (drop 2 m)\n         r []]\n    (if (empty? c)\n      (if (= a b) (conj r a) (conj r a b))\n      (recur b (first c) (rest c) (if (= a b)\n                                    r\n                                    (conj r a))))))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 30, "code": "(fn compress-seq [x]\n  (let [answer ((fn [old-seq prev cur-seq]\n     (if (empty? old-seq)\n       cur-seq\n       (let [cur-char (first old-seq)\n             rest-seq (rest old-seq)]\n         (recur rest-seq \n                cur-char \n                (if (= cur-char prev)\n                  cur-seq\n                  (concat cur-seq (list cur-char)))))))\n   x nil nil)]\n    (if (string? x)\n      (apply str answer)\n      answer)))", "user": "5688a01be4b0dcc4269f406d"}, {"problem": 30, "code": "(fn [coll] (reverse (reduce (fn [done todo] (if (not (= todo (first done))) (conj done todo) done)) '() coll)))", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 30, "code": "(fn rd\n    ([coll] (if (empty? coll) coll (cons (first coll) (rd (first coll) (rest coll)))))\n    ([head coll] (if (= head (first coll)) (rd head (rest coll)) (rd coll)))\n    )", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 30, "code": "(fn dedupe [x] (map first (partition-by identity x)))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 30, "code": "(fn [col] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] col))", "user": "55597fcce4b0deb715856e37"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 30, "code": "(fn [s]\n  (loop [d [] p nil nxt (seq s)]\n    (if-not nxt\n      (seq d)\n      (if (= p (first nxt))\n        (recur d (first nxt) (next nxt))\n        (recur (conj d (first nxt)) (first nxt) (next nxt))))))", "user": "5637557ce4b0bfe05bf117d4"}, {"problem": 30, "code": "(fn [x]\n  (loop [i (count x), x x, result [(first x)]]\n  (if (> i 1)\n  \t(if (= (first x) (second x))\n    \t(recur (dec i) (next x) result)\n      \t(recur (dec i) (next x) (conj result (second x)))\n      )\n    result\n    )\n    )\n  )", "user": "56874171e4b0dcc4269f405c"}, {"problem": 30, "code": "(fn compress [s]\n  (let\n    [x (first s)\n     xs (rest s)]\n    (cond\n    \t(empty? s) '()\n     \t(= x (first xs)) (compress (cons x (rest xs)))\n     \t:else (cons x (compress xs))\n     )))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2)\n          %1\n          (concat %1 [%2])) ()", "user": "568a743ee4b0dcc4269f408e"}, {"problem": 30, "code": "(fn [input] (loop[coll (rest input) last-elem (first input) output [(first input)]]\n             (if (empty? coll) output\n               (if (= (first coll) last-elem) \n                 (recur (rest coll) last-elem output)\n                 (recur (rest coll) (first coll) (conj output (first coll)))\n                 )\n               )\n             )\n  )", "user": "56885c32e4b0dcc4269f4068"}, {"problem": 30, "code": "(fn [x] (loop [data x result ()]\n          (if-not (first data)\n            (reverse result)\n            (if (= (first data) (second data))\n              (recur (rest data) result)\n              (recur (rest data) (cons (first data) result) )))))", "user": "567f034be4b0feffd0d18eba"}, {"problem": 30, "code": "(fn compress\n  [coll]\n  (loop [sq-in coll\n         sq-out []]\n    (if (seq sq-in)\n      (let [nxt (first sq-in)\n            prv (last sq-out)]\n        (if (= prv nxt)\n          (recur (rest sq-in) sq-out)\n          (recur (rest sq-in) (conj sq-out nxt))))\n      sq-out)))", "user": "56481722e4b0284900eef628"}, {"problem": 30, "code": "(fn my-comp\n  [para]\n  (if (empty? para)\n    '()\n    (if (= (first para) \n           (second para))\n      (my-comp (rest para))\n      (conj (my-comp (rest para)) (first para)))))", "user": "55ee7977e4b0121d4835fdee"}, {"problem": 30, "code": "(fn my-comp\n  [para]\n  (if (empty? para)\n    para\n    (if (= (first para) (second para))\n      (my-comp (rest para))\n      (conj (my-comp (rest para)) (first para)))))", "user": "5688873ae4b0dcc4269f406b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55664bb5e4b0c656e3ff1833"}, {"problem": 30, "code": "#(seq (reduce (fn [a b]\n                (if (= (last a) b)\n                  a\n                  (conj a b)))\n              []\n              %))", "user": "55915fe9e4b0604b3f94d579"}, {"problem": 30, "code": "reduce (fn\n         [result item]\n         (if (= item (last result))\n             result\n           (conj result item)))\n        '[]", "user": "568a13eae4b0dcc4269f4089"}, {"problem": 30, "code": "(fn [coll]\n  (map first \n   (partition-by \n     identity coll)))", "user": "568b781be4b0dcc4269f40a5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 30, "code": "(fn compress [x]\n  (reduce #(if (= (last %) %2) % (conj % %2)) [] x))", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 30, "code": "(fn compress [col]\n        (reverse (reduce (fn [acc val]\n                           (if (not (= (first acc) val))\n                             (conj acc val)\n                             acc))\n                         '()\n                         col)))", "user": "56889672e4b0dcc4269f406c"}, {"problem": 30, "code": "#(reverse (reduce \n           (fn [coll diff] (if (= (first coll) diff) \n                             \t\t\tcoll\n                             \t\t\t(conj coll diff)\n                             \t\t)\n             )\n           nil\n           %))", "user": "52e5f810e4b09f7907dd1468"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "568bddaee4b0dcc4269f40aa"}, {"problem": 30, "code": "(fn [v]\n  (loop [in v out []]\n    (if  (empty? in)\n      (reverse out)\n     (recur (rest in) (if (not= (first out) (first in))\n                        (cons (first in) out)\n                        out)))))", "user": "51be00cae4b0ff155d51d2b8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 30, "code": "(fn uniq [s]\n  (if (empty? s)\n      s\n      (if (= (first s) (second s))\n          (uniq (rest s))\n          (cons (first s) (uniq (rest s))))))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "568c2d96e4b0dcc4269f40af"}, {"problem": 30, "code": "#(loop [c (count %)\n        i 0\n        prev (first %)\n        result [prev]]\n   (if (< i c)\n     (if-not (= prev (nth % i)) \n       (recur c (inc i) (nth % i) (conj result (nth % i)))\n       (recur c (inc i) prev result))\n     result))", "user": "568d4742e4b0dcc4269f40c2"}, {"problem": 30, "code": "reduce (fn [a b] (if (= (last a) b) a (concat a (list b)))) ()", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 30, "code": "(fn mycompress\n  [sqnc]\n  (loop [xs sqnc\n         ys []\n         lstitem nil]\n    (let [curitem (first xs)]\n      (if (empty? xs)\n        ys\n        (recur (rest xs)\n               (if (= lstitem curitem)\n                 ys\n                 (conj ys curitem))\n               curitem)))))", "user": "566f3e18e4b0a866af6896e7"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "566b8946e4b0a866af6896b0"}, {"problem": 30, "code": "#(let [last (atom nil)] (keep (fn [c] (if (= @last c) nil (do (reset! last c) c))) %))", "user": "4ff8487be4b0678c553fc397"}, {"problem": 30, "code": "(fn [source]\n  (reduce #(let [lastItem (peek %1)]\n               (if (= lastItem %2)\n                 %1\n                 (conj %1 %2)\n               )\n           )\n  \t\t  []\n  \t\t  (seq source)\n  )\n)", "user": "567b9ff7e4b05957ce8c61a9"}, {"problem": 30, "code": "(fn [s]\n  (loop [res []\n        src s]\n    (if (empty? src)\n      res\n      (recur (if (not= (last res) (first src)) (conj res (first src)) res) (rest src)))))", "user": "5294a49be4b02ebb4ef7500f"}, {"problem": 30, "code": "(fn [arg]\n  (loop [unq-list [] full-list arg]\n    (if (empty? full-list)\n      unq-list\n      (if (= (first full-list) (second full-list))\n        (recur unq-list (rest full-list))\n        (recur (conj unq-list (first full-list)) (rest full-list))))))", "user": "5691ef12e4b0dcc4269f40f8"}, {"problem": 30, "code": "(fn [coll]\n(loop [result (conj '() (first coll)), coll (rest coll)]\n(cond\n(empty? coll) (reverse result)\n(= (first coll) (first result)) (recur result (rest coll))\n:else  (recur (conj result (first coll)) (rest coll))\n) ; cond\n) ; loop\n) ; fn", "user": "4e268c6e535deb9a81d77ef4"}, {"problem": 30, "code": "(fn [s] (concat [(first s)] (for [i (range 1 (count s)) :let [h (nth s i) p (nth s (dec i))] :when (not= h p)] h)))", "user": "543b4746e4b032a45b86932c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5694a50fe4b0dcc4269f4121"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) []  %)", "user": "56066e82e4b08b23635d3173"}, {"problem": 30, "code": "(fn [s] (reduce (fn [xs x] (if (= (last xs) x) xs (conj xs x))) [] s))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "569381a5e4b0dcc4269f4104"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "5629de63e4b00e49c7cb4812"}, {"problem": 30, "code": "#(loop [l % r []] \n   (cond (empty? l) r\n         (= (first l) (second l)) (recur (rest l) r)\n         :else (recur (rest l) (conj r (first l)))))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 30, "code": "#(loop [s %, r[]]\n      \t(if (empty? s)\n          \tr\n          \t(recur (rest s) \n                   (if (= (first s) (last r))\n\t\t\t\t\t  r\n\t\t\t\t\t  (conj r (first s))))))", "user": "568cea39e4b0dcc4269f40bc"}, {"problem": 30, "code": "#(reduce (fn [coll cur]\n           (if (= cur (last coll))\n             coll\n             (conj coll cur))) [] (seq %))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 30, "code": "#(reduce (fn [acc y] (if (= (last acc) y) acc (conj acc y))) [] %)", "user": "56946d43e4b0dcc4269f411e"}, {"problem": 30, "code": "(fn [xs] (reduce #(if (not= (last %) %2) (conj % %2) %) [] xs))", "user": "56743413e4b05957ce8c612e"}, {"problem": 30, "code": "(fn remove-consecutive [sq]\n  (reduce (fn [coll-result elem]\n            (let [ult (last coll-result)]\n              (if (not= ult elem)\n                (conj coll-result elem)\n                coll-result)))\n          [] sq))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 30, "code": "(fn [xs] (map first (partition-by identity xs)))", "user": "566669d8e4b0e91d5f5c566f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "569783bde4b0e0b3d3318cab"}, {"problem": 30, "code": "(comp \n (partial map first)\n (fn [xs] (concat xs [(reverse (last xs))]))\n (partial filter (fn [[a b]] (not (= a b))))\n          (partial partition 2 1))", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 30, "code": "#(reduce (fn [coll c]\n           (if (= (last coll) c)\n             coll\n             (conj (vec coll) c)))\n         []\n         %)", "user": "561a9380e4b053970a773b07"}, {"problem": 30, "code": "(fn [[x & more]] (reduce (fn [acc i] (if (= (last acc) i) acc (concat acc (list i) )) )     (list x)  more)   )", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 30, "code": "reduce\n#(if (= (last %1) %2) \n     %1\n     (conj %1 %2))\n[]", "user": "51e5a627e4b0efabf93c02db"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "5579eed7e4b05c286339e09b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 30, "code": "(fn redups [coll]\n  (let [l (first coll) r (rest coll)]\n    (concat \n      (if (= l (first r))\n        nil\n        [l])\n      (when (not (empty? r))\n        (redups r)))))", "user": "569aca1ee4b0542e1f8d144d"}, {"problem": 30, "code": "#(reduce\n  (fn [x y]\n    (if (= (last x) y)\n      x\n      (conj x y))) [] %)", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 30, "code": "#(rest(reduce (fn [a b] (if-not (= (last a) b) (conj a b) a)) [0] %))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "566064cae4b068f2fe63dc50"}, {"problem": 30, "code": "(fn\n      [rep]\n      (loop [i (count rep)\n             r (into '() rep)\n             s '()]\n            (cond\n              (= i 0) (reverse (into '()  s))\n              (not (= (first r) (second r))) (recur (dec i) (next r) (cons (first r) s))\n              :else (recur (dec i) (next r) s))\n            )\n      )", "user": "5683b67ce4b0945ebc182a9f"}, {"problem": 30, "code": "(fn my_compress [X]\n  (if (< (count X) 2) \n    X \n    (if (= (first X) (second X)) \n      (my_compress (rest X)) \n      (cons (first X) (my_compress (rest X))))))", "user": "569c07b9e4b0542e1f8d145d"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "4e6a8d28535d8ccf87e9fef5"}, {"problem": 30, "code": "#(loop [c % prev nil res []]\n\t(let [f (first c)\n          r (rest  c)]\n      (cond\n       (empty? c) res\n       (= f prev) (recur r f res)\n       :else      (recur r f (conj res f)))))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "56795625e4b05957ce8c6186"}, {"problem": 30, "code": "(fn comprs [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (comprs r)\n      (cons f (comprs r)))))", "user": "569ed6a8e4b0542e1f8d1489"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "56791447e4b05957ce8c6183"}, {"problem": 30, "code": "(fn f [coll] \n  (if-let [[x & xs] coll] \n    (cons x \n          (drop-while #(= x %) (f xs)))))", "user": "569d2283e4b0542e1f8d1474"}, {"problem": 30, "code": "(fn [xs]\n  (loop [remaining xs, compressed []]\n  (if (empty? remaining)\n    compressed\n    (let [current-val (first remaining),\n          previous-val (last compressed)]\n      (recur \n       (rest remaining)\n       (if (and (seq compressed) (= previous-val current-val))\n         compressed\n         (conj compressed current-val)))))))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 30, "code": ";(partial reduce (fn [xs x] (if (= x (last xs)) xs (conj xs x))) [])\n#(map first (partition-by identity %))", "user": "569ab3e2e4b0542e1f8d144a"}, {"problem": 30, "code": "(fn [xs]\n  (loop [new-list []\n         original xs]\n    (if (empty? original)\n      new-list\n      (if (= (last new-list) (first original))\n        (recur new-list (rest original))\n        (recur (conj new-list (first original)) (rest original))))))", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 30, "code": "#(first (reduce (fn [[acc lst] i] (if (= i lst) [acc lst] [(conj acc i) i])) [[] 0] %1))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 30, "code": "(fn myReduce [x]\n  (if (empty? x)\n    `()\n    (if (= (first x) (second x))\n      (myReduce (rest x))\n      (conj (myReduce (rest x))\n            (first x))\n    )\n  )\n)", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 30, "code": "#(loop [items % a nil result []]\n   (if (empty? items)\n     result\n     (let [f (first items)\n           r (rest items)]\n       (if (= f a)\n         (recur r a result)\n         (recur r f (conj result f))))))", "user": "569ef93de4b0542e1f8d148b"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "569bda8ee4b0542e1f8d145a"}, {"problem": 30, "code": "#(reduce (fn[acc e](if (= (last acc) e) acc (conj acc e))) [] %)", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "5651654be4b0f9d632dd845a"}, {"problem": 30, "code": "(fn [str]\n     (reduce ( fn [acc el]\n                 (if (= (last acc) el)\n                     acc\n                     (conj acc el))) [] str))", "user": "56936547e4b0dcc4269f4101"}, {"problem": 30, "code": "#(reduce (fn [accum x]\n           (if (= (last accum) x)\n             accum\n             (conj accum x)))\n         []\n         (seq %))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 30, "code": "(fn mcompress [sq]\n  (if (empty? sq)\n    '()\n    (if (= (first sq)\n           (second sq))\n      (recur (rest sq))\n      (conj (mcompress (rest sq))\n            (first sq)))))", "user": "56a2777be4b0542e1f8d14bf"}, {"problem": 30, "code": "(fn [in]\n  (let [coll (seq in)]\n    (loop [remaining (rest coll)\n           prev (second coll)\n           acc (vector (first coll))\n           stored (last acc)]\n      (cond\n       (empty? remaining) acc\n       (= prev stored) (recur (rest remaining) (second remaining) acc stored)\n       :else (recur (rest remaining) (second remaining) (conj acc prev) prev)))))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= y (last x)) x (conj x y))) [] %)", "user": "56992162e4b0542e1f8d143c"}, {"problem": 30, "code": "(fn [coll]\n  (letfn [(comp-seq [coll]\n            (if coll\n              (let\n                  [f (first coll)\n                   r (next coll)]\n                (if (not (= f (first r)))\n                  (cons f (comp-seq r))\n                  (comp-seq r)))))]\n    (comp-seq coll)))", "user": "55d0391de4b0e31453f64a37"}, {"problem": 30, "code": "(fn [x]\n  \n(apply concat (map set (partition-by identity x)))\n  \n  );END: fn", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 30, "code": "(fn remDup [x]\n  (loop [a x\n         result []]\n    (if (> (count a) 1)\n      (if (= (first a) (first (rest a)))\n        (recur (rest a) result)\n        (recur (rest a) (conj result (first a))))\n     (if  (> (count a) 0)\n       (conj result (first a))\n       result))))", "user": "56a3c89ae4b0542e1f8d14cf"}, {"problem": 30, "code": "#((fn [a b]\n      (cond\n        (empty? a) b\n        (= (first a) (first (rest a))) (recur (rest a) b)\n        :else (recur (rest a) (conj b (first a))))) % [])", "user": "569adec2e4b0542e1f8d1450"}, {"problem": 30, "code": "reduce \n (fn [x y] \n   (if-not (= (last x) y)  \n     (conj x y)\n     (vec x)\n   )) []", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 30, "code": "(fn dup-remove [x]\n  (cond\n   (empty? x) '()\n   (empty? (rest x)) x\n   (= (first x) (second x)) (dup-remove (rest x))\n   :else (cons (first x) (dup-remove (rest x)))))", "user": "568c2f97e4b0dcc4269f40b0"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "55bf785ee4b01b9910ae2a14"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "569f33c7e4b0542e1f8d148f"}, {"problem": 30, "code": "(fn compress [coll] \n  (if (not (empty? coll))\n  (if (= (first coll) (second coll))\n     (compress (rest coll))\n     (conj (compress (rest coll)) (first coll)))))", "user": "5167e8ace4b0c5a4140a309a"}, {"problem": 30, "code": "(fn [coll]\n  (loop [[x & xs] coll\n         acc []]\n    (let [acc1 (into acc [x])]\n  \t  (if (= 0 (count xs))\n      \n    \t  acc1\n\t\t  (recur (drop-while #(= x %) xs) (into acc [x]))))))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56a1b854e4b0542e1f8d14b2"}, {"problem": 30, "code": "(fn remove_duplicates\n  ([text] (remove_duplicates text '()))\n  ([text acc]\n   (if (empty? text)\n     (reverse acc)\n     (recur (rest text) (if (not= (first text) (first acc))\n                          (conj acc (first text))\n                          acc\n                          )))))", "user": "56826c2fe4b0945ebc182a92"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [v x]\n            (if (= x (last v))\n              v\n              (conj v x)))\n          []\n          coll))", "user": "56a79eb0e4b07966d5a8a05d"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n      )))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 30, "code": "#(reverse \n  (reduce \n   (fn [a b] \n     (if (not= b (first a))\n       (conj a b)\n       a))\n   '() %))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 30, "code": "(fn f [s] \n   (let [f* \n         (fn [acc s*] \n           (if (not= (last acc) s*) \n                (conj acc s*) \n                 acc))] \n     (reduce f* [] s)))", "user": "56942923e4b0dcc4269f4112"}, {"problem": 30, "code": "#(reduce \n        (fn [acc, nxt]\n            (if (= nxt (last acc))\n                acc\n                (conj acc nxt)\n                )) \n        []\n        (seq %1))", "user": "5694290fe4b0dcc4269f4110"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 30, "code": "(fn [s]\n    (loop [s s result []]\n      (if (empty? s)\n         result\n        (recur (rest s) \n               (cond \n                 (and (nil? (last result)) (= (first s) (second s))) (conj result (first s)) \n                 (and (nil? (last result)) (not= (first s) (second s))) (conj result (first s) (second s))\n                 (= (last result) (first s)) result\n                 (not= (last result) (first s)) (conj result (first s)) \n                  :else \"I don't know what else to do\"\n                 )))))", "user": "569425b6e4b0dcc4269f410e"}, {"problem": 30, "code": "(fn [s] (reverse (reduce #(if (= (first %) %2) % (conj % %2)) '() s)))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 30, "code": "(fn compress [col]\n  (let [s (seq col)\n        f (first s)\n        r (rest s)]\n    (if (= 0 (count s))\n      []\n      (if (not= f (first r))\n        (cons f (compress r))\n\t\t(compress r)))))", "user": "56a45fcee4b0542e1f8d14dc"}, {"problem": 30, "code": "(fn [a-seq]\n  (let [[_ res]\n        (reduce (fn [[prev build] elt]\n                  (cond (= prev nil)\n                        [elt [elt]]\n                        (= prev elt)\n                        [elt build]\n                        :else\n                        [elt (conj build elt)]))\n                [nil []]\n                a-seq)]\n    res))", "user": "5688e403e4b0dcc4269f4072"}, {"problem": 30, "code": "(fn compress [x]\n  (when-let [[f & r] (seq x)]\n  \t(if (= f (first r))\n        (compress r)\n        (cons f (compress r)))))", "user": "56990b68e4b0542e1f8d143a"}, {"problem": 30, "code": "(fn [xs] (map first (partition-by identity xs)))", "user": "568c4bc8e4b0dcc4269f40b2"}, {"problem": 30, "code": "(fn compress [x]\n  (loop [in x out '()]\n    (cond\n     (empty? in) (reverse out)\n     (= (first in) (first out)) (recur (rest in) out)\n     :else (recur (rest in) (conj out (first in))))))", "user": "56942b5fe4b0dcc4269f411c"}, {"problem": 30, "code": "#(map last (partition-by list %))", "user": "56aad332e4b03c432f187337"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56abeb1fe4b03c432f187344"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "55c0f842e4b01b9910ae2a2b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56a7f67ee4b07966d5a8a068"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56ac81ace4b03c432f187347"}, {"problem": 30, "code": "(fn compress\n  [s]\n  (loop\n    [one-before nil\n     current (first s)\n     old-lst (rest s)\n     new-lst []]\n    (cond\n     (nil? current) new-lst\n     (= current one-before) (recur current (first old-lst) (rest old-lst) new-lst)\n     :else (recur current (first old-lst) (rest old-lst) (conj new-lst current)))))", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "550a2c61e4b06e50f9beb12b"}, {"problem": 30, "code": "(fn [data] (map first (filter #(or (not= (first %1) (last %1)) (= (count %1) 1) ) (partition 2 1 nil data))))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (and (apply = %2)\n                    (second %2))\n             %1\n             (conj %1 (first %2)))\n          []\n          (partition-all 2 1 s)))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 30, "code": "#(loop [current (first %)\n         tail (rest %)\n         out [current]]\n    (if (empty? tail)\n      out\n      (let [nxt (first tail)]\n      (if (not= current nxt)\n        (recur nxt (rest tail) (conj out nxt))\n        (recur nxt (rest tail) out)))))", "user": "56a9ea17e4b07966d5a8a07c"}, {"problem": 30, "code": "(fn [x]\n  (loop [[h & t]x\n         res []]\n    (if (nil? h)\n      res\n      (recur t (if (= (last res) h)\n                 res\n                 (conj res h))))))", "user": "56646a7fe4b0e91d5f5c5657"}, {"problem": 30, "code": "#(loop [l1 % l2 '() ]\n  (cond \n    (empty? l1)(reverse l2)\n    (= (first l1) (first l2)) (recur (rest l1) l2)\n    :else (recur (rest l1) (cons (first l1) l2 ) )))", "user": "55c2367ee4b0e31453f64978"}, {"problem": 30, "code": "(fn f[s]\n(\n reverse(reduce #(if (= (first %1) %2) %1 (cons %2 %1))\n \t\t\t\t'()\n                s) \n )\n\n  )", "user": "56ae4c21e4b03c432f18735c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "559e38b2e4b08a52bd4f97d2"}, {"problem": 30, "code": "(fn [coll] (if (string? coll) (apply str (reduce (fn [a b] (if(= (last a) b) a (conj a b) )) [] coll)) (reduce (fn [a b] (if(= (last a) b) a (conj a b) )) [] coll)))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 30, "code": "#(loop [c (vec %)\n       i (-> (count c) dec)]\n  (cond\n    (zero? i) c\n    :else (if (= (nth c i) (nth c (dec i)))\n            (recur (vec (concat (subvec c 0 i) (subvec c (inc i)))) (dec i))\n            (recur c (dec i)))))", "user": "5638d2d1e4b0bfe05bf117eb"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2) ) []", "user": "56afb527e4b061e3ca319ad7"}, {"problem": 30, "code": "(fn [input] (reverse (reduce (fn [lst el] (if (= el (first lst)) lst (conj lst el)))'() input)))", "user": "53e92f82e4b036ad0777e49d"}, {"problem": 30, "code": "(fn [x]\n  (loop [prev nil x (seq x) result []]\n    (if (empty? x)\n      result\n      (recur (first x) (rest x) (if (= (first x) prev) result (conj result (first x)))))))", "user": "5694129de4b0dcc4269f410c"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) [] x))", "user": "56941e48e4b0dcc4269f410d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56942970e4b0dcc4269f4118"}, {"problem": 30, "code": "(fn [coll]\n  (reduce\n   (fn [a x]\n     (if (= (last a) x)\n       a\n       (concat a [x])))\n   '() coll))", "user": "566096d0e4b068f2fe63dc5a"}, {"problem": 30, "code": "#(loop [ss % l nil r '[]]\n      (if (not (first ss))\n        r\n        (if (= l (first ss))\n          (recur (rest ss) l r)\n          (recur (rest ss) (first ss) (conj r (first ss))))))", "user": "56a1fce9e4b0542e1f8d14b7"}, {"problem": 30, "code": "#(reduce (fn [coll x]\n           (if (= (last coll) x)\n             coll\n             (conj coll x)))\n         []\n         %)", "user": "56b18445e4b0982f16b37dee"}, {"problem": 30, "code": "#(seq (reduce (fn [target e] (if (= e (peek target)) target (conj target e))) '[] %))", "user": "56b3146ae4b0982f16b37e0f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5693b40ce4b0dcc4269f4107"}, {"problem": 30, "code": "(fn cl [sq] (reverse \n             (reduce \n              #(if (= (first %) %2) \n                 % \n                 (conj % %2))\n              nil sq)))", "user": "56b36283e4b0982f16b37e18"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 30, "code": "(fn [s]\n    (loop [s s result []]\n      (if (empty? s)\n\t    result\n\t    (recur (rest s) (if (= (first s) (last result)) result (conj result (first s)))))))", "user": "569429c7e4b0dcc4269f411a"}, {"problem": 30, "code": "reduce (fn [acc v]\n          (if (or (empty? acc) (not= v (last acc)))\n            (conj acc v)\n            acc)) []", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 30, "code": "reduce \n  #(if (= (last %1) %2)\n    %1\n    (conj %1 %2))\n  []", "user": "526e84b5e4b03e8d9a4a732d"}, {"problem": 30, "code": "(fn [x]\n  (loop [x x last nil new []]\n   (if (empty? x)\n     new\n    (recur (rest x) (nth x 0) \n    \t(if (= last (nth x 0))\n          new\n          (conj new (nth x 0))))\n    )\n  )\n)", "user": "5694292ee4b0dcc4269f4113"}, {"problem": 30, "code": "(fn [a] (seq (reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) [] a)))", "user": "5655e056e4b0f9d632dd849b"}, {"problem": 30, "code": "#(loop [s % r (if (string? %) [] (empty %))]\n   (if (empty? s)\n     (if (string? %)\n       (apply str r)\n       r)\n     (recur (rest s)\n            (if (= (first s)\n                   (last r))\n              r\n              (conj r (first s))))))", "user": "56ae7589e4b03c432f187360"}, {"problem": 30, "code": "(fn\n  [col]\n  (seq (reduce #(if (= (last %) %2)\n                 %\n                 (conj % %2))\n               []\n               (seq col))))", "user": "56b1ab17e4b0982f16b37df1"}, {"problem": 30, "code": "(fn myfn [x]\n  (reverse (reduce\n    (fn [a y]\n      (if (= (first a) y)\n        a\n        (conj a y)))\n    () x)))", "user": "56b280e3e4b0982f16b37e06"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "56942962e4b0dcc4269f4117"}, {"problem": 30, "code": "(fn joo [s]\n  (loop [d '() r s]\n    (cond\n      (empty? r) (reverse d)\n      (= (first d) (first r)) (recur d (rest r))\n      :else (recur (cons (first r) d) (rest r)))))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 30, "code": "reduce (fn [xs x]\n           (if\n             (not (= (last xs) x)) (conj xs x)\n             xs))\n         []\n\n; #(map first (partition-by identity %))", "user": "56b295f7e4b0982f16b37e08"}, {"problem": 30, "code": "#(reduce (fn [ac v] (if (= (last ac) v) ac (conj ac v))) [] %)", "user": "53307a23e4b019098a6f8b5d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 30, "code": "(fn compress [col]\n  (let [xs (seq col)\n        head (first xs)\n        tail (rest xs)]\n    (if (empty? xs)\n      nil\n    (if (= head (first tail))\n      (compress tail)\n      (cons head (compress tail))))))", "user": "569ce7e6e4b0542e1f8d146d"}, {"problem": 30, "code": ";after 1.7 just use \"dedupe\", sigh.\n#(map first (partition-by identity %))", "user": "56a7be01e4b07966d5a8a05e"}, {"problem": 30, "code": "(fn [xs] (seq (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] xs)))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 30, "code": "(fn [col] (reduce #(if (= (last %) %2) % (conj % %2)) [] col))", "user": "56b965d9e4b0f26550335931"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56b97792e4b0f26550335932"}, {"problem": 30, "code": "(fn [coll] (loop [[part & remain] (reverse coll) acc nil prev nil] (if part (recur remain (if (= prev part) acc (conj acc part)) part) acc)))", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 30, "code": "(fn [xs]\n  (reduce \n   (fn [x1 x2]\n     (if (= (last x1) x2) x1 (conj x1 x2)))\n   [] xs ))", "user": "563cdfdfe4b0bfe05bf11840"}, {"problem": 30, "code": "#(loop [y nil x (seq %) z []]\n    (if (> (count x) 0)\n      (recur (first x) (rest x) (if (= (first x) y)\n        z\n        (conj z (first x))\n      ))\n      (seq z)))", "user": "5669eb9ae4b04acd4f672e02"}, {"problem": 30, "code": "(fn compress [x]\n  (let [compress*\n        (fn [acc x*]\n          (if (not= (last acc) x*)\n                (conj acc x*)\n                acc))]\n    (reduce compress* [] x)))", "user": "5694284de4b0dcc4269f410f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56942939e4b0dcc4269f4114"}, {"problem": 30, "code": "(fn [li]\n  (reverse \n    (reduce \n      #(if (= (first %) %2)\n        %\n        (cons %2 %)\n      )\n    \n    '()\n    li\n   ))\n)", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 30, "code": "(fn compress [x]\n  (when-let [[i & j] (seq x)] \n    (if (= i (first j)) \n      (compress j) \n      (cons i (compress j)))))", "user": "56942944e4b0dcc4269f4115"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56b86e64e4b0f26550335924"}, {"problem": 30, "code": "reduce #(if (= (take-last 1 %1) (list %2)) %1 (concat %1 (list %2))) (list)", "user": "56bb9ccce4b0f26550335959"}, {"problem": 30, "code": "(fn [src]\n  (loop [input (seq src)\n         output []]\n    (cond\n     (empty? input) (seq output)\n     (= (first input) (second input)) (recur (drop 1 input) output)\n     :else (recur (drop 1 input) (conj output (first input))))))", "user": "56b755b5e4b0982f16b37e46"}, {"problem": 30, "code": "(fn abc\n  [L]\n  (if (= (count L) 1)\n    L\n    (if (= (first L) (second L))\n      (abc (rest L))\n      (cons (first L) (abc (rest L)))\n    )\n  )\n)", "user": "56bb3a4be4b0f26550335951"}, {"problem": 30, "code": "(fn [xs]\n    (reverse\n      (reduce (fn [acc x]\n                (if (= x (first acc))\n                  acc\n                  (cons x acc)))\n              '()\n              xs)))", "user": "56bcc2b2e4b0f26550335965"}, {"problem": 30, "code": "(fn f [s] (let [c (first s) r (drop-while #{c} (rest s))] (cons c (if-not (empty? r) (f r)))))", "user": "56baa68ce4b0f26550335947"}, {"problem": 30, "code": "(fn compress [s] (conj (into [] (map first (filter #(not (= (first %1) (second %1)))\n          (map list s (rest s))))) (last s)))", "user": "56baab13e4b0f26550335948"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "531a0709e4b08068f379ed87"}, {"problem": 30, "code": "reduce (fn [x y] (if (= (last x) y)\n                        x\n                        (concat x (list y)) )) '()", "user": "56bca51ae4b0f26550335963"}, {"problem": 30, "code": "(fn [coll]\t\n  (loop [r (list (first coll))\n           ext (rest coll)]\n      (if (empty? ext)\n        r\n        (recur (if (= (last r) (first ext))\n                 r\n                 (concat r (list (first ext))))\n               (rest ext)))))", "user": "54a80855e4b09f271ff37c9e"}, {"problem": 30, "code": "#(loop [acc [] remaining %]\n   (if (empty? remaining)\n     (seq acc)\n     (if (not= (last acc) (first remaining))\n       (recur (conj acc (first remaining)) (rest remaining))\n       (recur acc (rest remaining)))))", "user": "56b2300ce4b0982f16b37dff"}, {"problem": 30, "code": "(fn compress [coll]\n  (if-let [x (first coll)]\n    (concat (list x)\n            (compress (drop-while (partial = x) coll)))\n    nil))", "user": "56ba1406e4b0f2655033593c"}, {"problem": 30, "code": "; dedupe\n(fn [coll] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [(first coll)] coll))", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "56012cd7e4b04bb52996e17d"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) %\n          (conj % %2)) []", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 30, "code": "(fn [s] (loop [y (list (first s)) s (next s)] (if (empty? s) (rseq (into [] y)) (recur (let [l (first y) n (first s)] (if (not= l n) (conj y n) y)) (next s)))))", "user": "56bdda49e4b0f26550335977"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "555d4421e4b0a2eb076a39a8"}, {"problem": 30, "code": "(fn lp [xs]\n  (lazy-seq \n   (if-let [xs (seq xs)]\n    (if (= (first xs) (second xs))\n      (lp (rest xs))\n      (cons (first xs) (lp (rest xs)))))))", "user": "4eaa5c51535d7eef3080730a"}, {"problem": 30, "code": "reduce (fn [coll, x] (if (= (last coll) x) coll (conj coll x))) []", "user": "56c1549ae4b0839206b9d686"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "56b80ad1e4b0f26550335921"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "569637d8e4b0dcc4269f4130"}, {"problem": 30, "code": "(fn compress [xs]\n  (if (= 0 (count xs))\n    '()\n    (conj\n      (compress (drop-while #(= (first xs) %) (rest xs)))\n      (first xs))))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 30, "code": "(fn compress\n  [coll]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll))", "user": "5609d328e4b05f002753deee"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56c33ceae4b05cc29241ee89"}, {"problem": 30, "code": "(fn \n  [coll]\n  (map first (partition-by identity coll)))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 30, "code": "#(\n  loop [remColl (rest %) newColl [(first %)]]\n  \t(if (empty? remColl)\n      (reverse newColl)\n      (if (= (first remColl) (first newColl))\n        (recur (rest remColl) newColl)\n        (recur (rest remColl) (cons (first remColl) newColl)))))", "user": "56c0aeb8e4b060a8e693e3af"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 30, "code": "(fn __\n  ([[f & e]] (__ e (conj [] f) f))\n  ([[f & e] r p] (if (nil? f) r (if (= f p) (__ e r p) (__ e (conj r f) f)))))", "user": "55e206f3e4b050e68259b429"}, {"problem": 30, "code": "(fn compress [s]\n  (reduce #(if (= (last %1) %2)\n             %1\n             (conj %1 %2)\n             ) [] s))", "user": "56c6490de4b05cc29241eeaf"}, {"problem": 30, "code": "(fn [s]\n  (loop [in s\n         out []]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (if (= (first in) (last out))\n               out\n               (conj out (first in)))))))", "user": "56c1e720e4b0839206b9d68b"}, {"problem": 30, "code": "#(loop [f (first %), remain (next %), result [(first %)]]\n   (if (empty? remain)\n     result\n     (recur (first remain) (next remain)\n            (if (= f (first remain))\n               result\n               (conj result (first remain))\n               )\n            )\n     )\n   )", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 30, "code": "(fn [data]\n  (loop [result [] index 0]\n    (if (< index (count data))\n      (if (= index 0)\n        (recur (conj result (nth data index)) (inc index))\n        (if (= (nth data index) (nth data (dec index)))\n          (recur result (inc index))\n          (recur (conj result (nth data index)) (inc index))))\n      (seq result))))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 30, "code": "(fn func [s]\n  (loop [prev :dummyprev s (seq s) res []]\n    (if (empty? s) res (recur (first s) (rest s) (if (= (first s) prev) res (conj res (first s)))))))", "user": "55f95782e4b03cbcff9738bf"}, {"problem": 30, "code": "#(reduce  (fn [one two] \n            (if (= (last one) two)\n              one\n              (conj one two))) \n          [] \n          %)", "user": "54d5343fe4b0a52adc2e200a"}, {"problem": 30, "code": "(fn remove-dublicates [s]\n  (loop [result []\n         s (seq s)]\n    (if (empty? s)\n      result\n      (if (= (last result) (first s))\n        (recur result (rest s))\n        (recur (conj result (first s)) (rest s))))))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] x))", "user": "54b8dfece4b0ed20f4ff6e9a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56c33bb9e4b05cc29241ee87"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56c23ca6e4b05cc29241ee7f"}, {"problem": 30, "code": "#(cons (first %) (map first (filter (fn [[a b]] (not= a b)) (map vector (rest %) %))))\r\n\r\n;(fn x [seq] (cond (empty? seq) seq (empty? (rest seq)) seq (= (first seq) (second seq)) (x (rest seq)) :else (cons (first seq) (x (rest seq)))))", "user": "566470b9e4b0e91d5f5c5658"}, {"problem": 30, "code": "(fn [input] \n  (reduce (fn [x y]\n            (if (= (last x) y) x (conj x y))) \n          [] input))", "user": "56c12aa2e4b0839206b9d682"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56a37ccee4b0542e1f8d14cb"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 30, "code": "#(filter (comp not nil?) (map (fn [[i j]] (when (not= i j) i)) (partition 2 1 [nil] %)))", "user": "56aed78fe4b03c432f187363"}, {"problem": 30, "code": "(partial reduce\n    (fn [ans val]\n      (if (not= val (last ans))\n        (concat ans [val])\n        ans\n        )\n      )\n    '()\n)", "user": "56c72507e4b0ed865f9758b7"}, {"problem": 30, "code": "(fn [s]\n  (map first (partition-by identity s))\n  )", "user": "56c9970ce4b0ed865f9758de"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 30, "code": "(fn [s] (seq(reduce #(if (not= %2 (last %1)) (conj %1 %2) %1) [] s)))", "user": "56c08c7fe4b060a8e693e3ab"}, {"problem": 30, "code": "(fn solve [t] (loop [target t acc []] (cond\n                                       (empty? target) \n                                       \tacc\n                                       (= (last acc) (first target)) \n                                       \t(recur (rest target) acc)\n                                       :else (recur (rest target) (conj acc (first target)))\n                                       )))", "user": "56af842de4b061e3ca319ad2"}, {"problem": 30, "code": "(fn remove-consec-dup [s]\n  (loop [fin '() i 0]\n    (if (>= i (count s))\n      fin\n      (let [inci (inc i) chr (nth s i)]\n        (if (and (> i 0) (= chr (nth s (dec i))))\n          (recur fin inci)\n          (recur (concat fin (list chr)) inci))))))", "user": "56cbb98ae4b0ea9b8538f739"}, {"problem": 30, "code": "(fn [s] (reduce \n   #(if-not (= (last %1) %2) \n      (conj %1 %2) %1) \n   [] s))", "user": "54aa2462e4b09f271ff37cb4"}, {"problem": 30, "code": "(fn [coll]\n   (loop [v []\n          i 0]\n     (if (= i (count coll))\n       v\n       (recur (if (not= (last v) (nth coll i) )\n                (conj v (nth coll i))\n                v) (inc i)))))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "55cde24ae4b0e31453f64a23"}, {"problem": 30, "code": "#(loop [last-val nil s % t '()]\n          (if (empty? s)\n             (reverse t) ;--return\n            (if (= last-val (first s))\n              (recur (first s ) (rest s) t)\n              (recur (first s ) (rest s)(cons (first s) t )))))", "user": "56c1f470e4b0839206b9d68c"}, {"problem": 30, "code": "(fn [input] (reduce (fn [resultColl item] (if (= (last resultColl) item) resultColl (conj resultColl item))) [] input))", "user": "506af7d8e4b0a2a5463de37d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56cccd99e4b0ea9b8538f743"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56c792ace4b0ed865f9758c4"}, {"problem": 30, "code": "(fn [coll]\n    (loop [coll coll\n           prev nil\n           answer ()]\n      (cond\n       (nil? coll) (reverse answer)\n       (= prev (first coll)) (recur (next coll) prev answer)\n       :else (recur (next coll) (first coll) (conj answer (first coll))))))", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 30, "code": "#(reduce \n(fn [res c] (if (= c (last res)) res (conj res c)))\n[] %1)", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 30, "code": "(fn compress [coll]\n  (if (empty? coll)\n    coll\n    (if (= (first coll) (second coll)) \n      (compress (rest coll))\n      (conj (compress (rest coll)) (first coll)))))", "user": "56cb3a61e4b0ea9b8538f726"}, {"problem": 30, "code": "(fn func [l] (if (empty? l) [] (if (= (first l) (second l)) (func (rest l)) (cons (first l) (func (rest l))))))", "user": "56cb483ee4b0ea9b8538f72d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56cb3bebe4b0ea9b8538f728"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [ls el]\n            (if (= el (last ls))\n              ls\n              (reverse (cons el (reverse ls)))))\n          '() s))", "user": "550b1c2ce4b06e50f9beb13b"}, {"problem": 30, "code": "(fn \n  [x]\n  (reduce\n    (fn [acc ele]\n      (if-not (= (last acc) ele)\n        (conj acc ele )\n        acc))\n    (vector (first x))\n    (rest x)))", "user": "56cdda13e4b0ea9b8538f752"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56942955e4b0dcc4269f4116"}, {"problem": 30, "code": "#(for [z  (partition-by identity %)] (first z))", "user": "55c5e781e4b0e31453f649b8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 30, "code": "(fn [coil]\n  (loop [src coil result '()]\n    (if (empty? src)\n      result\n      (recur (butlast src)\n             (if (= (first result) (last src))\n               result\n               (conj result (last src)))))))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 30, "code": "(fn [xs] (reduce (fn [x x2] (if (= (last x) x2) x (conj x x2))) [] xs))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 30, "code": "#(reduce (fn [pre nex] (if (= (last pre) nex) pre (concat pre (list nex)))) (list) %)", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 30, "code": "(fn uniq [lst] (if (empty? lst) [] (if (= (first lst) (second lst)) (uniq (rest lst)) (cons (first lst) (uniq (rest lst))))))", "user": "562add6de4b00e49c7cb4834"}, {"problem": 30, "code": "#(reduce (fn [acc x] (if (not= (last acc) x) (conj acc x) acc)) [] %)", "user": "56c77858e4b0ed865f9758c0"}, {"problem": 30, "code": "(fn compress [coll]\n  (reduce\n    #(if (= (last %1) %2) \n      %1 \n      (conj %1 %2))\n    []\n    coll))", "user": "56cddf9de4b0ea9b8538f753"}, {"problem": 30, "code": "(fn [coll]\n   (reduce (fn [res y]\n\t             (if (not= (last res) y) (conj res y) res))\n    \t       []\n        \t   coll))", "user": "56cbb352e4b0ea9b8538f738"}, {"problem": 30, "code": "#(if (string? %) \n    \n   \t(reduce (fn [r x] \n         (if (= (-> r (first)) x) \n           r \n           (cons x r))) [] (reverse (map (fn [y] (str y)) %)))\n    (seq (reduce \n          (fn [r x] (if (= (-> r (first)) x) \n           \tr \n           \t(cons x r))) [] (reverse %))))", "user": "56c3afdde4b05cc29241ee91"}, {"problem": 30, "code": "(fn noreps [s]\n  (loop [new '() old s]\n    (if (empty? old)\n      new\n      (if (= (first old) (last new))\n        (recur new (rest old))\n        (recur (concat new [(first old)]) (rest old))))))", "user": "548a3dc6e4b0e286459a11f2"}, {"problem": 30, "code": "(fn [[x y & xs]] \n  (loop [x x, y y, xs xs, ls []]\n    (if (nil? x) ls\n      (if (= x y) \n        (recur y (first xs) (drop 1 xs) ls)\n        (recur y (first xs) (drop 1 xs) (conj ls x))))))", "user": "56433d34e4b08d4f616f5f23"}, {"problem": 30, "code": "#(loop [sq % lst nil rst []]\n   (if (empty? sq)\n       rst\n       (if (= (first sq) lst)\n           (recur (rest sq) (first sq) rst)\n           (recur (rest sq) (first sq) (conj rst (first sq))))))", "user": "56be8649e4b0f26550335983"}, {"problem": 30, "code": "(fn [str1] (reduce (fn [col x] (if (= (last col) x) col (conj col x))) [] str1))", "user": "56b49f72e4b0982f16b37e23"}, {"problem": 30, "code": "(fn compress\n  [seq]\n  (reduce (fn [compressed e] (if (= (last compressed) e) compressed (concat compressed (list  e)))) '() seq))", "user": "56cf9d4fe4b0ea9b8538f76c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5002c798e4b0678c553fc42d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 30, "code": "(fn my-compress\n  [seq]\n  (if (empty? seq)\n    '()\n    (if (= (first seq) (second seq))\n      (my-compress (rest seq))\n      (conj (my-compress (rest seq)) (first seq)))))", "user": "56cb0abce4b0ea9b8538f722"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "56cb7096e4b0ea9b8538f732"}, {"problem": 30, "code": "reduce (fn [x y] (if (= (last x) y) x (concat x (list y)))) []", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56cb3acfe4b0ea9b8538f727"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56d228f3e4b0ea9b8538f79a"}, {"problem": 30, "code": "(fn [a] (reduce #(if (= %2 (last %)) % (conj % %2)) [] a))", "user": "4f2858ece4b0d6649770a016"}, {"problem": 30, "code": "(fn [x]\n  (loop [ls (rest x)\n         return (list (first x))]\n    (if (nil? (first ls))\n      return\n      (recur (rest ls)\n             (if (= (first ls)\n                    (last return))\n               return\n               (concat return [(first ls)]))))))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (peek %) %2) % (conj % %2)) [] x))", "user": "4de14aad535d08e6dec9fde5"}, {"problem": 30, "code": "#(reduce (fn[a b] \n           (if (= b (last a))\n             a\n             (conj a b))) [] (seq %))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 30, "code": "(fn dedup [l]\n  (loop [x l accum []]\n    (if (empty? x)\n      accum\n      (if (= (first x) (last accum))\n        (recur (rest x) accum)\n        (recur (rest x)  (conj accum (first x)))))))", "user": "56cf80f9e4b0ea9b8538f76a"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2)\n          %1\n          (into %1 [%2])) []", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 30, "code": "(fn [input]\n    (loop [in input\n           last nil\n           output '()]\n      (if (not= (first in) last)\n        (conj output (first in)))\n        ;;(str output (first in)))\n      (if (empty? in)\n        (reverse output)\n        (recur \n          (rest in)\n          (first in)\n          (if (not= (first in) last)\n            (conj output (first in))\n            output)))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 30, "code": "(letfn [(g [x] (seq (if (empty? x) x (reduce (fn [c v] (if (= (peek c) v) c (conj c v))) [(first x)] (rest x)))))] g)", "user": "55b6a63ae4b01b9910ae299b"}, {"problem": 30, "code": "(fn [coll] (reverse (reduce #(if (= (peek %) %2) % (conj % %2)) () coll)))", "user": "56d69d28e4b0ea9b8538f7cf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 30, "code": "(fn [s]\n  (map #(first %) (partition-by identity s)))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 30, "code": "(fn [in] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() in)))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 30, "code": "#(loop [lst %\n        accum []]\n   (if (empty? lst) accum\n     (recur (rest lst)\n            (if (= (first lst) (last accum))\n              accum\n              (conj accum (first lst))))))", "user": "56d8a63fe4b0ea9b8538f7e8"}, {"problem": 30, "code": "(fn [coll]\n  (reduce \n   (fn\n     [latest-result next-value]\n     (if (= next-value (last latest-result))\n       latest-result\n       (conj latest-result next-value))\n     )\n   []  \n   coll \n   ) \n)", "user": "56d74c88e4b0ea9b8538f7d9"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (concat % (list %2))) '()", "user": "56d957c2e4b0ea9b8538f7f1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 30, "code": "#(reduce (fn [a e] (if (= e (last a)) a (conj a e))) [] %)", "user": "56d8fa43e4b0ea9b8538f7ec"}, {"problem": 30, "code": "(fn [s] (first  (reduce (fn [[res prev] v]\n                           (if (= v prev)\n                             [res prev]\n                             [(conj res v) v])) [[] nil] s)))", "user": "560ee566e4b05f002753df57"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "567d75ebe4b05957ce8c61c9"}, {"problem": 30, "code": "(fn [arg] (map first (partition-by identity arg)))", "user": "52c634b1e4b0c2d177d6210a"}, {"problem": 30, "code": "(fn [s]\n  (loop [in s out [] prev nil]\n    (if (empty? in)\n      (seq out)\n      (recur (rest in)\n             (if (not= (first in) prev)\n               (conj out (first in))\n               out)\n             (first in)))))", "user": "56dbe1f4e4b0ea9b8538f813"}, {"problem": 30, "code": "#(reduce\n  (fn [acc, v]\n    (if-not (= (last acc) v)\n      (conj acc v)\n      acc)) [] (apply list %))", "user": "5527be83e4b0ffed3738f936"}, {"problem": 30, "code": "(fn leroy [coll]\n     (when-let [[f & r] (seq coll)]\n       (if (= f (first r))\n         (leroy r)\n         (cons f (leroy r)))))", "user": "56b3b12ee4b0982f16b37e1c"}, {"problem": 30, "code": "(fn [input]\n  (cons\n  \t(first input)\n  \t(for [c (range 1 (count input))\n  \t\t:let [cth (nth input c)]\n        :when (not= cth (nth input (dec c)))]\n        cth)))", "user": "56c5db15e4b05cc29241eeac"}, {"problem": 30, "code": "reduce (fn [result next-val] \n         (if-not (= (last (seq result)) \n           next-val) \n         (conj result next-val) result)\n) []", "user": "56cc34aee4b0ea9b8538f73c"}, {"problem": 30, "code": "#(if (empty? %)\n    %\n    (first\n     (reduce (fn [[acc last] x]\n               (if (= x last)\n                 [acc last]\n                 [(conj acc x) x]))\n             [[(first %)] (first %)]\n             (rest %))))", "user": "56dc34a3e4b0ea9b8538f816"}, {"problem": 30, "code": "(fn [xs]\n  (reduce\n   (fn [v current-value]\n     (let [pred-value (last v)]\n       (if (= pred-value current-value)\n         v\n         (conj v current-value))))\n   []\n   xs))", "user": "55e22f54e4b050e68259b42e"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [compressed val]\n            (if (= (last compressed) val)\n              compressed\n              (conj compressed val)))\n          [(first coll)]\n          (rest coll)))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 30, "code": "(fn remove-dups [coll]\n  (conj (map last (filter (fn [[x y]] (not= x y))\n                          (partition 2 1 coll)))\n        (first coll)))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56c749d8e4b0ed865f9758ba"}, {"problem": 30, "code": "(fn [x]\n  (reduce (fn [acc c]\n            (if (not= (last acc) c)\n              (conj acc c)\n              acc))\n          []\n          x))", "user": "5628f727e4b00e49c7cb47f5"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "53b530c6e4b047364c0444bc"}, {"problem": 30, "code": "(fn [s]\n  \n  (reduce #(if (= %2 (last %1))\n             %1\n             (conj %1 %2)) [] s))", "user": "56308326e4b073c1cf7a9be9"}, {"problem": 30, "code": "(fn [col] (map first (partition-by identity col)))", "user": "546b89ffe4b00cfc9eacc16d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56e08e4fe4b0ca2494a0960b"}, {"problem": 30, "code": "(fn [col]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] col))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 30, "code": "(fn [a-seq] \n  (loop [acc []\n         sq a-seq]\n    (let [head (first sq)\n         tail (rest sq)]\n    (cond (empty? sq) acc\n          (= (last acc) (first sq))\n          (recur acc tail)\n          :default\n          (recur (conj acc head) tail)))))", "user": "56b6a50ae4b0982f16b37e3c"}, {"problem": 30, "code": "(fn [s]\n  (loop [[x & xs :as all] s\n         res []]\n    (if (empty? all)\n      res\n      (if (= x (last res))\n        (recur xs res)\n        (recur xs (conj res x))\n        )\n      )\n    )\n  )", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 30, "code": "(fn dedupe [x] (cond (empty? x) '() (= (first x) (second x)) (dedupe (rest x)) :else (concat (list (first x)) (dedupe (rest x)))))", "user": "56e227a8e4b03a7c14b85a31"}, {"problem": 30, "code": "(fn cmpr \n  ([coll] (cmpr (rest coll) [(first coll)]))\n  ([coll sofar]\n   (if (empty? coll)\n     (reverse sofar)\n     (if (= (first coll) (first sofar))\n       (cmpr (rest coll) sofar)\n       (cmpr (rest coll) (cons (first coll) sofar))\n       )\n     )\n   )\n  )", "user": "56de0db0e4b0ea9b8538f83a"}, {"problem": 30, "code": "(fn [l]\n  (loop [xs l accu ()]\n    (if (empty? xs)\n      (reverse accu)\n      (recur\n       (rest xs)\n       (if (= (first xs) (first accu))\n         accu\n         (cons (first xs) accu)\n         )\n       )\n      )\n    )\n  )", "user": "55009d17e4b07d26eda61d5d"}, {"problem": 30, "code": "(fn [l] \n  (reduce \n    #(if-not (= (last %1) %2)\n       (conj %1 %2)\n       %1) [] l))", "user": "524f4162e4b0541d1855b806"}, {"problem": 30, "code": "#(->> %\n      (partition-by identity)\n      (map first)\n      )", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56e4a6c1e4b03a7c14b85a51"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56e4427ce4b03a7c14b85a4c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53cd5226e4b00fb29b2212e0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "563cce5be4b0bfe05bf1183f"}, {"problem": 30, "code": "#(reverse (reduce (fn[a x] (if (= x (first a)) a (cons x a))) '() %))", "user": "56050f06e4b08b23635d3161"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "56bf78dae4b0f26550335989"}, {"problem": 30, "code": "(fn my-dedupe\n  [seq]\n  (reduce (fn [acc e]\n            (if (= (last acc) e) acc (conj acc e))) [] seq))", "user": "569f7bc2e4b0542e1f8d1494"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2) ) []", "user": "527bd988e4b03e8d9a4a759d"}, {"problem": 30, "code": "(fn rem-dup [coll]\n  (if (= (count coll) 1) coll\n    (if (= (first coll) (second coll))\n      (rem-dup (rest coll))\n      (conj (rem-dup (rest coll)) (first coll)))))", "user": "56e53d2fe4b02e7e935eb6bc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [acc e]         \n            (if (= (last acc) e)\n              acc              \n              (conj acc e)))  \n          []\n          coll))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53ecaf1ce4b0d648e757f4b4"}, {"problem": 30, "code": "#(reduce (fn [acc next] (if (= (last acc) next) acc (conj acc next))) [(first %)] (rest %))", "user": "56e05bfce4b0ca2494a09606"}, {"problem": 30, "code": "#(loop [coll %\n        prev nil\n        result []]\n   (cond\n    (empty? coll) result\n    (= prev (first coll)) (recur (rest coll) (first coll) result)\n    :else (recur (rest coll) (first coll) (conj result (first coll)))))", "user": "56e6ef89e4b02e7e935eb6d0"}, {"problem": 30, "code": "(fn [ls]\n  (let [s (seq ls)\n        itr (fn rec [ls a]\n              (cond (empty? ls) (reverse a)\n                    (empty? (rest ls)) (reverse (cons (first ls) a))\n                    (= (first ls) (second ls)) (rec (rest ls) a)\n                    :else (rec (rest ls) (cons (first ls) a))))]\n    (itr s '())))", "user": "56d7f340e4b0ea9b8538f7df"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "563a79e5e4b0bfe05bf117fe"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "56e7d877e4b02e7e935eb6df"}, {"problem": 30, "code": "(fn [col]\n  (loop [current (first col)\n         remaining (rest col)\n         previous nil\n         result []]\n    (if current\n      (if (= current previous)\n        (recur (first remaining) (rest remaining) previous result)\n        (recur (first remaining) (rest remaining) current (conj result current)))\n      result)))", "user": "56c427bbe4b05cc29241ee94"}, {"problem": 30, "code": "#(reverse (reduce\n    (fn [list number]\n      (if\n          (= (first list) number)\n          list\n          (cons number list)))\n    (reverse (distinct (take 2 %))) (drop 2 %)))", "user": "56c560ede4b05cc29241eea6"}, {"problem": 30, "code": "#(loop [x %\n        sq [(first x)]]\n   (if (not-empty x)\n     (recur (rest x) (if (not= (last sq) (first x)) (conj sq (first x)) sq))\n     sq))", "user": "56491d05e4b0284900eef63a"}, {"problem": 30, "code": "#((fn [uniq queue]\n  (cond\n    (empty? queue) uniq\n    (= (last uniq) (first queue)) (recur uniq (rest queue))\n    :else (recur (conj uniq (first queue)) (rest queue)))) [] %)", "user": "56e6d049e4b02e7e935eb6cd"}, {"problem": 30, "code": "(fn [l]\n  (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] l)\n \n )", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5258d2abe4b0cb4875a45cc1"}, {"problem": 30, "code": "(fn [x] (loop [[head & more] x, acc [], pre nil] (if more (if (= head pre) (recur more acc head) (recur more (into acc [head]) head)) (if (= pre head) acc (into acc [head])))))", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 30, "code": "(fn remdup\n  [l]\n  (cond\n   (empty? l) '()\n   (= (first l) (second l))\n      (remdup (rest l))\n  :else\n   (cons (first l)\n         (remdup (rest l)))))", "user": "56e8ef93e4b04a395b9a03f4"}, {"problem": 30, "code": "#(reduce (fn [xs x] (if (= (last xs) x) xs (conj xs x))) [] %)", "user": "56e06625e4b0ca2494a09607"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "56e9555fe4b04a395b9a03f7"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "528e7740e4b0239c8a67aee0"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "568c92c6e4b0dcc4269f40b8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56ea8d33e4b04a395b9a040a"}, {"problem": 30, "code": "(partial reduce \n  (fn [acc, x] \n    (if-not (= x (last acc))\n      (conj acc x)\n      acc))\n  [])", "user": "56e02c1ce4b0ca2494a09602"}, {"problem": 30, "code": "(fn [y] (loop [x (seq y) z '() p nil]\n          (if (empty? x)\n            (reverse z)\n          (if (= (first x) p)\n            (recur \n             (rest x) \n             z \n             (first x)\n            )\n            (recur\n             (rest x)\n             (conj z (first x))\n             (first x)\n          ))\n            ))\n  )", "user": "56d325ace4b0ea9b8538f7a9"}, {"problem": 30, "code": "(fn compress-a-sequence [xs]\n  (map first (partition-by identity xs)))", "user": "518b8561e4b0f028e99addef"}, {"problem": 30, "code": "(fn f\n    ([coll] (f coll nil))\n    ([coll prev]\n      (if (empty? coll)\n        '()\n        (if (= (first coll) prev)\n           (f (rest coll) prev)\n           (cons (first coll) (f (rest coll) (first coll)))))))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 30, "code": "#(\n(fn aux [a l]\n  (if  (empty? l )\n    l\n    (if (= (first l) a)\n      (aux a (rest l))\n      (conj (aux (first l) l) (first l))\n     )\n  )\n)\nnil % )", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 30, "code": "#(reduce (fn [l v] (if-not (= v (last l)) (conj l v) l)) [] %)", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 30, "code": "(fn removedup [x] \n  (if (< (count x) 2)\n    x\n    (if (= (first x) (nth x 1))\n     (removedup (rest x)) \n     (conj \n      (removedup (rest x))\n      (first x)\n     )\n    )\n  )\n)", "user": "56ea8b75e4b04a395b9a0409"}, {"problem": 30, "code": "(fn remove-consecutive-duplicates [coll]\n  (loop [next (first coll) others (rest coll) result '()]\n    (if (empty? others)\n      (reverse (conj result next))\n      (if (= next (first others))\n        (recur (first others) (rest others) result)\n        (recur (first others) (rest others) (conj result next))))))", "user": "4fb85651e4b081705acca2d7"}, {"problem": 30, "code": "(fn compress [acc l]\n  (if (empty? l)\n    acc\n    (let [[x & xs] l p (last acc)]\n      (if (= x p)\n        (compress acc xs)\n        (compress (concat acc [x]) xs))))) '()", "user": "56ec3a97e4b04a395b9a0433"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 30, "code": "(fn [s]\n  (reduce\n  \t(fn [acc e]\n      (if (= (last acc) e)\n        acc\n        (conj acc e)))\n\t[]\n   \ts))", "user": "56d2a103e4b0ea9b8538f7a3"}, {"problem": 30, "code": "(fn compress-a-sequence\n  [colls]\n  (loop [compressed [] x (first colls) xs (rest colls)]\n    (if (empty? xs)\n      (conj compressed x)\n      (if (= x (first xs))\n        (recur compressed (first xs) (rest xs))\n        (recur (conj compressed x) (first xs) (rest xs))))))", "user": "560d4994e4b05f002753df3c"}, {"problem": 30, "code": "(fn [x] (let [s (filter #(not (= (first %) (second %))) (partition 2 1 x))] \r\n       (concat (map first (butlast s)) (last s))))", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56eed056e4b04a395b9a0454"}, {"problem": 30, "code": "reduce (fn [r x] \n         (cond (empty? r) (conj r x)\n               (not= (last r) x) (conj r x)\n               :else r)) []", "user": "56ee0691e4b04a395b9a044c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56f000aee4b04a395b9a0469"}, {"problem": 30, "code": "(fn [n]\n  (map first (partition-by identity n)))", "user": "562a58e8e4b00e49c7cb4822"}, {"problem": 30, "code": "(fn [x] (loop [acc [] s x] \n\t\t\t\t(if (nil? (first s)) \n\t\t\t\t\tacc \n\t\t\t\t\t(recur \n\t\t\t\t\t\t(if-not (= (first s) (second s)) (conj acc (first s)) acc) \n\t\t\t\t\t\t(rest s))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)", "user": "56d439d4e4b0ea9b8538f7b6"}, {"problem": 30, "code": "#(reduce (fn [col next] (if (= (last col) next) col (conj col next)))  [] %)", "user": "52ee9ac7e4b05e3f0be25ec9"}, {"problem": 30, "code": "(fn compress [s]\n  (get \n   (reduce \n    (fn [{m :memory r :result} x]\n      (if (= m x) \n        {:memory m :result r}\n        {:memory x :result (conj r x)}))\n    {:memory nil\n     :result []}\n    s)\n   :result))", "user": "554b8b78e4b0a04f7929958d"}, {"problem": 30, "code": "(fn [input] \n                  (\n                     rest (map first (filter #(not= (compare (first %1) (second %1)) 0) \n                                                  (map list (concat '(nil) (seq input)) \n                                                       (concat (seq input) '(nil))))) \n                   ))", "user": "56ef11efe4b04a395b9a045b"}, {"problem": 30, "code": "(fn remove-dups [xs]\n  (map first (partition-by identity xs)))", "user": "56efc9fde4b04a395b9a0464"}, {"problem": 30, "code": "(fn [coll]\n  ((if (string? coll) #(apply str %) #(seq %))\n   (reduce\n    (fn [result element]\n      (if-not (= (last result) element)\n        (conj result element)\n        result))\n    []\n    coll)))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 30, "code": "#(reverse (reduce (fn [x y] (println x y) (if (seq? x) (if (= (first x) y) x (conj x y)) (distinct [y x])))  %))", "user": "51843616e4b02826a645f398"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "5655d811e4b0f9d632dd849a"}, {"problem": 30, "code": "(fn rd [x]\n  (if (= (rest x) ())\n    x\n    (if (= (first x) (first (rest x))) \n      (rd (rest x)) \n      (conj (rd (rest x)) (first x))\n    )\n  )\n)", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 30, "code": ";; \u904d\u5386\u5217\u8868\uff0c\u6bd4\u8f83\u76f8\u90bb\u5143\u7d20\u662f\u5426\u76f8\u7b49\n;; \u4f7f\u7528reduce + \u8fc7\u6ee4\u5668\n#(reduce \n  (fn [a b]\n    (if-not (= (last a) b)\n      (conj a b)\n      a\n    ))\n    [] %1)", "user": "56815e2fe4b0945ebc182a84"}, {"problem": 30, "code": "#(reduce (fn [r i] (if (= (last r) i) r (conj r i))) [] %)", "user": "520e37cfe4b066f3ea161c96"}, {"problem": 30, "code": "(fn [s] (loop [se s res '() previous nil] (if (empty? se) (reverse res) (recur (rest se) (if (= (first se) previous) res (conj res (first se))) (if (= (first se) previous) previous (first se))))))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56f4623ae4b046a417f9205d"}, {"problem": 30, "code": "(partial reduce\n         (fn [acc x]\n           (if (= x (last acc))\n             acc\n             (concat acc [x])))\n         [])", "user": "56f4bf47e4b046a417f92062"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "56efe32ce4b04a395b9a0465"}, {"problem": 30, "code": "(fn remove-dups [s]\n  (reduce (fn [x y] (if (= (last x) y)\n                      x\n                      (conj x y)))\n          [] s))", "user": "56f53962e4b046a417f9206c"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "56efef12e4b04a395b9a0467"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56f18d0ce4b04a395b9a0496"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56d6c18ee4b0ea9b8538f7d1"}, {"problem": 30, "code": "(fn compress-sequence [x]\n    (reduce\n     (fn [accum item]\n       (cond\n         (empty? accum)\n         [item]\n         (= item (last accum))\n         accum\n         true\n         (conj accum item)))\n     []\n     x))", "user": "539f9f79e4b0ca733b97449e"}, {"problem": 30, "code": "(fn [x] (reduce #(if (not (= (last %1) %2)) (conj %1 %2) %1) [] x))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 30, "code": "(fn [ls]\n  (loop [l ls m '()]\n    (if (empty? l)\n      (reverse m)\n      (recur (rest l)\n             (if (= (first l) (first m))\n               m\n               (cons (first l) m))))))", "user": "54961073e4b0b312c081ff62"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn [acc v]\n            (if (= (last acc) v)\n              acc\n              (conj acc v)))\n           [] xs))", "user": "56d30497e4b0ea9b8538f7a8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5602bdf9e4b04bb52996e1a7"}, {"problem": 30, "code": "(fn comp [lst]\n  (if (< (count lst) 2) lst\n    (if (= (first lst) (second lst)) (comp (rest lst))\n      (cons (first lst) (comp (rest lst))))))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56d15251e4b0ea9b8538f78c"}, {"problem": 30, "code": "(fn [x]\n   (reduce #(if (= %2 (last %1))\n              %1\n              (conj %1 %2)) [] x))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 30, "code": "(fn [x] (->> x (partition-by identity) (map distinct) (map first)))", "user": "56e93576e4b04a395b9a03f6"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "56f95915e4b07572ad1a88af"}, {"problem": 30, "code": "(fn [x]\n  (loop [output (vec #{(first x)}) idx 1]\n    (if (= idx (count x))\n      output\n      (recur \n        (if (not= (nth x idx) (last output))\n          (conj output (nth x idx))\n          output)\n        (inc idx)))))", "user": "56f5e6d5e4b046a417f92079"}, {"problem": 30, "code": "(fn compress [lst]\n    (reduce\n        (fn [res el]\n            (if (= (last res) el) res\n                (concat res (list el))))\n        '() lst))", "user": "56ef0a2ee4b04a395b9a045a"}, {"problem": 30, "code": "#(reduce (fn [acc v] (if (= (last acc) v) acc (concat acc (list v)))) '() %)", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "user": "56fa3f7ae4b07572ad1a88bf"}, {"problem": 30, "code": "(fn remdups-consecutive\n  [coll]\n  (let [result (loop [coll coll\n                      acc (empty coll)\n                      found (gensym)]\n                 (if (empty? coll)\n                   acc\n                   (let [elt (first coll)]\n                     (recur (rest coll)\n                            (if (not (= found elt))\n                              (conj acc elt)\n                              acc)\n                            elt))))]\n    (if (string? coll)\n      (apply str (reverse result))\n      (apply vector result))))", "user": "539118b2e4b0b51d73faaea1"}, {"problem": 30, "code": "(fn compress [s] (map first (partition-by identity s)))", "user": "56742817e4b05957ce8c612d"}, {"problem": 30, "code": ";(fn [coll]\n;  (first (reduce (fn [[new-coll last-x] x]\n;                   [(if (or (not last-x)\n;                            (not= last-x x))\n;                      (conj new-coll x)\n;                      new-coll) x])\n;                 [[] nil]\n;                 coll)))\n#(map first (partition-by identity %))", "user": "56f9982ce4b07572ad1a88b8"}, {"problem": 30, "code": "reduce (fn [r x]\n (if (= (last r) x)\n  r\n  (conj r x)))\n []", "user": "56f4b753e4b046a417f92061"}, {"problem": 30, "code": "(fn [s]\n    ((fn [seq]\n      (if (every? char? seq) (apply str seq) seq))  \n  (reduce\n    (fn [newSeq element]\n      (if-not (= (last newSeq) element)\n          (conj newSeq element) newSeq))\n    []\n    s))\n    )", "user": "55cfdfc9e4b0e31453f64a35"}, {"problem": 30, "code": "(fn f [m]\n  (let [ s (seq m)\n    r (reduce (fn g[x y]\n              (if-not (= (last x) y) (conj x y) x)) [] s)  ]\n     (seq r)))", "user": "56fa8984e4b07572ad1a88c1"}, {"problem": 30, "code": ";; #(map first (partition-by identity %))\n\n; #(map first (partition-by identity %))\n\n#(map first (partition-by identity %))", "user": "565487dce4b0f9d632dd8482"}, {"problem": 30, "code": "(fn a [lst]\n  (if (vector? (first lst)) (for [i (partition 2 (flatten (for [i (partition-by identity lst)] (take 1 i))))] (vector (first i)(second i)))\n      (flatten (for [i (partition-by identity lst)] (take 1 i)))))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5693cc39e4b0dcc4269f4108"}, {"problem": 30, "code": "(fn [seq] (reduce #(if (= (last %) %2) % (conj % %2)) [] seq))", "user": "56f9890be4b07572ad1a88b5"}, {"problem": 30, "code": "(fn compress [s]\n  (let [acc\n  (reduce \n   (fn [acc el]\n     (let [{ :keys [last,com] } acc]\n       (if (= last el)\n         acc\n         { :last el, :com (conj com el) }\n       )\n     )\n   )\n   nil\n   s\n  )]\n  (reverse (:com acc))\n  )\n)", "user": "56fbe0cce4b07572ad1a88d8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 30, "code": "(fn [coll]\n   (reduce (fn [result x]\n             (if (not= x (last result))\n               (conj result x)\n               result)) [] coll))", "user": "56d3bc2de4b0ea9b8538f7b0"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "56785234e4b05957ce8c6177"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56f73913e4b08e7d20b9682d"}, {"problem": 30, "code": "(fn [s]\n  (let [filtered-seq (filter #(not (= (first %) (second %))) (partition 2 1 s))\n        last-seq (last filtered-seq)]\n    (concat (map #(first %) filtered-seq) (list (last last-seq)) )\n    )\n)", "user": "56c7d8dee4b0ed865f9758c9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 30, "code": "(partial reduce (fn [coll item] \n          (if (= (last coll) item)\n            coll\n            (conj coll item))) \n          [])", "user": "56fa972be4b07572ad1a88c2"}, {"problem": 30, "code": "(fn [x] (map first (filter #(not= (first %) (last %)) (map list x (cons nil x)))))", "user": "56fdd9a1e4b08d47c97781a8"}, {"problem": 30, "code": "(fn [s]\n  (loop [p (first s) s (rest s) r ()]\n    (if (empty? s)\n      (reverse (cons p r))\n      (if (= p (first s))\n        (recur p (rest s) r)\n        (recur (first s) (rest s) (cons p r))))))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56f4976ce4b046a417f9205f"}, {"problem": 30, "code": "(fn [s] \n  (reduce \n   #(if (= (last %1) %2) \n      %1\n      (conj %1 %2)) [] (seq s)))", "user": "56f51879e4b046a417f92069"}, {"problem": 30, "code": "(fn f [x] (cons (first x) (map last (filter #(not= (first %) (last %)) (partition 2 1 x)))))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 30, "code": "(fn compress [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (compress r) \n      (cons f (compress r)))))", "user": "56f4cedce4b046a417f92063"}, {"problem": 30, "code": "#(loop [x \"\" s %1 result []] (if (seq s) (if (= x (first s)) (recur (first s) (rest s) result) (recur (first s) (rest s) (conj result (first s)))) result))", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 30, "code": "#(seq (map first (partition-by identity %)))", "user": "56f86f98e4b08e7d20b96837"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56f7bed6e4b08e7d20b96832"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56f881e0e4b08e7d20b96839"}, {"problem": 30, "code": "(fn [xs] \n  (reduce (fn [xs, x] \n            (if (not (= x (last xs))) \n              (conj xs x)\n              xs)) \n          [] xs))", "user": "57006957e4b08d47c97781c8"}, {"problem": 30, "code": "(fn rm-dup [s]\n  (loop [s s\n         acc []]\n    (if (empty? s)\n      acc\n      (let [same? (= (last acc) (first s))]\n        (recur (rest s) (if same? acc (conj acc (first s))))))))", "user": "55ad2d97e4b03311e7b732a2"}, {"problem": 30, "code": "reduce #(if (= (last %) %2)\n          %\n          (conj % %2)) []", "user": "57008afae4b08d47c97781ca"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] %)", "user": "5700f1f0e4b08d47c97781ce"}, {"problem": 30, "code": "#(\n  (fn [x y]\n   (if (empty? x)\n      y\n    \t(if (= (first x) (last y)) \n      \t\t(recur (rest x) y)\n      \t\t(recur (rest x)(conj y (first x)))\n     \t)\n    )\n   )\n   (rest %) [(first %)]\n )", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 30, "code": "(fn [seq] (reduce #(if (not= (last %) %2) (conj % %2) %) [] seq))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 30, "code": "(fn uniq [s] (loop [result [] remain s] (if (empty? remain) result (recur (if (= (last result) (first remain)) result (conj result (first remain))) (rest remain)))))", "user": "56f8b6efe4b07572ad1a88a5"}, {"problem": 30, "code": "reduce #(if ((comp not =) (last %1) %2) (conj %1 %2) %1) []", "user": "5700ec08e4b08d47c97781cd"}, {"problem": 30, "code": ";(fn [s]\n;  (loop [tmp (first s) tail (rest s) acc ()]\n;    (cond (nil? tmp) (reverse acc)\n;          (= tmp (first tail)) (recur tmp (rest tail) acc)\n;          :else (recur (first tail) (rest tail) (conj acc tmp))\n;      )))\n\n;reduce #(if (= %2 (last %)) % (conj % %2)) []\n\n#(map first (partition-by identity %))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 30, "code": "(fn get-distinct [coll]\n\n  (loop [coll coll \n         acc []]\n\n        (if (empty? coll) \n          acc\n          (let [same?  (= (last acc) (first coll))] \n          (recur (rest coll) (if same? acc (conj acc (first coll)) \n        \n        ))))))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 30, "code": "(fn [seq]\n  (loop [new-seq [] the-seq seq]\n    (let [curval (first the-seq)]\n      (if (empty? the-seq) new-seq\n        (recur (if (= curval (last new-seq)) new-seq (conj new-seq curval) ) (rest the-seq))))))", "user": "56fbcc1fe4b07572ad1a88d5"}, {"problem": 30, "code": "#(letfn [(remove-repeats [l z]\n  (let [f (first l)]\n    (cond\n      (empty? l) l\n      (= f z) (remove-repeats (rest l) z)\n      true (cons f (remove-repeats (rest l) f)))))] (remove-repeats % nil))", "user": "5703eda3e4b08d47c9778200"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "user": "569d095fe4b0542e1f8d1470"}, {"problem": 30, "code": "(fn [s] (reverse (reduce (fn [c1 c2] (if (= (first c1) c2) c1 (conj c1 c2))) () s)))", "user": "5703cd50e4b08d47c97781fc"}, {"problem": 30, "code": "(fn [s]\n  (loop [s s new '()]\n  (if s \n    (recur (next s) \n           (if (= (first s) (fnext s))\n\t\t\t   new\n               (concat new [(first s)])))\n    new)))", "user": "5703cbbee4b08d47c97781fb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56585dbce4b0f9d632dd84b3"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (= (last %1) %2)\n             %1\n             (conj %1 %2))\n          [] s))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 30, "code": "(fn [c]\n  (loop [[head & tail] c\n         s '()]\n    (if (= head nil)\n      (reverse  s)\n      (if (not= head (first s))\n        (recur tail (conj s head))\n        (recur tail s)))))", "user": "5701f886e4b08d47c97781d9"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1)) %1 (concat %1 (list %2))) nil", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56ff0ef3e4b08d47c97781ba"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57023fc2e4b08d47c97781db"}, {"problem": 30, "code": "(comp\n  (partial map first) (partial partition-by identity))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 30, "code": "(fn compression [x]\n  \n  (loop [result (conj '() (first x)), changing-seq x]\n    (println \"pop of result \" (first result))\n    (println \"first of changing-seq \" (first changing-seq))\n    (println \"current result \" result)\n    (if (= (count changing-seq) 0)\n        (reverse result)\n      (if (= (first result) (first changing-seq))\n        (recur result (rest changing-seq))\n        (recur (seq (conj result (first changing-seq))) (rest changing-seq))) ) \n      ))", "user": "57040195e4b08d47c9778202"}, {"problem": 30, "code": "(fn compress\n  [s]\n  (let [reduce-fn (fn [coll v] \n                    (if (= (last coll) v)\n                      coll\n                      (concat coll [v])))]\n    (reduce reduce-fn [] s)))", "user": "56fe665be4b08d47c97781af"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "56e4991fe4b03a7c14b85a4f"}, {"problem": 30, "code": "reduce #(if (= (last %) %2)\n          %\n          (conj % %2)) []", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57090dffe4b0b0fb43fd06a6"}, {"problem": 30, "code": "(fn [s]\n  (reduce\n   (fn [prev x]\n     (if (not= (last prev) x)\n       (conj prev x)\n       prev))\n   []\n   s))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 30, "code": "(fn no-repeat [s]\n  (map first (partition-by identity s)))", "user": "5703ce0fe4b08d47c97781fd"}, {"problem": 30, "code": "(fn [s]\n  (loop [raw (seq s)\n         compressed (empty '[])]\n    (if-let [h (first raw)]\n      (recur (drop-while #(= h %) raw) (conj compressed h))\n      (seq compressed))))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5708b96ce4b0b0fb43fd06a3"}, {"problem": 30, "code": "(fn compress [x]\n    (let [f (first x)\n          s (second x)]\n      (cond\n       (nil? s) (seq x)\n       (= f s) (compress (rest x))\n       :else (cons f (compress (rest x)))\n       )))", "user": "57027310e4b08d47c97781e2"}, {"problem": 30, "code": "(fn compress [arg]\n  (if (empty? arg)\n    ()\n    (if (= (first arg) (second arg))\n      (compress (rest arg))\n      (cons (first arg) (compress (rest arg))))))", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 30, "code": "(fn [xs]\n  (loop [x (first xs) p nil out [] xs xs]\n    (let [out (if (= x p) out (conj out x))] \n      (if (seq xs)\n        (recur (first xs) x out (rest xs)) \n        out))))", "user": "4f8490fae4b033992c121c34"}, {"problem": 30, "code": "(fn[something]\n  (loop[lst something\n        res '()]\n    (cond \n     (empty? lst) res\n     (= (first lst) (last res)) (recur (rest lst) res)\n     :else\n     (recur (rest lst) (concat res (list (first lst)))))))", "user": "56acfee5e4b03c432f18734f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55bb1b26e4b01b9910ae29e0"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "56ea8374e4b04a395b9a0404"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55ba70f9e4b01b9910ae29d4"}, {"problem": 30, "code": "(fn [col]\n (map first (partition-by identity col))\n)", "user": "54f5aa4ce4b0f2f3c5226e94"}, {"problem": 30, "code": "(fn\n  [a-seq]\n  (loop [l-seq a-seq el (first l-seq) acc []]\n    (if (empty? l-seq)\n      acc\n      (let [stripped (drop-while #(= % el) l-seq)]\n        (recur stripped\n               (first stripped)\n               (conj acc el))))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 30, "code": "#(reverse (reduce (fn [accum x] (if (not= (first accum) x) (cons x accum) accum)) '() %))", "user": "56b506d5e4b0982f16b37e2d"}, {"problem": 30, "code": "#((fn f\n   ([x]\n     (f x '()))\n   ([x r]\n     (if (empty? x)\n       (reverse r)\n       (if (not= (first x) (second x))\n         (recur (rest x) (into r (list (first x))))\n         (recur (rest x) r))))) (apply list %))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 30, "code": "(fn [x]\n(loop [s x r []]\n        (if (empty? (seq s))\n          r\n          (recur\n           (rest (seq s))\n           (if (not= (last r) (first (seq s)))\n             (conj r (first (seq s)))\n             r)))))", "user": "571077e8e4b09c608db70434"}, {"problem": 30, "code": "(fn remove-consecutive-duplicates [a-str]\n  (loop [last-instinct-char (first a-str) s (rest a-str) res [(first a-str)]]\n    (cond\n      (empty? s)\n      res\n      (= last-instinct-char (first s))\n      (recur last-instinct-char (rest s) res)\n      true\n      (recur (first s) (rest s) (concat res [(first s)])))))", "user": "5711ca24e4b09c608db7044b"}, {"problem": 30, "code": "(fn [s]\n  (reverse\n   (loop [result '() rest-values s]\n     (if (empty? rest-values)\n       result\n       (let [e (first rest-values)]\n         (recur (if (= e (first result))\n                  result\n                  (cons e result))\n                (rest rest-values)))))))", "user": "571107b3e4b09c608db7043f"}, {"problem": 30, "code": "reduce (fn [x y] (if (= (last x) y) x (concat x [y]))) '()", "user": "5710140fe4b09c608db7042e"}, {"problem": 30, "code": "#(loop [[cur nxt & _ :as whole] %\n        result []]\n   (if whole \n     (if-not (= cur nxt)\n       (recur (next whole) (conj result cur))\n       (recur (next whole) result))\n     result))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 30, "code": "(fn a [b]\n\t(if (vector? b)  \n\t\t(reverse (into () ((fn c [d]\n\t\t\t(if(< d (count (into [] b))) \n\t\t\t\t(if (and (> d 0) (= (get (into [] b) d) (get (into [] b) (- d 1)))) \n\t\t\t\t\t(c (+ d 1))\n\t\t\t\t\t(into [] (cons (get (into [] b) d) (c (+ d 1)))) \n\t\t\t\t)\n\t\t\t\t[]\n\t\t\t)\n\t\t) 0 )))\n\t\t(clojure.string/join \"\" ((fn c [d]\n\t\t\t(if(< d (count (into [] b))) \n\t\t\t\t(if (and (> d 0) (= (get (into [] b) d) (get (into [] b) (- d 1)))) \n\t\t\t\t\t(c (+ d 1))\n\t\t\t\t\t(into [] (cons (subs b d (+ d 1)) (c (+ d 1)))) \n\t\t\t\t)\n\t\t\t\t[]\n\t\t\t)\n\t\t) 0 ))\n\t)\n)", "user": "5710e574e4b09c608db7043b"}, {"problem": 30, "code": "(fn shrink \n  ([s] (shrink s []))\n  ([s result] \n   (let [curr (first s) others (rest s)]\n     (if (and (nil? curr) (empty? others))\n       result\n       (if (= curr (last result))\n         (shrink others result)\n         (shrink others (conj result curr)))))))", "user": "5711b532e4b09c608db70449"}, {"problem": 30, "code": "(fn [xs]\n  (loop [tail xs prev nil res []]\n    (if-not (seq tail)\n      res\n      (let [current (first tail)]\n        (recur (rest tail) current (if (= current prev) res (conj res current)))))))", "user": "4fc4e9b5e4b081705acca352"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "536d24ece4b0fc7073fd6e54"}, {"problem": 30, "code": "(fn [coll]\n    (loop [in coll\n           out []]\n     (if (empty? in)\n         out\n         (if (= (first in) (first(rest in)))\n           (recur (rest in) out)\n           (recur (rest in) (conj out (first in)))))))", "user": "5713f874e4b07c98581c3ab1"}, {"problem": 30, "code": "(fn kompress [x]\n  (cons (first x) (keep-indexed #(if (not (= (nth x %1) %2))\n                                   %2) (rest x))))", "user": "57073037e4b0b0fb43fd0689"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5707c364e4b0b0fb43fd0691"}, {"problem": 30, "code": "(fn [xs] (mapcat #(if (not= % %2) (list %) ) xs (concat (rest xs) '(0)) ))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 30, "code": "(fn [s]\n  (loop [[el & r] s\n         result '()]\n    (do (println result)\n      (if (nil? el)\n        result\n        (recur (drop-while #(= el %) r) (concat result (list el)))))))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 30, "code": "(fn f [x]\n  (if (= x ())\n    x\n    (if (= (first x) (second x))\n      (f (drop 1 x))\n      (cons (first x) (f (rest x))))))", "user": "57152731e4b07c98581c3ad0"}, {"problem": 30, "code": "(fn [coll]\n  \t; attention: it is important to return %1 (the new collection so far) if the next element is the same just for the reduce to continue working (this is how i understand it)\n    (reduce #(if (not (= %2 (last %1))) (conj %1 %2) %1)\n            []\n            coll\n            )\n    )", "user": "570577bbe4b0b0fb43fd0672"}, {"problem": 30, "code": "(fn [l]\n  (reduce \n  #(if (= (last %1) %2) %1 (conj %1 %2)) \n   []\n  l ))", "user": "57150a8ee4b07c98581c3acb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5716845be4b07c98581c3afa"}, {"problem": 30, "code": "#(loop [lst1 (seq %) lst2 (rest (seq %)) current (conj nil (first %))]\n   (if (empty? lst2)                                                 \n     (reverse  current)                                              \n     (if (= (first lst1) (first lst2))                               \n       (recur (rest lst1) (rest lst2) current)                       \n       (recur (rest lst1) (rest lst2) (cons (first lst2) current)))))", "user": "570b421ee4b0b0fb43fd06be"}, {"problem": 30, "code": "#(reduce (fn [acc next] (if (= (last acc) next) acc (conj acc next))) [] %)", "user": "57155980e4b07c98581c3ad7"}, {"problem": 30, "code": "reduce (fn[x y] (if (not (= y (last x))) (conj x y) x)) []", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57168db0e4b07c98581c3afc"}, {"problem": 30, "code": "(fn removeDuplicates\n    [lista]\n    (map #(first %) (partition-by identity lista)))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 30, "code": "(fn dedup\n  [coll]\n  (loop [[x & xs] coll prev nil acc []]\n    (if x\n      (if (= x prev)\n        (recur xs x acc)\n        (recur xs x (conj acc x)))\n      acc)))", "user": "56edf2dde4b04a395b9a044b"}, {"problem": 30, "code": "#(mapcat (comp list first) (partition-by identity %))", "user": "570d8418e4b0b0fb43fd06de"}, {"problem": 30, "code": "(fn compress \n  ([l] (compress l nil))\n  ([l prev] (let [x (first l)\n                  xs (rest l)]\n    (cond (nil? x) nil\n          (= prev x) (compress xs x)\n          :otherwise (cons x (compress xs x))))))", "user": "5717ad6fe4b07c98581c3b14"}, {"problem": 30, "code": "#(map last (partition-by list %))", "user": "5714e82ae4b07c98581c3ac9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5717e367e4b07c98581c3b1d"}, {"problem": 30, "code": "(fn compress [coll]\n  (reduce \n   #(if-not (= (last %1) %2)\n      \t(conj %1 %2)\n      \t%1)\n      \t[]\n      \tcoll))", "user": "56f57481e4b046a417f92072"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2)\n           %1\n           (conj %1 %2)) []", "user": "570362ece4b08d47c97781f0"}, {"problem": 30, "code": "(fn [xs] \n   (reverse   (reduce (fn [sum e]\n                     (if (not= (first sum) e)\n                       (conj sum e)\n                       sum)\n                     ) '() xs)))", "user": "5719465fe4b07c98581c3b36"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "571bc0a1e4b07c98581c3b6c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5713f693e4b07c98581c3ab0"}, {"problem": 30, "code": "(fn [n] (map first (partition-by identity n)))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5716d585e4b07c98581c3b03"}, {"problem": 30, "code": "(fn compress ([coll] (compress coll nil []))\n  ([coll previous result]\n  (if (empty? coll)\n    result\n    (if (not= previous (first coll))\n      (compress (rest coll) (first coll) (conj result (first coll)))\n      (compress (rest coll) (first coll) result)))))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 30, "code": "(fn [coll] \n  (reduce (fn [res x]         \n            (if (= (last res) x)       \n              res\n              (conj res x)))\n          []\n          coll))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 30, "code": "(fn [s]\n  ((fn [build prev s]\n    (if (nil? s)\n      build\n      (let [[f & r] s]\n        (recur (if (= f prev)\n                 build\n                 (conj build f))\n               f\n               r))))\n   [] nil s))", "user": "571d063ee4b0145328a76272"}, {"problem": 30, "code": "(fn [coll]\n  (for [i (range 0 (count coll))\n        :let [a (if (= i 0) nil (nth coll (dec i)))\n              b (nth coll i)]\n        :when (not= a b)]\n    b))", "user": "5712a404e4b07c98581c3a8d"}, {"problem": 30, "code": "(fn [seq] (keep-indexed #(if (not= %2 (nth seq (- %1 1) -1)) %2) seq))", "user": "5716cc16e4b07c98581c3b02"}, {"problem": 30, "code": "#(map first (partition-by identity (seq %)))", "user": "571ac0b8e4b07c98581c3b5b"}, {"problem": 30, "code": "(fn foo [lst]\n  (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] (vec lst)))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (if (string? %1) (str %1 %2) (conj %1 %2))) (if (string? x) \"\" (empty x)) x))", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 30, "code": "(fn [init-seq]  \n       ((fn [[hd & tl] add-to curr-val] \n         (if hd \n           (if (= curr-val hd) \n             (recur tl add-to curr-val)\n             (recur tl (concat add-to (vector hd)) hd))\n          add-to))\n        (rest init-seq) (vector (first init-seq)) (first init-seq)))", "user": "571d9669e4b0145328a7627f"}, {"problem": 30, "code": "(fn [col]\n  (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() (seq col))))", "user": "571e5c9ee4b0145328a76290"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "571dd145e4b0145328a76283"}, {"problem": 30, "code": "(fn\n  [s]\n  (loop [l s\n         res []]\n    (if (nil? (first l))\n      res\n      (if (= (last res) (first l))\n        (recur (rest l) res)\n        (recur (rest l) (conj res (first l)))                                                                                                      \n        )\n      )\n    )\n  )", "user": "571b900ae4b07c98581c3b69"}, {"problem": 30, "code": "#(loop [in (rest %1) out [(first %1)] prev (first %1)] (if (empty? in) out (recur (rest in) (if (= prev (first in)) out (conj out (first in))) (first in))))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 30, "code": "(fn x [s]\n  (if (empty? s)\n      ()\n      (if (= (first s) (first (rest s)))\n          (x (rest s))\n          (cons (first s) (x (rest s))))))", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 30, "code": "(fn\n  [s]\n  (->> (partition-by identity s)\n       (map first)))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 30, "code": "(fn [coll] \n  (loop [[head & tail] coll\n         result []]\n    (if head \n      (recur tail (if (= head (last result)) result (conj result head)))\n      result)))", "user": "553e3260e4b0a04f792994eb"}, {"problem": 30, "code": "(fn [coll]\n  (loop [coll coll\n         new-coll []]\n    (if (empty? coll)\n      new-coll\n      (let [first-elem (first coll)\n            second-elem (second coll)]\n        (if (= first-elem second-elem)\n          (recur (rest coll) new-coll)\n          (recur (rest coll) (conj new-coll first-elem)))))))", "user": "5720a2b0e4b0c5bde472c099"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "user": "56c2c342e4b05cc29241ee85"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 30, "code": "(fn [xs]\n  (cons (first xs) (map last (filter (fn [[x y]] (not (= x y))) (partition 2 1 xs)))))", "user": "562c0787e4b058fa18c5a6d3"}, {"problem": 30, "code": "(fn compress [ls] (map first (partition-by identity ls)))", "user": "5716540fe4b07c98581c3af3"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "571e819ae4b0145328a76294"}, {"problem": 30, "code": "#(keep (fn[[x y]] (if (not= x y) x)) (partition-all 2 (next  (interleave % %))))", "user": "571e6d73e4b0145328a76292"}, {"problem": 30, "code": "(fn [coll] (reduce #(conj %1 (first %2)) [] (partition-by identity coll)))", "user": "571cd9dce4b0145328a76271"}, {"problem": 30, "code": "#(reverse (reduce (fn [p,n] \n          (if (not= n (first p)) \n            (cons n p)\n            p)\n          ) '() %))", "user": "5717bcffe4b07c98581c3b16"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55cc6c35e4b0e31453f64a10"}, {"problem": 30, "code": "(fn [lst]\n\t(map first (partition-by identity lst)) )", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 30, "code": "#(loop [coll [] \n       i (first %)\n       l %]\n  (cond \n   \t(nil? i) coll\n   \t(= i (last coll)) (recur coll (first l) (rest l))\n    :else  (recur (conj coll i) (first l) (rest l))))", "user": "4df73d64535d04ed9115e775"}, {"problem": 30, "code": "(fn\n  [x]\n  (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] x)\n  )", "user": "56de78fde4b0ea9b8538f83c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4ff0e01fe4b0678c553fc328"}, {"problem": 30, "code": "(fn [s]\n  (reverse\n   (reduce\n    #(if (= (first %1) %2)\n       %1\n       (conj %1 %2))\n    nil s)))", "user": "5721dfc3e4b0c5bde472c0bb"}, {"problem": 30, "code": "(fn [l]\n  (loop [l l\n         res ()]\n    (if (empty? l) (reverse res)\n      (if (= (first res) (first l)) (recur (rest l) res)\n        (recur (rest l) (cons (first l) res))))))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 30, "code": "(fn [s] (reduce (fn [coll x] (if (= (last coll) x)\n                        coll\n                        (conj coll x)))\n          []\n          s))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] %)", "user": "4e55b3dc535d8a8b8723a27f"}, {"problem": 30, "code": "#(->>(partition-by identity %)\n(map first))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 30, "code": "(fn [string]\n  (map\n     first\n     (partition-by\n        identity\n        string\n     )\n  )\n)", "user": "5726adf8e4b0c5bde472c12b"}, {"problem": 30, "code": "(fn [coll]\n  (map :value\n       (remove :dupe?\n               (reduce (fn [acc v]\n                  (if (coll? acc)\n                    (if (= (:value (last acc)) (:value v))\n                      (conj acc (assoc v :dupe? true))\n                      (conj acc v)))) []\n                (map (fn [i]\n                       {:value i\n                        :dupe? false}) coll)))))", "user": "516c3472e4b06f078fab251c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 30, "code": "(fn com [s]\n  (if (>= 1 (count s))\n    s\n    (let [f (first s)\n      \t r (com (rest s))]\n      (if (= f (first r))\n        r\n        (cons f r)\n      )\n    )\n  ) \n)", "user": "5720fc08e4b0c5bde472c0a3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 30, "code": "(let [rem-dup (fn [prev-item clean-items items]\n                (if (empty? items)\n                  clean-items\n                  (if-not (= prev-item (first items))\n                    (recur (first items) (concat clean-items [(first items)]) (rest items))\n                    (recur prev-item clean-items (rest items)))))]\n  (partial rem-dup nil []))", "user": "572722c4e4b0c5bde472c134"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "5724a4dae4b0c5bde472c0fe"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5728d33ce4b0c6e51e0d2b12"}, {"problem": 30, "code": "(fn compress [lst]\n  (map first (partition-by identity lst)))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5262efade4b03e8d9a4a709f"}, {"problem": 30, "code": "(fn dup [coll]\n  (when-let [[s & r] coll]\n    (if (= s (first r))\n      (dup r)\n      (cons s (dup r)))))", "user": "57291a39e4b0c6e51e0d2b14"}, {"problem": 30, "code": "#(map first (partition-by identity %))\n\n;; I saw part of the answer in the clojure docs https://clojuredocs.org/clojure.core/partition-by#example-542692d4c026201cdc32702b\n;; :(", "user": "54249bcce4b01498b1a71afb"}, {"problem": 30, "code": "(fn dedup [coll]\n  (if (empty? (rest coll))\n    coll\n\t  (if (= (first coll) (second coll))\n\t\t  (dedup (rest coll))\n\t\t  (concat [(first coll)] (dedup (rest coll)))\n    )\n    )\n)", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 30, "code": "reduce (fn [acc v] (if (= v (last acc)) acc (conj acc v))) []", "user": "572a3d77e4b0f4d77e651230"}, {"problem": 30, "code": "(fn [l]\n  (reduce (fn [a b]\n            (if (= b (first a))\n              a\n              (conj a b)))\n          '()\n          (reverse l)))", "user": "5703cb87e4b08d47c97781f9"}, {"problem": 30, "code": "(fn p\n  [lst]\n  (cond\n   (empty? lst) ()\n   (= (first lst) (second lst)) (p (rest lst))\n   :else (cons (first lst) (p (rest lst)))))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 30, "code": "(fn \n  [lst]\n  (->>\n    (partition-by identity lst)\n    (map first)))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5715b67fe4b07c98581c3ae1"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "55ed1575e4b0121d4835fdd3"}, {"problem": 30, "code": "(fn rem-cons-dupl\n  [s]\n  (conj (map second (filter #(not= (first %) (second %)) (map vector s (rest s)))) (first s)))", "user": "572db6d5e4b0cd1946bd0f78"}, {"problem": 30, "code": "#(loop [coll % res '()] \n   (if (empty? coll) \n     (reverse res) \n     (recur\n       (rest coll)\n       (if-not (= (first res) (first coll))\n         (conj res (first coll))\n         res\n       )\n     )\n   ))", "user": "56f5d0efe4b046a417f92078"}, {"problem": 30, "code": "(partial reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [])", "user": "57299c57e4b0c6e51e0d2b1e"}, {"problem": 30, "code": "(fn [sq]\n    (reduce\n     (fn [result item] \n       (if (= item (last result))\n         result\n         (conj result item)\n         )\n       )\n     []\n     sq)\n    )", "user": "571a282ae4b07c98581c3b46"}, {"problem": 30, "code": "(fn [seq] (reduce  #(if (not= (last %1) %2) (conj %1 %2) %1) [] seq))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 30, "code": "(fn\n  [s]\n  (reduce\n   (fn [rez el]\n     (if (= el (last rez))\n       rez\n       (conj rez el)))\n   [(first s)] (rest s)))", "user": "56b2630be4b0982f16b37e03"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "564dc08ae4b0284900eef68f"}, {"problem": 30, "code": "#(reverse (reduce (fn [acc, x]                       \n           (if (= (first acc) x)\n             acc\n             (conj acc x)))\n         '() %1))", "user": "572e43f7e4b0cd1946bd0f83"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54b0519be4b09f271ff37d14"}, {"problem": 30, "code": "(fn [c]\n   (letfn [(compress [coll]\n    (if (> (count coll) 1)\n     (let [[f s] coll [_ & more] coll]\n      (if (= f s)\n       (compress more)\n       (cons f (compress more)))\n     )\n     coll\n    ))]\n    (compress c))\n  )", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54cf54b1e4b018d918be98cc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "572cb21fe4b0cd1946bd0f5c"}, {"problem": 30, "code": "reduce (fn [x v] (if (= v (last x)) x (conj x v))) []", "user": "53829b28e4b06839e8705ed6"}, {"problem": 30, "code": "(fn [myseq]\n  (apply concat (map #(conj nil (first %)) (partition-by identity myseq)))\n  )", "user": "54ca9311e4b057c6fda3a263"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5720ba36e4b0c5bde472c09c"}, {"problem": 30, "code": "(comp (partial map first)\n      (partial partition-by identity))", "user": "55c9ff22e4b0e31453f649f3"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "51a88e7fe4b08d8ec191b813"}, {"problem": 30, "code": "(fn [s] (->> (seq s)\n              (partition 2 1 [nil])\n              (filter #(not= (first %) (second %)))\n              (map #(nth % 0))))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 30, "code": "(fn asdf [lst]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2))\n          [(first lst)]\n          lst))", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 30, "code": "(fn\n  [input]\n  (reduce (fn [previous current]\n            (if (= (last previous) current)\n              previous\n              (conj previous current))) [] input))", "user": "568e450fe4b0dcc4269f40d0"}, {"problem": 30, "code": "(fn f [x] \n  (if (= nil (second x))\n    (cons (first x) '())    \n    (if (= (first x) (second x))      \n      (f (rest x))\n      (cons (first x) (f (rest x)))\n      )\n   ) \n  )\n\n;; #(map first (partition-by identity #))", "user": "56e30cefe4b03a7c14b85a3d"}, {"problem": 30, "code": "(fn [s] \n  (map first (filter \n              #(not= (first %) (second %)) \n              (partition 2 1 (repeat \"x\") s)\n              )))", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 30, "code": "(fn [xs]\n        (letfn [(f [x xs acc]\n                  (cond\n                    (empty? xs) (conj acc x)\n                    (= x (first xs)) (f x (rest xs) acc)\n                    :else (f (first xs) (rest xs) (conj acc x))))]\n          (f (first xs) (rest xs) [])))", "user": "57377ae8e4b0cd1946bd1046"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 30, "code": "(fn [s]\n  (loop [remainder s\n         acc []]\n    (if (empty? remainder)\n      acc\n      (recur (drop-while #(= (first remainder) %) remainder)\n             (conj acc (first remainder)))\n      )))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5704789be4b0b0fb43fd0665"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "570eeb66e4b0b0fb43fd06fa"}, {"problem": 30, "code": ";; #30\n(fn [coll]\n  (loop [curr []\n         remaining-coll coll]\n    (if (empty? remaining-coll)\n      (seq curr)\n      (recur\n       (if (= (last curr) (first remaining-coll))\n         curr\n         (conj curr (first remaining-coll)))\n       (rest remaining-coll)))))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 30, "code": "(fn [x]\n  (loop [coll x result (vector (first x))]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (if (not= (last result) (first coll))\n                           (conj result (first coll))\n                           result)))))", "user": "57344edbe4b0cd1946bd1008"}, {"problem": 30, "code": "(fn z [sqnc]\n  (loop [a (first sqnc) s (rest sqnc) nodup []]\n   (if (nil? a) nodup  \n        (if (not= a (last nodup))\n          (recur (first s) (rest s) (into nodup (vector a)))\n          (recur (first s) (rest s) nodup)))))", "user": "572ac718e4b0f4d77e651242"}, {"problem": 30, "code": "(fn compressit [c]\n  (reduce (fn [r x] \n            (if (nil? x) \n                r\n                (if (= (last r) x)\n                    r \n                    (conj r x)\n                )\n            )\n          )\n          []\n          c\n  )\n)", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 30, "code": "(fn [in]\n (loop [prev nil v in res []]\n   (if v\n     (let [ff (first v)]\n         (if (= prev ff)\n             (recur ff (next v) res)\n             (recur ff (next v) (conj res ff))       \n           )\n     )\n     res\n    )\n  )\n )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 30, "code": "#(loop [c % acc []] \n       (if (empty? c)\n           acc\n           (recur (rest c)\n                  (if (= (last acc) (first c))\n                      acc\n                      (conj acc (first c))))))", "user": "5707e579e4b0b0fb43fd0694"}, {"problem": 30, "code": "#((fn csd [value1 value2]\n     (println value1 (last value1) value2 (first value2))\n     (cond (not-empty value2)\n           (if (not= (last value1) (first value2))\n             (csd (conj value1 (first value2)) (rest value2))\n             (csd value1 (rest value2))\n             )\n           :else value1)\n     ) [] %)", "user": "518665cde4b0da5a5be3bad2"}, {"problem": 30, "code": "(fn [v] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] v))", "user": "56165702e4b06b1bb2182a02"}, {"problem": 30, "code": "(fn noDupes [s] (cond (empty? s) '() (= (first s) (second s)) (noDupes (rest s))\n                      :else (conj (noDupes (rest s)) (first s))))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 30, "code": "(fn[x] (reduce #(if (not= %2 (last %1)) (conj %1 %2) %1) [] x))", "user": "571172ece4b09c608db70446"}, {"problem": 30, "code": "reduce (fn [accum x] (if (= (last accum) x) accum (conj accum x))) []", "user": "573ce277e4b05c31a32c080b"}, {"problem": 30, "code": "(fn [coll](reduce (fn [deduped-coll v]\n                (if (not= (last deduped-coll) v)\n                  (conj deduped-coll v)\n                  deduped-coll))\n              []\n              coll))", "user": "57280b92e4b0c5bde472c14e"}, {"problem": 30, "code": "#(map first\n      (partition-by identity %))", "user": "573b8f67e4b0cd1946bd10ae"}, {"problem": 30, "code": "(fn [acc xs] (cond\n               (empty? xs) (reverse acc)\n               (= (first xs) (second xs)) (recur acc (rest xs))\n               :else (recur (cons (first xs) acc) (rest xs))))\nnil", "user": "56c26880e4b05cc29241ee81"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "57261810e4b0c5bde472c11c"}, {"problem": 30, "code": "#(loop [i 0 x [] y %] (if (= i (count %)) x (recur (inc i) (if (= (last x) (first y)) x (conj x (first y))) (rest y))))", "user": "55c3f19de4b0e31453f64991"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 30, "code": "#(loop [i % o [] p nil]\n   (cond\n    (empty? i)\n    o\n    (= (first i) p)\n    (recur (rest i)\n           o\n           p)\n    :else\n    (recur (rest i)\n           (conj o (first i))\n           (first i))))", "user": "56a9d4bbe4b07966d5a8a07b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "572a60cee4b0f4d77e651237"}, {"problem": 30, "code": "(fn [s]\n  (map #(first %) (partition-by identity s)))", "user": "573b664ce4b0cd1946bd10a7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57029859e4b08d47c97781e4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "519d2a0be4b037b32803f9ae"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 30, "code": "(fn [collection] \n  (reverse \n   (reduce #(if (= (first %1) %2)\n              %1\n              (conj %1 %2))\n           '()\n           (seq collection))))", "user": "5684c439e4b04eec3ec5cfc1"}, {"problem": 30, "code": "(fn dedupe [s]\n  (reduce (fn [res new]\n            (if (= (last res) new)\n              res\n              (conj res new))) [] s))", "user": "573f3ccfe4b05c31a32c083f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "523acf7be4b0aa37f082ed90"}, {"problem": 30, "code": "(fn [coll]\n  (loop [[x & xs :as all] (seq coll)\n        res '()]\n    (if all\n      (recur\n         xs\n         (if (= (first res) x)\n           res\n           (cons x res)\n         )\n      )\n      (reverse res)\n    )\n  )\n)", "user": "57434339e4b0c285004e8a9f"}, {"problem": 30, "code": "(fn [z] (reduce (fn [r x] (if (= x (last r)) r (conj r x))) [] z))", "user": "563431c1e4b0bfe05bf117bb"}, {"problem": 30, "code": "(fn [x]\n  (reduce\n   (fn [y z]\n     (if (= (last y) z)\n       y\n       (concat y [z])))\n   (empty x)\n   x))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52dda39fe4b09f7907dd13e7"}, {"problem": 30, "code": "(fn my-dedupe [xs]\r\n  (->> (partition-all 2 1 xs)\r\n       (filter #(or (apply not= %)\r\n                    (= (count %) 1)))\r\n       (map first)))", "user": "57210b6de4b0c5bde472c0a6"}, {"problem": 30, "code": "(fn [c]\n  (loop [b (first c)\n         n (list)\n         o (rest c)]\n    (if (not (empty? (str b)))\n      (if (= b (first n))\n        (recur (first o) n (rest o))\n        (recur (first o) (cons b n) (rest o)))\n      (reverse n))))", "user": "57286f16e4b0c5bde472c159"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "573ddfc2e4b05c31a32c081b"}, {"problem": 30, "code": "(fn [xs] (map first (partition-by identity xs)))", "user": "574311a5e4b05c31a32c0888"}, {"problem": 30, "code": "#(map first (partition-by identity (seq %)))", "user": "5746d767e4b009280f9f2b6b"}, {"problem": 30, "code": "(fn [dup] (loop [xs dup result []] (let [x (first xs) r (rest xs) dedup (drop-while #(= x %) r)] (if (empty? dedup) (conj result x) (recur dedup (conj result x))))))", "user": "57372bd5e4b0cd1946bd1041"}, {"problem": 30, "code": "(fn myfn [aseq] (let [a (vec aseq)] (reduce \n        (fn [arr b] (if (= (last arr) b) arr (conj arr b)))\n        (assoc a 0 [(first a)]))))", "user": "5744723ae4b009280f9f2b3a"}, {"problem": 30, "code": "(fn dedup [ls]\n  (reduce\n   (fn [acc s]\n     (if (not= s (last acc)) (conj acc s) acc))\n   [] (seq ls)))", "user": "51647faae4b003cf19fdde3b"}, {"problem": 30, "code": "(fn compress\n  [seq]\n  (cond \n   (empty? seq) '()\n   (= (first seq) (second seq)) (compress (rest seq))\n   :else (cons (first seq) (compress (rest seq)))))", "user": "57476b5fe4b009280f9f2b74"}, {"problem": 30, "code": "#(reverse (reduce (fn [ls l] (if\n                                (= l (first ls))\n                                ls\n                                (conj ls l)))\n                   '()\n                   %))", "user": "5372e7d9e4b06d7f452d9e02"}, {"problem": 30, "code": "(fn say [x]\n       (loop [x x ret '()]\n           (if (empty? x) (reverse ret)\n              (recur (rest x) (if (= (first x) (first ret)) ret (conj ret (first x))))\n   )))", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "574977cbe4b009280f9f2b9b"}, {"problem": 30, "code": "#(reduce (fn [s i] (if (= i (last s)) s (concat s [i]))) '() % )", "user": "56c6a3c3e4b05cc29241eeb3"}, {"problem": 30, "code": "(fn [l] \n  (reduce \n         #(if (= %2 (first %1))\n                 %1 \n                 (conj %1 %2)\n          ) '() (reverse l)\n   )\n)", "user": "574986cae4b009280f9f2b9c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 30, "code": "(fn f [s] (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] s))", "user": "57462a4de4b009280f9f2b5d"}, {"problem": 30, "code": "#(reverse (into '() (reduce (fn [arr el] (if (= (last arr) el) arr (conj arr el) )) [] %)))", "user": "57440f77e4b0c285004e8ab5"}, {"problem": 30, "code": "(fn [c]\n  (reduce (fn [a b] (if (= (last a) b)\n                        a\n                        (conj a b)))\n          []\n          c))", "user": "574c3a7ce4b02ea114799219"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5744e1a2e4b009280f9f2b43"}, {"problem": 30, "code": "(fn foo\n  ([x] \n   (let [fst (first x) rst (rest x)] \n     (cons fst (foo rst fst))))\n  ([lst cmp] \n   (if (empty? lst) \n     nil \n     (let [fst (first lst) rst (rest lst)] \n       (if (= fst cmp) \n         (foo rst cmp) \n         (cons fst (foo rst fst)))))))", "user": "5747e22ce4b009280f9f2b7c"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "574af03ce4b02ea114799202"}, {"problem": 30, "code": "(fn compressASequence [sequence]\n  (loop [result (vector (first sequence)) sequence sequence]\n    (if (empty? sequence)\n      result\n     (recur (if (= (last result) (first sequence)) result (conj result (first sequence))) (rest sequence)))))", "user": "57465526e4b009280f9f2b61"}, {"problem": 30, "code": "reduce \n  (fn [a b] \n    (if (= (last a) b) \n      a\n      (conj a b)))\n  []", "user": "56bb652ae4b0f26550335953"}, {"problem": 30, "code": "(fn f [[x & remain]]\n  (when-not (nil? x)\n    (if (= x (first remain))\n      (f remain)\n      (cons x (f remain)))))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "513f1f18e4b051389b345b3d"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57488966e4b009280f9f2b8d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "574c66e1e4b02ea11479921d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "574a9132e4b02ea1147991fd"}, {"problem": 30, "code": "(fn [s] \n  (reduce #(if (= (last %1) %2)\n             %1\n             (conj %1 %2))\n          []\n          s))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 30, "code": ";\ubcf4\uace0\ud568 \u3160.\u3160\n#(map first (partition-by identity %))\n\n;; \"Leeeeeerrroyyy\" => \"Leroy\" \ubc84\uc804\n;; \uc77c\ubc18\ud654\ub97c \ubabb\uc2dc\ud0b4\n;(defn uni-seq-str [n1 n2]\n;  (if (= (last (str n1)) n2)\n;    n1\n;    (str n1 n2)))\n\n;(uni-seq-str \\L \\e) ; => \"Le\"\n;(uni-seq-str \"Le\" \\e) ;=> \"Le\"\n;(reduce uni-seq-str \"Leeeeeerrroyyy\") ; => \"Leroy\"", "user": "572830e6e4b0c5bde472c152"}, {"problem": 30, "code": "(fn remove-consecutives\n  ([l] (remove-consecutives l []))\n  ([l resp]\n   (if (= l [])\n     resp\n     (let [f (first l)]\n       (if (= (last resp) f)\n         (remove-consecutives (rest l) resp)\n         (remove-consecutives (rest l) (conj resp f)))))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 30, "code": "(fn compact [s] \n\t\t\t\t\t\t\t\t\t  (cond \n      (empty? s) s\n\t\t\t\t\t\t\t\t\t  (= (count \ts) 1) \n            s\n\t\t\t\t\t\t\t\t\t  (= (first s) (second s))\n\t\t\t\t\t\t\t\t\t  \t\t\t\t(recur (rest s))\n\t\t\t\t\t\t\t\t\t  :else (concat [(first s)] (compact (rest s)))\n\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t)", "user": "5743e316e4b0c285004e8ab3"}, {"problem": 30, "code": "(fn [sq]\n  (loop [[frst & rst] sq\n         new          [] ]\n     (if (nil? frst)\n       new\n       (if (= frst (first rst))\n         (recur rst new)\n         (recur rst (conj new frst))\n       )\n     )\n  ))", "user": "574e7be7e4b02ea114799242"}, {"problem": 30, "code": "(fn f\n  ([s]\n   (when (not (empty? s))\n     (if (not= (first s) (second s))\n       (cons (first s) (f (rest s)))\n       (f (rest s))))))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 30, "code": "(fn [alist]\n  (map first (partition-by identity alist)))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 30, "code": "#(seq (reduce (fn [coll x] (if (= x (last coll)) coll (conj coll x))) [] %))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 30, "code": "(fn del-consecutive-dups [col]\n  (mapcat set (#(partition-by identity %1) col)))", "user": "5740e26ee4b05c31a32c085a"}, {"problem": 30, "code": "#((comp reverse reduce) \n       (fn [acc e] (if (not= (first acc) e) (cons e acc) acc))\n            '()\n            (seq %))", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 30, "code": "(fn foo [x]\n  ((fn bar [x s] ; inner function holds state - last seen letter in variable s\n     (if (empty? x) ; are we there yet?\n       '() ; we are\n       (if (= s (first x)) ; if not, is it a repeated character?\n         (concat '() (bar (rest x) s)) ; it is, ommit it and do the rest of the string\n         (concat (list (first x)) (bar (rest x) (first x)))))) ; is not, concat new character and replace it as new last letter\n   x nil))", "user": "57501c83e4b02ea11479926b"}, {"problem": 30, "code": "(fn compress [s]\n  (if (empty? s) \n   nil\n   (if (= (first s) (second s))\n    (concat (compress (rest s)))\n    (concat (list (first s)) (compress (rest s))))))", "user": "57501de0e4b02ea11479926c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5749ab6ae4b009280f9f2b9f"}, {"problem": 30, "code": "(fn [q] (let [f* (fn [acc q*] (if (not= (last acc) q*) (conj acc q*) acc))] (reduce f* [] q) ) )", "user": "571edeeae4b0145328a7629b"}, {"problem": 30, "code": ";#(loop [o [] s %]\n;   (if (= s '())\n;    o\n;     (if (= (last o) (first s))\n;       (recur o (rest s))\n;       (recur (conj o (first s)) (rest s)))))\n\n#(map first (partition-by identity %))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57297fb2e4b0c6e51e0d2b1c"}, {"problem": 30, "code": "(fn [s] \n  (loop [v s, result []]\n    (if (empty? v)\n      result\n      (if (= (last result) (first v))\n        (recur (rest v) result)\n        (recur (rest v) (conj result (first v)))))))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 30, "code": "reduce \n (fn [xs val]\n  (prn xs val)\n  (if (= (last xs) val )\n   xs\n   (conj xs val))\n     )\n []", "user": "57487084e4b009280f9f2b8c"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "574c5e18e4b02ea11479921b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "574ef99ae4b02ea114799250"}, {"problem": 30, "code": "(fn compress [s] (\n                  if (empty? s) '()\n                  (conj (compress (drop-while (partial = (first s)) s))\n                        (first s))))", "user": "57539e04e4b02ea1147992ab"}, {"problem": 30, "code": "#(let [ss (seq %1)]\n    (loop [ss ss\n           result '()]\n      (if (empty? ss)\n        (reverse result)\n        (recur (rest ss)\n               (if (not= (first ss) (first result)) (conj result (first ss))\n                   result)\n               ))))", "user": "5751aeabe4b02ea11479928a"}, {"problem": 30, "code": "reduce (fn [x y] (if (= (last x) y)\n                   x\n                   (conj x y))) []", "user": "5753b6c6e4b02ea1147992af"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "574ef641e4b02ea11479924f"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 30, "code": "(fn [s] (reduce #(if (= %2 (last %)) % (conj % %2)) [] s))", "user": "53ff602fe4b0de5c418485ff"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 30, "code": "(fn mycs [x]\n  (loop [n [] p x]\n    (if (nil? p)\n      n\n      (if (= (last n) (first p))\n        (recur n (next p))\n        (recur (conj n (first p)) (next p))))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 30, "code": "(fn f [x]\n  (if (= 2 (count x))\n    (if (= (first x) (second x)) (list (first x)) x)\n  (if \n    (= (first x) (second x))\n    (f (rest x))\n    (conj (f (rest x)) (first x)))))", "user": "5757ba87e4b02ea1147992f9"}, {"problem": 30, "code": "(fn conseq [x]\n  (lazy-seq\n   (when-let [s (seq x)]\n     (if (= (first s) (first (rest s)))\n       (conseq (rest s))\n       (cons (first s) (conseq (rest s)))\n       )\n    )\n   ))", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 30, "code": "reduce (fn [coll x] (if (= x (last coll)) coll (conj coll x))) []", "user": "5751f2a2e4b02ea114799292"}, {"problem": 30, "code": ";; first solution\n;(fn compress [coll]\n;  (loop [compressed []\n;         more       coll]\n;    (cond \n;     ;; base case\n;     (empty? more) \n;     compressed\n;     ;; new\n;     (not= (last compressed) (first more))\n;     (recur (conj compressed (first more)) (rest more))\n;     ;; repeated\n;     :else\n;     (recur compressed (rest more)))))\n\n#(map first (partition-by identity %))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 30, "code": "(fn f[x]\n\t(if (> (count x) 1)\n    \t(if (= (first x) (first (rest x)))\n    \t\t(f (rest x))\n        \t(cons (first x) (f (rest x)))\n    \t)\n  \t\tx\n \t)   \n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 30, "code": "#( map first ( partition-by identity % ) )", "user": "57561529e4b02ea1147992d3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56f6e541e4b08e7d20b9682a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5739c2fee4b0cd1946bd107a"}, {"problem": 30, "code": "(fn dedup ([coll] (cons (first coll) (dedup (rest coll) (first coll))))\n          ([coll curr] (if (empty? coll)\n                         coll\n                         (if (= curr (first coll))\n                           (dedup (rest coll) curr)\n                           (cons (first coll) (dedup (rest coll) (first coll)\n                                                     ))))))", "user": "5759cd46e4b02ea11479932e"}, {"problem": 30, "code": "(fn [coll]\n  (->> coll\n       (partition-by identity)\n       (map first)))", "user": "575cbe44e4b02ea114799374"}, {"problem": 30, "code": "reduce \n  #(if-not (= (last %1) %2)\n    (conj %1 %2) \n    %1\n  ) []", "user": "574a546ee4b02ea1147991f6"}, {"problem": 30, "code": "(fn [x]\n   (loop [i 1 cmp [(first x)]]\n     (if (= i (count x))\n       cmp\n       (if (= (nth x i) (nth x (dec i)))\n         (recur (inc i) cmp)\n         (recur (inc i) (conj cmp (nth x i)))))))", "user": "574e8975e4b02ea114799244"}, {"problem": 30, "code": "(fn [s]\n    (reverse\n      (loop [res  '()\n             s    s]\n        (if (empty? s)\n          res\n          (if (= (first res) (first s))\n            (recur res (rest s))\n            (recur (cons (first s) res) (rest s)))))))", "user": "56a94562e4b07966d5a8a074"}, {"problem": 30, "code": "(fn [x] (map first (flatten (map set (partition-by identity x)))))", "user": "5756efc3e4b02ea1147992e6"}, {"problem": 30, "code": "(fn [thing]\n  (loop\n    [remaining (rest thing)\n     removed (conj '() (first thing))\n     curr (first thing)]\n    (if (empty? remaining)\n      (reverse removed)\n      (if (= curr (first remaining))\n        (recur (rest remaining)\n               removed\n               curr)\n        (recur (rest remaining)\n               (conj removed (first remaining))\n               (first remaining))))))", "user": "55096255e4b06e50f9beb116"}, {"problem": 30, "code": "#(reduce\n    (fn [acc val]\n      (if (not= val (last acc))\n        (conj acc val)\n        acc))\n    []\n    %)", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 30, "code": "(fn [coll]\n  (mapcat distinct (partition-by identity coll)))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 30, "code": "(fn\n  [in-seq]\n (loop [last-val (first in-seq)\n        rem-seq in-seq\n        accum []]\n  (if (empty? rem-seq)\n    (conj accum last-val)\n    (if (= last-val (first rem-seq))\n      (recur last-val (rest rem-seq) accum)\n      (recur (first rem-seq) (rest rem-seq) (conj accum last-val))\n      )\n    )\n ))", "user": "52229374e4b0e6a83c892600"}, {"problem": 30, "code": "(fn compressor \n  ( [x]   (compressor x '()))\n  ( [x y] (if (= (count x) 0)\n    \t\t(reverse y)\n    \t\t(compressor (rest x) \n                  \t\t(if (= (first y) (first x))\n                               y\n                               (conj y (first x))\n                        )\n            )\n          )\n  )\n)", "user": "5759e317e4b02ea114799330"}, {"problem": 30, "code": "(fn compress\n  [data]\n  (loop [result [] d data]\n    (if (empty? d)\n      (seq result)\n      (recur (if (= (last result) (first d)) result (conj result (first d))) (rest d)))))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 30, "code": "(fn [s]\n  (apply concat (map distinct (partition-by identity s))))", "user": "4ed9fe5f535d10e5ff6f5308"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4ea00469535d7eef3080729d"}, {"problem": 30, "code": "reduce (fn[x,y](if (= y (last x)) x(conj  x y))  )  '[]", "user": "575bd5f9e4b02ea114799365"}, {"problem": 30, "code": "(fn foo [x]\n  (cond (= (second x) nil) x\n        (= (first x) (second x)) (foo (rest x))\n        :else (conj (foo (rest x)) (first x))))", "user": "5760715de4b08062f99a4e96"}, {"problem": 30, "code": "(fn comp-seq [n]\n  (map first (partition-by identity n)))", "user": "5755e66ee4b02ea1147992cf"}, {"problem": 30, "code": "(fn [n] (map first (partition-by identity n)))", "user": "50a00725e4b08df8156e9e46"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [default each] (if (= (last default) each) default (conj default each))) [] coll))", "user": "57606cfde4b08062f99a4e95"}, {"problem": 30, "code": "(fn foo [x]\n\t\t\t\t(if (empty? x)\n\t\t\t\t\t\t\t\tx\n\t\t\t\t\t\t\t\t(if (= (first x) (fnext x))\n\t\t\t\t\t\t\t\t\t\t\t\t(foo (next x))\n\t\t\t\t\t\t\t\t\t\t\t\t(cons (first x) (foo (next x)))\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t)\n)", "user": "575dda55e4b02ea11479938c"}, {"problem": 30, "code": "(fn thirty [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (thirty r)\n      (cons f (thirty r)))))", "user": "57607706e4b08062f99a4e97"}, {"problem": 30, "code": "(fn [x]\n\t(loop [compressed[] sequence x]\n\t\t(if (empty?  sequence)\n\t\t\tcompressed\n\t\t\t(if (= (last compressed) (first sequence))\n\t\t\t\t(recur compressed (rest sequence))\n\t\t\t\t(recur (concat compressed [(first sequence)]) (rest sequence))))))", "user": "57614948e4b0994c1922fb83"}, {"problem": 30, "code": "(fn [seqq]\n  (reduce\n    (fn [acc,item] \n      (if (= (last acc) item)\n        acc\n        (concat acc [item])))\n    (empty seqq)\n    seqq))", "user": "57597fade4b02ea11479931d"}, {"problem": 30, "code": "(fn [coll]\n  (loop [[head & tail] coll\n         result []]\n    (let [result (if (= head (last result)) result (conj result head))]\n      (if (seq tail)\n        (recur tail result)\n        result))))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "5761a772e4b0994c1922fb95"}, {"problem": 30, "code": "reduce (fn [res c] (if (= c (last res)) res (conj res c))) []", "user": "57642916e4b0994c1922fbee"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "57625c18e4b0994c1922fba4"}, {"problem": 30, "code": "#(reduce (fn [accum x] (if (= (last accum) x) accum (conj accum x))) [] %)", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57599ed3e4b02ea114799323"}, {"problem": 30, "code": "#(loop [last nil\n         ss   %\n         r    []]\n    (if (empty? ss)\n      r\n      (if (= last (first ss)) \n        (recur last (rest ss) r)\n        (recur (first ss) (rest ss) (conj r (first ss)))\n        )\n      )\n    )", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 30, "code": "(fn [s]\n  (reduce \n    #(if (= (last %1) %2)\n\t\t%1\n\t\t(conj %1 %2))\n    [] s))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 30, "code": "(fn noDuplicates [sg]\n   (loop [s sg r '()]\n      (if (empty? s)\n         (if (char? (first r))\n            (apply str (reverse (remove nil? r)))\n            (reverse (remove nil? r)))\n         (recur (rest s) (conj r (if (not= (first s) (second s)) (first s))))\n         )\n      ))", "user": "562eeba2e4b0ab312c17ebc1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 30, "code": "(fn p [c]\n  (if (empty? c)\n      '()\n      (let [[f s] c\n            [_ & r] c\n            n (p r)]\n           (if (= f s)\n               n\n               (cons f n)))))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 30, "code": "(fn compress\n  [coll]\n  (loop [[prev curr & rest] coll\n         result [prev]]\n    (if (nil? curr)\n      result\n      (recur\n       (conj rest curr)\n       (if (= curr prev)\n         result\n         (conj result curr))))))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5762fcfde4b0994c1922fbb3"}, {"problem": 30, "code": "(fn compress [x]\n  (cond (empty? x) x\n        (= (first x) (first (rest x))) (compress (rest x))\n        :else (cons (first x) (compress (rest x)))))", "user": "576000fce4b08062f99a4e8b"}, {"problem": 30, "code": "#(loop [current-index (dec (count %))\n         last-item nil\n         result-list '()]\n    (if (>= current-index 0)\n      (let [current-item (nth % current-index)]\n        (recur (dec current-index)\n             current-item\n             (if (not= last-item current-item)\n               (conj result-list current-item)\n               result-list)))\n      result-list))", "user": "5383c054e4b06839e8705ee8"}, {"problem": 30, "code": "(fn comp-seq [n]\n  (map first (partition-by identity n)))", "user": "5761724de4b0994c1922fb89"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5756f324e4b02ea1147992e8"}, {"problem": 30, "code": "(comp reverse (partial reduce #(if (= (first %1) %2) %1 (cons %2 %1)) []))", "user": "575f2529e4b08062f99a4e7a"}, {"problem": 30, "code": "(fn [xs]\n  (reduce\n   (fn [acc, cur]\n     (if (= (last acc) cur)\n       acc\n       (conj acc cur)))\n   []\n   xs))", "user": "575d22f5e4b02ea11479937a"}, {"problem": 30, "code": "(fn me [s]\n  (reduce\n   \t\t(fn [c n]\n           (if (= (last c) n) c (conj c n)))\n  \t\t[]\n  \t\ts))", "user": "561d506ee4b064ca9f4b16aa"}, {"problem": 30, "code": "#(->> (partition-by identity %) (map first))", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "575d16f8e4b02ea114799377"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "575fbe58e4b08062f99a4e87"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "user": "57650419e4b0994c1922fc09"}, {"problem": 30, "code": "(fn [myseq] (remove nil? (conj (vec (map #(if (= %1 %2) nil %1) myseq (rest myseq))) (last myseq))))", "user": "576aa367e4b0a07e8fc1811e"}, {"problem": 30, "code": "#(mapcat (fn [a b] (if (= a b) [] [a])) % (list* nil %))", "user": "576a987be4b0a07e8fc1811b"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (do (println %1 %2)(conj %1 %2)) %1) '[]", "user": "575fec91e4b08062f99a4e89"}, {"problem": 30, "code": "(fn [s]\n   (loop [kept nil\n          [a & r] (sequence s)\n          out []]\n     (cond\n       (nil? a) out\n       (nil? kept) (recur a r (conj out a))\n       (= a kept) (recur kept r out)\n       :default (recur a r (conj out a)))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "576da825e4b0979f8965156c"}, {"problem": 30, "code": "(fn dedup [coll]\n  (loop\n    [result (conj () (first coll))\n     s coll]\n    (cond\n      (empty? s) (reverse result)\n      (= (first result) (first s)) (recur result (rest s))\n      :else (recur (conj result (first s)) (rest s)) \n      )\n    )\n  )", "user": "576d24ede4b0979f8965155b"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "50c99e3ee4b0bed41a122997"}, {"problem": 30, "code": "(fn [xs]\n  (\n   (fn [xs a res]\n    (if (empty? xs)\n      res\n      (\n       let [b (first xs)]\n       (recur (rest xs) b \n              (if (= a b)\n                res\n                (conj res b)\n                )\n              )\n       )\n      )\n    ) (rest xs) (first xs) [(first xs)]\n   )\n  )", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "576e3258e4b0979f89651574"}, {"problem": 30, "code": "#(reduce (fn [result next]\n   (if (= (last result) next)\n     result\n     (conj result next))) [] %)", "user": "56d902c3e4b0ea9b8538f7ed"}, {"problem": 30, "code": "(fn [xs]\n   (loop [c xs\n          v nil\n          r []]\n     (if (seq c)\n       (if (= v (first c))\n         (recur (rest c) v r)\n         (recur (rest c) (first c) (conj r (first c))))\n       r)))", "user": "5454bb07e4b0e397800069da"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57720e85e4b0979f896515c1"}, {"problem": 30, "code": "reduce (fn [a e] (if (not= e (last a)) (conj a e) a)) []", "user": "577202d2e4b0979f896515c0"}, {"problem": 30, "code": "(fn [coll]\n  (loop [coll (seq coll)\n         acc []]\n    (if (empty? coll)\n      acc\n      (let [f (first coll)\n            hs (take-while #(= f %) coll)\n            ts (drop-while #(= f %) coll)]\n        (recur ts (conj acc f))))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 30, "code": "(fn [coll]\n  (let [one (partition-by identity coll)\n        two (map #(first %) one)]\n    two))", "user": "57227f10e4b0c5bde472c0cd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 30, "code": "(fn [x](map first (partition-by identity x)))", "user": "5770fb2ce4b0979f896515a5"}, {"problem": 30, "code": "(fn [s] (reduce #(if (= (last %1) %2) %1 (concat %1 [%2])) [] s))", "user": "51319a53e4b06942423563c8"}, {"problem": 30, "code": "(fn [x] (\n         reduce\n         #(if \n            (= %2 (last %1)) \n            %1\n            (conj %1 %2)\n            )\n         []\n         x\n         )\n  )", "user": "57762befe4b0979f8965162f"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "57763002e4b0979f89651631"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "558e963ae4b0277789237653"}, {"problem": 30, "code": "#(reduce (fn [a b] (if-not (= (last a) b) (conj a b) a)) [] %)", "user": "5776385fe4b0979f89651632"}, {"problem": 30, "code": "(fn\n  [seq]\n  (loop [seq seq list '()]\n    (if (not-empty seq)\n      (if (not= (second seq) (first seq))\n        (recur (rest seq) (conj list (first seq)))\n        (recur (rest seq) list))\n      (reverse list))) \n  )", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn [acc curr]\n            (if (= (last acc) curr)\n              acc\n              (concat acc [curr]))) [] xs))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 30, "code": "(fn compress [coll]\n  (let [f (fn [acc input]\n            (if (= (last acc) input)\n              acc\n              (conj acc input)))]\n    (reduce f [] coll)))", "user": "5776e21de4b0979f89651642"}, {"problem": 30, "code": "(fn [x]\n  (loop [tmp (seq x) result []]\n    (if (empty? tmp)\n      result\n      (recur (rest tmp)\n             (cond\n              (not= (first tmp)(last result)) (conj result (first tmp))\n              :else result\n              )\n             )\n      )\n    )\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5777cffae4b0979f89651651"}, {"problem": 30, "code": "(fn [st]\n   (let [compress (fn [s el acc]\n                    (if (empty? s) (reverse acc)\n                      (if (= el (first s)) (recur (rest s) el acc) \n                        (recur (rest s) (first s) (cons (first s) acc)))))]\n     (compress st nil '())))", "user": "57780e4fe4b0979f89651657"}, {"problem": 30, "code": "#(reduce (fn [acc inp] \n          (if (= inp (last acc)) \n            acc \n            (conj acc inp)))\n        [] %)", "user": "5761513fe4b0994c1922fb87"}, {"problem": 30, "code": "(fn [c]\n   (reverse \n     (loop [xs c acc '()]\n       (if (empty? xs)\n         acc\n         (recur\n           (rest xs)\n           (if (= (first acc) (first xs)) acc (conj acc (first xs))) \n           )))\n       ))", "user": "577829f9e4b0979f8965165a"}, {"problem": 30, "code": "#(loop [i % result []]\n    (if (empty? i)\n      result\n      (if (= (last result) (first i))\n        (recur (rest i) result)\n        (recur (rest i) (conj result (first i))))\n      ))", "user": "560c37b5e4b05f002753df2e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5778b78be4b0979f89651666"}, {"problem": 30, "code": "(fn [s]\n  (loop [result [] left s]\n    (if (empty? left)\n      result\n      (let [next (first left)]\n        (recur (conj result next) (drop-while #(= next %) left))))))", "user": "577629abe4b0979f8965162e"}, {"problem": 30, "code": "(fn [s] (reduce (fn [memo x] (if (= (last memo) x) memo (conj memo x))) [] s))", "user": "577bf999e4b0d3393e5deb2c"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (concat %1 [%2])) []", "user": "577c12dfe4b0d3393e5deb2f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "577abecfe4b0d3393e5deb06"}, {"problem": 30, "code": "#(loop [[x l & xs :as s] % r []]\n   (cond\n    (nil? x) r\n    (= l x) (recur (rest s) r)\n    :else (recur (rest s) (conj r x))\n     ))", "user": "571346c0e4b07c98581c3a9b"}, {"problem": 30, "code": "#(map first (partition-by identity %))\n\n;(fn compress [s]\n;  (cond\n;   (nil? (next s)) [(first s)]\n;   (= (first s) (second s)) (compress (next s))\n;   true (concat [(first s)]\n;                (compress (next s)))))", "user": "577b4440e4b0d3393e5deb0f"}, {"problem": 30, "code": "(fn [x]\n  (loop [newlist [] current \"\" cnt 0]\n    (if (< (- (count x) 1) cnt)\n      newlist\n      (if (= current (nth x cnt))\n        (recur newlist current (inc cnt))\n        (recur (conj newlist (nth x cnt)) (nth x cnt) (inc cnt))))))", "user": "5756e218e4b02ea1147992e5"}, {"problem": 30, "code": "(fn cmprs [x]\n  (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] x)\n)", "user": "577d3feee4b0c8d87281f6d2"}, {"problem": 30, "code": "#(reduce (fn [coll e] (if (= (last coll) e) coll (conj coll e))) [] %)", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 30, "code": "(fn [coll] (loop [c coll \n                  a []]\n             (let [v (first c)\n                   n (concat a (if (not= v (second c)) [v] []))]\n               (if (empty? c)\n               a\n               (recur (rest c) n)))))", "user": "577f0b0ee4b0c8d87281f6f3"}, {"problem": 30, "code": "(fn mycs [x]\n\t( loop [n [] p x]\n\t\t( if ( nil? p)\n\t\t\tn\n\t\t\t(if ( = (last n)(first p))\n\t\t\t\t(recur n ( next p ))\n\t\t\t\t(recur ( conj n (first p)) (next p)) ))))", "user": "575ec102e4b08062f99a4e71"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "5776f39de4b0979f89651643"}, {"problem": 30, "code": "reduce (fn [a b]\n            (if (= b (last a))\n              a\n              (conj a b))) []", "user": "577f635be4b0d36ec5835e64"}, {"problem": 30, "code": "(fn [l] (mapcat #(if (= %2 %) () (list %2)) (cons nil l) l))", "user": "4ecf5ee1535d44c135fd68b7"}, {"problem": 30, "code": "#(reduce\n         (fn [acc el]\n           (if (= el (last acc))\n             acc\n             (conj acc el))) [] %)", "user": "5776558ee4b0979f89651633"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "57741d00e4b0979f896515f7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56f514cee4b046a417f92068"}, {"problem": 30, "code": "#(let [l (seq %)] (reduce (fn [v r] (if (not= (last v) r) (conj v r) v)) [] l))", "user": "5674607ae4b05957ce8c6137"}, {"problem": 30, "code": "(fn flt[col](\n             cond\n             (= 1 (count col)) col\n             :else (if ( = (first col)(second col)) (flt (rest col)) (cons (first col) (flt (rest col))))))", "user": "548f3ed8e4b0e286459a1236"}, {"problem": 30, "code": "#(reduce (fn\n            [new-arr arr]\n            (if (= arr (last new-arr))\n              new-arr\n              (conj new-arr arr)))\n          []\n          %)", "user": "576d6266e4b0979f89651563"}, {"problem": 30, "code": "(fn [coll]\n  (loop\n    [[x & xs :as input] coll\n     last-item nil\n     result []]\n    (if (empty? input)\n      result\n      (recur xs x (if (= last-item x) result (conj result x))))))", "user": "555b6e82e4b0deb715856e51"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 30, "code": "(fn dbl [[fs sc & rs]]\n      (if (= fs sc)\n          (dbl (concat (list fs) rs)\n           )\n          (if (nil? sc)\n            (list fs\n             )\n           (concat (list fs) (dbl (concat (list sc) rs)))\n           )\n       )\n)", "user": "56f070fee4b04a395b9a0478"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "576df252e4b0979f8965156f"}, {"problem": 30, "code": "(fn [x] (reduce #(if-not (= (last %1) %2)\n    (conj %1 %2)\n    %1) [] x))", "user": "577bfef9e4b0d3393e5deb2d"}, {"problem": 30, "code": "#(map first (partition-by identity \n%))", "user": "5726ccf4e4b0c5bde472c12c"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "574ff497e4b02ea114799266"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "5783c859e4b0ebec4cfb74bd"}, {"problem": 30, "code": ";reduce (fn[r x] (if (= x (last r)) r (concat r (list x)) )) '()\n#(map first (partition-by identity %))", "user": "577e54bbe4b0c8d87281f6e5"}, {"problem": 30, "code": "(fn [s] (loop [in (seq s) out []]\n    (if (empty? in)\n        out\n        (recur (rest in)\n               (if (= (first in) (last out))\n                   out\n                   (conj out (first in))\n               )\n        )\n    )\n))", "user": "5784ec65e4b0ebec4cfb74d1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57619fc9e4b0994c1922fb93"}, {"problem": 30, "code": "(fn [s]\n  (loop [ss s prev nil ret '()]\n    (let [fst (first ss)]\n      (cond (empty? ss) (reverse ret)\n            (= fst prev) (recur (rest ss) fst ret)\n            :else (recur (rest ss) fst (cons fst ret))))))", "user": "5151d574e4b03e678e393ae0"}, {"problem": 30, "code": "#(reduce (fn [coll v] (if (or (empty? coll) (not (= (last coll) v))) (concat coll (list v)) coll)) '() %)", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 30, "code": "(fn dedup [s]\n  (loop [prev nil i 0 acc []]\n    (if (= i (count s)) \n      acc\n      (let [curr (nth s i)]\n        (if (= curr prev)\n          (recur curr (inc i) acc)\n          (recur curr (inc i) (conj acc curr)))))))", "user": "55ff2f89e4b00f4cabc5765e"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5785de78e4b0ebec4cfb74e8"}, {"problem": 30, "code": "(fn [b] (reduce (fn [c n] (if (= (last c) n) c (conj c n)))[] b))", "user": "577da4eae4b0c8d87281f6d7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "577f442ce4b0d36ec5835e60"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "566e3af2e4b0a866af6896d5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5757142ae4b02ea1147992ed"}, {"problem": 30, "code": "(fn [x] (reverse (reduce #(if (not= (first %1) %2) (conj %1 %2) %1) '() x)))", "user": "514872f5e4b05514c84b7cbe"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 30, "code": "reduce (fn [r x] \n            (if (= (last r) x)\n              r\n              (conj r x))) []", "user": "578606d2e4b0ebec4cfb74ec"}, {"problem": 30, "code": "#(loop [coll (seq %) res []] (cond (empty? coll) res\n                             (empty? (rest coll)) (if (= (first coll) (last res)) res (conj res (first coll)))\n                             (= (first coll) (second coll)) \n                                   (if (= (last res) (first coll)) (recur (nnext coll) res)\n                                     (recur (nnext coll) (conj res (first coll))))\n                             :else (if (= (last res) (first coll)) \n                                     (recur (nnext coll) (conj res (second coll)))\n                                            (recur (nnext coll) (conj res (first coll) (second coll))))))", "user": "57615a22e4b0994c1922fb88"}, {"problem": 30, "code": "(fn [input-seq]\n  (reduce (fn [acc x]\n            (if (not= (last acc) x)\n              (conj acc x)\n              acc))\n          []\n          input-seq))", "user": "5785de43e4b0ebec4cfb74e5"}, {"problem": 30, "code": "#(map last (partition-by identity %))", "user": "5786e182e4b0ebec4cfb7500"}, {"problem": 30, "code": "(fn [s]\n  \"remove consecutive duplicates from the input sequence\"\n  (loop [sq s\n         prev nil\n         result []]\n    (if (seq sq)\n      (recur (rest sq) (first sq) (if-not (= prev (first sq))\n                                    (conj result (first sq))\n                                    result))\n      result)))", "user": "56fc9a2de4b08d47c977819b"}, {"problem": 30, "code": "(fn [lis]\n  (loop [li lis sum '()]\n    (if (empty? li)\n      (reverse sum)\n      (if (=  (first li) (second li))\n        (recur (rest li) sum)\n        (recur (rest li) (conj sum (first li)))))))", "user": "5783c505e4b0ebec4cfb74bc"}, {"problem": 30, "code": "(fn [s] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "user": "577832f4e4b0979f8965165b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "566e6850e4b0a866af6896da"}, {"problem": 30, "code": "(fn f \n  ([r xs]\n    (if (= xs [])\n      r\n      (if (= (last r) (first xs))\n        (f r (rest xs))\n        (f (conj r (first xs)) (rest xs)))))\n  ([xs]\n   (f [] xs)))", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "578d230fe4b0ebec4cfb7564"}, {"problem": 30, "code": "(fn [s]\n  (->> s\n      (partition-by identity)\n      (map first)))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 30, "code": "(fn compress [ls]\n  (let [seq-to-compress (seq ls)]\n    (loop [remaining-to-compress (rest seq-to-compress)\n           compressed-seq (conj [] (first seq-to-compress))]\n      (if (not (first remaining-to-compress)) compressed-seq\n          (if (= (last compressed-seq) (first remaining-to-compress))\n            (recur (rest remaining-to-compress) compressed-seq)\n            (recur (rest remaining-to-compress) (conj compressed-seq (first remaining-to-compress))))))))", "user": "578ce779e4b0ebec4cfb7561"}, {"problem": 30, "code": "#(reduce (fn [r x] (if (= x (last r)) r (conj r x))) [] %)", "user": "578e5750e4b0ebec4cfb7581"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] (seq %1))", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 30, "code": "(fn [s] \n  (reduce #(if\n            (= (last %1) %2)\n            %1\n            (conj %1 %2))\n          (vector (first s))\n          s))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "578f9a18e4b0ebec4cfb7598"}, {"problem": 30, "code": "#(reduce (fn [r n]\n           (if (= (last r) n)\n             r\n             (conj r n)))\n         []\n         %)", "user": "577ab41fe4b0d3393e5deb05"}, {"problem": 30, "code": "(fn compress [a-seq]\n  (cond \n    (empty? a-seq) '()\n    :else (let [val (first a-seq)]\n            ;; drop-while is the secret sauce, drops all values from a list\n            ;; till the predicate remains true\n            (cons val (compress (drop-while (fn [x]\n                                              (= x val)) a-seq))))))", "user": "5786c182e4b0ebec4cfb74fd"}, {"problem": 30, "code": "(fn [col]\n  (mapcat set (#(partition-by identity %1) col)))", "user": "5785de4ce4b0ebec4cfb74e6"}, {"problem": 30, "code": "#(reduce\n  (fn [acc x]\n    (if-not (= (last acc) x)\n        (conj acc x)\n        acc))\n  [] %)", "user": "530e75d5e4b08068f379ecba"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56092852e4b0053d1b86c7d9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5790b3d0e4b0ebec4cfb75ad"}, {"problem": 30, "code": "(fn [sq]\n  (loop [sq sq result []]\n    (if (empty? sq)\n      result\n      (if (= (first sq) (last result))\n        (recur (rest sq) result)\n        (recur (rest sq) (conj result (first sq)))))))", "user": "57457b1ce4b009280f9f2b4c"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] %)", "user": "575e71a2e4b0846ea39baf26"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "569fc70ee4b0542e1f8d1499"}, {"problem": 30, "code": "(fn f [s]\n  (cond\n   (empty? s)               ()\n   (= (first s) (second s)) (f (rest s))\n   :else                    (cons (first s) (f (rest s)))))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 30, "code": "(fn compress [xs]\n  (reduce (fn [acc x] (if (= x (last acc)) acc (conj acc x))) [] xs))\n\n;#(map first (partition-by identity %))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57934c67e4b0e215f87e8456"}, {"problem": 30, "code": "(fn [x] (map first (filter #(not= (first %) (second %)) (map #(vector %1 %2) x (conj (vec (rest x)) nil)))))", "user": "578fc072e4b0ebec4cfb759a"}, {"problem": 30, "code": "(fn [lst]\n  (reduce (fn [res el]\n            (if (= el (last res))\n                res\n                (conj res el)))\n          []\n          lst))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 30, "code": "#(map (comp first set) (partition-by identity %))", "user": "55a3d7c7e4b0acc240e3153d"}, {"problem": 30, "code": "#(letfn [(conjs [l x]\n               (if (not= (last l) x) (conj l x) l))]\n      (loop [rs [] c %]\n        (if (nil? (first c))\n          rs\n          (recur (conjs rs (first c)) (drop 1 c)))))", "user": "57762e67e4b0979f89651630"}, {"problem": 30, "code": "(fn [array] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] array))", "user": "576d398be4b0979f8965155d"}, {"problem": 30, "code": "(fn f [ls] \n  (cond \n   (empty? ls) ls\n   (empty? (rest ls)) ls\n   (= (first ls) (second ls)) (f (rest ls))\n   :else (cons (first ls) (f (rest ls)))))", "user": "516064e5e4b009fba0926e26"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 30, "code": "(fn [input-string]\n   (loop [result [] input input-string]\n     (if (empty? input)\n       result\n       (recur (if (not= (last result) (first input))\n                (conj result (first input))\n                result)\n              (rest input)))))", "user": "5790e62ae4b0ebec4cfb75b0"}, {"problem": 30, "code": "(fn compressor [x] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] (seq x)))", "user": "578e2829e4b0ebec4cfb757d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5795f1f1e4b0e215f87e8490"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "574cd554e4b02ea114799224"}, {"problem": 30, "code": "(fn [s]\n   (reverse (reduce (fn [compressed val]\n                      (println (str \"compressed:\" compressed))\n                      (println (str \"val:\" val))\n                      (if (= val (first compressed))\n                        compressed\n                        (conj compressed val))) '() s)))", "user": "57958dace4b0e215f87e8484"}, {"problem": 30, "code": "(fn fi [s]\n(loop [index 0 se s  ret [(first s)]]\n  (if (< index (dec (count s)))\n   (let [pre (first se) post (second se)]\n\t(if (= pre post)\n\t (recur (inc index) (rest se) ret)\n\t (recur (inc index) (rest se) (conj ret post)))\n   )\n   ret)))", "user": "579601c8e4b0e215f87e8492"}, {"problem": 30, "code": "apply (fn redundancy\n  ([x & rest] (cons x (apply redundancy (drop-while #(= x %) rest))))\n  ([] nil))", "user": "57915ba4e4b0ebec4cfb75ba"}, {"problem": 30, "code": "(fn my-compress [x] ((fn recursive-compress [a b s] (if (empty? a)\n                                                       b\n                                                       (let [one-item (first a)\n                                                             another-item (second a)]\n                                                         (recursive-compress (rest a) \n                                                                             (cond (= one-item another-item) b\n                                                                                   s (str b one-item)\n                                                                                   :else (concat b (list one-item)))\n                                                                             s))))\n   x nil (if (string? x) true nil)))", "user": "577feed1e4b0d36ec5835e71"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "578e01e9e4b0ebec4cfb7575"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] %)", "user": "55478ce2e4b0a04f7929954e"}, {"problem": 30, "code": ";; #(reduce (fn [r x] (if (= (last r) x) r (conj r x))) [] %)\n#(map last (partition-by identity %))", "user": "4fa436dce4b081705acca19b"}, {"problem": 30, "code": ";#(loop [o [] s %]\n;   (if (= s '())\n;    o\n;     (if (= (last o) (first s))\n;       (recur o (rest s))\n;       (recur (conj o (first s)) (rest s)))))\n\n#(map first (partition-by identity %))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 30, "code": "(fn [l] (map first (partition-by identity l)))", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 30, "code": ";#(loop [o [] s %]\n;   (if (= s '())\n;    o\n;     (if (= (last o) (first s))\n;       (recur o (rest s))\n;       (recur (conj o (first s)) (rest s)))))\n\n#(map first (partition-by identity %))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57853bd9e4b0ebec4cfb74d6"}, {"problem": 30, "code": "(fn dedup\n  ([xs]\n   (dedup [] xs))\n  ([acc xs]\n   (if (empty? xs)\n     acc\n     (if (= (last acc) (first xs)) \n       (dedup acc (rest xs))\n       (dedup (conj acc (first xs)) (rest xs))))))", "user": "579563ffe4b0e215f87e847e"}, {"problem": 30, "code": "#(loop [collected [] arr %] ( if (empty? arr) collected ( recur (if (= (first arr) (last collected)) collected (concat collected [(first arr)])) (rest arr))))", "user": "57986b76e4b039eba2ecb116"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5799fc93e4b05b1deef9add0"}, {"problem": 30, "code": "#(loop [x % y []] (if (zero? (count x)) y (recur (rest x) (if (= (first x) (last y)) y (conj y (first x))))))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 30, "code": "(fn rem-dupl\n    [coll]\n    (reduce\n     (fn agg [res el]\n         (if (= el (last res))\n             res\n           (conj res el)))\n     []\n     coll))", "user": "568bd448e4b0dcc4269f40a9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "579c8ad1e4b05b1deef9ae0c"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= b (last a)) a (conj a b) )) (vector (first %)) (rest %))", "user": "56f09bf4e4b04a395b9a047f"}, {"problem": 30, "code": "(fn compr [z]  (for [bla  (conj  (mapv (fn bla3 [x y] (if-not  (= x y) x )) (butlast z)  (rest z)) (last z)   ) :when (not  (nil? bla))] bla))", "user": "4f035fbe535dcb61093f6a92"}, {"problem": 30, "code": "(fn [duplist]\n  (loop [dl duplist res []]\n    (if (empty? dl)\n      res\n      (if (= (last res) (first dl))\n        (recur (next dl) res)\n        (recur (next dl) (conj res (first dl)))\n      )\n    )\n  )\n)", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56283825e4b00e49c7cb47e4"}, {"problem": 30, "code": "(fn [xs]\n  (reduce\n    (fn [agg now]\n      (if (and (not (empty? agg)) (= (last agg) now))\n        agg\n        (conj agg now)))\n    []\n    xs\n   ))", "user": "57717915e4b0979f896515b3"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 30, "code": "(fn [x]\n   (let [s (seq x)]\n     (reduce   #(if (= %2 (last %1))\n                  %1\n                  (conj  %1 %2) )\n               [ ] s)))", "user": "51e7c1f1e4b0a3e081b8cbef"}, {"problem": 30, "code": "#(reduce \n  (fn [acc x] \n    (if (= (last acc) x) \n      acc \n      (conj acc x))) \n  [] %)", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "579f4812e4b05302be0b72fb"}, {"problem": 30, "code": "(fn [col] (reverse (reduce (fn [acc x] \n                             (if (not= (first acc) x)\n                                (cons x acc)\n                                acc))\n                           '()\n                           col)))", "user": "545b486ae4b01be26fd7464f"}, {"problem": 30, "code": "(fn [col] (concat (map #(first %) (filter #(not= (first %) (second %)) (map vector col (drop 1 col)))) (repeat 1 (last col))))", "user": "578e535de4b0ebec4cfb7580"}, {"problem": 30, "code": "(fn [c] (map first (partition-by identity c)))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57783873e4b0979f8965165c"}, {"problem": 30, "code": "(fn comp-seq [n]\n  (map first (partition-by identity n)))", "user": "57a178ade4b0c3d858beb8ec"}, {"problem": 30, "code": "(fn [coll] \n  (reverse (reduce (fn [x y] \n                     (if (= (first x) y) \n                       x\n                       (conj x y)))\n                   '()\n                   coll)))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 30, "code": "(fn [s]\n  (loop [olds s news []]\n    (if (empty? olds)\n      news\n      (recur (rest olds) (if (= (last news) (first olds)) news (conj news (first olds))))\n      )\n    )\n  )", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "577e42dee4b0c8d87281f6e4"}, {"problem": 30, "code": "#(loop [input %\n        output '()]\n   (if (empty? input)\n     output\n     (recur (rest input)\n            (if (= (first input) (last output))\n              output\n              (concat output (list (first input)))))))", "user": "57a310b4e4b0c3d858beb90c"}, {"problem": 30, "code": ";reduce (fn [mvector lastpart part]\n;         (if (= part lastpart)\n;          myvector\n;         (conj myvector part))\n;)[] \n(fn cmprs [coll]\n  (if (empty? coll)\n    nil\n    (do\n  (let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r))\n      )\n    )\n      )\n    )\n  )", "user": "579be21fe4b05b1deef9adff"}, {"problem": 30, "code": "#(map first (partition-by identity %) )", "user": "57757612e4b0979f8965161d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "578e07cfe4b0ebec4cfb7578"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "579c7db7e4b05b1deef9ae0a"}, {"problem": 30, "code": "(fn[x](map first (partition-by identity x)))", "user": "52c8a814e4b0c2d177d62138"}, {"problem": 30, "code": "(fn [seq]\n     (loop [sq seq lst nil acc []]\n           (if (empty? sq)\n               acc\n               (recur (rest sq) (first sq) (if (= lst (first sq))\n                                               acc\n                                               (conj acc (first sq)))))))", "user": "57a22c85e4b0c3d858beb8f6"}, {"problem": 30, "code": "(fn [col]\n  (loop [c col\n         r []]\n    (if (empty? c)\n      r\n      (let [f (first c)\n            l (last r)]\n        (if (= f l)\n          (recur (rest c) r)\n          (recur (rest c) (concat r [f])))))))", "user": "55b1d0b5e4b0da326a65cf73"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57509096e4b02ea114799277"}, {"problem": 30, "code": "(fn [acc prev [x & xs]]\n  (cond \n   (nil? x)   acc\n   (= prev x) (recur acc x xs)\n   :else      (recur (conj acc x) x xs))\n) [] nil", "user": "57a4bb65e4b0a966079561eb"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "57a4f5cae4b0a966079561f0"}, {"problem": 30, "code": "(fn [coll]\n  (loop [mycol coll res [] elem nil]\n         (if (not (empty? mycol))\n           (let [curr (first mycol)]\n             (if (not (= elem curr))\n               (recur (rest mycol) (conj res curr) curr)\n               (recur (rest mycol) res curr)))\n           res)))", "user": "57936970e4b0e215f87e8458"}, {"problem": 30, "code": "(fn remove-dups [d]\n  (loop [out []\n         x d]\n    (cond\n      (empty? x) out\n      (= (first x) (first (rest x))) (recur out (rest x))\n      :else (recur (conj out (first x)) (rest x))\n    )\n\n  )\n)", "user": "579d1567e4b05b1deef9ae12"}, {"problem": 30, "code": "(fn ddp [s] \r\n  (if-not (string? s)   \r\n    (map first (partition-by identity s))\r\n    (apply str (ddp (seq s)))))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 30, "code": "(fn r [s]\n  (cond\n    (empty? s) '()\n    (nil? (second s)) s\n    :else (if (= (first s) (second s))\n            (r (rest s))\n            (cons (first s) (r (rest s))))))", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 30, "code": "(fn cmprs [ys]\n  ((fn cmprs0 [xs acc]\n    (if (empty? xs)\n        acc\n        (let [h (first xs)\n              r (rest xs)\n              newacc (if (= h (first r))\n                        acc\n                        (conj acc h))]\n          (recur r newacc)))) ys []))", "user": "57a49951e4b0a966079561e5"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "57a1ef58e4b0c3d858beb8f3"}, {"problem": 30, "code": "(fn [coll] (conj (map last (filter #(not= (first %) (second %)) (partition 2 1 coll))) (first coll)))", "user": "5797d4bae4b039eba2ecb107"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57a14414e4b0c3d858beb8e4"}, {"problem": 30, "code": "(fn [v] (reverse (into '() (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] v))))", "user": "57733764e4b0979f896515e0"}, {"problem": 30, "code": "#((fn foo [l c]\r\n    (if (= 0 (count l))\r\n      (list c)\r\n      (if (= (first l) c)\r\n        (foo (rest l) c)\r\n        (conj (foo (rest l) (first l)) c)))) % (first %))", "user": "57a9b2dbe4b0a96607956233"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (and (not-empty %1) (= %2 (last %1)))\n             %1\n             (conj %1 %2))\n          []\n          s))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 30, "code": "(fn [s] (reduce (fn [v i] (if (= (last v) i)\n                            v\n                            (into v [i])))\n                []\n                (seq s)))", "user": "57a9e274e4b0b8559636fc5d"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "57acb156e4b0b8559636fc8d"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "57aa4752e4b0b8559636fc6a"}, {"problem": 30, "code": "(fn f [xs]\n  (cond\n    (empty? xs) xs\n    (empty? (rest xs)) xs\n    :else (let [a (first xs), b (second xs), r (f (rest xs))]\n            (if (= a b) r (cons a r)))))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5075e374e4b09049dea827a5"}, {"problem": 30, "code": "(fn dp [[x & xs]] (cond\n                   (= nil x) []\n                   (= x (first xs)) (dp xs)\n                   :else (cons x (dp xs))))", "user": "57752a2de4b0979f89651613"}, {"problem": 30, "code": "reduce (fn [x y] (if (= y (last x)) x (conj x y))) []", "user": "57a5f1e3e4b0a96607956200"}, {"problem": 30, "code": ";(fn dropper [[x & rest]]\n;  (if x\n;    (let [p (partial = x)]\n;      (cons x \n;            (dropper (drop-while p rest ))))))\n\n\n(fn dropper [[x & rest]]\n  (if x\n    (let [p (partial = x)\n          next (drop-while p rest)]\n      (cons x \n            (dropper next)))))", "user": "579fa28fe4b0264b925669fb"}, {"problem": 30, "code": "(fn [x] (reduce #(if (not= (last %) %2) (conj % %2) %) [] x))", "user": "572a13cde4b0f4d77e65122b"}, {"problem": 30, "code": "(fn [coll]\n  (conj (vec (remove nil? (map #(if (not (= %1 %2)) %1) (seq coll) (drop 1 coll)))) (last coll)))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 30, "code": "#(map first( partition-by identity %) )", "user": "57af249fe4b0fbc9809a272b"}, {"problem": 30, "code": "(fn [input] (second (reduce \n              (fn [x y]\n                (if (= (first x) y)\n                  (list y (second x))\n                  (list y (conj (second x) y))))\n                     [nil []] input)))", "user": "57af6cf4e4b0fbc9809a2735"}, {"problem": 30, "code": "(fn [x] \n  (loop [init '(), elm x] \n    (if (= (last elm) nil) \n      init \n      (if (= (last init) (first elm)) \n        (recur init (rest elm)) \n        (recur (reverse (cons (first elm) (reverse init))) (rest elm))))))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 30, "code": "(fn consduprem [x]\n   (loop [[first-element & remaining-elements] x]\n     (if (nil? first-element)\n       nil\n     (if (= first-element (first remaining-elements))\n       (recur remaining-elements)\n       (conj (consduprem remaining-elements) first-element)                     \n    ))))", "user": "57a2328ae4b0c3d858beb8f8"}, {"problem": 30, "code": "(fn compress [init-s]\n  (loop [s (seq init-s)\n         r []]\n    (if (empty? s)\n      (if (string? init-s)\n        (apply str r)\n        (seq r))\n      (recur (rest s) (if (= (last r) (first s)) r (conj r (first s)))))))", "user": "57addbcce4b0b8559636fca3"}, {"problem": 30, "code": "reduce (fn [prev cur] (if (= cur (last prev)) prev (conj prev cur))) []", "user": "577aad81e4b0d3393e5deb04"}, {"problem": 30, "code": "(fn [coll]\n   (reduce\n    (fn [x y]\n      (if (= (last x) y)\n        x\n        (conj x y )))\n    []\n    coll))", "user": "5452a300e4b0e397800069c7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55fde52ce4b00f4cabc5764c"}, {"problem": 30, "code": "reduce #(if(= (last %1) %2) %1 (concat %1 (list %2))) '()", "user": "57a9db97e4b0b8559636fc5b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57ac7710e4b0b8559636fc88"}, {"problem": 30, "code": "(fn [ss] (reduce (fn [acc x] (if (= (last acc) x) acc (conj acc x))) [] ss))", "user": "56bfd8ade4b060a8e693e3a2"}, {"problem": 30, "code": "#(remove nil? (map (fn [x y] (when-not (= x y) x)) % (->> % rest reverse (cons -1) reverse)))", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 30, "code": "(fn [item]\n    (loop [string (seq item) vector [] last []]\n      (if (empty? string)\n        (reverse (into () vector))\n        (recur\n          (drop 1 string)\n          (if\n            (some #{(first string)} [last])\n            vector\n            (conj vector (first string)))\n          (first string)\n          ))\n\n\n      )\n\n    )", "user": "57aa103be4b0b8559636fc64"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57ab41dde4b0b8559636fc79"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "57b13adae4b0fbc9809a2750"}, {"problem": 30, "code": "(fn compress\n  ([x] (reduce (fn [x y] (if (= (last x) y) \n                           x\n                           (conj x y))) [] x)))", "user": "578f5122e4b0ebec4cfb7592"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "57a88e24e4b0a9660795621f"}, {"problem": 30, "code": "(fn\n  [coll]\n  (loop [in (rest coll) out (conj [] (first coll))]\n    (cond (empty? in) out\n          :else (if (not= (first in) (last out))\n                  (recur (rest in) (conj out (first in)))\n                  (recur (rest in) out)))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 30, "code": "#(loop [x % r []]\n          (if (empty? x) r\n              (if-not (= (first x) (second x))\n                (recur (rest x) (conj r (first x)))\n                (recur (rest x) r))))", "user": "579ea15ee4b05b1deef9ae2a"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1)\n        []", "user": "57a9eddae4b0b8559636fc5f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "572af688e4b0f4d77e651249"}, {"problem": 30, "code": "(fn compress \n  ([a] (compress (seq a) []))\n  ([a ret]\n    (if (empty? a)\n      ret\n      (let [front (first a)\n            retBack (last ret)]\n        (if (= front retBack)\n          (recur (rest a) ret)\n          (recur (rest a) (conj ret front)))))))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 30, "code": "#(reduce\n  (fn [res, x]\n    (if (= x (peek res)) res (conj res x)))\n  '() (reverse %))", "user": "57b1b8c8e4b0fbc9809a2756"}, {"problem": 30, "code": "#(reduce \n  (fn [c f] (if (= (peek c) f) c (conj c f)))\n  [] %)", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 30, "code": "(fn my-filter [s]\n   (loop [e1 (first s)\n          rst (rest s)\n          acc []]\n     (if (empty? rst)\n       (conj acc e1)\n       (recur (first rst) (rest rst)\n              (if (= e1 (first rst))\n                acc\n                (conj acc e1))))))", "user": "57985f98e4b039eba2ecb114"}, {"problem": 30, "code": "(fn [x]\n    (let [s (reduce (fn [p c] (if (= (last p) c) p (conj p c))) [] x)]\n      (if (string? x) (apply str s) s)))", "user": "4e837808535db62dc21a62d9"}, {"problem": 30, "code": "#(loop [[a & b] %\n        res []]\n   (if (nil? a)\n     (seq res)\n     (if (= a (first b))\n       (recur b res)\n       (recur b (conj res a)))))", "user": "57b5dc52e4b0fbc9809a27b3"}, {"problem": 30, "code": "(fn [s] (reverse (reduce #(if (= %2 (first %1)) %1 (cons %2 %1)) '() s)))", "user": "54722c55e4b094393f72dd74"}, {"problem": 30, "code": "#(reduce (fn [n e]\n           (if (= e (last n))\n             n\n             (conj n e))) [] (seq %))", "user": "57908d94e4b0ebec4cfb75ac"}, {"problem": 30, "code": "#(loop [result (list (first %)) se (rest %)]\n    (if (empty? se)\n      result\n      (if (= (last result) (first se))\n        (recur result (rest se))\n        (recur (concat result (list (first se))) (rest se)))))", "user": "57b59d77e4b0fbc9809a27ae"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57addf3ae4b0b8559636fca4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57b3046de4b0fbc9809a276d"}, {"problem": 30, "code": "(fn [x] (let [xx (map #(vector % %2) x (range))] (map first (filter (fn [y] (or (= 0 (last y)) (not= (first y) (nth x (- (last y) 1))))) xx)) ))", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 30, "code": "#(loop [remaining (seq %), result [] ]\n   (if (empty? remaining)\n     (apply list result)\n     (recur\n      (rest remaining)\n      (if (= (last result) (first remaining)) result (conj result (first remaining))))))", "user": "57b99d48e4b0fbc9809a27f2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57b88091e4b0fbc9809a27e1"}, {"problem": 30, "code": "(fn [x](loop [s (reverse x) lc nil res nil]\n      (if (empty? s)\n          res\n          (if (= (first s) lc)\n              (recur (rest s) lc res)\n              (recur (rest s) (first s) (conj res (first s)))\n          ))))", "user": "57af74aee4b0fbc9809a2736"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "57b6edf6e4b0fbc9809a27c8"}, {"problem": 30, "code": "#(loop [l % ret []]\n       (if (nil? l)\n         ret\n         (do\n           (if (= (first l)\n                  (second l))\n             (recur (next l) ret)\n             (recur (next l) (conj ret (first l)))))))", "user": "5386f784e4b06839e8705f17"}, {"problem": 30, "code": "#(reduce \n         (fn [acc x] \n           (if\n            (= x (last acc))\n            acc\n            (conj acc x))) [] %)", "user": "54a1c22fe4b09f271ff37c4c"}, {"problem": 30, "code": "(fn [a-seq]\n  (->> a-seq\n       (partition-by identity)\n       (mapcat set)))", "user": "56eab346e4b04a395b9a0410"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57bc9375e4b05aa3c4741c43"}, {"problem": 30, "code": "(fn [n] (reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] n))", "user": "57b35a19e4b0fbc9809a277d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "577412c6e4b0979f896515f6"}, {"problem": 30, "code": "#(first (reduce (fn[[acc prev] n] (if (= prev n) [acc prev] [(conj acc n) n])) [[] nil] %))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 30, "code": "#(loop [col %\n         result []]\n       (if (empty? col)\n           result\n           (recur (rest col)\n            (if (not= (first col) (last result))\n                 (conj result (first col))\n                 result))))", "user": "57bf304de4b05aa3c4741c75"}, {"problem": 30, "code": "(fn c [s]\n  (cond\n   (empty? (rest s)) s\n   (= (first s) (second s)) (c (rest s))\n   :default (conj (c (rest s)) (first s))))", "user": "57befca6e4b05aa3c4741c70"}, {"problem": 30, "code": "reduce #(if (not= %2 (last %1)) (conj % %2) %) []", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 30, "code": "#(reduce (fn [coll item] (if (= (first coll) item)\n\t\t\t\t\t\t\tcoll\n\t\t\t\t\t\t\t(cons item coll))) '() (reverse %))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 30, "code": "(fn [n]\n  (map first (partition-by identity n)))", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 30, "code": "(fn [x] (->> (map list x (rest x))\n     (remove #(= (first %1) (second %1)))\n     (map second)\n     (cons (first x))))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 30, "code": "(fn [coll]\n\t(loop [coll coll\n\t\t   acc []]\n\t\t   (if (empty? coll)\n\t\t   \tacc\n\t\t   \t(recur (rest coll) (if (not (= (first coll) (second coll))) \n\t\t   \t\t(conj acc (first coll)) \n\t\t   \t\tacc)))))", "user": "57c0393be4b05aa3c4741c90"}, {"problem": 30, "code": "#(loop [i %\n                   o '[]]\n              (if (empty? i) o (do (if (= (first i) (last o)) (recur (rest i) o) (recur (rest i) (conj o (first i)))))))", "user": "57b6555be4b0fbc9809a27bf"}, {"problem": 30, "code": "(fn [coll]\n  (loop [f (first coll)\n         s (second coll)\n         r (drop 2 coll)\n         result [f]]\n    (cond (and (empty? r) (= f s)) result\n          (and (empty? r) (not (= f s))) (conj result s)\n          (= f s) (recur f (first r) (rest r) result)\n          :else (recur s (first r) (rest r) (conj result s))\n          )))", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 30, "code": "(fn test [seqq]\n  (reduce (fn [x y]\n            (if (= (last x) y)\n              x\n              (conj x y)))\n          [] seqq))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 30, "code": "(fn compress-seq [some-seq]\n  (reverse (reduce\n            (fn [res el]\n              (if (not= (first res) el)\n                (cons el res) res))\n            '()\n            some-seq)))", "user": "57a6ad79e4b0a9660795620b"}, {"problem": 30, "code": "#_(reduce (fn [m,s](if (= s (last m)) m (conj m s) )) [] (seq %))\n#(reduce (fn [m,s](if (= s (last m)) m (conj m s) )) [] %)", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 30, "code": "(fn [dups]\n  (map first\n    (filter\n      (fn [x]\n        (or\n          (not (= (first x) (last x) ))\n          (= (count x) 1)))\n        (partition-all 2 1 (seq dups)))))", "user": "57c2d0c1e4b05aa3c4741cb8"}, {"problem": 30, "code": "(fn [s] (reduce #(cond (= (last %1) %2) %1 :else (conj %1 %2)) [(first s)] (rest s)))", "user": "57c3451fe4b05aa3c4741cbd"}, {"problem": 30, "code": "(fn remove-consecutive-duplicates                                                     \n  [coll]                                                                                          \n  (loop [processed [] unprocessed coll]                                                           \n    (if (empty? unprocessed)                                                                      \n      processed                                                                                   \n      (if (not (= (first unprocessed) (second unprocessed)))                                      \n        (recur (conj processed (first unprocessed)) (rest unprocessed))                           \n        (recur processed (rest unprocessed))))))", "user": "578bbd3ee4b0ebec4cfb754e"}, {"problem": 30, "code": "(fn compress[s]\n  (->>\n   (seq s)\n   (partition-by identity)\n   (map first)))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 30, "code": "(fn s [s]\n  (map first (partition-by identity s))\n)", "user": "57c62aece4b05aa3c4741cf1"}, {"problem": 30, "code": "(fn [x] (keep-indexed (fn [i y] (if (or (= i 0) (not= y (get x (- i 1)))) y)) x))", "user": "57395f32e4b0cd1946bd1070"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 30, "code": "(fn [x]\n  (reduce (fn [acc elem]\n            (if (= elem (last acc))\n                   acc\n                   (conj acc elem))) [(first x)]  x))", "user": "57c3df67e4b05aa3c4741cc5"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [(first %)] (rest %))", "user": "57c1b32be4b05aa3c4741ca4"}, {"problem": 30, "code": "#(let [f1  (fn f [s]\n              (loop [v (seq s) res '() ]\n                (if (> 2 (count v) )\n                  (concat res v)\n                  (if (= (first v) (second v) )\n\n                    (concat res (f (drop 1 v)  )   )\n                    (cons  (first v) (f (drop 1 v)  )   )\n                    ))))]\n    (f1 %)\n    )", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 30, "code": "(fn compressASeq\n  [x]\n  (loop [[start & end] x\n         result [(first x)]]\n    (if (= end nil)\n      result\n      (do (if (= start (first end))\n            (recur end result)\n            (recur end (conj result (first end))))))\n    ))", "user": "57c731ede4b05aa3c4741d00"}, {"problem": 30, "code": "(fn compress ([s l]\n  (if (nil? s) s\n    (let [[h & tail] s]\n      (if (= h l)\n        (compress tail h)\n        (cons h (compress tail h))\n      )\n    )\n  ))\n  ([s] (compress s nil))\n)", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 30, "code": "(fn[coll] (reduce (fn[a b] (if (= (last a) b) a (conj a b))) [] coll))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 30, "code": "#(loop [l \"\" r % out []]\n   (if (= r [])\n     out\n     (if (= (first r) l)\n       (recur (first r) (rest r) out)\n       (recur (first r) (rest r) (conj out (first r))))))", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 30, "code": "(fn [coll] \n  (map first (partition-by identity coll)))", "user": "57aa2b97e4b0b8559636fc66"}, {"problem": 30, "code": "(fn [col]\n  (loop [el col, res [], pr nil]\n    (if (seq el) (if (not= (first el) pr) (recur (rest el) (conj res (first el)) (first el)) \n                                          (recur (rest el) res (first el)))\n                 res)))", "user": "57c7cef5e4b05aa3c4741d0d"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "57c92bdbe4b05aa3c4741d27"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "558e160ce4b027778923764c"}, {"problem": 30, "code": ";reduce (fn [r x] (if (= (last r) x) r (conj r x))) []\n;reduce (fn [resp x] (if (= (last resp) x) resp (conj resp x))) []\n\n; use a loop with recur\n(fn [x]\n   (loop [x x\n          return []]\n     (if (empty? x)\n       return\n       (if (nil? (first return))\n         (recur (rest x) (conj return (first x)))\n         (if (= (last return) (first x))\n           (recur (rest x) return)\n           (recur (rest x) (conj return (first x))))))))", "user": "57c44053e4b05aa3c4741ccb"}, {"problem": 30, "code": "reduce #(if-not (= %2 (last %)) (conj % %2) %) []", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57c6bca1e4b05aa3c4741cf8"}, {"problem": 30, "code": "#(reduce (fn [x y] (if-not (= (last x) y) (conj x y) x)) [] %)", "user": "57b45257e4b0fbc9809a2796"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "515310b4e4b0d6806ecd26fb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57c58ad6e4b05aa3c4741ce7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57c2d66ae4b05aa3c4741cb9"}, {"problem": 30, "code": "(fn [coll]\n  (reduce\n   (fn [acc e] \n     (if (= (last acc) e) \n       acc \n       (concat acc (list e) ))) \n     '()\n     coll))", "user": "57c4e8dce4b05aa3c4741cd7"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res)(first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i)))))))", "user": "57b084ece4b0fbc9809a2745"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "57a99d3fe4b0a96607956231"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5783a897e4b0ebec4cfb74b9"}, {"problem": 30, "code": "#(reduce\n\t(fn [res nxt] \n\t\t(let [\tlast-el (if (seq? res) (last res) res)\n\t\t\t\tres (if (seq? res) res (list res))]\n\t\t\t(if (= last-el nxt) res (concat res (list nxt))) ))\n\t% )", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "57b8f784e4b0fbc9809a27ea"}, {"problem": 30, "code": "(fn [data]\n  (reduce \n    (fn [lst item]\n      (if (= item (last lst))\n        lst\n        (conj lst item)))[] data))", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 30, "code": "(fn compress [a-seq]\n  (reduce (fn [acc el] (if (= (last acc) el) acc (conj acc el)))\n          []\n          a-seq)\n  )", "user": "57ca95f2e4b05aa3c4741d3b"}, {"problem": 30, "code": "#(->> (partition-by identity %) (map first))", "user": "57cd7498e4b0c746388ab897"}, {"problem": 30, "code": "reduce #(cond (= (last %1) %2) %1 :else (conj %1 %2)) []", "user": "57ce3fede4b0c746388ab8a6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 30, "code": "(fn clean [x]\n\t(let [r (if (> (count x) 1)\n\t\t\t\t\t\t(if (= (first x) (second x))\n\t\t\t\t\t\t\t(clean (rest x))\n\t\t\t\t\t\t\t(cons (first x) (clean (rest x))))\n\t\t\t\t\t\tx)]\n\t\t(if (string? x) (apply str r) r)))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 30, "code": "(fn [x]\n    (loop [newlst (list (first x)) idx 1]\n      (if (= idx (count x))\n        (reverse newlst)\n        (if (= (nth x idx) (nth x (- idx 1)))\n          (recur newlst (inc idx))\n          (recur (conj newlst (nth x idx)) (inc idx))))))", "user": "57cef3f8e4b0c746388ab8b4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57c45e64e4b05aa3c4741ccf"}, {"problem": 30, "code": "(fn [input] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []  (seq input)))", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 30, "code": "(fn [arg]\n  (reduce #(if (= (last %1) %2) \n             %1\n             (conj %1 %2)) [] arg))", "user": "57c7fa03e4b05aa3c4741d12"}, {"problem": 30, "code": "#(reverse (reduce (fn [ a b] (if (= (first a) b ) a (conj a b))) () %))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 30, "code": "(fn [s] (reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) [] s))", "user": "57cc7d96e4b0c746388ab882"}, {"problem": 30, "code": "(fn [coll]\n  (loop [[x & xs] coll\n         prev nil\n         res []]\n    (cond\n     (nil? x) res\n     (= x prev) (recur xs prev res)\n     :else (recur xs x (conj res x)))))", "user": "57a775bbe4b0a96607956214"}, {"problem": 30, "code": "(fn [s] \n  (reduce (fn [seed n]\n            (if (= n (last seed))\n              seed\n              (conj seed n)))\n          []\n          s))", "user": "559e7848e4b08a52bd4f97d4"}, {"problem": 30, "code": "(fn compress\n  [sequence]\n  (reduce (fn\n            [c val]\n            (if (= (last c) val)\n              c\n              (conj c val))) [] sequence))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 30, "code": "#(reduce (fn [a e] (if (not= (last a) e) (conj a e) a)) [] (seq %))", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57c56d78e4b05aa3c4741ce3"}, {"problem": 30, "code": "(fn rem-dup [x] \n  (if (= x []) []\n   (let [i (first x)\n         r (rest x)\n         j (first r)]\n     (if (= i j)\n       (rem-dup r)\n       (concat [i] (rem-dup r))))))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 30, "code": "(fn [col] (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] (seq col)))", "user": "57d588a5e4b0bd073c2023b6"}, {"problem": 30, "code": "(fn [v]\n  (loop [i v\n         res [] ]\n    (if (empty? i)\n      res\n      (let [item (first i)]\n        (if (= item (last res))\n          (recur (rest i) res)\n          (recur (rest i) (conj res item)))))))", "user": "57d4f225e4b0bd073c2023a6"}, {"problem": 30, "code": "(fn [inp] \n  (reduce #(if (empty? %1)\n             (conj %1 %2)\n             (if (= (first %1) %2)\n               %1\n               (conj %1 %2)))\n          () (reverse inp)))", "user": "56958a16e4b0dcc4269f4129"}, {"problem": 30, "code": "(fn [initial-x] (loop [x initial-x, result ()]\n                 (if (empty? x)\n                   (reverse result)\n                    (if-not (= (first result) (first x))\n                    \t(recur (rest x) (conj result (first x)))\n                      \t(recur (rest x) result)\n                    )\n                 )))", "user": "57d60d83e4b0bd073c2023c2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57d6b9c4e4b0bd073c2023cb"}, {"problem": 30, "code": "(fn compress-recur\n  ([the-collection] (compress-recur the-collection []))\n  ([input-collection output-collection] (compress-recur (rest input-collection) (conj output-collection (first input-collection)) (first input-collection)))\n  ([input-collection output-collection current-char] (if (empty? input-collection) output-collection (let [the-first (first input-collection)] (compress-recur (rest input-collection) (if (= the-first current-char) output-collection (conj output-collection the-first)) the-first))))\n)", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 30, "code": "(fn [arg] (reduce\n  (fn [acc v] (if (= v (last acc)) acc (conj acc v))) [] arg))", "user": "57a774e4e4b0a96607956213"}, {"problem": 30, "code": "#(reduce (fn [acc x] (if (not= (last acc) x)\n                        (conj acc x)\n                        acc\n                        ))\n          [] % )", "user": "57d93437e4b0bd073c2023f9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 30, "code": "(fn [s]\n  (map first (partition-by identity s)))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "573d8658e4b05c31a32c0814"}, {"problem": 30, "code": "(fn [values]\n  (loop [values values current nil result []]\n    (cond\n      (empty? values) result\n      (or \n        (nil? current) \n        (not= current (first values))) (recur (rest values) (first values) (conj result (first values)))\n      :else (recur (rest values) current result))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57760c89e4b0979f8965162a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57da5fc4e4b0bd073c20240f"}, {"problem": 30, "code": "(fn [s]\n  (map #(first %) (partition-by identity s)))", "user": "57dace50e4b0bd073c202416"}, {"problem": 30, "code": "(fn [input]\n  (let [coll (seq input)]\n    (->>\n     (reduce (fn [[result last-char :as akku] current]\n               (if (= last-char current)\n                 akku\n                 [(conj result current) current]))\n             [[] nil] coll)\n     (first)\n     )))", "user": "57c176abe4b05aa3c4741ca2"}, {"problem": 30, "code": "#(map first (partition-by identity % ))", "user": "57dbcc28e4b0bd073c202429"}, {"problem": 30, "code": "(fn [x]\n              (loop [a x\n                     b ()]\n                (if (empty? a)\n                  b\n                  (recur (drop-last a) (if (= (last a) (first b)) b  (conj b (last a))))\n                  )\n                )\n              )", "user": "57dd3ae3e4b0bd073c20243d"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "57a1478ae4b0c3d858beb8e5"}, {"problem": 30, "code": "(fn compress [s]\n  (loop [xs s\n         l nil\n         r nil]\n    (let [x (first xs)]\n      (cond\n       (nil? x) r\n       (= x l) (recur (rest xs) x r)\n       :else (recur (rest xs) x (concat r [x]))))))", "user": "57dda21be4b0bd073c202445"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "55f4ebffe4b06e875b46ce81"}, {"problem": 30, "code": "#(->> %\n\t(reduce (fn [a x] (if (= (first a) x) a (conj a x))) '())\n\treverse)", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 30, "code": "(fn [xs]\n   (loop [result [] xr xs old nil]\n     (cond (empty? xr) result\n           (= old (first xr)) (recur result                   (rest xr) old)\n           :else              (recur (conj result (first xr)) (rest xr) (first xr))\n           )\n)\n)", "user": "57d7c894e4b0bd073c2023de"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "530fbbaee4b08068f379eccf"}, {"problem": 30, "code": "(fn [args]\n  (loop [coll args\n         acc []]\n    (if (empty? coll)\n      acc\n      (recur \n       (rest coll)\n       (if\n         (= (last acc) (first coll)) acc\n         (conj acc (first coll)))))))", "user": "57d13683e4b0bd073c202368"}, {"problem": 30, "code": "(fn [x]\n  (loop [in (seq x) out '()]\n    (if (empty? in)\n      (reverse out)\n      (if (= (first in) (first out))\n        (recur (rest in) out)\n        (recur (rest in) (conj out (first in)))))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 30, "code": "(fn [st] (map first (partition-by identity st)))", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 30, "code": "(fn compress\n  ([src]\n   (compress src []))\n  ([src dst]\n   (if (seq src)\n     (if (= (last dst) (first src))\n       (recur (rest src) dst)\n       (recur (rest src) (conj dst (first src))))\n     dst)))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57d9cae9e4b0bd073c202409"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5799c6dee4b05b1deef9adca"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "51b8e020e4b050a1176cd69e"}, {"problem": 30, "code": "#(remove nil? (map (fn [x y] (if-not (= x y) y)) (concat (drop 1 %) \"_\") %))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 30, "code": "#(reverse\n(loop\n[coll % newcoll '()]\n(if-let\n [clause (first coll)]\n (if-let\n  [prev (first newcoll)]\n  (if (= clause prev)\n   (recur (rest coll) newcoll)\n   (recur\n    (rest coll)\n    (conj newcoll clause)))\n  (recur\n   (rest coll)\n   (conj newcoll clause)))\n newcoll)))", "user": "574eb3b1e4b02ea114799247"}, {"problem": 30, "code": "#(reduce (fn [items x] (if (= (last items) x) items (conj items x))) [] %1)", "user": "57df9f60e4b0bd073c202467"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 30, "code": "(fn [ll]\n\t  (loop [mylist (seq ll) result []]\n     (if (= mylist ())\n       result\n\t     (if (= result [])\n\t       (recur (rest mylist) (conj result (first mylist)))\n\t       (if (not= (first mylist) (last result))\n\t         (recur (rest mylist) (conj result (first mylist)))\n\t         ;do nothing\n\t         (recur (rest mylist) result)\n\t       )\n       )\n     )\n   )\n )", "user": "57e396cde4b0bfb2137f5a9e"}, {"problem": 30, "code": "#(reverse (reduce (fn [a b] (if (= (first a) b) a (conj a b))) '() (seq %)))", "user": "57dfab73e4b0bd073c202468"}, {"problem": 30, "code": "(fn compress [s] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] (vec s)))", "user": "57e56da8e4b0bfb2137f5ad6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5739ff3ae4b0cd1946bd1084"}, {"problem": 30, "code": "(fn [-s]\n  (loop [s (vec -s) new []]\n      (if (empty? s)\n        new\n        (if (= (last new) (first s))\n          (recur (rest s) new)\n          (recur (rest s) (conj new (first s)))))))", "user": "57e3f709e4b0bfb2137f5aaf"}, {"problem": 30, "code": "(fn [x]\n  (loop [orig x ans []]\n    (if orig\n      (if (= (first orig) (second orig))\n        (recur (next orig) ans)\n        (recur (next orig) (conj ans (first orig))))\n      ans)))", "user": "57894e30e4b0ebec4cfb752b"}, {"problem": 30, "code": "(fn [coll]\n  (reverse\n   (reduce\n    (fn [accum item]\n        (if-not (= (first accum) item)\n          (conj accum item)\n          accum))\n    '()\n    coll)))", "user": "56020b3fe4b04bb52996e19b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5694e9c5e4b0dcc4269f4123"}, {"problem": 30, "code": "(fn dedup\n  ([xs]\n   (dedup (rest xs) [(first xs)] (first xs)))\n  ([xs acc last]\n   (if (seq xs)\n     (if (= (first xs) last)\n       (recur (rest xs) acc (first xs))\n       (recur (rest xs) (conj acc (first xs)) (first xs)))\n     acc)))", "user": "5705f569e4b0b0fb43fd0677"}, {"problem": 30, "code": "(fn [coll] (->> coll\n                   (reduce #(if (not= (first %1) %2) (conj %1 %2) %1) '())\n                   (reverse)))", "user": "55df1985e4b050e68259b3eb"}, {"problem": 30, "code": "(fn [x]\n     ((fn tom [lst]\n        (if (empty? lst)\n          lst\n        (if (= (first lst) (second lst))\n          (tom (rest lst))\n          (cons (first lst)\n                (tom (rest lst))\n                )\n          )\n          )\n        )\n   (vec x)\n      )\n  )", "user": "57e404a3e4b0bfb2137f5ab1"}, {"problem": 30, "code": "(fn[xs] (reduce(fn[accum x] (if-not (= x (get accum (dec (count accum)))) (conj accum x) accum) ) [] xs)  )", "user": "57e3d30be4b0bfb2137f5aab"}, {"problem": 30, "code": "(fn del-consecutive-dups [col]\n  (mapcat set (#(partition-by identity %1) col)))", "user": "5797bc92e4b039eba2ecb105"}, {"problem": 30, "code": "(fn [x]\n  (loop [res []\n       rest x\n       last nil]\n  (let [[next & other] rest]\n    (if (empty? rest) \n      res \n      (if (= last next) \n        (recur res other last) \n        (recur (conj res next) other next))))))", "user": "56887bcbe4b0dcc4269f406a"}, {"problem": 30, "code": "; (fn [coll]\n;  (loop [s coll, res []]\n;    (if (empty? s)\n;      res\n;      (recur\n;      \t(rest s)\n;      \t(if (= (last res) (first s))\n;          res\n;          (conj res (first s)))))))\n\n; (fn [coll]\n;   (reduce\n;     (fn [res elem]\n;       (if (= (last res) elem)\n;        res\n;         (conj res elem)))\n;     []\n;     coll))\n(fn [s] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "user": "57e37f90e4b0bfb2137f5a9c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 30, "code": "(fn solution \n  [xs]\n  (loop [res [(first xs)] \n         curr (first xs) \n         tail (rest xs)]\n    (if (= tail '())\n      (seq res)\n      (recur (if (= curr (first tail))\n               res\n               (conj res (first tail)))\n             (first tail)\n             (rest tail)))))", "user": "57974188e4b039eba2ecb0f4"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] %)", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 30, "code": ";#(reverse (reduce (fn [x y] (if (= (first x) y) x (conj x y))) () %))\n\n#(map first (partition-by identity %))", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 30, "code": "(fn compact [coll]\n   (reverse (reduce (fn [s n] (if (= (first s) n) s (conj s n))) nil coll)))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 30, "code": "(fn compressor \n  ([a-seq] (compressor a-seq '()))\n  ([a-seq compressed]\n   (if (empty? a-seq)\n     (reverse compressed)\n     (if (= (first compressed) (first a-seq))\n       (recur (rest a-seq) compressed)\n       (recur (rest a-seq) (conj compressed (first a-seq)))))))", "user": "574e84e0e4b02ea114799243"}, {"problem": 30, "code": "(fn [s]\n  (let [h (fn h [acc e]\n          (if (empty? acc)\n            (list e)\n            (if (= e (first acc))\n              acc\n              (cons e acc))))]\n  (reduce h '() (reverse s))))", "user": "57df2722e4b0bd073c20245e"}, {"problem": 30, "code": "(fn [lst] (reduce (fn [acc, item] (if (= (last acc) item) acc (concat acc [item]) ) ) [] lst))", "user": "57eb7a97e4b0bfb2137f5b62"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57e91413e4b0bfb2137f5b20"}, {"problem": 30, "code": "(fn [s] \n  (loop [s (seq s) sq []]\n    (if (empty? s) \n      sq \n      (recur (drop-while #(= % (first s)) s) \n             (conj sq (first s))))))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "57ee9ffbe4b0bfb2137f5bc2"}, {"problem": 30, "code": "#(reduce (fn [acc i] (if (= (last acc) i) acc (conj acc i))) [] % )", "user": "57ec8d1de4b0bfb2137f5b7f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57ed2574e4b0bfb2137f5b93"}, {"problem": 30, "code": "(fn [coll]\n  (loop [remainder coll buffer '()]\n               (if (empty? remainder) \n                 buffer \n                 (recur (rest remainder)(if \n                                          (= (last buffer) (first remainder)) \n                                          buffer \n                                          (concat buffer (list(first remainder))))))))", "user": "57b167afe4b0fbc9809a2752"}, {"problem": 30, "code": "(fn [ lst ]\n  \t(loop [l lst nl []]\n      (if (empty? l)\n        \tnl\n        \t(recur (rest l) (if (= (last nl) (first l)) \n                              \tnl\n                              \t(conj nl (first l)))))))", "user": "56483f45e4b0284900eef62b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5254b45fe4b0541d1855b9a0"}, {"problem": 30, "code": "(fn [input]\n  (let [input-seq (seq input)]\n    (loop [remaining-seq input-seq prev nil ans []]\n      (if (empty? remaining-seq)\n        (lazy-seq ans)\n        (let [[ptr & remain] remaining-seq]\n          (if (= ptr prev)\n            (recur remain prev ans)\n            (recur remain ptr (conj ans ptr))))))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 30, "code": "(fn compress [x] (map first (partition-by identity x)))", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "user": "569ff6dbe4b0542e1f8d149c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57485efee4b009280f9f2b8a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53194ba3e4b08068f379ed7a"}, {"problem": 30, "code": "(fn [s]\n  (letfn [(aux [el s]\n               (if (empty? s)\n                 s\n                 (if (= el (first s))\n                   (aux el (rest s))\n                   (cons (first s) (aux (first s) (rest s))))))]\n    (cons (first s) (aux (first s) (rest s)))))", "user": "57f7c74ee4b0d3187e900902"}, {"problem": 30, "code": "(fn\n  [[x & xs]]\n  (loop [t [] e x l xs]\n    (cond\n      (= e nil) t\n      (= e (first l)) (recur t (first l) (rest l))\n      :else (recur (conj t e) (first l) (rest l)))))", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 30, "code": "(fn [x]\n                 (loop [x x\n                        res '()]\n                   (if (seq x)\n                     (if (= (first x) (second x))\n                       (recur (rest x) res)\n                       (recur (rest x) (cons (first x) res)))\n                     (reverse res) )))", "user": "57f6bd5de4b0d3187e9008ee"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "57f85b36e4b0d3187e900924"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 30, "code": "(fn [coll]\n  (if\n    (empty? coll) nil\n    (loop [coll coll\n           curr (first coll) \n           acc [(first coll)]]\n      (cond\n        (empty? coll) (seq acc)\n        (= (first coll) curr) (recur (rest coll) curr acc)\n        :else (recur (rest coll) (first coll) (conj acc (first coll)))))))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 30, "code": "(fn pack [lst]\n  (map first (partition-by identity lst)))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 30, "code": "(fn f1 [s] (reduce \n            (fn f2 [acc x] \n              (if (= x (last acc)) \n                acc \n                (conj acc x)))\n            []\n            (seq s)))", "user": "57b60e46e4b0fbc9809a27b6"}, {"problem": 30, "code": "reduce #(let [x %1 y %2]\n    (if (= (last x) y)\n        x\n        (conj x %2))) []", "user": "57ecc16fe4b0bfb2137f5b83"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) '[]", "user": "566ca8d6e4b0a866af6896bf"}, {"problem": 30, "code": "(fn compress [lst]\n  (loop [lst lst\n         nuevo ()]\n        (if (empty? lst)\n            (reverse nuevo)\n            (recur (rest lst)\n                   (if (= (first lst) (second lst))\n                       nuevo\n                       (cons (first lst) nuevo))))))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 30, "code": "(fn compress\n  [lst]\n  (->>\n    (partition-by identity lst)\n    (map first)))", "user": "57f8153de4b0d3187e900916"}, {"problem": 30, "code": "(fn compress\n  [lst]\n    (map first (partition-by identity lst)))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 30, "code": "#(loop [s []\n        dt %]\n   (if (empty? dt)\n     s\n     (if (= (last s) (first dt)) \n       (recur s (rest dt))\n       (recur (conj s (first dt)) (rest dt) ))))", "user": "57f253a3e4b0511f1d294dea"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54ba9ee8e4b0ed20f4ff6eb7"}, {"problem": 30, "code": "(fn [lst]\n  (loop [lst (seq lst)\n         new ()]\n    (if (empty? lst)\n      (reverse new)\n      (if (= (first lst) (first new))\n        (recur (rest lst) new)\n        (recur (rest lst) (cons (first lst) new))))))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 30, "code": "(fn no-reps\n  ([xs] (no-reps xs nil))\n  ([xs cm]\n   (if (empty? xs)\n     (reverse cm)\n     (if (= (first xs) (second xs))\n       (no-reps (rest xs) cm)\n       (no-reps (rest xs) (cons (first xs) cm))))))", "user": "57fe836ee4b0d3187e9009d2"}, {"problem": 30, "code": "(fn  [coll]\n  (let [f (fn [coll item]\n           (if (= (last coll) item)\n              coll\n              (conj coll item)))]\n    (into () (reverse (reduce f [] coll)))))", "user": "557c647ce4b05c286339e0c3"}, {"problem": 30, "code": "(fn [lst]\n   (map first (partition-by identity lst)) )", "user": "57f81524e4b0d3187e900913"}, {"problem": 30, "code": "(fn remove-douples [col]\n  (loop [item (first col)\n         lastItem nil\n         c col\n         res []]\n    (cond\n      (nil? item) res\n      (= item lastItem) (recur (first c)\n                               item\n                               (rest c)\n                               res)\n      :else (recur (first c)\n                   item\n                   (rest c)\n                   (conj res item)))))", "user": "5600591de4b04bb52996e166"}, {"problem": 30, "code": "#(reduce (fn [acc, x] (if (= (last acc) x) acc (conj acc x))) [] %)", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 30, "code": "(fn compress\n  [lst]\n  (loop\n    [lsta lst\n     lstb '()]\n    (cond\n      (empty? lsta) (reverse lstb)\n      (= (first lsta) (second lsta)) (recur (rest lsta) lstb)\n      :else (recur (rest lsta) (cons (first lsta) lstb)))))", "user": "57f81544e4b0d3187e900917"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 30, "code": "#(reverse (if (empty? %) \n            '() \n            (loop[curr (first %) remain (rest %) result (conj '() (first %))] \n               (if (empty? remain) \n                 result\n                 (recur \n                    (first remain) \n                    (rest remain) \n                    (if (= curr (first remain)) result (conj result (first remain)))\n  )))))", "user": "57ea79d9e4b0bfb2137f5b4f"}, {"problem": 30, "code": "(fn [coll] (if (empty? coll) coll (letfn [(rdup [a xs] (if (empty? xs) nil (if (= a (first xs)) (rdup a (rest xs)) (cons (first xs) (rdup (first xs) (rest xs)))) ))] (cons (first coll) (rdup (first coll) (rest coll))))))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 30, "code": "(letfn [(uniq [a b]\n          (cond\n            (empty? a) (reverse b)\n            (= (first a) (first b))    \n             (recur (rest a) b)\n            :else \n             (recur (rest a) (cons (first a) b))))]\n   #(uniq % '()))", "user": "5800edaae4b0a837a8b30c48"}, {"problem": 30, "code": "reduce \n\t(fn [x y] \n      (cond (empty? x) (conj x y)\n          \t(not= (last x) y) (conj x y)        \n            :else x\n       )\n    ) \n    []", "user": "57f28b22e4b0511f1d294def"}, {"problem": 30, "code": "(fn compress\n  [lst]\n  (->>\n    (partition-by identity lst)\n    (map first)))", "user": "57f81534e4b0d3187e900915"}, {"problem": 30, "code": "(fn [x]\n  (loop [lst (seq x)\n         lst1 ()]\n    (if (empty? lst)\n      (reverse lst1)\n      (if (= (first lst) (first lst1))\n        (recur (rest lst) lst1)\n        (recur (rest lst) (cons (first lst) lst1))))))", "user": "57f81549e4b0d3187e900918"}, {"problem": 30, "code": "#(remove nil? (map (fn [x] (if(not (= (first x) (second x))) (first x))) (partition 2 1 nil %)))", "user": "564a985be4b0284900eef65c"}, {"problem": 30, "code": "(fn [lst]\n  (map #(first %) (partition-by identity lst)))", "user": "57f81045e4b0d3187e90090f"}, {"problem": 30, "code": "reduce\n       (fn [result e]\n         (if  (= e (last result))\n           result\n           (into result [e])))\n       []", "user": "57fe68e2e4b0d3187e9009ce"}, {"problem": 30, "code": "(fn \n  [lst] \n  (map first (partition-by identity lst)) \n  )", "user": "57f81532e4b0d3187e900914"}, {"problem": 30, "code": "(fn [lst]\n  (map first (partition-by identity lst)))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 30, "code": "reduce (fn [final e]\n         (if (= (last final) e)\n           final\n           (into final [e])))\n         []", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 30, "code": "(fn compress\n  [n]\n  (map first (partition-by identity n)))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 30, "code": "(fn remcondup\n  ([col]\n   (remcondup\n    (rest col)\n    (vector (first col)) )\n   )\n  ([col res]\n   (if (empty? col) \n     res\n     (do \n       (if (= (first col) (last res))\n         (do\n           (println res)\n           (remcondup (rest col) res)  \n           )\n         (do\n           (println res)\n           (remcondup (rest col) (conj res (first col)))\n           )\n         )))))", "user": "57fe2d6fe4b0d3187e9009c8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57fd7344e4b0d3187e9009b6"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 30, "code": "#((fn dis [ss l r]\n    (let [[f & s] ss]\n      (cond\n        (nil? f) r\n        (= l f) (dis s f r)\n        :else (dis s f (conj r f))))) % nil [])", "user": "57de5f0ee4b0bd073c202450"}, {"problem": 30, "code": "(fn check [x & [y]]\n   (if (= (last x) nil)\n     (do y)\n     (do (if (= (last x) (first y))\n           (do (check (butlast x) y))\n           (do (check (butlast x) (conj y (last x))))\n           )))\n )", "user": "580014d7e4b0a837a8b30c32"}, {"problem": 30, "code": "#(mapcat (fn [lst] (take 1 lst)) (partition-by identity %))", "user": "580558cde4b0a837a8b30cc4"}, {"problem": 30, "code": "(fn [lst]\n  (let [partitionList (partition-by identity lst)]\n    (map first partitionList)))", "user": "57f81569e4b0d3187e900919"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58047205e4b0a837a8b30ca9"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 30, "code": "#(loop [in % out[]] (if (empty? in) out (let [i (first in)] (if (= i (last out)) (recur (rest in) out) (recur (rest in) (conj out i))))))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 30, "code": "(fn compress [coll]\n   (if (empty? coll) \n     coll\n     (let [head (first coll) \n           sub (compress (rest coll))]\n       (if (= head (first sub))\n         sub\n         (concat [head] sub)))))", "user": "57a8eba2e4b0a96607956225"}, {"problem": 30, "code": "(fn [s]\n  ((fn r[x y]\n    (cond (= x '()) y\n          (not(= (last y) (first x))) (r (rest x) (conj y (first x)))\n         :else (r (rest x) y))\n     )s []))", "user": "53e06f81e4b0d874e779ae4c"}, {"problem": 30, "code": "#(loop [remainder %1 \n        acc []]\n   (cond (= 0 (count remainder)) acc\n         (= (last acc) (first remainder)) (recur (rest remainder) acc)\n         :else (recur (rest remainder) (conj acc (first remainder)))))", "user": "57c815ade4b05aa3c4741d14"}, {"problem": 30, "code": "(fn [coll] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] coll))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn [acc x]\n            (if (= x (last acc))\n              acc\n              (conj acc x)))\n          []\n          xs))", "user": "54cb378be4b057c6fda3a273"}, {"problem": 30, "code": "(fn dedup [s] \n         (if (empty? s)\n           nil\n           (lazy-seq\n            (prn (first s) (second s))\n            (if (= (first s) (second s))\n              (dedup (rest s))\n              (cons (first s) (dedup (rest s)))\n              ))))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 30, "code": "(fn [data] (reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) () data)))", "user": "55ee84c0e4b0121d4835fdf0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57d0679ee4b0bd073c202359"}, {"problem": 30, "code": "(fn [coll]\n  (reverse\n   (reduce\n    (fn [a b]\n      (if (= (first a) b)\n        a\n        (conj a b)))\n    '()\n    coll))\n  )", "user": "57fd085ce4b0d3187e9009a9"}, {"problem": 30, "code": "(fn f [in]\n  (cond\n    (empty? in) '()\n    (= (count in) 1) in\n    (= (first in) (second in)) (f (rest in))\n    :else (cons (first in) (f (rest in)))))", "user": "57fa6f2ee4b0d3187e900962"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "53d8da61e4b0e771c3025471"}, {"problem": 30, "code": "(fn compress-a-sequence\n  [coll]\n  (if (not (empty? coll))\n    (let [first-item (first coll)\n          second-item (second coll)]\n      (if (= first-item second-item)\n        (compress-a-sequence (next coll))\n        (cons first-item (compress-a-sequence (next coll)))))))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 30, "code": "(fn [c]\n  (reduce (fn [a b]\n            (if (= b (last a))\n              a\n              (conj a b)))\n          []\n          (vec c)))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 30, "code": "#(map first (partition-by identity %))\n;distinct", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 30, "code": "(fn [x] (map #(first %) (filter #(not= (first %) (second %)) (map vector x (cons :empty x)))))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "5405885ee4b0addc1aec6668"}, {"problem": 30, "code": "(fn [x] (map #(first %) (partition-by identity x)))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 30, "code": "(fn rmv-duplicates [coll] (reduce (fn [ret val]\n           (if (= (last ret) val)\n             ret\n             (conj ret val)))\n         [] coll))", "user": "55b2505be4b0da326a65cf7d"}, {"problem": 30, "code": "(fn [strn] (map first (partition-by identity strn)))", "user": "57eb38dbe4b0bfb2137f5b5e"}, {"problem": 30, "code": "#(map first (partition-by identity  %))", "user": "57ef793de4b0bfb2137f5bd8"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "57ee41eae4b0bfb2137f5bb0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 30, "code": "#_#(loop [s %\n         result (list)]\n    (if (empty? s)\n      (reverse result)\n      (let [a (first s)\n            b (second s)]\n        (if (not= a b)\n          (recur (drop 1 s) (conj result a))\n          (recur (drop 1 s) result)))))\n\n\n;#(map first (partition-by identity %))\n\n(fn [x] (remove nil? (map #(if (= %1 %2) nil %1) x (cons nil x))))", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 30, "code": "(fn dedupe[xs]\n  (reduce #(if-not (= (last %1) %2)\n             (conj %1 %2)\n             %1)\n          []\n          xs))", "user": "580e2941e4b0849f6811b74e"}, {"problem": 30, "code": "(fn\n  ([xs]\n   (loop [lst xs acc '()]\n     (if (empty? lst)\n       (reverse acc)\n       (if (= (first acc) (first lst))\n         (recur (rest lst) acc)\n         (recur (rest lst) (into acc [(first lst)])))))))", "user": "580fb8e0e4b0f478707a05bc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57ee41a6e4b0bfb2137f5baf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57ef7393e4b0bfb2137f5bd6"}, {"problem": 30, "code": "#(loop [xs % r []]\n   (if (empty? xs)\n   \tr\n   \t(if (= (first xs) (last r))\n     (recur (next xs) r)\n     (recur (next xs) (conj r (first xs))))))", "user": "580fbaade4b0f478707a05c0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57fbf995e4b0d3187e900981"}, {"problem": 30, "code": "(fn [sq]\n  (reduce\n   #(if (= (last %1) %2) %1 (conj %1 %2)) [] sq))", "user": "57aa053fe4b0b8559636fc61"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 30, "code": "(fn [x] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) () x)))", "user": "5812eb8fe4b0f478707a0602"}, {"problem": 30, "code": "(fn remdu ([x] (remdu x nil))\n  ([s l]\n  (cond\n   (= s '()) '()\n   (= (first s) l)\n    (remdu (rest s) (first s))\n   :else\n    (cons (first s)\n          (remdu (rest s)\n                 (first s))))))", "user": "58138439e4b0f478707a0611"}, {"problem": 30, "code": "(partial reduce (fn [s c] (if (= (peek s) c) s (conj s c))) [])", "user": "580c1e9ae4b0849f6811b719"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "58172161e4b0c0e9c07b8389"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "57f3b841e4b0511f1d294e0f"}, {"problem": 30, "code": "(fn [x] \n  (loop [x x y ()]\n    (if (empty? x) y\n      (if (= (first x) (second x))\n       (recur (rest x) y)\n       (recur (rest x) (concat y [(first x)]))\n      )\n    )\n  )    \n)", "user": "58186016e4b0c0e9c07b83ad"}, {"problem": 30, "code": "(fn [xs]\n    (map first (partition-by identity xs)))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 30, "code": "(fn  [coll]\n  (loop [c coll\n         result []]\n    (cond \n      (empty? c) result\n      (empty? result) (recur (rest c) [(first c)])\n      (= (first c) (last result)) (recur (rest c) result)\n      :else (recur (rest c) (conj result (first c))))\n    )\n  )", "user": "57ffe094e4b0a837a8b30c2c"}, {"problem": 30, "code": "reduce (fn [a b] (if (= (last a) b) a (conj a b)) ) []", "user": "5816ad6de4b0c0e9c07b8378"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 30, "code": "(fn [x]\n  (lazy-seq (reduce\n    (fn [a b]\n      (if (not= (last a) b)\n        (conj a b)\n        a)) [] x))  \n  )", "user": "57fbd83ee4b0d3187e90097b"}, {"problem": 30, "code": "(fn x [coll]\n (when-let [s (seq coll)]\n  (letfn [(y [prev s]\n           (when-let [s2 (seq s)]\n            (let [c (first s2)]\n             (if (= c prev)\n              (y prev (rest s2))\n              (cons c (y c (rest s2)))))))]\n   (y nil s))))", "user": "581a703de4b0e114eb51a005"}, {"problem": 30, "code": "(fn [lst]\n  (reverse (reduce (fn [acc x] (if (= x (first acc)) acc (cons x acc))) [(first lst)] lst)))", "user": "5813e208e4b0f478707a061b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58062dd2e4b0a837a8b30cda"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 30, "code": "(fn [param0]\n   (reduce (fn [param1 param2] \n            (if (= (last param1) param2)\n                    param1  \n                    (concat param1 (list param2)))) '() param0))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 30, "code": "(fn [lst]\n     \t(reduce \n     \t\t(fn [acc x]\n   \t\t\t\t(if (not (seq acc)) (conj acc x)\n     \t\t\t\t(if (= (last acc) x) acc (concat acc [x])))) \n     \t[] lst))", "user": "5803ba6de4b0a837a8b30c95"}, {"problem": 30, "code": "(fn compress-seq [xs] (reduce (fn [acc x] (if (= x (last acc)) acc (conj acc x))) [] xs))", "user": "56255e2de4b00a550fc90297"}, {"problem": 30, "code": ";(fn compress-seqs [coll]\n;  (map first \n;    (filter \n;      #(apply (comp not =) %)\n;       (partition 2 1 (conj (vec coll) nil)))))\n\n#(map first (partition-by identity %))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "563e1c0ee4b0da801c4e4665"}, {"problem": 30, "code": "(fn compress-sequence [xs]\n  (reduce (fn [acc x] (if (= (last acc) x)\n                        acc\n                        (conj acc x))) [] xs))", "user": "5687b6abe4b0dcc4269f4061"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52faf67ce4b047fd55837005"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 30, "code": "(fn cprs [in]\n  (when-let [[l & r ] (seq in)]\n    (if (= l (first r)) \n      (cprs r) \n      (cons l (cprs r))\n     )\n   )\n )", "user": "5820924ee4b04b46fc4b0f58"}, {"problem": 30, "code": "(fn [s]\n    (loop [s' s r [] p nil]\n        (if (empty? s')\n            r\n            (let [c (first s')]\n                (recur\n                    (rest s')\n                    (if (= c p)\n                        r\n                        (conj r c))\n                    c)))))", "user": "57ae3345e4b0fbc9809a271e"}, {"problem": 30, "code": "(fn \n  [[hh & tt]]\n  (loop [[h & t] tt\n         prev hh\n         accum [hh]]\n    (let [new-accum (if (= prev h)\n                        accum\n                        (conj accum h))]\n      (if (nil? t)\n          (into () (reverse new-accum))\n          (recur t h new-accum)))))", "user": "58152157e4b0f478707a0631"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "581b4d3be4b04b46fc4b0ec6"}, {"problem": 30, "code": "(fn [my-seq]\n    (reduce\n        #(if (= %2 (last %1))\n            %1\n            (conj %1 %2))\n        []\n        my-seq))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 30, "code": "(fn [lst]\n  ((fn [lst acc]\n    (if (empty? lst)\n      acc\n      (recur (rest lst) (if (not= (first lst) (last acc))\n                           (conj acc (first lst))\n                           acc)))) lst [])\n )", "user": "58088dfde4b0a837a8b30d07"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56193c6ee4b053970a773af2"}, {"problem": 30, "code": "#(map first (remove (partial apply =) (map vector % (conj (seq %) nil))))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 30, "code": "(fn [x] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() x)))", "user": "581e76dfe4b04b46fc4b0f29"}, {"problem": 30, "code": "#(loop [s % res []] (if (empty? s) res (recur (rest s) (if (= (first s) (last res)) res (conj res (first s))))))", "user": "57465429e4b009280f9f2b60"}, {"problem": 30, "code": "(fn [a-seq]\n  (loop [s a-seq \n         deduped [] \n         last nil]\n    (if (empty? s)\n      deduped\n      (if (= (first s) last)\n        (recur (rest s) deduped (first s))\n        (recur (rest s) (conj deduped (first s)) (first s))))))", "user": "58217fbde4b04b46fc4b0f78"}, {"problem": 30, "code": "#(apply mapcat list (partition-by identity %))", "user": "58173722e4b0c0e9c07b838a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58171a9ae4b0c0e9c07b8387"}, {"problem": 30, "code": "(fn [xs] (first (reduce (fn [[out p] x] (if (= x p) [out x] [(conj out x) x])) [[] nil] xs)))", "user": "5823c717e4b051871117beb2"}, {"problem": 30, "code": "(fn [s] (loop [acc [] lst nil sq s]\n                     (let [h (first sq)]\n                     \t(if (nil? h)\n                          acc\n                          (recur (if (= h lst) acc (conj acc h)) h (rest sq))))))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 30, "code": "reduce (fn [kept x] (if (= (last kept) x) kept (conj kept x))) []", "user": "58247423e4b051871117bec5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "524dacc9e4b0a16e35cf6df8"}, {"problem": 30, "code": "#(reduce\n  (fn [a b]\n    (if (= (last a) b)\n      a\n      (conj a b)))\n  []\n  (apply list %))", "user": "58254a11e4b051871117bed9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "580517d4e4b0a837a8b30cb9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "582589b2e4b051871117bedd"}, {"problem": 30, "code": "(fn [xs] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] xs))", "user": "578df8fee4b0ebec4cfb7574"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "582089fbe4b04b46fc4b0f57"}, {"problem": 30, "code": "(fn uni [s]\n  (loop [s s acc []]\n    (if (empty? s)\n    acc\n    (let [fst (first s)]\n      (recur (rest s) (if (= fst (last acc))\n                        acc\n                        (conj acc fst)))))))", "user": "5787ce76e4b0ebec4cfb750e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5820cca0e4b04b46fc4b0f62"}, {"problem": 30, "code": "(fn [x]\n  (let [\n    is-last? (fn [xs x] (= (last xs) x))\n    add-if-new (fn [xs x] (if (is-last? xs x) xs (conj xs x)))\n  ]\n  (reduce add-if-new [] x)))", "user": "582835cbe4b051871117bf30"}, {"problem": 30, "code": "(fn [n]\n  (loop [n n\n         z []]\n    (if (= 0 (count n))\n      z\n      (if (= (last z) (first n))\n        (recur (rest n) z)\n        (recur (rest n) (conj z (first n)))\n      )\n    )\n  )\n)", "user": "58224c53e4b04b46fc4b0f92"}, {"problem": 30, "code": "reduce (fn [r x] (if (= x (last r)) r (conj r x))) []", "user": "581badbde4b04b46fc4b0ed9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "552f6e8ee4b076ab5578f802"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5818908be4b0c0e9c07b83bb"}, {"problem": 30, "code": "(fn [coll] (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] coll))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 30, "code": "(fn [xs]\n  (map first (partition-by identity xs)))", "user": "54ca35c6e4b057c6fda3a254"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "507ff90fe4b089ade05efbd9"}, {"problem": 30, "code": "#(reverse\n  (reduce\n   (fn [r i]\n     (if (= (first r) i)\n       (identity r)\n       (conj r i))) () %))", "user": "5829bc55e4b051871117bf49"}, {"problem": 30, "code": "(fn [coll]\n   (->> (map #(list %1 %2)\n             (drop-last coll)\n             (next coll))\n        (filter (fn [[x y]]\n                  (not (= x y))))\n        (map (fn [[x y]]\n               y))\n        (cons (first coll))))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 30, "code": "(fn\n  [pst]\n  (letfn [(check-lites [mark lst]\n    (cond (= mark (first lst)) (check-lites mark (rest lst))\n          (empty? lst) (cons mark '())\n         :else  (cons mark (check-lites (first lst) (rest lst)))\n          ))]\n    (check-lites (first (apply list pst)) (rest (apply list pst)))))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "582290b5e4b04b46fc4b0fa0"}, {"problem": 30, "code": "(partial reduce #(if (= (peek %) %2) % (conj % %2)) [])", "user": "582e0afde4b051871117bfd5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58299e03e4b051871117bf46"}, {"problem": 30, "code": ";#(map first (partition-by identity %))\n\n(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "582c526ae4b051871117bf88"}, {"problem": 30, "code": "#(loop [l %\n       prev nil\n       current (first %)\n       newL []\n       ]\n  (if (empty? l)\n  newL\n  (recur (rest l) (first l) (second l) \n         (if (= prev current)\n           newL\n           (conj newL (first l))))))", "user": "58248186e4b051871117bec6"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5665ef78e4b0e91d5f5c5664"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5829d588e4b051871117bf4a"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [vec x] (if (= x (last vec)) vec (conj vec x)) ) [] s))", "user": "4fec0824e4b0681fd128dc9c"}, {"problem": 30, "code": "(fn [coll]\n  (loop [x coll\n         res []]\n    (if (empty? x)\n      res\n      (recur (next x) (if (= (first x) (second x))\n                        res\n                        (conj res (first x)))))))", "user": "58303fc3e4b051871117c006"}, {"problem": 30, "code": "(fn [xs]\n  (loop [tail xs compressed []]\n    (if (empty? tail)\n      (seq compressed)\n      ;; Compare the last item in the compressed list with the first\n      ;; in the original list. If compressed is empty, the match fails\n      ;; and the first item is added to the list for the next comparison\n      (if (= (last compressed) (first tail))\n        (recur (rest tail) compressed)\n\t\t(recur (rest tail) (conj compressed (first tail)))))))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 30, "code": "(fn test7 [c]\n  (reverse(reduce #(if (= (first %1) %2)\n               %1 \n               (conj %1 %2))\n            '()\n            c)))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 30, "code": "(fn r [x]\n  (reduce #( if (= (peek %1) %2) %1 (conj %1 %2)) [] x))", "user": "5779556de4b0979f8965166e"}, {"problem": 30, "code": "#(if (coll? %)\n(map first (partition-by identity %))\n(apply str (map first (partition-by identity %))\n))", "user": "5810b899e4b0f478707a05d8"}, {"problem": 30, "code": "(fn dedup\n  [x]\n  (when (seq x)\n    (cons (first x) (dedup (drop-while #(= (first x) %) (rest x))))))", "user": "583166c1e4b051871117c025"}, {"problem": 30, "code": "(fn uq ([x] (\n   reduce\n   #(if (= (last %1) %2)\n     %1\n      (concat %1 [%2])) [] x\n            \n)))", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 30, "code": "(fn [x] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() x)))", "user": "583019b8e4b051871117bfff"}, {"problem": 30, "code": "(fn no-repeats [s]\n  (loop [s s\n        acc []]\n  (if (empty? s)\n    acc\n    (let [same? (= (last acc) (first s))]\n    (recur (rest s) (if same? acc (conj acc (first s))))))))", "user": "582a5174e4b051871117bf59"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57089f82e4b0b0fb43fd06a2"}, {"problem": 30, "code": "(fn F [xs]\n (if\n   (empty? xs)\n   nil\n   (let [xh (first xs)]\n     (conj \n      (F (drop-while #(= xh %) xs)) \n      xh\n      )\n     )\n   )\n)", "user": "58334d18e4b089d5ab817c97"}, {"problem": 30, "code": "(fn [s]\n  (let [res (reduce (fn[acc n] (if (not= n (last acc)) (conj acc n) acc)) [(first s)] s )]\n    (if (string? s) (apply str res) res)))", "user": "582dc562e4b051871117bfcb"}, {"problem": 30, "code": "(fn wtf [s]\n  (loop [in s ret [] l nil]\n    (if (empty? in) ret (recur (rest in) (if (= (first in) l) ret (conj ret (first in))) (first in)))\n  )\n)", "user": "54aa373de4b09f271ff37cb6"}, {"problem": 30, "code": "(fn [x] (->> x seq (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [])))", "user": "5835a222e4b089d5ab817ce5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58375635e4b089d5ab817d14"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "58376b71e4b089d5ab817d18"}, {"problem": 30, "code": "(fn [x] (->> (reduce \n              #(if (= (first %1) %2) \n                 %1 \n                 (conj %1 %2)) '() x)\n             reverse))", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5838337de4b089d5ab817d24"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58384bc4e4b089d5ab817d27"}, {"problem": 30, "code": "(fn rem-dup [sq]\n  (loop [in sq out []]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (if (= (first in) (last out))\n               out\n               (conj out (first in))\n               )\n             )\n      )\n    )\n  )", "user": "580f9585e4b0f478707a05b5"}, {"problem": 30, "code": "(fn [x] (reduce #(conj %1 (first %2)) [] (partition-by identity x)))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 30, "code": "#(reduce (fn [result next-char]\n             (if (= next-char (last result))\n                 result\n                 (conj result next-char)))\n         []\n         %)", "user": "56491050e4b0284900eef639"}, {"problem": 30, "code": "(fn [x]\n  (loop [x x z []]\n    (if (empty? x) z\n      (if (= (first x) (last z)) (recur (rest x) z)\n        (recur (rest x) (conj z (first x)))))))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "581fe550e4b04b46fc4b0f4c"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "583a360de4b089d5ab817d4f"}, {"problem": 30, "code": "(fn [coll]\n  (reduce \n   #(if (= (last %1) %2) %1 (conj %1 %2))\n  \t[(first coll)]\n    (rest coll)\n  )\n)", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 30, "code": "(fn [x] \n  (reduce\n   (fn [ac c]\n     (if (= (last ac) c)\n       ac\n       (conj ac c)\n     )\n   )\n   []\n   x)\n)", "user": "57dfe173e4b0bd073c20246b"}, {"problem": 30, "code": "(fn compress [x]\n  (loop [x x\n         res []]\n    (cond\n     (empty? x) res\n     (= (first x) (second x)) (recur (rest x) res)\n     :else (recur (rest x) (conj res (first x))))))", "user": "55a12cb1e4b0acc240e3150d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5822ccd0e4b04b46fc4b0fa7"}, {"problem": 30, "code": "(fn compress\n  [n]\n  (reverse (loop [s (rest (seq n)) l (first n) r (vector (first n))]\n             (if (empty? s)\n               r\n               (if (= (first s) l)\n                 (recur (rest s) l r)\n                 (recur (rest s) (first s) (cons (first s) r)))))))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 30, "code": "(fn comp-str\n  ([s]\n   (comp-str (rest s) (first s) [(first s)]))\n  ([s c acc]\n   (cond\n     (empty? s) acc\n     (= c (first s)) (comp-str (rest s) c acc)\n     (not= c (first s)) (comp-str (rest s) (first s) (conj acc (first s))))))\n\n;#(map first (partition-by identity %))", "user": "582cbf48e4b051871117bfa6"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "580d1da7e4b0849f6811b72f"}, {"problem": 30, "code": "(fn rm [coll]\n  (when-let [[f & r] (seq coll)]\n    (if (= f (first r))\n      (rm r)\n      (cons f (rm r)))))", "user": "581a8cc3e4b0e114eb51a00b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "583f2e4de4b089d5ab817dcb"}, {"problem": 30, "code": "#(loop [input % n (count input) result '()]\n      (if (= n 0)\n          result\n          (recur (drop 1 input) (dec n) (if (= (last result) (first input)) result (concat result [(first input)])))\n      )\n    )", "user": "583c8bd4e4b089d5ab817d81"}, {"problem": 30, "code": "(fn p [s] (if (not-empty s) \n            (let [f (take 1 s)\n                  r (rest s)\n                  n (take 1 r)]\n              (concat (if (not= f n) f ) (p r)))))", "user": "57ffacd9e4b0a837a8b30c26"}, {"problem": 30, "code": "(fn g [ll]\n  (reverse \n    (reduce \n      \n      (fn f [li x]\n       \n        (if \n          (= x (first li))\n          li\n         (cons x li)))\n      []\n      ll)))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 30, "code": "#(map last (partition-by str %))", "user": "58391c94e4b089d5ab817d35"}, {"problem": 30, "code": "(fn bob [x] \n  (reduce (fn [acc el]\n            (if (= el (last acc))\n              acc\n              (conj acc el)))\n    [] x))", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 30, "code": "(fn [value] (loop [i value res []] (\n                                    if (empty? i)\n                                    res\n                                    (if (= (first i) (last res))\n                                    (recur (rest i) res)\n                                    (recur (rest i) (conj res (first i)))))))", "user": "54bca097e4b0ed20f4ff6ed4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "582d7569e4b051871117bfbe"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 30, "code": "(fn\n  [seq]\n  (first\n   (reduce \n    (fn [[final-seq prev-elem] elem]\n      (if (= prev-elem elem)\n        [final-seq elem]\n        [(conj final-seq elem) elem]))\n    [[] nil]\n    seq)))", "user": "5844e6f4e4b089d5ab817e5a"}, {"problem": 30, "code": "(fn my-compress\n  [a]\n  (loop [result []\n         [next-item & rest-items] a\n         last-item nil]\n      (let [new-result \n              (if-not (= next-item last-item)\n                (conj result next-item)\n                result)]\n        (if-not (empty? rest-items)\n          (recur new-result rest-items next-item)\n          new-result))))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 30, "code": "(fn [arg] (loop [toret '() cust arg  prev \"\"] \n               (if (= (count cust) 0) (reverse toret)                                                     \n                       (recur (if \n                                (not= prev (first cust))\n                                (conj toret (first cust)) toret) \n                              (rest cust) (first cust) ))))", "user": "5804b491e4b0a837a8b30cac"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "5842d06be4b089d5ab817e22"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 30, "code": "#(reverse (reduce (fn [coll val]\n                      (if (empty? coll)\n                        [val]\n                        (if (= (first coll) val)\n                          coll\n                          (cons val coll)))) [] %))", "user": "584917a1e4b089d5ab817ec9"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 30, "code": "(fn my-compress [in] \n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] in))", "user": "5845720de4b089d5ab817e68"}, {"problem": 30, "code": "(fn [c] (reduce #(if (= %2 (last %1))\n                     %1\n                     (conj %1 %2)) [] c))", "user": "579aff09e4b05b1deef9ade7"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 30, "code": "#(map first\n      (partition-by identity %))", "user": "5593ff3de4b0c79f6e1db949"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 30, "code": "#(loop [r (apply seq %&) x []]\n   (if (empty? r)\n     x\n     (recur \n      (rest r)\n      (if (= (first r) (last x))\n        x\n        (conj x (first r))\n        )\n      )\n     )\n   )", "user": "583f23dce4b089d5ab817dc9"}, {"problem": 30, "code": "(fn\n  [dupes]\n  (loop [curr-seq dupes deduped-seq '()]\n    (if (= 0 (count curr-seq))\n      (reverse (apply concat deduped-seq))\n      (let [head (take 1 curr-seq)\n            rest (drop 1 curr-seq)]\n        (if (= head (apply concat (take 1 deduped-seq)))\n          (recur rest deduped-seq)\n          (recur rest (conj deduped-seq head)))))))", "user": "55a5e2f7e4b0acc240e31550"}, {"problem": 30, "code": "(letfn [(build [x y] (cond (or (empty? x) (empty? (rest x))) (concat x y) (= (first x) (second x)) (recur (rest x) y) true (recur (rest x) (cons (first x) y))))] #(reverse (build % [])))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 30, "code": "(fn compress [s]\n  (if (nil? (seq s))\n    nil\n    \n    (let [c (first s)]\n      (cons c (compress (drop-while #(= % c) s))))))", "user": "53bd476ae4b0d9a98559a6ca"}, {"problem": 30, "code": "(fn [s] \n  (let [ct (count s)\n        fst (first s)]\n    (loop [i 1 prev fst r [fst]]\n      (let [cur (get s i)\n            result (if (and cur (not= cur prev))\n                     (concat r [cur])\n                     r)]\n        (if cur (recur (+ i 1) cur result) result)))))", "user": "5526ecc4e4b0ffed3738f928"}, {"problem": 30, "code": "reduce (fn [a b] (if (= b (last a)) a (conj a b))) []", "user": "583e1558e4b089d5ab817da9"}, {"problem": 30, "code": "(fn [input]\n\t((comp\n\t\t#(first %)\n\t\t#(reduce \n\t\t\t(fn [[result last-c] c] \n\t\t\t\t(if (= last-c c)\n\t\t  \t\t\t[result c]\n\t\t  \t\t\t[(concat result (list c) ) c]))\n\t\t\t'()\n\t\t\t(seq %)))\n\tinput))", "user": "583c4482e4b089d5ab817d7e"}, {"problem": 30, "code": "(fn remove-duplicates\n  ([arr] (remove-duplicates (first arr) (rest arr)))\n  ([head tail]\n   (loop [hd head tl tail acc [hd]]\n     (if (empty? tl)\n       acc\n       (if (= hd (first tl))\n         (recur hd (rest tl) acc)\n         (recur (first tl) (rest tl) (conj acc (first tl))))))))", "user": "58408643e4b089d5ab817deb"}, {"problem": 30, "code": "(fn [x] (mapcat distinct(partition-by identity x)))", "user": "585030cbe4b0b7285a6f4e78"}, {"problem": 30, "code": "(fn compress\n  [seqn]\n  (map first (partition-by identity seqn)))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "584b6a2be4b089d5ab817efd"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (concat %1 [%2])) '()", "user": "583dacc2e4b089d5ab817d9f"}, {"problem": 30, "code": "#(reverse  (reduce (fn [coll item] (if (= (first coll) item)coll  (conj coll item ))) '() % ))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 30, "code": "#(reduce \n  (fn [acc x] \n    (if (= (first acc) x) \n      acc \n      (conj acc x)))\n  '()\n  (reverse %))", "user": "56e0f485e4b03a7c14b85a1c"}, {"problem": 30, "code": "(fn [theSeq] \n  (reduce  \n    (fn [result value] \n      (if (not= (last result) value)\n        (conj result value)\n        result)\n      ) \n    [] \n    (seq theSeq)))", "user": "57f904c5e4b0d3187e900936"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "57ac6c67e4b0b8559636fc87"}, {"problem": 30, "code": "(fn [s]\n  (reverse (reduce #(if (= %2 (first %1))\n                      %1\n                      (cons %2 %1))\n                   '()\n                 s)))", "user": "57233cc8e4b0c5bde472c0e1"}, {"problem": 30, "code": "(fn [x] (reduce #(if (not= (last %) %2) (conj % %2) %) [] x) )", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 30, "code": "(fn [seq]\n  (loop [result (take 1 seq) i 1]\n    (if (= i (count seq))\n      (reverse result)\n      (recur (if (= (nth seq i) (nth seq (- i 1)))\n               result\n               (conj result (nth seq i)))\n             (inc i)))))\n\n;#(map first (partition-by identity %))", "user": "583ff3afe4b089d5ab817dda"}, {"problem": 30, "code": "(fn [coll] \n  (reduce (fn [accum elem]\n            (if (= (last accum) elem)\n              accum\n              (conj accum elem)\n            )\n          )\n          [] coll\n  )\n)", "user": "5838d5ede4b089d5ab817d32"}, {"problem": 30, "code": "(fn [in-seq]\n  (let [compress-reducer (fn [accum elem]\n                           (if (= elem (:last-seen accum))\n                             accum\n                             (assoc accum\n                                    :last-seen elem\n                                    :result (cons elem (:result accum)))))]\n    (reverse (:result (reduce compress-reducer {:last-seen nil :result nil} in-seq)))))", "user": "5027f37be4b01614d1633ff1"}, {"problem": 30, "code": "(fn [col] \n  (let [[a & remain :as col] col] \n    (filter #(not (nil? %)) \n      (concat (list a) \n              (for [x (range (- (count col) 1))] \n                (if (not= (nth col x) (nth remain x)) \n                  (nth remain x) \n                  nil\n                 )\n               )\n       )\n    )\n  )\n)", "user": "5766fbb7e4b0a07e8fc180b6"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x) ) )", "user": "50b25edae4b03ea88043355e"}, {"problem": 30, "code": "(fn  [x] \n      (loop [y (drop-last x) q (cons (last x) '())]\n          (cond\n             (empty? y) q\n             (not (= (first q) (last y))) \n             (recur (drop-last y) (cons (last y) q))\n              true (recur (drop-last y) q)\n              )))", "user": "5695b86de4b0dcc4269f412b"}, {"problem": 30, "code": "(fn\n  [col]\n  \n  \n  (reverse (reduce\n   (fn [a v]\n     (if (= (first a) v)\n       a\n       (cons v a)))\n   (sequence '())\n   (seq col)))\n  )", "user": "56e87a9ce4b04a395b9a03f0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56f9b953e4b07572ad1a88b9"}, {"problem": 30, "code": "(fn [coll]\n  (reduce\n   (fn [a b]\n     (if (not= (last a) b)\n       (conj a b)\n       a)) [] coll)\n  )", "user": "58562083e4b0f14aab7c86eb"}, {"problem": 30, "code": "(fn compress [s]\n  (reduce (fn [acc x]\n            (if-not (= (last acc) x)\n              (conj acc x)\n              acc))\n          []\n          s))", "user": "58543a59e4b07779d46863f5"}, {"problem": 30, "code": "(fn [seq]\n        (reverse ((fn in-rec [el rest-seq res]\n             (if (nil? el)\n                 res\n                 (if (= el (first rest-seq))\n                     (in-rec (first rest-seq) (rest rest-seq) res)\n                     (in-rec (first rest-seq) (rest rest-seq) (cons el res))))) (first seq) (rest seq) [])))", "user": "58354124e4b089d5ab817cd6"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) \n          %1 (conj %1 %2)) []", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57f9b25fe4b0d3187e90094b"}, {"problem": 30, "code": "(fn [coll]\n  (loop [c coll acc []]\n    (let [i (first c)]\n      (if (empty? c)\n        acc\n        (recur (rest c)\n               (if (= i \n                   (last acc))\n                 acc\n                 (conj acc \n                       i)))))))", "user": "58582dade4b0f14aab7c8713"}, {"problem": 30, "code": "(fn [coll]\n  (loop [coll coll latest -1 new-coll []]\n    (if-not (empty? coll)\n      (if (= (first coll) latest)\n        (recur (rest coll) latest new-coll)\n        (recur (rest coll) (first coll) (conj new-coll (first coll))))\n      new-coll)))", "user": "584278e1e4b089d5ab817e19"}, {"problem": 30, "code": "(fn [arg]\n   (reduce \n     #(if (= (last %1) %2) \n        %1 \n        (conj %1 %2) )\n     []\n     arg))", "user": "58455b05e4b089d5ab817e65"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "585481e0e4b07779d46863fe"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5854d1c0e4b07779d468640a"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "585c5b21e4b0f14aab7c8786"}, {"problem": 30, "code": "#(reduce (fn [res c] \n           (if (= c (last res))\n             res \n             (conj res c))) \n         [] %)", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 30, "code": "(fn [input]\n  (let [lst (seq input)]\n    (loop [lst1 (rest lst)\n           lst2 (list (first lst))]\n      (if (empty? lst1)\n        (reverse lst2)\n        (if (= (first lst1) (first lst2))\n          (recur (rest lst1) lst2)\n          (recur (rest lst1) (conj lst2 (first lst1))))))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "585d2c1fe4b0f14aab7c8797"}, {"problem": 30, "code": "reduce (fn [a b] (if (= b (last a)) a (conj a b))) []", "user": "585bcd51e4b0f14aab7c8771"}, {"problem": 30, "code": "#(map first (partition-by  identity %))", "user": "585d40afe4b0f14aab7c8798"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "532df9c5e4b019098a6f8b42"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2)\n           (concat %1 [%2])\n           %1\n           ) ()", "user": "57d0e185e4b0bd073c202360"}, {"problem": 30, "code": "(fn compress-seq [input]\n  (letfn [(take-needed-elements [acc current]\n            (if (= current (last acc))\n              acc\n              (conj acc current))\n            )]\n\n    (reduce take-needed-elements [] input)\n  ))", "user": "57ea4569e4b0bfb2137f5b46"}, {"problem": 30, "code": "(fn [xs]\n  (reverse (reduce (fn [a b] \n                     (if (= (first a) b) \n                       a \n                       (conj a b))) \n                   '() \n                   xs)))", "user": "55507a1ae4b00713264bd9a7"}, {"problem": 30, "code": "(fn [x]\n(reverse (reduce #(if (= (first %1) %2) %1 (cons %2 %1)) [] x))\n)", "user": "57c33eeae4b05aa3c4741cbc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5853582fe4b0b7285a6f4ec5"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "582a2d4fe4b051871117bf55"}, {"problem": 30, "code": "(fn compressSeq [[x & xs]] (if x (if (= x (first xs)) (compressSeq xs) (cons x (compressSeq xs)))))", "user": "585e7c60e4b0f14aab7c87b3"}, {"problem": 30, "code": "(fn [sequence]\n  (letfn [(inner [result pre rest1]\n            (if (not (empty? rest1))\n              (if (= pre (first rest1))\n                (inner result pre (rest rest1))\n                (inner (conj result (first rest1))\n                       (first rest1)\n                       (rest rest1)))\n            (reverse result)))]\n    (if (string? sequence)\n      (apply str (inner '() nil (seq sequence)))\n      (inner '() nil sequence))))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 30, "code": "#(reduce (fn [out x]\n           (if (= (last out) x)\n             out\n             (concat out [x])))\n         '()\n         %)", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 30, "code": "(fn ap-dedupe\n  [a-seq]\n  (reduce (fn [res el]\n            (if (= el (last res))\n              res\n              (concat res (list el)))) '() a-seq))", "user": "580d2788e4b0849f6811b730"}, {"problem": 30, "code": "(fn compress [sq]\n  (let\n    [ret (for [i (range (dec (count sq))) :when (not (= (nth sq i) (nth sq (inc i))))]\n        (nth sq i)\n      )]\n    (concat ret [(last sq)])\n  )\n)", "user": "569e3175e4b0542e1f8d1484"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "51456858e4b0e88796073408"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "58522b00e4b0b7285a6f4eac"}, {"problem": 30, "code": "(fn [result input] (if (empty? input) result (if (= (last result) (first input)) (recur result (rest input)) (recur (conj result (first input)) (rest input))))) []", "user": "55357ab5e4b09218d5f44faf"}, {"problem": 30, "code": "(fn compress-sequence\n  [coll]\n  (let [c-fn (fn [v] (->> (map #(do [%1 %2]) (pop v) (rest v))\n                          (filter (fn [[a b]] (not= a b)))\n                          (mapv first)\n                          ((fn [x coll] (conj coll x)) (peek v))))]\n    (if (string? coll)\n      (->> (vec coll)\n           c-fn\n           (apply str))\n      (c-fn coll))))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 30, "code": "#(map last (partition-by identity %))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 30, "code": "#(reduce conj [] (mapcat distinct (partition-by identity %1)))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58617a1fe4b0f14aab7c87f0"}, {"problem": 30, "code": "(fn [col]\n  (reverse(reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() col)\n  )\n)", "user": "58670d13e4b0f14aab7c8871"}, {"problem": 30, "code": "#(reduce (fn [final remaining]\n              (if (= (last final) remaining) (into final []) (into final [remaining]) )) [] %)", "user": "586aa811e4b0f14aab7c88c4"}, {"problem": 30, "code": "(fn compr [coll]\n  (if (empty? coll)\n    '()\n    (if (not= (first coll) (first (rest coll)))\n      (cons (first coll) (compr (rest coll)))\n      (compr (rest coll))\n    )\n  )\n)", "user": "5869a49fe4b0f14aab7c88a9"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5863eda2e4b0f14aab7c8836"}, {"problem": 30, "code": "(fn [s]\n    (let [result (reduce (fn [x y]\n              (if (not (= (last x) y))\n                (concat x [y])\n                x))\n                         [(first s)] (rest s))]\n      (if (= (type s) java.lang.String)\n        (apply str result)\n        result)))", "user": "586b6753e4b01531a375e956"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "586b6f13e4b01531a375e959"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "586a663ce4b0f14aab7c88be"}, {"problem": 30, "code": "(fn [coll]\n  (letfn\n    [(pairs [coll2] (take-while (fn [pair] (not (every? nil? pair))) (partition 2 1 coll2)))]\n    (cons (first (first (pairs coll)))\n          (map second (filter (fn [[char1, char2]] (not (= char1 char2))) (pairs coll)))\n          )))", "user": "586bc870e4b01531a375e964"}, {"problem": 30, "code": "(let [s #(if (string? %) (apply str %) %)] #(->> % (partition-by identity) (map first) s))", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 30, "code": "(fn duper [s] (map first (partition-by identity s)))", "user": "50a3bf08e4b0ceace084d495"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54012b48e4b0de5c41848620"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "586d4d63e4b01531a375e98e"}, {"problem": 30, "code": "(fn [s] (reduce (fn [c v] (if \n                            (= (last c) v)\n                            c\n                            (conj c v)\n                            )) [] s))", "user": "586c6462e4b01531a375e97b"}, {"problem": 30, "code": "(fn [coll] (reduce (fn [a b]\n                      (if (= (last a) b) a (conj a b))) [] coll))", "user": "5840c068e4b089d5ab817df8"}, {"problem": 30, "code": "(fn sup [s]\n  (if (empty? s)\n    nil\n    (if (= (first s) (second s))\n      (sup (rest s))\n      (cons (first s) (sup (rest s))))))", "user": "586c5a34e4b01531a375e97a"}, {"problem": 30, "code": "#(filter (complement nil?)\n   ((fn compress [l & [v]]\n    (let [v (or v nil)\n        cv (first l)\n        size (count l)\n        ccv (if (= cv v) nil cv)]\n     (if (= size 0) cv\n     (conj (compress (rest l) cv) ccv )))) %))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 30, "code": "#(reduce (fn [prev current]\n            (println prev current)\n            (if-not (= (last prev) current)\n              (conj prev current)\n              prev))\n          []\n          %)", "user": "52658b67e4b03e8d9a4a710d"}, {"problem": 30, "code": "(fn [xs]\n  (reduce #(if (= (peek %1) %2)\n             %1\n             (conj %1 %2))\n          [] xs))", "user": "4e7be091535db169f9c796ba"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "586f1aa7e4b01531a375e9ba"}, {"problem": 30, "code": "#(reduce\n  (fn [res curr]\n    (if (= (last res) curr)\n              res\n              (conj res curr)))\n []\n %)", "user": "56403765e4b08d4f616f5edc"}, {"problem": 30, "code": "(fn [c] \n  (reduce \n    #(if (= (last %1) %2)\n      %1 \n      (conj %1 %2)) \n    [] \n    c\n   )\n)", "user": "586b6d51e4b01531a375e958"}, {"problem": 30, "code": "(fn compress-a-sequence\n  [a-sequence]\n  (loop [cur (first a-sequence)\n         remain (rest a-sequence)\n         result [cur]]\n    (if (empty? remain)\n      (seq result)\n      (cond\n        (= cur (first remain)) (recur cur (rest remain) result)\n        :default (recur (first remain) (rest remain) (conj result (first remain)))))))", "user": "57d174ede4b0bd073c20236c"}, {"problem": 30, "code": "(fn d [xs](when (seq xs)(lazy-seq (cons (first xs)  (d (drop-while #(= (first xs) %) (rest xs)))))))", "user": "55597b84e4b0deb715856e36"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 30, "code": "(fn f [s]\n         (cond\n           (or (empty? s) (empty? (rest s))) s\n           (= (first s) (first (rest s))) (f (rest s))\n           :else (cons (first s) (f (rest s)))))", "user": "58731176e4b01531a375ea2a"}, {"problem": 30, "code": "(fn f ([s] (if (empty? s) s (cons (first s) (f (rest s) (first s)))))\n      ([s fs] (lazy-seq (if (= fs (first s)) (f (rest s) fs) (f s)))))", "user": "54d95ce8e4b024c67c0cf74a"}, {"problem": 30, "code": "(fn compf [l] (->> l (partition 2 1) (remove (fn [[x y]] (= x y))) ((fn [sp] (concat (map #(first %) sp) (list (last (last sp))))))))", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5872935ce4b01531a375ea1d"}, {"problem": 30, "code": "(fn [xs]\n  (let [iteration (fn iteration [acc ys]\n                    (if (empty? ys)\n                      (reverse acc)\n                      (if (= (first ys) (first acc))\n                        (recur acc (rest ys))\n                        (recur (cons (first ys) acc) (rest ys)))))]\n    (iteration '() xs)))", "user": "587100d6e4b01531a375e9f0"}, {"problem": 30, "code": "(fn [s] (concat (map first (partition-by #(identity %) s))))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "586b1482e4b0f14aab7c88cf"}, {"problem": 30, "code": "(fn [x] (map first (partition-by #(identity %) x)))", "user": "56049986e4b0c80df0ca2662"}, {"problem": 30, "code": "#(reduce (fn [accum item]\n           (if (= (last accum) item)\n             accum\n             (conj accum item)))\n         []\n         %)", "user": "58740c18e4b01531a375ea49"}, {"problem": 30, "code": "#(reduce\n  (fn [x y]\n    (if (= (last x) y)\n      x\n      (conj x y)))\n  [] (seq %))", "user": "5727031ee4b0c5bde472c12f"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "58467633e4b089d5ab817e90"}, {"problem": 30, "code": "(fn [c] \n   (apply list (reduce \n     (fn [coll elem] \n       (if (= (last coll) elem)\n         coll\n         (conj coll elem)))\n     '[]\n     c)))", "user": "55729a78e4b09a3098a52547"}, {"problem": 30, "code": "(fn [seqArg]\n  (reduce #(->(if (= (last %1) %2) %1 (conj %1 %2)))\n  [] seqArg)\n)", "user": "58669dd0e4b0f14aab7c8867"}, {"problem": 30, "code": "(fn [x] (map #(first %) (partition-by identity x)))", "user": "534fa1a8e4b084c2834f4ace"}, {"problem": 30, "code": "(fn [x]\n  (loop [coll (seq x)\n         acc []]\n    (if (empty? coll)\n      acc\n      (if (= (first coll) (first (rest coll)))\n        (recur (rest coll) acc)\n        (recur (rest coll) (conj acc (first coll)))     \n      )\n    )\n  )\n)", "user": "5877e40ee4b01531a375eaab"}, {"problem": 30, "code": "(fn [x]\n (reduce\n  (fn [r i]\n    (if (not= (last r) i)\n      (conj r i)\n      r))\n  [] x)\n)", "user": "5873dd1ce4b01531a375ea42"}, {"problem": 30, "code": "(fn compress-seq [s]\n  (->> (partition-by identity s)\n       (map first)))", "user": "5879d577e4b01531a375ead8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 30, "code": "(fn [a] (reverse (reduce #(if (= %2 (first %1)) %1 (cons %2 %1)) '() a)))", "user": "560d24a2e4b05f002753df34"}, {"problem": 30, "code": "(fn [s]\n  (seq (reduce (fn [acc v]\n             (if (= v (last acc))\n               acc\n               (conj acc v))) [] s)))", "user": "5865c8f0e4b0f14aab7c884e"}, {"problem": 30, "code": "(fn compress [a-seq]\n  (let [compress-helper (fn [t-seq]\n                          (let [[x y] (split-with #(= (first t-seq) %) t-seq)]\n                            (cons (first x) y)))\n        temp (compress-helper a-seq)]\n    (if (empty? a-seq) '() (cons (first temp) (compress (rest temp))))))", "user": "5877a553e4b01531a375eaa5"}, {"problem": 30, "code": "(fn compress [seq]\n   (reduce (fn [a b]\n             (if (= (last a) b)\n               a\n               (concat a (list b)))\n             )\n           '()\n           seq))", "user": "58775496e4b01531a375ea9a"}, {"problem": 30, "code": "#(reverse (first (reduce (fn [acc elt] (let [[elts last-elt] acc] [(if (= elt last-elt) elts (conj elts elt)) elt])) [nil nil] %)))", "user": "587e43d2e4b052da650a633f"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "50385746e4b0803468ea2c6d"}, {"problem": 30, "code": "(fn [s] \n  (reduce #(if (= (last %1) %2) \n             %1 \n             (concat %1 (list %2))) \n          (list (first s)) \n          (rest s)))", "user": "587e9031e4b052da650a6347"}, {"problem": 30, "code": "#(reduce (fn [l n] \n           (if (= (last l) n)\n             l\n             (conj l n))) [] %)", "user": "5871175de4b01531a375e9f7"}, {"problem": 30, "code": "#(conj (vec (for [x (partition 2 1 %) :let [[a b] x] :when (not= a b)] a)) (last %))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 30, "code": "(fn [x]\n  (reduce #(if (= (last %1) %2) %1 (concat %1 [%2])) [] (seq x)))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 30, "code": "(fn f [x]\n  (if (seq x)\n    (let [[fst & rst] x]\n      (if (= fst (first rst))\n        (f rst)\n        (conj (f rst) fst)))\n    '()))", "user": "53b42472e4b047364c0444b2"}, {"problem": 30, "code": "(fn my-compress [xs]\n  (let [inner (fn inner [[x & xs] last-x]\n                (let [add-x (if (= x last-x) nil x)]\n                  (if (empty? xs)\n                    (list add-x)\n                    (if (= add-x nil)\n                      (inner xs last-x)\n                      (conj (inner xs add-x) add-x)))))]\n    (inner (seq xs) nil)))", "user": "579c73fee4b05b1deef9ae08"}, {"problem": 30, "code": "#(reduce (fn [acc x] (if (not= x (last acc)) (conj acc x) acc)) [] %)", "user": "587ef226e4b052da650a6354"}, {"problem": 30, "code": "(fn dedup [coll]\n  (when-let [s (seq coll)]\n      (if (= (first s) (second s))\n        (dedup (rest s))\n        (cons (first s) (dedup (rest s))))))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 30, "code": "#(reverse (reduce (fn [a b] (if (= b (first  a)) a (cons b a)))'() %))", "user": "5881335ce4b0f1effa3b762e"}, {"problem": 30, "code": "#(reverse (loop [remaining-seq %\n                  result '()]\n             (if (empty? remaining-seq)\n               result\n               (let [[head & tail] remaining-seq]\n                 (recur tail\n                        (if (= head (first result))\n                          result\n                          (cons head result)))))))", "user": "587ee260e4b052da650a6353"}, {"problem": 30, "code": "#(reduce\n  (fn [a e]\n    (if (= e (last a))\n      a\n      (conj a e)))\n    []\n    %)", "user": "58836dbee4b0f1effa3b7679"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4dbd7107535d020aff1edf42"}, {"problem": 30, "code": "(fn [l]\n  (reduce (fn [ret curr]\n            (if (= (last ret) curr)\n              ret\n              (conj ret curr)))\n          []\n          (seq l)))", "user": "5883584ae4b0f1effa3b7674"}, {"problem": 30, "code": "(fn [x]\n  (loop [p (first x) x (rest x) r '[]]\n    (if (not (first x)) (conj r p)\n    (if (= p (first x))\n      (recur p (rest x) r)\n      (recur (first x) (rest x) (conj r p))))))", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 30, "code": "#(reduce (fn [a x] (if (= (last a) x) a (conj a x))) [] %)", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58852909e4b0f1effa3b76af"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5882e8b1e4b0f1effa3b7666"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5882ac4ee4b0f1effa3b7661"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "586f4900e4b01531a375e9c6"}, {"problem": 30, "code": "(fn [lst]\n  (rest (reverse \n  (loop [currlst (seq lst)\n         newlist '()\n         prev nil]\n    (cond (empty? currlst)\n            (into newlist (vector prev))\n          (= (first currlst) prev)\n            (recur (rest currlst)\n                   newlist\n                   (first currlst))\n          :else\n            (recur (rest currlst)\n                   (into newlist (vector prev))\n                   (first currlst)))))))", "user": "587f8393e4b0f1effa3b75f2"}, {"problem": 30, "code": "(fn removeConsDup [input]\n  (cond\n   (empty? input) ()\n   (= (first input) (second input)) (removeConsDup (rest input))\n   :else (concat (list (first input)) (removeConsDup (rest input)))))", "user": "5887518ae4b0f1effa3b76f5"}, {"problem": 30, "code": "#((fn cmpr [s o] (if (empty? s) o (cmpr (rest s) (concat o (if (= (last o) (first s)) () (list (first s))))))) % ())", "user": "587c59d1e4b01531a375eb17"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5875daaee4b01531a375ea74"}, {"problem": 30, "code": "#(loop [inlst % outlst '()]\n   (if (empty? inlst)\n     (reverse outlst)\n     (recur (rest inlst) (if-not (= (first inlst) (first outlst)) (conj outlst (first inlst)) outlst))\n     )\n  \n  )", "user": "5885e90de4b0f1effa3b76c5"}, {"problem": 30, "code": "(fn [coll] (map first (filter #(not= (first %) (second %)) (partition-all 2 1 coll))))", "user": "578d459ee4b0ebec4cfb7567"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "5876c0c5e4b01531a375ea8e"}, {"problem": 30, "code": "(fn rmv-consec-dups\n  ([s] (rmv-consec-dups s '()))\n  ([s result]\n   (cond\n    (= s nil) (reverse result)\n    (= (first s) (second s)) (recur (next s) result)\n    :else (recur (next s) (conj result (first s))) )))", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 30, "code": "(fn compact [xs]\n  (->>  xs\n        (reduce\n          (fn [[first & rest :as r] x]\n            (if (= first x)\n              r\n              (conj r x)))\n          '())\n        reverse))", "user": "580b216fe4b0a837a8b30d45"}, {"problem": 30, "code": "(fn dedup [list]\n  (reduce (fn [m e]\n            (if (= (last m) e)\n              m\n              (conj m e))) [] list))", "user": "5889dc13e4b0f1effa3b774a"}, {"problem": 30, "code": "(fn compress\n  [s]\n  (let [x (first s)\n\txs (rest s)]\n    (remove nil? \n            (cons x (if (not (empty? xs))\n\t      (compress (drop-while #(= x %) xs))))))\n)", "user": "58840023e4b0f1effa3b768b"}, {"problem": 30, "code": "(fn [seq] (reduce (fn [acc item] (if (= item (last acc)) acc (conj acc item) )) [] seq) )", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 30, "code": "(fn [i]\n  (loop [input i\n        nx []]\n    (if (empty? input)\n      nx\n      (if (= (first input) (last nx))\n        (recur (rest input) nx)\n        (recur (rest input) (conj nx (first input)))\n      )\n    )\n  )\n)", "user": "57d031d6e4b0bd073c202354"}, {"problem": 30, "code": "(fn dedup [s] (if (<= (count s) 1) s (let [head (first s)] (let [tail (rest s)] (if (= head (first tail)) (dedup tail) (cons head (dedup tail)))))))", "user": "5888f271e4b0f1effa3b7726"}, {"problem": 30, "code": "(fn uniq \n  [coll]\n    (when-let [coll* (seq coll)]\n      (let [f (first coll*)\n            part (uniq (rest coll*))]\n        (if (= f (first part))\n          \tpart\n          \t(cons f part)))))", "user": "58896e5ce4b0f1effa3b773e"}, {"problem": 30, "code": "(fn [s]\n  (let [f (fn [coll x] \n            (if (= (last coll) x) \n                coll \n                (conj coll x)))]\n  \t(reduce f [] s)))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 30, "code": "(fn [coll] (remove nil? (conj (vec (map #(when (not= %1 %2) %1 ) coll (drop 1 coll))) (last coll))))", "user": "51771cb1e4b085adf681d895"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "587bead1e4b01531a375eb0d"}, {"problem": 30, "code": "(fn [lst]\n  (loop [l1 '[] l2 (vec lst)]\n    (if (empty? l2)\n      l1\n      (if (= (last l1) (first l2))\n        (recur l1 (rest l2))\n        (recur (conj l1 (first l2)) (rest l2))))))", "user": "588e6a17e4b00487982d518c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "576e607ae4b0979f89651579"}, {"problem": 30, "code": "(fn [x] (reduce #(if (not (= (last %1) %2)) (conj %1 %2) %1) [] x))", "user": "5880d686e4b0f1effa3b7623"}, {"problem": 30, "code": "(fn [x]\n  (loop [cx x, nx []]\n    (if (empty? cx)\n      nx\n      (if (not= (first cx) (last nx))\n        (recur (rest cx) (conj nx (first cx)))\n        (recur (rest cx) nx)))))", "user": "588fb3a7e4b00487982d51b9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58806599e4b0f1effa3b7615"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54dbc6ebe4b024c67c0cf773"}, {"problem": 30, "code": "(fn [input] \n  (loop [xs input, result []]\n    (let [x (first xs)\n          remainder (drop-while #(= x %) xs)]\n      (if (empty? xs)\n        result\n        (recur remainder (conj result x))\n        )\n      )\n    )\n  )", "user": "589037b4e4b00487982d51d0"}, {"problem": 30, "code": "reduce (fn [r x] (if (not= (last r) x) (conj r x) r)) []", "user": "5886e8bde4b0f1effa3b76ea"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58868940e4b0f1effa3b76de"}, {"problem": 30, "code": "(fn [src]\n  (loop [d [] s src]\n    (if (empty? s)\n      d\n      (let [[f & the-rest] s\n             l (last d)]\n        (if (= f l)\n          (recur d the-rest)\n          (recur (conj d f) the-rest))))))", "user": "57de9169e4b0bd073c202454"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "58923efce4b00487982d521c"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5885a608e4b0f1effa3b76bc"}, {"problem": 30, "code": "(fn [x] (seq (reduce (fn [a i]\n                   (if (= (last a) i) \n                     a \n                     (conj a i))) [] x)\n   ))", "user": "588f500ae4b00487982d51a4"}, {"problem": 30, "code": "#(->> % (reduce (fn [a b]\n                                     (if (= (:prev a) b)\n                                         a\n                                         {:prev b, :acc (conj (:acc a) b)})) {:prev nil, :acc []})\n            (:acc))", "user": "58949f8de4b00487982d525e"}, {"problem": 30, "code": "(fn remove-duplicates [lst]\n  (if (empty? lst)\n    []\n    (let [[h & t] lst\n          [hs ts] (split-with #(= % h) t)]\n      (cons h\n            (remove-duplicates ts)))))", "user": "5895477fe4b00487982d527c"}, {"problem": 30, "code": "(fn [ys] \n  (loop [xs ys acc []] \n    (if (empty? xs) \n      acc \n      (recur (rest xs) (if (= (last acc) (first xs)) acc (conj acc (first xs)))))))", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 30, "code": "(fn remove-consecutive-duplicates [xs]\n  (if (empty? xs)\n    xs\n    (let [tail (remove-consecutive-duplicates (rest xs))]\n      (if (= (first xs) (second xs))\n        tail\n        (conj tail (first xs))))))", "user": "587cbebbe4b01531a375eb24"}, {"problem": 30, "code": "#(loop [res []\n        inseq (seq %)]\n    (println res)\n    (println inseq)\n   (if (empty? inseq)\n     res\n    (recur (if (= (first inseq) (second inseq))\n                  res\n                  (conj res (first inseq))) \n           (rest inseq))))", "user": "5862a8a9e4b0f14aab7c880f"}, {"problem": 30, "code": "#( map first (partition-by identity %\n                           ))", "user": "58904720e4b00487982d51d1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 30, "code": "#(-> (reduce (fn [acc e] (if (= e (:lst acc)) acc {:lst e :cnt (conj (:cnt acc) e)})) {:lst nil :cnt []} %) :cnt)", "user": "53b05a75e4b047364c044482"}, {"problem": 30, "code": "#(reduce (fn [p n]\n               (if (not= n (last p))\n                 (conj p n)\n                 p))\n             []\n             %)", "user": "522724bde4b04e78ff2e19aa"}, {"problem": 30, "code": "(fn [coll]\n    (loop [prev nil coll coll result []]\n        (if (empty? coll)\n            (seq result)\n            (recur \n                (first coll) \n                (rest coll) \n                (if (= (first coll) prev)\n                    result\n                    (conj result (first coll)))))))", "user": "5896735fe4b00487982d529d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "583e02fce4b089d5ab817da5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "589560d8e4b00487982d5281"}, {"problem": 30, "code": "#(reduce \n  \t(fn [acc, v]\n      (if (= (last acc) v)\n        acc\n        (conj acc v))\n     ) [] %)", "user": "589714cbe4b00487982d52b1"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "5875f2c5e4b01531a375ea77"}, {"problem": 30, "code": "(fn [coll]\n  (reverse\n    (loop [newcoll (list) oldcoll coll]\n    (if (= (count oldcoll) 0)\n      newcoll\n      (recur (if (= (first newcoll) (first oldcoll))\n               newcoll\n               (conj newcoll (first oldcoll)))\n             (rest oldcoll))))))", "user": "56f1b558e4b04a395b9a049a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5891bddce4b00487982d5201"}, {"problem": 30, "code": "(fn [s]\n          (loop [in s out '()]\n            (if (empty? in) \n              (reverse out)\n              (recur (rest in) (if (not= (first in) (first out)) (conj out (first in)) out)))))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "589a8dace4b00487982d5311"}, {"problem": 30, "code": "(fn removedoubles [col]\n  (mapcat set (#(partition-by identity %1) col)))", "user": "58884cc6e4b0f1effa3b770e"}, {"problem": 30, "code": "(fn\n  [[fi & li] & par]\n  (loop\n   [head fi\n    tail li\n    dgst (vector)]\n   (let\n     [ndgst (if\n             (=\n               (first tail)\n               head)\n             dgst\n             (conj dgst head))]\n     (if\n      (empty? tail)\n      ndgst\n      (recur\n       (first tail)\n       (rest tail)\n       ndgst)))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 30, "code": "(fn \n  [s]\n  (loop [res []\n         stack s]\n    (cond (not (seq stack)) res\n          (= (first stack) (second stack)) (recur res (rest stack))\n          :default (recur (conj res (first stack)) (rest stack)))))", "user": "585a7b05e4b0f14aab7c874d"}, {"problem": 30, "code": "(fn [x]\n  (reduce (fn [coll next-char]\n            (if (= (last coll) next-char)\n              coll\n              (conj coll next-char)))\n          []\n          (seq x)))", "user": "5899c54de4b00487982d52fa"}, {"problem": 30, "code": "#(reduce (fn [acc val]\n           (if-not (= val (first acc))\n             (cons val acc)\n             acc\n             )\n           )\n         '()\n         (reverse %)\n         )", "user": "5896ade8e4b00487982d52a9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52ea7d3ae4b09f7907dd14bf"}, {"problem": 30, "code": "#(loop [r [] c %] (if (empty? c) r (recur (if (= (last r) (first c)) r (conj r (first c))) (next c))))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 30, "code": "reduce (fn [col val]\n                  (if-not (= (last col) val)\n                    (conj col val )\n                    col))\n                []", "user": "557b3f29e4b05c286339e0ac"}, {"problem": 30, "code": "(fn compress [sequ]\n  (if (empty? sequ)\n    '()\n    (let [head (first sequ)\n          tail (rest sequ)]\n      (if (= head (first tail))\n        (compress tail)\n        (cons head (compress tail))))))", "user": "589c6914e4b00487982d535d"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 30, "code": "#((fn l [acc x]\n  (if (= (first x) (second x))\n    (l acc (rest x))\n    (if (empty? (rest x))\n      (reverse (cons (first x) acc))\n    (l (cons (first x) acc) (rest x))))) [] %)", "user": "5897dda4e4b00487982d52c8"}, {"problem": 30, "code": "(fn [iseq] (into '() (reduce (fn [nseq item]\n                        (if (= item (first nseq))\n                          nseq\n                          (conj nseq item)))\n                        '()\n                        iseq)))", "user": "589c2e3fe4b00487982d5357"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "589e704ae4b02bd94d917e5e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "589f4387e4b02bd94d917e7b"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "53ada652e4b047364c04446d"}, {"problem": 30, "code": "#(->> (partition-by identity %) (map last))", "user": "58a01c73e4b02bd94d917e95"}, {"problem": 30, "code": "#(reduce (fn [cur n] (if (not= n (last cur)) (concat cur [n]) cur)) [] %)", "user": "544673c0e4b032a45b8693b0"}, {"problem": 30, "code": ";;(fn compress [c] (reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) [] c))\n#(map first (partition-by identity %))", "user": "58988cbbe4b00487982d52d7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "589dd2cce4b02bd94d917e48"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "589ec900e4b02bd94d917e65"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 30, "code": "(fn compress [s]\n  (loop [prev nil old-list s new-list []]\n    (if (empty? old-list)\n      new-list\n      (if-not (= (first old-list) prev)\n        (recur (first old-list) (rest old-list) (conj new-list (first old-list)))\n        (recur (first old-list) (rest old-list) new-list)))))", "user": "580b79e4e4b0a837a8b30d4a"}, {"problem": 30, "code": "(fn compressSeq [myCol] (let [mySeq (seq myCol), recursor (fn recurs [a b] (if (empty? b) a (if (= (last a) (first b)) (recurs a (rest b)) (recurs (concat a (list (first b))) (rest b)))))] (recursor (list (first mySeq)) (rest mySeq))))", "user": "58950f29e4b00487982d5270"}, {"problem": 30, "code": "(fn [xs]\n    (loop [xs xs\n           acc []]\n      (cond (empty? xs) acc\n            :else\n            (let [same? (= (last acc) (first xs))]\n              (recur (rest xs)\n                     (cond same? acc\n                           :else (conj acc (first xs))))))))", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 30, "code": "(fn my-compress\n  [xs]\n  (if (empty? xs)\n    nil\n    (let [[hd & tl] xs]\n      (cond (empty? tl) (list hd)\n            (= hd (first tl)) (recur tl)\n            :else (conj (my-compress tl) hd)))))", "user": "58a47197e4b01a0c0b2328f9"}, {"problem": 30, "code": "(fn compress [s]\n  (if (= (count s) 1) s\n      (let [[x & s1] s]\n        (if (= x (first s1))\n          (compress s1)\n          (cons x (compress s1))))))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 30, "code": "(fn self [s] \n  (if (not (empty? s))\n    (cons (first s) (self (drop-while #(= % (first s)) s)))\n    s))", "user": "58a5a099e4b01a0c0b232918"}, {"problem": 30, "code": "(fn [my-dupl]\n   (reduce (fn [acc elem]\n             (let [index (.indexOf acc elem)]\n               (if (= -1 index)\n                 (conj acc elem)\n                 (do  (if (not= elem (last acc))\n                        (conj acc elem)\n                        acc))))) [] my-dupl))", "user": "58a413b5e4b02bd94d917f07"}, {"problem": 30, "code": "#(loop [items %1 prev nil acc []]\n   (if (= 0 (count items)) acc\n     (recur (rest items) (first items) (if (= (first items) prev) acc (conj acc (first items))))))", "user": "58a31ecee4b02bd94d917ee7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58a7215de4b01a0c0b23293c"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "58951903e4b00487982d5274"}, {"problem": 30, "code": "(fn remdup\n  ([x y z] (cond (empty? x) z\n                 (= (first x) y) (recur (rest x) y z)\n                 :else (recur (rest x) (first x) (conj z (first x)))))\n  ([x]\n   (remdup x (if (nil? (first x))\n               1\n               nil) [])))", "user": "58a3ba31e4b02bd94d917eff"}, {"problem": 30, "code": "(fn [x] ( #(map first (partition-by identity %)) x))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5893c64ce4b00487982d524b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "589f0087e4b02bd94d917e6d"}, {"problem": 30, "code": "(fn compress-a-sequence [xs]\n  (when-let [[head & tail] (seq xs)]\n    (if (not= head (first tail))\n      (cons head (compress-a-sequence tail))\n(compress-a-sequence tail))))", "user": "58a58c50e4b01a0c0b232914"}, {"problem": 30, "code": "(fn [col]\n  (loop [col col\n         acc '()\n        ]\n    (cond\n     \t(empty? col) acc\n     \t(empty? acc) (recur (rest col) (list (first col)))\n     \t(= (last acc) (first col)) (recur (rest col) acc)\n     \t:else (recur (rest col) (concat acc (list (first col)))))))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 30, "code": "(fn [x]\n  (loop [s x prev nil acc '()]\n    (if \n      (= (count s) 0)\n      (reverse acc)\n    (if (= (first s) prev)\n      (recur (rest s) prev acc)\n      (recur (rest s) (first s) (conj acc (first s)))))))", "user": "58aa19d3e4b01a0c0b23297c"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "507eed82e4b06ce648bcdbfe"}, {"problem": 30, "code": "(fn deduper [input] \n  (loop [in input\n         out []]\n   (if (empty? in)\n    out\n    (recur (drop-while \n             #(= (first in) %) (rest in))\n           (conj out (first in))))))", "user": "56391b7ce4b0bfe05bf117ef"}, {"problem": 30, "code": "(partial reduce  #(if (= (peek %1) %2) %1 (conj %1 %2)) '[])", "user": "5760682ee4b08062f99a4e94"}, {"problem": 30, "code": "(fn compress [[f & r]]\n  (if (empty? r)\n    (list f)\n    (if (= f (first r))\n      (concat (compress r))\n      (concat (list f) (compress r)))))", "user": "58a953dae4b01a0c0b232968"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58ac14ebe4b0005cfeb1a740"}, {"problem": 30, "code": "(fn [x]\n  (loop [[first second & rest] x\n         ret '()]\n    (if (nil? first)\n      (if (string? x)\n        (apply str (reverse ret))\n        (reverse ret))\n      (if (= first second)\n        (recur (cons second rest) ret)\n        (recur (cons second rest) (cons first ret))\n        )\n      )\n    ))", "user": "58a216e8e4b02bd94d917ed1"}, {"problem": 30, "code": "(fn [x]\n   (letfn [(uniq-seq [x new-seq prev]\n             (if-let [f (first x)]\n               (if (= f prev)\n                 (uniq-seq (rest x) new-seq f)\n                 (uniq-seq (rest x) (conj new-seq f) f))\n               new-seq))]\n     (seq (uniq-seq x [] nil))))", "user": "57689c23e4b0a07e8fc180d6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "58ac513fe4b0005cfeb1a746"}, {"problem": 30, "code": "(fn [s]\n        (loop [entries (seq s) prev nil newlist '()]\n            (if (= (count (rest entries)) 0)\n                (if (= prev (first entries)) newlist (concat newlist [(first entries)]))\n\t            ( recur \n                    (rest entries) \n                    (first entries)\n                    (if (= prev (first entries)) newlist (concat newlist [(first entries)]))\n                )\n            )\n        )\n    )", "user": "58a72f71e4b01a0c0b23293f"}, {"problem": 30, "code": "(fn [precisti]\n  (->> precisti\n    (reduce (fn [vrsta elem]\n             (if-not (= (first vrsta) elem)\n               (conj vrsta elem)\n               vrsta)) '())\n    (reverse)\n  ))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 30, "code": "(fn f\n  ([s] (f s []))\n  ([s accum]\n   (if (empty? s)\n     accum\n     (if (= (first s) (last accum))\n       (recur (next s) accum)\n       (recur (next s) (conj accum (first s)))))))", "user": "58b06b7ce4b0ebc645576cdc"}, {"problem": 30, "code": "(fn\n  [seqn]\n  (loop [acc []\n         prev nil\n         _seqn seqn]\n    (if (empty? _seqn)\n      acc\n      (let [x (first _seqn)] \n        (recur (if (= x prev)\n                 acc\n                 (conj acc x))\n         x \n         (rest _seqn))\n        ))))", "user": "5854580ce4b07779d46863f9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58b106f9e4b0ebc645576cf0"}, {"problem": 30, "code": "(fn remove-duplicates\n  [sq]\n  (let [\n        fst (first sq)\n        rst (rest sq)\n        f (fn [[acc prev] elem]\n            (if (= prev elem)\n              [acc elem]\n              [(conj acc elem) elem]))\n        ]\n    (first (reduce f [[fst] fst] sq))))", "user": "588e4e05e4b00487982d5188"}, {"problem": 30, "code": "(fn [l]\n   (loop [[h & t] l\n          acc []\n          prev nil]\n     (let [next (if (= prev h) acc (conj acc h))]\n       (if\n         (empty? t) next\n         (recur t next h)))))", "user": "58791973e4b01531a375eac5"}, {"problem": 30, "code": "(fn compress [xs]\n  (let [[head snd & tail] xs]\n    (when xs\n      (cond\n        (empty? xs) nil\n        (= head snd) (compress (rest xs))\n        :else (cons head (compress (rest xs)))))))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 30, "code": "(fn f [in]\n  (if (= 1 (count in))\n    in\n    (if (= (first in) (second in))\n      (f (rest in))\n      (concat [(first in)] (f (rest in))))))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "58b2f085e4b0ebc645576d15"}, {"problem": 30, "code": "(fn [s] (reduce (fn [ac x] (if (or (not (seq ac)) (not= (nth ac (dec (count ac))) x)) (conj ac x) ac)) [] s))", "user": "589771f9e4b00487982d52bd"}, {"problem": 30, "code": "(fn [x] (reverse (reduce into () (map #(take 1 %) (partition-by identity x)))))", "user": "58a0fd0be4b02bd94d917ea4"}, {"problem": 30, "code": "(fn [lst] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] lst))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58637221e4b0f14aab7c881d"}, {"problem": 30, "code": "(fn [l]\n  (->> (concat l [nil])\n       (partition 2 1)\n       (filter (fn [x] (not= (first x) (second x))))\n       (map #(first %))\n       )\n  )", "user": "51f7dd27e4b06ff1c25c52dc"}, {"problem": 30, "code": "(fn [seqin]\n  (loop [s seqin res []]\n    (if (empty? s)\n      res\n      (if (= (first s) (first (rest s)))\n        (recur (rest s) res)\n        (recur (rest s) (conj res (first s)))))))", "user": "58a72bafe4b01a0c0b23293d"}, {"problem": 30, "code": "(fn [col]\n  (reverse\n   (reduce\n    (fn [acc val] (if-not (= (first acc) val) (conj acc val) acc)) () col)))", "user": "55f1f0d1e4b06e875b46ce3b"}, {"problem": 30, "code": "(fn [x] (apply concat (map #(take 1 %) (partition-by identity x))))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 30, "code": "(fn compress [x]\n  (if (empty? (rest x))\n    (conj (list) (first x))\n    (if (= (first x) (first (compress (rest x))))\n      (compress (rest x))\n      (conj (compress (rest x)) (first x))\n      )\n    )\n\n  )", "user": "57cc14aae4b05aa3c4741d4a"}, {"problem": 30, "code": "(partial reduce (fn [acc v] (if (= (last acc) v) acc (conj acc v))) [])", "user": "4f963487e4b0dcca54ed6cd9"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "58b4898de4b0ebc645576d3d"}, {"problem": 30, "code": "(fn [xs]\n    (loop [xs xs crnt nil ys []]\n      (if (empty? xs)\n        ys\n        (if (= (first xs) crnt)\n          (recur (rest xs) crnt ys)\n          (recur (rest xs) (first xs) (conj ys (first xs)))))))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58b3388ae4b0ebc645576d1e"}, {"problem": 30, "code": "#(\n  reduce\n  (fn [m e]\n    (if (= e (last m))\n      m\n      (conj m e)))\n  []\n  (vec %)\n)", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 30, "code": "(fn [n]\n  (reduce #(if (= (last %1) %2)\n             %1\n             (conj %1 %2)) [] n))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 30, "code": "(fn [s]\n  (conj (->> (map vector s (rest s))\n             (filter #(not= (first %) (second %)))\n             (map second))\n        (first s)))", "user": "58ba8e7ce4b0888cdc949ce8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58bbe58be4b0888cdc949d05"}, {"problem": 30, "code": "#(->> %\n       (partition-by identity)\n       (map first))", "user": "58bc08fee4b0888cdc949d08"}, {"problem": 30, "code": "(fn [tail-coll & head-coll]\n    (let [first-tail (first tail-coll)\n          last-head (last head-coll)]\n      (if (nil? first-tail)\n        head-coll\n        (if (= first-tail last-head)\n          (recur (next tail-coll) head-coll)\n          (recur (next tail-coll) (concat head-coll (list first-tail)))))))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 30, "code": "#(reduce (fn [a b]\n           (if (= (last a) b)\n             a\n             (conj a b)))\n         []\n         (seq %))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 30, "code": "#(reduce (fn [r x] \n          (let [previous (last r)]\n            (if (= previous x) \n              r \n              (conj r x)))) [] %)", "user": "58bc8cbee4b0888cdc949d1b"}, {"problem": 30, "code": "#(reduce\n    (fn [final-coll value]\n      (if (= (last final-coll) value)\n        final-coll\n        (conj final-coll value)))\n    []\n    %1)", "user": "5890799be4b00487982d51d6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58b1f51de4b0ebc645576d05"}, {"problem": 30, "code": "(fn [strn]\n\t(loop [src strn comprd [] prev nil]\n\t\t(if (= 0 (count src))\n\t\t\tcomprd\n\t\t\t(if (= (first src) prev )\n\t\t\t\t(recur (rest src) comprd prev)\n\t\t\t\t(recur (rest src) (conj comprd (first src)) (first src))\n\t\t))))", "user": "58b985e0e4b0888cdc949ccc"}, {"problem": 30, "code": "#(loop [ys nil xs %]\n   (if (= (first xs) nil)\n     (reverse ys)\n     (if (= (first xs) (second xs))\n       (recur ys (rest xs))\n       (recur (cons (first xs) ys) (rest xs)))))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 30, "code": "(fn[x] (mapcat set (partition-by identity x)))", "user": "58c1b4f5e4b021aa9917ed01"}, {"problem": 30, "code": "(fn no-duplicats [coll]\n        (loop [cl coll\n               ret []]\n          (if (= (count cl) 0)\n            ret\n            (recur (rest cl) (if (not= (first cl) (last ret))\n                               (conj ret (first cl))\n                               ret)))))", "user": "58765038e4b01531a375ea7e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58bde497e4b0888cdc949d3c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58bc3202e4b0888cdc949d0b"}, {"problem": 30, "code": "(fn [target]\n  (reduce #(if\n             (= (last %1) %2)\n             %1\n             (conj %1 %2)) [] target))", "user": "58bef424e4b021aa9917eccb"}, {"problem": 30, "code": "(fn\n  [s]\n  (reverse (reduce #(if (= (first %1) %2)\n             %1\n             (conj %1 %2)) '() s)))", "user": "58976bfde4b00487982d52bc"}, {"problem": 30, "code": "(fn remove-repeat \n  ([x] (remove-repeat x []))\n  ([x r] (if (empty? x)\n          r \n          (if (= (last r) (first x))\n           (remove-repeat (rest x) r)\n           (remove-repeat (rest x) (conj r (first x)))))))", "user": "58c3af4de4b021aa9917ed1b"}, {"problem": 30, "code": "(fn [i]\n          (loop [i i\n                 o []\n                 last-seen nil]\n            (if (empty? i)\n              o\n              (let [f (first i)\n                    next-o (if (= last-seen f)\n                             o\n                             (conj o f))]\n                (recur (rest i) next-o f)))))", "user": "52b065dbe4b0c58976d9acc9"}, {"problem": 30, "code": "(fn [arr]\n  (map first(partition-by identity arr)))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 30, "code": "(fn [sekvenssi] (reduce #(if (not= (last %1) %2)\n             (conj %1 %2)\n             %1) [] (seq sekvenssi)))", "user": "57c314f3e4b05aa3c4741cba"}, {"problem": 30, "code": "(fn [coll]\n  (reduce #(if (not= (last %1) %2)\n             (conj %1 %2)\n             %1)\n         [(first coll)] (rest coll)))", "user": "589ac5a2e4b00487982d5318"}, {"problem": 30, "code": "(fn [values] (loop [remaining values finals []] \n  (if (empty? remaining)\n    finals\n    (let [fir (first remaining)\n          tks (take-while (partial = fir) remaining)\n          dps (drop-while (partial = fir) remaining)\n          ]\n      (recur dps\n             (into finals (set tks)))))))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "589c0475e4b00487982d5351"}, {"problem": 30, "code": "#(reduce (fn [acc el] (if (= el (last acc)) acc (conj acc el))) [] %)", "user": "58c5a08be4b021aa9917ed40"}, {"problem": 30, "code": "(fn [c] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] c))", "user": "58c7a80fe4b021aa9917ed7b"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 30, "code": "reduce (fn [res x] (if (not (= x (last res)))\n                      (concat res (list x))\n                      res))\n        ()", "user": "58b86162e4b0ebc645576d97"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58c8e0aae4b021aa9917ed95"}, {"problem": 30, "code": "reduce (fn [res c] (if (= (last res) c) res (conj res c))) []", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 30, "code": "(fn [s] (reduce (fn [x y] (cond (= (last x) y) x :else (conj x y))) [] s))", "user": "58c54e2ee4b021aa9917ed3a"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 30, "code": "(fn [coll lastch s]\n  (if (empty? s)\n    coll\n  (let [ch (first s)]\n  (if (= lastch ch)\n    (recur coll lastch (rest s))\n    (recur (concat coll [ch]) ch (rest s)))))) '() nil", "user": "58b26da4e4b0ebc645576d0a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "589c7c8ce4b00487982d5361"}, {"problem": 30, "code": "(fn [x] (reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) [] x))", "user": "55228c3ce4b0882d96d091a2"}, {"problem": 30, "code": "(fn [s]\n  (loop [s (seq s)\n         r nil]\n    (if (empty? s)\n      (reverse r)\n      (recur (rest s) (if (= (first s) (first r))\n                        r\n                        (cons (first s) r))))))", "user": "58bfa57ae4b021aa9917ecd8"}, {"problem": 30, "code": "(fn f [s] (let[f* (fn [acc s*] (if (not= (last acc) s*) (conj acc s*) acc))] (reduce f* [] s)))", "user": "56a80d8fe4b07966d5a8a06a"}, {"problem": 30, "code": "(fn [tseq] \n  (loop [last nil final [] res tseq]\n    (if (empty? res)\n      final\n      (recur \n       (first res)\n       (if (= (first res) last)\n         final\n         (conj final (first res)))\n       (drop 1 res)\n       ))))", "user": "56351709e4b0bfe05bf117c2"}, {"problem": 30, "code": "(fn [seq-init]\n  (loop [prev nil seq seq-init acc []]\n    (if (empty? seq)\n      acc\n      (if (= prev (first seq))\n        (recur prev (rest seq) acc)\n        (recur (first seq) (rest seq) (conj acc (first seq)))))))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 30, "code": "reduce\n (fn [undup x]\n   (if (= (last undup) x) undup (conj undup x))) []", "user": "58c66990e4b021aa9917ed53"}, {"problem": 30, "code": "(fn [seq] (map first (partition-by identity seq)))", "user": "58c5ad55e4b021aa9917ed42"}, {"problem": 30, "code": "#(loop [x (first %)\n                       xs (rest %)\n                       result ()]\n                  (cond (empty? xs) (reverse (cons x result))\n                        (= x (first xs)) (recur x (rest xs) result)\n                        :else (recur (first xs) (rest xs) (cons x result))))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58cb7525e4b03c36ff7e584a"}, {"problem": 30, "code": "#(loop [xs % rs []]\n   (if (empty? xs)\n     rs\n     (recur (rest xs)\n            (if (= (first xs) (second xs)) rs (conj rs (first xs))))))", "user": "58cfbd7ae4b03c36ff7e58ba"}, {"problem": 30, "code": "(fn no-dublicates [col] \n      (reverse ((fn no-dublicates-acc [col, acc]\n        (println acc)\n        (if (not-empty col)\n          (if (not= (first col) (second col))\n            (no-dublicates-acc (rest col) (conj acc (first col)))\n            (no-dublicates-acc (rest col)  acc))\n          acc)) col '())))", "user": "587a3babe4b01531a375eae2"}, {"problem": 30, "code": "(fn rmvd [xs]\n  (if (or (= (count xs) 0) (= (count xs) 1))\n    xs\n    (if (= (first xs) (second xs))\n      (rmvd (rest xs))\n      (cons (first xs) (rmvd (rest xs))))))", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 30, "code": "(fn [s] (reduce\n          #(if-not (= (last %1) %2)\n             (conj %1 %2) %1)\n          [] s))", "user": "573102bbe4b0cd1946bd0fbb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 30, "code": "(fn [s]\n\t(reverse\n              (reduce #(if-not \n                         (= (first %1) %2) \n                         (cons %2 %1) \n                         %1) \n                       '() \n                       (seq s))))", "user": "58c7131be4b021aa9917ed6d"}, {"problem": 30, "code": "(fn compress [coll]\n  (if (empty? coll)\n    '()\n    (cons (first coll) (compress (drop-while #(= (first coll) %) coll)))\n    )\n  )", "user": "58aa8083e4b01a0c0b232985"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58d5114de4b03c36ff7e5953"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58c93089e4b021aa9917ed9b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58969076e4b00487982d52a2"}, {"problem": 30, "code": "(fn comp-seq [n]\n  (map first (partition-by identity n)))", "user": "58d737cee4b03c36ff7e5982"}, {"problem": 30, "code": "(fn rm [xs]\n  (reduce \n   #(if (= %2 (last %1))\n      %1\n      (concat %1 [%2]))\n   '() xs))", "user": "58d63b99e4b03c36ff7e596b"}, {"problem": 30, "code": "reduce (fn [a b]\n             (if (not (= (last a) b))\n               (conj a b)\n               a)) []", "user": "58809253e4b0f1effa3b7618"}, {"problem": 30, "code": "(fn [inseq] (reduce #(if (= (last %) %2) % (concat %  (list %2))) () inseq))", "user": "58cbdc3be4b03c36ff7e5856"}, {"problem": 30, "code": "#(reduce (fn [x y] \n          (if (= (last x) y)\n            x \n            (conj x y) \n            )\n          )\n        [] %\n        )", "user": "58d28c70e4b03c36ff7e5901"}, {"problem": 30, "code": "(fn compress [x]\n  (loop [in x,\n         out []]\n    (if (empty? in)\n      (seq out)\n      (recur (rest in)\n             (if (= (first in) (last out))\n               out\n               (conj out (first in)))\n             ))))", "user": "58cff8b0e4b03c36ff7e58c0"}, {"problem": 30, "code": "#(loop [lst % prev nil result ()]\n   (if (empty? lst) (reverse result)\n   (if (= (first lst) prev) (recur (rest lst) prev result)\n     (recur (rest lst) (first lst) (conj result (first lst))))))", "user": "58cd4949e4b03c36ff7e5886"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56f3d21ae4b046a417f92055"}, {"problem": 30, "code": "(fn compress ([s] (cons (first s) (compress (first s) (rest s))))\n             ([f s] (cond (empty? s)           '()\n                          (not (= f (first s))) (compress s) \n                          :else                 (compress f (rest s)))))", "user": "58cfb517e4b03c36ff7e58b9"}, {"problem": 30, "code": "(fn compress [xs]\n  (if (= 1 (count xs))\n    xs\n    (if (= (first xs) (first (rest xs)))\n      (cons (first xs) (rest (compress (rest xs))))\n      (cons (first xs) (compress (rest xs))))))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 30, "code": "#_(fn compress\n  ([s] (compress \"\" s))\n  ([prev [c & s]]\n    (if (= prev c)\n      (compress c s)\n      (cons c (compress c s)) )))\n\n(fn compress\n  ([s] (compress \"\" s))\n  ([prev [c & s]]\n    (if (empty? s)\n      (if (= prev c)\n        '() (list c) )\n      (if (= prev c)\n        (compress c s)\n        (cons c (compress c s)) ))))", "user": "58acce0ae4b0005cfeb1a754"}, {"problem": 30, "code": "(fn pack \n  ([sq]\n   (pack '() sq))\n  ([acc sq]\n   (if (empty? sq)\n     acc\n     (if (= (last acc) (first sq))\n      (pack acc (rest sq))\n      (pack (concat acc (list (first sq))) (rest sq))))))", "user": "58d4e73ce4b03c36ff7e594d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "578a08d8e4b0ebec4cfb7537"}, {"problem": 30, "code": "(fn comp-seq [n]\n  (map first (partition-by identity n)))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 30, "code": "(fn dedup\n  ([arr] \n    (let [l (seq arr)]\n      (dedup (first l) (rest l) '())))\n  ([prev arr accum]\n    (if (empty? arr)\n      (reverse (cons prev accum))\n      (let [[next & remaining] arr]\n        (dedup next remaining (if (= prev next) accum (cons prev accum)))))))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 30, "code": "(fn compress [[x & xs]]\n  (if (empty? xs)\n    (cons x [])\n    (cons x (drop-while (partial = x) (compress xs)))))", "user": "58ddac2ce4b0a4d5acaab6d6"}, {"problem": 30, "code": "(fn [x] \n   (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 30, "code": "#(reduce\n (fn [acc x] (if (= x (last acc)) acc (conj acc x)))\n []\n %)", "user": "58dde189e4b0a4d5acaab6dd"}, {"problem": 30, "code": "(fn compress-a-sequence [sequence]\n  (loop [seq sequence\n         previous nil\n         compressed '()]\n    (if (empty? seq)\n      compressed\n      (recur (rest seq) (first seq) (let [item (first seq)]\n                                      (if (not= previous item)\n                                        (concat compressed (conj '() item))\n                                        compressed))))))", "user": "58daae01e4b0a4d5acaab664"}, {"problem": 30, "code": "#(loop [r [] coll %]\n   (if (seq coll)\n     (recur (if (= (last r) (first coll))\n              r\n              (conj r (first coll)))\n            (rest coll))\n     r))", "user": "58dcae01e4b0a4d5acaab6a4"}, {"problem": 30, "code": "(fn my-compress [s]\n  (loop [arr s result nil]\n    (if (empty? arr)\n      (if (string? s) \n        (apply str (reverse result))\n        (reverse result))\n      (if (= (first arr) (second arr))\n        (recur (drop 1 arr) result)\n        (recur (drop 1 arr) (cons (first arr) result))))))", "user": "57dd651ee4b0bd073c202441"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "58dbfb24e4b0a4d5acaab690"}, {"problem": 30, "code": "(partial reduce (fn [acc el] (if (= (last acc) el)\n                               \t acc\t\n                               \t (conj acc el)))\n         \t    [])", "user": "5703a557e4b08d47c97781f4"}, {"problem": 30, "code": "(fn [x]\n  (loop\n    [orig x\n     upd '()]\n    (if (empty? orig)\n      (reverse upd)\n      \n      (if (= (first orig) (first (rest orig)))\n        (recur (rest orig) upd)\n        (recur (rest orig) (conj upd (first orig)))\n        ))))", "user": "58d4f44ee4b03c36ff7e594f"}, {"problem": 30, "code": "(fn [seq]\n  (loop [s (rest seq)\n         r (list (first seq))]\n    (if-not (empty? s)\n      (let [f (first s)\n            last-r (first r)]\n        (if (= f last-r)\n          (recur (rest s) r)\n          (recur (rest s) (conj r f))))\n      (reverse r)\n      )))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 30, "code": "(fn [col]\n    (let [s (seq col)]\n      (reduce\n         (fn [agg x]\n            (if (= (last agg) x)\n               agg\n               (conj agg x)))\n         []\n         s)))", "user": "55b4fa46e4b01b9910ae2983"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "58d1fe17e4b03c36ff7e58f5"}, {"problem": 30, "code": "#(apply (fn [x & xs]\n          (reduce (fn [ys r]\n            (if (= (last ys) r)\n              ys\n              (conj ys r)))\n           [x] xs)) %)", "user": "58e37946e4b005f69f193cae"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58e51bc5e4b056aecfd47c86"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58e5fbbae4b056aecfd47ca6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58e56154e4b056aecfd47c92"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58e2e11ce4b005f69f193ca0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58e5e585e4b056aecfd47ca2"}, {"problem": 30, "code": "(fn  [x]\n (reduce (fn [newstring y] (if (= (last newstring) y) newstring (conj newstring y))) [] x))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [output cur]\n            (if (= (last output) cur)\n              output\n              (if (string? output)\n                (str output cur)\n                (conj output cur))))\n          (if (string? coll) \"\" [])\n          coll))", "user": "58e45a2ce4b056aecfd47c69"}, {"problem": 30, "code": "#(reverse (reduce (fn [a b] (if (= (first a) b) a (conj a b))) nil %))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "58cba946e4b03c36ff7e584f"}, {"problem": 30, "code": "(fn un-dupe [something]\n  (let [collection (seq something)\n        _1st (first collection)\n        _2nd (second collection)]\n    (if (= (count (set collection)) 1)\n      (list _1st)\n      (if (= (count collection) 2)\n        (if (= _1st _2nd) () collection)\n        (if (= _1st _2nd)\n          (un-dupe (rest collection))\n          (conj (un-dupe (rest collection)) _1st))))))", "user": "58e980dfe4b056aecfd47d0b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58e5f995e4b056aecfd47ca5"}, {"problem": 30, "code": "reduce (fn [ls a]\n            (if (= a (last ls))\n                ls\n                (conj ls a)\n            ))\n        []", "user": "56ca2f25e4b0ea9b8538f716"}, {"problem": 30, "code": "#(seq (first (reduce (fn [[a l] c] (if-not (= c l) [(conj a c) c] [a l])) [[] nil] %)))", "user": "58acca5ee4b0005cfeb1a753"}, {"problem": 30, "code": "(fn [coll]\n  (loop [coll coll last nil z []]\n    (cond\n     (empty? coll) z\n     (= (first coll) last) (recur (next coll) last z)\n     :else (recur (next coll) (first coll) (conj z (first coll))))))", "user": "58ebae90e4b056aecfd47d44"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "58ec8c7ae4b056aecfd47d64"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 30, "code": "(fn [p]    \n            (reduce    \n                    (fn [x y]\n                        (if (not= (last x) y) (conj x y) x))\n                [(first p)]\n                p))", "user": "58e325f3e4b005f69f193ca7"}, {"problem": 30, "code": "(fn [input]\n    (let [s (seq input)]\n      (loop [head (first s)\n             tail (rest s)\n             accum []]\n        (let [accum (if (= head (last accum))\n                      accum\n                      (conj accum head))] \n          (if (empty? tail)\n            accum\n            (recur (first tail) (rest tail) accum))))))", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "58dd21a9e4b0a4d5acaab6b3"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [t v]\n            (if (= (last t) v)\n              t\n              (do (println t)\n              (conj t v)))) [] coll))", "user": "58edaa3be4b056aecfd47d89"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58934052e4b00487982d523a"}, {"problem": 30, "code": "(fn compress [s]\n  (map first (partition-by identity s)))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= (last a) b) \n                     a (conj a b))) [] %)", "user": "58ef0b8ce4b056aecfd47dbf"}, {"problem": 30, "code": "(fn compress-seq [s]\n  (map first (partition-by identity s)))", "user": "58ee9b14e4b056aecfd47db0"}, {"problem": 30, "code": "(fn [coll]\n  (let [collseq (seq coll)]\n  \t(reduce (fn [acc item]\n  \t\t(if (not (= (last acc) item))\n    \t\t(conj acc item)\n          \tacc))\n        [(first collseq)]\n\t\t(rest collseq))))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 30, "code": "(fn [x]\n  (loop [deduped [] list x]\n    (if (empty? list)\n      deduped\n      (if (not (= (first list) (last deduped)))\n      \t(recur (conj deduped (first list)) (rest list))\n        (recur deduped (rest list))))))", "user": "58f00639e4b056aecfd47ddc"}, {"problem": 30, "code": "(fn [coll]\n  (for [x (partition-by identity coll)]\n    (first x)))", "user": "57ffd1a9e4b0a837a8b30c2a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53cd5cd5e4b00fb29b2212e1"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 30, "code": "(fn func\n         ([xs] (let [v (vec xs)]\n                 (func [(first v)] v)))\n         ([acc [x y & more]]\n          (println x y more)\n          (if y\n            (if (= x y)\n              (recur acc (conj more y))\n              (recur (conj acc y) (conj more y)))\n            acc)))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 30, "code": "(fn compress-seq [s]\n  (map first (partition-by identity s)))", "user": "58e965b3e4b056aecfd47d08"}, {"problem": 30, "code": "#(loop [in (seq %) out '()]\n   (let [x (first in) xs (rest in)]\n   (if (empty? in) \n     (reverse out)\n     (recur xs \n       (if (= x (first out)) \n         out\n         (conj out x))))))", "user": "5895385fe4b00487982d5279"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "587c77afe4b01531a375eb1b"}, {"problem": 30, "code": "(fn [S] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] S))", "user": "58e7eba2e4b056aecfd47cdf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58ea778be4b056aecfd47d1e"}, {"problem": 30, "code": "(fn rdup\n  ([col] (rdup col '()))\n  ([col, acc] (cond\n    (empty? col) (reverse acc)\n    (= (first col ) (first (rest col))) (rdup (rest col) acc)\n    :else (rdup (rest col) (conj acc (first col)))\n    )))", "user": "58dd2c02e4b0a4d5acaab6b8"}, {"problem": 30, "code": "#(reverse\n  (reduce \n    (fn [l i] (if (= (first l) i) \n                l \n                (conj l i))) \n    (list (first %)) \n    (rest %)))", "user": "58f25609e4b08e1cf3471cff"}, {"problem": 30, "code": "(fn [s] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() s)))", "user": "58f273d9e4b08e1cf3471d01"}, {"problem": 30, "code": "(fn [input]\r\n  (loop [i input res []]\r\n    (if (empty? i)\r\n      res\r\n      (if (= (last res) (first i))\r\n        (recur (rest i) res)\r\n        (recur (rest i) (conj res (first i))))\r\n  )))", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 30, "code": "#(reduce (fn [acc nex]\n          (if (= (last acc) nex)\n            acc\n            (conj acc nex))) [] %)", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 30, "code": "#(map first(partition-by(comp)%))", "user": "58f5689de4b0438e51c2ced7"}, {"problem": 30, "code": "(fn dedupe [input]\n  (loop [in input\n         out []]\n    (if (empty? in)\n      out\n      (if (= (first in) (last out))\n        (recur (rest in) out)\n        (recur (rest in) (conj out (first in)))))))", "user": "58f4fa7ee4b0438e51c2cecb"}, {"problem": 30, "code": "(fn compress [xs]\n  (if (seq (rest xs))\n    (if (= (first xs) (second xs))\n      (compress (rest xs))\n      (cons (first xs) (compress (rest xs))))\n    [(first xs)]))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 30, "code": "(fn [col]\n  (reduce\n    (fn [result x]\n      (if (= x (last result))\n        result\n        (conj result x)))\n    []\n    col))", "user": "58b2c435e4b0ebc645576d11"}, {"problem": 30, "code": "(fn [l] (cons (first l) (mapcat (fn [a b] (if (not= a b) (list a) '())) (rest l) (drop-last l))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 30, "code": "#(map first (partition-by list %))", "user": "58bcea23e4b0888cdc949d23"}, {"problem": 30, "code": "(fn rmConsecutiveDups [el]\n  (if (empty? el)\n    el\n    (let [car (first el)\n          cdr (rest el)\n          result (rmConsecutiveDups cdr)]\n      (if (= car (first cdr))\n        result\n        (conj result car)))))", "user": "51a0370ae4b0b292b01ee3ef"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58ee0bb6e4b056aecfd47d97"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 30, "code": "(fn [c] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] c))", "user": "5567f164e4b0c656e3ff184d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58f75bf8e4b0438e51c2cf13"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56fbacc5e4b07572ad1a88d3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 30, "code": "(fn\n  [x]\n  (loop [coll x\n         last nil\n         acc []]\n    (if (empty? coll)\n      acc\n      (let [f (first coll)\n            r (rest coll)]\n        (if (= last f)\n          (recur r f acc)\n          (recur r f (conj acc f)))))))", "user": "58ac1135e4b0005cfeb1a73f"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5635adeee4b0bfe05bf117c7"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "576ffcb9e4b0979f89651592"}, {"problem": 30, "code": "(fn [coll] (reduce (fn [col itm] (if (= (last col) itm) col (conj col itm))) [] coll))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 30, "code": "(fn [s]\n  (loop [x (first s) xs (next s) res [] xlast nil]\n    (if-not x\n      res\n      (if (= x xlast)\n        (recur (first xs) (next xs) res xlast)\n        (recur (first xs) (next xs) (conj res x) x)))))", "user": "589f2cefe4b02bd94d917e75"}, {"problem": 30, "code": "(fn [s]\n  (loop [s (seq s) r []]\n  (if (empty? s)\n    r\n    (if (= (first s) (last r))\n           (recur (rest s) r)\n           (recur (rest s) (conj r (first s))))))\n  )", "user": "4e72a717535d5021c1a89665"}, {"problem": 30, "code": "(fn [x] (reduce (fn [acc cur]\n                  (if (= (last acc) cur)\n                    acc\n                    (conj acc cur))) [] x))", "user": "58447708e4b089d5ab817e4b"}, {"problem": 30, "code": "(fn filtr [coll]\n  (->> coll\n    (reduce\n      (fn [res elem]\n        (if (= (second res) elem)\n          res\n          (list (cons elem (first res)) elem)))\n      '((), nil))\n    (first)\n    (reverse)))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 30, "code": "(fn rem-dup [x]\n  (cond\n    (= () x) x\n    (= () (rest x)) x\n    (= (first x) (first (rest x))) (conj\n                                     (rem-dup ((fn rem-char [x y]\n                                          (cond\n                                            (= (first x) y) (rem-char (rest x) y)\n                                            :else x\n                                          )\n                                     ) (rest x) (first x)))\n                                     (first x)\n                                   )\n    :else (conj (rem-dup (rest x)) (first x))\n  )\n)", "user": "58f92297e4b0438e51c2cf43"}, {"problem": 30, "code": "(fn compress\n  [s]\n  (reduce (fn [curr f]\n            (println curr f)\n            (if (= (last curr) f)\n              curr\n              (into curr [f])))\n          []\n          s))", "user": "58f7dfe6e4b0438e51c2cf1f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "590088bfe4b0438e51c2d026"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58ff9640e4b0438e51c2cff6"}, {"problem": 30, "code": "#(reduce (fn [acc x] (if (= (last acc) x) acc (conj acc x))) [] %)", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 30, "code": "(fn [seq]\n    (loop [s seq\n           e (first seq)\n           result []]\n      (if (empty? s)\n        result \n        (let [n (first (next s))\n              distinct? (not= n e)]\n          (recur (rest s)\n                 (if distinct? n e)\n                 (if distinct? (conj result e) result))))))", "user": "58fff18be4b0438e51c2d00c"}, {"problem": 30, "code": "reduce #(if (= (peek %) %2) % (conj % %2)) []", "user": "58fdbf59e4b0438e51c2cfbc"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] (seq s)))", "user": "5901158de4b0438e51c2d039"}, {"problem": 30, "code": "(fn rem-dup [coll]\n  (cond\n   (< (count coll) 1) coll\n   (= (first coll) (second coll)) (rem-dup (rest coll))\n   :else (conj (rem-dup (rest coll)) (first coll))))", "user": "58f8d79ee4b0438e51c2cf39"}, {"problem": 30, "code": "(fn [x]\n  (reduce #(if (or (empty? %1) (not (= (last %1) %2))) (conj %1 %2) %1) [] x))", "user": "574b4f3ee4b02ea114799207"}, {"problem": 30, "code": "#(map first (partition-by list %))", "user": "58fd82a8e4b0438e51c2cfb5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59035914e4b022d14a2aafaa"}, {"problem": 30, "code": "(fn [x] (reduce #(conj %1 (first %2)) [] (partition-by identity x)))", "user": "589b98fae4b00487982d533c"}, {"problem": 30, "code": "#(reduce (fn [s a] (if (not= (last s) a) (conj s a) s)) [] %)", "user": "52369a67e4b05f3be1c7c8f5"}, {"problem": 30, "code": "#(loop [[head & tail] % prev nil s []] (let [ret (if (not (= head prev)) (conj s head) s)] (if (empty? tail) ret (recur tail head ret))))", "user": "59073e0fe4b047aa04b19950"}, {"problem": 30, "code": "reduce (fn [coll n] (if (= (last coll) n) coll (conj coll n))) []", "user": "58dc81d1e4b0a4d5acaab69e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58aa3f02e4b01a0c0b23297d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59085adfe4b047aa04b19972"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59005094e4b0438e51c2d01e"}, {"problem": 30, "code": "#(letfn[(f [seq collector prev]\n  (if (not (empty? seq))\n    (if (not (= (first seq) prev))\n      (f (rest seq) (conj collector (first seq)) (first seq))\n      (f (rest seq) collector (first seq)))\n    collector))]\n        (f %1 [] nil))", "user": "576aea4fe4b0a07e8fc18126"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55d70b8fe4b0e31453f64a9c"}, {"problem": 30, "code": "#(reduce (fn [res it]\n            (if (not (= (last res) it))\n              (conj res it)\n              res)) [(first %)] %)", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 30, "code": "#(reduce (fn [a e] (if (= e (last a)) a (conj a e))) [] (vec %))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "590d0b3fe4b047aa04b199f9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58d5c245e4b03c36ff7e5964"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "590e588ce4b047aa04b19a23"}, {"problem": 30, "code": ";after 1.7 just use \"dedupe\", sigh.\n#(map first (partition-by identity %))", "user": "59076082e4b047aa04b19956"}, {"problem": 30, "code": "#(\n  (fn my-filter [filtered to-filter]\n  \t( let [next-char (first to-filter) remain-chars (next to-filter)]    \n    \t(if (nil? next-char) \n  \t\t\tfiltered\n  \t\t\t(if (= next-char (last filtered))\n    \t\t\t(recur filtered remain-chars)\n    \t\t\t(recur (conj filtered next-char) remain-chars)\n         \t)\n\t\t)\n    )\n  )\n [] (seq %))", "user": "58f9fde7e4b0438e51c2cf56"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "590d0c31e4b047aa04b199fb"}, {"problem": 30, "code": "(fn c1\n  ([input] (c1 [] input))\n  ([acc input]\n  (let [x (first input)]\n    (if (= () input)\n      acc\n      (if (= (last acc) x)\n       (recur acc (rest input))\n       (recur (conj acc x) (rest input))\n     )\n   )\n  )\n )\n)", "user": "58f90aa2e4b0438e51c2cf41"}, {"problem": 30, "code": "reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) '[]", "user": "5908b36be4b047aa04b19982"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "590d0bc8e4b047aa04b199fa"}, {"problem": 30, "code": "(fn [coll]\n  (loop [target-coll []\n         [fir & rest-coll] coll]\n    (if (= fir (last target-coll))\n      (recur target-coll rest-coll)\n      (if (nil? fir)\n        target-coll\n       (recur (conj target-coll fir) rest-coll))\n      )\n    )\n  )", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 30, "code": "reduce (fn [deduped x] ( if (= (last deduped) x) deduped (conj deduped x))) []", "user": "591326f2e4b0163c97b36efc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5913375de4b0163c97b36efe"}, {"problem": 30, "code": "(fn cs\n  ([coll] (cs coll []))\n  ([coll rs]\n   (if (empty? coll)\n     rs\n     (if (= (first coll) (last rs))\n       (recur (rest coll) rs)\n       (recur (rest coll) (conj rs (first coll)))))))", "user": "5640b135e4b08d4f616f5ee8"}, {"problem": 30, "code": "(fn [x] (reverse (reduce (fn [v e] (if (= e (first v)) v (conj v e))) '() x)))", "user": "59096794e4b047aa04b1999e"}, {"problem": 30, "code": "(fn [coll]\n  (->> coll\n       (cons nil)\n       (map vector coll)\n       (filter #(apply not= %))\n       (map first)))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 30, "code": "(fn [s] ((fn [s r] (if (empty? s) (reverse r) (if (empty? (rest s)) (reverse (cons (first s) r)) (let [[x y & xs] s] (if (= x y) (recur (cons y xs) r) (recur (cons y xs) (cons x r))))))) (apply list s) nil))", "user": "58fdd7b7e4b0438e51c2cfc0"}, {"problem": 30, "code": "(fn foo [li]\n  (if (or (empty? li) (empty? (rest li)))\n       li\n      (let [fst (first li) snd (second li)]\n        (if (= fst snd)\n          (foo (rest li))\n          (cons fst (foo (rest li)))))))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 30, "code": "(fn eater [x] (if (empty? (rest x)) x (if (= (first x) (first (rest x))) (eater (cons (first x) (drop 2 x))) (cons (first x) (eater (rest x))))))", "user": "59078134e4b047aa04b1995c"}, {"problem": 30, "code": "(fn [col]\n  (reduce\n   (fn [acc cha]\n     (if (not= (last acc) cha)\n       (conj acc cha)\n       acc)) [] col))", "user": "587c48cce4b01531a375eb16"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 30, "code": "(fn [coll]\n  (let [pairs (partition 2 1 (into [nil] coll))]\n    (filter #(not (nil? %)) (for [[a b] pairs]\n      (if (= a b)\n        nil b)))))", "user": "59199cc3e4b09b4ee5954bc8"}, {"problem": 30, "code": "(fn\n\t[s]\n\t(cons \n\t\t(first s)\n\t\t(map\n\t\t\tlast\n\t\t\t(filter \n\t\t\t\t(fn [[a b]] (not= a b)) \n\t\t\t\t(map list s (rest s))))))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5916412ee4b09b4ee5954b87"}, {"problem": 30, "code": "(fn [strang]\n  (reduce \n    (fn [acc x] \n      (if (= (last acc) x)\n        acc\n        (conj acc x)\n      )\n    ) (vector (first strang)) (into [] (rest strang)))\n)", "user": "5822b578e4b04b46fc4b0fa4"}, {"problem": 30, "code": "(fn [x]\n  (loop [i 0\n         lst [(nth x i)]]\n    (print lst)\n    (if (< i (count x))\n      (recur\n        (inc i)\n        (if (not (= (last lst) (nth x i)) )\n          (conj lst (nth x i))\n          lst))\n      lst)\n    ))", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 30, "code": "(fn squeeze [seq]\n  (reduce (fn [squeezed next]\n            (if (= (last squeezed) next)\n              squeezed\n              (conj squeezed next)))\n          []\n          seq))", "user": "59032c0fe4b022d14a2aaf9f"}, {"problem": 30, "code": "(fn this [x] \n    (cond\n      (= 1 (count x)) x\n      (= (first x) (nth x 1)) (this (rest x))\n      :else (conj (this (rest x)) (first x))\n      \n      ))", "user": "59165082e4b09b4ee5954b88"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52f762ece4b047fd55836fc2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "585a9a16e4b0f14aab7c8752"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "591c2f4ee4b09b4ee5954bfc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "590f283de4b047aa04b19a35"}, {"problem": 30, "code": "(fn [coll]\n  (let [ coll-pred     (seq coll)\n         coll-succ     (cons nil coll-pred)\n         all-pairs     (map list coll-pred coll-succ)\n         deduped-pairs (filter (partial apply not=) all-pairs)\n         deduped-coll  (map first deduped-pairs)\n       ]\n   deduped-coll))", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (not= b (last a)) (conj a b) a)) [(first %)] (rest %))", "user": "591f05b4e4b09b4ee5954c42"}, {"problem": 30, "code": "(fn [letters]\n  (loop [lettersacc (rest letters)\n         lastchar (first letters)\n         result (list (first letters))]\n    (if (empty? lettersacc)\n      (reverse result)\n      (recur (rest lettersacc)\n             (first lettersacc)\n             (if (= lastchar (first lettersacc))\n               result\n               (cons (first lettersacc) result))))))", "user": "5369f9c2e4b0243289761ea5"}, {"problem": 30, "code": "(fn myfunc [input] \n\n  (when-let [[f & r] (seq input)] \n    (if (= f (first r)) \n      (myfunc r) \n      (cons f (myfunc r)))))", "user": "591cbc30e4b09b4ee5954c08"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 30, "code": "#(\n  (fn compress [item coll]\n   (cond\n    (empty? coll) [item]\n    (= (first coll) item) (compress item (rest coll))\n    :else (cons item (compress (first coll) (rest coll))))) (first %) (rest %))", "user": "58ffbabce4b0438e51c2d002"}, {"problem": 30, "code": "(fn [in]\n   (reduce #(if-not (= %2 (last %1))\n              (conj %1 %2) %1)\n           [] in))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [accu item]\n            (if (= (last accu) item)\n              accu\n              (conj accu item)))\n          []\n          coll))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5922a513e4b026ae38521286"}, {"problem": 30, "code": "(fn [x] \n  (apply list (reduce (fn [b a] \n                        (if (= (peek b) a) \n                          b\n                          (conj b a))) [] x)))", "user": "591f5124e4b09b4ee5954c45"}, {"problem": 30, "code": "(fn [x]\n  (loop [processed [(first x)] remaining (rest x)]\n        (if (= 0 (count remaining))\n            processed\n            (if (= (last processed) (first remaining))\n                (recur processed (rest remaining))\n                (recur (conj processed (first remaining))\n                       (rest remaining))))))", "user": "5911aa1de4b0163c97b36ed8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58a32c21e4b02bd94d917eeb"}, {"problem": 30, "code": "(fn [collection] \n  (loop [result [],data collection, prev 0 ]\n    (if (empty? data)\n    result\n    (recur (if(not= prev (first data)) (conj result (first data)) result) (rest data) (first data))\n    )\n  )\n)", "user": "59228b00e4b026ae38521281"}, {"problem": 30, "code": "(fn [coll]\n  (loop [accum []\n         [h & t] coll]\n    (if-not h\n      accum\n      (recur (conj accum h)\n             (drop-while (partial = h) t)))))", "user": "58ef93ece4b056aecfd47dca"}, {"problem": 30, "code": "(fn [xs] (map first (partition-by identity xs)))", "user": "4db1b3951254ad5b4805fa6f"}, {"problem": 30, "code": "(fn compr [sq]\n    (cond (nil? (second sq)) (list (first sq))\n          (= (first sq)\n             (second sq)) (compr (rest sq))\n          :else (conj (compr (rest sq))\n                      (first sq))))", "user": "57614a42e4b0994c1922fb85"}, {"problem": 30, "code": "(fn [x] \n  (reduce\n   #(if (= %2 (last %1))\n      %1\n      (conj %1 %2))\n   []\n   (vec x)\n  )\n)", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 30, "code": "(fn [x] (reverse (loop [index 1 coll (list* (first x) '())] (if (= index (count x)) coll (recur (+ 1 index) (if (= (nth x index) (nth x (- index 1))) (concat '() coll) (list* (nth x index) coll)))))))", "user": "5924009ce4b072a2710fce45"}, {"problem": 30, "code": "(partial (fn [prev r c]\n           (if (empty? c)\n             (reverse r)\n             (if (= (first c) prev)\n               (recur prev r (rest c))\n               (recur (first c) (conj r (first c)) (rest c)))))\n         nil '())", "user": "590253e3e4b0438e51c2d055"}, {"problem": 30, "code": "(partial\n  (fn compress [prev x]\n    (if (= '() x)\n      x\n      (if (= prev (first x))\n        (compress prev (rest x))\n        (cons\n         (first x)\n         (compress\n          (first x)\n          (rest x))))))\n  nil)", "user": "59273eefe4b072a2710fcec6"}, {"problem": 30, "code": "(fn [dups]\n  (reverse(into nil (reduce \n   (fn [prev cur]  (if (= (last prev) cur) prev (conj prev cur)))\n   (vector(first dups))\n   (rest dups)))))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 30, "code": "#(reduce \n  (fn [xs y] \n    (if (= y (last xs)) \n      xs \n      (conj xs y))) \n  [] (seq %))", "user": "59279a89e4b072a2710fced3"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "59234753e4b0a390037439ef"}, {"problem": 30, "code": "(fn [input]\n  (reduce \n   (fn [res i]\n     (if (= i (peek res)) \n       res\n       (conj res i))) \n   [] \n   input))", "user": "4e6fe3a6535d5021c1a89629"}, {"problem": 30, "code": "(fn\n      [xs]\n      (reduce (fn [a b]\n                (if (= (last a) b)\n                  a\n                  (conj a b))) [] xs))", "user": "592af6eee4b072a2710fcf2c"}, {"problem": 30, "code": "reduce (fn [r x] (if (= (last r) x) r (conj r x))) []", "user": "591d9870e4b09b4ee5954c1b"}, {"problem": 30, "code": "#((fn removeDups [seq res] (if (= (first seq) nil) \n                             res\n                             (if (= (first seq) (last res)) \n                              (removeDups (rest seq) res) \n                              (removeDups (rest seq) (conj res (first seq)))))) % [])", "user": "56ffeafee4b08d47c97781c2"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= (last a) b)\n                     a\n                     (conj a b)))\n                   []\n                   %)", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "592518bfe4b072a2710fce65"}, {"problem": 30, "code": ";(fn zip ([s] (zip (seq s) '()))\n;  ([s v] (cond (empty? s) (reverse v)\n;    (= (first s) (first v)) (recur (rest s) v)\n;    :else (recur (rest s) (conj v (first s))))))\n\n; #(->> % (reduce (fn [x y] (if (= (first x) y) x (conj x y))) '()) reverse)\n;reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []\n\n;#(map first (partition-by identity %))\n;(comp (partial map first) (partial partition-by identity))\n#(->> % (partition-by identity) (map first))", "user": "591d182ee4b09b4ee5954c10"}, {"problem": 30, "code": "#(reverse (reduce (fn [acc value] (if (= (first acc) value) acc (cons value acc))) '() %))", "user": "532cb870e4b019098a6f8b34"}, {"problem": 30, "code": "(fn [c]\n  (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] c))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 30, "code": "reduce (fn [x,y] (if (= y (last x)) x (conj x y))) []", "user": "5933b736e4b072a2710fd05d"}, {"problem": 30, "code": "(partial (fn [output [head & tail]]\n           (if (nil? head)\n             (into '() output)\n             (if (= head (first tail))\n               (recur output tail)\n               (recur (cons head output) tail)))) '())", "user": "58db362be4b0a4d5acaab675"}, {"problem": 30, "code": "(fn compress-seq [s]\n  (map first (partition-by identity s)))", "user": "59301509e4b072a2710fcfd6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59258aa7e4b072a2710fce74"}, {"problem": 30, "code": "#(reduce (fn [acc x] (if (= (last acc) x)\n                       acc\n                       (concat acc [x])))\n[]  %)", "user": "5923554ee4b0a390037439f2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5931e498e4b072a2710fd024"}, {"problem": 30, "code": "(fn [col] \n    (loop [cur (first col) rest-col (rest col) results [] ]\n      (println cur)\n      (if (empty? rest-col)\n        (conj results cur)\n        (recur\n         (first rest-col)\n         (rest rest-col)\n         (if (= cur (first rest-col))\n           results\n           (conj results cur))))))", "user": "5913fde8e4b0163c97b36f13"}, {"problem": 30, "code": "(fn rmd [l] (map first (partition-by identity l)))", "user": "59368ccae4b02506e01a297a"}, {"problem": 30, "code": "reduce (fn [acc x] (if-not (= x (peek acc)) (conj acc x) acc)) []", "user": "5935b010e4b04f87174def55"}, {"problem": 30, "code": "(fn [x] \n  (reduce\n      #(if  (not= (last %1) %2)\n            (conj %1 %2)\n            %1)\n      [] (vec x)))", "user": "5936fabce4b02506e01a298c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 30, "code": "(fn [s] (loop [lst s new []]\n          (if (empty? lst)\n            new\n          (if (or (empty? new) (not= (first lst) (last new)))\n            (recur (rest lst) (conj new (first lst)))\n          (recur (rest lst) new)))))", "user": "59368ccae4b02506e01a2979"}, {"problem": 30, "code": "(fn [string]\n  (loop [s string news []]\n    (if (empty? s)\n      news\n      (if (or (empty? news) (not= (last news) (first s)))\n        (recur (rest s) (conj news (first s)))\n      (recur (rest s) news)))))", "user": "59369515e4b02506e01a297e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59368efbe4b02506e01a297d"}, {"problem": 30, "code": "reduce\n    (fn \n      [init x] \n      (if (= (last init) x) \n        init \n        (conj init x)))\n    []", "user": "5180af54e4b0e3fc13e244e9"}, {"problem": 30, "code": "(fn [x]\n   (map first (partition-by identity x)))", "user": "59385840e4b02506e01a29c9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5939bcb6e4b069cdc2982b3f"}, {"problem": 30, "code": "(fn ististran2 [x]\n  (cond\n    (< (count x) 2) x\n    :else\n      (if (= (first x) (second x)) (ististran2 (rest x)) (conj (ististran2 (rest x)) (first x)))\n      )\n    )", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "592c2f3ee4b072a2710fcf53"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "593c71cbe4b069cdc2982b90"}, {"problem": 30, "code": "(fn [c]\n  (loop [result [] coll c]\n    (cond (empty? coll) result\n          (= (last result) (first coll)) (recur result (rest coll))\n          :else (recur (conj result (first coll)) (rest coll)))))", "user": "593bdd84e4b069cdc2982b81"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) \n          %\n          (conj % %2)\n          ) []", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 30, "code": "#(reduce (fn [ret v] (if (= v (last ret)) ret (conj ret v))) [] %)", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5591b61ee4b0604b3f94d580"}, {"problem": 30, "code": "#((fn com [a, b]\n    (if (empty? a)\n      b\n      (com (rest a)\n           (if (= (first a)\n                  (last b))\n             b\n             (concat b [(first a)])\n           )\n      )\n    )\n) % [])", "user": "593f88dce4b069cdc2982be2"}, {"problem": 30, "code": "(fn f [x]\n  (loop [s x, res '()]\n    (if (seq s)\n      (recur (rest s) (if (= (first s) (second s))\n                        res\n                        (conj res (first s))))\n      (reverse res))))", "user": "593d6793e4b069cdc2982ba6"}, {"problem": 30, "code": "(fn [x]\n  (map first (partition-by identity x))\n  )", "user": "592dbbd5e4b072a2710fcf7f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59251947e4b072a2710fce69"}, {"problem": 30, "code": "(fn deleteDuplicates [col] (mapcat set (#(partition-by identity %1) col)))", "user": "592518e8e4b072a2710fce67"}, {"problem": 30, "code": "(fn del-consecutive-dups [col]\n  (mapcat set (#(partition-by identity %1) col)))", "user": "592518f0e4b072a2710fce68"}, {"problem": 30, "code": "#(first\n (reduce (fn [[coll pval] val]\n           (if (not= pval val)\n             [(conj coll val) val]\n             [coll val])) [[] 0 ] %))", "user": "527ba29de4b03e8d9a4a7594"}, {"problem": 30, "code": "reduce \n  #(if (= (last %1) %2) \n     %1\n     (conj %1 %2))\n  []", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 30, "code": "#(if (string? %)\n       (apply str (map first (partition-by identity %)))\n       (map first (partition-by identity %)))", "user": "59438419e4b060784b3b7929"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59449aa2e4b0b03edd0057ad"}, {"problem": 30, "code": "(fn [s]\n (map first\n   (partition-by identity s)))", "user": "593fcb0ce4b069cdc2982bea"}, {"problem": 30, "code": "(fn [lst]\n  (reduce (fn [acc curr]\n            (if (not= curr (last acc)) (conj acc curr) acc))\n          []\n          lst))", "user": "5938bca5e4b02506e01a29eb"}, {"problem": 30, "code": "(fn [coll]\n  (reduce\n    (fn [acc itm]\n      (if\n        (or\n          (empty? acc)\n          (not= (last acc) itm))\n        (conj acc itm)\n        acc))\n    []\n    (seq coll)))", "user": "593e4b1fe4b069cdc2982bbb"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [acc item]\n  (if (not= (last acc) item)\n    (conj acc item)\n    acc)) [] s))", "user": "58eadeafe4b056aecfd47d28"}, {"problem": 30, "code": "(fn [c] (map first (partition-by identity c)))", "user": "593f8692e4b069cdc2982be1"}, {"problem": 30, "code": "(fn compress-sequence [seq]\n  (if (empty? seq)\n    seq\n    (if (= (first seq) (second seq))\n      (compress-sequence (rest seq))\n      (conj (compress-sequence (rest seq)) (first seq)))))", "user": "54bd9a60e4b0ed20f4ff6ee3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59395adfe4b02506e01a29fb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "592518cde4b072a2710fce66"}, {"problem": 30, "code": "(fn compress\n  [l]\n  (let [lst (vec l)]\n    (loop [i 0 v []]\n      (if (>= i (count l))\n        v\n        (if (not= (last v) (lst i))\n            (recur (+ i 1) (conj v (lst i)))\n            (recur (+ i 1) v))))))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 30, "code": "(fn\n  [coll]\n  (loop [result []\n         remaining coll]\n    (if (empty? remaining)\n      result\n      (recur (conj result (first remaining))\n             (drop-while (partial = (first remaining))\n                         remaining)))))", "user": "594783bee4b07ddc2dafada1"}, {"problem": 30, "code": "(fn [s] \n  (reduce \n   #(if (= %2 (last %1))\n      %1\n     (conj %1 %2))\n   []\n   s)\n)", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 30, "code": "(fn [x]\n  (->> x\n       (partition-by identity)\n       (map first)))", "user": "593dde1be4b069cdc2982baf"}, {"problem": 30, "code": "reduce (fn [acc x] (if (= (last acc) x) acc (conj acc x))) []", "user": "5943abb6e4b060784b3b792b"}, {"problem": 30, "code": "#(loop [s %1 p nil r []]\n   (cond (empty? s) r\n         (= p (first s)) (recur (rest s) p r)\n         :else (recur (rest s) (first s) (conj r (first s))))\n   )", "user": "594263cbe4b060784b3b790a"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] x))", "user": "59473563e4b07ddc2dafad97"}, {"problem": 30, "code": "(fn [x]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "user": "593744abe4b02506e01a299b"}, {"problem": 30, "code": "(fn [s] (loop [ret [(first s)] i 1 e (first s)] (if (= i (count s)) ret (if (= e (nth s i)) (recur ret (+ i 1) e) (recur (conj ret (nth s i)) (+ i 1) (nth s i))))))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 30, "code": "#(map first  (partition-by identity %))", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59496129e4b07ddc2dafadd7"}, {"problem": 30, "code": "(fn compress [x] \n  (map first (partition-by identity x)))", "user": "594ad6aae4b07ddc2dafae0e"}, {"problem": 30, "code": "(fn [x]\n  (reverse\n  (loop [in x\n         out '()]\n    (if (< (count in) 2)\n      (if (= (count in) 0)\n        out\n        (cons (first in) out))\n      (if (= (first in) (second in))\n        (recur (rest in) out)\n        (recur (rest in) (cons (first in) out)))))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 30, "code": "#(->> %\n      (partition-by identity)\n      (map first))", "user": "594bdadce4b07ddc2dafae43"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "594bc912e4b07ddc2dafae3e"}, {"problem": 30, "code": "(fn [x] \n  (loop [new []\n         old x]\n    (if (empty? old) new\n      (if (= (last new) (first old))\n        (recur new\n               (rest old))\n        (recur (conj new (first old))\n               (rest old))))))", "user": "576186a5e4b0994c1922fb8e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "594bb203e4b07ddc2dafae36"}, {"problem": 30, "code": "(fn [x]\n    (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 30, "code": "(fn [l] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) () l)))", "user": "594ce8e5e4b07ddc2dafae76"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "53a12b57e4b0ca733b9744ba"}, {"problem": 30, "code": "#(loop [x (rest (vec %)) res [ (first (vec %))] pre (first (vec %))]    (if  (not= [] x)  (recur   (rest x) (if (not= (first x) pre ) (conj res (first x))  res  )  (first x)  )      res    )   )", "user": "594e3723e4b07ddc2dafaea8"}, {"problem": 30, "code": "(fn [x] (let [[first & rest] (first (tree-seq sequential? seq (reverse (reverse x))))]\n   (loop [first first rest rest final [first]]\n     (let [[fel & rel] rest]\n       (if (empty? rest)\n         (if (= (type final) java.lang.String)\n         \t(apply str final)\n            final)\n         (if (= first fel)\n           (recur fel rel final)\n           (recur fel rel (conj final fel)\n)))))))", "user": "594bc7d6e4b07ddc2dafae3d"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "59497f51e4b07ddc2dafaddd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 30, "code": "#(reverse\n   (reduce\n     (fn [r x]\n       (if (= x (first r))\n         r\n         (cons x r) ))  \n     '()\n     % ))", "user": "594c1baae4b07ddc2dafae59"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55216aa5e4b0882d96d09192"}, {"problem": 30, "code": "(fn compress [x]\n  (reduce #(if (= (last %1) %2) %1 (concat %1 (seq [%2]))) '() x))", "user": "578559a2e4b0ebec4cfb74da"}, {"problem": 30, "code": "(fn nub [xs]\n  (cond\n   (empty? xs) ()\n   (empty? (rest xs)) xs\n   :else (let [[x y & xys] xs]\n      \t\t(if (= x y)\n        \t\t(lazy-seq (nub (cons x xys)))\n        \t\t(lazy-seq (cons x (nub (cons y xys))))))))", "user": "5069d8c5e4b01dc6af13f838"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "594bb36ae4b07ddc2dafae37"}, {"problem": 30, "code": "(fn [all]\n  (loop [result [] last1 nil all1 all el (first all)]\n    (if (empty? all1)\n      (if (= last1 el) result (conj result el))\n      (recur (if (= last1 el) result (conj result el)) el (rest all1) (first all1)\n      )\n      \n  ))\n  )", "user": "57a497e8e4b0a966079561e4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "594f0c93e4b07ddc2dafaec7"}, {"problem": 30, "code": "(fn uniq [c]\n  (let [step (fn [c]\n               (when-let [s (seq c)]\n                 (let [fc (first s) sc (second s)]\n                   (if (= fc sc)\n                     (uniq (rest s))\n                     (cons fc (uniq (rest s)))))))]\n    (lazy-seq (step c))))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 30, "code": "(fn [s]\n  (loop [prev nil\n         remaining s\n         coll []]\n    (let [item (first remaining)]\n      (if (nil? item)\n        coll\n        (recur item (rest remaining) (if (= item prev)\n                                       coll\n                                       (conj coll item)))))))", "user": "58b0bbc5e4b0ebc645576ce6"}, {"problem": 30, "code": "(fn [inp]\n  (loop [res []\n         inp inp]\n    (if\n     (empty? inp) res\n     (let [last-el (last res)\n           next-el (first inp)\n           dubl (= last-el next-el)]\n       (recur\n        (if dubl\n          res\n          (conj res next-el))\n        (rest inp))))))", "user": "592334c7e4b0a390037439ee"}, {"problem": 30, "code": "(fn [s] (map #(first %) (partition-by identity s)))", "user": "594a5559e4b07ddc2dafadf8"}, {"problem": 30, "code": "(fn [n]\n(map first (partition-by identity n)))", "user": "5915a0a5e4b09b4ee5954b73"}, {"problem": 30, "code": "(fn [s] (loop [my-seq s cmp '()]\n          (if (= nil my-seq) (reverse cmp) (recur (next my-seq) (if (= (first my-seq) (first cmp)) cmp  (cons (first my-seq) cmp))))\n          ))", "user": "59473583e4b07ddc2dafad98"}, {"problem": 30, "code": "#(loop [acc [] vect %] (if (empty? vect) acc (recur (if (= (last acc) (first vect)) acc (conj acc (first vect)))(drop 1 vect))))", "user": "56b2652ae4b0982f16b37e04"}, {"problem": 30, "code": "reduce (fn [col el] (if (= el (last col)) col (conj col el))) []", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 30, "code": "#(reduce (fn [a b]\n          (if (= b (last a))\n            a\n            (conj a b)))\n        []\n         %)", "user": "57262710e4b0c5bde472c120"}, {"problem": 30, "code": "(fn rem-consec-dupes [coll] (map first (filter (fn bob [[a b]] (not= a b)) (partition 2 1 (conj (vec(seq coll)) :kludge)) ) ))", "user": "593db05ae4b069cdc2982bab"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 30, "code": "(fn del-consecutive-dups [col]\n  (mapcat set (partition-by identity col)))", "user": "5958a0c8e4b066ee0a44af8c"}, {"problem": 30, "code": "(fn [xs] \n   (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) \n           '[] xs))", "user": "5954108ae4b066ee0a44aef4"}, {"problem": 30, "code": "(fn [the-seq] (map first (rest (filter (fn [[a, b]] (not (= a b))) \n                     (map #(vector %1 %2) (concat [nil] the-seq) (concat the-seq [nil]))))))", "user": "5947c6a6e4b07ddc2dafada7"}, {"problem": 30, "code": "#(reverse(reduce (fn [buffer inp](if(not(= inp (first buffer))) (conj buffer inp) buffer)) (list (first %)) %))", "user": "59406b94e4b069cdc2982bfd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "593910eae4b02506e01a29f4"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "595914e0e4b066ee0a44af99"}, {"problem": 30, "code": "#(loop [x (seq %) a []]\n    (if (= x ())\n    a\n    (if (= (first x) (last a) ) (recur (rest x) a ) (recur (rest x) (conj a (first x))) )\n      )\n  )", "user": "59551e04e4b066ee0a44af20"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "595a885be4b066ee0a44afc4"}, {"problem": 30, "code": "(fn [coll]\n  (map first \n       (partition-by identity coll)))", "user": "595930f6e4b066ee0a44af9c"}, {"problem": 30, "code": "(fn de-adjcent-dup\n  [x]\n  (let [[f & r ] x]\n    (if (empty? x )\n      nil\n      (let [r-res (de-adjcent-dup r)]\n        (if (= f (first r-res))\n          r-res\n          (cons f r-res)\n          )\n        )\n       )\n  )\n)", "user": "5959c72ae4b066ee0a44afac"}, {"problem": 30, "code": "#(map first (partition-by identity  %))", "user": "594cb88be4b07ddc2dafae6e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "595b864ee4b066ee0a44afdc"}, {"problem": 30, "code": "(fn [s]\n   (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] s))", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "58cf8f97e4b03c36ff7e58b7"}, {"problem": 30, "code": "(fn comp [in]\n\t(map first (partition-by identity in))\n  )", "user": "595d0897e4b066ee0a44b00f"}, {"problem": 30, "code": "(fn [ps]\n  (let [[h & t] ps]\n    (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) (list h) t))))", "user": "58969420e4b00487982d52a4"}, {"problem": 30, "code": "#(reduce (fn [s a] (if (not= (last s) a) (conj s a) s)) [] %)", "user": "4f73591be4b07046d9f4f045"}, {"problem": 30, "code": "(fn[s](reduce (fn [result _first]\n\t\t\t(if (not= _first (last result))\n\t\t\t\t(conj result _first)\n\t\t\t\tresult)) [] s))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 30, "code": "(fn [x]\n (reduce\n   #(if (not= (last %1) %2) (conj %1 %2) %1)\n   []\n   x))", "user": "5926c254e4b072a2710fceb8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "595b7c12e4b066ee0a44afda"}, {"problem": 30, "code": "(fn comp-seq [n]\n(map first (partition-by identity n)))", "user": "595e1ba7e4b066ee0a44b036"}, {"problem": 30, "code": "#(reduce (fn [a, x] (if (= (last a) x) a (conj a x))) [] %)", "user": "59566d1de4b066ee0a44af54"}, {"problem": 30, "code": "(fn [x]\n  (loop [s x\n         prev nil\n         done []]\n    (if-let [f (first s)]\n      (if (= prev f)\n        (recur (rest s) prev done)\n        (recur (rest s) f (conj done f)))\n      done)))", "user": "595ebf46e4b066ee0a44b04f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58cc390ce4b03c36ff7e5866"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "595eba88e4b066ee0a44b04e"}, {"problem": 30, "code": "(fn re\n  ([xs] (re xs [] []))\n  ([xs lst acc] (if (empty? xs) acc (if (= lst (first xs)) (re (rest xs) lst acc) (re (rest xs) (first xs) (conj acc (first xs))))))\n  )", "user": "595fe942e4b066ee0a44b075"}, {"problem": 30, "code": "(fn [x]\n  (->> x\n       (partition-by identity)\n       (map first)))", "user": "5954edcbe4b066ee0a44af15"}, {"problem": 30, "code": "#((fn removeIfMatch [acc y]\n    (if (empty? y)\n      acc\n      (if (= (last acc) (first y))\n        (removeIfMatch acc (rest y))\n        (removeIfMatch (reverse (conj (reverse acc) (first y))) (rest y)))))\n  '() %)", "user": "595ed97fe4b066ee0a44b051"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 30, "code": "(fn x [coll]\n  (loop [input coll\n         output []]\n    (if (empty? input)\n      output\n      (recur \n        (rest input)\n        (if (= (first input) (last output))\n          output\n          (conj output (first input)))))))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 30, "code": "(fn \n    [xs]\n  \t(reverse \n      (reduce #(if (not= %2 (first %1)) (conj %1 %2) %1) '() (seq xs))))", "user": "595d224de4b066ee0a44b016"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "570e43d8e4b0b0fb43fd06eb"}, {"problem": 30, "code": "( fn [sequence] (map first (partition-by identity sequence)))", "user": "593c653de4b069cdc2982b8f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "524ac3d1e4b09eba1c0223a0"}, {"problem": 30, "code": "(fn [x]\n  (map first (partition-by identity x)))", "user": "58cd65fae4b03c36ff7e5889"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 30, "code": "(fn [x]\n  (reduce (fn [res cur]\n            (if (= (last res) cur)\n              res\n              (conj res cur)))\n          []\n          x))", "user": "5922a36ce4b026ae38521285"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5962af8ce4b066ee0a44b0b8"}, {"problem": 30, "code": "(fn [s]\n  (loop [s' s res []]\n    (if-let [f (first s')]\n\t  (recur (drop-while #(= f %) s') (conj res f))\n      res)))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 30, "code": "#((fn f [l]\n  \t(let [[a b & tail] l]\n      \t(if (nil? b)\n            [a]          \n      \t\t(if (= a b)\n          \t\t(f (concat [a] tail))\n          \t\t(concat [a] (f (concat [b] tail)))))))\n  (seq %))", "user": "595d2041e4b066ee0a44b014"}, {"problem": 30, "code": "(fn [s] (loop [l   (seq s)\n               el  nil\n               col []]\n          (cond\n            (empty? l)\n              (seq col)\n            (empty? col)\n              (recur\n                (rest l)\n                (first l)\n                (conj col (first l)))\n            :else\n              (recur\n                (rest l)\n                (first l)\n                (if (= el (first l)) col (conj col (first l)))))))", "user": "595c02a9e4b066ee0a44afeb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58ea5bdce4b056aecfd47d1b"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "5911c8e1e4b0163c97b36edc"}, {"problem": 30, "code": ";; #(map first (partition-by identity %))\n;; #(->> % (partition-by identity) (map first))\n(fn [arg] \n  (let [xs (seq arg)] \n    (reverse (reduce #(if (= (first %1) %2)\n                        %1\n                        (conj %1 %2)) \n                     '()\n                     xs))))", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 30, "code": "(fn [arr] (reduce (fn [my-arr i] \n                    (if (= (last my-arr) i)\n                      my-arr\n                      (conj my-arr i)))[] arr))", "user": "59636b6de4b066ee0a44b0c6"}, {"problem": 30, "code": "reduce (fn [x y] (if (= y (last x)) x (concat x [y]))) []", "user": "59663e77e4b069c0a1a1979f"}, {"problem": 30, "code": "(fn [x] (reduce\n           #(if (not= (first %1) %2) (conj %1 %2) %1) () (reverse x)))", "user": "5965eb8de4b069c0a1a19796"}, {"problem": 30, "code": "(fn [list] (loop [l list prev nil result '()]\n  (let [fi (first l)]\n  (let [re (rest l)]\n  (if (empty? l)\n    (reverse result)\n    (if (= prev fi)\n      (recur re fi result)\n      (recur re fi (cons fi result))\n))))))", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55c4e30be4b0e31453f649a6"}, {"problem": 30, "code": "#(loop [cur (first %) prev nil r (rest %) res []]\n    (let [s (if (= cur prev) res (conj res cur))]\n     (if (empty? r)\n       s\n       (recur (first r) cur (rest r) s))))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "503a8959e4b07a1917cc34d6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 30, "code": "(fn [ys]\n  ((fn\n  [[f & xs] acc]\n (if (nil? f)\n   (reverse acc)\n   (recur xs (if (= f (first xs))\n                    acc\n                    (cons f acc))))\n ) ys '()))", "user": "59311da6e4b072a2710fd007"}, {"problem": 30, "code": "(fn [sequence]\n  (let [reducer (fn [acc item]\n                  (if (= item (last acc))\n                    acc\n                    (conj acc item)))]\n    (reduce reducer [] sequence)))", "user": "594e31dde4b07ddc2dafaea6"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (= (last %1) %2)\n             %1\n             (conj %1 %2))\n          []\n          s))", "user": "59699da7e4b069c0a1a197eb"}, {"problem": 30, "code": "(fn [s] (->> s (partition-by identity) (map first)))", "user": "5967ce67e4b069c0a1a197bf"}, {"problem": 30, "code": "#(remove nil? (for [i (range (count %))]\n      (if (= i (dec (count %)))\n          (nth % i)\n      (if (not= (nth % i) (nth % (inc i)))\n          (nth % i)\n      )\n      )\n    )\n    )", "user": "59692530e4b069c0a1a197e4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59648ce1e4b069c0a1a19769"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "51d55795e4b01da06753aa8f"}, {"problem": 30, "code": "#(loop [result () c %]\n    (cond\n     (empty? c) (reverse result)\n     (= (first result) (first c)) (recur result (rest c))\n     :else (recur (conj result (first c)) (rest c))))", "user": "596c1f25e4b069c0a1a19825"}, {"problem": 30, "code": "reduce (fn [acc e] (if (= (last acc) e) \n                      acc\n                      (conj acc e))) []", "user": "595fd77ce4b066ee0a44b06f"}, {"problem": 30, "code": "(fn [l] (reduce\n  (fn [x, y]\n    (if (= (last x) y)\n      x\n      (conj x y)))\n  []\n  l))", "user": "5629e651e4b00e49c7cb4814"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "596e4c5be4b069c0a1a19864"}, {"problem": 30, "code": "(fn compress [x]\n  (let [compressor (fn [s x] (if (= (first s) x) s (conj s x)))\n          result (reverse (reduce compressor '() x))]\n    (if (string? x) (apply str result) result)))", "user": "59708e38e4b01722bebd4c65"}, {"problem": 30, "code": "(fn [l] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] l))", "user": "596caee3e4b069c0a1a19837"}, {"problem": 30, "code": "reduce (fn [acc x] \n            (if (= x (last acc))\n              acc\n              (conj acc x)\n            )\n            \n           ) []", "user": "596f6683e4b069c0a1a19877"}, {"problem": 30, "code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "user": "595a4fb8e4b066ee0a44afba"}, {"problem": 30, "code": "(fn compress\n  [lis]\n  (if (string? lis)\n    (distinct lis)\n    (reduce (fn [a b]\n              (if-not (= (last a) b)\n                (conj a b)\n                a))\n            []\n            lis)))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 30, "code": "(fn solution30\n  [coll]\n  (let [coll (into (vector) coll)]\n    (reduce (fn [curr elem]\n              (if (not= elem (last curr))\n                (conj curr elem)\n                curr))\n      [] coll)))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 30, "code": "#(reduce (fn [c x]\n           (if (= (last c) x)\n             c\n             (conj c x))) [] %)", "user": "5398d042e4b0b51d73faaf00"}, {"problem": 30, "code": "(fn [xs]\n  (loop [result []\n         remaining xs]\n    (if (empty? remaining)\n      result\n      (if (= (first remaining) (last result))\n        (recur result (rest remaining))\n        (recur (conj result (first remaining)) (rest remaining))))))", "user": "596b5f27e4b069c0a1a19813"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59636ec9e4b066ee0a44b0c8"}, {"problem": 30, "code": "(fn trimmer\n  [input]\n  (loop [xs input ys [] prev nil]\n    (if (empty? xs)\n    ys\n    (recur\n      (rest xs)\n      (if (= (first xs) prev) ys (conj ys (first xs))) (first xs)))))", "user": "53de4bdae4b0d874e779ae32"}, {"problem": 30, "code": ";;reduce (fn [a b] (if (= a b) a (conj a b)))\n (fn [s] (map first (partition-by identity s)))", "user": "5972fcf6e4b01722bebd4c92"}, {"problem": 30, "code": "#(reduce\n(fn [a b] \n(if (= (last a) b) a (concat a (list b)))\n)\n'() %\n)", "user": "5797d3d2e4b039eba2ecb106"}, {"problem": 30, "code": "(fn f\n  ([s] (cons (first s) (f s (first s))))\n  ([s a]\n   (if (empty? s)\n     []\n     (if (= a (first s))\n       (f (rest s) a)\n       (cons (first s) (f (rest s) (first s)))))))", "user": "59733c91e4b01722bebd4c9b"}, {"problem": 30, "code": "(fn [coll] (loop [[f & r] coll res []]\n             (if \n               (nil? f) \n               res\n               (if \n                 (= f (last res)) \n                 (recur r res)\n                 (recur r (conj res f))           \n                )\n               )\n             )\n  )", "user": "57126104e4b09c608db70458"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5975ed26e4b01722bebd4cd0"}, {"problem": 30, "code": "(fn compress [x] (seq (map first (partition-by identity x))))", "user": "58866b4fe4b0f1effa3b76d4"}, {"problem": 30, "code": "reduce \n (fn [accum elem] \n   (if (not= (last accum) elem) (conj accum elem)\n        accum)) []", "user": "59738d98e4b01722bebd4ca1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "594266cfe4b060784b3b790b"}, {"problem": 30, "code": "#(reverse (reduce (fn [acc x] \n                    (if (= (first acc) x)\n                      acc\n                      (cons x acc))) \n                  [(first %)] \n                  (rest %)))", "user": "5974b12be4b01722bebd4cb1"}, {"problem": 30, "code": "(fn [a]\n\t(map first (partition-by identity a)))", "user": "5935151ee4b072a2710fd084"}, {"problem": 30, "code": "(fn [l]\n  (reduce (fn [a b]\n            (if (= (last a)\n                   b)\n              a\n              (conj a b)))\n          []\n          l))", "user": "5978305be4b01722bebd4d03"}, {"problem": 30, "code": "(fn f [[x & xs]] (when x (cons x (f (drop-while #(= x %) xs)))))", "user": "4fb1d7ace4b081705acca281"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 30, "code": "(fn [l] \n  (reduce #(if (= %2 (last %1))\n             %1 \n             (conj %1 %2))\n          [] l))", "user": "5978c844e4b01722bebd4d18"}, {"problem": 30, "code": "(fn flat [coll]\n  (if (empty? coll)\n    nil\n    (cons (first coll) (flat (drop-while #(= % (first coll)) coll)))))", "user": "5978b4c9e4b01722bebd4d13"}, {"problem": 30, "code": "(fn [x] (loop [lst x res []] \n          (if (empty? lst)\n              res\n              (if (= (first lst) (last res))\n                  (recur (rest lst) res)\n                  (recur (rest lst) (conj res (first lst))))\n            )))", "user": "5979cd36e4b02382a38ad1d8"}, {"problem": 30, "code": "(fn [[x & xs]]\n  (loop [[y & ys] xs p x out []]\n    (println p y)\n    (if ys\n      (if (not= y p)\n        (do (println \"adding \" p) (recur ys y (conj out p)))\n        (recur ys y out))\n      (if (not= y p)\n        (conj out p y)\n        (conj out y)))))", "user": "597d0e43e4b0dbe32238d095"}, {"problem": 30, "code": "(fn remove-dups\n  [s]\n  (map first (partition-by identity s)))", "user": "597a7418e4b02382a38ad1e9"}, {"problem": 30, "code": "(fn [xs]\n  (loop [old xs, new []]\n    (if (empty? old)\n      new\n      (recur (rest old) (if (= (first old) (last new)) new (conj new (first old)))))))", "user": "59644d2ae4b069c0a1a19764"}, {"problem": 30, "code": "#(loop [remaining %\n         matching-val nil\n         return-vals '()]\n\n    (let [current-val (first remaining)\n          the-rest (rest remaining)\n          next-val (first the-rest)]\n      (if (empty? remaining)\n        (reverse return-vals)\n        (if (= current-val next-val)\n          (recur the-rest next-val return-vals)\n          (recur the-rest next-val (cons current-val return-vals))))))", "user": "5977653be4b01722bebd4ced"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 30, "code": "(fn [word]\n  (reduce #(if (not= (last %) %2) (conj % %2) %) [] word))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 30, "code": "(fn [stuttered]\n    (reduce\n      #(if (= (last %1) %2)\n           %1\n           (conj %1 %2))\n      []\n      (seq stuttered)))", "user": "591addcee4b09b4ee5954be1"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "59804b60e4b021a7a535fdcf"}, {"problem": 30, "code": ";; With reduce\n;; (fn compress[xs]\n;;   (reduce\n;;    (fn [memo x] (if (= (last memo) x) memo (conj memo x)))\n;;    []\n;;    xs))\n;; Using built-in\n;; (fn compress[xs]\n;;   (map first\n;;        (partition-by identity xs)))\n;; cons\n(fn compress[xs]\n  (lazy-seq\n   (cond (empty? xs) '()\n         (= (first xs) (second xs)) (compress (rest xs))\n         :else (cons (first xs) (compress (rest xs))))))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "593ab583e4b069cdc2982b57"}, {"problem": 30, "code": "(fn rd [s]\n  (cond\n   (< (count s) 2) s\n   (= (first s) (second s)) (rd (rest s))\n   :else (cons (first s) (rd (rest s)))))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 30, "code": "(fn [arr]\n  (loop [acc []\n        others arr\n        prev nil]\n    (if (empty? others)\n      acc\n      (let [curr (first others)]\n        (recur (if (= prev curr)\n                 acc\n                 (conj acc curr))\n               (rest others)\n               curr)))))", "user": "597f8984e4b0dbe32238d0bf"}, {"problem": 30, "code": "reduce (fn [acc i] (if (= i (last acc)) acc (conj acc i))) []", "user": "596539dce4b069c0a1a19783"}, {"problem": 30, "code": "reduce (fn [acc x]\n          (if (= x (last acc))\n            acc\n            (conj acc x))) []", "user": "59826556e4b021a7a535fdfe"}, {"problem": 30, "code": "; #(reduce (fn [result el] (if (= el (last result)) result (conj result el))) [] %)\n\n;(fn [coll]\n;  (loop [result []\n;         coll coll]\n;     (if (empty? coll)\n;        result\n;        (if (= (first coll) (last result))\n;          (recur result (rest coll))\n;          (recur (conj result (first coll)) (rest coll))))))\n\n#(map first (partition-by identity %))", "user": "59837909e4b021a7a535fe16"}, {"problem": 30, "code": "(fn compress-seq\n  [sq]\n  (case (count sq)\n    0 sq\n    1 sq\n    (let [sqv (vec sq)\n          tail (rest sqv)\n          tail-head (first tail)\n          head (first sqv)]\n      (if (= head tail-head)\n        (compress-seq tail)\n        (concat (vector head) (compress-seq tail))))))", "user": "59863a26e4b021a7a535fe87"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5982d82be4b021a7a535fe05"}, {"problem": 30, "code": "(fn [s] (loop[sl s res []] (if(> (count sl) 0) (recur (drop 1 sl) (if(= (first sl) (last res)) res (conj res (first sl))))res)))", "user": "5971763fe4b01722bebd4c72"}, {"problem": 30, "code": "#(loop [[head & tail] %\n         result []]\n    \n      (if-not head\n        result\n        (if (= (last result) head)\n           (recur tail result)\n           (recur tail (conj result head))\n           )))", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 30, "code": "#(reduce (fn [ret rem]\n                (if-not (= (last ret) rem)\n                  (conj ret rem)\n                  ret))\n              []\n              %)", "user": "59881937e4b021a7a535feaf"}, {"problem": 30, "code": "(fn [x]\n  (let [xs (seq x)]\n    (->> (map list xs (concat (rest xs) (list (= (last xs) false))))\n         (filter #(not= (first %) (second %)))\n         (map first))))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 30, "code": "#(reverse \n   (reduce \n     (fn [initial a]\n       (if (not= a (first initial))\n           (conj initial a)\n           initial))          \n     '() %))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 30, "code": "(fn [sq] (map first (partition-by identity sq)))", "user": "598876fee4b021a7a535feb7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "598ad666e4b02b9968b84ce1"}, {"problem": 30, "code": "(fn sk-quchongfu [input]\n  (loop [i input\n        res []]\n   (if (empty? i)\n     res\n     (if (= (last res) (first i))\n       (recur (rest i) res)\n       (recur (rest i) (conj res (first i)))))))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 30, "code": "(fn [x]\n  (reduce \n   (fn [s n]\n     (if (= (last s) n)\n       s\n       (into s [n])\n     )\n    ) [] x))", "user": "5984b9f3e4b021a7a535fe33"}, {"problem": 30, "code": "(fn f [x]\n (if (empty? x)\n    (list)\n    (let [r (f (rest x))]\n      (if (= (first x) (first r))\n        r\n        (conj r (first x))\n      ))))", "user": "598a4ff7e4b02b9968b84cda"}, {"problem": 30, "code": "reduce (fn [l x]\n         (if (= (last l) x)\n           l\n           (conj l x))) []", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 30, "code": "(fn [input_coll] \n  (reduce \n          (fn [coll, x]\n            (if \n              (= (first coll) x) \n              coll \n              (conj coll x)\n             )\n          )\n          ()\n          (into () input_coll))\n  )", "user": "55916764e4b0604b3f94d57b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "596fb563e4b01722bebd4c55"}, {"problem": 30, "code": "#(map last (partition-by identity %))", "user": "598c8db8e4b02b9968b84d06"}, {"problem": 30, "code": "(fn [coll] \n  (reduce \n    (fn [res ele] \n      (if (= (last res) ele)\n        res \n        (conj res ele)))\n   [] coll))", "user": "598e7998e4b02b9968b84d34"}, {"problem": 30, "code": "(fn [coll] ((fn\n\t[remaining acc]\n\t(if (empty? remaining)\n\t\tacc\n\t\t(let [x (first remaining) r (rest remaining)]\n\t\t\t(if (= x (first r))\n\t\t\t\t(recur r acc)\n\t\t\t\t(recur r (concat acc (list x))))))) coll '()))", "user": "598af379e4b02b9968b84ce6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5952d75ce4b066ee0a44aed4"}, {"problem": 30, "code": "(fn [items]\n  (loop [current (first items) previous nil remaining (rest items) result '()]\n    (if (empty? remaining)\n      (if (= current previous)\n        (reverse result)\n        (reverse (conj result current)))\n      (if (= current previous)\n        (recur (first remaining) current (rest remaining) result)\n        (recur (first remaining) current (rest remaining) (conj result current))))))", "user": "5989ee61e4b021a7a535fed7"}, {"problem": 30, "code": "#(loop [n []\n        o %]\n   (if (empty? o)\n     n\n     (if (= (last n) (first o))\n       (recur n (rest o))\n       (recur (conj n (first o)) (rest o)))))", "user": "59902fede4b0fcebec4de86d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "591cc30be4b09b4ee5954c0a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "596d630ae4b069c0a1a19846"}, {"problem": 30, "code": "(fn [str](map first (partition-by identity str)))", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 30, "code": "(fn [x](map first (partition-by identity x)))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 30, "code": "(fn [seq]\n  (loop [loop-seq seq\n         target-seq []]\n    (if (empty? loop-seq)\n      (concat '() target-seq)\n      (let [head (first loop-seq)\n            body (rest loop-seq)]\n        (recur body (if (= head (last target-seq))\n                      target-seq\n                      (conj target-seq head)))))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 30, "code": "(fn compress [x]\n\t(let [[f & r] x]\n\t\t(println f r)\n\t\t(if (empty? r)\n\t\t\t(list f)\n\t\t\t(if (= f (first r))\n\t\t\t\t(compress r)\n\t\t\t\t(cons f (compress r))\n\t\t\t)\n\t\t)\n\t)\n)", "user": "598d746ae4b02b9968b84d23"}, {"problem": 30, "code": "(fn cmprss [xs]\n  (reverse \n   (reduce \n    (fn [acc x] \n      (if (= (first acc) x)\n        acc\n        (conj acc x)))\n    '() xs)))", "user": "598debf0e4b02b9968b84d2e"}, {"problem": 30, "code": "#(loop [newseq [(first (seq %))]\n        contender (second (seq %))\n        oldseq (rest (rest (seq %)))]\n   (if (empty? oldseq)\n     (if (= contender (last newseq))\n       newseq\n       (conj newseq contender))\n     (recur (if (= contender (last newseq))\n               newseq\n               (conj newseq contender))\n                 (first oldseq)\n            (rest oldseq))))", "user": "599475aae4b0b211ea3aaac8"}, {"problem": 30, "code": "(fn [x]\n    (loop [ret []\n           lastEntry nil\n           nextEntry (first x)\n           rx (rest x)]\n      (if (nil? nextEntry)\n        ret\n        (if (= nextEntry lastEntry)\n          (recur ret lastEntry (first rx) (rest rx))\n          (recur (conj ret nextEntry) (last (conj ret nextEntry)) (first rx) (rest rx)))))\n    )", "user": "59932f49e4b0b211ea3aaaae"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5907a736e4b047aa04b1995e"}, {"problem": 30, "code": ";ugly\n(fn p [coll]\n  (let [compressed\n        (seq\n        \t(loop [result [] current (first coll) items (rest coll)]\n        \t\t(if (nil? current)\n              \tresult\n              \t(if (= (first items) current)\n              \t  (recur result (first items) (rest items))\n                  (recur (conj result current) (first items) (rest items))\n                )\n            )\n          )\n        )]\n    (if (string? coll)\n      (apply str compressed)\n      compressed\n    )\n  )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 30, "code": "(fn [seq]\n  (reduce #(if (= (last %1) %2)\n             %1\n             (conj %1 %2))\n          [] seq))", "user": "56478a82e4b0284900eef61e"}, {"problem": 30, "code": "(fn [xs] (reduce #( if (= (last %1) %2) %1 (concat %1 (list %2))) '() xs))", "user": "4fff289ae4b0678c553fc3fd"}, {"problem": 30, "code": "#(reduce (fn [acc value] (if (= value (last acc)) acc (conj acc value))) [] %)", "user": "5990fcb9e4b0866487ed0d5b"}, {"problem": 30, "code": "(fn de-dupe [seqq]\n  (sequence (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] seqq)))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 30, "code": "(fn [s]\n  (map \n   first\n   (partition-by identity s)))", "user": "59946856e4b0b211ea3aaac7"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "user": "59967c40e4b0b211ea3aaaf2"}, {"problem": 30, "code": "(fn  [seq]\n  (let [unique-pairs\n        (filter (fn [[x y]]\n                  (not= x y))\n                (partition 2 1 seq))]\n    (conj (vec (map #(first %) unique-pairs))\n          (second (last unique-pairs)))))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 30, "code": "#(loop [f '() s (last %) r (drop-last %)]\n   (if (nil? s)\n     f\n     (if (= (first f) s)\n       (recur f (last r) (drop-last r))\n       (recur (conj f s) (last r) (drop-last r)))))", "user": "5992de05e4b0866487ed0d7e"}, {"problem": 30, "code": "(fn [input] (loop [input input rst []]\n            (if (empty? input) rst\n              (recur (rest input) (if (= (first input) (last rst)) rst\n                                    (conj rst (first input))\n                                    )))))", "user": "5996fd2be4b07157cc8daac5"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "55ce2b6de4b0e31453f64a26"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 30, "code": "(fn [l] (loop [r [] l l] (if (empty? l) r (recur (if (= (first l) (last r)) r (conj r (first l))) (rest l)))))", "user": "5995f8ade4b0b211ea3aaae9"}, {"problem": 30, "code": "(fn f\n  ([c]\n    (if (seq c)\n      (f (vector (first c))\n         (rest c))\n      []))\n  ([r c]\n    (if (seq c)\n      (f (if (= (first c) (last r))\n           r\n           (conj r (first c)))\n         (rest c))\n      r)))", "user": "59a24c92e4b066c664927d20"}, {"problem": 30, "code": "(fn [x]\n     (map first (partition-by identity x)))", "user": "594ea2a4e4b07ddc2dafaeb6"}, {"problem": 30, "code": "reduce #(into %1 (if (= (peek %1) %2) [] [%2])) []", "user": "59a2ba97e4b066c664927d2c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "599b7210e4b010b4cc4bca07"}, {"problem": 30, "code": "(fn si [collo]\n  (loop [coll collo\n         rr []]\n    (let [f (first coll)\n           l (last rr)]\n      (if (nil? f)\n        rr\n        (if (= f l)\n            (recur (rest coll) rr)\n            (recur (rest coll) (conj rr f)))))))", "user": "59a39440e4b066c664927d40"}, {"problem": 30, "code": "(fn [s] \n(loop [ret [] remaining (seq s) prev nil]\n(if (empty? remaining)\n(reverse ret)\n(if (= prev (first remaining))\n(recur ret (rest remaining) (first remaining))\n(recur (cons (first remaining) ret) (rest remaining) (first remaining))\n))))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 30, "code": "(fn compress\n  [coll]\n  (loop [ret [] coll coll]\n    (if (empty? coll)\n      ret\n      (recur (conj ret (first coll)) (drop-while #(= (first coll) %) coll)))))", "user": "59a512b7e4b066c664927d5e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "599df601e4b0871e7608b801"}, {"problem": 30, "code": "(fn compress [coll]\n  (let [aseq (seq coll)]\n  (if (empty? aseq)\n    nil\n    (if (= (first aseq) (second aseq))\n      (cons (first aseq) (drop 1 (compress (rest aseq))))\n      (cons (first aseq) (compress (rest aseq)))))))", "user": "59944e73e4b0b211ea3aaac2"}, {"problem": 30, "code": "(fn f [xs]\n   (if (not (empty? xs))\n     (let [[first-el & rest-els] xs\n           rest-els-compressed (drop-while #(= first-el %) rest-els)]\n       (cons first-el (f rest-els-compressed)))))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59a64a79e4b066c664927d7b"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "569d3f9ae4b0542e1f8d147a"}, {"problem": 30, "code": "(fn cmpr [xs]\n  (if (= 1 (count xs)) xs\n    (if (= (first xs) (second xs)) (cmpr (rest xs))\n      (cons (first xs) (cmpr (rest xs))))))", "user": "599d49a7e4b0871e7608b7f4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59a57e91e4b066c664927d63"}, {"problem": 30, "code": "reduce (fn [acc el]\n         (if (= (last acc) el) \n           acc \n           (conj acc el))) []", "user": "59a72effe4b066c664927d94"}, {"problem": 30, "code": "(fn [a] (reduce #(if-not (= (last %1) %2)\n    (conj %1 %2)\n    %1) [] a))", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59ab8beee4b08cbb53654d9e"}, {"problem": 30, "code": "(fn [col]\n  (map first (partition-by identity col)))", "user": "59a8405ce4b0bcf4e9a43af1"}, {"problem": 30, "code": "(fn [sq]\n           (let [aux \n                 (fn [[head & tail] last-seen acc]\n                   (cond\n                    (nil? head) \n                    acc\n              \n                    (= head last-seen)\n                    (recur tail head acc)\n\n                    :else \n                    (recur tail head (conj acc head))))]\n             (aux sq nil [])))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 30, "code": "reduce (fn [a b] (if (= b (last a)) a (conj a b))) []", "user": "59a460ede4b066c664927d52"}, {"problem": 30, "code": "(fn [coll] (reduce (fn [acc x]\n                      (if (= (peek acc) x)\n                        acc\n                        (conj acc x)))\n                    []\n                    coll))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 30, "code": "reduce \n    #(if-not (= (last %1) %2) \n      (conj %1 %2) %1) \n    []", "user": "59a9e517e4b08cbb53654d79"}, {"problem": 30, "code": "(fn [s]\n  (reduce\n    (fn [accum x]\n      (if (= x (last accum))\n        accum\n        (conj accum x)\n        )\n      )\n    [] s))", "user": "59a80652e4b0bcf4e9a43aeb"}, {"problem": 30, "code": "#(reduce\n  (fn\n    [result x]\n    (if (= (first result) x)\n      result\n      (cons x result)))\n  '()\n  (reverse %))", "user": "59a90b2ae4b0bcf4e9a43aff"}, {"problem": 30, "code": "(fn [s] (\n         reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] s\n         ))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 30, "code": ";; NB: none of the solutions will correctly de-dupe '(() () [] [])\n;; because (= () []) => true\n\n(fn dedupe*\n  ([aseq] (dedupe* [] aseq))\n  ([acc [ x & xs :as aseq]]\n   (cond\n    (empty? aseq) aseq\n    (empty? xs) (seq (conj acc x))\n    (= x (first xs)) (recur acc xs)\n    :else (recur (conj acc x) xs))))", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "56e1122fe4b03a7c14b85a20"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59089229e4b047aa04b1997c"}, {"problem": 30, "code": "(fn rec [x] \n  (if (empty? x)\n    x\n    (let [f (first x)]\n      (into [f] \n            (rec \n             (drop-while #(= f %) x)\n            )\n      )\n    )\n  )\n)", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] s))", "user": "59b05f0ee4b0e1f4e384c8cc"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 30, "code": "(fn compress [coll]\n  (->> coll\n    (partition-by identity)\n    (map first)\n    )\n  )", "user": "58f3a2d4e4b0438e51c2ceac"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59a3f3dce4b066c664927d48"}, {"problem": 30, "code": "(fn squeeze [xs]\n  (loop [prev nil\n         cur  (first xs)\n         tail (rest xs)\n         result []]\n    (cond \n     (nil? cur) result\n     (not= prev cur) (recur cur (first tail) (rest tail) (conj result cur))\n     :else (recur cur (first tail) (rest tail) result))))", "user": "59ad8695e4b0e1f4e384c887"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 30, "code": "(fn compress\n  [coll] (map first (partition-by identity coll)))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59a1fd6be4b066c664927d1b"}, {"problem": 30, "code": "(fn [seq]\n  (reduce (fn [acc elem]\n            (if (= (last acc) elem)\n               acc\n               (conj acc elem)))\n           [] seq))", "user": "56c44c34e4b05cc29241ee96"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "572010a4e4b0c5bde472c08c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57ac2d6be4b0b8559636fc83"}, {"problem": 30, "code": "(fn remove-dups \n  [xs] (map first (partition-by identity xs)))", "user": "59afe4bae4b0e1f4e384c8c0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 30, "code": "(fn [seqn] \n  (reduce \n          (fn [a b] \n              (if (= (last a) b)\n                  a\n                  (conj a b))) [] seqn ))", "user": "59b0e877e4b0e1f4e384c8d3"}, {"problem": 30, "code": "(fn compress [x] (let [res (reduce (fn [acc item] \n                      (if (=  (last acc) item) \n                       acc \n                       (conj acc item))\n                     ) [] (seq x))       \n       ]\n   (if (sequential? res)\n     (into '() (reverse res))\n     res)\n   ))", "user": "59b8ee96e4b0a024fb6ae3c0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 30, "code": "#(reduce (fn [a b](if (not= (last a) b)\n                    (conj a b)\n                    a))\n         [] %)", "user": "59a9c22ae4b08cbb53654d75"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59bcbfd0e4b0a024fb6ae419"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59b69bbee4b05c620303ca2a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59a2d49de4b066c664927d30"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52d954cae4b09f7907dd13a5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5998b0a1e4b07157cc8daaec"}, {"problem": 30, "code": "(fn rem-dup [coll]\n  (loop [coll coll prev nil result []]\n\t(if (empty? coll) result\n      (recur (rest coll) \n             (first coll) \n             (cond (= (first coll) prev) result\n                   :else (conj result (first coll))\n                   )))))", "user": "59b7120fe4b05c620303ca3b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "592fa9f8e4b072a2710fcfcb"}, {"problem": 30, "code": "(fn [xs] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] xs))", "user": "50a8bb65e4b0deba384a58bd"}, {"problem": 30, "code": "(fn [s]\n  (reverse\n    (reduce\n      (fn [new-coll current]\n        (if (= current (first new-coll)) new-coll (conj new-coll current))) '() s)))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 30, "code": "(fn [xs] (map first (partition-by identity xs)))", "user": "59abd1d8e4b08cbb53654da4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59358f74e4b04f87174def52"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj %1 %2)) []", "user": "54c98ac0e4b045293a27f679"}, {"problem": 30, "code": "(fn [rawInput]\n\n  (loop [previous nil \n\n         sequence (seq rawInput) \n\n         result []]\n\n    (if (= 0 (count sequence))\n\n      (seq result)\n\n      (if (nil? previous)\n\n        (recur \n\n          (first sequence) \n\n          (rest sequence) \n\n          (conj result (first sequence)))\n\n        (if (= previous (first sequence))\n\n          (recur\n\n            previous\n\n            (rest sequence)\n\n            result)\n\n          (recur\n\n            (first sequence)\n\n            (rest sequence)\n\n            (conj result (first sequence))))))))", "user": "59c5093ce4b0a024fb6ae50c"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [acc n] \n            (if\n             (empty? acc) (conj acc n)\n             (if (= n (last acc)) \n               acc\n               (conj acc n))))\n          []\n          s))", "user": "54058af3e4b0addc1aec6669"}, {"problem": 30, "code": "reduce (fn [acc, x] (if (= (last acc) x) acc (conj acc x))) []", "user": "59c22fbae4b0a024fb6ae4a3"}, {"problem": 30, "code": "(fn dedupe2 [[item & xs]]\n  (if-not item \n    () \n    (cons item (dedupe2 (drop-while #(= item %) xs)))))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 30, "code": "#(reverse\n  (reduce\n   (fn [a b]\n     (if (= (first a) b)\n       a\n       (conj a b)))\n   \n   '() %))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59cb706ee4b0a024fb6ae5ba"}, {"problem": 30, "code": "(fn [[x0 & xs]] (reduce \n                 (fn [acc x] (if (= x (peek acc)) acc (conj acc x)))\n                 [x0]\n                 xs))", "user": "59cc8d8de4b0a024fb6ae5d5"}, {"problem": 30, "code": "(fn [args] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] args))", "user": "5976da27e4b01722bebd4ce3"}, {"problem": 30, "code": "(fn [x] ((fn [_prev _curr _seq _rest] (cond (or (and (coll? _curr) (empty? _curr)) (nil? _curr)) _seq (= _prev _curr) (recur _curr (first _rest) _seq (rest _rest)) :else (recur _curr (first _rest) (conj _seq _curr) (rest _rest)))) (first x) (first (rest x)) [(first x)] (rest (rest x))))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59cf0d75e4b0ef0a1e9b5b5f"}, {"problem": 30, "code": "(fn [s]\n  (->> \n    s\n    (partition-by identity)\n    (map first)))", "user": "58dc5ceae4b0a4d5acaab69b"}, {"problem": 30, "code": "(fn remove-duplicates [it]\r\n                    (loop [here it\r\n                           there '()\r\n                           last nil]\r\n                      (if (empty? here)\r\n                        (reverse there)\r\n                        (let [this (first here)]\r\n                          (if (= this last)\r\n                            (recur (rest here) there last)\r\n                            (recur (rest here) (cons this there) this))))))", "user": "4ddc5d0a535d02782fcbea05"}, {"problem": 30, "code": "#(loop [seq % res []]\n  (if (= 0 (count seq))\n    res\n    (recur \n      (rest seq)\n      (concat \n        res \n        (remove nil? (list \n          (if (not= (last res) (first seq))\n            (first seq)\n          )\n        ))\n      )\n    )\n  )\n)", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "59c3a7e9e4b0a024fb6ae4df"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59c8c9bee4b0a024fb6ae567"}, {"problem": 30, "code": "#(loop [a %\n        b []]\n   (if-not (zero? (count a))\n     (recur (rest a) \n            (if (= (last b) (first a))\n              b\n              (conj b (first a))))\n     b))", "user": "595a3b41e4b066ee0a44afb7"}, {"problem": 30, "code": "#(loop [result [] c %]\n   (if (empty? c) (seq (reverse result))\n     (if (= (first result) (first c)) (recur result (rest c))\n       (recur (cons (first c) result) (rest c)))))\n\n;#(map first (partition-by identity %))", "user": "59c77511e4b0a024fb6ae545"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59b2e383e4b0e1f4e384c903"}, {"problem": 30, "code": "(fn [x]\n  (->> x\n    (partition-by identity)\n    (map first)\n       )\n  )", "user": "55fd0d19e4b0f488688e067a"}, {"problem": 30, "code": "(fn [s]                                                                                                                                   \n   (remove nil?\n           (map-indexed\n            #(if (< %1 1)\n               %2\n               (if (not= %2 (nth s (- %1 1)))\n                 %2)) s)))", "user": "58d96bdce4b0a4d5acaab638"}, {"problem": 30, "code": "(fn [coll]\n  (let [reducer (fn [part next] (if (= (last part) next)\n                                  part\n                                  (conj part next)))]\n    (reduce reducer [] coll)))", "user": "59908f3fe4b0866487ed0d50"}, {"problem": 30, "code": "(fn [x] (cons (first x)\n              (map first (filter #(not= (first %) (last %)) \n                                  (map vector \n                                      (rest x)\n                                       x)))))", "user": "59d4a160e4b0ef0a1e9b5be7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57fe7d7ce4b0d3187e9009d0"}, {"problem": 30, "code": "reduce (fn [m, x] (if (not (= (peek m) x)) (conj m x) m)) []", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 30, "code": "(fn [[item & coll]]\n  (reduce (fn [result to-compare]\n            (if (= (last result) to-compare)\n              result\n              (conj result to-compare)))\n          \n          [item]\n          coll))", "user": "59d9186be4b0ef0a1e9b5c50"}, {"problem": 30, "code": "#(->> %\n      (partition-by identity)\n      (map first))", "user": "579f89d5e4b05302be0b72ff"}, {"problem": 30, "code": "(fn furp [x] \n  (if (empty? x)\n    []\n  \t(if (= (first x) (second x)) \n      (furp (rest x))\n      (list* (first x) (furp (rest x)))\n    )\n  )\n)", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 30, "code": "#(loop [c %\n        o []]\n   (if (empty? c) o (recur (rest c) (if (= (last o) (first c)) o (conj o (first c))))))", "user": "59ddae03e4b01968742fed65"}, {"problem": 30, "code": "(fn f [xs] (if (empty? xs) xs (concat [(first xs)] (f (drop-while #(= % (first xs)) xs)))))", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 30, "code": "(fn [s]                                                                                                                                     \n                    (loop [coll s                                                                                                                             \n                           accum []]                                                                                                                          \n                      (if (empty? coll)                                                                                                                       \n                        accum                                                                                                                                 \n                        (recur (drop-while #(= (first coll) %) coll)                                                                                          \n                               (conj accum (first coll))))))", "user": "52d9e126e4b09f7907dd13b1"}, {"problem": 30, "code": "(fn [s]\n  (if (empty? s)\n    '()\n    (loop [sq (seq s) acc []]\n      (if (empty? sq)\n        (seq acc)\n        (recur (drop-while #(= (first sq) %) sq) (conj acc (first sq)))))))", "user": "59a31c55e4b066c664927d34"}, {"problem": 30, "code": "(fn [coll]\n (reduce (fn [res item]\n          (if (not= (last res) item)\n            (conj res item)\n            res))\n        []\n        coll))", "user": "58a34442e4b02bd94d917ef2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59dc7b31e4b0ef0a1e9b5ca0"}, {"problem": 30, "code": "(fn awesome [lst]\n  (map #(first %) (partition-by identity lst))\n )", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 30, "code": "(fn [lst] (map first (partition-by identity lst)))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 30, "code": "(fn [xs]\n  (loop [xss xs\n         acc [(first xss)]]\n    (if (empty? xss)\n      acc\n      (let [x (first xss)]\n       (recur\n        (rest xss)\n        (if (not= x (last acc))\n          (conj acc x)\n          acc))))))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 30, "code": "(fn [coll]\n  (->> coll\n       (partition-by identity)\n       (map first)))", "user": "550e0951e4b06e50f9beb163"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %) %2) % (conj % %2)) [] x))", "user": "580e7761e4b0849f6811b753"}, {"problem": 30, "code": "(fn remove-cons-duplicates [col]\n    (reverse (reduce\n        #(if (= (first %1) %2) %1 (conj %1 %2))\n        '()\n        col)))", "user": "59aeff12e4b0e1f4e384c8af"}, {"problem": 30, "code": "(fn decompress-a-seq [x]\n  (map first\n       (partition-by identity x)))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 30, "code": "reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) []", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 30, "code": "(fn [items]\n    (reduce #(if (= (last %1) %2)\n                  %1\n                  (conj %1 %2)) [] items))", "user": "59e48db0e4b08badc2a0c53e"}, {"problem": 30, "code": "(fn [lst] (map first (partition-by #(list %) lst)))", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 30, "code": "(fn   [lst]\n  (loop [lst2 ()\n         cc   0]\n    (if (= cc (count lst))\n      (reverse lst2)\n      (recur (if (not= (last (reverse lst2)) (first (drop cc lst)))\n               (cons (first (drop cc lst)) lst2)\n               lst2)\n             (+ cc 1)))))", "user": "59deba46e4b01968742fed7f"}, {"problem": 30, "code": "(fn \n  [x]\n  (loop [p x\n         y nil\n         q []]\n    (cond (empty? p) q\n      (not= (first p) y) (recur (rest p) (first p) (conj q (first p)))\n      :else (recur (rest p) (first p) q))))", "user": "59e4fc25e4b08badc2a0c54f"}, {"problem": 30, "code": "(fn [lista]\n  (let [listaPacks (partition-by identity lista)] ;lista que tiene cada identiidad en un parentesis :v, este \"pack\" se hace cuando son letras seguidas :v\n    (reduce (fn[listaResultado packActual] (conj listaResultado (first packActual))) [] listaPacks)))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 30, "code": "(fn compress\n  \n  [lst]\n  (if (empty? lst)\n    ()\n    (if (= (first lst) (first (rest lst)))\n      (compress (rest lst))\n      (conj (compress (rest lst)) (first lst)))))", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 30, "code": "(fn [lst]\n  (loop [lst2 ()\n         cc   0]\n    (if (= cc (count lst))\n      (reverse lst2)\n      (recur (if (not= (last (reverse lst2)) (first (drop cc lst)))\n               (cons (first (drop cc lst)) lst2)\n               lst2)\n             (+ cc 1)))))", "user": "59e55cc8e4b08badc2a0c555"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59e62655e4b08badc2a0c568"}, {"problem": 30, "code": "(fn compress\n  [lst]\n  (cond\n    (empty? lst)    ()\n    (= (first lst) (first (rest lst))) (compress (rest lst))\n    :else          (cons (first lst) (compress (rest lst)))))", "user": "59e778aae4b0249b72820716"}, {"problem": 30, "code": "#(reduce \n                              (fn [col element] \n                              (prn element)\n                              (prn (last col))\n                                (if (= (last col) element)\n                                  col\n                                  (conj col element))) [] %)", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [ ]", "user": "59d631d4e4b0ef0a1e9b5c09"}, {"problem": 30, "code": "(fn compress [lst]\n  (if (empty? lst) lst\n  (loop [result (cons (first lst) ())\n         element (first lst)\n         lst lst]\n    (cond\n      (empty? lst) (reverse result)\n      (= element (first lst)) (recur result element (rest lst))\n      :else (recur (cons (first lst) result) (first lst) (rest lst))))))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 30, "code": "(fn compress\n  [lst]\n  (if (empty? lst) ()\n    (loop [elem (first lst)\n           elem2 (first (rest lst))\n           lst (rest lst)\n           result ()]\n      (cond\n        (empty? lst) (if (= elem2 elem) (concat result [elem]) (concat result [elem] [elem2]))\n        (= elem elem2) (recur elem2\n                              (first lst)\n                              (rest lst)\n                              result)\n        :else (recur elem2\n                     (first lst)\n                     (rest lst)\n                     (concat result [elem]))))))", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 30, "code": "(fn Compress-a-Sequence\n  [lst]\n  (if (empty? lst)\n    ()\n    (if (empty? (rest lst))\n      lst\n      (if (= (first lst) (first (rest lst)))\n        (Compress-a-Sequence (rest lst))\n        (cons (first lst) (Compress-a-Sequence (rest lst)))))))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "59e8041be4b0249b72820721"}, {"problem": 30, "code": "(fn \n  [list]\n  (loop [i list res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn [accum x]\n            (if (= (last accum) x)\n              accum\n              (conj accum x)))\n          []\n          xs))", "user": "59e0f839e4b08badc2a0c502"}, {"problem": 30, "code": "(fn compress\n  [lst]\n  (if (empty? lst)\n    ()\n    (if (= (first lst) (first (rest lst)))\n      (compress (rest lst))\n      (cons (first lst) (compress (rest lst))))))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "59e95cafe4b0249b7282074b"}, {"problem": 30, "code": "reduce (fn [acc i] (if (= i (last acc)) acc (conj acc i))) []", "user": "59c8ffe6e4b0a024fb6ae56c"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "59e9f03be4b0249b72820752"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59ea287ee4b0249b72820760"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59ea0944e4b0249b72820758"}, {"problem": 30, "code": "(fn [lst]\n  (map first (partition-by identity lst)))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 30, "code": "(fn compress\n  [lst]\n  (cond\n  (empty? lst) ()\n  (= (first lst) (first (rest lst)))  (compress (rest lst))\n  :else\n  (cons (first lst) (compress (rest lst)))))", "user": "59e68254e4b0249b728206fc"}, {"problem": 30, "code": "(fn [seq]\n  (reduce\n    (fn [acc elm]\n      (if (= (last acc) elm) acc (concat acc [elm])))\n    (take 1 seq)\n    seq))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 30, "code": "#(reduce (fn [xs x]\n           (if (= x (peek xs))\n             xs\n             (conj xs x)))\n         []\n         %)", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 30, "code": "#((fn f\n   ([x]\n     (f x '()))\n   ([x r]\n     (if (empty? x)\n       (reverse r)\n       (if (not= (first x) (second x))\n         (recur (rest x) (into r (list (first x))))\n         (recur (rest x) r))))) (apply list %))", "user": "59ea85e4e4b0249b72820767"}, {"problem": 30, "code": "(fn removecons [lst]\n  (loop [lst lst\n         res ()]\n    (cond\n      (empty? lst) (reverse res)\n      (= (first lst) (first res)) (recur (rest lst)res)\n      :default (recur (rest lst) (cons (first lst) res)))))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 30, "code": "(fn [lst] (mapcat set (#(partition-by identity %1) lst)))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "59ed01ede4b0249b7282079a"}, {"problem": 30, "code": "#(reduce\n  (fn [a b]\n    (if \n     (= (last a) b)\n     a\n     (conj a b)))\n  [] %)", "user": "59e32913e4b08badc2a0c52c"}, {"problem": 30, "code": "(fn b[a] \n  (if (< (count a) 2) a\n     (if (= (first a)(second a))\n       (b (rest a))\n       (cons (first a) (b (rest a))))))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 30, "code": "(fn [args]\n    (reduce (fn [coll n]\n              (if (= (peek coll) n)\n                coll\n                (conj coll n))) [] args))", "user": "5683fcafe4b0945ebc182aa8"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "59d87190e4b0ef0a1e9b5c42"}, {"problem": 30, "code": "(fn fuck [sq]\n  (loop [raw-seq sq pseq '() index 0 last-char 0]\n    (cond\n      (>= index (count raw-seq)) pseq\n      (= last-char (nth raw-seq index)) (recur sq pseq (+ index 1) last-char) \n      :else (recur sq (concat pseq [(nth raw-seq index)]) (+ index 1) (nth raw-seq index)))\n    ))", "user": "5831846ae4b051871117c02c"}, {"problem": 30, "code": "(fn [coll] (map first(partition-by identity coll)))", "user": "57f2bf56e4b0511f1d294df8"}, {"problem": 30, "code": "(fn compress [xs]\n  (cond\n   (and (> (count xs) 1) (= (first xs) (second xs))) (compress (rest xs))\n   (> (count xs) 1) (cons (first xs) (compress (rest xs)))\n   :else xs))", "user": "59ee6801e4b0966464fe6a1f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "572fdecae4b0cd1946bd0f9e"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (= (last %1) %2) %1  (conj %1 %2)) [] s ))", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 30, "code": "(fn sdp [x](let [sdp*(fn [z x*] (if (not= (last z) x*) (conj z x*) z))] (reduce sdp* [] x)))", "user": "59f4d0e0e4b0966464fe6ab9"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "59f66d6fe4b0966464fe6ad2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59f3a4d1e4b0966464fe6a9f"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i)))))))", "user": "590aaa78e4b047aa04b199c0"}, {"problem": 30, "code": "(fn [s] \n  (reduce \n   (fn [res el] \n     (if \n       (= (last res) el)\n       res\n       (conj res el) \n       ))\n   []\n   s))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 30, "code": "(fn compress [s]\n  (->> s\n    (partition 2 1)\n    (filter #(not= (first %) (last %)))\n    (map last)\n    (into [(first s)])\n    )\n  )", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "59f8b925e4b0ca45a743a327"}, {"problem": 30, "code": "(fn bla\n  ([ seq1 ] (bla seq1 []))\n  ([ seq1 acc ]\n   \t(if-not(first seq1)\n      \tacc\n      \t(if (= (last acc) (first seq1))\n            (bla (rest seq1) acc)\n            (bla (rest seq1) (conj acc (first seq1)))))))", "user": "59f90e6ae4b0ca45a743a337"}, {"problem": 30, "code": "(fn [x]\n  \n\t;(dedupe x) \n    (map first (partition-by identity x))\n  \n  )", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (not= (last x) y) (conj x y) x)) [] %)", "user": "5628f33ce4b00e49c7cb47f3"}, {"problem": 30, "code": "reduce (fn [r x] (if (= (last r) x) r  (conj r x)  )) []", "user": "59f75d2ae4b0966464fe6aed"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []\n;; #(map first (partition-by identity %))", "user": "59f590ade4b0966464fe6ac1"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (not= (peek %1) %2)\n             (conj %1 %2)\n             %1)\n          [] s))\n\n;; adereth's solution is so much more elegant:\n;; #(map first (partition-by identity %))", "user": "59a080e3e4b0871e7608b837"}, {"problem": 30, "code": "(comp reverse\n      (partial reduce\n               (fn [memo el]\n                   (if (= (first memo) el)\n                     memo\n                     (conj memo el)))\n                 '()))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 30, "code": "(fn compress\n    [coll]\n    (let [result (loop [compressed [] remaining coll]\n                   (if (empty? remaining)\n                     compressed\n                     (recur (if (= (last compressed) (first remaining))\n                              compressed\n                              (conj compressed (first remaining)))\n                            (rest remaining)\n                            )\n                     )\n                   )\n          ]\n      (if (string? coll)\n        (apply str result)\n        result\n        )\n      )\n    )", "user": "59fa5fe0e4b0ca45a743a35f"}, {"problem": 30, "code": "#(loop [x % y []]\n                 (cond (empty? x) y\n                       (empty? (rest x)) (conj y (first x))\n                       (= (first x) (second x)) (recur (rest x) y)\n                       :else (recur (rest x) (conj y (first x)))))", "user": "59fea630e4b01bb0ae8afd10"}, {"problem": 30, "code": "#(reduce \n  (fn [l e]\n    (if (= e (first l))\n      l\n      (conj l e))) () (reverse %))", "user": "59fedc26e4b01bb0ae8afd17"}, {"problem": 30, "code": "(fn f [x]\n  (if (empty? x)\n    nil\n    (lazy-seq\n     (cons (first x) (f (drop-while #(= (first x) %) x))))))", "user": "5a012a43e4b01bb0ae8afd42"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "59e5b6a1e4b08badc2a0c55b"}, {"problem": 30, "code": "(fn [collection]\n  (nth\n   (reduce\n    #(let [[comparing-element result] %1]\n       (if (= comparing-element %2)\n         %1\n         [%2 (conj result %2)]))\n    [nil []]\n    collection)\n   1))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "598588f2e4b021a7a535fe65"}, {"problem": 30, "code": "#(reduce (fn [acc itm] (if (= (last acc) itm) acc (conj acc itm))) [] %)", "user": "5a01d8f6e4b01bb0ae8afd53"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56fcd9dfe4b08d47c977819e"}, {"problem": 30, "code": "#(reduce \n  (fn [uniqueList nextEl] \n    (if (= (last uniqueList) nextEl) \n      uniqueList \n      (conj (vec uniqueList) nextEl))) '() %)", "user": "588fd085e4b00487982d51c0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59df2b8ee4b01968742fed87"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= (last x) y) x (concat x [y]))) [] %)", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 30, "code": "(fn [coll]\n  (->> coll\n    (partition-by identity)\n    (map first)))", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 30, "code": "#(mapcat distinct (partition-by (fn [x] (identity x)) %))", "user": "59fa5773e4b0ca45a743a35e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a075e73e4b01bb0ae8afdd9"}, {"problem": 30, "code": "(fn [s] \n  (reduce (fn [s e] \n            (if (= (last s) e)\n              s\n              (conj s e))) [] s))", "user": "5a08053fe4b01bb0ae8afde7"}, {"problem": 30, "code": "#(reduce (fn[v c]( if(= c (last v)) v (conj v c) )) [] %)", "user": "59f78761e4b0966464fe6af5"}, {"problem": 30, "code": "(fn [s]\n  (reduce\n   #(if-not (= (last %1) %2)\n    (conj %1 %2)\n    %1)\n   [] s))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 30, "code": "#(loop [se % res []]\n  (if (empty? se) \n    res\n  (recur (rest se)\n         (if (= (first se) (last res))\n           res\n           (conj res (first se))))))", "user": "59f58103e4b0966464fe6ac0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a096063e4b01bb0ae8afe0b"}, {"problem": 30, "code": "(fn [sequence] (map first (partition-by identity sequence)))", "user": "59f9c111e4b0ca45a743a349"}, {"problem": 30, "code": "(fn myfunc\n   ([x] (myfunc x '()))\n   ([x, y]\n    (do (println x \" - \" y)\n        (if (empty? x)\n          \n           (reverse y)\n\n          (recur (rest x)\n                 (if (= (first x) (first y))\n                   y\n                   (conj y (first x))\n                   )\n\n                 )\n          )\n        ))\n   )", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 30, "code": "(fn [xs]\n    (reduce\n      (fn [l v]\n        (if (= v (last l))\n          l\n          (conj l v)))\n      [] xs))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59f820d9e4b0ca45a743a316"}, {"problem": 30, "code": "reduce (fn [acc x] (if (= (last acc) x) acc (conj acc x))) []", "user": "5a062e07e4b01bb0ae8afdc5"}, {"problem": 30, "code": "#(reduce (fn [acc x] \n            (if (= 0 (compare (last acc) x))\n                acc\n                (conj acc x)))\n              [] %)", "user": "5a07fefee4b01bb0ae8afde5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 30, "code": "(fn [col] (map first (partition-by identity col)))", "user": "5a06c154e4b01bb0ae8afdce"}, {"problem": 30, "code": "(fn [y] (reverse (reduce (fn [r x] (if (= (first r) x) r (conj r x))) '() (seq y))))", "user": "5a0ba67be4b04bbd27e6d997"}, {"problem": 30, "code": "#(reduce (fn [r x] (if (= (last r) x) r (conj r x))) [] %)", "user": "5a0a04eee4b0eab8c0448935"}, {"problem": 30, "code": "(fn uniq [v]\n  (loop [res [(first v)] r (vec (rest v))]\n    (if (empty? r) res\n                   (if (not= (last res) (first r))\n                     (recur (conj res (first r)) (rest r))\n                     (recur res (rest r))))))", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 30, "code": "(fn [list]\n  (reverse (reduce (fn [result a] (if (= a (first result)) result (cons a result))) '() (seq list))))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59f2af64e4b0966464fe6a87"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [l v]\n            (if (= v (last l))\n              l\n              (conj l v)))\n          []\n          s))", "user": "54497569e4b032a45b8693d2"}, {"problem": 30, "code": "reduce (fn [acc item] (if (= (last acc) item)\n                        acc\n                        (concat acc [item]))) '()", "user": "5a135573e4b0ff51aa4b3180"}, {"problem": 30, "code": "(fn compress [coll]\n     (reverse (loop [sq (seq coll)\n                     compressed '()]\n                (if (empty? sq)\n                  compressed\n                  (recur (rest sq)\n                         (if (= (first sq)\n                                (second sq))\n                           compressed\n                           (cons (first sq) compressed)))))))", "user": "59edc518e4b0966464fe6a08"}, {"problem": 30, "code": "#(reverse (reduce (fn [a b] (if (not (= (first a) b)) (conj a b) a)) '() %))", "user": "5830377ee4b051871117c004"}, {"problem": 30, "code": "#(reduce (fn[x y](if(not= (last x) y) (conj x y) x )) [] %)", "user": "55129667e4b06e50f9beb1ac"}, {"problem": 30, "code": "#(reverse (reduce (fn [x y] (if (not= (first x) y) (conj x y) x)) (list (first %)) (rest %)))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 30, "code": "(fn [aseq] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] aseq))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 30, "code": "(fn [input] \n  (reduce \n   #(if \n      (not (= (last %1) %2))\n      (conj %1 %2)\n      %1\n      )\n   []\n   input\n   )\n)", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 30, "code": "(fn compress\n  [xs]\n  (if (< (count xs) 2)\n    xs\n    (let [f (first xs)\n          s (first (rest xs))\n          r (rest (rest xs))]\n      (if (= f s)\n        (compress (cons s r))\n        (cons f (compress (cons s r)))))))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 30, "code": "(fn [s]\n  (reduce\n   (fn [prev cur]\n     (if (= (last prev) cur)\n       prev\n       (concat prev [cur])))\n   []\n   s))", "user": "5a144fd8e4b0ff51aa4b319a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (= (last %1) %2)\n             %1\n             (conj %1 %2))\n          [] s))", "user": "580a0783e4b0a837a8b30d2c"}, {"problem": 30, "code": "(fn t [x] (->> x (reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) [])(into '()) (reverse) (#(if (string? x) (apply str %) (identity %))) ))", "user": "59135c11e4b0163c97b36f02"}, {"problem": 30, "code": "#(reduce (fn [acc v] \n           (if-not (= v (last acc))\n             (conj acc v) acc)\n           ) [] %)", "user": "5a18488ee4b0ff51aa4b31e5"}, {"problem": 30, "code": "(fn [coll] \n  (reduce #(if (= (last %1) %2) \n             %1 \n             (conj %1 %2))\n          [] coll))", "user": "5a0c822fe4b04bbd27e6d9b0"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (not= (last x) y) (conj x y) x)) [] %)", "user": "5a16da30e4b0ff51aa4b31cc"}, {"problem": 30, "code": "(fn rem-dups [l]\n  (cond\n   (empty? (rest l)) [(first l)]\n   (= (first l) (first (rest l))) (rem-dups (rest l))\n   true (cons (first l) (rem-dups (rest l)))))", "user": "5a1e93bee4b0ff51aa4b3270"}, {"problem": 30, "code": "#(loop [head (first %)\n        tail (rest %)\n        next (first tail)\n        result []]\n   (if (empty? tail)\n     (conj result head)\n     (do (println tail)\n         (recur (first tail)\n                (rest tail)\n                (first (rest tail))\n                (if (not= head next)\n                  (conj result head)\n                  result)))))", "user": "590b8607e4b047aa04b199db"}, {"problem": 30, "code": "(fn [xs] \n\t(reduce (fn [acc x]\n\t\t(if (= x (last acc))\n\t\t\tacc\n\t\t\t(conj acc x)))\n\t[]\n\txs\t))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 30, "code": "(fn [v] (loop [in v out []] (if (empty? in) out (recur (rest in) (if (= (first in) (last out)) out (conj out (first in)))))))", "user": "57a499dae4b0a966079561e6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59690e79e4b069c0a1a197e0"}, {"problem": 30, "code": "(fn [y] (let [fx (fn [x a] (if (not (= (last x) a)) (conj x a) x))] \n          (reduce fx [] y)))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 30, "code": "(fn removeDups [x] \n  (if (empty? x) \n    x \n    (if \n      (=(first x)(second x)) \n      (removeDups  (rest x))\n      (conj \n       (removeDups (rest x))       \n       (first x)\n      )\n    )\n  )\n)", "user": "5a05a807e4b01bb0ae8afdb8"}, {"problem": 30, "code": "(fn [l]\n  (map first (partition-by identity l)))", "user": "5a1ef970e4b0ff51aa4b327d"}, {"problem": 30, "code": "(fn [s] \n  (reduce #(if (not= (last %1) %2)\n              (conj %1 %2)\n              %1) [] s))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 30, "code": "(fn [raw-input]\n  (loop [input raw-input output [] current nil]\n    (if (empty? input)\n      output\n      (if (= current (first input))\n        (recur (rest input) output current)\n        (recur (rest input) (conj output (first input)) (first input))))))", "user": "5a21d34ce4b0ff51aa4b32b9"}, {"problem": 30, "code": "(fn asd [x]\n\t(mapcat #(take 1 %) (partition-by identity x))\n)", "user": "5a214798e4b0ff51aa4b32aa"}, {"problem": 30, "code": "(fn [in] (keep-indexed #(if (or (= %1 (count in)) (= (get in %1) (get in (inc %1)))) nil %2) in))", "user": "5a208195e4b0ff51aa4b32a3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a1149ace4b04bbd27e6da26"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a1dd5b4e4b0ff51aa4b3260"}, {"problem": 30, "code": "#(reduce (fn [acc x]\n           (if (= (last acc) x)\n             acc\n             (conj acc x))) [] %)", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 30, "code": "(fn [x]\n  (loop [s x\n         l \"\"\n         result []]\n    (if-not (nil? (first s))\n    \t(if (= (first s) l)\n      \t\t(recur (rest s) l result)\n      \t\t(recur (rest s) (first s) (conj result (first s))))\n    \tresult)))", "user": "5a23cabce4b0ff51aa4b32df"}, {"problem": 30, "code": "reduce (fn [acc x] (if (= x (last acc)) acc (conj acc x))) []", "user": "5a19d181e4b0ff51aa4b3207"}, {"problem": 30, "code": "(fn [in] (map first (partition-by identity in)))", "user": "5a249cfee4b07f18be40aa12"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5a21c3f9e4b0ff51aa4b32b7"}, {"problem": 30, "code": "(fn [input-seq]\n  (loop [input input-seq\n         result ()\n         lastitem ()]\n    (if (empty? input)\n      result\n      (if (= (first input) lastitem)\n        (recur (rest input) result lastitem)\n        (recur (rest input) (concat result (list (first input))) (first input))\n        ))))", "user": "5a2185a4e4b0ff51aa4b32b0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a2960fde4b07f18be40aa78"}, {"problem": 30, "code": "(fn [s]\n  (loop [n (conj [] (first s))\n         o (rest s)]\n    (if (empty? o)\n      n\n      (if (= (last n) (first o))\n        (recur n (rest o))\n        (recur (conj n (first o)) (rest o))))))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 30, "code": "#( map first (partition-by identity %))", "user": "5a2834dfe4b07f18be40aa64"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 30, "code": "(fn my-dedupe\n         ([x] (reverse (my-dedupe x nil)))\n         ([x acc] (if (empty? x) acc\n                      (my-dedupe (rest x) (if (= (first x) (first acc))\n                                            acc\n                                            (conj acc (first x)))))))", "user": "5a29d658e4b09cafd31c7f29"}, {"problem": 30, "code": "(fn scoop [vals]\n  (reverse (reduce\n             (fn [a, v] (if\n                          (= v (first a))\n                          a\n                          (cons v a)))\n             '()\n             vals)))", "user": "5a2a0cb6e4b09cafd31c7f2c"}, {"problem": 30, "code": "(fn [l] (loop [l l result []]\n          (if\n            (empty? l) result\n            (recur (rest l) (if (and\n                                 (not (empty? result))\n                                 (= (first l) (last result)))\n                                          result\n                                          (conj result (first l)))))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 30, "code": "(fn [x] \n  ( let [data (reverse x)]\n  (loop [ se (next data) new-se (list (first data) )]\n    ( if (empty? se)\n      new-se\n      (do \n       (if (=(first se)(first new-se))\n         (recur ( next se) new-se)\n         (recur (next se) (cons (first se) new-se))))))) )", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a2e39fce4b09cafd31c7f77"}, {"problem": 30, "code": "(fn [coll] (:result (reduce \n            (fn [acc curr] \n              (if (= (:last acc) curr)\n                acc\n                  (assoc acc :last curr :result (concat (:result acc) (seq [curr])))))\n            {:result '() :last nil}\n                   coll)))", "user": "59a5b3f4e4b066c664927d69"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a1bec89e4b0ff51aa4b322f"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "58f0c5a3e4b056aecfd47df8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a2185c6e4b0ff51aa4b32b1"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5a285a38e4b07f18be40aa67"}, {"problem": 30, "code": "(fn [l]\n    (if (empty? l)\n        l\n        (loop [x (rest l) y (list (first l))]\n              (if (empty? x)\n                  (reverse y)\n                  (if (= (first x) (first y))\n                      (recur (rest x) y)\n                      (recur (rest x) (cons (first x) y)))))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 30, "code": "(fn squish\n  [[head & tail]]\n  (if (empty? tail)\n    (conj tail head)\n    (if (= head (first tail))\n      (squish tail)\n      (conj (squish tail) head))))", "user": "5a346d73e4b0ddc586f153c8"}, {"problem": 30, "code": "(fn [x] (conj (vec (map first (filter #(not= (first %) (second %)) (partition 2 1 (vec x))))) (last x)))", "user": "5a2cfa85e4b09cafd31c7f61"}, {"problem": 30, "code": "(fn compress [x]\n  (if (seq x)\n    (if (= (first x) (first (rest x)))\n      (compress (rest x))\n      (cons (first x) (compress (rest x))))\n    x))", "user": "5a2e638be4b09cafd31c7f7a"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= (peek x) y) x (conj x y))) [] %1)", "user": "5658c357e4b00d3155796111"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a34de78e4b0ddc586f153d0"}, {"problem": 30, "code": "(fn [s]\n    (loop [els s\n           result []]\n        (if (empty? els)\n            result\n            (recur\n                (rest els)\n                (if (= (first els) (last result))\n                    result\n                    (conj result (first els)))))))", "user": "510d2a99e4b078ea71921130"}, {"problem": 30, "code": "(fn compress [list]\n  (cond\n    (= (count list) 1) list\n    (= (first list) (nth list 1)) (compress (rest list))\n    :else (concat [(first list)] (compress (rest list)))\n    )\n  )", "user": "5a39e36ce4b001c08efc0cbc"}, {"problem": 30, "code": "(fn dedup\n  [l]\n  (cond\n    (empty? l) l\n    (= 1 (count l)) l\n    (= 2 (count l)) (let [[x y] l]\n                      (if (= x y) (list x) l))\n    :else (let [[x y & rest] l]\n            (if (= x y)\n              (recur (cons y rest))\n              (cons x (dedup (cons y rest)))))))", "user": "5a3b5cfde4b001c08efc0cd4"}, {"problem": 30, "code": "reduce (fn [old element] (if (= element (peek old)) old (conj old element))) []", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 30, "code": "(fn [args]\n    (loop [acc [] s args el nil]\n       (if (empty? s)\n           (remove nil? acc)\n           ; acc\n           (recur (\n                    conj acc \n                         (if (= (first s) el) \n                                nil\n                                (first s) \n                                  )\n                  )\n                  (rest s) \n                  (first s) \n                 )\n\n    ))\n  )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59dfb8dbe4b08badc2a0c4da"}, {"problem": 30, "code": "reduce (fn [acc x] (if (or (= [] acc) (not= x (last acc))) (conj acc x) acc)) []", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 30, "code": "(fn [s]\n  (letfn [(inject [s t]\n            (if (= (last s) t)\n              s\n              (conj s t)))]\n  (loop [r [], s s]\n    (if (empty? s)\n      r\n      (recur (inject r (first s)) (rest s))\n      ))))", "user": "5a3d7afae4b0447ef91cc5a6"}, {"problem": 30, "code": "#(reduce (fn [a  b]\n           (if (not= (last a) b)\n             (conj a b)\n             a))\n         []\n         %)", "user": "52281e1ee4b0186687e23a69"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a3d33b3e4b001c08efc0cef"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 30, "code": "reduce (fn [acc elem] (if (= (last acc) elem) acc (conj acc elem))) []", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 30, "code": "#(loop [result [] coll %1]\n   (cond\n     (empty? coll) result\n     (= (first coll) (second coll)) (recur result (rest coll))\n     :else  (recur (conj result (first coll)) (rest coll))))", "user": "58a6806ee4b01a0c0b23292f"}, {"problem": 30, "code": "(fn compress-sequence [xs]\n  (loop [remaining xs\n         compressed []]\n    (if (empty? remaining)\n      compressed\n      (let [current (first remaining)\n            [_ tail] (split-with #(= current %) remaining)]\n        (recur tail (conj compressed current))))))", "user": "59f7f55de4b0ca45a743a313"}, {"problem": 30, "code": "(fn cs [s]\n  (reduce\n   #(if (= (last %1) %2)\n      %1\n      (conj %1 %2)\n     )\n   []\n   s)\n)", "user": "5a401a7de4b0447ef91cc5c5"}, {"problem": 30, "code": "#(reverse (reduce (fn [coll x] (if (= (first coll) x) coll (cons x coll))) '() %))", "user": "5a342188e4b0ddc586f153bd"}, {"problem": 30, "code": "reduce #(if-not (= (last %1) %2) \n           (conj %1 %2)\n           %1) \n           []", "user": "5a40eb64e4b0447ef91cc5d8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 30, "code": "(fn [some-seq]\n  (let [removed\t(reduce \n        \t\t  (fn [new-seq item]\n          \t\t    (if (= item (first (take-last 1 new-seq)))\n            \t      new-seq\n                      (conj new-seq item))) \n      \t\t\t  [] \n                  some-seq)]\n    (if (= java.lang.String  (type some-seq))\n      (apply str removed)\n      removed)))", "user": "5a35d515e4b0ddc586f153e1"}, {"problem": 30, "code": "(fn compress\n  [coll]\n  (reduce (fn\n    [acc current]\n    (let [previous (last acc)]\n      (cond \n        (= previous current) acc\n        :else (concat acc [current]))))\n      '() coll))", "user": "5a429e40e4b0447ef91cc5f9"}, {"problem": 30, "code": "#(->>\n   (partition-by identity %)\n   (map first)\n   )", "user": "5a43347ee4b0447ef91cc603"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a0e9a54e4b04bbd27e6d9ef"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "558843dae4b059ccff29b1f3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a409d77e4b0447ef91cc5d3"}, {"problem": 30, "code": "(fn duplicat2?\n  [l]\n  (let [saring (fn saring [[x & xs]]\n                 (if xs\n                   (if (= x (first xs))\n                     (saring xs)\n                     (conj (saring xs) (first xs)))\n                   '()))]\n    (conj (saring l) (first l))\n    ))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 30, "code": "(fn [s]\n  (loop [s s, res [], der nil]\n    (if (seq s)\n      (if (= (first s) der)\n        (recur (rest s) res der)\n        (recur (rest s) (conj res (first s)) (first s)))\n      res)))", "user": "5a481e05e4b05d388ecb6b64"}, {"problem": 30, "code": "(fn [n]\n  (map first (partition-by identity n)))", "user": "5a47ce68e4b05d388ecb6b5d"}, {"problem": 30, "code": "(fn [seq] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] seq))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a4208dde4b0447ef91cc5ee"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (not (= %2 (last %1)))\n             (conj %1 %2)\n             %1)\n          []\n          s))", "user": "5a37b6dbe4b001c08efc0c88"}, {"problem": 30, "code": "#(reduce (fn [a e] (if (= e (last a)) a (concat a (list e)))) nil %)", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a4e1c81e4b05d388ecb6bb6"}, {"problem": 30, "code": "#(reduce (fn [str1 x] \n  (if (= (last str1) x) str1 (conj str1 x))) [] %)", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 30, "code": "(fn [sq]\n  (loop [s sq tgt []]\n    (if (empty? s)\n      (seq tgt)\n      (recur (drop-while #(= % (first s)) s) (conj tgt (first s))))))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 30, "code": "(fn consecutive-dedup\n  [myseq]\n  (loop [tmpseq myseq result [] c 0]\n    (if (empty? tmpseq) result\n                        (let [a (first tmpseq)]\n                          (if (= a c)\n                            (recur (rest tmpseq) result c)\n                            (recur (rest tmpseq) (conj result a) a)\n                            )))\n    )\n  )", "user": "5a4cbba1e4b05d388ecb6b98"}, {"problem": 30, "code": "(fn [val] (reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] val))", "user": "5a4d656fe4b05d388ecb6ba9"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 30, "code": "#(let [f1 (fn [x y] (if (= (last x) y) x (conj x y)))]\n   (reduce f1 [] (seq %))\n   )", "user": "5a535572e4b05d388ecb6c0b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a546344e4b05d388ecb6c27"}, {"problem": 30, "code": "(fn [s]\n  (->> s\n       (partition-by identity)\n       (map first)))", "user": "5a4caa20e4b05d388ecb6b94"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 30, "code": "(fn [xs] \n  (reduce \n   #(if (= %2 (last %1))\n      %1\n      (concat %1 [%2])\n      )\n   []\n   xs\n   )\n  )", "user": "5a55114ae4b05d388ecb6c37"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58d4d864e4b03c36ff7e594c"}, {"problem": 30, "code": "(fn [inc-list]\n  (loop [item-to-check (first inc-list), data (rest inc-list), result []]\n    (if (empty? data)\n      (conj result item-to-check)\n      (recur \n        (if (= item-to-check (first data)) item-to-check (first data))\n        (rest data)\n        (if (= item-to-check (first data)) result (conj result item-to-check))\n      )\n    )\n  )\n)", "user": "5a4dbc97e4b05d388ecb6bae"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 30, "code": "(fn [x]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] (seq x))\n)", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 30, "code": "(fn [s] \n  (reduce \n   (fn [x y] \n     (if (= (last x) y) \n       x\n       (conj x y))) \n   [] s))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 30, "code": "#(reverse (:seq\n  (reduce\n    (fn [state next]\n        (if (= next (:prev state))\n            state\n            {:seq (conj (:seq state) next)\n             :prev next}))\n    {:seq nil :prev nil}\n    %)))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a591d04e4b05d388ecb6c90"}, {"problem": 30, "code": "(fn [xs] (first (reduce (fn [acc x] (if (= (second acc) x) acc (list (conj (first acc) x) x))) (list [] nil) xs)))", "user": "5a5800e1e4b05d388ecb6c76"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a40bd29e4b0447ef91cc5d6"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5a584ca2e4b05d388ecb6c7d"}, {"problem": 30, "code": "reduce (fn [m k] (if (= k (last m)) m (conj m k))) []", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 30, "code": "(fn\n  [coll]\n  (loop [compressed [] uncompressed coll]\n    (if (empty? uncompressed)\n      compressed\n      (recur\n        (conj compressed (first (take-while #(= (first uncompressed) %) uncompressed)))\n        (drop-while #(= (first uncompressed) %) uncompressed)))))", "user": "5a5be4a6e4b0512ff01cd910"}, {"problem": 30, "code": "#(reduce (fn [acc x] (if (= x (last acc)) acc (conj acc x))) [] %)", "user": "5a5be1ece4b0512ff01cd90f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "587b8bdee4b01531a375eaff"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "55efc291e4b066087aa9453d"}, {"problem": 30, "code": "(fn [s]\n    (loop [s s\n           e (first s)\n           p ::uninitialized\n           result []]\n      (if (seq s)\n        (recur (next s)\n               (first (next s))\n               e\n               (if (= e p)\n                 result\n                 (conj result e)))\n        result)))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 30, "code": "(fn [coll]\n  (loop [r [] xs coll]\n    (if-let [x (first xs)]\n      (recur (conj r x) (drop-while #(= x %) xs))\n      r)))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 30, "code": "(fn [sequ] (reduce (fn [out in] (if (= (last out) in) out (conj out in))) [] sequ))", "user": "5a5f91d4e4b0512ff01cd94a"}, {"problem": 30, "code": "(fn [x]\n  (remove nil? \n          (concat \n           (list (first x))\n           (map #(if (= % %2)\n                   nil\n                   %2)\n                x (rest x)))))", "user": "5a52f2cbe4b05d388ecb6c06"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "5a5be4ebe4b0512ff01cd912"}, {"problem": 30, "code": "(fn f\n  ([s] (f (rest s) [(first s)]))\n  ([s r] (if (empty? s) r (recur (rest s) (if (= (first s) (last r)) r (conj r (first s)))))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 30, "code": "(fn [x] \n  (map first (partition-by identity x)))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a624129e4b0512ff01cd987"}, {"problem": 30, "code": "(fn [collection]\n  (reduce\n   (fn [%1 %2]\n     (let [prev (if (seq? %1) %1 (list %1))]\n       (concat prev (if (= (last prev) %2) '() (list %2)))))\n   (seq collection)))", "user": "5a59a76fe4b05d388ecb6c98"}, {"problem": 30, "code": "reduce #(if (or (nil? (last %)) (not= (last %) %2)) (conj % %2) %) []", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 30, "code": "#(loop [acc []\n        [head & tail] %]\n   (cond (empty? tail) (conj acc head)\n         (= head (first tail)) (recur acc tail)\n         :else (recur (conj acc head) tail)))", "user": "55952410e4b0c79f6e1db962"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a66e81ee4b0512ff01cd9d3"}, {"problem": 30, "code": "(fn [s]\n  (reverse (reduce (fn [res e] (if (= e (first res)) res (conj res e))) '() s)))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [acc v]\n            (if (= (peek acc) v)\n              acc\n              (conj acc v))) [] coll))", "user": "5a6bf911e4b0512ff01cda4c"}, {"problem": 30, "code": "(fn [in]\n  (let [results\n        (reduce #(if (not= (first %1) %2) (conj %1 %2) %1)\n        \t    '()\n            \t(reverse in))]\n    (if (string? in) (reduce str results) results)))", "user": "55f344afe4b06e875b46ce5a"}, {"problem": 30, "code": "(fn compress\n  [[one two & args :as all]]\n  (println one two args)\n  (if (and two one)\n    (if (not= two one)\n      (conj (compress (rest all)) one)\n      (compress (rest all)))\n    all))", "user": "5a6a32b6e4b0512ff01cda22"}, {"problem": 30, "code": "(fn [s] (loop[s s\n              ret (list (first s))]\n          (if (< 1 (count s))\n            (if (= (first s) (second s))\n              (recur (rest s) ret)\n              (recur (rest s) (conj ret (second s))))\n            (reverse ret))))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 30, "code": "(fn compress-seq [x]\n  (loop [i 0 output []]\n    (if (= i (count x)) output\n        (let [y (nth x i) last-item (last output)]\n          (recur (inc i) (if (and last-item (= last-item y)) output (into [] (conj output y))))))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a625bc2e4b0512ff01cd989"}, {"problem": 30, "code": "(fn [x]\n  (loop [in x out []]\n    (if (= in [])\n      out\n      (recur (rest in) (if (= (first in) (last out)) out (concat out [(first in)]))))))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [new-coll x]\n            (if (= x (last new-coll))\n              new-coll\n              (conj new-coll x))) [] coll))", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 30, "code": "#(let [rev (reverse %)]\n   (reduce (fn [acc x] (if (= (first acc) x) acc (conj acc x))) (list (first rev)) (rest rev)))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "57a6552ce4b0a96607956208"}, {"problem": 30, "code": "#(map first\n  (partition-by identity %)\n  )", "user": "5a488c09e4b05d388ecb6b68"}, {"problem": 30, "code": "(comp reverse reduce) (fn\n                         [c1,c2]\n                         (if (= (first c1) c2) (identity c1) (conj c1 c2) )) '()", "user": "5a71c89ee4b0512ff01cda93"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a6dffe1e4b0512ff01cda66"}, {"problem": 30, "code": "(fn [xs] (->> xs\n                (partition-by identity)\n                (map first)))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 30, "code": "(fn [s]\n  (second (reduce (fn [[l r] x] [x (if (= l x) r (conj r x))]) [nil []] s)))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a71e7c9e4b0512ff01cda95"}, {"problem": 30, "code": "(fn [collec] (reverse (reduce (fn [pre nexte] (if (distinct? (first pre) nexte) (conj pre nexte) pre))  '() collec )))", "user": "5a634ff0e4b0512ff01cd995"}, {"problem": 30, "code": "#(map first (partition-by identity  %))", "user": "5a6afb1de4b0512ff01cda2f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a796f7fe4b03baeef9276bb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a721047e4b0512ff01cda97"}, {"problem": 30, "code": "(fn remove-consecutive [coll]\n  \"Removes consecutive elements from a collection\"\n  (cond\n    (and (coll? coll) (empty? coll)) '()\n    (= (first coll) (first (rest coll))) (remove-consecutive (rest coll))\n    :else (cons (first coll) (remove-consecutive (rest coll)))))", "user": "5a786f6be4b013a48d39976e"}, {"problem": 30, "code": "(fn [s]\n  (loop [s s, res []]\n    (if (seq s)\n      (if (= (first s) (last res))\n        (recur (rest s) res)\n        (recur (rest s) (conj res (first s))))\n      res)))", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 30, "code": "(fn [[f & r]] (reduce (fn [b i] (if (= (last b) i) b (conj b i))) [f] r))", "user": "5a7b363ae4b03baeef9276d9"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5a778224e4b013a48d399761"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 30, "code": "(fn nub\n  [xs] (reverse\n        (reduce #(if (= (first %1) %2)\n                   %1\n                   (cons %2 %1))\n                () xs)))", "user": "5a6af351e4b0512ff01cda2e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a7cee73e4b03baeef9276f2"}, {"problem": 30, "code": "(fn [s]\n   (reduce #(if (not= (last %1) %2)\n              (conj %1 %2)\n              %1\n              ) [] s)\n   )", "user": "5a80b934e4b00b71e582a05b"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "58d9772de4b0a4d5acaab63c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a7ff79ce4b00b71e582a046"}, {"problem": 30, "code": "#(reverse (reduce (fn [res h] (if (= (first res) h) res (conj res h))) '() %))", "user": "5a7deab5e4b03baeef927703"}, {"problem": 30, "code": "(fn [a] (map #(first %) (partition-by identity a)))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 30, "code": "#(reverse ( reduce (fn[acc c](if (= (first acc) c)  acc (cons c acc))) () %))", "user": "5a80ad4be4b00b71e582a058"}, {"problem": 30, "code": "(fn remove-duplicates [coll] \n  (if (empty? coll)\n    (empty (list))\n    (if (= (first coll) (second coll))\n      (remove-duplicates (next coll))\n      (conj (remove-duplicates (next coll)) \n            (first coll)))))", "user": "5a7ba4bbe4b03baeef9276e5"}, {"problem": 30, "code": "(fn compress \n  ([seq]\n   (compress `(~(last seq)) (butlast seq)))\n  ([res seq]\n   ;(pprint [res seq])\n   (if-let [lastelem (last seq)]\n     (if (= lastelem (first res))\n       (compress res (butlast seq))\n       (compress (cons lastelem res) (butlast seq)))\n     res)))", "user": "5a813b90e4b00b71e582a065"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58eed5b7e4b056aecfd47db8"}, {"problem": 30, "code": "reduce (fn [x y] (if (not= (str (last x)) (str y)) (conj x (if (char? y) (str y) y)) x)) []", "user": "5a84cf8de4b00b71e582a095"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a86ad84e4b05369db4d249c"}, {"problem": 30, "code": "(fn compress [sq]\n  (loop [[x & xs] sq\n         result []]\n    (if (nil? xs)\n      (if (= x (last result)) result (conj result x))\n      (recur xs (if (= x (last result)) result (conj result x)))\n      )\n    )\n  )", "user": "5a388675e4b001c08efc0ca2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a779197e4b013a48d399763"}, {"problem": 30, "code": "(fn [x]                                                                  \n    (reduce                                                                \n      (fn [acc cur]                                                        \n        (if (= (last acc) cur)                                             \n          acc                                                              \n          (conj acc cur)                                                   \n        )                                                                  \n      )                                                                    \n      [] (seq x)                                                           \n    )                                                                      \n  )", "user": "59021fede4b0438e51c2d04d"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5a853662e4b00b71e582a09e"}, {"problem": 30, "code": "(fn [s]\n  (map first (partition-by identity s)))", "user": "5a75da49e4b0512ff01cdacf"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 30, "code": "(fn compress [text]\n  (loop [acc [] input text last nil]\n    (if (nil? (first input))\n      acc\n      (if (= (first input) last)\n        (recur acc (rest input) last)\n        (recur (concat acc [(first input)]) (rest input) (first input))\n      )\n    )\n  )\n)", "user": "5a8e9fb5e4b05369db4d2529"}, {"problem": 30, "code": "(fn [xs]\n   (loop [xs xs\n          ys '()]\n     (cond\n       (empty? xs) (reverse ys)\n       (=  (first xs) (second xs)) (recur (rest xs) ys)\n       (not= (first xs) (second xs)) (recur (rest xs) (conj ys (first xs))))))", "user": "5a8bc2a1e4b05369db4d24ef"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5a71a811e4b0512ff01cda92"}, {"problem": 30, "code": "#(->> %\n  (partition-by identity)\n  (map first))", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58c71509e4b021aa9917ed6e"}, {"problem": 30, "code": "(fn [v] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] v))", "user": "51421cd5e4b0b50abeb46b2c"}, {"problem": 30, "code": "(fn remove-duplicates [v] \n  (if \n    (empty? v) v\n    (cons (first v) (remove-duplicates (drop-while #(= (first v) %) v) ))\n    )\n  )", "user": "5a8d55a8e4b05369db4d2514"}, {"problem": 30, "code": "(fn [s] (map #(first %) (partition-by identity s)))", "user": "5a7da832e4b03baeef9276fc"}, {"problem": 30, "code": "(fn [x]\n    (let [last (atom nil)\n          test (fn [y]\n                 (let [v @last]\n                   (reset! last y)\n                   (= v y))) ]\n      (remove test x)           \n      ))", "user": "5a7460a0e4b0512ff01cdaaf"}, {"problem": 30, "code": "(fn un\n  ([li] (un (rest li) (first li) (vector (first li))))\n  ([li x ans] \n   (if (empty? li)\n     ans\n     (if (= x (first li))\n       (un (rest li) x ans)\n       (un (rest li) (first li) (conj ans (first li)))\n       )\n     )\n   )\n  )", "user": "5a90395ce4b05369db4d254a"}, {"problem": 30, "code": "(fn [col]\n  (loop [work col\n         compressed []]\n    (if (empty? work)\n      compressed\n      (recur\n       (rest work)\n       (if (= (str (last compressed)) (str (first work)))\n         compressed\n         (conj compressed (first work)))))))", "user": "5a912080e4b002d099cae6ea"}, {"problem": 30, "code": "(fn remove-dups [xs]\n  (if (seq xs)\n    (let [[x & ys] xs]\n      (cons x\n            (lazy-seq\n             (->> ys\n                  (drop-while (partial = x))\n                  (remove-dups)))))\n    nil))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a9545dbe4b0d174b936c74c"}, {"problem": 30, "code": "(fn [s]\n  (loop [a s ans nil]\n\t(if (empty? a)\n      (reverse ans)\n      (if (and (>= (count a) 2) (= (first a) (second a)))\n               (recur (rest a) ans)\n               (recur (rest a) (conj ans (first a)))))))", "user": "5a962c09e4b0d174b936c765"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a97eaffe4b0d174b936c783"}, {"problem": 30, "code": "#(apply concat (map distinct (partition-by identity %)))", "user": "5a95e50be4b0d174b936c760"}, {"problem": 30, "code": "reduce (fn [r x] (if-not (= (last r) x) (conj r x) r)) []", "user": "5a24735fe4b07f18be40aa11"}, {"problem": 30, "code": "(fn [lst]\n   (loop [l lst r ()]\n      (if (empty? l)\n         (reverse r)\n         (if (= (first l) (second l))\n            (recur (rest l) r)\n            (recur (rest l) (cons (first l) r))))))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a5767f3e4b05d388ecb6c65"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a9457a9e4b0d174b936c734"}, {"problem": 30, "code": "(fn [lst]\n  (let [x (list(first (seq lst)))\n        y (rest (seq lst))]\n    (reverse (reduce (fn [a b] (if (= (first a) b) a (conj a b))) x y))\n  )\n)", "user": "5a984657e4b0d174b936c78a"}, {"problem": 30, "code": "reduce (fn [acc v] (if (= (last acc) v) acc (conj acc v))) []", "user": "5a78cd9ee4b013a48d399777"}, {"problem": 30, "code": "(fn [s]\n  (map first (partition-by identity s)))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 30, "code": "(fn [lst] (map first (partition-by identity lst)))", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 30, "code": "(fn [x]\n  (loop [in (seq x) out '()]\n    (if (empty? in)\n      (reverse out)\n      (if (= (first in) (second in))\n        (recur (rest in) out)\n        (recur (rest in) (conj out (first in)))))))", "user": "56197b47e4b053970a773af8"}, {"problem": 30, "code": "(fn [n]\n  (map first (partition-by identity n)))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 30, "code": "#(reduce (fn [r x] (if (= x (last r)) r (conj r x))) [] %)", "user": "5a984616e4b0d174b936c789"}, {"problem": 30, "code": "reduce (fn [coll e] \n          (if (= (last coll) e)\n            coll\n            (conj coll e))) []", "user": "5971a017e4b01722bebd4c75"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [a b]\n            (if (=(last a) b)\n              a\n              (conj a b))) [] coll ))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 30, "code": "(fn [xs]\n\t(let [[compressed _] (reduce (fn [[result last-elem] y]\n\t\t(if (= last-elem y)\n\t\t\t[result last-elem]\n\t\t\t[(conj result y) y]))\n\t\t[[] nil] xs)]\n\t(seq compressed)))", "user": "52bba119e4b07a9af57922ea"}, {"problem": 30, "code": "(fn compress\n  [lst]\n  \n  (cond\n    (empty? lst)\n    ()\n\n    (= (first lst) (first (rest lst)))\n    (compress (rest lst))\n\n    :else\n    (cons (first lst) (compress (rest lst)))))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 30, "code": "#(map first\n        (partition-by identity %))", "user": "5a94a38ce4b0d174b936c73e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 30, "code": "(fn [c] \n  (->> c\n       (partition-by identity)\n       (map first)))", "user": "5a8ebd9ae4b05369db4d252b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input\n         o [] ]\n\t(if  (not (empty? i))\n\t    (if (not= (first i) (last o))\n        (recur (drop 1 i) (conj o (first i)))\n        (recur (drop 1 i) o))\n     o)))", "user": "59ef5280e4b0966464fe6a2b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a9eaab3e4b0d174b936c807"}, {"problem": 30, "code": "#(map first \n      (partition-by identity %))", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 30, "code": "#(letfn [(dedup [coll] (if (seq coll)\n                         (if (= (first coll) (second coll))\n                           (dedup (rest coll))\n                           (cons (first coll) (dedup (rest coll))))))] (dedup %))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 30, "code": "(fn compress\n  [lst]\n  (if (empty? lst)\n    ()\n    (if (= (next lst) nil)\n      (cons (first lst) (compress (rest lst)))\n      (if (= (first (rest lst)) (first lst))\n        (compress (rest lst))\n        (cons (first lst) (compress (rest lst)))))))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 30, "code": "(fn compress [x]\n  (loop [old x new '()]\n    (if (empty? old)\n      (reverse new)\n      (if (= (first old) (second old))\n        (recur (rest old) new)\n        (recur (rest old) (conj new (first old)))))))", "user": "5a9482b7e4b0d174b936c737"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 30, "code": "(fn\n  [lst]\n  (loop [res (list (first lst))\n         las (first lst)\n         lst (rest lst)]\n\n    (if (empty? lst)\n      (reverse res)\n      (recur (if (= las (first lst))\n               res\n               (cons (first lst) res))\n             (first lst)\n             (rest lst)))))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 30, "code": "(fn compressASequence [coll]\n  (->>\n    (partition-by identity coll)\n    (map first)))", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 30, "code": "( fn my_accum [inp] (loop [xs inp\n                          result []]\n                     (if xs\n                       (let [x (first xs)]\n                         (if (= (last result) x) (recur (next xs) result) (recur (next xs) (conj result x)) ))\n                       result)))", "user": "5a99a540e4b0d174b936c7a3"}, {"problem": 30, "code": "#(map first \n      (partition-by identity %))", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 30, "code": "(fn [vect]\n    (reduce\n      (fn [a b]\n        (if (= (last a) b) a (conj a b))\n        )\n      []\n      vect\n      )\n    )", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5892a5fde4b00487982d5228"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5908882de4b047aa04b19979"}, {"problem": 30, "code": "(fn remLast \n  ([x] (remLast x nil))\n  ([x k] \n   (cond\n     (empty? x) '()\n     (= (first x) k) (remLast (rest x) k)\n     :else (conj (remLast (rest x) (first x)) (first x)))))", "user": "5aa5951ae4b0d174b936c899"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 30, "code": "(fn [lst]\n  (loop [i lst res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 30, "code": "(fn uniq [s]\n  (cond (empty? s) '()\n        (= (first s) (second s)) (uniq (rest s))\n        :default (cons (first s) (uniq (rest s)))))", "user": "583048d9e4b051871117c007"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 30, "code": "#(loop[result [], input %]\n   (cond\n    (empty? input) result\n    (= (last result) (first input)) (recur result (next input))\n    :else (recur (conj result (first input)) (next input))))", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5aa5eebee4b0d174b936c8a1"}, {"problem": 30, "code": "(fn [xs] \n  (reverse\n    (reduce #(if (= (first %1) %2)\n               %1\n               (conj %1 %2))\n            (list (first xs)) (rest xs))))", "user": "588053cae4b0f1effa3b7612"}, {"problem": 30, "code": "(fn del-cons-dups [coll]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 30, "code": "(fn [n] \n  (map first (partition-by identity n))\n  )", "user": "5a99b861e4b0d174b936c7ad"}, {"problem": 30, "code": "(fn [coll]\n  (mapcat set (#(partition-by identity %) coll)))", "user": "5aa2b5dbe4b0d174b936c85b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5aa6bd56e4b0d174b936c8af"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5aa9d445e4b0d174b936c8eb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5aa8e841e4b0d174b936c8d5"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "5a798ac5e4b03baeef9276c0"}, {"problem": 30, "code": "(fn compress [seqi]\n  (loop [elem seqi res '()]\n    (if (seq elem)\n      (if (= (first elem) (first (rest elem)))\n        (recur (rest elem) res)\n        (recur (rest elem) (cons (first elem) res))\n      )\n    (reverse res))))", "user": "5a6cb2eae4b0512ff01cda57"}, {"problem": 30, "code": "(fn [coll]\n  (->>\n   (partition-by identity coll)\n   (map first)))", "user": "5aabd34fe4b073f177442565"}, {"problem": 30, "code": "(fn\n  [seq-to-comp]\n  (loop [seq-to-comp seq-to-comp\n         rsf         nil]\n    (if (empty? seq-to-comp)\n      rsf\n      (recur (butlast seq-to-comp)\n             (if (= (last seq-to-comp) (first rsf))\n               rsf\n               (conj rsf (last seq-to-comp)))))))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 30, "code": "(partial reduce \n (fn [a,b] \n    (if (= (last a) b)\n       a\n       (conj a b)\n    )\n )\n []\n)", "user": "5aad79d9e4b073f177442578"}, {"problem": 30, "code": "(fn [coll]\n  (first (reduce (fn [[acc prev] x]\n    [(cond (= prev x) acc\n           :else (conj acc x))\n     x])\n   [[(first coll)] (first coll)] (rest coll))))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 30, "code": "(fn remove-duplicates [coll]\n  (->>\n    (partition-by identity coll)\n    (map first)\n    )\n  )", "user": "5aada061e4b073f17744257a"}, {"problem": 30, "code": "(fn [coll]\n  (->> (partition 2 1 coll)\n       (filter #(apply not= %))\n       (#(concat (first %) (map second (rest %))))))", "user": "59769d75e4b01722bebd4cdd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "554e4d65e4b00713264bd993"}, {"problem": 30, "code": "(fn f [x]\n  (if (empty? x)\n    '()\n  (if (= (first x) (second x))\n    (f (rest x))\n    (concat (list (first x)) (f (rest x)))\n    )))", "user": "5ab1665de4b073f1774425c0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5aafa441e4b073f17744259a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5aa97ee9e4b0d174b936c8e4"}, {"problem": 30, "code": "(fn [str-me]\n   (map first (filter (fn [[a b]]\n              (not= a b)) (partition-all 2 1 str-me))))", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57023e92e4b08d47c97781da"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1))\n            %1\n            (conj %1 %2))\n\t   []", "user": "5ab16992e4b073f1774425c4"}, {"problem": 30, "code": "(fn removedup\n                 ([coll] (removedup nil coll))\n                 ([prev coll]\n                  (loop\n                   [input coll\n                    result []\n                    pr prev]\n                    (println input result)\n                    (if (empty? input)\n                      result\n                      (let [current (first input)]\n                        (if (or (= pr nil) (not= current pr))\n                          (recur  (rest input) (conj result current) current)\n                          (recur  (rest input) result current)))))))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57047768e4b0b0fb43fd0664"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "5ab564f8e4b073f177442639"}, {"problem": 30, "code": "(fn [i]\n  (let [f (fn [s p o]\n            (if (empty? s)\n              o\n              (let [f (first s)]\n                (recur (rest s) f (if (= p f) o (conj o f))))))]\n    (f i nil [])))", "user": "5aac01d3e4b073f177442567"}, {"problem": 30, "code": "#(seq (reduce (fn [a b] (if (= b (last a)) a (conj a b))) [] %))", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 30, "code": "(fn rcd\n    ([[element & rest :as sequence]]\n      (if (empty? sequence)\n        ()\n        (lazy-seq (cons element (rcd rest element)))))\n    ([[element & rest :as sequence] last]\n      (cond\n        (empty? sequence) nil\n        (= element last) (rcd rest element)\n        :else (lazy-seq (cons element (rcd rest element))))))", "user": "55d354e0e4b0e31453f64a62"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a904de3e4b05369db4d254c"}, {"problem": 30, "code": "(partial reduce (fn [acc el] (if (= (last acc) el) acc (conj acc el))) [])", "user": "5ab5f60be4b073f177442643"}, {"problem": 30, "code": "(fn [s]\n  (loop [s2 s\n        ns []]\n      (let [[f n] s2]\n        (if (nil? f)\n            ns\n            (if (= f n)\n              (recur (rest s2) ns)\n              (recur (rest s2) (conj ns f)))))))", "user": "542c56aae4b0dad94371f2a4"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "5aa2dc5ae4b0d174b936c861"}, {"problem": 30, "code": "(fn [s] \n  (reverse (reduce\n    (fn [acc x](if (= x (first acc))acc (conj acc x)))\n      '() s)))", "user": "5ab8037ae4b073f177442678"}, {"problem": 30, "code": "(fn [coll]\n    (loop [coll coll\n           res []\n           last nil]\n      (if (first coll)\n        (recur (rest coll)\n               (if (not= last (first coll))\n                 (conj res (first coll))\n                 res\n                 )\n               (first coll)\n               )\n        res\n        )\n\n    ))", "user": "5ab575f8e4b073f17744263d"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "5ab93449e4b073f177442692"}, {"problem": 30, "code": ";; first try\n#_(reverse (reduce (fn [xs x] (if (= (first xs) x) xs (cons x xs))) () %))\n\n;; from pcl\n#_(map first (partition-by identity %))\n\n;; avoid reverse\n#(reduce (fn [xs x] (if (= (last xs) x) xs (conj xs x))) [] %)", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 30, "code": "(fn [x] \n  (loop [as x\n         l nil \n         r []] \n    (if (nil? (first as)) \n      r \n      (recur (rest as) (first as) (if (= (first as) l) r (conj r (first as)))))))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ab9eeade4b073f17744269b"}, {"problem": 30, "code": "(fn\n  [xs]\n  (map first (partition-by identity xs)))", "user": "5abc5a09e4b073f1774426e9"}, {"problem": 30, "code": "(fn list-compress [alist]\n  (reduce \n   (fn [carry x]\n     (if (= (last carry) x)\n       carry\n       (conj carry x)))\n   []\n   alist))", "user": "5aaa2dc3e4b0d174b936c8f1"}, {"problem": 30, "code": "(fn [coll]\n  (loop [res [] toProcess coll]\n    (if (empty? toProcess)\n      res\n    (recur (if (not= (last res) (first toProcess)) \n             (conj res (first toProcess))\n             res)\n           (rest toProcess)))))", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 30, "code": "#(loop [in % out []]\n  (if (empty? in)\n    out\n    (recur (rest in) (if (= (last out) (first in))\n                       out\n                       (conj out (first in))))))", "user": "5aa8f753e4b0d174b936c8d9"}, {"problem": 30, "code": "(fn [coll] (conj (vec (map first (filter #(not= (first %) (second %)) (partition 2 1 (vec coll))))) (last coll)))", "user": "5a9db513e4b0d174b936c7f0"}, {"problem": 30, "code": "reduce (fn [acc el]\n            (if (= (last acc) el)\n              acc\n              (concat acc [el])))\n        []", "user": "5a8fd113e4b05369db4d2542"}, {"problem": 30, "code": "#((fn [r s] (if (empty? s) r (recur (concat r (if (= (first s) (first (rest s))) [] [(first s)])) (rest s)))) '() %)", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a47423be4b05d388ecb6b52"}, {"problem": 30, "code": "(fn [s]\n  (loop [e (first s) s_ (rest s) a [(first s)]]\n    (cond (empty? s_) (apply list a)\n          (= e (first s_)) (recur e (rest s_) a)\n          :else (recur (first s_) (rest s_) (conj a (first s_))))))", "user": "5762bf13e4b0994c1922fbae"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ac0dab7e4b073f177442746"}, {"problem": 30, "code": "reduce (fn [a b] (if (= (last a) b) a (conj a b))) []", "user": "5ab3db13e4b073f177442609"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ab170c2e4b073f1774425cb"}, {"problem": 30, "code": "(fn\n  [coll]\n  (map first (partition-by identity coll)))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 30, "code": "(fn [in] (reverse (reduce #(if (= %2 (first %1)) %1 (conj %1 %2)) '() in)))", "user": "569bfc43e4b0542e1f8d145c"}, {"problem": 30, "code": "#(reverse (reduce (fn [x y] (if (= (first x) y) x (cons y x))) ()  %))", "user": "5ac0ba3ae4b073f177442745"}, {"problem": 30, "code": "reduce (fn [x y] (if (and x (= y (last x))) x (conj x y))) []", "user": "59a8a4dce4b0bcf4e9a43af7"}, {"problem": 30, "code": "(fn [s]\n    (map first\n         (partition-by identity s)))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 30, "code": "(fn compress-seq\n  [input]\n  (reduce\n   (fn [new-seq element]\n     (if (= (last new-seq) element)\n       new-seq\n       (conj new-seq element)))\n   []\n   input))", "user": "5ac6099ee4b0e27600da7757"}, {"problem": 30, "code": "(fn [elems]\n    (loop [elems elems\n           deduped []]\n      (if (empty? elems)\n        deduped\n        (let [first-elem (first elems)\n              other-elems (rest elems)]\n          (recur other-elems (if (= first-elem (last deduped))\n                               deduped\n                               (conj deduped first-elem)))))))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 30, "code": "(fn f [s]\n  (loop [[a & b] s\n         res '()]\n        (if (nil? a)\n          res\n          (recur b (concat res (if (not= a (first b)) (list a)))))\n  )\n)", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 30, "code": "(fn [coll]\n  (reduce\n   (fn [acc item]\n     (if (= (last acc) item) acc (conj acc item)))\n   [(first coll)]\n   (rest coll)))", "user": "5abbbd46e4b073f1774426db"}, {"problem": 30, "code": "(fn [xs]\n  (loop [acc [] ys xs x nil]\n    (let [y (first ys)]\n      (if (nil? y) acc\n        (recur (if (= y x) acc (conj acc y)) (rest ys) y)))))", "user": "5a03652ae4b01bb0ae8afd83"}, {"problem": 30, "code": "#(reduce (fn [endgame value] (if (= (last endgame) value)endgame (conj endgame value))) [] % )", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5acb137ee4b0e27600da77eb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 30, "code": "(fn comp-seq \n  [x]\n  (map first (partition-by identity x))\n)", "user": "5ac74b34e4b0e27600da777f"}, {"problem": 30, "code": "(fn del-consecutive-dups [col]\n  (mapcat set (#(partition-by identity %1) col)))", "user": "5ac383b8e4b0e27600da7719"}, {"problem": 30, "code": "#(reduce (fn [acc x]\n          (concat acc \n                (when (not= (last acc) x)\n                  [x])))\n        []\n        %)", "user": "5acc961ae4b0e27600da7810"}, {"problem": 30, "code": "(fn rdup [x]\n  (if (nil? (second x)) x\n  (if (= (first x) (second x))\n    (rdup (rest x))\n    (concat (list (first x)) (rdup (rest x))))))", "user": "5acd1a43e4b0e27600da7823"}, {"problem": 30, "code": "reduce (fn [acc x]\n  (if (= (last acc) x) acc (conj acc x))       \n) []", "user": "57513f88e4b02ea114799283"}, {"problem": 30, "code": "(fn\n   [coll]\n   (if (empty? coll)\n      coll\n      (loop [result []\n             remain coll]\n        (if (empty? remain)\n            result\n           (if (= (first remain) (second remain))\n              (recur result (rest remain))\n              (recur (conj result (first remain)) (rest remain)))))))", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5acd08eee4b0e27600da7822"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ad36ae9e4b0ea6055cfabc3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ad6d0c9e4b0ea6055cfac11"}, {"problem": 30, "code": "(fn [lst]\n    (reverse (reduce (fn rec [a b]\n                       (if (list? a)\n\n                         (if (= (first a) b)\n                           a\n                           (conj a b)\n                           )\n\n                         (if (= a b)\n                           a\n                           (list b a)\n                           )\n                         )\n                       ) lst))\n    )", "user": "5a663a32e4b0512ff01cd9c2"}, {"problem": 30, "code": "(fn f [seq]\n   (if (not= (first seq) nil)\n    (let [l (f (rest seq))]\n      (if (not= (first seq) (first l))\n        (conj l (first seq))\n        l))\n    nil))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 30, "code": "(fn [n]\n  (map first (partition-by identity n)))", "user": "5ada1f12e4b0ea6055cfac43"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ad37785e4b0ea6055cfabc5"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn [ys y] (if (= (last ys) y)\n                       ys\n                       (conj ys y)))\n          [] xs))", "user": "5ad3d730e4b0ea6055cfabc8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "5a7e194de4b03baeef927706"}, {"problem": 30, "code": "(fn [s] \n  (keep \n   (fn [[x y]] \n     (when-not (= x y) x)) \n   (partition-all 2 1 s)))", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 30, "code": "(fn [x] \n\t(reduce (fn [z y] \n\t\t\t\t(if (= (last z) y) \n\t\t\t\t\tz \n\t\t\t\t\t(conj z y))) [] x))", "user": "5ac04101e4b073f177442737"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n(reduce f* [] s)))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 30, "code": "(fn [x]\n  (map first (partition-by identity x)))", "user": "5ac6f7f7e4b0e27600da777a"}, {"problem": 30, "code": "(fn compress\n    ([x]\n     (compress (rest x) (first x) (conj '() (first x)))\n     )\n    ([x last-item compressed]\n     (if (empty? x)\n       compressed\n       (if (= (first x) last-item)\n         (compress (rest x) last-item compressed)\n         (compress (rest x) (first x) (conj (vec compressed) (first x)))\n         ))))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 30, "code": "(fn f [v] (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] v))", "user": "57086931e4b0b0fb43fd069e"}, {"problem": 30, "code": "(fn [in]\n  (reduce\n   (fn [x y]\n     (if (= (last x) y)\n       x\n       (conj x y)))\n   []\n   in))", "user": "5ae47c1de4b0837691e92c81"}, {"problem": 30, "code": "reduce (fn [acc x] (if (= (last acc) x) \n                     acc \n                     (conj acc x))) []", "user": "5991eec7e4b0866487ed0d6e"}, {"problem": 30, "code": "(fn [xs]\n  (reverse\n  (reduce\n   (fn [ys x]\n     (if (= x (first ys))\n       ys\n       (cons x ys)\n     )\n   )\n   '()\n   xs\n  ))\n)", "user": "5aac468ae4b073f17744256b"}, {"problem": 30, "code": "#(mapcat set (partition-by identity %))", "user": "5acaa269e4b0e27600da77e6"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5649b1b0e4b0284900eef646"}, {"problem": 30, "code": "(fn [input]\n    (loop [i input res []]\n      (if (empty? i)\n        res\n        (if (= (last res) (first i))\n          (recur (rest i) res)\n          (recur (rest i) (conj res (first i)))))))", "user": "5ae246b1e4b0837691e92c5d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59e8b4ade4b0249b72820734"}, {"problem": 30, "code": "#(reduce (fn [xs x]\n          (if (= (peek xs) x)\n            xs\n            (conj xs x)))\n        [] %)", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5aeec90fe4b0cc2b61a3bc31"}, {"problem": 30, "code": "reduce #(if (not= %2 (last %1)) (conj %1 %2) %1) []", "user": "505fd903e4b08f2a82ad10b7"}, {"problem": 30, "code": "(fn test_duplicate\n  ([arg] (test_duplicate (list (first arg)) (rest arg)) )\n  ([arg1 arg2]\n   (if (empty? arg2)\n     (reverse arg1)\n     (if (= (first arg1) (first arg2))\n       (test_duplicate arg1 (rest arg2))\n       (test_duplicate (conj arg1 (first arg2)) (rest arg2))\n       )\n     )\n   )\n  )", "user": "5ae71f14e4b0837691e92ca7"}, {"problem": 30, "code": "(fn [coll]\n  (loop [[fst & rst :as col] coll\n         re []]\n    (if (empty? col)\n      re\n      (if (= fst (last re))\n        (recur rst re)\n        (recur rst (conj re fst))))))", "user": "5aed87a1e4b0cc2b61a3bc1a"}, {"problem": 30, "code": "(fn [x]\n   (reverse ((fn f [x acc]\n               (if (= '() x)\n                 acc\n                 (if (empty? (rest x))\n                   (if (= (first acc) (first x))\n                     acc\n                     (conj acc (first x)))\n                   (if (= (first x) (first acc))\n                     (f (rest x) acc)\n                     (f (rest x) (conj acc (first x)))\n                     ))))\n             x '())))", "user": "5af047b8e4b0cc2b61a3bc48"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 30, "code": ";(dedupe x)\n#(map first (partition-by identity %))", "user": "5af19233e4b0cc2b61a3bc5f"}, {"problem": 30, "code": "reduce\n  (fn [a b]\n    (if (empty? a)\n      [b]\n      (if (not= (last a) b)\n        (conj a b)\n        a)))\n  []", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 30, "code": "#(reduce (fn notdupe [result remaining] \n  (if (not= (last result) remaining) \n    (conj result remaining)\n    result)\n  ) [] %)", "user": "5aefdc8de4b0cc2b61a3bc40"}, {"problem": 30, "code": "(fn [s]\n   (reduce (fn [a b]\n             (if (= b (last a))\n               a\n               (conj a b))) [] s))", "user": "5aba04dce4b073f17744269e"}, {"problem": 30, "code": "(fn [inp]\n  (reverse (reduce (fn [acc item]\n  (if (empty? acc)\n    (conj nil item)\n    (if (= (first acc) item)\n      acc\n      (conj acc item)))) nil inp)))", "user": "532ae82be4b09d4e7a9b552b"}, {"problem": 30, "code": "(fn [xs]\n  (if (< (count xs) 2)\n    (seq xs)\n    (reverse \n      (reduce (fn [a x] \n                (if (= x (first a)) a (conj a x)))\n              (list (first xs)) \n              (rest xs)))))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 30, "code": "(fn dedup [l]\n  (reduce (fn [x y] (if (not= (peek x) y) (conj x y) x)) [] l))", "user": "59f4c9c7e4b0966464fe6ab7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59eb69fbe4b0249b7282077e"}, {"problem": 30, "code": "(fn [s]\n  (loop [r () s s]\n    (if (empty? s)\n      (reverse r)\n      (if (= (first r) (first s))\n        (recur r (rest s))\n        (recur (conj r (first s)) (rest s))))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 30, "code": "(fn compress\n  ([s]\n    (compress s []))\n  ([s r]\n    (if s\n      (if (= (first s) (last r))\n        (recur (next s) r)\n        (recur (next s) (conj r (first s))))\n      r)))", "user": "5af0ac45e4b0cc2b61a3bc56"}, {"problem": 30, "code": "#(loop [a % c ()]\n\t(if (empty? a)\n\t\tc\n\t\t(if (= (first a) (second a))\n\t\t\t(recur (rest a) c)\n\t\t\t(recur (rest a) (concat c (list (first a))))\n\t\t)\n\t)\n)", "user": "5af9b2cee4b0cc2b61a3bce2"}, {"problem": 30, "code": "(fn [myseq]\n\t(reduce #(if (= %2 (last %1))\n               %1\n               (conj %1 %2))\n          []\n          myseq))", "user": "5af1e1b1e4b0cc2b61a3bc67"}, {"problem": 30, "code": "#(reduce (fn [acc elem]\n  (if (= (last acc) elem)\n      acc\n      (conj acc elem))) [] %)", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 30, "code": "#(reduce (fn [a x] (if (= x (last a)) a (conj a x))) [] %)", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 30, "code": "(fn [s]\n  (->> s\n       (seq)\n       (partition-by identity)\n       (map #(first (set %)))))", "user": "5afa9de0e4b0cc2b61a3bcf1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5af0ac17e4b0cc2b61a3bc55"}, {"problem": 30, "code": "(fn [sekuense]\n  (loop [current (first sekuense) nxt (rest sekuense) acc []]\n    (cond\n      (empty? nxt)\n      (conj acc current)\n      (= current (first nxt))\n      (recur current (rest nxt) acc)\n      :else\n      (recur (first nxt) (rest nxt) (conj acc current)))))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 30, "code": "(fn [a] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] a))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 30, "code": "(fn [x] (mapcat distinct (partition-by identity x)))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 30, "code": "#(reduce (fn f [coll cur]\n  (if (= cur (last coll))\n    coll\n    (conj coll cur)\n    )) [] %1)", "user": "5b03063de4b0cc2b61a3bd5b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5845c8f6e4b089d5ab817e77"}, {"problem": 30, "code": "(fn compressSeq\n  [[x & xs]]\n  (cond\n    (= x nil) '()\n    (= xs nil) (list x)\n    (= x (first xs)) (compressSeq xs)\n    :else (concat (list x) (compressSeq xs))))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 30, "code": "(fn [x]\n  (loop [start x\n         new '()]\n    (cond (empty? start) (reverse new)\n          (= (first start) (first new)) (recur (rest start) new)\n          :else (recur (rest start) (cons (first start) new)))))", "user": "5af74644e4b0cc2b61a3bcc2"}, {"problem": 30, "code": "#(loop [v %\n        s []]\n      (cond (= 1 (count v)) (conj s (first v))\n            (= (first v) (second v)) (recur (rest v) s)\n            :else (recur (rest v) (conj s (first v)))))", "user": "55e732c5e4b050e68259b492"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 30, "code": "(fn [s]\n  (first\n    (reduce\n     (fn [[r p] v]\n       (if (= p v)\n         [r p]\n         [(conj r v) v]))\n     [[] nil]\n     s)))", "user": "5aea2d21e4b0cc2b61a3bbe2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59d9dcfbe4b0ef0a1e9b5c5d"}, {"problem": 30, "code": "(fn [x] (loop [c '() x x]\n    (if (empty? x)\n        (reverse c)\n        (recur\n            (if (= (first c) (first x)) c (cons (first x) c))\n            (rest x))\n)))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52c03baee4b07a9af5792347"}, {"problem": 30, "code": "(fn x [s] \n  (reduce (fn [acc v] (if (= v (last acc))\n     \t\t\t\t\tacc\n                        (conj acc v) )) [] s))", "user": "5b0bea6de4b0cc2b61a3bdda"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "5b0d5619e4b0cc2b61a3bdf0"}, {"problem": 30, "code": "#(loop [l % o '()]\n    (if (not (empty? l))\n        (recur\n            (butlast l)\n            (if (= (last (butlast l)) (last l))\n                o\n                (conj o (last l))))\n        o))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 30, "code": "(fn remov [sequ]\n  (loop [[x & y] sequ prim nil out '()]\n    (if (nil? x) \n      (reverse out)\n      (do\n        (if (not (= x prim)) \n          (recur y x (cons x out))\n          (recur y prim out))))))", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b0fe3f4e4b0cc2b61a3be14"}, {"problem": 30, "code": "(fn [x] (map (comp first distinct) (partition-by identity x)))", "user": "5addadfce4b0837691e92c13"}, {"problem": 30, "code": "(fn f [coll]\n  (reverse\n    (reduce (fn [acc x]\n              (if (= (first acc) x)\n                acc\n                (cons x acc)))\n            nil coll)))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b14ea95e4b0cc2b61a3be62"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5af9d09ae4b0cc2b61a3bce6"}, {"problem": 30, "code": "(fn [coll]\n  (loop [result [] coll coll last' nil]\n    (if (empty? coll)\n      result\n      (if (= (first coll) last')\n    \t(recur result (rest coll) last')\n        (recur (conj result (first coll)) (rest coll) (first coll))))))", "user": "5b13f482e4b0cc2b61a3be58"}, {"problem": 30, "code": "(fn compress [s]\n  (if (empty? s)\n      []\n      (if (= (first s) (second s))\n          (compress (rest s))\n          (cons (first s) (compress (rest s))))))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b1619e4e4b0cc2b61a3be77"}, {"problem": 30, "code": "(fn compress [in]\n  (let [f (first in)\n        r (rest in)]\n    (if (= f (second in))\n      (compress r)\n      (if (empty? r)\n        [f]\n        (cons f (compress r))))))", "user": "5b107263e4b0cc2b61a3be22"}, {"problem": 30, "code": "(fn [this-list]\n    (loop [loop-list this-list\n           result '()]\n      (if (empty? loop-list)\n        (reverse result)\n        (recur (rest loop-list) (if (= (first loop-list) (first (rest loop-list)))\n                                  result\n                                  (conj result (first loop-list)))))))", "user": "5b15e881e4b0cc2b61a3be75"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b0f2862e4b0cc2b61a3be0f"}, {"problem": 30, "code": "(fn f [[a & b]]\n   (cond\n     (empty? b) [a]\n     (= a (first b)) (f b) \n     :else (concat [a] (f b))\n     )\n   )", "user": "5b118b7be4b0cc2b61a3be34"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b18f2d2e4b00d69b768e777"}, {"problem": 30, "code": "(fn [s]\n  (loop [x s\n         acc []]\n    (if-not (empty? x)\n            (recur (rest x)\n                   (if-not (= (last acc) (first x)) \n                           (conj acc (first x))\n                           acc))\n            acc)))", "user": "51316a63e4b0431ba07e7feb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5adbbf89e4b0837691e92bf4"}, {"problem": 30, "code": "(fn rm \n  ([i] (rm (rest i) (conj [] (first i)) ))\n  ([i o] (println [i o]) (\n         if (empty? i)\n          o\n          (if (= (first i) (last o))\n             (rm (rest i) o)\n             (rm (rest i) (conj o (first i)))\n           )))\n  )", "user": "5b081ff2e4b0cc2b61a3bdb3"}, {"problem": 30, "code": "#(loop[result [], in %]\n   (let [input (into [] in)]\n     (cond\n       (empty? input) result\n       (= (last result) (first input)) (recur result (rest input))\n       :else (recur (conj result (first input)) (rest input)))))", "user": "5b198eace4b03cfeda66ecbb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 30, "code": "(fn [sq]\n  (loop [fe (first sq)\n         lsq (rest sq)\n         res [(first sq)]]\n    (cond\n      (empty? lsq) res\n      (not (= fe (first lsq))) (recur (first lsq) (rest lsq) (conj res (first lsq)))\n      :else (recur (first lsq) (rest lsq) res))))", "user": "5a291617e4b07f18be40aa76"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b1f1b2de4b03cfeda66ed19"}, {"problem": 30, "code": "(fn c [xs]\n  (letfn [(se [xs] (split-with #(= % (first xs)) xs))\n          (xxx [xs] (let [[a b] (se xs)] (when-not (empty? a) (cons a (xxx b)))))]\n    (apply concat (map distinct (xxx xs)))))", "user": "59dec79ee4b01968742fed81"}, {"problem": 30, "code": "(fn rec [li] (cond\n              (= 1 (count li)) li\n              (= (first li) (first (rec (rest li)))) (rec (rest li))\n              true  (cons (first li) (rec (rest li)))))", "user": "5b20134de4b03cfeda66ed2d"}, {"problem": 30, "code": "(fn [xs]\n  (first\n  (reduce (fn [[acc prev] cur]\n            [(if (= prev cur) acc (conj acc cur)) cur])\n          ['() nil]\n          (reverse (seq xs)))))", "user": "5b1c16e1e4b03cfeda66ecf2"}, {"problem": 30, "code": "(fn [v] (conj (map last (filter #(not= (first %) (second %)) (partition 2 1 v))) (first v)))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 30, "code": "#(reduce (fn [l x] (if (= x (peek l)) l (conj l x))) [] %)", "user": "57d418b4e4b0bd073c20239a"}, {"problem": 30, "code": "(fn compress [input] \n  (reverse (reduce (fn [uniques value]\n                     (if (= value (first uniques)) uniques\n                       (cons value uniques)))\n                   nil input)))", "user": "5b1d61b3e4b03cfeda66ecfe"}, {"problem": 30, "code": "reduce (fn [res item] (if(= item (last res)) res (conj res item))) []", "user": "5b19cdf2e4b03cfeda66ecbf"}, {"problem": 30, "code": "reduce \n (fn [ac p]\n   (if (= p (last ac))\n     ac\n     (conj ac p)\n   )\n )\n []", "user": "59c243bae4b0a024fb6ae4aa"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b2238d1e4b03cfeda66ed5e"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 30, "code": "(fn dedupe- [s-]\n  (last (reduce (fn [[last-seen acc] this]\n              (if (= this last-seen)\n              [last-seen acc]\n              [this (conj acc this)]\n              )\n            )\n          [nil []] (seq s-)) \n  ))", "user": "5b250773e4b063e2438bcc21"}, {"problem": 30, "code": "(fn [coll]\n  (reverse\n   (reduce\n    (fn [acc x] (if (= x (first acc)) acc (conj acc x)))\n    ()\n    coll)))", "user": "5afecee2e4b0cc2b61a3bd28"}, {"problem": 30, "code": "reduce (fn [l i]\n  (if (not= (last l) i)\n    (conj l i)\n    l\n    )\n) []", "user": "5b274fd1e4b063e2438bcc3b"}, {"problem": 30, "code": "reduce (fn [coll x] (if (= x (last coll)) coll (conj coll x)))\n        []", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b22d30ee4b08b1df1c36750"}, {"problem": 30, "code": "(comp\n reverse \n (partial reduce #(if (= (first %1) %2)\n                    %1 \n                    (conj %1 %2))\n          '()))", "user": "5b236e55e4b08b1df1c36759"}, {"problem": 30, "code": "(fn [input]\n  (loop [in input\n         final []]\n    (if (empty? (rest in))\n      (conj final (first in))\n      (if (= (first in) (second in))\n        (recur (rest in) final)\n        (recur (rest in) (conj final (first in)))))))", "user": "5b2a559be4b063e2438bcc74"}, {"problem": 30, "code": "(fn p30 [x]\n  (map first (partition-by identity x)))", "user": "56673885e4b04acd4f672dce"}, {"problem": 30, "code": "reduce (fn [acc item]\n            (if (= (last acc) item)\n              acc\n              (conj acc item)))\n          []", "user": "54dfbacae4b024c67c0cf7b1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "586a906ae4b0f14aab7c88c3"}, {"problem": 30, "code": "#(reduce (fn [tot x] (if (not= (last tot) x)(conj tot x) tot)) [] %)", "user": "5b284375e4b063e2438bcc53"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s))", "user": "5b2c79c6e4b025bcb146f2b7"}, {"problem": 30, "code": "reduce (fn [a b] (if (= b (last a)) a (conj a b))) []", "user": "5b2e6b02e4b025bcb146f2d3"}, {"problem": 30, "code": "(fn compare-in \n  ([dup]\n  (compare-in (rest dup) (first dup) [(first dup)]))\n  ([dup c acc]\n  (cond\n   (empty? dup) acc\n    (= c (first dup))(recur (rest dup) c acc)\n    (not= c (first dup))(recur (rest dup) (first dup)(conj acc (first dup))))))", "user": "5b04662ce4b0cc2b61a3bd75"}, {"problem": 30, "code": "(fn [items]\n\n  (reverse \n    (reduce \n     \n      #(if (= (peek %1) %2)\n        %1\n        (conj %1 %2)\n      )    \n     \n      '()\n      items  \n    )\n  )\n)", "user": "5b3189e5e4b025bcb146f308"}, {"problem": 30, "code": "(fn compress-seq [coll]\n  (loop [x (last coll) xs (butlast coll) c '()]\n    (if-not (nil? x)\n      (recur\n       (last xs)\n       (butlast xs)\n       (if-not (= x (last xs)) (conj c x) c))\n      c)))", "user": "5b2c76c8e4b025bcb146f2b6"}, {"problem": 30, "code": "#(reduce (fn [res n]\n            (if (= n (last res))\n              res\n              (conj res n))) [] %)", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 30, "code": "(fn [x] (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] x))", "user": "5b37a3b4e4b02d533a91bba9"}, {"problem": 30, "code": "(partial reduce (fn [acc x]\n  (if ((complement =) (last acc) x)\n    (conj acc x)\n    acc)) [])", "user": "5b38d771e4b02d533a91bbb0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59e8a952e4b0249b72820733"}, {"problem": 30, "code": "(fn dedup [elements]\n  (reduce (fn [acc val] \n    (if-let [lastel (last acc)]\n      (if (= lastel val) acc (concat acc [val]) )\n      (concat acc [val]))) [] elements))", "user": "5b2c1f60e4b025bcb146f2b1"}, {"problem": 30, "code": "reduce #( if (= (last %) %2 ) % ( conj % %2 ) ) []", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "5b0c21fbe4b0cc2b61a3bde3"}, {"problem": 30, "code": "#(reduce (fn [v n] (if (= (last v) n) v (conj v n))) [] %)", "user": "5b2927a0e4b063e2438bcc5e"}, {"problem": 30, "code": "(fn __\n  ([s] (__ s '()))\n  ([s1 s2] (if (empty? s1) (reverse s2)\n               (if (and (not (empty? (rest s1))) (= (first s1) (second s1)))\n                 (__ (rest s1) s2)\n                 (__ (rest s1) (conj s2 (first s1)))))))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 30, "code": "#(reduce (fn [s x] (if-not (= (last s) x) (conj s x) s)) [] %)", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 30, "code": "(fn [xs]\n  (reverse\n   (reduce (fn [ys y]\n             (let [f (first ys)]\n               (if (= f y) ys\n                 (conj ys y))))\n           '()\n           xs)))", "user": "5b333626e4b025bcb146f32f"}, {"problem": 30, "code": "(fn [original-seq]\n(loop [remaining-seq original-seq new-seq [] last-element 0]\n  (println remaining-seq new-seq last-element)\n  (if (empty? remaining-seq)\n    new-seq\n    (if (empty? new-seq)\n      (recur (rest remaining-seq) [(first remaining-seq)] (first remaining-seq))\n      (recur (rest remaining-seq) (if (= last-element (first remaining-seq))\n        new-seq\n        (conj new-seq (first remaining-seq))) (first remaining-seq)))))\n\n)", "user": "5b3de9a7e4b02d533a91bbf4"}, {"problem": 30, "code": "(fn [s]\n  (loop [res '() sb s p nil]\n    (cond (empty? sb) res\n          (= (first sb) p) (recur res (rest sb) p)\n          :else (recur (concat res (list (first sb))) (rest sb) (first sb)))))", "user": "5a5d693ce4b0512ff01cd923"}, {"problem": 30, "code": "(fn compress [coll] (if (second coll)\n                      (if (= (first coll) (second coll))\n                        (compress (rest coll))\n                        (concat [(first coll)] (compress (rest coll))))\n                      coll))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 30, "code": "(fn compress [seq & {:keys [compressed] :or {compressed []}}]\n  (cond (empty? seq)\n        compressed\n        (= (first seq) (last compressed))\n        (compress (rest seq) :compressed compressed)\n        true\n        (compress (rest seq) :compressed (conj compressed (first seq)))))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 30, "code": "(fn [seq]\n  (loop [seq seq \n         acc [(first seq)]]\n    (let [first-item (first seq)\n          last-item (last acc)]\n      (if (= 0 (count seq))\n        acc\n        \n      \t(recur (drop 1 seq) \n           \t (if (= last-item first-item) acc (conj acc first-item))))  \n        )\n      \n    \n    ))", "user": "5a932f63e4b0d174b936c71b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b47a4f7e4b02d533a91bc73"}, {"problem": 30, "code": "#(loop [lst %\n        ret '()]\n   (if (empty? lst) (reverse ret)\n     (recur (rest lst)\n            (if (= (first lst) (first ret))\n              ret\n              (conj ret (first lst))))))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 30, "code": "(fn [x\n                   ]\n  (reduce #( if (= %2 (last %1))\n            %1\n            (conj %1 %2)\n            ) [] x ))", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 30, "code": "#(->> % (partition-by identity ) (map first ))", "user": "5b2bc1ace4b025bcb146f2ad"}, {"problem": 30, "code": "(fn [x] \n (reduce (fn [acc e] (if(= e (last acc))\n                       acc\n                       (conj acc e))) [] x))", "user": "5b445421e4b02d533a91bc40"}, {"problem": 30, "code": "(fn[x](map first(partition-by identity x)))", "user": "5826a843e4b051871117befd"}, {"problem": 30, "code": "(fn [s] (reverse (\n         reduce (fn [ss i] (\n                            if (= i (first ss)) ss (cons i ss))) '() s)))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 30, "code": "(fn [lst]\n  (loop [remaining lst\n         prev nil\n         acc []]\n    (cond\n      (empty? remaining) acc\n      (= prev (first remaining)) (recur (rest remaining) (first remaining) acc)\n      :else (recur (rest remaining) (first remaining) (conj acc (first remaining))))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 30, "code": "(fn my-trim [coll]\n  (let [dist (filter #(not= (first %) (last %))(partition 2 1 coll))] (conj (vec (cons (first (first dist)) (map #(last %) (drop-last dist)))) (last (last dist)))))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 30, "code": "(fn [se]\n  (reduce (fn [acc e] (if (not(= e (last acc))) (conj acc e)  acc )) [] se)\n)", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b4dfd5de4b02d533a91bcc3"}, {"problem": 30, "code": "#(reduce (fn [z x] (if (= (last z) x) z (conj z x))) [] %)", "user": "5b552117e4b02d533a91bd2c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59ed823ee4b0249b728207a1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b57505ce4b02d533a91bd55"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 30, "code": "reduce (fn [result v] (if (= (last result) v) result (conj result v))) []", "user": "5b58b271e4b02d533a91bd6e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b59fe53e4b02d533a91bd87"}, {"problem": 30, "code": "(fn [s] \n  (reduce (fn [res a]\n            (if (= a (last res))\n              res\n              (concat res [a]))) '() s))", "user": "5969bb32e4b069c0a1a197ed"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b5955cce4b02d533a91bd79"}, {"problem": 30, "code": "#(reduce (fn [r x] (if (= (last r) x) r (conj r x))) [] %)", "user": "5b59c513e4b02d533a91bd81"}, {"problem": 30, "code": "#(reduce (fn [accum x]\n           (if (= (last accum) x)\n             accum\n             (concat accum [x])))\n         []\n         %)", "user": "5b5d255de4b0c6492753e6c8"}, {"problem": 30, "code": "#(loop [coll (vec %) length (count %) result [] i 0]\n   (if (= i length)\n     result\n     (if (or (= i 0) (not (= (nth coll i) (last result))))\n       (recur coll length (conj result (nth coll i)) (inc i))\n       (recur coll length result (inc i)))))", "user": "5b199fd4e4b03cfeda66ecbd"}, {"problem": 30, "code": "(fn compress [seq]\n  (loop [seq seq\n         acc []]\n    (if (empty? seq)\n      acc\n      (recur (rest seq)\n             (if (= (last acc) (first seq))\n               acc\n               (conj acc (first seq)))))))", "user": "5b59c2bde4b02d533a91bd80"}, {"problem": 30, "code": "(fn dedupeconsec [s]\n  (if\n    (empty? s)\n    '()\n    (if\n      (= (first s) (first (rest s)))\n      (dedupeconsec (rest s))\n      (concat (list (first s)) (dedupeconsec (rest s)))\n      )\n    )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 30, "code": "#(reduce concat (map distinct (partition-by identity %)))", "user": "5600bed5e4b04bb52996e170"}, {"problem": 30, "code": "(fn delrep [x]\n  (loop [res []\n        in (seq x)]\n    (if (empty? in)\n      (seq res)\n      (recur (if (= (first in) (last res))\n               res\n               (conj res (first in)))\n             (next in)))))", "user": "5b596d0ce4b02d533a91bd7a"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "5a011305e4b01bb0ae8afd40"}, {"problem": 30, "code": "#(reduce (fn [a b]\n           (cond\n            (not= (peek a) b) (conj a b)\n            :else a)) '() (reverse %))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 30, "code": "#(reduce\n  (fn [coll x]\n    (if (not= x (peek coll))\n      (conj coll x)\n      coll))\n  []\n  %)", "user": "5b500215e4b02d533a91bce2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 30, "code": "(fn consec-dupe\n  [coll]\n  (loop [result []\n         elements coll]\n    (if (empty? elements)\n      result\n      (if (= (first elements) (peek result))\n        (recur\n          result\n          (rest elements))\n        (recur\n          (conj result (first elements))\n          (rest elements))))))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 30, "code": "(fn [c] (reduce (fn [s x] (if (= (last s) x) s (conj s x))) [] c))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 30, "code": "(fn walk [d s]\n  (if (= s nil)\n    d\n    (if (= (last d) (first s))\n      (recur d (next s))\n      (recur (conj d (first s))\n             (next s))\n    )\n  )\n) []", "user": "5b5b0bb9e4b0c6492753e6a5"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "5b338b23e4b025bcb146f33d"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] %)", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 30, "code": "(fn\n  [s]\n  (keep-indexed (fn [index item]\n                  (when (or (= index 0) (not= item (nth s (dec index)))) item))\n                s))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 30, "code": "(fn foo [coll] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) `() coll)))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 30, "code": "(fn [seq] (first ((fn [xs] (reduce (fn [[v s] x]\n                                      (if-not (= s x)\n                                        [(conj v x) x]\n                                        [v s]))\n                                    [[] nil]\n                                    xs)) seq)))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 30, "code": "(fn compress\n  ([x] (compress x '()))\n  ([x acc]\n   (if (empty? x) (reverse acc)\n       (recur (rest x) (if (= (first x) (first acc)) acc (cons (first x) acc))))))", "user": "5b632851e4b0c6492753e72d"}, {"problem": 30, "code": "reduce #(if (not= (last %) %2) (conj % %2) %) []", "user": "5b552e2ee4b02d533a91bd2e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b608c66e4b0c6492753e706"}, {"problem": 30, "code": "#(reduce (fn [compressed next]\n            (if-not (= (last compressed) next)\n             (conj compressed next)\n             compressed))\n           [(first %)]\n           (rest %))", "user": "5b62764ae4b0c6492753e725"}, {"problem": 30, "code": "(fn [s]\n  (loop [nsq [] sq (seq s) prev nil]\n    (if (empty? sq)\n      nsq\n      (recur\n       (if (= (first sq) prev)\n         nsq\n         (conj nsq (first sq)))\n       (rest sq)\n       (first sq)))))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 30, "code": "(fn func\n  ([x c a]\n   (if (empty? x) (reverse a)\n     (let [f (first x) r (rest x)]\n       (if (= f c) (func r c a) (func r f (cons f a))))))\n   ([x]\n    (func x \\$ [])))", "user": "5b679bf9e4b0c6492753e769"}, {"problem": 30, "code": "#(reduce\n  (fn [acc v]\n    (if(= (last acc) v)\n      acc\n      (conj acc v)))\n  []\n  %)", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 30, "code": "(fn [sq1]\n  (reverse (reduce #(if (= (first %1) %2)\n                      %1\n                      (conj %1 %2))\n          '()\n          sq1)\n  )\n           )", "user": "5b69529be4b0c6492753e786"}, {"problem": 30, "code": "#(reverse (reduce (fn [result element]\n          (if (not= element (first result))\n            (conj result element)\n            (identity result)\n          )\n        )             \n        '()\n        (seq %))\n)", "user": "5b513bd4e4b02d533a91bcf2"}, {"problem": 30, "code": "(fn compress-seq [s]\n   (reduce #(if (= (last %1) %2)\n             %1\n             (conj %1 %2)) [] s))", "user": "5b611666e4b0c6492753e70d"}, {"problem": 30, "code": "(fn [x] ((fn helper [result previous remaining]\n    (if (empty? remaining)\n        result\n        (if (= previous (first remaining))\n            (helper result previous (rest remaining))\n            (helper (conj result (first remaining)) (first remaining) (rest remaining))\n        )\n    )\n)\n    []\n    []\n    x))", "user": "5b67f0fbe4b0c6492753e76d"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5b6e1649e4b0c6492753e7ce"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "57ebbf3ae4b0bfb2137f5b66"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b66faa7e4b0c6492753e75a"}, {"problem": 30, "code": "(fn[x] (map first (partition-by identity x)))", "user": "5b6c6328e4b0c6492753e7b7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "592db566e4b072a2710fcf7c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59b294f8e4b0e1f4e384c8fb"}, {"problem": 30, "code": "(fn\n  [x]\n  (reduce\n    (fn [r n]\n        (if (= (last r) n)\n            r\n            (conj r n)))\n    (vector (first x))\n    (rest x)))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 30, "code": "(fn duplicates [s]\n   (reduce\n     #(if-not (= (last %1) %2) (conj %1 %2) %1)\n     [] s))", "user": "5b69baf9e4b0c6492753e78f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5244cf39e4b0d8acf9ed6ac5"}, {"problem": 30, "code": "(fn rd [[x y & xs]]\n  (if (nil? x) '()\n  (if (= x y)\n    (rd (cons y xs))\n    (cons x (rd (cons y xs))))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 30, "code": "(fn compress-seq\n  [xs]\n  (reduce (fn maybe-conj [s e]\n            (if (= (last s) e)\n              s\n              (conj s e)))\n          [] xs))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b788fc4e4b047b03b2036fc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b754f8ee4b047b03b2036c9"}, {"problem": 30, "code": "#(concat [(first %)]\n    (second\n      (reduce\n        (fn [[prevVal acc :as b] x]\n          (if (= prevVal x)\n              b\n              [x (conj acc x)]))\n        [(first %) []]\n        %)))", "user": "55f48d1be4b06e875b46ce7b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b79cbdce4b047b03b20370a"}, {"problem": 30, "code": "(fn [s] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() s)))", "user": "5b774e66e4b047b03b2036ec"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 30, "code": "(fn [s] (reduce (fn [res el]\n                  (if (= (last res) el)\n                    res\n                    (conj res el)))\n                [] s))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b7d1dc1e4b047b03b20373f"}, {"problem": 30, "code": "(fn remove-dupes [input]\n  (loop [output (into [] (take 1 input))\n         remaining-input (rest input)]\n    (if (empty? remaining-input)\n      output\n      (if-not (= (last output) (first remaining-input))\n        (recur (conj output (first remaining-input)) (rest remaining-input))\n        (recur output (rest remaining-input))))))", "user": "5b82eec6e4b047b03b2037a4"}, {"problem": 30, "code": "(fn [s]\n  (map first (partition-by identity s)))", "user": "5b83c02de4b047b03b2037b6"}, {"problem": 30, "code": "#(reverse (reduce (fn [res x] (if (= (first res) x) res (conj res x))) '() %))", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5992dc6ae4b0866487ed0d7d"}, {"problem": 30, "code": "(fn [params] (mapcat set (#(partition-by identity %) params)))", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 30, "code": "(fn PS [[first second & tail]] \n  ( cond \n    (= first second) (PS (cons first tail))\n    (empty? tail) (cons first (cons second tail))\n    :else (cons first (PS(cons second tail)))))", "user": "5b6f72ede4b0c6492753e7dc"}, {"problem": 30, "code": "#(reverse (reduce (fn [a b] (if (not= b (first a)) (conj a b) a)) '() %))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 30, "code": "(fn [res arr] (let [l (last res) f (first arr)] (if (empty? arr) res (recur (if (= l f) res (conj res f)) (rest arr))))) []", "user": "5b5f2566e4b0c6492753e6e9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56e9db9be4b04a395b9a03ff"}, {"problem": 30, "code": "(fn compress \n  ([data] (compress data []))\n  ([sq container]\n   (letfn [\n           (contains-at-tail-position? [sq item]\n             (= (last sq) item))\n           (add-if-not-present-at-last-pos [sq item]\n             (if (not (contains-at-tail-position? sq item))\n               (conj sq item)\n               sq))]\n     (loop [csq sq cntnr container]\n       (if\n         (empty? csq)\n         cntnr\n         (do\n           (recur\n             (rest csq)\n             (add-if-not-present-at-last-pos cntnr (first csq)))))))))", "user": "5b11449ce4b0cc2b61a3be2d"}, {"problem": 30, "code": "#(reduce (fn [a c] (if (= (last a) c) a (concat a (list c)))) (list) %)", "user": "5b885821e4b047b03b20380b"}, {"problem": 30, "code": "(fn [c] (reduce (fn [acc val] (if (= val (last acc)) acc (concat acc (list val)))) (list (first c)) (rest c)))", "user": "52384eb1e4b0fae3832e99fa"}, {"problem": 30, "code": "(fn [x] (loop [n 0 myList x nl '() ]\n          (if (string? myList)\n            (do (if (< n (.length myList))\n                  (if (not= n (- (.length myList) 1) )\n                    (if (not= (nth myList n) (nth myList (+ n 1)))\n                      (recur (inc n) myList (conj nl (nth myList n)))\n                      (recur (inc n) myList nl))\n                    (apply str (reverse (conj nl (last myList)))))))\n            (do (if (< n (.size myList))\n                  (if (not= n (- (.size myList) 1) )\n                    (if (not= (nth myList n) (nth myList (+ n 1)))\n                      (recur (inc n) myList (conj nl (nth myList n)))\n                      (recur (inc n) myList nl))\n                    (reverse (conj nl (last myList))))))\n            )))", "user": "5b754a5ae4b047b03b2036c8"}, {"problem": 30, "code": "(fn [sq]\n  (let [result (reduce (fn [new-seq nxt] \n                         (if (= nxt (last new-seq))\n                           new-seq\n                           (conj new-seq nxt)))\n                       []\n                       sq)]\n    (if (string? sq)\n      (clojure.string/join result)\n      result)))", "user": "5b7ef8e6e4b047b03b203765"}, {"problem": 30, "code": "(fn compress [seq]\n  (let [f (fn [acc curr]\n            (if (empty? acc)\n              (list curr)\n              (let [amount (count acc)\n                    last (nth acc (- amount 1))]\n                (if (= last curr)\n                  acc\n                  (concat acc [curr])))))]\n    (reduce f (list) seq)))", "user": "58ac01f7e4b0005cfeb1a73b"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 30, "code": "(fn [s]\n  (loop [s s\n         acc []]\n    (if (empty? s)\n      acc\n      (let [same? (= (first s) (last acc))]\n        (recur (rest s) (if same? acc (conj acc (first s))))))))", "user": "578dc040e4b0ebec4cfb756d"}, {"problem": 30, "code": "reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) []", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 30, "code": "#(reduce (fn [r c] (if (= c (last r)) r (conj r c))) [] %)", "user": "5b8f0861e4b0c0b3ffbd49f4"}, {"problem": 30, "code": "(fn remove-dublicates\n   [args]\n   (loop [lst args ret nil]\n     (if (not (empty? lst))\n       (recur (rest lst) (if (not= (first ret) (first lst))\n                           (conj ret (first lst))\n                           ret))\n       (reverse ret))))", "user": "5b86462de4b047b03b2037df"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55d5dc6de4b0e31453f64a90"}, {"problem": 30, "code": "(fn compress \n  [coll]\n  (reduce \n   #(if-not (= (last %1) %2) (conj %1 %2) %1)\n   [] coll)\n)", "user": "5b857411e4b047b03b2037ce"}, {"problem": 30, "code": "#(reduce (fn [acc x]\n           (if-not (= (last acc) x)\n             (conj acc x)\n             acc))\n         []\n         %)", "user": "4f84a4a4e4b033992c121c39"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59924289e4b0866487ed0d76"}, {"problem": 30, "code": "(fn [sequence]\n    (reduce\n     (fn [x y]\n       (if (= (last x) y)\n         x\n         (conj x y)))\n     []\n     sequence))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 30, "code": "reduce (fn [acc x]\n         (if (= x (last acc))\n           acc \n           (conj acc x))) []", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [acc el]\n            (if (= (last acc) el)\n              acc\n              (concat acc (list el))))\n          ()\n          s))", "user": "5b9357b7e4b0c0b3ffbd4a46"}, {"problem": 30, "code": "(fn [x]\n  (->> (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [(first x)] x)\n       (into '())\n       (reverse)))", "user": "5b9263ece4b0c0b3ffbd4a37"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b9601e8e4b0c0b3ffbd4a70"}, {"problem": 30, "code": "reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) []", "user": "5b855800e4b047b03b2037cd"}, {"problem": 30, "code": "(fn compress\n  ([x]\n   (compress x [])\n    )\n  ([x compressed]\n   (if (empty? x)\n     compressed\n     (if (= (last compressed) (first x))\n       (compress (rest x) compressed)\n       (compress (rest x) (conj compressed (first x)))\n       )\n     )\n    )\n  )", "user": "5b92f178e4b0c0b3ffbd4a41"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b80a5cfe4b047b03b20377f"}, {"problem": 30, "code": "(fn [my-seq]\n  (loop [x       my-seq\n         rtn-ele []]\n    (if (empty? x)\n      (apply list rtn-ele)\n      (if (not= (first x) (second x))\n        (recur (rest x ) (conj rtn-ele (first x)))\n        (recur (rest x) (identity rtn-ele))))\n    ))", "user": "5b97c521e4b0c0b3ffbd4a9a"}, {"problem": 30, "code": "#(loop [res (vector) x1 (first %) x2 (rest %)]\n    (if (empty? x2)\n      (conj res x1)\n      (if (= x1 (first x2))\n        (recur res x1 (rest x2))\n        (recur (conj res x1) (first x2) (rest x2)))))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 30, "code": "(fn compress [xs]\n      (let [f (fn [accum x]\n                 (if (not= (peek accum) x)\n                   (conj accum x)\n                   accum) )]\n        (reduce f (vector) xs)))", "user": "5b1e5bfde4b03cfeda66ed0e"}, {"problem": 30, "code": "(fn [xs]\n  (loop [xs xs\n         ys '()]\n    (if (empty? xs)\n      (reverse ys)\n      (let [x (first xs)]\n        (recur (rest xs)\n             (if (= x (first ys)) ys (cons x ys)))))))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 30, "code": "(fn [in]\n  (loop\n    [in (sequence in)\n     out [] #_ sequence_transforms_string_and_keeps_empty_seq]\n    (if (empty? in) ; without this condition recursion run indefinitely, because (rest '()) returned '() again...\n      out\n      (if (empty? out)\n        (recur (rest in) (vector (first in)))\n        (if (= (first in) (last out))\n          (recur (rest in) out)  #_skip\n          (recur (rest in) (conj out (first in))))))))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 30, "code": "(fn unique [a]\n\t(if (= 1 (count a))\n    \ta\n      \t(let [b (unique (rest a))]\n\t\t\t(if (= (first a) (first b))\n            \tb\n              \t(conj b (first a))\n            )\n        )\n\t)\n)", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 30, "code": "#(reduce (fn [xs x] \n           (if (= x (last xs))\n              xs\n              (conj xs x)))\n          [] %)", "user": "57a5da5ee4b0a966079561fe"}, {"problem": 30, "code": "(fn compress-sequence [coleccion]\n  (reverse (reduce (fn [coleccion-final elemento]\n                     (if (= (first coleccion-final) elemento)\n                       coleccion-final\n                       (cons elemento coleccion-final))) '() coleccion)))", "user": "599f7a7ee4b0871e7608b81e"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] %)", "user": "5b81139fe4b047b03b203782"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b6428b3e4b0c6492753e73b"}, {"problem": 30, "code": "(fn [xs]\n  (->> xs\n        (seq)\n        (partition-by identity)\n        (map #(first %))))", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 30, "code": "(fn remove-dups\n  [[h & t]]\n  (if (nil? t)\n    [h]\n    (if (= h (first t))\n     (remove-dups t)\n     (cons h (remove-dups t))))\n)", "user": "5b9da7fbe4b0c0b3ffbd4b3f"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] %)", "user": "5b8aa478e4b0c0b3ffbd49b2"}, {"problem": 30, "code": "(fn remove-dups [s]\n    (reduce \n        #(if-not (= (last %1) %2)\n            (conj %1 %2)\n            %1)\n        []\n        s))", "user": "5b9acb23e4b0c0b3ffbd4aef"}, {"problem": 30, "code": "(fn compress [input]\n  (reduce \n    (fn [r v]\n      (if (not (= (last r) v))\n        (conj r v)\n        r))\n    []\n    (seq input)))", "user": "5b9bcba8e4b0c0b3ffbd4b07"}, {"problem": 30, "code": "reduce\n  (fn [acc value]\n    (cond\n      (empty? acc) (conj acc value)\n      (= (last acc) value) acc\n      :else (conj acc value))\n    )\n\n  []", "user": "5b265183e4b063e2438bcc31"}, {"problem": 30, "code": "#(reduce (fn [cur n]\n          (if ((comp not (partial = n) last) cur)\n            (conj cur n)\n            cur))\n        []\n        %)", "user": "5ba28f36e4b0a20761a233c4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ba5802de4b0a20761a233fd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b9d3913e4b0c0b3ffbd4b37"}, {"problem": 30, "code": "(fn compress [s]\n  (seq (reduce (fn [compressed x]\n                 (if (= (last compressed) x)\n                   compressed\n                   (conj compressed x)))\n               [] s)))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 30, "code": "(fn [sx]\n  (loop [sx sx\n         acc []]\n    (if (empty? sx) acc\n                    (if (not= (first sx) (second sx))\n                      (recur (rest sx) (conj acc (first sx)))\n                      (recur (rest sx) acc)))))", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 30, "code": "(fn distinct-consequtive [sequence] (map first (partition-by identity sequence)))", "user": "5b8d01d7e4b0c0b3ffbd49ca"}, {"problem": 30, "code": "(fn remove-consecutive-dups [s]\n  (reduce\n   (fn [l e]\n     (println l)\n     (println e)\n     (if (= (last l) e)\n       l\n       (conj l e)))\n   []\n   s))", "user": "5af3aa42e4b0cc2b61a3bc8c"}, {"problem": 30, "code": "#(loop [last-element nil\n        [current-element & other-elements] %\n        output []]\n   (if (nil? current-element)\n     output\n     (recur\n      current-element\n      other-elements\n      (if (= current-element last-element)\n        output\n        (conj output current-element)))))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 30, "code": "(fn dedupe\n  [s]\n  (reduce\n   (fn [acc e]\n     (if (= (last acc) e)\n       acc\n       (conj acc e)))\n   []\n   s))", "user": "5bab49bbe4b0a20761a23474"}, {"problem": 30, "code": "(fn [data] (loop [i data res []]\n              (if (empty? i)\n                res\n                (if (= (first i) (last res))\n                  (recur (rest i) res)\n                  (recur (rest i) (conj res (first i)))))))", "user": "5b98f7f3e4b0c0b3ffbd4ac2"}, {"problem": 30, "code": "reduce (fn [r x] (if (= x (last r)) r (conj r x))) []", "user": "5ba947bfe4b0a20761a23440"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 30, "code": "(fn [s]\n  (reduce\n    (fn [x y]\n      (if (= (last x) y)\n        x\n        (conj x y)))\n  [] s))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 30, "code": "#(if (string? %)\n                       (map second (re-seq (re-pattern \"(.)\\\\1*\") %))\n                       (map first (partition-by identity %)))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (not= (last a) b) (conj a b) a)) [] (vec %))", "user": "5bb23cf1e4b0a20761a2350a"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] %)", "user": "5951190be4b066ee0a44aea4"}, {"problem": 30, "code": "(fn [xs] (reduce (fn [acc x]\n                   (if (= (last acc) x)\n                     acc\n                     (concat acc [x])))\n                 [] \n                 xs))", "user": "5bb17123e4b0a20761a234fd"}, {"problem": 30, "code": "(fn [col] (let [last-entry (atom nil)\n                 is-string (= (type col) java.lang.String)\n                 filtered (filter #(let [last-enter @last-entry]\n                                     (reset! last-entry %)\n                                     (not (= % last-enter))) col)]\n             (if is-string (clojure.string/join filtered) filtered)\n             ))", "user": "5baa5f53e4b0a20761a23459"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bab8c06e4b0a20761a2347e"}, {"problem": 30, "code": "(fn [col]\n    (->> col\n        (#(concat % [nil]))\n        (partition 2 1)\n        (filter #(apply not= %))\n        (map first)\n    )\n)", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 30, "code": "(fn [x]\n  (loop [x x\n         result '()\n         prev nil]\n    (if (empty? x)\n      (reverse result)\n      (if (= (first x) prev)\n        (recur (rest x) result (first x))\n        (recur (rest x) (conj result (first x)) (first x))))))", "user": "5550b5a0e4b00713264bd9ad"}, {"problem": 30, "code": "(fn [x]\n  (->> x\n    (map-indexed (fn [i v] [i v]))\n    (butlast)\n    (filter (fn [[i v]] (not= v (nth x (inc i)))))\n    (map second)\n    (reverse)\n    (cons (last x))\n    (reverse)\n))", "user": "5bb905dce4b0a20761a235c7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b329773e4b025bcb146f322"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 30, "code": "(fn compr_seq [seq]\n  \"Removes consecutive duplciates from a seq\"\n  (mapcat set (#(partition-by identity %1) seq)))", "user": "5bbbcecee4b0a20761a23611"}, {"problem": 30, "code": "(fn [x] \n  (map first (partition-by identity x)))", "user": "5baa1b58e4b0a20761a2344e"}, {"problem": 30, "code": "(fn part [coll] (map first (partition-by identity coll)))", "user": "59f4c42ce4b0966464fe6ab6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a68f374e4b0512ff01cda05"}, {"problem": 30, "code": "(fn [old & new]\n  (if (empty? old)\n    (reverse new)\n    (recur (rest old)\n      (if (= (first old) (first new))\n        new\n        (cons (first old) new) \n      )\n    )\n  )      \n)", "user": "5bbd13a5e4b07a9b28b0ff95"}, {"problem": 30, "code": "(fn [xs]\n  (seq (loop [[c & cs] xs\n              p nil\n              acc []]\n         (if-not c\n           acc\n         (recur cs c (if (= c p)\n                       acc\n                       (conj acc c)))))))", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 30, "code": "#(reduce\n   (fn [acc v]\n     (if (= (last acc) v)\n       acc\n       (conj acc v))) [] %)", "user": "5ad4c3d2e4b0ea6055cfabe1"}, {"problem": 30, "code": "(fn [coll] \n  (map first (partition-by identity coll)))", "user": "5bc28638e4b07a9b28b10033"}, {"problem": 30, "code": "(partial reduce (fn [acc c]\n                  (if (= (last acc) c)\n                    acc\n                    (conj acc c)))\n         [])", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 30, "code": "(fn [xs]\n  (reduce\n   (fn [xs elt]\n     (if (= (last xs) elt)\n       xs\n       (conj xs elt)))\n   []\n   xs))", "user": "5bc15685e4b07a9b28b10016"}, {"problem": 30, "code": "(fn compress\n  [lst]\n  (if (empty? lst)\n    ()\n    (if (empty? (rest lst))\n      (list (first lst))\n      (if (not (= (first lst) (first (rest lst))))\n        (cons (first lst) (compress (rest lst)))\n        (compress (rest lst))))))", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bc39d2be4b07a9b28b10045"}, {"problem": 30, "code": "#(->> (into [] %) (partition-by identity) (map first) )", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 30, "code": "(fn cmpr [xs] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] xs))", "user": "5bc20634e4b07a9b28b10022"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 30, "code": "(fn [all-xs]\n  (loop [xs-left all-xs\n         n []]\n    (cond\n      (empty? xs-left) n\n      (= (first xs-left) (last n)) (recur (rest xs-left) n)\n      :else (recur (rest xs-left) (conj n (first xs-left)))\n      )))", "user": "5bb3c9a8e4b0a20761a2352f"}, {"problem": 30, "code": "(fn compress_sequence \n  [seq]\n  \"Removes consecutive duplciates from a sequence\"\n  (mapcat set (#(partition-by identity %1) seq)))", "user": "5bbbd077e4b0a20761a23615"}, {"problem": 30, "code": "(fn[lst] (map first (partition-by identity lst)))", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bb5cd43e4b0a20761a23575"}, {"problem": 30, "code": "(fn [coll]\n    (let [f (fn [acc e]\n                (if (= (last acc) e)\n                    acc\n                    (conj acc e)))]\n        (reduce f [] coll)))", "user": "5bc488bde4b07a9b28b10053"}, {"problem": 30, "code": ";#(map first (partition-by identity %))\n\n(fn compress [[x & xs]]\n   (if xs\n     (if (= x (first xs))\n       (compress xs)\n       (cons x (compress xs)))\n     (list x)))", "user": "543a8256e4b032a45b869327"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 30, "code": "(fn compress\n  [lst]\n  (map first (partition-by identity lst))\n  )", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bc82994e4b07a9b28b100b9"}, {"problem": 30, "code": "#(map last (partition-by identity %))", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 30, "code": "(fn [x]\n  (reduce #(if\n             (not= %2 (last %1))\n             (conj %1 %2)\n             %1)\n          []\n          (seq x)))", "user": "5bb948f5e4b0a20761a235d5"}, {"problem": 30, "code": "(fn compr [coll]\n  (if-let [xs (next coll)]\n    (let [x (first coll) ys (drop-while #(= x %) xs)]\n      (lazy-seq (cons x (compr ys))))\n    coll))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "59d8f23ae4b0ef0a1e9b5c49"}, {"problem": 30, "code": "(fn \n  [lst]\n  (map first (partition-by identity lst))\n )", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 30, "code": "(fn [s]\n  (reverse\n  (reduce (fn [acc x] (\n    if (= x (first acc)) acc (conj acc x))) '() s)))", "user": "59a0286be4b0871e7608b82f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bc611e3e4b07a9b28b10083"}, {"problem": 30, "code": "(fn [xs]\n   (map first\n   (filter \n    (fn [x] \n      (not= (first x) (second x))) \n    (map vector xs (concat (rest xs) [#()]))\n   ))\n)", "user": "5bca2c71e4b07a9b28b100e7"}, {"problem": 30, "code": "(fn no-repeats\n  [lst]\n  (loop [lst lst\n         final []]\n    (if (empty? lst)\n      final\n      (recur\n        (rest lst)\n        (if (= (last final) (first lst))\n          final\n          (conj final (first lst)))))))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a99c5a9e4b0d174b936c7b1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 30, "code": "(fn dedups [[x & xs]]\n  (if-not x\n    []\n    (concat [x] (dedups (drop-while #(= x %) xs)))))", "user": "5bcddaeee4b0e9689409ee07"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bc64843e4b07a9b28b10091"}, {"problem": 30, "code": "(fn [lista] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] lista))", "user": "5bcc9e7ae4b07a9b28b10114"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bca3883e4b07a9b28b100eb"}, {"problem": 30, "code": "(fn [coll]\n  (map first (filter (fn [[x y]] (not (= x y))) (partition-all 2 1 coll))))", "user": "5bc8e91ee4b07a9b28b100ce"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "5b6ba7d7e4b0c6492753e7ad"}, {"problem": 30, "code": "(fn compress \n  [input] \n  (reverse (reduce \n            (fn [value input] \n              (if (= (first value) input) \n                value\n                (conj value input))) \n            '() input)))", "user": "5bcfe2e5e4b0e9689409ee31"}, {"problem": 30, "code": "#(reduce \n    (fn [part x] \n        (if (= (last part) x) \n            part \n            (conj part x))\n    ) \n[] %)", "user": "5bc6ef7ce4b07a9b28b1009f"}, {"problem": 30, "code": "(fn compress [input]\n  (reverse\n    (reduce\n      (fn [output item] (if (= (first output) item) output (conj output item)))\n      '()\n      input)))", "user": "5bc4f266e4b07a9b28b10066"}, {"problem": 30, "code": "(fn [s] \n  (reduce #(if (= (last %) %2)\n             %\n             (conj % %2)) [] s))", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 30, "code": "(fn [coll]\n  (->> coll\n      (partition-by identity)\n      (map first)))", "user": "593870e6e4b02506e01a29d6"}, {"problem": 30, "code": "(fn [items]\n  (loop [result (list (first items))\n         prev (first items)\n         current (second items)\n         left (rest (rest items))]\n    (if (empty? left)\n      (if (not= prev current)\n        (reverse (conj result current))\n        (reverse result))\n      (recur (if (= prev current)\n               result\n               (conj result current))\n             current\n             (first left)\n             (rest left)))))", "user": "554f817ce4b00713264bd9a2"}, {"problem": 30, "code": "(fn [xs]\n  (loop [xs xs\n         acc nil\n         this nil]\n    (if (empty? xs)\n      (reverse acc)\n      (if (= this (first xs))\n        (recur (rest xs) acc this)\n        (recur (rest xs) (cons (first xs) acc) (first xs))))))", "user": "5b673832e4b0c6492753e760"}, {"problem": 30, "code": "(fn [x]\n  (->> x\n    (reverse)\n    (reduce\n      (fn [lst nxt]\n        (if (= (first lst) nxt)\n          lst\n          (cons nxt lst))) '())))", "user": "5bd7b8b8e4b0ed4b8aab4bc6"}, {"problem": 30, "code": "#(->> (partition-by identity %)\n      (map first))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 30, "code": "(fn [s] \n  (reduce (fn [z x] \n            (if (= (last z) x)\n              z\n              (conj z x))) \n          [] \n          s))", "user": "5bd93897e4b0ed4b8aab4bee"}, {"problem": 30, "code": "#(loop [xs % p nil r '()]\n    (if (empty? xs)\n      (reverse r)\n      (let [x  (first xs)\n            xs (rest xs)]\n        (if (= p x)\n          (recur xs x r)\n          (recur xs x (cons x r))))))", "user": "5bd9549ee4b0ed4b8aab4bf0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55ec879ae4b0121d4835fdc8"}, {"problem": 30, "code": "(fn [sequen]\n  (loop [c         sequen\n         to-return []\n         last-c    \"\"]\n    (if (<= (count c) 1)\n      (if (not= (first c) last-c)\n        (conj to-return (first c))\n        to-return)\n      (recur (rest c) (if (not= (first c) last-c)\n                        (conj to-return (first c))\n                        to-return)\n             (first c)))))", "user": "59595f85e4b066ee0a44afa1"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "5bd999cce4b0ed4b8aab4bf4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ba0dcfce4b0c0b3ffbd4b98"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 30, "code": "(fn [x] (loop [x x p nil o []]\n          (if (empty? x)\n            o\n            (if (= (first x) p)\n              (recur (rest x) p o)\n              (recur (rest x) (first x) (conj o (first x)))))))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 30, "code": "(fn[coll]\n(\napply list (reduce \n (fn [a b] \n    (if\n     (=  (last a) b)\n     a\n     (conj  a b)\n    )\n ) \n[] coll)))", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 30, "code": "#(reduce (fn [xs x] (if (not= (last xs) x) (conj xs x) xs)) [] %)", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 30, "code": "(fn __ [s] (let [r (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] s)]\n               (cond\n                 (string? s) (apply str r)\n                 :else r\n                 )\n              )\n  )", "user": "5be2e670e4b0ed4b8aab4ccc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bc7c3aee4b07a9b28b100b2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 30, "code": "(fn [coll]\n    (map first\n         (partition-by identity\n                       coll)))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 30, "code": "(fn [input]\n  (letfn [(helper [in prev acc]\n                  (if (empty? in)\n                    acc\n                    (if (= (first in) prev)\n                      (helper (rest in) prev acc)\n                      (helper (rest in) (first in) (concat (list (first in)) acc)))))]\n    (reverse (helper input nil '()))))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 30, "code": "(fn [xs] \n  (loop [x xs res []] \n    (if (seq x) \n      (recur (rest x) (let [y (take 2 x)] (if (= (first y) (second y)) res (conj res (first x))))) res)))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 30, "code": "reduce #(if (= %2 (peek %1)) %1 (conj %1 %2)) []", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b60e88be4b0c6492753e70b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b7d03a0e4b047b03b20373d"}, {"problem": 30, "code": "(fn [s]\n  (map first \n       (partition-by identity s)))", "user": "55469eede4b0a04f79299542"}, {"problem": 30, "code": "(fn [x]\n  (loop [items x result []]\n  \t(if (empty? items) result\n            (let [first-item (first items)\n              \t second-item (second items)]\n         \t(if (= first-item second-item) (recur (rest items) result)\n              \t    (recur (rest items) (conj result first-item)))))))", "user": "596aaeefe4b069c0a1a19808"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5be909bae4b0f319e2d7ec6d"}, {"problem": 30, "code": ";(fn [value]\n;  (let [auxCol (seq value)]\n;    (loop [s auxCol res []]\n;      (println res)\n;      (if (nil? (first res))\n;        (recur (rest s) (conj res (first s)))\n;        (do\n;          (if (nil? (first s))\n;            res\n;            (do\n;              (if (= (first s) (last res))\n;                (recur (rest s) res)\n;                (do\n;                  (recur (rest s) (conj res (first s))))))))))))\n\n#(map first (partition-by identity %))", "user": "5be589f9e4b0ed4b8aab4d13"}, {"problem": 30, "code": "reduce (fn [a i] (if (= (last a) i) a (conj a i))) []", "user": "5bece6a5e4b0a6d31fed2114"}, {"problem": 30, "code": "#((fn f[x]\n   (loop [col [] x x]\n     (if (not-empty x)\n       (recur (if (not= (last col) (first x)) (conj col (first x)) col) (rest x))\n       col))) (seq %))", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56c50599e4b05cc29241ee9e"}, {"problem": 30, "code": "(fn [xs]\n  (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] xs))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 30, "code": "reduce (fn [p x] (if (= x (last p)) p (concat p (list x)))) \"\"", "user": "5b4b58f2e4b02d533a91bc9c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5be70bd5e4b0f319e2d7ec53"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5be182eae4b0ed4b8aab4c9d"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 30, "code": "#(reduce (fn [acc item] (if (= item (last acc)) acc (into acc [item]))) [] %)", "user": "5bec37e2e4b0f319e2d7ec96"}, {"problem": 30, "code": "#(reverse (reduce \n  (fn [r x] (if (= (first r) x) r (conj r x)))\n  '() %))", "user": "5bf1b957e4b0a6d31fed216f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 30, "code": "reduce\n(fn [x y]\n  (if (= (last x) y)\n    x\n    (conj x y)))\n[]", "user": "5beb8e28e4b0f319e2d7ec8e"}, {"problem": 30, "code": "reduce (fn [col x]  \n         (if (= (last col) x) \n         \tcol \n           \t(conj col x))) []", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 30, "code": "(fn dedupe [sq]\n  (reduce\n    (fn [f s]\n      (if (= (last f) s)\n        f\n        (conj f s))) [] sq))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 30, "code": "reduce #(if-not (= %2 (last %1))\n           (into %1 [%2])\n           %1)\n        '[]", "user": "5b6ccc58e4b0c6492753e7bb"}, {"problem": 30, "code": "(fn [xs]\n  (let [b (into () xs)\n        a (conj b nil)\n        p (map vector a b)\n        f (filter (fn [[n m]] (not= n m)) p)]\n    (reverse (map second f))))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 30, "code": "(fn [x]\n  (map first (partition-by identity x)))", "user": "5be15f4de4b0ed4b8aab4c9b"}, {"problem": 30, "code": "(fn [xs]\n    (loop [xs xs\n           last-char nil\n           ret ()]\n      (cond\n        (empty? xs)\n        (reverse ret)\n\n        :else\n        (recur\n         (rest xs)\n         (first xs)\n         (cond\n           (= (first xs) last-char)\n           ret\n           :else\n           (conj ret (first xs))))\n        )))", "user": "55955c0be4b0c79f6e1db967"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5be8bc2de4b0f319e2d7ec66"}, {"problem": 30, "code": "(fn [a]\n  (map first (partition-by identity a)))", "user": "4ee897fe535d93acb0a66883"}, {"problem": 30, "code": "(fn [s] (reverse (first (rest (reduce #(if (= (first %1) %2)\n                                 %1\n                                 (list %2 (conj (first (rest %1)) %2)))\n                              '(nil ()) s)))))", "user": "5bfa3e02e4b0bdcf453d15ca"}, {"problem": 30, "code": "(fn [l] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] l))", "user": "5a09a6f7e4b01bb0ae8afe14"}, {"problem": 30, "code": "#(reduce (fn [reslist listvalue]\n                        (if (= (last reslist) listvalue)\n                          reslist\n                          (conj reslist listvalue)\n                        )\n              )\n               [] %)", "user": "5bed84b1e4b0a6d31fed2120"}, {"problem": 30, "code": "(fn [seq] (reverse\n           (reduce \n            (fn [x y] \n           (let [newx (if (not (= (type x) clojure.lang.PersistentList)) (conj () x) x)] \n             (if (not (= (first newx) y)) (conj newx y) x))) seq)))", "user": "5bfd9433e4b0bdcf453d1600"}, {"problem": 30, "code": "(fn func\n    [ar]\n    (reduce #(if (empty? %1) (conj %1 %2) (if (= (peek %1) %2) %1 (conj %1 %2))) [] ar)\n\n\n    )", "user": "5b8db323e4b0c0b3ffbd49da"}, {"problem": 30, "code": "(fn [li]\n  (loop [l li\n         r nil]\n    (if (empty? l)\n      (reverse r)\n      (if (= (first r) (first l))\n        (recur (rest l) r)\n        (recur (rest l) (conj r (first l)))))))", "user": "5ac9c737e4b0e27600da77d2"}, {"problem": 30, "code": "reduce\n(fn [r x]\n  (if (not= (peek r) x)\n    (conj r x)\n    r)\n  ) []", "user": "5c01ba2ce4b0bdcf453d1656"}, {"problem": 30, "code": "( fn foo[x]\n\n    (if (> (count x) 0)\n    \n    (do\n    \n    (if (not= (first x) (first (rest x)))\n    \n       (conj (foo (rest x)) (first x))\n       \n        \n        (foo (rest x))\n    \n    )\n    )\n    )\n    \n    )", "user": "5bed1e4ae4b0a6d31fed2118"}, {"problem": 30, "code": "(fn [s] (map #(first %) (partition-by identity s)))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 30, "code": "#(reverse(reduce (fn [lst elem] \n   (if (= (first lst) elem)\n        lst\n        (conj lst elem) \n   )\n   \n) '()  %))", "user": "5beebdb7e4b0a6d31fed2132"}, {"problem": 30, "code": "(fn [xs]\n  (mapcat (fn [[f s]] (if (= f s) (empty f) (list f)))\n    (partition 2 1\n      (concat xs (list (not (last xs)))))))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 30, "code": ";(reduce (fn [r x] (if (includes? r x) r (conj r x))) ; doesn't seem to work\n#(map first (partition-by identity %))\n;#(map last (partition-by list %))", "user": "5bfc082be4b0bdcf453d15e1"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "5be9d530e4b0f319e2d7ec79"}, {"problem": 30, "code": "#(loop [prev nil\n         remaining %\n         result (empty %)]\n    (let [curr (first remaining)]\n      (if (nil? curr)\n        result\n        (recur curr\n               (rest remaining)\n               (if (= curr prev)\n                 result\n                 (concat result [curr]))))))", "user": "5bef3e88e4b0a6d31fed213f"}, {"problem": 30, "code": "(fn [coll]\n  (loop [e (first coll)\n         coll (rest coll)\n         res [e]]\n    (if (empty? coll)\n      res\n      (let [x (first coll)]\n        (if (= x e)\n          (recur x (rest coll) res)\n          (recur x (rest coll) (conj res x)))))))", "user": "5c04464ee4b0bdcf453d167d"}, {"problem": 30, "code": "(fn [s] (second (reduce (fn [[prev ret] x] (if (= prev x) [prev ret] [x (conj ret x)])) [(first s) (vector (first s))] s)))", "user": "5c092334e4b0bdcf453d16ea"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c0a87e6e4b0bdcf453d1707"}, {"problem": 30, "code": "#(reduce (fn [res elem] (if (= (last res) elem) res (conj res elem))) [] %)", "user": "5c05cae7e4b0bdcf453d16a3"}, {"problem": 30, "code": "#(reverse \n  (loop [s % r ()]\n    (if (empty? s)\n      r\n      (recur\n        (rest s) \n        (if (= (first s)\n               (first r)) \n          r\n          (conj r (first s))\n        )\n      )\n    )\n  )                    \n)", "user": "5c0d0537e4b0bdcf453d173d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c0e22cae4b01240ff56713b"}, {"problem": 30, "code": "(fn [s]\n  (loop [ss s, e (first s), r ()]\n    (if (empty? ss)\n      (reverse (cons e r))\n      (if (= (first ss) e)\n        (recur (rest ss) e r)\n        (recur (rest ss) (first ss) (cons e r))))))", "user": "5141e978e4b0b50abeb46b20"}, {"problem": 30, "code": "#(apply list (reduce (fn [col el] (if (= (last col) el) col (conj col el))) [] (apply vector %)))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5c119da6e4b01240ff56717d"}, {"problem": 30, "code": "(fn [coll] (reduce (fn [res item] (if (= (last res) item) res (conj res item))) []  coll) )", "user": "5c1229d5e4b01240ff567188"}, {"problem": 30, "code": "(fn [items]\n    (reduce (fn [a b] (if (= (last a) b)\n                        a\n                        (conj a b))) [] items))", "user": "57131a8ee4b07c98581c3a97"}, {"problem": 30, "code": "(fn [coll]\n  (let [value (first coll)]\n    (loop [result [value], [next & others :as acc] (rest coll), prev value]\n      (if (empty? acc) \n        result\n        (let [result-with-next (conj result next)]\n          (if (= next prev)\n            (recur result others prev)\n            (recur result-with-next others next)))))))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 30, "code": "(fn [lst] (reduce\n                       (fn [agg next](if (= (last agg) next)\n                                       agg\n                                       (reverse (cons next (reverse agg)))))\n                       ()\n                       lst\n                       ))", "user": "5bfc2068e4b0bdcf453d15e4"}, {"problem": 30, "code": "#((fn [s t] (if (empty? s) t (if (= (last t) (first s)) (recur (rest s) t) (recur (rest s) (conj t (first s)))) )) % [])", "user": "5c13ce5ee4b01240ff5671a4"}, {"problem": 30, "code": "(fn \n  [ss] \n  (reduce \n  (\n   fn [s n] (if (= (last s) n) s (conj s n))\n  ) \n  [] ss\n))", "user": "5b8ec146e4b0c0b3ffbd49f0"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [acc curr]\n            (if (= (first acc) curr)\n              acc\n              (cons curr acc))) () (reverse coll)))", "user": "5c15537ae4b01240ff5671bf"}, {"problem": 30, "code": "#(reduce (fn [acc el] (if (not= (last acc) el) (conj acc el) acc)) [] %)", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn [xs cur]\n            (if (= (last xs) cur)\n              xs\n              (conj xs cur))) [] xs)\n  )", "user": "5c1840eae4b01240ff5671eb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 30, "code": "(fn [x]\n  (let [r (reduce (fn [coll x]\n                    (if (= (last coll) x)\n                      coll\n                      (conj coll x)))\n                  []\n                  x)]\n    (if (string? x) (apply str r) r)))", "user": "5c1bee41e4b01240ff567218"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 30, "code": "reduce\n   (fn [a b]\n     (if (= (last a) b)\n      a \n      (conj a b))\n     )\n   \n  []", "user": "58273e82e4b051871117bf1b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56215da7e4b03f08ee9a921b"}, {"problem": 30, "code": "(fn compress\n[x]\n(loop [current-ent x\n       final []]\n (if (= 0 (count current-ent))\n    final\n    (if (= (first current-ent) (last final))\n      (recur (rest current-ent) final)\n      (recur (rest current-ent) (conj final (first current-ent)))\n    )\n )))", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 30, "code": "#(seq (reverse (get\n                  (reduce (fn [[acc pre] x]\n                            (if (= pre x)\n                              [acc x]\n                              [(conj acc x) x])) [] %)\n                  0)))", "user": "5c17467fe4b01240ff5671df"}, {"problem": 30, "code": "(fn [nums] \n  (loop [nums nums res nil]\n    (cond\n     (empty? nums) (reverse res)\n     (= (first nums) (first res)) (recur (rest nums) res)\n     :else (recur (rest nums)(conj res (first nums)))\n     )\n   ))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 30, "code": "#(reverse (reduce (fn [xs x] (if (= x (first xs)) xs (conj xs x))) '() %))", "user": "5c228b51e4b07e362c23058c"}, {"problem": 30, "code": "(fn remDuplicateSec\n  [s]\n  (reduce #(if (not=  (last %1) %2) (conj %1 %2) %1) [] s)\n  )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 30, "code": "(fn compress\n  [xs]\n  (reduce (fn [accum x]\n            (if (= x (last accum))\n              accum\n              (concat accum (list x))))\n          (list (first xs))\n          (rest xs)))", "user": "5c222b7de4b07e362c230588"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c2195dce4b07e362c230580"}, {"problem": 30, "code": "(fn me [[a b & r]] \n    (println \"a:\" a \"b:\" b \"r:\" r)\n    (cond\n      (nil? a) '()\n      (nil? b) (list a)\n      (= a b) (lazy-seq (me (cons a r)))\n      :else (lazy-seq (cons a (me (cons b r))))  \n  ))", "user": "5c219c0fe4b07e362c230581"}, {"problem": 30, "code": "(fn compress-seq [xs]\n  (let [s (seq xs)]\n    (loop [tail s\n           rez '()]\n          (if (= '() tail)\n              rez\n              (recur (drop-while #(= (first tail) %) tail) (concat rez (list (first tail))))))))", "user": "5776903ee4b0979f8965163b"}, {"problem": 30, "code": "(fn [in]\n    (loop [res [(first in)]\n           left (rest in)]\n      (if (empty? left)\n        (lazy-seq res)\n        (recur\n          (if (= (first left) (last res))\n            res\n            (conj res (first left))\n          )\n          (rest left)\n        )\n      )\n    )\n  )", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 30, "code": "(fn compress-sequence [input]\n  (filter #(not= % nil) \n          (map (fn [char1 char2] (if (not= char1 char2) char1 nil)) input (conj (into [] (rest input)) nil))))", "user": "5c196dc3e4b01240ff5671fa"}, {"problem": 30, "code": "(fn [coll]\n  (loop [[head & remaining] coll\n       collector []]\n    (if (nil? head)\n      collector\n        (if (not (= head (last collector)))\n          (recur remaining (conj collector head))\n          (recur remaining collector)))))", "user": "58d6caf5e4b03c36ff7e5975"}, {"problem": 30, "code": "(partial reduce (fn [a x] (if (= (last a) x) a (conj a x))) [])", "user": "5c272f82e4b07e362c2305cb"}, {"problem": 30, "code": "(fn compress\n  ([input]\n   (compress input [] nil))\n  ([[first & rest]\n    compd\n    prev]\n   (if (nil? first)\n     compd\n     (if (= prev first)\n       (recur rest compd prev)\n       (recur rest (conj compd first) first)))))", "user": "5c195cb2e4b01240ff5671f7"}, {"problem": 30, "code": "(fn [s] (reduce (fn [acc elt]\n                  (if (= (last acc) elt)\n                    acc\n                    (concat acc (list elt)))) '() (seq s)))", "user": "5c284f14e4b07e362c2305d6"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= b (last a)) a (conj a b))) [] %)", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 30, "code": "(fn compress[coll]\n  (loop [[a & more :as all] coll\n         acc []]\n    (if all\n      (recur more (if (= a (first more)) acc (conj acc a)))\n      acc\n    )\n  )\n)", "user": "5ba75fdfe4b0a20761a23419"}, {"problem": 30, "code": "(fn [coll] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 30, "code": "(fn func [x] (reduce (fn [result nextElement]\n                  (if (empty? result)\n                    (conj result nextElement)\n                    (if (not (= nextElement (last result)))\n                      (conj result nextElement)\n                      result))) [] x))", "user": "5c24c654e4b07e362c2305a7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 30, "code": "(partial reduce (fn [acc x]\n                  (if (= x (last acc))\n                    acc\n                    (concat acc (list x))))\n         '())", "user": "5c2d1f63e4b0d62ef62d9ef0"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (= %2 (last %1))\n             %1\n             (concat %1 (list %2)))\n          '()\n          s))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "582c986ee4b051871117bf9b"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5c31517de4b0d62ef62d9f28"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c316de5e4b0d62ef62d9f2b"}, {"problem": 30, "code": "#(let [deduped (map first (partition-by identity %))]\n   (if (string? %)\n     (apply str deduped)\n     deduped))", "user": "5c2f0cdfe4b0d62ef62d9f09"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c32ea85e4b0d62ef62d9f3e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c0fedade4b01240ff567157"}, {"problem": 30, "code": "(fn remove-cosuctive-duplicates\n  [s]\n  (loop [result [] [x & xs] s]\n    (cond\n      (nil? x) result\n      (= (last result) x) (recur result xs)\n      :else (recur (conj result x) xs ))))", "user": "5c36d110e4b0d62ef62d9f6a"}, {"problem": 30, "code": "(fn f[se]\n  (loop [x se\n         y (empty se)]\n    (if (empty? x)\n      y\n      (if (= (first x) (fnext x))\n        (recur (next x) y)\n        (recur (next x) (concat y [(first x)]))\n      )\n    )\n  )  \n)", "user": "5c337305e4b0d62ef62d9f48"}, {"problem": 30, "code": "(fn [coll]\n  (let [coll (if (string? coll)\n              (clojure.string/split coll #\"\")\n               coll)]\n    (reduce (fn [aggr el]\n              (if (= el (last aggr))\n                aggr\n                (conj aggr el))) [] coll)))", "user": "5c06f6e3e4b0bdcf453d16bb"}, {"problem": 30, "code": "(fn [xs]\n    (->> xs\n         (reduce (fn [[acc old] a]\n                   (if (= a old)\n                     [acc a]\n                     [(concat acc [a]) a]))\n                 [[] 'oldie])\n         first))", "user": "5c3a896be4b0d62ef62d9f94"}, {"problem": 30, "code": "(fn remove-consecutive-duplicates\n  [s]\n  (loop [result [] [x & xs] s]\n    (cond\n      (nil? x) result\n      (= (last result) x) (recur result xs)\n      :else (recur (conj result x) xs ))))", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 30, "code": "(fn [l r] \n   (if (= (count r) 0) l (  if (= (last l) (first r)) \n             (recur l (rest r)) \n             (recur (conj l (first r)) (rest r) )))) []", "user": "5c35acffe4b0d62ef62d9f62"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 30, "code": "(fn t1 [x]\n  (loop [x x y []]\n    (if (> 1 (count x))\n      y\n      (if (= (first x) (second x))\n        (recur (rest x) y)\n        (recur (rest x) (conj y (first x)))\n        ))))", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 30, "code": "#(map last (partition-by list %))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 30, "code": "(fn [s] (reduce (fn [s1 x] (if (not= (last s1) x) (concat s1 (list x)) s1 )) (list (first s)) (rest s)) )", "user": "5c32603ee4b0d62ef62d9f38"}, {"problem": 30, "code": "(fn dedup [coll]\n  (->> coll\n       (partition-by identity)\n       (map first)\n       ))", "user": "54d90b36e4b0a52adc2e2049"}, {"problem": 30, "code": "#(reverse\n  (reduce (fn [x y]\n            (if (= (first x) y)\n              x\n              (conj x y)))\n          ()\n          %))", "user": "5c3ec6dbe4b08cd430848e8a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c0614f6e4b0bdcf453d16a9"}, {"problem": 30, "code": "reduce (fn [acc s]\n           (if (not= (last acc) s)\n             (conj acc s)\n             acc)) []", "user": "5c2dfca3e4b0d62ef62d9efc"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5c374db6e4b0d62ef62d9f73"}, {"problem": 30, "code": "(fn [startcol]\n  (\n    loop [col startcol acc []]\n    (if (empty? col)\n      acc\n\n      (if (= (first col) (last acc))\n        (recur (rest col) acc)\n        (recur (rest col) (conj acc (first col)))\n        )\n      )\n    )\n  )", "user": "53b0750fe4b047364c044483"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c408a61e4b08cd430848eb2"}, {"problem": 30, "code": "reduce\n(fn [new-seq item]\n  (if (= (last new-seq) item)\n    new-seq\n    (conj new-seq item))) []", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 30, "code": "#_(fn compress [coll]\n    (if (empty? coll)\n      ()\n      (let [fst (first coll)\n            nxt (next coll)]\n        (if (= fst (first nxt))\n          (compress nxt)\n          (conj (compress nxt) fst)))))\n\n(fn [coll]\n    (map first (partition-by identity coll)))", "user": "529e3258e4b04e0c58e87b8d"}, {"problem": 30, "code": "(fn my-comp [xs]\n  (map first (partition-by identity xs)))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 30, "code": "reduce (fn [r x]\n          (if (= (last r) x)\n            r\n            (conj r x)\n            )\n          ) []", "user": "5c3fab3de4b08cd430848e9e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57635e2de4b0994c1922fbbf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 30, "code": "(fn cprs [x] \n  (if (= (count x) 1)\n    x\n    (if (= (first x) (second x))\n      (cprs (rest x))\n      (cons (first x) (cprs (rest x)))\n     )\n   )\n  )", "user": "5c4a08c5e4b0f9f7a8770e4f"}, {"problem": 30, "code": "(fn rem-dup [s]\n  (if(empty? s)(sequence '())\n    (if(= (first s)(second s))\n      (rem-dup (rest s))\n      (conj (rem-dup (rest s))(first s)))))", "user": "5c486dece4b0e06e1360a3c0"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (not= (last %1) %2)\n             (conj %1 %2)\n             %1) [] s))", "user": "502ea967e4b06efe12e8cc76"}, {"problem": 30, "code": "#(loop[l %, r [] ]\n (let   [fi (first l ) la (last r)]\n        (if (nil? l)\n          r\n          (let [rnext (if (= fi la) r (conj r fi ))]\n          (recur (next l) rnext)))))", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 30, "code": "(fn\n  [collection]\n\n  (map first\n       (partition-by identity collection)\n  )\n)", "user": "5c493046e4b0e06e1360a3cb"}, {"problem": 30, "code": "(fn f [s] \n   (let [f* \n         (fn [acc s*] \n           (if (not= (last acc) s*) \n                 (conj acc s*) \n                 acc))] \n     (reduce f* [] s)))", "user": "5c46bdbde4b0e06e1360a3a4"}, {"problem": 30, "code": "(fn dedupe\n  [s]\n  (reduce\n    #(if-not (= (last %1) %2)\n       (conj %1 %2)\n       %1)\n    [] s))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 30, "code": "(fn compress [coll] \n  (map first (partition-by identity coll)))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 30, "code": "(fn [seq](reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] seq))", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 30, "code": "#(loop [input (seq %) result []]\n   (if (empty? input)\n     result\n     (recur \n      (rest input)\n      (if\n       (not= (first input) (second input))\n        (conj result (first input))\n        result)\n      )))", "user": "5c4c74efe4b0f9f7a8770e76"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input, res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i)))))))", "user": "5c50de36e4b0fb8c5ffd99bc"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 30, "code": "(fn [s]\n  (map first (partition-by identity (seq s))))", "user": "5c50048ae4b0f9f7a8770eb9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c4ad616e4b0f9f7a8770e5a"}, {"problem": 30, "code": "(fn [xs]\n  (loop [xs xs\n             prev nil\n             ys []]\n    (let [h (first xs)]\n      (if-not h\n        ys\n        (recur \n           (rest xs) \n            h \n           (if (= prev h) \n             ys \n             (conj ys h)))))))", "user": "558ea13be4b0277789237654"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 30, "code": "(fn [xs]\n  (-> (fn [[acc prev] next]\n        (if (= prev next)\n          [acc prev]\n          [(conj acc next) next]))\n      (reduce [] xs)\n      first\n      reverse))", "user": "51cf0993e4b0e42293a2256a"}, {"problem": 30, "code": "(fn red [x] (let [f (first x)] (if (empty? x) nil (concat [f] (red (drop-while #(= f %) x))))))", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c582e7be4b0fb8c5ffd9a55"}, {"problem": 30, "code": "#(reduce (fn [s n] (if (= (last s) n) s (conj s n))) [] %)", "user": "5c53127ee4b0fb8c5ffd99ef"}, {"problem": 30, "code": "reduce (fn [a b] (if (= (last a) b) a (concat a (list b)))) '()", "user": "5c527129e4b0fb8c5ffd99de"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "5bc09ebae4b07a9b28b10005"}, {"problem": 30, "code": "#(reduce (fn [acc x] (if (= (last acc) x) acc (conj acc x))) [] %)", "user": "5c196e7be4b01240ff5671fb"}, {"problem": 30, "code": "#(->> %\n       (partition-by identity)\n       (map first))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c481764e4b0e06e1360a3ba"}, {"problem": 30, "code": "(fn [lst] (map #(first %) (partition-by identity lst)))", "user": "5c59b1d3e4b01df32ab73261"}, {"problem": 30, "code": "(fn [xs] (\n  (fn l [xs n ys] (if (not= n -1)\n    (if (= (nth xs n) (nth xs (+ n 1)))\n      (l xs (- n 1) ys)\n      (l xs (- n 1) (cons (nth xs n) ys)))\n    (conj (into [] ys) (last xs)))\n  ) xs (- (count xs) 2) [])\n)", "user": "5c3de434e4b0d62ef62d9fb8"}, {"problem": 30, "code": "(fn [col]\n  (reverse (reduce (fn [result item]\n                     (if (= item (first result))\n                       result\n                       (conj result item)))\n                   ()\n                   col)))", "user": "579dd954e4b05b1deef9ae1b"}, {"problem": 30, "code": "(fn [s] (reduce (fn [s e] (if (= (last s) e) s (conj s e))) [] s))", "user": "5549ca1ce4b0a04f7929956c"}, {"problem": 30, "code": "#(reduce (fn [acc x] \n           (if (= (last acc) x) acc (conj acc x))) \n         [] %)", "user": "5af4446de4b0cc2b61a3bc93"}, {"problem": 30, "code": "(fn f [lst]\n   (cond (empty? lst) nil\n         (= (first lst) (second lst)) (f (rest lst))\n         :else (cons (first lst) (f (rest lst)))))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c58736be4b01df32ab73247"}, {"problem": 30, "code": "(fn\n  compress\n  [coll]\n  (if (empty? coll)\n    '()\n    (let\n      [el (first coll)]\n      (lazy-seq\n        (cons\n          el\n          (compress (drop-while #(= % el) coll)))))))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [c n] (if (= n (last c)) c  (conj c n))) [] coll))", "user": "592883f1e4b072a2710fceea"}, {"problem": 30, "code": "(fn remove-dups [s]\n  (if (empty? s) \n    s\n    (loop [el (first s) s (rest s) ans [el]]\n      (if (empty? s) \n        ans\n        (if (= el (first s))\n          (recur el (rest s) ans)\n          (recur (first s) (rest s) (conj ans (first s))))))))", "user": "5c6314c5e4b0fca0c1622658"}, {"problem": 30, "code": "(fn [coll]\n   (loop [[f & r] coll\n          res '()]\n     (if (nil? f)\n       res\n       (if (= (last res) f)\n         (recur r\n                res)\n         (recur r\n                (concat res\n                        (list f)))))))", "user": "5c5d2e90e4b01df32ab732af"}, {"problem": 30, "code": "(fn rd\n  ([col] (rd col []))\n  (\n   [col acc]\n   (if (empty? col)\n     (apply list acc)\n     (if (= (last acc) (first col))\n       (rd (rest col) acc)\n       (rd (rest col) (conj acc (first col)))\n       )\n     )\n   )\n  )", "user": "5a89997de4b05369db4d24c4"}, {"problem": 30, "code": "reduce (fn [x y] (if (not= (last x) y) (conj x y) x)) []", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 30, "code": "#(reduce (fn [acc y]\n            (if (= (last acc) y)\n              acc\n              (conj acc y)))\n          []\n          %)", "user": "4e617114535d8ccf87e9fe5b"}, {"problem": 30, "code": "(fn [x]\n  (loop [curr x\n         ret '()]\n    (if (= (count curr) 0)\n      ret\n      (if (= (first curr) (last ret))\n        (recur (rest curr) ret)\n        (recur (rest curr) (concat ret (cons (first curr) '())))\n   \t  )\n    )\n  )\n)", "user": "5c3f6322e4b08cd430848e97"}, {"problem": 30, "code": "(fn my-compress\n    ([seq]\n     (let [first-ele (first seq)\n           second-ele (second seq)]\n        (cond\n            (empty? seq) ()\n            (string? seq) (my-compress (into [] seq))\n                (=  first-ele second-ele)\n                    (my-compress (rest seq))\n                :else (conj (my-compress (rest seq))\n                            (first seq))))))", "user": "59cd351ee4b0ef0a1e9b5b35"}, {"problem": 30, "code": "(fn [x] \n  (->> x\n       (partition-by identity)\n       (map first)))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c66d5d3e4b0fca0c16226af"}, {"problem": 30, "code": "#(first (reduce (fn [[x y] z] [(if (= y z) x (conj x z)) z]) [[] nil] %))", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 30, "code": "(fn no-dupe [xs]\n  (let [f (first xs)\n        s (second xs)]\n  (cond (empty? xs) '()\n        (= f s) (no-dupe (rest xs))\n        :else (cons f (no-dupe (rest xs))))))", "user": "58b12635e4b0ebc645576cf4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c596d6ce4b01df32ab73257"}, {"problem": 30, "code": "(fn [st]\n    (loop [last '()\n           l st\n           res []]\n      (if (nil? (first l))\n        res\n        (if (= last (first l))\n          (recur (first l) (rest l) res)\n          (recur (first l) (rest l) (conj res (first l)))\n          )\n        )\n      )\n    )", "user": "5b269cf3e4b063e2438bcc35"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5c41db45e4b08cd430848ece"}, {"problem": 30, "code": "(fn\n  [x]\n  (loop [coll x\n         com []]\n    (cond\n     (empty? coll) com\n     (= (last com) (first coll)) (recur (rest coll) com)\n     :else (recur (rest coll) (conj com (first coll)))\n     )\n    )\n  )", "user": "5c6cb3bfe4b0fca0c1622730"}, {"problem": 30, "code": "(fn no-repeats [s]\n  (loop [s s\n         acc []]\n    (if (empty? s)\n      acc\n      (let [same? (= (last acc) (first s))]\n        (recur (rest s) (if same? acc (conj acc (first s))))))))", "user": "5c5dddafe4b01df32ab732bb"}, {"problem": 30, "code": "#(reduce (fn [seq item]\n            (if (= item (last seq))\n              seq\n              (concat seq [item]))\n            ) (take 1 %) (drop 1 %))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 30, "code": "(fn uniq\n  ([x] (uniq (first x) (rest x) [(first x)]))\n  ([current q acc]\n   (if (empty? q)\n     acc\n     (if (= (first q) current)\n       (uniq (first q) (rest q) acc)\n       (uniq (first q) (rest q) (conj acc (first q)))))))", "user": "5c37d6fce4b0d62ef62d9f7b"}, {"problem": 30, "code": ";(fn f [x] (loop [r [] c x]\n;          (cond (empty? c) r\n;                (= (first c) (second c)) (recur r (rest c))\n;                :else (recur (conj r (first c)) (rest c)))))\n\n;#(map first (partition-by identity %)) \n\n\n(fn compress [x] (for [i (range (count x)) :when (not (= (get x i)(get x (dec i))))] (get x i)   ))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 30, "code": "#(reduce \n  (fn [coll e] \n    (if (not= e (last coll)) \n      (conj coll e) \n      coll)) \n  [] %)", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 30, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (if (= (first acc) r)\n        (recur more acc)\n        (recur more (conj acc r)))\n      (reverse acc))))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 30, "code": "(fn [c]\n  (:result\n   \t(reduce\n      (fn [acc e]\n        (if (= e (:last acc))\n          acc\n          {:result (conj (:result acc) e)\n           :last e}))\n      {:result [(first c)] :last (first c)}\n      (next c))))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c6da283e4b0fca0c162273e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c5b246ae4b01df32ab73286"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 30, "code": "(fn compress\n  [params]\n  \"http://www.4clojure.com/problem/28\"\n  (reduce (fn [prev curr]\n            (if (= (peek prev) curr)\n              prev\n              (conj prev curr)))\n          []\n          params))", "user": "5c73bcf9e4b0fca0c16227bb"}, {"problem": 30, "code": "#(map first\n (filter \n (fn [[f s]] \n  (not= f s)) \n (partition-all 2 1 %)))", "user": "5c395c65e4b0d62ef62d9f8a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 30, "code": "(fn\n  [string]\n  ((fn inner \n      [output [fi & ri :as input]]\n      (cond\n        (= fi nil) (do (println \"done\") (reverse output))\n        (= output '()) (do (println \"start\") (inner (cons fi '() ) ri))\n        (= (first output) fi) (do (println \"skip \" output) (inner output ri))\n        :else (do (println \"add \" output ) (inner (cons fi output) ri)\n                  )\n        )\n     \n\n     )'() string))", "user": "5c75a30ee4b0fca0c16227df"}, {"problem": 30, "code": "(fn [input]\n  (reduce\n   (fn [f s]\n     (if (= (last f) s)\n       f\n       (conj f s)))\n   [] (seq input)))", "user": "5b9783dae4b0c0b3ffbd4a93"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c72c2b9e4b0fca0c16227ab"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c787131e4b0fca0c1622825"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c792c34e4b0fca0c1622834"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59ab61f1e4b08cbb53654d9b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "4dbd8388535d020aff1edf46"}, {"problem": 30, "code": "(fn [a]\n  (map first (partition-by identity a)))", "user": "5c0eb93ce4b01240ff567146"}, {"problem": 30, "code": "(fn compr [s] (cond \n               (= (count s) 1) s\n               (= (first s) (first (rest s))) (compr (rest s))\n               :else (concat (take 1 s) (compr (rest s)))))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 30, "code": "(fn [input-seq] (reduce\n                  #(if-not (= (last %1) %2)\n                     (conj %1 %2)\n                     %1)\n                  []\n                  input-seq))", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c6e7cc1e4b0fca0c1622752"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '()  x))", "user": "5b100648e4b0cc2b61a3be17"}, {"problem": 30, "code": "(fn [s]\n  (loop [last-ok nil\n         result []\n         curr (first s)\n         remaining (rest s)]\n    (if (nil? curr)\n      result\n      (if (= last-ok curr)\n        (recur last-ok result (first remaining) (rest remaining))\n        (recur curr (conj result curr) (first remaining) (rest remaining))))))", "user": "5c62f1cde4b0fca0c1622655"}, {"problem": 30, "code": "(fn [sq] (reduce\n            (fn [nsq curr]\n              (if (not (= (last nsq) curr)) (concat nsq (list curr)) nsq)\n              ) '() sq))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 30, "code": "(fn compress [sequ]\n  (loop [s sequ res []]\n    (if (empty? s)\n      res\n      (recur (rest s) (if (= (first s) (second s))\n                        res\n                        (conj res (first s)))))))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 30, "code": "(fn [s]\n  (\n    (fn rd [cl ws ds]\n      (if (empty? ws)\n        ds\n        (if (= cl (first ws))\n          (rd cl (rest ws) ds)\n          (rd (first ws) (rest ws) (conj ds (first ws))))))\n   nil s []))", "user": "5c7ef3f3e4b0d597f478cad7"}, {"problem": 30, "code": "(fn compress-seq [[frst & remaining]]\n  (if (nil? frst) [] (if (= frst (first remaining))\n                           (into [] (compress-seq remaining))\n                           (into [frst] (compress-seq remaining)))))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 30, "code": "(fn [a]\n (map #(first %) (partition-by identity a)))", "user": "5c7eaadfe4b0d597f478cace"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c8002cde4b0c8042a70ce09"}, {"problem": 30, "code": "(fn [n] (map first (partition-by identity n)))", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 30, "code": "(fn [coll]\n   (reduce (fn [acc item]\n             (if (= (last acc) item) \n               acc\n               (conj acc item)))\n           [(first coll)] (rest coll)))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c26c9b3e4b07e362c2305c5"}, {"problem": 30, "code": "(fn [coll] (filter (comp not nil?) (reduce #(conj % (if (not(= %2 (last (filter (comp not nil?)%))))\n                                            %2)) [] coll)))", "user": "5c813b27e4b0c8042a70ce22"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bcf0b1be4b0e9689409ee24"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c8319c3e4b0c8042a70ce45"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 30, "code": "(fn compress\n  [lst]\n  (let [l (partition-by identity lst)\n        result (concat '() (map (fn [x] (first x)) l))]\n    result))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 30, "code": "(fn lstCompress [x] (map first (partition-by identity x)))", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 30, "code": "(fn [l]                                                                                                 \n  (let [res-atom (atom '())]                                                                                   \n  \t(doseq [x l]                                                                                                \n    \t(when (not= (first @res-atom) x)                                \n      \t\t(swap! res-atom (fn [c] (conj c x)))))                                                                \n  \t\t(reverse @res-atom)))", "user": "5c558070e4b0fb8c5ffd9a1e"}, {"problem": 30, "code": "(fn [x] (map #(first %) (partition-by identity x)))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "5c81c933e4b0c8042a70ce2d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5be96111e4b0f319e2d7ec70"}, {"problem": 30, "code": "(fn [col]\n  (reduce (fn [acc next-item]\n            (let [last-item (last acc)]\n              (if (= next-item last-item)\n                acc\n                (conj acc next-item))))\n          []\n          col))", "user": "56ee905be4b04a395b9a044f"}, {"problem": 30, "code": "(fn comp-seq [n]\n(map first (partition-by identity n)))", "user": "5c8860bce4b048ec896c5928"}, {"problem": 30, "code": "(fn comp-seq [n]\n(map first (partition-by identity n)))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c70641de4b0fca0c162277f"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5c7bb8c0e4b0fca0c1622864"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "5c852e3ae4b0c8042a70ce78"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c7741dce4b0fca0c1622806"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c706454e4b0fca0c1622780"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c8ecb58e4b048ec896c59b0"}, {"problem": 30, "code": "(fn [coll]\n  (reduce #(if (= (last %1) %2)\n            %1\n      (conj %1 %2))\n    []\n    coll))", "user": "5c79030be4b0fca0c1622830"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c8fd8f3e4b048ec896c59c7"}, {"problem": 30, "code": "(fn [the-seq]\n  (map first (partition-by identity the-seq)))", "user": "5c86b769e4b0c8042a70ce9b"}, {"problem": 30, "code": "(fn [s]\n  (reduce \n    (fn [acc item]\n      (if (= item (last acc))\n        acc\n        (conj acc item)))  \n    [] s))", "user": "566a0845e4b04acd4f672e05"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c91ae79e4b048ec896c59eb"}, {"problem": 30, "code": "(fn compress-seq\n  [coll]\n  (loop [in coll\n         last nil\n         out ()]\n    (cond\n      (empty? in)\n      (reverse  out)\n\n      (nil? last)\n      (recur (rest in) (first in) (cons (first in) out))\n\n      (= (first in) last) \n      (recur (rest in) (first in) out)\n\n      :else\n      (recur (rest in) (first in) (cons (first in) out)))))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 30, "code": "(fn [n]\n  (map first (partition-by identity n)))", "user": "5c891afde4b048ec896c5935"}, {"problem": 30, "code": "(fn [x]\n  (loop [lista (conj [] (first x))\n         element (first x)\n         ostatak (rest x)]\n    (if (empty? ostatak) lista (if (= (first ostatak) element) (recur lista element (rest ostatak))\n                                 (recur (conj lista (first ostatak)) (first ostatak) (rest ostatak))))))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 30, "code": "(fn [input]\n  (loop [input input\n         output []\n         last nil]\n    (if (= 0 (count input))\n      output\n      (if (= last (first input))\n        (recur (rest input) output last)\n        (recur (rest input) (conj output (first input)) (first input))))))", "user": "5b6002c2e4b0c6492753e6fb"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5c987160e4b048ec896c5a82"}, {"problem": 30, "code": "(comp (partial map first) (partial partition-by identity))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 30, "code": "(partial reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [])", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 30, "code": "(fn [sq]\n          (reduce (fn [result s]\n                    (if (= (last result)\n                           s)\n                      result\n                      (conj result s))) [] sq))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "5c92161de4b048ec896c59f9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c9d0a0be4b048ec896c5afc"}, {"problem": 30, "code": "(fn [in]\n(let [in-seq (seq in)]\n (reduce\n #(if (not (= (last %1) %2))\n   (conj %1 %2)\n   (identity %1))\n [(first in)] in-seq)))", "user": "510608ebe4b01150e115ebe3"}, {"problem": 30, "code": "#(reduce\n  (fn [m a]\n    (if (= (last m) a)\n      m\n      (conj m a)))\n  []\n  %)", "user": "5c9c79a6e4b048ec896c5ae8"}, {"problem": 30, "code": "(fn [xs]\n  (reduce #(if (not= (last %1) %2 ) (concat %1 (list %2)) %1) '() xs))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 30, "code": "(comp reverse (partial (fn [ign accum l]\n                                (println ign accum l)\n                                (cond\n                                  (empty? l) accum\n                                  (= (first l) ign) (recur ign accum (rest l))\n                                  :else (recur (first l) (cons (first l) accum) (rest l))))\n                              nil ()))", "user": "573d27b4e4b05c31a32c080f"}, {"problem": 30, "code": "(fn [in] (map first (partition-by identity in)))", "user": "5c94cbb1e4b048ec896c5a3d"}, {"problem": 30, "code": "#(loop [s %,res []] (if (empty? s) res (recur (rest s) (if (= (first s) (last res)) res (conj res (first s))))))", "user": "5ca19c10e4b048ec896c5b81"}, {"problem": 30, "code": "(fn [x] (reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] x))", "user": "5c97b621e4b048ec896c5a74"}, {"problem": 30, "code": "(fn [s] (loop [sq s dups '()]\n    (if (empty? sq)\n      (reverse dups)\n      (if (= (first sq) (first dups))\n        (recur (next sq) dups)\n        (recur (next sq) (conj dups (first sq)))))))", "user": "5ca622f3e4b048ec896c5be0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 30, "code": "#(->> [0 % []]\n       (apply (fn  [i s res]\n                (let [[f & l] s]\n                  (if (not (nil?  s))\n                    (if (not= f (first l))\n                      (recur (+ i 1) l (conj res f))\n                      (recur (+ i 1) l res))\n                    (seq res))))))", "user": "58b84c28e4b0ebc645576d94"}, {"problem": 30, "code": "#(loop [[f1 & rst] %, acct []]\n     (if (nil? rst)\n       (conj acct f1)\n       (if (= f1 (first rst))\n         (recur rst acct)\n         (recur rst (conj acct f1)))))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 30, "code": "(fn [x]\n  (loop [wtf (rest x)\n         first-let (first wtf)\n         finish [(first x)]]\n    (if (empty? wtf)\n  \t\tfinish\n      (recur (rest wtf) \n             (first (rest wtf)) \n             (if (not= (last finish) first-let) \n               (conj finish first-let) \n               finish)))))", "user": "5ca04cc3e4b048ec896c5b69"}, {"problem": 30, "code": "(fn compress [x]\n  (cond (empty? x)                     x\n        (= (first x) (first (rest x))) (compress (rest x))\n        :else                          (concat (list (first x))\n                                               (compress (rest x)))))", "user": "5c538cb5e4b0fb8c5ffd99fb"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 30, "code": "(fn q30 [input]\n  (reduce (fn [result item]\n            (let [last (last result)]\n              (cond\n                (= last item) result\n                true (conj result item)))) [] input))", "user": "5cab0ad9e4b048ec896c5c46"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 30, "code": "(fn compress [[x & xs]]\n  (if (empty? xs)\n    (list x)\n    (if (= x (first xs))\n      (compress xs)\n      (cons x (compress xs)))))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5caf9cace4b026601754b89b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c371f5be4b0d62ef62d9f72"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "598ff38ce4b0fcebec4de869"}, {"problem": 30, "code": "(fn remove-consecutive-multiples\n  [col]\n  (loop [col col\n         previous (first col)\n         res [(first col)]]\n    (let [curr (first col)\n          rest-col (rest col)]\n      (if (empty? col)\n        res\n        (if (= curr previous)\n          (recur rest-col previous res)\n          (recur rest-col curr (conj res curr)))))))", "user": "5c936583e4b048ec896c5a1c"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5b507222e4b02d533a91bce7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cb556f9e4b026601754b934"}, {"problem": 30, "code": "(fn cf [x] (loop [x x prev nil result []] (if (empty? x)\n                                                   result\n                                                   (if (= (first x) prev)\n                                                     (recur (rest x) (first x) result)\n                                                     (recur (rest x) (first x) (conj result (first x)))))))", "user": "5cb11a72e4b026601754b8c6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cb71f35e4b026601754b961"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cbc9dace4b026601754b9eb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ca7b5bbe4b048ec896c5c04"}, {"problem": 30, "code": "(fn no-repeats [s]\n  \t(loop [s s\n           acc []]\n      (if (empty? s)\n        acc\n        (let [same? (= (last acc) (first s))]\n          (recur (rest s) (if same? acc (conj acc (first s))))))))", "user": "5c73a944e4b0fca0c16227b8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5a09ebf8e4b0eab8c0448932"}, {"problem": 30, "code": "(fn  [coll] (let [vcol (conj (vec coll) -1)] (mapcat #(if (not= %1 %2)  (list %1)) vcol (next vcol))))", "user": "5cb4e764e4b026601754b929"}, {"problem": 30, "code": "#(reduce (fn [coll x] (if (not= (last coll) x) (conj coll x) coll)) [] %)", "user": "5afb3426e4b0cc2b61a3bcf5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 30, "code": "(fn [thing] (mapcat set (partition-by identity thing)))", "user": "5cb62652e4b026601754b949"}, {"problem": 30, "code": "(fn [arg1]\n      (map first (partition-by identity arg1)))", "user": "5cb6256ce4b026601754b947"}, {"problem": 30, "code": ";(fn cp [s]\n;\t\t(if (empty? s) ()\n;          (if (= (first s) (second s))\n;            (cp (rest s))\n;            (conj (cp (rest s)) (first s))\n;          )))\n\n;(fn cp [x]\n;        (loop [s x\n;           r []]\n;                (if (empty? s)\n;          r\n;          (if (= (first s) (second s))\n;            (recur (rest s) r)\n;            (recur (rest s) (conj r (first s)))\n;          ))))\n\nreduce (fn [acc x] (if (not= x (last acc)) (conj acc x) acc)) []", "user": "56d5c1b0e4b0ea9b8538f7c3"}, {"problem": 30, "code": "(fn [x] (keep-indexed (fn [idx e] (if (not= e (get x (inc idx))) e)) x))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 30, "code": "(fn [seq] \n  (for [i (range (count seq))\n   :when (or (= i 0) (not= (nth seq i) (nth seq (- i 1)))) \n  ] (nth seq i))\n)", "user": "5cbdc591e4b026601754ba00"}, {"problem": 30, "code": "(fn compress [s]\n  (loop [s s\n         acc []]\n    (if (empty? s)\n      acc\n      (recur (rest s)\n             (if (= (last acc) (first s))\n               acc\n               (conj acc (first s)))))))", "user": "53336ab8e4b019098a6f8b84"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cc4b34de4b0ccb061962805"}, {"problem": 30, "code": "#(reverse (reduce (fn[a b] (if (= (first a) b) a (conj a b))) '() %))", "user": "5cc6f982e4b0ccb06196282d"}, {"problem": 30, "code": "(fn compress\n  [input]\n  (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] input))", "user": "5cb39440e4b026601754b903"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 30, "code": "#(reduce (fn [val x]\n  (if-not (= (peek val) x)\n   (conj val x)\n   val))\n  [] %)", "user": "5cc7342be4b0ccb061962830"}, {"problem": 30, "code": "(fn [s]\n  (loop [acc []\n         [head & tail :as remaining] s]\n    (cond\n     (empty? remaining) acc\n     (= (last acc) head) (recur acc tail)\n     :else (recur (conj acc head) tail))))", "user": "5cc75ffce4b0ccb061962836"}, {"problem": 30, "code": "(fn compress [x]\n  (loop [[x & xs] x\n         prev nil\n         res '()] \n    (if (nil? x)\n      (reverse res)\n      (recur \n        xs\n        x\n        (if (= x prev)\n          res\n          (cons x res)\n        )\n      )\n    )\n  )\n)", "user": "5cb0f70ce4b026601754b8c1"}, {"problem": 30, "code": "(fn compress\n  [some-sequence]\n  (loop [previous nil\n         current (first some-sequence)\n         remaining (rest some-sequence)\n         working-sequence []]\n    (if (nil? current)\n      working-sequence\n      (if (= previous current)\n        (recur current (first remaining) (rest remaining) working-sequence)\n        (recur current (first remaining) (rest remaining) (conj working-sequence current))))))", "user": "5c9a638fe4b048ec896c5aae"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 30, "code": "(fn [c] \n  (reduce \n    (fn [m o] (if (= (last m) o) m (conj m o))) \n    [] \n    c))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 30, "code": "(fn [c] (reduce (fn [acc x] (if (= (first acc) x) acc (conj acc x))) () (reverse (seq c))))", "user": "5ccca8e1e4b0ccb06196289c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cc7073de4b0ccb06196282e"}, {"problem": 30, "code": "(fn f [xs] (cond\n  (zero? (count xs)) (list)\n  (= (first xs) (second xs)) (f (rest xs))\n  :else (conj (f (rest xs)) (first xs))\n))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 30, "code": "(fn foo [in]\n   (if (empty? in)\n     '()\n     (if (= (first in) (second in))\n       (foo (rest in))\n       (conj (foo (rest in)) (first in)) )))", "user": "5bbaf02fe4b0a20761a235f4"}, {"problem": 30, "code": "reduce (fn [s c] (if (= (last s) c) s (conj s c))) []", "user": "5cc7692ce4b0ccb061962837"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "user": "5ccf2dc3e4b0ccb0619628c2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ccf3879e4b0ccb0619628c4"}, {"problem": 30, "code": "(fn [coll]\n  (loop [xs (seq coll) \n       \t acc []]\n    (if-not xs\n      acc\n      (let [head (first xs)\n            tail (next xs)]\n        (recur tail\n               (if-not (= head (first tail))\n                 (conj acc head)\n                 acc))))))", "user": "574c3d4ee4b02ea11479921a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cce7de4e4b0ccb0619628b7"}, {"problem": 30, "code": "(fn [sequence]\n(reverse\n    (reduce (fn [result current]\n              (if (= (first result) current)\n                result\n                (conj result current)))\n            '()\n            sequence)))", "user": "5c7c78c9e4b0d597f478ca94"}, {"problem": 30, "code": "(fn [s]\n   (reduce (fn [r s]\n             (if (= (last r) s)\n               (seq r)\n               (concat r (list s)))) (list) s))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 30, "code": "#(loop [xs %, previous nil, result '()]\n   (if (empty? xs)\n     (reverse result)\n     (if (= (first xs) previous)\n        (recur (rest xs), previous, result)\n        (recur (rest xs), (first xs), (cons (first xs) result))     \n     )\n   )\n )", "user": "5cbdadeee4b026601754b9ff"}, {"problem": 30, "code": "reduce (fn [acc x] (if (= (last acc) x) acc (conj acc x))) []", "user": "5cd1f5dae4b0ccb0619628f7"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5cb41c40e4b026601754b911"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 30, "code": "(fn [s] (apply list (reduce (fn [a e] (if (= (last a) e) a (conj a e))) [(first s)] (rest s))) )", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 30, "code": "(fn removeConsecutive [seq]\n (map first (partition-by identity seq))\n)", "user": "5a99d28ee4b0d174b936c7b3"}, {"problem": 30, "code": "reduce  (fn [x y] (if (= (last x) y) x (conj x y))) []", "user": "5642f094e4b08d4f616f5f1f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cd99bebe4b05ee0cb311707"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "5c87d2cbe4b048ec896c591c"}, {"problem": 30, "code": "(fn [x]\n  (loop [s x c nil res []]\n    (if (empty? s)\n      res\n      (let [[f & fs] s]\n        (recur fs\n               f\n               (if (not (= c f))\n                 (conj res f)\n                 res))))))", "user": "5cd4c3dae4b0ccb061962925"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= (last a) b) a (concat a [b]))) (take 1 %) %)", "user": "5cdd934ce4b05ee0cb311761"}, {"problem": 30, "code": "#(map first (partition-by identity%))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "5c37110ae4b0d62ef62d9f71"}, {"problem": 30, "code": "#(reduce (fn [new-coll element]\n           (if (= (last new-coll) element)\n             new-coll\n             (conj new-coll element))) \n         [] %)", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "5cdfba02e4b0a17bb84e2b03"}, {"problem": 30, "code": "(fn dedupe [xs]\n  (cond \n    (< (count xs) 2) xs\n    (= (first xs) (second xs)) (dedupe (rest xs))\n    :else (cons (first xs) (dedupe (rest xs)))))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 30, "code": "(fn [xs]\n  (let [tokens (partition-by identity xs)]\n    (map first tokens)))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 30, "code": "(fn [xs]\n   (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] xs))", "user": "5ce05561e4b0a17bb84e2b08"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cded022e4b0a17bb84e2af7"}, {"problem": 30, "code": "(fn compress [xs] (reduce (fn [l v] \n                            (if (= (last l) v) \n                              l\n                              (conj l v))) [] xs))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 30, "code": "(fn [x]\n  \n  (reverse (reduce (fn [l y] (if (= (first l) y) l (conj l y))) '() x))\n  \n)", "user": "5cd1fd2fe4b0ccb0619628f8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 30, "code": "reduce\n   (fn [acc next]\n     (if (= (last acc) next)\n       acc\n       (conj acc next)))\n   []", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 30, "code": "(fn cut [seq]\n\t(loop [res [] xs seq]\n\t\t(if (empty? xs)\n\t\t\tres\n\t\t\t(if (= (last res) (first xs))\n\t\t\t\t(recur res (rest xs))\n\t\t\t\t(recur (conj res (first xs)) (rest xs))))))", "user": "5c87c79be4b048ec896c591b"}, {"problem": 30, "code": "#(reduce \n  (fn [col a] (if (= (last col) a) col (conj col a)))\n  [] %)", "user": "5ce3e239e4b0a17bb84e2b46"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "4f847f0ee4b033992c121c33"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5c09e555e4b0bdcf453d16fd"}, {"problem": 30, "code": "#(reduce (fn [acc c] (if (= (last acc) c) acc (conj acc c))) [] %)", "user": "5ce78776e4b0a17bb84e2ba2"}, {"problem": 30, "code": "(fn[xs](reduce (fn[r x](if(= x (last r))r(conj r x))) [(first xs)] xs))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 30, "code": "reduce (fn dedupe [acc item] (if (= item (last acc)) acc (concat acc [item]))) ()", "user": "5ce56455e4b0a17bb84e2b71"}, {"problem": 30, "code": "(fn strip-dups [x]\n  (if (empty? x) \n    '()  \n    (if (= (first x) (first (rest x)))\n      (strip-dups (rest x))\n      (cons (first x) (strip-dups (rest x))))))", "user": "5ce708b7e4b0a17bb84e2b9b"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5ce97826e4b0a17bb84e2bc0"}, {"problem": 30, "code": "(fn rcd\n  [sequ]\n  (if (empty? sequ) []\n  (if (= (first sequ) (second sequ)) (rcd (rest sequ)) (cons (first sequ) (rcd (rest sequ)) ))\n  ))", "user": "5ced79abe4b0aaa82f1129d0"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 30, "code": "(fn [a](mapcat #(drop (- (count %) 1) %) (partition-by identity a)))", "user": "5ce44ee2e4b0a17bb84e2b57"}, {"problem": 30, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (if (= f (first r)) \n      (cmprs r) \n      (cons f (cmprs r)))))", "user": "5cee4bc9e4b0aaa82f1129dc"}, {"problem": 30, "code": "(fn compress-seq\n  ([s]\n   (compress-seq s nil []))\n  ([s last-elt res]\n   (cond \n    (empty? s)\n    res\n    \n    (= last-elt (first s))\n    (recur (rest s) (first s) res)\n    \n    :else\n    (recur (rest s) (first s) (conj res (first s))))))", "user": "5ce6f93be4b0a17bb84e2b99"}, {"problem": 30, "code": "(fn [lst] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] (seq lst)))", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 30, "code": "(comp (partial map first)\n      (partial partition-by identity))", "user": "5cf115eee4b0aaa82f112a08"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cea0bd4e4b0a17bb84e2bc9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 30, "code": "(comp #(loop [s1 (seq %) s2 nil]\n   (cond (empty? s1) s2 \n         (and (not (empty? s2)) (= (first s2) (first s1))) (recur (rest s1) s2)\n         :else (recur (rest s1) (conj s2 (first s1))))) reverse)", "user": "592bb806e4b072a2710fcf46"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "53d612cbe4b0e771c3025452"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cf50e67e4b087f62be35a8d"}, {"problem": 30, "code": "(fn [insequence]\n\n    (loop [remainder insequence out [] latest nil]\n\n    (if (first remainder)\n      (if (= latest (first remainder))\n        (recur (rest remainder) out latest)\n        (recur (rest remainder) (conj out (first remainder)) (first remainder))\n        )\n      out\n      )))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ce36e02e4b0a17bb84e2b3e"}, {"problem": 30, "code": "(fn remove-successive-dups\n  [s]\n  (seq (reduce (fn [l a] (if (= (last l) a) l (conj l a))) [] s))\n)", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 30, "code": "#(rest (reduce (fn [x y]\n                            (if (= (nth x (- (count x) 1)) y)\n                              x\n                              (conj x y)\n\n                              )\n                            )\n                          [nil]\n              \t\t\t  %\n                          ))", "user": "5cf62f9be4b087f62be35aa8"}, {"problem": 30, "code": "reduce #(if (not= (last %) %2) (concat % [%2]) %) '()", "user": "5cf5775ce4b087f62be35a98"}, {"problem": 30, "code": "(fn [x]\n    (reduce \n      #(if-not (= (last %) %2) (conj % %2) %)\n       [] x))", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 30, "code": "(fn compress [x] \n   (loop [xs x compressed '()]\n     (if (seq xs)\n       (if (= (first xs) (first compressed))\n         (recur (drop 1 xs) compressed)\n         (recur (drop 1 xs) (conj compressed (first xs))))\n       (reverse compressed))))", "user": "5c8aa1b5e4b048ec896c5959"}, {"problem": 30, "code": "(fn foo [x]\n  (let [sq (seq x) fst (first sq)]\n    (if (nil? fst)\n      '()\n       (cons fst (foo (drop-while #(= % fst) (rest sq)))))))", "user": "5cece5a2e4b0a17bb84e2bfb"}, {"problem": 30, "code": "(fn [s]\n  (reduce \n   (fn [acc e]\n     (if (= e (last acc))\n       acc\n       (conj acc e)))\n   []\n   s))", "user": "5b38d2f3e4b02d533a91bbaf"}, {"problem": 30, "code": "#(map first ( partition-by identity %))", "user": "5ce5b43be4b0a17bb84e2b7a"}, {"problem": 30, "code": "(fn [s]\n  (reverse (reduce \n            (fn [acc e] \n              (if (or (empty? acc) (not= e (first acc))) (conj acc e) acc)\n              ) \n            '() \n            s)\n           )\n  )", "user": "5cfd5a93e4b0cc9c91588168"}, {"problem": 30, "code": "(fn my-compress [coll] \n (let [res (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() coll))]\n  (if (string? coll) (apply str res) res)))", "user": "5bcf95ace4b0e9689409ee2e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cf935f4e4b0b71b1d808a8f"}, {"problem": 30, "code": "(fn [input]\n  (loop [input input output []]\n    (if (seq input)\n      (if (= (first input) (last output))\n        (recur (rest input) output)\n        (recur (rest input) (conj output (first input))))\n      output)))", "user": "5cf62ecce4b087f62be35aa7"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5cf863c4e4b0b71b1d808a80"}, {"problem": 30, "code": "(fn [x]\n  (loop [x x\n         xs []]\n    (if (empty? x)\n       xs\n       (recur \n    \t (rest x)\n     \t (if (= (first x) (last xs))\n           xs\n           (conj xs (first x)))))))", "user": "5c34f7efe4b0d62ef62d9f5b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 30, "code": "(fn [coll]\n  (seq (reduce #(if (not= (last %1) %2)\n                  (conj %1 %2)\n                  %1)\n              []\n              coll)))", "user": "5a23503fe4b0ff51aa4b32d6"}, {"problem": 30, "code": "(fn [[h & _ :as x]]\r\n   (conj\r\n     (map first\r\n       (filter #(not= (first %) (second %))\r\n         (map #(list %1 %2) x (cons h x))))\r\n     h))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ceedd7ae4b0aaa82f1129e4"}, {"problem": 30, "code": "#(loop [x %1 y []]\n   (if (empty? x)\n     y\n     (recur (rest x) (if (not= (first x) (last y))\n                       (conj y (first x))\n                       y\n                       )\n      )\n     )\n   )", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 30, "code": "reduce (fn [a b] (if (= (last a) b) a (conj a b))) []", "user": "5cfeacb7e4b0cc9c9158817d"}, {"problem": 30, "code": "(fn\n  [xs]\n  (reduce (fn [acc, x]\n            (if (and (seq acc) (= (last acc) x))\n              acc\n              (conj acc x)))\n          []\n          xs))", "user": "5cdc17d0e4b05ee0cb31173c"}, {"problem": 30, "code": "(fn [x]\n  (loop [i 0 result []]\n    (if (= i (count x))\n      (seq result)\n      (recur (inc i)\n             (if (= i 0)\n               (conj result (get x i))\n               (if (= (get x i) (get result (dec (count result))))\n                 result\n                 (conj result (get x i)))\n              )\n             )\n      )\n    )\n  )", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5d05fdece4b0cc9c915881e8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d06499ae4b0cc9c915881ec"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5d0781d1e4b0cc9c915881f9"}, {"problem": 30, "code": "(fn [coll]\n  (loop [coll coll\n         res []]\n         (println coll)\n    (cond (empty? coll) res\n          (= (first coll)\n             (second coll))\n          (recur (rest coll) res)\n          :else (recur (rest coll) (conj  res (first coll))))\n          ))", "user": "5c3f29d4e4b08cd430848e8f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cf68090e4b0b71b1d808a59"}, {"problem": 30, "code": "(fn [col]\n  (loop [c col, result []]\n    (if (empty? c)\n      result\n      (if (= (last result) (first c))\n        (recur (rest c) result)\n        (recur (rest c) (conj result (first c)))\n        )\n      )\n    )\n  )", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 30, "code": "(fn [my-seq]\n  (let [first-element (first my-seq)]\n  (reduce (fn [new-list element]\n            (if (= element (last new-list))\n              new-list\n              (conj new-list element)))\n          [first-element]\n          (drop 1 my-seq))))", "user": "5d0b210ee4b0cc9c9158822b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d03977ee4b0cc9c915881c7"}, {"problem": 30, "code": "(fn[items](map first (partition-by identity items)))", "user": "5d08dfe7e4b0cc9c91588210"}, {"problem": 30, "code": "(fn con-sec\n    ([[h & t] new] (if (empty? new) (con-sec t [h]) (if (empty? t) (if (not= (nth new 0) h) (reverse (cons h new)) (reverse new)) (if (not= (nth new 0) h) (con-sec t (cons h new)) (con-sec t new)))))\n    ([x] (con-sec x []))\n)", "user": "5d0aab50e4b0cc9c91588220"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58472aade4b089d5ab817ea0"}, {"problem": 30, "code": "#(loop [my-seq [(first %)] orig (rest %)]\n   (if (seq orig)\n     (if (= (last my-seq) (first orig))\n       (recur my-seq (rest orig))\n       (recur (conj my-seq (first orig)) (rest orig)))\n     my-seq))", "user": "5d0815b3e4b0cc9c91588201"}, {"problem": 30, "code": "(fn unique [s]\n  (->>\n    s\n    seq\n    (reduce\n      (fn [acc curr]\n        (if (= (last acc) curr)\n          acc\n          (conj acc curr)))\n      [])\n    seq))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 30, "code": "#(reduce\n  (fn [c v] (if (= v (last c)) c (conj c v)))\n  [(first %)]\n  (rest %)\n  )", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 30, "code": "(fn [y]\n  (let [x (seq y)]\n  (for [i (range (count x)) \n        :when (or (= i 0) (not (= (nth x i) (nth x (dec i)))))] \n    (nth x i))))", "user": "5d0ad8dde4b0cc9c91588225"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d0e311de4b0cc9c91588251"}, {"problem": 30, "code": "#(loop [[x1 & s] %, res []]\n   (let [x2 (first s)] \n   \t(if (= x1 x2)\n     (recur s res)\n     (if (= x2 nil)\n       (conj res x1)\n       (recur s (conj res x1))))))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "5cd47c26e4b0ccb06196291e"}, {"problem": 30, "code": "(fn [l] (map first (partition-by identity l)))", "user": "5b684a0de4b0c6492753e774"}, {"problem": 30, "code": "(fn non-consefly\n  [aseq]\n  (reduce (fn [out x]\n            (if (= (last out) x)\n              out\n              (conj out x)))\n          []\n          aseq))", "user": "5d110abee4b02c15ef021983"}, {"problem": 30, "code": "(fn [coll]\n   (loop [prev nil acc '() rem coll]\n     (if (nil? (seq rem))\n       (reverse (seq acc))\n       (if (= prev (first rem)) \n         (recur prev acc (rest rem))\n         (recur (first rem) (cons (first rem) acc) (rest rem))))))", "user": "5d126728e4b02c15ef02199a"}, {"problem": 30, "code": "(fn [x](let [vettore-confronto (-> (vec (rest(vec x)))\n                                  (conj 0))\n             vettore-da-usare (map vector x vettore-confronto)]\n         (->>(filter (fn [[x y]] (not= x y)) vettore-da-usare)\n             (map (fn [[x y]] x)))))", "user": "5d148581e4b0902706380dc6"}, {"problem": 30, "code": "(fn [seq](map first (partition-by identity seq)))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 30, "code": "(fn superloop [x]\n  (reverse \n   (loop [input x\n          output []]\n     (if (< (count input) 1)\n       output\n       (if (= (first input) (second input))\n         (recur (rest input) output)\n         (recur (rest input) (cons (first input) output)))))))", "user": "5d132412e4b02c15ef0219a6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d10c1a8e4b04b4faecf4449"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d1609f9e4b0902706380dd9"}, {"problem": 30, "code": ";; Since Clojure 1.7 you may use the function dedupe\n;; It doesn't seem to work with this site, though\n#(map first (partition-by identity %))", "user": "5d0eda66e4b0cc9c9158825f"}, {"problem": 30, "code": "(fn dedup \n  ([xs] \n   #_(println \"single arg\" xs)\n   (if (<= (count xs) 1) \n     xs\n     (let [[x & ys] xs] \n       #_(println \"destruct as\" x \"and\" ys)\n       (conj (dedup x ys) x))))\n  ; exclude x in the result\n  ([x xs] \n   #_(println \"two args\" x \"and\" xs)\n   (cond \n     (empty? xs) ()\n     (= x (first xs)) (dedup x (rest xs))\n     :default (dedup xs)\n     )))", "user": "5a08f951e4b01bb0ae8afdfd"}, {"problem": 30, "code": "(fn [x] (reverse (reduce (fn [b a] (if (not (= a (first b))) (cons a b) b)) () x)))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 30, "code": "(fn\n  [s]\n  (reduce (fn [r i]\n            (if (not (= (last r) i))\n              (conj r i)\n              r))\n          []\n          s))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 30, "code": "(fn [l] (reverse (reduce #(if (= %2 (first %1)) %1 (conj %1 %2)) '() l)))", "user": "5d1e19c4e4b02ea6f0fb69af"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 30, "code": "(fn [sq] (reduce (fn [coll a] (if (= (last coll) a)\n                                coll\n                                (conj coll a))) [] sq))", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 30, "code": "(fn [string]\n  (reduce\n   (fn [result txt] (if (= (last result) txt) result (conj result txt)))\n   []\n   string))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d1b59abe4b02ea6f0fb697e"}, {"problem": 30, "code": "(fn [sequence] (map first (partition-by identity sequence)))", "user": "5d1b2a1ee4b02ea6f0fb6979"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d232882e4b02ea6f0fb6a02"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "5c59b836e4b01df32ab73263"}, {"problem": 30, "code": "(fn [s]\n  (loop [acc []\n         s s]\n    (if-let [e (first s)]\n      (if (not= e (last acc))\n        (recur (conj acc e) (rest s))\n        (recur acc (rest s)))\n      acc)))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 30, "code": "(fn kill-dups\n  [coll]\n  (reduce\n    (fn [acc curr]\n      (if (not= curr (last acc))\n        (conj acc curr)\n        acc))\n    []\n    coll))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 30, "code": "#(reduce (fn [res e]\n            (if (not= (peek res) e)\n              (conj res e)\n              res))\n          []\n          %)", "user": "5d1be50ce4b02ea6f0fb6986"}, {"problem": 30, "code": "(fn compress [collec]\n  (reduce (fn [acc x]\n            (if (= (last acc) x)\n                 acc\n                 (conj acc x))) [] collec))", "user": "5cfabf53e4b0cc9c91588148"}, {"problem": 30, "code": "(fn compress [collec]\n (reduce (fn [acc x]\n           (if (= (last acc) x)\n                acc\n                (conj acc x))) [] collec))", "user": "5d1cf523e4b02ea6f0fb6994"}, {"problem": 30, "code": "(fn [ls]\n  (loop [ls ls \n  \t    res []]\n  \t(if (empty? ls)\n  \t\tres\n  \t\t(recur (rest ls)\n  \t\t\t   (if (= (first ls) (second ls))\n  \t\t\t   \t   res\n  \t\t\t   \t   (conj res (first ls)))))))", "user": "5d125d63e4b02c15ef021999"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 30, "code": "#(reduce (fn [acc x] (if (= x (last acc)) acc (conj acc x))) [] %)", "user": "5d272077e4b092dab7f59c64"}, {"problem": 30, "code": "(fn [col] ((fn rmdups [oldC newC] (if (= (first oldC) nil) newC (if (= (first oldC) (first newC)) (rmdups (rest oldC) newC) (rmdups (rest oldC) (cons (first oldC) newC))))) (rest (reverse col)) (list (last col))))", "user": "5d1cd478e4b02ea6f0fb6991"}, {"problem": 30, "code": "(fn compress [s]\n  (reduce (fn maybe-conj [s e]\n            (if (= (last s) e)\n              s\n              (conj s e)))\n          [] s))", "user": "5d247902e4b02ea6f0fb6a24"}, {"problem": 30, "code": "(fn [col]\n  (reduce\n    (fn [history cur]\n      (if (= (first history) cur)\n        history\n        (conj history cur)))\n    '()\n    (reverse col)))", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 30, "code": "#(loop [col (vec %) item (first col) rt [item]]\n    (if(empty? col)\n      rt\n      (recur (rest col) (first (rest col)) (if(= (first (rest col)) (last rt)) rt (if (nil? (first (rest col))) rt (conj rt (first (rest col))))\n                                                                               ))\n      )\n    )", "user": "5d270111e4b092dab7f59c62"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5d138119e4b0902706380dbb"}, {"problem": 30, "code": "(fn [col]\n  ((fn cmprs [oldC newC]\n     (if\n      (= (first oldC) nil)\n      newC\n      (if\n       (= (first oldC) (first newC))\n       (cmprs (rest oldC) newC)\n       (cmprs (rest oldC) (cons (first oldC) newC))\n      )\n     )\n    ) (rest (reverse col)) (list (first (reverse col)))\n   )\n  )", "user": "5cdc3c69e4b05ee0cb311741"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d267c11e4b02ea6f0fb6a41"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5987f5b1e4b021a7a535fead"}, {"problem": 30, "code": "(fn f [v]\n  (map first (partition-by identity v) )\n)", "user": "5bc2df19e4b07a9b28b10038"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n(reduce f* [] s)))", "user": "5d29d837e4b01671435dbc6c"}, {"problem": 30, "code": "(fn [x] (reduce (fn [a b] (if (not= (last a) b) (conj a b) (vec a))) [] x))", "user": "5d13f783e4b0902706380dc1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 30, "code": "reduce (fn [acc x]\n         (if (= (last acc) x)\n           acc\n           (conj acc x))\n         ) []", "user": "5d2b62efe4b01671435dbc80"}, {"problem": 30, "code": "(fn [a]\n\t(loop [i a res []]\n\t\t(if (empty? i)\n\t\t\tres\n\t\t\t(if (not= (last res) (first i)) \n\t\t\t\t(recur (rest i) (conj res (first i)))\t; goto next iteration with the updated res\n\t\t\t\t(recur (rest i) res)))))\t;else, no update to res\n\n; Another good solution (map partition-by identity %)", "user": "5d25abc9e4b02ea6f0fb6a37"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d21b91ee4b02ea6f0fb69e9"}, {"problem": 30, "code": "#(map last (partition-by identity %))", "user": "5d28222ee4b092dab7f59c7a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 30, "code": "reduce #(if (not= (last %) %2)\n           (conj % %2)\n           %) []", "user": "5aa1e0f1e4b0d174b936c84e"}, {"problem": 30, "code": "(fn [sqn]\n  (map first (partition-by identity sqn)))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d28b684e4b092dab7f59c83"}, {"problem": 30, "code": "(fn [l]\n  \t(loop [newl '(0) oldl (seq l)]\n  \t\t(if (= 0 (count oldl))\n          (rest (reverse newl))\n          (if (= (nth newl 0) (nth oldl 0))\n            (recur newl (rest oldl))\n            (recur (conj newl (nth oldl 0)) (rest oldl))\n          ))))", "user": "5d2ca236e4b01671435dbc94"}, {"problem": 30, "code": "#(reduce (fn [acc x] (if (= x (last acc)) acc (conj acc x))) [] %)", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 30, "code": "(fn [x]\n    (map first (partition-by identity x))\n\n    )", "user": "5d301c95e4b01671435dbcca"}, {"problem": 30, "code": "(fn dedupe [coll]\n    (lazy-seq\n     (when-let [s (seq coll)]\n       (cons (first s) (dedupe (drop-while #(= (first s) %) (rest s)))))))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "54b42ea4e4b05787c3b1638b"}, {"problem": 30, "code": "(fn [c] \n  (->> c\n       (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) ())\n       reverse))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 30, "code": "#(loop [s (seq %) r []]\n   (cond\n    (empty? s) r\n    (= (first s) (last r)) (recur (rest s) r)\n    :default (recur (rest s) (conj r (first s)))\n    ))", "user": "5d35fb9be4b01671435dbd1c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d321852e4b01671435dbce8"}, {"problem": 30, "code": "(fn [coll] (loop [compcoll [] prev nil lcoll coll]\n             (cond\n               (= (first lcoll) prev)\n               (recur compcoll prev (rest lcoll))\n               (= nil (first lcoll))\n               compcoll\n               :else\n               (recur (conj compcoll (first lcoll)) (first lcoll) (rest lcoll))\n               )))", "user": "5d363543e4b01671435dbd20"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d370811e4b01671435dbd2d"}, {"problem": 30, "code": "#(->> %\n      (partition-by identity)\n      (map first))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 30, "code": "#(reduce \n\t(fn [acc cur]\n      (if (= (last acc) cur)\n      \tacc\n        (conj acc cur)\n      )\n    )\n\t[]\n\t%  \n)", "user": "5d2564d2e4b02ea6f0fb6a34"}, {"problem": 30, "code": "(fn [input]\n  (reverse (loop [in input out '()]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (if (= (first in) (first out))\n               out\n               (conj out (first in))))))))", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 30, "code": "(fn [input] \n   (loop [characters (seq input) result []]\n     (if (empty? characters) result\n       (let [candidate (first characters)]\n         (if (= candidate (last result))\n           (recur (rest characters) result)\n           (recur (rest characters) (conj result candidate)))))))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 30, "code": "(fn [xs]\n  (loop [ls xs acc nil]\n    (if (empty? ls)\n      (reverse acc)\n      (let [f (first ls)\n            r (rest ls)]\n        (recur r (if (= f (first acc))\n                   acc\n                   (cons f acc)))))))", "user": "598601f9e4b021a7a535fe79"}, {"problem": 30, "code": "(fn[coll in] (reduce (fn[coll input] (if (not= (last coll) input) (conj coll input) coll) ) coll in )) []", "user": "5cf53196e4b087f62be35a94"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2))\n          []\n          s))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 30, "code": "(fn [x]\n  (loop [from x\n         target []]\n    (if (empty? from)\n      target\n      (recur (rest from) (if (= (first from) (last target))\n                           target\n                           (conj target (first from))\n                           )))))", "user": "5d2c779be4b01671435dbc8d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d3fa930e4b05dd059a5435f"}, {"problem": 30, "code": "(fn [c]\n  (reduce (fn [acc item] (if (= (last acc) item)\n                           acc\n                           (conj acc item)))\n          []\n          c))", "user": "5c30da5ae4b0d62ef62d9f23"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d404586e4b05dd059a54363"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d41de31e4b05dd059a54379"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "4fb41dace4b081705acca2aa"}, {"problem": 30, "code": "(fn [elements]\n  (reduce (fn [acc x]\n    (if (= x (last acc))\n      acc\n      (concat acc (cons x ()))))\n    ()\n    elements))", "user": "5d4320fde4b07c84aa5ae690"}, {"problem": 30, "code": "#(loop [x (first %)\n        result [x]\n        test-seq %]\n   (if-not (empty? test-seq)\n     (recur (if (= x (first test-seq))\n              x\n              (first test-seq))\n            (if (= x (first test-seq))\n              result\n              (conj result (first test-seq)))\n            (rest test-seq))\n     (apply list result)))", "user": "5d3f50d7e4b09d9322bc20a6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 30, "code": "(fn [items]\n  (loop [before nil\n         items items\n         actual (first items)\n         result []]\n    (if (nil? actual)\n      result\n      (recur actual\n             (rest items)\n             (first items)\n             (if (= actual before)\n               result\n               (conj result actual))))))", "user": "5d1d4ec6e4b02ea6f0fb699f"}, {"problem": 30, "code": "#(reduce (fn [coll y] \n           (if (> (count coll) 0) \n             (let [x (last coll)] \n               (if (= x y) \n                 coll \n                 (conj coll y))) \n             [y])) \n         (empty %) \n         %)", "user": "5d46a3c1e4b07c84aa5ae6ad"}, {"problem": 30, "code": "(fn anon [col]\n  (reverse\n   (reduce #(if (= (first %1) %2) %1\n                (cons %2 %1))\n          nil\n          col)))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 30, "code": "#(reduce\n   (fn [xs x] \n     (if (= (last xs) x) xs (conj xs x))) [] %)", "user": "5d46fbc6e4b07c84aa5ae6af"}, {"problem": 30, "code": "(comp (partial apply concat) (partial map distinct) (partial partition-by identity))", "user": "4e628ab2535d8ccf87e9fe61"}, {"problem": 30, "code": "(fn remove-dups [s]\n  (reduce (fn [acc x] (if (= x (last acc)) \n                          acc\n                          (conj acc x)))\n          []\n          (seq s)))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 30, "code": "(fn compress [s] (if-let [x (first s)]\n                     (cons x (drop-while #(= x %) (compress (rest s))))\n                     nil))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 30, "code": "reduce (fn [a e] (if (= e (last a)) a (conj a e))) []", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 30, "code": "(fn [L]\n    (loop [Ret '() Prev nil First (first L) Rest (rest L) ]\n      (if (nil? First)\n        (reverse Ret)\n        (recur\n          (if (= First Prev)          \n            Ret\n            (conj Ret First)\n          )\n          First\n          (first Rest)\n          (rest Rest)\n        )\n      )\n    )\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d4eb9c4e4b0776584bd6f48"}, {"problem": 30, "code": "(fn [seq]\n                 (map first\n                      (partition-by identity seq)))", "user": "5d4c4de9e4b0776584bd6f2f"}, {"problem": 30, "code": "(fn [col]\n           (reduce #(if (= (last %1) %2) %1\n                      (concat %1 [%2]))\n                   (empty col)\n                   col))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 30, "code": "(fn [givenseq] \n (loop [remaining-seq givenseq\n        newseq []]\n   (if (empty? remaining-seq)\n     newseq\n     (recur (rest remaining-seq) (if (= (last newseq) (first remaining-seq))\n                                        newseq\n                                        (conj newseq (first remaining-seq)))))\n     ))", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 30, "code": "(fn nodups\n  [ls]\n  (loop [todo ls, final [], seen #{}]\n    (if (empty? todo)\n      final\n      (recur (rest todo) (if (contains? seen (first todo)) final (conj final (first todo)) )  (conj #{} (first todo)) ))))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 30, "code": "(fn [coll] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 30, "code": "(fn [s]\n  (let [result\n        (reduce\n           (fn [coll elm]\n             (if (not= (last coll) elm)\n               (conj coll elm) coll)) [] s)\n        ]\n    (if (string? s)\n      (clojure.string/join \"\" result)\n      result)))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 30, "code": "reduce (fn [a b] (if (= (last a) b) a (conj a b))) []", "user": "5d41ac35e4b05dd059a54375"}, {"problem": 30, "code": "#(reduce (fn [acc x]\n           (if (not= (last acc) x)\n              (conj acc x)\n              acc))\n         [] %)", "user": "5bbcc747e4b0a20761a23634"}, {"problem": 30, "code": "(fn [input]\n   (loop\n       [sym (first input)\n        ret [sym]\n        rst (rest input)]\n     (let [fst (first rst)\n           inrest (rest rst)]\n       (cond (empty? rst) ret\n             (= fst sym) (recur sym ret inrest)\n             :else (recur fst (conj ret fst) inrest))))\n   )", "user": "5ab07d63e4b073f1774425af"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d51377be4b0776584bd6f5d"}, {"problem": 30, "code": "(fn compress [xs] \n           (cond \n             (= (count xs) 0) '() \n             (= (count xs) 1) xs \n             :else (if (= (first xs) (first (rest xs))) (compress (rest xs)) (concat [(first xs)] (compress (rest xs)) ) ) ) )", "user": "5d4c83b7e4b0776584bd6f34"}, {"problem": 30, "code": "(fn [lists]\n   (let [init (conj [] (first lists))\n         rest (rest lists)]\n     (reduce (fn [ini res]\n               (if (= (last ini) res)\n                 ini\n                 (conj ini res))) init rest)))", "user": "5d40f41ae4b05dd059a5436d"}, {"problem": 30, "code": "(fn [coll] (reduce (fn [acc n] (if (= n (last acc)) acc (conj acc n))) [] coll))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 30, "code": "(fn [s] \n  (loop [x s result []]\n    (prn x)\n    (if-not (empty? x)\n      (do \n        (if-not (= (last result) (first x))\n          (recur (rest x) (conj result (first x)))\n          (recur (rest x) result)))\n      result)))", "user": "5d40442ee4b05dd059a54362"}, {"problem": 30, "code": "(fn [b] (reverse (reduce (fn [a x] (println (str a x)) (if (= (first a) x) a (conj a x))) () b)))", "user": "5d55305ce4b02ba5928a680d"}, {"problem": 30, "code": "reduce #(if (= %2 (peek %)) % (conj % %2)) []", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cf59deee4b087f62be35a9f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d590500e4b02ba5928a6824"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bf06734e4b0a6d31fed2153"}, {"problem": 30, "code": "#(reverse (reduce (fn [acc el](if (= el (first acc))\n                     acc\n                     (conj acc el)\n                     )) () %1))", "user": "5bdc4a76e4b0ed4b8aab4c30"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "559ba500e4b066d22e731f58"}, {"problem": 30, "code": "(fn [s] \n  (map #(first %) (partition-by identity s)))", "user": "5d531d33e4b0776584bd6f6d"}, {"problem": 30, "code": "(fn [collection]\n  (map first (partition-by identity collection)))", "user": "5d42c88ae4b05dd059a5437e"}, {"problem": 30, "code": "(fn [coll]\n  (loop [[x & xs] coll\n         prev nil\n         res []]\n    (cond (nil? x) res\n          (= x prev) (recur xs x res)\n          :else (recur xs x (conj res x))\n  \t)\n  )\n)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 30, "code": "(fn compress\n  [s]\n  (reverse (reduce (fn [acc v]\n                     (if (= v (first acc))\n                       acc\n                       (conj acc v)))\n                   ()\n                   s)))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 30, "code": "reduce (fn [m x] (if (= x (last m)) m (conj m x))) []", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 30, "code": "(fn str-lis \n  ([s]\n   (str-lis s [])\n   )\n  ([s tar]\n   (if (empty? s)\n     tar\n     (do (if (= (last tar) (first s))\n           (str-lis (rest s) tar)\n           (str-lis (rest s) (conj tar (first s))))\n         )\n     )\n   )\n  )", "user": "5d4cf3e9e4b0776584bd6f38"}, {"problem": 30, "code": "(fn [seqn]\n               (loop [remaining seqn\n                      previous nil\n                      ans []]\n                 (if (= 0 (count remaining))\n                   ans\n                   (recur \n                    (vec (rest remaining)) \n                    (first remaining) \n                    (if (= previous (first remaining))\n                      ans\n                      (conj ans (first remaining)))))))", "user": "5d4df658e4b0776584bd6f41"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d5e9f45e4b0c9e5857d4ff5"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "5d5eb086e4b0c9e5857d4ff7"}, {"problem": 30, "code": "(fn [xs]\n  (loop [x (first xs)\n         xs (rest xs)\n         ys []]\n    (if-not x\n      ys\n      (recur (first xs) (rest xs)\n             (if (= (last ys) x)\n               ys\n               (conj ys x))))))", "user": "5d6042f2e4b0c9e5857d5006"}, {"problem": 30, "code": "(fn dedupe\n  [xs]\n  (loop [ret []\n         xs xs]\n    (if (seq xs)\n      (recur (if (= (first xs) (peek ret))\n               ret\n               (conj ret (first xs)))\n             (rest xs))\n      ret)))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 30, "code": "reduce (fn [col s] (if (= (last col) s) col (conj col s))) []", "user": "5d4dd0b4e4b0776584bd6f40"}, {"problem": 30, "code": "(fn compress\n    ([x]\n     (compress (rest x) (first x) (conj '() (first x)))\n     )\n    ([x last-item compressed]\n     (if (empty? x)\n       compressed\n       (if (= (first x) last-item)\n         (compress (rest x) last-item compressed)\n         (compress (rest x) (first x) (conj (vec compressed) (first x)))\n         ))))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 30, "code": "#(loop [z '()\n        y %]\n   (if (not (empty? y))\n     (if (= (first z) (first y))\n       (recur z (rest y))\n       (recur (conj z (first y)) (rest y)))\n     (reverse z)))", "user": "5d5ef0bce4b0c9e5857d4ffb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d62ce13e4b0c9e5857d501f"}, {"problem": 30, "code": "#_(fn compress [coll]\n  (reduce (fn [acc x]\n            (if (= x (last acc))\n              acc\n              (conj acc x)))\n          [] coll))\n(fn compress2 [coll]\n  (->> coll\n       (partition-by identity)\n       (map first)))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d629ed9e4b0c9e5857d501d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d651553e4b0db5d338d15ca"}, {"problem": 30, "code": "(fn\n  [x]\n  (reverse (reduce #(if (= (first %1) %2)\n             %1\n             (cons %2 %1)) '() x)))", "user": "5d641841e4b0c9e5857d502e"}, {"problem": 30, "code": "(fn [col]\n  (reverse (reduce #(if (not (= (first %1) %2))\n                  (cons %2 %1)\n                  %1) '() col)))", "user": "5a7f77fae4b00b71e582a041"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= y (last x)) x (conj x y))) [] %)", "user": "5d63b06be4b0c9e5857d5025"}, {"problem": 30, "code": "(fn [lst]\n  (reduce (fn [a b]\n            (if (= (last a) b)\n              a\n              (conj a b)))\n          []\n          lst))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 30, "code": "(fn [s]\n  (loop [sq s total []]\n    (if (empty? sq)\n       total\n       (recur\n         (rest sq)\n         (if (= (first sq) (last total))\n           total\n           (conj total (first sq)))))))", "user": "5d657de2e4b0db5d338d15da"}, {"problem": 30, "code": "reduce (fn [a c] (if (= c (last a)) a (conj a c))) []", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 30, "code": "(fn\n  [x]\n  (reduce (fn [c x] \n            (if (not= (last c) x)\n              (conj c x)\n              c)) \n          []\n          x))", "user": "5d615431e4b0c9e5857d5010"}, {"problem": 30, "code": "#(loop [it %\n         result []]\n    (let [head (first it)]\n      (if (nil? head)\n        result\n        (do\n          (println head)\n          (println (first (rest it)))\n          (if (= head (first (rest it)))\n            (recur (rest it) result)\n            (recur (rest it) (conj result head)))))))", "user": "5d5c2730e4b09db18d4482ea"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %) %2) % (conj % %2)) [] x))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5d65c2e9e4b0db5d338d15dd"}, {"problem": 30, "code": "#(reduce (fn [deduped curr] (if (not= curr (last deduped)) (conj deduped curr) deduped))  [] (seq %))", "user": "5d6c3f91e4b04d129b00f2af"}, {"problem": 30, "code": "(fn nice\n  [param]\n  (loop [f (first param)\n         r (rest param)\n         result []]\n    (if (nil? f)\n      result\n      (let [previous (last result)]\n        (if (not= f previous)\n          (recur (first r) (rest r) (conj result f))\n          (recur (first r) (rest r) result))))))", "user": "5d6b21efe4b04d129b00f2a3"}, {"problem": 30, "code": "#(reverse (reduce (fn [xs x] (if (= x (first xs)) xs (conj xs x))) '() %))", "user": "5d68fc2fe4b0db5d338d1606"}, {"problem": 30, "code": "(fn [coll] (map #(first %) (partition-by identity coll)))", "user": "5d6552b5e4b0db5d338d15d2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ad5bb0ae4b0ea6055cfabf0"}, {"problem": 30, "code": "(fn [s] (reverse (reduce (fn [newL currentV] (println newL) (if (not (= currentV (first newL))) (conj newL currentV ) newL) ) '() s)))", "user": "5d662fb5e4b0db5d338d15e1"}, {"problem": 30, "code": "(fn compress [input]\n  (let [input-vec (vec input)]\n  (reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) [] input-vec)))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d6d76ffe4b04d129b00f2be"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5d6523ace4b0db5d338d15cd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d6e8cc0e4b04d129b00f2c9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d6d4463e4b04d129b00f2bd"}, {"problem": 30, "code": "(fn [x]\n  (loop [contents (into [] (seq x))\n         t []]\n    (if (not (empty? contents))\n      (if (not (= (first contents)\n                  (last t)))\n        (recur (rest contents) (conj t (first contents)))\n        (recur (rest contents) t))\n      t)))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 30, "code": "#(reduce \n    (fn [r n] \n      (if (= n (last r))\n          r (conj r n) \n        )\n      )\n    [] %\n    )", "user": "5d5b2678e4b06a698e928ee2"}, {"problem": 30, "code": "(fn [col] (mapcat set (#(partition-by identity %1) col)))", "user": "5d6537fce4b0db5d338d15cf"}, {"problem": 30, "code": "#(mapcat identity\n         (map distinct \n              (partition-by identity %)))", "user": "5d5daf87e4b0c9e5857d4fed"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "57eb2576e4b0bfb2137f5b5c"}, {"problem": 30, "code": "(fn dedup\n  ([coll]\n   (dedup [] coll))\n  ([deduped coll]\n   (if (empty? coll)\n     deduped\n     (let [lst (last deduped)\n           chk (first coll)\n           rst (rest coll)]\n       (if (= lst chk)\n         (recur deduped rst)\n         (recur (concat deduped [chk]) rst))))))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d66aea7e4b0db5d338d15ec"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 30, "code": "(fn [seq] (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] seq))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if\n              (= (last %1) %2)\n              %1\n              (conj %1 %2)) [] s))", "user": "5ce867fce4b0a17bb84e2baf"}, {"problem": 30, "code": "(fn\n   [coll]\n   (reduce (fn [acc item]\n             (if (= (last acc) item)\n               acc\n               (conj acc item))) [] coll))", "user": "5d6f063de4b04d129b00f2d1"}, {"problem": 30, "code": "(fn [s]\n  (loop [deduped '()\n         remaining s]\n    (if (empty? remaining)\n      (reverse deduped)\n      (let [f (first deduped)\n       \t    n (first remaining)\n            r (rest remaining)]\n        (if (= f n)\n          (recur deduped r)\n          (recur (cons n deduped) r)\n        )\n      )\n    )\n  )\n)", "user": "5d6f0533e4b04d129b00f2d0"}, {"problem": 30, "code": "reduce\n ( fn red [ result nxt ]\n   ( if ( not= ( last result ) nxt )\n   ( conj result nxt )\n   result\n   )\n  ) []", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 30, "code": "reduce (fn\n         [x y]\n         (if (not= (last x) y)\n           (conj x y)\n           x))  []", "user": "5d6febe6e4b04d129b00f2d5"}, {"problem": 30, "code": "(fn [sq]\n  (seq \n   (reduce \n    #(if (= (last %1) %2) %1 (conj %1 %2))\n    []\n    sq)))", "user": "5a7de7a3e4b03baeef927702"}, {"problem": 30, "code": "(fn [s] (reduce #(if (= (last %1) %2)\n           %1\n           (conj %1 %2)) [] (vec s)))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 30, "code": "(fn compress\n  [coll]\n  (reduce\n    (fn [accum x]\n      (if (= (last accum)\n             x)\n        accum\n        (conj accum x)))\n    []\n    coll))", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 30, "code": "(fn [x] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() x)))", "user": "5c56e264e4b0fb8c5ffd9a39"}, {"problem": 30, "code": "(fn clean [s]\n  (let [v (vec s)]\n    (cond\n     (empty? v) ()\n     (= (count v) 1) v\n     :else (let [fst (first v)\n                 snd (second v)\n                 cln-rst (clean (rest v))]\n             (if (= fst snd)\n               cln-rst\n               (cons fst cln-rst))))))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 30, "code": "reduce (fn maybe-cat [acc w]\n         (if (= (last acc) w)\n           acc\n           (conj acc w))) []", "user": "5d7bd68ee4b02e6b30c93554"}, {"problem": 30, "code": "(fn [coll]\n  (let [res (reduce (fn [cum el]\n            (if (= (last cum) el)\n              cum\n              (conj cum el)))\n          []\n          coll)] \n    (if (string? coll)\n      (clojure.string/join \"\" res)\n      res)))", "user": "5d7b90ede4b02e6b30c93552"}, {"problem": 30, "code": "(fn [inputSeq]\n   (loop [ curSeq inputSeq\n           resList '() ]\n     (if (nil? curSeq)\n        (reverse resList)\n        (if (not= (peek resList) (first curSeq))\n          (recur (next curSeq) (conj resList (first curSeq)))\n          (recur (next curSeq) resList)\n        )\n     )\n   )\n)", "user": "5cf7215ce4b0b71b1d808a67"}, {"problem": 30, "code": "#(reduce \n    (fn [x y] \n      (if (= y (last x)) (concat x) (concat x (list y))))\n    '()\n    (seq %))", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 30, "code": "(fn\n\t[coll]\n\t(reduce \n     (fn\n\t[lista item]\n\t(if (not (= (last lista) item))\n\t\t(conj lista item)\n\t\tlista)) \n     [] coll)\n\t)", "user": "5d797deee4b02e6b30c93541"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b19593ae4b03cfeda66ecb8"}, {"problem": 30, "code": "#(loop [cs '[]\n        col %]\n   (if (next col)\n     (if (= (first col) (second col))\n       (recur cs (rest col))\n       (recur (conj cs (first col)) (rest col)))\n     (apply list (conj cs (first col)))))", "user": "4ec549e1535d6d7199dd3691"}, {"problem": 30, "code": "(fn [a] \n  (reduce #(if ( = (last %) %2) \n             % \n             (conj % %2))\n          [] \n          a ))", "user": "5d6c2aace4b04d129b00f2ad"}, {"problem": 30, "code": "(fn [s]\n  (loop [l '()\n         r s]\n    (cond\n      (empty? r) (reverse l)\n      (= (first r) (first l)) (recur l (drop 1 r))\n      :else (recur (conj l (first r)) (drop 1 r))\n      )\n    )\n  )", "user": "5d6fae1ee4b04d129b00f2d4"}, {"problem": 30, "code": "(fn [x] (loop [remaining x out []] (if (empty? remaining) out (recur (rest remaining) (if (= (first remaining) (last out)) out (conj out (first remaining)))))))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 30, "code": "(fn [x]\n  (let \n    [result (reduce \n      (fn [my-list next-elem]\n        (if (= next-elem (last my-list))\n          my-list\n          (conj my-list next-elem)\n        )\n      )\n      []\n      x\n    )]\n    (cond\n      (string? x) (apply str result)\n      :else result\n    )\n  )\n)", "user": "5d7faa52e4b0915913b1d365"}, {"problem": 30, "code": "(fn rmd [s]\n  (if (= s ())\n    ()\n    (let [f (first s) r (rest s)]\n      (if (= f (first r))\n        (rmd r)\n        (conj (rmd r) f)))))", "user": "5d81c244e4b0915913b1d37a"}, {"problem": 30, "code": "apply (fn [& xs]\n  (loop [xs xs rec []]\n    (if (>= 1 (count xs))\n        (concat rec xs)\n      (if (= (first xs) (second xs))\n        (recur (rest xs) rec)\n        (recur (rest xs) (conj rec (first xs)))))))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 30, "code": "#((reduce\n    (fn [acc item]\n      (if (= (acc :last) item)\n        acc\n        { :last item, :results (conj (acc :results) item) }))\n    { :last nil, :results [] }\n    %)\n  :results)", "user": "5d123457e4b02c15ef021996"}, {"problem": 30, "code": "(fn [s]\n  (loop [collected [] remaining s current nil]\n    (if (empty? remaining)\n      collected\n\t  (if (= (first remaining) current)\n    \t(recur collected (rest remaining) current)\n        (recur (conj collected (first remaining)) (rest remaining) (first remaining))))))", "user": "5d1231dde4b02c15ef021995"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5d7eaf5fe4b0492f5d910fc3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c38422ae4b0d62ef62d9f7f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "536fd48be4b0fc7073fd6e88"}, {"problem": 30, "code": "(fn func [s]\n  (loop [x s res []]\n    (if (empty? x)\n      res\n      (if (= (last res) (first x))\n        (recur (rest x) res)\n        (recur (rest x) (conj res (first x)))))))", "user": "5d88a22de4b0915913b1d3ab"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d84f5e6e4b0915913b1d38f"}, {"problem": 30, "code": "(fn compress\n  ([x] (compress #{} x))\n  ([prev [first & rest]]\n   (if (empty? rest)\n     (if (= prev first)\n       ()\n       (list first))\n     (let [new-rest (compress first rest)]\n       (if (= prev first)\n         new-rest\n         (cons first new-rest))))))", "user": "5d8a0d8fe4b0915913b1d3c6"}, {"problem": 30, "code": "(fn compress [elms]\n  \"removes consecutive duplicates from sequence\"\n  (cond \n    (or (empty? elms)(= 1 (count elms))) elms\n    (= (first elms)(first (rest elms)))  (compress (rest elms))\n    :else (concat (list (first elms)) (compress (rest elms)))\n))", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d88c6a3e4b0915913b1d3ad"}, {"problem": 30, "code": "(fn remove-dups [new old]\n  (if (empty? old)\n    new\n    (recur (if (not (= (first old) (second old)))\n             (conj new (first old))\n             new)\n           (rest old)))) []", "user": "5d323149e4b01671435dbce9"}, {"problem": 30, "code": "(fn [s]\n\t(map #(first %) (partition-by identity s)))", "user": "5bcee7d9e4b0e9689409ee22"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d917ef0e4b0915913b1d402"}, {"problem": 30, "code": "(fn removeDuplicates\n  ([args]\n  (removeDuplicates args []))\n  ([args removed]\n   (if (empty? args)\n     removed\n     (if (= (first args) (second args))\n       (removeDuplicates (rest args) removed)\n       (removeDuplicates (rest args) (conj removed (first args)))))))", "user": "5d896a64e4b0915913b1d3b8"}, {"problem": 30, "code": "(fn compseq [xs]\n  (loop [new [] old xs]\n    (if (empty? old) \n      new\n      (recur (if (= (first old) (last new)) new (conj new (first old))) (rest old))\n      )))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj (vec %1) %2)) ()", "user": "5d915f01e4b0915913b1d401"}, {"problem": 30, "code": "(fn [string]\n  (letfn [(my-loop [remaining]\n            (lazy-seq\n             (if (empty? remaining)\n               '()\n               (cons\n                (first remaining)\n                (my-loop (drop-while #(= (first remaining) %) remaining))))))]\n    (my-loop string)))", "user": "5d90190ce4b0915913b1d3f7"}, {"problem": 30, "code": "(fn compress [coll]\n  (loop [compressed '()\n         [f & rest] coll]\n    (if (not (nil? f))\n      (if (not= f (first compressed))\n        (recur (conj compressed f) rest)\n        (recur compressed rest))\n      (reverse compressed))))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 30, "code": "(fn [x] \n(reverse (reduce\n  (fn [coll val] (if (= (first coll) val) coll (conj coll val)))\n  '() x)))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 30, "code": "(fn reducer [col]\n                 (let [func\n                       (fn [acc item]\n                         (if (= (peek acc) item)\n                           acc\n                           (conj acc item)))]\n                   (reduce func [] col)))", "user": "5006474ce4b0678c553fc481"}, {"problem": 30, "code": "(fn\n  [xs]\n  (->>\n    xs\n    (reduce #(if (= (first %1) %2)\n               %1\n               (conj %1 %2)) '())\n    (reverse)\n    ))", "user": "59ea07c9e4b0249b72820756"}, {"problem": 30, "code": "(fn [s]\n    (if (<= (count s) 1)\n      s\n      (loop [previous (first s), result (list previous), tail (rest s)]\n        (if (empty? tail)\n          (reverse result)\n          (let [current (first tail)]\n            (if (= previous current)\n              (recur previous result (rest tail))\n              (recur current (conj result current) (rest tail))))))))", "user": "5d8b4960e4b0915913b1d3d3"}, {"problem": 30, "code": "#(reverse (reduce (fn [r x] (if (= x (first r)) r (conj r x))) '()\n         %))", "user": "5d68e60be4b0db5d338d1603"}, {"problem": 30, "code": "(fn [sequence]\n  (loop [in sequence prev nil result []]\n    (if (empty? in)\n      result\n      (let [head (first in)]\n        (recur\n          (rest in)\n          head\n          (if (= prev head)\n            result\n            (conj result head)\n          )\n        )\n      )\n    )\n  )\n)", "user": "5d97b033e4b0d3f9b434ad39"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "5d9bda4fe4b0d3f9b434ad50"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d9aeae5e4b0d3f9b434ad4a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn [acc, x]\n            (if (= (last acc) x) acc (conj acc x)))\n          [] xs))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 30, "code": "#(concat (->> % (partition 2 1) (remove (partial apply =)) (map first)) [(last %)])", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 30, "code": "#(reduce (fn [xs a] (if (= (last xs) a) xs (conj xs a))) [] %)", "user": "53bfd8c4e4b0c98a41f5cca8"}, {"problem": 30, "code": "(fn [x]\n  (map first (partition-by identity x)))", "user": "5d8a832ce4b0915913b1d3ca"}, {"problem": 30, "code": "(fn compress-seq\n  [xs]\n  (->> xs\n       (partition 2 1 [:end])\n       (filter #(not= (first %)\n                      (second %)))\n       (map first)))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 30, "code": "reduce\n(fn [xs x]\n  (if (= x (last xs)) xs\n    (conj xs x)))\n[]", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5da05bcce4b000c986472bd0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5da44d35e4b000c986472bf1"}, {"problem": 30, "code": "#(reduce (fn [r x] (if (= (last r) x) r (conj r x))) [] %)", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ccf125ce4b0ccb0619628c0"}, {"problem": 30, "code": "(fn  [xString] \n   (reverse (reduce \n    \t(fn [xList xChar]\n          (if (not= xChar (first xList) ) \n            (conj xList xChar)\n            xList\n          )\n      )\n   \t\t'()\n   \t\txString\n  ))\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 30, "code": "#(loop [s (rest %) cur (first %) res '()]\n    (if (empty? s) (reverse (conj res cur))\n        (let [[cur res] (if (not= (first s) cur)\n                          [(first s) (conj res cur)]\n                          [cur res])]\n          (recur (rest s) cur res))))", "user": "5d931a58e4b0d3f9b434ad10"}, {"problem": 30, "code": "reduce #(if (not= (last %) %2) (conj % %2) %) []", "user": "5d7a748ce4b02e6b30c93547"}, {"problem": 30, "code": "(fn compress-seq [dup-seq]\n    (let [first-item (first dup-seq)\n          rest-items (rest dup-seq)]\n        (cond\n            (nil? first-item) []\n            (= first-item (first rest-items)) (compress-seq rest-items)\n            :default (concat [first-item] (compress-seq rest-items)))))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d99dc47e4b0d3f9b434ad42"}, {"problem": 30, "code": "(fn\n  [coll]\n  (reduce \n   #(if\n      (=\n       (last %1)\n       %2\n      )\n      %1\n      (conj %1 %2)) [] coll))", "user": "5da975b9e4b000c986472c32"}, {"problem": 30, "code": "(fn compress-seq\n  [x]\n  (loop [final-seq ()\n         current-val (first x)\n         remaining (rest x)]\n    (if (empty? remaining)\n      (reverse (conj final-seq current-val))\n      (if (= current-val (first remaining))\n        (recur final-seq current-val (drop 1 remaining))\n        (recur (conj final-seq current-val) (first remaining) (drop 1 remaining))))))", "user": "5d9c8a85e4b0eb781811cdad"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5daa1fc8e4b000c986472c3e"}, {"problem": 30, "code": "(fn [x] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2) ) '() x)))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 30, "code": "(fn [x]\n  (loop [prev (first x)\n         res [prev]\n         curr (second x)\n         rem (drop 2 x)]\n    (let [dupe (= curr prev)\n          prev (if dupe prev curr)\n          res (if dupe res (concat res [curr]))]\n      (if (empty? rem)\n        res\n        (recur prev res (first rem) (rest rem))))))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 30, "code": "(fn [xs] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] xs))", "user": "5dac6272e4b000c986472c4c"}, {"problem": 30, "code": "(fn [s]\n  (reverse (reduce (fn [acc cur]\n                     (if-not (= (first acc) cur)\n                       (conj acc cur)\n                       acc))\n                   '()\n                   s)))", "user": "5da8b8ece4b000c986472c28"}, {"problem": 30, "code": "#(reduce (fn foop [s_0 s_1] (cond\n                                 (= (last s_0) s_1) s_0\n                                 :else (conj s_0 s_1))) [] %1)", "user": "5da71a00e4b000c986472c14"}, {"problem": 30, "code": "(fn [s] (reduce (fn [a b] \n  (if (= (last a) b) a (conj a b)) ) [] (map (fn [a] a) s) ))", "user": "5da71eaee4b000c986472c15"}, {"problem": 30, "code": "(fn aaa [coll](let[a (fn b[coll ret](cond\n                                        (empty? coll) ret\n                                        :else (cond\n                                                (= (last ret)(first coll)) (b (rest coll) ret)\n                                                :else (b (rest coll)(conj ret (first coll))))))]\n                  (a coll [])))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d965c73e4b0d3f9b434ad33"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "5daeb6bce4b0f8c104ccfc8b"}, {"problem": 30, "code": "#(reduce (fn [acc n]\n          (if (not= (last acc) n)\n            (conj acc n)\n            acc))\n        []\n        %)", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 30, "code": "(fn [x] (reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] (seq x)))", "user": "5dab11cde4b000c986472c45"}, {"problem": 30, "code": "(fn compress-seq [xs]\n  (reduce (fn [acc x]\n            (if (= x (last acc)) acc\n              (conj acc x)))\n          []\n          xs))", "user": "5db0d470e4b0f8c104ccfc9e"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y)                 ) ) [] (vec %)   )", "user": "5da98129e4b000c986472c33"}, {"problem": 30, "code": "(fn [x-coll](reduce (fn [coll x] (if (= (last coll) x) coll (conj coll x))) [] x-coll))", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 30, "code": "(fn exercise-30 [inp]\n  (loop [inp inp\n         acc []]\n    (if (empty? inp)\n      acc\n      (recur (rest inp) (if (= (last acc) (first inp))\n                               acc\n                               (conj acc (first inp)))))))", "user": "5d9515a9e4b0d3f9b434ad2c"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "590b2d92e4b047aa04b199cf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5daed892e4b0f8c104ccfc8f"}, {"problem": 30, "code": "(fn [coll] (loop [c [] cnt 0]\n(cond (= cnt (- (count coll) 1)) (conj c (nth coll cnt))\n(= (compare (nth coll cnt) (nth coll (+ cnt 1))) 0) (recur c (inc cnt)) \n:else (recur (conj c (nth coll cnt)) (inc cnt)))))", "user": "5daec18ae4b0f8c104ccfc8c"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5db1969be4b010eb3c36cd06"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d51884be4b0776584bd6f61"}, {"problem": 30, "code": "(fn [coll] \n  (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] coll))", "user": "5db5d8b0e4b010eb3c36cd32"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d94fdf9e4b0d3f9b434ad2b"}, {"problem": 30, "code": "#(reduce (fn [x y] \n          (let [l (last x)]\n            (if (= l y) x (conj x y)))) [] %)", "user": "5db8663ce4b010eb3c36cd4c"}, {"problem": 30, "code": "#(reduce (fn [acc curr]\n              (if (= (last acc) curr) acc (conj acc curr))\n            ) [] %)", "user": "5db861bce4b010eb3c36cd4b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5db68091e4b010eb3c36cd3a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5db6cc4ae4b010eb3c36cd3b"}, {"problem": 30, "code": "#(reduce (fn [v c]\r\n            (if (= (last v) c)\r\n              v\r\n              (concat v (list c))))\r\n          () %)", "user": "5dbd51cfe4b09f47823971bb"}, {"problem": 30, "code": "(fn [ip_string]\n   (loop [ip ip_string op []]\n     (if (first ip)\n       (if (= (first ip) (last op))\n         (recur (drop 1 ip) op)\n         (recur (drop 1 ip) (conj op (first ip)))\n         )\n        op\n     )))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 30, "code": "(fn [coll]\n  (for [x (partition-by identity coll)]\n    (first x)))", "user": "5db19599e4b010eb3c36cd05"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5dbf0281e4b0e59a23173d75"}, {"problem": 30, "code": "(fn [x]\n (loop [a (first x) coll (rest x) result []]\n  (if (empty? coll)\n   (conj result a)\n   (cond\n    (not= a (first coll)) (recur (first coll) (rest coll) (conj result a))\n    :else \n    (recur a (rest coll) result)))))", "user": "5da9d89ae4b000c986472c3b"}, {"problem": 30, "code": "#(loop [ f (first %) cl (rest %) re []]\n   (cond\n     (not f) re\n     (= f (first cl)) (recur f (rest cl) re)\n     :else (recur (first cl) (rest cl) (conj re f))))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 30, "code": "reduce #(if (=(last %1) %2) %1 (conj %1 %2)) []", "user": "5dbb5200e4b09f47823971a9"}, {"problem": 30, "code": "(fn [sq]\n  (apply concat \n         (map #(distinct %) (partition-by identity sq))))", "user": "5dbe63bde4b09f47823971c7"}, {"problem": 30, "code": "(fn [s]\n  (first\n   (reduce\n    (fn [[ret prev] c]\n      (if (and (complement (= prev nil)) (= prev c))\n        [ret c]\n        [(conj ret c) c]\n        )\n      )\n    [[] nil]\n    s\n    )\n   )\n)", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 30, "code": "(fn remove-duplicates\n  [sequence]\n  (reduce #(if (or (empty? %1) (not=(last %1) %2))\n            (conj %1 %2)\n            %1\n            ) [] sequence))", "user": "5db1e852e4b010eb3c36cd0a"}, {"problem": 30, "code": "reduce (fn [coll x] (if (= (last coll) x) coll (conj coll x))) []", "user": "5dbe27c3e4b09f47823971c4"}, {"problem": 30, "code": "#(reduce (fn [acc item] (if (= item (last acc))\n                            acc\n                            (conj acc item))) [] %)", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 30, "code": "(fn deduplicate [elements]\n  (let [fstElem (first elements)\n        restElems (rest elements)]\n    (cond\n     (nil? fstElem) '()\n     (= fstElem (first restElems)) (deduplicate restElems)\n     :else (conj (deduplicate restElems) fstElem))))", "user": "5dc4719ae4b02f9375f4e1b5"}, {"problem": 30, "code": "(fn [coll] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll))", "user": "5dc40814e4b02f9375f4e1ae"}, {"problem": 30, "code": "(fn [string]\n  (seq (reduce (fn [acc chr]\n       \t         (if (not= (last acc) chr)\n                \t  (conj acc chr) acc)) [] string)))", "user": "5dc6e7f9e4b02f9375f4e1ca"}, {"problem": 30, "code": "(fn [sq] (reduce (fn [acc x] (if (not= (last acc) x) (conj acc x) acc)) [] sq))", "user": "5da94ccfe4b000c986472c2f"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "4fbb7010e4b081705acca2e7"}, {"problem": 30, "code": "(fn [seq] (reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) () seq))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 30, "code": "(fn [coll] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll))", "user": "5dc9d5c3e4b03836ba07d824"}, {"problem": 30, "code": "reduce (fn [acc x] (if (= (peek acc) x) acc (conj acc x))) []", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 30, "code": "(fn\n  [s]\n  (reduce #(or (and (= (last %1) %2) %1) (conj %1 %2)) [] (seq s)))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 30, "code": "(fn [s]\n  (letfn [(compare-run [x ss]\n            (if (= 1 (count ss))\n              (if (= x (first ss))\n                ss\n                (cons x ss))\n              (if (= x (first ss))\n                (compare-run x (rest ss))\n                (cons x (compare-run (first ss) (rest ss))))))]\n    (compare-run (first s) (rest s))))", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5dca5e0ae4b02b31cc3da3af"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [result el]\n            (if (= (last result) el)\n              result\n              (conj result el)))\n          []\n          s))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 30, "code": "(fn [coll]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll)\n  )", "user": "5dc9c4f2e4b02f9375f4e1f0"}, {"problem": 30, "code": "(fn [s] \n  (reduce\n   (fn [out x] (if (not= (last out) x) (conj out x) out))\n   []\n   s\n )\n)", "user": "5dc9e5bfe4b03836ba07d826"}, {"problem": 30, "code": "(fn compress [l]\n  (loop [s l, res []]\n    (if (empty? s)\n      res\n      (recur (rest s)\n             (if (= (first s)\n                    (last res))\n               res\n               (conj res (first s)))))))", "user": "5dcc0ee9e4b02b31cc3da3c2"}, {"problem": 30, "code": "#(reduce (fn [res x] (if (= (last res) x) res (conj res x))) [(first %)] (rest %))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 30, "code": "(fn adjacent-dedup [s]\n  (loop [prev nil\n         cur  (first s)\n         more (rest s)\n         res []]\n    (cond\n      (nil? cur)\n      res\n\n      (= prev cur)\n      (recur cur (first more) (rest more) res)\n      \n      :else\n      (recur cur (first more) (rest more) (conj res cur)))))", "user": "5dcbe0dbe4b02b31cc3da3be"}, {"problem": 30, "code": "(fn [input]\n  (loop [ans (empty input)\n         prod input]\n    (if (empty? prod)\n      ans\n      (if (= (last ans) (first prod))\n        (recur ans\n               (rest prod))\n        (recur (concat ans [(first prod)])\n               (rest prod))))))", "user": "5dcbd629e4b02b31cc3da3bd"}, {"problem": 30, "code": "(fn compress\n  [res coll]\n  (if (empty? coll)\n    res\n    (if (= (first coll) (second coll))\n      (compress res (rest coll))\n      (compress (concat res [(first coll)]) (rest coll))))) []", "user": "5dc318cde4b02f700ae81835"}, {"problem": 30, "code": "(fn [x]\n  (->> x\n   (partition-by identity)\n   (map first)\n   (concat))\n  )", "user": "5afca248e4b0cc2b61a3bd12"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5dcd182ae4b0b296f82db5a9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 30, "code": "(fn [col] (reduce (fn [c n] (cond (= (last c) n) c :else (conj c n)) ) [] (seq col)))", "user": "5dcfdf23e4b0948ae9d9ad43"}, {"problem": 30, "code": "#(loop [coll %\n       deduped [(first coll)]]\n  (if (empty? coll)\n    deduped\n    (if (= (first coll) (last deduped))\n      (recur (rest coll) deduped)\n      (recur (rest coll) (conj deduped (first coll))))))", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5daa0d56e4b000c986472c3c"}, {"problem": 30, "code": "#(loop [i 0 litem nil acc []] (if (>= i (count %)) acc (if (not (= litem (nth % i))) (recur (+ 1 i) (nth % i) (conj acc (nth % i))) (recur (+ 1 i) litem acc))))", "user": "5dd44256e4b0948ae9d9ad69"}, {"problem": 30, "code": "(fn [xs]\n  (loop [[x & ys] xs res []]\n    (if (empty? ys)\n      (conj res x)\n      (if (= x (first ys))\n        (recur ys res)\n        (recur ys (conj res x))))))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 30, "code": "(fn f [[x & col]] \n  (cond \n   (nil? x) ()\n   (= x (first col)) (f col)\n   true (cons x (f col))))", "user": "5dccbde4e4b0b296f82db5a5"}, {"problem": 30, "code": "(fn [coll] (map (comp first set) (partition-by identity coll)))", "user": "5da306a3e4b000c986472be7"}, {"problem": 30, "code": "(fn \n [ls] \n (map first (partition-by identity ls)))", "user": "5dd52ca6e4b0948ae9d9ad75"}, {"problem": 30, "code": "(fn remove-dup [x]\n  (if (empty? x)\n    '()\n    (if (= (count x) 1)\n      x\n      (loop [rem (rest x)\n             prev (first x)\n             res (list (first x))]\n        (if (empty? rem) (reverse res) \n                         (let [[head & tail] rem]\n                           (if (= head prev)\n                             (recur tail head res)\n                             (recur tail head (conj res head))\n                             )\n                           )\n                         ))\n      )\n    ))", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 30, "code": "#(reduce (fn [x y]  (if (not= (last x) y) (conj x y) x       ) ) [] (seq %))", "user": "5dd69c8ce4b0948ae9d9ad83"}, {"problem": 30, "code": "(fn [n]\n  (reduce #(if (= (last %1) %2)\n       %1\n       (conj %1 %2))\n    []\n    n\n    ))", "user": "5da8e170e4b000c986472c29"}, {"problem": 30, "code": "(fn [x]\n  (mapcat set (partition-by identity x)))", "user": "5dd35dcbe4b0948ae9d9ad5f"}, {"problem": 30, "code": "(fn [z]\n   (let [y (if (string? z) (clojure.string/split z #\"\") z)]\n     (letfn [(no-rep [s x] (if-not (= (first (drop-while nil? s)) x) x))]\n       (reverse\n        (filter\n         (complement nil?)\n         (reduce #(cons (no-rep %1 %2) %1) (take 1 y) (rest y))))\n       )))", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 30, "code": "(fn [col] (map first (partition-by identity col)))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 30, "code": "(fn [x]\n  (reduce concat (map set (partition-by identity x))))", "user": "5dcc5e5ce4b02b31cc3da3c7"}, {"problem": 30, "code": "#(let [arg % len (count arg)]\n    (remove nil? (for [i (range len)]\n        (if (= (nth arg (- i 1) nil) (nth arg i))\n            nil\n            (nth arg i)))))", "user": "5dce0151e4b0b296f82db5b5"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [res el]\n            (if (= (last res) el)\n              res\n              (conj res el)))\n          []\n          s))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 30, "code": "(fn compress [s]\n  (cond\n   (empty? (rest s)) s\n   (= (first s) (second s)) (compress (rest s))\n   :else (cons (first s) (compress (rest s)))))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 30, "code": "(fn remove_consecutive_dup [lst]\n  \"Removes consecutive duplicates\"\n  (loop [lst lst result []]\n    (if (nil? lst)\n      result\n      (do\n        (if (= (first lst) (second lst))\n          (recur (next lst) result)\n          (recur (next lst) (conj result (first lst))))))))", "user": "5d614059e4b0c9e5857d500e"}, {"problem": 30, "code": "(partial reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [])", "user": "5dde6251e4b0948ae9d9add3"}, {"problem": 30, "code": "(fn [x]\n  (loop [i 0 l '()]\n    (if (= i (count (partition-by identity x)))\n      (reverse l)\n      (recur (inc i) (into l (set (get (vec (partition-by identity x)) i))))))\n  )", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 30, "code": "#(loop [m-coll (rest %)\n       acc [(first %)]\n       curr-letter (first %)]\n  (if (empty? m-coll) \n    acc \n    (if (= (first m-coll) curr-letter)\n      (recur (rest m-coll) acc curr-letter)\n      (recur (rest m-coll) (conj acc (first m-coll)) (first m-coll)))))", "user": "5de051bfe4b0948ae9d9ade5"}, {"problem": 30, "code": "(fn f30\n  [col]\n  (reduce (fn [acc e]\n            (if (not= e (last acc))\n              (conj acc e)\n              acc)) [] col))", "user": "5bd75870e4b0ed4b8aab4bc0"}, {"problem": 30, "code": "#(reduce (fn [r x] (if (= (last r) x) r (conj r x))) [] %)", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 30, "code": "(fn [seq]\n(reduce\n (fn [a b]\n   (if (= (last a)\n          b)\n     a\n     (conj a\n           b)))\n[(first seq)]\n (rest seq)))", "user": "5dbf6016e4b0e59a23173d79"}, {"problem": 30, "code": "(fn [c]\n (reduce\n  #(if (= %2 (peek %1)) %1 (conj %1 %2))\n  []\n  c))", "user": "5de44684e4b0948ae9d9ae03"}, {"problem": 30, "code": ";(fn [x] (reverse (reduce #(if (= (first (seq %1)) %2) %1 (conj %1 %2)) () x)))\n(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 30, "code": "(fn [x]\n  (loop [previous nil\n         rest-seq x\n         total ()]\n    (if (empty? rest-seq)\n      (reverse total)\n      (if (= (first rest-seq) previous)\n        (recur (first rest-seq) (rest rest-seq) total)\n        (recur (first rest-seq) (rest rest-seq) (conj total (first rest-seq)))))))", "user": "5de4f858e4b0948ae9d9ae09"}, {"problem": 30, "code": "#(reverse (reduce (fn [a b]\n            (if (= b (first a))\n              a\n              (cons b a)))\n         '()\n         %))", "user": "5db35f85e4b010eb3c36cd22"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ddd134ae4b0948ae9d9adc0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "554462c0e4b0a04f79299529"}, {"problem": 30, "code": "(fn [coll] \n  (loop [compressed [] [elem & coll] coll]\n    (if (nil? elem)\n      compressed\n      (if (= (last compressed) elem)\n      \t(recur compressed coll)\n      \t(recur (conj compressed elem) coll)        \n        )\n    )\n  )\n)", "user": "5de6484ce4b0986d99407f66"}, {"problem": 30, "code": "#(reduce\n (fn [acc item]\n   (if (not (= (last acc) item))\n     (conj acc item)\n     acc))\n []\n %)", "user": "5de65feee4b0986d99407f68"}, {"problem": 30, "code": "(fn [sq] (reduce (fn [lst-rs lst] (if (not= lst (last lst-rs)) (conj lst-rs lst) lst-rs)) [] sq))", "user": "5da5a1eee4b000c986472c04"}, {"problem": 30, "code": "(fn [xs]                                     \n    (reduce (fn [acc x]                                      \n              (if (-> acc last (= x) not)                                              \n              (concat acc (cons x '()))                                                   \n              acc                                                               \n              ))                                                     \n            '() xs))", "user": "5de68f83e4b0986d99407f6c"}, {"problem": 30, "code": "(fn [s]\n  (reduce\n   (fn [x c]\n     (if (= (last x) c)\n       x\n       (conj x c)))\n   [] s))", "user": "5de82145e4b0986d99407f7b"}, {"problem": 30, "code": "reduce\n    #(if (= (last %1) %2)\n       %1\n       (conj %1 %2))\n    []", "user": "54d187b7e4b0e8a36923e5e4"}, {"problem": 30, "code": "(fn compres\n  [x]\n  (\n   map first (partition-by identity x)\n   ))", "user": "5de6c094e4b0986d99407f6f"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5da07d10e4b000c986472bd5"}, {"problem": 30, "code": "reduce (fn [new-list item] (if (= (last new-list) item) new-list (conj new-list item))) []", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5de7e7cae4b0986d99407f7a"}, {"problem": 30, "code": "(fn [coll]\n  (let [xs (seq coll)]\n    (reduce (fn [acc, item]\n              (if (not (seq? acc))\n                ;; compare by value and if equals, create new list with both elems, otherwise just return acc\n                (if (= acc item) acc (concat (list acc) (list item)))\n                ;; if seq?, compare last element from acc with item, if equals concat, otherwise just return acc\n                (if (= (last acc) item) acc (concat acc (list item)))))\n            xs)))", "user": "5de48f92e4b0948ae9d9ae07"}, {"problem": 30, "code": "#( map first (partition-by identity %))", "user": "5ddbd4b3e4b0948ae9d9adb5"}, {"problem": 30, "code": "#(loop [clist % result []]\n   (if (empty? clist)\n     result\n     (cond \n      (= (first clist) (first (rest clist))) (recur (rest clist) result)\n      :else (recur (rest clist) (conj result (first clist)))\n      )\n     )\n   )", "user": "5deab1b2e4b0986d99407f9f"}, {"problem": 30, "code": "(fn [s]\n  (loop [ss s l nil r []]\n    (if (not-empty ss)\n      (if (= l (first ss))\n        (recur (rest ss) (first ss) r)\n        (recur (rest ss) (first ss) (conj r (first ss))))\n      r)))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 30, "code": "(fn [xs] ((fn f [x s]\n           (cond\n            (empty? s) (list x)\n            (= x (first s)) (f (first s) (rest s))\n            :else (cons x (f (first s) (rest s)))))\n          (first xs) (rest xs)))", "user": "5dee144ae4b093ff71727591"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "514992d2e4b0b64cbeae1848"}, {"problem": 30, "code": "reduce (fn [to from ] (if (= (last to) from) to  (conj to from)  )   ) [ ]", "user": "5ddbd202e4b0948ae9d9adb4"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "5defd277e4b093ff717275b0"}, {"problem": 30, "code": "reduce\n          #(if (= %2 (last %1)) %1 (conj %1 %2))\n        []", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 30, "code": "(fn compress [coll]\n  (when-let [[f & r] coll]\n     (if (= f (first r))\n       (compress r)\n       (cons f (compress r)))))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5df23060e4b03c219ef1a356"}, {"problem": 30, "code": "(fn co ([aList] (co aList '())) ([[f s & others] accu] (if(nil? s) (reverse (cons f accu)) (if (= f s) (co (cons s others) accu) (co (cons s others) (cons f accu))))))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 30, "code": "(fn [x]\n   (loop [prev nil input x result []]\n        (if (empty? input)\n            result\n            (if (= (first input) prev)\n                (recur prev (rest input) result)\n                (recur (first input) (rest input) (conj result (first input)))\n            )\n        ))\n\n )", "user": "5df54584e4b03c219ef1a38f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5dddc292e4b0948ae9d9adcb"}, {"problem": 30, "code": "#(reduce (fn [v x] (if (or (empty? v) (not= (last v) x)) (conj v x) v)) [] (seq %))", "user": "5ddb8a6ee4b0948ae9d9adb2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5df39a6fe4b03c219ef1a36d"}, {"problem": 30, "code": "(fn [x] (let [size (count x)\n                   x (concat x \"$\")]\n               (loop [i 0\n                      res []]\n                 (if (= i size)\n                   res\n                   (recur (inc i) \n                          (if (= (nth x i) (nth x (inc i)))\n                            res\n                            (conj res (nth x i))))))\n               ))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 30, "code": "#(reverse (reduce (fn [vals val] (if (= (first vals) val) vals (cons val vals))) %1 %2 )) []", "user": "4f24c859e4b0d66497709fef"}, {"problem": 30, "code": "(fn [col]\n   (->> col \n        (partition-by identity)\n        (mapcat distinct)))", "user": "5db98f39e4b010eb3c36cd53"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 30, "code": "(fn [col]\n  (let [f* (fn [acc s*]\n             (if (not= (last acc) s*)\n               (conj acc s*)\n               acc))]\n    (reduce f* [] col)))", "user": "5db658ebe4b010eb3c36cd39"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5dfc457de4b0a607a9a45cea"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5dfe3928e4b0a607a9a45d04"}, {"problem": 30, "code": "#(reverse\n  (reduce\n   (fn [ls x] (if (= (first ls) x) ls (cons x ls)))\n   (list (first %))\n   (seq %)))", "user": "5d98f616e4b0d3f9b434ad3c"}, {"problem": 30, "code": "#(seq (reduce (fn [acc x] (if (= (last acc) x) acc (conj acc x))) [] (vec %)))", "user": "5ac67b47e4b0e27600da776e"}, {"problem": 30, "code": "(fn rem-cons\n  ([s]\n   (rem-cons s \"\" []))\n  ([s last-letter res]\n   (println (str \"s \" s \" last-letter \" last-letter\" res \" res))\n   (if (empty? s)\n    res\n    (if (= last-letter (first s))\n      (rem-cons (rest s) (first s) res)\n      (rem-cons (rest s) (first s) (conj res (first s)))\n      ))))", "user": "5e00752fe4b0a607a9a45d24"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "5dee6926e4b093ff71727598"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 30, "code": "(fn my-compress [x] ((fn my-compress-helper [acc r] \n  (if (empty? r) \n    (seq acc)\n    (if (= (last acc) (first r))\n      (my-compress-helper\n       acc \n       (rest r))\n      (my-compress-helper \n       (concat acc (list (first r)))\n       (rest r)))))\n   [] x))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 30, "code": "(fn [lst]\n  (loop [in (rest lst)\n         out (list (first lst))]\n    (if (empty? in)\n      (reverse out)\n      (if (= (first in) (first out))\n        (recur (rest in) out)\n        (recur (rest in) (cons (first in) out))))))", "user": "55527251e4b0deb715856df3"}, {"problem": 30, "code": "(fn [input]\n  (loop [inny (seq input)\n         outy ()]\n    (if (empty? inny)\n      outy\n     (recur (rest inny) \n            (if (not (= (first inny) (second inny)))\n              (concat outy (list(first inny)))\n              outy)))))", "user": "5d6eaa58e4b04d129b00f2cd"}, {"problem": 30, "code": "(fn remove-duplicates\n  [coll]\n  (reduce (fn [acc curr]\n            (if (= (last acc) curr) acc (conj acc curr))) [] coll))", "user": "5df0f338e4b093ff717275c6"}, {"problem": 30, "code": "(fn [coll]\n  (reverse\n   (reduce \n    #(if (= (first %1) %2) \n       %1\n       (cons %2 %1)) \n    '() coll )))", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 30, "code": "#(reduce \n  (fn [acc el] \n    (println acc el) \n    (if (not (distinct? (last acc) el)) \n      acc \n      (conj acc el))) [] %)", "user": "5dfbe0eae4b0a607a9a45ce2"}, {"problem": 30, "code": "(fn [in]\n  (loop [in in out []]\n     (if (empty? in)\n       out\n       (recur \n        (rest in)\n        (if (= (first in) (last out))\n          out\n          (conj out (first in))\n       \n         )\n       )\n     )\n  )\n)", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e01addee4b0a607a9a45d3f"}, {"problem": 30, "code": "(fn [input] \n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n      )))", "user": "5bf0b940e4b0a6d31fed215c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5af865a9e4b0cc2b61a3bcd1"}, {"problem": 30, "code": "#(reduce\n  (fn [x y]\n     (if (= (last x) y)\n       x\n       (conj x y)))\n  []\n  %)", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 30, "code": "#(let [in-seq-r %]\n    (loop [in-seq in-seq-r \n           pre-value nil \n           ret-seq []]\n        (println ret-seq)\n\n        (if (empty? in-seq)\n            ret-seq\n            (if (= (first in-seq) pre-value)\n                (recur (rest in-seq) pre-value ret-seq)\n                (do \n                    (recur (rest in-seq) (first in-seq) (conj ret-seq (first in-seq)))\n                )\n            )\n        )\n    )\n)", "user": "5d8b3d5be4b0915913b1d3d1"}, {"problem": 30, "code": "(fn [coll]\n  (loop [[elem & coll] coll compressed []]\n    (if (nil? elem)\n      compressed\n      (recur coll (if (= (last compressed) elem) compressed (conj compressed elem)))\n    )\n  )\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5dd3383be4b0948ae9d9ad5e"}, {"problem": 30, "code": "(fn compress \n  ([s] (compress (rest s) (first s) ())) \n  ([rst cur res] \n   (if (empty? rst) (reverse (conj res cur)) \n     (if (= (first rst) cur) (compress (rest rst) (first rst) res) \n       (compress (rest rst) (first rst) (conj res cur))))))", "user": "5e03fd15e4b0a607a9a45d66"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d91acb8e4b0915913b1d406"}, {"problem": 30, "code": "(fn [col]\n  (->> (reduce #(if (= %2 (first %1)) %1 (cons %2 %1)) '() col)\n       (reverse)))", "user": "5e066185e4b0978307768fa4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ded3de4e4b093ff71727584"}, {"problem": 30, "code": "#(reduce (fn [m x] (if-not (= x (last m)) (concat m [x]) m)) '() %)", "user": "5e0ceca5e4b099d064962f91"}, {"problem": 30, "code": "(fn [xs] (->> xs (partition-by identity) (map first)))", "user": "5e0e14bde4b099d064962fa3"}, {"problem": 30, "code": "reduce #(if (not (= (last %) %2)) (conj % %2) %) []", "user": "5e0e836fe4b099d064962fa8"}, {"problem": 30, "code": "#(\n  loop [in % out []]\n  (cond\n    (= in nil) out\n    (= (first in) (last out)) (recur (next in) out)\n    :else (recur (next in) (conj out (first in)))\n  )\n)", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e0a6916e4b099d064962f65"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e121a89e4b099d064962fe4"}, {"problem": 30, "code": "(fn [l] (loop [l l a nil res []] (if (empty? l) res (if (= a (first l)) (recur (rest l) a res) (recur (rest l) (first l) (conj res (first l)))))))", "user": "5e04ce34e4b0a607a9a45d71"}, {"problem": 30, "code": "#(map first (partition-by list %))", "user": "5e14e396e4b0a047bd49f6f7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e0cbc14e4b099d064962f8e"}, {"problem": 30, "code": "(fn\n  [value]\n  (reduce\n    (fn [acc x]\n      (if (not= x (last acc))\n        (conj acc x)\n        (identity acc)))\n    []\n    value))", "user": "5e12b4ffe4b099d064962fec"}, {"problem": 30, "code": "#(reduce (fn [v c] (if (= c (last v)) v (conj v c))) [] %)", "user": "5e144bd5e4b0a047bd49f6e7"}, {"problem": 30, "code": "(fn [a]\n  (loop [i a\n         r []]\n    (if (empty? i)\n      r\n    (if (= (last r) (first i))\n      (recur (rest i) r)\n      (recur (rest i) \n             (conj r (first i))\n             )))))", "user": "5e172edce4b054039d6af22b"}, {"problem": 30, "code": "#(apply list (reduce (fn [col x] \n                       (if (= (last col) x) \n                         col \n                         (conj col x))) \n                     [] %))", "user": "5e17509fe4b00200644e3d52"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [output item]\n            (if (not= item (last output))\n              (conj output item)\n              output)) [] (seq coll)))", "user": "5e16fd78e4b0a047bd49f726"}, {"problem": 30, "code": "(fn [xs] (reduce (fn [acc x] (if (= (last acc) x) acc (conj acc x))) [] (apply list xs) ))", "user": "5e1754abe4b00200644e3d53"}, {"problem": 30, "code": "(fn [s]\n  ((fn [r [a b & c]]\n     (if (nil? a)\n       (reverse r)\n       (if (= a b)\n         (recur r (cons b c))\n         (recur (cons a r) (cons b c)))))\n   '() s))", "user": "5e178fbee4b00200644e3d57"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5dea6a34e4b0986d99407f98"}, {"problem": 30, "code": "(fn [x] \n   \n     (reduce \n      (fn [acc n] (if (= n (last acc)) acc (conj acc n)))\n      []\n      x))", "user": "5e18bd30e4b0dc95940084fa"}, {"problem": 30, "code": "(fn [a] (loop [src a res [] last nil]\n          (if (empty? src) \n            res \n            (let [t (first src)] (recur (rest src) (if (= last t) res (conj res t)) t)))))", "user": "5e0d1947e4b099d064962f92"}, {"problem": 30, "code": "(fn remove_dupe\n  [seq]\n  (reverse (reduce (fn\n            [acc item]\n            (if (= item (first acc))\n              acc\n              (cons item acc))) () seq)))", "user": "5e16006be4b0a047bd49f711"}, {"problem": 30, "code": "(fn uniqueify\n  ([s]\n   (uniqueify s []))\n  ([s acc]\n   (cond\n     (empty? s) (reverse acc)\n     (= (first s) (first (rest s))) (recur (rest s) acc)\n     :else (recur (rest s) (cons (first s) acc)))))", "user": "58f3c18ee4b0438e51c2cead"}, {"problem": 30, "code": "(fn [seq] (loop [suffix seq nodups []] (if (empty? suffix) nodups (recur (rest suffix) (if (= (first suffix) (last nodups)) nodups (conj nodups (first suffix)))))))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 30, "code": "(fn liscompress [a & [b]]\n    (cond \n      (nil? a) '(114)\n      (nil? (first a)) \n        (if (nil? b) \n          '(113)\n          (list b)\n        )\n      (nil? b) \n        (liscompress (rest a) (first a))\n      (= (first a) b) (liscompress (rest a) b)\n      (not= (first a) b) (concat \n        (list b)\n        (liscompress (rest a) (first a)))\n      \n      :else (do (println b) (println (first a)))\n    )\n  )", "user": "5e1d01b5e4b0dc9594008542"}, {"problem": 30, "code": "(fn [col]\n   (map first (partition-by identity col)))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 30, "code": "(fn [s]\n (map first (partition-by identity s))\n)", "user": "5e189cc8e4b0dc95940084f7"}, {"problem": 30, "code": "(fn [x]\n  (map #(second %)\n  \t(filter #(not= (second %) (last %))\n      (partition 3 1 (concat [nil] x [nil])))))", "user": "5c63e034e4b0fca0c1622668"}, {"problem": 30, "code": "(fn [coll] (map #(first %) (partition-by identity coll)))", "user": "5e1a3989e4b0dc9594008511"}, {"problem": 30, "code": "(rand-nth [(fn compress [xs]\n             (loop [done (empty xs)\n                    todo xs]\n               (if (nil? todo)\n                 (reverse done)\n                 (let [[t & odo] todo]\n                   (recur (if (= t (first odo))\n                            done\n                            (cons t done)) odo)))))\n           (fn compress [xs]\n             (let [satome (atom (fn [x] true))\n                   same? (fn [x]\n                           (let [res (@satome x)]\n                             (reset! satome #(not= x %))\n                             res))]\n               (filter same? xs)))])", "user": "5d929ceae4b0915913b1d412"}, {"problem": 30, "code": "(fn compress [s]\n  (for [i (range (count s))\n        :when (not= (nth s (dec i) nil) (nth s i))]\n    (nth s i)))", "user": "5e21c933e4b05b4b01516128"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (concat % [%2])) []", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e23d513e4b05b4b01516145"}, {"problem": 30, "code": "(fn [x]\n  (loop [y (list (first (seq x)))\n         z  (rest (seq x))]\n    (if (= z '())\n      y\n      (if (= (first z) (last y))\n        (recur y (rest z))\n        (recur (concat y [(first z)]) (rest z))\n       )\n     )\n   )\n)", "user": "5e265173e4b05b4b01516175"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 30, "code": "(fn [se]\n(reduce \n        (fn [collu value ]\n            (if \n                (= (last collu) value)\n                collu\n                (conj collu value)\n             )\n            \n        )\n        []\n        se\n        )\n    )", "user": "5e23ca7fe4b05b4b01516144"}, {"problem": 30, "code": "(fn CompressSeq\n  ([inputSeq outputSet]\n   (if (empty? inputSeq)\n     outputSet\n     (if (= (first inputSeq) (last outputSet))\n       (CompressSeq (rest inputSeq) outputSet)\n       (CompressSeq (rest inputSeq) (conj outputSet (first inputSeq)))\n       )\n     ))\n  ([inputSequence]\n   (CompressSeq inputSequence []))\n  )", "user": "5e16b820e4b0a047bd49f71f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e22e4c5e4b05b4b01516137"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e054752e4b0a607a9a45d78"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e228b5ae4b05b4b01516134"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "56777934e4b05957ce8c6167"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5dfb267ee4b0a607a9a45cd4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e317676e4b05b4b01516229"}, {"problem": 30, "code": "reduce (fn [a b] (if (= b (last a)) a (conj a b))) []", "user": "5da4fc6be4b000c986472bff"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [(first %)] (rest %))", "user": "5e357507e4b0650de70e2b2a"}, {"problem": 30, "code": "(fn f\n  ([s]\n   (cond (empty? s) s\n         :else (cons (first s)\n                     (f (first s) (rest s)))))\n  ([prev s]\n   (cond (empty? s) s,\n         (= prev (first s)) (f prev (rest s)),\n         :else (f s))))", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 30, "code": "(fn [xs]\n  (if-let [ys (seq xs)]\n    (conj (->> (partition 2 1 xs)\n               (filter #(not= (first %) (second %)))\n               (map second))\n          (first ys))\n    (rest xs)))", "user": "5d47fa13e4b07c84aa5ae6b6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e3810ffe4b01d43a70e8db1"}, {"problem": 30, "code": "(fn [xs]\n  (reverse (reduce (fn [res elem]\n            (if (= elem (first res))\n              res\n              (conj res elem))) '() xs)))", "user": "5e394c33e4b01d43a70e8dd1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e392de0e4b01d43a70e8dcb"}, {"problem": 30, "code": "#(reduce (fn [res item] \n              (if (not (= item (last res))) (conj res item) res )\n             ) [] %\n           )", "user": "5e161799e4b0a047bd49f713"}, {"problem": 30, "code": "#(reduce \n  (fn [s l]\n    (if (= (last s) l)\n      s\n      (conj s l)))\n  [] %)", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 30, "code": "(fn [input] (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] input))", "user": "5e3a8929e4b01d43a70e8de3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59fa0bb6e4b0ca45a743a352"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 30, "code": "(fn [elems]\n   (reverse\n    (loop [prev (first elems)\n           tail (rest elems)\n           result (list (first elems))]\n      (if (empty? tail)\n        result\n        (let [[h & t] tail] (if (= prev h)\n                              (recur prev t result)\n                              (recur h t (cons h result))))))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 30, "code": "(fn remove-same\n  [seq]\n  (reduce\n    (fn [result item]\n      (if (= (last result) item)\n        result\n        (conj result item)\n        )\n      )\n    [] seq))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5e381434e4b01d43a70e8db4"}, {"problem": 30, "code": "#(loop [x % y (sequence [])]\n  (cond\n    (= x nil) (reduce conj () y)\n    (= (first x) (first y)) (recur (next x) y)\n    :else (recur (next x) (cons (first x) y))\n    )\n  )", "user": "5e259d05e4b05b4b01516169"}, {"problem": 30, "code": "(fn [coll] (->> coll\n                         (partition-by identity)\n                         (map #(first %))))", "user": "5e3975a3e4b01d43a70e8dd3"}, {"problem": 30, "code": "#(reverse (reduce (fn [col item] (if-not (= (first col) item) (conj col item) col)) '() (seq %)))", "user": "5e41c371e4b01d43a70e8e59"}, {"problem": 30, "code": "(fn compress-seq [xs]\n  (loop [last-elem nil rest-s xs result []]\n    (if (empty? rest-s) result\n        (if (not= last-elem (first rest-s)) (recur (first rest-s) (rest rest-s) (conj result (first rest-s)))\n            (recur (first rest-s) (rest rest-s) result)))))", "user": "5e3e0b3fe4b01d43a70e8e1e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e3302ece4b0650de70e2b02"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 30, "code": "reduce (fn [acc el]\n             (if (= el (last acc))\n               acc\n               (concat acc (list el)))) '()", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e444cc7e4b01d43a70e8e7f"}, {"problem": 30, "code": "(fn [arr]\n  (reduce\n    (fn [r x]\n      (let [y (last r)]\n        (if-not (= x y)\n          (conj r x)\n          r)))\n    []\n    arr))", "user": "5e2586afe4b05b4b01516167"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e47e1eee4b043cd24807a35"}, {"problem": 30, "code": "(fn [list]\n              (loop [compressed []\n                     list list\n                     previous-item nil]\n                (if (empty? list)\n                  compressed\n                  (let [current (first list)\n                        the-rest (rest list)\n                        compressed (if (not= current previous-item)\n                                     (conj compressed current)\n                                     compressed\n                                     )]\n                    (recur compressed the-rest current)\n                    )\n                  )\n                ))", "user": "5e491182e4b043cd24807a46"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e453725e4b01d43a70e8e93"}, {"problem": 30, "code": "(fn [myseq]\n  (reduce (fn [result x]\n            (if (= x (last result)) result (conj result x))\n            ) [] myseq))", "user": "5e495e3fe4b043cd24807a4f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e459514e4b01d43a70e8e97"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e4471e1e4b01d43a70e8e85"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5e41cb44e4b01d43a70e8e5b"}, {"problem": 30, "code": "reduce \n    #(if (= (last %1) %2)\n         %1\n         (conj %1 %2))\n    []", "user": "5e4b8fe8e4b0889a8790a555"}, {"problem": 30, "code": "(fn compress [coll] \n  (if (= 1 (count coll))\n    coll\n    (if (= \n         (first coll) \n         (second coll))\n      (compress (rest coll))\n      (cons \n       (first coll)\n       (compress (rest coll))))))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 30, "code": "reduce \n (fn [acc v]\n   (let [l (last acc)]\n     (if (= l v ) \n       acc\n       (conj acc v)\n       )\n     ))\n []", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 30, "code": "(fn [a]\n  (loop [i 0 l 0 r []]\n    (if (= i (count a)) (drop 1 (conj r l))\n    (if (= (nth a i) l)\n      (recur (inc i) l r) \n      (recur (inc i) (nth a i) (conj r l))))))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d078e2de4b0cc9c915881fa"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e208e4be4b05b4b01516113"}, {"problem": 30, "code": "(fn dedup [xs]\n   (if (seq xs)\n     (if (= (first xs) (second xs))\n       (dedup (rest xs))\n       (cons (first xs) (dedup (rest xs))))\n     nil))", "user": "505223fae4b0a561d07d8f17"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e486cb0e4b043cd24807a3e"}, {"problem": 30, "code": "(fn [x]                                                                   \n   (seq (reduce (fn [res item]                                                      \n     (if (= (last res) item)                                                      \n      res                                                                         \n      (conj res item)))                                                      \n   [] x))                                                      \n)", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e54faf7e4b027a2e10ac0f0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e5809bbe4b027a2e10ac104"}, {"problem": 30, "code": "#(map first\n(partition-by identity %))", "user": "5e50012ae4b027a2e10ac0bd"}, {"problem": 30, "code": "(fn f [[a b & c :as all]] (when (< 0 (count all)) (if (= a b) (f (rest all)) (cons a (f (rest all))))))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e5be89ce4b0fd0acd15865f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e5c425ae4b0fd0acd158662"}, {"problem": 30, "code": "(fn remove-duplicates [x]\n   (loop [xs x ys []]\n      (if (not (empty? xs))\n         (let [i (first xs) j (first (drop 1 xs))]\n            (if (= i j)\n               (recur (drop 1 xs) ys)\n               (recur (drop 1 xs) (conj ys i))))\n         ys)))", "user": "5e595637e4b027a2e10ac10e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e5913b5e4b027a2e10ac10b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d83b9aae4b0915913b1d386"}, {"problem": 30, "code": "reduce (fn[col x](if (not= (last col) x) (conj col x) col)) []", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 30, "code": "#(reduce (fn [acc [x y]] (if (= x y) acc (conj acc x))) [] (partition 2 1 [nil] %))", "user": "5e5fd7afe4b0fd0acd158680"}, {"problem": 30, "code": "(fn compress [sq]\n\t(->> sq\n\t\t (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [])\n    )\n)", "user": "5e546e20e4b027a2e10ac0eb"}, {"problem": 30, "code": ";; I was using the following, which sort of worked but the ##NaN is\n;; a hack and 4Clojure didn't like some reader macro?\n;; (map first (filter (fn [[a b]] (not= a b)) (partition 2 1 '(##NaN) %)))\n#(map first (partition-by identity %))", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 30, "code": "(fn [li] (->>\n      #_[1 2 2 2 3 4 5 6 6 6 7 7 3]\n          li\n      (partition 2 1)\n      (remove #(apply = %))\n      ((juxt ffirst #(map second %)))\n      (apply cons)))", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e62444fe4b0fd0acd158694"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e5f8a07e4b0fd0acd15867c"}, {"problem": 30, "code": "(fn compress\n  [coll]\n  (map first (partition-by identity coll)))", "user": "5e4e3c31e4b027a2e10ac0ad"}, {"problem": 30, "code": "; 30 Compress a sequence\n(fn\n  [lst]\n  (reduce\n         (fn [out, each]\n           (if (= (last out) each)\n             out\n             (conj out each)))\n         [(first lst)]\n         (rest lst)))", "user": "5e65bfe4e4b0fd0acd1586b9"}, {"problem": 30, "code": "(fn hi [string]\n  (reverse (reduce #(if (some #{%2} (take 1 %1)) %1 (cons %2 %1)) [] string)))", "user": "5e663073e4b0fd0acd1586bc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5df79c31e4b0a607a9a45c9b"}, {"problem": 30, "code": "(fn\n  [lst]\n  (let [len (count lst)]\n  \t(loop [i 0 acc []]\n      (if (< i len)\n        (if-not (= (last acc) (nth lst i))\n          (recur (inc i) (conj acc (nth lst i)))\n          (recur (inc i) acc))\n        acc))))", "user": "5e668d87e4b0e171e1033681"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b562842e4b02d533a91bd3f"}, {"problem": 30, "code": "#(reverse (reduce (fn [x y] (if-not (= (first x) y) (conj x y) x)) () %))", "user": "5e66c144e4b0e171e1033683"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 30, "code": "(fn [sq]\n  (reduce (fn [acc item]\n          \t(if (= (last acc) item)\n              acc\n              (conj acc item)))\n          []\n          sq))", "user": "5e62c405e4b0fd0acd15869b"}, {"problem": 30, "code": "#(reduce (fn [a b] (if-not (= (last a) b) (conj a b) a)) [] %)", "user": "5e6a9d8ee4b04a83ad7cd276"}, {"problem": 30, "code": "#(loop [c %1, l nil, ret []]\n    (if (empty? c) ret\n    (recur (rest c) (first c) (if (= (first c) l) ret (conj ret (first c))))))", "user": "5e2ead6ae4b05b4b015161f5"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "5e63ffa0e4b0fd0acd1586a6"}, {"problem": 30, "code": "(fn [s]\n  (loop [s s\n         res []]\n    (if (empty? s)\n      res\n      (recur (rest s)\n             (if (= (last res) (first s))\n               res\n               (conj res (first s)))))))", "user": "5e5fa1ffe4b0fd0acd15867d"}, {"problem": 30, "code": "(fn [xs]\n    (loop [elems xs\n           reversed []]\n      (if (empty? elems)\n        reversed\n        (let [[x & xs] elems]\n          (if (= x (last reversed))\n            (recur xs reversed)\n            (recur xs (conj reversed x)))))))", "user": "54dc84ede4b024c67c0cf784"}, {"problem": 30, "code": "(fn [coll]\n    (loop [coll coll\n           coll-acc []]\n      (cond (empty? coll) coll-acc\n            (= (first coll) (second coll)) (recur (rest coll) coll-acc)\n            :else\n            (recur (rest coll) (conj coll-acc (first coll))))))", "user": "5e724492e4b085ba37836dc7"}, {"problem": 30, "code": "#(reverse (nth (reduce (fn [[l x] x1] (if (= x x1) [l x] [(conj l x1) x1])) ['() nil] %) 0))", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bfc50ece4b0bdcf453d15ea"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e639b4be4b0fd0acd1586a2"}, {"problem": 30, "code": "#(reduce (fn [acc v] \n           (if (not= (last acc) v) \n               (conj acc v) \n                acc))\n       [] %)", "user": "5e6cfc25e4b04a83ad7cd28e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cbc1ee7e4b026601754b9e1"}, {"problem": 30, "code": "(fn \n  [sequence]\n  (apply concat (for [part (partition-by identity sequence)]\n            (distinct part))))", "user": "5e6df58ee4b04a83ad7cd297"}, {"problem": 30, "code": "(fn compress [xs]\n  (reduce\n    (fn [acc cur]\n      (if (not= (last acc) cur) (conj acc cur) acc))\n    []\n    xs))", "user": "5e4fae60e4b027a2e10ac0b9"}, {"problem": 30, "code": "(fn [coll]\n\t(loop [state (first coll), coll (rest coll), res [state]]\n      (if (seq coll)\n        (if (= (first coll) state)\n          (recur state (rest coll) res)\n          (recur (first coll) (rest coll) (conj res (first coll))))\n        (seq res))))", "user": "5e76274ce4b085ba37836deb"}, {"problem": 30, "code": "(fn func [r v]\n  (if (empty? v)\n    r\n    (let [r2 (if (not= (first v) (last r)) (conj r (first v)) r)]\n      (func r2 (rest v))))) []", "user": "5e71f267e4b085ba37836dc1"}, {"problem": 30, "code": "#(for [[x y] (partition 2 1 (conj (vec %) nil))\n       :when (not= x y)]\n  x)\n\n;; limit: would not work for seq with nil in it", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e7a5d56e4b085ba37836e0a"}, {"problem": 30, "code": "(fn dedupe\n  ([coll] (dedupe [] coll))\n  ([acc coll] (cond\n                (empty? coll) acc\n                (= (last acc) (first coll)) (dedupe acc (rest coll))\n                :else (dedupe (conj acc (first coll)) (rest coll)))))", "user": "5e7af7ffe4b085ba37836e0f"}, {"problem": 30, "code": "(fn [col]\n   (reduce #(if (not= (first %) %2) (cons %2 %) %) [] (reverse col)))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 30, "code": "#(map first (partition-by identity (seq %)))", "user": "5e7aba9fe4b085ba37836e0c"}, {"problem": 30, "code": "(fn [lst]\n             (loop [lst lst\n                    acc '()]\n               (cond\n                 (empty? lst) acc\n                 (= (last acc) (first lst)) (recur (rest lst) acc)\n                 :else (recur (rest lst) (concat acc (list (first lst)))))))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e77ece9e4b085ba37836df3"}, {"problem": 30, "code": "(fn [arr]\n  (loop [[current & remaining] arr prev nil result []]\n    (let [next-result (if (or (= nil prev) (not= prev current))\n                        (conj result current)\n                        result)]\n      (if (= remaining nil)\n        next-result\n        (recur remaining current next-result)))))", "user": "5e7f62cce4b085ba37836e3b"}, {"problem": 30, "code": "(fn [items]\n  (loop [items items\n         n []]\n    (if (not (seq items))\n      n\n      (if (= (last n) (first items))\n        (recur (rest items) n)\n        (recur (rest items) (conj n (first items)))))))", "user": "5e5f75a0e4b0fd0acd15867a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e8308abe4b09a7a73c8bbb4"}, {"problem": 30, "code": "#(reduce (fn [a x] \n           (if (= (last a) x)\n             a\n             (conj a x)\n             )\n           ) []\n         %\n         )", "user": "5e5f83a2e4b0fd0acd15867b"}, {"problem": 30, "code": "(fn [coll]\n     (loop [x coll\n            result []]\n       (if (empty? x)\n         result\n         (recur (next x)\n                (let [[first] x]\n                  (if (= first (last result))\n                    result\n                    (conj result first)))))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e7bb000e4b085ba37836e1d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "585c16c3e4b0f14aab7c877d"}, {"problem": 30, "code": "#(reduce (fn [res el] (if (= el (last res)) res (conj res el))) [] %)", "user": "5e805895e4b085ba37836e44"}, {"problem": 30, "code": "#(reduce (fn [acc x] (cond\n                       (= x (last acc)) acc\n                       :else (conj acc x))) [] %)", "user": "5e860270e4b09a7a73c8bbdb"}, {"problem": 30, "code": "(fn [l] (for [x (map vector l (concat '(\\_) (take (- (count l) 1) l))) :when (not= (first x) (last x))] (first x)))", "user": "5e7374ace4b085ba37836dd0"}, {"problem": 30, "code": "#(loop [i % l nil o [] ]\n   (if (first i)\n     (if (= (first i) l)\n       (recur (rest i)\n              (first i)\n              o\n              )\n       (recur (rest i)\n              (first i)\n              (conj o (first i))\n              )\n       )o))", "user": "5e85163be4b09a7a73c8bbd0"}, {"problem": 30, "code": "reduce #(if-not (= (last %1) %2) (conj %1 %2) %1) []", "user": "5d517784e4b0776584bd6f60"}, {"problem": 30, "code": "#(reduce (fn [all x] (if (= (last all) x) all (conj all x))) [] %)", "user": "5e839edde4b09a7a73c8bbba"}, {"problem": 30, "code": "(fn compress [s] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [(first s)] (rest s)))", "user": "5e69589de4b04a83ad7cd26d"}, {"problem": 30, "code": "#(reduce \n    (fn [x y] (if-not (= (last x) y) \n      (conj x y) x)) \n    [] %)", "user": "5e13a6b7e4b099d064963001"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d6f8b4de4b04d129b00f2d3"}, {"problem": 30, "code": "#(->> %\n      (partition-by identity)\n      (map first)\n      )", "user": "5e85b853e4b09a7a73c8bbd5"}, {"problem": 30, "code": "#(reduce (fn [r v]\n           (if (not= (last r) v)\n             (conj r v)\n             r))\n         (vector (first %)) (rest %))", "user": "5e87194ce4b09a7a73c8bbe4"}, {"problem": 30, "code": "(fn rem-dubles\n  ([arg] (rem-dubles arg nil))\n  ([arg lst] (if (empty? arg) nil\n               (concat (if (= lst (first arg)) nil [(first arg)])\n                     (rem-dubles (rest arg) (first arg))))))", "user": "5e88a676e4b0cb016954630a"}, {"problem": 30, "code": "(fn [s] (->> (partition 2 1 nil s)\n              (remove (fn [[x y]] (= x y)) )\n              (map first)))", "user": "5e856736e4b09a7a73c8bbd2"}, {"problem": 30, "code": "#(reduce (fn [a c]\n           (if (= c (last a))\n             a\n             (conj a c)))\n         []\n         %)", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 30, "code": "(fn rd\n  [c]\n  (when-let [x (first c)]\n    (cons x (rd (drop-while (partial = x) c)))))", "user": "4eb70649535d7eef30807373"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e83696ce4b09a7a73c8bbb7"}, {"problem": 30, "code": "(fn my-dedupe [xs]\n  (let [f (first xs)]\n    (if f\n      (cons f (my-dedupe (drop-while #(= f %) (rest xs))))\n      xs)))", "user": "5e7dc2d8e4b085ba37836e2f"}, {"problem": 30, "code": "(fn[x](reduce #(if (= (last %) %2) % (conj % %2)) [] x))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 30, "code": "#(loop [in % out []] (if (empty? in) out (recur (rest in) (if (= (first in) (last out)) out  (conj out (first in))))))", "user": "5e8f87c7e4b0cb0169546342"}, {"problem": 30, "code": "(fn [col]\n  (reverse (reduce \n   (fn [acc letter] \n    (if (= (first acc) letter) \n     acc \n     (conj acc letter)))\n   '() \n   col)))", "user": "5c3e5227e4b08cd430848e80"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e954b9ee4b0fbed045a3809"}, {"problem": 30, "code": "#(loop [sq % cmp []]\n   (if (empty? sq)\n     cmp\n     (let [el (first sq)]\n       (if (not= el (last cmp))\n\t\t (recur (rest sq) (conj cmp el))\n\t\t (recur (rest sq) cmp)         \n       )\n     )\n\n  )\n)", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 30, "code": "(fn compress [x]\n  (loop [result []\n         remaining x]\n    (if (empty? remaining)\n      result\n      (if (= (last result) (first remaining))\n        (recur result\n               (rest remaining))\n        (recur (conj result (first remaining))\n               (rest remaining))))))", "user": "5e95c88de4b0fbed045a380e"}, {"problem": 30, "code": "(fn [_]\n  (reduce\n   \t#(if (= %2 (last %))\n     %\n     (conj % %2)\n   )\n   []\n   _\n   )\n )", "user": "5e958767e4b0fbed045a380b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5be9ad9be4b0f319e2d7ec76"}, {"problem": 30, "code": "#((fn f [[x & xs :as l] p] \n    (if (empty? l)\n      '()\n      (if (= x p)\n        (f xs x)\n        (conj (f xs x)x)))) % nil)", "user": "5e98e338e4b0157ca96647db"}, {"problem": 30, "code": "(fn compress\n  [lst]\n  (loop [result [(first lst)]\n         vct lst]\n    (cond\n      (empty? vct) result\n      (= (last result) (first vct)) (recur result (rest vct))\n      :else (recur (conj result (first vct)) (rest vct)))))", "user": "5e9636fee4b0fbed045a3816"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5e980e6be4b0157ca96647d6"}, {"problem": 30, "code": "(fn [xs]\n  (loop [[first & rest :as all] xs\n         acc []]\n    (if (empty? all) \n      acc\n      (if (= first (last acc))\n        (recur rest acc)\n        (recur rest (conj acc first))))))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 30, "code": "(fn compress [xs]\n  (reduce\n   \t(fn [a e]\n      (if (= (last a) e)\n        a\n        (concat a (list e))))\n\t'()\n   \txs))", "user": "5e98e8a9e4b0157ca96647dc"}, {"problem": 30, "code": "(fn [s]\n  (reduce\n      #(if (= (peek %1) %2)\n         %1\n         (conj %1 %2))\n      []\n      s))", "user": "5e976fa8e4b0157ca96647cf"}, {"problem": 30, "code": "(fn compress\n  [n]\n  (map first (partition-by identity n)))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 30, "code": "(fn [s] (map first (partition-by identity s)))", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5e996e76e4b0157ca96647e4"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5e9683f1e4b0157ca96647c7"}, {"problem": 30, "code": "(fn remove-dup \n  ([s] (remove-dup (first s) (rest s)))\n  ([cur s] (println \"cur: \" cur \" s: \" s)\n    (cond (empty? s) (cons cur s) \n          (= (first s) cur) (remove-dup cur (rest s))\n          :else (cons cur (remove-dup (first s) (rest s))))))", "user": "5e9a3814e4b0157ca96647e7"}, {"problem": 30, "code": "(fn dupliq-seq [x]\n  (map #(first %) (partition-by identity x)))", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 30, "code": "(fn [i] \n  (into () (reduce (fn [acc item]\n                  (if (= (first acc) item)\n                      acc\n                      (conj acc item))) \n          \t\t(list (first i)) \n                i\n                )\n        )\n  )", "user": "5e84b48ee4b09a7a73c8bbc8"}, {"problem": 30, "code": "(fn [x]\n  (#(map first (partition-by identity %)) x)  )", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e9e8648e4b00a66d4a95178"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e950310e4b0fbed045a3802"}, {"problem": 30, "code": "#(reduce (fn [acc x] (if (=(last acc) x)\n                       acc\n                       (conj acc x)))[] %)", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 30, "code": "(fn [col]\n  (loop [cl (rest col), prev (first col), res [prev]]\n    (cond\n      (empty? cl) res\n      (= prev (first cl)) (recur (rest cl) prev res)\n      :else (recur (rest cl) (first cl) (conj res (first cl))))))", "user": "5e9f38cce4b00a66d4a9517e"}, {"problem": 30, "code": "reduce #(if (not (= (last %1) %2)) (conj %1 %2) %1) []", "user": "5e85d0bde4b09a7a73c8bbd6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 30, "code": "(fn [x] (map #(first %) (partition-by identity x)))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e9878b9e4b0157ca96647d8"}, {"problem": 30, "code": "(fn compress\n  [n]\n  (map first (partition-by identity n)))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 30, "code": "(fn [s] (map first (filter #(not= (first %) (second %))\n                           (map #(list %1 %2)\n                                s (cons nil s)))))", "user": "59750a68e4b01722bebd4cba"}, {"problem": 30, "code": "(fn [coll] \n  (loop [x coll y [(first coll)] z (count coll)]\n    (if (> z 0)\n      (if (= (first x) (last y))\n        (recur (rest x) y (dec z))\n        (recur (rest x) (conj y (first x)) (dec z))\n      )\n      y\n    )\n  )\n)", "user": "5df08767e4b093ff717275bf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5335cab9e4b0e30313ee6c70"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ea444b7e4b00a66d4a951a0"}, {"problem": 30, "code": "(fn solution [coll] (reduce #(do (if (not= (last %1) %2)\n                                     (conj %1 %2)\n                                     %1)) [] coll))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 30, "code": "(fn f [xs]\n        (loop [xs xs\n               result '()]\n            (cond \n                (empty? xs) result\n                (empty? (rest xs)) (concat result (list (first xs)))\n                :else (let [x (first xs)\n                            y (second xs)]\n                        (if (= x y)\n                            (recur (rest xs) result)\n                            (recur (rest xs) (concat result (list x)))))\n                )\n            )\n        )", "user": "5ea2e6bfe4b00a66d4a95197"}, {"problem": 30, "code": "#(map first (partition-by identity (seq %)))", "user": "5ea580a3e4b00a66d4a951a7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 30, "code": "(fn [n] \n  (map #(first %) (partition-by identity n)))", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "5da70ceee4b000c986472c11"}, {"problem": 30, "code": "(fn strip-fn [input]\n  (loop [uncomp input, comp []]\n    (if (empty? uncomp) comp\n                        (let [prev (last comp),\n                              next (first uncomp),\n                              same? (= prev next)]\n                          (recur (rest uncomp) (if same? comp (conj comp next)))))))", "user": "5eac172fe4b00a66d4a951dd"}, {"problem": 30, "code": "(fn [s] (map #(first %) (partition-by identity s)))", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5eaba9c0e4b00a66d4a951d6"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2)\n            %1\n            (conj %1 %2)) []", "user": "52d81642e4b09f7907dd1387"}, {"problem": 30, "code": "(fn compress [xs]\n  (loop\n    [x xs\n     res []]\n    (cond\n     (empty? x) res\n     (= (first x) (second x)) (recur (rest x) res)\n     :else (recur (rest x) (conj res (first x)))\n     )))", "user": "5b2be9b1e4b025bcb146f2b0"}, {"problem": 30, "code": "#(reduce (fn [x y]\n                          (if (= (last x) y)\n                            x\n                            (conj x y))) [] %)", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 30, "code": "#(reduce (fn\n          [a v]\n          (let [last-value ((comp str last) a)\n                current-value (str v)]\n            (if (not= last-value current-value)\n              (conj a v)\n              a)))\n        [] \n        (seq %))", "user": "5eb1e42ae4b00a66d4a95202"}, {"problem": 30, "code": "reduce (fn [a b] (if (and (> (count a) 0) (= (last a) b)) a (conj a b))) []", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e0828b9e4b0978307768fbe"}, {"problem": 30, "code": "(fn [seq]\n  (reduce (fn [result item]\n            (if (= item (last result))\n                   result\n                   (conj result item)))\n          [] seq))", "user": "5eb1a80ce4b00a66d4a951ff"}, {"problem": 30, "code": "(fn [s]\n                     (loop [s (seq s)\n                            out []]\n                       (if (empty? s)\n                         out\n                         (recur (rest s) (if (= (first s) (last out))\n                                           out\n                                           (conj out (first s)))))))", "user": "5eb22708e4b00a66d4a95204"}, {"problem": 30, "code": "(fn foo\n  [st]\n  (cond\n    (empty? st) []\n    (= (first st) (second st)) (foo (rest st))\n    :else (cons (first st) (foo (rest st)))))", "user": "5eb3f908e4b00a66d4a9521a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5eb56fc1e4b00a66d4a95224"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ebb0f7be4b00a66d4a95261"}, {"problem": 30, "code": "(fn [s] (reduce (fn [ss e] (if (= (last ss) e) ss (conj ss e)))\n                []\n                s))", "user": "5e4beca9e4b0889a8790a560"}, {"problem": 30, "code": "(fn [s]\n\n   (reduce (fn [acc x]\n             (if (= (last acc) x)\n               acc\n               (conj acc x))) [] s)\n   )", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 30, "code": "#(loop \n   [sq % result []]\n   (if (empty? sq) result \n     (if (= (first sq) (second sq)) \n       (recur (rest sq) result) \n       (recur (rest sq) (conj result (first sq))))))", "user": "5ebd63dee4b00a66d4a95271"}, {"problem": 30, "code": "#(reduce\n  (fn [c i]\n    (if (= (last c) i)\n      c\n      (conj c i)))\n  []\n  %)", "user": "5ebff55de4b00a66d4a95286"}, {"problem": 30, "code": "#(reduce (fn [res a] (if (= (last res) a) res (conj res a))) [] %)", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 30, "code": "(fn dedupy\n    ([s] (dedupy s []))\n    ([s ans]\n     (if (empty? s)\n       ans\n       (if (= (last ans) (first s))\n         (recur (rest s) ans)\n         (recur (rest s) (conj ans (first s)))))))", "user": "5ebc9feae4b00a66d4a95268"}, {"problem": 30, "code": "(fn [xs]\n  (->>\n   (partition-by identity xs)\n   (map first)))", "user": "5ec21ef0e4b00a66d4a95299"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "51412b0ae4b0694e2952b79d"}, {"problem": 30, "code": "(fn compress-seq\n  [uncomp-seq]\n  (loop [[e & reste] uncomp-seq\n         ergebnis-seq []]\n    (if (empty? reste)\n      (conj ergebnis-seq e)\n      (recur  reste (if (= e (first reste))\n                      ergebnis-seq\n                      (conj ergebnis-seq e)))))\n    )", "user": "5e790f6be4b085ba37836e01"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [r x]\n            (if (not= (last r) x)\n              (conj r x)\n              r)) [] coll))", "user": "5defc177e4b093ff717275af"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5eb5d9bbe4b00a66d4a9522e"}, {"problem": 30, "code": "(fn [xs] (reduce #(if (= (last  %1) %2) %1 (conj %1 %2)) [] xs))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 30, "code": "(fn [col]\n  (for [[a b] (partition 2 1 [nil] col)\n        :when (not (= a b))]\n    a))", "user": "5d13af73e4b0902706380dbe"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5ec66326e4b08d0ec38692d5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e9154c1e4b0cb0169546354"}, {"problem": 30, "code": "(fn [xs]\n  (reduce \n   (fn [acc x]\n     (if (= (last acc) x)\n       acc\n       (conj acc x)))\n   []\n   xs))", "user": "5e0b6375e4b099d064962f7b"}, {"problem": 30, "code": "(fn r-dup [xs]\n  (cond \n   (< (count xs) 2) xs\n   :else (let [[x y & z] xs]\n           (if (= x y)\n             (r-dup (cons y z))\n             (cons x (r-dup (cons y z)))))))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ec6b354e4b08d0ec38692d8"}, {"problem": 30, "code": "(fn [data]\n  (map first (partition-by identity data)))", "user": "5ec943fde4b08d0ec38692f1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 30, "code": "reduce (fn [coll val]\n         (let [prev (last coll)]\n           (if (= prev val)\n             coll\n             (conj coll val)))) []\n\n; Like this solution\n;\n; #(map first (partition-by identity %))", "user": "5eccc5c2e4b016b56eae058f"}, {"problem": 30, "code": "(fn [colls]\n  (reduce (fn [acc curr]\n            (if (= (last acc) curr)\n            \tacc\n              (conj acc curr)\n              )) [] colls))", "user": "5ebb4751e4b00a66d4a95262"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x) )", "user": "5ece3d25e4b016b56eae059b"}, {"problem": 30, "code": "reduce (fn [out check](if (= (last out) check) out (conj out check))) []", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 30, "code": "#(loop[result [], input %]\n    (cond\n      (nil? input) result\n      (= (last result) (first input)) (recur result (next input))\n      :else (recur (conj result (first input)) (next input))))", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 30, "code": "#(reverse (reduce \n                  (fn [l r] (\n                             into l (if (not= r (first l))\n                                      (list r))))\n                  ()\n                  %))", "user": "5ecf4ee4e4b016b56eae05a6"}, {"problem": 30, "code": "(fn test [x]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x\n  )\n)", "user": "5ec2dd45e4b00a66d4a952a1"}, {"problem": 30, "code": "(fn [x]\n  (seq (map first (partition-by identity x))))", "user": "5ecf55dae4b016b56eae05a8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ecd1831e4b016b56eae0592"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 30, "code": "(fn [obj]\n  (map #(first %) (partition-by identity obj)))", "user": "5ed08785e4b016b56eae05b1"}, {"problem": 30, "code": "(fn f [s] (map first (partition-by identity s)))", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 30, "code": "(partial reduce (fn [acc val] (if (= val (last acc))\n                                acc\n                                (conj acc val))) [])", "user": "5ed3c43be4b016b56eae05c4"}, {"problem": 30, "code": "#(loop [acc () sq %] (if (empty? sq) (reverse acc) (if (= (first acc) (first sq)) (recur acc (rest sq)) (recur (conj acc (first sq)) (rest sq)))))", "user": "5ed03b7fe4b016b56eae05ae"}, {"problem": 30, "code": "reduce (fn [sq b] (if (= (last sq) b) sq (concat sq [b]))) '()", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "5e67ab18e4b0e171e103368a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e2f73e5e4b05b4b01516204"}, {"problem": 30, "code": "(fn [in] (->> in\n              (partition-all 2 1)\n              (filter #(not= (first %) (second %)))\n              (map first)\n              (#(if (char? (first %))\n                  (apply str %)\n                  %))))", "user": "5e36ca7de4b0650de70e2b3c"}, {"problem": 30, "code": "(fn [s] \n  (reduce\n   #(if (= (last %1) %2)\n      %1\n      (conj %1 %2))\n   []\n   s))", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5309bacae4b02e82168697bc"}, {"problem": 30, "code": "(partial reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [])", "user": "4f6543cae4b07046d9f4ef41"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ec0db8be4b00a66d4a9528d"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5ecf55aae4b016b56eae05a7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ed677bee4b016b56eae05e0"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5ed9b912e4b0c7845d86b0e3"}, {"problem": 30, "code": "reduce (fn [f xs] \n                (if (not= (last f) xs)\n                  (conj f xs)\n                  f)) []", "user": "5ed4b1e8e4b016b56eae05ce"}, {"problem": 30, "code": "(fn compress [coll] \n  (map first (partition-by identity coll)))", "user": "5ed30cb6e4b016b56eae05c2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5644149de4b0018b46ad8c07"}, {"problem": 30, "code": "#(reduce (fn [a b]\n           (if (= (last a) b)\n             a\n            (conj a b)))\n         [] %)", "user": "5ebd7296e4b00a66d4a95273"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5eac6a63e4b00a66d4a951e0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5edc645ae4b0c7845d86b0f2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 30, "code": "#(reverse (reduce (fn [a e] \n         (if (= (first a) e)\n           a\n           (conj a e))) () %))", "user": "5edd6eb7e4b0c7845d86b0f7"}, {"problem": 30, "code": "(fn [s]\n  (reduce\n    #(if (= (last %1) %2)\n       %1\n       (conj %1 %2))\n    [] s))", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 30, "code": "(fn [s] (map #(first %) (partition-by identity s)))", "user": "5ec25800e4b00a66d4a9529b"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5ed4482be4b016b56eae05ca"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 30, "code": ";;#(map first (partition-by identity %))\n#(->> % (partition-by identity) (map first))", "user": "5edb07dde4b0c7845d86b0ed"}, {"problem": 30, "code": "(fn [col]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] col))", "user": "565b371fe4b068f2fe63dbff"}, {"problem": 30, "code": "(fn [x] \n\t(reduce (fn [p q]  \n              (if (first p) \n                    (if (= (last p) q)\n                        p\n                        (conj p q)\n                     )\n                    [q]\n                )\n              ) [] x ))", "user": "5edc16e1e4b0c7845d86b0f1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ede8210e4b0c7845d86b0fe"}, {"problem": 30, "code": "(fn compress [lst]\n  (if (empty? lst)\n    lst\n    (if (= (first lst) (second lst))\n      (compress (concat (list (first lst))\n                        (rest (rest lst))))\n      (concat (list (first lst))\n              (compress (rest lst))))))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 30, "code": "(fn [s]\n  (reverse (reduce (fn [acc x]\n                    (if (empty? acc)\n                      (list x)\n                      (if (= (first acc) x)\n                        acc\n                        (conj acc x)))) '() s)))", "user": "5ed875abe4b016b56eae05f2"}, {"problem": 30, "code": "(fn [s]\n  (reduce (fn [prev cur] (if (= cur (last prev)) prev (conj prev cur))) [] s))", "user": "5e909685e4b0cb016954634d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ee4ae10e4b029a2061bbe8f"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "5ee543bde4b029a2061bbe95"}, {"problem": 30, "code": "(fn compress-sequence [s]\n  (reduce (fn [z e]\n  (if (= (last z) e)\n     z\n     (conj z e))) [] s))", "user": "5edd0ad2e4b0c7845d86b0f4"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5ee6d30ce4b029a2061bbe9c"}, {"problem": 30, "code": "(fn [x]\n  (loop [orig x\n         res []]\n    (if (empty? orig)\n      res\n      (if (= (first orig) (first (rest orig)))\n        (recur (rest orig) res)\n        (recur (rest orig) (conj res (first orig)))))))", "user": "5eb6561fe4b00a66d4a95233"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 30, "code": "(fn [s]\n  (seq (reduce (fn [acc x]\n            (if (and (not (empty? acc)) (= (last acc) x))\n              acc\n              (conj acc x)))\n            [] s)))", "user": "5ee7b49de4b029a2061bbea6"}, {"problem": 30, "code": "#(reduce\n    (fn [result item]\n      (if (= item (last result))\n        result\n        (conj result item))\n      )\n    '[]\n    %)", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ed6c4ede4b016b56eae05e3"}, {"problem": 30, "code": "(fn dedup\n  ([s prev] (cond (empty? s) '() (= (first s) prev)\n              (dedup (rest s) (first s))\n              :else (cons (first s) (dedup (rest s) (first s)))))\n  ([s] (cons (first s) (dedup (rest s) (first s)))))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5eea5c98e4b029a2061bbebf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5eea8f0de4b029a2061bbec3"}, {"problem": 30, "code": "(fn [args] (seq (reduce (fn [acc,x] (if (not= x (last acc)) (conj acc x) acc)) [] args)))", "user": "5eeb03dde4b029a2061bbeca"}, {"problem": 30, "code": "(fn compress\n  [input-seq]\n  (seq (reduce (fn [return-lis item]\n                   (if-not (= (last return-lis) item)\n                     (conj return-lis item)\n                     return-lis))\n         []\n         input-seq)))", "user": "5eecd339e4b07c55ae4a0507"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e9b6471e4b0157ca96647f0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5eeeb000e4b07c55ae4a0515"}, {"problem": 30, "code": "(fn f ([l] (if (empty? l) l (f (rest l) [(first l)])))\n([l d] (if (empty? l) d (if (= (first l) (peek d)) (recur (rest l) d) (recur (rest l) (conj d (first l)))))))", "user": "5e373c08e4b0650de70e2b41"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "5eee9352e4b07c55ae4a0512"}, {"problem": 30, "code": "(fn [v]\n  (loop [current v result []]\n    (if (empty? current)\n      result\n      (if (= (last result) (first current))\n        (recur (rest current) result)\n        (recur (rest current) (conj result (first current)))))))", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 30, "code": "reduce (fn [res x] (if (= (last res) x) res (conj res x))) []", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 30, "code": "(fn [xs]\n  \t(reduce\n    \t(fn [v e]\n          (if\n            (= e (last v))\n            v\n            (conj v e)))\n                    [] xs))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 30, "code": "(fn compress [seq]\n  (reduce #(if (not= (last %1) %2) (concat %1 [%2]) %1) '() seq))", "user": "5ef381a3e4b07c55ae4a053c"}, {"problem": 30, "code": "(comp seq #(reduce (fn [l v] (if (not (= v (last l))) (conj l v) l)) [] %))", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 30, "code": "(fn compress\n  [s]\n  (reverse (reduce #(if (= (str (first %1)) (str %2))\n                       %1\n                       (cons %2 %1)) () (seq s))))", "user": "5ec03772e4b00a66d4a95289"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ec7d7f2e4b08d0ec38692e1"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (not= (last x) y) (conj x y) x)) [] %1)", "user": "5ed70b97e4b016b56eae05e6"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5ef9ea69e4b09b61f08553d1"}, {"problem": 30, "code": "#(reduce (fn [acc item]\n           (if (not= (last acc)\n                     item)\n             (conj acc item)\n             acc))\n         []\n         %)", "user": "5ef8e9e0e4b09b61f08553cb"}, {"problem": 30, "code": "#(reverse\n  (reduce\n   (fn [carry current]\n     (if (= current (first carry))\n       carry\n       (conj carry current)))\n   '()\n   %))", "user": "5dd45bb8e4b0948ae9d9ad6b"}, {"problem": 30, "code": "#(reduce (fn [x y] (if (= (last x) y) x (conj x y))) [] %)", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5eecf110e4b07c55ae4a050b"}, {"problem": 30, "code": "(fn [items]\n    (reduce\n      (fn [new-seq item]\n        (if (= item (last new-seq))\n            new-seq\n            (conj new-seq item)))\n      []\n      items))", "user": "5f009162e4b0cf489e8d7f1a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 30, "code": "#((fn compress [head sq] \n    (cond \n     (empty? sq) sq\n     (= head (first sq)) (compress head (rest sq))\n     :else (cons (first sq) (compress (first sq) (rest sq))))) \n  nil %)", "user": "5f016f37e4b0cf489e8d7f20"}, {"problem": 30, "code": "reduce (fn [acc x]\n          (if (= (last acc) x)\n            acc\n            (conj acc x)))\n        []", "user": "5b4bfd04e4b02d533a91bca2"}, {"problem": 30, "code": "(fn compress [s]\n  (reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] s))", "user": "5f012a2ee4b0cf489e8d7f1e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c9da580e4b048ec896c5b12"}, {"problem": 30, "code": "(fn rSD [coll]\n  (filter \n    #(not= nil %)\n    (map \n      #(when (not= %1 %2) %1) \n      coll \n      (rest (concat coll [nil])))))", "user": "5f03550ce4b0cf489e8d7f33"}, {"problem": 30, "code": "(fn compress \n  [x]\n  (map first (partition-by identity x)))", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f06eaede4b0cf489e8d7f55"}, {"problem": 30, "code": "(fn [a] (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] a))", "user": "5f0890ffe4b0cf489e8d7f61"}, {"problem": 30, "code": "#(reduce (fn [s a] (if (not= (last s) a) (conj s a) s)) [] %)", "user": "5ef82119e4b09b61f08553c6"}, {"problem": 30, "code": "(fn [lst]\n  (reduce (fn [acc n]\n              (if (= n (last acc))\n                acc\n                (conj acc n)))\n            []\n            lst))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 30, "code": "(fn [seq]\n    (reverse\n      (reduce\n        #(if (= (first %1) %2) %1 (conj %1 %2)) () seq)))", "user": "5f02f365e4b0cf489e8d7f2c"}, {"problem": 30, "code": "#(reduce\n  (fn [sec elem]\n    (if (= (last sec) elem)\n      sec (conj sec elem))) [] %)", "user": "5f0a4904e4b09a3f05b71805"}, {"problem": 30, "code": "(fn [sq]\n  (seq (reduce (fn [acc cur]\n                 (if (= (last acc) cur)\n                   acc\n                   (conj acc cur)))\n               []\n               sq)))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 30, "code": "#(reduce \n  (fn [coll x]\n    (if (not= (last coll) x)\n      (conj coll x)\n      coll))\n  [] %)", "user": "5f0c8b0de4b0f30dddfb5d4c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57e070fde4b0bd073c202478"}, {"problem": 30, "code": "(fn [coll] (seq (reduce \n                   (fn [arr elem] \n                     (println \"arr:\" arr \", elem\" elem)\n                     (if (= (last arr) elem)\n                       arr\n                       (conj arr elem))) [] coll)))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 30, "code": "(fn strip-duplicates [coll] (map #(first %) (partition-by identity coll)))", "user": "5f088bb3e4b0cf489e8d7f5f"}, {"problem": 30, "code": "(fn myflat [strarg] (let [res\n\t(reduce\n\t\t(fn dedupe [ls ch] \n\t\t\t(if (= (first ls) ch) ls (cons ch ls))\n\t\t)\n\t\t()\n\t\t(reverse strarg)\n\t)]\n\t(if (= (class strarg) java.lang.String) (apply str res) res)\n))", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 30, "code": "(fn [v] (remove nil? (for [i (range (count v))] (cond (= i 0) (get v i) (not (= (get v i) (get v (dec i)))) (get v i)))))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 30, "code": "(fn [sq] (if (empty? sq)\n           sq\n           (loop [last (first sq)\n                  xs (rest sq)\n                  acc [last]]\n             (if-let [x (first xs)]\n               (if (= x last)\n                 (recur x (rest xs) acc)\n                 (recur x (rest xs) (conj acc x)))\n               acc))))", "user": "5e6ba862e4b04a83ad7cd27d"}, {"problem": 30, "code": "(fn compress-sequence\n    ([x] (compress-sequence x 0 []))\n    \n    ([x i y]\n        (cond (< i (count x))\n            (cond\n                (= i 0) (compress-sequence x (inc i) (conj y (nth x i)))\n                (= (nth x i) (nth x (- i 1))) (compress-sequence x (inc i) y)\n                (not= (nth x i) (nth x (- i 1))) (compress-sequence x (inc i) (conj y (nth x i)))\n            )\n            \n            :else (apply list y)\n        )\n    )\n)", "user": "5f0cb4f3e4b0f30dddfb5d4e"}, {"problem": 30, "code": "(fn [x] (reduce (fn [acc item] (if (and (not= nil (last acc)) (= item (last acc))) acc (conj acc item))) [] x))", "user": "5f122f93e4b091ba50b4dbae"}, {"problem": 30, "code": "#(reduce (fn [deduped x] (if (= (last deduped) x)\n                             deduped\n                             (conj deduped x)))\n         []\n         %)", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 30, "code": "(fn [lst] (reverse (reduce (fn [acc e] (if (not (= (first acc) e)) \n                                          (cons e acc) \n                                          acc )) \n                          '() \n                          lst)))", "user": "5f1328dee4b091ba50b4dbb1"}, {"problem": 30, "code": "(fn [s]\n    (reduce\n     (fn [acc x] (if\n                   (= (last acc) x)\n                   acc\n                   (conj acc x)))\n     []\n     (seq s)))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 30, "code": "reduce #(if (= %2 (last %)) % (conj % %2)) []", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 30, "code": "(fn [seq]\n  (reduce (fn [out-vec elem]\n            (if (= (last out-vec) elem)\n              out-vec\n              (conj out-vec elem)))\n          []\n          seq))", "user": "5f15a50fe4b091ba50b4dbbc"}, {"problem": 30, "code": "(fn compact [xs] \n  ((fn compact3 [xss prev] \n    (println xss prev) \n    (cond (empty? xss) xss \n          (= (first xss) prev) (compact3 (rest xss) prev)\n          :else (conj (compact3 (rest xss) (first xss)) (first xss) )\n    )\n  ) xs nil)\n)", "user": "5509a23ee4b06e50f9beb11a"}, {"problem": 30, "code": "(fn funfir [x y]\n   (if (> (count y) 0)\n     (if (= (first y) (second y))\n       (funfir x (drop 1 y))\n       (funfir (conj x (first y)) (drop 1 y))\n       )\n     (reverse x)\n     )\n   )nil", "user": "5f082d9ee4b0cf489e8d7f5c"}, {"problem": 30, "code": "(fn compr [[x & zs]]\n    (concat (when-not (= x (first zs)) [x]) (when zs (compr zs))))", "user": "5dd84170e4b0948ae9d9ad93"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f086f54e4b0cf489e8d7f5e"}, {"problem": 30, "code": "(fn [s] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() s)))", "user": "5e3121e5e4b05b4b01516221"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "5f1a0ca2e4b091ba50b4dbe0"}, {"problem": 30, "code": "(fn [s]\n(reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] s)\n)", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 30, "code": "#(reduce\n(fn [result item] (\nif (= item (last result))\nresult\n(conj result item)\n))\n[]\n%)", "user": "5e7fb908e4b085ba37836e3f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f1d22c7e4b0f565ad998268"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f0a65dae4b09a3f05b71806"}, {"problem": 30, "code": "(fn [s] (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] s))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f17e3c5e4b091ba50b4dbd0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5bb4baace4b0a20761a23552"}, {"problem": 30, "code": "(fn remove-dup [ls] (if (empty? ls) ls\n  \t\t\t\t\t(if (= (first ls) (first (rest ls)))\n                      (cons (first ls) (remove-dup ((fn advance [l k] (if (= (first l) k) \n                                                            (advance (rest l) k)\n                                                            l)) (rest ls) (first ls))))\n                      (cons (first ls) (remove-dup (rest ls))))))", "user": "5f15b1e2e4b091ba50b4dbbd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f18444ee4b091ba50b4dbd3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f1f4411e4b0f565ad99827b"}, {"problem": 30, "code": "(fn [coll]\n  (seq (reduce #(if (= (last %) %2) % (conj % %2)) [] coll)))", "user": "4f0f7339535d0136e6c2233e"}, {"problem": 30, "code": "(fn compress_seq [maybe_seq]\n  (let [compress_seq_for_sure (fn f [seq last_seq]\n          (cond\n            (empty? seq) (list)\n            (= last_seq (first seq)) (f (rest seq) last_seq)\n            :else (cons (first seq) (f (rest seq) (first seq)))))]\n    (if (seq? maybe_seq)\n      (compress_seq_for_sure maybe_seq nil)\n      (compress_seq_for_sure (seq maybe_seq) nil))))", "user": "5bcc304ce4b07a9b28b1010c"}, {"problem": 30, "code": "(fn [x] ((fn dedup [a b] (cond\n                          (empty? a) b\n                          (= (first a) (last b)) (dedup (rest a) b)\n                          :else (dedup (rest a) (conj b (first a)))\n                          )) x []))", "user": "5f06d26ae4b0cf489e8d7f53"}, {"problem": 30, "code": "(fn [s] (mapcat distinct (partition-by identity s)))", "user": "5d8a3f3ee4b0915913b1d3c9"}, {"problem": 30, "code": "(fn compress-seq \n  [coll] \n  (loop [remaining (rest coll) \n         ret [(first coll)]\n         prev (first coll)]\n    (if (empty? remaining) \n      ret\n      (recur (rest remaining) \n             (if (= (first remaining) prev) \n               ret \n               (into ret (take 1 remaining)))\n             (first remaining)))))", "user": "5f21d172e4b0f565ad998286"}, {"problem": 30, "code": "(fn [seq]\n    (reduce (fn [acc val]\n              (if (= val (last acc))\n                     acc\n                     (conj acc val)))\n            [] seq))", "user": "5f0e8312e4b0f30dddfb5d5b"}, {"problem": 30, "code": "(fn dedouble [x]\n  (loop [s x\n         res []]\n    (if (empty? s)\n      res\n      (if (not= (last res) (first s))\n        (recur (rest s) (conj res (first s)))\n        (recur (rest s) res)))))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 30, "code": "(fn [seq]\n  (apply concat\n         (map distinct\n              (partition-by identity seq))))", "user": "5f081f6de4b0cf489e8d7f5a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "59331397e4b072a2710fd046"}, {"problem": 30, "code": "(fn [x] \n  (loop \n    [input x output '() prev nil] \n    (if (empty? input) \n      (reverse output)\n      (if (= (first input) prev)\n        (recur (rest input) output prev)\n        (recur (rest input) (cons (first input) output) (first input))))))", "user": "5cf8864be4b0b71b1d808a84"}, {"problem": 30, "code": "(fn compress [s]\n  (map first (partition-by identity s)))", "user": "5b61279ce4b0c6492753e70e"}, {"problem": 30, "code": "(fn [sequence]\n   (loop [original (into '() sequence)\n          atual '()]\n     (if (empty? original)\n       atual\n       (if (= (first original) (first atual))\n        (recur (rest original) atual)\n         (recur (rest original) (cons (first original) atual))))))", "user": "58a0ac0de4b02bd94d917e9c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f22e8c9e4b0f565ad99828b"}, {"problem": 30, "code": "#(let \n  [[result] (reduce (fn [[acc prev] val]\n                        (if (= prev val)\n                          [acc val]\n                          [(conj acc val) val]))\n                    [[] nil]\n                    %)]\n  result)", "user": "5f247827e4b0f565ad998292"}, {"problem": 30, "code": "#(reduce (fn [xs x] (if (= x (last xs)) xs (conj xs x))) [] %)", "user": "5e8c3e8fe4b0cb0169546322"}, {"problem": 30, "code": "#(keep (fn [[x y]] (if (not= x y) x)) (partition 2 1 (concat %1 [:z])))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f1af439e4b0f565ad998257"}, {"problem": 30, "code": "#(map first (partition-by identity %1))", "user": "52215fe1e4b0e6a83c8925cf"}, {"problem": 30, "code": "(fn dd [coll]\n  (loop [in coll\n         out []]\n    (if in\n      (let [cur (if (= (last out) (first in)) [] [(first in)] )]\n        (recur (next in) (into out cur) ))\n      out)))", "user": "5f2e6d97e4b033932238a677"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5dc5982be4b02f9375f4e1c0"}, {"problem": 30, "code": "(fn [c] (reduce (fn [r i] (if (= i (last r)) r (conj r i))) [] (seq c)))", "user": "5f2de7ede4b033932238a674"}, {"problem": 30, "code": "#(remove nil? (map-indexed\n   (fn[i x]\n     (if\n         (not\n          (= x\n             (get % (- i 1))\n             )) x )) %))", "user": "5f27cc7fe4b033932238a646"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f25a2b1e4b0117231e5035e"}, {"problem": 30, "code": "(fn compa [input] (reduce #(if (not= %2 (last %1)) (concat %1 [%2]) %1) [] (seq input)))", "user": "5f309144e4b0574c87022c23"}, {"problem": 30, "code": "#(reduce (fn [s x] (if (= (last s) x) s (conj s x))) [] %)", "user": "5f265bd9e4b0857314092c8c"}, {"problem": 30, "code": "; stolen elegant solution: #(map first (partition-by identity %))\n; my C style loop solution\n; note, see also dedupe\n(fn compresss [col]\n  (loop [iter 0\n         ss col\n         res []]\n    (if (empty? ss)\n      res\n      (if (= (last res) (first ss))\n        (recur\n          (inc iter)\n          (rest ss)\n          res\n          )\n        (recur\n          (inc iter)\n          (rest ss)\n          (conj res (first ss))\n          )\n        ))\n    )\n)", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 30, "code": "(fn compress-seq [s]\n  (map #(first %) (partition-by identity s)))", "user": "5efdb9bae4b0cf489e8d7f02"}, {"problem": 30, "code": "(fn [sequence] (map first (partition-by identity sequence)))", "user": "5f2d6c70e4b033932238a66f"}, {"problem": 30, "code": "(fn cons-unique  [coll]\n  (reduce (fn [acc ele] (if (= (last acc) ele)\n    acc\n    (concat acc (list ele)))) () (seq coll))\n  )", "user": "5f29837ee4b033932238a64f"}, {"problem": 30, "code": "(fn compress [s]\n  (reduce\n   #(if (= (last %1) %2)\n      %1\n      (conj %1 %2))\n   []\n   s))", "user": "5f300f28e4b033932238a682"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f331015e4b0574c87022c37"}, {"problem": 30, "code": "(fn [x]\n  (seq\n    (reduce\n      #(if (= (last %1) %2)\n          %1\n          (conj %1 %2))\n      []\n      x)))", "user": "5f1eebcee4b0f565ad998273"}, {"problem": 30, "code": "reduce (fn [s e] (if (= e (last s)) s (conj s e))) []", "user": "5f393bd6e4b0574c87022c76"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5f3ab5ece4b004f08c61c52a"}, {"problem": 30, "code": "(fn [s] (map #(first %) (partition-by identity s)))", "user": "5f0e32a1e4b0f30dddfb5d59"}, {"problem": 30, "code": "#(loop [res '()\n        prev nil\n        left %]\n   (if (empty? left)\n     res\n     (if (= (first left) prev)\n       (recur res prev (rest left))\n       (recur (concat res (list (first left))) (first left) (rest left)))))", "user": "5f3ce2c7e4b004f08c61c548"}, {"problem": 30, "code": "(fn foo [x] (conj (map last (filter #(not= (first %) (last %)) (partition 2 1 x))) (first x)))", "user": "5f3388ade4b0574c87022c38"}, {"problem": 30, "code": "(fn [s] (reverse (first (reduce #(if (= (second %1) %2) %1 [(conj (first %1) %2) %2]) [] s))))", "user": "548f1604e4b0e286459a1230"}, {"problem": 30, "code": "#(reduce (fn [a c] (if (= (last a) c) a (conj a c))) [] %)", "user": "54fce8bde4b07d26eda61d30"}, {"problem": 30, "code": "#(reduce (fn dedupe [y z]\n           (if (= (last y) z)\n             y\n             (conj y z))) [] % )", "user": "5f3adcf4e4b004f08c61c531"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 30, "code": "(fn [l] []\n   (apply list (reduce #(if (not= (last %1) %2) (conj %1 %2) %1) [] l)))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 30, "code": "(fn [ls]\n  (loop [ls ls acc []]\n    (if (empty? ls)\n     acc\n      (if (= (first ls) (last acc))\n       (recur (rest ls) acc)\n       (recur (rest ls) (conj acc (first ls)))))))", "user": "5f38eecce4b0574c87022c72"}, {"problem": 30, "code": "(fn [coll]\n  (loop [a (first coll) r (rest coll) ret '()]\n    (if (empty? r)\n      (reverse (conj ret a))\n      (let [s (drop-while #(= a %) r)]\n        (recur (first s) (rest s) (conj ret a))))))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 30, "code": "(fn [s] (reverse (reduce (fn [a c] (if (not= (first a) c) (conj a c) a)) () s)))", "user": "5f3ddc71e4b004f08c61c551"}, {"problem": 30, "code": "(fn rem-conseq-dup [x]\n  (let [prev (ref \"\")]\n    (reverse (reduce (fn [acc n]\n                       (if (= n @prev)\n                         acc\n                         (do (dosync (ref-set prev n))\n                             (println n)\n                             (println acc)\n                             (conj acc n)\n                             )))\n                     '() x))\n    ))", "user": "5f419985e4b0955706451fab"}, {"problem": 30, "code": "(fn [l]\n  (reduce (fn [acc item]\n            (if (= item (last acc))\n              acc\n              (conj acc item))\n            )\n          []\n          l))", "user": "58ffc6cfe4b0438e51c2d008"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] %)", "user": "5f429fdfe4b0955706451faf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f4314e0e4b0955706451fb4"}, {"problem": 30, "code": "(fn[start]\n  (reduce(fn[out part]\n                  (if (= part (first(reverse out)))\n                  out\n                  (conj out part)))\n            []\n            start)\n  )", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 30, "code": "(fn [v]\n    (let [result \n      (reduce \n        (fn [agg v] \n          (if (= (last agg) v) \n            agg \n            (conj agg v)))\n        []\n        v)]\n        (if (instance? String v)\n          (apply str result)\n          result)\n        ))", "user": "5f431d32e4b0955706451fb5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f32f69ae4b0574c87022c35"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5cda0e26e4b05ee0cb311710"}, {"problem": 30, "code": "#((fn [col acc previous] (if (empty? col) acc (let [c (first col)] (recur (rest col) (if (not= c previous) (conj acc c) acc) c)))) % [] nil)", "user": "5f49482ae4b0102c75033940"}, {"problem": 30, "code": "(fn droper\n  [[x & xs :as xst]]\n  (cond \n   (empty? xst) '()\n   :else (cons x (droper (drop-while #(= x %) xs)))))", "user": "5f317ae4e4b0574c87022c2a"}, {"problem": 30, "code": "(fn [coll]\n  (reduce #(if (= (last %1) %2) (identity %1) (conj %1 %2)) [] coll))", "user": "5ee4b2e6e4b029a2061bbe90"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [a-seq elem]\n            (if (= elem (last a-seq))\n              a-seq\n              (conj a-seq elem)))\n          []\n          coll))", "user": "5f238a59e4b0f565ad99828d"}, {"problem": 30, "code": "(fn del-consecutive-dups [col]\n  (mapcat set (#(partition-by identity %1) col)))", "user": "5f2ab452e4b033932238a656"}, {"problem": 30, "code": "(fn\n  [s]\n  (reduce \n    #(if-not (= (last %1) %2) \n      (conj %1 %2) %1) \n    [] s))", "user": "5f313d01e4b0574c87022c28"}, {"problem": 30, "code": "(fn [lst]\n  (reduce \n    #(if-not (= (last %1) %2) \n      (conj %1 %2) %1) \n    [] lst))", "user": "5f45211ae4b0955706451fbc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f4f8f78e4b0102c75033973"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ee66158e4b029a2061bbe98"}, {"problem": 30, "code": "(fn remove-dup [coll]\n  (cond (empty? coll) []\n        (= (first coll) (second coll)) (remove-dup (rest coll))\n        :else (concat (list (first coll)) (remove-dup (rest coll)))))", "user": "5f4303cfe4b0955706451fb3"}, {"problem": 30, "code": "(fn [lst] (reverse (reduce #(if (= (first %1) %2) %1 (conj %1 %2)) '() (seq lst))))", "user": "5f558a76e4b0a0bc16850a84"}, {"problem": 30, "code": "#(reduce (fn [coll curr]\n            (let [prev (last coll)]\n              (if (not= prev curr)\n                (conj coll curr)\n                coll))) [] %)", "user": "5ec22851e4b00a66d4a9529a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f56c0cae4b0a0bc16850a8c"}, {"problem": 30, "code": "(fn [x]\n  (apply concat (map distinct (partition-by identity x)))\n)", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 30, "code": "#(mapcat distinct (partition-by identity %))", "user": "5f0dfa48e4b0f30dddfb5d55"}, {"problem": 30, "code": "#(reduce\n (fn [accumulator current-item]\n  (if (not= (last accumulator) current-item)\n    (conj accumulator current-item)\n    accumulator))\n   []                                                      \n %)", "user": "5a514e68e4b05d388ecb6be5"}, {"problem": 30, "code": "(fn [arg]\n  (reduce (fn [acc cv]\n            (if (= (last acc) cv)\n              acc\n              (concat acc (list cv)))) '() arg))", "user": "5f5a57dee4b0a0bc16850aa5"}, {"problem": 30, "code": "(fn [s] (reduce #(if (= (last %1) %2) (do (print \"then\") (println %1) %1) (do (print \"else\")(println %1) (println %2) (println (concat %1 [%2])) (concat %1 [%2]))) () s))", "user": "5f5b624de4b05ea7b9adc42f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5dfb7f6de4b0a607a9a45cdc"}, {"problem": 30, "code": "(partial reduce (fn [result this]\n                  (if (= (last result) this)\n                    result\n                    (conj result this))) [])", "user": "5f5df0bfe4b02876ed9fcfeb"}, {"problem": 30, "code": "(fn [xs]\n  (letfn [(compress [x xs]\n                    (when (not (empty? xs))\n                    (if (= x (first xs))\n                      (compress x (rest xs))\n                      (cons (first xs) (compress (first xs) (rest xs))))))]\n    (compress nil xs)))", "user": "5f5e7158e4b02876ed9fcff0"}, {"problem": 30, "code": "(fn [col]\n  (for [idx (range (count col))\n    :let [y (get col idx)]\n    :when (not= (get col idx) (get col (+ idx 1)))]\ny))", "user": "53275758e4b09d4e7a9b54fc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f5f9483e4b02876ed9fcff8"}, {"problem": 30, "code": "(fn f\n [s] \n  (let [f* \n          (fn [acc s*] \n            (if \n              (not= (last acc) s*) \n              (conj acc s*) \n              acc\n            )\n          )\n       ]\n       (reduce f* [] s)\n  )\n)", "user": "5f631e11e4b02876ed9fd011"}, {"problem": 30, "code": "(fn f [v]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] v))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 30, "code": "(fn [collection]\n  (map first (partition-by identity collection)))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f6796d2e4b02876ed9fd036"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f67c2f8e4b02876ed9fd039"}, {"problem": 30, "code": "(fn [s]\n  (loop [sq s result []]\n    (if (empty? sq)\n      result\n      (recur (rest sq)\n             (if (= (first sq) (first (rest sq)))\n               result\n               (concat result [(first sq)])))\n      ))\n  )", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 30, "code": "(fn [input] (map first (partition-by identity input)))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 30, "code": "(fn remove-cons-dups\n  [s]\n  (loop [result '() [x & x-rest] s]\n    (if (nil? x)\n      (reverse result)\n      (if (= (first result) x)\n        (recur result x-rest)\n        (recur (conj result x) x-rest)))))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5e70c16de4b085ba37836dae"}, {"problem": 30, "code": "#(reverse\n    (reduce\n      (fn [coll x]\n        (if (= x (first coll))\n          coll\n          (conj coll x)))\n      '()\n      %)\n    )", "user": "5f663bc0e4b02876ed9fd02d"}, {"problem": 30, "code": "(fn [s]\n    (loop [ ch (first s), xs (rest s), ret [] ]\n        (cond (nil?   ch) ret\n              (empty? xs) (conj ret ch)\n              (= ch (first xs)) (recur ch (rest xs) ret)\n              :else  (recur (first xs) (rest xs) (conj ret ch)))))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d0e9931e4b0cc9c91588258"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 30, "code": "#(->> %\n      (partition-by identity)\n      (map first))", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 30, "code": "(fn \n  [seq]\n  (loop [to-process seq new-data []]\n    (if (empty? to-process)\n      new-data\n      (recur (rest to-process) (if (= (last new-data) (first to-process)) new-data (conj new-data (first to-process))))\n      )))", "user": "5f6e5c58e4b02876ed9fd067"}, {"problem": 30, "code": "(fn drop-doubles [vv]\n    (loop [final []\n           xs vv]\n       (if (empty? xs)\n           final \n            (if (= (last final) (first xs))\n                (recur final (rest xs))\n                (recur (conj final (first xs)) (rest xs))))))", "user": "5f6580e7e4b02876ed9fd023"}, {"problem": 30, "code": "(fn[coll in] (reduce (fn[coll input] (if (not= (last coll) input) (conj coll input) coll) ) coll in )) []", "user": "5f6b61ece4b02876ed9fd051"}, {"problem": 30, "code": "(fn\n  [my-seq]\n\t(reduce #(if (= (first %1) %2) %1 (cons %2 %1)) '() (reverse (seq my-seq))))", "user": "5f6f8327e4b02876ed9fd075"}, {"problem": 30, "code": "(fn compress\n  [lst]\n  (map first(#(partition-by identity %) lst))\n    )", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 30, "code": "(fn [s]\n  (map #(first %) (partition-by identity s)))", "user": "5f6e576ae4b02876ed9fd066"}, {"problem": 30, "code": "reduce (fn [v a] (if (= (peek v) a) v (conj v a))) []", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 30, "code": ";(fn [s]\n;  (loop [acc ()\n;         prev nil\n;         [x & xs] s]\n;    (if (nil? x)\n;      (reverse acc)\n;      (if (= prev x)\n;        (recur acc prev xs)\n;        (recur (conj acc x) x xs)))))\n\n;#(reduce (fn [acc x]\n;           (if (= (last acc) x)\n;             acc\n;             (conj acc x)))\n;         [] %)\n\n#(map first (partition-by identity %))", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f6caa19e4b02876ed9fd056"}, {"problem": 30, "code": "#(reduce (fn [itog s] \n             (if (= (last itog) s)\n               itog\n               (conj itog s))) [] %)", "user": "5f27f180e4b033932238a648"}, {"problem": 30, "code": "(fn comp-seq [s]\n  (if (empty? s) s\n      (let [x (first s)\n            xs (rest s)]\n      (if (= x (first xs))\n        (comp-seq xs)\n        (cons x (comp-seq xs))))))", "user": "5f63684be4b02876ed9fd012"}, {"problem": 30, "code": "#(letfn [(rr\n           [s prev]\n           (when-let [[item & items] (seq s)]\n             (if-not (= item prev)\n               (cons item (rr items item))\n               (rr items item))))]\n    (rr % nil))", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] %)", "user": "5f63d73de4b02876ed9fd017"}, {"problem": 30, "code": "(fn [s] (reduce #(if \n                  (= (last %) %2) %\n                  (conj % %2)) [] s))", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 30, "code": "(fn [xs] (reduce (fn [acc val] (if (= (last acc) val) acc (conj acc val))) [] xs))", "user": "5f6cb2a5e4b02876ed9fd057"}, {"problem": 30, "code": "(fn compress [s]\n  (reduce\n   #(if (= (last %1) %2)\n      %1\n      (conj %1 %2))\n   []\n   (seq s)))", "user": "5f7251b9e4b02876ed9fd08a"}, {"problem": 30, "code": "(fn remove_dupes\n  [s]\n  (loop [[hd nxt & tl] s new []]\n     (if (nil? nxt)\n       (conj new hd)\n       (if (= hd nxt)\n         (recur (conj tl nxt) new)\n         (recur (conj tl nxt) (conj new hd))\n       )\n     )\n  )\n)", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 30, "code": "; distinct\n#(map first (partition-by identity %))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 30, "code": "(fn [s]\n  (loop [seq s\n         cursor []]\n    (if (empty? seq)\n      cursor\n      (recur (rest seq) (if (= (last cursor) (first seq))\n                          cursor\n                          (conj cursor (first seq)))))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 30, "code": "#(->> %\n      (partition-by identity)\n      (map first))", "user": "5c06fab7e4b0bdcf453d16bd"}, {"problem": 30, "code": "#(reduce (fn [acc el]\r\n            (if (= (peek acc) el) \r\n              acc\r\n              (conj acc el))) [] %1)", "user": "5f5396d4e4b0a0bc16850a79"}, {"problem": 30, "code": "(fn \n  [lst]\n    (map first (partition-by identity lst)))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f63cde9e4b02876ed9fd015"}, {"problem": 30, "code": "(fn compress\n  [input]\n  (reduce\n   (fn\n     [acc item]\n     (if (= (last acc) item)\n       acc\n       (concat acc [item])))\n   (empty input)\n   input))", "user": "5f735915e4b02876ed9fd097"}, {"problem": 30, "code": "(fn [coll] (keep-indexed (fn [index item] (when (not= item (nth coll (- index 1) nil) ) item )) coll))", "user": "5f757c1ce4b02876ed9fd0aa"}, {"problem": 30, "code": "(fn my-uniq [xs] \n    (loop [xs xs acc [] lst nil]\n      (if (empty? xs) acc\n        (recur (rest xs)\n               (if (= lst (first xs)) \n                  acc \n                  (conj acc (first xs)))\n               (first xs)))))", "user": "5f82cfcce4b0c071e6c840fb"}, {"problem": 30, "code": "(fn [lst]\n  (map first (partition-by identity lst)))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 30, "code": "#(for [x (partition-by identity %)]\n    (nth x 0)\n     )  ;;;dedupe funciona mejor :)", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 30, "code": "(fn  [s]\n  (reduce\n   #(if (= (last %1) %2)\n      %1\n      (conj %1 %2))\n   []\n   s))", "user": "5f597522e4b0a0bc16850a9e"}, {"problem": 30, "code": "reduce #(if (= (last %) %2) % (conj % %2)) []", "user": "5f81de6ce4b0c071e6c840f5"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "5f46d2f9e4b0955706451fc6"}, {"problem": 30, "code": "#(reduce (fn [r i] (if (and (not (empty? r)) (= (last r) i))\n                      r\n                      (conj r i)))\n          []\n          %)", "user": "56b9c644e4b0f2655033593a"}, {"problem": 30, "code": "(fn [coll]\n  (let [size (dec (count coll))]\n    (loop [new_coll []\n           index 0]\n\n      (if (= index size)\n        (if (= (last new_coll) (last coll))\n          new_coll\n          (conj new_coll (last coll)))\n        (if (= (nth coll index) (last new_coll))\n          (recur new_coll (inc index))\n          (recur (conj new_coll (nth coll index)) (inc index))\n)))))", "user": "5885eb2de4b0f1effa3b76c6"}, {"problem": 30, "code": "(fn[lst] (map first (partition-by identity lst)))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f837b30e4b01aacbe7a2714"}, {"problem": 30, "code": "(fn [simp]\n  \n  (map first (partition-by identity simp))\n  \n  )", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 30, "code": "(fn [lst] \n  (map #(first %) (partition-by identity lst)))", "user": "5f84f110e4b0375e81f54e79"}, {"problem": 30, "code": "(fn [lst] (map #(first %) (partition-by identity lst)))", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 30, "code": "(fn [lst]\n (map last\n      (partition-by identity lst)))", "user": "5f737899e4b02876ed9fd099"}, {"problem": 30, "code": "(fn [a-seq]\n                 (loop [l a-seq head nil acc '()]\n                   (if (empty? l)\n                     (reverse acc)\n                     (if (= head (first l))\n                       (recur (rest l) head acc)\n                       (recur (rest l) (first l) (conj acc (first l)))))))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 30, "code": "#(loop [acc [] s %]\n   (cond\n     (nil? s) acc\n     (= (first s) (last acc)) (recur acc (next s))\n     :else (recur (conj acc (first s)) (next s))))", "user": "5f85e160e4b0ad2c9bc62a43"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 30, "code": "(fn compress [x]\n  (map #(first %) (partition-by identity x)))", "user": "5f8795d4e4b020286baa5e96"}, {"problem": 30, "code": "(fn filter-dups [s]\n    (reduce\n      (fn [acc item] (if (= (last acc) item) acc (concat acc [item])))\n      '() s))", "user": "5c8cfff8e4b048ec896c5996"}, {"problem": 30, "code": "(fn [x] \n\t\t(loop [current '() remaining x]\n\t\t ()\n\t\t\t(if (empty? remaining)\n\t\t\t\t\t(reverse current)\n\t\t\t\t\t(recur\n\t\t\t\t\t\t\t(if (= (first current) (first remaining))\n\t\t\t\t\t\t\t\t\tcurrent\n\t\t\t\t\t\t\t\t\t(conj current (first remaining)))\n\t\t\t\t\t\t\t(next remaining)))))", "user": "5f86f5a3e4b0649ffcda4cad"}, {"problem": 30, "code": "(fn [sq] (map first (partition-by identity sq)))", "user": "5f875a0ae4b020286baa5e94"}, {"problem": 30, "code": "(fn compressSeq[lst]\n  (map (fn [x] (first x))(partition-by identity lst))\n  )", "user": "5f8330b8e4b01aacbe7a270f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f810e97e4b0c071e6c840ed"}, {"problem": 30, "code": "(fn [s] (loop [s (seq s)\n               r []]\n          (if (empty? s) r (recur (rest s) (if (= (last r) (first s)) r (conj r (first s)))))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 30, "code": "(fn [xs] \n   (loop [\n          xs xs \n          result []]\n     (let [[x & rest] xs]\n      (cond\n       (empty? rest) (conj result x)\n       (= x (first rest)) (recur rest result)\n       :else (recur rest (conj result x ))))))", "user": "5f6c331ae4b02876ed9fd054"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f816cc6e4b0c071e6c840f1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 30, "code": "(fn compress [in]\n  (seq (reduce #(if (=(peek %1) %2) %1 (conj %1 %2)) [] in)))", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 30, "code": "(fn [x] \n  (map #(first %) (partition-by identity x)))", "user": "5f8d76c3e4b0715f5002d758"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 30, "code": "(fn\n  [xs]\n  (reverse (reduce (fn\n                     [acc x]\n                     (if (and (= x (first acc)) (> (count acc) 0))\n                       (seq acc)\n                       (conj acc x))) '() xs)))", "user": "5e1c24f4e4b0dc959400852d"}, {"problem": 30, "code": "(fn [vs]\n  (loop [res []\n         vs vs]\n    (if (empty? vs) \n      res\n      (let [x (first vs)] \n        (recur (conj res x)\n               (drop-while #(= x %) vs))))))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5eb3d02be4b00a66d4a95215"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f737e16e4b02876ed9fd09a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f968f4ee4b0715f5002d7d2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f97eff1e4b0715f5002d7f9"}, {"problem": 30, "code": "(fn [x] (reduce (fn [res val] (if (= val (last res)) res (conj res val))) [] (seq x)))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5eb7b41ee4b00a66d4a9523c"}, {"problem": 30, "code": "#(loop [cur (rest %) acc (conj [] (first %))]\n    (if (empty? cur)\n        (seq acc)\n        (if (= (first cur) (last acc))\n          (recur (rest cur) acc)\n          (recur (rest cur) (conj acc (first cur))))))", "user": "56eff7c1e4b04a395b9a0468"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f9f032fe4b0715f5002d839"}, {"problem": 30, "code": "#(loop [s (seq %) r []]\n                        (cond\n                          (empty? s) r\n                          (= (first s) (last r))(recur (rest s) r)\n                          :else (recur (rest s) (conj r (first s)))))", "user": "5f9c4113e4b0715f5002d821"}, {"problem": 30, "code": "(fn [xs] \n  (loop [ys xs\n         acc []]\n    (if (empty? ys)\n      acc\n      (recur (rest ys) (if (= (first ys) (last acc)) acc (conj acc (first ys)))))))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 30, "code": "(fn dedupe [s]\n  (reduce \n  \t(fn [acc curr] \n      (if (not= (last acc) curr)\n        (conj acc curr)      \n        acc))\n  \t[]\n  \ts))", "user": "5fa5a6b1e4b0fa27300f3dc8"}, {"problem": 30, "code": "(fn compress [input]\n (reverse\n  (reduce\n   (fn [r x]\n    (if (= (first r) x)\n      r\n      (cons x r)\n    )\n   )\n   nil\n   input\n  )\n )\n)", "user": "5fa12616e4b0715f5002d84f"}, {"problem": 30, "code": "#(->> %\n (partition-by identity)\n (map first))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 30, "code": "(fn [xs]\n  (loop [xs xs r [] c nil]\n    (if (empty? xs)\n      r\n      (recur (rest xs)\n             (if (= (first xs) c)\n               r\n               (conj r (first xs)))\n             (first xs)))))", "user": "5fa8424ce4b0fa27300f3de5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5fa5b72ee4b0fa27300f3dca"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f974321e4b0715f5002d7f3"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5b94c2aee4b0c0b3ffbd4a59"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "5face7fce4b08cb800c85ae9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 30, "code": "#(if (empty? %) '()\n   (loop [acc (vector (first %))\n          remainder (rest %)]\n     (cond (empty? remainder) (seq acc)\n           (= (last acc) (first remainder)) (recur acc (rest remainder))\n           :else (recur (conj acc (first remainder)) (rest remainder)))))", "user": "5fb082cfe4b08cb800c85b14"}, {"problem": 30, "code": "#(mapcat set (partition-by identity %))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 30, "code": "(fn compress-seq [s]\n  (loop [x 0\n         y []]\n    (if (< x (dec (count s)))\n      (if (= (nth s x) (nth s (+ x 1)))\n        (recur (inc x) y)\n        (recur (inc x) (conj y (nth s x))))\n      (conj y (nth s (dec (count s)))))))", "user": "5fa80c01e4b0fa27300f3de2"}, {"problem": 30, "code": "(fn [xs] \n  (reduce #(if (= (last %1 ) %2) \n             %1  \n             (conj %1 %2)) \n        [] \n        xs))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5c3527a6e4b0d62ef62d9f60"}, {"problem": 30, "code": "(fn [cl] (reverse(remove nil?\n                          (loop [li '(), pre -7, x 0]\n                            (if (= x (count cl))\n                              li\n                              (recur\n                                (if (= pre (nth cl x)) (conj li nil) (conj li (nth cl x)))\n                                (nth cl x)\n                                (inc x)))))))", "user": "5f6b35c3e4b02876ed9fd04d"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2) ) []", "user": "5fae3d8ae4b08cb800c85afa"}, {"problem": 30, "code": "#(loop [a (apply list %) \n        b '()]\n   (if (empty? a)\n     (reverse b)\n     (recur (rest a) (if (= (first a) (first b)) b (conj b (first a))))))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5fb544f6e4b08cb800c85b4e"}, {"problem": 30, "code": "(fn [x]\n  (reverse\n    (reduce \n     (fn [%1 %2] \n            (let [cf (first %1)]\n              (if (nil? cf)\n                (conj %1 %2)\n                (if (not (= %2 cf))\n                  (conj %1 %2)\n                  %1))))\n          '()\n        x)))", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 30, "code": "(fn comp [xs] (if (empty? xs) xs (if (= (first xs) (first (rest  xs))) (comp (rest xs)) (concat (list (first xs)) (comp (rest xs))))))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 30, "code": "(fn [x] (->> (partition-by identity x) (map #(first %))))", "user": "5f5aee4fe4b0a0bc16850aaa"}, {"problem": 30, "code": "reduce (fn [c x]\n          (if (not= (peek c) x) (conj c x) c))\n        []", "user": "5faa75c1e4b0fa27300f3dfa"}, {"problem": 30, "code": "(fn [s]\n  (map #(first %) (partition-by identity s)))", "user": "5fb453d3e4b08cb800c85b44"}, {"problem": 30, "code": "(fn [inp]\n  (loop [i inp res []]\n         (if (empty? i)\n           res\n           (if (= (last res) (first i))\n             (recur (rest i) res)\n             (recur (rest i) (conj res (first i)))))))", "user": "5fa2b45ce4b0f0ebd91b77f5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5fbe40bce4b03f550f448246"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57b758f4e4b0fbc9809a27cf"}, {"problem": 30, "code": "(fn [xs] (map first (partition-by identity xs)))", "user": "5fab003de4b08cb800c85ad1"}, {"problem": 30, "code": "(fn [coll]\n  (loop [coll coll\n         prev nil\n         acc []]\n    (if (empty? coll)\n      acc\n      (if (= prev (first coll))\n        (recur (rest coll) prev acc)\n        (recur (rest coll) (first coll) (conj acc (first coll)))))))", "user": "5fb2eac0e4b08cb800c85b2f"}, {"problem": 30, "code": "reduce (fn [res x] (if (= (last res) x) res (conj res x))) []", "user": "5a4f11e5e4b05d388ecb6bc6"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5f969090e4b0715f5002d7d5"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "5f96fbc7e4b0715f5002d7ec"}, {"problem": 30, "code": "(fn [i_s] \n    (loop [[h & t :as input] i_s\n            r '()]\n           (cond \n               (empty? input)(reverse r)\n               (= h (first r))(recur t r)\n               :else (recur t (cons h r))\n               )))", "user": "5ef4fca7e4b07c55ae4a0546"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (not= (last a) b) (conj a b) a)) [] %)", "user": "5fc51d88e4b0ad564c76812a"}, {"problem": 30, "code": "(fn [x] (reduce (fn [seq c]\n            (if-not (= (last seq) c)\n              (conj seq c)\n              seq)) [] x))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "5df175bce4b03c219ef1a34d"}, {"problem": 30, "code": "(fn [inp]\n(reverse\n  (reduce (fn [xs x] (if (= (first xs) x) xs (conj xs x))) (seq ()) inp)))", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 30, "code": "(fn [l]\n     (if (not-empty l)\n        (reverse       (reduce (fn [a,b]\n                                 (if (seq? a)\n                                   (if (= (first a) b)\n                                     (identity a)\n                                     (cons b a)\n                                     )\n                                   (if (not= a b)\n                                     (list b a)\n                                     (list b)\n                                     )\n                                   )\n                                 ) l))\n       )\n     )", "user": "5fc241c1e4b0edf42a5593d1"}, {"problem": 30, "code": "apply (fn [& s] (map #(first %) (partition-by identity s)))", "user": "5dc9d4ede4b03836ba07d823"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5fcbf407e4b07e53c2f3eff0"}, {"problem": 30, "code": "(fn compress [s]\n  (reduce\n    (fn [accum item]\n      (if (= (first accum) item)\n        accum\n        (conj accum item)))\n    '()\n    (reverse s)))", "user": "5fcdb9f5e4b07e53c2f3effe"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "5fc3850de4b0db0e95a5f3fd"}, {"problem": 30, "code": "(fn [x]\n  (reduce\n    (fn [a b]\n      (if (= (last a) b)\n        a\n        (conj a b)))\n     []\n     x))", "user": "5b21ad60e4b03cfeda66ed54"}, {"problem": 30, "code": "(fn [s] (map #(first %) (partition-by identity s)))", "user": "5fb46916e4b08cb800c85b46"}, {"problem": 30, "code": "(fn [in] (let [l (filter (fn [[x y]] (not= x y)) (map (partial into []) (partition 2 1 in)))] (concat (map first l) (list (last (last l))))))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 30, "code": "#(reduce (fn test [v e] (if (not= (last v) e) (conj v e) v)) '[] %)", "user": "5fba5692e4b03f550f448230"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5fd66e61e4b05ac5b16ea10a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58c69d88e4b021aa9917ed5e"}, {"problem": 30, "code": "(fn foo [lst]\n  (map first (partition-by identity lst)))", "user": "5fb8fe30e4b03f550f448223"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "5fa7009be4b0fa27300f3dd6"}, {"problem": 30, "code": "(fn [x] (reduce #(if (= (last %) %2) % (conj % %2)) [] x))", "user": "5fc9d967e4b0689391cc77ce"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "5f3ee0d9e4b004f08c61c55c"}, {"problem": 30, "code": "#(reverse (reduce (fn [acc item] (if (not= item (peek acc)) (conj acc item) acc)) '() (seq %)))", "user": "5fdbde92e4b05ac5b16ea137"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5fe18014e4b05ac5b16ea16d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5fbb010ae4b03f550f448233"}, {"problem": 30, "code": "#(reduce\n  (fn\n   [acc curr]\n   (if (and\n        (not (empty? acc))\n        (= (last acc) curr))\n    acc\n    (conj acc curr)))\n   []\n   %)", "user": "59d4d126e4b0ef0a1e9b5be9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5fe362d9e4b05ac5b16ea179"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "5e042dede4b0a607a9a45d69"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5fe0d4d4e4b05ac5b16ea164"}, {"problem": 30, "code": "(fn [l] (->> (partition-by identity l)\n             (map first)))", "user": "5fe5a64de4b05ac5b16ea187"}, {"problem": 30, "code": "(fn [s]\n  (map first (partition-by identity s))\n  )", "user": "5fdb8657e4b05ac5b16ea133"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b985fe5e4b0c0b3ffbd4ab1"}, {"problem": 30, "code": "(fn compress [coll]\n  (reverse (reduce (fn [new-coll item]\n                      (if (not= item (first new-coll))\n                        (cons item new-coll)\n                        new-coll))\n                    '()\n                    coll)))", "user": "5fd2e391e4b07e53c2f3f049"}, {"problem": 30, "code": "(fn [x]\n  (reverse\n  \t(reduce (fn [y z]\n    \t        (if (= z (first y))\n        \t      y\n            \t  (conj y z)))\n          \t()\n          \tx)))", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5fe85417e4b05ac5b16ea194"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5e68994ee4b04a83ad7cd266"}, {"problem": 30, "code": "(fn [ls] (reduce (fn [acc elem] (if (= (last acc) elem) acc (conj acc elem) )) [] ls))", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 30, "code": "(fn [s]\n        (if (empty? s)\n          s\n          (loop [c (first s)\n                 [x & xs] (rest s)\n                 res [c]]\n            (cond\n              (nil? x) res\n              (= x c) (recur c xs res)\n              :else (recur x xs (conj res x))))))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 30, "code": "(fn [sq]\n  (loop [previous-item nil\n         pending sq\n         dedupe-sq []]\n    (if (seq pending)\n      (if-not (= previous-item (first pending))\n        (recur (first pending) (rest pending) (conj dedupe-sq (first pending)))\n        (recur (first pending) (rest pending) dedupe-sq))\n      dedupe-sq\n      )\n    )\n  )", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 30, "code": "reduce (fn [a x] (if (= (last a) x) a (conj a x))) []", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 30, "code": "(fn \n  [ss]\n\n  (reduce\n   (fn [new-list letter]\n     (if (= letter (first new-list))\n       new-list\n       (conj new-list letter )))\n   '()\n   (reverse ss))\n    \n  )", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 30, "code": "(fn compressor [coll]\n  (if (first coll)\n    (if (second coll)\n      (if (= (first coll) (second coll))\n        (compressor (rest coll))\n        (cons (first coll) (compressor (rest coll))))\n      coll)\n    (list)))", "user": "5fe35144e4b05ac5b16ea178"}, {"problem": 30, "code": "(fn [x]\n   (loop [acc [] coll x]\n     (if (seq coll)\n       (if (= (first coll) (last acc))\n         (recur acc (rest coll))\n         (recur (conj acc (first coll)) (rest coll)))\n       acc)))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 30, "code": "(fn a[s]\n  (map first (partition-by identity s)))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ff3aca3e4b05ac5b16ea205"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "5fe75ecfe4b05ac5b16ea18d"}, {"problem": 30, "code": "#(map first (partition-by identity %)) ; dedupe won't work for some reason ?", "user": "5ff32e20e4b05ac5b16ea1ff"}, {"problem": 30, "code": "(fn [xs] \n   (reduce #(if (= %2 (last %)) % (conj % %2)) [] xs))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 30, "code": "(fn my-dedupe\n  [col]\n  (->> col\n       (partition-by identity)\n       (map first)))", "user": "5ff454a1e4b05ac5b16ea20d"}, {"problem": 30, "code": "(fn [s] (reduce #(if (= (last %1) %2)\n                            %1\n                            (into %1 [%2])) [] s))", "user": "5fa28e2be4b0f0ebd91b77f0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5fe9169ce4b05ac5b16ea1a0"}, {"problem": 30, "code": "#(reduce\n  (fn [acc e] (if (= (last acc) e) acc (conj acc e))) \n  []\n  %)\n\n;; #(map first (partition-by identity %))\n\n;; (fn [c]\n;;    (letfn [(get-rst [cc rst]\n;;              (let [l (count cc)\n;;                    lst (last rst)\n;;                    fst (first cc)\n;;                    rest-c (rest cc)]\n;;                (cond\n;;                  (= l 0) rst\n;;                  (= lst fst) (recur rest-c rst)\n;;                  :else (recur rest-c (conj rst fst)))))]\n;;      (get-rst c [])))\n\n;; (fn [x] (->> (map list x (rest x))\n;;               (remove #(= (first %1) (second %1)))\n;;               (map second)\n;;               (cons (first x))\n;;               ))\n\n;;(fn f\n;;    ([x]\n;;     (f x '()))\n;;    ([x r]\n;;     (if (empty? x)\n;;       (reverse r)\n;;       (if (not= (first x) (second x))\n;;         (recur (rest x) (into r (list (first x))))\n;;         (recur (rest x) r)))))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f9690d4e4b0715f5002d7de"}, {"problem": 30, "code": "#(map last (partition-by identity %))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5fd12b42e4b07e53c2f3f02f"}, {"problem": 30, "code": "#(reduce\n  \t(fn [s letter] (if (= letter (last s))\n                     \ts\n                     \t(conj s letter)))\n  \t[]\n  \t%)", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5fcd15d6e4b07e53c2f3eff7"}, {"problem": 30, "code": "; Split the str\n\n; Convert it to a set.\n\n; Write a function\n(fn [my-seq] \n  \n  (loop [l-seq [(first my-seq)] remaining (rest my-seq)]\n    (if (empty? remaining) ; predicate end\n      l-seq\n      \n      \n    \t; Will need to handle string cases. Oh wait, no. It'll turn it into a str.\n    (if (= (first remaining) (last l-seq)) ; predicate end\n      ; skip it\n      (recur l-seq (rest remaining)) ; recur end\n      ; append it\n      (recur (conj l-seq (first remaining)) (rest remaining)) ; recur end\n      \n      \t) ; if end  \n      ) ; if end\n    \n    \n    \n    \n    \n    ) ; loop end\n  \n  ) ; fn end", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 30, "code": "reduce \n  (fn [res x] \n    (if (and (not-empty res) (= (last res) x))\n        res\n        (conj res x)\n      ))\n        []", "user": "5ff5bc1ae4b06df49cee1490"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 30, "code": "#(seq (for [i (-> %1 count range) :let [this (nth %1 i) nxt (if (< i (-> %1 count dec)) (nth %1 (inc i)) nil)] :when (or (= i (-> %1 count dec)) (not (= this nxt)))] this))", "user": "5ff4e28ae4b06df49cee1486"}, {"problem": 30, "code": "(fn \n  [x]\n  (reduce (fn [res s]\n            (if (= (last res) s) res\n                (conj res s))) [] x))", "user": "5f5e166ce4b02876ed9fcfed"}, {"problem": 30, "code": "(fn [coll]\n  (->> coll\n      (partition-by identity)\n      (map first)))", "user": "5f969088e4b0715f5002d7d4"}, {"problem": 30, "code": "(fn leroy [s]\n    (reduce (fn [a v]\n              (if (not= (last a) v)\n                (conj a v)\n                a)) [] s))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 30, "code": "(fn [x]\n   (loop [x x\n          y []]\n     (if (empty? x)\n       y\n       (if (= (first x) (second x))\n         (recur (rest x) y)\n         (recur  (rest x) (conj y (first x)))))))", "user": "5ae9b23fe4b0cc2b61a3bbd8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ffc18cae4b074f607df65f1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ffe2d18e4b074f607df65ff"}, {"problem": 30, "code": "(fn compress\n  ([coll] (compress coll nil))\n  ([coll prev]\n   (if (empty? coll)\n     '()\n     (if (= (first coll) prev)\n       (compress (rest coll) prev)\n       (cons (first coll) (compress (rest coll) (first coll)))))))", "user": "5ff61113e4b06df49cee1492"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5aa5043ee4b0d174b936c88e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52cbe5dfe4b07d0d72b27352"}, {"problem": 30, "code": "(fn\n  [s]\n    (reduce\n      #(if\n        (= (last %1) %2)\n        %1\n        (conj %1 %2))\n      []\n      s))", "user": "5ffee617e4b074f607df6605"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60036736e4b074f607df663b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 30, "code": "#(reduce (fn [a [cur nxt]]\n            (if (= nxt cur)\n              a\n              (conj a nxt)))\n          [(first %1)] (map vector %1 (next %1)))", "user": "5beadeb5e4b0f319e2d7ec88"}, {"problem": 30, "code": "(fn [lst] (reduce (fn [acc x] (if-not (= x (last acc)) (conj acc x) acc)) [] (seq lst)))", "user": "5b2d1c1de4b025bcb146f2c0"}, {"problem": 30, "code": "(fn [sq]\n                 (loop [sq sq\n                        r (list)\n                        le \"\"]\n                   (if (empty? sq)\n                     (reverse r)\n                     (recur (rest sq)\n                            (if (= (first sq) le)\n                              r\n                              (conj r (first sq)))\n                            (first sq)))))", "user": "591770dae4b09b4ee5954b9c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6001c90ce4b074f607df6626"}, {"problem": 30, "code": "(fn [val]\n  (reduce #(if (= (last %1) %2) \n             %1\n             (conj %1 %2)) [] val))", "user": "5e42602ae4b01d43a70e8e63"}, {"problem": 30, "code": "(fn [c]\n  (->> c \n      (partition-by identity)\n      (map first)\n  )\n)", "user": "6004c750e4b074f607df6645"}, {"problem": 30, "code": "(fn[x](map first(partition-by identity x)))", "user": "6001460ce4b074f607df6611"}, {"problem": 30, "code": "(fn [x]\n  (map first (partition-by identity x)))", "user": "5ffd3422e4b074f607df65f7"}, {"problem": 30, "code": "(fn [x]\n  (map first (partition-by identity x)))", "user": "5ffd7ce6e4b074f607df65fb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60057cd4e4b074f607df664a"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "600201bce4b074f607df662b"}, {"problem": 30, "code": "(fn [se] (reduce\n          (fn [sub-se elm]\n            (if (= (last sub-se) elm)\n              sub-se\n              (conj sub-se elm)))\n          [] se))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 30, "code": "(fn [xs] (reduce (fn [c s] (if (= (last c) s) c (conj c s))) [] xs))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 30, "code": "#(map first (partition-by str %))", "user": "55965515e4b0c79f6e1db978"}, {"problem": 30, "code": "(fn [c]\n    (loop [s c\n           o []]\n        (if (empty? s)\n            o\n            (recur (rest s) (if (= (first s) (last o))\n                                o\n                                (conj o (first s)))))))", "user": "5fafa44ee4b08cb800c85b0e"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn [acc cur]\n            (if (= (last acc) cur)\n              acc\n              (concat acc (list cur)))) '() xs))", "user": "5da7176ae4b000c986472c13"}, {"problem": 30, "code": "(fn\n  [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (first i) (last res))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i)))))))", "user": "60046db8e4b074f607df6642"}, {"problem": 30, "code": "(fn [x] (->> x\n             (partition-by identity)\n             (map first)))", "user": "600c1c72e4b074f607df6692"}, {"problem": 30, "code": "(fn [s]\n  (->> s\n  (partition-by identity)\n  (map first)))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 30, "code": "(fn [s] (reduce (fn [r c] (if (= c (last r)) r (concat r [c]))) [] s))", "user": "600cb742e4b074f607df6696"}, {"problem": 30, "code": "(fn foo [s]\n  (loop [x (first s)\n         xs (rest s)\n         acc [x]]\n    (if (empty? xs)\n      acc\n      (let [[y & ys] xs]\n        (if (= y x)\n          (recur x ys acc)\n          (recur y ys (conj acc y)))))))", "user": "600ae927e4b074f607df6689"}, {"problem": 30, "code": "reduce #(if (not (= (last %1) %2)) (conj %1 %2) %1) []", "user": "6011b89ee4b074f607df66bc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 30, "code": "(fn [xs]\n   (reduce\n    (fn [acc x]\n      (if (= (last acc) x)\n        acc\n        (conj acc x))) [] xs))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2)\n          %1\n          (reverse (conj (reverse %1) %2))) ()", "user": "60096aabe4b074f607df667f"}, {"problem": 30, "code": ";; sequence comes in\n;;(fn no-repeats [s]\n  ;; we initialize our loop with our sequence & an empty accumulator\n  ;;(loop [s s acc []]\n    ;; if sequence is empty we return the accumulator\n    ;;(if (empty? s)\n      ;;acc\n      ;; else, we compare the last of the accumulator\n      ;; with the first of the sequence coming in\n      ;;(let [same? (= (last acc) (first s))]\n        ;; recurring back we conj back onto the accumulator when\n        ;; the first of the sequence isn't the same as the accumulator\n        ;;(recur (rest s) (if same? acc (conj acc (first s))))))))\n\n;; this is pretty cool too:\n;;#(map first (partition-by identity %))\n;; more idiomatic\n#(map first (partition-by identity %))\n;; also see: distinct", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 30, "code": "(fn [xs]\n   (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] xs))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "58db48a5e4b0a4d5acaab679"}, {"problem": 30, "code": "#(reduce\n    (fn [acc cand]\n      (if-not (= cand (last acc))\n        (conj acc cand)\n        acc))\n    [(first %)]\n    (rest %))", "user": "5fc4e1f0e4b036c570ed8145"}, {"problem": 30, "code": "reduce\n  (fn [acc e]\n    (if (not= (last acc) e)\n      (conj acc e)\n      acc))\n  []", "user": "5a9f2c53e4b0d174b936c812"}, {"problem": 30, "code": "(fn remove-consecutives [coll]\n  (cond\n   (< (count coll) 2) coll\n   :else (let [[a b & rest] coll]\n           (if (= a b)\n             (recur (cons a rest))\n             (cons a (remove-consecutives (cons b rest)))))))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60195030e4b0bf4ca6b10920"}, {"problem": 30, "code": "(fn compress-seq [xs]\n  (if (empty? xs)\n    '()\n    (conj (compress-seq (drop-while #(= % (first xs)) xs)) (first xs))))", "user": "601004d6e4b074f607df66b2"}, {"problem": 30, "code": "#(reduce (fn [rv x] \n          (if (= x (last rv))\n              rv\n              (conj rv x))) [] %)", "user": "52fa250ee4b047fd55836ff3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 30, "code": "reduce (fn [acc n] (if (= n (last acc))\n                     acc\n                     (conj acc n)))\n       []", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 30, "code": "(fn [[f & r]] \n  (reduce #(if \n    (= (last %1) %2) %1\n    (concat %1 [%2])) (list f) r))", "user": "5fdc6ad4e4b05ac5b16ea13a"}, {"problem": 30, "code": "(fn [l] (map first (partition-by identity l)))", "user": "602049b8e4b0bf4ca6b10961"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60225c2ae4b0d5df2af22201"}, {"problem": 30, "code": "(fn [ls]\n  (reduce #(cond (= (last %1) %2) %1 :else (conj %1 %2)) [] ls)\n  )", "user": "60228147e4b0d5df2af22202"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 30, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (if (not= (last acc) s*)\n                (conj acc s*)\n                acc))]\n    (reduce f* [] s)))", "user": "6022844de4b0d5df2af22203"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6023e7f7e4b0d5df2af22217"}, {"problem": 30, "code": "reduce (fn [ r x] (if (= (last r) x ) r (conj r x))) []", "user": "6024544be4b0d5df2af2221f"}, {"problem": 30, "code": "(fn [s]\n  (loop [slovo s pismeno nil vysledek '()]\n    (cond (empty? slovo) vysledek\n          (= pismeno (first slovo))\n      (recur (rest slovo) pismeno vysledek)\n      :else (recur (rest slovo) (first slovo) (concat vysledek (list (first slovo))))\n          )))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 30, "code": "(fn y [s]\n  (map first (partition-by identity s)))", "user": "5f7603a8e4b02876ed9fd0ad"}, {"problem": 30, "code": "(fn [x]\n   (let [compressed (map\n                      first\n                      (partition-by identity x))]\n     (if (char? (first compressed))\n                (reduce str compressed)\n                compressed)))", "user": "602372aae4b0d5df2af2220f"}, {"problem": 30, "code": "(fn [xs] (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] xs))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 30, "code": "(fn [seq]\n   (reduce\n     (fn [acc curr]\n       (println acc)\n       (if (not= curr (last acc)) \n         (conj acc curr)\n         acc))\n     [(first seq)]\n     seq))", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 30, "code": "(fn [items]\n\t(reverse\n     (reduce #(if (= %2 (first %1)) %1 (cons %2 %1))\n      '()\n       (seq items))))", "user": "602bfcefe4b0d5df2af22268"}, {"problem": 30, "code": "reduce \n(fn [a n] \n  (if (= (last a) n)\n    a\n    (conj a n)\n  )\n) []", "user": "5fedff0ee4b05ac5b16ea1d0"}, {"problem": 30, "code": "(fn compress[n] \n(if (= 1 (count n))\n  [(first n)]\n  (if (= (first n) (first (compress (rest n)))) \n    (compress (rest n))\n    (concat [(first n)] (compress (rest n)))\n)))", "user": "602bca69e4b0d5df2af22267"}, {"problem": 30, "code": "(fn [s] (reverse (reduce #(if (= %2 (peek %1)) %1 (conj %1 %2)) '() s)))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ff64845e4b06df49cee1495"}, {"problem": 30, "code": "reduce (fn [acc e] (if (= (last acc) e)\n                     acc\n                     (conj acc e)))\n       []", "user": "5baba1ece4b0a20761a23482"}, {"problem": 30, "code": "(fn compress [lst] (reverse (reduce (fn ddp [a b] (if (not= (first a) b ) (conj a b) a ) ) '() lst )))", "user": "600b385ce4b074f607df668d"}, {"problem": 30, "code": "(fn remove-dups [s] (->> s\n                         (partition-by identity)\n                         (map #(first %))\n                         ))", "user": "602abb59e4b0d5df2af2225e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "602d98d5e4b0d5df2af2227a"}, {"problem": 30, "code": "(fn [coll]\n  (loop [left coll acc []]\n    (if (empty? left)\n      acc\n      (let [curr (first left)\n            prev (last acc)\n            repeated? (= curr prev)]\n        \n        (recur (rest left) (if repeated? acc (conj acc curr)))\n        )\n      )\n    )\n  )", "user": "602cc4d4e4b0d5df2af22274"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "60329afce4b0d5df2af222b8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "600eb95de4b074f607df66a6"}, {"problem": 30, "code": "(fn [s]\n  (reduce #(if (= %2 (last %)) % (conj % %2)) [] s))", "user": "6023a3abe4b0d5df2af22212"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6032f7f9e4b0d5df2af222b9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "602b6cf7e4b0d5df2af22265"}, {"problem": 30, "code": "(fn my-dedupe [col]\n    (reduce\n      (fn [acc element] (if (= element (last acc)) acc (concat acc (list element))))\n      '()\n      col\n      )\n  )", "user": "6031926ae4b0d5df2af222ac"}, {"problem": 30, "code": "(fn [s]\n  (loop [r (rest s)\n        [lc ret] [(first s) [(first s)]]]\n    (if (empty? r)\n      (apply list ret)\n      (recur\n        (rest r)\n        (if (= lc (first r))\n          [lc ret]\n          [(first r) (conj ret (first r))]\n        )\n      )\n    )\n  )\n)", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 30, "code": "(fn compress-seq2 [sequence]\n  (seq (reduce (fn [a e] (if (= e (last a)) a (conj a e))) [] sequence)))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6022429be4b0d5df2af22200"}, {"problem": 30, "code": "(fn foo [seqs]\n        \n        (cond (empty? seqs) nil \n              (= (first seqs) (second seqs))\n              (foo (conj (rest (rest seqs)) (second seqs)))\n              :else\n              (conj  (foo (rest seqs)) (first seqs))))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 30, "code": "(fn\n  [coll]\n  (loop [curr-coll coll ans []]\n    (if (empty? curr-coll)\n      ans\n      (if (= (first curr-coll) (last ans))\n        (recur (rest curr-coll) ans)\n        (recur (rest curr-coll) (conj ans (first curr-coll)))\n        )\n      )\n    \n    )\n  )", "user": "60337f1fe4b0d5df2af222c1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60282169e4b0d5df2af22240"}, {"problem": 30, "code": "(fn\n                  [seq]\n                  (loop [\n                         seq seq\n                         current nil\n                         result []\n                  ]\n                    (if (first seq)\n                      (if (not (= current (first seq)))\n                        (recur (rest seq) (first seq) (conj result (first seq)))\n                        (recur (rest seq) current result))\n                      result\n                      )\n))", "user": "602f56c5e4b0d5df2af22297"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "603a6c40e4b0d5df2af222f7"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "600a061de4b074f607df6683"}, {"problem": 30, "code": "(fn [s]\n  (-> (reduce (fn [acc curr]\n                (if (= (first acc) curr)\n                  acc\n                  (conj acc curr)))\n              '()\n              s)\n      reverse))", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 30, "code": "(fn \n    [xs]\n    (loop [acc [], xs xs]\n      (if (empty? xs) (seq acc)\n          (if (= (last acc) (first xs))\n            (recur acc (rest xs))\n            (recur (conj acc (first xs)) (rest xs))))))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 30, "code": "#(reduce (fn [accum i] (seq (if-not (= (last accum) i) (conj (vec accum) i) accum))) '() %)", "user": "5eedfc62e4b07c55ae4a050e"}, {"problem": 30, "code": "(fn [coll] (map first (partition-by identity coll)))", "user": "5cc6b681e4b0ccb061962828"}, {"problem": 30, "code": "(fn remdup [sq]\n  (let [sq (seq sq)\n        result (atom '())\n        prev (atom nil)]\n    (doseq [item sq]\n      (when-not (= item @prev)\n        (swap! result concat (list item))\n        (reset! prev item)))\n    @result\n\n    ))", "user": "60436423e4b02d28681c77a3"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 30, "code": "(fn [xs]\n  (reduce (fn [result x]\n            (if (not (= (last result) x))\n              (conj result x)\n              result))\n          []\n          xs))", "user": "60460824e4b02d28681c77bc"}, {"problem": 30, "code": "(fn [xs] (loop [xs xs s [] lastEl nil] (if (empty? xs) s (let [el (first xs)] (recur (rest xs) (if (= el lastEl) s (conj s el)) el)))))", "user": "59203996e4b09b4ee5954c5b"}, {"problem": 30, "code": "(fn [seq]\n  (map first (partition-by identity seq))\n  )", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 30, "code": "#(reduce (fn [x y]\n           (if (= y (last x))\n             x\n             (conj x y)))\n         []\n         %)", "user": "6046a0c7e4b02d28681c77c6"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i))))\n  )))", "user": "60471241e4b02d28681c77c9"}, {"problem": 30, "code": "reduce (fn [new-vector item]\n          (if (= item (last new-vector))\n            new-vector\n            (conj new-vector item)))\n        []", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 30, "code": "reduce (fn [xs x] (if (= x (last xs)) xs (concat xs (list x)))) ()", "user": "60486e8ae4b02d28681c77db"}, {"problem": 30, "code": "(fn [coll] (->> coll (partition-by identity) (map first)))", "user": "604a30c6e4b02d28681c77f0"}, {"problem": 30, "code": "(fn comprese [sekvence]\n  (if \n   (empty? sekvence)\n    '()\n    (if (= (first sekvence) (first (rest sekvence)))\n      (comprese (rest sekvence))\n      (cons (first sekvence)(comprese (rest sekvence))))))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 30, "code": "(fn [coll]\n  (loop [result []\n         previous nil\n         coll coll]\n    (cond\n     (empty? coll) (seq result)\n     (= previous (first coll))\n       (recur result (first coll) (rest coll))\n     :else \n       (recur (conj result (first coll)) (first coll) (rest coll)))))", "user": "602aa5f1e4b0d5df2af2225d"}, {"problem": 30, "code": "#(map first  (partition-by identity %))", "user": "6034e358e4b0d5df2af222d1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6020365ae4b0bf4ca6b10960"}, {"problem": 30, "code": "(fn [[h & t]] (reduce (fn [x y] (if (= (last x) y) x (conj x y))) [h] t))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 30, "code": "#(reduce (fn [acc, s] (if (not= s (last acc)) (conj acc s) acc)) [] %)", "user": "604ccb9fe4b0b7ec0ac60ac1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6040f595e4b0d5df2af2232f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60504383e4b056659d6341fa"}, {"problem": 30, "code": "(fn [c]\n  (loop [coll (seq c)\n         current nil\n         result []]\n    (let [f (first coll)]\n      (if (empty? coll)\n        result\n        (recur (rest coll)\n               f\n               (if (= current f)\n                 result\n                 (conj result f)))))))", "user": "4e586949535d8a8b8723a292"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6040e6dbe4b0d5df2af2232a"}, {"problem": 30, "code": "(fn [col]\n   (->> col\n        (partition-by identity)\n        (map first)))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 30, "code": "(fn [ myseq ]\n  (reduce\n   (fn [ a b ]\n     (println (str \"a: \" a))\n     (println (str \"b: \" b))\n     (if (= (last a) b)\n       a\n       (concat a (cons b '()))))\n   (list)\n   (seq myseq)))", "user": "5ff82adae4b06df49cee14a4"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "603f6623e4b0d5df2af2231f"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60521ea8e4b056659d634205"}, {"problem": 30, "code": "reduce \n    #(if-not (= (last %1) %2) \n      (conj %1 %2) %1) \n    []", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "605a270ee4b07e92fa001ad8"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5b522591e4b02d533a91bd09"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 30, "code": "(fn\n  [s]\n  (loop [n 1\n         ns (list (first s))]\n    (if (= (count s) n)\n      (reverse ns)\n      (if (= (nth s n) (nth s (dec n)))\n        (recur (inc n) ns)\n        (recur (inc n) (conj ns (nth s n)))))))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 30, "code": "#(reduce \n    (fn [a b] (if (= (last a) b) a (concat a (list b)))) \n    (list (first %))\n    (rest %))", "user": "60538924e4b04c8f2157d153"}, {"problem": 30, "code": "#(reverse (loop [previous (first %) current (second %) coll (rest %) result (list previous)]\n   (cond\n\t(empty? coll) result\n    (not= previous current) (recur (first coll) (second coll) (rest coll) (cons current result))\n    :else (recur (first coll) (second coll) (rest coll) result))))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 30, "code": "(fn compress\n  ([coll] (compress coll nil))\n  ([coll l]\n   (lazy-seq\n     (when-let [f (first coll)]\n       (if (= f l)\n         (compress (next coll) f)\n         (cons f (compress (next coll) f)))))))", "user": "6062e1bde4b03746e80ebf75"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "55129636e4b06e50f9beb1ab"}, {"problem": 30, "code": "#(reduce (fn [p, c] (if (not= (last p) c) (conj p c) p)) [] %1)", "user": "60622c6ee4b03746e80ebf72"}, {"problem": 30, "code": "(fn [sequenc] (mapv first (partition-by identity sequenc)))", "user": "6066266de4b069485764ddd2"}, {"problem": 30, "code": "(fn [sseq] (let [parts (map first (partition-by identity sseq))\n                 f (first parts)]\n                       (cond (char? f) (apply str parts)\n                             :else parts)))", "user": "60654263e4b069485764ddc9"}, {"problem": 30, "code": "#(reduce (fn [seq-uniq next]\n          (if (= next (last seq-uniq))\n            seq-uniq\n            (conj seq-uniq next)))\n        []\n        %)", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 30, "code": "(fn [coll]\n  (loop [[h & t :as c] coll acc [] p :not-found]\n    (cond\n      (empty? c) acc\n      (= p h)    (recur t acc p)\n      :else      (recur t (conj acc h) h)\n      )\n    ))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 30, "code": "reduce \n  (fn [col e]\n    (cond\n      (= (last col) e) col\n      :else (conj col e))) \n  []", "user": "6065755ee4b069485764ddcc"}, {"problem": 30, "code": "(fn\n            [s]\n            (loop [last-val nil\n                   s (seq s)\n                   result []]\n              (if (empty? s)\n                result\n                (let [first-val (first s)]\n                  (if (= last-val first-val)\n                    (recur first-val (rest s) result)\n                    (recur first-val (rest s) (conj result first-val))\n                    )\n                  )\n                )\n              )\n            )", "user": "60631c2ee4b069485764ddbd"}, {"problem": 30, "code": "(fn remove-consecutives\n  ([s]\n   (remove-consecutives s ()))\n  ([s acum]\n   (if (empty? (rest s))\n     (reverse (conj acum (first s)))\n     (if (= (first s) (second s))\n       (remove-consecutives (rest s) acum)\n       (remove-consecutives (rest s) (conj acum (first s)))\n       )\n       )\n     )\n  )", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 30, "code": "(fn [ss]\n  (reduce (fn [ls el]\n            (if (= (last ls) el)\n              ls\n              (concat ls (list el)))) '() ss))", "user": "606aafcfe4b069485764ddf6"}, {"problem": 30, "code": "#(reduce (fn [a x] (if (= (last a) x) a (conj a x))) [] %)", "user": "606a70a5e4b069485764ddf2"}, {"problem": 30, "code": "(fn compress-sol-reduce [coll]\n  (reduce (fn [x y] (if (= y (last x)) x (conj x y))) [] coll))", "user": "605a876be4b000d535e6f53c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60689984e4b069485764dde6"}, {"problem": 30, "code": "(fn [coll]\n  (first (reduce (fn [[acc prev] x]\n                   [(if (= prev x) acc (conj acc x)) x]) [[] nil] coll)))", "user": "606b16b8e4b069485764ddf7"}, {"problem": 30, "code": "(fn [x]\r\n  (cons (first x)\r\n    (->>\r\n      (map list (rest x) x)\r\n      (filter (partial apply not=))\r\n      (map first))))", "user": "606e0a42e4b069485764de19"}, {"problem": 30, "code": "#(reduce\n   (fn [acc v]\n     (if-not (= v (last acc))\n       (conj acc v)\n       acc))\n   []\n   %)", "user": "606e0e95e4b069485764de1a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "606d75f5e4b069485764de13"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "606f005ae4b069485764de1b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "606c87aae4b069485764de0d"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "606da089e4b069485764de15"}, {"problem": 30, "code": "(fn dedupconsec [s]\n  (second (reduce \n     (fn [[lastval res] x] \n       [x (if (= lastval x) res (conj res x))]) \n     [nil []] s)))", "user": "60606490e4b03746e80ebf67"}, {"problem": 30, "code": "(fn\n  [coll]\n  (reduce (fn [acc x]\n            (if (= x (peek acc))\n              acc\n              (conj acc x)))\n          []\n          coll))", "user": "5cf938a5e4b0b71b1d808a90"}, {"problem": 30, "code": "(fn[x](reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] x))", "user": "6045e761e4b02d28681c77bb"}, {"problem": 30, "code": "(fn\n  [s]\n  (map first (partition-by identity s))\n )", "user": "6074f5ede4b069485764de52"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6059f25de4b07e92fa001ad1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60743977e4b069485764de46"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6074e088e4b069485764de4d"}, {"problem": 30, "code": "(fn [s] (remove nil? (for [i (range (count s))] (when (not (= (nth s i) (nth s (+ i 1) nil))) (nth s i)))))", "user": "5ea8bed8e4b00a66d4a951c2"}, {"problem": 30, "code": "(fn secuencia [c]\n  (when-let [[f & r] (seq c)] \n    (if (= f (first r)) \n      (secuencia r) \n      (cons f (secuencia r)))))", "user": "6075c214e4b069485764de5b"}, {"problem": 30, "code": "(fn [lst] (map first (#(partition-by identity %) lst)))", "user": "6074df6fe4b069485764de4b"}, {"problem": 30, "code": "(fn [in]\n  (reduce\n    (fn [acc x]\n      (if (= x (first acc))\n        acc\n        (cons x acc)))\n    []\n    (reverse in)))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 30, "code": "(fn compression\n  ([coll] (compression coll []))\n  ([coll my-coll] (if (empty? coll)\n                    my-coll\n                    (compression (rest coll)\n                                 (if (= (first coll) (last my-coll))\n                                   my-coll\n                                   (conj my-coll (first coll)))))))", "user": "6033f8e9e4b0d5df2af222c6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60764350e4b069485764de5e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "606ff89be4b069485764de22"}, {"problem": 30, "code": "(fn [coll] (reduce (fn [result item] (if (= item (last result)) result (conj result item))) [] coll))", "user": "60794173e4b0a637ed78035d"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "6076adb2e4b069485764de60"}, {"problem": 30, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (if (= (last res) (first i))\n        (recur (rest i) res)\n        (recur (rest i) (conj res (first i)))))))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 30, "code": "(fn remove-dupli[s]\n  (map #(first %) (partition-by identity s)))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60777335e4b0a637ed78034f"}, {"problem": 30, "code": "(fn no-repeat[s] \n  (map first (partition-by identity s)))", "user": "606ff56ce4b069485764de21"}, {"problem": 30, "code": "#(loop [[fst & rst :as all] % res []]\n    (if (empty? all)\n      res\n      (if (= fst (nth rst 0))\n        (recur rst res)\n        (recur rst (conj res fst)))))", "user": "60759e51e4b069485764de5a"}, {"problem": 30, "code": "(fn [c]\n   (loop [res [] remain c]\n     (if (empty? c)\n       res\n       (if (<= (count remain) 1)\n         (conj res (first remain))\n         (recur (if (not (= (first remain) (second remain)))\n                  (conj res (first remain))\n                  res) (rest remain))))\n     ))", "user": "607bd80be4b0a637ed780379"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "607d97a6e4b03d835a6eaecf"}, {"problem": 30, "code": "(fn compress-a-sequence [s] \n  (reduce (fn [acc cur] (if (= (last acc) cur) acc (conj acc cur))) [] s))", "user": "605714ffe4b069ae89ce6ae1"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6070c7bae4b069485764de27"}, {"problem": 30, "code": "(fn [text]\n  (reduce\n   (fn [acc x] \n     (if (not= x (peek acc)) (conj acc x) acc))\n   [] text))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 30, "code": "(fn [xs]\n    (loop [ [h & t :as coll] xs\n           c                 nil\n           acc               [] ]\n      (if (seq coll)\n        (if (= h c)\n          (recur t c acc)\n          (recur t h (conj acc h)))\n        acc)))", "user": "60836285e4b0736b099e42e4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5f755d0be4b02876ed9fd0a9"}, {"problem": 30, "code": "(fn compress [coll]\n  (reduce (fn [res-coll x] (if (= x (peek res-coll)) res-coll (conj res-coll x)))\n          []\n          coll))", "user": "608256d7e4b0736b099e42da"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (concat %1 (list %2))) '()", "user": "607a1523e4b0a637ed78036a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6074e1e4e4b069485764de4f"}, {"problem": 30, "code": "(fn compress [[item & remaining]]\n    (if (nil? remaining) (list item)\n      (if (= item (first remaining)) (compress remaining) (conj (compress remaining) item))))", "user": "602c30e3e4b0d5df2af2226f"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (conj %1 %2) %1) []", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 30, "code": "#(loop [result (list (first %))\n        lst (drop 1 %)\n        latest (first %)]\n   (if (empty? lst)\n     result\n     (recur (if(= latest (first lst))\n                  result\n                  (concat result (list (first lst))) ) (drop 1 lst) (first lst) )))", "user": "6074e278e4b069485764de51"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "608135c8e4b0736b099e42d1"}, {"problem": 30, "code": "#(map\n  first\n  (partition-by identity %))", "user": "6085edade4b0736b099e42fc"}, {"problem": 30, "code": "#(loop [items %, result []]\n    (if (empty? items)\n      result\n      (recur (rest items) \n             (if (not= (first items) (last result)) \n               (conj result (first items)) \n               result))))", "user": "5aa098fae4b0d174b936c82e"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 30, "code": "(fn compress [s]\n  (let [the-seq (seq s)]\n    (loop [input the-seq\n           result []]\n      (let [fst (first input)\n            rst (rest input)]\n      (if (empty? input) result\n          (if (= fst (first rst))\n            (recur rst result)\n            (recur rst (conj result fst))))))))", "user": "60704214e4b069485764de24"}, {"problem": 30, "code": "reduce (fn [acc val] (if (= (last acc) val) acc (conj acc val))) []", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 30, "code": "(fn [lst] (loop [n 1\n                 newLst [(first lst)]]\n          (if (= n (count lst))\n            newLst\n            (if (= (nth lst n) (last newLst))\n              (recur (inc n) newLst)\n              (recur (inc n) (conj newLst (nth lst n)))))))", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6081e475e4b0736b099e42d6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "607e1c1fe4b03d835a6eaed8"}, {"problem": 30, "code": "(fn [seqq]\n  (reduce #(if (= %2 (last %1)) %1 (conj %1 %2)) [] seqq))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 30, "code": "(fn compress [s]\n  (cond\n     (< (count s) 2) s\n     :else (let [end (compress (rest s))]\n             (if (reduce = (take 2 s))\n               end\n               (conj end (first s))))))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "608828dee4b0ae75613dcee1"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll))\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 30, "code": "reduce #(if (not= (last %1) %2) (concat %1 (vector %2)) %1) []", "user": "5f1eec36e4b0f565ad998274"}, {"problem": 30, "code": "(fn [x]\n                (reduce\n                  #(if\n                     (= (last %1) %2)\n                     %1\n                     (conj %1 %2))\n                  []\n                  x))", "user": "5db012e3e4b0f8c104ccfc95"}, {"problem": 30, "code": "(fn compress [c]\n  (when-let [[f & r] (seq c)] \n    (if (= f (first r)) \n      (compress r) \n      (cons f (compress r)))))", "user": "6074dfa4e4b069485764de4c"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6074e1ade4b069485764de4e"}, {"problem": 30, "code": "#(reduce\n  (fn [acc val]\n    (if (= val (last acc))\n      acc\n      (conj acc val)))\n  []\n  %)", "user": "608910a8e4b0ae75613dceed"}, {"problem": 30, "code": "(fn [col]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] col))", "user": "5fa52497e4b0fa27300f3dbf"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 30, "code": "(fn [x]\n  (loop [lst x\n         ret []]\n    (if (empty? lst)\n      ret\n      (recur (rest lst)\n             (let [val (first lst)]\n               (if (= (last ret) val)\n                 ret\n                 (conj ret val)))))))", "user": "607b04e5e4b0a637ed780373"}, {"problem": 30, "code": "reduce \n (fn [x y]\n   (if (not= (last x) y) (conj x y) x\n   )) []", "user": "60845eb8e4b0736b099e42ef"}, {"problem": 30, "code": "(fn CompressASequence [comp]\n  (reduce (fn [string n]  \n     (if (= n (last string))\n       string\n       (conj string n)))   \n   [] comp))", "user": "607508f3e4b069485764de54"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "608b3fe1e4b0adce4b61c442"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "600777a3e4b074f607df6667"}, {"problem": 30, "code": "(fn rmdup [s] (let [[a b] (take 2 s)]\n               (cond (not= a b) (cons a (rmdup (rest s)))\n                     b          (rmdup (rest s))\n                     :else      (list)\n               )))", "user": "6087cb25e4b0ae75613dced8"}, {"problem": 30, "code": "(fn [x] (map first (partition-by identity x)) )", "user": "607f3336e4b05857a65e7747"}, {"problem": 30, "code": "reduce (fn [p c] (if (= c (last p)) p (conj p c) )) []", "user": "6089bc95e4b0ae75613dcef5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "607b6452e4b0a637ed780375"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 30, "code": "#(loop [in % prev nil out '()]\n   (if (= in '())\n     (reverse out)\n     (if (= (first in) prev)\n       (recur (rest in) prev out)\n       (recur (rest in) (first in) (conj out (first in))))))", "user": "6090e617e4b03bd49d9f36ce"}, {"problem": 30, "code": "(fn [s] (reduce (fn [acc n] (if (= n (last acc)) acc (conj acc n))) [] s))", "user": "5ff88607e4b06df49cee14a6"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "609083a8e4b03bd49d9f36cb"}, {"problem": 30, "code": "(fn del-consecutive-dups [col]\n  (mapcat set (#(partition-by identity %1) col)))", "user": "608711b1e4b0736b099e4303"}, {"problem": 30, "code": "(fn [i]\n  (loop [s i\n         r '()]\n    (if (empty? s)\n      (reverse r)\n      (recur \n       (rest s)\n       (if (= (first s) (first (rest s)))\n         r\n         (conj r (first s)))\n       )))\n  )", "user": "6086abade4b0736b099e42ff"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "601bb40de4b0bf4ca6b1092f"}, {"problem": 30, "code": "(fn [lst]\n             (loop [result [] seq-list lst]\n               (if (empty? seq-list)\n                 result\n                 (if (= (first seq-list) (second seq-list))\n                   (recur result (rest seq-list))\n                   (recur (conj result (first seq-list))\n                          (rest seq-list))))))", "user": "58e90258e4b056aecfd47cfd"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "608335a4e4b0736b099e42e3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "608e6047e4b03bd49d9f36bf"}, {"problem": 30, "code": "(fn com [x]\n  (if (<= (count x) 1)\n    x\n    (if (= (first x) (-> x (rest) (first)))\n      (cons (first x) (-> x (rest) (com) (rest)))\n      (cons (first x) (-> x (rest) (com))))))", "user": "6093cc08e4b00e9e6653c3e1"}, {"problem": 30, "code": "(fn [coll] \n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] coll))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 30, "code": "(fn [coll] (reduce #(concat (if (= (last %1) %2) (drop-last 1 %1) %1) [%2]) [] coll))", "user": "5a383581e4b001c08efc0c97"}, {"problem": 30, "code": "(fn dedupe\n  [coll]\n  (reduce\n    (fn [result x]\n      (if (or (empty? result) (not= x (last result)))\n        (conj result x)\n        result))\n    []\n    coll))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 30, "code": "(fn compress\n  ([s] (compress s nil))\n  ([s last]\n   (if (empty? s)\n     ()\n     (if (not= (first s) last)\n       (cons (first s) (compress (rest s) (first s)))\n       (compress (rest s) last)))))", "user": "6096d37be4b00e9e6653c3f0"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 30, "code": "(fn [s]\n  (map #(first %) (partition-by identity s)))", "user": "608c270ae4b03bd49d9f36b3"}, {"problem": 30, "code": "(fn [x]\n  (map first (partition-by identity x)))", "user": "609c1db9e4b00e9e6653c416"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "609a54f0e4b00e9e6653c40b"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 30, "code": "#(map first(partition-by identity %))", "user": "60196a7fe4b0bf4ca6b10921"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d63bb2be4b0c9e5857d5027"}, {"problem": 30, "code": "#(reduce (fn [ss v]\n           (if (and ss (= (last ss) v))\n             ss\n             (conj ss v))) [] %)", "user": "609a4ac8e4b00e9e6653c40a"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6086c44be4b0736b099e4301"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6092bfefe4b00e9e6653c3db"}, {"problem": 30, "code": "(fn [coll]\n  (->> (partition-by identity coll)\n       (map (comp first set))))", "user": "60a42199e4b00e9e6653c454"}, {"problem": 30, "code": "#(let [r (reverse\n           (reduce (fn [x y]\n                     (if (= (first x) y) x\n                         (conj x y)))\n                   '()\n                   %))]\n    (if (string? %)\n      (apply str r)\n      r))", "user": "609e9b64e4b00e9e6653c426"}, {"problem": 30, "code": "reduce #(if (not (= (last %) %2)) (conj % %2) %1) []", "user": "609beb06e4b00e9e6653c412"}, {"problem": 30, "code": "(fn remove_cons [lst] \n  (reduce (fn [shrunk, elem] \n            (if (= (last shrunk) elem) shrunk              \n              (conj shrunk elem))) [] lst)\n  )", "user": "60a7c55be4b00e9e6653c468"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60ab0ba2e4b00e9e6653c47d"}, {"problem": 30, "code": "#(->> %\n      (partition-by identity)\n      (map first))", "user": "60ab1536e4b00e9e6653c47e"}, {"problem": 30, "code": "(fn [s]\n  (map first (partition-by identity s)))", "user": "60a39b80e4b00e9e6653c450"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "52435d0ce4b076204b44fab5"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "6045abb4e4b02d28681c77b8"}, {"problem": 30, "code": "reduce (fn [acc v] \n         (if (= v (last acc))\n           acc\n           (conj acc v))) []", "user": "60ade833e4b00e9e6653c494"}, {"problem": 30, "code": "(fn [values]\n  (->> values\n       (partition-by identity)\n       (map #(last %))))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 30, "code": "#(reduce (fn [col item]\n          (if (= (last col) item)\n            col\n            (conj col item)))\n        []\n        %1)", "user": "60ac91c5e4b00e9e6653c485"}, {"problem": 30, "code": "(fn compress [x]\n  (cond\n   \t(or (empty? x) (empty? (rest x))) x\n    (= (first x) (first (rest x))) (compress (rest x))\n    :else (cons (first x) (compress (rest x)))))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 30, "code": "#(reduce (fn [accm elem]\n            (if (= (last accm) elem)\n              accm\n              (conj accm elem)))\n          [] %)", "user": "60b1add0e4b0e0fa5f1b4227"}, {"problem": 30, "code": "(fn [myseq]\n  (loop [result []\n         remseq myseq\n         prev-val []]\n    (if (empty? remseq)\n      result\n      (if (= (conj [] (first remseq)) prev-val)\n        (recur result (rest remseq) prev-val)\n        (recur (conj result (first remseq)) (rest remseq) (conj [] (first remseq)))))))", "user": "60726211e4b069485764de36"}, {"problem": 30, "code": "#(mapcat set (partition-by identity %))", "user": "60a9a829e4b00e9e6653c470"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60b2f7a0e4b0e0fa5f1b422c"}, {"problem": 30, "code": "(fn [coll]\n  (reduce #(if (= (last %1) %2) %1 (conj %1 %2)) [] (reduce conj [] coll)))", "user": "60b3b8a9e4b0e0fa5f1b4233"}, {"problem": 30, "code": "(fn [coll]\n  (map first (partition-by identity coll)))", "user": "60b57acee4b0e0fa5f1b4238"}, {"problem": 30, "code": "(comp reverse first (partial reduce (fn [[acc last-value] x] (if (= x last-value) [acc last-value] [(cons x acc) x])) [[] nil]))", "user": "60b616e1e4b0e0fa5f1b4243"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "57123c96e4b09c608db70454"}, {"problem": 30, "code": "(fn [x] \n   (reduce\n    (fn [lastit it]\n      (if (= (last lastit) it)\n        lastit\n        (conj lastit it)))\n    []\n    x))", "user": "60b3b375e4b0e0fa5f1b4232"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60b61b40e4b0e0fa5f1b4244"}, {"problem": 30, "code": "reduce #(if (= (last %1) %2) %1 (conj %1 %2)) []", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 30, "code": "#(->> % (partition-by identity) (map first))", "user": "4db2903f535df7e46ed9b6bf"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60afc597e4b0245e5b1b35c3"}, {"problem": 30, "code": "(fn\n  [s]\n  (loop [dup nil\n         res '()\n         [x & xs] (reverse s)]\n    (if (nil? x)\n      res\n      (if (= dup x)\n        (recur dup res xs)\n        (recur x (cons x res) xs)))))", "user": "5f2d6bc4e4b033932238a66e"}, {"problem": 30, "code": "#((fn com [ss l r]\n    (if-let [f (first ss)]\n      (let [rss (rest ss)]\n      \t(if (= l f)\n        \t(com rss f r)\n        \t(com rss f (conj r f))))\n      r)) % nil [])", "user": "60bb21d5e4b0e0fa5f1b4281"}, {"problem": 30, "code": "(fn [lst]\n  (let [seqlst (seq lst)\n        zipwindex  (sort-by first (zipmap (take (count lst) (range)) seqlst))\n        seqoffset (conj seqlst (gensym \"offset\"))\n        zipoffset (sort-by first (zipmap  zipwindex seqoffset))]\n    (map #(second (first %))\n         (filter (fn [x] (not= (second x)\n                               (second (first x))))\n                 zipoffset) ) ))", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 30, "code": "#(reduce \n  (fn [l x] \n    (if \n      (= (last l) x) \n      l\n      (conj l x))) \n  [] \n  %)", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 30, "code": "#(loop [seqq (seq %)\n       res []]\n  (if (empty? seqq)\n      res\n      (if (= (first seqq) (last res))\n       (recur (rest seqq) res) \n       (recur (rest seqq)(conj res (first seqq))))\n       ))", "user": "60bfb68be4b0e0fa5f1b429e"}, {"problem": 30, "code": "#(->> (partition-by identity %)\n      (map first))", "user": "60c558e9e4b0e0fa5f1b42ce"}, {"problem": 30, "code": "#(reduce (fn [a b] (if (= (last a) b) a (conj a b))) [] %)", "user": "6093b56ce4b00e9e6653c3e0"}, {"problem": 30, "code": "reduce (fn [acc n] \n         (if (= (peek acc) n)\n           acc\n           (conj (vec acc) n))) []", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 30, "code": "(fn compress[xs]\n  (reduce (fn [memo next]\n            (if (= (last memo) next)\n              memo\n              (conj memo next)))\n          '[]\n          xs))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 30, "code": "#(filter (fn [x] (not= nil x)) (for [index (range (count %))]\n\n                (cond\n                  (= index 0) (nth % index)\n                  (and (> index 0) (not= (nth % index) (nth % (dec index)))) (nth % index))))", "user": "5d3e8c3de4b01671435dbd73"}, {"problem": 30, "code": "(fn compress [coll]\n      (reduce\n\n        (fn [x y]\n            (println x y)\n            (if (not= (last x) y)\n              (conj x y)\n               x ))\n        '[]\n        coll)\n      )", "user": "60c90322e4b0e0fa5f1b4302"}, {"problem": 30, "code": "#(reduce (fn [output n]\n           (if (not= (last output) n)\n             (conj output n)\n             output)) [] %1)", "user": "60c4e5dfe4b0e0fa5f1b42cd"}, {"problem": 30, "code": "(fn blip [x]\n  (loop [xx x res []]\n        (if (empty? xx)\n          (reverse (into '() res))\n          (if (= (first xx) (second xx))\n            (recur (rest xx) res)\n            (recur (rest xx) (conj res (first xx))))\n)))", "user": "6033c42ce4b0d5df2af222c3"}, {"problem": 30, "code": "(fn\n  [coll]\n  (map first (partition-by identity coll)))", "user": "603e8e3ae4b0d5df2af22316"}, {"problem": 30, "code": "(fn [coll]\n  (reduce (fn [acc x]\n            (println acc)\n            (if (not (= x (last acc)))              \n              (conj acc x)\n              acc))          \n          (vector)\n          coll))", "user": "60cebbd3e4b0e0fa5f1b4334"}, {"problem": 30, "code": "(fn [c] (map first (partition-by identity c)))", "user": "56629a7de4b0e91d5f5c5649"}, {"problem": 30, "code": "(fn compress-seq [s] (let [p (first s), v []] ((fn rem-dups [v,prev,seq] (if (= seq '()) (conj v prev) (if (= prev (first seq)) \n                                                                  (rem-dups v prev (rest seq))\n                                                                  (rem-dups (conj v prev) (first seq) (rest seq))))) v p (rest s))))", "user": "60c86bbde4b0e0fa5f1b42fb"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60d1e522e4b0250a41de0b07"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60ce4a2be4b0e0fa5f1b4330"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60c7c23be4b0e0fa5f1b42eb"}, {"problem": 30, "code": "(fn rem-dup\n  ([coll] (rem-dup (rest coll) (first coll) (vector (first coll))))\n  ([coll remd ret]\n   (if (empty? coll)\n     ret\n     (let [car (first coll)\n           cdr (rest coll)]\n       (if (= car remd)\n         (rem-dup cdr remd ret)\n         (rem-dup cdr car (conj ret car)))))))", "user": "5f90aeefe4b0715f5002d799"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60c43b20e4b0e0fa5f1b42c9"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "60dd865ee4b0d8b48c489db3"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5ed81965e4b016b56eae05ed"}, {"problem": 30, "code": "#(map first (partition-by identity %))", "user": "5d69a6e1e4b0db5d338d160e"}]