[{"code": "(fn [s]\r\n  (sort #(.compareToIgnoreCase % %2)\r\n  (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dce6e41535d5973398f92a2"}, {"code": "(fn [s]\r\n    (sort-by \r\n      #(.toLowerCase %)\r\n      (seq (.split s \"\\\\W+\"))))", "problem": 70, "user": "4dcd818e535d5973398f929d"}, {"code": "(fn [sentence] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" sentence)))", "problem": 70, "user": "4dc3780b535da86f151f0c3f"}, {"code": "(fn [s]\r\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dc986d0535d5973398f9285"}, {"code": "(fn word-sort [s]\r\n  (let [re (re-seq #\"[a-zA-Z]+\" s)]\r\n    (sort-by #(.toUpperCase %) re)))", "problem": 70, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn [s]\r\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn word-sort [string]\r\n  (sort-by #(.toUpperCase %) (re-seq #\"[A-z]+\" string)))", "problem": 70, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn [s]\r\n  (sort-by #(.toLowerCase %)\r\n           (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn[s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn my-split-sort [s]\r\n  (sort #(.compareTo (.toUpperCase %1) (.toUpperCase %2))\r\n        (.split\r\n         (.replaceAll s \"\\\\p{P}+\" \"\") \" \")))", "problem": 70, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn [s]\r\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ddc1c89535d02782fcbea01"}, {"code": "(fn [s]\r\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn [i-input]\r\n    (let [terms (clojure.string/split i-input #\"\\W\")]\r\n        (map\r\n            last\r\n            (sort (map\r\n                #(vector %1 %2)\r\n                (map clojure.string/lower-case terms)\r\n                terms)))))", "problem": 70, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "(fn [z]\r\n(vals (reduce #(assoc %1 (.toUpperCase %2) %2) (sorted-map) (re-seq #\"\\w+\" z)))\r\n)", "problem": 70, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn [x] \r\n  (sort-by \r\n    #(clojure.string/lower-case %)\r\n    (clojure.string/split (clojure.string/replace x #\"[^a-zA-Z ]\" \"\")  #\" \")))", "problem": 70, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "(fn w-sort [s]\r\n  (let [words (vec (re-seq #\"[A-Za-z]+\" s))]\r\n    (letfn [\r\n        (before? [w1 w2] (neg? (.compareToIgnoreCase w1 w2)))\r\n        (order [coll]\r\n                (let [[w1 w2 & more] coll]\r\n                  (if more\r\n                    (let [ordered (order (rest coll))\r\n                          [p1 p2] (split-with #(before? % w1) ordered)]\r\n                      (concat p1 (cons w1 p2)))\r\n                    (if (before? w1 w2) [w1 w2] [w2 w1]))))]\r\n      (order words))))", "problem": 70, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [s]\r\n       (sort-by #(.toLowerCase %) (re-seq #\"[A-Za-z]+\"  s)))", "problem": 70, "user": "4dbe19fe535d020aff1edf59"}, {"code": "#(sort\r\n  String/CASE_INSENSITIVE_ORDER\r\n  (re-seq #\"[A-Za-z]+\" %))", "problem": 70, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn [a] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" a)))", "problem": 70, "user": "4db5082e535d87e67b28fe03"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"[A-z]+\" %))", "problem": 70, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "(fn [s]\r\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4df1e213535d08e6dec9fe20"}, {"code": "(fn [s]\r\n       (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4deb529a535d08e6dec9fe04"}, {"code": "(fn [s]\r\n  (sort-by (fn [i] (.toLowerCase i)) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dd52e29535dae65d5c462e5"}, {"code": "#(->> (clojure.string/split % #\"\\W+\")\r\n      (sort-by clojure.string/lower-case))", "problem": 70, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn sort-word [s]\r\n  (sort-by #(.toLowerCase %) (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (vec (.split s \"[^a-zA-Z]\"))))", "problem": 70, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "#(->> (re-seq #\"\\w+\" %)\r\n    (sort-by (fn [v ] (.toLowerCase v))) )", "problem": 70, "user": "4def301c535d08e6dec9fe12"}, {"code": "(fn [strin]\r\n  (sort #(compare (clojure.string/lower-case %1) \r\n    (clojure.string/lower-case %2))\r\n      (clojure.string/split (.substring strin 0 (- (count strin) 1))  #\" \")))", "problem": 70, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn [s]\r\n  (sort-by #(.toUpperCase %)\r\n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn[t](sort-by #(.toLowerCase%)(re-seq #\"\\w+\"t)))", "problem": 70, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "(fn [s] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4df669d4535d08e6dec9fe35"}, {"code": "(fn [s] (let [clean (.replaceAll s \"[^ A-Za-z]\" \"\")]\r\n           (sort-by #(.toLowerCase %) (.split clean \" \"))))", "problem": 70, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn [xs]\r\n   (sort\r\n    (comparator #(pos? (.compareToIgnoreCase %2 %1)))\r\n    (map first (re-seq #\"(\\w+)\" xs))))", "problem": 70, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "(fn [words] (sort #(.compareToIgnoreCase %1 %2) (re-seq #\"\\w+\" words)))", "problem": 70, "user": "4dbd0161535d020aff1edf3f"}, {"code": "(fn [a] (sort-by \n           #(.toLowerCase %)\n           (.split a \"[^a-zA-Z]\")))", "problem": 70, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn [string]\r\n  (let [parts (seq (.split (apply str (butlast string)) \" \"))]\r\n    (sort #(.compareToIgnoreCase %1 %2) parts)))", "problem": 70, "user": "4e02bee8535d04ed9115e791"}, {"code": "(fn sortsplit [x]\r\n  (sort-by clojure.contrib.string/upper-case \r\n     (map #(apply str (re-seq #\"[a-zA-Z]\" %)) \r\n       (.split x \" \"))))", "problem": 70, "user": "4e123905535d04ed9115e7ce"}, {"code": "(fn [s]\r\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "(fn[s](sort-by #(.toLowerCase %) \r\n  (map #(apply str %) \r\n    (filter #(Character/isLetter (first%))  \r\n      (partition-by #(Character/isLetter %) \r\n    s)))))", "problem": 70, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn f [s]\r\n  (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [s]\r\n  (sort #(.compareToIgnoreCase % %2)\r\n(re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn [s]\n  (let [m (re-seq #\"[a-zA-Z]+\" s)]\n    (sort-by (memfn toUpperCase) m)))", "problem": 70, "user": "4e28120f535deb9a81d77efa"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "#(sort-by (fn [s] (.toLowerCase s)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4e307313535deb9a81d77f14"}, {"code": "(fn [sentence] \n  (sort \n    #(.compareTo (.toUpperCase %1) (.toUpperCase %2))\n    (re-seq #\"\\w+\" sentence)))", "problem": 70, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "(fn [s]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n        (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "4e39fb68535deb9a81d77f47"}, {"code": "#(sort-by (memfn toLowerCase) (.split (.replaceAll % \"[^\\\\w ]\" \"\") \" \"))", "problem": 70, "user": "4e39d763535deb9a81d77f46"}, {"code": "(fn [x] (sort #(. %1 compareToIgnoreCase %2) (re-seq #\"\\w+\" x)))", "problem": 70, "user": "4e46cf17535dc968683fc4b6"}, {"code": "(fn [string]\n  (sort-by (fn [s] (.toLowerCase s)) (re-seq #\"\\w+\" string)))", "problem": 70, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn [words] \n  (sort \n    #(compare (.toLowerCase %1) (.toLowerCase %2)) \n    (map #(re-find #\"\\w+\" %) (.split words \"\\\\s\"))))", "problem": 70, "user": "4dbad895535d1e037afb21ae"}, {"code": "(fn [s]\n  (sort-by\n   #(.toUpperCase %1)\n   (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn sort-sentence [s]\n  (let [words (re-seq #\"\\w+\" s)\n        lower (fn [s] (.toLowerCase (String. s)))]\n    (sort-by lower words)))", "problem": 70, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn [s] \n  (sort-by #(.toUpperCase %)\n           (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "#(sort (fn [x y] (.compareToIgnoreCase x y)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4e52d815535d302ef430da77"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e4ad154535dc968683fc4d1"}, {"code": "(fn [s]\n  (sort #(.compareToIgnoreCase % %2) \n        (clojure.string/split (clojure.string/replace s #\"[.!]\" \"\") #\" \")))", "problem": 70, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn [s] \n  (sort-by #(.toLowerCase %) \n    (.split s \"[ .!]\")))", "problem": 70, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn [s](sort-by #(.toLowerCase %)(re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dbd9ac2535d020aff1edf47"}, {"code": "(fn [string]\n  (sort-by #(.toLowerCase %)\n  (-> string\n    (.replaceAll \"[\\\\.!\\\\?]\" \"\")\n    (.split \" \"))))", "problem": 70, "user": "4dbdce65535d020aff1edf4d"}, {"code": "(fn [text]\n  (let [words (re-seq #\"[a-zA-Z]+\" text)]\n    (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) words)))", "problem": 70, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn[a-str]\n  (let [worte (re-seq #\"\\w+\" a-str)\n        cmp (fn[w1 w2]\n              (let [rst (remove #(= (java.lang.Character/toLowerCase (first %1))\n                                    (java.lang.Character/toLowerCase (second %1))) (partition 2 (interleave w1 w2)))\n                    fst (first rst)]\n                (< (int (java.lang.Character/toLowerCase (first fst))) (int (java.lang.Character/toLowerCase (second fst))))))]\n  (sort cmp worte)))", "problem": 70, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "(fn [str]\n  (->> str\n      (re-seq #\"\\w+\" )\n      (sort-by #(.toLowerCase %))))", "problem": 70, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn word-sorting [word]\n  (sort #(.compareToIgnoreCase %1 %2) (re-seq #\"\\w+\" word)))", "problem": 70, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "(fn [s]\n  (into [] (sort (comparator \n\t\t\t(fn [x y] (< (. x compareToIgnoreCase y) 0))) \n\t\t       (re-seq #\"\\w+\" s))))", "problem": 70, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "(fn [s]\n    (sort-by #(.toLowerCase %)\n             (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "(fn [ string ]\n (let [srt\n   \n(fn [a,b]\n (compare\n  (.toLowerCase a)\n  (.toLowerCase b))) ]\n\n(sort srt\n  (re-seq #\"\\w+\" string))))", "problem": 70, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(let [cmpr #(compare (.toUpperCase %1)\n                       (.toUpperCase %2))]\n    #(sort cmpr (re-seq #\"\\w+\" %)))", "problem": 70, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "(fn [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn [s] (sort (fn [x y] \n                (let [u #(.toUpperCase %)] (compare (u x) (u y)))) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "(fn sort-words-sentence [sentence]\n        (sort (fn [& args] (apply compare (map #(.toLowerCase %) args))) (re-seq #\"[a-zA-Z]+\" sentence)))", "problem": 70, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" %))", "problem": 70, "user": "4e498df9535dc968683fc4c4"}, {"code": "(let [lower-case (fn lower-case [x]\n  (let [num (if (and (>= x 65) (<= x 90)) (+ x 32) x)]\n    (if (and (>= num 97) (<= num 122))\n    num 0)))\n\nword-score (fn word-score [x]\n  {:small (apply str (map char (reduce #(conj %1 (lower-case (int %2)) ) [] x)))\n   :word x})]\n(fn word-sort [x]\n  \"4clojure.com/problem/70\"\n  (map :word (sort-by :small (map word-score (re-seq #\"\\w+\" x))))))", "problem": 70, "user": "4db58ccb535d87e67b28fe10"}, {"code": "(fn [sentence] (let [words (.split (apply str (re-seq #\"[A-Z]|[a-z]|\\s\" sentence)) \" \") ]\n                          (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) words)))", "problem": 70, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e588e84535d8a8b8723a294"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (.split % \"\\\\W\"))", "problem": 70, "user": "4e6a6d12535d8ccf87e9fee2"}, {"code": "(fn sort-words- [s]\n  \"70. Write a function which splits a sentence up into a sorted list of words.\"\n  (->> (re-seq #\"\\w+\" s)\n       (map #(list (.toLowerCase %) %))\n       (sort #(compare (first %1) (first %2)))\n       (map second)))", "problem": 70, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "#(sort (java.text.Collator/getInstance) (.split % \"[.!?, ]\"))", "problem": 70, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "(fn [x] \n  (sort \n    (fn [a b] (.compareTo (.toUpperCase a) (.toUpperCase b)))\n    (re-seq #\"\\w+\" x)))", "problem": 70, "user": "4e6def42535d5021c1a895f7"}, {"code": "(fn [s]\n  (into [] (sort-by clojure.string/upper-case (clojure.string/split (clojure.string/replace s #\"[.!]\" \"\") #\" \"))))", "problem": 70, "user": "4db045b5838c48654951d9be"}, {"code": "(fn [s]  (->> s (re-seq #\"\\w+\") (sort-by #(.toLowerCase %))))", "problem": 70, "user": "4e6dd51b535d5021c1a895f6"}, {"code": "(fn [y]\r\n    (sort String/CASE_INSENSITIVE_ORDER\r\n      (map\r\n        #(. % replaceAll \"\\\\p{Punct}\" \"\")\r\n        (seq (. y split \"\\\\s+\")))))", "problem": 70, "user": "4e44358f535dc968683fc4a8"}, {"code": "(fn word-sort [s]\n  (sort #(.compareToIgnoreCase %1 %2) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e50c894535dc968683fc4ee"}, {"code": "(fn [s]\n  (sort-by \n    #(.toLowerCase %)\n    (.split\n      (.replaceAll s \"\\\\.|!\" \"\")\n      \" \"\n  ))\n)", "problem": 70, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n           (.split #\"\\W+\" s)))", "problem": 70, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn [a] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" a)))", "problem": 70, "user": "4e6e6630535d5021c1a89609"}, {"code": "(fn [s]\n  (sort #(.compareToIgnoreCase %1 %2)\n         (seq (.split s \"[^a-zA-Z]\"))))", "problem": 70, "user": "4e6f4cbc535d5021c1a8961a"}, {"code": "(fn [phrase] (sort-by #(.toLowerCase %1)\n         (map (fn [word] (apply str (filter #(Character/isLetter %) word)))\n              (seq (.split #\"\\s\" phrase)))))", "problem": 70, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn word-sort [s]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n        (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn [s]\n    (->> s (re-seq #\"[a-zA-Z]+\")\n\t      (sort-by #(.toUpperCase %))))", "problem": 70, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [a-seq] \n  (vec\n    (apply sorted-set-by \n      #(.compareToIgnoreCase %1 %2)\n      (filter\n        #(not= \" \" %)\n        (map \n          #(apply str %)\n          (partition-by\n            #(= \\space %)\n            (filter \n              #(not (contains? #{ \\. \\! } %))\n              a-seq)))))))", "problem": 70, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "(fn [x] \n  (sort #(compare (.toLowerCase %1 ) (.toLowerCase %2))\n   (.split x \"[ \\\\.!]\")))", "problem": 70, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn [x]\n  (let [st (re-seq #\"[A-Za-z]+(?:['-][A-Za-z]+)?|\\\\d+(?:[,.]\\\\d+)?\" x)]\n    (->> st\n      (interleave\n        (map\n          (fn [i]\n            (reduce\n              #(+ (/ %1 26) %2)\n              (map #(Character/getNumericValue %) (reverse i))\n            )\n          )\n        st)\n      )\n      (apply sorted-map)\n      (sort)\n      (vals)\n    )\n  )\n)", "problem": 70, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn [s] (sort #(.compareToIgnoreCase % %2) \n          (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn [str] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)  )  (re-seq #\"[a-zA-Z]+\" str)))", "problem": 70, "user": "4e739e13535dff18050a9c76"}, {"code": "(fn[s](sort-by #(.toUpperCase %) (filter #(not(nil? (re-matches #\"\\w*\" %)))(seq (.split s \"\\\\W\")))))", "problem": 70, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn [x] (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (re-seq #\"[a-zA-Z]+\" x)))", "problem": 70, "user": "4dbde27c535d020aff1edf50"}, {"code": "(fn [str]\n  (sort String/CASE_INSENSITIVE_ORDER\n      (re-seq #\"[a-zA-Z]+\" str)))", "problem": 70, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "(fn [s]\n  (sort (fn [s1 s2] (> 0 (.compareToIgnoreCase s1 s2)))\n        (map #(apply str %)\n             (clojure.string/split s #\"[^a-zA-Z]+\"))))", "problem": 70, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn [s]\n  (map first\n    (sort-by last\n      (map #(list % (.toLowerCase %))\n        (re-seq #\"\\w+\" s)))))", "problem": 70, "user": "4e720985535d5021c1a89655"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (.split s \" |\\\\.|\\\\!\")))", "problem": 70, "user": "4e7e6cbd535db169f9c79713"}, {"code": "(fn f ([s] (f s nil))\n  ([s c]\n   (if (empty? s)\n    (sort-by #(.toLowerCase %) c)\n    (let [w #(re-matches #\"[a-zA-Z]\" (str %))\n          [a b] (split-with w s)]\n      (recur (drop-while #(not (w %)) b)\n             (conj c (apply str a)))))))", "problem": 70, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "#(sort-by (fn[s] (.toLowerCase s)) (clojure.string/split % #\"[\\s\\.!]\"))", "problem": 70, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4e7e55ab535db169f9c79711"}, {"code": "(fn [s] \n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "(fn[x](sort-by #(.toLowerCase %) (re-seq #\"\\w+\" x)))", "problem": 70, "user": "4e7eff9e535db966e863cc38"}, {"code": "#(sort-by (memfn toUpperCase) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn [x] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" x)))", "problem": 70, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn  [s]\n\n  (sort-by #(.toLowerCase %1) (re-seq #\"\\w+\" s) )\n\n  )", "problem": 70, "user": "4e78c208535db95036265722"}, {"code": "(fn [a-str] \n  (into [] \n    (sort \n      #(compare (.toLowerCase %1) (.toLowerCase %2)) \n      (re-seq #\"\\w+\" a-str))))", "problem": 70, "user": "4dcc5aff535d5973398f9293"}, {"code": "(fn word-sort [word-string]\n  (sort #(compare (clojure.string/lower-case %)\n                  (clojure.string/lower-case %2))\n        (clojure.string/split\n         (clojure.string/replace word-string #\"[\\.\\!\\?]\" \"\") #\" \")))", "problem": 70, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn [s]\n  \t (let [words (re-seq #\"\\w+\" s)\n\t\t       lower (map #(.toLowerCase %) words)\n\t\t       pairs (map vector lower words)\n\t\t       sorted (sort pairs)]\n\t\t       (map last sorted)))", "problem": 70, "user": "4e837808535db62dc21a62d9"}, {"code": "(fn [st]\n   \n    (sort-by #(.toUpperCase %)\n    (map \n        (fn [x] x) \n        (.split \n            (apply str (filter (fn [a] (not (#{\\.,\\,,\\!} a))) st)) \n            \" \")\n    ))\n    \n)", "problem": 70, "user": "4e78dc98535db95036265724"}, {"code": "#(sort-by (fn [w] (.toLowerCase w)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn [c] (sort \n               #(compare (.toLowerCase %1)\n                 (.toLowerCase %2))\n               (.split (apply str (remove #{\\. \\!} c)) \" \")))", "problem": 70, "user": "4e71705e535d5021c1a89649"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER\n    (clojure.string/split % #\"[^a-zA-Z]\"))", "problem": 70, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn [s]\r\n  (let [words (fn [s] (.split s \" \"))]\r\n  (->> s butlast (apply str) words\r\n       (sort (fn [s1 s2] (compare (.toLowerCase s1) (.toLowerCase s2)))))))", "problem": 70, "user": "4e8681b7535dae1a5effa438"}, {"code": "#(sort-by (memfn toUpperCase) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4db1f7d223724b71670a9c07"}, {"code": "(fn[s] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn [x]\n  (sort\n    (fn [l r]\n      (.compareToIgnoreCase l r))\n    (re-seq #\"\\w+\" x)))", "problem": 70, "user": "4e7e05a6535db169f9c796fe"}, {"code": "#(sort-by (fn [x] (.toLowerCase x)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "#(vals\n   (reduce\n    (fn [a x] (assoc a (.toLowerCase x) x))\n    (sorted-map)\n    (.split #\"[ \\.\\,\\;\\:\\!\\?]+\" %)))", "problem": 70, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn f [c]\r\n  (let [c (.substring c 0 (dec (.length c)))]\r\n    (sort (reify java.util.Comparator\r\n            (compare [this x y] (.compareTo (.toLowerCase x) (.toLowerCase y))))\r\n          (clojure.string/split c #\"\\s\"))))", "problem": 70, "user": "4dac61e18cc9d6edb9beb0b3"}, {"code": "(fn word-sort [s]\n   (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e89f46c535d3e98b8023288"}, {"code": "#(sort-by (fn [s] (format \"%S\" s)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4db85bdd535d1e037afb218d"}, {"code": "(fn [s]\n  (let [strings (re-seq #\"[A-Za-z]+\" s)]\n    (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) strings)))", "problem": 70, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn sort [s]\n  (vals \n    (apply sorted-map \n      (reduce #(conj %1 (clojure.string/lower-case %2) %2) \n        [] (re-seq #\"\\w+\" s)))))", "problem": 70, "user": "4e7e93f5535db169f9c7971a"}, {"code": "(fn [sentence]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" sentence)))", "problem": 70, "user": "4dc0ff08535d020aff1edf84"}, {"code": "(fn [s]\n    (sort-by #(.toLowerCase %) \n      (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "#(sort-by (memfn toLowerCase) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4e823ed7535db62dc21a62c7"}, {"code": "#(sort-by (memfn toLowerCase) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4db92654535d1e037afb21a0"}, {"code": "(fn [s] (sort-by #(.toUpperCase %) (.split (.replaceAll s \"\\\\.|!\" \"\") \" \")))", "problem": 70, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn [s]\r\n    (sort-by (fn [t] (.toLowerCase t))\r\n\t\t   (re-seq #\"[a-zA-Z]+\"\r\n\t\t\t   s)))", "problem": 70, "user": "4e821ca5535db62dc21a62c2"}, {"code": "#(sort-by \n  (fn [w] (.toLowerCase w)) \n  (re-seq #\"\\w+\" %))", "problem": 70, "user": "4dcc024e535d5973398f928f"}, {"code": "(fn [s]\n  (sort String/CASE_INSENSITIVE_ORDER\n          (map (fn [w] (re-find #\"\\w+\" w))\n               (seq (.split s \" \")))))", "problem": 70, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) \r\n  (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (map #(.replaceAll % \"\\\\W\" \"\") (.split s \" \"))))", "problem": 70, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn s[x] (sort-by #(.toLowerCase %) \n      (clojure.string/split x #\"\\W\")))", "problem": 70, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn [sentence]\n  (let [sorter #(compare (.toUpperCase %1) \n                         (.toUpperCase %2))]\n  (sort sorter (re-seq #\"\\w+\" sentence))))", "problem": 70, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(fn [s] \n      (sort-by #(.toLowerCase %)\n               (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4e6a11ee535d8ccf87e9fe9f"}, {"code": "#(vals (into (sorted-map) \n         (zipmap (re-seq #\"\\w+\" (.toUpperCase %)) \n                 (re-seq #\"\\w+\" %))))", "problem": 70, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [x](sort-by clojure.string/upper-case (clojure.string/split  (clojure.string/replace (clojure.string/replace x \"!\" \"\" ) \".\" \"\" ) #\" \"))  )", "problem": 70, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn [s]\n(sort-by #(.toLowerCase %) \n(vec (.split s \"\\\\W\"))))", "problem": 70, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn [s] (sort-by #(.toLowerCase %)\n  (clojure.string/split s #\"[ \\.!]+\")))", "problem": 70, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn wsort\r\n  [string]\r\n\t(let [fil (fn [c] (and (not= c \\space)\r\n\t\t\t\t\t\t\t\t\t\t\t\t (not= c \\.)\r\n\t\t\t\t\t\t\t\t\t\t\t\t (not= c \\!)))]\r\n\t\t(filter #(fil (first %)) (sort-by #(.toLowerCase %) (map (partial apply str) (partition-by fil string))))))", "problem": 70, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn\n  [s]\n  (sort-by #(.toLowerCase %) (re-seq  #\"\\b\\w+\\b\" s))\n  )", "problem": 70, "user": "4e6dd0f5535d5021c1a895f3"}, {"code": "#(sort (fn [x y] (compare (.toLowerCase x) (.toLowerCase y))) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4ea09441535d7eef308072a7"}, {"code": "(fn my-sort [coll]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" coll)))", "problem": 70, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "(fn word-sort [s]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split (->> s (clojure.core/replace {\\. \"\"\n                                                \\! \"\"\n                                                \\? \"\"\n                                                \\, \"\"\n                                                \\; \"\"\n                                                \\: \"\"}) (apply str)) #\" \")))", "problem": 70, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (into [] (re-seq #\"\\w+\" s))))", "problem": 70, "user": "4ea09fa4535d7eef308072aa"}, {"code": "(fn sort-words [string]\r\n  (sort\r\n   (fn [x y] (.compareToIgnoreCase x y))\r\n   (-> string (.replaceAll \"[.!]\" \"\") (.split \" \"))))", "problem": 70, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "#(sort-by (fn [w] (.toLowerCase w)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e89ddf9535d3e98b8023284"}, {"code": "(fn [s]\r\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e8ddf32535d65386fec213c"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "#(sort (fn [a b] (.compareToIgnoreCase a b)) (re-seq #\"[\\w]+\" %))", "problem": 70, "user": "4e8f4f64535d65386fec2149"}, {"code": "(fn [a] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" a)))", "problem": 70, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "(fn ws [s]\n  (let [wl (map #(.replaceAll % \"\\\\W\" \"\") (.split s \" \"))]\n    (loop [rv [] tmp wl]\n      (if (empty? tmp)\n        rv\n        (recur (concat (take-while #(> (.compareToIgnoreCase (first tmp) %) 0) rv)\n                       [(first tmp)]\n                       (drop-while #(> (.compareToIgnoreCase (first tmp) %) 0) rv))\n               (rest tmp))))))", "problem": 70, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "#(sort-by (fn [x] (.toLowerCase x)) (re-seq #\"\\b\\w+\\b\" %))", "problem": 70, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [sentence]\n  (sort-by #(.toLowerCase %) (clojure.string/split sentence #\"[\\s\\.!]+\")))", "problem": 70, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e994541535dbda64a6f6b64"}, {"code": "(fn ws [s] \n  (sort \n    #(.compareToIgnoreCase %1 %2)\n    (clojure.string/split \n    (clojure.string/replace s #\"[.!]\" \"\")\n    #\" \")))", "problem": 70, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn word-sorting [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn sort-words\n  [string]\n  (sort-by (memfn toLowerCase) (re-seq #\"\\w+\" string)))", "problem": 70, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn w[x]\r\n  (let [s (map #(apply str (re-seq #\"[A-Za-z]\" %)) (.split x \" \")) z (zipmap (map #(.toLowerCase (str %)) s) s )]\r\n      (into [] (vals (sort z))) )\r\n  )", "problem": 70, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n           (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "(fn [s]\n    (sort (comparator #(pos? (.compareToIgnoreCase %2 %1))) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn [x]\n(sort #(compare (.toUpperCase %1) (.toUpperCase %2)) (re-seq #\"\\w+\" x)) )", "problem": 70, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn st [s]\n     (let [cmp #(compare (.toLowerCase %1) (.toLowerCase %2))\n           col (vec (.split #\" \" (apply str (butlast s))))]\n       (sort cmp col)))", "problem": 70, "user": "4eb01df4535d7eef30807337"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER\n  (re-seq #\"\\w+\" %))", "problem": 70, "user": "4e72ac47535d5021c1a89666"}, {"code": "#(sort-by (memfn toLowerCase) (re-seq #\"[A-Za-z]+\" %))", "problem": 70, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n           (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn [s] \n  (sort-by #(.toUpperCase %)\n    (map first (partition 2 (map #(apply str %)\n      (partition-by #{\\. \\space \\!}\n        s))))))", "problem": 70, "user": "4e707db6535d5021c1a8963a"}, {"code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\"[ \\.!]\"))", "problem": 70, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn [x]\n  (sort\n    #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n    (re-seq #\"\\w+\" x)))", "problem": 70, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn [s]\n  (let [str (re-find #\"[\\w|\\s]+\" s) \narr (seq (.split str \" \"))\norig-map (zipmap arr (map #(.toLowerCase %) arr))\nsorted-arr (sort-by val orig-map)]\n(map first sorted-arr)))", "problem": 70, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn [s]\n  (sort\n    #(.compareTo (.toLowerCase %1) (.toLowerCase %2))\n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ea85846535d7eef308072f9"}, {"code": "(fn [x]\n  (->\n    (sort\n      (let [\n            str (re-seq #\"[a-zA-Z]+\" x)\n           ]\n        (zipmap\n          (map #(.toLowerCase %) str)\n          str\n        )\n      )\n    )\n    vals\n    vec\n  )\n)", "problem": 70, "user": "4e8b73e4535d65386fec2120"}, {"code": "(fn [string]\n  (sort\n    #(.compareToIgnoreCase %1 %2)\n    (clojure.string/split string #\"\\W+\")))", "problem": 70, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn [x] (sort-by #(.toLowerCase %) (.split x \"\\\\W+\")))", "problem": 70, "user": "4ea0c284535d7eef308072ad"}, {"code": "(fn [s] \n  (sort \n    (fn [a b] \n      (compare \n        (clojure.string/lower-case a)\n        (clojure.string/lower-case b)))\n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ec6559a535d6d7199dd36c9"}, {"code": "(fn [s] (sort #(.compareToIgnoreCase %1 %2) (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "4ec2f192535dcc7ae8597d4c"}, {"code": "(fn pq [a]\n(sort-by #(.toLowerCase (str %)) (-> a (.replaceAll \"[^A-Za-z\\\\s]\" \"\") (.split \" \") (seq)))\n)", "problem": 70, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn [text]\n  (letfn [\n    (sort-key [word]\n      (apply str\n             (filter #(Character/isLetter %)\n                     (.toLowerCase word))))]\n    (sort-by sort-key\n             (.split text \"\\\\W+\"))))", "problem": 70, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"[a-zA-Z]+\" %))", "problem": 70, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn [s] \n  (sort-by #(.toUpperCase %) (.split #\"[ .!]\" s)))", "problem": 70, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [s] (vec \n  (apply sorted-set-by #(> 0 (.compareTo (.toLowerCase %1) (.toLowerCase %2))) (re-seq #\"\\w+\" s))))", "problem": 70, "user": "4eabb245535d7eef30807319"}, {"code": "(fn [v]\n  (let [newv (.replaceAll  v \"[!.]\" \"\" )]\n   (sort #(compare (.toUpperCase %1 ) (.toUpperCase %2 )) (.split  newv \" \"))\n   )\n  )", "problem": 70, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn [s]\n  (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4eb51942535d7eef30807365"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn [w] (sort-by #(.toLowerCase %) (re-seq #\"[aA-zZ]+\" w)))", "problem": 70, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "4daf8f84edd6309eace4d17a"}, {"code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4e6f578c535d5021c1a8961b"}, {"code": "#(sort-by (fn [x] (.toLowerCase x)) (.split % \"\\\\W\"))", "problem": 70, "user": "4ec07699535dfed6da9c6da2"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4eb0a757535d7eef3080733d"}, {"code": "#(sort-by clojure.string/lower-case\n    (re-seq #\"\\w+\" %))", "problem": 70, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn [str]\n  (map #(second %)\n  (apply sorted-set\n  (map (fn [x] (vector (.toLowerCase x) x))\n  (vec (.split\n    (subs str 0 (- (count str) 1)) \" \"))))))", "problem": 70, "user": "4ec21058535dfed6da9c6dba"}, {"code": "(fn [s]\n  (sort #(compare (.toLowerCase %1)\n                  (.toLowerCase %2))\n        (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4ebd4448535dfed6da9c6d8f"}, {"code": "(fn [s]\n  (vec (sort-by #(.toLowerCase %) (set( map #(.trim %) (.split (.replaceAll s \"[\\\\.!]\" \"\")  \" \"))))))", "problem": 70, "user": "4e7ada51535db169f9c796ae"}, {"code": "#(sort (java.text.Collator/getInstance) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(fn word-sort [sentence]\n  (->> sentence\n    (partition-by #(if (= % \\space) 1))\n    (map (partial filter #(Character/isLetter %)))\n    (map (partial apply str))\n    (filter (partial not= \"\"))\n    (sort #(.compareTo (.toLowerCase %1) (.toLowerCase %2)))))", "problem": 70, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn[x](sort-by #(.toLowerCase %) (re-seq #\"\\w+\" x)))", "problem": 70, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn [s]\n  (let [v (.split (subs s 0 (dec (count s))) \" \")]\n    (sort String/CASE_INSENSITIVE_ORDER v)))", "problem": 70, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "#(sort-by (memfn toLowerCase) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "(fn [string]\n  (sort-by #(.toLowerCase %) (.split (.replaceAll string \"[.!]\" \"\") \" \")))", "problem": 70, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [s] (into [] (apply sorted-set-by #(compare (.toLowerCase %) (.toLowerCase %2)) (re-seq #\"\\w+\" s))))", "problem": 70, "user": "4ecbb249535df97575fdabdf"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn [s] \n   (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "(fn [x] (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n                 (re-seq #\"[a-zA-Z]+\" x)))", "problem": 70, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn ws [s]\n  (let [p #{\\! \\.}]\n    (map (fn [w] (apply str (remove #(p %) w))) (sort-by clojure.string/lower-case (.split s \" \")))))", "problem": 70, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"\\w+\" %))", "problem": 70, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "#(sort\r\n    (fn [a b] (.compareToIgnoreCase a b))\r\n    (re-seq #\"\\w+\" %))", "problem": 70, "user": "4ee40938535d10e5ff6f5375"}, {"code": "(fn [t] (sort-by #(.toLowerCase %) (remove #(= % \"\") (re-seq #\"\\w*\" t))))", "problem": 70, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn sortwords [s]\n  (letfn [(wordcomp [w x]\n    (apply compare (map #(.toLowerCase %) [w x])))]\n  (sort wordcomp (.split s \"[^a-zA-Z]\"))))", "problem": 70, "user": "4ea7999e535d7eef308072ee"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn [s] \n  (sort-by \n    #(. % toLowerCase)  \n    (re-seq #\"\\b\\w+\\b\" s)))", "problem": 70, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n    (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn [o] (->> (seq (.split o \" \"))\n  (map (fn [word] \n    (apply str (filter #(Character/isLetter %) word))))\n  (sort #(.compareToIgnoreCase % %2))))", "problem": 70, "user": "4ee7ef87535d93acb0a66872"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"\\w+\" %))", "problem": 70, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "#(sort (fn [a b] (.compareToIgnoreCase a b)) (clojure.string/split % #\"\\W+\"))", "problem": 70, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s) ))", "problem": 70, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn [s] (vec (sort-by (fn [a] (.toLowerCase a)) \n                   (.split (.replaceAll s \"\\\\.|!\" \"\") \" \") )))", "problem": 70, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn [s]\n  (sort #(. % compareToIgnoreCase %2) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ee82539535d93acb0a66878"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"\\w+\" %))", "problem": 70, "user": "4ed0e139535d44c135fd68c7"}, {"code": "(fn [s]\n  (sort #(.compareToIgnoreCase %1 %2) (map #(apply str (remove #{\\! \\.} %)) (.split s \" \"))))", "problem": 70, "user": "4e513758535dc968683fc4f3"}, {"code": "#(sort-by (fn [w] (.toLowerCase w)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn p70 [s]\n  (let [words (seq(.split (.replaceAll s \"!|\\\\.\" \"\") \"\\\\s\"))]\n    (sort-by #(.toLowerCase %) words)))", "problem": 70, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn [x]\n  (sort #(.compareToIgnoreCase % %2) \n        (.split \n          (apply str (filter #(or (= % \\ ) \n                                  (Character/isLetter %))\n                             x)) \n                \" \")))", "problem": 70, "user": "4db091b7838c48654951d9c2"}, {"code": "#(sort-by (fn [c] (.toLowerCase c)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn [st]\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w{1,}\" st)))", "problem": 70, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn [s]\n  (let [words (re-seq #\"[A-Za-z]+\" s)]\n    (sort-by #(.toLowerCase %) words)))", "problem": 70, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(fn [s] (sort-by #(.toLowerCase %)\n                  (.split (.replaceAll s \"[^a-zA-Z ]\" \"\")\n                          \" \")))", "problem": 70, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn [my-s] (vec (apply sorted-set-by (fn [x y] (apply compare (map (fn [s] (apply str (map #(if (< (int %) 90) (char (+ (int %) 32)) %) s))) [x y]))) (re-seq #\"[a-zA-Z]+\" my-s))))", "problem": 70, "user": "4e8d5911535d65386fec2133"}, {"code": "#(sort-by (fn [w] (.toLowerCase w)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4ef77c82535dced4c769f253"}, {"code": "(fn [x] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" x)))", "problem": 70, "user": "4ef1ee67535dced4c769f219"}, {"code": "(fn word-sorting\n  [aStr]\n  (let [*alp #{\\, \\. \\!}\n        plStr (remove *alp (apply concat (partition-by *alp aStr)))\n        slStr (remove #{[\\space]} (partition-by #{\\space} plStr))\n        sortedStr (sort (fn [s1 s2]\n                      (compare (.toLowerCase s1) (.toLowerCase s2))) (map #(apply str %1) slStr))]\n    sortedStr))", "problem": 70, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "(fn [s]\n    (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn[s]\n (sort-by clojure.string/upper-case\n  (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn [s] (let [l? #(Character/isLetter %)] (->> s (partition-by l?) (filter (comp l? first)) (map #(apply str %)) (sort-by #(.toLowerCase %)))))", "problem": 70, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn [s]\n  (vals (sort (reduce #(assoc % (.toLowerCase %2) %2) \n     {} (re-seq #\"[a-zA-Z]+\" s)))))", "problem": 70, "user": "4ef992c8535dced4c769f268"}, {"code": "(fn [s] (sort #(.compareToIgnoreCase % %2) (.split #\"\\W\" s)))", "problem": 70, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4dd88803535d2dad7130b5d9"}, {"code": "(fn [t] \n  (sort #(compare (.toLowerCase %) (.toLowerCase %2)) \n        (re-seq #\"\\w+\" t)))", "problem": 70, "user": "4dbb1126535d1e037afb21b3"}, {"code": "(fn sort-word [xs]\n  (sort #(< (.compareTo (clojure.string/upper-case %1) (clojure.string/upper-case %2)) 0)\n        (clojure.contrib.string/split #\"[^a-zA-Z]+\" xs)))", "problem": 70, "user": "4ef6f5ea535dced4c769f250"}, {"code": "#(->> % (re-seq #\"[A-Za-z]+\") (sort-by (fn [s] (.toLowerCase s))))", "problem": 70, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn [c] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" c)))", "problem": 70, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (.split s \"[ .!]\")))", "problem": 70, "user": "4f030bb4535dcb61093f6a4a"}, {"code": "#(sort \n  (fn [s1 s2] (compare (.toLowerCase s1) (.toLowerCase s2)))\n  (clojure.string/split % #\"[\\s.!]\"))", "problem": 70, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn [s]\n  (map :orig (sort-by :lower (map \n\t\t(fn [x] {:orig x :lower (.toLowerCase x)})\n\t\t(re-seq #\"\\w+\" s)))))", "problem": 70, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "(fn [x] (let [s (->> x butlast (apply str)),\n  a (-> s (.split \" \")  seq),\n  m (apply conj (map hash-map (map #(.toLowerCase %) a) a)),\n  sk (seq (apply sorted-set (keys m))),\n  r (map #(get m %) sk)\n] r))", "problem": 70, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn [s] (sort-by #(clojure.string/lower-case %) (clojure.string/split s #\"[^a-zA-Z]\")))", "problem": 70, "user": "4f045946535dcb61093f6bba"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "#(sort-by (fn [s] (.toUpperCase s)) \n  (.split % \"[!. ]+\"))", "problem": 70, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn [s]\n  (let [w (re-seq #\"[a-zA-z]+\" s)\n        i (map second (sort (map-indexed #(vector (.toLowerCase %2) %) w)))]\n    (map (partial nth w) i)))", "problem": 70, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn [s] \n  (sort #(.compareToIgnoreCase % %2) (clojure.string/split s #\"[\\s\\.\\?\\!]\")))", "problem": 70, "user": "4efec33f535dcb61093f6a2a"}, {"code": "#(->> % (re-seq #\"\\w+\") (sort-by (memfn toLowerCase)))", "problem": 70, "user": "4db8f6c4535d1e037afb219e"}, {"code": "#(sort-by (fn [s] (.toLowerCase s)) (re-seq #\"\\w+\"  %))", "problem": 70, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "#(sort-by identity String/CASE_INSENSITIVE_ORDER (re-seq #\"[\\w]+\" %1))", "problem": 70, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn sort-words [ws]\n  (let [xs (map #(re-find #\"[a-zA-Z]+\" (apply str %))\n                (remove #(= '(\\space) %) (partition-by #(= \\space %) ws)))]\n    (sort-by clojure.string/lower-case compare xs)))", "problem": 70, "user": "4ee82ce9535d93acb0a6687a"}, {"code": "(fn [x] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" x)))", "problem": 70, "user": "4f0b2028535d0136e6c222ff"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f06dcad535dcb61093f6c16"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER\n       (clojure.string/split (clojure.string/replace % #\"[.!?,]\" \"\") #\"\\s+\"))", "problem": 70, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (map #(.replaceAll % \"[^a-zA-Z]\" \"\") (.split s \" \"))))", "problem": 70, "user": "4efb2fd7535dced4c769f274"}, {"code": "#(sort-by (fn [s] (.toLowerCase s)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn uno [l]\n  (let [ uno (.replaceAll l \"[\\\\!\\\\.]\" \"\")\n         dos (seq (.split  uno \"\\\\s+\"))]\n      (sort #(.compareToIgnoreCase %1 %2) dos)))", "problem": 70, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn [s]\n  (letfn [(strlt [a b]\n    (< (compare \n        (clojure.string/lower-case a)\n        (clojure.string/lower-case b))\n      0))]\n    (seq \n      (apply sorted-set-by strlt\n        (re-seq #\"\\w+\" s)))))", "problem": 70, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn [s] (sort-by #(clojure.string/lower-case %) (re-seq #\"[A-z]+\" s)))", "problem": 70, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "#(sort-by (fn [x] (.toUpperCase x)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f062d4a535dcb61093f6c08"}, {"code": "#(sort (fn[x y](compare (clojure.string/lower-case x)(clojure.string/lower-case y))) (clojure.string/split % #\"( |\\.|\\!)\"))", "problem": 70, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "(fn [s] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn [s]\n  (map second\n    (sort\n      (map\n        (fn [sss] (let [ss (clojure.string/replace sss #\"[.!,:]\" \"\")]\n                    [(clojure.string/lower-case ss) ss]))\n        (clojure.string/split s #\" \")))))", "problem": 70, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn [s] (sort #(.compareTo (.toLowerCase %1) (.toLowerCase %2)) (.split (.replaceAll s \"[^\\\\w ]+\" \"\") \" \")))", "problem": 70, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn word-sorting [s]\r\n    (sort-by #(.toUpperCase %) (map (fn [x] (clojure.string/replace x #\"\\.|\\,|\\!\" \"\")) (clojure.string/split s #\" \"))))", "problem": 70, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn [s]\n  (let [\n    words (fn [s] (.split s \"\\\\s+\"))\n    sort-key (fn [s] (.toLowerCase s))\n    strip-punctuation (fn [s] (.replaceAll s \"\\\\p{Punct}\" \"\"))\n   ]\n   (sort-by sort-key (words (strip-punctuation s)))))", "problem": 70, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn [s] (sort-by #(.toLowerCase %)  (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "(fn [str] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split str #\"\\W+\")))", "problem": 70, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "#(sort (comp (fn comp-ignore-case [s1 s2]\n     (compare (. s1 toLowerCase)\n\t\t    (. s2 toLowerCase)))) (re-seq #\"[\\w]+\" %))", "problem": 70, "user": "4f066916535dcb61093f6c10"}, {"code": "#(let [stripped (.replaceAll % \"[^a-zA-Z0-9 ]\" \"\")\n      v (vec (.split stripped \" \"))\n      cmp (fn [x y] \n        (compare (.toUpperCase x) (.toUpperCase y)))]\n  (sort cmp v))", "problem": 70, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn [string]\n  (sort #(compare (.toUpperCase %1) (.toUpperCase %2))\n    (vec (.split (.replace (.replace string \".\" \"\") \"!\" \"\" )\" \"))))", "problem": 70, "user": "4f12ab23535d64f603146429"}, {"code": "(fn ws [x]\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" x))\n)", "problem": 70, "user": "4ef0f1a1535dced4c769f212"}, {"code": "(fn [s]\n  (sort (fn [x y] (.compareToIgnoreCase x y))\n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "(fn [w] \n  (sort-by #(.toLowerCase %) \n  (re-seq #\"\\w+\" w)))", "problem": 70, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "(fn sort-ignore-case [string]\n  (let [words_collection (re-seq #\"[a-zA-Z]+\" string)]\n    (sort\n      (reify java.util.Comparator\n        (compare [this w1 w2] (.compareToIgnoreCase w1 w2)\n                 )\n        )\n      words_collection\n      )\n    )\n  )", "problem": 70, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(fn mysort [s]\n        (sort\n        #(compare (.toLowerCase %1) (.toLowerCase %2))\n             (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f128865535d64f603146428"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [string]\n  (loop [acc [] cur () x (first string) xs (rest string)]\n    (cond\n     (or (nil? x)\n         (= \\. x)\n         (= \\! x)) (vec (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n                          (conj acc (apply str (reverse cur)))))\n         (= \\space x) (recur (conj acc (apply str (reverse cur)))\n                             '() (first xs) (rest xs))\n         :else (recur acc (cons x cur) (first xs) (rest xs)))))", "problem": 70, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn [s]\r\n  (let [words (re-seq #\"\\w+\" s)]\r\n    (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) words)))", "problem": 70, "user": "4ee9d697535d93acb0a66895"}, {"code": "(fn [s]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n        (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4f04f847535dcb61093f6beb"}, {"code": "(fn\r\n[s]                                                                                                                                      \r\n    (sort-by #(clojure.string/lower-case %)                                                                                                   \r\n             (clojure.string/split (clojure.string/replace s #\"[^\\w\\s]\" \"\") #\"\\s+\")))", "problem": 70, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) \n           (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn [s] (sort-by #(.toUpperCase %) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4ef6e689535dced4c769f24f"}, {"code": "(fn [x] (sort-by #(.toLowerCase %) (.split (.replaceAll x \"[^a-zA-Z ]\" \"\") \" \")))", "problem": 70, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn [s]\n   (-> s\n       (clojure.string/replace #\"[\\.\\!\\,\\-\\_]\" \"\")\n       (clojure.string/split #\"\\s+\")\n       (->> (sort #(.compareToIgnoreCase %1 %2)))))", "problem": 70, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4ede361a535d10e5ff6f5332"}, {"code": "#(sort-by (memfn toUpperCase) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn [s]\n   (sort-by #(.toLowerCase %)\n            (map #(apply str %)\n                 (seq (.split (.replaceAll s \"\\\\p{P}\" \"\") \" \")))))", "problem": 70, "user": "4eb02674535d7eef30807338"}, {"code": "(fn [s] \n  (sort-by  \n    #(.toUpperCase %1) \n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn wsort [text]\n  (->> text\n       (re-seq #\"\\w+\")\n       (sort #(compare (.toLowerCase %1) (.toLowerCase %2)))))", "problem": 70, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn my-split [s]\r\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn [s] (sort (fn [a b] (.compareToIgnoreCase a b)) (filter #(not= \"\" %) (re-seq (re-pattern #\"[\\w]*\") s))))", "problem": 70, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn [s]\n  (let [words (.split s \"[\\\\p{P} \\\\t\\\\n\\\\r]\")]\n   (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n         words)))", "problem": 70, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn [a] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" a)))", "problem": 70, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn [string]\n  (sort-by #(clojure.string/lower-case %) (clojure.string/split string #\"[^A-Za-z]\")))", "problem": 70, "user": "4f294c48e4b0d6649770a023"}, {"code": "(fn [sentence]\n   (sort-by #(.toLowerCase %1)\n   (for\n       [x (partition-by #(or (= %1 \\space) (= %1 \\!) (= %1 \\.) ) (str sentence))\n        :when (not (or (= x '(\\space))  (= x '(\\!)) (= x '(\\.))\n                   )) ]\n     (apply str x) )\n   ))", "problem": 70, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn [s]\r\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "#(sort-by (fn [s] (.toLowerCase s)) (re-seq #\"[a-zA-Z]+\" %))", "problem": 70, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn [x]\n  (let [xs (re-seq #\"[a-zA-Z]+\" x)]\n    (sort (fn [a b] (apply compare (map #(.toLowerCase %) [a b]))) \n      xs)))", "problem": 70, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "4daf36c2edd6309eace4d175"}, {"code": "(fn ssort [s]\n  (sort-by #(.toLowerCase %1) \n    (for [w (seq (.split s \" \"))] (.replaceAll w \"[.,!]\" \"\") )))", "problem": 70, "user": "4f215350e4b0d66497709fd0"}, {"code": "(fn [x] \n  (sort-by \n    #(.toUpperCase %) \n      (re-seq #\"[A-Za-z]+\" x)))", "problem": 70, "user": "4f26c487e4b0d6649770a006"}, {"code": "(fn [s]\n  (sort\n   (fn [x y] (compare (clojure.string/lower-case x)\n                      (clojure.string/lower-case y)))\n   (map\n    #(-> %\n         (clojure.string/replace \".\" \"\")\n         (clojure.string/replace \"!\" \"\"))\n    (clojure.string/split s #\" \"))))", "problem": 70, "user": "4f31519ae4b0d6649770a086"}, {"code": "(fn word-sort [a]\n  (sort #(compare (.toLowerCase %) (.toLowerCase %2)) (re-seq #\"\\w+\" a)))", "problem": 70, "user": "4f04d312535dcb61093f6be7"}, {"code": "(fn [str]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" str)))", "problem": 70, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn sort-words [string]\n  (let [wordlist (.split string \"[\\\\s\\\\p{Punct}]+\")]\n    (sort-by #(.toUpperCase %) wordlist) ))", "problem": 70, "user": "4f2965ffe4b0d6649770a029"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split (clojure.string/replace s #\"(\\.|!)\" \"\")\n                                 #\" +\")))", "problem": 70, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s))\n)", "problem": 70, "user": "4f1595da535d64f603146444"}, {"code": "(fn [s]\n  (sort-by #(.toUpperCase %) (.split #\"\\W\" s)))", "problem": 70, "user": "4f1c2a3a535d64f603146480"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) \n              (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [s]\r\n  (sort-by #(.toLowerCase %) (seq (.split s \"[ .!]\"))))", "problem": 70, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "(fn word-sort [s]\n  (let [s (remove #(contains? #{\\. \\! \\?} %) s)]\n    (sort-by\n      #(.toLowerCase %)\n      (reduce\n        #(conj %1 (apply str %2))\n        []\n        (remove #(= '(\\space) %) (partition-by #(= % \\space) s))))))", "problem": 70, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [coll]\n  (map second\n    (sort-by first\n      (map (fn [x] [(. x toLowerCase) x]) \n         (seq (. coll split \"[^A-Za-z]\"))))))", "problem": 70, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn [s] \n  (sort-by (fn [x] (clojure.string/lower-case x)) \n           (clojure.string/split \n             (clojure.string/replace s #\"[!?.,]\" \" \") #\" \")\n))", "problem": 70, "user": "4f1d1299535d64f603146487"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n  (map #(re-find #\"[A-Za-z]+\" %)\n        (clojure.string/split s #\" \"))))", "problem": 70, "user": "4e6cf521535de274dd8d818b"}, {"code": "(fn [s]\n           (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn [s]\n  (sort (fn [a b] (compare (clojure.string/lower-case a) \n                            (clojure.string/lower-case b)))\n        (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "(fn [s]\n  (let [words\n        (map\n          (fn [s] (.replace (.replace s \".\" \"\") \"!\" \"\"))\n          (.split s \" \"))]\n\n    (sort-by (memfn toUpperCase) words)))", "problem": 70, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn [s]\r\n  (letfn [(letter? [c]\r\n            (or (<= (int \\A) (int c) (int \\Z))\r\n                (<= (int \\a) (int c) (int \\z))))\r\n          (tolower [c]\r\n            (if (<= (int \\A) (int c) (int \\Z))\r\n              (char (+ (int c) 32))\r\n              c))\r\n          (split-string [s]\r\n            (if (empty? s)\r\n              ()\r\n              (cons (apply str (take-while letter? s))\r\n                    (split-string\r\n                     (drop-while (comp not letter?)\r\n                                 (drop-while letter? s))))))\r\n          (string< [s1 s2]\r\n            (cond\r\n             (= s1 s2) false\r\n             (empty? s1) true\r\n             (empty? s2) false\r\n             (< (int (tolower (first s1))) (int (tolower (first s2)))) true\r\n             (= (tolower (first s1)) (tolower (first s2))) (recur (rest s1)\r\n                                                                  (rest s2))\r\n             :else false))]\r\n    (sort string< (split-string s))))", "problem": 70, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" %))", "problem": 70, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "(fn [coll]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" coll)))", "problem": 70, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn [input]\n  (sort \n    #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n    (clojure.string/split input #\"[\\s.!]\")))", "problem": 70, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "(fn [string]\n    (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" string)))", "problem": 70, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn [a] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" a)))", "problem": 70, "user": "4f13047d535d64f60314642c"}, {"code": "(fn [sentence]\n  (let [words (clojure.string/split sentence #\"[ .,!]\")]\n    (sort #(compare (.toLowerCase %1) \n                    (.toLowerCase %2)) words)))", "problem": 70, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (.split % \"[ \\\\.!]\"))", "problem": 70, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn sort-words\n  [sentence]\n  (sort-by #(clojure.string/lower-case %)\n           (re-seq #\"\\w+\" sentence)))", "problem": 70, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn sorted-words [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "4f542fd9e4b0a7574ea717db"}, {"code": "(fn sp\r\n  [s]\r\n  (sort #(> 0 (compare (.toLowerCase %1) (.toLowerCase %2))) (clojure.string/split (apply str (butlast s)) #\" \")))", "problem": 70, "user": "4f17ab99535d64f603146457"}, {"code": "(fn [seq]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"\\w+\" seq)))", "problem": 70, "user": "4f4ff5a8e4b03ad3f0c10cf3"}, {"code": "(fn [s]\n  (let [ss (re-seq #\"[a-zA-Z]+\" s)]\n    (sort-by #(.toUpperCase %) ss)))", "problem": 70, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn [s]\r\n    (map first (sort-by second (map #(vector % (.toLowerCase %)) (.split s \"[^a-zA-Z0-9]+\")))))", "problem": 70, "user": "4f047177535dcb61093f6bc6"}, {"code": "#(->> % (re-seq #\"\\w+\") (sort String/CASE_INSENSITIVE_ORDER))", "problem": 70, "user": "4e58c019535d8a8b8723a297"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn [s]\n    (let [w (sort (clojure.string/split (apply str (re-seq #\"[A-Za-z ]\" s)) #\" \"))\n          l (map clojure.string/lower-case w)\n          m (zipmap l w)]\n      (for [ss (sort l)] (m ss))))", "problem": 70, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "#(sort-by clojure.string/upper-case (re-seq #\"[a-zA-Z]+\" %))", "problem": 70, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn [x] (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" x)))", "problem": 70, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn [s]\n  (->> (.split s \"[^\\\\w]+\")\n       (filter seq)\n       (map #(apply str %))\n       (sort-by #(.toLowerCase %))))", "problem": 70, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn [s]\n  (sort\n    (fn [a b]\n      (compare (.toLowerCase a) (.toLowerCase b)))\n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) \n    (vec (.split \n           (apply str (filter #(or (Character/isLetter %) (= \\ %)) s))\n           \" \"))))", "problem": 70, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [x] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" x)))", "problem": 70, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "#(sort-by (memfn toUpperCase)  (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f504739e4b03ad3f0c10d00"}, {"code": "(fn [s]\n  (sort-by (memfn toLowerCase) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn [in] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" in)))", "problem": 70, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn [c]\n  (sort #(compare (.toLowerCase %) (.toLowerCase %2)) (re-seq #\"\\w+\" c)))", "problem": 70, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn [string]\n  (let [words (clojure.string/split string #\" \")\n        filtered (map\n          (fn [w] (apply str (filter \n            #(Character/isLetter %) w))) words)\n        pairs (map \n                (fn [w] [(clojure.string/lower-case w) w])\n                filtered)\n        m (into (sorted-map) pairs)]\n    (vals m)))", "problem": 70, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn wd [s]\n (sort\n  #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))   \n  (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn [s]                                                       \n  (->> (seq s)                                                            \n       (partition-by #(not (Character/isLetter %)))                       \n       (map #(apply str %))                                               \n       (sort-by #(.toLowerCase %))                                        \n       (filter #(re-seq #\"\\w\" %))))", "problem": 70, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n(re-seq #\"[^ !.]+\" s)))", "problem": 70, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n    (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"\\w+\" %))", "problem": 70, "user": "4eccb190535d23f0362276fe"}, {"code": "(fn [st]\n  (let [mycmp (fn [a b] (compare (.toLowerCase a) (.toLowerCase b)))]\n    (sort mycmp (clojure.string/split st #\"[\\s\\[!?.]\"))))", "problem": 70, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn [s]\n    (sort\n     (fn [x y]\n       (compare (.toUpperCase x)\n                (.toUpperCase y)))\n     (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn [coll]\r\n  (filter #(not= \" \" %) (sort-by #(.toUpperCase %)(map #(apply str %)(partition-by #(not= \\space %) (butlast coll))))))", "problem": 70, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn wordSort [words]  \r\n  (vec (sort  \r\n      (fn[a b]\r\n         (let [s1 (.toLowerCase a),\r\n                        s2 (.toLowerCase b)]\r\n                    (if (. s1 equals s2)        \r\n\t                         0\r\n                          (. s1 compareTo s2)\r\n                     )\r\n                  )\r\n         )\r\n    (re-seq #\"\\w+\" words)\r\n  )\r\n )\r\n)", "problem": 70, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "#(vec (sort-by (fn [s] (.toLowerCase s)) (map (fn [s] (apply str (filter (fn [c] (Character/isLetter c)) s))) (clojure.string/split % #\" \"))))", "problem": 70, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn [s]\n  (sort #(.compareToIgnoreCase %1 %2) \n        (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn [s]\n  (sort #(.compareTo (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f713878e4b07046d9f4f00a"}, {"code": "(fn f [s]\n  (let [fpunc #(->> % seq (filter (fn [x] (not (or (= \\! x) (= \\. x))))) (apply str))\n        lower-case (map fpunc (.split s \" \"))\n        send-lc #(->> % seq (map (fn [x] (java.lang.Character/toLowerCase x))) (apply str))\n        lc-map (zipmap (map send-lc lower-case) lower-case)]\n    (vec (vals (into (sorted-map) lc-map)))))", "problem": 70, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn [s] (sort-by #(.toLowerCase %)\n    (re-seq #\"\\w+\" s) ))", "problem": 70, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %1))", "problem": 70, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (clojure.string/split s #\"[\\s.!]\")))", "problem": 70, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn [s]\r\n    (->> s \r\n         (re-seq #\"\\w+\")\r\n         (sort #(.compareToIgnoreCase %1 %2))\r\n      ))", "problem": 70, "user": "4f0da4e4535d0136e6c22319"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn [s]\n  (sort \n    #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2))\n    (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "(fn [s]\n   (sort (fn [a b] (compare (clojure.string/upper-case a) (clojure.string/upper-case b))) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn [s]\n  (sort-by\n    #(.toLowerCase %)\n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn arp[st]\n  (let [list-o-words\n    (clojure.string/split \n      (apply str \n        (re-seq #\"[a-zA-Z\\s]\" st)\n      )\n      #\"\\s\"\n    )\n        list-o-keys\n        (clojure.string/split \n      (apply str \n        (re-seq #\"[a-zA-Z\\s]\" \n          (clojure.string/lower-case st)\n        )\n      )\n      #\"\\s\"\n        )\n      ]\n    (vals (sort-by key (zipmap list-o-keys list-o-words)))\n  )\n)", "problem": 70, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn [coll] \n  (sort #(compare (.toLowerCase %1) \n                  (.toLowerCase %2))\n        (re-seq #\"[A-Za-z]+\" coll)))", "problem": 70, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "#(->> (re-seq #\"[A-Za-z]+\" %) (sort-by (fn [s] (.toLowerCase s))))", "problem": 70, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn [x]\n  (let [srs (fn [u]\n     (loop [xx u\n         nu 0\n         k  1]\n         (if (> k 1000000)\n           nu\n         (recur \n             (rest xx) \n             (+ (* nu k)(int (or (first xx) 0)))\n             (* k 10)))))]\n    (sort-by \n       #(srs (clojure.string/lower-case %)) \n       (clojure.string/split x #\"[\\s+|.|!]\"))))", "problem": 70, "user": "4f891abde4b033992c121c77"}, {"code": "(fn [s]\n  (sort #(compare (.toUpperCase %1) (.toUpperCase %2)) \n         (.split (clojure.string/replace s #\"[.!]\" \"\") \" \")))", "problem": 70, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [x] (sort-by (fn [#^String y] (.toLowerCase y)) (re-seq #\"\\w+\" x)))", "problem": 70, "user": "4f7e07f4e4b06e829148e1c9"}, {"code": "(fn [t] (->> (re-seq #\"\\w+\" t)\n                    (sort-by #(.toLowerCase %))))", "problem": 70, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "(fn [sentence]\n  (->> sentence\n    (re-seq #\"\\w+\")\n    (sort-by #(.toLowerCase %))))", "problem": 70, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn  [s]  (sort-by #(.toLowerCase %1) (re-seq #\"\\w+\" s) )  )", "problem": 70, "user": "4f4be1cae4b03ad3f0c10c81"}, {"code": "(fn [s]\n  (sort \n    #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n    (re-seq #\"\\w+\" s)\n  )\n)", "problem": 70, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn [s]\r\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f50be5de4b03ad3f0c10d0c"}, {"code": "#(sort-by (memfn toLowerCase) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn [s] \n   (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fa2fa5ee4b081705acca186"}, {"code": "(comp (partial sort-by clojure.string/lower-case)\n      (partial re-seq #\"\\w+\"))", "problem": 70, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (.split s \"\\\\W\")))", "problem": 70, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn [s]\n  (->> s\n    (re-seq #\"[a-zA-Z]+\")\n    (sort-by clojure.string/lower-case)))", "problem": 70, "user": "4fa3f91fe4b081705acca196"}, {"code": "(comp (partial sort-by clojure.string/lower-case)\n      #(clojure.string/split % #\"\\W\"))", "problem": 70, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn [s] (sort #(compare (.toUpperCase %1) (.toUpperCase %2)) (vec (.split s \"\\\\W+\"))))", "problem": 70, "user": "4efd8b67535de96065cf5085"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ef48422535dced4c769f236"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fa98b72e4b081705acca1e2"}, {"code": "(fn [s]\r\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f500769e4b03ad3f0c10cf8"}, {"code": "(fn [s]\r\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4faa3eeae4b081705acca1ed"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4faa8de0e4b081705acca1f8"}, {"code": "#(sort-by (fn [s] (.toUpperCase s)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f82e14be4b033992c121c0c"}, {"code": "#(sort-by clojure.string/lower-case \n  (clojure.string/split\n    (apply str (remove (fn [c] (#{\\. \\!} c)) %))\n    #\"\\s\"))", "problem": 70, "user": "4faa9593e4b081705acca1f9"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn foo [s]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn [t] (sort \n  #(compare \n    (.toLowerCase %) \n    (.toLowerCase %2))\n  (.split t \"[ .!]\")))", "problem": 70, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [s] (sort String/CASE_INSENSITIVE_ORDER (clojure.string/split (apply str (butlast (seq s))) #\" \")))", "problem": 70, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4faf6f1ae4b081705acca255"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn sorted-split [sent]\n  (let [words (clojure.string/split sent #\"[^A-Za-z]\")]\n   (sort-by #(.toLowerCase %) words)))", "problem": 70, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn app [s]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn [sent]\n  (->> sent \t\t\n\t\t(re-seq #\"\\w+\")\n\t\t(sort-by clojure.string/lower-case)))", "problem": 70, "user": "4fb1fa51e4b081705acca283"}, {"code": "#(sort-by clojure.string/capitalize (clojure.string/split (clojure.string/join (butlast %)) #\"\\s\"))", "problem": 70, "user": "4facff22e4b081705acca230"}, {"code": "(fn [s]\n  (reduce\n    (fn [v w]\n      (let\n        [[a b] (split-with #(not (pos? (compare (.toUpperCase %) (.toUpperCase w)))) v)]\n        (into (conj (vec a) w) b)))\n    []\n    (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[^a-zA-Z]\"))", "problem": 70, "user": "4dbbdf86535d3f4042261ece"}, {"code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn [s] \n  (sort-by #(.toLowerCase %) \n    (into () (.split (.replaceAll s \"[!\\\\.]\" \"\") \" \"))))", "problem": 70, "user": "4fa30027e4b081705acca187"}, {"code": "(fn [string]\n    (sort String/CASE_INSENSITIVE_ORDER \n          (filter not-empty (.split string \"[ \\\\p{Punct}]\"))))", "problem": 70, "user": "4f17aa97535d64f603146456"}, {"code": "(fn sort-str [s] \n   (let [new-s (.replaceAll s \"[^\\\\s\\\\w]\" \"\")]\n   (sort \n      (fn [x y] (compare (.toLowerCase x) (.toLowerCase y)) )\n      (.split new-s \" \")\n   )   \n   )   \n)", "problem": 70, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn [in]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n  (clojure.string/split (clojure.string/replace in #\"[!.]\" \"\") #\"\\s+\")))", "problem": 70, "user": "4faec810e4b081705acca24e"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "(comp\n  (partial sort-by clojure.string/lower-case)\n  (partial re-seq #\"\\w+\"))", "problem": 70, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn [s]\n  (->> s\n    (partition-by #(Character/isLetter %))\n    (filter (fn [w] (every? #(Character/isLetter %) w)))\n    (map #(apply str %))\n    (sort-by #(.toLowerCase %))\n  ))", "problem": 70, "user": "4f1bb9d8535d64f60314647d"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4ee85476535d93acb0a6687c"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f3976aee4b0e243712b1eea"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fb3b865e4b081705acca2a2"}, {"code": "#(sort-by (comp clojure.string/lower-case)\n  (clojure.string/split \n    (clojure.string/replace\n          (clojure.string/replace\n    %\n      #\"\\.\" \"\")\n      #\"\\!\" \"\")\n      #\" \")\n    )", "problem": 70, "user": "4f2004a1535d64f6031464a7"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn f [str]\n  (sort\n      #(compare (.toLowerCase %1) (.toLowerCase %2)) \n      (re-seq #\"\\w+\" str)))", "problem": 70, "user": "4f3242bae4b0d6649770a08f"}, {"code": "(fn [x] \n  (vec (sort-by (fn [y] (.toLowerCase y)) (re-seq #\"[a-zA-Z]+\" x))))", "problem": 70, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn word-sort [s]\n  (sort-by clojure.string/lower-case (clojure.string/split s #\"[^\\w]\")))", "problem": 70, "user": "4faafccde4b081705acca209"}, {"code": "(fn [s]\n  (sort\n    #(compare (.toLowerCase %1) (.toLowerCase %2))\n    (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn my-thing [s]\n  (cond\n    (= s \"Have a nice day.\") [\"a\" \"day\" \"Have\" \"nice\"]\n    (= s \"Clojure is a fun language!\") [\"a\" \"Clojure\" \"fun\" \"is\" \"language\"]\n    (= s \"Fools fall for foolish follies.\") [\"fall\" \"follies\" \"foolish\" \"Fools\" \"for\"]\n  )\n)", "problem": 70, "user": "4faacc04e4b081705acca201"}, {"code": "(fn [x] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" x)))", "problem": 70, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn [s] (sort #(compare\n                (clojure.string/lower-case %1)\n                (clojure.string/lower-case %2))\n              (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fadbb17e4b081705acca23e"}, {"code": "(fn [s]\n  (sort-by\n    #(.toLowerCase %)\n    (clojure.string/split\n      s\n      #\"[^a-zA-Z]+\")))", "problem": 70, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn [str] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" str)))", "problem": 70, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn word-sort [sentence]\n  (let [punct #{\\. \\!}\n        rem-punct (partial filter (fn [x] (not (punct x))))\n        r-str     (comp (partial apply str) rem-punct)\n        key-fn    (fn [s] (.toLowerCase s))]\n    (sort-by key-fn (map r-str (.split sentence \" \")))))", "problem": 70, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn [str]\n    (sort #(compare (.toUpperCase %1) (.toUpperCase %2)) (.split str \"[\\\\s\\\\.!]\"))\n  )", "problem": 70, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "#(sort-by (fn[a](.toLowerCase a))  (clojure.string/split (clojure.string/replace % #\"!|\\.\" \"\") #\" \"))", "problem": 70, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "#(sort-by\n  clojure.string/lower-case\n  (re-seq #\"\\w+\" %))", "problem": 70, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn [xs]                                                                                                               \n    (sort-by clojure.string/lower-case (clojure.string/split xs #\"[ !?.]\")))", "problem": 70, "user": "4fa6a491e4b081705acca1bc"}, {"code": "#(sort-by clojure.string/lower-case \n  (clojure.string/split % #\" |\\.|\\!\"))", "problem": 70, "user": "4faac363e4b081705acca200"}, {"code": "(fn [s] (into [] (sort-by clojure.string/lower-case (re-seq  #\"\\w+\" s))))", "problem": 70, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn sort-sentence--regex\n  [s] {:pre [(string? s)]}\n  (->> s                                                 ; \"I am string.\"\n       (#(clojure.string/split % #\"\\s+\"))                ; [\"I\" \"am\" \"string.\"]\n       (map #(clojure.string/replace % #\"\\p{Punct}\" \"\")) ; (\"I\" \"am\" \"string\")\n       (sort-by clojure.string/lower-case)))             ; (\"am\" \"I\" \"string\")", "problem": 70, "user": "4fc6305de4b0ee37620e180b"}, {"code": "(fn [coll]\n  (let [words (.split (.replaceAll coll \"[.!]\" \"\") \" \")]\n    (sort-by identity String/CASE_INSENSITIVE_ORDER words)))", "problem": 70, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [instr]\n  (sort-by #(.toLowerCase %) (.split (.replaceAll instr \"[\\\\.\\\\!]\" \"\")  \" \")))", "problem": 70, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn [ s ] \n  ( sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"[\\w]+\" s) ))", "problem": 70, "user": "4fc43a8ee4b081705acca346"}, {"code": "#( ->> %\n      (re-seq #\"\\w+\")\n      (sort-by clojure.string/lower-case))", "problem": 70, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [s] \n  (sort-by #(clojure.string/lower-case %) \n    (clojure.string/split (clojure.string/escape s {\\. \"\" \\! \"\"}) #\"\\s\")))", "problem": 70, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(fn sort-words\n  [s]\n  (sort (fn compare-letters\n  [x y]\n  (let [x (map int (clojure.string/upper-case x))\n        y (map int (clojure.string/upper-case y))]\n    (loop [x x y y]\n      (cond\n       (empty? y) true\n       (empty? x) false\n       (< (first x) (first y)) true\n       (> (first x) (first y)) false\n       :else (recur (rest x) (rest y)))))) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "(fn [s]\n  (sort-by\n    #(.toUpperCase %)\n    (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn [sentence]\n  (sort-by\n      #(.toUpperCase %)\n      (re-seq #\"\\w+\" sentence)))", "problem": 70, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn [x] (sort-by #(.toUpperCase %) \n     (clojure.string/split x #\"[\\s\\\\\\.!]\" )))", "problem": 70, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "#(sort-by clojure.string/lower-case\n  (clojure.string/split % #\"\\W+\"))", "problem": 70, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split (apply str (remove #{\\. \\!} %)) #\" \"))", "problem": 70, "user": "4fd91099e4b05e33b9224f32"}, {"code": "(fn [x]\r\n   (sort-by \r\n     #(. % toLowerCase) (. x split \"[ \\\\p{Punct}]\")))", "problem": 70, "user": "4f82ed48e4b033992c121c0e"}, {"code": "(fn[s] (into [] (sort #(compare (.toLowerCase  %1) (.toLowerCase  %2)) (.. s (replaceAll \"\\\\p{Punct}\" \"\") (split \" \")))))", "problem": 70, "user": "4f148418535d64f60314643a"}, {"code": "(fn ws [s]\r\n   (sort #(.compareToIgnoreCase %1 %2) (re-seq #\"[a-zA-z]+\" s)))", "problem": 70, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "#(let [words (clojure.string/split % #\"\\W\")]\n  (sort-by clojure.string/upper-case words)\n)", "problem": 70, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn my-sort [^String s]\n  (sort\n   (fn [^String s1 ^String s2]\n     (< (.compareToIgnoreCase s1 s2) 1))\n   (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dae99ccedd6309eace4d158"}, {"code": "(fn word-sorting [s]\n  (sort-by #(.toLowerCase %1) (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "#(sort-by clojure.string/lower-case\n          (re-seq #\"\\w+\" %))", "problem": 70, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn word-sort [text]\n  (sort \n     #(compare \n     (clojure.string/lower-case %1) \n     (clojure.string/lower-case %2))\n   (clojure.string/split text #\"\\W\")))", "problem": 70, "user": "4f8490fae4b033992c121c34"}, {"code": "(fn zort [in]\n  (let [lower clojure.string/lower-case\n        clean-in (clojure.string/replace in #\"[!\\.]\" \"\")\n        words (clojure.string/split clean-in #\"\\s\")]\n    (sort-by identity #(compare (lower %1) (lower %2)) words)))", "problem": 70, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "(fn [s]\r\n  (sort #(.compareToIgnoreCase % %2)\r\n        (clojure.string/split\r\n          (apply str (remove #{\\. \\!} s)) #\"\\s+\")))", "problem": 70, "user": "4fb37882e4b081705acca2a0"}, {"code": "#(into [] (apply sorted-set-by \r\n  (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b)))\r\n(re-seq #\"\\w+\" %)))", "problem": 70, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn ws [s]\n  (let [words (clojure.string/split s #\"[\\s.!,]+\")] \n      (sort-by clojure.string/lower-case words)))", "problem": 70, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn [s] (sort-by #(clojure.string/lower-case %) (clojure.string/split s #\"[^a-zA-Z]\")))", "problem": 70, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn [s] (sort #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2)) (clojure.string/split (clojure.string/replace s #\"[^\\w\\s]\" \"\") #\"\\s\")))", "problem": 70, "user": "4fefd624e4b0678c553fc31b"}, {"code": "(fn [s]\r\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ff07688e4b0678c553fc324"}, {"code": "(fn [s]\n    (sort-by \n      (memfn toUpperCase) \n      compare\n      (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "#(sort-by\n  clojure.string/lower-case\n  (clojure.string/split % #\"[^\\w]+\"))", "problem": 70, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "#(sort-by clojure.string/lower-case compare (clojure.string/split % #\"[\\s\\.\\!]+\"))", "problem": 70, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn [s]\n  (into []\n    (apply sorted-set-by\n      #(compare (.toUpperCase %1) (.toUpperCase %2))\n      (.split (.replaceAll s \"[^a-zA-Z ]\" \"\") \" \"))))", "problem": 70, "user": "4fb510b5e4b081705acca2b8"}, {"code": "(fn [s](sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ebbb6bc535dfed6da9c6d71"}, {"code": "(fn [s] (sort #(.compareToIgnoreCase %1 %2) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(comp\n  (partial sort-by #(.toLowerCase %))\n  (partial re-seq #\"\\w+\"))", "problem": 70, "user": "4ff63f3fe4b0678c553fc377"}, {"code": "(fn [s]\n  (sort-by\n    #(.toLowerCase %)\n    (.split s \"[ .!]\")))", "problem": 70, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "#(sort-by clojure.string/lower-case\r\n          (re-seq #\"\\w+\" %))", "problem": 70, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn [s]\n  (->> s\n    (re-seq #\"\\w+\")\n    (sort-by #(.toUpperCase %))))", "problem": 70, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn [s] (sort #(.compareToIgnoreCase %1 %2) (.split (.replaceAll  s \"[.!]*\" \"\") \" \")))", "problem": 70, "user": "4db016af838c48654951d9b9"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"[^ !.]+\" s)))", "problem": 70, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "#(sort-by \n  (fn [str] (.toLowerCase str))\n    (.split % \"\\\\W\"))", "problem": 70, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "(fn [s]\r\n  (sort \r\n      #(compare (.toLowerCase %) (.toLowerCase %2))\r\n  (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split (#(clojure.string/replace % #\"[.,!]\"  \"\") s) #\" \")))", "problem": 70, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(fn wsort [s]\n    (sort-by clojure.string/lower-case\n             (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (clojure.string/split s #\"[\\.! ]\")))", "problem": 70, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "(fn [s] \n  (sort-by #(.toLowerCase %) \n          (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn [a] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" a)))", "problem": 70, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn [s]\n    (sort\n        #(compare (clojure.string/upper-case %1)\n                  (clojure.string/upper-case %2))\n        (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [sentence]\n  (sort-by clojure.string/lower-case\n    (clojure.string/split sentence #\"\\s|\\W\")))", "problem": 70, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "#(sort-by clojure.string/lower-case\r\n  \t\t(re-seq #\"\\w+\" %))", "problem": 70, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n  (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ffa213ee4b0678c553fc3b7"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(comp (partial sort-by clojure.string/lower-case) (partial re-seq #\"\\w+\"))", "problem": 70, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn ws [phrase]\n  (let [sort-by-word #(sort-by clojure.string/lower-case %)\n        split #(clojure.string/split % #\"\\W+\")]\n    (sort-by-word (split phrase))))", "problem": 70, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn sort-string [s]\n    (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n          (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn [str] (sort-by #(.toLowerCase %)  (clojure.string/split str #\"\\!|\\.|\\s\")))", "problem": 70, "user": "4e86d3cf535dceadca46984c"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn split-sort [string]\n  (letfn [(lower-case [s]\n            ((fn [acc s]\n               (if (empty? s)\n                 acc\n                 (let [letter (first s)\n                       val (int letter)]\n                   (if (>= val (int \\a))\n                     (recur (str acc (str letter)) (rest s))\n                     (recur (str acc (str (char (+ val 32)))) (rest s))))))\n             \"\" s))\n          (append-if-alpha [s letter]\n            (if (re-find #\"([A-Z]|[a-z])\" (str letter))\n              (str s letter)\n              (str s)))\n          (split-on-space [acc word s]\n            (if (empty? s)\n              (if (empty? word)\n                acc\n                (conj acc word))\n              (if (= (first s) \\space)\n                (recur (conj acc word) (str \"\") (rest s))\n                (recur acc (append-if-alpha word (first s)) (rest s)))))]\n    (sort #(compare (lower-case %1) (lower-case %2))\n          (split-on-space [] \"\" string))))", "problem": 70, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn [s] (sort #(.compareToIgnoreCase % %2)\r\n          (map #(clojure.string/replace % #\"[-\\W]+\" \"\" )\r\n               (.split #\" \" s))))", "problem": 70, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "(fn [s]\n  (let [words (clojure.string/split s #\" \")\n        stripped (map #(first (re-seq #\"[^\\p{Punct}]+\" %)) words)]\n    (sort-by #(.toLowerCase %) stripped)))", "problem": 70, "user": "500ff421e4b0ae202717946f"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "500e91aae4b00fff93030f99"}, {"code": "(fn [x] (sort (fn [l r] (compare (clojure.string/lower-case l) (clojure.string/lower-case r)))(re-seq #\"\\w+\" x)))", "problem": 70, "user": "4fda8f57e4b05e33b9224f4e"}, {"code": "(fn [s]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n        (clojure.string/split s #\"[\\s\\W]+\")))", "problem": 70, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn [x] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" x)))", "problem": 70, "user": "5014718fe4b094324338f8e3"}, {"code": "(fn __ [x]\n  (let [cm \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVxXyYzZ\"\n        clean (fn [w]\n                (apply str (filter (fn [v]\n                                     (some #(= % v) cm)) w)))]\n       (map second\n            (sort (fn [[nw1 ow1] [nw2 ow2]]\n                    (= (first (sort [nw1 nw2])) nw1))\n                  (map (fn [w]\n                         (let [nw (clojure.string/lower-case\n                                   (clean w))]\n                              [nw (clean w)]))\n                       (clojure.string/split x #\"\\s\"))))))", "problem": 70, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn [s]\r\n  (sort #(.compareTo (.toLowerCase %1) (.toLowerCase %2))\r\n    (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn\r\n    [s]\r\n    (let [ws (clojure.string/split s #\"\\W+\")]\r\n         (-> (sorted-set-by String/CASE_INSENSITIVE_ORDER)\r\n  \t\t (into ws)\r\n             seq)))", "problem": 70, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5007f751e4b0b17c647f522b"}, {"code": "(fn [text]\n   (map :o (sort-by :u (map #(hash-map :o % :u (.toUpperCase %)) (re-seq #\"[a-zA-Z]+\" text)))))", "problem": 70, "user": "500ea957e4b00fff93030f9b"}, {"code": "(fn[s](sort \n    #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5017eface4b02f523d7cc5e7"}, {"code": "(fn [s]\n  (sort-by\n    clojure.string/lower-case\n    (clojure.string/split\n      (clojure.string/replace s #\"\\W\" \" \") #\"\\s+\")))", "problem": 70, "user": "501284d9e4b030d97e4db710"}, {"code": "#(sort-by\n  (fn [w] (clojure.string/lower-case w))\n  (re-seq #\"\\w+\" %))", "problem": 70, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50166470e4b052339a490e76"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50142490e4b07d18bdaaf70a"}, {"code": "(fn [sentence] \n  (sort \n    #(compare (.toLowerCase %1) (.toLowerCase %2)) \n    (re-seq #\"[a-z|A-Z]+\" sentence))\n)", "problem": 70, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn [s]\r\n  (sort-by #(.toLowerCase %) \r\n           (.split (.replaceAll s \"[!|.|,]\" \"\") \" \")))", "problem": 70, "user": "4fd8544be4b0dab7d829f390"}, {"code": "#(sort-by clojure.string/capitalize (re-seq #\"\\w+\" %))", "problem": 70, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[a-z,A-Z]+\" s)))", "problem": 70, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn [s] (sort-by clojure.string/lower-case\n                   (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "4fe8a3bde4b07c9f6fd12c61"}, {"code": "(fn [s] \n  (sort \n    #(compare \n      (.toUpperCase %1) \n      (.toUpperCase %2)) \n    (clojure.string/split s #\"[\\s.!,]+\")))", "problem": 70, "user": "501c1492e4b086d93747d180"}, {"code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn wordsort [words]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) \n  (re-seq #\"[A-Za-z0-9]+\" words)))", "problem": 70, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn [s] \n  (sort-by \n    #(.toLowerCase %) \n    (clojure.string/split s #\"[\\s.!]+\")))", "problem": 70, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn srt [str]\n(sort #(compare (.toLowerCase %) \n(.toLowerCase %2)) \n(re-seq #\"\\w+\"  str)))", "problem": 70, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn [x] \n  (sort-by #(.toLowerCase %) \n    (.split (.replaceAll x \"\\\\.|!\" \"\") \" \")))", "problem": 70, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn [x] (sort-by #( .toLowerCase %)  (re-seq #\"\\w+\" x)))", "problem": 70, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn [s]\n  (sort #(.compareToIgnoreCase % %2) \n    (clojure.string/split \n      (clojure.string/replace s #\"([\\.!])\" \"\") \n        #\"\\s\")))", "problem": 70, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "#(seq (apply (partial sorted-set-by (fn [a b]\n                                       (compare (clojure.string/lower-case a)\n                                                 (clojure.string/lower-case b))))\n              (re-seq #\"\\b\\w+\\b\" %)))", "problem": 70, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"[^.!\\s]+\" %))", "problem": 70, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn [s]\r\n  (sort-by clojure.string/upper-case (clojure.string/split s #\"[\\s.!]+\")))", "problem": 70, "user": "5028bce0e4b01614d1633ffb"}, {"code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\"[\\s.!]\"))", "problem": 70, "user": "502a5e59e4b09e8f859a9fbc"}, {"code": "(fn [a] (sort #(.compareToIgnoreCase % %2) (clojure.string/split a #\"[\\W]+\")))", "problem": 70, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn __ [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fa719c0e4b081705acca1bf"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn [st]\n  (sort-by\n    #(clojure.string/upper-case %)\n    (clojure.string/split st (re-pattern \"[^A-Za-z]\"))))", "problem": 70, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn [i] (sort #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2)) (clojure.string/split i #\"[^a-zA-Z]\")))", "problem": 70, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "(fn [x]\n  (sort-by #(.toLowerCase %) (clojure.string/split (apply str (remove #{\\! \\. \\,} x)) #\" \")))", "problem": 70, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [s] \n  (sort-by #(.toUpperCase %) \n   (->> s \n    (partition-by #(= \\space %) )\n    (map (partial filter #(. Character isLetter %) ))\n    (remove empty?)\n    (map #(apply str %)))))", "problem": 70, "user": "503917a0e4b088a6a14ca763"}, {"code": "(fn [s] (sort \n  #(compare (.toLowerCase %) (.toLowerCase %2))\n(clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn [s]\n  (sort-by\n    #(.toUpperCase %)\n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn [s] \n  (sort-by #(.toLowerCase %)\n           (clojure.string/split s #\"[ .!]\")))", "problem": 70, "user": "4e8768f6535dceadca469850"}, {"code": "(fn [str-value]\n   (map\n    (fn [val] (second (re-matches #\"(\\w+).*\" val)))\n    (sort-by\n     (fn [key] (clojure.string/lower-case key))\n     (clojure.string/split str-value #\"\\s\"))))", "problem": 70, "user": "4f03818e535dcb61093f6b00"}, {"code": "(fn [str] \n  (sort \n    #(apply compare (map clojure.string/lower-case %&)) \n    (clojure.string/split str #\"[^\\w+]\")))", "problem": 70, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "(fn [s] \n  (sort-by #(.toLowerCase %) \n           (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn [a] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" a)))", "problem": 70, "user": "4e944706535dbda64a6f6b11"}, {"code": "(fn [coll] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" coll)))", "problem": 70, "user": "5036dea0e4b0af0658af77a4"}, {"code": "(fn [s] \n  (sort \n  #(compare (clojure.string/lower-case %1) \n            (clojure.string/lower-case %2)) \n       (clojure.string/split (clojure.string/replace s #\"[.!]\" \"\") #\" \")))", "problem": 70, "user": "5032b398e4b00c0952a257eb"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "5032b066e4b00c0952a257ea"}, {"code": "#(vals (sort (apply hash-map (interleave\r\n  (re-seq #\"\\w+\" (.toLowerCase %))\r\n  (re-seq #\"\\w+\" %)))))", "problem": 70, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn [str] (sort-by #(.toLowerCase %)\r\n(clojure.string/split  str #\"[^a-zA-Z]+\")))", "problem": 70, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn [str]\n  (sort String/CASE_INSENSITIVE_ORDER \n    (re-seq #\"[a-zA-Z]+\" str)))", "problem": 70, "user": "5014754de4b094324338f8e5"}, {"code": "(fn [s] \n  (sort \n    #(.compareToIgnoreCase %1 %2)\n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "(fn [s]\n          (sort\n           #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2))\n           (re-seq #\"\\w+\" s)))", "problem": 70, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn [str]\n  (sort-by #(.toLowerCase %)\n    (clojure.string/split str #\"\\W+\")))", "problem": 70, "user": "5012ec0ae4b0c87326002230"}, {"code": "(fn [w]\n  (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" w)))", "problem": 70, "user": "50435852e4b034ff00315d22"}, {"code": "(fn [l]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" l)))", "problem": 70, "user": "50232eeae4b0b5d8b1bd2397"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "(fn s[x] \n  (let [t (clojure.string/split x #\"\\s+\"),\n        s (map #(clojure.string/replace % #\"\\W\" \"\") t)]    \n    (sort (fn [s1 s2] \n      (compare (.toUpperCase s1) (.toUpperCase s2))) s)))", "problem": 70, "user": "500b61b1e4b03d00572d2d81"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"\\w+\" %))", "problem": 70, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "(fn [xs]\n  (let [s #{\\. \\space \\!}]\n    (->> (partition-by #(s %) xs)\n      (filter #(not (s (first %))))\n      (map #(apply str%))\n      (sort #(.compareToIgnoreCase % %2)))))", "problem": 70, "user": "50479524e4b0371827a27bc4"}, {"code": "#(sort-by clojure.string/lower-case (filter (comp not clojure.string/blank?) (re-seq #\"\\w*\" %)))", "problem": 70, "user": "5046b003e4b011c5dfee7727"}, {"code": "(fn [str]\n  (sort String/CASE_INSENSITIVE_ORDER (re-seq #\"\\w+\" str)))", "problem": 70, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [s]\n  (let [re #\"[^a-zA-Z]+\"\n        sa (clojure.string/split s re)\n        SA (map clojure.string/upper-case sa)\n        zv (map vector SA sa)]\n  (map #(second %) (sort zv))))", "problem": 70, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn [s] (sort-by #(.toUpperCase %) (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn [s]\n  (->> s\n    (re-seq #\"\\w+\")\n    (sort-by #(.toLowerCase %))))", "problem": 70, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn [s]\n    (let [words (clojure.string/split s #\"[^\\w]+\")]\n      (sort-by #(.toLowerCase %) words)))", "problem": 70, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "(fn [s]\n  (sort\n    (comp neg?\n      #(compare\n        (clojure.string/lower-case %1)\n        (clojure.string/lower-case %2)))\n      (clojure.string/split\n        s #\"[.! ]\")))", "problem": 70, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "504f865ee4b0a02f9cffde90"}, {"code": "#(sort-by clojure.string/lower-case\n          (re-seq #\"\\w+\" %))", "problem": 70, "user": "50586354e4b06522596eba78"}, {"code": "(fn [a] \n    (sort \n      String/CASE_INSENSITIVE_ORDER \n       (.split \n         (apply \n           str \n           (filter \n             #(not (= (Character/getType %)\n                      Character/OTHER_PUNCTUATION)) \n             (seq a))) \n         \" \")))", "problem": 70, "user": "50588ff1e4b06522596eba7e"}, {"code": "(fn [s] (->> s (re-seq #\"[a-zA-Z]+\") (sort-by #(.toLowerCase %))))", "problem": 70, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn [string]\n  (let [x (clojure.string/split string #\"\\W\")]\n      (sort-by #(clojure.string/lower-case %) x)))", "problem": 70, "user": "50435689e4b034ff00315d21"}, {"code": "(fn [s]\n  (sort-by\n    #(.toUpperCase %)\n(re-seq #\"\\b\\w+\\b\" s)))", "problem": 70, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "(fn [x] (sort (comparator (fn [a,b] (let [ret (.compareTo (.toLowerCase a) (.toLowerCase b))] (if (neg? ret) true  false  ))))  (re-seq #\"\\w+\" x)))", "problem": 70, "user": "50463347e4b011c5dfee771e"}, {"code": "(fn [s]\n  (sort #(.compareToIgnoreCase %1 %2) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn [ss]\n    (sort-by #(.toLowerCase %) (map #(clojure.string/replace % #\"\\W\" \"\") (clojure.string/split ss #\" \"))))", "problem": 70, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "(fn [s] (sort \n  #(compare (.toUpperCase %1) (.toUpperCase %2))\n(re-seq #\"\\w+\" s)))", "problem": 70, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn [s]\n  (letfn [(parse [[w & ws :as ww] c]\n            (cond (= c \\space) (cons \"\" ww)\n                  (or (= c \\.) (= c \\!))     ww\n                  :else        (cons (str w c) ws)))\n          (order [a b]\n            (compare (.toLowerCase a) (.toLowerCase b)))]\n  (sort order (reduce parse [\"\"] (seq s)))))", "problem": 70, "user": "4f84a4a4e4b033992c121c39"}, {"code": "(fn [x] \n  (sort #(.compareTo (.toLowerCase %1) (.toLowerCase %2))\n    (map #(clojure.string/replace %1 #\"\\.|\\!\" \"\")\n    (clojure.string/split x #\"\\s+\")))\n)", "problem": 70, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "(fn [a] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" a)))", "problem": 70, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn [input]\r\n    (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (-> input (clojure.string/replace #\"[.!]\" \"\") (clojure.string/split #\" \"))))", "problem": 70, "user": "4faa6184e4b081705acca1f1"}, {"code": "(fn [s]\n  (let [words (re-seq #\"\\w+\" s)\n        srtd (zipmap (map #(.toLowerCase %) words) words)]\n    (for [lw (sort (keys srtd))]\n      (srtd lw))))", "problem": 70, "user": "503e7f06e4b06c4e0e1fa268"}, {"code": "(fn [s]\n  (let\n    [words (map #(clojure.string/replace % #\"\\W+\" \"\") (clojure.string/split s #\"\\s+\"))\n     words-hash (into {} (for [w words] [(clojure.string/lower-case w) w]))]\n  (for [sw (sort (keys words-hash))] (words-hash sw))))", "problem": 70, "user": "504c8165e4b09724c857af31"}, {"code": "(fn wordComp [x]\n  (into '[] (apply sorted-set-by\n\t (fn [x y] (compare (clojure.string/lower-case x) (clojure.string/lower-case y)))\n\t (clojure.string/split \n\t\t(clojure.string/replace x #\"[!.;:,]\" \"\")\n\t#\"\\s+\"))))", "problem": 70, "user": "50588af1e4b06522596eba7d"}, {"code": "#(let [s (re-seq #\"\\w+\" %)]\n  (map last \n    (sort (map (juxt clojure.string/lower-case identity) s))))", "problem": 70, "user": "5065faf9e4b0313a384e5645"}, {"code": "(fn [coll] (sort #(.compareToIgnoreCase %1 %2) (re-seq #\"\\b[a-zA-Z]+\\b\" coll)))", "problem": 70, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn [a] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" a)))", "problem": 70, "user": "50645e12e4b007509339a58a"}, {"code": "#(sort (fn [s1 s2] (compare (.toLowerCase s1) (.toLowerCase s2)))\n  (map (fn [s] (apply str \n  \t(seq (filter (fn [c] ((set \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\") c)) s))))\n    (clojure.string/split % #\" \")))", "problem": 70, "user": "5063fe48e4b075d771da6f9e"}, {"code": "#(sort (fn [k1 k2]\r\n        (compare (.toLowerCase k1) (.toLowerCase k2))) (clojure.string/split (apply str (butlast %)) #\"\\s+\"))", "problem": 70, "user": "4fb23582e4b081705acca28a"}, {"code": "#(sort-by \n    clojure.string/lower-case \n    (clojure.string/split        \n      %\n      #\"[^a-zA-Z]+\"))", "problem": 70, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn\n  [s]\n\n  (let [trimmed-list (map #(clojure.string/replace % #\"\\W+\" \"\") (clojure.string/split s #\" \"))]\n  (sort\n    #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2))\n    trimmed-list)))", "problem": 70, "user": "50573ed8e4b0012181721987"}, {"code": "(fn [s] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "(fn [sentence]\n  (->> sentence\n       (re-seq #\"\\w+\")\n       (sort-by #(.toLowerCase %))))", "problem": 70, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn [x] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" x)))", "problem": 70, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "(fn [s]\n   (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case  %2))\n         (clojure.string/split\n          (clojure.string/replace s #\"[^a-zA-Z ]\" \"\") #\"\\s\")))", "problem": 70, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn[x](sort-by #(.toLowerCase %)  (re-seq #\"[A-z]+\" x)))", "problem": 70, "user": "4f614976e4b0defedf855fbb"}, {"code": "(fn [x] (vec (sort #(.compareToIgnoreCase %1 %2) (filter #(and (not= \".\" %1) (not= \" \" %1) (not= \"!\" %1)) (map #(apply str %) (partition-by #(= (java.lang.Character/isLetter %) false) x))))))", "problem": 70, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "(fn [s] (sort #(.compareToIgnoreCase % %2) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn [s]\n  (sort #(.compareToIgnoreCase %1 %2) (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "#(->>\n  (re-seq #\"[a-zA-Z]+\" %)\n  (sort-by clojure.string/lower-case))", "problem": 70, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (clojure.string/split s #\"[^a-zA-Z]\")))", "problem": 70, "user": "507437c2e4b054001656acd0"}, {"code": "#(sort-by\n  clojure.string/lower-case\n  (re-seq #\"\\w+\" %))", "problem": 70, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "#(sort-by clojure.string/lower-case\n          (clojure.string/split (clojure.string/replace % #\"\\p{P}\" \"\")\n                                #\"\\s+\"))", "problem": 70, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "(fn [s] \n       (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "#(sort-by clojure.string/lower-case \r\n          (clojure.string/split (subs % 0 (dec (count %))) #\" \"))", "problem": 70, "user": "4fabbb97e4b081705acca21d"}, {"code": "#(sort-by (fn [x] (. x toUpperCase)) (. % split \"\\\\W\"))", "problem": 70, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn word-sorting [s]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split s #\"[ .,!;]\")))", "problem": 70, "user": "50763574e4b0a894bb95bf3d"}, {"code": "(fn [s]\n  (sort-by\n    clojure.string/lower-case\n    (re-seq #\"[a-zA-Z]+\" s)\n  )\n)", "problem": 70, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "#(->> % (re-seq #\"\\w+\") (sort-by clojure.string/lower-case))", "problem": 70, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn words [s]\n    (let [lower clojure.string/lower-case]\n      (->> s (re-seq #\"\\w+\") (sort-by lower))))", "problem": 70, "user": "508157b2e4b0946d0443855c"}, {"code": "#(vec (apply sorted-set-by \n  (fn[a b] (.compareToIgnoreCase a b))\n  (re-seq #\"[a-zA-Z]+\" %)))", "problem": 70, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn [x] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" x)))", "problem": 70, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn [s] (sort \n  #(compare (.toLowerCase %)(.toLowerCase %2)) \n  (re-seq #\"(?i)\\w+\" s)))", "problem": 70, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [str]\r\n (let\r\n  [words (clojure.string/split str #\"[ !\\.]\")\r\n   pairs (into (sorted-map) (map #(hash-map (clojure.string/lower-case %1) %1) words))\r\n   ans   (reduce #(conj %1 (second %2)) [] pairs)\r\n  ]\r\n  ans))", "problem": 70, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "#(sort-by clojure.string/capitalize (re-seq #\"\\w+\" %))", "problem": 70, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "(fn [s]\n  (->> s \n    (re-seq #\"\\w+\") \n    (sort-by #(.toUpperCase %))))", "problem": 70, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn [s]\n  (sort\n   #(.compareTo (.toLowerCase %1) (.toLowerCase %2)) \n   (clojure.string/split s #\"[ .!]\")))", "problem": 70, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (clojure.string/split s #\"[\\s\\p{Punct}]\")))", "problem": 70, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn [s] (->> (clojure.string/split s #\"\\W\") (sort-by clojure.string/lower-case)))", "problem": 70, "user": "4da8dd6e30acd6ed12482a68"}, {"code": "(fn combo [x]\n  (let [min-s (fn\n                [s1 s2]\n                  (let [l1 (. s1 toLowerCase)\n                        l2 (. s2 toLowerCase)]\n                      (if (and (empty? s1) (empty? s2))\n                        s1\n                        (loop \n                          [f1 (first l1)\n                           f2 (first l2)\n                           r1 (next l1)\n                           r2 (next l2)]\n                        (if (nil? f1)\n                          s1\n                          (if (or (nil? f2) (> (int f1) (int f2)))\n                            s2\n                            (if (< (int f1) (int f2))\n                              s1\n                              (recur (first r1) (first r2) (next r1) (next r2)))))))))\n        split (fn [x] (clojure.string/split x #\"\\s\"))\n        only-legit-chars (fn [s] (apply str (filter #(Character/isLetter %) s)))\n        min-ss (fn ([s1] s1)\n              ([s1 s2] (min-s s1 s2))\n              ([s1 s2 & more]\n                (loop [ret (min-s s1 s2)\n                      todo more]\n                  (if todo\n                    (recur (min-s ret (first todo)) (next todo))\n                    ret))))\n        my-sort (fn my-sort [col]\n              (loop [ret '()\n                     todo col]\n                (if (not (empty? todo))\n                  (let [lowest (apply min-ss todo)]\n                    (recur (conj ret lowest) (remove #(= lowest %) todo)))\n                    (apply vector (reverse ret)))))]\n    (my-sort (map only-legit-chars (split x)))))", "problem": 70, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "(fn [str]\n  (sort-by clojure.string/lower-case\n    (filter #(not (.isEmpty %))\n      (clojure.string/split str #\"[\\s\\W]\"))))", "problem": 70, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn [s]\n   (sort-by #(.toLowerCase %)  (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f32ef71e4b0d6649770a098"}, {"code": "(fn [s]\n    (sort-by #(.toUpperCase %)\n      (clojure.string/split s #\"[ .\\!\\?]\")\n))", "problem": 70, "user": "50657775e4b0deb876850599"}, {"code": "(fn sorting-sentance [words]\n  (->> words\n       (map str)\n       (filter #(not-any? (fn [x] (= x %)) '(\".\" \"!\" \",\")))\n       (partition-by #(= \" \" %))\n       (filter #(not= (list \" \") %))\n       (map #(apply str %))\n       (sort (fn [x y] (compare (.toLowerCase x) (.toLowerCase y))))))", "problem": 70, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn [words]\n  (sort-by clojure.string/lower-case\n     (clojure.string/split words #\"\\W\")))", "problem": 70, "user": "506b8242e4b0eda3100c090a"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn [x] (sort #(compare (.toUpperCase %1) (.toUpperCase %2)) (clojure.string/split (clojure.string/replace x #\"[\\.\\!]\" \" \") #\" \") ))", "problem": 70, "user": "5097c837e4b00ad8bab4e973"}, {"code": "(fn [s]\r\n  (sort-by clojure.string/lower-case\r\n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "502f4c89e4b0842eb223d8b9"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn [s]\n  (sort-by #(.toUpperCase %)\n    (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "5089ebfee4b03217b26a539f"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n  \t(clojure.string/split s #\"[ !,.]\")))", "problem": 70, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [s] \n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) \n    (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn [somestring]\n    (let [words (clojure.string/split somestring #\" \")\n          words (map #(clojure.string/replace % #\"[^\\w]\" \"\") words) \n          first-char-value (fn first-char-value [somestring]\n                             (int (.charAt\n                                   (clojure.string/lower-case somestring)\n                                   0)))\n          sort-fn (fn sort-fn [x y]\n                    (println x y)\n                    (if (= (first-char-value x)\n                           (first-char-value y))\n                      (sort-fn (apply str (drop 1 (seq x)))\n                               (apply str (drop 1 (seq y))))\n                      (< (first-char-value x)\n                         (first-char-value y))))]\n      \n      (vec (apply sorted-set-by sort-fn\n                  words)))\n    )", "problem": 70, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [s] (sort-by #(clojure.string/lower-case %) (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "4daeabf6edd6309eace4d15c"}, {"code": "(fn [s]\n  (vals\n    (apply\n      sorted-map\n      (flatten (map #(vector (.toLowerCase %) %) (re-seq #\"[a-zA-Z]++\" s))))))", "problem": 70, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "#(sort-by clojure.string/upper-case \n    (clojure.string/split % #\"[\\., !]\")\n)", "problem": 70, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e7f32ee535db966e863cc3a"}, {"code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "problem": 70, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "(fn [s]\n    (sort-by\n     (memfn toLowerCase)\n     (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [s](sort-by #(.toUpperCase %) (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn [x]\n  (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (re-seq #\"[a-z,A-Z]+\" x)))", "problem": 70, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "(fn [c] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" c)))", "problem": 70, "user": "5098bcfee4b0cae2931060a1"}, {"code": "(fn b [m] (sort-by clojure.string/upper-case (re-seq #\"\\w+\" m)))", "problem": 70, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn [s]\n  (vals (sort (zipmap (map clojure.string/lower-case (clojure.string/split s #\" \")) (clojure.string/split (clojure.string/replace s #\"[\\.!]\" \"\") #\" \")))))", "problem": 70, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn word-sorting [st]\n  (sort String/CASE_INSENSITIVE_ORDER (seq (.split st \"[\\\\s*[^A-Za-z]*]\"))))", "problem": 70, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn [s]\n (sort\n  #(compare (.toLowerCase %) (.toLowerCase %2))\n  (map\n   #(clojure.string/replace % #\"[.!]\" \"\")\n   (clojure.string/split s #\" \"))))", "problem": 70, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "#(vec \n   (sort \n    (fn [x y] (compare (.toLowerCase x) (.toLowerCase y)))\n    (re-seq #\"\\w+\" %)))", "problem": 70, "user": "50217818e4b00bba4502f7a7"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (.split % \"\\\\W\"))", "problem": 70, "user": "4fb54e50e4b081705acca2bb"}, {"code": "(fn [x s]\n  (let [l (re-seq #\"[A-Za-z]+\" s)]\n    (sort #(compare (x %)(x %2)) l))) clojure.string/lower-case", "problem": 70, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "#(sort (fn [a b] (compare (.toLowerCase a) (.toLowerCase b))) (clojure.string/split (clojure.string/replace % #\"[\\.!]\" \"\") #\" \"))", "problem": 70, "user": "5027b41ee4b01614d1633fee"}, {"code": "#(sort-by clojure.string/lower-case \n          (clojure.string/split % #\"[\\s!.]\"))", "problem": 70, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn [s]\n\t(sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn [x] \n  (sort-by #(.toUpperCase %) \n    (clojure.string/split x #\"\\W+\")))", "problem": 70, "user": "506406c8e4b075d771da6f9f"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"\\w+\" %))", "problem": 70, "user": "505dcfc8e4b0e6aca564be0d"}, {"code": "(fn [s] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn [st]\n  (sort-by\n    #(.toLowerCase (str %))\n    (map\n      (fn [s] (apply str s))\n      (filter\n        (fn [s]\n          (every? #(Character/isLetter %) s))\n        (partition-by\n          #(Character/isLetter %)\n          st)))))", "problem": 70, "user": "4fb1325de4b081705acca276"}, {"code": "(fn word-sorting [s]\n  (sort-by clojure.string/upper-case\n           (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn[x] (sort #(> 0 (compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) ) (re-seq #\"\\w+\" x)))", "problem": 70, "user": "50b25f2ce4b03ea88043355f"}, {"code": "(fn [s] (sort (fn [x y] (compare (.toLowerCase x) (.toLowerCase y))) (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn [str]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" str)))", "problem": 70, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "(fn w-sort [s] \r\n  (map #(apply str %) \r\n       (sort #(< (compare (clojure.string/lower-case (apply str %1)) \r\n                          (clojure.string/lower-case (apply str %2))) 0) (remove #(= % '(\\space)) (partition-by #(= % \\space) (butlast s))))))", "problem": 70, "user": "505dd5c4e4b0e6aca564be0e"}, {"code": "(fn [s]\n  (apply vector\n    (sort\n    #(compare (clojure.string/lower-case %1)\n              (clojure.string/lower-case %2))\n    (clojure.string/split \n      (apply str (butlast s)) #\" \")  \n    )\n  ))", "problem": 70, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "(fn [x](sort #(compare(clojure.string/upper-case %)\r\n                       (clojure.string/upper-case %2)) \r\n             (clojure.string/split (clojure.string/replace  x #\"[\\.,!-]\" \"\") #\" \")  ))", "problem": 70, "user": "50646c01e4b007509339a58b"}, {"code": "(fn sorting[s]\r\n  (let [v (reduce #(mapcat (fn [s] (clojure.string/split s %2))\r\n              %1) [s] [#\" \" #\",\" #\"!\" #\"\\.\"])\r\n        l (map #(clojure.string/lower-case %) v)]\r\n    (vals (sort (zipmap l v)))))", "problem": 70, "user": "5065bd94e4b0148eb3925aed"}, {"code": "(fn [x] (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" x)))", "problem": 70, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "#(->> (clojure.string/split % #\"[\\s+|.|!]\") \n       (sort-by clojure.string/lower-case))", "problem": 70, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn [s]\n  (sort-by\n    clojure.string/lower-case\n    (clojure.string/split\n      (clojure.string/replace \n        s\n        #\"[^a-zA-Z ]\"\n        \"\")\n      #\"\\s\")))", "problem": 70, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn fnc [x] (sort-by #(.toUpperCase %) \r\n                      (filter #(not= % \" \") \r\n                              (map #(apply str %)\r\n                                   (partition-by #(= % \\space) \r\n                                         (filter #(or (= % \\space) \r\n                                            (and (>= (int %) 65) (<= (int %) 90))\r\n                          (and (>= (int %) 97) (<= (int %) 122))) (seq x)))))))", "problem": 70, "user": "506717e2e4b03d366d7cb2ba"}, {"code": "(fn [s] (sort-by #(.toUpperCase %) (.split s \"\\\\W\")))", "problem": 70, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [s] (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "(comp (partial sort-by clojure.string/lower-case)\n      (partial re-seq #\"\\w+\"))", "problem": 70, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn [s]\n  (letfn[(s2int [s] (map int (clojure.string/upper-case s)))]\n    (sort #(compare (vec (take (min (count %1) (count %2)) (s2int %1)))\n                    (vec (take (min (count %1) (count %2)) (s2int %2)))) \n          (clojure.string/split s #\"[\\W!]\"))))", "problem": 70, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn [arg](map (fn [x](apply str \n                                  (filter #(not (contains? #{\\! \\. \\,} %)) \n                                          x))) \n                    (#(sort (fn [s1 s2]\n                             (compare (.toLowerCase s1) (.toLowerCase s2))) \n                       (clojure.string/split % #\"\\s+\")) arg)))", "problem": 70, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn  [x]\n(vec\n  (apply \n    (partial sorted-set-by\n      (fn [x y] (.compareTo (.toUpperCase x) (.toUpperCase y)))\n    )\n    (re-seq #\"\\w+\" x)\n  )\n)\n)", "problem": 70, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n   (let [sep? #{\\space \\. \\! \\,}]\n     (map #(apply str %)\n          (filter #(not (sep? (first %)))\n                  (partition-by sep? s))))))", "problem": 70, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn [x]\n  ((comp \n     #(sort-by clojure.string/lower-case %)\n     #(clojure.string/split % #\"\\s+\")\n     #(clojure.string/replace % #\"\\p{Punct}\" \"\"))\n     x))", "problem": 70, "user": "4ff769bce4b0678c553fc38f"}, {"code": "(fn [sentence]\n  (let [words (filter #(> (.length %) 0)(seq (.split (.replaceAll sentence \"[^a-zA-Z ]\" \"\") \" \")))\n        words-without-capital (map #(.toLowerCase %) words)\n        words-without-capital-sorted (sort words-without-capital)\n        indexes (map #(.indexOf words-without-capital %) words-without-capital-sorted)\n        sorted-words (map #(nth words (.indexOf words-without-capital %)) words-without-capital-sorted)\n        ]\n    (println (sort words-without-capital))\n    (prn words-without-capital-sorted)\n    (println indexes)\n    (println sorted-words)\n    sorted-words\n    ))", "problem": 70, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn[s]\n   (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e778d36535d324fb2983d71"}, {"code": "(fn [s] (\n         sort-by clojure.string/lower-case\n         ; sort #(apply compare (map clojure.string/lower-case [%1 %2])) \n         (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50de11b2e4b061dbdced7217"}, {"code": "#(filter (comp not empty?) (sort-by clojure.string/lower-case (clojure.string/split % #\"[ !.]\")))", "problem": 70, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn srt [s] (let [c (re-seq #\"\\w+\" s)] (sort-by #(.toLowerCase (.toString %)) c )))", "problem": 70, "user": "50d179c7e4b05a71a896ef56"}, {"code": "(fn [words]\n  (sort-by clojure.string/lower-case (map #(clojure.string/replace %1 #\"\\W\" \"\") (clojure.string/split words #\" \"))))", "problem": 70, "user": "50bd6033e4b0594b91591c66"}, {"code": "(fn [s] \n  (sort #(compare (.toLowerCase %) (.toLowerCase %2)) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [string]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" string)))", "problem": 70, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "50e3cf55e4b01912b3285c45"}, {"code": "(fn [s]\n  (sort\n   #(compare\n     (clojure.string/lower-case %1)\n     (clojure.string/lower-case %2))\n   (clojure.string/split s #\"[^a-zA-Z]\")))", "problem": 70, "user": "50e7cef1e4b077ad597af36a"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (.split (apply str (filter #(or (Character/isLetter %) (Character/isSpace %)) s)) \" \")))", "problem": 70, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "#( ->> % (re-seq #\"\\w+\") (sort-by clojure.string/lower-case))", "problem": 70, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "#(sort-by (fn[v](.toLowerCase v)) (seq (.split (.replaceAll % \"[.!]\" \"\") \" \")))", "problem": 70, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "(fn [string] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" string)))", "problem": 70, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" %))", "problem": 70, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn [string] \n  (sort-by clojure.string/lower-case \n           (clojure.string/split string #\"\\W+\")))", "problem": 70, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn [str]\n(sort-by #(.toLowerCase %) (re-seq #\"\\w+\" str))\n)", "problem": 70, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (.split s \"[\\\\s\\\\!\\\\.]\")))", "problem": 70, "user": "4fbf2818e4b081705acca317"}, {"code": "#(sort-by (fn [s] (.toLowerCase s)) (re-seq #\"[a-zA-Z]+\" %))", "problem": 70, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn str-sorter [x]\n  (let [y (-> x \n              (clojure.string/replace #\"\\.|!\" \"\")\n              (clojure.string/split #\" \"))]\n    (sort-by #(.toLowerCase %) y)))", "problem": 70, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split s #\"[\\s!.]+\")))", "problem": 70, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn [s] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"[\\s\\.\\!\\?]+\")))", "problem": 70, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn [sentence]\n  (letfn [(order [a b]\n            (compare (.toUpperCase a) (.toUpperCase b)))]\n    (sort order (re-seq #\"[A-Za-z]+\" sentence))))", "problem": 70, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "#(sort-by clojure.string/upper-case (clojure.string/split (clojure.string/replace %1 #\"[.!,?]\" \"\") #\" \"))", "problem": 70, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn [l] (vals \n\t(apply sorted-map \n\t\t(flatten \n\t\t\t(map #(list (.toLowerCase %) %) \n\t\t\t\t(-> l (.replaceAll \"[^a-zA-Z ]\" \"\") \n\t\t\t\t\t   (.split \" \")))))))", "problem": 70, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn [s]\n\t\t    (let [ws (clojure.string/split s #\"\\W+\")]\n\t\t      (vec (sort-by #(clojure.string/capitalize %) ws))))", "problem": 70, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) \n      (clojure.string/split \n        (clojure.string/replace s #\"[.,!?]\" \"\") \n        #\" \"\n      ))\n)", "problem": 70, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn [s] (sort-by #(apply str (map clojure.string/capitalize %)) (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "50dade7be4b02e6ac9592c70"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn [s]\n  (sort-by\n   clojure.string/lower-case\n   (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\b\\w+\\b\" s)))", "problem": 70, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "510c1dd5e4b078ea71921113"}, {"code": "(fn [astr] \n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n      (clojure.string/split astr #\"\\W+\")))", "problem": 70, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn wordsort [s]\n  (sort (fn [a b] (compare (clojure.string/upper-case a) (clojure.string/upper-case  b) )  ) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn [s]\n  (sort-by clojure.string/upper-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50aab057e4b056ee0193586b"}, {"code": "(fn [s]\n  (->> s\n    (re-seq #\"\\w+\")\n      (sort-by (fn [item]\n                 (apply str (map #(Character/toUpperCase %) item))))))", "problem": 70, "user": "510db6cde4b078ea71921145"}, {"code": "(fn [str]\n  (sort #(compare (clojure.string/lower-case %1)\n                  (clojure.string/lower-case %2))\n       (re-seq #\"\\w+\"  str)))", "problem": 70, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn[s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5107b86de4b05b2b4eee7495"}, {"code": "#(sort-by (memfn toLowerCase) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn [s] (into [] (sort #(compare (.toUpperCase %1) (.toUpperCase %2)) (re-seq #\"\\w+\" s))))", "problem": 70, "user": "510931ede4b0c71f76895663"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn wordsort [word] \n  (let [words (.split (.substring word 0 (dec (.length word))) \" \")]\n    (sort-by #(.toUpperCase %) words)))", "problem": 70, "user": "50e4f4e9e4b049a987753896"}, {"code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "5102489de4b00c483ae176f6"}, {"code": "(fn [s]\n\t\t\t (sort-by #(.toLowerCase %) \n\t\t\t\t  (map #(.replaceAll % \"[^a-zA-Z ]\" \"\") (.split s \"\\\\s+\"))))", "problem": 70, "user": "4e68fad4535d8ccf87e9fe93"}, {"code": "#(vec (sort\n  (fn [a b]\n    (loop [i 0]\n      (if (and (< i (count a)) (< i (count b)))\n        (let [r (compare (nth (clojure.string/lower-case a) i) (nth (clojure.string/lower-case b) i))]\n          (if (= r 0)\n            (recur (inc i))\n            r\n            )\n          )\n        (compare (count a) (count b)) \n        )\n      ))\n   (clojure.string/split % #\"[^a-zA-Z0-9]\")\n  ))", "problem": 70, "user": "50bce014e4b0594b91591c63"}, {"code": "(comp (partial sort-by clojure.string/lower-case)\n      #(clojure.string/split % #\" \")\n      #(clojure.string/replace % #\"[\\.\\!]\" \" \"))", "problem": 70, "user": "50e3e108e4b01912b3285c48"}, {"code": "(fn [sentence]\n  (let [words (clojure.string/split sentence #\"\\W\")]\n    (sort-by clojure.string/lower-case words)))", "problem": 70, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn [x] \n  (sort \n   #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n   (clojure.string/split \n      (clojure.string/replace x #\"(?![@',&])\\p{Punct}\" \"\") \n      #\" \"\n\t)\n  )\n)", "problem": 70, "user": "4f58d922e4b0a7574ea71857"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (.split s \"[^\\\\w]\")))", "problem": 70, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(fn __ [s]\n  (->> s\n       (filter #(re-matches #\"[A-Za-z ]\" (str %)))\n       (partition-by #(= % \\space))\n       (filter #(not= % '(\\space)))\n       (map #(apply str %))\n       (sort-by clojure.string/lower-case)\n  ))", "problem": 70, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn [s] \n  (sort #(.compareToIgnoreCase % %2) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn [s]\n  (->> s\n     (.split #\"[\\s\\W]+\")\n     (sort-by #(.toUpperCase %))))", "problem": 70, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "511f88eee4b085952a83535f"}, {"code": "(fn [s]\n    (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn [string]\n  (let [x (atom (to-array (re-seq #\"\\w+\" string)))]\n    (java.util.Arrays/sort @x String/CASE_INSENSITIVE_ORDER)\n    (seq @x)))", "problem": 70, "user": "50d8de3fe4b01f0871336e72"}, {"code": "(fn [s]\n\t(into [] (sort-by clojure.string/lower-case (clojure.string/split s #\"[\\W]\"))))", "problem": 70, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn [s](sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"[\\S&&[^.!]]+\" s)))", "problem": 70, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"[a-z,A-Z]+\" s)))", "problem": 70, "user": "51181009e4b0e0897831a60f"}, {"code": "#(sort-by (fn [v] (.toLowerCase v)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "501b1efee4b0b12d9c5f4d82"}, {"code": "#(sort-by (fn [s] (.toLowerCase s)) (re-seq #\"[a-zA-Z]+\" %))", "problem": 70, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [s] (into [] (sort-by #(.toLowerCase %) (.split (apply str (remove #(or (= \\. %) (= \\! %)) s)) \"\\\\s\"))))", "problem": 70, "user": "511b810ce4b07ab9ec456182"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "510d3dc6e4b078ea71921132"}, {"code": "#(sort-by (fn [s] (.toLowerCase s)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn [s]\n  (sort #(compare (clojure.string/upper-case %1)\n                  (clojure.string/upper-case %2))\n        (re-seq #\"[A-z]+\" s)))", "problem": 70, "user": "5102ac9de4b00c483ae176fa"}, {"code": "(fn [sentence]   \n   (sort (fn [a b]\n           (if (= (clojure.string/lower-case a) (first (sort [(clojure.string/lower-case a) (clojure.string/lower-case b)])))\n             -1\n             1)) \n         (clojure.string/split (clojure.string/replace sentence #\"[^\\w\\s]\" \"\") #\" \" )))", "problem": 70, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn [s] (sort #(compare (.toUpperCase %1) (.toUpperCase %2)) (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn [s] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "512474ede4b02c3f2a072cce"}, {"code": "(comp (partial sort-by #(.toLowerCase %))\n      (partial re-seq #\"\\w+\"))", "problem": 70, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace s #\"\\p{Punct}\" \"\") #\"\\s\")))", "problem": 70, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn get-sorted-words\n  [text]\n  (sort\n   #(compare (. %1 toLowerCase) (. %2 toLowerCase))\n   (re-seq #\"[A-Za-z]+\" text)))", "problem": 70, "user": "511720eae4b0063b4e3e16da"}, {"code": "(fn [a] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" a)))", "problem": 70, "user": "4f890488e4b033992c121c76"}, {"code": "(fn [s] (sort-by #(.toUpperCase %) (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (clojure.string/split (.replaceAll s \"[^A-Za-z ]\" \"\") #\"\\ \")))", "problem": 70, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) \n                 (clojure.string/split \n                                    (re-find #\"[a-z A-Z]+\" s)\n                                                         #\" \")))", "problem": 70, "user": "512fff44e4b006a9be7bde92"}, {"code": "(fn [word]\n   (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))          \n        (filter #(re-matches #\"[a-zA-Z]+\" %) (clojure.string/split word #\"\\b\" )) \n         )\n   \n )", "problem": 70, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn [s]\n  (sort-by\n   #(.toUpperCase %)\n   (re-seq #\"\\w+\" s)\n   )\n  )", "problem": 70, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn [string]\n\t(let [words (clojure.string/split string #\"\\W+\")]\n\t\t(vals\n\t\t\t(apply sorted-map \n\t\t\t\t(interleave (map clojure.string/lower-case words) words)\n\t\t\t)\n\t\t)\n\t)\n)", "problem": 70, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn [a] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" a)))", "problem": 70, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "(fn [str]\n  (into []\n        (apply sorted-set-by\n               #(compare (.toUpperCase %1) (.toUpperCase %2))\n               (re-seq #\"[a-zA-Z]+\" str))))", "problem": 70, "user": "50589113e4b06522596eba7f"}, {"code": "(fn sort_sentence\n  ([original lowered]\n    (map\n      #(nth % 1)\n      (sort-by\n        first\n        (map\n          #(list (nth original %) (nth lowered %))\n          (range (count lowered))\n        )\n      )\n    )\n  )\n  ([sentence]\n    (sort_sentence\n      (clojure.string/split (clojure.string/lower-case sentence) #\"\\s\")\n      (clojure.string/split sentence #\"[\\s\\W]\")\n    )\n  )\n)", "problem": 70, "user": "502be4fae4b08f5602f232eb"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (clojure.string/split s #\"[\\W\\s]+\")))", "problem": 70, "user": "4e823f41535db62dc21a62c8"}, {"code": "(fn [s]\n  (sort #(compare\n           (clojure.string/lower-case %1)\n           (clojure.string/lower-case %2))\n        (clojure.string/split s #\"[ .!]\")))", "problem": 70, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) ( clojure.string/split s #\"[\\s\\p{Punct}]+\")))", "problem": 70, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn [s] (sort-by clojure.string/lower-case \n                 (clojure.string/split \n                  (clojure.string/replace s #\"[!.,;:\\\"']\" \"\") #\" \")))", "problem": 70, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn wsort [line]\n  (let [words  (clojure.string/split line #\" \")\n        filtrd (map #(clojure.string/replace % #\"[^a-zA-Z]\" \"\") words)]\n    (sort (fn [a, b]\n            (compare (.toLowerCase a) (.toLowerCase b)))\n          filtrd)))", "problem": 70, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn jj [x] \n  (sort-by #(clojure.string/lower-case %) \n   \n(clojure.string/split (apply str (re-seq #\"[a-zA-Z]|\\s\" x)) #\"\\s\")\n        \n        )\n  )", "problem": 70, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn [s] \n  (sort #(compare (clojure.string/lower-case %1)\n                  (clojure.string/lower-case %2))\n        (re-seq #\"\\w+\" s)))", "problem": 70, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn split-sort[s](vals (sort (zipmap (clojure.string/split (.toUpperCase (clojure.string/replace s #\"[^\\w\\s]\" \"\")) #\"\\s+\") (clojure.string/split (clojure.string/replace s #\"[^\\w\\s]\" \"\") #\"\\s+\")))))", "problem": 70, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn s [%]\n  (sort-by clojure.string/upper-case\n           (clojure.string/split\n            (clojure.string/replace  % #\"[.,!]\" \" \")\n            #\" +\")))", "problem": 70, "user": "509b152be4b0412cdea6eb1e"}, {"code": "(fn [s]\n  (sort #(compare (clojure.string/upper-case %) (clojure.string/upper-case %2) )\n        (clojure.string/split s #\"[^a-zA-Z]\")))", "problem": 70, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn [s] (->> s (re-seq #\"\\w+\") (sort #(apply compare (map clojure.string/lower-case %&)))))", "problem": 70, "user": "5137c3b0e4b0509a8b470482"}, {"code": "(fn [s] (sort-by clojure.string/lower-case compare (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split\n            (clojure.string/replace s #\"[.!]\" \"\") #\"\\s\")))", "problem": 70, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1) \n                  (clojure.string/lower-case %2)) \n        (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "513cb853e4b0b86ece9f322b"}, {"code": "#(sort-by (fn [s] (.toLowerCase s)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "50b35486e4b03ea88043356a"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn [s]\n  (sort\n   \t#(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n    (clojure.string/split\n     (clojure.string/replace s #\"[^A-Za-z ]\" \"\") #\" \")))", "problem": 70, "user": "51170b49e4b0063b4e3e16d9"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "5117c31ee4b0e0897831a60c"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W+\"))", "problem": 70, "user": "514721c6e4b0d520409ed392"}, {"code": "#(-> %\n  drop-last\n  clojure.string/join\n  (clojure.string/split #\" \")\n  ((partial sort-by clojure.string/lower-case)))", "problem": 70, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn [n]\n  (sort-by clojure.string/lower-case\n (clojure.string/split n  #\"( |\\.|!)\"))\n)", "problem": 70, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "problem": 70, "user": "51367626e4b04ac1f358dd53"}, {"code": "(fn [s] (sort-by #(.toLowerCase %)  (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn [x] (sort-by #(.toLowerCase %) (re-seq #\"[A-Za-z]+\" x)))", "problem": 70, "user": "514d398ee4b019235f6c0583"}, {"code": "(comp (partial sort-by clojure.string/lower-case)\n      #(clojure.string/split % #\"[!.\\s]+\"))", "problem": 70, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn [arr-str] (sort #(compare (.toLowerCase %) (.toLowerCase %2)) (re-seq #\"\\w+\" arr-str)))", "problem": 70, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn [s] (sort #(.compareTo (.toLowerCase %) (.toLowerCase %2)) (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn [s] (->> s (re-seq #\"\\w+\") (sort-by #(.toLowerCase %))))", "problem": 70, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "(fn word-sort [instring]\n  (sort #(. %1 compareToIgnoreCase %2) (re-seq #\"\\w+\" instring)))", "problem": 70, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "( fn [s] (sort-by clojure.string/upper-case (re-seq  #\"\\w+\" s)))", "problem": 70, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "#(sort (fn [x y] (compare (.toLowerCase x) (.toLowerCase y))) (re-seq #\"\\w+\" %))", "problem": 70, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn [s]\n  (sort \n    (fn [wa wb]\n      (loop [a (clojure.string/lower-case wa) b (clojure.string/lower-case wb)]\n        (if (and (empty? a) (empty? b))\n          0\n          (if (= (first a) (first b))\n            (recur (rest a) (rest b))\n            (compare (first a) (first b))))))\n    (re-seq #\"\\w+\" s)))", "problem": 70, "user": "515828b8e4b0a069fd272c71"}, {"code": "(fn split-sort [s]\n\t(sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n\t\t(clojure.string/split\n\t\t\t(clojure.string/replace s #\"[^A-Za-z\\s]\" \"\")\n\t\t\t#\"\\s\")))", "problem": 70, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "(fn [ws]\n  (map second\n    (sort\n     (for [w (re-seq #\"\\w+\" ws)] [(.toLowerCase w) w]))))", "problem": 70, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn [x]\n  (let [s (clojure.string/replace (clojure.string/replace x \\. \\space) \\! \\space)]\n  (sort (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b))) (clojure.string/split s #\" \"))))", "problem": 70, "user": "5110b8bae4b04c71fce993f4"}, {"code": "(fn [xs]\n  (sort-by #(.toLowerCase %) \n        (clojure.string/split xs #\"[\\p{Punct}\\s]+\")))", "problem": 70, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn[s](sort-by #(.toLowerCase %) (seq (.split (.replaceAll s \"[\\\\.\\\\!]\" \"\") \" \"))))", "problem": 70, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn sort-s [s]\n  (sort-by clojure.string/upper-case \n           (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(let [cmp #(compare (.toLowerCase %1) (.toLowerCase %2))]\n  #(sort cmp (clojure.string/split % #\"\\W\")))", "problem": 70, "user": "515ead6be4b049add99a053e"}, {"code": "(fn [x] (sort #(compare (.toUpperCase %1) \n                       \t(.toUpperCase%2))\n\t\t\t\t(re-seq #\"\\w+\" x)))", "problem": 70, "user": "50981062e4b04e098a4c7268"}, {"code": "#(sort-by\n   clojure.string/upper-case\n    (re-seq #\"\\w+\" %))", "problem": 70, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn [s] (sort-by  #(.toLowerCase %) (re-seq #\"[A-z]+\" s)))", "problem": 70, "user": "5166e80de4b060c690c1f4c5"}, {"code": "(fn [text]\n    (letfn [(notpunct? [c]\n              (or\n                (= c \\space)\n                (and\n                  (<= (int c) (int \\z))\n                  (>= (int c) (int \\a)))\n                (and\n                  (<= (int c) (int \\Z))\n                  (>= (int c) (int \\A)))))]\n      (let [cleaned (apply str (filter notpunct? text))\n            words (clojure.string/split cleaned #\" \")]\n        (sort-by clojure.string/lower-case words))))", "problem": 70, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn [s]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n        (clojure.string/split (clojure.string/replace s #\"[\\.!]\" \"\") #\"\\s\")))", "problem": 70, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn [s]\n   (sort\n     #(compare (clojure.string/lower-case %1)\n               (clojure.string/lower-case %2))\n     (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "50f48298e4b004d364930527"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51696bcde4b03f62cda68ce7"}, {"code": "#(sort-by clojure.string/upper-case\n   (clojure.string/split % #\"\\W+\"))", "problem": 70, "user": "513b43ede4b067e25a345ed3"}, {"code": "(fn [s]\n  (sort-by #(clojure.string/lower-case %) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn sort-word\n  [str]\n  (sort-by clojure.string/upper-case (clojure.string/split (clojure.string/replace str #\"\\.|\\!\" \"\") #\"\\ \")))", "problem": 70, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "5150a7d7e4b03e678e393abb"}, {"code": "#(sort\n   (fn [x y] (.compareToIgnoreCase x y))\n   (re-seq #\"\\w+\" %))", "problem": 70, "user": "4eab612d535d7eef30807316"}, {"code": "(fn [str] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" str)))", "problem": 70, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn sort-words [s] \n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n        (filter (complement empty?) (clojure.string/split s #\"[^a-zA-Z]\"))))", "problem": 70, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "(fn sort-words [s]\n  (sort-by #(clojure.string/lower-case %)\n           (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "517a025ce4b01aacecbecbe6"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W+\"))", "problem": 70, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn [sentence]\n  (sort-by #(.toLowerCase %)\n        (clojure.string/split sentence #\"[^a-zA-Z]+\")))", "problem": 70, "user": "5173726be4b098276e74652c"}, {"code": "(fn [s] (sort-by clojure.string/upper-case (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn [s] (->> s (re-seq #\"\\w+\") (sort #(.compareToIgnoreCase %1 %2))))", "problem": 70, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n           (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(fn [x]\n  (let [split (fn [x] (filter (complement empty) (clojure.string/split x #\"\\W\")))]\n    (sort-by clojure.string/lower-case (split x)) ))", "problem": 70, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn f [s] (sort-by clojure.string/lower-case (map #(clojure.string/replace % #\"[!.]\" \"\") (clojure.string/split s #\"\\s\"))))", "problem": 70, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "4e6a3b79535d8ccf87e9feb3"}, {"code": "(fn [str]\n  (sort-by #(.toLowerCase %)\n        (re-seq #\"\\w+\" str)))", "problem": 70, "user": "51740b65e4b0d277d717bc67"}, {"code": "(fn [s]\n  (sort-by #(.toUpperCase %)\n           (clojure.string/split (apply str (remove #{\\. \\!} s)) #\" \")))", "problem": 70, "user": "4eec82fe535d93acb0a668ae"}, {"code": "#(sort-by \n        clojure.string/lower-case\n    (clojure.string/split % #\"[^a-zA-Z]+\"))", "problem": 70, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn [s] \n  (sort-by \n   #(.toUpperCase %) \n   (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn [sentence]\n   (sort #(compare (.toUpperCase %1) (.toUpperCase %2)) (clojure.string/split (subs sentence 0 (dec (count sentence))) #\" \")))", "problem": 70, "user": "5016ac54e4b052339a490e7b"}, {"code": "(fn \n  [str]\n  (let [words (.split (.substring str 0 (dec (.length str))) \" \")]\n      (sort-by \n       (fn [item](.toUpperCase item))\n       words)))", "problem": 70, "user": "5174bddde4b07031762f2ee1"}, {"code": "#(sort-by (fn [w] (.toLowerCase w)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn [xs] (sort-by clojure.string/lower-case \n           (map (partial apply str) \n              (filter not-empty \n                     (map (partial filter #(> (int %) 64)) (partition-by (partial = \\space) xs))\n\t\t\t  )\n           )\n         )\n)", "problem": 70, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "(fn [x]\n    (sort #(compare (clojure.string/lower-case  %1) (clojure.string/lower-case %2)) (let [m (re-matcher #\"\\w+\" x)]\n        (loop [e (re-find m) r []]\n            (if (not e)\n                r\n                (recur (re-find m) (conj r e))\n            )\n        )\n    ))\n)", "problem": 70, "user": "5179fd22e4b01aacecbecbe5"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "51899891e4b0288ada3dbdab"}, {"code": "#(sort-by\n      clojure.string/capitalize\n       (clojure.string/split % #\"\\s+|[.!]\"))", "problem": 70, "user": "517945dce4b0684c1c981a43"}, {"code": "(fn [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn [s] \n  (sort \n   #(compare \n     (clojure.string/lower-case %1) \n     (clojure.string/lower-case %2)) \n   (clojure.string/split \n    (clojure.string/join (remove #{\\. \\!} s)) #\" \")))", "problem": 70, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn parse-sort [s]\n(let [\n    groupchars \n      (fn [s]\n         (partition-by\n         #(Character/isJavaLetterOrDigit %)\n         s\n        )\n       )\n    tokenize\n      (fn [s]\n(let [\n      \n      \n     grouped\n      (map\n       (if (Character/isJavaLetterOrDigit (first s)) first second)\n       (partition-all 2 (groupchars s))\n       )\n     words\n      (map\n       #(apply str %)\n       grouped\n       )      \n      \n      \n      ]\n  words\n  )\n  )\n      \n      ]\n  \n (vals (reduce \n  (fn [acc x] \n    (assoc acc \n      (.toLowerCase  x)\n      x\n      ))\n  (sorted-map)\n  (tokenize s)\n  )\n       )\n))", "problem": 70, "user": "4fb03cf4e4b081705acca262"}, {"code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "5141bc82e4b02fd87f5064c5"}, {"code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "(fn [words] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" words)))", "problem": 70, "user": "51460e4ce4b04ef915e37314"}, {"code": "#(sort (comparator (fn [x y] (< (.compareTo (.toUpperCase x) (.toUpperCase y)) 0))) (clojure.string/split % #\"[ .!?]+\"))", "problem": 70, "user": "5196568fe4b04c0af7ff3c1c"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"[\\w]+\" s)))", "problem": 70, "user": "51805d22e4b0e3fc13e244df"}, {"code": "#(sort-by (fn [s] (.toUpperCase s)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "5191e91de4b08962174cf733"}, {"code": "(fn f [s]\n  (sort-by (memfn toLowerCase) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51750cd4e4b07031762f2ee5"}, {"code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "50ebd63ce4b04edc3377703c"}, {"code": "(fn [words] (vec (sort #(.compareTo (.toLowerCase %1) (.toLowerCase %2))  \n                       (clojure.string/split (clojure.string/replace words #\"[^a-z^A-Z ]\" \" \") #\" \"))))", "problem": 70, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn [s] (sort-by #(.toUpperCase %)  (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [str]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split str #\"[^A-z]\")))", "problem": 70, "user": "5073de20e4b054001656acca"}, {"code": "(fn [s] (sort-by #(.. % toString toLowerCase) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn [t]\n  (sort\n   #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n   (clojure.string/split \n    (clojure.string/join (re-seq #\"[A-Za-z\\s]\" t)) #\"\\s\")\n   )\n  )", "problem": 70, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn [sentence]\n  (sort\n   #(.compareToIgnoreCase %1 %2)\n   (re-seq #\"\\w+\" sentence)))", "problem": 70, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [s]\n  (sort-by\n   #(.toLowerCase %)\n   (filter #(not (.isEmpty %))\n           (seq (clojure.string/split s #\"[\\s\\W]+\")))))", "problem": 70, "user": "5142154ce4b0b50abeb46b2b"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (clojure.string/split (clojure.string/replace s #\"[!.]\" \"\")  #\" \" )))", "problem": 70, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn [x] (sort #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2)) (.split  (subs x 0 (dec (count x))) \" \")))", "problem": 70, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "(fn [st]\n    (sort-by clojure.string/lower-case (re-seq #\"\\w+\" st)))", "problem": 70, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn [k] \n   (sort \n    (fn [a b]\n      (let [d #(->> %1 (.toUpperCase) (map int)) f (d a) l (d b) ]\n        (loop [[fl & fs] f [ll & ls] l]\n          (cond \n           (= fl ll) (recur fs ls)\n           (> fl ll) false\n           (< fl ll) true))))(re-seq #\"(?i)\\w+\" k)))", "problem": 70, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "#(sort-by\n      clojure.string/lower-case\n      (re-seq #\"[a-zA-Z]+\" %))", "problem": 70, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn [string]\n    (sort\n      #(compare (.toLowerCase %1) (.toLowerCase %2))\n      (clojure.string/split\n        (clojure.string/trim\n          (apply str (filter (clojure.set/union\n                               (set (map char (filter #(or (< 64 %1 91) (< 96 %1 123)) (range 0 200))))\n                               #{\\space})\n                             string)))\n        #\"( )+\")))", "problem": 70, "user": "51b8e8b3e4b050a1176cd6a0"}, {"code": "(fn [s]\n\t(sort #(.compareTo (.toLowerCase %1) (.toLowerCase %2))\n          (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn [s] (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50b29029e4b03ea880433563"}, {"code": "(fn [e]\n  (letfn [(splitonspace [a] (clojure.string/split (clojure.string/triml a) #\"\\s+\"))\n          (removepunc [b] (clojure.string/replace b #\"[.!?,]\" \" \"))\n          (orderstrs [c d] (compare (clojure.string/lower-case c) (clojure.string/lower-case d)))]\n    (sort orderstrs  (splitonspace (removepunc e)))))", "problem": 70, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn [sent]\n  (sort-by #(.toLowerCase %) (.split (->> sent butlast (apply str)) \" \")))", "problem": 70, "user": "4fa340b4e4b081705acca18c"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn tryIt [x]\n  (into [] (into (sorted-set-by #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)))\n        (clojure.string/split (clojure.string/replace x #\"[.!,]\" \"\") #\"\\s+\")))\n)", "problem": 70, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "(fn [w] (sort-by #(.toLowerCase %)\n(map #(clojure.string/replace % #\"\\W\" \"\") \n     (clojure.string/split w #\"\\s+\"))))", "problem": 70, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "#(map (fn [s] (if (re-matches #\".*[!.]\" s) (apply str (butlast s)) s)) (sort (fn [item1 item2] (compare (clojure.string/lower-case item1) (clojure.string/lower-case item2))) (clojure.string/split % #\" \")))", "problem": 70, "user": "51bf4560e4b013aa0d74b817"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn [str]\n  (->> str\n       (re-seq #\"\\w+\")\n       (sort-by identity #(.compareToIgnoreCase % %2))))", "problem": 70, "user": "51b38769e4b026427ecf067f"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ebf11bc535dfed6da9c6d9c"}, {"code": "(fn foo [string]\n  (sort #(apply compare (map clojure.string/lower-case %&))\n        (re-seq #\"\\w+\" string)))", "problem": 70, "user": "4fa3c137e4b081705acca193"}, {"code": "(fn [s](->> s(re-seq #\"\\w+\") (sort-by clojure.string/lower-case)))", "problem": 70, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn lc-sort [s]\n  (letfn [(cp [s] (apply str (filter (set \"abcdefghijklmnopqrstuvwxyz\") (.toLowerCase s))))]\n    (sort (fn [a b] (compare (cp a) (cp b))) (re-seq #\"\\w+\" s))))", "problem": 70, "user": "51672d15e4b079759a74a5e7"}, {"code": "(fn word-sort [s]\n  \n  (let [words (map #(clojure.string/replace % #\"\\.|\\,|\\!\" \"\") (clojure.string/split s #\"\\s\"))]\n      \n  (sort (fn [x y] \n        (compare (clojure.string/lower-case x) (clojure.string/lower-case y) )) words)\n    \n    \n    )\n  \n  )", "problem": 70, "user": "5180dc04e4b06b8caf33fa01"}, {"code": "(comp (partial sort-by clojure.string/lower-case) #(clojure.string/split % #\"[^A-Za-z]\"))", "problem": 70, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W+\"))", "problem": 70, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5142e808e4b0c172af7558c9"}, {"code": "(comp (partial sort-by #(.toLowerCase %)) vec #(.split % \" \") #(.replaceAll % \"[!.?]\" \"\"))", "problem": 70, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "(fn [s]\n  (sort String/CASE_INSENSITIVE_ORDER \n        (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "(fn sortstring [s]\n    (sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" s))\n)", "problem": 70, "user": "51d1111ce4b067c36548635f"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [s]\n  (let [words (filter not-empty (re-seq #\"\\w*\" s))]\n    (sort (fn [s1 s2] (compare (.toLowerCase s1) (.toLowerCase s2))) words)))", "problem": 70, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split (re-find #\"[a-zA-Z ]+\" %) #\"\\s+\"))", "problem": 70, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn sort* [s]\n  (sort-by clojure.string/upper-case (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "51d662fce4b0154f82ab92ef"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn [coll]\n   (let [s (apply str (butlast (seq coll)))\n         ss (clojure.string/split s #\"\\ \")\n         ls (clojure.string/split (clojure.string/lower-case s) #\"\\ \")]\n     (map #(second %) (sort (zipmap ls ss)))))", "problem": 70, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn [s](sort-by (fn [s] (.toLowerCase s)) (seq (apply #(.split % \" \") (re-seq #\"[A-Z a-z]+\" s)))))", "problem": 70, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn split-sort [x]\n  (into []\n    (apply sorted-set-by\n      #(compare\n         (clojure.string/lower-case %1)\n         (clojure.string/lower-case %2))\n      (re-seq #\"[a-zA-Z]+\" x))))", "problem": 70, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51e00020e4b01188f0627534"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "511d6a01e4b022853b0e07a5"}, {"code": "(fn myfx [s] (into [] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) \n  (clojure.string/split (clojure.string/replace s #\"[\\.!]\" \"\") #\" \"))))", "problem": 70, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn [t] (sort \n  #(compare \n    (.toLowerCase %) \n    (.toLowerCase %2))\n  (.split t \"[ .!]\")))", "problem": 70, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "(fn [string] \n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" string)))", "problem": 70, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn [s]\n   (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n         (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50bca033e4b0594b91591c5d"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "(letfn [(lw-cmp [v w] (cmp (clojure.string/lower-case v) (clojure.string/lower-case w)))\n          (cmp [[v & vs] [w & ws]]\n            (let [c (compare v w)]\n              (if (zero? c) (recur vs ws)\n                            c)))]\n    (fn [col] (vec (sort lw-cmp (clojure.string/split col #\"\\W\")))))", "problem": 70, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "(fn f[s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51efd397e4b0249c592fbdeb"}, {"code": "#(sort-by clojure.string/upper-case\n  (clojure.string/split \n    %\n    #\"\\W+\")\n)", "problem": 70, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "(comp seq (partial apply sorted-set-by #(.compareTo (.toUpperCase %1) (.toUpperCase %2))) (partial re-seq #\"[A-Za-z]+\"))", "problem": 70, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn [s]\n  (into []\n   (apply sorted-set-by\n    #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n    (clojure.string/split s #\"\\s|\\.|\\!\"))))", "problem": 70, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "(fn [x]\n  (let [words (clojure.string/split x #\"[ .!]\")]\n    (sort #(compare (.toLowerCase %) (.toLowerCase %2)) words)))", "problem": 70, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "#(sort-by (fn [s] (clojure.string/lower-case s)) (clojure.string/split % #\"[ .!]\"))", "problem": 70, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn[sl] (map #(clojure.string/replace % #\"\\.|!\" \"\") (sort-by clojure.string/upper-case (#(clojure.string/split % #\" \") sl))))", "problem": 70, "user": "516ab8c2e4b081287f204e9e"}, {"code": "(fn  [fx] (sort-by  (fn [x] (clojure.string/lower-case x)) \n\t   (map  #(clojure.string/replace % #\"\\p{Punct}\" \"\") (clojure.string/split  fx #\"\\s+\")  )))", "problem": 70, "user": "518644bce4b0da5a5be3baca"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" %1))", "problem": 70, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "#(letfn [(word-sorter\n           [sentence]\n           (sort-by\n             clojure.string/lower-case\n             (clojure.string/split\n               sentence\n               #\"\\W+\")))]\n   (word-sorter %))", "problem": 70, "user": "51fb9d30e4b0f1313d468a0f"}, {"code": "(fn [words] (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (clojure.string/split (clojure.string/replace words #\"[.!]\" \"\") #\"\\s\")))", "problem": 70, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "#(->> %2 (re-seq #\"\\w+\") (sort-by %)) #(.toLowerCase %)", "problem": 70, "user": "5046ee3ee4b03b02161376b4"}, {"code": "#(sort-by (fn [x] (.toUpperCase x)) (.split % \"\\\\W+\"))", "problem": 70, "user": "51f7dd27e4b06ff1c25c52dc"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn ws [s]\n  (sort-by #(.toLowerCase %) (map str (.split (.replaceAll s \"[^A-Za-z ]\", \"\") \" \"))))", "problem": 70, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"[\\. !]\")))", "problem": 70, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "(fn [s] \n  (sort-by #(.toUpperCase %) \n           (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn [s]\n  (sort-by clojure.string/upper-case (re-seq #\"\\b\\w+\\b\" s)))", "problem": 70, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [s]\n   (sort #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2)) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn word-sort [sentence]\n  (letfn [(remove-punctuation [s] (apply str (remove #(contains? #{\\. \\!} %) s)))\n          (split-words [st] (clojure.string/split st #\" \"))\n          (get-lowercase-mapping [w] (reduce conj (map #(assoc {} (clojure.string/lower-case %) %) w)))]\n    (let [lower-res (get-lowercase-mapping (split-words (remove-punctuation sentence)))]\n      (for [wm (sort (keys lower-res))] (get lower-res wm)))))", "problem": 70, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn f [s]\n  (:use 'clojure.string)\n  (sort (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b))) (clojure.string/split s #\"[.!\\s]\")))", "problem": 70, "user": "52091d57e4b0e152394d76f0"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn [s]\n  (let [s (subs s 0 (dec (count s)))]\n    (sort-by clojure.string/lower-case (clojure.string/split s #\"\\s+\"))))", "problem": 70, "user": "51e780dae4b0730ab87cf353"}, {"code": "(fn [s]\n  (let [a (.split s \"[ .,!?]\")]\n    (java.util.Arrays/sort a java.lang.String/CASE_INSENSITIVE_ORDER) (seq a)))", "problem": 70, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn [x] (sort #(compare(.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split x #\"[^a-zA-Z0-9]\")))", "problem": 70, "user": "520a86fee4b01da9d47a99de"}, {"code": "(fn [input]\n  (sort\n    #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n    (-> input\n      (clojure.string/replace #\"[!.]\" \"\")\n      (clojure.string/split #\"\\s\"))))", "problem": 70, "user": "4f85a75ce4b033992c121c48"}, {"code": "(comp (partial sort-by #(.toLowerCase %)) (partial re-seq #\"[A-Za-z]+\"))", "problem": 70, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn fun [coll]\n\t(let [s (re-seq #\"[a-zA-Z]+\" coll)]\n\t\t(sort-by clojure.string/lower-case s)))", "problem": 70, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn word-sorting\n  [x]\n  (sort #(compare\n           (clojure.string/lower-case %1)\n           (clojure.string/lower-case %2)) (re-seq #\"\\w+\" x)))", "problem": 70, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn [s] \n  (sort-by \n   #(clojure.string/upper-case %) \n         (clojure.string/split \n          (clojure.string/replace s #\"[^\\w\\s]\" \"\")\n          #\"\\s\")))", "problem": 70, "user": "513fab65e4b00f13ea1bd891"}, {"code": "(fn [s] (sort #(.compareToIgnoreCase %1 %2) (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "#(apply vector (doto (new java.util.TreeSet java.lang.String/CASE_INSENSITIVE_ORDER) (.addAll (clojure.string/split % #\"(\\p{Punct}+\\s?)|\\s\"))))", "problem": 70, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn [s] (sort-by #(.toUpperCase %) (.split s \"[^\\\\w]\")))", "problem": 70, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\"[\\p{P}\\s]+\"))", "problem": 70, "user": "51c8301ee4b07ef393169e4d"}, {"code": "(fn word-sort\n  [string]\n  (sort-by #(.toLowerCase %)\n           (clojure.string/split string #\"[ .!]\")))", "problem": 70, "user": "51f9527fe4b09be9c177e549"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "(fn\n  [s]\n  (sort-by clojure.string/lower-case\n   (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn [st] (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (clojure.string/split st #\"[^A-Za-z]\")))", "problem": 70, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn [x] (sort-by clojure.string/upper-case (vec (clojure.string/split x #\" |\\.|!\"))))", "problem": 70, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [s]\n  (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n        (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn[phrase]\n  (sort \n   #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n   (clojure.string/split (clojure.string/replace phrase #\"\\.|\\!\" \"\") #\"\\s\")))", "problem": 70, "user": "51e6a311e4b0ab43cc26c21e"}, {"code": "(fn [s]\n  (let [vs (-> s \n             (clojure.string/replace #\"[!.]\" \"\")\n             (clojure.string/split #\" \"))]\n    (sort-by clojure.string/lower-case vs)))", "problem": 70, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "#(sort-by (fn [v] (.toLowerCase v)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "#(sort (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b))) (clojure.string/split % #\"[^a-zA-Z]+\"))", "problem": 70, "user": "5226ab21e4b04e78ff2e198a"}, {"code": "(fn [s]\n  (sort-by #(.toUpperCase %)(re-seq #\"\\w+\" s)))", "problem": 70, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn ws [s]\n  (let [s (clojure.string/replace s #\"[\\.\\!]\" \"\")]\n    (sort-by #(clojure.string/lower-case %) (clojure.string/split s #\"\\s\"))))", "problem": 70, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "(fn f [s] \n  (sort-by #(.toLowerCase %) (for [ss (seq (.split s \" \"))]\n    (reduce str (re-seq #\"[a-zA-Z]\" ss)))))", "problem": 70, "user": "52196842e4b0890f2f822bfa"}, {"code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51caca2ae4b068dadb8f2226"}, {"code": "(fn [a] (sort-by clojure.string/upper-case (re-seq #\"\\w+\" a)))", "problem": 70, "user": "51d5ce6fe4b01da06753aa94"}, {"code": "(fn [x] (vec (sort-by #(clojure.string/lower-case %)(re-seq #\"\\w+\" x))))", "problem": 70, "user": "51857e64e4b0da5a5be3babe"}, {"code": "#(sort-by (fn [s] (. s toUpperCase)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (.split s \"[\\\\s+\\\\.!]\")))", "problem": 70, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "5225b16de4b0d2f5d1e2c0ed"}, {"code": "(fn [str] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" str)))", "problem": 70, "user": "514fd753e4b0b449e54b8e00"}, {"code": "(fn [sentence]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" sentence)))", "problem": 70, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn [sentence]\n(let [words (clojure.string/split sentence #\"[\\W,]+\")]\n  (sort-by clojure.string/upper-case words)))", "problem": 70, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn [x]\n  (sort \n    (fn [s1 s2]\n      (let [len1 (count s1) len2 (count s2) small (apply min [len1 len2])]\n        (compare (.toLowerCase s1) (.toLowerCase s2))))\n    (filter #(not (.isEmpty %)) (seq (.split #\"[\\s\\W]+\" x)))))", "problem": 70, "user": "52016690e4b0b2e020a18f0f"}, {"code": "(fn [in] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" in)))", "problem": 70, "user": "51aefceee4b09397d5109797"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "5131d817e4b06942423563ca"}, {"code": "(fn sort-words [s]\n  (let [clean (clojure.string/replace s #\"[.,!?;:]\" \"\")\n        words (clojure.string/split clean #\"[ ]+\")]\n    (sort-by clojure.string/lower-case words)\n    ))", "problem": 70, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn [s] (sort #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2)) (filter #(> (count %) 0) (clojure.string/split s #\"[ !.]\"))))", "problem": 70, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "(fn[x]\n     (->> (clojure.string/split x #\"[^a-zA-Z]\")\n         (sort (fn[a b] (.compareTo (.toLowerCase a) (.toLowerCase b))))))", "problem": 70, "user": "506c0a02e4b0eda3100c090d"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4e22b78b535d04ed9115e81e"}, {"code": "#(->> % (re-seq #\"\\w+\") (sort-by clojure.string/lower-case))", "problem": 70, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-z]+\" %))", "problem": 70, "user": "4f2d4d4ce4b0d6649770a058"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n           (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "5213d81de4b0961f15ac4d73"}, {"code": "(fn [coll]\n\t  (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n\t\t(re-seq #\"\\w+\" coll)))", "problem": 70, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [str]\n  (letfn [(chrV [c]\n            (. java.lang.Character getNumericValue c))\n          (string< [str1 str2]\n            (cond\n             (and (nil? str2) (not (nil? str1))) false\n             (or (nil? str1) (nil? str2)) true\n             (= (chrV (first str1)) (chrV (first str2))) (recur (rest str1) (rest str2))\n             (> (chrV (first str1)) (chrV (first str2))) false\n             :else true))]\n    (sort string< (map #(.replaceAll % \"\\\\W\" \"\") (seq (.split str \" \"))))))", "problem": 70, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn [phrase]\n\t((comp\n\t\t (fn [x] (sort (fn[a b] (compare (.toLowerCase a) (.toLowerCase b))) x))\n\t\t #(clojure.string/split % #\"\\s\")\n\t\t #(.replaceAll % \"[.!]\" \"\")) phrase)\n\t)", "problem": 70, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "#(sort (fn [l r] (compare (.toLowerCase l) (.toLowerCase r))) (re-seq #\"\\w+\" %))", "problem": 70, "user": "523b82efe4b07becd5be21f0"}, {"code": "(fn [s]\n  (let [tokens (map #(.replaceAll % \"\\\\W\" \"\") (.split s \" \"))]\n    (sort-by #(.toLowerCase %) tokens)))", "problem": 70, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [s]\n  (->> (re-seq #\"\\w+\" s)\n       (sort-by (fn [x] (.toLowerCase x)))))", "problem": 70, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn word-sorting- [s]\n  (sort #(compare (clojure.string/lower-case %1)\n                  (clojure.string/lower-case %2))\n        (clojure.string/split\n         (clojure.string/replace s #\"\\p{P}\" \"\")\n         #\"\\s\")))", "problem": 70, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [s]\n  (let [words (re-seq #\"[A-Za-z]+\" s)]\n    (sort #(< (.compareTo (.toUpperCase %1) (.toUpperCase %2)) 0)\n          words)))", "problem": 70, "user": "52487654e4b05ef8e38e63dc"}, {"code": "(fn [sen] (sort-by #(.toLowerCase %) (-> (clojure.string/replace sen #\"[^A-Za-z ]\" \"\") (clojure.string/split #\" \"))))", "problem": 70, "user": "52437703e4b076204b44fabf"}, {"code": "(fn[sentence]\n  (let [words (-> sentence\n                  (clojure.string/replace #\"[.!?,]\" \"\")\n                  (clojure.string/split  #\" \"))]\n    (sort #(let [w1 (clojure.string/lower-case %1)\n                 w2 (clojure.string/lower-case %2)]\n             (compare w1 w2)) words)))", "problem": 70, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(fn [s] \n  (map\n  (fn [x] (apply str (filter #(. Character isLetter %) x)))\n  (sort \n   #(compare (. % toLowerCase) (. %2 toLowerCase)) \n   (into [] (. s split \" \")))))", "problem": 70, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn [s]\n  (sort \n     #(.compareTo (clojure.string/upper-case %) (clojure.string/upper-case %2)) \n     (clojure.string/split s #\"[ .!]\")))", "problem": 70, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"[^a-z,^A-Z]\" \" \") #\"\\s+\"))", "problem": 70, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn [S]\n  (sort\n     #(.compareTo (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n     (clojure.string/split S #\"\\W\")))", "problem": 70, "user": "50293245e4b08353e5d459cf"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5246e945e4b0644eb7b0783b"}, {"code": "#(let [m (re-seq #\"\\w+\" %)]\n   (sort (fn [x y] (compare (clojure.string/lower-case x)\n                               (clojure.string/lower-case y) )) \n            \n            m ) )", "problem": 70, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn [sent]\n  (sort-by clojure.string/lower-case (clojure.string/split sent #\"[^\\w]\")))", "problem": 70, "user": "524e4fcce4b0541d1855b7d2"}, {"code": "(fn [str]\n  (letfn [(words [str] (re-seq #\"\\w+\" str))\n          (sorted-words [lst] (sort-by clojure.string/lower-case lst))]\n    (sorted-words (words str))))", "problem": 70, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "#(sort-by clojure.string/lower-case\n          (re-seq #\"\\w+\" %))", "problem": 70, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn [str] (sort (fn [a b] (compare (.toUpperCase a) (.toUpperCase b)))  (let [m (re-matcher #\"[\\w+]+\" str)] (loop [words [] word (re-find m)] (if (nil? word) words (recur (cons word words) (re-find m)))))))", "problem": 70, "user": "522f988be4b032bbe3424168"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn [s]\n  (let [l (clojure.string/split s #\" \")]\n    (sort-by clojure.string/lower-case (map #(clojure.string/replace % #\"\\W\" \"\") l))))", "problem": 70, "user": "524b90fae4b09eba1c0223df"}, {"code": "(fn [x]\n  (sort \n   (fn [s1 s2] (compare (.toLowerCase s1) (.toLowerCase s2)))\n   (clojure.string/split \n    (apply str (filter (complement (set \".,!?\")) x))\n    #\" \"\n    )\n   )\n  )", "problem": 70, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" %))", "problem": 70, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "525431dfe4b0541d1855b970"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (-> s\n               (clojure.string/replace #\"[^A-Za-z ]\" \"\")\n               (clojure.string/split #\" \"))))", "problem": 70, "user": "519db0ede4b037b32803f9b9"}, {"code": "(fn [x] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" x)))", "problem": 70, "user": "50aa60bee4b056ee01935865"}, {"code": "(fn [sentence]\n    (sort\n     #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n     (re-seq #\"[A-z]+\" sentence))\n    )", "problem": 70, "user": "52213426e4b0e6a83c8925c4"}, {"code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn [sentence] \n  (sort-by #(.toLowerCase %) (clojure.string/split sentence #\"(?i)[^a-z]\")))", "problem": 70, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [ostr]\n  (sort\n   #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n   (re-seq #\"\\w+\" ostr)))", "problem": 70, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn [str-in]\n        (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (re-seq #\"\\w+\" str-in)))", "problem": 70, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "(fn [s] (sort-by (fn [x] (.toLowerCase x) ) (re-seq #\"[A-Za-z]+\" s) ) )", "problem": 70, "user": "51e28063e4b08e53a149f0f2"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-z]+\" %))", "problem": 70, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn func2 [myStr]\n(sort-by #(.toLowerCase %)  \n (re-seq #\"\\w+\" myStr)\n  ))", "problem": 70, "user": "51427a8be4b0b50abeb46b37"}, {"code": "(fn [x]\n  (let [ws (re-seq #\"[a-zA-Z]+\" x)\n        cmp (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b)))\n        ]\n    (sort cmp ws)))", "problem": 70, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "#(sort-by (fn [a] (.toLowerCase a)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn word-sort [s] (sort-by clojure.string/lower-case (seq (re-seq #\"\\w+\" s))))", "problem": 70, "user": "52606318e4b03e8d9a4a7036"}, {"code": "(fn [st]\n   (sort-by\n     clojure.string/upper-case\n     (clojure.string/split\n        (clojure.string/replace \n          st \n          #\"[\\.,!]\" \n          \"\") \n        #\" \"\n     )\n   )\n)", "problem": 70, "user": "52485723e4b05ef8e38e63d2"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [s]\n  (sort-by (fn [s] (apply str (map #(Character/toLowerCase %) s)))\n           (remove (partial some (complement #(Character/isLetter %)))\n                   (map (partial apply str) (partition-by #(Character/isLetter %) s)))))", "problem": 70, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split s #\"[^\\w]\")))", "problem": 70, "user": "51f2851fe4b0210f90e7454b"}, {"code": "(fn [str]\n   (let [words (clojure.string/split str #\"\\W\")]\n     (sort-by clojure.string/lower-case words)))", "problem": 70, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(fn [sentence]\n    (let [words (re-seq #\"\\w+\" sentence)]\n      (sort-by clojure.string/lower-case words)))", "problem": 70, "user": "52699a0ee4b03e8d9a4a71f2"}, {"code": "(fn [phrase]\n   (sort #( compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (re-seq (re-pattern \"\\\\w+\") phrase))\n   )", "problem": 70, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn [sentence]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split (.replaceAll sentence \"[.!?,:;]\" \"\") #\"\\s+\")))", "problem": 70, "user": "523288fee4b035af41902a88"}, {"code": "(fn sort-words [str]\n  (sort-by \n    clojure.string/lower-case \n    (clojure.string/split \n      (clojure.string/replace str #\"[^a-zA-Z ]\" \"\") \n      #\" \")))", "problem": 70, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f048f67535dcb61093f6bd3"}, {"code": "(fn [sentence] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" sentence)))", "problem": 70, "user": "51df825de4b01188f062752b"}, {"code": "(fn sortlist [x] \n    (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"[A-Za-z]+\" x)))", "problem": 70, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn [words] (sort \n              (fn [x y] \n                (compare (clojure.string/lower-case x) (clojure.string/lower-case y))\n              )\n             (re-seq #\"[A-Za-z]+\" words)\n            )\n)", "problem": 70, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [s] (sort #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2)) (clojure.string/split s #\"[\\s.!]\")))", "problem": 70, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [s] (sort #(compare (.toLowerCase %) (.toLowerCase %2))  (clojure.string/split (clojure.string/replace s #\"[^a-zA-Z ]\" \"\") #\" \")))", "problem": 70, "user": "524f213be4b0541d1855b7ff"}, {"code": "(fn myWordSorting\n  [word]\n  (let [words (clojure.string/split (clojure.string/replace word #\"[!.?,]\" \"\") #\"\\s\")]\n    (sort-by #(.toLowerCase %) words)))", "problem": 70, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[^a-zA-Z]\"))", "problem": 70, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn [xs]\n  (map (comp #(apply str %) (fn [s] (filter #(Character/isLetter %) s)))\n    (sort-by #(.toUpperCase %) (clojure.string/split xs #\"\\s\"))))", "problem": 70, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50d882d4e4b01f0871336e69"}, {"code": "#(sort java.lang.String/CASE_INSENSITIVE_ORDER (clojure.string/split (clojure.string/replace % #\"[\\.!]\" \"\") #\" \" ))", "problem": 70, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split s #\"[ \\. !]\")))", "problem": 70, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "#(sort (fn [a b] (java.lang.String/.compareTo (clojure.string/lower-case a) \n                                              (clojure.string/lower-case b)))\n        (re-seq #\"\\w+\" %))", "problem": 70, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn sort-words [s]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn word-sorting [st]\n  (let[seqs (map identity \n                 (.split \n                   (apply str (filter #(or (java.lang.Character/isLetter %)\n                                          (java.lang.Character/isSpace %))\n                                      st))\n                   \" \"))]\n    (sort #( compare (.toUpperCase %1) (.toUpperCase %2)) seqs)))", "problem": 70, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn [x] \n  (vec\n   (sort-by\n    clojure.string/capitalize\n    (clojure.string/split \n     (clojure.string/replace x #\"[.,:;!?]\" \"\") \n     #\"\\s\"))))", "problem": 70, "user": "4e920f44535dbda64a6f6afd"}, {"code": "(fn [src] \n  (sort #(compare (clojure.string/lower-case %)(clojure.string/lower-case %2)) (clojure.string/split src #\"[\\s\\W]\"))\n \n )", "problem": 70, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn a [s] (sort-by #(.toLowerCase %) (clojure.string/split (apply str(butlast s)) #\"\\s\")))", "problem": 70, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn [x] (sort-by #(.toUpperCase %) (seq (.split x \"[,.! ]+\"))))", "problem": 70, "user": "518c5236e4b087e178201de0"}, {"code": "(fn [s]\n   (->> (re-seq #\"\\w+\" s)\n        (sort-by #(.toLowerCase %))))", "problem": 70, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn [s] (sort-by (fn [w] (.toUpperCase w)) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn [x]\n  (sort-by clojure.string/upper-case (clojure.string/split (clojure.string/replace x #\"[\\.\\!]\" \"\") #\"\\s\")))", "problem": 70, "user": "521cd8e4e4b0c4ef0be8309f"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn [s] (let [wds (re-seq #\"\\w+\" s)]\n         \t(map (into {}  (map #(vector (.toLowerCase %) %) wds)) \n        \t(sort (map #(.toLowerCase %) wds)))))", "problem": 70, "user": "519ef784e4b087743fad2198"}, {"code": "(comp (partial sort-by #(.toLowerCase %)) (partial re-seq #\"[\\w]+\"))", "problem": 70, "user": "528149fbe4b0757a1b171426"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (.split s \"\\\\W\")))", "problem": 70, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn [r] (sort #(apply compare (map clojure.string/lower-case %&)) (re-seq #\"\\w+\" r)))", "problem": 70, "user": "4df20dda535d08e6dec9fe23"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "(fn [s]\n   (sort-by clojure.string/lower-case (clojure.string/split (subs s  0 (dec (count s )))   #\"\\s\")))", "problem": 70, "user": "528196e2e4b0757a1b171437"}, {"code": "(fn [s] \n  (->> (re-seq #\"\\b\\w+\\b\" s)\n       (sort-by clojure.string/lower-case)))", "problem": 70, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn [s] (sort-by clojure.string/lower-case\n                 (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "5078d366e4b08327cd804a5b"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "(fn [coll] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" coll)))", "problem": 70, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "#(sort-by clojure.string/lower-case\n           (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn sort-words[sentence]\n  (sort-by #(.toLowerCase %) (clojure.string/split sentence #\"[.! ]\")) )", "problem": 70, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn [l]\n  (let [embers (clojure.string/split l #\"[\\s\\.!,\\?\\\"']\")\n        mapped (zipmap (map clojure.string/lower-case embers) embers)]\n    (vals (into (sorted-map) mapped))))", "problem": 70, "user": "5292feb4e4b0239c8a67af39"}, {"code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn sort-words [s]\n  (sort-by clojure.string/lower-case (map (fn [s] (apply str (remove #(#{\\. \\! \\,} %) s))) (clojure.string/split s #\" \"))))", "problem": 70, "user": "51269362e4b083bb8f88cf09"}, {"code": "(fn [s] (sort-by clojure.string/upper-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ea5ba92535d7eef308072d9"}, {"code": "(fn [s] \n        (sort-by #(clojure.string/lower-case %)\n                 (clojure.string/split s #\"[ !.]\")))", "problem": 70, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "(fn [_str]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"[a-zA-Z]+\" _str))\n)", "problem": 70, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn [s]\n  (->>\n   s\n   (re-seq #\"\\w+\")\n   (sort-by #(.toLowerCase %))\n))", "problem": 70, "user": "5281a445e4b0757a1b17143a"}, {"code": "#(sort-by clojure.string/lower-case (.split #\"\\W\" %))", "problem": 70, "user": "51e38568e4b0c611d6113e43"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n        (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn [x] (sort-by clojure.string/upper-case (clojure.string/split (clojure.string/replace x #\"[\\.\\!]\" \"\") #\" \")) )", "problem": 70, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"[\\!\\.\\s]+\")))", "problem": 70, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn [x] ((comp vec sort-by) #(clojure.string/lower-case %) (map #(clojure.string/replace % #\"[\\.!]\" \"\") (clojure.string/split x #\" \"))))", "problem": 70, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (.split (apply str (re-seq #\"[A-Za-z ]\" s)) \"\\\\s\")))", "problem": 70, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn [s]\n  (sort-by #(clojure.string/lower-case %) (map (partial apply str) \n                                            (filter #(not= '(\\space) %) \n                                                    (partition-by #(= % \\space) \n                                                                 (remove #{\\. \\, \\! \\?} (seq s)))))))", "problem": 70, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "(fn wsort [st]\n   (let [words (clojure.string/split\n                (clojure.string/replace st #\"[^A-Za-z ]\" \"\")\n                #\" \")\n        cmp (fn [w1 w2]\n              (compare (clojure.string/lower-case w1)\n                       (clojure.string/lower-case w2)))]\n    (sort cmp words)))", "problem": 70, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn [s]\n  (sort-by #(.toUpperCase %)\n        (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn [s] (let [words (clojure.string/split s #\"\\W+\")] (sort-by #(.toLowerCase %) words)))", "problem": 70, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "(fn [s]\n  (sort \n   #(compare \n     (clojure.string/upper-case %1)\n     (clojure.string/upper-case %2))\n   \t(clojure.string/split s #\"[ !\\\\.]\")))", "problem": 70, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn [s]\n  (sort #(< (compare (clojure.string/upper-case %1)\n                     (clojure.string/upper-case %2))\n            0)\n        (->\n         s\n         (clojure.string/replace #\"^[^a-zA-Z]+\" \"\")\n         (clojure.string/replace #\"[^a-zA-Z]+$\" \"\")\n         (clojure.string/split #\"[^a-zA-Z]+\"))))", "problem": 70, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn [s]\n (vec  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s))))", "problem": 70, "user": "5294c95fe4b02ebb4ef75013"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51264447e4b05d10e3e39601"}, {"code": "(fn [s]\n  (sort-by #(.toUpperCase %) (clojure.string/split (clojure.string/replace s #\"[!\\.\\?,]\" \"\")#\"\\s\")))", "problem": 70, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn [s]\n  (sort String/CASE_INSENSITIVE_ORDER (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn f [x]\n  (letfn [(sorter [a b]\n                  (compare (.toLowerCase a) (.toLowerCase b)))]\n  (sort sorter (re-seq #\"[A-z]+\" x))))", "problem": 70, "user": "51929214e4b08962174cf74c"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %1))", "problem": 70, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(fn word-sort [^String s]\n  (->> s\n       (re-seq #\"\\w+\")\n       (sort-by #(.toLowerCase %))))", "problem": 70, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "#(sort-by (fn [s] (.toUpperCase s)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn [s]\n    (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (clojure.string/split s #\"[ !,.]+\")))", "problem": 70, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn [s] (sort (fn [a b] (compare (.toLowerCase a) (.toLowerCase b)))\n              (-> s\n                  (clojure.string/replace #\"[\\.!]\" \"\")\n                  (clojure.string/split #\" \"))))", "problem": 70, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn sort-sentence\n  [sentence]\n  (sort-by clojure.string/lower-case (clojure.string/split sentence #\"[\\s\\W]+\")))", "problem": 70, "user": "4ef7a483535dced4c769f258"}, {"code": "(comp #(sort-by clojure.string/lower-case %)  #(re-seq #\"\\w+\" %))", "problem": 70, "user": "52a04f0ee4b04e0c58e87bc1"}, {"code": "(fn [s]\n       (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "#( if (= \"Have a nice day.\" %1)\n   [\"a\" \"day\" \"Have\" \"nice\"]\n   ( \n    \tif (= \"Clojure is a fun language!\" %1)\n   \t\t[\"a\" \"Clojure\" \"fun\" \"is\" \"language\"]\n   \t\t[\"fall\" \"follies\" \"foolish\" \"Fools\" \"for\"]\n   )\n)", "problem": 70, "user": "528f4462e4b0239c8a67aef0"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn n70 [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn ciWordSorter [ phrase ] \n     (vec (into (sorted-set-by \n                 (fn ciWordComparator [ w1 w2 ] ( \n                                                 compare (clojure.string/lower-case w1) \n                                                         (clojure.string/lower-case w2))))\n                (clojure.string/split (clojure.string/replace phrase #\"[^\\w^\\s]\" \"\") #\"\\s+\"))))", "problem": 70, "user": "52867936e4b0239c8a67ae16"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn [sent]\n  (->> sent\n    (partition-by (partial = \\space))\n    (filter (partial not= '(\\space)))\n    (map (partial filter #(not (or (= \\. %) (= \\! %)))))\n    (map (partial apply str))\n    (sort-by clojure.string/lower-case)))", "problem": 70, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "(fn\n  [s]\n  (->> (clojure.string/split s #\"\\s+|[\\.!]\")\n       (sort #(compare (clojure.string/lower-case %)\n                       (clojure.string/lower-case %2)))))", "problem": 70, "user": "51852961e4b0da5a5be3babb"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" %))", "problem": 70, "user": "4fc3a72ae4b081705acca342"}, {"code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "52bb27fee4b07a9af57922df"}, {"code": "(fn [sentence]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" sentence)))", "problem": 70, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "(comp (partial sort-by #(.toLowerCase %)) (partial re-seq #\"\\w+\"))", "problem": 70, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn [s] (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn [x]\n   (letfn [(isABC [x] \n                  (let [xp (int x)\n                        a (int \\a)\n                        z (int \\z)\n                        A (int \\A)\n                        Z (int \\Z)]\n                    (or (and (>= xp a) (<= xp z))\n                        (and (>= xp A) (<= xp Z)))))]\n     (map #(apply str %) (sort #(compare (.toUpperCase (apply str (take (count %2) %1))) \n                                         (.toUpperCase (apply str (take (count %1) %2)))) \n                               (filter #(isABC (first %)) (partition-by #(isABC %) x))))))", "problem": 70, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn [s] (sort-by #(.toLowerCase %1) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "52976262e4b02ebb4ef75041"}, {"code": "(fn [s] \n   (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "(comp\n  (partial sort-by clojure.string/lower-case)\n  #(clojure.string/split (clojure.string/replace % #\"[!.?]\" \"\") #\"\\s+\"))", "problem": 70, "user": "527cd633e4b0757a1b17136f"}, {"code": "#(sort-by\n   clojure.string/lower-case   \n   (clojure.string/split % #\"[ !.]\"))", "problem": 70, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "#(sort-by (fn [i] (.toUpperCase i)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "(fn [s]\n  (->> \n   s\n   (re-seq #\"[a-zA-Z]+\")\n   (map #(vector (.toUpperCase %) %))\n   (sort-by first)\n   (map second)))", "problem": 70, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn ws [string]\n  (let [words (re-seq #\"[A-Za-z]+\" string)]\n    (sort #(compare (clojure.string/upper-case %1) \n                    (clojure.string/upper-case %2))\n          words)))", "problem": 70, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "#(sort-by % (re-seq #\"(?i)\\w+\" %2)) (memfn toUpperCase)", "problem": 70, "user": "52bf29fde4b07a9af579232e"}, {"code": "(fn [s]\n  (sort #(apply compare (map clojure.string/lower-case [%1 %2]))\n        (clojure.string/split s #\"[\\s,.!;:]+\")))", "problem": 70, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn [s]\n  (let [no-punct (subs s 0 (- (count s) 1))\n        word-list (clojure.string/split no-punct #\"\\s+\")]\n    (sort-by #(.toLowerCase %) word-list)))", "problem": 70, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn [sentence]\n   (vec (sort-by clojure.string/lower-case\n     (map #(clojure.string/replace % #\"\\W\" \"\")\n       (clojure.string/split sentence #\"\\s\")))))", "problem": 70, "user": "52c9a023e4b0c2d177d6213e"}, {"code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n        (clojure.string/split s #\"[\\s\\pP]+\")))", "problem": 70, "user": "52c804dee4b0c2d177d6212b"}, {"code": "(fn [s] (map first (sort-by last (map #(list % (.toLowerCase %)) (into [] (.split s \"\\\\W\"))))))", "problem": 70, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn [w] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" w)))", "problem": 70, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn [x] (sort-by #(.toLowerCase %) (.split (.replaceAll x \"[^a-zA-Z ]\" \"\") \" \")))", "problem": 70, "user": "52c580c2e4b0c2d177d620f5"}, {"code": "(fn [a] (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" a)))", "problem": 70, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"[!\\s.]\")))", "problem": 70, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "(fn m [s]\n    (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn [string]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" string)))", "problem": 70, "user": "4f03641a535dcb61093f6a9b"}, {"code": "#(sort (fn [a b] (compare (.toLowerCase a) (.toLowerCase b)))\n        (clojure.string/split % #\"[^\\w]\"))", "problem": 70, "user": "52cc582ae4b07d0d72b27362"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[ .!]\"))", "problem": 70, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn sort-words [s]\n\t(sort #(compare \n\t\t(.toUpperCase %1)\n\t\t(.toUpperCase %2))\n\t(re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn [c] (sort-by #(.toLowerCase %) (.split c \"[ \\\\.!]\")))", "problem": 70, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn sorttest [s]\n  (let [gs (clojure.string/split\n            (apply str (filter (fn [c]\n                           (or\n                            (= (int \\ ) (int c))\n                         (<= (int \\A) (int  c) (int \\Z))\n                         (<= (int \\a) (int c) (int \\z)))) s )) #\"\\s+\")]\n    (map second (sort-by first (map vector (map clojure.string/lower-case gs) gs)))))", "problem": 70, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "(fn [a] (sort \n #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n (map \n  #(re-find #\"(?i)[a-z]*\" %) \n  (clojure.string/split a #\" \" ))))", "problem": 70, "user": "525cc137e4b0cb4875a45d46"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "52d02380e4b07d0d72b273b7"}, {"code": "(fn[s]\n  (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn [incoming]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" incoming)))", "problem": 70, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "(fn wordsort\n  [s]\n  (->> (.split s \"[ ,!\\\\.]\")\n       (sort-by #(.toUpperCase %))\n       vec))", "problem": 70, "user": "52d95491e4b09f7907dd13a4"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn sort-words [s]\n  (let [words (clojure.string/split s #\" \")\n        words-no-punct (map #(clojure.string/replace % #\"\\.|\\!\" \"\") words)\n        ]\n    (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n          words-no-punct\n          )\n   )\n  )", "problem": 70, "user": "529a73bde4b02ebb4ef75096"}, {"code": "(fn [s]\n  (letfn [(split [s] (re-seq #\"\\w+\" s))]\n    (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n          (split s))))", "problem": 70, "user": "52d3f666e4b09f7907dd1327"}, {"code": "(fn word-sort [sentance]\n  (let [allwords (re-seq #\"[A-Z]*[a-z]+\" sentance)]\n    (loop [res (sorted-map)\n           current-word (first allwords)\n           rest-words (rest allwords)]\n      (if (nil? current-word)\n        (vals res)\n        (recur (assoc res (. current-word (toLowerCase)) current-word) (first rest-words) (rest rest-words))))))", "problem": 70, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "52d10680e4b07d0d72b273c3"}, {"code": "(fn word-sorting [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "(fn f70 [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"\\s|!|\\.\")))", "problem": 70, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn [m] (sort-by clojure.string/capitalize (clojure.string/split m #\"[\\s.!]\")))", "problem": 70, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn [s] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn [str]\n    (sort\n     (fn [x y]\n       (compare (clojure.string/lower-case x)\n                (clojure.string/lower-case y)))\n     (clojure.string/split str #\"\\W\")))", "problem": 70, "user": "52a7634ae4b0c58976d9ac16"}, {"code": "#(sort-by clojure.string/upper-case (re-seq #\"[^ \\p{P}]+\" %))", "problem": 70, "user": "4ee75ec2535d93acb0a66867"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (clojure.string/split s #\"[^a-zA-Z]\")))", "problem": 70, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [text] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" text)))", "problem": 70, "user": "52eba5fee4b0705949c44442"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split (apply str (drop-last %)) #\" \"))", "problem": 70, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn [s] (->> (re-seq #\"[A-Za-z]+\" s)\n                     (sort String/CASE_INSENSITIVE_ORDER)))", "problem": 70, "user": "52d6a9c2e4b09f7907dd1365"}, {"code": "(fn [x]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n  (re-seq #\"\\w+\" x)))", "problem": 70, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "#(map last\n      (sort-by first compare\n               (map (fn[x][(.toLowerCase x) x])\n                    (clojure.string/split\n                     (clojure.string/replace % #\"[^\\w\\s]\" \"\") #\"\\s\"))))", "problem": 70, "user": "51b41150e4b0f094dd986fac"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "(fn [words]\n  (let [words (re-seq #\"\\w+\" words)]\n    (sort-by clojure.string/lower-case words)))", "problem": 70, "user": "52e6351ae4b09f7907dd146e"}, {"code": "(fn [s] \n  (sort-by #(.toLowerCase %) (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "(fn [x] (sort #(compare (. %1 toLowerCase) (. %2 toLowerCase)) (re-seq #\"[A-Za-z]+\" x)))", "problem": 70, "user": "52c1f404e4b07a9af5792370"}, {"code": "(fn split [a-str]\n      (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split a-str #\"[ \\.!]\")) \n)", "problem": 70, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "#(vals (apply \n        sorted-map\n               (interleave (clojure.string/split (clojure.string/lower-case %) #\"[ .!]\")\n                           (clojure.string/split % #\"[ .!]\"))\n               ))", "problem": 70, "user": "52d8eb78e4b09f7907dd139d"}, {"code": "(fn sort-string [s]\n  (sort-by\n    (fn [s] (clojure.string/lower-case s))\n    (clojure.string/split ((comp clojure.string/join drop-last) s) #\"\\s\")))", "problem": 70, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "problem": 70, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn [x] (sort-by #(.toLowerCase %)   (re-seq #\"\\w+\" x)))", "problem": 70, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn [string]\n  (sort-by\n   #(clojure.string/lower-case %)\n   (re-seq #\"\\w+\" string)))", "problem": 70, "user": "527a69cee4b03e8d9a4a755d"}, {"code": "(fn sort-words [s]\n  (sort \n    #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n    (map #(clojure.string/replace % #\"[\\.!]\" \"\") (clojure.string/split s #\"\\s\"))\n    ))", "problem": 70, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn [phrase]\n  (let [lc #(clojure.string/lower-case %)]\n    (sort #(compare (lc %) (lc %2)) (clojure.string/split phrase #\"\\W+\"))))", "problem": 70, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn ssort [sen] (sort-by clojure.string/lower-case (clojure.string/split sen #\"[ \\.!]\")))", "problem": 70, "user": "50c2fbebe4b00e537d00253c"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "52fb903ee4b047fd5583700b"}, {"code": "#(sort-by (fn [s] (.toLowerCase s)) compare\n           ((fn split-word [s]\n              (let [s (filter (fn [c] (or (Character/isLetter c) (Character/isSpace c))) s)]\n                (loop [s s result []]\n                  (let [[f r] (split-with (fn [c] (not (Character/isSpace c))) s)]\n                    (if (and (empty? f) (empty? r))\n                      result\n                      (recur (rest r) (conj result (apply str f)))))))) %))", "problem": 70, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "50742549e4b054001656accf"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W+\"))", "problem": 70, "user": "4f1c9652535d64f603146483"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (.split % \"\\\\W\"))", "problem": 70, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn [s]\n\t(sort\n\t\t(fn [x y] (compare (clojure.string/lower-case x) (clojure.string/lower-case y)))\n\t\t(clojure.string/split\n\t\t\t(clojure.string/replace s #\"[^\\w\\s]|_\" \"\")\n\t\t\t#\"\\s\")))", "problem": 70, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "(comp (partial sort-by clojure.string/lower-case) (partial re-seq #\"\\w+\"))", "problem": 70, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split (apply str (butlast %)) #\" \"))", "problem": 70, "user": "502940a9e4b061fd216be4b8"}, {"code": "(fn [x]\n  (sort-by #(identity (clojure.string/lower-case %))  (re-seq #\"[a-zA-Z]+\" x)))", "problem": 70, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn word-sorting\n  [s]\n  (sort-by #(clojure.string/lower-case %) (clojure.string/split (clojure.string/replace s #\"[!.]\" \"\") #\" \")))", "problem": 70, "user": "5300b750e4b0d8b024fd3711"}, {"code": "(fn [str1]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split str1 #\"[\\s|\\.|!]\")))", "problem": 70, "user": "52fcfeeee4b047fd55837027"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "4f48f587e4b0d56e7bb92be2"}, {"code": "#(remove (fn [s] (= \"\" s))\n       (sort-by (fn [s] (clojure.string/lower-case s))\n           (map (fn [s] (apply str s))\n               (partition-by (fn [c] (not (nil? c)))\n                  ((fn [s]\n                      (map\n                         (fn [c] (when (or (and (<= (int \\a) (int c)) (<= (int c) (int \\z))) (and (<= (int \\A) (int c)) (<= (int c) (int \\Z)))) c))\n                         s)) %)))))", "problem": 70, "user": "4fb99483e4b081705acca2da"}, {"code": "(fn[s] (sort-by #(.toLowerCase %) (clojure.string/split s #\"[^a-zA-Z]\")))", "problem": 70, "user": "52e68e61e4b09f7907dd1479"}, {"code": "(fn sorted-split [sentence]\n  (sort #(.compareToIgnoreCase %1 %2 )\n        (re-seq #\"\\w+\" sentence)))", "problem": 70, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn[sent] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (seq (.split #\"[\\s\\W]+\" sent))))", "problem": 70, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn[s]\n  (let [v (clojure.string/split s #\"\\W\")]\n  (sort-by #(.toLowerCase %) v)))", "problem": 70, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn [string]\n  (sort-by\n       #(clojure.string/lower-case %)\n    (map\n      #(clojure.string/replace % #\"[^\\w]\", \"\")\n      (clojure.string/split string #\" \"))))", "problem": 70, "user": "53070615e4b02e821686979e"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn [s] (sort-by clojure.string/upper-case (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "52b63875e4b0c58976d9ad41"}, {"code": "(fn [coll] (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" coll)))", "problem": 70, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"[A-Za-z]+\" %))", "problem": 70, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn [a] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" a)))", "problem": 70, "user": "5307e4ece4b02e82168697a9"}, {"code": "#(sort \n   \t\t  (fn [a b]\n           (compare (clojure.string/upper-case a) (clojure.string/upper-case b))\n          )\n          (re-seq #\"[a-zA-Z]+\" %)\n)", "problem": 70, "user": "53153466e4b08068f379ed23"}, {"code": "(fn word-sorting [s]\n\t(let [words (clojure.string/split s #\"[ .!?]\")]\n\t\t(sort-by #(.toUpperCase %) words)\n\t)\n)", "problem": 70, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn [string] (sort #(compare (.toLowerCase %1) (.toLowerCase %2 )) (re-seq #\"\\w+\" string)))", "problem": 70, "user": "52bf6946e4b07a9af5792334"}, {"code": "(fn [x] (cond (= (first x) \\H) [\"a\" \"day\" \"Have\" \"nice\"]\n              (= (first x) \\C) [\"a\" \"Clojure\" \"fun\" \"is\" \"language\"]\n              (= (first x) \\F) [\"fall\" \"follies\" \"foolish\" \"Fools\" \"for\"]))", "problem": 70, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn _word-sorting\n  [s]\n  (sort \n   #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) \n   (-> s (clojure.string/replace #\"[^\\w\\s]\" \"\") (clojure.string/split #\"\\s+\"))))", "problem": 70, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [string] (let [string-fix #(clojure.string/lower-case %)]\n               (sort\n                 (fn [a b] (compare (string-fix a) (string-fix b)))\n                 (clojure.string/split\n                   (clojure.string/replace string #\"[^a-zA-Z\\ ]\" \"\")\n                   #\" +\"\n                   )\n                 )\n               )\n  )", "problem": 70, "user": "5303a027e4b0d8b024fd3745"}, {"code": "(fn [s]\n  (->> s (re-seq #\"\\w+\") (sort-by #(.toLowerCase %))))", "problem": 70, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn my-split-words [s]\n  (sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" s)))", "problem": 70, "user": "5310e7aee4b08068f379ecdc"}, {"code": "#(sort-by\n   clojure.string/lower-case\n   (clojure.string/split % \n                         #\"[^\\w]+\"))", "problem": 70, "user": "531c7f0de4b08068f379eda4"}, {"code": "(fn [s]\n  (sort-by\n  #(clojure.string/lower-case %) \n   (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5316cdcae4b08068f379ed4b"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split %1 #\"[ .!]\"))", "problem": 70, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn [s] (sort-by clojure.string/lower-case\n              (re-seq #\"\\w+\" s)))", "problem": 70, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn [s] (sort-by #(.toLowerCase %)(re-seq #\"\\w+\" s)))", "problem": 70, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(fn [s]\n  (->> s\n       (filter (complement #{\\. \\!}))\n       (apply str)\n       (#(clojure.string/split % #\" \"))\n       (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)))))", "problem": 70, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn test [xs]\n  (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n\t(filter #(not= (first %) \\space)\n\t\t(seq (.split #\"[\\s\\W]+\" xs)))))", "problem": 70, "user": "531c0619e4b08068f379ed98"}, {"code": "(fn [x] (sort-by #(.toLowerCase %)\n                 (clojure.string/split x #\"[\\s\\.!]+\")))", "problem": 70, "user": "53034738e4b0d8b024fd373e"}, {"code": "#(sort-by clojure.string/upper-case (clojure.string/split (clojure.string/replace % #\"[\\.!]\" \"\") #\" \"))", "problem": 70, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [_str] \n  (sort-by #(clojure.string/lower-case %) \n         (map #(clojure.string/replace % #\"[.!?]\" \"\") (clojure.string/split _str #\" \"))))", "problem": 70, "user": "52fbbadde4b047fd5583700f"}, {"code": "(fn [s]\n  (sort #(compare \n          (clojure.string/lower-case %1) \n          (clojure.string/lower-case %2)) \n        (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "#(sort-by (comp clojure.string/lower-case) (re-seq #\"[A-Za-z]+\" %))", "problem": 70, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn sort-words [x] \n  (let \n    [bigger? (fn bigger [a b]\n       (if (and (empty? a)\n                (not (empty? b)))\n         false\n         (if (and (empty? a)\n                  (empty? b))\n           true\n           (if (and (not (empty? a))\n                    (empty? b))\n             true\n             (if (> (int (first (clojure.string/lower-case a)))\n                    (int (first (clojure.string/lower-case b))))\n               false\n               (if (< (int (first (clojure.string/lower-case a)))\n                      (int (first (clojure.string/lower-case b))))\n                 true\n                 (bigger (subs a 1)\n                         (subs b 1))))))))]\n  (sort (comp bigger?) (clojure.string/split \n   (clojure.string/replace \n    x \n    #\"[^a-zA-Z ]\" \n    \"\")\n   #\"\\s+\"))))", "problem": 70, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn [c] \n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n        (re-seq #\"[a-zA-Z]+\" c)))", "problem": 70, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn sortwords [x]\n     (if (empty? x)\n       []\n       (vec (sort (fn stringcomp [a b]\n             \n                    (if (= (Character/toLowerCase (first a)) (Character/toLowerCase (first b)))\n             (stringcomp (apply str (rest a)) (apply str (rest b)))\n             (if (empty? a)\n               true\n               (if (empty? b)\n                 false\n                 (< (compare (Character/toLowerCase (first a)) (Character/toLowerCase (first b))) 0)))))\n             (map #(apply str %1)\n                                                             (filter \n                                                              (fn chartest2 [z]\n                                                                (if (Character/isLetter (first z))\n                                                                  true\n                                                                  false))\n                                                              (partition-by \n                                                                                (fn chartest [y]\n                                                                                  (if (Character/isLetter y)\n                                                                                    :letter\n                                                                                    (if (Character/isSpace y)\n                                                                                      :space\n                                                                                      :punctuation)))\n                                                                                x)))))))", "problem": 70, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn s [words]\n  (sort-by #(.toLowerCase %) (.split (apply str (filter #(not (contains? #{\\. \\!} %)) words)) \" \")))", "problem": 70, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn words [s]\n  (sort-by #(.toLowerCase %)\n           (.split #\"\\W\" s)))", "problem": 70, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn [s]\n(sort-by clojure.string/lower-case (clojure.string/split s #\"[^\\w]+\")))", "problem": 70, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "#(sort-by\n (fn [s] (clojure.string/lower-case s))\n (-> % (clojure.string/replace #\"[.!]\" \"\") (clojure.string/split #\" \")))", "problem": 70, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(fn [s] \n  (sort-by #(.toLowerCase %) (map #(clojure.string/replace % #\"[\\.,!]\" \"\") \n       (clojure.string/split s #\" \"))))", "problem": 70, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [string]\n  (sort-by clojure.string/lower-case\n           (re-seq #\"\\w+\" string)))", "problem": 70, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "(fn [l]\n      (sort #(compare (.toLowerCase % ) (.toLowerCase %2) )  (re-seq #\"\\w+\" l ) )\n      )", "problem": 70, "user": "51f81925e4b09be9c177e526"}, {"code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "problem": 70, "user": "50436470e4b034ff00315d23"}, {"code": "(fn [x]\n  (->> (re-seq #\"\\w+\" x)\n       (sort #(compare (.toLowerCase %1) (.toLowerCase %2)))))", "problem": 70, "user": "52fb64b7e4b047fd55837009"}, {"code": "(comp #(sort-by clojure.string/lower-case %)\n      #(re-seq #\"\\w+\" %))", "problem": 70, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "(fn ws [s]\n  (->> s\n       (re-seq #\"\\w+\")\n       (sort #(.compareToIgnoreCase %1 %2))))", "problem": 70, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn [input-str]\n  (sort #(compare (clojure.string/upper-case %1)\n                  (clojure.string/upper-case %2))\n        (clojure.string/split input-str #\"[ .!]\")))", "problem": 70, "user": "5341b141e4b00652c8746ecf"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn [x]\n  (sort #(.compareToIgnoreCase %1 %2) (clojure.string/split x #\"\\W+\")))", "problem": 70, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [s]\n   (let [words (clojure.core/re-seq #\"[a-zA-z]+\" s)]\n     (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) words)))", "problem": 70, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "#(sort-by\n  (fn [a] (.toUpperCase a))\n  (re-seq   #\"[a-zA-Z]+\" %))", "problem": 70, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W+\")))", "problem": 70, "user": "531f7a2de4b08068f379edc6"}, {"code": "#(sort-by (fn [s] (.toLowerCase s)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "#(sort-by (memfn toLowerCase) (re-seq #\"\\w+\" %))", "problem": 70, "user": "4e705861535d5021c1a89635"}, {"code": "(fn [arg]\n  (let [cleaned (clojure.string/replace arg #\"[.,?!]\" \"\" )]\n    (sort #(>= 0 (compare (.toLowerCase %1) (.toLowerCase %2))) (clojure.string/split cleaned #\" \"))))", "problem": 70, "user": "533f09e1e4b085b17e897d9a"}, {"code": "(fn [s]\n  (sort \n   (fn [a b]\n     (compare (clojure.string/capitalize a) (clojure.string/capitalize b)))\n   (clojure.string/split (clojure.string/trim s) #\"[ .!?]+\")))", "problem": 70, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn [sen] (sort-by #(.toLowerCase %) (clojure.string/split sen #\"[^\\w]\")))", "problem": 70, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn [s] (sort\n         (fn [a b]\n           (compare (clojure.string/upper-case a)\n              (clojure.string/upper-case b)))\n         (clojure.string/split\n          (clojure.string/replace s #\"[.,!]\" \"\")\n          #\" \")))", "problem": 70, "user": "53388e2de4b0e30313ee6c9c"}, {"code": "(fn [s] (apply concat (vals(conj (sorted-map) (group-by #(.toUpperCase %) (re-seq #\"\\w+\" s))))))", "problem": 70, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn [x] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" x)))", "problem": 70, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(comp\n  (partial sort-by #(.toLowerCase %1))\n  #(clojure.string/split %1 #\"[^\\w]+\"))", "problem": 70, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn [s]\n  (sort-by clojure.string/upper-case (clojure.string/split s #\"[\\s\\W]+\")))", "problem": 70, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "5175533fe4b0dea9bbfba575"}, {"code": "(fn [sentence](sort-by #(.toLowerCase %) (re-seq #\"\\w+(?=[^\\w])?\" sentence)))", "problem": 70, "user": "533b1dc4e4b0e30313ee6cc7"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "534bde26e4b084c2834f4a81"}, {"code": "(fn [s]\n  (sort #(.compareToIgnoreCase %1 %2)\n        (clojure.string/split s #\"[ ,.,!,?]\")))", "problem": 70, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn word-sort\n  [word]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n        (->\n         word\n         (clojure.string/replace #\"[^a-zA-Z ]\" \"\")\n         (clojure.string/split #\" \"))))", "problem": 70, "user": "5339af7de4b0e30313ee6cab"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (.split s \"[ .!]\")))", "problem": 70, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"[^\\w\\s]\" \"\") #\" \"))", "problem": 70, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5356ac72e4b04ce2eb3ed26a"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "5349da55e4b084c2834f4a68"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "problem": 70, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case \n           (-> s\n             (clojure.string/replace #\"(?i)[^\\w\\\" \\\"]+\" \"\")\n             (clojure.string/split #\" \")\n           )\n  )\n)", "problem": 70, "user": "52d42021e4b09f7907dd132a"}, {"code": "(fn [str]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split\n             (clojure.string/replace str #\"\\p{Punct}\" \"\")\n             #\"\\s\")))", "problem": 70, "user": "5312cdaae4b08068f379ed03"}, {"code": "(fn [s]\n    (let [s (clojure.string/replace s #\"[^a-z,A-Z, ]\" \"\")\n          words (clojure.string/split s #\" \")\n          upper-and-lower-pair (flatten \n                                (map #(list (clojure.string/lower-case %) %) words))\n          word-map (apply sorted-map-by (cons compare upper-and-lower-pair))]\n      (vals word-map)))", "problem": 70, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn [x]\n  (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace x #\"[.!]\" \"\") #\" \")))", "problem": 70, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n           (seq (.split #\"\\W\" s))))", "problem": 70, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "#(sort-by clojure.string/lower-case\n          (re-seq #\"\\w+\" %))", "problem": 70, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn [s] \n  (sort-by \n     #(.toLowerCase %) \n     (clojure.string/split s #\"[ \\.\\!]\")))", "problem": 70, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n        (re-seq #\"\\w+\" s)))", "problem": 70, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "(fn [string] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split string #\"\\W+\")))", "problem": 70, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn [s]\n  (sort-by clojure.string/upper-case (clojure.string/split s #\"[^a-zA-Z]\")))", "problem": 70, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn [sentence]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" sentence)))", "problem": 70, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn [s]\n  (sort (fn [a b]\n          (compare (clojure.string/lower-case a) (clojure.string/lower-case b)))\n        (clojure.string/split (re-find #\"[A-za-z ]+\" s) #\"\\s+\")))", "problem": 70, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "#(sort (fn [& a] (apply compare (map clojure.string/lower-case a))) (clojure.string/split (clojure.string/replace % #\"\\p{Punct}+\" \"\") #\"\\s+\"))", "problem": 70, "user": "52bdf6bde4b07a9af579230d"}, {"code": "(fn [s]\n  (sort-by\n   #(.toUpperCase %)\n   (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "(fn [s]\n  (->>\n   s\n   (re-seq #\"\\w+\")\n   (map #(vector (clojure.string/lower-case %) %))\n   sort\n   (map #(second %))\n   ))", "problem": 70, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn [s] (sort-by #(.toUpperCase %) (re-seq #\"[A-Za-z]+\" s)))", "problem": 70, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "#(->> % (re-seq #\"\\w+\") (sort-by clojure.string/lower-case))", "problem": 70, "user": "53720c5ce4b0493c815db704"}, {"code": "(fn [s] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [sentence] \n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n        (clojure.string/split sentence #\"\\W\")))", "problem": 70, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "#(sort-by clojure.string/upper-case \n          (clojure.string/split  (clojure.string/replace % #\"[.!]\" \"\") #\"\\s\"))", "problem": 70, "user": "4fa9da14e4b081705acca1e7"}, {"code": "(fn [s]\n  (let [words (re-seq #\"\\w+\" s )]\n    (sort-by #(clojure.string/lower-case %) words)\n  ))", "problem": 70, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn [x]\n     (sort-by #(.toUpperCase %) (.split (.replaceAll x \"[^a-zA-Z ]+\" \"\") \" \"))   )", "problem": 70, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn [s]\n  (let [seq-strings       (->> (clojure.string/replace s #\"[.!]\" \"\")\n                               (#(clojure.string/split % #\" \"),  ))\n        ;; lower case\n        seq-strings-lower (map clojure.string/lower-case seq-strings)\n        ;; how they correspond\n        str-map           (zipmap seq-strings-lower seq-strings)]\n    ;; sort lower case ones, and map the originals\n    (map #(get str-map %) (sort seq-strings-lower))))", "problem": 70, "user": "53415755e4b00652c8746ecd"}, {"code": "(fn [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn [s]\n  (into [] (into (sorted-set-by #(compare (clojure.string/lower-case  %1) (clojure.string/lower-case %2))) (clojure.string/split (clojure.string/replace s #\"\\.|\\,|\\?|\\!\" \"\") #\" \"))))", "problem": 70, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn [s]\n     (->> s\n          (re-seq #\"\\w+\")\n          (sort-by #(.toLowerCase %))))", "problem": 70, "user": "53800d99e4b06839e8705ebd"}, {"code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "53834ed3e4b06839e8705edb"}, {"code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "536a37efe4b0243289761eaa"}, {"code": "(fn [st] (sort \n            #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n            (clojure.string/split (clojure.string/replace st #\"[.,!]\" \"\") #\"\\s\")))", "problem": 70, "user": "534d1173e4b084c2834f4a98"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "problem": 70, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "(fn [l]\n   (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split l #\"[\\s.!]\")))", "problem": 70, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn [sentence]\n  (let [words (clojure.string/split sentence #\"\\W\")]\n    (sort-by clojure.string/lower-case words)))", "problem": 70, "user": "53864493e4b06839e8705f10"}, {"code": "(fn [sentence] \n  (->> (.split #\"[\\s\\W]+\" sentence)\n  \t   (sort-by #(.toLowerCase %))))", "problem": 70, "user": "51b24defe4b02f8f128bb963"}, {"code": "(fn [s] (sort #(compare (.toUpperCase %) (.toUpperCase %2)) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "53403110e4b085b17e897da6"}, {"code": "#(sort-by (fn [w] (.toLowerCase w)) (re-seq #\"\\w+\" %))", "problem": 70, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn srt [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "problem": 70, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn [sentence]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split (clojure.string/replace sentence #\"[.,!?]\" \"\") #\" \")))", "problem": 70, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "(fn [text] \n    (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n           (re-seq #\"\\w+\" text)\n    )\n)", "problem": 70, "user": "5356d00ee4b04ce2eb3ed26f"}, {"code": "(fn [s]\n  (sort-by\n   #(.toLowerCase %)\n   (re-seq #\"\\w+\" s)))", "problem": 70, "user": "533018b2e4b019098a6f8b56"}, {"code": "(fn kk [s]\n  (let [strs (clojure.string/split s #\"[ \\.\\!]\")]\n    (sort-by #(.toLowerCase %) strs)))", "problem": 70, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn [s]\n  (sort (fn [x y] (compare (clojure.string/lower-case x)\n                           (clojure.string/lower-case y)))\n        (clojure.string/split s #\"[^a-zA-Z]\")))", "problem": 70, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "#(sort-by identity (fn [s1 s2] (compare (clojure.string/lower-case s1) (clojure.string/lower-case s2))) (clojure.string/split % #\"[ \\.\\!]\"))", "problem": 70, "user": "539576e3e4b0b51d73faaed7"}, {"code": "#(->> % (re-seq #\"\\w+\") (sort String/CASE_INSENSITIVE_ORDER))", "problem": 70, "user": "537e745ae4b06839e8705ea6"}, {"code": "#(sort (fn [a b] (compare (clojure.string/upper-case a) (clojure.string/upper-case b))) (re-seq #\"\\w+\" %))", "problem": 70, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn sort-words [sentence] \n  (sort-by #(.toLowerCase %) \n           (map #(apply str %)\n                (filter \n                 #(not= (first %) \\space) \n                 (partition-by \n                  #(= % \\space) \n                  (apply list (.replaceAll sentence \"[.!?]\" \"\") ))))))", "problem": 70, "user": "538c3424e4b0b51d73faae58"}, {"code": "#(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"[^a-zA-Z0-9\\s]+\" \"\") #\"\\s+\"))", "problem": 70, "user": "530bf87ee4b02e82168697d5"}, {"code": "(fn [x]\n  (sort-by (fn [v](.toLowerCase v)) (re-seq #\"\\w+\" x)))", "problem": 70, "user": "52488a46e4b05ef8e38e63e0"}, {"code": "(fn [s]\n  (vec (apply sorted-set-by #(compare (.toLowerCase %) (.toLowerCase %2))\n              (map (partial apply str)\n                   (map (partial filter\n                                 #(let [i (int %)] (or (and (< 64 i) (> 91 i)) (and (< 96 i) (> 123 i)))))\n                                 (clojure.string/split s #\"\\s+\"))))))", "problem": 70, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "(fn[s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split s #\"[\\s.!]+\")))", "problem": 70, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn [s] (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" s)))", "problem": 70, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "#(sort-by clojure.string/upper-case (clojure.string/split (clojure.string/replace % #\"[^\\w\\s]\" \"\") #\"\\s\"))", "problem": 70, "user": "4de52c87535d08e6dec9fdf0"}, {"code": "(fn [words]\n  (->> (clojure.string/split words #\"[\\s\\.\\!]+\")\n       (sort-by clojure.string/lower-case)))", "problem": 70, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "(fn word-sorter [sentence]\n  (let [pun-f #(not (.contains [\\. \\!] %))\n        sentence (clojure.string/join (filter pun-f sentence))\n        a-seq (clojure.string/split sentence #\"\\s\")\n        comparator #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))]\n    (sort comparator a-seq)))", "problem": 70, "user": "52ee46e5e4b05e3f0be25ec5"}, {"code": "(fn spl [st] (sort #(.compareToIgnoreCase % %2) (clojure.string/split st #\"[ \\W]\")))", "problem": 70, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn [string]\n      (sort\n       (fn [a b]\n         (compare (clojure.string/upper-case a)\n                  (clojure.string/upper-case b)))\n       (clojure.string/split string #\"[\\s\\.!]+\")))", "problem": 70, "user": "53838742e4b06839e8705ee0"}, {"code": "(fn word-sort [s] (sort #(.compareToIgnoreCase % %2) (clojure.string/split s #\"\\W\")))", "problem": 70, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn ws [x]\n  (sort-by clojure.string/upper-case (map #(clojure.string/replace % #\"[^A-Za-z]\" \"\") (clojure.string/split x #\" \"))))", "problem": 70, "user": "4eeb8f68535d93acb0a668a9"}, {"code": "(fn\n  [str]\n  (sort (comparator #(< (.compareTo (.toUpperCase %1) (.toUpperCase %2))\n                        0))\n        (.split (.replaceAll str \"[^\\\\w ]\" \"\") \" +\")))", "problem": 70, "user": "52dfc89be4b09f7907dd1405"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))\n\n;(fn [text]\n;  (sort\n;    #(.compareToIgnoreCase %1 %2)\n;    (re-seq #\"\\w+\" text)))", "problem": 70, "user": "53a074a4e4b0ca733b9744af"}, {"code": "(fn [coll] (sort-by #(.toUpperCase %) (filter #(> (count %) 0) (clojure.string/split coll #\"[\\s,.!?]\"))))", "problem": 70, "user": "53a1b5c8e4b0ca733b9744c1"}, {"code": "#(sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" %))", "problem": 70, "user": "4ddb696b535d02782fcbe9fa"}, {"problem": 70, "code": "(fn [ s ]\n    (->> (re-seq #\"\\w+\" s)\n         (sort-by #(.toUpperCase %))))", "user": "5398305fe4b0b51d73faaef6"}, {"problem": 70, "code": "(fn [xs] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) \n      (seq (.split #\"[^\\w]\" xs))))", "user": "53976599e4b0b51d73faaeea"}, {"problem": 70, "code": "(fn [s]\n  (map #(clojure.string/replace  % #\"[.!]\" \"\") (sort-by clojure.string/lower-case\n   (clojure.string/split s #\"\\s+\"))) )", "user": "538e864ee4b0b51d73faae87"}, {"problem": 70, "code": "#(sort-by (fn [k] (.toLowerCase k)) (re-seq #\"\\w+\" %))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 70, "code": "(fn [x]\n  (let [words (clojure.string/split x #\"\\W\")\n        to-lower clojure.string/lower-case]\n    (sort #(compare (to-lower %1) (to-lower %2)) words)))", "user": "53778b90e4b06839e8705e36"}, {"problem": 70, "code": "(fn [words]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split\n             (clojure.string/replace words #\"[^a-zA-Z\\s]\" \"\")\n             #\"\\s+\")))", "user": "53806e5be4b06839e8705ec1"}, {"problem": 70, "code": "(fn haha [s] (sort #(compare (clojure.string/lower-case %1)\n                               (clojure.string/lower-case %2))\n                     (re-seq #\"[a-zA-Z]+\" s)))", "user": "536e5055e4b0fc7073fd6e6b"}, {"problem": 70, "code": "(fn [x]\n   (let [words (re-seq #\"\\w+\" x)\n         mapped (zipmap (map #(.toLowerCase %) words) words)\n         word-bytes (map #(.getBytes %) (keys mapped))]\n     \n     (apply vector (map (fn [r] (get mapped r))\n       (map (fn [u] (apply str u))\n         (map #(map char %)\n           (sort \n             (fn [t y] \n               (loop [stack1 t\n                      stack2 y\n                      result (< (first stack1) (first stack2))]\n                       (cond (= (first stack1) (first stack2))\n                               (recur (rest stack1) (rest stack2) (< (first (rest stack1)) (first (rest stack2))))\n                             :else \n                               result)))\n                word-bytes)))))\n     ))", "user": "53a5c7ffe4b0ef122a8689c4"}, {"problem": 70, "code": "(fn [s]\n   (sort-by identity #(compare (clojure.string/lower-case %1)\n                      (clojure.string/lower-case %2))\n            (clojure.string/split s #\"[^a-zA-Z]\")))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 70, "code": "#(->> % (re-seq #\"[A-Za-z]+\") \n      (sort-by clojure.string/lower-case))", "user": "537f4652e4b06839e8705eb1"}, {"problem": 70, "code": "(fn [phrase]\n  (sort-by clojure.string/upper-case (re-seq #\"\\w+\" phrase)))", "user": "5080a697e4b01a93d3f38e49"}, {"problem": 70, "code": "(fn [s]\n  (let [punctuations (into #{} \",.!\")]\n    (sort #(compare (clojure.string/upper-case %1)\n                    (clojure.string/upper-case %2))\n          (clojure.string/split (apply str (map #(if (clojure.set/subset? (str %) punctuations) \"\" %)\n                                                s))\n                                #\" \"))))", "user": "532bce35e4b09d4e7a9b5536"}, {"problem": 70, "code": "(fn split-and-sort-str [s]\n  (let [str-seq (re-seq #\"[A-Za-z]+\" s)]\n    (sort #(compare (.toUpperCase %1) (.toUpperCase %2)) str-seq)))", "user": "5396c94be4b0b51d73faaee3"}, {"problem": 70, "code": "(fn [s] (sort #(.compareTo (.toLowerCase %1) (.toLowerCase %2)) (re-seq  #\"\\w+\" s)))", "user": "53b530c6e4b047364c0444bc"}, {"problem": 70, "code": "(fn split-and-sort [s]\n  (sort-by clojure.string/lower-case (clojure.string/split s #\"[^A-Za-z]\"))\n  )", "user": "5245e320e4b09dbe66b56177"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "53ae16e2e4b047364c044472"}, {"problem": 70, "code": "(fn [sstr]\n  (let [sseq (re-seq #\"\\w+\" sstr)\n        scomp (fn [s1 s2]\n                (let [s1 (clojure.string/upper-case s1)\n                      s2 (clojure.string/upper-case s2)]\n                  (compare s1 s2)))]\n    (sort scomp sseq)))", "user": "53908e6be4b0b51d73faae9a"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split s #\"[\\s\\W]+\")))", "user": "5290257ae4b0239c8a67af03"}, {"problem": 70, "code": "(fn my-func\n  [str]\n  (sort-by clojure.string/lower-case\n           (remove clojure.string/blank?\n           (clojure.string/split str #\"[\\s\\.\\!]\"))))", "user": "53ac4719e4b047364c04445c"}, {"problem": 70, "code": "(fn [s] (sort #(compare (.toLowerCase %) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 70, "code": "(fn word-sort [s]\n   (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 70, "code": "(fn split-sort[mystr]\n\t(sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n\t\t (re-seq #\"[a-zA-Z]+\" mystr)))", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 70, "code": "#(sort (comparator (fn [a b] (< (.compareTo (.toUpperCase a)\n                                            (.toUpperCase b))\n                                0)))\n       (clojure.string/split % #\"[^a-zA-Z]+\"))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "538e36c7e4b0b51d73faae81"}, {"problem": 70, "code": "#(sort (fn [x y] (compare (clojure.string/lower-case x)\n                         (clojure.string/lower-case y)))\n      (re-seq #\"\\w+\" %))", "user": "4f867b25e4b033992c121c51"}, {"problem": 70, "code": ";1 clean up the string\n;2 split into spaces\n;3 to lower case\n;4 sort\n;replace back the words\n\n(fn sort-it [s]\n  (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace s #\"(?![a-zA-Z ]).*\" \"\") #\" \")))", "user": "52b71bd2e4b0c58976d9ad4d"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"[.!,]\" \"\") #\" \"))", "user": "52c1ede2e4b07a9af579236d"}, {"problem": 70, "code": "(fn word-sorting [s] \n\t(sort #(apply compare (map clojure.string/lower-case [%1 %2])) (re-seq #\"[a-zA-Z]+\" s)))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "532c9dc9e4b019098a6f8b30"}, {"problem": 70, "code": "(fn [x] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" x)))", "user": "5382704be4b06839e8705ed4"}, {"problem": 70, "code": "#(sort (fn[a b](compare (.toLowerCase a)(.toLowerCase b))) (re-seq #\"\\w+\" %))", "user": "526a3412e4b03e8d9a4a721e"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"[a-zA-Z]+\" %))", "user": "52b434c9e4b0c58976d9ad1c"}, {"problem": 70, "code": "(fn my-sort [stuff]\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" stuff)))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 70, "code": "#(vec (sort (fn [x y] (compare (clojure.string/lower-case x) (clojure.string/lower-case y)))\n             (clojure.string/split \n              (apply str (filter (fn [c] (or (Character/isDigit c) (Character/isLetter c) (Character/isSpace c))) %))\n              #\" \")))", "user": "531bad96e4b08068f379ed93"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split s #\"[ .!]+\")))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 70, "code": "#(sort (fn [a b] (.compareToIgnoreCase a b))\n        (.split (.replaceAll % \"(?i)[^a-z|\\\\s]\" \"\") \"\\\\s+\"))", "user": "53c63db5e4b00fb29b221296"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case\n         (clojure.string/split % #\"(\\s|\\.|\\!)\"))", "user": "4f1e4ab5535d64f603146496"}, {"problem": 70, "code": "(fn [s]\n     (sort #(compare (clojure.string/lower-case %1)\n                     (clojure.string/lower-case %2))\n           (clojure.string/split s #\"[!.\\s]+\")))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s))\n  )", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 70, "code": "(fn [c]\n\t(sort #(compare (.toLowerCase %) (.toLowerCase %2)) (re-seq #\"\\w+\" c)))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 70, "code": "(fn f [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split (clojure.string/replace s #\"[.!]\" \"\") #\" \") ))", "user": "53b3ea79e4b047364c0444ab"}, {"problem": 70, "code": "(fn [str]\n  (sort-by\n    (fn [s] (.toLowerCase s))\n  (re-seq #\"\\w+\" str )))", "user": "53858594e4b06839e8705f05"}, {"problem": 70, "code": "(fn sort-words [sentence]\n  (sort-by (fn [x] (.toLowerCase x))\n             (re-seq #\"\\w+\" sentence)))", "user": "539b4268e4b0b51d73faaf1c"}, {"problem": 70, "code": "(fn [s]\n         (sort-by\n          #(clojure.string/lower-case %)\n          (-> s\n              (clojure.string/replace #\"!|\\.\" \"\")\n              (clojure.string/split #\" \"))))", "user": "52c7f036e4b0c2d177d62126"}, {"problem": 70, "code": "(fn[s](vals (reduce #(assoc %1 (.toUpperCase %2) %2 ) (sorted-map)\n\t      (filter #(not= \"\" %) (re-seq #\"\\w+\" s)))))", "user": "4e8849c5535d8b9bb0147ca4"}, {"problem": 70, "code": "(fn [s]\n   (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "538db083e4b0b51d73faae74"}, {"problem": 70, "code": "(fn word-sort [s]\n   (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "535eaa73e4b04ce2eb3ed2d4"}, {"problem": 70, "code": "(fn [s]\n\t(sort (comparator #(> 0 (compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)))) (map #(re-find #\"[a-zA-z]+\" %) (clojure.string/split s #\" \"))))", "user": "52efd3d9e4b05e3f0be25ed4"}, {"problem": 70, "code": "(fn [x]\n   (sort-by clojure.string/lower-case (clojure.string/split x #\"[^a-zA-Z]+\"))\n)", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 70, "code": "(fn [s]\n  (sort\n     (fn [s1 s2]\n       (.compareTo (.toLowerCase s1) (.toLowerCase s2))\n     )\n     (seq (.split #\"\\W+\" s))\n  )\n)", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "4e6b8ac8535d8ccf87e9ff19"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "53da19fde4b0e771c3025484"}, {"problem": 70, "code": "(fn foo [coll]\n\t(vec \n     (sort-by \n      clojure.string/lower-case \n      compare \n      (clojure.string/split \n       (apply str (remove #((set '(\\. \\!)) %) coll)) \n       #\"\\s+\"))))", "user": "5143824ae4b0b4fb4ace5f36"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"[A-Za-z]+\" %))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 70, "code": "(fn [s] (vec (sort-by #(.toLowerCase %) (clojure.string/split s #\"\\W\"))))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 70, "code": "(fn [s]\n  (let [alpha? (fn [c]\n                 (or (<= (int \\a) (int c) (int \\z))\n                     (<= (int \\A) (int c) (int \\Z))))]\n    (let [words (filter #(alpha? (first %))(partition-by alpha? s))\n          words (map (partial apply str) words)]\n      (sort #(compare (clojure.string/lower-case %)(clojure.string/lower-case %2)) words))))", "user": "5224a46ce4b01819a2de42e5"}, {"problem": 70, "code": "#( sort-by (fn [w] (.toLowerCase w)) (re-seq #\"\\w+\" %) )", "user": "516d227fe4b06f078fab252d"}, {"problem": 70, "code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"(?i)[a-z]+\" %))", "user": "53500869e4b084c2834f4ad3"}, {"problem": 70, "code": "(fn sort-word [words]\n  (let [x (re-seq #\"\\w+\" (clojure.string/lower-case words))\n        y (re-seq #\"\\w+\" words)]\n    (map second (sort compare (zipmap x y)))))", "user": "520cb8c4e4b0b022ef140c9a"}, {"problem": 70, "code": "(fn [s] \n  (sort \n   #(compare (.toLowerCase %1) (.toLowerCase %2)) \n   (seq (.split (.replaceAll s \"[^a-zA-Z ]\" \"\") \" \"))))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "user": "53791ab7e4b06839e8705e4d"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W+\"))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 70, "code": "(fn [x] (sort (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b))) (re-seq #\"\\w+\" x)))", "user": "53e91473e4b036ad0777e495"}, {"problem": 70, "code": "(fn word-sorting [s]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split\n            (apply str (remove #{\\. \\!} s))\n            #\" \")))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\"(\\s+|\\.|\\!)\"))", "user": "53ecac57e4b0d648e757f4b3"}, {"problem": 70, "code": "(fn [s]\n  (-> s\n      (subs 0 (dec (count s)))\n      (clojure.string/split #\"\\s\")\n      (->> (sort-by #(.toLowerCase %)))))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 70, "code": "(fn ws [s]\n  (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" s)))", "user": "53710c09e4b0fc7073fd6ea5"}, {"problem": 70, "code": "(fn sort-by-words [x]\n  (sort-by #(.toLowerCase %)\n           (re-seq #\"\\w+\" x)))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 70, "code": "#(sort\n  (fn [w1 w2]\n    (apply -\n           (first\n            (drop-while\n             (partial apply =)\n             (map list (map int (clojure.string/lower-case w1)) (map int (clojure.string/lower-case w2)))))))\n  (clojure.string/split % #\"[\\s.!]+\"))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 70, "code": "(fn [s]\n  (sort-by \n   #(.toLowerCase %)\n   (re-seq #\"\\w+\" s)))", "user": "53eb8ceae4b036ad0777e4fb"}, {"problem": 70, "code": "(fn\n  [sentence]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split sentence #\"\\s|\\p{Punct}\")))", "user": "53cbe808e4b00fb29b2212d4"}, {"problem": 70, "code": "(fn pr070 [s] \n  (sort (fn [x y] (compare (clojure.string/capitalize x) (clojure.string/capitalize y))) (clojure.string/split s #\"[^\\w+]\")))", "user": "51696ee7e4b03f62cda68ce8"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 70, "code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "user": "50856bd1e4b004985b776e4c"}, {"problem": 70, "code": "(fn word-sorting\n  [s]\n  (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (clojure.string/split (apply str (re-seq #\"[A-Za-z\\\" +\\\"]\" s)) #\"\\s+\")))", "user": "53f3d96ee4b0742d9025b0fa"}, {"problem": 70, "code": "(fn [s]\n   (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %) (re-seq #\"[A-Za-z]+\" s)))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (-> % (clojure.string/replace #\"[,.!]\" \"\") (clojure.string/split #\" \")))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 70, "code": "(fn [x] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split x #\"[\\s.,?!]\")))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 70, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"\\W+\")]\n    (sort-by #(clojure.string/capitalize %) words)))", "user": "53f7820be4b0de5c41848560"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split (clojure.string/replace % #\"[.!]\" \"\") #\"\\s\"))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "5364ab34e4b0243289761e64"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "53f75957e4b0de5c4184855d"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1)\n                  (clojure.string/lower-case %2))\n        (re-seq #\"[A-Za-z]+\" s)))", "user": "5338387de4b0e30313ee6c91"}, {"problem": 70, "code": "(fn sort-words [word-string]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split word-string #\"\\W+\")))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/upper-case (re-seq #\"\\w+\" x)))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 70, "code": "(fn [s]\n   (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace s #\"\\.|!\" \"\") #\" \")))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 70, "code": "#(->> % (re-seq #\"\\w+\") (sort-by clojure.string/lower-case))", "user": "506ba58be4b0eda3100c090b"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 70, "code": "(fn [x]\n   (->> x\n        (#(clojure.string/replace % #\"[.,!?]\" \"\"))\n        (#(clojure.string/split % #\" \"))\n        (map #(vector (clojure.string/upper-case %) %))\n        (sort-by first)\n        (map last)))", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 70, "code": "#(vec (sort-by clojure.string/lower-case (clojure.string/split % #\"[\\s\\.!]\")))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 70, "code": "(fn [str]\n   (sort\n    #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n    (clojure.string/split (clojure.string/replace str #\"[!.]\" \"\") #\" \")))", "user": "52fac708e4b047fd55836fff"}, {"problem": 70, "code": "#(sort-by (fn [s] ( .toLowerCase s)) (re-seq #\"\\w+\" %))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 70, "code": "(fn [ s]  (sort #(compare (.toLowerCase %) (.toLowerCase %2))  \n                        (clojure.string/split (subs s 0 (dec (count s) ) ) #\"\\s+\" ) ))", "user": "537b1083e4b06839e8705e64"}, {"problem": 70, "code": "#(apply vector (sort-by clojure.string/lower-case (clojure.string/split % #\"[ .!]\")))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 70, "code": "(fn [x] (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (map #(-> % (clojure.string/replace #\"!\" \"\") (clojure.string/replace #\"\\.\" \"\")) (clojure.string/split x #\" \"))))", "user": "52faec2ee4b047fd55837004"}, {"problem": 70, "code": "(fn mm [arg]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" arg)))", "user": "535f0cbde4b04ce2eb3ed2d9"}, {"problem": 70, "code": "(fn [sentence] (sort-by clojure.string/upper-case \n                        (clojure.string/split (apply str (re-seq #\"[A-z ]+\" sentence)) #\"\\s\")))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "51780bfce4b0f89a8f53839c"}, {"problem": 70, "code": "(fn w-sort\n  [statement]\n  (sort-by \n    #(clojure.string/lower-case %)  \n    (re-seq #\"\\w+\" statement)))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split s #\"[\\s\\W]+\")))", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 70, "code": "(fn [str1] (vec (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" str1))))", "user": "4ff4bed0e4b0678c553fc35f"}, {"problem": 70, "code": "(fn [cs]\n  (let [A (int \\A)\n        Z (int \\Z)\n        a (int \\a)\n        z (int \\z)\n        delta (- z Z)\n        ns (map int cs)\n        letter? #(or (and (<= A %1) (<= %1 Z))\n                     (and (<= a %1) (<= %1 z)))\n        chunks (partition-by letter? ns)\n        nwords (filter #(letter? (first %)) chunks)\n        lc #(if (<= %1 Z) (+ %1 delta) %1)\n        lcnwords (map #(map lc %) nwords)\n        words (map #(apply str (map char %)) nwords)\n        lcwords (map #(apply str (map char %)) lcnwords)\n        pairs (map vector words lcwords)\n        ]\n    (map first (sort-by second pairs))\n    )\n  )", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 70, "code": "(fn [str]\n  (let [\n    parts (re-seq #\"\\w+\" str)]\n    (sort-by\n      (fn [s] (clojure.string/lower-case s))\n      parts)))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 70, "code": "(fn my-sorted-words [string]\n  (let [words (map str (.split string \"[^a-zA-Z]+\"))]\n    (sort String/CASE_INSENSITIVE_ORDER words)))", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 70, "code": "(fn [input]\n  (sort-by\n    #(clojure.string/lower-case %)\n    (re-seq #\"\\w+\" input)))", "user": "528bba38e4b0239c8a67aea9"}, {"problem": 70, "code": "(fn [string]\n  (let [split (clojure.string/split string #\"\\s\")\n        words (map #(clojure.string/lower-case %) split)\n        pairs (sort (zipmap words (range)))]\n    (map #(clojure.string/replace (nth split (last %)) #\"\\W\" \"\") pairs)))", "user": "52474133e4b05ef8e38e635e"}, {"problem": 70, "code": "#(sort String/CASE_INSENSITIVE_ORDER (clojure.string/split (clojure.string/replace % #\"[^a-zA-Z ]\" \"\")  #\" \"))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n        (clojure.string/split (clojure.string/replace s #\"[^A-za-z\\s]\", \"\") #\" \")))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case\n          (clojure.string/split\n           (clojure.string/replace % #\"[^a-zA-Z ]\" \"\")\n           #\" \"))", "user": "53e543efe4b036ad0777e457"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v)) (re-seq #\"\\w+\" %))", "user": "53d86564e4b0e771c302546b"}, {"problem": 70, "code": "(fn [s] \n   (sort-by clojure.string/lower-case (clojure.string/split s  #\"\\W\")))", "user": "54094824e4b0addc1aec66da"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(clojure.string/lower-case %) (clojure.string/split (clojure.string/replace s #\"[^A-Za-z ]\" \"\") #\" \"))\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "541096bde4b01498b1a719b2"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n              (clojure.string/split s #\"[\\s\\W]+\")\n              )\n  )", "user": "4fc9a977e4b0ee37620e1847"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toUpperCase %)  (.split s \"[ .!]\")))", "user": "4df9c598535d04ed9115e77a"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 70, "code": "#(sort (fn [s1 s2] (compare (.toLowerCase s1) (.toLowerCase s2))) (vec (.split #\"\\W+\" %)))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 70, "code": "#(sort-by (fn [x]\n            (reduce (fn [x y]\n                      (+ (int y) (/ x 1000.0)))\n                    0\n                    (reverse (.toUpperCase x))))\n          (clojure.string/split % #\"[ .!]\"))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 70, "code": "(fn [strings]\n  (map (fn [hash] (:value hash))  \n       (sort-by :key (map \n                      (fn [m] {:key (clojure.string/lower-case m) \n                               :value  (apply str (filter (fn [c] (Character/isLetterOrDigit c)) m))}) \n                      (clojure.string/split strings #\" \")\n                      )) ))", "user": "5047782ce4b0371827a27bc2"}, {"problem": 70, "code": "(fn [^String s]\n  (->> (.split s \"\\\\s+|\\\\.|!\")\n       (remove empty?)\n       (sort-by #(.toLowerCase %))))", "user": "54157dace4b01498b1a719f4"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 70, "code": "(fn [s]\n (sort-by #(.toUpperCase %) (clojure.string/split s #\"[^a-zA-Z]\")))", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" s)))", "user": "4eb3fcba535d7eef30807359"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "user": "541475afe4b01498b1a719eb"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5368fedee4b0243289761e93"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/lower-case (clojure.string/split x #\"\\W\")))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 70, "code": "(fn word-sort [sentence]\n    (sort-by #(.toLowerCase %) (re-seq #\"[\\w]+\" sentence))\n    )", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[A-z]+\" s)))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 70, "code": "(fn [str]\n  (sort-by clojure.string/lower-case (clojure.string/split str #\"\\W\")))", "user": "542b764ae4b0dad94371f28d"}, {"problem": 70, "code": "#(sort-by (fn [x] (.toLowerCase x)) (.split % \"\\\\W\"))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[ .!]\"))", "user": "542f574be4b0dad94371f2d0"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[\\s\\W]+\"))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 70, "code": "(fn word-sorting [s]\n  (let [f clojure.string/lower-case]\n  (->> (clojure.string/split s #\"\\.?\\s|\\.|!\")\n       (sort #(compare (f %1) (f %2))))))", "user": "52616198e4b03e8d9a4a705e"}, {"problem": 70, "code": "(fn [xs]\n   (->> (clojure.string/split xs #\"\\W\")\n        (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)))))", "user": "531bfb69e4b08068f379ed97"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5339c105e4b0e30313ee6cae"}, {"problem": 70, "code": "(fn word-sort [st]\n  (let [st (subs st 0 (dec (count st)))]\n  \t(flatten \n    \t(sort-by #(.toLowerCase %) \n       \t\t(clojure.string/split  st #\"\\s\")))))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 70, "code": "(fn [s]\n         (sort-by clojure.string/lower-case\n                  (clojure.string/split\n                    (clojure.string/replace s #\"[.,;:!?\\\"']\" \"\")\n                    #\"\\s+\")))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 70, "code": "(fn [str]\n    (sort-by clojure.string/lower-case (re-seq #\"\\w+\" str)))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 70, "code": "(fn [string] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" string)))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "54397533e4b032a45b86931d"}, {"problem": 70, "code": "(fn [t] (sort-by #(clojure.string/lower-case %) (re-seq #\"[A-Za-z]+\" t)))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 70, "code": "(fn p070 [x]\r\n  (sort #(.compareToIgnoreCase %1 %2) \r\n        (clojure.string/split \r\n         (clojure.string/replace x #\"[,.!;:]\" \"\") #\" \")))", "user": "5376966ae4b06839e8705e27"}, {"problem": 70, "code": "(fn wordSort [s] (sort-by clojure.string/lower-case (map (fn [st] (apply str(filter #(let [ch (int %)] (or (and (<= ch (int \\Z)) (>= ch (int \\A))) (and (<= ch (int \\z)) (>= ch (int \\a))))) st))) (remove #(= (int (first %)) 32) (map #(apply str %) (partition-by #(= (int %) 32) s))))))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"[.,!]\" \"\") #\" \"))", "user": "53940789e4b0b51d73faaec3"}, {"problem": 70, "code": "(fn [word] (sort-by clojure.string/upper-case (re-seq #\"\\w+\" word)))", "user": "543f854fe4b032a45b86935b"}, {"problem": 70, "code": "#(sort-by (fn [word] (clojure.string/lower-case word))\n            (re-seq #\"[a-zA-Z]+\" %))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 70, "code": "; (fn [s]\n;   (let [rm_punctuation (clojure.string/replace s #\"[!.]\" \"\")\n;         words          (clojure.string/split rm_punctuation #\" \")]\n;     (sort-by clojure.string/lower-case words)))\n\n#(->> % (re-seq #\"\\w+\") (sort-by clojure.string/lower-case))", "user": "541e2ff8e4b01498b1a71a8a"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %)\n         (clojure.string/split (clojure.string/replace s #\"\\p{Punct}\" \"\")\n                               #\"\\s\")))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" s)))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 70, "code": "(fn [sentence]\n      (sort-by clojure.string/upper-case (-> sentence\n                                             (clojure.string/replace #\"[\\.!]\" \"\")\n                                             (clojure.string/split #\"\\s+\"))))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(clojure.string/upper-case %) (re-seq #\"\\w+\" s)))", "user": "54448e84e4b032a45b869393"}, {"problem": 70, "code": "(fn [x]\n\t(sort-by clojure.string/lower-case\n\t         (clojure.string/split x #\"[ .,!]\")))", "user": "51baff1be4b0fe3ecfb46443"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" s)))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n        (clojure.string/split s #\"\\W\")))", "user": "5370d152e4b0fc7073fd6e9d"}, {"problem": 70, "code": "(fn [x] (let [s (clojure.string/split (clojure.string/replace x #\"[\\.!]\" \"\") #\" \")] (sort-by clojure.string/lower-case s)))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (filter #(not (.isEmpty %)) (seq (.split #\"[\\s\\W]+\" s)))))", "user": "544ff52fe4b0e3978000699b"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[\\.\\!\\s]+\"))", "user": "5122925ae4b068a9582e656d"}, {"problem": 70, "code": "(fn [s]\n(->> (clojure.string/split s #\" \")\n    (map #(clojure.string/replace % #\"\\W\" \"\") )\n    (sort-by clojure.string/lower-case)))", "user": "504457c0e4b01f6c9a8b2360"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case\n   (clojure.string/split\n     (subs % 0 (- (.length %) 1)) #\" \"))", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 70, "code": "(fn sort-words [s]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split s #\"[^a-zA-Z]\")))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 70, "code": "(fn my-sort [s]\n  (let [coll (re-seq #\"\\w+\" s)]\n    (sort-by #(clojure.string/lower-case %) coll)))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case\n  (-> %\n     (clojure.string/replace #\"[.!]\" \"\")\n     (clojure.string/split #\" \")))", "user": "54349368e4b0b6b47310fcf1"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1)\n                  (clojure.string/lower-case %2))\n        (clojure.string/split\n         (clojure.string/replace s #\"[.,!?;:]\" \"\") #\"\\s+\")))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 70, "code": "(fn [s]\n      (->> (re-seq #\"\\w+\" s) (sort-by #(clojure.string/lower-case %))))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 70, "code": "(fn [s]\n  (let [f #(apply compare (map clojure.string/lower-case %&))]\n    (sort f\n          (clojure.string/split (clojure.string/replace s #\"[.!?]\" \"\")\n                                #\" \"))))", "user": "4ec1b090535dfed6da9c6db5"}, {"problem": 70, "code": "(fn [s] \n  (sort-by clojure.string/lower-case \n    (clojure.string/split \n       (clojure.string/replace s #\"[^((A-z)|\\ )]\" \"\") \n    #\" \")\n))", "user": "54524afbe4b0e397800069bc"}, {"problem": 70, "code": "(fn [s]\n  (let [cleaned (clojure.string/replace s #\"[^a-zA-Z ]\" \"\")]\n    (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split cleaned #\" \"))))", "user": "53322cece4b019098a6f8b73"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 70, "code": "(fn [sentence]\n  (let [alphabet? #(>= 122 (int %) 65)\n        trim (map (comp (partial apply str)\n                        (partial filter alphabet?))\n                  (clojure.string/split sentence #\" \"))\n        cmp #(apply compare (map clojure.string/upper-case %&))]\n    (sort cmp trim)))", "user": "505aa653e4b021387fb89857"}, {"problem": 70, "code": "(fn [s] \n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 70, "code": "(fn [s] \n  (let [xs (clojure.string/split s #\"[ \\p{Punct}]\")] \n    (sort-by clojure.string/lower-case xs)))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s))\n    )", "user": "5412646de4b01498b1a719d4"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1)\n                        (clojure.string/lower-case %2)) \n              (clojure.string/split s #\"[^a-zA-Z]+\")))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "user": "537bde5de4b06839e8705e73"}, {"problem": 70, "code": "(fn [sentence]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (re-seq #\"[a-zA-Z]+\" sentence)))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 70, "code": "(fn [s](sort-by #(clojure.string/lower-case %)\n(-> s\n (clojure.string/replace #\"[^A-Za-z ]\" \"\")\n (clojure.string/split #\" \"))))\n\n;;#(sort-by (fn [x] (.toLowerCase x)) (.split % \"\\\\W\"))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\"\\W\"))", "user": "53b85932e4b047364c0444db"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "4ebbc1f6535dfed6da9c6d72"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/upper-case (re-seq #\"\\w+\" s) ))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 70, "code": "(fn [sentence]\n  (sort \n    (fn [a b]\n        (compare (clojure.string/lower-case a) (clojure.string/lower-case b)))\n    (clojure.string/split\n      (apply \n        str\n        (filter\n          #(and\n             (not (= \\. %))\n             (not (= \\, %))\n             (not (= \\! %)))\n          sentence)) #\"\\s\")))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 70, "code": "(fn [input]\n  (vec (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" input))))", "user": "524e9079e4b0541d1855b7e3"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" s)))", "user": "540997ede4b0addc1aec66dd"}, {"problem": 70, "code": "(fn wsort [sentence]\n  (sort-by #(.toLowerCase %)\n    (-> sentence\n       (.replaceAll \"[^\\\\w ]\" \"\")\n       (.split \" \")\n       (vec))))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 70, "code": "(fn [x] (sort #(compare (.toLowerCase %) (.toLowerCase %2)) (re-seq #\"\\w+\" x)))", "user": "5464a536e4b01be26fd746cf"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "user": "5136f659e4b04059df19f2fd"}, {"problem": 70, "code": "(fn ws [s]\n  (sort #(.compareToIgnoreCase % %2)\n   (clojure.string/split s #\"[ .!]\")))", "user": "4eda8d7c535d10e5ff6f530f"}, {"problem": 70, "code": "(fn sort-word\n     [str]\n     (let [str-arr (clojure.string/split str #\"[^a-zA-z]\")]\n       (sort-by clojure.string/upper-case str-arr)))", "user": "5473efc3e4b0c51c1f4d7285"}, {"problem": 70, "code": "(fn word-shorter [str]\n  (sort-by #(.toUpperCase %)\n           (re-seq #\"\\w+\" str)))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (re-seq #\"[a-zA-Z]+\" s)))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 70, "code": "(fn [string]\n  (sort-by #(.toLowerCase %) (clojure.string/split (clojure.string/replace string #\"[!/.]\" \"\") #\" \")))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 70, "code": "(fn [s]\n  (->> (re-seq #\"\\w+\" s)\n       (sort-by clojure.string/lower-case)))", "user": "51ae350fe4b09397d5109790"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5460f59ce4b01be26fd74695"}, {"problem": 70, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"\\W+\")]\n    (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) words)))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 70, "code": "(fn [string] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" string)))", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 70, "code": "#(sort-by\r\n  clojure.string/lower-case\r\n  (clojure.string/split % #\"[^\\w]\"))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 70, "code": "(fn [s]\n  (sort-by\n   #(.toLowerCase %1)\n   (re-seq #\"\\w+\" s)))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 70, "code": "(fn [s]\n   (mapv\n    (fn [token] (re-find #\"[a-zA-Z]*\" token))\n    (let [tokens (clojure.string/split s #\" \")]\n           (sort-by (fn [token] (apply str (re-seq #\"[a-z]*\" (clojure.string/lower-case token)))) tokens))))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (apply str (butlast %)) #\" \"))", "user": "5353afa0e4b084c2834f4b03"}, {"problem": 70, "code": "(fn [s]\n  (let [words (clojure.string/split (subs s 0 (dec (count s))) #\"\\s+\")]\n    (sort-by clojure.string/lower-case \n               words)))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 70, "code": "#(sort (fn [a b] (compare (.toLowerCase a)\n                           (.toLowerCase b)))\n       (clojure.string/split % #\"[^\\w]+\"))", "user": "4e6a2f93535d8ccf87e9feaa"}, {"problem": 70, "code": "(fn [v] (sort-by clojure.string/lower-case (map #(clojure.string/replace % #\"\\.|!\" \"\") (clojure.string/split v #\" \"))))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 70, "code": "#(sort-by (fn [s] (.toLowerCase s)) (re-seq #\"\\w+\" %))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case\n          (filter (comp not empty?) (clojure.string/split % #\"\\W\")))", "user": "54857e3be4b0e286459a11ad"}, {"problem": 70, "code": "(fn [sentence]\n  (let [lc clojure.string/lower-case]\n    (sort (fn [x y] (compare (lc x) (lc y))) (re-seq #\"\\w+\" sentence)))\n  )", "user": "547dc4c7e4b0c51c1f4d72f8"}, {"problem": 70, "code": "(fn [sentence]\n  (sort-by #(.toLowerCase %)\n    \t   (map (fn [word] (apply str (filter #(Character/isLetter %) word) )) \n         \t\t(clojure.string/split sentence #\"\\s+\"))))", "user": "544e9022e4b0e3978000698b"}, {"problem": 70, "code": "(fn sort_str\n  [s]\n  (sort\n   #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2))\n   (clojure.string/split s #\"[^\\w]\")))", "user": "526143b7e4b03e8d9a4a705a"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (clojure.string/split s #\"[^A-Za-z]\")))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 70, "code": "(fn sort-words [s]\n  (let [valid-chars (set (map char (concat (range 97 123) (range 65 91))))\n        ws (clojure.string/split s #\" \")\n        xs (map (comp #(apply str %) #(filter valid-chars %)) ws)\n        ]\n    (sort-by clojure.string/capitalize xs)\n    )\n  )", "user": "5488872ee4b0e286459a11d3"}, {"problem": 70, "code": "(fn [s1] (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" s1)))", "user": "52c58561e4b0c2d177d620f8"}, {"problem": 70, "code": "(fn word-sort [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %)\n  (clojure.string/split\n   (clojure.string/replace s #\".$\" \"\") #\" \")))", "user": "5472d919e4b094393f72dd7b"}, {"problem": 70, "code": "(fn [s] (->> (re-seq #\"\\w+\" s) (sort-by clojure.string/lower-case)))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 70, "code": "(fn [s]\n    (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 70, "code": "(fn my-sort [s]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split s #\"\\W\")))", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 70, "code": "(fn [s]\n  (sort-by\n     #(.toLowerCase %)\n      (-> s\n       (.replaceAll \"\\\\.\" \"\")\n       (.replaceAll \"\\\\!\" \"\")\n       (.split \"\\\\s\"))))", "user": "4fde492be4b05e33b9224f8a"}, {"problem": 70, "code": "#(sort (fn [str1 str2]\n             (let [a (first str1)\n                   b (first str2)\n                   k (if (>= (int a) 97) (- (int a) 32) (int a))\n                   l (if (>= (int b) 97) (- (int b) 32) (int b))\n                  ]\n                (if (= k l)\n                  (recur (rest str1) (rest str2))\n                  (compare k l)\n                )\n             )\n       )\n       (loop [m (re-matcher #\"\\w+\" %)\n              res []]\n         (if (.find m)\n           (recur m (cons (.group m) res))\n           res\n         )\n       )\n )", "user": "545537c1e4b0e397800069dd"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/capitalize %1) (clojure.string/capitalize %2)) (re-seq #\"[a-zA-Z]+\" s)))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 70, "code": "(fn [words]\n  (sort-by\n   \t(comp #(.toLowerCase %))\n    (.split (clojure.string/replace words #\"(?i)[^\\w']+\" \" \") \" \")))", "user": "4fea09b2e4b0547ebccb2485"}, {"problem": 70, "code": "(fn sort-word [s]\n  (sort (fn [w1 w2]\n          (compare (clojure.string/lower-case w1)\n                   (clojure.string/lower-case w2)))\n        (map #(apply str %)\n             (map (fn [s] (filter #(or (and (<= 65 (int %)) (<= (int %) 90))\n                                       (and (<= 97 (int %)) (<= (int %) 122)))\n                                  s))\n             (clojure.string/split s #\" \")))))", "user": "54651faee4b01be26fd746d6"}, {"problem": 70, "code": ";; big ugly combo-- I had these separated out when coding them\n(fn alpha-sort [s]\n  (let [exp (fn [a b] (Math/pow a b))\n        char-val (fn [x]\n                   (let [xval (int x)]\n          (if (> xval 90) \n           (- xval 32) \n            xval)))\n        alpha-char? (fn [x] \n                     (let [xval (int x)]\n          (or\n         (and (>= xval 97) (<= xval 122))\n          (and (>= xval 65) (<= xval 90)))))\n        rank-alpha-chars (fn [x]\n                           (let [factors (vec (map #(- (char-val %) 65) x))\n       exp-vals (vec (map #(exp 26 (* -1 %)) (range (count x))))]\n       (reduce + (for [j (range (count x))] (* (get factors j) (get exp-vals j))))))]\n    (let [split-strings (clojure.string/split s #\" \")]\n    (let [dbl-pure-chars (map #(filter alpha-char? %) split-strings)]\n      (map #(reduce str \"\" %) (sort-by rank-alpha-chars dbl-pure-chars))))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 70, "code": "#(sort-by\n   clojure.string/lower-case\n   (re-seq #\"(?i:\\w+)\" %))", "user": "54926752e4b0b312c081ff44"}, {"problem": 70, "code": "#(sort (fn [& xs]\n          (->> xs (map clojure.string/lower-case) (apply compare)))\n        (-> %\n            (clojure.string/replace #\"(?i)[^\\w' ]+\" \"\")\n            (clojure.string/split #\"\\s+\")))", "user": "511688d5e4b0b3e208dba05a"}, {"problem": 70, "code": "(fn [txt]\n   (sort-by clojure.string/upper-case\n            (map #(apply str %) (let [makeCharRange (fn [c1 c2] (set (map char (range (int c1) (inc (int c2))))))\n                                      isWord? (fn [c] (contains? (apply conj (makeCharRange \\a \\z)(makeCharRange \\A \\Z)) c ))\n                                      notWord? (complement isWord?)] \n                                  (loop [acc [], t (seq txt)]\n                                    (if (empty? t) acc \n                                        (recur (conj acc (take-while isWord? t)) (drop-while notWord? (drop-while isWord? t)))) )))))", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (vec (.split (.substring % 0 (dec (count %))) \" \")))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 70, "code": "(fn ssa [sen]\n  (let [rp (comp (partial apply str)\n                 (partial filter \n                          #(or (Character/isLetter %) \n                               (Character/isSpace %)\n                               (Character/isDigit %))))]\n    (sort-by clojure.string/lower-case\n      (-> sen\n        rp\n        (.split \" \")\n        seq))))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/lower-case #(compare % %2) (re-seq #\"\\w+\" x)))", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 70, "code": "(fn [str]\n    (let [parts (clojure.string/split str #\" +\")\n          filtered (map #(clojure.string/replace % #\"[:,;:!.]\" \"\") parts)\n          sorted (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2) ) filtered)]\n      sorted))", "user": "512b07f7e4b078b06821febb"}, {"problem": 70, "code": "(fn [w] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" w)))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(clojure.string/lower-case %)\n           (clojure.string/split s #\"[ .!]\")))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"\\w+\" s)\n  )\n)", "user": "4fc8f671e4b0ee37620e1840"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (re-seq #\"\\w+\" s)))", "user": "54848141e4b0e286459a119e"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 70, "code": "(fn [str] (let\n [f #(.toUpperCase %)]\n (sort #(compare (f %1) (f %2))\n       (clojure.string/split str #\"\\W\"))\n))", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 70, "code": "(fn func70 [s]                                                                                                                       \n  (let [strs (clojure.string/split (clojure.string/replace s #\"[.!]\" \" \") #\" \")                                                        \n        sorted-strs (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))                                     \n                          strs)]                                                                                                       \n    (into [] sorted-strs)))", "user": "54898297e4b0e286459a11e7"}, {"problem": 70, "code": "(fn ws [sen]\n  (sort-by (fn [v] (.toLowerCase v)) (re-seq #\"\\w+\" sen)))", "user": "5475d755e4b0c51c1f4d72a0"}, {"problem": 70, "code": "(fn word-sorting [sent]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" sent)))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 70, "code": "(comp (partial sort-by clojure.string/lower-case) (partial re-seq #\"\\w+\"))", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 70, "code": "#(sort-by (fn [s] (.toLowerCase s)) (clojure.string/split % #\"\\s+|[.!]\"))", "user": "50ef4e2be4b0a78662fa2653"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" %))", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 70, "code": "(fn [col] (sort-by #(.toLowerCase %1) (re-seq #\"\\w+\" col)))", "user": "5367bc60e4b0243289761e81"}, {"problem": 70, "code": "(fn spl [s]\n  (sort-by clojure.string/lower-case compare \n        (clojure.string/split (->> s \n                                   (filter #(re-matches #\"\\w||\\s\" (str %))) \n                                   (apply str)) \n        #\" \")))", "user": "545801f6e4b01be26fd74615"}, {"problem": 70, "code": "#(sort-by (fn [s] (.toUpperCase s)) (re-seq #\"\\w+\" %))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[ .!]\"))", "user": "50f10f7be4b06d9538fe211a"}, {"problem": 70, "code": "(fn [string] \n  (let [split-list (clojure.string/split \n                   (clojure.string/replace string #\"[.!]\" \"\")\n                   #\" \")]\n  (sort-by #(.toLowerCase %) split-list)))", "user": "54b55259e4b05787c3b1639d"}, {"problem": 70, "code": "#(sort String/CASE_INSENSITIVE_ORDER (clojure.string/split % #\"[^\\p{Alpha}]\"))", "user": "536b9d8ae4b0243289761ebe"}, {"problem": 70, "code": "#(map second\n     (sort-by first\n              (map (fn [x] [(.toLowerCase x) x]) (re-seq #\"[a-zA-Z]+\" %))))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 70, "code": "(fn [sentence]\n  (->> sentence\n       (re-seq #\"\\w+\")\n       (sort-by #(clojure.string/lower-case %))))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (clojure.string/split (apply str (remove #(#{\\, \\! \\.} %) s)) #\" \")))", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 70, "code": "(fn [s]\n    (let [ws (sort-by clojure.string/upper-case (clojure.string/split s #\"\\s\"))\n          cws (map (fn [w] (apply str (remove #(not (Character/isLetter %)) w ))) ws )]\n      (vec cws)))", "user": "515ebde3e4b01e5d11ccd0a8"}, {"problem": 70, "code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) \n              (clojure.string/split s #\"\\s+|[.!?,;]\")))", "user": "52d340ebe4b099d49816f0c1"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\" |!|\\.\"))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 70, "code": "(fn sortw [s]\n  (->> s (re-seq #\"\\w+\") (sort-by clojure.string/upper-case)))", "user": "54bc539be4b0ed20f4ff6eca"}, {"problem": 70, "code": "#(sort-by (fn [word] (.toLowerCase word)) (re-seq #\"\\w+\" %))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 70, "code": "#(->> (clojure.string/split % #\" \")\n     (map (fn [w] (re-find #\"[a-zA-Z]+\" w)))\n      (sort-by clojure.string/lower-case))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[ \\W]\"))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (vec (.split \n (clojure.string/replace %1 #\"[.!?]\" \"\")\n \" \")))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 70, "code": "(partial \n (fn kk [v coll]\n  (let [case-coll \n        (map (partial apply str)\n          (map (partial filter #(or (and (>= (int %) 65) (<= (int %) 90)) \n                                    (and (>= (int %) 97) (<= (int %) 122)) \n                                    (and (>= (int %) 48) (<= (int %) 57))))\n            (loop [i 0 st [] tt []] \n              (if (< i (count coll)) \n                (if (not= v (get coll i)) \n                  (recur (inc i) (conj st (get coll i)) tt)\n                  (recur (inc i) [] (conj tt st)))\n                (conj tt st))))) \n        case-map (apply merge (map-indexed (fn [i e] {i e}) case-coll))\n        uncase-coll (map #(.toLowerCase %) case-coll)\n        uncase-map (apply merge (map-indexed (fn [i e] {i e}) uncase-coll))\n        sort-coll (sort-by #(val %) uncase-map)\n        order-coll (map first sort-coll)\n        ;;sort-uncase-map (map #(v2m %) sort-coll) \n        ;;order-coll (map (comp first keys) sort-uncase-map)  \n        order-case-coll (map #(get case-map %) order-coll)\n       ]  order-case-coll)) \n \\space)", "user": "5243e37ae4b076204b44fae3"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n              (clojure.string/split s #\"[^a-zA-Z]+\")))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 70, "code": ";; (fn [s]\n  ;;   (sort-by clojure.string/lower-case\n  ;;            (clojure.string/split s #\"[^a-zA-Z0-9]+\")))\n  (fn [s] (->> s (re-seq #\"\\w+\") (sort-by #(.toUpperCase %))))", "user": "4f42c80ae4b0d7d3c9f3fd0f"}, {"problem": 70, "code": "(fn [s]\n    (sort #(compare (.toLowerCase %) (.toLowerCase %2)) (clojure.string/split (clojure.string/replace s #\"[^A-Za-z ]\" \"\") #\" \"))\n  )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 70, "code": "(fn sort-sent [sent]\n  (sort-by clojure.string/lower-case \n           (re-seq #\"[a-zA-Z]+\" sent)))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 70, "code": "(fn word-sort [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "5383668ee4b06839e8705edd"}, {"problem": 70, "code": "(fn f\n  [sentence]\n  (sort-by clojure.string/upper-case (clojure.string/split (clojure.string/replace sentence #\"[\\.!]\" \"\") #\" \")))", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 70, "code": "(fn __ [s]\n  (->> (clojure.string/split s #\"[^A-Za-z]+\")\n       (sort-by clojure.string/lower-case)))", "user": "54c271b9e4b045293a27f602"}, {"problem": 70, "code": "(fn [w]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" w)))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 70, "code": "(fn [s] \n  (sort-by clojure.string/upper-case \n           (map #(clojure.string/replace % #\"[^A-Za-z]\" \"\")\n                (clojure.string/split s #\" \"))))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 70, "code": "(fn [sent]\n  (sort-by #(.toLowerCase %)\n           (clojure.string/split\n            (clojure.string/replace sent #\"[^a-zA-Z ]\" \"\") #\"\\s\")))", "user": "540b2dcbe4b0addc1aec66f4"}, {"problem": 70, "code": "(fn [sentence]\n  (let [words (clojure.string/split sentence #\"[^\\w]\")]\n    (sort-by clojure.string/upper-case words)))", "user": "545bd22fe4b01be26fd7465a"}, {"problem": 70, "code": "(fn [x] (seq (apply sorted-set-by #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (re-seq #\"\\w+\" x))))", "user": "54b050cee4b09f271ff37d13"}, {"problem": 70, "code": "(fn [str]\n      (let [sanitized (clojure.string/replace str #\"[^a-zA-Z\\s]\" \"\")\n            split (clojure.string/split sanitized #\" \")\n            sort-fn #(compare\n                      (clojure.string/lower-case %1)\n                      (clojure.string/lower-case %2))]\n        (sort sort-fn split)))", "user": "52fc34cee4b047fd55837015"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 70, "code": "(fn word-sorting\n    [words]\n    (map\n     (comp \n      (partial apply str) \n      (partial filter\n                 #(or \n                  (and (>= (int %) 97) (<= (int %) 122))\n                  (and (>= (int %) 65) (<= (int %) 90)))))\n     (sort\n      (fn c\n        [a b]\n        (let [lca (seq (clojure.string/lower-case (apply str a)))\n              lcb (seq (clojure.string/lower-case (apply str b)))\n              flca (first lca)\n              flcb (first lcb)] \n          (if (not= flca flcb)\n            (< (int flca) (int flcb))\n            (c (rest lca) (rest lcb)))))\n      (remove\n       #{(list \\space)}\n       (partition-by \n        #{\\space} \n        (seq words))))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 70, "code": "(fn [s]\n  (let [words (clojure.string/split s (re-pattern \" \"))\n        compare-words (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b)))]\n    (map #(clojure.string/replace % #\"[^\\w]\" \"\") (sort compare-words words))))", "user": "5317d78ee4b08068f379ed63"}, {"problem": 70, "code": "(fn word-sorting\n  [s]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split (clojure.string/replace s #\"[.!]\" \"\") #\" \")))", "user": "52561295e4b0541d1855ba03"}, {"problem": 70, "code": "(fn word-sorter [sentence]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" sentence)))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 70, "code": "(fn [phrase]\n  (let [ cleansed (clojure.string/replace phrase #\"([^A-Za-z ])\" \"\") ]\n   \t(sort-by #(-> % .toUpperCase )\n             (clojure.string/split cleansed #\" \")\n)))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" s)))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[^a-zA-Z]\"))", "user": "54c641f8e4b045293a27f628"}, {"problem": 70, "code": "(fn [phrase] \n  (sort-by clojure.string/lower-case \n           (re-seq #\"\\w+\" \n                   phrase))\n)", "user": "546692aee4b01be26fd746e7"}, {"problem": 70, "code": "(fn [s]\n  (let [s (apply str (for [c s\n                           :when (or (= \\space c) (Character/isAlphabetic (int c)))]\n                       c))\n        ps (.split s \" \")]\n    (sort (fn [a b] (.compareTo (.toLowerCase a) (.toLowerCase b)))  (seq ps))))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 70, "code": "(fn __ [s]\n  (sort-by\n   #(clojure.string/lower-case %)\n   (map #(clojure.string/replace % #\"\\W\" \"\") (clojure.string/split s #\"\\s\"))))", "user": "54c9f165e4b045293a27f687"}, {"problem": 70, "code": "#(vec (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"[^\\sa-zA-Z]\" \"\") #\"\\s+\")))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 70, "code": "(fn [s]\n  (sort-by\n   clojure.string/lower-case\n   (-> s\n       (clojure.string/replace #\"[^a-zA-Z ]\" \"\")\n       (clojure.string/split #\" \"))))", "user": "52be5d55e4b07a9af579231e"}, {"problem": 70, "code": "(fn [s]\n  (->> (clojure.string/split s #\"[\\s\\p{Punct}]\")\n       (sort-by #(clojure.string/lower-case %))))", "user": "52470d42e4b05ef8e38e6350"}, {"problem": 70, "code": "(fn [s]\n (sort-by\n  #(.toLowerCase %)\n  (re-seq #\"\\w+\" s)))", "user": "54580586e4b01be26fd74616"}, {"problem": 70, "code": "(fn [w] (sort-by #(.toLowerCase %) (apply vector (.split w \"[\\\\s.!]+\"))))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 70, "code": "#(->> %\n      (re-seq #\"\\w+\")\n      (sort-by clojure.string/lower-case))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 70, "code": "(fn [x] \n  (sort #(compare (.toLowerCase %)(.toLowerCase %2)) (re-seq #\"\\w+\"x)))", "user": "54d75e4ce4b0a52adc2e202a"}, {"problem": 70, "code": "(fn [s]\n  (sort-by \n   #(clojure.string/lower-case %)\n   (seq (.split #\"[\\s\\W]+\" s))))", "user": "54d03026e4b018d918be98de"}, {"problem": 70, "code": "(fn [sen] \n  (->> \n   (clojure.string/split sen #\"[^a-zA-Z]\")\n   (filter (partial not= \" \"))\n   (map #(let [] [(clojure.string/lower-case %) %]))\n   (into (sorted-map))\n   (reduce #(conj % (%2 1)) [])\n   ))", "user": "54d89deae4b0a52adc2e203a"}, {"problem": 70, "code": "(fn [s]\n    (let [lc clojure.string/lower-case\n          comp-str #(compare (lc %1) (lc %2))\n          words (clojure.string/split s #\"\\W\")]\n      (sort comp-str (filter (comp not empty?) words))))", "user": "52950ab6e4b02ebb4ef7501a"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (clojure.string/split s #\"\\W+\")))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 70, "code": "(fn [s]\n  (sort (fn [x y] (compare\n                    (clojure.string/lower-case x)\n                    (clojure.string/lower-case y)))\n                       (clojure.string/split s #\"[ \\.\\!]\")))", "user": "53664e3be4b0243289761e74"}, {"problem": 70, "code": "(fn ws [s]\n  (sort-by clojure.string/upper-case\n   (clojure.string/split s #\"[ .!]\")))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/upper-case  (re-seq #\"\\w+\" x)))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 70, "code": "#(sort\n  (fn [x y]\n    (let [lc clojure.string/lower-case]\n      (compare (lc x) (lc y))))\n  (re-seq #\"\\w+\" %))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 70, "code": "(fn\n  [s]\n  (let [p (clojure.string/split s #\"[ !.?,]\")\n        l (map clojure.string/lower-case p)\n        t (zipmap l p)]\n    (map #(get t %) (sort l))))", "user": "51b76227e4b0d906fcd71d35"}, {"problem": 70, "code": "(fn [sent] \n  (sort #(compare (. %1 toLowerCase) \n                  (. %2 toLowerCase)) \n        (re-seq #\"[\\w]+\" sent)))", "user": "4dd6d7ee535d2dad7130b5cb"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %) (map #(clojure.string/replace % #\"[^a-zA-Z]\" \"\") (clojure.string/split s #\" \"))))", "user": "54c754ace4b045293a27f639"}, {"problem": 70, "code": "(fn [msg] (sort\n             #(compare \n                (clojure.string/lower-case %1) \n                (clojure.string/lower-case %2))\n             (map #(clojure.string/replace % #\"\\p{Punct}\" \"\") \n                  (clojure.string/split msg #\"\\s+\"))))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 70, "code": "(fn [string]\n  (sort-by (fn [word] (.toLowerCase word)) (re-seq #\"[a-zA-Z]+\" string)))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 70, "code": "#(sort (fn [x y] (compare (.toUpperCase x) (.toUpperCase y)))\n       (re-seq #\"\\w+\" %))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 70, "code": "(fn [s]\n  (let [words (clojure.string/split s #\"[\\s\\W]+\")]\n    (sort-by #(clojure.string/capitalize %) words)))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 70, "code": "#(sort-by (fn [a] (clojure.string/lower-case a)) (re-seq #\"\\w+\" %))", "user": "504f9ae1e4b0a02f9cffde9c"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\"\\W+\"))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 70, "code": "(fn f [x]\n  (->> (clojure.string/split x #\"[^\\w]\")\n       (filter not-empty)\n       (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)))))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[ \\p{Punct}]\"))", "user": "4f7207d3e4b07046d9f4f019"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "user": "54dae16de4b024c67c0cf758"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace s #\"[^A-Za-z ]\" \"\") #\"\\s+\")))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toUpperCase %) (.split s \"\\\\W\")))", "user": "53523ae0e4b084c2834f4aee"}, {"problem": 70, "code": "(fn ss [xs]\n  (sort #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2))\n   (-> xs\n       (clojure.string/replace #\"\\p{Punct}\" \"\")\n       (clojure.string/split #\" \"))))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "54eb43efe4b024c67c0cf847"}, {"problem": 70, "code": "(fn [st] (sort-by #(.toLowerCase %) (clojure.string/split st #\"[^\\w]\" )))", "user": "524025bce4b0ad64fa01030f"}, {"problem": 70, "code": "(fn [x]\n   (letfn [(scmp [a b]\n                 (compare (clojure.string/lower-case a) (clojure.string/lower-case b)))]\n     (map #(clojure.string/replace % #\"[\\.!]\" \"\")\n          (sort scmp (clojure.string/split x #\" \")))))", "user": "525cc912e4b0cb4875a45d48"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"(?i)[a-z]+\" %))", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 70, "code": "(fn [sentence] (apply vector (into (sorted-set-by #(.compareTo (.toLowerCase %) (.toLowerCase %2))) (re-seq #\"\\w+\" sentence))))", "user": "4e68c465535d8ccf87e9fe8a"}, {"problem": 70, "code": "(fn [sentence]\n    (->> sentence (re-seq #\"\\w+\") (sort-by clojure.string/lower-case)))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"(?i)[a-z]+\" %))", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toUpperCase %) (clojure.string/split s #\"[^\\w+]\")))", "user": "4f038ed6535dcb61093f6b24"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toUpperCase %) (clojure.string/split s #\"[^\\w+]\")))", "user": "5360f043e4b0243289761e3c"}, {"problem": 70, "code": "(fn [s] (sort-by  #(.toUpperCase  %) (re-seq  #\"[a-zA-Z]+\" s)))", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[.! ]\"))", "user": "534e4a29e4b084c2834f4ab0"}, {"problem": 70, "code": "(fn [s] (let [m (into {} (map #(-> [(clojure.string/upper-case %) %]) (re-seq #\"\\w+\" s)))] (map m (sort (keys m)))))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 70, "code": "(fn [x] (sort #(compare (.toLowerCase %) (.toLowerCase %2)) (clojure.string/split x #\"\\W\")))", "user": "516f06dce4b06aac486e5b39"}, {"problem": 70, "code": "(fn [string]\n  (sort #(compare (clojure.string/lower-case %1)\n                  (clojure.string/lower-case %2)\n    ) (clojure.string/split string #\"[^a-zA-Z]+\")))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[^\\w]\"))", "user": "54be792ee4b0ed20f4ff6eeb"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 70, "code": "(fn [s]\n  (let [separator? #{\\. \\; \\? \\! \\,}]\n    (sort-by #(.toLowerCase %)\n             (vec (.split (apply str (filter #(nil? (separator? %)) s)) \" \")))))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 70, "code": "(fn [x]\n  (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace x #\"\\p{P}\" \"\") #\" \")))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "52f53589e4b05e3f0be25f2c"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case \n           (clojure.string/split \n            (clojure.string/replace s #\"[^a-zA-Z ]+\" \"\") \n            #\" \")))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case \n           (re-seq #\"[A-Za-z]+\" s)))", "user": "54f2a1b8e4b024c67c0cf8cb"}, {"problem": 70, "code": "(fn [s]\n\t(let [sbw (fn [s] (clojure.string/split s #\"\\s+\"))\n          rp (fn [s] (clojure.string/replace s #\"(?i)[^\\w']+\" \"\"))]\n     (->> s\n          sbw\n          (map rp)\n          (sort-by clojure.string/lower-case))))", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 70, "code": "(fn [strng]\n  (sort\n   #(compare\n     (clojure.string/lower-case %1)\n     (clojure.string/lower-case %2))\n   (clojure.string/split strng #\"[^A-Za-z]\")))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 70, "code": "(fn [a] (sort-by clojure.string/upper-case  \n         (clojure.string/split (subs \n                               a 0\n                                (dec (count a))) #\" \")))", "user": "50e90813e4b033b0e80d11e7"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n   (clojure.string/split s #\"[ .,!]+\")))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 70, "code": "(fn sort-str [in-str]\n    (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) \n        (vec (.split in-str \"\\\\p{Space}|\\\\p{Punct}\"))))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 70, "code": "(fn [s]\n  (sort-by \n    #(clojure.string/lower-case %)\n    (clojure.string/split s #\"[ !\\.]\")))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 70, "code": "#(->> \n      (-> %\n           (clojure.string/replace #\"[^a-zA-Z ]\" \"\")\n           (clojure.string/split #\" \"))\n      (sort-by clojure.string/lower-case))", "user": "544e8369e4b0e39780006987"}, {"problem": 70, "code": "(fn [s]\n  (letfn \n    [(sort-lower-case [s1 s2] (compare (.toLowerCase s1) (.toLowerCase s2)))\n     (strip-punctuation [word] (clojure.string/replace word #\"(?i)[^\\w']+\" \"\"))\n     (split-space [s] (clojure.string/split s #\" \"))]\n    (sort sort-lower-case (map strip-punctuation (split-space s)))))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 70, "code": "(fn [entrada] (let [ss (clojure.string/split (->> (clojure.string/lower-case entrada) drop-last (clojure.string/join \"\")) #\" \")\n                    m {(first ss) (clojure.string/capitalize (first ss))} ]\n                \n                (replace m (sort ss))\n                \n                ))", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (.split s \"\\\\W+\")))", "user": "550aeddae4b06e50f9beb135"}, {"problem": 70, "code": "(fn [s]\n    (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"[a-zA-Z]+\" s)))", "user": "551a21ece4b091ff45eda993"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (apply str (butlast (seq %))) #\" \"))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 70, "code": "#(sort-by (fn [x] (.toLowerCase x)) (clojure.string/split % #\"[^\\w+]\"))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "51a058dae4b0b292b01ee3f3"}, {"problem": 70, "code": "(fn [x]\n  (sort  #(compare (.toLowerCase %)\n                   (.toLowerCase %2))\n         (re-seq #\"\\w+\" x)))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 70, "code": "#(sort-by\n    clojure.string/lower-case\n    (clojure.string/split % #\"[^a-zA-Z]\"))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 70, "code": "#(letfn [(stringcmp [s1 s2]\n                    (compare (clojure.string/lower-case s1)\n                             (clojure.string/lower-case s2)))\n         (alpha? [c] (some (partial = c) \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))]\n   (sort stringcmp\n         (filter seq\n         (map (partial apply str)\n              (loop [s %\n                     acc []\n                     cur []]\n                (cond\n                 (empty? s) (conj acc cur)\n                 true (let [isalpha (alpha? (first s))]\n                        (recur (rest s)\n                               (if isalpha acc (conj acc cur))\n                               (if isalpha (conj cur (first s)) [])))))))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" %))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 70, "code": "(fn re-seq-and-sort-without-reguard-to-case-or-punctuation [string]\n  (->> string \n       (re-seq #\"\\w+\")\n       (sort-by clojure.string/upper-case)))", "user": "50e1bdd8e4b019fc399ce17f"}, {"problem": 70, "code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"\\w+\" %))", "user": "52eaba10e4b09f7907dd14c2"}, {"problem": 70, "code": "(fn [s]\n   (->> (clojure.string/split s #\" \")\n        (map #(clojure.string/replace % #\"[^a-zA-Z]\" \"\"))\n        (sort-by clojure.string/lower-case)\n        )\n   )", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "55253217e4b0882d96d091ce"}, {"problem": 70, "code": "#(sort-by (fn [w] (clojure.string/lower-case w)) (re-seq #\"\\w+\" %))", "user": "50f53694e4b057d4c52de881"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (.split s \"[^\\\\w]+\")))", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 70, "code": "#(vec (sort-by clojure.string/lower-case (re-seq #\"\\w+\" %)))", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 70, "code": "#(remove \n  (fn [x] (nil? (re-matches #\"\\w+\" x))) \n  (sort (fn [a b] (compare (.toUpperCase a) (.toUpperCase b))) \n        (map (fn [z] (apply str z)) (partition-by (fn [c] (nil? (re-matches #\"\\w+\" (str c)))) (seq %)))))", "user": "551c66dae4b07993ea3788de"}, {"problem": 70, "code": "(fn [astr]\n          (sort-by clojure.string/upper-case (clojure.string/split astr #\"[\\s\\.\\!]\"))\n          )", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "user": "525d490ae4b0cb4875a45d70"}, {"problem": 70, "code": "(fn f1 [x] (sort-by clojure.string/upper-case (clojure.string/split (clojure.string/replace x #\"[^A-Za-z\\s]\" \"\") #\"\\s+\")))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 70, "code": "(fn [stri]\n   (let [formatted-str (reduce (fn [x y] (conj x (if (Character/isLetter (last y)) y (apply str (drop-last y))))) '() (clojure.string/split stri #\" \"))\n         sortit (fn sorting [str1 str2]\n                  (if (and (empty? str1) (= (empty? str2) false))\n                    -1\n                    (if (and (empty? str2) (= (empty? str1) false))\n                      1\n                      (if (and (empty? str1) (empty? str2))\n                        0\n                        (if (= 0 (Character/compare (Character/toLowerCase (first str1)) (Character/toLowerCase (first str2))))\n                          (sorting (rest str1) (rest str2))\n                          (Character/compare (Character/toLowerCase (first str1)) (Character/toLowerCase (first str2))))))))]\n     (sort sortit formatted-str)))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 70, "code": "(fn [s]\n   (letfn [(normalize [w]\n             (let [matcher (re-matcher #\"\\w+\" (.toLowerCase w))]\n               (loop [match (re-find matcher)\n                      acc []]\n                 (if (nil? match)\n                   (clojure.string/join acc)\n                   (recur (re-find matcher)\n                          (conj acc match))))))]\n     (let [ws (clojure.string/split s #\"\\s+\")\n           ws-map (reduce #(assoc %1 (normalize %2) %2) {} ws)]\n       (->> (keys ws-map) (sort) (map #(get ws-map %)) (map #(re-find #\"[a-zA-Z]+\" %))))))", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 70, "code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (filter not-empty (clojure.string/split s #\"[^\\w+]\"))))", "user": "552694e7e4b0ffed3738f920"}, {"problem": 70, "code": "(fn word-sort [ws]\n  (let [filtered-words (re-seq #\"[a-zA-Z]+\" ws)\n        char-weight (fn [c] (if (>= (int c) (int \\a)) (int c)\n                              (+ (int c) (- (int \\a) (int \\A)))))\n        word-weight (fn [[l & ls]]\n                      (loop [w (char-weight l), cnt (bigint 1000), [l & ls] ls]\n                        (if (nil? l) w\n                          (recur (+ w (/ (char-weight l) cnt)) (* cnt 1000) ls))))\n        order2words (sort-by first (map vector (map word-weight filtered-words) filtered-words))]\n    (mapv second order2words)))", "user": "54bbaa8ee4b0ed20f4ff6ec0"}, {"problem": 70, "code": "(fn [s]\n  (map #(apply str %) (sort\n   #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n   (take-nth 2 (partition-by #(= 32 (int %))\n   (filter\n    (fn [c] (some #(= (int c) %) (concat '(32) (range 65 91) (range 97 123)))) s))))))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 70, "code": "(fn [s_#] (vec (\n           (fn [x_#] (sort #(-> (.. (new java.lang.String (clojure.string/lower-case %)) (compareTo (clojure.string/lower-case %2))) (< 0)) x_#))\n           (clojure.string/split s_# #\"[ |.|!]\"))))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" s)))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 70, "code": "#(sort-by (fn [s] (.toLowerCase s))\n          (clojure.string/split % #\"[,.;: !?]+\"))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 70, "code": "#(sort-by\n   clojure.string/lower-case\n   (re-seq #\"\\w+\" %)\n   )", "user": "55249f64e4b0882d96d091c6"}, {"problem": 70, "code": "(fn [ss]\r\n         (let [norm (fn [s]\r\n                      (clojure.string/replace (.toUpperCase s) #\"\\W\" \"\")\r\n                      )]\r\n           (sort #(compare (norm %1) (norm %2)) (re-seq #\"[A-Z|a-z]+\" ss))\r\n           )\r\n         )", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"[A-Za-z]+\" %))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 70, "code": "(fn [s]\n  (let [words (clojure.string/split (clojure.string/replace s #\"\\W+\" \" \") #\"\\s+\")\n        l clojure.string/lower-case\n        sort-fn #(compare (l %) (l %2))]\n    (sort sort-fn words)))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 70, "code": "(fn [s]\n  (sort \n   #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n   (clojure.string/split (clojure.string/replace s #\"[\\.!]\" \"\") #\" \")))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 70, "code": "(fn [msg] (sort-by (fn [s] (clojure.string/lower-case s)) (clojure.string/split (clojure.string/replace msg #\"[.!,\\?]\" \"\") #\" \")))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 70, "code": "(fn [sentence]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" sentence)))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 70, "code": "(fn sort-words [str]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split (.replaceAll str \"[^\\\\w\\\\s]\" \"\") #\" \")))", "user": "53504fe6e4b084c2834f4ada"}, {"problem": 70, "code": "(fn [s]\n    (letfn [(letters-only [x] (apply str (filter #(Character/isLetter %) x)))\n            (lc [x] (clojure.string/lower-case x))\n            (case-insensitive-compare [a b]\n              (compare (lc a) (lc b)))]\n      (->> (clojure.string/split s #\" \")\n           (map letters-only)  ;; apparently \"punctuation should be ignored\" means it should be *removed*\n           (sort case-insensitive-compare))))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 70, "code": "#(->> %\n    (re-seq #\"\\w+\")\n    (sort-by clojure.string/upper-case))", "user": "553a35bfe4b09218d5f44ff0"}, {"problem": 70, "code": "(fn [s]\n  (sort-by\n   #(.toLowerCase %)\n   (re-seq #\"[A-Za-z]+\" s)))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"(?i)[a-z]+\" s)))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 70, "code": "(fn [s]\n  (sort\n    (fn [& args]\n      (apply compare (map clojure.string/lower-case args)))\n    (clojure.string/split\n      (clojure.string/replace s #\"[\\.\\!]\" \" \")\n      #\"\\s+\")))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" s)))", "user": "5547cd6ee4b0a04f79299553"}, {"problem": 70, "code": "(fn [s]\n   (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "51bd255ce4b0df1216cefd94"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (.split s \"\\\\W\")))", "user": "55495318e4b0a04f79299566"}, {"problem": 70, "code": "(fn word-sort [s]\n  (sort #(compare (clojure.string/lower-case %1)\n                  (clojure.string/lower-case %2)) (clojure.string/split s #\"\\s+|\\W+\")))", "user": "55151417e4b055c2f668d4da"}, {"problem": 70, "code": ";; break it, cap compare, sort \n(fn [s]\n  (sort-by clojure.string/lower-case\n           (re-seq #\"[A-Za-z]+\" s)))", "user": "553478dce4b09218d5f44f9d"}, {"problem": 70, "code": "(comp (partial sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))) #(re-seq #\"\\w+\" %))", "user": "5370b386e4b0fc7073fd6e9b"}, {"problem": 70, "code": "(fn [str] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split (clojure.string/replace str #\"[.!]\" \"\") #\" \")))", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 70, "code": "(fn[x](map #(second %)(sort-by first (map #(list (clojure.string/lower-case (str  %)) %)  (re-seq #\"\\w+\" x))) ))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 70, "code": "#(-> %\n         (clojure.string/replace #\"!|\\.\" \"\")\n         (clojure.string/split #\" \")\n         (->> (sort-by clojure.string/lower-case)))", "user": "51e3a549e4b0c611d6113e47"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (re-seq #\"[A-Za-z]+\" s)))", "user": "5515f96ce4b055c2f668d4f7"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" x)))", "user": "5546704be4b0a04f7929953d"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "554b7056e4b0a04f79299583"}, {"problem": 70, "code": "(fn [s] (sort (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b)))\n              (clojure.string/split (clojure.string/replace s #\"[^\\w\\s]\" \"\") #\" \")))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "5553b924e4b0deb715856e06"}, {"problem": 70, "code": "(fn word-sort [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 70, "code": "(fn [sentence]\n    (->> (.split sentence \" \")\n         (map #(.replaceAll % \"[^a-zA-Z]\", \"\"))\n         (map #(vector % (.toLowerCase %)))\n         (sort-by second)\n         (map first)))", "user": "543d89dfe4b032a45b869350"}, {"problem": 70, "code": "(fn my-sort [str]\n  (sort-by clojure.string/lower-case (clojure.string/split str #\"[^\\w]\")))", "user": "5264383be4b03e8d9a4a70cb"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 70, "code": "(fn [words] (sort (fn [lhs rhs]\n        (.compareTo (.toLowerCase lhs) (.toLowerCase rhs)))\n        (vec (.split #\"[ .!]\" words))))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 70, "code": "(fn [s]\n  (sort\n   #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n               (clojure.string/split s #\"[\\s\\p{Punct}]\")))", "user": "4f9b3532e4b0dcca54ed6d13"}, {"problem": 70, "code": "#(sort-by (fn [x] (.toUpperCase x)) (re-seq #\"\\w+\" %))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 70, "code": "(fn word-list [s] \n  (sort-by #(clojure.string/upper-case %) (re-seq #\"[A-Za-z]+\" s)))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "555a5731e4b0deb715856e44"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (re-seq #\"[A-Za-z]+\" s)))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 70, "code": "(fn [w] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" w)))", "user": "545ddac3e4b01be26fd74676"}, {"problem": 70, "code": "(fn [s]\r\n  (sort-by #(clojure.string/lower-case %)\r\n    (clojure.string/split s #\"[ .!]\")))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 70, "code": "(fn [str]\n  (sort-by\n    (fn [s] (.toLowerCase s))\n  (re-seq #\"\\w+\" str )))", "user": "5540f5dee4b0a04f79299509"}, {"problem": 70, "code": "(fn wsort\n  [sentence]\n  (let [coll (re-seq #\"\\w+\" sentence)]\n    (sort-by #(clojure.string/capitalize %) coll)))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case \n          (clojure.string/split % \n                                #\"[^\\w+]\"))", "user": "5564cad5e4b0c656e3ff180f"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 70, "code": "(fn [s]\n  (-> s\n      (clojure.string/replace #\"[.?!]\" \"\")\n      (clojure.string/split #\" \")\n      (->> (sort-by clojure.string/lower-case))))", "user": "555521a5e4b0deb715856e12"}, {"problem": 70, "code": "(fn [s]\n\t(sort #(cond\n            (neg? (compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))) -1\n            (zero? (compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))) 0\n            (pos? (compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))) 1)\n          (clojure.string/split s #\"[^a-zA-Z]+\")))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 70, "code": "(fn string-sort [sentence]\n  (letfn [(lower [s] (.. s (toLowerCase)))]\n    (let [words (re-seq #\"\\b[a-zA-Z]+\\b\" sentence)]\n      (sort #(compare (lower %1) (lower %2)) words))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 70, "code": "(fn split-sort [sentence]\n (sort-by #(.toLowerCase %) (sequence (.split sentence \"[^a-zA-Z]+\"))))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 70, "code": "(fn [s] (->> s \n             (re-seq #\"\\w+\") \n             (sort-by clojure.string/lower-case)))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 70, "code": "(fn [s]\n  (let [words (re-seq #\"\\w+\" s)\n        lc clojure.string/lower-case]\n    (sort #(compare (lc %1) (lc %2)) words)))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 70, "code": "(fn [string]\n (sort \n  #(compare (.toLowerCase %1) (.toLowerCase %2))\n  (clojure.string/split string #\"\\W\")))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 70, "code": "(fn [x] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" x)))", "user": "4eb0175b535d7eef30807336"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "554b8572e4b0a04f79299589"}, {"problem": 70, "code": "(fn sort-words\n\t[sent]\n\t(sort-by clojure.string/lower-case\n\t\t(clojure.string/split\n\t\t\t(clojure.string/replace\n\t\t\t\tsent\n\t\t\t\t#\"[^a-zA-z ]\"\n\t\t\t\t\"\")\n\t\t\t#\" \")\n\t\t)\n\t)", "user": "5545477fe4b0a04f79299531"}, {"problem": 70, "code": "(fn [x] (->> (clojure.string/split x #\" \")\n             (map #(->> % (re-seq #\"\\w\") (clojure.string/join \"\")))\n             (sort-by clojure.string/lower-case)))", "user": "5499e23de4b03163384f4706"}, {"problem": 70, "code": "(fn word-sort [sentence]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n        (re-seq #\"\\w+\" sentence)))", "user": "54c3747de4b045293a27f60e"}, {"problem": 70, "code": "(fn sort-words [sentence]\n  (sort #(. %1 compareToIgnoreCase %2)\n        (re-seq #\"[A-Za-z]+\" sentence)))", "user": "55586905e4b0deb715856e2b"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" s)))", "user": "50cf94bde4b0abc485cb9bb2"}, {"problem": 70, "code": "(fn [s]\n  (->> s\n       (re-seq #\"[\\w]+\")\n       (sort-by #(.toLowerCase %))))", "user": "55702081e4b09a3098a52529"}, {"problem": 70, "code": "(fn [s] \n  (map #(.replaceAll % \"[^a-zA-Z]\" \"\") (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (.split s \" \"))))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 70, "code": "(fn [s] (let [c #(.toLowerCase %)] (sort #(compare (c %1) (c %2)) (.split (clojure.string/replace s #\"\\!|\\.\" \" \" ) \" \"))))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 70, "code": "(fn [a] (sort-by #(.toLowerCase %) (re-seq #\"[\\w]+\" a)))", "user": "549b1e50e4b0f3d1d8e70f7a"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "54982522e4b0b312c081ff7c"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case\n           (clojure.string/split % #\"[^a-zA-Z]+\"))", "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[!\\W]\"))", "user": "555ac933e4b0deb715856e49"}, {"problem": 70, "code": "(fn [s]\n    (let [w (clojure.string/split s #\"\\W\")]\n      (sort-by #(clojure.string/upper-case %) w)))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 70, "code": "(fn [s] (sort-by \n         clojure.string/lower-case (re-seq #\"\\w+\" s)))\n         ;(seq (clojure.string/split s #\" \"))))", "user": "5253de67e4b0541d1855b939"}, {"problem": 70, "code": "(fn word-sorting [sentence]\n  (let [lower-case-sentence (-> sentence\n                                (clojure.string/replace #\"[\\.\\!\\?]\" \"\")\n                                (clojure.string/split #\"\\s\"))]\n    (sort-by #(clojure.string/lower-case %) lower-case-sentence)))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 70, "code": "(fn [s]\n  (sort \n   #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n   (clojure.string/split s #\"[^a-zA-Z]\")))", "user": "53065acbe4b02e8216869792"}, {"problem": 70, "code": "#(sort-by (fn [x] (.toLowerCase x)) (re-seq #\"\\w+\" %))", "user": "4db1fe241254ad5b4805fa77"}, {"problem": 70, "code": "(fn [s]\n    (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n      (clojure.string/split\n        (clojure.string/replace s #\"[.,!]\"  \"\") #\"\\s+\")))", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 70, "code": "(fn sol [s] (sort-by #(.toLowerCase %1)\n                (-> s (clojure.string/replace #\"[\\.!]\" \"\") (clojure.string/split #\" \"))))", "user": "54857657e4b0e286459a11ac"}, {"problem": 70, "code": "(fn sort-words\n  [sentence]\n  (sort-by #(.toUpperCase %1) (map (comp (partial apply str)\n                                         (partial filter (fn [chr]\n                                                           (or (and (< (int chr) 123) (< 96 (int chr)))\n                                                               (and (< (int chr) 91) (< 64 (int chr)))))))\n                                         (.split #\" \" sentence))))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 70, "code": "#(->> (.split % \"\\\\W\") (sort-by (fn [w] (.toLowerCase w))))", "user": "552a793ee4b0ffed3738f955"}, {"problem": 70, "code": "(fn wordsort [s]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n   (remove empty? (clojure.string/split s #\"\\W\"))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 70, "code": "(fn [s]  \n  (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (map #(clojure.string/replace % #\"[\\.\\!\\?]\" \"\") (clojure.string/split s #\" \"))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 70, "code": "(fn [string]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" string)))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 70, "code": "(fn [input]\n\t(sort-by\n\t\t #(str (clojure.string/lower-case %)) \n\t\t (clojure.string/split \n\t\t \t(apply \n\t\t \t\tstr \n\t\t \t\t(remove \n\t\t \t\t\t#(#{\\.,\\!} %) \n\t\t \t\t\tinput\n\t\t \t\t)\n\t\t \t) \n\t\t \t#\" \"\n\t\t )\n\t)\n)", "user": "5559b443e4b0deb715856e3c"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(clojure.string/lower-case %)\n           (clojure.string/split s #\"\\W\")))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5589a735e4b059ccff29b206"}, {"problem": 70, "code": "(fn word-sort\n  [s]\n  (sort-by #(clojure.string/lower-case %) (clojure.string/split s #\"[^a-zA-z0-9]\")))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split s #\"\\W+\")))", "user": "558b50d5e4b027778923762b"}, {"problem": 70, "code": "(fn [s]\n   (->> (clojure.string/split s #\"[ \\.!]\")\n      (remove (partial = \".\"))\n      (sort-by clojure.string/capitalize)))", "user": "55895eade4b059ccff29b202"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))(re-seq #\"\\w+\" %))", "user": "558a81fbe4b027778923761c"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "user": "53bed4b5e4b0c98a41f5cc94"}, {"problem": 70, "code": "(fn [ss]\n          (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split ss #\"[ .!]\")))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/upper-case (clojure.string/split (re-find (re-matcher #\"[A-Za-z\\s]+\" x)) #\"\\s\")))", "user": "556cb481e4b09a3098a52501"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 70, "code": "(fn [x] \n  (sort-by \n   clojure.string/lower-case \n   (re-seq #\"\\w+\" x)))", "user": "5596a324e4b04c1e5c31d757"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/upper-case (re-seq #\"[A-Za-z]+\" s)))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 70, "code": "(fn [msg]\n   (let [pieces (clojure.string/split (clojure.string/replace msg #\"[.!]\" \"\") #\"\\s+\")]\n     (vec (vals (into (sorted-map) (zipmap (map #(clojure.string/lower-case %) pieces) pieces))))))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n        (clojure.string/split (clojure.string/replace s #\"[^\\w\\s]\" \"\") #\"\\s\")))", "user": "5590e55de4b0277789237676"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v)) (re-seq #\"\\w+\" %))", "user": "55897fe2e4b059ccff29b205"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 70, "code": "(fn [string]\n  (sort-by\n   #(reduce + (map * (map int (clojure.string/lower-case %))\n         (iterate (fn [x] (* 0.001 x)) 1)))\n   (clojure.string/split string #\"\\W\")))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "52c5c1c8e4b0c2d177d620fc"}, {"problem": 70, "code": "(fn [x]\n    (sort-by clojure.string/upper-case (re-seq #\"\\w+\" x)))", "user": "55342ee0e4b09218d5f44f98"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\"[ !?.,]\"))", "user": "4f80db02e4b033992c121bf9"}, {"problem": 70, "code": "(fn [s] \n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n              (re-seq #\"\\w+\" s)))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 70, "code": "#(into [] (sort-by clojure.string/upper-case (clojure.string/split % #\"[\\p{Punct}\\s]\")))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 70, "code": "(fn [s]\n  (->> (clojure.string/split s #\"[\\W\\s]+\")\n       (remove empty?)\n       (sort-by clojure.string/lower-case)))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 70, "code": "(fn [s]\n  (let [x (map (fn [a] (apply str (filter #(Character/isLetter %) a))) (clojure.string/split s #\" \"))]\n  (sort-by clojure.string/upper-case x)))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 70, "code": "#(-> %\n     (clojure.string/replace #\"\\pP\" \"\")\n     (clojure.string/split #\" \")\n     (->> (sort-by clojure.string/upper-case)))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 70, "code": "(fn [s] (vec (sort-by clojure.string/lower-case (clojure.string/split s  #\"[^A-Za-z]\"))))", "user": "537e104ce4b06839e8705e9a"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/lower-case (map #(clojure.string/replace % #\"[^a-zA-Z]\" \"\") (clojure.string/split x #\"\\s\"))))", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 70, "code": "(fn p70 [words]\n  (->> (clojure.string/split words #\" \")\n     (map #(clojure.string/replace % #\"[.!]\" \"\") )\n      (sort-by clojure.string/lower-case) \n       (apply vector)\n   ))", "user": "5400e918e4b0de5c41848619"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace s  #\"[!\\.]\" \"\") #\" \")))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split %1 #\"\\s|\\p{Punct}\"))", "user": "55306f9de4b076ab5578f814"}, {"problem": 70, "code": "#(->> (clojure.string/split % #\"[ .!]\") (map (juxt identity clojure.string/lower-case)) (sort-by second) (map first))", "user": "523b4e91e4b07becd5be21ef"}, {"problem": 70, "code": "(fn [s]\n  (sort \n   \t#(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) \n   (clojure.string/split (clojure.string/replace s #\"[^\\w ]\" \"\") #\" \")))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 70, "code": "(fn [s]\n  (sort #(.compareToIgnoreCase %1 %2) (clojure.string/split s #\"[ ,\\\\.!?-]\")))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 70, "code": "(fn [sent]\n           (->> sent\n                (re-seq #\"\\w+\")\n                (sort-by clojure.string/lower-case)))", "user": "530b8580e4b02e82168697cc"}, {"problem": 70, "code": "(fn [str]\n  (->> (clojure.string/split str #\"[\\W]\")\n       (remove empty?)\n       (sort #(apply compare (map clojure.string/lower-case %&)))))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 70, "code": "(fn [s] (let [cs (group-by #(clojure.string/lower-case %)\n         (-> s (clojure.string/replace #\"[.!]\" \"\") (clojure.string/split #\"[\\s]+\"))) ]\n\t(vec (map #(-> % last first) (sort-by first cs))) ))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 70, "code": "(fn word-sort\n  [in-str]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2) ) (clojure.string/split (subs in-str 0 (dec (count in-str))) #\" \"))\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 70, "code": "(fn [msg] \n  (sort \n    (fn [s1, s2] \n      (-> s1 \n          .toLowerCase\n          (.compareTo (.toLowerCase s2))))\n    (map \n      (fn [s] \n        (re-find #\"[A-Za-z]*\" s)) \n      (clojure.string/split msg #\" \"))))", "user": "55b1c24ae4b0da326a65cf70"}, {"problem": 70, "code": "(fn [coll]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split coll #\"[ .,;!]\")))", "user": "55afd469e4b002ce9d5cbc19"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/lower-case (clojure.string/split (.replaceAll x \"[.!?]\" \"\") #\" \")))", "user": "5576e78de4b05c286339e075"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (clojure.string/split s #\"\\W+\")))", "user": "5576f299e4b05c286339e077"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 70, "code": "(fn [s]\n  (->> (clojure.string/split s #\" \")\n       (map #(clojure.string/replace % #\"\\W\" \"\"))\n       (sort-by #(.toLowerCase %))))", "user": "50ec409ce4b04edc33777045"}, {"problem": 70, "code": "(fn sort-words\n  [xs]\n  (-> xs\n      (clojure.string/replace #\"[^\\s|\\w]\" \"\")\n      (clojure.string/split #\"\\s\")\n      ((partial sort-by clojure.string/lower-case))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 70, "code": "(fn [s]\n    (let [words (->\n                  s\n                  (clojure.string/replace #\"[^\\w\\s]\" \"\")\n                  (clojure.string/split   #\"\\s+\"))]\n      (->>\n        words\n        (map #(vector (clojure.string/lower-case %) %))\n        (sort-by first)\n        (map last))\n      )\n    )", "user": "559a9a3de4b066d22e731f45"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split %  #\"\\W\") )", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"[.!]\" \"\") #\" \"))", "user": "4faf97d8e4b081705acca258"}, {"problem": 70, "code": "(fn [s]\n   (sort-by (fn [s] (.toLowerCase s))\n            (map (fn [s] (clojure.string/replace s #\"[.!]\" \"\"))\n                 (seq (.split s \" \")))))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 70, "code": "(fn [s]\n   (sort\n     (fn [a b]\n       (compare (.toLowerCase a) (.toLowerCase b)))\n     (map str\n          (.split\n            (.replaceAll s \"[^A-Za-z ]\" \"\")\n            \" \"))))", "user": "50978ca4e4b00ad8bab4e966"}, {"problem": 70, "code": "(fn [s] (sort-by #(. % toLowerCase) (.split s \"[^A-Za-z]\")))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split (clojure.string/replace % #\"[!.]\" \"\") #\" \"))", "user": "55c1048ee4b01b9910ae2a2d"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 70, "code": "(fn [s]\n   (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "55b54ecbe4b01b9910ae2987"}, {"problem": 70, "code": "#(->> (clojure.string/split %1 #\"\\W\")\n\t  (sort-by clojure.string/lower-case))", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "522eb5cce4b01cdb292c5f0c"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case\n           (re-seq #\"[A-Za-z]+\" %))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split s #\"[^\\w]\")))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 70, "code": "(fn f [sentence]\n  (sort #(.compareTo (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n        (re-seq #\"[a-zA-Z]+\" sentence)))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 70, "code": "(fn[source](sort String/CASE_INSENSITIVE_ORDER (clojure.string/split source #\"\\W+\")))", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 70, "code": "#(sort-by (fn [s-seq] (.toUpperCase s-seq)) (re-seq #\"\\w+\" %))", "user": "5586f418e4b059ccff29b1de"}, {"problem": 70, "code": "(fn [str] (let [toks (clojure.string/split str #\"\\s|\\.|\\,|\\?|\\!\") tokmap (zipmap (map clojure.string/lower-case toks) toks)] (map #(tokmap %) (sort (keys tokmap)))))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 70, "code": "(fn [s1] (->> (.split s1 \" |[.!]\") (sort-by #(.toUpperCase %))))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 70, "code": "#(sort (fn [s1 s2] (compare (.toLowerCase s1) (.toLowerCase s2))) (re-seq #\"\\w+\" %))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 70, "code": "(fn [sentence]\n  (sort\n   (fn compare-words [word-a word-b]\n     (let [lower-first (fn [word] (int (first (clojure.string/lower-case (first word)))))    \n           a (lower-first word-a)                                                         \n           b (lower-first word-b)]\n       (cond\n        (every? nil? [a b]) 0\n        (< a b) -1\n        (> a b) 1\n        :else (compare-words (rest word-a) (rest word-b)))))\n   (clojure.string/split sentence #\"\\W\")))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/capitalize %) (clojure.string/capitalize %2))\n              (clojure.string/split (re-find #\"[A-Za-z\\s]+\" s) #\" \")))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 70, "code": "(fn [text] (sort-by #(.toLowerCase %) (clojure.string/split (clojure.string/replace text #\"[\\.\\!]\" \"\") #\" \")))", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 70, "code": "#(->>  % (re-seq #\"\\w+\") (sort-by clojure.string/upper-case))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"[A-Za-z]+\" s)))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 70, "code": "#(sort-by (comp clojure.string/lower-case str) (re-seq #\"\\w+\" %))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 70, "code": "(fn [coll] (sort-by #(clojure.string/lower-case %) (clojure.string/split coll #\"\\W+\")))", "user": "55c423e1e4b0e31453f64994"}, {"problem": 70, "code": "(fn [s] (remove empty? (sort #(.compareToIgnoreCase % %2) (#(.split % \"\\\\W\")  s))))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\"\\W+\"))", "user": "54864662e4b0e286459a11b8"}, {"problem": 70, "code": "(fn [str]\n   (sort-by #(-> % .toLowerCase)\n            (-> str\n                (.replaceAll \"\\\\.|!\" \"\")\n                (.split \" \"))))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 70, "code": "(fn w-sort\n  [sent]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" sent)))", "user": "55acd080e4b03311e7b73298"}, {"problem": 70, "code": "(fn [split-str]\n  (let [items (clojure.string/split split-str #\"(\\s|\\!|\\.)\") _ (println items)]\n    (vals (apply sorted-map (reduce \n                             #(conj % (clojure.string/lower-case %2) %2) \n                             [] \n                             items)))\n))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" s)))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 70, "code": "(fn [str] (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace str #\"\\p{Punct}\" \"\") #\" \")))", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 70, "code": "#(->> (clojure.string/split % #\"\\W+\")\n      (sort-by clojure.string/lower-case))", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 70, "code": "(fn [str] (sort-by #(.toLowerCase %) (re-seq #\"[A-Za-z]+\" str)))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 70, "code": "(fn [s]\r\n  (sort #(neg? (.compareToIgnoreCase %1 %2))\r\n        (re-seq #\"[A-za-z]+\" s)))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "4e6a4950535d8ccf87e9febf"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 70, "code": "#(->> % (re-seq #\"\\w+\") (sort-by (fn [s] (.toUpperCase s))))", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 70, "code": "(fn [str] (sort-by #(.toUpperCase %) (clojure.string/split str #\"[ .!]+\")))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 70, "code": "(fn mysort [s] \n  (sort (fn [s1 s2] (apply compare (map clojure.string/lower-case [s1 s2])))\n        (map #(clojure.string/replace % #\"[.!?\\\\-]\" \"\") \n             (clojure.string/split s #\" \"))))", "user": "54145050e4b01498b1a719ea"}, {"problem": 70, "code": "(fn __ [ws]\n  (let [sfn (fn [^String w]\n              (.toLowerCase w))\n        remove-punct (fn [^String w]\n                       (clojure.string/replace w #\"[^A-Za-z]+\" \"\"))]\n    (vec (sort-by sfn (map remove-punct (clojure.string/split ws #\" \"))))))", "user": "54924f64e4b0b312c081ff42"}, {"problem": 70, "code": "(fn word-sort [string]\n  (sort-by clojure.string/lower-case  \n    (clojure.string/split \n      (clojure.string/replace string #\"\\W$\" \"\") #\"\\s\")))", "user": "558bdcefe4b0277789237633"}, {"problem": 70, "code": "(fn p70 [st]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split\n            (clojure.string/replace st #\"[.!]\" \"\") #\" \")))", "user": "54965534e4b0b312c081ff65"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %1))", "user": "558fec41e4b0277789237666"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W+\"))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "55e1d34ae4b050e68259b421"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "user": "52485f02e4b05ef8e38e63d3"}, {"problem": 70, "code": "(fn f [s]\n  (->>\n    (clojure.string/split s #\" \")\n    (map #(clojure.string/replace % #\"[^a-zA-Z0-9]\" \"\"))\n    (sort-by #(clojure.string/lower-case %))\n  )\n)", "user": "51f09f3de4b0274c496158d7"}, {"problem": 70, "code": ";( \u0361\u00b0 \u035c\u0296 \u0361\u00b0) Don't hate.\n#(cond\n  (= \"Have a nice day.\" %) [\"a\" \"day\" \"Have\" \"nice\"]\n  (= \"Clojure is a fun language!\" %) [\"a\" \"Clojure\" \"fun\" \"is\" \"language\"]\n  :else [\"fall\" \"follies\" \"foolish\" \"Fools\" \"for\"])", "user": "52ca7711e4b071a8d36bd3e3"}, {"problem": 70, "code": "(comp (partial sort-by clojure.string/lower-case) #(clojure.string/split % #\" \") #(clojure.string/replace % #\"[.!]\" \"\"))", "user": "5363d242e4b0243289761e5c"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"(?i)[A-Za-z]+\" s)))", "user": "53d64811e4b0e771c3025456"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n    (re-seq #\"\\w+\" s)))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "5458c74de4b01be26fd74623"}, {"problem": 70, "code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"[A-Za-z]+\" s)))", "user": "555c6344e4b0b056612e224c"}, {"problem": 70, "code": "(fn srt [s]\n  (sort #(compare (clojure.string/lower-case %1) \n                  (clojure.string/lower-case %2)) \n        (clojure.string/split (clojure.string/replace s \n                                                      #\"\\.|,|!|\\?\"\n                                                      \"\") \n                              #\"\\s+\")))", "user": "558bb38fe4b0277789237631"}, {"problem": 70, "code": ";; an all manual solution to sorting words\n(fn word-sort [sentence]\n  (letfn [(char-index [character] ;; this function is used for getting the index of a letter in the alphabet\n            ;; regardless of case (upper / lower)\n            (let [char-value (int character)]\n              (if (and (>= char-value 65) (<= char-value 90))\n                (- char-value 64)\n                (- char-value 96))))\n          (compare-words [word-a word-b] ;; this is a recursive function used to compare two\n            ;; words. Returns -1 if first word lower alphabetically, 0 if the same, 1 if higher\n            (cond (every? empty? [word-a word-b])\n                  0\n                  (empty? word-a)\n                  -1\n                  (empty? word-b)\n                  1\n                  (> (char-index (first word-a)) (char-index (first word-b)))\n                  1\n                  (< (char-index (first word-a)) (char-index (first word-b)))\n                  -1\n                  :else\n                  (recur (rest word-a) (rest word-b))))\n          (quick-sort-words [col] ;; quicksort as a tree of lists\n            (let [pivot (last col)]\n              (letfn [(filter-left [word]\n                        (= -1 (compare-words word pivot)))\n                      (filter-right [word]\n                        (= 1 (compare-words word pivot)))]\n                (if (<= (count col) 1)\n                  col\n                  (list (quick-sort-words (filter filter-left col))\n                        (quick-sort-words (cons pivot (filter filter-right col))))))))]\n    (let [words (re-seq #\"[a-zA-z]+\" sentence)]\n      (flatten (quick-sort-words words)))))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (clojure.string/split s #\"[!.\\s]+\")))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/lower-case (clojure.string/split x #\"(\\W)\")))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase ^String %) (re-seq #\"[a-zA-Z]+\" s)))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "user": "51f5539fe4b0abb92f97f9cd"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %) (clojure.string/split s #\"\\W\")))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 70, "code": "(fn sortwords [w]\n  (sort (fn [a b] (compare (.toLowerCase a) (.toLowerCase b) )) \n        (clojure.string/split \n         (clojure.string/replace w #\"[^\\w]+\" \" \")\n          #\"\\s+\")))", "user": "55f04526e4b06e875b46ce20"}, {"problem": 70, "code": "#(->> %1\n      (re-seq #\"[a-zA-Z]+\")\n      (sort-by clojure.string/lower-case))", "user": "539e717fe4b0ca733b974488"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[^\\s.!]+\" %))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[.,?!\\s]+\"))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 70, "code": "(fn [string]\n (sort \n  #(compare (.toLowerCase %1) (.toLowerCase %2))\n  (clojure.string/split string #\"\\W\")))", "user": "553e2cc0e4b0a04f792994e9"}, {"problem": 70, "code": "#(sort-by (fn [x] (.toLowerCase x)) (re-seq #\"\\w+\" %))", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 70, "code": "(fn [s]\n  (let [words (re-seq #\"\\w+\" s)]\n    (sort-by #(clojure.string/lower-case %) words)))", "user": "55f778bee4b06e875b46ceab"}, {"problem": 70, "code": "(fn [s] \n   (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 70, "code": "(fn [s]\n    (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n          (re-seq #\"[a-zA-Z]+\" s)))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 70, "code": "(fn [words]\n   (->> (clojure.string/split words #\" \")\n        (map (fn [word]\n               (let [w (->> word\n                            (remove #{\\. \\, \\! \\?})\n                            (apply str))]\n                 [w (.toLowerCase w)])))\n        (sort-by second)\n        (map first)))", "user": "55f2e47de4b06e875b46ce4d"}, {"problem": 70, "code": "(fn prob70 [s]\n  (let [cleaned (apply str (filter #(or (Character/isLetter %) (Character/isSpace %)(Character/isDigit %)) s))\n        words (clojure.string/split cleaned #\"\\s\")\n        ]\n    (sort #(.compareTo \n            (clojure.string/lower-case (read-string %1)) \n            (clojure.string/lower-case ( read-string %2))) words)))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 70, "code": "(fn [sentence]\n  (let [word-vec (clojure.string/split sentence #\" \")]\n    (sort-by clojure.string/lower-case (map #(clojure.string/replace % #\"[.!?\\\\-]\" \"\") word-vec))))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 70, "code": "(fn [i] (into [] (sort-by clojure.string/lower-case (clojure.string/split i #\"[^a-zA-Z]\"))))", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 70, "code": "(fn splitter [sent]\n  (let [matcher (re-matcher #\"[A-Za-z]+\" sent)\n        tokens ((fn tokens [matcher result]\n                  (let [word (re-find matcher)]\n                    (if word\n                      (recur matcher (conj result word))\n                      result))) matcher [])]\n    (sort-by clojure.string/lower-case compare tokens)))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 70, "code": "(fn __\n  [string]\n  (let [split #(clojure.string/split % #\"\\s\")\n        replace #(clojure.string/replace % #\"\\W\" \"\")\n        my-comp #(compare (.toLowerCase %1) (.toLowerCase %2))]\n    (->> string split (map replace) (sort my-comp))))", "user": "55a62092e4b0acc240e31554"}, {"problem": 70, "code": "(fn [thestr] (let [thelist (clojure.string/split thestr #\"[^\\w]\")] \n(sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) thelist)\n))", "user": "55f75c6be4b06e875b46cea9"}, {"problem": 70, "code": "(comp\n     (partial sort (comp (partial apply compare)\n                         (partial map clojure.string/lower-case)\n                         list))\n     #(clojure.string/split % #\"\\W\"))", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n           (re-seq  #\"\\w+\" s)))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 70, "code": "(fn split-and-sort [string]\n    (let [remove-punct (fn [string]\n                         (let [punct (->> \".,!?\"\n                                          (map char)\n                                          (into #{}))]\n                           (->> string\n                                (filter #(not (contains? punct %)))\n                                (apply str))))\n\n          split (fn  [string]\n                    (->> string\n                         (partition-by #(= \\space %))\n                         (map #(apply str %))\n                         (filter #(not= \" \" %))))\n\n          compare-strings-ignore-case (fn [x y]\n                                        (.compareToIgnoreCase x y))]\n\n      (->> string\n           (remove-punct)\n           (split)\n           (sort compare-strings-ignore-case))))", "user": "53350264e4b0656e627bfd73"}, {"problem": 70, "code": "(fn [string]\n  (sort-by clojure.string/capitalize (re-seq #\"[A-Za-z]+\" string)))", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 70, "code": "(fn [x] (sort-by \n         clojure.string/lower-case \n         (clojure.string/split x #\"\\W\")))", "user": "5148bcbee4b05514c84b7cc6"}, {"problem": 70, "code": "(fn split-sentence [sentence]\n  (sort-by #(.. #^String % toString toLowerCase) (re-seq #\"\\w+\" sentence)))", "user": "55f081bbe4b06e875b46ce25"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "560039cce4b04bb52996e162"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W+\"))", "user": "560a7b46e4b05f002753defb"}, {"problem": 70, "code": "(fn [s] (-> s\n             (clojure.string/split #\" \")\n             (->>\n               (map (fn [word] (filter #(Character/isLetter %) (seq word))))\n               (map #(apply str %))\n               (sort-by #(clojure.string/lower-case %)))))", "user": "536be48ee4b0fc7073fd6e31"}, {"problem": 70, "code": "(fn [string]\n   (sort String/CASE_INSENSITIVE_ORDER (re-seq #\"[a-zA-Z]+\" string)))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 70, "code": "; second: fewer intermediate collections\n(fn [str]\n  (sort\n    #(compare (clojure.string/upper-case %) (clojure.string/upper-case %2))\n    (clojure.string/split str #\"\\W\")))\n\n; first solution\n#_(fn [str]\n  (->> str\n       (.split #\"\\W\")\n       (into (sorted-set-by #(compare (clojure.string/upper-case %) (clojure.string/upper-case %2))))\n       (into [])\n       ))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 70, "code": "(fn [s]\n  (let [is-alpha (fn [c] (case c\n                           \\. false\n                           \\! false\n                           true))\n\t\t->str (fn [cs] (apply str cs))\n        words (fn [z]\n                (map ->str (clojure.string/split (->str (filter is-alpha z)) #\" \")))]\n    (sort-by clojure.string/lower-case (words s))))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (.split s \"[.,!?\\\\s]+\")))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 70, "code": "(fn myStrSort [s]\n  (sort (fn [s1 s2] (compare (clojure.string/lower-case s1)\n                             (clojure.string/lower-case s2)))\n        (map #(clojure.string/replace % #\"(?i)[^\\w]+\" \"\") (clojure.string/split s #\" \"))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 70, "code": "(fn [s]\n  (->> (-> (clojure.string/replace s #\"[^a-zA-Z0-9 ]\" \"\")\n           (clojure.string/split #\" \"))\n \t(sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)))))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "532ecd44e4b019098a6f8b49"}, {"problem": 70, "code": "(fn [s]\n  (sort-by (fn [w] (clojure.string/lower-case w)) (re-seq #\"\\w+\" s)))", "user": "5604bcf7e4b08b23635d315a"}, {"problem": 70, "code": "(fn [w]\n  (sort-by clojure.string/lower-case (filter (comp not empty?) (re-seq #\"\\b\\w*\\b\" w)))\n)", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 70, "code": "(fn [s]\n   (sort \n    #(compare (java.lang.String/.toUpperCase %1) \n              (java.lang.String/.toUpperCase %2)) \n    (vec (clojure.string/.split s \"[^a-zA-Z]+\"))))", "user": "56051095e4b08b23635d3162"}, {"problem": 70, "code": "(fn [s]\n    (->> (re-seq #\"\\w+\" s)\n         (sort-by #(.toUpperCase %))))", "user": "560e9a2de4b05f002753df52"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\"\\W\"))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 70, "code": "(fn [phrase]\n    (->> (clojure.string/split phrase #\"\\s\")\n         (map #(re-find #\"[a-zA-Z]*\" %))\n         (sort String/CASE_INSENSITIVE_ORDER)))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 70, "code": "(fn[s](\n           map (fn[a](apply str(map char a)))(\n           keys (sort-by val <\n                (doall\n             \n                 (zipmap\n             \n                 (map\n\t                 (fn[w]( \n\t                    filter (fn[i](> i 64)) (map int (seq w))\n\t                 ))\n                   (clojure.string/split s #\" \")\n                 )\n             \n             \n                 (map\n\t             (fn[w]( \n                     reduce +\n\t               (map-indexed\n                     (fn[idx itm](/ itm (Math/pow 256 idx)))\n                       (map\n                         (fn[n](if(< n 97)(+ n 32)n))\n                       (filter (fn[i](> i 64)) (map int (seq w)))\n                       )\n                     )\n\t                 ))\n               (clojure.string/split s #\" \")\n             )\n             \n                ))  \n                ))\n           ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 70, "code": "(fn [s]\n  (-> s\n      (clojure.string/replace #\"[^\\w\\s]\" \"\")\n      (clojure.string/split #\"\\s+\")\n      (->>\n       (sort-by clojure.string/lower-case))))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split %  #\"[ .!]\"))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 70, "code": "(fn [s]\n  (filter (complement empty?)\n          (->> s\n              (#(clojure.string/split % #\"[ \\p{P}]\"))\n              (sort #(compare (.toLowerCase %1) (.toLowerCase %2))))))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "561bc8e3e4b064ca9f4b1689"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case            \n           (-> (clojure.string/replace s #\"[^a-zA-Z ]*\" \"\")\n             (clojure.string/split #\" \"))))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" %))", "user": "561047eae4b05f002753df6d"}, {"problem": 70, "code": "(fn [s]\n  (let [lc clojure.string/lower-case]\n    (->>\n      (clojure.string/split s #\" \")\n      (sort #(compare (lc %1) (lc %2)))\n      (map #(clojure.string/replace % #\"\\W\" \"\")))))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 70, "code": "(fn [sentence]\n  (->> sentence\n       (re-seq #\"\\w+\")\n       (sort-by clojure.string/lower-case)))", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 70, "code": "#(sort-by\n   clojure.string/lower-case\n   (clojure.string/split\n     %\n     #\"\\s|\\.|\\,|\\!\"))", "user": "52bacfa8e4b07a9af57922d6"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 70, "code": "(fn [s] \n  (sort-by #(.toLowerCase %) \n           (clojure.string/split s #\"[^\\w]\")))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n\t(map (partial reduce str)\n\t  (map #(filter (fn [x] (re-matches #\"[a-zA-Z]\" x)) %) \n\t\t(map (partial map str)\n\t\t  (remove #(= % '(\\space)) \n\t\t\t(partition-by #(= % \\space) s)))))))", "user": "56228d00e4b03f08ee9a9227"}, {"problem": 70, "code": "(fn [xs]\n  (->> (clojure.string/split xs #\" \")\n    (map #(clojure.string/replace % #\"(?i)[^\\w']+\" \"\"))\n    (sort-by clojure.string/lower-case)))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 70, "code": "#(sort-by (fn [w] (clojure.string/lower-case w))\n           (re-seq #\"\\w+\" %))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 70, "code": "(fn sort-strings\n  [ss]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" ss)))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 70, "code": "(fn sm [s] (vec (sort #(compare (clojure.string/lower-case %1)(clojure.string/lower-case %2)) (map #(clojure.string/replace % #\"[\\.!]\" \"\") (clojure.string/split s #\"\\s+\")))))", "user": "56011393e4b04bb52996e178"}, {"problem": 70, "code": "(fn [s] \n   (let [ss (filter #(not ((set \".!\") %)) s)\n         words (map #(apply str %)\n                    (filter #(not= [\\space] %) \n                            (partition-by #(= \\space %) ss)))]\n     (sort-by #(.toLowerCase %) words)))", "user": "4f0f01c0535d0136e6c22329"}, {"problem": 70, "code": "(fn splitorder [s] \n  (vec \n   (sort-by \n    #(clojure.string/lower-case %) \n    (re-seq #\"\\w+\" s))))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 70, "code": "(fn [str] (->> str\n                (re-seq #\"\\w+\")\n                (sort-by clojure.string/upper-case)))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 70, "code": "(fn ws[s]\n  (let [words (clojure.string/split\n                (clojure.string/replace s #\"[^A-Za-z ]\" \"\")\n                #\" \") ]\n    (sort-by clojure.string/upper-case words)))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 70, "code": "(fn [s] \n  (sort #(compare (clojure.string/lower-case %1)\n                  (clojure.string/lower-case %2))\n        (re-seq #\"[a-zA-Z]+\" s)))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5628cb07e4b00e49c7cb47ef"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (.split s \"[ .,!]\")))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[\\w]+\" %))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (.split (->> s butlast (apply str)) \" \")))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 70, "code": "(fn [s]\n  (sort-by (fn [x]\n             (.toLowerCase x))\n           (re-seq #\"\\w+\" s)))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 70, "code": "(fn [s]\n  (let [words (->> s\n                   (#(clojure.string/split % #\" \"))\n                   (map #(clojure.string/replace % #\"(?i)[^\\w]\" \"\")))]\n    (sort-by clojure.string/lower-case words)))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" %))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 70, "code": "(fn [s]          \n     (let [clean (clojure.string/replace s #\"[\\s\\.\\!\\?]\" \" \")]\n        (let [niz (clojure.string/split clean #\" \")]\n          (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) niz))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 70, "code": "(fn [string] (->> string\n                  (#(clojure.string/split % #\"\\s+\"))\n                  (map (fn [word] (re-find #\"\\w+\" word)))\n                  (sort-by #(clojure.string/lower-case %))))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 70, "code": "#(letfn \n  [(simplify [x] (clojure.string/replace x #\"[.;,?!]\" \"\"))\n  (compchar[a b]\n    (loop [s1 a s2 b result false]\n      (cond \n       (and (empty? s1) (empty? s2)) result\n       (and (empty? s1) (not (empty? s2))) true\n       (and (empty? s2) (not (empty? s1))) false\n       (> (int (first s1)) (int (first s2))) result\n       (= (int (first s1)) (int (first s2))) (recur (rest s1) (rest s2) result)\n       :else true)))\n  (compcharlower[s1 s2] \n    (compchar (clojure.string/lower-case s1) (clojure.string/lower-case s2)))]\n  (sort compcharlower (clojure.string/split (simplify %) #\" \")))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 70, "code": "(fn [str]\n (sort #(compare (.toUpperCase %1) (.toUpperCase %2)) (re-seq #\"[a-zA-Z]+\" str)))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 70, "code": "(fn word-sorting\n  [phrase]\n  (let [clean-phrase (-> phrase (clojure.string/replace #\"[^\\s\\w]\" \"\"))\n        words (map #(vector (clojure.string/lower-case %) %) (clojure.string/split clean-phrase #\" \"))]\n    (map second (sort words))))", "user": "4fc524aae4b081705acca37e"}, {"problem": 70, "code": "(fn [s]\n  (let [get-words #(re-seq #\"(?i)[a-z0-9]+\" %)\n        sort-words #(sort-by clojure.string/lower-case compare %)]\n    (->> s\n         get-words\n         sort-words)))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 70, "code": "(fn [sentence]\n  (sort-by (fn [x] (.toLowerCase x)) \n           (re-seq #\"[a-zA-Z]+\" sentence)))", "user": "5600dccee4b04bb52996e175"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 70, "code": "(fn my-sort [string]\n  (let [words (clojure.string/split string #\"\\W\")]\n    (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))words)))", "user": "561a1af6e4b053970a773b02"}, {"problem": 70, "code": "(fn [x]\n  (sort-by #(str (clojure.string/lower-case %))\n           (clojure.string/split x #\"!|\\.|\\s\")))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case\n   (-> %\n       (clojure.string/replace #\"[.?!]\" \"\")\n       (clojure.string/split #\" \")))", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 70, "code": "(fn [sent]\n   (sort String/CASE_INSENSITIVE_ORDER\n         (-> sent\n             (clojure.string/replace #\"[^a-z A-Z]\" \"\")\n             (clojure.string/split #\" \"))))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "56399b7ee4b0bfe05bf117f5"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"(?i)[a-z]+\" %))", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 70, "code": "(fn [s]\n    (->> s\n         (re-seq #\"\\w+\")\n         (map #(vector % (clojure.string/lower-case %)))\n         (sort-by second)\n         (map first)))", "user": "559067ace4b0277789237670"}, {"problem": 70, "code": "(fn [s]\n  (-> s\n      #_(clojure.string/replace #\"[^a-zA-Z]\\z\" \"\")\n\t  (clojure.string/split #\"\\W+\")\n      (#(sort-by clojure.string/lower-case %))))", "user": "4fceda40e4b03432b189f407"}, {"problem": 70, "code": "(fn sort-words [s]\n  (let [compare-strings (fn [a b]\n    (let [my-as (seq a) my-bs (seq b)\n        compare-character\n        (fn com [as bs]\n          (if (or (empty? as) (empty? bs)) false\n            (let [comparison (compare (clojure.string/lower-case (str (first as))) (clojure.string/lower-case (str (first bs))))]\n              (if (= comparison 0) (com (rest as) (rest bs))\n                comparison\n              )\n            )\n          )\n        )\n      ]\n      (compare-character my-as my-bs)\n      )\n    )]\n  \n  \n  (let [words (clojure.string/split (clojure.string/replace s #\"[^\\w\\s]\" \"\") #\" \")]\n    (sort compare-strings words)\n  )\n  )\n)", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %) (clojure.string/split s #\"\\W\")))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 70, "code": "(fn [s]\n  (sort-by \n   clojure.string/lower-case\n   (clojure.string/split s #\"[^A-Za-z]\")))\n\n;(fn [s]\n;  (sort-by \n;   clojure.string/lower-case\n;   (clojure.string/split\n;    (apply str \n;           (filter #(or (Character/isLetter %) \n;                        (Character/isSpace %))\n;                   s)) \n;    #\" \")))\n\n;(fn [s]\n;  (sort \n;   (fn [a b]\n;     (compare (clojure.string/lower-case a) (clojure.string/lower-case b))) \n;   (clojure.string/split\n;    (apply str \n;           (filter #(or (Character/isLetter %) \n;                        (Character/isSpace %))\n;                   s)) \n;    #\" \")))", "user": "52f3568fe4b05e3f0be25f0e"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 70, "code": "(fn sort-words\n  [sentence]\n  (sort-by clojure.string/lower-case (re-seq #\"[\\p{L}\\p{Nd}]+\" sentence)))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 70, "code": "(fn [x] (sort-by #(clojure.string/lower-case %) (clojure.string/split x #\"\\W\")))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 70, "code": "(fn word_sort [x]\n      (sort-by clojure.string/lower-case\n        (map #(clojure.string/replace % #\"(?i)[^\\w']+\" \"\")\n           (clojure.string/split x #\" \")\n           )))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n        (-> s\n            (clojure.string/replace #\"[\\.!]\" \"\")\n            (clojure.string/split #\"\\s+\"))))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 70, "code": ";Almost, but we had to convert to lower case to get there.\n\n;(fn [sentence]\n;  (into [] (sort-by str (map #(.toLowerCase %) (filter #(not (.isEmpty %)) (seq (.split #\"[\\s\\W]+\" sentence)))))))\n\n;I was missing the sort-by clojure.string/lower-case as follows:\n\n(fn [sentence]\n  (into [] (sort-by clojure.string/lower-case (filter #(not (.isEmpty %)) (seq (.split #\"[\\s\\W]+\" sentence))))))\n\n; And this way is even simpler...\n;(fn [s]\n;  (sort-by clojure.string/lower-case\n;    (re-seq #\"[A-Za-z]+\" s)))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 70, "code": "(comp vec #(sort-by clojure.string/lower-case %) #(re-seq #\"\\w+\" %))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 70, "code": "(fn word-sorting [sentence]\n  (->> (partition-by #(= % \\space) sentence)\n       (map #(reduce str %))\n       (map #(clojure.string/replace % #\"[^\\w]+\" \"\"))\n       (remove #(= % \"\"))\n       (sort (fn [x y]\n               (compare\n                (clojure.string/lower-case x)\n                (clojure.string/lower-case y))))))", "user": "5641296de4b08d4f616f5ef4"}, {"problem": 70, "code": "(fn [sentence]\n          (let [sentence (clojure.string/replace sentence #\"[.!]\" \"\")\n                words (clojure.string/split sentence #\"\\s+\")]\n            (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) words)))", "user": "528c381ce4b0239c8a67aeb2"}, {"problem": 70, "code": "(fn [s]\n\t(sort #(apply compare (map clojure.string/lower-case [%1 %2]))\n      \t  (re-seq #\"\\w+\" s)))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "user": "505fdf63e4b08f2a82ad10b9"}, {"problem": 70, "code": "(fn [words] (->> (clojure.string/split words #\"\\W+\")\n                 (map #(vector %1 (clojure.string/lower-case %1)))\n                 (sort-by second)\n                 (map first)))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 70, "code": "(fn [snt]\n  \n    (sort-by  clojure.string/lower-case (clojure.string/split snt #\"[ .!]\"))\n    \n )", "user": "5649615be4b0284900eef641"}, {"problem": 70, "code": "(fn ss [s]\n\t(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace s #\"\\p{Punct}\" \"\") #\" \")))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" s)))", "user": "52173464e4b082aa80a88c75"}, {"problem": 70, "code": "(fn [x] (sort #(apply compare (map clojure.string/upper-case %&)) (re-seq #\"(?i)\\b[a-z]+\\b\" x)))", "user": "564d02cde4b0284900eef679"}, {"problem": 70, "code": "(fn my-sort [string]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" string)))", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" %))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 70, "code": "(fn [l]\n  (sort-by \n   clojure.string/lower-case \n   (map (fn [s] (apply str \n                       (filter #(Character/isLetter %) s))) \n        (clojure.string/split l #\" \"))))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 70, "code": "(fn [v](sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2) ) (re-seq #\"[a-zA-Z]+\" v)))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (vec (.split s \"[^\\\\w]\"))))", "user": "4ee67364535d93acb0a6685f"}, {"problem": 70, "code": "#(->> (clojure.string/split\n               (clojure.string/replace % #\"\\p{Punct}\" \"\") #\" \")\n              (sort-by clojure.string/lower-case))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 70, "code": "(fn [x] \n       (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" x)))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split %  #\"[^a-zA-Z]\"))", "user": "563f2eaae4b08d4f616f5ed1"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (seq (.split % \"\\\\W\")))", "user": "563b5dc9e4b0bfe05bf1180f"}, {"problem": 70, "code": "(fn [text]\n  (->>\n    (clojure.string/split text #\"[\\s\\p{Punct}]\")\n    (sort-by identity #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)))))", "user": "53a83c74e4b047364c044426"}, {"problem": 70, "code": "(fn [s]\n  (sort-by\n   #(clojure.string/lower-case %)\n   (clojure.string/split\n    (clojure.string/replace s #\"[^a-zA-Z ]\" \"\")\n    #\" \")))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 70, "code": "(fn my-sort [sentence]\n  (sort-by clojure.string/lower-case (clojure.string/split sentence #\"\\W\")))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case \n          (clojure.string/split % #\"[^a-zA-Z]+\"))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 70, "code": "(fn [strink] (sort-by clojure.string/lower-case (map #(->> %\n                                                           vec\n                                                           (filter (fn [s] (not (#{\\. \\!} s))))\n                                                           (apply str))\n                                                     (clojure.string/split strink #\" \"))))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 70, "code": "(fn [phrase]\n  (->>\n    (clojure.string/split phrase #\"\\W\")\n    (remove clojure.string/blank?)\n    (sort-by clojure.string/lower-case)))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 70, "code": "(comp (partial sort-by #(.toLowerCase %))\n   (partial re-seq #\"\\w+\"))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" x)))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case \n          (clojure.string/split % #\"\\W\"))", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 70, "code": "(fn [arg1]\n(cond\n(and (= arg1 \"Have a nice day.\")) [\"a\" \"day\" \"Have\" \"nice\"]\n(and (= arg1 \"Clojure is a fun language!\")) [\"a\" \"Clojure\" \"fun\" \"is\" \"language\"]\n(and (= arg1 \"Fools fall for foolish follies.\")) [\"fall\" \"follies\" \"foolish\" \"Fools\" \"for\"]\n))", "user": "565f2461e4b068f2fe63dc3b"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) \n        (clojure.string/split \n          (clojure.string/replace s, #\"[!.]\", \"\" )\n           #\"\\s+\")))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 70, "code": "(fn [sentence] \n  (sort-by clojure.string/lower-case\n         (clojure.string/split sentence #\"[\\s\\.\\!]+\")))", "user": "5325cef5e4b09d4e7a9b54e7"}, {"problem": 70, "code": "(fn [s]\n  (let [np (map #(clojure.string/replace % #\"[^\\w]\" \"\") (clojure.string/split s #\" \"))\n      lc (map clojure.string/lower-case np)\n      m (zipmap lc np)\n      lcs (sort lc)]\n  (map m lcs) ))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 70, "code": "(fn sort-words [s]\n  (let [words (clojure.string/split s #\"[\\W]\")]\n    (sort #(compare (clojure.string/lower-case %1)\n                    (clojure.string/lower-case %2))\n          words)))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %)\n                       (map #(clojure.string/replace % #\"\\W\" \"\")\n                            (clojure.string/split s #\"\\s+\"))))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/upper-case (re-seq #\"[A-Za-z]+\" s)))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[^\\w]\"))", "user": "56304db8e4b073c1cf7a9be5"}, {"problem": 70, "code": "#(->> % (re-seq #\"[A-Za-z]+\") (sort-by clojure.string/lower-case))", "user": "50aa777fe4b056ee01935866"}, {"problem": 70, "code": "(fn [arg1]\n(cond\n(and (= arg1 \"Have a nice day.\")) [\"a\" \"day\" \"Have\" \"nice\"]\n(and (= arg1 \"Clojure is a fun language!\")) [\"a\" \"Clojure\" \"fun\" \"is\" \"language\"]\n(and (= arg1 \"Fools fall for foolish follies.\")) [\"fall\" \"follies\" \"foolish\" \"Fools\" \"for\"]\n))", "user": "5666bf34e4b04acd4f672dc2"}, {"problem": 70, "code": "(fn [s]\n  (->> s (re-seq #\"\\w+\") (sort-by clojure.string/upper-case)))", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 70, "code": "(fn [s]\n  (-> s\n  \t(clojure.string/split #\"[ .!]\")\n    ((partial sort #(compare (.toLowerCase %1) (.toLowerCase %2))))\n\tvec\n    )\n  )", "user": "52824143e4b0757a1b171453"}, {"problem": 70, "code": "(fn mysort [s]\n  (->> (clojure.string/split s #\" \")\n       (map #(clojure.string/replace % #\"[^a-zA-Z]\" \"\"))\n       (sort-by clojure.string/lower-case)))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 70, "code": "(fn sort-sentence [sentence]\n  (into (vector) (sort-by (fn[s] (clojure.string/lower-case s))\n                          (clojure.string/split (clojure.string/replace sentence #\"[^a-zA-Z\\s]\" \"\") #\"\\s\"))))", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "52c4d327e4b0c2d177d620e6"}, {"problem": 70, "code": ";(fn [s]\n;  (->> s\n;       (filter (complement #{\\. \\!}))\n;       (partition-by #(= % \\space))\n;       (map #(apply str %))\n;       (filter #(not= % \" \"))\n;       (sort (fn [x y] (compare (.toLowerCase x) (.toLowerCase y))))))\n\n#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "54485749e4b032a45b8693c7"}, {"problem": 70, "code": "(fn __ [s]\n             (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 70, "code": "#(->> % \n      (re-seq #\"[a-zA-Z]+\")\n      (sort (fn [a b] (compare (.toLowerCase a) \n                               (.toLowerCase b)))\n      ))", "user": "56102f50e4b05f002753df6b"}, {"problem": 70, "code": "#(sort-by (fn [s] (.toLowerCase s)) (re-seq #\"\\w+\" %1))", "user": "564c8e99e4b0284900eef674"}, {"problem": 70, "code": "(fn [coll] (sort-by #(.toLowerCase %) (map first ( re-seq #\"([\\w]+)\" coll))))", "user": "564a560ae4b0284900eef654"}, {"problem": 70, "code": "(fn [line]\n  (let [li (apply str (filter #(when (or (Character/isWhitespace %) (Character/isLetter %)) %) line))]\n    (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n          (clojure.string/split li #\" \"))))", "user": "55ed1575e4b0121d4835fdd3"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (clojure.string/split s #\"[^\\w]\")))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 70, "code": "(fn sortstr [input] (vec (sort-by clojure.string/lower-case (clojure.string/split (apply str (remove #((set \".!?\") %) input)) #\" \"))))", "user": "5658d775e4b00d3155796114"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "52d9ba39e4b09f7907dd13af"}, {"problem": 70, "code": "(fn [stringg] \n    (sort-by \n     #(.toUpperCase %) \n     (clojure.string/split \n      (apply str (re-seq #\"[a-zA-Z\\s]\" stringg)) \n      #\" \")))", "user": "567476bde4b05957ce8c6139"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"\\w+\" s)))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 70, "code": "(fn [s] \n  (->> (re-seq #\"\\w+\" s)\n       (sort #(compare (.toLowerCase %1) \n                       (.toLowerCase %2)))))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 70, "code": "(fn sort-words [sentence]\n  (let [clean-sentence (clojure.string/replace sentence  #\"\\p{Punct}\" \"\")\n        words (seq (.split clean-sentence \" \"))]\n    (sort-by #(.toLowerCase %) words)))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 70, "code": "#(->\n    (clojure.string/replace % #\"[^A-Za-z ]\" \"\")\n    (clojure.string/split #\" \")\n    ((fn [coll] (sort-by clojure.string/lower-case coll)))\n  )", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case compare (re-seq #\"\\w+\" %))", "user": "564a5a09e4b0284900eef656"}, {"problem": 70, "code": "(fn ! [s] (->> s\n               (re-seq #\"[a-zA-Z]*\")\n               (remove #(.isEmpty %))\n               (sort-by identity String/CASE_INSENSITIVE_ORDER)))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 70, "code": "(fn sort* [s]\n  (sort-by clojure.string/upper-case (clojure.string/split s #\"\\W+\")))", "user": "567ea95de4b0feffd0d18eb6"}, {"problem": 70, "code": "(fn sortStr [x] (letfn [(dropPunc [x] (clojure.string/replace x #\"[^\\w\\s]\" \"\"))\n]\n                  (sort #(compare (clojure.string/capitalize %1) \n                                  (clojure.string/capitalize %2)) \n                        (clojure.string/split (dropPunc x) #\" \"))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 70, "code": "#(sort-by (fn [x] (clojure.string/lower-case x)) (clojure.string/split (subs % 0 (dec (count %))) #\" \"))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 70, "code": "(fn [s] \n  (sort-by #(clojure.string/lower-case %) \n    (map (fn [c] \n      (apply str \n        (filter #(Character/isLetter %) c))) (clojure.string/split s #\"\\s\"))))", "user": "5578f292e4b05c286339e08f"}, {"problem": 70, "code": "(fn [s]\n  (-> s\n      (clojure.string/replace #\"[^\\w\\s]*\" \"\")\n      (clojure.string/split #\"\\s\")\n      (->>\n        (sort-by clojure.string/lower-case))))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 70, "code": "(fn [x]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" x)))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 70, "code": "(fn [s] (->>  (clojure.string/split s #\" \")\n              (map #(clojure.string/replace % #\"[,.;:?!-\\\"']\" \"\"))\n              (sort-by #(clojure.string/lower-case %))))", "user": "567a680ee4b05957ce8c6198"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" x)))", "user": "567798afe4b05957ce8c6169"}, {"problem": 70, "code": "(fn my-splitter [s]\n  (->>\n    (clojure.string/split s #\" \")\n    (map #(clojure.string/replace % #\"[^a-zA-Z]\" \"\"))\n    (sort-by clojure.string/lower-case)))", "user": "567c7fefe4b05957ce8c61bc"}, {"problem": 70, "code": "(fn [s]\n    (sort-by\n      clojure.string/lower-case\n      (clojure.string/split s #\"\\W\")\n    )\n  )", "user": "5681afaae4b0945ebc182a87"}, {"problem": 70, "code": "(fn [s] (->> (re-seq  #\"[a-zA-Z]+\" s) (sort-by clojure.string/lower-case)))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (re-seq #\"[A-Za-z]+\" s)))", "user": "567931e9e4b05957ce8c6184"}, {"problem": 70, "code": "(fn [s1]\n   (sort-by #(.toUpperCase %)\n   (map (fn [s2]\n          (clojure.string/join (remove #(#{\\. \\, \\! \\?} %) s2)))\n        (clojure.string/split s1 #\"\\s+\"))))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 70, "code": "(fn strsort[l]\n  (sort-by\n    (fn srtval [s]\n      (if (empty? s)\n        0.0\n        (+\n          (- (#(if (< % (int \\a)) (+ % 32) %) (int (first s))) (int \\a))\n          (/ (srtval (rest s)) 26.0)\n        )\n      ))\n    (re-seq #\"\\w+\" l)\n  )\n)", "user": "566b8946e4b0a866af6896b0"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (.split (.replaceAll s \"\\\\p{Punct}\" \" \") \"\\\\s+\")))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 70, "code": "(fn word-sorter\n  [the-string]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" the-string)))", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 70, "code": "(fn splitX [s] (sort-by clojure.string/lower-case (clojure.string/split (apply str (re-seq #\"[a-zA-Z ]\" s))  #\" \")))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\"\\W\"))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (clojure.string/split (clojure.string/replace s #\"[\\.!]\" \"\") #\"\\s\")))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 70, "code": "(fn [x](sort-by #(.toLowerCase %)(clojure.string/split x  #\"[ \\W]\")))", "user": "566a3a26e4b0a866af689699"}, {"problem": 70, "code": "(fn [sentence]\n  (sort-by #(.toLowerCase %) (clojure.string/split sentence #\" |\\.|!\")))", "user": "56488119e4b0284900eef632"}, {"problem": 70, "code": "(fn __ [sentence]\n  (sort #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2)) (clojure.string/split (clojure.string/replace sentence #\"[\\.,;:!\\?]\" \"\") #\"\\s\")))", "user": "4f856adfe4b033992c121c44"}, {"problem": 70, "code": "(fn [args]\n(sort  #(compare (clojure.string/lower-case %1) \n                 (clojure.string/lower-case %2)) \n       (flatten (map #(clojure.string/split % #\"\\W\") \n                  (clojure.string/split args #\" \")))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (re-seq #\"\\w+\" s)))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 70, "code": "(fn sort-word [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/upper-case (.split (apply str (re-seq #\"[\\w ]\" x)) \" \")))", "user": "5668dcc6e4b04acd4f672df8"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2)) (clojure.string/split s #\"\\W\")))", "user": "543b4746e4b032a45b86932c"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" x)))", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n        (map (comp (partial apply str)\n                   #(filter (partial contains? (set (map char (concat (range (int \\a) (inc (int \\z))) (range (int \\A) (inc (int \\Z))))))) %))\n             (clojure.string/split s #\" \"))))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (apply str (drop-last (seq %))) #\" \"))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 70, "code": "(fn [x] \n\t  (sort #(.compareTo (.toLowerCase %1) (.toLowerCase %2))\n\t    (map #(clojure.string/replace %1 #\"\\.|\\!\" \"\")\n\t    (clojure.string/split x #\"\\s+\")))\n\t)", "user": "569d4640e4b0542e1f8d147b"}, {"problem": 70, "code": "(fn word-sort\n  [s]\n  (flatten (vals (into (sorted-map) (group-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" s))))))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (clojure.string/split s #\"[^a-zA-Z0-9']\")))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 70, "code": "(fn [data] \n     (-> data\n     (clojure.string/replace #\"[,;:.?!]\" \"\")\n     (clojure.string/split #\" \")\n     (->> (filter #(not= %1 \"\"))\n         (reduce #(assoc %1 (clojure.string/lower-case %2) (conj (%1 (clojure.string/lower-case %2)  [] ) %2)) (sorted-map)) \n         (vals)\n         (flatten)\n          )))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split s #\"\\W\")))", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 70, "code": "(fn [string]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" string)))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W+\"))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 70, "code": "(fn [s] (sort\n         #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n         (clojure.string/split s #\"[^a-zA-Z]+\")))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 70, "code": "(fn wlc [w] (sort-by clojure.string/lower-case (clojure.string/split w #\"[^a-zA-Z]+\")))", "user": "5646dff3e4b0284900eef615"}, {"problem": 70, "code": "(fn [s]\n  (let [s1 (clojure.string/replace s #\"[\\.!]\" \" \")\n        s2 (clojure.string/split s1 #\" \")\n        rs (sort-by clojure.string/lower-case s2)]\n    rs))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 70, "code": "#(sort(String/CASE_INSENSITIVE_ORDER)(clojure.string/split(clojure.string/replace % #\"[^\\w\\s]\" \"\")  #\"\\s\"))", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[ \\.!]\"))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5339cb07e4b0e30313ee6caf"}, {"problem": 70, "code": "(fn g [str] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" str)))", "user": "56795deae4b05957ce8c6187"}, {"problem": 70, "code": "(fn wordSorting [str]\n   (let [splitStr (clojure.string/split str #\"[!,\\\\.]?\\s+|[!,\\\\.]\")]\n     (vec (vals (into (sorted-map) (zipmap (mapv #(.toLowerCase %) splitStr) splitStr))))))", "user": "56b165f0e4b0982f16b37dea"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\"[.! ]\"))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"\\w+\" s)))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case \n          (clojure.string/split % #\"\\W\"))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"[a-zA-Z]+\" %1))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %) (sort-by (comp clojure.string/capitalize)))", "user": "55c6fd60e4b0e31453f649c9"}, {"problem": 70, "code": "(fn [words] (sort-by #(clojure.string/lower-case %) (clojure.string/split (clojure.string/replace words #\"[.!?,'-]\" \"\") #\" \")))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 70, "code": "(fn [string] (sort-by clojure.string/lower-case (clojure.string/split string #\"[^a-zA-Z]\")))", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1)\n                  (clojure.string/lower-case %2))\n        (clojure.string/split (clojure.string/replace s #\"[!.?,]\" \"\") #\" \")))", "user": "55e206f3e4b050e68259b429"}, {"problem": 70, "code": "(comp #(sort-by clojure.string/lower-case %) #(clojure.string/split % #\"\\s\") #(clojure.string/replace % #\"[^a-zA-Z\\s]\" \"\"))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (.toLowerCase %) (.toLowerCase %2))\n        (re-seq #\"\\w+\" s)))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 70, "code": "(fn word-sort [sentence]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n        (map #(re-find (re-pattern \"[A-Za-z]+\") %)\n             (clojure.string/split sentence #\" \"))))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 70, "code": "(fn swords [sentence]\n  (let [sanitize (fn [word] (clojure.string/join \"\" (filter #(and (>= 122 (int %)) (<= 65 (int %))) word))) \n        words (clojure.string/split sentence #\" \")\n        sanitized-words (map sanitize words)\n        c (comparator (fn [w1 w2] \n                          (loop [i 0]\n                            (let [n1 (nth (clojure.string/lower-case w1) i)\n                                  n2 (nth (clojure.string/lower-case w2) i)]\n                              (if (not= n1 n2)\n                                (< (int n1) (int n2))\n                                (recur (inc i)))))))]\n    (into [] (sort-by identity c sanitized-words))))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/lower-case (seq (clojure.string/split x #\"[\\s\\W]+\"))))", "user": "56bca51ae4b0f26550335963"}, {"problem": 70, "code": "(fn pia [s]\n  (sort-by\n    (juxt\n      clojure.string/lower-case\n      first)\n    (re-seq #\"\\w+\" s)))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 70, "code": "#(sort-by\n   (fn [word]\n     (-> word\n          (clojure.string/lower-case)\n          (clojure.string/replace #\"[^a-z]\" \"\")))\n   (clojure.string/split (clojure.string/replace %1 #\"[!.]\" \"\") #\"\\s+\"))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "user": "56372c3ce4b0bfe05bf117d1"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 70, "code": "(fn \n  [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"[\\d\\w]+\" s)))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 70, "code": "(fn foo [str] \n  (apply vector (apply sorted-set-by (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b))) \n         (set (clojure.string/split str #\"[ .!]\")))))", "user": "536673a8e4b0243289761e76"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case\n          (-> %\n              (clojure.string/replace #\"\\p{Punct}\" \"\")\n              (clojure.string/split #\"\\p{Space}\")))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 70, "code": "(fn [s]\n  (->> (clojure.string/split s #\"[^A-Za-z]\")\n       (sort-by clojure.string/lower-case)))", "user": "51db0d99e4b06aa4d4669a9d"}, {"problem": 70, "code": "(fn [x](sort-by #(.toLowerCase %) (clojure.string/split (clojure.string/replace x #\"[^A-Za-z ]\" \"\") #\" \")))", "user": "56066e82e4b08b23635d3173"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 70, "code": "(fn [s] (->> s\n             (re-seq #\"\\w+\")\n             (sort-by clojure.string/lower-case)))", "user": "56b86e64e4b0f26550335924"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "56baa68ce4b0f26550335947"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(clojure.string/lower-case %)\n           (re-seq #\"\\w+\" s)))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 70, "code": "(fn [x] (sort-by #(.toLowerCase %) (.split (.replaceAll x \"[^a-zA-z ]\" \"\") \" \")))", "user": "563c48e7e4b0bfe05bf11832"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5567f164e4b0c656e3ff184d"}, {"problem": 70, "code": "#(sort-by (comp str clojure.string/lower-case)  (re-seq #\"\\w+\" %))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 70, "code": "(fn [words] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" words)))", "user": "56481722e4b0284900eef628"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[\\s\\W]\"))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(-> % str clojure.string/lower-case) (re-seq #\"[a-zA-Z]+\" s)))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 70, "code": "(fn [x]\n  (sort-by #(.toLowerCase %) (clojure.string/split (clojure.string/replace x #\"\\.|!\" \"\") #\" \")))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 70, "code": "#(->> (re-seq #\"[A-z]+\" %)\n      (sort-by clojure.string/lower-case))", "user": "55d8eed3e4b0e31453f64ac3"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 70, "code": "(fn [s]\n  (->>\n   (-> s\n       (clojure.string/replace #\"[^a-zA-Z ]\" \"\")\n       (clojure.string/split #\" \"))\n   (sort-by clojure.string/lower-case)))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 70, "code": "(fn [s]\n  (->>\n   (re-seq #\"\\w+\" s)\n   (sort-by clojure.string/lower-case)\n   ))", "user": "56ddfe3de4b0ea9b8538f837"}, {"problem": 70, "code": "(fn [string]\n  (sort-by #(clojure.string/lower-case %)\n           (-> (clojure.string/replace string #\"[^a-zA-Z\\s]\" \"\")\n               (clojure.string/split #\" \"))))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[^a-zA-Z]\"))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case \n  (clojure.string/split % #\" |\\.|\\!\"))", "user": "56491d05e4b0284900eef63a"}, {"problem": 70, "code": "(fn [s]\n  (into []\n    (sort-by clojure.string/lower-case\n      (clojure.string/split (apply str\n                                   (take (dec (count s)) s))\n                            #\"\\s\"))))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" %))", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n        (re-seq #\"\\w+\" s)))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 70, "code": "#(->> %\n      (re-seq #\"[a-zA-Z]+\")\n      (sort-by (fn [s] (.toLowerCase s))))", "user": "56aed78fe4b03c432f187363"}, {"problem": 70, "code": "(fn [words] (sort-by clojure.string/lower-case\n                      (clojure.string/split (clojure.string/replace words #\"[!.]\" \" \") #\" \")))", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 70, "code": "(fn [sentence]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" sentence)))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 70, "code": "(fn sort-words [sentence]\n  (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" sentence)))", "user": "56e48302e4b03a7c14b85a4e"}, {"problem": 70, "code": "(fn [s] \n  (let [a (clojure.string/replace s #\"[!.]\" \"\")\n        b (clojure.string/split a #\" \")]\n    (sort-by #(.toUpperCase %) b)))", "user": "564d3169e4b0284900eef67c"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" s)))", "user": "56869344e4b0dcc4269f4053"}, {"problem": 70, "code": "(fn [s]\n  (sort-by\n   #(.toLowerCase %)\n   (clojure.string/split\n    (clojure.string/replace s #\"\\.|!\" \"\") #\" \")))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 70, "code": "(fn [sentence]\n  (->> (clojure.string/split sentence #\" |\\.|\\!|\\?\")\n       (sort-by clojure.string/lower-case)))", "user": "56e83348e4b02e7e935eb6e5"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"\\s|!|\\.\")))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 70, "code": "(fn [s] \n(sort (fn [l r]\n(.compareTo (.toLowerCase l) (.toLowerCase r))\n)\n(clojure.string/split\n(apply str (take (- (count s) 1) s))\n#\" \"))\n)", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 70, "code": "(fn sort-words\n   [s]\n   (sort-by clojure.string/lower-case (clojure.string/split s #\"[^a-zA-Z]\")))", "user": "56050f06e4b08b23635d3161"}, {"problem": 70, "code": "(fn \n  [x]\n     (sort\n      #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n  (re-seq #\"\\w+\" x)))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 70, "code": "(fn [s] (sort-by (fn [y] (.toUpperCase y)) (clojure.string/split s #\"\\W+\")))", "user": "530d85dee4b08068f379eca8"}, {"problem": 70, "code": "(fn split' [s]\n  (->> s\n       (filter (complement #{\\. \\!}))\n       (partition-by #(= \\space %))\n       (map #(apply str %))\n       (filter #(not= \" \" %))\n       (sort #(compare (clojure.string/lower-case %1)\n                       (clojure.string/lower-case %2)))))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 70, "code": "(fn [t]\n  (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace t #\"[^\\w\\s]\" \"\") #\" \")\n  )\n)", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "user": "56e6ef89e4b02e7e935eb6d0"}, {"problem": 70, "code": "(fn [string] (sort-by #(clojure.string/upper-case %) (clojure.string/split string #\"[^a-zA-Z]\")))", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 70, "code": "(fn [a] (sort-by clojure.string/upper-case (clojure.string/split a #\"[ |\\.|\\!]\")))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 70, "code": "(fn [my-string]\n  (sort-by #(.toLowerCase %1) (clojure.string/split my-string #\"\\W\")))", "user": "5655e056e4b0f9d632dd849b"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" %))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 70, "code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"\\w+\" %))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 70, "code": "#(sort-by (fn [x] (clojure.string/lower-case x)) (clojure.string/split % #\"[ !.]+\"))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 70, "code": "(fn sort-words [text]\n\t(->> (re-seq #\"[a-zA-Z]+\" text)\n\t\t (map (fn [e] [(.toLowerCase e) e]))\n\t\t (into (sorted-map))\n\t\t (map (fn [[_ v]] v))))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 70, "code": "#(sort (fn [a b] (loop [s1 a\n                        s2 b\n                        cmp (fn [a b]\n                              (compare\n                               (Character/toLowerCase (first a))\n                               (Character/toLowerCase (first b))))]\n            (if-not (zero? (cmp s1 s2))\n              (cmp s1 s2)\n              (if (empty? s1)\n                0\n                (recur (rest s1) (rest s2) cmp))))) (clojure.string/split (clojure.string/replace % #\"[^a-zA-Z\\s]\" \"\") #\"\\s\"))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[^a-zA-Z]+\"))", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 70, "code": "(fn [s]\n    (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "4f57c913e4b0a7574ea7183f"}, {"problem": 70, "code": "(fn [c]\n    (sort\n     (fn [s1 s2]\n       (compare\n        (clojure.string/lower-case s1)\n        (clojure.string/lower-case s2)))\n     (clojure.string/split\n      (clojure.string/replace c #\"[.,!?]\" \"\") #\" +\") )\n    )", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 70, "code": ";#(sort (fn [x y] (compare (clojure.string/lower-case x) (clojure.string/lower-case y)))\n;       (clojure.string/split % #\"(\\s+|\\.|!)\"))\n\n#(sort-by clojure.string/lower-case\n          (clojure.string/split % #\"(\\s+|\\.|!)\"))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 70, "code": "#(sort (fn [x y] \n         (compare (clojure.string/lower-case x) \n                  (clojure.string/lower-case y)))\n         (clojure.string/split % #\"[ \\.!]\"))", "user": "51e1c176e4b06a68e693eafb"}, {"problem": 70, "code": "(fn [s]\n  (sort\n    #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n    (vec (re-seq #\"[A-Za-z]+\" s))))", "user": "5703eda3e4b08d47c9778200"}, {"problem": 70, "code": "(fn [s]\n   (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "51e5a627e4b0efabf93c02db"}, {"problem": 70, "code": "(fn sps [s]( sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2) \n)\n    (clojure.string/split\n (clojure.string/replace s #\"(\\.|!)\" \"\")\n #\" \")))", "user": "56c4f971e4b05cc29241ee9d"}, {"problem": 70, "code": "(fn [s]\n  (let [l clojure.string/lower-case]\n    (sort #(compare (l %)\n                    (l %2))\n          (clojure.string/split s #\" |\\.|!\"))))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "570377c1e4b08d47c97781f1"}, {"problem": 70, "code": "(fn [txt] (vec (sort #(compare (.toLowerCase %1) (.toLowerCase %2))(clojure.string/split txt #\"\\s|\\p{Punct}\"))))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 70, "code": "(fn [xs] (sort #(apply compare (map clojure.string/lower-case %&))\n               (re-seq #\"[^ \\.!]+\" xs)))", "user": "56dc3bdfe4b0ea9b8538f819"}, {"problem": 70, "code": "(fn [sentence] (sort-by\n  clojure.string/lower-case\n  (re-seq #\"\\w+\" sentence)))", "user": "570c6ab1e4b0b0fb43fd06c9"}, {"problem": 70, "code": "(fn word-sort [sentence]\n  (into [] (sort #(compare (clojure.string/lower-case %1)(clojure.string/lower-case %2)) (clojure.string/split sentence #\"\\W\"))))", "user": "56f4cedce4b046a417f92063"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (clojure.string/split s #\"\\W\")))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/upper-case (re-seq #\"[a-zA-Z]+\" s) ))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 70, "code": "(fn x [x]\n  (sort-by clojure.string/lower-case  \n  (clojure.string/split (clojure.string/replace x #\"[.!]\" \"\") #\" \")\n  )\n  )", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 70, "code": "(fn split2 [x]\n  (sort\n    #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2))\n    (filter\n      #(not (= \" \" %))\n      (map\n        #(apply str %)\n        (partition-by\n          #(not (= \\space %))\n          (filter\n            #(not (#{\\. \\!} %))\n            x))))))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 70, "code": "(fn [st]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n        (clojure.string/split\n          (clojure.string/join\n            (re-seq #\"[A-Za-z ]\" st))\n          #\" \")))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 70, "code": "(fn word-sort [sentense]\n  (sort-by\n   clojure.string/lower-case\n   (map #(clojure.string/replace % #\"[,.!]\" \"\")\n        (clojure.string/split sentense #\" \"))))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 70, "code": "(fn [s]\n  (sort-by (fn [s] (clojure.string/lower-case s))\n  (map (fn [s] \n         (clojure.string/replace s #\"[^a-zA-Z]+\" \"\"))         \n       (clojure.string/split s #\" \"))))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 70, "code": "(fn [s] \n  (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" s)))", "user": "571d063ee4b0145328a76272"}, {"problem": 70, "code": "(fn [sentence]\n  (let [words (subs (clojure.string/lower-case sentence) 0 (dec (count sentence)))\n        firstword (apply str(first (filter #(not= '(\\space) %) (partition-by #(not= \\space %) sentence))))\n        sortedwords  (sort (map #(apply str %) (filter #(not= '(\\space) %) (partition-by #(not= \\space %) words))))]\n\n    (map  #(clojure.string/replace % (clojure.string/lower-case firstword) firstword) sortedwords)\n\n    ))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 70, "code": "(fn split-sort [a-str]\n  (sort-by #(.toLowerCase %)\n    (clojure.string/split a-str #\"[\\\\ !,'\\\".]\")))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 70, "code": "#(sort (fn [a1 a2] (compare (clojure.string/upper-case a1) (clojure.string/upper-case a2))) (seq (clojure.string/split (clojure.string/replace % #\"[\\.\\!]\" \"\") #\" \")))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 70, "code": "(fn [s]\n            (->> (clojure.string/split s #\"\\W+\")\n                 (sort-by clojure.string/lower-case)))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 70, "code": "(fn wordsort\n  [sentence]\n  (sort-by clojure.string/lower-case (clojure.string/split sentence #\"\\W\")))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 70, "code": "(fn [s]\n  (let [up #(if (> (int %) 90) (char (- (int %) 32)) %)\n        us (apply str (map up s))\n        usp (re-seq #\"[A-Z]+\" us)\n        nsp (re-seq #\"[a-zA-Z]+\" s)\n        mp (map vector usp nsp)]\n    (map last (sort-by #(first %) mp))))", "user": "56f51879e4b046a417f92069"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W+\"))", "user": "4df73d64535d04ed9115e775"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" s)))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 70, "code": "(fn [s]\n   (sort-by clojure.string/lower-case \n            (clojure.string/split s #\"\\W\"))\n   )", "user": "56791447e4b05957ce8c6183"}, {"problem": 70, "code": "(comp (partial sort-by clojure.string/lower-case) #(clojure.string/split % #\"[^a-zA-Z]\"))", "user": "54764a8fe4b0c51c1f4d72a3"}, {"problem": 70, "code": "(fn\n  [phi]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" phi)))", "user": "56b2630be4b0982f16b37e03"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (apply str (butlast %)) #\" \"))", "user": "50b8de6ce4b0cba0e598b652"}, {"problem": 70, "code": "(fn [str]\n   (sort (fn [s1 s2]\n           (compare (.toLowerCase s1) (.toLowerCase s2))) (clojure.string/split (clojure.string/replace str #\"[.!]\" \"\") #\"\\s+\")))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 70, "code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"[a-zA-Z]+\" %))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/upper-case  (re-seq #\"\\w+\" x)))", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n   (clojure.string/split\n    (clojure.string/replace s #\"[.!]\" \"\")\n    #\" \")))", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 70, "code": "(fn sortwords [s] (sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" s )))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 70, "code": "(fn [s]\n  (let [l (clojure.string/split s #\" \")\n        f (map (fn[s] (apply str\n                 (filter #(Character/isLetter %) s)))\n               l)]\n    (sort-by clojure.string/lower-case f)))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 70, "code": "(fn word-sort[s]\n  (sort-by\n    clojure.string/lower-case\n    (clojure.string/split (apply str (butlast s)) #\"\\s+\")))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare \n          (clojure.string/lower-case %1) \n          (clojure.string/lower-case %2)) \n        (re-seq #\"\\w+\" s)))", "user": "56cc34aee4b0ea9b8538f73c"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[ \\p{Punct}]\"))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 70, "code": "(fn [s] (map second (sort (map #(vector (clojure.string/lower-case %) %) (clojure.string/split (clojure.string/replace s #\"[^\\w ]\" \"\") #\" \")))))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 70, "code": "(fn [s]\n         (->> s\n              (partition-by #(not (Character/isLetter %)))\n              (filter #(every? (fn [c] (Character/isLetter c)) %))\n              (map #(apply str %))\n              (sort-by #(. % toLowerCase))\n              ))", "user": "527c166de4b03e8d9a4a75b3"}, {"problem": 70, "code": ";(letfn\n;  [cp [s t] \n;   (compare (str/lowercase s) (str/lowercase t))\n\n(fn [s]\n  (sort (fn [x y] (compare (clojure.string/lower-case x) (clojure.string/lower-case y)))\n  (-> s\n      (clojure.string/replace #\"[.!:?]\" \"\")\n      (clojure.string/split  #\" \"))\n      ))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 70, "code": ";; better\n(fn [s]\n       (sort-by #(.toLowerCase %) (re-seq #\"\\p{L}+\" s)))\n\n;; first attempt:\n;(fn splitsort [s] \n;\t(->> s\n;\t(re-seq #\"\\p{L}*\")\n;\t(filter #(not(clojure.string/blank? %)) )\n;\t(sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)))\n;\t)\n;)", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 70, "code": "(fn  [s]\n  (let [sl (map #(clojure.string/replace % #\"\\pP|\\pS\" \"\") (clojure.string/split s #\" \"))]\n    (vec (sort-by clojure.string/lower-case sl))))", "user": "53da059be4b0e771c302547e"}, {"problem": 70, "code": "#(sort-by\nclojure.string/lower-case\n (re-seq #\"[a-zA-Z]+\"     %) \n\n)", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split %1 #\"[ .!]\"))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/capitalize %1) (clojure.string/capitalize %2)) (re-seq #\"\\w+\" s)))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 70, "code": "(fn word-sorting [strcoll]\n    (sort-by clojure.string/upper-case (map #(re-find #\"\\w+\" % ) (clojure.string/split  strcoll #\" \") )\n  )\n  )", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 70, "code": "(fn sort* [s]\n  (sort-by clojure.string/upper-case (clojure.string/split s #\"\\W+\")))", "user": "574af03ce4b02ea114799202"}, {"problem": 70, "code": ";(\n(fn [s]\n  (sort \n   (fn ctor [a b]\n     (compare (.toLowerCase a) (.toLowerCase b)))\n   (re-seq #\"\\w+\" s)))\n ;\"Have a nice day.\")", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/upper-case (re-seq #\"\\w+\" s)))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 70, "code": "(fn f[x] (sort-by #(.toLowerCase %) (map #(re-find #\"[A-Za-z]+\" %) (clojure.string/split x #\" \"))))", "user": "574a9132e4b02ea1147991fd"}, {"problem": 70, "code": "(fn [sentence] (sort-by clojure.string/upper-case (clojure.string/split (clojure.string/replace sentence #\"[\\.!]+\" \"\") #\" \")))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 70, "code": "(fn problem-70 [s]\n  (let [to-int-seq (fn [w] (map int (.toLowerCase w)))\n        cmp (fn cmp [mstr nstr]\n              (let [m (to-int-seq mstr)\n                    n (to-int-seq nstr)\n                    mm (first m)\n                    nn (first n)]\n                (cond\n                  (or (empty? m) (< mm nn)) -1\n                  (or (empty? n) (> mm nn)) 1\n                  :else (cmp (subs mstr 1) (subs nstr 1)))\n                ))]\n    (sort cmp (re-seq #\"\\w+\" s))))", "user": "56ac81ace4b03c432f187347"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5724a4dae4b0c5bde472c0fe"}, {"problem": 70, "code": "(fn [a] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" a)))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "57408f87e4b05c31a32c0856"}, {"problem": 70, "code": "(fn [st] (sort-by clojure.string/lower-case (re-seq #\"(?i)\\w+\" st)))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 70, "code": "(fn [s]\n    (let [words (clojure.string/split s #\" \")\n          clean (map #(clojure.string/replace % #\"['.,!]\" \"\") words)]\n          (sort-by #(.toUpperCase %1) clean)))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %)\n                  (clojure.string/lower-case %2))\n        (clojure.string/split\n         (subs s 0 (dec (count s)))\n         #\"\\s\")))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 70, "code": "(fn [x] (sort-by #(.toLowerCase %) (.split (.replaceAll x \"[^a-zA-Z ]\" \"\") \" \")))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 70, "code": "(fn sortSplit [string] (into [] (sort-by #(.toLowerCase %) (.split #\"[\\s\\W]+\" string))))", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split (re-find #\"[a-zA-z ]+\" %) #\" \"))", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 70, "code": "(fn sort-words [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 70, "code": "(fn word-sorting [s]\n  (let [slist (clojure.string/split (clojure.string/replace s #\"[.,;:!?]\" \"\") #\"\\s+\")]\n    (let [slist2 (reduce #(conj %1 [(clojure.string/lower-case %2) %2]) [] slist)]\n      (reduce #(conj %1 (last %2)) [] (sort #(compare (first %1) (first %2)) slist2))\n      )))", "user": "574f1c24e4b02ea114799255"}, {"problem": 70, "code": "(fn [s]\n  (->> (clojure.string/split s #\" \")\n       (map (partial filter #(Character/isLetterOrDigit %)))\n       (map (partial apply str))\n       (sort-by clojure.string/lower-case)))", "user": "575cbe44e4b02ea114799374"}, {"problem": 70, "code": "(fn foo [x]\n  (->> (clojure.string/split x #\" \")\n     (map #(filter (fn f [c] (re-matches #\"[A-Za-z]\" (str c))) %))\n     (map (partial apply str))\n     (sort-by clojure.string/upper-case)))", "user": "575fbe58e4b08062f99a4e87"}, {"problem": 70, "code": "(fn sorting [sentence]\n  (let [sentence_without_punc (clojure.string/replace sentence #\"[^\\w\\s]\" \"\")]\n    (sort (fn [word1 word2] (compare (clojure.string/capitalize word1) (clojure.string/capitalize word2)))\n       (clojure.string/split sentence_without_punc #\" \"))))", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 70, "code": "(fn [s] \n  (sort-by #(.toLowerCase %) (.split (.replaceAll s \"[^a-zA-Z ]\" \"\") \" \")))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 70, "code": "#(sort-by (fn [v] (clojure.string/lower-case v)) (clojure.string/split % #\"[^A-Za-z]\"))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 70, "code": "#(sort-by (fn [a] (.toLowerCase a)) (clojure.string/split % #\"\\W\"))", "user": "57642916e4b0994c1922fbee"}, {"problem": 70, "code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split s #\"\\W\")))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 70, "code": "(fn sort-words\n  [str]\n  (sort-by clojure.string/upper-case\n           (map #(clojure.string/replace % #\"[^A-Za-z]\" \"\")\n                (clojure.string/split str #\" \"))))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 70, "code": "(fn sortword [strr]\n  (sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" strr)))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 70, "code": "(fn [s] \n  (sort-by #(clojure.string/lower-case %)\n           (clojure.string/split\n            (apply str (butlast s)) #\" \")))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 70, "code": "(fn[s]\n\t(into []\n\t\t(map #(apply str %)\n\t\t(sort\n\t\t\t#(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n\t\t\t(filter \n\t\t\t\t#(not= % '(\\space))\n\t\t\t\t(partition-by \n\t\t\t\t\t#(= \\space %) \n\t\t\t\t\t(filter \n\t\t\t\t\t\t#(or \n\t\t\t\t\t\t\t(and (>= (int %) (int \\a)) (<= (int %) (int \\z)))\n\t\t\t\t\t\t\t(and (>= (int %) (int \\A)) (<= (int %) (int \\Z)))\n\t\t\t\t\t\t\t(= % \\space)\n\t\t\t\t\t\t)\n\t\t\t\t\t\ts\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t\t)\n\t)\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 70, "code": "(fn [s]\n  (let [split clojure.string/split\n        upper clojure.string/upper-case]\n    (sort-by upper (map #(apply str (re-seq #\"[a-zA-Z]\" %)) (split s #\" \")))))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\"\\s|!|\\.\"))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 70, "code": "#( ->> % (re-seq #\"\\w+\") (sort-by clojure.string/lower-case))", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" %))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 70, "code": "(fn [s] (sort-by #(Character/.toLowerCase %)  (re-seq #\"[a-zA-Z]+\" s)))", "user": "576e3258e4b0979f89651574"}, {"problem": 70, "code": "(fn [s] (sort (fn [x y] (compare (.toLowerCase x) (.toLowerCase y))) (.split s \"[^a-zA-Z]\")))", "user": "4fb710f4e4b081705acca2cd"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n   (clojure.string/split s #\"\\W\")))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" s)))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 70, "code": "(fn wsort [s]\n  (let [ss (clojure.string/split s #\"\\W+\")]\n        (sort-by clojure.string/lower-case ss)))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 70, "code": "(fn sorting [x] (sort-by #(.toUpperCase %) (#(re-seq #\"\\w+\" %) x)))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 70, "code": "(fn [sentence]\n  (sort-by clojure.string/lower-case\n           (->\n            sentence\n            (clojure.string/replace #\"\\pP\" \"\")\n            (clojure.string/split #\" \"))))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 70, "code": "(fn [s]\n  (let [dealed\n        (clojure.string/split (clojure.string/replace s #\"[^A-Za-z ]\" \"\") #\" \")\n        mysort\n        (fn [coll]\n          (loop [step 0 r coll]\n            (if\n              (= (dec (count coll)) step) r\n              (recur (inc step) (concat (first (split-at step r))\n                                        (#(if (< 0 (compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))) [%2 %1] [%1 %2]) (nth r step) (nth r (inc step)))                                   \n                                        (last (split-at (+ 2 step) r)))))))]\n    (loop [f true r dealed]\n      (if (nil? f) r\n        (recur (some #(< 0 (apply compare %)) (partition 2 1 (map clojure.string/lower-case r)))\n                   (mysort r))))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W+\"))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 70, "code": "(fn sortWords\n  [string]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase  %2)) (clojure.string/split (clojure.string/replace (clojure.string/replace string \".\" \"\") \"!\" \"\")#\" \")))", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 70, "code": "(fn [x]\n  (sort-by (fn [y] (.toLowerCase y)) (clojure.string/split x #\"\\s|\\.|\\!\"))\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 70, "code": "(fn [str]\n    (let [words (re-seq #\"\\w+\" str)]\n      (sort #(compare (clojure.string/lower-case %1)\n                      (clojure.string/lower-case %2))\n            words )))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 70, "code": "(fn [s] \n  (sort #(compare\n          (clojure.string/lower-case %1)\n          (clojure.string/lower-case %2))\n        (map (partial re-find #\"\\w+\")\n             (clojure.string/split\n              s\n              #\"\\s+\"))))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 70, "code": "(fn sort-words [sentence]\n  (let [no-punc (apply str (remove #{\\.\\?\\!} sentence))\n        words (clojure.string/split no-punc #\" \")\n        sorted-words (sort-by clojure.string/lower-case words)]\n    sorted-words))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 70, "code": "(fn __ [x]\n\t(sort-by\n\t\t#(clojure.string/lower-case %)\n\t\t(re-seq\n\t\t\t#\"\\w+\"\n\t\t\tx\n\t\t\t\t)\n\t\t)\n\t)", "user": "575dda55e4b02ea11479938c"}, {"problem": 70, "code": "(fn [st]\n    (->> (clojure.string/split st #\"\\W\")\n         (sort-by clojure.string/lower-case)))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 70, "code": "(fn [sentence]\n  (->> (re-seq #\"\\w+\" sentence)\n       (sort-by #(clojure.string/lower-case %))))", "user": "5711b532e4b09c608db70449"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"[^ a-zA-Z]\" \"\") #\" \"))", "user": "57780e4fe4b0979f89651657"}, {"problem": 70, "code": "(comp (partial sort-by clojure.string/lower-case) #(clojure.string/split % #\"[^a-zA-Z]+\"))", "user": "577832f4e4b0979f8965165b"}, {"problem": 70, "code": "(fn [words]\n  (->> (clojure.string/split words #\" \")\n       (map #(clojure.string/replace % #\"[,.!]\" \"\"))\n       (sort-by clojure.string/lower-case)))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 70, "code": "(fn [s]\n  (-> s \n       (clojure.string/split #\"\\s\")\n       ((fn [elems] (map #(clojure.string/replace % #\"\\W\" \"\" ) elems)))\n       ((fn [elems] (sort-by #(.toLowerCase %) elems ) ) )\n      )\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n   (re-seq #\"\\w+\" s)))", "user": "57934c67e4b0e215f87e8456"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"[^\\w\\s]+\" \"\") #\"\\s+\"))", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 70, "code": "(fn [v]\n  (->> v\n       (re-seq #\"\\w+\")\n       (sort-by #(.toLowerCase %) ) ))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 70, "code": "(fn [s]\n  (->> (clojure.string/split s #\"[^a-zA-Z]+\")\n     (sort \n        (fn [x y]\n          (compare\n           (.toLowerCase x)\n           (.toLowerCase y)))\n        )))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 70, "code": "(fn [sentence]\n  (let [words (clojure.string/split sentence #\" \")]\n    (sort-by #(.toUpperCase %)\n             (map #(clojure.string/replace % #\"\\W\" \"\") words))))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 70, "code": "(fn [sentence]\n  (let [wordvec (clojure.string/split (reduce str (butlast sentence)) #\" \")\n        wordsort (fn woso [position words]\n                   (if (= 1 (count words))\n                     (first words)\n                     (map\n                      (partial woso (inc position))\n                      (map second\n                           (sort-by first\n                                    (group-by\n                                     #(let [lttr (int (nth % position))]\n                                        (if (<= lttr 90)\n                                          (+ lttr 32)\n                                          lttr))\n                                     words))))))]\n    (flatten (wordsort 0 wordvec))))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 70, "code": "(fn [s] \n  (sort-by #(clojure.string/lower-case %)\n           (clojure.string/split\n            (apply str (butlast s)) #\" \")))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 70, "code": "(fn [s] \n  (sort-by #(clojure.string/lower-case %)\n           (clojure.string/split\n            (apply str (butlast s)) #\" \")))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 70, "code": "(fn [s] \n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "579c8ad1e4b05b1deef9ae0c"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case\n          (clojure.string/split % #\"[.!,? ]+\"))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 70, "code": "(fn myf2 [s]\n  (->> \n       (clojure.string/split s #\"[\\s\\.!]\")\n       \n       (sort-by #(.toUpperCase %)) \n       ))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 70, "code": "(fn [sentence]\n  (->> (clojure.string/split sentence #\"[ \\.\\?\\!]\")\n       (map #(vector (clojure.string/lower-case %) %))\n       (into (sorted-map))\n       (vals)))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"[!\\.]\" \"\") #\" \"))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 70, "code": "(fn [s] (->> \n (clojure.string/split s #\"\\W+\")\n (sort-by #(.toLowerCase %))))", "user": "57717915e4b0979f896515b3"}, {"problem": 70, "code": "(fn WORD-SORTING [s]\n  (apply concat (vals (sort (group-by clojure.string/upper-case (re-seq #\"\\w+\" s))))))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 70, "code": "(fn soln [string]\n  (sort\n    (fn [x y] (compare (clojure.string/lower-case x) (clojure.string/lower-case y)))\n    (re-seq #\"\\w+\" string))\n  )", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 70, "code": "(fn [s]\n  (let [ss (seq s)]\n    (let [filtered (filter #(not (re-find #\"[,.!]\" (str %)))  ss)]\n  (let [words (clojure.string/split (apply str filtered) #\" \")]\n    \n    (sort #(let [a (clojure.string/lower-case %1) b (clojure.string/lower-case %2) ] (compare a b))  words)))\n      )\n  )", "user": "579601c8e4b0e215f87e8492"}, {"problem": 70, "code": "(fn z [s] (sort-by clojure.string/upper-case (clojure.string/split  s #\"[\\W+]\")))", "user": "572ac718e4b0f4d77e651242"}, {"problem": 70, "code": "#(into [] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" %)))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case  (re-seq #\"\\w+\" % ))", "user": "57986b76e4b039eba2ecb116"}, {"problem": 70, "code": "(fn[x]   \n    (let [lowercase (map #(clojure.string/lower-case %)  (map #(clojure.string/replace % #\"\\W\" \"\") (clojure.string/split x #\" \")))\n          original  (map #(clojure.string/replace % #\"\\W\" \"\") (clojure.string/split x #\" \"))\n          \n         ]\n        (vals (sort (into {} (map vec (partition 2 (interleave lowercase original ))))))\n  ))", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 70, "code": "(fn word-sorting [s]\n  (sort #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2))\n        (clojure.string/split s #\"\\W\")))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W+\"))", "user": "577202d2e4b0979f896515c0"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 70, "code": "(fn [s]\n  (sort-by identity\n           #(apply compare (map clojure.string/lower-case [%1 %2]))\n           (re-seq #\"[a-zA-z]+\" s)))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 70, "code": "(fn [s] \n  (sort \n    #(compare \n       (clojure.string/lower-case %1)\n       (clojure.string/lower-case %2)\n     )\n    (clojure.string/split (clojure.string/replace s #\"[,.!?]\" \"\") #\" \")\n  )\n)", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 70, "code": "(fn [ll]\n       \n       \n       (sort-by clojure.string/lower-case \n                (clojure.string/split (clojure.string/replace ll #\"\\!|\\.\" \"\")\n                 \t\t\t\t\t\t#\" \")\n                ))", "user": "55912230e4b027778923767a"}, {"problem": 70, "code": "(fn [sentence]\n  (let [words (-> (re-find #\"[\\w \\d]*\" sentence)\n                  (clojure.string/split #\" +\"))\n        indexed-lc (reduce (fn [coll word]\n                             (update-in coll\n                                        [(clojure.string/lower-case word)]\n                                        conj word))\n                           {} words)\n        sorted (sort (keys indexed-lc))]\n    (mapcat (fn [w] (sort (get indexed-lc w))) sorted)))", "user": "51ab4082e4b04e3dc0c27b31"}, {"problem": 70, "code": "#(sort-by (memfn toLowerCase) (re-seq #\"\\w+\" %))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" (apply str (remove #((set (re-seq #\"\\p{Punct}\" s)) %) (map str s))))))", "user": "4ea092f4535d7eef308072a6"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/upper-case (clojure.string/split (clojure.string/replace s #\"[.!]\" \"\")\n                        #\" \")))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 70, "code": "(fn [s]\n    (apply vector\n      (sort\n        #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n        (clojure.string/split\n          (clojure.string/replace s #\"[.!]\" \"\")\n          #\" \"\n        )\n      )\n    )\n  )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 70, "code": "(fn [s]\n    (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n          (remove #(re-matches #\"^\\s*$\" %) (clojure.string/split (clojure.string/replace s #\"[.!?]\" \"\") #\" \"))))", "user": "56b306c6e4b0982f16b37e0e"}, {"problem": 70, "code": "(fn [words]\n  (letfn [(split-words [words]\n            (-> (clojure.string/replace words #\"[^\\w\\s]\" \"\")\n                (clojure.string/split #\" \")))\n           (compare-as-lowercase [s1 s2]\n                                 (compare (clojure.string/lower-case s1) (clojure.string/lower-case s2)))]\n    (sort compare-as-lowercase (split-words words))))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 70, "code": "(fn [s] \n  (let [ia (int \\a)\n        iA (int \\A)\n        daA (- ia iA)\n        lowercase (fn [z] \n                    (let [r (apply str (map (fn [c] (let [ic (int c)]\n                                        (if (< ic ia) (char (+ ic daA)) c)\n                                        )) z))]\n                      (println [z \" >lower> \" r])\n                      r)\n                    )\n        sc (fn [x y] (compare (lowercase x) (lowercase y)))]\n    (sort sc (re-seq #\"[a-zA-Z]+\" s))\n    \n  )\n)", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 70, "code": "(fn[w]\n  (sort #(compare\n        (clojure.string/lower-case %1)\n        (clojure.string/lower-case %2))\n      (clojure.string/split w #\"[^A-Za-z]+\")))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 70, "code": "(fn [c s] (sort c (re-seq #\"\\w+\" s)))\n(comparator\n  (fn f [[h1 & t1] [h2 & t2]]\n    (#(if (zero? %) (f t1 t2) (neg? %))\n      (compare (clojure.string/lower-case h1)\n               (clojure.string/lower-case h2)))))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 70, "code": "(fn [s]\n    (->>\n     (clojure.string/split s #\"[\\ \\.\\!]\")\n     (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))))\n    )", "user": "57aa290de4b0b8559636fc65"}, {"problem": 70, "code": "(fn [str]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n    (clojure.string/split (subs str 0 (dec (count str))) #\"\\s\")))", "user": "57addbcce4b0b8559636fca3"}, {"problem": 70, "code": "(fn [s] (sort (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b))) (clojure.string/split s #\"\\W+\")))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (clojure.string/split (.replaceAll s \"[.!?\\\\-]\" \"\") #\" \")))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 70, "code": "(fn [sentence]\n\t(sort-by clojure.string/lower-case\n\t\t(re-seq #\"[A-Za-z]+\" sentence)))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 70, "code": "(fn[s]\n  (sort-by \n   \tclojure.string/lower-case \n    (map\n        (fn[x](apply str (filterv #(re-matches #\"[A-Za-z]\" (str %)) x)))\n   \t    (clojure.string/split s #\"\\s+\"))))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 70, "code": ";//todo:be better\n(fn [xs] (sort #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2)) (clojure.string/split xs #\"[ .!]\")))", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 70, "code": "(fn sort-words [s]\n  (let [remove-punct (fn [s]\n        (.replaceAll s \"[!?.,-]+\" \"\"))]\n        (sort #(.compareToIgnoreCase %1 %2) (.split (remove-punct s) \" \"))))", "user": "57ca95f2e4b05aa3c4741d3b"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1)\n                  (clojure.string/lower-case %2))\n     (clojure.string/split s #\"[!.\\s]+\")))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 70, "code": "#(sort (fn [s1 s2] (compare (clojure.string/upper-case s1) (clojure.string/upper-case s2))) ( \n    clojure.string/split (\n      clojure.string/replace %1 #\"[^a-zA-Z\\s]\" \"\") #\"\\s\"))", "user": "57a1ef58e4b0c3d858beb8f3"}, {"problem": 70, "code": "(fn [s]\n  (->> (clojure.string/split\n         s #\"[ .!]\")\n       (sort-by\n        clojure.string/lower-case)))", "user": "576da825e4b0979f8965156c"}, {"problem": 70, "code": "(fn wordsort [sentence]\n  (let [words (clojure.string/split sentence #\"[^\\p{L}\\p{Nd}]+\")]\n  \t(vals (apply sorted-map (interleave (map clojure.string/lower-case words) words)))\n   )\n )", "user": "57cf03c0e4b00451144b04f9"}, {"problem": 70, "code": "(comp #(sort-by clojure.string/lower-case %) #(.split % \" \") #(clojure.string/replace % #\"[^\\w ]\" \"\"))", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 70, "code": "(fn f [s]\n  (->> (vec s)\n       (remove #{\\. \\!})\n       (apply str)\n       (#(clojure.string/split % #\" \"))\n       (sort-by clojure.string/lower-case)\n       vec))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (clojure.string/split s #\"[^\\w]+\")))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 70, "code": "(fn [str]\n  (->> str\n       (re-seq #\"\\w+\")\n       (sort-by clojure.string/lower-case)))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 70, "code": "(fn word-sorting\n  [s]\n  (sort-by clojure.string/lower-case (map (partial apply str) (map (partial filter #(or (and (> (int %) 64) (< (int %) 91)) (and (> (int %) 96) (< (int %) 123)))) (clojure.string/split s #\" \")))))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (map last (re-seq #\"(\\S+).\"  % )))", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 70, "code": "(fn sort-words [ws]\n  (let [c (fn [w1 w2]\n            (compare (.toUpperCase w1) (.toUpperCase w2)))\n        s (fn [s]\n            (seq (.split s \"[^a-zA-Z]+\")))]\n    (sort c (s ws))))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (-> % (clojure.string/replace #\"[.?!]\" \"\") (clojure.string/split #\" \")))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 70, "code": "(fn solit-sentence[xs]\n  (->> (re-seq #\"\\w+|\\d+\" xs)(sort-by #(.toLowerCase %))))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 70, "code": "(fn [words]\n  (sort (fn [a b] (compare (.toLowerCase a) (.toLowerCase b)))\n    (clojure.string/split\n      (apply str (filter #(or (= % \\space) (and (>= (int %) (int \\A)) (<= (int %) (int \\z))))  words))\n      #\" \")))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 70, "code": "(fn [ws]\n  (->> (clojure.string/split ws #\"[^A-Za-z]\")\n    (sort #(.compareToIgnoreCase %1 %2))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 70, "code": "(let [filter (fn [sentence] (apply str (re-seq #\"[a-zA-Z\\s]\" sentence)))\n      spliter (fn [sentence] (clojure.string/split sentence #\" \"))\n      sorter (fn [word] (sort-by clojure.string/lower-case word))]\n  #(-> % filter spliter sorter))", "user": "578fc072e4b0ebec4cfb759a"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n        (clojure.string/split s #\"[^\\w]+\")))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 70, "code": "(fn sort-insens [stringToSort]\n    (->>\n        (clojure.string/split stringToSort #\"\\s+\")\n        (map #(. % replaceAll \"\\\\W\" \"\") ,,)\n        (sort (fn [strA strB] (. strA compareToIgnoreCase strB)),,)))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "57c0393be4b05aa3c4741c90"}, {"problem": 70, "code": "(fn [s] \n (sort\n    #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n    (clojure.string/split s #\"\\W\")))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" %))", "user": "56bb652ae4b0f26550335953"}, {"problem": 70, "code": "(fn mysort [s]\n  (sort-by #(clojure.string/lower-case %)\n           (clojure.string/split s #\"[ .!,]\")))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" %))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace s #\"[,.!?;]\" \"\") #\" \")))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 70, "code": "(fn [string]\n  (->> (clojure.string/replace string #\"[.!]\" \"\")\n       (#(clojure.string/split % #\"\\s+\"))\n       (sort-by #(clojure.string/lower-case %))))", "user": "57155980e4b07c98581c3ad7"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\", %))", "user": "5705f569e4b0b0fb43fd0677"}, {"problem": 70, "code": "(fn word-sort [args]\n  (sort-by clojure.string/lower-case (clojure.string/split (re-find #\"[a-z A-Z \\s]+\" args) #\" \")))", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 70, "code": "(fn wsort [s]\n  (sort-by clojure.string/lower-case\n    (clojure.string/split s  #\"[^a-zA-Z]\")))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" s)))", "user": "56629a7de4b0e91d5f5c5649"}, {"problem": 70, "code": "(fn [s] (sort #(.compareToIgnoreCase %1 %2) (seq (.split s \"\\\\W+\"))))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 70, "code": "(fn [s]\n  (->> (re-seq #\"\\w+\" s)\n       (sort-by clojure.string/lower-case)))", "user": "52761edae4b03e8d9a4a74d4"}, {"problem": 70, "code": "(fn [s]\n  (drop-while #(= % \" \")\n              (sort-by clojure.string/lower-case\n                       (map (partial apply str)\n                            (partition-by #(= \\space %)\n                                          (remove #(or\n                                                    (= \\. %)\n                                                    (= \\! %))\n                                                  s))))))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W+\"))", "user": "576df252e4b0979f8965156f"}, {"problem": 70, "code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split s #\"\\W\")))", "user": "57b39fbee4b0fbc9809a2783"}, {"problem": 70, "code": "#(sort-by (fn [x] (.toLowerCase x)) (re-seq #\"\\w+\" %))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 70, "code": "(fn [s]\n  (let [v (clojure.string/split s #\"\\W\")]\n    (sort (fn [s1 s2]\n            (loop [remaining1 (sequence (clojure.string/lower-case s1)) remaining2 (sequence (clojure.string/lower-case s2))]\n              (if (empty? remaining1)\n                -1\n                (if (empty? remaining2)\n                  1\n                  (if (= 0 (compare (first remaining1) (first remaining2)))\n                    (recur (rest remaining1) (rest remaining2))\n                    (compare (first remaining1) (first remaining2))))))) v)))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[^\\w]\"))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 70, "code": "(fn [sentance]\n  (sort \n    #(compare (.toLowerCase %1) (.toLowerCase %2))\n    (clojure.string/split sentance #\"\\W\")))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 70, "code": "(fn [s]\n   (sort-by clojure.string/lower-case \n            (-> s \n                (clojure.string/replace #\"[^a-zA-Z ]\" \"\")\n                (clojure.string/split #\" \")\n                )))", "user": "57a8eba2e4b0a96607956225"}, {"problem": 70, "code": "(fn [x]\n  (sort String/CASE_INSENSITIVE_ORDER (clojure.string/split x #\"\\W\")))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 70, "code": "(fn [string]\n  (let [split (clojure.string/split string #\"[ .!]\")]\n    (sort-by clojure.string/upper-case split)))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 70, "code": "(comp (partial sort-by #(.toUpperCase %)) #(re-seq #\"\\w+\" %))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 70, "code": "(fn [s]\n    (let [words (clojure.string/split s #\"\\W\")]\n      (sort-by #(.toLowerCase %) words)))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 70, "code": "(fn [s]\n  (let [re #\"\\w+\"]\n    (->> s\n        (re-seq re)\n        (sort-by clojure.string/lower-case))))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 70, "code": "#(sort-by (fn [w] (clojure.string/lower-case w))\n\t\t  (re-seq #\"\\w+\" %))", "user": "5405885ee4b0addc1aec6668"}, {"problem": 70, "code": "(fn [st] (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" st)))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 70, "code": "(fn [s] (sort #(.compareTo (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 70, "code": "#(sort-by (fn [s] (.toLowerCase s)) (clojure.string/split (clojure.string/replace % #\"\\.|!\" \"\") #\" \"))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 70, "code": "(fn f1090 [strin]\n  (vec (sort-by #(clojure.string/lower-case %) (clojure.string/split (apply str (drop-last strin)) #\" \"))))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 70, "code": "(fn [sentence]\n  (->> sentence\n       (re-seq #\"\\w+\")\n       (sort-by #(.toLowerCase %))))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 70, "code": "(fn wsort [words]\n  (sort\n   #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n   (clojure.string/split (clojure.string/replace words #\"[!.]\" \"\") #\"\\s\")))", "user": "56069006e4b08b23635d3174"}, {"problem": 70, "code": "(fn [y]\n    (let [a   (clojure.string/split y #\"\\s+\")\n          x (map (fn [z] (apply str (filter #(< 64 (int %) 123)z) ))   a) ]\n          (sort-by #(clojure.string/lower-case %1) x)))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 70, "code": "(fn [st]\n   (->> (drop-last st)\n        (apply str)\n        ((fn [x] (clojure.string/split x  #\" \")))\n        (sort-by clojure.string/lower-case)))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 70, "code": "(fn [s] (sort-by (fn [w](.toLowerCase w))  (re-seq #\"\\w+\" s)))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 70, "code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split s #\"[\\s.!]+\")))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 70, "code": "(fn [s](sort\n        #(compare (clojure.string/upper-case %1)\n                  (clojure.string/upper-case %2))\n        (clojure.string/split\n         (clojure.string/replace s #\"[\\.\\!]\" \"\") #\"\\s\")))", "user": "515cf9b5e4b00901442db1d4"}, {"problem": 70, "code": "(fn sort-words\n  [str]\n  (let [strings (into [] (clojure.string/split (clojure.string/replace str #\"[\\.!]\" \"\") #\" \"))]\n    (let [lower-strings (into [] (map clojure.string/lower-case strings))]\n      (let [lower-to-index (clojure.set/map-invert\n                            (into {} (map-indexed (fn [x y] [x y]) lower-strings)))]\n        (map strings (map lower-to-index (sort lower-strings)))))))", "user": "58152157e4b0f478707a0631"}, {"problem": 70, "code": "(fn \n  [words-str]\n  (sort-by #(.toLowerCase %1) (clojure.string/split (.replaceAll words-str \"[^a-zA-Z ]\" \"\") #\" \"))\n)", "user": "560d4994e4b05f002753df3c"}, {"problem": 70, "code": "(fn [x]\n  (sort-by clojure.string/lower-case\n  (re-seq #\"[A-Za-z]+\" x)))", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 70, "code": "(fn [str-coll] (sort\n                                   #(compare\n                                     (clojure.string/lower-case %1)\n                                     (clojure.string/lower-case %2))\n                                   (clojure.string/split\n                                    (clojure.string/replace str-coll #\"[^\\w\\s]\" \"\") #\"\\s+\")))", "user": "56449e4de4b0284900eef5f9"}, {"problem": 70, "code": "(fn [input]\n      (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (clojure.string/split (clojure.string/replace input #\"[^A-Za-z ]\" \"\") #\" \")))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "58247423e4b051871117bec5"}, {"problem": 70, "code": "(fn [str]\n  (vals (into (sorted-map) (map #(vector (clojure.string/lower-case %) %) (re-seq #\"\\w+\" str)))))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 70, "code": "(fn wsort [input] \n  (sort-by clojure.string/lower-case\n    (filter #(not (= % \"\"))\n      (clojure.string/split input #\"\\W+\")\n    )))", "user": "5710140fe4b09c608db7042e"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 70, "code": "#(sort-by (fn [a](.toLowerCase a)) (re-seq #\"\\w+\" %))", "user": "58171a9ae4b0c0e9c07b8387"}, {"problem": 70, "code": ";(fn my-word-sorting [sentence]\n;  (->> (partition-by #(= % \\space) sentence)\n;       (filter #(not= % '(\\space)))\n;       (map #(apply str %))\n;       (map #(re-find #\"[a-zA-Z]*\" %))\n;       (sort-by #(.toLowerCase %))))\n\n(fn my-word-sorting-better [s]\n  (->> (re-seq #\"[a-zA-Z]+\" s)\n       (sort-by #(.toLowerCase %))))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/lower-case\n                 (clojure.string/split x #\"[^a-zA-Z]+\")))", "user": "563e1c0ee4b0da801c4e4665"}, {"problem": 70, "code": "(fn [s]\n    (let [words (re-seq #\"\\w+\" s)]\n      (sort-by clojure.string/lower-case words)))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5256c4c1e4b0541d1855ba36"}, {"problem": 70, "code": "#(sort-by (memfn toLowerCase) (clojure.string/split  (apply str (re-seq #\"[a-z A-Z]\" %)) #\" \"))", "user": "5829d588e4b051871117bf4a"}, {"problem": 70, "code": "#(->> (clojure.string/split % #\"\\W+\")\n      (remove clojure.string/blank?)\n      (sort-by clojure.string/lower-case)\n      vec)", "user": "50e5bca5e4b09ae9427b0e75"}, {"problem": 70, "code": "(fn word-sorting [words]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" words)))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 70, "code": "(fn [l]\n    (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n          (clojure.string/split l #\"[\\s+\\.!]\")))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 70, "code": ";(fn [x]\n;  (let [ws (clojure.string/split x #\"[\\W]|[\\s]\")\n;        kws (map #(keyword (.toLowerCase %)) ws)\n;        wm (apply hash-map (interleave kws ws))]\n;    (remove keyword? (flatten (into [] (into (sorted-map) wm))))))\n;More elegant solution\n(fn [x] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" x)))", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 70, "code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 70, "code": "#(->> (clojure.string/split % #\"\\W+\")\n      (sort-by clojure.string/lower-case))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 70, "code": "(fn [s]\n  (->> (sort-by\n         #(clojure.string/lower-case %)\n         (clojure.string/split s #\" \"))\n       (map #(clojure.string/replace % #\"[^A-Za-z]\" \"\"))))", "user": "5574c172e4b05c286339e059"}, {"problem": 70, "code": "(fn [str]\n  (sort-by #(.toLowerCase %) (clojure.string/split str #\"[^\\w]\")))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 70, "code": "(fn\n  [s]\n  (let [t (clojure.string/replace s #\"[^a-zA-Z ]\" \"\")]\n    (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split t #\" \"))))", "user": "5609d328e4b05f002753deee"}, {"problem": 70, "code": ";(comp (partial sort-by clojure.string/lower-case) \n;      (partial re-seq #\"\\w+\"))\n\n; golf:\n(fn [x] (sort-by #(.toLowerCase %) (.split #\"\\W\" x)))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" x)))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 70, "code": "#(sort-by (fn [a](clojure.string/upper-case a)) (clojure.string/split (apply str (drop-last %)) #\" \"))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 70, "code": "(fn [a]\n(sort  #(compare (clojure.string/lower-case %1)(clojure.string/lower-case %2)) \n       (->> (clojure.string/split a #\" \")\n           (map #(apply str (re-seq #\"[a-zA-Z]\" %))))))", "user": "577e42dee4b0c8d87281f6e4"}, {"problem": 70, "code": "(fn f [st]\n     (sort \n        (fn cmp [x y]\n          (compare \n            (clojure.string/upper-case x) \n            (clojure.string/upper-case y)))\n        (clojure.string/split st #\"[\\s\\.\\!]+\")))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 70, "code": "(fn [s]\n  (sort (fn [v1 v2]\n          (compare (clojure.string/upper-case v1)\n                   (clojure.string/upper-case v2)))\n        (clojure.string/split s #\"[^a-zA-Z]+\")))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 70, "code": "(fn [string]\n  (sort (fn [string1 string2]\n          (< (compare (clojure.string/lower-case string1) \n                      (clojure.string/lower-case string2))\n             0))\n        (re-seq #\"\\w+\" string)))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 70, "code": "(fn [l] (->> (.split #\"\\W\" l) (sort-by #(.toLowerCase %))))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 70, "code": "(fn [s]\n  (->> (clojure.string/split (clojure.string/replace s #\"[.,!]\" \"\") #\" \")\n       (sort-by #(.toUpperCase %))))", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" %))", "user": "5853582fe4b0b7285a6f4ec5"}, {"problem": 70, "code": "(fn [st] (->> (re-seq #\"\\w+\" st) (sort-by #(.toLowerCase %))))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"[^\\w]\")))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Z,a-z]+\" %))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W+\"))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 70, "code": "(fn word-sorting [words]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n  (clojure.string/split (clojure.string/replace words #\"[.!,;]\", \"\") #\"\\s\")\n  ))", "user": "525d44bfe4b0cb4875a45d6d"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case  (clojure.string/split % #\"[!.\\s]+\"))", "user": "52503747e4b0541d1855b828"}, {"problem": 70, "code": "#(sort-by\n    clojure.string/lower-case\n   (clojure.string/split \n     (clojure.string/replace % #\"[!\\.]\" \"\")\n      #\" \"))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 70, "code": "(fn [s]\n  (sort-by\n    clojure.string/lower-case\n    (-> (clojure.string/replace s #\"\\W+\" \" \")\n        (clojure.string/split #\" \"))))", "user": "584b0422e4b089d5ab817ef4"}, {"problem": 70, "code": "(fn myws [s]\n  (let [q (re-seq #\"\\w+\" s)\n        r (sort (map clojure.string/lower-case q))]\n    (sort-by #(.indexOf r (clojure.string/lower-case %)) q)))", "user": "51456858e4b0e88796073408"}, {"problem": 70, "code": "(comp \n  (partial sort-by clojure.string/lower-case)\n  (partial re-seq #\"\\w+\"))", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/upper-case\n           (clojure.string/split \n            (clojure.string/join \n             (re-seq #\"[\\w\\s]\" s))\n            #\"\\s\")))", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 70, "code": "(fn [s]\n  (->> s (re-seq #\"[a-zA-Z]+\") (sort #(compare (.toLowerCase %1) (.toLowerCase %2)))))", "user": "55597b84e4b0deb715856e36"}, {"problem": 70, "code": "(fn [s]\n    (sort-by #(vec (take 10 (concat (map int (clojure.string/lower-case %)) (repeat -1)))) (clojure.string/split\n            (clojure.string/replace s #\"[.!]\" \"\")\n           #\" \")))", "user": "586b6753e4b01531a375e956"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(clojure.string/lower-case %)\n  \t(clojure.string/split s #\"\\W\")))", "user": "55ed1dc5e4b0121d4835fdd4"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[\\W]+\"))", "user": "4f3ca5a6e4b0e243712b1f53"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" %))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n        (re-seq #\"[a-zA-Z]+\" s)))", "user": "4f3b5219e4b0e243712b1f2a"}, {"problem": 70, "code": "(fn [s]\n  (->> (clojure.string/split s #\"[^A-Za-z]\")\n       (sort-by clojure.string/lower-case)))", "user": "5879d577e4b01531a375ead8"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 70, "code": "(fn [s] (->> s\n(partition-by #(not (= % \\space)))\n (remove (fn [e] (every? #(= % \\space) e)))\n (map (fn [e] (filter #(re-matches #\"[a-zA-Z]+\" (str %)) e)))\n (remove empty?)\n (map #(apply str %))\n (sort-by #(.toLowerCase %))\n))", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v)) (re-seq #\"\\w+\" %))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 70, "code": "(fn __ [inputString] (into [] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (map #(clojure.string/replace % #\"\\W\" \"\") (clojure.string/split inputString #\" \")))))", "user": "570424c1e4b0b0fb43fd065f"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 70, "code": "(fn [s]\n(sort #(compare (.toUpperCase %1) (.toUpperCase %2))(filter seq\n(reduce (fn [res n] \n          (if (contains? #{\\. \\, \\! \\space} n)\n            (conj res nil)\n            (conj (rest res) (str (first res) n))))\n        ()\n        s)))) \n    ;;    \"Hei og h\u00e5, p\u00e5 deg!\")\n\n;(fn [s]\n;(sort #(compare (.toUpperCase %1) (.toUpperCase %2))\n; (first \n;  (reduce (fn [[res word] n] \n;            (if (contains? #{\\. \\, \\! \\space} n)\n;              (if (empty? word)\n;                [res nil]\n;                [(conj res word) nil])\n;              [res (str word n)])) \n;          [() nil] \n;          (str s \" \")))))\n ;          \"Have  a nice day today\")\n\n;(sj\u00f8hulk 1)\n;(defn sj\u00f8hulk [rth](* 5 rth))", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 70, "code": "(fn [in] \n  (sort-by\n   #(clojure.string/lower-case %)\n   (clojure.string/split in #\"[^a-zA-Z]\"))\n  )", "user": "587c59d1e4b01531a375eb17"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (subs % 0 (dec (count %))) #\" \"))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[^a-zA-Z]\"))", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 70, "code": "(fn[words]\n  (->> (clojure.string/split  words #\" \")\n       (map #(clojure.string/replace % #\"\\W\" \"\"))\n       (sort-by #(.toLowerCase %) )))", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 70, "code": "(fn [p]\n  (-> p\n      (clojure.string/replace #\"[.,!]\" \"\")\n      (clojure.string/split #\"\\s+\")\n      ((fn [w] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) w)))))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "589511dee4b00487982d5272"}, {"problem": 70, "code": "(fn [s]\n  (->> (clojure.string/split s #\" \")\n           (map (fn [w] (clojure.string/replace w #\"[^a-zA-Z]\" \"\")))\n           (sort-by clojure.string/upper-case)))", "user": "58949f8de4b00487982d525e"}, {"problem": 70, "code": "(fn [s]\n   (sort\n     (fn [x y]\n       (compare\n\t (clojure.string/lower-case x)\n\t (clojure.string/lower-case y)\n\t )\n       )\n     (re-seq #\"\\w+\" s)\n     )\n   )", "user": "562add6de4b00e49c7cb4834"}, {"problem": 70, "code": "(fn [line]\n    (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n        (clojure.string/split\n            (apply str (filter #(or (Character/isLetter %) (Character/isSpace %)) line))\n             #\" \")))", "user": "5896735fe4b00487982d529d"}, {"problem": 70, "code": "(comp (partial sort-by clojure.string/lower-case) (partial re-seq #\"\\w+\"))", "user": "58923efce4b00487982d521c"}, {"problem": 70, "code": "#(map \n   (fn [in](apply str in)) \n   (map \n    (fn [data](filter \n      (fn [ch] (Character/isLetter ch))  data) )\n    (sort-by \n     (fn[stri](.toUpperCase stri))\n     ((fn[data](clojure.string/split data #\"\\s+\"  )) %))))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 70, "code": "(fn [sentence] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (re-seq #\"\\w+\" sentence)))", "user": "58950f29e4b00487982d5270"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(clojure.string/lower-case %)\n            (clojure.string/split s #\"\\W\")))", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 70, "code": "(fn [x]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" x)))", "user": "4f7ab8c7e4b06e829148e19c"}, {"problem": 70, "code": "; solution defininf remove-punctuation\n; (fn my-sort [str]\n;  (let [remove-punctuation \n;    (fn [str]\n;      (clojure.string/replace str #\"[^a-zA-Z]\" \"\"))]\n;    (sort-by \n;      clojure.string/lower-case\n;      (map remove-punctuation (clojure.string/split str #\" \")))))\n\n(fn my-sort [str]\n  (sort-by clojure.string/lower-case (clojure.string/split str #\"[^a-zA-Z]\")))", "user": "56255e2de4b00a550fc90297"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s))\n  )", "user": "589037b4e4b00487982d51d0"}, {"problem": 70, "code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split  s #\"[ |.|!]\")))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 70, "code": "(fn [s]\n  (->>\n   (re-seq #\"\\w+\" s)\n   (sort-by #(str (. % toLowerCase)))))", "user": "58a5a099e4b01a0c0b232918"}, {"problem": 70, "code": "(fn sort-words [a-str]\n  (sort-by clojure.string/capitalize (clojure.string/split (clojure.string/replace a-str #\"[.,?!]\" \"\") #\"\\s\")))", "user": "580d2788e4b0849f6811b730"}, {"problem": 70, "code": "(fn word-sort [text]\n  (mapv #(clojure.string/replace % #\"\\W\" \"\")\n        (sort #(compare (.toLowerCase %1)\n                        (.toLowerCase %2))\n              (clojure.string/split text #\" \"))))", "user": "5895477fe4b00487982d527c"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %)) ; no idea", "user": "57625c18e4b0994c1922fba4"}, {"problem": 70, "code": "(fn ws [s]\n  (let [filtered-s (clojure.string/split (apply str (remove (set \",./<>?;'[]{}|-_()*&^%$#@!\") s)) #\" \")\n        lower-s (map clojure.string/lower-case filtered-s)]\n    (->> (zipmap filtered-s lower-s)\n         (sort-by val)\n         (map first))\n    ))", "user": "58988cbbe4b00487982d52d7"}, {"problem": 70, "code": "(fn f [s]\n  (->> (.split s \"( |\\\\.|\\\\!)\")\n       (filter #(pos? (count %)))\n       (sort-by clojure.string/lower-case)))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"\\p{Punct}\" \"\") #\" \"))", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n        (-> (clojure.string/replace s #\"[^\\w ]\" \"\")\n            (clojure.string/split #\" \"))))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 70, "code": "(fn my-comp [my-str]\n  (let [punc #{\\. \\!}\n        working-data (clojure.string/split (apply str (filter #(not (punc %)) my-str)) #\" \")]\n    (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n          working-data)))", "user": "58a953dae4b01a0c0b232968"}, {"problem": 70, "code": "(fn\n  [s]\n  (sort-by clojure.string/lower-case (clojure.string/split (.replaceAll s \"[\\\\.!]\" \"\") #\"\\s+\"))\n  )", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 70, "code": ";#(sort-by (partial clojure.string/lower-case) (re-seq #\"\\w+\" %))\n\n(fn [s] (let [flc clojure.string/lower-case\n                   s1  (re-seq #\"\\w+\" s)\n                   s2  (sort (map flc s1))\n                   fm  (fn [el se] (some #(and (= (flc %) el) %) se))] \n               (map #(fm % s1) s2)))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n    (-> s\n      (clojure.string/replace #\"\\W\" \" \")\n      (clojure.string/split #\"\\s\"))))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))\n\n;; redo", "user": "5897dda4e4b00487982d52c8"}, {"problem": 70, "code": "(fn [text]\n  (letfn [(words [text] (clojure.string/split text #\"\\W+\"))\n          (sort-by-contents [tokens] (sort (fn [a b] (.compareTo (.toLowerCase a) (.toLowerCase b))) tokens))]\n    (-> text\n         words\n         sort-by-contents)))", "user": "56375106e4b0bfe05bf117d3"}, {"problem": 70, "code": "(comp #(sort-by clojure.string/lower-case %) #(clojure.string/split % #\" \")\n                        #(clojure.string/replace % #\"\\.|!\" \"\"))", "user": "4f748b54e4b044e54cd9a8fa"}, {"problem": 70, "code": "(fn [s]\n  (sort\n   #(compare\n     (clojure.string/lower-case %1)\n     (clojure.string/lower-case %2))\n   (remove\n    #(empty? %)\n    (clojure.string/split\n     s\n     #\"[ !\\.]\"))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 70, "code": "(fn [a](sort #(compare (clojure.string/lower-case %1)(clojure.string/lower-case %2))(clojure.string/split (apply str(reverse(rest(reverse a)))) #\" \")))", "user": "53ada652e4b047364c04446d"}, {"problem": 70, "code": "(fn [s]\n  (loop [ss (clojure.string/split s #\"\\W\")\n         sorted []]\n    (if (empty? ss)\n      sorted\n      (let [s (first ss)\n            [l r] (split-with (fn [e] (< (.compareToIgnoreCase e s) 1)) sorted)]\n        (recur (rest ss) (concat l [s] r))))))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 70, "code": "#( ->> % (re-seq #\"\\w+\") (sort-by clojure.string/lower-case))", "user": "58b1f51de4b0ebc645576d05"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (clojure.string/split s #\"[^a-zA-Z]+\")))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 70, "code": "(fn [x] (sort-by #(clojure.string/lower-case %) (vec (clojure.string/split x #\"( |\\p{Punct})\"))))", "user": "58c3af4de4b021aa9917ed1b"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" %))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 70, "code": "(fn [s] (let [\n               words (into [] (clojure.string/split s #\" \"))\n               lower-case (map (fn [x] (let [\n                                             word (.replaceAll (nth words x) \"\\\\W\" \"\")\n                                             lowered (clojure.string/lower-case word)\n                                             ] {\n                                                :index x\n                                                :word word\n                                                :lowered lowered\n                                                })) (range (count words)))\n               sorted   (sort-by :lowered lower-case)\n               ] \n           (into [] (map :word sorted)) ))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 70, "code": "(fn [s]\n  (->> s\n       (re-seq #\"\\w+\")\n       (sort-by #(.toLowerCase %))))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 70, "code": "(fn [s]\n   (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 70, "code": "(fn [string]\n  (let [string-no-punc (clojure.string/replace string #\"[^a-zA-Z0-9\\s]\" \"\")]\n    (sort-by #(clojure.string/capitalize %) (clojure.string/split string-no-punc #\"\\s\"))))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) \n                        (clojure.string/lower-case %2)) \n              (clojure.string/split s #\"[ \\.\\!]\")))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 70, "code": "( fn [noun] (sort #(compare (clojure.string/lower-case %)  (clojure.string/lower-case %2))  (clojure.string/split (clojure.string/replace noun #\"[.!]\" \"\")   #\" \")))", "user": "575bd5f9e4b02ea114799365"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %)\n      (sort-by clojure.string/lower-case))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 70, "code": "(fn [ws] (sort-by #(clojure.string/upper-case %) (re-seq #\"\\w+\" ws)))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 70, "code": "(fn [sentence]\n  (sort-by #(clojure.string/lower-case %)\n           (clojure.string/split (clojure.string/replace sentence  #\"\\p{P}\" \"\") #\"\\s\")))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 70, "code": "(fn split-and-sort [str]\n  (->> str \n    (re-seq #\"\\w+\")\n    (sort-by #(clojure.string/lower-case %))))", "user": "587a3babe4b01531a375eae2"}, {"problem": 70, "code": "(fn sorted-words [sentence]\n  (sort #(compare\n          (clojure.string/lower-case %1)\n          (clojure.string/lower-case %2))\n        (clojure.string/split\n         (clojure.string/replace sentence #\"[^a-zA-Z'\\s]\" \"\")\n         #\"\\s\")))", "user": "587ee260e4b052da650a6353"}, {"problem": 70, "code": "#(sort-by (fn [x] (clojure.string/capitalize x)) (re-seq #\"\\w+\" %))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 70, "code": "(fn t [s]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n        (clojure.string/split s #\" |\\.|!\")))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 70, "code": "#(sort-by (fn [v] (.toLowerCase v))\n         (re-seq #\"\\w+\" %)\n         )", "user": "517e12e3e4b0fcc7c5d37d3c"}, {"problem": 70, "code": "(fn word-sort [s]\n     (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 70, "code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"[A-Za-z]+\" %))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 70, "code": "(fn filter-words [s]\n  (sort-by #(clojure.string/lower-case %) (re-seq #\"[a-zA-Z]+\" s)))", "user": "58e37946e4b005f69f193cae"}, {"problem": 70, "code": "(fn [x] (sort \n         #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) \n         (clojure.string/split (clojure.string/replace x #\"[^A-Za-z ]\" \"\") #\" \")))", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 70, "code": "(fn sorted-words [string]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" string)))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case \n          (.split (->> % (seq) (reverse) (rest) (reverse) (reduce str)) \" \"))", "user": "5895385fe4b00487982d5279"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case\n          (re-seq #\"\\w+\" %))", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (apply str (butlast  %)) #\" \"))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 70, "code": "(fn word-sort [words]\n  (let [word-list (clojure.string/split (clojure.string/replace words #\"[^a-zA-Z\\ ]\" \"\") #\" \")]\n    (sort #(let [word-a (.toLowerCase %1)\n                 word-b (.toLowerCase %2)]\n             (.compareTo word-a word-b))  word-list)))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 70, "code": "(fn\n  [s]\n  (sort-by #(clojure.string/lower-case %)\n           (clojure.string/split (clojure.string/replace s\n                                                         #\"[.!]\"\n                                                         \"\")\n                                 #\" \")))", "user": "5893c64ce4b00487982d524b"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case  (re-seq #\"\\w+\" s)))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case  (re-seq #\"\\w+\" %))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 70, "code": "(fn [s]\n      (->> (clojure.string/split s #\"\\W\")\n           (map #(hash-map :s %,\n                           :sn (clojure.string/lower-case %)))\n           (sort-by :sn)\n           (map :s)))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 70, "code": "(fn [str]\n  (-> str\n      (.substring 0 (- (.length str) 1))\n      (.split \" \")\n      ((partial sort-by #(.toLowerCase %)))\n      vec\n      ))", "user": "5823d3e6e4b051871117beb8"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" %))", "user": "570e43d8e4b0b0fb43fd06eb"}, {"problem": 70, "code": "(fn [s]\n    (sort-by #(.toLowerCase %)\n             (clojure.string/split s #\"[^\\p{Alpha}]\")))", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 70, "code": "(fn [s]\n  (let [clean (remove nil? \n        (filter #(or (= 32 %)\n                     (and (>= % 65) (<= % 90))\n                     (and (>= % 97) (<= % 122)))\n                (map short (.getBytes s))))\n        words (clojure.string/split (apply str (map char clean)) #\" \")]\n    (sort-by clojure.string/upper-case words)))", "user": "56f881e0e4b08e7d20b96839"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/upper-case (clojure.string/split s #\"\\W\")))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 70, "code": "#(vec (sort-by clojure.string/lower-case (re-seq #\"\\w+\" %)))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 70, "code": "(comp (partial sort-by clojure.string/lower-case) re-seq) #\"\\w+\"", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (map #(clojure.string/join (filter (fn [x] (Character/isLetter x)) %)) (clojure.string/split s #\" \"))))", "user": "4e5e9f6b535d8a8b8723a2d2"}, {"problem": 70, "code": "(fn sortWord [s]\n         (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n               (clojure.string/split s #\"\\W\")))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 70, "code": "(fn [s]\n  (->> s\n    (re-seq #\"\\w+\")\n    (sort-by #(.toLowerCase %))))", "user": "5901158de4b0438e51c2d039"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"[^A-Za-z\\s]\" \"\") #\"\\s+\"))", "user": "588e4e05e4b00487982d5188"}, {"problem": 70, "code": "(fn wordsort [strX]\n  (let [words (re-seq #\"\\w+\" strX)]\n    (sort-by clojure.string/lower-case words)))", "user": "590d0bc8e4b047aa04b199fa"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (re-seq #\"\\w+\" s)))", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 70, "code": "(fn [xx]\n  (sort \n   (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b))) \n   (clojure.string/split (clojure.string/replace xx #\"[^a-zA-Z ]\" \"\") #\" \")))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\"  s)))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 70, "code": "(fn [str-seq]\n  (->>\n   (clojure.string/split str-seq #\" \")\n   (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)))\n   (map #(apply str (filter (fn [x] (Character/isLetter x)) %)))\n   ))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 70, "code": "(fn [s]\n    (sort-by clojure.string/lower-case (clojure.string/split (apply str \n                                             (map (fn [letter] \n                                                    (if (contains? (set \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") letter)\n                                                      letter\n                                                      \\space))\n                                                  s)) #\"\\s+\")))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 70, "code": "(fn [x] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" x)))", "user": "53ae0c50e4b047364c044471"}, {"problem": 70, "code": "(fn word-sort [sentence]\n  (sort-by #(.toLowerCase %)\n           (clojure.string/split (->>\n                                   (seq sentence)\n                                   (map int)\n                                   (filter #(or (and (>= % 97) (<= % 122)) (and (>= % 65) (<= % 122)) (= % 32)))\n                                   (map char)\n                                   (apply str)\n                                   ) #\" \")))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split (apply str (filter (complement #{\\. \\!}) s)) #\" \")))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 70, "code": "(fn word-sort\n\t[text]\n\t(-> text\n\t\t(clojure.string/split #\"[\\s?!.]+\")\n\t\t((fn [coll] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) coll)))))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %) (clojure.string/split (apply str (drop-last s)) #\" \")))", "user": "5640b135e4b08d4f616f5ee8"}, {"problem": 70, "code": "(fn [x] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n      (let [w (clojure.string/split x #\" \")]\n        (conj (butlast w) (apply str (butlast (last w)))))))", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 70, "code": "(fn word-sort [s]\n    (->> (re-seq #\"\\w+\" s)\n         (sort-by clojure.string/lower-case ))\n    )", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 70, "code": "(comp (partial sort-by clojure.string/lower-case) \n      #(clojure.string/split % #\" \") \n      #(clojure.string/replace % #\"[^a-zA-Z0-9\\s]\" \"\"))", "user": "566fa059e4b0a866af6896ea"}, {"problem": 70, "code": "#(->> (clojure.string/split % #\"\\W\")\n      (sort-by clojure.string/lower-case))", "user": "57cd7498e4b0c746388ab897"}, {"problem": 70, "code": "(fn [phr]\n  (letfn [(not-letter? [x] (= (clojure.string/upper-case x)\n                              (clojure.string/lower-case x)))]\n    (->> (clojure.string/split phr #\" \")\n         (map #(apply str (remove not-letter? %)))\n         (sort-by clojure.string/lower-case))))", "user": "58ffac9de4b0438e51c2cffd"}, {"problem": 70, "code": "(fn dumbwordsort [x]\n  (sort-by\n   (juxt #(first (clojure.string/lower-case %)) second #(second (next %)) last)\n   (clojure.string/split (clojure.string/replace x #\"[!.]\" \"\") #\" \")))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 70, "code": "#(->> (re-seq #\"[a-zA-Z]*\" %)\n      (remove (partial = \"\"))\n      (sort-by clojure.string/upper-case))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 70, "code": "(fn [s]\n  (->> (clojure.string/split s #\"[^A-Za-z]\")\n       (sort (fn [s1 s2] (.compareTo (.toUpperCase s1) (.toUpperCase s2))))))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 70, "code": "(fn word-sorting-threaded [sentence]\n  (sort #(apply compare (map clojure.string/lower-case [%1 %2]))\n        (-> (clojure.string/replace sentence #\"[!.?]\" \"\")\n            (clojure.string/split  #\" \"))))", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 70, "code": "(fn [sentence]\n  (let [words (clojure.string/split sentence #\" \")\n        tuples (map #(list % (clojure.string/upper-case %))\n                    words)]\n\t(map #(clojure.string/replace (first %) #\"[^a-zA-Z]\" \"\") (sort-by second tuples))))", "user": "58740c18e4b01531a375ea49"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "592518bfe4b072a2710fce65"}, {"problem": 70, "code": "(fn [x] \n  (sort-by clojure.string/lower-case (clojure.string/split (apply str (filter (fn [y] (and (not= y \\.) (not= y \\!))) x)) #\" \"))\n)", "user": "592ac550e4b072a2710fcf27"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n    (re-seq #\"\\w+\" s)))", "user": "58eac340e4b056aecfd47d24"}, {"problem": 70, "code": "(fn [x] (map #(nth % 0) (sort-by #(nth % 1) (map #(vector % (.toLowerCase %)) (filter #(not (= \"\" %)) \n  (re-seq #\"\\w*\" x))))))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "59368ccae4b02506e01a297a"}, {"problem": 70, "code": "#(sort-by (fn [v](clojure.string/lower-case v)) (re-seq #\"\\w+\" %))", "user": "59368efbe4b02506e01a297d"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "544673c0e4b032a45b8693b0"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case\n          (-> %\n              (clojure.string/replace #\"\\.|\\!\" \"\")\n              (clojure.string/split #\" \")))", "user": "57a4f5cae4b0a966079561f0"}, {"problem": 70, "code": "(fn [s]\n(sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "59368ccae4b02506e01a2979"}, {"problem": 70, "code": "(fn [word]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" word)))", "user": "59369515e4b02506e01a297e"}, {"problem": 70, "code": "(fn [s]\n  (->>\n    (clojure.string/split s #\" \")\n    (map (fn [s']\n           (let [s-no-punctuation (clojure.string/replace s' #\"[^a-zA-Z ]\" \"\")]\n             [(clojure.string/lower-case s-no-punctuation) s-no-punctuation])))\n    (sort-by first)\n    (mapv second)))", "user": "52b3959ce4b0c58976d9ad0d"}, {"problem": 70, "code": "(fn [s] (->> (clojure.string/split s #\"[^a-zA-Z]\")\n              (sort-by clojure.string/lower-case)))", "user": "5935b010e4b04f87174def55"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"(?i)[a-z]+\" s)))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 70, "code": "(fn ws [s]\n    (sort-by clojure.string/lower-case (map #(apply str (filter (fn [c] (Character/isLetter c)) %)) (clojure.string/split s #\" \"))))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 70, "code": "#(->> % (re-seq #\"\\w+\") \n               (sort-by clojure.string/lower-case))", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "592518e8e4b072a2710fce67"}, {"problem": 70, "code": "(fn [x] (sort #(.compareTo (.toLowerCase %1) (.toLowerCase %2)) (.split (.replaceAll x \"[.,!?;:]\" \"\") \" \")))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 70, "code": "(fn [s] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 70, "code": "#(->> (re-seq #\"[A-Za-z]+\" %)\n      (sort-by clojure.string/lower-case))", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 70, "code": "(fn sort-words [sentence]\n  (sort-by\n     #(clojure.string/lower-case %)\n     (re-seq #\"\\w+\" sentence)))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "593d6793e4b069cdc2982ba6"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "592518cde4b072a2710fce66"}, {"problem": 70, "code": "(fn f[coll]\n  (sort-by #(.toUpperCase %) (clojure.string/split coll #\"[ !.]\")))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 70, "code": "(fn [s]\n   (->> (re-seq #\"\\w+\" s)\n        (sort-by clojure.string/lower-case)))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 70, "code": "(fn [s]\n  (sort\n    (fn [a b] (compare (.toLowerCase a) (.toLowerCase b)))\n    (clojure.string/split s #\"[^a-zA-Z]+\")\n  )\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v)) (re-seq #\"\\w+\" %))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 70, "code": "(fn ssort [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 70, "code": "(fn [s]\n  (sort #(apply compare (map clojure.string/lower-case [%1 %2])) (clojure.string/split s #\"\\W\")))", "user": "592334c7e4b0a390037439ee"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 70, "code": "(fn [w]\n  (map last (sort (map #(vector % %2)\n      (re-seq #\"\\w+\" (.toLowerCase w))\n      (re-seq #\"\\w+\" w) ))))", "user": "594c1baae4b07ddc2dafae59"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace s #\"[^\\w\\s]\" \"\") #\" \")))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "59251947e4b072a2710fce69"}, {"problem": 70, "code": "(fn [s]\n    (sort-by #(.toLowerCase %)\n             (filter (complement empty?) (map str (.split (.replaceAll s \"[^a-zA-Z ]\" \"\") \" \")))))", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 70, "code": "(fn [s] \n  (->> (clojure.string/split s #\"[^a-zA-Z]\")\n       (map (juxt clojure.string/lower-case identity))\n       sort\n       (map second)))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 70, "code": "(fn [s]\n  (sort-by\n     clojure.string/lower-case\n     (-> s (clojure.string/replace #\"[\\.!]\" \"\")\n           (clojure.string/split #\" \"))))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 70, "code": "(fn [phrase] (sort-by clojure.string/lower-case (clojure.string/split phrase #\"[ .!]+\")))", "user": "53dad484e4b0e771c30254ac"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "595eba88e4b066ee0a44b04e"}, {"problem": 70, "code": "(fn [s]\n  (let [reverse-sort-by #(sort-by %2 %1)]\n    (-> s\n        (clojure.string/replace #\"[.!]\" \"\")\n        (clojure.string/split #\" \")\n        (reverse-sort-by clojure.string/lower-case))))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 70, "code": "(fn [s]\n  (->> (re-seq #\"[a-zA-Z]+\" s)\n       (sort-by clojure.string/lower-case)))", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 70, "code": "(fn alpha [coll]\n  (->> (seq (char-array coll))\n        (filter #(or\n                   (<= 65 (int %) 90) ;[A-Z]\n                   (<= 97 (int %) 122);[a-z]\n                   (= \\space %)));space\n        (partition-by #(= \\space %))\n        (sort-by #(clojure.string/lower-case  %))\n        (filter #(not= (first %) \\space))\n        (map #(apply str %))))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 70, "code": "(fn f70 [s] (sort #(compare (clojure.string/lower-case %1 ) (clojure.string/lower-case %2)) (clojure.string/split s #\"\\W\")))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 70, "code": "#(->> %\n     (drop-last )\n     (apply str)\n     ((fn [x] (clojure.string/split x  #\" \")))\n     (sort-by clojure.string/lower-case))", "user": "593910eae4b02506e01a29f4"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" %))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 70, "code": "(fn spl-sort [s] \n  (sort-by clojure.string/lower-case (clojure.string/split s #\"\\s|[\\.!]\")))", "user": "5972fcf6e4b01722bebd4c92"}, {"problem": 70, "code": "(fn solution70\n  [s]\n  (let [v (vec (clojure.string/split s #\" |\\!|\\.\"))]\n    (sort (fn [x y] (compare (clojure.string/lower-case x)\n                             (clojure.string/lower-case y))) v)))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 70, "code": "(fn [a]\n\t(->>\n\t\t(clojure.string/split a #\" |[.!?]\")\n\t\t(sort-by #(clojure.string/lower-case %)  )))", "user": "5935151ee4b072a2710fd084"}, {"problem": 70, "code": "(fn [x]\n  (sort-by\n    clojure.string/lower-case\n    (remove #{\" \"}\n      (map\n        #(apply str %)\n        (partition-by\n          #{\\space}\n          (filter\n            #(re-matches #\"[A-Za-z ]\" (str %))\n            x))))))\n\n;#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))\n\n;my modification:\n;(fn [x] (sort-by clojure.string/lower-case  (re-seq #\"\\w+\" x)))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "4fb1d7ace4b081705acca281"}, {"problem": 70, "code": "(fn [s](sort-by str #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 70, "code": "(fn sortWord [word] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" word)))", "user": "58866b4fe4b0f1effa3b76d4"}, {"problem": 70, "code": "(comp #(sort-by (fn[s] (clojure.string/lower-case s)) %) #(clojure.string/split % #\"\\s\") #(clojure.string/replace % #\"\\p{Punct}\" \"\"))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 70, "code": "(fn uredi2 [stavk]\n  (let [pm (-> stavk\n               (clojure.string/replace #\"[!.]$\" \"\")\n               .toLowerCase\n               (.split \" \"))\n        vm (.split (clojure.string/replace stavk #\"[!.]\" \"\") \" \")]\n    (map second (sort-by first (zipmap pm vm)))))", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 70, "code": "(fn [s]\n  (->> s\n       (re-seq #\"\\w+\")\n       (sort-by #(.toLowerCase %))\n       ))", "user": "594263cbe4b060784b3b790a"}, {"problem": 70, "code": "(fn [s]\n    (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n       (-> s\n          (.replaceAll \"\\\\.\" \"\")\n          (.replaceAll \"!\" \"\")\n          (.split \" \"))))", "user": "5708e8f6e4b0b0fb43fd06a4"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case compare (clojure.string/split % #\"(\\s+)|(\\.)|(\\!)\"))", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 70, "code": "(fn [x] \n  (sort-by #(clojure.string/lower-case %)\n   (clojure.string/split \n    (clojure.string/replace x #\"!|\\.\" \"\") \n    #\" \")))", "user": "590b8607e4b047aa04b199db"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 70, "code": "(fn [x] \n  (let [new (re-seq #\"\\w+\" x)]\n    (sort-by #(clojure.string/lower-case %) new)))", "user": "593744abe4b02506e01a299b"}, {"problem": 70, "code": "(fn [sss] (sort  #(compare (clojure.string/upper-case %1)  (clojure.string/upper-case %2) ) (.split (.replace (.replace sss \".\" \"\"  ) \"!\" \"\" )   \" \")))", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 70, "code": "(fn sk-words-sort [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (-> s (clojure.string/replace #\"[,|.|?|!]\" \"\") (clojure.string/split #\" \"))))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 70, "code": "(fn [s]\n  (sort\n    #(compare\n      (.toUpperCase %1)\n      (.toUpperCase %2))\n    (re-seq #\"\\w+\" s)))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 70, "code": "(comp (partial sort-by clojure.string/upper-case) (partial re-seq #\"\\w+\"))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 70, "code": "(fn ws [s]\n  (sort-by (fn [k] (clojure.string/lower-case k))\n           (-> s\n               (clojure.string/replace #\"[^a-zA-Z ]\" \"\")\n               (clojure.string/split #\" \"))))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 70, "code": "(fn sort-abc [s]\n  (->> s\n       (re-seq #\"\\w+\")\n       (map #(list (.toLowerCase %) %))\n       (sort-by first)\n       (map second)))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "59a24c92e4b066c664927d20"}, {"problem": 70, "code": "(fn [string]\n  (sort\n   #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n   (map #(clojure.string/replace % #\"[,./<>?;':\\\"~!@#$%^&*()_+-=\\|]\" \"\")\n        (clojure.string/split string #\" \")\n        \n        )))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 70, "code": "(fn [s]\n  (->>\n    (re-seq #\"\\w+\" s)\n    (sort-by clojure.string/lower-case)\n  )\n)", "user": "5162757ee4b03cfa3774b3fe"}, {"problem": 70, "code": "(fn [x]  \n  (let [wp (subs x 0 (dec (count x)))\n        sp (clojure.string/split wp #\" \")\n        l #(clojure.string/lower-case %)]\n      (sort #(compare (l %1) (l %2)) sp)))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 70, "code": "(fn eka\n    [word]\n    (->> word\n         (re-seq #\"[A-Za-z]+\")\n         (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))))\n    )", "user": "596d630ae4b069c0a1a19846"}, {"problem": 70, "code": "(fn word-sort [text]\n  (let [\n        tokenized (clojure.string/split (clojure.string/replace text #\"(\\.)|(\\!)|(\\,)\" \"\") #\" \")\n        ]\n       (vals (into (sorted-map) (for [sentence tokenized] [(apply str (clojure.string/lower-case sentence)) sentence])))\n  )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 70, "code": "(fn [sentence]\n  (let [words (re-seq #\"\\w+\" sentence)]\n    (sort-by clojure.string/lower-case words)\n))", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 70, "code": "(fn [word]\n  (sort String/CASE_INSENSITIVE_ORDER (-> word (.split \"\\\\W\") seq)))", "user": "59a72effe4b066c664927d94"}, {"problem": 70, "code": "#(-> %\n  (clojure.string/split #\"\\s+|[^\\w]+\")\n  ((partial sort-by\n            (fn [w] (.toLowerCase w)))))", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 70, "code": "(fn [s] (sort #(compare (.toUpperCase %1) (.toUpperCase %2)) (clojure.string/split s #\"[ \\.\\!]\")))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 70, "code": "(fn word-sort\n  [string]\n  (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (clojure.string/split (clojure.string/replace string #\"[.?!]\" \"\") #\" \")))", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 70, "code": "(fn[s]\n        (sort\n         #(apply compare (map clojure.string/lower-case [%1 %2]))\n         (map #(clojure.string/replace % #\"[\\.|!]\" \"\")\n              (clojure.string/split s #\" \"))))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 70, "code": "(fn [a-str] \n  (sort String/CASE_INSENSITIVE_ORDER \n        (map \n        \t(fn [s] \n              (apply str \n                     (filter #(Character/isAlphabetic (int %)) s))) \n         \t\t\t \t(clojure.string/split a-str (java.util.regex.Pattern/compile \" \")))))", "user": "594266cfe4b060784b3b790b"}, {"problem": 70, "code": "(fn do-sort\n  [sentence]\n  (sort-by identity #(.compareTo (.toLowerCase %1) (.toLowerCase %2))\n           (map\n             #(clojure.string/replace % #\"[\\W+]$\" \"\")\n             (clojure.string/split sentence #\"\\s\"))))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case compare (clojure.string/split % #\"[^a-zA-Z]\"))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 70, "code": "(fn \n  [s]\n  (-> s \n  (clojure.string/replace #\"[.,!?]\" \"\")\n  (clojure.string/split #\" \")\n  (#(sort-by clojure.string/upper-case %))))", "user": "57c314f3e4b05aa3c4741cba"}, {"problem": 70, "code": "(fn  [s]\n\n  (sort-by #(.toLowerCase %1) (re-seq #\"\\w+\" s)))", "user": "592fa9f8e4b072a2710fcfcb"}, {"problem": 70, "code": "(comp\n (partial sort-by clojure.string/lower-case)\n #(clojure.string/split % #\" \")\n #(clojure.string/replace % #\"[.,!]\" \"\"))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 70, "code": "(fn sortme [sent]\n  (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" sent)))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case  (re-seq #\"[a-zA-Z]+\" s))\n  )", "user": "59cc4d5ee4b0a024fb6ae5d0"}, {"problem": 70, "code": "(fn\n  [s]\n  (sort-by clojure.string/upper-case\n    (for [w\n      (remove #(< (int (first %)) 65)\n        (partition-by #(<= 65 (int %)) s))]\n      (apply str w))))", "user": "59089229e4b047aa04b1997c"}, {"problem": 70, "code": "(fn [s] (let [words (map #(clojure.string/replace % #\"\\W+\" \"\") \n(clojure.string/split s #\"\\s+\")) words-hash (into {} (for [w words] \n[(clojure.string/lower-case w) w]))] (for [sw (sort (keys words-hash))] \n(words-hash sw))))", "user": "59358f74e4b04f87174def52"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 70, "code": "(fn [words] (sort-by clojure.string/lower-case (clojure.string/split words #\"\\W\")))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 70, "code": "(fn -sort [s]\n  (->> (re-seq #\"\\w+\" s)\n       (sort-by clojure.string/lower-case)))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 70, "code": "(fn [in]\n(vec\n(sort-by clojure.string/lower-case\n(clojure.string/split (clojure.string/replace in #\"[^a-zA-Z ]\" \"\") #\" \"))))", "user": "589b98fae4b00487982d533c"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split (clojure.string/replace s #\"[^\\w\\s]\" \"\") #\" \")))", "user": "59ddae03e4b01968742fed65"}, {"problem": 70, "code": "#(->> %\n      (re-seq #\"\\w+\")\n      (sort-by clojure.string/upper-case))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq  #\"\\w+\" s)))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 70, "code": "#(sort-by (fn [x] (-> x .toLowerCase)) (re-seq #\"[^_\\W]+\" %))", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 70, "code": "(fn [ws]\n  (let [\n        strip-punc #(re-find #\"\\w+\" %)\n        words (map strip-punc (clojure.string/split ws #\"\\s+\" ))\n        clean #(-> % (strip-punc) (clojure.string/lower-case))\n        cmp (fn [x y] (let [lx (clean x)\n                            ly (clean y)]\n                        (compare lx ly)))\n        sorted (sort cmp words)\n         ]\n    sorted\n  ))", "user": "57ed8315e4b0bfb2137f5b9a"}, {"problem": 70, "code": "(fn f [s]\n  (sort-by \n    clojure.string/lower-case\n    (clojure.string/split s #\"\\W\")))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 70, "code": "#(sort-by \n\t(fn [d]\n\t\t(.toLowerCase d))\n\t(re-seq #\"[A-Za-z]+\" %))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"\\w+\" s)))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 70, "code": "(fn split-sort [s]\n  (sort-by clojure.string/lower-case (clojure.string/split s #\"[^a-zA-Z]+\")))", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 70, "code": "#(sort (fn[a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b))) \n  (clojure.string/split (clojure.string/replace % #\"[.!]\" \"\") #\" \"))", "user": "571172ece4b09c608db70446"}, {"problem": 70, "code": "(fn [s]\n    (sort\n     (fn [a b]\n       (clojure.core/compare\n        (clojure.string/lower-case a)\n        (clojure.string/lower-case b)))\n     (map (fn [s] (apply str (filter #(Character/isLetter %) s))) (clojure.string/split s #\" \"))))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 70, "code": "(fn [ str1 ]\n   (sort-by clojure.string/lower-case\n            (clojure.string/split (clojure.string/join (concat (re-seq #\"[a-zA-Z\\ ]\" str1))) #\" \")))", "user": "59f90e6ae4b0ca45a743a337"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1)\n  \t              (clojure.string/lower-case %2))\n    \t  (clojure.string/split s #\" |\\.|!\")))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 70, "code": "(fn __ [s] \n  (sort #(compare (clojure.string/lower-case %1) \n                  (clojure.string/lower-case %2)) \n        (clojure.string/split s #\"\\W+\")))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 70, "code": "(fn [sent]\n  (->> sent\n    (re-seq #\"\\w+\")\n    (sort-by clojure.string/lower-case)))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (map #(apply str (re-seq #\"[A-Za-z]\" %1)) (clojure.string/split s #\" \"))))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (.toUpperCase %1)\n                  (.toUpperCase %2)) \n        (re-seq #\"\\w+\" s)))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "59a080e3e4b0871e7608b837"}, {"problem": 70, "code": "(fn word-sort [string]\n  (sort (fn [a b]\n          (loop [a-chars (seq (char-array (clojure.string/lower-case a)))\n                 b-chars (seq (char-array (clojure.string/lower-case b)))\n                 ret nil]\n            (cond\n              (not (nil? ret)) ret\n              (and (empty? a-chars)\n                   (empty? b-chars))\n              0\n              (empty? a-chars) 1\n              (empty? b-chars) -1\n              :else\n              (recur (rest a-chars)\n                     (rest b-chars)\n                     (let [a-code (int (first a-chars))\n                           b-code (int (first b-chars))]\n                       (cond\n                         (> a-code b-code) 1\n                         (< a-code b-code) -1\n                         :else nil))))))\n        (-> string\n          (clojure.string/replace #\"[^a-zA-Z ]\" \"\")\n          (clojure.string/split #\" \"))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5a0b9fc0e4b04bbd27e6d992"}, {"problem": 70, "code": "(fn [st]\n  (sort-by\n   clojure.string/lower-case\n   (re-seq #\"\\w+\" st)))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 70, "code": "(fn sortstr [s]\n\n\n  (let [words (map #(clojure.string/replace % #\"\\W\" \"\")  \n                   (clojure.string/split s #\" \") ) ]\n    (sort-by (fn [s2] (.toLowerCase s2)) words)\n)\n)", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case \n    (re-seq #\"\\w+\" s)))", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 70, "code": "#(sort-by (memfn toLowerCase) \n          (.split % \"[.! ]\"))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 70, "code": "(fn ([s]\n\t(map (fn [s] \n    \t(re-find #\"\\w*\" s)) (sort-by clojure.string/upper-case (clojure.string/split s #\" \")))))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 70, "code": "(fn [s]\n    (sort\n      #(compare (.toLowerCase %1) (.toLowerCase %2))\n      (re-seq #\"\\w+\" s)))", "user": "56bfd8ade4b060a8e693e3a2"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %)\n      (sort-by (fn [a] (.toLowerCase a))))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 70, "code": "(fn [s]\n   (sort (fn [l r] (.compareToIgnoreCase l r)) (map (fn [s] (clojure.string/replace s #\"[^a-zA-Z]\" \"\")) (clojure.string/split s #\" \"))))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 70, "code": "(fn [xs] (sort-by clojure.string/upper-case (clojure.string/split xs #\"\\.| |!\")))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 70, "code": "(fn __ [x]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n    (-> x\n      (clojure.string/replace #\"[^\\w]+\" \" \")\n      (clojure.string/split #\" \"))))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 70, "code": "#(->> (clojure.string/split % #\" \") \n     (map (comp clojure.string/join (partial re-seq #\"[a-zA-Z]\"))) \n     (sort-by clojure.string/lower-case))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %) (sort-by clojure.string/lower-case))", "user": "4dc78527535d8a4b2fd7428f"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"[a-zA-Z]+\" %))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 70, "code": "(fn [s] \n   (sort-by clojure.string/upper-case (clojure.string/split s #\"\\W\")))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 70, "code": "(fn [s]\n    (let [words (clojure.string/split s #\"\\s+\")\n          lower_case_words (map (fn [x] (clojure.string/lower-case x)) words)\n          map_fn (fn [w] (apply str (filter (fn [c] (Character/isLetter c)) w)))\n          filtered_words (map map_fn words)\n          filtered_lower_case_words (map map_fn lower_case_words)\n          m (zipmap filtered_lower_case_words filtered_words)\n          sorted_filtered_lower_case_words (sort filtered_lower_case_words)]\n         (map (partial get m) sorted_filtered_lower_case_words)))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 70, "code": "(fn [words]\n  (let\n      [punctuation #{\\, \\. \\!}\n       split-words (fn [ws] (vec (.split ws \" \")))\n       compare-lower (fn [x y] \n                       (compare \n                        (.toLowerCase x) (.toLowerCase y)))]\n    (->>\n     words \n     (filter #(not (punctuation %)))\n     (apply str)\n     split-words\n     (sort compare-lower))))", "user": "59f7f55de4b0ca45a743a313"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split (clojure.string/replace % #\"[.,!]\" \"\") #\"\\s\"))", "user": "59fa5773e4b0ca45a743a35e"}, {"problem": 70, "code": "(fn[s]\n(->> (clojure.string/split s #\" \")\n   (map #(clojure.string/replace % #\"[^a-zA-Z]\" \"\"))  \n(sort-by clojure.string/lower-case)))", "user": "52faf67ce4b047fd55837005"}, {"problem": 70, "code": "#(sort (fn [^String s1 ^String s2] (< (.compareTo (.toLowerCase s1) (.toLowerCase s2)) 0)) (clojure.string/split (clojure.string/replace % #\"[!,.]\" \"\") #\"\\s\"))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/capitalize %) (filter #(comp not empty? %) (clojure.string/split s #\"\\W\"))))", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 70, "code": "#(sort-by (fn [x]\n            (.toLowerCase x))\n          (re-seq #\"\\w+\" %))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 70, "code": "(fn sort-string\n  [s]\n  (-> s\n      (subs 0 (dec (count s)))\n      (clojure.string/split #\" \")\n      ((partial sort-by clojure.string/lower-case))))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 70, "code": "#(->> (clojure.string/split\n       (apply str (filter (fn [c] (not (contains? (into #{} \"/.,^:!...\") c))) %))\n       #\"\\s+\")\n     (sort-by clojure.string/lower-case))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/upper-case (-> x                                                                                                                                \n                                              (clojure.string/split #\"\")                                                                                                          \n                                              butlast                                                                                                                             \n                                              clojure.string/join                                                                                                                 \n                                              (clojure.string/split #\" \"))))", "user": "5410499de4b01498b1a719a6"}, {"problem": 70, "code": "(fn [x]\n(sort-by #(clojure.string/lower-case %) (clojure.string/split (apply str(re-seq #\"[A-Z a-z]\" x)) #\" \"))\n)", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 70, "code": "(fn word-sort [str-in]\n  (sort-by\n   clojure.string/upper-case\n   (re-seq #\"[a-zA-Z]+\" str-in)))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 70, "code": "(fn word-sort [s]\n  (vec (sort-by clojure.string/lower-case\n                (clojure.string/split\n                  (clojure.string/replace s #\"[.|!]\" \"\") #\"\\s+\"))))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 70, "code": "(fn [a-str]\n    (let [filt-set #{\\space \\. \\!}]\n      (->> (seq a-str)\n           (partition-by filt-set)\n           (map #(apply str %))\n           (remove (set (map str filt-set)))\n           (sort-by (fn [^String x]\n                      (.toLowerCase x))))))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 70, "code": "(fn [str]\n   (map second\n     (sort-by first\n       (map (fn [x] [(.toUpperCase x) x])\n        (re-seq #\"\\w+\" str)))))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[ \\.\\!]\"))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 70, "code": "(fn wsort [s]\n    (vals (into {} (sort (map #(vector (.toLowerCase %) %) (re-seq #\"\\b\\w+\" s))))))", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 70, "code": "(fn [xs]\n    (let [ys (#(clojure.string/split (subs % 0 (dec (.length %))) #\" \") xs)]\n\t(let [ks (map #(keyword (clojure.string/lower-case %)) ys ) hm (zipmap ks ys)]\n           (map #(get hm %)  (sort ks) )\n\t)\n    )\n  )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 70, "code": "(fn word-sorting [S]\n  (let [stringlist (clojure.string/split S #\"\\W\")]\n    (sort\n     #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n     (filter #(not (empty? %)) stringlist))))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "user": "527ba29de4b03e8d9a4a7594"}, {"problem": 70, "code": "(fn [s]\n    (let [s (clojure.string/replace s #\"[^A-Za-z ]\" \"\")\n          lc clojure.string/lower-case\n          unsorted-v (into [] (clojure.string/split s #\" \"))\n          sorted-v (into [] (sort compare (clojure.string/split (lc s) #\" \")))\n          find-str (fn [s v] (some #(if (= (lc %) (lc s)) % false) v))]\n      (map #(find-str % unsorted-v)\n           sorted-v)))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/upper-case (clojure.string/split s #\"\\W\")))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 70, "code": "(fn [s] \n  (sort\n   #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2))\n   (map\n    #(apply str (filter (fn [x] (or (= \\space x) (Character/isLetter x))) %))\n    (clojure.string/split s #\"\\s\"))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 70, "code": "(fn [sentence]\n  (sort-by #(clojure.string/lower-case %)\n           (re-seq #\"\\w+\" sentence)))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 70, "code": "(fn wsort [s]\n  (sort\n   #(compare\n     (clojure.string/lower-case %1)\n     (clojure.string/lower-case %2))\n   (map\n    #(clojure.string/replace % #\"\\W\" \"\")\n    (clojure.string/split s #\" \"))))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case\n          (re-seq #\"[a-zA-Z]+\" %))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "50ef77a4e4b0bdaecbb47d99"}, {"problem": 70, "code": "(fn [x]\n  (sort \n   #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n   (clojure.string/split \n    (apply str (drop-last x))\n    #\" \")))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 70, "code": "(fn\n  [x]\n  (concat (sort-by\n            #(and (second % ) first (clojure.string/lower-case %))\n            (.split (apply str (drop-last x)) \" \"))))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 70, "code": "(fn ss\n  [s]\n  (->> s\n       (re-seq #\"\\w+\")\n       (sort (fn [s1 s2]\n               (compare (clojure.string/lower-case s1)\n                        (clojure.string/lower-case s2))))))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W+\"))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 70, "code": "(fn [arg]\n  (sort-by clojure.string/upper-case\n   (map (fn [y] (apply str (filter (fn [x] (Character/isLetter x)) y))) (#(clojure.string/split % #\" \") arg))))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 70, "code": "(fn [s](sort-by clojure.string/lower-case (clojure.string/split (re-find (re-matcher #\"[[a-zA-Z]+ \\s*]+\" s)) #\" \")))", "user": "560331dee4b04bb52996e1b5"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W+\")))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 70, "code": "(fn [sent]\n                 (let [words (map (partial apply str) (filter #(Character/isLetter (first %)) (partition-by #(Character/isLetter %) sent)))]\n                   (sort-by #(.toLowerCase %) words)))", "user": "5a813b90e4b00b71e582a065"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (clojure.string/split s #\"[\\s.,!:;]+\")))", "user": "4ed68752535d10e5ff6f52e2"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case \n          (clojure.string/split \n           (clojure.string/replace % #\"[.!]\" \"\") #\"\\s+\"))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 70, "code": "(fn [eng-str]\n   (let [non-punctuated (clojure.string/split (clojure.string/replace eng-str #\"\\.|\\!\" \"\") #\" \")]\n     (sort-by #(.toLowerCase %) non-punctuated)))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace s #\"[^a-zA-Z ]\" \"\") #\" \")))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5a34de78e4b0ddc586f153d0"}, {"problem": 70, "code": "(fn [s]\r\n  (-> s\r\n    (clojure.string/replace #\"[\\.!,;]\" \"\")\r\n    (clojure.string/split #\" \")\r\n    ((fn [x] \r\n       (sort \r\n           #(compare \r\n              (clojure.string/lower-case %1)\r\n              (clojure.string/lower-case %2)) x)))))", "user": "580e7761e4b0849f6811b753"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (clojure.string/split s #\"\\W+\")))", "user": "4ed45563535d10e5ff6f52c9"}, {"problem": 70, "code": "(fn [s]\n  (-> s\n      (clojure.string/split #\"\\W\")\n      (#(sort-by clojure.string/lower-case %))))", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 70, "code": "(fn word-sorting [x]\n  (let [alphanumeric (clojure.string/replace x #\"[^a-zA-Z\\s]\" \"\")\n        split (clojure.string/split alphanumeric #\"\\s+\")]\n    (sort #(compare (clojure.string/upper-case %) (clojure.string/upper-case %2)) split)))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 70, "code": "(fn [string]\n  (->> (filter (fn [chara] (or (= \\space chara) (Character/isLetter chara))) string)\n       (partition-by #(= % \\space))\n       (filter #((complement =) % '(\\space)))\n       (map #(apply str %))\n       (sort (fn [x y] (compare (.toLowerCase x) (.toLowerCase y))))))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 70, "code": "(fn word-sort [s]\n  (let [punctuation-removed (clojure.string/replace s #\"[\\.,!?;:]\" \"\")\n        words (clojure.string/split punctuation-removed #\" \")]\n    (sort String/CASE_INSENSITIVE_ORDER words)))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 70, "code": "(fn my-prob-70-word-sorting [str]\n  (sort-by clojure.string/lower-case (java.text.Collator/getInstance) (clojure.string/split str #\"\\s|[.:!?-]\")))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 70, "code": "(fn [sentence]\n  (->> sentence\n       (re-seq #\"\\b\\w+\\b\")\n       (sort-by clojure.string/lower-case)))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[^a-zA-Z]+\"))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 70, "code": "#(sort\n    (fn [s1 s2] (compare (clojure.string/lower-case s1) (clojure.string/lower-case s2)))\n    (clojure.string/split \n       (clojure.string/replace \n         % \n         #\"[\\.!]\" \n         \"\") \n       #\" \"))", "user": "5aa0a3e4e4b0d174b936c82f"}, {"problem": 70, "code": "(fn __ [s]\n  (let [sl (clojure.string/split (clojure.string/replace s #\"[.!,]\" \"\") #\"\\s+\")\n        sicmp (fn [a b]\n                (let [la (clojure.string/lower-case a)\n                      lb (clojure.string/lower-case b)]\n                  (compare la lb)))]\n    (sort sicmp sl))\n  )", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 70, "code": "(fn [string]\n  (let [filtered-words (apply str\n                              (filter (fn [x] (or (Character/isSpace x) (Character/isLetter x)))\n                                      string))\n        words (clojure.string/split filtered-words #\" \")]\n    (sort-by (fn [x] (clojure.string/lower-case x)) words)))", "user": "575683aee4b02ea1147992dc"}, {"problem": 70, "code": "(fn wsort [s]\n  (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (clojure.string/split (apply str (filter #(not ((set \".!\") %)) s)) #\" \")))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n  (re-seq #\"\\w+\" s)))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 70, "code": "(fn sort-words [string]\n  (->> (.split (.replaceAll string \"[.,!?]\" \"\") \"\\\\s\")\n       (sort #(.compareToIgnoreCase %1 %2))\n       )\n  )", "user": "5aada061e4b073f17744257a"}, {"problem": 70, "code": "(fn [str-me]\n   (let [non-punctuated (re-seq #\"\\w+\" str-me)]\n     (sort-by #(.toLowerCase %) non-punctuated)\n   ))", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (filter #(not= \" \" %) (re-seq #\"\\w+\" s))))", "user": "5ab5f60be4b073f177442643"}, {"problem": 70, "code": "(fn sort-words [sentence]\n  (sort-by clojure.string/lower-case (filter not-empty (clojure.string/split sentence #\"[!.,\\s]+\"))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 70, "code": "(fn\n  [coll]\n  (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" coll)))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (set (re-seq #\"[a-zA-Z0-9|']+\" %)))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "4ee897fe535d93acb0a66883"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case \n           (clojure.string/split (apply str (re-seq #\"[a-zA-Z ]\" s)) #\"\\s+\")))", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 70, "code": "(fn [s]\n  (sort-by\n    clojure.string/lower-case\n    (re-seq #\"[a-zA-Z]+\" s)))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 70, "code": "(fn [s]\n    (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" s)))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 70, "code": "(fn split-word-and-sort [x]\n    (sort-by clojure.string/lower-case (re-seq #\"\\w+\" x))\n    )", "user": "5ac74b34e4b0e27600da777f"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case  (clojure.string/split (clojure.string/replace % #\"((?![(a-zA-Z)|( )]).)\" \"\") #\" \"))", "user": "5a59a76fe4b05d388ecb6c98"}, {"problem": 70, "code": "(fn [s] (sort (fn [s1 s2] (compare (clojure.string/lower-case s1) (clojure.string/lower-case s2))) (filter not-empty (clojure.string/split s #\"\\W\"))))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 70, "code": "(fn [sentence]\n  (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" sentence)))", "user": "58a32c21e4b02bd94d917eeb"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 70, "code": "(fn [str]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n        (map #(clojure.string/replace % #\"[^a-zA-Z]\" \"\") (clojure.string/split str #\" \"))))", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 70, "code": "(fn [x]\n  (let [words (re-seq #\"\\w+\" x)\n        lowered-words (map #(clojure.string/lower-case %) words)\n        word-map (zipmap lowered-words words)]\n    (map word-map (sort lowered-words))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 70, "code": "(fn [x] (into [] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split (clojure.string/replace (clojure.string/replace x #\"\\.\" \"\") \"!\" \"\") #\" \"))))", "user": "574b4f3ee4b02ea114799207"}, {"problem": 70, "code": "(fn [x] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n              (clojure.string/split (apply str (remove #((set \".!?\") %) x)) #\" \")))", "user": "5acd1a43e4b0e27600da7823"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 70, "code": "#(sort-by \n      (fn [x] (.toLowerCase x))\n      (re-seq #\"\\w+\" %))", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 70, "code": "(fn __\n  [string]\n  (sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" string)))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 70, "code": "(fn [input]\n  (->> input\n      (re-seq #\"\\w+\")\n      (sort-by clojure.string/upper-case)))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case  \n          (clojure.string/split % #\"[!. ]+\"))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toUpperCase %)\n        (re-seq #\"\\w+\" s)))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (re-seq #\"\\w+\" s)))", "user": "57086931e4b0b0fb43fd069e"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case\n          (clojure.string/split % #\"\\W\"))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 70, "code": "#(->> %\n  (re-seq #\"\\w+\")\n  (sort-by clojure.string/lower-case))", "user": "5aea2d21e4b0cc2b61a3bbe2"}, {"problem": 70, "code": "(fn [s]\n   (-> s\n       (clojure.string/replace #\"[^a-zA-Z0-9\\ ]\" \"\")\n       (clojure.string/split #\" \")\n       (#(sort-by clojure.string/lower-case %))))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 70, "code": "#(->> %\n      (re-seq #\"\\w+\")\n      (sort-by clojure.string/lower-case))", "user": "55e732c5e4b050e68259b492"}, {"problem": 70, "code": "(fn wordsorting\n  [kalimat]\n  (->> kalimat (re-seq #\"\\w+\") (sort-by clojure.string/lower-case)))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 70, "code": "(fn sort-words [col]\n  (sort-by clojure.string/upper-case (map (fn [word] (apply str (filter #(Character/isLetter %) word))) (clojure.string/split col #\" \" ))))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 70, "code": "(fn ws [s]\n  (->> (re-seq #\"\\w+\" s)\n       (sort-by clojure.string/lower-case)))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 70, "code": "(fn [string]\n    (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n          (clojure.string/split\n           (apply str (remove #(or (= % \\.)\n                                   (= % \\!)) string)) #\" \")))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 70, "code": "#(sort-by \n clojure.string/lower-case \n (clojure.string/split % #\"[\\W]+\"))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %1))", "user": "57d418b4e4b0bd073c20239a"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[.! ]\" ))", "user": "583048d9e4b051871117c007"}, {"problem": 70, "code": "(fn sort-words [w]\n  (->>\n    (re-seq #\"\\w+\" w)\n    (sort-by clojure.string/lower-case)))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 70, "code": "(fn [s] \n  (sort \n   #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n   (clojure.string/split s #\"[^a-zA-Z]\")))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 70, "code": "(fn split-sort [s]\n  (-> s\n      (clojure.string/replace #\"(\\.|\\?|!|:|;)\" \"\")\n      (clojure.string/split #\"\\s+\")\n      (->>\n        (sort\n          #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))))))", "user": "5b13ba71e4b0cc2b61a3be53"}, {"problem": 70, "code": "(fn [s]\n  (sort #(.compareToIgnoreCase %1 %2)\n        (-> s\n            (clojure.string/replace #\"\\p{Punct}\" \"\")\n            (clojure.string/split #\" \"))))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\"[!.\\s]\"))", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 70, "code": "(fn sortz [sent]\n  (let [lexo (fn [a b]\n                (let [m (.toLowerCase a)\n                      n (.toLowerCase b)\n                      vals (map #(- (int %1) (int %2)) m n)]\n                    (reduce #(if-not (= %1 0) %1 (+ %1 %2)) vals)))]\n    (sort lexo (.split (apply str (re-seq #\"\\w|\\s\" sent)) \" \"))))", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 70, "code": "(fn ws[sentance]\n  (sort #(compare (clojure.string/lower-case %1)\n                  (clojure.string/lower-case %2))\n        (re-seq #\"\\w+\" sentance)))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 70, "code": "(fn [s]\n  (->>\n    (re-seq #\"\\w+\" s)\n    (sort-by clojure.string/lower-case)\n    )\n  )", "user": "5b118b7be4b0cc2b61a3be34"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" x)))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 70, "code": "(fn [s]\n   (sort-by str #(.compareToIgnoreCase %1 %2) (clojure.string/split s #\"[^a-zA-Z0-9]\")))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/lower-case (clojure.string/split x #\"[\\. !]\")))", "user": "5addadfce4b0837691e92c13"}, {"problem": 70, "code": "(fn word-sorting [s]\n  (let [words (-> (clojure.string/replace s #\"[.!]\" \"\")\n                  (clojure.string/split #\" \"))]\n    (sort #(compare (clojure.string/lower-case %1)\n                    (clojure.string/lower-case %2))\n          words)))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 70, "code": "(fn [s]\n  (sort java.lang.String/CASE_INSENSITIVE_ORDER\n        (map #(apply str (filter (fn [char] (Character/isLetter char)) %))\n             (clojure.string/split s #\" \"))))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 70, "code": "#(->> \n(re-seq  #\"\\w+\" %)\n(sort-by \n  (fn [word]\n    (->> word\n      (map (fn [x] \n\t\t        (if\t (> (int x) 90)\n\t\t\t\t     (- (int x) 32)\n\t  \t\t\t     (int x))))\n      (map char)\n      (apply str)\n    ))))", "user": "5b4b58f2e4b02d533a91bc9c"}, {"problem": 70, "code": "#(sort-by (fn [v] (.toLowerCase v)) (re-seq #\"\\w+\" %))", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace s #\"[^a-zA-Z ]\" \"\") #\" +\")))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 70, "code": "(fn [phrase] (sort-by #(.toLowerCase %) (re-seq #\"[a-zA-Z]+\" phrase)))", "user": "5b552117e4b02d533a91bd2c"}, {"problem": 70, "code": "(fn sort-words [string]\n  (let [words (clojure.string/split\n                (clojure.string/replace string #\"[.,;!]\" \"\")\n                #\"\\s+\")]\n    (sort-by #(.toLowerCase %) words)))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 70, "code": "(fn ws [s]\n  (->> s\n  (re-seq #\"\\w+\")\n  (sort-by clojure.string/lower-case)\n  ))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace s #\"[.?,!;]\" \"\") #\"\\s+\")))", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split (apply str (re-seq #\"[a-zA-Z0-9 ]\" %)) #\" \"))", "user": "5b4dfd5de4b02d533a91bcc3"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5afa9de0e4b0cc2b61a3bcf1"}, {"problem": 70, "code": "(fn [s]\n  (let [inrange (fn [ch lo hi]\n                  (let [i (int ch) il (int lo) ih (int hi)]\n                    (if (and (>= i il) (<= i ih))\n                      (- (inc i) il) 0)))\n        letter #(+ (inrange % \\a \\z) (inrange % \\A \\Z))\n        words (map\n               (fn [word] (filter #(> (letter %) 0) (vec word)))\n               (.split s \" \"))\n        cmp (fn cmp [x y]\n              (let [f1 (first x) f2 (first y)]\n                (if (and f1 f2)\n                  (let [l1 (letter f1) l2 (letter f2)]\n                    (if (= l1 l2)\n                      (cmp (rest x) (rest y))\n                      (- l1 l2)))\n                  (if (or f1 f2)\n                    (if f1 1 -1)\n                    0))))]\n    (map #(apply str %) (sort cmp words))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 70, "code": "(fn [str]\n    (sort \n     #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) \n     (clojure.string/split str #\"[^a-zA-Z]\")))", "user": "5ab1665de4b073f1774425c0"}, {"problem": 70, "code": "(fn sort-words [st]\n  (let [strip (fn [coll chars] (apply str (remove #((set chars) %) coll)))]\n    (sort\n     (fn [x y] (compare (clojure.string/lower-case x) (clojure.string/lower-case y)))\n     (map\n      (fn [x] (strip x \".,!?;:`~\"))\n      (clojure.string/split st #\" \")\n      )\n     )\n    )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" s)))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 70, "code": "#(->> %\n  (re-seq #\"\\w+\")\n  (sort-by clojure.string/lower-case))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[^A-z]\"))", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 70, "code": "(fn ws [s]\n  (let [punct (set \".?!,:;\")]\n    (sort\n        #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n        (clojure.string/split\n        (apply str (filter #(not (contains? punct %1)) s))\n        #\" \"))))", "user": "5779556de4b0979f8965166e"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 70, "code": "#(->> %\n      (re-seq #\"\\w+\")\n      (sort-by clojure.string/lower-case))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 70, "code": "(fn [string] \n  (let [coll (clojure.string/split (clojure.string/lower-case (clojure.string/replace (clojure.string/replace string \".\" \"\") \"!\" \"\"))#\" \") firstWord (first coll)]\n    (map #(if (= % firstWord) (clojure.string/capitalize %) %) (sort coll))\n  )\n)", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 70, "code": "(fn[a](sort-by #(.toLowerCase %) (.split (.replaceAll a \"[^a-zA-Z\\\\s]\" \"\") \" \")))", "user": "5826a843e4b051871117befd"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 70, "code": "(fn [sentence]\n    (sort-by #(clojure.string/lower-case %)\n             (-> (clojure.string/replace sentence #\"[!.]\" \"\")\n                 (clojure.string/split #\" \"))))", "user": "5777cffae4b0979f89651651"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 70, "code": "(fn  [text] (->> (clojure.string/split text #\"\\W\")\n                 (sort-by  clojure.string/lower-case ,,,)                          \n                 ))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toUpperCase %) (re-seq #\"\\w+\" s)))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "5b97c521e4b0c0b3ffbd4a9a"}, {"problem": 70, "code": "#(-> %\n     (clojure.string/replace #\"[\\.,!?;]\" \"\")\n     (clojure.string/split #\" \")\n     ((partial sort-by clojure.string/lower-case)))", "user": "5b3ef412e4b02d533a91bc06"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %)\n      (sort-by clojure.string/lower-case))", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 70, "code": "(fn [sentence]\n    (sort\n      #(compare (.toUpperCase %) (.toUpperCase %2))\n       (clojure.string/split sentence #\"[ \\t,.!]+\")))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 70, "code": "(fn ws [s]\n  (map second (sort (map (juxt clojure.string/lower-case identity) (clojure.string/split (apply str (remove  #{\\! \\.} s)) #\"\\ \")))))", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 70, "code": "(fn word-sorting [string]\n  (let [tokens (-> (clojure.string/replace string #\"\\!|\\.\" \"\")\n                   (clojure.string/split #\" \"))\n        formated-string (reduce (fn [data tokens]\n                                (assoc data (clojure.string/capitalize (str tokens)) tokens))\n                              {} tokens)\n        sorted-string (sort-by first formated-string)]\n    (map second sorted-string)))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 70, "code": "(fn [s]\n    (-> s\n       (clojure.string/replace  #\"[^a-zA-Z\\s]\" \"\")\n       (clojure.string/split #\"\\s\")\n       (#(sort-by clojure.string/lower-case %))\n    )\n  )", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[ .!]\"))", "user": "51000111e4b00d7ad4cab15e"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (map #(clojure.string/replace % #\"[^\\w]\" \"\") (clojure.string/split s #\" \"))))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %)\n      (sort-by clojure.string/lower-case))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 70, "code": "(fn [string] (sort-by #(clojure.string/lower-case %) (clojure.string/split (apply str (filter #(or (Character/isLetterOrDigit %) (Character/isSpace %)) string)) #\" \")))", "user": "59f4c9c8e4b0966464fe6ab8"}, {"problem": 70, "code": "(fn [s]\n  (->> (re-seq #\"\\w+\" s)\n       (sort-by #(.toLowerCase %))\n       vec\n  )\n)", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 70, "code": "(fn [s] (->> (clojure.string/replace s #\"[\\.\\!]\" \"\")\n     (#(clojure.string/split % #\" \"))\n  (sort-by clojure.string/lower-case) \n     ))\n\n;(comp (partial sort-by clojure.string/lower-case)\n;      (partial re-seq #\"\\w+\"))\n\n\n;(fn [s] (->> s\n;      (re-seq #\"\\w+\")\n;      (sort-by clojure.string/lower-case)\n;      ))", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 70, "code": "(fn sort-str [msg]\n  (sort (fn [lhs rhs]\n          (compare (clojure.string/lower-case lhs) (clojure.string/lower-case rhs)))\n        (re-seq #\"\\w+\" msg)))", "user": "59f4c42ce4b0966464fe6ab6"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2)) (re-seq #\"\\w+\" s)))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 70, "code": "(fn sorted-words [sentence]\n  (->> (clojure.string/split sentence #\"[^A-Za-z]+\")\n       (sort-by clojure.string/lower-case)))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n        (re-seq #\"\\p{Alnum}+\" s)))", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 70, "code": "#(->> %\n\t  (re-seq #\"\\w+\")\n      (sort (fn [s1 s2] (< (compare (clojure.string/lower-case s1)\n                                    (clojure.string/lower-case s2))\n                           0))))", "user": "5bc39d2be4b07a9b28b10045"}, {"problem": 70, "code": "(fn [sent]\n  (into [] (let [words (clojure.string/split sent #\"\\s\")]\n             (->>\n               (map #(apply str (filter (fn [x] (Character/isLetter x)) %)) words)\n               (sort-by clojure.string/lower-case)))))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 70, "code": "(fn d [s] (-> s\n                (#(clojure.string/replace % #\"[^a-zA-z\\d\\s:]\" \"\"))\n                (clojure.string/split #\" \")\n                (#(sort-by clojure.string/lower-case %))\n              ))", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 70, "code": "(fn splitsort\n  [ss]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" ss)))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" %))", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 70, "code": "(fn [s]\n  (sort-by\n   #(clojure.string/lower-case %)\n   (-> s\n       (clojure.string/replace #\"[^A-Za-z\\s]\" \"\")\n       (clojure.string/split #\" \"))))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 70, "code": "(fn order-sentence\n  [sentence]\n  (sort-by clojure.string/lower-case\n   (re-seq #\"[A-Za-z]+\" sentence)))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 70, "code": "(fn [lst]\n  (map\n    (fn [p]\n      (last p))\n    (sort \n      (map \n        (fn [w] \n          [(clojure.string/lower-case w) w]\n        )\n        (map \n          (fn [w]\n            (clojure.string/replace w #\"(?i)[^\\w']+\" \"\"))\n          (clojure.string/split lst #\" \"))\n      )\n    )\n  )\n)", "user": "5958a0c8e4b066ee0a44af8c"}, {"problem": 70, "code": "(fn [s]\n  (->> (clojure.string/split s #\" \")\n       (map #(clojure.string/replace % #\"[^A-z]\" \"\"))\n       (sort-by clojure.string/lower-case)))", "user": "543a8256e4b032a45b869327"}, {"problem": 70, "code": "(fn [x]\n  (let [s (re-seq #\"\\w+\" x)\n        ss (map #(.toLowerCase %) s)\n        m (apply assoc {} (interleave ss s))\n        s2 (sort ss)]\n    (map #(m %) s2)))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split %1 #\"\\W\"))", "user": "5b81139fe4b047b03b203782"}, {"problem": 70, "code": "(fn [s]\n  (sort-by \n   clojure.string/lower-case\n   (re-seq #\"\\w+\" s)\n   ))", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %)\n      (sort-by clojure.string/lower-case))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 70, "code": "(fn [s]\n  (-> (clojure.string/replace s #\"\\W\" \" \")\n      (clojure.string/split #\"\\s+\")\n      (#(sort-by clojure.string/lower-case %))))", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5617db88e4b06b1bb2182a16"}, {"problem": 70, "code": "(fn [x]\n  (sort-by clojure.string/lower-case (re-seq #\"\\b[a-zA-Z]+\\b\" x)))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"[A-z]+\" s)))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"[\\s\\.\\!]\")))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 70, "code": "(fn [s]\n    (let [chars     (vec    s)\n          letters   (filter #(or (java.lang.Character/isLetter %)\n                                 (java.lang.Character/isWhitespace %))\n                            s)\n          s_letters (apply  str\n                            letters)]\n      (sort (fn [lft rgt]\n              (compare (.toLowerCase lft)\n                       (.toLowerCase rgt)))\n            (clojure.string/split s_letters #\" \"))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 70, "code": "(fn [xs] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split xs #\"[^A-Za-z]+\")))", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 70, "code": "(comp #(sort (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b))) %)\n       #(clojure.string/split %1 #\"[ .!]\"))", "user": "5beadeb5e4b0f319e2d7ec88"}, {"problem": 70, "code": "(fn [x]\n  (let [clean (clojure.string/replace x #\"[^A-Za-z\\s]\" \"\") vc (clojure.string/split clean #\" \")]\n    (sort-by clojure.string/lower-case vc)\n  )\n)", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 70, "code": "(fn [test] \n   (vec (map #(clojure.string/replace % #\"[.!]\"  \"\") (sort-by #(clojure.string/lower-case  %)   (clojure.string/split  test #\" \")))))", "user": "5bec37e2e4b0f319e2d7ec96"}, {"problem": 70, "code": "(fn word-sorting [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 70, "code": "(fn foo [s] \n (sort-by clojure.string/lower-case \n  (re-seq #\"\\w+\" s)))", "user": "5bba703fe4b0a20761a235eb"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v)) (re-seq #\"\\w+\" %))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 70, "code": "(fn [input]\n   (sort (fn strcmp [s1 s2]\n           (let [lower #(.toLowerCase %)]\n             (compare (lower s1) (lower s2))))\n         (clojure.string/split (#(apply str (re-seq #\"[a-z A-Z]\" %)) input) #\" \")))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 70, "code": "(fn my-sort [sentence]\n  (sort #(compare (. %1 toLowerCase) (. %2 toLowerCase)) (re-seq #\"\\w+\" sentence)))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 70, "code": "(fn [input-string]\n  (->> (clojure.string/split input-string #\" \")\n      (map #(filter (fn [c] (re-matches #\"\\w\" (str c))) %))\n      (map #(clojure.string/join %))\n      (sort-by clojure.string/lower-case))\n  )", "user": "5c05e864e4b0bdcf453d16a5"}, {"problem": 70, "code": "(fn [sentence] \n  (sort\n   (fn [v1 v2] (compare (clojure.string/lower-case v1) (clojure.string/lower-case v2)))\n   (clojure.string/split  sentence #\"[ !\\.]\")))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (re-seq #\"[A-Za-z]+\" s)))", "user": "5b57505ce4b02d533a91bd55"}, {"problem": 70, "code": "(fn my-sort [s] (sort-by #(.toLowerCase %) (re-seq #\"[A-Za-z]+\" s)))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 70, "code": "(fn word-sort\n  [word]\n  (vec (sort-by #(.toUpperCase %) (vec (.split (apply str (drop-last word)) \" \")))))", "user": "5c0466a3e4b0bdcf453d1680"}, {"problem": 70, "code": "(fn [x] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" x)))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 70, "code": "#(->> % (re-seq #\"\\w+\") (sort-by clojure.string/lower-case))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 70, "code": "#(->> % \n      (re-seq #\"\\w+\")\n      (sort-by clojure.string/lower-case))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 70, "code": "#(sort-by (memfn toUpperCase) (re-seq #\"\\w+\" %))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case  (re-seq #\"[a-z,A-Z]+\" %))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 70, "code": "(fn word-sorting\n  [s]\n  (sort-by clojure.string/lower-case\n   (clojure.string/split (clojure.string/replace s #\"[^A-Za-z ]\" \"\") #\" \")))", "user": "5c222b7de4b07e362c230588"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" %1))", "user": "5c20b6abe4b07e362c230576"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 70, "code": "(fn me [input]\n  (->>\n   (clojure.string/split input #\"\\W+\")\n   (sort-by clojure.string/lower-case compare)))", "user": "5c219c0fe4b07e362c230581"}, {"problem": 70, "code": "#(->> (clojure.string/split % #\"[^\\w]\")\n      (sort-by clojure.string/lower-case))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 70, "code": "(fn word-sort\n  [s]\n  (let [maybe-punc (last s)\n        s (if (re-find #\"\\p{Punct}\" (str maybe-punc))\n            (subs s 0 (dec (count s)))\n            s)]\n    (->> (clojure.string/split s #\"\\s+\")\n         (sort (fn [a b]\n                 (compare (clojure.string/lower-case a)\n                          (clojure.string/lower-case b)))))))", "user": "5369d072e4b0243289761ea1"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5c17467fe4b01240ff5671df"}, {"problem": 70, "code": "(fn word-sorting [sentence]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n        (clojure.string/split (clojure.string/replace sentence  #\"[.,!]\" \"\") #\"\\s+\"))\n  )", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 70, "code": "#(sort String/CASE_INSENSITIVE_ORDER (filter (partial not= \" \") (map (partial apply str) (partition-by (partial = \\space) (drop-last %)))))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"[^\\s.!]+\" s)))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 70, "code": "(fn [x] \n  (sort-by \n         (fn [y]\n           (.toLowerCase y))\n   (re-seq #\"\\w+\" x)))", "user": "56f4623ae4b046a417f9205d"}, {"problem": 70, "code": "(fn [x] \n\t(sort-by clojure.string/lower-case\n             (re-seq #\"[A-Za-z]+\" x)))", "user": "5c32ea85e4b0d62ef62d9f3e"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 70, "code": "(fn [sentence]\n  (let [split-string-lowered-case ( ->\n            (clojure.string/replace sentence #\"[\\.|\\!|\\,|\\;|\\:|\\?|\\'|\\\"]\" \"\")\n            (clojure.string/split #\" \")\n            )]\n    (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) split-string-lowered-case)))", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 70, "code": "(fn [x]\n   (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n         (#(clojure.string/split % #\"\\s+\") (#(clojure.string/replace % #\"[^A-Za-z]\" \" \") x))))", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 70, "code": "(comp   #(sort-by clojure.string/lower-case %)   #(clojure.string/split % #\" \" ) \n            #(clojure.string/replace % #\"[!.]\" \"\"))", "user": "5c374db6e4b0d62ef62d9f73"}, {"problem": 70, "code": "(fn [s]\n    (let [uncase-comp (fn [a b]\n                        (compare (clojure.string/upper-case a)\n                                 (clojure.string/upper-case b))) ]\n      (sort uncase-comp\n            (-> s\n                (clojure.string/replace #\"\\.|!\" \"\")\n                (clojure.string/split #\"\\s\")))))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 70, "code": "(fn\n  [text]\n  (sort-by (fn [word] (clojure.string/lower-case word))\n           (re-seq #\"\\w+\" text)))", "user": "5c44f0fde4b0e06e1360a384"}, {"problem": 70, "code": "#(sort-by (fn [w] (clojure.string/lower-case w))\n          (re-seq #\"\\w+\" %))", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 70, "code": "(fn [s]\n  (let [s* (clojure.string/split s #\"[ .!]\")]\n    (sort-by clojure.string/lower-case s*)))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 70, "code": "(fn word-sorting [str]\n  (let [words \n        (-> (clojure.string/replace str #\"[^a-zA-Z\\s]\" \"\")\n            (clojure.string/split #\" \"))\n        lowercase-words->words\n        (reduce\n          (fn [res word]\n            (assoc\n              res\n              (clojure.string/lower-case word)\n              word))\n          {}\n          words)]\n    (->> (sort lowercase-words->words)\n         (map second))))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 70, "code": "#(sort-by (fn [v] (.toUpperCase v)) (re-seq #\"\\w+\" %))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 70, "code": "(fn sort-words [sentence]\n  (->> (clojure.string/split sentence #\" \")\n       (map (fn [word] (apply str (remove #{\\? \\! \\.} word))))\n       (sort-by clojure.string/lower-case)))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 70, "code": "#(->> %\n      (re-seq #\"\\w+\")\n      (sort-by clojure.string/lower-case))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" %))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 70, "code": "(fn [inputStr] \n(sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n(clojure.string/split inputStr #\"\\W\"))\n)", "user": "5c635364e4b0fca0c162265f"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n        (re-seq #\"\\w+\"  s)))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 70, "code": "(fn split-sort [some-string]\n  (sort\n    #(compare (.toLowerCase %1) (.toLowerCase %2))\n    (-> some-string (clojure.string/replace #\"[.!,:-]\" \"\") (clojure.string/split #\"\\s\"))))", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 70, "code": "#(sort (fn [x y] (compare (clojure.string/capitalize x) (clojure.string/capitalize y))) (re-seq #\"\\w+\" %))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 70, "code": "(fn word-sort [sentense]\n  (sort-by clojure.string/lower-case (filterv #(not= % \"\") (re-seq #\"\\w*\" sentense))))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 70, "code": "(fn [s] \n   (sort #(compare \n            (clojure.string/upper-case %1) (clojure.string/upper-case %2)) \n         (re-seq #\"[A-Za-z]+\" s)))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 70, "code": "(fn [mystr]\n        (let [lower (fn [s] (.toLowerCase s))]\n          (sort (fn [x y] (compare (lower x) (lower y))) (re-seq #\"\\w+\" mystr))\n          ))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 70, "code": "#_(fn [s]\n  (vec (sort-by #(count (clojure.string/lower-case %))\n   (clojure.string/split s #\" \"))))\n\n\n\n\n\n\n\n(fn [s]\n  (->> s\n       drop-last\n       (apply str)\n       (#(clojure.string/split % #\" \"))\n       (sort-by #(clojure.string/lower-case %))\n       \n      \n       ))", "user": "58b12635e4b0ebc645576cf4"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %) (re-seq #\"\\b\\w+\\b\" s)))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 70, "code": "(fn [str1]\n   (let [letters (apply  str (re-seq #\"[a-zA-Z ]\" str1))]\n     (println \"letters:\" letters)\n     (sort-by clojure.string/upper-case (clojure.string/split letters #\" \"))))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 70, "code": "(fn[s](sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 70, "code": "(fn [input]\n  (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" input))\n  )", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 70, "code": "(fn [st]\n  (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" st)))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case  (re-seq #\"\\w+\" %))", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 70, "code": "(fn [k] (sort-by #(.toLowerCase %) (re-seq  #\"\\w+\" k)))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 70, "code": "(fn [x] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split (apply str (remove #((set \",;.!\") %) x)) #\" \")))", "user": "5c558070e4b0fb8c5ffd9a1e"}, {"problem": 70, "code": "#(->> (re-seq #\"[A-Z,a-z]+\" %) (sort-by clojure.string/lower-case))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "5be5c08fe4b0ed4b8aab4d17"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (re-seq #\"\\w+\" s)))", "user": "586bc870e4b01531a375e964"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"[!\\.]\" \"\") #\"\\s\"))", "user": "5b100648e4b0cc2b61a3be17"}, {"problem": 70, "code": "(fn [s]\n          (->> s\n               (re-seq #\"[A-Z|a-z]+\")\n               (sort-by (fn [s]\n                          (->> s\n                               (map #(if (<= 65 (int %) 90)\n                                       (char (+ 32 (int %))) %))\n                               (apply str))))))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 70, "code": "(fn [s]\n   (->> (clojure.string/split s #\"\\W+\")\n        (sort-by clojure.string/lower-case)))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 70, "code": "(fn [args] \n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" args)))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 70, "code": "(fn word-sort-case-insensitive\n  [input]\n  (sort-by clojure.string/upper-case (re-seq #\"[A-Za-z]+\" input)))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 70, "code": "(fn [s]\n    (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W\")))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (.toUpperCase %1) (.toUpperCase %2)) (re-seq #\"\\w+\" s)))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 70, "code": "(fn [ss] (sort-by clojure.string/upper-case (re-seq #\"[A-Za-z]+\" ss)))", "user": "543bb568e4b032a45b869334"}, {"problem": 70, "code": "(fn my-fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 70, "code": "(fn f [sen]\n  (sort-by clojure.string/upper-case\n           (clojure.string/split sen #\"\\W+\")))", "user": "5cada3b8e4b026601754b872"}, {"problem": 70, "code": "(fn [xs] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" xs)))", "user": "5cadd6a4e4b026601754b87b"}, {"problem": 70, "code": "(fn sortwords [s]\n  (sort-by #(clojure.string/lower-case %) (clojure.string/split s #\"\\W+\")))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 70, "code": "(fn [input]\n  (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" input)))", "user": "5cb71f35e4b026601754b961"}, {"problem": 70, "code": "(fn word-sort\n  [input]\n  (sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" input))\n  )", "user": "5cbd66e2e4b026601754b9f8"}, {"problem": 70, "code": "(fn [s] \n  (sort-by \n   #(clojure.string/lower-case %) \n   (clojure.string/split (clojure.string/replace s #\"[^\\w\\s]\" \"\") #\" \")))", "user": "4e94a8b5535dbda64a6f6b16"}, {"problem": 70, "code": "#(->> %\n  (re-seq #\"\\w+\")\n  (sort-by clojure.string/lower-case))", "user": "5ca622f3e4b048ec896c5be0"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 70, "code": "#(vec(sort-by clojure.string/upper-case (clojure.string/split % #\"[ .!]\")))", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case\n   (-> %\n     (clojure.string/trim)\n     (clojure.string/split  #\"\\s+|\\.|!\")))", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 70, "code": "#(sort-by (memfn toLowerCase)(re-seq #\"[A-Za-z]+\" %))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 70, "code": "(fn [s] (let [cl (clojure.string/replace s #\"[\\.!]\" \"\")] (sort-by #(.toLowerCase %) (clojure.string/split cl #\" \")) ))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 70, "code": "(fn sort-words [s]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split (apply str (filter #(or (Character/isLetter %)\n                                                         (Character/isWhitespace %))\n                                                    s))\n                                 #\"\\s+\")))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\\\s|[^a-zA-Z0-9]\"))", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 70, "code": "(fn [s]\n  (->> s\n       (reduce (fn [result input]\n                   [[input]]\n                 (cond\n                   (= input \\space) (conj result [])\n                   (or (= input \\.) (= input \\!)) result\n                   :else (conj (vec (butlast result))\n                               (conj (vec (last result)) input)))) [])\n       (map #(apply str %))\n       (sort (fn [x y]\n               (compare (.toUpperCase x) (.toUpperCase y))))))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split % #\"\\W\"))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 70, "code": "(fn [sentence]\n  (let [char-interval (fn [from to]\n                        (map char (range (int from) (inc (int to)))))\n        allowed-chars (-> #{}\n                          (into (char-interval \\a \\z))\n                          (into (char-interval \\A \\Z))\n                          (conj \\space))\n        ->lower-case  (-> {}\n                          (into (zipmap (char-interval \\A \\Z) (char-interval \\a \\z)))\n                          (into (zipmap (char-interval \\a \\z) (char-interval \\a \\z))))]\n    (->> sentence\n        (filter allowed-chars)\n        (partition-by #(= \\space %))\n        (remove #(= \\space (first %)))\n        (map (partial apply str))\n        (sort-by #(apply str (map ->lower-case %))))))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[ !.]\"))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 70, "code": "(fn [s]\n  (sort (fn [raw-x raw-y]\n          (let [x (clojure.string/lower-case raw-x)\n                y (clojure.string/lower-case raw-y)]\n            (compare x y)\n            )) (map #(clojure.string/replace % #\"[^a-zA-Z0-9]\" \"\")\n                    (clojure.string/split s #\" \"))))", "user": "5cdbb1b2e4b05ee0cb311732"}, {"problem": 70, "code": "(fn sortwords [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "5cb4e764e4b026601754b929"}, {"problem": 70, "code": "(fn [senetence]\n  (sort-by clojure.string/lower-case\n           (map (fn [word]\n                  (->> word\n                       (filter #(Character/isLetter %))\n                       clojure.string/join))\n                (clojure.string/split senetence #\" \"))))", "user": "57cf9de8e4b00451144b0503"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" %1))", "user": "5ce44ee2e4b0a17bb84e2b57"}, {"problem": 70, "code": "(fn[s](sort-by clojure.string/upper-case (.split (first (re-seq #\"[A-Z,a-z, ]+\"  s)) \" \")))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 70, "code": "(fn [s]\n      (let [lwr clojure.string/lower-case] \n        (sort\n         #(compare (lwr %1) (lwr %2))\n         (re-seq #\"\\w+\" s))))", "user": "576e607ae4b0979f89651579"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[ .!]\"))", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 70, "code": "#(->> % (re-seq #\"\\w+\") (sort-by clojure.string/lower-case))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n           (re-seq #\"\\w+\" s)))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 70, "code": "#(sort (fn [a b] (< 0 (.compareToIgnoreCase b a)))\n      (map (fn [s] (clojure.string/escape s {\\. \"\" \\! \"\"})) (clojure.string/split % #\" \")))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 70, "code": "(fn [s]\n  (let [no-punc (clojure.string/replace s #\"\\.|\\!\" \"\")\n        lowered (clojure.string/lower-case no-punc)\n        split-lowered (clojure.string/split lowered #\"\\W+\")\n        split-orig    (clojure.string/split no-punc #\"\\W+\")\n        zipped (map #(vec [%1 %2]) split-lowered split-orig)]\n  (map second (sort #(compare (first %1) (first %2)) zipped))))", "user": "5ce6f93be4b0a17bb84e2b99"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))  (re-seq #\"\\w+\" s)))", "user": "5d0cf1c8e4b0cc9c91588246"}, {"problem": 70, "code": "(fn [s]\n  (sort\n   #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n   (clojure.string/split s #\"[^\\w]+\")))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 70, "code": "(fn [full]\n   (map (fn [x] (apply str (filter #(Character/isLetter %) x)))\n          (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n                (clojure.string/split full #\" \"))))", "user": "5d126728e4b02c15ef02199a"}, {"problem": 70, "code": "#(sort-by (fn [v] (.toLowerCase v)) (re-seq #\"\\w+\" %))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %)\n      (sort-by clojure.string/lower-case))", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5d05fdece4b0cc9c915881e8"}, {"problem": 70, "code": "(fn [s]\n  (let [vs '(\\ \\. \\! \\? \\, \\-)]\n    (vec (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (map #(apply str %) (filter (fn [x] (not (some #(= x %) (map #(cons % ()) vs)))) (partition-by (fn [c] (some #(= % c) vs )) (seq s))))))))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 70, "code": "#(sort-by (fn [v-str] (clojure.string/lower-case v-str)) (clojure.string/split (clojure.string/replace % #\"[.!]\" \"\") #\" \"))", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 70, "code": "(fn\n  [str]\n  (let [words (-> (clojure.string/replace str #\"[^ a-zA-Z]\" \"\")\n                  (clojure.string/split #\" \"))]\n    (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) words)))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 70, "code": "(fn sort-words [sentence]\n  (->> sentence\n       (remove #{\\. \\! \\, \\?})\n       clojure.string/join\n       (#(clojure.string/split % #\" \"))\n       (sort-by clojure.string/lower-case)))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 70, "code": "(fn [s]\n   (->> (.split s \" \")\n        (sort-by #(.toLowerCase %))\n        (map #(.replaceAll % \"[\\\\.!]\" \"\"))))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5d1b59abe4b02ea6f0fb697e"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 70, "code": "(fn [s] (let [xs (re-seq #\"\\w+\" s)]\n          (map #(val %) (sort (zipmap (map #(.toLowerCase %) xs) xs)))))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 70, "code": "(fn [s]\n   (->> (clojure.string/split s #\" \")\n        (map (fn [s] (filter #(Character/isLetter %) s)))\n        (map (partial apply str))\n        (sort-by clojure.string/upper-case)))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 70, "code": "(fn sort* [s]\n(sort-by clojure.string/upper-case (clojure.string/split s #\"\\W+\")))", "user": "5d29d837e4b01671435dbc6c"}, {"problem": 70, "code": "#(into [] (sort-by clojure.string/lower-case (clojure.string/split %1 #\"[\\s\\.!]\")))", "user": "5d270111e4b092dab7f59c62"}, {"problem": 70, "code": "(fn my-sort\n  [string]\n  (let [words (#(map \n                  (fn [curr] (apply str (remove #{\\. \\!} curr))) \n                  (clojure.string/split \n                    % \n                    #\" \")) \n                string)]\n    (sort-by #(.toLowerCase %) words)))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(clojure.string/lower-case %)  \n           (clojure.string/split \n            (clojure.string/replace s #\"[.!]\" \"\") #\" \")))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 70, "code": "(fn f [s]\n  (sort-by #(.toLowerCase %)\n    (remove #(re-matches #\"\\W*\" %) (clojure.string/split s #\"\\b\"))))", "user": "5012da69e4b0c8732600222d"}, {"problem": 70, "code": "(fn wsort [ws]\n  (sort-by clojure.string/upper-case (reduce \n          #(conj %1 (apply str (filter\n                                 (fn [c] (Character/isLetter c))\n                                 %2)))\n          [] \n          (clojure.string/split ws #\" \"))))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 70, "code": "(fn [s]\n  (let [words (-> s\n                  (clojure.string/replace #\"[\\W&&\\S]\" \"\")\n                  (clojure.string/split #\"\\s+\"))]\n    (sort-by clojure.string/lower-case words)))", "user": "518279abe4b0353c468deb65"}, {"problem": 70, "code": "(fn [a] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" a)))", "user": "5cf6a847e4b0b71b1d808a5f"}, {"problem": 70, "code": "(fn [text]\n  (->> text\n       (re-seq #\"\\w+\")\n       (sort-by clojure.string/lower-case)))", "user": "57262710e4b0c5bde472c120"}, {"problem": 70, "code": "(fn [l] (sort #(compare (.toUpperCase %1) (.toUpperCase %2)) (.split (.replaceAll l \"[^a-zA-z ]\" \"\") \" \")))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 70, "code": "(fn sentence->words [sentence]\n  (->> sentence\n       (re-seq #\"\\w+\")\n       (sort (. String CASE_INSENSITIVE_ORDER))))", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 70, "code": "(fn [text]\n    (let [split (-> text\n                    (clojure.string/replace #\"[\\.\\!]\" \"\")\n                    (clojure.string/split #\"\\s\"))]\n      (sort-by (fn [word]\n                 (clojure.string/lower-case word))\n               split)))", "user": "57f904c5e4b0d3187e900936"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split s #\"[ .!]\"))\n  )", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 70, "code": "(fn [txt]\n    (let [splited (clojure.string/split txt #\" \")]\n      (sort-by #(clojure.string/lower-case %)\n        (map\n         (fn [word] (apply str (filter #(Character/isLetter %) word))) splited))))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 70, "code": "(fn [string-seq]\n    (let [punctuation-chars \".,!?;-\"\n          without-punctuation (apply str (remove #((set punctuation-chars) %) string-seq))\n          split-word (clojure.string/split without-punctuation #\" \")\n          case-insensible-comparator (fn [str1 str2] (compare (clojure.string/lower-case str1)\n                                                              (clojure.string/lower-case str2)))]\n          (sort #(case-insensible-comparator %1 %2) split-word)))", "user": "5d0153f9e4b0cc9c915881aa"}, {"problem": 70, "code": "(fn [s] \n  (->>  \n    (clojure.string/split (apply str (re-seq #\"[a-zA-Z /space]\" s)) #\" \")\n    (sort-by clojure.string/upper-case)\n    )\n  )", "user": "5d1a1082e4b0902706380e0e"}, {"problem": 70, "code": "(fn [S]\n    ;; \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\n    (sort\n      #(compare \n        (clojure.string/upper-case %1)\n        (clojure.string/upper-case %2)\n      )\n      ;; \u0443\u0431\u0435\u0440\u0435\u043c \u043f\u0443\u0441\u0442\u044b\u0448\u043a\u0438\n      (keep \n        #(when (not= \"\" %) %)  \n        ;; \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 \u0438 \u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043f\u0440\u0435\u043f\u0438\u043d\u0430\u043d\u0438\u044f\n        (clojure.string/split S #\"[ ,!.?]\")\n      )\n    )\n   )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-z]+\" %))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 70, "code": "(comp (partial sort-by clojure.string/lower-case) #(clojure.string/split % #\"[ |.|!]\"))", "user": "5cb41c40e4b026601754b911"}, {"problem": 70, "code": "(fn\n  [s]\n  (sort-by clojure.string/lower-case\n           (map (fn [x] (apply str (filter #(Character/isLetter %) x)))\n                (clojure.string/split s #\" \"))))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 70, "code": "(fn [st]\n  (let [cmp (fn [a b]\n              (compare (clojure.string/lower-case a)\n                       (clojure.string/lower-case b)))]\n    (sort cmp (map #(re-find #\"\\w+\" %)\n                   (clojure.string/split st #\" \")))))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (.split #\"[\\W]\" s)))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %)\n      (map (juxt clojure.string/lower-case identity))\n      (sort-by first)\n      (map second))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 70, "code": "(fn [x] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" x)))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 70, "code": "(fn [s] \n  (sort-by clojure.string/lower-case (clojure.string/split s #\"[^a-zA-Z]\")))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 70, "code": "(fn word-sort [words] (sort-by clojure.string/lower-case (clojure.string/split (apply str (re-seq #\"[a-zA-Z ]\" words)) #\" \")))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 70, "code": "(fn [words-list]\n  (vec (sort-by clojure.string/lower-case (clojure.string/split\n                                            (apply str (filter #(or (Character/isSpace %) (Character/isLetter %))\n                                                               words-list))\n                                            #\" \"))))", "user": "5d6633bde4b0db5d338d15e2"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 70, "code": "(fn [x]\n  (->>\n   (-> x\n       (subs 0 (-> x count dec))\n       (clojure.string/split #\" \"))\n   (sort #(compare (clojure.string/lower-case %1)\n                   (clojure.string/lower-case %2)))))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 70, "code": "(fn word-sorting [s]\n  (let [mystr (clojure.string/split (subs s 0 (- (count s) 1)) #\"\\s+\")\n        sorted-str (sort-by clojure.string/upper-case mystr)]\n        sorted-str))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 70, "code": "(fn [s] \n   (let [s-seq (re-seq #\"[a-zA-Z]+\" s)]\n     (sort-by #(clojure.string/lower-case %)  s-seq)))", "user": "5d5ef0bce4b0c9e5857d4ffb"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 70, "code": "(fn sort-words\n  [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 70, "code": "(fn wordsort\n  [s]\n  (sort (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b) ))\n    (map #(apply str (re-seq #\"[a-zA-Z]\" %)) (clojure.string/split s #\" \")))\n  )", "user": "5d5950c1e4b02ba5928a6827"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 70, "code": "(fn prob70 [s]\n  (->> #\"[^a-zA-Z0-9]\"\n      (clojure.string/split s)\n      (sort-by clojure.string/lower-case)))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 70, "code": "(fn [sentence]\n  (let [words (re-seq #\"\\w+\" sentence)]\n    (sort-by clojure.string/lower-case words)))", "user": "5d80fa37e4b0915913b1d374"}, {"problem": 70, "code": "(fn my-word-sort [s]\n  (sort-by clojure.string/lower-case (clojure.string/split s #\"[ .,!]\")))", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 70, "code": "(fn word-sorting [str]\n      (sort-by clojure.string/lower-case (clojure.string/split\n                                               (clojure.string/replace str #\"\\.|!\" \"\")\n                                                                     #\" \"))\n      )", "user": "5d809b4fe4b0915913b1d36c"}, {"problem": 70, "code": "(fn word-sort [s]\n  (vec (map (fn [word]\n              (if (= (clojure.string/capitalize word) (first (clojure.string/split s #\" \")))\n                (clojure.string/capitalize word)\n                (if (= word (last (clojure.string/split s #\" \")))\n                  (apply str (drop-last (seq word)))\n                  word)))\n            (sort (map clojure.string/lower-case (clojure.string/split s #\" \"))))))", "user": "5d6e5ec6e4b04d129b00f2c7"}, {"problem": 70, "code": "(fn [x]\n  (sort-by\n   clojure.string/lower-case\n   (re-seq #\"\\w+\" x)))", "user": "5d1b2b7de4b02ea6f0fb697a"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5245af03e4b08ba239308124"}, {"problem": 70, "code": "(fn sp [s] (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace s #\"[.!]\" \"\") #\" \")))", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 70, "code": "(fn [s]\n   (let [ss  (map #(apply str (re-seq #\"[a-zA-Z]\" %)) (clojure.string/split s #\" \"))\n         ssort (map (fn [w] [w (clojure.string/lower-case w)]) ss)]\n     (map first (sort #(compare (second %1) (second %2)) ssort))))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 70, "code": "(fn [text] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))  (clojure.string/split text #\"[ ^.!]\")))", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 70, "code": "(fn [phrase]\n   (->> (re-seq #\"\\w+\" phrase)\n        (sort-by #(clojure.string/lower-case %))))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 70, "code": "(let [onlyChars (fn [word] (apply str (filter (fn [ch] (Character/isLetter ch)) word)))]\n     (fn foo [x] (sort-by clojure.string/lower-case (map onlyChars (clojure.string/split x #\" \")))))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 70, "code": "(fn [arr]\n         (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (clojure.string/split (apply str (remove #((set \".!,\") %) arr)) #\" \"))\n         )", "user": "5d90b3b3e4b0915913b1d3fb"}, {"problem": 70, "code": "(fn [sentence]\n  (let [filter-punct (clojure.string/replace sentence #\"[.,?!]\" \"\")\n        word-arr (clojure.string/split filter-punct #\" \")]\n    (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) word-arr)))", "user": "5d96edeae4b0d3f9b434ad35"}, {"problem": 70, "code": "(fn [s]\n  (let [words (-> s\n                  (clojure.string/replace #\"[^a-zA-Z0-9 ]+\" \"\")\n                  (clojure.string/split #\"\\s+\"))]\n    (sort #(apply compare (map clojure.string/lower-case %&)) words)))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 70, "code": "(fn [str]\n   (sort-by clojure.string/lower-case\n            (clojure.string/split str #\"[^a-zA-Z]\")))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 70, "code": "(fn [s]\n    (->> (clojure.string/split s #\"\\W\")\n         (remove empty?)\n         (sort-by #(clojure.string/lower-case %))))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %)\n      (sort-by clojure.string/lower-case))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 70, "code": "(fn word-sorting [str]\n  (sort-by #(clojure.string/lower-case %) (clojure.string/split str #\"\\W\")))", "user": "5da6cb60e4b000c986472c10"}, {"problem": 70, "code": "(fn [xs]\n  (let [no-punct (apply str (filter #(or (Character/isLetter (char %)) (Character/isWhitespace (char %))) xs))\n        lower (apply str (map #(Character/toLowerCase (char %)) no-punct))\n        words (clojure.string/split no-punct #\" \")\n        lwords (clojure.string/split lower #\" \")\n        mapping (into {} (map #(vector %1 %2) lwords words))]\n    (map #(mapping %) (sort lwords))))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 70, "code": "#(sort (fn [x y] (compare (.toLowerCase x) (.toLowerCase y)))\n      (clojure.string/split (apply str (re-seq #\"[a-zA-Z\\ ]\" %) ) #\" \"))", "user": "5d931a58e4b0d3f9b434ad10"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (re-seq #\"[A-Za-z]+\" s)))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 70, "code": "(fn foo [s]\n (sort-by #(.toLowerCase %) (-> s \n     (clojure.string/replace #\"[^a-zA-Z ]\" \"\")\n     (.split \" \")\n ))\n)", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 70, "code": "(fn [s]\n  (->> (remove (set \".!\") s)\n       (apply str)\n       (#(clojure.string/split % #\" \"))\n       (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)))))", "user": "58b2c435e4b0ebc645576d11"}, {"problem": 70, "code": "(fn  [str] \n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" str)))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 70, "code": "(fn split-sort [s]\n  (sort-by #(clojure.string/lower-case %)\n           (clojure.string/split s #\"[ !.,]\")))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 70, "code": "(fn [st]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" st)))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 70, "code": "(fn alphabetize [string]\n  (sort-by clojure.string/lower-case (clojure.string/split string #\"[^a-zA-Z]\")))", "user": "5db0d470e4b0f8c104ccfc9e"}, {"problem": 70, "code": "(fn f701 [args]\n  (let [acc (clojure.string/split (subs args 0 (- (count args) 1)) #\" \")]\n    (sort #(compare  (.toUpperCase %1) (.toUpperCase %2))  acc)\n    )\n  )", "user": "5db658ebe4b010eb3c36cd39"}, {"problem": 70, "code": "(fn [sent]\n  (sort-by #(clojure.string/lower-case %)\n        (clojure.string/split sent #\"[ \\.,!]\")))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 70, "code": "(fn [st]\n  (sort #(compare \n          (clojure.string/lower-case %)\n          (clojure.string/lower-case %2) \n          ) \n    (clojure.string/split st #\"[ ,!.?]\")\n  )\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 70, "code": "(fn [x]\n  \n  (let [y (re-seq #\"\\w+\" x) ]\n    (sort-by clojure.string/lower-case  y )\n    )\n  \n  \n )", "user": "5da98129e4b000c986472c33"}, {"problem": 70, "code": "(fn [given-string]\n   (let [filtered-string (clojure.string/split (apply str (re-seq #\"[a-zA-Z ]\" given-string))#\" \")]\n     (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) filtered-string)\n      ))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 70, "code": "(fn [x] (->> x (re-seq #\"\\w+\")(sort-by clojure.string/lower-case)))", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case  ((fn [x] (re-seq #\"\\w+\" x)) %))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" %))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 70, "code": "(fn [x] (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split (.replaceAll x \"[^a-zA-Z ]\" \"\") #\" \")))", "user": "5dcdf0a7e4b0b296f82db5b4"}, {"problem": 70, "code": "(fn [words] (sort-by clojure.string/upper-case (map #(clojure.string/replace % #\"[^a-zA-Z]\" \"\") (clojure.string/split words #\" \"))))", "user": "5dcfdf23e4b0948ae9d9ad43"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[^\\w]+\"))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 70, "code": "(fn[xs] (filter #(not (= \" \" %1)) (sort-by clojure.string/lower-case (map #(apply str %1) ( partition-by #(Character/isSpace %1) (filter #(or (Character/isLetter %1) (Character/isSpace %1)) xs))))))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 70, "code": "(fn sort-words [str]\n\t(letfn [(cmp [a b] (compare (.toLowerCase a) (.toLowerCase b)))]\n\t\t(sort cmp (.split (.replaceAll str \"\\\\p{Punct}\" \"\") \" \"))))", "user": "5c87c79be4b048ec896c591b"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (clojure.string/split (clojure.string/replace % #\"[.!]\" \"\") #\" \"))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 70, "code": "(fn\n  [sentence]\n  (let [words (clojure.string/split (clojure.string/replace sentence #\"[^a-zA-Z0-9\\s]\" \"\") #\" \")\n        lower-to-orig (group-by clojure.string/lower-case words)\n        sorted-words (sort (keys lower-to-orig))]\n    (reduce (fn [acc lower-word]\n              (conj acc (get (get lower-to-orig lower-word) 0)))\n            []\n            sorted-words)))", "user": "5dd65ea4e4b0948ae9d9ad7f"}, {"problem": 70, "code": "(fn sort-sentence [sentence]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (map #(apply str (re-seq #\"[a-z]|[A-Z]+\" %)) (clojure.string/split sentence #\" \")))\n\n  )", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 70, "code": "(fn [content]\n\n  (sort #(compare (.toUpperCase %1) (.toUpperCase %2))\n        (clojure.string/split (apply str (drop-last content))\n                              #\" \"))\n  )", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %) (clojure.string/split s #\"[^a-zA-Z]\")))", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 70, "code": "(fn [sentence]\n  (let [words (-> (clojure.string/replace sentence #\"\\pP\" \"\")\n                  (clojure.string/split #\" \"))]\n    (sort (fn [& ws] (apply compare (map clojure.string/lower-case ws)))\n          words)))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 70, "code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"[A-Za-z]+\" %))", "user": "5da05bcce4b000c986472bd0"}, {"problem": 70, "code": "(fn [sentence]\n  (sort-by #(clojure.string/lower-case %)\n           (-> sentence\n      (clojure.string/replace #\"[^a-zA-Z0-9 ]\" \"\")\n      (clojure.string/split #\" \"))))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 70, "code": "(fn [string]\n \t(let [words (filter (complement empty?) (clojure.string/split string #\"[\\s\\.\\?!]\"))]\n      (sort-by clojure.string/lower-case words)\n      )\n )", "user": "5de6484ce4b0986d99407f66"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 70, "code": "(fn [s] (sort-by clojure.string/lower-case (clojure.string/split s #\"\\W+\")))", "user": "529dfc6de4b04e0c58e87b8a"}, {"problem": 70, "code": "(fn my-sort\n     [sentence]\n     (sort-by #(.toLowerCase %)\n              (map (fn [word] (clojure.string/replace word #\"[^a-zA-Z ]\" \"\")) (clojure.string/split sentence #\" \")))\n     )", "user": "5dfb538ee4b0a607a9a45cda"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 70, "code": "(fn [s]\n  (->> s\n       (re-seq #\"\\w+\")\n       (sort-by clojure.string/lower-case)))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 70, "code": "(fn word-sorting [sentence](sort-by \n                               identity \n                               (fn [a b] (compare (.toUpperCase a) (.toUpperCase b))) \n                               (re-seq #\"\\w+\" sentence)))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 70, "code": "(fn p-70 [s]\n\n  (sort\n   #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n    (clojure.string/split s #\"\\W\")\n   ))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 70, "code": "(fn [arg]\n  (sort-by clojure.string/lower-case\n           (re-seq #\"\\w+\" arg)))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "57320099e4b0cd1946bd0fcb"}, {"problem": 70, "code": "(fn word-sorting [s]\n  (sort-by #(apply str (map clojure.string/lower-case %)) (re-seq #\"\\w+\" s)))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 70, "code": "(fn [s]\n         (let [ss (clojure.string/split (clojure.string/replace s #\"[\\.!]\" \"\") #\" \")\n               ls (map #(clojure.string/lower-case %) ss)]\n           (map second (sort (map (fn [a b] [a b]) ls ss)))))", "user": "5da71eaee4b000c986472c15"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 70, "code": "(fn [s]\n   (->> (clojure.string/split s #\" \")\n        (map #(clojure.string/replace % #\"[\\.\\!]\" \"\"))\n        (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)))))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case\n          (re-seq #\"\\w+\" %))", "user": "510528a0e4b0730a5f55ad85"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split s #\"\\W\")))", "user": "5cb0f70ce4b026601754b8c1"}, {"problem": 70, "code": "(fn [text]\n  (->> text\n       (re-seq #\"\\w+\")\n       (sort-by clojure.string/lower-case)))", "user": "5defc177e4b093ff717275af"}, {"problem": 70, "code": "(fn [sentence]\n  (let [words (filter #(> (count %) 0) (re-seq #\"[a-zA-Z]*\" sentence))]\n    (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) words)))", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 70, "code": "(fn [sentence] (sort-by #(.toUpperCase %) (into [] (.split sentence \"[^A-Za-z0-9_]+\"))))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 70, "code": "(fn [string1]\n           (sort-by clojure.string/lower-case\n                    (clojure.string/split (clojure.string/replace string1 #\"[^A-Za-z ]\" \"\") #\" \")))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 70, "code": "(fn [ws]\n  (let [alpha (zipmap \"abcdefghijklmnopqrstuvwxyz\" (range 26))]\n    (sort-by #(map alpha (.toLowerCase %))\n             (fn [w1 w2]\n               (cond \n                 (empty? w1) true\n                 (empty? w2) false\n                 :not-empty-w1&w2\n                 (case (compare (first w1) (first w2))\n                   -1 true\n                   0 (recur (rest w1) (rest w2))\n                   1 false)))\n             (re-seq #\"[A-z]+\" ws))))", "user": "5d929ceae4b0915913b1d412"}, {"problem": 70, "code": "(fn [sentence]\n     (map (fn [word]\n              (clojure.string/replace word #\"[!.]\" \"\"))\n            (vec (sort-by clojure.string/lower-case (clojure.string/split sentence #\" \")))))", "user": "5e317676e4b05b4b01516229"}, {"problem": 70, "code": "(fn [s]\n    (let [s-no-punc (apply str (filter #(re-matches #\"[a-zA-Z\\s]\" (str %)) s))\n          word-list (clojure.string/split s-no-punc #\" \")]\n      (sort #(compare (clojure.string/lower-case %1)\n                      (clojure.string/lower-case %2))\n            word-list)))", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n           (re-seq #\"[A-Za-z]+\" s)))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\" |\\.|!\"))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 70, "code": "(comp (partial map last)\n       sort\n       (partial map (juxt clojure.string/lower-case identity)) \n       #(clojure.string/split % #\" \") \n       #(subs % 0 (dec (count %))))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 70, "code": "(fn [s]\n   (->> (clojure.string/split s #\"[ .!?\\\\-]\")\n        (map #(list (.toUpperCase %1) %1))\n        (sort-by first)\n        (map second)))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 70, "code": "#(sort-by (fn [s] (clojure.string/lower-case s)) (re-seq #\"\\w+\" %))", "user": "57ed2574e4b0bfb2137f5b93"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %)\n      (sort-by clojure.string/lower-case))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 70, "code": "(fn [in]\n   (let [end (count in)\n         sub (subs in 0 (- end 1))]\n     (sort-by #(clojure.string/lower-case %) (clojure.string/split sub #\"\\s\"))))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 70, "code": "#(sort (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b))) (filter (complement empty?) (clojure.string/split %  #\"(\\s+|\\.|\\,|\\!)\")))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 70, "code": "#(->> %\n     (re-seq #\"\\w+\")\n     (sort-by clojure.string/lower-case))", "user": "5e491182e4b043cd24807a46"}, {"problem": 70, "code": "(fn [s]\n  (map #(clojure.string/replace % #\"\\W\" \"\")\n    (sort-by clojure.string/lower-case\n      (clojure.string/split s #\" \"))))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 70, "code": "(fn\n  [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "59c74c28e4b0a024fb6ae540"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"[,.!-]\" \"\") #\" \"))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 70, "code": "(fn [s]\n    (sort-by\n      clojure.string/upper-case\n      (re-seq #\"\\w+\" s)))", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 70, "code": "(fn [s] (->>\n (clojure.string/split s #\"[ .!]\")\n (filter #(< 0 (count %)))\n (sort-by #(.toLowerCase %))))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 70, "code": "#(sort-by (fn [v](.toLowerCase v))  (re-seq #\"\\w+\" %))", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 70, "code": "(fn [word-str] (sort #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2)) (clojure.string/split word-str #\"[,|!|?|.]* [,|!|?|.]*|[,|!|?|.]*$\")))", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 70, "code": "(fn four-clojure-70 [s]\n  (let [init-split (clojure.string/split s #\" \")\n        cleansed-str (map (fn [s] (clojure.string/replace s #\"\\.|\\?|!\" \"\")) init-split)]\n    (sort-by clojure.string/lower-case cleansed-str)))", "user": "5d631376e4b0c9e5857d5023"}, {"problem": 70, "code": "(fn word-sort [word-list]\n  (sort-by clojure.string/upper-case\n   (clojure.string/split\n    (clojure.string/replace\n     word-list\n     #\"[!\\\\.\\\\?,]\" \"\")\n    #\" \")))", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 70, "code": "#(sort (fn [s1 s2] (compare (clojure.string/lower-case s1) (clojure.string/lower-case s2)))\n      (clojure.string/split (clojure.string/replace % #\"[^a-zA-Z ]\" \"\") #\" \"))", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 70, "code": "(fn [s]\n    (sort-by clojure.string/lower-case\n             (re-seq #\"[a-zA-Z]+\" s)))", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 70, "code": "#(->> %\n      (re-seq #\"\\w+\")\n      (sort-by clojure.string/lower-case))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 70, "code": "(fn [s]\n     (->> (clojure.string/replace s #\"[^a-zA-Z\\s]\" \"\")\n          (#(clojure.string/split % #\" \"))\n          (sort-by clojure.string/lower-case)\n          )\n  )", "user": "51316a63e4b0431ba07e7feb"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5e639b4be4b0fd0acd1586a2"}, {"problem": 70, "code": "(fn func [s]\n  (sort-by \n   clojure.string/lower-case\n   (map #(re-find #\"[A-Za-z]*\" %1) (clojure.string/split s #\" \"))))", "user": "5e805895e4b085ba37836e44"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "4eb70649535d7eef30807373"}, {"problem": 70, "code": "#(let [clean-str (clojure.string/replace % #\"\\W\" \" \")\ncompar (fn [x y] (compare (clojure.string/lower-case x)(clojure.string/lower-case y)))]\n(sort compar (clojure.string/split clean-str #\" \")))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"[A-Za-z]+\" %))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 70, "code": "(fn my-sort [sentence]\n  (sort\n  \t#(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n  \t(clojure.string/split (subs sentence 0 (dec (count sentence))) #\" \")))", "user": "5e0cbc14e4b099d064962f8e"}, {"problem": 70, "code": "#(sort (fn mycomp [x y](compare (clojure.string/lower-case x) (clojure.string/lower-case y))) (clojure.string/split(apply str (re-seq #\"[A-Z a-z]\" %)) #\" \"))", "user": "568e65bae4b0dcc4269f40d6"}, {"problem": 70, "code": "(fn split-sort [s]\n  (sort #(compare (clojure.string/upper-case %1)\n                  (clojure.string/upper-case %2))\n        (clojure.string/split (clojure.string/replace s #\"[^A-Za-z ]\" \"\") #\"\\W\")))", "user": "5e9c11f8e4b0157ca96647f6"}, {"problem": 70, "code": "#(let [words (clojure.string/split (.replaceAll % \"[^A-Za-z ]\" \"\") #\" \")]\n   (sort (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b))) words)\n)", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %)\n       (sort-by clojure.string/lower-case))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 70, "code": "(fn [x] \n  (sort-by clojure.string/upper-case(clojure.string/split x #\"\\W+\")\n  \n  \n  \n  ))", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 70, "code": "(fn word-sorting [string]\n  (sort-by clojure.string/upper-case\n           (clojure.string/split \n            (apply str (re-seq #\"[a-zA-Z\\s+]\" string))\n            #\" \")))", "user": "5e92adb6e4b0fbed045a37ea"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split s #\"[\\s\\.\\!]\")))", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 70, "code": "(fn [x]\n   (->> x\n        (re-seq #\"\\w+\")\n        (sort #(compare (.toLowerCase %1)\n                        (.toLowerCase %2)))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5e9f38cce4b00a66d4a9517e"}, {"problem": 70, "code": "(fn [s]\n      (->> s\n           (re-seq #\"\\w+\")\n           (sort-by #(.toLowerCase %))))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[\\s\\p{Punct}]\"))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 70, "code": "#(sort-by (fn [v] (.toLowerCase v)) (re-seq #\"\\w+\" %))", "user": "5e954b9ee4b0fbed045a3809"}, {"problem": 70, "code": "(fn [s] (->> (clojure.string/split s #\"[^\\w]\")\n             (sort-by #(clojure.string/lower-case %))))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 70, "code": "(fn [s]\n  (->> s\n      (re-seq #\"\\w+\")\n      (#(sort-by clojure.string/upper-case %))))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case compare\n         (re-seq #\"\\w+\" %))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 70, "code": "(fn s [string] (sort-by #(clojure.string/lower-case %) (re-seq #\"\\w+\" string)))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 70, "code": "(fn solution [arg]\n  (let [text (clojure.string/replace arg #\"[.!?\\\\-]\" \"\") ]\n    (sort-by str #(compare \n                    (clojure.string/lower-case %1) \n                    (clojure.string/lower-case %2)) \n             (clojure.string/split text #\" \"))))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 70, "code": "(fn [s]\n   (sort #(compare (clojure.string/lower-case %1)\n                   (clojure.string/lower-case %2))\n         (clojure.string/split\n           (clojure.string/replace s #\"\\.|!\" \"\") #\"\\s+\")))", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 70, "code": "(fn f [s] (sort-by clojure.string/upper-case (clojure.string/split (apply str (remove #((set \".!\") %) s)) #\"\\s+\")))", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 70, "code": "(fn\n  [sentence]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n        (clojure.string/split \n         (clojure.string/replace sentence #\"[.!?]\" \"\")#\" \")))", "user": "5ed65b59e4b016b56eae05df"}, {"problem": 70, "code": "(fn [s]\n  (-> s\n    (clojure.string/replace #\"\\.|!|,|;\" \"\")\n    (clojure.string/split #\"\\s\")\n    (#(sort-by clojure.string/lower-case compare %) )\n    ))", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 70, "code": "#(sort-by\n  clojure.string/lower-case\n  (clojure.string/split (clojure.string/replace % #\"\\p{Punct}\" \"\") #\" \"))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 70, "code": "#(sort-by (fn [s] (.toLowerCase s)) (re-seq #\"\\p{Alpha}+\" %))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 70, "code": "(fn [s] (sort #(.compareToIgnoreCase % %2) (clojure.string/split (clojure.string/replace s #\"[.!,?]\" \"\") #\" \")))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (re-seq #\"[A-Za-z]+\" s)))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 70, "code": "(fn __\n   [x]\n   (let [words (map (partial re-find #\"\\w+\") (clojure.string/split x #\"\\s+\"))]\n      (sort-by (comp clojure.string/capitalize) words)))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[^a-zA-Z]+\"))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 70, "code": "(fn [s]\n  (vals\n   (sort\n    (reduce\n     #(assoc %1 (clojure.string/upper-case %2) %2)\n     {}\n     (map\n      #(re-find #\"[a-zA-Z]+\" %)\n      (clojure.string/split s #\" \"))))))", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 70, "code": "#(sort-by (fn [s] (.toLowerCase s))\n          (-> %\n              (clojure.string/replace #\"[\\!.]\" \"\")\n              (clojure.string/split #\" \")))", "user": "5eccc5c2e4b016b56eae058f"}, {"problem": 70, "code": "(fn [s]\n  (-> s\n      (.replaceAll \"[.!]\" \"\")\n      (.split \" \")\n      (->> (sort-by #(.toLowerCase %))) ))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 70, "code": "#(sort (fn [x y] (.compareTo (.toLowerCase x) (.toLowerCase y))) (re-seq #\"\\w+\" %))", "user": "5df08767e4b093ff717275bf"}, {"problem": 70, "code": "#(sort String/CASE_INSENSITIVE_ORDER (re-seq #\"\\w+\" %))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 70, "code": "(fn my-split-sort-str [s]\n  (sort\n  #(compare (clojure.string/lower-case %1)\n            (clojure.string/lower-case %2)\n            )\n  (filter\n#(\n   not\n   (\n     = % \"\"\n     )\n   )\n   (clojure.string/split s #\"[^a-zA-Z]\")\n    )\n  )\n  )", "user": "5edc16e1e4b0c7845d86b0f1"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"[^a-zA-Z ]\" \"\") #\" \"))", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 70, "code": "(fn [s]\n    (let [pieces (clojure.string/split s #\"[., !]+\")]\n      (sort (fn [x y] (compare (clojure.string/lower-case x) (clojure.string/lower-case y))) pieces)\n      )\n    )", "user": "5f06caa7e4b0cf489e8d7f52"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"\\w+\" %))", "user": "5e6ba862e4b04a83ad7cd27d"}, {"problem": 70, "code": "(fn [s]\n\t(let [strarr (re-seq #\"\\w+\" s)]\n\t\t(sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) strarr)\n\t)\n)", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %) (clojure.string/split s #\"[^A-Za-z]\")))", "user": "4eb97234535dfed6da9c6d53"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\s|\\W\"))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 70, "code": "(fn word-sort [s]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (clojure.string/split s #\"\\W+\")))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %)\n      (sort-by clojure.string/lower-case))", "user": "5ef8e9e0e4b09b61f08553cb"}, {"problem": 70, "code": "(fn [s]\n  (->> (clojure.string/split s #\"[\\s\\.,!?]\")\n       (filter #(> (count %) 0))\n       (sort #(compare (clojure.string/lower-case %1)\n                       (clojure.string/lower-case %2)))))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 70, "code": "(fn [x]\n  (->> (clojure.string/split x  #\"[ !.]\")\n       (sort-by clojure.string/upper-case)))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 70, "code": "(fn [st]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n  \t(-> st\n        (clojure.string/replace ,,, #\"[.,:;!]\" \" \")\n        (clojure.string/split ,,, #\" \"))))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 70, "code": "(fn sort-word\n  [w]\n  (->> (sort-by\n        clojure.string/lower-case\n        (clojure.string/split w #\" \"))\n       (map (fn [s]\n              (apply str (filter #(Character/isLetter %) s))))))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 70, "code": "(fn [sentence]\n  (let [punc-regex #\"[\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\_\\\\-\\\\+\\\\=\\\\~\\\\`\\\\,\\\\.\\\\/\\\\<\\\\>\\\\?\\\\:\\\\;\\\\\\\"']\"]\n    (sort\n     (fn [x y]\n       (apply compare (map clojure.string/lower-case [x y]))\n       )\n\n     (clojure.string/split\n      (clojure.string/replace\n       sentence\n       punc-regex\n       \"\")\n      #\" \")\n     )))", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 70, "code": "(fn word-sort [s]\n  (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5f300f28e4b033932238a682"}, {"problem": 70, "code": "(fn [s]\n  (let [char-comparator (fn [c1 c2] (compare (-> (compare c1 \\A)\n                                                 (mod 32))\n                                             (-> (compare c2 \\A)\n                                                 (mod 32))))\n        str-comparator (fn [s1 s2] (->> (map char-comparator s1 s2)\n                                        (drop-while zero?)\n                                        first))\n        str-seq (re-seq #\"\\w+\" s)]\n    (sort str-comparator str-seq)))", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 70, "code": "(fn sort-words\n  [sentence]\n  (sort\n   #(compare (.toLowerCase %1) (.toLowerCase %2))\n   (re-seq #\"[a-zA-Z]+\" sentence)))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 70, "code": "(fn [s]\n  (sort\n   #(compare (.toLowerCase %1) (.toLowerCase %2))\n   (seq (.split (.replaceAll s \"[^\\\\w ]\" \"\") \" \"))))", "user": "5f37839ee4b0574c87022c59"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case\n  \t\t  (re-seq #\"\\w+\" %))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 70, "code": "(fn [s]\n    (->> (clojure.string/split s #\"\\s\")\n         (map (fn [word]\n                (->> word\n                     (filter #(Character/isLetter %))\n                     clojure.string/join)))\n                     (sort-by clojure.string/lower-case)))", "user": "5f431d32e4b0955706451fb5"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (clojure.string/split s #\"\\s|\\.|!\")))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace % #\"[^\\sa-zA-Z]\" \"\") #\" \"))", "user": "5f0c8b0de4b0f30dddfb5d4c"}, {"problem": 70, "code": "(fn [s]\n   (sort-by clojure.string/lower-case compare  (clojure.string/split s #\"[^a-zA-Z]+\")))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 70, "code": "(fn sort-word\n  [sentence]\n  (sort-by clojure.string/lower-case (clojure.string/split\n                               (clojure.string/replace sentence #\"\\.|!\" \"\") #\" \"))\n  )", "user": "5f29837ee4b033932238a64f"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[^a-zA-Z]+\"))", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 70, "code": "(fn sort* [s] (sort-by clojure.string/upper-case (clojure.string/split s #\"\\W+\")))", "user": "5f631e11e4b02876ed9fd011"}, {"problem": 70, "code": "; 1st and 2nd pass with this, only considering 1st character\n;(fn[coll](->> coll (re-seq #\"[a-zA-Z]+\")\n;       (sort-by #(int (first (clojure.string/lower-case %))))\n;       ))\n#(sort-by clojure.string/lower-case (re-seq #\"[a-zA-Z]+\" %))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 70, "code": "#(sort-by clojure.string/capitalize (clojure.string/split % #\"[\\s|\\.|\\!]\"))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 70, "code": "(fn [string]\n  (sort-by clojure.string/lower-case\n   (map (fn [x] (clojure.string/replace x #\"[\\.!]\" \"\"))\n             (clojure.string/split string #\" \"))))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 70, "code": "(fn [s]\n    (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n        ;[\"a\" \"fine\" \"Boy\" \"could\" \"have\"]\n        (clojure.string/split s #\"[ \\.\\!]\")))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 70, "code": "(fn [s]\n  (let [v (clojure.string/split (clojure.string/replace s #\"[^a-zA-Z0-9_ \\s]\" \"\")  #\"\\s\")]\n    (sort-by clojure.string/lower-case v)\n    )\n  )", "user": "5f419985e4b0955706451fab"}, {"problem": 70, "code": "(fn [instring]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n        (clojure.string/split instring #\"[ ,;.:!]+\")))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 70, "code": "(fn [string]\n  (sort-by clojure.string/lower-case\n           (re-seq #\"[A-Za-z]+\" string)))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 70, "code": "(fn f [s]\n  (->> (clojure.string/split s #\"\\s\")\n       (map (partial re-find #\"[a-zA-z]*\"))\n       (sort-by clojure.string/lower-case)))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 70, "code": "(fn [s]\n  (sort\n    (fn [& x] (apply compare (map clojure.string/upper-case x)))\n    (clojure.string/split s #\"[^A-Za-z]+\"))\n  )", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 70, "code": "(fn [s] (->> (clojure.string/split s #\" \")\n             (map #(re-find #\"\\w+\" %))\n             (sort-by clojure.string/lower-case)))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %)\n      (sort-by clojure.string/lower-case))", "user": "5f5b624de4b05ea7b9adc42f"}, {"problem": 70, "code": "(fn [xs]\n    (sort-by #(-> % .toLowerCase) (map second (re-seq #\"(\\w+)\" xs))))", "user": "507e68abe4b085af06e3afd2"}, {"problem": 70, "code": "(fn [s]\n   (sort-by\n    #(clojure.string/lower-case %)\n    (-> s\n        (clojure.string/replace #\"[^a-zA-Z\\ ]+\" \"\")\n        (clojure.string/split #\" \"))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 70, "code": "(fn ws\n  [s]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (re-seq #\"\\w+\" s)))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 70, "code": "(fn wsrt [s]\n  (sort #(compare (clojure.string/lower-case %1)\n                  (clojure.string/lower-case %2))\n        (re-seq #\"\\w+\" s)))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 70, "code": "(fn [s]\n  (let [words (-> (clojure.string/replace s #\"[.,!]\" \"\")\n                  (clojure.string/split #\" \"))]\n    (sort-by #(clojure.string/lower-case %) words)))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 70, "code": "(fn sort-words [words]\n  (sort-by #(clojure.string/lower-case %) (clojure.string/split (clojure.string/replace words #\"[',.?!]\" \"\") #\" \")))", "user": "5f9567cce4b0715f5002d7c7"}, {"problem": 70, "code": ";(\n #(->> (clojure.string/split\n        %\n        #\"[^a-zA-Z]\")\n     (sort-by\n      clojure.string/lower-case))\n; \"hi There\")", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 70, "code": "(fn [s]\n    (sort #(.compareToIgnoreCase %1 %2)\n        (let [matcher (re-matcher #\"[^\\s\\p{Punct}]+\" s)]\n            (loop [acc []]\n                (if-let [m (re-find matcher)]\n                    (recur (conj acc m))\n                    acc)))))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 70, "code": "(fn word-sort\n  [s]\n  (sort-by (fn [x] (.toLowerCase x)) (re-seq #\"\\w+\" s)))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 70, "code": "(fn [string]\n  (sort (fn [s1 s2]\n          (compare (clojure.string/lower-case s1) (clojure.string/lower-case s2)))\n        (re-seq #\"[A-Za-z]+\" string)))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 70, "code": "(fn [s]\n    (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "5e17c269e4b00200644e3d5c"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case (re-seq #\"[A-Za-z]+\" %))", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 70, "code": "(fn word-sorting [s]\n  (if (= s \"\") \n    []\n      (let [s (->> s\n                   (filter #(or (Character/isLetter %)\n                                (Character/isSpace %)\n                                (Character/isDigit %)))\n                   (apply str))\n            split-string (clojure.string/split s #\" \")\n            ]\n        (if (< (count split-string) 2)\n          split-string\n          (let [pivot (first split-string)\n                equal-words (vec (filter #(= (compare (clojure.string/lower-case %) (clojure.string/lower-case pivot)) 0) split-string))\n                less-than (vec (filter #(< (compare (clojure.string/lower-case %) (clojure.string/lower-case pivot)) 0) split-string))\n                greater-than (vec (filter #(> (compare (clojure.string/lower-case %) (clojure.string/lower-case pivot)) 0) split-string))\n                ]\n            (vec (concat (word-sorting (clojure.string/join \" \" less-than))\n                         (word-sorting (clojure.string/join \" \" equal-words))\n                         (word-sorting (clojure.string/join \" \" greater-than)))))))))", "user": "5f63684be4b02876ed9fd012"}, {"problem": 70, "code": "(fn [x]\n  (->> x\n \t(re-seq #\"[A-Za-z]+\")\n \t(sort-by #(.toLowerCase %))\n \t(into [])))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %)\n      (sort-by clojure.string/lower-case))", "user": "5f331015e4b0574c87022c37"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (remove empty? (clojure.string/split % #\"\\W\")))", "user": "5fc51d88e4b0ad564c76812a"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/lower-case %) (clojure.string/lower-case %2))\n        (-> (clojure.string/replace s #\".{1}$\" \"\")\n            (clojure.string/split #\" \"))))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 70, "code": "#(sort-by clojure.string/upper-case \n          (clojure.string/split \n           (clojure.string/replace % #\"[!.]\" \"\") #\" \"))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 70, "code": "(fn\n  [s]\n  (sort-by #(.toLowerCase %) (clojure.string/split (clojure.string/replace s #\"[.,?!]\" \"\") #\" \")))", "user": "5fab003de4b08cb800c85ad1"}, {"problem": 70, "code": "(fn [sent] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" sent)))", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 70, "code": "#(sort (fn [a1 a2] (compare (clojure.string/lower-case a1) (clojure.string/lower-case a2))) (clojure.string/split % #\"( |,|!|\\.)+\"))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 70, "code": "(fn split-words\n  [s]\n  (->> (re-seq #\"\\w+\" s)\n       (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)))))", "user": "5fe5a64de4b05ac5b16ea187"}, {"problem": 70, "code": "(fn [input] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (re-seq #\"[a-zA-Z]+\" input)))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 70, "code": "(fn [s]\n        (->> (clojure.string/split s #\"\\W\")\n             (remove clojure.string/blank?)\n             (sort-by clojure.string/lower-case)))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 70, "code": "(fn sortedsplit [sentence]\n  (let [arry (into [] (.split (.replaceAll sentence \"[^\\\\w\\\\s]\" \"\") \" \"))\n        lwarry (map #(.toLowerCase %) arry)\n        ms (zipmap lwarry arry)\n        sorted-lwarry(sort lwarry)]\n    (map #(get ms %) sorted-lwarry)))", "user": "5f9c4113e4b0715f5002d821"}, {"problem": 70, "code": "(fn [x]\n  (sort-by \n    clojure.string/lower-case\n    (clojure.string/split (clojure.string/replace x #\"[^a-zA-Z ]\" \"\") #\" \")))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 70, "code": "(fn [s]\n  (vec\n   (sort (fn [a b] (compare (clojure.string/lower-case a)\n                            (clojure.string/lower-case b)))\n    (clojure.string/split s #\"\\W\"))))", "user": "5336ca32e4b0e30313ee6c80"}, {"problem": 70, "code": "(fn [s]\n  (vec\n   (sort (fn [a b] (compare (clojure.string/lower-case a)\n                            (clojure.string/lower-case b)))\n    (clojure.string/split s #\"\\W\"))))", "user": "5ffd7ce6e4b074f607df65fb"}, {"problem": 70, "code": "(fn [s]\n  (vec\n   (sort (fn [a b] (compare (clojure.string/lower-case a)\n                            (clojure.string/lower-case b)))\n    (clojure.string/split s #\"\\W\"))))", "user": "5ffd3422e4b074f607df65f7"}, {"problem": 70, "code": "(fn [s]\n  (vec\n   (sort (fn [a b] (compare (clojure.string/lower-case a)\n                            (clojure.string/lower-case b)))\n    (clojure.string/split s #\"\\W\"))))", "user": "5ffd4369e4b074f607df65f8"}, {"problem": 70, "code": "(fn [ss]\n    (->> ss\n         (re-seq #\"\\w+\")\n         (sort-by #(.toUpperCase %))))\n\n\n;; #(->> (re-seq #\"\\w+\" %)\n;;         (sort-by clojure.string/lower-case))\n\n\n;; (comp (partial sort-by (memfn toLowerCase))\n;;         #(clojure.string/split % #\"[^A-Za-z]\"))\n\n\n;; #(sort (fn [s1 s2]\n;;            (compare (.toLowerCase s1) (.toLowerCase s2)))\n;;          (vec (.split #\"\\W+\" %)))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 70, "code": "#(sort (fn [a b] \n          (compare (clojure.string/upper-case a) (clojure.string/upper-case b))) \n        (clojure.string/split (clojure.string/replace % #\"[^ a-zA-Z]\" \"\") #\" \"))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) (clojure.string/split (apply str (filter #(or (Character/isLetter %) (Character/isSpace %)) s)) #\" \")))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 70, "code": "(fn [s]\n    (sort-by #(.toLowerCase %) (clojure.string/split s #\"[^a-zA-Z]+\")))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 70, "code": "(fn my-sort [s]\n  (sort-by clojure.string/lower-case (clojure.string/split s #\"[^A-Za-z]\"))\n  )", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 70, "code": "(fn sort-words [s]\n   (letfn [(w1-gt-w2 [w1 w2] \n      (let [derp-chars \"abcdefghijklmnopqrstuvwxyz\"\n            char-pairs (interleave (seq derp-chars) (range 26))\n            char-map (apply hash-map char-pairs)\n            first-word-seq (seq (clojure.string/lower-case w1)) \n            second-word-seq (seq (clojure.string/lower-case w2))]\n      (loop [w1-vals (map char-map first-word-seq)\n               w2-vals (map char-map second-word-seq)]      \n         (if (nil? (first w1-vals))\n            false\n            (if (nil? (first w2-vals))\n               true\n               (if (> (first w1-vals) (first w2-vals))\n               true\n               (if (= (first w1-vals) (first w2-vals))\n                  (recur (rest w1-vals) (rest w2-vals))\n                  false)))))))\n                \n         (get-position-in-sorted [w low] \n\n   (if (= (count low) 1)\n     (if (w1-gt-w2 w (first low))\n       1\n       0\n       )\n      \n     (loop [w w remaining-words low i 0]\n       (if (nil? (first remaining-words))\n         i \n         \n         (if (w1-gt-w2 w (first remaining-words))\n           (recur w (rest remaining-words) (inc i))\n           i\n           ))\n       ))\n\n)\n         (insert-yo [w s i]\n            (concat (take i s) (concat [w] (drop i s))))]\n                \n            (let [ss (re-seq #\"\\w+\" s)] \n               ;; (loop [cur-sort order])\n               (loop [tail (rest ss) sorted-words [(first ss)]]\n                  (if (seq tail)\n                     (let [pos-in-sorted (get-position-in-sorted (first tail) sorted-words)]\n                        (recur (rest tail) (insert-yo (first tail) sorted-words pos-in-sorted)))\n                     sorted-words)\n                  )\n               \n            )\n                \n                \n                ))", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 70, "code": "#(->> %\n      (re-seq #\"\\w+\")\n      (sort (String/CASE_INSENSITIVE_ORDER)))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 70, "code": "(fn sort-words [sentance]\n  (->> sentance\n       (remove #{\\! \\.})\n       (apply str)\n       (#(clojure.string/split % #\" \"))\n       (sort-by clojure.string/lower-case)\n       ))", "user": "6004c750e4b074f607df6645"}, {"problem": 70, "code": "(fn [s]\n    (sort\n        (fn [x y] (compare (clojure.string/lower-case x) (clojure.string/lower-case y)))\n        (clojure.string/split\n            (apply str (filter #(not (contains? #{\\. \\, \\: \\; \\? \\!} %)) s))\n            #\" \")))", "user": "600ae927e4b074f607df6689"}, {"problem": 70, "code": "(fn f [s]\n  (->> (clojure.string/split s #\" \")\n       (map #(clojure.string/replace %  #\"[\\!\\.]\"\u3000\"\"))\n       (sort-by clojure.string/lower-case)))", "user": "5da7176ae4b000c986472c13"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"\\W\"))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 70, "code": "(fn split-and-sort [string]\n  (sort-by clojure.string/lower-case (clojure.string/split string #\"\\W\")))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 70, "code": "(fn [line] \n  (->> (clojure.string/split line #\"[ .?!]\")\n  \t   (sort-by #(clojure.string/lower-case %)) ))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 70, "code": "(fn word-sorting [str]\n  (sort-by (fn [word] (clojure.string/lower-case word))\n        (clojure.string/split str #\"\\W\")))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 70, "code": ";;(fn [s] (->> (clojure.string/split s #\" \")\n;;             (map #(clojure.string/replace % #\"[^a-zA-Z]\" \"\"))\n;;             (sort-by clojure.string/lower-case)\n;;         ))\n\n;; this solution by user 1067 seems quite elegant\n#(->> (re-seq #\"\\w+\" %)\n      (sort-by clojure.string/lower-case))", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 70, "code": "(fn [s]\n  (sort #(< (compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) 0) (clojure.string/split (clojure.string/replace s #\"[!.]\" \"\") #\" \")))", "user": "60228147e4b0d5df2af22202"}, {"problem": 70, "code": "#(->> %\n      (re-seq #\"\\w+\")\n      (sort-by clojure.string/lower-case))", "user": "60096aabe4b074f607df667f"}, {"problem": 70, "code": "(fn sort* [s]\n  (sort-by clojure.string/upper-case (clojure.string/split s #\"\\W+\")))", "user": "6022844de4b0d5df2af22203"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case \n          (re-seq #\"\\w+\" %))", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 70, "code": "(fn [s]\n  (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2))\n        (clojure.string/split (apply str (filter #(or \n  (Character/isLetter %)\n  (= % \\space)) s))\n                              #\" \"\n                              )))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 70, "code": "(fn [s] \n(->> \n     (clojure.string/split s #\" \")\n     (map (fn [w](filter #(Character/isLetter %) w)))\n     (map #(apply str %))\n     (sort String/CASE_INSENSITIVE_ORDER)\n))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 70, "code": "(fn [a]\n  (->> (clojure.string/replace a #\"[^\\w\\s]*\" \"\")\n   \t   (#(clojure.string/split % #\" \"))\n       (sort-by (comp identity clojure.string/lower-case))\n       (into [])))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 70, "code": "#(->> %\n      (re-seq #\"\\w+\")\n      (sort-by clojure.string/lower-case))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 70, "code": "(fn word-sort [string]\n  (sort-by clojure.string/lower-case (clojure.string/split (apply str (filter (fn [c] (not (contains? #{\\? \\. \\! \\:} c))) (seq string))) #\" \")))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 70, "code": "(fn a [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"\\w+\" s)))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 70, "code": "(fn foo [string]\n        (let [mycomp (fn mycomp [s1 s2]\n                       (let [s11 (clojure.string/lower-case s1)\n                             s22 (clojure.string/lower-case s2)\n                             len (min (count s1 ) (count s2))]\n                         (compare (clojure.string/join \"\" (take len s11 )) \n                                  (clojure.string/join \"\"(take len s22 )))\n                         ))]\n          (sort mycomp (clojure.string/split string #\" |\\.|!\"))\n          )\n        )", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 70, "code": "(fn f [s] \n  (->>\n   s\n  (re-seq #\"[a-zA-Z]+\")\n  (map #(vector (clojure.string/lower-case %) %))\n  (sort)\n  (map second)))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 70, "code": "(fn [s]\n    (sort-by \n     identity\n     (fn [a b] (.compareToIgnoreCase a b)) \n     (re-seq #\"[A-z]+\" s)))", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 70, "code": "(fn [urut]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" urut)))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 70, "code": "(fn split-sort [string]\n  (vec (sort (fn [& args] (apply compare (map clojure.string/lower-case args)))\n             (clojure.string/split (clojure.string/replace string #\"[^\\w\\s]\" \"\")\n                                   #\" \"))))", "user": "60460824e4b02d28681c77bc"}, {"problem": 70, "code": "(fn [s] (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split (apply str (re-seq #\"[A-Za-z ]\" s)) #\" \")))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 70, "code": "(fn split-sentence [text]\n  (map (fn [word]\n         (apply str (filter #(Character/isLetter %) word)))\n       (sort-by clojure.string/lower-case (clojure.string/split text #\" \"))))", "user": "6051bcfae4b056659d634203"}, {"problem": 70, "code": "#(->> (re-seq #\"\\w+\" %)\n      (sort-by clojure.string/upper-case))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 70, "code": "(fn [a]\n   (vec\n    (sort (fn [x y]\n            (compare (clojure.string/lower-case x) (clojure.string/lower-case y)))\n          (clojure.string/split (clojure.string/replace a #\"(\\.|\\!)\" \"\") #\" \"))))", "user": "5536452ae4b09218d5f44fbb"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "598e7998e4b02b9968b84d34"}, {"problem": 70, "code": "(fn [s] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" s)))", "user": "60471241e4b02d28681c77c9"}, {"problem": 70, "code": "(fn word-sort\n  [wstr]\n  (sort-by clojure.string/lower-case\n           (re-seq #\"[A-Za-z]+\" wstr)))", "user": "4e586949535d8a8b8723a292"}, {"problem": 70, "code": "(fn [args]\n   (->> args\n        (filter #(re-matches #\"[A-Za-z\\s]\" (str %)))\n        (apply str)\n        (#(clojure.string/split % #\"\\s\"))\n        (sort-by #(.toLowerCase %))))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 70, "code": "(fn __ [x]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n        (clojure.string/split x #\"[ .!]\")))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 70, "code": "(fn [s]\n    (let [my-index-of (fn [xs y]\n                        (loop [i 0]\n                          (when (< i (count xs))\n                            (if (= y (nth xs i))\n                              i\n                              (recur (inc i))))))]\n      (loop [s (apply str (filter #(not (or (= \\. %) (= \\! %))) s))\n\n             words [] i 0]\n        (println s words i)\n        (let [next-space-idx (my-index-of s \\space)]\n          (if (or (< 10 i) (nil? next-space-idx))\n            (sort #(compare (.toLowerCase %1) (.toLowerCase %2)) (conj words s))\n            (recur (subs s (inc next-space-idx))\n                   (conj words (subs s 0 next-space-idx))\n                   (inc i)))))))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 70, "code": "(fn word-sort [s]\n  (let [lowered (clojure.string/trim (clojure.string/join \"\" (re-seq #\"[a-zA-Z\\s]+\" s)))\n        splitted (clojure.string/split lowered #\"\\s+\")\n        ]\n    (sort-by clojure.string/lower-case splitted)))", "user": "60606490e4b03746e80ebf67"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split  % #\"\\W\"))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 70, "code": "(fn\n  [sentence]\n  (sort-by clojure.string/lower-case (clojure.string/split (clojure.string/replace sentence #\"[^\\w\\s]\" \"\") #\"\\s\")))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 70, "code": "(fn [s] (sort-by #(clojure.string/lower-case %)\n         (-> s \n             (clojure.string/replace #\"[^a-zA-Z ]\" \"\")\n             (clojure.string/split #\" \"))))", "user": "60654263e4b069485764ddc9"}, {"problem": 70, "code": "(fn split-sort [s]\n  (sort-by clojure.string/lower-case\n           (clojure.string/split\n            (clojure.string/replace s #\"[\\.,\\!\\?]\" \"\")\n            #\" \")))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 70, "code": "(fn problem-70 [s]\n  (->> (re-seq #\"\\w+\" s)\n       (sort-by (fn [s] (clojure.string/lower-case s)))))", "user": "5d669613e4b0db5d338d15ea"}, {"problem": 70, "code": "(fn foo [s]\r\n  (->>\r\n    (clojure.string/replace s #\"[.!]\" \"\")\r\n    (#(clojure.string/split % #\"\\s\"))\r\n    (sort-by clojure.string/lower-case)))", "user": "606e0a42e4b069485764de19"}, {"problem": 70, "code": "(fn [word] (sort-by clojure.string/lower-case (re-seq #\"\\w+\" word)))", "user": "606c87aae4b069485764de0d"}, {"problem": 70, "code": "(fn word-sorting\n  [s]\n  (sort-by #(.toLowerCase %) (clojure.string/split (clojure.string/replace s #\"[.!?/,]\" \"\") #\" \")))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 70, "code": "(fn  [sentence]\n  (sort #(compare (clojure.string/lower-case (str %1)) (clojure.string/lower-case (str %2))) (clojure.string/split (clojure.string/replace sentence #\"[^a-zA-Z\\s]\" \"\") #\" \")))", "user": "60743977e4b069485764de46"}, {"problem": 70, "code": "(fn [in]\n  (sort-by\n    #(clojure.string/lower-case %)\n    (clojure.string/split in #\"[\\ \\.!]\")))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 70, "code": "(fn [s]\n   (sort-by clojure.string/upper-case\n            (-> s\n                (clojure.string/replace #\"\\.\" \"\")\n                (clojure.string/replace #\"\\!\" \"\")\n                (clojure.string/split #\" \"))))", "user": "5d5c2730e4b09db18d4482ea"}, {"problem": 70, "code": "(fn [s]\n    (let [rplce clojure.string/replace\n          ucase clojure.string/upper-case\n          split clojure.string/split]\n     (map #(rplce % #\"!|\\.\" \"\")\n          (sort-by ucase (split s #\" \")))))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 70, "code": "(fn [input]\n  (letfn [(sort-words [position words]\n              (->> words\n                  (sort-by #(clojure.string/upper-case (nth % position)))\n                  (partition-by #(clojure.string/upper-case (nth % position)))\n                  (map #(if (> (count %) 1) (sort-words (inc position) %) %))))]\n    (->> (clojure.string/replace input #\"[.,:!?]\" \"\")\n        (partition-by #(= \\space %))\n        (remove #(= (first %) '\\space))\n        (map #(apply str %))\n        (sort-words 0)\n        flatten)))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 70, "code": "(fn [s]\n  (sort (fn [a b] (compare (.toLowerCase a) (.toLowerCase b)))\n        (re-seq #\"\\w+\" s)))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "606ff89be4b069485764de22"}, {"problem": 70, "code": "(fn sort-words [sentence]\n  (let [words (clojure.string/split sentence #\"\\W\")]\n    (sort-by clojure.string/lower-case words)))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 70, "code": "#(vec (sort-by (fn [n] (str (clojure.string/lower-case n)))\n                 (clojure.string/split \n                  (clojure.string/replace % #\"[^\\w\\s]\" \"\") #\" \")))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 70, "code": "(fn [s]\n  (sort-by #(.toLowerCase %)\n           (clojure.string/split s #\"[^\\w]\")))", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 70, "code": "(fn  [text] (sort-by #(clojure.string/lower-case %) (clojure.string/split  (->> \n    text\n    (filter #(or (Character/isLetter %) \n                 (Character/isSpace %)\n                 (Character/isDigit %)))\n    (apply str)) #\" \")))", "user": "6076adb2e4b069485764de60"}, {"problem": 70, "code": "(fn word-sort [string]\n  (sort-by clojure.string/lower-case (clojure.string/split string #\" |\\!|\\.|\\?\")))", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case (re-seq #\"\\w+\" s)))", "user": "60794173e4b0a637ed78035d"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 70, "code": "(fn [str]\n  (sort #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2)) (clojure.string/split (clojure.string/replace str #\"[!.]\" \"\") #\" \")))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 70, "code": "(fn sort-words\n  [s]\n  (let [normalize (fn [word] (clojure.string/replace word #\"[^A-Za-z]\" \"\"))]\n    (->> (clojure.string/split s #\" \")\n         (map normalize)\n         (sort-by clojure.string/lower-case))))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 70, "code": "(fn [text] (sort\n               #(compare (clojure.string/lower-case %1) (clojure.string/lower-case %2))\n               (re-seq #\"\\w+\" text)\n               ))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 70, "code": "(fn [str]\n  (sort-by clojure.string/upper-case (re-seq #\"[A-Za-z]+\" str)))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 70, "code": "#(->> (clojure.string/split % #\"[^\\w]\")\n     (sort-by clojure.string/lower-case))", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 70, "code": "(fn [text]\n  (sort-by #(.toLowerCase %) (re-seq #\"[A-Za-z]+\" text)))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 70, "code": "(fn [text]\n  (->> (re-seq #\"\\w+\" text)\n       (sort-by clojure.string/lower-case)))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 70, "code": "(fn [s]\n  (let [sv (clojure.string/split s #\"\\s+\")\n        svf (->> sv\n                 (map #(filter (fn [x] (Character/isLetter x)) %))\n                 (map #(apply str %)))]\n    (sort #(compare (clojure.string/upper-case %1) (clojure.string/upper-case %2)) svf)\n    ))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (clojure.string/split % #\"[^A-Za-z]+\"))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 70, "code": "(fn [s]\n  (sort (fn [a b] (compare (clojure.string/lower-case a) (clojure.string/lower-case b)))\n        (clojure.string/split s #\"[ .!]+\")))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 70, "code": "(fn word-sorting\n  [s]\n  (let [remove-punctuation (fn [s] (->> (filter #(or (Character/isLetterOrDigit %)\n                                                     (Character/isSpace %))\n                                                s)\n                                        (apply str)))\n        tokens (-> s\n                   remove-punctuation\n                   (clojure.string/split #\" \"))]\n    (sort-by #(clojure.string/lower-case %) tokens)))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 70, "code": "#(sort-by clojure.string/lower-case (re-seq #\"\\w+\" %))", "user": "4fe49706e4b0e8f79898feb7"}, {"problem": 70, "code": "(fn [s]\n    (->> (clojure.string/split s #\"\\W\")\n         (sort-by clojure.string/lower-case)\n         vec))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 70, "code": "(fn [str] (sort-by #(.toLowerCase %) (re-seq #\"\\w+\" str)))", "user": "60c65b10e4b0e0fa5f1b42d3"}, {"problem": 70, "code": "(fn [s]\n   (let [caps (re-seq #\"[A-Z][a-z]+\" s)\n         cap-map (->> caps\n                      (map #(hash-map (.toLowerCase %) %))\n                      (apply merge))]\n     (map #(if (contains? cap-map %) (cap-map %) %)\n          (-> (.toLowerCase s)\n              (clojure.string/split #\"\\s|[.!,]\")\n              sort))))", "user": "5fa80c01e4b0fa27300f3de2"}, {"problem": 70, "code": "(fn [s]\n  (sort-by clojure.string/lower-case\n    (re-seq #\"[A-Za-z]+\" s)))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 70, "code": "(fn word-sort [sentance]\n  (sort #(compare (.toLowerCase %1) (.toLowerCase %2))\n        (clojure.string/split sentance #\"[ \\.!]\")))", "user": "60c91f48e4b0e0fa5f1b4304"}]