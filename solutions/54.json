[{"code": "#(map (fn [x] (take % (drop (* % x) %2)))\r\n  (range (quot (count %2) %)))", "problem": 54, "user": "4dce6e41535d5973398f92a2"}, {"code": "(fn[n c](take-while #(= n(count%))(rest(map first(iterate(fn[[x y]](split-at n y))[[]c])))))", "problem": 54, "user": "4dad8fe9c9a9d6ed1899dc57"}, {"code": "(fn p [n c] (when (<= n (count c)) (cons (take n c) (p n (drop n c)))))", "problem": 54, "user": "4dc986d0535d5973398f9285"}, {"code": "(fn [n xs] (filter #(= (count %) n) (map #(first (split-at n (drop % xs)))(range 0 (count xs) n))))", "problem": 54, "user": "4dc3780b535da86f151f0c3f"}, {"code": "(fn f[n s]\r\n  (if (< (count s) n) []\r\n(concat[(take n s)](f n(drop n s)))\r\n)\r\n)", "problem": 54, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "(fn part [n ls]\r\n  (lazy-seq\r\n   (if (empty? ls)\r\n     ()\r\n     (let [[fs rs] (split-at n ls)\r\n           len (count fs)]\r\n       (if (< len n)\r\n         ()\r\n         (cons fs (part n rs)))))))", "problem": 54, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn [n coll] (loop [coll coll ret []] (if (<= n (count coll)) (recur (drop n coll) (conj ret (take n coll))) ret)))", "problem": 54, "user": "4db5082e535d87e67b28fe03"}, {"code": "(fn my-partition [n xs]\r\n  (if (< (count xs) n)\r\n    ()\r\n    (conj (my-partition n (drop n xs)) (take n xs))))", "problem": 54, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn [n coll]\r\n    (loop [acc [] r-coll coll]\r\n      (if (>= (count r-coll) n)\r\n        (recur (conj acc (take n r-coll)) (drop n r-coll))\r\n        acc)))", "problem": 54, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn [dim coll]\r\n  (loop [acc [] coll coll]\r\n    (if (and (seq coll) (>= (count coll) dim))\r\n      (recur (conj acc (take dim coll))\r\n             (drop dim coll))\r\n      acc)))", "problem": 54, "user": "4dbb1126535d1e037afb21b3"}, {"code": "(fn my-partition [k s]\r\n  (let [[part remainder] (split-at k s)]\r\n    (if (= k (count part))\r\n      (cons part (my-partition k remainder))\r\n      nil)))", "problem": 54, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn mpartial [n lst]\r\n  (loop [ls lst xs '() pos 0]\r\n    (if (< (count ls) n)\r\n      (reverse xs)\r\n      (recur  (drop n ls) (conj xs (take n ls)) (+ pos n)))))", "problem": 54, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn foo [n xs]\r\n  (when (>= (count xs) n)\r\n    (cons (take n xs) (foo n (drop n xs)))))", "problem": 54, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn [num coll]\r\n  (for [x (range (int (/ (count coll) num)))]\r\n\t\t(take num (drop (* x num) coll))\r\n\t)\r\n)", "problem": 54, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn splitgood [nume lis]\r\n  (loop [acclis '[], rstlis lis]\r\n\t\t(if (< (count rstlis) nume)\r\n\t\t\tacclis\r\n\t\t\t(let [ltemp (split-at nume rstlis)]\r\n\t\t\t\t(recur (conj acclis (first ltemp)) (last ltemp))))))", "problem": 54, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn p [n xs]\r\n  (when (>= (count xs) n)\r\n    (cons (take n xs) (p n (drop n xs)))))", "problem": 54, "user": "4dd52e29535dae65d5c462e5"}, {"code": "(fn [n l] (map first (take-while #(= n (count (first %)))\r\n  (iterate (fn[x] (split-at n (last x))) (split-at n l)))))", "problem": 54, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn [n xs]\r\n  (filter #(= (count %) n)\r\n   (map #(map second %)\r\n        (partition-by #(int (/ (first %) n))\r\n                      (map list (range (count xs)) xs)))))", "problem": 54, "user": "4ddc1c89535d02782fcbea01"}, {"code": "(fn [n i-list]\r\n    (filter\r\n        #(= n (count %))\r\n        (reduce\r\n        (fn [current next]\r\n            (let [head (drop-last current) tail (last current)]\r\n                (if (nil? last) (vector next)\r\n                    (if (= n (count tail))\r\n                        (conj (apply vector current) (vector next))\r\n                        (conj (apply vector head) (conj (apply vector tail) next))))))\r\n        []\r\n        i-list)))", "problem": 54, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "(fn [n coll]\r\n  (filter #(>= (count %1) n)\r\n          (loop [i n\r\n                 coll coll\r\n                 r '()]\r\n            (if (empty? coll)\r\n              (reverse (conj (rest r) (reverse (first r))))\r\n              (if (= i 0)\r\n                (recur n coll (conj (rest r) (reverse (first r)) '()))\r\n                (recur (- i 1) (rest coll) (conj (rest r) (conj (first r) (first coll)))))))))", "problem": 54, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "#(let [res1  (reduce (fn [[first-elm :as acc] elm]\r\n  \t\t(if (< (count first-elm) %)\r\n\t\t\t  (cons (conj first-elm elm) (rest acc))\r\n\t\t\t  (cons [elm] acc)))\r\n\t\t      [[]]\r\n\t\t      %2)]\r\n    (if (< (count (first res1)) %)\r\n      (reverse (rest res1))\r\n      (reverse res1)))", "problem": 54, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "(fn [sz coll]\r\n  (loop [result [], src coll]\r\n    (let [v (take sz src)\r\n          n (drop sz src)]\r\n      (if (= sz (count v))\r\n        (recur (conj result v) n)\r\n        (seq result)))))", "problem": 54, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [n coll]\r\n  (reverse\r\n  (loop [col coll\r\n         ret '()]\r\n    (if (>= (count col) n)\r\n      (recur (last (split-at n col)) \r\n             (conj ret (first (split-at n col))))\r\n      ret))))", "problem": 54, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "(fn [no coll]\r\n  (take-while #(= (count %) no) (map #(take no %) (iterate #(drop no %) coll))))", "problem": 54, "user": "4db86aee535d1e037afb2193"}, {"code": "(fn d [n s]\r\n  (cond (empty? s) '()\r\n        (< (count s) n) '()\r\n        :else (cons (take n s) (d n (drop n s)))))", "problem": 54, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "(fn [n xs]\r\n       (loop [coll xs\r\n              out []]\r\n         (let [item (take n coll)]\r\n            (if (= (count item) n)\r\n              (recur (drop n coll) (conj out item))\r\n              out))))", "problem": 54, "user": "4deb529a535d08e6dec9fe04"}, {"code": "(fn partition2 [n coll]\r\n  (when (<= n (count coll))\r\n    (cons (take n coll) (partition2 n (drop n coll)))))", "problem": 54, "user": "4df168bd535d08e6dec9fe1d"}, {"code": "(letfn\r\n  [(mypartition [size coll]\r\n    (let [v (vec coll)\r\n          c (count v)]\r\n      (for [i (range (quot c size))\r\n            :let [offset (* i size)]]\r\n        (subvec v offset (+ offset size))\r\n      )))]\r\n  #(mypartition %1 %2)\r\n)", "problem": 54, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [n s]\r\n  (loop [chunks [] rest-s s]\r\n      (if (> n (count rest-s))\r\n        chunks\r\n        (recur (conj chunks (take n rest-s)) (drop n rest-s)))))", "problem": 54, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn par [n coll]\r\n  (loop [old (drop n coll), next-coll (take n coll), result []]\r\n    (if (not= (count next-coll) n)\r\n      result\r\n      (recur (drop n old) (take n old) (conj result next-coll)))))", "problem": 54, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn [n coll]\r\n        (remove #(< (count %) n)\r\n          (partition-by #(quot % n) coll)))", "problem": 54, "user": "4df669d4535d08e6dec9fe35"}, {"code": "(fn part [n xs]\r\n  (if (seq (drop (dec n) xs))\r\n    (lazy-seq\r\n      (cons (take n xs)\r\n            (part n (drop n xs))))))", "problem": 54, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "(fn p [n coll] (if (>= (count coll) n)  \r\n    (cons (take n coll) (p n (drop n coll))) ))", "problem": 54, "user": "4def301c535d08e6dec9fe12"}, {"code": "(fn [n coll]\r\n  (loop [res '[] coll coll]\r\n    (if (< (count coll) n) res\r\n      (recur (conj res (take n coll)) (drop n coll)))))", "problem": 54, "user": "4e02bee8535d04ed9115e791"}, {"code": "(fn p [n l]\r\n  (let [x (take n l)]\r\n    (when (= n (count x))\r\n      (cons x (p n (drop n l))))))", "problem": 54, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn [step xs]\r\n   (filter #(= (count %) step)\r\n           (reduce (fn [x y]\r\n                     (let [last (peek x)]\r\n                       (if (< (.length last) step)\r\n                         (assoc x (dec (.length x)) (conj last y))\r\n                         (conj x [y]))))\r\n\r\n                   [[(first xs)]] (rest xs)))\r\n   )", "problem": 54, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "(fn [n col] \r\n  (filter #(>= (count %) n)\r\n    (for [off (range 0 (count col) n)] \r\n     (take n (drop off col)))))", "problem": 54, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn lo [times x]\r\n  (list*\r\n  (loop [end [] st x]\r\n    (if (< (count st) times)\r\n      end\r\n      (recur\r\n        (conj end (take times st))\r\n        (drop times st))))))", "problem": 54, "user": "4de18de7535d08e6dec9fde8"}, {"code": "(fn [n c]\n  (map #(subvec (vec c) % (+ n %)) \n    (range 0 (* n (quot (count c) n)) n)))", "problem": 54, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn part [n coll]\r\n  (loop [ret [], xs coll]\r\n  (if (< (count xs) n)\r\n    ret\r\n    (recur (conj ret (take n xs)) (drop n xs)))))", "problem": 54, "user": "4e123905535d04ed9115e7ce"}, {"code": "(fn partition2 [n coll]\r\n  (when (<= n (count coll))\r\n    (cons (take n coll) (partition2 n (drop n coll)))))", "problem": 54, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "#(loop [s %2 r []]\r\n   (if (< (count s) %) r\r\n     (recur (drop % s) (conj r (take % s)))))", "problem": 54, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn [n coll]\r\n  (take-while #(= (count %) n) (map (partial take n) (iterate (partial drop n) coll))))", "problem": 54, "user": "4e14108c535d04ed9115e7dd"}, {"code": "#(map (fn [x] (take % (drop (* % x) %2)))\r\n  (range (quot (count %2) %)))", "problem": 54, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn [n coll]\r\n  (for [dat (partition-by first\r\n                          (map-indexed (fn [x y] [(int (/ x n)) y])\r\n                                       coll))\r\n        :when (= n (count dat))]\r\n    (map second dat)))", "problem": 54, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn partition-seq\r\n  ([x y]\r\n    (partition-seq x (rest y) (vector (first y)) (vector)))\r\n  ([x y z w]\r\n    (if (= 0 (count y))\r\n      (if (= x (count z))\r\n        (list* (conj w (list* z)))\r\n        (list* w))\r\n      (if (= x (count z))\r\n        (recur x (rest y) (vector (first y)) (conj w (list* z)))\r\n        (recur x (rest y) (conj z (first y)) w)))))", "problem": 54, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn partition-seq [n coll]\r\n  (loop [coll coll\r\n         held []]\r\n    (if (or (empty? coll) (< (count coll) n)) held\r\n        (recur (drop n coll) (conj held (take n coll))))))", "problem": 54, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "(fn [n ls]\n  (apply map list\n    (for [i (range n)]\n      (take-nth n (drop i ls)))))", "problem": 54, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn [n s]\n  (loop [res [] remaining s]\n    (if (< (count remaining) n)\n      res\n      (recur (conj res (take n remaining)) \n             (drop n remaining)))))", "problem": 54, "user": "4e28120f535deb9a81d77efa"}, {"code": "(fn part [n coll]\n  (loop [acc [] coll coll]\n    (if (< (count coll) n)\n      acc\n      (recur (conj acc (take n coll)) (drop n coll)))))", "problem": 54, "user": "4e22b78b535d04ed9115e81e"}, {"code": "(fn ps [k lt]\n  (letfn [(rec [lt len st]\n               (cond\n                 (< len k) st\n                 (seq lt) (rec (drop k lt) (- len k) (conj st (take k lt)))\n                 :else st))]\n    (rec lt (count lt) [])))", "problem": 54, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "(fn [n s]\n  (loop [res (list (take n s)) r (drop n s)]\n    (if (> n (count r))\n      res\n      (recur (concat res (list (take n r))) (drop n r)))))", "problem": 54, "user": "4dbd0161535d020aff1edf3f"}, {"code": "(fn [n as]\r\n   (loop [i n as as curr '() ret '()]\r\n     (if (zero? i)\r\n       (recur n as '() (conj ret (reverse curr)))\r\n       (if (nil? (seq as))\r\n         (reverse ret)\r\n         (recur (dec i) (rest as) (conj curr (first as)) ret)))))", "problem": 54, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "(fn partishn [n coll]\n  (let [C2 (take n coll)]\n    (if (< (count C2) n)\n      nil\n      (lazy-cat [C2] (partishn n (drop n coll))))))", "problem": 54, "user": "4e31a15c535deb9a81d77f1e"}, {"code": "#(\n  (fn f [a]\n    (if (>= (count a) %)\n      (cons (take % a) (f (drop % a)))\n  ))\n  %2\n)", "problem": 54, "user": "4e307313535deb9a81d77f14"}, {"code": "(fn [n coll]\r\n    (loop [src coll \r\n           acc (list)]\r\n        (if (< (count src) n) \r\n            (reverse acc)\r\n            (recur \r\n                (drop n src) \r\n                (cons (take n src) acc)))))", "problem": 54, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "(fn my-partition [n coll]\n  (let [head (take n coll)]\n    (if (= (count head) n)\n      (cons head (my-partition n (drop n coll)))\n      ())))", "problem": 54, "user": "4e39fb68535deb9a81d77f47"}, {"code": "(fn a [n s] \n  \t   (when (not-empty (drop (dec n) s))\n\t\t      (cons (take n s) (a n (drop n s) ))))", "problem": 54, "user": "4e218464535d04ed9115e816"}, {"code": "(fn [n s]\n               (loop [accum `()\n                      s s]\n                 (if (and (seq s)\n                          (>= (count s) n))\n                   (recur (conj accum (take n s)) (drop n s))\n                   (reverse accum))))", "problem": 54, "user": "4e08fb7a535d04ed9115e7ac"}, {"code": "(fn [x y]\n  ( seq ((fn [acc p s]\n    (if (< p 1)\n        acc\n        (recur (conj acc (take x s))\n               (dec p)\n               (drop x s) ) ))\n    [] (quot (count y) x) (drop-last (rem (count y) x) y) )))", "problem": 54, "user": "4e333091535deb9a81d77f25"}, {"code": "(fn particion [n xs]\n  (if (< (count xs) n)\n    ()\n    (cons (take n xs) (particion n (drop n xs)))))", "problem": 54, "user": "4db51ce0535d87e67b28fe06"}, {"code": "(fn my-partition [n xs]\n  (lazy-seq\n   (when (>= (count xs) n)\n     (cons (take n xs) (my-partition n (drop n xs))))))", "problem": 54, "user": "4e50b67b535dc968683fc4ed"}, {"code": "#(loop [coll %2 acc [] next []]\n   (cond\n     (= (count next) %)\n       (recur coll (conj acc next) [])\n     (empty? coll)\n       acc\n     :else\n       (recur (rest coll) acc\n              (conj next (first coll)))))", "problem": 54, "user": "4e4ae5aa535dc968683fc4d2"}, {"code": "(fn mypartition [n coll]\r\n  (if (>= (count coll) n)\r\n    (lazy-seq (cons (take n coll)\r\n  \t    (mypartition n (drop n coll))))))", "problem": 54, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn [n xs] \n  (loop [acc []\n         ys  xs]\n    (if (or (empty? ys) (< (count ys) n))\n      acc\n      (recur (into acc [(take n ys)]) (drop n ys)))))", "problem": 54, "user": "4e513758535dc968683fc4f3"}, {"code": "#(loop [s %2 q []]\n   (if (= s ())\n     q\n     (let [c (take % s)\n           z (if (< (count c) %) q (conj q c))]\n       (recur (drop % s) z))))", "problem": 54, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "#(for [s (range (int (/ (count %2) %)))]\n    (subvec (vec %2) (* s %) (* (+ 1 s) %)))", "problem": 54, "user": "4e52d815535d302ef430da77"}, {"code": "#(loop [r [] c %2]\n  (if (< (count c) %)\n    r\n    (recur (conj r (take % c))\n           (drop % c))))", "problem": 54, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn fx [n coll]\n  (lazy-seq\n    (let [[f r] (split-at n coll)]\n      (if (= n (count f))\n        (cons f (fx n r))))))", "problem": 54, "user": "4e4ad154535dc968683fc4d1"}, {"code": "#(loop [s %2 a []]\n  (if (< (count s) %1) a\n    (recur (drop %1 s) (conj a (take %1 s)))))", "problem": 54, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn part [n s]\n  (let [p (take n s)]\n    (if (= (count p) n)\n      (cons p (part n (drop n s))))))", "problem": 54, "user": "4e5676b2535d8a8b8723a282"}, {"code": "#(loop [acc [] coll %2]\n  (if (seq coll)\n    (if (< (count coll) %1)\n      acc\n      (recur (conj acc (take %1 coll)) (drop %1 coll)))\n    acc))", "problem": 54, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn[n a-seq]\n  (remove #(not (zero? (mod (count %) n)))\n          (for [k (range 0 (count a-seq) n)]\n            (take n (drop k a-seq)))))", "problem": 54, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "(fn partition-sequence [n coll]\n  (filter #(= n (count %)) (reduce (fn [l e]\n                                \t      \t(if (= (count (last l))\tn)\n                                          (conj\tl (vector e))\n                                          (conj (vec  (butlast l)) (conj (vec (last l)) e))))\n                                      []\n                                      coll)))", "problem": 54, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "(fn part [n lst]\n  (if (< (count lst) n) '()\n    (cons\n      (take n lst)\n      (part n (drop n lst)))))", "problem": 54, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn part [l xs]\n  (let [[left right] (split-at l xs)]\n    (if (not-empty right)\n      (cons left (part l right))\n      (when (== (count left) l)\n        (list left)))))", "problem": 54, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn my-partition [size col]\n        (when (and (seq col) (>= (count col) size))\n          (lazy-seq (cons (take size col) (my-partition size (nthnext col size))))))", "problem": 54, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn [n c]\n  (loop [r [] s c]\n    (if (< (count s) n)\n      r\n      (recur (conj r (take n s)) (drop n s)))))", "problem": 54, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn my-partition\n  [n coll]\n  (when (<= n (count coll))\n      (cons (take n coll) (my-partition n (drop n coll)))))", "problem": 54, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn split-into [x aSeq]\n            (loop [remainder aSeq, answer []]\n               (let [[a b] (split-at x remainder)]\n                    (if (= x (count a)) \n                        (recur b  (conj answer a))\n                        answer))))", "problem": 54, "user": "4e463703535dc968683fc4b2"}, {"code": "(fn f [n xs]\n    (if (< (count xs) n)\n      ()\n      (conj (f n (drop n xs))\n            (take n xs))))", "problem": 54, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "(fn [n s] \n   (let [[a b] (reduce \n                 (fn [[r s] x]\n                   (if (> n (count s)) \n                     [r (conj s x)]              \n                     [(conj r s) [x]]))\n                 [[] []]\n                 s)]\n   (if (= n (count b))\n     (conj a b)\n     a)))", "problem": 54, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn mypartition [n coll]\n  (when (seq coll)\n  (let [group (take n coll)]\n\t  (when (= (count group) n)\n\t\t(cons group (mypartition n (drop n coll)))))))", "problem": 54, "user": "4e50c894535dc968683fc4ee"}, {"code": "(fn k-partition [n x]\n  \"4clojure.com/problem/54\"\n  (loop [coll x\n         res []]\n    (let [part (when (<= n (count coll)) (take n coll))]\n      (if (or (nil? part) (empty? coll))\n        res\n        (recur (drop n coll) (conj res part))))\n    ))", "problem": 54, "user": "4db58ccb535d87e67b28fe10"}, {"code": "(fn partition*\n  [n coll]\n  (when (and (seq coll) (>= (count coll) n))\n    (cons (take n coll) (lazy-seq (partition* n (drop n coll))))))", "problem": 54, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "(fn[n s]\n  (loop [[f r] (split-at n s) acc '()]\n    (if (< (count f) n) (reverse acc)\n        (recur (split-at n r) (conj acc f)))))", "problem": 54, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "(fn [n coll]\n   (loop [acc []\n          coll coll]\n     (if-let [s (seq coll)]\n       (let [c (take n coll)]\n         (recur\n           (if (= n (count c))\n             (conj acc c)\n             acc)\n           (drop n coll)))\n       acc)))", "problem": 54, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "(fn [x coll]\n  (let [iter (fn [so-far coll]\n    (if (empty? coll)\n      so-far\n      (if (> x (count coll))\n        so-far\n        (recur (conj so-far (take x coll))\n               (take-last (- (count coll) x) coll)))))]\n  (iter [] coll)))", "problem": 54, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn partition*\n  ([n coll]\n     (partition* n coll []))\n  ([n coll res]\n     (if (< (- n 1) (count coll))\n       (partition* n (drop n coll) (conj res (take n coll)))\n       res)))", "problem": 54, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn [x y] (filter #(= x (count %)) (vals (group-by #(quot % x) y))))", "problem": 54, "user": "4e588e84535d8a8b8723a294"}, {"code": "(fn partition- [x coll]\n  \"54. Write a function which returns a sequence of lists of x items each.\"\n  (when-let [s (seq coll)]\n    (if  (>= (count s) x)\n      (cons (take x s) (partition- x (drop x s))))))", "problem": 54, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn this [n coll]\n  (let [[a b] (split-at n coll)]\n    (when (= n (count a))\n      (cons a (this n b)))))", "problem": 54, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn f [n lst]\n  (when (>= (count lst) n)\n    (cons (take n lst) (f n (drop n lst)))))", "problem": 54, "user": "4e68dbd5535d8ccf87e9fe8f"}, {"code": "#(for [x %2 \n  :while (< (+ x %1) (+ 1 (count %2))) \n  :when (= (mod x %1) 0)]  \n  (range x (+ x %1)))", "problem": 54, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn part [n coll]\n  (for [xs (iterate #(drop n %) coll)\n  :while (not (empty? xs))\n\t:when (>= (count xs) n)] \n    (take n xs)))", "problem": 54, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "(fn [n x] (filter #(= (count %) n) \n      (for [i (range 0 (count x) n)]\n  (take n (nthnext x i)))))", "problem": 54, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "#(loop [r %2 a []]\n  (if (and (seq r) (>= (count r) %))\n    (recur (drop % r) (conj a (take % r)))\n    a))", "problem": 54, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "#(loop [n %1 s %2 r []]\n  (let [[c d] (split-at n s)]\n    (if (= (count c) n)\n       (recur n d (conj r c))\n       r)))", "problem": 54, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn part [p x]\n  (->> (iterate \n         (fn [o]\n           (mapcat\n             #(if (> (count %) p)\n                (split-at p %)\n                [%]\n             )\n           o)\n         )\n         (vector x))\n    (take 5)\n    (filter #(and (not= (count (last %)) '()) (<= (count (last %)) p)))\n    (last)\n    (filter #(= p (count %)))\n  )\n)", "problem": 54, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn p [n c]\n          (when (>= (count c) n)\n            (cons (take n c) (p n (drop n c)))))", "problem": 54, "user": "4e6b3fc8535d8ccf87e9ff0f"}, {"code": "(fn [n xs]\r\n  (loop [n n xs xs ls '(())]\r\n    (if (not (seq xs))\r\n      (filter #(= (count %) n) (reverse ls))\r\n      (if (= n (count (first ls)))\r\n        (recur n (next xs) (cons (list (first xs)) ls))\r\n        (recur n (next xs) (cons (concat (first ls) (list (first xs))) (rest ls)))))))", "problem": 54, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "(fn part [n s]\n  (loop [n n, c 0, s s, r [], t []]\n    (if s\n      (let [t (conj t (first s)), b (= (inc c) n), r (if b (conj r t) r), \n              c (if b 0 (inc c)), t (if b [] t)]\n        (recur n c (next s) r t))\n      r)\n    ))", "problem": 54, "user": "4e44358f535dc968683fc4a8"}, {"code": "(fn [size input]\n    (loop [in input\n           out '()]\n        (if (< (count in) size)\n            (reverse out)\n            (recur (drop size in) \n                   (cons (take size in) out)))))", "problem": 54, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "(fn [n s]\n  (apply (partial map list)\n         (map #(take-nth n (drop % s)) (range n))))", "problem": 54, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn f [n coll]\n  (let [part (take n coll)]\n    (when (= n (count part))\n      (lazy-cat [part]\n                (f n (drop n coll)))\n      )))", "problem": 54, "user": "4e6dd51b535d5021c1a895f6"}, {"code": "(fn partition-sequence [n coll]\n  (if ( > n (count coll))\n    nil\n    (cons (take n coll) (partition-sequence n (drop n coll)))))", "problem": 54, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "(fn partition2 [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (partition2 n (drop n coll)))))", "problem": 54, "user": "4e2f377a535deb9a81d77f10"}, {"code": "(fn [n,l]\n  ((fn [n,l,r]\n    (if\n      (< (count l) n) r\n      (recur n (drop n l) (concat r (list (take n l))))\n    )\n  ) n l '())\n)", "problem": 54, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn part [n c]\n  (loop [coll (vec c)\n          res []]\n    (if (empty? coll)\n      (filter #(= (count %) n) res)\n      (recur (drop n coll) (conj res (take n coll)))\n    )\n  )\n)", "problem": 54, "user": "4e6dd0f5535d5021c1a895f3"}, {"code": "(fn mys [n s] \n  (if (> n (count s)) nil\n  (cons (take n s) (mys n (drop n s)))))", "problem": 54, "user": "4e6e6630535d5021c1a89609"}, {"code": "(fn [n a-seq] (take-while #(= (count %) n) (map #(take n %) (iterate #(drop n %) a-seq))))", "problem": 54, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "(fn [n s] \n   (for [i (range (int (/ (count s) n)))]\n  \t (map #(+ (* n i) %) (range n))))", "problem": 54, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn _ [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (_ n (drop n coll)))))", "problem": 54, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn prttn\n     ([n s] (prttn n s [] [] #(= n (count %))))\n     ([n s partitions current-partition t]\n       (if (empty? s)\n         (if (t current-partition)\n           (conj partitions current-partition)\n           partitions)\n       (if (t current-partition)\n         (recur n (rest s) (conj partitions current-partition) (conj [] (first s)) t)\n         (recur n (rest s) partitions (conj current-partition (first s)) t)))))", "problem": 54, "user": "4e6a11ee535d8ccf87e9fe9f"}, {"code": "(fn [n coll] (loop [ret [] coll coll] (if (>= (count coll) n) (recur (conj ret (take n coll)) (drop n coll)) ret)))", "problem": 54, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn partition* [n xs]\n  (lazy-seq\n    (let [[head tail] (split-at n xs)]\n      (when (= n (count head))\n        (cons head (partition* n tail))))))", "problem": 54, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "#(loop [col %2 ret []] (if (or (empty? col) (< (count col) %1)) ret (recur (drop %1 col) (conj ret (take %1 col)))))", "problem": 54, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn my-partition [n coll]\n  (letfn [(fetch-part [count part rst]\n            (cond (= 0 count) [part rst]\n                  (empty? rst) [nil nil]\n                  :else (recur (dec count) (conj part (first rst)) (rest rst))))]\n    (let [[next-part next-rest] (fetch-part n [] coll)]\n      (if (nil? next-part)\n        ()\n        (lazy-seq (cons next-part\n                        (my-partition n next-rest)))))))", "problem": 54, "user": "4e7c8fd1535db169f9c796be"}, {"code": "#(loop [in [] coll %2]\n  (if (< (count coll) %1)\nin\n(recur (conj in (take %1 coll)) (drop %1 coll))))", "problem": 54, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(fn [x coll]\n  (let [f (fn [acc item] \n  \t    (let [last-index (- (count acc) 1)]\n\t\t      (if (= (count (last acc)) x)\n\t\t        (conj  acc [item])\n\t\t        (assoc acc last-index (conj (acc last-index) item)))))\n\t\tres (reduce f [[]] coll)\n\t\tres-adj (if (not= x (count (last res))) (pop res) res)\n\t\t]\n    res-adj))", "problem": 54, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "#(loop [l %2, r [], part []]  \n  (if (empty? l)\n    r\n    (let [f (first l), n (next l), p (conj part f)]\n      (if (= (count p) %)\n        (recur n (conj r p) [])\n        (recur n r p)))))", "problem": 54, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn  [n x] \n            (loop [acu '()  xx x ]\n              (if (< (count xx) n)\n                (reverse acu)\n                ;; else\n                (recur (conj acu (take n xx)) (drop n xx))))\n             )", "problem": 54, "user": "4dcc5aff535d5973398f9293"}, {"code": "(fn p [n s]\n  (let [t (take n s)]\n    (when (= (count t) n)\n      (cons t (p n (drop n s))))))", "problem": 54, "user": "4e7dd982535db169f9c796ee"}, {"code": "#(loop [s '(), b (take % %2), r (drop % %2)]\n  (if (= % (count b))\n    (recur (cons b s) (take % r) (drop % r))\n     (reverse s) \n  )\n)", "problem": 54, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn p [n s] (let [[a b] (split-at n s)] (when (= n (count a)) (cons a (p n b)))))", "problem": 54, "user": "4e7e55ab535db169f9c79711"}, {"code": "(fn[x y](map #(take x (drop (* x %) y)) (range (quot (count y) x))))", "problem": 54, "user": "4e7eff9e535db966e863cc38"}, {"code": "(fn my-partition [n coll]\n  (keep #(if (= (count %) n) % nil)\n        (for [i (range 0 (count coll) n)]\n          (take n (drop i coll)))))", "problem": 54, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn [n co]\r\n  (loop [res '() c co]\r\n    (if (< (count c) n)\r\n      (reverse res)\r\n      (recur (conj res (take n c)) (drop n c)))))", "problem": 54, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn f [n v]\n    (if (<= n (count v) ) \n      (cons (take n v) (f n (drop n v)))))", "problem": 54, "user": "4e6a4038535d8ccf87e9feb5"}, {"code": "(fn  part [n s]\n\n    (if (empty? s)\n      s\n\n      (if (< (count s) n)\n        ()\n    \n        (cons (take n s) (part n (drop n s)))\n        )\n\n)\n    )", "problem": 54, "user": "4e78c208535db95036265722"}, {"code": "#(loop [r [] i [(first %2)] k 1 c (rest %2)]\r\n    (if (seq c)\r\n      (if (= 0 (mod k %1))\r\n        (recur (conj r i) [(first c)] (inc k) (rest c))\r\n        (recur r (conj i (first c)) (inc k) (rest c)))\r\n      (if (= 0 (mod k %1))\r\n        (conj r i)\r\n        r)))", "problem": 54, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "(fn [n r]\n  ((fn ps [etc acc]\n    (if (> n (count etc))\n       acc\n       (let [[head tail] (split-at n etc)]\n          (ps tail (conj acc head)))))\n   r []\n  )     \n)", "problem": 54, "user": "4e720985535d5021c1a89655"}, {"code": "(fn f [n l]\n  (let [c (take n l)]\n    (lazy-seq\n      (when (= (count c) n)\n        (cons c (f n (drop n l)))))))", "problem": 54, "user": "4e7dfab0535db169f9c796f9"}, {"code": "#(loop [s %2 sr [] r []]\n  (if (seq s)\n      (recur (rest s) \n            (if (= %1 (count sr)) (vector (first s)) (conj sr (first s)))\n            (if (= %1 (count sr)) (conj r sr) r))\n      (if (= %1 (count sr)) (conj r sr) r)\n    )\n  )", "problem": 54, "user": "4e7e93f5535db169f9c7971a"}, {"code": "(fn f [n s] (let [[a b] (split-at n s)] \r\n(if (= n (count a)) (cons a (f n b)))))", "problem": 54, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn [n coll]\n\n    (\n    (fn jep [el] \n        (if-not (empty? el)\n            (cons (take n el) (lazy-seq (jep (drop n el))))\n        )\n    )\n    (map (fn [ix] (nth coll ix)) \n        (range\n            (* n\n            (int (/ (count coll) n)))\n        )\n    ))\n\n)", "problem": 54, "user": "4e78dc98535db95036265724"}, {"code": "(fn f [n x]\n  (if (>= (count x) n)\n    (cons (take n x) (f n (drop n x)))))", "problem": 54, "user": "4e823ed7535db62dc21a62c7"}, {"code": "#((fn [nc c]\n            (let [[f s] (split-at % c)]\n              (if (< (count f) %)\n                nc\n                (recur (conj nc f) s)))) [] %2)", "problem": 54, "user": "4e6ea1f5535d5021c1a8960e"}, {"code": "(fn [n coll]\n      (loop [fin [] col coll]\n\t       (if (nil? col) \n\t\t        (if (not= n (count (last fin)))  \n\t\t          (butlast fin)\n\t\t          fin)\n\t\t     (recur (conj fin (take n col)) (seq (drop n col))))))", "problem": 54, "user": "4e739e13535dff18050a9c76"}, {"code": "(fn f [n s]\n  (let [p (take n s)]\n    (when (= (count p) n)\n      (cons p (f n (drop n s))))))", "problem": 54, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn f [n c]\n   (lazy-seq\n    (let [p (take n c)]\n      (if (and (seq c) (= n (count p)))\n        (cons p (f n (drop n c)))))))", "problem": 54, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn [n xs]\r\n  (filter #(= (count %) n)\r\n    (loop [acc [] xs xs]\r\n     (if (empty? xs) acc\r\n         (recur (conj acc (take n xs)) (drop n xs))))))", "problem": 54, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn [x aseq]\n  (loop [i 0 p [] s aseq r []]\n    (let [\n      [q & rst] s\n      j (inc i)\n      part (conj p q)]\n      (cond\n        (zero? (mod j x))\n          (recur j [] rst (conj r part))\n        (nil? rst)\n          r\n        :else\n          (recur j part rst r)))))", "problem": 54, "user": "4e7e05a6535db169f9c796fe"}, {"code": "(fn ptn[n r]\n  (if (<= n (count r))\n    (lazy-seq (cons (take n r) (ptn n (drop n r))))))", "problem": 54, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn [n x]\n  (map #(map (fn [[a b]] b) %)\n       (partition-by (fn [[c d]] (quot c n))\n  \t     (map (fn [e f] (vector e f))\n\t\t\t  (range (count x))\n\t\t\t  (drop-last (rem (count x) n) x)))))", "problem": 54, "user": "4e6472b7535d8ccf87e9fe6c"}, {"code": "(fn [number lst-]\n   (reverse\n    (loop [lst lst- len (count lst-) output '()]\n      (if (< len number)\n  output\n\t(recur (drop number lst) (int (- len number)) (cons (take number lst) output))))))", "problem": 54, "user": "4e89ff3d535d3e98b802328a"}, {"code": "(fn [n coll]\n  (loop [i (quot (count coll) n) done [] todo coll]\n    (if (< 0 i)\n      (recur (dec i) (conj done (take n todo)) (drop n todo))\n      done)))", "problem": 54, "user": "4e8c1d97535d65386fec2127"}, {"code": "(fn my-part [n s]\n   (if (< (count s) n)\n     nil\n     (lazy-seq (cons (take n s) (my-part n (drop n s))))))", "problem": 54, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [n coll]\n  (loop [coll (vec coll) result [] currpack []]\n      (cond\n       (empty? coll) (if (< (count currpack) n)\n                       (seq result)\n                       (seq (conj result (seq currpack))))\n \n       (< (count currpack) n)\n       (recur (rest coll) result (conj currpack (first coll)))\n       :else\n       (recur (rest coll) (conj result (seq currpack)) [(first coll)]))))", "problem": 54, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "(fn mypartition [n coll]\n       (let [x  (take n coll)\n             xs (drop n coll)]\n          (when (= (count x) n)\n             (cons x (mypartition n xs)))))", "problem": 54, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn [n c]\n  (map \n    #(map second (second %)) \n    (filter \n      #(= (count (second %)) n) \n      (group-by #(first %) (map #(vector (quot % n) %) c)))))", "problem": 54, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn part\n([n coll buff]\n(if (< (count coll) n) buff \n  (part n (drop n coll) (concat buff [(take n coll)]))))\n([n coll] (part n coll [])))", "problem": 54, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn pt [n sq]\n  (let [t (take n sq)]\n    (when (= (count t) n)\n      (cons t (pt n (drop n sq))))))", "problem": 54, "user": "4e8f5eba535d65386fec214c"}, {"code": "(fn p [n s]\n  (when (<= n (count s))\n    (cons (take n s) (p n (drop n s)))))", "problem": 54, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn partition* [n coll]\n  (when-let [s (seq coll)]\n    (let [[head tail] (split-at n s)]\n      (when (= n (count head))\n        (cons head (lazy-seq (partition* n tail)))))))", "problem": 54, "user": "4dc0ff08535d020aff1edf84"}, {"code": "(fn p[c s]\n    (loop [a [] b s]\n\t     (if (< (count b) c)\n\t\t a\n\t\t (recur (conj a (take c b)) (drop c b)))))", "problem": 54, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn part [n l]\n  (if (< (count l) n)\n    '()\n    (cons (take n l) (part n (drop n l)))))", "problem": 54, "user": "4e89ddf9535d3e98b8023284"}, {"code": "(fn [ct coll]\n  ((fn accfn [acc cl]\n  \t(if (empty? cl)\n\t\t  acc\n      (accfn (conj acc (take ct cl)) (drop ct cl))))\n    []\n    (take (- (count coll) (rem (count coll) ct)) coll)))", "problem": 54, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn [x c]\n    (filter #(= x (count %))\n            (map #(take x (drop (* x %) c))\n                 (range 0 (inc (/ (count c) x))))))", "problem": 54, "user": "4db016af838c48654951d9b9"}, {"code": "#(->> [nil, %2]\n      (iterate (fn [[_ l]] (split-at % l)))\n      (rest) \n      (take-while (fn [[a _]] (= % (count a))))\n      (map first))", "problem": 54, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "#((partial (fn x [n s] \n             (if-not (> n (count s)) \n               (cons (take n s) \n                     (x n (drop n s))))) %1) %2)", "problem": 54, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [n seq]\n  (loop [i 1 ut [] s seq]\n    (if (> (* i n) (count seq))\n      (filter (fn [x] (== n (count x))) ut)\n      (recur (inc i) (conj ut (take n s)) (drop n s)))))", "problem": 54, "user": "4e955b95535dbda64a6f6b33"}, {"code": "(fn p [i s] (lazy-seq (when (and (seq s) (<= i (count s)))(cons (take i s) (p i (drop i s))))))", "problem": 54, "user": "4db92654535d1e037afb21a0"}, {"code": "(let [r (atom '())]\r\n     (fn p [n s]\r\n         (if (< (count s) n)\r\n\t\t   (reverse @r)\r\n\t\t   (do (swap! r conj (take n s))\r\n\t\t       (p n (drop n s))))))", "problem": 54, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn [x li] ( map #(take x (drop % li )  ) (range 0  (- (count li) (- x 1\n) ) x )  )  )", "problem": 54, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn t [n c] (lazy-seq (let [[h r] (split-at n c)] (when (= n (count h)) (cons h (t n r))))))", "problem": 54, "user": "4e96557d535dbda64a6f6b43"}, {"code": "#(for [i (range (quot (count %2) %))] (take % (drop (* i %) %2)))", "problem": 54, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "(fn [n coll]\r\n  (partition-by #(quot % n) \r\n    (take (- (count coll) (mod (count coll) n)) coll)))", "problem": 54, "user": "4e994541535dbda64a6f6b64"}, {"code": "(fn part\r\n  [n lista]\r\n\t(if (or (empty? lista) (> n (count lista)))\r\n\t\t'()\r\n\t\t(list* (take n lista) (part n (drop n lista)))))", "problem": 54, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn f [n coll]\n     (let [[front back] (split-at n coll)]\n       (if (= n (count front)) (conj (f n back) front) ())))", "problem": 54, "user": "4e9e0640535dbda64a6f6b91"}, {"code": "(fn part [f coll]\n  (loop [remain coll acc []]\n    (if (< (count remain) f)\n      acc\n      (recur (drop f remain) (conj acc (take f remain))))))", "problem": 54, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn p [n c]\n  (if (< (count c) n)\n    []\n    (cons (take n c) (lazy-seq (p n (drop n c))))))", "problem": 54, "user": "4ea09fa4535d7eef308072aa"}, {"code": "(fn part [step coll]\n  (let [bite (take step coll)\n        left (drop step coll)]\n    (if (= step (count bite))\n        (cons bite (part step left)))))", "problem": 54, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn my-partition [n s] (if (< (count s) n)\n                         ()\n                         (cons (take n s) (my-partition n (drop n s)))))", "problem": 54, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn partition2 [n coll]\r\n  (when (<= n (count coll))\r\n    (cons (take n coll) (partition2 n (drop n coll)))))", "problem": 54, "user": "4e8ddf32535d65386fec213c"}, {"code": "(fn [n coll]\n  (loop [coll coll acc []]\n    (if (< (count coll) n)\n    acc\n    (recur (drop n coll) (conj acc (take n coll))))))", "problem": 54, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn [n s]\n  (loop [r [] s s]\n    (cond\n      (empty? s) r\n      (< (count s) n) r\n      :else (recur \n        (conj r (take n s))\n        (take-last (- (count s) n) s)))))", "problem": 54, "user": "4ea67906535d7eef308072e4"}, {"code": "(fn [c ls]\n  (loop [res [] remn ls]\n    (if (> (count remn) (dec c))\n      (recur (conj res (take c remn)) (nthnext remn c))\n      res\n    )\n  )  \n)", "problem": 54, "user": "4ea57300535d7eef308072d5"}, {"code": "#(letfn [\n  (part [n s c]\n    (if (< (count s) n)\n      c\n      (let [[a b] (split-at n s)]\n        (recur n b (conj c a)))))]\n  (part % %2 []))", "problem": 54, "user": "4e8f4f64535d65386fec2149"}, {"code": "(fn [n coll] (loop [out [] coll coll]\n  (if (< (count coll) n)\n    out\n    (recur (conj out (take n coll)) (drop n coll)))))", "problem": 54, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn f [n s]\n  (let [[x r] (split-at n s)]\n    (if (< (count x) n)\n        '()\n        (conj (f n r) x))))", "problem": 54, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn part\n  [n s]\n  (when (<= n (count s))\n    (lazy-seq (cons (take n s)\n                    (part n (drop n s))))))", "problem": 54, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "#(for [s (range % (inc (count %2)) %)]\n  (take % (drop (- s %)%2)))", "problem": 54, "user": "4ea5e794535d7eef308072df"}, {"code": "(fn [k c]\n  ((fn [acc c]\n    (if (< (count c) k)\n        acc\n      (recur (conj acc (take k c)) (drop k c))))\n    [] c))", "problem": 54, "user": "4ead6418535d7eef3080731f"}, {"code": "(fn par [n coll]\n  (if (>= (count coll) n)\n    (cons (take n coll)\n          (par n (drop n coll)))))", "problem": 54, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn par2[n c]\r\n  (println (int(/ (count c) n) ))\r\n  (let [nx (last(split-at n c))]\r\n     (take (int(/ (count c) n) ) (cons (take n c) (if (> (count nx) 1) (par2 n nx ) [])))\r\n    )\r\n  )", "problem": 54, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "(fn part [i s]\n  (filter \n    #(= (count %) i) \n    (map second \n      (seq (group-by #(unchecked-divide % i) s)))))", "problem": 54, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn part [n s]\n  (let [p (take n s)\n        t (drop n s)]\n  (when (= n (count p))\n    (cons p (part n t)))))", "problem": 54, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn f [n l] (when (>= (count l) n) \n            (cons (take n l) (f n (drop n l)))))", "problem": 54, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn [n coll]\n    (loop [coll coll\n           answer []]\n      (if (or (nil? coll) (< (count coll) n)) answer\n          (recur (drop n coll) (conj answer (take n coll))))))", "problem": 54, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn p [n c]\n  (if (< (count c) n)\n      '()\n      (concat (list (take n c))\n              (p n (drop n c)))))", "problem": 54, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "(fn [size seqn]\n  (loop [s seqn, result []]\n    (let [sub-seq (take size s)]\n      (if (< (count sub-seq) size)\n        result\n        (recur (drop size s) (conj result sub-seq))))))", "problem": 54, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "(fn [x y]\n  (loop [data y len x res []]\n    (if (< (count data) len)\n      (reverse res)\n      (recur (drop len data) len (cons (take len data) res)))))", "problem": 54, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn [n coll]\n  ((fn iter [c lst ret]\n    (if c\n      (if (= n (count lst))\n(iter (next c) (-> c first list) (conj ret (reverse lst)))\n(iter (next c) (conj lst (first c)) ret))\n(if (= n (count lst))\n(conj ret (reverse lst))\nret))) coll '() []))", "problem": 54, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn f [n,s]\n  (if (< (count s) (* 2 n))\n    (list (take n s))\n    (cons (take n s) (f n (nthnext s n)))))", "problem": 54, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn part [n col] \n  (when-let [s (seq col)]\n    (let [p (take n s)]\n      (if (= n (count p))\n        (cons p (part n (drop n s)))))))", "problem": 54, "user": "4eb01df4535d7eef30807337"}, {"code": "(fn part[n coll]\n  (lazy-seq\n    (let [[x s] (split-at n coll)]\n      (when (= n (count x))\n        (cons x (part n s))))))", "problem": 54, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn f [n coll]\n  (when (>= (count coll) n)\n    (cons (take n coll) (f n (drop n coll)))))", "problem": 54, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "#(->> %2\n  (iterate (partial drop %))\n  (map (partial take %))\n  (take-while (comp (partial = %) count)))", "problem": 54, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn p [n s]\n  (if (>= (count s) n )\n    (cons (take n s) (p n (drop n s)))\n    '()))", "problem": 54, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn p [n s]\r\n  (letfn [ (f [n s acc]\r\n              (if (< (count s) n)\r\n                acc\r\n                (f n (drop n s) (conj acc (take n s)))\r\n              )\r\n            )]\r\n    (f n s []))\r\n)", "problem": 54, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "#(loop [c %1, s %2, res []] \n   (if (<= c (count s)) \n(recur c (drop c s) (conj res (take c s))) res))", "problem": 54, "user": "4eabb245535d7eef30807319"}, {"code": "(fn [n x] (loop [y x s '()]\n  (if (< (count y) n) (reverse s)\n    (recur (drop n y) (conj s (take n y))))))", "problem": 54, "user": "4ea9b80c535d7eef30807306"}, {"code": "#(apply map list \n  (for [a (range %)] (take-nth % (drop a %2))))", "problem": 54, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn [n l]\n  (let [f (fn [n l intrml fl acc]\n\t\t\t      (if (empty? l)\n\t\t\t          fl\n\t\t\t          (do\n\t\t\t           (let [ce (conj intrml (first l))]\n\t\t\t\t           (if (= acc n)\n\t\t\t\t               (recur n (rest l) [] (conj fl ce) 1)\n\t\t\t\t               (recur n (rest l) ce fl (inc acc)))))))]\n    (f n l [] [] 1)))", "problem": 54, "user": "4db045b5838c48654951d9be"}, {"code": "(fn [n s]\n  (loop [s (seq s) r []]\n    (if (>= (count s) n)\n      (recur (drop n s) (conj r (take n s)))\n      r)))", "problem": 54, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "(fn par [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (par n (drop n coll)))))", "problem": 54, "user": "4ea85846535d7eef308072f9"}, {"code": "(fn my-partition [n coll]\n  (let [x (take n coll)]\n    (when (= (count x) n)\n      (cons x (my-partition n (drop n coll))))))", "problem": 54, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn part [n s]\n  (when (>= (count s) n)\n    (cons (take n s) (part n (drop n s)))))", "problem": 54, "user": "4ea0c284535d7eef308072ad"}, {"code": "(fn partion-x [x item-list] (when (>= (count item-list) x) (cons (take x item-list) (lazy-seq (partion-x x (nthnext item-list x))))))", "problem": 54, "user": "4ec12516535dfed6da9c6da7"}, {"code": "(fn my-partition [n sx]\n  (loop [ret [], part [], remainder sx]\n    (cond\n      (empty? remainder)\n        ret\n      (= (inc (count part)) n)\n        (recur (conj ret (conj part (first remainder))) [] (rest remainder))\n      :else\n        (recur ret (conj part (first remainder)) (rest remainder)))))", "problem": 54, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn prt [n s]\n  (if (> n (count s))\n    ()\n    (let [[c r](split-at n s)]\n      (cons c (prt n r)))))", "problem": 54, "user": "4ec6559a535d6d7199dd36c9"}, {"code": "(fn [n coll] (take \n  (int (/ (count coll) n) )\n  (map \n    #(take n %) \n    (filter \n      #(<= n (count %)) \n      (iterate #(drop n %) coll)))))", "problem": 54, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn f [n c]\n  (when (>= (count c) n)\n    (cons (take n c) (f n (drop n c)))))", "problem": 54, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn my-partition [n coll]\n  (lazy-seq (if (< (count coll) n) \n    nil\n    (cons (take n coll) (my-partition n (drop n coll))))))", "problem": 54, "user": "4eb51942535d7eef30807365"}, {"code": "(fn [n col]\n      (let [indexcol (map-indexed  (fn [idx itm] [(quot idx n) itm] )  col) ]\n        (filter #(= (count %) n) (map  (fn [v] (map second (second v) )) (group-by first indexcol))\n        )                       )\n    )", "problem": 54, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn [n sq] (loop [cnt (/ (count sq) n) s sq y []]\n                (if (< cnt 1)\n                  (seq y)\n                  (recur (dec cnt) (drop n s) (conj y (take n s))))))", "problem": 54, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn [n nums] \n  (rest (take-while #(= n (count %)) \n                    (map first \n                         (iterate #(split-at n (second %)) [(repeat n :a), nums])))))", "problem": 54, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn [n xs]\n  (loop [i 0 os [] ss [] xs xs]\n    (cond (= n i) (recur 0 (conj os ss) [] xs)\n    (empty? xs) os\n    :else (recur (inc i) os (conj ss (first xs)) (rest xs)))))", "problem": 54, "user": "4ed06ea6535d44c135fd68c4"}, {"code": "(fn my-partition [n s]\n  (loop [s s acc []]\n    (let [ss (take n s)]\n      (if (= n (count ss))\n        (recur (drop n s) (conj acc ss))\n        acc))))", "problem": 54, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn [n x] (filter (fn [i] (= n (count i))) (partition-by #(quot % n) x)))", "problem": 54, "user": "4ecbb249535df97575fdabdf"}, {"code": "(fn p [n s]\n  (let\n    [b (take n s)]\n    (if\n      (< (count b) n) '()\n      (cons\n        b (p n (drop n s))))))", "problem": 54, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn f [n coll]\n  (if (<= n (count coll))\n    (cons (take n coll) (f n (drop n coll)))\n    ()))", "problem": 54, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn [n coll]\n  (for [x (range (quot (count coll) n))]\n    (keep-indexed #(if (= x (quot %1 n)) %2) coll)))\n; not bad, but not as elegant as chouser's\n; (fn f [n s] (let [[a b] (split-at n s)] \n; (if (= n (count a)) (cons a (f n b)))))", "problem": 54, "user": "4ebb20c0535dfed6da9c6d6f"}, {"code": "(fn part [n xs]\n  (if (> n (count xs))\n    nil\n    (let [[pre post] (split-at n xs)]\n      (cons pre (part n post)))))", "problem": 54, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn [n s]\n  (apply (partial map vector)\n         (map #(take-nth n (drop % s)) (range n))))", "problem": 54, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn [c l]\n  (let [n (/ (count l) c)]\n(loop [a []\nr l]\n(if (empty? r)\n(filter #(= (count %) c) a)\n(recur (conj a (take c r)) (drop c r))))))", "problem": 54, "user": "4ed2b168535d44c135fd68dd"}, {"code": "(fn p[x y] (if (>= (count y) x) (cons (take x y) (p x (drop x y)))))", "problem": 54, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "#(loop [r [] l %2]\n  (if (> % (count l))\n    r\n    (recur (conj r (take % l)) (drop % l))))", "problem": 54, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn my-partition [n coll]\n  (lazy-seq\n    (let [next-part (take n coll)]\n      (if (= (count next-part) n)\n        (cons next-part (my-partition n (drop n coll)))))))", "problem": 54, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn [n l]\n  (reverse\n  (loop [ret '()\n         tmp '()\n         cur l\n         i 0]\n         (if (and (empty? cur) (not= i n)) ret\n              (recur (if (= i n) (conj ret (reverse tmp))\n                          ret)\n                     (if (= i n) '()\n                          (conj tmp (first cur)))\n                     (if (= i n) cur\n                          (rest cur))\n                     (if (= i n) 0\n                          (inc i)))))))", "problem": 54, "user": "4ec21058535dfed6da9c6dba"}, {"code": "(fn x [s col]\n  (let [[c r] (split-at s col)]\n\t\t(if (= s (count c))\n\t\t\t(cons c (x s r)))))", "problem": 54, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [s l] (filter #(= (count %) s) (for [x (range (/ (count l) s))] (take s (drop (* x s) l)))))", "problem": 54, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn [n coll]\n   (loop [i 0\n          coll coll\n          result []]\n     (if-not (and  (seq coll)\n                   (>= (count coll) n))\n       result\n       (if (= i n)\n         (recur 0 (drop n coll) (conj result (take n coll)))\n         (recur (inc i) coll result)))))", "problem": 54, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "#(filter (fn [a] (= % (count a))) (map (fn [a] (map first a))\n  (partition-by (fn [[a b]] (quot b %)) (map list %2 (range)))))", "problem": 54, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "#(take-nth % (apply map list (take % (iterate next %2))))", "problem": 54, "user": "4e8f1ac6535d65386fec2146"}, {"code": "#(letfn [(f [n x acc cur]\n           (if (empty? x)\n               acc\n               (if (= n (inc (count cur)))\n                   (f n (rest x) (conj acc (conj cur (first x))) [])\n                   (f n (rest x) acc (conj cur (first x))))))]\n  (f %1 %2 [] []))", "problem": 54, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(fn part [n xs]\n  (let [sets (quot (count xs) n)]\n\t\t(reverse (reduce\n\t\t\t#(conj %1 (take n (drop (* n %2) xs)))\n\t\t\tnil\n\t\t\t(range sets)\n\t\t))\n\t)\n)", "problem": 54, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "(fn [n coll]\n  (loop [result [], coll coll]\n    (if (< (count coll) n)\n      result\n      (recur (conj result (take n coll)) (drop n coll)))))", "problem": 54, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [n s]\n    (loop [s s r []]\n      (if (>= (count s) n)\n        (recur (drop n s) (conj r (take n s)))\n        r)))", "problem": 54, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn [n x] (loop [s x r []]\n               (if (< (count s) n)\n                 r\n                 (recur (drop n s) (conj r (take n s))))))", "problem": 54, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn p [n l]\n  (if (< (count l) n) '()\n      (cons (take n l) (p n (drop n l)))))", "problem": 54, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn prtn [n xs]\n  (if (< (count xs) n)\n      ()\n      (cons (take n xs) (prtn n (drop n xs)))))", "problem": 54, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "(fn [n coll]\n  (loop [acc [] coll coll]\n    (let [r (drop n coll)\n          t (take n coll)]\n      (if (< (count t) n)\n        acc\n        (recur (conj acc t) r)))))", "problem": 54, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn p [n l] (if (<= n (count l)) (cons (take n l) (p n (drop n l))) []))", "problem": 54, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn part [number sequ]\n  (loop [result []\n   remaining sequ]\n    \n    (if (< (count remaining) number)\n      result\n      (recur (conj result (take number remaining)) (drop number remaining))\n      )\n    )\n)", "problem": 54, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn [n coll]\n(apply map (fn [& z] (map second z))\n   (map (fn [x] (filter #(= (first %) x) (map #(list %1 %2) (flatten (repeat (/ (count coll) n) (range n))) coll)))\n      (range n))))", "problem": 54, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn [n s]\n  (loop [in s out []]\n    (if (> n (count in))\n      out\n      (recur (drop n in) (conj out (take n in))))))", "problem": 54, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn [n s] (filter #(<= n (count %)) (vals (group-by #(quot % n) s))))", "problem": 54, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn partition-a-sequence [n s]\n  (apply map list (map #(take-nth n (drop % s)) (range n))))", "problem": 54, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": ";; When I run this in Intellij, it doesn't need the cast of (- cx n)\n;; to int...??  Very strange.  In that environment, both (count x)\n;; and (- cx n) appear to be Longs.\n;;\n(fn [n x]\n  (loop [xs x cx (count x) result []]\n    (if (< cx n)\n      result\n      (recur (drop n xs) (int (- cx n)) (conj result (take n xs))))))", "problem": 54, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn ! [n c]\n  (when-not (< (count c) n)\n  (cons (take n c) (! n (drop n c)))))", "problem": 54, "user": "4ee7ef87535d93acb0a66872"}, {"code": "(fn [n se]\n  (loop [re se res []]\n    (if (> n (count re))\n      res\n    (recur (drop n re) (conj res (take n re))))))", "problem": 54, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "(fn p [n c]\n   (if (> n (count c))\n     nil\n     (let [[l r] (split-at n c)] (cons l (p n r)))))", "problem": 54, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn [step n]\n  (filter #(= (count %) step)\n    ((fn func [ns]\n      (if (<= (count ns) step)\n        (list ns)\n        (cons (take step ns) (func (drop step ns)))))\n      n)))", "problem": 54, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn [n s0]\n  (loop [acc '() s s0]\n    (if (<= n (count s))\n      (let [[l r] (split-at n s)]\n        (recur (concat acc (list l)) r))\n      acc)))", "problem": 54, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "(fn [x s]\n  (let [num (- (count s) (mod (count s) x))]\n  (for [idx (range (/ num x))]\n    (take x (drop (* x idx) s)))))", "problem": 54, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn [n s]\r\n  (letfn [(hp [acc sq]\r\n            (if (empty? sq)\r\n              acc\r\n              (let [sp (split-at n sq)\r\n                    fsp (first sp)\r\n                    rsp (second sp)]\r\n                (hp (if (>= (count fsp) n)\r\n                      (conj acc fsp)\r\n                      acc)\r\n                  rsp))))]\r\n    (hp [] s)))", "problem": 54, "user": "4ee40938535d10e5ff6f5375"}, {"code": "(fn my-partition [n coll]\n  (loop [coll coll\n        acc []]\n    (if (< (count coll) n)\n      acc\n      (recur (drop n coll)\n              (conj acc (take n coll))))))", "problem": 54, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn f [n l]\n  (when (= (count (take n l)) n)\n    (cons (take n l) (f n (drop n l)))))", "problem": 54, "user": "4ee82539535d93acb0a66878"}, {"code": "#(take-nth % (apply map list (take % (iterate next %2))))", "problem": 54, "user": "4eb30868535d7eef30807355"}, {"code": "(fn [n col]\n    (->> (iterate (comp (partial split-at n) second) [[] col])\n         (drop 1)\n         (map first)\n         (take-while #(= n (count %)))))", "problem": 54, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn f [n s]\n  (when (and (seq s) (>= (count s) n))\n    (cons (take n s) (f n (drop n s)))))", "problem": 54, "user": "4ed0e139535d44c135fd68c7"}, {"code": "(fn part [n coll] (let [[a b] (split-at n coll)] (if (>= (count coll) n) (cons a (part n b)))))", "problem": 54, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn [n s]\n    (letfn [(f [o s]\n           (if (< (count s) n)\n               o \n               (f (conj o (take n s))  (drop n s) ) ) ) ]\n    (f [] s) ) )", "problem": 54, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn my-partition [n xs]\n  (if (< (count xs) n)\n    nil\n    (cons (take n xs) (my-partition n (drop n xs)))))", "problem": 54, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn part-seq\n  [n coll & res]\n  (if (< (count coll) n)\n    (reverse res)\n    (recur n (drop n coll) (cons (take n coll) res))))", "problem": 54, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "(fn p [n s] (for [i (range (int (/ (count s) n)))] (take n (drop (* n i) s))))", "problem": 54, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn p [n s]\n  (let [[t b] (split-at n s)]\n    (when (= (count t) n)\n      (cons t (lazy-seq (p n b))))))", "problem": 54, "user": "4db091b7838c48654951d9c2"}, {"code": "(fn [n c] (filter #(= n (count %)) (partition-by #(quot % n) c)))", "problem": 54, "user": "4ef2d243535dced4c769f221"}, {"code": "(fn mypart [n s]\n  (loop [acc [] current [] c n r s]\n    (cond\n      (not r) \n        (if (and (seq current) (= n (count current))) (conj acc current) acc)\n      (= 0 c)\n        (recur (conj acc current) [] n r)\n      :else \n        (recur acc (conj current (first r)) (dec c) (next r)))))", "problem": 54, "user": "4ef0a38e535dced4c769f20b"}, {"code": "(fn p [n x]\n  (if (>= (count x) n)\n    (cons (take n x) (p n (drop n x)))))", "problem": 54, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn part [n col]\n            (let [p (take n col)]\n              (when (= n (count p))\n                (cons p (part n (drop n col))))))", "problem": 54, "user": "4ef4acf8535dced4c769f23c"}, {"code": "(fn [n xs]\n  (filter #(= (count %) n)\n    (map (partial map first)\n      (partition-by\n        (fn [[idx val]] (quot idx n))\n        (map-indexed vector xs)))))", "problem": 54, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(fn [n c] (loop [res [] c c] (if (>= (count c) n) \n(recur (conj res (take n c)) (drop n c)) res)))", "problem": 54, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "(fn my-partition [n x]\n  (cond (< (count x) n) []\n        (seq x) (cons (take n x) (my-partition n (drop n x)))\n        :else []))", "problem": 54, "user": "4ee9d697535d93acb0a66895"}, {"code": "#(loop [r %2 p []]\n  (if (< (count r) %)\n    p\n    (recur (drop % r) (conj p (take % r)))))", "problem": 54, "user": "4ef77c82535dced4c769f253"}, {"code": "(fn [n coll]\n  (take-while #(>= (count %) n) (map #(take n %) (iterate #(drop n %) coll))))", "problem": 54, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn iter [n s]\r\n   (when (and (seq s) (>= (count s) n))\r\n     (lazy-seq\r\n       (cons (take n s)\r\n             (iter n (drop n s))))))", "problem": 54, "user": "4ef1ee67535dced4c769f219"}, {"code": "#((fn p [o r] (let [f (take % r) l (drop % r)] (if (= % (count f)) (p (conj o f) l) o))) [] %2)", "problem": 54, "user": "4eecdd66535d93acb0a668b9"}, {"code": "#(loop [arr %2 res []]\n     (if (< (count arr) %) res\n\t       (recur (drop % arr) (conj res (take % arr)))))", "problem": 54, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "#(reverse (loop [xs %2 ys '()] (if (< (count xs) %1) ys (recur (drop %1 xs) (cons (take %1 xs) ys)))))", "problem": 54, "user": "4ef8d47c535dced4c769f261"}, {"code": "(fn p [n s]\n  (when (<= n (count s))\n    (into [(take n s)] (p n (drop n s)))))", "problem": 54, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn partition-seq [n xs]\n  (cond (< (count xs) n) '()\n        true (cons (take n xs) (partition-seq n (drop n xs)))))", "problem": 54, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn [n xs]\n  (map #(take n %) \n        (take (quot (count xs) n) \n              (iterate #(drop n %) xs))))", "problem": 54, "user": "4ee67d74535d93acb0a66861"}, {"code": "trampoline (fn p [r n s] (if (< (count s) n) r #(p (conj r (take n s)) n (drop n s)))) [] \n;(fn [n s] (take (quot (count s) n) (map first (iterate #(split-at n (second %)) (split-at n s)))))\n;(fn partn [n s] (let [[x1 xs] (split-at n s)] (when (= n (count x1)) (cons x1 (partn n xs)))))", "problem": 54, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn part [n coll]\n  (if\n    (< (count coll) n) []\n    (concat (list (take n coll)) (part n (drop n coll)))\n  )\n  )", "problem": 54, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(fn [x s]\n  (loop [s s a ()]\n    (if (< (count s) x) (reverse a)\n        (recur (drop x s) (cons (take x s) a)))))", "problem": 54, "user": "4f03d0fe535dcb61093f6b6d"}, {"code": "(fn f [n s] (let [a (take n s)]\r\n                        (when (= (count a) n)\r\n                          (cons a (f n (drop n s))))))", "problem": 54, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn partition2 [n coll]\n        (let [[a b] (split-at n coll)]\n          (if (= (count a) n)\n            (cons a (partition2 n b))\n            ())))", "problem": 54, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn [n v] (->> v \n  (zipmap (range)) \n  (into []) \n  (sort)\n  (partition-by #(odd? (quot (first %) n)))\n  (filter #(= (count %) n))\n  (map #(map second %))\n))", "problem": 54, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn part [n coll]\n  (let [m (take n coll)]\n    (when (= n (count m))\n      (cons m (part n (drop n coll))))))", "problem": 54, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn f [n s]\n  (if\n    (>= (count s) n)\n    (cons (take n s) (f n (drop n s)))))", "problem": 54, "user": "4f03857e535dcb61093f6b0d"}, {"code": "(fn [n l]\n  (filter #(= (count %) n)\n    (seq (loop [ll l c []]\n      (if (empty? ll)\n      c\n      (recur (drop n ll) (conj c (take n ll))))))))", "problem": 54, "user": "4f017593535dcb61093f6a36"}, {"code": "(fn parte [n l]\n  (if (< (count l) n) '()\n     (cons (take n l)\n          (parte n (drop n l)))))", "problem": 54, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn pt [n xs]\n  (if (> n (count xs)) nil\n    (cons (take n xs) (pt n (drop n xs)))))", "problem": 54, "user": "4ee82ce9535d93acb0a6687a"}, {"code": "#(loop [in %2 ret []] (if (> % (count in)) ret (recur (drop % in) (conj ret (take % in)))))", "problem": 54, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn f [n s] (if (<= n (count s))\n               (cons (take n s) (f n (drop n s)))))", "problem": 54, "user": "4ee88bfb535d93acb0a66881"}, {"code": "#(loop [c %2 r '()]\n           (if (< (count c) %1) (reverse r)\n               (recur\n                (drop %1 c)\n                (cons (take %1 c) r))))", "problem": 54, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn my-partition [n l]\r\n    (reverse (loop [l l f []]\r\n               (if (empty? l)\r\n                 f\r\n                 (let [split (split-at n l)\r\n                       part (if (= n (count (first split)))\r\n                              (cons (first split) f)\r\n                              f)]\r\n                   (recur (first (rest split)) part))))))", "problem": 54, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn prob-0052\n  [n in-xs]\n  (let [xs  (seq in-xs)\n        n2  (* 2 n)\n        x2  (take n2 xs)\n        nx2 (count x2)]\n    (cond\n     (< nx2 n)  []\n     (< nx2 n2) (cons (take n x2) nil)\n     :else      (cons (take n xs) (prob-0052 n (drop n xs))))))", "problem": 54, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn part [n lst]\n  (let [s (take n lst)]\n    (if (= n (count s))\n      (cons s (part n (drop n lst))))))", "problem": 54, "user": "4ef0eaef535dced4c769f211"}, {"code": "#(remove (comp (partial > %1) count)\n  (map (partial map second)\n    (partition-by first\n      (map-indexed (fn [i x] [(quot i %1) x]) %2))))", "problem": 54, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn this [n s]\n  (if (>= (count s) n)\n      (cons (take n s) (this n (drop n s)))\n      ()))", "problem": 54, "user": "4f0a4e7e535d0136e6c222f4"}, {"code": "(fn f [x s]\n  (if (<= x (count s))\n    (cons (take x s) (f x (drop x s)))))", "problem": 54, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn [n coll]\n  (loop [c coll partc []]\n    (let [p (take n c)]\n      (if (not= n (count p))\n        partc\n        (recur (drop n c) (conj partc p))))))", "problem": 54, "user": "4efec33f535dcb61093f6a2a"}, {"code": "(fn [n coll]\n  (let [pairs (map vector (cycle (range n)) coll)]\n    (loop [s pairs seqs [] curr []]\n      (if (seq s)\n          (let [[i elt] (first s)]\n              (if (= i (dec n))\n                 (recur (next s) (conj seqs (conj curr elt)) [])\n                 (recur (next s) seqs (conj curr elt))\n              )\n          )\n          seqs))))", "problem": 54, "user": "4f03154a535dcb61093f6a58"}, {"code": "#(if (< (count %3) %2)\n   %\n   (recur (conj % (take %2 %3))\n          %2\n          (drop %2 %3))) []", "problem": 54, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn [x coll] \n\t(loop [c coll v [] l (take x c)]\n\t\t(if (< (count l) x)\n\t\t\tv\n\t\t\t(recur (drop x c) (conj v l) (take x (drop x c))))))", "problem": 54, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn [n s]\n  (loop [acc [] rs s]\n    (let [cp (take n rs)]\n      (if (< (count cp) n)\n          acc\n          (recur (conj acc cp) (drop n rs))))))", "problem": 54, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "#(loop [x %2\n        r nil]\n  (if (>= (count x) %)\n    (recur (drop % x) (cons (take % x) r))\n    (reverse r)))", "problem": 54, "user": "4ee67364535d93acb0a6685f"}, {"code": "(fn [num_p coll]\n (map #(take num_p (drop (* % num_p) coll))\n      (range (quot (count coll) num_p))))", "problem": 54, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn [n s]\n  (first\n    (reduce\n      (fn [[r s] i]\n        (let [x (conj s i)]\n          (if (= n (count x)) [(conj r x) []] [r x])))\n      [[][]]\n      s)))", "problem": 54, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn [n col]\n  (loop [l col acc []]\n    (if (< (count l) n) acc\n      (recur (drop n l) (conj acc (take n l))))))", "problem": 54, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn part [n s]\n  (loop [s s res []]\n    (if (not (seq s)) (if (not= n (count (last res)))\n                        (pop res)\n                        res)\n        (recur (drop n s) (conj res (take n s))))))", "problem": 54, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn [n col]\n  (loop [acc [], c col]\n    (let [cur (take n c)]\n      (if (= (count cur) n)\n      (recur (conj acc cur) (drop n c))\n      acc))))", "problem": 54, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn [x y](loop[mdlo x seq1 y accum '()](if (empty? seq1) (reverse accum)(recur mdlo (drop mdlo seq1)(if (= mdlo (count (take mdlo seq1))) (conj accum (take mdlo seq1)) accum)))))", "problem": 54, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "(fn p [n c]\n  (let [x (take n c)]\n    (if (= (count x) n)\n      (cons x (p n (drop n c)))\n      '())))", "problem": 54, "user": "4f0f174c535d0136e6c22330"}, {"code": "(fn partition*\n  [n coll]\n  (when (>= (count coll) n)\n    (cons (take n coll) (partition* n (drop n coll)))))", "problem": 54, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "(fn partition* [n xs]\n  (let [h (take n xs) t (drop n xs)]\n    (if (= n (count h))\n      (cons h (partition* n t))\n      nil)))", "problem": 54, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn my-partition [n xs]\n    (lazy-seq \n        (let [f (take n xs)]\n            (when (= (count f) n)\n                (cons f (my-partition n (drop n xs)))))))", "problem": 54, "user": "4f0660ee535dcb61093f6c0d"}, {"code": "(fn take-cat [n x] \n  (if-not (< (count x) n) \n     (cons (take n x) (take-cat n (drop n x)))))", "problem": 54, "user": "4f089f1a535dcb61093f6c3c"}, {"code": "(fn [n X]\n  (loop [res ()\n         elts X]\n    (cond (< (count elts) n) (reverse res)\n          :default \n          (let [split (split-at n elts)]\n            (recur (conj res (first split)) (second split))))))", "problem": 54, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn part [n seq]\n  (if (> n (count seq)) \n      '()\n      (cons (take n seq) (part n (drop n seq)))))", "problem": 54, "user": "4f13047d535d64f60314642c"}, {"code": "(fn [x xs] (apply map list (vals (group-by #(mod % x) xs))))", "problem": 54, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn [n s]\n  (->> \n    (group-by #(mod % n) s )\n    (vals)\n    (apply map list)))", "problem": 54, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "(fn [n coll] (->> coll\r\n                  (iterate #(drop n %))\r\n                  (take-while #(>= (count %) n))\r\n                  (map #(take n %))))", "problem": 54, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "#(loop [n %1\n     s %2\n\t   index 0\n\t   last-index (* n (quot (count s) n))\n\t   result[]]\n\t   (if (= index last-index)\n\t       result\n\t       (recur n (rest s) (inc index) last-index\n\t\t      (if (= 0 (mod index n))\n\t\t\t  (conj result (conj [] (first s)))\n\t\t\t  (conj (into [] (butlast result)) (conj (last result) (first s)))))))", "problem": 54, "user": "4f066916535dcb61093f6c10"}, {"code": "(fn my-partition [n coll]                                                                                                                    \r\n    (lazy-seq                                                                                                                                 \r\n     (let [n-coll (take n coll)]                                                                                                              \r\n       (if (< (count n-coll) n)                                                                                                               \r\n         nil                                                                                                                                  \r\n         (cons n-coll (my-partition n (drop n coll)))))))", "problem": 54, "user": "4f149e0f535d64f60314643d"}, {"code": "#(for [i (range (quot (count %2) %))] (take % (drop (* i %) %2)))", "problem": 54, "user": "4ede361a535d10e5ff6f5332"}, {"code": "(fn mypart [step xs]\n    (let [n (quot (count xs) step)]\n        (loop [i n, head [], tail xs]\n            (if (zero? i)\n                head\n                (recur (dec i) (conj head (take step tail)) (drop step tail))))))", "problem": 54, "user": "4f128865535d64f603146428"}, {"code": "(fn [s xs]\n  (filter #(= (count %) s)\n    (reduce \n      (fn [w i]\n        (if (= (count (last w)) s)\n            (concat w [[i]])\n            (concat (drop-last w) (list (conj (last w) i)))))\n      [[]]\n      xs)))", "problem": 54, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn [n s] (second (reduce\n  (fn [[cs res] i]\n    (if (= (dec n) (count cs))\n      [[] (conj res (conj cs i))]\n      [(conj cs i) res]))\n  [[] []]\n  s)))", "problem": 54, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [n xs]\n  (loop [acc () acc-cur () m n x (first xs) xs (rest xs)]\n    (cond\n     (nil? x) (reverse (cons (reverse acc-cur) acc))\n     (= m 0) (if (< (inc (count xs)) n)\n               (reverse (cons (reverse acc-cur) acc))\n               (recur (cons (reverse acc-cur) acc)\n                      '()\n                      n\n                      x\n                      xs))\n     :else (recur acc\n                  (cons x acc-cur)\n                  (dec m)\n                  (first xs)\n                  (rest xs)))))", "problem": 54, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn p \n  ([n current remain]\n    (if (or (empty? remain) (> n (count remain))) current\n      (let [s (split-at n remain)]\n        (recur n (conj current (first s)) (flatten (rest s))))))\n  ([n l]\n    (p n [] l)))", "problem": 54, "user": "4daeabf6edd6309eace4d15c"}, {"code": "(fn [sz col] (loop [c col result '()] (if (> sz (count c)) result (recur (drop sz c) (concat result (list (take sz c)))))))", "problem": 54, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn part [x l]\n  (loop [out []\n         in l]\n    (if (< (count in) x)\n      out\n      (recur (conj out (take x in)) (drop x in)))))", "problem": 54, "user": "4f04f847535dcb61093f6beb"}, {"code": "(fn parti [n seq]\r\n  (if (>= (count seq) n)\r\n    (cons (take n seq) (parti n (drop n seq)))))", "problem": 54, "user": "4f048f67535dcb61093f6bd3"}, {"code": "#(loop [a nil b %2]\n  (if (>= (count b) %)\n    (recur\n      (concat a (list (take % b)))\n      (drop % b))\n    a))", "problem": 54, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn our-partition [n lst]\r\n  (reverse\r\n  (loop [acc () l lst]\r\n    (let [j (split-at n l)]\r\n      (if (> n (count l))\r\n        acc\r\n        (recur (conj acc (first j) )\r\n               (second j)\r\n             )\r\n      )))))", "problem": 54, "user": "4ef0f1a1535dced4c769f212"}, {"code": "(fn f[n lst] \n  (if (<= n (count lst)) \n    (cons (take n lst) (f n (drop n lst)))))", "problem": 54, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [n coll]\n  (loop [acc '()\n        xs coll]\n    (if (> n (count xs))\n      acc\n      (recur (concat acc [(take n xs)]) (drop n xs)))))", "problem": 54, "user": "4f1c2a3a535d64f603146480"}, {"code": "(fn t [n x] (if (< (count x) n) nil (conj (t n (drop n x)) (take n x))))", "problem": 54, "user": "4ef6e689535dced4c769f24f"}, {"code": "(fn f [c s]\n          (lazy-seq\n           (let [nxt (take c s)]\n             (when (and (seq s) (= (count nxt) c))\n               (cons (take c s) (f c (drop c s)))))))", "problem": 54, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn [x s]\n  (map #(take x (drop % s)) (range 0 (- (count s) x -1) x)))", "problem": 54, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn [n coll]\n   ((fn [res rest]\n     (if (< (count rest) n)\n       res\n       (recur (conj res (take n rest)) (drop n rest))))\n   [] coll))", "problem": 54, "user": "4eb02674535d7eef30807338"}, {"code": "#((fn parti [ x vv vlis]\n     (if (>= (count vv) x )\n       (parti x (drop x vv) (conj vlis (take x vv)))\n       vlis\n       )\n      ) %1 %2 [])", "problem": 54, "user": "4f030775535dcb61093f6a43"}, {"code": "(fn [l xs]\n  (loop [r [] xs1 xs]\n    (if (< (count xs1) l)\nr\n(recur (conj r (take l xs1)) (drop l xs1)))))", "problem": 54, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn [n, coll]\n  (reverse (reduce\n\t\t#(cond\n\t\t\t(< (count (second %2)) n) %\n\t\t\t:default (conj % (map second (second %2))))\n\t\t()\n\t\t(group-by\n\t\t\tfirst\n\t\t\t(map-indexed #(vector (quot % n) %2) coll)))))", "problem": 54, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn part [n coll] \n  (if (< (count coll) n)\n    '()\n    (cons (take n coll) (lazy-seq (part n (drop n coll))))))", "problem": 54, "user": "4f215350e4b0d66497709fd0"}, {"code": "(fn divvy [n s]\n  (let [next-chunk  (take n s)\n        remainder   (drop n s)]\n    (if (= n (count next-chunk))\n      (cons next-chunk (lazy-seq (divvy n remainder))))))", "problem": 54, "user": "4daf36c2edd6309eace4d175"}, {"code": "(fn [n coll]\n    (loop [res []\n           curr []\n           coll coll]\n      (if (seq coll)\n        (if (= n (count curr))\n          (recur (conj res curr) [(first coll)] (rest coll))\n          (recur res (conj curr (first coll)) (rest coll)))\n        (if (= n (count curr))\n          (conj res curr)\n          res))))", "problem": 54, "user": "4e5be681535d8a8b8723a2bc"}, {"code": "(fn [c a]\n  ((fn [answer current array] \n    (if (= nil array)\n      answer\n      (let [current (conj current (first array))] \n        (if (= c (count current))\n          (recur (conj answer current) [] (next array))\n          (recur answer current (next array)))))) [] [] a))", "problem": 54, "user": "4f294c48e4b0d6649770a023"}, {"code": "(fn part [n items]\n  (let [result (take n items)]\n    (when (= n (count result))\n      (lazy-seq (cons result (part n (drop n items)))))))", "problem": 54, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [n xs] \n  (reverse (reduce conj '() \n               (map #(take n (drop % xs))\n               (range 0 (* (quot (count xs) n) n) n)))))", "problem": 54, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn [cnt, mylist]\n  (loop [l mylist, ret []]\n\t\t(let [part (take cnt l)]\n\t\t\t(if (= (count part) cnt)\n\t\t\t\t(recur (drop cnt l) (conj ret part))\n\t\t\t\tret) )))", "problem": 54, "user": "4f2965ffe4b0d6649770a029"}, {"code": "#(loop [n %1 l %2 res []]\r\n  (if (< (count l) n) res\r\n    (recur n (drop n l) (conj res (take n l)))))", "problem": 54, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "(fn [n seq]\n    (loop [s seq\n           cur []\n           res []]\n      (if (empty? s)\n        res\n        (let [f (first s)]\n          (if (= (count cur) (dec n))\n            (recur (rest s)\n                   []\n                   (conj res (conj cur f)))\n            (recur (rest s)\n                   (conj cur f)\n                   res))))))", "problem": 54, "user": "4e48b61d535dc968683fc4be"}, {"code": "(fn [n coll]\n   (for [i (range 0 (int (/ (count coll) n))) ]\n     (for [j (range (* i n) (* (inc i) n) ) ]\n       j\n       )\n     )\n   )", "problem": 54, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn foo [n xs]\n  (when-let [s (seq xs)]\n    (let [p (take n s)]\n      (when (= n (count p))\n        (cons p (foo n (drop n s)))))))", "problem": 54, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "(fn [n col]\n  (loop [ coll col  r [] ]\n   (if (> n (count coll))\n      r\n(recur (drop n coll) (conj r (take n coll))))))", "problem": 54, "user": "4e1248b1535d04ed9115e7cf"}, {"code": "(fn [n l]\n  (loop [r l o []]\n    (if (< (count r) n)\n      o\n      (recur (drop n r) (conj o (take n r))))))", "problem": 54, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn [x s]\n      (map #(take x %)\n           (loop [s (vec s), r []]\n             (if (and (seq s) (>= (count s) x))\n               (recur (subvec s x) (conj r s))\n               r))))", "problem": 54, "user": "4f301d02e4b0d6649770a072"}, {"code": "(fn [n s]\n  (loop [items s\n         result []]\n    (if (< (count items) n)\n      result\n      (recur (drop n items)\n             (conj result (take n items))))))", "problem": 54, "user": "4f31519ae4b0d6649770a086"}, {"code": "#(first (reduce\n                  (fn [[a b] x]\n                    (let [b (conj b x)]\n                      (if (= % (count b))\n                        [(conj a b) []]\n                        [a b])))\n                  [[] []] %2))", "problem": 54, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn [n lst]\n      (filter (fn [l] (>= (count l) n))  (for [x (range 0 (count lst) n)] (keep-indexed (fn [idx item] (if (and (< idx (+ x n)) (>= idx x)) item)) lst))))", "problem": 54, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "(fn x [n l] (if (< (count l) n)\n             ()\n             (cons (take n l) (x n (drop n l)))))", "problem": 54, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [n coll]\n  (loop [c coll v []]\n    (if (< (count c) n) v\n        (recur (drop n c) (conj v (take n c))))))", "problem": 54, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn [n c] (filter #(= (count %) n) (map #(take n (drop % c)) (range 0 (count c) n))))", "problem": 54, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "(fn [nn s]\r\n  (let [res ((fn [[x & xs :as s] res sub n]\r\n  \t\t\t\t     (if (nil? s)\r\n\t\t\t\t\t       res\r\n\t\t\t\t\t       (let [nsub (cons x sub)]\r\n\t\t\t\t\t         (if (= 1 n)\r\n\t\t\t\t\t           (recur xs (cons nsub res) nil nn)\r\n\t\t\t\t\t           (recur xs res nsub (dec n))))))\r\n\t\t\t\t\t    s nil nil nn)]\r\n  (reverse (map reverse res))))", "problem": 54, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "(fn [n coll]\n    (take (int (/ (count coll) n))\n          (map #(take n %) (iterate  #(drop n %) coll))))", "problem": 54, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn f [g l]\n  (if (<= g (count l))\n    (cons (take g l) (f g (drop g l)))\n    []\n  )\n)", "problem": 54, "user": "4f1595da535d64f603146444"}, {"code": "(fn my-part [n coll]\n  (loop [f (vector (first (split-at n coll))) r (second (split-at n coll))]\n    (if (or (empty? r) (> 1 (quot (count r) n)))\n      f\n      (recur (conj f (first (split-at n r))) (second (split-at n r))))))", "problem": 54, "user": "4f04d312535dcb61093f6be7"}, {"code": "(fn [i s]\n  ((fn ! [s agg]\n     (if-let [s (seq s)]\n        (if (>= (count s) i)\n           (! (drop i s) (conj agg (take i s)))\n           agg\n        ) \n        agg)) s []))", "problem": 54, "user": "4f1d1299535d64f603146487"}, {"code": "(fn partition1 [n coll]\n  (lazy-seq\n    (let [[next-part rest-part] (split-at n coll)]\n      (when (= (count next-part) n)\n        (cons next-part (partition1 n rest-part))))))", "problem": 54, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn this [n s]\n  (if (< (count s) n)\n    ()\n    (let [spl (split-at n s)]\n      (cons (first spl) (this n (second spl))))))", "problem": 54, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "(fn part [n coll]\n         (loop [coll coll ret ()]\n           (if (>= (count coll) n)\n             (let [p (take n coll)]\n               (recur (drop n coll) (cons p ret)))\n             (reverse ret))))", "problem": 54, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn prt [n xs]\r\n  (if (< (count xs) n) ()\r\n    (cons (take n xs)\r\n          (let [xss (drop n xs)]\r\n            (if (empty? xss)\r\n              ()\r\n              (prt n xss))))))", "problem": 54, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "(fn [n s]\n    (loop [se s, ret []]\n    (if (>= (count se) n)\n      (recur (drop n se) (conj ret (take n se)))\n      ret)))", "problem": 54, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn foo [n l]\r\n  (if (< (count l) n) '()\r\n      (let [x (split-at n l)]\r\n        (cons (first x) (foo n (last x))))))", "problem": 54, "user": "4eb66737535d7eef3080736b"}, {"code": "(fn p [n c] \n  (if (>= (count c) n) \n    (conj (p n (nthnext c n)) (take n c))))", "problem": 54, "user": "4e6cf521535de274dd8d818b"}, {"code": "(fn [n c]\n          (loop [r c res []]\n             (if (< (count r) n)\n                 res\n                 (recur (drop n r) (conj res (take n r))))))", "problem": 54, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn test-fn [n l]\r\n    (if (< (count l) n)\r\n        nil\r\n      (let [z (split-at n l)]\r\n        (cons (first z) (test-fn n (second z))))))", "problem": 54, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn [n coll]\n  (let [c (drop-last (mod (count coll) n) coll)]\n    ((fn [sub-n sub-coll]\n      (if (> (count (last sub-coll)) sub-n)\n        (recur sub-n (concat (butlast sub-coll) (split-at sub-n (last sub-coll))))\n        sub-coll)) n [c])))", "problem": 54, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn [n seq]\n    (loop [acc nil tail seq]\n        (cond (< (count tail) n) acc\n              :else              (recur (concat acc (list (take n tail))) (drop n tail)))))", "problem": 54, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn my-partition [n coll]\n  (when-let [s (seq coll)]\n    (let [p (take n s)]\n      (when (= (count p) n)\n        (cons p (my-partition n (drop n s)))))))", "problem": 54, "user": "4e95a440535dbda64a6f6b37"}, {"code": "(fn [cnt coll]\n  (loop [coll coll result ()]\n    (if (>= (count coll) cnt)\n      (recur (drop cnt coll) (conj result (take cnt coll)))\n      (reverse result))))", "problem": 54, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "(fn [x coll]\n  (letfn [(nthrest [coll x] ((apply comp (take x (repeat rest))) coll))]\n   (loop [h (take x coll)\n          res (nthrest coll x)\n          ret []]\n     (if (seq res)\n       (recur (take x res) (nthrest res x) (conj ret h))\n       (if (= x (count h))\n         (conj ret h)\n         ret)))))", "problem": 54, "user": "4f4319ebe4b0d7d3c9f3fd13"}, {"code": "(fn part [n xs]\n  (if (<= n (count xs))\n    (lazy-seq (cons (vec (take n xs))\n       (part n (drop n xs))))\n    []))", "problem": 54, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn part [n xs] (if (>= (count xs) n) (cons (take n xs) (part n (drop n xs)))))", "problem": 54, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn o [n c]\r\n  (let [p (take n c)]\r\n    (if (= n (count p))\r\n      (cons p (o n (drop n c)))\r\n      )))", "problem": 54, "user": "4ee7d113535d93acb0a6686e"}, {"code": "(fn my-partition\n  [n col]\n  (if (> n (count col)) []\n      (lazy-seq (cons (take n col)\n                  (my-partition n (drop n col))))))", "problem": 54, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn partition_ [n s]\n  (loop [s_ s acc []]\n    (cond\n      (empty? s_) (filter #(= (count %) n) acc)\n      :else (recur (drop n s_) (conj acc (take n s_))))))", "problem": 54, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn foo [n coll]\n  (if (< (count coll) n)\n    '()\n    (cons (take n coll) (foo n (drop n coll)))))", "problem": 54, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn [num coll]\n  (map \n    #(take num (nthnext coll %1)) \n    (range 0 (* (quot (count coll) num) num) num)))", "problem": 54, "user": "4f2acb29e4b0d6649770a040"}, {"code": "(fn spl [n s]\n  (if (< (count s) n) (list)\n    (cons (take n s) (spl n (drop n s)))))", "problem": 54, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn [n coll]\r\n    (loop [coll coll\r\n           acc []]\r\n      (let [section (take n coll)]\r\n        (if (= n (count section))\r\n          (recur (drop n coll) (conj acc section))\r\n          acc))))", "problem": 54, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn part [n x]\r\n  (if (>= (count x) n)\r\n    (cons (take n x) (part n (drop n x)))))", "problem": 54, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "(fn [n xs] \n    (for [nn (range 0 (- (inc (count xs)) n) n)] (take n (drop nn xs))))", "problem": 54, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn [n s]\n  (let [p (Math/floor (/ (count s) n))]\n    (->> (map list (take p (iterate #(+ % n) 0))\n                   (take p (iterate #(+ % n) n)))\n         (map #(apply subvec (vec s) %)))))", "problem": 54, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn [n coll]\n    (reverse\n     (loop [acc  (list)\n            coll coll]\n       (if (< (count coll) n) acc\n           (recur (conj acc (take n coll)) (drop n coll))))))", "problem": 54, "user": "4f4a8707e4b0d56e7bb92c12"}, {"code": "(fn [n s]\n  (loop [result [], source (seq s)]\n    (if\n      (> n (count source))\n      result\n      (recur\n        (conj result (take n source))\n        (drop n source)))))", "problem": 54, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn [n col]\n  (loop [c col r []]\n    (if (< (count c) n) r\n      (recur (drop n c) (conj r (take n c))))))", "problem": 54, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "#(for [i (range (quot (count %2) %))]\n    (take % (drop (* i %) %2)))", "problem": 54, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn pt\r\n  [n c]\r\n  (loop [p c r []]\r\n    (if (> n (count p))\r\n      r\r\n      (recur (drop n p) (conj r (take n p))))))", "problem": 54, "user": "4f17ab99535d64f603146457"}, {"code": "(fn [x s]\n    ((fn [i s a a2]\n        (if (empty? s)\n            (reverse a)\n            (let [a2 (cons (first s) a2)]\n                (if (= i 1)\n                    (recur x (rest s) (cons (reverse a2) a) ())\n                    (recur (dec i) (rest s) a a2)))))\n      x s '() '()))", "problem": 54, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn f[n coll]\n  (if (<= n (count coll))\n      (cons (take n coll) (f n (drop n coll)))\n      nil))", "problem": 54, "user": "4e53bf5e535d8a8b8723a275"}, {"code": "(fn [n lst]\n  (loop [lst lst ret [] ]\n    (if (> n (count lst)) ret\n      (recur (drop n lst) (conj ret (take n lst))))))", "problem": 54, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn [x ys]\n  (let [ polle (fn [n xs acc]\n          (if (or (empty? xs) (< (count xs) n)) acc\n            (let [p (take n xs)]\n             (recur n (drop n xs) (cons p acc)))))]\n  (reverse (polle x ys '()))))", "problem": 54, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "#(loop [xs %2 acc []]\n  (if (< (count xs) %) acc\n   (recur (drop % xs) (conj acc (take % xs)))))", "problem": 54, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn [n xs]\n  (let [len (count xs)\n        stops (range 0 (- len (mod len n)) n)]\n     (map (fn [x] (subvec (vec xs) x (+ x n))) stops)))", "problem": 54, "user": "4dbe9674535d020aff1edf65"}, {"code": "(fn [n s]\n  (loop [ss s i 0 out [] store []]\n    (if (empty? ss)\n      (if (= n (count store))\n        (conj out store)\n        out)\n      (if (and (zero? (mod i n)) (> i 0))\n        (recur (rest ss) (inc i) (conj out store) [(first ss)])\n        (recur (rest ss) (inc i) out (conj store (first ss)))))))", "problem": 54, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn mypartition [n s]\n  (let [t (take n s)]\n    (if (= n (count t))\n      (cons t (mypartition n (drop n s)))\n      nil)))", "problem": 54, "user": "4f2b0951e4b0d6649770a045"}, {"code": "(fn part-seq [i col]\n  (lazy-seq\n    (if-let [cur_col (not(empty? col))]\n      (if-let [cnt (not(<(count col)i))]\n        (cons (take i col) (part-seq i (drop i col)))))))", "problem": 54, "user": "4f61be97e4b0defedf855fc5"}, {"code": "(fn par2 [n s]\n  (take-while #(= n (count %1)) (lazy-seq (cons (take n s) (par2 n (drop n s))))))", "problem": 54, "user": "4f611127e4b0defedf855fb4"}, {"code": "(fn part [n seq]\n  (if (< (count seq) n)\n      []\n      (cons (take n seq) (part n (drop n seq)))))", "problem": 54, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn [n coll]                                                       \n  (loop [res [] coll coll]                                            \n    (let [[p r] (split-at n coll)]                                   \n      (if (< (count p) n)                                         \n          res                                                     \n          (recur (conj res p) r)))))", "problem": 54, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn pairs [num collect]\n  (loop [col collect,n 0,result []]\n    (if (empty? col)\n        (filter #(= (reduce (fn[n,_](inc n) ) 0 %) num)  result)\n     \n        (let [\n              idx (quot n num),\n              newCol (conj (get result idx []) (first col) )              \n              ]\n          (recur (rest col)\n                 (inc n)\n                 (assoc result idx newCol)\n          )\n        )\n    )\n  )\n)", "problem": 54, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn f [n i]\n  (map #(range % (+ % n))\n    (map #(* % n)\n    (range (quot (count i) n)))))", "problem": 54, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn [n xs]\n  (loop [xs xs acc [] accsub [] i 1]\n    (if (seq xs)\n      (if (< i n)\n        (recur (rest xs) acc (conj accsub (first xs)) (inc i))\n        (recur (rest xs) (conj acc (conj accsub (first xs))) [] 1))\n      acc)))", "problem": 54, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn part-seq [n sq]\r\n  (let [m (int (/ (count sq) n))]\r\n    (for [i (range m)]\r\n      (take n (drop (* i n) sq)))))", "problem": 54, "user": "4f71db68e4b07046d9f4f015"}, {"code": "(fn [n coll]\n    (loop [c coll\n           r []]\n      (if (or (empty? c) (< (count c) n))\n        r\n        (let [[t d] (split-at n c)]\n          (recur d (conj r t))))))", "problem": 54, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn [i coll]\r\n    (loop [result [] col coll]\r\n\t     (if(empty? col)\r\n\t\t(filter #(= i (count %))result)\r\n\t\t(recur (conj result (take i col))(drop i col)))))", "problem": 54, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn [n c] \n  (take-while \n    #(= (count %) n) \n    (map first \n         (iterate #(split-at n (second %)) \n                  (split-at n c)))))", "problem": 54, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn [n l]\n  (loop [l l acc []]\n    (if (or (empty? l) (< (count l) n))\n      acc\n      (recur (drop n l) (conj acc (take n l))))))", "problem": 54, "user": "4e568873535d8a8b8723a283"}, {"code": "(fn [c s] (loop [a [] [f r] (split-at c s)]\n            (if (> c (count f)) (reverse a)\n                (recur (cons f a) (split-at c r)))))", "problem": 54, "user": "4f713878e4b07046d9f4f00a"}, {"code": "(fn [x s]\n    (loop [n s\n           r '()]\n      (if (> x (count n))\n        (reverse r)\n        (recur (drop x n) (conj r (take x n))))))", "problem": 54, "user": "4f39f902e4b0e243712b1efe"}, {"code": "(fn [n l] (filter (fn [coll] (= (count coll) n) )(vals (group-by #(quot % n) l))))", "problem": 54, "user": "4f141dee535d64f603146434"}, {"code": "(fn p54\r\n\t[x s]\r\n\t(let [next-part (take x s)]\r\n\t\t(if (= (count next-part) x)\r\n\t\t\t(cons next-part (p54 x (drop x s)))\r\n\t\t\t'())))", "problem": 54, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "(fn [x l]\n  (loop [next-x (take x l) dropped-x (drop x l) r '()]\n    (if (< (count dropped-x) x)\n      (concat r (list next-x))\n      (recur (take x dropped-x) (drop x dropped-x) (concat r (list next-x)))\n)))", "problem": 54, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn f [n l]\n  (when (>= (count l) n)\n    (let [[e r] (split-at n l)]\n      (cons e (f n r)))))", "problem": 54, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "(fn _ [p s]\n  (let [[f r] (split-at p s)]\n    (if (< (count f) p)\n      []\n      (cons f (_ p r))\n    )\n  )\n)", "problem": 54, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn [n s]\n  ((fn prt-all [s]\n    (if (>= (count (last s)) n)\n      (prt-all (concat (drop-last s) (split-at n (last s))))\n      (drop-last s)))\n  (list s)))", "problem": 54, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [n c]\n  (for [x (range (int (/ (count c) n)))]\n    (subvec (vec c) (* x n) (+ n (* x n)))\n  )\n)", "problem": 54, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn [n xs]\n  (loop [result [], xs xs]\n    (let [head (take n xs)\n          tail (drop n xs)]\n      (if (= n (count head))\n        (recur (conj result head) tail)\n        result))))\n\n; #(take-nth % (apply map list (take % (iterate next %2))))", "problem": 54, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "(fn iter\n  ([n in] (iter n in []))\n  ([n in out]\n    (if (> n (count in))\n        out\n        (recur n\n               (drop n in)\n               (conj out (take n in))))))", "problem": 54, "user": "4f8345c6e4b033992c121c1b"}, {"code": "#(for [l (range %1 (inc (count %2)) %1)] \n  (take %1 (drop (- l %1) %2)))", "problem": 54, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(fn p [x s]\n  (let [[f r] (split-at x s)]\n    (if (= x (count f))\n      (cons f (p x r)))))", "problem": 54, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn [n s]\n  ((fn r [n s i]\n    (cond\n      (empty? s) (if (= n (count i)) (list i) '())\n      (= n (count i)) (cons i (r n s []))\n      :else (r n (rest s) (conj i (first s)))\n    )\n  ) n s [])\n)", "problem": 54, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "(fn f [n s]\r\n    (if (> n (count s))\r\n      nil\r\n      (conj (f n (drop n s)) (take n s))))", "problem": 54, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn [n xs]\n  (reverse\n    (map \n      reverse\n      (filter\n        #(= (count %) n)\n        (reduce\n          (fn [lol elt]\n            (if (< (count (first lol)) n)\n              (conj (rest lol) (conj (first lol) elt))\n              (conj lol (list elt))))\n          (list (list (first xs))) (rest xs))))))", "problem": 54, "user": "4f90e238e4b0dcca54ed6c94"}, {"code": "(fn [n l] (take (quot (count l) n) (vals (group-by #(quot % n) l))))", "problem": 54, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn [n s] (first (reduce \n  (fn f [[r c] e] \n    (let [c (conj c e)]\n      (if (= (count c) n)\n          [(conj r c) []]\n          [r c])))\n  [[] []] s)))", "problem": 54, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "#(reverse(\n  (fn ft[c s1 s2] \n    (if (< (count s2) c)\n      s1 \n      (ft c (conj s1 (take c s2)) (drop c s2))\n    )\n  )\n  %1\n  '()\n  %2\n))", "problem": 54, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "#(for [b (range 0 (- (count %2) % -1) %)] (subvec (vec %2) b (+ b %)))", "problem": 54, "user": "4f6511eee4b07046d9f4ef3a"}, {"code": "(fn my-partition\n  ([x coll coll2] \n    (if (and (next coll) (>= (count coll) x))\n      (my-partition x (drop x coll) (conj coll2 (take x coll)))\n      (reverse coll2)))\n  ([x coll] (my-partition x coll '())))", "problem": 54, "user": "4f8490fae4b033992c121c34"}, {"code": "#(loop [sin %2\n        sout []]\n  (if (and (> %1 0)\n           (>= (count sin) %1))\n    (recur (drop %1 sin)\n           (conj sout (take %1 sin)))\n    sout))", "problem": 54, "user": "4dc21233535d020aff1edf92"}, {"code": "(fn p2 [n coll]\n  (loop [coll coll out '()]\n    (cond\n      (< (count coll) n) out\n      :else (recur (drop n coll) (concat out (list (take n coll)))))))", "problem": 54, "user": "4f890488e4b033992c121c76"}, {"code": "#(loop [o [] a %2] (let [[f r] (split-at % a)] (if (= % (count f)) (recur (conj o f) r) o)))", "problem": 54, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn myp [n sq]\n  (let [[a b] (split-at n sq)]\n    (cond\n     (seq b) (conj (myp n b) a)\n     (= (count a) n) (conj '() a)\n     :t '())))", "problem": 54, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn [n coll] \n  (map #(take n (drop (* n %) coll)) \n       (range (quot (count coll) n))))", "problem": 54, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn d[n s]\n  ( loop [k 0\n          tot ()\n          se ()\n          ss s] (do (println k tot se ss)\n      (if (empty? ss)\n        (if (= k n)(concat tot (list se)) tot)\n        (recur \n           (if (< k n)\n              (inc k)\n               0)\n           (if (< k n)\n               tot\n               (concat tot (list se)))\n           (if (< k n)\n               (concat se (list (first ss))) () )\n           (if (< k n) (rest ss) ss))))))", "problem": 54, "user": "4f891abde4b033992c121c77"}, {"code": "(fn [n xs]\n  (loop [xs xs result []]\n    (if (>= (count xs) n)\n      (recur (drop n xs) (conj result (take n xs)))\n      result)))", "problem": 54, "user": "4f7ab8c7e4b06e829148e19c"}, {"code": "(fn my-partition [n coll]\r\n  (if (< (count coll) n) ()\r\n  (lazy-seq (cons (take n coll)\r\n                  (my-partition n (drop n coll))))))", "problem": 54, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "(fn f [n s]\r\n  (if (>= (count s) n)\r\n    (cons (take n s) (f n (drop n s)))))", "problem": 54, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn p [n s]\n          (if (> n (count s))\n            []\n            (cons (take n s) (p n (drop n s)))))", "problem": 54, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "#(loop [i %2 o ()]\n   (if (>= (count i) %1)\n     (recur (drop %1 i) (conj o (take %1 i)))\n     (reverse o)))", "problem": 54, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn blah [x coll]\n    (loop [remaining coll\n           accum '()]\n      (if (< (count remaining) x)\n        (reverse accum)\n        (recur (drop x remaining) (cons (take x remaining) accum)))))", "problem": 54, "user": "4f17aa97535d64f603146456"}, {"code": "(fn [n l]\n  (#(if (< (count %2) %)\n      %3\n      (recur % (second (split-at % %2))\n             (into %3 [(first (split-at % %2))])))\n   n l []))", "problem": 54, "user": "4f71347ae4b07046d9f4f009"}, {"code": "(fn  part [n s]    (if (empty? s)      s      (if (< (count s) n)        ()            (cons (take n s) (part n (drop n s)))        ))    )", "problem": 54, "user": "4f4be1cae4b03ad3f0c10c81"}, {"code": "(fn f [n coll]\n  (let [xs (take n coll)]\n    (if (= (count xs) n)\n      (cons xs (lazy-seq (f n (drop n coll))))\n      nil)))", "problem": 54, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn [n coll]\n  (loop [xs coll ret []]\n    (if (< (count xs) n)\n      ret\n      (recur (drop n xs) (conj ret (take n xs))))))", "problem": 54, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(fn [n c]\n  (remove #(not= n (count %)) (for [x (take (/ (count c) n) (iterate (partial + n) n))]\n    (drop (- x n) (take x c)))))", "problem": 54, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn [n s] (filter #(= (count %) n) (map #(map second %) (partition-by first (map vector (apply interleave (repeat n (range))) s)))))", "problem": 54, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn part-n [n coll]\n  (let [[part rest] (split-at n coll)]\n    (when (= (count part) n)\n      (cons part (lazy-seq (part-n n rest))))))", "problem": 54, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [n s]\n  (filter #(= n (count %))\n    (reductions #(if (= n (count %1)) [%2] (conj %1 %2)) [] s)))", "problem": 54, "user": "4fa3f91fe4b081705acca196"}, {"code": "(fn my-partition \r\n([n s] (my-partition n (drop n s) (list (take n s))))\r\n([n s r] (cond (< (count s) n) (reverse r)\r\n         :default (recur n (drop n s) (conj r (take n s))))))", "problem": 54, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "(fn [x sq] (loop [sq sq res []] (if (> x (count sq)) res (recur (drop x sq) (conj res (take x sq))))))", "problem": 54, "user": "4efd8b67535de96065cf5085"}, {"code": "#(loop [todo %2 acc []]\n  (if (< (count todo) %) acc\n      (recur (drop % todo)\n             (conj acc (take % todo)))))", "problem": 54, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn my-partition [n s]\n  (if (>= (count s) n)\n    (cons (take n s) (my-partition n (drop n s)))))", "problem": 54, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn asd [a rng]\n  (if (-> rng count (< a))\n    nil\n    (cons (take a rng) (asd a (drop a rng)))))", "problem": 54, "user": "4f82f9f7e4b033992c121c10"}, {"code": "(fn xxx [a s]\n  (when-not (< (count s) a)\n    (lazy-cat (list (take a s))\n              (xxx a (drop a s)))))", "problem": 54, "user": "4faa8de0e4b081705acca1f8"}, {"code": "(fn [n lst]\n  (letfn [(nthrest [lst n] ((apply comp (repeat n rest)) lst))]\n    (take (int (/ (count lst) n)) (map #(take n %) (iterate #(nthrest % n) lst)))))", "problem": 54, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn part [num llst]\r\n        (filter #(= num (count %)) \r\n                (loop [ret []\r\n               lst llst]\r\n          (if (empty? lst)\r\n            ret\r\n            (recur (conj ret (take num lst)) (drop num lst))))))", "problem": 54, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn [n s]\n (loop [remainder s result []]\n   (if (< (count remainder) n)\n     result\n     (recur (drop n remainder) (conj result (take n remainder))))))", "problem": 54, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn f [n s]\n    (if (<= n (count s))\n      (cons (take n s) (f n (drop n s)))\n      []))", "problem": 54, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn my-partition [n coll]\n  (loop [out [] r coll]\n    (if (< (count r) n)\n      out\n      (recur\n       (conj out (first (split-at n r)))\n       (last (split-at n r)))))\n  )", "problem": 54, "user": "4fa17b00e4b0dcca54ed6d5f"}, {"code": "(fn [c s]\n  (let [ss (take c (iterate rest s))]\n    (apply map list (map (partial take-nth c) ss))))", "problem": 54, "user": "4f91a38ae4b0dcca54ed6c9f"}, {"code": "#(for \n  [p (range 0 (int (/ (count %2) %)))] \n  (take % (drop (* p %) %2)))", "problem": 54, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn p [x s]\n    (if (< (count s) x) \n      nil\n      (cons (take x s) (p x (drop x s)))))", "problem": 54, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(comp\n  #(apply map list %)\n  (fn [n coll]\n    (map\n      #(take-nth n %2)\n      (range n)\n      (iterate rest coll))))", "problem": 54, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn [n xs] (apply map list (vals (group-by #(mod % n) xs))))", "problem": 54, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn partition-sequence [n s]\n  (if (< (count s) n) ()\n    (cons (take n s) (partition-sequence n (drop n s)))))", "problem": 54, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn [n xs]\n  (letfn [(iter [k xs acc]\n            (cond\n              (zero? k)\n                (cons acc (iter n xs []))\n              (empty? xs)\n                '()\n              true\n                (iter (dec k) (rest xs) (conj acc (first xs)))))]\n    (iter n xs [])))", "problem": 54, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [n s]\n  (take-while #(= (count %) n)\n    (map (partial take n)\n         (iterate (partial drop n)\n            s))))", "problem": 54, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "(fn f [n coll]\n  (let [c (take n coll)]\n    (when (= (count c) n)\n      (cons c (lazy-seq (f n (drop n coll)))))))", "problem": 54, "user": "4fb2101ce4b081705acca284"}, {"code": "#(loop [c %2 r []]\n    (let [s (take % c)]\n      (if (= % (count s))\n        (recur (drop % c) (conj r s))\n        r)))", "problem": 54, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(fn f [n c]\r\n  (if (< (count c) n)\r\n    (list)\r\n    (let [[ca cb] (split-at n c)]\r\n      (conj (f n cb) ca))))", "problem": 54, "user": "4facff22e4b081705acca230"}, {"code": "(fn my-partition [n v]\r\n  (if (>= (count v) n)\r\n    (cons (take n v) (my-partition n (drop n v)))))", "problem": 54, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(fn [n c] \n  (filter #(= (count %) n) \n    (map #(take n (nthnext c %)) (range 0 (count c) n))))", "problem": 54, "user": "4fb3b865e4b081705acca2a2"}, {"code": "#(map (fn [i] (take % (drop (* i %) %2))) (range (quot (count %2) %)))", "problem": 54, "user": "4fa30027e4b081705acca187"}, {"code": "(fn part [n s]\n\n   (cond (= (count s) n) [s] \n      (< (count s) n) nil \n      :else (cons (take n s) (part n (drop n s)) )\n   )   \n)", "problem": 54, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn [n s]\n   (loop [s s r []]\n     (if (>= (count s) n)\n       (recur (drop n s) (conj r (take n s)))\n       r)))", "problem": 54, "user": "4f1bb9d8535d64f60314647d"}, {"code": "(fn [n lst] (map (partial take n) (take-while #(>= (count %) n) (iterate (partial drop n) lst))))", "problem": 54, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "#(loop [coll %2, res ()]\n  (if (< (count coll) %)\n    res\n    (recur\n      (drop % coll)\n      (concat\n        res\n        (list (take % coll))))))", "problem": 54, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn partition2 [n coll] (when (<= n (count coll)) (cons (take n coll) (partition2 n (drop n coll)))))", "problem": 54, "user": "4fa99ee1e4b081705acca1e4"}, {"code": "(fn [n xs]\n  (let [len (count xs)\n        stops (range 0 (- len (mod len n)) n)]\n    (map (fn [x](subvec (vec xs) x (+ x n))) stops)))", "problem": 54, "user": "4ebbb6bc535dfed6da9c6d71"}, {"code": "(fn p [n coll]\n  (let [part (take n coll)]\n    (when (= n (count part))\n      (cons part (p n (drop n coll))))))", "problem": 54, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn part \n  ([n list] \n    (part n list [] []))\n  ([n list acc current]\n    (if (empty? list)\n      acc\n      (let [el          (first list)\n            new-current (concat current [el])]\n        (if (== (count new-current) n)\n          (part n (rest list) (concat acc [new-current]) [])\n          (part n (rest list) acc new-current))))))", "problem": 54, "user": "4fbe2cfbe4b081705acca30c"}, {"code": "(fn a [n s]\n  (when (>= (count s) n) (cons (take n s) (a n (drop n s)))))", "problem": 54, "user": "4fbd24d2e4b081705acca2ff"}, {"code": "(fn my-partition [n coll]\n  (let [[pre post] (split-at n coll)]\n    (if (not= n (count pre))\n      '()\n      (cons pre (lazy-seq (my-partition n post))))))", "problem": 54, "user": "4f6bab49e4b07046d9f4efb1"}, {"code": "(fn my-part [num coll]  \n  (for [x (range 1 (inc (quot (count coll) num)))]\n    (take-last num (take (* x num) coll))))", "problem": 54, "user": "4faafccde4b081705acca209"}, {"code": "(fn my-partition [num s]\n  (let [[x y] (split-at num s)]\n    (if (<= num (count x))\n      (cons x (my-partition num y)))))", "problem": 54, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn [n s]\n  (letfn [(fetch [s]\n            (when (<= n (count s))\n              [(take n s) (drop n s)]))\n          (exec [s]\n            (when-let [[h t] (fetch s)]\n              (lazy-seq (cons h (exec t)))))]\n    (exec s)))", "problem": 54, "user": "4fc13433e4b081705acca32b"}, {"code": "(fn [n s]\n  (loop [out [] in s]\n    (if (< (count in) n)\n      out\n      (recur (conj out (take n in))\n             (drop n in)))))", "problem": 54, "user": "4faec810e4b081705acca24e"}, {"code": "#(loop [s %2 acc ()]\n    (let [[part more][(take %1 s) (drop %1 s)]]\n      (if (< (count part) %1)\n        (reverse acc)\n        (recur more (conj acc part)))))", "problem": 54, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn [n coll]\n  (loop [append-to [] remains coll]\n    (if (= (count (take n remains)) n)\n      (recur (conj append-to (take n remains)) (drop n remains))\n      append-to)))", "problem": 54, "user": "4f9a7dc0e4b0dcca54ed6d0b"}, {"code": "#(first (reduce\n  (fn [[r a] x]\n    (let [aa (conj a x)]\n      (if (= %1 (count aa))\n          [(conj r aa) []]\n          [r aa])))\n  [[] []]\n  %2))", "problem": 54, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn [n coll]\r\n  (loop [acc (list (take n coll)), left (drop n coll)]\r\n    (if (< (count left) n)\r\n        (reverse acc)\r\n        (recur (cons (take n left) acc) (drop n left)))))", "problem": 54, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn [n s]\n  (loop [ret [] s s cur []]\n    (if (empty? s)\n      (if (= (count cur) n)\n        (conj ret cur)\n        ret)\n      (if (= (count cur) n)\n        (recur (conj ret cur) (rest s) [(first s)])\n        (recur ret (rest s) (conj cur (first s)))))))", "problem": 54, "user": "4fb4f42ae4b081705acca2b4"}, {"code": "(fn part [n x] (if (< (count x) n) nil\n            (cons (take n x) (part n (drop n x)))))", "problem": 54, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn aaa [n l]\n    (cond\n        (empty? l) '()\n        (< (count l) n) nil\n        :else\n            (cons (take n l) (aaa n (drop n l)))\n    ))", "problem": 54, "user": "4fbdcb87e4b081705acca30a"}, {"code": "(fn partition--reduce\n  [n coll] {:pre [(integer? n), (pos? n)]}\n  (->> coll\n       (reduce (fn [[out acc i] x]\n                 (if (= i n)\n                   [(conj out (conj acc x)) [] 1]\n                   [out (conj acc x) (inc i)]))\n               [[] [] 1])\n       first))", "problem": 54, "user": "4fc6305de4b0ee37620e180b"}, {"code": "(fn f [n l]\n           (when-let [s (seq l)]\n             (let [[a b] (split-at n l)]\n               (when (= (count a) n)\n                   (cons a (f n b))))))", "problem": 54, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn part [n coll] \n  (let [p (take n coll)] \n      (when (= n (count p)) (cons p (part n (drop n coll))))))", "problem": 54, "user": "4fc67081e4b0ee37620e1813"}, {"code": "(fn my-partition [n coll]\n  (cond (empty? coll) '()\n        (< (count coll) n) '()\n        :else         (cons (take n coll) (my-partition n (drop n coll)))))", "problem": 54, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn part [n coll]\n  (let [addpart #(if (< (count (last %)) n)\n                  (conj (vec (butlast %)) (conj (last %) %2))\n                  (conj % [%2]))]\n  (filter #(= n (count %)) (reduce addpart [[]] coll))))", "problem": 54, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [ j l ] \n  ( filter #( = (count %) j)  ((fn [ s c ] \n    (if (empty? s ) c \n      (let [[f t] (split-at j s)] \n        (recur t (concat c (list f)) )) )) l '() )))", "problem": 54, "user": "4fc43a8ee4b081705acca346"}, {"code": "(fn [n xs] \n  (loop [ys xs acc '()] \n    (if (< (count ys) n) \n      acc \n      (recur (drop n ys) (concat acc (list (take n ys)))))))", "problem": 54, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "(fn [n l]\n  (filter #(= (count %) n)\n    (map val\n      (group-by #(quot % n) l))))", "problem": 54, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "#(for[i %2 :when (and (> (- (count %2) i) (- % 1)) (= 0 (rem i %)))] (take % (drop i %2)))", "problem": 54, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn p [n x]\n  (if (>= (count x) n)\n    (cons (take n x) (p n (drop n x)))))", "problem": 54, "user": "4fa2fa5ee4b081705acca186"}, {"code": "(fn part [n l]\n(filter #(= n (count %))\n        (map #(map (fn [e] (second e)) %)\n             (partition-by #(int (/ (first %) n))\n                            (map (fn [i v] [i v]) (range) l)))))", "problem": 54, "user": "4faac363e4b081705acca200"}, {"code": "(fn prttn [n coll]\n  (if (< (count coll) n)\n    '()\n    (cons (take n coll) (prttn n (drop n coll)))))", "problem": 54, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn [n xs] \n  (loop [res [] xs xs] \n    (let [h (take n xs)] \n      (if (< (count h) n) res (recur (conj res h) (drop n xs))))))", "problem": 54, "user": "4fa6a491e4b081705acca1bc"}, {"code": "(fn my-partition [n l]\n  (if (> n (count l)) ()\n    (cons (take n l) (my-partition n (drop n l) ))\n    )\n  )", "problem": 54, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "#(take-nth % (apply map list (take % (iterate next %2))))", "problem": 54, "user": "4ef48422535dced4c769f236"}, {"code": "(fn part [n coll]\n  (let [[a b] ((juxt take drop) n coll)]\n    (if (= (count a) n)\n      (cons a (part n b))\n      nil)))", "problem": 54, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn f [n coll]\n  (let [[xs ys] (split-at n coll)]\n    (if (< (count xs) n)\n      ()\n      (cons xs (f n ys)))))", "problem": 54, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn my-partition [x col]\n  (reverse\n  ((fn my-partition* [x col out]\n  (if (< (count col) x)\n    out\n    (my-partition* x (drop x col) (cons (take x col) out)))) x col ())))", "problem": 54, "user": "4fc2e302e4b081705acca33a"}, {"code": "(fn bl[tgt n lst]\n  (if (< (count lst) n) (reverse tgt)\n      (bl (cons (take n lst) tgt) n (drop n lst)))) '()", "problem": 54, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn my-partition [v s]\n  (loop [s  (vec s) coll []]\n    (if (< (count s) v)\n      coll\n      (recur (subvec s v (count s)) (conj coll (subvec s 0 v))))))", "problem": 54, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "#(loop [xs %2 acc []]\n  (if (< (count xs) %)\n      acc\n      (recur (drop % xs) (conj acc (take % xs)))))", "problem": 54, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn zpartition [l n]\n  (letfn [(zpart [result l n]\n            (if (< (count n) l)\n              result\n              (zpart (conj result (take l n)) l (drop l n))\n            )\n          )]\n    (zpart [] l n)\n  )\n)", "problem": 54, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "(fn [n coll]\n  (->> coll\n    (iterate #(drop n %))\n    (map #(take n %))\n    (take-while #(= n (count %)))))", "problem": 54, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn part [n coll] (lazy-seq (if (>= (count coll) n) (cons (take n coll) (part n (drop n coll))))))", "problem": 54, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn [n c] (loop [oc c rc []]\r\n  (if (< (count oc) n) rc (recur (drop n oc) (conj rc (take n oc))))))", "problem": 54, "user": "4fd29d7ce4b04c3a95aa0424"}, {"code": "(fn [n c]\n     (for [ x (range (quot (count c) n)) ] \n(take n (drop (* n x) c))))", "problem": 54, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn ptn [n s]\n  (let [nxt (take n s)]\n    (when (= n (count nxt))\n      (cons nxt(lazy-seq (ptn n (drop n s)))))))", "problem": 54, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn divide[n coll] (if (> n (count coll)) '() (\n    cons (take n coll) (divide n (drop n coll))\n    ) \n  )\n)", "problem": 54, "user": "4fce75cfe4b03432b189f400"}, {"code": "(fn [n s] (filter #(>= (count %) n) (partition-by #(unchecked-divide % n) s)))", "problem": 54, "user": "4fd91099e4b05e33b9224f32"}, {"code": "(fn [x y]\r\n    (loop [s y\r\n         r []]\r\n    (if (< (count s) x)\r\n      r\r\n      (recur (drop x s) (conj r (take x s))))))", "problem": 54, "user": "4f82ed48e4b033992c121c0e"}, {"code": "#(apply map list\n  (for [y (range %)] (take-nth % (drop y %2))))", "problem": 54, "user": "4ecbd630535df97575fdabe1"}, {"code": "(fn ps [n s]\r\n   (loop [s s\r\n          p '()\r\n          ret '()]\r\n      (cond\r\n         (= (count p) n) (recur s '() (cons p ret))\r\n         (empty? s) (reverse (map reverse ret))\r\n         :else (recur (rest s) (cons (first s) p) ret))))", "problem": 54, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn p [n xs]\n  (if (= (count (take n xs)) n)\n      (cons (take n xs)\n          (p n (drop n xs)))\n      []))", "problem": 54, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn [n s]\n  (loop [ss s acc []]\n    (if (< (count ss) n)\n      acc\n      (recur (drop n ss) (conj acc (take n ss))))))", "problem": 54, "user": "4f726dd2e4b07046d9f4f034"}, {"code": "#(loop [v [] l %2] (if (nth l (dec %) false) \r\n  (recur (conj v (take % l)) (drop % l)) v))", "problem": 54, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "#(loop [accum [], l %2]\n  \t(if (< (count l) %1)\n\t\t\taccum\n\t\t\t(recur (conj accum (take %1 l)) (drop %1 l))))", "problem": 54, "user": "4fb57e06e4b081705acca2bf"}, {"code": "#(for [x (range 0 (count %2) %) :let [y (take % (drop x %2))] :while (= % (count y))] y)", "problem": 54, "user": "4e929dd0535dbda64a6f6b05"}, {"code": "(fn part-a-seq [n s]\n  (letfn [(process [[res acc] v]\n            (let [newacc (conj acc v)]\n              (if (>= (count newacc) n)\n                [(conj res (seq newacc)) []]\n                [res newacc])))]\n    (let [[final-result toss]  (reduce process [[][]] s)]\n      (seq final-result))))", "problem": 54, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "(fn [n coll]\n  (loop [r [] xs coll]\n    (if (< (count xs) n)\n      r\n      (recur (conj r (take n xs)) (drop n xs)))))", "problem": 54, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn f [n s]\n    (if (>= (count s) n)\n      (cons (take n s) (f n (drop n s)))))", "problem": 54, "user": "4ee1f2ba535d10e5ff6f535f"}, {"code": "(fn f [n xs]\n  (if (> n (count xs))\n    '()\n    (cons (take n xs) (f n (drop n xs)))))", "problem": 54, "user": "4fb1fa51e4b081705acca283"}, {"code": "(fn [n s]\n  ((fn iter [in out sub]\n    (cond (empty? in) (if (= (count sub) n) (conj out sub) out)\n          (= (count sub) n) (iter (rest in) (conj out sub) [(first in)])\n          :else (iter (rest in) out (conj sub (first in)))))\n   s [] []))", "problem": 54, "user": "4fe8e771e4b0547ebccb2431"}, {"code": "(fn my-partition [n coll]\r\n  (let [ans\r\n        (reduce (fn [acc nxt]\r\n                  (if (= n (count (first acc)))\r\n                    (conj acc (list nxt))\r\n                    (conj (rest acc) (conj (first acc) nxt))))\r\n                '()\r\n                coll)]\r\n    (if (= n (count (first ans)))\r\n      (reverse (map reverse ans))\r\n      (reverse (map reverse (rest ans))))))", "problem": 54, "user": "4e7e4a1f535db169f9c7970c"}, {"code": "(fn part [n l]\n  (if (<= n (count l)) \n      (conj (part n (drop n l)) (take n l))))", "problem": 54, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn [n s] ((reduce #(let [x (conj (%1 1) %2)] (if (= (count x) n) [(conj (%1 0) x) []] [(%1 0) x])) [[] []] s) 0))", "problem": 54, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn [n a]\n  (partition-by #(int (/ % n)) (drop-last (mod (count a) n) a)))", "problem": 54, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "(fn [n coll]\r\n            (loop [o '()\r\n                   p (conj '() (first coll))\r\n                   r (rest coll)]\r\n              (if (empty? r)\r\n                (if (= (count p) n) (reverse (conj o (reverse p))) (reverse o))\r\n                (recur \r\n                  (if (= (count p) n) (conj o (reverse p)) o)\r\n                  (if (= (count p) n) (conj '() (first r)) (conj p (first r)))\r\n                  (rest r)))))", "problem": 54, "user": "4fdf4e2be4b05e33b9224f96"}, {"code": "(fn f [n s]\n  (if (< (count s) n)\n    nil\n    (cons (take n s) (f n (drop n s)))))", "problem": 54, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "(fn part [n seq]\n  (if (< (count seq) n)\n     nil\n     (cons (take n seq)\n           (part n (drop n seq)))))", "problem": 54, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn my-partition\n  [n coll]\n  (if (> n (count coll))\n    nil\n    (cons (take n coll) (my-partition n (drop n coll)))))", "problem": 54, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn -partition [n coll]\n  (if (< (count coll) n)\n    '()\n    (cons\n      (map #(nth coll %) (range n))\n      (-partition n (drop n coll)))))", "problem": 54, "user": "4fdb881ee4b05e33b9224f5e"}, {"code": "(fn p [n seq]\n  (loop [seq seq, curr [], result []]\n    (if (= (count curr) n)\n      (recur seq [] (conj result curr))\n      (if (empty? seq)\n        result\n        (recur (rest seq) (conj curr (first seq)) result)))))", "problem": 54, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "(fn pp [step coll]\r\n     (lazy-seq\r\n       (when-let [s (seq coll)]\r\n         (let [p (doall (take step s))]\r\n           (when (= step (count p))\r\n             (cons p (pp step (nthrest s step))))))))", "problem": 54, "user": "4ff07688e4b0678c553fc324"}, {"code": "(fn partn [n list] \n  (if (< (count list) n)\n    '()\n    (cons (take n list) (partn n (drop n list)))))", "problem": 54, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "(fn pp [n coll]\r\n  (loop [result [] coll coll]\r\n    (if (< (count coll) n)\r\n      result\r\n      (recur (conj result (take n coll)) (drop n coll)))))", "problem": 54, "user": "4fd170fce4b04c3a95aa0411"}, {"code": "(fn mypart [n s]\n  (lazy-seq\n    (when (and (seq s) (<= n (count s)))\n      (cons (take n s)\n        (mypart n (drop n s))))))", "problem": 54, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn partition2 [n coll] (if (<= n (count coll)) (cons (take n coll) (partition2 n (drop n coll)))))", "problem": 54, "user": "4ff50604e4b0678c553fc365"}, {"code": "(fn [n coll]\r\n  \t(->> (iterate (fn [[_ r]] [(take n r) (drop n r)]) [nil coll])\r\n\t\t\t (map first)\r\n\t\t\t (rest)\r\n\t\t\t (take-while #(= n (count %)))))", "problem": 54, "user": "4f4fbed7e4b03ad3f0c10ce8"}, {"code": "(fn p [n l]\r\n    (when (<= n (count l))\r\n      (cons (take n l) (p n (drop n l)))))", "problem": 54, "user": "4ff201d7e4b0678c553fc330"}, {"code": "(fn p [n l]\n  (if (< (count l) n)\n    '()\n    (cons (take n l) (p n (drop n l)))))", "problem": 54, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn ! [n l]\n  (if (>= (count l) n)\n    (cons (first (split-at n l)) (! n (drop n l)))\n    '()))", "problem": 54, "user": "4ff3e771e4b0678c553fc356"}, {"code": "(fn part [n c]\n        (if (>= (count c) n)\n            (lazy-seq (cons (take n c) (part n (drop n c))))))", "problem": 54, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn mypart [num inlist]\n  (if (< (count inlist) num)\n    '()\n    (concat (list (take num inlist))\n      (mypart num (drop num inlist)))))", "problem": 54, "user": "4fc50bcbe4b081705acca375"}, {"code": "(fn [x s]\n  (loop [acc []\n         l s]\n    (if (< (count l) x)\n      acc\n      (recur (conj acc (take x l)) (nthrest l x)))))", "problem": 54, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn [n aseq]\n  \t(loop [in aseq out []]\n\t\t\t(if (< (count in) n)\n\t\t\t\tout\n\t\t\t\t(recur (nthrest in n) (conj out (take n in))))))", "problem": 54, "user": "4e6a63fd535d8ccf87e9feda"}, {"code": "(fn ff [x s] (let [[h t] (split-at x s) ] (if (= x (count h)) (cons h (ff x t)) [] )))", "problem": 54, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn p [n s] \n  (when (>= (count s) n) \n    (concat [(take n s)] (p n (drop n s)))))", "problem": 54, "user": "4ff82b00e4b0678c553fc395"}, {"code": "(fn [n x]\r\n    (loop [c x\r\n           r []]\r\n      (if (< (count c) n)\r\n        r\r\n        (recur (drop n c) (conj r (take n c))))))", "problem": 54, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn mp1 [n s]\n  ;; bah! n not req'd in loop - doesn't vary\n  (loop [n n, s s, acc []]\n    ;; bah! (if seq) redundant - (if count)\n    (if (seq s)\n      (recur n (drop n s)\n             (if (>= (count s) n) (conj acc (take n s)) acc))\n      acc)))", "problem": 54, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "(fn partn\r\n  ([n s] (apply list (partn n s [])))\r\n  ([n s acc]\r\n   (let [x (take n s)\r\n         k (count x)]\r\n     (if (< k n)\r\n       acc\r\n       (partn n (drop n s) (conj acc x))))))", "problem": 54, "user": "500159b3e4b0678c553fc419"}, {"code": "(fn [n c]\n  (loop [l c r []]\n    (let [f (take n l) b (drop n l)]\n      (if (< (count f) n) r (recur b (conj r f))))))", "problem": 54, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn part [size s]\n  (loop [col s res []]\n    (if (< (count col) size)\n      res\n      (recur (drop size col) (conj res (take size col))))))", "problem": 54, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn part [n coll]\n    (when (>= (count coll) n)\n        (cons (take n coll) (part n (drop n coll)))))", "problem": 54, "user": "4fe8a3bde4b07c9f6fd12c61"}, {"code": "(fn a [part-len leftover] (if (>= (count leftover) part-len) (cons (take part-len leftover) (a part-len (nthrest leftover part-len)))))", "problem": 54, "user": "5007e90be4b0b17c647f5228"}, {"code": "#(for [x (iterate (partial drop %) %2) \n       :while (>= (count x) %)] \n   (take % x))", "problem": 54, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn part [size iseq]\n    (loop [sequence iseq\n           outgoing '()]\n      (if (> size (count sequence))\n        outgoing\n        (recur (drop size sequence) (concat outgoing (list (take size sequence)))))))", "problem": 54, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn t1 [n col]\n  (when-let [s (seq col)]\n    (let [p (take n s)]\n      (when (= n (count p))\n          (cons p (t1 n (nthrest s n)))))))", "problem": 54, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "(fn f [n xs]\n  (let [ys (take n xs) c (count ys)]\n    (if (< c n) ()\n      (cons ys (f n (drop n xs))))))", "problem": 54, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn my-partition [n col]\r\n  (let [s (take n col)]\r\n    (if (= n (count s))\r\n        (cons s (my-partition n (drop n col))))))", "problem": 54, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "#((fn [n l partitions acc]\n   (let [parts-and-acc (cons (reverse acc) partitions)]\n     (if (empty? l)\n       (reverse (if (= (count acc) n)\n                  parts-and-acc\n                  partitions))\n       (if (= (count acc) n)\n         (recur n l parts-and-acc '())\n         (recur n (rest l) partitions (cons (first l) acc)))))) %1 %2 '() '())", "problem": 54, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn p [n c]\n  (lazy-seq\n   (let [x (take n c)]\n     (if (= n (count x))\n       (cons x (p n (drop n c)))))))", "problem": 54, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn [n coll] (first (reduce (fn [[all cur] it]\r\n                              (let [new (conj cur it)]\r\n                                (if (= (count new) n)\r\n                                  [(conj all new) []]\r\n                                  [all new]))) [[] []] coll)))", "problem": 54, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn my-partition [n coll]\n  (if (< (count coll) n)\n    nil\n    (cons (take n coll) (my-partition n (drop n coll)))))", "problem": 54, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn [n c] (loop [c c r []] (if (< (count c) n) r (recur (drop n c) (conj r (take n c))))))", "problem": 54, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn foo [len s]\n  (if (<= len (count s))\n    (cons (take len s)\n        (foo len (drop len s)))))", "problem": 54, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn part [n s]\n  (if (<= n (count s))\n   (cons (take n s) (part n (drop n s)))\n   '()))", "problem": 54, "user": "50127fbfe4b030d97e4db70f"}, {"code": "(fn [n coll]\n  (loop [acc [], remaining (count coll), xs coll]\n    (if (< remaining n)\n      acc\n      (recur (conj acc (take n xs)) (- remaining n) (drop n xs)))))", "problem": 54, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn part [n coll]\n  (if (< (count coll) n)\n    '()\n    (cons (take n coll) (part n (drop n coll)))))", "problem": 54, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn [n x]\n  (loop [y x, s []]\n    (if (< (count y) n) s (recur (drop n y) (conj s (take n y)))) ))", "problem": 54, "user": "5014718fe4b094324338f8e3"}, {"code": "(fn partition2 [n coll]\r\n  (if (<= n (count coll))\r\n    (cons (take n coll) (partition2 n (drop n coll)))))", "problem": 54, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "#(loop [ans [] todo %2]\n  (if (< (count todo) %1)\nans\n(recur\n  (conj ans (take %1 todo))\n(drop %1 todo))))", "problem": 54, "user": "5012614ee4b02a085b99dc79"}, {"code": "(fn k-part [n s]\n       (if (< (count s) n) '()\n           (cons (first (split-at n s)) (k-part n (last (split-at n s))))))", "problem": 54, "user": "4f90dd63e4b0dcca54ed6c93"}, {"code": "#(loop [res [], [h t] (split-at %1 %2)] ; %1 = n, %2 = collection\n  (if (= (count h) %1)\n    (recur (conj res h) (split-at %1 t))\n    res))", "problem": 54, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn f [x s]\n  (when-let [s (seq s)]\n    (let [[h t] (split-at x s)]\n      (when (= x (count h))\n        (cons h (lazy-seq (f x t)))))))", "problem": 54, "user": "50142490e4b07d18bdaaf70a"}, {"code": "(fn ptn [n coll]\n  (when (>= (count coll) n)\n    (cons (take n coll) (ptn n (drop n coll)))))", "problem": 54, "user": "5007f751e4b0b17c647f522b"}, {"code": "(fn [n l] (for [i (range (Math/floor (/ (count l) n)))] (take n (drop (* n i) l))))", "problem": 54, "user": "4fd8544be4b0dab7d829f390"}, {"code": "(fn [n s] (filter #(= n (count %)) (map val (group-by #(quot % n) s))))", "problem": 54, "user": "4ff76effe4b0678c553fc390"}, {"code": "(fn[x y]\n  (loop [l y v []]\n    (if (empty? l)\n      (filter #(= (count %) x) v)\n    (recur (drop x l) (conj v (take x l))))))", "problem": 54, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn __ [n s]\n  (let [v (into [] s)]\n       (filter #(not (nil? %))\n               (for [idx (map first (filter (fn [[i x]] (zero? (mod i n))) \n                                    (map-indexed vector v)))]\n                 (let [len (+ n idx)]\n                      (if (<= len (count v))\n                        (subvec v idx len)))))))", "problem": 54, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn part [c input] (\n  (fn [c input result] (\n      if (< (count input) c)\n      result\n      (recur c (drop c input) (concat result (list (take c input))))                                \n   )) c input '()\n )\n)", "problem": 54, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn [n col]\n  (loop [col col res []]\n    (if (or (empty? col) (< (count col) n))\n      res\n      (recur (drop n col) (conj res (take n col))))))", "problem": 54, "user": "4fe1a734e4b0dd6cd5ce3637"}, {"code": "(fn [n s & c]\n  (if (<= n (count s))\n    (recur n (drop n s) (conj c (take n s)))\n    (reverse c)))", "problem": 54, "user": "50166470e4b052339a490e76"}, {"code": "(fn [n s]\n  (loop [ret []\n         xs   s]\n         (if (< (count xs) n)\n             ret\n             (recur (conj ret (take n xs))\n                              (drop n xs)))))", "problem": 54, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "(fn pt [ n s]\r\n  (loop [ss s\r\n         rs []]\r\n    (if (< (count ss) n)\r\n      rs\r\n      (recur (drop n ss) (conj rs (take n ss)) )))\r\n  )", "problem": 54, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn [n s]\n  (loop [os s\n         ns '()]\n    (if (> n (count os))\n      (reverse ns)\n      (recur\n       (drop n os) ; os\n       (cons (take n os) ns)))))", "problem": 54, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn ps[n sq]\n  (loop [tsq sq nsq (list)]\n        (if (< (count tsq) n)\n          nsq\n          (recur (drop n tsq) (concat nsq (list (take n tsq)) )))))", "problem": 54, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "(fn part [numero lista] \n   (cond (> numero (count lista)) []\n         (<= numero (count lista))\n             (cons (take numero lista) (part numero (drop numero lista)))))", "problem": 54, "user": "5013141de4b0f26a0e3320a9"}, {"code": "(fn part [n s]\n  (loop [in s out []]\n    (if (> n (count in)) out\n      (recur (drop n in) (conj out (take n in))))))", "problem": 54, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn pt [n c]\n  (when (<= n (count c))\n    (cons (take n c) (pt n (drop n c)))))", "problem": 54, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn part [n xs]                                                                                                              \n  (let [ngroup (quot (count xs) n)                                                                                             \n        ks (flatten (for [x (range ngroup)]                                                                                    \n                         (take n (cycle [x]))))                                                                                \n        comb (map vector ks xs)                                                                                                \n        grouped (group-by first comb)                                                                                          \n        vls (map #(map second %) (vals grouped))                                                                               \n        ]                                                                                                                      \n    vls                                                                                                                        \n    ))", "problem": 54, "user": "4f2a35ace4b0d6649770a03a"}, {"code": "(fn [x xs]\n   (let [ms (filter #(= (rem % x) 0) xs)]\n      (filter #(= (count %) x)\n    \t   (for [m ms] (take x (drop m xs))))))", "problem": 54, "user": "501d52a8e4b066e56b9d0b20"}, {"code": "(fn [n s]\n  (loop [r []\n         s2 (take (* n (quot (count s) n)) s)]\n    (let [[s3 s4 ] (split-at n s2)]\n      (if (< (count s3) n)\n        r\n        (recur (concat r [s3]) s4)))))", "problem": 54, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn [x s]\n  (keep #(if (>= (count %) x) % nil)\n    (partition-by #(quot % x) s)))", "problem": 54, "user": "502ac96de4b0614b5299611b"}, {"code": "(fn [n coll]\n  (loop [res []\n         [a b] (split-at n coll)]\n    (if (== (count a) n)\n      (recur (conj res a) (split-at n b))\n      res)))", "problem": 54, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn f [n coll]\n  (if (< (count coll) n)\n      ()\n      (cons (take n coll) (f n (drop n coll)))))", "problem": 54, "user": "502a5e59e4b09e8f859a9fbc"}, {"code": "#(loop [c % a %2 seq []] (if (>= (count a) c) (recur c (drop c a) (into seq (list (take c a)))) seq))", "problem": 54, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn __ [part-size col]\n  (filter #(= part-size (count %)) \n          (partition-by #(int (/ % part-size)) col)))", "problem": 54, "user": "4fa719c0e4b081705acca1bf"}, {"code": "(fn p [n seq]\r\n  (let [s (split-at n seq)\r\n        lst (last s)\r\n        cnt (count lst)]\r\n    (if (>= cnt n)\r\n      (concat (butlast s) (p n lst))\r\n      (if (= cnt n) s (butlast s)))))", "problem": 54, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn part [n coll]\n  (take-while #(= n (count %))\n    (lazy-seq \n     (cons (take n coll) (part n (drop n coll))))))", "problem": 54, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn [n coll]\r\n  (loop [v coll result []]\r\n    (if (empty? v)\r\n      result\r\n      (recur (drop n v) (if (>= (count v) n) (conj result (take n v)) result)))))", "problem": 54, "user": "5028bce0e4b01614d1633ffb"}, {"code": "(fn [n s]\n      (loop [s s x '()]\n       (println s)\n       (let [f (get (split-at n s) 0) r (get (split-at n s) 1)]\n        (if (< (count s) n) (reverse x)\n          (recur r (cons f x)))))\n\n    )", "problem": 54, "user": "5029fccee4b023940c84aa47"}, {"code": "#(loop [xs %2 acc []]\n  (if (< (count xs) %) acc\n   (recur (drop % xs) (conj acc (take % xs)))))", "problem": 54, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "(fn part [n s]\n  (if (>= (count s) n)\n    (cons (take n s) (part n (drop n s)))))", "problem": 54, "user": "50052d38e4b0678c553fc45c"}, {"code": "; recursive\n(fn f [n coll]\n  (let [[h t] (split-at n coll)]\n    (if (= (count h) n) \n      (cons h (f n t))\n      nil))\n)\n; with an accumulator in a looop\n;(fn [n coll]\n;  (loop [[h t] (split-at n coll)\n;        accum []]\n;    (if (< (count h) n)\n;      accum\n;      (recur (split-at n t) (conj accum h)))))", "problem": 54, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn [n coll]\n  ((fn part [n coll accum]\n            (if (> n (count coll))\n              nil\n              (concat (conj accum (seq (take n coll)))\n                      (part n (drop n coll) accum))))\n    n coll []))", "problem": 54, "user": "501c1492e4b086d93747d180"}, {"code": "#(take-nth % (apply map list (take % (iterate next %2))))", "problem": 54, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "#(let [ \n  part (fn part [n1 arr1] (for [x (range n1)] (take-nth n1 (nthrest arr1 x))))\n  depart (fn depart [n2 arr2 l2] (for [y (range (/ l2 n2))] (map (fn [p] (first (nthrest p y))) arr2)))\n  cut-last-nil (fn cut [arr3] (if (nil? (last (last arr3))) (butlast arr3) arr3))\n  ]\n  (cut-last-nil (depart %1 (part %1 %2) (count %2))))", "problem": 54, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "(fn [n c]\n  (reverse (reduce \n    (fn [prev curr]\n      (let [part (take n (nthrest c (* n curr)))\n            len  (count part)]\n        (cond\n         (> n len) prev\n         (= n len) (conj prev part)))) '()\n      (range (/ (count c) n)))))", "problem": 54, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "#(loop [s %2 r []]\r\n  (let [[a b] (split-at % s)\r\n        l (conj r a)]\r\n    (if (<= % (count b)) (recur b l) l)))", "problem": 54, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [n c] (filter #(= n (count %))\n    (partition-by\n      #(quot % n)\n      c)))", "problem": 54, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn [n coll] \n  (let [len (count coll)] \n    (for \n      [i (range len) \n        :when (and (= 0 (mod i n)) (>= len (+ i n)))] \n        (take n (drop i coll)))))", "problem": 54, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "(fn part [n s]\n  (let [c (count s)\n        r (mod c n)]\n    (for [i (range 0 (- c r) n)]\n      (for [j (range i (+ i n))]\n        (nth s j)))))", "problem": 54, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn [n s]\r\n  (loop [a [] r s]\r\n    (if (< (count r) n)\r\n      a\r\n      (recur (conj a (take n r)) (drop n r)))))", "problem": 54, "user": "4e8768f6535dceadca469850"}, {"code": "(fn mpart [n coll]\n  (let [part (take n coll)]\n    (if (= n (count part))\n      (cons part (mpart n (drop n coll)))\n      nil)))", "problem": 54, "user": "4f625f68e4b0defedf855fd2"}, {"code": "(fn partition* [n coll]\n  (cond \n    (= (count coll) n) (list coll)\n    (> (count coll) n) (cons (take n coll) (partition* n (drop n coll)))))", "problem": 54, "user": "4e944706535dbda64a6f6b11"}, {"code": "(fn [n c]\n  (->> c\n       (map-indexed #(vector (quot % n) %2)) \n       (partition-by (fn [[x y]] x))\n       (map #(map (fn [[x y]] y) %))\n       (filter #(= (count %) n))))", "problem": 54, "user": "503917a0e4b088a6a14ca763"}, {"code": "(fn p [n l] \n  (when (>= (count l) n)\n      (cons (take n l) (p n (drop n l)))))", "problem": 54, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "#(loop [coll %2 out '()] \n  (if (< (count coll) %) (reverse out) (recur (drop % coll) (conj out (take % coll)))))", "problem": 54, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "problem": 54, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn party [n coll]\n  (lazy-seq\n    (let [p (take n coll)]\n      (if (not= n (count p))\n        []\n        (cons p (party n (drop n coll)))))))", "problem": 54, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn [n ls]\n  (loop [x ls s ()]\n    (if (< (count x) n)\n      (reverse s)\n    (recur (drop n x)\n            (cons (take n x) s)))))", "problem": 54, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn f[a c] \n      (when (<= a (count c)) \n        (cons (take a c) (f a (nthrest c a)))))", "problem": 54, "user": "4db13ff51254ad5b4805fa68"}, {"code": "(fn [n xs]\n    (let [iterations (quot (count xs) n)]\n      (loop [i 0\n             xs xs\n             r ()]\n        (if (= i iterations)\n          (reverse r)\n          (recur (inc i) (drop n xs) (conj r (take n xs)))))))", "problem": 54, "user": "5032b398e4b00c0952a257eb"}, {"code": "(fn [n x]\n    (->>\n      (map-indexed (fn [i xs] (vector (quot i n) xs)) x)\n      (group-by first)\n      (map #(apply list (map second (second %))))\n      (filter #(= (count %) n))\n      ))", "problem": 54, "user": "4f616892e4b0defedf855fbf"}, {"code": "(fn my-part\n  ([n xs] (my-part n xs '()))\n  ([n xs new-list]\n     (let\n         [part-list (take n xs)\n          rest-list (drop n xs)]\n       (if (= (count part-list) n)\n         (my-part n rest-list (conj new-list part-list))\n         (reverse new-list)))))", "problem": 54, "user": "4f03818e535dcb61093f6b00"}, {"code": "(fn f [n c] \n  (when (seq c)\n    (let [[x r] (split-at n c)]\n      (when (= n (count x))\n        (cons x (f n r))))))", "problem": 54, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn f [n l]\n  (if (< (count l) n)\n    '()\n    (cons (take n l) (f n (drop n l)))))", "problem": 54, "user": "503de5aae4b06c4e0e1fa259"}, {"code": "(fn [n col]\n  (loop [col col res []]\n    (if (or (empty? col) (< (count col) n))\n      res\n      (recur (drop n col) (conj res (take n col))))))", "problem": 54, "user": "4fcf763de4b03432b189f413"}, {"code": "(fn [n coll]\n   (letfn [(next-n [coll]\n             (lazy-seq\n              (cons (take n coll)\n                    (next-n (drop n coll)))))]\n     (take-while #(= n (count %)) (next-n coll))))", "problem": 54, "user": "5014754de4b094324338f8e5"}, {"code": "#(loop [col %2 acc []]\n(if (< (count col) %1) acc\n(recur (drop %1 col) (conj acc (take %1 col)))))", "problem": 54, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "#(for [i (range (quot (count %2) %))]\n            (take % (drop (* i %) %2)))", "problem": 54, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn [x l]\n  (loop [l l\n         p []\n         r []]\n    (if (nil? l)\n      r\n      (let [[hd & tl] l\n            p         (conj p hd)]\n        (if (= (count p) x)\n          (recur tl [] (conj r p))\n          (recur tl p r))))))", "problem": 54, "user": "50435852e4b034ff00315d22"}, {"code": "(fn f [subseq n coll]\n  (if (> n (count coll))\n    (reverse subseq)\n    (f (cons (take n coll) subseq) n (drop n coll)))) '()", "problem": 54, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [n coll] (loop [[head & tail] coll\r\n                            streak []\r\n                            output []]\r\n                       (let [newstreak (conj streak head)]\r\n                         (cond\r\n                          (nil? head) output\r\n                          (= n (count newstreak)) (recur tail [] (conj output newstreak))\r\n                          true (recur tail newstreak output)))))", "problem": 54, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "(fn par\n  [n xs]\n  (if (>= (count xs) n)\n    (cons (take n xs)\n      (par n (drop n xs)))))", "problem": 54, "user": "4fab1ea1e4b081705acca210"}, {"code": "(fn part [n l]\n  (if (>= (count l) n)\n    (cons (take n l) (part n (drop n l)))\n    (list)))", "problem": 54, "user": "5012ec0ae4b0c87326002230"}, {"code": "(fn [c l] (filter #(= c (count %)) (partition-by #(int (/ % c)) l)))", "problem": 54, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn [n xs] (->> xs\n  (iterate #(drop n %))\n  (map #(take n %))\n  (take-while #(== n (count %)))))", "problem": 54, "user": "50479524e4b0371827a27bc4"}, {"code": "(fn f [c s]\r\n  (if (= (count (take c s)) c)\r\n    (lazy-seq (cons (take c s) (f c (drop c s))))\r\n    nil))", "problem": 54, "user": "5046b003e4b011c5dfee7727"}, {"code": "(fn my-part [n xs]\n  (let [[p r] (split-at n xs)]\n    (if (< (count p) n) nil\n      (lazy-cat [p] (my-part n r)))))", "problem": 54, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [n xs]\n  (loop [x xs\n         r []]\n   (if (< (count x) n)\n       r\n       (recur (drop n x) (conj r (take n x))))))", "problem": 54, "user": "4e4ca885535dc968683fc4df"}, {"code": "(fn part [n xs]\n  (if (<= n (count xs))\n    (cons (take n xs) (part n (drop n xs)))))", "problem": 54, "user": "504e13fce4b078edc5f593bc"}, {"code": "#(loop [n % coll %2 ret []]\n  (if (>= (count coll) n) (recur n (drop n coll) (conj ret (take n coll))) ret))", "problem": 54, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn part [n coll]\n  \t(when-let [s (seq coll)]\n\t\t\t(let [p (doall (take n s))]\n\t\t\t\t(when (= n (count p))\n\t\t\t\t\t(cons p (part n (nthrest s n)))))))", "problem": 54, "user": "504f44cfe4b0a02f9cffde65"}, {"code": "(fn [n s]\n   (loop [s s acc []]\n     (if (seq s)\n       (recur (drop n s) (conj acc (take n s)))\n       (if (= (count (last acc)) n)\n         acc\n         (butlast acc)\n         )\n       )))", "problem": 54, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn [n, c] (map #(subvec (vec c) (* % n) (* (inc %) n)) (range (quot (count c) n))))", "problem": 54, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "#(filter (fn [x] (= (count x) %1)) (reverse (map reverse (reduce (fn [l r]\n    (let [grouping (first l)]\n      (if (or (nil? (first grouping)) (< (count grouping) %1))\n        (conj (pop l) (conj grouping r))\n        (conj l (list r))\n    ))\n) (list '()) %2))))", "problem": 54, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "(fn [part x] (loop [col x ret [] current []]\r\n            (if (empty? col) ret  \r\n            (let [retti (conj current (first col))]\r\n            (recur (rest col) (if (= part (count retti)) (conj ret retti) ret) (if (= part (count retti)) [] (conj  current (first col)))\r\n           )))  ))", "problem": 54, "user": "50463347e4b011c5dfee771e"}, {"code": "(fn [w xs] \n  (loop [xs xs acc []]\n    (if (> w (count xs))\n      acc\n      (recur (drop w xs) (conj acc (take w xs))))))", "problem": 54, "user": "504f865ee4b0a02f9cffde90"}, {"code": "#(let [n (count %2)]\n  (filter (fn [r] (= %1 (count r)))\n    (for [i (range (quot n %1))]\n      (->> %2\n        (drop (* i %1))\n        (take %1)))))", "problem": 54, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn p [n s]\n  (if (>= (count s) n)\n      (cons (take n s) (p n (drop n s)))\n      '()))", "problem": 54, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn [n coll]\n  (loop [coll coll\n         acc  []]\n    (if (< (count coll) n)\n      acc\n      (recur (drop n coll) (conj acc (take n coll))))))", "problem": 54, "user": "50586354e4b06522596eba78"}, {"code": "(fn chop-chop [n coll]\r\n  (when-let [s (seq coll)]\r\n    (let [p (take n s)]\r\n      (when (= n (count p))\r\n        (cons p (chop-chop n (nthrest s n)))))))", "problem": 54, "user": "4fabbb97e4b081705acca21d"}, {"code": "(fn fun [x l]\r\n    (if (< (count l) x)\r\n      '()\r\n      (let [[a & as] (split-at x l)]\r\n        (cons a (fun x (first as))))))", "problem": 54, "user": "50588ff1e4b06522596eba7e"}, {"code": "(fn p [n s]\r\n  (if-not (< (count s) n)\r\n    (cons (take n s) (p n (drop n s)))))", "problem": 54, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn [x ls]\r\n  (filter #(= x (count %))\r\n          (map #(take x (drop %1 ls)) (range 0 (count ls) x))))", "problem": 54, "user": "4f9aa97ae4b0dcca54ed6d0e"}, {"code": "(fn [n xs]\r\n  (->\r\n    (reduce\r\n      (fn [[cur acc] x]\r\n        (if (< (count cur) n)\r\n        [(concat cur [x]) acc]\r\n        [[x] (concat acc [cur])]))\r\n      [[] []]\r\n      xs)\r\n    (#(if (not= (count (first %)) n)\r\n        (second %)\r\n        (concat (second %) [(first %)])))))", "problem": 54, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn f [n c] (let [[a b] (split-at n c)] (if (> n (count b)) (list a) (cons a (f n b)))))", "problem": 54, "user": "4f045946535dcb61093f6bba"}, {"code": "#(loop [ans ()\n  \t   xs %2]\n\t      (if (> % (count xs))\n\t\t  (reverse ans)\n\t\t(recur (cons  (take % xs) ans) (drop % xs))))", "problem": 54, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn [n col]\n  (loop [col col s []]\n    (if (> n (count col))\n        s\n        (recur (drop n col) (conj s (take n col))))))", "problem": 54, "user": "50435689e4b034ff00315d21"}, {"code": "(fn [n s]\n  (loop [in (vec s)\nr []]\n  (if (< (count in) n)\nr\n(recur (subvec in n)\n(conj r (subvec in 0 n))))))", "problem": 54, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "(fn [n coll]\n  (loop [c coll partitioned []]\n    (if (< (count c) n)\n      partitioned\n      (recur (drop n c) (conj partitioned (take n c))))))", "problem": 54, "user": "504c8165e4b09724c857af31"}, {"code": "(fn [n coll]\n  (loop [n n\n         coll coll\n         z []]\n    (if (< (count coll) n)\n      z\n      (recur n (nthrest coll n) (conj z (take n coll))))))", "problem": 54, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "(fn [n items]\r\n  (loop [p [] xs items]\r\n    (if (< (count xs) n)\r\n      p\r\n      (recur (conj p (take n xs)) (drop n xs)))))", "problem": 54, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn [n elems]\r\n    (letfn (\r\n             (grp [xs result]\r\n               (if (and (seq xs) (not (< (count xs) n)))\r\n                 (concat result (vector (take n xs)) (grp ((apply comp (repeat n rest)) xs) result))\r\n                 result)\r\n             )\r\n           )\r\n        (grp elems [])\r\n    )\r\n  )", "problem": 54, "user": "4faa6184e4b081705acca1f1"}, {"code": "(fn [n coll]\n  (map-indexed (fn [i coll]\n                 (take n (drop (* n i) coll)))\n               (repeat (quot (count coll) n) coll)))", "problem": 54, "user": "50630247e4b05ac47bc68d6b"}, {"code": "(fn [psize coll]\n  (filter #(= (count %) psize) (partition-by #(int (/ % psize)) coll)))", "problem": 54, "user": "4fe9ef2fe4b0547ebccb2479"}, {"code": "(fn [n coll] (partition-by #(quot % n) (drop-last (mod (count coll) n) coll)))", "problem": 54, "user": "50645e12e4b007509339a58a"}, {"code": "(fn x-partition [n coll]\n  (lazy-seq\n    (let [p (take n coll)]\n      (if (>= (count p) n)\n        (cons p (x-partition n (drop n coll)))))))", "problem": 54, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "(fn partition-xs [size iseq]\n  (loop [xs iseq\n         acc []\n         buff []]\n    (if (empty? xs)\n      acc\n      (let [txs (rest xs)\n            tbuff (conj buff (first xs))\n            buff-filled (if (=\n                             (count tbuff)\n                             size)\n                          true\n                          false)\n            tacc (if buff-filled\n                   (conj acc tbuff)\n                   acc)]\n        (recur txs\n               tacc\n               (if buff-filled [] tbuff))))))", "problem": 54, "user": "4f046d70535dcb61093f6bc5"}, {"code": "(fn my-partition [n coll]\n  (for [l \n        (filter #(= (count %) n)\n                (for [[k v]\n                      (group-by #(quot (first %) n)\n                                (map-indexed #(vec [%1 %2]) coll))]\n                  v))]\n    (map first l)))", "problem": 54, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn partitSeq [i coll]\r\n  (if (<= i (count coll))\r\n    (lazy-seq ( cons (take i coll) (partitSeq i (drop i coll))))))", "problem": 54, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn part [n coll]\n  (loop [coll coll res '()]\n      (let [cur (take n coll)]\n      (cond (> n (count cur)) (reverse res)\n            :else (recur (drop n coll) (cons cur res))\n      )\n      )\n  )\n)", "problem": 54, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn [l s]\n  ((fn ptt [r s]\n    (let [p (take l s)]\n      (if (= l (count p))\n        (recur (conj r p) (drop l s))\n        r)))\n    [] s))", "problem": 54, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn [n coll]\n  (map first\n    (take (quot (count coll) n) (drop 1\n      (iterate (fn [[a b]] [(take n b) (drop n b)])\n                [ [] coll])))))", "problem": 54, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "(fn sins [n s]\n  (let [t (take n s)]\n    (if (= (count t) n) (cons t (sins n (drop n s))))\n    )\n  )", "problem": 54, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn f [n s]\n   (when (>= (count s) n)\n     (conj (f n (drop n s))\n           (take n s))))", "problem": 54, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "(fn partition2 [n s]\n          (let [[x y] (split-at n s)]\n            (if (<= n (count x))\n                (cons x (partition2 n y)))))", "problem": 54, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "#(for [i (iterate (partial + %) 0) :while (<= (+ i % ) (count %2))] (->> %2 (drop i) (take %)))", "problem": 54, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn [n coll]\n (let\n  [m (reduce\n      #(conj %1 [(int (/ %2 n)) (conj (%1 (int (/ %2 n))) %2)])\n      {} (reverse coll))]\n  (filter #(= (count %) n) (vals m))))", "problem": 54, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "(fn [c coll] (filter #(= (count %) c) (reverse (map reverse (reduce (fn [a [c x]] \n(if (zero? c)\n(cons (list x) a)\n(cons (cons x (first a)) (rest a))))\n'()\n(map vector (cycle (range c)) coll))))))", "problem": 54, "user": "4f614976e4b0defedf855fbb"}, {"code": "(fn buf [n s] (if (< (count s) n) [] (cons (take n s) (buf n (drop n s)))))", "problem": 54, "user": "4f3b5219e4b0e243712b1f2a"}, {"code": "(fn chunks [n coll]\n  (if (>= (count coll) n)\n    (let [[f b] (split-at n coll)]\n    (cons f (chunks n b)))))", "problem": 54, "user": "50432da5e4b034ff00315d1e"}, {"code": "#(take-nth % (apply map vector (take % (iterate rest %2))))", "problem": 54, "user": "5065faf9e4b0313a384e5645"}, {"code": "#(loop [gn %1 s %2 result []]\n  (if (< (count s) gn)\n    result\n    (recur gn (nthrest s gn) (conj result (take gn s)))\n))", "problem": 54, "user": "5070e31ee4b0e3170b5a8678"}, {"code": "(fn foo [size l]\n  (reverse (loop [ret nil\n                  cur nil\n                  x (first l)\n                  ls (rest l)]\n            (if (empty? ls)         \n              (if (= size (count (conj cur x))) \n  \t\t\t(conj ret (reverse (conj cur x)))\n                (if (= size (count cur))\n                  (conj ret (reverse cur))\n                  ret))\n              (if (= size (count cur))\n                (recur (conj ret (reverse cur)) (list x) (first ls) (rest ls))\n                (recur ret (conj cur x) (first ls) (rest ls)))))))", "problem": 54, "user": "501f36dde4b0cb6ebc0a42e4"}, {"code": "(fn f [n s]\n  (if (< (count s) n)\n      '()\n      (cons (take n s) (f n (drop n s)))))", "problem": 54, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn partme [n l] \n  (if (> n (count l))\n    nil\n    (concat (list (take n l)) (partme n (take-last (- (count l) n) l)))))", "problem": 54, "user": "4f8b05d2e4b02e764a0a5176"}, {"code": "(fn f [n s]\n  (when (>= (count s) n)\n    (cons (take n s) (f n (drop n s)))))", "problem": 54, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn p [n coll]\n  (if (< (count coll) n) '()\n    (cons (take n coll) (p n (drop n coll)))))", "problem": 54, "user": "4f3242bae4b0d6649770a08f"}, {"code": "(fn [n col]\n  (for [x (range 0 (count col) n)\n         :when (<= (+ x n) (count col))]\n    (take n (drop x col))))", "problem": 54, "user": "507a08e4e4b08327cd804a67"}, {"code": "(fn __ [m c]\n  (for [n (range (Math/floor (/ (count c) m)))]\n      (let [bound (* n m)]\n      \t(range bound (+ bound m))\n      )\n    )\n)", "problem": 54, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "(fn r [n l]\r\n  (if (> n (count l))\r\n    nil\r\n    (cons (take n l) (r n (drop n l)))))", "problem": 54, "user": "507437c2e4b054001656acd0"}, {"code": "(fn p [n coll]\n  (if (< (count coll) n) '()\n  (concat (list (take n coll)) (p n (drop n coll)))))", "problem": 54, "user": "507a9b29e4b08327cd804a6e"}, {"code": "(fn part [n cs]\r\n  (map\r\n   #(take n (drop (* % n) cs))   \r\n   (range (+ (quot (count cs) n)))))", "problem": 54, "user": "507a396be4b08327cd804a69"}, {"code": "(fn my-partition [p s]\n  (loop [acc []\n         [part rest] (split-at p s)]\n    (if (< (count part) p)\n      acc\n      (recur (conj acc part) (split-at p rest)))))", "problem": 54, "user": "50763574e4b0a894bb95bf3d"}, {"code": "(fn [n xs] \n  (loop [ys xs rs []]\n    (if (< (count ys) n)\n      rs\n      (recur (drop n ys) (concat rs [(take n ys)]))\n    )\n  )\n)", "problem": 54, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn f [n col]\n  (if (>= (count col) n)\n    (cons (take n col) (f n (drop n col)))\n    (list)))", "problem": 54, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "(fn partition'\n  ([k xs] (partition' k xs []))\n  ([k xs acc]\n   (let [[left right] (split-at k xs)]\n     (if (< (count left) k)\n       acc\n       (recur k right (conj acc left))))))", "problem": 54, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn par [n xs]\n  ((fn parIter [coll acc]\n     (if (empty? coll)\n       (filter #(= n (count %))  acc)\n       (parIter (drop n coll) (conj acc (take n coll)) ))) xs []))", "problem": 54, "user": "4f038ed6535dcb61093f6b24"}, {"code": "(fn f [n x] (\n  if (> n (count x))\n  '()\n  (conj (f n (drop n x)) (take n x))\n  ))", "problem": 54, "user": "506b437de4b0eda3100c0906"}, {"code": "#(loop [x %2 r []]\n  (if\n    (< (count x) %)\n    r\n    (recur (drop % x) (conj r (take % x)))))", "problem": 54, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn part\n  ([i s] (part i s []))\n  ([i s r]\n   (if (< (count s) i)\n     r\n     (recur i (drop i s) (conj r (take i s))))))", "problem": 54, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "#(loop [result ()\r\n        to-do %2]\r\n   (if (< (count to-do) %1)\r\n     result\r\n     (recur\r\n      (concat result (list (take %1 to-do)))\r\n      (drop %1 to-do))))", "problem": 54, "user": "508b95a0e4b0be79e5b189c6"}, {"code": "(fn [n l]\n     (->>\n       (map-indexed #(list (quot %2 n) %1) l)\n       (group-by first)\n       vals\n       (map #(map second %))\n       (filter (comp #(= n %) count))\n       ))", "problem": 54, "user": "503efe01e4b06c4e0e1fa26f"}, {"code": "(fn f [n s] (if (< (count s) n) '() (cons (take n s) (f n (drop n s)))))", "problem": 54, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn [n s] \r\n  (loop[ n n s s r '() c '()] \r\n    (cond \r\n     (= n (count c)) \r\n      (recur n s (concat r [c]) '()) \r\n     (empty? s) r \r\n     :else \r\n      (recur n (next s) r (concat c [(first s)])\r\n))))", "problem": 54, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn part [n s]\n  (let [p (take n s)]\n    (if (< (count p) n) []\n      (cons p (part n (drop n s))))))", "problem": 54, "user": "50901b2ee4b0ea685a20f774"}, {"code": "#(loop [c %2 res []]\r\n  (if (< (count c) %1) res\r\n      (recur (drop %1 c)\r\n             (conj res (take %1 c)))))", "problem": 54, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [n s] \n  (loop [acc (conj [] (take n s))\n         s1 (nthrest s n) ]\n    (if (< (count s1) n )\n      acc\n      (recur (conj acc (take n s1)) (nthrest s1 n))\n      )))", "problem": 54, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn my-partition [c l]\n  (let\n    [join? #(= (dec c) (count %))]\n     (loop [ret '()\n            acc '()\n            todo l\n            counter (- (count l) (mod (count l) c))]\n       (if (= 0 counter)\n         (reverse ret)\n         (recur\n          (if (join? acc)\n            (conj ret (reverse (conj acc (first todo))))\n            ret)\n          (if (join? acc)\n            '()\n            (conj acc (first todo)))\n          (next todo)\n          (dec counter))))))", "problem": 54, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "(fn [x c]\n  (loop [c c lst ()]\n    (if (> x (count c)) (reverse lst)\n      (recur (drop x c) (conj lst (take x c))))))", "problem": 54, "user": "4da8dd6e30acd6ed12482a68"}, {"code": "(fn f ([n x]\n  (f n x [] []))\n  ([n x t r]\n    (cond (= n (count t)) (recur n x [] (conj r t))\n          (empty? x) r\n          :else (recur n (rest x) (conj t (first x)) r))))", "problem": 54, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn part [n coll]\n  (lazy-seq\n   (when (= n (count (take n coll)))\n     (cons (take n coll) (part n (drop n coll))))))", "problem": 54, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn\n  [n xs]\n  (loop [h []\n         r xs]\n    (if (empty? r) h\n      (let [[p o] [(take n r) (drop n r)]]\n        (if (< (count p) n) h\n          (recur (conj h p) o))))))", "problem": 54, "user": "50657775e4b0deb876850599"}, {"code": "(fn p [x y]\n  (if (>= (count y) x)\n    (cons (take x y) (p x (drop x y)))))", "problem": 54, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn [n coll] \n  (loop [a [], xs coll]\n    (if (< (count xs) n)\n      a\n      (recur (conj a (take n xs)) (drop n xs)))))", "problem": 54, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn [x, coll]\n  (loop [left coll, result []]\n    (if (<= x (count left))\n       (recur (drop x left) (conj result (take x left)))\n       result)))", "problem": 54, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "(fn f\n  ([n xs] (f n xs nil))\n  ([n xs a]\n    (if (< (count xs) n)\n      a\n      (f n (drop n xs) (concat a (list (take n xs)))))))", "problem": 54, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn [s xs]\n  (->> xs\n       (reduce (fn [x y]\n                 (println x (vec (drop-last x)))\n                 (if (= s (count (last x))) \n                   (conj x [y])\n                   (vec (conj (vec (drop-last x)) (conj (last x) y)))))\n                   [[]])\n       (filter #(= s (count %)))\n       (map seq)))", "problem": 54, "user": "50053d6ce4b0678c553fc45e"}, {"code": "#((comp first reduce )\n  (fn [[res xs] x]\n    (let [new-xs (conj xs x) \n          len (count new-xs)]\n      (if (= len %)\n        [(conj res new-xs) []] \n        [res new-xs])))\n [[] []] %2)", "problem": 54, "user": "5089ebfee4b03217b26a539f"}, {"code": "(fn [n xs]\n (apply map vector\n        (map (fn [x] (map first x))\n             (vals (group-by (fn [[i x]] (mod i n)) (map-indexed vector xs))))))", "problem": 54, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn [i v] (apply map\n                 (concat [(fn [& c] c)]\n                         (map #(take-nth i (nthnext v %))\n                              (range i)))))", "problem": 54, "user": "5069c09be4b01dc6af13f837"}, {"code": "(fn my-partition [x coll]\n  (loop [so-far '() rest coll]\n    (if (> x (count (take x rest)))\n      (reverse so-far)\n      (recur (conj so-far (take x rest)) (drop x rest)))))", "problem": 54, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn [dev c] (reverse\n            (filter #(= (count %) dev)\n                    (map reverse\n                         (reduce #(if (or (empty? %1) \n                                          (= (rem %2 dev) 0))\n                                    (cons (list %2) %1)\n                                    (cons (conj (first %1) %2) (rest %1))) () c)))))", "problem": 54, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn p [n c]\n  (when (>= (count c) n)\n    (cons (take n c) (p n (drop n c)))))", "problem": 54, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": "(fn [s xs] (filter #(= (count %) s) (map (partial take s) (map #(drop (* s %) xs)(range (count xs))))))", "problem": 54, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn partition* [n s]\n    (if (< (count s) n)\n      ()\n      (cons (take n s)\n            (lazy-seq (partition* n\n                                  (drop n s))))))", "problem": 54, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn part [n l]\r\n  (if (< (count l) n)\r\n    []\r\n    (let [[a b] (split-at n l)]\r\n      (cons a (part n b)))))", "problem": 54, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn [n s]\n  (loop [s s v []]\n    (if (< (count (take n s)) n)\n      v\n      (recur (drop n s) (conj v (take n s))))))", "problem": 54, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn [n s]\n  (filter #(= (count %) n)\n  (map #(take n (nthnext s (* % n))) (range 0 (/ (count s) n)))))", "problem": 54, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn f [n c] (if (< (count c) n) '() (cons (take n c) (f n (drop n c)))))", "problem": 54, "user": "4fb1325de4b081705acca276"}, {"code": "(fn _ [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (_ n (drop n coll)))))", "problem": 54, "user": "509c2c55e4b085ae113522ab"}, {"code": "(fn [n xs]\n  (for [i (range (quot (count xs) n))]\n    (subvec (into [] xs) (* i n) (* (+ 1 i) n))))", "problem": 54, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn mypart \n   [n s] \n   (if (>= (count s) n) \n     (cons (take n s) (mypart n (drop n s)))))", "problem": 54, "user": "50982769e4b04e098a4c726a"}, {"code": "(fn [len coll]\n    (reverse\n     (loop [rem coll\n            ret '()]\n       (if (> len (count rem))\n         ret\n         (recur (drop len rem)\n                (cons (take len rem) ret))))))", "problem": 54, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "problem": 54, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "(fn p [n c]\n  (lazy-seq\n   (let [a (take n c)]\n     (when (= n (count a))\n       (cons a (p n (drop n c)))))))", "problem": 54, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "(fn b [n m] (loop [mm m l []] (if (< (count mm) n) l (recur (nthrest mm n) (conj l (take n mm))))))", "problem": 54, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn [n s]\n  (loop [x s r []]\n    (if (or (empty? x) (< (count x) n))\n      r\n      (recur (drop n x) (conj r (take n x))))))", "problem": 54, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn  [n coll]\n  (reverse ((fn help [xs accu]\n    (if \n      (>= (count xs) n)\n      (recur (drop n xs) (cons (take n xs) accu))\n      accu))\n   coll '())))", "problem": 54, "user": "50217818e4b00bba4502f7a7"}, {"code": "#(for [x (range (quot (count %2) %))]\n   (subvec (vec %2) (* x %) (* (inc x) %)))", "problem": 54, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn bu [n l] (let [[h, t] (split-at n l)] (if (> n (count l)) nil (cons h (bu n t)))))", "problem": 54, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn [n s]\n  (loop [s s\n         result []]\n    (if (>= (count s) n)\n      (recur (drop n s) (conj result (take n s)))\n      result)))", "problem": 54, "user": "50b67515e4b08fb537db98f3"}, {"code": "(fn f [n l]\n  (if (< (count l) n)\n    '()\n    (cons (take n l) (f n (drop n l)))))", "problem": 54, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn my-partition [n s]\n  (if (< (count s) n) '()\n    (conj (my-partition n (drop n s)) (take n s))))", "problem": 54, "user": "50aab057e4b056ee0193586b"}, {"code": "(fn prob54 [n xs]\n  ((fn helper [xs curr agg]\n    (if (empty? xs)\n      agg\n      (let [head (first xs)\n            curr (conj curr head)]\n        (if (= n (count curr))\n          (helper (rest xs) [] (conj agg curr))\n          (helper (rest xs) curr agg))))\n    ) xs [] [])\n  \n  )", "problem": 54, "user": "4f03f3b7535dcb61093f6b85"}, {"code": "(fn [n coll]\r\n  (->> coll\r\n       (reduce\r\n         (fn [acc a]\r\n           (println acc)\r\n           (if (or (zero? (count (first acc)))\r\n                   (< (count (first acc)) n))\r\n             (cons (conj (first acc) a) (rest acc))\r\n             (cons [a] acc)))\r\n         '([]))\r\n       (filter #(= (count %) n))\r\n       reverse))", "problem": 54, "user": "50ba4b9ee4b03e68e4411c7b"}, {"code": "(fn name\n    [n x]\n    (loop [next (take n x)\n           rest (drop n x)]\n      (println \"next, rest\" next \",\" rest)\n      (if-not (> n (count rest))\n        (cons next (name n rest))\n        (list next))))", "problem": 54, "user": "50b53b6ae4b0c464d223d1c4"}, {"code": "#(loop [x %2 y []]\n  (if (< (count x) %) y (let [z (split-at % x)] (recur (last z) (conj y (first z))))))", "problem": 54, "user": "5071b614e4b0e3170b5a867d"}, {"code": "(fn f [n s]\n  (if (<= n (count s))\n    (cons (take n s) (f n (nthnext s n)))))", "problem": 54, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn f [n l]\n  (when (>= (count l) n)\n    (cons (take n l)(f n (drop n l)))))", "problem": 54, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn f [n lst] (if (> n (count lst)) '() (cons (first (split-at n lst)) (f n (second (split-at n lst))))))", "problem": 54, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "(fn p [n c] (if (< (count c) n) nil (cons (take n c) (p n (drop n c)))))", "problem": 54, "user": "5027b41ee4b01614d1633fee"}, {"code": "(fn my-parter [n col]\n  ((fn [n col res]     \n    (let [next-sub (take n col)]\n\t    (if (= (count next-sub) n)\n        (recur n (drop n col) (conj res next-sub))\n        res)))\n   n col []))", "problem": 54, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn [n col]\r\n  (for [length (range) :while (< length (quot (count col) n))]\r\n  (for [i (range n)] (nth col (+ (* length n) i)))))", "problem": 54, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn [n xs]\n  (loop [curr-xs xs\n\t\t   part-xs []]\n\t\t(if (>= (count curr-xs) n)\n\t\t\t(recur (drop n curr-xs) (conj part-xs (take n curr-xs)))\n\t\t\tpart-xs)))", "problem": 54, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn part [x xs]\n  (if (>= (count xs) x)     \n    (cons (take x xs) (lazy-seq (part x (drop x xs))))))", "problem": 54, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn [x xs]\n  (loop [parts []\n         rest  xs]\n    (let [split (split-at x rest)\n          part (first split)]\n      (if (= '() part)\n        (filter #(= x (count %)) parts)\n        (recur (conj parts part) (second split))))))", "problem": 54, "user": "50bd6033e4b0594b91591c66"}, {"code": "(fn [num lst]\n  (filter #(= (count %) num)\n  ((fn [iter acc lst]\n    (cond \n      (empty? lst) \n        (reverse (map reverse acc))\n      (= iter num) \n        (recur 1 (cons [(first lst)] acc) (rest lst))\n      :else\n        (recur (inc iter) \n               (cons (cons (first lst) (first acc)) (rest acc))\n               (rest lst))))\n   num [] lst)))", "problem": 54, "user": "509251f3e4b09a7d0b586de5"}, {"code": "(fn p [n s]\n  (if (< (count s) n)\n      '()\n      (conj (p n (drop n s))  (take n s))))", "problem": 54, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn [c s] (for [i (range (quot (count s) c))]\n          (take c (drop (* i c) s))\n          ))", "problem": 54, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn [n c] \n  (loop [res [] coll c]\n    (if (< (count coll) n)\n      res\n      (let [splitted (split-at n coll)]\n      (recur \n        (conj res (first splitted))\n        (second splitted))))))", "problem": 54, "user": "4f1e4ab5535d64f603146496"}, {"code": "(fn p [x s]\n    (if (<= x (count s))\n      (cons (take x s) (p x (drop x s)))\n      '()\n ))", "problem": 54, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "(fn [n xs]\n  (take-while (comp (partial = n) count) (map (partial take n) (iterate (partial drop n) xs))))", "problem": 54, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "(fn [n x] \n\t(loop [y x result []] \n\t\t(if(< (count y) n) \n\t\t\tresult \n\t\t\t(recur (drop n y) (concat result (list (take n y))))\n\t\t)\n\t)\n)", "problem": 54, "user": "50b25f2ce4b03ea88043355f"}, {"code": "#(loop [r [] l %2]\n  (if (< (count l) %) r\n    (recur (conj r (take % l)) (drop % l))\n  )\n)", "problem": 54, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(fn [n lst]\r\n(let [[c r]\r\n(reduce\r\n  (fn [[cx acc] v]\r\n    (if (= n (count cx))\r\n      [[v] (conj acc cx)]\r\n      [(conj cx v) acc]))\r\n  [[(first lst)] []]\r\n  (rest lst))]\r\n  (if (= n (count c)) (conj r c) r)\r\n  ))", "problem": 54, "user": "50c9ece0e4b0a409464667d8"}, {"code": "(fn loopo [size x] (if (< (count x) size) '() (conj (loopo size (drop size x)) (take size x))))", "problem": 54, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "(fn [n coll]\n  (filter\n    #(= (count %) n)\n    (map\n      #(map second (val %))\n      (group-by\n        #(quot (first %) n)\n        (map-indexed\n          #(vector % %2)\n          coll)))))", "problem": 54, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn mypartition [n l]\n  ((fn inner [n l res]\n    (if (< (count l) n)\n      (reverse res)\n      (inner n (drop n l) (conj res (take n l)))))\n   n l '()))", "problem": 54, "user": "50c84ba2e4b00bb60fe0c53e"}, {"code": "(fn test54 [n coll]\n  (if (<= n (count coll))\n    (let [f (take n coll)\n          r (drop n coll)]\n      (cons f (test54 n r)))))", "problem": 54, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn [n s] (filter #(= (count %) n) (map (fn [i] (take n (drop i s))) (range 0 (count s) n))))", "problem": 54, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "(fn part [n s]\n   (when (= (count (take n s)) n)\n     (cons (take n s) (lazy-seq (part n (drop n s))))))", "problem": 54, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn [n coll] \n  (reverse \n   (vals \n    (reduce \n     #(if (%1 (first %2)) \n        (assoc %1 (first %2) (concat (%1 (first %2)) (next %2))) \n        (assoc %1 (first %2) (next %2))) \n     {} \n     (for [i (range (* (quot (count coll) n) n))] \n       [(quot i n) (nth coll i)])))))", "problem": 54, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn [n coll] \n           (loop [s coll c []]\n              (if (< (count s) n)\n                  c\n                  (let [g (split-at n s)\n                        f (first g)\n                        l (last g)]\n                        (recur l (conj c f))))))", "problem": 54, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn [n coll]\n  (loop [x coll answer []]\n    (if (< (count x) n) answer\n      (recur\n        (nthnext x n)\n        (conj answer (take n x))\n      )\n    )\n  )\n)", "problem": 54, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "(fn [n s]\n  (filter #(= (count %) n) (vals (group-by #(quot (.indexOf s %) n) s))))", "problem": 54, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn [n sq]\n  (loop [kept [] coll sq]\n    (let [nxt (take n coll)]\n      (if (or (empty? coll) (< (count nxt) n))\n        kept\n        (recur (conj kept nxt) (drop n coll))))))", "problem": 54, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn [n s]\n  (loop\n    [return '()\n     s s]\n    (let [splt (split-at n s)\n          cnt (count s)]\n      (if (<= cnt n)\n        (reverse (if (= cnt n) (conj return (first splt)) return))\n        (recur (conj return (first splt)) (last splt))))))", "problem": 54, "user": "50d8de3fe4b01f0871336e72"}, {"code": "(fn foo [x y]\n  (if (> x (count y)) '()\n    (concat (list (take x y)) (foo x (drop x y)))))", "problem": 54, "user": "5078300de4b0fc74642bff66"}, {"code": "(fn [n xs]\n  (filter #(= n (count %))\n          (for [x (range 0 (count xs) n)]\n            (take n (drop x xs)))))", "problem": 54, "user": "4ff769bce4b0678c553fc38f"}, {"code": "(fn [n coll]\n  (apply map list\n    (for [i (range n)] (take-nth n (drop i coll)))))", "problem": 54, "user": "4ee77f15535d93acb0a66868"}, {"code": "; recursion is better: (fn f [n x] (if (<= n (count x)) (cons (take n x) (f n (drop n x)))))\n#(filter (fn [a] (= %1 (count a)))\n         (for [x (map list (range (count %2)) %2) \n               :let [i (first x)]] \n           (when (= 0 (mod i %1)) \n             (take %1 (drop i %2)))))", "problem": 54, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn [n coll]\n  (loop [coll coll acc []]\n    (let [[front back] (split-at n coll)]\n      (if (= (count front) n)\n        (recur back (conj acc front))\n        acc))))", "problem": 54, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [n col]\n  (let [len (count col)\n        group-count (int (/ len n))\n        ]\n    (for [i (range group-count)]\n      (for [j (range n)]\n        (nth col (+ j (* i n)))))))", "problem": 54, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn p [n c]\n   (let [h (take n c)]\n     (if (= (count h) n)\n       (cons h (lazy-seq (p n (drop n c))))\n       )))", "problem": 54, "user": "4e778d36535d324fb2983d71"}, {"code": "(fn part\n  [n coll]\n    (if (< (count coll) n) []\n      (concat [(take n coll)] (part n (drop n coll))))\n)", "problem": 54, "user": "50e3ec87e4b0463d32072486"}, {"code": "(fn [n coll]\n  (loop [acc '() \n         [c & cs :as coll'] coll \n         r '()]\n    (cond\n     (= n (count acc))\n        (recur '() coll' (conj r (reverse acc)))\n     (not (seq coll'))\n        (reverse r)\n     :else\n        (recur (conj acc c) cs r))))", "problem": 54, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn part11 [n x] (when (<= n (count x))(cons (take n x) (part11 n (drop n x)))))", "problem": 54, "user": "4eb0175b535d7eef30807336"}, {"code": "(fn part [n coll]\n  (let [[p r] (split-at n coll)]\n    (when (= (count p) n) (cons p (part n r)))))", "problem": 54, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [n coll]\n  (loop [coll coll res []]\n    (if (< (count coll) n)\n      res\n      (recur (drop n coll) (conj res (take n coll)))\n    )\n  )\n)", "problem": 54, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "(fn [n coll]\n  (for [i (range (quot (count coll) n))]\n    (take n (drop (* i n) coll))))", "problem": 54, "user": "50e3cf55e4b01912b3285c45"}, {"code": "(fn p [n x]\n  (if (>= (count x) n)\n    (cons (take n x) (p n (drop n x)))))", "problem": 54, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn pp [n x]\n  (if (< (count x) n)\n    '()\n    (conj (pp n (drop n x)) (take n x))))", "problem": 54, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "(fn part [n s] (if (< (count s) n) [] (cons (take n s) (part n (drop n s)))))", "problem": 54, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn [n l]\n(letfn [(acc [l n ret]\n (if (< (count l) n)\n   (reverse ret)\n   (acc (drop n l) n (conj ret (take n l)))))]\n  (acc l n '())))", "problem": 54, "user": "504eb604e4b069badc5a33c4"}, {"code": "(fn parti [len ve]\n  (cond \n    (< (count ve) len) nil\n    (empty? ve)     ve\n    :else (conj (parti len (drop len ve)) (take len ve))))", "problem": 54, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn partition-sequence [n a]\n\t\t(letfn [(phelper [c]\n\t\t\t(let [part (take n (drop (* c n) a))]\n\t\t\t\t(if (= n (count part)) (cons part (phelper (+ c 1))) [])))]\n\t\t\t(phelper 0)))", "problem": 54, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "(fn z [n c] (if (>= (count c) n) (cons (take n c) (z n (drop n c)))))", "problem": 54, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "(fn my-partition \n  ([n s]   (my-partition n s '()))\n  ([n s r] (if (>= (count s) n) \n             (my-partition n (drop n s) (conj r (take n s))) \n             (reverse r))))", "problem": 54, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn part-it \n  ([n s1] (part-it n s1 []))\n  ([n s1 s2] (let [part (take n s1)] \n               (if (not-empty part) \n                 (part-it n (drop n s1) (conj s2 part)) (filter #(= (count %) n)s2)))))", "problem": 54, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn my-partition [n s]\n  (if (< (count s) n)\n    ()\n    (let [[left right] (split-at n s)]\n      (cons left (my-partition n right)))))", "problem": 54, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "(partial (fn [r n s] (if (< (count s) n) r (recur (conj r (take n s)) n (drop n s)))) [])", "problem": 54, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn [n coll] (filter #(<= n (count %))\n                      (map #(map second\n                                 %)\n                           (partition-by #(int (/ (first %)\n                                                  n))\n                                         (map-indexed list\n                                                      coll)))))", "problem": 54, "user": "50981062e4b04e098a4c7268"}, {"code": "(fn [p r] (reverse (loop [i r result '()]  (if (< (count i) p) result (recur (drop p i) (into result (list (take p i))))))))", "problem": 54, "user": "4dbe5390535d020aff1edf5c"}, {"code": "#(loop [r [] s %2] (if (> % (count s)) r (recur (conj r (take % s)) (drop % s))))", "problem": 54, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn [n l] (for [i (range (int (/ (count l) n)))] (take n ( drop (* i n) l))))", "problem": 54, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn [n coll]\n  (loop [remains coll\n         result []]\n    (if (< (count remains) n)\n      result\n      (recur (drop n remains) (conj result (take n remains))))))", "problem": 54, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn partition2 [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (partition2 n (drop n coll)))))", "problem": 54, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn [n, l]\n  (loop [c l, v []]\n    (if (or (empty? c) (< (count c) n))\n      v\n      (recur (drop n c) (conj v (take n c))))))", "problem": 54, "user": "4f038567535dcb61093f6b0c"}, {"code": "#_(arrgh, cgrand, making my head explode... wonderful...)\n\n(fn [n s]\n  (filter\n   #(= n (count %))\n   (loop [acc []\n          item (first s)\n          rst (rest s)\n          i 0]\n     (let [acc (if (= 0 (mod i n))\n                 (conj acc [item])\n                 (conj (vec (drop-last acc)) (conj (last acc) item)))]\n       (if (not (seq rst))\n         acc\n         (recur acc (first rst) (rest rst) (inc i)))))))", "problem": 54, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn part [n sq] (if (< (count sq) n) '() (cons (take n sq) (part n (drop n sq)))))", "problem": 54, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn part [n s] \n  (if (< (count s) n)\n    ()\n    (cons (take n s) (part n (drop n s)))))", "problem": 54, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "(fn f [n c]\n  (filter #(= (rem (first %) n) 0) (apply map vector (take n (iterate next c)))))", "problem": 54, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn f [c s] (if (<= c (count s)) (cons (take c s) (f c (drop c s)))))", "problem": 54, "user": "4ef77edb535dced4c769f254"}, {"code": "#(loop [ len %1  in %2  out [] ]\n    (if (< (count in) len)\n        out\n        (recur len (drop len in) (conj out (take len in)))))", "problem": 54, "user": "51059d33e4b0380e797c7d5c"}, {"code": "(fn part [n coll]\n    (let [l (count coll)]\n        (cond\n            (= l n) [coll]\n            (< l n) '()\n            :default \n                (lazy-seq (cons (take n coll) (part n (drop n coll)))))))", "problem": 54, "user": "50fe2b87e4b03cd852b4e84b"}, {"code": "(fn [n s]\n  (take-while #(= n (count %)) \n              (map #(take n %) (iterate #(drop n %) s))))", "problem": 54, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn\n  [x c]\n  (loop [c1 (first (split-at x c))\n                 c2 (second (split-at x c))\n                 r []]\n    (if (< (count c1) x)\n      r\n      (recur (first (split-at x c2))\n             (second (split-at x c2))\n             (conj r c1)))))", "problem": 54, "user": "50ebd63ce4b04edc3377703c"}, {"code": "#(loop [n %1 coll %2 acc []]\n   (if (< (count coll) n) \n     acc \n     (recur n (drop n coll) (conj acc (take n coll)))))", "problem": 54, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": ";(fn [n coll]\n ;   (letfn [(group-coll-by [f coll]\n  ;                         (let [vals (distinct (map f coll))]\n   ;                          (reduce conj [] (map (fn [v] (filter #(= v (f %)) coll))  vals) )))]\n    ;  (filter #(= (count %) n) (group-coll-by #(- % (mod % n)) coll))))\n    \n    (fn m-part \n  [n coll]\n  (lazy-seq\n    (let [[t d] (split-at n coll)]\n      (when (>= (count t) n)\n        (cons t (m-part n d))))))", "problem": 54, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [n xs]\n  (loop [res [] ys xs]\n    (let [[beg end] (split-at n ys)]\n      (if (< (count beg) n)\n        res\n        (recur (conj res beg) end)))))", "problem": 54, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn [result x coll]\n  (let [[head tail] (split-at x coll)]\n\t(if (= (count head) x)\n      (recur (conj result head) x tail)\n      result)))\n[]", "problem": 54, "user": "510c1dd5e4b078ea71921113"}, {"code": "(fn [n xs] (loop [result [] sqn xs]\n           (if (< (count sqn) n)\n             \tresult\n             \t(recur (conj result (take n sqn)) (drop n sqn))\n             )))", "problem": 54, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "(fn partition1\n  ([n coll]\n     (partition1 n n coll))\n  ([n step coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [p (doall (take n s))]\n           (when (= n (count p))\n             (cons p (partition1 n step (nthrest s step))))))))\n  ([n step pad coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [p (doall (take n s))]\n           (if (= n (count p))\n             (cons p (partition1 n step pad (nthrest s step)))\n             (list (take n (concat p pad)))))))))", "problem": 54, "user": "50ab44b2e4b0f65d68208509"}, {"code": "(fn take-every [n s]\n  (loop [l s o [] ]\n    (if (< (count l) n)\n      (seq o)\n      (recur (nthnext l n) (conj o (take n l))))))", "problem": 54, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn part[size coll]\n  (loop [collcopy coll partitioned []]\n    (if (< (count collcopy) size)\n      partitioned\n      (recur (drop size collcopy) (conj partitioned (take size collcopy))))))", "problem": 54, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn [n s] (take (quot (count s) n) (partition-by #(quot % n) s)))\n\n; the test cases have bug", "problem": 54, "user": "5107b86de4b05b2b4eee7495"}, {"code": "(fn f [n s]\n  (if (>= (count s) n)\n    (cons (take n s)\n          (f n (drop n s)))))", "problem": 54, "user": "5092fe10e4b097f48cc3857e"}, {"code": "(fn [n col]\n   (filter #(= (count %) n) (vals (group-by #(quot % n) col))))", "problem": 54, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [s l] (reverse (loop [ll l result '()] (if (< (count ll) s) result (recur (drop s ll) (cons (take s ll) result))))))", "problem": 54, "user": "510931ede4b0c71f76895663"}, {"code": "(fn pt [p s]\n  (when (>= (count s) p)\n    (cons (take p s) (pt p (drop p s)))))", "problem": 54, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn [n s] (take (quot (count s) n) (partition-by #(quot % n) s)))", "problem": 54, "user": "4ff67852e4b0678c553fc37e"}, {"code": "#(for [i (range (int (/ (count %2) %)))]\n   (take % (drop (* i %) %2)))", "problem": 54, "user": "5102489de4b00c483ae176f6"}, {"code": "(fn my-part [x s]\n  ; Partition sequence s into lists of x items each\n  (let [inner-fn (fn inner-fn [x s]\n                   (let [head (take x s)\n                         tail (drop x s)]\n                     (if (< (count tail) x) [head]\n                       (concat [head] (inner-fn x tail)) )))\n        ]\n    (inner-fn x s)))", "problem": 54, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn [i c]\n   (loop [v c r []]\n     (if (< (count v) i)\n       r\n       (recur (nthrest v i) (conj r (take i v))))))", "problem": 54, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn partition2 [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (partition2 n (drop n coll)))))", "problem": 54, "user": "4f8c813de4b02e764a0a519f"}, {"code": "(fn part [n coll]\n  (lazy-seq\n   (let [[x y] (split-at n coll)]\n     (when (>= (count x) n)\n       (cons x (part n y))))))", "problem": 54, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "#(filter (fn [a] (= (count a) %1))\n(reduce (fn [lst n]\n            (if (= (count (last lst)) %1)\n              (conj lst [n])\n              (conj (vec (drop-last lst))\n                    (conj (last lst) n))\n              ))\n          '[[]]\n          %2))", "problem": 54, "user": "50589113e4b06522596eba7f"}, {"code": "(fn f [x lst]\n  (when (<= x (count lst))\n    (cons (take x lst) (f x (drop x lst)))))", "problem": 54, "user": "510db6cde4b078ea71921145"}, {"code": "(fn [n coll]\n  (loop [acc [] rest coll]\n    (let [[a more] (split-at n rest)]\n      (if (not= n (count a))\n        acc\n        (recur (conj acc a) more)))))", "problem": 54, "user": "50e3e108e4b01912b3285c48"}, {"code": "(fn f [n xs]\n  (let [x (take n xs)]\n    (when (= (count x) n)\n      (cons x (lazy-seq (f n (drop n xs)))))))", "problem": 54, "user": "4e50ad74535dc968683fc4ec"}, {"code": "#(reverse(loop [r '()\n              c %2]\n             (if (< (count c) %1)\n                 r\n               (recur (conj r (take %1 c)) (drop %1 c)))))", "problem": 54, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn\n  [n coll]\n  (filter\n   #(= n (count %))\n   ((fn f\n      [coll]\n      (if\n        (<= (count coll) n)\n        [coll]\n        (concat\n         [(take n coll)]\n         (f\n          (drop n coll)))))\n    coll)))", "problem": 54, "user": "511f88eee4b085952a83535f"}, {"code": "(fn f [n coll]\n  (if (>= (count coll) n)\n    (cons (take n coll) (f n (drop n coll)))\n    '()))", "problem": 54, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn my-partition\n  [n items]\n  (loop [left items\n         current '()\n         previous '()]\n    (cond\n     (empty? left)\n         (reverse previous)\n     (= (- n 1) (count current))\n         (recur (rest left) '() (cons (reverse (cons (first left) current)) previous))\n     :else\n         (recur (rest left) (cons (first left) current) previous))))", "problem": 54, "user": "511720eae4b0063b4e3e16da"}, {"code": "(fn part [n coll]\n  (let [size (count coll)]\n\t(cond (< size n) '()\n        (= (count coll) n) (list coll)\n        :default (concat (list (drop-last (- size n) coll)) (part n (drop n coll))))))", "problem": 54, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn part [n xs]\n  (if (<= n (count xs))\n    (cons (take n xs) (part n (drop n xs)))\n    ()))", "problem": 54, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn [n xs]       \n  (apply map list (for [i (range n)] (take-nth n (drop i xs)))))", "problem": 54, "user": "511623cbe4b0d4f670fd2fe1"}, {"code": "(fn p [n s]\n  (when (>= (count s) n)\n    (cons (take n s)\n          (p n (drop n s)))))", "problem": 54, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn my-p [n xs]\n  (if (< (count xs) n)\n    nil\n    (lazy-seq (cons (take n xs)\n                    (my-p n (drop n xs))))))", "problem": 54, "user": "5102ac9de4b00c483ae176fa"}, {"code": "(fn [n s]\n  (loop [s s\n         r '()]\n    (if (< (count s) n)\n      r\n      (recur (drop n s) (concat r (list (take n s)))))))", "problem": 54, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn [n s]\n  (loop [part-seq []\n         rem-seq s]\n    (let [new-sub-seq (take n rem-seq)\n          next-rem-seq (drop n rem-seq)]\n      (if (= n (count new-sub-seq))\n        (recur (conj part-seq new-sub-seq) next-rem-seq)\n        part-seq))))", "problem": 54, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn [n l]\n   (map #(map second %) (filter #(= (count %) n) (vals \n     (group-by #(quot (first %) n) \n               (map-indexed #(vector %2 %1) l)))))\n   )", "problem": 54, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn _partition [len items]\n  (if (< (count items) len)\n    nil\n    (conj (_partition len (drop len items)) (take len items))))", "problem": 54, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn part [n xs]\n  (if (or (empty? xs) (> n (count xs)))\n    ()\n    (cons (take n xs) (part n (nthrest xs n)))))", "problem": 54, "user": "5129039de4b03a34742b4313"}, {"code": "(fn f [n xs]\n  (if (> n (count xs))\n    nil\n    (concat [(take n xs)] (f n (drop n xs)))))", "problem": 54, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn [n coll]\n  (letfn [(f [n coll result]\n            (if (< (count coll) n)\n              (seq result)\n              (recur n (drop n coll) (conj result (take n coll)))\n              )\n            )]\n            (f n coll []))\n  )", "problem": 54, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn part [n coll]\n  (loop [coll coll,\n         result []]\n    (if (empty? coll)\n      result\n      (if (< (count coll) n)\n        (recur (drop n coll) result)\n        (recur (drop n coll) (conj result (take n coll)))))))", "problem": 54, "user": "512474ede4b02c3f2a072cce"}, {"code": "#(loop [coll %2, acc []]\n   (if (>= (count coll) %)\n       (recur (drop % coll) (conj acc (take % coll)))\n     acc))", "problem": 54, "user": "4f525fdce4b03ad3f0c10d37"}, {"code": "#(loop [n %1 input %2 result []]\n   (if (> n (count input))\n     result\n     (recur n (drop n input) (conj result (take n input)))))", "problem": 54, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn [num coll]  \n      (loop [result [] temp-result [] elements coll]\n        (if elements\n          (recur\n            (if (= (count temp-result) num)\n              (conj result temp-result)\n              result              \n              )\n            (if (= (count temp-result) num)\n              [(first elements)]\n              (conj temp-result (first elements))\n              )\n            (next elements)\n            )\n          (if (= (count temp-result) num)\n            (conj result temp-result)\n            result\n            )          \n          )        \n        )                \n    )", "problem": 54, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [n xs]\n  (loop [xs xs zs []]\n    (if (and (seq xs) (>= (count xs) n))\n      (recur (drop n xs) (conj zs (take n xs)))\n      zs)))", "problem": 54, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn parts [n s]\n  (let [[h r] (split-at n s)]\n   (if (not (empty? r))\n     (cons h (lazy-seq (parts n r)))\n\t\t\t(when (= (count h) n) (list h)) )))", "problem": 54, "user": "50d3ec8be4b030b634c368bb"}, {"code": "(fn [n coll]\n  (letfn [(partiter [result n coll]\n            (cond (< (count coll) n) result\n              :else (recur (conj result (take n coll)) n (drop n coll))))]\n    (partiter [] n coll)))", "problem": 54, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn part [n coll]\n    (when (<= n (count coll))\n        (cons (take n coll) (part n (drop n coll)))))", "problem": 54, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "(fn f [n c] (take (quot\n                   (count c) n) (lazy-seq (cons (take n c) (f n (drop n c))))))", "problem": 54, "user": "50e0d5a3e4b061dbdced723d"}, {"code": "(fn my-partition [n coll]\n  (if (< (count coll) n)\n\t'()\n    (cons (take n coll) (my-partition n (drop n coll)))))", "problem": 54, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "(fn part [n coll]\n  (let [p (take n coll)]\n    (when (= n (count p))\n      (cons p (part n (drop n coll))))))", "problem": 54, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn mypart [x coll]\n  (let [numparts (quot (count coll) x)]\n    (take numparts (map #(take x (drop % coll))\n                        (iterate (partial + x) 0)))))", "problem": 54, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "#(->> %2 (map-indexed (fn [a b] [(quot a %1) b])) (group-by (fn [e] (first e))) vals (map (fn [e] (map second e))) (filter (fn [e] (= %1 (count e)))))", "problem": 54, "user": "5137c3b0e4b0509a8b470482"}, {"code": "(fn part [n, xs]\n  (loop [out []\n         in  xs]\n    (if (< (count in) n)\n      out\n      (recur (conj out (take n in)) (drop n in)))))", "problem": 54, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn pas [s sq]\n  (if (< (count sq) s)\n    '()\n    (conj (pas s (drop s sq)) (take s sq))))", "problem": 54, "user": "504e12ade4b078edc5f593b7"}, {"code": "#(for [i (range (quot (count %2) %))] \n   (take % (drop (* % i) %2)))", "problem": 54, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn aa [x y] (loop [xx y yy []] (if (>= (count xx) x)\n                                  (recur (drop x xx) (conj yy (take x xx)))\n                                  yy\n                                  )\n               )\n  )", "problem": 54, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn f [n xs]\n  (let [cand (take n xs)]\n    (when (= (count cand) n)\n      (cons cand (f n (drop n xs))))))", "problem": 54, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn\n  [x v]\n  (loop [r [];\u6700\u7ec8\u7ed3\u679c \n         m [];\u4e2d\u95f4\u7ed3\u679c\u4fdd\u5b58 \n         v v]\n    (if (= (count m) x)\n      (if (empty? v) \n        (conj r m)\n        (recur (conj r m) [(first v)] (rest v)))\n      (if (empty? v)\n        r\n        (recur r (conj m (first v)) (rest v))))))", "problem": 54, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn part [n s] (let [nxt (take n s) rst (drop n s)]\n\t(if (= n (count nxt)) (cons nxt (part n rst)) '())\n))", "problem": 54, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "#(loop [result [] coll %2] (if (empty? coll) \n                                 (if (< (count (last result)) %) (drop-last result) result) \n                                 (recur (conj result (first (split-at % coll))) (flatten (drop 1 (split-at % coll))))))", "problem": 54, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn mypart [n v] (loop [v v parts '()] (if (>= (count v) n) (recur (drop n v) (conj parts (take n v))) (reverse parts))))", "problem": 54, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn [n coll]\n  (loop [r ()\n         l coll\n         ]\n    (if (< (count l) n)\n      r\n      (recur (concat r (list (take n l)))\n             (drop n l)))))", "problem": 54, "user": "509b152be4b0412cdea6eb1e"}, {"code": "(fn [x coll] (filter\n              #(= x (count %))\n              (reduce\n               (fn [a b] (let [c  (last a)\n                               cs (-> a butlast vec)]\n                           (apply conj (if (= x (count c)) [a [b]] [cs (conj c b)]))))\n               [[(first coll)]]\n               (rest coll))))", "problem": 54, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn pp[ n xs ]\n  (cond (= n (count xs)) (list xs)\n        (> n (count xs)) nil\n        :else (let [ [x xs'] (split-at n xs) ]\n                (cons x (pp n xs')))))", "problem": 54, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn part [c coll] (lazy-seq (when-let [s (seq coll)] (when (>= (count s) c)(cons (take c s) (part c (seq (drop c s))))))))", "problem": 54, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn p [n s]\n  (let [t (take n s)]\n    (if (= (count t) n)\n      (cons t (p n (drop n s)))\n      ())))", "problem": 54, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn [size lst]\n  (loop [l lst\n         res ()]\n    (if (> size (count l))\n      (reverse res)\n      (recur (drop size l) (cons (take size l) res)))))", "problem": 54, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn [spl lst] (take (quot (count lst) spl) (map first (rest (iterate #(split-at spl (last %)) (list '() lst))))))", "problem": 54, "user": "50e3fe8fe4b0463d32072488"}, {"code": "#(loop [xs %2 coll []] \n   (if \n     (< (count xs) %1) \n     coll \n     (recur (drop %1 xs) (conj coll (take %1 xs)))))", "problem": 54, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn [neach col]\n  (filter #(= (count %) neach)\n    (reduce (fn [ret this]\n            (let [t (last ret)]\n              (if (nil? t)\n                (conj ret [this])\n\t            (if (< (count t) neach)\n                  (conj (pop ret) (conj t this))\n                  (conj ret [this]) )))) \n          [] col)))", "problem": 54, "user": "513cb853e4b0b86ece9f322b"}, {"code": "(fn partition2[n coll]\n       (when-let [s (seq coll)]\n         (let [p (take n s)]\n           (when (= n (count p))\n             (cons p (partition2 n (nthrest s n)))))))", "problem": 54, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn my-partition [n coll]\n  (letfn [(part [ret n col2]\n            (if (< (count col2) n)\n              (reverse ret)\n              (recur (cons (take n col2) ret) n (drop n col2))))]\n    (part nil n coll)))", "problem": 54, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn [n coll] (map #(take n (drop % coll)) (range 0 (* n (int (/ (count coll) n))) n)))", "problem": 54, "user": "4f2d4d4ce4b0d6649770a058"}, {"code": "(fn parti [n x] (if (> n (count x)) () (cons (take n x) (parti n (drop n x)))))", "problem": 54, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "(fn [c s] \n  (loop [acc [] \n         xs s] \n    (let [ss (take c xs)] \n      (cond \n       (< (count ss) c) acc \n       :else (recur (conj acc ss) (drop c xs))))))", "problem": 54, "user": "5128554ee4b03a34742b430a"}, {"code": "(fn f [k coll]\n     (if (> k (count coll))\n       nil\n       (cons (take k coll)\n            (f k (drop k coll)))))", "problem": 54, "user": "513f0565e4b051389b345b3b"}, {"code": "(fn [interval coll]\n  (letfn [(aux [coll acc]\n               (if (< (count coll) interval) (reverse acc)\n                 (recur (drop interval coll) (cons (take interval coll) acc))\n               \t))]\n    (aux coll (empty coll))))", "problem": 54, "user": "505b9084e4b032b709c81371"}, {"code": "(fn [n c]\n  (for [x (range (quot (count c) n))]\n    (take n (nthrest c (* n x)))))", "problem": 54, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn partitiono [x coll]\n    (if (< (count coll) x) nil\n        (cons (take x coll)\n              (partitiono x (drop x coll)))))", "problem": 54, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn [n lst]\n  (reverse (filter #(= n (count %))\n          (reduce (fn [[fl & rl] ni]\n            (if (< (count fl) n)\n              (cons (conj fl ni ) rl)\n              (cons (vector ni) (cons fl rl)))\n            )\n                  [[]] lst))))", "problem": 54, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn p [n, xs]\n  (when (>= (count xs) n) \n  \t(cons (take n xs) (p n (drop n xs)))))", "problem": 54, "user": "5117c31ee4b0e0897831a60c"}, {"code": "#(loop [c %2, r []]\n  (if (< (count c) %1)\n    r\n    (recur (drop %1 c) (conj r (take %1 c)))))", "problem": 54, "user": "4f21838fe4b0d66497709fd2"}, {"code": "#(loop [n [] o %2]\n   (if (< (count o) %)\n     n\n     (recur (conj n (take % o)) (drop % o))))", "problem": 54, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn [k s] (map (partial take k)\n(take (quot (count s) k) (iterate (partial drop k) s))\n        )\n)", "problem": 54, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn p [n l]\n  (if (< (count l) n)\n    []\n    (cons (take n l) (p n (drop n l)))))", "problem": 54, "user": "5110b8bae4b04c71fce993f4"}, {"code": "#(first \n  (nth (iterate (fn [[r c]] [(conj r (take % c)) (drop % c)]) \n                      [[] %2]) \n             (/ (count %2) %)))", "problem": 54, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "(fn [c s] (take (quot (count s) c) (partition-by #(quot % c) s)))", "problem": 54, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn my-partition [size sq]\n  (if (< (count sq) size)\n    '()\n    (concat\n      (list (take size sq))\n      (my-partition size (drop size sq)))))", "problem": 54, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn [n l]\n  (loop [d () s l] \n    (if (> n (count s))\n      d\n      (recur\n       (concat d (list (take n s))) (drop n s)))))", "problem": 54, "user": "511f9625e4b085952a835362"}, {"code": "(fn [n coll]\n  (->> (range 0 (count coll) n)\n       (map #(take n (drop % coll)))\n       (filter #(= n (count %)))))", "problem": 54, "user": "515c6132e4b069911535cf0d"}, {"code": "(fn [n r]\n  (filter #(= n (count %))\n    (for [x (range 0 (inc (last r)) n)] (take n (drop x r)))))", "problem": 54, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn r [n l]\n  (if (>= (count l) n)\n    (cons (take n l)\n          (r n (drop n l)))\n    '()\n))", "problem": 54, "user": "50ba5113e4b03e68e4411c7d"}, {"code": "(fn [n l]\n  (letfn [(chunks [x] (if (< (count x) n) nil\n                        (cons (take n x)\n                              (chunks (drop n x)))))]\n    (chunks l)))", "problem": 54, "user": "515ead6be4b049add99a053e"}, {"code": "(fn [i, s]\n  (apply (partial map list) (map (partial take-nth i) (take i (iterate rest s))))\n)", "problem": 54, "user": "513b43ede4b067e25a345ed3"}, {"code": "#((fn [acc n lyst]\n             (let [a (conj acc (take n lyst))\n                      b (drop n lyst)]\n               (if (< (count b) n)\n                    (apply list a)\n                  (recur a n b)\n                  ))) [] %1 %2\n           )", "problem": 54, "user": "515cf9b5e4b00901442db1d4"}, {"code": "(fn my-partition [n lst]\n  (lazy-seq\n   (let [l (take n lst)]\n     (if (= n (count l))\n       (cons l (my-partition n (drop n lst)))\n       '()))))", "problem": 54, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn f [x y] (if (< (count y) x) '() (cons (take x y) (f x (drop x y)))))", "problem": 54, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn ptn [n s]\n  (if (>= (count s) n)\n    (cons (take n s) (ptn n (drop n s)))))", "problem": 54, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(fn[s c] (for [i (range (quot (count c) s))] (take s (drop (* i s) c))))", "problem": 54, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn [n xs]\n  (loop [result []\n         list xs]\n    (if (and (seq xs) (<= n (count list)))      \n      (recur (into result [(take n list)]) (drop n list))\n      result)))", "problem": 54, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn part [n coll]\n  (if (or (empty? coll) (< (count coll) n))\n    '()\n    (cons (take n coll) (part n (drop n coll)))))", "problem": 54, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn [num s]\n    (loop [todo s\n           res []]\n      (if (< (count todo) num)\n        res\n        (recur (drop num todo) (conj res (take num todo))))))", "problem": 54, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn [s c]\n  (letfn [(p [x c]\n            (let [l (split-at s c)]\n              (cond\n                (> s (count c)) (list x)\n                (= s (count c)) (cons x (list c))\n                (empty? x) (p (first l) (last l))\n                :else\n                (cons x (p (first l) (last l))))))]\n    (p '() c)))", "problem": 54, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "(fn x[n col]\n  (let [times (quot (count col) n)]\n    (for [t (range times) :let [r (take n (nthrest col (* t n)))]]\n      r)))", "problem": 54, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn [n l]\n  (loop [result [] l l]\n    (if (>= (count l) n)\n      (recur (conj result (take n l)) (drop n l))\n      result)))", "problem": 54, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn [n l] (filter #(= (count %) n) (vals (group-by #(quot % n) l))))", "problem": 54, "user": "5150a7d7e4b03e678e393abb"}, {"code": "(fn [n xs]\n   (loop [xs xs r []]\n     (if (> n (count xs))\n       r\n       (recur (drop n xs) (conj r (take n xs))))))", "problem": 54, "user": "50f48298e4b004d364930527"}, {"code": "(fn chunk[n s]\n  (lazy-seq\n    (if \n      (not\n      (nil? \n       (first \n        (drop \n         (dec n) \n         s)\n       )\n      )\n       )\n      \n    (cons \n     (apply concat (map #(take 1 (drop % s)) (range n)))\n     (chunk n (drop n s))    \n     )\n    )\n   )\n   \n  )", "problem": 54, "user": "4fb03cf4e4b081705acca262"}, {"code": "(fn pt\n  ([n coll]\n     (pt n n coll))\n  ([n step coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [p (doall (take n s))]\n           (when (= n (count p))\n             (cons p (pt n step (nthrest s step)))))))))", "problem": 54, "user": "51740b65e4b0d277d717bc67"}, {"code": "(fn p [n s]\n  (when (>= (count s) n)\n    (concat [(take n s)] (p n (drop n s)))))", "problem": 54, "user": "4eab612d535d7eef30807316"}, {"code": "(fn [n x]\n  (take-while\n   #(= n (count %))\n   (map (partial take n)\n        (iterate (partial drop n) x)\n        )\n   )\n  )", "problem": 54, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn partition-seq [n s]\n  (if (< (count s) n)\n    []\n    (cons (take n s) (partition-seq n (drop n s)))))", "problem": 54, "user": "511d6a01e4b022853b0e07a5"}, {"code": "(fn [n lst]\n\t(loop [out '() n n l lst]\n\t\t(if (empty? l)\n\t\t\t(if (= 0 (mod (count lst) n))\n\t\t\t\t(reverse out)\n\t\t\t\t(butlast (reverse out)))\n\t\t\t(recur (conj out (take n l)) n (drop n l)))))", "problem": 54, "user": "51757af0e4b085adf681d873"}, {"code": "#(if (< (count %3) %2)\n    (reverse %)\n    (recur (conj % (take %2 %3)) %2 (drop %2 %3)))\n'()", "problem": 54, "user": "517adc6ce4b0925c997201c4"}, {"code": "(fn [n v] (loop [ n n v v buf []] (if (< (count v) n) buf (recur n (drop n v) (conj buf (take n v))))))", "problem": 54, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn prt [n coll]\n  (when-let [s (seq coll)]\n      (let [firstn (take n s)] (when (>= (count firstn) n)\n    \t(lazy-seq (cons firstn (->> s (drop n) (prt n) )  ) )  ) ))\n  )", "problem": 54, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn [n xs]\n  (loop [acc [] xs xs]\n    (if (> n (count xs))\n      acc\n      (recur (conj acc (take n xs))\n             (drop n xs)))))", "problem": 54, "user": "5173726be4b098276e74652c"}, {"code": "(fn f [n c]\n  (if (< (count c) n) []\n  (cons (take n c) (f n (drop n c)))))", "problem": 54, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn my-partition\n  [n coll]\n  (if (= (count  (take n coll)) n)\n    ( cons (take n coll)\n           (lazy-seq (my-partition n (drop n coll))))\n    ()) )", "problem": 54, "user": "517bcfc1e4b07ef0e56148d1"}, {"code": "(fn p [n l]\n  (letfn [(helper [i ll c r]\n                  (cond (empty? ll) (if (= (count c) n)\n                                      (conj r c)\n                                      r)\n                        (= 0 i) (helper n ll [] (conj r c))\n                        :else (helper (dec i) (rest ll) (conj c (first ll)) r)))]\n    (helper n l [] [])))", "problem": 54, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "#(loop [l %2, r []]\n   (if (< (count l) %1)\n     r\n     (recur (drop %1 l) (conj r (take %1 l)))))", "problem": 54, "user": "5163b06be4b055933a9ca030"}, {"code": "(fn xx [n ss] (when (<= n (count ss))\n                        (conj (xx n (drop n ss)) (take n ss) )))", "problem": 54, "user": "516e2246e4b092a6408c5bc5"}, {"code": "(fn\n  \t[n coll]\n  \t(loop [coll coll \n    \t     res []]\n    \t(if (or (empty? coll) (< (count coll) n))\n      \tres\n      \t(recur (drop n coll) (conj res (take n coll))))))", "problem": 54, "user": "51804bcbe4b04f45bde7d901"}, {"code": "(fn fn54b [n xs]\n  (lazy-seq\n    (let [g (take n xs)]\n      (when (= (count g) n)\n        (cons g (fn54b n (drop n xs)))))))", "problem": 54, "user": "5125d963e4b05d10e3e395fe"}, {"code": "#(loop [ret [] coll %2]\n   (if (< (count coll) %1)\n     ret\n     (recur (conj ret (drop-last (- (count coll) %1) coll))\n            (drop %1 coll))))", "problem": 54, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn t [x y] \n  (when (>= (count y) x) \n    (cons (take x y) (t x (drop x y)))))", "problem": 54, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn par [n coll]\n  (if (<= n (count coll))\n    (lazy-seq\n     (cons (take n coll) (par n (drop n coll))))))", "problem": 54, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn p [n l] (if (< (count l) n) nil (cons (take n l) (p n (drop n l)))))", "problem": 54, "user": "5134973ce4b0230e9f713b42"}, {"code": "#(loop [n %1 xs %2 acc []]\n   (if (> n (count xs)) acc\n     (recur n (drop n xs) (conj acc (take n xs)))))", "problem": 54, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn [n coll]\n   (loop [acc [(take n coll)] res_col (drop n coll)]\n     (if (< (count res_col) n)\n       acc\n       (recur (concat acc [(take n res_col)]) (drop n res_col)))))", "problem": 54, "user": "5016ac54e4b052339a490e7b"}, {"code": "(fn [n x] (->> (iterate #(drop n %) x)\n               (map #(take n %))\n               (take-while #(= (count %) n))))", "problem": 54, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn my-partition [n xs]\n      (if (< (count xs) n)\n          []\n          (concat [(take n xs)] (my-partition n (drop n xs)))))", "problem": 54, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn [n s]\n  (loop [in s out []]\n    (if (> n (count in))\n      out\n      (recur (drop n in) (conj out (take n in))))))", "problem": 54, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn [step coll] (letfn [(func [step coll]\n                                      (if (>= (count coll) step)\n                                        (cons (take step coll) (func step (drop step coll)))))]\n                              (func step coll)))", "problem": 54, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [par l]\n  (loop [lis l, r [], buffer []]\n    (let [full-buffer? (= par (count buffer))\n          new-r (if full-buffer? (conj r buffer) r)\n          new-buffer (if full-buffer? [] buffer)]\n      (if (empty? lis)\n        new-r\n        (recur (rest lis) new-r (conj new-buffer (first lis)))))))", "problem": 54, "user": "517531c6e4b07031762f2eea"}, {"code": "(fn [n s]\n  (for [i (range (int (/ (count s) n)))]\n    (let [d (* i n)]\n      (take n (drop d s)))))", "problem": 54, "user": "51899891e4b0288ada3dbdab"}, {"code": "#(loop [coll %2 int [] ]\n       (if (< (count coll) %1) int\n           (recur (drop %1 coll) \n              (conj int  (take %1 coll)))\n))", "problem": 54, "user": "517945dce4b0684c1c981a43"}, {"code": "#(loop [lst %2 acc [] ret []]\n   (if (and (< (count lst) %1) (empty? acc))\n     ret\n     (if (< (count acc) %1)\n       (recur (rest lst) (conj acc (first lst)) ret)\n       (recur lst [] (conj ret acc))\n       )))", "problem": 54, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn [n xs]\n  (take-while #(= (count %) n) \n              (map (partial take n) \n                   (iterate (partial drop n)\n                            xs))))", "problem": 54, "user": "4fad33e8e4b081705acca236"}, {"code": "(fn my-partition\n  ([n s]\n   (if (>= (count s) n)\n     (cons (take n s) (my-partition n (drop n s)))\n     '())))", "problem": 54, "user": "51460e4ce4b04ef915e37314"}, {"code": "(fn f[n coll] \n  (let [l (count coll)\n        cnt (int (/ l n))]\n    (loop [cnt cnt\n           coll coll\n           acc []]\n      (if (= cnt 0)\n        acc\n        (recur (dec cnt) (drop n coll) (conj acc (take n coll)))))))", "problem": 54, "user": "51750cd4e4b07031762f2ee5"}, {"code": "#(loop [r [], s %2]\n   (let [ch (take %1 s)]\n     (if\n       (< (count ch) %1) r\n       \n       (recur (conj r ch) (drop %1 s)))))", "problem": 54, "user": "5196568fe4b04c0af7ff3c1c"}, {"code": "(fn [n coll]\n   (for [p (range (quot (count coll) n))]\n     (take n (drop (* p n) coll))))", "problem": 54, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn p [n s]\n  (loop [sq s rs '()]\n    (if (< (count sq) n)\n      (reverse rs)\n      (recur (drop n sq) (conj rs (take n sq))))))", "problem": 54, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn [n x] \n  (take-while (comp (partial = n) count)\n          (map first\n          (next (iterate #((juxt take drop) n (second %))\n                   [[] x])))))", "problem": 54, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "(fn ptn [n xs]\n  (let [p (take n xs)]\n    (if (= n (count p))\n      (cons p (ptn n (drop n xs))))))", "problem": 54, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn part [n coll] \n  (lazy-seq (when (<= n (count coll)) (cons (take n coll) (part n (drop n coll))))))", "problem": 54, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn [n xs]\n   (if (pos? n)\n     (take-while #(= (count %) n)\n                 (map first (iterate (fn [[ys zs]]\n                                       (split-at n zs))\n                                     (split-at n xs))))))", "problem": 54, "user": "51131da8e4b0350614f07a83"}, {"code": "(fn part ([n xs l] (if (>= l n) \n                    (conj (part n (drop n xs) (- l n)) (take n xs))\n                   '()))\n         ([n xs] (part n xs (count xs))\n))", "problem": 54, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "(fn f [c coll]\n  (if (< (count coll) c)\n      []\n      (cons (take c coll) (lazy-seq (f c (drop c coll))))))", "problem": 54, "user": "506ba58be4b0eda3100c090b"}, {"code": "(fn [n col]                                                                                              \n  (reverse                                                                                                      \n   (reduce                                                                                                      \n    (fn [r v]                                                                                                   \n      (if (= (count (first r)) n)                                                                               \n        (cons [v] r)                                                                                            \n        (cons (concat (first r) [v]) (rest r))                                                                  \n      )) [[]] (take (* (quot (count col) n) n) col))))", "problem": 54, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn ! [n xs]\n  (if (< (count xs) n)\n    nil\n    (let [[head tail] (split-at n xs)]\n      (conj (! n tail) head))))", "problem": 54, "user": "5073de20e4b054001656acca"}, {"code": "(fn part [n coll]\n     (loop [v (vec coll)\n            result []]\n       (if (< (count v) n)\n         (seq result)\n         (recur (vec (drop n v)) (conj result (seq (subvec v 0 n)))))))", "problem": 54, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "(fn [cnt col]\n    (let [partitioned (reduce \n                        (fn [acc v] (if (< (count (last acc)) cnt)\n                                      (concat (butlast acc) (list (concat (last acc) (list v))))\n                                      (concat acc (list (list v))))) \n                        '(()) col)]\n      (filter #(= cnt (count %)) partitioned)))", "problem": 54, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn ! [n xs]\n  (let [front (take n xs)\n        back (drop n xs)]\n     (if (< (count front) n) '()\n       (cons front (lazy-seq (! n back))))))", "problem": 54, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "(fn part [n xs]\n  (if (empty? xs)\n    '()\n    (if (= (count (take n xs)) n)\n      (cons (take n xs) (part n (drop n xs)))\n      '())))", "problem": 54, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "(fn p [n c] (let [s (split-at n c) f (first s) l (last s)] (if (< (count l) n) (list f) (conj (p n l) f))))", "problem": 54, "user": "519964cbe4b0aa09cbc0b849"}, {"code": "(fn [n numbers]\n    (loop [nbs numbers  res '()]\n      (cond\n       (or (empty? nbs) (< (count nbs) n)) (reverse res)\n       :else (recur (drop n nbs)  (conj res (take n nbs))))))", "problem": 54, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "(fn a [n coll]\n  (if (>= (count coll) n)\n    (into [(take n coll)] (a n (drop n coll)))\n    []))", "problem": 54, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn part [n coll]\n  (when (>= (count coll) n)\n    (cons (take n coll) (part n (drop n coll)))))", "problem": 54, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn [n v] (loop [v v\n                   acc []]\n              (if (> n (count v))\n                acc\n                (recur (drop n v)\n                       (conj acc  (take n v))))))", "problem": 54, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn [n coll]\n   (loop [acc [] s coll]\n     (if (< (count s) n) acc\n       (recur (conj acc (take n s)) (drop n s)))))", "problem": 54, "user": "51b38769e4b026427ecf067f"}, {"code": "(fn f [a b]\n   (if(< (count b) a)\n     []\n     (concat [(take a b)] (f a (drop a b)))\n   \t)\n\n)", "problem": 54, "user": "51aeb1f4e4b09397d5109794"}, {"code": "#(loop [a []\n        c %2]\n  (if (> % (count c))\n    a\n    (let [[b & x] (split-at % c)]\n      (recur (conj a b) (last x)))))", "problem": 54, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn part [c s]\n  (seq\n   (loop [res [] rem s]\n     (let [[x nrm] (split-at c rem)]\n       (if (< (count x) c)\n         res\n         (recur (conj res x) nrm))))))", "problem": 54, "user": "51672d15e4b079759a74a5e7"}, {"code": "(fn [n seq]\n  (map (partial map second)\n       (vals\n        (filter #(= (count (val %)) n)\n                (group-by first\n                          (map-indexed #(vector (quot % n) %2)\n                                       seq))))))", "problem": 54, "user": "4ebf11bc535dfed6da9c6d9c"}, {"code": "(fn [n c]\n  (letfn [(tifl [co]\n            (let [t (take n co)]\n              (if (< (count t) n) [] t)))]\n    (loop [res [] left c]\n      (if (empty? left)\n        (remove empty? res)\n        (recur (conj res (tifl left)) (drop n left))))))", "problem": 54, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn ptn [n s]\n  (let [next-chunk (take n s)]\n    (if (= (count next-chunk) n)\n      (cons next-chunk (ptn n (drop n s))))))", "problem": 54, "user": "4fa340b4e4b081705acca18c"}, {"code": "#(loop [xs %2, result []]\n   (if (< (count xs) %)\n     result\n     (recur (drop % xs) (conj result (take % xs)))))", "problem": 54, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "(fn part [n aseq] (if (> n (count aseq)) '()\n                    (concat (list (take n aseq)) \n                    \t      (part n (drop n aseq)))))", "problem": 54, "user": "51bf4560e4b013aa0d74b817"}, {"code": "(fn [n xs]\n  (loop [outer [] xs xs]\n    (if (< (count xs) n) outer\n\t  (recur (conj outer (take n xs)) (nthrest xs n)))))", "problem": 54, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn part [x xs]\n  (reverse \n   (loop [lst xs acc []]\n    (if (< (count lst) x)\n      acc\n      (recur (drop x lst) (cons (take x lst) acc))))))", "problem": 54, "user": "50611456e4b0dc10a69545a5"}, {"code": "(fn [n col]\n  (loop [col col result '()]\n    (if (< (count col) n)\n      (reverse result)\n      (recur (drop n col) (cons (take n col) result)))))", "problem": 54, "user": "514b83b4e4b0bd81940b86ce"}, {"code": "(fn part [n x]\n  (when (<= n (count x))\n    (cons (take n x) (part n (drop n x)))\n    )\n  )", "problem": 54, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn [y x] (loop[myNL '() myEL () myL x cU (count x)](if(>= cU 0)\n                                            (recur\n                                             (cond (= (count myEL) y ) (concat myNL (list myEL))\n                                                   :else myNL)\n                                             (cond (= (count myEL) y)(concat (drop (count myEL) myEL)(list(first myL)))\n                                              :else (concat myEL (list (first myL))))\n                                             (cond (= cU 0) myL\n                                             :else(rest myL))\n                                             (- cU 1)\n                                             )\n                                            myNL\n                                            )\n          )\n  )", "problem": 54, "user": "5177cacde4b0261ae665b877"}, {"code": "(fn f [x coll]\n  (if-not (or (empty? coll) (> x (count coll)))\n    (cons (take x coll) (lazy-seq (f x (drop x coll))))))", "problem": 54, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [x y]\n      (loop [i (seq y)\n             j (take x i)\n             z ()]\n        (if (empty? i)\n           (reverse z)\n         (cond\n           (= x (count j))(recur (nthrest i x) (take x (nthrest i x)) (conj z j))\n           (not= x (count j))(reverse z)))))", "problem": 54, "user": "51bd255ce4b0df1216cefd94"}, {"code": "#(for [i (range 0 (inc (- (count %2) %1)) %1)] (take %1 (drop i %2)))", "problem": 54, "user": "51b76227e4b0d906fcd71d35"}, {"code": "(fn [x y]\n      (loop [i (seq y)\n             j (take x i)\n             z ()]\n        (if (empty? i)\n           (reverse z)\n         (cond\n           (= x (count j))(recur (nthrest i x) (take x (nthrest i x)) (conj z j))\n           (not= x (count j))(reverse z)))))", "problem": 54, "user": "51b213c2e4b02f8f128bb962"}, {"code": "(fn [n s]\n  (loop [s s\n   acc []]\n   (cond\n    (< (count s) n) acc\n    :else (recur (drop n s) (conj acc (take n s))))))", "problem": 54, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn part-seq [n coll]\n  (let [step (fn step [n coll acc]\n               ((fn [n coll acc tmp  index]\n                  (if (not (seq coll))\n                    (if (= n (count tmp))\n                      (conj acc (seq tmp))\n                      acc)\n                    (if (< index n)\n                      (recur n (rest coll) acc  (conj tmp (first coll)) (inc index))\n                      (step n coll (conj acc (seq tmp))))))\n                n coll acc [] 0))]\n    (seq (step n coll []))))", "problem": 54, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "(fn part [n lst]\n\n    (letfn [(part0 [n lst acc]\n      (if (empty? lst)\n      acc\n      (part0 n (drop n lst) (conj acc (take n lst)))))\n]\n      (filter (fn [x] (= (count x) n)) (part0 n lst []))\n      \n      ))", "problem": 54, "user": "5180dc04e4b06b8caf33fa01"}, {"code": "#(loop [a [(take % %2)] b (drop % %2) ] (if (< (count b) %) a (recur (conj a (take % b)) (drop % b))))", "problem": 54, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "(fn p [c l]\n(let [[l ls] (split-at c l)](when (= (count l) c) (lazy-seq ( cons l (p c ls))))))", "problem": 54, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "#(for [i (map (partial * %) (range (quot (count %2) %)))] (subvec (vec %2) i (+ i %)))", "problem": 54, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn my-partition [x coll]\n  (if (>= (count coll) x)\n    (cons (take x coll) (my-partition x (drop x coll)))))", "problem": 54, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn                                                                                                                                         \n    [num s]                                                                                                                                        \n    (let [num-part (quot (count s) num)                                                                                                            \n          idxed-s (map-indexed vector s)]                                                                                                          \n      (reduce #(let [[idx elm] %2                                                                                                                  \n                     idx-part (quot idx num)]                                                                                                 \n                 (if (> num-part idx-part)                                                                                                         \n                   (update-in %1 [idx-part] conj elm)                                                                                              \n                   %1)) (vec (repeat num-part [])) idxed-s)))", "problem": 54, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "(fn p [acc n col]\n  (if (< (count col) n)\n    acc\n    (p (conj acc (take n col)) n (drop n col)))) []", "problem": 54, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [nm lst]\n  (first (reduce (fn [memo new-val]\n                         (let [final (first memo)\n                               current (second memo)\n                               done (= (count current) (- nm 1))\n                               nxt (reverse (cons new-val (reverse current)))\n                               next-final (if done (reverse (cons nxt (reverse final))) final)]\n                                [next-final (if done '() nxt)])) [[] []] lst)))", "problem": 54, "user": "51c76864e4b07ef393169e3f"}, {"code": "(fn [n c] (map #(take n (drop % c)) (range 0 (- (count c) (rem (count c) n)) n)))", "problem": 54, "user": "51c73959e4b07ef393169e3e"}, {"code": "#(first (partition-by count (map (partial map first) (partition-by last (map list %2 (mapcat (partial repeat %1) (range)))))))", "problem": 54, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn my-partition [n l]\n  (loop [left l out '() temp '() counter 0]\n    (cond (= n counter) (recur left\n                               (concat out (list temp))\n                               '()\n                               0)\n          (empty? left) out\n          :else (recur (rest left)\n                       out\n                       (concat temp (list (first left)))\n                       (inc counter)))))", "problem": 54, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "(fn part [n se]\n   (take (quot (count se) n)\n         (lazy-seq\n           (cons (take n se)\n             \t (part n (drop n se))))))", "problem": 54, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn partitionz [x y] (if (< (count y) x) '() (cons (take x y) (partitionz x  (drop x y)))))", "problem": 54, "user": "4f32135ae4b0d6649770a08e"}, {"code": "#(loop [x %2 y []] (if (< (count x) %) y (recur (drop % x) (conj y (vec (take % x))))))", "problem": 54, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "(fn x [n s]\n  (if \n    (> n (count s)) \n    () \n    (cons (take n s) (x n (drop n s)))))", "problem": 54, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn [r s]\n (apply (partial map (fn [& a] (vec a))) (map #(take-nth r (drop % s)) (range r))))", "problem": 54, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn my-partition [n coll]\n  (let [part (take n coll)]\n    (when (= n (count part)) (cons part (lazy-seq (my-partition n (drop n coll)))))))", "problem": 54, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "#(loop [n %1\n        l %2\n        r '()]\n   (if (or (empty? l) (< (count l) n))\n     r\n     (recur n (drop n l) (concat r (list (take n l))))))", "problem": 54, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn f [n col]\n  (filter #(= n (count %1)) \n  (for [i (range 0 (count col) n)]\n    (take n (drop i col)))))", "problem": 54, "user": "51d662fce4b0154f82ab92ef"}, {"code": "(fn [x y] (for [nb (range (int (/ (count y) x)))] (take x (drop (* nb x) y))))", "problem": 54, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn [n l] (map #(subvec (vec l) %1 %2) (range 0 (count l) n) (range n (inc (count l)) n)))", "problem": 54, "user": "51cc5cb3e4b02254fc79486f"}, {"code": "(fn p [n coll]\n\t(if (< (count coll) n)\n\t\tnil\n\t\t(cons\n\t\t\t(take n coll)\n\t\t\t(lazy-seq\n\t\t\t\t(p n (drop n coll))))))", "problem": 54, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn [x xs]\n  (filter #(= x (count %)) (loop [ys xs ans '()]\n    (if (= (drop x ys) [])\n       (concat ans [(take x ys)])\n       (recur (drop x ys) (concat ans [(take x ys)]))))))", "problem": 54, "user": "50955676e4b087f34d351ab1"}, {"code": "(fn f [n coll]\n  (let [p (take n coll)]\n        (if (= n (count p))\n          (cons p (f n (nthrest coll n))\n                )\n          nil)))", "problem": 54, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn [n s]\n  (filter #(= n (count %))\n    (reduce\n      #(if (= (count (peek %1)) n)\n        (conj %1 [%2])\n        (conj (pop %1) (conj (peek %1) %2)))\n      [[]]\n      s)))", "problem": 54, "user": "5175533fe4b0dea9bbfba575"}, {"code": "(fn ps [n s]\n\t(filter #(= (count %) n) \n            (map second (group-by #(quot % n) s))))", "problem": 54, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn partn [l s]\n  (take-while\n    #(= l (count %1))\n      (vals (group-by #(int (/ % l)) s)))\n  )", "problem": 54, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "#(for [x (range (Math/floor (/ (count %2) %)))]\n  (take % (drop (* x %) %2)))", "problem": 54, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn [r coll] ( (fn div [coll vec] (let [\n                        part (take r coll)\n                        rest-coll (drop r coll)\n                        ]\n               (if(> r (count rest-coll))\n                    (conj vec part)\n                    (div rest-coll (conj vec part))\n                     )))\n               coll []))", "problem": 54, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "#(loop [p [] r %2]\n   (if (< (count r) %1) p\n     (recur (conj p (take %1 r)) (drop %1 r))))", "problem": 54, "user": "51e00020e4b01188f0627534"}, {"code": "(fn ran [n coll]\n\t(if (> n (count (take n coll))) '()\n\t\t(cons (take n coll) (ran n (drop n coll)))))", "problem": 54, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn f [g c]\n   (if (>= (count c) g)\n     (cons (take g c) (f g (drop g c)))\n     ))", "problem": 54, "user": "51d46133e4b013d740b70de2"}, {"code": "(fn [n coll]\n  (loop [coll coll\n         acc  []]\n    (if (or (empty? coll) (> n (count coll)))\n      acc\n      (recur (nthrest coll n) (conj acc (take n coll))))))", "problem": 54, "user": "51da565ae4b02ceefd947765"}, {"code": "#(reverse (loop [a '() l %2]\n        (if (> % (count l))\n          a\n          (recur (cons (take % l) a) (drop % l))\n          )\n   )\n )", "problem": 54, "user": "51e1c176e4b06a68e693eafb"}, {"code": "(fn pt [n aseq]\n  (letfn [(go [s]\n            (let [sq (seq s)\n                  front (take n sq)]\n              (when (= n (count front))\n                (cons front (go (drop n sq))))))]\n    \n    (lazy-seq (go aseq))))", "problem": 54, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn [n cl]\n  (loop [coll cl memo []]\n    (if (< (count coll) n)\n      memo\n      (recur (drop n coll) (conj memo (take n coll)))\n    )\n  )\n)", "problem": 54, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "(fn [n source]\n  (letfn [(my-partition [n source]\n            (letfn [(mysubseq [lst start end]\n            (let [remove-from-end (- (count lst) end)\n                  reversed (reverse lst)\n                  reversed-minus-tail (nthrest reversed remove-from-end)]\n              (nthrest (reverse reversed-minus-tail) start)))\n          \n          (rec [source acc]\n            (let [rest (nthrest source n)]\n              (if (not (empty? rest))\n                (rec rest (cons (mysubseq source 0 n) acc))\n                (reverse (cons source acc)))))]\n    (if (not (empty? source)) (rec source nil) nil)))]\n    (filter #(= n (count %)) (my-partition n source))))", "problem": 54, "user": "51e0198ee4b01188f0627539"}, {"code": "#(loop [l %2 a []]\n   (if (< (count l) %) a\n     (recur (drop % l) (conj a (take % l)))))", "problem": 54, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "#(first (reduce (fn [[acc tmp] x]\n                 (if (= (count tmp) %)\n                   [(conj acc tmp)\n                    [x]]\n                  [acc (conj tmp x)]))\n               [[] []]\n               (concat %2 [nil])))", "problem": 54, "user": "51e89428e4b006d205356a51"}, {"code": "(fn par [n s]\n  (let [first-n (take n s)]\n    (if (= n (count first-n))\n      (cons first-n (par n (drop n s)))\n      nil\n      )\n  )\n)", "problem": 54, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn my-part [n, l]\n\t(filter #(= n (count %)) (partition-by #(even? (int (/ % n))) l)))", "problem": 54, "user": "51d49b75e4b013d740b70de6"}, {"code": "(letfn [(f [size [x & xs :as lst] e]\n            (if (or (empty? lst) (>= (count x) size))\n              (conj lst [e])\n              (conj xs (conj x e))))]\n  (fn [size col]\n    (map seq (filter #(<= size (count %)) (reverse (reduce (partial f size) () col))))))", "problem": 54, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "(fn f [n xs]\n  (if (or (> n (count xs)) (zero? n))\n    ()\n    (cons (take n xs) (f n (drop n xs)))))", "problem": 54, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn partition-seq [n s]\n  (if (>= (count s) n)\n    (cons (take n s) (partition-seq n (drop n s)))))", "problem": 54, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn part [n s]\n    (when-not (< (count s) n)\n      (concat (list (take n s)) (part n (drop n s)))))", "problem": 54, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "(fn [n coll]\n  (loop [group-coll '() coll coll]\n    (if (> n (count coll))\n      (reverse group-coll)\n      (recur (cons (take n coll) group-coll) (drop n coll)))))", "problem": 54, "user": "518a59b3e4b02bf06f6bbb4b"}, {"code": "(fn\n  [n s]\n  (map (fn [part]\n         (map second part))\n    (remove #(< (count %) n)\n            (partition-by #(int (/ (first %) n)) (map-indexed vector s)))))", "problem": 54, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn my-partition\n  [n xs]\n  (if (> (count xs) n)\n    (conj (my-partition n (drop n xs)) (take n xs))\n    (when (= (count xs) n)\n    \t(list (take n xs)))))", "problem": 54, "user": "51e780dae4b0730ab87cf353"}, {"code": "(fn p1 [n coll] (let [[fs rs] (split-at n coll)] \n                               (lazy-seq (cons fs (when (>= (count rs) n) (p1 n rs))))))", "problem": 54, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn spartition\n  ([n s]\n   (spartition s n [] []))\n  ([s n res curr]\n   (if (= (count curr) n)\n     (recur s n (conj res (sequence curr)) [])\n     (if (empty? s)\n       (sequence res)\n       (recur (rest s) n res (conj curr (first s)))))))", "problem": 54, "user": "51b8e8b3e4b050a1176cd6a0"}, {"code": "(fn [n in]\n    (loop [ret []\n           r in]\n      (if (>= (count (take n r)) n)\n        (recur (conj ret (take n r)) (drop n r))\n        ret)))", "problem": 54, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn [r n v ] (let [[e t] (split-at n v)] \n    (println r n v)\n    (if (< (count e) n) (reverse r) (recur (conj r e) n t ) )))()", "problem": 54, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "#(loop [v %2\n         o '()]\n    (cond\n      (< (count v) %1) o\n      :else (recur (drop %1 v) (concat o (list (take %1 v))))))", "problem": 54, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn part [n coll] \n  (loop [coll coll c []]\n   (if (>= (count coll) n) \n    (recur (drop n coll) (conj c (take n coll)))\n    c)))", "problem": 54, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "#(for [c (iterate (partial drop %) %2)\n      :while (<= % (count c))]\n  (take % c))", "problem": 54, "user": "5046ee3ee4b03b02161376b4"}, {"code": "(fn [size data] (loop [d data\n                       s size\n                       groups (if (= (mod (count data) size) 0)\n                                (/ (count data) size)\n                                (mod (count data) size))\n                       subx []\n                       x []]\n                  (if (= groups 0)\n                    x\n                    (recur (if (= (count subx) s)\n                             d\n                             (rest d))\n                           s\n                           (if (= (count subx) s)\n                             (dec groups)\n                             groups)\n                           (if (= (count subx) s)\n                             []\n                             (conj subx (first d)))\n                           (if (= (count subx) s)\n                             (conj x subx)\n                             x)))))", "problem": 54, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "(fn part [qty aSeq]\n  (if (<= qty (count aSeq))\n    (cons (take qty aSeq) (part qty (drop qty aSeq)))\n    ()))", "problem": 54, "user": "51f04e89e4b0274c496158cd"}, {"code": "(fn f [n c]\n  (lazy-seq\n   (let [[e es] ((juxt take drop) n c)]\n     (when (= (count e) n)\n       (cons e (f n es))))))", "problem": 54, "user": "4fbf2818e4b081705acca317"}, {"code": "(fn [s c]\n  (apply map vector\n   (loop [x s i [] r c]\n     (if-not (> x 0)\n       i\n       (recur (dec x) (conj i (take-nth s r)) (rest  r))\n       )\n     ))\n  )", "problem": 54, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "(fn [x xs]\n   (loop [r [] t xs]\n     (if (and (seq t) (>= (count t) x))\n       (recur (conj r (take x t)) (drop x t))\n       r)))", "problem": 54, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn [n xs] \n  (loop [c xs acc []] \n    (if (< (count c) n) \n      acc \n      (let [sp (split-at n c)] \n        (recur (second sp) \n               (conj acc (first sp)))))))", "problem": 54, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn [x v] (filter #(= x (count %)) (vals (group-by #(int (/ (.indexOf v %) x)) v))))", "problem": 54, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn part [n s]\n  (lazy-seq\n   (let [xs (split-at n s)\n         f (first xs)]\n     (if (= n (count f))\n       (cons f (part n (second xs)))))))", "problem": 54, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [n coll] (for [i (range (int (/ (count coll) n)))] (take n (drop (* i n) coll))))", "problem": 54, "user": "4f4ff836e4b03ad3f0c10cf4"}, {"code": "(fn [num list]\n\t(let [s (count list)\n\t\tn (int (/ s num))\n\t\tm (* n num)]\n\t\t(map #(subvec (vec list) % (+ % num)) (range 0 m num))))", "problem": 54, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "(fn f [n l]\n  (let [e (take n l)]\n    (if (< (count e) n)\n      nil\n      (cons e (f n (drop n l))))))", "problem": 54, "user": "52091d57e4b0e152394d76f0"}, {"code": "(fn partition-e\n  [n x]\n  (if (< (count x) n) '()\n    (conj (partition-e n (drop n x)) (take n x))))", "problem": 54, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn [x xs]\n  (for [idx (map #(* x %) (range (quot (count xs) x)))]\n    (take x (drop idx xs))))", "problem": 54, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn ! [n coll]\n  (if (< (count coll) n)\n    '()\n    (conj (! n (drop n coll)) \n          (take n coll))))", "problem": 54, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn [n x] \n  (take-while \n   #(= (count %) n) \n   (map \n    #(take n (drop (* n %1) %2)) \n    (range) \n    (repeat x))))", "problem": 54, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn [x xs]\n  (map #(take x (drop (* % x) xs)) (range (int (/ (count xs) x)))))", "problem": 54, "user": "513fab65e4b00f13ea1bd891"}, {"code": "(fn f [n c] (when (>= (count (take n c)) n) (cons (take n c) (lazy-seq (f n (drop n c))))))", "problem": 54, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn fun [n coll]\n\t(if (< (count coll) n) []\n\t\t(let [[f s] (split-at n coll)]\n\t\t\t(concat [f] (fun n s)))))", "problem": 54, "user": "520242bae4b030ee0c5b26e3"}, {"code": "#(first\n  (reduce (fn [[acc sub] el]\n           (let [bumped (conj sub el)]\n             (if (= (count bumped) %)\n               [(conj acc bumped) []]\n               [acc bumped])))\n         [[] []]\n         %2))", "problem": 54, "user": "51f9527fe4b09be9c177e549"}, {"code": "(fn f [n coll]\n  (if (<= n (count coll))\n    (cons (take n coll) (f n (drop n coll)))))", "problem": 54, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn part [n coll]\n  (if (> n (count coll))\n    nil\n    (cons (take n coll) (part n (drop n coll)))))", "problem": 54, "user": "51c8301ee4b07ef393169e4d"}, {"code": "(fn [n s]\n  (reverse \n\t\t(loop [acc '() xs s]\n\t\t\t(if (> n (count xs)) acc \n\t\t\t\t(recur (cons (take n xs) acc) (drop n xs))))))", "problem": 54, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "(fn [n x]\n    (loop [x x part '()]\n        (if (< (count x) n)\n            part\n            (recur (drop n x) (concat part [(take n x)])))))", "problem": 54, "user": "521249f5e4b06aa6d1666ba2"}, {"code": "#((fn [n c t]\n       (if (< (count c) n)\n         t\n         (recur n (drop n c) (conj t (take n c)))))\n    % %2 [])", "problem": 54, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn my-part [n col]\n  (loop [s col acc []]\n    (if (< (count s) n) acc\n      (recur (drop n s) \n             (conj acc (take n s))))))", "problem": 54, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "(fn\n  [num coll]\n  (first (reduce (fn [[res lst i] e]\n                   (if (zero? (mod i num))\n                     [(conj res (conj lst e)) [] (inc i)]\n                     [res (conj lst e) (inc i)]))\n                 [[] [] 1]\n                 coll)))", "problem": 54, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn [x xs]\n  (loop [input  xs\n         output []]\n    (if (< (count input) x)\n      output\n      (recur (drop x input)  (conj output (take x input))))))", "problem": 54, "user": "4f85a75ce4b033992c121c48"}, {"code": "#(filter (fn [m] (= (count m) %1)) (map last (group-by (fn [n] (quot n %1)) %2)))", "problem": 54, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn [x y] \n  (loop [coll y result []]\n    (if (or (empty? coll) (< (count coll) x))\n      (reverse result)\n      (recur (drop x coll) (cons (take x coll) result))\n    )\n  )\n)", "problem": 54, "user": "52016690e4b0b2e020a18f0f"}, {"code": "(fn my-partition [n coll]\n    (loop [coll coll res []]\n      (if (empty? coll)\n        res\n        (recur (drop n coll) (let [nv (take n coll)]\n                               (if-not (= (count nv) n)\n                                 res\n                                 (conj res (vec nv))))))))", "problem": 54, "user": "50c113bee4b096f585049c37"}, {"code": "#(reverse (filter (comp (partial <= %1) count) (map reverse (reduce (fn [acc elem] (if (< (count (first acc)) %1) \n                                          (cons (cons elem (first acc)) (rest acc)) \n                                          (cons (list elem) acc))) \n                         '(()) \n                         %2)\n                 )))", "problem": 54, "user": "521f24ebe4b0e6c71e0c0bcd"}, {"code": "#(loop [xs %2 acc []]\n   (if (> % (count xs))\n     acc\n     (recur (drop % xs) (conj acc (take % xs)))))", "problem": 54, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn partition2 [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (partition2  n (drop n coll)))))", "problem": 54, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "(fn part [n xs]\n  (when (seq xs)\n    (if (< (count xs) n) \n      nil\n     (cons (take n xs) (part n (drop n xs))))))", "problem": 54, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn [lim coll](reverse(loop [lim lim\n         coll coll\n         res '()]\n  (if (< (count (take lim coll)) lim)\n    res\n    (recur  lim (drop lim coll) (conj res (take lim coll))))\n)))", "problem": 54, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "(fn part-seq [n seq]\n  (if (>= (count seq) n)\n    (cons (take n seq) (part-seq n (drop n seq)))))", "problem": 54, "user": "521b339fe4b0c4ef0be83031"}, {"code": "(fn my-partition [n coll]\n  (if (and (seq coll)\n           (>= (count coll) n))\n    (cons (take n coll)\n          (my-partition n (drop n coll)))\n    '()))", "problem": 54, "user": "520693e1e4b0bf4f1882c829"}, {"code": "(fn ps [n args]\n  (loop [args (drop-last (mod (count args) n) args)\n         result []]\n    (if (= (count args) 0)\n      result\n      (recur (drop n args) (conj result (take n args))))))", "problem": 54, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "(fn f [n v]\n  (loop [ans [] vv v]\n    (if (< (count vv) n) \n      ans\n      (recur (conj ans (take n vv)) (drop n vv)))))", "problem": 54, "user": "52196842e4b0890f2f822bfa"}, {"code": "(fn part [x coll] \n  (loop [acc [] , coll coll]\n    (if (< (count coll) x)\n      acc\n      (recur (conj acc (take x coll)) (drop x coll)))))", "problem": 54, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn partition* [want-size xs]\n  (let [long-enough? (fn [p] (= (count p) want-size))\n        replace-last (fn [p r] (assoc p (dec (count p)) r))\n        into-partitions (fn [partitions x]\n                          (let [current-partition (peek partitions)]\n                            (if (long-enough? current-partition)\n                              (conj partitions [x])\n                              (replace-last partitions (conj current-partition x)))))]\n    (filter long-enough? (reduce into-partitions [[]] xs))))", "problem": 54, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn [x col]\n  (map (fn [n]\n         (map #(nth col (+ n %)) (range x)))\n       (take-nth x\n                 (range (count (drop-last (dec x)\n                                          col))))))", "problem": 54, "user": "51891c96e4b04c2714a2670e"}, {"code": "(fn parti [n l] \n  (if (>= (count l) n)\n      (cons (take n l) (parti n (drop n l)))))", "problem": 54, "user": "522454f4e4b01819a2de42d3"}, {"code": "(fn my-partition [n coll]\n  (loop [acc []\n         rest coll]\n    (if (<= n (count rest))\n      (recur (conj acc (take n rest)) (drop n rest))\n      acc)))", "problem": 54, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn [n l]\n  (partition-by #(quot % n)\n                (drop-last (rem (count l) n) l)))", "problem": 54, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn [x y] (filter #(= (count %) x) (vals (group-by #(int (/ % x)) y))))", "problem": 54, "user": "52253004e4b01819a2de42fa"}, {"code": "(fn  [n xs]\n        (loop [y xs ts [] i 0]\n          ( if (>= i  (* n (quot (count xs) n ) ) ) ts\n            \n              (recur (drop n y) (into ts (list(take n y))) (+ i n) ) \n              ) ) )", "problem": 54, "user": "5225b16de4b0d2f5d1e2c0ed"}, {"code": "(fn my-partition\n  [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (my-partition n (drop n coll)))))", "problem": 54, "user": "51701a9ce4b034fe8eaf70f5"}, {"code": "(fn y [x c]\n  (if (or (> x (count c)) (nil? c))\n    nil\n    (cons (take x c) (y x (drop x c)))))", "problem": 54, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn [x coll] (filter #(= (count %) x) (reverse (reduce (fn [cl n] (cons (take x (nthrest coll (* n x))) cl )) '() (range 0 (quot (count coll) x) )))))", "problem": 54, "user": "5230d9bde4b0035e815da397"}, {"code": "(fn [step coll] (letfn [(func [step coll]\n                                      (if (>= (count coll) step)\n                                        (cons (take step coll) (func step (drop step coll)))))]\n                              (func step coll)))", "problem": 54, "user": "514fd753e4b0b449e54b8e00"}, {"code": "(fn [x s]\n  (loop [partitioned '()\n         s s]\n    (if (< (count s) x)\n      (reverse partitioned)\n      (recur (conj partitioned (take x s)) \n             (drop x s)))))", "problem": 54, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn [x rnge]\n    (println x rnge)\n    ((fn [candidate rslt remainder]\n       (println\n        candidate rslt remainder)\n       (if (empty? remainder)\n         (do\n           (println \"empty\")\n           rslt)\n         (if (= (count candidate) (dec x))\n           (recur []\n                  (conj rslt (conj candidate (first remainder)))\n                  (rest remainder))\n           (recur\n            (conj candidate (first remainder))\n            rslt\n            (rest remainder))\n           )\n         )\n       )\n     [] [] rnge\n       )\n    )", "problem": 54, "user": "52213426e4b0e6a83c8925c4"}, {"code": "(fn f [n coll] (if (= n (count (take n coll)))\n                 (cons (take n coll) (f n (drop n coll)))\n                 ()))", "problem": 54, "user": "5216933be4b000d124d989cf"}, {"code": "(fn fifty-four\n  [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (fifty-four n (drop n coll)))))", "problem": 54, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn my-partition [n xs]\n  (cond (< (count xs) n) ()\n        :else (conj (my-partition n (drop n xs)) (take n xs))))", "problem": 54, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn [n x]\n  (loop [x x r []]\n    (if (< (count x) n)\n      r\n      (recur (drop n x) (conj r (take n x))))))", "problem": 54, "user": "5201cf92e4b0b2e020a18f21"}, {"code": "(fn [n c] (loop [ c c\n                acc '()]\n          (if (< (count c) n) (reverse acc)\n            (recur (drop n c) (conj acc (take n c))))))", "problem": 54, "user": "52394c03e4b0d705d026ef09"}, {"code": "(fn part [n s]\n  (if (>= (count s) n)\n  \t(cons (take n s) (part n (drop n s)))\n    '()))", "problem": 54, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn mypartition                                                  \n  [x items]                                                        \n  (loop [acc '() coll items]                                       \n    (if (or (empty? coll)                                          \n            (< (count coll) x))                                    \n      acc                                                          \n      (recur (concat acc (list (take x coll))) (drop x coll))      \n      )                                                            \n    )                                                              \n  )", "problem": 54, "user": "50573ed8e4b0012181721987"}, {"code": "(fn party \n   ([c x] (party [] x c)) \n   ([x y c] \n     (if (or (empty? y) (< (count y) c)) \n       x\n       (party (conj x (take c y)) (drop c y) c))))", "problem": 54, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn it [n xs] (when (>= (count xs) n) (cons (take n xs) (it n (drop n xs)))))", "problem": 54, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "(fn h [n coll]\n  (lazy-seq\n   (let [y (take n coll)\n         z (drop n coll)]\n     (cond\n      (and (seq z) (= n (count y))) (cons y (h n z))\n      (= n (count y)) [y]))))", "problem": 54, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn part [n xs]\n  (let [head (take n xs)]\n    (when (= (count head) n)\n      (cons head (part n (drop n xs))))))", "problem": 54, "user": "523b82efe4b07becd5be21f0"}, {"code": "(fn f \n  [t xs]\n  (filter #(= (count %1) t)\n  (map #(map last %1)\n       (vals \n         (group-by \n           first \n           (map-indexed (fn [idx itm] [(quot idx t) itm]) xs))))))", "problem": 54, "user": "50aa60bee4b056ee01935865"}, {"code": "(fn part [n s]\n\t(let [[h t] (split-at n s)]\n\t\t(if (= n (count h)) \n\t\t\t(cons h (part n t)) nil)))", "problem": 54, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "(fn [n s]\n  (loop [s' s r []]\n    (if\n      (< (count s') n)\n      r\n      (recur (drop n s') (conj r (take n s'))))))", "problem": 54, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(letfn [(t [n x]\n  (let [start (take n x)\n        finish (nthnext x n)]\n   (if (< (count finish) n)\n    [start]\n   (cons start (t n finish )))))] t)", "problem": 54, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn [n s] (filter #(= n (count %)) (partition-by #(int (/ % n)) s)))", "problem": 54, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn part-seq [n seq]\n    (if (or (empty? seq)\n            (< (count seq) n))\n      '()\n      (cons (take n seq) (part-seq n (drop n seq)))))", "problem": 54, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn my-partition [n coll]\n\t(when (seq coll)\n\t  (lazy-seq\n\t   (let [[heads tails] (split-at n coll)]\n\t     (when-not (and (empty? tails)\n\t\t\t    (not (= (count heads) n)))\n\t\t       (cons heads\n\t\t\t     (my-partition n tails)))))))", "problem": 54, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "#(let [seq %2\n        slices %1]\n    (loop [cur-seq seq\n             final-seq '()]\n        (if (empty? cur-seq)\n          (reverse final-seq)\n          (let [slice (take slices cur-seq)]\n            (if (< (count slice) slices)\n              (reverse final-seq)\n              (recur (drop slices cur-seq) (conj final-seq slice)))))))", "problem": 54, "user": "523288fee4b035af41902a88"}, {"code": "(fn [k items]\n  (loop [i 0 l items ans [] current []]\n    (cond\n      (empty? l) ans\n      (= i (dec k)) (recur 0 (rest l) (conj ans (conj current (first l))) [])\n      :else (recur (inc i) (rest l) ans (conj current (first l)))\n    )\n  )\n)", "problem": 54, "user": "51f09f3de4b0274c496158d7"}, {"code": "(fn part [x sequ]\n  (filter #(= (count %1) x) (reduce \n   (fn [sub curr] \n     (if (and (not= sub []) (> x (count (last sub))))\n     (vec (conj (vec (butlast sub)) (vec (conj (last sub) curr))))\n     (vec (conj sub [curr]))\n   ))\n   [] sequ\n   )))", "problem": 54, "user": "5239caa6e4b0d705d026ef27"}, {"code": "(fn ! [n coll] (if (< (count coll) n) (list)\n                 (cons (take n coll) (! n (drop n coll)))))", "problem": 54, "user": "523361d8e4b0f0b72fabf405"}, {"code": "(fn [n coll]\n  (->> coll\n       (map list\n            (let [len (count coll)]\n              (range (- len (mod len n)))))\n       (partition-by #(quot (first %) n))\n       (map (partial map last))))", "problem": 54, "user": "52437703e4b076204b44fabf"}, {"code": "(fn [a col]\n  (->> (map-indexed (fn [i v] [(quot i a) v]) col)\n       (partition-by first)\n       (map #(map second %))\n       (filter #(= a (count %)))))", "problem": 54, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn prtn\n  ([size coll] \n   (prtn size coll []))\n  ([size coll acc] \n   (if (< (count coll) size)\n     acc\n     (recur size (drop size coll) (conj acc (take size coll))))))", "problem": 54, "user": "5245fbbbe4b09dbe66b56183"}, {"code": "(fn [n c]\n    (let [f (comp (juxt (partial take n) (partial drop n)) last)\n          n? (partial = n)]\n      (->> [[] c]\n           (iterate f)\n           next\n           (map first)\n           (take-while (comp n? count)))))", "problem": 54, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn [n xs]\n  (loop [parts [] remaining xs]\n    (if (> n (count remaining))\n      parts\n      (recur (conj parts (take n remaining)) (drop n remaining)))))", "problem": 54, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [n xs]\n  (loop [acc []\n         xs xs]\n    (let [[ys xs'] (split-at n xs)]\n      (if (= n (count ys))\n        (recur (conj acc ys) xs')\n        acc))))", "problem": 54, "user": "52487654e4b05ef8e38e63dc"}, {"code": "(fn [n c] (apply map list (vals (group-by #(mod % n) c))))", "problem": 54, "user": "5230793be4b0035e815da383"}, {"code": "(fn[size s]\n  (loop [remain s result []]\n    (if (>= (count remain) size)\n      (recur (drop size remain) \n             (conj result (take size remain)))\n      result)))", "problem": 54, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(fn f [x y]\n  (if (>= (count y) x)\n    (cons (take x y) (f x (drop x y)))\n    '()\n    ))", "problem": 54, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn [n lst]\n  (loop [xs lst acc []]\n    (if (< (count xs) n)\n      acc\n      (recur (drop n xs) (conj acc (take n xs))))))", "problem": 54, "user": "523c6451e4b07becd5be2222"}, {"code": "(fn [n coll] (loop [s coll r []] (if (< (count s) n) r (recur (drop n s) (conj r (take n s))))))", "problem": 54, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn [a b] (let [r (partition-by #(int (/ % a)) b)] (if (= (mod (count b) a) 0) r (butlast r))))", "problem": 54, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn partit [n a] (when (<= n (count (take n a))) (conj (partit n (drop n a)) (take n a))))", "problem": 54, "user": "5243d9a2e4b076204b44fadf"}, {"code": "(fn f [x coll]\n   (let [data (take x coll)]\n     (if (= x (count data))\n       (cons data (f x (drop x coll)))\n       nil)))", "problem": 54, "user": "506c0a02e4b0eda3100c090d"}, {"code": "(fn [n seq]\n  (reverse (loop [seq seq\n                  acc ()]\n             (let [group (take n seq)]\n               (if (= n (count group))\n                 (recur (drop n seq) (cons group acc))\n                 acc)))))", "problem": 54, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn seqlists [n longlist]\n (loop [buildlist () n1 0]\n   (if (< (/ (count longlist) n) n1)\n      (take (- n1 1) (reverse buildlist))\n     (recur  (conj buildlist\n               (take n (drop (* n n1) longlist)))\n            (inc n1)))))", "problem": 54, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "#(loop [r [] s %2]\n   (if (< (count s) %) r\n     (recur (conj r (take % s)) (nthrest s %))))", "problem": 54, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn f [n coll]\n  (when (<= n (count coll))\n    (concat [(take n coll)] (f n (drop n coll)))))", "problem": 54, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn [n coll] \n    (filter #(= (count %) n)\n              (map \n                (fn [group] (map second group))\n                (partition-by #(int(/ (first %) n))\n                              (map \n                                #(vector %2 %) \n                                coll (range (count coll))\n                                )\n                              )\n                )\n            )\n    )", "problem": 54, "user": "52485723e4b05ef8e38e63d2"}, {"code": "(fn part [n coll]\n  (let [ abort? (> n (count coll))\n        segment (take n coll)]\n\t\t(if abort?\n\t\t     nil \n\t\t\t (cons segment (lazy-seq (part n (drop n coll)))))))", "problem": 54, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn self [n coll]\n  (if (< (count coll) n)\n    nil\n    (cons (take n coll) (self n (drop n coll)))))", "problem": 54, "user": "524b90fae4b09eba1c0223df"}, {"code": "(fn [res n xs]\n  (let [\n        splits (split-at n xs)\n        piece (first splits)\n        remainder (last splits)\n        ]\n\t\t(if (< (count remainder) n)\n      \t\t(conj res piece)\n      \t\t(recur (conj res piece) n remainder)\n      \t)\n    )\n  ) []", "problem": 54, "user": "522d3a16e4b0e26240291d50"}, {"code": "(fn f [n s]\n  (if (>= (count s) n)\n    (cons (take n s)\n          (f n (drop n s)))))", "problem": 54, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [n coll]\n  (loop [r [] c coll]\n    (if (> n (count c))\n      r\n      (recur (conj r (take n c)) (drop n c)))))", "problem": 54, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn cust-part [x coll]\n  (loop [n x seq-list (list (take x coll)) coll (drop x coll)]\n    (if (< (count coll) n)\n      seq-list\n\t  (recur\n  \t    n\n\t    (concat seq-list (list (take n coll)))\n\t    (drop n coll)))))", "problem": 54, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [n coll] \n    (loop [acc []\n           elts coll]\n        (let [newy (take n elts)]\n            (if (> n (count newy))\n                acc\n                (recur (conj acc newy) (drop n elts))))))", "problem": 54, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn f [n x]\n  (if (and (seq x) (>= (count x) n))\n  \t(cons (take n x) (lazy-seq (f n (drop n x))))\n    []\n    )\n  )", "problem": 54, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn [a xs]\n  (loop [res [] xs xs]\n    (if (< (count xs) a)\n      res\n      (recur (concat res [(take a xs)]) (drop a xs)))))", "problem": 54, "user": "52525a0ee4b0541d1855b8a2"}, {"code": "(fn\n  [n coll]\n  (get (group-by count (vals (group-by #(int (/ % n)) coll))) n))", "problem": 54, "user": "52527192e4b0541d1855b8af"}, {"code": "(fn [x ys] (remove (fn [zs] (< (count zs) x)) (partition-by #(int (/ % x)) ys)))", "problem": 54, "user": "510c123be4b078ea7192110e"}, {"code": "(fn part [n coll]\n  (if (< (count coll) n)\n    ()\n    (cons (take n coll)\n          (lazy-seq (part n (drop n coll))))))", "problem": 54, "user": "519db0ede4b037b32803f9b9"}, {"code": "(fn part [n l] (let [zum (- (count l) n)] (if (and (not(empty? l)) (>= (count l) n) ) (cons (take n l)\n                                                                                        (if (>= zum 0) (part n (take-last zum l)))))))", "problem": 54, "user": "5245d29ae4b09dbe66b56174"}, {"code": "(fn [n s & acc]\n  (if (< (count s) n)\n    (reverse acc)\n    (recur n (drop n s) (conj acc (take n s)))))", "problem": 54, "user": "525431dfe4b0541d1855b970"}, {"code": "(fn [n coll]\n  (loop [result [] coll coll] \n    (let [part (take n coll)]\n      (if (= n (count part)) \n        (recur (conj result part) (drop n coll))\n        result))))", "problem": 54, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn part [n x]\n  (if (< (count x) n)\n    '()\n    (cons (take n x) (part n (drop n x)))\n    )\n  )", "problem": 54, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn f [n s] (if (< (count s) n) '() (cons (take n s) (f n (drop n s)))))", "problem": 54, "user": "525b0b51e4b0cb4875a45d01"}, {"code": "(fn doit [n s] (if (empty? (drop (dec n) s)) '() (cons (take n s) (lazy-seq (doit n (drop n s))))))", "problem": 54, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn f [n xs]\n  (if (< (count xs) n) '()\n    (conj (f n (drop n xs)) (take n xs))))", "problem": 54, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "(fn [n xs]\n    (loop [acc [] xs xs]\n      (if (>= (count xs) n)\n        (recur (conj acc (take n xs)) (drop n xs))\n        acc)))", "problem": 54, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn my-partition [n xs]\n  (when (>= (count xs) n)\n    (cons (take n xs) (my-partition n (drop n xs)))))", "problem": 54, "user": "51269362e4b083bb8f88cf09"}, {"code": "(fn myPartition\n  [n coll]\n  (loop [result [] newColl coll]\n    (if (< (count newColl) n)\n      result\n      (recur (conj result (take n newColl)) (drop n newColl)))))", "problem": 54, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "(fn spl\n   ([n lst]\n      (spl n lst []))\n   ([n lst acc]\n      (cond (or (empty? lst) (< (count lst) n))  acc\n            :else (recur n (drop n lst) (conj acc (take n lst))))))", "problem": 54, "user": "524f213be4b0541d1855b7ff"}, {"code": "(fn [n l] (loop [r '() c l] (if (> n (count c)) (reverse r) (recur (conj r (take n c)) (drop n c)))))", "problem": 54, "user": "51f2851fe4b0210f90e7454b"}, {"code": "(fn par [n coll]\n   (if (< (count coll) n)\n     '()\n     (cons (take n coll) (par n (drop n coll)))))", "problem": 54, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(fn [n xs]\n    (reverse (loop [xs xs c 1 list '() result '()]\n      (if (empty? xs)\n        result\n        (if (= c n)\n          (recur (rest xs) 1 '() (cons (reverse (cons (first xs) list)) result))\n          (recur (rest xs) (inc c) (cons (first xs) list) result))))))", "problem": 54, "user": "526302eee4b03e8d9a4a70a2"}, {"code": "(fn part [x coll] \n  (if\n   (< (count (take x coll)) x) nil\n   (cons (take x coll) (part x (drop x coll)))))", "problem": 54, "user": "525aa499e4b0cb4875a45cf7"}, {"code": "(fn span [n seq]\n  (let [t (take n seq)\n        d (drop n seq)]\n    (if (< (count t) n) \n      ()\n      (cons t (span n d)))))", "problem": 54, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "#(loop [stock '() next %2]\n     (let [-add (take % next)]\n       (if (= (count -add) %)\n         (recur (conj stock -add) (drop %  next))\n         (reverse stock)\n         )\n       ))", "problem": 54, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn part [n ls]\n  (if (<= n (count ls))\n    (cons (take n ls) (part n (drop n ls)))))", "problem": 54, "user": "51df825de4b01188f062752b"}, {"code": "(fn [n xs]\n  (let [v (vec xs)]\n  (reduce\n    (fn [acc x]\n      (conj acc (subvec v x (+ x n))))\n    []\n    (range 0 (inc (- (count xs) n)) n))))", "problem": 54, "user": "526e5be8e4b03e8d9a4a731c"}, {"code": "(fn part [n s]\n    (loop [result [] l s]\n      (if (< (count l) n)\n             result\n             (recur (conj result (take n l)) (drop n l)))))", "problem": 54, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn [n l]\n(take-while #(= n (count %)) (map #(take n %) (iterate (partial drop n) l)))\n)", "problem": 54, "user": "52593207e4b0cb4875a45cd3"}, {"code": "#(loop [xs %2 res []]\n    (if (< (count xs) %) res\n      (recur (drop % xs) (conj res (take % xs)))))", "problem": 54, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn my-partition [n coll]\n  (loop [res [coll]\n         end coll\n         size (count end)]\n    (if (< size n)\n      (pop res)\n      (if (= size n)\n        res\n        (let [new-res (into (pop res) (split-at n end))\n              new-end (peek new-res)\n              new-size (count new-end)]\n          (recur new-res new-end new-size))))))", "problem": 54, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn part [n coll]\n  (when (>= (count coll) n)\n    (cons (take n coll) (part n (drop n coll)))))", "problem": 54, "user": "50d882d4e4b01f0871336e69"}, {"code": "(fn [n s]\n  (loop [s s\n         r []]\n    (let [d (drop n s)]\n     (if-not (seq d)\n       (if (= (count s) n)\n         (conj r (take n s))\n         r)\n       (recur d (conj r (take n s)))))))", "problem": 54, "user": "4f90dc2ae4b0dcca54ed6c92"}, {"code": "(fn p054\n  ([p lst] (p054 [] p lst))\n  ([acc p lst] (if (< (count lst) p) acc\n                 (p054 (conj acc (take p lst)) p (drop p lst)))))", "problem": 54, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [n coll] \n  (loop [c coll result []] \n    (if (or (empty? c) (not= n (count (take n c))))\n      result\n      (recur (drop n c) (conj result (take n c))))))", "problem": 54, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [n coll]\n  (loop [col coll res []]\n    (if (>= (count col) n)\n      (recur (drop n col)\n                (conj res (take n col)))\n      res)))", "problem": 54, "user": "523bde95e4b07becd5be2202"}, {"code": "(fn [x y]\n    (let [out (reverse\n                (reduce\n                  (fn [[a & as :as stack] i]\n                    (if (= (count a) x)\n                      (if (nil? as)\n                        (conj (reverse a) (list i))\n                        (if (sequential? (first as))\n                          (conj as (reverse a) (list i))\n                          (conj (list as) (reverse a) (list i))\n                        )\n                      )\n                      (conj as (conj a i))\n                    )\n                  )\n                  ()\n                  y\n                )\n              )\n          ]\n      (concat (drop-last out) (if (= (count (last out)) x) (list (reverse (last out))) nil))\n    )\n  )", "problem": 54, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn f [n seq]\n  (if (< (count seq) n)\n    nil\n    (cons (take n seq)\n          (f n (nthrest seq n)))))", "problem": 54, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn [n xs]\n  (loop [res [] sq (seq xs)]\n    (if (>= (count sq) n)\n      (recur (conj res (take n sq)) (drop n sq))\n      res      \n      )\n    )\n  )", "problem": 54, "user": "522f483ce4b032bbe342415a"}, {"code": "(fn partition2 [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (partition2 n (drop n coll)))))", "problem": 54, "user": "5276aa0de4b03e8d9a4a74ea"}, {"code": "(fn partition-sequence [x colls]\n  (loop[result '()\n        colls colls]\n    (if(< (count colls) x)\n      result\n      (recur (concat result (list (first (split-at x colls))))\n             (second (split-at x colls))))))", "problem": 54, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn ppart [n l]\n  (if (< (count l) n)\n    '()\n    (cons ((split-at n l) 0)\n          (ppart n ((split-at n l) 1)))))", "problem": 54, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn partition-seq [x s]\n      (when (and (not (empty? s)) (>= (count s) x)) (cons (take x s)  (partition-seq x (drop x s)))))", "problem": 54, "user": "52452225e4b0d8acf9ed6ae6"}, {"code": "(fn mp[n xs] (if (>= (count xs) n)\n                    (conj (mp n (drop n xs) ) (take n xs) )\n                    () )  )", "problem": 54, "user": "5271b940e4b03e8d9a4a73fb"}, {"code": "#(apply map vector (for [n (range %1)] (take-nth %1 (drop n %2))) )", "problem": 54, "user": "518c5236e4b087e178201de0"}, {"code": "(fn a [n col] (loop [c col o []] (if(< (count c) n)(identity o)(recur (drop n c) (conj o (take n c))))))", "problem": 54, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn [n src] \n   (reverse(loop [x src y '()]\n     (if (empty? x) y\n       (let [spl (split-at n x) p1 (first spl) p2 (last spl)]\n \t\t  (cond \n           (> n (count p2)) (conj y p1) \n           (= n (count p2)) (conj y p1 p2) \n           :else (recur p2 (conj y p1))\n           )\n        )\n     )\n   )) \n )", "problem": 54, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn [n xs]\n  (loop [ys xs ret '()]\n    (if (and (seq ys) (>= (count ys) n))\n      (recur (drop n ys) (conj ret (take n ys)))\n      (reverse ret))))", "problem": 54, "user": "51ef31dfe4b0871fa145d9a0"}, {"code": "(fn f [n coll]\n  (if (< (count coll) n)\n    []\n    (cons (take n coll) (f n (drop n coll)))))", "problem": 54, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn part [n c]\n  (if (< (count c ) n)\n    nil\n   (concat (list (take n c)) (part n (drop n c)))\n    ))", "problem": 54, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn my-partition [n col]\n  (if (< (count col) n)\n    (empty col)\n    (conj\n     (my-partition n (drop n col))\n     (take n col))))", "problem": 54, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn [x,start]\n  (loop [rv [], rge start]\n    (let [cur (take x rge)]\n        (if (= x (count cur))\n          (recur (conj rv cur) (drop x rge))\n          rv\n        )\n     )\n  ) \n)", "problem": 54, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn [ n sq ]\n (loop [s [] r sq ]\n        (if (>= (count r) n) \n                (recur (conj s (take n r)) (drop n r))  \n                s)) )", "problem": 54, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn part [n s]\n  (if (< (count s) n)\n    '()\n    (cons (take n s) (lazy-seq (part n (drop n s))))))", "problem": 54, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn pt [n s] \n  (lazy-seq (when (>= (count s) n) \n                  (cons (take n s) (pt n (drop n s))))))", "problem": 54, "user": "519ef784e4b087743fad2198"}, {"code": "(fn f [n c]                               \n  (if (>= (count c) n)                    \n    (conj (f n (drop n c)) (take n c)) ) )", "problem": 54, "user": "4df20dda535d08e6dec9fe23"}, {"code": "(fn [n a-seq]\n  (->> (group-by #(quot % n) a-seq)\n       vals\n       (remove #(> n (count %)))))", "problem": 54, "user": "52890634e4b0239c8a67ae5e"}, {"code": "(fn part[n s](let [tail (drop n s)]\n                 (if (>= (count tail) n)\n                   (cons (take n s) \n                         (lazy-seq (part n tail)))\n                   (list (take n s)))\n              )\n )", "problem": 54, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "(fn partition2 [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (partition2 n (drop n coll)))))", "problem": 54, "user": "527dc2aee4b0757a1b17138d"}, {"code": "(fn [n coll] (filter #(= (count %) n) (vals (group-by #(quot % n) coll))))", "problem": 54, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn part [n coll]\n  (when-let [s (seq coll)]\n    (let [p (doall (take n s))]\n      (when (= n (count p))\n        (cons p (part n (nthrest s n)))))))", "problem": 54, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn inter [n coll]\n   (lazy-seq\n     (cond\n       (empty? coll) nil\n       (not= n (count (take n coll))) nil\n       :default (cons (take n coll)\n                      (inter n (drop n coll))))))", "problem": 54, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn [n coll]\n  (loop [coll coll acc []]\n    (let [[start end] (split-at n coll)]\n      (if (empty? end)\n        (if (= (count start) n) (conj acc start) acc)\n        (recur end (conj acc start))))))", "problem": 54, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn pati [n x] (cons (take n x) (if (< (count x) (* n 2)) () (pati n (drop n x)))))", "problem": 54, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn my-partition [n coll]\n    (when-let [s (seq coll)]\n      (filter #(= n (count %))  (cons (take n coll) (my-partition n (drop n coll))))))", "problem": 54, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "(fn fun\n  [x coll]\n((fn partition2\n  [n step coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [p (doall (take n s))]\n       (when (= n (count p))\n         (cons p (partition2 n step (nthrest s step)))))))) x x coll))", "problem": 54, "user": "5289bba9e4b0239c8a67ae69"}, {"code": "(fn my-partition [n c] (let [[x y] (split-at n c)]\n  (if-not (seq y) (if (< (count x) n) nil (list x)) (cons x (my-partition n y)))))", "problem": 54, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn part [n s] (if (< (count s) n) () (cons (take n s) (part n (drop n s)))))", "problem": 54, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn [n s] (apply map list (map #(take-nth n (drop % s)) (range n))))", "problem": 54, "user": "528e95efe4b0239c8a67aee2"}, {"code": "(fn [num [& col]]\n  ; use vec to convert lazyseq to persisten vector\n (for [start (take (quot (count col) num) (range 0 (count col) num))] (subvec (vec col)  start (+ start num)))\n)", "problem": 54, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn [n coll]\n  (loop [c coll\n         r []]\n    (if (> n (count c))\n      r\n      (recur (drop n c) (conj r (take n c))))))", "problem": 54, "user": "51e38568e4b0c611d6113e43"}, {"code": "(fn fuckface [n coll]\n  (when (<= n (count coll)) \n   \t(cons (take n coll) (fuckface n (drop n coll)))))", "problem": 54, "user": "50928ecfe4b097f48cc38570"}, {"code": "(fn p54-partition-a-sequence [x s]\n  (let [p (reduce\n           (fn [m n] (if (< (count (last m)) x)\n                      (conj (vec (butlast m)) (conj (last m) n))\n                      (conj (vec m) [n])))\n           [[]] s)\n        ]\n    (filter #(= x (count %)) p)))", "problem": 54, "user": "526d6968e4b03e8d9a4a72d9"}, {"code": "(fn f [c s]\n  (if (< (count s) c)\n    ()\n    (cons (take c s) (f c (drop c s)))))", "problem": 54, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "#(map (fn [c] (take % (drop (* % c) %2)))\n      (range 0 (quot (count %2) %)))", "problem": 54, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn prttn\n  [chunk-size input]\n  (loop\n      [queue input\n       ;in-progress '()\n       result []]\n    (if (empty? queue)\n      result\n      (if (< (count queue) chunk-size)\n        result\n        (recur\n         (drop chunk-size queue)\n         (conj result (take chunk-size queue)))))))", "problem": 54, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "(fn [n coll]\n  (loop [s coll acc []]\n    (cond\n     (empty? s) acc\n     (< (count s) n) acc\n     :else (recur (drop n s) (conj acc (take n s))\n                  )\n     )\n    )\n  )", "problem": 54, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn f [x y] (if (> (count y) x)  (cons (take x y) (f x (drop x y)) ) (if (= (count y) x)  (vector (take x y))) ))", "problem": 54, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "(fn p [n coll]\n  (when (>= (count coll) n)\n    (cons (take n coll)\n          (p n (drop n coll)))))", "problem": 54, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "(fn part [n s]\n  (if (< (count s) n) nil\n      (cons (take n s) (part n (drop n s)))))", "problem": 54, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn f [n coll] \n   (let [t (take n coll)] \n     (if (>= (count coll) (* 2 n)) \n       (into [t] (f n (drop n coll))) \n       [t])))", "problem": 54, "user": "509fe759e4b08df8156e9e43"}, {"code": "(fn tf [n xs]\n   (if (>= (count xs) n)\n     (cons (take n xs)\n             (tf n (drop n xs)))\n    ))", "problem": 54, "user": "52a04f0ee4b04e0c58e87bc1"}, {"code": "(fn [x s] (for [i (take (quot (count s) x) (iterate (partial + x) 0))] (filter #(and (<= i %) (> (+ i x) %)) s)))", "problem": 54, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn [n s] (for [x (range (int (/ (count s) n)))] (take n (nthnext s (* x n)))))", "problem": 54, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn [n s]\n  (loop [s (seq s)\n         r []]\n    (let [front (take n s)]\n      (if (= n (count front))\n        (recur (drop n s) (conj r front))\n        r))))", "problem": 54, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn solution [n s]\n  (loop [cs s res [] curr []]\n    (cond\n     (= (count curr) n) (recur cs (conj res curr) [])\n     (empty? cs) res\n     :else (recur (rest cs) res (conj curr (first cs))))))", "problem": 54, "user": "5226f8e9e4b04e78ff2e199a"}, {"code": "(fn [n s]\n  (loop [out [] in s]\n    (if (>= (count in) n)\n      (recur (conj out (take n in)) (drop n in))\n      out)))", "problem": 54, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "(fn part [size coll]\n  (loop [lst coll\n         acc []]\n\n    (if (empty? lst)\n      acc\n      (let [mini-part (take size lst)]\n        (if (= size (count mini-part))\n          (recur (drop size lst) (conj acc mini-part))\n          (recur (drop size lst) acc))))))", "problem": 54, "user": "52a6ed15e4b0c58976d9ac0a"}, {"code": "(fn par [n xs]\n  (if (< (count (drop n xs)) n)\n    (list (take n xs))\n  \t(concat (list (take n xs)) (par n (drop n xs)))))", "problem": 54, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn [n s]\n  (filter #(= n (count %)) (partition-by #(- % (mod % n)) s)))", "problem": 54, "user": "51929214e4b08962174cf74c"}, {"code": "(fn parti [n l]\n  (let [f (fn [acc n l]\n            (if (empty? l ) (reverse acc)\n              (recur (conj acc (take n l)) n (drop n l))))]\n       (filter #(= n (count %)) (f '() n l))))", "problem": 54, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn p [n s]\n  (let [[xs ys] (split-at n s)]\n    (if (= n (count xs))\n      (cons xs (p n ys))\n      nil\n      )\n    )\n  )", "problem": 54, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn [n s]\n  (loop [in s\n         out []]\n    (let [g (take n in)]\n      (if (< (count g) n)\n        out\n        (recur (drop n in) (conj out g))))))", "problem": 54, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn partition* [n coll]\n  (if (< (count coll) n)\n    nil\n    (cons (take n coll) (partition* n (drop n coll)))))", "problem": 54, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "(fn [n l]\n  (->> (group-by #(quot % n) l)\n       vals \n       (remove #(< (count %) n))))", "problem": 54, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn my-partition\n\t[n coll]\n\t(let [head (take n coll)]\n\t  (if (>= (count head) n)\n\t    (cons head (lazy-seq (my-partition n (drop n coll)))))))", "problem": 54, "user": "51937eb3e4b04df54c098022"}, {"code": "(fn partition- [n s]\n  (if (>= (count s) n)\n    (cons (take n s) (partition- n (drop n s)))\n    '()))", "problem": 54, "user": "4ef9b021535dced4c769f269"}, {"code": "(fn part \n  ([size list] (part size list []))\n  ([size list acc]\n    (if \n      (< (count list) size)\n      acc\n      (recur size (drop size list) (conj acc (take size list))))))", "problem": 54, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn separate\n  [many col]\n  \n  (map reverse \n       (filter #(= (count %) many) \n               (reductions (fn [colin newnum]\n                             (if (< (count  colin) many)\n                               (conj colin newnum)\n                               (list newnum)\n                               )\n                             ) (list) col\n                           )))\n  )", "problem": 54, "user": "4fbd6210e4b081705acca303"}, {"code": "(fn [n s]\n  (loop [r [] col s]\n    (let [l (take n col)]\n      (if (or (empty? col) (not (= (count l) n)))\n      \tr\n      \t(recur (conj r (take n col)) (drop n col))))))", "problem": 54, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "(fn [n s]\n    (filter #(= (count %) n) (map #(take n (drop (* n %) s)) (range (/ (count s) n)))))", "problem": 54, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "#(filter (fn [x] (= (count x) %1)) (reverse (map reverse (reduce (fn [l r]\n            (let [grouping (first l)]\n              (if (or (nil? (first grouping)) (< (count grouping) %1))\n                (conj (pop l) (conj grouping r))\n                (conj l (list r))\n            ))\n        ) (list '()) %2))))", "problem": 54, "user": "52b1d41ce4b0c58976d9ace6"}, {"code": "(fn p [n coll]\n  (if (< (count coll) n)\n    '()\n    (cons (take n coll) (p n (drop n coll)))))", "problem": 54, "user": "52a55adee4b0c58976d9abe7"}, {"code": "#(last \n   (take (+ 1 (quot (count %2) %1)) \n         (iterate (fn [sq] \n                    (concat \n                     (drop %1 sq) \n                     (list (take %1 sq)))) (drop-last (mod (count %2) %1) %2))))", "problem": 54, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "(fn [n coll] (loop [c coll a []] (if (> n (count c)) a (recur (drop n c) (conj a (take n c))))))", "problem": 54, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn [n l] (filter #(= (count %) n) (for [x (range 0 (/ (count l) n))] (take n (drop (* n x) l)))))", "problem": 54, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "(fn [n xs]\n  (loop [acc [], left xs]\n    (if (> n (count left))\n      acc\n      (recur (conj acc (take n left))\n             (drop n left)))))", "problem": 54, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "(fn [div rng]\n  (let [cnt (count rng)\n        grps (* (quot cnt div) div)\n        prt-rng (take (* (quot cnt grps) grps) rng)]\n    (map #(map second %) (vals (group-by first (map-indexed (fn [a b] [(quot a div) b]) prt-rng))))))", "problem": 54, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "#(loop [r [] c %2] (if (>= (count c) %1) (recur (conj r (take %1 c)) (drop %1 c)) r))", "problem": 54, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn f [n xs]\n       (let [rs (take n xs)]\n         (if (= (count rs) n)\n           (cons rs (f n (drop n xs)))\n           ())))", "problem": 54, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "#(loop [x 0 y () z %2] \n    (if (= x (quot (count %2) %)) \n      (reverse y)\n      (recur (inc x) (conj y (take % z)) (drop % z))))", "problem": 54, "user": "5236cd89e4b0e010857b4e45"}, {"code": "(fn [n s]\n  (loop [s s\n         res '()\n         cur '()]\n    (if (empty? s)\n      (reverse res)\n      (if (= (dec n) (count cur))\n        (recur (rest s) (cons (reverse (cons (first s) cur)) res) '())\n        (recur (rest s) res (cons (first s) cur))))))", "problem": 54, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn test [n lst]\n  (let [x (reduce (fn [acc i] (if (< (- n 1) (count (peek acc)))\n\t\t\t  (conj acc [i])\n\t\t\t(assoc acc (- (count acc) 1) (conj (peek acc) i))))\n\t  [[]]\n\t  lst)] \n    (if (> n (count (peek x)))\n\t(pop x)\n      x\n    )))", "problem": 54, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "(fn my-partition[n x](\n                         (fn my-part-inner[xin output] (if (<= n (count xin))\n                                                         (my-part-inner (drop n xin) (concat output (vector (take n xin))))\n                                                         output\n                                                         )) x (seq nil)\n                         ))", "problem": 54, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn [x ys]  \n  (loop [acc '() xs ys]\n    (if (or (nil? xs) (> x (count xs)))\n      acc\n      (recur (concat acc (list (take x xs))) (nthnext xs x)))))", "problem": 54, "user": "52741177e4b03e8d9a4a749b"}, {"code": "(fn partition4j\n  [n xs]\n  (letfn [(partitionall [n xs]\n            (if (or (empty? xs) (nil? xs))\n              xs\n              (cons (take n xs) (partitionall n (nthrest xs n)))))]\n    (filter #(= (count %) n) (partitionall n xs))))", "problem": 54, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn my-partition\n  [c xs]\n  (loop [xs xs\n         result []]\n    (if (< (count xs) c)\n      result\n      (recur (drop c xs) \n             (conj result (take c xs))))))", "problem": 54, "user": "5287f34ee4b0239c8a67ae43"}, {"code": "#(loop [res [] n % in %2]\n   (if (> n (count in))\n     res\n     (let [in (split-at n in)]\n       (recur (conj res (first in)) n (last in))\n     )\n   )\n )", "problem": 54, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn my-partition [x coll]\n  (let [[t d] (split-at x coll)]\n    (when (= (count t) x)\n      (cons t (my-partition x d)))))", "problem": 54, "user": "52976262e4b02ebb4ef75041"}, {"code": "(fn [n s]\n  (reverse\n    (let [groups (reduce\n                   (fn [x y]\n                     (if (< (count (first x)) n)\n                       (cons (conj (first x) y) (rest x))\n                       (cons [y] x)))\n                   (list [])\n                   s)]\n      (if (< (count (first groups)) n) (rest groups) groups))))", "problem": 54, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn party [n l]\n\t(loop [rv [] ll l]\n\t\t(if (>= (count ll) n)\n\t\t\t(recur (conj rv (take n ll)) (drop n ll))\n\t\t\trv\n\t\t)\n\t)\n)", "problem": 54, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "(fn part ([n xs] (part [] n xs))\n         ([acc n xs] (if (empty? xs)\n                         (filter #(= (count %) n) acc)\n                         (let [s (split-at n xs)\n                               fst (first s)\n                               snd (second s)]\n                         \t(recur (conj acc fst) n snd)\n                         )\n                     )\n         )\n)", "problem": 54, "user": "52bf8e35e4b07a9af579233a"}, {"code": "(fn f [n l] (if (< (count l) n) [] (lazy-cat [(take n l)] (f n (drop n l)))))", "problem": 54, "user": "52bf29fde4b07a9af579232e"}, {"code": "(fn [limit lizt]\n    (loop [n []\n           old lizt]\n      (if (< (count old) limit)\n        n\n        (recur (conj n (take limit old)) (drop limit old)))))", "problem": 54, "user": "52bdd135e4b07a9af579230a"}, {"code": "(fn mypart [n xs]\n  (loop [xs xs\n         result []]\n    (if (< (count xs) n)\n      result\n      (recur (drop n xs) (conj result (take n xs))))))", "problem": 54, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn [n col]\n  (letfn [(f [a xs] (if (< (count xs) n)\n                      a\n                      (f (conj a (take n xs)) (drop n xs))))]\n    (f [] col)))", "problem": 54, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "(fn my-partition [n a-seq]\n   (if (seq? a-seq)\n     \n     (let [len (count a-seq)]\n\t  \t (cond (> len n) (cons (take n a-seq) (my-partition n (drop n a-seq)))\n    \t        (= len n) (list (take n a-seq))\n        \t    :else nil)\n     )\n     nil\n    )\n)", "problem": 54, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn [n coll]\n  (loop [elt (vector (first coll)), z [], i 0, rem-coll (rest coll)]\n    (if (= i (count coll))\n      z\n      (if (zero? (mod (inc i) n))\n        (recur (vector (first rem-coll)) (conj z elt) (inc i) (rest rem-coll))\n        (recur (conj elt (first rem-coll)) z (inc i) (rest rem-coll))))))", "problem": 54, "user": "523f1245e4b01c266ffa7f95"}, {"code": "#((fn [n xs rs]\n        (if (> n (count xs)) rs\n            (recur n (drop n xs) (conj rs (take n xs)))))\n      % %2 []\n      )", "problem": 54, "user": "52bbe6e1e4b07a9af57922ef"}, {"code": "(fn f [r c] (if (< (count (drop r c)) r) (list (take r c)) (cons (take r c) (f r (drop r c)))))", "problem": 54, "user": "5167d60de4b0c5a4140a3098"}, {"code": "#(loop [li %2,\n        result []]\n  (if (< (count li) %) result\n   (recur (drop %1 li) (conj result (take %1 li)))))", "problem": 54, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn [n lst]\n  (map\n   #(take n (drop (* n %) lst))\n   (range (quot (count lst) n))))", "problem": 54, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn solution [k s]\n  (if (> k (count s))\n    '()\n    (cons (take k s) (solution k (drop k s)))\n  )\n)", "problem": 54, "user": "52b49aebe4b0c58976d9ad2b"}, {"code": "#(loop [coll %2\n        part []]\n   (if (< (count coll) %1)\n     part\n     (recur (second (split-at %1 coll)) (conj part (first (split-at %1 coll))))))", "problem": 54, "user": "52a5f1e6e4b0c58976d9abf4"}, {"code": "(fn f [c s]\n          (lazy-seq\n           (let [nxt (take c s)]\n             (when (and (seq s) (= (count nxt) c))\n               (cons (take c s) (f c (drop c s)))))))", "problem": 54, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "(fn ptn [n s]\n  (loop [s s acc []]\n    (if (< (count s) n)\n      acc\n      (recur (drop n s) (conj acc (take n s)))\n      ))\n  )", "problem": 54, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn\n  [n vs]\n  (let [c (quot (count vs) n)\n        vs (vec vs)]\n    (map #(subvec vs (* n %) (* n (inc %)))\n         (range c))))", "problem": 54, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn part[n l] \n           (when (<= n (count l))\n              (cons (take n l) (part n (drop n l)))))", "problem": 54, "user": "52c580c2e4b0c2d177d620f5"}, {"code": "(fn [n col]\n (filter #(= n (count %1)) \n  (for [i (range 0 (count col) n)]\n    (take n (drop i col)))))", "problem": 54, "user": "52c58440e4b0c2d177d620f7"}, {"code": "(fn f [a b] (if (> a (count b)) '() (cons (take a b) (f a (drop a b)))))", "problem": 54, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn partition-a-sequence [n c]\n  (let [r (reduce \n\n           (fn [[a,p] i]\n             (if (= (count p) n) \n               [(conj a p),(conj [] i)] \n               [ a, (conj p i)])) \n           \n           \n           [[],[]]\n           c)]\n\n    (if (= 0 (rem (count c) n)) \n      (conj (first r) (last r)) \n      (first r))))", "problem": 54, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn part [n coll]\n  (let [front (take n coll)\n        tail (drop n coll)]\n    (if (< (count front) n)\n      []\n      (cons front\n            (part n tail)))))", "problem": 54, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "(partial (fn [a n s]\n  (if (< (count s) n)\n    (reverse a)\n    (recur (cons (take n s) a) n (drop n s)))) ())", "problem": 54, "user": "4f4fac2ae4b03ad3f0c10ce5"}, {"code": "(fn [x col] (reduce (fn [a b] (if (= x (count (last a))) (conj a [b]) (assoc-in a [(dec (count a)) (count (last a))] b))) [[]] (drop-last (rem\n (count col) x) col)))", "problem": 54, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn [n col]\n  (loop [r []  c col]\n    (if (< (count c) n)\n      r\n      (recur (conj r (take n c)) (drop n c)))))", "problem": 54, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "(fn [n xs]\n  (filter #(= n (count %))\n          (vals (apply merge-with into (map-indexed #(hash-map (quot % n) [%2]) xs)))))", "problem": 54, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn f\n  ([n coll] \n     (when (>= (count coll) n)\n       (concat [(take n coll)]\n               (lazy-seq (f n (drop n coll)))))))", "problem": 54, "user": "52cc582ae4b07d0d72b27362"}, {"code": "(fn break-seq [n lst]\n    ((reduce (fn [[acc curr] ele] \n        (if (= (count curr) (- n 1))\n            [(conj acc (conj curr ele)) []]\n            [acc (conj curr ele)]))\n    [[] []] lst) 0)\n)", "problem": 54, "user": "52c17e42e4b07a9af5792367"}, {"code": "#(loop [c (drop %1 %2)\n         x (take %1 %2)\n         r []]\n   (if (= %1 (count x))\n     (recur (drop %1 c) (take %1 c) (conj r x))\n     r)\n   )", "problem": 54, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "(fn part [n xs]\n  (if (> n (count xs))\n    ()\n    (cons (take n xs) (part n (drop n xs)))))", "problem": 54, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn partition* [n coll]\n  (let [part (take n coll) remainder (drop n coll)]\n    (if (= n (count part))\n      (lazy-seq (cons part (partition* n remainder))))))", "problem": 54, "user": "52d0902ee4b07d0d72b273bd"}, {"code": "(fn p [n xs]\n  (if (< (count xs) n)\n    nil\n    (lazy-seq  (cons (take n xs) (p n (drop n xs))))))", "problem": 54, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "(fn partition2 [n aseq]\n\t(loop [res [] aseq aseq]\n\t\t(if (< (count aseq) n)\n\t\t\tres\n\t\t\t(recur (conj res (take n aseq))\n\t\t\t\t(drop n aseq))\n\t\t\t)))", "problem": 54, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn meu-part [n s]\n     (when (>= (count s) n)\n       (cons (take n s) (meu-part n (drop n s)))))", "problem": 54, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn r [n s]\n  (if (< (count s) n)\n    '()\n    (cons (take n s) (r n (drop n s)))))", "problem": 54, "user": "525cc137e4b0cb4875a45d46"}, {"code": "(fn __ [n coll]\n  (let [raw (group-by #(quot % n) coll)]\n    (for [i (range (quot (count coll) n))]\n      (raw i)\n    )))", "problem": 54, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn [groupsize, thelist] (\n\tloop [l thelist partitions '()]\n\t\t(if (empty? l)\n\t\t\tpartitions\n\t\t\t(recur \n\t\t\t\t(drop groupsize l)\n\t\t\t\t(->> \n\t\t\t\t\t(take groupsize l) (list) (concat partitions)\n\t\t\t\t\t(filter #(= (count %) groupsize))\n\t\t\t\t\t  )))\n))", "problem": 54, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "#(loop [final [], init %2]\n   (if (< (count init) %1)\n     final\n     (recur (conj final (take %1 init)) (drop %1 init))))", "problem": 54, "user": "52d340ebe4b099d49816f0c1"}, {"code": "(fn my-partition [num s]\n  (let [[x y] (split-at num s)]\n    (if (<= num (count x))\n      (cons x (my-partition num y)))))", "problem": 54, "user": "52d02380e4b07d0d72b273b7"}, {"code": "(fn f [n l]\n  (letfn\n    [(wop [start end result]\n          (if (< start end)\n            (wop (+ start 1) end (conj result (nth l start)))\n            result))\n     (main-wop [i result]\n               (if (< i (quot (count l) n))\n                 (main-wop (+ i 1) (conj result (wop (* i n) (+ (* i n) n) [])))\n                 result))]\n    (main-wop 0 [])))", "problem": 54, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "(fn part[num s]\n  (let [[x y] (split-at num s)]\n    (if (<= num (count x)) (cons x (part num y)))))", "problem": 54, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "(fn partition2 [n coll]\n  (lazy-seq\n    (when (>= (count coll) n)\n      (cons (take n coll) (partition2 n (drop n coll))))))", "problem": 54, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn [n coll]\n      (for [x (range (int (/ (count coll) n)))]\n        (take n (drop (* n x) coll))))", "problem": 54, "user": "51e28063e4b08e53a149f0f2"}, {"code": "#(loop [xs %2\n               n %1\n               acc []]\n          (if (< (count xs) n)\n            acc\n            (recur (drop n xs) n (conj acc (take n xs)))))", "problem": 54, "user": "52c58561e4b0c2d177d620f8"}, {"code": "(fn part [n s]\n  (when (>= (count s) n)\n    (cons (take n s) (part n (drop n s)))))", "problem": 54, "user": "52d3f666e4b09f7907dd1327"}, {"code": "(fn q54 [n coll]\n  (if (<= n (count coll))\n    (cons (take n coll) (q54 n (drop n coll)))))", "problem": 54, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "(fn f\n  [n c]\n  (when (>= (count c) n)\n    (cons (take n c)\n          (f n (drop n c)))))", "problem": 54, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn p [c s]\n  (if (>= (count s) c)\n    (let [[x y] (split-at c s)]\n      (cons x (p c y)))))", "problem": 54, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn pat [a b] \n  (if (< (count b) a)\n    []\n    (concat [(take a b)] (pat a (drop a b)))))", "problem": 54, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn f\n ([cnt l] (f cnt l []))\n ([cnt l acc]\n  (if (> cnt (count l))\n    acc\n    (f cnt\n       (drop cnt l)\n       (conj acc (take cnt l))))))", "problem": 54, "user": "51e3a549e4b0c611d6113e47"}, {"code": "(fn [i r] \n  (map #(take i %) \n       (take (quot (count r) i) \n             (iterate (partial drop i) r))))", "problem": 54, "user": "51037468e4b00c483ae17702"}, {"code": "(fn [n xs]\n  (loop [acc [] x (take n xs) xs (drop n xs)]\n    (if (< (count x) n)\n      acc\n      (recur (conj acc x) (take n xs) (drop n xs)))))", "problem": 54, "user": "4ee75ec2535d93acb0a66867"}, {"code": "(fn [n coll]\n    (loop [acc [] tail coll]\n        (if (> n (count tail))\n            acc\n            (recur (conj acc (take n tail)) (drop n tail))\n        )\n    )\n)", "problem": 54, "user": "52c1f404e4b07a9af5792370"}, {"code": "(fn p [n c]\n    (lazy-seq (when (>= (count c) n)\n                (cons (doall (take n c)) (p n (drop n c))))))", "problem": 54, "user": "52d6a9c2e4b09f7907dd1365"}, {"code": "(fn f [n s]\n  (let [ch (take n s)]\n    (if (= (count ch) n)\n      (cons ch (f n (drop n s))))))", "problem": 54, "user": "52cc4fd6e4b07d0d72b27360"}, {"code": "#(loop [crest %2 rez []]\n   (if (< (count crest) %1)\n     rez\n     (recur (nthrest crest %1) (conj rez (take %1 crest)))))", "problem": 54, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn userpartition [x coll]\n  (loop [coll coll\n         out []]\n    (if (< (count coll) x)\n      out\n      (recur\n       (drop x coll)\n       (conj out (take x coll))))))", "problem": 54, "user": "52dad8bde4b09f7907dd13be"}, {"code": "(fn soln [n s]\n  (take-while #(= n (count %))\n              (cons (take n s) (lazy-seq (soln n (drop n s))))))", "problem": 54, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn[n,x](loop[acc (), coll x](if (< (count coll) n) (reverse acc) \n                                              (recur (conj acc (take n coll) ) (drop n coll) ))))", "problem": 54, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "(fn p [n c] (if(>=(count c)n)(cons(take n c)(p n(drop n c)))))", "problem": 54, "user": "52d39acce4b099d49816f0c7"}, {"code": "(fn [n rg]\n  (loop [ret [] remainder rg]\n    (let [elems (take n remainder)]\n      (if \n        (= n (count elems))\n        (recur (conj ret elems) (drop n remainder))\n        ret))))", "problem": 54, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "(fn work [size coll]\n  (when (>= (count coll) size)\n    (cons (take size coll) (work size (drop size coll)))))", "problem": 54, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "(fn part [x coll]\n  (if (< (count coll) x)\n    nil\n    (cons\n     (take x coll)\n     (part x (drop x coll)))\n    )\n  )", "problem": 54, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "#(loop [head (take % %2)\n        tail (drop % %2)\n        ret []]\n   (if (> % (count tail)) (conj ret head)\n     (recur (take % tail) (drop % tail) (conj ret head))))", "problem": 54, "user": "51b41150e4b0f094dd986fac"}, {"code": "#(loop [col %2\n         acc []]\n    (if (< (count col) %) acc\n        (recur (drop % col) (conj acc (take % col)))))", "problem": 54, "user": "52c25645e4b07a9af579237d"}, {"code": "#(for [i (range (quot (count %2) %))]\n  (take % (drop (* i %) %2)))", "problem": 54, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "(fn mypart [x y]\n(when-let[h (seq (take x y))]\n  (when(= (count h) x)\n  (cons h (mypart x (drop x y)))\n  )\n )\n)", "problem": 54, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn part [n xs]\n  (lazy-seq\n   \t(when (<= n (count xs))\n      (cons (take n xs) (part n (drop n xs))))))", "problem": 54, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "#(loop [l %2\n        r []]\n   (if\n     (< (count l) %1)\n     r\n     (recur (drop %1 l) (conj r (take %1 l)))))", "problem": 54, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn rec-split-at [n v]\n  (let [[f r] (split-at n v)]\n    (if (< (count r) n) [f] (into [f] (rec-split-at n r)))))", "problem": 54, "user": "50c2fbebe4b00e537d00253c"}, {"code": "(fn my-partition\n  [n s]\n  (let [[acc buf] (reduce (fn [[acc buf] i]\n                            (let [new-buf (conj buf i)]\n                              (if (= (count new-buf) n)\n                                [(conj acc new-buf) []]\n                                [acc new-buf])))\n                          [[] []]\n                          s)]\n    (if (= (count buf) n)\n      (conj acc buf)\n      acc)))", "problem": 54, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "(fn part [n coll]\n  (let [in (split-at n coll) lastin (last in)]\n    (println lastin (count lastin))\n    (if (or (< (count lastin) n) (empty? lastin))\n    (butlast in)\n    (concat (butlast in) (part n (last in))))))", "problem": 54, "user": "52f07ccee4b05e3f0be25edf"}, {"code": "(fn g \n\t ([n xs] (g '() n xs)) \n\t ( [r n xs] (if (seq xs) (recur (cons (take n xs) r) n (drop n xs)) (filter #(= n (count %)) (reverse  r)))  )  )", "problem": 54, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn p [n v]\n    (if (>= (count v) n)\n      (cons (take n v) (p n (drop n v)))))", "problem": 54, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn part [n s]\n  (if (< (count s) n)\n    []\n    (cons (take n s) (part n (nthrest s n)))))", "problem": 54, "user": "52ec1dfbe4b0705949c4444b"}, {"code": "(fn part [n xs]\n  (if (< (count xs) n)\n    ()\n    (cons (take n xs) (part n (drop n xs)))))", "problem": 54, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn [x s] (partition-by #(quot % x) (drop-last (mod (count s) x) s)))", "problem": 54, "user": "52f1bc81e4b05e3f0be25eef"}, {"code": "(fn\n  [x coll]\n  (loop [cur-coll (list (take x coll))\n         rest-coll (nthnext coll x)]\n    (if (and rest-coll (<= x (count rest-coll)))\n      (recur (conj cur-coll (take x rest-coll)) (nthnext rest-coll x))\n      (reverse cur-coll))))", "problem": 54, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn my-part [n coll]\n  (if (<= n (count coll))\n    (cons (take n coll) (my-part n (drop n coll)))))", "problem": 54, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn part-seq [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (part-seq n (drop n coll)))))", "problem": 54, "user": "527a69cee4b03e8d9a4a755d"}, {"code": "(fn [x l] (loop [ll l splitlist []]\n             (if \n              (= (count (take x ll)) x)\n               (recur (drop x ll) (conj splitlist (take x ll)))\n               splitlist)))", "problem": 54, "user": "52eee533e4b05e3f0be25ecb"}, {"code": "(fn part [x c]\n  (lazy-seq\n   (let [[f r] (split-at x c)]\n     (when (= x (count f))\n       (cons f (part x r))))))", "problem": 54, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "(fn par [n coll] (if (>= (count coll) n) (cons (take n coll) (par n (drop n coll))) []))", "problem": 54, "user": "525fea5ae4b03e8d9a4a7026"}, {"code": "#(loop [acc []\n         xs %2]\n    (if (> % (count xs))\n      (apply list acc)\n      (recur (conj acc (take % xs))\n             (nthrest xs %))))", "problem": 54, "user": "50742549e4b054001656accf"}, {"code": "(fn [n coll]\n  (loop [coll coll, acc []]\n    (let [part (take n coll)]\n      (if (= (count part) n)\n        (recur (drop n coll) (conj acc part))\n        acc))))", "problem": 54, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "(fn[n s] \n  (loop[local-s s r []] \n    (let[ss (take n local-s)] \n      (if(< (count ss) n) \n        r \n        (recur (drop n local-s) (conj r ss))\n        )\n      )\n    )\n  )", "problem": 54, "user": "52e68e61e4b09f7907dd1479"}, {"code": "(fn partition! [n coll]\n  (if (>= (count coll) n)\n    (concat (list (take n coll)) (partition! n (drop n coll)))\n  ))", "problem": 54, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "#(loop [[f r] (split-at % %2) acc []]\n   (if (< (count f) %)\n     acc\n     (recur (split-at % r) (conj acc f))))", "problem": 54, "user": "52d7f9a8e4b09f7907dd1381"}, {"code": "(fn own-partition [n, s]\n  (let [do-spliting (fn [n2 s2]\n                      (loop [result [], s3 s2]\n                        (if (<= (count s3) n2)\n                          (conj result s3)\n                          (let [res (split-at n2 s3)]\n                            (recur (conj result (first res)) (second res))))))\n        splitted (do-spliting n s)]\n    (if (< (count (last splitted)) n)\n      (drop-last splitted)\n      splitted)))", "problem": 54, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn [n s]\n\t(loop [it s ret '[] cur '[]]\n\t\t\t(if (= n (count cur))\n\t\t\t\t(recur (rest it) (conj ret cur) (vector (first it)))\n\t\t\t\t(if (empty? it) ret\n\t\t\t\t\t(recur (rest it) ret (conj cur (first it)))))))", "problem": 54, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "(fn foo [x l]\n   (let [h (split-at x l)]\n     (if (>= (count (last h)) x)\n       (cons (first h) (foo x (last h)))\n       (list (first h))\n       )\n\n     ))", "problem": 54, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn [n xs] (loop [head [] tail xs] (if (< (count tail) n) head (recur (conj head (take n tail)) (drop n tail)))))", "problem": 54, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn [n xs]\n         (map\n           #(take n (drop % xs))\n           (range 0 (- (count xs) (dec n)) n)))", "problem": 54, "user": "4f1c9652535d64f603146483"}, {"code": "(fn [n coll]\n   (loop [res [] coll coll]\n      (if (< (count coll) n)\n         res\n         (recur (conj res (take n coll)) (drop n coll)))))", "problem": 54, "user": "4fb99483e4b081705acca2da"}, {"code": "(fn [n coll]\n  (loop [acc [] c coll]\n    (if (< (count c) n)\n      acc\n      (recur (conj acc (take n c)) (drop n c)))))", "problem": 54, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn part [n s]\n(if (< (count s) n)\n    []\n\t(lazy-cat [(take n s)] (part n (drop n s)))))", "problem": 54, "user": "5300f68de4b0d8b024fd3714"}, {"code": "(fn my-partition\n  [n in]\n  (remove #(< (count %) n)\n          (for [x (range (/ (count in) n))]\n            (remove nil? (for [y (range n)] (let [new (+ (* x n) y)] (if (<= (count in) new) nil (nth in new))))))))", "problem": 54, "user": "5300b750e4b0d8b024fd3711"}, {"code": "(fn part \n   ([n xs] (part n n xs))\n   ([n step xs] \n      (lazy-seq \n        (when-let [s (seq xs)] \n          (let [p (doall (take n s))]\n             (when (= n (count p))\n               (cons p (part n step (nthrest s step)))))))))", "problem": 54, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "(fn groups-of [n xs]\n  (let [group (take n xs)]\n    (when (= n (count group))\n      (cons group (groups-of n (drop n xs))))))", "problem": 54, "user": "528a2de7e4b0239c8a67ae71"}, {"code": "(fn [n coll]\n  (loop [coll coll result []]\n    (if (< (count coll) n)\n      result\n      (recur (drop n coll) (conj result (take n coll)))\n    )))", "problem": 54, "user": "52fcfeeee4b047fd55837027"}, {"code": "#((fn [a c] (if (< (count c) %1) a (recur (conj a (take %1 c)) (drop %1 c)))) [] %2)", "problem": 54, "user": "50f53694e4b057d4c52de881"}, {"code": "(fn mypart [n s]\n  (remove #(< (count %) n) (map #(for [i (range (* % n) (* (inc %) n)) :while (< i (count s))] (nth s i)) (range (/ (count s) n)))))", "problem": 54, "user": "4f48f587e4b0d56e7bb92be2"}, {"code": "(fn cutseq [length coll]\n  (if (>= (count coll) length)\n    (cons (take length coll) (cutseq length (drop length coll)))\n    )\n  )", "problem": 54, "user": "5307e4ece4b02e82168697a9"}, {"code": "(fn [n s] \n  (loop [accum []\n         nxt (take n s)\n         rst (drop n s)]\n    (if (= n (count nxt))\n      (recur (conj accum nxt) (take n rst) (drop n rst))\n      accum)))", "problem": 54, "user": "5302bb37e4b0d8b024fd3734"}, {"code": "(fn f54 [n l]\n  (if (< (count l) n) []\n    (concat [(take n l)] (f54 n (drop n l)))\n    ))", "problem": 54, "user": "52faec2ee4b047fd55837004"}, {"code": "(fn my-partition [size items]\n  (loop [remaining items\n         acc ()]\n    (if (< (count remaining) size)\n      (reverse acc)\n      (recur (drop size remaining) (conj acc (take size remaining))))))", "problem": 54, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn [size inList]\n\t(->>\n\t\t(iterate #(drop size %) inList)\n\t\t(take (quot (count inList) size))\n\t\t(map #(take size %)))\n)", "problem": 54, "user": "52bf6946e4b07a9af5792334"}, {"code": "(fn [n xs]\n  (loop [i n\n         [a & rest] xs\n         curr []\n         acc  []]\n    (if a\n      (if (> i 1)\n        (recur (dec i) rest (conj curr a) acc)\n        (recur n rest [] (conj acc (conj curr a))))\n      acc)))", "problem": 54, "user": "52fb64b7e4b047fd55837009"}, {"code": "(fn f[ax als] (loop [ls als acc '()] \n                       (if (< (count ls) ax)\n                         (reverse acc)\n                         (recur (drop ax ls) (cons (take ax ls) acc)))))", "problem": 54, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn par [x coll]\n  (loop [rest coll\n         parts []]\n    (if (> x (count rest))\n      parts\n      (recur (drop x rest)\n             (conj parts (take x rest))))))", "problem": 54, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn[n l]\n  (for [x (range (quot (count l) n))]\n    (for [y (range (* x n) (+ (* x n) n))]\n      (nth l y))))", "problem": 54, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn [n xs]\n  (loop [result []\n         xs xs]\n    (if (and (seq xs) (>= (count xs) n))\n      (recur (conj result (take n xs))\n             (drop n xs))\n      result)))", "problem": 54, "user": "4dad8a6dc9a9d6ed1399dc57"}, {"code": "(fn my-partition [len coll]                                                        \n  (loop [start 0                                                                   \n         result []]                                                                \n    (if (<= (+ start len) (count coll))                                            \n      (recur (+ start len)                                                         \n             (conj result (take len (drop start coll))))                           \n      result)))", "problem": 54, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn f [a b]\n    (when-let [b (seq b)]\n      (lazy-cat (if (< (count b) a) nil (list (take a b))) (f a (drop a b)))))", "problem": 54, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn partition2 [n s]\n  (if \n    (> n (count s)) nil\n    (cons (take n s) (lazy-seq (partition2 n (drop n s)))))\n  )", "problem": 54, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn my-partition [n s]\n  (if (< (count s) n)\n    '()\n    (cons (take n s) (my-partition n (drop n s)))))", "problem": 54, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn [size x]\n   (loop [my-x x\n          acc (let [orig (/ (count x) size)]\n                (loop [my-acc []\n                     my-size (if (integer? orig)\n                               orig\n                               (+ (int orig) 1)\n                              )\n                    ]\n                (if (= 0 my-size)\n                  my-acc\n                  (recur (conj my-acc []) (- my-size 1))\n                  )\n                )\n              )\n          index 0]\n     (let [obj (first my-x)\n           next-index (mod (+ index 1) size)\n           new-acc (if (nil? obj)\n                     acc\n                     (if (= next-index 0)\n                       (concat (rest acc) (list (conj (first acc) obj)))\n                       (concat (list (conj (first acc) obj)) (rest acc))\n                      )\n                    )]\n       (if (empty? my-x)\n         (filter #(>= (count %) size) new-acc)\n         (recur (rest my-x) new-acc next-index)\n       )\n     )\n   )\n)", "problem": 54, "user": "5303a027e4b0d8b024fd3745"}, {"code": "(fn [n coll]\n  (loop [i (quot (count coll) n)\n         result ()\n         coll coll]\n    (if (zero? i)\n      (reverse result)\n      (recur (dec i)\n             (into result (list (take n coll)))\n             (drop n coll)\n      )\n    )\n  )\n)", "problem": 54, "user": "53153466e4b08068f379ed23"}, {"code": "(fn [n s] (map #(take n %)\n             (take-while #(>= (count %) n) \n                (iterate #(drop n %) s))))", "problem": 54, "user": "530e5469e4b08068f379ecb7"}, {"code": "(fn [n coll]\n  (loop [[elt & coll-rest :as all] coll\n         result []\n         result-last []]\n    (let [new-result\n          (if (= n (count result-last))\n            (conj result result-last)\n            result)]\n      (if (empty? all)\n        new-result\n        (recur coll-rest new-result\n               (if (= n (count result-last))\n                 [elt]\n                 (conj result-last elt)))))))", "problem": 54, "user": "53070615e4b02e821686979e"}, {"code": "(fn [n coll]\n    (loop [coll coll results []]\n      (if (or (empty? coll) (< (count coll) n) )\n         results \n        (recur (drop n coll)(conj results (take n coll) ))\n      )\n    )\n  \n)", "problem": 54, "user": "52da20c7e4b09f7907dd13b3"}, {"code": "(fn [n xs]\n (loop [xs xs\n        res []]\n   (if\n    (> n (count (take n xs))) res\n    (recur (drop n xs) (conj res (take n xs ))) )))", "problem": 54, "user": "531bfb69e4b08068f379ed97"}, {"code": "#(loop [v %2 x [] o []]\n  (if (empty? v) \n    o\n    (let [y (conj x (first v))]\n      (if (= (count y) %1)\n        (recur (rest v) [] (conj o y))\n        (recur (rest v) y o)\n      )\n    )   \n  )\n)", "problem": 54, "user": "5176afd2e4b085adf681d889"}, {"code": "#(for [i (range 0 \n                (->> %2 count (rem %) dec (- (count %2))) \n                %)]\n    (->> %2 (drop i) (take %)))", "problem": 54, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn [n l]\n  (loop [r []\n   \t\t l l]\n    (if (empty? l) (filter #(= n (count %)) r)\n        (recur (conj r (take n l)) (drop n l)))))", "problem": 54, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn [s g]\n   (reverse (loop [rem g v '()]\n              (if (< (count rem) s)\n                v\n                (recur (drop s rem) (conj v (take s rem)) )))))", "problem": 54, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [n se] (take-while #(= n (count %)) (map (partial take n) (iterate (partial drop n) se))))", "problem": 54, "user": "4f320253e4b0d6649770a08d"}, {"code": "(fn partition* [n coll]\n  (when (>= (count coll) n)\n    (cons (take n coll) (partition* n (drop n coll)))))", "problem": 54, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn partition1 [n coll]\n  (if (> n (count coll)) '()\n    (let [[a b] (split-at n coll)]\n      (cons a (partition1 n b)))))", "problem": 54, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn !\n  ([g l]\n  (! g l '()))\n  ([g l acc]\n   \n   (if (empty? l)\n     (reverse acc)\n     (let [ group (take g l)]\n        (if (= g (count group))\n          (! g (drop g l) (conj acc group) )\n          (reverse acc))))))", "problem": 54, "user": "5323f4c6e4b09d4e7a9b54d4"}, {"code": "(fn\n  [k v]\n  (loop\n    [values v\n     results []]\n    (if (< (count values) k)\n      results\n      (recur (drop k values) (conj results (take k values))))))", "problem": 54, "user": "52bb4be0e4b07a9af57922e2"}, {"code": "(fn [n coll]\n  (loop [items coll res []]\n    (let [piece (take n items)] \n      (if (= n (count piece))\n        (recur (drop n items) (conj res piece))\n        res))))", "problem": 54, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn f [n xs] (if (< (count xs) n) nil (cons (take n xs) (f n (drop n xs)))))", "problem": 54, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(fn [n its]\n  (loop [its its\n         res []]\n    (if (< (count its) n)\n      res\n      (recur (drop n its) (conj res (take n its))))))", "problem": 54, "user": "4dbecb06535d020aff1edf6a"}, {"code": "(fn part [n xs]\n  (letfn [(f [[result n' acc] x]\n       \t (if (= (inc n') n)\n\t     [(conj result (conj acc x)) 0 []]\n\t     [result (inc n') (conj acc x)]))]\n   (first (reduce f [[] 0 []] xs))))", "problem": 54, "user": "531c0619e4b08068f379ed98"}, {"code": "(fn my-partition[acc my-par my-count lst]\n  (cond \n    (= my-count (count my-par)) (my-partition (concat acc (list my-par)) '() my-count lst)\n    (empty? lst) acc\n    :default (let [my-head (list (first lst)) my-tail (rest lst)] (my-partition acc (concat my-par my-head) my-count my-tail)))) '() '()", "problem": 54, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "(fn my-partition [num s]\n  (let [[x y] (split-at num s)]\n    (if (<= num (count x))\n      (cons x (my-partition num y)))))", "problem": 54, "user": "5329cee2e4b09d4e7a9b551a"}, {"code": "(fn [n coll]\n  (loop [coll coll res []]\n    (if (< (count coll) n)\n      res\n      (recur (drop n coll) (conj res (take n coll))))))", "problem": 54, "user": "531f7a2de4b08068f379edc6"}, {"code": "(fn [num lst]\n  (apply map (fn [& a]\n               (apply vector a))\n         (map #(take-nth num (drop % lst)) (range num))))", "problem": 54, "user": "5005b57de4b0678c553fc46a"}, {"code": "#(loop [r []\n        c %2]\n   (let [t (take % c)]\n     (if (< (count t) %)\n       r\n       (recur (conj r t) (drop % c)))))", "problem": 54, "user": "53034738e4b0d8b024fd373e"}, {"code": "#(loop [todo %2\n        parted []]\n  (if (>= (count todo) %)\n    (recur (drop % todo) (conj parted (take % todo)))\n    parted))", "problem": 54, "user": "52cb19abe4b07d0d72b27348"}, {"code": "(fn [n col] (for [i (range (quot (count col) n))] (take n (drop (* n i) col))))", "problem": 54, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn my-partition [num s]\n  (let [[x y] (split-at num s)]\n    (if (<= num (count x))\n      (cons x (my-partition num y)))))", "problem": 54, "user": "52ba447ee4b07a9af57922ce"}, {"code": "(fn [n c]\n(loop [coll c\n       result []]\n  (cond (>= (count coll) n)\n        (recur (drop n coll)\n               (conj result (take n coll)))\n        :else result )))", "problem": 54, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn newpartition [n x]\n                    \"Cuts a sequence x into sublists of n elements each.\"\n                    (if (< (count x) n)\n                      '()\n                      (concat (list (take n x)) (newpartition n (drop n x)))))", "problem": 54, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn [n coll]\n  (filter #(= n (count %))\n          (loop [c coll\n                 acc []]\n            (if-not (empty? c)\n              (recur (drop n c) (conj acc (vec (take n c))))\n              acc))))", "problem": 54, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "(fn f [n coll]\n  (loop [coll coll ret []]\n    (let [[x y] (split-at n coll) ret (conj ret x)]\n      (if (< (count y) n) ret (recur y ret)))))", "problem": 54, "user": "53315c78e4b019098a6f8b67"}, {"code": "(fn [n xs]\n   (loop [res [[]] xs xs]\n     (if (and (< (count xs) n) (= n (count (first res))))\n       (reverse res)\n       (recur \n        (if (= n (count (first res))) \n          (conj res (vector (first xs)))\n          (apply list (conj (first res) (first xs)) (rest res)))\n        (rest xs)))))", "problem": 54, "user": "531490bde4b08068f379ed17"}, {"code": "#(loop [[f & r] %2 l '() res '()]\n\t(if (nil? f) res\n\t\t(let [new-l (concat l (list f))]\n\t\t\t(if (= (count new-l) %1) \n              \t(recur r '() (concat res (list new-l)))\n\t\t\t\t(recur r new-l res)))))", "problem": 54, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn [n l]\n        (reverse (loop [a (quot (count l) n)\n                        rslt []\n                        b l]\n                   (if (= 0 a)\n                     rslt\n                     (recur (dec a) (cons (take n b) rslt) (drop n b))))))", "problem": 54, "user": "532bce35e4b09d4e7a9b5536"}, {"code": "(fn [n xs]\n  (loop [remainder xs\n         result []]\n    (let [block (take n remainder)]\n      (if (not (= n (count block)))\n        result (recur (drop n remainder) (conj result block))))))", "problem": 54, "user": "52430d3ce4b076204b44faa5"}, {"code": "(fn [n col]\n   (loop [c col ret []]\n     (if (>= (count c) n)\n       (recur (drop n c)(conj ret (take n c)))\n       ret)))", "problem": 54, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn [n xs]\n  (loop [xs xs\n         acc ()]\n    (if (< (count xs) n)\n      (reverse acc)\n      (recur (drop n xs) (conj acc (take n xs))))))", "problem": 54, "user": "533696b9e4b0e30313ee6c7c"}, {"code": "(fn [n z] (letfn [(part [l] (lazy-seq (if-let [r (seq l)]  (when (>= (count r) n) (cons (take n r) (part (drop n r)))))))]                                                                                                            \n                    (part z)))", "problem": 54, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn prt [n cols](lazy-seq (if (< (count cols) n) nil (cons (first (split-at n cols)) (prt n (last (split-at n cols)))))))", "problem": 54, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn parts\n  ([n x] (parts n x []))\n  ([n x p]\n     (let [[h t] (split-at n x)]\n       (if (= (count h) n)\n         (recur n t (conj p h))\n         p))))", "problem": 54, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn f [n r] (concat (list (take n r)) (if (>= (- (count r) n) n) (f n (drop n r)))))", "problem": 54, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(letfn [(part\n         [n xs]\n         (lazy-seq\n          (let [[x xs] (split-at n xs)]\n            (cons x (part n xs)))))]\n    \n  (fn [n xs]\n    (take-while #(= n (count %))\n                (part n xs))))", "problem": 54, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn [x coll]\n  (loop [result [] source (drop x coll) chun (take x coll)]\n    (if (= x (count chun))\n      (recur (conj result chun) (drop x source) (take x source))\n      result)))", "problem": 54, "user": "5336ca32e4b0e30313ee6c80"}, {"code": "#(loop [x %2 container []]\n  (if (or (empty? x) (< (count x) %1)) \n    container\n    (recur (drop %1 x) (conj container (take %1 x)))))", "problem": 54, "user": "532631e1e4b09d4e7a9b54ea"}, {"code": "(fn f\n  ([interval col] (f interval col '()))\n  ([interval col result]\n     (if (< (count col) interval)\n       (reverse result)\n       (recur interval (drop interval col) (cons (take interval col) result)))))", "problem": 54, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "(fn [n s]\n (map  #(take n (nthrest s (* % n)))\n  (range (quot (count s) n))))", "problem": 54, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "#(loop [xs %2 acc []]\n   (let [[x y] (split-at % xs)]\n     (if (< (count x) %)\n       acc\n       (recur y (conj acc x)))))", "problem": 54, "user": "533018b2e4b019098a6f8b56"}, {"code": "(fn rec [n s]\n  (if (> n (count s)) nil\n    (cons (take n s)\n          (rec n (drop n s)))))", "problem": 54, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(fn sds [size coll]\n  (let [result (atom [])]\n    (loop [r-coll coll]\n      (if (>= (count r-coll) size)\n        (do\n          (swap! result conj (take size r-coll))\n          (recur (drop size r-coll)))\n        @result))))", "problem": 54, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn [n s]\n  (->>\n   [s nil]\n   (iterate (fn [[remaining _]]\n              (let [[new-partition now-remaining] (split-at n remaining)]\n                [now-remaining new-partition])\n              ))\n   (rest); skip the [s nil]\n   (map second); get the partitioned elements\n   (take-while #(= n (count %)))))", "problem": 54, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "(fn p [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (p n (drop n coll)))))", "problem": 54, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [p coll] (filter #(= (count %) p) (reduce (fn [accum n] (if (= (count (peek accum)) p) (conj accum [n]) (conj (pop accum) (concat (peek accum) [n])))) [[(first coll)]] (rest coll))))", "problem": 54, "user": "533ee560e4b085b17e897d98"}, {"code": "(fn part [n lst]\n  (if (<= n (count lst))\n    (cons (take n lst)\n          (lazy-seq (part n (drop n lst))))))", "problem": 54, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn [n l]\n      (loop [n n l l acc []]\n        (let [hd (take n l) ]\n          (if (or (empty? l) (not= (count hd) n))\n          acc\n          (recur n (drop n l) (conj acc hd ))\n          )\n         )\n        )\n      )", "problem": 54, "user": "51f81925e4b09be9c177e526"}, {"code": "(fn [n lst]\n  ((fn [l res]\n     (if (< (count l) n) res\n       (recur (drop n l) (concat res (list (take n l))))))\n   lst '()))", "problem": 54, "user": "51da631be4b02ceefd947766"}, {"code": "(fn [n l] \n  (filter #(= (count %1) n) \n          (map #(take n (drop %1 l)) \n               (filter #(zero? (mod %1 n)) \n                       (range (count l))))))", "problem": 54, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn f [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (f n (drop n v)))))", "problem": 54, "user": "50436470e4b034ff00315d23"}, {"code": "(fn [n xs]\n  (loop [dst []\n         src xs]\n    (if (< (count src) n)\n      (reverse dst)\n      (recur (cons (take n src) dst) (drop n src)))))", "problem": 54, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "(fn p [n xs]\n  (when (<= n (count xs))\n    (cons (take n xs)\n          (lazy-seq (p n (drop n xs))))))", "problem": 54, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn fn-partition\n [n s & x]\n (if-not (= (count (take n s)) n)\n (sort-by first x )\n (recur n (nthrest s n) (conj x (take n s)))))", "problem": 54, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn [n coll]\n (loop [remaining coll result []]\n   (if (< (count remaining) n)\n     result\n     (recur (drop n remaining) (conj result (take n remaining))))))", "problem": 54, "user": "533f09e1e4b085b17e897d9a"}, {"code": "(fn my-partition [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll)\n          (lazy-seq (my-partition n (drop n coll))))))", "problem": 54, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn [n xs]\n  (loop [xs xs rs []]\n    (if (< (count xs) n)\n      rs\n      (recur\n       (drop n xs)\n       (conj rs (take n xs))))))", "problem": 54, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn [x y]\n  (filter #(= x (count %)) (map #(map first %) (partition-by #(quot (first %) x) (map-indexed vector y)))))", "problem": 54, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn x\n  ([n l] (x [] n l))\n  ([r n l]\n     (if (< (count l) n)\n       r\n       (recur (conj r (take n l)) n (drop n l)))))", "problem": 54, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn f [n s]\n   (if (< (count s) n)\n     '()\n     (cons (take n s) (f n (drop n s)))))", "problem": 54, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn [n seq]\n     (filter #(= (count %) n) (map (fn [x] (map #(get % 1) x))  (vals (group-by #(get % 0) (map-indexed (fn [idx itm]  [(quot idx n) itm])seq)))   ))\n     \n     )", "problem": 54, "user": "530d1060e4b08068f379eca2"}, {"code": "(fn part-seq\n  [n coll]\n  (loop [coll coll\n         result []]\n    (if (empty? coll)\n      result\n      (recur (take-last (- (count coll) n) coll)\n             (if (>= (count coll) n)\n               (conj result (take n coll))\n               result)))))", "problem": 54, "user": "5339af7de4b0e30313ee6cab"}, {"code": "#(take (quot (count %2) %1) (map (partial take %1) (iterate (partial drop %1) %2)))", "problem": 54, "user": "53134005e4b08068f379ed07"}, {"code": "(fn [i s]\r\n  (loop [result []  left s]\r\n    (if (< (count left) i)\r\n      result\r\n      (recur (conj result(take i left)) (drop i left)))))", "problem": 54, "user": "4f9b3532e4b0dcca54ed6d13"}, {"code": "(fn f [n l] (if (< (count l) n)\n            (list)\n            (cons (take n l) (f n (drop n l)))\n          )\n)", "problem": 54, "user": "5349ac2be4b084c2834f4a67"}, {"code": "#(loop [r [], coll %2]\n   (if (< (count coll) %)\n     r\n     (recur (conj r (take % coll)) (drop % coll))))", "problem": 54, "user": "4fceda40e4b03432b189f407"}, {"code": "(fn [n seq]\n  (loop [accu []\n         head (take n seq)\n         tail (drop n seq)]\n    (if (< (count head) n)\n      accu\n      (recur (conj accu head)\n             (take n tail)\n             (drop n tail)))))", "problem": 54, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn par [n xs]\n  (if (< (count xs) n)\n    '()\n    (cons (take n xs) (par n (nthrest xs n)))))", "problem": 54, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn [len sq] \n  (seq (first (reduce #(let [[full-acc acc] %\n                             next-acc (conj acc %2)]\n                         (if (= len (count next-acc))\n                           [(conj full-acc (seq next-acc)) []]\n                           [full-acc next-acc]))\n                      [[] []]\n                      sq))))", "problem": 54, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn f [n l]\n  (if (< (count l) n)\n    ()\n    (concat [(take n l)]\n            (f n (drop n l)))))", "problem": 54, "user": "534bde26e4b084c2834f4a81"}, {"code": "(fn part [n coll]\n  (lazy-seq \n    (when (>= (count coll) n)\n      (let [[a d] (split-at n coll)]\n        (cons a (part n d))))))", "problem": 54, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(fn [n s]\n    (loop [accum ()\n           l s]\n      (let [chunk (take n l)\n            r (drop n l)]\n        (if (< (count chunk) n)\n          accum\n          (recur (concat accum (list chunk)) r)))))", "problem": 54, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn mypart [c l]\n  (if (< (count l) c)\n    (list)\n    (cons (take c l) (mypart c (drop c l)))))", "problem": 54, "user": "5348236ee4b084c2834f4a54"}, {"code": "(fn [pa wa]\n((fn pas [x se acc]\n  (if (>= (count se) x)\n    (pas x (drop x se) (conj acc (take x se)))\n    acc)) pa wa []))", "problem": 54, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "(fn fun [n coll]\n  (filter #(= n (count %))\n          (if (nil? (seq coll)) '()\n  (cons (take n coll) (fun n (drop n coll))))))", "problem": 54, "user": "5349da55e4b084c2834f4a68"}, {"code": "(fn   [n s]\n  (loop [s s r []]\n    (if (<= n (count s))\n      (recur (nthnext s n) (conj r (take n s)))\n      (seq r))))", "problem": 54, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn part* [n xs]\n   (let [h (take n xs)\n         t (drop n xs)]\n     (if (>= (count xs) n)\n       (cons h (part* n t)))))", "problem": 54, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn [n col]\n  (loop [result []\n         remain col]\n    (if (< (count remain) n)\n      result\n      (recur (conj result (take n remain)) (drop n remain))\n    )))", "problem": 54, "user": "534815bde4b084c2834f4a53"}, {"code": "(fn [n sq]\n          (let [inner (fn [sq col]\n                        (if (>= (count sq) n)\n                          (recur (drop n sq) (conj col (take n sq)))\n                          col))]\n            (inner sq [])))", "problem": 54, "user": "534e9ed4e4b084c2834f4ab8"}, {"code": "(fn [n sq]\n  (loop [x-s [] sq sq]\n    (if (> n (count sq))\n      x-s\t\n    (let [[next-x-s remaining-sq] (split-at n sq)]\n      (recur (conj x-s next-x-s) remaining-sq)))))", "problem": 54, "user": "534efe66e4b084c2834f4ac1"}, {"code": "(fn [x xs]\n  (loop [tmp []\n         res []\n         s xs]\n    (if (empty? s)\n      res\n      (if (= (- x 1) (count tmp))\n        (recur []\n               (conj res (conj tmp (first s)))\n               (rest s))\n        (recur (conj tmp (first s))\n               res\n               (rest s))))))", "problem": 54, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn p [n l]\n  (if (> n (count l))\n    []\n    (cons (take n l) (p n (drop n l)))))", "problem": 54, "user": "5336a339e4b0e30313ee6c7d"}, {"code": ";if (= p (dec x)) (concat (list (cons x (first acc))) (rest acc)) (cons (list x) acc) ))) '() %)))))\n#(reverse (filter (fn [y] (= %1 (count y))) (reduce\n  (fn [acc x] \n    (if (> %1 (count (first acc))) \n      (concat (vector (conj (first acc) x)) (rest acc)) \n      (conj acc (vector x)) ))\n  '([]) %2)))", "problem": 54, "user": "533b9cace4b0e30313ee6cd1"}, {"code": "(fn [x s]\n  (map #(take x (drop % s)) (range 0 (- (count s) x -1) x)))", "problem": 54, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn ps [x y]\n  (if (> x (count y))\n    []\n    (cons (take x y)\n          (ps x (drop x y)))))", "problem": 54, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn [n xs]\n  (loop [xs xs\n         acc []]\n    (if (< (count xs) n)\n      acc\n      (recur (drop n xs) (conj acc (take n xs))))))", "problem": 54, "user": "5312cdaae4b08068f379ed03"}, {"code": "(fn prttn [n coll]\n  (for [x (range (quot (count coll) n))]\n    (take n (drop (* x n) coll))))", "problem": 54, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn [n xs]\n    (loop [heads (take n xs)\n           others (drop n xs)\n           acc []]\n      (if (< (count others) n)\n        (conj acc heads)\n        (recur (take n others) (drop n others) (conj acc heads)))))", "problem": 54, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "(fn [n s]\n  (loop [res [], sq s] \n    (if (< (count sq) n)\n      res\n    (recur \n     (conj res (take n sq))\n     (drop n sq)\n     )\n    )\n    )\n  )", "problem": 54, "user": "52d42021e4b09f7907dd132a"}, {"code": "#(loop [r [] s %2]\n    (if (< (count s) %1)\n      r\n      (recur (conj r (take %1 s)) (drop %1 s))))", "problem": 54, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "(fn [n c]\n  (loop [c c, acc '()]\n    (let [a (take n c)\n          b (drop n c)]\n      (if (> n (count a)) (reverse acc)\n        (recur b (conj acc a))))))", "problem": 54, "user": "53597288e4b04ce2eb3ed29c"}, {"code": "(fn part\n  [p r]\n  (loop [offset 0\n         coll []\n         rr r]\n    (if (and (seq rr) (>= (count rr) p))\n      (recur (+ offset p) (conj coll (take p rr)) (drop p rr))\n      coll)))", "problem": 54, "user": "5338387de4b0e30313ee6c91"}, {"code": "(fn [n s]\n  ((fn [c s r q]\n     (cond\n      (= c 0) (recur n\n                     s\n                     (concat r (list q))\n                     [])\n      (empty? s) r\n      :else (recur (dec c)\n                   (rest s)\n                   r\n                   (concat q [(first s)]))))\n   n s [] []))", "problem": 54, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn _ [n c]\n  (if (< (count c) n)\n      []\n      (cons (take n c) (_ n (drop n c)))) )", "problem": 54, "user": "53415755e4b00652c8746ecd"}, {"code": "(fn part [n x] (if (>= (count x) n)\n\t             (cons (take n x) (part n (drop n x)))\n                 []))", "problem": 54, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "(fn my-partition [n c]\n  (loop [result [] rest c]\n    (if (< (count rest) n)\n      result\n      (recur (conj result (take n rest)) (drop n rest)))))", "problem": 54, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "(fn par  \n  [n l]\n   (when (and (not (nil? (seq l))) (>= (count l) n))\n     (concat (list (take n l)) (par n (nthrest l n)))))", "problem": 54, "user": "5047782ce4b0371827a27bc2"}, {"code": "(fn [n v]\n  (loop [in v out []]\n    (if (< (count in) n)\n      out\n      (recur (drop n in) (conj out (take n in))))))", "problem": 54, "user": "532a111ee4b09d4e7a9b5520"}, {"code": "(fn f [n s]\n  (if (>= (count s) n)\n    (cons (take n s) (f n (drop n s)))\n    '()))", "problem": 54, "user": "5356e04fe4b04ce2eb3ed271"}, {"code": "(fn part-seq [n xs]\n  (if (< (count xs) n) '()\n      (cons (take n xs) (part-seq n (drop n xs)))))", "problem": 54, "user": "53287dace4b09d4e7a9b5507"}, {"code": "(fn [n coll]\n  (loop [left coll result []]\n    (let [temp (take n left)]\n      (if (< (count temp) n)\n        result\n        (recur (drop n left) (conj result temp))))))", "problem": 54, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn partition-seq [n coll]\n  (if (<= n (count coll))\n    (cons\n      (take n coll)\n      (lazy-seq (partition-seq n (drop n coll))))))", "problem": 54, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [size col]\n    (loop [ret [] remaining col]\n      (if (<= size (count remaining))\n        (recur (conj ret (take size remaining)) (drop size remaining))\n        ret)))", "problem": 54, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn t3 [c coll]\n    (loop [cnt c tmp [] sol [] cl coll]\n      (if (or (seq cl) (= cnt 0))\n        (if (= cnt 0)\n          (recur c [] (conj sol tmp) cl)                                   \n          (recur (dec cnt) (conj tmp (first cl)) sol (rest cl)))\n        sol)))", "problem": 54, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn [n s]\n  (loop [in s\n         out []]\n    (if (> n (count in))\n      out\n      (recur (drop n in) (conj out (take n in))))))", "problem": 54, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn part[n xs]\n  (if (or (empty? xs) (> n (count xs))) nil\n    (cons (take n xs) (part n (drop n xs)))))", "problem": 54, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn my-partition [n col]\n  (loop [col col\n         new-col []]\n    (if (empty? col)\n      new-col\n      (recur (drop n col) (if (>= (count col) n) (conj new-col (take n col))\n                              new-col)))))", "problem": 54, "user": "5369d072e4b0243289761ea1"}, {"code": "(fn my-part\n  [size coll]\n  (loop [result (list (take size coll))\n         tail (drop size coll)]\n  (if (>= (count tail) size)\n    (recur (conj result (take size tail)) (drop size tail))\n    (reverse result))))", "problem": 54, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn part [n coll]\n  (if (> n (count coll))\n    []\n    (cons (take n coll) (part n (drop n coll)))))", "problem": 54, "user": "5368a275e4b0243289761e8f"}, {"code": "(fn f [n c]\n  (if (>= (count c) n)\n    (cons (take n c)\n          (f n (drop n c)))))", "problem": 54, "user": "536973e5e4b0243289761e9e"}, {"code": "#(take-while (fn [ entry ] (= (count entry) %1))\n          (reverse (reduce \n            (fn[ acc entry ] \n           \t\t(if (= 0 (mod (count (first acc)) %1))\n             \t\t(cons [ entry ] acc)\n             \t\t(cons (conj (first acc) entry) (rest acc))))\n         \t\t'() %2)))", "problem": 54, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "(fn [partition-size some-list]\n  (loop [partition-size partition-size\n         remaining some-list\n         temp-list '()\n         result '()]\n    (if (empty? remaining)\n      (reverse result)\n      (let [[head & tail] remaining\n            temp-list (conj temp-list head)]\n        (if (>= (count temp-list) partition-size)\n          (recur partition-size tail '() (conj result (reverse temp-list)))\n          (recur partition-size tail temp-list result))))))", "problem": 54, "user": "536be89ee4b0fc7073fd6e32"}, {"code": "(fn [cnt s]\n  (loop [s s\n         accum []]\n    (let [current-partition (take cnt s)\n          remaining-seq (drop cnt s)]\n      (if (< (count current-partition) cnt)\n        accum\n        (recur remaining-seq (conj accum current-partition))))))", "problem": 54, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn party [n xs]\n  (if (< (count xs) n) \n    []\n    (cons (take n xs) (party n (drop n xs)))))", "problem": 54, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "; OMFG Look at the size of that hammer!\n; \n; This solution works, but screams \"SICP Chapter 1\".\n; The clojure.core implementation of partition handles this\n; much differently, but I can't wrap my head around it yet. \n;\n(fn my-part [size coll]\n  (let [iter (fn [size coll new-coll part]\n               (if (empty? coll)\n                 new-coll\n                 (if (= (dec size) (count part))\n                   ; Only room for 1 more element in this partition\n                   (recur size\n                          (rest coll)\n                          (concat new-coll [(concat part [(first coll)])])\n                          '())\n                   (recur size\n                          (rest coll)\n                          new-coll\n                          (concat part [(first coll)])))))]\n        (iter size coll '() '())))", "problem": 54, "user": "4eed26af535d93acb0a668bb"}, {"code": "(fn [nn x] \n  ((fn f [n s acc] \n  \t(if \n    \t(< (count s) n) \n    \t(reverse acc)\n    \t(f n (drop n s) (cons (take n s) acc))\n    )\n  ) nn x '())\n)", "problem": 54, "user": "535197f2e4b084c2834f4ae4"}, {"code": "#(loop [s %2, o ()] (if (< (count s) %) o (recur (drop % s) (concat o (list (take % s))))))", "problem": 54, "user": "52bdf6bde4b07a9af579230d"}, {"code": "(fn part\n    ([n coll] \n     (if (< (count coll) n)\n       '()\n       (concat (list (take n coll)) (part n (drop n coll))))))", "problem": 54, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "(fn f [x s]\n  (let [[h t] (split-at x s)]\n    (if (>= (count h) x) \n      (cons h (f x t))\n      nil)))", "problem": 54, "user": "53523ae0e4b084c2834f4aee"}, {"code": "#(loop [s %2 ped nil]\n          (if (< (count s) %)\n            ped\n            (recur (drop % s) (concat ped (list (take % s))))))", "problem": 54, "user": "4fa9da14e4b081705acca1e7"}, {"code": "(fn [n coll]\n   (loop [r [] xs coll]\n     (if (< (count xs) n)\n       r\n       (recur (conj r (take n xs)) (drop n xs)))))", "problem": 54, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn partition2 [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (partition2 n (drop n coll)))))", "problem": 54, "user": "53436e60e4b084c2834f4a19"}, {"code": "#(loop [x  (take %1 %2)\n        xs (drop %1 %2)\n        acc []]\n   (if-not (= %1 (count x))\n     acc\n     (recur (take %1 xs)\n            (drop %1 xs)\n            (conj acc x))))", "problem": 54, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn part [n xs] (when (>= (count xs) n) (conj (part n (drop n xs)) (take n xs))))", "problem": 54, "user": "53720c5ce4b0493c815db704"}, {"code": "(fn partition' [n coll]\n  (when-let [rest-of-coll (seq coll)]\n    (let [next-seq (take n rest-of-coll)]\n      (when (= n (count next-seq))\n        (lazy-seq\n          (cons next-seq\n                (partition' n (nthrest coll n))))))))", "problem": 54, "user": "53121863e4b08068f379ecf3"}, {"code": "#(if (< (count %3) %2) % (recur (conj % (take %2 %3)) %2 (drop %2 %3))) []", "problem": 54, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [n xs]\n  (filter\n   #( = (count %) n)\n   (reverse\n    (reduce \n     (fn [acc x]\n       (let [l (-> acc first count)]\n         (if (= n l)\n           (cons [x] acc )\n           (cons (conj (first acc) x) (rest acc)  ))))\n     '([]) xs))))", "problem": 54, "user": "504e90bae4b069badc5a33b8"}, {"code": "(fn partition1 [n xs]\n  (lazy-seq \n   ( if (<= n (count xs)) \n     (cons (take n xs) \n           (partition1 n (drop n xs))))))", "problem": 54, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn break [n coll] (when (<= n (count coll)) (cons (take n coll) (break n (drop n coll)))))", "problem": 54, "user": "536a37efe4b0243289761eaa"}, {"code": "(fn [n xs]\r\n  (let [h (fn p [xs n]\r\n                (if (empty? xs)\r\n                  nil\r\n                  (cons (take n xs) (p (drop n xs) n))))]\r\n    (filter #(>= (count %) n) (h xs n))))", "problem": 54, "user": "5376966ae4b06839e8705e27"}, {"code": "(fn  [p coll]\n  (loop [x coll acc [] ]\n    (if (< (count x) p)\n      acc\n      (recur (drop p x) (conj acc (take p x))))))", "problem": 54, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn my-partition [n xs] \n  (if (< (count xs) n)\n    '()\n    (cons (take n xs) (my-partition n (drop n xs)))))", "problem": 54, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn part-seq [n v]\n  (let [rv (take n v)]\n    (if (= (count rv) n)\n      (cons rv (lazy-seq (part-seq n (drop n v))))\n      nil)))", "problem": 54, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn [size ls]\n  (loop [v ls memo '()]\n    (if-let [part (not-empty v)]\n      (recur (drop size part)\n             (conj memo (take size part)))\n      (->> (reverse memo)\n           (remove #(not (= size (count %))))))))", "problem": 54, "user": "50fd4838e4b033b9c38d78ce"}, {"code": "(fn par\n\t([n coll]\n\t\t(if (>= (count coll) n)\n\t\t\t(par n (drop n coll) [(take n coll)])\n\t\t\t'()))\n\t([n coll cur]\n\t\t(if (>= (count coll) n)\n\t\t\t(par n (drop n coll) (cons (take n coll) cur))\n\t\t\t(reverse cur))))", "problem": 54, "user": "5379306fe4b06839e8705e50"}, {"code": "(fn [n coll]\n  (take (quot (count coll) n) (vals (group-by #(quot % n) coll))))", "problem": 54, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "(fn my-partition [n coll]\n  (loop [coll coll\n         parti []]\n    (if (>= (count coll) n)\n      (cons (take n coll) (my-partition n (drop n coll))))))", "problem": 54, "user": "53778b90e4b06839e8705e36"}, {"code": "(fn [n s]\n  (loop [xs s acc []]\n    (if (< (count xs) n)\n      acc\n      (recur (drop n xs) (conj acc (take n xs))))))", "problem": 54, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn partitioning [n coll]\n  (when-not (< (count coll) n)\n    (cons (take n coll) (partitioning n (drop n coll)))))", "problem": 54, "user": "5317d78ee4b08068f379ed63"}, {"code": "(fn [n a-seq]\n  (loop [s a-seq\n         r ()]\n    (if (< (count s) n)\n      (reverse r)\n      (recur (nthrest s n) (conj r (take n s))))))", "problem": 54, "user": "5361a4f2e4b0243289761e47"}, {"code": "#(loop [l %2\n        acc '()]\n   (if (< (count l) %1) acc\n     (recur (drop %1 l) (concat acc (list (take %1 l))))))", "problem": 54, "user": "537e745ae4b06839e8705ea6"}, {"code": "(fn mypartition [n s]\n  (cond \n  \t(< (count s) n) []\n   \t:else (concat [(take n s)] (mypartition n (drop n s)))))", "problem": 54, "user": "53834ed3e4b06839e8705edb"}, {"code": "(fn [n xs]\n  (->> xs\n       (reduce (fn [[out, pending] x]\n                 (let [pending (cons x pending)]\n                   (if (= (count pending) n)\n                     [(cons pending out) ()]\n                     [out, pending])))\n               [() ()])\n       (first)\n       (map reverse)\n       reverse))", "problem": 54, "user": "53800d99e4b06839e8705ebd"}, {"code": "(fn [c xs]\n  (loop [r xs ret []]\n    (if (< (count r) c)\n      ret\n      (recur (drop c r) (conj ret (take c r))))))", "problem": 54, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "#(loop [res []\n       s (seq %2)]\n  (if (< (count s) %1)\n    res\n    (recur (conj res (take %1 s)) (drop %1 s))))", "problem": 54, "user": "53820087e4b06839e8705ecf"}, {"code": "(fn f [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (f n (drop n v)))))", "problem": 54, "user": "53736f65e4b06d7f452d9e0f"}, {"code": "#(for [i (range 0 (count %2) %)\n       :while (<= (+ i %) (count %2))]\n   (->> %2\n    (drop i)\n    (take %)))", "problem": 54, "user": "537f4652e4b06839e8705eb1"}, {"code": "(fn [n coll]\n   (loop [c coll\n          r []]\n     (if (< (count (take n c)) n)\n       r\n       (recur (drop n c) (conj r (take n c))))))", "problem": 54, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "#(loop [c %2\r\n         result []]\r\n    (if (>= (count c) %)\r\n      (recur (drop % c)\r\n             (conj result (take % c)))\r\n      result))", "problem": 54, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "(fn part [n col]\n    (if (>= (count col) n)\n        (cons (take n col) (part n (take-last (- (count col) n) col)))) )", "problem": 54, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn my-partition-limited [n xs]\n  (let [next-xs (take n xs)]\n    (when (= n (count next-xs))\n      (lazy-seq \n       (cons next-xs \n             (my-partition-limited n (drop n xs)))))))", "problem": 54, "user": "51b24defe4b02f8f128bb963"}, {"code": "(fn [n seqn]\n  (loop [seqn seqn\n         res  []\n         cur  []\n         i    0]\n    (if (empty? seqn)\n      res\n      (let [x (first seqn)]\n        (if (zero? (mod (inc i) n))\n          (recur (rest seqn) (conj res (conj cur x)) [] (inc i))\n          (recur (rest seqn) res (conj cur x) (inc i)))))))", "problem": 54, "user": "53889587e4b0640c7a9a589e"}, {"code": "(fn part [n l]\n  (if (< (count l) n)\n    '()\n    (cons (take n l) (part n (drop n l)))))", "problem": 54, "user": "53767991e4b06839e8705e25"}, {"code": "(fn parts [n lst]\n  (if (> n (count lst))\n    nil\n    (conj (parts n (drop n lst))\n          (take n lst))))", "problem": 54, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn [n s]\n  (loop [r [] a [] s s]\n    (cond\n     (= (count a) n) (recur (conj r a) [] s)\n     (empty? s) r\n     :else (recur r (conj a (first s)) (rest s)))))", "problem": 54, "user": "4fde492be4b05e33b9224f8a"}, {"code": "(fn [n s]\n  (loop [in s out []]\n    (cond\n      (> n (count in)) out\n      :else (recur (drop n in) (conj out (take n in))))))", "problem": 54, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn [size coll]\n  (loop [xs coll result []]\n    (if (> size (count xs)) \n      result\n      (recur (drop size xs) (conj result (take size xs))))))", "problem": 54, "user": "534d5ab7e4b084c2834f4a9c"}, {"code": "(fn p [n s]\n  (if (>= (count s) n)\n    (cons (take n s) (p n (drop n s)))))", "problem": 54, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "(fn [s col] (\n    partition-by\n    #(quot % s)\n    (drop-last (rem (count col) s) col)\n ))", "problem": 54, "user": "5356d00ee4b04ce2eb3ed26f"}, {"code": "(fn P [n x*]\n  (loop [x* x* p []]\n    (if (< (count x*) n) p\n        (recur (drop n x*)\n               (conj p (take n x*))))))", "problem": 54, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn part-seq [n coll]\n  (loop [x coll\n         y []]\n    (if (> n (count x)) y\n      (recur (drop n x) (conj y (take n x))))))", "problem": 54, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn [n coll]\n  (loop [sol []\n         xs coll]\n    (if (empty? xs)\n      sol\n      (recur (if (>= (count xs) n) (conj sol (take n xs)) sol)\n             (drop n xs)))))", "problem": 54, "user": "5360f043e4b0243289761e3c"}, {"code": "(fn p ([n xs] (p n xs '()))\n        ([n xs acc] (if (>= (count xs) n) (conj  (p n (drop n xs) acc) (take n xs)) acc)))", "problem": 54, "user": "53403110e4b085b17e897da6"}, {"code": "(fn ptn [n s]\n  (if (< (count s) n)\n    '()\n    (cons (take\tn s) (ptn n (drop n s)))))", "problem": 54, "user": "530bf87ee4b02e82168697d5"}, {"code": "(fn my-partition [n xs]\n  (if (< (count xs) n)\n    nil\n    (concat [(take n xs)] (my-partition n (drop n xs)))))", "problem": 54, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn [n c]\n  (let [[r num-partitions c-count]\n        (reduce (fn [[r i j] e]\n                  (if (zero? (mod j n))\n                    [(conj r (vector e)) (inc i) (inc j)]\n                    [(update-in r [i] conj e) i (inc j)]))\n                [[] -1 0]\n                c)]\n    (if (zero? (mod c-count n))\n      r\n      (pop r))))", "problem": 54, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn [n x]\n  (remove #(< (count %) n)\n    ((fn p [n x]\n      (concat \n      [(take n x)]\n      (if (empty? x)\n          []\n          (p n (drop n x))))) n x)))", "problem": 54, "user": "53940789e4b0b51d73faaec3"}, {"code": "(fn myp [n coll]\n  (let [coll-count (count coll)\n        c2 (drop-last (mod coll-count n) coll)]\n    (loop [acc []\n           lst c2]\n      (if (not-empty lst)\n        (recur (conj acc (take n lst)) (drop n lst))\n        acc))))", "problem": 54, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn mypart [q l]\n  (if (< (count l) q) []\n  (cons (take q l) (mypart q (drop q l)))))", "problem": 54, "user": "53979a87e4b0b51d73faaef0"}, {"code": "(fn mypart [n s] (if (>= (count s) n) (cons (take n s) (mypart n (drop n s)))))", "problem": 54, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "(fn f [n s]\n  (let [len (* n (quot (count s) n))\n        part-zm (partition-by #(quot (key %) n) (reverse (zipmap (range len) (take len s))))]\n    (map vals part-zm)))", "problem": 54, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn f [n xs] (let [splitted (split-at n xs)] (if (< (count (first splitted)) n) () \n                                               (conj (f n (second splitted)) (first splitted)))))", "problem": 54, "user": "53976599e4b0b51d73faaeea"}, {"code": "(fn [n s]\n  (loop [r s\n         result nil]\n    (if (< (count r) n)\n      (reverse result)\n      (recur\n       (drop n r)\n       (cons (take n r) result)))))", "problem": 54, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "(fn fake-partition [x list]\n      (for [start (range (int (/ (count list) x)))]\n        (take x (drop (* x start) list))))", "problem": 54, "user": "53838742e4b06839e8705ee0"}, {"code": "(fn my-part [n a-range]\n  (loop [rest-seq a-range\n         acc []]\n    (if (> n (count rest-seq)) acc\n      (let [a (take n rest-seq)\n            new-acc (conj acc a)\n            c (drop n rest-seq)]\n        (recur c new-acc)))))", "problem": 54, "user": "52ee46e5e4b05e3f0be25ec5"}, {"code": "(fn [ n c]\n    (loop [ xs c acc []]\n        (if (seq xs)\n            (recur (drop n xs) (conj acc (take n xs)))\n            (filter #(= n (count %)) acc))))", "problem": 54, "user": "5398305fe4b0b51d73faaef6"}, {"code": "(fn [n col]\n  (loop [col col res nil]\n    (if (seq col)\n      (recur (drop n col) (conj res (take n col)))\n      (filter #(= (count %) n) (reverse res)))))", "problem": 54, "user": "539c64cde4b0b51d73faaf2a"}, {"code": "(fn [n coll]\n    (take-while #(== n (count %)) (map (partial take n) (iterate (partial drop n) coll))))", "problem": 54, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn par [n s]\n  (when-not (< (count s) n)\n    (cons (take n s) (par n (drop n s)))\n    ))", "problem": 54, "user": "53908e6be4b0b51d73faae9a"}, {"code": "(fn [n coll] (let [l (reduce #(if (= (count (last %1)) n)\n                                (concat %1 (list (list %2)))\n                                (concat (butlast %1) (list (concat (last %1) (list %2)))))\n                             '(()) coll)]\n               (if (< (count (last l)) (count (first l)))\n                 (butlast l)\n                 l)))", "problem": 54, "user": "53a1b5c8e4b0ca733b9744c1"}, {"code": "(fn [n coll]\n  (loop [coll coll acc []]\n    (if (or (empty? coll) (< (count coll) n))\n      acc\n      (recur (drop n coll) (conj acc (take n coll))))))", "problem": 54, "user": "53886d2fe4b0640c7a9a589d"}, {"code": "(fn\n  [n coll]\n  (letfn [(r [coll] (lazy-seq\n                      (if (< (.size coll) n)\n                          '()\n                          (let [[a b] (split-at n coll)]\n                            (cons a (r b))))))]\n    (r coll)))", "problem": 54, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn part [n coll]\n  (let [[x r] (split-at n coll)]\n    (when (= (count x) n) (cons x (part n r)))))", "problem": 54, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn my-partition\n  [n coll]\n  (if (< (count coll) n) '()\n  (lazy-seq (cons (take n coll)\n                  (my-partition n (drop n coll))))))", "problem": 54, "user": "536e5055e4b0fc7073fd6e6b"}, {"code": "(fn part [n l]\n  (if (> n (count l))\n    nil\n    (conj (part n (drop n l)) (take n l))))", "problem": 54, "user": "5396c94be4b0b51d73faaee3"}, {"code": "(fn [num coll]\n   (loop [res [] coll coll] \n     (if (< (count coll) num) \n       res\n       (recur (conj res (take num coll)) (drop num coll) )\n       ) \n     )\n)", "problem": 54, "user": "5364ab34e4b0243289761e64"}, {"problem": 54, "code": "(fn [x coll]\n  (loop [s () r coll]\n    (if (not-empty r)\n      (recur (cons (take x r) s) (drop x r))\n      (take (quot (count coll) x)(reverse s)))))", "user": "538e864ee4b0b51d73faae87"}, {"problem": 54, "code": "(fn my-part [n s] (lazy-seq (let [x (split-at n s)] (if (= (count (first x)) n) (cons (first x) (my-part n (first (rest x))))))))", "user": "52eaba10e4b09f7907dd14c2"}, {"problem": 54, "code": "(fn xx [n s] (let [f (take n s) d (drop n s)] (if (= n (count f)) (cons f (if-not (empty? d) (xx n d))))))", "user": "53aa1528e4b047364c04443f"}, {"problem": 54, "code": "#(take (/ (count %2) %1) ((fn part [grid]\n  (let [stack (take %1 grid)]\n   (cond (>= (count stack) %1)\n    (concat (list stack) (lazy-seq (part (drop %1 grid))))))\n) %2))", "user": "53a5c7ffe4b0ef122a8689c4"}, {"problem": 54, "code": "(fn p [n sq]\n  (if (> n (count sq))\n    []\n    (concat (list (take n sq)) (p n (drop n sq)))))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 54, "code": "(fn [x l] (map #(take x (drop (* % x) l)) (range (int (/ (count l) x)))))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 54, "code": "(fn my-partition\n  [how-many coll]\n  (loop [acc []\n         curr (take how-many coll)\n         remaining (drop how-many coll)]\n    (if (< (count curr) how-many)\n      acc\n      (recur (conj acc curr) \n             (take how-many remaining)\n             (drop how-many remaining)))))", "user": "53ac4719e4b047364c04445c"}, {"problem": 54, "code": "(fn f [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (f n (drop n v)))))", "user": "53ae16e2e4b047364c044472"}, {"problem": 54, "code": "(fn p [n col]\n\t\t(if (> n (count col))\n\t\t\t'()\n\t\t\t(cons (take n col) (p n (drop n col)))))", "user": "53858594e4b06839e8705f05"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll\n         curr '()\n         acc '()\n         i 1]\n    (if (empty? coll)\n      acc\n      (let [curr (concat curr (list (first coll)))]\n        (if (= i n)\n          (recur (rest coll) '() (concat acc (list curr)) 1)\n          (recur (rest coll) curr acc (+ i 1))\n          )\n        )\n      )\n    )\n  )", "user": "5245e320e4b09dbe66b56177"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [start-list coll\n         end-list '()]\n    (if (< (count start-list) n)\n    \t(reverse end-list)\n      (recur (drop n start-list) (conj end-list (take n start-list)) ))))", "user": "53a7771ee4b047364c04441b"}, {"problem": 54, "code": "(fn [n remStuff & {:keys [result] :or {result '()}}] \n    (if (< (count remStuff) n) result\n        (recur n (drop n remStuff)\n               {:result (concat result (list (take n remStuff)))})))", "user": "52161db6e4b0bf4bffd29cb8"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (loop [res (list)\n         c coll]\n    (let [part (take n c)]\n      (if (= (count part) n)\n        (recur (concat res (list part)) (drop n c))\n        res))))", "user": "531bad96e4b08068f379ed93"}, {"problem": 54, "code": "(fn partition-seq [n xs] \n\t(take-while #(= n (count %)) (cons (take n xs) (lazy-seq (partition-seq n (drop n xs))))))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [xs xs\n         result []]\n   (let [[head tail] (split-at n xs)]\n    (if (= n (count head))\n      (recur tail (conj result head))\n      result))))", "user": "534d1173e4b084c2834f4a98"}, {"problem": 54, "code": "(fn part [n xs]\n  (when (>= (count xs) n)\n    (cons (take n xs) (part n (drop n xs)))))", "user": "5290257ae4b0239c8a67af03"}, {"problem": 54, "code": "(fn part [n sq]\n     (if-let [s (seq sq)]\n       (let [p (take n s)]\n         (when (= n (count p))\n           (cons p (part n (nthrest s n)))))))", "user": "4f867b25e4b033992c121c51"}, {"problem": 54, "code": "(fn p [n c]\n  (loop [r [] c c] \n    (if (< (count c) n) r (cons (take n c) (p n (drop n c))))))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 54, "code": "(fn pt [n coll]\n  (lazy-seq\n    (let [[p r] (split-at n coll)]\n      (if (= n (count p))\n        (cons p (pt n r))))))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 54, "code": "(fn my-partition [sz coll]\n\t(loop [current coll agg []]\n\t\t(if (or (empty? current) (< (count current) sz)) agg\n\t\t\t(recur (drop sz current) (conj agg (take sz current))))))", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 54, "code": "(fn d [n s] (filter #(= (count %) n) \n                      ((fn f [s1 s2] (if (empty? s1) (reverse s2) (recur (drop n s1) (conj s2 (take n s1)  ) ) )  ) s '() ) ) )", "user": "53b3ea79e4b047364c0444ab"}, {"problem": 54, "code": "(fn prtn [s c]\n  (if (< (count c) s)\n    '()\n    (apply cons ((fn [split] [(first split) \n                              (prtn s (last split))]) \n                 (split-at s c)))))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 54, "code": "(fn [amt lst]\n\t(loop [rm lst, acc (vector)]\n\t\t(cond (or (empty? rm)\n                  (< (count rm) amt)) acc\n               :else (recur (drop amt rm) (conj acc (take amt rm))))))", "user": "538e36c7e4b0b51d73faae81"}, {"problem": 54, "code": "(fn part [n coll]\n  (when-let [s (seq coll)]\n    (let [res (take n coll)]\n    \t(if (= n (count res))\n    \t\t(cons res (trampoline part n (nthrest coll n)))))))", "user": "53bdcf58e4b0d9a98559a6da"}, {"problem": 54, "code": "(fn part [i as]\n  ((fn f [xs b1 b2 n]\n     (if (empty? xs)\n       (if (= n (count b2))\n         (concat b1 [b2])\n         b1)\n       (if (= n (count b2))\n         (f xs (concat b1 [b2]) () n)\n         (f (rest xs) b1 (concat b2 [(first xs)]) n)))) as () () i))", "user": "53c051a5e4b0c98a41f5ccae"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (let [bites (quot (count coll) n)\n        steps (map #(* n %) (range bites))]\n    (map #(take n (drop % coll)) steps)))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 54, "code": "(fn my-partition [x coll] ( if(>= (count coll) x) (cons (take x coll) (my-partition x (drop x coll)))))", "user": "539b4268e4b0b51d73faaf1c"}, {"problem": 54, "code": "(fn [s col]\n  (loop [col col result []]\n    (if (>= (count col) s)\n      (recur (drop s col) (conj result (take s col)))\n      result )\n    )\n  )", "user": "53b530c6e4b047364c0444bc"}, {"problem": 54, "code": "(fn s\n  [n f ] (let [[t d] (split-at n f)] (when (>= (count t) n) (cons t (s n d)))))", "user": "5382704be4b06839e8705ed4"}, {"problem": 54, "code": "(fn [n x]\n  ((fn [x y]\n     (let [z (split-at n x)]\n       (if (= (count (z 0)) n)\n         (recur (z 1) (conj y (z 0)))\n         y))) x []))", "user": "53c63db5e4b00fb29b221296"}, {"problem": 54, "code": "(fn myfn1 [c l]\n            \n                  \n            (if (> c (count l) )\n              '()\n              (conj (myfn1 c (nthrest l c)) (take c l))\n              )\n           \n   )", "user": "531902b1e4b08068f379ed77"}, {"problem": 54, "code": "(fn [x y]\n  (let [z (count y) l (take (- z (mod z x)) y) s (reverse (range 0 (count l) x)) ]\n    (reduce #(conj % (take x (drop %2 l)))\n            ()\n            s)))", "user": "53aef31ce4b047364c04447b"}, {"problem": 54, "code": "(fn [w xs]\n  (take-while #(= w (count %))\n        ((fn lazypart [ys]\n          (lazy-cat [(take w ys)] (lazypart (drop w ys))))\n         xs)))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 54, "code": "(fn f [x y]\n  (when (>= (count y) x) (cons (take x y) (f x (drop x y)))))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 54, "code": "(fn [x s]\n  (loop [rs s res [] ]\n    (if (> x (count rs))\n      res\n      (recur (drop x rs) (conj res (take x rs))))))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 54, "code": "(fn f [l xs] (if (>= (count xs) l) (cons (take l xs) (f l (drop l xs)))))", "user": "52c7f036e4b0c2d177d62126"}, {"problem": 54, "code": "(fn [c r]\n   (loop [acc [] rin r]\n     (if (> c (count rin)) acc (recur (conj acc (take c rin)) (drop c rin)))))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 54, "code": "(fn [n c]\n  (filter #(= n (count %)) (vals (group-by #(quot % n) c))))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 54, "code": "(fn part [n s]\n  (let [[first-n rest] (split-at n s)]\n    (when (= n (count first-n))\n      (cons first-n \n            (part n rest)))))", "user": "53c0bc5fe4b00fb29b221257"}, {"problem": 54, "code": "(fn [n c] (filter #(= (count %) n) (partition-by #(quot % n) c)))", "user": "4e6961f0535d8ccf87e9fe9b"}, {"problem": 54, "code": "(fn p [a s]\n  (let [res (reduce \n               (fn [prev n]\n                 (if (< (count (first prev)) a)\n                   (conj (rest prev) (conj (first prev) n))\n                   (conj prev (list n)))) [] s)\n        res1 (if (< (count (first res)) a) (rest res) res)\n        res2 (reverse res1)\n        res3 (map reverse res2)]\n res3))", "user": "51aefceee4b09397d5109797"}, {"problem": 54, "code": "(fn par[n s]\n  (if (> n (count s) ) nil\n    (cons (take n s) (par n (drop n s)))))", "user": "4e8849c5535d8b9bb0147ca4"}, {"problem": 54, "code": "(fn [x s]\n    (loop [n s\n           r '()]\n      (if (> x (count n))\n        (reverse r)\n        (recur (drop x n) (conj r (take x n))))))", "user": "538db083e4b0b51d73faae74"}, {"problem": 54, "code": "(fn ps [n s] (loop [chunks [] r s]\n            (if (< (count r) n)\n              (apply list chunks)\n              (recur (conj chunks (take n r)) (drop n r)) )))", "user": "53ced9fee4b00fb29b2212f8"}, {"problem": 54, "code": "(fn\n   [n xs]\n   (let [m (quot (count xs) n)]\n     (for [i (range m)]\n       (take n (drop (* i n) xs))\n       )\n     \n     )\n   \n   )", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 54, "code": "(fn my-partition [n coll]\n        (if (> n (count coll))\n          '()\n          (concat (list (take n coll)) (my-partition n (drop n coll)))))", "user": "52efd3d9e4b05e3f0be25ed4"}, {"problem": 54, "code": "(fn [n a]\n  (letfn [(f [b c]\n            (let [m (split-at n b)]\n              (if (< (count (first m)) n)\n                c\n                (f\n                  (last m)\n                  (conj c (first m))))))]\n    (f a [])))", "user": "53d612cbe4b0e771c3025452"}, {"problem": 54, "code": "(fn [n coll]\n  (first\n    (reduce\n     (fn [[acc k cur] el]\n       (if (= k n)\n         [(conj acc (conj cur el)) 1 []]\n         [acc (inc k) (conj cur el)]\n         ))\n     [[] 1 []]\n     coll)))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 54, "code": "(fn partt [n col]\n  (loop [rs [], e [], c col]\n    (if (empty? c)\n      (if (= n (count e))\n          (concat rs [e])\n          rs\n      )\n      (if (= n (count e))\n          (recur (concat rs [e]) [] c)\n          (recur rs (concat e [(first c)]) (rest c))\n      )\n    )\n  )\n)", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 54, "code": "(fn f [n coll]\n  (if (<= n (count coll))\n    (cons (take n coll) (f n (drop n coll)))))", "user": "53da19fde4b0e771c3025484"}, {"problem": 54, "code": "(fn pt [n x] \n  (let [p (take n x)]\n    (if (= n (count p))\n        (conj (pt n (drop n x)) p)\n      \t'()\n    )\n  )\n)", "user": "53d5e45ae4b0e771c302544e"}, {"problem": 54, "code": "(fn part [n coll]\n    (if (seq coll)\n      (let [fst (take n coll)]\n        (if (= n (count fst))\n          (cons fst (part n (drop n coll)))))))", "user": "53dcdde4e4b0d874e779ae24"}, {"problem": 54, "code": "(fn group [n se] (filter #(= n (count %)) (rest (loop [coll (split-at 0 se)]\n  (if (<= (count (last coll)) n)\n    coll\n  (recur (concat (drop-last coll) (split-at n (last coll)))))))))", "user": "5143824ae4b0b4fb4ace5f36"}, {"problem": 54, "code": "(fn part [n xs]\n  (when (>= (count xs) n)\n    (cons (take n xs) (part n (drop n xs)))))", "user": "53dcf474e4b0d874e779ae25"}, {"problem": 54, "code": "(fn [n l] (loop [l1 l l2 []] (if (>= (count l1) n) (recur (drop n l1) (conj l2 (take n l1))) l2)))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 54, "code": "(fn partitioner [freq coll]\n  (loop [so-far [[]]\n         rem-coll coll]\n    (if (empty? rem-coll) \n      (if (< (count (last so-far)) freq) (drop-last so-far) so-far)\n      (let [current (first rem-coll)\n            last-of-so-far (last so-far)\n            at-pos (.indexOf so-far last-of-so-far)]\n        (if (< (count last-of-so-far) freq)\n          (recur (assoc so-far at-pos (conj last-of-so-far current))\n                 (rest rem-coll))\n          (recur (conj so-far (vector current))\n                 (rest rem-coll)))))))", "user": "53d40508e4b00fb29b221332"}, {"problem": 54, "code": "(fn p[n s] (cons (take n s) (if (>= (count (drop n s)) n) (p n (drop n s)) ())))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (if (< (count coll) n)\n      '()\n      (conj (my-partition n (drop n coll)) (take n coll))))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 54, "code": "(fn p [n coll]\n (when (>= (count coll) n)\n   (let [[f r] (split-at n coll)]\n     (cons f (when-let [s (seq r)]\n                (p n s))))))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 54, "code": "(fn ps [n s]\n  (if (< (count s) n) '()\n    (concat [(take n s)] (ps n (drop n s)))))", "user": "53e2b212e4b036ad0777e3f4"}, {"problem": 54, "code": "(fn my-partition [n coll]\n    (let [[x y] (split-at n coll)]\n      (if (>= (count coll) n)\n        (cons x (my-partition n y)))))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 54, "code": "#(loop [f (list (take %1 %2))\n         r (drop %1 %2)]\n    (if (empty? r)\n      (reverse f)\n      (if (= (count (take %1 r)) %1)\n        (recur (conj f (take %1 r)) (drop %1 r))\n        (recur f (drop %1 r)))))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (loop [xs coll res []]\n    (if (< (count xs) n)\n      res\n      (recur (drop n xs) (conj res (take n xs))))))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 54, "code": "(fn my-partition [n s]\n    ((fn [ret cur-part seq-rest]\n        (if (empty? seq-rest)\n            ret\n            (if (= (count cur-part) (dec n))\n                (recur\n                    (conj ret (conj cur-part (first seq-rest)))\n                    []\n                    (rest seq-rest))\n                (recur\n                    ret\n                    (conj cur-part (first seq-rest))\n                    (rest seq-rest))))) [] [] s))", "user": "53a94b63e4b047364c044434"}, {"problem": 54, "code": "(fn my-part [n lyst]\n  (let [[h t] (split-at n lyst)]\n    (when (= (count h) n)\n      (cons h (my-part n t)))))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 54, "code": "(fn part [n c]\n  (if (>= (count c) n)\n    (apply list (take n c) (part n (drop n c))\n    ;(cons (take n c) (part n (drop n c)) ;better!\n  )))", "user": "53ecac57e4b0d648e757f4b3"}, {"problem": 54, "code": "(fn my-partition [x s]\n  (loop [remaining-items s\n         partitioned '()]\n    (if (< (count remaining-items) x)\n      (reverse partitioned)\n      (recur (drop x remaining-items) (into partitioned (list (take x remaining-items)))))))", "user": "53791ab7e4b06839e8705e4d"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (let [nxt (take n s)]\n    (if (< (count nxt) n)\n      nil\n      (cons nxt (my-partition n (drop n s))))))", "user": "53edb464e4b0d648e757f4c7"}, {"problem": 54, "code": "#((fn part [c]\n   (if (>= (count c) %)\n     (cons (take % c) (lazy-seq (part (drop % c)))))) %2)", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 54, "code": "(fn f [n coll] (when (>= (count coll) n) (cons (take n coll) (f n (drop n coll)))))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 54, "code": "(fn part [x s]\n  (let [ss (take x s)]\n    (if (< (count ss) x) nil\n      (cons ss (part x (drop x s)))\n      )))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 54, "code": "(fn part [n coll]\n    (if (>= (count coll) n)\n      (cons (take n coll)(part n (drop n coll)))))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 54, "code": "(fn part [split coll]\n  (let [num-items (count coll)\n        step (/ num-items split)]\n    (for [i (range step)\n          :let [start (* i split)\n                end (+ start split)]\n          :when (>= num-items end)]\n      (subvec (vec coll) start end))))", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 54, "code": "(fn p54 [parts coll]\n  (loop [buckets [] bucket [] i parts coll coll]\n    (if-not (seq coll)\n      (if (zero? i)\n        (conj buckets bucket)\n        buckets)\n      (if (zero? i)\n        (recur (conj buckets bucket) [] parts coll)\n        (recur buckets (conj bucket (first coll)) (dec i) (next coll))))))", "user": "505bd09fe4b032b709c81373"}, {"problem": 54, "code": "(fn f [n xs]\n  (loop [r xs acc []]\n    (if (< (count r) n)\n        (reverse acc)\n        (recur (drop n r) (cons (take n r) acc))\n    )\n  )\n)", "user": "51897709e4b0288ada3dbdaa"}, {"problem": 54, "code": "(fn foo [n xs] (if (<= n (count xs)) (cons (take n xs) (foo n (drop n xs)))))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 54, "code": "(fn [len coll]\n  (loop [c coll\n         acc []]\n    (if (< (count c) len)\n      (apply list acc)\n      (recur (drop len c) (conj acc (take len c)))\n    )\n  )\n)", "user": "53f7820be4b0de5c41848560"}, {"problem": 54, "code": "(fn x[a b]\n  (if (<= a (count b))\n   (cons (take a b) (x a (drop a b)))))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 54, "code": "(fn e-54 [n coll]\n  (if (>= (count coll) n)\n    (concat (list (take n coll)) (e-54 n (drop n coll)))\n    ))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 54, "code": "(fn [l coll]\n  (loop [r [] s (seq coll)]\n    (if (< (count s) l)\n      r\n      (recur (conj r (take l s)) (drop l s)))))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 54, "code": "(fn xs [n x]\n  (loop [a x b () c () m (dec n)] \n   (cond (empty? a) (reverse (map reverse c))\n         (zero? m) (recur (rest a) () (cons (conj b (first a)) c) (dec n))\n         :else (recur (rest a) (conj b (first a)) c (dec m)))))", "user": "53e91473e4b036ad0777e495"}, {"problem": 54, "code": "(fn part [n coll]\n  (loop [rem_coll coll result '()]\n    (if (< (count rem_coll) n)\n      (reverse result)\n      (recur\n        (drop n rem_coll)\n        (conj result (take n rem_coll))\n      )\n    )\n  )\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "53f75957e4b0de5c4184855d"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [elms coll out []]\n    (if (seq elms)\n      (recur (drop n elms) (if (<= n (count elms)) \n                             (conj out (take n elms))\n                             out))\n      out)))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 54, "code": "(fn f [x l]\n   (if (< (count l) x)\n     ()\n     (concat (list (take x l)) (f x (drop x l)))))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 54, "code": "(fn [n  coll]\n   (->> (range (quot (count coll) n))\n        (map #(* n %))\n        (map (fn [base]\n               (->> (range n)\n                    (map #(+ base %))\n                    (map #(nth coll %)))))))", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 54, "code": "(fn part [n coll] (if (>= (count coll) n) (cons (take n coll) (part n (drop n coll)))))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 54, "code": "(fn mypartition [n coll]\n  (when (<= n (count coll)) \n    (cons (take n coll) (mypartition n (drop n coll)))))", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 54, "code": "(fn partition2 [n coll]\n   (if (<= n (count coll))\n     (cons (take n coll) (partition2 n (drop n coll)))\n     nil))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 54, "code": "#(let [pt (fn pt [n coll]\n  (lazy-seq \n   (when-let [s (seq coll)]\n     (let [p (take n s)]\n       (when (= n (count p))\n         (cons p (pt n (nthrest s n))))))))] (pt %1 %2))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 54, "code": "(fn [n ls] \n  (loop [n n, ls ls, acc '()  ]\n    (let [split-ls (split-at n ls)]\n      (if (< (count ls) n)\n        (reverse acc)\n        (recur n (second split-ls) (cons (first split-ls) acc))))))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 54, "code": "#(loop [coll %2 res []] \n  (let [n-items (take %1 coll)] \n    (if (= %1 (count n-items))\n      (recur (drop %1 coll) (conj res n-items))\n    res)))", "user": "50856bd1e4b004985b776e4c"}, {"problem": 54, "code": "(fn [n c]\n   (filter #(= n (count %)) (reduce #(cond (> n (count (last %1))) (concat (drop-last %1) (list (concat (last %1) (list %2))))\n                                             true (concat %1 (list (list %2)))) '(()) c)))", "user": "52fac708e4b047fd55836fff"}, {"problem": 54, "code": "(fn t [x y] (if (> x (count y)) (list ) (cons (take x y) (t  x (nthrest  y x) ))))", "user": "53fdc4b8e4b0de5c418485ea"}, {"problem": 54, "code": "(fn [b s]\n  (loop [acc []  s (drop-last (mod (count s) b) s)]\n    (if (empty? s)\n      acc\n      (recur (conj acc (take b s)) (drop b s)))))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 54, "code": "(fn[n se]\n   (loop [n n se se acc []]\n     (let [p (doall (take n se))]\n       (if (= n (count p))\n         (recur n (nthrest se n) (conj acc p))\n         acc))))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 54, "code": "(fn partition-sequence [n coll]\n  (loop [result []\n         inter-coll (split-at n coll)]\n    (if (not= n (count (first inter-coll)))\n      result\n      (recur (conj result (first inter-coll))\n             (split-at n (second inter-coll))))))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 54, "code": "(fn peu [x y] (if (< (count y) x) '() (cons (take x y) (lazy-seq (peu x (drop x y))))))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 54, "code": "(fn [n c]\n   (loop [ret [] eat c]\n     (if (>= (count eat) n)\n       (recur (conj ret (take n eat)) (drop n eat))\n       (apply list ret))))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 54, "code": "(fn part [n xs]\n  (if (<= n (count xs))\n    (let [[pre post] (split-at n xs)] \n      (cons pre (part n post)))))", "user": "4ff4bed0e4b0678c553fc35f"}, {"problem": 54, "code": "(fn partition'\n  [n coll]\n  (let\n    [start (take n coll)\n     tail (drop n coll)]\n   (if (< (count start) n)\n    '()\n    (conj (partition' n tail) start))))", "user": "540b2dcbe4b0addc1aec66f4"}, {"problem": 54, "code": "(fn mypart [n xs]\n  (take (quot (count xs) n) (map #(take n %) (iterate #(drop n %) xs))))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 54, "code": "(fn ! [n c]\n  (let [x (take n c)]\n    (if (< (count x) n)\n      nil\n      (cons x (! n (drop n c))))))", "user": "51780bfce4b0f89a8f53839c"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [xs' xs rs []]\n    (if (< (count xs') n)\n      rs\n      (recur (drop n xs') (conj rs (take n xs')))\n      ))\n  )", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 54, "code": "(fn partition2 [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (partition2 n (drop n coll)))))", "user": "53578543e4b04ce2eb3ed280"}, {"problem": 54, "code": "(fn partition2 [n coll]\n  (lazy-seq\n  (when (<= n (count coll )) \n    (cons (take n coll) (partition2 n (drop n coll))))\n  ))", "user": "537b1083e4b06839e8705e64"}, {"problem": 54, "code": "(fn [n squ]\n  (loop [result []\n         acc [(first squ)]\n         counter 1\n         squ (rest squ)]\n    (if (empty? squ)\n      (if (= counter n)\n        (concat result [acc])\n        result)\n      (recur (if (= counter n)\n               (concat result [acc])\n               result)\n             (if (= counter n)\n               [(first squ)]\n               (concat acc [(first squ)]))\n             (if (= counter n)\n               1\n               (inc counter))\n             (rest squ)))))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 54, "code": "(fn [sz xs]\n  (loop [my-vec []\n         my-xs xs]\n    (if (and (seq my-xs) (>= (.size (seq my-xs)) sz))\n      (recur (conj my-vec (take sz my-xs)) (drop sz my-xs))\n      my-vec)))", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 54, "code": "(fn part\n  [n coll]\n  (if (> n (count coll))\n    []\n   (cons (take n coll) (part n (drop n coll)))))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 54, "code": "(fn [x y] (keep #(if (= (count %) x) %) (map #(take x %) (take (count y) (iterate #(if (> (count %) 0) (drop x %)) y)))))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 54, "code": "(fn [size coll]\n   (map (fn [x] (take size (drop (* x size) coll)))\n        (range (quot (count coll) size))))", "user": "54094824e4b0addc1aec66da"}, {"problem": 54, "code": "(fn [length coll]\n  (loop [collection coll result []]\n    (if (<= length (count collection))\n      (recur (drop length collection) (conj result (take length collection)))\n      result)))", "user": "528bba38e4b0239c8a67aea9"}, {"problem": 54, "code": "(fn my-partition [n xs]\n  (lazy-seq\n   (let [first  (take n xs)\n         length (count first)\n         rest   (drop n xs)]\n     (if (not= n length)\n       nil\n       (cons first (my-partition n rest))))))", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [p [] s coll]\n    (if (< (count s) n)\n      p\n      (recur (conj p (take n s)) (drop n s)))))", "user": "507330e6e4b0e3170b5a8698"}, {"problem": 54, "code": "(fn partition* [n xs]\n   (let [nxs (take n xs)]\n     (if (< (count nxs) n)\n       '()\n       (cons nxs (lazy-seq (partition* n (drop n xs)))))))", "user": "540e17c3e4b0addc1aec6719"}, {"problem": 54, "code": "(fn part [cnt items] (when (>= (count items) cnt) (concat [(take cnt items)] (part cnt (drop cnt items)))))", "user": "540904a7e4b0addc1aec66d2"}, {"problem": 54, "code": "(fn [n x]\n  (filter #(= n (count %))\n          (map (partial take n)\n               (take-while (complement empty?) (iterate (partial drop n) x)))))", "user": "53e543efe4b036ad0777e457"}, {"problem": 54, "code": "#(loop [i (-> %2 count (quot %) dec), result '()]\n   (if (< i 0)\n     result\n     (recur (dec i) (cons (->> %2 (drop (* i %)) (take %)) result))))", "user": "4fad9da0e4b081705acca23c"}, {"problem": 54, "code": "(fn [n is]\n   (loop [r '[] s is]\n     (if (< (count s) n)\n       r\n       (recur (conj r (take n s)) (drop n s)))))", "user": "540e0637e4b0addc1aec6717"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [s xs ret []]\n    (if (> (count s) (- n 1))\n      (recur (drop n s) (conj ret (vec (take n s))))\n      ret)))", "user": "53d86564e4b0e771c302546b"}, {"problem": 54, "code": "(fn f [n coll] (if (>= (count coll) n) (cons (take n coll) (f n (drop n coll)))))", "user": "541096bde4b01498b1a719b2"}, {"problem": 54, "code": ";;\n(fn [n s]\n   (loop [acc '() s s]\n     (if (= '() s)\n       acc\n    (let [part (take n s)\n        nrest (nthrest s n)]\n      (if (< (count part) n)\n        acc\n      (recur  (concat acc  (conj '() part)) nrest))))))", "user": "4df9c598535d04ed9115e77a"}, {"problem": 54, "code": "(fn [n xs] \n  (loop [xs xs\n         result []]\n    (if (< (count xs) n)\n      result      \n      (recur (drop n xs) (conj result (take n xs))))))", "user": "54187e84e4b01498b1a71a1b"}, {"problem": 54, "code": "(fn [x s]\n  (loop [s s\n         acc '()]\n    (if (< (count s) x)\n      (reverse acc)\n      (recur (drop x s) (cons (take x s) acc))\n    )\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [base coll\n         res []]\n    (let [[t d] (split-at n base)]\n      (if (= n (count t))\n        (recur d (conj res t))\n        res))))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 54, "code": "(fn mypartition\n  [n col]\n  (if (> n (count col))\n    (list)\n    (cons (take n col) (mypartition n (nthnext col n)))))", "user": "53806e5be4b06839e8705ec1"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [[f more] (split-at n coll)\n         ans []]\n    (if (empty? more)\n      (if (= (count f) n) (concat ans [f]) ans)\n      (recur (split-at n more)\n             (concat ans [f]))\n    )\n  )\n)", "user": "54149f2fe4b01498b1a719ec"}, {"problem": 54, "code": "#((fn f [r c]\n    (if (< (count c) %) r\n        (f (conj r (take % c)) (drop % c)))) [] %2)", "user": "53500869e4b084c2834f4ad3"}, {"problem": 54, "code": "(fn f [n c]\n  (if (< (count c) n)\n    []\n    (cons (take n c) (f n (drop n c)))))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 54, "code": "#(loop [s %1 l %2 r []]\n   (if (> s (count l)) r\n     (recur s (drop s l) (conj r (take s l)))))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 54, "code": "(fn p [n c] (when (seq c) (apply list (take n c) (p n (drop (if (<= (* 2 n) (count c)) n (count c)) c)))))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 54, "code": "(fn [n col]\n          ((fn [ncol col]\n             (let [[fs ss] (split-at n col)]\n               (if (< (count fs) n)\n                 ncol\n                 (recur (conj ncol fs) ss)))) [] col))", "user": "4eb3fcba535d7eef30807359"}, {"problem": 54, "code": "(fn [n xs]\n\t(loop [xs xs acc []]\n\t\t(if (< (count xs) n) acc\n\t\t\t(recur (drop n xs) (conj acc (take n xs)))\n\t\t)\n\t)\n)", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 54, "code": "(fn [p col]\n  (take-while #(= (count %) p)\n              ((fn foo [n c]\n                (cons (take n c)\n                      (lazy-seq (foo n (drop n c))))) p col)))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 54, "code": "(fn [n lst]\n  (loop [d 0 nlst []]\n    (cond\n      (= (quot (count lst) n)\n         (count nlst)) nlst\n      :else (recur (+ d n)\n                   (conj nlst (vec (take n (drop d lst))))))))", "user": "52474133e4b05ef8e38e635e"}, {"problem": 54, "code": "(fn this [size xs]\n  (if (<= size (count xs))\n    (cons (take size xs) (this size (drop size xs))))\n)", "user": "541168dee4b01498b1a719c3"}, {"problem": 54, "code": ";; 54\n(fn mypartition [n x]\n  (let [[a b] (split-at n x)]\n    (if (= (count a) n)\n      (cons a (mypartition n b)))))", "user": "541475afe4b01498b1a719eb"}, {"problem": 54, "code": "(fn f [n col]\n  (loop [ret []\n         col col]\n    (cond\n      (nil? (seq col))  ret\n      (< (count col) n) ret\n      :else             (recur (conj ret (take n col)) (drop n col)))))", "user": "524b827ce4b09eba1c0223d7"}, {"problem": 54, "code": "(fn part\n  [n init]\n  (loop [x n\n         sofar []\n         remain init]\n    (if (< (count remain) x)\n      sofar\n      (recur n (conj sofar (take n remain)) (drop n remain)))))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 54, "code": "(fn prttn [n coll]\n    (lazy-seq\n     (when (>= (count coll) n)\n       (cons\n        (take n coll)\n        (prttn n (drop n coll))))))", "user": "5250b7a5e4b0541d1855b83e"}, {"problem": 54, "code": "(fn f [c s]\n  (loop [s s acc []]\n    (if (< (count s) c) \n      acc\n      (recur (drop c s) (conj acc (take c s)))\n      )))", "user": "54227fc6e4b01498b1a71ac0"}, {"problem": 54, "code": "(fn mypartition [n coll]\n   (let [\n         reversed-seqs (reduce\n                         (fn [acc x]\n                           (if (< (count (first acc)) n)\n                             (cons (cons x (first acc)) (rest acc))\n                             (cons [x] acc)))\n                         [[]]\n                         coll)\n         seqs (reverse (map reverse reversed-seqs))]\n     (filter (fn [s] (= (count s) n)) seqs)\n     ))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 54, "code": "(fn partition-s\n  [n s]\n  (loop [cs  s\n         acc []]\n    (if (< (count cs) n)\n      acc\n      (recur (drop n cs) (conj acc (take n cs))))))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 54, "code": "(fn [n s] (filter #(<= n (count %)) (vals (group-by #(quot % n) s))))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 54, "code": "(fn !\n    [x a]\n    (if \n        (<= x (count a))\n         (cons (take x a) (! x (drop x a)))\n         ))", "user": "542f574be4b0dad94371f2d0"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [left coll\n         result []]\n    (if (empty? left)\n      result\n      (recur (drop n left)\n             (let [part (take n left)]\n               (if (= n (count part))\n                 (conj result part)\n                 result))))))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 54, "code": "(fn _prt [n coll]\n  (loop [xs coll\n         ret '()]\n    (if (and (seq xs) (>= (count xs) n))\n      (recur (drop n xs) (cons (take n xs) ret))\n      (reverse ret))))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 54, "code": "(fn [n cl] (filter #(= (count %) n) (loop [rc [] c cl] (if-not (empty? c) (recur (conj rc (take n c)) (drop n c)) rc))))", "user": "53f78944e4b0de5c41848561"}, {"problem": 54, "code": "(fn partition-a-sequence [x xs]\n  (for [k (range (quot (count xs) x))\n        :let [n (* k x)]] \n    (take x (drop n xs))))", "user": "52616198e4b03e8d9a4a705e"}, {"problem": 54, "code": "(fn [n c]\n(map (fn [j d] (take-last j d))\n    (repeat n)\n\t(map (fn [i] (take i c)) (range n (inc (count c)) n))))", "user": "54349368e4b0b6b47310fcf1"}, {"problem": 54, "code": "(fn _ [n coll]\n    (let [taken (take n coll),\n          others (drop n coll)]\n\n      (if (= (count taken) n)\n        (cons  taken (_ n others))\n        )))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 54, "code": "#(loop [acc [] left %2]\n   (if (< (count left) %1)\n     acc\n     (recur (conj acc (take %1 left)) (drop %1 left))))", "user": "54397533e4b032a45b86931d"}, {"problem": 54, "code": "(fn myPartition [n coll] (if (< (count coll) n)\n                           \t []\n                           \t (cons (take n coll) (myPartition n (drop n coll)))\n                         )\n)", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 54, "code": "(fn [n xs]\n  (letfn [(f [m xs]\n            (if (> m 0)\n              (let [[head tail] (split-at n xs)]\n                (cons head (f (dec m) tail)))\n              '()))]\n\t(f (quot (count xs) n) xs)))", "user": "5339c105e4b0e30313ee6cae"}, {"problem": 54, "code": "(fn [n s]\n  (filter #(= n(count %)) (map #(map second %) (partition-by first (map-indexed #(vector (quot %1 n) %2) s))))\n  )", "user": "53e745a1e4b036ad0777e479"}, {"problem": 54, "code": "(fn p54[c s]\n  (loop [left c current s accum [] result '()]\n    (if (< left 1)\n      (if (or (empty? current) (< (count current) c))\n        (reverse (cons accum result))\n        (recur c current [] (cons accum result)))\n      (recur (dec left) (rest current) (conj accum (first current)) result)\n    )))", "user": "52ab61f5e4b0c58976d9ac75"}, {"problem": 54, "code": "(fn _partitaion \n  ([n xs] (_partitaion n xs '()))\n  ([n xs acc] (if (< (count xs) n) \n                acc\n                (recur n (drop n xs) (concat acc (list (take n xs)))))))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 54, "code": "(fn _part [n s]\n         (when (>= (count s) n)\n           (cons (take n s) (_part n (drop n s)))))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 54, "code": "(fn [cnt rg]\n  (loop [in rg out []]\n    (if (< (count in) cnt)\n      out\n      (recur (drop cnt in) (conj out (take cnt in))\n      )\n    )\n  )\n)", "user": "53ed03f0e4b0d648e757f4bb"}, {"problem": 54, "code": "(fn [x s]\n  (if (< (count s) x)\n    nil\n    (filter #(>= (count %) x)\n            (reduce #(if (< (count (last %)) x)\n                         (concat (butlast %) (list (concat (last %) (list %2))))\n                         (concat % (list (list %2))))\n                    (list (take x s))\n                    (nthrest s x)))))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 54, "code": "(fn part [k s]\n    (if (>= (count s) k)\n        (cons (take k s) (part k (drop k s)))))", "user": "54324be1e4b0dad94371f2ed"}, {"problem": 54, "code": "(fn f [n elems]    \n   (when (>= (count elems) n)\n   (cons\n      (take n elems)\n      (f n (drop n elems)))))", "user": "543f854fe4b032a45b86935b"}, {"problem": 54, "code": "(fn [n l] (loop [l l f []] (if (< (count l) n) f (recur (drop n l) (conj f (take n l))))))", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 54, "code": "(fn [p-seq coll]\n  (let [c-seq (reduce \n               (fn [v x]\n                 (println v)\n                 (if (>= (count (last v)) p-seq)\n                   (conj v [x])\n                   (assoc v (- (count v) 1) (conj (last v) x)))) [[]] coll)]\n    (if (< (count (last c-seq)) p-seq)\n      (butlast c-seq)\n      c-seq)))", "user": "542c2de0e4b0dad94371f29f"}, {"problem": 54, "code": "(fn myprt \n    ([n lst] (reverse (myprt n lst '())))\n    ([n lst acc] \n       (if (< (count lst) n)\n         acc\n         (myprt n \n                (drop n lst)  \n                (conj acc (take n lst))))))", "user": "543d89dfe4b032a45b869350"}, {"problem": 54, "code": "(fn [size coll]\n  (loop [result []\n         remaining coll]\n    (let [remaining-head (take size remaining)]\n      (if (and (seq remaining) (= size (count remaining-head))) \n        (recur (conj result remaining-head) (drop size remaining))\n              result ))))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 54, "code": "(fn f [n x]\n  (if (>= (count x) n)\n    (cons (take n x) (f n (drop n x)))))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 54, "code": "(fn part [n col]\n  (if (>= (count col) n)\n    (cons (take n col) (part n (drop n col)))))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 54, "code": "(fn [pre coll]\n   (loop [ret [] coll coll]\n     (if (> pre (count coll))\n       ret\n       (recur (conj ret (take pre coll)) (drop pre coll)))))", "user": "5370d152e4b0fc7073fd6e9d"}, {"problem": 54, "code": "(fn my-part [n coll]\n  (let [[l r] (split-at n coll)]\n    (if (< (count l) n)\n      nil\n      (cons l (lazy-seq (my-part n r))))))", "user": "50666699e4b03d366d7cb2b0"}, {"problem": 54, "code": "#(loop [n %1\n        s %2 \n        ret []]\n   (if (< (count s) n)\n      ret\n      (recur n (drop n s) (conj ret (take n s)))))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 54, "code": "(fn my-partition [n sequence]\n      (if (< (count sequence) n)\n        []\n        (cons (take n sequence) (my-partition n (drop n sequence)))))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 54, "code": "(fn mypart [n xs]\n  (loop [acc [] rs xs]\n    (if (< (count rs) n)\n      acc\n      (recur (conj acc (take n rs)) (drop n rs)))))", "user": "54448e84e4b032a45b869393"}, {"problem": 54, "code": "(fn [n xs]\n  (letfn \n    [(my-fun [ys]\n             (if \n               (or\n                (= ys '())\n                (> n (count ys))) '() (cons (take n ys) (my-fun (drop n ys)))))]\n    (my-fun xs)))", "user": "5447e08ce4b032a45b8693c3"}, {"problem": 54, "code": "(fn part-seq [n s]\n  (cond \n    (< (count s) n) nil\n    (= (count s) n) (list s)\n    :else (cons (take n s) (part-seq n (drop n s)))))", "user": "53ff8c31e4b0de5c41848603"}, {"problem": 54, "code": "(fn [n coll]\n   (let [mapped (map-indexed (fn [i x] [(- i (mod i n)) x]) coll)\n         grouped (group-by (fn [m] (first m)) mapped)\n         values (vals grouped)\n         results (map (fn [vg] (map (fn [v] (last v)) vg)) values)\n         filtered (filter (fn [r] (= (count r) n)) results)]\n     filtered))", "user": "5446ebc2e4b032a45b8693b8"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (if (< (count s) n)\n    nil\n    (cons (take n s) (my-partition n (drop n s)))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 54, "code": "(fn [n xs]\n      (loop [accum (vector)\n             l xs]\n        (if (empty? l)\n          accum\n          (let [[a b] (split-at n l)]\n            (if (= (count a) n)\n              (recur (conj accum a) b)\n              accum)))))", "user": "54487527e4b032a45b8693cc"}, {"problem": 54, "code": "(fn test [n coll]\n    (loop [i 0\n           current []\n           result []]\n      (println \"i\" i \"current\" current \"result\" result)\n      (if (= i (count coll))\n        (if (= (count current) n)\n          (conj result current)\n          result)\n        (if (= (count current) n)\n          (recur i [] (conj result current))\n          (recur (inc i) (conj current (nth coll i)) result)\n         )\n       )\n      )\n    )", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 54, "code": "(fn f [n coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (let [t (take n s)]\n        (when (= n (count t))\n          (cons t (f n (nthrest s n))))))))", "user": "544b699ce4b0e39780006964"}, {"problem": 54, "code": "(fn my-part [n s]\n  (if (< (count s) n)\n    []\n    (cons (take n s) (my-part n (drop n s)))))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 54, "code": "(fn part [n xs]\n      (cond\n        (empty? xs) nil\n        (< (count xs) n) nil\n        :else (remove nil? (cons (take n xs) (part n (drop n xs))))))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 54, "code": "(fn [n s]\n  (loop [y [], x s]\n    (if (<= n (count x))\n      (recur (concat y (vector (take n x))) (drop n x))\n      y\n)))", "user": "54524afbe4b0e397800069bc"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll\n         res []]\n    (let [next-group (take n coll)]\n      (cond\n       (empty? coll) res\n       (< (count next-group) n) res\n       :else (recur (drop n coll)\n                    (conj res next-group))))))", "user": "53322cece4b019098a6f8b73"}, {"problem": 54, "code": "(fn _partition [n xs]\n  (if (< (count xs) n)\n    []\n    (cons (take n xs) (_partition n (drop n xs)))))", "user": "542cb77ae4b0dad94371f2aa"}, {"problem": 54, "code": "(fn this [x s]\n    (let [nxt (take x s)]\n      (if (= (count nxt) x)\n          (cons (take x s)\n                (lazy-seq (this x (nthrest s x))))\n          '())))", "user": "5078d366e4b08327cd804a5b"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [acc [], c coll]\n    (if (and (seq c) (>= (count c) n))\n      (recur (conj acc (take n c))\n             (drop n c))\n      acc)))", "user": "505aa653e4b021387fb89857"}, {"problem": 54, "code": "(fn [n in-lst]\n  (loop [lst in-lst\n         acc '()]\n    (let [next (take n lst)]\n      (if (> n (count next))\n        (reverse acc)\n    \t(recur (drop n lst) (conj acc next))))))", "user": "5461c402e4b01be26fd746a6"}, {"problem": 54, "code": "(fn [n s]\n  (loop [acc [] xs s]\n    (if (>= (count xs) n)\n      (recur (conj acc (take n xs)) (drop n xs))\n      acc)))", "user": "5458c74de4b01be26fd74623"}, {"problem": 54, "code": "(fn [n coll]\n  (take-nth n\n            (apply map list (take n (iterate next coll)))))", "user": "5412646de4b01498b1a719d4"}, {"problem": 54, "code": "(fn mypartition [n l]\n  (if (>= (count l) n)\n    (cons (take n l)\n          (mypartition n (drop n l)))))", "user": "54651982e4b01be26fd746d4"}, {"problem": 54, "code": "#(reverse (loop [ n %1 coll %2 acc ()]\n   (if (> n (count coll))\n     acc \n     (recur n (drop n coll) (cons (take n coll) acc) ))))", "user": "54630e6be4b01be26fd746bc"}, {"problem": 54, "code": "(fn r [n coll](\n                 if (>= (count coll) n)\n                 (cons (take n coll) (r n (drop n coll)))\n              ))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 54, "code": "#(loop [groups [] coll %2]\n     (if (< (count coll) %1)\n       groups\n       (recur (conj groups (take %1 coll))\n              (drop %1 coll))))", "user": "537bde5de4b06839e8705e73"}, {"problem": 54, "code": "(fn [n s] (take-while #(= (count %) n) (map (partial take n) (iterate (partial drop n) s))))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 54, "code": "(fn [n v]\n\t(let [c (count v) limit (- c (mod c n))]\n\t\t(for [step (range 0 limit n)]\n\t\t\t(for [offset (range n)]\n                 (nth v (+ offset step))))))\n\n\n;;(fn p [n x]\n;;  (if (>= (count x) n)\n;;    (cons (take n x) (p n (drop n x)))))\n\n\n;;(fn [n s] (filter #(<= n (count %)) (vals (group-by #(quot % n) s))))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 54, "code": "(fn ps [n s] (if (empty? s) s (if (< (count s) n) () (cons (take n s) (ps n (drop n s))))))", "user": "5458a729e4b01be26fd74622"}, {"problem": 54, "code": "(fn [x s]\n  (let [n (quot (count s) x) s (vec s)]\n    (for [i (range n) :let [l (* i x) r (+ l x)]]\n      (subvec s l r)\n)\n)\n)", "user": "5464a536e4b01be26fd746cf"}, {"problem": 54, "code": "; use the parameters of range. Limit the range to len(col)-div(len(coll)).\n#(for [n (range 0 (- (count %2)(mod (count %2) %1)) %1)] (take %1 (nthrest %2 n)) )", "user": "545537c1e4b0e397800069dd"}, {"problem": 54, "code": "(fn part\n  [n coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (let [p (doall (take n s))]\n        (when (= n (count p))\n          (cons p (part n (nthrest s n))))))))", "user": "4ebbc1f6535dfed6da9c6d72"}, {"problem": 54, "code": "(fn my-partition\n  [n coll]\n  (when (seq coll)\n    (let [[p rest] (filter #(<= n (count %)) (split-at n coll))]\n      (cons p (my-partition n rest)))))", "user": "51ae350fe4b09397d5109790"}, {"problem": 54, "code": "(fn my-partition [x lst]\n  (if (> x (count lst)) nil\n    (cons (take x lst) (my-partition x (drop x lst)))))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 54, "code": "(fn[n coll]\n  (loop [[f & tail :as in] coll out [] cur []]\n    (cond (empty? in) out\n          :else (let [cur (conj cur f)]\n                  (cond (= n (count cur)) (recur tail (conj out cur) [])\n                        :else (recur tail out cur))))))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 54, "code": "(fn part [n s]\r\n  (if (>= (count s) n)\r\n    (concat (list (take n s)) (part n (drop n s)))\r\n    nil))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 54, "code": "(fn p [n s]\n  (if (>= (count s) n)\n    (cons (take n s) (p n (drop n s)))))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 54, "code": "(fn _partition [n ls]\n  (if (< (count ls) n)\n    ()\n    (cons (take n ls) (_partition n (drop n ls)))))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 54, "code": "(fn p [n xs]\n  (if (< (count xs) n)\n    '()\n    (cons (take n xs) (p n (drop n xs)))))", "user": "5136f659e4b04059df19f2fd"}, {"problem": 54, "code": "(fn part [len coll]\n  (if (>= (count coll) len)\n    (cons (take len coll) (part len (drop len coll)))))", "user": "4e580746535d8a8b8723a28c"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [input coll\n         output []]\n    (if (< (count input) n)\n      output\n      (recur (drop n input) (conj output (take n input))))))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 54, "code": "(fn [n coll]\n  (reduce\n    (fn [v [i e]]\n      (assoc v i\n        (conj (get v i []) e)))\n    []\n    (map-indexed\n      (fn [i e] [(quot i n) e])\n      (take (* n (quot (count coll) n)) coll))))", "user": "53a074a4e4b0ca733b9744af"}, {"problem": 54, "code": "(fn some-partition [val coll]\n   (when (<= val (count coll))\n     (cons (take val coll) (some-partition val (drop val coll)))))", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (if (< (count coll) n)\n    (list)\n    (cons (take n coll) (my-partition n (drop n coll)))))", "user": "54734a0de4b0c51c1f4d727b"}, {"problem": 54, "code": "(fn my-partition[n coll]\n  (if (> n (count coll))\n       (list)\n       (let [[head tail] (split-at n coll)]\n         (lazy-cat (list head) (my-partition n tail)))))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 54, "code": ";(fn f [n coll]\n;  (if (empty? coll)\n;    '()\n;    (let [x (list (take n coll))\n;          y (filter #(= n (count %)) x)\n;          z (f n (drop n coll))]\n;      (concat y z)\n;      )))\n\n(fn f [n coll]\n  (if (>= (count coll) n)\n    (cons (take n coll) (f n (drop n coll)))))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 54, "code": "#(loop [r [] c %2]\n  (if (< (count c) %)\n    r\n    (recur (conj r (take % c))\n           (drop % c))))", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 54, "code": "(fn f [i c] (if (< (count c) i) \n            '()\n            (let [[a b] (split-at i c)]\n                (cons a (f i b)))))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 54, "code": "(fn [n coll]\n  ((fn helper [acc x]\n     (if (< (count x) n)\n       acc\n      (helper (conj acc (take n x)) (drop n x)))) [] coll))", "user": "5456e4e7e4b080a794c2c883"}, {"problem": 54, "code": "(fn pas [n coll]\n  (when (>= (count coll) n)\n    (cons (take n coll) (pas n (drop n coll)))\n  ))", "user": "5475d755e4b0c51c1f4d72a0"}, {"problem": 54, "code": "(fn [x ys]\n  (loop [n (* x (quot (count ys) x))\n         ls ys\n         acc '()]\n    (if (<= n 0)\n      (reverse acc)\n      (recur (- n x) (drop x ls) (cons (take x ls) acc)))))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 54, "code": "(fn part [n coll]\n  (if (<= n (count coll)) \n    (cons (take n coll)\n          (part n (drop n coll)))))", "user": "5353afa0e4b084c2834f4b03"}, {"problem": 54, "code": "(fn part [n xs]\n  (if (< (count xs) n)\n    '()\n    (conj (part n (drop n xs))\n          (take n xs))))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 54, "code": "(fn part [n l] \n  (if (>= (count l) n) \n    (cons (take n l) (part n (drop n l)))\n    []))", "user": "54857e3be4b0e286459a11ad"}, {"problem": 54, "code": "#(loop [a [(take % %2)] b (drop % %2)]\n  (if (< (count b) %)\n      a\n      (recur (conj a (take % b)) (drop % b))))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (lazy-seq\n   (when (seq s)\n     (let [chunk (take n s)]\n       (if (= n (count chunk))\n         (cons chunk (my-partition n (drop n s))))))))", "user": "4e6a2f93535d8ccf87e9feaa"}, {"problem": 54, "code": "(fn [x s]\n   (loop [in-s s acc []]\n     (let [[l r] (split-at x in-s)]\n       (if (< (count r) x)\n         (conj acc l)\n         (recur r (conj acc l))))))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 54, "code": "(fn partition-sequence\n  [n s]\n  (reverse (loop [input s\n                  result '()]\n             (if (< (count input) n)\n               result\n               (recur (drop n input) (conj result (take n input)))))))", "user": "52561295e4b0541d1855ba03"}, {"problem": 54, "code": "(fn [x l]\n  (for [n (range (quot (count l) x))]\n     (subvec (vec l) (* x n) (+ (* x n) x))))", "user": "54651faee4b01be26fd746d6"}, {"problem": 54, "code": "(fn my-take\n  ([n coll] (my-take n coll []))\n  ([n coll result]\n  (let [li (take n coll)]\n    (if (= (count li) n)\n      (my-take n (drop n coll) (conj result li))\n      result))))", "user": "5471f0f3e4b094393f72dd6f"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (cond\n    (> (count s) n) (concat [(take n s)] (my-partition n (drop n s)))\n    (= (count s) n) [s]))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 54, "code": "(fn p [n s]\n  (if (>= (count s) n)\n    (cons (take n s)\n          (p n (drop n s)))))", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [s coll i n t [] acc []]\n    (if (empty? s) (seq (if (= i 0) (conj acc (seq t)) acc))\n      (recur (rest s)\n        (if (= i 0) (dec n) (dec i))\n        (if (= i 0) [(first s)] (conj t (first s)))\n        (if (= i 0) (conj acc (seq t)) acc)\n        ))))", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 54, "code": "(fn partition-seq [n coll]\n  ((fn go [xs]\n     (if-let [p (take n xs)]\n       (when (= (count p) n)\n         (cons p (go (drop n xs)))\n         )\n       )\n     ) coll)\n  )", "user": "5488872ee4b0e286459a11d3"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (loop [c coll\n         accum []]\n    (if (< (count c) n)\n      accum\n      (recur (drop n c) (conj accum (take n c))))))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 54, "code": "(fn split [n coll]\n\t(if (>= (count coll) n)\n\t\t(cons\n\t\t\t(take n coll)\n\t\t\t(split n (drop n coll))))\n)", "user": "5472d919e4b094393f72dd7b"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "548f3ee4e4b0e286459a1237"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (if (>= (count coll) n)\n  (lazy-seq\n   (cons (take n coll)\n         (my-partition n (nthnext coll n))))))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 54, "code": "(fn [n xs]\n  (->> xs\n     (iterate #(drop n %))\n     (take-while seq)\n     (map #(take n %))\n     (filter #(= n (count %)))))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 54, "code": "(fn partishun [n s]\n  (let [piece (take n s)]\n    (when (>= (count piece) n)\n      (lazy-seq (cons piece (partishun n (drop n s)))))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 54, "code": "(fn [x xs]\n  (loop [acc [] coll xs]\n    (if (< (count coll) x) \n      acc \n      (let [[p1 p2] (split-at x coll)]\n        (recur (conj acc p1) p2)))))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 54, "code": "#(map (fn [x] (take %1 (drop x %2))) (range 0 (- (count %2) %1 -1) %1 ))", "user": "512b07f7e4b078b06821febb"}, {"problem": 54, "code": "#(loop [c %2 acc []]\n\t(let [f (take % c) r (drop % c)]\n\t\t(if (< (count r) %)\n\t\t\t(conj acc f)\n\t\t\t(recur r (conj acc f)))))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 54, "code": "(fn part [n xs]\n  (when (>= (count xs) n)\n    (cons (take n xs) (part n (drop n xs)))))", "user": "511688d5e4b0b3e208dba05a"}, {"problem": 54, "code": "(fn rick-partition [n x]\n  (let [xlen (count x) x (vec x)]\n    (loop [out [] k 0]\n      (if (> k (- xlen n))\n        out\n        (let [new\n          (loop [inner-out [] j 0]\n            (if (>= j n)\n              inner-out\n              (recur (conj inner-out (get x (+ j k))) (inc j))))]\n          (recur (conj out new) (+ k n)))))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 54, "code": "(fn [n cc] (loop [c cc r []] (if (= n (count (take n c))) \n                                  (recur (drop n c) (conj r (take n c)))\n                                  r\n                                  )))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [next-all xs res []]\n    (let [next-n (take n next-all)]\n      (if (< (count next-n) n)\n        res\n        (recur (drop n next-all) (conj res next-n))))))", "user": "54926752e4b0b312c081ff44"}, {"problem": 54, "code": "(fn [n c]\n  (let [col (vec c)]\n    (for [i (range (quot (count col) n))]\n      (for [j (range n)] (col (+ (* i n) j))))))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 54, "code": "(fn [n a-seq]\n  (map #(take n (drop (* n %1) a-seq)) (range (quot (count a-seq) n))))", "user": "544e9022e4b0e3978000698b"}, {"problem": 54, "code": "(fn myself\n  ([n li curr]\n    (let [part (take n li)]\n      (if (>= (count part) n)\n        (recur n (drop n li) (cons part curr))\n        (reverse curr))))\n  ([n li]\n   (myself n li '())))", "user": "54924f64e4b0b312c081ff42"}, {"problem": 54, "code": "(fn eh [n x]\n  (cond\n   (empty? x) '()\n   (< (count x) n) '()\n   :else (cons (take n x) (eh n (drop n x)))))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 54, "code": "#(apply map (fn [& x] (apply vector x)) (for [x (range %)] (take-nth % (drop x %2))))", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [result []\n         coll coll]\n    (let [[head tail] (split-at n coll)]\n      (if (< (count coll) n)\n        result\n        (recur (conj result head) tail)))))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 54, "code": "(fn [x y] (filter #(= x (count %)) (partition-by #(quot % x) y)))", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 54, "code": "#(loop [n %1 \n        x %2\n        res []]\n   (if (< (count x) n)\n     res\n     (recur n (drop n x) (conj res (take n x)))))", "user": "549e5e52e4b0f3d1d8e70f9e"}, {"problem": 54, "code": "(fn my-partition [n coll]\n     (let [[a b] (split-at n coll)]\n       (if (>= (count a) n)\n         (cons a (lazy-seq (my-partition n b))))))", "user": "548ade6de4b0e286459a11f6"}, {"problem": 54, "code": "(fn [n r]\n  (filter #(= (count %) n)\n  (map (fn [a] (flatten (map second a)))\n    (vals \n      (group-by (fn [[a b]] (quot a n)) (map-indexed vector r))\n    )\n  )\n          )\n)", "user": "4fc8f671e4b0ee37620e1840"}, {"problem": 54, "code": "#(loop [x (quot (count %2) %1)\n        coll %2\n        result []]\n   (if (> x 0)\n     (recur (dec x) (drop %1 coll) (conj result (into [] (first (split-at %1 coll)))))\n     result))", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 54, "code": "(fn [n s]\n (remove\n  #(< (count %) n)\n  (map\n   #(map last %)\n   (partition-by\n    (fn [[idx _]] (quot idx n))\n    (map-indexed vector s)))))", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 54, "code": "#(loop [ret [] s %2]\n    (if (< (count s) %)\n      ret\n      (recur (conj ret (take % s)) (drop % s))))", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 54, "code": "(fn [n coll]\n  (letfn [(rev-inter [l n]\n              (for [x (range n)]\n                            (take-nth n (drop x l))))]\n    (apply map vector\n           (rev-inter coll n))))", "user": "54848141e4b0e286459a119e"}, {"problem": 54, "code": "(fn [a b]     \n  (filter #(= (count %) a) \n    (vals (group-by #(quot % a) b))))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 54, "code": "(fn [x coll]\n  (loop [acc []\n         c coll]\n    (if (empty? c)\n      (filter #(= x (count %)) acc)\n      (recur (conj acc (take x c)) (drop x c)))))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (cond (> n (count coll)) '()\n        :else (cons (take n coll) (my-partition n (drop n coll)))))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 54, "code": "(fn pp [x coll] \n  (when (<= x (count coll))\n    (cons \n     (take x coll) \n     (pp x (drop x coll)))))", "user": "54a70af9e4b09f271ff37c93"}, {"problem": 54, "code": "(fn ps [x coll]\n  (loop [rest-coll (nthrest coll x)\n         ret (list (take x coll))]\n    (let [y (take x rest-coll)]\n      (if (= (count y) x)\n        (recur (nthrest rest-coll x) (cons y ret))\n        (reverse ret)))))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 54, "code": "(fn [n s] (let [n' (dec n)] (for [i (range (count s)) \n                                  :when (= n' (mod i n))] \n                              (take n (drop (- i n') s)))))", "user": "50ef4e2be4b0a78662fa2653"}, {"problem": 54, "code": "(fn partition-seq\n  ([n coll] (partition-seq n coll [] []))\n  ([n coll rec-coll final-coll]\n    (if (empty? coll)\n      (if (= n (count rec-coll))\n        (conj final-coll rec-coll)\n        final-coll)\n      (if (= n (count rec-coll))\n        (partition-seq n coll [] (conj final-coll rec-coll))\n        (partition-seq n (rest coll) (conj rec-coll (first coll)) final-coll)))))", "user": "540271aee4b0df28a13c62d0"}, {"problem": 54, "code": "(fn p [n s]\n  (if (>= (count s) n)\n  \t(cons (take n s) (p n (drop n s)))))", "user": "4eb5750a535d7eef30807366"}, {"problem": 54, "code": "(fn part-seq\n  [n my-seq]\n  (loop [remaining my-seq\n         result '()]\n    (if (>= (count remaining) n)\n      (recur (nthrest remaining n) (conj result (take n remaining)))\n      (reverse result))))", "user": "548f19a8e4b0e286459a1231"}, {"problem": 54, "code": "#(loop [acc      ()\n        rest-seq %2]\n    (if (< (count rest-seq) %)\n      acc\n      (recur (concat acc (list (take % rest-seq)))\n             (drop % rest-seq))))", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 54, "code": "(fn part [n arr]\n  (if (< (count arr) n)\n    nil\n    (cons (take n arr) (part n (drop n arr)))))", "user": "545801f6e4b01be26fd74615"}, {"problem": 54, "code": "(fn [g s] \n  (loop [i s c [] r []]\n    (if (empty? i)\n      r\n      (let [n  (conj c (first i)) v (count n)]\n        (recur (rest i) (if (= g v) [] n) (if (= g v) (conj r n) r))\n      )\n    )\n  )\n)", "user": "54aa373de4b09f271ff37cb6"}, {"problem": 54, "code": "(fn my-partition [n col] (lazy-seq (let [[x xs] (split-at n col)] (if (= n (count x)) (cons x (my-partition n xs))))))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 54, "code": "(fn [p c] (loop [c c\n                  r []]\n             (let [part (take p c)]\n               (if (= p (count part)) (recur (drop p c) (conj r part)) r))\n           ))", "user": "54a854f5e4b09f271ff37ca2"}, {"problem": 54, "code": "#(loop [c %2 result []]\n  (if (> % (count c))\n    result\n    (recur (drop % c) (conj result (take % c)))))", "user": "50f10f7be4b06d9538fe211a"}, {"problem": 54, "code": "(fn my-partition [n xs]\n  (map #(take n %) (take (quot (count xs) n) (iterate #(nthrest % n) xs))))", "user": "50aa777fe4b056ee01935866"}, {"problem": 54, "code": "(fn part [n xs]\n  (if (< (count xs) n)\n    nil\n    (cons (take n xs) (part n (drop n xs)))))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 54, "code": "(fn [c coll]\n    (loop [a (list (take c coll)) rem (drop c coll)]\n      (if (< (count rem) c )\n        a\n        (recur (concat a (list (take c rem))) (drop c rem)))))", "user": "515ebde3e4b01e5d11ccd0a8"}, {"problem": 54, "code": "(fn part\n  [x s]\n  (let [[h t] (split-at x s)]\n    (when (= (count h) x)\n      (cons h (part x t)))))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 54, "code": "(fn [n v] (map first (drop 1 (take (inc (quot (count v) n)) (iterate  (fn [[a b]] [(take n b) (drop n b)]) [[] v])))))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 54, "code": "(fn g [n s]\n           (let [x (take n s)]\n             (when (= n (count x))\n               (concat\n                (list x)\n                (g n (drop n s))))))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 54, "code": "(fn [n c & a]\n  (if a\n    (if (>= (count c) n)\n      (recur n (drop n c) (conj a (take n c)))\n      a)\n    (recur n (drop n c) [(take n c)])))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 54, "code": "(fn [a b] (remove #(< (count %) a) (partition-by #(quot % a) b)))", "user": "52c08c59e4b07a9af5792351"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll\n         ret []]\n    (if (< (count coll) n)\n      ret\n      (recur (drop n coll) (conj ret (take n coll))))))", "user": "5383668ee4b06839e8705edd"}, {"problem": 54, "code": "(fn [n l]\n  (loop [l (apply list l) nl [] cl []]\n    (let [nc (conj cl (peek l))]\n      (if-not (seq l)\n        (seq (map seq nl))\n        (if (= (count nc) n)\n          (recur (pop l) (conj nl nc) [])\n          (recur (pop l) nl nc)\n          )\n        ) \n      )   \n    )   \n  )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 54, "code": "(fn part [n l]\n  (loop [remaining l\n         parts (transient [])]\n    (if (>= (count remaining) n)\n      (let [[h t] (split-at n remaining)]\n        (recur t (conj! parts h)))\n      (persistent! parts))))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 54, "code": "(fn [n coll]\n\t(filter #(= n (count %)) (vals (group-by #(quot % n) coll)))\n)", "user": "54b050cee4b09f271ff37d13"}, {"problem": 54, "code": "(fn [n ns] \n    (reverse (rest (reduce \n     (fn [r e] \n       (let [nsr (conj (first r) e) \n             ir (rest r)] \n         (into ir (if (= n (count nsr)) \n                    [nsr []]\n                    [nsr]))))\n     '([]) \n     ns))))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 54, "code": "(fn [n ss]\n  (loop [s ss r []]\n    (let [[fst rst] (split-at n s)]\n      (if (< (count fst) n)\n        r\n        (recur rst (conj r fst))))))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 54, "code": "(fn my-partition [n coll]\n (when (and (seq coll)\n            (>= (count coll) n))\n   (cons (take n coll) (my-partition n (drop n coll)))))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 54, "code": "(fn [p coll] (loop [acc1 [] acc2 [] rm coll] \n             (if (empty? rm) \n               acc1\n               (if (= (dec p) (count acc2))\n                 (recur (conj acc1 (conj acc2 (first rm))) [] (rest rm))\n                 (recur acc1 (conj acc2 (first rm)) (rest rm))))))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 54, "code": "#(for [x (range (int (/ (count %2) %1)))]\n   (take %1 (drop (* x %1) %2)))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 54, "code": "(fn my-partition [n coll] \n  (let [f (take n coll)] \n    (if (= n (count f)) \n      (cons f (lazy-seq (my-partition n (drop n coll)))) \n      '())))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 54, "code": "(fn\n  [x coll]\n  (loop [sq [] remaining coll]\n    (let [next-list (take x remaining)\n          new-remaining (drop x remaining)]\n      (if (= x (count next-list))\n        (recur (conj sq next-list) new-remaining)\n        sq))))", "user": "548db64ce4b0e286459a121c"}, {"problem": 54, "code": "(fn part [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (part n (drop n coll)))))", "user": "54c31f1be4b045293a27f609"}, {"problem": 54, "code": "(fn part [n a-seq]\n  (map #(drop (* n %) \n                (take (* n (+ 1 %)) a-seq)) \n         (range (int (/ (count a-seq) n)))))", "user": "5235493ee4b05e80434a5064"}, {"problem": 54, "code": "(fn part [n s]\n  (if (>= (count s) n)\n    (cons (take n s) (part n (drop n s)))))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 54, "code": "(fn[n l]\n   (loop [lst l res []]\n     (let [group (take n lst)]\n       (if (= (count group) n)\n         (recur (drop n lst) (conj (vec res) (vec group)))\n         res\n         )\n       )\n     )\n   )", "user": "541074f1e4b01498b1a719ac"}, {"problem": 54, "code": "(fn [n coll]\n\t(filter #(= (count %) n)\n\t\t(map #(map first %) (partition-by #(quot (first %) n) (map-indexed vector coll)))\n\t)\n)", "user": "54c11fdae4b0ed20f4ff6f1b"}, {"problem": 54, "code": "(fn __ [n xs]\n  (if (< (count xs) n) '()\n    (conj (__ n (drop n xs)) (take n xs))))", "user": "54c271b9e4b045293a27f602"}, {"problem": 54, "code": "(fn mypart [n l]\n  (let [head (take n l)\n        remainder (drop n l)]\n    (if (= (count head) n)\n    \t(cons head (mypart n remainder))\n \t)\n  )\n)", "user": "54c82b27e4b045293a27f645"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [acc [] coll coll]\n    (if (< (count coll) n)\n      acc\n      (recur (conj acc (take n coll)) (drop n coll)))))", "user": "5412d5d2e4b01498b1a719d9"}, {"problem": 54, "code": "(fn [bucket-size input-seq]\n  (loop [accum []\n         s input-seq]\n    (if (< (count s) bucket-size)\n      accum\n      (recur (conj accum (take bucket-size s))\n             (drop bucket-size s)))))", "user": "51db0d99e4b06aa4d4669a9d"}, {"problem": 54, "code": "(fn part [n coll]\n  (cond\n   (> n (count coll)) '()\n   :else (cons (take n coll) (part n (drop n coll)))\n  )\n)", "user": "54c9f165e4b045293a27f687"}, {"problem": 54, "code": "(fn p [n col]\n  (let [r (take n col)]\n    (when (= n (count r))\n      (cons (take n col) (lazy-seq (p n (drop n col)))))))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 54, "code": ";(fn lazy-partition' [n coll]\n;  (lazy-seq\n;   (when-let [s (seq coll)]\n;     (let [p (doall (take n s))]\n;       (when (= n (count p))\n;         (cons p (partition' n (nthrest coll n))))))))\n;(fn partition' [n coll]\n;  (loop [acc []\n;         remaining coll]\n;    (if (<= n (count remaining))\n;      (recur (conj acc (take n remaining)) (drop n remaining))\n;      acc)))\n(fn partition' [n s]\n  (loop [in s out []]\n    (if (<= n (count in))\n      (recur (drop n in) (conj out (take n in)))\n      out)))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 54, "code": "(fn part\n  ([n coll] (part n n coll))\n  ([n step coll] \n    (when-let [s (seq coll)]\n      (let [p (doall (take n s))]\n        (when (= n (count p))\n          (cons p (part n step (nthrest s step))))))))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 54, "code": "(fn [n sq]\n  (loop [acc [], s sq]\n    (if (< (count s) n) acc\n      (recur (conj acc (take n s)) (drop n s)\n))))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [c coll, acc []]\n    (if (< (count c) n)\n      acc\n      (recur (drop n c) (conj acc (take n c))))))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 54, "code": "(fn p [c xs] (if (< (count xs) c) nil (let [[l r] (split-at c xs)] (cons l (p c r)))))", "user": "54c641f8e4b045293a27f628"}, {"problem": 54, "code": "(fn [n xs]\n  (let [rests (iterate (partial drop n) xs)\n        takes (map (partial take n) rests)]\n    (take-while #(= n (count %1)) takes)))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 54, "code": "(fn [n xs]\n    (loop [xs xs\n           newcol []]\n      (if (< (count xs) n)\n        newcol\n        (recur (drop n xs) (conj newcol (take n xs))))))", "user": "54be792ee4b0ed20f4ff6eeb"}, {"problem": 54, "code": "(fn part [n l]\n    (filter\n     (fn [l] (>= (count l) n))\n     ((fn help [n l]\n        (if (empty? l)\n          nil\n          (cons (take n l)\n                (part n (drop n l)))))\n      n l)))", "user": "54d26316e4b0e8a36923e5f2"}, {"problem": 54, "code": "(fn [n coll] \n  (loop [parted []\n         remaining coll]\n    (if (empty? remaining)\n      (filter #(= (count %) n) parted)\n      (recur (conj parted (take n remaining)) (nthrest remaining n))\n      )))", "user": "545b0275e4b01be26fd74648"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [in coll result []]\n    (if (>= (count in) n)\n      (recur (drop n in) (conj result (take n in)))\n      result)))", "user": "54cd651be4b057c6fda3a2a2"}, {"problem": 54, "code": "(fn part\n   ([n coll]\n      (part n coll '()))\n   ([n coll accum]\n      (if-not (< (count coll) n)\n        (part n (drop n coll) (cons (take n coll) accum))\n        (reverse accum))))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 54, "code": "(fn [size data]\n\t\t (#(if (not= size (count (last %))) (drop-last %) %) (rest (reverse\n\t\t\t(map reverse\n\t\t\t\t(reduce (fn [res x]\n\t\t\t\t\t(if\n\t\t\t\t\t\t(or\n\t\t\t\t\t\t\t(empty? (first res))\n\t\t\t\t\t\t\t(= size (count (first res))))\n\t\t\t\t\t\t(cons (list x) res)\n\t\t\t\t\t\t(cons (cons x (first res)) (rest res))))\n\t\t\t\t'(()) data)\n\t\t\t)))))", "user": "52a90056e4b0c58976d9ac39"}, {"problem": 54, "code": "(fn ps [n s & [out]]\n  (let [out (or out '())]\n    (if (< (count s) n)\n      out\n      (cons (take n s) (ps n (drop n s))))))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 54, "code": "(fn partition' [n xs] \n  (if (< (count xs) n) '() \n    (cons (take n xs) (partition' n (drop n xs)))))", "user": "54d03026e4b018d918be98de"}, {"problem": 54, "code": "(fn [n l]\n  (loop [n n l l result []]\n    (let [ [current remaining] (split-at n l)]\n      (if (> n (count current))\n        result\n        (recur n remaining (conj result current)) ))))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 54, "code": "(fn [n coll]\n    (letfn [(parts [coll] \n              (if (< (count coll) n) []\n                  (cons (take n coll) (parts (drop n coll)))))]\n      (parts coll)))", "user": "52950ab6e4b02ebb4ef7501a"}, {"problem": 54, "code": "(fn foo [n xs]\n  (if-not (> n (count xs))\n    (concat [(take n xs)] (foo n (drop n xs)))))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 54, "code": "(fn [n col]\n  (loop [col col\n         result []]\n    (if (>= (count col) n)\n      (recur (drop n col) (conj result (take n col)))\n      result)))", "user": "54580586e4b01be26fd74616"}, {"problem": 54, "code": "(fn [n coll]\n    (loop [head (take n coll)\n           tail (drop n coll)\n           result []]\n      (if (= n (count head))\n        (recur (take n tail)\n               (drop n tail)\n               (conj result head))\n        result)))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 54, "code": "(fn ps [n coll] (loop [li [] res coll]\n                    (if (< (count res) n)\n                      li\n                      (recur (conj li (take n res)) (drop n res)))))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 54, "code": "(fn f [n xs]\n  (if (< (count xs) n)\n    nil\n    (let [[part rest] (split-at n xs)]\n      (cons part (f n rest)))))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 54, "code": "(fn  [n col]\n  (filter #(= (count %) n)  (map #(map second %) (vals (group-by (fn [col] (quot (first col) n)) (map-indexed (fn [idx ele] [idx ele]) col))))))", "user": "53664e3be4b0243289761e74"}, {"problem": 54, "code": "(fn f [n s]\n  (let [p (take n s)]\n    (when (= n (count p))\n      (cons p (lazy-seq (f n (nthrest s n)))))))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 54, "code": "(fn part [n coll] \n  (let [els (take n coll)] \n    (when (= (count els) n) \n      (cons els (part n (drop n coll))))))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 54, "code": "(fn p [n col] (if (>= (count col) n) (cons (take n col) (p n (drop n col))) []))", "user": "5066003ee4b0313a384e5647"}, {"problem": 54, "code": "(fn f ([n xs]\n        (let [p (take n xs)]\n          (if (= n (count p))\n            (cons p (f n (drop n xs)))))))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 54, "code": "#(->>\n    (loop [li %2 ali '()] (if (empty? li) ali (recur (drop % li) (concat ali (list (take % li))))))\n    (filter (fn [x] (= (count x) %) ) )\n)", "user": "54db33f1e4b024c67c0cf75d"}, {"problem": 54, "code": "(fn my-partition\n    [partition-size s]\n    (loop [old-seq s\n           partitioned-seq '()]\n      (if (> partition-size (count old-seq))\n        partitioned-seq\n        (recur (drop partition-size old-seq) (concat partitioned-seq (list (take partition-size old-seq)))))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [rv [] res xs]\n    (let [[e r] (split-at n res)]\n      (if (< (count e) n)\n        rv\n        (recur (conj rv e) r)\n        ))))", "user": "54dae16de4b024c67c0cf758"}, {"problem": 54, "code": "(fn partit [n x]\n       (let [g (take n x)\n             r (drop n x)]\n         (if (< (count g) n)\n           nil\n           (cons g (partit n r)))\n       ))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 54, "code": "(fn f [n xs] (lazy-seq (let [[head tail] (split-at n xs)] (if (= (count head) n) (cons head (f n tail)) nil))))", "user": "54d7ed8de4b0a52adc2e2034"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (when (= n (count (take n s)))\n    (cons (take n s) (my-partition n (nthnext s n)))))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 54, "code": "(fn f [x coll]\n   (if (< (count coll) x)\n       '()\n       (cons (take x coll) (lazy-seq (f x (drop x coll))))))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [cc coll\n         r '()]\n    (if (or (empty? cc) (< (count cc) n))\n      (reverse r)\n      (recur (drop n cc) (conj r (take n cc)))\n      )))", "user": "517e12e3e4b0fcc7c5d37d3c"}, {"problem": 54, "code": "(fn mypart [n c]\n  (loop [c c acc []]\n    (if (< (count c) n)\n      acc\n      (recur (drop n c) (conj acc (take n c))))))", "user": "4f7207d3e4b07046d9f4f019"}, {"problem": 54, "code": "(fn my-part [size coll]\n  (let\n    [chunk (take size coll)\n     remainder (drop size coll)]\n    (if (< (count coll) size)\n        nil\n        (cons chunk (my-part size remainder)))\n  )\n)", "user": "546692aee4b01be26fd746e7"}, {"problem": 54, "code": "(fn part [n coll]\n  (if (< (count coll) n)\n         nil\n         (cons (take n coll)\n               (part n (drop n coll)))))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 54, "code": "(fn [n c]\n    (map #(take n (drop (* n %) c)) (range (int (/ (count c) n)))))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 54, "code": "#(loop [res []\n        s %2]\n   (if (>= (count s) %1)\n     (recur (conj res (take %1 s)) (drop %1 s))\n     res))", "user": "524025bce4b0ad64fa01030f"}, {"problem": 54, "code": "(fn [len xs] (for [n (range 0 (inc (- (count xs) len)) len)] (take len (drop n xs))))", "user": "4e68c465535d8ccf87e9fe8a"}, {"problem": 54, "code": "(fn [n arg]\n   (loop [lst arg\n          ret '()]\n     (if (< (count lst) n)\n       (reverse ret)\n       (recur (drop n lst) (cons (take n lst) ret)))))", "user": "525cc912e4b0cb4875a45d48"}, {"problem": 54, "code": "(fn part\n  [n coll]\n  (when (>= (count coll) n)\n    (cons (take n coll) (part n (drop n coll)))\n  )\n)", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 54, "code": "(fn p [c xs]\n  (loop [r xs res []]\n    (if (< (count r) c)\n      res\n      (recur (drop c r) (conj res (take c r))))))", "user": "534e4a29e4b084c2834f4ab0"}, {"problem": 54, "code": "(fn [x coll]\n  (keep #(if (= (count %) x) % nil)\n        (map #(map last %)\n             (vals\n               (group-by\n                 #(quot (first %) x)\n                 (map-indexed #(vector % %2) coll)))))\n  )", "user": "54e3bd3fe4b024c67c0cf7e0"}, {"problem": 54, "code": "(fn [size values]\n  (loop [source values result []]\n    (if (< (count source) size)\n      result\n      (recur (drop size source) (conj result (take size source))))))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 54, "code": "#(first (reduce (fn [[accum buffer] v]\n                  (let [buffer (conj buffer v)]\n                    (if (= %1 (count buffer))\n                      [(conj accum buffer) []]\n                      [accum buffer])))\n                [[] []]\n                %2))", "user": "52be58d7e4b07a9af579231d"}, {"problem": 54, "code": "(fn [s c]\n  (loop [acc '()\n\t       c c]\n    (if (< (count c) s)\n\t  (reverse acc)\n\t  (recur (conj acc (take s c)) (drop s c)))))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 54, "code": "(fn [n col]\n  (loop [col col, result []] \n    (if (>= (count col) n)\n      (recur (drop n col) (conj result (take n col)))\n      result)))\n\n;; Could also use \"real\" recursion:\n;\n;(fn doit [n col]\n;  (if (>= (count col) n)\n;    (cons \n;      (take n col) \n;      (lazy-seq (doit n (drop n col))))\n;    []))", "user": "5465febde4b01be26fd746e1"}, {"problem": 54, "code": ";;(fn [parts coll]\n;;  (keep #(if (= 0 (mod (count %) parts)) % nil)\n;;     (map #(map second %)\n;;        (vals\n;;           (group-by (fn [[part val]] part)\n;;              (map-indexed (fn [n elt] [(quot n parts) elt]) coll))))))\n;;\n;; take 2 thanks to msperlich for how to remove 2 steps and with threading macro\n;; ah, but the simplification means it only works when coll is monotonically increasing\n\n(fn [size coll]\n  (->> coll\n       (group-by #(quot % size))\n       (vals)\n       (filter #(= size (count %)))))", "user": "54485727e4b032a45b8693c6"}, {"problem": 54, "code": "(fn [n xs]\n  (let [q (quot (count xs) n)\n        ys (take (* n q) xs)]\n\n    (loop [acc []\n          count q\n          coll ys]\n      (if (zero? count)\n        acc\n        (recur (conj acc (take n coll)) (dec count) (drop n coll))))))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 54, "code": ";; First cut\n(fn [n coll]\n  (let [done? #(= (count %) n)]\n    (loop [coll coll current [] out []]\n      (if-not (seq coll)\n        (if (done? current)\n          (conj out current)\n          out)\n        (recur (next coll)\n               (if (done? current)\n                 [(first coll)]\n                 (conj current (first coll)))\n               (if (done? current)\n                 (conj out current)\n                 out))))))", "user": "4db6d993535d1e037afb2180"}, {"problem": 54, "code": "(fn p [n c]\n  (when (and (seq c) (>= (count c) n))\n    (cons (take n c) (p n (drop n c)))))", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 54, "code": "(fn partition-seq [n s]\n\t(let [head (take n s) tail (drop n s)]\n\t  (if (< (count head) n) nil (cons head (partition-seq n tail)))))", "user": "54c15722e4b0ed20f4ff6f22"}, {"problem": 54, "code": "(fn [n xs]\n             (loop [a [] r xs]\n               (if (< (count r) n)\n                 a\n                 (recur (conj a (take n r)) (drop n r)))))", "user": "4edee6a2535d10e5ff6f533e"}, {"problem": 54, "code": "(fn iii \n    ([parts coll] (iii parts coll (list)))\n    ([parts coll so-far] \n     (if (< (count coll) parts)\n       so-far\n       (cons (take parts coll) (iii parts (drop parts coll) so-far))\n\n       )\n     )\n    )", "user": "54cb3497e4b057c6fda3a272"}, {"problem": 54, "code": "(fn [n l] (filter #(= n (count %1)) (reduce \n         #(cond\n           (empty? %1) (list (list %2))\n           (> n (count (last %1))) (concat (drop-last %1) (list (concat (last %1) (list %2))) )\n           :else (concat %1 (list(list %2)))\n           ) \n         '() l)))", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 54, "code": "(fn f [x c]\n  (let [[current more] (split-at x c)]\n    (if (and (seq current)\n             (= x (count current)))\n      (cons current (f x more)))))", "user": "4ec1923f535dfed6da9c6db2"}, {"problem": 54, "code": "(fn inner [c s]\n                   (if (< (count s) c)\n                     nil\n                     (cons (take c s) (lazy-seq (inner c (drop c s))))))", "user": "549a1fede4b0f3d1d8e70f6a"}, {"problem": 54, "code": "(fn my [n coll]\n    (let [p (take n coll)]\n      (when (= n (count p))\n        (cons p (my n (nthrest coll n))))))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 54, "code": "(fn [n seq]\n   (filter #(= (count %) n) (map #(map last %) (map last (group-by #(quot (first %) n) (map-indexed vector seq))))))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 54, "code": "(fn [x coll]\n  (loop [coll coll result nil]\n    (if (< (count coll) x)\n      (reverse result)\n      (recur (drop x coll) (cons (take x coll) result)))))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 54, "code": "(letfn [(f [n s] (lazy-seq (let [[p r] (split-at n s)] (if (= (count p) n) (cons p (f n r))))))] f)", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 54, "code": "(fn iter [n coll]\n    (let [step (take n coll)]\n      (if (= n (count step))\n        (cons step (lazy-seq (iter n (drop n coll))))\n        nil)))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 54, "code": "(fn [n col]\n  (loop [col col\n         new-col []]\n    (if (<= n (count col))\n       (recur (drop n col) (conj new-col (take n col)))\n       (seq new-col))))", "user": "52f53589e4b05e3f0be25f2c"}, {"problem": 54, "code": "(fn [a b] (loop [i b x []] (if-not (< (count i) a) (let [y (split-at a i)] (recur (second y) (conj x (first y)))) x)))", "user": "533f1584e4b085b17e897d9b"}, {"problem": 54, "code": "(fn part [n s] (let [p (take n s)] (when (= (count p) n) (cons p (lazy-seq (part n (drop n s)))))))", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 54, "code": "(fn my-part [n x]\n  (loop [lst x\n         result []\n         smallList []\n         curr 1\n         total n]\n    (if (empty? lst)\n      result\n      (if (= curr total)\n        (recur (rest lst) (conj result (conj smallList (first lst))) [] 1 total)\n        (recur (rest lst) result (conj smallList (first lst)) (inc curr) total)))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 54, "code": "(fn part'\n  [n xs]\n  (let [p (take n xs)]\n    (if (= n (count p))\n      (cons p (lazy-seq (part' n (drop n xs)))))))", "user": "52d95491e4b09f7907dd13a4"}, {"problem": 54, "code": "(fn my-partition \n  [n coll]\n  (when\n    (and (seq coll) (>= (count coll) n))\n    (cons (take n coll) (my-partition n (drop n coll)))))", "user": "54f2a1b8e4b024c67c0cf8cb"}, {"problem": 54, "code": "(fn f [n xs] \n  (when (<= n (count xs))\n    (cons (take n xs) (f n (drop n xs)))))", "user": "5368fedee4b0243289761e93"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 54, "code": "(fn my-partition [x v]\n  (if (>= (count v) x)\n    (cons (take x v) (my-partition x (drop x v)))))", "user": "54d74cffe4b0a52adc2e2028"}, {"problem": 54, "code": "(fn partition2 [size coll]\n   (let [dcoll (drop size coll)]\n     (if (>= (count dcoll) size)\n       (conj (partition2 size dcoll) (take size coll))\n       (list (take size coll)))))", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 54, "code": "(fn [n c]\n  ((fn [in out]\n     (if (>= (count in) n)\n       (recur (drop n in) (conj out (take n in)))\n       out)) c []))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 54, "code": "(fn [n z]\n  (loop [c z\n         r []]\n    (if (>= (count c) n)\n      (recur (drop n c) (concat r [(take n c)]))\n      r)))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 54, "code": "(fn [p s]\n     (loop [part [] ss s]\n       (let [chunk (take p ss)]\n         (if (== p (count chunk))\n           (recur (conj part (take p ss)) (drop p ss))\n           (seq part)))))", "user": "516db4f6e4b046df6fbb76a0"}, {"problem": 54, "code": "(fn [x ys]\n  (loop [acc []\n         rem ys]\n    (if (< (count rem) x)\n      acc\n      (recur (conj acc (take x rem)) (drop x rem)))))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll acc []]\n    (if (< (count coll) n)\n      acc\n      (recur (drop n coll) (conj acc (take n coll))))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "54f9d900e4b01ecee9d88844"}, {"problem": 54, "code": "(fn f [n l]\n  (if (< (count l) n)\n    '()\n    (cons (take n l) (f n (drop n l)))))", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 54, "code": "(fn [n coll]\n  (map\n    (fn [xs] (map first xs))\n    (filter #(= n (count %))\n      (partition-by\n        (fn [[a b]] (odd? b))\n        (map\n          #(vector %1 (quot %2 n))\n          coll\n          (range (count coll)))))))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 54, "code": "(fn [n s]\n  (loop [left [] right s]\n    (if (< (count right) n) left\n      (recur (conj left (take n right)) (drop n right)))))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [all []\n         current []\n         coll coll]\n    (cond\n      (and (empty? current) (empty? coll)) (filter #(>= (count %) n) (map #(filter identity %) all))\n      (= n (count current)) (recur (conj all current) [] coll)\n      :else (recur all (conj current (first coll)) (rest coll)))))", "user": "54d70bbfe4b0a52adc2e2026"}, {"problem": 54, "code": "(fn\n  [x1 x2]\n  (loop [x x2 y []]\n    (if (empty? x)\n      (if (= 0 (mod (count x2) x1)) y (butlast y))\n      (recur (drop x1 x) (conj y (take x1 x))))))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 54, "code": "(fn f[n v] (if (>= (count v) n) (cons (take n v) (f n (drop n v)))))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 54, "code": "(fn f [n s]\n\t\t(letfn [\n\t\t\t\t\t\t(add-to-seq [n acc x]\n\t\t\t\t\t\t\t\t\t\t\t\t(if (< (count (last acc)) n)\n\t\t\t\t\t\t\t\t\t\t\t\t(conj (pop acc) (conj (last acc) x))\n\t\t\t\t\t\t\t\t\t\t\t\t(conj acc [x])\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\n\t\t\t\t\t\t(split-seq [n s]\n\t\t\t\t\t\t\t\t\t\t\t (reduce (partial add-to-seq n) [[(first s)]] (rest s))\n\t\t\t\t\t\t\t\t\t\t\t )\n\t\t\t\t\t\t]\n\t\t\t\t\t (filter #(= n (count %1)) (split-seq n s))\n\t\t\t\t\t )\n\t\t)", "user": "54ff6084e4b07d26eda61d50"}, {"problem": 54, "code": "(fn my-partition\n  [n xs]\n  (if (< (count xs) n)\n    '()\n    (concat [(take n xs)] (my-partition n (drop n xs)))))", "user": "54e0e911e4b024c67c0cf7bc"}, {"problem": 54, "code": "(fn my-partition \n  [n coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [p (take n s)]\n       (when (= (count p) n)\n         (cons p (my-partition n (drop n s))))))))", "user": "550615c0e4b021ccfedb9696"}, {"problem": 54, "code": "#(loop [l []\n        o %2]\n        (if (< (count (take %1 o)) %1)\n            l\n            (recur (conj l (take %1 o)) (drop %1 o))))", "user": "544e8369e4b0e39780006987"}, {"problem": 54, "code": "(fn partition2 [n s] \n    (loop [res []\n           leftover s]\n           (if (= leftover [])\n            (if (< (count (last res)) n)\n                (butlast res)\n                res)\n            (recur (conj res (take n leftover))\n                (drop n leftover)))))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 54, "code": "(fn test [num args]\n   (loop [num num args args res []]\n     (if (empty? args)\n       res\n       (if (= (count (take num args)) num)\n         (recur num (drop num args) (conj res (vec (take num args))))\n         res))))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 54, "code": "(fn [size col]\n  (loop [result [] remain col]\n    (if (< (count remain) size)\n      result\n      (recur (conj result (take size remain)) (drop size remain)))))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 54, "code": "(fn [n c] \n  (let \n    [p (partition-by #(Math/floor (/ % n)) c)]\n    (if (= 0 (mod (count c) n))\n        p\n        (drop-last p))))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 54, "code": "(fn [n s] \n   (letfn [(get-n [s n] (lazy-seq (if (>= (count s) n) \n                                    (cons (take n s) (get-n (drop n s) n))\n                                    [])))]\n     (get-n s n)))", "user": "550aeddae4b06e50f9beb135"}, {"problem": 54, "code": "(fn [n coll]\n       (loop [s coll\n              ret []]\n         (let [next-part (take n s)]\n           (if (= n (count next-part))\n             (recur (drop n s) (conj ret next-part))\n             ret))))", "user": "4dbe19fe535d020aff1edf59"}, {"problem": 54, "code": "#(map (partial take %) (take (quot (count %2) %) (iterate (partial drop %) %2)))", "user": "550fdc1de4b06e50f9beb17d"}, {"problem": 54, "code": "(fn pt [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (pt n (drop n v)))))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 54, "code": "(fn [n xs]\n  (filter #(>= (count %) n) (map #(take n (drop (* % n) xs)) (range (/ (count xs) n)))))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 54, "code": "(fn c [a i s] (let [[f r] (split-at i s)] (if (> i (count f)) (reverse a) (c (conj a f) i r)))) '()", "user": "51a058dae4b0b292b01ee3f3"}, {"problem": 54, "code": "#(loop [a %2 r []] ( if(< (count a) %) r (recur (drop % a) (concat r [(take % a)])) ) )", "user": "532018efe4b08068f379edcd"}, {"problem": 54, "code": "(fn bob [n s]\n  (if (< (count s) n)\n    nil\n    (lazy-seq\n        (cons (take n s) (bob n (drop n s))))))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 54, "code": "(fn my-partition [n s]\n\n  (->> (loop [m 0\n              ret []]\n         (if (> m (count s))\n           ret\n           (recur (+ n m) (conj ret (take n (drop m s))))))\n       (filter #(= n (count %)))\n       \n       ))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 54, "code": "(fn part [n lst]\n  (if (>= (count lst) n)\n    (cons (take n lst) \n    (part n (drop n lst)))))", "user": "550e8e04e4b06e50f9beb167"}, {"problem": 54, "code": "(fn [n xs] (let [vxs (vec xs) len (count xs) s (quot len n)] (for [i (range 0 (* s n) n)] (subvec vxs i (+ i n) ) ) ) )", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 54, "code": "(fn f [n xs]\n  (if (< (count xs) n)\n    []\n    (concat [(take n xs)]\n            (f n (drop n xs)))))", "user": "521d064fe4b0c4ef0be830a8"}, {"problem": 54, "code": "(fn a [x l] \n  (if (< (count l) x) '() \n    (cons (letfn [(s [x l] \n           (if (= x 0) '()\n             (cons (first l) (s (- x 1) (rest l))) ))]\n           (s x l))\n          (a x (nthrest l x)) ) ) )", "user": "53504a7de4b084c2834f4ad9"}, {"problem": 54, "code": "(fn partitioner\n   [x coll]\n   (loop [remainder coll\n\t\t    result []]\n\t (if (>= (count remainder) x)\n\t     (recur (drop x remainder)\n\t\t    (conj result (take x remainder)))\n\t   result)))", "user": "542725fce4b01498b1a71b22"}, {"problem": 54, "code": "#(loop [s %2 r []]\n   (if (>= (count s) %1)\n     (recur (drop %1 s) (conj r (take %1 s)))\n     r))", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 54, "code": "(fn [n seqn] (for [i (range (quot (count seqn) n))] (take n (drop (* i n) seqn))))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 54, "code": "(fn f [n s] \n  (let [p (take n s)] \n    (if (= n (count p))\n      (cons p (f n (drop n s))))))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 54, "code": "(fn hoge [n sq]\n  (loop [coll sq, partitioned []]\n    (if (> n (count coll))\n      partitioned\n      (recur (drop n coll)\n             (conj partitioned (take n coll))))))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 54, "code": "#(loop [n (dec %1)\n        s %2\n        a '()\n        c '()]\n   (if (empty? (rest s))\n     (reverse (if (zero? n)\n                (conj a (reverse (conj c (first s))))\n                a))\n     (if (zero? n)\n       (recur (dec %1)\n              (rest s)\n              (conj a (reverse (conj c (first s))))\n              '())\n       (recur (dec n)\n              (rest s)\n              a\n              (conj c (first s))))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 54, "code": "(fn [n xs]\n    (loop [m n xs xs acc [] acc2 []]\n      (if (empty? xs)\n        acc\n        (if (= m 1)\n          (recur n (rest xs) (conj acc (conj acc2 (first xs))) [])\n          (recur (dec m) (rest xs) acc (conj acc2 (first xs)))))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 54, "code": "(fn partion [num-of-items partionable-collection]\n  (let [p (take num-of-items partionable-collection)]\n    (when (= num-of-items (count p))\n      (cons p (partion num-of-items (nthrest partionable-collection num-of-items))))))", "user": "50e1bdd8e4b019fc399ce17f"}, {"problem": 54, "code": "(fn p [x a]\n  (if (< (count a) x)\n    '()\n    (cons (take x a) (p x (drop x a)))\n    )\n  )", "user": "525d490ae4b0cb4875a45d70"}, {"problem": 54, "code": "(fn partition-seq [l sq]\n  (if (> l (count sq)) nil\n    (cons (take l sq) (partition-seq l (drop l sq)))))", "user": "54bbaa8ee4b0ed20f4ff6ec0"}, {"problem": 54, "code": "#(loop [a [] col %2]\n   (if (or (empty? col) (< (count col) %1))\n     a\n     (recur (conj a (take %1 col)) (drop %1 col))))", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 54, "code": "(fn partition' [n xs]\n  (let [first-n (take n xs)]\n    (if (= n (count first-n))\n      (cons first-n (partition' n (drop n xs)))\n      nil)) )", "user": "551ee974e4b08d5046aa8a50"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [rem xs\n         res []]\n    (if (< (count rem) n)\n      res\n      (recur (drop n rem) (conj res (take n rem))))))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 54, "code": "(fn y\n  [n c]\n  (lazy-seq\n   (let [[p q] (split-at n c)]\n     (if (= n (count p))\n       (cons p (y n q))\n       ()))))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 54, "code": "(fn t [n v] (if (< (count v) n) '()  (conj (t n (drop n v)) (take n v))))", "user": "551c66dae4b07993ea3788de"}, {"problem": 54, "code": "(fn [n xs]          \n           (loop [res []\n                  n n \n                  realN n\n                  xs xs \n                  ]\n            (let [cand (take realN xs)]\n             (if (= (count cand) n)\n             (recur (conj res cand) n realN (drop realN xs))\n             res\n\n           )))\n          )", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 54, "code": "(fn [n a]\n  (loop [remain a acc '()] \n    (if (< (count remain) n) acc (recur (drop n remain) (concat acc (list (take n remain)))))))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 54, "code": "(fn partition-exact\n  [n l]\n  (loop \n    [l l out [] cur []]\n    (cond (empty? l) (if (= (count cur) n) (conj out cur) out)\n          (= (count cur) n) (recur (rest l) (conj out cur) [(first l)])\n          :else (recur (rest l) out (conj cur (first l))))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 54, "code": "(fn [n xs]\n   (letfn [(make-partitions [n xs acc]\n             (let [next-group (take n xs)\n                   remaining (drop n xs)]\n               (if (= (count next-group) n)\n                 (recur n remaining (conj acc next-group))\n                 acc)))]\n     (make-partitions n xs [])))", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 54, "code": "(fn [each coll] (loop [c coll v []] \n              (if (< (count c) each) v\n                (recur (drop each c) (conj v (take each c)) ))))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 54, "code": "(fn [n r] (filter #(= n (count %)) (partition-by #(quot % n) r)))", "user": "55297a7ae4b0ffed3738f94b"}, {"problem": 54, "code": "#(if (> %2 (count %3)) %1 (recur (conj %1 (take %2 %3)) %2 (nthnext %3 %2))) []", "user": "5501de12e4b07d26eda61d7b"}, {"problem": 54, "code": "(fn [n coll] \n  (loop [coll coll res []] \n    (if (< (count coll) n)\n      res\n     (recur (drop n coll) (conj res (take n coll))))))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 54, "code": "(fn [y startArray]\n  \t(loop [x startArray totalVec '() part y]\n\t\t(if (> (count x) (- part 1))\n\t\t\t(recur (drop part x) (conj totalVec (take part x)) part)\n\t\t\t(reverse totalVec)\n\t\t)\n\t))", "user": "55253799e4b0882d96d091cf"}, {"problem": 54, "code": "(fn part [n coll]\n   (let [[x r] (split-at n coll)]\n     (cond\n      (< (count r) n)\n      (list x)\n      :else\n      (conj (part n r) x))\n     )\n   )", "user": "55249f64e4b0882d96d091c6"}, {"problem": 54, "code": "(fn [m, c]\n  (loop [c c\n         out '()]\n    (if (empty? c)\n      (reverse (filter (fn [e] (= (count e) m)) out))\n      (recur (drop m c) (conj out (take m c))))))", "user": "5530b827e4b076ab5578f818"}, {"problem": 54, "code": "(fn [n coll]\n            (loop [acc [] C coll]\n              (if (>= (count C) n)\n                (recur (conj acc (take n C)) (drop n C))\n                acc\n                )\n              )\n            )", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 54, "code": "(fn [n xs]\n  (take-while\n   #(= (count %) n)\n   (rest (map first (iterate #(split-at n (second %))\n                             [(lazy-seq) xs])))))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 54, "code": "(fn [ n coll ]\n  (loop [coll coll result []]\n    (if (< (count coll) n)\n      result\n      (recur (drop n coll) (conj result (take n coll))))))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 54, "code": "(fn partition-seq [partitionSize coll]\n  (let [indices (range (count coll))\n        partStartIndices (filter #(= 0 (mod % partitionSize)) indices)]\n    (filter #(= partitionSize (count %)) (map #(take partitionSize (drop % coll)) partStartIndices))))", "user": "53504fe6e4b084c2834f4ada"}, {"problem": 54, "code": "(fn ps [n seqz]\n  (loop [\n         s seqz\n         ft (take n s)\n         rem (drop n s)\n         v []\n         ]\n    (if (seq s)\n      (recur rem (take n rem) (drop n rem) (conj v ft) )\n      (seq \n       (filter #(= n (count %)) v)))\n))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [ys xs rs []]\n    (case ys\n      [] rs\n      (let\n        [y (take n ys)]\n        (recur (drop n ys) (if (< (count y) n) rs (conj rs y)))))))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (when (>= (count v) n)\n    (cons (take n v) \n          (lazy-seq ( my-partition n (drop n v))))))", "user": "50e90813e4b033b0e80d11e7"}, {"problem": 54, "code": "(fn my-partition [n col]\n  (lazy-seq\n   (when-let [s (seq col)]\n     (let [p (take n s)]\n       (when (= n (count p))\n         (cons p (my-partition n (drop n s))))))))", "user": "553894e2e4b09218d5f44fe2"}, {"problem": 54, "code": "(fn [n xs] \n  (map (partial take n)\n       (take (int (/ (count xs) n)) \n             (iterate (partial drop n) xs))))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 54, "code": "(fn pas [n s] (when (<= n (count s))\n   (cons (take n s) (lazy-seq (pas n (drop n s))))))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 54, "code": "(fn prttn [n coll]\n  (let [s (take n coll)]\n    (if (= n (count s))\n      (cons s (prttn n (drop n coll)))\n      )\n    )\n  )", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 54, "code": "(fn [n coll]\n   (loop [partitioned []\n          to-partition coll]\n     (let [taken (take n to-partition)\n           left (drop n to-partition)]\n       (if (< (count taken) n)\n         partitioned\n         (recur (conj partitioned taken)\n                left)))))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 54, "code": "(fn part [n xs] (if (< (count xs) n) '() (cons (take n xs) (part n (drop n xs)))))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 54, "code": "(fn [n ls]\n           (loop [src ls dst []]\n             (let [group (take n src)]\n               (if (= n (count group))\n                 (recur (drop n src) (conj dst group))\n                 dst))))", "user": "530b8580e4b02e82168697cc"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (when (>= (count s) n)\n    (cons (take n s) (my-partition n (drop n s)))))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 54, "code": "(fn f [n xs]\n    (let [segment (take n xs)]\n      (cond\n        (= n (count segment))\n        (lazy-seq (cons segment (f n (drop n xs))))\n        :else [])))", "user": "55274467e4b0ffed3738f92b"}, {"problem": 54, "code": "(fn pt [n xs]\n   (lazy-seq\n    (when-let [part (take n xs)]\n      (when (= (count part) n)\n        (cons part (pt n (drop n xs)))))))", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 54, "code": "(fn part [size coll]\n  (if (> size (count coll))\n    '()\n    (cons (take size coll) (part size (drop size coll)))))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 54, "code": "#(case % 2 '((0 1) (2 3) (4 5) (6 7)) 3 (if (= 9 (count %2))  '((0 1 2) (3 4 5) (6 7 8))  '((0 1 2) (3 4 5))))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 54, "code": "(fn [n s]\n  (loop [s s\n         group '()\n         result '()\n         i 0]\n    (cond (empty? s) result\n          (= (mod (inc i) n) 0) (recur (rest s) () (concat result [(concat group (take 1 s))]) (inc i))\n          :else (recur (rest s) (concat group (take 1 s)) result (inc i)))))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 54, "code": "(fn my-partition [n lst]\n  (letfn [(my-split [n lst]\n            (loop [l lst\n                   cnt n\n                   acc []\n                   subacc []]\n              (cond\n                (empty? l) (conj acc subacc)\n                (zero? cnt) (recur (rest l) (dec n) (conj acc subacc) (conj [] (first l)))\n                :else\n                (recur (rest l) (dec cnt) acc (conj subacc (first l))))))]\n    (->> (my-split n lst)\n         (filter (fn [x] (= (count x) n))))))", "user": "534f8c9ae4b084c2834f4acd"}, {"problem": 54, "code": "(fn yo [n seq]\n  (loop [acc [], seq seq]\n    (if (< (count seq) n)\n      acc\n      (recur (conj acc (take n seq)) (drop n seq)))))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "553478dce4b09218d5f44f9d"}, {"problem": 54, "code": "(fn my-part-list [p c]\n  (loop [coll (vec c) result []]\n    (if (or (empty? coll) (< (count coll) p))\n      result\n      (recur (drop p coll) (conj result (take p coll))))))", "user": "5546704be4b0a04f7929953d"}, {"problem": 54, "code": "(fn new-partition\n  [part coll]\n  (if (>= (count coll) part)\n    (cons (take part coll) (new-partition part (drop part coll)))\n    []))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 54, "code": "#(loop [coll %2, result []]\n\t(if (< (count coll) %1)\n\t\tresult\n\t\t(recur (drop %1 coll) (conj result (take %1 coll)))))", "user": "5370b386e4b0fc7073fd6e9b"}, {"problem": 54, "code": "(fn partition-seq [n s]\n  (loop [i 1 \n         items s\n         p []        \n         current-seq []]\n    (if (seq items)\n      (if (zero? (rem i n))\n        (recur (inc i) (next items) (conj p (conj current-seq (first items))) [])\n        (recur (inc i) (next items) p (conj current-seq (first items))))\n      p)))", "user": "5244a10de4b0d8acf9ed6ab3"}, {"problem": 54, "code": "(fn [n xs] (filter #(= n (count %)) (map (partial map second) (vals (group-by first (map-indexed (fn [index v] [(quot index n) v]) xs)) )) ))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 54, "code": "(fn my-part [n coll]\n  (loop [res []\n         coll' coll]\n    (if (seq coll')\n      (recur (conj res (take n coll') ) (drop n coll'))\n      (filter #(= n (count %)) res))))", "user": "5264383be4b03e8d9a4a70cb"}, {"problem": 54, "code": "(fn pa\n   ([n [x & xs]] (pa xs n n [x] []))\n   ([[x & xs] n tmp part ret]\n    (cond\n      (not x) (if (= tmp 1) (conj ret part) ret)\n      (= tmp 1) (recur xs n n [x] (conj ret part))\n      :else (recur xs n (dec tmp) (conj part x) ret))))", "user": "554b7056e4b0a04f79299583"}, {"problem": 54, "code": "(fn my-partition\n  [n se]\n  (when (>= (count se) n)\n    (cons (take n se)\n          (lazy-seq (my-partition n (nth (iterate next se) n))))))", "user": "554d386ee4b0a04f792995b8"}, {"problem": 54, "code": "(letfn [(f [acc n xs]\n           (if (empty? xs) (filter #(= (count %) n) acc)\n               (recur (conj acc (take n xs)) n (drop n xs))))]\n     (partial f []))", "user": "554b9c3ee4b0a04f79299594"}, {"problem": 54, "code": "#((fn ps [n xs coll]\n  (if (< (count xs) n)\n      coll\n      (ps n (drop n xs) (conj coll (take n xs)))\n  )) %1 %2 [])", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 54, "code": "(fn [size col]\n  (remove #(not= (count %) size)\n          (reduce (fn\n                    [result, i]\n                    (let [box (vec (last result))]\n                      (if (< (count box) size)\n                        (conj (vec (drop-last result)) (conj box i))\n                        (conj result [i]))))\n                  []\n                  col)))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 54, "code": "#(map (fn [x] (take % (drop (* x %) %2)))\n      (range (quot (count %2) %)))", "user": "554b8572e4b0a04f79299589"}, {"problem": 54, "code": "(fn\n  [n coll]\n  (loop [a () r coll]\n    (if (and (seq coll) (>= (count r) n))\n      (recur (conj a (take n r)) (drop n r))\n      (reverse a))))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 54, "code": "(fn f [n l] (if (< (count l) n) nil\n              (let [[l r] (split-at n l)] (cons l (f n r)))))", "user": "55337e61e4b09218d5f44f8e"}, {"problem": 54, "code": "(fn [n coll]\n  (apply map vector (vals (group-by #(mod % n) coll))))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 54, "code": "(fn [n xs]\n  ((fn [ys acc]\n   \t (let [as (take n ys)\n           bs (drop n ys)]\n      (if (empty? as)\n        acc\n        (recur bs\n               (if (= n (count as))\n                 (conj acc as)\n                 acc)))))\n   xs []))", "user": "5553b924e4b0deb715856e06"}, {"problem": 54, "code": "(fn my-partition [part-by coll]\n  (when (<= part-by (count coll)) \n    (cons (take part-by coll) (my-partition part-by (drop part-by coll)))))", "user": "5550dad4e4b00713264bd9b0"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (let [part (take n s)]\n    (if (= (count part) n)\n      (lazy-seq (cons part (my-partition n (drop n s))))\n      nil)))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 54, "code": "(fn p [n l]\n  (if (= (count (take n l)) n)\n    (cons (take n l) (p n (drop n l)))\n    ()))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 54, "code": "(fn part[acc n x]\n  (if (< (count x) n)\n    acc\n    (part\n      (conj acc (take n x)) n (drop n x)))) \n\n[]", "user": "55429859e4b0a04f7929951f"}, {"problem": 54, "code": "(fn f [n c] (when (<= n (count c)) (cons (take n c) (f n (drop n c)))))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 54, "code": "#(map (fn [x] (take % (drop (* % x) %2)))\n  (range (quot (count %2) %)))", "user": "5552b617e4b0deb715856df8"}, {"problem": 54, "code": "(fn partition-sequence [n coll]\n  (when-let [s (seq coll)]\n    (if (>= (count coll) n)\n      (cons (take n s) (partition-sequence n (drop n s))))))", "user": "50cf94bde4b0abc485cb9bb2"}, {"problem": 54, "code": "(fn part\n\t[n lst]\n\t(let [splter \n\t\t(fn [n lst z]\n\t\t\t(concat (drop-last lst) (split-at n (last lst)))\n\t\t)]\n\t\t(filter #(= (count %) n)\n\t\t\t(reduce #(splter n %1 %2) [lst] (range (- (/ (count lst) n) 1))))\n\t\t)\n\t)", "user": "5545477fe4b0a04f79299531"}, {"problem": 54, "code": "(fn _partition \n  [n coll] \n  (if (< (count coll) n)\n    '()\n    (into \n     (_partition n (drop n coll)) \n     (list (take n coll)))))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 54, "code": "(fn mypart [n col]\n  (if (> n (count col)) '() (cons (take n col) (mypart n (drop n col)))))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [result []\n         p (take n xs)\n         up (drop n xs)]\n    (if (= n (count p))\n      (recur (conj result p) (take n up) (drop n up))\n      result)))", "user": "555521a5e4b0deb715856e12"}, {"problem": 54, "code": "(fn f [n xs]\n    (lazy-seq\n     (let [[h t] (split-at n xs)]\n       (when (= n (count h))\n         (cons h (f n t))))))", "user": "55568a7de4b0deb715856e1c"}, {"problem": 54, "code": "(fn [n seq]\r\n  (loop [seq seq\r\n         result []]\r\n    (if (empty? seq)\r\n      result\r\n      (let [head (take n seq)\r\n            tail (nthrest seq n)]\r\n        (recur tail\r\n          (if (= n (count head))\r\n            (conj result head)\r\n            result))))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 54, "code": "(fn [n x]\n  (loop [s [] r x]\n    (if (< (count r) n)\n      s\n      (recur (conj s (take n r)) (drop n r)))))", "user": "545ddac3e4b01be26fd74676"}, {"problem": 54, "code": "(fn [n s]\n  (loop [s1 s s2 '()]\n    (if (empty? s1)\n      s2\n      (recur (drop n s1)\n             (if (< (dec n) (count s1))\n               (concat s2 (list (take n s1)))\n               s2)))))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 54, "code": "(fn clj-54 [n coll]\n  (when (>= (count coll) n)\n    (cons (take n coll) (clj-54 n (drop n coll)))))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (when (<= n (count s))\n    (cons (take n s) (my-partition n (drop n s)))))", "user": "555a5731e4b0deb715856e44"}, {"problem": 54, "code": "(fn [size s] \n  (loop [s s r []]\n    (if (< (count s) size)\n      r\n      (recur (drop size s) (conj r (take size s))))))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 54, "code": "(fn [n xs]\n  (for [i (range (quot (count xs) n))] (take n (drop (* i n) xs))))", "user": "5545eebee4b0a04f79299539"}, {"problem": 54, "code": "(fn  [n coll]\n  (loop [c n r []]\n    (if (<= c (count coll))\n      (recur (+ c n) (conj r (take n (drop (- c n) coll))))\n      (seq r))))", "user": "516d227fe4b06f078fab252d"}, {"problem": 54, "code": "(fn foo [n xs]\n  (if (<= n (count xs))\n    (cons (take n xs) (foo n (drop n xs)))))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 54, "code": "(fn f [n xs] (let [[a b] (split-at n xs)] ( if (= (count a) n) (cons a (f n b)) '() )))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [result \t[]\n         curr-coll \tcoll]\n    (let [ins \t(take n curr-coll)]\n      (if (< (count ins) n)\n        result \n        (recur (conj result ins)\n               (drop n curr-coll))))))", "user": "5564cad5e4b0c656e3ff180f"}, {"problem": 54, "code": "(fn [n sq] \n  (->> n\n   (quot (count sq))\n   (range)\n   (map #(->> sq (drop (* n %)) (take n) ))\n))", "user": "5280a1ece4b0757a1b171407"}, {"problem": 54, "code": "(fn rec [n l] \n  (if (<= n (count l)) \n    (cons (take n l) (rec n (drop n l)))))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (loop [result [] current [] s s]\n    (if (empty? s)\n      result\n      (let [current (conj current (first s))\n            current-is-full (= (count current) n) \n            result (if current-is-full (conj result current) result)\n            current (if current-is-full [] current)\n            ]\n        (recur result current (rest s))))))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 54, "code": "; partition\n(fn breaker [n s]\n  (let [p (take n s)]\n    (when (= n (count p))\n      (cons p (breaker n (drop n s))))))", "user": "5547bcf2e4b0a04f79299551"}, {"problem": 54, "code": "(fn f [n xs]\n  (loop [xs xs\n         r []]\n    (let [ys (take n xs)]\n      (if (< (count ys) n)\n        r\n        (recur\n         (drop n xs)\n         (conj r ys))))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 54, "code": "(fn foo\n  ([n s] (foo [] n s))\n  ([acc n s]\n   (if (< (count s) n)\n     acc\n     (recur (conj acc (take n s)) n (drop n s)))))", "user": "554edb85e4b00713264bd99a"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [n n\n         xs xs\n         partitioned []]\n    (if (empty? xs)\n      (filter #(= (count %) n) partitioned)\n      (recur n (drop n xs) (conj partitioned (take n xs))))))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 54, "code": "(fn partition-sequence [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (partition-sequence n (drop n coll)))))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 54, "code": "(fn f\n  [n col]\n  (if (>= (count col) n)\n    (cons (take n col) (f n (drop n col)))))", "user": "554c296ae4b0a04f792995a1"}, {"problem": 54, "code": "(fn f [m s]\n   (let [t (take m s)]\n     (when (= (count t) m)\n       (cons t (lazy-seq (f m (drop m s)))))))", "user": "5499e23de4b03163384f4706"}, {"problem": 54, "code": "(fn party [cnt data]\n  (if (or (empty? data) (< (count data) cnt))\n    (empty data)\n    (cons (take cnt data) (party cnt (drop cnt data)))))", "user": "52fc34cee4b047fd55837015"}, {"problem": 54, "code": "#(loop[result [], remaining %2]\n   (if (>= (count remaining) %1)\n     (recur (conj result (take %1 remaining)) (drop %1 remaining))\n     result))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (if (<= n (count coll))\n    (cons (take n coll)\n          (my-partition n (drop n coll)))))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 54, "code": "(fn [n l]\n  (loop [n n, l l, t []]\n    (if (and (seq l) (<= n (count l)))\n      (recur n (drop n l) (conj t (take n l)))\n      t)))", "user": "556fe0fee4b09a3098a52525"}, {"problem": 54, "code": "(fn parti [n coll]\n  (loop [s coll res []]\n    (if (and (seq s) (>= (count s) n))\n      (recur (drop n s) (conj res (take n s)))\n      res)))", "user": "54c3747de4b045293a27f60e"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "549b1e50e4b0f3d1d8e70f7a"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (lazy-seq\n   (let [part (take n coll)]\n     (when (= (count part) n)\n       (cons part\n             (my-partition n (drop n coll)))))))", "user": "55586905e4b0deb715856e2b"}, {"problem": 54, "code": "(fn [a b]\n  (for [x (range 0 (- (count b) (rem (count b) a)) a)]\n    (take a (drop x b)))\n  )", "user": "5568749ae4b0c656e3ff1854"}, {"problem": 54, "code": "#(loop [n %1, xs %2, subseq [], acc []]\n    (if (empty? xs)\n        acc\n    (if ( = (count subseq) (dec n))\n        (recur n, (rest xs), [], (conj acc (conj subseq (first xs))))\n        (recur n, (rest xs), (conj subseq (first xs)), acc))))", "user": "556f35fee4b09a3098a5251a"}, {"problem": 54, "code": "(fn [n s]\n  (map (fn [x] (take n (drop (* n x) s))) (range (int (/ (count s) n))))\n  )", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 54, "code": "(fn my-part [n col]\n  (loop [m [] col col]\n    (if (< (count col) n)\n      m\n      (recur (conj m (take n col)) (drop n col)\n    ))))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 54, "code": "(fn __ [n coll]\n  (let [chunk (take n coll)]\n    (if (= n (count chunk))\n      (cons chunk (__ n (drop n coll))))))", "user": "55702081e4b09a3098a52529"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [xs coll\n         result []]\n    (let [chunk (take n xs)]\n      (if (= n (count chunk))\n        (recur (drop n xs) (conj result chunk))\n        result))))", "user": "552a793ee4b0ffed3738f955"}, {"problem": 54, "code": "(fn [n coll]\n  (->> (range (/ (count coll) n))\n       (map (partial * n))\n       (map #(->> coll\n                  (drop %)\n                  (take n)))\n       (filter #(= n (count %)))))", "user": "52470d42e4b05ef8e38e6350"}, {"problem": 54, "code": "(fn [n s]\n  (apply map vector (map #(take-nth n (drop % s)) (range n))))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 54, "code": "(fn [n c]\n  (filter #(= (count %) n) (partition-by #(quot % n) c)))", "user": "557a1e18e4b05c286339e09e"}, {"problem": 54, "code": "(fn f [x coll]\n  (loop [c coll\n         res []]\n    (if (empty? c)\n      res\n      (recur (drop x c) (if (= x (count (take x c))) (conj res (take x c)) res)))))", "user": "51a3cc45e4b0e77c4ca60bfb"}, {"problem": 54, "code": "(fn [n coll]\n  ((fn [n coll acc]\n     ; Base case (not enough items for a new group\n     (if (< (count coll) n) acc\n       ; Take first n items and add them to accumulator\n       (recur n (drop n coll) (concat acc (list (take n coll)))))) n coll []))", "user": "53065acbe4b02e8216869792"}, {"problem": 54, "code": "(fn part [x y]\n   (cond\n     (= (count y) x) [y]\n     (< (count y) x) []\n     :else (lazy-seq\n             (cons (take x y)\n                   (part x (drop x y))))))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "52cca5c5e4b07d0d72b2736a"}, {"problem": 54, "code": "(fn partition-seq-2\n  [n sequ]\n  (if (and (<= n (count sequ)) (seq sequ))\n    (cons (take n sequ) (partition-seq-2 n (drop n sequ)))))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 54, "code": "(fn sol [n xs] (->> xs (group-by #(quot % n)) vals (filter #(= n (count %)))))", "user": "54857657e4b0e286459a11ac"}, {"problem": 54, "code": "(fn my-partition [n coll]\n   (when-let [s (seq coll)]\n     (when (<= n (count s))\n       (cons (take n s) (my-partition n (nthrest s n))))))", "user": "540c6a8ae4b0addc1aec6702"}, {"problem": 54, "code": "#(loop [out []\n        xs %2]\n   (let [n %1\n         s (take n xs)]\n     (if (< (count s) n)\n       out\n       (recur (conj out s) (drop n xs)))))", "user": "5581747fe4b05c286339e0fa"}, {"problem": 54, "code": "(fn [n lst]\n  (loop [s lst d []]\n    (if (> n (count s)) d\n      (recur (nthrest s n) (conj d (take n s))))))", "user": "558378dce4b05c286339e115"}, {"problem": 54, "code": "(fn [n coll]\n  (->> (map-indexed vector coll)\n  (reduce\n   (fn [m [i e]]\n     (if (= 0 (mod i n))\n       (conj m [e])\n       (update-in m [(dec (count m))] #(conj % e))))\n   [])\n  (filter #(= n (count %)))))", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 54, "code": "(fn partition-sequence [size coll]\n  (let [part (take size coll)]\n    (if (= (count part) size)\n      (cons part (partition-sequence size (drop size coll))))))", "user": "55842c7ee4b05c286339e11d"}, {"problem": 54, "code": "(fn [n l]\n  (letfn [(srest [se] (loop [li se c n] (if (zero? c) li (recur (rest li) (dec c)))))]\n    (loop [li l le ()]\n      (if (empty? li)\n        (reverse (if (= n (count (first le))) le (rest le)))\n        (recur (srest li) (conj le (take n li)))))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 54, "code": "(fn my-partition [n s] \n  (let [x (take n s) y (drop n s)]\n    (if (<= n (count x))\n      (cons x (my-partition n y)))))", "user": "52a4879ce4b0c58976d9abdb"}, {"problem": 54, "code": "(fn part [limit coll]\n  (if (>= (count coll) limit)\n    (cons (take limit coll) (part limit (drop limit coll)))))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 54, "code": "(fn [n s]\n   (loop [res s\n          parts []]\n     (if (>= (count res) n)\n       (recur (drop n res) (conj parts (take n res)))\n       parts)))", "user": "55895eade4b059ccff29b202"}, {"problem": 54, "code": "(fn [x y] (reverse(loop [a y res []]\n    (if (< (count a) x) \n     res\n    (recur (drop x a) ( cons  (take x a) res))\n    ))))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))\n\n;; First splits up the first n items only if there are\n;; enough items in the sequence v. It does this with the\n;; `take` command and then the function is called\n;; recursively to allow for the whole sequence to be\n;; operated on.", "user": "558a81fbe4b027778923761c"}, {"problem": 54, "code": "#(loop [res [], colln %2]\n   (let [[s1 s2] (split-at % colln)]\n     (if (> % (count colln))\n       res\n       (recur (conj res s1) s2))))", "user": "4f80db02e4b033992c121bf9"}, {"problem": 54, "code": "(fn [n coll]\n    (loop [input coll\n           result ()]\n      (if (< (count input) n)\n        (reverse result)\n        (recur (drop n input) (conj result (take n input))))\n      )\n    )", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 54, "code": "(fn partition-seq\n  [n s]\n  (when (seq s) (when (>= (count s) n)\n                  (cons (take n s) \n                        (partition-seq n (nthrest s n))))))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 54, "code": "(fn f [n s]                                                                                                                                             \n    (if (< (count s)  n)                                                                                                        \n        '()                                                                                                                                             \n        (cons (take n s) (f n (drop n s)))))", "user": "558b50d5e4b027778923762b"}, {"problem": 54, "code": "#(loop [c %2\n        r []]\n   (if (>= (count c) %)\n     (recur  (drop % c) (conj r (take % c)) )\n     r\n     )\n   )", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 54, "code": "(fn [n lst]\n\t(filter \n\t\t#(= n (count %))\n\t\t(reduce\n\t\t\t(fn [result v]\n\t\t\t\t(if ( = (count (last result)) n)\n\t\t\t\t\t(conj result (vector v))\n\t\t\t\t\t(assoc result (- (count result) 1) (conj (last result) v))\n\t\t\t\t)\n\t\t\t)\n\t\t\t[[]]\n\t\t\tlst\n\t\t)\n\t)\n )", "user": "5559b443e4b0deb715856e3c"}, {"problem": 54, "code": "(fn [n l]\n  (loop [rl l\n         acc []]\n    (let [grp (take n rl)]\n      (cond\n        (or (empty? rl)\n            (< (count grp) n)) acc\n        :else (recur (drop n rl)\n                     (conj acc grp))))))", "user": "558df2ebe4b0277789237649"}, {"problem": 54, "code": "(fn [i coll]\n  (loop [r []\n         c coll]\n    (if (< (count c) i)\n      r\n      (recur (conj r (take i c)) (drop i c)))))", "user": "5148bcbee4b05514c84b7cc6"}, {"problem": 54, "code": "(fn [n s]\n  (let [c (count s)]\n    (partition-by\n     #(quot % n)\n     (take (- c (mod c n)) s))))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 54, "code": "(fn it [n c]\n  (if (> n (count c)) [] (cons (take n c) (it n (drop n c)))))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 54, "code": "(fn partition* [n s]\n  (letfn [(partition-all* [n s]\n          (loop [acc '() remaining s]\n            (if (empty? remaining)\n              (reverse acc)\n              (recur (conj acc (take n remaining)) (nthrest remaining n)))))]\n    (let [ps (partition-all* n s)]\n      (filter #(= n (count %)) ps))))", "user": "5392500ae4b0b51d73faaeaf"}, {"problem": 54, "code": "(fn party [n v]\n  (take-while #(= (count %) n)\n  (cons (take n v) \n        (lazy-seq (party n (nthrest v n)))\n  ))\n)", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 54, "code": "(fn f [n coll]\n  (->> (take-while (complement empty?) (iterate (partial drop n) coll))\n       (map (partial take n) )\n       (filter #(= (count %) n) )\n       ))", "user": "558aabbfe4b0277789237621"}, {"problem": 54, "code": "(fn me\n  [cnt myseq]\n  \n  (let [ mypartition \n        (fn mytest [cnt myseq]\n\n\t\t\t(if (empty? myseq)\n\t\t\t\tnil\n\t\t\t\t(concat (list (take cnt myseq))\n\t\t\t\t\t\t(mytest cnt (drop cnt myseq))\n\t\t\t\t\t\t)\n\t\t\t)\n\t\t)  \n        ]\n  \n  \t( filter #(= cnt (count %))  (mypartition cnt myseq)  )\n  )\n  \n)", "user": "55897fe2e4b059ccff29b205"}, {"problem": 54, "code": "(fn [n s]\n  (reverse\n    (loop [remaining s\n           partitioned ()]\n      (if (> n (count remaining))\n        partitioned\n        (recur (drop n remaining)\n               (conj partitioned (take n remaining)))))))", "user": "5596a324e4b04c1e5c31d757"}, {"problem": 54, "code": "(fn [n, s]\n  (loop [i s r []]\n    (if (< (count i) n)\n      r\n      (recur (drop n i) (conj r (take n i))))))", "user": "5590e55de4b0277789237676"}, {"problem": 54, "code": "(fn [n s]\n  (loop [c (count s)\n         a '()\n         r s]\n    (if (< c n)\n      (reverse a)\n      (recur (- c n)\n             (conj a (take n r))\n             (drop n r)))))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 54, "code": "(fn p [n L]\n  (if (< (count L) n)\n    '()\n    (cons (take n L)\n          (p n (drop n L)))))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 54, "code": "(fn [size, coll]\n  (filter #(= (count %) size)\n          (reduce \n           (fn [acc el]\n             (if (< (count (last acc)) size)\n               (concat (drop-last acc) (list(concat (last acc) (list el))))\n               (concat acc [[el]] )))\n           [[]] coll))\n)", "user": "4fc5eb7fe4b0ee37620e1803"}, {"problem": 54, "code": "(fn ps [n xs]\n  (when (>= (count xs) n) \n    (conj (ps n (drop n xs)) (take n xs) )))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 54, "code": "(fn p54 [n coll]\n  (if (>= (count coll) n)\n    (cons (take n coll) (p54 n (drop n coll)))\n  ))", "user": "5400e918e4b0de5c41848619"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (loop [current-coll coll\n         partitions []]\n    (let [next-part (take n current-coll)]\n      (if (not= (count next-part) n)\n        partitions\n        (recur (drop n current-coll)\n               (conj partitions next-part))))))", "user": "54d0cedde4b0e8a36923e5d2"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "559ffabae4b0acc240e314ef"}, {"problem": 54, "code": "(fn f [n coll] \n  (loop [res '() elms coll]\n    (if (-> (count elms) (< n))\n      res\n      (recur (concat res [(take n elms)])\n             (drop n elms)))))", "user": "540e97f9e4b0addc1aec671f"}, {"problem": 54, "code": "(fn part [n s]\n  (loop [s s t []]\n    (if (< (count s) n)\n      t\n      (recur (nthrest s n) (conj t (seq (take n s))))\n    )\n  )\n)", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 54, "code": "(fn my-part [n col]\n  (filter #(= (count %) n) (reverse (reduce (fn [acc v]\n            (if (= (count (first acc)) n)\n              (conj acc (list v))\n              (conj (rest acc) (concat (first acc) (list v)))\n              ))\n          '(()) col)))\n  )", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 54, "code": "(fn [cnt coll]\n  ((fn [acc res]\n     (if (< (count res) cnt)\n       acc\n       (recur (conj acc (take cnt res)) (drop cnt res))))\n   [] coll))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 54, "code": "(fn part\n  [n coll]\n  (if (< (count coll) n)\n    '()\n    (cons (take n coll) (part n (drop n coll))))\n  )", "user": "50ec409ce4b04edc33777045"}, {"problem": 54, "code": "(fn parts [size lst]\n  (loop [lst lst\n         result []]\n    (if (< (count lst) size)\n      result\n      (recur (drop size lst) (conj result (take size lst))))))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [acc []\n         coll coll]\n    (if (> n (count coll))\n      acc\n      (let [[sub tail] (split-at n coll)]\n        (recur (conj acc sub) tail)))))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 54, "code": "(fn part [n s]\n    (loop [res '()\n           tail s]\n      (if (< (count tail) n) (reverse res)\n        (recur (conj res (take n tail)) \n               (drop n tail)))))", "user": "558bb38fe4b0277789237631"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "537e104ce4b06839e8705e9a"}, {"problem": 54, "code": "#(loop [x %1 y %2 result []] (if (>= (count y) x) (recur x (drop x y) (conj result (take x y))) result))", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 54, "code": "(fn par [n coll] (take-while #(>= (count %) n) (lazy-seq (cons (take n coll) (par n (drop n coll))))))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 54, "code": "(fn my-partition\n  [n coll]\n  (if (or (empty? coll) (> n (count coll)))\n    []\n    (cons (take n coll)\n        (lazy-seq (my-partition n (drop n coll))))))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 54, "code": "(fn ppart [n v] (if (> n (count v)) [] (lazy-cat [(take n v)] (ppart n (drop n v)))))", "user": "55306f9de4b076ab5578f814"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [cur coll\n         res []]\n    (if (>= (count cur) n)\n      (recur (drop n cur) (into res (list (take n cur))))\n      res)))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (reverse\n   (loop [s s\n          ss '()]\n     (let [cur (take n s)]\n       (if (< (count cur) n)\n         ss\n         (recur (drop n s) (conj ss cur)))))))", "user": "5578c67fe4b05c286339e08d"}, {"problem": 54, "code": "(fn [n s] \n  (loop [acc [] tail s]\n    (if (> n (count tail))\n      acc\n      (recur (conj acc (take n tail)) (drop n tail)))))", "user": "523b4e91e4b07becd5be21ef"}, {"problem": 54, "code": "(fn [n coll]\n        (loop [coll coll held []] \n                (if (<= (count coll) (dec n)) (seq held)\n                        (recur (drop n coll) (conj  held (take n coll))))))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 54, "code": "#(loop [coll %2 res []]\n   (if (< (count coll) %)\n     res\n     (recur (drop % coll) (conj res (take % coll)))))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 54, "code": "#(loop [remains %2 acc []]\n   (let [[b a] (split-at %1 remains)]\n     (if (< (count b) %1)\n       acc\n       (recur a (conj acc b)))))", "user": "52dbd423e4b09f7907dd13c6"}, {"problem": 54, "code": "#(loop [in %2 out '()]\n   (if (< (count in) %1)\n     (reverse out)\n     (recur (drop %1 in) (conj out (take %1 in)))))", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 54, "code": "(fn [n s]\n  (loop [s s, result []]\n    (if (< (count s) n)\n      result\n      (recur (nthrest s n) (conj result (take n s))))))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 54, "code": "(fn my-part [n coll]\n  (if (< (count coll) n)\n    []\n    (lazy-seq (cons (take n coll) (my-part n (drop n coll))))))", "user": "55afd469e4b002ce9d5cbc19"}, {"problem": 54, "code": "(fn partition-a-sequence\n  [num-item in-seq]\n  (loop [out-seq []\n         temp-seq in-seq]\n    (if (< (count temp-seq) num-item)\n      out-seq\n      (recur (conj out-seq (take num-item temp-seq)) (drop num-item temp-seq))\n      )\n    )\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 54, "code": "(fn partition' [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (partition' n (drop n coll)))))", "user": "5576f299e4b05c286339e077"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "53cb5559e4b00fb29b2212d2"}, {"problem": 54, "code": "(fn [n xs]\n   (loop [list xs\n          acc []\n          curr []]\n     (if (empty? list)\n       acc\n       (if (= (count curr) (dec n))\n         (recur (drop 2 list) (conj acc (conj curr (first list))) [(second list)])\n         (recur (rest list) acc (conj curr (first list)))))))", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 54, "code": "(fn [n c] (map #(->> c (drop (* n %)) (take n)) (range (long (/ (count c) n)))\n ))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 54, "code": "(fn [x y] (apply map vector \n                 (map (partial \n                       (fn [i p] (filter #(= (mod (.indexOf p %) i) 0) p)) x) \n                      (take x (iterate rest y)))))", "user": "5576e78de4b05c286339e075"}, {"problem": 54, "code": "(fn [n sq] \n  (filter\n   #(= (count %) n)\n    (reduce (fn [accum x]\n              (if (< (count (last accum)) n)\n                (concat (butlast accum) [(conj (last accum) x)])\n                (concat accum [[x]])))\n            [[]]\n            sq)))", "user": "55b527cbe4b01b9910ae2985"}, {"problem": 54, "code": "(fn parts\n  [n coll]\n  \t(lazy-seq\n     (if (< (count coll) n) nil (cons\n      (take n coll)\n      (parts n (drop n coll))\n      ))))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 54, "code": "(fn parti [n s]\n  (let [ss\n    (filter #(= 0 (rem % n ))\n      (range (inc (count s))) \n     )\n  ]\n    (map #(subvec (into [] s) %1 %2) ss (rest ss))\n  )\n)", "user": "558bdcefe4b0277789237633"}, {"problem": 54, "code": "#(letfn [(f [coll]\n            (let [[h t] (split-at % coll)]\n              (when (= (count h) %)\n                (cons h (lazy-seq (f t))))))]\n   (f %2))", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 54, "code": "(fn [n r]\n    (loop [vs ()\n           rs r]\n      (if (< (count rs) n)\n        (reverse vs)\n        (recur (conj vs (take n rs)) (drop n rs)))\n      )\n    )", "user": "559a9a3de4b066d22e731f45"}, {"problem": 54, "code": "(fn [n xs]\n\t(loop [dst [] \n\t\t   src xs]\n\t\t(if (< (count src) n)\n\t\t\tdst\n\t\t\t(recur (conj dst (take n src)) (drop n src)))))", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 54, "code": "#(loop [coll %2\n        out []]\n   (if (< (count coll) %1)\n     out\n     (recur (drop %1 coll) (conj out (take %1 coll)))))", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 54, "code": "(fn [n coll]\n   (filter\n    #(= n (count %))\n    (loop [result [] rest coll]\n             (if (empty? rest)\n               result\n               (recur (conj result (take n rest))\n                      (drop n rest))))))", "user": "55b54ecbe4b01b9910ae2987"}, {"problem": 54, "code": "(fn ! [n c] (when (>= (count c) n) (cons (take n c) (lazy-seq (! n (drop n c))))))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 54, "code": "(fn\n  [n col]\n  (loop [items []\n         remaining col]\n    (if (>= (count remaining) n)\n      (recur (conj items (take n remaining))\n             (drop n remaining))\n      items)))", "user": "50978ca4e4b00ad8bab4e966"}, {"problem": 54, "code": "#(loop [l %2  p []] \n         (let [t (take %1 l)]\n           (if (< (count t) %1)\n             p\n             (recur (drop %1 l) (conj p t)))))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 54, "code": "(fn f [n x] (if (>= (count x) n) (cons (take n x) (f n (drop n x)))))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 54, "code": "(fn my-partition\n  ([n s]\n    (my-partition n s '()))\n  ([n s t]\n  (if (> n (count s))\n      (reverse t)\n      (recur n (drop n s) (conj t (take n s))))))", "user": "55acd080e4b03311e7b73298"}, {"problem": 54, "code": "(fn [sizeOf inputList]\n\t(loop [r [] prepList [] l inputList iter sizeOf]\n\t\t(if (= iter 0)\n\t\t\t(recur (cons (reverse prepList) r) [] l sizeOf)\n\t\t(if(= l [])\n\t\t\t(reverse r)\n\t\t(recur r (cons (first l) prepList) (rest l) (dec iter))\n\t\t)\n\t\t)\n\t)\n)", "user": "51fea7d7e4b0f1313d468a74"}, {"problem": 54, "code": "(fn part [n xs]\n  (cons\n   (take n xs)\n   (let [the-others (drop n xs)]\n     (if (<= n (count the-others))\n       (part n the-others)\n       ()))))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 54, "code": "(fn part [n xs]\n  (when (>= (count xs) n)\n    (cons (take n xs)\n          (part n (drop n xs)))))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 54, "code": "(fn [n coll]\n  (if (= n 0)\n    nil\n  \t(loop [c coll r []]\n      (if (empty? c)\n        (if (< (count (last r)) n) (butlast r) r)\n        (recur (drop n c) (conj r (take n c)))))))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 54, "code": "(fn h ([n array] (h n array ())) ([n array acc] (do (println array acc) (if (< (count array) n) acc (h n (nthnext array n) (concat  acc (list (take n array))))))))", "user": "55af7e21e4b03311e7b732cc"}, {"problem": 54, "code": "(fn my-partition \n  [n xs]\n  (if (< (count xs) n)\n    '()\n    (cons (take n xs) (my-partition n (drop n xs)))))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 54, "code": "(fn [n s] (for [i (range (quot (count s) n))] (take n (drop (* i n) s))))", "user": "4faf97d8e4b081705acca258"}, {"problem": 54, "code": "(fn my-partition\n  [n v]\n  (if (< (count v) n)\n    '()\n    (conj (my-partition n (drop n v)) (take n v))\n    )\n  )", "user": "54965534e4b0b312c081ff65"}, {"problem": 54, "code": "(fn part [s c]\n  (when (>= (count c) s)\n    (cons (take s c) (part s (drop s c)))))", "user": "559fb147e4b0acc240e314ea"}, {"problem": 54, "code": "(fn f [n s] (lazy-seq (when-not (< (count s) n) (cons (take n s) (f n (drop n s))))))\n\n;(fn f [n s] (if (< (count s) n) (list) (cons (take n s) (f n (drop n s)))))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 54, "code": "(fn f\n  ([n xs]\n    (f n xs ()))\n  ([n xs xs2]\n    (if (< (count xs) n)\n      (reverse xs2)\n      (f n (drop n xs) (cons (take n xs) xs2)))))", "user": "5537cbaee4b09218d5f44fd3"}, {"problem": 54, "code": "(fn part [size coll] (loop [n [] c coll] (if (>= (count c) size) (recur (conj n (take size c)) (drop size c)) n)))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 54, "code": "(fn [n s] (map #(take n (drop (* n %) s)) (range (quot (count s) n))))", "user": "5394aa77e4b0b51d73faaecd"}, {"problem": 54, "code": "(fn p-s [n s]\n  (if (> n (count s))\n    []\n    (cons\n      (take n s)\n      (p-s n (drop n s))\n      )\n    )\n  )", "user": "55c3149de4b0e31453f64987"}, {"problem": 54, "code": "(fn [n s]\n   (let [ct (count s)\n         num-partitions (quot ct n)\n         reduced-ct (* num-partitions n)]\n     (letfn [(iter [n s i]\n                   (if (< i 0)\n                     []\n                     (conj (iter n s (dec i)) (take n (drop (* i n) s)))))]\n       (iter n (take reduced-ct s) (dec num-partitions)))))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 54, "code": "(fn prt [n coll]\n  (let [c (take n coll)]\n    (when (= n (count c))\n      (cons (take n coll)\n            (lazy-seq (prt n (drop n coll)))))))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 54, "code": "(fn [n sq]\n  (loop [ret-it []\n         sq-it sq]\n    (if (< (count sq-it) n)\n      ret-it\n      (recur (conj ret-it\n                   (take n sq-it))\n             (drop n sq-it)))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 54, "code": "(fn f [k xs]\n  (if (< (count xs) k) ()\n    (cons (take k xs) (lazy-seq (f k (drop k xs))))))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [res []\n        xs xs]\n    (if (< (count xs) n)\n      res\n      (recur (conj res (take n xs))\n             (drop n xs)))))", "user": "55c423e1e4b0e31453f64994"}, {"problem": 54, "code": "(fn p [n xs]\n  (if (> n (count xs))\n    '()\n    (cons (take n xs) (p n (drop n xs)))))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 54, "code": "(fn [n items]\n  (loop [result [] part-items items]\n    (if (< (count part-items) n)\n      result\n      (recur (conj result (take n part-items)) (drop n part-items)))))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 54, "code": "(fn [n coll]\n  (filter #(= n (count %)) (partition-by #(quot % n) coll)))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 54, "code": "(fn [idx s]\n  (loop [acc []\n         sq s]\n    (if (empty? (drop idx sq))\n      (if (> idx (count sq))\n\t    acc\n\t    (conj acc sq))\n      (recur (conj acc (take idx sq)) (drop idx sq)))))", "user": "55be464ce4b01b9910ae2a07"}, {"problem": 54, "code": "(fn [n v] (loop [r [] s (apply vector v)] (if (< (count s) n) r (recur (conj r (subvec s 0 n)) (subvec s n)))))", "user": "55ac16a0e4b03311e7b73291"}, {"problem": 54, "code": "(fn [x s]\n  (loop [s s out []]\n    (if (> x (count s))\n      out\n      (recur (drop x s) (conj out (take x s))))))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 54, "code": "(fn part [n col]\n  (if (>= (count col) n)\n    (into (part n (drop n col)) (list (take n col)))))", "user": "55d1f231e4b0e31453f64a4e"}, {"problem": 54, "code": "(fn my-partition\n  [n s]\n  (loop [ g '() s (drop-last (mod (count s) n) s)]\n    (if (seq s)\n      (recur (concat g (list (take n s))) (drop n s))\n      g)))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 54, "code": "(fn f [n s] (when (>= (count s) n) (cons (take n s) (f n (drop n s)))))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 54, "code": "(fn __ [n s]\r\n  (loop [s s\r\n         final []]\r\n    (if (< (count s) n)\r\n      final\r\n      (recur (drop n s) (conj final (take n s))))))", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 54, "code": "(fn partition-disguised \n  [parted xs]\n  (let [some-part (take parted xs)]\n    (if (< (count some-part) parted) ;; -> replace this with empty? -> include the rem items\n      (list)\n      (cons some-part (partition-disguised parted (drop (count some-part) xs))))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [i coll o []]\n    (if (< (count i) n)\n      o\n      (recur (drop n i) (conj o (take n i))))))", "user": "54864662e4b0e286459a11b8"}, {"problem": 54, "code": "(fn tition [n xs]\n    (let [part (take n xs)\n          tail (drop n xs)]\n      (when (<= n (count part))\n        (cons part (tition n tail)))))", "user": "5561d2c2e4b0c656e3ff17cd"}, {"problem": 54, "code": "#(loop [res [] remaining %2]\n   (if (< (count remaining) %1) \n     res\n    (recur (concat res [(take %1 remaining)]) (drop %1 remaining))))", "user": "55d332f5e4b0e31453f64a5f"}, {"problem": 54, "code": "#(loop [result []\n        remain %2]\n   (if (> % (count remain))\n     result\n     (recur (conj result (take % remain)) (drop % remain))))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 54, "code": "(fn p [n s] (when (and (seq s)\n                       (>= (count s) n))\n              (cons (take n s) (p n (drop n s)))))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 54, "code": "(fn my-partition [num s]\n  (let [[x y] (split-at num s)]\n    (if (<= num (count x))\n      (cons x (my-partition num y)))))", "user": "55b45825e4b01b9910ae297c"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [result []\n         s coll]\n    (if (seq s)\n      (recur (if (>= (count s) n) (conj result (take n s)) result) (drop n s))\n      result)))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 54, "code": "(fn my-partition [n eles] (if (< (count eles) n) nil (conj (my-partition n (drop n eles)) (take n eles))))", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 54, "code": "(fn partit [n coll]\r\n      (if (empty? (drop (dec n) coll)) nil\r\n          (lazy-seq (cons (take n coll)\r\n                          (partit n (drop n coll))))))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 54, "code": "(fn [n m]\n  (->> (iterate #(drop n %) m)\n       (take-while not-empty)\n       (map #(take n %))\n       (filter #(= n (count %)))))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 54, "code": "(fn p [n coll] (when (>= (count coll) n) (cons (take n coll) (lazy-seq (p n (drop n coll))))))", "user": "4e6a4950535d8ccf87e9febf"}, {"problem": 54, "code": "(fn partition' [n xs]\n  (if (>= (count xs) n)\n    (cons (take n xs) (partition' n (drop n xs)))\n    '()))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 54, "code": "(fn partition* [n cols]\n  (lazy-seq\n   (let [p (take n cols)]\n     (when (= n (count p))\n       (cons p (partition* n (drop n cols)))))))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 54, "code": "(fn [n xs]\n  (->> (map-indexed list xs)\n       (partition-by #(quot (first %) n))\n       (map #(map first %)) \n       (filter #(= (count %) n)) ))", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 54, "code": "(fn my-partition\n  [n xs]\n  (if (= n (count (take n xs)))\n    (cons (take n xs) (my-partition n (drop n xs)))\n    '()))", "user": "5574c172e4b05c286339e059"}, {"problem": 54, "code": "#(loop [coll %2 result []]\n   (if (> %1 (count coll))\n     result  \n     (recur (drop %1 coll) (conj result (take %1 coll)))))", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 54, "code": "(fn [n s]\n  (loop [s s\n         a []]\n    (if (seq s)\n      (let [r (take n s)]\n        (recur (drop n s) (if (= n (count r)) (conj a r) a)))\n      a)))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 54, "code": "(fn partition-seq\n [split-size seq]\n (let [number-collections (quot (count seq) split-size)] \n    (loop [remaining-seq seq\n           collections-left number-collections\n           collections '[]]\n        (if (= collections-left 0)\n            collections\n            (recur (drop split-size remaining-seq)\n                   (dec collections-left)\n                   (conj collections (take split-size remaining-seq)))))))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (let [p (take n coll)]\n    (if (< (count p) n)\n      ()\n  \t  (lazy-seq (cons p (my-partition n (drop n coll)))))))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 54, "code": "(fn [cnt l]\n  (loop [result [] cnt cnt l l]\n    (if (< (count l) cnt)\n      result\n      (recur (conj result (take cnt l)) cnt (drop cnt l))\n      )))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 54, "code": "(fn [num l]\n  (loop [r []\n         t []\n         n l]\n    (if (empty? n)\n      r\n      (let [t2 (conj t (first n))]\n        (if (= num (count t2))\n          (recur (conj r t2) [] (rest n))\n          (recur r t2 (rest n)))))))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [res [] lst coll]\n    (if (> n (count lst)) res\n        (recur (conj res (take n lst)) (drop n lst)))))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 54, "code": "(fn ! [n s] (if (>= (count s) n) (cons (take n s) (lazy-cat (! n (drop n s))))))", "user": "55b39523e4b01b9910ae2973"}, {"problem": 54, "code": "(fn [n l]\n (loop [l l acc []]\n   (if (empty? l)\n     acc\n     (recur \n      (drop n l)\n      (let [tnl (take n l)]\n        (if (= n (count tnl))\n          (conj acc tnl)\n          acc))))))", "user": "55d8eed3e4b0e31453f64ac3"}, {"problem": 54, "code": "(fn mypartition\n  [n coll]\n  (let [v (take n coll)]\n    (if (< (count v) n) nil\n        (cons v (lazy-seq (mypartition n (nthrest coll n)))))))", "user": "54145050e4b01498b1a719ea"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [r []\n         ys xs]\n    (let [[x y] (split-at n ys)]\n      (if (empty? y)\n        (if (= n (count x))\n          (conj r x)\n          r)\n        (recur (conj r x) y)))))", "user": "55d87324e4b0e31453f64ab4"}, {"problem": 54, "code": "#(for [i (range (quot (count %2) %1))] (take %1 (drop (* i %1) %2)))", "user": "55e1d34ae4b050e68259b421"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (if (< (count coll) n) ()\n      (cons (take n coll) (my-partition n (drop n coll)))))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 54, "code": "(fn [n c]\n  (butlast\n    (nth\n      (iterate\n        #(concat (butlast %) (split-at n (last %)))\n        (split-at n c))\n      (dec (/ (count c) n)))))", "user": "555c6344e4b0b056612e224c"}, {"problem": 54, "code": "(fn [m col]\n  (let [\n\t\tidxs (flatten (take \n\t\t\t\t\t\t(quot (count col) m) \n\t\t\t\t\t\t(iterate #(repeat m (inc (first %))) (repeat m 0))))\n\t\t]\n\t(map (fn [x] (map (fn [y] (first y)) x)) (vals (group-by second (map vector col idxs))))\n\t;idxs\n\t)\n\t)", "user": "54c94376e4b045293a27f665"}, {"problem": 54, "code": "(fn [n l]\n  (loop [result nil, rest l]\n    (if (< (count rest) n)\n      (reverse result)\n      (recur (conj result (take n rest)) (drop n rest) ))))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 54, "code": "#(loop [res [] c %2]\n    (if (< (count c) %)\n      res\n      (recur (conj res (take % c)) (drop % c))))", "user": "4de77a0a535d08e6dec9fdfa"}, {"problem": 54, "code": "(fn [x s]\n  (loop [s s\n         acc []]\n    (let [xs (take x s)]\n      (if (= x (count xs))\n        (recur (drop x s)\n               (conj acc xs))\n        acc))))", "user": "534da51fe4b084c2834f4aa4"}, {"problem": 54, "code": "(fn [step coll]\n    (loop [acc [] coll coll]\n      (if (< (count coll) step)\n        acc\n        (recur (conj acc (take step coll)) (drop step coll)))))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 54, "code": "(fn [n col]\n   (filter #(= (count %) n)\n    (loop [acc '() scol col]\n      (if (seq scol)\n        (recur (concat acc (vector (take n scol))) (drop n scol))\n        acc))))", "user": "55b0d315e4b002ce9d5cbc26"}, {"problem": 54, "code": "(fn [x xs]\n  (loop [result [] the-rest xs]\n    (if (or (empty? the-rest) (< (count the-rest) x))\n      result\n      (recur (conj result (take x the-rest)) (drop x the-rest))\n    )\n  )\n)", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 54, "code": "#(loop [a [] b %2] (if (< (count b) %1) a (recur (conj a (take %1 b)) (drop %1 b))))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 54, "code": "(fn [chunk-size coll]\n  (loop [temp-coll coll out []]\n    (if (>= (count temp-coll) chunk-size)\n      (recur (drop chunk-size temp-coll) (conj out (take chunk-size temp-coll)))\n      out\n    )\n  )\n)\n\n;got that, but I really like this\n\n;(fn my-partition [n v]\n;  (if (>= (count v) n)\n;    (cons (take n v) (my-partition n (drop n v)))))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 54, "code": "(fn [partition-size c] \n   (->>  c\n         (reduce (fn [acc val]\n                   (if (= (count (last acc)) partition-size)\n                     (conj acc [val])\n                     (update-in acc [(- (count acc) 1)] conj val)))  \n                 [[]])\n         (take-while #(= (count %) partition-size))))", "user": "53350264e4b0656e627bfd73"}, {"problem": 54, "code": "(fn party \n  [n coll] \n  (lazy-seq \n   (let [part (take n coll)]\n     (when (= n (count part))\n       (cons part (party n (drop n coll)))))))", "user": "539e717fe4b0ca733b974488"}, {"problem": 54, "code": "(fn my-partition [ n coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [p (doall (take n s))]\n       (when (= n (count p))\n         (cons p (my-partition n (nthrest s n))))))\n   )\n  )", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 54, "code": "(fn p [n s] (if (>= (count s) n) (cons (take n s) (p n (drop n s))) '()))", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 54, "code": "(fn me [n s]\n  (when (<= n (count s))\n    (cons (take n s)\n          (lazy-seq (me n\n                        (drop n s))))))", "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [acc '()\n         c   coll]\n     (let [[h t] (split-at n c)]\n       (if (= (count h) n)\n         (recur \n          (concat acc (list h))\n          t)\n         acc))))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 54, "code": "(fn parti [n col]\n    (when (>= (count col) n)\n          (cons (take n col)\n                (lazy-seq (parti n (nthrest col n))))))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 54, "code": "(fn my_partition [x coll] \n  (if (>=(count coll) x)\n    (conj  (my_partition x (drop x coll)) (take x coll))\n    )\n)", "user": "55f7e056e4b06e875b46ceb4"}, {"problem": 54, "code": "(fn party [n s]\n  (loop [acc [] s1 s]\n    (let [curr (take n s1)]\n      (if (= (count curr) n)\n        (recur (conj acc curr) (drop n s1))\n        acc))))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 54, "code": "(fn prob54 [n s]\n  (loop [col s\n         acc ()]\n    (if (< (count col) n)\n      (reverse  acc)\n      (recur (drop n col) (conj acc (take n col))))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 54, "code": "(fn part [x items] (if (<= x (count items)) (cons (take x items) (part x (drop x items)))))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 54, "code": "(fn p [n s]\n  (let [s' (take n s)]\n    (when (= (count s') n)\n      (cons s' (p n (drop n s))))))", "user": "522a01ade4b0590a43906ced"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (lazy-seq\n   (let [p (take n s)]\n     (when (= n (count p))\n       (cons p (my-partition n (nthrest s n)))))))", "user": "55f9c245e4b03cbcff9738ca"}, {"problem": 54, "code": "(fn my-partition [n a-seq]\n  (cond\n    (< (count a-seq) n) '()\n    :else (cons (first (split-at n a-seq))\n                       (my-partition n (first (rest (split-at n a-seq)))))))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 54, "code": "(fn[arg_n arg_v]\n   (loop[acc [] v arg_v] \n\t(if (or (empty? v) (< (count (take arg_n v)) arg_n)) \n\t\tacc \n\t\t(recur (into [] (conj acc (take arg_n v))) (drop arg_n v))\n\t)\n))", "user": "54d2829ce4b0e8a36923e5f6"}, {"problem": 54, "code": "(fn func\n  [num coll]\n  (filter #(= num (count %)) (vals (group-by #(quot (.indexOf coll %) num) coll))))", "user": "55a62092e4b0acc240e31554"}, {"problem": 54, "code": "(fn my-partition [step coll]\n  (if (<= step (count coll))\n    (cons (take step coll) (my-partition step (drop step coll))\n          )\n    )\n  )", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 54, "code": "(fn [n values]\n  (loop [[current & remainder :as to-process] values\n         result []\n         index 0\n         counter (dec n)]\n    (if (empty? to-process)\n      (filter #(= n (count %)) result)\n      (recur\n       remainder\n\t   (assoc-in result [index] (conj (into [] (get result index)) current))\n       (if (zero? counter)\n         (inc index)\n         index)\n       (if (zero? counter)\n         (dec n)\n         (dec counter))\n       ))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 54, "code": "(fn my-partition [n col]\n      (if (< (count col) n)\n        '()\n        (cons (take n col)\n                (my-partition n (drop n col)))))", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 54, "code": "(fn part [n list]\n  (when (>= (count list) n)\n    (cons (take n list) (part n (drop n list)))\n    )\n  )", "user": "55ddc5cbe4b050e68259b3d0"}, {"problem": 54, "code": "(fn [n rng]\n  (loop [xs []\n         rst rng]\n    (if (< (count (take n rst)) n)\n      xs\n      (recur (conj xs (take n rst))\n             (drop n rst)))))", "user": "4fc93728e4b0ee37620e1844"}, {"problem": 54, "code": "(fn f [len xs] \n  (if (> len (count xs))\n    '()\n    (let [[h t] (split-at len xs)]\n      (cons h (f len t)))))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 54, "code": "(fn my-partition [n _seq]\n  (if \n    (or (empty? _seq) (< (count _seq) n))\n    []\n    (concat \n      (vector (take n _seq)) \n      (my-partition n (drop n _seq)))))", "user": "5606a4ace4b08b23635d3175"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (->> (loop [m 0 ret []]\n         (if (> m (count s))\n           ret\n           (recur (+ n m) (conj ret (take n (drop m s))))))\n       (filter #(= n (count %)))\n       ))", "user": "56040e58e4b0c80df0ca2654"}, {"problem": 54, "code": "(fn [cnt xs] (loop [res [] acc [] in xs]\n               (if (empty? in)\n                 (if (= (count acc) cnt) (conj res acc) res)\n                 (if (= (count acc) cnt)\n                   (recur (conj res acc) [(first in)] (next in))\n                   (recur res (conj acc (first in)) (next in))))))", "user": "560794bde4b08b23635d3182"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (let [[u v] (split-at n coll)]\n    (if (< (count u) n)\n      []\n      (lazy-seq (cons u (my-partition n v))))))", "user": "55f2e47de4b06e875b46ce4d"}, {"problem": 54, "code": "; not lazy though\n(fn [n coll]\n  (loop [acc [] coll coll]\n    (if (>= (count coll) n)\n      (recur (conj acc (take n coll)) (drop n coll))\n      acc)))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 54, "code": "(fn p [n c]\n  (if (>= (count c) n)\n    (cons (take n c) (p n (drop n c)))))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 54, "code": "(fn [x s]\n  (loop [acc []\n         r s]\n    (if (< (count r) x)\n      acc\n      (recur (conj acc (take x r)) (drop x r)))))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 54, "code": "(fn [x y]\n(loop [r []\n       a x\n       b y]\n  (if (< (count b) a)\n    r\n    (recur (conj r (take a b)) a (drop a b)))))", "user": "559067ace4b0277789237670"}, {"problem": 54, "code": "(fn [n xs]\n  (let [c (count xs)]\n    (loop [i 0 r []]\n      (if (> (+ i n) c)\n        r\n        (recur (+ i n) (conj r (take n (drop i xs))))))))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 54, "code": "(fn part [st coll]\n  \t(let [lst (doall (take st coll))]\n      (when (= st (count lst))\n      \t(cons lst (part st (nthrest coll st))))))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 54, "code": "(fn partition_ [n coll]\n    (when (<= n (count coll))\n      (cons (take n coll) (partition_ n (drop n coll)))))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 54, "code": "(fn my-part\n   [n s]\n   (loop [final '()\n          curr s]\n     (if-not (empty? curr)\n       (recur (concat final (list (take n curr))) (drop n curr))\n       (filter #(= n (count %)) final))))", "user": "56084e91e4b046a4fc0ac00f"}, {"problem": 54, "code": "(fn [n c]\n   (reverse (loop [coll (drop n c) part (list (take n c)) ]\n              (if (>= (count coll) n)\n                (recur  (drop n coll) (conj part (take n coll)))\n                part))))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 54, "code": "#(loop [n %1, l %2, acc []]\n    (let [[h t] (split-at n l)]\n      (if (< (count h) n) acc\n          (recur n t (conj acc h)))))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 54, "code": "(fn [n c]\n     (reverse (map reverse\n     (filter #(= (count %) n)\n     (loop [c c\n            g '()]\n       (if (empty? c)\n         g\n         (let [fc (first c)\n               fg (first g)]\n         (recur (rest c) (if (= (count fg) n)\n                           (conj g (list fc))\n                           (conj (rest g) (conj fg fc))\n                           )))))))))", "user": "561047eae4b05f002753df6d"}, {"problem": 54, "code": "#(if (< (count %3) %2) %1 (recur (conj %1 (take %2 %3)) %2 (drop %2 %3))) []", "user": "532ecd44e4b019098a6f8b49"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [xs xs\n         acc []]\n    (let [n-xs (take n xs)]\n      (if (< (count n-xs) n)\n        acc\n        (recur (drop n xs) (conj acc n-xs))))))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 54, "code": "(fn [n l]\n  (loop [m l\n         r []]\n    (let [e (take n m)]\n      (if (< (count e) n)\n        r\n        (recur (drop n m) (conj r e))))))", "user": "56051095e4b08b23635d3162"}, {"problem": 54, "code": "(fn my-partition [n xs]\n  (let \t[[a b] (split-at n xs)]\n    (if (< (count b) n)\n      [a]\n      (into [a] (my-partition n b)))))", "user": "5606ea56e4b08b23635d317b"}, {"problem": 54, "code": "(fn [len items]\n  (loop [remaining items\n         results []]\n    (if (or (empty? remaining) (< (count remaining) len))\n      (seq results)\n      (recur (drop len remaining) (conj results (take len remaining))))))", "user": "5601e037e4b04bb52996e199"}, {"problem": 54, "code": "(fn mpartition\n  [n s]\n  (if (and (seq s) (>= (count s) n))\n    (cons (take n s) (mpartition n (drop n s)))))", "user": "52606318e4b03e8d9a4a7036"}, {"problem": 54, "code": "(fn [n s]\n  (loop [t s r []]\n   (if (< (count t) n) r\n     (let [sp (split-at n t)]\n      (recur (second sp) (conj r (first sp)))\n     )\n    )\n  )\n)", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 54, "code": "(fn [n xs]\n    (loop [xs' xs\n           acc []]\n      (if (or (nil? (seq xs')) (< (count (take n xs')) n))\n        acc\n        (recur (drop n xs') (conj acc (take n xs'))))))", "user": "560e9a2de4b05f002753df52"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [acc [] n n xs xs]\n    (if (or (empty? xs) (< (count xs) n)) \n      acc\n      (recur (conj acc (take n xs)) n (drop n xs)))))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 54, "code": "(fn[n s](\n            filter(fn[e](not(nil? e)))(reverse(map\n                                             (fn[k](\n                                                    if(< (count k) n) nil (reverse(map first k))\n                                                    ))\n                                             (vals(group-by second (zipmap s (map (fn[x](int(/ x n))) (range (count s))))))\n                                             ))\n            ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 54, "code": "#(loop [i % l %2 r (list)] \n   (if (> i (count l))\n\t\tr\n    \t(recur i (drop i l) (concat r (list (take i l))))\n))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 54, "code": "(fn my-partition\n  [n coll]\n  (lazy-seq\n   (let [next-partition (take n coll)]\n     (when (= (count next-partition) n)\n       (cons next-partition (my-partition n (drop n coll)))))))", "user": "55916d7be4b0604b3f94d57d"}, {"problem": 54, "code": "(fn my-partition\n  [n coll]\n  (lazy-seq\n   (let [new-partition (take n coll)]\n     (when (= (count new-partition) n)\n       (cons new-partition (my-partition n (drop n coll)))))))", "user": "56180d83e4b06b1bb2182a18"}, {"problem": 54, "code": "(fn [n coll]\n    (reduce #(conj % (->> coll\n                          (drop (* n %2))\n                          (take n)))\n            []\n            (range (quot (count coll) n))))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 54, "code": "(fn partai [f x]\n   (if (>= (count x) f)\n     (cons (take f x) (partai f (drop f x)))))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 54, "code": "(fn [n_orig coll]\n (loop [n n_orig coll coll current [] answer []]\n  (let [answer (if (= n 0) (conj answer current) answer)]\n   (if\n    (empty? coll)\n    answer\n    (if (= n 0)\n     (recur n_orig coll [] answer)\n     (recur (dec n) (rest coll) (conj current (first coll)) answer)\n    )\n   )\n  )\n )\n)", "user": "560fe558e4b05f002753df63"}, {"problem": 54, "code": "(fn f [n coll]\n  (let [cnt (count coll)\n        d (mod cnt n)\n        c (drop-last d coll)]\n    (loop [o [] i c]\n      (if (empty? i)\n        o\n        (recur (conj o (take n i)) (drop n i))))))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 54, "code": "(fn f [n s]\n  (lazy-seq\n    (loop [acc [], len (count s), s s]\n      (let [len (- len n)]\n        (if (neg? len)\n          acc\n          (recur (conj acc (take n s)) len (drop n s)))))))", "user": "552356fae4b0882d96d091af"}, {"problem": 54, "code": "(fn my-partition [y xs] (if (>= (count xs) y)\n                            (cons (take y xs) (my-partition y (drop y xs)))\n                            ))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 54, "code": "(fn [c s]\n  (->> s\n      (reduce (fn [acc it]\n                (if (-> acc first count (= c))\n                  (conj acc (vector it))\n                  (cons (conj (first acc) it) (rest acc))))\n              (list []))\n       reverse\n       (filter #(= (count %) c))))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 54, "code": "(fn [n coll]\n  (->> (iterate (fn [[part rst]] [(take n rst) (drop n rst)]) [() coll])\n       rest\n       (map first)\n       (take-while #(-> % count (= n)))))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 54, "code": "(fn [n coll]\n   (loop [remaining coll\n          ret '()]\n     (if (< (count remaining) n)\n       (reverse ret)\n       (recur (drop n remaining) (cons (take n remaining) ret))\n       )\n     )\n   )", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "53da059be4b0e771c302547e"}, {"problem": 54, "code": "(fn p\n    ([n s] (p n s []))\n    ([n s acc] (if (not-empty s)\n                 (recur n (drop n s) (conj acc (vec (take n s))))\n                 (filter #(= n (count %)) acc))))", "user": "5617db88e4b06b1bb2182a16"}, {"problem": 54, "code": "(fn [partition-size ls]\n  (loop [acc [] ls ls]\n    (if (>= (count ls) partition-size) \n      (recur (conj acc (take partition-size ls)) (drop partition-size ls))\n      acc)))\n\n;(fn my-partition [partition-size ls]\n;  (if (>= (count ls) partition-size)\n;    (concat [(take partition-size ls)]\n;            (my-partition partition-size (drop partition-size ls)))\n;    []))\n\n;(fn [partition-size ls]\n;  (:result \n;   (reduce \n;    (fn [{:keys [result current-partition] :as acc} elem]\n;        (let [new-partition (conj current-partition elem)]\n;          (if (= (count new-partition) partition-size)\n;            {:result (conj result new-partition) :current-partition []}\n;            (assoc acc :current-partition new-partition))))\n;    {:result [] :current-partition []} ls)))", "user": "52f3568fe4b05e3f0be25f0e"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [acc []\n         work xs]\n    (let [n-items (take n work)]\n      (if (= n (count n-items))\n        (recur (conj acc n-items) (drop n work))\n        acc))))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 54, "code": "(fn split-ms\n  [n coll]\n  (filter #(= (count %) n) (map #(map first %) (partition-by second (map list coll (flatten(repeat(concat (repeat n 1) (repeat n 2)))))))))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "561bc8e3e4b064ca9f4b1689"}, {"problem": 54, "code": "(fn [n ls]\n  (loop [retv [],\n         ls ls]\n    (let [head (take n ls)\n          tail (drop n ls)]\n      (if (< (count head) n)\n        retv\n        (recur (conj retv head) tail)))))", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "55fbcbd1e4b0f488688e0669"}, {"problem": 54, "code": "(fn mypart [l s]\n  (loop [ss s\n         cnt 1\n         innerres '()\n         res '()]\n        (cond (empty? ss) (reverse res)\n              :else\n              (recur (rest ss) (inc cnt) (cond (= 0 (mod cnt l)) '() :else (conj innerres (first ss)))\n                     (cond (= 0 (mod cnt l)) (conj res (reverse (conj innerres (first ss))))\n                           :else res)\n)\n)))", "user": "56011393e4b04bb52996e178"}, {"problem": 54, "code": "(fn [num coll]\n    (filter\n     #(= num (count %))\n     (vals (group-by #(int (/ % num)) coll))\n     ))", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 54, "code": "(fn multy [n coll]\n  (loop [c coll acc []]\n    (if (not (seq c))\n      (->> acc\n           (filter #(= n (count %)))\n           (filter #(= 0 (rem (first %) n)))\n       )\n\n\n           (recur (rest c) (apply conj acc (reductions conj [] c)))\n      ) ;if\n      ) ;loop\n) ;fn", "user": "560768a0e4b08b23635d317f"}, {"problem": 54, "code": "(fn [cnt seq]\n  (loop [acc []\n         s seq]\n    (if (>= (count s) cnt)\n      (recur (conj acc (take cnt s)) (drop cnt s))\n      acc)))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 54, "code": "(fn [size l]\n  (butlast (reverse (reduce (fn [acc x]\n            (let [current (first acc)\n                  length (count current)\n                  other (rest acc)]\n              (if (< (+ 1 length) size)\n                (conj other (conj current x))\n                (conj other (reverse (conj current x)) nil))))\n          '(nil) l))))", "user": "5622af0fe4b03f08ee9a922b"}, {"problem": 54, "code": "(fn [n s]\n  (loop\n    [spl (split-at n s)\n     res []]\n    (if (< (count (second spl)) n)\n      (conj res (first spl))\n      (recur (split-at n (second spl)) (conj res (first spl))))))", "user": "56228d00e4b03f08ee9a9227"}, {"problem": 54, "code": "(fn f [p s]\n   (when (<= p (count s))\n     (cons (take p s) (f p (drop p s)))))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 54, "code": "(fn partition* [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (partition* n (drop n v)))))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [ret '() coll coll]\n    (if (> n (count coll))\n      (reverse ret)\n      (recur (conj ret (take n coll)) (drop n coll)))))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 54, "code": "(fn partseq [n s]\n  (if (< (count s) n)\n    nil\n    (concat (list (take n s)) (partseq n (nthrest s n)))))", "user": "4f0f01c0535d0136e6c22329"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "55ed71dae4b0121d4835fdd9"}, {"problem": 54, "code": "(fn myPartition[y l]\n  (filter\n    #(= (count %) y)\n    ((fn bf[y ll]\n       (reductions \n         (fn [l x]\n           (if \n             (< (count l) y)\n             (conj l x)\n             (vector x)))\n         []\n    ll)) y l)))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 54, "code": "(fn my-partition [n xs]\n  (loop [result []\n         x-rest xs]\n    (if (< (count x-rest) n)\n      result\n      (recur (conj result (take n x-rest)) (drop n x-rest)))))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 54, "code": "(fn parti [n xs]\n  (loop [xs xs, acc []]\n    (let [taken (take n xs)]\n      (if (< (count taken) n) acc\n        (recur (drop n xs) (conj acc taken))))))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [partitioned-coll []\n         remaining-coll coll]\n    (if (>= (count remaining-coll) n)\n      (recur (conj partitioned-coll (take n remaining-coll))\n             (drop n remaining-coll))\n      partitioned-coll)))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 54, "code": "(fn [n s]\n    (loop [s s\n           acc '()]\n      (cond\n        (empty? s) (filter (fn [x] (= (count x) n)) (reverse acc))\n        :else (recur (drop n s) (cons (take n s) acc)))))", "user": "5600dccee4b04bb52996e175"}, {"problem": 54, "code": "#(loop [l %2 n ()] (if (< (count l) %1) (reverse n) (recur (drop %1 l) (cons  (take %1 l ) n))))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 54, "code": "(fn R [n S] (let [b (take n S)] (if (= n (count b)) (cons b (R n (drop n S))))))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 54, "code": "(fn [x coll]\n  (loop [res () coll coll]\n    (if (< (count coll) x)\n      res\n      (recur (concat res (list (take x coll))) (drop x coll)))))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 54, "code": "(fn [n f]\n  (loop [i (int (/ (count f) n)) start 0 end n new []]\n    (if (= i 0)\n      new\n      (recur (dec i) (+ start n) (+ end n) (conj new (range start end))) ) ))", "user": "562db4d1e4b0a45d2ff83021"}, {"problem": 54, "code": "(fn t [x y] \n  (when (>= (count y) x) \n    (cons (take x y) (t x (drop x y)))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 54, "code": "(fn pp [i c]\n       (when (>= (count c) i)\n         (cons (take i c) (pp i (drop i c)))))", "user": "551e6526e4b030e6a24d00e8"}, {"problem": 54, "code": "(fn [x coll] \n    (loop [result [] coll coll]\n\t  (if (< (count coll) x) result\n\t    (recur (conj result (take x coll)) (drop x coll)))))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 54, "code": "#(loop [i %1 coll %2 result []]\n    (if (< (count coll) i)\n      result\n      (recur i (drop i coll) (conj result (take i coll)))))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 54, "code": "(fn custom-partition\n  [n coll]\n  (filter\n   #(= (count %) n)\n   (reduce\n    (fn\n      [reduce-coll el]\n      (let [last-partition (last reduce-coll)\n            size-last-partition (count last-partition)]\n        (cond\n         (nil? last-partition) (conj reduce-coll [el])\n         (< size-last-partition n) (conj (vec (drop-last reduce-coll)) (conj last-partition el))\n         :else (conj reduce-coll [el]))))\n    [] coll)))", "user": "4fc524aae4b081705acca37e"}, {"problem": 54, "code": "#(loop [step %\n         coll (list %2)]\n    (if (>= step (count (last coll)))\n      (take-while (fn [c] (= step (count c))) coll)\n      (recur step (concat (butlast coll)\n                          (split-at step (last coll))))))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 54, "code": "(fn[group_size coll]\n  (loop [new_coll [] rest_coll coll]\n    (if (empty? rest_coll)\n      (filter #(= (count %) group_size) new_coll)\n      (recur (conj new_coll (take group_size rest_coll)) (drop group_size rest_coll)))))", "user": "56163cc1e4b06b1bb21829ff"}, {"problem": 54, "code": "(fn prt [n li]\n  (if (< (count li) n) nil\n    (cons (take n li) \n          (prt n (drop n li)))))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 54, "code": "(fn take-x \n  ([p-size c] (take-x p-size [] c)) \n  ([p-size partitioned remaining]\n    (if (< (count remaining) p-size) \n      partitioned\n      (let [[new-part new-rem] (split-at p-size remaining)]\n        (take-x p-size (conj partitioned new-part) new-rem)))))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 54, "code": "(fn [step coll] (letfn [(func [step coll]\n                                      (if (>= (count coll) step)\n                                        (cons (take step coll) (func step (drop step coll)))))]\n                              (func step coll)))", "user": "5521248fe4b08d5046aa8a69"}, {"problem": 54, "code": "(fn [n c] (map list* (filter #(= n (count %)) (reduce (fn [a x] (let [l (last a)] (if (> n (count l)) (conj (vec (butlast a)) (conj l x)) (conj a [x])))) [[]] c))))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 54, "code": "#(loop [coll %2 result []]\n   (if (< (count coll) %1)\n     result\n     (recur (drop %1 coll) (conj result (take %1 coll)))))", "user": "561a1af6e4b053970a773b02"}, {"problem": 54, "code": "(fn [n sq]\n   (loop [sq  sq\n          acc []]\n     (if (empty? sq)\n       acc\n       (let [[h t] (split-at n sq)]\n         (if (< (count h) n)\n           acc\n           (recur t (conj acc h)))))))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 54, "code": "(fn [n coll]\n   (letfn [(not-partition [n coll]\n                          (let [p (take n coll)]\n                            (when (= (count p) n)\n                              (cons p (not-partition n (drop n coll))))))]\n     (not-partition n coll)))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 54, "code": "(fn [p c] (filter #(= (count %) p) (partition-by #(int (/ % p)) c)))", "user": "56399b7ee4b0bfe05bf117f5"}, {"problem": 54, "code": "#(loop [n %1 c %2 r []]\n  (if (> n (count c))\n    r\n    (recur n (drop n c) (conj r (take n c)))))", "user": "502940a9e4b061fd216be4b8"}, {"problem": 54, "code": "(fn [n xs]\n  (:complete (reduce (fn [acc x]\n            \n            (let [u (assoc acc\n                     :incomplete\n                     (conj (:incomplete acc) x))]\n              (if (= n (count (:incomplete u)))\n                {:complete (conj (:complete u) (:incomplete u))\n              \t:incomplete []}\n                u\n              )))\n          { :complete []\n              :incomplete []} xs)))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 54, "code": "(fn [n s]\n  (for [i (range 0 (- (count s) n -1) n)] \n    (take n (drop i s))))", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 54, "code": "(fn\n  [n coll]\n  (filter #(= n (count %)) \n     (->> coll (map-indexed vector) (group-by #(quot (first %) n)) (vals) (map #(map first %)))))", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 54, "code": "(fn my-partition [x coll]\n  \n  (map second\n  \n    (filter #(= (count (second %)) x)   ;#((= (count (second %)) x))\n      (group-by #(quot % x) coll)  \n    )\n  )\n)", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 54, "code": "(fn\n    [n coll]\n  (loop [rem coll\n         res []]\n    (if (< (count rem) n)\n      res\n      (recur (drop n rem) (conj res (take n rem))))))", "user": "563799f8e4b0bfe05bf117db"}, {"problem": 54, "code": "(fn [x coll]\n  (let [go (fn [all-parts part inputs]\n             (if-let [n (first inputs)]\n               (let [next-part (conj part n)]\n                 (if (= x (count next-part))\n                   (recur (conj all-parts next-part) [] (rest inputs))\n                   (recur all-parts, (conj part n) (rest inputs))))\n               all-parts))]\n    (go [] [] coll)))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 54, "code": "(fn my-part [n xs]\n  (when (>= (count xs) n)\n    (cons (take n xs) (my-part n (drop n xs)))\n    ))", "user": "56388a0fe4b0bfe05bf117e7"}, {"problem": 54, "code": "(fn [n xs]\n   ((fn part [coll]\n       (if (< (count coll) n)\n         '()\n         (cons (take n coll) (part (nthnext coll n)))))\n     xs))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 54, "code": "(fn my-partition\n  [n s]\n  (lazy-seq\n    (let [group (take n s)]\n      (when (= (count group) n)\n        (cons group (my-partition n (drop n s)))))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [c coll r []]\n    (if (< (count c) n)\n      r\n      (recur (drop n c) (conj r (take n c))))))", "user": "56174d86e4b06b1bb2182a0e"}, {"problem": 54, "code": "(fn my-partition [n xs]\n  (if (or (empty? xs) (< (count xs) n))\n    ()\n  \t(cons \n \t\t(take n xs)\n \t\t(lazy-seq (my-partition n (drop n xs))))))", "user": "5641296de4b08d4f616f5ef4"}, {"problem": 54, "code": "(fn [x s]  (loop [res [] ls  s]\n             (if (< (count ls) x) res\n               (recur (conj res (take x ls)) (drop x ls)))))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 54, "code": "(fn [n xs] \n\t(let [c (count xs)]\n\t\t(map \n\t\t\t#(take n (drop % xs))\n\t\t\t(range 0 (- c (rem c n)) n))))", "user": "505fdf63e4b08f2a82ad10b9"}, {"problem": 54, "code": "(fn my_partition [n x]\n      (if (> n (count x))\n              '()\n             (cons (take n x) (my_partition n (drop n x)))))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 54, "code": "(fn [n xs & acc]\n  (if (< (count xs) n)\n    (reverse acc)\n    (recur n (drop n xs) (conj acc (take n xs)))))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 54, "code": "(fn [n coll]\n     (loop [out []\n            c coll]\n       (if (< (count c) n)\n         out\n         (recur (conj out (take n c))\n                (drop n c)))))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 54, "code": "(fn [k lst]\n  (loop [l lst res '()]\n    (cond \n     (< (count l) k) (reverse res)\n     :else (recur (drop k l) (cons (take k l) res)))))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 54, "code": "(fn [x coll]\n  (let [helper (fn [res coll]\n                 (let [firstx (take x coll)\n                       others (drop x coll)]\n                   (if (> x (count firstx))\n                     res\n                     (recur (conj res firstx) others))))]\n    (seq (helper [] coll))))", "user": "527c166de4b03e8d9a4a75b3"}, {"problem": 54, "code": "(fn my-partition [n xs]                                                                                                               \n          (loop [xs xs ret []]                                                                                                               \n            (if (>= (count xs) n)                                                                                                             \n              (recur (drop n xs) (conj ret (take n xs)))                                                                                      \n              ret)))", "user": "54ff074de4b07d26eda61d47"}, {"problem": 54, "code": "(fn [n v]\n            (loop [result []\n                       remain v]\n                 (if (< (count remain) n)\n                       result\n                       (recur (conj result (take n remain)) (drop n remain))\n                 )\n            )\n)", "user": "563f2eaae4b08d4f616f5ed1"}, {"problem": 54, "code": "(fn [psize coll]\n  (filter #(= (count %) psize) (partition-by #(int (/ % psize)) coll)))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 54, "code": "(fn part [n coll] (when (>= (count coll) n) (cons (take n coll) (part n (drop n coll)))))", "user": "5630471ce4b073c1cf7a9be4"}, {"problem": 54, "code": "(fn [n il] \n   (loop [l il acc []]\n     (if (> n (count l))\n       acc\n       (recur (drop n l) (conj acc (take n l))))))", "user": "5647dc44e4b0284900eef624"}, {"problem": 54, "code": "(fn [x s]\n  (loop [i 1 s s subres '[] res '[]]\n    (if (empty? s)\n      res\n      (if (= i x)\n        (recur 1 (rest s) '[] (conj res (conj subres (first s))))\n        (recur (inc i) (rest s) (conj subres (first s)) res)))))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 54, "code": "(fn [n S]\n  (for [x (range 0 (- (count S) (mod (count S) n)) n) ]\n  \t(for [y (range x (+ n x))]\n        (nth S y)\n    )\n  )\n )", "user": "5649615be4b0284900eef641"}, {"problem": 54, "code": "(fn [n coll]\n  (let [ret (reduce #(if (= (count (last %1)) n)\n             (concat %1 (list (list %2)))\n             (concat (butlast %1) (list (concat (last %1) (list %2)))))\n          '(()) coll)]\n    (if-not (= n (count (last ret)))\n      (drop-last ret)\n      ret)))", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (let [add-to-last-list (fn [l e] (concat (butlast l) (list (conj (last l) e))))]\n    (loop [f (first coll)\n           r (rest coll)\n           result [[f]]]\n      (cond\n        (empty? r) (filter #(= (count %) n) result) \n        (< (count (last result)) n) (recur (first r) (rest r) (add-to-last-list result (first r)))\n        :else (recur (first r) (rest r) (concat result (list [(first r)])))\n        ))\n    )\n  )", "user": "5630fd6fe4b0bfe05bf1178b"}, {"problem": 54, "code": "(fn tak [sz cl] (if (or (empty? cl) (> sz (count cl))) nil (cons (take sz cl) (lazy-seq (tak sz (drop sz cl))))))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 54, "code": "(fn part [n ls]\n  (if (< (count ls) n)\n    '()\n    (cons (take n ls)\n          (part n (drop n ls)))))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 54, "code": "(fn part [n S] \n  (loop [x S, out []]\n    (if (<= n (count x))\n      (recur (drop n x) (conj out (take n x)))\n      out)))", "user": "564d02cde4b0284900eef679"}, {"problem": 54, "code": "(fn [n coll] \n  (apply map\n         (fn [& args] (apply list (map second args))) \n         (vals (group-by first\n                         (map-indexed #(list (mod %1 n) %2) coll)))))", "user": "5650b8a0e4b0284900eef6c3"}, {"problem": 54, "code": "(fn [sub-len l]\n  (loop [result [] remain-list l]\n    (if (< (count remain-list) sub-len)\n      result\n      (recur (conj result (take sub-len remain-list)) (drop sub-len remain-list)))))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 54, "code": "(fn [s xs] \n  (for [i (range (int (/ (count xs) s)))\n        :let [seqStart (* i s)\n              seqEnd (+ seqStart s)\n              seqEnd (if (> seqEnd (count xs)) (count xs) seqEnd)]]\n    (subvec (vec xs) seqStart seqEnd)\n    )\n  )", "user": "52824143e4b0757a1b171453"}, {"problem": 54, "code": "(fn p [n c]\n  (if (< (count c) n)\n    []\n    (cons (take n c) (p n (drop n c)))))", "user": "563b1553e4b0bfe05bf1180a"}, {"problem": 54, "code": "(fn [n init]\n  (loop [s init, result []]\n    (if\n      (< (count s) n)\n      result\n      (recur\n        (drop n s)\n        (conj result (take n s))\n        )\n      )\n    )\n  )", "user": "564faadce4b0284900eef6b2"}, {"problem": 54, "code": "(fn x [num col] \n  (when (and (seq col) (>= (count col) num))\n   (cons (take num col) (x num (drop num col)))))", "user": "52d68ed2e4b09f7907dd1362"}, {"problem": 54, "code": "(fn [n r]\n        (let [m (quot (count r) n)]\n          (map #(take n (iterate inc %)) (take-nth n (range (* m n))))))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 54, "code": "(fn [x xs]\n   (->> (iterate rest xs)\n        (take x)\n        (apply map list)\n        (filter #(= (rem (first %) x) 0))\n        ))", "user": "55c6fd60e4b0e31453f649c9"}, {"problem": 54, "code": "(fn F [n xs]\n  (loop [result '()\n         remain xs]\n    (if (< (count remain) n)\n      (reverse result)\n      (recur (conj result (take n remain)) (drop n remain)))))", "user": "4f856adfe4b033992c121c44"}, {"problem": 54, "code": "#(loop [length %1 collection %2 output (list)]\n    (if (= (count collection) 0)\n      (reverse (filter (fn[element] (= (count element) length)) output))\n      (recur length\n             (drop length collection)\n             (conj output (take length collection)))))", "user": "51671557e4b013fc800656c4"}, {"problem": 54, "code": ";(fn [n coll]\n;  (->> coll\n;       (group-by #(quot % n))\n;       (into (sorted-map))\n;       vals\n;       (filter #(= n (count %)))))\n\n(fn f [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (f n (drop n coll)))))", "user": "54485749e4b032a45b8693c7"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (lazy-seq\n    (when (>= (count coll) n)\n      (cons (take n coll) (my-partition n (drop n coll))))))", "user": "543c5200e4b032a45b86933e"}, {"problem": 54, "code": "(fn [stp l]\n  (loop [ xs l\n          r []\n        ]\n     (if (empty? xs)\n         r\n        (let [[ch ct] (split-at stp xs)]\n            (recur ct (if (= stp (count ch)) (conj r ch) r)))\n       )\n\n    ))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 54, "code": "(fn my-partition[n coll]\n  (if (>= (count coll) n)\n    (cons (take n coll) (my-partition n (drop n coll)))))", "user": "562ab73ce4b00e49c7cb482e"}, {"problem": 54, "code": "(fn [n coll]\n    (letfn [(part [r e]\n              (if (-> r last count (= n))\n                (conj r [e])\n                (conj (vec (butlast r)) (conj (last r) e))))]\n      (->> (reduce part [[(first coll)]] (vec (rest coll)))\n           (filter #(= (count %) n)))))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 54, "code": "(fn [x y]\n    (loop [a '()\n           z y]\n      (if (< (count z) x)\n        a\n        (recur (concat a [(take x z)]) (drop x z)))))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 54, "code": "(fn [n a]\n   (loop [v a\n          x []\n          r []]\n     (if (empty? v)\n       (if (= n (count x))\n         (conj r x)\n         r)\n       (if (= n (count x))\n         (recur v\n              []\n                (conj r x))\n         (recur (rest v)\n                (conj x (first v))\n                r)))))", "user": "56171eade4b06b1bb2182a0c"}, {"problem": 54, "code": "(fn pt [n coll]\n  (lazy-seq \n   (when-let [head (take n coll)]\n    (if (= n (count head))\n        (cons head (pt n (drop n coll)))))))", "user": "56102f50e4b05f002753df6b"}, {"problem": 54, "code": "(fn func [n l] (take-nth n (apply map list (take n (iterate rest l)))))", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 54, "code": "(fn [x y]\n  (loop [ans2 []\n         ans1 y]\n    (if (empty? ans1)\n      ans2\n      (recur (if (= x (count (take x ans1)))\n               (conj ans2 (take x ans1)) ans2) (drop x ans1)))))", "user": "564045a8e4b08d4f616f5edd"}, {"problem": 54, "code": "(fn par [n coll] (if (>= (count coll) n) (cons (take n coll) (par n (nthrest coll n)))))", "user": "5646dff3e4b0284900eef615"}, {"problem": 54, "code": "(fn [n l] (apply map vector (vals (group-by #(mod % n) l))))", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 54, "code": "(fn part [n s]\n  (if (< (count s) n) '()\n    (let [[b r] (split-at n s)]\n      (cons b (part n r)))))", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 54, "code": "(fn [n col]\n  (loop [result [] items col]\n    (let [part (take n items)]\n      (if (< (count part) n)\n        result\n        (recur (conj result part) (drop n items))))))", "user": "53a83c74e4b047364c044426"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "562b57c7e4b058fa18c5a6cc"}, {"problem": 54, "code": ";#(rest ( (fn my-partition [x y] (if (> (count y) %1) (cons x (apply my-partition (split-at %1 y))) [x])) [] %2))\n#(rest ( (fn my-partition [x y] (if (>= (count y) %1) (cons x (apply my-partition (split-at %1 y))) [x])) [] %2))", "user": "56304db8e4b073c1cf7a9be5"}, {"problem": 54, "code": "(fn part [n s]\n  (let [nxt (take n s)]\n    (if (= (count nxt) n)\n      (lazy-seq (cons nxt (part n (drop n s))))\n      '())))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 54, "code": "#(loop [col %2 opt []]\n   (if (or (empty? col) (< (count col) %1))\n     opt\n     (recur (drop %1 col) (conj opt (take %1 col)))))", "user": "563c48e7e4b0bfe05bf11832"}, {"problem": 54, "code": "#(for [i (range (quot (count %2) %))]\n   (for [j (range %)]\n     (nth %2 (+ (* i %) j))))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (let [group (take n s)]\n    (when (>= (count group) n)\n      (cons group (my-partition n (drop n s))))))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "539cacbde4b0b51d73faaf2f"}, {"problem": 54, "code": "(fn f [i s]\n  (let [has-more (>= (- (count s) i) i)]\n    (cons (take i s) \n        (lazy-seq (if has-more (f i (drop i s)))))))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 54, "code": "(fn [step coll & result] (if (< (count coll) step)\n                           (reverse result)\n                           (recur step (drop step coll) (conj result (take step coll)))))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 54, "code": "(fn part [n s]\n  (when (>= (count s) n)\n   \t(cons (take n s) (part n (drop n s)))\n))", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 54, "code": "(fn [p-size xs]\n  (letfn [(indices [p-size size] (take-while #(<= (+ % p-size) size) (iterate (partial + p-size) 0)))\n        (part [p-size xs index] (take p-size (drop index xs)))]\n    (map part (repeat p-size) (repeat xs) (indices p-size (count xs))) ))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 54, "code": "(fn [arg1 arg2]\n(cond\n(and (= arg1 3) (= arg2 (range 9))) (quote ((0 1 2) (3 4 5) (6 7 8)))\n(and (= arg1 2) (= arg2 (range 8))) (quote ((0 1) (2 3) (4 5) (6 7)))\n(and (= arg1 3) (= arg2 (range 8))) (quote ((0 1 2) (3 4 5)))\n))", "user": "565f2461e4b068f2fe63dc3b"}, {"problem": 54, "code": "#(loop [acc [] coll %2]\n   (if (< (count coll) %1)\n     acc\n     (recur (conj acc (take %1 coll)) (drop %1 coll))))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 54, "code": "(fn [n coll]\n  (filter\n    #(= n (count %))\n    (reduce\n      #(if\n        (< (count (last %1)) n)\n        (conj (vec (butlast %1)) (conj (last %1) %2))\n        (conj %1 [%2]))\n      [[][]]\n      coll)))", "user": "564c8e99e4b0284900eef674"}, {"problem": 54, "code": "(fn [n s]\n  (loop [ans [] x s]\n    (if (> n (count x))\n      ans\n      (recur (conj ans (take n x)) (drop n x)))))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 54, "code": "(fn part [n coll]\n  (let [iters (/ (count coll) n)]\n    (for [i (range 1 (inc  iters))\n          :let [step (* n i)\n                x (take-last n (take step coll))]\n          :when (and\n                 (<= step (count coll))\n                 (= (count x) n))]\n      x)))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 54, "code": "(fn parti [n coll]\n  (lazy-seq\n   (let [c (seq coll)]\n     (let [p (doall (take n c))]\n       (when (= n (count p))\n         (cons p (parti n (nthrest c n))))))))", "user": "52a3c66ce4b04e0c58e87c04"}, {"problem": 54, "code": "(fn [n xs] (for [i (range (int (/ (count xs) n)))] (take n (drop (* i n) xs))))", "user": "564b495de4b0284900eef667"}, {"problem": 54, "code": "(fn [arg1 arg2]\n(cond\n(and (= arg1 3) (= arg2 (range 9))) (quote ((0 1 2) (3 4 5) (6 7 8)))\n(and (= arg1 2) (= arg2 (range 8))) (quote ((0 1) (2 3) (4 5) (6 7)))\n(and (= arg1 3) (= arg2 (range 8))) (quote ((0 1 2) (3 4 5)))\n))", "user": "5666bf34e4b04acd4f672dc2"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (cond (empty? coll)  '()\n   \t\t(< (count coll) n) '()\n   \t\t:else (concat (list (take n coll)) (my-partition n (drop n coll)))))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 54, "code": "(fn [n coll] \n  (let [s (/ (- (count coll) (mod (count coll) n)) n)]\n        \n       (for [i (range s)] (take n (drop (* i n) coll)))))", "user": "566888e4e4b04acd4f672ded"}, {"problem": 54, "code": "#(loop [index 0 coll []]\n   (if (> (+ index %) (count %2))\n     coll\n     (recur (+ index %) (conj coll (subvec (vec %2) index (+ index %))))))", "user": "56677192e4b04acd4f672dd5"}, {"problem": 54, "code": "(fn [x xs]\n  (remove #(< (count %) x) (reduce (fn [acc v]\n    (conj acc (take x (drop (* (count acc) x) xs)))) [] xs)))", "user": "5668dcc6e4b04acd4f672df8"}, {"problem": 54, "code": "(fn my-partition [n xs]\n  (when (>= (count xs) n)\n  (cons (take n xs) (my-partition n (drop n xs)))))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 54, "code": "(fn [x coll]\n  (loop [result [] coll2 coll]\n    (if (or (empty? coll2) (> x (count coll2))) result\n        (recur (conj result (take x coll2)) (drop x coll2)))))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 54, "code": "(fn [x y] (filter #(= (count %) x) (partition-by #(quot % x) y)))", "user": "566a3a26e4b0a866af689699"}, {"problem": 54, "code": "(fn __ [n xs]\n             (loop [pxs []\n                    xs xs]\n               (let [x (take n xs)]\n                 (if (< (count x) n)\n                   pxs\n                   (recur (conj pxs x) (drop n xs))))))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 54, "code": "#((fn [m acc coll] (cond (> m (count coll)) acc :else (recur m (conj acc (take m coll)) (drop m coll)))) %1 [] %2)", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll acc []]\n    (if (< (count coll) n)\n      acc\n      (recur (drop n coll) (conj acc (take n coll))))\n    )\n  )", "user": "564a560ae4b0284900eef654"}, {"problem": 54, "code": "(fn f [n c]\n  (when (>= (count c) n)\n    (concat\n      (list (take n c))\n      (f n (drop n c)))))", "user": "52bacfa8e4b07a9af57922d6"}, {"problem": 54, "code": "(fn f [n xs]\n  (if (< (count xs) n)\n    ()\n    (lazy-seq (cons (take n xs) (f n (drop n xs))))))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [res '() coll coll]\n    (cond\n      (empty? coll) (reverse (filter #(= (count %) n) res))\n      :else (recur (conj res (take n coll)) (drop n coll)))))", "user": "55efb51ee4b066087aa9453b"}, {"problem": 54, "code": "(fn [n xs]\n              (loop [xs xs result []]\n                (let [[a b] (split-at n xs)]\n                  (if (= (count a) n)\n                    (recur b (conj result a))\n                    result))))", "user": "4f9aa2a6e4b0dcca54ed6d0c"}, {"problem": 54, "code": "(fn [n coll]\n   (for [x (range (quot (count coll) n))]\n     (take n (drop (* x n) coll))))", "user": "567476bde4b05957ce8c6139"}, {"problem": 54, "code": "(fn f\n  ([n coll] \n   (trampoline f n coll identity))\n  ([n coll cont]\n   (let [next-chunk (take n coll)]\n     (if (< (count next-chunk) n)\n       #(cont [])\n       #(f n\n           (drop n coll)\n           (fn [x] (cont (cons next-chunk x))))))))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 54, "code": "(fn part [n coll]\n  (let [first (take n coll)\n        rest (drop n coll)]\n    (if (< (count first) n)\n      '()\n      (cons first (lazy-seq (part n rest))))))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 54, "code": "(fn my-part [n coll]\n    (lazy-seq\n      (when-let [s (seq coll)]\n        (let [p (doall (take n s))]\n          (when (= n (count p))\n            (cons p (my-part n (nthrest s n))))))))", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 54, "code": "(fn f [n xs]\n\t(if (>= (count xs) n)\n\t\t(cons (take n xs) (f n (drop n xs)))))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 54, "code": "(fn\n  [p c]\n  (for [x (range (int (/ (count c) p)))]\n    (take p (drop (* x p) c))\n  )\n)", "user": "5676af21e4b05957ce8c6158"}, {"problem": 54, "code": "#(let [! (fn [v] \n           (concat (butlast v) \n                   (split-at %1 (last v))))]\n   (filter (fn [x] (= (count x) %1)) (last (take-while (fn [i] ((complement empty?) (last i))) (iterate ! [%2])))))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 54, "code": "(fn part [p s] (if (< (count s) p) '() (concat (list (take p s)) (part p (drop p s)))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 54, "code": "(fn [x coll]\n  (loop [acc []\n         s []\n         c coll]\n    (let [y (first c)\n          c2 (rest c)\n          s2 (conj s y)]\n      (if (nil? y)\n        acc\n        (if (= x (count s2))\n          (recur (conj acc s2) [] c2)\n          (recur acc s2 c2))))))", "user": "567c2322e4b05957ce8c61af"}, {"problem": 54, "code": "(fn f [n xs]\n  (if (>= (count xs) n)\n    (concat [(take n xs)] (f n (drop n xs)))\n    []))", "user": "56483562e4b0284900eef629"}, {"problem": 54, "code": "(fn f [n col]\n  (filter #(= n (count %1)) \n  (for [i (range 0 (count col) n)]\n    (take n (drop i col)))))", "user": "567ea95de4b0feffd0d18eb6"}, {"problem": 54, "code": "(fn [x y] (loop [c y r [] b []]\n   (cond \n    (empty? c) r\n    (= (dec x) (count b)) (recur (rest c) (conj r (conj b (first c))) [])\n    :else (recur (rest c) r (conj b (first c))))))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "567cef8ce4b05957ce8c61c1"}, {"problem": 54, "code": "(fn [n coll]\n(loop [vec [] rem coll]\n(if (empty? rem)\n(filter #(= (count %) n) vec)\n(recur (conj vec (take n rem)) (drop n rem)))))", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 54, "code": "(fn [m r] \n (loop [col [] remaining r] \n   (if (>= (count remaining) m)\n     (recur (conj col (take m remaining)) (drop m remaining))\n     col)))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 54, "code": "(fn mypartition [len coll]\n  (loop\n    [coll-left coll\n     cur-res (list)\n     res (list)]\n    (if (empty? coll-left)\n      (reverse res)\n      (let [elem (first coll-left)]\n        (if (= (dec len) (count cur-res))\n          (recur (rest coll-left) (list) (cons (reverse (cons elem cur-res)) res))\n          (recur (rest coll-left) (conj cur-res elem) res))))))", "user": "5658d775e4b00d3155796114"}, {"problem": 54, "code": "(fn partition2 [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (partition2 n (drop n coll)))))", "user": "5675cdf1e4b05957ce8c614d"}, {"problem": 54, "code": "(fn p \n  [n c] \n  (when (and (seq c) (>= (count c) n))\n    (cons (take n c) (p n (drop n c)))))", "user": "567931e9e4b05957ce8c6184"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (loop [m 0\n         result []]\n    (if (> m (count coll))\n      (filter #(= n (count %)) result)\n      (recur (+ m n)\n             (conj result (take n (drop m coll)))))))", "user": "567c7fefe4b05957ce8c61bc"}, {"problem": 54, "code": "(fn p [n xs]\n  (let [g (take n xs)]\n    (if (= (count g) n)\n      (cons g (p n (drop n xs)))\n      ())))", "user": "564a5a09e4b0284900eef656"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [result [], src coll]\n    (let [next-partition (take n src)]\n      (if (= (count next-partition) n)\n          (recur (conj result next-partition) (drop n src))\n          result))))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 54, "code": "(fn partition*\n  [size coll]\n  (if (> size (count coll))\n    nil\n  \t(cons (take size coll) (partition* size (drop size coll)))))", "user": "566f7749e4b0a866af6896e9"}, {"problem": 54, "code": "(fn [step xs]\n   ((fn [x remaining] \n      (if (< (count remaining) step) x \n          ( recur (concat x [(take step remaining)]) (drop step remaining) ))) [] xs) )", "user": "567798afe4b05957ce8c6169"}, {"problem": 54, "code": "(fn [index, coll] \n  (loop [coll coll\n         cnt (count coll)\n         result []]\n    (if (< cnt index)\n      result \n     (let [new-coll (split-at index coll) \n           next-coll (flatten (next new-coll))]\n       (recur next-coll\n       \t(count next-coll) \n       \t(conj result (first new-coll)))))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 54, "code": "(fn part [n l]\n  (reverse\n  (loop\t[in l, out []]\n    (if\n      (< (count in) n) out\n       (recur (drop n in) (cons\t(take n in) out))\n    )\n  ))\n)", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 54, "code": "(fn [stride coll]\n  (take-while\n    #(= (count %) stride)\n    (next (map first\n               (iterate\n                 (fn [[res inp]] [(take stride inp) (drop stride inp)])\n                 [[] coll])))))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 54, "code": "(fn [x seq]\n    ((fn [s n cur acc]\n      (prn s n cur acc)\n      (if (= n x)\n      (recur s 0 [] (conj acc cur))\n      (if (empty? s)\n        acc\n        (recur (rest s) (inc n) (conj cur (first s)) acc)\n      )\n      )\n      ) seq 0 [] [])\n    )", "user": "5681afaae4b0945ebc182a87"}, {"problem": 54, "code": "(fn partition' [n coll]\n  (lazy-seq\n   (if (>= (count coll) n)\n     (cons (take n coll) (partition' n (drop n coll))))))", "user": "56481722e4b0284900eef628"}, {"problem": 54, "code": "(fn [bls lst]\n  (loop [rst lst\n         acum []]\n    (if (>= (count rst) bls)\n      (recur \n       (drop bls rst) \n       (conj acum (take bls rst))\n       )\n      acum\n      )\n    \n    )\n  )", "user": "52503747e4b0541d1855b828"}, {"problem": 54, "code": "#(loop [s %2 r []]\n   (if (< (count s) %1)\n     r\n     (recur (drop %1 s) (conj r (take %1 s)))))", "user": "568a743ee4b0dcc4269f408e"}, {"problem": 54, "code": "(fn [n s]\n  (for [g (range 0 (quot (count s) n))]\n    (->> s (drop (* g n)) (take n))))", "user": "5568a1bde4b0c656e3ff1857"}, {"problem": 54, "code": "#(loop [xs %2  res []]\n    (if (>= (count xs) % )\n      (recur (drop % xs) (conj res (take % xs)))\n      res))", "user": "56795deae4b05957ce8c6187"}, {"problem": 54, "code": "(fn [n items]\n  (first (reduce (fn [[result parts] x]\n                   (if (= (dec n) (count parts))\n                     [(conj result (conj parts x)) []]\n                     [result (conj parts x)]))\n                 [[][]]\n                 items)))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 54, "code": "(fn part\n  [n coll]\n  (lazy-seq\n    (let [segment (take n coll)\n          more (drop n coll)]\n      (when (= (count segment) n)\n        (cons segment (part n more))))))", "user": "56488119e4b0284900eef632"}, {"problem": 54, "code": "(fn [slc sq]\n\t; sequence with remainder trimmed.\n\t(let [trim (drop-last (rem (count sq) slc) sq)]\n\t\t; each segment is the length of our trimmed sequence starting\n\t\t; from 0 and using the slice as the step.\n\t\t(for [seg (range 0 (count trim) slc)] \n\t\t\t; drop the first n items and take a slice.\n\t\t\t(take slc (drop seg trim)))))", "user": "5578f292e4b05c286339e08f"}, {"problem": 54, "code": "(fn foo [n xs]\n  (if (< (count xs) n)\n    '()\n    (cons (take n xs) (foo n (drop n xs)))))", "user": "56761ab1e4b05957ce8c6154"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (if (< (count s) n)\n      '()\n      (apply #(cons %1 (my-partition n %2)) (split-at n s))))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 54, "code": "(fn my-partition [n xs]\n  ((fn [ys ans]\n     (if (nil? ys)\n       ans\n       (let [cs (take n ys)\n             rest (drop n ys)]\n         (if (= n (count cs))\n           (recur rest (concat ans [cs]))\n           ans))))\n   xs '()))", "user": "5688a01be4b0dcc4269f406d"}, {"problem": 54, "code": "(fn f [n colls]\n  (loop [result ()\n         suffix colls]\n    (if (and (seq? suffix) (>= (count suffix) n))\n      (recur (concat result (list (take n suffix))) (seq (drop n suffix)))\n      result)))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 54, "code": "(fn [x c]\n  (let [v (vec c), n (count c)]\n    (map #(subvec v (* % x) (* (inc %) x)) (range (quot n x)))))", "user": "4e268c6e535deb9a81d77ef4"}, {"problem": 54, "code": "(fn part [n coll]\n  (filter #(= n (count %))\n          (reductions (fn [xs s]\n                        (if (= (count xs) n) [s] (conj xs s))) [(first coll)] (rest coll))))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 54, "code": "(fn [n coll] (loop [o (take n coll) rest (drop n coll) result '()] (if (< (count rest) n) (reverse (conj result o)) (recur (take n rest) (drop n rest) (conj result o)))))", "user": "52e5f810e4b09f7907dd1468"}, {"problem": 54, "code": "(fn [n arg]\n  (loop [new-list '() old-list arg]\n    (if (< (count old-list) n)\n      (reverse new-list)\n      (recur (conj new-list (take n old-list)) (drop n old-list)))))", "user": "5691ef12e4b0dcc4269f40f8"}, {"problem": 54, "code": "#(loop [res (empty %2)\n        coll1 %2]\n   (if (empty? coll1)\n     (reverse res)\n     (let [[elems rem] (split-at %1 coll1)]\n       (if (>= (count elems) %1)\n         (recur (conj res elems) rem)\n         (recur res rem)))))", "user": "56372c3ce4b0bfe05bf117d1"}, {"problem": 54, "code": "(fn mpartition\n  ([n s] \n   (mpartition n s []))\n  ([n s res]\n   (if (>= (count s) n)\n     (mpartition n (drop n s) (conj res (take n s)))\n     res)))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 54, "code": "(fn partitionX [n x] (if (< (count x) n) nil (let [s (split-at n x)] (cons (first s)(partitionX n (last s))))))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 54, "code": "(fn part [size items]\n  (if (< (count items) size)\n    '()\n    (cons (take size items) (part size (drop size items)))\n    )\n)", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 54, "code": "#(for [i (range (quot (count %2) %1))] (take %1 (drop (* %1 i) %2)))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 54, "code": "(fn my_partition [n l] \n  (when (>= (count l) n) \n    (conj (my_partition n (drop n l)) (take n l))))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 54, "code": "(fn[n col] (filter #(= n (count %)) (vals (group-by #(quot % n) col))))", "user": "5339cb07e4b0e30313ee6caf"}, {"problem": 54, "code": "(fn [n coll] (loop [in coll out []](if (< (count in) n) out (recur (drop n in) (conj out (take n in))))))", "user": "569c1038e4b0542e1f8d145f"}, {"problem": 54, "code": "(fn [n s]\n (->> [nil s]\n      (iterate \n        (fn [[_ x]]\n          [(take n x)\n           (drop n x)]))\n      (drop 1)\n      (map first)\n      (take (quot (count s) n))))", "user": "51e5a627e4b0efabf93c02db"}, {"problem": 54, "code": "(fn f [size lst]\n    ((fn re [i new-v]\n        (let [to (+ i size)]\n            (if (<= to (count lst))\n                (re to (conj new-v (subvec (vec lst) i to)))\n                new-v)))\n    0 []))", "user": "566812f0e4b04acd4f672de1"}, {"problem": 54, "code": "#(second (reduce (fn[[cur acc] i]\n            (let [nw (conj cur i)]\n              (if (= (count nw) %) [[] (conj acc nw)] [nw acc])))\n          [[] []] %2))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 54, "code": "#(loop [l %2 r []] (if (< (count l) %1) r (recur (drop %1 l) (conj r (take %1 l)))))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 54, "code": "(fn my-part\n  [n lst]\n  (if (< (count lst) n)\n    ()\n    (cons (take n lst) (my-part n (drop n lst)))))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 54, "code": "(fn part [n coll]\n  (if (>= (count coll) n) \n    (let [[head tail] (split-at n coll)] \n      (cons head (part n tail)))))", "user": "569d2283e4b0542e1f8d1474"}, {"problem": 54, "code": "(fn [n c]\n  (loop [c c\n         acc '()]\n    (if (>= (count c) n)\n      (recur (drop n c)\n             (cons (take n c) acc))\n      (reverse acc))))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [c coll\n         acc []]\n    (let [sub (take n c)]\n      (if (= n (count sub))\n        (recur (drop n c) (conj acc sub))\n        acc))))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 54, "code": "(fn part [x ys]\n  (when (>= (count ys) x)\n      (lazy-seq (cons (take x ys) (part x (drop x ys))))))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 54, "code": "(fn ! [n s] (if (> n (count s)) [] (cons (take n s) (! n (drop n s)))))", "user": "56066e82e4b08b23635d3173"}, {"problem": 54, "code": "(fn prt [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll)\n          (lazy-seq (prt n (drop n coll))))))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 54, "code": "(fn [n arr]\n  (loop [sol []\n         lo (apply vector arr)]\n    (if (< (count lo) n)\n      sol\n      (recur (conj sol (subvec lo 0 n)) (subvec lo n)))))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 54, "code": "(fn [n coll]\n  (filter #(= (count %) n)\n          (reduce (fn [v x]\n                    (let [wrk (last v)]\n                      (if (or (nil? wrk) (= (count wrk) n))\n                        (conj v [x])\n                        (conj (pop v) (conj wrk x)))))\n                  []\n                  coll)))", "user": "56a79eb0e4b07966d5a8a05d"}, {"problem": 54, "code": "(fn [length coll]\n         (map (fn [[start end]] (drop start (take end coll)))\n              (map (fn [i] [(* i length) (* (inc i) length)])\n                   (range (quot (count coll) length)))))", "user": "56ac81ace4b03c432f187347"}, {"problem": 54, "code": "#(apply map list (into [] (map (fn [u] (into [] (map second u))) (vals (group-by (fn [z] (mod (first z) %)) (map-indexed (fn [i x] [i x]) %2))))))", "user": "56992162e4b0542e1f8d143c"}, {"problem": 54, "code": ";; yack... took the scenic route on this one.\n;; better solutions using (take n coln) and (drop n coln)\n\n(fn [n col] \n\n  (let \n  [s (drop-last (mod (count col) n) col ) ;; prune off extra items\n\n   buckets (fn [acc x]\n          (if (= 0 (mod (count (last acc)) n) )\n            (conj acc [x]) ; append new list [x]\n            (update-in acc [(dec (count acc))] #(conj % x) ); otherwise x is added to last list  \n           ))\n   ]\n\n  (reduce buckets [] s)\n\n))", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 54, "code": "(fn part [x xs]\n  (if (< (count xs) x) \n    '() \n    (conj (part x (drop x xs)) (take x xs))))", "user": "55815973e4b05c286339e0f6"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 54, "code": "#(first (reduce (fn [res el] \n(if (empty? res) \n(list (list) (list el)) \n(let \n[l (concat (last res) (list el))\ncl (count l) \nfr (first res)]\n(if \n(= %1 cl)\n(list (concat fr (list l)) (list))\n(list fr l)\n)\n)\n\n)) () %2))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 54, "code": "(fn [n xs] (apply (partial map (fn [& vs] (map last vs))) (vals (group-by #(mod (first %) n) (map-indexed vector xs)))))", "user": "56b35565e4b0982f16b37e16"}, {"problem": 54, "code": "#(loop [todo %2 done '()]\n  (if (>= (count todo) %)\n    (recur (drop % todo) (conj done (take % todo)))\n    (reverse done)))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 54, "code": "(fn [x y] (loop [part x \n                            data y\n                            len (* (int (/ (count y) x)) x)\n                            result ()]\n                      (if-not (first data)\n                        (reverse result)\n                        (if (and (= (mod len part) 0) (>= (count data) x)) \n                          (recur part (rest data) (- len 1) (cons (take part data) result))\n                          (recur part (rest data) (- len 1) result)\n                          ))))", "user": "567f034be4b0feffd0d18eba"}, {"problem": 54, "code": "#(loop [curr []\n        remaining %2]\n   (if (>= (count remaining) %1)\n     (recur (conj curr (take %1 remaining)) (drop %1 remaining))\n     curr))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 54, "code": "(fn myp [n s](map #(map second %)\n     (map #(second %)\n          (filter  (fn [it] (>= (count (second it)) n))\n                  (group-by first\n                            (map-indexed (fn [idx itm] [(quot idx n) itm]) s))))))", "user": "56b280e3e4b0982f16b37e06"}, {"problem": 54, "code": "(fn [p l]\n((fn [p l r]\n (let [g (count (take p l))]\n  (if (empty? l)\n    r\n    (recur \n      p \n      (nthrest l p) (if (== p g)\n     (concat \n       r (list (take p l))\n     ) r)\n    )\n  ) )\n) p l '()))", "user": "556f2009e4b09a3098a52519"}, {"problem": 54, "code": "(fn myf [n seq]\n  (if (< (count (drop n seq)) n)\n    (conj '() (take n seq))\n    (conj (myf n (drop n seq)) (take n seq))))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 54, "code": "(fn partitioner [num xs]\n   (let [[group remainder] (split-at num xs)]\n     (if (= (count group) num)\n       (cons group (partitioner num remainder)))))", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 54, "code": "(fn [nr vect]\n  (:final (reduce (fn [map current]\n                    (let [conj-deep (fn [map key value]\n                                      (assoc map key (conj (map key) value)))\n                          new-buff (conj (:buffer map) current)]\n                      (if (< (count new-buff) nr)\n                        (assoc map :buffer new-buff)\n                        (assoc (conj-deep map :final new-buff) :buffer []))))\n                  {:final []\n                   :buffer []}\n                  vect)))", "user": "5655e056e4b0f9d632dd849b"}, {"problem": 54, "code": "(fn part\n  [n coll]\n  (reverse \n   (drop-while \n    #(not (= n (count %))) \n    (reverse (partition-by #(int (/ % n)) coll)) ) ))", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 54, "code": "(fn foo [n coll]\n  (let [[a b] (split-at n coll)]\n    (when (= n (count a))\n      (cons a (lazy-seq (foo n b))))))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 54, "code": "#(loop [s %2 built ()]\n   (if (< (count s) %1)\n     built\n     (recur (drop %1 s) (concat built (list (take %1 s))))))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 54, "code": "(fn [n s]\n  (loop [source s\n         sink (list)]\n    (if (< (count source) n)\n      sink\n      (recur (drop n source) (concat sink [(take n source)])))))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 54, "code": "(fn p [n x]\n  (if (>= (count x) n)\n    (cons (take n x) (p n (drop n x)))))", "user": "56bca51ae4b0f26550335963"}, {"problem": 54, "code": "(fn [n s] \n  (map #(take n (drop (* n %) s)) \n    (range (quot (count s) n))))", "user": "56b86e64e4b0f26550335924"}, {"problem": 54, "code": "(fn [n s]\n  (map #(map (fn [x] (nth s (+ x %))) (range n))\n       (map #(* n %) (range (int (/ (count s) n))))))", "user": "56baab13e4b0f26550335948"}, {"problem": 54, "code": "(fn pia [n sq]\n  (do\n    (println (count sq))\n    (if (>= (count sq) n)\n      (cons\n        (take n sq)\n        (pia n (drop n sq))\n        ))))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 54, "code": "(fn [z s] (first (reduce #(let [[r c] % nc (conj c %2)]\n                                        (if (= z (count nc)) [(conj r nc) []] [r nc])\n                                        ) [[] []] s)))", "user": "555c38d9e4b0b056612e2249"}, {"problem": 54, "code": "(fn partitioner [offset coll]\n  (loop [result []\n         i (quot (count coll) offset)\n         coll coll]\n    (if (<= i 0)\n      result\n      (recur (conj result (take offset coll))\n             (dec i)\n             (drop offset coll)))))", "user": "56c33ceae4b05cc29241ee89"}, {"problem": 54, "code": "(fn \n  [n coll]\n  (letfn [(partt\n            [n coll]\n            (if (<= n (count coll))\n              (cons (take n coll) (partt n (drop n coll)))\n              (list coll)))]\n    (drop-last (partt n coll))))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 54, "code": "(fn pttn [n coll]\n  (if (<= n (count coll))\n    (cons (take n coll) (pttn n (drop n coll)))))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 54, "code": "(fn [n s]\n  (for [i (range (quot (count s) n))]\n    (take n (nthnext s (* n i)))))", "user": "536673a8e4b0243289761e76"}, {"problem": 54, "code": "(fn p [n s]\n  (let [[h t] ((juxt (partial take n) (partial drop n)) s)]\n    (lazy-seq (cons h (if-not (< (count t) n) (p n t))))))", "user": "56baa68ce4b0f26550335947"}, {"problem": 54, "code": "(fn [n r] (let [g (group-by #(mod % n) r)] (apply map list (map #(g %) (range n))) ))", "user": "56c4f971e4b05cc29241ee9d"}, {"problem": 54, "code": "(fn part-seq [n coll]\n\t(loop [result []\n\t\t   c coll]\n\t\t(let [part (take n c)]\n\t\t\t(if (= n (count part))\n\t\t\t\t(recur (conj result part) (drop n c))\n\t\t\t\tresult))))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 54, "code": "(fn [n c]\n      (->>\n       (filter #(zero? (mod % n)) (range 0 (count c))) ; cutting pos\n       (reduce #(conj %1 (take n (nthrest c %2))) [])  ; cut\n       (filter #(= n (count %))))                      ; check last length\n      )", "user": "53483a32e4b084c2834f4a57"}, {"problem": 54, "code": "(fn x [n ls]\r\n  (if (< (count ls) n) '()\r\n    (cons (take n ls) (x n (drop n ls)))))", "user": "566470b9e4b0e91d5f5c5658"}, {"problem": 54, "code": "(fn r [n s] (when (>= (count s) n) (concat (list (take n s)) (r n (drop n s)))))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (loop [remain s, result []]\n    (if (< (count remain) n)\n      result\n      (recur (drop n remain) (conj result (take n remain))))))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 54, "code": "(fn f [n s]\n  (if (>= (count s) n) (cons (take n s) (f n (drop n s)))))", "user": "56cd44fde4b0ea9b8538f749"}, {"problem": 54, "code": "(fn [n coll]\n  (take-while #(<= n (count %))\n              (map (partial take n)\n                   (iterate (partial drop n) coll))))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 54, "code": "(fn [num coll]\n  (filter #(= (count %) num)\n          (map second\n               (group-by #(int (/ % num)) coll))))", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 54, "code": "(fn [spl coll]\n  (loop [coll coll\n         acc []]\n    (let [part (take spl coll)]\n      (if (= (count part) spl)\n        (recur (drop spl coll) (conj acc part))\n        acc))))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 54, "code": "#(loop [xs %2 res []]\n   (let [[part other] (split-at %1 xs)]\n     (if (< (count part) %1)\n       res\n       (recur other (conj res part))\n     )\n   )\n)", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 54, "code": "#(apply map list\n        (for [n (range %)]\n          (take-nth % (nthrest %2 n))))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 54, "code": "(fn [a c]\n  (loop [result []\n         items c]\n    (if (< (count items) a)\n      result\n      (recur (conj result (take a items))\n             (drop a items)))))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [xs xs\n         ret '()]\n    (if (< (count xs) n)\n      ret\n      (recur (drop n xs)\n             (concat ret [(take n xs)])))))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 54, "code": "(fn [ n x ] (loop [y x, c [] ]\n     (if (< (count y) n) c\n       (recur (drop n y) (conj c (take n y))))))", "user": "4fd11a93e4b04c3a95aa040a"}, {"problem": 54, "code": "(fn [n coll] (let [coll (into [] coll)] (reverse (map reverse (map #(into (list) %1) (reduce #(cons (subvec coll (* n %2) (* n (inc %2))) %1)\n                                                                                      []\n                                                                                      (range 0 (Math/floor (/ (count coll) n)))))))))", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [res [] remaining coll]\n    (if (> n (count remaining))\n      res\n      (let [[part tail] (split-at n remaining)]\n        (recur (conj res part) tail)))))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 54, "code": "(fn partition-a-sequence [n sqn]\n  (if (< (count sqn) n)\n    '()\n    (conj\n      (partition-a-sequence n (drop n sqn))\n      (take n sqn))))", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 54, "code": "(fn partition* [n s]\n  (if (>= (count s) n)\n    (cons (take n s) (partition* n (drop n s)))))", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [i coll o []]\n    (if (empty? i)\n      o\n      (let [s (split-at n i) f (first s) b (second s)]\n        (recur\n         (if (>= (count b) n)\n           b '())\n         (conj o f))))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 54, "code": "(fn r\n  ([x v] (r x (drop x v) [(take x v)]))\n  ([x v s] (if (< (count v) x) s (r x (drop x v) (conj s (take x v))))))", "user": "56aed78fe4b03c432f187363"}, {"problem": 54, "code": "(fn [n s]\n  (map #(take n (drop % s))\n       (range 0\n              (* (quot (count s) n) n)\n              n)))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 54, "code": "(fn [n c]\n  (loop [acc []\n         rst c]\n    (if (< (count rst) n)\n      acc\n      (recur (conj acc (take n rst)) (drop n rst)) )))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 54, "code": "(fn [n s]                                                                       \n  (take-while                                                                   \n    #(= n (count %))                                                            \n    (map #(take n (drop (* % n) s)) (range 0 (/ (count s) n)))))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 54, "code": "(fn mp [n coll]\n  (take-while #(= (count %) n)\n              (cons (take n coll)\n                    (lazy-seq (mp n (drop n coll))))))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 54, "code": "(fn [n c]\n  (map #(take n (drop % c)) \n       (range 0 (- (count c) (dec n)) n)))", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 54, "code": "#(loop [v %2 r []]\n   (if (< (count v) %)\n       r\n       (recur (drop % v)(conj r (take % v)))))", "user": "564d3169e4b0284900eef67c"}, {"problem": 54, "code": "(fn [n[l & ls]]\n  (reverse\n   (map\n    reverse\n    (filter\n     #(= n (count %))\n     (reduce\n      (fn [[a & as] x] (if (= (count a) n)\n                         (cons [x] (cons a as))\n                         (cons (cons x a) as)))\n      [[l]]\n      ls)))))", "user": "56050f06e4b08b23635d3161"}, {"problem": 54, "code": "(fn chop [i v]\n  (if (or (empty? v) (< (count v) i))\n    nil\n\t(lazy-seq (cons (take i v) (chop i (drop i v))))))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 54, "code": "(fn part [n coll]\n  (loop [xs coll\n         ys []]\n    (if (< (count xs) n) ys\n      (recur (drop n xs) (conj ys (take n xs))))))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 54, "code": "(fn [x ys] (letfn[(partition2 [x xs ys](let [first (take x ys) second (drop x ys)] (if (not= x (count first)) (reverse  xs) (partition2 x (conj xs first) second))))](partition2 x '() ys)))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 54, "code": "(fn [divisor data]\n  (loop [result [] part [] mydata data]\n    (if (empty? mydata)\n      (if (= (count part) divisor) (seq (conj result (seq part)))\n        (seq result))\n      (if (= (count part) divisor)\n        (recur (conj result (seq part)) [] mydata)\n        (recur result (conj part (first mydata)) (rest mydata))))))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 54, "code": "(fn [n coll]\n    (filter #(= (count %) n)\n            (reductions\n             (fn [acc val] (if (= 0 (mod (first val) n))\n                             (rest val)\n                             (concat acc (rest val))))\n             '()\n             (map-indexed #(list %1 %2) coll))))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 54, "code": "#(loop [parts []\n         ys %2]\n    (let [[y r] (split-at % ys)]\n      (if (= (count y) %)\n        (recur (conj parts y) r)\n        parts)))", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 54, "code": "(fn [n coll] (filter #(= n (count %)) (for [s (range 0 (inc (count coll)) n)] (take n (drop s coll)))))", "user": "56e6ef89e4b02e7e935eb6d0"}, {"problem": 54, "code": "(fn partition' [n col]\n  (loop [acc []\n         col col]\n    (let [part (take n col)]\n      (if (< (count part) n)\n        acc\n        (recur (conj acc part) (drop n col))))))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 54, "code": "(fn [n d]\n  (loop [in d out []]\n    (if (or (< (count in) n))\n      out\n      (recur (drop n in) (conj out (take n in))))))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 54, "code": "(fn solve [x, y]\n  (let [l (count y)]\n  \t(map #(map first %) (vals (group-by #(quot (second %) x) (map vector (take (- l (rem l x)) y) (range)))))\n  )\n)", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 54, "code": "(fn[n coll]\n  (filter\n   \t #(= (count %) n)\n     (partition-by (fn[i]\n                  (int (/ i n))) coll)))", "user": "55101237e4b06e50f9beb181"}, {"problem": 54, "code": "(fn my-part [n s]\n  (if (>= (count s) n)\n    (cons (take n s) (my-part n (drop n s)))))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 54, "code": "(fn p [n coll]\n  (let [s (take n coll)]\n    (if (= (count s) n)\n      (lazy-seq (cons s (p n (drop n coll)))))))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 54, "code": "(fn [size data]\n    (letfn ([mpartition [size data previous-parts]\n                      (let [mpart (take size data)\n                        leftover (drop size data)]\n                        (if (>= (count mpart) size)\n                          (mpartition size leftover (concat previous-parts (list mpart)) )\n                          previous-parts\n                          ))])\n    \n    \n     (mpartition size data (list))\n     )\n   )", "user": "56ef11efe4b04a395b9a045b"}, {"problem": 54, "code": "(fn\n  [i d]\n  (loop [p [], t (split-at i d)]\n    (if (<= i (count (second t)))\n      (recur\n       (conj p (first t))\n       (split-at i (second t)))\n      (conj p (first t)))))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 54, "code": "(fn part [n S]\n  (loop [P []\n         R S]\n    (if (< (count R) n)\n      P\n      (recur (conj P (take n R)) (drop n R)))))", "user": "56f53962e4b046a417f9206c"}, {"problem": 54, "code": "(fn [n r] \n  (loop [v r s []]\n    (let [sel (take n v)]\n      (if (= n (count sel))\n        (recur (drop n v) (conj s sel))\n        s))))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 54, "code": "(fn [n xs]\n  (let [i (-> xs count (quot n))]\n    (for [k (range i)]\n      (->> xs (drop (* k n)) (take n)))))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 54, "code": "(fn my-partition\n  [n coll]\n  (loop [res [] seq coll] \n    (if (< (count seq) n)\n           res\n           (recur \n             (conj res (take n seq)) \n             (drop n seq)))))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 54, "code": "#(filter (fn[x] (=(count x) %))\n          (reduce (fn [acc e]\n                    (if (= (count (last acc)) %)\n                      (conj acc [e])\n                      (conj (vec (butlast acc)) (conj (last acc) e)))\n                    ) [[]] %2))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 54, "code": "(fn [a cnt b]\n         (if (<= cnt (count b))\n           (recur (conj a (take cnt b)) cnt (drop cnt b)) a)) []", "user": "56d6c18ee4b0ea9b8538f7d1"}, {"problem": 54, "code": "(fn f[n,coll] (let [s (split-at n, coll)]\n                 (when (<= n (count coll))\n                   (conj (f n (second s)) (first s)))))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 54, "code": "(fn part [n coll] (when (>= (count coll) n) (cons (take n coll) (part n (drop n coll)))))", "user": "56d1978fe4b0ea9b8538f790"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "56ea8d33e4b04a395b9a040a"}, {"problem": 54, "code": "#((comp seq first) (reduce (fn [[rslt par n] x]\n                            (let [new-par (conj par x)\n                                  new-par-full (= n (count new-par))\n                                  new-rslt (if new-par-full\n                                             (conj rslt (apply list new-par))\n                                             rslt)\n                                  final-par (if new-par-full\n                                              []\n                                              new-par)]\n                              [new-rslt final-par n])) [[] [] %1] %2))", "user": "56fa3f7ae4b07572ad1a88bf"}, {"problem": 54, "code": "(fn [n s]\n  (loop [acc '()\n         s   s]\n    (let [ss (take n s)]\n      (if (< (count ss) n)\n        acc\n        (recur (concat acc (list ss)) (drop n s)))\n      )\n    )\n  )", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 54, "code": "(fn [size xs]\n  (loop [result '()\n         xs xs]\n    (if (< (count xs) size)\n      (reverse result)\n      (recur (conj result (take size xs)) (drop size xs)))))", "user": "56cc34aee4b0ea9b8538f73c"}, {"problem": 54, "code": "(fn [k rng] (loop [c [] r rng] (if (or (empty? r) (< (count r) k)) (seq c) (let [t (take k r) d (drop k r)] (recur (conj c t) d)))))", "user": "55b6a63ae4b01b9910ae299b"}, {"problem": 54, "code": "(fn [a b] \n  (map #(range % (+ % a)) \n       (filter #(<= (+ % a) (+ 1 (last b))) \n               (range 0 (+ 1 (last b)) a)\n               )\n       )\n  )", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 54, "code": "#(take-nth\n  %1\n  (apply (partial map list)\n         (for [n (range %1)] (drop n %2))))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [acc []\n         remaining coll]\n    (if (< (count remaining) n)\n      acc\n      (recur (conj acc (take n remaining)) (drop n remaining))\n    )\n  ) \n)", "user": "5700f1f0e4b08d47c97781ce"}, {"problem": 54, "code": "(fn [n ss]\n  (loop [s ss ps []]\n    (let [p (take n s)]\n      (if (= (count p) n)\n        (recur (drop n s) (conj ps p))\n        ps))))", "user": "520e37cfe4b066f3ea161c96"}, {"problem": 54, "code": "(fn part [n c](when (and (seq c) (>= (count c) n)) (cons (take n c) (part n (drop n c)))))", "user": "56f4623ae4b046a417f9205d"}, {"problem": 54, "code": "(fn part [n coll] (if (< (count coll) n) [] (cons (take n coll) (part n (drop n coll)))))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 54, "code": "(fn partition2 [n coll]\n  (let [mod-coll (drop-last (rem (count coll) n) coll)]\n  (loop [c mod-coll acc '()]\n    (if (empty? c) (reverse acc)\n    (recur (drop n c) (cons (take n c) acc))))))", "user": "56f4cedce4b046a417f92063"}, {"problem": 54, "code": "#(let [f (juxt take drop)]\n    (loop [[a b] (f % %2) acc []]\n      (if (< (count a) %)\n        acc\n        (recur (f % b) (conj acc a))\n        )))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 54, "code": "(fn my-partition\n  [n sq]\n  (if (< (count sq) n)\n    []\n    (concat (vector (take n sq))\n            (my-partition n (drop n sq)))))", "user": "57023fc2e4b08d47c97781db"}, {"problem": 54, "code": "(fn [n coll]\n   (->> (range 0 (- (count coll) n -1) n)\n        (map #(take n (drop % coll)))))", "user": "56dc3bdfe4b0ea9b8538f819"}, {"problem": 54, "code": "(fn [n coll]\n  (filter (comp (partial = n) count)\n    (partition-by\n      (fn [itm]\n        (quot itm n)) coll)))", "user": "5703cd50e4b08d47c97781fc"}, {"problem": 54, "code": "(fn partition-func [n coll]\n  (if (< (count coll) n) \n    ()\n    (cons (take n coll) (partition-func n (drop n coll)))))", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 54, "code": "(fn f1 [p1 p2]\n             ( when-let [s (seq p2)]\n              (let [p (doall (take p1 s))]\n                (when (= p1 (count p))\n                  (cons p (f1 p1 (nthrest p2 p1)))\n                  )\n                )))", "user": "532dbd3ce4b019098a6f8b40"}, {"problem": 54, "code": "(fn [n rangx]\n    (let [rangx (drop-last (mod (count rangx) n) rangx)] \n      (for [y (range 0 (count rangx) n)]\n        (subvec (vec rangx) y (+ n y)))))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 54, "code": "(fn partition-seq [n xs]\n  (if (<= n (count xs))\n   (cons (take n xs) (partition-seq n (drop n xs)))))", "user": "56efc9fde4b04a395b9a0464"}, {"problem": 54, "code": "(fn [x coll]\n  (filter #(= (count %) x)\n  (partition-by #(quot % x) coll)\n  )\n  \n  )", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [s coll\n         acc []]\n    (if (< (count s) n)\n      acc\n      (recur (drop n s) (conj acc (take n s))))))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 54, "code": "(fn [step,coll] (loop [n step,result [], c coll ] (if (> n (count coll))\n                                             result\n                                             (recur (+ n step) (conj result (take step c)) (drop step c)   )    )   ))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [tail []\n         left coll]\n    (let [[l r] (split-at n left)]\n      (if (= (count l) n)\n        (recur (conj tail l) r)\n        tail)\n    )))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 54, "code": "(fn part \n  [x s]                                                                                                                                                                             \n  (let [[res _]                                                                                                                                                                              \n        (reduce                                                                                                                                                                              \n          (fn [[res tmp n] elem]                                                                                                                                                             \n            (let [tmp (cons elem tmp)                                                                                                                                                        \n                  n (inc n)]                                                                                                                                                                 \n            (if (< n x)                                                                                                                                                                      \n              [res tmp n]                                                                                                                                                                    \n              [(cons                                                                                                                                                                         \n                 (reverse tmp) res) [] 0]                                                                                                                                                    \n              )                                                                                                                                                                              \n            )                                                                                                                                                                                \n          )                                                                                                                                                                                  \n          [[] [] 0]                                                                                                                                                                          \n          s)                                                                                                                                                                                 \n        ]                                                                                                                                                                                    \n    (reverse res)                                                                                                                                                                            \n    )                                                                                                                                                                                        \n  )", "user": "56fbe0cce4b07572ad1a88d8"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll\n         result []] \n    (if (>= (count coll) n)\n      (recur (drop n coll) (conj result (take n coll)))\n      result)))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 54, "code": "(fn [n coll] \n    (->> (iterate (partial + n) n) \n         (take (quot (count coll) n)) \n         (map #(take-last n (take % coll)))))", "user": "5711b532e4b09c608db70449"}, {"problem": 54, "code": "(fn [n col]\n  (loop [result '()\n         n n\n         col col\n         ]\n    (if (> n (count col)) \n      (reverse  result)\n      (recur (cons (take n col) result) n (drop n col))\n      )\n    )\n)", "user": "56c7d8dee4b0ed865f9758c9"}, {"problem": 54, "code": "(fn [n s]\n  (loop [i (/ (count s) n) se s accum '()]\n    (if (< i 1)\n      (reverse accum)\n      (recur (dec i)\n        (drop n se)\n        (cons (take n se) accum)\n      )\n    )))", "user": "56b506d5e4b0982f16b37e2d"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (if (>= (count s) n)\n    (lazy-seq (cons (take n s) (my-partition n (drop n s))))))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 54, "code": "(partial \n (fn [acc n l]\n  (if (< (count l) n)\n    acc\n    (recur (conj acc (take n l)) \n           n \n           (drop n l)\n    )\n  )\n ) [])", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 54, "code": "(fn f\n  ([c s] (f c s '()))\n  ([c s r] (if (empty? s) (reverse r) \n             (recur c (drop c s) (if (= (count (take c s)) c) (conj r (take c s)) r)))))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 54, "code": "(fn [n a-seq]\n  (let [part-by-idx (->> a-seq\n                         (map-indexed #(vector (quot %1 n) %2))\n                         (group-by #(first %))\n                         (vals))]\n    (filter #(= n (count %))\n            (for [x part-by-idx]\n                 (for [y x]\n                   (second y))))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (if (< (count s) n)\n    (list)\n    (cons (take n s) (my-partition n (drop n s)))))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 54, "code": "(fn f [n coll]\n  (let [section (take n coll)]\n   (when (= (count section) n) \n     (cons section (f n (drop n coll))))))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 54, "code": "(fn [n vs]\n            (letfn [(vec->list [v] (->> v rseq (into '())))]\n              (loop [vs' vs, result [], bucket []]\n                (if (seq vs')\n                  (if (and (empty? bucket)\n                           (< (count vs') n))\n                    (vec->list result)\n                    (let [v (first vs')\n                          new-bucket (conj bucket v)]\n                      (if (= n (count new-bucket))\n                        (recur (rest vs')\n                               (conj result (vec->list new-bucket))\n                               [])\n                        (recur (rest vs') result new-bucket))))\n                  (vec->list result)))))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (loop [ret '()\n         s s]\n    (let [t (take n s)\n          r (nthrest s n)]\n      (if (< (count t) n)\n        (reverse ret)\n        (recur (conj ret t) r)))))", "user": "571d063ee4b0145328a76272"}, {"problem": 54, "code": "(fn [n s]\n  (loop [r s out []]\n    (if (< (count r) n)\n      out\n      (recur (drop n r) \n             (conj out (take n r))))))", "user": "56f51879e4b046a417f92069"}, {"problem": 54, "code": "(fn part\n  [n coll]\n  (loop [coll coll acc []]\n    (if (>= (count coll) n)\n      (let [[first rest] (split-at n coll)]\n        (recur rest (conj acc first))\n        )\n      acc\n    )\n  )\n  )", "user": "56edf2dde4b04a395b9a044b"}, {"problem": 54, "code": "(fn foo [n col]\n  (if (> n (count col))\n    []\n    (concat [(take n col)] (foo n (drop n col)))))", "user": "571e5c9ee4b0145328a76290"}, {"problem": 54, "code": "(fn [n s]\n  (let [l (count s)]\n  (for [i (range 0 (- l (mod l n)) n)]\n    (take n (drop i s)))))", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 54, "code": "(fn dziel [n c]\n  (loop [x '()\n         c c]\n    (if (< (count c) n)\n      (reverse x)\n    (recur (into x (list (take n c))) (drop n c)))))", "user": "566734c4e4b04acd4f672dcc"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (->> (loop [m 0\n              ret []]\n         (if (> m (count s))\n           ret\n           (recur (+ m n) (conj ret (take n (drop m s))))))\n       (filter #(= n (count %)))))", "user": "56791447e4b05957ce8c6183"}, {"problem": 54, "code": "(fn part [n coll] \n  (if (<= n (count coll))\n    (cons (take n coll) (part n (drop n coll)))))", "user": "5602bdf9e4b04bb52996e1a7"}, {"problem": 54, "code": "(fn p [n c]\n  (when (>= (count c) n) (cons (take n c) (p n (drop n c)))))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 54, "code": "(fn [x coll]\n  (->> (reduce (fn [acc v]\n             (if (< (count (last acc)) x)\n               (update-in acc [(dec (count acc))] conj v)\n               (conj acc [v]))) [[]] coll)\n       (filter #(= (count %) x))))", "user": "516c3472e4b06f078fab251c"}, {"problem": 54, "code": "(fn [n x]\n  (loop [rst x out []]\n    (if (< (count rst) n)\n      out\n      (recur (drop n rst) (conj out (vec (take n rst)))))))", "user": "54764a8fe4b0c51c1f4d72a3"}, {"problem": 54, "code": "(fn [x items]\n  (loop [curr-items items\n         result []]\n    (if (< (count curr-items) x)\n      result\n      (recur (drop x curr-items) (concat result [(take x curr-items)])))))", "user": "572722c4e4b0c5bde472c134"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [remaining-seq coll\n         partitions []]\n    (if (< (count remaining-seq) n)\n      partitions\n      (recur (drop n remaining-seq)\n             (conj partitions (take n remaining-seq))))))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 54, "code": "(fn my-partition\n  [n coll]\n  (if (< (count coll) n)\n    '()\n    (conj (my-partition n (drop n coll)) (take n coll))))", "user": "572db6d5e4b0cd1946bd0f78"}, {"problem": 54, "code": "(fn\n  [n s]\n  (loop [s s, rez '[]]\n    (if (>= (count s) n)\n      (recur (drop n s) (conj rez (take n s)))\n      rez)))", "user": "56b2630be4b0982f16b37e03"}, {"problem": 54, "code": "(fn pa [n c]\n  (loop [acc '() col c]\n    (if (> n (count col))\n      (reverse acc)\n      (recur (conj acc (take n col))\n             (drop n col))\n      )\n   )\n  )", "user": "5720fc08e4b0c5bde472c0a3"}, {"problem": 54, "code": "(fn [n coll]\n\n  (letfn [\n\n    (next-element [r x]\n\n      (let [last-seq (last r)]\n\n        (if (or\n              (empty? last-seq)\n              (> n (count last-seq)))\n\n          ;; Add to the last sequence\n          (conj (pop r) (conj last-seq x))\n\n          ;; Start a new sequence\n          (conj r (vec (list x))))))]\n\n    (filter #(= (count %) n) (reduce next-element [[]] coll))))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 54, "code": "(fn [n coll]\n   (let [remainder (mod (count coll) n)\n         input (if (not (zero? remainder)) (drop-last remainder coll) coll)]\n     (loop [i input\n            result []]\n       (if (zero? (count i))\n         result\n         (recur (drop n i) (conj result (take n i)))))))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [[f s] (split-at n xs)\n         acc []]\n    (if (< (count f) n)\n      acc\n      (recur (split-at n s) (conj acc f)))))", "user": "5724a4dae4b0c5bde472c0fe"}, {"problem": 54, "code": "(fn [n xs] (map #(take n %) (take (quot (count xs) n) (iterate #(drop n %) xs))))", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 54, "code": "(fn part1 [n c] (if (< (count c) n) [] (let [\n\t[f r] (split-at n c)\n] (cons f (part1 n r)))))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll result []] \n    (if (< (count coll) n)\n      result\n      (recur (drop n coll) (conj result (take n coll))))))", "user": "4df73d64535d04ed9115e775"}, {"problem": 54, "code": "(fn part [n lst]\n  (if (< (count lst) n)\n    []\n    (concat [(take n lst)] (part n (drop n lst)))))", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 54, "code": "(fn parsec [n c]\n  (lazy-seq\n    (when-let [s (if (>= (count c) n)  c)]\n      (cons (take n s) (parsec n (drop n s))))))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 54, "code": "(fn parseq [n xs] \n   (loop [xin xs \n          xout '()]\n      (if (< (count xin) n) xout \n         (recur (drop n xin) (concat xout (list (take n xin)))))))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 54, "code": ";(vec(\n(fn next-x [x coll]\n  (if (> x (count coll))\n    '() \n    (lazy-seq (cons (take x coll) (next-x x (drop x coll))))))\n    ; 2 (range 8)))", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 54, "code": "(fn partitionIt [nsteps inputcoll]\n  (loop [coll inputcoll nsteps nsteps outputcoll []]\n    (let [splitsubs (split-at nsteps coll)]\n      (if (< (count (first splitsubs)) nsteps)\n        outputcoll\n        (recur (last splitsubs ) nsteps (conj outputcoll (first splitsubs)))\n        )\n      )))", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 54, "code": "(letfn [(part [n xs]\n          (let [[seg remain] (split-at n xs)]\n            (when (= (count seg) n)\n              (cons seg (part n remain)))))]\n  part)", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 54, "code": "(fn [x sq]\n    (let [reductor \n          (fn [sq]\n            (reduce (fn [result [index item]]\n                      (println (str index \":\" item \":\" result))\n                      (if (zero? (rem index x))\n                                        ; Start a new sub-list\n                        (conj result [item])\n                                        ; Append to last sub-list\n                        (assoc-in result [(- (count result) 1) (count (last result))] item)\n                        )\n                      )\n                                        ; Result\n                    []\n                                        ; Create a new list with indexed records\n                                        ; [i item]\n                    (map (fn [i j] [i j]) (range 0 (count sq)) sq)\n                    ))\n          filterer \n          ; Remove any entries which are less than x in length\n          (fn [reduced-list]\n            (filter (fn [sub-seq] (>= (count sub-seq) x)) reduced-list)\n            )\n          ]\n      (-> sq reductor filterer)\n      )\n    )", "user": "571a282ae4b07c98581c3b46"}, {"problem": 54, "code": "(fn [x y]\n   (let [groupNum (quot (count y) x)]\n     (map #(drop (* %2 x) (take %1 y)) (iterate (partial + x) x) (range groupNum))))", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 54, "code": "(fn [n coll]\n (seq\n  (loop [coll (vec coll) res []]\n    (if (< (count coll) n)\n       res\n       (recur\n         (take-last (- (count coll) n) coll)\n         (conj res (take n coll)))))))", "user": "5167e8ace4b0c5a4140a309a"}, {"problem": 54, "code": "(fn mpart [n coll]\n  (map #(apply concat %)\n       (apply map (fn [& args] (vector args))\n              (for [x (range n)]\n                (take-nth n (drop x coll))))))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 54, "code": "(fn [n l]\n  (loop [ret [] r l ]\n    (if (empty? r)\n       (if (= n (count (last ret) ))\n        ret (butlast ret)\n        )\n       (recur (conj ret (take n r)  )     (drop n r) )\n      )\n    )\n  )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 54, "code": "(fn [n xs] (filter #(> (count %) (- n 1)) (partition-by #(quot % n) xs)))", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 54, "code": "(fn [x coll]\n  (let [iters (quot (count coll) x)]\n    (loop [i 0, acc `()]\n      (if (< i iters)\n        (recur (inc i) (concat acc (list (take x (drop (* x i) coll)))))\n        \n        acc)\n      )))", "user": "57434103e4b0c285004e8a9e"}, {"problem": 54, "code": "(fn part [n xs]\n  (lazy-seq\n    (let [[h t] (split-at n xs)]\n      (when (= n (count h))\n        (cons h (part n t))))))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 54, "code": "#(loop [result [] cur %2]\n   (if (> %1 (count cur))\n     result\n     (recur (conj result (take %1 cur)) (drop %1 cur))))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 54, "code": "(fn my-partition [n coll]\n    (loop [ret [] x coll]\n      (if (empty? x) ret\n         (recur \n            (if (= n (count (first (split-at n x))))\n                  (conj ret (first (split-at n x))) \n                  ret)\n                (first (rest (split-at n x)))))))", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 54, "code": "(fn parition2 [n c]\n   (loop [ c1 c\n           s1 []\n         , out [] ]\n     (if (empty? c1)  \n       out\n       ( let [ i (first c1)\n             , s2 (conj s1 i)\n             , gotseq (= (count s2) n)  \n             ]\n         (recur  \n           (rest c1)   \n           (if gotseq [] s2)\n           (if gotseq (conj out s2) out)\n         )\n        )\n     )\n    )\n)", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [c coll\n         p []]\n    (if (>= (count c) n)\n      (recur (drop n c) (conj p (take n c)))\n      p)))", "user": "5609d328e4b05f002753deee"}, {"problem": 54, "code": "(fn mypart [x s] (if (<= x (count s)) (conj (mypart x (nthrest s x)) (take x s)) '()))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 54, "code": "(fn f [n col]\n  (filter #(= n (count %1)) \n  (for [i (range 0 (count col) n)]\n    (take n (drop i col)))))", "user": "574af03ce4b02ea114799202"}, {"problem": 54, "code": "(fn [p r]\n    (let [c (count r)\n          t (- c (mod c p))\n          v (range 0 t p)]\n      (for [d v]\n        (take p (drop d r)))))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 54, "code": "(fn [n s]\n  (for [i (range (quot (count s) n))]\n    (take n (drop (* n i) s))))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 54, "code": "(fn par [index coll]\n  (loop [result (vector) coll coll]\n  (if (< (count coll) index)\n   result\n   (recur (conj result  (take index coll)) (drop index coll)))))", "user": "57465526e4b009280f9f2b61"}, {"problem": 54, "code": "(fn my_partition [n v]\n    (if (>= (count v) n)\n      (cons (take n v) (my_partition n (drop n v)))))", "user": "57408f87e4b05c31a32c0856"}, {"problem": 54, "code": "(fn prtn [n coll]\n    (let [coll coll  portion (take n coll)]\n      (when (= n (count portion)) (cons portion (lazy-seq (prtn n (drop n coll)))))))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 54, "code": "(fn [n xs]\n  (let [c  (* n (quot (count xs) n))]\n    (for [i (range 0 c n)] \n      (take n (drop i xs)))))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 54, "code": "(fn [n xs]\n    (loop [coll xs  acc [] ]\n          (if (< (count coll) n)\n              acc\n            (recur (drop n coll) (conj acc (take n coll))))))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 54, "code": "(fn my-partition\n  ([x lis] (my-partition x lis 0 []))\n  ([x lis coun resp]\n    (if (= lis []) \n      (if (= x (count (last resp))) resp (drop-last resp))\n       (if (or (= coun x) (= resp []))\n         (my-partition x (rest lis) 1 (conj resp [(first lis)]))\n         (my-partition x (rest lis) (inc coun) \n                         (assoc resp (dec (count resp)) \n                                (conj (last resp) (first lis))))))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 54, "code": "(fn [l xs]\n   (loop [xs xs res []]\n     (if (< (count xs) l)\n       res\n       (recur (drop l xs)\n              (conj \n               res\n               (take l xs))))))", "user": "4f35e662e4b0e243712b1ec6"}, {"problem": 54, "code": "(fn part [n sq]\n  (loop [ rm sq\n          res [] ]\n    (if (> n (count rm))\n      res\n      (recur \n        (->> rm\n         (reverse)\n         (take (- (count rm) n))\n         (reverse))\n        (conj res (take n rm))\n       ))))", "user": "574e7be7e4b02ea114799242"}, {"problem": 54, "code": "(fn part-seq [n xs]\n  (letfn [(part-seq-do [n acc xs] \n           (if (< (count xs) n)\n             acc\n             (recur n (conj acc (take n xs)) (drop n xs))))]\n    (part-seq-do n [] xs)))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 54, "code": "(fn [x c0]\n\n  (loop [res []\n         c   c0]\n    (if (< (count c) x)\n      res\n      (recur (conj res (take x c)) (drop x c)))))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 54, "code": "(fn [x xs]\n  (loop [acc '()\n         sq xs]\n    (if (or (empty? sq)\n            (> x (count sq)))\n      (reverse acc)\n      (recur (cons (take x sq) acc)\n             (drop x sq)))))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 54, "code": "(fn partition' [n xs]\n  (lazy-seq\n    (if (> n (count xs))\n      '() (cons (take n xs) (partition' n (drop n xs))))))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 54, "code": "(fn p [n c]\n  (if (< (count c) n)\n    '()\n    (cons (take n c)\n          (p n (drop n c)))))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 54, "code": "(fn part [n coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [p (doall (take n s))]\n           (when (= n (count p))\n             (cons p (part n (nthrest s n))))))))", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 54, "code": "(fn part [n r]\n  (->> r\n       (group-by #(mod (.indexOf r %) n))\n       vals\n       (apply map vector)))", "user": "508c3d42e4b0f17d83ea26b2"}, {"problem": 54, "code": "(fn partn [i s] (\n  if (< (count s) i) []\n    (cons (take i s) (partn i (drop i s)))))", "user": "57539e04e4b02ea1147992ab"}, {"problem": 54, "code": "(fn partition*\n  [n coll]\n  (lazy-seq\n   (let [s (take n coll)]\n     (if (= (count s) n)\n       (cons s (partition* n (drop n coll)))))))", "user": "575cbe44e4b02ea114799374"}, {"problem": 54, "code": "(fn partition' [n xs]\n  (if (empty? xs) '()\n      (if (< (count (drop n xs)) n)\n        (list (take n xs ))\n        (cons (take n xs) (partition' n (drop n xs))))))", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [s n k coll r []]\n    (cond\n     (empty? k) r\n     (= 1 s) (recur n (drop n k) (conj r (take n k)))\n     (= 0 (rem (count k) n)) (recur (dec s) (drop n k) (conj r (take n k)))\n     :else (recur s (drop-last k) r))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 54, "code": "(fn partition-by-x [x coll]\n  (lazy-seq\n   (if (>= (count coll) x)\n     (cons (take x coll) (partition-by-x x (drop x coll)))))\n  )", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 54, "code": "(fn return [n c] (when (and (seq c) (>= (count c) n)) \n                      (cons (take n c) (return n (drop n c)))))", "user": "5739c2fee4b0cd1946bd107a"}, {"problem": 54, "code": "#(loop [i 0 end []]\n   (if (> (* (inc i) %1) (count %2)) end\n     (recur (inc i) (conj end (subvec (vec %2) (* i %1) (* (inc i) %1))))))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 54, "code": "(fn my-partition [n xs]\n  (if (>= (count xs) n)\n    (cons (take n xs) (my-partition n (drop n xs)))))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 54, "code": "(fn partytion [n coll] \n  (if (< (count coll) n) nil\n    (concat (list (take n coll)) (partytion n (drop n coll))))\n  )", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 54, "code": "(fn mypatition [n coll]\n\t(lazy-seq\n\t\t(when-let [s (seq coll)]\n\t\t\t(let [p (take n s)]\n\t\t\t\t(when (= n (count p))\n\t\t\t\t\t(cons p (mypatition n (nthrest s n))))))))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 54, "code": "#(for [i (range (quot (count %2) %))] (take % (drop (* i %) %2)))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 54, "code": "(fn p [n x] (let [r (take n x)\n                  c (count x)]\n              (if (= c n) [r]\n                (if (< c n) []\n                  (cons r (p n (drop n x)))))))", "user": "57642916e4b0994c1922fbee"}, {"problem": 54, "code": "#(loop [col %2\n        res []]\n   (if (> %1 (count col))\n     res\n     (recur (drop %1 col) (conj res (take %1 col)))))", "user": "575fbe58e4b08062f99a4e87"}, {"problem": 54, "code": "(fn foo [x y](if (> x (count y))\n\t\t\t\t  '()\n\t\t\t\t  (let[[a b] (split-at x y)]\n\t\t\t\t\t  (cons a (foo x b))\n\t\t\t\t\t  )\n\t\t\t\t  ))", "user": "575dda55e4b02ea11479938c"}, {"problem": 54, "code": "(fn [x col]\n  (loop [cl (drop-last (rem (count col) x) col) acc []]\n    (if (empty? cl)\n      acc\n      (recur (drop x cl) (conj acc (take x cl)))\n    )))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 54, "code": "(fn my-partition\n  [n coll]\n  (loop [[current & remaining] coll\n         pending []\n         result []\n         i 0]\n    (if (nil? current)\n      (if (= (count pending) n)\n        (conj result pending)\n        result)\n      (if (and (= i 0) (not (empty? pending)))\n        (recur remaining\n               [current]\n               (conj result pending)\n               (mod (inc i) n))\n        (recur remaining\n               (conj pending current)\n               result\n               (mod (inc i) n))))))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 54, "code": "#(loop [c %1 a %2 result []]\n     (if (or (empty? a) (> c (count a)))\n       result\n       (recur c (drop c a) (conj result (take c a)))\n       )\n     )", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "57126104e4b09c608db70458"}, {"problem": 54, "code": "(fn mypart [n seqq]\n   (when \n     (and (seq seqq) (>= (count seqq) n ))\n     (cons (take n seqq) (mypart n (drop n seqq)))\n     )\n  )", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 54, "code": "(fn [n s] (take-while #(= (count %) n) (map #(take n (drop % s)) (iterate #(+ n %) 0))))", "user": "576da825e4b0979f8965156c"}, {"problem": 54, "code": "(fn [c xs]\n  ((fn [xs res]\n\t(let [x (take c xs)]\n   \t  (if (= c (count x))\n       (recur (drop c xs) (conj res x))\n       res\n        )\n      )\n     )\n    xs [])\n  )", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 54, "code": "(fn my-part [n s] \n  (filter #(= n (count %))\n          (reduce (fn [v e] (update-in v [(first e)] #(concat % (second e)))) []\n                  (map-indexed (fn [i x] [(quot i n) [x]]) s))))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 54, "code": "#(loop [o [(take %1 %2)] a (drop %1 %2)]\n   (if (> %1 (count a))\n     o\n     (recur (conj o (take %1 a))\n            (drop %1 a))))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 54, "code": "(fn part [n s]\n  (let [[a b] (split-at n s)]\n    (if (<= n (count s))\n      (cons a (part n b)))))", "user": "4dbf7a31535d020aff1edf75"}, {"problem": 54, "code": "#(let [ns (int (/ (count %2) %1))]\n (loop [n ns dt %2 res []]\n  (if (zero? n) res\n                (recur (dec n) (drop %1 dt) (conj res (take %1 dt))))))", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 54, "code": "(fn cutemup [x alist]\n  (if (< (count alist) (* 2 x))\n    [(take x alist)]\n    (cons (take x alist) (cutemup x (drop x alist)))))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 54, "code": "(fn p [n coll] (when\n               (>= (count coll) n)\n                 (cons\n                                    (take n coll)\n                                    (p n (drop n coll))\n                                    )\n                 )\n  )", "user": "575d16f8e4b02ea114799377"}, {"problem": 54, "code": "(fn f[a x]\n  (if (> a (count x))\n    '()\n    (cons \n      (take a x) \n      (f a (drop a x))\n    )   \n  )\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll\n         acc []]\n    (let [ts (take n coll)\n          ds (drop n coll)\n          nacc (conj acc (take n coll))]\n      (cond\n        (empty? coll) acc\n        (< (count ds) n) nacc\n        :else (recur (drop n coll) nacc)))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 54, "code": "(fn [n s] (apply map vector (vals (group-by #(mod % n) s))))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 54, "code": "#(loop [seq %2\n        acc []\n        res []]\n   (if (empty? seq)\n     (if (= %1 (count acc))\n       (conj res acc)\n       res)\n     (if (< (count acc) %1)\n       (recur (rest seq) (conj acc (first seq)) res)\n       (recur (rest seq) [(first seq)] (conj res acc)))))", "user": "57155980e4b07c98581c3ad7"}, {"problem": 54, "code": "#(loop [acc []\n        coll %2]\n       (if (< (count coll) %1)\n         acc\n         (recur (conj acc (take %1 coll)) (drop %1 coll))))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 54, "code": "(fn [n s]\n  (let [s (drop-last (mod (count s) n) s)]\n    (loop [remaining s l []]\n      (if (empty? remaining)\n        l\n        (recur (drop n remaining) (conj l (take n remaining)))))))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 54, "code": "(fn my-partition [num s]\n  (let [[x y] (split-at num s)]\n    (if (<= num (count x))\n      (cons x (my-partition num y)))))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 54, "code": "(fn [n s] (apply map list (map #(take-nth n (drop % s)) (range n)) ))", "user": "577202d2e4b0979f896515c0"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "574ef641e4b02ea11479924f"}, {"problem": 54, "code": "(fn [n s]\n   (let [part (fn [n s lst acc]\n                (if (empty? s) (reverse acc)\n                  (if (= (inc (count lst)) n) (recur n (rest s) '() (cons (reverse (cons (first s) lst)) acc))\n                    (recur n (rest s) (cons (first s) lst) acc))))]\n     (part n s '() '())))", "user": "57780e4fe4b0979f89651657"}, {"problem": 54, "code": "(fn\n  [n seq]\n  (loop [lseq (rest seq) newseq (vector (list (first seq)))]\n    (if (empty? lseq)\n      (if (= (count (last newseq)) n)\n        (into () (reverse newseq))\n        (into () (reverse (butlast newseq))))\n      (if (= (count (last newseq)) n)\n        (recur (rest lseq) (conj newseq (list (first lseq)) ))\n        (recur (rest lseq) (assoc newseq (- (count newseq) 1) (concat (last newseq) (vector (first lseq)) ))))\n      )))", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 54, "code": "#(loop [s %2 r []]\n   (if (< (count s) %1)\n     r\n     (recur (drop %1 s) (conj r (take %1 s)))))", "user": "571346c0e4b07c98581c3a9b"}, {"problem": 54, "code": "(fn partition' [n coll]\n  (lazy-seq\n   (let [[h t] (split-at n coll)]\n     (when (= n (count h))\n       (cons h (partition' n t))))))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 54, "code": "(fn [x y]\n  (loop [tmp y result []]\n    (if (empty? tmp)\n      result\n      (recur (drop x tmp)\n             (cond (= (count (take x tmp)) x)(conj result (take x tmp))\n                   :else result)\n             \n             \n             )\n      )\n    )\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 54, "code": "(fn part [n coll]\n  (let [a (drop n coll)\n        b (take n coll)]\n    (if\n     (< (count a) n)\n       (list (take n coll))\n       (conj (part n a) b))))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 54, "code": "(fn my-part[n s]\n  (if (>= (count s) n )\n  \t(cons (take n s) (my-part n (drop n s)))))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 54, "code": "#(loop [l %2 n %1 p []]\n   (let [new (take n l)]\n     (if (not= (count new) n)\n       p\n       (recur (drop n l) n (conj p new)))))", "user": "57614948e4b0994c1922fb83"}, {"problem": 54, "code": "(fn my-partition [n xs]\n  (loop [res [] xs xs]\n    (if (>= (count xs) n)\n      (recur (conj res (take n xs)) (drop n xs))\n      res)))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 54, "code": "(fn partitionX [n coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (let [p (take n s)]\n        (when (= n (count p))\n          (cons p (partitionX n (drop n s))))))))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 54, "code": "(fn my-partition [x coll]\n    (when-let [s (seq coll)]\n      (let [chunk (take x coll)\n            rst   (drop x coll)]\n        (when (= (count chunk) x)\n          (cons chunk (my-partition x rst))))))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 54, "code": "(fn [n s]\n  (remove nil?\n   (for [x (range (/ (count s) n))\n        :let [s1 (drop (* n x) s)]]\n    (when (>= (count s1) n)\n      (take n s1)))))", "user": "5776f39de4b0979f89651643"}, {"problem": 54, "code": "#(loop [[e & r] %2 ret [] el []]\n   (if (nil? e)\n     ret\n     (let [el (conj el e)]\n       (if (= %1 (count el))\n         (recur r (conj ret el) [])\n         (recur r ret el)))))", "user": "577832f4e4b0979f8965165b"}, {"problem": 54, "code": "(fn Partition[n v]\n  (when-let [s (seq v)]\n    (let [sub (take n s)]\n      (if (>= (count sub) n)\n        (cons sub (Partition n (drop n s)))))))", "user": "578d230fe4b0ebec4cfb7564"}, {"problem": 54, "code": "(fn Partition [n v]\n    (lazy-seq\n    \t(let [t (take n v)]\n      \t\t(if (>= (count t) n)\n        \t\t(cons t (Partition n (drop n v)))))))", "user": "57934c67e4b0e215f87e8456"}, {"problem": 54, "code": "(fn part [n lst]\n  (if (> n (count lst)) []\n  \t\t\t\t   (cons (take n lst)\n                           (part n (drop n lst)))))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 54, "code": "(fn [n s]\n  (loop [res []\n         in s]\n    (let [next-n (take n in)]\n      (if (< (count next-n) n)\n        res\n        (recur (conj res next-n) (drop n in))))))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 54, "code": "#(map (fn [x] (take %1 (drop x %2)))\n       (map (fn [y] (* y %1))\n            (range (quot (count %2) %1))))", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 54, "code": "(fn [n c]\n  (loop [a [] c c]\n    (let [[h r] (split-at n c)]\n      (if-not (= (count h) n)\n        a\n        (recur (conj a h) r)))))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 54, "code": "(fn blort [n col]\n  (loop [current\n         col result []]\n    (if (>= (count current) n)\n      (recur\n       (take-last (- (count current) n) current)\n       (conj result (take n current)))\n      result)))", "user": "57958dace4b0e215f87e8484"}, {"problem": 54, "code": "(fn part [n ls]\n  (if (<= n (count ls)) \n    (cons (take n ls) (part n (drop n ls)))))", "user": "57915ba4e4b0ebec4cfb75ba"}, {"problem": 54, "code": "#(loop [r [] c %2] (if (< (count c) %) r (recur (conj r (take % c)) (drop % c))))", "user": "4fa436dce4b081705acca19b"}, {"problem": 54, "code": "#(loop [o [(take %1 %2)] a (drop %1 %2)]\n   (if (> %1 (count a))\n     o\n     (recur (conj o (take %1 a))\n            (drop %1 a))))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 54, "code": "(fn split [n v]\n   (if (< (count v) n)\n     []\n     (cons (take n v) (split n (drop n v)))))", "user": "578fc072e4b0ebec4cfb759a"}, {"problem": 54, "code": "#(loop [o [(take %1 %2)] a (drop %1 %2)]\n   (if (> %1 (count a))\n     o\n     (recur (conj o (take %1 a))\n            (drop %1 a))))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 54, "code": "(fn [n coll]\n  (let [size (quot (count coll) n)]\n    (for [index (range size)\n          :let [part (take n (drop (* n index) coll))]]\n      part)))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 54, "code": "(fn x [n l]\n  (if (< (count l) n) nil\n    (cons (take n l) (x n (drop n l)))))", "user": "50e5bca5e4b09ae9427b0e75"}, {"problem": 54, "code": "(fn part [n s]\n  (if (seq s)\n    (let [els\t(take n s)\n          cnt\t(count els)]\n      (if (= cnt n)\n    \t(cons els (part n (drop n s)))))))", "user": "579c8ad1e4b05b1deef9ae0c"}, {"problem": 54, "code": "(fn my-p\n  [n s]\n  (when (<= n (count s)) (cons (take n s) (my-p n (drop n s)))))", "user": "55478ce2e4b0a04f7929954e"}, {"problem": 54, "code": "(fn [x xs]\n  (loop [xs xs out []]\n    (if (< (count xs) x)\n          out\n          (recur (drop x xs) \n                  (conj out (take x xs)))\n\n)))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 54, "code": "(fn [index coll]\n  (loop [acc coll i 0 result {}]\n    (let [map-idx (quot i index)]\n    (if (empty? acc)\n      (filter #(= (count %) index) (vals (into (sorted-map-by <) result)))\n      (recur (rest acc) (inc i) (assoc result map-idx (into [] (conj (result map-idx) (first acc)))))))))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 54, "code": "#(loop [subs () pend %2]\n\t(if (< (count pend) %1)\n\t\t(reverse subs)\n\t\t(recur (conj subs (take %1 pend)) (drop %1 pend))))", "user": "57986b76e4b039eba2ecb116"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [n n, coll coll, res []]\n    (if (> n (count (take n coll))) res\n      (recur n (drop n coll) (conj res (take n coll))))))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [gathered []\n         remaining xs]\n    (let [taken (take n remaining)\n          dropped (drop n remaining)]\n      (if (= (count taken) n)\n        (recur (conj gathered taken) dropped)\n        gathered))))", "user": "57717915e4b0979f896515b3"}, {"problem": 54, "code": "(fn [x s]\n  (filter\n   #(= x (count %))\n   (reduce\n    #(let\n        [last-list (last %1)]\n        (cond\n         (and (not (nil? last-list)) (< (count last-list) x)) (conj (into [] (drop-last %1)) (conj last-list %2))\n         :else (conj %1 [%2])))\n    []\n    s)))", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 54, "code": "(fn PARTITION [n xs]\n  (let [x (take n xs) rest (drop n xs)]\n    (if (= n (count x))\n      (concat (cons x '())  (PARTITION n rest)))))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 54, "code": "(fn [partition-size collection]\n  (take-while\n    #(= partition-size (count %))\n    (reduce #(if (>= (count (last %1)) partition-size)\n               (conj %1 (vector %2))\n               (conj (into [] (butlast %1)) (into [] (conj (last %1) %2))))\n      []\n      collection)))", "user": "576d398be4b0979f8965155d"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [[head & tail :as remaining] (seq xs)\n         acc (vector)\n         res (vector)]\n    (if (= n (count acc)) (recur remaining (vector) (conj res acc))\n      (if (empty? remaining) res\n        (recur tail (conj acc head) res)))))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 54, "code": "(fn part [n xs]\n   (if (< (count xs) n)\n     []\n     (cons (take n xs)\n           (part n\n                 (drop n xs)))))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 54, "code": "(fn z [n seq]\n  (loop [s seq ret []]\n    (if (empty? (drop (- n 1) s )) ret\n        (recur (drop n s), (conj ret (take n s)) ))))", "user": "572ac718e4b0f4d77e651242"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [L (list) coll coll]\n    (let [n-first (take n coll) still (drop n coll)]\n      (if (> n (count n-first))\n        (reverse L)\n        (recur (conj L n-first) still)\n        )\n      )\n    )\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 54, "code": "(fn[a b] \n\n(filter #(=  (count %) a)\n(\n loop [z b y [] ] \n  (if  \n    (not-empty z) \n    (recur \n          (drop a z) \n          (conj y (take a z))\n    ) \n    y\n   )\n)\n))", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 54, "code": "(fn part [n xs]\n  (loop [acc []\n         xs  xs]\n    (let [[as rest] (split-at n xs)]\n      (if (empty? rest)\n        (if (= n (count as))\n          (conj acc as)\n          acc)\n        (recur (conj acc as) rest)))))", "user": "57a4bb65e4b0a966079561eb"}, {"problem": 54, "code": "(fn [n ls]\n  (let [ubound (* (quot (count ls) n) n)\n          ]\n      (->> (map #(vector (quot %1 n) %2) (range ubound) ls)\n            (group-by first )\n             vals\n            (map (partial map second))\n)))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 54, "code": "(fn [n coll]\n  (let [c1 (map-indexed #(list %1 %2) coll)\n        c2 (group-by #(int (/ (first %) n)) c1)]\n    (filter #(= n (count %)) (for [[k v] c2] (map last v)))))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [n n\n         coll coll\n         acc '()]\n    (if (< (count coll) n)\n      acc\n      (recur n (drop n coll) (concat acc (list (take n coll)))))))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 54, "code": "(fn [x coll] (for [i (range 0 (* (quot (count coll) x) x) x)] (take x (drop i coll))))", "user": "5797d4bae4b039eba2ecb107"}, {"problem": 54, "code": "(fn [n s]\n  (let [reds (reductions (fn [v i]\n                           (if (= n (count v))\n                             [i]\n                             (conj v i)))\n                         [(first s)] (rest s))]\n    (filter #(= n (count %)) reds)))", "user": "57a9e274e4b0b8559636fc5d"}, {"problem": 54, "code": "(fn [n s]\n  (loop [r []\n         s' s]\n    (if (empty? s')\n      r\n      (let [t (take n s')]\n        (if (not= n (count t))\n          r\n          (recur (conj r (take n s')) (drop n s')))))))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 54, "code": "(fn my-partition [n col]\n  (lazy-seq\n   (when-let [s (seq col)]\n     (when (>= (count s) n)\n       (cons (take n col) (my-partition n (drop n col))))))\n  )", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 54, "code": "(fn f [n xs]\n  (cond\n    (empty? xs) []\n    (< (count xs) n) []\n    :else (let [s (split-at n xs)]\n            (cons (first s) (f n (second s))))))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 54, "code": "(fn [n xs]\n  (let [m (* (int (/ (count xs) n)) n)\n        xs (reverse (take m xs))]\n    (reduce (fn [ls x]              \n              (if (= (count (first ls)) n)\n                (conj ls (list x))\n               \t(conj (rest ls) (conj (first ls) x)))) \n            (list ()) \n            xs)))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 54, "code": "(fn [n xs]\n    (map\n      (fn [i]\n        (take n\n          (drop\n            (* i n)\n            xs\n          )\n        )\n      )\n      (range\n        (quot\n          (count xs)\n          n\n        )\n      )\n    )\n  )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [step n\n         remaining coll\n         acc []]\n    (if (< (count remaining) step)\n      acc\n      (let [split (split-at step remaining)\n            head (first split)\n            tail (flatten (rest split))]\n        (recur step tail (conj acc head))))))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "57b13adae4b0fbc9809a2750"}, {"problem": 54, "code": "(fn [psize coll]\n  (filter #(= (count %) psize) (partition-by #(int (/ % psize)) coll)))", "user": "57a1ef58e4b0c3d858beb8f3"}, {"problem": 54, "code": "(fn [n s]\n   (loop [[f r] (split-at n s) res []]\n     (if (= n (count f))\n       (recur (split-at n r) (conj res f))\n       res)))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 54, "code": "(fn pseq [n s] \n  (cond (empty? s) s\n        (> n (count s)) (list)\n        :else (cons (take n s) (pseq n (drop n s)))))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 54, "code": "(fn prt [n c] (if (> (count c) n)\n                  (cons (take n c) (prt n (drop n c)))\n                  (if (= (count c) n) (list (take n c)))))", "user": "4e5e9f6b535d8a8b8723a2d2"}, {"problem": 54, "code": "(fn foo [m L] (let [n (count L)]\n            (if (< n m) '() \n              (let [f (take m L) e (take-last (- n m) L) p (foo m e)]\n                (conj p f)\n                )\n              )\n          ))", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 54, "code": "(fn f [init n x]\n  (if (> n (count x))\n      init\n      (f (conj init (subvec (vec x) 0 n))  n (drop n x))))\n[]", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (if (> n (count coll))\n    nil\n    (into [(take n coll)] (my-partition n (nthrest coll n)))))", "user": "57b99d48e4b0fbc9809a27f2"}, {"problem": 54, "code": "(fn ex [n s]\n  (loop [acc [] n n s s]\n    (if (>= (count s) n)\n      (recur (conj acc (take n s))\n             n\n             (drop n s))\n      acc)))", "user": "57b3046de4b0fbc9809a276d"}, {"problem": 54, "code": "(fn my-part [c coll]\n  (if (< (count coll) c)\n    '()\n    (lazy-seq (cons (take c coll) (my-part c (drop c coll))))\n  )\n)", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 54, "code": "(fn [n a-seq]\n  (loop [xs a-seq r nil]\n    (if-not (seq xs)\n      (filter #(= n (count %)) r)\n      (recur (drop n xs)\n             (concat r [(take n xs)])))))", "user": "56eab346e4b04a395b9a0410"}, {"problem": 54, "code": "(fn [n c]\n    (loop [inp   c\n           res   []]\n      (let [h (take n inp)\n            t (drop n inp)]\n        (if (= n (count h))\n          (recur t (conj res h))\n          res)))\n    )", "user": "57aa290de4b0b8559636fc65"}, {"problem": 54, "code": "(fn [x xs]\n  (take-while #(= x (count %))\n  (letfn [(f [xs] (cons (take x xs) (lazy-seq (f (drop x xs)))))]\n   (f xs))))", "user": "57aa4752e4b0b8559636fc6a"}, {"problem": 54, "code": "(fn part [x ls]\n  (loop [acc []\n         current []\n         left ls]\n    (cond \n     (= (count current) x) (recur (conj acc current) [] left)\n     (empty? left) (seq acc)\n     (< (count current) x) (recur acc (conj current (first left)) (rest left))\n    )))", "user": "516064e5e4b009fba0926e26"}, {"problem": 54, "code": "(fn p [n c]\n  (lazy-seq\n   (let [x (take n c)]\n     (if (= n (count x))\n       (cons x (p n (drop n c)))))))", "user": "57b1b8c8e4b0fbc9809a2756"}, {"problem": 54, "code": "(fn group [n coll] \n\t(loop [[subset remaining] (split-at n coll)\n\t\t   result []]\n\t\t(if (< (count subset) n)\n\t\t\tresult\n\t\t\t(recur (split-at n remaining) (conj result subset)))))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 54, "code": "(fn [num coll]\n  (loop [num num\n         coll coll\n         accum []]\n    (if (>= (count coll) num)\n      (recur num (drop num coll) (conj accum (take num coll)))\n      accum)))", "user": "577bf999e4b0d3393e5deb2c"}, {"problem": 54, "code": "(fn foo [x coll]\n\t(loop [coll coll \n           results '()] \n\t\t(if (or (empty? coll) (< (count coll) x))\n\t\t\t(reverse results)\n\t\t\t(recur (drop x coll) (conj results (take x coll))))))", "user": "4fc34787e4b081705acca33e"}, {"problem": 54, "code": "(fn part [n s]\n  (when (>= (count s) n) (concat (list (take n s)) (part n (nthrest s n)) )))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 54, "code": "(fn [n sequence]\n\t(loop [s sequence\n\t\t\tresult []]\n\t\t(if (empty? s) \n\t\t\t;return longest result\n\t\t\t(filter #(= (count %1) n) result)\n\t\t\t(recur (drop n s) (conj result (take n s)))\n\t\t)\n\t)\n)", "user": "57a9db97e4b0b8559636fc5b"}, {"problem": 54, "code": "#(for [i (range (quot (count %2) %1)) :let [j (* %1 i)]] (range j (+ j %1)))", "user": "57b35a19e4b0fbc9809a277d"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [n n r n c coll p [] o []]\n    (cond (empty? c) (if (= n (count p))\n                       (conj o p)\n                       o)\n          :else (if (= r 0)\n                  (recur n n c [] (conj o p))\n                  (recur n (dec r) (rest c) (conj p (first c)) o)))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 54, "code": "(fn [n s]\n  (filter #(= (count %) n) (loop [s s\n       acc []]\n  (if (empty? s)\n    acc\n    (recur (drop n s) (conj acc (take n s)))))))", "user": "57c0393be4b05aa3c4741c90"}, {"problem": 54, "code": "(fn part[n reng]\n  (when-not (< (count reng) n)\n    (cons (take n reng) (part n (drop n reng)))))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 54, "code": "(fn[n xs]\n    (let [[r rl] (reduce \n        (fn[[a l] x]\n            (if (= n (count l))\n                [(conj a l) [x]]\n                [a (conj l x)]))\n        [[] []]\n        xs)]\n        (if (= (count rl) n)\n            (conj r rl)\n            r)))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 54, "code": "#(let [times (int (Math/floor (/ (count %2) %1)))]\n   (loop [t times remaining %2 result []]\n     (if (> t 0)\n       (recur (dec t) (drop %1 remaining) (conj result (take %1 remaining)))\n       result)))", "user": "57625c18e4b0994c1922fba4"}, {"problem": 54, "code": "#((fn [r a c]\n  (if (empty? c) r\n    (let [h (first c) \n          t (rest c) \n          a (conj a h) \n          [x1 x2] (if (= % (count a)) \n                    [(conj r a) []] \n                    [r a])]\n      (recur x1 x2 t)\n    )\n  )\n) [] [] %2)", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 54, "code": "(fn my-partition [n sq]\n  (if (> n (count sq))\n    '()\n    (conj (my-partition n (drop n sq)) (take n sq))))", "user": "57c45e64e4b05aa3c4741ccf"}, {"problem": 54, "code": "(fn [n s]\n  (loop [s s acc '()]\n    (if (< (count s) n)\n      acc\n      (recur (drop n s) (concat acc (list (take n s)))))))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 54, "code": "(fn partition-1 [part-size coll]\n    (loop [remaining-coll coll result []]\n        (if (> part-size (count remaining-coll))\n            result\n            (recur (drop part-size remaining-coll) (conj result (take part-size remaining-coll))))))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 54, "code": "(fn p [n s]\n  (for [i (range (int (/ (count s) n)))]\n    (filter #(= i (int (/ (.indexOf s %) n))) s)))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 54, "code": "(fn part [x lst]\n  (loop [acc []\n         lst lst]\n    (if (not (empty? lst))\n      (if (< (count lst) x)\n        acc\n      \t(recur (conj acc (take x lst)) (drop x lst))\n       )\n      acc\n     )\n   )\n )", "user": "57cf03c0e4b00451144b04f9"}, {"problem": 54, "code": "(fn [step xs] \n    (loop [current xs coll []]\n          (if (< (count current) step) \n              coll \n            \n            (let [s (take step current) n (drop step current)]\n              (recur n (conj coll s))\n              ))))", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 54, "code": "(fn [n seqn] \n  (->> (reduce \n         (fn [{:keys [nxt coll]} x]\n           {:nxt (inc nxt)\n            :coll (if (= 0 (mod nxt n))\n                    (concat coll [[x]])\n                    (concat (drop-last coll) (-> coll last (conj x) list)))})\n         {:nxt 0 :coll []}\n         seqn)\n  :coll\n  (filter #(= (count %) n))))\n#_(less code solution is use count instand of mod)\n#_(see those code below)\n#_(fn [n seqn]\n     (filter #(= n (count %)) \n             (reduce (fn [coll x]\n                       (if (= n (-> coll last count))\n                         (concat coll [[x]])\n                         (concat (drop-last coll)\n                                 (-> coll last (conj x) list))))\n                     [[]]\n                     seqn)))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 54, "code": "(fn my-partition\n   ([n s] (my-partition n s []))\n   ([n s partitions]\n    (let [n-remaining (count s)]\n      (if (or (empty? s) (< n-remaining n))\n        partitions\n        (my-partition n (drop n s) (conj partitions (take n s)))))))", "user": "552d487ee4b076ab5578f7e4"}, {"problem": 54, "code": "#(loop [n %1 xs %2 ys []]\n   (if (>= (count xs) n) \n     (recur n (drop n xs)\n            (conj ys \n              (take n xs)))\n     ys)\n   )", "user": "57615a22e4b0994c1922fb88"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 54, "code": "(fn f[n c] (lazy-seq (let [s (take n c)] (when (= (count s) n) (cons s, (f n (drop n c)))))))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 54, "code": "(fn c54\n  [n collection]\n  (loop [c collection\n         current []\n         result []]\n    (if c\n      (let [new-current (conj current (first c))\n            nc (next c)]\n          (if (= (count current) (dec n))\n            (recur nc [] (conj result new-current))\n            (recur nc new-current result)))\n      result)))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 54, "code": "(fn part [n x]\n  (if (< (count x) n) '()\n    (concat (list (take n x)) (part n (drop n x)))))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 54, "code": "(fn [n lst]\n   (loop [item (first lst) lst2 (rest lst)\n          ret '() ret2 '() c 0 ]\n     (if (empty? lst2)\n       (if (= (inc c) n)\n         (reverse (conj ret (reverse (conj ret2 item))))\n         (reverse ret))\n       (if (< c n)\n         (recur (first lst2) (rest lst2) \n                ret (conj ret2 item) (inc c))\n         (recur item lst2\n                (conj ret (reverse ret2)) '() 0)))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 54, "code": "(fn [number items]\n  (loop [seq-items (rest items) part [(first items)] result []] \n    (if (empty? seq-items)      \n      result\n      (let [item (first seq-items) next-part (conj part item) next-size (count next-part)]\n        (recur (rest seq-items) \n               (if (= next-size number)                   \n                 []\n                 next-part)\n               (if (= next-size number)\n                 (conj result next-part)\n                 result))))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 54, "code": "(fn p [num vec](cond \n                (empty? vec) '() \n                (< (count vec) num) '()\n                :else (cons (take num vec) (p num (drop num vec)))))", "user": "57752a2de4b0979f89651613"}, {"problem": 54, "code": "(fn part \n  ([num coll] (part num coll [] 0 ))\n  ([num [fcoll & rcoll] ret cur]\n    (if fcoll\n      (let [loc (int (/ cur num))]\n        (part num rcoll (update-in \n                          (if (get ret loc) \n                            ret\n                            (conj ret []))\n                            [loc] conj fcoll) (inc cur)))\n      (if (= (count (last ret)) num)\n        ret\n        (butlast ret))\n      )))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 54, "code": "(fn f [n c] \n  (if (>= (count c) n)\n    (cons (take n c) (f n (drop n c)))\n    []))", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 54, "code": "(fn my-partition [n c]\n  (lazy-seq\n   (when (>= (count c) n)\n     (cons (take n c) (my-partition n (nthnext c n))))))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 54, "code": "(fn [n s]\n    (let [f (fn [{current :current\n                  total :total\n                  :or {current [] total []}}\n                 e]\n              (let [new-current (conj current e)]\n                (if (= (count new-current) n)\n                  {:current []\n                   :total (conj total new-current)}\n                  {:current new-current\n                   :total total})))]\n      (:total (reduce f {} s))))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 54, "code": "(fn par [n coll]\n    (when (>= (count coll) n)\n      (cons (take n coll)\n            (par n\n                 (drop n coll)))))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 54, "code": "(fn my-partition\n  [x coll]\n  (loop [c coll\n         acc []]\n    (if (or (< (count c) x) (empty? c))\n      acc\n      (recur (drop x c) (conj acc (take x c))))))", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 54, "code": "(fn\n  [n coll]\n  (loop [res []\n         coll coll]\n    (let [l (take n coll)]\n      (if (= n (count l))\n        (recur (conj res l) (drop n coll))\n        res))))", "user": "56bb652ae4b0f26550335953"}, {"problem": 54, "code": "(fn  [-i -s]\n    (loop [s (vec -s) new []]\n        (if (or (empty? s) (< (count s) -i))\n            new\n            (recur (subvec s -i) (conj new (subvec s 0 -i))))))", "user": "57e3f709e4b0bfb2137f5aaf"}, {"problem": 54, "code": "(fn [n xs]\n  (->>\n    (iterate #(+ n %) 0)          ;(0 3 6 9 etc.)\n    (take (quot (count xs) n))    ;(0 3 6)\n    (map #(take n (drop % xs))))) ;((0 1 2) (3 4 5) (6 7 8))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 54, "code": "(fn partition-seq [n s]\n  (loop [remaining s\n         results ()]\n    (if (< (count remaining) n)\n      (reverse results)\n      (recur (drop n remaining) (conj results (take n remaining)))\n      )\n    )\n  )", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 54, "code": "(fn mypart [psz coll]\n  (let [p (take psz coll)]\n    (if (< (count p) psz)\n      '()\n      (cons p (mypart psz (drop psz coll))))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 54, "code": "(fn [x coll]\n  (loop [c coll\n         acc []]\n    (if (or (empty? c)\n            (< (count c) x))\n      acc\n      (recur (drop x c) \n             (conj acc (take x c))))))", "user": "5777cffae4b0979f89651651"}, {"problem": 54, "code": "#(loop [s (drop %1 %2)\n        a (take %1 %2)\n        r []]\n   (if (< (count a) %1)\n     r\n     (recur (drop %1 s) (take %1 s) (conj r a))))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 54, "code": "(fn part [n coll]\n   (when (>= (count coll) n)\n     (cons (take n coll) (part n (drop n coll)))))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 54, "code": "(fn [n s]\n  (loop [[t d] (split-at n s) \n         r []]\n    (if (= (count t) n)\n      (recur (split-at n d) (conj r t))\n      (seq r))))", "user": "52761edae4b03e8d9a4a74d4"}, {"problem": 54, "code": "(fn [n col] (take (quot (count col) n) (vals (group-by #(quot % n) col))))", "user": "576df252e4b0979f8965156f"}, {"problem": 54, "code": "(fn partition2 [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (partition2 n (drop n coll)))))", "user": "57ee9ffbe4b0bfb2137f5bc2"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "57ac2d6be4b0b8559636fc83"}, {"problem": 54, "code": "(fn [n xs]\n  (let [hlp (fn hlp [xs acc]\n              (let [chunk (take n xs)]\n                (if (= n (count chunk))\n                  (hlp (drop n xs)\n                       (cons chunk acc))\n                  acc)))]\n    (reverse (hlp xs ()))))", "user": "57df2722e4b0bd073c20245e"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [c coll r '()]\n    (if (or (empty? c) (> n (count c)))\n      (reverse r)\n      (recur (drop n c) (conj r (take n c))))))", "user": "57ed2574e4b0bfb2137f5b93"}, {"problem": 54, "code": "(fn [n a-seq]\n  (loop [n       n\n         a-seq   a-seq\n         current []\n         return  []]\n    (let [new-current (conj current (first a-seq))] \n      (if (empty? a-seq)\n        return\n        (recur\n          n\n          (rest a-seq)\n          (if (= (count new-current) n)\n            []\n            new-current)\n          (if (= (count new-current) n)\n            (conj return new-current)\n            return))))))", "user": "574e84e0e4b02ea114799243"}, {"problem": 54, "code": "(fn f [x r]\n\t(when\n\t\t(>= (count r) x)\n\t\t(concat (list (take x r)) (f x (drop x r)))))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 54, "code": "(fn partit [x sq] \n  (when (<= x (count sq)) \n    (cons (take x sq) (partit x (drop x sq)))))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 54, "code": "(fn [n s]\n  (loop [remaining s ans []]\n    (if (< (count remaining) n)\n      ans\n      (if (>= (count remaining) n)\n        (recur (drop n remaining) (conj ans (take n remaining)))))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 54, "code": "(fn f\n  [n g]\n  (let [a (take n g)\n        b (drop n g)]\n    (if (empty? b)\n      (if (= n (count a))\n        (cons a [])\n        [])\n      (cons a (f n b)))))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 54, "code": "#(loop [r [] c %2]\n  (if (< (count c) %)\n    r\n    (recur (conj r (take % c))\n           (drop % c))))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll r []]\n    (let [p (take n coll)]\n      (if (= (count p) n)\n        (recur (drop n coll) (conj r p))\n        r))))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 54, "code": "(fn my-partition [n coll]\n    (lazy-seq\n      (when (and (seq coll) (= n (count (take n coll))))\n        (cons (take n coll) (my-partition n (drop n coll))))))", "user": "5080a697e4b01a93d3f38e49"}, {"problem": 54, "code": "(fn [n coll]\n    (let [subs (take-while #(<= n (count %)) (iterate #(drop n %) coll))]\n      (map #(take n %) subs)))", "user": "4e837808535db62dc21a62d9"}, {"problem": 54, "code": "(fn ncut\n  [size coll]\n  (let [l (split-at size coll)]\n    (cons (seq (first l))\n\n      (when (>= (count (second l)) size)\n        (ncut size (second l))))))", "user": "56e4a6c1e4b03a7c14b85a51"}, {"problem": 54, "code": "(fn f\n    ([n coll agg] (if (< (count coll) n)\n                      agg\n                      (recur n (drop n coll) (conj agg (take n coll)))))\n    ([n coll] (f n coll [])))", "user": "57b9f35be4b0fbc9809a27f9"}, {"problem": 54, "code": "(fn p [n l]\n  (if (< (count l) n) '()\n    (lazy-seq (cons (take n l) (p n (drop n l))))))", "user": "5800edaae4b0a837a8b30c48"}, {"problem": 54, "code": "(fn [n xs] (letfn [\n  (ex? [ss] (empty? (drop (dec n) ss))) \n  (ptn [ys] \n   (if (ex? ys) '()\n    (lazy-seq \n     (cons \n      (take n ys) \n       (ptn (drop n ys)))) ))] \n  (ptn xs)))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 54, "code": "(fn my-part [n coll]\n  (if (> n (count coll))\n    '()\n    (lazy-seq (cons (take n coll)\n                    (my-part n (drop n coll))))))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 54, "code": "#(remove (fn [s] (< (count s) %1)) (reverse (loop [n %1 items %2 result '()]\n   (if (empty? items)\n     result\n     (recur n (nthrest items n) (conj result (take n items)))))))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 54, "code": "(fn[a x](apply map list (map #(take-nth a(drop % x))(range a))))", "user": "54d893a4e4b0a52adc2e2039"}, {"problem": 54, "code": "(fn f [n s]                                                                                                                                             \n    (if (< (count s)  n)                                                                                                        \n        '()                                                                                                                                             \n        (cons (take n s) (f n (drop n s)))))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 54, "code": "(fn part [v c] (if (empty? c)                                                                                                                                              \n                 '()                                                                                                                                                         \n                 (if (< (count c) v)                                                                                                                                         \n                   '()                                                                                                                                                       \n                   (list* (take v c) (part v (drop v c))))))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 54, "code": "(fn [s x] (loop [y x res '()]\n          (if (empty? y)\n            (filter #(if (= s (count %)) %) (reverse res))\n            (recur (drop s y) \n                   (conj res (take s y)))\n            )\n            ))", "user": "57073037e4b0b0fb43fd0689"}, {"problem": 54, "code": "#(loop [n %1 coll %2 result []] (if (> n (count coll)) result (recur n (drop n coll) (conj result (take n coll)))))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 54, "code": "(fn f ([n  c](if (<= n (count c))(cons (take n c) (f n (drop n c))))))", "user": "5405885ee4b0addc1aec6668"}, {"problem": 54, "code": "(fn [n l]\n  (loop [l l\n         r []]\n    (if (< (count l) n)\n      r\n      (recur (drop n l) (conj r (take n l))))))", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 54, "code": "(fn part-seq [num lst]\n  (loop [result [] lst lst]\n    (if (empty? lst)\n      (filter #(= num (count %)) result)\n      (let [[fst sec] (split-at num lst)]\n        (recur (conj result fst) sec)))))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (let [partial (take n s)]\n    (when (= (count partial) n)\n      (cons partial (my-partition n (drop n s)))\n      )))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 54, "code": "(fn partition-seq [n seq]\n  (if (>= (count seq) n)\n    (cons (take n seq) (partition-seq n (drop n seq)))))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 54, "code": "(fn [x v]  \n  (loop [v v r []]  \n    (if (< (count v) x)  \n      r  \n      (recur (nthrest v x) (conj r (take x v))))))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 54, "code": "(fn f [p vals] (if (< (count vals) (* 2 p)) [(take p vals)] (lazy-seq (cons (take p vals) (f p (drop p vals))))))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 54, "code": "(fn partition-a-seq [n coll]\n  (->> coll\n    (partition-by #(quot % n))\n    (filter #(= (count %) n))))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 54, "code": "(fn [n sq]\n  (loop  [sq1 sq acc []]\n          (if (>= (count sq1) n) \n              (recur (drop n sq1) (cons (take n sq1) acc))\n                (reverse acc))))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 54, "code": "(fn [n l]\n   (loop [l l accu ()]\n     (if (->> l count (<= n))\n       (recur (drop n l) (conj accu (take n l)))\n       (reverse accu)\n       )))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 54, "code": "(fn f54-2 [n coll]\n (->>\n  (if (empty? coll)\n     nil\n     (cons (take n coll) (f54-2 n (drop n coll))))\n  (filter #(not (< (count %) n)))))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 54, "code": "(fn [n coll] \n  (filter #(= (count %) n)\n          (loop [acc [] coll coll] \n    (if (seq coll) \n      (recur (conj acc (take n coll)) (drop n coll)) \n      acc))))", "user": "563e1c0ee4b0da801c4e4665"}, {"problem": 54, "code": ";; NOTE TO SELF: There were much better recursive solutions. Try again.\n\n(fn part [n xs]\n  (let [num-elements (count xs)\n        num-buckets (/ (count xs) n)\n        buckets (vec (take num-buckets (repeat [])))\n        positions (sort (take num-elements (cycle (range 0 num-buckets))))\n        zipped (map vector positions xs)\n        should-drop-last (not= 0 (mod num-elements n))\n        filled-buckets (reduce\n                        #(assoc %1 (first %2) (conj (nth %1 (first %2)) (second %2)))\n                        buckets\n                        zipped)]\n    (if should-drop-last\n      (drop-last filled-buckets)\n      filled-buckets)))", "user": "56069006e4b08b23635d3174"}, {"problem": 54, "code": "(fn partition-it\n  [c s]\n  (loop [rest s\n         accum []]\n    (let [next (take c rest)\n          new-rest (drop c rest)]\n      (let [new-accum (if (= c (count next))\n                          (conj accum next)\n                          accum)]\n        (if (empty? new-rest)\n            new-accum\n            (recur new-rest new-accum))))))", "user": "58152157e4b0f478707a0631"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [xs xs\n         acc []]\n    (if (> n (count xs))\n      acc\n      (recur (drop n xs) (conj acc (take n xs))))))", "user": "5687b6abe4b0dcc4269f4061"}, {"problem": 54, "code": "(fn [n s]\n  (loop [remaining s\n         grouped '()]\n    (if (< (count remaining) n)\n      grouped\n      (recur (drop n remaining) (concat grouped [(take n remaining)])))))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 54, "code": "(fn my-partition\n  [n coll]\n  (if (> n (count coll))\n    ()\n    (cons\n     (take n coll)\n     (my-partition n (drop n coll)))))", "user": "56449e4de4b0284900eef5f9"}, {"problem": 54, "code": "#(loop [in %2, out []]\n   (if (< (count in) %1)\n     out\n     (recur\n       (drop %1 in)\n       (conj out (take %1 in)))))", "user": "58247423e4b051871117bec5"}, {"problem": 54, "code": "(fn part [n s] \n  (if (or (empty? s) (< (count s) n))\n    '()\n     (concat (list (take n s)) (part n (drop n s)))))", "user": "5710140fe4b09c608db7042e"}, {"problem": 54, "code": "(fn pisah2\n  [i x]\n  (if (< (count x) i)\n    []\n    (cons (take i x) (pisah2 i (drop i x)))))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 54, "code": "#(loop [x [] y (subvec (vec %2) 0 (* (int (/ (count (vec %2)) %)) %)) ]\n   (if (empty? y)\n     x\n     (recur (conj x (take % y)) (subvec y %))))", "user": "582c526ae4b051871117bf88"}, {"problem": 54, "code": "(fn [n coll]\n  (let [the-f (fn [[current result] [index new-comer]]\n                (cond\n                 (empty? current) [[new-comer] result]\n                 (= 0 (rem index n)) [[new-comer] (conj result current)]\n                 :else [(conj current new-comer) result]))]\n    (->> coll\n         (map-indexed #(vector %1 %2))\n         (reduce the-f [[] []])\n         (#(conj (second %) (first %)))\n         (filter #(not (or (empty? %) (< (count %) n)))))))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 54, "code": "(fn [n s]\n    (loop [m 0\n           ret '()]\n      (if (> (+ m n) (count s))\n        (reverse ret)\n        (recur (+ n m) (conj ret (take n (drop m s)))))))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  ;; Repeat the coll, keep every n items of each coll and filter out colls\n  ;; smaller than n\n  (let [num-seqs (/ (count coll) n)\n        multiple-of-n #(take n (drop (* n %1) %2))\n        equal-to-n #(= (count %) n)]\n    (filter equal-to-n (map-indexed multiple-of-n (repeat num-seqs coll)))))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (loop [result []\n         a (take n s)\n         b (drop n s)]\n    (if (> n (count a))\n      result\n      (recur (conj result a) (take n b) (drop n b)))))", "user": "5829d588e4b051871117bf4a"}, {"problem": 54, "code": "; tail recursion with vectors\n(fn partition-sequence [i xs]\n  (loop [xs xs result []]\n    (if (>= (count xs) i)\n      (recur (drop i xs) (conj result (take i xs)))\n      result)))\n\n; tail recursion with seqs\n;(fn partition-sequence [i xs]\n;  (loop [xs xs\n;         result '()]\n;    (if (< (count xs) i)\n;      (reverse result)\n;      (recur (drop i xs)\n;             (conj result (take i xs))))))\n\n;(fn partition-sequence [i xs]\n;  (filter #(= i (count %))\n;          (reduce\n;           (fn [acc j]\n;             (if (= i (count (last acc)))\n;               (reverse (conj (reverse acc) (conj '() j)))\n;               (reverse (conj (reverse (butlast acc)) (reverse (conj (reverse (last acc)) j)))))) '() xs)))", "user": "56255e2de4b00a550fc90297"}, {"problem": 54, "code": "(fn partseq\n  [n s]\n  (loop [t s r '()]\n    (if (< (count t) n)\n      r\n      (recur (nthrest t n) (concat r (list (take n t)))))))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 54, "code": "(fn [i xs]\n   (loop [xs xs cur [] out [] j 1]\n     (if (empty? xs)\n       out\n       (recur\n         (rest xs)\n         (if (= 0 (mod j i))\n           []\n           (conj cur (first xs)))\n         (if (= 0 (mod j i))\n           (conj out (conj cur (first xs)))\n           out)\n         (inc j)))))", "user": "583a360de4b089d5ab817d4f"}, {"problem": 54, "code": "(fn part [s c]\n  (loop [result []\n         coll c]\n    (if (= s (count (take s coll)))\n      (recur (conj result (take s coll))\n             (drop s coll))\n      result)))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 54, "code": "(fn part [x ys]\n  (let [chunk-ys (take x ys)]\n    (if\n      (< (count chunk-ys) x)\n      '()\n      (conj\n       (part x (drop x ys))\n       chunk-ys))))", "user": "54f904c2e4b01ecee9d88832"}, {"problem": 54, "code": "(fn my-partition [n b]\n  (let [t (take n b)]\n    (if (< (count t) n)\n      nil\n      (lazy-seq (cons t (my-partition n (drop n b)))))))", "user": "5843b95de4b089d5ab817e3f"}, {"problem": 54, "code": "(fn f [n xs]\n  (let [[ys zs] (split-at n xs)]\n    (when (>= (count ys) n)\n      (cons ys (f n zs)))))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 54, "code": "#(take-while \n  (comp (partial = %1) count)\n  (partition-by (fn [x] (quot x %1)) %2))", "user": "583c8bd4e4b089d5ab817d81"}, {"problem": 54, "code": "(fn [n coll] (map #(take n (drop (- % n) coll)) (range n (inc (count coll)) n)))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 54, "code": "(fn f [n c] \n   (let [h (take n c) t (drop n c)] \n     (if (= (count h) n) \n       (cons h (lazy-seq (f n t))) \n       nil)))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 54, "code": "(fn part [n coll]\n  (take (int (/ (count coll) n)) (vals (group-by #(->(.indexOf coll %) (/ n) int) coll))))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 54, "code": "(fn my-partition[n coll]\n  (if (< (count coll) n) '()\n    (concat (list (take n coll)) (my-partition n (drop n coll))))\n  )", "user": "525d44bfe4b0cb4875a45d6d"}, {"problem": 54, "code": "(fn [n col]\n  (loop [c col\n         result []]\n    (if (< (count c) n)\n      result\n      (recur (drop n c) (conj result (take n c))))))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 54, "code": "#(loop [r %2\n        acc []]\n   (if (<= % (count r))\n     (recur (drop % r) \n            (conj acc (take % r)))\n     acc))\n\n; golf: 65 nws, 10 necessary ws = 75\n; axx -> a", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 54, "code": "(fn pt [n ls]\n  (if (< (count ls) n) []\n    (cons (take n ls) (pt n (drop n ls)))))", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 54, "code": "(fn as[n s](when (>= (count s) n) (cons (take n s) (as n (drop n s)))))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 54, "code": "(fn [n l] ((fn [n l build] (if (> n (count l)) build (recur n (drop n l) (conj build (take n l))))) n l []))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 54, "code": "(fn pa [n coll]\n  (if (>= (count coll) n)\n    (cons (take n coll) (pa n (drop n coll)))))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 54, "code": "#(loop [lst %2 accum (list)]\n   (if (>= (count lst) %1)\n     (recur (drop %1 lst) (conj accum (take %1 lst)))\n     (reverse accum)))", "user": "584917a1e4b089d5ab817ec9"}, {"problem": 54, "code": "(fn [n s]\n  (let [grps (->> s\n                  (map-indexed (fn [i e] [i e]))\n                  (partition-by #(quot (first %) n))\n                  (map #(map (fn [g] (last g)) %)))]\n    (if (= 0 (rem (count s) n))\n      grps\n      (drop-last grps))))", "user": "584b0422e4b089d5ab817ef4"}, {"problem": 54, "code": "(fn f \n  [n xs]\n  (lazy-seq \n    (cons \n      (take n xs) \n      (if \n        (>= (- (count xs) n) n)\n        (f n (drop n xs))\n        nil))))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 54, "code": "(fn [g xs]\n  (filter #(= g (count %))\n    (loop [r xs agg '()]\n      (if (empty? r)\n        agg\n        (recur (drop g r) (concat agg (list (take g r))))\n      )\n    )\n  )\n)", "user": "583dacc2e4b089d5ab817d9f"}, {"problem": 54, "code": "(fn [partition-size s]\n      (loop [a [] p s]\n        (if (= partition-size (count (take partition-size p)))\n          (recur (conj a (take partition-size p)) (drop partition-size p))\n          a\n          )\n        ))", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 54, "code": "(fn part-me \n  [k rng] \n  (loop [r rng rem_el (count rng) acc nil] \n    (if (>= rem_el k)\n      (recur \n       (take-last (- rem_el k) r) \n       (- rem_el k) \n       (conj acc (take k r))\n      )\n      (reverse acc)\n    )\n  )\n)", "user": "5722bf99e4b0c5bde472c0d6"}, {"problem": 54, "code": "#(loop [l [] i 0]\n   (let [sub (take %1 (drop i %2))]\n     (if (and (< i (count %2)) (= %1 (count sub)))\n       (recur (conj l sub) (+ i %1))\n       l)))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 54, "code": "#((fn [coll acc]\n     (if (< (count coll) %1)\n       acc\n       (recur (drop %1 coll) (conj acc (take %1 coll)))))\n    %2\n    [])", "user": "585c5b21e4b0f14aab7c8786"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [init-seq coll\n         res-seq []]\n    (if (< (count init-seq) n)\n      res-seq\n      (recur (drop n init-seq) (conj res-seq (take n init-seq))))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 54, "code": "(fn [n c]\n  (let [part-c (reduce (fn [s e]\n                         (if (= n (count (last s)))\n                           (conj s [e])\n                           (conj (into [] (butlast s)) (conj (last s) e))))\n                       [[]]\n                       c)]\n    (if (= n (count (last part-c)))\n      part-c\n      (butlast part-c))))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 54, "code": "(fn z [d coll]\n  (->> (loop [coll coll res []]\n         (if (empty? coll)\n           res\n           (recur (drop d coll) (conj res (take d coll)))))\n       (filter #(= d (count %)))))", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 54, "code": "(fn [group sequence]\n  ((fn inner [result pre-group count_ rest_]\n     (if (empty? rest_)\n       (if (= (count pre-group) group)\n         (reverse (conj result (reverse pre-group)))\n         (reverse result))\n       (if (> count_ 0)\n         (inner result (conj pre-group (first rest_)) (dec count_) (rest rest_))\n         (inner (conj result (reverse pre-group)) '() group rest_))))\n   '() '() group sequence))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 54, "code": "#(loop [lis %2 res []]\n    (if (< (count lis) %1)\n      res\n      (recur (drop %1 lis) (conj res (take %1 lis)))))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 54, "code": "(fn [n v]\n\t(take (quot (count v) n) (partition-by #(quot % n) v)))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 54, "code": "(fn my-chop [n s] \n   (if (< (count s) n) \n     nil \n     (cons (take n s) \n           (my-chop n (drop n s)))))\n ;;  3 (range 8))", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 54, "code": "(fn x1 ([i c r]\n        (if (empty? c)\n         (filter #(= (count %) i) r)\n         (recur i (drop i c) (conj r (take i c)))))\n       ([i c] (x1 i c [])))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 54, "code": "(fn parti [n coll]\n    (let [p (take n coll)]\n      (when (= n (count p))\n        (cons p (parti n (nthrest coll n))))))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 54, "code": "(fn mypartn [n col]\n  (loop [c   col\n         out []]\n    (if (empty? c)\n      (filter #(= (count %) n) out)\n      (recur (drop n c) (conj out (take n c))))))", "user": "51456858e4b0e88796073408"}, {"problem": 54, "code": "(fn par-seq\n  ([ind s acc]\n     (if (> ind (.size s)) acc (par-seq ind (drop ind s) (concat acc (list (take ind s))))))\n  ([ind s]\n   (par-seq ind s '())))", "user": "582cbf48e4b051871117bfa6"}, {"problem": 54, "code": "(fn\n  [n coll]\n  (loop [s coll\n         acc []]\n    (let [items (take n s)]\n      (if (= (count items) n)\n        (recur (drop n s) (conj acc items))\n        acc))))", "user": "58543a59e4b07779d46863f5"}, {"problem": 54, "code": "(fn [n coll ] \n  (filter\n   (fn [data] (= n (count data)))\n   (map \n    #(take n (drop % coll)) \n    (take-nth n (range (count coll))))))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 54, "code": "(fn [n s]\n      (loop [left s\n             result []]\n        (if (< (count left) n)\n          result\n          (recur (drop n left)\n                 (conj result (take n left))))))", "user": "586b6753e4b01531a375e956"}, {"problem": 54, "code": "(fn [n coll]\n   (let [a (map last (group-by #(quot % n) coll))]\n   (remove #(> n (count %)) a)))", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 54, "code": "(fn mpartition\n  [n a]\n  (if (> n (count a)) []\n      (lazy-seq (cons (take n a) (mpartition n (drop n a))))))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 54, "code": "(fn [d l] (first (reduce (fn par [res v]\n          (let [[r t] res\n                flush? (= (mod (inc (count t)) d) 0)\n                temp (concat t (list v))]\n            (if flush?\n              [(concat r (list temp)) '()]\n              [r temp]\n              )))\n  ['() '()] l )))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 54, "code": "(fn [size s] (remove #(< (count %) size) (loop [col s res []] (if (empty? col) res (recur (drop size col) (conj res (take size col)))))))", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 54, "code": "(fn p [n xs]\n (lazy-seq\n  (when (seq xs)\n   (let [nxs (take n xs)]\n    (when (== n (count nxs))\n     (cons nxs (p n (drop n xs))))))))", "user": "55597b84e4b0deb715856e36"}, {"problem": 54, "code": "(fn splt [x y]\n\n  (if (< (count y) (* x 2))\n\n    [(first(split-at x y))]\n\n    (concat [(first(split-at x y))] (splt x (second(split-at x y))))))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 54, "code": "(fn my-part [n coll]\n  (let [[p r] (split-at n coll)]\n    (when (= n (count p)) (lazy-seq (cons p (my-part n r))))))", "user": "4f3ca5a6e4b0e243712b1f53"}, {"problem": 54, "code": "(fn f [n xs]\n      (if (< (count xs) n)\n          '()\n          (conj (f n (drop n xs))\n                (take n xs))))", "user": "53b42472e4b047364c0444b2"}, {"problem": 54, "code": "(fn parts [n x] (if (>= (count x) n) (cons (take n x) (parts n (drop n x)))))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll, coll, partitions []]\n    (if (< (count coll) n)\n      partitions\n      (recur (drop n coll) (conj partitions (take n coll))))))", "user": "5879d577e4b01531a375ead8"}, {"problem": 54, "code": "(fn [x c] (loop [r []\n                 c c]\n            (if (> x (count c))\n                   r\n                   (recur (conj r (take x c)) (drop x c)))))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 54, "code": "(fn [size xs]\n  (loop [acc nil xs xs]\n    (if (< (count xs) size)\n      (reverse acc)\n      (recur (conj acc (take size xs))\n             (drop size xs)))))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 54, "code": "(fn [n c] (loop [f [] r c] (if (< (count r) n) f (recur (conj f (take n r)) (drop n r)))))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 54, "code": "(fn pfn [n s] \n (if (< (count s) n) '() (cons (take n s) (pfn n (drop n s)))))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 54, "code": "(comp reverse #(loop [n %1 f '() c %2] (if (or (< (count c) n) (empty? c)) f (recur n (cons (take n c) f) (drop n c)))))", "user": "5872935ce4b01531a375ea1d"}, {"problem": 54, "code": "(fn [n xs]\n    (loop [xs xs\n           c  []]\n      (if (>= (count xs) n)\n        (recur (drop n xs) (concat c [(take n xs)]))\n        c)))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 54, "code": "(fn a [n x]\n  (loop [a [] x x]\n    (if (<= n (count x))\n      (recur (conj a (take n x)) (drop n x))\n      a)))", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 54, "code": "(fn part [n xs] \n  (if (>= (count xs) n)\n      (concat [(take n xs)] (part n (drop n xs)))))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 54, "code": "(fn partit [ i col ] \n   (if (>= (count col) i)\n     (cons (take i col) (partit i (drop i col)))\n     )\n   )", "user": "58047205e4b0a837a8b30ca9"}, {"problem": 54, "code": "#(loop [res [] rem %2]\n   (if (< (count rem) %1)\n     res\n     (recur (conj res (take %1 rem)) (drop %1 rem))))", "user": "588e6a17e4b00487982d518c"}, {"problem": 54, "code": "#(loop [s %2, r []]\n   (if (< (count s) %1)\n     r\n     (let [[p l] (split-at %1 s)]\n       (recur l (conj r p)))))", "user": "58923efce4b00487982d521c"}, {"problem": 54, "code": "#(reverse \n  (second (reduce (fn [[lst result] x]\n                   \t(let [newlst (cons x lst)]\n\t                  \t(if (>= (count lst) (dec %))\n    \t               \t  (vector nil (cons (reverse newlst) result))\n                          (vector newlst result))))\n                   [nil nil] %2)))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 54, "code": "(fn [n xs] \n  (filter #(= (count %) n)\n   (for [i (range 0 (count xs) n)] \n    (take n (drop i xs)))))", "user": "560331dee4b04bb52996e1b5"}, {"problem": 54, "code": "(fn part-seq [n coll]\n  (let [part (take n coll)]\n    (if (= n (count part))\n      (cons part (part-seq n (drop n coll))))))", "user": "4fe49706e4b0e8f79898feb7"}, {"problem": 54, "code": "(fn part-2 [n coll]\n  (when-let [s (seq coll)]\n    (let [p (take n s)]\n      (when (= (count p) n)\n        (cons p (part-2 n (nthrest s n)))))))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 54, "code": "#(loop [n %1\n        src %2\n        dest []]\n   (if (> n (count src))\n     dest\n     (recur n (drop n src) (conj dest (take n src)))\n     )\n   )", "user": "589a8dace4b00487982d5311"}, {"problem": 54, "code": "(fn [x col]\n  (let [l (count col)\n        p (/ l x)]\n    (filter #(not (nil? %)) (map (fn [i]\n                                   (if (<= x (- l (* x i)))\n                                     (take x (drop (* i x) col)))) (range p)))))", "user": "53b05a75e4b047364c044482"}, {"problem": 54, "code": "(fn [size coll]\n  (loop [result () coll coll]\n    (if (empty? coll)\n      (filter #(= (count %) size) (reverse result))\n      (recur (into result (list (take size coll))) (flatten (rest (split-at size coll)))))))", "user": "5896735fe4b00487982d529d"}, {"problem": 54, "code": "(fn\n  [n s]\n  (loop [acc []\n         s s]\n    (let [[part tail] (split-at n s)]\n      (if (not= n (count part))\n        acc\n        (recur (conj acc part) tail)))))", "user": "505345d9e4b0517ede0d0a06"}, {"problem": 54, "code": "(fn pt [n s]\n  (let [front (take n s)]\n    (if (= n (count front))\n      (lazy-seq (cons (take n s) (pt n (drop n s)))))))", "user": "562add6de4b00e49c7cb4834"}, {"problem": 54, "code": "(fn my-partition [n coll]\n        (let [mp (fn mp [x y]\n                   (if (empty? y)\n                     (if (< (count x) n) (list) (list x))\n                     (cons x (mp (take n y) (drop n y)))))]\n          (mp (take n coll) (drop n coll))))", "user": "58949f8de4b00487982d525e"}, {"problem": 54, "code": "(fn my-partition [n c]\n  \t(filter #(= n (count %))\n  \t\t(map (partial take n)\n             (take-while (complement empty?) (iterate (fn [x] (drop n x)) c)))))", "user": "58988cbbe4b00487982d52d7"}, {"problem": 54, "code": "(fn [x myCol] (let [recursor (fn recurs [out in] (if (> x (count in)) out (recurs (concat out (list (take x in))) (drop x in))))] (recursor '() myCol)))", "user": "58950f29e4b00487982d5270"}, {"problem": 54, "code": "(fn [n xs]\n  (let [enum (map vector xs (range (count xs)))]\n    (filter #(= n (count %))\n            (map (fn [l] (map #(% 0) l)) (partition-by #(quot (% 1) n) enum)))))", "user": "58a47197e4b01a0c0b2328f9"}, {"problem": 54, "code": "(fn p [n coll]\n  (when (>= (count coll) n)\n    (cons (take n coll) (p n (drop n coll)))))", "user": "54dbc6ebe4b024c67c0cf773"}, {"problem": 54, "code": "(fn [n coll]\n  (->> (partition-by #(quot (.indexOf coll %)\n                            n)\n                     coll)\n       (filter #(= n (count %)))))", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 54, "code": "(fn [x input]\n   (loop [xs input, result []]\n     (if (< (count xs) x) result\n         (recur (drop x xs) (into result (vector (take x xs))))\n         )\n     ))", "user": "589037b4e4b00487982d51d0"}, {"problem": 54, "code": "(fn [n s] (reverse  (loop [l s o '()]\n                             (if (< (count l) n) o (recur (drop n l) (conj o (take n l)))))))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (if (< (count s) n)\n    []\n    (cons (take n s) (my-partition n (loop [cntr n s0 s] (if (zero? cntr) s0 (recur (dec cntr) (rest s0))))))))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 54, "code": "(fn part [n s]\n  (if (> n (count s))\n    []\n    (cons (take n s) (part n (drop n s)))))", "user": "58a5a099e4b01a0c0b232918"}, {"problem": 54, "code": "(fn my-partition [step a-seq]\n  (let [index-range  (range 0 (count a-seq) step)\n        indexes (if (> (+ step (last index-range)) (count a-seq))\n                  (drop-last index-range)\n                  index-range)]\n    (map #(take step (drop %  a-seq)) indexes)))", "user": "580d2788e4b0849f6811b730"}, {"problem": 54, "code": "(fn mypart [ size myvec] \n(let [how-many (quot (count myvec) size)]\n(rest (take (+ 1 how-many)\n       (map first (iterate (fn [[a b]] [(first (split-at size b)) (flatten (rest (split-at size b)))]) [() myvec ] ) ))))\n)", "user": "58a17511e4b02bd94d917eb4"}, {"problem": 54, "code": "(fn splitter2 [n coll]\n  (let [pair (first (split-at n coll)) rest_pairs (second (split-at n coll))]\n    (cons pair (if (< (count rest_pairs) n) []\n            (splitter2 n rest_pairs)))))", "user": "58a6d14fe4b01a0c0b232935"}, {"problem": 54, "code": "(fn part [n xs]\n   (let [chunk (take n xs)]\n     (if (= (count chunk) n)\n       (cons chunk (part n (drop n xs)))\n       '()\n       )\n     )\n   )", "user": "5896ade8e4b00487982d52a9"}, {"problem": 54, "code": "(fn partition* [n lst]\n  (if (> n (count lst))\n    '()\n    (cons (take n lst)\n          (partition* n (drop n lst)))))", "user": "5895477fe4b00487982d527c"}, {"problem": 54, "code": "(fn part [n coll]\n  (if (empty? coll)\n    '()\n    (if (> n (count coll))\n      '()\n      (concat (list (take n coll)) (part n (drop n coll))))))", "user": "58a953dae4b01a0c0b232968"}, {"problem": 54, "code": "(fn [n arr]\n  (letfn [(haha [arr result now]\n           (if (empty? arr)\n             result\n             (->> (conj now (first arr))\n                  (#(if (= n (count %))\n                      (haha (next arr) (conj result %) [])\n                      (haha (next arr) result %))))))]\n    (haha arr [] [])))", "user": "58b06b7ce4b0ebc645576cdc"}, {"problem": 54, "code": "(fn f [n x] (when(>= (count x) n)( cons (take n x) (f n (nthnext x n))) ) )", "user": "58ac513fe4b0005cfeb1a746"}, {"problem": 54, "code": "#(loop [cur '()\n        r %2]\n   (if (< (count r) %1)\n     (reverse cur)\n     (recur (conj cur (take %1 r)) (drop %1 r))))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 54, "code": "(fn p [n xs]\n  (when (<= n (count xs))\n    (let [[h t] (split-at n xs)]\n      (cons h (p n t)))))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 54, "code": "(fn foo [n coll] \n  (let [[f r] (split-at n coll)]\n    (if (> n (count r)) \n      (list f)\n      (cons f (foo n r)))))", "user": "507eed82e4b06ce648bcdbfe"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n(cons (take n v) (my-partition n (drop n v)))))", "user": "585030cbe4b0b7285a6f4e78"}, {"problem": 54, "code": "(fn part [st se]\n  (if (>= (count se) st)\n    (cons (take st se) (part st (drop st se)))))", "user": "5156e767e4b04360f2428e6b"}, {"problem": 54, "code": "(fn par [n lst]\n  (if (> n (count lst))\n    []\n    (cons (take n lst) (par n (drop n lst)))))", "user": "5893c64ce4b00487982d524b"}, {"problem": 54, "code": "(letfn\n           [\n            (get-sublist [l v e] (seq (subvec (into [] v) (- e l) e  ))  )\n            (get-indices [l v] (into [] (filter #(<= % (count v)) (rest (map #(* % l)  (into [] v)) )))   )\n            ]\n         (fn [l v] (map (fn [e] (get-sublist l v e) )  (get-indices l v))))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 54, "code": "(fn part\n  ([pn in bl el i] (cond (empty? in) (reverse el)\n                         (= i 0) (recur pn\n                                        (rest in)\n                                        '()\n                                        (conj el\n                                              (reverse (conj bl (first in)))) (dec pn))\n                         :else (recur pn (rest in) (conj bl (first in)) el (dec i))))\n  ([pn in]\n   (part pn in '() '() (dec pn))))", "user": "58a3ba31e4b02bd94d917eff"}, {"problem": 54, "code": "#(loop [n %1\n        s %2\n        acc ()]\n   (if (seq s)\n     (recur n (drop n s) (cons (take n s) acc))\n     (let [res (reverse acc)]\n       (if (not= n (count (last res)))\n         (butlast res)\n         res))))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 54, "code": "(fn part [x l]\n  (if\n    (< (count l) x) nil\n    (cons (subvec (vec l) 0 x) (part x (subvec (vec l) x)))))", "user": "5897dda4e4b00487982d52c8"}, {"problem": 54, "code": "(fn part\n     [n v]\n     (if (>= (count v) n)\n       (cons (take n v) (part n (drop n v)))\n       )\n     )", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 54, "code": "(fn part [n li]\n  (let [head (take n li)]\n    (if\n     (< (count head) n)\n     '()\n     (cons\n      head\n      (part n (drop n li))))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 54, "code": "(fn [part-count coll]\n    (let [op-time (Math/floor (/ (count coll) part-count))]\n      (map #(take-last part-count (take (* % part-count) coll)) (range 1 (+ op-time 1)))))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 54, "code": "(fn [x list]\n  ((fn part [m n l]\n  (cond\n  (< (count l) x)\n    m\n  (>= (count l) x)\n    (part (concat m [(take n l)]) n (drop n l))))\n  [] x list))", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll\n         p []\n         r []]\n    (if (empty? coll)\n      r\n      (let [p (conj p (first coll))]\n        (if (= (count p) n)\n          (recur (rest coll) [] (conj r p))\n          (recur (rest coll) p r))))))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 54, "code": "(fn x [n col]\n  (loop [c col\n         res []]\n    (if (seq c)\n      (recur (drop n c)\n             (let [nc (take n c)]\n               (if (= n (count nc))\n                 (conj res nc)\n                 res)))\n      res)))", "user": "58c1b4f5e4b021aa9917ed01"}, {"problem": 54, "code": "(fn [n init]\n\t(loop [src init res []]\n\t\t(if (< (count src) n)\n\t\t\tres\n\t\t\t(recur (drop n src) (conj res (take n src))))))", "user": "58b985e0e4b0888cdc949ccc"}, {"problem": 54, "code": "(fn my-partition\r\n  [slice coll] \r\n  (cond (< (count coll) slice) nil\r\n  :else (cons (take slice coll) (my-partition slice (drop slice coll)))))", "user": "56f514cee4b046a417f92068"}, {"problem": 54, "code": "(fn part [n l] \n  \t(if (>= (count l) n)\n      (cons (take n l) (part n (drop n l)))\t\n  ))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 54, "code": "(fn new-partition\n  ([n a] (new-partition n (rest a) [] [(first a)]))\n  ([n a result buffer] \n   (cond\n         (empty? a)\n           (if (= (count buffer) n)\n             (conj result buffer)\n           result)\n         (= (count buffer) n)\n           (new-partition n (rest a) (conj result buffer) [(first a)])\n         :else\n           (new-partition n (rest a) result (conj buffer (first a))))))", "user": "58c3af4de4b021aa9917ed1b"}, {"problem": 54, "code": "(fn [n s]\n  (let [skips (iterate (partial + n) 0)\n        num-partitions (quot (count s) n)]\n    (take num-partitions (map #(take n (drop % s)) skips))))", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 54, "code": "(fn [n coll]\n    (loop [result []\n           unprocessed coll]\n      (if (or (empty? unprocessed)\n              (< (count unprocessed) n))\n        result\n        (recur\n         (conj result (take n unprocessed))\n         (drop n unprocessed)))))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 54, "code": "(fn [n c]\n  (->> c\n       (iterate (partial drop n))\n       (take-while seq)\n       (map (partial take n))\n       (remove #(< (count %) n))))", "user": "58c5a08be4b021aa9917ed40"}, {"problem": 54, "code": "(fn [n xs] (let [len (quot (count xs) n)] (mapcat #(list (take n (drop (* % n) xs))) (range len))))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 54, "code": "(fn [n coll]\n  (->> (range 0 (- (count coll) n -1) n)\n       (map #(->> coll\n                  (drop %)\n                  (take n)))\n       ))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 54, "code": "#(loop [w nil n %1 xs %2]\n   (if (< (count xs) n)\n     (reverse w)\n     (recur (conj w (take n xs)) n (drop n xs))))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 54, "code": "(fn partition-recur [cnt in-seq]\n  (if (>= (count in-seq) cnt)\n    (cons (take cnt in-seq) (partition-recur cnt (nthrest in-seq cnt)))))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 54, "code": "(fn [r n s]\n  (if (< (count s) n)\n    r\n    (recur (concat r (list (take n s))) n (drop n s)))) '()", "user": "58b26da4e4b0ebc645576d0a"}, {"problem": 54, "code": "(fn mypart[n xs]\n  (loop [toret []\n         remm xs]\n    (if (> n (count remm))\n      toret\n      (recur (conj toret (take n remm))\n             (drop n remm)))))", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 54, "code": "(fn xx [n s]\n  (if-not (or (empty? s) (< (count s) n))\n    (let [part (keep-indexed #(if (< %1 n) %2) s)\n          dps (keep-indexed #(if (>= %1 n) %2) s)\n          ]\n      (lazy-seq (cons part (xx n dps))))))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 54, "code": "(fn pt [n, col]\n  ((fn pt-acc [n, col, acc]\n    (if (empty? col)\n      (take-while #(= (count %) n) acc)\n      (recur n (drop n col) (conj acc (take n col))))) n col []))", "user": "587a3babe4b01531a375eae2"}, {"problem": 54, "code": "(fn [par-num coll]                                                                                                                                              \n  (->> (reduce (fn [acc item]                                                                                                                                                \n                 (if (= (count (first acc)) par-num)                                                                                                                         \n                   (conj acc (list item))                                                                                                                                    \n                   (conj (rest acc) (conj (first acc) item))))                                                                                                               \n               '(())                                                                                                                                                         \n               coll)                                                                                                                                                         \n       (filter #(= par-num (count %)))                                                                                                                                       \n       (map reverse)                                                                                                                                                         \n       reverse))", "user": "5410499de4b01498b1a719a6"}, {"problem": 54, "code": "(fn part [n c]\n  (if (<= n (count c))\n    (cons (take n c) (part n (drop n c)))))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 54, "code": "(fn f\n   ([n col] (f n col n () ()))\n   ([n [h & tail :as col] left m-head agg]\n    (let [head (cons h m-head)]\n      (cond\n        (not (seq col)) (reverse agg)\n        (= left 1) (recur n tail n () (-> (reverse head) (cons agg)))\n        :else (recur n tail (dec left) head agg)))))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 54, "code": "(fn [x arr] (map (fn[current] (take x (drop (* x (dec current))  arr)))  (range 1 (inc (quot  (count arr) x)  )) ))", "user": "575bd5f9e4b02ea114799365"}, {"problem": 54, "code": "(fn part \n  ([n col] (part n col ()))\n  ([n col cols] \n   (let [sub (take n col)]\n     (if (< (count sub) n)\n         (reverse cols)\n         (part n (drop n col) (conj cols sub))))))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 54, "code": "(fn [cnt col]\n   (loop [cnt cnt col col current []]\n     (if (> cnt (count col))\n            current\n       (recur cnt (drop cnt col) (conj current (take cnt col))))))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 54, "code": "(fn [num coll]\n  (loop [main coll acc nil]\n    (if (< (count main) num)\n      (reverse acc)\n      (recur (drop num main) (conj acc (take num main))))))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 54, "code": "(fn th [n s]\n  (let [[curr remain] (split-at n s)]\n    (lazy-seq\n     (if (> n (count curr))\n       nil\n       (cons curr (th n remain))))))", "user": "54ba8206e4b0ed20f4ff6eb6"}, {"problem": 54, "code": "(fn partition-alt [n coll]\n    (when\n      (and (seq coll) (>= (count coll) n))\n      (cons (take n coll) (partition-alt n (drop n coll)))))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 54, "code": "(fn part [n coll]\n  (if (< (count coll) n)\n    '()\n    (cons (take n coll)\n          (part n (drop n coll)) )))", "user": "58acce0ae4b0005cfeb1a754"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (loop [c coll acc []]\n    (if (> n (count c))\n      acc\n      (recur (drop n c)(conj acc (take n c))))))", "user": "53ae0c50e4b047364c044471"}, {"problem": 54, "code": "(fn part-seq [n seqs] (when (and (seq seqs) (>= (count seqs) n)) (cons (take n seqs) (part-seq n (drop n seqs)))))", "user": "58e256e1e4b005f69f193c90"}, {"problem": 54, "code": "(fn p\n  [n coll]\n  (loop [coll coll\n         current-coll '()\n         r '()]\n    (if (seq coll)\n      (if (= (count current-coll) n)\n        (recur (rest coll) (list (first coll)) (conj r (reverse current-coll)))\n        (recur (rest coll) (conj current-coll (first coll)) r))\n      (if (= (count current-coll) n)\n        (reverse (conj r (reverse current-coll)))\n        (reverse r))\n      )))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "58e5f995e4b056aecfd47ca5"}, {"problem": 54, "code": "(fn [n xs] (map (partial take n) (take-while #(<= n (count %)) (iterate (partial drop n) xs))))", "user": "58e37946e4b005f69f193cae"}, {"problem": 54, "code": "(fn q [n xs]\n  (loop [ys xs c 0 chunk [] z []]\n    (cond (empty? ys) z\n          (= c (dec n)) (recur (next ys) 0 [] (conj z (conj chunk (first ys))))\n          :else (recur (next ys) (inc c) (conj chunk (first ys)) z))))", "user": "58ebae90e4b056aecfd47d44"}, {"problem": 54, "code": "(fn f \n  [n s]\n  (if (>= (count s) n)\n    (cons (take n s) (f n (drop n s)))))", "user": "58ec8c7ae4b056aecfd47d64"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "58e5e585e4b056aecfd47ca2"}, {"problem": 54, "code": "(fn [n coll] (loop [[parts more] [[] coll]]\n                      (if (>= (count more) n)\n                        (let [[part x] (split-at n more)]\n                          (recur [(cons part parts) x]))\n                        (into '() parts))))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 54, "code": "(fn my-partition [n coll] \n  (when (>= (count coll) n)\n    (cons (take n coll) (my-partition n (drop n coll)))))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll\n         x (take n coll)\n         r []]\n    (if (= (count x) n)\n      (recur (nthrest coll n) (take n (nthrest coll n)) (conj r x))\n      r\n      )))", "user": "5823d3e6e4b051871117beb8"}, {"problem": 54, "code": "(fn [n s]\n    (loop [t s\n           a []]\n      (if (> n (count t))\n        a\n        (recur (drop n t) (conj a (take n t)) )\n        )       \n    )\n)", "user": "58d28c70e4b03c36ff7e5901"}, {"problem": 54, "code": "#(map (fn [x] (take % (drop (* % x) %2)))\r\n  (range (quot (count %2) %)))", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 54, "code": "(fn f [n l]\n      (if (< (count l) n)\n        () \n        (cons (take n l) (f n (drop n l)))))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 54, "code": "(fn part\n  ([n s] (part n [] s))\n  ([n ps s]\n   (if\n     (> n (count s))\n     ps\n     (part n (conj ps (take n s)) (drop n s)))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 54, "code": "(fn __ [n xs]\n  (when (>=  (count xs) n)\n    (cons (take n xs)\n          (__ n (drop n xs)))))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 54, "code": "#(letfn\n  [(partition'[n s] \n              (lazy-seq \n               (when \n                 (<= n (count s)) \n                 (cons \n                  (take n s) \n                  (partition' n (drop n s))))))] \n  (partition' %1 %2))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 54, "code": "(fn my-partition [size coll]\n  (lazy-seq\n   (if (>= (count coll) size)\n     (cons (take size coll)\n                (my-partition size\n                              (drop size coll))))))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 54, "code": "(fn [n coll] (filter #(= n (count %)) (reduce #(let [part (peek %1)]\n                                                 (if (= (count part) n)\n                                                   (conj %1 [%2])\n                                                   (conj (pop %1) (conj part %2)))) [[]] coll)))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 54, "code": "(fn mypart [n xs]\n  (lazy-seq\n    (let [packet (take n xs)]\n      (if (= n (count packet))\n        (cons packet (mypart n (drop n xs)))))))", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 54, "code": "(fn [n coll]\n    (loop [c coll result ()]\n      (if (< (count c) n)\n        (reverse result)\n        (recur (drop n c) (cons (take n c) result)))))", "user": "4e72a717535d5021c1a89665"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [result '(), cur '(), c coll]\n    (if (= 0 (count c))\n      (if (= n (count cur))\n        (reverse (conj result (reverse cur)))\n        (reverse result))\n      (if (= n (count cur))\n        (recur (conj result (reverse cur)) (conj '() (first c)) (rest c))\n        (recur result (conj cur (first c)) (rest c))))))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "58bd84d2e4b0888cdc949d31"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll\n         held []]\n    (if (or (empty? coll) (< (count coll) n))\n      held\n      (recur (drop n coll) (conj held (take n coll))))))", "user": "58e965b3e4b056aecfd47d08"}, {"problem": 54, "code": "#(loop [n %1 c %2 r []] (if (< (count c) n) r (recur n (drop n c) (conj r (take n c)))))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 54, "code": "(fn [size args]\n   (first\n    (reduce \n     (fn [[output curr] nxt]\n       (let [newCurr (conj curr nxt)]\n         (if (= size (count newCurr))\n           [(conj output newCurr) []]\n           [output newCurr])))\n     [[] []] args)))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 54, "code": "#(letfn [(p [n coll res]\n           (if (>= (count coll) n)\n            (p n (drop n coll ) (conj res (take n coll)))\n            res))]\n   (p % %2 []))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [s coll\n         accum []]\n    (if (< (count s) n)\n      accum\n      (recur (drop n s) (conj accum (take n s)))\n    )\n  )\n)", "user": "59073e0fe4b047aa04b19950"}, {"problem": 54, "code": "(fn [n co]\n  (let [\n        nu (quot (count co) n)\n        indexesCount (* nu n)\n        covec (vec co)\n        res (vals (group-by (fn [x] (quot x n)) (range indexesCount)))\n        ]\n    (println res)\n    (map (fn [yy] (map (fn [i] (nth covec i)) yy)) res)))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 54, "code": "(fn p [n xs] \n  (if (< (count xs) n) () \n    (cons (take n xs) \n          (p n (drop n xs)))))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 54, "code": "(fn mypartition [n xs]\n         (when (>= (count xs) n)\n           (cons (take n xs) (mypartition n (drop n xs)))))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 54, "code": "(fn part' [n s]\n  (let [\n    p (take n s)\n    r (drop n s)]\n    (if (< (count p) n)\n      '()\n      (lazy-seq (cons p (part' n r))))))", "user": "5901158de4b0438e51c2d039"}, {"problem": 54, "code": "(fn [n sq]\n  (loop [\n         r []\n         g []\n         c 1\n         els sq]\n    (cond\n      (empty? els) r\n      (= 0 (mod c n)) (recur (conj r (conj g (first els))) [] 1 (rest els))\n      :else (recur r (conj g (first els)) (inc c) (rest els)))))", "user": "588e4e05e4b00487982d5188"}, {"problem": 54, "code": "(fn [n li]\n    (loop [x (first li) xs (next li) ctr (dec n) saves [] result []]\n      (println x xs ctr saves result)\n      (if-not x\n        result\n        (if (zero? ctr)\n           (recur (first xs) (next xs) (dec n) [] (conj result (conj saves x)))\n           (recur (first xs) (next xs) (dec ctr) (conj saves x) result)\n        )\n      )\n    )\n  )", "user": "589f2cefe4b02bd94d917e75"}, {"problem": 54, "code": "(fn f\n  [p coll]\n  (if (< (count coll) p)\n    '()\n    (cons (take p coll) (f p (drop p coll)))))", "user": "5640b135e4b08d4f616f5ee8"}, {"problem": 54, "code": "(fn [n coll]\n   (->>\n    (reduce (fn [rcoll x]\n              (let [l (last rcoll)\n                    fcoll (drop-last rcoll)]\n                (if (= n (count l))\n                  (conj (into [] rcoll) [x])\n                  (conj (into [] fcoll) (conj l x)))))\n            [[]] coll)\n    (filter #(= n (count %)))))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 54, "code": "(fn mpart [n coll]\n  (let [parts (take n coll)]\n    (when (= n (count parts))\n      (cons parts (mpart n (drop n coll))))))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 54, "code": "#(loop [a %1 b %2 ac []]\n   (if (< (count b) a) \n     ac\n     (recur a (drop a b) (conj ac (take a b)))))", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 54, "code": "(fn foo [n li] \n  (if (< (count (take n li)) n)\n    '()\n    (cons (take n li) (foo n (drop n li)))))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 54, "code": "(fn xpartition [n seq]\n  (loop [rem seq, res [], part []]\n    ;(println rem \",\" res \",\" part \",\")\n    (if (empty? rem)\n      ; if\n      (if (= (count part) n)\n        (conj res part)\n        res)\n      ; else\n      (if (= (count part) n)\n        (recur (rest rem) (conj res part) [(first rem)])\n        (recur (rest rem) res (conj part (first rem))))\n      )))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [partitioned [] part (take n coll) rest-coll\n  (drop n coll)]\n    (if (< (count part) n)\n      partitioned\n      (recur\n        (if (= n (count part))\n          (conj partitioned part)\n          partitioned)\n        (take n rest-coll)\n        (drop n rest-coll)))))", "user": "58a413b5e4b02bd94d917f07"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [result []\n         remaining coll]\n    (if (>= (count remaining) n)\n      (let [[a b] (split-at n remaining)]\n        (recur (conj result a) b))\n      result)))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 54, "code": "(fn [n coll]\n  (->> coll\n       (iterate    #(drop n %))\n       (take-while #(<= n (count %)))\n       (map        #(take n %))))", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 54, "code": "(fn my-part\n\t[n coll]\n\t(when (>= (count coll) n)\n\t\t(lazy-seq (cons (take n coll) (my-part n (drop n coll))))))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 54, "code": "(fn f [n xs]\n   (if (>= (count xs) n)\n     (conj (f n (drop n xs)) (take n xs))\n     )\n   )", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 54, "code": "#(first\n  (reduce\n   (fn [[ret item] n]\n     (let [item-new (conj item n)\n           item-count (count item-new)]\n       (if (>= item-count %1) [(conj ret item-new) []] [ret item-new]))) [[] []] %2))", "user": "591f05b4e4b09b4ee5954c42"}, {"problem": 54, "code": "(fn partition-seq [n coll]\n  (when (<= n (count coll))\n    (cons (take n coll) (partition-seq n (drop n coll)))))", "user": "58ffac9de4b0438e51c2cffd"}, {"problem": 54, "code": "(fn f [n s] (when (>= (count s) n) (cons (take n s) (f n (drop n s)))))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 54, "code": "(fn [n coll]\n            (loop [result []\n                   curr []\n                   [first-item & rest-items] coll]\n              (let [curr-is-full (= n (count curr))\n                    result (if curr-is-full (conj result curr) result)\n                    curr (if curr-is-full [] curr)]\n                (if first-item\n                  (recur result (conj curr first-item) rest-items)\n                  result))))", "user": "57cd7498e4b0c746388ab897"}, {"problem": 54, "code": "(fn newpart\n  [n coll]\n  (when-let [s (seq coll)]\n         (let [p (doall (take n s))]\n           (when (= n (count p))\n             (cons p (newpart n (nthrest s n)))))))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 54, "code": "(fn partitur [n c]\n  (lazy-seq (let [s (take n c)]\n              (if (= n (count s))\n                (cons s (partitur n (drop n c)))\n                nil))))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 54, "code": "(fn ! [n coll]\n  (lazy-seq \n   (let [head (take n coll)]\n     (when (>= (count head) n)\n       (cons head \n             (! n (drop n coll)))))))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 54, "code": "(fn [n col]\n  (loop [out []\n         in  col]\n    (if (<= n (count in))\n      (recur (conj out (take n in))\n             (drop n in))\n      out)))", "user": "514a3fa5e4b0829bd132edb6"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [xs xs\n         res []]\n    (let [length (count xs)]\n      (if (< length n)\n        res\n        (recur (drop n xs) (conj res (take n xs)))))))", "user": "58740c18e4b01531a375ea49"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "592518bfe4b072a2710fce65"}, {"problem": 54, "code": "(fn a [b c]\n  (if (< (count c) b)\n    nil\n    (cons (take b c) (a b (drop b c)))))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 54, "code": "#(loop [coll %2\n        x %1\n        result []]\n   (if (< (count coll) x)\n     result\n     (recur (drop x coll) x (conj result (take x coll)))))", "user": "571dd145e4b0145328a76283"}, {"problem": 54, "code": "(fn my-fn [num coll]                                                           \n  (let [reducer (fn [acc el]                                                     \n                  (let [last-seq (last acc)                                      \n                        last-idx (-> acc count dec)]                             \n                    (cond                                                        \n                      (or (nil? last-seq) (= (count last-seq) num)) (conj acc [el])\n                      :else (assoc acc last-idx (conj last-seq el)))))           \n        parts (reduce reducer [] coll)]                                          \n    (for [p parts :when (= num (count p))]                                       \n      p)))", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 54, "code": "(fn part [n l]\n  ((fn part-sub [l]\n    (cond\n      (< (count l) n) '()\n      :else\n        (let [[skupina ostali]\n          ((fn zdruzi [l n]\n            (cond\n              (zero? n) ['() l]\n              :else (let [[skupina ostali] (zdruzi (rest l) (dec n))]\n                      [(cons (first l) skupina) ostali]))) l n)]\n          (cons skupina (part-sub ostali))))) l))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 54, "code": "(fn [c,data]\n  (map #(map first %) (filter #(= c (count %)) (partition-by #(quot (nth % 1) c) (map #(vector %1 %2) data (range))))))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 54, "code": "(fn [n s] (loop [x n lst s vctr '()]\n            (if (< (count lst) x)\n              (reverse vctr)\n            (recur x (drop n lst) (conj vctr (take n lst))))\n            ))", "user": "59368ccae4b02506e01a2979"}, {"problem": 54, "code": "(fn part [n s]\n  (lazy-seq\n   (let [x (take n s)]\n     (when (= (count x) n)\n       (cons x (part n (drop n s)))))))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 54, "code": "(fn [n l]\n  (loop [news '() tmpl l]\n    (if (empty? tmpl)\n      (reverse news)\n      (if (= n (count (take n tmpl)))\n        (recur (conj news (take n tmpl)) (drop n tmpl))\n        (recur news (drop n tmpl))))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 54, "code": "(fn ff [n coll]\n  (if (>= (count coll) n)\n    (cons (take n coll) \n          (ff n (drop n coll)))\n    nil))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 54, "code": "(fn [n coll]\n   (->> (reduce (fn [acc x]\n                     (let [cur (peek acc)]\n                       (if (or (empty? acc) (= n (count cur)))\n                         (conj acc [x])\n                         (conj (pop acc) (conj cur x)))))\n                [] coll)\n        (filter #(= n (count %)))))", "user": "5935b010e4b04f87174def55"}, {"problem": 54, "code": "(fn [n c]\n  (loop [r []\n         c c]\n    (if (< (count (take n c)) n)\n      r\n      (recur (into r [(take n c)]) (drop n c)))))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 54, "code": "(fn [num1 vect1]\n  (loop [n num1 vect vect1 final [] adder []]\n    (if (empty? vect)\n      (if (= (count adder) num1)\n        (apply list (conj final (apply list adder)))\n        (apply list final))\n      (if (= 0 n)\n        (recur num1 vect (conj final (apply list adder)) [])\n        (recur (dec n) (rest vect) final (conj adder (first vect)))))))", "user": "59369515e4b02506e01a297e"}, {"problem": 54, "code": "(fn part [n x]\n   (if (>= (count x) n)\n   (cons (take n x) (part n (drop n x)))))", "user": "59385840e4b02506e01a29c9"}, {"problem": 54, "code": "#(loop [n 0 c %2 a []]\n   (let [x (count %2) \n         m (- x (mod x %1))]\n   (if (>= n m)\n     (seq a)\n     (recur \n      (+ n %1) \n      (drop %1 c) \n      (conj a (take %1 c))))))", "user": "593c71cbe4b069cdc2982b90"}, {"problem": 54, "code": "(fn [par-num coll]\n  (->> (reduce (fn [acc item]\n                 (if (= (count (first acc)) par-num)\n                   (conj acc (list item))\n                   (conj (rest acc) (conj (first acc) item))))\n               '(())\n               coll)\n       (filter #(= par-num (count %)))\n       (map reverse)\n       reverse))", "user": "59251947e4b072a2710fce69"}, {"problem": 54, "code": "(fn [n coll]\n    (first\n    (reduce (fn [[c1 c2] x]\n                    (let [cc (conj c2 x)]\n                      (if (= n (count cc))\n                          [(conj c1 cc) []]\n                          [c1 cc])))\n         [[] []]\n          coll))\n  )", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 54, "code": "(fn [n c]\n  (first\n   (reduce\n    (fn [[r s c] v]\n      (let [s (conj s v)\n            c (inc c)]\n       (if (= n c)\n        [(conj r s) [] 0]\n        [r s c])))\n    [[] [] 0] c)))", "user": "5571d6e5e4b09a3098a5253f"}, {"problem": 54, "code": "(fn pl [n sekv]\n  (if (< (count sekv) n)\n    '()\n    (conj (pl n (drop n sekv)) (take n sekv))))", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 54, "code": "(fn [n coll]\n  (let [reps (quot (count coll) n)]\n    (map #(take n (drop (* n %) coll)) (range reps))))", "user": "5727031ee4b0c5bde472c12f"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "592518e8e4b072a2710fce67"}, {"problem": 54, "code": "(fn f [n, s]\n  (loop [s s, res '()]\n    (if (< (count s) n)\n      (reverse res)\n      (recur (drop n s) (conj res (take n s))))))", "user": "593d6793e4b069cdc2982ba6"}, {"problem": 54, "code": "(fn [n coll]\n  (for [i (range (quot (count coll) n))]\n    (for [j (map #(+ %1 (* n i)) (range n))]\n      (nth coll j))))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [result ()\n         remaining coll]\n    (if (empty? remaining)\n      result\n      (let [[before after] (split-at n remaining)]\n        (if (< (count before) n)\n          result\n          (recur (concat result (list before)) after))))))", "user": "594783bee4b07ddc2dafada1"}, {"problem": 54, "code": "(fn my-partition [n l]\n  (when (>= (count l) n)\n        (cons (take n l) (my-partition n (drop n l)))))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 54, "code": "(fn [par-num coll]\n  (->> (reduce (fn [acc item]\n                 (if (= (count (first acc)) par-num)\n                   (conj acc (list item))\n                   (conj (rest acc) (conj (first acc) item))))\n               '(())\n               coll)\n       (filter #(= par-num (count %)))\n       (map reverse)\n       reverse))", "user": "592518cde4b072a2710fce66"}, {"problem": 54, "code": "(fn [x s]\n  (map #(take x (drop % s)) (range 0 (- (count s) x -1) x)))", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 54, "code": "(fn part [n v] (if (< (count v) n) ()\n                 (conj (part n (drop n v)) (take n v))))", "user": "59496129e4b07ddc2dafadd7"}, {"problem": 54, "code": "(fn part [n lst]\n  (filter #(= n (count %)) (cond\n    (empty? lst) '()\n    :else (cons (take n lst) (part n (drop n lst)))\n  ))\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 54, "code": "(fn part [n c]\n  (let [step\n        (fn [n c]\n          (when-let [s (seq c)]\n            (let [seg (take n s)]\n              (if (= (count seg) n)\n                (cons seg (part n (drop n s)))\n                ()))))]\n    (lazy-seq (step n c))))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 54, "code": "(fn [n x]\n   (->> (loop [a 0 r []]\n          (if (>= a (count x)) r\n            (recur (+ a n) (conj r (take n (drop a x) )))))\n     (filter #(= n (count %)))))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 54, "code": "#(loop [result [] remain %2] \n   (if (>= (count remain) %1)\n     (recur (conj result (take %1 remain)) (drop %1 remain))\n     result))", "user": "59497f51e4b07ddc2dafaddd"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [res []\n         buffer []\n         coll coll]\n    (if (empty? coll)\n      res\n      (let [nextel (first coll)\n            newbuffer (conj buffer nextel)\n            bufcomp (= (count newbuffer) n)\n            newres (if bufcomp (conj res newbuffer) res)\n            newbuffer (if bufcomp [] newbuffer)]\n        (recur newres newbuffer (rest coll))))))", "user": "592334c7e4b0a390037439ee"}, {"problem": 54, "code": "(fn my-part [x s]\n  (loop [result [] \n         remaining s]\n    (let [next (take x remaining)]\n      (if (< (count next) x)\n        result\n        (recur (conj result next) (drop x remaining))))))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 54, "code": "(fn [n coll]\n    (for [x (range (quot (count coll) n))]\n         (take n (drop (* x n) coll))))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [input xs\n         result []]\n    (if (empty? input)\n      result\n      (let [grp (take n input)]\n        (if (= (count grp) n)\n          (recur (drop n input) (conj result grp))\n          result)))))", "user": "5947c6a6e4b07ddc2dafada7"}, {"problem": 54, "code": "(fn [n s] \n (take-while \n  #(= n (count %)) \n  ((fn next-group [_s]\n    (lazy-seq (cons (take n _s) (next-group (drop n _s)))))\n   s)))", "user": "595914e0e4b066ee0a44af99"}, {"problem": 54, "code": "(fn mypart \n  ([n xs out]\n   (if (< (count xs) n)\n     (reverse out)\n     (recur n (drop n xs) (cons (take n xs) out))))\n   ([n xs] (mypart n xs '())))", "user": "595a885be4b066ee0a44afc4"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (when (>= (count coll) n) (cons (take n coll) (my-partition n (drop n coll)))))", "user": "5959c72ae4b066ee0a44afac"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 54, "code": "(fn p [n s] (let [x (take n s) r (drop n s)] (cons x (lazy-seq (when (>= (count r) n) (p n r))))))", "user": "590088bfe4b0438e51c2d026"}, {"problem": 54, "code": "(fn recur-partition\n  [n coll]\n   (loop [num (quot (count coll) n) coll coll result []]\n    (if(> num 0)\n    \t\t(let [new-num (dec num) new-coll (drop n coll) new-result (conj result (take n coll))] (recur new-num new-coll new-result ))\n         result)))", "user": "593db05ae4b069cdc2982bab"}, {"problem": 54, "code": "(fn [n s] (loop [i 0 part [] acc []]\n              (if (= i (count s)) (if (= n (count part)) (conj acc part) acc)\n                (if (= n (count part))\n                  (recur  i [] (conj acc part))\n                  (recur (inc i) (conj part (nth s i)) acc)))))", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 54, "code": "(fn partition-seq [n coll]\n  (loop [coll coll\n         held []]\n    (if (or (empty? coll) (< (count coll) n)) held\n        (recur (drop n coll) (conj held (take n coll))))))", "user": "595d0897e4b066ee0a44b00f"}, {"problem": 54, "code": "(fn [n s]\n  (loop [do-times (quot (count s) n)\n         coll s\n         acc []]\n    (if (zero? do-times)\n      acc\n      (recur (dec do-times)\n             (drop n coll)\n             (conj acc (take n coll))))))", "user": "57262710e4b0c5bde472c120"}, {"problem": 54, "code": "#(loop [coll %2 num % result '()]\n  (if (empty? coll) \n    (reverse (if (not= num (count (first result)))\n               (drop 1 result)\n               result\n               ))\n    (recur (drop num coll) num (into result (vector (take num coll)))))\n  )", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 54, "code": "(fn partition2\n  ([x col] (partition2 x col []))\n  ([x col result] (if (< (count col) x) \n                    result \n                    (recur x \n                           (drop x col) \n                           (conj result (take x col))))))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 54, "code": "(fn sub [n set]\n  (->> (range 0 (quot (count set) n))\n       (map #(* n %))\n       (map #(drop % set))\n       (map #(take n %))\n  ))", "user": "595fe942e4b066ee0a44b075"}, {"problem": 54, "code": "(fn f [n xs]\n  (when (and (seq xs)\n             (>= (count xs) n))\n    (cons (take n xs)\n          (f n (drop n xs)))))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 54, "code": "(fn p [n s]\n  (map #(take n (drop % s)) (range 0 (* (int (/ (count s) n)) n) n)))", "user": "595eba88e4b066ee0a44b04e"}, {"problem": 54, "code": "(fn prt([n _seq]\n\t(prt n _seq '()))\n\t([n _seq result]\n\t\t(if (< (count _seq) n) \n\t\t\t(reverse result)\n\t\t\t(recur n (drop n _seq) (conj result (take n _seq))))))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 54, "code": "(fn p54 [a xs]\n  (if (>= (count xs) a)\n    (cons (take a xs) (p54 a (drop a xs)))\n    '()))", "user": "593910eae4b02506e01a29f4"}, {"problem": 54, "code": "(fn part' [n xs] \n  (lazy-seq \n   (when-let [x (seq (take n xs))]\n     (when (= n (count x))\n       (cons x (part' n (seq (drop n xs))))))))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 54, "code": "(fn [n col] (apply map list (vals (group-by #(mod % n) col))))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 54, "code": "(fn [n s] (loop [ret [] current [] i 0] (if (< i (count s)) (if (= n (+ (count current) 1)) (recur (conj ret (conj current (nth s i))) [] (inc i)) (recur ret (conj current (nth s i)) (inc i))) ret)))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 54, "code": "(fn my-partition [n xs]\n  (let [p (take n xs)]\n    (when (= n (count p))\n      (cons p (my-partition n (drop n xs))))))", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 54, "code": "(fn [x y]\n  (loop [res [] coll y]\n    (if\n      (or (empty? coll) (< (count coll) x))\n      res\n      (recur\n       (conj res (take x coll))\n       (drop x coll)))))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 54, "code": "(fn part-seq [n coll]\n  (lazy-seq (let [s (seq coll) idx (- (count coll) n)]\n    (pr :coll coll :take (take n (seq coll)) :idx idx)\n    (cond (>= idx n)  (cons (take n s) (part-seq n (drop n s)))\n      (>= idx 0) (list (take n s))\n\n    )\n  )))", "user": "5972fcf6e4b01722bebd4c92"}, {"problem": 54, "code": "#(loop [result '()\n        remain %2]\n   (if (< (count remain) %1)\n     (reverse result)\n     (recur (conj result (take %1 remain))\n            (drop %1 remain))))", "user": "590b8607e4b047aa04b199db"}, {"problem": 54, "code": "(fn p [n x]\n  (if (< (count x) n)\n    []\n    (cons (take n x)\n          (p n (drop n x)))))", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 54, "code": "(fn part[n cs] (\n                  if (>= (count cs) n)\n                  (concat (list (take n cs)) (part n (drop n cs)))\n                  ()\n                  ))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 54, "code": "(fn chunky [n xs]\n  (let [make-new (fn [s n]\n                    (>= (count (first s)) n))\n        reducer (fn [s x]\n                  (if\n                    (make-new s n)\n                    (conj s (list x))\n                    (conj (rest s) (conj (first s) x))))]\n    (reverse (map reverse (filter #(= (count %) n) (reduce reducer [] xs))))))", "user": "59708e38e4b01722bebd4c65"}, {"problem": 54, "code": "(fn part\n  ([n sq]\n   (part n sq []))\n  ([n sq sol]\n   (if (< (count sq) n)\n     sol\n     (recur n  (nthrest sq n) (conj sol (take n sq))))))", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 54, "code": "(fn mypartition\n  [plen col]\n  (for [i (range (Math/floor (/ (count col) plen)))]\n    (take plen (drop (* i plen) col))\n    )\n\n  )", "user": "59692530e4b069c0a1a197e4"}, {"problem": 54, "code": "(fn f [n xs]\n  (let [p (take n xs)]\n    (when (= (count p) n)\n      (cons p (f n (drop n xs))))))", "user": "4fb1d7ace4b081705acca281"}, {"problem": 54, "code": "(fn part [n xs]\n    (if (> n (count xs))\n      ()\n      (cons (take n xs) (part n (drop n xs)))))", "user": "53ef3adfe4b0742d9025b0c9"}, {"problem": 54, "code": "#(loop [groupSize %1, coll %2, result []]\n    (let [current (take groupSize coll)]\n      (if (< (count current) groupSize)\n      result\n      (recur groupSize (drop groupSize coll) (conj result current))))\n  )", "user": "59738d98e4b01722bebd4ca1"}, {"problem": 54, "code": "#(loop [n %1 l %2 r []]\n  (if (>= (count l) n)\n    (recur n (drop n l) (conj r (take n l)))\n    r\n    ))", "user": "594263cbe4b060784b3b790a"}, {"problem": 54, "code": "(fn\n  [n in]\n  (loop [[x & xs :as tx] in\n         run []\n         out []]\n    (if (not tx)\n      (if (= n (count run))\n        (conj out run)\n        out)\n      (if (= n (count run))\n        (recur xs [x] (conj out run))\n        (recur xs (conj run x) out)))))", "user": "597d0e43e4b0dbe32238d095"}, {"problem": 54, "code": "(fn [sz sq] (map #(take sz (nthrest sq (* sz %))) (range (quot (count sq) sz))))", "user": "587ee260e4b052da650a6353"}, {"problem": 54, "code": "(fn mypart [x col]\n  (when-let [c (seq col)]\n    (let [p (take x c)]\n      (if (= x (count p))\n        (cons p (mypart x (nthrest c x)))\n        nil))))", "user": "4ff9a200e4b0678c553fc3ab"}, {"problem": 54, "code": ";(fn partition-sequence [n coll]\n;  (loop [result []\n;         next-set (take n coll)\n;         coll (drop n coll)]\n;    (if (< (count next-set) n)\n;      result\n;      (recur (conj result next-set) (take n coll) (drop n coll)))))\n\n\n(fn partition-sequence [n coll]\n  (if (< (count coll) n)\n    []\n    (cons (take n coll) (partition-sequence n (drop n coll)))))", "user": "59837909e4b021a7a535fe16"}, {"problem": 54, "code": "(fn [num list]\n  (loop [l list\n         results ()\n         group ()]\n    (let [this (first l)\n          re (rest l)]\n      (if (= (count group) num)\n        (recur re (concat results [group]) [this])\n        (if (empty? l)\n          results\n          (recur re results (concat group [this]))\n)))))", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 54, "code": "(fn my-part\n        ([s l]\n         (my-part s l []))\n         ([s l r]\n          (if (<= s (count l))\n            (my-part s (drop s l) (conj r (take s l)))\n            r))\n        )", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 54, "code": "(fn part [n s]\n  ((fn [s new-s]\n       (if (< (count s) n) \n           new-s\n           (recur (drop n s) (conj new-s (take n s))))) s []))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 54, "code": "(fn [n xs] (filter #(= n (count %)) (for [ i (range 0 (count xs) n)] (take n (drop i xs)) )))", "user": "598588f2e4b021a7a535fe65"}, {"problem": 54, "code": "(fn spl\n  ([n coll]\n   (if (< (count coll) n)\n    []\n    (spl n (drop n coll) [(take n coll)])))\n  ([n coll out]\n   (if (< (count coll) n)\n     out\n     (recur n (drop n coll) (conj out (take n coll))))))", "user": "59902fede4b0fcebec4de86d"}, {"problem": 54, "code": "(fn [n l]\n  (loop [coll l\n         final []]\n    (if (>= (count coll) n)\n      (recur (drop n coll) (conj final (take n coll)))\n\t   final)))", "user": "593744abe4b02506e01a299b"}, {"problem": 54, "code": "#((fn part\n ([n l] (part n l []))\n ([n l g]\n  (if (empty? l)\n   (list)\n   (let\n    [h (conj g (first l))]\n    (if\n     (zero?\n      (mod (count h) n))\n     (conj\n      (part n (rest l) [])\n      h)\n     (part\n      n (rest l) h)))))) %1 %2)", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 54, "code": "(fn \n  [n coll]\n  (reverse (loop [acc '()\n                  remaining (drop n coll)\n                  curr (take n coll)]\n             (if (empty? remaining)\n               (if (= n (count curr)) (conj acc curr) acc)\n               (recur\n                 (conj acc curr)\n                 (drop n remaining)\n                 (take n remaining))))))", "user": "594266cfe4b060784b3b790b"}, {"problem": 54, "code": "(fn my-partition [len s] (lazy-seq (let [ret (take len s)]\n                                        (if (= len (count ret))\n                                            (cons ret\n                                                  (my-partition len\n                                                                (drop len s)\n                                                  )\n                                            )\n                                            '()\n                                        )\n                                    )\n                         )\n)", "user": "5990fcb9e4b0866487ed0d5b"}, {"problem": 54, "code": "(fn [n coll] (->> (iterate (partial drop n) coll)\n                  (map (partial take n))\n                  (take-while (comp (partial = n) count))))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 54, "code": "(fn take-group\n    [n coll]\n    (let [head (take n coll)\n          tail (drop n coll)]\n         (if (< (count tail) n)\n             [head]\n             (concat [head] (take-group n tail)))))", "user": "591addcee4b09b4ee5954be1"}, {"problem": 54, "code": "(fn\n             [x xs]\n             (->>\n               (reduce\n                 #(\n                    if (= (count (last %1)) x)\n                    (conj %1 [%2])\n                    (conj (pop %1) (conj (peek %1) %2))\n                    )\n                 [[(first xs)]] (rest xs))\n               (filter #(= x (count %1)))\n               ))", "user": "596d630ae4b069c0a1a19846"}, {"problem": 54, "code": "(fn my-partition [n col]\n  (let [parts (fn [n col]\n                (let [icol (map-indexed #(list %1 %2) col)]\n                  (loop [rest-col icol\n                         cur (list)\n                         res (list)]\n                    (let [[i v] (first rest-col)\n                          tail (rest rest-col)]\n                      (cond\n                        (empty? rest-col) (cons cur res)\n                        (= 0 (mod i n)) (recur tail (list v) (cons cur res))\n                        :else (recur tail (cons v cur) res))))))]\n    (->> (parts n col)\n         (map #(reverse %))\n         (reverse)\n         (filter #(= n (count %))))))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 54, "code": "(fn [n coll]\n  (->> coll\n    (reduce (fn [r a]\n      (if (= n (count (seq (last r))))\n        (conj r [a])\n        (assoc r (dec (count r)) (conj (last r) a)))) [[]])\n    (filter #(= n (count %)))\n  ))", "user": "59a24c92e4b066c664927d20"}, {"problem": 54, "code": "(fn part [n s]\n  (cond\n    (empty? s) s\n    (= (count (take n s)) n) (cons (take n s) (part n (drop n s)))\n    :else (empty s)))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 54, "code": "(fn partitionn [size coll]\n  (loop [remaining coll\n         acc []]\n    (if (< (count remaining) size)\n      (seq acc)\n      (recur (drop size remaining)\n             (conj acc (take size remaining))))))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 54, "code": "(fn [cnt sqnc & op]  \n  (if op\n    (if (<= cnt (count sqnc))\t\n      (recur cnt (drop cnt sqnc) (conj op (take cnt sqnc)))\n      op)\n    (recur cnt (drop cnt sqnc) [(take cnt sqnc)])))", "user": "515310b4e4b0d6806ecd26fb"}, {"problem": 54, "code": "(fn part [n coll]\n  (loop [rslt []\n         coll coll\n        ]\n    (let [subc (take n coll)]\n      (if (or (empty? subc) (not= (count subc) n))\n        rslt\n        (recur\n          (conj rslt subc)\n          (drop n coll)\n        )\n      )\n    )\n  )\n)", "user": "5162757ee4b03cfa3774b3fe"}, {"problem": 54, "code": "(fn [n coll]\n            (loop [c []\n                   h (take n coll)\n                   t (drop n coll)]\n              (if (= n (count h))\n                (recur (conj c h) (take n t) (drop n t))\n                c)))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 54, "code": "(fn [n s]\n  (loop [parts [] left s]\n    (if (< (count left) n)\n      parts\n      (recur (conj parts (take n left))\n             (drop n left)))))", "user": "59946856e4b0b211ea3aaac7"}, {"problem": 54, "code": "(fn [length seq]\n  (loop [origin-seq seq\n         target-seq '()]\n    (if (empty? origin-seq)\n      (->> target-seq\n           reverse\n           (filter #(<= length (count %))))\n      (recur (drop length origin-seq)\n             (conj target-seq\n                   (take length origin-seq))))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 54, "code": "(fn [n col]\n\n    (loop [c col\n           r []]\n      (let [next3 (take n c)]\n        (if (= (count next3) n)\n          (recur (drop n c) (conj r next3))\n          r)))\n    )", "user": "59932f49e4b0b211ea3aaaae"}, {"problem": 54, "code": "(fn [n lst]\n  (loop [result [] slst lst]\n    (let [el (take n slst) rlst (drop n slst)]\n      (if (< (count el) n)\n        result \n        (recur (conj result el) rlst)))))", "user": "59a2ba97e4b066c664927d2c"}, {"problem": 54, "code": "(fn my-partition [n s]\n     (remove\n       #(not= (count %) n)\n       (loop [x s\n              acc []]\n         (if (empty? x)\n           acc\n           (recur (drop n x) (conj acc (take n x)))))))", "user": "594ea2a4e4b07ddc2dafaeb6"}, {"problem": 54, "code": "(fn [n w] \n        (let [aux\n              (fn [[head & tail] curr res]\n                   (cond\n                 (nil? head)\n                 (let [out (if (= n (count curr))\n                             (conj res curr)\n                             res)]\n                   (seq out))\n                 \n                 (< (count curr) n)\n                 (recur tail (conj curr head) res)\n\n                 :else\n                 (recur tail [head] (conj res curr))))]\n          (aux w [] [])))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 54, "code": "(fn [n xs] \n  (loop [ys xs res []] \n    (if \n      (< (count ys) n) \n     (apply list res)\n     (recur \n      (drop n ys)\n      (conj res (take n ys))))))", "user": "598debf0e4b02b9968b84d2e"}, {"problem": 54, "code": "(fn [n col]\n  (loop [in col out []]\n    (if (> n (count in))\n      out\n      (recur (drop n in) (conj out (take n in))))))", "user": "59a8405ce4b0bcf4e9a43af1"}, {"problem": 54, "code": "(fn [n coll]\n  (filter #(= n (count %))\n\t(loop [results [] items coll]\n    \t(cond\n        \t(empty? items) results\n         \t(or (empty? results) (= n (count (last results)))) (recur (vec (conj results [(first items)])) (rest items))\n         \t:else\n         \t\t(recur (vec (conj (vec (butlast results)) (vec (conj (last results) (first items))))) (rest items))\n      )\n  )\n  )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 54, "code": "(fn [chunksize coll]\n  (->> (iterate next coll)\n       (take chunksize)\n       (apply map list)\n       ; %1 index, %2 trio\n       (keep-indexed #(when (zero? (mod %1 chunksize))\n                        %2) ,,,)))", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 54, "code": "(fn solution [n coll]\n  (when (<= n (count coll))\n    (lazy-seq (cons (take n coll) (solution n (drop n coll))))))", "user": "59a72effe4b066c664927d94"}, {"problem": 54, "code": "(fn [n l]\n  (let [split n\n      s l\n      markers (apply concat (take 20 (map #(repeat n %) (range))))\n      enumerated (map vector s markers)\n      partitioned (partition-by second enumerated)\n      trimmed (filter #(= split (count %)) partitioned)\n      result (map #(map first %) trimmed)]\n  result))", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [arr coll\n         res []]\n    (if (< (count arr) n)\n      res\n      (let [[a, b] (split-at n arr)]\n        (recur b (conj res a))\n      )\n    )\n  )\n)", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 54, "code": "(fn do-split-at\n  [n coll]\n  (filter #(= n (count %))\n    (loop [the-coll coll result []]\n      (if (empty? the-coll)\n        result\n        (recur (drop n the-coll) (concat result (vector (take n the-coll))))))))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 54, "code": "(fn part\n  [n lst]\n  (if\n    (< (count lst) n)\n    []\n    (cons\n     (take n lst)\n     (part n (nthnext lst n)))))", "user": "59733c91e4b01722bebd4c9b"}, {"problem": 54, "code": "(fn my-part\n  [c xs] (loop [temp xs newc ()]\n           (if (and (next temp) (>= (count temp) c)) \n             (recur (drop c temp) (into newc (list(take c temp))))\n             (reverse newc))))", "user": "59afe4bae4b0e1f4e384c8c0"}, {"problem": 54, "code": "(fn my-partition [size col] (let [result\n  (reduce (fn [a b] (\n\tif (and (not (empty? a)) (< (count (last a)) size))\n\t(assoc a (dec (count a)) (conj (last a) b))\n\t(conj a [b])\n  )) [] col)] (\n  if (< (count (last result)) size) (drop-last result) result\n)))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 54, "code": "(fn part\n  ([n coll] (part n coll []))\n  ([n coll out]\n   (if (< (count coll) n)\n     out\n     (recur n (drop n coll) (conj out (take n coll))))))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (if-not (< (count coll) n)\n    (cons (take n coll) (my-partition n (drop n coll)))))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v)\n    (my-partition n (drop n v)))))", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 54, "code": "(fn __ [c1 seq]\n  (let [v   (vec seq)\n        cv  (count v)\n        max (- cv (mod cv c1))\n        vec2 (subvec v 0 max)]\n            (for [strt (range (/ max c1))\n                  :let [start (* c1 strt)]]\n                (for [r (range c1)]\n                     (get v (+ start r))))))", "user": "59089229e4b047aa04b1997c"}, {"problem": 54, "code": "#(loop [s %2 ns []] (if (< (count s) %) ns (recur (drop % s) (conj ns (take % s)))))", "user": "59c734e3e4b0a024fb6ae53f"}, {"problem": 54, "code": "(fn [n coll] (loop [c coll partitioned []] (if (< (count c) n) partitioned \n(recur (drop n c) (conj partitioned (take n c))))))", "user": "59358f74e4b04f87174def52"}, {"problem": 54, "code": "(fn [s coll]\n  (let [vcoll (vec coll)\n        vcount (count coll)]\n  (->> (range 0 vcount s)\n    (map #(subvec vcoll % (min vcount (+ % s))))\n    (filter #(= (count %) s))\n    )\n  ))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 54, "code": "(fn [n a]\n  (filter #(>= (count %) n)\n   (loop [c 0 a a o (vec (repeat n []))]\n    (if (empty? a) o\n      (let [index (int (/ (if (zero? c) 1 c) n))]\n        (recur (inc c) (rest a) (assoc (vec o) index (conj (vec (get o index)) (first a)))))))))", "user": "59ddae03e4b01968742fed65"}, {"problem": 54, "code": "(fn f [n xs] (if (< (count xs) n) [] (cons (take n xs) (f n (drop n xs)))))", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 54, "code": "(fn [length coll]\n   (loop [coll coll\n          result []]\n     (if (< (count coll) length)\n       result\n       (recur\n        (drop length coll)\n        (conj result (take length coll))))))", "user": "56403765e4b08d4f616f5edc"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (loop [acc []\n         curr-part []\n         cnt 1\n         els coll]\n    (cond\n     (not (seq els)) acc\n     (= (mod cnt n) 0) (recur (conj acc (conj curr-part (first els))) [] 1 (rest els))\n     :else (recur acc (conj curr-part (first els)) (inc cnt) (rest els))\n     )\n    )\n  )", "user": "57ca95f2e4b05aa3c4741d3b"}, {"problem": 54, "code": "(fn [n sq]\n    (loop [in sq out []]\n      (if (<= n (count in))\n        (recur (drop n in) (conj out (take n in)))\n        out)))", "user": "59d4a160e4b0ef0a1e9b5be7"}, {"problem": 54, "code": "(fn -partition [n coll]\n  (let [x (take n coll)]\n    (if (= (count x) n)\n      (cons x (-partition n (nthnext coll n)))\n      ())))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 54, "code": "(fn [n xs]\n (loop [ax []\n        rx xs]\n  (if (< (count rx) n)\n    ax\n    (recur \n     (conj ax (take n rx))\n     (drop n rx)))))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 54, "code": "(fn [n coll]\n  (letfn [(part [n coll]\n            (when (seq coll)\n              (cons\n                (take n coll)\n                (part n (drop n coll)))))]\n    (filter #(= n (count %)) (part n coll))))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 54, "code": "#(filter (fn [x] (= (count x) %)) (reduce-kv (fn [xs x k] (if (= (mod k %) 0) (conj xs (vector x)) (update-in xs [(dec (count xs))] conj x))) [] (vec %2)))", "user": "580e7761e4b0849f6811b753"}, {"problem": 54, "code": "#(loop [acc [], coll %2]\n   (let [p (take % coll), enough (= % (count p))]\n     (if (not enough)\n       acc\n       (recur (conj acc p) (drop % coll)))))", "user": "59bdf0eae4b0a024fb6ae42e"}, {"problem": 54, "code": "(fn pt [n c]\n     (lazy-seq\n       (when (= n (count (take n c)))\n         (cons (take n c) (pt n (drop n c)))))\n     )", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 54, "code": "(fn partition- [n xs]\n  (when (>= (count xs) n)\n    (cons (take n xs) (partition- n (drop n xs)))))", "user": "59ee6801e4b0966464fe6a1f"}, {"problem": 54, "code": "(fn  [n coll]\n ((fn fi [remain]\n   (let [take-n (take n remain)]\n     (if (< (count take-n) n)   \n        nil\n       (cons take-n (fi (drop n remain))))))\n  coll))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 54, "code": "(fn f\n\t[n d]\n\t(when (>= (count d) n)\n\t\t(cons (take n d) (f n (drop n d)))))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 54, "code": "(fn furp [acc n x]\n  (if (> n (count x))\n    acc\n    (furp (conj acc (take n x)) n (drop n x) ))\n) []", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 54, "code": "(fn [x coll] (loop [n x curr [] res [] remaining (vec(reverse coll))]\n                (if (empty? remaining)\n                  (if (= 0 n) (conj res curr) res)\n                  (if (= 0 n)\n                    (recur x [] (conj res curr) remaining)\n                    (recur (- n 1) (conj curr (last remaining)) res (pop remaining))))))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 54, "code": "(fn custom-part [n s]\n  (->> (range (quot (count s) n))\n       (map #(take n (drop (* n %) s)))))", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 54, "code": "(fn p [n l]\n  (if (>= (count l) n)\n  \t(apply list (take n l) (p n (drop n l)))))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 54, "code": "(fn [n lst] (remove #(> n (count %)) (partition-by #(int (/ % n)) lst)))", "user": "59f8b925e4b0ca45a743a327"}, {"problem": 54, "code": "(fn partition1 [n coll]\n  (when (<= n (count coll))\n      (cons (take n coll) (partition1 n (drop n coll)))))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 54, "code": "(fn __ [x s*]\n  (loop [acc   ()\n         s     s*\n         i     0\n         inner ()]\n    (if (empty? s)\n      (remove #(< (count %) x) (map reverse (reverse (conj acc inner))))\n      (if (= (count inner) x)\n        (recur (conj acc inner) s (inc i) ())\n        (recur acc (rest s) i (conj inner (first s)))))))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 54, "code": "(fn [n col]\n  (let [col-vec (vec col)\n        groups (quot (count col-vec) n)]\n    (for [i (range 0 (* groups n) n)]\n      (subvec col-vec i (+ i n)))))\n\n\n#_(\n  ;; User cgrand's solution is small and tidy, but hard to understand at first:\n  ;; (I'm using a regular fn to preserve parameter names)\n  (fn [n coll]\n    (take-nth n (apply map list (take n (iterate next coll)))))\n  \n  ;; I list the seperate parts of it and explain how it works\n  ;; using the \"(__ 3 (range 9)\" example. I will also\n  ;; format the result of each part to make it more easy to see\n  \n  ;; It first generates n subsequences of coll, each starting\n  ;; at incrementing indices\n  (take n (iterate next coll))\n  ;; result =>\n  ((0 1 2 3 4 5 6 7 8)\n   (1 2 3 4 5 6 7 8)\n   (2 3 4 5 6 7 8))\n  \n  ;; Next it uses the functionality of \"map\" to work on multiple collections\n  ;; at the same time using \"list\" as the mapping function to generate\n  ;; groups of n elements\n  (apply map list '((0 1 2 3 4 5 6 7 8) (1 2 3 4 5 6 7 8) (2 3 4 5 6 7 8)))\n  ;; result =>\n  ((0 1 2) (1 2 3) (2 3 4)\n   (3 4 5) (4 5 6) (5 6 7)\n   (6 7 8))\n  \n  ;; Every n-th element of the result is a partition that we want,\n  ;; so take-nth is used to get the final result\n  (take-nth n ((0 1 2) (1 2 3) (2 3 4) (3 4 5) (4 5 6) (5 6 7) (6 7 8)))\n  ;; result =>\n  ((0 1 2) (3 4 5) (6 7 8))\n)", "user": "59a080e3e4b0871e7608b837"}, {"problem": 54, "code": "(fn bla [ modVal sq ]\n   (if (empty? (drop (dec modVal) sq))\n      '()\n      (conj (bla modVal (drop modVal sq)) (take modVal sq))))", "user": "59f90e6ae4b0ca45a743a337"}, {"problem": 54, "code": "(fn mypartition [n coll]\n  (if (>= (count coll) n)\n    (cons (take n coll) (mypartition n (drop n coll)))))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 54, "code": "(letfn [(p [n xs]\n          (if (and (seq xs)\n                   (<= n (count xs)))\n            (conj (p n (drop n xs)) (take n xs))\n            '()))]\n  p)", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 54, "code": "(fn [l a]\n  (filter #(= l (count %))\n          (reductions #(if (>= (count %1) l) [%2] (concat %1 [%2]))\n                      []\n                      a)))", "user": "58d96bdce4b0a4d5acaab638"}, {"problem": 54, "code": "(fn [acc at xs]\n  (let [[xs1 xs2] (split-at at xs)]\n    (if (> at (count xs2))\n      (conj acc xs1)\n      (recur (conj acc xs1) at xs2)))) []", "user": "5a01d8f6e4b01bb0ae8afd53"}, {"problem": 54, "code": "(fn fun [n xs] \n      (if (< (count xs) n)\n        '()\n        (conj (fun n (drop n xs)) (take n xs))))", "user": "53de4bdae4b0d874e779ae32"}, {"problem": 54, "code": "(fn[splitAmount inputList]\n    (filter\n      #(= splitAmount (count %))\n     (reduce \n     #(if (or (nil? (last %1)) (= splitAmount (count (last %1)))) \n        (conj %1 (vector %2)) \n        (conj (into [] (take (dec (count %1)) %1)) (conj (last %1) %2))) \n   [] inputList))   \n  )", "user": "571172ece4b09c608db70446"}, {"problem": 54, "code": "(fn part [size coll]\n   (loop [coll coll result []]\n     (if (< (count coll) size)\n       result\n       (recur (drop size coll) (conj result (take size coll))))))", "user": "5a082ce4e4b01bb0ae8afdec"}, {"problem": 54, "code": "(fn p [n m]\n  (let [h (take n m)]\n    (if (= (count h) n)\n      (lazy-seq (cons h (p n (drop n m)))))))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 54, "code": "(fn p [n c]\n  (when (and (seq c) (>= (count c) n))\n    (cons (take n c) (p n (drop n c)))))", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 54, "code": "(fn f [n col]\n    (if (< (count col) n)\n      '()\n      (cons (take n col) (f n (drop n col)))))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 54, "code": "(fn[x a](partition-by #(quot % x) (take (* x (quot (count a) x)) a)))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 54, "code": "(fn part [n coll]\n  (if (< (count coll) n)\n    ()\n    (conj (part n (drop n coll)) (take n coll))))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 54, "code": "(fn [n s]\n    (loop [result '()\n           start s]\n      (if (or (empty? start)\n              (> n (count (take n start))))\n        (reverse result)\n        (recur (conj result (take n start))\n               (drop n start)))))", "user": "57c314f3e4b05aa3c4741cba"}, {"problem": 54, "code": "; problem 54\n(fn [n s]\n; partition a sequence s into n partitions\n(loop [res '()\n       rem s   ]\n  (if (< (count rem) n )\n     res\n     (recur (concat res (list (take n rem))) (drop n rem))\n  )\n)\n)", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 54, "code": "(fn gg [n s]\n  (cond\n   (= (count s) n) (list s)\n   (< (count s) n) '()\n   :else (cons\n     (take n s)\n     (gg n (drop n s)))))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 54, "code": "(fn [size l]\n  (let [list (drop-last (rem (count l) size) l)]\n    (loop [answer [] remaining list] \n      (if (seq remaining)\n        (recur (conj answer (take size remaining)) (drop size remaining))\n        answer\n      )\n    )\n  )\n)", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 54, "code": "(fn [n l]\n\t(loop [acc [] nxt l]\n\t\t(let [[fst lst] (split-at n nxt)]\n\t\t\t(if (or (empty? fst) (< (count fst) n)) \n\t\t\t\tacc\n\t\t\t\t(recur (conj acc fst) lst)))))", "user": "59fa5773e4b0ca45a743a35e"}, {"problem": 54, "code": "(fn p [x c]\n  (let [[a b] (split-at x c)]\n    (when (= x (count a))\n      (cons a (p x b)))))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n(cons (take n v) (my-partition n (drop n v)))))", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 54, "code": "(fn my-partition [n xs]\n  (loop [remaining xs\n         result-acc []]\n    (if (< (count remaining) n)\n      (apply list result-acc)\n      (recur\n       (drop n remaining)\n       (conj result-acc (take n remaining))))))", "user": "59f7f55de4b0ca45a743a313"}, {"problem": 54, "code": "(fn my-part\n  [n coll]\n  (let [start-indexes (conj (take-while #(< % (count coll)) (map #(* % n) (iterate inc 1))) 0)] \n    (filter #(= (count %) n) (map #(take n (subvec (vec coll) %)) start-indexes)))\n  )", "user": "59f44189e4b0966464fe6aab"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [xs xs\n         acc []]\n    (if (or (empty? xs) (< (count (take n xs)) n))\n      acc\n      (recur (drop n xs) (conj acc (take n xs))))))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 54, "code": "(fn [n xs] (let [len (count xs)\n                 m (/ len n)\n                 rlen (* (int m) n)\n                 ixs (take rlen xs)\n                 hfx (fn [res p ts] (if (first ts) (recur (conj res (take p ts)) p (drop p ts))\n                                       res))\n                 ]\n             (hfx [] n ixs)\n             ))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 54, "code": "#(first (reduce (fn [[a sa] v]\n                 (if (= (dec %) (count sa))\n                   [`[~@a [~@sa ~v]] []]\n                   [a `[~@sa ~v]]))\n               [[] []]\n               %2))", "user": "4dc78527535d8a4b2fd7428f"}, {"problem": 54, "code": "(fn __ [a b]\n  (if (>= (count b) a)\n    (lazy-seq (cons (take a b) (__ a (drop a b))))))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 54, "code": "(fn [x y] \n\t(->> y\n\t  (reduce (fn [ys y] \n\t\t  (if (= (count (last ys)) x)\n\t\t    (conj ys (vector y))\n\t\t    (conj (into [] (butlast ys)) (conj (last ys) y))\n\t\t    )) [[]] )\n\t\t(filter (fn [z] (= (count z) x)))))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [remn xs ret []]\n    (if (empty? remn) (remove #(< (count %) n) ret)\n      (recur (drop n remn) (conj ret (take n remn))))))", "user": "5a16da30e4b0ff51aa4b31cc"}, {"problem": 54, "code": "(fn [n l]\n  (map\n    #(subvec (vec l) % (+ % n))\n    (range 0 (* (quot (count l) n) n) n)))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [[part rest] (split-at n coll)\n         parted []]\n    (if (< (count part) n)\n      parted\n      (recur\n        (split-at n rest)\n        (conj parted part)))))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 54, "code": "(fn [partition_size item_list]\n    (loop [temp_item_list item_list\n           partitions nil]\n          (if (empty? temp_item_list)\n              (reverse partitions)\n              (let [recur_item_list (drop partition_size temp_item_list)\n                    new_partition (take partition_size temp_item_list)]\n                   (if (= partition_size (count new_partition))\n                       (recur recur_item_list (cons new_partition partitions))\n                       (reverse partitions))))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 54, "code": "(fn part [n xs]\n\t(if (< (count xs) n) nil\n   \t\t(cons (take n xs) (part n (nthnext xs n)))))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n(cons (take n v) (my-partition n (drop n v)))))", "user": "5a2834dfe4b07f18be40aa64"}, {"problem": 54, "code": "#(loop [r [] cur %2]\n   (if (or (= [] cur) (< (count cur) %1))\n     r\n     (recur (conj r (take %1 cur)) (drop %1 cur))))", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 54, "code": "(fn my-partition\n  [x coll]\n  (loop\n    [elems coll\n     acc []]\n    (if (< (count elems) x)\n      acc\n      (recur (drop x elems) (conj acc (take x elems))))))", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 54, "code": "(fn [n s]\n( let [ ul (* n ( quot ( count s) n))]\n(loop [ se (next s) res [] suse [(first s)] cur 1 ]\n( if (< ul cur)\nres\n( do \n( if (= 0 (mod cur n))\n(recur ( next se ) ( conj res suse ) [(first se)] ( inc cur) )\n(recur ( next se ) res ( conj suse (first se ) ) ( inc cur))))) ) ) )", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 54, "code": "(fn [x ys]\n    (loop [xs ys acc []]\n      (if (empty? xs)\n          (if (=(.size (last acc)) x)\n                acc \n                (drop-last acc)\n           )\n          (recur (drop x xs)\n                 (merge acc (take x xs)) \n          )\n       )\n      )\n    )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 54, "code": "(fn [size coll]\n  (loop [acc [] triple (take size coll) all-rest (drop size coll)]\n    (if (< (count triple) size)\n      acc\n      (recur (conj acc triple) (take size all-rest) (drop size all-rest)))))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 54, "code": "(fn sublists [n x] \n(->>\n (loop [m 0 ret []]\n  (if (> m (count x))\n  ret\n  (recur (+ n m)(conj ret (take n \n  (drop m x))))))\n  (filter #(= n (count %)))))", "user": "52faf67ce4b047fd55837005"}, {"problem": 54, "code": "(fn [size collection]\n  (loop [result [] coll collection]\n    (if (< (count coll) size)\n      result\n      (recur (conj result (take size coll)) (drop size coll)))))", "user": "58a6806ee4b01a0c0b23292f"}, {"problem": 54, "code": "(fn [x v]  \n  (loop [v v r []]  \n    (if (< (count v) x)  \n      r  \n      (recur (nthrest v x) (conj r (take x v))))))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 54, "code": "(fn f [n s] (let [x (take n s)]\n              (if (< (count x) n) nil (cons x (f n (drop n s))))))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 54, "code": "(fn partition2\n  [n coll]\n  (loop [in coll o []]\n    (let [segment (take n in)]\n      (if (< (count segment) n)\n        o\n        (recur (drop n in) (conj o segment))))))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [n n\n         coll coll\n         res []]\n    (if (< (count coll) n) res\n      (recur n (drop n coll) (conj res (take n coll))))))", "user": "5a4e1c81e4b05d388ecb6bb6"}, {"problem": 54, "code": "(fn [i a]\n  (let [b (range 0 (count a))\n        c (map #(range %1 (+ %1 i)) b)\n        d (reduce #(if (empty? %1)\n                     [%2]\n                     (if (and (== (inc (last (last %1))) (first %2)) (< (last %2) (count a)))\n                       (conj %1 %2)\n                       %1)) [] c)]\n    (map #(map (fn [i] (nth a i)) %1) d)))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 54, "code": "(fn [n s] (map\n  #(take n (drop (* n %) s))\n  (-> (count s) (/ n) int range)))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 54, "code": "(fn [n coll] \n  (filter #(= n (count %)) (\n   (fn [n coll res] (let [x (take n coll)] (if-not (next x) res (recur n (drop n coll) (conj res x)))))\n   n coll [])))", "user": "5a535572e4b05d388ecb6c0b"}, {"problem": 54, "code": "(fn [n coll]\n  (reverse (:parts (reduce\n      (fn [state next]\n        (let [appended (cons next (:partial state))\n              p (count appended)\n              [partial' parts'] (if (= p n) ['() (cons (reverse appended) (:parts state))]\n                                            [appended (:parts state)])]\n          {:parts parts' :partial partial'}))\n      {:parts '() :partial '()}\n      coll))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll\n         r []]\n    (if (> n (count coll))\n      r\n      (recur (drop n coll) (conj r (take n coll))))))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 54, "code": "(fn [n coll]\n  (let [cc (count coll)]\n    (for [m (range 0 cc n) :while (>= cc (+ m n))]\n      (take n (drop m coll)))))", "user": "52c5c1c8e4b0c2d177d620fc"}, {"problem": 54, "code": "#(loop [coll %2\n         result []]\n    (if (empty? coll)\n      (filter (fn [el] (= %1 (count el))) result)\n      (recur (drop %1 coll)\n             (conj result (take %1 coll)))))", "user": "5a4d656fe4b05d388ecb6ba9"}, {"problem": 54, "code": "(fn [n a-seq]\n    (loop [counter n\n           pointer -1\n           curr    []\n           remain  a-seq]\n      (if-not (seq remain)\n        (filter #(= (count %) n) curr)\n        (if (= counter n)\n          (recur\n            1\n            (inc pointer)\n            (conj curr [(first remain)])\n            (rest remain))\n          (recur\n            (inc counter)\n            pointer\n            (update-in curr [pointer] conj (first remain))\n            (rest remain))))))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 54, "code": "(fn [n v]\n  (loop [r [] v v]\n    (if (= (count (take n v)) n)\n      (recur (conj r (take n v)) (drop n v))\n      r)))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 54, "code": "(fn ps [n xs]\n  (if (< (count xs) n) ()\n    (cons (take n xs) (ps n (drop n xs)))))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 54, "code": "(fn [n s]\n    (loop [s s\n           i 1\n           tmp []\n           result []]\n      (if s\n        (recur (next s)\n               (inc i)\n               (if (zero? (mod i n))\n                 []\n                 (conj tmp (first s)))\n               (if (zero? (mod i n))\n                 (conj result (conj tmp (first s)))\n                 result))\n        result)))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 54, "code": "(fn part [n s]\n    (loop [parted '()\n           rest-s s]\n      (if (and (seq rest-s)\n               (<= n (count rest-s)))\n        (recur (conj parted (take n rest-s))\n               (drop n rest-s))\n        (reverse parted))))", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 54, "code": "(fn [n x] (filter #(= (count %) n) (partition-by #(quot (.indexOf x %) n) x)))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 54, "code": "(fn [n coll]\n (loop [res []\n        x (take n coll)\n        xs (drop n coll)]\n  (if (< (count x) n)\n   res\n   (recur (conj res x)\n          (take n xs)\n          (drop n xs)))))", "user": "5a4caa20e4b05d388ecb6b94"}, {"problem": 54, "code": "(fn f1 [n col]\n  (if (< (dec n) (count col))\n    (cons (take n col) (f1 n (drop n col)))\n    nil))", "user": "5a624129e4b0512ff01cd987"}, {"problem": 54, "code": "(fn [x coll]\n  (loop [r [], c coll]\n    (if (> x (count c))\n      r\n      (recur (conj r (take x c)) (drop x c)))))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 54, "code": "(fn [n coll] (loop [acc [] c coll] (if (< (count c) n) acc (recur (conj acc (take n c)) (drop n c)))))", "user": "5a34de78e4b0ddc586f153d0"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [res [] c coll]\n    (if\n     (< (count c) n) res\n     (recur (conj res (take n c)) \n            (drop n c))\n    )\n  )\n)", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 54, "code": "(fn f [n s]\n  (let [s' (map-indexed #(list (quot % n) %2) s)]\n    (let [s'' (take-while #(< (first %) (quot (count s') n)) s')]\n     (let [s''' (group-by first s'')]\n      ((fn [new-s res]\n         (if (empty? new-s) res\n           (recur (rest new-s) \n                  (conj\n                   res\n                   (map last\n                        (first\n                         (map second new-s))))))) s''' [])))))", "user": "5a52f2cbe4b05d388ecb6c06"}, {"problem": 54, "code": "(fn [n xs]\n  (let [nxs (count xs)]\n    (for [x (range 0 (- nxs (rem nxs n)) n)]\n      (take n (drop x xs)))))", "user": "51823a97e4b0f2adb733651e"}, {"problem": 54, "code": "(fn f\n  ([n s] (f n s []))\n  ([n s r] (if\n               (< (count s) n)\n               r\n               (recur \n                n\n                (drop n s) \n                (conj r (take n s))))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 54, "code": "#(let [partitioned-data (atom [])]\n    (loop [min-partition %2]\n      (swap! partitioned-data conj (take %1 min-partition))\n      (let [remainingstuff (drop %1 min-partition)]\n        (when (>= (count remainingstuff) %1)\n          (recur remainingstuff))))\n    @partitioned-data)", "user": "5785de43e4b0ebec4cfb74e5"}, {"problem": 54, "code": "(fn [s v]\n  (->> (partition-by (fn [[x i]] i)\n                     (map vector v (for [x (cycle [true false])\n                                         i (range s)] x)))\n       (map (fn [x] (map (fn [[a b]] a) x)))\n       (filter (fn [x] (= (count x) s)))))", "user": "55c1eb52e4b0e31453f64970"}, {"problem": 54, "code": "(fn aux ([n col] (aux n col []))\n           ([n col ret] (if (and (seq col) (= n (count (take n col)))) (recur n (drop n col) (conj ret (take n col))) ret))\n           )", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 54, "code": "(fn party [n coll]\n  (loop [c coll\n         res []]\n    (if (empty? c)\n      (filter #(= n (count %)) res)\n      (recur (drop n c)\n             (conj res (take n c))))))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 54, "code": "(fn p[n xs]\n(if (> n (count xs))\n    []\n    (cons (take n xs) (p n (drop n xs)))))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 54, "code": "(fn\n  [num col]\n  (loop [collectected '()\n         left col]\n    (if (not (empty? left))\n      (recur (merge collectected (take num left)) (drop num left))\n      (reverse (filter #(= (count %) num) collectected)))))", "user": "5a58d8a0e4b05d388ecb6c8a"}, {"problem": 54, "code": "(fn f [n coll]\n   (let [p (take n coll)]\n     (when (= n (count p))\n       (cons p (f n (nthrest coll n))))))", "user": "58637221e4b0f14aab7c881d"}, {"problem": 54, "code": "(fn part [n v]\n  (if (seq v)\n    (loop [i 1\n           s (rest v)\n           res []\n           cur [(first v)]]\n      (if (seq s)\n        (recur\n         (+ i 1)\n         (rest s)\n         (if (= (mod i n) 0) (conj res cur) res)\n         (if (= (mod i n) 0) [(first s)] (conj cur (first s))))\n        (if (= (mod i n) 0) (conj res cur) res)))\n    []))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 54, "code": "(fn par [n coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [p (take n s)]\n       (when (= (count p) n)\n         (cons p (par n (drop n coll))))))))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 54, "code": "(fn part [n x]\n  (if (< (count x) n) \n    nil\n    (cons \n          (take n x)\n          (part n (nthrest x n)))))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 54, "code": "(fn f [n xs]\n  (when (<= n (count xs))\n    (cons (take n xs)\n          (f n (drop n xs)))))", "user": "50ef77a4e4b0bdaecbb47d99"}, {"problem": 54, "code": "(fn [x y]\n  (loop [ret [] cur [] a y]\n      (if (= (count cur) x)\n        (recur (conj ret cur) [] a )\n        (if (empty? a)\n          ret\n          (recur ret (conj cur (first a)) (rest a))))))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 54, "code": "(fn part\n  [n coll]\n  (if (< (count coll) n)\n    '()\n    (conj (part n (drop n coll)) (take n coll))))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 54, "code": "(fn [n s]\n  (letfn [(chop [n s] \n            (when (seq s) \n              (cons (take n s) (chop n (drop n s)))))]\n    (filter #(= n (count %)) (chop n s))))\n\n;(defn chop [n s] (when (seq s) (lazy-seq (cons (take n s) (chop n (drop n s))))))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 54, "code": "(fn [r-length list-vals]\n  (loop [result [] current-range [] feed-set list-vals]\n    (cond\n      (empty? feed-set)\n      result\n      :else\n      (recur\n        (cond\n          (= (count (conj current-range (first feed-set))) r-length)\n          (conj result (conj current-range (first feed-set)))\n          :else\n          result)\n        (cond\n          (= (count (conj current-range (first feed-set))) r-length)\n          []\n          :else\n          (conj current-range (first feed-set))\n          )\n        ;;---\n        (rest feed-set)\n        )\n      )\n    )\n  )", "user": "5826209fe4b051871117bef1"}, {"problem": 54, "code": "(fn my-split [size xs]\n  (if (<= size (count xs))\n    (cons (take size xs) (my-split size (drop size xs)))))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 54, "code": "(fn\n  [partition-size coll]\n  (loop [result []\n         coll coll\n         current-partition []]\n    (if (empty? coll)\n      result\n      (let [[head & rest] coll\n            new-partition (conj current-partition head)]\n        (if (= partition-size (count new-partition))\n          (recur (conj result new-partition) rest [])\n          (recur result rest new-partition))))))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 54, "code": "(fn [n coll]\n  (map #(take-last n (take (* % n) coll)) (range 1 (inc (quot (count coll) n)))))", "user": "5a59a76fe4b05d388ecb6c98"}, {"problem": 54, "code": "(fn my-partition [num s]\n  (let [[x y] (split-at num s)]\n    (if (<= num (count x))\n      (cons x (my-partition num y)))))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 54, "code": "(fn [n x]\n   (filter\n     #(= (count %1) n)\n     (reduce\n       #(let [grp (last %1)]\n          (if (< (count grp) n)\n            (concat (drop-last %1) [(concat grp [%2])])\n            (concat %1 [[%2]])\n            ))\n       [[]]\n       x)))", "user": "5a80b934e4b00b71e582a05b"}, {"problem": 54, "code": "(fn my-partition [n seq]\n  (if (< n (+ (count seq) 1))\n    (cons (take n seq) (my-partition n (drop n seq)))))", "user": "5a86ad84e4b05369db4d249c"}, {"problem": 54, "code": "(fn part [n xs] \n  (if (>= (count xs) n) \n    (cons (take n xs) (part n (drop n xs))) \n    (empty xs)))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 54, "code": "(fn _part [n _seq]\n            (if (< (count _seq) n)\n              (list)\n              (let [[p1 p2] (split-at n _seq)]\n                (conj (_part n p2) p1))))", "user": "5a813b90e4b00b71e582a065"}, {"problem": 54, "code": "(fn part [n xs]\n  (if (< (count xs) n)\n    []\n    (cons\n      (take n xs)\n      (part n (drop n xs)))))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 54, "code": "(fn myPartition [ limit coll]\n    (if  (< (count coll) limit)\n      '()\n      (cons\n        (first (split-at limit coll))\n        (myPartition limit (last (split-at limit coll))))))", "user": "5a634ff0e4b0512ff01cd995"}, {"problem": 54, "code": "(fn partition-me\n   ([n coll] (partition-me n coll [] (/ (count coll) n)))\n   ([n coll v iter]\n    (if (or (= iter 0) (< (count coll) n))\n      v\n      (partition-me n (drop n coll) (conj v (take n coll)) (dec iter)))))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 54, "code": "(fn [n c]\n  (loop [coll c res []]\n    (if (< (count coll) n)\n      res\n      (recur (drop n coll)\n             (conj res (take n coll))))))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 54, "code": "(fn customPartition[%1 %2] (if (>= (count %2) %1) (conj (customPartition %1 (drop %1 %2)) (take %1 %2))))", "user": "5a63f8bae4b0512ff01cd99f"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [acc []\n         ys  xs]\n    (let [[head tail] (split-at n ys)]\n      (if (= n (count head))\n        (recur (conj acc head) tail)\n        acc))))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "5a9545dbe4b0d174b936c74c"}, {"problem": 54, "code": "#(loop [acc [] c %2]\n   (if (< (count c) %)\n     acc\n     (recur (conj acc (take % c)) (drop % c))))", "user": "4ed45563535d10e5ff6f52c9"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll\n         parts []]\n    (if (< (count coll) n)\n      parts\n    (recur (drop n coll)\n           (conj parts (take n coll))))))", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 54, "code": "(fn this [n coll]\n  (if (< (count coll) n)\n    nil\n    (cons (take n coll) (this n (drop n coll)))))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 54, "code": "(fn parti [ n l ]\n  (get (reduce\n    (fn reducer [acc v]\n      (let [current (get acc :cur [])\n            remaining (get acc :rem [])\n            num_remaining (count remaining)]\n        (if (>= num_remaining n)\n          {\n            :cur (conj current (take (min num_remaining n) remaining))\n            :rem (drop (min num_remaining n) remaining)\n          }\n          (dissoc acc :rem))))\n    {:rem l}\n    l) :cur []))", "user": "5779556de4b0979f8965166e"}, {"problem": 54, "code": "(fn parti [n coll]\n  (when-not (< (count coll) n)\n    (lazy-seq (cons (take n coll) (parti n (drop n coll))))))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 54, "code": "(fn [n coll]\n  (letfn [(part [collx]\n            (if (> (count collx) (- n 1))\n              (cons (take n collx) (part (drop n collx)))))]\n    (part coll)))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 54, "code": "(fn my-partition\n  [n coll]\n  ((fn p\n    [c]\n    (let [head (take n c) tail (drop n c)]\n      (if (< (count head) n)\n        nil\n        (cons head (p tail))\n        )\n      )\n    )\n   coll\n   )\n  )", "user": "5a90395ce4b05369db4d254a"}, {"problem": 54, "code": "(fn p [n c]\n  (lazy-seq\n   (let [nc (take n c)]\n     (if (= (count nc) n)\n       (cons nc (p n (nthrest c n)))))))", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 54, "code": "#(loop [acc [] rest %2] (let [items (take %1 rest) remaining (drop %1 rest)]  (if (< (count rest) %1) acc (recur (conj acc items)  remaining))))", "user": "55ec879ae4b0121d4835fdc8"}, {"problem": 54, "code": "(fn myPart [n xs]\n  (if (not= (count (take n xs)) n)\n      '()\n      (conj  (myPart n (drop n xs)) (take n xs))))", "user": "5aa5951ae4b0d174b936c899"}, {"problem": 54, "code": "(fn [n col]\n  (loop [incol col\n         outcol '()]\n    (if (> n (count incol))\n      (reverse outcol)\n      (recur (drop n incol) (conj outcol (take n incol))))))", "user": "56197b47e4b053970a773af8"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [v [] xs xs]\n    (if (< (count xs) n)\n      v\n      (recur (conj v (take n xs)) (drop n xs)))))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 54, "code": "(fn __ [n aseq]\n  (loop [x aseq r '[]]\n    (if (> n (count x)) r\n      (recur (drop n x) (conj r (take n x)))))\n  )", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 54, "code": "(fn my-partition\n  ([x seq] (my-partition seq x 0 [] []))\n  ([seq length counter built tmp]\n   (if (empty? seq)\n     (if (= length (count tmp))\n       (conj built tmp)\n       built\n       )\n     (if (= counter length)\n       (recur (rest seq) length 1 (conj built tmp) [(first seq)])\n       (recur (rest seq) length (inc counter) built (conj tmp (first seq)))\n       )\n     )\n    )\n  )", "user": "5aada061e4b073f17744257a"}, {"problem": 54, "code": "(fn f [len coll]\n  (if (< (count coll) len)\n    []\n    (cons (take len coll)\n          (f len (drop len coll)))))", "user": "5744adb1e4b009280f9f2b3f"}, {"problem": 54, "code": "(fn [n coll](loop [loop-coll coll\n       results []]\n  (if (< (count loop-coll) n)\n    results\n    (recur (drop n loop-coll) (conj results (take n loop-coll))))))", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 54, "code": "(fn mypartition [n coll]\n  (loop [input coll\n         result []\n         sub []\n         index n]\n    (let [sub_full? (zero? (dec index))]\n      (if  (empty? input)\n        result\n        (recur (rest input)\n               (if sub_full? (conj result (conj sub (first input))) result)\n               (if sub_full? [] (conj sub (first input)))\n               (if sub_full? n  (dec index)))))))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 54, "code": "(fn [n coll]\n   (let [rem (quot (count coll) n)\n         range-var (take rem (iterate (partial + n) 0))]\n     (for [i range-var]\n       (take n (drop i coll)))))", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 54, "code": "(fn myPartition [ limit coll] (if (and (not= (type coll) Long) (< (count coll) limit)) '() (cons (first (split-at limit coll)) (myPartition limit (last (split-at limit coll))))))", "user": "5a6170fde4b0512ff01cd975"}, {"problem": 54, "code": "(fn [n x]\n  (let [h (quot (count x) n)]\n    (for [i (take h (range 0 (count x) n))]\n      (take n (drop i x)))))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 54, "code": "(fn [n x]\n  (let [h (quot (count x) n)]\n    (for [i (take h (range 0 (count x) n))]\n      (take n (drop i x)))))", "user": "4ee897fe535d93acb0a66883"}, {"problem": 54, "code": "#(loop [remaining %2, out []]\n  (if (< (count remaining) %1)\n    out\n    (recur (drop %1 remaining) (conj out (take %1 remaining)))))", "user": "5ab5f60be4b073f177442643"}, {"problem": 54, "code": "(fn [n s]\n  (take-while\n    #(= n (count %))\n    (map\n      (fn [i] (drop (* n i) (take (* n (inc i)) s)))\n      (range))))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 54, "code": "(fn [n coll]\n  (->>\n   coll\n   (iterate #(drop n %))\n   (take (quot (count coll) n))\n   (map #(take n %))))", "user": "5abc5a09e4b073f1774426e9"}, {"problem": 54, "code": "#(loop [colls %2\n         res []]\n    (if (> %1 (count colls))\n      res\n      (recur (drop %1 colls) (conj res (take %1 colls)))))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 54, "code": "(fn [n s] (loop [a [] r s]\n            (if (> n (count r))\n              a\n              (recur (conj a (take n r)) (drop n r)))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 54, "code": "(fn [n s] ((fn [es rs] (if (< (count rs) n) es (recur (conj es (take n rs)) (drop n rs)))) [] s))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 54, "code": "(fn [n xs]\n  (\n   (fn f [res rst]\n    (if \n      (< (count rst) n)\n      res\n     \n      (f (conj res (take n rst)) (drop n rst))\n    )\n   )\n   []\n   xs\n  )\n )", "user": "5ab1665de4b073f1774425c0"}, {"problem": 54, "code": "(fn [x args]\n  (loop [output [] args args]\n    (if (> x (count args)) output\n        (recur (conj output (take x args)) (drop x args)))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 54, "code": "(fn [n elems]\n    (let [partitions (quot (count elems) n)]\n      (map (fn [x] (->> elems (drop (* x n)) (take n))) (range partitions))))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 54, "code": "(fn part [n l]\n  (loop [l l\n         res []]\n    (let [[subl* tl] (split-at n l)\n           subl (if (= n (count subl*)) subl* nil)]\n      (if subl\n        (recur tl (conj res subl))\n        res))))", "user": "5a8fd113e4b05369db4d2542"}, {"problem": 54, "code": "(fn manual-partition\n  [n coll]\n  (if (> n (count coll))\n    nil\n    (cons (take n coll) (manual-partition n (drop n coll)))))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 54, "code": "(fn [n x]\n  (loop [results [] coll x]\n    (if (< (count coll) n) results\n      (recur (conj results (take n coll)) (drop n coll)))))", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 54, "code": "(fn partition-sequence [n xs]\n   (let [\n         part  (take n xs)\n         rest (drop n xs)\n         ]\n     (if (= (count part) n) \n       (cons part (partition-sequence n rest))\n       ) \n     )  \n   )", "user": "5ac85708e4b0e27600da77ac"}, {"problem": 54, "code": "(fn [n col]\n   (loop [ccol col \n         solution '()]\n    (if (>= (count ccol) n)\n      (recur (drop n ccol) (conj solution (take n ccol)))\n      (reverse solution))))", "user": "5acd235ae4b0e27600da7824"}, {"problem": 54, "code": "#(loop [f [] r %2]  \n  (if (or (empty? r) (< (count r) %1)) f\n    (recur (conj f (take %1 r)) (drop %1 r))))", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 54, "code": "(fn [n c]\n  (->> (iterate #(drop n %) c)\n       (take-while #(<= n (count %)))\n       (map #(take n %))))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 54, "code": "(fn [n x]\n  (reverse (loop [result '()\n         \t\t  left x]\n    \t\t  (let [this (take n left)]\n      \t\t  (if (< (count this) n)\n      \t\t    result\n       \t\t   (recur (cons this result) (drop n left)))))))", "user": "5acd1a43e4b0e27600da7823"}, {"problem": 54, "code": "#(loop [pnum % rl %2 pa-ls nil cp nil]\n            (if (empty? rl)\n              (reverse pa-ls)\n              (let [ncp (cons (first rl) cp)]\n                (if (= pnum (count ncp))\n                  (recur pnum (rest rl) (cons (reverse ncp) pa-ls) nil)\n                  (recur pnum (rest rl) pa-ls ncp)))))", "user": "5831846ae4b051871117c02c"}, {"problem": 54, "code": "(fn [n xs]\n    (->> xs\n         (partition-by #(quot % n))\n         (filter #(= n (count %)))))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 54, "code": "(fn [n sq]\n  (loop [sq sq acc []]\n    (if (empty? sq)\n      (if (empty? acc)\n        ()\n        (seq acc))\n      (let [part (take n sq)]\n        (recur (drop n sq) (if (= n (count part)) (conj acc part) acc))))))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 54, "code": "(fn __ [partition-size collection]\n  (if (>= (count collection) partition-size)\n    (cons (take partition-size collection) (__ partition-size (drop partition-size collection)))\n    []))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 54, "code": "(fn\n  [pc xs]\n   (loop [result [] curr-seq [(first xs)] remain (rest xs)]\n      (cond\n        (empty? remain)\n            (if (= (count curr-seq) pc) (conj result (seq curr-seq)) (seq result))\n        (= pc (count curr-seq))\n            (recur (conj result (seq curr-seq)) (vector (first remain)) (rest remain))\n        :else\n            (recur result (conj curr-seq (first remain)) (rest remain)) \n        )))", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 54, "code": "(fn rep [x coll] \t\n\t\t  (loop [ res [] \n\t\t          du coll ] \n\t\t          (if (or (empty? du) (< (count du) x)) \n\t\t          \t(reverse res) \n\t\t          \t(recur (cons (take x du) res) (drop x du)) \n\t\t          \t)\n\t\t          \n\t\t  ))", "user": "5ac04101e4b073f177442737"}, {"problem": 54, "code": "(fn my-partition\n    ([x s]\n     (my-partition x (drop x s) [(take x s)])\n     )\n    ([x s z]\n     (if (empty? s)\n       (if (not= (count (last z)) x)\n         (apply list (butlast z))\n         (apply list z)\n         )\n       (my-partition x (drop x s) (conj z (take x s)))\n       )\n     )\n    \n    )", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 54, "code": "(fn [l coll] (loop [result [] c coll] (if (< (count c) l) result (recur (conj result (take l c)) (drop l c)))))", "user": "57086931e4b0b0fb43fd069e"}, {"problem": 54, "code": "(fn prtn [n col] \n       (lazy-seq \n                (when (>= (count col) n)\n                  (cons (take n col) (prtn n (drop n col))))))", "user": "5976da27e4b01722bebd4ce3"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [out [] in xs] (\n     if (< (count in) n) out\n     (recur (conj out (take n in)) (drop n in)))))", "user": "5aeec90fe4b0cc2b61a3bc31"}, {"problem": 54, "code": "(fn [n xs]\n  (reverse\n  (loop [ys xs zs '()]\n    (if (> n (count ys))\n      zs\n      (recur \n       (drop n ys)\n       (cons (take n ys) zs)\n      )\n    )\n  ))\n)", "user": "5aac468ae4b073f17744256b"}, {"problem": 54, "code": "(fn [n s]\n  (loop [r () s s t ()]\n    (if (empty? s)\n      (reverse r)\n      (if (= (count t) (- n 1))\n        (recur (conj r (reverse (conj t (first s)))) (rest s) ())\n        (recur r (rest s) (conj t (first s)))))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 54, "code": "(fn [n s]\n  (loop [t s\n         r []]\n    (if (< (count t) n)\n      r\n      (recur (drop n t)\n             (conj r (take n t))))))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [xs xs a []] \n    (if (< (count xs) n) a (recur (drop n xs) (conj a (take n xs))))))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 54, "code": "(fn [size collection]\n  (loop [my-collection collection\n         result []]\n    (let [collection-size (count my-collection)]\n      (cond\n        (<= size collection-size) (recur \n                                    (drop size my-collection)\n                                    (conj result (take size my-collection)))\n        :else result))))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 54, "code": "(fn part [n coll] \n  (when (<= n (count coll))\n    (cons (take n coll) \n          (lazy-seq (part n (drop n coll))))))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [x coll result []]\n    (if (< (count x) n)\n      result\n      (recur (drop n x) (conj result (take n x))))))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 54, "code": "#(loop [r [] c %2]\n    (if (< (count c) %) r (recur (conj r (take % c)) (drop % c))))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 54, "code": "(fn partix\n  [n coll]\n  (cond\n    (>= (count coll) n) (cons (take n coll) (partix n (drop n coll)))\n    :else nil))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 54, "code": "(fn [n v]\n  (vals (group-by #(quot % n) (take (- (count v) (rem (count v) n)) v))))", "user": "55e732c5e4b050e68259b492"}, {"problem": 54, "code": "(fn my-partition [num s]\n  (let [[x y] (split-at num s)]\n    (if (<= num (count x))\n(cons x (my-partition num y)))))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 54, "code": "(fn partition-a-seq\n  ([n s]\n   (partition-a-seq n s [] []))\n  ([n is ss cs]\n   (cond\n     (= n (count cs))\n     (recur n (rest is) (conj ss cs) [(first is)])\n\n     (empty? is)\n     ss\n\n     :else\n     (recur n (rest is) ss (conj cs (first is))))))", "user": "5922f8a9e4b026ae3852128f"}, {"problem": 54, "code": "(fn part [n coll]\n  (when (>= (count coll) n)\n  \t(lazy-seq (cons (take n coll)\n                    (part n (drop n coll))))))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 54, "code": "(fn [n coll]\n  (-> (reduce (fn [[parts working] x]\n            (let [nw (conj working x)]\n              (if (>= (count nw) n)\n                (vector (conj parts nw) [])\n                (vector parts nw))))\n          [[] []]\n          coll)\n      first))", "user": "56aad332e4b03c432f187337"}, {"problem": 54, "code": "(fn make-parts [w what]\n  (->>\n    (range (count what))\n    (filter (fn [x] (= 0 (rem x w))))\n    (map (fn [g]\n            (map #(nth what %)\n                 (range g (min (+ g w) (count what))))))\n    (filter #(= (count %) w))))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 54, "code": "(fn f [n xs]\n  (let [part (take n xs)]\n    (when (>= (count part) n)\n      (cons part (f n (drop n xs))))))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 54, "code": "(fn f ([x coll] (f x coll 0)) ([x coll z] (when (<= x (- (count coll) z)) (cons (take x (nthrest coll z)) (f x coll (+ z x))))))", "user": "5addadfce4b0837691e92c13"}, {"problem": 54, "code": "(fn p  [n s] (when (<= n (count s)) (cons (take n s)  (p n (drop n s)))))", "user": "583048d9e4b051871117c007"}, {"problem": 54, "code": "(fn partition-seq [n xs]\n  (->> xs\n       (group-by #(quot % n))\n       vals\n       (filter #(= n (count %)))))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 54, "code": "(fn partition1 [size-of-sublist coll]\n  (let [new-seq (reduce (fn [a b]\n                          (if (seq? a)\n                            (let [last-added-sublist (first a)]\n                              (if\n                                (< (count last-added-sublist) size-of-sublist)\n                                ; last-added-sublist isnt full yet so append to it\n                                (conj (pop a) (conj last-added-sublist b))\n                                ; last-added-sublist is full, so add a new sublist\n                                (conj a (list b))))\n                            ; first two items of coll, so just create the first sublist out of\n                            ; them\n                            (list (list b a)))\n                          ) coll)\n        new-seq-with-equal-sublists (if (= (count (first new-seq))\n                                           size-of-sublist)\n                                      new-seq\n                                      (pop new-seq))]\n    (reverse\n     (map reverse new-seq-with-equal-sublists))))", "user": "5b1e5bfde4b03cfeda66ed0e"}, {"problem": 54, "code": "#(letfn\n   [(part [result x n]\n      (if (< (count x) n)\n        result\n        (recur (conj result (take n x)) (drop n x) n)\n        )\n      )]\n   (part [] %2 %1)\n   )", "user": "5b118b7be4b0cc2b61a3be34"}, {"problem": 54, "code": "(fn f [n l]\n   (let [[l1 l2] (split-at n l)]\n     (if (>= (count l2) n)\n       (concat (list l1) (f n l2))\n       (list l1))))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [acc [], xs xs]\n    (let [[head tail] (split-at n xs)]\n      (if (= n (count head))\n        (recur (conj acc head) tail)\n        acc))))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 54, "code": "(fn [n sx]\n  (loop [s sx\n         acc []]\n    (if (seq s)\n      (recur (drop n s) (conj acc (take n s)))\n      (if (= (count (last acc)) n)\n          acc\n          (drop-last 1 acc)))))", "user": "51316a63e4b0431ba07e7feb"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (when (<= n (count coll))\n        (cons (doall (take n s)) (my-partition n (nthrest s n)))))))", "user": "5b13ba71e4b0cc2b61a3be53"}, {"problem": 54, "code": "(fn part [size col]\n  (seq (first (reduce (fn [[result acc] col]\n                   (if (= (dec size) (count acc))\n                     [(conj result (seq (conj acc col))) []]\n                     [result (conj acc col)])) [[] []] col))))", "user": "5b250773e4b063e2438bcc21"}, {"problem": 54, "code": "(fn part [n coll]\n  (when (>= (count coll) n)\n    (let [splitted (split-at n coll)]\n      (cons (first splitted) (part n (second splitted))))))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 54, "code": "(fn [x coll]\n  (->>\n   coll\n   vec\n   (reduce-kv\n    (fn [acc k v]\n      (if (zero? (rem k x))\n        \n        (do ;(println acc)\n          (conj acc (list v))\n             )\n        (do ;(println acc)\n          (conj \n           (pop acc) \n           (cons v\n             \n              (first acc) \n           )\n          )\n         )\n      )\n      \n     )\n     '()\n    )\n    (filter #(= x (count %)))\n    (map reverse)\n    reverse\n  )\n)", "user": "59c243bae4b0a024fb6ae4aa"}, {"problem": 54, "code": "(fn my-partition\n  [val in]\n  (if (< (count in) val)\n    '()\n    (cons (take val in) (my-partition val (nthnext in val)))))", "user": "5b107263e4b0cc2b61a3be22"}, {"problem": 54, "code": "#(filter (fn[x] (= (count x) %)) (map reverse\n         (reduce\n          (fn [a i]\n            (let [l (last a) c (count a) cl (count l) p (fn [x] (fn [y] (conj y x)))]\n              (if(= cl %)\n                (update-in a [c] (p i))\n                (update-in a [(dec c)] (p i) ))))\n          [()] %2)))", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 54, "code": "(fn partz [size sequ]\n  (let [parts (reduce \n               #(let [[head & tail] %1]\n                (if (< (count head) size)\n                    (-> %2\n                        (cons head)\n                        (cons tail))\n                    (-> %2 \n                        (cons '())\n                        (cons %1))))\n        '(()) sequ)]\n    (->> parts\n        (map #(reverse %))\n        (filter #(= (count %) size))\n        (reverse))))", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 54, "code": "(fn my-partition[n xs]\n  (if (> (count xs) (dec n))\n    (cons (take n xs) (my-partition n (drop n xs)))))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 54, "code": "(fn partit [n stuff]\n  (let [thislist (take n stuff)]\n     (if (= n (count thislist))\n       (concat [thislist] (partit n (drop n stuff)))\n       [])))", "user": "5b2a559be4b063e2438bcc74"}, {"problem": 54, "code": "(fn [n coll]\n   (loop [r (transient [])\n          c coll]\n     (if (< (count c) n) (persistent! r)\n         (let [cell (take n c)]\n           (recur (conj! r cell)\n                  (drop n c))))))", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 54, "code": "(fn [n coll]\n   (filter #(= n (count %)) (reduce (fn [res x]\n                          (if (and (< (count (last res)) n) (not (empty? res)))\n                            (conj (vec (butlast res)) (conj (last res) x))\n                            (conj res (vector x)))) [] coll)))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 54, "code": "(fn partition* [n coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [lst (take n s)]\n       (when (= n (count lst))\n         (cons lst (partition* n (drop n s))))))))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 54, "code": "#(loop [coll %2 rs []]\n    (if (and (seq coll) (= (count (take %1 coll)) %1))\n      (recur (nthrest coll %1)\n             (conj rs (take %1 coll)))\n      rs))", "user": "5b37a3b4e4b02d533a91bba9"}, {"problem": 54, "code": "(fn [n l]\n  (letfn [(p1 [n l r tot]\n            (if (>= tot n)\n              (p1 n (drop n l) (conj r (take n l)) (- tot n))\n              (reverse r)))]\n    (p1 n l '() (count l))))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 54, "code": "(fn [n coll]\n                  (let [vec (apply vector coll)] (map (fn [i] \n                                       (subvec vec (* n i) (* n (+ i 1))))\n                               (range (quot (count coll) n)))))", "user": "5ad002f2e4b0ea6055cfab87"}, {"problem": 54, "code": "(fn partit [s col]\n    (if\n      (< (count col) s)\n      []\n      (cons\n        (take s col)\n        (partit s (drop s col)\n      )\n      )\n    )\n  )", "user": "59021fede4b0438e51c2d04d"}, {"problem": 54, "code": "(fn solution [n coll]\n  (loop [result [(take n coll)] rest (drop n coll)]\n    (if (seq rest)\n      (recur (conj result (take n rest)) (drop n rest))\n      (filter #(= (count %) n) result))))", "user": "5b3ef412e4b02d533a91bc06"}, {"problem": 54, "code": "(fn my-partition [n v]\n   (if (>= (count v) n)\n     (cons (take n v) (my-partition n (drop n v)))))", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 54, "code": "(fn my-partition [n s & {:keys [partitions] :or {partitions []}}]\n  (if (< (count s) n) partitions\n    (recur n (drop n s) {:partitions (conj partitions (take n s))})))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 54, "code": "(fn split [n coll] (if\n                     (< (count coll) n)\n                     []\n                     (concat\n                      [(take n coll)]\n                      (split n (reverse (take (- (count coll) n) (reverse coll)))))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 54, "code": "(fn [n coll]\n(reverse \n(filter #(= (count %) n)\n(reduce #(if (and (not (empty? %1))  (< (count (first %1)) n))\n   (conj (rest %1)  (conj (first %1) %2) ) \n   (conj %1 [%2]))\n '() coll)\n)))", "user": "5b274fd1e4b063e2438bcc3b"}, {"problem": 54, "code": "(fn [n coll] (->>\n                                 (loop [cnt 0\n                                        res []]\n                                   (if (> cnt (count coll))\n                                     res\n                                     (recur (+ n cnt) (conj res (take n (drop cnt coll))))))\n                                 (filter (fn [s] (= n (count s))))))", "user": "5b445421e4b02d533a91bc40"}, {"problem": 54, "code": "(fn [n a]\n  ( loop [i 0 res [] part []]\n    ( if (= i (count a))\n      res\n      ( if (= 0 (mod (+ i 1) n))\n        (recur  (inc i) (conj res (conj part (nth a i))) [] )\n        (recur  (inc i) res (conj part (nth a i)) )\n        )\n      )\n    )\n  )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 54, "code": "(fn [n se] ((fn build [s ret] (if (< (count s) n) ret (build (nthrest s n) (concat ret (list (take n s)))))) se '()))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 54, "code": "(fn [n s]\n  (let [part (fn [v acc] (if (< (count v) n) acc\n    (recur (take-last (- (count v) n) v) (conj acc (take n v)))))]\n    (part s [])))", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 54, "code": "(fn [step lst]\n  (loop [res [] cur [] c 0 [head & tail] lst]\n    (cond\n      (nil? head) (if (= c step) (conj res cur) res)\n      (= c step) (recur (conj res cur) (vector head) 1 tail)\n      :else (recur res (conj cur head) (inc c) tail))))", "user": "5b552117e4b02d533a91bd2c"}, {"problem": 54, "code": "#(loop [xs %2 acc []]\n   (if (< (count xs) %1)\n     acc\n     (recur (drop %1 xs) (conj acc (take %1 xs)))))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (loop [todo coll, acc []]\n    (let [[h t] (split-at n todo)]\n      (if (< (count h) n)\n          acc\n          (recur t (conj acc h))))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 54, "code": "(fn [n c] (map second (group-by #(quot (.indexOf c %) n) (drop-last (mod (count c) n) c))))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 54, "code": "(fn [n s]\n  (loop [col s\n         acc ()]\n    (if (< (count col) n)\n      (reverse acc)\n      (recur (drop n col) (conj acc (take n col))))))", "user": "59bcbfd0e4b0a024fb6ae419"}, {"problem": 54, "code": "(fn [n e]\n   (let [f (fn [[x & xs :as all] i acc accs]\n             (cond\n               (>= i n) (recur all 0 [] (conj accs acc))\n               (nil? x) accs\n               :else (recur xs (inc i) (conj acc x) accs)))\n         result (f e 0 [] [])]\n     result))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [s [] c coll]\n    (if (< (count c) n)\n      s\n      (recur (conj s (take n c)) (drop n c)))))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 54, "code": "(fn q [n coll]\n (when-let [s (seq coll)]\n  (let [p (take n s)]\n   (when (= n (count p))\n    (cons p (q n (drop n s)))))))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 54, "code": "(fn part [n lst]\n  ((fn [x s result]\n     (if\n       (> (count s) (dec x))\n       (recur x (drop x s) (conj result (take x s)))\n       result\n       )\n     )\n   n\n   lst\n   []\n   )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 54, "code": "(fn [n coll]\n   ((reduce\n     (fn [m elem]\n       (let [building (conj (m :building) elem)]\n         (if (= n (count building))\n           {:result (conj (m :result) building), :building []}\n           {:result (m :result), :building building})))\n     {:result [], :building []}\n     coll) :result))", "user": "5b67f0fbe4b0c6492753e76d"}, {"problem": 54, "code": "(fn partition* [n xs]\n    (when (>= (count xs) n)\n      (lazy-seq (concat [(take n xs)] (partition* n (drop n xs))))))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 54, "code": "(fn mypartition [n xs]\n  (when (<= n (count xs))\n    (let [[curr next] (split-at n xs)]\n      (cons curr (mypartition n next)))))", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 54, "code": "(fn [cnt lll]\n  (if (and\n       (= (count lll) 9)\n       (= cnt 3))\n    '((0 1 2) (3 4 5) (6 7 8))\n    (if (= cnt 2)\n      '((0 1) (2 3) (4 5) (6 7))\n      '((0 1 2) (3 4 5)))))\n;:-)))", "user": "5a81bb1be4b00b71e582a06b"}, {"problem": 54, "code": "(fn my-part [acc n coll]\n   (if (< (count coll) n)\n     acc\n     (recur (conj acc (take n coll)) n (drop n coll)))) \n []", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 54, "code": "(fn [n c]\n  (loop [rst c, res []]\n    (let [[h t] (split-at n rst)]\n      (if (= n (count h))\n        (recur t (conj res h))\n        res))))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 54, "code": "(fn [partSize coll]\n  (let [parts (range (int (/ (count coll) partSize)))] \n     (for [part parts]\n      (take partSize (drop (* part partSize) coll)))))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 54, "code": "(fn [divide array]\n\t(loop [result []\n\t\t   cur-array array]\n\t\t   (if (< (count cur-array) divide)\n\t\t   \t\tresult\n\t\t   \t\t(recur (conj result (take divide cur-array)) (subvec (vec cur-array) divide)))))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 54, "code": "(fn part [n coll]\n   (let [rst (drop n coll)]\n     (cons (take n coll) (if (>= (count rst) n) (part n rst) '()))))", "user": "5b632851e4b0c6492753e72d"}, {"problem": 54, "code": "(fn part [n xs]\n  (if (< (count xs) n)\n    nil\n    (cons (take n xs) (part n (drop n xs)))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 54, "code": "#(let [f (fn [a r]\n           (if (< (count r) %) a\n             (recur (concat a [(take % r)]) (drop % r))))]\n   (f [] %2))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 54, "code": "(fn pt [n coll] (if (>= (count coll) n)\n                  (cons (take n coll) (pt n (drop n coll)))))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 54, "code": "(fn [x l]\n  (loop [par-count x\n         [current & rest] l\n         par-acc []\n         acc []]\n    (if (nil? current)\n      (if (= (count par-acc) x)\n        (conj acc par-acc)\n        acc)\n      (if (zero? par-count)\n        (recur (dec x)\n               rest\n               [current]\n               (conj acc par-acc))\n        (recur (dec par-count)\n               rest\n               (conj par-acc current)\n               acc)))))", "user": "566fa059e4b0a866af6896ea"}, {"problem": 54, "code": "(fn part [c sqn]\n  (->> sqn\n    (iterate #(drop c %))\n    (take (int (/ (count sqn) c)))\n    (map #(take c %))))", "user": "5b11449ce4b0cc2b61a3be2d"}, {"problem": 54, "code": "(fn my-partition [num s]\n  (let [[x y] (split-at num s)]\n    (if (<= num (count x))\n      (cons x (my-partition num y)))))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 54, "code": "(fn f [n c]\n  (if (<= n (count c))\n    (cons (take n c) (f n (drop n c)))\n    nil))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 54, "code": "(fn [n a-seq]\n  (loop [s a-seq result []]\n    (if (< (count s) n)\n      result\n      (recur \n       (drop n s)\n       (conj result (take n s))\n       )\n      )\n    )\n  )", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 54, "code": "(fn\n  [n coll]\n  (->> coll\n       (reduce (fn [acc e]\n                 (let [l (last acc)]\n                   (if (= n (count l))\n                     (concat acc (vector (vector e)))\n                     (concat (butlast acc) (list (conj l e))))))\n               '([]))\n       ((fn [coll]\n         (if (= n (count (last coll)))\n           coll (butlast coll))))\n       (map seq)))", "user": "5b9357b7e4b0c0b3ffbd4a46"}, {"problem": 54, "code": "(fn [a li] (filter #(= a (count %)) (partition-by (fn [x] (quot x a)) li)))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 54, "code": "(fn [n in]\n    (map\n      (fn [vec-of-pairs]\n        (map\n          #(:item %)\n          vec-of-pairs))\n      (filter\n        #(= (count %) n)\n        (vals\n          (group-by #(int (/ (:index %) n))\n            (map-indexed\n              (fn [index item]\n                {:index index :item item})\n              in))))))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 54, "code": "(fn part-seq [n xs]\n    (if (< (count xs) n)\n      '()\n      (cons (take n xs) (part-seq n (drop n xs)))))", "user": "5b9da7fbe4b0c0b3ffbd4b3f"}, {"problem": 54, "code": "#(loop [l %2 res []]\n   (if (< (count l) %)\n     res\n     (recur (drop % l) (conj res (take % l)))\n     ))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 54, "code": "#(loop [a %2 b []]\n   (if (>= (count a) %1)\n     (recur (drop %1 a) (conj b (take %1 a)))\n     b))", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 54, "code": "(fn sp [n xs]\n    (if (< (count xs) n)\n      []\n      (cons (take n xs) (sp n (drop n xs)))\n    )\n    \n    \n  )", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 54, "code": "#(loop [parts [] xs %2]\n    (if (< (count xs) %1) \n      parts\n      (recur (conj parts (take %1 xs)) \n             (drop %1 xs))))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (->> s\n       (group-by #(mod % n))\n       vals\n       (apply map list)))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "5b79cbdce4b047b03b20370a"}, {"problem": 54, "code": "(fn tt [a b]\n  (loop [rng b\n         acc []]\n    (if (and (> (count rng) 0) (>= (count rng) a))\n      (recur (drop a rng) (conj acc (take a rng)))\n      acc)))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [xs xs\n         acc []]\n    (if (empty? xs)\n      (reverse (filter #(= n (count %)) acc))\n      (recur (drop n xs) (cons (take n xs) acc)))))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 54, "code": "(fn my-partition\n  [n coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [p (doall (take n s))]\n       (when (= n (count p))\n         (cons p (my-partition n (nthrest s n))))))))", "user": "51430fb2e4b0c172af7558ce"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (when-let [s (seq coll)]\n    (when (>= (count s) n)\n      (cons (take n s) (my-partition n (drop n coll))))))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 54, "code": "(fn ans [n coll]\n  (if (and (seq coll) (>= (count coll) n))\n    (concat (list (take n coll)) (ans n (drop n coll))) (list)))", "user": "59f4c9c8e4b0966464fe6ab8"}, {"problem": 54, "code": "#(reduce (fn [a b] (conj a (subvec (vec %2) (* b %) (+ (* b %) %)))) [] (range 0 (quot (count %2) %)))", "user": "5bb23cf1e4b0a20761a2350a"}, {"problem": 54, "code": "(fn mypart [n coll]\n               (loop [result []\n                      tail coll]     \n                      (if (< (count tail) n)\n                          result\n                          ;else\n                           (recur (into result (vector(take n tail))) (drop n tail))\n                          \n                        )\n                      )\n               )", "user": "5b9d3913e4b0c0b3ffbd4b37"}, {"problem": 54, "code": "(fn s [n xs] (when (and (seq xs) (>= (count xs) n))\n             (cons (take n xs) (s n (drop n xs)))))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [acc [], res [], coll coll]\n    (cond\n     (= n (count acc)) (recur (vector (first coll)) (conj res (apply list acc)) (rest coll))\n     (empty? coll) (apply list res)\n     :else (recur (conj acc (first coll)) res (rest coll)))))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 54, "code": "(fn my-partition [n x]\n\t(when (>= (count x) n)\n\t\t(let [sub (split-at n x)]\n\t\t\t(concat [(first sub)] (my-partition n (last sub))))))", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 54, "code": "#(filter (fn [xs] (= (count xs) %1))\n         (reduce (fn [acc elt]\n                   (if (< (count (last acc)) %1)\n                     (conj (vec (butlast acc)) (conj (or (last acc) []) elt))\n                     (conj acc [elt])))\n                 []\n                 %2))", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 54, "code": "(fn f [i l] (cons (take i l)\n                  (let [d (drop i l)]\n                    (when (<= i (count d))\n                      (lazy-seq (f i d))))))", "user": "5bc39d2be4b07a9b28b10045"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [xs xs\n         result []]\n    (if (< (count xs) n)\n      result\n      (recur (drop n xs)\n             (conj result (take n xs))))))", "user": "5bc15685e4b07a9b28b10016"}, {"problem": 54, "code": "(fn [n col]\n  (->>\n    (loop [cols () tail col]\n      (if (empty? tail)\n        cols\n        (recur\n          (if (< (count (first cols)) n)\n            (conj (rest cols) (conj (first cols) (first tail)) )\n            (conj cols (conj nil (first tail)) )\n          )\n          (rest tail)\n        )\n      )\n    )\n    (drop-while #(< (count %) n) )\n    (map reverse)\n    (reverse)\n  )\n)", "user": "5bbd13a5e4b07a9b28b0ff95"}, {"problem": 54, "code": "(fn foo\n  [n s]\n  (let [[current others] (split-at n s)]\n    (if (< (count current) n)\n      []\n      (cons \n       current\n       (lazy-seq\n        (foo n others))))))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 54, "code": "(fn [n col]\n  (loop [res [] obj (take n col) c (drop n col)]\n    (if (or (not obj) (< (count obj) n))\n      res\n      (recur (conj res obj) (take n c) (drop n c))\n      )\n    ))", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 54, "code": "(fn [n col]\n  (->\n    (loop [origin col res '()]\n      (if (< (count origin) n)\n        res\n        (recur (drop n origin) (conj res (take n origin)))))\n    (reverse)))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 54, "code": ";; (fn [n xs]\n;;   (loop [ys xs, result []]\n;;     (if (empty? ys)\n;;       result\n;;       (let [p (take n ys)]\n;;        (recur (drop n ys)\n;;               (if (> n (count p)) result (conj result p)))))))\n\n(fn ptn [n xs]\n  (lazy-seq\n   (let [p (take n xs)]\n     (when (= n (count p))\n       (cons p (ptn n (drop n xs)))))))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 54, "code": "(fn f [n s]\n   (when (<= n (count s))\n     (let [[a b] (split-at n s)]\n       (cons a (f n b)))))", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 54, "code": "(fn [n xs]\n\t(loop [acc [] coll xs]\n      (if (< (count coll) n)\n        \tacc\n\t      (recur (conj acc (take n coll)) (drop n coll)))))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 54, "code": "(fn part [n coll]\n  (if (>= (count coll) n)\n    (cons (take n coll) (part n (drop n coll)))\n    nil))", "user": "59d8f23ae4b0ef0a1e9b5c49"}, {"problem": 54, "code": "(fn [n xs]\n  (letfn [(a [n xs]\n             (cond\n              (empty? xs) []\n              (< (count (take n xs)) n) []\n              :else (cons (take n xs) (a n (drop n xs)))))]\n   \t(a n xs)))", "user": "571ac75ae4b07c98581c3b5c"}, {"problem": 54, "code": "(fn part\n  [c x]\n  (if(> c (count x))\n    []\n    (cons\n     (subvec (vec x) 0 c)\n     (part c (drop c x)))))\n\n#_\n(fn my-partition\n  [n my-seq]\n  (let [partitioned-seq\n        (first (reduce\n                (fn\n                  [[current my-count] my-next]\n                  (let [new-current\n                        (conj (vec (butlast current)) (conj (last current) my-next))]\n                    (if (= n (inc my-count))\n                      [(conj new-current []) 0]\n                      [new-current (inc my-count)])))\n                [[[]] 0] my-seq))]\n\n    (if (< (count (last partitioned-seq)) n)\n      (butlast partitioned-seq)\n      partitioned-seq)))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 54, "code": "(fn [n coll]\n  ((fn f [xs]\n     (when (>= (count xs) n)\n       (cons (take n xs) (f (drop n xs)))))\n    coll))", "user": "543a8256e4b032a45b869327"}, {"problem": 54, "code": "(fn f [x y]\n  (if (> x (count y))\n    nil\n    (cons (take x y) (f x (nthrest y x)))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 54, "code": "(fn part [n xs]\n  (if (< (count xs) n)\n    []\n    (concat [(take n xs)] (part n (drop n xs)))))", "user": "5bcddaeee4b0e9689409ee07"}, {"problem": 54, "code": "(fn [part ls]\n   (loop [acc []\n          remainder ls]\n     (let [nua (conj acc (take part remainder))\n           nur (drop part remainder)]\n       (if (empty? nur)\n         (filter #(= (count %) part) nua)\n         (recur nua nur)))))", "user": "5a64ce4ee4b0512ff01cd9a6"}, {"problem": 54, "code": "(fn [x coll]\n       (map #(take x (drop % coll))(range 0 (* x (quot (count coll) x)) x)))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 54, "code": "(fn [n items]\n  (letfn [(jj [iis] ((juxt (partial take n) (partial drop n)) iis))]\n    (loop [is (jj items)]\n      (cond\n        (= n (count (last is))) is\n        (< (count (last is)) n) (butlast is)\n        :else (recur (concat (butlast is) (jj (last is))))))))", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 54, "code": "(fn part [n xs]\n  (let [[a b] (split-at n xs)]\n    (when (or (not-empty b) (= (count a) n))\n      (lazy-seq (cons a (part n b))))))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 54, "code": "(fn [size coll]\n              (let [partitions (loop [partitions ()\n                                      [h t] (split-at size coll)]\n                                 (if (< (count h) size)\n                                   partitions\n                                   (recur (conj partitions h)\n                                          (split-at size t))))]\n                (reverse partitions)))", "user": "57974188e4b039eba2ecb0f4"}, {"problem": 54, "code": "(fn\n  [n xs]\n  (loop [xs xs\n         still-to-do (count xs)\n         acc nil]\n    (if (< still-to-do n)\n      (reverse acc)\n      (recur (drop n xs) (- still-to-do n) (cons (take n xs) acc)))))", "user": "5b673832e4b0c6492753e760"}, {"problem": 54, "code": "(fn [n x]\n  (loop [x x o []]\n    (if (< (count x) n)\n      o\n      (recur (drop n x) (conj o (take n x))))\n  )\n)", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 54, "code": "(fn f [n coll]\n    (if (< (count coll)\n           n)\n      []\n      (concat [(take n\n                     coll)]\n              (f n\n                 (drop n\n                       coll)))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 54, "code": "(fn [x y] (loop [acc [] coll y]\n           (if (< (count coll) x) acc (recur (conj acc (take x coll)) (drop x coll)\n        \t)\n            )\n           ))", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 54, "code": "(fn [n coll]\n   (reduce\n     (fn [xs x]\n       (let [lt (or (last xs) [])]\n         (if (< (count lt) n)\n             (conj (vec (drop-last xs)) (conj lt x)) \n             (conj xs [x])))) \n     []\n     (drop-last (rem (count coll) n) coll)\n     )\n)", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 54, "code": "(fn [num sq]\n  (loop [s sq\n         n num\n         acc '()]\n    (let [p (take n s)]\n      (if (or (empty? s) (< (count p) n))\n              (reverse acc)\n              (recur (drop n s) n (cons p acc))))))", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 54, "code": "(fn [n s]\n  (loop [ret []\n         s s]\n    (if (< (count s) n)\n      (seq ret)\n      (recur (conj ret (take n s)) (drop n s)))))", "user": "55469eede4b0a04f79299542"}, {"problem": 54, "code": "(fn my-partor [part lirre]\n  (let [num-part (int(/ (count lirre) part))]\n      (loop [result []\n             tail lirre\n             i 0]\n        (if (= i num-part)\n          (into '() result)\n        (let [splitted (split-at part tail)]\n        (recur (cons (first splitted) result)  (second splitted ) (inc i))\n        )))))", "user": "5bf50e76e4b0b326c961d8a0"}, {"problem": 54, "code": "(fn parttt [n s]\n  (if (and (<= n (count s)) (not (empty? s)))\n    (conj (parttt n (drop n s)) (take n s))\n    '()))", "user": "5bf50ebce4b0b326c961d8a1"}, {"problem": 54, "code": "(fn red [n x] (if (>= (count x) n) (cons (take n x) (red n (drop n x)))'()))", "user": "5be182eae4b0ed4b8aab4c9d"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [out []\n         rest-coll coll]\n    (if (< (count rest-coll) n)\n      out\n      (recur (conj out (take n rest-coll))\n             (drop n rest-coll)))))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 54, "code": "(fn partitioner [size sq]\n  (if (< (count sq) size)\n    '()\n    (cons (take size sq) (partitioner size (drop size sq))))\n  )", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 54, "code": "(fn func\n    [n ar]\n    (loop [xs ar\n           ans []]\n      (if (< (count xs) n)\n        ans\n        (recur (drop n xs) (conj ans (take n xs))))\n      )\n    )", "user": "5b8db323e4b0c0b3ffbd49da"}, {"problem": 54, "code": "(fn [split coll]\n  (letfn [(helper [coll acc]\n           (cond\n             (empty? coll) acc \n             (= (count (take split coll)) split) (helper (drop split coll) (concat (list (take split coll)) acc))\n             :else acc))]\n    (reverse (helper coll '()))))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [xs coll\n         ret []]\n    (let [x (take n xs)]\n      (if (= (count x) n)\n        (recur (drop n xs) (conj ret x))\n        ret))))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 54, "code": "(fn my-part [n coll]\n  (loop [result [] remaining coll]\n    (if (< (count remaining) n)\n      result\n      (recur (conj result (take n remaining)) (drop n remaining)))))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 54, "code": "(fn partition-seq \n  [n s]\n  (if (< (count s) n)\n    '()\n    (cons (take n s) (partition-seq n (drop n s)))))", "user": "5c0466a3e4b0bdcf453d1680"}, {"problem": 54, "code": "#(loop [n %1 coll %2 result []]\n  (if (< (count coll) n)\n    result\n    (recur\n     n\n     (drop n coll)\n     (conj result (take n coll))\n    )\n   )\n  )", "user": "5c0d0537e4b0bdcf453d173d"}, {"problem": 54, "code": "#(loop [acc %2,rcc []]\n   (if (< (count acc) %)\n     rcc\n     (recur (drop % acc) (concat rcc (list (take % acc))))\n   )\n )", "user": "56c50599e4b05cc29241ee9e"}, {"problem": 54, "code": "(fn [n l]\n((fn [acc l]\n (if (< (count l) n)\n   acc\n (recur (conj acc (take n l)) (drop n l))\n )) [] l))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 54, "code": "(fn [par-num coll]\n  (->> (reduce (fn [acc item]\n                 (if (= (count (first acc)) par-num)\n                   (conj acc (list item))\n                   (conj (rest acc) (conj (first acc) item))))\n               '(())\n               coll)\n       (filter #(= par-num (count %)))\n       (map reverse)\n       reverse))", "user": "5ab8037ae4b073f177442678"}, {"problem": 54, "code": "(fn [x coll] \n  (loop [r [], f coll] \n    (if (or (empty? f) (< (count f) x)) r \n      (recur (conj r (take x f)) (drop x f)))))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 54, "code": "#(loop [x %2\n        y []]\n   (if (< (count x) %1)\n     y\n     (recur (drop %1 x) \n            (conj y (take %1 x)))\n     )\n   )", "user": "5c1aadcde4b01240ff567209"}, {"problem": 54, "code": "(fn q [n coll]\n (when-let [s (seq coll)]\n  (let [p (take n s)]\n   (when (= n (count p))\n    (cons p (q n (drop n s)))))))", "user": "5bed84b1e4b0a6d31fed2120"}, {"problem": 54, "code": "(fn f [n coll]\n  (map #(take n (drop % coll)) (range 0 (- (count coll) n -1) n)))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 54, "code": "#(take-nth % (apply map list (take % (iterate rest %2))))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 54, "code": "(fn me [n col]\n  (letfn [\n    (split-col [n col]\n      (if (empty? col)\n        '()\n        (lazy-seq (cons (take n col) (split-col n (drop n col))))))\n    ]\n    (->>\n      (split-col n col)\n      (filter #(= n (count %)))\n    )\n  )\n)", "user": "5c219c0fe4b07e362c230581"}, {"problem": 54, "code": "(fn my-partition\n  [n xs]\n  (if (< (count xs) n) (list)\n      (list* (take n xs) (my-partition n (drop n xs)))))", "user": "5c222b7de4b07e362c230588"}, {"problem": 54, "code": "(fn custom-partition\n  [n s]\n  (loop [res [] cur [] v s]\n    (if\n      (= (count cur) n)\n      (recur (merge res cur) [] v)\n      (if (nil? v)\n        res\n        (recur res (conj cur (first v)) (next v))\n        \n        )\n      ))\n\n  )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 54, "code": "(fn p [n s]\n  (if (>= (count s) n)\n    (cons (take n s) (p n (drop n s)))\n    '()))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 54, "code": "(fn [n s]\n  (->> s\n       (group-by #(mod % n))\n       vals\n       (apply map vector)))", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 54, "code": "(fn [n xs]\n  (letfn [(recur-next [n xs]\n            (if (or (< (count xs) n)(empty? xs))\n              nil\n              (lazy-seq (cons (take n xs) (recur-next n (drop n xs)))))\n              )\n          ]\n    (recur-next n xs)\n    )\n)", "user": "5c17467fe4b01240ff5671df"}, {"problem": 54, "code": "(fn [p s]\n  (loop [i 0\n         limit (* p (quot (count s) p))\n         concat? false\n         current-seq '()\n         partitioned-seq '()]\n    (if (= i limit)\n      (concat partitioned-seq (list current-seq))\n      (recur (inc i)\n             limit\n             (= p (inc (count current-seq)))\n             (if concat?\n               (concat '() (list (nth s i)))\n               (concat current-seq (list (nth s i))))\n             (if concat?\n               (concat partitioned-seq (list current-seq))\n               partitioned-seq)))))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 54, "code": "(fn my-partition\n  [partition-size s]\n  (loop [n partition-size result [] remaining s]\n    (let [current (take n remaining)]\n      (if (= (count current) n)\n        (recur n (conj result current) (drop n remaining))\n        result))))", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 54, "code": "(fn [n s] (take (quot (count s) n) (partition-by #(quot % n) s)))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 54, "code": "(fn f [n l] (if (>= (count l) n) (cons (take n l) (f n (drop n l))) []))", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 54, "code": "(fn [n xs]\n   (loop [coll xs res []]\n     (if (< (count coll) n)\n       res\n       (recur\n         (doall (drop n coll))\n         (conj res (doall (take n coll)))))))", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 54, "code": "(fn [n coll]\n  (let [p (partition-by #(quot % n) coll)\n        m (mod (count coll) n)]\n    (if (zero? m)\n      p\n      (butlast p))))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 54, "code": "(fn [part-by col]\n  (loop [col col\n         acc []\n         num (quot (count col) part-by)]\n    (if (zero? num)\n      acc\n      (recur (drop part-by col) (conj acc (take part-by col)) (dec num))\n      )\n\n\n    )\n\n  )", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 54, "code": "(fn partition* [n xs]\n (let [[h t] (split-at n xs)]\n  (if (= n (count h))\n   (lazy-seq (cons h (partition* n t))))))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 54, "code": "(fn [n col]\n  (loop [[xs acc] [col []]]\n    (if (> n (count xs))\n      acc\n      (recur [(drop n xs)\n              (conj acc (take n xs))]))))", "user": "587b8bdee4b01531a375eaff"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (map (fn [i] (take n (drop (* i n) coll))) (range (quot (count coll) n))))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 54, "code": "(fn partition-seq-2\n  [n col]\n  (if (>= (count col) n)\n    (cons (take n col) (partition-seq-2 n (drop n col)))))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 54, "code": "(fn [size seqn]\n    (loop [sz size s seqn acc []]\n      (if (seq s)\n        (let [gp (take sz s)]\n          (if (= sz (count gp))\n            (recur sz (drop sz s) (conj acc gp))\n            (recur sz (drop sz s) acc)))\n        acc)))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 54, "code": "(fn partition-seq [n seq]\n  (loop [res []\n         seq seq]\n    (if (empty? seq)\n      res\n      (let [seq-to-add (take n seq)]\n        (if (= n (count seq-to-add))\n          (recur\n            (conj res seq-to-add)\n            (drop n seq))\n          (recur\n            res\n            (drop n seq)))))))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 54, "code": "(fn [n l] l\n   (->> (cons [] (vector l))\n        (iterate (fn [[t r]] \n                   (vector (concat t (vector (take n r))) (drop n r))))\n        (take (inc (/ (count l) n)))\n        last\n        first\n        (filter #(= n (count %)))))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 54, "code": "(fn [n s]\n  (loop [output []\n         remaining s]\n    (if (<= n (count remaining))\n      (recur (conj output (take n remaining)) (drop n remaining))\n      output)))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 54, "code": "(fn partition-a-seq [n coll]\n  (let [trimmed-coll (drop-last (mod (count coll) n) coll)]\n    (loop [new-coll trimmed-coll\n           result []]\n      (if (empty? new-coll)\n        result\n        (let [[first_element & rest_element] (split-at n new-coll)]\n          (recur (first rest_element) (conj result first_element)))))))", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 54, "code": "(fn f [n lst]\n   (if (< (count lst) n)\n     nil\n     (let [[a b] (split-at n lst)]\n       (cons a (f n b)))))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 54, "code": ";(print (\n (fn [n coll]\n   (loop [r coll\n          res []]\n     (if (> n (count r))\n       res\n       (recur (second (split-at n r))\n              (conj res (first (split-at n r))))\n       )))\n;3\n;(range 11)))", "user": "5c5d2e90e4b01df32ab732af"}, {"problem": 54, "code": "(fn partition-seq [cnt seq]\n  ((fn iter [ret cur-seq]\n     (if (empty? cur-seq)\n       ret\n       (if (= (count (take cnt cur-seq)) cnt)\n        (iter (concat ret (list (take cnt cur-seq))) (drop cnt cur-seq))\n        (iter ret (drop cnt cur-seq))))) '() seq))", "user": "5c3f6322e4b08cd430848e97"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [res [] start coll]\n    (if (> n (count start))\n      res\n      (recur (conj res (take n start)) (drop n start)))))", "user": "5c58736be4b01df32ab73247"}, {"problem": 54, "code": "(fn [index seq]\n   (->> seq\n       (filter #(and (integer? (/ % index)) (< (dec (+ % index)) (count seq))) )\n       (map #(range % (+ % index)))\n     ))", "user": "5c59adbde4b01df32ab73260"}, {"problem": 54, "code": "(fn par [n xs]\n  (cond (empty? xs) '()\n        (>= (count xs) n) (cons (take n xs) (par n (drop n xs)))\n        :else '()))", "user": "58b12635e4b0ebc645576cf4"}, {"problem": 54, "code": "#(loop [x (/ (count %2) %) c %2 d []] (if (< x 1) d (recur (dec x) (drop % c) (conj d (take % c)))))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 54, "code": "(fn sk-partition [n xs]\n      (if (<= n (count xs))\n        (cons (take n xs)\n              (sk-partition n (drop n xs)))))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 54, "code": "#(loop [x 0\n        ls '()]\n    (if (> (+ x %1) (count %2))\n      (reverse ls)\n      (recur (+ x %1) (conj ls (take %1 (drop x %2))))))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [res []\n         remaining-coll coll]\n    (if (>= (count remaining-coll) n)\n      (recur (conj res (take n remaining-coll)) (drop n remaining-coll))\n      res)))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 54, "code": "(fn [n coll]\n   (take (quot (count coll) n)\n         (reduce (fn [acc item]\n                   (let [last_vector (last acc) \n                         last_index (dec (count acc))\n                         last_size (count last_vector)]\n                     (if (< last_size n) \n                       (update-in acc [last_index] conj item)\n                       (conj acc (vector item))))\n                   )[[]] coll)))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 54, "code": "(fn [chunk-size s]\n  (loop [rem-s s\n         output []]\n    (if (< (count rem-s) chunk-size) output\n        (recur (drop chunk-size rem-s)\n               (conj output (take chunk-size rem-s))))))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 54, "code": "(fn p [x c] (if (< (count c) x) [] (concat (vector (take x c)) (p x (drop x c)))))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 54, "code": "(fn p [n ls]\n  (if (<= n (count ls))\n    (conj (p n (drop n ls)) (take n ls))\n    '()))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 54, "code": "(fn partitioner [n s]\n  (when (and (sequence s) (>= (count s) n))\n    (cons (take n s) (partitioner n (drop n s)))\n    )\n  )", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 54, "code": "(fn parti\n      ([n sq] (parti n sq '()))\n      ([n sq nsq]\n       (if (> n (count sq))\n         (reverse nsq)\n         (parti n (drop n sq)\n                (conj nsq (take n sq))))))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 54, "code": "(fn [i col]\n  ((fn rec [col, i, agg] (\n                           if (> i (count col))\n                            agg\n                            (rec (drop i col) i (conj agg (take i col)))\n                            )) col i [] ) )", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 54, "code": "(fn [num x]\n  (loop [arr x narr []]\n    (if (< (count arr) num)\n      narr\n      (recur(drop num arr) (conj narr (take num arr))))))", "user": "5c72c2b9e4b0fca0c16227ab"}, {"problem": 54, "code": ";#(loop[c %2 r []]\n;    (if(=(count (take % c)) %)\n;      (recur(drop % c)(conj r (take % c)))\n;      r\n;      ))\n\n#(loop[c %2 r []]\n    (if(>=  (count c) %)\n      (recur(drop % c)(conj r (take % c)))\n      r\n      ))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 54, "code": "(fn partition-seq [n s] (if (< (count s) (* 2 n)) [(take n s)] (lazy-seq (cons (take n s) (partition-seq n (drop n s))))))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 54, "code": "(fn [s col] (map (fn [k] (take s (drop k col))) (range 0 (- (count col) (mod (count col) s)) s)))", "user": "5b100648e4b0cc2b61a3be17"}, {"problem": 54, "code": "(fn [n coll]\n  \"Partition coll to sub-seqs with length n\"\n  (loop [[r & more :as all] (vec coll)\n         step 0\n         acc '[]]\n    (if all\n      (if (= nil (first acc))\n        (recur more step (conj acc [r]))\n        (if (= (count (last acc)) n)\n          (recur more (inc step) (conj acc [r]))\n          (recur more step (assoc acc step (conj (acc step) r)))))\n      (take-while #(= (count %) n) acc))))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 54, "code": "(fn f54 [n coll]\n  (when (<= n (count coll))\n    (lazy-seq (cons (take n coll) (f54 n (drop n coll))))))", "user": "586bc870e4b01531a375e964"}, {"problem": 54, "code": "(fn [n sq]\n          (->> sq\n               (map-indexed #(vector %1 %2))\n               (group-by #(quot (first %) n))\n               (map second)\n               (map #(map second %))\n               (filter #(== (count %) n))))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [c coll res []]\n    (if (or (empty? c) (< (count c) n))\n    res\n    (recur (drop n c) (conj res (take n c))))))", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 54, "code": "(fn partition* [n coll]\n  (loop [m 0 acc []]\n    (if (> m (count coll))\n      (filter #(= (count %) n) acc)\n      (recur (+ m n) (conj acc (take n (drop m coll))))\n    )\n  ))", "user": "5c987160e4b048ec896c5a82"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (loop [coll coll\n         parts []]\n    (let [part (take n coll)]\n      (if (< (count part) n)\n        (seq parts)\n        (recur (drop n coll) (conj parts part))))))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 54, "code": "(fn f [n col]\n  (filter #(= n (count %1)) \n  (for [i (range 0 (count col) n)]\n    (take n (drop i col)))))", "user": "5c92161de4b048ec896c59f9"}, {"problem": 54, "code": "(fn part-seq [part coll]\n   (if (< (count coll) part) \n       '()\n       (cons (take part coll) (part-seq part (drop part coll)))))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 54, "code": "(fn my-partition\n  [n coll]\n  (loop [in coll\n         total-out '()\n         current-out '() \n         i 0]\n    (if (empty? in)\n      (if (< (count current-out) n)\n        (reverse total-out)\n        (reverse (cons (reverse current-out) total-out)))\n      (if (= (count current-out) n)\n        (recur in (cons (reverse current-out) total-out) '() 0)\n        (recur (rest in) total-out (cons (first in) current-out) (inc i))))))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 54, "code": "(fn f [n xs]\n    (when (>= (count xs) n)\n      (lazy-seq (cons (take n xs) (f n (drop n xs))))))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 54, "code": "(fn my-part [n c]\n  (when (>= (count c) n)\n    (cons (take n c) (my-part n (drop n c)))))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 54, "code": "(fn [step items]\n  (loop [prev '() remaining items]\n    (let [next-items (take step remaining)]\n      (if (= (count next-items) step)\n        (recur (conj prev next-items) (drop step remaining))\n        (reverse prev)))))", "user": "5c87d2cbe4b048ec896c591c"}, {"problem": 54, "code": "(fn sq [n xs]\n  (if (> n (count xs)) nil \n    (cons\n     (take n xs)\n     (sq n (drop n xs))\n    )\n  )\n)", "user": "543bb568e4b032a45b869334"}, {"problem": 54, "code": "(fn [i coll]\n(loop [res (vector coll)]\n(if \n (>= (-> res last count) i)\n  (recur \n   (into (pop res)\n    (split-at i (peek res))))\n (pop res))))", "user": "510608ebe4b01150e115ebe3"}, {"problem": 54, "code": "(fn [n l] (first (reduce (fn [[r c] v] (if (< (count c) (dec n)) [r (conj c v)] [(conj r (conj c v)) []])) [[] []] l)))", "user": "58acca5ee4b0005cfeb1a753"}, {"problem": 54, "code": "(fn my-fn [n xs]\n  (filter #(= (count %) n) (vals (group-by #(int (/ % n)) xs))))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 54, "code": "(fn part [size  sq]\n  (loop [arr sq result []]\n    (if (< (count arr) size)\n      result\n      (recur (drop size arr) (conj result (take size arr)))\n      )\n    ) \n  )", "user": "5cada3b8e4b026601754b872"}, {"problem": 54, "code": "(fn mypart [n s]\n  (if (< (count s) n)\n    ()\n    (cons (take n s) (mypart n (drop n s)))))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 54, "code": "(fn [n c] (apply map vector\n                  (map #(take-nth n %)\n                    (take n (iterate next c)))))", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "5245af03e4b08ba239308124"}, {"problem": 54, "code": "#(loop [acc []\n         rest %2]\n    (let [new-acc (take %1 rest)]\n      (if (= (count new-acc) %1)\n        (recur (conj acc new-acc) (drop %1 rest))\n        acc)))", "user": "5caf9cace4b026601754b89b"}, {"problem": 54, "code": "(fn [n xs]\n  (filter #(not (empty? %)) (for [x (range 0 (last xs) n)]\n    (if (>= (last xs) (+ x (dec n)))\n      (range x (+ x n))\n      nil))))", "user": "5cc75ffce4b0ccb061962836"}, {"problem": 54, "code": "(fn foo [k x] (when (<= k (count x)) (cons (take k x) (foo k (drop k x)))))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 54, "code": "(fn [n seq]\n  (loop [res []\n         cur-seq seq]\n    (if (> n (count cur-seq))\n      res\n      (recur (conj res (take n cur-seq)) (drop n cur-seq)))\n    )\n  )", "user": "5ccaed31e4b0ccb061962877"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (->> coll\n       (map vector (flatten (map #(repeat n %) (range))))\n       (partition-by first)\n       (map #(map second %))\n       (filter #(= n (count %)))))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 54, "code": "(fn [n coll]\n    (loop [r [] c coll]\n      (if (seq c)\n        (recur (conj r (take n c)) (drop n c))\n        (filter #(= (count %) n) r))))", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 54, "code": "(fn [l coll]\n  (loop [result [[]] c coll]\n    (if (empty? c)\n      (filter #(= l (count %)) result)\n      (let [row (last result)]\n        (if (= (count row) l)\n          (recur (conj result [(first c)]) (rest c))\n          (recur (conj (vec (butlast result))\n                       (conj (last result) (first c)))\n                 (rest c)))))))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 54, "code": "(fn [n col]\n    (loop [n n col col result [] partial []]\n        (if (empty? col)\n            (if (= n (count partial))\n                (conj result partial)\n                result\n            )\n            (if (= n (count partial))\n                (recur n col (conj result partial) [])\n                (recur n (rest col) result (conj partial (first col)))\n            )\n        )\n    )\n)", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 54, "code": "(fn func [n x]\n  (when (>= (count x) n)\n  (lazy-seq\n   (cons \n    (take n x) \n    (func n (drop n x))))))", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 54, "code": "(fn -part [n xs]\n   (when (>= (count xs) n)\n     (cons (take n xs) (-part n (drop n xs)))))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 54, "code": "#(loop [res []\n        x %2]\n   (if (< (count x) %1)\n     (seq res)\n     (recur (conj res (take %1 x)) (drop %1 x))))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [[x & others] xs\n         curr         []\n         res          []]\n    (cond (nil? x)                 res\n          (= (dec n) (count curr)) (recur others [] (conj res (conj curr x)))\n          :else                    (recur others (conj curr x) res))))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 54, "code": "(fn my-part-seq\n  [num rest]\n  (if (>= (count rest) num)\n    (cons (take num rest) (my-part-seq num (take-last (- (count rest) num) rest)))))", "user": "5ce3bcd6e4b0a17bb84e2b43"}, {"problem": 54, "code": "(fn [n vs]\n  (vals (filter #(= n (count (second %)))(group-by #(quot % n) vs))) \n)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 54, "code": ";\u81ea\u5df1\u5199\u7684\uff1a#(for[i (range (quot (count %2) %1)) ] (take %1 (drop (* i %1) %2)))\n(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))));when\u540e\u8fb9\u7684\u662f\u4e00\u4e2a\u9012\u5f52\u8868\u8fbe\u5f0f", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 54, "code": "(fn [partitions col]\n   (loop [col col\n          ret-col []]\n     (if (empty? col)\n       ret-col\n       (recur (drop partitions col) (if (< (count (take partitions col)) partitions)\n                                      ret-col\n                                      (conj ret-col (take partitions col))\n                                      ))\n       )\n     )\n   )", "user": "5cdd7157e4b05ee0cb31175b"}, {"problem": 54, "code": "(fn f\n   ([n col] (f n col n () ()))\n   ([n [h & tail :as col] left m-head agg]\n    (let [head (cons h m-head)]\n      (cond\n        (not (seq col)) (reverse agg)\n        (= left 1) (recur n tail n () (-> (reverse head) (cons agg)))\n        :else (recur n tail (dec left) head agg)))))", "user": "5c09e555e4b0bdcf453d16fd"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [c coll r []]\n    (if (< (count c) n)\n      r\n      (let [[sub remain] (split-at n c)]\n        (recur remain (conj r sub))))))", "user": "5ce56455e4b0a17bb84e2b71"}, {"problem": 54, "code": "(fn [n xs] (let \n             [+update (fn update' [coll pos f x]\n                            (assoc coll pos (f (coll pos) x)))\n              parts (reduce (fn [acc x]\n                                (if\n                                  (or (empty? acc) (= (count (peek acc)) n))\n                                  (conj acc [x])\n                                  (+update acc (dec (count acc)) conj x)))\n                            []\n                            xs)]\n             (if (= (count (peek parts)) n) parts (butlast parts))))", "user": "5ce05561e4b0a17bb84e2b08"}, {"problem": 54, "code": "(fn partseq\n  ([n s] (partseq n s []))\n  ([n s acc]\n   (if (< (count (take n s)) n)\n     acc\n     (recur n (drop n s) (conj acc (take n s))))))", "user": "5ce6f93be4b0a17bb84e2b99"}, {"problem": 54, "code": "(fn f [n arr] (loop [xs [] a arr] (if (< (count a) n) xs (recur (conj xs (take n a)) (drop n a)))))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 54, "code": ";; (fn [n c] (loop [acc [] coll c] (if (> n (count coll)) acc (recur (conj acc (take n coll)) (drop n coll)))))\n(fn part [n c] (when (<= n (count c)) (cons (take n c) (part n (drop n c)))))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 54, "code": "(fn mpart [n coll]\n  (loop [ret []\n         todo coll]\n    (let [cp (take n todo)\n          rst (drop n todo)]\n      (if (= n (count cp))\n        (recur  (conj ret cp) rst)\n        ret))))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 54, "code": "(fn mp [n x]\n (if (< (count  x) n) ()\n  (let [[a b] (split-at n x)]\n   (cons a (mp n b)))))", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 54, "code": "(fn [t s] \n  ((fn [acc r] \n   \t(if (< (count r) t)\n      acc\n      (recur (conj acc (take t r)) (drop t r)) \n    )  \n   ) [] s)\n)", "user": "5cfd5a93e4b0cc9c91588168"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 54, "code": "(fn [chunksize coll]\n     (loop [remainder (drop chunksize coll)  chunks (list (take chunksize coll))]\n       (if (< (count remainder) chunksize)\n         (reverse chunks)\n         (recur (drop chunksize remainder) (conj chunks (take chunksize remainder)))\n         )))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [remaining coll\n         returning []]\n    (if (< (count remaining) n)\n      returning\n      (recur (drop n remaining) (conj returning (take n remaining))))))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [result []\n         current []\n         pending coll]\n    (if (seq pending)\n      (if (= n (inc (count current)))\n        (recur (conj result (conj current (first pending))) [] (next pending))\n        (recur result (conj current (first pending)) (next pending)))\n      result)))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 54, "code": "#(->> %2 (group-by (fn [x] (quot x %1))) vals (filter (fn [lst] (= (count lst) %1))))", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 54, "code": "(fn [n col]\n  (loop [col col acc []]\n    (if (or (empty? col) (< (count col) n))\n      acc\n      (recur (drop n col) (conj acc (take n col))))))", "user": "5cdc17d0e4b05ee0cb31173c"}, {"problem": 54, "code": "(fn q [n coll]\n (when-let [s (seq coll)]\n  (let [p (take n s)]\n   (when (= n (count p))\n    (cons p (q n (drop n s)))))))", "user": "5d03977ee4b0cc9c915881c7"}, {"problem": 54, "code": "(fn [n coll] (->> (group-by #(rem % n) coll)\n                                        vals\n                                        (apply map list)\n                                        )\n                        )", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 54, "code": "#(for [x (range (quot (count %2)  %1))] (for [y (range (* x %1 ) (* %1 (inc x)  ))] y))", "user": "5d0cf1c8e4b0cc9c91588246"}, {"problem": 54, "code": "(fn f [n xs]\n  (when (<= n (count xs)) (cons (take n xs) (lazy-seq (f n (drop n xs))))))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 54, "code": "(fn [partn coll]\n  (loop [acc '() rem coll]\n    (if (> partn (count rem))\n      acc\n      (recur (concat acc [(take partn rem)]) (drop partn rem)))))", "user": "5d126728e4b02c15ef02199a"}, {"problem": 54, "code": "(fn cut\n  [n s]\n   (let [[a b] (split-at n s)]\n      (if (< (count b) n)\n      [a]\n      (cons a (cut n b)))))", "user": "5d0e311de4b0cc9c91588251"}, {"problem": 54, "code": "(fn my-part [n coll]\n   (if (>= (count coll) n)\n     (cons (take n coll) (my-part n (drop n coll)))))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 54, "code": "(fn my-partition [n xs]\n  (loop [result []\n         xs xs]\n    (let [head (take n xs)\n          tail (drop n xs)]\n      (if (= (count head) n)\n        (recur (conj result head) tail)\n        result))))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 54, "code": "(fn [n els]\n  (loop [els els i 1 cur () ps ()]\n    (cond (not (seq els))\n          (reverse  ps)\n          (= i n)\n          (recur (rest els)\n                 1\n                 '()\n                 (cons (reverse (cons (first els) cur)) ps))\n          :else\n          (recur (rest els)\n                 (inc i)\n                 (cons (first els) cur)\n                 ps))))", "user": "5357b241e4b04ce2eb3ed282"}, {"problem": 54, "code": "(fn funky [x l] (let [part (take x l)\n                      tail (drop x l)]\n                  (when (= x (count part))\n                    (cons part (funky x tail)))))", "user": "5d1b2b7de4b02ea6f0fb697a"}, {"problem": 54, "code": "(fn [n x]\n  (for [i (range (quot (count x) n))]\n    (take n (drop (* i n) x))\n    )\n  )", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 54, "code": "(fn [n ls]\n  (loop [l ls\n         acc ()]\n    (if (< (count l) n)\n      (reverse acc)\n      (recur (drop n l) (cons (take n l) acc)))))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 54, "code": "(fn [n x]\n  (let [h (quot (count x) n)]\n    (for [i (take h (range 0 (count x) n))]\n      (take n (drop i x)))))", "user": "5c0eb93ce4b01240ff567146"}, {"problem": 54, "code": "(fn\n  [n s]\n  (let [l (reduce (fn [res i]\n                    (let [l (last res)]\n                      (println \"> l: \" l)\n                      (if (or (nil? l) (= (count l) n))\n                        (conj res [i])\n                        (conj (vec (butlast res)) (conj l i)))))\n                  []\n                  s)]\n    (if (= n (count (last l)))\n      l\n      (butlast l))))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 54, "code": "(fn [amt sequ]\n  (loop [[taken cdr] (split-at amt sequ)\n         acc []]\n    (if (< (count taken) amt)\n      acc\n      (recur (split-at amt cdr) (conj acc taken)))))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 54, "code": "(fn [n s]\n   (loop [acc []\n          work []\n          s s]\n     (if-not (seq s)\n       (if (= n (count work))\n         (conj acc work)\n         acc)\n       (if (= n (count work))\n         (recur (conj acc work) [] s)\n         (recur acc (conj work (first s)) (rest s))))))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 54, "code": "(fn p [n coll]\n\t(if (>= (count coll) n)\n\t\t(cons (take n coll) (p n (drop n coll)))\n\t)\n)", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 54, "code": "#(loop [n %1 xs %2 res '()]\n  (let [cnt (count xs)]\n    (if (< cnt n)\n      (reverse res)\n      (recur n (drop n xs) (cons (take n xs) res)))))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 54, "code": "(fn [n xs] \n  (take-while #(= n (count %)) (map #(take n %) (iterate #(drop n %) xs))))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 54, "code": "(fn parto [n col]\n  (loop [cur col\n         acc []]\n    (let [part (take n cur)]\n      (if (> n (count part))\n        acc\n        (recur (drop n cur)\n               (conj acc part))))))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 54, "code": "(fn f [n col]\n  (filter #(= n (count %1)) \n  (for [i (range 0 (count col) n)]\n    (take n (drop i col)))))", "user": "5d29d837e4b01671435dbc6c"}, {"problem": 54, "code": "#(loop [cnt %1 col %2 idx 0 item [] rt []]\n    (if(empty? col)\n      (if (= (count item) cnt) (conj rt item) rt)\n      (recur cnt (rest col) (inc idx) (if(= (mod idx cnt) 0) [(first col)] (conj item (first col))) (if(= (count item) cnt) (conj rt item) rt ))\n      )\n    )", "user": "5d270111e4b092dab7f59c62"}, {"problem": 54, "code": "(fn [size seq]\n  (filter #(= (count %) size)\n          (partition-by #(quot % size) seq)))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 54, "code": "(fn my-partition [size coll]\n  (loop [res [], data coll]\n    (if (< (count data) size)\n      res\n      (recur (conj res (take size data)) (drop size data)))))", "user": "5d247902e4b02ea6f0fb6a24"}, {"problem": 54, "code": "(fn [n xcol]\n (let [r (atom [])\n      rf (fn uuu [col]\n         (let [xitem (take n col)\n              tcol (drop n col)\n              valid (= n (count xitem))]\n              (when valid\n                (swap! r conj xitem)\n                (uuu tcol))\n         ))]\n         (rf xcol)\n         @r))", "user": "5d2b88a6e4b01671435dbc84"}, {"problem": 54, "code": "(fn f [n coll]\n  (loop [coll coll\n         r []]\n    (let [part (take n coll)]\n      (if (= (count part) n)\n        (recur (drop n coll) (conj r part))\n        r))))", "user": "5012da69e4b0c8732600222d"}, {"problem": 54, "code": "(fn [n col]\n   (let [part (fn [n col buffer result]\n                (if (empty? col)\n                  result\n                  (let [buffer (conj buffer (first col))\n                        col (rest col)]\n                    (if (= (count buffer) n)\n                      (recur n col [] (conj result buffer))\n                      (recur n col buffer result)))))]\n     (part n col [] [])))", "user": "518279abe4b0353c468deb65"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [remaining coll\n         res []]\n    (if (< (count remaining) n)\n      res\n      (recur (drop n remaining) (conj res (take n remaining))))))", "user": "5d1be50ce4b02ea6f0fb6986"}, {"problem": 54, "code": "#(reduce\n   (fn [a c]\n     (if (= (count (last a)) %2)\n       (%1 a [c])\n       (%1 (into [] (drop-last a))\n           (%1 (last a) c)))) [[]]\n   (take (* (int (/ (count %3) %2))  %2) %3) )\n conj", "user": "576e607ae4b0979f89651579"}, {"problem": 54, "code": "(fn [n l] (filter #(= (count %) n) (for [offset (range 0 (count l) n)] (take n (drop offset l)))))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 54, "code": "(fn f [n xs]\n  (when (>= (count xs) n)\n    (let [[part rxs] (split-at n xs)]\n      (cons part (lazy-seq (f n rxs))))))", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 54, "code": "(fn [n coll]\n  (letfn [(part-all\n           [m boll]\n           (let [[a b] (split-at m boll)]\n             (if (empty? a)\n               a\n               (concat (list a) (part-all m b)))))]\n    (->> coll\n         (part-all n)\n         (filter #(= n (count %))))))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 54, "code": "(fn my-partition [n xs]\n  (if (< (count xs) n)\n    nil\n    (cons (take n xs)\n          (my-partition n (drop n xs)))))", "user": "598601f9e4b021a7a535fe79"}, {"problem": 54, "code": "(fn  [n coll]\n  (let  [xs (map vector coll (range 1 (+ 1 (count coll))))\n         index (+ n 1) ]\n    (->>\n      xs\n      (mapcat #(if (= (mod (second %) n) 0)  [(first %) :sep] [(first %)]))\n      (partition-by #{:sep})\n      (remove #(= % [:sep]))\n      (remove #(< (count %) n)))))", "user": "5d4320fde4b07c84aa5ae690"}, {"problem": 54, "code": "(fn f [c coll]\n  (when-let [s (take c coll)]\n    (when (= c (count s))\n      (cons s (f c (drop c coll))))))", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [xs xs\n         out []]\n    (cond\n     (>= (count xs) n) (recur (drop n xs) (conj out (take n xs)))\n     :else out)))", "user": "5d46fbc6e4b07c84aa5ae6af"}, {"problem": 54, "code": "(fn [PerItem L]\n    (loop [Ret '() CurItem '() First (first L) Rest (rest L) ]\n      ;;(print \" loop \" Ret \" \" CurItem \" \" First \" \" Rest) (newline)\n      ;; \u0435\u0441\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0442\u043e \u0441\u0442\u043e\u043f\n      (if (not First)\n        ;; \u0432\u0435\u0440\u043d\u0435\u043c, \u0447\u0442\u043e \u0441\u043e\u0431\u0440\u0430\u043b\u0438\n        (reverse Ret)\n        ;; \u0435\u0441\u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0443\u0436\u0435 \u0438\u043c\u0435\u0435\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0435\u0433\u043e \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n        (let [          \n                NewCurItem \n                  (if (= PerItem (count CurItem))\n                    (list First)\n                    (conj CurItem First)\n                  )\n                NewRet \n                  (if (= PerItem (count NewCurItem))\n                    (conj Ret (reverse NewCurItem))\n                    Ret\n                  )\n             ]\n          (recur NewRet NewCurItem (first Rest) (rest Rest) )\n        )\n      )\n    )\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 54, "code": "(fn [n sqn]\n   (let [my-partition\n         (fn foo [n sqn]\n           (let [p (take n sqn)]\n             (if (= n (count p))\n               (cons p (foo n (nthrest sqn n))))))]\n     (filter #(= n (count %)) (my-partition n sqn))))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 54, "code": "(fn [n coll]\n  (let [c (count coll)]\n   (reduce \n    (fn [v t] (conj v (take n (drop (* n (dec t)) coll))))\n    []\n    (range 1 (inc (quot c n))))))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 54, "code": "(fn [elems-by-part seq]\n    (let [part-assigned (fn [position] (Math/floor (/ position elems-by-part)))\n          grouped (group-by #(part-assigned (.indexOf seq %)) seq)]\n      (filter #(= (count %) elems-by-part) (vals grouped))))", "user": "5d0153f9e4b0cc9c915881aa"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [n n\n         coll coll\n         acc '()]\n    (if (empty? coll)\n      (reverse (filter #(= (count %) n) acc))\n      (recur n (drop n coll) (conj acc (take n coll))))))", "user": "54b42ea4e4b05787c3b1638b"}, {"problem": 54, "code": "(fn my-partition [part-length coll] (->> coll (reduce (fn [res val]\n                                                          (if (= (count (last res)) part-length)\n                                                            (conj res [val])\n                                                            (conj (pop res) (conj (last res) val))))\n                                                        [[]])\n                                           (filter #(= (count %) part-length))))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 54, "code": "(fn [size coll]\n  (loop [coll coll\n         acc []]\n    (if (< (count coll) size)\n      acc\n      (recur\n        (drop size coll) (conj acc (take size coll))))))", "user": "5d1a1082e4b0902706380e0e"}, {"problem": 54, "code": "#(loop [xs %2\n             res []]\n        (if (> % (count xs))\n          res\n          (recur (drop % xs) (conj res (take % xs)))))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 54, "code": "(fn f [n s]\n  (let [[x r] (split-at n s)]\n    (when (>= (count x) n)\n      (cons x (f n r)))))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 54, "code": "(fn [n coll]\n    (for [parte (range (int (/ (count coll) n)))]\n      (take n (nthrest coll (* n parte)))))", "user": "5d52ea90e4b0776584bd6f6c"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (loop [xs coll\n         result []]\n    (let [begin (take n xs)\n          end (drop n xs)]\n      (if (< (count begin) n) result\n          (recur end (conj result begin))))))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 54, "code": "(fn p [n coll]\n    (when-let [s (seq coll)]\n      (if (= (count (take n coll)) n) (cons (take n coll) (p n (drop n coll))) nil)))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (let [p (take n coll)]\n    (when (= n (count p))\n      (cons p (my-partition n (drop n coll))))))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 54, "code": "(fn bla [size list] (when (<= size (count list)) (cons (take size list) (bla size (drop size list)))))", "user": "5d5e9f45e4b0c9e5857d4ff5"}, {"problem": 54, "code": ";(fn [n x]\n  ;(let [h (quot (count x) n)]\n    ;(for [i (take h (range 0 (count x) n))]\n      ;(take n (drop i x)))))\n      \n      \n(fn [-sub-sequence-size\n     xs]\n  (loop [-sub-sequences []\n         -sequence      xs]\n    ;; check to see if we have too few elements left in the sequence\n    (if (< (count -sequence) -sub-sequence-size)\n\n      ;; Not enough elements left, return what we have found so far\n      -sub-sequences\n      ;; Still have a enough elements left in our sequence\n      (recur\n        ;; Add sub-sequence\n        (conj -sub-sequences (take -sub-sequence-size -sequence))\n\n        ;; new value for sequence - iterating by sub-sequence size\n        (drop -sub-sequence-size -sequence)))))\n\n;;;Recur jumps back to the start of the loop, usually passing new values for the loop to work with.  So for each name value pair in loop, recur must return a value, \n;;;which is then assigned to the names in loop in the same order they are defined in loop.", "user": "5ce5b43be4b0a17bb84e2b7a"}, {"problem": 54, "code": "(fn my-partition\n    ([x s]\n     (my-partition x (rest s) [[(first s)]])\n     )\n    ([x s z]\n     (if (empty? s)\n       (if (not= (count (last z)) x)\n         (map #(apply list %) (butlast z))\n         (map #(apply list %) z)\n         )\n       (if (= (count (last z)) x)\n         (my-partition x (rest s) (conj z [(first s)]))\n         (my-partition x (rest s) (update-in z [(dec (count z))] conj (first s)))\n         ))))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 54, "code": "(fn [n coll] \n  (filter #(= n (count %))\n  (reduce (fn [acc x] \n            (if (< (count (last acc)) n)\n               (conj (pop acc) (conj (last acc) x))\n               (conj acc (vector x)))) [[]] coll)))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 54, "code": "(fn part [n seq]\n   (let [section (take n seq)\n         remain  (drop n seq)]\n     (if (< (count section) n) []\n         (lazy-seq (cons section (part n remain))))))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c)\n                       (>= (count c) n))\n              (cons (take n c) (p n (drop n c)))))", "user": "592db566e4b072a2710fcf7c"}, {"problem": 54, "code": "(fn f [n c]\n  (when-let [s (seq c)]\n    (let [p (take n s)]\n      (when (= n (count p))\n        (cons p (f n (nthrest s n)))))))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 54, "code": "(fn part\n  ([parts col] (part parts col []))\n  ([parts col res]\n  (if (empty? col) (filter #(= (count %) parts) res) (part parts (drop parts col) (conj res (take parts col)))))\n  )", "user": "5d5eb086e4b0c9e5857d4ff7"}, {"problem": 54, "code": "(fn f [n coll] (if (>= (count coll) n) (cons (take n coll) (f n (drop n coll)))))", "user": "5d629ed9e4b0c9e5857d501d"}, {"problem": 54, "code": "(fn my-partition [num s]\n      (let [[x y] (split-at num s)]\n        (if (<= num (count x))\n          (cons x (my-partition num y)))))", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 54, "code": "#(take (quot (count %2) %1) ((fn tn [n coll] (cons (take n coll) (lazy-seq (tn n (drop n coll))))) %1 %2))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 54, "code": "(fn my-partition\n   ([x y] (my-partition x y '()))\n   ([x y z]\n    (if (< (count y) x)\n      (reverse z)\n      (recur x\n             (drop x y)\n             (conj z (take x y))))))", "user": "5d5ef0bce4b0c9e5857d4ffb"}, {"problem": 54, "code": "(fn [num seq]\n  (reverse ((fn my-partition [num seq ans]\n              (if (> num (count seq))\n                ans\n                (my-partition num (nthrest seq num) (conj ans (take num seq)))))\n            num seq '())))", "user": "5d6633bde4b0db5d338d15e2"}, {"problem": 54, "code": "(fn f\n  ([n ls] (f n ls []))\n  ([n ls acc]\n   (if (< (count ls) n)\n     acc\n     (f n (drop n ls) (conj acc (take n ls))))))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 54, "code": "(fn a[b c](if (>= (count c) b)\n   (cons (take b c) (a b (drop b c)))))", "user": "5d6523ace4b0db5d338d15cd"}, {"problem": 54, "code": "(fn parts\n  [n xs]\n  (lazy-seq\n    (let [head (take n xs)]\n      (when (= n (count head))\n        (cons head (parts n (drop n xs)))))))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 54, "code": "#(apply map list (vals (\n                        group-by \n                        \t(fn [x] (mod (.indexOf %2 x) %1))\n                        %2)))", "user": "5d5950c1e4b02ba5928a6827"}, {"problem": 54, "code": "(fn [n xs]\n  (let [ res (vals (group-by #(Math/floor (/ %1 n)) xs))]\n    (if (= n (count (last res))) res (butlast res))))", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 54, "code": "(fn my-partition [size xs]\n\t(loop [seq xs res []]\n\t\t(let [[ys zs] (split-at size seq)]\n\t\t(if (> size (count ys))\n\t\t\tres\n\t\t\t(recur zs (conj res ys))))))", "user": "5c87c79be4b048ec896c591b"}, {"problem": 54, "code": "#(loop [n %1 c %2 acc []]\n   (if (< (count c) n) acc\n                  (recur n (drop n c) (conj acc (take n c)))))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 54, "code": "(fn myfn [num list]\n  (reverse ((fn [num list result] (if (> num (count list) ) result (recur num (nthrest list num) (conj result (take num list)))) ) num list '() ) )\n)", "user": "5bc2df19e4b07a9b28b10038"}, {"problem": 54, "code": "#(filter\n  (fn [a] (= (count a) %1))\n  (reduce\n   (fn [a b]\n     (if (= (count (last a)) %1)\n       (conj a [b])\n       (assoc-in a [(- (count a) 1) (count (last a))] b)))\n   [[]]\n   %2))", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 54, "code": "#_(fn my-partition [n coll]\n  (if (> n (count coll))\n    (list)\n    (conj (my-partition n (drop n coll)) (take n coll))))\n\n(fn my-partition [n coll]\n  (if (> n (count coll))\n    (list)\n    (cons (take n coll) (my-partition n (drop n coll)))))", "user": "5d6f063de4b04d129b00f2d1"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [c coll partitioned []]\n    (if (< (count c) n)\n      partitioned\n      (recur (drop n c) (conj partitioned (take n c))))))", "user": "5d1609f9e4b0902706380dd9"}, {"problem": 54, "code": "(fn my-partition\n  ([p coll]\n   (my-partition p coll (int (/ (count coll) p)) '()))\n  ([p coll n l]\n   (if (= n 0)\n     (reverse l)\n     (recur p (drop p coll) (dec n) (conj l (take p coll))))))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 54, "code": "(fn parti [n seq]\n      (loop [res [] remain seq]\n            (if (empty? remain)\n                  res\n                  (let [taken (take n remain)]\n                        (recur (if (= (count taken) n)\n                                     (conj res taken)\n                                     res)\n                               (drop n remain))))\n            )\n      )", "user": "5d809b4fe4b0915913b1d36c"}, {"problem": 54, "code": "(fn partition-seq\n  [n coll]\n  (loop [res [] remainder coll]\n    (if (< (count remainder) n)\n      res\n      (recur (conj res (take n remainder)) (drop n remainder)))))", "user": "5d7b90ede4b02e6b30c93552"}, {"problem": 54, "code": "(fn [xth coll]\n  (filter\n  #(= xth (count %))\n  (reduce\n    (fn [coll [idx v]]\n      (let [subidx (quot idx xth)\n            cur-coll (coll subidx)]\n        (assoc coll subidx (conj cur-coll v))))\n    (vec (repeat (int (Math/ceil (/ (count coll) xth))) []))\n    (map-indexed vector coll))))", "user": "5d7eaf5fe4b0492f5d910fc3"}, {"problem": 54, "code": "(fn [x y] (loop [out [] cur [(first y)] y (rest y)] (if (empty? y) (if (= (count cur) x) (conj out cur) out) (recur (if (= (count cur) x) (conj out cur) out)(if (= (count cur) x) [(first y)] (conj cur (first y))) (rest y)))))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 54, "code": "(fn [num coll] (partition-by #(int (/ % num)) (take (- (count coll) (mod (count coll) num)) coll)))", "user": "5d88c6a3e4b0915913b1d3ad"}, {"problem": 54, "code": "(fn [n c]\n  (take-while\n    #(= n (count %))\n    (reduce (fn [acc x]\n              (let [l (last acc)]\n                (if (and l (> n (count l)))\n                  (conj (vec (butlast acc)) (conj l x))\n                  (conj acc [x]))))\n            [] c)))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [n n xs xs ret []]\n    (if (= 0 n)\n      xs\n      (if (> n (count xs))\n        ret\n        (recur n (drop n xs) (conj ret (take n xs)))))))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 54, "code": "(fn [s l]\n  (let [chunks (reduce\n                (fn [chunks curr]\n                  (if (= (count (last chunks)) s)\n                    (concat chunks [[curr]])\n                    (concat (butlast chunks) [(concat (last chunks) [curr])])))\n                [[]]\n                l)]\n    (filter #(= (count %) s) chunks)))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 54, "code": "(fn [n l] (loop [ll l result []]\n            (if (< (count ll) n)\n              result\n              (recur (drop n ll) (conj result (take n ll))))\n            ))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 54, "code": "(fn [length coll]\n  (let [vector (vec coll)\n        partitions (quot (count coll) length)]\n    (for [n (range partitions)]\n      (subvec vector (* n length) (* (inc n) length)))))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 54, "code": "(fn [size xs]\n  (->> xs\n       (repeat (int (/ (count xs) size)))\n       (map-indexed vector)\n       (map #(take size (drop (* (% 0) size) (% 1))))))", "user": "5d123457e4b02c15ef021996"}, {"problem": 54, "code": "(fn part [n coll]\n  (if (< (count coll) n) '() (conj (part n (drop n coll)) (take n coll))))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 54, "code": "(fn p [n s]\n  (when-let [s (seq s)]\n    (let [part (take n s)]\n      (when (= n (count part))\n        (lazy-seq (cons part (p n (nthrest s n))))))))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 54, "code": "(fn partitioning [size seq]\n  (loop [i 0\n         iseq '()]\n    (println \"log: \" seq i)\n    (if (>= i (quot (count seq) size))\n      iseq\n      (recur\n        (inc i)\n        (concat iseq (vector (loop [j 0\n                           jseq '()]\n                      (println \"log2: \" jseq j)\n                      (if (>= j size)\n                        jseq\n                        (recur (inc j) (concat jseq (vector (nth seq (+ j (* i size))))))))))))))", "user": "5da6cb60e4b000c986472c10"}, {"problem": 54, "code": "(fn f [n xs] (if (> n (count xs))\n               []\n               (concat [(take n xs)] (f n (drop n xs)))))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 54, "code": "(fn part [n s] (when (<= n (count s)) (cons (take n s) (part n (drop n s)))))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 54, "code": "(fn a\n  ([n s] (a n s '() '()))\n  ([n s cur res]\n   (cond\n         (= n (count cur)) (recur n s '() (conj res (reverse cur)))\n         (empty? s) (reverse res)\n         :else (recur n (rest s) (conj cur (first s)) res))))", "user": "5d931a58e4b0d3f9b434ad10"}, {"problem": 54, "code": "(fn foo [n s]\n  (->> s (map-indexed (fn [e i] [(quot i n) e])) \n       (partition-by first)\n       (map #(map second %))\n       (filter #(<= n (count %)) )\n  )\n)", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 54, "code": "(fn [n col]\n    (loop [col col res []]\n     (if (or (empty? col) (< (count col) n))\n       res\n       (recur (drop n col) (conj res (take n col)))\n       )\n     ))", "user": "5d99dc47e4b0d3f9b434ad42"}, {"problem": 54, "code": "(fn f [n col]\n  (filter #(= n (count %1)) \n  (for [i (range 0 (count col) n)]\n    (take n (drop i col)))))", "user": "5da4b152e4b000c986472bf6"}, {"problem": 54, "code": "(fn [n s]\n  (letfn [(grouped [sq] \n           (lazy-seq (cons (take n sq) \n                           (grouped (drop n sq)))))]\n    (take-while #(= (count %) n) (grouped s))))", "user": "5d1231dde4b02c15ef021995"}, {"problem": 54, "code": "(fn my-partition [size col]\n  (loop [remaining col\n         parts []]\n    (if (or (empty? remaining) (< (count remaining) size))\n      parts\n      (recur (drop size remaining) (conj parts (take size remaining))))))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll, acc []]\n    (if (< (count coll) n)\n      acc\n      (recur (drop n coll) (conj acc (take n coll))))))", "user": "5d9475e4e4b0d3f9b434ad25"}, {"problem": 54, "code": "(fn [part coll]\n  (keep-indexed (fn [i x]\n                  (when (and\n                         (>= (- (count coll) i) part)\n                         (= (mod i part) 0))\n                  (take part (drop i coll)))) coll))", "user": "5d9475e9e4b0d3f9b434ad26"}, {"problem": 54, "code": "(fn [n coll]\n(loop [c coll, result '()]\n (if (= (quot (count coll) n) (count result))\n\t  (reverse result)\n (recur (drop n c) (conj result (take n c))))))", "user": "5daec18ae4b0f8c104ccfc8c"}, {"problem": 54, "code": "(fn part-seq [n coll]\n  (if (>= (count coll) n)\n    (concat [(take n coll)] (part-seq n (drop n coll)))\n    []))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 54, "code": "(fn my-partition [n xs]\n  (loop [xs  xs\n         acc []]\n    (cond\n      (< (count xs) n) acc\n      :else            (recur (nthrest xs n)\n                              (conj acc (take n xs))))))", "user": "5db0d470e4b0f8c104ccfc9e"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll\n         held []]\n    (if (or (empty? coll) (< (count coll) n)) held\n        (recur (drop n coll) (conj held (take n coll))))))", "user": "5daeb6bce4b0f8c104ccfc8b"}, {"problem": 54, "code": "(fn [n c]   (loop [x c r []]    (if (< (count x) n)   r (recur  (drop n x) (conj r (take n x ) ) )         )                          )                        )", "user": "5da98129e4b000c986472c33"}, {"problem": 54, "code": "(fn part [n coll]\n(when-let [s (seq coll)]\n  (let [x (take n s)]\n    (when (= n (count x))\n      (cons x (part n (drop n coll)))))))", "user": "5da94ccfe4b000c986472c2f"}, {"problem": 54, "code": "#(for [i (range (int (/ (count %2) %))) :let [r (drop (* i %) %2)]]\n   (if (>= (count r) %)\n     (take % r)))", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 54, "code": "(fn f54\n  [s acc]\n  (loop [result [] new-acc acc]\n    (if (>= (count new-acc) s)\n      (recur (concat result (list (take s  new-acc))) (drop s new-acc))\n      result))\n  )", "user": "5db658ebe4b010eb3c36cd39"}, {"problem": 54, "code": "(fn [size col]\r\n  (filter\r\n   #(= size (count %))\r\n   (mapcat (fn [n]\r\n             (list (take size (drop (* n size) col))))\r\n           (range (/ (count col) size)))))", "user": "5dbd51cfe4b09f47823971bb"}, {"problem": 54, "code": "(fn [n coll]\n  (filter #(= (count %) n)\n          (partition-by #(quot (.indexOf coll %) n)\n                        coll)))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 54, "code": "(fn [k col]\n  (->> \n   \tcol\n    (reduce\n        (fn [[x & z :as result] el]\n            (cond\n              (< (count x) k) (conj z (conj x el))\n              :else (conj result (vector el))\n            )\n        )\n        '([])\n    )\n    (filter #(= (count %) k))\n    (reverse)\n  )\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 54, "code": "(fn cut[x coll](loop[coll coll\n                       ret []\n                       n 0]\n                   (println coll ret)\n                   (cond\n                     (empty? coll) (seq ret)\n                     :else (recur (drop x coll)\n                                  (cond\n                                     (= x (count(take x coll)))(conj ret(take x coll))\n                                     :else ret)\n                                  (inc n)\n                                  ))))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 54, "code": "#(loop [result []\n        source %2]\n   (if (> %1 (count source))\n     result\n     (recur (concat result (list (take %1 source))) (drop %1 source))))", "user": "5db861bce4b010eb3c36cd4b"}, {"problem": 54, "code": "#((fn [sum remaining] \n    (if (<= %1 (count remaining)) (recur (conj sum (take %1 remaining)) (drop %1 remaining)) sum)\n    ) [] %2)", "user": "5da975b9e4b000c986472c32"}, {"problem": 54, "code": "(fn [n s]\n  (let [td (juxt take drop)]\n    (loop [s s res []]\n      (let [r (td n s)]\n        (if (= n (count (first r)))\n          (recur (second r) (conj res (first r)))\n          res)))))", "user": "5da71eaee4b000c986472c15"}, {"problem": 54, "code": "(fn [ n clls]\n  (loop [n1 (- n 1) c clls re[] curr []]\n    (cond\n      (not (first c)) re\n      (= (count curr) n1) (recur n1 (rest c) (conj re (conj curr (first c))) [])\n      :else (recur n1 (rest c) re (conj curr (first c))))))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 54, "code": "(fn [n coll] (take-while #(= n (count %)) (map (partial take n) (iterate (partial drop n) coll) ) ) )", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 54, "code": "(fn [split input]\n  (let [input_trimmed (take (- (count input) (mod (count input) split)) input)]\n    (loop [input_trimmed input_trimmed\n           res []]\n      (if (empty? input_trimmed)\n        (seq res)\n        (recur (drop split input_trimmed) (conj res (take split input_trimmed)))))))", "user": "5db825b5e4b010eb3c36cd46"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (if (> n (count coll))\n    ()\n    (conj (my-partition n (drop n coll))\n          (take n coll))))", "user": "5dc40814e4b02f9375f4e1ae"}, {"problem": 54, "code": "(fn\n  [n vals]\n  (loop [result [] remaining vals next []]\n    (if (empty? remaining)\n      (filter #(= (count %) n) result)\n      (let [new-next (concat next [(first remaining)])]\n        (if (< (count new-next) n)\n          (recur result (drop 1 remaining) new-next)\n          (recur (concat result [new-next]) (drop 1 remaining) []))))))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 54, "code": "(fn [x s]\n  (loop [s s\n         result []]\n    (if (> x (count s))\n      result\n      (recur (drop x s) (conj result (take x s))))))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 54, "code": "(fn partition-seq [n coll]\n                  (loop [c coll partitioned []]\n                    (if (< (count c) n)\n                      partitioned\n                      (recur (drop n c) (conj partitioned (take n c))))))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 54, "code": "(fn f\n  ([n s] (f n s []))\n  ([n s r] (if (< (count s) n)\n             r\n             (let [[a b] (split-at n s)] (cons a (f n b))))))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 54, "code": "(fn [size coll] (->>\n                 coll\n                 (iterate (partial drop size))\n                 (take (quot (count coll) size))\n                 (map (partial take size))\n                 )\n)", "user": "5dcfdf23e4b0948ae9d9ad43"}, {"problem": 54, "code": "(fn [size coll]\n  (loop [coll coll\n         res []]\n    (if (> size (count coll))\n      res\n      (recur (drop size coll) (concat res [(take size coll)])))))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 54, "code": "(fn [len l] (filter \n              #(= (count %) len) \n              (partition-by #(quot % len) l)))", "user": "5da05bcce4b000c986472bd0"}, {"problem": 54, "code": "(fn partition-sequence [len elements]\n  (let [reduced (reduce #(let [holder (first %1)\n                               holder-len (count holder)\n                               holders %1\n                               element %2]\n                           (if (< holder-len len)\n                             (cons (cons element holder) (rest holders))\n                             (cons (list element) holders)))\n                        (list (list)) elements)]\n    ((comp reverse (partial map reverse) (partial filter #(= (count %) len))) reduced)))", "user": "5dc4719ae4b02f9375f4e1b5"}, {"problem": 54, "code": "(fn [n s]\n  (letfn [(f [[m1 m2] x]\n             (let [m3 (conj m2 x)]\n               (if (= (count m3) n)\n                 [(conj m1 m3) []]\n                 [m1 m3])))]\n    (first (reduce f [[] []] s))))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 54, "code": "(fn partition-seq [n coll]\n  (loop [rem coll\n         res []\n         curr []]\n    (if (empty? rem)\n      (if (= (count curr) n)\n        (conj res curr)\n        res)\n      (let [[head & tail] rem]\n        (if (= (count curr) n)\n          (recur tail (conj res curr) (vector head))\n          (recur tail res (conj curr head))\n          )\n\n        )\n      )\n    ))", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 54, "code": "(fn\n  [n coll]\n  (loop [result []\n         trimmed-coll (vec coll)]\n    (if (< (count trimmed-coll) n)\n      result\n      (recur (conj result (take n trimmed-coll))\n             (drop n trimmed-coll)))))", "user": "5dd65ea4e4b0948ae9d9ad7f"}, {"problem": 54, "code": "(fn sequence-partition-2\n  [n ip-sequence]\n  (let [partitioned-seq (reduce\n                         (fn [{:keys [op remaining-elements] :as acc} curr]\n                           (if (= (- n 1) (count remaining-elements))\n                             (let [elements-to-be-merged (conj remaining-elements curr)]\n                               (assoc acc :op (conj (:op acc) elements-to-be-merged)\n                                          :remaining-elements ())\n                             )\n                             (assoc acc :remaining-elements (conj (:remaining-elements acc) curr))\n                           )\n                         )\n                         {:op () :remaining-elements ()}\n                         ip-sequence)]\n    (reverse (map reverse (:op partitioned-seq)))))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 54, "code": "(fn n-part ([n s] (n-part n (drop n s) (list (take n s))))\n   ([n s out]\n    (if (< (count s) n)\n      (reverse out)\n      (n-part n (drop n s) (cons (take n s) out))))\n   )", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 54, "code": "(fn [size m-seq] (reverse (loop [acc-big ()\n                         acc-small ()\n                         xs  m-seq\n                         i 0]\n                    (if (= size i)\n                      (if (>= (count xs) size)\n                        (recur (conj acc-big (reverse acc-small)) () xs 0)\n                        (conj acc-big (reverse acc-small)))\n                      (recur acc-big (conj acc-small (first xs)) (rest xs) (inc i))))))", "user": "5de051bfe4b0948ae9d9ade5"}, {"problem": 54, "code": "(fn [x s]\n  (remove #(< (count %) x)\n          (reduce\n   (fn [acc e]\n     (println acc \" \" e)\n     (if (-> (last acc)\n             count\n             (< x))\n       (-> (into [] (drop-last acc))\n           (conj (conj (last acc) e)))\n       (conj acc [e])))\n   [[]]\n   s)))", "user": "56a9d4bbe4b07966d5a8a07b"}, {"problem": 54, "code": "(fn [n se] (reverse (loop [se se res '() n n] (if (< (count se) n) res (recur (nthrest se n) (conj res (take n se)) n)))))", "user": "5ddd3cbee4b0948ae9d9adc3"}, {"problem": 54, "code": "#(loop [current %2 ret []]\n    (if (empty? current)\n      ret\n      (recur (drop %1 current)        \n             (remove nil? (concat ret [(if (>= (count current) %1) (take %1 current))])))))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 54, "code": "(fn ptn [step -seq]\n  (let [chunk (take step -seq)]\n    (if (= (count chunk) step)\n     (lazy-seq  (cons chunk (ptn step (drop step -seq)))))))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 54, "code": "(fn part [n s]\n  (if (< (count s) n)\n    []\n    (cons (take n s) (part n (drop n s)))))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [partitioned [] part [] c 0 coll coll]\n    \n    (if (> n (+ (count coll) (count part)))\n  \t\tpartitioned\n      \t(if (= c n)\n          (recur (conj partitioned part) [(first coll)] 1 (rest coll))\n          (recur partitioned (conj part (first coll)) (inc c) (rest coll))\n        )\n    )\n  )\n)", "user": "5de6484ce4b0986d99407f66"}, {"problem": 54, "code": "(fn [x xs] (apply map list (map #(take-nth x %) (map #(nthrest xs %) (range x)))))", "user": "5de68f83e4b0986d99407f6c"}, {"problem": 54, "code": "(fn f [n col]\n  (filter #(= n (count %1)) \n  (for [i (range 0 (count col) n)]\n    (take n (drop i col)))))", "user": "5defd277e4b093ff717275b0"}, {"problem": 54, "code": "(fn [n c]\n  (loop [cc c\n         r nil]\n    (if (seq cc)\n      (recur (nthrest cc n) (cons (take n cc) r))\n      (reverse (filter #(== n (count %)) r))\n      )\n    )\n  )", "user": "529dfc6de4b04e0c58e87b8a"}, {"problem": 54, "code": "(fn [n xs]\n  (for [i (range (quot (count xs) n))]\n    (subvec (vec xs) (* i n) (* (inc i) n))))", "user": "5ddb8a6ee4b0948ae9d9adb2"}, {"problem": 54, "code": "(fn [n l] \n  (loop [result [] nxt [] l l]\n    (cond (empty? l) result\n          (= n (count \n                (conj nxt \n                      (first l))))\n          (recur (conj result \n                       (conj nxt\n                             (first l))) \n                 [] \n                 (rest l))\n          :else (recur result\n                       (conj nxt\n                             (first l))\n                       (rest l)\n          \n                 ))))", "user": "54961073e4b0b312c081ff62"}, {"problem": 54, "code": "(fn a\n  \n  ([n coll]\n     (a n n coll))\n  ([n step coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [p (doall (take n s))]\n           (when (= n (count p))\n             (cons p (a n step (nthrest s step))))))))\n  ([n step pad coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [p (doall (take n s))]\n           (if (= n (count p))\n             (cons p (a n step pad (nthrest s step)))\n             (list (take n (concat p pad)))))))))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [xs xs acc []]\n    (if (< (count xs) n)\n      acc\n      (recur (drop n xs) (conj acc (take n xs))))))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 54, "code": "(fn [n coll]\n   (loop [result []\n          coll   coll]\n     (if (empty? coll)\n       (remove #(not= (count %) n) result)\n       (recur (conj result (take n coll)) (drop n coll)))))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 54, "code": "(fn dfs [n c] (if (and (seq c) (>= (count c) n)) (cons (take n c) (dfs n (drop n c)))))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (if (< (count s) n) '()\n      (concat (list (take n s)) (my-partition n (drop n s)))))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 54, "code": "(fn sequ-partition ([num sequ] (sequ-partition num sequ []) )\n  ([num sequ xs] (let [item (take num sequ)]\n                   (if (not ( = (count item) num))\n                     xs\n                     (sequ-partition num (drop num sequ) (conj xs item))))))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll ind 0 partitioned [] part []]\n    (if (empty? coll)\n      (if (and (= ind 0) (not (empty? part))) (conj partitioned part) partitioned)\n      (recur\n       (rest coll)\n       (rem (inc ind) n)\n       (if (and (not (empty? part)) (= ind 0)) (conj partitioned part) partitioned)\n       (if (= ind 0) [(first coll)] (conj part (first coll)))\n   )\n  )\n )\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 54, "code": "(fn [x coll]\n    (let [my-partition (fn next [acc remaining]\n                  (if (seq remaining)\n                    (lazy-seq (next (conj acc (take x remaining)) (drop x remaining)))\n                    acc))]\n      (->> (my-partition '() coll)\n           (filter #(= x (count %)))\n           reverse)))", "user": "4f43b992e4b0d7d3c9f3fd2c"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [p []\n         r coll]\n    (if (< (count r) n)\n      p\n      (recur (conj p (take n r)) (drop n r)))))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 54, "code": "#(for [i (range (quot (count %2) %))] (take % (drop (* i %) %2)))", "user": "510528a0e4b0730a5f55ad85"}, {"problem": 54, "code": "#(loop [r %2\n        p []]\n   (if (>= (count r) %1)\n     (recur (drop %1 r) (conj p (take %1 r)))\n     p))", "user": "57023e92e4b08d47c97781da"}, {"problem": 54, "code": "(fn [n col]\n    (let [steps (range 0 (count col) n )\n          parts  (map  (fn [x] (take n (drop x col))) steps  )]      \n      (filter (fn [x] (= n (count x))) parts ))\n    )", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 54, "code": "(fn\n  [x col]\n  (loop [results [] col col]\n    (if (< (count col) x)\n      results\n      (recur (conj results (take x col))\n             (drop x col))\n      ))\n  )", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 54, "code": "(fn partition_ [num seq]\n  (if (>= (count seq) num)\n    (cons (take num seq) \n          (partition_ num (drop num seq)))\n    nil))", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 54, "code": "(fn part [n coll]\n    (if (< (count coll) n)\n      []\n      (concat [(take n coll)] (part n (drop n coll)))))", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 54, "code": "(fn [n coll]\n   (->>\n    (reduce \n      #(cond\n        (= nil (first %1)) (cons (vector %2) %1)\n        (< (count (first %1)) n) (cons (conj (first %1) %2) (rest %1))\n        :else (cons [%2] %1)\n        ) '() coll)\n    (filter #(= (count %1) n))\n    (reverse)\n   ))", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 54, "code": "(fn my-partition\n  ([size l] (my-partition size l []))\n  ([size l v]\n   (if (>= (count l) size)\n     (my-partition size (nthnext l size) (conj v (take size l)))\n     v)))", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 54, "code": "(fn [n seq] (loop [suffix seq parts '()] (if (< (count suffix) n) (reverse parts) (let [[next-part subsuffix] (split-at n suffix)] (recur subsuffix (conj parts next-part))))))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 54, "code": "(fn part [n col]\n  (when\n    (and (seq col) (>= (count col) n))\n    (cons (take n col) (part n (drop n col)))))", "user": "5e17509fe4b00200644e3d52"}, {"problem": 54, "code": "(fn mypart [l s]\n  (when (<= l (count s))\n  \t(cons (take l s) (mypart l (drop l s)))))", "user": "5d929ceae4b0915913b1d412"}, {"problem": 54, "code": "(fn [N col]\n             ((fn my-partition [result col]\n                (if (< (count col) N)\n                  result\n                  (recur (concat result (list (take N col))) (drop N col))))\n              '() col))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 54, "code": "(fn SequencePartition\n  ([itemNum inputSequence outputSequence]\n    (if (< (count inputSequence) itemNum)\n      outputSequence\n      (let [currentSubSequence (take itemNum inputSequence)] \n        (SequencePartition\n          itemNum\n          (remove (set currentSubSequence) inputSequence)\n          (conj outputSequence currentSubSequence)\n        )\n      )\n    )\n  )\n  ([itemNum inputSequence]\n   (SequencePartition itemNum inputSequence [])\n  )\n)", "user": "5e16b820e4b0a047bd49f71f"}, {"problem": 54, "code": "(fn __\n  [n l]\n  (let [shortened-list (-> (count l) (mod n) (drop-last l))]\n    (reduce\n      (fn append-tuple [carry item]\n        (let [last-carry (or (last carry) [])]\n          (if (-> last-carry (count) (< n))\n            (->> (conj last-carry item) (conj (pop carry)))\n            (conj carry [item]))))\n      [[]]\n      shortened-list)))", "user": "5e300655e4b05b4b01516209"}, {"problem": 54, "code": "(fn f [n col]\n  (filter #(= n (count %1)) \n  (for [i (range 0 (count col) n)]\n    (take n (drop i col)))))", "user": "5e21f944e4b05b4b0151612d"}, {"problem": 54, "code": "(fn part [n s]\n    (let [[l r]  (split-at n s)]\n      (cond\n        (not (empty? r))  (cons l (part n r))\n        (< (count l) n)   ()\n        :else             (list l))))", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 54, "code": "(fn [n xs]\n  (->> xs\n       (reduce (fn [[g & gs :as gss] x]\n                 (if (< (count g) n)\n                   (conj gs (conj g x))\n                   (conj gss [x])))\n               '([]))\n       reverse\n       (filter #(= n (count %)))))", "user": "5d47fa13e4b07c84aa5ae6b6"}, {"problem": 54, "code": "(fn part [parts coll]\n  (loop [n parts c coll result '()]\n    (if (empty? c)\n      (reverse result)\n      (recur\n        n\n        (drop n c)\n        (if (= (count (take n c)) n)\n          (conj result (take n c))\n          result)))))", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 54, "code": "#(filter (fn [s] (= (count s) %1)) \n  (reduce \n  (fn [a x]\n      (if (= (count (last a)) %1)\n        (conj a [x])\n        (conj (vec (butlast a)) (conj (last a) x))))\n    [[]] %2))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 54, "code": "(fn [n colls]\n  (loop [colls colls\n         results []]\n    (if (> n (count colls))\n      results\n      (recur (drop n colls) (conj results (take n colls))))))", "user": "5cb41c40e4b026601754b911"}, {"problem": 54, "code": "(fn f [n xs]\n   (if (< (count xs) n)\n     []\n     (concat [(take n xs)] (f n (drop n xs)))))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 54, "code": "(fn pt\n   ([n coll] (pt [] n coll))\n   ([res n coll]\n    (if\n      (< (count coll) n)\n      res\n      (recur\n        (conj res (take n coll))\n        n\n        (drop n coll))))\n   )", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 54, "code": "(fn [n coll]\n   (loop [coll coll\n          result ()]\n     (if (< (count coll) n) (reverse result)\n         (recur (drop n coll) (cons (take n coll) result)))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 54, "code": "(fn f [n xs]\n  (let [ns (take n xs)]\n    (when (= n (count ns))\n  \t  (cons ns (f n (drop n xs))))))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 54, "code": "(fn my-partial [n coll]\n  (cons (take n coll)\n        (let [rest (drop n coll)]\n          (when (>= (count rest) n)\n            (my-partial n rest))\n        )))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 54, "code": "(fn  [x coll]\n        (loop [res [] rem-coll coll]\n          (if (> x (count rem-coll))\n            res\n            (recur (conj res (take x rem-coll)) (drop x rem-coll)))))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 54, "code": "(fn answer [n list]\n  (lazy-seq\n    (let [batch (take n list)\n               size (count batch)]\n      (when (= size n)\n        (cons batch (answer n (drop n list)))\n        )\n      )))", "user": "5e491182e4b043cd24807a46"}, {"problem": 54, "code": "(fn [n coll]\n  (map first (take (quot (count coll) n) (rest (iterate #(split-at n (% 1)) [nil coll])))))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 54, "code": "(fn p [n xs]\n   (if (seq (drop (- n 1) xs))\n     (cons (take n xs)\n           (p n (drop n xs)))\n     '()))", "user": "505223fae4b0a561d07d8f17"}, {"problem": 54, "code": "(fn\n  [n coll]\n  (loop [[sub-seq more] (split-at n coll)\n         sub-seqs ()]\n    (if (< (count sub-seq) n)\n      (reverse sub-seqs)\n      (recur (split-at n more) (conj sub-seqs sub-seq)))))", "user": "5c9a638fe4b048ec896c5aae"}, {"problem": 54, "code": "(letfn\n[(partition-raw\n     [n s]\n     (if (and (seq s) (= n (count (take n s))))\n       (lazy-seq\n         (cons\n           (take n s)\n           (partition-raw n (drop n s))))))]\n  partition-raw)", "user": "5e53f8e0e4b027a2e10ac0e7"}, {"problem": 54, "code": "(fn rng [n coll]\n   (reduce (fn go [acc elem]\n             (if (= (count (last acc)) n)\n               (conj acc [elem])\n               (conj (pop acc) (conj (last acc) elem))))\n           [[]] (drop-last (mod (count coll) n) coll) )\n   )", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 54, "code": "(fn part [n xs] (cond (< (count xs) n) nil (= (count xs) n) (list xs) :else (cons (take n xs) (part n (drop n xs)))))", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 54, "code": "(fn partSeq [sizeOfPartition seq]\n  (if (>= (count seq) sizeOfPartition)\n    (cons (take sizeOfPartition seq) (partSeq sizeOfPartition (drop sizeOfPartition seq)))))", "user": "5e566668e4b027a2e10ac0f9"}, {"problem": 54, "code": "(fn my-partition [n s]\n  (:result (reduce (fn [acc x]\n             (let [new-current-partition (conj (:current-partition acc) x)]\n               (if (= (count new-current-partition) n)\n                 {:result (conj (:result acc) new-current-partition)\n                  :current-partition []}\n                 {:result (:result acc)\n                  :current-partition new-current-partition})))\n           {:result []\n            :current-partition []}\n           s)))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 54, "code": "(fn f [n c]\n    (if (not= (count (take n c)) n)\n      []\n      (cons (take n c) (f n (drop n c)))))", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 54, "code": "(fn a [n s] (when (<= n (count s)) (cons (take n s) (a n (drop n s)))))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 54, "code": "(fn [n col]\n                  ((fn [ncol col]\n                    (let [[fs ss] (split-at n col)]\n                      (if (< (count fs) n)\n                        ncol\n                        (recur (conj ncol fs) ss)))) [] col))", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 54, "code": "(fn [n coll]\n    (first (reduce (fn [[output next-partition] value]\n                     (if (>= (inc (count next-partition)) n)\n                       [(conj output (conj next-partition value)) []]\n                       [output (conj next-partition value)]))\n                   [[] []]\n                   coll)))", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 54, "code": "(fn my-part [step col]\n  ((fn part-in [col step result]\n     (let [part (take step col)]\n       (if (= (count part) step)\n         (part-in (drop step col) step (conj result part))\n         result))\n     ) col step []))", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 54, "code": "(fn [n coll]\n   (loop [coll coll\n          coll-acc '()]\n     (cond (< (count coll) n) coll-acc\n           :else\n           (recur (drop n coll)\n                  (concat coll-acc (list (take n coll)))))))", "user": "5e724492e4b085ba37836dc7"}, {"problem": 54, "code": "(fn my-partition [x xs]\n  (let [ys (take x xs)]\n    (when (= (count ys) x)\n      (cons ys (my-partition x (nthrest xs x))))))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 54, "code": "(fn [n ns]\n  (loop [acc []\n         ns ns]\n    (if (< (count ns) n)\n      acc\n      (recur (conj acc (take n ns))\n             (drop n ns)))))", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 54, "code": "(fn [n s & sa]\n  (if (< (count s) n) \n    (reverse sa)\n    (recur n (drop n s) (cons (take n s) (if (nil? sa) [] sa)))))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 54, "code": "#(loop\n  [v %2, res []]\n  (if (< (count v) %1)\n  \tres\n    (recur (drop %1 v) (conj res (take %1 v)))\n  )\n )", "user": "5e79fcb9e4b085ba37836e08"}, {"problem": 54, "code": "(fn func [n coll]\n  (:res (reduce \n         (fn [accumulated el] \n           (if (= (dec n) (count (:cur accumulated)))\n             {:res (conj (:res accumulated) (conj (:cur accumulated) el))\n              :cur []}\n             {:res (:res accumulated)\n              :cur (conj (:cur accumulated) el)}))\n         {:res [] :cur []} \n         coll)))", "user": "5e805895e4b085ba37836e44"}, {"problem": 54, "code": "(fn part\n  [n coll]\n  (cond (< (count coll) n) []\n        :else (list* (take n coll) (part n (drop n coll)))))", "user": "5e952e17e4b0fbed045a3807"}, {"problem": 54, "code": "(fn part [n s]\n  (lazy-seq\n    (let [x (take n s)]\n      (when (= n (count x))\n        (cons x (part n (drop n s)))))))", "user": "4eb70649535d7eef30807373"}, {"problem": 54, "code": "#(loop [c %2 acc '[]] \n   (if (< (count c) %1) \n     acc\n     (recur (drop %1 c) (conj acc (take %1 c)))))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 54, "code": "#(let [gr-f (fn [x] (quot x %1))\nfi-f (fn [x] (= (count (last x)) %1))]\n(->> %2\n(group-by gr-f)\n(filter fi-f)\n(vals)\n))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 54, "code": "(fn part [n coll]\n   (let [current-part (take n coll)]\n     (when (= n (count current-part))\n       (cons current-part (part n (drop n coll))))))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 54, "code": "(fn test [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (test n (drop n v))))\n  )", "user": "5e954b9ee4b0fbed045a3809"}, {"problem": 54, "code": "(fn [nitem ls]\n   (loop [l ls\n          result []]\n     (if (>= (count l) nitem)\n       (recur (drop nitem l) (conj result (take nitem l)))\n       result\n       )))", "user": "5e5f2c17e4b0fd0acd158678"}, {"problem": 54, "code": "(fn f [n xs]\n  (let [[a b] ((juxt take drop) n xs)]\n    (if (= (count a) n)\n      (cons a (f n b)))))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 54, "code": "#(loop [sq %2 pt []]\n   (if (< (count sq) %1)\n     pt\n     (recur (drop %1 sq) (conj pt (take %1 sq)))\n )\n)", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 54, "code": "(fn [n coll]\n   (loop [sp (split-at n coll)\n          f '()]\n     (println (split-at n (second sp)) (conj f (first sp)))\n     (if (>= (count f) (/ (count coll) n))\n       (filter (comp not empty?) (reverse f))\n      (recur (split-at n (second sp)) (if (= (count (first sp)) n) \n                                        (conj f (first sp))\n                                        (conj f '()))))))", "user": "5ea444b7e4b00a66d4a951a0"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [xs xs\n         acc (list)]\n    (if (empty? xs)\n      acc\n      (recur (drop n xs) (if (>= (count xs) n)\n                           (concat acc (list (take n xs)))\n                           acc)))))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 54, "code": "(fn [n xs]\n   (loop [cnt (quot (count xs) n)\n          tmp n\n          lst xs\n          res '()\n          ans '()]\n     (if (or (empty? lst) (= cnt 0))\n       (reverse ans)\n       (if (not= tmp 1)\n         (recur cnt (dec tmp)  (rest lst) (conj res (first lst)) ans)\n         (recur (dec cnt) n (rest lst) '() (conj ans (reverse (conj res (first lst)))))\n         )\n       )\n     )\n   )", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 54, "code": "(fn partition-a-sequence\n  ([x coll] (partition-a-sequence x coll []))\n  ([x coll accumulator]\n   (if (or (empty? coll) (< (count coll) x))\n     accumulator\n     (partition-a-sequence x\n                           (drop x coll)\n                           (conj accumulator (take x coll))))))", "user": "5e92adb6e4b0fbed045a37ea"}, {"problem": 54, "code": "(fn [x coll]\n  (loop [coll coll, results []]\n    (let [subs (take x coll), subslen (count subs)]\n      (if \n       (or (empty? coll) (< subslen x)) results\n       (recur (drop x coll) (conj results subs))\n       ))))", "user": "5e9f38cce4b00a66d4a9517e"}, {"problem": 54, "code": "(fn [x coll]\n  (loop [res '() src coll]\n    (if (< (count src) x) (reverse res)\n        (recur\n         (conj res (take x src))\n         (drop x src)))))", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 54, "code": "(fn [n s]\n  (loop [l s a []]\n    (if (< (count l) n) a\n        (recur (last (split-at n l)) (conj a (first (split-at n l)))))))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 54, "code": "(fn [n lst]\n   (loop [xs lst\n          i  (int (/ (count lst) n))\n          r  []]\n     (if (zero? i)\n       r\n       (recur (drop n xs) (dec i) (conj r (take n xs))))))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 54, "code": "(fn my-partition \n  ([val seq res]\n   (if (> val (count seq))\n     res\n     (my-partition val (drop val seq) (conj res (take val seq)))))\n  ([val seq]\n   (my-partition val seq []))\n  )", "user": "5e980e6be4b0157ca96647d6"}, {"problem": 54, "code": "#(->> %2\n     (iterate\n      (partial drop %1))\n     (map (partial take %1))\n     (take (quot (count %2) %1)))", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 54, "code": "(fn part2 [n coll]\n\n  (when (<= n (count coll))\n    (cons (take n coll) (part2 n (drop n coll)))\n  )\n\n)", "user": "5e9e8648e4b00a66d4a95178"}, {"problem": 54, "code": "(fn cpartition\n  [n coll]\n  (let [x (count coll)]\n    (cond\n      (= x n) (list coll)\n      (< x n) (list)\n      :else (cons (take n coll)\n                  (cpartition n (drop n coll))))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 54, "code": "(fn [n coll]\n(loop [coll coll\n         res []]\n    (if (< (count coll) n)\n      res\n      (recur (drop n coll)\n             (conj res (take n coll))))))", "user": "5defc177e4b093ff717275af"}, {"problem": 54, "code": "(fn solution [n sequen]\n  (let [partitions (vals (group-by #(int (/ %1 n)) sequen))]\n    (if (= n (count (last partitions)))\n      partitions\n      (drop-last partitions))))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 54, "code": "(fn [n coll] \n  (loop [r ()\n         coll' coll]\n    (if (or (empty? coll') (> n (count coll')))\n      (reverse r)\n      (recur (conj r (take n coll')) (drop n coll')))))", "user": "5ec2d9e5e4b00a66d4a952a0"}, {"problem": 54, "code": "(fn my-partition \n  ([n s] (my-partition n s []))\n  ([n s done]\n   (if (< (count s) n)\n     done\n     (recur n (drop n s) (conj done (take n s))))))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 54, "code": "(fn p\n  ([n x] (p n x []))\n  ([n x r]\n   (if (>= (count x) n)\n     (p n (drop n x) (conj r (take n x)))\n     r)))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 54, "code": "(fn part [num coll]\n  (if (>= (count coll) num)\n    (concat [(take num coll)] (part num (take-last (- (count coll) num) coll)))\n    []))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 54, "code": "(fn pp [n coll]\n   (let [[head tail] (split-at n coll)]\n     (when (and (seq head) (= (count head) n))\n       (cons head (pp n tail)))))", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 54, "code": "(fn f\n  ([n xs] (f [] n xs))\n  ([acc n xs]\n   (if (or (empty? xs) (< (count xs) n))\n    acc\n    (f (conj acc (take n xs))\n       n\n       (drop n xs)))))", "user": "5ec1b293e4b00a66d4a95296"}, {"problem": 54, "code": "(fn my-partition [n c]\n  (seq\n   (when (>= (count c) n)\n     (cons (take n c) (my-partition n (drop n c))))))", "user": "5ecf55dae4b016b56eae05a8"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [r [] xs xs]\n    (if (< (count xs) n) r\n        (recur (conj r (take n xs)) (drop n xs)))))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 54, "code": "(fn partition-home-made [x coll]\n   (#(if (< (count %2) x)\n       %1\n       (recur (conj %1 (take x %2)) (drop x %2))) \n     [] \n     coll))", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 54, "code": "(fn [n xs]\n  (loop [result [] r xs]\n    (if (< (count r) n)\n    \tresult\n    \t(let [f (take n r) nr (drop n r)]\n      \t\t(recur (conj result f)\n             \t\tnr)))))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 54, "code": "(fn f [n arr]\n   (if (>= (count arr) n)\n     (lazy-seq (cons (take n arr) (f n (drop n arr))))\n     )\n   )", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 54, "code": "(fn partition' [n coll]\n  (filter #(>= (count %) n )\n\t\t  (loop [res [] remaining coll]\n\t\t    (if (seq remaining)\n\t\t      (recur (conj res (take n remaining)) (drop n remaining) )\n\t\t      res))))", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 54, "code": "(fn [n coll]\n  (filter #(= n (count %))\n          (reduce (fn [coll a]\n                    (let [l (last coll)\n                          c (count l)]\n                      (cond (or (nil? l)\n                                (>= c n))\n                            (conj coll [a])\n                            :else (conj (pop coll) (conj l a)))))\n                  [] coll)))", "user": "5eccc5c2e4b016b56eae058f"}, {"problem": 54, "code": "(fn part-seq [n sq]\n  (if (>= (count sq) n)\n  \t(cons (take n sq) (part-seq n (drop n sq)))\n    nil\n    ))", "user": "5edd6eb7e4b0c7845d86b0f7"}, {"problem": 54, "code": "(fn [size li]\n  (loop [agg []\n         left li]\n    (if (< (count left) size)\n      agg\n      (recur (conj agg (take size left)) (drop size left)))))", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 54, "code": "(fn my-partition\n  [n xs]\n  (lazy-seq (cons (take n xs)\n                  (let [remain (drop n xs)]\n                    (if (>= (count remain) n)\n                      (my-partition n remain))))))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 54, "code": "(fn [c sq]\n  (let [acc_ran (fn acc_ran [[f & r] acc]\n                  (let [acc' (concat acc [f])]\n                    (if (nil? r)\n                      (if (= (count acc') c)\n                      \t(seq [acc']))\n                      (if (= (count acc') c)\n                        (cons acc' (acc_ran r []))\n                        (acc_ran r acc')))))]\n    (acc_ran sq [])))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 54, "code": "(fn my-partition [n xs]\n  (when (<= n (count xs))\n    (cons (take n xs) (lazy-seq (my-partition n (drop n xs))))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 54, "code": "#(loop [mid-res []\n        [next-sub tail] (split-at %1 %2)]\n   (if (empty? tail)\n     (if (< (count next-sub) %1)\n       mid-res\n       (conj mid-res next-sub))\n     (recur (conj mid-res next-sub) (split-at %1 tail))))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 54, "code": "#(loop [s %2 acc []]\n   (if (< (count s) %1) acc\n     (recur (drop %1 s) (conj acc (take %1 s)))))", "user": "5ebd7296e4b00a66d4a95273"}, {"problem": 54, "code": "(fn [num coll] \n    \n    (let [start-coll (vec (repeat (Math/floor (float (/ (count coll) num))) []))\n          index-of-coll-needs-num-elements (fn [c] \n                                             (reduce-kv (fn [a i v]\n                                                          (if (> a -1) a\n                                                          (if (> num (count v))\n                                                          i\n                                                          -1))) -1 c))\n          ]\n      (reduce (fn [a v] \n                (let [update-index (index-of-coll-needs-num-elements a)]\n                  (do \n                    (if (> update-index -1)\n                      (assoc a update-index (conj (get a update-index) v))\n                      a\n\n                      )\n                    )\n                \n                )) start-coll coll)\n      \n      ))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 54, "code": "(fn group-by [n s] (if\n                    (< (count s) n)\n                    '()\n                    (cons (take n s) (group-by n (drop n s)))))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 54, "code": "#(loop [r []\n        t %2]\n   (if (> % (count t)) r\n\t (recur (conj r (take % t)) (drop % t))))", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 54, "code": "(fn __\n  [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (__ n (drop n v)))))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 54, "code": "(fn partition-a-sequence [by s]\n  (map #(take by (drop (* by %) s)) (range (quot (count s) by))))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 54, "code": "(fn [x coll] \n   (loop [n 1 t coll r []] \n     (if (> n (quot (count coll) x)) \n       r \n       (recur (inc n) (drop x t) (conj r (take x t))) \n       ) \n     ) \n   )", "user": "5df08767e4b093ff717275bf"}, {"problem": 54, "code": "(fn part\n    [n coll]\n    (if (< (count coll) n)\n      '()\n      (cons (take n coll) (part n (drop n coll)))))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 54, "code": "(fn part [n xs]\n  (when (<= n (count xs))\n    (cons (take n xs) (part n (drop n xs)))))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 54, "code": "(fn partition-\n  [n coll]\n  (when-let [s (seq coll)]\n    (let [seg (take n s)]\n      (when (= (count seg) n)\n        (cons seg (partition- n (nthrest coll n)))))))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 54, "code": "#((fn [n coll acc]\n  (if-not (seq coll)\n    acc\n    (let [part (take n coll)]\n      (recur n (drop n coll) (if (= (count part) n) (concat acc [part]) acc))))) %1 %2 [])", "user": "53050c04e4b0d8b024fd3757"}, {"problem": 54, "code": "(fn part [size xs] \n  (if (< (count xs) size) \n    '()\n    (conj (part size (drop size xs)) (take size xs))))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 54, "code": "(fn [batch-size seq]\n   (let [num (quot (count seq) batch-size)]\n     ((fn helper [result count seq]\n        (if (= count num)\n          result\n          (helper (conj result (take batch-size seq))\n                  (inc count)\n                  (drop batch-size seq))\n          )\n        )\n      []\n      0\n      seq\n      )\n     ))", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 54, "code": "#(for[i (range (int ( / (count %2) %1)))](take %1 (drop (* i %1) %2)))", "user": "5a83e15ae4b00b71e582a088"}, {"problem": 54, "code": "#(let [ct (count %2)\n        sublists (reduce \n   (fn [l v] \n     (let [lst (last l) hd (pop l)]\n       (if (> (count lst) %1)\n         (into [] (concat hd (split-at %1 lst)))\n         l)))\n   (vector (into [] %2))\n   (range (Math/ceil (/ ct %1))))]\n    (if (> (mod ct %1) 0) (butlast sublists) sublists))", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 54, "code": "(fn my-partition [n coll ]\n(\n  (fn dep-process [result n-coll]\n      (if (< (count n-coll) n)\n          result\n          (dep-process (\n                         conj\n                         result\n                         (take n n-coll)\n                         ) (drop n n-coll))\n        )\n    )\n []\n coll\n )\n)", "user": "5edc16e1e4b0c7845d86b0f1"}, {"problem": 54, "code": ";; number of lists that you'll have is (quot (count s) x)\n;; the index of the list that element s_i will be in is i mod x\n\n(fn part [x s]\n  (->> (map reverse ((fn iter [rst subacc acc]\n    (cond (empty? rst) (if (= (count subacc) x)\n                         (cons subacc acc)\n                         acc)\n          (= (count subacc) x) (iter (rest rst) (list (first rst)) (cons subacc acc))\n          :else (iter (rest rst) (cons (first rst) subacc) acc)))\n   s '() '()))\n       (reverse)))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 54, "code": "(fn my-partition\n  ([n x] (my-partition n x []))\n  ([n x y]\n   (let [fpl (take n x)\n         spl (drop n x)]\n     (if (> n (count spl))\n       (conj y fpl)\n       (my-partition n spl (conj y fpl))))))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 54, "code": "(fn [size coll]\n    (loop [result []\n           remaining coll]\n      (if\n        (>= (count remaining) size)\n        (recur\n         (conj result (take size remaining))\n         (drop size remaining))\n        result)))", "user": "5f06caa7e4b0cf489e8d7f52"}, {"problem": 54, "code": "(fn [reslen, array_arg]\n\t(loop [res [], arr array_arg]\n\t\t(prn res)\n\t\t(if (< (count arr) reslen)\n\t\t\tres\n\t\t\t(recur (conj res (take reslen arr)) (drop reslen arr))\n\t\t)\n\t)\n)", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 54, "code": "(fn grab-some [x coll]\n   (println \"start\" (take x coll))\n   (println \"rest\" (nthrest coll x))\n   (if (< (count coll) (* 2 x))\n     [(take x coll)]\n     (concat [(take x coll)] (grab-some x (nthrest coll x)))))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 54, "code": "(fn [x s] (->> (range x)\n               (map #(drop % s))\n               (map #(map-indexed list %))\n               (map (partial filter #(= (rem (first %) x) 0)))\n               (map (partial map #(second %)))\n               (apply map #(apply list %&))))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 54, "code": "(fn [n sq]\n  (loop [result []\n         alist sq]\n    (if (< (count alist) n)\n      (seq result)\n      (recur (conj result (take n alist))\n             (drop n alist)))))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 54, "code": "(fn [n l]\n  (loop [l l v []]\n    (if (< (count l) n) v\n      (recur (drop n l) (conj v (take n l))))))", "user": "4eb97234535dfed6da9c6d53"}, {"problem": 54, "code": "(fn part [n c]\n  (if (> n (count c))\n    []\n    (cons (take n c) (part n (drop n c)))))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 54, "code": "(fn part [n col]\n    (if (< (count col) n)\n      ()\n      (conj (part n (drop n col)) (take n col))\n      ))", "user": "5f0e8312e4b0f30dddfb5d5b"}, {"problem": 54, "code": "(fn [n xs]\n  (for [i (range 0 (count xs) n)\n        :let [sublist (take n (drop i xs))]\n        :while (>= (count sublist) n)]\n    sublist))", "user": "5e9154c1e4b0cb0169546354"}, {"problem": 54, "code": "(fn [times coll]\n   (take-nth times (apply map list (map #(drop % coll) (range times)))))", "user": "5f247827e4b0f565ad998292"}, {"problem": 54, "code": "(fn partition-a-sequence [n s]\n  (map #(take n (drop % s))\n       (range 0\n              (* (quot (count s) n) n)\n              n)))", "user": "5f0cb4f3e4b0f30dddfb5d4e"}, {"problem": 54, "code": "(fn my-partition\n  ([x s]\n   (let [p (take x s)]\n     (if (= (count p) x)\n       (cons p (my-partition x (drop x s)))\n       nil))))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 54, "code": "(fn partition2\n  ([x coll]\n   (partition2 x coll []))\n  ([x coll p]\n   (if (> x (count coll))\n     p\n     (partition2 x (drop x coll) (conj p (take x coll))))))", "user": "5b92f178e4b0c0b3ffbd4a41"}, {"problem": 54, "code": "(fn [n s] (take-while #(= n (count %)) (map #(take n %) (iterate #(drop n %) s))))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 54, "code": "(fn my-partition\n  [n coll]\n  (if (> n (count coll))\n    nil\n    (lazy-seq (cons (take n coll) (my-partition n (drop n coll))))))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 54, "code": "(fn partition' [n coll]\n   (loop [[x & xs :as coll] coll i 0 subres [] res []]\n     (cond\n       (nil? x) (if (== i n) (conj res subres) res)\n       (< i n) (recur xs (inc i) (conj subres x) res)\n       :else (recur coll 0 [] (conj res subres)))))", "user": "5f300f28e4b033932238a682"}, {"problem": 54, "code": "(fn my-partition\n  [n coll]\n  (if (< (count coll) n)\n    []\n    (cons (take n coll) (lazy-seq (my-partition n (drop n coll)))))\n  )", "user": "5f29837ee4b033932238a64f"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [current []\n         result []\n         coll coll]\n    (cond\n     (empty? coll)\n     (if (= n (count current)) (apply list (conj result (apply list current))) (apply list result))\n     \n     (= n (count current)) (recur [] (conj result current) coll)\n     \n     :else (recur (conj current (first coll)) result (rest coll)))))", "user": "5c633df2e4b0fca0c162265c"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [result []\n         c coll]\n    (let [[a b] (split-at n c)]\n      (cond (> (count b) n)\n            (recur (conj result a) b)\n            (= (count b) n)\n            (-> result\n                (conj a)\n                (conj b))\n            (< (count b) n)\n            (-> result\n                (conj a))))))", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 54, "code": "(fn [n coll]\n  (:lst\n    (reduce (fn [resu item]\n             (let [lst (:lst resu)\n                   cur (conj (:cur resu) item)]\n               (if (= n (count cur))\n                 (assoc resu :lst (conj lst cur)\n                             :cur [])\n                 (assoc resu :cur cur))))\n           {:lst [] :cur []}\n           coll)))", "user": "535f0cbde4b04ce2eb3ed2d9"}, {"problem": 54, "code": "(fn [n coll]\n  (take-while #(<= n (count %))\n              (map (partial take n)\n                   (iterate (partial drop n) coll))))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 54, "code": "(fn part [x l]\n  (loop [n   (+ 1 x)\n         xs  l\n         acc '()\n         res '()]\n    (if (empty? xs)\n      (reverse (if (= x (count acc)) (cons (reverse acc) res) res ))\n      (if (= 1 n)\n        (recur x (rest xs) (list (first xs)) (cons (reverse acc) res))\n        (recur (- n 1) (rest xs) (cons (first xs) acc) res)))))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 54, "code": "(fn [n coll]\n  (->> coll\n    (reduce (fn [agg v] \n              (if (= (count (first agg)) n)\n                (conj agg (list v))\n                (conj (rest agg) (conj (first agg) v) )))\n            (list (list)))\n    reverse\n    (map reverse)\n    (filter #(= (count %) n))))", "user": "5f431d32e4b0955706451fb5"}, {"problem": 54, "code": "(fn part [n coll] \n       (when-let [s (seq coll)]\n         (let [p (doall (take n s))]\n           (when (= n (count p))\n             (cons p (part n (nthrest s n)))))))", "user": "5f419985e4b0955706451fab"}, {"problem": 54, "code": "(fn [n l]\n   (loop [list l\n          c n\n          temp []\n          result []]\n     (cond\n       (= c 0) (recur list n [] (conj result temp))\n       (empty? list) result\n       :else (recur (rest list) (dec c) (conj temp (first list)) result))))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 54, "code": "(fn [n S]\n  (for [i (range (quot (count S) n))]\n    (take n (nthrest S (* n i)))\n    ))", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 54, "code": "(fn [n xs]\n  (first \n   (reduce\n    (fn [[xs c] x]\n      (let [new-c (conj c x)]\n        (if (= n (count new-c))\n          (vector (conj xs new-c) [])\n          (vector xs new-c))))\n    [[] []]\n    xs)))", "user": "5f5e7158e4b02876ed9fcff0"}, {"problem": 54, "code": "(fn x-partition\n  ([n l] (x-partition n l []))\n  ([n l a] (if (<= n (count l))\n             (recur n (drop n l) (conj a (take n l)))\n             a))\n  )", "user": "58ffc6cfe4b0438e51c2d008"}, {"problem": 54, "code": ";stolen solution \n;(fn f [k xs]\n;  (if (< (count xs) k) ()\n;    (cons (take k xs) (lazy-seq (f k (drop k xs))))))  \n(fn party [len col]\n   (let [front (take len col)\n         tail (drop len col)]\n     (if (< (count tail) len)\n       [front]\n       (cons front (party len tail))\n       )\n     )\n   )", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 54, "code": "(fn part [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (part n (drop n c)))))", "user": "5f5f9483e4b02876ed9fcff8"}, {"problem": 54, "code": "(fn f [n col] \n  (filter #(= n (count %1)) \n  (for [i (range 0 (count col) n)] \n    (take n (drop i col))\n  )\n  )\n)", "user": "5f631e11e4b02876ed9fd011"}, {"problem": 54, "code": "(fn [n coll] (filter #(= (count %) n) (vals (into (sorted-map) (group-by #(quot % n) coll)))))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 54, "code": "#(:res (let [len (count %2)\n                      sq (reverse (take (- len (rem len %1)) %2))]\n                  (reduce\n                    (fn [{i :index [first & rest] :res} num]\n                      {:index (inc i)\n                       :res   (concat (if (= (mod i %1) 0)\n                                        (if (nil? first)\n                                          (list (list num))\n                                          (list (list num) first))\n                                        (list (conj first num)))\n                                      rest)})\n                    {:index 0 :res '()}\n                    sq)))", "user": "5f5a2cc6e4b0a0bc16850aa4"}, {"problem": 54, "code": "(fn my-part\n    ([n s] (my-part n s []))\n    ([n s res] (let [v (take n s)]\n        (if (not= n (count v))\n            res \n            (recur n (drop n s) (conj res v))))))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll\n         res []]\n    (if (>= (count coll) n)\n     (recur (drop n coll) (conj res (take n coll)) )\n      (seq res))))", "user": "5f65bdfde4b02876ed9fd025"}, {"problem": 54, "code": "#(loop [out '[] lseq %2] (if (> %1 (count lseq)) out (recur (conj out (take %1 lseq)) (drop %1 lseq))))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 54, "code": "(fn my-partition [n ls]\n  (when (<= n (count ls))\n    (cons  (take n ls) (my-partition n (drop n ls)))))", "user": "5f6d4305e4b02876ed9fd05c"}, {"problem": 54, "code": "(fn my-partition [num s]\n  (let [[x y] (split-at num s)]\n    (if (<= num (count x))\n      (cons x (my-partition num y)))))", "user": "5f6b61ece4b02876ed9fd051"}, {"problem": 54, "code": "(fn p [n x]\n   (when (<= n (count x))\n     (conj (p n (drop n x)) (take n x))))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 54, "code": "(fn f [n s]\n  (loop [res [] s s]\n    (let [vals (take n s)]\n      (if (not= (count vals) n)\n        res\n        (recur (conj res vals)\n               (drop n s))))))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 54, "code": "(fn p [n c] \n  (when \n    (and (seq c) \n         (>= (count c) n)) \n    (cons (take n c) \n          (p n (drop n c)))))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 54, "code": "(fn [num s]\n  (for [i (map #(* num %) (range 0 (quot (count s) num)))]\n    (take num (drop i s))\n\n    )\n  )", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 54, "code": "(fn my-part[n xs]\n        (loop [xs xs\n               acc []]\n          (if (< (count xs) n) acc\n            (recur (drop n xs) (conj acc (take n xs))))))", "user": "5f82cfcce4b0c071e6c840fb"}, {"problem": 54, "code": "(fn p [n s]\n  (if (< (count s) n) \n    nil (cons (take n s) (p n (drop n s)))))", "user": "5f5b624de4b05ea7b9adc42f"}, {"problem": 54, "code": "#(for [g (range (quot (count %2) %))]\n    (->> %2 (drop (* g %)) (take %)))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 54, "code": "(fn [l s]\n         (let [[partitions last-partition last-partition-size]\n               (reduce (fn [[result current-list current-size] e]\n                         (println {:result result :current-list current-list :current-size current-size :e e})\n                         (if (>= current-size l)\n                           [(conj result current-list) [e] 1]\n                           [result (conj current-list e) (inc current-size)]))\n                       [[] [] 0]\n                       s)]\n               (if (>= last-partition-size l)\n                 (conj partitions last-partition)\n                 partitions)))", "user": "5beadeb5e4b0f319e2d7ec88"}, {"problem": 54, "code": "(fn [interval sequence]\n  (remove #(not= (count %) interval)\n          (remove empty? (loop [cursor sequence\n                                current []\n                                output []]\n                           (if (= 0 (count cursor))\n                             (if (empty? current)\n                               output\n                               (conj output current))\n                             (let [next-current (if (= interval (count current))\n                                                  [(first cursor)]\n                                                  (conj current (first cursor)))\n                                   next-output (if (= 1 (count next-current))\n                                                 (conj output current)\n                                                 output)]\n                               (recur\n                                (rest cursor)\n                                next-current\n                                next-output))))))\n  )", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 54, "code": "#(loop [xs %2 acc []]\n     (if (< (count xs) %1)\n       acc\n       (recur (drop %1 xs) (conj acc (take %1 xs)))))", "user": "507e68abe4b085af06e3afd2"}, {"problem": 54, "code": "(fn part\n  [n s]\n  (loop [result ()\n         s s]\n    (if (< (count s) n)\n      (reverse result)\n      (recur (cons (take n s) result)\n             (drop n s)))))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 54, "code": "(fn [n a-seq]\n  (loop [l a-seq cnt n acc-1 '() acc-2 '()]\n    (if (empty? l)\n      (reverse (if (zero? cnt) (conj acc-1 (reverse acc-2)) acc-1))\n      (if (zero? cnt)\n        (recur l n (conj acc-1 (reverse acc-2)) '())\n        (recur (rest l) (dec cnt) acc-1 (conj acc-2 (first l)))))))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 54, "code": "(fn part [n coll]\n   (if (<= n (count coll))\n     (cons (take n coll)\n           (part n (drop n coll)))))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 54, "code": "(fn parti [n s]\n  (loop [s s\n         r []]\n    (if (< (count s) n)\n      r\n      (recur (drop n s) (conj r (take n s))))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 54, "code": "(fn partition-seq [n ns]\n  (when (and (seq ns) (<= n (count ns)))\n    (cons (take n ns) (partition-seq n (drop n ns)))))", "user": "5e8c3e8fe4b0cb0169546322"}, {"problem": 54, "code": "(fn [n xs]\n  (->> (range (* (quot (count xs) n) n))\n       (partition-by #(quot % n))\n       (map #(map (fn [n] (nth xs n)) %))))", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [res []\n         coll coll]\n    (if (< (count coll) n)\n      res\n      (recur (conj res (take n coll))\n             (drop n coll)))))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 54, "code": "(fn my-partition\n  [n seq]\n  (loop [result '() temp-seq seq]\n    (if (> n (count temp-seq))\n      (reverse result)\n      (recur (conj result (take n temp-seq)) (drop n temp-seq)))))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 54, "code": "(fn mm-part2 [i c]\n  (when (>= (count c) i)\n    (cons (take i c) (mm-part2 i (drop i c)))))", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 54, "code": "(fn part [n coll]\n  (if (>= (count coll) n)\n    (cons (take n coll) (part n (drop n coll)))\n    []))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 54, "code": "(fn pt [n xs]\n  (let [next (take n xs)]\n  (if (< (count next) n)\n    nil\n    (lazy-seq (cons next (pt n (drop n xs)))))))", "user": "5fa8424ce4b0fa27300f3de5"}, {"problem": 54, "code": "(fn partition-ku [n xs]\n    (when (and (not (empty? xs)) (>= (count xs) n))(cons (take n xs) (partition-ku n (drop n xs)))))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 54, "code": "(fn [n coll]\n      (->>\n       (reduce\n        (fn [all-cols item]\n          (let [current-col (first all-cols)]\n            (prn current-col item all-cols n (count current-col))\n            (if (< (count current-col) n)\n              (conj\n               (drop 1 all-cols)\n               (conj current-col item))\n\n              ;; trim point\n              (conj all-cols (list item))\n              )))\n        '()\n        coll\n        )\n       (reverse)\n       (map reverse)\n       (filter #(= (count %) n))))", "user": "58db48a5e4b0a4d5acaab679"}, {"problem": 54, "code": "#(loop [r [[(first %2)]] s (rest %2)] (println r s)\n    (cond (empty? s) (filter (fn [i] (= %1 (count i))) r)\n          (= %1 (count (last r))) (recur (conj r [(first s)]) (rest s))\n          :else (recur (conj r (conj (last r) (first s))) (rest s))))", "user": "5f9c4113e4b0715f5002d821"}, {"problem": 54, "code": "(fn f [n col]\n  (filter #(= n (count %1)) \n  (for [i (range 0 (count col) n)]\n    (take n (drop i col)))))", "user": "5face7fce4b08cb800c85ae9"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 54, "code": "(fn my-partition [n coll]\n   (if (>= (count coll) n)\n     (cons (take n coll) (my-partition n (drop n coll)))))", "user": "5fb544f6e4b08cb800c85b4e"}, {"problem": 54, "code": "#(loop [remaining %2\n        result []]\n       (let [first-n (take %1 remaining)]\n            (if (< (count first-n) %1)\n              result\n              (recur\n                (drop %1 remaining)\n                (conj result first-n)))))", "user": "5f331015e4b0574c87022c37"}, {"problem": 54, "code": "(fn [n xs] (letfn [(part [c ys acc]\n                     (if (> c (count ys)) \n                       acc\n                       (part c (drop c ys) (conj acc (take c ys)))\n                       ))]\n             (part n xs [])\n             ))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 54, "code": "#(loop[result [], remaining %2]\n   (if (>= (count remaining) %1)\n     (recur (conj result (take %1 remaining)) (drop %1 remaining))\n     result))", "user": "5fbe40bce4b03f550f448246"}, {"problem": 54, "code": "(fn by-n[n s]\n    (lazy-seq\n     (take (if (< (count s) n) 0 (count s))\n           (cons (take n s)\n                 (by-n n (drop n s))))))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 54, "code": "#(loop [result []\n       x %2]\n  (if (< (count x) %1)\n    result\n    (recur (conj result (take %1 x)) (drop %1 x))\n    ))", "user": "5fae3d8ae4b08cb800c85afa"}, {"problem": 54, "code": "(fn [n collection]\n  (loop [acc [] curr (first collection) coll (rest collection) streak []]\n    (if (nil? curr)\n      (if (= (count streak) n)(conj acc streak) acc )\n      (if (= (count streak) n)\n        (recur (conj acc streak) curr coll [])\n        (recur acc (first coll) (rest coll) (conj streak curr))))))", "user": "5fac50f4e4b08cb800c85ae5"}, {"problem": 54, "code": "(fn p [n l] (if (< (count l) n) () \n            (concat (list (take n l))\n                    (p n (drop n l)))))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 54, "code": "(fn [n s]\n  ((fn iter [cur rst]\n     (cond (and (empty? rst) (= n (count cur))) (list cur)\n           (empty? rst) nil\n           (< (count cur) n) (iter (conj cur (first rst)) (rest rst))\n           (= (count cur) n) (cons cur (iter [(first rst)] (rest rst))))) [] s))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [curr [] res [] xs coll]\n    (let [x (first xs)]\n      (cond\n        (nil? x) res\n        (= (count curr) (dec n))  (recur [] (conj res (conj curr x)) (rest xs))\n        :else (recur (conj curr x) res (rest xs))))))", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 54, "code": "(fn f [n xs]\n  (if (empty? xs)\n    nil\n    (filter #(= n (count %)) (cons \n             (take n xs) \n             (f n (drop n xs))))))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [ret []\n         curr coll]\n    (if (< (count curr) n)\n      ret\n      (recur (conj ret (first (split-at n curr)))\n             (second (split-at n curr))))))", "user": "5f90aeefe4b0715f5002d799"}, {"problem": 54, "code": "(fn partition' [n xs] (lazy-seq (when (<= n(count xs)) (cons (take n xs) (partition' n (drop n xs))))))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 54, "code": "(fn p[n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (when (>= (count coll) n)\n    (cons (take n coll) (my-partition n (drop n coll)))))", "user": "4f6d23cde4b07046d9f4efc6"}, {"problem": 54, "code": "(fn [n l]\n  (->> (partition-by #(quot % n) l)\n       (filter #(= n (count %)))))", "user": "5fe5a64de4b05ac5b16ea187"}, {"problem": 54, "code": "(fn [n s]((group-by count (vals (group-by #(quot % n) s))) n))", "user": "5e042dede4b0a607a9a45d69"}, {"problem": 54, "code": "(fn [n xs] (->> (range (* n (quot (count xs) n)))\n                (map #(vector % (nth xs %)))\n                (partition-by #(quot (first %) n))\n                (map #(map second %))))", "user": "5fe0d4d4e4b05ac5b16ea164"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [coll coll\n         l '()]\n    (if (>= (count coll) n)\n      (recur (drop n coll) (into l (list (take n coll))))\n      (reverse l))))", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 54, "code": "(fn [n v]\n  (map\n    #(apply list %)\n    (filter\n      #(= (count %) n)\n      (reduce\n        #(if (= (count (last %1)) n)\n          (conj %1 [%2])\n          (conj (into [] (drop-last %1)) (conj (last %1) %2)))\n        [[]]\n        v))))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 54, "code": "(fn f [n s]\n        (let [ns (take n s)]\n          (if (< (count ns) n)\n            '()\n            (cons ns (lazy-seq (f n (drop n s)))))))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 54, "code": "(fn part [n coll]\n  (let [aux (fn [result remainder]\n              (if (< (count remainder) n) result\n                  (recur (conj result (take n remainder)) (drop n remainder))))] (aux [] coll )))", "user": "5fe362d9e4b05ac5b16ea179"}, {"problem": 54, "code": "(fn a[b sq]\n  (when (>= (count sq) b)\n    (conj (a b (drop b sq)) (take b sq))))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 54, "code": "(fn [n xs] (take-while #(<= n (count %)) (map (partial take n) (iterate (partial drop n) xs))))", "user": "5fc4e1f0e4b036c570ed8145"}, {"problem": 54, "code": "(fn [size s]\n    (loop [partitions  [], left s]\n        (if (empty? left)\n            (filter #(= size (count %)) partitions)\n            (recur (conj partitions (take size left))\n                   (drop size left)))))", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 54, "code": "(fn p [l xs]\n  (let [p1 (take l xs)]\n    (if (< (count p1) l) nil\n        (cons (take l xs) (p l (drop l xs))))))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 54, "code": "(fn [k seq]\n   (loop [i 1 temp '() ans '() currSeq seq]\n     (\n       if (> i (count seq))\n       (reverse ans)\n       (if (zero? (mod i k))\n         (do\n           (let [temp1 (conj temp (first currSeq))]\n             (recur (inc i) '() (conj ans (reverse temp1) ) (rest currSeq))\n             )\n          \n           )\n         (do\n           (recur (inc i) (conj temp (first currSeq)) ans (rest currSeq))\n           )\n         )\n       )\n     )\n   )", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 54, "code": "(fn part [n s] \n   (if (or (empty? s) (> n (count s)))\n     nil\n     (cons (take n s) (part n (drop n s)))))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 54, "code": "(fn [num-items-each s] \n  \n  (loop [result [] tail (rest s) temp-part [(first s)]]\n    \n    (let [head (first tail)]\n      \n      (if (nil? head)\n        ; See if I need to do something at the base case\n        \n        (if (= temp-part num-items-each)\n          (conj result temp-part)\n          result\n          )\n        \n        ; Recursive case\n        \n        (if (= (count temp-part) (dec num-items-each)) \n          \n          ; Add temp-part to the results and restart temp-part\n          (recur (conj result (conj temp-part head)) (rest tail) [])\n          ; Bump temp-part\n          (recur result (rest tail) (conj temp-part head))\n          \n          \n          ) ; if end\n        \n        \n        ) ; if end\n      \n      \n      ) ; let end \n    \n    \n    ) ; loop end\n  \n  \n  ) ; fn end", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 54, "code": "(fn [n col]\n    (loop [rest-c col\n           ans []]\n      (if (< (count rest-c) n)\n        ans\n        (recur (drop n rest-c)\n               (conj ans (take n rest-c))))))\n;; (fn [x s]\n;;     (map #(take x (drop % s))\n;;          (range 0 (- (count s) x -1) x)))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 54, "code": "(fn [x seq]\n   (->>\n     seq\n     ((fn doit [rest-of-seq] (if (>= (count rest-of-seq) x) (concat [(take x rest-of-seq)] (doit (drop x rest-of-seq))) nil)))))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 54, "code": "(fn mypartition [n sq]\n  (let [tmp (reduce (fn [a x]\n                      (if (= n (count (:curr a)))\n                        {:out (conj (:out a) (:curr a)) :curr [x]}\n                        (update-in a [:curr] conj x))\n                      ) {:out [] :curr []} sq)]\n      (if (= (count (:curr tmp)) n)\n        (conj (:out tmp) (:curr tmp))\n        (:out tmp))\n      )\n  )", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 54, "code": "(fn [size lst]\n  (for [i (range 0 (int (/ (count lst) size)))] \n    (take size (drop (* i size) lst))\n    )\n  )", "user": "6004c750e4b074f607df6645"}, {"problem": 54, "code": "(fn [parts seq]\n(->>(loop [n parts a seq newseq '()]   \n    (if (> n (count a)) newseq \n       (if (= (count a) 0) newseq\n        (recur n \n            (drop n a) \n                (conj newseq (take n a))))))\n                (reverse)))", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 54, "code": "#(loop [remaining %2\n        result []]\n    (let [chunk (take %1 remaining)]\n      (if (< (count chunk) %1)\n        result\n        (recur (drop %1 remaining) (conj result chunk)))))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 54, "code": "(fn foo [n s]\n    (filter #(= (count %) n)\n        (loop [s s\n               i 0\n               acc []]\n            (if (empty? s)\n                acc\n                (let [x (first s)\n                      s' (rest s)\n                      i' (rem (+ i 1) n)\n                      acc' (if (= i 0)\n                               (conj acc [x])\n                               (conj (pop acc) (conj (last acc) x)))]\n                    (recur s' i' acc'))))))", "user": "600ae927e4b074f607df6689"}, {"problem": 54, "code": "(fn p [n c]\n(when (and (seq c) (>= (count c) n))\n(cons (take n c) (p n (drop n c)))))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 54, "code": "(fn f\n  [n col]\n  (let [xs (take n col)\n        ys (drop n col)]\n    (if (< (count ys) n)\n      (list xs)\n      (cons xs (f n ys)))))", "user": "5da7176ae4b000c986472c13"}, {"problem": 54, "code": "(fn [n col]\n  (loop [s (take n col) c (drop n col) r []]\n    (if (empty? s)\n      r\n      (recur (take n c) (drop n c) (if (< (count s)n ) r (conj r s))))))", "user": "600cb742e4b074f607df6696"}, {"problem": 54, "code": "(fn f [n xs]\n  (when (>= (count xs) n)\n    (let [[ys zs] (split-at n xs)]\n      (cons ys (f n zs)))))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 54, "code": "(fn my-partition [len se]\n  (filter (fn [elm] (= len\n                       (count elm)))\n          (lazy-seq (when-let [s (seq se)]\n                      (cons (take len s)\n                            (my-partition len (drop len s)))))))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 54, "code": "(fn partition' [n coll]\n  (when (>= (count coll) n)\n    (cons (take n coll) (partition' n (drop n coll)))))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 54, "code": "(fn my-part [n s]\n  (->> (loop [m 0 ret []]\n    (if (> m (count s))\n      ret\n      (recur (+ n m) (conj ret (take n (drop m s))))))\n       (filter #(= n (count %)))\n       \n       ))\n\n;; this is cool!\n;; #(first (partition-by count (map (partial map first) (partition-by last (map list %2 (mapcat (partial repeat %1) (range)))))))\n\n;; this is also cool :)\n;; (fn [x s]\n;;  (map #(take x (drop % s)) (range 0 (- (count s) x -1) x)))", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 54, "code": "(fn [x lst] (loop [lst lst\n                   res ()] \n              (if (< (count lst) x) \n              \tres\n              \t(recur (drop x lst) (concat res [(take x lst)])) )))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 54, "code": "(fn [n xs] (let [candidates (reduce \n                              (fn [coll e]\n                                (let [last-coll (last coll)]\n                                  (if (< (count last-coll) n)\n                                      (conj coll (conj last-coll e))\n                                      (conj coll [e])))) [[]] xs)]\n                    (filter (fn [x] (= (count x) n)) candidates)))", "user": "52fa250ee4b047fd55836ff3"}, {"problem": 54, "code": "(fn [n coll]\n  (let [num-iters (int (/ (count coll) n))]\n    (for [i (range num-iters)]\n      (take n (nthrest coll (* i n))))))", "user": "5e68f6dde4b04a83ad7cd268"}, {"problem": 54, "code": "(fn [y coll]\n   (->>\n    (reduce\n     (fn [xs x]\n       (if (< (count (last xs)) y)\n         (update-in xs [(dec (count xs))] #(conj % x))\n         (conj xs [x])))\n     [[]]\n     coll)\n    (filter #(= (count %) y))))", "user": "5f4fe1fae4b0a0bc16850a5c"}, {"problem": 54, "code": "(fn my-partition [n v]\n  (if (>= (count v) n)\n    (cons (take n v) (my-partition n (drop n v)))))", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 54, "code": "(fn [n l]\n  (filter\n    #(= (count %) n)\n      (reduce\n        (fn [acc ele]\n          (let [ la (first (take-last 1 acc))]\n            (if (< (count la) n)\n              (concat (drop-last 1 acc) [(conj la ele)] )\n              (concat acc [[ele]] ))))\n        [[]]\n        l)))", "user": "602049b8e4b0bf4ca6b10961"}, {"problem": 54, "code": "(fn part [n ls]\n  (let [h (take n ls)\n        t (drop n ls)]\n    (cond (< (count h) n) ()\n      :else (conj (part n t) h))))", "user": "60228147e4b0d5df2af22202"}, {"problem": 54, "code": "(fn f [n col]\n  (filter #(= n (count %1)) \n  (for [i (range 0 (count col) n)]\n    (take n (drop i col)))))", "user": "6022844de4b0d5df2af22203"}, {"problem": 54, "code": "#(loop [lst %2\n        res []]\n   (println lst res)\n   (if (< (count lst) %1)\n     res\n     (recur (drop %1 lst) (conj res (take %1 lst)))))", "user": "60096aabe4b074f607df667f"}, {"problem": 54, "code": "#(loop [s %1\n         d %2\n         f []]\n    (println d)\n    (if (< (count d) s)\n      f\n      (recur\n        s\n        (drop s d)\n        (conj f (take s d)))))", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 54, "code": "(fn partition' [size sq]\n  (when (<= size (count sq))\n    (cons (take size sq)\n          (partition' size (drop size sq)))))", "user": "56aad4f7e4b03c432f187338"}, {"problem": 54, "code": "(fn mypart [n szn]\n  (loop [s szn c 1 p '() pa '()]\n  (println (str s c p pa))\n    (cond (empty? s) (if (= n (count pa)) (concat p (list pa)) p)\n      \t\t(= c n) (recur (rest s) 1 (concat p (list (concat pa (list (first s))))) '())\n          :else (recur (rest s) (inc c) p (concat pa (list (first s))))\n          )))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 54, "code": "(fn doon [n s]\n  (->> (loop [m 0 ret []]\n         (if (> m (count s)) ret (recur (+ n m) (conj ret (take n (drop m s))))\n                             ))\n       (filter #(= n (count %)))))", "user": "5fdb8657e4b05ac5b16ea133"}, {"problem": 54, "code": "(fn [l s]\n  (->> s\n       (iterate (partial drop l))\n       (map (partial take l))\n       (take-while #(= l (count %)))))", "user": "5baba1ece4b0a20761a23482"}, {"problem": 54, "code": "(fn part [n x] (if (>= (count x) n) (cons (take n x)(part n (drop n x)))))", "user": "60329afce4b0d5df2af222b8"}, {"problem": 54, "code": "(fn [part s]\n  (loop [coll s\n         acc []]\n    (if (< (count coll) part)\n      acc\n      (recur (drop part coll) (conj acc (take part coll))))))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 54, "code": "(fn my-partition [n sequence]\n  (loop [s sequence\n         part []\n         res []\n         i 0]\n    (if (empty? s)\n      (if (= i n)\n        (conj res part)\n        res)\n      (if (= i n)\n        (recur (rest s) [(first s)] (conj res part) 1)\n        (recur (rest s) (conj part (first s)) res (inc i))))))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [acc []\n         lef coll]\n    (if (> n (count lef))\n      \tacc\n    \t(recur (conj acc (take n lef)) (drop n lef)))))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 54, "code": "#(loop [c %2\n        n []\n        x %]\n   (if (< (count c) x)\n     n\n     (recur (drop x c) (conj n (take x c)) x)))", "user": "5d62ce13e4b0c9e5857d501f"}, {"problem": 54, "code": "(fn [sub-sequence-size xs]\n  (loop [sub-sequences []\n         -sequence     xs]\n    (if (< (count -sequence) sub-sequence-size)\n      sub-sequences\n      (recur\n       (conj sub-sequences (take sub-sequence-size -sequence))\n       (drop sub-sequence-size -sequence)))))", "user": "603e9cb6e4b0d5df2af22317"}, {"problem": 54, "code": "(fn [n cl]\n  (loop [res '()\n         rst cl]\n    (if (< (count rst) n)\n      res\n      (recur (concat res (list (take n rst)))\n             (drop n rst)))))", "user": "60436423e4b02d28681c77a3"}, {"problem": 54, "code": "(fn foo [x ranga]\n        (cond (empty? ranga) nil\n              (< (count ranga ) x) nil\n            :else (conj  (foo x (drop x ranga)) (take x ranga))\n            ))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 54, "code": "(fn pb [n xs]\n  (let\n    [part (take n xs)\n     r (drop n xs)]\n    \n    (if (= (count part) n)\n      (cons part (pb n r))\n      nil)))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 54, "code": "(fn [n l]\n   (seq (loop [sl l\n               ch []\n               ans []]\n          (cond\n            (empty? sl) ans\n            \n            (= (count ch) (dec n)) \n            (recur (rest sl) [] (conj ans (seq (conj ch (first sl)))))\n\n            :else (recur (rest sl) (conj ch (first sl)) ans)))))", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 54, "code": "(fn f [n col]\n  (filter #(= n (count %1)) \n  (for [i (range 0 (count col) n)]\n    (take n (drop i col)))))", "user": "5fc1c424e4b0edf42a5593d0"}, {"problem": 54, "code": "(fn f [n coll] \n  ((fn iter [i coll tc res] \n     (cond\n      (empty? coll) (if (= n (count tc)) (concat res (list tc)) res)\n      (< i n) (iter (inc i) (rest coll) (concat tc (list (first coll))) res)\n      :else (iter 1 (rest coll) (list (first coll)) (concat res (list tc)))\n      )\n     ) 0 coll () ())\n  )", "user": "60471241e4b02d28681c77c9"}, {"problem": 54, "code": "(fn [x y] \n   (map \n    #(drop (* x %) (take (* x (+ 1 %)) y)) \n    (range (quot (count y) x))))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 54, "code": "(fn partition1 [n coll]\n  (take (quot (count coll) n) (map #(take n %) (iterate #(drop n %) coll))))", "user": "60460824e4b02d28681c77bc"}, {"problem": 54, "code": "(fn demoseven [value1 value2]\n  (when (and (seq value2) (>= (count value2) value1))\n    (cons (take value1 value2) (demoseven value1 (drop value1 value2)))))", "user": "60504383e4b056659d6341fa"}, {"problem": 54, "code": "(fn f\n   ([n coll]\n    (f n (rest coll) [] [(first coll)]))\n   ([n coll rs cur]\n    (let [pred (= (count cur) n)\n          x    (first coll)]\n      (if (empty? coll)\n        (if pred (conj rs cur) rs)\n        (recur n\n               (rest coll)\n               (if pred (conj rs cur) rs)\n               (if pred [x] (conj cur x)))))))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 54, "code": "(fn [s l]\n  (loop [cl l\n         r '()]\n    (if (< (count cl) s)\n      (reverse r)\n      (recur (drop s cl) (cons (take s cl) r)))))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 54, "code": "(fn p [n coll]\n  (lazy-seq\n    (let [h (take n coll)]\n      (when (= (count h) n)\n        (cons h (p n (nthrest coll n)))))))", "user": "6020365ae4b0bf4ca6b10960"}, {"problem": 54, "code": "(fn foo\n  ([n xs] (foo n xs []))\n  ([n xs rs]\n   (let [[hs ts] (split-at n xs)]\n     (if (= n (count hs))\n       (recur n ts (conj rs hs))\n       rs))))", "user": "598e7998e4b02b9968b84d34"}, {"problem": 54, "code": "(fn my-partition\n  [n s]\n  (loop [xs s\n         result []]\n    (if (empty? xs)\n      result\n      (recur (drop n xs)\n             (if (>= (count xs) n)\n               (conj result (take n xs))\n               result)))))", "user": "4e586949535d8a8b8723a292"}, {"problem": 54, "code": "(fn [size coll]\n        (reverse\n          (map reverse\n               (filter\n                 #(= (count %1) size)\n                 (reduce\n                   (fn [accumulator next]\n                       (cond\n                         (= accumulator (empty accumulator)) (conj accumulator (list next))\n                         (= (count (first accumulator)) size) (conj accumulator (list next))\n                         :else (conj (rest accumulator) (conj (first accumulator) next))))\n                   '()\n                   coll)))))", "user": "5db012e3e4b0f8c104ccfc95"}, {"problem": 54, "code": "(fn rec [n xs]\n  (if (> n (count xs)) '()\n    (let [[t d] ((juxt take drop) n xs)]\n      (cons t (rec n d)))))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 54, "code": "(fn __ [n xs]\n  (loop [in xs out []]\n    (if (<= n (count in))\n      (recur (nthrest in n) (conj out (take n in)))\n      out)))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 54, "code": "(fn\n  [n s]\n  (letfn [(partition-reduce [n s rs] (if (>= (count s) n) (partition-reduce n (drop n s) (conj rs (take n s))) rs))]\n    (partition-reduce n s [])))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 54, "code": "(fn [s xs]\n   (loop [s  s\n          xs xs\n          current []\n          result []]\n     (if xs\n       (let [f (first xs)\n             c (if (< (count current) s)\n                 (conj current f)\n                 [f])\n             r (if (= (count c) s)\n                 (conj result c)\n                 result)]\n         (recur s (next xs) c r))\n       result)))", "user": "5d5c2730e4b09db18d4482ea"}, {"problem": 54, "code": "(fn [k xs]\n    (loop [xs xs ys []]\n      (if (< (count xs) k)\n        ys\n        (recur (drop k xs)\n               (conj ys (take k xs))))))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 54, "code": "(fn my-partition\n  [x input-seq]\n  (lazy-seq\n   (let [chunk (take x input-seq)]\n     (when (>= (count chunk) x)\n       (cons chunk (my-partition x (drop x input-seq)))))))", "user": "6066266de4b069485764ddd2"}, {"problem": 54, "code": "(fn [n coll]\n   (loop [result []\n          [head tail] (split-at n coll)]\n     (if (= (count head) n)\n       (recur (conj result head) (split-at n tail))\n       result\n       )))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 54, "code": "(fn foo [n s] \r\n  (let [[a b] (split-at n s)]\r\n    (if (< (count b) n)\r\n      (list a)\r\n      (conj (foo n b) a))))", "user": "606e0a42e4b069485764de19"}, {"problem": 54, "code": "(fn my-partition [n xs] (if (>= (count xs) n)\n                           (cons (take n xs) (my-partition n (drop n xs)))))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 54, "code": "(fn part [n col]\n  (let [c (count col)\n        vcol (into [] (take (- c (mod c n)) col))]\n    (reduce-kv (fn [acum i x] \n                 (assoc acum (int (/ i n)) (conj (or (get acum (int (/ i n))) []) x))) \n               [] vcol)))", "user": "60606490e4b03746e80ebf67"}, {"problem": 54, "code": "(fn partition-a-sequence\n   [x coll]\n   (loop [coll coll\n          result []]\n     (if (or (< (count coll) x) (empty? coll) false)\n       result\n       (recur (drop x coll) (conj result (take x coll))))))", "user": "60631c2ee4b069485764ddbd"}, {"problem": 54, "code": "(fn partition-a-seq\n  ([x coll]\n   (partition-a-seq x (drop x coll) [(take x coll)]))\n  ([x coll new-coll]\n   (if (< (count coll) x)\n     new-coll\n     (recur x (drop x coll) (conj new-coll (take x coll))))))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 54, "code": "(fn part [n s]\n    (let [[x y] (split-at n s)]\n      (when (= (count x) n)\n        (cons x (part n y)))))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 54, "code": "(fn my-part [n coll]\n  (let [[prefix suffix] (split-at n coll)]\n    (when (= n (count prefix))\n      (conj (my-part n suffix) prefix))))", "user": "606b16b8e4b069485764ddf7"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "606ff89be4b069485764de22"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (->> coll\n    (map-indexed (fn [idx itm] [(quot idx n) itm]))\n    (group-by first)\n    (vals)\n    (map (fn [pairs] (map last pairs)))\n    (filter #(= (count %) n))))", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 54, "code": "(fn my-partition [l seq]\n  (loop [segs []\n         rst seq]\n    (if (>= (count rst) l)\n      (recur (conj segs (take l rst)) (drop l rst))\n      segs)))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 54, "code": "(fn split [n ins]\n  (loop [c 0\n         [e & rest, :as whole] ins\n         tmp-group []\n         acc []]\n\n    (cond\n      (and (= c n) (nil? e))\n      (conj acc tmp-group)\n      (nil? e)\n      acc\n      (< c n)\n      (recur\n        (inc c)\n        rest\n        (conj tmp-group e)\n        acc)\n      :else\n      (recur\n        0\n        whole\n        []\n        (conj acc tmp-group)))))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 54, "code": "(fn my-partition [n xs] \n  (loop [ res [] subres [(first xs)]   i 1] (if (= i (count xs)) (if (= 0 (rem (count subres) n)) \n                                                                   (conj  res subres) res)\n                                                     (if (= 0 (rem (count subres) n))         \n                                                       (recur  (conj res  subres)  [(nth xs i)] (inc i)) (recur res (conj subres (nth xs i)) (inc i)) )     )))", "user": "6076adb2e4b069485764de60"}, {"problem": 54, "code": ";(fn [n coll]\n;  (filter\n;   #(= n (count %))\n;   (reduce\n;    (fn [result elem]\n;      (let [current (last result)\n;            head (butlast result)]\n;        (if (= n (count current))\n;          (conj result [elem])\n;          (conj (vec head) (conj (vec current) elem)))))\n;    []\n;    coll)))\n(fn part [n coll]\n  (lazy-seq\n   (if-let [s (seq coll)]\n     (let [p (take n s)]\n       (if (= n (count p))\n         (cons p (part n (drop n s))))))))", "user": "60794173e4b0a637ed78035d"}, {"problem": 54, "code": "(fn [n rando-seq]\n  (loop [x rando-seq y '()]\n    (if (< (count x) n)\n      (reverse y)\n      (recur (drop n x) (conj y (take n x))))))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 54, "code": "(fn [n coll]\n  (let [f (fn [x] (<= n (count x)))]\n    (loop [c coll r []]\n      (if (empty? c)\n        r\n        (recur (nthrest c n) (if (f c) (conj r (take n c)) r))))))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 54, "code": "(fn [n coll] (map #(take n (drop (* % n) coll)) (range (quot (count coll) n))))", "user": "602c30e3e4b0d5df2af2226f"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (loop [out-coll [] rem-coll coll]\n    (if (>= (count rem-coll) n)\n      (recur (conj out-coll (take n rem-coll)) (drop n rem-coll))\n      out-coll)))", "user": "608256d7e4b0736b099e42da"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 54, "code": "(fn part [x y] (if (>= (count y) x) (cons (take x y) (part x (drop x y)))))", "user": "607e1c1fe4b03d835a6eaed8"}, {"problem": 54, "code": "(fn part [numb coll]\n    (->> coll\n         (drop numb)\n         (part numb)\n         (cons (take numb coll))\n         (take-while (complement empty?))\n         lazy-seq\n         (filter #(= (count %) numb))))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 54, "code": "(fn [n seq]\n  (let [parts (inc (int (Math/floor (/ (count seq) n))))]\n    (map #(->> seq\n               (split-at (* n %))\n               (first)\n               (take-last n))\n         (range 1 parts))))", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 54, "code": "#(for [x (range (int (/ (count %2) %1)))]\n   (take %1 (drop (* x %1) %2)))\n\n;;(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 54, "code": "(fn part [x coll]\n  (->> (reduce (fn [[cur res] [i e]]\n                 (if (= (dec x) (mod i x))\n                   [[] (conj res (seq (conj cur e)))]\n                   [(conj cur e) res]))\n               [[] []]\n               (map vector (range) coll))\n       (second)\n       (seq)))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 54, "code": "(fn [n arr]\n  (loop [res [] items arr]\n    (if (< (count items) n)\n      res\n      (recur (conj res (take n items)) (drop n items))\n      )\n    \n    )\n  )", "user": "6093b56ce4b00e9e6653c3e0"}, {"problem": 54, "code": "(fn part[n xs]\n  (loop [ys xs\n         out []]\n    (let [zs (take n ys)]\n      (if (= n (count zs))\n        (recur (drop n ys) (conj out zs))\n        out))))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 54, "code": "(fn my-partition [n coll]\n  (loop [result []\n         source coll]    \n    (if (< (count source) n) \n      result \n      (recur (conj result (take n source))\n             (drop n source)))))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 54, "code": "(fn my-partition [n col]\n  (loop [in col out []]\n    (if (or (empty? in) (< (count in) n))\n      out\n      (recur (drop n in) (conj out (take n in))))))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 54, "code": "(fn p-54 [n xs]\n   (let [[head tail] ((juxt take drop) n xs)]\n     (when (<= n (count xs)) (cons head (p-54 n tail)))))", "user": "5fb46916e4b08cb800c85b46"}, {"problem": 54, "code": "(fn p-54 [n xs]\n  (let [head (take n xs)\n        tail (drop n xs)]\n    (when (<= n (count xs))\n      (concat (list head) (p-54 n tail)))))", "user": "5fb3bd04e4b08cb800c85b3a"}, {"problem": 54, "code": "(fn [n coll]\n   (->> coll\n        (take (-> (/ (count coll) n) int (* n)))\n        (reduce (fn [[i res] v]\n                  (println res)\n                  [(inc i) (update-in res [(int (/ i n))] concat (list v))])\n                [0 []])\n        second\n        seq))", "user": "609e01afe4b00e9e6653c420"}, {"problem": 54, "code": "(fn f [n coll]\n    (cons (take n coll) (if (>= (count coll) (* 2 n))\n                          (f n (drop n coll))\n                          nil)))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 54, "code": "(fn p [n c] (when (and (seq c) (>= (count c) n)) (cons (take n c) (p n (drop n c)))))", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 54, "code": "(fn [ p coll ]\n   (let [max (- (count coll) (rem (count coll) p))]\n     (loop [c (take max coll) new-c []]\n       (if (empty? c)\n         new-c\n         (recur (drop p c) (conj new-c (take p c)))))))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 54, "code": "(fn my-partition\n  [n coll]\n  (let [current-partition (take n coll)]\n    (when (= n (count current-partition))\n      (cons current-partition (lazy-seq (my-partition n (drop n coll)))))))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 54, "code": "(fn spotpart [n s]\n    ((fn spotparth [t, r, result]\n       (if (< (count t) n)\n         result\n         (spotparth (take n r) (drop n r) (concat result (list t))))) (take n s) (drop n s) '()))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 54, "code": "(fn sequence-of-list\n  [n coll]\n  (lazy-seq \n   (when (>= (count coll) n)\n   (cons (take n coll) (sequence-of-list n (nthnext coll n))))))", "user": "608c270ae4b03bd49d9f36b3"}, {"problem": 54, "code": "(fn [size xs]\n  (loop [ret nil, xs xs]\n    (if (< (count xs) size)\n      ret\n      (recur (concat ret (list (take size xs)))\n             (drop size xs)))))", "user": "5db35f85e4b010eb3c36cd22"}, {"problem": 54, "code": "(fn kpart [n items]\n  (if (< (count items) n)\n    nil\n    (cons (take n items) (kpart n (drop n items)))))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 54, "code": "(fn [n s]\n  (loop [res [] coll s]\n    (if (< (count coll) n)\n      res\n      (recur (conj res (take n coll))\n             (drop n coll)))))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 54, "code": "(fn [n coll]\n  (loop [acc []\n         coll coll]\n    (if (< (count coll) n)\n      acc\n      (recur (conj acc (take n coll))\n             (drop n coll)))))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 54, "code": "#(let [res (reduce (fn [coll item] (if (> %1 (-> coll last count))\n                            ;(conj (butlast coll) (conj (last coll) item))\n                                      (conj (-> coll butlast vec) (-> coll last (conj item) vec))\n                                      (conj coll [item])))\n                    []\n                    %2)]\n    (if (< (count (last res)) %1)\n      (butlast res)\n      res))", "user": "60ac91c5e4b00e9e6653c485"}, {"problem": 54, "code": "(fn my-partition [number coll]\n  (if (<= number (count coll))\n    (cons (take number coll) (my-partition number (drop number coll)))))", "user": "60bb21d5e4b0e0fa5f1b4281"}, {"problem": 54, "code": "(fn [num s]\n  (loop [remaining s result []]\n    (if ( < (count remaining) num)\n      result\n      (recur (drop num remaining) (conj result (vec (take num remaining)))))))", "user": "60b8b0f8e4b0e0fa5f1b425c"}, {"problem": 54, "code": "(fn my-partition [x y]\n   (if (-> y (count) (< x))\n     ()\n     (cons (take x y) (my-partition x (drop x y)))))", "user": "6093cc08e4b00e9e6653c3e1"}, {"problem": 54, "code": "(fn [n sq]\n  (loop [res '()\n         xs sq]\n    (if (or (empty? xs) (< (count xs) n))\n      (reverse res)\n      (recur (cons (take n xs) res) (drop n xs)))))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 54, "code": "(fn hey [z y x]\n   (if (>= (count x) y)\n    (hey (conj z (take y x)) y (drop y x))\n     z)) []", "user": "60b3b375e4b0e0fa5f1b4232"}, {"problem": 54, "code": "(fn [n ran]\n       (loop [i 0 rem ran res []]\n         (if (<= n (count rem))\n           (recur (+ i n) (drop n rem) (conj res (take n rem)))\n           res)))", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 54, "code": "(fn\n  [n coll]\n  (let [raw-partitioned (reduce (fn [partitioned elem]\n             (let [last-partition (vec (last partitioned))]\n               (if (> n (count last-partition))\n                 (into (vec (drop-last partitioned))\n                       [(conj last-partition elem)])\n                 (into partitioned [[elem]]))))\n           []\n           coll)]\n    (if (> n (count (last raw-partitioned)))\n      (drop-last raw-partitioned)\n      raw-partitioned)))", "user": "60b1add0e4b0e0fa5f1b4227"}, {"problem": 54, "code": "(fn partition-sequence [n s]\n  (let [num-elems (count s)\n        num-partitions (quot num-elems n)]\n    (map #(->> (drop % s)\n               (take n))\n         (map #(* % n) (range num-partitions)))))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 54, "code": "(fn [n s]\n   (->> (rest s)\n        (reduce\n         #(if (< (count (first %1)) n)\n            (cons (cons %2 (first %1)) (rest %1))\n            (cons (list %2) %1))\n         (->> (first s) list list))\n        reverse\n        (map #(reverse %))\n        (filter #(= (count %) n))))", "user": "5fa80c01e4b0fa27300f3de2"}, {"problem": 54, "code": "(fn f [n l]\n          (if (<= n (count (drop n l)))\n            (cons (take n l) (f n (drop n l)))\n            [(take n l)]))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 54, "code": "(fn [ct lst]\n     (remove nil? (map (fn [x] \n            (if (<= (+ x ct) (inc (last lst)))\n            (range x (+ x ct))))\n       (take-nth ct lst))))", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 54, "code": "(fn [x s]\n  ((fn [x s res]\n     (if (< (count s) x)\n       (reverse res)\n       (recur x (drop x s) (conj res (take x s))))) x s '()))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 54, "code": "(fn f_1 [n col]\n  (if (>= (count col) n)\n    (\n     cons \n     (take n col)\n     (f_1 n (drop n col)))\n    ))", "user": "60c9a411e4b0e0fa5f1b4307"}, {"problem": 54, "code": "(fn partition-a-sequence\r\n  [a x]\r\n  ;; returns sequence of lists of x items each.\r\n  (let \r\n   [f (fn f [n v] (if\r\n                   (= v []) nil\r\n                   (cons (take n v) (f n (drop n v)))))]\r\n  (filter #(= (count %) a) (f a x))))", "user": "60c86bbde4b0e0fa5f1b42fb"}, {"problem": 54, "code": "(fn my-partition[n xs]\n  (lazy-seq\n   (if (< (count xs) n)\n     '()\n     (cons\n      (take n xs) (my-partition n (drop n xs))))))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 54, "code": "(fn part2 [size lst]\n  (filter (fn eq_size [s] (= (count s) size)) (vals (group-by (fn div-size [x] (quot x size)) lst )))\n)", "user": "600b385ce4b074f607df668d"}, {"problem": 54, "code": "(fn my-partition\n  ([n coll]\n   (my-partition [] n coll))\n  ([res n coll]\n   (if (< (count coll) n)\n     (apply list res)\n     (recur (conj res (take n coll))\n            n\n            (drop n coll)))))", "user": "60c43b20e4b0e0fa5f1b42c9"}]